homepage: https://github.com/joelburget/easytest
changelog-type: markdown
hash: b819be42963118f61d955b5554fa83ce53442f942e322a4b8a75412d71ff9ed1
test-bench-deps:
  base: -any
  easytest: -any
maintainer: Joel Burget <joelburget@gmail.com>
synopsis: Simple, expressive testing library
changelog: ! '## 0.2.1 (10/24/2018)


  * [Fix build errors for GHC 8.6](https://github.com/joelburget/easytest/commit/9bb30ec16671c0ec74835a52290b6508143a368f),
  [prevent building on GHC before 7.10](https://github.com/joelburget/easytest/pull/15/commits/f6d0ac50fa5a351a30b576567306121d67c0973a)

  * [Only print emojis for Unicode-capable terminals](https://github.com/joelburget/easytest/commit/e3f12612df46a6367693fd4ad47eedf91c35a079)


  ## 0.2 (3/27/2018)


  * [`expectRight` now shows `Left`s. `expectRightNoShow` replicates the old functionality.](https://github.com/joelburget/easytest/commit/c2d5dccc97dcdb925ebc39c36fcde9ff8d894f77)

  * [Call stacks now longer show EasyTest porcelain.](https://github.com/joelburget/easytest/commit/0b7064915a5b9c9de0115ebb6fc2fa49b2c4776e)

  * [`expectJust` and `expectRight` now return unit](https://github.com/joelburget/easytest/commit/ef5d4e9fd03c1008c810ee09a4f4c459d4e26bdb)


  ## 0.1.1 (3/25/2018)


  * [Add ghc 7.10.3 compatibility.](https://github.com/joelburget/easytest/commit/4acfad507cefc3fb2c0d588f1fbe0e4d583a762d)

  * [allow async 2.2, ghc 8.4 compatibility](https://github.com/joelburget/easytest/commit/6c20c18988dd756d8088c9d0318b597be15c9229)

  * [build with latest stackage nightly](https://github.com/joelburget/easytest/commit/2ea7f7520b39ac74b576414e4e1df75f596ed7b4)


  ## 0.1 (3/6/2018)


  Initial release.

'
basic-deps:
  stm: ! '>=2.4 && <3'
  base: ! '>=4.8 && <=5'
  text: ! '>=1.2 && <1.3'
  async: ! '>=2.1 && <=2.3'
  containers: ! '>=0.4.0 && <0.7'
  mtl: ! '>=2.0.1 && <2.3'
  transformers: ! '>=0.4.2'
  random: ! '>=1.1 && <2'
  call-stack: ! '>=0.1'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
author: Joel Burget, Paul Chiusano
latest: 0.2.1
description-type: haddock
description: ! "EasyTest is a simple testing toolkit, meant to replace most uses of
  QuickCheck, SmallCheck, HUnit, and frameworks like Tasty, etc. Here's an example
  usage:\n\n> module Main where\n>\n> import EasyTest\n> import Control.Applicative\n>
  import Control.Monad\n>\n> suite :: Test ()\n> suite = tests\n>   [ scope \"addition.ex1\"
  $ expect (1 + 1 == 2)\n>   , scope \"addition.ex2\" $ expect (2 + 3 == 5)\n>   ,
  scope \"list.reversal\" . fork $ do\n>       -- generate lists from size 0 to 10,
  of Ints in (0,43)\n>       -- shorthand: listsOf [0..10] (int' 0 43)\n>       ns
  <- [0..10] `forM` \\n -> replicateM n (int' 0 43)\n>       ns `forM_` \\ns -> expect
  (reverse (reverse ns) == ns)\n>   -- equivalent to `scope \"addition.ex3\"`\n>   ,
  scope \"addition\" . scope \"ex3\" $ expect (3 + 3 == 6)\n>   , scope \"always passes\"
  $ do\n>       note \"I'm running this test, even though it always passes!\"\n>       ok
  -- like `pure ()`, but records a success result\n>   , scope \"failing test\" $
  crash \"oh noes!!\" ]\n>\n> -- NB: `run suite` would run all tests, but we only
  run\n> -- tests whose scopes are prefixed by \"addition\"\n> main = runOnly \"addition\"
  suite\n\nThis generates the output:\n\n> Randomness seed for this run is 5104092164859451056\n>
  Raw test output to follow ...\n> ------------------------------------------------------------\n>
  OK addition.ex1\n> OK addition.ex2\n> OK addition.ex3\n> ------------------------------------------------------------\n>
  âœ…  3 tests passed, no failures! \U0001F44D \U0001F389\nThe idea here is to write
  tests with ordinary Haskell code, with control flow explicit and under programmer
  control."
license-name: MIT
