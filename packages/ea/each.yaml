homepage: https://github.com/dramforever/each#readme
changelog-type: ''
hash: 62798b2989bd5a2ac4bb60f691c7ce9da9488502c340c2e842a86fa0b9941cd1
test-bench-deps:
  base: -any
  hspec: -any
  each: -any
  QuickCheck: -any
maintainer: dramforever@live.com
synopsis: Template Haskell library for writing monadic expressions more easily
changelog: ''
basic-deps:
  base: ! '>=4.9 && <5'
  dlist: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 1.1.0.0
- 1.1.1.0
author: dramforever
latest: 1.1.1.0
description-type: markdown
description: ! "# each\n\nInspired by [the Scala library of the same name](https://github.com/ThoughtWorksInc/each),\neach
  is a Template Haskell library that transforms expressions containing\ninvocations
  of impure subexpressions into do-notation. Just mark your impure\nsubexpressions
  with `bind` or `~!` and they will be called appropriately,\nas in this small demo:\n\n
  \   ghci> :m Each\n    ghci> $(each [| \"Hello, \" ++ (~! getLine) |])\n    World
  \             <--[keyboard input]\n    \"Hello, World\"\n\nWith the `ApplicativeDo`
  GHC extension, calls to `fmap` and `<*>` will be\narranged so that you don't need
  to worry if you use, say, Haxl and needs\n`Applicative` for parallelism.\n\nMost
  constructs where this would make things much more simpler are already\nsupported.
  In particular, these are okay:\n\n- Nested `bind`s.\n- Branching constructs, even
  if the branches themselves uses `bind`. The\ngenerated `do`-notation will generally
  match imperative intuition.\n\nThese are some quirks:\n\n- `let` expressions are
  evaluated sequentially. `each` currently lacks support\nfor detecting pure `let`
  expressions.\n- `where` is not implemented.\n- Parameters to lambda functions may
  not be used impurely. This is acceptable,\nbut the error message may be confusing:\n\n
  \       ghci> :m Each\n        ghci> $(each [| (\\x -> bind x) |])\n\n        <interactive>:25:3:
  error:\n        • The exact Name ‘x_acBv’ is not in scope\n        Probable cause:
  you used a unique Template Haskell name (NameU),\n        perhaps via newName, but
  did not bind it\n        If that's it, then -ddump-splices might be useful\n        •
  In the untyped splice: $(each [| (\\ x -> bind x) |])\n\n  Also, `bind`s in the
  lambda will be run when the lambda is *constructed*,\nnot when it's called.\n- `PatternGuard`,
  `LambdaCase` and a few other extensions (uncertain) are not\nyet implemented.\n\nIf
  you find something wrong, or really want some feature, feel free to leave an\nissue.\n\n##
  How it works\n\nThe basic structure of an `each` block is this:\n\n```haskell\n$(each
  [| ... |])\n```\n\nInside of this block, three (interchangable) ways are used to
  mark impure\nsubexpressions:\n\n- `bind expr`\n- `bind $ expr`\n- `(~! expr)`\n\n`do`-notation
  is generated according to left-to-right order, and branching is\nhandled.\n\n##
  More demos\n\nA more detailed demo:\n\n    ghci> :m Each\n    ghci> :{\n        |
  $(each [|\n        |   \"Hey it works\"\n        |   ++ show (length $\n        |
  \    \"something\"\n        |     ++ (~! readFile \"/etc/issue\")\n        |     ++
  (~! readFile \"/etc/issue.net\"))\n        | |])\n        | :}\n    \"Hey it works64\"\n\nNested
  binds also work as expected.\n\n    ghci> :m Each\n    ghci> prompt str = putStrLn
  str *> getLine\n    ghci> $(each [| \"Nah just \" ++ (~! prompt (\"What's \" ++
  bind getLine ++ \"?\")) |])\n    something          <--[keyboard input]\n    What's
  something?\n    nothing            <--[keyboard input]\n    \"Nah just nothing\"\n"
license-name: BSD-3-Clause
