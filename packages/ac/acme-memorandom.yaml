homepage: https://github.com/ion1/acme-memorandom
changelog-type: markdown
hash: 9693ad1835ed3252c9991496688e842c0e43d7e81565d60c607e6ff2df5ed223
test-bench-deps: {}
maintainer: Johan Kiviniemi <devel@johan.kiviniemi.name>
synopsis: Memoized random number generation
changelog: ! '# 0.0.3 (2015-05-16)


  * Rename System.Random.MemoRandom as System.Random.Memoized.

  * Re-export System.Random from System.Random.Memoized.

  * Add benchmarking results to the documentation.


  # 0.0.2 (2015-05-15)


  * Implement memoized randomRs'', randoms'', randomRIO'', randomIO''.


  # 0.0.1 (2015-05-14)


  * Initial release.

'
basic-deps:
  base: ==4.*
  MemoTrie: ==0.6.*
  random: ==1.*
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
author: Johan Kiviniemi <devel@johan.kiviniemi.name>
latest: 0.0.3
description-type: markdown
description: ! '# `acme-memorandom`


  [![Hackage](https://budueba.com/hackage/acme-memorandom)](https://hackage.haskell.org/package/acme-memorandom)


  A library for generating random numbers in a memoized manner. Implemented as a

  lazy table indexed by serialized [`StdGen`][StdGen]. Monomorphism is used to

  facilitate memoization, users should adapt their design to work with random

  [`Int`][Int] values only.


  [StdGen]: http://hackage.haskell.org/package/random/docs/System-Random.html#t:StdGen

  [Int]:    https://hackage.haskell.org/package/base/docs/Prelude.html#t:Int


  In a benchmark, the initial generation of 100000 random `Int`s took 10.30

  seconds and consumed 2.5 gigabytes of memory. Generating the 100000 `Int`s

  again from the same seed only took 2.06 seconds, a 5-fold speedup thanks to

  memoization!


  Incidentally, generating the 100000 `Int`s with the non-memoized function took

  0.12 seconds, but that of course lacks all the benefits of memoization.

'
license-name: MIT
