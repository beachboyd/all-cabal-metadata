homepage: https://github.com/marcosdumay/acme-kitchen-sink
changelog-type: markdown
hash: 101524283fd53c808ee42249d7efdce09f0b8dbc8782d20ca7456eee31fed927
test-bench-deps: {}
maintainer: marcos@marcosdumay.com
synopsis: A place for dumping that does-not-feel-right code while you improve it
changelog: ! "# Revision history for acme-kitchen-sink\n\n## 0.1.0.0  -- 2017-02-21\n\n\t*
  Open issue #1: Reverse of fmap \"lifting\" behavior\n\t* Open issue #2: Monoid generalization
  of Alternative generators\n\t* Open issue #3: Category Monoids\n"
basic-deps:
  base: ! '>=4.9 && <4.10'
all-versions:
- 0.1.0.0
author: Marcos Dumay de Medeiros
latest: 0.1.0.0
description-type: markdown
description: ! "Do you have code you feel that should be shared on some library, but\ncan't
  pin down on how it should be named, or structured? Are you\nreusing tools that you
  are uncertain if optimal, or even if they solve\nthe right problem? Does everything
  seem in place, aligned, within\nreach, and yet you just can't grab that bird?\n\nIf
  so, this package is for you.\n\n# acme-kitchen-sink\n\nA place for dumping that
  does-not-feel-right code while you talk about it and\nmake it good enough for somewhere
  else.\n\nOur SLA provides at a minimum an unlimited supply of rubber ducks¹ to\nhelp²
  you settle your open issues.\n\n## Contributing\n\nEvery piece of code must be related
  to an open issue, with its number\npointed by at the code documentation comments.\n\nThe
  library must compile at all times.\n\nCode should preferentially have names that
  do not conflict with well\nused libraries, so people can better play with and evaluate
  it. When\nunsure, feel free to add `Acme` modules at any namespace.\n\nTry to keep
  extensions restricted to modules and non-conflicting.\n\nThis library is compiled
  with -Wall e -Wwarn-incomplete-patterns. Feel\nfree to disable warnings in modules
  when necessary. Just don't let\nthem spill into the terminal.\n\nIf you are in doubt
  if your code is good enough for this package, it\nis. Open your issues and send
  a PR.\n\n## Usage\n\nReally??\n\nThe best practices manual for using this library
  follows:\n\n> Don't.\n>\n> If you really insist, refrain from it.\n\nAlthough copying
  and pasting code from here into your project *may* be\nsafe. Do it carefully. And
  tell about it on the respective issues and\nsubscribe to them.\n\nWhat more can
  I say? In fact, I can say a lot!\n\nNobody ever got fired³ by choosing `acme-kitchen-sink`.\n\nIf
  deployment is necessary, `acme-catapult` may be an invaluable tool\nfor achieving
  very deterministic outcomes. If `acme-catapult` turns\nout to be too restrictive
  for your needs, the Acme Jet Propulsion Lab\nwill gladly provide a series of products
  that will grant all the\nneeded flexibility for your kitchen-sink deployment procedures,
  just\nmake sure to be physically present at every stage.\n\nAnyway, whatever deployment
  method is chosen, make sure to account for\nthe low latency and high responsivity
  of the deployment target. Also\nensure you have a direct path connecting you to
  the target, as there\nhave been many reports of problems with unreliable tunnels
  and\nunexpected traffic surges within them.\n\nYou too can join the club of happy
  acme-kitchen-sink users. See what\nsome of our most famous users have to say about
  it and get a feel for\nthe kind of experiences acme-kitchen-sink can bring for you:\n\n>
  \"Acme-kitchen-sync feels like home! The overall architecture, the\n> long reaching
  conventions, the enforced structure, the unity of\n> design, the well thought-out
  decisions. Everything in it reminds my\n> favorite programming environment.\"\n>\n>
  -- Proud PHP Programmer\n\n---\n\n>  \"It was about time that lazy compiler started
  to give me *options*!\n>  I'm used to tools that relentless look for ways to help
  me, and\n>  keep me informed of all necessary details. Only after I imported\n>
  \ acme-kitchen-sink I started getting my usual amount of error\n>  tracing information
  at compile time. I'll tell you - I don't miss\n>  templates anymore.\"\n>\n> --
  Converted C++ Coder\n\n---\n\n> \"Out there on the road, there are no safe places,
  no retreats, no\n> margin for error. Out there you'll suffer on every unpatched
  hole,\n> every virtual construction will turn against you, you will\n> eventually
  hit every boulder on your way, or it will hit you!\n>\n> It's a dog-eat-bird world
  out there, and on those situations you\n> need nothing but *predictability*. That's
  why I use Acme, and the\n> kitchen-sink didn't bring any less of it - it gets exactly
  the same\n> quality of results I've grown to expect from any other Acme tool, no\n>
  more, no less; no disappointments, no surprises.\n>\n> I can only say one thing
  about `acme-kitchen-sink`: __Would use again!__\"\n>  \n> -- Willie C. - Certified
  Acme Product Deployer Expert (APDE)\n\n----\n\n## Is this Serious?\n\nWell, yes,
  just not too serious.\n\nI do think there is a need for a space for sharing uncertain
  code and\ntalking about it. This package provides it.\n\n## Small Print\n\n1 - May
  contain rubber.\n\n2 - A duck insanity surcharge applies for any rubber duck gone
  mad in\nconsequence of high level Math sorcery.\n\n3 - Acme declines any responsibility
  from semantic confusion emanating\nfrom the similarity of that word with \"burned\",
  \"smashed\", \"exploded\",\n\"electrocuted\" or \"dropped out of a cliff\". Acme
  also declines any\nresponsibility from iconic confusion by the similarity of the\npreviously
  mentioned icon and \"fired at\", that although sharing many\nvisual properties must
  not replace the above single standing,\nprepositionless adjective.\n"
license-name: BSD-3-Clause
