homepage: ''
changelog-type: markdown
hash: 77cf19a667092e6e57ec7e0ad0080ed1c678a73fb8fe79077bb853d5931357fd
test-bench-deps: {}
maintainer: Trevor L. McDonell <tmcdonell@cse.unsw.edu.au>
synopsis: Accelerate backend for NVIDIA GPUs
changelog: ! "# Change Log\n\nNotable changes to the project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)
  and the\nproject adheres to the [Haskell Package Versioning\nPolicy (PVP)](https://pvp.haskell.org)\n\n##
  [1.1.0.0] - 2017-09-21\n### Added\n * support for GHC-8.2\n * caching of compilation
  results ([accelerate-llvm#17])\n * support for ahead-of-time compilation (`runQ`
  and `runQAsync`)\n\n### Changed\n * generalise `run1*` to polyvariadic `runN*`\n\n###
  Fixed\n * Fixed synchronisation bug in multidimensional reduction\n \n\n## [1.0.0.1]
  - 2017-05-25\n### Fixed\n  * [#386] (partial fix)\n\n## [1.0.0.0] - 2017-03-31\n
  \ * initial release\n\n\n[1.1.0.0]:              https://github.com/AccelerateHS/accelerate-llvm/compare/1.0.0.0...HEAD\n[1.0.0.1]:
  \             https://github.com/AccelerateHS/accelerate-llvm/compare/1.0.0.0...1.0.0.1\n[1.0.0.0]:
  \             https://github.com/AccelerateHS/accelerate-llvm/compare/be7f91295f77434b2103c70aa1cabb6a4f2b09a8...1.0.0.0\n\n[#386]:
  \                https://github.com/AccelerateHS/accelerate/issues/386\n\n[accelerate-llvm#17]:
  \  https://github.com/AccelerateHS/accelerate-llvm/issues/17\n\n"
basic-deps:
  bytestring: ! '>=0.10.4'
  base: ! '>=4.7 && <4.11'
  time: ! '>=1.4'
  unordered-containers: ! '>=0.2'
  fclabels: ! '>=2.0'
  cuda: ! '>=0.8'
  filepath: ! '>=1.0'
  process: ! '>=1.4.3'
  dlist: ! '>=0.6'
  accelerate-llvm: ==1.1.*
  containers: ! '>=0.5 && <0.6'
  accelerate: ==1.1.*
  llvm-hs-pure: ! '>=4.1 && <5.2'
  llvm-hs: ! '>=4.1 && <5.2'
  mtl: ! '>=2.2.1'
  hashable: ! '>=1.2'
  file-embed: ! '>=0.0.8'
  deepseq: ! '>=1.3'
  nvvm: ! '>=0.7.5'
  pretty: ! '>=1.1'
  template-haskell: -any
  directory: ! '>=1.0'
all-versions:
- '1.0.0.0'
- '1.0.0.1'
- '1.1.0.0'
author: Trevor L. McDonell
latest: '1.1.0.0'
description-type: markdown
description: ! "An LLVM backend for the Accelerate Array Language\n=================================================\n\n[![Build
  Status](https://travis-ci.org/AccelerateHS/accelerate-llvm.svg)](https://travis-ci.org/AccelerateHS/accelerate-llvm)\n[![Hackage](https://img.shields.io/hackage/v/accelerate-llvm.svg)](https://hackage.haskell.org/package/accelerate-llvm)\n[![Docker
  Automated build](https://img.shields.io/docker/automated/tmcdonell/accelerate-llvm.svg)](https://hub.docker.com/r/tmcdonell/accelerate-llvm/)\n[![Docker
  status](https://images.microbadger.com/badges/image/tmcdonell/accelerate-llvm.svg)](https://microbadger.com/images/tmcdonell/accelerate-llvm)\n\nThis
  package compiles Accelerate code to LLVM IR, and executes that code on\nmulticore
  CPUs as well as NVIDIA GPUs. This avoids the need to go through `nvcc`\nor `clang`.
  For details on Accelerate, refer to the [main repository][GitHub].\n\nWe love all
  kinds of contributions, so feel free to open issues for missing\nfeatures as well
  as report (or fix!) bugs on the [issue tracker][Issues].\n\n  [GitHub]:  https://github.com/AccelerateHS/accelerate\n
  \ [Issues]:  https://github.com/AccelerateHS/accelerate/issues\n\n\n * [Dependencies](#dependencies)\n
  * [Docker](#docker)\n * [Installing LLVM](#installing-llvm)\n   * [Homebrew](#homebrew)\n
  \  * [Debian/Ubuntu](#debianubuntu)\n   * [Building from source](#building-from-source)\n
  * [Installing Accelerate-LLVM](#installing-accelerate-llvm)\n   * [libNVVM](#libNVVM)\n\n\nDependencies\n------------\n\nHaskell
  dependencies are available from Hackage, but there are several external\nlibrary
  dependencies that you will need to install as well:\n\n * [`LLVM`](http://llvm.org)\n
  * [`libFFI`](http://sourceware.org/libffi/) (if using the `accelerate-llvm-native`
  backend for multicore CPUs)\n * [`CUDA`](https://developer.nvidia.com/cuda-downloads)
  (if using the `accelerate-llvm-ptx` backend for NVIDIA GPUs)\n\n\nDocker\n------\n\nA
  [docker](https://www.docker.com) container is provided with this package\npreinstalled
  (via stack) at `/opt/accelerate-llvm`. Note that if you wish to use\nthe `accelerate-llvm-ptx`
  GPU backend, you will need to install the [NVIDIA\ndocker](https://github.com/NVIDIA/nvidia-docker)
  plugin; see that page for more\ninformation.\n\n```sh\n$ docker run -it tmcdonell/accelerate-llvm\n```\n\n\nInstalling
  LLVM\n---------------\n\nWhen installing LLVM, make sure that it includes the `libLLVM`
  shared library.\nIf you want to use the GPU targeting `accelerate-llvm-ptx` backend,
  make sure\nyou install (or build) LLVM with the 'nvptx' target.\n\n## Homebrew\n\nExample
  using [Homebrew](http://brew.sh) on macOS:\n\n```sh\n$ brew install llvm-hs/homebrew-llvm/llvm-4.0\n```\n\n##
  Debian/Ubuntu\n\nFor Debian/Ubuntu based Linux distributions, the LLVM.org website
  provides\nbinary distribution packages. Check [apt.llvm.org](http://apt.llvm.org)
  for\ninstructions for adding the correct package database for your OS version, and\nthen:\n\n```sh\n$
  apt-get install llvm-4.0-dev\n```\n\n## Building from source\n\nIf your OS does
  not have an appropriate LLVM distribution available, you can also build from source.
  Detailed build instructions are available on the [LLVM.org website](http://releases.llvm.org/4.0.0/docs/CMake.html).
  Note that you will require at least [CMake 3.4.3](http://www.cmake.org/cmake/resources/software.html)
  and a recent C++ compiler; at least Clang 3.1, GCC 4.8, or Visual Studio 2015 (update
  3).\n\n  1. Download and unpack the [LLVM-4.0 source code](http://releases.llvm.org/4.0.0/llvm-4.0.0.src.tar.xz).
  We'll refer to\n     the path that the source tree was unpacked to as `LLVM_SRC`.
  Only the main\n     LLVM source tree is required, but you can optionally add other
  components\n     such as the Clang compiler or Polly loop optimiser. See the [LLVM
  releases](http://releases.llvm.org/download.html#4.0.0)\n     page for the complete
  list.\n\n  2. Create a temporary build directory and `cd` into it, for example:\n
  \    ```sh\n     $ mkdir /tmp/build\n     $ cd /tmp/build\n     ```\n\n  3. Execute
  the following to configure the build. Here `INSTALL_PREFIX` is\n     where LLVM
  is to be installed, for example `/usr/local` or\n     `$HOME/opt/llvm`:\n     ```sh\n
  \    $ cmake $LLVM_SRC -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DCMAKE_BUILD_TYPE=Release
  -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON\n
  \    ```\n     See [options and variables](http://llvm.org/docs/CMake.html#options-and-variables)\n
  \    for a list of additional build parameters you can specify.\n\n  4. Build and
  install:\n     ```sh\n     $ cmake --build .\n     $ cmake --build . --target install\n
  \    ```\n\n  5. For macOS only, some additional steps are useful to work around
  issues related\n     to [System Integrity Protection](https://en.wikipedia.org/wiki/System_Integrity_Protection):\n
  \    ```sh\n     cd $INSTALL_PREFIX/lib\n     ln -s libLLVM.dylib libLLVM-4.0.dylib\n
  \    install_name_tool -id $PWD/libLTO.dylib libLTO.dylib\n     install_name_tool
  -id $PWD/libLLVM.dylib libLLVM.dylib\n     install_name_tool -change '@rpath/libLLVM.dylib'
  $PWD/libLLVM.dylib libLTO.dylib\n     ```\n\n\nInstalling Accelerate-LLVM\n--------------------------\n\nOnce
  the dependencies are installed, we are ready to install `accelerate-llvm`.\n\nFor
  example, installation using [`stack`](http://docs.haskellstack.org/en/stable/README.html)\njust
  requires you to point it to the appropriate configuration file:\n```sh\n$ ln -s
  stack-8.0.yaml stack.yaml\n$ stack setup\n$ stack install\n```\n\nNote that the
  version of [`llvm-hs`](https://hackage.haskell.org/package/llvm-hs)\nused must match
  the installed version of LLVM, which is currently 4.0.\n\n\n## libNVVM\n\nThe `accelerate-llvm-ptx`
  backend can optionally be compiled to generate GPU\ncode using the `libNVVM` library,
  rather than LLVM's inbuilt NVPTX code\ngenerator. `libNVVM` is a closed-source library
  distributed as part of the\nNVIDIA CUDA toolkit, and is what the `nvcc` compiler
  itself uses internally when\ncompiling CUDA C code.\n\nUsing `libNVVM` _may_ improve
  GPU performance compared to the code generator\nbuilt in to LLVM. One difficulty
  with using it however is that since `libNVVM`\nis also based on LLVM, and typically
  lags LLVM by several releases, you must\ninstall `accelerate-llvm` with a \"compatible\"
  version of LLVM, which will depend\non the version of the CUDA toolkit you have
  installed. The following table shows\nsome combinations:\n\n|              | LLVM-3.3
  | LLVM-3.4 | LLVM-3.5 | LLVM-3.8 | LLVM-3.9 | LLVM-4.0 |\n|:------------:|:--------:|:--------:|:--------:|:--------:|:--------:|:--------:|\n|
  **CUDA-7.0** |     ⭕    |     ❌    |          |          |          |          |\n|
  **CUDA-7.5** |          |     ⭕    |     ⭕    |     ❌    |          |          |\n|
  **CUDA-8.0** |          |          |     ⭕    |     ⭕    |     ❌    |     ❌    |\n\nWhere
  ⭕ = Works, and ❌ = Does not work.\n\nNote that the above restrictions on CUDA and
  LLVM version exist _only_ if you\nwant to use the NVVM component. Otherwise, you
  should be free to use any\ncombination of CUDA and LLVM.\n\nAlso note that `accelerate-llvm-ptx`
  itself currently requires at least LLVM-3.5.\n\nUsing `stack`, either edit the `stack.yaml`
  and add the following section:\n\n```yaml\nflags:\n  accelerate-llvm-ptx:\n    nvvm:
  true\n```\n\nOr install using the following option on the command line:\n\n```sh\n$
  stack install accelerate-llvm-ptx --flag accelerate-llvm-ptx:nvvm\n```\n\nIf installing
  via `cabal`:\n\n```sh\n$ cabal install accelerate-llvm-ptx -fnvvm\n```\n\n"
license-name: BSD3
