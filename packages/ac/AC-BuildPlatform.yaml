homepage: ''
changelog-type: ''
hash: 03289f7facf675769f19fb47fc0cd8f485e2d3be02e2a7c5872d7ad1b6779655
test-bench-deps: {}
maintainer: MathematicalOrchid@hotmail.com
synopsis: Detect which OS you're running on.
changelog: ''
basic-deps:
  base: ==4.*
all-versions:
- 1.0.0
- 1.1.0
author: Andrew Coppin
latest: 1.1.0
description-type: text
description: ! "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n<html
  xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n  <title>AC-BuildPlatform v1.0.0:
  Read Me</title>\r\n  <style type=\"text/css\">\r\n    body {background-color: rgb(80%,
  100%, 80%); font-family: Georgia, Times, serif;}\r\n  </style>\r\n</head>\r\n<body>\r\n\r\n<h1>Package
  <code>AC-BuildPlatform</code> version 1.0.0: Read me</h1>\r\n\r\n<h2>Cleaning</h2>\r\n<p>\r\nDue
  to <a href=\"http://hackage.haskell.org/trac/hackage/ticket/303\">Cabal bug #303</a>,
  under Windows you can't do &ldquo;<code>cabal clean</code>&rdquo;. In this instance,
  please use &ldquo;<code>runhaskell Setup clean</code>&rdquo; instead.\r\n</p>\r\n<p>\r\n(Apparently
  Unix has some weird mis-feature whereby deleting a running executable file is not
  an error. Apparently cabal-install relies on this flaw. Obviously this means that
  on operating systems that actually  support the concept of file locking, it doesn't
  work. In fairness, it's not obvious how to solve this little problem.)\r\n</p>\r\n\r\n<h2>Design
  assumptions</h2>\r\n<ol>\r\n  <li>Any platform that isn't Windows is Unix. (This
  should be clear from the package description.)</li>\r\n  <li>The <code>{-# LANGUAGE
  CPP #-}</code> pragma works. (If not, you'll likely get random syntax errors.)</li>\r\n</ol>\r\n\r\n<h2>Platform
  detection</h2>\r\n<p>\r\nThis package allows you to query at run-time what operating
  system and compiler are in use. This information is not easy to discover &mdash;
  hence why this package exists in the first place. The package runs some custom code
  during the &ldquo;configure&rdquo; stage. This code attempts to detect what platform
  it's running under. Note that the script <em>prints out</em> the values detected,
  so you don't have to actually build and install the package just to find out if
  platform detection is working right.\r\n</p>\r\n<p>\r\nThe platform detection code
  makes a number of assumptions, which are documented here. If these assumptions fail,
  it may not be possible to detect some or all of the platform values. Note that if
  the OS type cannot be detected, the configure step <em>will fail</em>, preventing
  the package from being built and installed.\r\n</p>\r\n<h2>Manual override</h2>\r\n<p>\r\nThere
  is a small utility called <code>Manual.hs</code>. If you run this, it will let you
  set the platform values to whatever you like. This kludge lets you specify that
  your compiler is <em>Fred's Haskell Compiler</em> or whatever.\r\n</p>\r\n<p>\r\n
  You must run this before the &ldquo;build&rdquo; and/or &ldquo;haddock&rdquo; stages,
  but you can run it before or after the &ldquo;configure&rdquo; stage. So if you
  run a &ldquo;configure&rdquo; and it fails, and you can't correct the failure, you
  can use a manual override to specify the correct values and then run &ldquo;configure&rdquo;
  again.\r\n</p>\r\n<p>\r\nNote that performing a manual override turns off the auto-detection
  logic in &ldquo;configure&rdquo;. To turn it back on again, just perform a &ldquo;clean&rdquo;
  (which removes any manual values you specified). See the notes above about performing
  a &ldquo;clean&rdquo; operation though.\r\n</p>\r\n\r\n<h2>Platform detection assumptions</h2>\r\n<p>\r\nThe
  platform detection logic makes a number of assumptions. The first two are the only
  ones that most users need to worry about.\r\n</p>\r\n<ol>\r\n  <li>\r\n    <p><b>You
  configure the package using &ldquo;<code>cabal configure</code>&rdquo;, not &ldquo;<code>runhaskell
  Setup configure</code>&rdquo;.</b></p>\r\n    <p>If this is not the case, no information
  is detected [and therefore configure fails].</p>\r\n  </li>\r\n  <li>\r\n    <p><b>Your
  compiler is GHC, version 6.8.1 or newer.</b></p>\r\n    <p>If this is not the case,
  most likely no information will be detected [and therefore configure will fail].</p>\r\n
  \   <p>I realise that being able to query the compiler is a bit pointless when only
  one possible compiler is supported. Note though that if the compiler is <em>not</em>
  GHC, it will <em>not</em> be reported as GHC. So there is some small information
  content there.</p>\r\n  </li>\r\n  <li>\r\n    <p><b>The cabal-install tool compiles
  <code>Setup.hs</code> before running it.</b></p>\r\n    <p>(And, additionally, stores
  it in <code>./dist/setup/Setup[.exe]</code>. And, additionally, runs it with the
  package root folder as the current working folder.)</p>\r\n    <p>In theory, the
  path might change in future, breaking the detection code.</p>\r\n  </li>\r\n  <li>\r\n
  \   <p><b>The compiler used for configuring is the same as the one used for building.</b></p>\r\n
  \   <p>As far as I know, Cabal does not allow you to violate this assumption. But
  if you did, the detected information would refer to the compiler used for configuring
  and not the one used for building.</p>\r\n  </li>\r\n  <li>\r\n    <p><b>The GHC
  &ldquo;<code>+RTS --info</code>&rdquo; option is available.</b></p>\r\n    <p>This
  option was added in GHC 6.8.1; older versions do not support it. Additionally, as
  of GHC 7.0.1, most RTS options are disabled by default (but <em>not</em> this one).
  If in future this option is disabled as well, detection will break.</p>\r\n    <p>As
  far as I know, no other compilers support this option. But if they did, the existing
  detection logic is intended to respond gracefully. The detection script looks for
  only two keys: &ldquo;<code>GHC version</code>&rdquo; and &ldquo;<code>Target platform</code>&rdquo;.
  The latter might plausibly be available from other implementations, in which case
  OS detection would work.</p>\r\n  </li>\r\n  <li>\r\n    <p><b>GHC for Windows uses
  MinGW.</b></p>\r\n    <p>This has always been the case in the past, but it could
  potentially change in future. (Here's to hoping, anyway!)</p>\r\n    <p>Of course,
  the detection logic doesn't <em>really</em> care whether MinGW is in use or not.
  It only cares whether the target platform is reported as &ldquo;<code>mingw32</code>&rdquo;.
  If yes, it assumes the platform is <code>MS_Windows</code>. For <em>any other value</em>
  it assumes <code>Unix</code>. So if some day GHC actually reports Windows as being
  &ldquo;<code>Windows</code>&rdquo;, the detection logic will need updating.</p>\r\n
  \ </li>\r\n</ol>\r\n<p>\r\nIn summary: The detection algorithm depends on precise
  details of GHC, the GHC RTS, the Cabal library, and the cabal-install tool. If any
  of these tools change in particularly unusual ways in the future, the detection
  code might break.\r\n</p>\r\n\r\n</body>\r\n</html>\r\n"
license-name: BSD-3-Clause
