homepage: https://github.com/mtesseract/access-token-provider#readme
changelog-type: ''
hash: 31438ccb775b02d844eb95145f212baee8e263c7501fe8b51866267f84470c3d
test-bench-deps:
  http-client: -any
  exceptions: -any
  katip: -any
  bytestring: -any
  th-format: -any
  unliftio: -any
  base: -any
  text: -any
  uuid: -any
  safe-exceptions: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  mtl: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  http-types: -any
  access-token-provider: -any
  aeson: -any
maintainer: mtesseract@silverratio.net
synopsis: Provides Access Token for Services
changelog: ''
basic-deps:
  http-client: -any
  exceptions: -any
  katip: -any
  bytestring: -any
  lens-aeson: -any
  th-format: ! '>=0.1.2.0'
  aeson-casing: -any
  unliftio: -any
  stm: -any
  base: ! '>=4.7 && <5'
  base64-bytestring: -any
  text: -any
  safe-exceptions: -any
  filepath: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  http-client-tls: -any
  mtl: -any
  transformers: -any
  random: -any
  http-types: -any
  aeson: -any
all-versions:
- '0.1.0.0'
author: Moritz Clasmeier
latest: '0.1.0.0'
description-type: markdown
description: ! "# Access Token Provider\n\nThis package provides a convenient retrieval
  mechanism of access\ntokens. Access Token Provider supporting multiple provider
  backends,\nincluding OAuth2 Resource Owner Password Credentials Grant, file-based\ntoken
  access (e.g. for Kubernetes) and fetching tokens from the\nenvironment (e.g. for
  local testing). The package is configurable via\nenvironment variables. It uses
  Katip for logging.\n\n## Examples\n\n```haskell\nimport qualified Security.AccessTokenProvider
  as ATP\n\nretrieveSomeToken :: KatipContextT IO ()\nretrieveSomeToken = do\n  tokenProvider
  <- ATP.new (AccessTokenName \"token-name\")\n  token <- ATP.retrieveAccessToken
  tokenProvider\n  liftIO $ print token\n```\n\n## Configuration\n\nConfiguration
  is done by setting the environment variable `ATP_CONF`.\n\n### OAuth2 based token
  retrieval\n\nFor OAuth2 (Resource Owner Password Credentials Grant) provider, use:\n\n```json\n{\n
  \ \"provider\": \"ropcg\",\n  \"credentials_directory\": \"/optional/credentials/directory\",\n
  \ \"auth_endpoint\": \"<OAuth2 authentication endpoint>\",\n  \"tokens\": {\"token-name\":
  {\"scopes\": [\"first-scope\", \"second-scope\"]}}\n}\n```\n\nThe `credentials_directory`
  setting defaults to the content of the\nenvironment variable `CREDENTIALS_DIR`.
  It is expected to contain the\nfiles `user.json` and `client.json`, containing the
  user and client\ncredentials respectively.\n\n### File based token retrieval (e.g.
  for Kubernetes)\n\n```json\n{\n  \"provider\": \"file\",\n  \"tokens\": {\"token-name\":
  \"/some/file/name\"}\n}\n```\n\nAs a short cut, you can simply save a token path
  directly in the\nenvironment variable `TOKEN_FILE`.\n\n### Environment based token
  retrieval (e.g. for testing)\n\n```json\n{\n  \"provider\": \"fixed\",\n  \"tokens\":
  {\"token-name\": \"some-fixed-token\"}\n}\n```\n\nAs a short cut, you can simply
  save a token directly in the\nenvironment variable `TOKEN`.\n"
license-name: BSD3
