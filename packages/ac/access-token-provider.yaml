homepage: https://github.com/mtesseract/access-token-provider#readme
changelog-type: ''
hash: 0904a3d89ff894768d44100566d3e544033c550e7c4695a6afa840c42e8ffafa
test-bench-deps:
  http-client: -any
  exceptions: -any
  katip: -any
  bytestring: -any
  th-format: -any
  unliftio: -any
  base: -any
  text: -any
  uuid: -any
  safe-exceptions: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  mtl: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  http-types: -any
  access-token-provider: -any
  aeson: -any
maintainer: mtesseract@silverratio.net
synopsis: Provides Access Token for Services
changelog: ''
basic-deps:
  http-client: -any
  exceptions: -any
  katip: -any
  bytestring: -any
  lens-aeson: -any
  th-format: ! '>=0.1.2.0'
  aeson-casing: -any
  unliftio: -any
  stm: -any
  base: ! '>=4.7 && <5'
  base64-bytestring: -any
  text: -any
  safe-exceptions: -any
  filepath: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  http-client-tls: -any
  mtl: -any
  transformers: -any
  random: -any
  say: -any
  http-types: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Moritz Clasmeier
latest: 0.1.1.0
description-type: markdown
description: ! "# Access Token Provider [![Hackage version](https://img.shields.io/hackage/v/access-token-provider.svg?label=Hackage)](https://hackage.haskell.org/package/access-token-provider)
  [![Stackage version](https://www.stackage.org/package/access-token-provider/badge/lts?label=Stackage)](https://www.stackage.org/package/access-token-provider)
  [![Build Status](https://travis-ci.org/mtesseract/access-token-provider.svg?branch=master)](https://travis-ci.org/mtesseract/access-token-provider)\n\nThis
  package provides a convenient retrieval mechanism for access\ntokens. Multiple provider
  backends, including OAuth2 Resource Owner\nPassword Credentials Grant, file-based
  token access (e.g. for\nKubernetes) and fetching tokens from the environment (e.g.
  for local\ntesting) are supported; custom provider backends can easily be added.\n\n##
  Examples\n\n```haskell\nimport qualified Security.AccessTokenProvider as ATP\n\nretrieveSomeToken
  :: IO ()\nretrieveSomeToken = do\n  tokenProvider <- ATP.new (AccessTokenName \"token-name\")\n
  \ token <- ATP.retrieveAccessToken tokenProvider\n  print token\n```\n\n## Configuration\n\nConfiguration
  is done by setting certain environment variables,\ndepending on the provider.\n\n###
  OAuth2 based token retrieval\n\nThe OAuth2 (Resource Owner Password Credentials
  Grant) provider\nexpects the `ATP_CONF_ROPCG` environment variable to contain a
  JSON\nobject as follows:\n\n```json\n{\n  \"credentials_directory\": \"/optional/credentials/directory\",\n
  \ \"auth_endpoint\": \"<OAuth2 authentication endpoint>\",\n  \"tokens\": {\"token-name\":
  {\"scopes\": [\"first-scope\", \"second-scope\"]}}\n}\n```\n\nThe `credentials_directory`
  setting defaults to the content of the\nenvironment variable `CREDENTIALS_DIR`.
  It is expected to contain the\nfiles `user.json` and `client.json`, containing the
  user and client\ncredentials respectively.\n\n### File based token retrieval (e.g.
  for Kubernetes)\n\nThe file based provider expects the `ATP_CONF_FILE` environment\nvariable
  to contain a JSON object as follows:\n\n```json\n{\n  \"tokens\": {\"token-name\":
  \"/some/file/name\"}\n}\n```\n\nAs a short cut, you can simply save a token path
  directly in the\nenvironment variable `TOKEN_FILE`.\n\n### Environment based token
  retrieval (e.g. for testing)\n\nThe file based provider expects the `ATP_CONF_FIXED`
  environment\nvariable to contain a JSON object as follows:\n\n```json\n{\n  \"tokens\":
  {\"token-name\": \"some-fixed-token\"}\n}\n```\n"
license-name: BSD-3-Clause
