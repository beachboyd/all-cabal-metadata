homepage: https://github.com/AccelerateHS/accelerate/
changelog-type: markdown
hash: b2b585e3ce482dfd6cb84cdb390a14045ab831c563462352ef8eb41f12f385ff
test-bench-deps:
  base: ! '>=4.7'
  doctest: ! '>=0.11'
  accelerate: -any
maintainer: Trevor L. McDonell <tmcdonell@cse.unsw.edu.au>
synopsis: An embedded language for accelerated array processing
changelog: ! "# Change Log\n\nNotable changes to the project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)
  and the\nproject adheres to the [Haskell Package Versioning\nPolicy (PVP)](https://pvp.haskell.org)\n\n##
  [1.2.0.0] - 2018-04-03\n### Changed\n  * Internal debugging/RTS options handling
  has been changed. Compiling this package now implies that backends are also compiled
  in debug mode (no need to set the `-fdebug` cabal flag for those packages as well).\n
  \ * Complex numbers are stored in the C-style array-of-struct representation.\n
  \ * Improve numeric handling of complex numbers.\n  * Coercions (`bitcast`) now
  occur between the underlying representation types\n  * Front-end performance improvements\n\n###
  Added\n  * Support for half-precision floating-point numbers.\n  * Support for struct-of-array-of-struct
  representations. Currently this is limited to fields of 2,3,4,8, or 16-elements
  wide.\n  * Add equivalents for `Data.Functor`, `Data.Semigroup` (ghc-8+)\n  * Add
  instances and helper functions for `Maybe` and `Either` types\n  * Add rank generalised
  versions of `take`, `drop`, `head`, `tail`, `init`, `slit`, `reverse` and `transpose`.\n
  \ * Implement counters and reporting for `-ddump-gc-stats`\n\n### Contributors\n\nSpecial
  thanks to those who contributed patches as part of this release:\n\n  * Trevor L.
  McDonell (@tmcdonell)\n  * Ryan Scott (@ryanglscott)\n  * Rinat Striungis (@Haskell-mouse)\n\n\n##
  [1.1.1.0] - 2017-09-26\n### Changed\n  * Improve and colourise the pretty-printer\n\n\n##
  [1.1.0.0] - 2017-09-21\n### Added\n  * Additional EKG monitoring hooks ([#340])\n\n
  \ * Operations from `RealFloat`\n\n### Changed\n  * Changed type of `scanl'`, `scanr'`
  to return an `Acc` tuple, rather than a\n    tuple of `Acc` arrays.\n  * Specialised
  folds `sum`, `product`, `minimum`, `maximum`, `and`, `or`,\n    `any`, `all` now
  reduce along the innermost dimension only, rather than\n    reducing all elements.
  You can recover the old behaviour by first\n    `flatten`-ing the input array.\n
  \ * Add new stencil boundary condition `function`, to apply the given function\n
  \   to out-of-bounds indices.\n\n### Fixed\n  * [#390]: Wrong number of arguments
  in printf\n\n\n## [1.0.0.0] - 2017-03-31\n  * Many API and internal changes\n  *
  Bug fixes and other enhancements\n\n\n## [0.15.1.0]\n  * Fix type of `allocateArray`\n\n\n##
  [0.15.0.0]\n  * Bug fixes and performance improvements.\n\n\n## [0.14.0.0]\n  *
  New iteration constructs.\n  * Additional Prelude-like functions.\n  * Improved
  code generation and fusion optimisation.\n  * Concurrent kernel execution in the
  CUDA backend.\n  * Bug fixes.\n\n\n## [0.13.0.0]\n  * New array fusion optimisation.\n
  \ * New foreign function interface for array and scalar expressions.\n  * Additional
  Prelude-like functions.\n  * New example programs.\n  * Bug fixes and performance
  improvements.\n\n\n## [0.12.0.0]\n  * Full sharing recovery in scalar expressions
  and array computations.\n  * Two new example applications in package `accelerate-examples`
  (both including a graphical frontend):\n    * A real-time Canny edge detection\n
  \   * An interactive fluid flow simulator\n  * Bug fixes.\n\n\n## [0.11.0.0]\n  *
  New Prelude-like functions `zip*`, `unzip*`, `fill`, `enumFrom*`, `tail`,\n    `init`,
  `drop`, `take`, `slit`, `gather*`, `scatter*`, and `shapeSize`.\n  * New simplified
  AST (in package `accelerate-backend-kit`) for backend writers\n    who want to avoid
  the complexities of the type-safe AST.\n\n\n## [0.10.0.0]\n  * Complete sharing
  recovery for scalar expressions (but currently disabled by default).\n  * Also bug
  fixes in array sharing recovery and a few new convenience functions.\n\n\n## [0.9.0.0]\n
  \ * Streaming computations\n  * Precompilation\n  * Repa-style array indices\n  *
  Additional collective operations supported by the CUDA backend: `stencil`s,\n    more
  `scan`s, rank-polymorphic `fold`, `generate`.\n  * Conversions to other array formats\n
  \ * Bug fixes\n\n\n## 0.8.1.0\n  * Bug fixes and some performance tweaks.\n\n\n##
  0.8.0.0\n  * More collective operations supported by the CUDA backend: `replicate`,\n
  \   `slice` and `foldSeg`. Frontend and interpreter support for `stencil`.\n  *
  Bug fixes.\n\n\n## [0.7.1.0]\n  * Initial release of the CUDA backend\n\n\n[1.2.0.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/v1.1.0.0...v1.2.0.0\n[1.1.1.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/v1.1.0.0...v1.1.1.0\n[1.1.0.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/1.0.0.0...v1.1.0.0\n[1.0.0.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/0.15.1.0...1.0.0.0\n[0.15.1.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.15.0.0...0.15.1.0\n[0.15.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.14.0.0...0.15.0.0\n[0.14.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.13.0.0...0.14.0.0\n[0.13.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.12.0.0...0.13.0.0\n[0.12.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.11.0.0...0.12.0.0\n[0.11.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.10.0.0...0.11.0.0\n[0.10.0.0]:
  \        https://github.com/AccelerateHS/accelerate/compare/0.9.0.0...0.10.0.0\n[0.9.0.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/0_8_1_0...0.9.0.0\n[0.7.1.0]:
  \         https://github.com/AccelerateHS/accelerate/compare/0_6_0_0...0_7_1_0\n\n[#340]:
  \            https://github.com/AccelerateHS/accelerate/issues/340\n[#390]:             https://github.com/AccelerateHS/accelerate/issues/390\n\n"
basic-deps:
  exceptions: ! '>=0.6'
  bytestring: ! '>=0.10.2'
  ansi-wl-pprint: ! '>=0.6'
  unix: -any
  base: ! '>=4.7 && <4.12'
  tasty-hedgehog: ! '>=0.1'
  tasty-expected-failure: ! '>=0.11'
  unordered-containers: ! '>=0.2'
  unique: -any
  filepath: ! '>=1.0'
  hedgehog: ! '>=0.5'
  constraints: ! '>=0.9'
  base-orphans: ! '>=0.3'
  containers: ! '>=0.3'
  terminal-size: ! '>=0.3'
  ansi-terminal: ! '>=0.6.2'
  lens: ! '>=4.0'
  hashtables: ! '>=1.2.3'
  ghc-prim: -any
  cryptonite: ! '>=0.21'
  mtl: ! '>=2.0'
  hashable: ! '>=1.1'
  tasty-hunit: ! '>=0.9'
  transformers: ! '>=0.3'
  tasty: ! '>=0.11'
  deepseq: ! '>=1.3'
  half: ! '>=0.2'
  template-haskell: -any
  vector: ! '>=0.10'
  directory: ! '>=1.0'
all-versions:
- '0.4.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.1.0'
- '0.8.0.0'
- '0.8.1.0'
- '0.9.0.0'
- '0.9.0.1'
- '0.10.0.0'
- '0.12.0.0'
- '0.12.1.0'
- '0.12.2.0'
- '0.13.0.0'
- '0.13.0.1'
- '0.13.0.2'
- '0.13.0.3'
- '0.13.0.4'
- '0.13.0.5'
- '0.14.0.0'
- '0.15.0.0'
- '0.15.1.0'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.1.0'
- '1.2.0.0'
author: ! 'Manuel M T Chakravarty,

  Robert Clifton-Everest,

  Gabriele Keller,

  Ben Lever,

  Trevor L. McDonell,

  Ryan Newtown,

  Sean Seefried'
latest: '1.2.0.0'
description-type: markdown
description: ! "An Embedded Language for Accelerated Array Computations\n=======================================================\n\n[![Travis](https://img.shields.io/travis/AccelerateHS/accelerate/master.svg?label=linux)](https://travis-ci.org/AccelerateHS/accelerate)\n[![AppVeyor](https://img.shields.io/appveyor/ci/tmcdonell/accelerate/master.svg?label=windows)](https://ci.appveyor.com/project/tmcdonell/accelerate)\n[![Stackage
  LTS](https://stackage.org/package/accelerate/badge/lts)](https://stackage.org/lts/package/accelerate)\n[![Stackage
  Nightly](https://stackage.org/package/accelerate/badge/nightly)](https://stackage.org/nightly/package/accelerate)\n[![Hackage](https://img.shields.io/hackage/v/accelerate.svg)](https://hackage.haskell.org/package/accelerate)\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/AccelerateHS/Lobby)\n\n\n`Data.Array.Accelerate`
  defines an embedded language of array computations for high-performance computing
  in Haskell. Computations on multi-dimensional, regular arrays are expressed in the
  form of parameterised collective operations (such as maps, reductions, and permutations).
  These computations are online-compiled and executed on a range of architectures.\n\nFor
  more details, see our papers:\n\n * [Accelerating Haskell Array Codes with Multicore
  GPUs][CKLM+11]\n * [Optimising Purely Functional GPU Programs][MCKL13] ([slides][MCKL13-slides])\n
  * [Embedding Foreign Code][CMCK14]\n * [Type-safe Runtime Code Generation: Accelerate
  to LLVM][MCGN15] ([slides][MCGN15-slides]) ([video][MCGN15-video])\n\nThere are
  also slides from some fairly recent presentations:\n\n * [Embedded Languages for
  High-Performance Computing in Haskell][Embedded]\n * [GPGPU Programming in Haskell
  with Accelerate][YLJ13-slides] ([video][YLJ13-video]) ([workshop][YLJ13-workshop])\n\nChapter
  6 of Simon Marlow's book [Parallel and Concurrent Programming in Haskell][Mar13]
  contains a tutorial introduction to Accelerate.\n\n[Trevor's PhD thesis][Trevor-thesis]
  details the design and implementation of frontend optimisations and CUDA backend.\n\n\n**Table
  of Contents**\n\n- [An Embedded Language for Accelerated Array Computations](#an-embedded-language-for-accelerated-array-computations)\n
  \ - [A simple example](#a-simple-example)\n  - [Availability](#availability)\n  -
  [Additional components](#additional-components)\n  - [Requirements](#requirements)\n
  \ - [Documentation](#documentation)\n  - [Examples](#examples)\n  - [Mailing list
  and contacts](#mailing-list-and-contacts)\n  - [Citing Accelerate](#citing-accelerate)\n
  \ - [What's missing?](#whats-missing)\n\nA simple example\n----------------\n\nAs
  a simple example, consider the computation of a dot product of two vectors of single-precision
  floating-point numbers:\n\n    dotp :: Acc (Vector Float) -> Acc (Vector Float)
  -> Acc (Scalar Float)\n    dotp xs ys = fold (+) 0 (zipWith (*) xs ys)\n\nExcept
  for the type, this code is almost the same as the corresponding Haskell code on
  lists of floats. The types indicate that the computation may be online-compiled
  for performance; for example, using `Data.Array.Accelerate.LLVM.PTX.run` it may
  be on-the-fly off-loaded to a GPU.\n\nAvailability\n------------\n\nPackage accelerate
  is available from\n\n * Hackage: [accelerate][Hackage] - install with `cabal install
  accelerate`\n * GitHub: [AccelerateHS/accelerate][GitHub] - get the source with
  `git clone https://github.com/AccelerateHS/accelerate.git`. The easiest way to compile
  the source distributions is via the Haskell [stack](https://docs.haskellstack.org/en/stable/README/)
  tool.\n\nAdditional components\n---------------------\n\nThe following supported
  add-ons are available as separate packages:\n\n  * [accelerate-llvm-native][accelerate-llvm-native]:
  Backend targeting multicore CPUs\n  * [accelerate-llvm-ptx][accelerate-llvm-ptx]:
  Backend targeting CUDA-enabled NVIDIA GPUs. Requires a GPU with compute capability
  2.0 or greater (see the [table on Wikipedia][wiki-cc])\n  * [accelerate-examples][accelerate-examples]:
  Computational kernels and applications showcasing the use of Accelerate as well
  as a regression test suite (supporting function and performance testing)\n  * [accelerate-io][accelerate-io]:
  Fast conversion between Accelerate arrays and other array formats (for example,
  Repa and Vector)\n  * [accelerate-fft][accelerate-fft]: Fast Fourier transform implementation,
  with FFI bindings to optimised implementations\n  * [accelerate-blas][accelerate-blas]:
  BLAS and LAPACK operations, with FFI bindings to optimised implementations\n  *
  [accelerate-bignum][accelerate-bignum]: Fixed-width large integer arithmetic\n  *
  [colour-accelerate][colour-accelerate]: Colour representations in Accelerate (RGB,
  sRGB, HSV, and HSL)\n  * [gloss-accelerate][gloss-accelerate]: Generate [gloss][gloss]
  pictures from Accelerate\n  * [gloss-raster-accelerate][gloss-raster-accelerate]:
  Parallel rendering of raster images and animations\n  * [lens-accelerate][lens-accelerate]:
  [Lens][lens] operators for Accelerate types\n  * [linear-accelerate][linear-accelerate]:
  [Linear][linear] vector spaces in Accelerate\n  * [mwc-random-accelerate][mwc-random-accelerate]:
  Generate Accelerate arrays filled with high quality pseudorandom numbers\n  * [numeric-prelude-accelerate][numeric-prelude-accelerate]:
  Lifting the [numeric-prelude][numeric-prelude] to Accelerate\n  * [wigner-ville-accelerate](https://github.com/Haskell-mouse/wigner-ville-accelerate):
  Wigner-Ville time-frequency distribution.\n\nInstall them from Hackage with `cabal
  install PACKAGENAME`.\n\n\nDocumentation\n-------------\n\n  * Haddock documentation
  is included and linked with the individual package releases on [Hackage][Hackage].\n
  \ * Haddock documentation for in-development components can be found [here](http://tmcdonell-bot.github.io/accelerate-travis-buildbot/).\n
  \ * The idea behind the HOAS (higher-order abstract syntax) to de-Bruijn conversion
  used in the library is [described separately][HOAS-conv].\n\nExamples\n--------\n\n###
  accelerate-examples\n\nThe [accelerate-examples][accelerate-examples] package provides
  a range of computational kernels and a few complete applications. To install these
  from Hackage, issue `cabal install accelerate-examples`. The examples include:\n\n
  \ * An implementation of [canny edge detection][wiki-canny]\n  * An interactive
  [mandelbrot set][wiki-mandelbrot] generator\n  * An [N-body simulation][wiki-nbody]
  of gravitational attraction between solid particles\n  * An implementation of the
  [PageRank][wiki-pagerank] algorithm\n  * A simple [ray-tracer][wiki-raytracing]\n
  \ * A particle based simulation of stable fluid flows\n  * A cellular automata simulation\n
  \ * A \"password recovery\" tool, for dictionary lookup of MD5 hashes\n\n[![Mandelbrot](http://i.imgur.com/5Tbsp1j.jpg
  \"accelerate-mandelbrot\")](http://i.imgur.com/RgXRqsc.jpg)\n[![Raytracer](http://i.imgur.com/7ohhKm9.jpg
  \"accelerate-ray\")](http://i.imgur.com/ZNEGEJK.jpg)\n\n<!--\n<video width=400 height=300
  controls=false autoplay loop>\n  <source=\"http://www.cse.unsw.edu.au/~tmcdonell/images/ray.mp4\"
  type=\"video/mp4\">\n</video>\n-->\n\n\n### LULESH\n\n[LULESH-accelerate][lulesh-accelerate]
  is in implementation of the Livermore Unstructured Lagrangian Explicit Shock Hydrodynamics
  (LULESH) mini-app. [LULESH][LULESH] represents a typical hydrodynamics code such
  as [ALE3D][ALE3D], but is a highly simplified application, hard-coded to solve the
  Sedov blast problem on an unstructured hexahedron mesh.\n\n![LULESH mesh](https://codesign.llnl.gov/images/sedov-3d-LLNL.png)\n\n\n###
  Λ ○ λ (Lol)\n\nΛ ○ λ ([Lol][lol]) is a general-purpose library for ring-based lattice
  cryptography. Lol has applications in, for example, symmetric-key somewhat-homomorphic
  encryption schemes. The [lol-accelerate][lol-accelerate] package provides an Accelerate
  backend for Lol.\n\n\n### Additional examples\n\nAccelerate users have also built
  some substantial applications of their own.\nPlease feel free to add your own examples!\n\n
  \ * Henning Thielemann, [patch-image](http://hackage.haskell.org/package/patch-image):
  Combine a collage of overlapping images\n  * apunktbau, [bildpunkt](https://github.com/abau/bildpunkt):
  A ray-marching distance field renderer\n  * klarh, [hasdy](https://github.com/klarh/hasdy):
  Molecular dynamics in Haskell using Accelerate\n  * Alexandros Gremm used Accelerate
  as part of the [2014 CSCS summer school](http://user.cscs.ch/blog/2014/cscs_usi_summer_school_2014_30_june_10_july_2014_in_serpiano_tessin/index.html)
  ([code](https://github.com/agremm/cscs))\n\n\nMailing list and contacts\n-------------------------\n\n
  \ * Mailing list: [`accelerate-haskell@googlegroups.com`](mailto:accelerate-haskell@googlegroups.com)
  (discussions on both use and development are welcome)\n  * Sign up for the mailing
  list at the [Accelerate Google Groups page][Google-Group].\n  * Bug reports and
  issues tracking: [GitHub project page][Issues].\n\nThe maintainers of Accelerate
  are Manuel M T Chakravarty <chak@cse.unsw.edu.au> and Trevor L McDonell <tmcdonell@cse.unsw.edu.au>.\n\n\nCiting
  Accelerate\n-----------------\n\nIf you use Accelerate for academic research, you
  are encouraged (though not\nrequired) to cite the following papers ([BibTeX](http://www.cse.unsw.edu.au/~tmcdonell/papers/accelerate.bib)):\n\n
  \ * Manuel M. T. Chakravarty, Gabriele Keller, Sean Lee, Trevor L. McDonell, and
  Vinod Grover.\n    [Accelerating Haskell Array Codes with Multicore GPUs][CKLM+11].\n
  \   In _DAMP '11: Declarative Aspects of Multicore Programming_, ACM, 2011.\n\n
  \ * Trevor L. McDonell, Manuel M. T. Chakravarty, Gabriele Keller, and Ben Lippmeier.\n
  \   [Optimising Purely Functional GPU Programs][MCKL13].\n    In _ICFP '13: The
  18th ACM SIGPLAN International Conference on Functional Programming_, ACM, 2013.\n\n
  \ * Robert Clifton-Everest, Trevor L. McDonell, Manuel M. T. Chakravarty, and Gabriele
  Keller.\n    [Embedding Foreign Code][CMCK14].\n    In _PADL '14: The 16th International
  Symposium on Practical Aspects of Declarative Languages_, Springer-Verlag, LNCS,
  2014.\n\n  * Trevor L. McDonell, Manuel M. T. Chakravarty, Vinod Grover, and Ryan
  R. Newton.\n    [Type-safe Runtime Code Generation: Accelerate to LLVM][MCGN15].\n
  \   In _Haskell '15: The 8th ACM SIGPLAN Symposium on Haskell_, ACM, 2015.\n\nAccelerate
  is primarily developed by academics, so citations matter a lot to us.\nAs an added
  benefit, you increase Accelerate's exposure and potential user (and\ndeveloper!)
  base, which is a benefit to all users of Accelerate. Thanks in advance!\n\n\nWhat's
  missing?\n---------------\n\nHere is a list of features that are currently missing:\n\n
  * Preliminary API (parts of the API may still change in subsequent releases)\n\n\n\n
  \ [CKLM+11]:                    http://www.cse.unsw.edu.au/~chak/papers/CKLM+11.html\n
  \ [MCKL13]:                     http://www.cse.unsw.edu.au/~chak/papers/MCKL13.html\n
  \ [MCKL13-slides]:              https://speakerdeck.com/tmcdonell/optimising-purely-functional-gpu-programs\n
  \ [CMCK14]:                     http://www.cse.unsw.edu.au/~chak/papers/CMCK14.html\n
  \ [MCGN15]:                     http://www.cse.unsw.edu.au/~chak/papers/MCGN15.html\n
  \ [MCGN15-slides]:              https://speakerdeck.com/tmcdonell/type-safe-runtime-code-generation-accelerate-to-llvm\n
  \ [MCGN15-video]:               https://www.youtube.com/watch?v=snXhXA5noVc\n  [HIW'09]:
  \                    https://wiki.haskell.org/HaskellImplementorsWorkshop\n  [Mar13]:
  \                     http://chimera.labs.oreilly.com/books/1230000000929\n  [Embedded]:
  \                  https://speakerdeck.com/mchakravarty/embedded-languages-for-high-performance-computing-in-haskell\n
  \ [Hackage]:                    http://hackage.haskell.org/package/accelerate\n
  \ [accelerate-cuda]:            https://github.com/AccelerateHS/accelerate-cuda\n
  \ [accelerate-examples]:        https://github.com/AccelerateHS/accelerate-examples\n
  \ [accelerate-io]:              https://github.com/AccelerateHS/accelerate-io\n
  \ [accelerate-fft]:             https://github.com/AccelerateHS/accelerate-fft\n
  \ [accelerate-blas]:            https://github.com/tmcdonell/accelerate-blas\n  [accelerate-backend-kit]:
  \    https://github.com/AccelerateHS/accelerate-backend-kit\n  [accelerate-buildbot]:
  \       https://github.com/AccelerateHS/accelerate-buildbot\n  [accelerate-repa]:
  \           https://github.com/blambo/accelerate-repa\n  [accelerate-opencl]:          https://github.com/hiPERFIT/accelerate-opencl\n
  \ [accelerate-cabal]:           https://github.com/AccelerateHS/accelerate/accelerate.cabal\n
  \ [accelerate-cuda-cabal]:      https://github.com/AccelerateHS/accelerate-cuda/accelerate-cuda.cabal\n
  \ [accelerate-llvm]:            https://github.com/AccelerateHS/accelerate-llvm\n
  \ [accelerate-llvm-native]:     https://github.com/AccelerateHS/accelerate-llvm\n
  \ [accelerate-llvm-ptx]:        https://github.com/AccelerateHS/accelerate-llvm\n
  \ [accelerate-bignum]:          https://github.com/tmcdonell/accelerate-bignum\n
  \ [GitHub]:                     https://github.com/AccelerateHS/accelerate\n  [Wiki]:
  \                      https://github.com/AccelerateHS/accelerate/wiki\n  [Issues]:
  \                    https://github.com/AccelerateHS/accelerate/issues\n  [Google-Group]:
  \              http://groups.google.com/group/accelerate-haskell\n  [HOAS-conv]:
  \                 http://www.cse.unsw.edu.au/~chak/haskell/term-conv/\n  [repa]:
  \                      http://hackage.haskell.org/package/repa\n  [wiki-cc]:                    https://en.wikipedia.org/wiki/CUDA#Supported_GPUs\n
  \ [YLJ13-video]:                http://youtu.be/ARqE4yT2Z0o\n  [YLJ13-slides]:               https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate\n
  \ [YLJ13-workshop]:             https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate-workshop\n
  \ [wiki-canny]:                 https://en.wikipedia.org/wiki/Canny_edge_detector\n
  \ [wiki-mandelbrot]:            https://en.wikipedia.org/wiki/Mandelbrot_set\n  [wiki-nbody]:
  \                https://en.wikipedia.org/wiki/N-body\n  [wiki-raytracing]:            https://en.wikipedia.org/wiki/Ray_tracing\n
  \ [wiki-pagerank]:              https://en.wikipedia.org/wiki/Pagerank\n  [Trevor-thesis]:
  \             http://www.cse.unsw.edu.au/~tmcdonell/papers/TrevorMcDonell_PhD_submission.pdf\n
  \ [colour-accelerate]:          https://github.com/tmcdonell/colour-accelerate\n
  \ [gloss]:                      https://hackage.haskell.org/package/gloss\n  [gloss-accelerate]:
  \          https://github.com/tmcdonell/gloss-accelerate\n  [gloss-raster-accelerate]:
  \   https://github.com/tmcdonell/gloss-raster-accelerate\n  [lens]:                       https://hackage.haskell.org/package/lens\n
  \ [lens-accelerate]:            https://github.com/tmcdonell/lens-accelerate\n  [linear]:
  \                    https://hackage.haskell.org/package/linear\n  [linear-accelerate]:
  \         https://github.com/tmcdonell/linear-accelerate\n  [mwc-random-accelerate]:
  \     https://github.com/tmcdonell/mwc-random-accelerate\n  [numeric-prelude]:            https://hackage.haskell.org/package/numeric-prelude\n
  \ [numeric-prelude-accelerate]: https://github.com/tmcdonell/numeric-prelude-accelerate\n
  \ [LULESH]:                     https://codesign.llnl.gov/lulesh.php\n  [ALE3D]:
  \                     https://wci.llnl.gov/simulation/computer-codes/ale3d\n  [lulesh-accelerate]:
  \         https://github.com/tmcdonell/lulesh-accelerate\n  [lol]:                        https://hackage.haskell.org/package/lol\n
  \ [lol-accelerate]:             https://github.com/tmcdonell/lol-accelerate\n\n"
license-name: BSD3
