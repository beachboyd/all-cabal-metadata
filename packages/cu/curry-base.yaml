homepage: http://curry-language.org
changelog-type: markdown
hash: 17b4a4adc7941501b202d23df4c5d91320b37bafc9f005f7fc19bf1a33d1f63a
test-bench-deps:
  Cabal: ! '>=1.20'
  base: ==4.*
  filepath: -any
  curry-base: -any
  mtl: -any
maintainer: fte@informatik.uni-kiel.de
synopsis: Functions for manipulating Curry programs
changelog: ! "Change log for curry-base\n=========================\n\nVersion (1.0.0)\n===============\n\n
  \ * Add support for typeclasses as known from Haskell.\n\nVersion (0.4.2)\n===============\n\n
  \ * Licenses made more specific.\n  * Introduced a new annotated variant of FlatCurry.\n\nVersion
  (0.4.1)\n===============\n\n  * Added new operator `@>` to return the left operand
  with the source code\n    position obtained from the right operand.\n  * Parenthesized
  type expressions are now represented accordingly in the\n    abstract syntax tree\n
  \ * Derive `Show` and `Read` instances also for identifiers to facilitate\n    debugging
  and reading/writing from/to files\n  * Emitted FlatCurry files now contain newlines
  to improve readability\n    for humans\n  * Implemented pretty printer for extended
  FlatCurry\n  * Added syntax extension `ExistentialQuantification` that allows the
  use\n    of existentially quantified types in data and newtype constructors\n  *
  Representation for spans (start and end position) added\n\nVersion 0.4.0\n=============\n\n
  \ * Introduced new representation of AbstractCurry\n\n    - AbstractCurry files
  now contain version information\n    - support for new record syntax\n    - support
  for newtype declarations\n    - evaluation annotations removed\n    - arity of constructor
  declarations removed\n    - simplified representation of function rules\n    - String
  literals added\n\n  * Removed support for Curry's record syntax and introduced Haskell's
  record\n    syntax instead\n\n  * Lexer is now capable of lexing binary integer
  literals, for instance\n    `0b101010` or `0B101010` can now be lexed and are converted
  to `42`.\n\n  * Removed record type extensions\n\n  * Moved `CYT` monads to `curry-base`
  (`Curry.Base.Monad`)\n    and removed `MessageM` monad\n\n  * Adapted Curry syntax
  and parser: Now declaration of operator precendence\n    in declarations of infix
  operators is optional\n\n  * Moved module `InterfaceEquivalence` (curry-frontend)
  to\n    `Curry.Syntax.InterfaceEquivalence` (curry-base)\n\n  * Removed module `Curry.Base.Equiv`\n\n
  \ * Replaced module `Curry.ExtendedFlat.Interface.Equality` by\n    `Curry.ExtendedFlat.InterfaceEquivalence`
  using a type class to\n    implement equivalence of FlatCurry interfaces\n\n  *
  Removed file name extensions for FlatCurry XML files.\n\n  * Added syntax extension
  `NegativeLiterals` to translate negated literals\n    into negative literals instead
  of a call to `Prelude.negate` and\n    `Prelude.negateFloat`, respectively.\n\n
  \ * Added `CYMAKE` to the list of recognized tools when parsing an options\n    pragma
  (`{-# OPTIONS_CYMAKE opt1 opt2 ... optN #-}`).\n\nVersion 0.3.10\n==============\n\n
  \ * Updated internal structure of `Curry.Base.Filenames` and\n    `Curry.Base.PathUtils`.\n\n
  \ * Fixed bug in parser which complained `:-> expected` when it really\n    looked
  for `:>`.\n\n  * Make library compile under GHC 7.8 without warnings.\n\n  * Unliterating
  and lexing/parsing of source files are now decoupled\n    to support custom preprocessors.\n\n
  \ * Split `Curry.AbstractCurry` and `Curry.FlatCurry` into two modules\n    `.Type`
  and `.Files`, where `.Type` now only contains the type definition\n    while `.Files`
  contains read/write functions.\n    Both are subsumed by the parent modules `Curry.AbstractCurry`\n
  \   and `Curry.FlatCurry` for convenience.\n\nVersion 0.3.9\n=============\n\n  *
  Implementation of module pragmas added. Module pragmas of the following\n    types
  are now parsed and represented in the abstract syntax tree:\n\n    ~~~ {.curry}\n
  \   {-# LANGUAGE LANG_EXT+ #-}\n    {-# OPTIONS \"string\" #-}\n    {-# OPTIONS_TOOL
  \"string\" #-}\n    module Main where\n    ~~~\n\n    where\n\n      - `LANGEXT+`
  is a non-empty, comma-separated list of the following\n        language extensions:
  `AnonFreeVars`, `FunctionalPatterns`,\n        `NoImplicitPrelude`, `Records`\n
  \     - `TOOL` is either `KICS2`, `PAKCS`, or some other tool, represented\n        as
  `Unknown String`.\n\n    Note that, naturally, the curry-base library only recognizes
  the above\n    mentioned pragmas, while the processing is up to the respective tool.\n\n
  \   All other texts given in the pragma braces is ignored and treated as\n    a
  nested comment.\n\n  * Reactivation of Curry interface files.\n    During adaption
  of the MCC frontend to FlatCurry the Curry interface\n    files have been deactivated
  and replaced by FlatCurry's interface\n    files. To allow the later addition of
  type classes to Curry,\n    they have now been reactivated.\n\nVersion 0.3.8\n=============\n\n
  \ * The parser now takes the layout into respect when parsing the import\n    list.
  This fixes issue #494 where a module with imports without\n    restrictions, directly
  followed by an operator definition,\n    could not be parsed.\n\n  * Various internal
  improvements.\n\nVersion 0.3.7\n=============\n\n  * Support for typed FlatCurry
  expressions added. Now additional type\n    information given by the programmer
  as in\n\n    ~~~ {.curry}\n    null (unknown :: [()])\n    ~~~\n\n    is represented
  in FlatCurry and cann therefore be processed by other\n    programs like PAKCS or
  KICS2.\n\nVersion 0.3.6\n=============\n\n  * Fixed a bug where character constants
  not contained in the ASCII alphabet\n    were translated incorrectly.\n\nVersion
  0.3.5\n=============\n\n  * Fixed a bug w.r.t. pretty-printing of records.\n\nVersion
  0.3.4\n=============\n\n  * Made compiler messages comparable to allow later sorting
  of compiler\n    errors and warnings to present them in the order of their occurence.\n\nVersion
  0.3.3\n=============\n\n  * Improved pretty printing of Curry modules.\n\nVersion
  0.3.2\n=============\n\n  * Improved pretty-printing of warnings and errors.\n\n
  \ * Improved error message for missing precendence after fixity declaration.\n\n
  \ * Changed syntax of records to allow disambiguation of record selection\n    and
  case branches.\n\n  * Various improvements.\n\nVersion 0.3.1\n=============\n\n
  \ * Improved support for anonymous identifiers (test predicate, parser\n    also
  returns source code position).\n\nVersion 0.3.0\n=============\n\n  * Massive refactoring
  of the previous version.\n\n  * All compiler warnings removed.\n\n  * Fixed various
  implementation bugs.\n"
basic-deps:
  extra: ! '>=1.4.6'
  base: ==4.*
  time: -any
  filepath: -any
  parsec: -any
  containers: -any
  mtl: -any
  transformers: -any
  pretty: -any
  directory: ! '>=1.2.0.1'
all-versions:
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 1.0.0
author: ! 'Wolfgang Lux, Martin Engelke, Bernd Braßel, Holger Siegel,

  Björn Peemöller, Finn Teegen'
latest: 1.0.0
description-type: haddock
description: ! 'This package serves as a foundation for Curry compilers.

  It defines the intermediate language formats FlatCurry.

  Additionally, it provides functionality for the smooth

  integration of compiler frontends and backends.'
license-name: BSD-3-Clause
