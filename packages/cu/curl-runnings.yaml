homepage: https://github.com/aviaviavi/curl-runnings#readme
changelog-type: ''
hash: fe2fcf1c04dfd20a93f955e2c6451843a0298700c2cc11acedac843eca74c6f2
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4.4'
  curl-runnings: -any
  hspec-expectations: ! '>=0.8.2'
  directory: ! '>=1.3.0.2'
maintainer: mail@avi.press
synopsis: A framework for declaratively writing curl based API tests
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.2'
  case-insensitive: ! '>=0.2.1'
  base: ! '>=4.7 && <5'
  aeson-pretty: ! '>=0.8.5'
  unordered-containers: ! '>=0.2.8.0'
  hspec: ! '>=2.4.4'
  text: ! '>=1.2.2.2'
  megaparsec: ! '>=6.3.0'
  cmdargs: ! '>=0.10.20'
  http-conduit: ! '>=2.2.4'
  http-types: ! '>=0.9.1'
  aeson: ! '>=1.2.4.0'
  curl-runnings: -any
  yaml: ! '>=0.8.28'
  vector: ! '>=0.12.0'
  hspec-expectations: ! '>=0.8.2'
  directory: ! '>=1.3.0.2'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.6.0'
author: Avi Press
latest: '0.6.0'
description-type: markdown
description: ! "# curl-runnings\n\n[![Build Status](https://travis-ci.org/aviaviavi/curl-runnings.svg?branch=master)](https://travis-ci.org/aviaviavi/curl-runnings)\n\n_Feel
  the rhythm! Feel the rhyme! Get on up, it's testing time! curl-runnings!_\n\ncurl-runnings
  is a framework for writing declarative, curl based tests for your\nAPIs. Write your
  tests quickly and correctly with a straight-forward\nspecification in yaml or json
  that can encode simple but powerful matchers\nagainst responses.\n\nAlternatively,
  you can use the curl-runnings library to write your tests in\nHaskell (though a
  haskell setup is absolutely not required to use this tool).\n\n### Why?\n\nWhen
  writing curl based smoke/integration tests for APIs using bash and `curl`\nis very
  convenient, but quickly becomes hard to maintain. Writing matchers for\njson output
  quickly becomes unweildy and error prone. Writing these sorts of\ntests in a more
  traditional programming language is fine, but certainly more\ntime consuming to
  write than some simple curl requests. curl-runnings aims to\nmake it very easy to
  write tests that just hit some endpoints and verify the\noutput looks sane.\n\nNow
  you can write your tests just as data in a yaml or json file,\nand curl-runnings
  will take care of the rest!\n\nWhile yaml/json is the current way to write curl-runnings
  tests, this project is\nbeing built in a way that should lend itself well to an
  embedded domain specific\nlanguage, which is a future goal for the project. curl-runnings
  specs in Dhall\nis also being developed and may fufill the same needs.\n\n### Installing\n\nThere
  are few options to install:\n\n- download the releases from the\n  github [releases
  page](https://github.com/aviaviavi/curl-runnings/releases)\n- install the binary
  with `stack` or `cabal`\n- build from source with `stack`\n\n### Writing a test
  specification\n\nWrite your tests specs in a yaml or json file. See /examples to
  get\nstarted. A test spec is a top level array of test cases, each item represents
  a\nsingle curl and set of assertions about the response.\n\n### Running\n\nOnce
  you've written a spec, simply run it with:\n\n```bash $ curl-runnings -f path/to/your/spec.yaml
  ```\n\nIf all your tests pass, curl-runnings will cleanly exit with a 0 code. A
  code of\n1 will be returned if any tests failed.\n\nFor more info:\n\n```bash $
  curl-runnings --help ```\n\n### Contributing\n\nCurl-runnings is totally usable
  now but is also being actively developed.\nContributions in any form are welcome
  and encouraged. Don't be shy! :D\n\n### Roadmap\n\n- [x] Json specifications for
  tests\n- [x] Yaml specifications for tests\n- [ ] Dhall specifications for tests\n-
  [ ] More specification features\n  - [x] Reference values from previous json responses
  in matchers\n  - [x] Environment variable interpolation\n  - [ ] Call out to arbitrary
  shell commands in and between test cases\n  - [ ] Timeouts\n  - [ ] Support for
  non-json content type\n  - [ ] Retry logic\n- [ ] A DSL for writing test specs\n
  \ \n"
license-name: MIT
