homepage: https://github.com/aviaviavi/curl-runnings#readme
changelog-type: ''
hash: 4538d8d17c70698a798ab6be7db0f752d8643cd1cdb0bbf3e22dfe0a2d377773
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4.4'
  curl-runnings: -any
  hspec-expectations: ! '>=0.8.2'
  directory: ! '>=1.3.0.2'
maintainer: mail@avi.press
synopsis: A framework for declaratively writing curl based API tests
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.2'
  case-insensitive: ! '>=0.2.1'
  base: ! '>=4.7 && <5'
  aeson-pretty: ! '>=0.8.5'
  unordered-containers: ! '>=0.2.8.0'
  hspec: ! '>=2.4.4'
  text: ! '>=1.2.2.2'
  cmdargs: ! '>=0.10.20'
  http-conduit: ! '>=2.2.4'
  http-types: ! '>=0.9.1'
  aeson: ! '>=1.2.4.0'
  curl-runnings: -any
  yaml: ! '>=0.8.28'
  vector: ! '>=0.12.0'
  hspec-expectations: ! '>=0.8.2'
  directory: ! '>=1.3.0.2'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
author: Avi Press
latest: '0.3.0'
description-type: markdown
description: ! "# curl-runnings\n\n[![Build Status](https://travis-ci.org/aviaviavi/curl-runnings.svg?branch=master)](https://travis-ci.org/aviaviavi/curl-runnings)\n\n_Feel
  the rhythm! Feel the rhyme! Get on up, it's testing time! curl-runnings!_\n\ncurl-runnings
  is a framework for writing declarative, curl based tests for your APIs. \n\nWrite
  your tests quickly and correctly with a straight-forward specification in\nyaml
  or json. A DSL for writing your tests is on the way! Alternatively, you can\nuse
  the curl-runnings library to write your tests directly in Haskell.\n\n### Why?\n\nWhen
  writing curl based smoke/integration tests for APIs using bash and `curl`\nis very
  convenient, but quickly becomes hard to maintain. Writing matchers for\njson output
  quickly becomes unweildy and error prone. Writing these sorts of\ntests in a more
  traditional programming language is fine, but certainly more\ntime consuming to
  write than some simple curl requests. curl-runnings aims to\nmake it very simple
  to write tests that curl some endpoints and verify the\noutput looks sane.\n\nWith
  curl-runnings, you can write your tests just as data in a yaml or json file,\ncurl
  runnings will take care of the rest!\n\nWhile yaml/json is the current way to write
  curl-runnings tests, this project is\nbeing built in a way that should lend itself
  well to an embedded domain specific\nlanguage, which is a future goal for the project\n\n###
  Installing\n\nThere are few options to install:\n\n- download the releases from
  the github [releases page](https://github.com/aviaviavi/curl-runnings/releases)\n-
  `stack install curl-runnings`\n- `cabal install curl-runnings`\n- build from source
  with `stack`\n\n### Writing a test specification\n\nFor now, you write your tests
  specs in a yaml or json file. See /examples to get\nstarted. A test spec is a top
  level array of test cases, each item represents a\nsingle curl and set of assertions
  about the response.\n\n### Running\n\nOnce you've written a spec, simply run it
  with:\n\n```bash\n$ curl-runnings -f path/to/your/spec.yaml\n```\n\nIf all your
  tests pass, curl-runnings will cleanly exit with a 0 code. A code of\n1 will be
  returned if any tests failed.\n\nFor more info:\n\n```bash\n$ curl-runnings --help\n```\n\n###
  Roadmap\n\nContributions in any form are welcome and encouraged. Don't be shy! :D\n\n-
  [x] Json specifications for tests\n- [x] Yaml specifications for tests\n- [ ] Embedded
  dsl for specifications for tests. As the specification gets more complex.\n  - [
  ] Spec out dsl that can compile down into a yaml/json spec\n  - [ ] Implement dsl\n-
  [ ] More specification features\n  - [ ] timeouts\n  - [ ] retry logic\n  - [ ]
  ability to configure alerts\n  \n"
license-name: MIT
