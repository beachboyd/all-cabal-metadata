homepage: https://github.com/aviaviavi/curl-runnings#readme
changelog-type: ''
hash: 06945ff4c1f78fb8e9578c755e2637f6883e1c44dfd7c8056616b73f4bcf17f8
test-bench-deps:
  base: ! '>=4.7 && <5'
  curl-runnings: -any
maintainer: mail@avi.press
synopsis: A framework for declaratively writing curl based API tests
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.2 && <0.11'
  base: ! '>=4.7 && <5'
  aeson-pretty: ! '>=0.8.5 && <0.9'
  unordered-containers: ! '>=0.2.8.0 && <0.3'
  text: ! '>=1.2.2.2 && <1.3'
  cmdargs: ! '>=0.10.20 && <0.11'
  http-conduit: ! '>=2.2.4 && <2.3'
  aeson: ! '>=1.2.4.0 && <1.3'
  curl-runnings: -any
  yaml: ! '>=0.8.28 && <0.9'
all-versions:
- '0.1.0'
author: Avi Press
latest: '0.1.0'
description-type: markdown
description: ! "# curl-runnings\n\n[![Build Status](https://travis-ci.org/aviaviavi/curl-runnings.svg?branch=master)](https://travis-ci.org/aviaviavi/curl-runnings)\n\nFeel
  the rhythm! Feel the rhyme! Get on up, it's testing time! curl-runnings!\n\ncurl-runnings
  is a framework for writing declarative, curl based tests for your APIs. \n\n###
  Why?\n\nWhen writing curl based smoke/integration tests for APIs using bash and
  `curl`\nis very convenient, but quickly becomes hard to maintain. Writing matchers
  for\njson output quickly becomes unweildy and error prone. Writing these sorts of\ntests
  in a more traditional programming language is fine, but certainly more\ntime consuming
  to write than some simple curl requests. curl-runnings aims to\nmake it very simple
  to write tests that curl some endpoints and verify the\noutput looks sane.\n\nWith
  curl-runnings, you can write your tests just as data in a yaml or json file,\ncurl
  runnings will take care of the rest!\n\nWhile yaml/json is the current way to write
  curl-runnings tests, this project is\nbeing built in a way that should lend itself
  well to an embedded domain specific\nlanguage, which is a future goal for the project\n\n###
  Installing\n\nThere are few options to install:\n\n- clone this repo and run `stack
  install`\n- download the releases \n- (soon) - `cabal install curl-runnings`\n\n###
  Writing a test specification\n\nA test spec is a top level list of test cases, each
  item represents a single curl and set of assertions about the response:\n\n```yaml\n---\n#
  the top level of the file is an array of test cases\n- name: test 1 # required\n
  \ url: http://your-endpoint.com # required\n  requestMethod: GET # required\n  #
  specify the json payload we expect here, if any\n  expectData: # optional\n    #
  `tag` refers to the type of matcher we want to use\n    # valid tags are `Exactly`
  | `Contains`\n    tag: Exactly\n    # check for exactly this payload\n    contents:\n
  \     okay: true\n      msg: ''\n  expectStatus: # requried\n    # `tag` refers
  to the type of matcher we want to use\n    # valid tags are `ExactCode` (contents
  :: number) | `AnyCodeIn` (contents :: [number])\n    tag: ExactCode\n    contents:
  200\n- name: test 2\n  url: http://your-endpoint.com/path\n  requestMethod: POST\n
  \ expectStatus:\n    # Any code listed in `contents` is valid\n    tag: AnyCodeIn\n
  \   contents:\n    - 200\n    - 201\n  # json data to send with the request\n  requestData:\n
  \   hello: there\n    num: 1\n- name: test 3\n  url: http://your-url.com/other/path\n
  \ requestMethod: GET\n  expectData:\n    # apply a list of matchers to the returned
  json payload\n    tag: Contains\n    contents:\n    # valid tags are `ValueMatch`
  | `KeyValueMatch`\n    # find the value `true` anywhere in the payload. This can
  be useful for matching against values \n    # where you don't know the key ahead
  of time, or for values in a top level array.\n    - tag: ValueMatch\n      contents:
  true\n    # `KeyValueMatch` looks for the key/value pair anywhere in the payload\n
  \   # here, {'okay': true} must be somewhere in the return payload\n    - tag: KeyValueMatch\n
  \     matchKey: okay\n      matchValue: true\n  expectStatus:\n    tag: ExactCode\n
  \   contents: 200\n```\n\n### Running\n\nOnce you've written a spec, simply run
  it with:\n\n```bash\n$ curl-runnings -f path/to/your/spec.yaml\n```\n\nIf all your
  tests pass, curl-runnings will cleanly exit with a 0 code. A code of\n1 will be
  returned if any tests failed.\n\nFor more info:\n\n```bash\n$ curl-runnings --help\n```\n\n\n###
  Future work\n\n- [x] Json specifications for tests\n- [x] Yaml specifications for
  tests\n- [ ] Embedded dsl for specifications for tests. As the specification gets
  more complex.\n  - [ ] Spec out dsl that can compile down into a yaml/json spec\n
  \ - [ ] Implement dsl\n- [ ] More specification features\n  - [ ] timeouts\n  -
  [ ] retry logic\n  - [ ] ability to configure alerts\n"
license-name: MIT
