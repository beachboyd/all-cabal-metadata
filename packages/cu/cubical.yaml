homepage: https://github.com/simhu/cubical
changelog-type: ''
hash: be1e75a918dbab68de1f591a4d50c2e44d2a031f264743097bee098858f54473
test-bench-deps: {}
maintainer: mortberg@chalmers.se
synopsis: Implementation of Univalence in Cubical Sets
changelog: ''
basic-deps:
  haskeline: ! '>=0.7'
  base: ! '>=4.5 && <5'
  filepath: ! '>=1.3'
  array: ! '>=0.4'
  mtl: ! '>=2.1'
  transformers: ! '>=0.3'
  BNFC: ! '>=2.5'
  directory: ! '>=1.2'
all-versions:
- 0.1.0
- 0.1.2
- 0.2.0
author: Cyril Cohen, Thierry Coquand, Simon Huber, Anders MÃ¶rtberg
latest: 0.2.0
description-type: markdown
description: ! "CUBICAL\r\n=======\r\n\r\nCubical implements an experimental simple
  type-checker for type theory\r\nwith univalence with an evaluator for closed terms.\r\n\r\n\r\nINSTALL\r\n-------\r\n\r\nTo
  install cubical, a working Haskell and cabal installation are\r\nrequired.  To build
  cubical go to the main directory and do\r\n\r\n  `cabal install`\r\n\r\nTo only
  build (not install) cubical do\r\n\r\n  `cabal configure`\r\n\r\n  `cabal build`\r\n\r\nAlternatively
  one can also use the Makefile to build the system by\r\ntyping:\r\n\r\n  `make bnfc
  && make`\r\n\r\nHowever this requires that the following Haskell packages are\r\ninstalled:\r\n\r\n
  \ mtl, haskeline, directory, BNFC, alex, happy\r\n\r\n\r\n**Note:** In order to
  make the mutual keyword work a patched version\r\nof BNFC is needed. To install
  this download the patched version from\r\n\r\n[https://github.com/simhu/bnfc](https://github.com/simhu/bnfc)\r\n\r\nand
  then `cabal install` it.\r\n\r\n###Emacs mode:\r\n\r\nTo install syntax highlighting
  for cubical files load the cubical.el\r\nfile into emacs. In order to load it automatically
  add\r\n\r\n`(load-file \"/path/to/cubical.el\")`\r\n\r\n`(add-to-list 'auto-mode-alist
  '(\"\\\\.cub\\\\'\" . cub-mode))`\r\n\r\nto your .emacs file.\r\n\r\n\r\nUSAGE\r\n-----\r\n\r\nTo
  run cubical type\r\n\r\n  `cubical <filename>`\r\n\r\nTo enable the debugging mode
  add the -d flag. In the interaction loop\r\ntype :h to get a list of available commands.
  Note that the current\r\ndirectory will be taken as the search path for the imports.\r\n\r\n\r\nOVERVIEW\r\n--------\r\n\r\nThe
  program is organized as follows:\r\n\r\n * the files are parsed and produce a list
  of definitions; the syntax\r\n   is described in the file Exp/Doc.txt or Exp/Doc.tex
  (auto generated\r\n   by bnfc);\r\n\r\n * this list of definitions is type-checked;\r\n\r\n
  * if successful, we can then write an expression which is\r\n   type-checked w.r.t.
  these definitions;\r\n\r\n * if the expression is well-typed it is translated to
  the cubical\r\n   syntax and evaluated by a \"cubical abstract machine\", which\r\n
  \  computes its semantics in cubical sets; the result is shown after\r\n   \"EVAL:\"
  (to enable the trace of the evaluation run cubical with the\r\n   -d flag);\r\n\r\nDuring
  type-checking, we consider the primitives listed in\r\nexamples/primitive.cub as
  non interpreted constants. The type-checker\r\nis in the file TypeChecker.hs and
  is rudimentary (200 lines), without good\r\nerror messages.\r\n\r\nThese primitives
  however have a meaning in cubical sets, and the\r\nevaluation function computes
  this meaning. This semantics/evaluation\r\nis described in the file Eval.hs, which
  is the main file. The most\r\ncomplex part corresponds to the computations witnessing
  that the\r\nuniverse has Kan filling operations.\r\n\r\nFor writing this semantics,
  it was convenient to use the alternative\r\npresentation of cubical sets as nominal
  sets with 01-substitutions\r\n(see A. Pitts' note, references listed below).\r\n\r\nThe
  primitives needed to get univalence [are](notes/allprim.txt).\r\n\r\n\r\nDESCRIPTION
  OF THE LANGUAGE\r\n---------------------------\r\n\r\nWe have\r\n\r\n * dependent
  function types `(x:A) -> B`; non-dependent function types\r\n   can be written as
  `A -> B`\r\n\r\n * abstraction `\\x -> e`\r\n\r\n * named/labelled sum `c1 (x1:A1)...(xn:An)
  | c2 ... | ...`\r\n   a data type is a recursively defined named sum\r\n\r\n * function
  defined by case\r\n   `f = split c1 x1 ... xn -> e1 | c2 ... -> ... | ...`\r\n\r\n
  * sigma types `(x:A) * B`, with the pair constructor (e1,e2)\r\n   and eliminators
  e.1 and e.2\r\n\r\n * a universe `U` and assume `U:U` for simplicity\r\n\r\n * let/where:
  `let D in e` where D is a list of definitions an\r\n   alternative syntax is `e
  where D`\r\n\r\n * `undefined` like in Haskell\r\n\r\n * mutual definitions (this
  requires a patched version of BNFC, see\r\n   the install instructions above).\r\n\r\n\r\nThe
  syntax allows Landin's offside rule similar to Haskell.\r\n\r\nThe basic (untyped)
  language has a direct simple denotational\r\nsemantics. Type theory works with the
  total part of this language (it\r\nis possible to define totality at the denotational
  semantics level).\r\nOur evaluator works in a nominal version of this semantics.
  The\r\ntype-checker assumes that we work in this total part, however, there\r\nis
  no termination check.\r\n\r\n\r\nDESCRIPTION OF THE SEMANTICS/EVALUATION\r\n---------------------------------------\r\n\r\nThe
  values depend on a new class of names, also called directions,\r\nwhich can be thought
  of as varying over the unit interval [0,1].  A\r\npath connecting a0 and a1 in the
  direction x is a value p(x) such that\r\np(0) = a0 and p(1) = a1.  An element in
  the identity type a0 = a1 is\r\nthen of the form \\<x\\>p(x) where the name x is
  bound.  An identity proof\r\nin an identity type will then be interpreted as a \"square\"
  of the form\r\n\\<x\\>\\<y\\>p(x,y).  See examples/hedberg.cub and the example test3
  (in the\r\ncurrent implementation directions/names are represented by numbers).\r\n\r\nOperationally,
  a type is explained by giving what are its Kan filling\r\noperation. For instance,
  we have to explain what are the Kan filling\r\nfor the dependent product.\r\n\r\nThe
  main step for interpreting univalence is to transform an\r\nequivalence A -> B to
  a path in any direction x connecting A and B.\r\nThis is a new basic element of
  the universe, called VEquivEq in the\r\nfile Eval.hs which takes a name and arguments
  A,B,f and the proof that\r\nf is an equivalence. The main part of the work is then
  to explain the\r\nKan filling operation for this new type.\r\n\r\nThe Kan filling
  for the universe can be seen as a generalization of\r\nthe operation of composition
  of relation.\r\n\r\n\r\nDESCRIPTION OF THE EXAMPLES\r\n---------------------------\r\n\r\nThe
  directory examples contains some examples of proofs. The file\r\nexamples/primitive.cub
  list the new primitives that have cubical set\r\nsemantics. These primitive notions
  imply the axiom of univalence. The\r\nfile examples/primitive.cub should be the
  basis of any development\r\nusing univalence.\r\n\r\nMost of the example files contain
  simple test examples of\r\ncomputations:\r\n\r\n * the file hedberg.cub contains
  a test computation of a square in\r\n   Nat; the example is test. In the type Nat
  or Bool, any square\r\n   (proof of identity of two identity proofs) is constant.\r\n\r\n
  * The file nIso.cub contains a non trivial example of a transport of\r\n   a section
  of a dependent type along the isomorphism between N and\r\n   N+1; the examples
  are testSN, testSN1, testSN2, testSN3.\r\n\r\n * The file testInh.cub contains examples
  of computation for the\r\n   propositional reflection. It gives an example test
  which produces\r\n   a (surprisingly complex) composition of squares in the universe.\r\n\r\n
  * The file quotient.cub contains an example of a computation from an\r\n   equivalence
  class.  The relation R over Nat is to have the same\r\n   parity, and the map is
  Nat/R -> Bool which returns true if the\r\n   equivalence class contains even number.
  The examples are test5 and\r\n   test8 which computes the value of this map on the
  equivalence class\r\n   of five and eight respectively. This uses the file description.cub\r\n
  \  which justifies the axiom of description.\r\n\r\n * The file Kraus.cub contains
  the example of Nicolai Kraus of the\r\n   myst function, which also shows that we
  can extract computational\r\n   information from propositions; the example is testMyst
  zero; the\r\n   computation does not create higher dimensional objects.\r\n\r\n
  * The file swap.cub contains examples of transport along the\r\n   isomorphism between
  A x B and B x A; the examples are test14,\r\n   test15.\r\n\r\n\r\nNEWS (to be detailed)\r\n----\r\n\r\n
  * Some constants have a direct cubical semantics having better\r\n   behavior w.r.t.
  equality.  For instance the constant\r\n\r\n    `mapOnPath : (A B : U) (f : A ->
  B) (a b : A)\r\n                 (p : Id A a b) -> Id B (f a) (f b)`\r\n\r\n   has
  a semantics which satisfies the definitional equalities:\r\n\r\n    `mapOnPath (id
  A)       = id A`\r\n\r\n    `mapOnPath (g o f)      = (mapOnPath g) o (mapOnPath
  f)`\r\n\r\n    `mapOnPath f (refl A a) = refl B (f a)`\r\n\r\n   The evaluation
  is now used for conversion during type-checking,\r\n   and then we get these equalities
  definitionally.\r\n\r\n   Some proofs are now much simpler than before, e.g. the
  proof of the\r\n   Graduate Lemma.\r\n\r\n * Similarly we also have eta conversion
  and surjective pairing.\r\n\r\n * As a test, the particular case of the circle (S1)
  and the interval\r\n   (I) has been added.\r\n\r\n\r\nFURTHER WORK (non-exhaustive)\r\n------------\r\n\r\n
  * The Kan filling operations should be formally proved correct and\r\n   tested
  on higher inductive types.\r\n\r\n * For higher inductive types, like the circle
  or the sphere, it would\r\n   be appropriate to *extend* the syntax of type theory,
  in order to\r\n   get natural elimination rules (see the paper on cubical sets).\r\n\r\n
  * To explore the termination of the resizing rule.  Computationally\r\n   the resizing
  rule does not do anything, but the termination seems\r\n   to be an interesting
  proof-theoretical problem.\r\n\r\n\r\nREFERENCES AND NOTES\r\n--------------------\r\n\r\n
  * Voevodsky's home page on univalent foundation\r\n\r\n * HoTT book and webpage:\r\n
  \  [http://homotopytypetheory.org/](http://homotopytypetheory.org/)\r\n\r\n * Type
  Theory in Color, J.P. Bernardy, G. Moulin\r\n\r\n * A simple type-theoretic language:
  Mini-TT, Th. Coquand,\r\n   Y. Kinoshita, B. Nordstrï¿½m and M. Takeyama\r\n\r\n *
  [A cubical set model of type\r\n   theory](http://www.cse.chalmers.se/~coquand/model1.pdf),
  M. Bezem,\r\n   Th. Coquand and S. Huber.\r\n\r\n * [A remark on contractible family
  of\r\n   type](http://www.cse.chalmers.se/~coquand/contr.pdf), Th. Coquand.\r\n\r\n
  \  This note explains how to derive univalence.\r\n\r\n * [An equivalent presentation
  of the Bezem-Coquand-Huber category of\r\n   cubical sets](http://arxiv.org/abs/1401.7807),
  A. Pitts.\r\n\r\n   This gives a presentation of the cubical set model in nominal
  sets.\r\n\r\n * [Remark on singleton\r\n   types](http://www.cse.chalmers.se/~coquand/singl.pdf),
  Th. Coquand.\r\n\r\n * [Note on Kripke\r\n   model](http://www.cse.chalmers.se/~coquand/countermodel.pdf),
  M. Bezem\r\n   and Th. Coquand.\r\n\r\n * [Some connections between cubical sets
  and\r\n   parametricity](http://www.cse.chalmers.se/~coquand/param.pdf),\r\n   Th.
  Coquand.\r\n\r\n\r\nAUTHORS\r\n-------\r\n\r\nCyril Cohen, Thierry Coquand, Simon
  Huber, Anders Mï¿½rtberg\r\n"
license-name: MIT
