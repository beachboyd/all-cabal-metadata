homepage: http://curry-language.org
changelog-type: markdown
hash: 6ebef4e0802acfd45e11bbdb47bab78ecbebfb96afa642b8e9634d234e84d310
test-bench-deps:
  Cabal: ! '>=1.20'
  base: ==4.*
  filepath: -any
  curry-frontend: -any
  curry-base: ==1.0.0
maintainer: fte@informatik.uni-kiel.de
synopsis: ! 'Compile the functional logic language Curry to several

  intermediate formats'
changelog: ! "Change log for curry-frontend\n=============================\n\nUnder
  development (1.0.1)\n=============\n\n  * Fixed bug with wrong order of super classes
  in selector functions\n    generated by the dictionary transformation.\n  * Changed
  desugaring of numeric literals. It now generates calls to the\n    functions `Prelude.fromInt`
  and `Prelude.fromFloat`.\n  * Fixed bug with wrong original names of imported record
  labels\n  * Fixed bug when compiling type constructor classes with super classes\n
  \ * Adjusted warning message for potentially unreachable pattern matches\n\nVersion
  1.0.0\n=============\n\n  * Added support for typeclasses as known from Haskell\n\nVersion
  0.4.2\n=============\n\n  * Improved readability of environment information in dumps\n
  \   (option dump-simple)\n  * Added option to dump all bindings instead of just
  local ones\n    (dump-all-bindings)\n  * Introduced annotated FlatCurry as a new
  output format\n    (annotated-flat)\n\nVersion 0.4.1\n=============\n\n  * Added
  a simple cabal test suite\n  * Split import of interfaces/modules and expansion
  and checking of\n    import specifications into two modules.\n  * Improved error
  messages generated by export check (fixes #1253)\n  * Split checking and expansion
  of export specification into two\n    subsequent steps (by Yannik Potdevin, fixes
  #1335)\n  * Consider parenthesized type expressions in the Curry AST (by Katharina
  Rahf)\n  * Added syntax extension `ExistentialQuantification` that allows the use\n
  \   of existentially quantified types in data and newtype constructors\n  * Fixed
  bug that type declarations weren't syntax checked\n\nVersion 0.4.0\n=============\n\n
  \ * Refactored AbstractCurry generation\n\n  * Complete refactoring of FlatCurry
  generation\n\n  * Removed support for Curry's record syntax and introduced Haskell's
  record\n    syntax instead\n\n  * During desugaring record updates are translated
  to fcase-expressions instead\n    of introducing explicit update functions\n\n  *
  HTML generation now places HTML files for hierarchical modules into\n    files named
  `<Module>_curry.html`, i.e., no sub-folders reflecting\n    the the module name
  hierarchy are generated. In addition, if the option\n    `--html-dir` is not given,
  the current directory is used as the output\n    directory.\n\n  * Removed record
  type extensions\n\n  * Enabled declaration of (mutually) recursive record types\n\n
  \ * Removed expansion of record types in type error messages\n\n  * Replaced `MessageM`
  monad with `CYT` monads and moved `CYT` monads\n    to package `curry-base`\n\n
  \ * Implemented warnings for overlapping module aliases - fixes #14\n\n  * The check
  for overlapping rules has been completely refactored and\n    improved to now also
  handle rigid case expressions.\n\n  * The check for missing pattern matching alternatives
  now correctly handles\n    String literals - fixes #1048.\n\n  * Added warnings
  for top-level functions without type signatures - fixes #769\n\n  * Moved pretty-printing
  of types from Checks.TypeCheck to Base.CurryTypes\n\n  * Type synonyms in typed
  expressions are now desugared - fixes #921\n\n  * Declaration of operator precedence
  is now optional in infix operator\n    declarations\n\n  * Moved module `InterfaceEquivalence`
  to curry-base\n    (`Curry.Syntax.InterfaceEquivalence`)\n\n  * Converted literate
  Haskell files into simple Haskell files\n\n  * Removed support for FlatCurry XML
  files.\n\n  * Added syntax extension `NegativeLiterals` to translate negated literals\n
  \   into negative literals instead of a call to `Prelude.negate` and\n    `Prelude.negateFloat`,
  respectively.\n\n  * The frontend now considers options pragmas of the following
  form:\n\n    ~~~ {.curry}\n    {-# OPTIONS_CYMAKE opt1 ... optn #-}\n    ~~~\n\n
  \   The string following `OPTIONS_CYMAKE` will be split at white spaces\n    and
  treated like an ordinary command line argument string.\n\n    If one wishes to provide
  options containing spaces, e.g., directory\n    paths or alike, this can be achieved
  by quoting the respective argument\n    using either `'single quotes'` or `'double
  quotes'` (may bot be mixed).\n\n    Note that *following options are excluded*:\n\n
  \     * A change of the current mode\n        (e.g., change from compilation to
  HTML generation)\n      * A change of the import  paths\n      * A change of the
  library paths\n      * A change of the compilation targets\n        (e.g., change
  from FlatCurry to AbstractCurry)\n\n    These options can only be set via the command
  line.\n\n  * Refactored the source code HTML generation.\n    The generation now
  supports full Curry with all supported extensions,\n    i.e., it supports pragmas,
  record types and functional patterns.\n    Furthermore, the created HTML has been
  simplified, and updated towards\n    HTML 5.\n\n  * The HTML generation now accepts
  an option `--htmldir=dir` to specify\n    the output directory of the generated
  HTML files.\n\nVersion 0.3.10\n==============\n\n  * Various improvements of the
  internal structure.\n\n  * Improved status messages. The compilation status message
  are now of the form\n\n        [m of n] Compiling/Skipping <Module> (<source file>,
  <target file>)\n\n  * Implemented support for custom preprocessors. It is now possible
  to run\n    a custom preprocessor command via the following options:\n\n    * `-F`
  enables support for a preprocessor\n    * `-pgmF <cmd>` set the preprocessor command
  to `<cmd>`\n    * `-optF <arg>` adds an additional argument to the preprocessor
  command\n      (can be repeated to add multiple arguments)\n\n    The preprocessor
  is applied to all source files which are (re)compiled\n    after unliterating *and
  after determining the import list*.\n    Consequently, adding modules via the preprocessor
  will results in\n    compilation errors due to missing imports.\n    On the other
  hand, the frontend will automatically determine changed\n    files which are then
  handed to the preprocessor.\n\n    The command is called with at least three arguments:\n\n
  \    #. The (normalised) file name of the source file currently processed.\n        **This
  name is intended only for reference.**\n     #. The name of the file containing
  the (potentially unliterated)\n        contents of the original file.\n        **This
  is the file the preprocessor should read from.**\n     #. The name of the file where
  the preprocessed source code should go to.\n        **This is the file the preprocessor
  should write to.**\n     #. Optionally, any additional arguments specified using
  `-optF`.\n\nVersion 0.3.9\n=============\n\n  * Simplified verbosity options by
  merging options \"-v1\" and \"-v2\".\n    Now only \"-v0\" and \"-v1\" are supported.\n\n
  \ * Fixed bug in non-exhaustive pattern matching check which occured\n    when retrieving
  the siblings of a constructor imported using an alias.\n\n  * Fixed bug when using
  functional patterns in `case`-expressions.\n    Functional patterns are only allowed
  in the patterns of a function\n    definition and forbidden elsewhere, i.e., in
  `case`-expressions,\n    `do`-sequences, list comprehensions or lambda expressions.\n\n
  \ * Implementation of module pragmas added. Module pragmas of the following\n    types
  are now parsed and represented in the abstract syntax tree:\n\n    ~~~ {.curry}\n
  \   {-# LANGUAGE LANG_EXT+ #-}\n    {-# OPTIONS \"string\" #-}\n    {-# OPTIONS_TOOL
  \"string\" #-}\n    module Main where\n    ~~~\n\n    where\n\n      - `LANGEXT+`
  is a non-empty, comma-separated list of the following\n        language extensions:
  `AnonFreeVars`, `FunctionalPatterns`,\n        `NoImplicitPrelude`, `Records`\n
  \     - `TOOL` is either `KICS2`, `PAKCS`, or some other tool, represented\n        as
  `Unknown String`.\n\n    While the distinct language pragmas enable the respective
  language\n    extensions, the OPTIONS pragma is ignored.\n\n    All other texts
  given in the pragma braces is ignored and treated as\n    a nested comment.\n\n
  \ * Error message for different arities of function equations now also\n    report
  the corresponding source code positions.\n\nVersion 0.3.8\n=============\n\n  *
  Implemented warnings for non-exhaustive pattern matchings\n    both in function
  declarations and `case`-expressions - fixes #349.\n\n  * Extended options to enable/disable
  certain types of warnings.\n\n  * Fixed problem when defining an operator directly
  after an import statement\n    without import restrictions - fixes #494.\n\n  *
  Fixed bug w.r.t. polymorphically typed local variables - fixes #480.\n\n  * Fixed
  missing polymorphism in record labels - fixes #445.\n\n  * Dumping of intermediate
  structures improved.\n\n  * Fixed bug in type checking w.r.t. recursive type synonyms
  - fixes 489.\n\n  * Reactivation of Curry interface files.\n    During adaption
  of the MCC frontend to FlatCurry the Curry interface\n    files have been deactivated
  and replaced by FlatCurry's interface\n    files. To allow the later addition of
  type classes to Curry,\n    they have now been reactivated.\n\n  * Implemented missing
  semantics of functional patterns in combination\n    with non-linear left-hand-sides
  and as-patterns.\n\n  * Various improvements.\n\nVersion 0.3.7\n=============\n\n
  \ * Support for typed FlatCurry expressions added. Now additional type\n    information
  given by the programmer as in\n\n    ~~~ {.curry}\n    null (unknown :: [()])\n
  \   ~~~\n\n    is represented in FlatCurry and cann therefore be processed by other\n
  \   programs like PAKCS or KICS2.\n\nVersion 0.3.6\n=============\n\n  * Error messages
  are now sorted according to their source code position.\n\nVersion 0.3.5\n=============\n\n
  \ * Improved reporting of mutiple type signatures.\n\nVersion 0.3.4\n=============\n\n
  \ * Bug in renaming phase fixed.\n\nVersion 0.3.3\n=============\n\n  * Corrected
  translation of `fcase`-expressions.\n\nVersion 0.3.2\n=============\n\n  * Non-linear
  left-hand-sides now work with guarded expressions - fixes #328.\n\n  * Implemented
  precedence check - fixes #327.\n\n  * Case completion refactored and corrected -
  fixes #323.\n\n  * Various improvements and refactorings.\n\nVersion 0.3.1\n=============\n\n
  \ * Corrected renaming of anonymous free variables - fixes #288.\n\nVersion 0.3.0\n=============\n\n
  \ * Massive refactoring of the previous version.\n\n  * All compiler warnings removed.\n\n
  \ * Fixed various implementation bugs (#9, #16, #19, #29, #289).\n\n"
basic-deps:
  extra: ! '>=1.4.6'
  base: ==4.*
  filepath: -any
  process: -any
  containers: -any
  curry-frontend: -any
  curry-base: ==1.0.0
  network-uri: ! '>=2.6'
  set-extra: -any
  mtl: -any
  transformers: -any
  pretty: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.2.6'
- '0.2.7'
- '0.2.8'
- '0.2.9'
- '0.2.10'
- '0.2.11'
- '0.2.12'
- '1.0.1'
author: ! 'Wolfgang Lux, Martin Engelke, Bernd Brassel, Holger Siegel,

  Bjoern Peemoeller, Finn Teegen'
latest: '1.0.1'
description-type: haddock
description: ! 'The Curry front end consists of the executable program

  "curry-frontend".

  It is used by various backends to compile Curry programs to

  an intermediate representation.

  The code is a stripped-down version of an early version of

  the Muenster Curry Compiler

  (<http://danae.uni-muenster.de/curry/>)

  which has been extended to produce different intermediate

  representations.

  For further information, please check

  <http://curry-language.org>'
license-name: BSD3
