homepage: https://github.com/larskuhtz/cuckoo
changelog-type: markdown
hash: a5194621b08fc30cc27274e2c519b40fb0971ed8b7180cec53468d986d6f8215
test-bench-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.11 && <4.15'
  criterion: ! '>=1.5'
  memory: ! '>=0.14'
  stopwatch: ! '>=0.1'
  random-internal: -any
  cryptonite: ! '>=0.26'
  hashable: ! '>=1.3'
  QuickCheck: ! '>=2.13'
  cuckoo: -any
maintainer: lakuhtz@gmail.com
synopsis: Haskell Implementation of Cuckoo Filters
changelog: |
  # Revision history for cuckoo

  ## 0.1.0.0 -- 2019-08-06

  * First version. Released on an unsuspecting world.
basic-deps:
  base: ! '>=4.11 && <4.15'
  memory: ! '>=0.14'
  random-internal: -any
  primitive: ! '>=0.7'
  vector: ! '>=0.12'
all-versions:
- 0.1.0.0
author: Lars Kuhtz
latest: 0.1.0.0
description-type: markdown
description: |+
  [![Build Status](https://travis-ci.org/larskuhtz/cuckoo.svg?branch=master)](https://travis-ci.org/larskuhtz/cuckoo)

  Haskell implementation of Cuckoo filters as described in

  [B. Fan, D.G. Anderson, M. Kaminsky, M.D. Mitzenmacher. Cuckoo Filter:
  Practically Better Than Bloom. In Proc. CoNEXT,
  2014.](https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf)

  Cuckoo filters are a data structure for probabilistic set membership. They
  support insertion, deletion, and membership queries for set elements.

  Membership queries may return false positive results. But queries don't return
  false negative results.

  Unlike Bloom filters, Cuckoo filters maintain an upper bound on the false
  positive rate that is independent of the load of the filter. However, insertion
  of new elements in the filter can fail. For typical configurations this
  probability is very small for load factors smaller than 90 percent.

  The implementation allows the user to specify the bucket size and the fingerprint
  size in addition to the capacity of the filter. The user can also provide custom
  functions for computing the primary hash and fingerprint.

license-name: BSD-3-Clause
