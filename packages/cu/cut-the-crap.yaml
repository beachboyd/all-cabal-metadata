homepage: ''
changelog-type: ''
hash: 6459f4e5d845a11b20fd94030c1fd0efc8b115b0d35aba1e2d99790fc2c8ec7f
test-bench-deps:
  exceptions: -any
  shelly: -any
  base: '>=4.7 && <5'
  time: -any
  hspec: -any
  text: -any
  hspec-core: -any
  quickcheck-classes: -any
  lens: -any
  unliftio-core: -any
  regex-tdfa: -any
  generic-lens: -any
  temporary: -any
  optparse-applicative: -any
  QuickCheck: -any
  system-filepath: -any
maintainer: jappieklooster@hotmail.com
synopsis: Cuts out uninteresting parts of videos by detecting silences.
changelog: ''
basic-deps:
  exceptions: -any
  shelly: -any
  base: '>=4.7 && <5'
  time: -any
  text: -any
  cut-the-crap: -any
  lens: -any
  unliftio-core: -any
  regex-tdfa: -any
  generic-lens: -any
  temporary: -any
  optparse-applicative: -any
  system-filepath: -any
all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.0
author: Jappie Klooster
latest: 1.4.0
description-type: markdown
description: "![logo](doc/logo.png)\n\n[![Jappiejappie](https://img.shields.io/badge/twitch.tv-jappiejappie-purple?logo=twitch)](https://www.twitch.tv/jappiejappie)\n[![Jappiejappie](https://img.shields.io/badge/Youtube-jappieklooster-red?logo=Youtube)](https://www.Youtube.com/channel/UCQxmXSQEYyCeBC6urMWRPVw)\n[![Build
  status](https://img.shields.io/travis/jappeace/cut-the-crap)](https://travis-ci.org/jappeace/cut-the-crap/builds/)\n[![Jappiejappie](https://img.shields.io/badge/discord-jappiejappie-black?logo=discord)](https://discord.gg/Hp4agqy)\n\n>
  Bless This Mess\n\nCut the crap is an automatic video editing program for streamers.\nIt
  can cut out uninteresting parts by detecting silences.\nThis was inspired by [jumpcutter](https://github.com/carykh/jumpcutter),\nwhere
  this program can get better quality results\nby using an (optional) dedicated microphone
  track.\nThis prevents cutting of [quieter consonants](https://youtu.be/DQ8orIurGxw?t=675)\nfor
  example.\nUsing ffmpeg more efficiently also produces faster results and\nis less
  error prone.\n\nYoutube has different requirements from streams then twitch does.\nWe
  want to cut out boring parts.\nJumpcut has solved that problem partly and this program\nbuilds
  on top of that idea.\nAt the moment we use ffmpeg for silence detection, \nthen
  we do some maths to figure out which segments are sounded,\nwhich is combined into
  the output video.\n\nIn the future we will add support for a music track\nwhich
  will not be chopped up.\n\n# Install\n\n## Nix/Nixos\n+ Apply [overlay](https://nixos.wiki/wiki/Overlays)
  found [here](https://github.com/jappeace/cut-the-crap/tree/master/overlay).\n+ Run
  `nix-env -iA cut-the-crap` or add to systemPackages.\n+ simply run `cut-the-crap`
  to display usage instructions.\n\n## Ubuntu\nDownload the .deb file from the [release
  page](https://github.com/jappeace/cut-the-crap/releases).\nInstall with:\n\n```shell\napt
  install ffmpeg\ndpkg -i ./cut-the-crap_1.0.0_amd64.deb \n```\n\nExecute with:\n```shell\ncut-the-crap\n```\n#
  Usage notes\n\n## Noise gate\nMake sure to record with a noise gate on your microphone.\nThis
  will cut out background buzzing and allow you to use a more aggressive\nthreshold
  on noise detection.\n\n## OBS tracks\n\nSetup OBS so that you record the microphone
  and the desktop audio\non [separate tracks](https://obsproject.com/forum/resources/obs-studio-high-quality-recording-and-multiple-audio-tracks.221/).\nIn
  my own setup I have track 1 for combining all audio, track 2 for just the microphone
  and track 3 for desktop audio.\nThen I can use:\n\n```shell\n    cut-the-crap --inputFile
  ./recordFromObs.mkv --outputFile ./someOut.mkv --voiceTrack 2 --musicTrack 3\n```\n\nSo
  we throw away track 1, we use track 2 for silence detection, and track 3 get's mixed
  in after cutting is complete.\nIf you don't want music being mixed back into the
  result,\nfor example for further editing,\nyou can also leave that argument out.\nI
  did this for example to mix back in the music of the original file later.\n\n##
  Test data\nIt maybe a bit awkward to record yourself just for testing data.\nTo
  get some easy test date we can use youtube-dl, and make it a bit shorter with ffmpeg,\nfor
  example:\n\n```shell\nyoutube-dl \"https://www.youtube.com/watch?v=kCpQ4aTzlis\"
  && ffmpeg -i \"Opening Ceremony & 'Languages all the way down' by Rob Rix - ZuriHac
  2020-kCpQ4aTzlis.mkv\" -t 00:20:00.00 -c copy input.mkv\n```\n\n# Use case\nI'm
  using this program to record my [stream](https://www.twitch.tv/jappiejappie)\nand
  upload it to my\n[Youtube channel](https://www.Youtube.com/channel/UCQxmXSQEYyCeBC6urMWRPVw).\n\nThe
  concrete result is that your audience retention percentage will go up since the
  videos\nwill be shorter, and more engaging.\nSometimes on stream I have intro screens
  for example which completely get removed,\nand other times I'm simply thinking.\nReducing
  videos by 30% is not uncommon in my case, which means by default\n30% more retention.\nYou
  could even decide to edit after that which means you have to spend less time\non
  cutting out silences and more time on making it look cool.\n\nFeel free to use or
  modify this program however you like.\nPull requests are appreciated.\n\n# Features\n\n##
  Track based silence detection\nIt is possible to specify one audio output as speech
  track.\nThis will be used to for silence detection only.\nThe result is very precise
  silence detection.\n\n## Separate music track\nAnother track would be background
  and won't be modified at all.\nIn the end it just get's cut of how far it is.\n\nThis
  way we get good music and interesting stream.\nAnother idea is to remix an entirely
  different source of music\ninto the video, so we can play copyrighted music on stream\nand
  Youtube friendly music on Youtube.\n\n# Design\nThis project is mostly a wrapper
  around ffmpeg.\nWe use Haskell for shell programming.\n\nWe first figure out what's
  going on with the video.\nFor example we do silence detection or speech recogontion,
  maybe even motion detection etc.\nAfter the analyze phase we act in the edit phase.\nWhere
  we for example cut.\nFinally we produce some result.\n\nThe [shelly](http://hackage.haskell.org/package/shelly)
  library was chosen in support of shell programming.\nOriginally we used [turtle](http://hackage.haskell.org/package/turtle),\nbut
  that library is much more complicated to use because it assumes you\nwant to do
  stream programming,\ncreating several unexpected bugs.\nSo we replaced it with shelly
  and noticabally reduced code complexity.\nNow it's truly a 'dumb' wrapper around
  ffmpeg.\n\n## Why not to extend jumpcutter directly?\nI wish to build out this idea
  more to essentially\nmake all streams look like human edited Youtube videos.\nAlthough
  I'm familiar with python,\nI (am or feel) more productive in haskell,\ntherefore
  I chose to integrate with,\nand eventually replace jumpcutter.\nOn stream we've
  determined most of the functionality is basically\nffmpeg.\nHaskell also opens up
  the ability to do direct native ffmpeg\nintegration,\nwhere we use ffmpeg as a library
  instead of calling it as a CLI\nprogram.\n\nOne glaring limitation I've encountered
  with jumpcutter is that\nit can't handle larger video files (2 hour 30 minutes +).\nScipy
  throws an exception complaining the wav is to big.\nSince this program doesn't use
  scipy it doesn't have that issue.\n\nIt also appears like jumpcutter is unmaintained.\n"
license-name: MIT
