homepage: https://github.com/adamwalker/haskell_cudd
changelog-type: ''
hash: 4f673472192d8cd7dd1f8036fca3dc07d3c378ed2031700ab6525c8a59cccb67
test-bench-deps: {}
maintainer: adamwalker10@gmail.com
synopsis: Bindings to the CUDD binary decision diagrams library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  array: ! '>=0.4 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  transformers: ! '>=0.3 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.3.1
- 0.1.0.4
author: Adam Walker
latest: 0.1.0.4
description-type: markdown
description: ! "# Haskell-CUDD\n\nHaskell bindings to version 3.0.0 of the CUDD binary
  decision diagram library.\n\nhttp://vlsi.colorado.edu/~fabio/CUDD/\n\nThis package
  provides two interfaces to the CUDD library:\n* A purely functional one in `Cudd.Cudd`
  that automatically dereferences BDDs during garbage collection.\n* An ST Monad based
  one in `Cudd.Imperative` that gives you precise control over the ordering of BDD
  operations and when BDDs are dereferenced. Use this one if you want your code to
  perform well.\n\nAlso, for a higher level interface in the style of the [ersatz](https://hackage.haskell.org/package/ersatz)
  SAT encoder, see https://github.com/jwaldmann/cudd-ersatz/.\n\n# Installation\n\nEither
  install CUDD 3.0.0 using your system's package manager or download and install CUDD
  from here: http://vlsi.colorado.edu/~fabio/.\n\nThen:\n\n`cabal install cudd`\n\nDepending
  on where CUDD is installed on your system, you may need to provide --extra-lib-dirs
  or --extra-include-dirs:\n\n`cabal install cudd --extra-lib-dirs=/usr/local/lib`\n\n#
  Usage\n\nThe purely functional interface:\n\n```haskell\nimport Cudd.Cudd\n\nmain
  = do\n    let manager = cuddInit\n        v1      = ithVar manager 0\n        v2
  \     = ithVar manager 1\n        conj    = bAnd manager v1 v2\n        implies
  = lEq manager conj v1\n    print implies\n```\n\nThe ST Monad based interface:\n\n```haskell\nimport
  Control.Monad.ST\nimport Cudd.Imperative\n\nmain = do\n    res <- stToIO $ withManagerDefaults
  $ \\manager -> do\n        v1      <- ithVar manager 0\n        v2      <- ithVar
  manager 1\n        conj    <- bAnd manager v1 v2\n        implies <- lEq manager
  conj v1\n        deref manager conj\n        return implies\n    print res\n```\n"
license-name: BSD-3-Clause
