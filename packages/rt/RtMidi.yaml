homepage: https://github.com/riottracker/RtMidi
changelog-type: ''
hash: bf5244976d42c748b312479c89fae9bdcebd2e700b4c49f354f288db2fa414cc
test-bench-deps:
  RtMidi: -any
  base: -any
  tasty-hunit: '>=0.10.0.2 && <1'
  tasty: '>=1.2.3 && <2'
maintainer: ejconlon@gmail.com
synopsis: Haskell wrapper for RtMidi, the lightweight, cross-platform MIDI I/O library.
changelog: ''
basic-deps:
  RtMidi: -any
  base: '>=4.9 && <4.15'
  unliftio-core: '>=0.1.2.0 && <1'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
author: kohlrabi, Eric Conlon
latest: 0.2.0.0
description-type: markdown
description: |
  # RtMidi

  Haskell wrapper for [RtMidi](http://www.music.mcgill.ca/~gary/rtmidi/), the lightweight, cross-platform MIDI I/O library.

  ## Development

  This project is tested with Cabal (latest versions of last two compiler lines) and Stack (latest LTS).

  You can get started with development like so:

      # Build on OSX CoreMIDI support or Linux with ALSA support
      # You can also pass `--flag RtMidi:jack` for Jack support
      stack build

      # Verify that it works:
      stack exec -- rtmidi-query

  There is also a `Dockerfile` in the `docker` directory and some `make` targets that can help you verify Linux builds:

      # Build the image and tag it `haskell-rtmidi-dev`
      make docker-build

      # Enter the docker image
      make docker-repl

      # Inside the docker image:
      cabal update && cabal build -fjack

  (Note that you can't use any `RtMidi` functions in the containerized env unless you are running a Linux host, and
  even then you'd probably have to start the process with something like `docker run --device /dev/snd`.)

  ## TODO

  * Add Windows MM support. This should only require a few changes to the Cabal file.
  * See if there is a way to autodetect Jack in the Cabal file.
license-name: MIT
