homepage: http://spockz.github.com/lhs2texhl/
changelog-type: ''
hash: a2f532899e00f8df23f1a16a35dbe46db0bfee7b046ce0321da360e9c66f96a0
test-bench-deps: {}
maintainer: Alessandro Vermeulen <me@alessandrovermeulen.me>
synopsis: Literate highlighter preprocessor for lhs2tex
changelog: ''
basic-deps:
  uu-parsinglib: ! '>=2.7'
  base: ! '>=4 && <=5'
  syb: ! '>=0.1.0.1'
  filepath: ==1.2.*
  haskell-src-exts: ==1.11.1
  cmdargs: ! '>=0.1'
all-versions:
- 0.1.0.9
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.4.4
- 0.1.4.5
author: Alessandro Vermeulen <me@alessandrovermeulen.me>
latest: 0.1.4.5
description-type: text
description: ! "Literate HS to TeX Highlighter Helper\n=====================================\n\nHi
  there,\n\nwelcome to the lhs2TeX-hl readme. lhs2TeX-hl is a tool for generating\nformatting
  rules used by lhs2TeX. This tool is to be used in combination with\nlhs2TeX. \n\n\nIt
  aims to detect the `kind' of an identifier either by it's use or it's\ndeclaration.
  Trying to detect both local declarations and usages.\n\nRegards,\nAlessandro Vermeulen\n\nINSTALLING\n----------\n\n*
  Make sure you have cabal installed and run\n\n  cabal install lhs2TeX-hl\n  \n*
  Or download the latest release from:\n    http://hackage.haskell.org/package/lhs2TeX-hl\n
  \ and install in the standard way.\n\n* Or visit the github page:\n    https://github.com/spockz/lhs2texhl\n\nUSAGE
  or HOW-TO\n---------------\nUsing lhs2TeX-hl is very simple. Just pass it your Haskell
  source file and it\nwill automatically generating formatting directives for you.
  Including but not\nlimited to formatting directives for data constructors and functions.
  Currently\n`functions' that are strictly constants are not highlighted as functions.\n\n----\nlhs2TeX-hl
  -o <filename>.fmt <filename>.lhs\n----\n\nFor more details see:\n\n----\nlhs2TeX-hl
  --help\n----\n\nCurrently this is the only way to work with the tool.\n\nIn your
  .lhs file include the generated formatting files, like this:\n\n----\n%include polycode.fmt\n%include
  <filename>.fmt\n----\n\nAfter this you'll need to provide the following LaTeX commands
  yourself:\n\n* \\lhsCHsyntax \n* \\lhsCHkeyword\n* \\lhsCHprelude\n* \\lhsCHtype\n*
  \\lhsCHconstructor\n* \\lhsCHfunction\n* \\lhsCHinfixoperator\n* \\lhsCHclass\n\nCheck
  out the ./examples directory and the examples section for example themes.\n\nThis
  tool only generates formatting directives for identifiers (including\noperators)
  for you. If you want to change the formatting of characters,\nstrings or literal
  numbers add the following directives:\n\n----\n%subst char a     = \"{\\color{char}\\text{\\tt
  ''\" a \"''}}\"\n%subst string a   = \"{\\color{string}\\text{\\tt \\char34 \" a
  \"\\char34}}\"\n%subst numeral a  = \"{\\color{numeral}{ \" a \" }}\"\n----\n\nFor
  other available substitutions consult the lhs2TeX manual.\n\nAutomatic markup\n~~~~~~~~~~~~~~~~\nFor
  your convenience there are some automatic rewrites being done.\n\n* If a identifier
  names in a sequence of digits, the digits will be\n  typeset in subscript.\n* If
  you have trailing underscores they will be omitted in the typesetting. This\n  is
  so you can do something like in <<Automatic_underscore_removal, Automatic\n  removal
  of trailing underscores>>.  \n  And have Foo highlighted as a type constructor,
  and Foo_ highlighted as\n  `Foo' in a data constructor colour. \n  \n* If there
  are underscores in the middle of your identifier, everything after\n  the underscores
  will be typeset in subscript as in\n  <<Automatic_subscript_generation, Automatic
  subscript generation>>.\n  \n.Automatic removal of trailing underscores\n[[Automatic_underscore_removal]]\n[source,haskell]\n-----\ndata
  Foo = Foo_ a;\n-----\n\n.Automatic subscript generation\n[[Automatic_subscript_generation]]\n[source,haskell]\n----\nfoo_1
  = undefined\n-- Is transformed into\nfoo‚ÇÅ = undefined\n----\n\n\n\nTHEMES\n------\n\nemacs\n~~~~~\n[source,
  latex]\n--------------------------------------------------------------------------------\n%
  use package color\n\\definecolor{syntax}{RGB}{0, 0, 0}\n\\definecolor{datatype}{RGB}{196,
  6, 11}\n\\definecolor{class}{RGB}{168,37,39}\n\\definecolor{fieldname}{RGB}{0,0,162}\n\\definecolor{prelude}{RGB}{64,80,117}\n\\definecolor{numeral}{RGB}{0,0,205}\n\\definecolor{infixoperator}{RGB}{19,
  19, 168}\n\\definecolor{constructor}{RGB}{196, 6, 11}\n\\definecolor{keyword}{RGB}{4,
  58, 252}\n\\definecolor{special1}{RGB}{159,138,0}\n\\definecolor{string}{RGB}{3,
  106, 7}\n\\definecolor{char}  {RGB}{3, 106, 7}\n\n\\newcommand{\\lhsCHsyntax}[1]{\\color{syntax}{{#1}}}\n\\newcommand{\\lhsCHfunction}[1]{\\color{infixoperator}{{#1}}}\n\\newcommand{\\lhsCHinfixoperator}[1]{\\color{infixoperator}{{#1}}}\n\\newcommand{\\lhsCHprelude}[1]{\\color{prelude}{\\mathbf{#1}}}\n\\newcommand{\\lhsCHkeyword}[1]{\\color{keyword}{\\textbf{#1}}}\n\\newcommand{\\lhsCHconstructor}[1]{\\color{constructor}{\\textbf{#1}}}\n\\newcommand{\\lhsCHtype}[1]{\\color{datatype}{{#1}}}\n\\newcommand{\\lhsCHclass}[1]{\\color{class}{{#1}}}\n\n%subst
  char a    = \"\\color{char}\\text{\\tt ''\" a \"''}\"\n%subst string a  = \"\\color{string}\\text{\\tt
  \\char34 \" a \"\\char34}\"\n%subst numeral a = \"\\color{numeral}{ \" a \" }\"\n--------------------------------------------------------------------------------\n\nKNOWN
  ISSUES\n------------\n\n* Infix operators may not work that great, or normal functions
  that are used\n  `infix`. Sometimes you might get an `ambiguous infix operator'
  error.\n* AGDA isn't supported yet unfortunately.\n* Errors aren't that informative.
  :)\n\nCHANGES\n-------\n0.1.4.5::\n  * Added support for recursively traversing
  includes of .lhs files\n  * The program now doesn't fail completely when haskell-src-exts
  fails to parse\n    a file. An error is reported and the program continues. :) A
  fmt file is\n    still generated.\n  * Removed a faulty command from the list.\n
  \ * Added a new url.\n  * Cleaned up some code. (Probably introduced other ugly
  code) \n0.1.4.2::\n  * Removed trace statement\n0.1.4.1::\n  * Fixed ambiguous import
  error on GHC 7.2\n  * You can now ask for a list of commands to import.\n0.1.3.3::\n
  \ * Fixed build error + cabal things\n0.1.3.2::\n  * Removed the MissingH dependency.\n0.1.3.1::\n
  \ * Added the file Language.Markup\n0.1.3.0::\n  * Added automatic rewrite rules,
  see section `Automatic markup'.\n0.1.2.2::\n  * And classes are now also written
  to the output file, somewhere I was\n    sleeping during all this. :)\n0.1.2.1::
  \ \n  * Fixed a regression, detection of language pragmas was apparently broken
  and\n    now they aren't anymore.\n0.1.2.0::\n  * Hopefully the ``ambiguous infix
  operator'' error shouldn't occur that often\n    anymore.\n  * Removed the AGDA
  dependency for until it actually works.\n  * Classes are now detected.\n\n"
license-name: MIT
