homepage: https://github.com/mstksg/auto
changelog-type: markdown
hash: 329f9e7a34357953da943b881f64cc6dd1c9b7fd09a14637a3581bfc3f0d71f7
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Denotative, locally stateful programming DSL & platform
changelog: ! "0.4.3.1\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.3.1>\n\n*
  \  Compatibility support for *MonadRandom-0.5*.\n\n0.4.3.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.3.0>\n\n*
  \  **Control.Auto.Blip**: New blip stream splitter `onEitherB`, which splits\n    an
  incoming blip stream into two output streams based on whether the\n    emitted items
  resolve to `Left` or `Right` when applied to the splitting\n    function.\n\n0.4.2.4\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.2.4>\n\n*
  \  **Control.Auto.Blip**: New blip stream splitter `onEitherB`, which splits\n    an
  incoming blip stream into two output streams based on whether the\n    emitted items
  resolve to `Left` or `Right` when applied to the splitting\n    function.\n\n0.4.2.3\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.2.3>\n\n*
  \  **Control.Auto.Process.Random**: Removed self-defeating `Seralize`\n    constraint
  on the seed parameter of `sealRandom_`.\n*   **Control.Auto.Serialize**: Fixed compiler
  warning on GHC 7.10 for\n    redundant Applicative import.\n\n0.4.2.2\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.2.2>\n\n*
  \  Using the *base-orphans* library for a more sane compatibility layer than\n    the
  previous method.\n*   Many documentation fixes including haddock reconfigurations
  on specific\n    modules.\n\n0.4.2.1\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.2.1>\n\n**DEPRECATED:**
  Please use `0.4.2.2`!\n\n*   Added support for building with GHC 7.6.x.\n\n0.4.2.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.2.0>\n\n*
  \  Removed all upper bounds on dependencies except for base.\n*   **Control.Auto.Blip**:
  Companions to `emitJusts` and `onJusts` added, for\n    `Either`: `emitEithers`
  and `onEithers`.  Emit every item inputted, but\n    fork them into one of two output
  blit streams based on `Right` or `Left`\n    properties.  Only preserves blip semantics/makes
  sense if any given\n    input's `Right` or `Left`ness is expected to be independent
  from the last\n    received one.\n*   **Control.Auto.Blip**: New \"blip stream collapsers\",
  `asMaybes` and\n    `substituteB`.  `asMaybes` turns a blip stream into a stream
  of `Maybe`s,\n    `Just` when something was emitted, and `Nothing` when not.  `substituteB`\n
  \   takes a regular stream and a blip stream, and outputs the values of the\n    regular
  stream whenever the blip stream doesn't emit and the emitted value\n    when it
  does --- basically a more powerful version of `fromBlips`, where\n    the \"default\"
  value now comes from a stream instead of being always the\n    same.\n*   **Control.Auto.Blip**:
  New blip stream creator, `collectN`, which emits\n    every `n` steps with the last
  `n` items received.\n*   **Control.Auto.Blip**: New blip stream modifiers, `collectB`
  and\n    `collectBs`.   `collectB` waits on two blip streams and emits after it
  has\n    received something from *both*.  `collectBs` is like `collectN`, except\n
  \   emits after every `n` emitted values received with the past `n` emitted\n    values.\n*
  \  **Control.Auto.Collection**: \"Intervaled\" counterparts to `mux` and\n    `muxMany`,
  `muxI` and `muxManyI`.  They store `Interval`s instead of\n    `Auto`s...and when
  the `Interval`s turned \"off\", they are removed from the\n    collection.\n*   **Control.Auto.Switch**:
  A new \"count-down\" switcher, `switchIn`, which\n    acts a bit like `(-->)` and
  `(-?>)`, except the switch happens\n    deterministically after a pre-set given
  number of steps.  Act like the\n    first `Auto` for a given number of steps, and
  then act like the second\n    ever after.  Basically a direct implementation of
  the common\n    `onFor n a1 --> a2` idiom.\n\n0.4.1.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.1.0>\n\n*
  \  Adapted to more consistent semantic versioning scheme, where the third\n    number
  is a new update, and the fourth number is reserved for bug fixes.\n*   **Control.Auto.Blip**:
  `foldrB` and `foldlB'` officially **deprecated** in\n    their current forms.  From
  version `0.5`, they will have corrected\n    functionality and a new type signature.
  \ The current functionality doesn't\n    really make sense, and was a mistake during
  their implementation.  You can\n    begin using the new versions now, with:\n\n
  \   ```\n    foldrB  = foldr  (merge f) mempty\n    foldlB' = foldl' (merge f) mempty\n
  \   ```\n*   **Control.Auto.Effects**: New \"sealing\" mechanisms for underlying\n
  \   `Reader`: `sealReaderMVar` and `sealReaderM`.  `sealReaderMVar` allows\n    things
  like \"hot swapping\" configuration data; at every step, the `Auto`\n    asks for
  its environment from an `MVar`, that could be changed/modified\n    from a different
  thread with new configuration data.  `sealReaderM` is a\n    more general/potentially
  dangerous version where the environment is\n    retrieved through an arbitrary action
  in the underlying monad.\n*   **Control.Auto.Run**: New powerful combinator `throughT`,
  letting you\n    \"lift\" an `Auto` to run over/through any `Traversable`.  Can
  replace\n    `during`, `perBlip`, `accelOverList`, etc.  The specialized versions
  will\n    remain more performant, though.\n*   **Control.Auto.Run**: In the spirit
  of the hip and current Foldable\n    Traversable Proposal, `overTraversable` added
  to complement `overList`, so\n    you can now \"stream\" `Auto`s over `IntMap`s,
  `Maybe`s, `Const`s...or any\n    `Traversable`.  Not replacing `overList` completely,
  though, for\n    performance reasons.\n*   **Control.Auto.Blip**: Removed unnecessary
  `Monad` constraints on\n    `became_`, `became'`, `noLonger_`, and `noLonger'`.\n*
  \  **Control.Auto.Interval**: Bug fix on `holdFor` and `holdFor_`, where they\n
  \   had the potential to overflow `Int` and begin \"holding\" forever when\n    given
  specifically malformed input.\n*   **Control.Auto.Time**: Performance boost on `accelOverList`
  by using\n    strict `Writer` over lazy.\n\n\n0.4.0.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.4.0.0>\n\n*
  \  Bug fix version *reverting* breaking changes from `0.3.0.0`.  `0.4.x`\n    should
  be able to run all `0.2.x` programs with full backwards\n    compatibility.\n*   **Control.Auto.Effects**:
  Reverted back to lazy `StateT` and `WriterT`,\n    because of situations where *auto*
  cannot resolve fixed points for\n    recursive bindings.\n*   **Control.Auto.Blip**:
  `forkB` renamed to `splitB` to prevent confusion\n    with \"fork\", usually used
  in Haskell to refer to concurrency.  Also\n    anticipating adding concurrency-based
  `Auto`s, so this is a move to clear\n    the way for any possible conflicts.\n\n0.3.0.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.3.0.0>\n\n**DEPRECATED:**
  Please use `0.4.0.0`!\n\n*   **Control.Auto.Effects**: Breaking change: switched
  to strict `StateT`\n    and `WriterT`.\n*   **Control.Auto.Effects**: Added `readerA`
  and `writerA`, for convenience\n    in \"creating\" `Auto`s under `ReaderT` and
  `WriterT`; also added `stateA`\n    and `accumA` for completeness.\n\n0.2.0.6\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.6>\n\n*
  \  **Control.Auto.Run**: As a part of an effort to provide integration with\n    *disciplined*
  effectful streaming, introduced `streamAutoEffects` and\n    `toEffectStream`, which
  convert `Auto m a b`'s to *streams of effects* in\n    `m` that can be processed
  and manipulated and integrated with any\n    [`ListT`-compatible library][1], like
  *pipes*.  See documentation for more\n    details.  These were also added to the
  exports of `Control.Auto`.\n*   **Control.Auto.Interval**: New `Auto` `holdJusts`,
  which stretches the\n    last seen \"on\"/`Just` value over the duration of a \"off\"/`Nothing`\n
  \   interval.\n*   Documentation fixes to emphasize *auto*'s focus on *value* streams,
  not\n    *effect* streams, in contrast to *pipes*, *conduit*, etc.\n*   Version
  restrictions on some packages relaxed on *profunctors*,\n    *semigroups*, and *base*.\n\n[1]:
  http://www.haskellforall.com/2014/11/how-to-build-library-agnostic-streaming.html\n\n0.2.0.5\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.5>\n\n*
  \  **Control.Auto.Process.Random**: Added combinators and sealers dealing\n    for
  working with an underlying `Rand` or `RandT` monad.\n*   Because of this, committed
  to adding *MonadRandom* as a dependency.\n\n0.2.0.4\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.4>\n\n*
  \  **Control.Auto**: Added `unserialize`, `delay`, and `delay_` to\n    `Control.Auto`'s
  exports.\n*   **Control.Auto.Blip**: New blip stream manipulator: `forkB`, which
  forks a\n    blip stream into to separate ones based on whether or not the emitted\n
  \   values match a predicate.\n*   **Control.Auto.Time**: Added a generalized version
  of `stretch`,\n    `stretchAccumBy` which allows access to the \"skipped\" inputs
  during the\n    stretched periods, as well as the ability to control the outputs
  during\n    the stretched periods.\n\n\n0.2.0.3\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.3>\n\n*
  \  **Control.Auto.Collection**: Bug for `dynZipF` fixed, where newly added\n    `Auto`s
  would overwrite ones alreay stored.\n*   **Control.Auto**: `fromInterval` added
  to `Control.Auto`'s exports.\n\n\n0.2.0.2\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.2>\n\n**DEPRECATED:**
  Please use `0.2.0.3`!\n\n*   **Control.Auto.Collection**: `dynZipF` and `dynMapF`,
  implicit-serialization\n    dynamic collections.\n\n\n0.2.0.1\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.1>\n\n*
  \  **Control.Auto.Effects**: `catchA` added to `Control.Auto.Effects`,\n    allowing
  explicit catching of runtime exceptions thrown in underlying\n    `IO`.\n\n\n0.2.0.0\n-------\n<https://github.com/mstksg/auto/releases/tag/v0.2.0.0>\n\n*
  \  First official release.  No backwards-incompatible changes until\n    `0.3.0.0`.\n"
basic-deps:
  cereal: ! '>=0.4.1.1'
  bytestring: ! '>=0.10.4.0'
  MonadRandom: ! '>=0.3.0.1'
  base: ! '>=4.6 && <5'
  semigroups: ! '>=0.16'
  base-orphans: ! '>=0.3.1'
  containers: ! '>=0.5'
  transformers: ! '>=0.4.2.0'
  random: ! '>=1.1'
  deepseq: ! '>=1.3.0'
  profunctors: ! '>=4.3'
all-versions:
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.2.2
- 0.4.2.3
- 0.4.3.0
- 0.4.3.1
author: Justin Le
latest: 0.4.3.1
description-type: markdown
description: ! "Auto\n====\n\n[![auto on Hackage](https://img.shields.io/hackage/v/auto.svg?maxAge=2592000)](https://hackage.haskell.org/package/auto)\n[![auto
  on Stackage LTS](http://stackage.org/package/auto/badge/lts)](http://stackage.org/lts/package/auto)\n[![auto
  on Stackage Nightly](http://stackage.org/package/auto/badge/nightly)](http://stackage.org/nightly/package/auto)\n[![Build
  Status](https://travis-ci.org/mstksg/auto.svg?branch=master)](https://travis-ci.org/mstksg/auto)\n\n[![Join
  the chat at https://gitter.im/mstksg/auto](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mstksg/auto?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n~~~bash\n$
  cabal install auto\n~~~\n\nCheck it out!\n-------------\n\n~~~haskell\n-- Let's
  implement a PID feedback controller over a black box system.\n\nimport Control.Auto\nimport
  Prelude hiding ((.), id)\n\n-- We represent a system as `System`, an `Auto` that
  takes stream of `Double`s\n-- as input and transforms it into a stream of `Double`s
  as output.  The `m`\n-- means that a `System IO` might do IO in the process of creating
  its ouputs,\n-- for instance.\n--\ntype System m = Auto m Double Double\n\n-- A
  PID controller adjusts the input to the black box system until the\n-- response
  matches the target.  It does this by adjusting the input based on\n-- the current
  error, the cumulative sum, and the consecutive differences.\n--\n-- See http://en.wikipedia.org/wiki/PID_controller\n--\n--
  Here, we just lay out the \"concepts\"/time-varying values in our system as a\n--
  recursive/cyclic graph of dependencies.  It's a feedback system, after all.\n--\npid
  :: MonadFix m => (Double, Double, Double) -> System m -> System m\npid (kp, ki,
  kd) blackbox = proc target -> do       -- proc syntax; see tutorial\n    rec --
  \ err :: Double\n        --  the difference of the response from the target\n        let
  err        = target - response\n\n        -- cumulativeSum :: Double\n        --
  the cumulative sum of the errs\n        cumulativeSum <- sumFrom 0 -< err\n\n        --
  changes :: Maybe Double\n        -- the consecutive differences of the errors, with
  'Nothing' at first.\n        changes       <- deltas    -< err\n\n        --  adjustment
  :: Double\n        --  the adjustment term, from the PID algorithm\n        let
  adjustment = kp * err\n                       + ki * cumulativeSum\n                       +
  kd * fromMaybe 0 changes\n\n        -- the control input is the cumulative sum of
  the adjustments\n        control  <- sumFromD 0 -< adjustment\n\n        -- the
  response of the system, feeding the control into the blackbox\n        response
  <- blackbox   -< control\n\n    -- the output of this all is the value of the response\n
  \   id -< response\n~~~\n\n\nWhat is it?\n-----------\n\n**Auto** is a Haskell DSL
  and platform providing an API with declarative,\ncompositional, denotative semantics
  for discrete-step, locally stateful,\ninteractive programs, games, and automations,
  with implicitly derived\nserialization.\n\nIt is suited for any domain where your
  program's input or\noutput is a stream of values, input events, or output views.
  \ At the\nhigh-level, it allows you to describe your interactive program or simulation\nas
  a *value stream transformer*, by composition and transformation of other\nstream
  transformers.  So, things like:\n\n1.  Chat bots\n2.  Turn-based games\n3.  GUIs\n4.
  \ Numerical simulations\n5.  Process controllers\n6.  Text-based interfaces\n7.
  \ (Value) stream transformers, filters, mergers, processors\n\nIt's been called
  \"FRP for discrete time contexts\".\n\nIntrigued?  Excited?  Start at [the tutorial][tutorial]!\n\n[tutorial]:
  https://github.com/mstksg/auto/blob/master/tutorial/tutorial.md\n\nIt's a part of
  this package directory and also on github at the above link.\nThe current development
  documentation server is found at\n<https://mstksg.github.io/auto>.\n\nFrom there,
  you can check out my [All About Auto][aaa] series on my blog,\nwhere I break sample
  projects and show to approach projects in real life.  You\ncan also find examples
  and demonstrations in the [auto-examples][] repo on\ngithub.\n\n[aaa]: http://blog.jle.im/entries/series/+all-about-auto\n[auto-examples]:
  https://github.com/mstksg/auto-examples\n\n### Buzzwords explained!\n\n*   **Haskell
  DSL/library**: It's a Haskell library that provides a\n    domain-specific language
  for composing and declaring your programs/games.\n\n    Why Haskell?  Well, Haskell
  is one of the only languages that has a type\n    system expressive enough to allow
  type-safe compositions without getting\n    in your way.  Every composition and
  component is checked at compile-time\n    to make sure they even make sense, so
  you can work with an assurance that\n    everything fits together in the end ---
  and also in the correct way.  The\n    type system can also guide you in your development
  as well.  All this\n    without the productivity overhead of explicit type annotations.
  \ In all\n    honesty, it cuts the headache of large projects down --- and what
  you need\n    to keep in your head as you develop and maintain --- by at least 90%.\n\n*
  \  **Platform**: Not only gives the minimal tools for creating your programs,\n
  \   but also provides a platform to run and develop and integrate them, as\n    well
  as many library/API functions for common processes.\n\n*   **Declarative**: It's
  not imperative.  That is, unlike in other\n    languages, you don't program your
  program by saying \"this happens, then\n    this happens...and then in case A, this
  happens; in case B, something else\n    happens\".  Instead of specifying your program/game
  by a series of\n    state-changing steps and procedures (a \"game loop\"), you instead
  declare\n    \"how things are\".  You declare fixed or evolving relationships between\n
  \   entities and processes and interactions.  And this declaration process is\n
  \   high-level and pure.\n\n*   **Denotative**: Instead of your program being built
  of pieces that change\n    things and execute things sequentially, your entire program
  is composed of\n    meaningful semantic building blocks that \"denote\" constant
  relationships\n    and concepts.  The composition of such building blocks also denote
  new\n    concepts.  Your building blocks are well-defined *ideas*.\n\n*   **Compositional**:
  You build your eventually complex program/game out of\n    small, simple components.
  \ These simple components compose with each other;\n    and compositions of components
  compose as well with other components.\n    Every \"layer\" of composition is seamless.
  \ It's the [scalable program\n    architecture][spa] principle in practice: If you
  combine an A with an A,\n    you don't get a B; you get another A, which can combine
  with any other A.\n\n    Like unix pipes, where you can build up complex programs
  by simply piping\n    together simple, basic ones.\n\n*   **Discrete-step**: This
  library is meant for things that step discretely;\n    there is no meaningful concept
  of \"continuous time\".  Good examples\n    include turn-based games, chat bots,
  and cellular automata; bad examples\n    include real-time games and day trading
  simulations.\n\n*   **Locally stateful**: Every component encapsulates its own local
  (and\n    \"hidden\") state.  There is no global or impicitly shared state.  This
  is\n    in contrast to those \"giant state monad\" libraries/abstractions where
  you\n    carry around the entire game/program state in some giant data type, and\n
  \   have your game loop simply be an update of that state.\n\n    If you have a
  component representing a player, and a component\n    representing an enemy ---
  the two components do not have to ever worry\n    about the state of the other,
  or the structure of their shared state.\n\n    Also, you never have to worry about
  something reading or modifying a part\n    of the shared/global state it wasn't
  meant to read or modify!  (Something\n    you cannot guaruntee in the naive implementatation
  of the \"giant state\n    monad\" technique).\n\n*   **Interactive**: The behavior
  and structure of your program can respond\n    and vary dynamically with outside
  interaction.  I'm not sure how else to\n    elaborate on the word \"interactive\",
  actually!\n\n*   **Interactive programs, games and automations**: Programs, games,
  and\n    automations/simulations.  If you're making anything discrete-time that\n
  \   encapsulates some sort of internal state, especially if it's interactive,\n
  \   this is for you!! :D\n\n*   **Implicitly derived serialization**: All components
  and their\n    compositions by construction are automatically \"freezable\" and\n
  \   serializable, and re-loaded and resumed with all internal state restored.\n
  \   As it has been called by ertes, it's \"save states for free\".\n\n[spa]: http://www.haskellforall.com/2014/04/scalable-program-architectures.html\n\n###
  Support\n\nThe official support and discussion channel is *#haskell-auto* on freenode.\nYou
  can also usually find me (the maintainer and developer) as *jle`* on\n*#haskell-game*
  or *#haskell*.  There's also a [gitter channel][gitter] if IRC\nis not your cup
  of tea.  Also, contributions to documentation and tests are\nwelcome! :D\n\n[gitter]:
  https://gitter.im/mstksg/auto\n\nWhy Auto?\n---------\n\nAuto is distinct from a
  \"state transformer\" (state monad, or explicit state\npassing) in that it gives
  you the ability to implicitly *compose and isolate*\nstate transformers and state.\n\nThat
  is, imagine you have two different state monads with different states,\nand you
  can compose them together into one giant loop, and:\n\n1.  You don't have to make
  a new \"composite type\"; you can add a new component\n    dealing with its own
  state without changing the total state type.\n\n2.  You can't write anything cross-talking.
  \ You can't write anything that\n    can interfere with the internal state of any
  components; each one is\n    isolated.\n\nSo --- Auto is useful over a state monad/state
  transformer approach in cases\nwhere you like to build your problem out of multiple
  individual components,\nand compose them all together at once.\n\nExamples include
  a multiple-module stateful chat bot, where every module of\nthe chat bot consists
  of its own internal state.\n\nIf you used a state monad approach, every time you
  added a new module with its\nown state, you'd have to \"add it into\" your total
  state type.\n\nThis simply does *not* scale.\n\nImagine a large architecture, where
  every composition adds more and more\ncomplexity.\n\nNow, imagine you can just throw
  in another module with its own state without\nany other component even \"caring\".
  \ Or be able to limit access implicitly,\nwithout explicit \"limiting through lifting\"
  with `zoom` from lens, etc.\n(Without that, you basically have \"global state\"
  --- the very thing that we\nwent to Functional Programming/Haskell to avoid in the
  first place!  And the\nthing that languages have been trying to prevent in the last
  twenty years of\nlanguage development.  Why go \"backwards\"?)\n\nIn addition to
  all of these practical reasons, State imposes a large\n*imperative* shift in your
  design.\n\nState forces you to begin modeling your problem as \"this happens, then
  this\nhappens, then this happens\".  When you choose to use a State monad or State\npassing
  approach, you immediately begin to frame your entire program from an\nimperative
  approach.\n\nAuto lets you structure your program *denotatively* and declaratively.
  \ It\ngives you that awesome style that functional programming promised in the first\nplace.\n\nInstead
  of saying \"do this then that\", you say \"this is how things...just\n*are*.  This
  is the structure of my program, and this is the nature of the\nrelationship between
  each component\".\n\nIf you're already using Haskell...I shouldn't have to explain
  to you the\nbenefits of a high-level declarative style over an imperative one :)\n\nWhy
  not Auto?\n-------------\n\nThat being said, there are cases where **Auto** is either
  the wrong tool or\nnot very helpful.\n\n*   Cases involving inherently continuous
  time.  **Auto** is meant for\n    situations where time progresses in discrete ticks
  --- integers, not\n    reals.  You can \"fake\" it by faking continuous time with
  discrete\n    sampling...but FRP is a much, much more powerful and safe\n    abstraction/system
  for handling this than **Auto** is.  See the later\n    section on FRP.\n\n*   Cases
  where you really don't have interactions/compositions between\n    different stateful
  components.  If all your program is just one `foldr` or\n    `scanl` or `iterate`,
  and you don't have multiple interacting parts of\n    your state, **Auto** really
  can't offer much.  If, however, you have\n    multiple folds or states that you
  want run together and compose, then this\n    might be useful!\n\n*   Intense IO
  stuff and resource handling.  **Auto** is not *pipes* or\n    *conduit*. All IO
  is done \"outside\" of the **Auto** components; **Auto**\n    can be useful for
  file processing and stream modification, but only if you\n    separately handle
  the IO portions.  **Auto** works very well with *pipes*\n    or *conduit*; those
  libraries are used to \"connect\" **Auto** to the\n    outside word, and provide
  a safe interface.  In other words, Auto handles\n    \"value streams\", while pipes/conduit
  handle \"effect streams\"\n\n\nRelation to FRP\n---------------\n\n**Auto** borrows
  a lot of concepts from *[Functional Reactive\nProgramming][frp]* --- especially
  arrowized, locally stateful libraries like\n[netwire][].  At best, **Auto** can
  be said to bring a lot of API ideas and\nborrows certain aspects of the semantic
  model of FRP and incorporates them as\na part of a broader semantic model more suitable
  for discrete-time\ndiscrete-stel contexts.  But, users of such libraries would likely
  be able to\nquickly pick up **Auto**, and the reverse is (hopefully) true too.\n\nNote
  that this library is not meant to be any sort of meaningful substitution\nfor implementing
  situations which involve concepts of continuous (\"real\nnumber-valued\", as opposed
  to \"integer valued\") time (like real-time games);\nyou can \"fake\" it using **Auto**,
  but in those situations, FRP provides a much\nsuperior semantics and set of concepts
  for working in such contexts.  That is,\nyou can \"fake\" it, but you then lose
  almost all of the benefits of FRP in the\nfirst place.\n\n[frp]: http://en.wikipedia.org/wiki/Functional_reactive_programming\n[netwire]:
  https://hackage.haskell.org/package/netwire\n\nA chatbot\n---------\n\n~~~haskell\nimport
  qualified Data.Map as M\nimport Data.Map (Map)\nimport Control.Auto\nimport Prelude
  hiding ((.), id)\n\n-- Let's build a big chat bot by combining small chat bots.\n--
  A \"ChatBot\" is going to be an `Auto` taking in a stream of tuples of\n-- incoming
  nick, message, and timestamps; the result is a \"blip stream\" that\n-- emits with
  messages whenever it wants to respond.\n\ntype Message   = String\ntype Nick      =
  String\ntype ChatBot m = Auto m (Nick, Message, UTCTime) (Blip [Message])\n\n\n--
  Keeps track of last time a nick has spoken, and allows queries\nseenBot :: Monad
  m => ChatBot m\nseenBot = proc (nick, msg, time) -> do          -- proc syntax;
  see tutorial\n    -- seens :: Map Nick UTCTime\n    -- Map containing last time
  each nick has spoken\n    seens <- accum addToMap M.empty -< (nick, time)\n\n    --
  query :: Blip Nick\n    -- blip stream emits whenever someone queries for a last
  time seen;\n    -- emits with the nick queried for\n    query <- emitJusts getRequest
  -< words msg\n\n        -- a function to get a response from a nick query\n    let
  respond :: Nick -> [Message]\n        respond qry = case M.lookup qry seens of\n
  \                       Just t  -> [qry ++ \" last seen at \" ++ show t ++ \".\"]\n
  \                       Nothing -> [\"No record of \" ++ qry ++ \".\"]\n\n    --
  output is, whenever the `query` stream emits, map `respond` to it.\n    id -< respond
  <$> query\n  where\n    addToMap :: Map Nick UTCTime -> (Nick, UTCTime) -> Map Nick
  UTCTime\n    addToMap mp (nick, time) = M.insert nick time mp\n    getRequest (\"@seen\":request:_)
  = Just request\n    getRequest _                   = Nothing\n\n\n-- Users can increase
  and decrease imaginary internet points for other users\nkarmaBot :: Monad m => ChatBot
  m\nkarmaBot = proc (_, msg, _) -> do\n    -- karmaBlip :: Blip (Nick, Int)\n    --
  blip stream emits when someone modifies karma, with nick and increment\n    karmaBlip
  <- emitJusts getComm -< msg\n\n    -- karmas :: Map Nick Int\n    -- keeps track
  of the total karma for each user by updating with karmaBlip\n    karmas    <- scanB
  updateMap M.empty -< karmaBlip\n\n    -- function to look up a nick, if one is asked
  for\n    let lookupKarma :: Nick -> [Message]\n        lookupKarma nick = let karm
  = M.findWithDefault 0 nick karmas\n                           in  [nick ++ \" has
  a karma of \" ++ show karm ++ \".\"]\n\n    -- output is, whenever `karmaBlip` stream
  emits, look up the result\n    id -< lookupKarma . fst <$> karmaBlip\n  where\n
  \   getComm :: String -> Maybe (Nick, Int)\n    getComm msg = case words msg of\n
  \                   \"@addKarma\":nick:_ -> Just (nick, 1 )\n                    \"@subKarma\":nick:_
  -> Just (nick, -1)\n                    \"@karma\":nick:_    -> Just (nick, 0)\n
  \                   _                  -> Nothing\n    updateMap :: Map Nick Int
  -> (Nick, Int) -> Map Nick Int\n    updateMap mp (nick, change) = M.insertWith (+)
  nick change mp\n\n\n-- Echos inputs prefaced with \"@echo\"...unless flood limit
  has been reached\nechoBot :: Monad m => ChatBot m\nechoBot = proc (nick, msg, time)
  -> do\n    -- echoBlip :: Blip [Message]\n    -- blip stream emits when someone
  wants an echo, with the message\n    echoBlip   <- emitJusts getEcho  -< msg\n\n
  \   -- newDayBlip :: Blip UTCTime\n    -- blip stream emits whenever the day changes\n
  \   newDayBlip <- onChange           -< utctDay time\n\n    -- echoCounts :: Map
  Nick Int\n    -- `countEchos` counts the number of times each user asks for an echo,
  and\n    -- `resetOn` makes it \"reset\" itself whenever `newDayBlip` emits.\n    echoCounts
  <- resetOn countEchos -< (nick <$ echoBlip, newDayBlip)\n\n        -- has this user
  flooded today...?\n    let hasFlooded = M.lookup nick echoCounts > Just floodLimit\n
  \       -- output :: Blip [Message]\n        -- blip stream emits whenever someone
  asks for an echo, limiting flood\n        output | hasFlooded = [\"No flooding!\"]
  <$ echoBlip\n               | otherwise  = echoBlip\n\n    -- output is the `output`
  blip stream\n    id -< output\n  where\n    floodLimit = 5\n    getEcho msg = case
  words msg of\n                    \"@echo\":xs -> Just [unwords xs]\n                    _
  \         -> Nothing\n    countEchos :: Auto m (Blip Nick) (Map Nick Int)\n    countEchos
  = scanB countingFunction M.empty\n    countingFunction :: Map Nick Int -> Nick ->
  Map Nick Int\n    countingFunction mp nick = M.insertWith (+) nick 1 mp\n\n-- Our
  final chat bot is the `mconcat` of all the small ones...it forks the\n-- input between
  all three, and mconcats the outputs.\nchatBot :: Monad m => ChatBot m\nchatBot =
  mconcat [seenBot, karmaBot, echoBot]\n\n-- Here, our chatbot will automatically
  serialize itself to \"data.dat\"\n-- whenever it is run.\nchatBotSerialized :: ChatBot
  IO\nchatBotSerialized = serializing' \"data.dat\" chatBot\n~~~\n\nOpen questions\n--------------\n\n*
  \  \"Safecopy problem\"; serialization schemes are implicitly derived, but if\n
  \   your program changes, it is unlikely that the new serialization scheme\n    will
  be able to resume something from the old one.  Right now the solution\n    is to
  only serialize small aspects of your program that you *can* manage\n    and manipulate
  directly when changing your program.  A better solution\n    might exist.\n\n*   In
  principle very little of your program should be over `IO` as a\n    monad...but
  sometimes, it becomes quite convenient for abstraction\n    purposes.  Handling
  IO errors in a robust way isn't quite my strong point,\n    and so while almost
  all *auto* idioms avoid `IO` and runtime, for some\n    applications it might be
  unavoidable.  *auto* is not and will never be\n    about streaming IO effects...but
  knowing what parts of IO fit into the\n    semantic model of *value stream transformers*
  would yield a lot of\n    insight.  Also, most of the `Auto` \"runners\" (the functions
  that translate\n    an `Auto` into `IO` that executes it) might be able to benefit
  from a more\n    rigorous look too.\n\n*   Tests; tests aren't really done yet,
  sorry!  Working on those :)\n"
license-name: MIT
