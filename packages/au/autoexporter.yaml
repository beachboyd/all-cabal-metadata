homepage: https://github.com/tfausak/autoexporter#readme
changelog-type: markdown
hash: 4278fc72f5702f67db7024f75aac348d53eb69b50c442582c82632adbd65ef47
test-bench-deps: {}
maintainer: Taylor Fausak
synopsis: Automatically re-export modules.
changelog: ! '# Change log


  Autoexporter uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/tfausak/autoexporter/releases

'
basic-deps:
  Cabal: ! '>=1.22 && <1.25 || >=2.0 && <2.3'
  base: ! '>=4.7 && <4.11'
  filepath: ! '>=1.3 && <1.5'
  autoexporter: -any
  directory: ! '>=1.2.5 && <1.4'
all-versions:
- '0.1.1'
- '0.1.2'
- '0.1.4'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '1.0.0'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
- '1.1.4'
author: ''
latest: '1.1.4'
description-type: markdown
description: ! "# [Autoexporter][]\n\n[![Version badge][]][version]\n[![Build badge][]][build]\n\nAutoexporter
  automatically re-exports Haskell modules.\n\nLet's say you have a module `M` that
  just exports some other modules. It might\nlook like this:\n\n``` haskell\nmodule
  M\n  ( module M.A\n  , module M.B\n  ) where\n\nimport M.A\nimport M.B\n```\n\nThis
  code is error-prone. If you add a new module, say `M.C`, you have to\nremember to
  come back to this file and re-export it. And this code is tedious\nto write. You
  have to list each module twice. You can do a little better, but\nnot much.\n\n```
  haskell\nmodule M (module X) where\nimport M.A as X\nimport M.B as X\n```\n\nNow
  you don't have to write every module twice, but you still have to remember\nto re-export
  everything. And the generated documentation for this module\ndoesn't include anything
  about the exported modules.\n\nAutoexporter handles this for you. Instead of either
  of the above approaches,\nsimply drop this into the `M` module:\n\n``` haskell\n{-#
  OPTIONS_GHC -F -pgmF autoexporter #-}\n```\n\nThat will generate code that looks
  like this:\n\n``` haskell\nmodule M (\n  module M.A,\n  module M.B,\n) where\nimport
  M.A\nimport M.B\n```\n\nAutoexporter will generally behave as you'd expect, but
  there are a couple\nthings to look out for:\n\n- You cannot selectively include
  or exclude any modules.\n\n- By default, only immediate children will be re-exported.
  If you use this in\n  some module `M`, it won't pull in `M.A.B`. If you need deep
  re-exporting,\n  please pass `--deep` to Autoexporter like this:\n\n```haskell\n{-#
  OPTIONS_GHC -F -pgmF autoexporter -optF --deep #-}\n```\n\n[Autoexporter]: https://github.com/tfausak/autoexporter\n[Version
  badge]: https://www.stackage.org/package/autoexporter/badge/nightly?label=version\n[version]:
  https://www.stackage.org/nightly/package/autoexporter\n[Build badge]: https://travis-ci.org/tfausak/autoexporter.svg?branch=master\n[build]:
  https://travis-ci.org/tfausak/autoexporter\n"
license-name: MIT
