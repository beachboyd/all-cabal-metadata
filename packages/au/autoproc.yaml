homepage: https://github.com/dagit/autoproc
changelog-type: ''
hash: bc4954b674734af7cb4311dc800c130d3199bf552a1a0f774c28f8b34520fbce
test-bench-deps: {}
maintainer: Jason Dagit <dagitj@gmail.com>
synopsis: EDSL for Procmail scripts
changelog: ''
basic-deps:
  unix: -any
  base: ! '>=4 && <5'
  process: -any
  mtl: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.2.1
author: Jason Dagit
latest: 0.2.1
description-type: text
description: ! "= Autoproc =\n\nAutoproc is a utility/language for email filtering.
  \ Autoproc makes it\neasy to define filtering rules.  The rules define a Haskell
  program,\nthat when executed generates a valid Procmail recipes file.  This file\ncan
  then be used with Procmail to sort and filter your email before\nyou see it.\n\nYou
  will need to have GHC or Hugs, Procmail and formail installed.\n\n== Installation
  ==\n\nTo get a copy of Autoproc, use\n\n  darcs get http://code.haskell.org/autoproc\n\nIf
  you don't have darcs do not despair, currently Autoproc is about 5\nfiles and can
  be easily downloaded by pointing your web browser at the\naddress just given.\n\nYou
  can also visit Hackage, where you should be able to find a tarball of autoproc (or
  eventually you could install Autoproc through cabal-install).\n\n== Customizing
  Autoproc ==\n\nAutoproc runs on the XMonad model. If you aren't familiar with XMonad,
  the idea is that the package is constructed such that it provides a library, and
  then it compiles a thin executable using that library.\n\nThis is fine if the baked
  in configuration exactly suits your needs, but how do you have a system-wide XMonad
  which you can configure in a full Haskell style without some sort of Emacs-style
  interpreter? Well, the thin executable is tasked with looking for a xmonad.hs in
  a fixed location; if it exists, it gets compiled and the *new* binary gets run.
  And your personal xmonad.hs can do anything it wants - as all of XMonad's functionality
  is exposed as a library your xmonad.hs can import and modify at will. So your xmonad.hs
  boils down to 'main = xmonad $ myCrazyFunkyArgs'.\n\nIn Autoproc's case, what you
  do is create ~/.autoproc/autoproc.hs, and then set things up. (If you don't, Autoproc
  will use its compiled in configuration, which is surely not what you want.)\n\nWhile
  I was testing this Xmonad-style configuration, I created an autoproc.hs that looks
  like this:\n\n> import Autoproc.Configuration (defaultVariables)\n> import Autoproc.Run\n>
  import Autoproc.Rules.Dagit\n\n> main âˆ· IO ()\n> main =  do print \"foo bar\"\n>
  \           autoprocMain defaultVariables dagitRules\n\n('defaultVariables' provides
  the key-values of environmental variables, and 'dagitRules' is all the Procmail
  filtering rules.)\n\nNow, this is the same environmental variables and configuration
  rules used by default, but there's nothing stopping me from taking defaultVariables
  and replacing it with\n\n> myVariables = [(\"SHELL\", \"/bin/zsh\")]\n\nAnd I can
  run arbitrary stuff before and after the rules and variables are compiled down to
  text - my output will start with \"foo bar\", as useless a customization as that
  is...\n\n== Running Autoproc ==\n\nTo run the autoproc binary and save your rules
  to the file recipes use the\nfollowing command:\n\n  $ autoproc > recipes\n\nIf
  you are familiar with Procmail you may want to examine the file to\nsee that everything
  was generated correctly.  Once you are confident\nthat you would like to use this
  file, you can simply move it to\n$HOME/.procmailrc Depending on your system you
  may need to do\nadditional configuration to get Procmail itself running.  Usually
  this\nis done with a .forward file, or on some systems having a .procmailrc\nis
  enough.\n\n"
license-name: BSD-3-Clause
