homepage: http://github.com/ekmett/rcu/
changelog-type: markdown
hash: ea4236d1f4cdd49642a9b554b5f114bd12227235ba086465acccd5939644cce3
test-bench-deps:
  rcu: -any
  hlint: ! '>=1.7'
  rdtsc: ! '>=1.3.0.1'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5.0.1'
  criterion: ! '>=1.1'
  doctest: ! '>=0.11.1 && <0.17'
  containers: ! '>=0.5'
  ghc-prim: ! '>=0.3'
  transformers: ! '>=0.4 && <0.6'
  optparse-applicative: ! '>=0.11'
  parallel: -any
  deepseq: ! '>=1.4.1'
  primitive: ! '>=0.6'
maintainer: Edward A. Kmett <ekmett@gmail.com>, Ted Cooper <anthezium@gmail.com>
synopsis: Read-Copy-Update for Haskell
changelog: ! "## 0.2.2 [2018.02.06]\n---------------------\n* Include `HLint.hs` with
  the tarball distribution, fixing the `hlint`\n  test suite.\n\n## 0.2.1\n* Support
  `doctest-0.12`\n\n## 0.2\n* Revamp `Setup.hs` to use `cabal-doctest`. This makes
  it build\n  with `Cabal-2.0`, and makes the `doctest`s work with `cabal new-build`
  and\n  sandboxes.\n\n## 0\n* Initial version\n\n"
basic-deps:
  rcu: -any
  base: ! '>=4.8 && <5'
  ghc-prim: ! '>=0.3'
  atomic-primops: ! '>=0.8'
  transformers: ! '>=0.4 && <0.6'
  parallel: ! '>=3.2 && <3.3'
  primitive: ! '>=0.6'
all-versions:
- '0'
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
author: Ted Cooper and Edward A. Kmett
latest: '0.2.2'
description-type: markdown
description: ! "## rcu\n\n[![Hackage](https://img.shields.io/hackage/v/rcu.svg)](https://hackage.haskell.org/package/rcu)
  [![Build Status](https://secure.travis-ci.org/ekmett/rcu.png?branch=master)](http://travis-ci.org/ekmett/rcu)\n\nThis
  package is an exploration of Read-Copy Update in Haskell based on [Relativistic
  Programming in Haskell](http://web.cecs.pdx.edu/~walpole/papers/haskell2015.pdf)
  by Cooper and Walpole.  It includes a sound QSBR-based implementation and an attempt
  at an STM-based implementation.\n\nIn the spirit of [A Relativistic Enhancement
  to Software Transactional Memory](https://www.usenix.org/legacy/events/hotpar11/tech/final_files/Howard.pdf)\n
  by Howard and Walpole, we could extend the STM implementation to allow reads and
  writes on the same data in parallel, writes to disjoint data in parallel, and force
  readers to agree that writes before a `synchronize` happened before writes after
  it.\n\nDevelopment on this project proceeded in a burst of enthusiasm after Edward
  saw Ted's poster presentation at ICFP 2015, and yet somehow he managed to shanghai
  Ted into helping maintain this copy of his own work.\n\n## Contact Information\n\nContributions
  and bug reports are welcome!\n\nPlease feel free to contact us through github or
  on the #haskell IRC channel on irc.freenode.net.\n\n-Edward Kmett and Ted Cooper\n"
license-name: BSD3
