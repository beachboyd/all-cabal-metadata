homepage: http://github.com/aelve/fmt
changelog-type: markdown
hash: 03a25771d64a4483b79b135c63bf27b0d6410edc0e43fd27619893bc3977666c
test-bench-deps:
  fmt: -any
  bytestring: -any
  base: ! '>=4.6 && <5'
  hspec: ! '>=2.2 && <2.6'
  text: -any
  criterion: -any
  doctest: -any
  containers: -any
  interpolate: -any
  formatting: -any
  deepseq: -any
  call-stack: -any
  vector: -any
  neat-interpolation: -any
maintainer: yom@artyom.me
synopsis: A new formatting library
changelog: ! "# 0.6.1.1\n\n* Added `HasCallStack` to partial functions.\n\n# 0.6.1\n\n*
  Added `instance FromBuilder ByteString` (for both lazy and strict\n  bytestrings)
  and `instance FromBuilder BS.Builder`. These instances\n  generate UTF8-encoded
  bytestrings. This allows producing formatting\n  strings for various HTTP libraries
  that are intent on using `ByteString`\n  for text.\n\n* Added `pretty :: (Buildable
  a, FromBuilder b) => a -> b` for formatting\n  anything as `Buildable`. There's
  also `prettyLn` for consistency with\n  `fmt` and `fmtLn`.\n\n# 0.6\n\n* Switched
  to `Buildable` from `formatting` (since `text-format` is\n  unmaintained).\n\n*
  Removed the `double-conversion` dependency (which was sometimes causing\n  compilation
  issues). As the result, `exptF`, `fixedF` and `floatF` have\n  become slower.\n\n*
  The `precF` formatter was removed completely because its semantics was too\n  confusing.
  You can use `Numeric.showGFloat` to achieve a similar effect.\n\n* `floatF` now
  always prints a point, even if the number is integral.\n\n* `tupleLikeF` has been
  removed. `TupleF` now has an additional instance\n  that lets `tupleF` be used to
  format lists.\n\n* The `base16-bytestring` dependency was removed.\n\n* Compatibility
  with GHC 7.6 and 7.8 was dropped.\n\n# 0.5.0.0\n\n* From this version on, `blockListF`
  never puts blank lines between items.\n  If you want blank lines between items,
  I'm afraid that you'll have to add\n  them manually (by e.g. adding a blank line
  to each item).\n\n* Now `blockListF'` can be used to create lists with custom bullets.\n\n*
  Added `unwordsF` and `unlinesF`.\n\n* Added the `F` suffix to `indent` and `indent'`.\n\n#
  0.4.0.0\n\n* Renamed `#|` and `|#` to `+|` and `|+` because HLint can't handle `#|`
  and\n  everyone uses HLint apparently.\n\n# 0.3.0.0\n\n* Added time formatters (see
  `Fmt.Time`).\n\n# 0.2.0.0\n\n* Changed `format` and `formatLn` to be polyvariadic.\n\n#
  0.1.0.0\n\n* Added `genericF` for formatting arbitrary data.\n\n* Changed `%<` and
  `>%` to `#|` and `|#` because they turn out to be easier\n  to type.\n\n* Added
  a migration guide from `formatting`.\n\n* Changed output of `eitherF`.\n\n* Added
  bechmarks.\n\n# 0.0.0.4\n\n* Added `format` from `text-format`, because in some
  cases it's nicer than\n  brackets.\n\n* Renamed `padCenterF` to `padBothF`.\n\n*
  Modified `indent` and `indent'` to always add newlines.\n\n# 0.0.0.3\n\n* Wrote
  documentation.\n\n* Added some formatters:\n\n    * `indent`\n    * formatters for
  lists, maps and tuples (`listF`, etc)\n    * `octF`, `binF`, `baseF` and floating-point
  formatters\n    * `hexF` which works on both numbers and bytestrings\n    * `ordinalF`
  and `commaizeF`\n    * padding and trimming formatters\n    * `base64F` and `base64UrlF`\n
  \   * conditionals (`whenF` and `unlessF`)\n\n* Merged `Fmt.IO` with `Fmt` because
  orphan instances are controversial.\n\n* Exported internal classes and functions
  from `Fmt.Internal`.\n\n* Added `fmt` and `fmtLn`.\n\n* Made all operators associate
  to the right (`Builder` documentation says\n  it's faster than the opposite).\n\n*
  Reexported `Buildable` and `Builder`.\n\n# 0.0.0.2\n\n* Added `>%%<` so that it'd
  be possible to write `%<a>%%<b>%` instead of\n  weird `%<a%<b>%`.\n\n* Added `%<<
  ... >>%`, which work work `Show` instead of `Buildable`. If you\n  don't care about
  speed and just want to output something, use them.\n\n* Added an `IO ()` instance
  in `Fmt.IO`. If you import that module, raw\n  formatted strings would print themselves.\n\n*
  Added tests.\n\n* Changed fixities of operators so that `%<n+1>%` would work.\n\n*
  Changed license to BSD3 since all our dependencies are BSD3 and we can't\n  use
  MIT.\n\n# 0.0.0.1\n\nFirst (completely experimental) release.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  time: -any
  base64-bytestring: -any
  text: -any
  containers: -any
  formatting: ! '>=6.3.4'
  microlens: ! '>=0.3'
  call-stack: -any
  time-locale-compat: -any
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6'
- '0.6.1'
- '0.6.1.1'
author: ! 'Artyom Kazak <yom@artyom.me>,

  Dmitry Kovanikov <kovanikov@gmail.com>'
latest: '0.6.1.1'
description-type: haddock
description: ! 'A new formatting library that tries to be simple to understand while
  still

  being powerful and providing more convenience features than other libraries

  (like functions for pretty-printing maps and lists, or a function for

  printing arbitrary datatypes using generics).


  A comparison with other libraries:


  * @printf@ (from @Text.Printf@) takes a formatting string and uses some

  type tricks to accept the rest of the arguments polyvariadically. It''s

  very concise, but there are some drawbacks â€“ it can''t produce @Text@

  (you''d have to @T.pack@ it every time) and it doesn''t warn you at

  compile-time if you pass wrong arguments or not enough of them.


  * <https://hackage.haskell.org/package/text-format text-format> takes a

  formatting string with curly braces denoting places where arguments

  would be substituted (the arguments themselves are provided via a

  tuple). If you want to apply formatting to some of the arguments, you

  have to use one of the provided formatters. Like @printf@, it can fail at

  runtime, but at least the formatters are first-class (and you can add new

  ones).


  * <https://hackage.haskell.org/package/formatting formatting> takes a

  formatting template consisting of pieces of strings interleaved with

  formatters; this ensures that arguments always match their placeholders.

  @formatting@ provides lots of formatters and generally seems to be the

  most popular formatting library here. Unfortunately, at least in my

  experience writing new formatters can be awkward and people sometimes

  have troubles understanding how @formatting@ works.


  * <https://hackage.haskell.org/package/fmt fmt> (i.e. this library)

  provides formatters that are ordinary functions, and a bunch of operators

  for concatenating formatted strings; those operators also do automatic

  conversion. There are some convenience formatters which aren''t present in

  @formatting@ (like ones for formatting maps, lists, converting to base64,

  etc). Some find the operator syntax annoying, while others like it.'
license-name: BSD3
