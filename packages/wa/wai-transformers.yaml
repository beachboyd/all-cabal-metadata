homepage: https://github.com/athanclark/wai-transformers#readme
changelog-type: ''
hash: 82b47d17865904e436b71d497b6b71644ec5ed4169174ff488d1aeeeade31334
test-bench-deps: {}
maintainer: athan.clark@localcooking.com
synopsis: ''
changelog: ''
basic-deps:
  exceptions: -any
  wai-websockets: -any
  wai: ! '>=3.2.1'
  base: ! '>=4.8 && <5'
  extractable-singleton: ! '>=0.0.1'
  websockets: ! '>=0.12.4'
  monad-control-aligned: ! '>=0.0.1'
  transformers: -any
all-versions:
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.5.1'
- '0.0.6'
- '0.0.7'
- '0.1.0'
author: Athan Clark
latest: '0.1.0'
description-type: markdown
description: ! "wai-transformers\n================\n\nSimple parameterization of Wai's
  `Application` and `Middleware` types.\n\n\n## Overview\n\nWai's `Application` type
  is defined as follows:\n\n```haskell\ntype Application = Request -> (Response ->
  IO ResponseReceived) -> IO ResponseReceived\n```\n\nThis is great for the server
  - we can just `flip ($)` the middlewares together to get\nan effectful server. However,
  what if we want to encode useful information in our\nmiddleware chain / end-point
  application? Something like a `ReaderT Env` environment,\nwhere useful data like
  a universal salt, current hostname, or global mutable references can\nbe referenced
  later if it were wedged-in.\n\nThe design looks like this:\n\n```haskell\ntype ApplicationT
  m = Request -> (Response -> IO ResponseReceived) -> m ResponseReceived\n```\n\nNow
  we can encode MTL-style contexts with applications we write\n\n```haskell\ntype
  MiddlewareT m = ApplicationT m -> ApplicationT m\n\n\ndata AuthConfig = AuthConfig\n
  \ { authFunction :: Request -> Either AuthException (Response -> Response)\n  }\n\nsimpleAuth
  :: ( MonadReader AuthConfig m\n              , MonadError AuthException m\n              )
  => MiddlewareT m\nsimpleAuth app req resp = do\n  auth <- authFunction <$> ask\n
  \ case auth req of\n    Left e = throwError e\n    Right f = app req (resp . f)\n\nsimpleAuth'
  :: Middleware\nsimpleAuth' app req resp =\n  eReceived <- runExceptT $ runReaderT
  (simpleAuth app req resp) myAuthConfig\n  case eReceived of\n    Left e = resp $
  respondLBS \"Unauthorized!\"\n    Right r = return r\n```\n"
license-name: BSD3
