homepage: https://github.com/athanclark/wai-middleware-verbs#readme
changelog-type: ''
hash: dfe39d4a6fd082c53c97e5fba191868f8fd06aee0babc69c1d07819d718e36ab
test-bench-deps: {}
maintainer: athan.clark@localcooking.com
synopsis: Route Wai middlewares based on HTTP verbs
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: -any
  wai: ! '>=3.2.1'
  wai-transformers: ! '>=0.1.0'
  base: ! '>=4.8 && <5'
  unordered-containers: -any
  monad-control: -any
  monad-control-aligned: -any
  mtl: -any
  mmorph: -any
  hashable: -any
  transformers-base: -any
  monad-logger: -any
  transformers: -any
  resourcet: -any
  http-types: -any
all-versions:
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.4.0
- 0.4.0.1
author: Athan Clark
latest: 0.4.0.1
description-type: markdown
description: ! "wai-middleware-verbs\n====================\n\nRoute to different Wai
  middleware based on the incoming HTTP verb\ndetected.\n\n## Usage\n\nThis library
  depends on the [wai-transformers](https://hackage.haskell.org/package/wai-transformers)\npackage
  - we expect middleware to already be lifted to `MiddlewareT m`.\n\nAs an example,
  here could be your application:\n\n```haskell\nimport Network.Wai.Trans\nimport
  Network.Wai.Middleware.Verbs\n\n\nmyMid1 :: MiddlewareT (ReaderT Env m)\nmyMid2
  :: Middleware\n\nuploadResponse :: ByteString -> MiddlewareT m\nuploadResponse _
  = liftMiddleware myMid2\n\nverbRoutes :: VerbListenerT (MiddlewareT m) m ()\nverbRoutes
  = do\n  get myMid1\n  post uploadResponse\n```\n\nThen, to use your newly assembled
  verb-router, turn the Verbs into a Middleware:\n\n```haskell\nverbMid :: MiddlewareT
  (ReaderT Env m)\nverbMid = verbsToMiddleware verbRoutes\n```\n\nFrom there, you
  can deconstruct your monolithic monad stack back down to `IO`,\nand plug-it-in to
  your existing middleware.\n"
license-name: BSD-3-Clause
