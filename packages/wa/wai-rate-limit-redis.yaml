homepage: https://github.com/mbg/wai-rate-limit#readme
changelog-type: ''
hash: 3ced39deabaec63b1fe7be4c82182f9fe4141f11ad083244f1e0d52efb7e8777
test-bench-deps:
  warp: -any
  wai-rate-limit-redis: -any
  bytestring: '>=0.9 && <0.11'
  wai: -any
  base: '>=4.8 && <5'
  tasty-hedgehog: -any
  wai-rate-limit: -any
  tasty-hunit: -any
  wai-extra: -any
  tasty: -any
  hedis: '>=0.12 && <1'
  http-types: -any
maintainer: m.gale@warwick.ac.uk
synopsis: Redis backend for rate limiting as WAI middleware
changelog: ''
basic-deps:
  bytestring: '>=0.9 && <0.11'
  base: '>=4.8 && <5'
  wai-rate-limit: '>=0.1 && <1'
  hedis: '>=0.12 && <1'
all-versions:
- 0.1.0.0
author: Michael B. Gale
latest: 0.1.0.0
description-type: markdown
description: "# Rate limiting as WAI middleware\n\n![MIT](https://img.shields.io/github/license/mbg/wai-rate-limit)\n![CI](https://github.com/mbg/wai-rate-limit/workflows/CI/badge.svg?branch=master)\n\nThis
  repository contains WAI middleware for rate limiting. The main library is `wai-rate-limit`
  which provides the WAI middleware as well as implementations of different rate limiting
  strategies. \n\nTo limit dependencies introduced by `wai-rate-limit`, storage backends
  are split up into their own packages:\n\n- A Redis backend is provided by `wai-rate-limit-redis`.
  \n\n## Usage\n\n### Sliding Window\n\nThe following example demonstrates how to
  use the middleware with a sliding window strategy and a Redis backend. The resulting
  middleware will limit requests to 50 requests per sliding window of 29 seconds based
  on keys derived from the client's IP address. In other words, if we receive a request,
  we check whether the limit of 50 has been exceed for the client based on their IP
  and if not, the request is allowed, the request count is increased, and the window
  is extended by 29 seconds. If the limit is exceeded, the client will always have
  to wait 29 seconds before making another request.\n\n```haskell\nimport qualified
  Data.ByteString.Char8 as C8\n\nimport Database.Redis as Redis\n\nimport Network.Wai.RateLimit\nimport
  Network.Wai.RateLimit.Strategy\nimport Network.Wai.RateLimit.Redis\n\nmiddleware
  :: Redis.Connection -> Middleware\nmiddleware conn = rateLimiting strategy \n    where
  backend = redisBackend conn \n          getKey = pure . C8.pack . show . remoteHost\n
  \         strategy = slidingWindow backend 29 50 getKey\n```\n\nThe behaviour described
  above can be changed by altering the parameters to `slidingWindow` accordingly.
  In particular, for e.g. REST APIs, you may wish to use e.g. API keys or other user
  identifiers in place of IP addresses.\n\n### Fixed Window\n\nThe following example
  demonstrates how to use the middleware with a fixed window strategy and a Redis
  backend. The resulting middleware will limit requests to 50 requests per window
  of 29 seconds based on keys derived from the client's IP address. \n\n```haskell\nimport
  qualified Data.ByteString.Char8 as C8\n\nimport Database.Redis as Redis\n\nimport
  Network.Wai.RateLimit\nimport Network.Wai.RateLimit.Strategy\nimport Network.Wai.RateLimit.Redis\n\nmiddleware
  :: Redis.Connection -> Middleware\nmiddleware conn = rateLimiting strategy \n    where
  backend = redisBackend conn \n          getKey = pure . C8.pack . show . remoteHost\n
  \         strategy = fixedWindow backend 29 50 getKey\n```\n\nThe behaviour described
  above can be changed by altering the parameters to `fixedWindow` accordingly. In
  particular, for e.g. REST APIs, you may wish to use e.g. API keys or other user
  identifiers in place of IP addresses.\n\n### Custom strategies\n\nIn addition to
  the provided strategies, you can implement your own `Strategy` values or customise
  existing ones. The `Strategy` type is currently defines as follows, so a custom
  strategy is essentially a function `Request -> IO Bool` which should return `True`
  if the request should proceed or `False` if it should be rejected:\n\n```haskell\n--
  | Represents rate limiting strategies.\ndata Strategy = MkStrategy {\n    -- | 'strategyOnRequest'
  @request@ is a computation which determines\n    -- whether the request should be
  allowed or not, based on the rate\n    -- limiting strategy.\n    strategyOnRequest
  :: Request -> IO Bool\n}\n```\n\nModifying existing strategies makes it relatively
  easy to e.g. selectively apply rate limiting to some paths:\n\n```haskell\nimport
  qualified Data.ByteString.Char8 as C8\n\nimport Database.Redis as Redis\n\nimport
  Network.Wai.RateLimit\nimport Network.Wai.RateLimit.Strategy\nimport Network.Wai.RateLimit.Redis\n\nmiddleware
  :: Redis.Connection -> Middleware\nmiddleware conn = rateLimiting strategy{ strategyOnRequest
  = customHandler } \n    where backend = redisBackend conn \n          getKey = pure
  . C8.pack . show . remoteHost\n          strategy = fixedWindow backend 29 50 getKey\n
  \         customHandler req =  \n              if rawPathInfo req == \"/index.html\"
  \n              then pure True -- always allow access to /index.html\n              else
  strategyOnRequest strategy req\n```\n"
license-name: MIT
