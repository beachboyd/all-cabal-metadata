homepage: https://github.com/larskuhtz/wai-cors
changelog-type: markdown
hash: f8dfb382e13ab583fc201cf1bd41691b323ec6292b9b0c4dbde236c3dde20d09
test-bench-deps:
  warp: ! '>=3.0'
  wai-websockets: ! '>=3.0'
  base-unicode-symbols: ! '>=0.2'
  wai-cors: -any
  wai: ! '>=3.0'
  base: ==4.*
  text: ! '>=1.2'
  filepath: ! '>=1.4'
  process: ! '>=1.2'
  network: ! '>=2.6'
  websockets: ! '>=0.9'
  tasty-hunit: ! '>=0.9'
  wai-extra: ! '>=3.0'
  tasty: ! '>=0.10'
  http-types: ! '>=0.8'
  directory: ! '>=1.2'
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: CORS for WAI
changelog: ! "0.2.6 (2017-12-01)\n==================\n\n*   Removed ghc-7.6.3 and
  versions of wai<3.0 from the CI test matrix.\n    These versions are still supported
  in the code but cabal may need some\n    manual help to resolve dependencies.\n\n*
  \  Fixes and improvements to the documentation. Thanks to Frederik HanghÃ¸j\n    Iversen,
  Alex Collins, and Maximilian Tagher.\n\n0.2.5\n=====\n\n*   Support GHC-8.0.1.\n\n*
  \  Removed dependencies on parsers package.\n\n0.2.4\n=====\n\n*   Fix [bug #1](https://github.com/larskuhtz/wai-cors/issues/1).\n
  \   Response header `Vary: Origin` is now included when `corsVaryOrigin`\n    is
  `True` and `corsOrigins` does not equal `Nothing`.\n\n0.2.3\n=====\n\n*   Added
  a test-suite to the package that uses PhantomJS to simulate a\n    browser client.\n\n*
  \  Pass on websocket requests unchanged to the application. Add documentation\n
  \   that reminds the application author to check the `Origin` header for\n    websocket
  requests.\n\n*   Move development source repository from https://github.com/alephcloud/wai-cors\n
  \   to https://github.com/larskuhtz/wai-cors.\n\n0.2.2\n=====\n\n*   Support GHC-7.10/base-4.8
  without compiler warnings.\n\n*   Drop dependency on errors package.\n\n0.2.1\n=====\n\n*
  \  Fix [bug #8](https://github.com/alephcloud/wai-cors/issues/8).\n    Accept empty
  list as value for `Access-Control-Request-Headers`.\n\n0.2\n===\n\nThis version
  may break existing code by changing the type of\n`CorsResourcePolicy`.\n\nThis version
  changes the behavior of `simpleCorsResourcePolicy`: Before\nit was a failure when
  the request didn't contain an @Origin@ header.\nWith this version the request is
  passed unchanged to the application.\nIf an failure occurs during CORS processing
  the response has HTTP status\n400 (bad request) and contains a short error messages.
  This behavior\ncan be changed with the new settings `corsRequireOrigin` and\n`corsIgnorefailure`.\n\n*
  \  Remove setting `corsVerboseResponse` from `CorsResourcePolicy`.\n\n*   Add new
  settings `corsRequireOrigin` and `corsIgnoreFailure` to\n    `CorsResourcePolicy`.\n\n0.1.4\n=====\n\n*
  \  Support wai-3\n\n0.1.3\n=====\n\n*   Improved documentation\n\n0.1.2\n=====\n\n*
  \  Export type synonym `Origin`\n\n*   New easy-to-use middleware function `simpleCors`
  that supports just\n    simple cross-origin requests\n\n*   The new value `simpleCorseResourcePolicy`
  is a `CorseResourcePolicy`\n    for simple cross-origin requests.\n\n*   Documentation
  has been slightly improved\n\n*   Some code for testing `simpleCors` from a browser\n\n0.1.1\n=====\n\n*
  \  Drop redundant dependencies on *lens* and *ghc-prim*\n\n*   Fix typo in HTTP
  header field name `Access-Control-Allow-Credentials`\n\n0.1.0\n=====\n\n*   Initial
  version\n\n"
basic-deps:
  base-unicode-symbols: ! '>=0.2.2.3'
  bytestring: ! '>=0.10.0.2'
  wai: ! '>=3.0'
  case-insensitive: ! '>=1.0.0.1'
  base: ==4.*
  mtl: ! '>=2.2'
  attoparsec: ! '>=0.10.4.0'
  transformers: ! '>=0.4'
  http-types: ! '>=0.8.0'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
author: Lars Kuhtz <lakuhtz@gmail.com>
latest: 0.2.6
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/larskuhtz/wai-cors.svg?branch=master)](https://travis-ci.org/larskuhtz/wai-cors)\n\nCross-Origin
  Resource Sharing (CORS) For Wai\n============================================\n\nThis
  package provides a Haskell implementation of CORS for\n[WAI](http://hackage.haskell.org/package/wai)\nthat
  aims to be compliant with\n[http://www.w3.org/TR/cors](http://www.w3.org/TR/cors).\n\nNote
  On Security\n----------------\n\nThis implementation doesn't include any server
  side enforcement. By complying\nwith the CORS standard it enables the client (i.e.
  the web browser) to enforce\nthe CORS policy. For application authors it is strongly
  recommended to take\ninto account the security considerations in section 6.3 of
  the\n[CORS standard](http://wwww.w3.org/TR/cors). In particular the application
  should\ncheck that the value of the `Origin` header matches the expectations.\n\nWebsocket
  connections don't support CORS and are ignored by the CORS implementation\nin this
  package. However Websocket requests usually (at least for some\nbrowsers) include
  the @Origin@ header. Applications are expected to check the\nvalue of this header
  and respond with an error in case that its content doesn't\nmatch the expectations.\n\nInstallation\n------------\n\nAssuming
  the availability of recent versions of\n[GHC](https://www.haskell.org/ghc/) and
  [cabal](https://www.haskell.org/cabal/)\nthis package is installed via\n\n```.bash\ncabal
  update\ncabal install wai-cors\n```\n\nUsage\n-----\n\nThe function 'simpleCors'
  enables support of simple cross-origin requests. More\nadvanced CORS policies can
  be enabled by passing a 'CorsResourcePolicy' to the\n'cors' middleware.\n\nThe file
  `examples/Scotty.hs` shows how to support simple cross-origin requests (as\ndefined
  in [http://www.w3.org/TR/cors](http://www.w3.org/TR/cors)) in a\n[scotty](http://hackage.haskell.org/package/scotty)
  application.\n\n```.haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main\n(
  main\n) where\n\nimport Network.Wai.Middleware.Cors\nimport Web.Scotty\n\nmain ::
  IO ()\nmain = scotty 8080 $ do\n    middleware simpleCors\n    matchAny \"/\" $
  text \"Success\"\n```\n\nThe result of following curl command will include the HTTP
  response\nheader `Access-Control-Allow-Origin: *`.\n\n```.bash\ncurl -i http://127.0.0.1:8080
  -H 'Origin: 127.0.0.1' -v\n```\n\nDocumentation for more general usage can be found
  in the module\n[Network.Wai.Middleware.Cors](http://hackage.haskell.org/package/wai-cors/docs/Network-Wai-Middleware-Cors.html).\n\nTest\n----\n\nIn
  order to run the automated test suite [PhantomJS](http://phantomjs.org/) (at\nleast
  version 2.0) must be installed in the system.\n\n```.bash\ncabal install --only-dependencies
  --enable-tests\ncabal test --show-details=streaming\n```\n\nIf [PhantomJS](http://phantomjs.org/)
  is not available the tests can be\nexectued manually in a modern web-browser as
  follows.\n\nStart the server application:\n\n```.bash\ncd test\nghc -main-is Server
  Server.hs\n./Server\n```\n\nOpen the file `test/index.html` in a modern web-browser.
  On page load a Javascript\nscript is exectued that runs the test suite and prints
  the result on the page.\n\n"
license-name: MIT
