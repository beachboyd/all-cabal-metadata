homepage: https://github.com/habibalamin/wai-secure-cookies
changelog-type: ''
hash: 7dca89da336aee181e8677c5b5b4eaf2e326de022cc69c80b0004f9c4be431c5
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.2 && <4'
  base: ! '>=4.7 && <5'
  hspec: -any
  hspec-wai: -any
  wai-secure-cookies: -any
  wai-extra: ! '>=3.0 && <4'
  http-types: ! '>=0.12.1 && <0.13'
  hspec-expectations: -any
maintainer: ha.alamin@gmail.com
synopsis: ''
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  wai: ! '>=3.2 && <4'
  split: ! '>=0.2 && <0.3'
  base: ! '>=4.7 && <5'
  protolude: ! '>=0.2 && <0.3'
  memory: ==0.14.*
  cryptonite: ==0.24.*
  random: ! '>=1.1 && <2'
  http-types: ! '>=0.12.1 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Habib Alamin
latest: 0.1.0.4
description-type: markdown
description: |
  # wai-secure-cookies

  I extracted a WAI middleware to automatically encrypt and sign cookies.

  ---

  **WARNING**

  I am not a cryptographer, and the crypto libraries in Haskell are not nearly as easy to use as what I'm used to in Ruby, so I wouldn't depend on this for a serious project until it's had some proper eyes on it.

  ---

  ## Usage

  Populate the following environment variables in your WAI application process:

  ```
  WAI_COOKIE_VALIDATION_KEY # key to sign cookie names and values
  WAI_COOKIE_ENCRYPTION_KEY # key to encrypt cookie names and values
  ```

  You can generate random keys with `waicookie-genkey`:

  ```
  waicookie-genkey <key type> ...
  key types: encryption
             validation
  ```
license-name: MIT
