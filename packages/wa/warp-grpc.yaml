homepage: https://github.com/haskell-grpc-native/http2-grpc-haskell#readme
changelog-type: markdown
hash: 3859190e4fa23b944cf93ac691b3cec78c2adf4eaff6a4e8070c89fd17915add
test-bench-deps: {}
maintainer: lucas@dicioccio.fr
synopsis: A minimal gRPC server on top of Warp.
changelog: |
  # Changelog for warp-grpc

  ## 0.4.0.1

  Add the `grpc-encoding` header to the response ([#20](https://github.com/haskell-grpc-native/http2-grpc-haskell/pull/20)).

  ## 0.4.0.0

  Support for handlers in transformers stacks, and in monads which support [`unliftio`](http://hackage.haskell.org/package/unliftio).

  ## 0.3.0.0

  Support for warp-3.3.x .

  ## 0.2.0.0

  Support for different Protocol Buffers serialization libraries.

  ## 0.1.0.3

  Add bidirectional and general stream handlers.
basic-deps:
  warp: ! '>=3.2.23 && <3.4'
  bytestring: ! '>=0.10.8 && <0.11'
  http2-grpc-types: ! '>=0.5 && <0.6'
  wai: ! '>=3.2 && <3.4'
  case-insensitive: ! '>=1.2.0 && <1.3'
  http2: ! '>=1.6 && <3'
  base: ! '>=4.10 && <5'
  async: ! '>=2.2.1 && <3'
  unliftio-core: ! '>=0.1 && <0.3'
  binary: ! '>=0.8.5 && <0.9'
  warp-tls: ! '>=3.2 && <3.4'
  http-types: ! '>=0.12 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
author: Lucas DiCioccio, Alejandro Serrano
latest: 0.4.0.1
description-type: markdown
description: |
  # warp-grpc

  A gRPC server implementation on top of Warp's HTTP2 handler.  The lib also
  contains a demo sever using the awesome `grpcb.in` Proto. The current release
  is an advanced technical demo, expect a few breaking changes.

  ## Design

  The library implements gRPC using a WAI middleware for a set of gRPC endpoints.
  Endpoint handlers differ depending of the streaming/unary-ty of individual
  RPCs. Bidirectional streams will be supported next.

  There is little specification around the expected allowed observable states in
  gRPC, hence the types this library presents make conservative choices: unary
  RPCs expect an input before providing an output. Client stream allows to return
  an output only when the client has stopped streaming. Server streams wait for
  an input before starting to iterate sending outputs.

  ## Usage

  Generate some `proto-lens` code from `.proto` files, ideally in a separate
  library.  Import this library and the generated proto-lens code to implement
  handlers for the `service` stanzas defined in the `.proto` files (see
  Haddocks). Finally, serve `warp` over TLS`.

  ## Example

  Please refer to https://github.com/lucasdicioccio/warp-grpc-example for an example.

  TODO(ldicioccio): migrate this example to the new monorepo.

  ## Next steps

  * Helper to set metadatas (a.k.a., headers and trailers).
    - (API-breaking) some or all handlers will get an IO-step to return extra metadata
  * Helper to map request headerlists into client metadatas (probably in `http2-grpc-types`)

  ## Limitations

  * Only supports "h2" with TLS (I'd argue it's a feature, not a bug. Don't @-me)
  * Some valid gRPC applications may not be expressible directly on top of warp
    because sending HTTP2 trailers (i.e., signalling the server's desire to stop
    sending messages) is correlated with closing the HTTP2 stream (i.e., stop
    accepting client messages). Hence it's not feasible to create a bidirectional
    stream that terminates on the server end while continuing to ingest client
    messages. This use case, however, seems like a corner case.
license-name: BSD-3-Clause
