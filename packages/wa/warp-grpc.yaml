homepage: https://github.com/lucasdicioccio/warp-grpc#readme
changelog-type: markdown
hash: a8c747fc510f139d907e94eb95453bdbfdb80380ee92daa9bd1acf116f516bee
test-bench-deps:
  warp: ! '>=3.2.24 && <3.3'
  bytestring: -any
  http2-grpc-types: ! '>=0.2'
  wai: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5'
  warp-grpc: -any
  proto-lens: -any
  binary: -any
  warp-tls: -any
  http-types: -any
maintainer: lucas@dicioccio.fr
synopsis: A minimal gRPC server on top of Warp.
changelog: ! '# Changelog for warp-grpc


  ## Unreleased changes

'
basic-deps:
  warp: ! '>=3.2.24 && <3.3'
  bytestring: -any
  http2-grpc-types: ! '>=0.2'
  wai: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5'
  warp-grpc: -any
  proto-lens: -any
  binary: -any
  proto-lens-protoc: -any
  warp-tls: -any
  http-types: -any
all-versions:
- '0.1.0.0'
author: Lucas DiCioccio
latest: '0.1.0.0'
description-type: markdown
description: ! "# warp-grpc\n\nA gRPC server implementation on top of Warp's HTTP2
  handler.  The lib also\ncontains a demo sever using the awesome `grpcb.in` Proto.
  The current release\nis an advanced technical demo, expect a few breaking changes.\n\n##
  Usage\n\n### Prerequisites\n\nIn addition to a working Haskell dev environment,
  you need to:\n- build the `proto-lens-protoc` executable (`proto-lens`)\n- install
  the `protoc` executable\n\n### Adding .proto files to a Haskell package\n\nIn order
  to run gRPC:\n\n- generate the `Proto` stubs in some `gen` directory\n\nA single
  `protoc` invocation may be enough for both Proto and GRPC outputs:\n\n```bash\nprotoc
  \ \"--plugin=protoc-gen-haskell-protolens=${protolens}\" \\\n    --haskell-protolens_out=./gen
  \\\n    -I \"${protodir1} \\\n    -I \"${protodir2} \\\n    ${first.proto} \\\n
  \   ${second.proto}\n```\n\n- add the `gen` sourcedir for the generated to your
  .cabal/package.yaml file (cf. 'hs-source-dirs').\n- add the generated Proto modules
  to the 'exposed-modules' (or 'other-modules') keys\n\nA reliable way to list the
  module names is the following bash invocation:\n\n```bash\nfind gen -name \"*.hs\"
  | sed -e 's/gen\\///' | sed -e 's/\\.hs$//' | tr '/' '.'\n```\n\nUnlike `proto-lens`,
  this project does not yet provide a modified `Setup.hs`.\nAs a result, we cannot
  automate these steps from within Cabal/Stack. Hence,\nyou'll have to automate these
  steps outside your Haskell toolchain.\n\n\n### Build a certificate\n\nIn shell,\n\n```shell\nopenssl
  genrsa -out key.pem 2048\nopenssl req -new -key key.pem -out certificate.csr\nopenssl
  x509 -req -in certificate.csr -signkey key.pem -out certificate.pem\n```\n\n###
  Build and run the example binary\n\n- stack build\n- stack exec -- warp-grpc-exe\n\nNote
  that you'll need a patched Warp using https://github.com/yesodweb/wai/pull/711 .\n\n##
  Design\n\nThe library implements gRPC using a WAI middleware for a set of gRPC endpoints.\nEndpoint
  handlers differ depending of the streaming/unary-ty of individual\nRPCs. Bidirectional
  streams will be supported next.\n\nThere is little specification around the expected
  allowed observable states in\ngRPC, hence the types this library presents make conservative
  choices: unary\nRPCs expect an input before providing an output. Client stream allows
  to return\nan output only when the client has stopped streaming. Server streams
  wait for\nan input before starting to iterate sending outputs.\n\n## Next steps\n\n*
  Split the `grpcb.in` example from the lib.\n* Handler type for bidirectional streams.\n\n##
  Limitations\n\n* Only supports \"h2\" with TLS (I'd argue it's a feature, not a
  bug. Don't @-me)\n"
license-name: BSD3
