homepage: https://github.com/lucasdicioccio/warp-grpc#readme
changelog-type: markdown
hash: 4bba64087baa1519f3596653fa690b14f0f6592a11d30ab5005adccb0b8186b1
test-bench-deps: {}
maintainer: lucas@dicioccio.fr
synopsis: A minimal gRPC server on top of Warp.
changelog: ! '# Changelog for warp-grpc


  ## Unreleased changes

'
basic-deps:
  warp: ! '>=3.2.24 && <3.3'
  bytestring: -any
  http2-grpc-types: ! '>=0.2'
  wai: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5'
  proto-lens: -any
  binary: -any
  warp-tls: -any
  http-types: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Lucas DiCioccio
latest: '0.1.0.2'
description-type: markdown
description: ! '# warp-grpc


  A gRPC server implementation on top of Warp''s HTTP2 handler.  The lib also

  contains a demo sever using the awesome `grpcb.in` Proto. The current release

  is an advanced technical demo, expect a few breaking changes.


  ## Design


  The library implements gRPC using a WAI middleware for a set of gRPC endpoints.

  Endpoint handlers differ depending of the streaming/unary-ty of individual

  RPCs. Bidirectional streams will be supported next.


  There is little specification around the expected allowed observable states in

  gRPC, hence the types this library presents make conservative choices: unary

  RPCs expect an input before providing an output. Client stream allows to return

  an output only when the client has stopped streaming. Server streams wait for

  an input before starting to iterate sending outputs.


  ## Usage


  Generate some `proto-lens` code from `.proto` files, ideally in a separate

  library.  Import this library and the generated proto-lens code to implement

  handlers for the `service` stanzas defined in the `.proto` files (see

  Haddocks). Finally, serve `warp` over TLS`.


  ## Next steps


  * Handler type for bidirectional streams.


  ## Limitations


  * Only supports "h2" with TLS (I''d argue it''s a feature, not a bug. Don''t @-me)

'
license-name: BSD3
