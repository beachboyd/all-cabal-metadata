homepage: https://github.com/lucasdicioccio/warp-grpc#readme
changelog-type: markdown
hash: 8cb72a1fbbd1697486f7f2c5cdb2ed9e557cfeb1f3298bfcd81375d878b2b6a2
test-bench-deps: {}
maintainer: lucas@dicioccio.fr
synopsis: A minimal gRPC server on top of Warp.
changelog: ! '# Changelog for warp-grpc


  ## Unreleased changes


  ## 0.1.0.3


  Add bidirectional and general stream handlers.

'
basic-deps:
  warp: ! '>=3.2.24 && <3.3'
  bytestring: ! '>=0.10.8 && <0.11'
  http2-grpc-types: ! '>=0.3 && <0.4'
  wai: ! '>=3.2 && <3.3'
  case-insensitive: ! '>=1.2.0 && <1.3'
  base: ! '>=4.11 && <5'
  async: ! '>=2.2.1 && <3'
  proto-lens: ! '>=0.3 && <0.5'
  binary: ! '>=0.8.5 && <0.9'
  warp-tls: ! '>=3.2 && <3.3'
  http-types: ! '>=0.12 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Lucas DiCioccio
latest: 0.1.0.3
description-type: markdown
description: ! "# warp-grpc\n\nA gRPC server implementation on top of Warp's HTTP2
  handler.  The lib also\ncontains a demo sever using the awesome `grpcb.in` Proto.
  The current release\nis an advanced technical demo, expect a few breaking changes.\n\n##
  Design\n\nThe library implements gRPC using a WAI middleware for a set of gRPC endpoints.\nEndpoint
  handlers differ depending of the streaming/unary-ty of individual\nRPCs. Bidirectional
  streams will be supported next.\n\nThere is little specification around the expected
  allowed observable states in\ngRPC, hence the types this library presents make conservative
  choices: unary\nRPCs expect an input before providing an output. Client stream allows
  to return\nan output only when the client has stopped streaming. Server streams
  wait for\nan input before starting to iterate sending outputs.\n\n## Usage\n\nGenerate
  some `proto-lens` code from `.proto` files, ideally in a separate\nlibrary.  Import
  this library and the generated proto-lens code to implement\nhandlers for the `service`
  stanzas defined in the `.proto` files (see\nHaddocks). Finally, serve `warp` over
  TLS`.\n\n## Example\n\nPlease refer to https://github.com/lucasdicioccio/warp-grpc-example
  for an example.\n\n## Next steps\n\n* Helper to set metadatas (a.k.a., headers and
  trailers).\n  - (API-breaking) some or all handlers will get an IO-step to return
  extra metadata\n* Helper to map request headerlists into client metadatas (probably
  in `http2-grpc-types`)\n\n## Limitations\n\n* Only supports \"h2\" with TLS (I'd
  argue it's a feature, not a bug. Don't @-me)\n* Some valid gRPC applications may
  not be expressible directly on top of warp\n  because sending HTTP2 trailers (i.e.,
  signalling the server's desire to stop\n  sending messages) is correlated with closing
  the HTTP2 stream (i.e., stop\n  accepting client messages). Hence it's not feasible
  to create a bidirectional\n  stream that terminates on the server end while continuing
  to ingest client\n  messages. This use case, however, seems like a corner case.\n"
license-name: BSD-3-Clause
