homepage: https://github.com/fpco/wai-middleware-consul
changelog-type: ''
hash: 71b2b56ff40acfae814efa0918c1dba976f64f816483d2b9b1cf8f5ad15719f4
test-bench-deps: {}
maintainer: dev@fpcomplete.com
synopsis: Wai Middleware for Consul
changelog: ''
basic-deps:
  warp: -any
  http-client: -any
  wai-conduit: -any
  void: -any
  bytestring: -any
  base-prelude: -any
  wai: -any
  base: ! '>=4.6 && <5'
  text: -any
  enclosed-exceptions: -any
  monad-control: -any
  process: ! '>=1.2'
  wai-middleware-consul: -any
  network: -any
  async: -any
  conduit: -any
  conduit-extra: -any
  monad-logger: -any
  wai-extra: -any
  transformers: -any
  resourcet: -any
  http-types: -any
  wai-app-static: -any
  consul-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: FP Complete Developers
latest: 0.1.0.2
description-type: markdown
description: ! "# WAI Consul Middleware\n\n![TravisCI](https://travis-ci.org/fpco/wai-middleware-consul.svg)\n![Hackage](https://img.shields.io/hackage/v/wai-middleware-consul.svg)\n\nThis
  library assists you in monitoring Consul k/v data & with\nproxying data to Consul
  safely from the Internet.  The first use\ncase is receiving Github 'push' notifications
  when a repository is\nupdated and doing a git pull on all webservers to update content.\nThe
  [example](./example) app shows GitHub Webhooks working.\n\n          ┌─────────┐
  \     ┌─────────┐\n          │ Github  │      │         │\n          │  Repo   │─────▶│
  AWS ELB │\n          │ Webhook │      │         │\n          └─────────┘      └─────────┘\n
  \                               │\n            ┌────────────┬──────┘─ ─ ─\n            │
  \                        │\n            ▼            ▼            ▼\n       ┌─────────┐
  \ ┌─────────┐  ┌─────────┐\n       │         │  │         │  │         │\n    ┌──│
  WAI App │  │ WAI App │  │ WAI App │\n    │  │         │  │         │  │         │\n
  \   │  └─────────┘  └─────────┘  └─────────┘\n    │                    ▲            ▲\n
  \   │                    │            │\n    │       ┌────────────┴────────────┘\n
  \   │       │\n    │       │\n    │  ┌─────────┐  ┌─────────┐  ┌─────────┐\n    │
  \ │         │  │         │  │         │\n    └─▶│ Consul  │──│ Consul  │──│ Consul
  \ │\n       │         │  │         │  │         │\n       └─────────┘  └─────────┘
  \ └─────────┘\n\n## Install\n\n    cabal install wai-middleware-consul\n\nOr if
  you want to play with the example github webhook web-app:\n\n    cabal install -fexample
  wai-middleware-consul\n\n## Example\n\nYou'll need to launch a small Consul cluster
  to try the example app.\nIt's easy to do with Docker.  Please use the following
  steps:\n\n### Launch 4 containers of Docker w/ Consul running on each\n\n    docker
  run -d --name node1 -h node1 progrium/consul -server -bootstrap-expect 3\n    sleep
  10\n    JOIN_IP=\"$(docker inspect -f '{{.NetworkSettings.IPAddress}}' node1)\"\n
  \   docker run -d --name node2 -h node2 progrium/consul -server -join $JOIN_IP\n
  \   docker run -d --name node3 -h node3 progrium/consul -server -join $JOIN_IP\n
  \   docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp --name node4 -h node4
  progrium/consul -join $JOIN_IP\n    sleep 10\n\n1.  Try out all the interfaces of
  Consul\n\n    1.  Browse the [Web UI Interface](http://localhost:8500/ui/#/dc1/services/consul)\n\n
  \   2.  Query Consul at the command line\n\n            consul members\n\n    3.
  \ Query the HTTP Interface\n\n            curl 0.0.0.0:8500/v1/catalog/nodes\n\n
  \   4.  Query the DNS Interface\n\n            dig @0.0.0.0 -p 8600 node1.node.consul\n\n###
  Setting up a Github Webhook\n\nFirst we start \\`ngrok\\` to proxy HTTP requests
  from the Internet to\nour local machine (most likely behind a firewall).  Then we'll
  start\nthe example web application to receive webhooks from Github.\n\nRun the example
  application (in the root Github directory for\nwai-middleware-consul).  We need
  to be in this directory so our\nexample app can find/read cabal & Github version
  status.\n\n    ./.cabal-sandbox/bin/wai-middleware-consul-example\n\nTry navigating
  to the example app page. <http://0.0.0.0:8080>\n\nRun ngrok to expose the example
  application to the Internet:\n\n    ngrok 8080 ;# take note of this public web address
  for Github\n\nSet up the webhook for the repo on Github. Point it to the ngrok web\naddress
  and add the path /github onto that URL ( eg,\n<https://be2f75d.ngrok.com/github>
  ).  This is the specific route in\nthe example application for Github->Consul data
  updates.\n\nNow that we have the application running and a proxy to the public\nInternet
  established, we can receive webhook events.\n\nTry pushing to the repository.  You
  should see notifications that an\nevent was received in the web application STDOUT
  log.  The event\nshould be pushed into Consul also.  The web application will be\nlistening
  to events from Consul & this will fire also.  You should\nsee it try to \\`git pull\\`
  the repository & you should see the changes\nif you refresh the home page of the
  example app.\n\n### Cleanup (kill & remove Consul containers)\n\n    for n in $(seq
  1 4); do\n        docker kill node$n\n        docker rm node$n\n    done\n"
license-name: MIT
