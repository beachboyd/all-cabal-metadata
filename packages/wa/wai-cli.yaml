homepage: https://github.com/myfreeweb/wai-cli
changelog-type: ''
hash: a7c6961052026b5fad8e836576f89ad3eec85325a865f2e813ece09f977f0c9c
test-bench-deps: {}
maintainer: greg@unrelenting.technology
synopsis: Command line runner for Wai apps (using Warp) with TLS, CGI, socket activation
  & graceful shutdown
changelog: ''
basic-deps:
  warp: -any
  socket-activation: -any
  streaming-commons: -any
  wai: -any
  unix: -any
  stm: -any
  base: ! '>=4.8.0.0 && <5'
  monads-tf: -any
  network: -any
  ansi-terminal: -any
  warp-tls: -any
  options: -any
  wai-extra: -any
  http-types: -any
all-versions:
- 0.1.0
- 0.1.1
author: Greg V
latest: 0.1.1
description-type: markdown
description: ! "# wai-cli [![Hackage](https://img.shields.io/hackage/v/wai-cli.svg?style=flat)](https://hackage.haskell.org/package/wai-cli)
  [![Build Status](https://img.shields.io/travis/myfreeweb/wai-cli.svg?style=flat)](https://travis-ci.org/myfreeweb/wai-cli)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)\n\nA
  command line runner for Wai apps (using Warp) with support for:\n\n- `--protocol
  http --port 8000` TCP sockets\n- `--protocol unix --socket /var/run/app/sock` UNIX
  domain sockets\n- `--protocol cgi` running as a CGI app (the original serverless
  lambda functions from the 90s)\n- `--protocol activate` socket activation (systemd-compatible,
  but not restricted to systemd in any way. see [soad](https://github.com/myfreeweb/soad)
  for an interesting use of (de)activation!)\n- `--protocol (http+tls|unix+tls|activate+tls)
  --tlskey key.pem --tlscert cert.pem` TLS (can be turned off with a cabal flag to
  avoid compiling [the TLS library](https://github.com/vincenthz/hs-tls))\n- `--graceful
  (none|serve-normally|serve-503)` graceful shutdown (on TERM signal)\n- `--devlogging`
  development logging (from `wai-extra`)\n- printing a pretty and colorful run message
  (e.g. `Running on http port 3000 with 4 CPUs`) (you can replace it with your own,
  or with nothing)\n\nExtracted from [sweetroll](https://github.com/myfreeweb/sweetroll)
  and [microformats2-parser](https://github.com/myfreeweb/microformats2-parser)'s
  demo web app.\n\n## Usage\n\nAdd a dependency on `wai-cli` and write something like
  this:\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Web.Scotty\nimport
  Network.Wai.Cli\nimport Data.Monoid (mconcat)\n\napp = scottyApp $ do\n  get \"/:word\"
  $ do\n    beam <- param \"word\"\n    html $ mconcat [\"<h1>Scotty, \", beam, \"
  me up!</h1>\"]\n\nmain = defWaiMain =<< app\n```\n\nWant to use command line args
  for your application-specific settings? Don't.\nUse environment variables instead.\nPossibly
  with [dotenv](https://github.com/stackbuilders/dotenv-hs) to load some of them from
  a file.\n[envy](https://www.stackage.org/package/envy) is a really awesome way to
  read them.\n\n## License\n\nThis is free and unencumbered software released into
  the public domain.  \nFor more information, please refer to the `UNLICENSE` file
  or [unlicense.org](http://unlicense.org).\n"
license-name: LicenseRef-PublicDomain
