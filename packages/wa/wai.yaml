homepage: https://github.com/yesodweb/wai
changelog-type: markdown
hash: eea52c4967d8609c2f79213d6dffe6d6601034f1471776208404781de7051410
test-bench-deps:
  bytestring: -any
  wai: -any
  base: ! '>=4.8 && <5'
  hspec: -any
maintainer: michael@snoyman.com
synopsis: Web Application Interface.
changelog: ! "## 3.2.1.2\n\n* Remove dependency on blaze-builder [#683](https://github.com/yesodweb/wai/pull/683)\n\n##
  3.2.1.1\n\n* Relax upper bound on bytestring-builder\n\n## 3.2.1\n\n* add mapResponseStatus
  [#532](https://github.com/yesodweb/wai/pull/532)\n\n## 3.2.0.1\n\n* Add missing
  changelog entry\n\n## 3.2.0\n\n* Major version up due to breaking changes. We chose
  3.2.0, not 3.1.0\n  for consistency with Warp 3.2.0.\n* The Network.Wai.HTTP2 module
  was removed.\n* tryGetFileSize, hContentRange, hAcceptRanges, contentRangeHeader
  and\n  chooseFilePart, adjustForFilePart and parseByteRanges were removed\n  from
  the Network.Wai.Internal module.\n* New fields for Request:  requestHeaderReferer
  and requestHeaderUserAgent.\n\n## 3.0.5.0\n\n* Avoid using the IsString Builder
  instance\n\n## 3.0.4.0\n\n* A new module Network.Wai.HTTP2 is exported.\n\n## 3.0.3.0\n\n*
  mapResponseHeaders, ifRequest and modifyResponse are exported.\n\n## 3.0.2.3\n\n*
  Allow blaze-builder 0.4\n\n## 3.0.2.2\n\n* Clarify some documentation on `rawPathInfo`.
  [Relevant Github\n  discussion](https://github.com/yesodweb/wai/issues/325#issuecomment-69896780).\n"
basic-deps:
  bytestring: ! '>=0.10.4'
  base: ! '>=4.8 && <5'
  text: ! '>=0.7'
  network: ! '>=2.2.1.5'
  vault: ! '>=0.3 && <0.4'
  transformers: ! '>=0.0'
  http-types: ! '>=0.7'
all-versions:
- '0.0.0'
- '0.0.1'
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '1.0.0'
- '1.1.0'
- '1.1.0.1'
- '1.2.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.0.3'
- '1.3.0'
- '1.3.0.1'
- '1.3.0.2'
- '1.3.0.3'
- '1.4.0'
- '1.4.0.1'
- '1.4.0.2'
- '1.4.1'
- '2.0.0'
- '2.1.0'
- '2.1.0.1'
- '2.1.0.2'
- '2.1.0.3'
- '3.0.0'
- '3.0.0.1'
- '3.0.0.2'
- '3.0.1'
- '3.0.1.1'
- '3.0.2'
- '3.0.2.1'
- '3.0.2.2'
- '3.0.2.3'
- '3.0.3.0'
- '3.0.4.0'
- '3.0.5.0'
- '3.2.0'
- '3.2.0.1'
- '3.2.1'
- '3.2.1.1'
- '3.2.1.2'
author: Michael Snoyman
latest: '3.2.1.2'
description-type: markdown
description: ! "WAI: Web Application Interface\n==============================\n\nGetting
  started\n---------------\n\nYou want a minimal example? Here it is!\n\n~~~ {.haskell}\n{-#
  LANGUAGE OverloadedStrings #-}\nimport Network.Wai\nimport Network.HTTP.Types\nimport
  Network.Wai.Handler.Warp (run)\n\napp :: Application\napp _ respond = do\n    putStrLn
  \"I've done some IO here\"\n    respond $ responseLBS\n        status200\n        [(\"Content-Type\",
  \"text/plain\")]\n        \"Hello, Web!\"\n\nmain :: IO ()\nmain = do\n    putStrLn
  $ \"http://localhost:8080/\"\n    run 8080 app\n~~~\n\nPut that code into a file
  named _hello.hs_ and install [wai] and [warp] from Hackage:\n\n    cabal install
  wai warp\n\nRun it:\n\n    runhaskell hello.hs\n\nPoint your browser to:\n\n    http://localhost:8080/\n\n\nServing
  static content\n----------------------\n\nWe can modify our previous example to
  serve static content. For this create a file named _index.html_:\n\n    <p>Hello,
  Web!</p>\n\nNow we redefine `responseBody` to refer to that file:\n\n~~~ {.haskell}\napp2
  :: Application\napp2 _ respond = respond index\n\nindex :: Response\nindex = responseFile\n
  \   status200\n    [(\"Content-Type\", \"text/html\")]\n    \"index.html\"\n    Nothing\n~~~\n\n\nBasic
  dispatching\n-----------------\n\nAn `Application` maps `Request`s to `Response`s:\n\n
  \   ghci> :info  Application\n    type Application = Request -> (Response -> IO
  ResponseReceived) -> IO ResponseReceived\n\nDepending on the path info provided
  with each `Request` we can serve different `Response`s:\n\n~~~ {.haskell}\napp3
  :: Application\napp3 request respond = respond $ case rawPathInfo request of\n    \"/\"
  \    -> index\n    \"/raw/\" -> plainIndex\n    _       -> notFound\n\nplainIndex
  :: Response\nplainIndex = responseFile\n    status200\n    [(\"Content-Type\", \"text/plain\")]\n
  \   \"index.html\"\n    Nothing\n\nnotFound :: Response\nnotFound = responseLBS\n
  \   status404\n    [(\"Content-Type\", \"text/plain\")]\n    \"404 - Not Found\"\n~~~\n\n\nDoing
  without overloaded strings\n--------------------------------\n\nFor the sake of
  efficiency, WAI uses the [bytestring] package.  We used GHCs [overloaded strings]
  to almost hide this fact. But we can easily do without.  What follows is a more
  verbose definition of `notFound`, that works without GHC extensions:\n\n~~~ {.haskell
  .ignore}\nimport qualified Data.ByteString.Char8 as B8\nimport qualified Data.ByteString.Lazy.Char8
  as LB8\nimport           Data.CaseInsensitive (mk)\n\nnotFound = responseLBS\n    status404\n
  \   [(mk $ B8.pack \"Content-Type\", B8.pack \"text/plain\")]\n    (LB8.pack \"404
  - Not Found\")\n~~~\n\n\n [wai]: http://hackage.haskell.org/package/wai\n [warp]:
  http://hackage.haskell.org/package/warp\n [overloaded strings]: http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#overloaded-strings\n
  [bytestring]: http://hackage.haskell.org/package/bytestring\n"
license-name: MIT
