homepage: https://github.com/athanclark/wai-middleware-content-type#readme
changelog-type: ''
hash: e4ca69473940b42e4af2f993b7f135e57cabaa7c8400eb4ffdd7280400bd8f16
test-bench-deps:
  shakespeare: -any
  warp: -any
  exceptions: -any
  lucid: -any
  bytestring: -any
  clay: -any
  wai: -any
  wai-transformers: -any
  base: ! '>=4.11 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  extractable-singleton: -any
  monad-control: -any
  tasty-hspec: -any
  blaze-builder: -any
  wai-middleware-content-type: -any
  hspec-wai: -any
  monad-control-aligned: -any
  mtl: -any
  mmorph: -any
  hashable: -any
  blaze-html: -any
  transformers-base: -any
  monad-logger: -any
  transformers: -any
  tasty: -any
  wai-logger: -any
  resourcet: -any
  http-types: -any
  aeson: -any
  urlpath: -any
  http-media: -any
maintainer: athan.clark@localcooking.com
synopsis: Route to different middlewares based on the incoming Accept header.
changelog: ''
basic-deps:
  shakespeare: -any
  exceptions: -any
  lucid: -any
  bytestring: -any
  clay: -any
  wai: ! '>=3.2'
  wai-transformers: ! '>=0.1.0'
  base: ! '>=4.11 && <5'
  unordered-containers: -any
  text: -any
  extractable-singleton: -any
  monad-control: -any
  blaze-builder: -any
  monad-control-aligned: -any
  mtl: -any
  mmorph: -any
  hashable: -any
  blaze-html: -any
  transformers-base: -any
  monad-logger: -any
  transformers: -any
  wai-logger: -any
  resourcet: -any
  http-types: -any
  aeson: -any
  urlpath: ! '>=9.0.1'
  http-media: -any
all-versions:
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.0.1
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.6.1.1
- 0.6.1.2
- 0.6.2
author: Athan Clark
latest: 0.6.2
description-type: markdown
description: ! "wai-middleware-content-type\n===========================\n\nRoute
  middlewares based on the incoming `Accept` HTTP header,\nand other hints like the
  file extension (`foo.txt`) of the route\nrequested.\n\n## Usage\n\nThis package
  provides many combinators for turning various data\ntypes into the response you'd
  expect. For instance,\n[blaze-html](https://hackage.haskell.org/package/blaze-html)
  gives\nus _strictly_ `Html` data, right? We can be sure to only respond\nwith `Html`-compatible
  requests with our toolset:\n\n```haskell\nimport Network.Wai.Middleware.ContentType\nimport
  Network.Wai.Trans\n\n\nmyMiddleware :: MiddlewareT (ReaderT Env m)\n\ncontentTypeRoutes
  :: Monad m =>\n                     FileExtListenerT (Status -> ResponseHeaders
  -> Response) m ()\ncontentTypeRoutes = do\n  blaze myBlazeResponse\n  cassius myCassiusResponse\n
  \ text myTextResponse\n\n\ncontentMiddleware :: Monad m => MiddlewareT m\ncontentMiddleware
  app req respond =\n  fileExtsToMiddleware $\n    mapResponse (\\f -> f status200
  []) contentTypeRoutes\n```\n\n\nThis library was designed for use with [nested-routes](https://hackage.haskell.org/package/nested-routes),\nbut
  it's all good if you want to use it separately.\n"
license-name: BSD-3-Clause
