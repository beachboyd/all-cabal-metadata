homepage: https://github.com/quasicomputational/mega/tree/master/packages/twofinger
changelog-type: ''
hash: 43de3480692945077a209e17852a6a23b311ca596933d6e4e3b02c9c834f6232
test-bench-deps:
  base: ! '>=4.9.1.0 && <4.11'
  doctest: ! '>=0.11.4 && <0.14'
  lens: ! '>=4.15.4 && <4.16'
  streams: ! '>=3.3 && <3.4'
  q4c12-twofinger: -any
  QuickCheck: ! '>=2.10.1 && <2.11'
  template-haskell: -any
maintainer: quasicomputational <quasicomputational@gmail.com>
synopsis: Efficient alternating finger trees
changelog: ''
basic-deps:
  semigroupoids: ! '>=5.2.1 && <5.3'
  base: ! '>=4.9.1.0 && <4.11'
  bifunctors: ! '>=5.4.2 && <5.5'
  streams: ! '>=3.3 && <3.4'
  deepseq: ! '>=1.4.3.0 && <1.5'
  QuickCheck: ! '>=2.10.1 && <2.11'
all-versions:
- '0'
author: quasicomputational <quasicomputational@gmail.com>
latest: '0'
description-type: markdown
description: ! 'This package provides efficient alternating sequences based on

  finger trees. These can represent sequences made up of two types of

  element, `e` and `a`  where two of the same type of element cannot

  follow each other directly.


  Four different flavours are provided, isomorphic to `([(a, e)], a)`,

  `([(e, a)], e)`, `[(a, e)]`, and `[(e, a)]`.


  Cons-like operations are *O(1)* amortised, and append operations are

  *O(log(min(n, m)))* amortised.


  For more details, please see the Haddock documentation of

  Q4C12.TwoFinger.

'
license-name: BSD2
