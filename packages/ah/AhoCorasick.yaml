homepage: http://github.com/lymar/AhoCorasick
changelog-type: ''
hash: 087df2bdfd63c4f2b0303e77975d9c4a68bff2ed83ac23b8c7e339d2e2f2a34d
test-bench-deps: {}
maintainer: Sergey S Lymar <sergey.lymar@gmail.com>
synopsis: Aho-Corasick string matching algorithm
changelog: ''
basic-deps:
  base: ==4.*
  unordered-containers: -any
  array: -any
  mtl: -any
  hashable: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
author: Sergey S Lymar <sergey.lymar@gmail.com>
latest: 0.0.3
description-type: markdown
description: ! "# AhoCorasick\n\n[Aho-Corasick](http://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm)
  string matching algorithm.\n\n## Installation\n\n    cabal update\n    cabal install
  AhoCorasick\n\n## Examples\n\n#### Simplest example\n\n```haskell\nexample1 = mapM_
  print $ findAll simpleSM \"ushers\" where\n    simpleSM = makeSimpleStateMachine
  [\"he\",\"she\",\"his\",\"hers\"]\n```\n\n```\nPosition {pIndex = 1, pLength = 3,
  pVal = \"she\"}\nPosition {pIndex = 2, pLength = 2, pVal = \"he\"}\nPosition {pIndex
  = 2, pLength = 4, pVal = \"hers\"}\n```\n\n#### With data\n\n```haskell\nexample2
  = mapM_ print $ findAll sm \"ushers\" where\n    sm = makeStateMachine [(\"he\",0),(\"she\",1),(\"his\",2),(\"hers\",3)]\n```\n\n```\nPosition
  {pIndex = 1, pLength = 3, pVal = 1}\nPosition {pIndex = 2, pLength = 2, pVal = 0}\nPosition
  {pIndex = 2, pLength = 4, pVal = 3}\n```\n\n#### Step-by-step state machine evaluation\n\n```haskell\nexample3
  = mapM_ print $ next sm \"ushers\" where\n    sm = makeSimpleStateMachine [\"he\",\"she\",\"his\",\"hers\"]\n
  \   next _ [] = []\n    next sm (s:n) = let (SMStepRes match nextSM) = stateMachineStep
  sm s in\n        (s, match) : next nextSM n\n```\n\n```\n('u',[])\n('s',[])\n('h',[])\n('e',[(3,\"she\"),(2,\"he\")])\n('r',[])\n('s',[(4,\"hers\")])\n```\n"
license-name: BSD-3-Clause
