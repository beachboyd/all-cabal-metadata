homepage: https://github.com/composewell/bench-graph
changelog-type: markdown
hash: eff4e727ee14c1b8cff0922d682d0d8e9c43d8ed8741e835e66e529cbf6eb07a
test-bench-deps:
  split: ! '>=0.2 && <0.3'
  base: ! '>=4.8 && <5'
  text: ! '>=1.1.1 && <1.3'
  bench-graph: -any
maintainer: harendra.kumar@gmail.com
synopsis: Plot and compare benchmarks
changelog: ! "## 0.1.2\n\n* Fixed a bug that caused missing graphs in some cases when
  multiple iterations\n  of a benchmark are present in the bechmark results file.\n\n*
  Better error reporting to pinpoint errors when a problem occurs.\n\n## 0.1.1\n\n*
  Support GHC 8.4\n\n## 0.1.0\n\n* Initial release\n"
basic-deps:
  Chart: ! '>=1.6 && <2'
  Chart-diagrams: ! '>=1.6 && <2'
  base: ! '>=4.8 && <5'
  filepath: ! '>=1.3 && <1.5'
  csv: ! '>=0.1 && <0.2'
  transformers: ! '>=0.4 && <0.6'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
author: Harendra Kumar
latest: '0.1.2'
description-type: markdown
description: ! '# bench-graph


  An easy to use package to plot the benchmarking results data generated by

  `gauge` or `criterion` (with `--csv` or `--csvraw` options).


  ## Easy and Flexible Charting


  Usually we have a bunch of benchmarks in the benchmark measurement

  code and that is not how we may want to present the results in graph. We may

  want only a subset of the benchmarks and in a different order, with more

  palatable names to present. Maybe we want to plot multiple graphs from the

  results file. `bench-graph` hides the low level charting details but allows

  configuration of high level parameters, specifically:


  * translate the names of the benchmarks before charting

  * filter which benchmarks you want to include on the plot

  * specify the order of benchmarks in the plot

  * specify the scales

  * plot multiple charts from the same measurement file

  * plot comparison (full or difference) between groups of benchmarks


  ## Plot Comparisons


  We can compare the difference in benchmark results of different versions of

  the same package or the difference between similar benchmarks of different

  packages. Comparison between many benchmarks can be shown side by side as full

  results of both, or as the difference from a baseline.


  See the [test

  file](https://github.com/composewell/bench-graph/blob/master/test/Main.hs) for

  a complicated example. Simpler charts can be plotted with just a few lines of

  code. Here is a sample plot from the data in [test/results.csv

  ](https://github.com/composewell/bench-graph/blob/master/test/results.csv),

  showing the time taken by three packages:


  [![Full comparison time](https://github.com/composewell/bench-graph/blob/master/sample-charts/csvraw-time-full.svg)](https://github.com/composewell/bench-graph/blob/master/sample-charts/csvraw-time-full.svg)


  Here is a plot of the same data but this time showing full time for the first

  package and the difference in time (i.e. the excess time taken) for the other

  two packages.


  [![Delta comparison time](https://github.com/composewell/bench-graph/blob/master/sample-charts/csvraw-time-delta.svg)](https://github.com/composewell/bench-graph/blob/master/sample-charts/csvraw-time-delta.svg)


  Just use `stack test` in this package and see all the charts generated in the

  `charts` directory.


  ## Plot Performance Regressions


  See the [streamly](https://github.com/composewell/streamly) repo for an example

  script using `bench-graph` to automatically plot perforformance changes across

  commits. In the repo if you run this command:


  ```

  $ ./bench.sh --help # prints help

  $ ./bench.sh --compare --base HEAD^

  ```


  It generates a comparative graph of benchmark changes from the previous commit

  to the HEAD commit. The generated graph looks like this, the negative delta

  means there is performance improvement:


  [![Delta comparison time](https://github.com/composewell/bench-graph/blob/master/sample-charts/composition-scaling.svg)](https://github.com/composewell/bench-graph/blob/master/sample-charts/composition-scaling.svg)


  The `bench-graph` code for this can be found

  [here](https://github.com/composewell/streamly/blob/master/benchmark/ChartLinear.hs).


  The shell script functionality may be included in the `bench-graph` itself in

  future.


  ## Plot Any Fields


  Any of the fields available in `gauge`/`criterion` output can be plotted, for

  example:


  * time

  * cycles

  * total allocations (allocated)

  * bytes copied during GC (bytesCopied)

  * CPU time taken by the mutator i.e. other than GC (mutatorCpuSeconds)

  * CPU time taken by the garbage collector (gcCpuSeconds)


  ## Contributions and Feedback


  Contributions are welcome! This is just an early draft of the package, with

  maybe lots of bugs and lack of required functionality, any feedback on

  improvements is welcome. Please raise an issue for anything you want to suggest

  or discuss.

'
license-name: BSD3
