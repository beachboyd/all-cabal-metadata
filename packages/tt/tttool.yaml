homepage: https://github.com/entropia/tip-toi-reveng
changelog-type: markdown
hash: f01d4d81ac45b425d7dc8f640107057881ed270356828a6699d3b097a9ddf7e6
test-bench-deps: {}
maintainer: mail@joachim-breitner.de
synopsis: Working with files for the Tiptoi® pen
changelog: |
  # Changelog for tttool

  ## 1.8.1 (2019-03-30)

   * The SVG patterns created with `./tttool oid-code` and `./tttool oid-codes`
     now have `id`s that are valid (no spaces).
   * The release tarball now contains a binary for Linux as well.
   * The release tarball now contains a copy of [The tttool book](http://tttool.readthedocs.io/de/latest/)

  ## 1.8 (2018-02-06)

   * If the script for an oid code contains only one line, one can simply write

          house: P(welcome)

     instead of

          house:
           - P(welcome)
   * `./tttool oid-table` aligns images on pixel boundaries, so that a naive
     rastering of the whole page still yields crisp pixels.
     Thanks to @m7thon for the patch!
   * The PDF output uses PDF patterns for much smaller PDF files.
   * The commands `./tttool oid-code` and `./tttool oid-table` can now also
     produce SVG output with SVG patterns:

     `--image-format SVG` produces SVG with vector squares
     for the pixels, wihle `--image-format SVG+PNG` produces SVG with a small,
     repeated pixel graphics in the pattern
   * Games are now more likely to be properly round-tripped (GH issue #174)

  ## 1.7 (2017-01-08)

   * `./tttool oid-table` sorts naturally now, so that the sequence is `foo1`
     `foo2` `foo10`, and not `foo1` `foo10` `foo2`.
   * Read and write the language field in the GME header (GH issue #105)

  ## 1.6.1 (2016-04-17)

   * `./tttool assemble`: Do not fail with too many open files
   * Handle “other” play commands (FFE0, FFE1) even if their argument is not 0,
     with some crude syntax in the YAML format. The meaning of this argument is
     not yet understood, volunteers are welcome!

  ## 1.6 (2016-01-31)

   * Completely re-done option parsing, so there now proper support for short and
     long options, arbitrary order of options, better error messages and
     per-command `--help` output.

     **Incompatibility:** Some commands are now called differently. In
     particular, to generate PNG files with all codes from a YAML file, use
     `./tttool oid-codes`, not `./tttool oid-code`.
   * The size of the OID codes written by `./tttool oid-code` is configurable.
   * The png files written by `./tttool oid-code` and `./tttool oid-codes` store
     their DPI value, so that importing them into DTP programs is likely to yield
     the desired result.
   * New command `tttool oid-table` that prints all OIDs of a given YAML file as
     a nice and handy table in a PDF file
   * The output of `./tttool games` is more detailed.
   * Games are not exported by `tttool export` and assembled by `tttool
     assemble`. This way, existing Tiptoi products can be modified without losing
     them.
   * The “other” play commands (FFE0, FFE1, FB00) are implemented in the parser,
     printer and serializer, with syntax `P*(..)`, `PA*(..)` and `PA(..)`. These
     are not interesting to you unless you want to understand existing Tiptoi
     products.
   * Support for the “timer” action (FF00) with syntax `T($register,123)`.
   * `./tttool assemble` will print all errors due to missing audio files, not
     just the first.
   * Fix various crashes in corner cases, mostly involving games. Thanks to
     @ToniMahagoni for reporting these!

  ## 1.5.1 (2015-11-11)

   * Do not assign object IDs >= 15000, as these are not recognized.

  ## 1.5 (2015-10-28)

   * New commands FB00 (alternative play range command), FFE0 (alternative
     play random sample) and FFE1 (alternative play all samples)
   * New pixel formats -d 1200d and -d 600d,w hich double the size of the
     dots.
   * Assign object IDs dependent on project IDs, to avoid overlap.
   * Fix missing support in tttool play for > and <=

  ## 1.4 (2015-04-29)

   * The `tttool play` command is greatly enhanced:
     + Audio samples are actually played (On linux, install `sox`).
     + You can use the name of your scripts instead of the OID codes.
     + The prompt supports a persistent history (press ↑).
     + You can tab-complete your input.
   * `tttool` knows its own version.
   * `tttool assemble` warns if the comment field is too long for the GME file.

  ## 1.3 (2015-03-18)

   * The `tttool play` command now supports jump commands.

  ## 1.2 (2015-03-08)

   * The `language` fields takes arbitrary strings, which will hopefully be
     understood by the text-to-speak engine.

  ## 1.1 (2015-02-15)

   * The yaml files support a `language` field, specifying the default language
     for the text-to-speech feature.
   * The `speak` section of the yaml file can have subsections with differing
     languge settings, to allow multi-language files.
   * The text-to-speech feature will use either pico2wave or espeak, depending on
     what is available.
   * The windows release zipfile now comes with espeak and oggenc, so Windows users
     can use text-to-speech out of the box.

  ## 1.0 (2015-01-29)

   * Last release without a changelog
basic-deps:
  blaze-svg: ==0.3.*
  JuicyPixels: ! '>=3.2.5 && <3.4'
  bytestring: ! '>=0.10.4 && <0.11'
  spool: ==0.1.*
  HPDF: ! '>=1.4.10 && <1.5'
  haskeline: ==0.7.*
  split: ==0.2.*
  base: ! '>=4.11 && <4.13'
  time: ! '>=1.5 && <1.9'
  base64-bytestring: ==1.0.*
  text: ==1.2.*
  executable-path: ==0.0.*
  filepath: ==1.3.* || ==1.4.*
  process: ! '>=1.1 && <1.7'
  parsec: ==3.1.*
  natural-sort: ! '>=0.1 && <0.2'
  containers: ! '>=0.4 && <0.7'
  binary: ! '>=0.5 && <0.9'
  zlib: ! '>=0.5 && <0.7'
  mtl: ==2.2.*
  hashable: ==1.2.*
  optparse-applicative: ! '>=0.13 && <0.15'
  random: ! '>=1.0 && <1.2'
  aeson: ! '>=0.7 && <1.5'
  template-haskell: ! '>=2.7 && <2.15'
  yaml: ! '>=0.8 && <0.12'
  vector: ! '>=0.10 && <0.13'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1'
- '1.0'
- '1.1'
- '1.3'
- '1.4'
- 1.4.0.1
- 1.4.0.2
- 1.4.0.3
- 1.4.0.4
- 1.4.0.5
- '1.5'
- 1.5.0.1
- 1.5.1
- '1.6'
- 1.6.0.1
- 1.6.1
- 1.6.1.1
- 1.6.1.2
- 1.6.1.3
- 1.6.1.4
- 1.7.0.1
- 1.7.0.2
- 1.7.0.3
- '1.8'
- 1.8.1
author: Joachim Breitner
latest: 1.8.1
description-type: markdown
description: "Das tttool hat jetzt eine deutsche Webseite für Anwender: http://tttool.entropia.de/\n\ntip-toi-reveng\n==============\n\nThe
  goal of this project is to understand the file and paper format for the\nRavensburger
  TipToi pen. The ultimate goal is that everyone can create their\nown books, with
  their own sounds.\n\nThe current status is that we understood most of the file format
  (see the\n[GME file format specification](GME-Format.md)). We provide a tool that
  allows\nyou to dissect these files.\n\nThe tool can also be used to generate completely
  new files from scratch; see\nbelow for details.\n\nIf you want to learn more please
  have a look into our wiki\n(https://github.com/entropia/tip-toi-reveng/wiki).\n\nThe
  tttool tool\n---------------\n\nUse the tool `tttool` to investigate the gme files
  and build new ones. It\nsupports various subcommands:\n\n    GME creation commands:\n
  \   assemble                 creates a gme file from the given source\n\n    OID
  code creation commands:\n\n    oid-table                creates a PDF file with
  all codes in the yaml file\n    oid-codes                creates PNG files for every
  OID in the yaml file.\n    oid-code                 creates PNG files for each given
  code(s)\n\n    GME analysis commands:\n    info                     Print general
  information about a GME file\n    export                   dumps the file in the
  human-readable yaml format\n    scripts                  prints the decoded scripts
  for each OID\n    script                   prints the decoded scripts for a specific
  OID\n    games                    prints the decoded games\n    lint                     checks
  for errors in the file or in this program\n    segments                 lists all
  known parts of the file, with description.\n    segment                  prints
  the decoded scripts for a specific OID\n    explain                  print a hexdump
  of a GME file with descriptions\n    holes                    lists all unknown
  parts of the file.\n    rewrite                  parses the file and writes it again
  (for debugging)\n\n    GME extraction commands:\n    media                    dumps
  all audio samples\n    binaries                 dumps all binaries\n\n    Simulation
  commands:\n    play                     interactively play a GME file\n\nRun\n\n
  \   ./tttool --help\n\nto learn about global options (e.g. DPI settings), and\n\n
  \   ./tttool command --help\n\nfor the options of the individual command.\n\nInstallation\n------------\n\nWe
  release `tttool` for Windows and Linux users as a zipfile. You can find them\nin
  the [releases section](https://github.com/entropia/tip-toi-reveng/releases)\nof
  the GitHub project.\n\nSee `Building.md` for instructions on how to build `tttool`
  from source.\n\nBuilding your own gme files\n---------------------------\n\nOnce
  you have installed `tttool`, you can create your own `.gme` files. The\nprocess
  is as follows\n\n 1. Record the audio samples you want to include, as Ogg Vorbis
  files, mono, 22050Hz. I use\n\n        arecord -r 22050 foo.wav\n        oggenc
  foo.wav\n        rm foo.wav\n\n 2. Write a `my-book.yaml` file containing some general
  information, and especially\n    the scripts (i.e. what to do) for each OIDs (i.e.
  the various fields of a\n    book). You can use the [example.yaml](example.yaml)
  file as a starting\n    point; it contains more information in its comments.\n\n
  3. Run `./tttool assemble my-book.yaml`, and make sure it reports no error, i.e.\n
  \   finishes silently.\n\n 4. Copy the now generated `my-book.gme` to your TipToi
  pen and enjoy!\n\nIf you need to find out what OID code corresponds to what part
  of the book, you\ncan generate a debug gme using the `debug.yaml` file, adjusting
  its\n`Product-Id` to your product’s id, building it with `./tttool assemble\ndebug.yaml`
  and loading the resulting `debug.gme` on your pen.  It will then\nread out the codes,
  as a sequence of english digits.\n\nIf you want to convert existing audio files
  of almost any format, and you have\n`ffmpeg` installed, you can use \n\n    ffmpeg
  -i input-audio-in-some.fmt -ar 22050 -ac 1 foo.ogg\n\nText to speech\n--------------\n\nIf
  you have `libttspico-utils` and `vorbis-tools installed`, you can have tttool\ngenerate
  audio files from text for you, which makes developing your yaml file\nmuch easier.
  See [text2speech.yaml](text2speech.yaml) for more information.\n\nPrinting your
  own books\n-----------------------\n\nWith the code in this repository, you can
  create GME files. This is even more\nfun if you can also create your own books!
  „Pronwan“ found out how that works,\nas you can see in [this video demonstration](http://youtu.be/KC97F4PfNhk).
  He\nalso published 30 minute [video tutorial](http://youtu.be/4AjvjFM8GzM) (in\nGerman).\n\nPress
  Review\n------------\n\n * [tiptoi hacking](https://blogs.fsfe.org/guido/2014/05/tiptoi-hacking-und-systemanforderungen/)
  by Guido Arnold\n * [TipToi Hacking](http://www.nerd.junetz.de/blogbox/index.php?/archives/1377-TipToi-Hacking.html)
  and [TipToi Hacking II](http://www.nerd.junetz.de/blogbox/index.php?/archives/1378-TipToi-Hacking-II.html)
  by Mr. Blog\n * [Various posts](https://www.joachim-breitner.de/blog/tag/Tiptoi)
  by Joachim “nomeata” Breitner (the main author of `tttool`)\n * [Self-made animal
  figures](https://www.youtube.com/watch?v=Yic57Y9VORA&app=desktop) demonstration
  video\n\nTODO\n----\n\n * What are all the header fields? (See [wip/Header.md](wip/Header.md))\n
  * Finish decoding the games. (See [wip/games.txt](wip/games.txt))\n * What is the
  purpose of the additional script table?\n\nOther resources in this repository\n----------------------------------\n\n
  * [`oid-decoder.html`](http://htmlpreview.github.io/?https://github.com/entropia/tip-toi-reveng/blob/master/oid-decoder.html)
  allows you to manually decode an OID image.\n * `scripts/update.sh` downloads all
  gme files from the Ravensburger server (requires perl and the [XML::Simple](http://search.cpan.org/~grantm/XML-Simple/)
  module).\n\n   Instead of downloading all of them, you can conveniently browse them
  at <http://tiptoi.vakat.de/>, a service provided by Falko Oldenburg <tiptoi@vakat.de>.\n
  * `gameanalyse.c` and `libtiptoi.c` is an alternative tool to investigate gme\n
  \  files. It can also [replace audio files in gme files](Audio/README.md);\n   compile
  and run it for diagnostic output.\n * `Audio/` contains some audio files, such as
  digits read out.\n * `docs/` collects information about TipToi found elsewhere.\n
  * `wip/` (work in progess) contains notes about the parts of the gme files that
  are not\n   fully understood yet.\n * `perl-tools` contains a perl based script,
  to generate a PDF with all OID codes from a yaml-file as well some functions to
  generate PNG-files, inject pHYs-chunks with resolution hints into GD generated PNG
  files as result from some testing\n\n"
license-name: MIT
