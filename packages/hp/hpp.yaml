homepage: https://github.com/acowley/hpp
changelog-type: markdown
hash: a26caf03eab9eb87ada8efedd6162a909bb4d6346ff81580abeb6bb5c6b2da74
test-bench-deps:
  bytestring: -any
  base: -any
  hpp: -any
  transformers: -any
maintainer: acowley@gmail.com
synopsis: A Haskell pre-processor
changelog: ! "# 0.5.0\n- Redesigned library API\nThe `Hpp` module exports the main
  pieces. `Hpp.Env`, `Hpp.Types`, and `Hpp.Config` may be used for configuring the
  preprocessor.\n\n# 0.4.0\n\n- Simplify the parsing machinery\n- Don't remove C++-style
  single-line comments\n- Don't error on unknown cpp directives\n  Previously, a line
  beginning with \"#-}\" would cause an error\n- Don't do trigraph replacement by
  default.\n  Haskell allows \"??\" in operator names and you can be sure `lens` uses
  it!\n\n# 0.3.1\n\nAddress a change wherein GHC 8 will pass `-include` arguments
  without a space between \"-include\" and the file to be included.\n\n# 0.3\n\nSwitch
  to a stream processing model.\n\nThis library is designed to have minimal dependencies,
  so we now have\na bespoke implementation of a cross between the pipes and machines\nlibraries
  included.\n\nThis change was done to make some parsing\noperations easier, believe
  it or not. For example, most pre-processing\nis done on a line-by-line basis, but
  we must also support macro\nfunction applications that cross line boundaries. Thus
  the expansion\nlogic can not merely be given one line at a time from an input\nfile.
  Previously, a heuristic tried to combine consecutive lines\nbefore the parsing stage.
  Now, the parser itself is able to pull\ntokens in across lines when necessary.\n\nTL;DR:
  The upshot is that processing `/usr/include/stdio.h` on OS X (a\nsurprisingly complicated
  file!)  now uses 78% of the time and 0.38%\nthe memory of previous versions of `hpp`.\n\n#
  0.1\n\nFirst release!\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <4.12'
  time: ! '>=1.5'
  bytestring-trie: -any
  filepath: -any
  ghc-prim: -any
  hpp: -any
  transformers: ! '>=0.4'
  directory: -any
all-versions:
- '0.1.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.0.1'
author: Anthony Cowley
latest: '0.5.0.1'
description-type: markdown
description: ! "# The `hpp` Executable\n`hpp` is a Haskell pre-processor that is also
  a C90-compatible\npre-processor (with the addition of a `--cpp` flag). It is\npackaged
  as both a library and an executable.\n\nTo use as a Haskell preprocessor for resolving
  `#ifdef` conditionals\nand macro expansion, an invocation might look like,\n\n```\nhpp
  -DDEBUG Foo.hs\n```\n\nTo use as a C preprocessor, an invocation might look like,\n\n```\nhpp
  -DDEBUG --cpp foo.c\n```\n\nTo have GHC use `hpp` as the C pre-processor, add this
  line to the top\nof a Haskell source file that makes use of the `CPP` `LANGUAGE`\npragma,\n\n```\n{-#
  OPTIONS_GHC -cpp -pgmPhpp #-}\n```\n\nOr add this line to your `.cabal` file:\n\n```\nghc-options:
  -pgmPhpp\n```\n\nNote that you will need to ensure that the `hpp` executable is
  available in your build environment (e.g. you can add `hpp` as a `build-depends`
  in your `.cabal` file).\n\n# The `hpp` Library\n\nThe `hpp` executable is a command-line
  interface to the `hpp` library. While the `hpp` package has been designed to have
  minimal dependencies beyond what the `GHC` compiler itself uses, it does include
  a few small, framework-free unit tests that demonstrate basic usage as a library.
  In the `testIf` example, we preprocess the `sourceIfdef` input with a starting definition
  equivalent to `#define FOO 1`. In `testArith1`, we exercise basic integer arithmetic
  and comparison. The `hppHelper` function shows how to run your source input through
  the preprocessor: `runHpp initialState (preproces mySource)`.\n\n```haskell\n{-#
  LANGUAGE LambdaCase, OverloadedStrings #-}\nimport Control.Monad.Trans.Except\nimport
  Data.ByteString.Char8 (ByteString)\nimport Data.Maybe (fromMaybe)\nimport Data.Monoid
  ((<>))\nimport Hpp\nimport System.Exit\n\nsourceIfdef :: [ByteString]\nsourceIfdef
  = [ \"#ifdef FOO\"\n              , \"x = 42\"\n              , \"#else\"\n              ,
  \"x = 99\"\n              , \"#endif\" ]\n\nsourceArith1 :: ByteString -> [ByteString]\nsourceArith1
  s = [ \"#define x 3\"\n                 , \"#if 5 + x > \" <> s\n                 ,
  \"yay\"\n                 , \"#else\"\n                 , \"boo\"\n                 ,
  \"#endif\" ]\n\nhppHelper :: HppState -> [ByteString] -> [ByteString] -> IO Bool\nhppHelper
  st src expected = runExceptT (runHpp st (preprocess src)) >>= \\case\n  Left e ->
  putStrLn (\"Error running hpp: \" ++ show e) >> return False\n  Right (res, _) ->
  if hppOutput res == expected\n                       then return True\n                       else
  do putStr (\"Expected \"++show expected++\", got\")\n                               print
  (hppOutput res)\n                               return False\n\ntestElse :: IO Bool\ntestElse
  = hppHelper emptyHppState sourceIfdef [\"x = 99\\n\",\"\\n\"]\n\ntestIf :: IO Bool\ntestIf
  = hppHelper (fromMaybe (error \"Preprocessor definition did not parse\")\n                              (addDefinition
  \"FOO\" \"1\" emptyHppState))\n                   sourceIfdef\n                   [\"x
  = 42\\n\",\"\\n\"]\n\ntestArith1 :: IO Bool\ntestArith1 = (&&) <$> hppHelper emptyHppState
  (sourceArith1 \"7\") [\"yay\\n\",\"\\n\"]\n                  <*> hppHelper emptyHppState
  (sourceArith1 \"8\") [\"boo\\n\",\"\\n\"]\n\nmain :: IO ()\nmain = do results <-
  sequenceA [testElse, testIf, testArith1]\n          if and results then exitWith
  ExitSuccess else exitWith (ExitFailure 1)\n```\n"
license-name: BSD3
