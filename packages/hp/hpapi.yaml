homepage: ''
changelog-type: ''
hash: e94240d24eabbcc0cf22dfac3ee2dcb8ae61a3e02867397cfd8ea0d6d4e48353
test-bench-deps: {}
maintainer: Michael D. Adams <adamsmd [AT] cs.indiana.edu>
synopsis: Binding for the PAPI library
changelog: ''
basic-deps:
  base: -any
all-versions:
- 0.0.1.0
author: Michael D. Adams <adamsmd [AT] cs.indiana.edu>
latest: 0.0.1.0
description-type: text
description: ! "This is version 0.0.1.0 of hpapi.  It provides a Haskell binding\nfor
  the Performance API (PAPI) library, <http://icl.cs.utk.edu/papi/>.\n\nIt is an early
  alpha release and the interface may change\nbut for basic use of the High Level
  interface it should be fully functional.\n\nThe latest version can be downloaded
  from:\n  http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hpapi\n\nThe
  source repository is at:\n  http://code.haskell.org/hpapi/\n\nPlease report any
  bugs to <adamsmd [AT] cs.indiana.edu>.\n\nInstallation\n============\nThis package
  requires the PAPI C library and kernel modules\nto be installed before you get started.\n\nBut
  the binding itself uses a standard Cabal building system\nso it can be simply installed
  with:\n\n  runhaskell Setup.hs configure\n  runhaskell Setup.hs build\n  runhaskell
  Setup.hs install\n\nThe last command may need to be run as root.\n\nUsage\n=====\nThe
  basic use of this library is demonstrated by the following example.\n\n  main =
  do\n    [l1,tlb,fp] <- withCounters [papi_l1_dcm, papi_tlb_dm, papi_fp_ins]\n                     ioOperationToMeasure\n
  \   print (l1, tlb, fp)\n\nDocumentation\n=============\nDocumentation is minimal
  at the moment.  In the mean time,\nthe original PAPI library documentation may prove
  useful.\n\nFuture Directions\n=================\n - The following \"advanced\" features
  of PAPI have been left\n   out in this first release:\n    - Multiplexing\n    -
  Threads\n    - Locks\n    - Overflow\n    - Statistical Profiling\n\n - Separate
  GC and mutator counters\n\n - Integration with GHC's built-in PAPI\n\n - Improved
  documentation.\n\n - Depending on feedback, modules may get reorganized\n\n - Better
  handling of errors from the PAPI library\n   (currently they just throw IO errors)\n\n
  - The PAPI C library is inconsistent on whether EventCode\n   is a signed int or
  an unsigned int.\n   This causes minor issues to be fixed.\n\nComparison with GHC's
  built-in PAPI\n===================================\nGHC supports a built-in version
  of PAPI\n(see http://hackage.haskell.org/trac/ghc/wiki/PAPI).\nThis system is different
  in a few ways.\n\nFirst, hpapi allows you to measure specific parts of a program\nwhile
  GHCI's PAPI only does whole program measurement\n\nSecond, since hpapi is a library
  you can have fine grained\nand sophisticated control over how things are measured.\nOn
  the other hand GHC's PAPI as part of the RTS gives you less\ncontrol, but on the
  plus side doesn't require any modification\nto the program.\n\nFinally, GHC's PAPI
  splits apart the counts that come from\nthe garbage collector from those that come
  from the mutator,\nwhile hpapi combines them.  This is a limitation of hpapi\nwe
  hope to correct some time in the future.\n\nIt remains to be seen whether it would
  be worth while\nto unify these two systems.\n\nAcknowledgments\n===============\nSupported,
  in part, by the National Science Foundation\nunder grant number CCF-0541364.\n"
license-name: BSD-3-Clause
