homepage: https://github.com/blockscope/hpack-dhall#readme
changelog-type: markdown
hash: a7043d40e007de9a84b3a8ed5831feeca05c973ae4a1bb8bfa07b1dc87437b2a
test-bench-deps:
  bytestring: -any
  Cabal: -any
  base: -any
  tasty-golden: -any
  dhall: ! '>=1.18.0'
  Diff: -any
  aeson-pretty: -any
  text: -any
  megaparsec: ! '>=7.0.1'
  filepath: -any
  utf8-string: -any
  dhall-json: ! '>=1.2.4'
  prettyprinter: -any
  transformers: -any
  tasty: -any
  microlens: -any
  aeson: -any
  yaml: -any
  hpack: ! '>=0.31.0'
  directory: -any
maintainer: Phil de Joux <phil.dejoux@blockscope.com>
synopsis: hpack's dhalling
changelog: ! 'The [latest version](https://github.com/blockscope/hpack-dhall/blob/master/changelog.md)
  of this changelog.


  ## 0.5.1 - Sorted Fields Pretty Printing

  * Regenerate golden files for the bump in hpack''s version:


  ```

  ---- This file has been generated from package.yaml by hpack version 0.31.0.

  ++-- This file has been generated from package.yaml by hpack version 0.31.1.

  ```


  ## 0.5.0 - Sorted Fields Pretty Printing

  * Sort fields when pretty printing JSON and YAML.

  * Add real world golden tests, using stack and hpack packages.


  ## 0.4.0 - Split Executables

  * Add licence and copyright.

  * Rename hpack-dhall to dhall-hpack-cabal.

  * Add dhall-hpack-* executables for showing dhall, json and yaml.

'
basic-deps:
  bytestring: -any
  base: ==4.*
  dhall: ! '>=1.18.0'
  aeson-pretty: -any
  text: -any
  megaparsec: ! '>=7.0.1'
  filepath: -any
  hpack-dhall: -any
  dhall-json: ! '>=1.2.4'
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  microlens: -any
  aeson: -any
  yaml: -any
  hpack: ! '>=0.31.0'
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
author: ''
latest: 0.5.1
description-type: markdown
description: ! "# hpack-dhall\n\n[![Build Status](https://travis-ci.org/BlockScope/hpack-dhall.svg)](https://travis-ci.org/BlockScope/hpack-dhall)\n[![hackage
  release](https://img.shields.io/hackage/v/hpack-dhall.svg?label=hackage)](http://hackage.haskell.org/package/hpack-dhall)\n[![Dependencies
  of latest version on Hackage](https://img.shields.io/hackage-deps/v/hpack-dhall.svg)](https://hackage.haskell.org/package/hpack-dhall)\n\n**H**askell
  **pack**age descriptions in [**Dhall**](https://github.com/dhall-lang/dhall-lang).\n\nThis
  package named `hpack-dhall` as described in\n[`package.dhall`](https://github.com/sol/hpack-dhall/blob/master/package.dhall).\n\n```\n{
  name =\n    \"hpack-dhall\"\n...\n, library =\n    { exposed-modules = \"Hpack.Dhall\"
  }\n, executables =\n    { dhall-hpack-cabal = ...\n    , dhall-hpack-json = ...\n
  \   , dhall-hpack-yaml = ...\n    , dhall-hpack-dhall = ...\n    }\n}\n```\n\nThis
  `.cabal` creating executable can be run over its own package description;\n\n```\n>
  stack install --stack-yaml=stack-8.4.4.yaml\n...\nCopied executables to /.../hpack-dhall/__bin:\n-
  dhall-hpack-cabal\n- dhall-hpack-dhall\n- dhall-hpack-json\n- dhall-hpack-yaml\n\n>
  __bin/dhall-hpack-cabal package.dhall\nhpack-dhall.cabal is up-to-date\n\n> __bin/dhall-hpack-cabal
  --force package.dhall\ngenerated hpack-dhall.cabal\n```\n\nUsing one of the golden
  tests for example, there are executables to show the\ndhall with the imports made
  as well as json and yaml equivalents;\n```\n> __bin/dhall-hpack-dhall test/golden/hpack-dhall-cabal/empty-package.dhall\n{
  name = \"empty-package\" }\n\n> __bin/dhall-hpack-json test/golden/hpack-dhall-cabal/empty-package.dhall\n{\n
  \   \"name\": \"empty-package\"\n}\n\n> __bin/dhall-hpack-yaml test/golden/hpack-dhall-cabal/empty-package.dhall\nname:
  empty-package\n```\n\nBy going from [hpack package\nfields](https://github.com/sol/hpack#top-level-fields)
  to [cabal package\nproperties](https://www.haskell.org/cabal/users-guide/developing-packages.html#package-properties),\nwe
  are not required to state what can be inferred or defaulted, easing the\nburden
  of completing a package description by hand.  For example\n`other-modules` can be
  inferred by taking the set difference between modules on\ndisk and the set of `exposed-modules`.\n\nBy
  using an hpack-like Dhall dialect here rather than the\n[YAML](https://en.wikipedia.org/wiki/YAML)
  of hpack we're able to;\n\n* Add types to the fields.\n* Safely import from other
  `*.dhall` files.\n* Use functions.\n\n## Imports and Functions\n\nWith this safer
  and more capable alternative input format for hpack, we're able\nto simply describe
  the package and by using imports and functions we can do\nmore such as configuring
  linting;\n\n```\n> cat default-extensions.dhall\n{ default-extensions =\n    [ \"DataKinds\"\n
  \   , \"DeriveFunctor\"\n    ...\n    , \"TupleSections\"\n    , \"UndecidableInstances\"\n
  \   ]\n}\n\n> cat hlint.dhall\n    let Prelude/List/map =\n          https://raw.githubusercontent.com/dhall-lang/Prelude/35deff0d41f2bf86c42089c6ca16665537f54d75/List/map\n\nin
  \ let defs = ./default-extensions.dhall\n\nin  let f = λ(s : Text) → \"-X\" ++ s\n\nin
  \ { arguments = Prelude/List/map Text Text f defs.default-extensions }\n\n> dhall-to-yaml
  < ./hlint.dhall > ./.hlint.yaml\n\n> cat .hlint.yaml\narguments:\n- -XDataKinds\n-
  -XDeriveFunctor\n...\n- -XTupleSections\n- -XUndecidableInstances\n```\n\nWe can
  pull those same `default-extensions` into a package description;\n\n```\n> cat package.dhall\n
  \   let defs = ./defaults.dhall\n\nin    defs\n    ⫽ ./default-extensions.dhall\n
  \   ⫽ { name =\n          \"flight-units\"\n    ...\n      , github =\n          \"blockscope/flare-timing/units\"\n
  \   ...\n      , dependencies =\n            defs.dependencies\n          # [ \"numbers\"\n
  \           , \"fixed\"\n            , \"bifunctors\"\n            , \"text\"\n
  \           , \"formatting\"\n            , \"uom-plugin\"\n            , \"siggy-chardust\"\n
  \           ]\n    ...\n      }\n```\n\n## Formatting\n\nWe can consistently format
  `package.dhall` and other `*.dhall` imports using\n`dhall`;\n\n```\n> stack install
  dhall --stack-yaml=stack-dhall.yaml\n> __bin/dhall format --inplace package.dhall\n```\n\n##
  Restrictions\n\nUsing hpack's [conditionals](https://github.com/sol/hpack#conditionals)
  in\na list in `package.dhall` can cause an error because lists in Dhall must have\nelements
  of the same type;\n\nFrom stack's `package.yaml`;\n```\nexecutables:\n  stack:\n
  \   main: Main.hs\n    source-dirs: src/main\n    generated-other-modules:\n    -
  Build_stack\n    - Paths_stack\n    ghc-options:\n    - -threaded\n    - -rtsopts\n
  \   dependencies:\n    - stack\n    when:\n    - condition: flag(static)\n      ld-options:\n
  \     - -static\n      - -pthread\n    - condition: ! '!(flag(disable-git-info))'\n
  \     cpp-options: -DUSE_GIT_INFO\n      dependencies:\n      - githash\n      -
  optparse-simple\n    - condition: flag(hide-dependency-versions)\n      cpp-options:
  -DHIDE_DEP_VERSIONS\n    - condition: flag(supported-build)\n      cpp-options:
  -DSUPPORTED_BUILD\n```\n\nThis can be represented in `package.dhall` as;\n```\n,
  executables =\n    { stack =\n        { main =\n            \"Main.hs\"\n        ,
  source-dirs =\n            [ \"src/main\" ]\n        , generated-other-modules =\n
  \           [ \"Build_stack\", \"Paths_stack\" ]\n        , ghc-options =\n            [
  \"-threaded\", \"-rtsopts\" ]\n        , dependencies =\n            [ \"stack\"
  ]\n        , when =\n            [ { condition =\n                  \"flag(static)\"\n
  \             , cpp-options =\n                  [] : List Text\n              ,
  dependencies =\n                  [] : List Text\n              , ld-options =\n
  \                 [ \"-static\", \"-pthread\" ]\n              }\n            ,
  { condition =\n                  \"!(flag(disable-git-info))\"\n              ,
  cpp-options =\n                  [ \"-DUSE_GIT_INFO\" ]\n              , dependencies
  =\n                  [ \"githash\", \"optparse-simple\" ]\n              , ld-options
  =\n                  [] : List Text\n              }\n            , { condition
  =\n                  \"flag(hide-dependency-versions)\"\n              , cpp-options
  =\n                  [ \"-DHIDE_DEP_VERSIONS\" ]\n              , dependencies =\n
  \                 [] : List Text\n              , ld-options =\n                  []
  : List Text\n              }\n            , { condition =\n                  \"flag(supported-build)\"\n
  \             , cpp-options =\n                  [ \"-DSUPPORTED_BUILD\" ]\n              ,
  dependencies =\n                  [] : List Text\n              , ld-options =\n
  \                 [] : List Text\n              }\n            ]\n        }\n    }\n```\n\n###
  Continuous Integration\n\nWith haskell-ci tooling installed, generate the `.travis.yml`
  setup with;\n```\n> make-travis-yml --output=.travis.yml --config=cabal.haskell-ci
  hpack-dhall.cabal\n*INFO* Generating Travis-CI config for testing for GHC versions:
  8.4.3 8.4.4 8.6.1 8.6.2\n```\n"
license-name: BSD-3-Clause
