homepage: https://github.com/guillaume-nargeot/hpc-coveralls
changelog-type: markdown
hash: 679f002e0103978dcdc1a4d7e1622964f258a42688435be04a65e2f7f1cd696a
test-bench-deps:
  base: -any
  HUnit: -any
  hpc-coveralls: -any
maintainer: Guillaume Nargeot <guillaume+hackage@nargeot.com>
synopsis: Coveralls.io support for Haskell.
changelog: ! '[1.0.10](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.10+is:closed)

  ------

  * Allow building with GHC 8.2 (issue #68)


  [1.0.9](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.9+is:closed)

  -----

  * Allow aeson 1.2 (issue #67)


  [1.0.8](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.8+is:closed)

  -----

  * Allow directory 1.3 (issue #66)


  [1.0.7](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.7+is:closed)

  -----

  * Allow aeson 1.1 (issue #65)


  [1.0.6](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.6+is:closed)

  -----

  * List Paths_hpc_coveralls in other-modules (issue #59)

  * Upload sdist output to transfer.sh as part of Travis build in order to simplify
  releases


  [1.0.5](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.5+is:closed)

  -----

  * Allow aeson 1.0 (issue #60)


  [1.0.4](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.4+is:closed)

  -----

  * Fix dependencies to allow aeson 0.11 (issue #58)


  [1.0.3](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.3+is:closed)

  -----

  * Add upper bounds to fix issue related to retry-0.7 (issue #55)


  [1.0.2](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.2+is:closed)

  -----

  * Fix output of --numeric-version command line option (issue #53)


  [1.0.1](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.1+is:closed)

  -----

  * Relax transformers dependency lower bound (issue #50)


  [1.0.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v1.0.0+is:closed)

  -----

  * Add support for cabal 1.22 / ghc 7.10 (issue #44)

  * Add --service-name option to support Travis-pro (issue #49)


  [0.9.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.9.0+is:closed)

  -----

  * Fix instructions and target hpc data directory for Cabal 1.22 / GHC 7.10 (issue
  #38)

  * Print hpc coverage data directory tree when failing to read tix file (issue #39)

  * Improve handling of coveralls response reading/parsing (issue #41)

  * Send "source digest" instead of "source" (issue #43)

  * Add --curl-verbose flag to enable curl verbose mode and replace --print-response
  (issue #42)


  [0.8.3](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.8.3+is:closed)

  -----

  * Send git repository info when using other CI services than Travis (issue #37)


  [0.8.2](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.8.2+is:closed)

  -----

  * Add option to send repo token (issue #36)


  [0.8.1](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.8.1+is:closed)

  -----

  * Include additional test modules in package generated by sdist (issue #34)


  [0.8.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.8.0+is:closed)

  -----

  * Introduce retry policy to http requests (issue #31)

  * Fix coverage result reading (issue #32)


  [0.7.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?q=milestone:v0.7.0+is:closed)

  -----

  * Fix coverage conversion rule for otherwise (issue #20)


  [0.6.1](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=8&state=closed)

  -----

  * Safer implementation of the result coverage value retrieval from coveralls.io
  (issue #25)

  * Set the delay before retrieving the result to 10 seconds (issue #26)


  [0.6.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=7&state=closed)

  -----

  * Add flag to print the raw json responses from coveralls.io (issue #24)

  * Retrieve and display total coverage result on success response from coveralls.io
  (issue #21)


  [0.5.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=6&state=closed)

  -----

  * Mark `otherwise` as fully covered (issue #3)


  [0.4.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=5&state=closed)

  -----

  * Add option to configure the coverage data conversion (issue #15)

  * Add option to prevent from sending the coverage report (issue #17)


  [0.3.0](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=4&state=closed)

  -----

  * Support setting multiple test suites (issue #14)

  * Process --exclude-dir value as a string prefix instead of a regex (issue #16)


  [0.2.2](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=3&state=closed)

  -----

  * Prevent double compilation (issue #11)

  * Concurrently process cabal test stdout and stderr channels (issue #12)

  * Test with GHC 7.8.2


  [0.2.1](https://github.com/guillaume-nargeot/hpc-coveralls/issues?milestone=2&state=closed)

  -----

  * Additional CI services support (issue #1)

  * Fixed an issue in which mix files could not be found, @maoe contribution (issue
  #5)

  * Introduced a command line argument to exclude files located under a given folder
  from the coverage report (issue #6)

  * Return with non-zero exit code when the tix file is not found (issue #7)

  * Introduced a command line argument to specify a custom cabal executable name (issue
  #8)

  * Parse and display response from coveralls.io (issue #9)


  0.1.0

  -----

  * Initial release

'
basic-deps:
  bytestring: ==0.10.*
  split: ! '>=0.2.2 && <0.3'
  Cabal: -any
  base: ==4.*
  retry: ! '>=0.5 && <0.8'
  curl: ! '>=1.3.8 && <1.4'
  hpc: ==0.6.*
  process: ! '>=1.1.0.1 && <1.7'
  async: ! '>=2.0'
  pureMD5: ==2.1.*
  containers: ==0.5.*
  directory-tree: ==0.12.*
  regex-posix: -any
  cmdargs: ==0.10.*
  transformers: ! '>=0.4.1 && <0.6'
  aeson: ! '>=0.7.1 && <1.3'
  safe: ==0.3.*
  directory: ! '>=1.2 && <1.4'
all-versions:
- 0.1.0
- 0.1.2
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.7.0
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.9.0
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.10
author: Guillaume Nargeot
latest: 1.0.10
description-type: markdown
description: ! "hpc-coveralls\n=============\n\n[![Build Status](http://img.shields.io/travis/guillaume-nargeot/hpc-coveralls/master.svg)](https://travis-ci.org/guillaume-nargeot/hpc-coveralls)
  [![Gitter chat](http://img.shields.io/badge/gitter-chat--room-brightgreen.svg)](https://gitter.im/guillaume-nargeot/hpc-coveralls)
  [![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)](https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29)
  [![Version on Hackage](https://img.shields.io/hackage/v/hpc-coveralls.svg)](http://hackage.haskell.org/package/hpc-coveralls)
  [![Stories in Progress](https://badge.waffle.io/guillaume-nargeot/hpc-coveralls.svg?label=in%20progress&title=In%20Progress)](https://waffle.io/guillaume-nargeot/hpc-coveralls)\n\nhpc-coveralls
  converts and sends Haskell projects hpc code coverage to [coverall.io](http://coveralls.io/).\n\nAt
  the moment, only [Travis CI](http://travis-ci.org) has been tested, but hpc-coveralls
  should be compatible with other CI services (Check `HpcCoverallsMain` [source](https://github.com/guillaume-nargeot/hpc-coveralls/blob/master/src/HpcCoverallsMain.hs)
  for the list).\n\nhpc-coveralls is still under development and any contributions
  are welcome!\n\n# Usage\n\n## Travis CI\n\nBelow is the simplest example of configuration
  for your project `.travis.yml`:\n```yaml\nlanguage: haskell\nghc: 7.8\nscript:\n
  \ - cabal configure --enable-tests --enable-library-coverage && cabal build && cabal
  test\nafter_script:\n  - cabal install hpc-coveralls\n  - hpc-coveralls [options]
  [test-suite-names]\n```\n\nWhen building with Cabal 1.22 or a newer version, use
  the `--enable-coverage` flag instead of `--enable-library-coverage`.\n\nIf the build
  fails during the test phase with an error message starting by \"hpc:\", just replace
  the `cabal test` command by `run-cabal-test`, as in the following example:\n```yaml\nbefore_install:\n
  \ - cabal install hpc-coveralls\nscript:\n  - cabal configure --enable-tests --enable-library-coverage
  && cabal build\n  - run-cabal-test [options] [cabal-test-options]\nafter_script:\n
  \ - hpc-coveralls [options] [test-suite-names]\n```\n\nThis will prevent the build
  to fail because of hpc related reasons, which are usually not fatal and should not
  affect the coverage data. Details are available in the next section.\n\nYou may
  also experience some issues related to your project dependencies, which can be solved
  by using the `--avoid-reinstalls`/`--force-reinstalls` flags.</br>\nAnother way
  to solve problems related dependencies is to install hpc-coveralls in a sandbox,
  as in the example below:\n```yaml\nafter_script:\n  - cabal sandbox init && cabal
  install hpc-coveralls\n  - .cabal-sandbox/bin/hpc-coveralls [options] [test-suite-names]\n```\n\nFor
  a real world example usage, please refer to [this-project](https://github.com/guillaume-nargeot/project-euler-haskell)
  `.travis.yml` file ([result on coveralls](https://coveralls.io/r/guillaume-nargeot/project-euler-haskell)).<br/>\nOther
  real world examples can be found on this [wiki page](https://github.com/guillaume-nargeot/hpc-coveralls/wiki/List-of-repositories-using-hpc-coveralls)
  which contains a list of GitHub repositories using hpc-coveralls.\n\n## The run-cabal-test
  command\n\nUnder certain conditions related to the project structure and the version
  of hpc, `cabal test` may output an error message and exit with the error code `1`,
  which would result in a build failure.<br/>\n\nTo prevent this from happening, hpc-coveralls
  provides the `run-cabal-test` command which runs `cabal test` and returns with `0`
  if the following regular expression never matches any line of the output:\n\n```perl\n/^Test
  suite .*: FAIL$/\n```\n\nBelow are some of the conditions under which you will likely
  need to use `run-cabal-test`:\n- when using GHC 7.6 (hpc 0.6 known issue)\n- when
  using GHC 7.8 with multiple test suites covering the same module(s) (issue [#18](https://github.com/guillaume-nargeot/hpc-coveralls/issues/18))
  (fixed in GHC 7.10)\n\n### Options\n\nThe `--cabal-name` option can be used to specify
  a custom executable name instead of the default `cabal` when calling `cabal test`.<br/>\nBelow
  is an example which can be useful for projects with a Travis configuration based
  on [multi-ghc-travis](https://github.com/hvr/multi-ghc-travis):\n\n```bash\nrun-cabal-test
  --cabal-name=cabal-1.20\n```\n\n## The hpc-coveralls command\n\nThis command parses
  the hpc generated output, converts its to Coveralls json format and finally sends
  it to coveralls.io over http.<br/>\nMultiple test suites can be specified, in which
  case the coverage report will be made of the merged coverage data generated by the
  specified test suites.<br/>\nFor example, if your test suite are named `test1` and
  `test2`, use the command as follows:\n\n```bash\nhpc-coveralls test1 test2\n```\n\n###
  Options\n\n#### --exclude-dir\n\nThe `--exclude-dir` option allows to exclude source
  files located under a given directory from the coverage report.<br/>\nYou can exclude
  source files located under the `test/` directory by using this option as in the
  following example:\n\n```bash\nhpc-coveralls --exclude-dir=test [test-suite-names]\n```\n\nYou
  can specify multiple excluded folders by using the following example syntax:\n\n```bash\nhpc-coveralls
  --exclude-dir=test1 --exclude-dir=test2 [test-suite-names]\n```\n\n#### --coverage-mode\n\nAs
  Coveralls doesn't support partial-line coverage yet, hpc-coveralls currently converts
  hpc coverage data into line based coverage data, which is the only format supported
  at the moment.\nThe `--coverage-mode` option allows to configure how the coverage
  data is converted into Coveralls format, based on your needs.<br/>\nBelow are the
  two modes currently available, with an explanation of what the hit count values
  mean.\n\n`--coverage-mode=AllowPartialLines` (default):\n- `0` : the line is never
  hit,\n- `1` : the line is partially covered,\n- `2` : the line is fully covered.\n\nNote
  that `AllowPartialLines` conversion mode follows the same convention as the one
  used by [cloverage](https://github.com/lshift/cloverage) coveralls output for Clojure
  projects code coverage.\n\n`--coverage-mode=StrictlyFullLines`:\n- `0` : the line
  is never hit or only partially covered,\n- `1` : the line is fully covered.\n\nPlease
  also note that there is an [open issue](https://github.com/lemurheavy/coveralls-public/issues/216)
  on coveralls issue tracker in order to improve this (add support for partial line
  coverage).\n\n#### --repo-token\n\nThis option allows to specify your repo token
  when sending the report to coveralls.io.\n\n#### --display-report\n\nThis boolean
  option prints the raw json coverage report to be sent to coveralls.io.\n\n#### --dont-send\n\nThis
  boolean option prevents hpc-coveralls from sending the coverage report to coveralls.io.\nThis
  option can be used together with `--display-report` for testing purpose.<br/>\nFor
  example, you can try various combinations of the other options and confirm the difference
  in the resulting report outputs.\n\n#### --curl-verbose\n\nThis boolean option enables
  curl verbose mode and prints the raw json response received after posting the coverage
  report to coveralls.io.\n\n#### --cabal-file\n\nUse this option to specify the cabal
  file of the coverage report target package.\nThis might be required in some cases,
  especially when building with cabal >= 1.22 and ghc >= 7.10, although hpc-coveralls
  assumes the package cabal file to be the unique file of extension \".cabal\" in
  the current directory if it exists.\nFor further details check [this issue](https://github.com/guillaume-nargeot/hpc-coveralls/issues/44).\n\n####
  --service-name\n\nThis option allows you to override the `service_name` value from
  the report sent to coveralls.io.\nYou will have to specify it for example when using
  Travis-pro as in the example below as there is currently no way to programmatically
  determine:\n```bash\n--service-name=travis-pro\n```\n\n# Limitations\n\nBecause
  of the way hpc works, coverage data is only generated for modules that are referenced
  directly or indirectly by the test suites.\nAs a result, the total package coverage
  computed by coveralls may be higher than what it really is.\nAn option will be added
  soon in order to allow specifying source folders to include in the total coverage
  computation.\n\n# Contributing\n\nhpc-coveralls is still under development and any
  contributions are welcome!\n\n[Future Plans and Ideas](https://github.com/guillaume-nargeot/hpc-coveralls/wiki/Future-Plans-and-Ideas)\n\nPlease
  share your comments and suggestions on hpc-coveralls [Gitter channel](https://gitter.im/guillaume-nargeot/hpc-coveralls)!\n\n#
  License\n\nBSD3 ([tl;dr](https://tldrlegal.com/license/bsd-3-clause-license-(revised)))\n\n#
  Notes\n\n- HPC publication: http://ittc.ku.edu/~andygill/papers/Hpc07.pdf\n"
license-name: BSD-3-Clause
