homepage: https://github.com/eckyputrady/hpc-threshold#readme
changelog-type: markdown
hash: e6b933a94fe5a3ac2163acb141038091b366ba704c5539aadf5ac05eebdc0d8f
test-bench-deps:
  base: ! '>=4.7 && <5'
  hpc-threshold: -any
maintainer: eckyputrady@gmail.com
synopsis: Small utility for validating whether HPC result is above defined thresholds
changelog: ! '# Changelog for hpc-threshold


  ## Unreleased changes

'
basic-deps:
  bytestring: -any
  pcre-heavy: -any
  base: ! '>=4.7 && <5'
  hpc-threshold: -any
  interpolate: -any
all-versions:
- '0.1.0.0'
author: Ecky Putrady
latest: '0.1.0.0'
description-type: markdown
description: ! "# hpc-threshold\n\nThis is a small utility for validating whether
  HPC result is above some defined thresholds. This program is meant to be used within
  a CI pipeline, in which the build will fail if the code coverage falls below the
  thresholds.\n\nThe program reads a configuration file named `.hspec-threshold` and
  parse HPC text from stdin. The program outputs a report and will terminate with
  status code 1 if the coverage falls below threshold, and 0 otherwise.\n\n## User
  Guide\n\nInstall the utility by using stack\n\n```\nstack install hpc-threshold\n```\n\nThen,
  create a configuration file named `.hspec-threshold`:\n\n```\n[ Threshold \n    {
  thresholdName = \"Expressions used\"\n    , thresholdRegex = \"(\\\\d+)% expressions
  used\"\n    , thresholdValue = 80.0\n    }\n, Threshold \n    { thresholdName =
  \"Boolean coverage\"\n    , thresholdRegex = \"(\\\\d+)% boolean coverage\"\n    ,
  thresholdValue = 80.0\n    }\n, Threshold \n    { thresholdName = \"Alternatives
  used\"\n    , thresholdRegex = \"(\\\\d+)% alternatives used\"\n    , thresholdValue
  = 80.0\n    }\n, Threshold \n    { thresholdName = \"Local declarations used\"\n
  \   , thresholdRegex = \"(\\\\d+)% local declarations used\"\n    , thresholdValue
  = 80.0\n    }\n, Threshold \n    { thresholdName = \"Top-level declarations used\"\n
  \   , thresholdRegex = \"(\\\\d+)% top-level declarations used\"\n    , thresholdValue
  = 80.0\n    }\n]\n```\n\n- `thresholdRegex` is the regex to be used for extracting
  the coverage from HPC report. It requires 1 digit capture.\n- `thresholdValue` is
  the threshold for the code coverage.\n- `thresholdName` will be used for the threshold
  report\n\nThen, build the coverage report:\n\n```\nstack test --coverage\n```\n\nThen,
  generate a text report and feed that into `hpc-threshold`:\n\n```\n(stack hpc report
  --all 2&>1) | hpc-threshold\n```\n\nThe stderr -> stdout redirection is necessary
  there because `stack hpc report` outputs the result in stderr, but we want to pipe
  that into `hpc-threshold`.\n\nThen, you'll get an output similar to the following:\n\n```\nCode
  coverage threshold check: FAIL\n· Expressions used: 67.0% (< 80.0%)\n· Boolean coverage:
  14.0% (< 80.0%)\n· Alternatives used: 42.0% (< 80.0%)\n✓ Local declarations used:
  88.0% (≥ 80.0%)\n✓ Top-level declarations used: 80.0% (≥ 80.0%)\n```\n\nIf we check
  the exit code of the last process, we'll get `1` since some coverage areas are below
  the configured threshold\n\n```\n$ echo $?\n1\n```\n\nFor successful scenario, the
  output that you'll get is as follows:\n\n```\nCode coverage threshold check: PASS\n✓
  Expressions used: 67.0% (≥ 60.0%)\n✓ Boolean coverage: 14.0% (≥ 10.0%)\n✓ Alternatives
  used: 42.0% (≥ 40.0%)\n✓ Local declarations used: 88.0% (≥ 80.0%)\n✓ Top-level declarations
  used: 80.0% (≥ 80.0%)\n```\n\nAnd the exit code is 0\n\n```\n$ echo $?\n0\n```\n"
license-name: BSD3
