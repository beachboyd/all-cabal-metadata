homepage: ''
changelog-type: text
hash: c81479ff8c8fe849f96d157cdd4f0740ff34e2fa62a4bd9a404e8fa2f21c5b2e
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  hspec: ! '>=1.3'
  unix-bytestring: -any
  process: -any
  doctest: ! '>=0.8'
  HUnit: -any
  utf8-string: -any
  hpath: -any
  IfElse: -any
  QuickCheck: -any
maintainer: Julian Ospald <hasufell@posteo.de>
synopsis: Support for well-typed paths
changelog: ! "0.9.0\n\t* don't force \"Path Abs\" anymore in IO module, abstract more
  over Path types\n\t* add 'toAbs'\n0.8.1\n\t* add 'readFile', 'readFileEOF', 'writeFile'
  and 'appendFile'\n0.8.0\n\t* 'copyDirRecursiveOverwrite', 'copyFileOverwrite', 'easyCopyOverwrite'
  and 'moveFileOverwrite' have been removed, instead use the versions without the
  *Overwrite suffix and pass in 'Strict' (for default behavior) or 'Overwrite' as
  the CopyMode argument\n\t* introduced a new 'RecursiveErrorMode' type to allow controlling
  recursive behavior of 'copyDirRecursive' (use 'FailEarly' for default behavior)\n\t*
  'createRegularFile' and 'createDir' now take FileMode as a parameter (also see 'newFilePerms'
  and 'newDirPerms')\n\t* various documentation fixes\n\t* improved reliability of
  tests\n0.7.5:\n\t* relicense to BSD3\n0.7.3:\n\t* don't expose HPath.Internal\n0.7.2:\n\t*
  fix tests, so they work with the sdist tarball too\n\t* added the following function
  to HPath.IO: createSymlink\n0.7.1:\n\t* various cleanups and documentation improvements\n\t*
  added the following functions to System.Posix.FilePath: splitSearchPath, getSearchPath,
  stripExtension, makeRelative, makeValid\n0.7.0:\n\t* use 'sendfile' from 'simple-sendfile'
  in _copyFile and do read/write as a fallback only\n\t* add isFileName, hasParentDir,
  hiddenFile to System.Posix.FilePath\n\t* add our own openFd version for more control\n\t*
  small documentation improvements\n\t* add a getDirectoryContents' version that works
  on Fd\n\t* lift version constraints in benchmark\n\t* remove fpToString and userStringToFP,
  use Data.ByteString.UTF8 directly instead\n0.6.0:\n\t* fixes 'throwDestinationInSource'
  to be more reliable.\n\t* removes some unused HPathIOException constructors\n\t*
  consistently provide exception constructor identifiers\n\t* be less harsh when non-supported
  file types get passed to our functions, possibly ignoring them\n\t* minor cleanups\n0.5.9:\n\t*
  Adds our posix-paths fork and a lot of IO operations.\n0.5.8:\n\t* First version
  of the fork.\n0.5.7:\n\t* Fix haddock problem.\n0.5.6:\n\t* Reject only .. and .\n0.5.5:\n\t*
  Use filepath's isValid function for additional sanity checks\n0.5.4:\n\t* Disable
  parsing of path consisting only of \".\"\n\t* Add NFData instance for Path\n\t*
  Some typo/docs improvements\n\t* Add standard headers to modules\n0.5.3:\n\t* Added
  conversion functions.\n\n0.2.0:\n\n        * Rename parentAbs to simply parent.\n\t*
  Add dirname.\n\n0.3.0:\n\t* Removed Generic instance.\n\n0.4.0:\n\t* Implemented
  stricter parsing, disabling use of \"..\".\n\t* Made stripDir generic over MonadThrow\n\n0.5.0:\n\t*
  Fix stripDir p p /= Nothing bug.\n\n0.5.2:\n\t* Removed unused DeriveGeneric.\n"
basic-deps:
  exceptions: -any
  bytestring: ! '>=0.9.2.0'
  unix: ! '>=2.5'
  base: ! '>=4.2 && <5'
  hspec: -any
  unix-bytestring: -any
  word8: -any
  simple-sendfile: ! '>=0.2.24'
  utf8-string: -any
  IfElse: -any
  deepseq: -any
all-versions:
- '0.7.2'
- '0.7.3'
- '0.7.5'
- '0.8.0'
- '0.8.1'
- '0.9.0'
author: Julian Ospald <hasufell@posteo.de>
latest: '0.9.0'
description-type: markdown
description: ! "# HPath\n\n[![Gitter chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hasufell/hpath?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
  [![Hackage version](https://img.shields.io/hackage/v/hpath.svg?label=Hackage)](https://hackage.haskell.org/package/hpath)
  [![Build Status](https://api.travis-ci.org/hasufell/hpath.png?branch=master)](http://travis-ci.org/hasufell/hpath)\n\nSupport
  for well-typed paths in Haskell. Also provides ByteString based filepath\nmanipulation.\n\n##
  Motivation\n\nThe motivation came during development of\n[hsfm](https://github.com/hasufell/hsfm)\nwhich
  has a pretty strict File type, but lacks a strict Path type, e.g.\nfor user input.\n\nThe
  library that came closest to my needs was\n[path](https://github.com/chrisdone/path),\nbut
  the API turned out to be oddly complicated for my use case, so I\ndecided to fork
  it.\n\nSimilarly, [posix-paths](https://github.com/JohnLato/posix-paths)\nwas exactly
  what I wanted for the low-level operations, but upstream seems dead,\nso it is forked
  as well and merged into this library.\n\n## Goals\n\n* well-typed paths\n* high-level
  API to file operations like recursive directory copy\n* safe filepath manipulation,
  never using String as filepath, but ByteString\n* still allowing sufficient control
  to interact with the underlying low-level calls\n\nNote: this library was written
  for __posix__ systems and it will probably not support other systems.\n\n## Differences
  to 'path'\n\n* doesn't attempt to fake IO-related information into the path, so
  whether a path points to a file or directory is up to your IO-code to decide...\n*
  trailing path separators will be preserved if they exist, no messing with that\n*
  uses safe ByteString for filepaths under the hood instead of unsafe String\n* fixes
  broken [dirname](https://github.com/chrisdone/path/issues/18)\n* renames dirname/filename
  to basename/dirname to match the POSIX shell functions\n* introduces a new `Path
  Fn` for safe filename guarantees and a `RelC` class\n* allows pattern matching via
  unidirectional PatternSynonym\n* uses simple doctest for testing\n* allows `~/`
  as relative path, because on posix level `~` is just a regular filename that does
  _NOT_ point to `$HOME`\n* remove TH, it sucks\n\n## Differences to 'posix-paths'\n\n*
  uses the `word8` package for save word8 literals instead of `OverloadedStrings`\n*
  `hasTrailingPathSeparator` and `dropTrailingPathSeparator` behave in the same way
  as their `System.FilePath` counterpart\n* added various functions:\n    * `equalFilePath`\n
  \   * `getSearchPath`\n    * `hasParentDir`\n    * `hiddenFile`\n    * `isFileName`\n
  \   * `isValid`\n    * `makeRelative`\n    * `makeValid`\n    * `normalise`\n    *
  `splitSearchPath`\n    * `stripExtension`\n* has a custom versions of `openFd` which
  allows more control over the flags than its unix package counterpart\n* adds a `getDirectoryContents'`
  version that works on Fd\n\n## Examples in ghci\n\nStart ghci via `cabal repl`:\n\n```hs\n--
  enable OverloadedStrings\n:set -XOverloadedStrings\n-- import HPath.IO\nimport HPath.IO\n--
  parse an absolute path\nabspath <- parseAbs \"/home\"\n-- parse a relative path
  (e.g. user users home directory)\nrelpath <- parseRel \"jule\"\n-- concatenate paths\nlet
  newpath = abspath </> relpath\n-- get file type\ngetFileType newpath\n-- return
  all contents of that directory\ngetDirsFiles newpath\n-- return all contents of
  the parent directory\ngetDirsFiles (dirname newpath)\n```\n\n"
license-name: BSD3
