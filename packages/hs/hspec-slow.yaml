homepage: https://github.com/riskbook/hspec-slow
changelog-type: markdown
hash: a767f7e1d058efe2e0ef4574c43e5040916a5d69a5f3e0ac4c9a496383b518cb
test-bench-deps:
  stm: -any
  base: -any
  hspec: -any
  hspec-slow: -any
  mtl: -any
maintainer: riskbook <support@riskbook.com>
synopsis: Find slow test cases
changelog: |
  # Change log for hspec-slow project

  ## Version 0.2.0.1 - 2020.11.26
  Riskbook takes over maintainership



  ## Version 0.2.0.0 - 2020.11.04

  Add alternative api that doesn't require using custom it.

  ## Version 0.1.0.0 - 2016.04.24

  Initial release
basic-deps:
  stm: -any
  base: '>=4.7 && <4.15'
  time: -any
  hspec: -any
  hspec-core: '>=2.0.0 && <3.0'
  mtl: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.2.0.1
author: Bob Long, riskbook <support@riskbook.com>
latest: 0.2.0.1
description-type: markdown
description: |
  ## hspec-slow

  Track and display slow specs in Hspec runs.

  ## Example spec

  ```haskell
  main :: IO ()
  main = do
    conf <- configure 1 -- Track specs that take longer than 1s
    timedHspec conf $ \it ->
      describe "Main" $ do
        it "should foo" $ do
          threadDelay 3000000
          1 `shouldBe` 1
        it "should bar" $ do
          threadDelay 1000
          1 `shouldBe` 1
        it "should baz" $ do
          threadDelay 4000000
          1 `shouldBe` 1
  ```

  Checkout [hspec slow everything](#hspec-slow-everything) to run this on your entire test suite.

  ## Example Output

  ```
  Main
    should foo
    should bar
    should baz
  Slow examples:
  3.002925s: should foo
  4.006186s: should baz

  Finished in 7.0141 seconds
  3 examples, 0 failures
  ```

  ## Parallel specs

  Parallel specs are supported. They are run similarly to above:

  ```haskell
  timedHspecParallel conf $ \it -> do
    -- ...
  ```

  Output:

  ```
  Main
    should foo
    should bar
    should baz
  Slow examples:
  3.005728s: should foo
  4.00143s: should baz

  Finished in 4.0024 seconds
  3 examples, 0 failures
  ```

  ## hspec slow everything

  `Main.hs`:
  ```
  module Main where

  import qualified Spec
  import Test.Hspec.Slow
  import Test.Hspec(hspec)
  import ClassyPrelude

  main :: IO ()
  main = do
    config <- configure 2
    hspec $ timeThese config Spec.spec
  ```
  `Spec.hs`:
  ```
  {-# OPTIONS_GHC -fno-warn-implicit-prelude #-}
  {-# OPTIONS_GHC -F -pgmF hspec-discover -optF --module-name=Spec #-}
  ```
license-name: BSD-3-Clause
