homepage: https://github.com/parsonsmatt/hspec-hedgehog#readme
changelog-type: markdown
hash: 20fa4ea678d42948f3acda15591268e7248f34823efd42cebab0635b060dab2c
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  hedgehog: -any
  hspec-hedgehog: -any
maintainer: parsonsmatt@gmail.com
synopsis: Integrate Hedgehog and Hspec!
changelog: |
  # Changelog for hspec-hedgehog

  ## 0.0.1.0

  - Initial Release
basic-deps:
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4.4 && <3'
  hspec-core: ! '>=2.4.4 && <3'
  hedgehog: ! '>=1.0 && <2'
  splitmix: ! '>=0.0.1 && <1'
  HUnit: ! '>=1.5 && <2'
  QuickCheck: ! '>=2.9.2 && <3'
all-versions:
- 0.0.1.0
author: Matt Parsons
latest: 0.0.1.0
description-type: markdown
description: |
  # hspec-hedgehog

  [![Build Status](https://travis-ci.org/parsonsmatt/hspec-hedgehog.svg?branch=master)](https://travis-ci.org/parsonsmatt/hspec-hedgehog)

  An integration library for [hspec](https://hackage.haskell.org/package/hspec) and [hedgehog](https://hackage.haskell.org/package/hedgehog).

  Example:

  ```haskell
  import           Control.Concurrent     (threadDelay)
  import           Control.Monad.IO.Class (liftIO)
  import qualified Hedgehog.Gen           as Gen
  import qualified Hedgehog.Range         as Range
  import           Test.Hspec             (before, describe, hspec, it, shouldBe)
  import           Test.Hspec.Hedgehog    (PropertyT, diff, forAll, hedgehog,
                                           (/==), (===))

  main :: IO ()
  main = hspec $ do
      describe "regular tests" $ do
          it "works" $ do
              True `shouldBe` True

      describe "hedgehog" $ do
          it "is useful if you get an ambiguous error" $ hedgehog $ do
              "no ambiguity" === "no ambiguity"

      describe "hedgehog tests" $ do
          it "lets you use PropertyT directly" $ hedgehog $ do
              x <- forAll $ Gen.integral (Range.linear 0 1000)
              y <- forAll $ Gen.integral (Range.linear 0 5000)
              diff (x + y) (>=) x

          it "renders a progress bit" $ hedgehog $ do
              x <- forAll $ Gen.integral (Range.linear 0 1000)
              y <- forAll $ Gen.integral (Range.linear 1 5000)
              liftIO $ threadDelay (100 * x + y)

      describe "with hooks" $ do
          before (pure "Hello!") $ do
              it "has functions" $ \str -> hedgehog $
                  str === "Hello!"

              it "goes before or after" $ \str -> do
                  pure () :: PropertyT IO ()
                  str === "Hello!"

              it "generates" $ \str -> hedgehog $ do
                  wrongLen <- forAll $ Gen.integral (Range.linear 0 3)
                  length str /== wrongLen
  ```
license-name: BSD-3-Clause
