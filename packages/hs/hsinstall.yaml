homepage: https://github.com/dino-/hsinstall#readme
changelog-type: markdown
hash: 04141c1eec862001033d20bd3bbbc89f061f01672b0dae12d451ecc844c8b0f1
test-bench-deps: {}
maintainer: Dino Morelli <dino@ui3.info>
synopsis: Install Haskell software
changelog: ! "2.0 (2018-10-22)\n\n  * Redesigned as a binary utility to be installed
  on a system, not a script\n  * Added AppImage creation feature\n  * Got rid of \"bundle\"
  style deployment, it's all FHS now with a prefix\n  * Removed old sample usage app\n
  \ * Moved stackage resolver up to lts-12.13\n  * Moved copyright date up to 2018\n\n\n1.6
  (2017-07-01)\n\n  * Changed base lower bound from 4.9 to 4.8\n  * Updated stack
  snapshot to lts-8.21\n  * Added HCAR listing content\n  * Removed defunct cabal
  stability field\n  * Adjusted some documentation in the README\n  * Moved copyright
  date up to 2017\n\n\n1.5 (2016-10-16)\n\n  * Now creating bin directory prior to
  stack install\n  * Removed comments from auto-generated stack.yaml\n\n\n1.4 (2016-10-11)\n\n
  \ * Added missing files to extra-source-files\n  * Added switch for making a symlink
  to the app directory\n\n\n1.3 (2016-10-07)\n\n  * Fixed error in docs\n\n\n1.2 (2016-10-07)\n\n
  \ * Added example additional script copying code\n  * Updated developer instructions\n
  \ * Added a tested-with line to the cabal file\n\n\n1.1 (2016-10-07)\n\n  * Updated
  to stackage lts-7.2\n\n\n1.0 (2016-10-02)\n\n  * Cleaned up cabal file\n  * Wrote
  API docs\n  * Cleaned up README\n  * Aborting the installation if `stack install`
  fails\n  * Added instructions for compiling install.hs\n  * Added library for locating
  resources at runtime\n  * Initial release\n"
basic-deps:
  here: -any
  Cabal: -any
  base: ! '>=4.8 && <5.0'
  filepath: -any
  process: -any
  hsinstall: -any
  directory: -any
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.4'
- '1.5'
- '1.6'
- '2.0'
author: Dino Morelli
latest: '2.0'
description-type: markdown
description: ! "# hsinstall\n\n\n## Synopsis\n\nInstall Haskell software\n\n\n## Description\n\n###
  OVERVIEW\n\nhsinstall is a tool for deploying software projects into directory structures\nsuitable
  for installation on a system. It builds upon the `stack install`\ncommand and adds
  more features. Those are:\n\n- Copying the `LICENSE` file into the deployment directory\n-
  Copying the `resources` directory into the deployment directory so these\n  files
  can be located using relative paths at runtime (more on this later in\n  RESOURCES)\n-
  Building an AppDir directory structure for a project and producing an\n  [AppImage](https://appimage.org/)\n\nIt
  will be necessary to have the Haskell stack tool on your PATH:  \nhttps://docs.haskellstack.org/en/stable/README/\n\nIf
  the AppImage features are desired, you must have these tools on your PATH:  \nlinuxdeploy:
  https://github.com/linuxdeploy/linuxdeploy/releases  \nlinuxdeploy-plugin-appimage:
  https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases\n\n### MODES\n\nhsinstall
  operates in two modes. The first is a plain deployment with no\nAppImage creation.
  The PREFIX will default to `AppDir/usr` and all binaries in\nthe project will be
  deployed to `AppDir/usr/bin`.\n\nThe second mode is intended to set up for AppImage
  creation and is triggered by\nspecifying exactly one EXECUTABLE from the project
  in the arguments. This will\nchange the PREFIX to `AppDir_EXECUTABLE/usr`. And only
  that single executable\nwill be copied to the `AppDir_EXECUTABLE/usr/bin` directory.\n\nThe
  directory layout will be a standard [FHS](http://www.pathname.com/fhs/)\nshape,
  common in UNIX-like operating systems. Like this:\n\n    <PREFIX>/\n      bin/...\n
  \     share/\n        <PROJECT>-<VERSION>/  <-- this is the share directory\n          doc/LICENSE\n
  \         resources/...\n\nBe aware that when the `--delete` switch is used the
  binaries in `<PREFIX>/bin`\nWILL NOT be deleted, only the share directory:\n`<PREFIX>/share/<PROJECT>-<VERSION>`\n\n###
  APPIMAGE CREATION\n\nEven for a first-time AppImaging, this tool should produce
  a working AppImage.\nIf missing, it will create default `.desktop` and `.svg` files
  in\n`util/resources/appimage`. Customize or replace these to fit your project, and\nthen
  check these two files into source control for future builds.\n\nThe default `.desktop`
  file Categories will be populated with 'Utility;'. We\nrecommend adjusting this
  using the XDG list of registered categories:\nhttps://specifications.freedesktop.org/menu-spec/latest/apa.html\n\nIf
  your application is a command-line program, append this line to the end of\nthe
  default `.desktop` file: 'Terminal=true'\n\nIf your application isn't a command-line
  tool, we recommend using a proper icon\ninstead of the hsinstall default, which
  is a command shell icon.\n\n### RESOURCES\n\nIf present, hsinstall will deploy a
  `resources` directory to\n`<PREFIX>/share/PROJECT-VERSION/resources`. In order to
  locate these files at\nruntime, the hsinstall project includes a library to build
  filesystem-portable\nrelative paths. See this source code for help on integrating
  this into your\napp:\nhttps://github.com/dino-/hsinstall/blob/master/src/lib/HSInstall/Resources.hs\n\n\n##
  Development\n\nBrowse [the source](https://github.com/dino-/hsinstall)\n\nGet source
  with git and build\n\n    $ git clone https://github.com/dino-/hsinstall.git\n    $
  cd hsinstall\n    $ stack build\n\nIf you have the abovementioned `linuxdeploy-*`
  programs on your path, we can do\nsomething *really* cool. Use this freshly-built
  hsinstall to package itself\ninto an AppImage:\n\n    $ stack exec hsinstall --
  --mk-appimage hsinstall\n\nAnd you should see an `hsinstall-x86_64.AppImage` binary
  in `.`\n\n\n## Contact\n\n### Authors\n\nDino Morelli <dino@ui3.info>\n"
license-name: ISC
