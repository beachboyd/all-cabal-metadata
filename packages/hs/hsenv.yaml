homepage: https://github.com/tmhedberg/hsenv
changelog-type: ''
hash: 389732d540bf05e6d56bbb65389f32a5070ae3c0ac996c46d81d083064f0d069
test-bench-deps: {}
maintainer: Taylor Hedberg <t@tmh.cc>
synopsis: Virtual Haskell Environment builder
changelog: ''
basic-deps:
  bytestring: ! '>=0.9.1.7 && <0.11'
  unix: ! '>=2.0 && <2.8'
  split: ! '>=0.1.4 && <0.3'
  Cabal: ! '>=1.8.0.6 && <1.19'
  base: ! '>=4.2.0.0 && <4.8'
  filepath: ! '>=1.1.0.3 && <1.4'
  process: ! '>=1.0.1.2 && <1.3'
  io-streams: ! '>=1.1.0.0 && <=1.2.0.0'
  http-streams: ! '>=0.6.0.2 && <=0.7'
  mtl: ! '>=1.1.0.2 && <2.2'
  file-embed: ! '>=0.0.4.1 && <0.1'
  safe: ! '>=0.3 && <0.4'
  directory: ! '>=1.0.1.0 && <1.3'
all-versions:
- '0.3'
- '0.4'
- '0.5'
author: Bartosz Ćwikłowski
latest: '0.5'
description-type: markdown
description: ! "hsenv - Virtual Haskell Environment\n===================================\n\nWhat
  is it?\n-----------\nhsenv is a tool (inspired by Python's virtualenv)\nto create
  isolated Haskell environments.\n\n\nWhat does it do?\n----------------\nIt creates
  a sandboxed environment in a .hsenv/ subdirectory of your project,\nwhich, when
  activated, allows you to use regular Haskell tools (ghc, ghci,\nghc-pkg, cabal)
  to manage your Haskell code and environment. It's possible to\ncreate an environment,
  that uses a different GHC version than your currently\ninstalled system GHC version.
  Very simple emacs integration mode is included.\n\nBasic usage\n-----------\nFirst,
  choose a directory where you want to keep your\nsandboxed Haskell environment, usually
  a good choice is a directory containing\nyour cabalized project (if you want to
  work on a few projects\n(perhaps an app and its dependent library), just choose
  any of them,\nit doesn't really matter). Enter that directory:\n\n```bash\ncd ~/projects/foo\n```\n\nNext,
  create your new isolated Haskell environment\n(this is a one-time-only (per environment)
  step):\n\n```bash\nhsenv\n```\n\nNow, every time you want to use this environment,
  you have to activate it:\n\n```bash\nsource .hsenv/bin/activate\n```\n\nThat's it!
  Now it's possible to use all regular Haskell tools like usual, but\nit won't affect
  your global/system Haskell environment, and also your per-user\nenvironment (from
  ~/.cabal and ~/.ghc) will stay the same. All cabal-installed\npackages will be private
  to this environment, and the external environments\n(global and user) will not affect
  it (this environment will only inherit very\nbasic packages, mostly ghc and Cabal
  and their deps).\n\nWhen you're done working with this environment, enter command
  `deactivate_hsenv`,\nor just close the current shell (with exit).\n\n```bash\ndeactivate_hsenv\n```\n\nNamed
  vs Unnamed Environments\n-----------------------------\n\nBy default, hsenv creates
  an \"unnamed\" environment, but sometimes for\nparticular use cases you might want
  to create different environments under\nthe same directory. This is achievable creating
  a \"named\" environment. To\ndo that, just pass the flag `--name=<ENVIRONMENT_NAME>`
  to hsenv:\n\n```bash\nhsenv --name=<ENVIRONMENT_NAME>\n```\n\nThis will make hsenv
  generate a folder of the form `.hsenv_<ENVIRONMENT_NAME>`.\n\nCustomization\n-------------\n\nIf
  you want to customize activation and deactivation, create one or more of the\nfollowing
  files in ~/.hsenv/bin/: pre-activate, post-activate, pre-deactivate,\npost-deactivate.
  These shell scripts will be sourced automatically by the main\nactivation script.\n\nAdvanced
  usage\n--------------\nHere's the most advanced usage of hsenv. Let's say you want
  to:\n\n* Hack on a json library\n* Do so comfortably\n* Use your own version of
  the parsec library\n* And do all this using the nightly version of GHC\n\nFirst,
  download the binary distribution of GHC for your platform\n(e.g. ghc-7.3.20111105-i386-unknown-linux.tar.bz2).\n\nCreate
  a directory for you environment:\n\n```bash\nmkdir /tmp/test\ncd /tmp/test\n```\n\nThen,
  create a new environment using that GHC:\n\n```bash\nhsenv --name=test --ghc=/path/to/ghc-7.3.20111105-i386-unknown-linux.tar.bz2\n```\n\nActivate
  it:\n\n```bash\nsource .hsenv_test/bin/activate\n```\n\nDownload a copy of json
  library and your private version of parsec:\n\n```bash\ndarcs get http://patch-tag.com/r/Paczesiowa/parsec\ncabal
  unpack json\n```\n\nInstall parsec:\n\n```bash\ncd parsec2\ncabal install\n```\n\nInstall
  the rest of the json deps:\n\n```bash\ncd ../json-0.5\ncabal install --only-dependencies\n```\n\nNow,
  let's say you want to hack on Parsec module of json library.\nOpen it in emacs:\n\n```bash\nemacsclient
  Text/JSON/Parsec.hs\n```\n\nActivate the virtual environment (hsenv must be required
  earlier):\n\n```\nM-x hsenv-activate <RET> /tmp/test/ <RET>\n```\n\nEdit some code
  and load it in ghci using 'C-c C-l'. If it type checks,\nyou can play around with
  the code using nightly version of ghci running\nin your virtual environment. When
  you're happy with the code, exit emacs\nand install your edited json library:\n\n```bash\ncabal
  install\n```\n\nAnd that's it.\n\nFetching and downloading a remote version of GHC\n------------------------------------------------\n\nRecent
  versions of hsenv include the possibility to automatically download and\ninstall
  a GHC version directly from the GHC main repository. To do that, all\nyou need to
  do is to pass the desired version of GHC you want to install:\n\n```bash\nhsenv
  --ghc=7.4.1\n```\n\nOr a valid URL pointing to a compressed GHC archive:\n\n```bash\nhsenv
  --ghc=http://www.haskell.org/ghc/dist/7.6.3/ghc-7.6.3-x86_64-apple-darwin.tar.bz2\n```\n\nMisc\n----\n\nhsenv
  has been tested on Linux, Mac OS X, and FreeBSD systems, but it should\nwork on
  any POSIX platform. The external (from tarball) GHC feature requires\na binary GHC
  distribution compiled for your platform which that can be\nextracted with tar and
  installed with \"./configure --prefix=PATH; make\ninstall\".\n\nFAQ\n---\n**Q: Can
  I use it together with tools like cabal-dev or capri?**\n\nA: No. All these tools
  work more or less the same (wrapping cabal command,\n   setting GHC_PACKAGE_PATH
  env variable), so something will probably break.\n\n\n**Q: Using GHC from tarball
  fails with a bunch of make tool gibberish on\nFreeBSD. What do I do?**\n\nA: Try
  the '--make-cmd=gmake' switch.\n\n\n**Q: Can I use hsenv inside hsenv?**\n\nA: No.
  It may be supported in future versions.\n\n\n**Q: Does it work on x64 systems?**\n\nA:
  Yes.\n\n\n**Q: Will it work on Mac?**\n\nA: Yes.\n\n\n**Q: Will it work on Windows?**\n\nA:
  I really doubt it would even compile. I don't have access to any Windows\n   machines,
  so you're on your own, but patches/ideas/questions are welcome.\n   Maybe it would
  work on Cygwin.\n\n\n**Q: Does it require Bash?**\n\nA: No, it should work with
  any POSIX-compliant shell. It's been tested with\n   bash, bash --posix, dash, zsh
  and ksh.\n\n\n**Q: Can I use it with a different haskell package repository than
  hackage?**\n\nA: Yes, just adjust the url in .hsenv/cabal/config file.\n\n\n**Q:
  How do I remove the whole virtual environment?**\n\nA: If it's activated - 'deactivate_hsenv'
  it. Then, delete\n   the .hsenv/ directory.\n\n\n**Q: Is every environment completely
  separate from other environments and\n   the system environment?**\n\nA: Yes. The
  only (minor) exception is ghci history - there's only one\n   per user history file.
  Also, if you alter your system's GHC, then\n   virtual environments using system's
  GHC copy will probably break.\n   Virtual environments using GHC from a tarball
  should continue to work.\n\n\n**Q: Can I share one cabalized project directory among
  multiple environments\n(e.g. build a cabalized project in the same directory using
  different\nenvironments)?**\n\nA: Yes. hsenv also overrides cabal with a wrapper,
  that will force using\ndifferent build directories, so there shouldn't be even any
  recompilation\nbetween different environments.\n\n\n**Q: Is it possible to activate
  an environment upon entering its directory?**\n\nA: Yes, if you really know what
  you're doing. Here's a snippet for bash, which\n   will activate both named and
  unnamed environments:\n\n```bash\n    function precmd() {\n        if [[ -z $HSENV
  ]]; then\n            NUMBER_OF_ENVS=$(find . -maxdepth 1 -type d -name \".hsenv*\"
  | wc -l)\n            case ${NUMBER_OF_ENVS} in\n                \"0\") ;;\n                \"1\")
  source .hsenv*/bin/activate;;\n                *) echo multiple environments, manual
  activaton required;;\n            esac\n        fi\n    }\n    export PROMPT_COMMAND=precmd\n```\n"
license-name: BSD-3-Clause
