homepage: http://bitbucket.org/dave4420/hstest/wiki/Home
changelog-type: ''
hash: b02397b3f35c7a6de1935fa592b5baf01fa1fa077b5149c5e9ef322cac06d264
test-bench-deps: {}
maintainer: Dave Hinton <beakerchu@googlemail.com>
synopsis: Runs tests via QuickCheck1 and HUnit; like quickCheck-script but uses GHC
  api
changelog: ''
basic-deps:
  ghc: ! '>=6.10.1 && <6.12 || >=6.12.1 && <6.14'
  base: ! '>=4.0.0 && <4.3'
  filepath: ! '>=1.1.0 && <1.2'
  HUnit: ! '>=1.2.0 && <1.3'
  ghc-paths: ! '>=0.1.0 && <0.2'
  mtl: ! '>=1.1.0 && <1.2'
  random: ! '>=1.0.0 && <1.1'
  QuickCheck: ! '>=1.2.0.0 && <1.3'
  directory: ! '>=1.0.0 && <1.1'
all-versions:
- 0.0.0
- 0.0.1
author: Dave Hinton
latest: 0.0.1
description-type: haddock
description: ! '

  ''hstest'' looks through all Haskell source files in the current directory (by default),
  runs all properties via QuickCheck 1

  (properties must have a name that starts ''prop_''), and runs all tests via HUnit
  (tests must have a name that starts ''test_'').


  For example, suppose you have this Haskell source file called ''mysort.hs'':


  > mySort xs = ... -- a function you wish to test (definition elided)

  >

  > prop_lengthStaysTheSame xs = length xs == length (mySort xs)

  > prop_sumStaysTheSame xs = sum xs == sum (mySort xs)

  > prop_lowestElementAtStart, prop_highestElementAtEnd :: [Int] -> Bool

  > prop_lowestElementAtStart xs = not (null xs) ==> minimum xs == head (mySort xs)

  > prop_highestElementAtEnd xs = not (null xs) ==> maximum xs == last (mySort xs)


  Then to check all these tests, you run


  > $ hstest

  > Failed prop_highestElementAtEnd:

  >  *  [-3,2,-2]

  > mysort.hs: Failed 1 property, passed 3 properties


  Oops! Fix ''mySort'' and try again:


  > $ hstest

  > mysort.hs: Passed 4 properties'
license-name: BSD-3-Clause
