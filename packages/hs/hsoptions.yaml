homepage: https://github.com/josercruz01/hsoptions
changelog-type: ''
hash: b83e7655afc84dcb4295df6658ebdaa7fd11bf7a5de9290d8310b27e1b9e6ae9
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  base: ==4.6.*
  hsoptions: -any
  test-framework-quickcheck2: ==0.3.*
  parsec: ==3.1.*
  HUnit: ! '>=1.2 && <2'
  containers: ==0.5.*
  regex-compat: ==0.95.*
  regex-posix: ==0.95.*
  QuickCheck: ! '>=2.4 && <=2.7'
  directory: ==1.2.*
maintainer: jose.r.cruz01@gmail.com
synopsis: Haskell library that supports command-line flag processing
changelog: ''
basic-deps:
  base: ==4.6.*
  hsoptions: -any
  parsec: ==3.1.*
  containers: ==0.5.*
  regex-compat: ==0.95.*
  regex-posix: ==0.95.*
  directory: ==1.2.*
all-versions:
- 1.0.0.0
author: Jose Raymundo Cruz
latest: 1.0.0.0
description-type: markdown
description: ! "HsOptions\n========\n\nHsOptions is a Haskell library that supports
  command-line flag processing.\n\nIt is equivalent to `getOpt()`, but for `Haskell`,
  and with a lot of neat extra\nfeatures. Typically, an application specifies what
  flags it is expecting from\nthe user -- like `--user_id` or `-file <filepath>` --
  somehow in the code,\n`HsOptions` provides a declarative way to define the flags
  in the code by using\nthe `make` function.\n\nMost flag processing libraries requires
  all the flags to be defined in a single\npoint, such as the main file, but `HsOptions`
  allows the flags to be scattered\naround the code, promoting code reuse and scalability.
  A module defines the\nflags it needs and when this module is used in other modules
  it's flags are\nhandled by `HsOptions`.\n\n`HsOptions` is completely functional,
  specially because no global state is\nmodified. The only `IO` actions performed
  are to get the command-line arguments\nand to expand the configuration files.\n\nAnother
  important feature of `HsOptions` is that it can process flags from text\nfiles as
  well as from command-line. This feature is available with the use of\nthe special
  `--usingFile <filename>` flag.\n\nFor example:\n\n\n    # inside 'file1.conf'\n
  \   --user_name batman\n    --pretty\n\n... when running the `Program.hs` haskell
  program:\n\n    $ runhaskell Program.hs --debug --usingFile file1.conf -f\n\n    ===
  is evaluates the same as ==== >\n\n    $ runhaskell Program.hs --debug --user_name
  batman --pretty -f\n\n\nEach configuration file is expanded after it is processed,
  so it can include\nmore configuration files and create a tree. This is useful to
  create different\nenvironments, like production.conf, dev.conf and qa.conf just
  to name a few.\n\n[![Build Status](https://travis-ci.org/josercruz01/hsoptions.svg?branch=master)](https://travis-ci.org/josercruz01/hsoptions)\n\nTable
  of contents\n=================\n\n- [HsOptions](#hsoptions)\n- [Table of contents](#table-of-contents)\n-
  [Install](#install)\n- [Examples](#examples)\n- [API](#api)\n    - [Defining flags](#defining-flags)\n
  \   - [Process flags](#process-flags)\n    - [Get flag value](#get-flag-value)\n
  \   - [Optional and Required flags](#optional-and-required-flags)\n    - [Configuration
  files](#configuration-files)\n    - [Default value](#default-value)\n    - [Common
  configurations](#common-configurations)\n    - [Flag alias](#flag-alias)\n    -
  [Dependent defaults](#dependent-defaults)\n    - [Optionally required](#optionally-required)\n
  \   - [Global validation](#global-validation)\n    - [Flag parsers](#flag-parsers)\n
  \       - [Parsers](#parsers)\n        - [Parser wrappers](#parser-wrappers)\n    -
  [Flag operations](#flag-operations)\n        - [Assign](#assign)\n        - [Inherit
  keyword](#inherit-keyword)\n        - [Append](#append)\n        - [Prepend](#prepend)\n
  \       - [Change flag default operation](#change-flag-default-operation)\n- [Build](#build)\n\nInstall\n=======\n\nThe
  library depends on cabal\n([Install Cabal](http://www.haskell.org/cabal/download.html)).\n\nTo
  install using cabal:\n\n    cabal install hsoptions\n\nExamples\n========\n\nSee
  [Examples](https://github.com/josercruz01/hsoptions/tree/master/examples)\nfor more
  examples.\n\nThis program defines two flags (`user_name` of type `String` and `age`
  of type\n`Int`) and in the `main` function prints the name and the age plus 5. It
  also\nadds the alias `u` to the flag `user_name`.\n\n```haskell\n-- Program.hs\nimport
  System.Console.HsOptions\n\nuserName = make ( \"user_name\"\n                , \"the
  user name of the app\"\n                , [ parser stringParser\n                  ,
  aliasIs [\"u\"]\n                  ]\n                )\nuserAge = make (\"age\",
  \"the age of the user\", [parser intParser])\n\nflagData = combine [flagToData userName,
  flagToData userAge]\n\nmain :: IO ()\nmain = processMain \"Simple example for HsOptions.\"\n
  \                  flagData\n                   success\n                   failure\n
  \                  defaultDisplayHelp\n\nsuccess :: ProcessResults -> IO ()\nsuccess
  (flags, args) = do let nextAge = (flags `get` userAge) + 5\n                           putStrLn
  (\"Hello \" ++ flags `get` userName)\n                           putStrLn (\"In
  5 years you will be \" ++\n                                     show nextAge ++\n
  \                                    \" years old!\")\n\nfailure :: [FlagError]
  -> IO ()\nfailure errs = do putStrLn \"Some errors occurred:\"\n                  mapM_
  print errs\n```\n\nYou can run this program in several ways:\n\n    $ runhaskell
  Program.hs --user_name batman --age 23\n    Hello batman\n    In 5 years you will
  be 28 years old!\n\n... or:\n\n    $ runhaskell Program.hs --user_name batman --age
  ten\n    Some errors occurred:\n    Error with flag '--age': Value 'ten' is not
  valid\n\n... or:\n\n    $ runhaskell Program.hs --help\n    Simple example for HsOptions.\n
  \       --age        the age of the user\n    -u  --user_name  the user name of
  the app\n        --usingFile  read flags from configuration file\n    -h  --help
  \      show this help\n\nAPI\n===\n\nDefining flags\n----------------\nA flag is
  defined using the `make` function. It takes the name of the flag, the\nhelp text
  and the parser. The parser specified how to parse the string value of\nthe flag
  to the correct type. A set of default parsers are provided in the\nlibrary for common
  types.\n\nTo define a flag of type `Int`:\n\n```haskell\nage :: Flag Int\nage =
  make (\"age\", \"age of the user\", [parser intParser])\n```\n\nTo define the same
  flag of type `Maybe Int`:\n\n```haskell\nage :: Flag (Maybe Int)\nage = make (\"age\",
  \"age of the user\", [maybeParser intParser])\n```\n\nThe function `maybeParser`
  is a wrapper for a parser of any type that converts\nthat parser to a `Maybe` data
  type, allowing the value to be `Nothing`. This is\nused mostly for optional flags.\n\nInstead
  of `intParser` the user can specify his custom function to parse the\nstring value
  to the corresponding flag type. This is useful to allow the user to\ncreate flags
  of any custom type.\n\nProcess flags\n-----------------------------------\n\nTo
  process the flags the `processMain` function is used. This function serves as\na
  middle man between the real `main` and the flag processing. Takes 5 arguments:\n\n*
  The description of the program: used when printing the help text.\n* A collection
  of all the defined flags\n* Three callback functions:\n    * Success callback: called
  with the process results if no errors occurred\n    * Failure callback: called if
  any error while processing flags occurred\n    * Display help callback: called if
  the user sent the `--help` flag\n\nThis is an example on how to call the `processMain`
  function:\n\n```haskell\nimport System.Console.HsOptions\n\n-- flags definitions\nname
  = make (\"name\", \"the name of the user\", [parser stringParser])\nage = make (\"age\",
  \"the age of the user\", [parser intParser])\n\n-- collection of all flags\nall_flags
  = combine [flagToData age, flagToData name]\n\n-- real main\nmain = processMain
  \"Example program for processMain\"\n                   all_flags\n                   successMain\n
  \                  defaultDisplayErrors\n                   defaultDisplayHelp\n\n--
  new main function\nsuccessMain (flags, args) = putStrLn $ flags `get` name\n```\n\nIn
  this example, the provided implementations for the failure and the display\nhelp
  callback were used (`defaultDisplayErrors` and `defaultDisplayHelp`), so\nthat we
  do not need to define how to print errors or how to print help.\n\nAs mentioned
  before, if no errors were found then `successMain` function is\ncalled. The argument
  sent is a tuple (`FlagResults`, `ArgsResults`).\n`FlagResults` is a data structure
  that can be used to get the flag's value with\nthe `get` function. `ArgResults`
  is just a list of the non-flag positional\narguments.\n\nIf there was any kind of
  errors while processing the flags the `display errors`\ncallback argument is called
  with the list of `FlagError` as argument. The user\ncan specify a custom function
  so he handles the argument as he wishes.\n\nThe third callback, `display help`,
  is called when the user sent the special help\nflag (`--help` or `-h`). It takes
  the program description and all the\ninformation of the flags as a list of (`flag_name`,
  `[flag_alias]`,\n`flag_helptext`). The `defaultDisplayHelp` is a default implementation
  that\nprints the helptext in a standard format, usually this is the way to go unless\nthe
  user wants to print the help text in a custom format.\n\nGet flag value\n-----------------------------------\n\nA
  flag value is obtained by using the `get` function. It takes the `FlagResults`\nand
  a defined flag as a parameter, and it will look for the value of the flag\ninside
  the `FlagResults`. In a way you can think of `FlagResults` as a data\nstructure
  that can be queried with flags to retrieve flag values.\n\nThe `FlagResults` are
  obtained by processing the flags with the\n[`processMain`](#process-flags) function.\n\nThe
  return type of `get` is the type of the flag, so if the flag is `Flag Int`\nthen
  `get` returns an `Int` (so the flag value is typed).\n\nFor a given flag:\n\n```haskell\nrepeat
  = make (\"repeat\", \"how many times to repeat\", [parser intParser])\n```\n\n...
  we can grab it's value after processing like this:\n\n```haskell\nsuccess :: (FlagResults,
  ArgsResults) -> IO ()\nsuccess (flags, args) = do let r = flags `get` repeat\n                           putStrLn
  $ \"The value of repeat is \" ++ show r\n```\n\nOptional and Required flags\n-----------------------------------\nBy
  default all flags are marked as required. If you want to make an optional\nflag
  then two things are required:\n\n    * First, the type of the flag must be `Flag
  (Maybe a)`, so that the flag can\n    be `Nothing` if it was not provided and `Just
  value` if it was.\n\n    * Second, the flag must be configured using the `isOptional`
  flag\n    configuration.\n\nExample:\n\n```haskell\n-- optional flag\ndatabase ::
  Flag (Maybe String)\ndatabase = make (\"db\", \"the database\", [maybeParser stringParser,
  isOptional])\n\n-- required flag\napp_id :: Flag Int\napp_id = make (\"app_id\",
  \"application to run\", [parser intParser])\n\n-- combine all flags\nall_flags =
  combine [flagToData database, flagToData app_id]\n\n-- main\nmain = processMain
  \"Sample\" all_flags success\n                   defaultDisplayErrors defaultDisplayHelp\n\n--
  success main\nsuccess (flags, _) = do putStrLn $ \"database: \" ++ show (flags `get`
  database)\n                        putStrLn $ \"app_id: \" ++ show (flags `get`
  app_id)\n```\n\nThis is the expected behavior when getting the flag value:\n\n    $
  runhaskell Program.hs\n    Errors occurred while parsing flags:\n    Error with
  flag '--app_id': Flag is required\n\n... as you can see only `app_id` is required,
  but not `database`.\n\n    $ runhaskell Program.hs --app_id = 123\n    database:
  Nothing\n    app_id: 123\n\n... value for `database` is `Nothing`.\n\n    $ runhaskell
  Program.hs --app_id = 123 --db = local\n    database: Just \"local\"\n    app_id:
  123\n\nConfiguration files\n=====\n\nFlags can be processed not only from command-line
  input, but also from configuration text\nfiles. These text files are included at
  any point in the command-line stream by using the\nspecial flag `--usingFile <filename>`.\n\nWhen
  the flag processor encounters a `usingFile` it reads the content of the file and\nruns
  the processor again with this content, consuming the `usingFile` flag and replacing\nit
  with all the new flags found inside the configuration file.\n\nA configuration file
  can itself include other configuration files as well, by using the\n`usingFile`
  flag inside the file, so a tree of files can be created (a file can have a\nparent
  file, and a grandparent file, or a file can include multiple files to combine\nthem
  together).\n\nIf there is any kind of error while reading the file, or there is
  a syntax error inside\nthe file then that error is reported to the user.\n\nThis
  is an example of a configuration file that has comments, and that includes two more\nfiles.\n\n\n```\n#
  combined.conf\n--database = localdb\n--usingFile = file1.conf\n--usingFile = file2.conf\njack\njill\nbatman\n```\n\n```\n#
  file1.conf\n--flagA = 3\n```\n\n\n```\n# file2.conf\n--flagB = 42\n```\n\nSo if
  we have a `Program.hs` that is configured with the flags `database`, `flagA` and
  `flagB`,\nand that prints the remaining positional arguments, then this is the output
  of the program\nfor the following scenarios:\n\n```\n$ runhaskell Program.hs --usingFile
  combined.conf\ndatabase: localdb\nflagA: 3\nflagB: 42\nargs: [\"jack\",\"jill\",\"batman\"]\n```\n\nWe
  can send more arguments, or modify flags, after or before including the file:\n\n```\n$
  runhaskell Program.hs superman --usingFile combined.conf robin\ndatabase: localdb\nflagA:
  3\nflagB: 42\nargs: [\"superman\", \"jack\",\"jill\",\"batman\", \"robin\"]\n```\n\n...
  as you can observe `superman` and `robin` are respectively at the start and end\nof
  the positional arguments, that is because first `superman` is found in the input
  stream,\nthen the `usingFile combined.conf` which gets evaluated and parsed, and
  when this is\ncomplete then the processor moves to `robin` which is captured as
  the last positional\nargument.\n\nHere is another example on how we can override
  and extend the flags. We will change the\n`flagA` to 1024 and will append the value
  `.local` to the `database` flag.\n\n```\n$ runhaskell Program.hs --usingFile combined.conf
  --database +=! \".local\" --flagA = 1024\ndatabase: localdb.local\nflagA: 1024\nflagB:
  42\nargs: [\"jack\",\"jill\",\"batman\"]\n```\n\nDefault value\n=====\n\nThere is
  two types of default flag values, a default value when the flag was not provided\nby
  the user, and another default value for when the user provided the flag but not
  the\nflag value. The flag configurations are `defaultIs` and `emptyValueIs`.\n\nA
  default value can be configured for a flag by using the `defaultIs` flag configuration.
  It takes the value that the flag will have in case the flag is not provided by the
  user.\n\nExample:\n\n```haskell\ndatabase = make (\"database\", \"the db connection\",
  [ parser stringParser\n                                                  , defaultIs
  \"local.sqlite\"])\n```\n\nSo for example:\n\n        $ runhaskell Program.hs\n
  \       database: local.sqlite\n\n... if you set the value then the default is ignored:\n\n
  \       $ runhaskell Program.hs --database production.sqlite\n        database:
  production.sqlite\n\n... but, it should be noted that if you send the flag, but
  not it's value, then an error will\noccur, as the system assumes you meant to set
  a value to the flag:\n\n        $ runhaskell Program.hs --database\n        Some
  errors occurred:\n        Error with flag '--database': Flag value was not provided\n\n...
  if you want to add a default value for the flag value is empty use the `emptyValueIs`
  flag\nconfiguration:\n\n```haskell\ndatabase = make (\"database\", \"the db connection\",
  [ parser stringParser\n                                                  , defaultIs
  \"local.sqlite\",\n                                                  , emptyValueIs
  \"prod.sqlite\"])\n```\n\n        $ runhaskell Program.hs --database\n        database:
  prod.sqlite\n\nThe combination of `defaultIs` and `emptyValueIs` makes it possible
  to define flags such as\nbooleans. So we could set up a flag such as `--debug` (`Bool`)
  that will take the value\n`False` if missing and will take the value `True` if the
  user sent `--debug` without him\nhaving to say `--debug = True`.\n\nCommon configurations\n=====\nThere
  are some common patterns that occurs while configuring flags. These patterns\ncan
  be put into a function for code reuse.\n\n### Boolean flag\n\nA default behavior
  for boolean flag is that if the flag is missing then it's value is\n`False` and
  if the flag is present, even with a missing flag value, then it's value is\n`True`.\n\nFor
  this the `boolFlag` flag configuration was created.\n\n```haskell\ndebug = make
  (\"debug\", \"debug flag\", boolFlag])\n```\n\nThis is equivalent to:\n\n```haskell\ndebug
  = make (\"debug\", \"debug flag\", [ parser boolParser\n                                     ,
  defaultIs False\n                                     , emptyValueIs True\n                                     ])\n```\n\nThis
  is because `boolFlag` is defined as such:\n\n```haskell\nboolFlag :: [FlagConf Bool]\nboolFlag
  = [ parser boolParser\n           , defaultIs False\n           , emptyValueIs True\n
  \          ]\n]\n```\n\n\nFlag alias\n=====\nCreates a flag configuration for the
  aliases of the flag.\n\nSets multiple alias for a single flag. `(--user_id alias:
  [\"u\", \"uid\")`. These\naliases can be used to set the flag value, so `--user_id
  = 8` is equivalent to\n`-u = 8`.\n\nThey are set using the `aliasIs` flag configuration:\n\n```haskell\nuser_id
  = make (\"user_id\", \"the id\", [parser intParser, aliasIs [\"u\", \"uid\"]])\n```\n\nDependent
  defaults\n=====\n\nCreates a flag configuration that will define a default value
  for a flag based\non a condition. This condition is a function that takes in the
  current\n`FlagResults` and returns `Nothing` if the there is no default value or
  the\ndefault value (`Just`) if there is one.\n\nIf the function returns a value,
  and the user did not send the flag in the\ninput stream, then the default value
  associated with this function is used\nas the default value for the flag.\n\nThe
  dependent default value is configured by using the `defaultIf` function.\nIt takes
  as arguments the `default value getter function` that given the\n`FlagResults` tries
  to return a default value.\n\nExample:\n\n```haskell\nuserName = make (\"user_name\",
  \"the user\", [parser stringParser])\n\nmovie = make ( \"movie\"\n             ,
  \"the movie of the user\"\n             , [ parser stringParser\n               ,
  defaultIf (\\ flags ->\n                     if flags `get` userName == \"neo\"\n
  \                    then Just \"matrix\"\n                     else if flags `get`
  userName == \"bruce\"\n                          then Just \"batman\"\n                          else
  Nothing)\n               ]\n             )\n```\n\nThis is the output for different
  scenarios:\n\n        $ runhaskell Program.hs --user_name other\n        Some errors
  occurred:\n        Error with flag '--movie': Flag is required\n\n... since non
  of the predicate matched then the flag is required to the user.\n\n        $ runhaskell
  Program.hs --user_name batman\n        user_name: bruce\n        movie: batman-begins\n\n...
  as you can see the first dependent default matched, so it's value is used.\n\n        $
  runhaskell Program.hs --user_name neo\n        user_name: neo\n        movie: batman-matrix\n\nThis
  configuration is useful in scenarios where a flag's default value depends on\nthe
  value of on or more flags.\n\nOptionally required\n=====\nYou can mark a flag optionally
  required by using the `requiredIf` flag configuration.\n\nThis flag configuration
  needs a `predicate` function that given the current `FlagResults`\nreturns `True`
  or `False` depending if the flag should or should not be required.\n\nFor example
  it is useful to make a flag required if another flag was set to a particular\nvalue:\n\n```haskell\nlog_memory
  = make ( \"log_memory\"\n                  , \"if set to true the memory usage will
  be logged\"\n                  , boolFlag)\n\n\nlog_output = make ( \"log_output\"\n
  \                 , \"where to save the log. required if 'log_memory' is true\"\n
  \                 , [ maybeParser stringParser\n                    , requiredIf
  (\\ flags -> flags `get` log_memory == True)\n                    ]\n                  )\n```\n\n...
  after the flags are processed then the optionally required condition is checked.
  If\nthe configured predicate returns true an error is reported to the user:\n\n
  \       $ runhaskell Program.hs\n        log_memory: False\n        log_output:
  Nothing\n\n... if you send the `log_memory` the conditional predicate will return
  `True` and the flag\nwill be required:\n\n        $ runhaskell Program.hs  --log_memory\n
  \       Some errors occurred:\n        Error with flag '--log_output': Flag is required\n\n...
  if you send the value for `log_output` then an error should not occur:\n\n        $
  runhaskell Program.hs  --log_memory --log_output /tmp/memorylog.tmp\n        log_memory:
  True\n        log_output: Just \"/tmp/memorylog.tmp\"\n\n\nGlobal validation\n=====\n\nA
  global validation rule is a function that will be evaluated with the `FlagResults`\nafter
  the processing stage and will determine if the current state is valid.\n\nIt is
  the last stage of flag processing. If there is a validation error then this error\nis
  reported to the user. This validation is done by using the `validate` function that\ntakes
  a function that returns a `Maybe String`, `Nothing` being a passing result and `Just\nerr`
  being failing result with an `err` error message.\n\nFor example:\n\n```haskell\nflagData
  = combine [ flagToData user_id\n                   , validate (\\fr -> if get fr
  user_id < 0\n                                      then Just \"user id negative
  error\"\n                                      else Nothing)\n                   ]\n```\n\nAn
  error will be produces if the application is run with a negative `user_id`.\n\n\nFlag
  parsers\n=====\n\nFlag parser configurations.\n\n### Parsers\n\n#### `intParser`\nParses
  a flag value to an integer.\n\n#### `floatParser`\nParses a flag value to a float.\n\n####
  `doubleParser`\nParses a flag value to a double.\n\n#### `charParser`\nParses a
  flag value to a char.\n\n#### `stringParser`\nParses a flag value to a string.\n\n####
  `boolParser`\nParses a flag value to a boolean.\n\n#### `arrayParser`\nParses a
  flag value to an array.\n\n\n### Parser wrappers\n\n### `toMaybeParser`\n\nTakes
  a `parser` as argument and wraps it so it becomes a `Maybe a` parser.\n\nUsed to
  convert an existent parser to an optional parser.\n\n    intPaser :: FlagArgument
  -> Int\n    toMaybeParser intParser :: FlagArgument -> Maybe Int\n\nIf the flag
  was missing or the flag value was missing then the new parser will\nreturn `Nothing`,
  otherwise the wrapped parser is called.\n\nIt comes handy when you create a flag
  of type `Maybe a` and you want to use one of the\nexistent parsers:\n\n```haskell\nuser_id
  :: Flag (Maybe Int)\nuser_id = make (\"user_id\", \"help\", [parser (toMaybeParser
  intParser)])\n```\n\nSince this seems to be a common pattern the `maybeParser` method
  was created that\ncombines the `parser` function with the `toMaybeParser`. The previous
  example is\nequivalent to:\n\n```haskell\nuser_id :: Flag (Maybe Int)\nuser_id =
  make (\"user_id\", \"help\", [maybeParser intParser])\n```\n\n\nFlag operations\n=====\n\nFlag
  operations allows the user to set the value of a flag based on the previous value
  set.\nThis is useful in situations where configuration files are used, so that a
  child configuration\nfile can extend the value of a flag set in a parent configuration
  file.\n\nOperations are specified when setting a value for a flag. This is the syntax
  to set a flag:\n`--flag_name [operation] flag_value`. If the `[operation]` is not
  set then the `assign (=)`\noperation is implied.\n\n\n### Assign\n\nThis is the
  default operation. Sets the value of the flag, overwriting any previous value if\nthere
  was any. This is the default operation unless the user\n[changed it](#change-flag-default-operation)
  in the flag configuration.\n\nExample:\n\n        $ runhaskell Program.hs --file
  = \"/home/user/\" --file = \"/tmp\"\n        file: \"/tmp\"\n\n### Inherit keyword\n\nThe
  `$(inherit)` keyword can be used in the flag value and will be expanded to the previous\nvalue
  of the flag (or to empty string if no previous value).\n\nExample:\n\n        $
  runhaskell Program.hs --file = \"/home/user\" --file = \"$(inherit)/local/tmp\"\n
  \       file: \"/home/user/local/tmp\"\n\n... and with no previous value:\n\n        $
  runhaskell Program.hs --file = \"$(inherit)/local/tmp\"\n        file: \"/local/tmp\"\n\n\n###
  Append\nIt's an specification of the `$(inherit)` keyword to append the current
  value of the flag to\nthe previous. There are two ways to append, using the `+=`
  symbol or the `+=!` symbol.\n\nThey are the same except that `+=` puts a space between
  previous value and current value (if\nthere is a previous value for the flag).\n\nThey
  are equivalent to:\n\n        --file += /local/tmp   <=> --file = \"$(inherit) /local/tmp\"
  \  -- space in between\n        --file +=! /local/tmp  <=> --file = \"$(inherit)/local/tmp\"
  \   -- no space in between\n\nExample `(+=)`:\n\n        $ runhaskell Program.hs
  --warning = \"1 2\" --warning += \"3\"\n        warning: \"1 2 3\"\n\nExample `(+=!)`:\n\n
  \       $ runhaskell Program.hs --warning = \"warn-1,2\" --warning +=! \",3\"\n
  \       warning: \"warn-1,2,3\"\n\n\n### Prepend\nIt's an specification of the `$(inherit)`
  keyword to prepend the current value of the flag to\nthe previous. There are two
  ways to prepend, using the `=+` symbol or the `=+!` symbol.\n\nThey are the same
  except that `=+` puts a space between previous value and current value (if\nthere
  is a previous value for the flag).\n\nThey are equivalent to:\n\n        --file
  =+ /local/tmp   <=> --file = \"/local/tmp $(inherit)\"   -- space in between\n        --file
  =+! /local/tmp  <=> --file = \"/local/tmp$(inherit)\"    -- no space in between\n\nExample
  `(=+)`:\n\n        $ runhaskell Program.hs --warning = \"1 2\" --warning =+ \"0\"\n
  \       warning: \"0 1 2\"\n\nExample `(=+!)`:\n\n        $ runhaskell Program.hs
  --warning = \"warn-1,warn-2\" --warning =+! \"warn-0,\"\n        warning: \"warn-0,warn-1,warn-2\"\n\n###
  Change flag default operation\n\nBy default a flag's default operation is the `assign
  (=)` operation. So if the user sends\na flag and it's value without explicitly using
  an operation this is the operation used.\n\nNow if you want to change this behavior
  for a given flag you can do so by using the\n`operation` flag configuration. This
  takes an operation as an argument and sets this\nas the default operation for the
  flag:\n\n```haskell\nwarning = make (\"warn\", \"warnings to print\", [parser stringParser,
  operation append])\n```\n\nNow if you run the program like this:\n\n        $ runhaskell
  Program.hs --warn 1 --warn 2 --warn 3\n        warn: \"1 2 3\"\n\nYou can overwrite
  this default if you specify the operation in the command line:\n\n        $ runhaskell
  Program.hs --warn 1 --warn 2 --warn 3 --warn = 0\n        warn: \"0\"\n\nThe available
  operations for the flag are these:\n\n        * `assign` (=)\n        * `append`
  (+=)\n        * `append'` (+=!)\n        * `prepend` (=+)\n        * `prepend'`
  (=+!)\nBuild\n=====\n\nBuild from source using `build` (build and run tests):\n\n
  \   $ ./build\n\nOr using cabal:\n\n    $ cabal build     -- builds the text\n    $
  cabal test      -- runs all tests\n\n"
license-name: Apache-2.0
