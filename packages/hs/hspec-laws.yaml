homepage: ''
changelog-type: ''
hash: 68d3aaf92af0b386a479c18243e80f258ad478b6437163a7f557e0918ade91b9
test-bench-deps:
  base: ==4.*
  hspec: -any
  markdown-unlit: -any
  QuickCheck: -any
  hspec-laws: -any
maintainer: Simon Hengel <sol@typeful.net>
synopsis: Document and test laws for standard type classes
changelog: ''
basic-deps:
  base: ==4.*
  hspec: ! '>=1.4'
  QuickCheck: -any
all-versions:
- 0.0.0
author: Simon Hengel <sol@typeful.net>
latest: 0.0.0
description-type: text
description: ! "# Reusable specifications\n(similar in spirit to [checkers](http://hackage.haskell.org/package/checkers))\n\n##
  Check Monoid laws\n\n`shouldSatisfyMonoidLaws` can be used to specify, that a given
  type should\nsatisfy the Monoid laws.\n\n~~~ {.haskell .literate}\n-- file Spec.hs\nimport
  Test.Hspec\nimport Test.Hspec.Laws\n\nmain :: IO ()\nmain = hspec $ do\n  describe
  \"List as a Monoid\" $\n    shouldSatisfyMonoidLaws (undefined :: [Int])\n~~~\n\nRunning
  this produces a nice spec.\n\n~~~\n$ runhaskell Spec.hs\n\nList as a Monoid\n  mempty\n
  \   - is a left identity\n    - is a right identity\n\n  mappend\n    - is associative\n\nFinished
  in 0.1142 seconds\n3 examples, 0 failures\n~~~\n"
license-name: MIT
