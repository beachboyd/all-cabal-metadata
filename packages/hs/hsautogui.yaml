homepage: https://github.com/mitchellvitez/hsautogui#readme
changelog-type: markdown
hash: 280744ef7cd7d07b7ebbca2aeed3054c028b6e074309c8ac2c56800843495277
test-bench-deps: {}
maintainer: mitchell@vitez.me
synopsis: Haskell bindings for PyAutoGUI, a library for automating user interaction
changelog: |
  # ChangeLog

  ## 0.1.0

  Initial bindings to (most of) PyAutoGUI
basic-deps:
  base: '>=4.7 && <5'
  text: -any
  containers: -any
  hsautogui: -any
  cpython: -any
  mtl: -any
  template-haskell: -any
all-versions:
- 0.1.0
author: Mitchell Vitez
latest: 0.1.0
description-type: markdown
description: "# hsautogui\n\nHaskell bindings for [PyAutoGUI](https://pyautogui.readthedocs.io)\n\n##
  About\n\nThese are straightforward Haskell bindings for PyAutoGUI, a library for
  automating user interaction tasks, using haskell-cpython. \n\nThis is just about
  the simplest possible example:\n\n```haskell\nimport AutoGUI\nmain = runAutoGUI
  $ write \"Hello, world!\"\n```\n\nThis doesn't just print `Hello, world!` to the
  screen, but instead simulates a user typing it in.\n\n## Language Comparison\n\nWhen
  using this library, the following Haskell and Python examples do the same thing:\n\n```haskell\nimport
  AutoGUI\nimport Control.Monad.IO.Class (liftIO)\n\nmain :: IO ()\nmain = do\n  putStrLn
  \"3 seconds until beeping begins\"\n  sleep 3\n  runAutoGUI $\n    forM_ [1..100]
  $ \\i -> do\n      write \"beep\"\n      press [key|enter|]\n      liftIO $ sleep
  0.5\n```\n\n```python\nimport pyautogui\nimport time\n\nprint('3 seconds until beeping
  begins')\ntime.sleep(3)\n\nfor i in range(1, 101):\n    pyautogui.write('beep')\n
  \   pyautogui.press('enter')\n    time.sleep(0.5)\n```\n\n## Constructing a `Key`\n\nBecause
  not all valid `Text`s are valid `Key`s, we need a way to check that `Key`s are valid
  when creating them. This leads to `mkKey :: Text -> Maybe Key`. However, using the
  `key` quasiquoter, we can sidestep having to use `Maybe` by catching invalid keys
  at compile time. For example, `[key|backspace|]` is a valid `Key` which we can construct
  and check at compile time.\n\nThis is especially useful for some data that looks
  like this, where there are way too many values (and values with strange characters)
  for a sum type to be especially handy, but we want to check validity in some way.
  We generally know which keys we want to use at compile time.\n\n## Overview\n\n###
  General\n\n- `runAutoGUI :: AutoGUI a -> IO a` runs `AutoGUI` actions in `IO`\n\n###
  Debug\n- `pause :: Double -> AutoGUI ()` - Set a number of seconds to wait in between
  autogui actions\n- `failsafe :: Bool -> AutoGUI ()` - When set to true, move the
  mouse to the upper-left corner of the screen to throw a Python exception, and quit
  the program\n- `sleep :: Double -> IO ()` - Sleep for a given fractional number
  of seconds\n\n### Info\n- `size :: AutoGUI (Integer, Integer)` - (screenWidth, screenHeight)
  of the primary monitor in pixels\n- `position :: AutoGUI (Integer, Integer)` - (x,
  y) position of the mouse\n- `onScreen :: Integer -> Integer -> AutoGUI Bool` - Test
  whether (x, y) is within the screen size\n\n### Keyboard\n- `write :: Text -> AutoGUI
  ()` - Write out some Text as though it were entered with the keyboard\n- `typewrite
  :: Text -> AutoGUI ()` - Write out some Text as though it were entered with the
  keyboard, newline is enter\n- `typewriteKeys :: [Key] -> AutoGUI ()` - Write out
  some Text as though it were entered with the keyboard, newline is enter\n- `writeWithInterval
  :: Text -> Double -> AutoGUI ()` - Write out some Text as though it were entered
  with the keyboard, with a specified number of seconds between keypresses\n- `press
  :: Key -> AutoGUI ()` - Simulate a keypress\n- `keyDown :: Key -> AutoGUI ()` -
  Simulate holding a key down\n- `keyUp :: Key -> AutoGUI ()` - Simulate releasing
  a key\n- `hotkey :: [Key] -> AutoGUI ()` - Press a key combination\n\n### Keys\n-
  `key :: QuasiQuoter` - This quasiquoter lets you use [key|enter|] at compile time,
  so you don't get a Maybe as you would from mkKey\n- `mkKey :: Text -> Maybe Key`\n-
  `keyToText :: Key -> Text`\n- `isValidKey :: Text -> Bool`\n- `keys :: Set Key`\n\n###
  MessageBoxes\n- `alert :: Text -> AutoGUI ()` - Show a box onscreen until dismissed\n-
  `confirm :: Text -> AutoGUI Bool` - Show a box onscreen until a user hits OK or
  Cancel. Return True on OK, False on Cancel, and False if user closes the box\n-
  `password :: Text -> AutoGUI Text` - Show a box onscreen, allowing user to enter
  some screened text. Return empty string if user closes the box\n- `prompt :: Text
  -> AutoGUI Text` - Show a box onscreen, allowing user to enter some text. Return
  empty string if user closes the box\n\n### Mouse\n- `moveTo :: Integer -> Integer
  -> AutoGUI ()` - Move the mouse to an (x, y) position\n- `moveToDuration :: Integer
  -> Integer -> Double -> AutoGUI ()` - Move the mouse to an (x, y) position, over
  a number of seconds\n- `moveRel :: Integer -> Integer -> AutoGUI ()` - Move the
  mouse relative to where it is now\n- `moveRelDuration :: Integer -> Integer -> Double
  -> AutoGUI ()` - Move the mouse relative to where it is now, over a number of seconds\n-
  `click :: AutoGUI ()` - Click the mouse\n- `leftClick :: AutoGUI ()` - Left click
  the mouse\n- `doubleClick :: AutoGUI ()` - Double click the mouse\n- `tripleClick
  :: AutoGUI ()` - Triple click the mouse\n- `rightClick :: AutoGUI ()` - Right click
  the mouse\n- `middleClick :: AutoGUI ()` - Middle click the mouse\n- `moveAndClick
  :: Integer -> Integer -> AutoGUI ()` - Move the mouse to some (x, y) position and
  click there\n- `drag :: Integer -> Integer -> AutoGUI ()` - Clicks and drags the
  mouse through a motion of (x, y)\n- `dragDuration :: Integer -> Integer -> Double
  -> AutoGUI ()` - Clicks and drags the mouse through a motion of (x, y), over a number
  of seconds\n- `dragTo :: Integer -> Integer -> AutoGUI ()` - Clicks and drags the
  mouse to the position (x, y)\n- `dragToDuration :: Integer -> Integer -> Double
  -> AutoGUI ()` - Clicks and drags the mouse to the position (x, y), over a number
  of seconds\n- `dragRel :: Integer -> Integer -> AutoGUI ()` - Clicks and drags the
  mouse through a motion of (x, y)\n- `dragRelDuration :: Integer -> Integer -> Double
  -> AutoGUI ()` - Clicks and drags the mouse through a motion of (x, y)\n- `scroll
  :: Integer -> AutoGUI ()` - Scroll up (positive) or down (negative)\n- `mouseDown
  :: AutoGUI ()` - Press the mouse button down\n- `mouseUp :: AutoGUI ()` - Release
  the mouse button\n\n### Screen\n- `locateOnScreen :: FilePath -> AutoGUI (Maybe
  (Integer, Integer, Integer, Integer))` - Return (left, top, width, height) of first
  place the image is found\n- `locateCenterOnScreen :: FilePath -> AutoGUI (Maybe
  (Integer, Integer))` - Return (x, y) of center of an image, if the image is found\n\n"
license-name: BSD-3-Clause
