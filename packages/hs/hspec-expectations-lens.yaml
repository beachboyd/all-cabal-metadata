homepage: http://supki.github.io/hspec-expectations-lens/
changelog-type: markdown
hash: 881f177fbf1c09202cbe96273ee0689ce3e218f95d4a9b543eaf339d2b4b36d2
test-bench-deps:
  base: ==4.*
  hspec: -any
  silently: -any
  lens: -any
  hspec-expectations-lens: -any
maintainer: matvey.aksenov@gmail.com
synopsis: Hspec expectations for the lens stuff
changelog: ! "0.4.0\n=======\n\n  * Reflect API changes in `lens-4.7`\n\n0.3.0.0\n=======\n\n
  \ * Update to `lens-4.0`\n\n0.2.1.1\n=======\n\n  * _Maintenance_: Upper bound on
  `lens`\n\n0.2.1.0\n=======\n\n  * Add a `shouldPerform` expectation\n  * Improve
  expectations' error messages\n\n0.2.0.0\n=======\n\n  * Add a `shouldThrow` expectation,
  a lensy variant of `shouldThrow`\n\n  * Add a `Test.Hspec.Lens` module, re-exporting
  `Test.Hspec` with\n`Test.Hspec.Expectations.Lens` expectations\n\n  * More documentation
  with fake type signatures\n\n0.1.0.0\n=======\n\n  * `shouldHave`, `shouldNotHave`,
  `shouldView`, `shouldPreview`, and `shouldList`\n"
basic-deps:
  base: ==4.*
  hspec: ! '>=1.12'
  HUnit: -any
  lens: ! '>=4.7'
  hspec-expectations: ! '>=0.5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.4.0
author: Matvey Aksenov
latest: 0.4.0
description-type: text
description: ! "hspec-expectations-lens\n=======================\n\nhspec-expectations-lens
  is a set of expectations for [Hspec][hspec]\nwith a [lens][lens]-compatible interface\n\nThis
  README is a literate haskell file which contains a Hspec spec.\nYou can run it with
  `runhaskell`; result is something akin to:\n\n\n```shell\n% runhaskell README.lhs\n\nshouldHave\n
  \ - checks targets exist\n  - looks as deep into structure as you want\n  - replaces
  'shouldBe'\n  - checks a bigger part of the structure for equality\n  - checks the
  whole structure for equality\n\nshouldNotHave\n  - is the opposite of 'shouldHave'\n\nshouldView\n
  \ - gets a single target verbatim\n  - combines multiple targets using Monoid instance\n\nshouldList\n
  \ - combines multiple targets into list\n\nshouldPreview\n  - gets the first target\n\nshouldPerform\n
  \ - performs an action and gets the first target\n\nshouldThrow\n  - looks into
  the 'error' call\n  - looks into the division by zero\n```\n\nExpectations\n------------\n\nWe
  start with pragmas, module declaration, and imports we use later.\n\n> {-# LANGUAGE
  ExtendedDefaultRules #-} -- this is only neccessary because we don't like annotations\n>\n>
  module Main (main) where\n>\n> import Control.Lens\n> import Control.Exception (evaluate)\n>
  import Control.Exception.Lens (_ErrorCall, _DivideByZero)\n> import Test.Hspec.Lens\n>\n>
  main :: IO ()\n> main = hspec $ do\n\nhspec-expectations-lens expectations form
  several groups. First one contains `shouldHave`\nand `shouldNotHave` combinatorsâ€”they
  check whether a `Fold` you give them has (or doesn't have)\nany targets in the structure.\n\n>
  \  describe \"shouldHave\" $ do\n>     it \"checks targets exist\" $\n>       Right
  (Just (Left 'a')) `shouldHave` _Right\n\nWe can look arbitrarily deep into the structure;
  for instance, `_Right._Just._Left`\nwould also work here:\n\n>     it \"looks as
  deep into structure as you want\" $\n>       Right (Just (Left 'a')) `shouldHave`
  _Right._Just\n\nFinally, `shouldHave` can happily be used as a replacement for a
  vanilla `shouldBe`.\n\n>     it \"replaces 'shouldBe'\" $\n>       Right (Just (Left
  'a')) `shouldHave` _Right._Just._Left.only 'a'\n>\n>     it \"checks a bigger part
  of the structure for equality\" $\n>       Right (Just (Left 'a')) `shouldHave`
  _Right._Just.only (Left 'a')\n>\n>     it \"checks the whole structure for equality\"
  $\n>       Right (Just (Left 'a')) `shouldHave` only (Right (Just (Left 'a')))\n\n`shouldNotHave`
  is the opposite of `shouldHave` as its name implies, it checks\nwhether a `Fold`
  does not have any targets in the structure.\n\n>   describe \"shouldNotHave\" $\n>
  \    it \"is the opposite of 'shouldHave'\" $\n>       Right (Just (Left 'a')) `shouldNotHave`
  _Left\n\nNext group of expectations is those of them that actually care about the
  result\nof looking into the structure.  It consists of `shouldView`, `shouldPreview`,\n`shouldList`,
  and `shouldPerform`.  They derive names from `view`, `preview`, `toListOf`,\nand
  `perform` `combinators from the lens package.\n\n`shouldView` works similarly to
  `view`, no big surprises here. If a `Fold` is actually\na `Getter`, you just get
  its target:\n\n>   describe \"shouldView\" $ do\n>     it \"gets a single target
  verbatim\" $\n>       (1, (((1, 7), 8), 2, (3, 4), 5, 7)) `shouldView` 7 `through`
  _2._1._1._2\n\n(`through` is just a fancy name for `id`; it helps to avoid parentheses)\n\nOtherwise,
  if `Fold` has multiple targets, they are combined using `Monoid` instance\nfor the
  target type (and it better have one):\n\n>     it \"combines multiple targets using
  Monoid instance\" $\n>       [(\"foo\", 1), (\"bar\", 2), (\"baz\", 3)] `shouldView`
  \"foobarbaz\" `through` folded._1\n\n`shouldList` is like `toListOf`, that is, it
  combines its targets into the list:\n\n>   describe \"shouldList\" $\n>     it \"combines
  multiple targets into list\" $\n>       [(\"foo\", 1), (\"bar\", 2), (\"baz\", 3)]
  `shouldList` [1, 2, 3] `through` folded._2\n\n`shouldPreview` is like `preview`
  in that it only cares about the first target:\n\n>   describe \"shouldPreview\"
  $\n>     it \"gets the first target\" $\n>       [1..10] `shouldPreview` 10 `through`
  reversed.folded\n\nThe last combinator, which does not really belong to any of the
  previous groups,\nis `shouldThrow`. It uses composable selectors to determine which\nexception
  was thrown:\n\n>   describe \"shouldThrow\" $ do\n>     it \"looks into the 'error'
  call\" $\n>       error \"foo\" `shouldThrow` _ErrorCall.only \"foo\"\n>\n>     it
  \"looks into the division by zero\" $\n>       evaluate (1 `div` 0) `shouldThrow`
  _DivideByZero\n\n  [hspec]: http://hspec.github.io/\n  [lens]: https://github.com/ekmett/lens/\n"
license-name: BSD-2-Clause
