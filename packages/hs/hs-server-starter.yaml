homepage: https://github.com/hiratara/hs-server-starter#readme
changelog-type: ''
hash: 5f6d80def49a48cac722b1376c14de5d73fc5cab4db37950cf12cb8ec003eb24
test-bench-deps:
  unix: -any
  base: -any
  network: -any
  HUnit: -any
  hs-server-starter: -any
  temporary: -any
maintainer: hiratara@cpan.org
synopsis: Write a server supporting Server::Starter's protocol in Haskell
changelog: ''
basic-deps:
  warp: -any
  wai: -any
  base: ! '>=4.7 && <5'
  network: ! '>=2.6.3.1 && <2.9'
  hs-server-starter: -any
  http-types: -any
  directory: ! '>=1.3.0.0 && <1.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Masahiro Honma
latest: 0.1.0.2
description-type: markdown
description: |
  hs-server-starter
  =============

  ## Description

  Provides a utility to write server program which can be called via Perl's
  [https://github.com/kazuho/p5-Server-Starter](start_server) program using
  Haskell.

  This module does not provide a Haskell implementation of `start_server`,
  so you need to use the original Perl version or use
  [a version ported to golang](https://github.com/lestrrat/go-server-starter).

  ## SINOPSIS

  Since the `listenAll` function returns a listened `Network.Socket`, please call
  `accept` on it.

  ```haskell
  import qualified Network.ServerStarter.Socket as Starter
  import qualified Network.Socket               as Socket
  import qualified Network.Wai                  as Wai
  import qualified Network.Wai.Handler.Warp     as Warp

  main :: IO ()
  main = do
    (socket:_) <- Starter.listenAll
    Socket.SockAddrInet port _ <- Socket.getSocketName socket
    let setting = Warp.setPort (fromEnum port)
                $ Warp.defaultSettings
    Warp.runSettingsSocket setting socket app

  app :: Wai.Application
  app = ...
  ```

  Then run `start_server` and access to `http://localhost:12345` .

  ```
  $ start_server --port 12345 -- stack exec server-starter-warp-example
  ```

  ## Author

  Masahiro Honma (<hiratara@cpan.org>)
license-name: BSD-3-Clause
