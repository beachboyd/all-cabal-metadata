homepage: http://hspec.github.io/
changelog-type: markdown
hash: 2203e015345656336106dfc27f7a64a41b80afb2d11a7df5914e9f2f603857e7
test-bench-deps: {}
maintainer: Simon Hengel <sol@typeful.net>
synopsis: A Testing Framework for Haskell
changelog: ! "## Changes in 2.6.0\n   - Allow to focus individual spec items (see
  #319)\n   - Do not calculate diff on `--no-diff` (see #332)\n   - Remove deprecated
  module Test.Hspec.Core\n\n## Changes in 2.5.9\n   - Extract source locations from
  RecConError (see #375)\n\n## Changes in 2.5.8\n   - Add `modifyArgs` and `modifyMaxShrinks`
  to `Test.Hspec.QuickCheck` (see #380)\n\n## Changes in 2.5.7\n   - GHC 8.6.1 related
  changes\n\n## Changes in 2.5.6\n   - Compatibility with `QuickCheck-2.12`\n\n##
  Changes in 2.5.5\n  - Use `module[line:column]` instead of `module:line:column`
  as default label\n    for `describe`/`it` (fixes #366)\n\n## Changes in 2.5.4\n
  \ - Show how to rerun individual spec items on test failures (see #205)\n\n## Changes
  in 2.5.3\n  - Treat character escapes like `\\NUL` as single tokens on `--diff`
  (see #351)\n  - Allow a `/` at the beginning and at the end of an absolute path
  that is\n    passed to `--match` or `--skip`\n\n## Changes in 2.5.2\n  - Use module:line:column
  as default label for describe/it (see #250)\n  - Warn if user is affected by https://ghc.haskell.org/trac/ghc/ticket/13285
  (see #329)\n\n## Changes in 2.5.1\n  - Disable tests for Test.Hspec.Core.Timer (see
  #352)\n\n## Changes in 2.5.0\n  - Add `sequential` (see #311)\n  - Add support for
  `--diff` when `shouldBe` is uesd with\n    `QuickCheck`-properties\n  - Add source
  locations when `shouldBe` is uesd with `QuickCheck` properties\n  - Print `QuickCheck`
  labels on success (see #297)\n  - Retain output of `verbose`, `label`, `collect`,
  `classify`, etc. for\n    `QuickCheck` properties (see #257)\n  - Extract source
  location from error / undefined (see #316)\n  - Parse source locations from pattern
  match failures\n  - Include source column when formatting source locations\n  -
  Colorize whitespaces with background color instead of foreground color with\n    `--diff`\n
  \ - Run `Test.Hspec.Core.Formatters.exampleProgress` in `FormatM` instead of\n    `IO`\n
  \ - Make sure that progress output is always cleared (fixes #301)\n  - Add location
  information to `pending` (not used by any formatter yet)\n  - Include duration for
  each spec item in new formatter API (see #315) (not yet exposed)\n  - Removed deprecated
  module `Test.Hspec.HUnit`, use\n    `Test.Hspec.Contrib.HUnit` instead\n  - Deprecate
  `--out`\n  - Remove `BestEffort` source locations\n\n## Changes in 2.4.8\n  - compatibility
  with GHC 8.4.1-alpha3\n\n## Changes in 2.4.7\n  - compatibility with `QuickCheck-2.11.3`
  and up (note that `QuickCheck`\n    versions `2.11` to `2.11.2` are not fully supported)\n\n##
  Changes in 2.4.6\n  - compatibility with the upcoming version `4.11.0.0` of `base`\n\n##
  Changes in 2.4.5\n  - `hspec-discover`: Sort specs using natural sort order\n\n##
  Changes in 2.4.4\n  - Require quickcheck-io >= 0.2.0\n\n## Changes in 2.4.3\n  -
  Read command-line options from environment variable `HSPEC_OPTIONS`\n\n## Changes
  in 2.4.2\n  - Use `--diff` by default\n  - Add `--failure-report` (see #266)\n\n##
  Changes in 2.4.1\n  - Compatibility with HUnit < 1.3\n\n## Changes in 2.4.0\n  -
  Read command-line options from config files `~/.hspec` and `.hspec`\n  - Add support
  for `--diff`\n  - Add `xit`, `xspecify`, `xdescribe` and `xcontext` (see #252)\n
  \ - Add `--rerun-all-on-success`\n  - Report exceptions in `beforeAll` operations
  only once\n  - Add indentation when actual/expected contain newlines (see #263)\n
  \ - More graceful shutdown on ctrl-c (see #270)\n  - Run around-hook for Bool and
  Result (see #252)\n  - Include `CHANGES.markdown` in package tarball\n\nInternal
  changes:\n\n  - Rename `Fail` constructor of `Result`-type to `Failure`\n  - Add
  `FailureReason` type\n  - Add `Test.Hspec.Core.Spec.safeEvaluateExample`\n\n## Changes
  in 2.3.2\n  - Compatibility with HUnit 1.5\n\n## Changes in 2.3.1\n  - Fix build
  for HUnit < 1.4\n\n## Changes in 2.3.0\n  - Proper support for GHC 8 call stacks\n\n##
  Changes in 2.2.4\n  - Compatibility with QuickCheck-2.9\n\n## Changes in 2.2.3\n
  \ - Make sure that `cabal haddock` works for `hspec-discover`\n  - Forward compatibility
  for HUnit 1.4\n  - Fix tests for GHC 8.0.1-rc1\n\n## Changes in 2.2.2\n  - Fix compilation
  for GHC 8.0.1-rc1\n\n## Changes in 2.2.1\n  - Make sure that Vim's default `errorformat`
  recognizes exact locations\n  - GHCJS compatibility\n\n## Changes in 2.2.0\n  -
  Add source locations to test `Result`\n\n## Changes in 2.1.10\n  - GHC 7.0.* compatibility\n\n##
  Changes in 2.1.9\n  - Make use of GHC 7.10.2 source locations\n  - Add `--jobs`\n\n##
  Changes in 2.1.8\n  - Depend on `hspec-expectations-0.7.0\"\n\n## Changes in 2.1.7\n
  \ - Add `beforeAll_`\n\n## Changes in 2.1.6\n  - If there were no previous failures,
  run all spec items on `--rerun`\n\n## Changes in 2.1.5\n  - Compatibility with QuickCheck-2.8\n\n##
  Changes in 2.1.4\n  - Make `hspec-discover` ignore modules with invalid module names,
  this fixes\n    issues with `flycheck`'s temporary files\n\n## Changes in 2.1.3\n
  \ - Format source locations like gcc does\n\n## Changes in 2.1.2\n  - Re-export
  `before_` from `Test.Hspec`\n\n## Changes in 2.1.1\n  - Add `before_`\n  - Add command-line
  option `--skip`\n\n## Changes in 2.1.0\n  - Generalize `after_`, `afterAll_` and
  `around_`\n\n## Changes in 2.0.2\n  - Indent error messages for failed examples
  (fixes #186)\n  - Export `defaultParams` from `Test.Hspec.Core.Example`\n  - Bring
  back `Test.Hspec.HUnit` and deprecate it to provide a smother upgrade\n    path\n\n##
  Changes in 2.0.1\n  - Add missing extra source files to for `hspec-discover`\n\n##
  Changes in 2.0.0\n  - Split package into `hspec`, `hspec-core` and `hspec-discover`\n
  \ - Allow hooks (`before`, `around`, etc.) to pass arguments to spec items\n  -
  Do not print `-` in front of spec items with `specdoc` formatter\n  - Move `Test.Hspec.HUnit`
  to `hspec-contrib`\n\n## Changes in 1.12.4\n  - Add `specGroup` and `specItem` to
  `Test.Hspec.Core`\n  - Deprecate `Test.Hspec.Core.it` and `Test.Hspec.Core.describe`\n\n##
  Changes in 1.12.3\n  - Make `hspec-discover` work with `-XNoImplicitPrelude`\n\n##
  Changes in 1.12.2\n  - Include `IOErrorType` when printing uncaught `IOException`s
  (see #204)\n\n## Changes in 1.12.1\n  - Add `--module-name` option to `hspec-discover`
  (see #168)\n\n## Changes in 1.12.0\n  - Add optional source location to spec items\n
  \ - Move item requirement text from `SpecItem` constructor to `Item` data type\n
  \ - Remove `BuildSpecs` constructor from `SpecTree`, having `runIO` this is not\n
  \   really needed\n  - Add `mapSpecTree` to `Test.Hspec.Core`\n  - Add `afterAll`
  (see #188)\n  - Do not return `Result` from `hspecWith` and accept command-line
  options\n    (the old behavior is still available as `hspecWithResult`)\n  - Rename
  `configHandle` to `configOutputFile`\n  - Omit empty `describe` groups from report\n
  \ - Do not pass position to `Formatter.exampleGroupStarted` (we can not support\n
  \   this with the upcomming cleanup actions #188)\n  - Do not print empty lines
  before/after spec groups\n  - Deprecate `Test.Hspec.Formatters.newParagraph`\n\n##
  Changes in 1.11.4\n  - Make test suite independent from QuickCheck seed (see #187)\n\n##
  Changes in 1.11.3\n  - Depend on `hspec-expectations-0.6.1`\n\n## Changes in 1.11.2\n
  \ - Add `beforeAll`\n\n## Changes in 1.11.1\n - Add `specify` as an alias for `it`\n\n##
  Changes in 1.11.0\n - Add `BuildSpecs` constructor to internal `SpecTree` data structure.
  \ This\n   allows you to do `IO` while constructing the spec tree.\n - Add `runIO`\n\n##
  Changes in 1.10.0\n - Do not use exception type to distinguish between synchronous/asynchronous\n
  \  exceptions (thanks to Michael Snoyman)\n - Remove `Example` instance for `Test.HUnit.Test`
  (#101), use\n   `Test.Hspec.HUnit.fromHUnitTest` instead.\n - Do not reexport `property`
  from `Test.Hspec.QuickCheck`\n - Move `ProgressCallback` out of `Params`\n - Add
  show instance for `Params`\n - Move requirement text from `Item` to `SpecItem` constructor\n
  - Remove deprecated modules and functions\n\n## Changes in 1.9.5\n - Make sure that
  ctrl-c works properly with GHC 7.8.* and QuickCheck-2.6\n\n## Changes in 1.9.4\n
  - Compatibility with transformers-0.4.0.0\n\n## Changes in 1.9.3\n - Make internal
  Tree data structure more strict (#169)\n\n## Changes in 1.9.2\n - Print type of
  exceptions that are raised from QuickCheck properties (#94)\n\n## Changes in 1.9.1\n
  - Bring back compatibility with older versions of QuickCheck (#166)\n\n## Changes
  in 1.9.0\n - Depend on QuickCheck 2.7\n\n## Changes in 1.8.3\n - Do not use color
  if `TERM=dumb` (see #158)\n\n## Changes in 1.8.2\n - `hspec-discover` now accepts
  `--no-main` which results in a top-level spec\n   being generated instead of a test
  driver (thanks @DanielG)\n - Make sure that `after` is run on failing tests (see
  #159)\n\n## Changes in 1.8.1\n - Add `shouldMatchList`\n\n## Changes in 1.8.0\n
  - Run `before`/`after`/`around` for each single check of a QuickCheck property\n
  - Add `Test.Hspec.Core.mapSpecItem`\n - Add `modifyMaxSuccess`, `modifyMaxDiscardRatio`
  and `modifyMaxSize` to\n   `Test.Hspec.QuickCheck`\n - Don't fail if callback is
  not called in `around`\n - `hspec-discover`: Remove `--nested` option\n - `hspec-discover`:
  Ignore `Spec.hs`/`Spec.lhs`\n\n## Changes in 1.7.2\n - Add `after` and `around`\n\n##
  Changes in 1.7.1\n - Add `shouldContain` (thanks to Alfredo Di Napoli)\n - When
  printing progress, skip total if it is 0\n - Do not colorize the description/requirement
  in failure list\n\n## Changes in 1.7.0\n - Add `--depth` for use with `hspec-smallcheck`\n\n##
  Change in 1.6.2\n - Add `before`\n - Add `--qc-max-discard` and `--qc-max-size`\n\n##
  Changes in 1.6.1\n - Allow to specify the output file with `--out`\n\n## Changes
  in 1.6.0\n - Add support for parallelization\n - Change license to MIT\n - Add MonadIO
  instance for FormatM\n - Add support for custom formatters to hspec-discover\n -
  Add hspecResult\n - Rename `--re-run` to `--rerun` + add documentation (#95)\n -
  Remove `configVerbose`\n - Use same `--qc-max-success` on `--rerun` (#125)\n - Add
  command-line option `--no-color`, `--color` does not accept arguments\n   anymore
  (#130)\n\n## Changes in 1.5.4\n - Make sure that QuickCheck is never chatty\n -
  Make sure progress for QuickCheck examples is shown\n\n## Changes in 1.5.3\n - Print
  \"Randomized with seed ...\" only once\n\n## Changes in 1.5.2\n - Add `--seed`,
  it can be used to specify the seed for QuickCheck properties\n - Reuse previous
  seed on `--re-run`\n\n## Changes in 1.5.1\n - Depend on quickcheck-io\n\n## Changes
  in 1.5.0\n - Allow to use expectations as QuickCheck properties (#80)\n - Do not
  suppress output to `stdout`\n - Change type of `pending` to `Expectation`, add `pendingWith`
  (#121)\n - Add the `example` function, it fixes the type of an Expectation (#86)\n
  - Rename `--fast-fail` to `--fail-fast` (for consistency with RSpec)\n - Do not
  clutter Cabal test suite logs with QuickCheck output (#112)\n - Skip redundant output
  from QuickCheck failure messages (#102)\n\n## Changes in 1.4.5\n - hspec-discover
  now discovers .lhs files, too\n\n## Changes in 1.4.4\n - Visually distinguish error
  message from requirements in the summary (#100)\n - Export `formatException` from
  `Test.Hspec.Formatters`\n - Add `--fast-fail` (#82)\n - Print a summary on UserInterrupt/ctrl-c
  (#107)\n\n## Changes in 1.4.3\n - Add `--dry-run` (#111)\n\n## Changes in 1.4.2\n
  - Properly handle ctrl-c while running QuickCheck properties (#93)\n - Default to
  `--color=always` when `--color` is used without argument (#106)\n - treat `--qc-max-success`
  as an alias for `--maximum-generated-tests`\n\n## Changes in 1.4.1\n - Used CPU
  time is now only included in the test summary if run with\n   `--print-cpu-time`.\n\n##
  Changes in 1.4.0\n - We now have a manual at http://hspec.github.io/.  The sources
  are in\n   `doc/`.  It's still work in progress.  Contributions are very welcome!\n
  - The Haddock documentation now indicates the stability of each exposed\n   module.
  \ `Test.Hspec` is now considered stable.\n - `hspec` now supports command-line options\n
  \  - `--color` can be used to enable/disable colored output\n   - `--format` can
  be used to pick a specific formatter\n   - `--html` can be used to produce an HTML
  report\n   - `--maximum-generated-tests` can be used to specify QuickCheck's\n     `maxSuccess`\n
  \  - `--match` only runs spec items that match a given string\n   - `--re-run` only
  runs spec items that previously failed.  This is\n     undocumented,\n     experimental
  and only works within GHCi (use `:reload` / `:main`)!\n - Runner functions exported
  from `Test.Hspec.Runner` new expect a monadic\n   spec.\n - `fromHUnitTest` has
  been added.  It can be used to run existing HUnit test\n   suites with Hspec.\n
  - The `Example` instance for HUnit `Test`s has been deprecated.\n   `fromHUnitTest`
  can be used instead.  The primary motivation is, that\n   `fromHUnitTest` gives
  more detailed reporting for nested HUnit test suites.\n - `Test.Hspec.Monadic` has
  been deprecated, all functionality is available\n   through one of `Test.Hspec`,
  `Test.Hspec.Core` or `Test.Hspec.Runner`.\n - More of Hspec's internals are now
  exposed from `Test.Hspec.Core`\n - All runner functions for the core spec type (aka
  as non-monadic spec) have\n   been deprecated, use e.g. `Test.Hspec.hspec . fromSpecList`
  instead.  The\n   motivation is to provide an API that does not expose colliding
  names.\n - Some other stuff from `Test.Hspec.Core` that collides with other parts
  of\n   the API has been deprecated.  Compatible alternatives are given in each\n
  \  deprecation message.\n - The default formatter now produces less whitespace (#73)
  + other minor\n   improvements\n - The formatter API has been revamped.\n - The
  exception type is now printed if an example fails due to an exception\n   (#50)\n
  - The number of pending examples is now printed after each test run (#85)\n - `--verbose`
  has been added (#87)\n\n## Changes in 1.3.0\n\n - `Test.Hspec` now re-exports the
  monadic API.  If you still use the\n   non-monadic API, you can use `Test.Hspec.Core`
  as a drop-in replacement.\n\n - `hspec-expectations`, a set of combinators that
  allow to express\n   expectations about the outcome of code examples, is now included
  with Hspec.\n   Have a look at the [README of `hspec-expectations`]\n   (https://github.com/sol/hspec-expectations#readme)\n
  \  for a short introduction.\n\n - `hspec-discover`, a mechanism for automatic spec
  discovery, is now an\n   official part of Hspec.\n   Have a look at [`hspec-discover`'s
  README]\n   (https://github.com/hspec/hspec/tree/master/hspec-discover#readme)\n
  \  for a short introduction.\n\n## Changes in 1.2.0\n\n - `hspec` has been removed,
  and `hspecX` has been renamed to `hspec` (see\n   [#71](https://github.com/hspec/hspec/issues/71))\n\n
  - `hHspec` now returns a summary of the test run.\n\n - The time reporting after
  a test run is not colored anymore.\n\n## Changes in 1.1.3\n\n - `Test.Hspec` warns
  now about future changes: It will re-export\n   `Test.Hspec.Monadic` in the future.
  \ If you still use the non-monadic API,\n   you can either use `Test.Hspec.Core`
  as a drop-in replacement, or migrate your\n   code to the monadic API.\n\n   The
  monadic API is more stable and easier to use.  Now is a good time to\n   switch!\n\n
  - `Test.Hspec.Core` is now a proper superset of `Test.Hspec`\n\n## Changes in 1.1.2\n\n
  * All descriptions of nested examples are now included in summary for failing\n
  \  examples\n\n * `context` is now an alias for `describe`\n\n## Changes in 1.1.1\n\n
  * Specs from Test.Hspec.Monadic has been renamed to Spec.  For backward\n   compatibility
  Specs is still kept as an alias.\n\n## Changes in 1.1.0\n\n### The reason for pending
  examples is now optional\n\nWith this change, both of the following code snippets
  work.\n\n```haskell\nit \"some behavior\" $\n  pending  -- no reason given\n```\n\n```haskell\nit
  \"some other behavior\" $\n  pending \"some reason\"\n```\n\n### Hspec does not
  rely on ExistentialQuantification anymore\n\n### The type used to represent specs
  is now abstract\n\nThis should give more useful error messages when adapting old
  specs that use\nthe non-monadic API for `hspec-1.0`/`hspec-1.1`.\n\n### Several
  internal types and functions have been deprecated\n\nThose are internal functions,
  and they will be removed/hidden with the next\nrelease.  If you use any of those,
  update your code.  If you really need them,\n[open a ticket](https://github.com/hspec/hspec/issues)
  and describe your use\ncase.\n\n## Changes in 1.0.0\n\n### Hspec now re-uses QuickCheck's
  property function\n\n`Test.Hspec.QuickCheck.property` is now simply a re-exports
  of\n`Test.QuickCheck.property`.  This has the advantage that you do not get a name\ncollision
  if you import both, `Test.Hspec.QuickCheck` and `Test.QuickCheck`.\n\n### Better
  support for nested specs\n\n*NOTE: This is a breaking change to the non-monadic
  API.  The monadic API is\nnot affected.*\n\nIn some situations parent descriptions
  for nested specs were not included in\nthe generated report.  Solving this required
  a change to the data structure\nthat is used to represent specs (it was not a proper
  tree, now it is).\n\n#### Updating specs that use the non-monadic API\n\nThe runner
  functions (`hspec`, `hspecB` and `hspecX`) now take a list of\ndescriptions.\n\nThe
  following works with `hspec-0.9`, but not with `hspec-1.0`.\n\n```haskell\nmain
  = hspecX $\n  describe \"reverse\" [\n    it \"reverses a list\" $\n      reverse
  [1, 2, 3] == [3, 2, 1],\n\n    it \"gives the original list, if applied twice\"
  $ property $\n      \\xs -> reverse (reverse xs) == (xs :: [Int])\n  ]\n\n```\n\nFor
  `hspec-1.0`, you need to wrap it into a list.\n\n```haskell\nmain = hspecX [\n    describe
  \"reverse\" [\n      it \"reverses a list\" $\n        reverse [1, 2, 3] == [3,
  2, 1],\n\n      it \"gives the original list, if applied twice\" $ property $\n
  \       \\xs -> reverse (reverse xs) == (xs :: [Int])\n    ]\n  ]\n```\n\nSpecs
  consisting of several *desribes*, combined with `descriptions`, continue\nto work
  unchanged.  But `descriptions` is now a noop, and it will be removed in\na future
  release.  So it is a good idea to drop it.\n\nThe following works with both `hspec-0.9`
  and `hspec-1.0`.\n\n```haskell\nmain = hspecX $ descriptions [  -- descriptions
  is redundant\n    describe \"Foo\" [\n      it \"has some behavior\" True\n    ]\n
  \ , describe \"Bar\" [\n      it \"has some behavior\" True\n    ]\n  ]\n```\n\nBut
  the following is recommended instead.\n\n```haskell\nmain = hspecX [\n    describe
  \"Foo\" [\n      it \"has some behavior\" True\n    ]\n  , describe \"Bar\" [\n
  \     it \"has some behavior\" True\n    ]\n  ]\n```\n\n### A new monadic API for
  custom Formatters\n\nFor all the details, have a look at the [docs]\n(http://hackage.haskell.org/packages/archive/hspec/latest/doc/html/Test-Hspec-Formatters.html).\n\n\n###
  The total time required to run a spec is now included in the summary\n\nIn addition
  to the used CPU time, the total time required to run a spec is now\ninclude in the
  summary.  This is useful for specs that do non-CPU-intensive\nstuff, or fork subprocesses.\n"
basic-deps:
  base: ==4.*
  hspec-core: ==2.6.0
  QuickCheck: ! '>=2.10'
  hspec-discover: ==2.6.0
  hspec-expectations: ==0.8.2.*
all-versions:
- '2.0.0'
- '2.0.1'
- '2.0.2'
- '2.1.0'
- '2.1.1'
- '2.1.2'
- '2.1.3'
- '2.1.4'
- '2.1.5'
- '2.1.6'
- '2.1.7'
- '2.1.8'
- '2.1.9'
- '2.1.10'
- '2.2.0'
- '2.2.1'
- '2.2.2'
- '2.2.3'
- '2.2.4'
- '2.3.0'
- '2.3.1'
- '2.3.2'
- '2.4.0'
- '2.4.1'
- '2.4.2'
- '2.4.3'
- '2.4.4'
- '2.4.5'
- '2.4.6'
- '2.4.7'
- '2.4.8'
- '2.5.0'
- '2.5.1'
- '2.5.2'
- '2.5.3'
- '2.5.4'
- '2.5.5'
- '2.5.6'
- '2.5.7'
- '2.5.8'
- '2.5.9'
- '2.6.0'
author: ''
latest: '2.6.0'
description-type: haddock
description: ! 'Hspec is a testing framework for Haskell.  Some of Hspec''s distinctive

  features are:


  * a friendly DSL for defining tests


  * integration with QuickCheck, SmallCheck, and HUnit


  * parallel test execution


  * automatic discovery of test files


  The Hspec Manual is at <http://hspec.github.io/>.'
license-name: MIT
