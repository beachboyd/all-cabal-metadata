homepage: https://github.com/hslua/hslua-module-system
changelog-type: markdown
hash: d2c038426070af21fbce2119c069b62acecb0dddbfb04dd8c6a5889af6b878c8
test-bench-deps:
  base: -any
  text: -any
  hslua-module-system: -any
  tasty-hunit: -any
  tasty: -any
  hslua: -any
  tasty-lua: '>=0.2 && <0.3'
maintainer: albert+hslua@zeitkraut.de
synopsis: Lua module wrapper around Haskell's System module.
changelog: |
  # Revision history for hslua-module-system

  ## 0.2.2 -- 2020-08-15

  - Relaxed upper bound for hslua, allow `hslua-1.2.*`.
  - Improved documentation of internal types.
  - Use tasty-lua for unit tests.
  - Update CI to test with all GHC versions.

  ## 0.2.1 -- 2019-05-04

  - Use module helpers made available with HsLua 1.0.3. This avoids
    code duplication when used with other hslua modules.

  ## 0.2.0 -- 2019-05-01

  All fields and functions are now exported from the Haskell module
  under the same name as that used in Lua.

  ### New fields

  - `arch`: processor architecture.
  - `compiler_name`: Haskell compiler that was used to compile the module.
  - `compiler_version`: version of the compiler.
  - `os`: operating system.

  ### New functions

  - `mkdir`: create a new directory.
  - `rmdir`: remove a directory.
  - `with_env`: perform action with custom environment.
  - `with_wd`: perform action in another directory.

  ### Removed or renamed functions

  - `currentdir` was renamed to `getwd`.
  - `chdir` was renamed to `setwd`.
  - `pwd` was removed.

  ### Misc

  - Fix typos and copy-paste errors in docs, tests.

  ## 0.1.0 -- 2019-04-26

  - First version. Released on an unsuspecting world.
basic-deps:
  exceptions: '>=0.8 && <0.11'
  base: '>=4.9 && <5'
  containers: '>=0.5 && <0.7'
  temporary: '>=1.2 && <1.4'
  hslua: '>=1.0.3 && <1.3'
  directory: '>=1.3 && <1.4'
all-versions:
- 0.1.0
- 0.1.0.1
- 0.2.0
- 0.2.1
- 0.2.2
author: Albert Krewinkel
latest: 0.2.2
description-type: haddock
description: |-
  Provides access to system information and functionality
  to Lua scripts via Haskell's `System` module.

  Intended usage for this package is to preload it by adding
  the loader function to `package.preload`. Note that the
  Lua `package` library must have already been loaded before
  the loader can be added.
license-name: MIT
