homepage: https://github.com/facebookexperimental/hs-zstd
changelog-type: markdown
hash: dacc2068bb5d22fc6577ee0362f38461f3db5307731f6f4b3e61e7b53d21a12f
test-bench-deps:
  hs-zstd: -any
  bytestring: ! '>=0.9'
  test-framework: ! '>=0.4'
  base: ! '>=4.8 && <5'
  test-framework-quickcheck2: ! '>=0.2'
  criterion: -any
  ghc-prim: -any
  zlib: -any
  QuickCheck: ! '>=2.7'
maintainer: luis@luispedro.org
synopsis: Haskell bindings to the Zstandard compression algorithm
changelog: |
  # 0.1.1.0
  * Fixes compression bugs

  # 0.1.0.0

  * Initial release
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.8 && <5'
  ghc-prim: -any
  deepseq: -any
all-versions:
- 0.1.1.0
- 0.1.1.1
author: Bryan O'Sullivan
latest: 0.1.1.1
description-type: markdown
description: |
  # Zstandard bindings for Haskell

  [![Travis](https://api.travis-ci.org/luispedro/hs-zstd.png)](https://travis-ci.org/luispedro/hs-zstd)

  This is a fork of the original [Facebook
  project](https://github.com/facebookarchive/hs-zstd) which is unmaintained and
  produces incorrectly compressed files. This repository fixes these. If the
  original maintainers want to take the project back, I am happy to delete this
  one.

  This library provides Haskell bindings to the
  [Zstandard compression library](http://facebook.github.io/zstd/).

  The library is structured to provide several layers of abstraction.

  * For the simplest use cases, the top-level
    [`Zstd`](http://hackage.haskell.org/package/zstd/docs/Codec-Compression-Zstd.html)
    module is the best place to get started.

  * If you need to stream a large amount of data with a constant memory
    footprint, use the
    [`Zstd.Streaming`](http://hackage.haskell.org/package/hs-zstd/docs/Codec-Compression-Zstd-Streaming.html)
    module. This can also be used as a building block for adapting to
    streaming libraries such as `pipes` and `conduit`.  (If you need to
    use lazy bytestrings instead, see the
    [`Zstd.Lazy`](http://hackage.haskell.org/package/hs-zstd/docs/Codec-Compression-Zstd-Lazy.html)
    module.  This is built using the abstractions from the
    `Zstd.Streaming` module.)

  * When your usage is dominated by lots of small messages (presumably
    using pre-computed compression dictionaries), use the
    [`Zstd.Efficient`](http://hackage.haskell.org/package/hs-zstd/docs/Codec-Compression-Zstd-Efficient.html)
    module to amortize the cost of allocating and initializing context
    and dictionary values.

  ## Join in

  If you'd like to help improve the code, please
  [read the contribution guidelines](CONTRIBUTING.md).  This discusses
  how to file bugs and submit changes to the code itself.

  ## API documentation

  The APIs should be easy to understand and work with, and you can find
  [documentation on Hackage](http://hackage.haskell.org/package/hs-zstd).
license-name: BSD-3-Clause
