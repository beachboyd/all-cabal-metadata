homepage: https://github.com/AntonXue/SSTG#readme
changelog-type: ''
hash: 85e0fd771328200458cc1302977ddf8f0adcfa4311b39d4d41faf398e94c9d70
test-bench-deps:
  base: -any
  SSTG: -any
  containers: ! '>=0.5 && <0.6'
maintainer: anton.xue@yale.edu
synopsis: STG Symbolic Execution
changelog: ''
basic-deps:
  ghc: -any
  base: ! '>=4.7 && <5'
  SSTG: -any
  containers: ==0.5.*
  ghc-paths: -any
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.1.4
- 0.1.1.5
- 0.1.1.6
- 0.1.1.7
author: Anton Xue
latest: 0.1.1.7
description-type: markdown
description: ! "## SSTG\nHaskell Symbolic Execution with STG Semantics\n\nBased on
  the paper: [Making a Fast Curry: Push/Enter vs. Eval/Apply for Higher-order Languages][paper]\n\nHackage
  Page: https://hackage.haskell.org/package/SSTG\n\n[paper]: http://community.haskell.org/~simonmar/papers/evalapplyjfp06.pdf\n\n##
  Dependencies\n* `ghc >= 8.0.1`\n\n## Installation with Cabal\n`cabal install SSTG`\n\n##
  As an API\nSSTG is designed for use as an API to perform extraction and symbolic
  execution of models extracted from Haskell source, curated by hand, or derived from
  other sources.\n\n`import SSTG`\n\n#### Program Model Extraction\nSSTG represents
  [GHC StgSyn][stgsyn] as a near one-to-one translation of an internal language called
  [SSTG Lang][sstglang].\n\n[stgsyn]: https://downloads.haskell.org/~ghc/8.0.1/docs/html/libraries/ghc-8.0.1/StgSyn.html\n[sstglang]:
  https://github.com/AntonXue/SSTG/blob/master/src/SSTG/Core/Syntax/Language.hs\n\nThis
  can be extracted from Haskell source by performing a call to the function:\n\n```\nmkTargetBindings
  :: FilePath -> FilePath -> IO [Binding]\nmkTargetBinding proj src = ...\n```\n\nHere
  `proj` denotes the project directory, while `src` respresents the source file. This
  enables compilation of multiple Haskell files simultaneously, as GHC requires reference
  paths to a common project directory for compilation accuracy.\n\nIn a given file
  structure as follows:\n```\npath/to/stuff/\n  +-- project/\n        +-- folder-one/\n
  \             +-- source.hs\n```\nThe corresponding `proj` and `src` would be equivalent
  to:\n```\nproj = path/to/stuff\nsrc  = path/to/stuff/folder-one/source.hs\n```\nThe
  extracted `[Binding]`, like almost everything in SSTG, is endowed with `Show, Equal,
  Read`. However, it is advised to use the pretty-print functions defined in `SSTG.Utils.Printing`.
  For instance:\n```\npprBindingStr :: Binding -> String\n```\n\n#### Defunctionalization\n[Defunctionalization
  Wikipedia article][defunctionalization]\n\n[defunctionalization]: https://en.wikipedia.org/wiki/Defunctionalization\n\n####
  Symbolic Execution\nSymbolic execution is done by performin a series of graph reductions
  on a `State` until we reach some value form, or our `step_count` tick runs out,
  creating a form of bounded execution exploration.\n\nTo load a `State`, two functions
  can be used:\n```\ndata LoadResult = LoadOkay State | LoadGuess State [Binding]
  | LoadError String\n\nnewtype Program = Program [Binding]\n\nloadState :: Program
  -> LoadResult\n\nloadStateEntry :: String -> Program -> LoadResult\n```\nNext we
  have to fill out the flags for execution:\n```\ndata StepType = BFS | BFSLogged
  | DFS | DFSLogged\n\ndata RunFlags = RunFlags { step_count :: Int\n                         ,
  step_type  :: StepType\n                         , dump_dir   :: Maybe FilePath
  }\n```\nHere `step_count` is the number of steps we may take, the `step_type` is
  currently only implemented for `BFS` and `BFSLogged`, the latter of which keeps
  track of every step taken, while `BFS` only returns the very last state. Note that
  `BFSLogged` is currently unoptimized because it is easy to implement that way :)\n\nFinally,
  to perform execution, the `execute` function is used:\n```\nexecute :: RunFlags
  -> State -> [([LiveState], [DeadState])]\n```\nThis yields a list of execution snapshots.
  The list is a singleton list if `BFS` or `DFS` is used, while multiple snapshots
  if the `BFSLogged` or `DFSLogged` is done. These can be then printed by using `pprLivesDeadsStr`:\n```\npprLivesDeadsStr
  :: ([LiveState], [DeadState]) -> String\n```\n\n#### Constraint Solving\nTo come.\n\n##
  TODO List\n* Defunctionalization pre-processing\n* SMT integration\n\n## Shortcomings\n*
  Uninterpreted function evaluations are abstracted as symbolic computations. This
  includes all functions defined in `Prelude` and those not defined in the scope of
  the target programs.\n* There might be bugs, who knows? :)\n"
license-name: BSD-3-Clause
