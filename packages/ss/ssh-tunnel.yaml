homepage: https://github.com/Teaspot-Studio/ssh-tunnel#readme
changelog-type: ''
hash: a91ed6a37612a4985e3ab6db1b65294c274d5bc4a77a70958332922daeb0069a
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Proxy http-client via ssh tunnel.
changelog: ''
basic-deps:
  http-client: ! '>=0.4 && <0.6'
  base: ! '>=4.7 && <5'
  managed: ! '>=1.0 && <1.1'
  text: ! '>=1.2 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  turtle: ! '>=1.2 && <1.4'
  foldl: ! '>=1.1 && <1.3'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '1.0.0.0'
author: ! 'Anton Gushcha <ncrashed@gmail.com>

  , Anatoliy Nardid <nazgul17@gmail.com>'
latest: '1.0.0.0'
description-type: markdown
description: ! "ssh-tunnel\n==========\n\nSmall library that allows to create SSH
  tunnel (SOCKS proxy) from Haskell and proxy\n[http-client](http://hackage.haskell.org/package/http-client).\n\nTunnel
  is created with:\n```\nssh -f -N -M -S <master-socket> -i <pemfile> -L <localport>:127.0.0.1:<remoteport>
  <user>@<host>\n```\n\nNote: that the tunnel is created in background (-f) without
  a shell on remote host (-N)\nand (-M -S <master-socket>) defines special socket
  that is used to terminate the tunnel.\n\nHow to use in your code:\n```haskell\nimport
  Control.Monad.Managed\nimport Control.SSH.Tunnel\nimport Network.HTTP.Client\nimport
  Network.HTTP.Client.TLS\n\nwith (openSshTunnel config tlsManagerSettings) $ \\settings
  -> do\n manager <- newManager settings\n -- do things with manager\n -- as soon
  you live the scope, tunnel will be down\n```\n\nAlso, you can find `addFingerprints`
  function useful for adding fingerprints to\nknown hosts on first connect. \n"
license-name: BSD3
