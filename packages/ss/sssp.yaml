homepage: http://github.com/erudify/sssp/
changelog-type: ''
hash: 6d6ac8ba1251672f95f80e7ae5e306b4662843037b055a02a85e89221aedc98c
test-bench-deps: {}
maintainer: oss@solidsnack.be
synopsis: HTTP proxy for S3.
changelog: ''
basic-deps:
  warp: ! '>=1.3'
  cereal: ! '>=0.3.5'
  bytestring: ! '>=0.9'
  wai: ! '>=1.3'
  case-insensitive: ! '>=0.4'
  base: ! '>=2 && <=5'
  base64-bytestring: ! '>=1.0'
  aws: ==0.7.*
  text: ! '>=0.11'
  conduit: ! '>=0.5'
  data-default: ! '>=0.4'
  containers: -any
  blaze-builder: ! '>=0.3'
  attempt: ! '>=0.4'
  mtl: ! '>=2'
  network-conduit: ! '>=0.5'
  attoparsec: ! '>=0.10'
  wai-extra: ! '>=1.3'
  http-conduit: ! '>=1.5'
  http-types: ! '>=0.6'
  cryptohash: ! '>=0.7.5'
all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
author: Jason Dusek
latest: 1.1.1
description-type: text
description: ! "SYNOPSIS\n       sssp\n\nDESCRIPTION\n       SSSP is an HTTP proxy
  for S3 that can generate short-lived, signed URLs\n       for stored objects. By
  providing a server separate from S3 that can  be\n       placed  behind an authenticating
  proxy or firewall, SSSP allows a vari-\n       ety of common security mechanisms
  to be used  to  limit  access  to  S3\n       objects over HTTP while taking advantage
  of S3's considerable bandwidth\n       and parallelism.\n\n       Use-cases for
  SSSP include:\n\n          o sharing of large files within an organization,\n\n
  \         o media service for public facing web applications,\n\n          o distribution
  of internal software.\n\n       SSSP supports configuration via environment variables
  or STDIN.\n\nCONFIGURATION\n       These settings can be passed as environment variables
  \ or  fed  to  the\n       server  on  STDIN in colon separated format. Both the
  new and old forms\n       of the AWS credential environment variables are supported.\n\n
  \      # AWS Settings\n       AWS_ACCESS_KEY              = account access key\n
  \      AWS_ACCESS_KEY_ID           = account access key\n       AWS_SECRET_KEY              =
  secret\n       AWS_SECRET_ACCESS_KEY       = secret\n       AWS_REGION                  =
  eu-west-1, classic, us-east-1, ...\n\n       # Storage settings\n       SSSP_BUCKET
  \                = DNS friendly bucket name\n\n       # Server settings\n       SSSP_CONN
  \                  = <ip>:<port> pair\n       PORT                        = port
  to connect to, on localhost\n\n       SSSP is fairly liberal when parsing STDIN.
  In fact,  Bourne  shell  .rc\n       files, like the follow example, are parsed
  without error:\n\n       export SSSP_BUCKET=dist\n       export SSSP_CONN=*:6000\n\n
  \      However,  SSSP skips over lines that contain quotes (\"') or that appear\n
  \      to require shell interpolation for their correct  interpolation  (lines\n
  \      containing $`{}).\n\nREST INTERFACE\n       URLs  in  SSSP point to one of
  two objects: an item or a listing. Items\n       correspond to S3 objects; a GET
  retrieves  a  signed  redirect  to  the\n       object.   Listings  are  a  sequence
  of URLs, in ascending order; a GET\n       retrieves the listing as a plaintext
  document, one URL per line.\n\n       GET http://sssp.io/p/a/t/h         # Signed
  for the default time (10s).\n       GET http://sssp.io/p/a/t/h?t=n     # Signed
  for n seconds.\n\n       A PUT to an item sets the item's content. DELETEs can  be
  \ singular  or\n       plural.  A  plural DELETE removes only the objects generated
  by a list-\n       ing.\n\n       URLs are divided syntactically in to listings
  and items. A  URL  ending\n       with a slash is always a listing.\n\n       GET
  http://sssp.io/dist   # Signed redirect to an object called dist.\n       GET http://sssp.io/dist/
  \ # Listing of items below the key `dist'.\n\n       To  make  it  easier to work
  with versioned or timestamped assets, SSSP\n       supports the @hi and @lo meta-paths.
  These correspond to the names that\n       sort  highest  and  lowest  according
  \ to  semantic version sort, where\n       non-digit chars serve to delimit arrays
  of numbers. For common forms of\n       dates, these have the same effect as ASCII
  sort. (ASCII sort may speci-\n       fied, as well; please the section WILDCARDS,
  below.)\n\n       GET http://sssp.io/dist/x/x-0.1.1.tgz\n       GET http://sssp.io/dist/x/x-0.1.4.tgz\n
  \      GET http://sssp.io/dist/x/x-0.2.11.tgz\n       GET http://sssp.io/dist/x/x-0.2.9.tgz\n\n
  \      # Retrieval with @hi and @lo.\n       GET http://sssp.io/dist/x/@hi  -307->
  \ http://sssp.io/dist/x/x-0.2.11.tgz\n       GET http://sssp.io/dist/x/@lo  -307->
  \ http://sssp.io/dist/x/x-0.1.1.tgz\n\n       Wildcards @hi and @lo used together
  with a count specify  a  set  wild-\n       card; the result is a listing:\n\n       GET
  http://sssp.io/dist/x/@lo2  -200->  dist/x/x-0.1.1.tgz\n                                               dist/x/x-0.1.4.tgz\n\n
  \      Counts are the natural numbers starting at 0. The wildcard @* refers to\n
  \      \"all the items\".\n\n       A counted wildcard, like @hi2, can be suffixed
  with a tilde to form its\n       complement  --  so  @hi2~ is everything but the
  highest two items. This\n       can be useful for bulk deletion of old/new things.\n\nWILDCARDS\n
  \         @hi.semver, @lo.semver\n                 Key with highest or lowest version,
  according to  a  liberal-\n                 ized  form of \"semantic versioning\",
  where version components\n                 are delimited by any non-digit characters.\n\n
  \         @hi.ascii, @lo.ascii\n                 Keys sorted ASCIIbetically, in
  the C locale (sorted purely by\n                 byte value).\n\n          @hi,
  @lo\n                 The default sort, which is semantic version sort.\n\n          @*,
  @*.semver, @*.ascii\n                 All  the items, in the default order (semantic
  version) or in\n                 a specified order.\n\n       ASCII sort can be
  substantially more performant than  semantic  version\n       sort,  because  S3
  returns data in ASCII order and thus no real sorting\n       is necessary.\n\nEXAMPLES\n
  \      # Start web application.\n       sssp < conf\n\n       # Start web application
  with configuration provided by the environment.\n       export AWS_ACCESS_KEY_ID=...\n
  \      export AWS_SECRET_ACCESS_KEY=...\n       sssp <<CONF\n       SSSP_BUCKET:
  dist\n       CONF\n\nBUGS\n       Listing results should really be URLs. The time
  to sign  should  really\n       be configurable; or at least settable with a query
  parameter.\n\n"
license-name: BSD-3-Clause
