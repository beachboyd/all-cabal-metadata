homepage: https://github.com/brinchj/btree-concurrent
changelog-type: ''
hash: 212cf83d5fa001e4e8f420ce4ae53a5005f6e07b5e09e98be543e60c8278d6c7
test-bench-deps:
  cereal: ! '>=0.3'
  bytestring: ! '>=0.9'
  unix: ! '>=2.5'
  stm: ==2.2.*
  base: ==4.*
  time: ==1.*
  base64-bytestring: ==1.*
  filepath: ==1.*
  array: ==0.4.*
  containers: ! '>=0.5'
  snappy: ==0.2.*
  mtl: ==2.*
  hashable: ==1.*
  random: ==1.*
  QuickCheck: ! '>=2.4'
  directory: ==1.*
maintainer: brinchj@gmail.com
synopsis: A backend agnostic, concurrent BTree
changelog: ''
basic-deps:
  cereal: ! '>=0.3'
  bytestring: ! '>=0.9'
  stm: ==2.2.*
  base: ==4.*
  time: ==1.*
  base64-bytestring: ==1.*
  filepath: ==1.*
  array: ==0.4.*
  containers: ! '>=0.5'
  snappy: ==0.2.*
  mtl: ==2.*
  hashable: ==1.*
  random: ==1.*
  directory: ==1.*
all-versions:
- 0.1.0
- 0.1.1
- 0.1.3
- 0.1.4
- 0.1.5
author: Morten Br√∏ns, Johan Brinch
latest: 0.1.5
description-type: markdown
description: ! 'btree-concurrent

  ================



  A backend agnostic, concurrent BTree with relaxed balance[1] written in Haskell
  using a mix of IO operations and pure STM.



  Although the code does work, it is neither production-ready nor complete.



  Features include:


  * Caching: While nodes are periodically saved on persistent storage (e.g. disk)
  they are cached in-memory during operations.


  * Live flushing: It is possible to save the current version of the tree to disk
  and run modifying operations at the same time. The nodes are updated buttom-up to
  ensure a valid tree in the case of a crash.


  * Backend agnosticism: A simple API is used as an abstraction for the persistent
  storage.


  * Verification: The test-suite uses QuickCheck to compare the trees behaviour to
  that of Data.Map.



  Deficients include:


  * Too much memory usage. Nodes are not stored in a compact fashion and are constantly
  being serialized/deserialized.


  * findMin and findMax are incomplete and may fail (see TODO for details).


  * The implementation does not parallelize well.




  [1] B-trees with relaxed balance, K. S. Larsen & R. Fagerberg, Parallel Processing
  Symposium, 1995. Proceedings., 9th International'
license-name: LicenseRef-LGPL
