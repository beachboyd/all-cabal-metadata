homepage: ''
changelog-type: markdown
hash: 81730136445e1b0196918e60ba1964ec20c191cf2291f8a0bec3fb0b1c388add
test-bench-deps: {}
maintainer: Igor Pashev <pashev.igor@gmail.com>
synopsis: HTTP proxy for authenticating users via OAuth2
changelog: ! "0.9.9\n=====\n\n* This is the last release of this Sproxy. See [Sproxy2](http://hackage.haskell.org/package/sproxy2).\n*
  Google: prompt for account only, don't ask for offline access.\n\n\n0.9.8\n=====\n\n*
  If the user is not authenticated, show login page with [HTTP status code\n  511](https://tools.ietf.org/html/rfc6585),
  instead of 302 -> 200.  It had\n  bad UX for AJAX calls.\n* Always convert authenticated
  user's email to lowercase. This affects the\n  cookie and the `From` header.\n*
  Stop using the `string-conversions` package.\n* Print authentication code in debug
  mode only.\n\n\n0.9.7.1\n=======\n\n* Fixed cabal source distribution\n\n\n0.9.7\n=====\n\n*
  Added support for [LinkedIn OAuth2 API](https://developer.linkedin.com/docs/oauth2).\n
  \ Added new options `linkedin_client_id` and `linkedin_client_secret`. They are
  optional\n  as well as Google's `client_id` and `client_secret`. The user is now
  redirected to the\n  `sproxy/login` page to choose an OAuth2 provider.\n\n\n0.9.6\n=====\n\n*
  Session shelf life is configurable with the `session_shelf_life` option\n  in configuration
  file. Defaults to 30 days. It was hard-coded before.\n* Dropped dependency on `logsink`
  / `logging-facade` (fail to build).\n  Log to stderr only, log levels: error, warning,
  info, debug.\n  The `log_target` option is ignored.\n\n\n0.9.5\n=====\n\n* Allow
  running as unprivileged user: added option `user` in the configuration file.\n*
  Default log level is `debug` if omitted in the configuration file.\n\n\n0.9.4\n=====\n\n*
  Combine the multiple header fields into one \"field-name: field-value\" pair\n  with
  a comma-separated list for the field-value (Instead of removing duplicates).\n*
  `sproxy [ -h | --help ]` works (using [docopt](https://hackage.haskell.org/package/docopt))\n*
  Stop counting client parsing failures as errors.\n\n\n0.9.3\n=====\n\n* Made some
  options in configuration file optional with reasonable default values:\n  - `log_target`:
  `stderr`\n  - `listen`: `443`\n  - `redirect_http_to_https`: yes if `listen == 443`\n
  \ - `backend_address`: `\"127.0.0.1\"`\n  - `backend_port`: `8080`\n* Allow backend
  at UNIX socket: new option `backend_socket`.\n* Removed tests (unsupported).\n*
  Don't build Sproxy library.\n\n\n0.9.2\n=====\n\n* Deny SSLv3.\n* Removed the `auth_token_key`
  option from the config file.\n  The token is generated randomly on startup.\n\tRestarting
  sproxy invalidates existing sessions.\n* Added `ChangeLog.md`\n\n"
basic-deps:
  bytestring: -any
  SHA: -any
  unix: -any
  split: -any
  base: ! '>=4.8 && <5'
  time: -any
  base64-bytestring: -any
  text: -any
  docopt: ! '>=0.7'
  entropy: -any
  resource-pool: -any
  tls: ! '>=1.3.3'
  network: -any
  data-default: -any
  interpolatedstring-perl6: -any
  containers: ! '>=0.5'
  x509: -any
  utf8-string: -any
  postgresql-simple: -any
  attoparsec: -any
  http-kit: ! '>=0.5'
  http-conduit: ! '>=2.1.8'
  http-types: ! '>=0.8.5'
  aeson: ! '>=0.7.0.4'
  yaml: ! '>=0.8'
all-versions:
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.7.1
- 0.9.8
- 0.9.9
author: ! 'Chris Forno <jekor@jekor.com>

  , Igor Pashev <pashev.igor@gmail.com>'
latest: 0.9.9
description-type: markdown
description: ! "# Sproxy - HTTP proxy for authenticating users via OAuth2\n\n## Motivation\n\nWhy
  use a proxy for doing OAuth? Isn't that up to the application?\n\n * sproxy is secure
  by default.  No requests make it to the web server if they\n   haven't been explicitly
  whitelisted.\n * sproxy is independent.  Any web application written in any language
  can use\n   it.\n\n## Use cases\n\n * Existing web applications with concept of
  roles. For example,\n   [Mediawiki](https://www.mediawiki.org), [Jenkins](https://jenkins.io),\n
  \  [Icinga Web 2](https://www.icinga.org/products/icinga-web-2/). In\n   this case
  you configure Sproxy to allow unrestricted access\n   to the application for some
  groups defined by Sproxy. These\n   groups are mapped to the application roles.
  \ There is a [plugin for\n   Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Reverse+Proxy+Auth+Plugin)\n
  \  which can be used for this. Mediawiki and Icinga Web 2 were also\n   successfully
  deployed in this way, though it required changes to their\n   source code.\n\n *
  New web applications designed to work specifically behind Sproxy. In this case\n
  \  you define Sproxy rules to control access to the\n   application's API.  It would
  likely be [a single-page\n   application](https://en.wikipedia.org/wiki/Single-page_application).\n
  \  Examples are [MyWatch](https://hackage.haskell.org/package/mywatch) and\n   [Juan
  de la Cosa](https://hackage.haskell.org/package/juandelacosa)\n\n## How it works\n\nWhen
  an HTTP client makes a request, Sproxy checks for a *session cookie*.\nIf it doesn't
  exist (or it's invalid, expired), it responses with [HTTP\nstatus 511](https://tools.ietf.org/html/rfc6585)
  with the page, where the\nuser can choose an [OAuth2](https://tools.ietf.org/html/rfc6749)
  provider to\nauthenticate with.  Finally, we store the the email address in a session\ncookie:
  signed with a hash to prevent tampering, set for HTTP only (to prevent\nmalicious
  JavaScript from reading it), and set it for secure (since we don't\nwant it traveling
  over plaintext HTTP connections).\n\nFrom that point on, when sproxy detects a valid
  session cookie it extracts the\nemail, checks it against the access rules, and relays
  the request to the\nback-end server (if allowed).\n\n\n## Logout\n\nHitting the
  endpoint `/sproxy/logout` will invalidate the session cookie.\nThe user will be
  redirected to `/` after logout.  The query parameter `state`\ncan be provided to
  specify an alternate URL-encoded redirect path\n\n\n## Robots\n\nSince all sproxied
  resources are private, it doesn't make sense for web\ncrawlers to try to index them.
  In fact, crawlers will index only the login\npage. To prevent this, sproxy returns
  the following for `/robots.txt`:\n\n```\nUser-agent: *\nDisallow: /\n```\n\n\n##
  Permissions system\n\nPermissions are stored in a PostgreSQL database. See sproxy.sql
  for details.\nHere are the main concepts:\n\n- A `group` is identified by a name.
  Every group has\n  - members (identified by email address, through `group_member`)
  and\n  - associated privileges (through `group_privilege`).\n- A `privilege` is
  identified by a name _and_ a domain. It has associated rules\n  (through `privilege_rule`)
  that define what the privilege gives access to.\n- A `rule` is a combination of
  sql patterns for a `domain`, a `path` and an\n  HTTP `method`. A rule matches an
  HTTP request, if all of these components\n  match the respective attributes of the
  request. However of all the matching\n  rules only the rule with the longest `path`
  pattern will be used to determine\n  whether a user is allowed to perform a request.
  This is often a bit\n  surprising, please see the following example:\n\n\n### Privileges
  example\n\nConsider this `group_privilege` and `privilege_rule` relations:\n\ngroup
  \           | privilege | domain\n---------------- | --------- | -----------------\n`readers`
  \       | `basic`   | `wiki.example.com`\n`readers`        | `read`    | `wiki.example.com`\n`editors`
  \       | `basic`   | `wiki.example.com`\n`editors`        | `read`    | `wiki.example.com`\n`editors`
  \       | `edit`    | `wiki.example.com`\n`administrators` | `basic`   | `wiki.example.com`\n`administrators`
  | `read`    | `wiki.example.com`\n`administrators` | `edit`    | `wiki.example.com`\n`administrators`
  | `admin`   | `wiki.example.com`\n\nprivilege   | domain            | path           |
  method\n----------- | ----------------- | -------------- | ------\n`basic`     |
  `wiki.example.com` | `/%`           | `GET`\n`read`      | `wiki.example.com` |
  `/wiki/%`      | `GET`\n`edit`      | `wiki.example.com` | `/wiki/edit/%` | `%`\n`admin`
  \    | `wiki.example.com` | `/admin/%`     | `%`\n\nWith this setup, everybody (that
  is `readers`, `editors` and `administrators`s)\nwill have access to e.g. `/imgs/logo.png`
  and `/favicon.ico`, but only\nadministrators will have access to `/admin/index.php`,
  because the longest\nmatching path pattern is `/admin/%` and only `administrator`s
  have the `admin`\nprivilege.\n\nLikewise `readers` have no access to e.g. `/wiki/edit/delete_everything.php`.\n\n\n##
  HTTP headers passed to the back-end server:\n\nheader               | value\n--------------------
  | -----\n`From:`              | visitor's email address\n`X-Groups:`          |
  all groups that granted access to this resource, separated by commas (see the note
  below)\n`X-Given-Name:`      | the visitor's given (first) name\n`X-Family-Name:`
  \    | the visitor's family (last) name\n`X-Forwarded-Proto:` | the visitor's protocol
  of an HTTP request, always `https`\n`X-Forwarded-For`    | the visitor's IP address
  (added to the end of the list if header is already present in client request)\n\n\n`X-Groups`
  denotes an intersection of the groups the visitor belongs to and the groups that
  granted access:\n\nVisitor's groups | Granted groups | `X-Groups`\n----------------
  | -------------- | ---------\nall              | all, devops    | all\nall, devops
  \     | all            | all\nall, devops      | all, devops    | all,devops\nall,
  devops      | devops         | devops\ndevops           | all, devops    | devops\ndevops
  \          | all            | Access denied\n\n\n## Configuration file\n\nBy default
  `sproxy` will read its configuration from\n`config/sproxy.yml`.  There is example
  file with documentation\n[config/sproxy.yml.example](config/sproxy.yml.example).
  You can specify a\ncustom path with:\n\n```\nsproxy --config /path/to/sproxy.yml\n```\n\n"
license-name: MIT
