homepage: https://github.com/rudymatela/speculate#readme
changelog-type: ''
hash: e6cbefa4a092eac2d270edee2395aa1a47ba3a5da136e062c935b61cdc751583
test-bench-deps:
  base: ==4.*
  leancheck: -any
  speculate: -any
  express: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: discovery of properties about Haskell functions
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  leancheck: ! '>=0.9.1'
  containers: -any
  express: ! '>=0.1.0'
  cmdargs: -any
all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.4.0
author: Rudy Matela,  Colin Runciman
latest: 0.4.0
description-type: markdown
description: "Speculate\n=========\n\n[![Speculate Build Status][build-status]][build-log]\n[![Speculate
  on Hackage][hackage-version]][speculate-on-hackage]\n[![Speculate on Stackage LTS][stackage-lts-badge]][speculate-on-stackage-lts]\n[![Speculate
  on Stackage Nightly][stackage-nightly-badge]][speculate-on-stackage-nightly]\n\n![Speculate
  logo][speculate-logo]\n\nSpeculate automatically discovers laws about [Haskell]
  functions.\nGive Speculate a bunch of Haskell functions and it will discover laws
  like:\n\n  * equations, such as `id x == x`;\n  * inequalities, such as `0 <= x
  * x`;\n  * conditional equations, such as `x <= 0  ==>  x + abs x == 0`.\n\nSpeculate
  is similar to, and inspired by, [QuickSpec].\n\n\nInstalling Speculate\n--------------------\n\nTo
  install the [latest Speculate version from Hackage], just:\n\n\t$ cabal update\n\t$
  cabal install speculate\n\nPre-requisites are [cmdargs], [express] and [leancheck].\nThey
  should be automatically resolved and installed by [Cabal].\n\n\nUsing Speculate\n---------------\n\nSpeculate
  is used as a library: import it, then call the function [`speculate`]\nwith relevant
  arguments.  The following program Speculates about the\nfunctions [`(+)`] and [`abs`]:\n\n\timport
  Test.Speculate\n\n\tmain :: IO ()\n\tmain = speculate args\n\t  { constants =\n\t
  \     [ showConstant (0::Int)\n\t      , showConstant (1::Int)\n\t      , constant
  \"+\"   ((+)  :: Int -> Int -> Int)\n\t      , constant \"abs\" (abs  :: Int ->
  Int)\n\t      ]\n\t  }\n\nwhen run, it prints the following:\n\n\t_ :: Int  (holes:
  Int)\n\t0 :: Int\n\t1 :: Int\n\t(+) :: Int -> Int -> Int\n\tabs :: Int -> Int\n\n\t
  \   abs (abs x) == abs x\n\t          x + 0 == x\n\t          x + y == y + x\n\t
  \   (x + y) + z == x + (y + z)\n\tabs (x + abs x) == x + abs x\n\t  abs x + abs
  x == abs (x + x)\n\tabs (1 + abs x) == 1 + abs x\n\n\tx <= abs x\n\t0 <= abs x\n\tx
  <= x + 1\n\n\nNow, if we add [`<=`] and [`<`] as background constants on [`args`]\n\n\t
  \ , constants =\n\t      [ showConstant (0::Int)\n\t      , showConstant (1::Int)\n\t
  \     , constant \"+\"   ((+)  :: Int -> Int -> Int)\n\t      , constant \"abs\"
  (abs  :: Int -> Int)\n\t      , background\n\t      , constant \"<=\"  ((<=) ::
  Int -> Int -> Bool)\n\t      , constant \"<\"   ((<)  :: Int -> Int -> Bool)\n\t
  \     ]\n\nthen run again, we get the following as well:\n\n\t    y <= x ==> abs
  (x + abs y) == x + abs y\n\t    x <= 0 ==>       x + abs x == 0\n\tabs x <= y ==>
  \    abs (x + y) == x + y\n\tabs y <= x ==>     abs (x + y) == x + y\n\nFor more
  examples, see the [eg](eg) folder.\n\n\nSimilarities and Differences to QuickSpec\n-----------------------------------------\n\nSpeculate
  is inspired by [QuickSpec].\nLike QuickSpec, Speculate uses testing to speculate
  equational laws about given\nHaskell functions.  There are some differences:\n\n*
  Speculate tests enumeratively using [LeanCheck],\n  QuickSpec tests randomly using
  [QuickCheck];\n* Speculate is able to report inequalities directly;\n* QuickSpec
  allows polymorphism, Speculate does not;\n* For most examples,\n  Speculate runs
  slower than QuickSpec 2\n  but faster than QuickSpec 1.\n\n\nMore documentation\n------------------\n\nFor
  more examples, see the [eg](eg) and [bench](bench) folders.\n\nSpeculate has been
  subject to a paper, see the\n[Speculate Paper on Haskell Symposium 2017](https://matela.com.br/paper/speculate.pdf).\nSpeculate
  is also subject to a chapter in a [PhD Thesis (2017)].\n\n[leancheck]: https://hackage.haskell.org/package/leancheck\n[LeanCheck]:
  https://hackage.haskell.org/package/leancheck\n[express]:   https://hackage.haskell.org/package/express\n[QuickSpec]:
  https://github.com/nick8325/quickspec\n[QuickCheck]: https://hackage.haskell.org/package/QuickCheck\n[cmdargs]:
  https://hackage.haskell.org/package/cmdargs\n\n[Cabal]:   https://www.haskell.org/cabal\n[Haskell]:
  https://www.haskell.org/\n\n[PhD Thesis (2017)]: https://matela.com.br/paper/rudy-phd-thesis-2017.pdf\n\n[`speculate`]:
  https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:speculate\n[`args`]:
  \     https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:args\n[`constant`]:
  \ https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:constant\n\n[`(+)`]:
  \      https://hackage.haskell.org/package/base/docs/Prelude.html#v:-43-\n[`abs`]:
  \      https://hackage.haskell.org/package/base/docs/Prelude.html#v:abs\n[`<=`]:
  \       https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60--61-\n[`<`]:
  \        https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60-\n\n[speculate-logo]:
  https://github.com/rudymatela/speculate/raw/master/doc/speculate.svg?sanitize=true\n\n[build-status]:
  https://travis-ci.org/rudymatela/speculate.svg?branch=master\n[build-log]:    https://travis-ci.org/rudymatela/speculate\n[hackage-version]:
  https://img.shields.io/hackage/v/speculate.svg\n[latest Speculate version from Hackage]:
  https://hackage.haskell.org/package/speculate\n[speculate-on-hackage]:                  https://hackage.haskell.org/package/speculate\n[stackage-lts-badge]:
  \           https://stackage.org/package/speculate/badge/lts\n[stackage-nightly-badge]:
  \       https://stackage.org/package/speculate/badge/nightly\n[speculate-on-stackage]:
  \        https://stackage.org/package/speculate\n[speculate-on-stackage-lts]:     https://stackage.org/lts/package/speculate\n[speculate-on-stackage-nightly]:
  https://stackage.org/nightly/package/speculate\n"
license-name: BSD-3-Clause
