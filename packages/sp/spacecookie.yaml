homepage: https://github.com/sternenseemann/spacecookie
changelog-type: markdown
hash: e980b116628f841ac387e30a03664683d3e28bb069ab556e455c2102a0b5932d
test-bench-deps: {}
maintainer: git@lukasepple.de
synopsis: Gopher Library and Server Daemon
changelog: |
  # Revision history for spacecookie

  ## 0.2.1.2 Bump fast-logger

  * Bump fast-logger dependency, fix build

  ## 0.2.1.1 Fixed Privilege Dropping

  * Server
    * Make `user` parameter in config optional. If it is not given or set to `null`, `spacecookie` won't attempt
      to change its UID and GID. This is especially useful, if socket activation is used. In that case it is not
      necessary to start spacecookie as `root` since systemd sets up the socket, so `spacecookie` can be already
      started by the right user and doesn't need to change UID.
    * Example Systemd config files
      * `SocketMode` is now `660` instead of default `666`.
      * Set `User` and `Group` for `spacecookie.service` as well.
      * Set `"user": null` in `spacecookie.json`
  * Library
    * Fixed issue that led to `runGopher*` trying to change UID even if it wasn't possible (not running as root).
      This especially affected the `spacecookie` server, since `cRunUserName` would always be `Just`.
    * Made logging related to `dropPrivileges` clearer.

  ## 0.2.1.0 Systemd Support

  * Improved systemd support.
    * Support for the notify service type
    * Support for socket activation and socket (fd) storage
    * To make use of these new features you'll have to update your service files
  * Added `defaultConfig` value to prevent future breakage in software using the
    library when the `GopherConfig` type is extended.
  * Pretty print IPv6 addresses in logging

  ## 0.2.0.1 Hackage release

  Fixed a problem hindering the hackage release.

  ## 0.2.0.0 initial release

  * First version. Released on an unsuspecting world. Includes:
    * Library for writing any gopher server / application.
    * File system based gopher server with support for gopher maps.
    * Supports logging, privilege dropping, the gopher protocol and common extensions.
basic-deps:
  bytestring: -any
  unix: -any
  base: '>=4.9.0.0 && <5'
  socket: -any
  spacecookie: -any
  filepath: -any
  systemd: '>=2.1.0'
  fast-logger: '>=2.4.0 && <3.1'
  containers: -any
  mtl: -any
  attoparsec: -any
  transformers: -any
  hxt-unicode: -any
  aeson: -any
  directory: -any
all-versions:
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
author: Lukas Epple
latest: 0.2.1.2
description-type: markdown
description: "\t ____                                       _    _\n\t/ ___| _ __
  \  __ _  ___ ___  ___ ___   ___ | | _(_) ___\n\t\\___ \\| '_ \\ / _` |/ __/ _ \\/
  __/ _ \\ / _ \\| |/ / |/ _ \\\n\t ___) | |_) | (_| | (_|  __/ (_| (_) | (_) |   <|
  |  __/\n\t|____/| .__/ \\__,_|\\___\\___|\\___\\___/ \\___/|_|\\_\\_|\\___|\n\t
  \     |_|    – haskell gopher server\n\n## What is Gopher?\n\n> The Gopher protocol
  /ˈɡoʊfər/ is a TCP/IP application layer protocol designed for distributing, searching,
  and retrieving documents over the Internet. The Gopher protocol was strongly oriented
  towards a menu-document design and presented an alternative to the World Wide Web
  in its early stages, but ultimately HTTP became the dominant protocol. The Gopher
  ecosystem is often regarded as the effective predecessor of the World Wide Web.\n\n–
  [WP](https://en.wikipedia.org/wiki/Gopher_(protocol))\n\n## What is Spacecookie?\n\nSpacecookie
  is a gopher server and…\n\n* is RFC1436-compliant\n* supports info-line in menus
  (compatible protocol extension)\n* supports gophermaps (see [below](#adding-content))\n*
  provides a library for custom gopher applications ([see documentation](http://hackage.haskell.org/package/spacecookie/docs/Network-Gopher.html))\n*
  can integrate with systemd using socket activation\n\n## Installation\n\n* Nix(OS):
  [`pkgs.haskellPackages.spacecookie`](https://nixos.org/nixos/packages.html?channel=nixos-unstable&query=spacecookie)
  (see also [below](#on-nixos))\n* Cabal: `cabal v2-install spacecookie` (see also
  [hackage package](http://hackage.haskell.org/package/spacecookie))\n\n[Nix](https://nixos.org/nix/)
  is probably the most hassle-free way to install spacecookie at the moment.\n\n##
  Configuration\n\nIn order to run your new gopher server, you have to configure it
  first. You can find an example configuration file in `./etc/spacecookie.json`. JSON
  is mostly used due to legacy reason, it's not ideal, but alright for such a small
  configuration file.\n\nLet's have a quick look at the options:\n\n* `hostname`:
  The hostname your spacecookie will be reachable through. This should be accurate
  as gopher clients use it for their subsequent requests.\n* `user`: The user that
  is used to run spacecookie. If given, spacecookie will switch to this user after
  setting up its socket. Can be omitted or set to `null`, if root privileges are not
  needed (e. g. if systemd socket activation or a non well-known port is used).\n*
  `port`: The port spacecookie should listen on. The well-known port for gopher is
  70.\n* `root`: The directory which the files to serve via gopher are located in.\n\n##
  Running\n\nAfter you've created your config file just start spacecookie like this:\n\n\tspacecookie
  /path/to/spacecookie.json\n\nSpacecookie runs as a simple process and doesn't fork
  or write a PID file. Therefore it is very simple to use a supervisor to run it as
  a proper daemon. \n\n### With systemd\n\nSpacecookie supports systemd socket activation.
  To set it up you'll need\nto install `spacecookie.service` and `spacecookie.socket`
  like so:\n\n\tcp ./etc/spacecookie.{service,socket} /etc/systemd/system/\n\tsystemctl
  daemon-reload\n\tsystemctl enable spacecookie.socket\n\tsystemctl start  spacecookie.socket\n\tsystemctl
  start  spacecookie.service # optional, started by the socket automatically if needed\n\nOf
  course make sure that all the used paths are correct!\n\n### Without systemd\n\nSpacecookie
  does not require systemd nor depend on it. Since socket activation only uses an
  environment variable and a type unix socket, it is very lightweight and can be utilized
  without using a systemd library or dbus.\n\nFor example, it should be pretty easy
  to write a [runit](http://smarden.org/runit/) service file.\n\n### On NixOS\n\nOn
  [NixOS](https://nixos.org/nixos/) it is best to use the service module [`services.spacecookie`](https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/services/networking/spacecookie.nix).
  Setting up Spacecookie is as simple as adding the following lines to your `configuration.nix`:\n\n\tservices.spacecookie.enable
  = true;\n\tservices.spacecookie.hostname = \"localhost\";\n\nOf course you should
  replace `localhost` with the domain name or IP address your server is reachable
  through. Additionally you can specify the directory from which Spacecookie serves
  content using `services.spacecookie.root`, default is `/srv/gopher`.\n\n## Adding
  Content\n\nSpacecookie acts as a simple file server, only excluding files that start
  with a dot.\nIt generates gopher menus automatically; however you can use custom
  ones by adding a gophermap file.\n\nSpacecookie checks for `.gophermap` in every
  directory it serves and, if present, uses the menu specified in there.\n\nSuch a
  file looks like this:\n\n\tYou can just start writing text that\n\twill be displayed
  by the gopher client\n\twithout a link to a file. Empty lines are\n\talso possible.\n\n\t1Menu
  Entry for a directory full of funny stuff\t/funny\n\tiFunny Image\t/funy.jpg\n\tgcat
  gif\t/cat.gif\n\t0about me\t/about.txt\n\t1Floodgap's gopher server\t/\tgopher.floodgap.com\t70\n\nSo
  what does that all mean? These are the rules for a gophermap file:\n\n* comment
  lines (called info lines in spacecookie's code) are just lines of text. They must
  not contain a tab! They will be displayed as lines of text by the gopher client.\n*
  menu entries for files or directories start with a single char which specifies the
  file type, followed by the text for that file without a space or tab between them!
  Then the path is added after a tab.\n* \"Links\" to other servers are like file/directory
  menu entries but the server's hostname and its port must be added (tab-separated).\n\nThe
  file type characters are defined in [RFC1436](https://tools.ietf.org/html/rfc1436#page-10).
  Detailed documentation on the gophermap format [can be found here](./docs/gophermap-pygopherd.txt).\n\n##
  Portability\n\nSpacecookie's portability is mostly limited by [haskell-socket](https://github.com/lpeterse/haskell-socket).\n`haskell-socket`
  should work on any POSIX-compliant Operating system,  so Spacecookie should support
  those\nplatforms as well.\n\nHowever I personally have only tested Spacecookie on
  GNU/Linux (with and without systemd) so far. Feel free to send me an email or generate
  a [build report](http://hackage.haskell.org/package/spacecookie/reports/)\nif you've
  built spacecookie (or failed to do so) on another platform!\n\nWindows is currently
  not supported as we use some Unix-specific features, but there is probably\nlittle
  demand for it as well.\n\n## HTTP Support?\n\nSpacecookie will never support HTTP
  to keep the code simple and clean. You can\nhowever use an HTTP to Gopher Proxy
  with Spacecookie just fine. Any proxy\nsupporting RFC1436 should work, my own [gopher-proxy](https://github.com/sternenseemann/gopher-proxy)\nmight
  work for you."
license-name: GPL-3.0-only
