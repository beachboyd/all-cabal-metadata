homepage: http://github.com/jtobin/speedy-slice
changelog-type: ''
hash: 16029e24fd3b1132fd2b66f370f3d79b6548651d545e0bab47ce2c1b9a5c03a3
test-bench-deps:
  base: ! '>=4 && <6'
  containers: ! '>=0.5 && <0.6'
  speedy-slice: -any
  mwc-probability: ! '>=1.0.1'
maintainer: jared@jtobin.ca
synopsis: Speedy slice sampling.
changelog: ''
basic-deps:
  base: ! '>=4 && <6'
  kan-extensions: ! '>=5 && <6'
  mcmc-types: ! '>=1.0.1'
  lens: ! '>=4 && <5'
  pipes: ! '>=4 && <5'
  transformers: ! '>=0.5 && <1.0'
  mwc-probability: ! '>=1.0.1'
  primitive: ! '>=0.6 && <1.0'
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.2.0
- 0.3.0
author: Jared Tobin
latest: 0.3.0
description-type: haddock
description: ! 'Speedy slice sampling.


  This implementation of the slice sampling algorithm uses ''lens'' as a means to

  operate over generic indexed traversable functors, so you can expect it to

  work if your target function takes a list, vector, map, sequence, etc. as its

  argument.


  Additionally you can sample over anything that''s an instance of both ''Num'' and

  ''Variate'', which is useful in the case of discrete parameters.


  Exports a ''mcmc'' function that prints a trace to stdout, a ''chain'' function

  for collecting results in memory, and a ''slice'' transition operator that can

  be used more generally.


  > import Numeric.MCMC.Slice

  > import Data.Sequence (Seq, index, fromList)

  >

  > bnn :: Seq Double -> Double

  > bnn xs = -0.5 * (x0 ^ 2 * x1 ^ 2 + x0 ^ 2 + x1 ^ 2 - 8 * x0 - 8 * x1) where

  >   x0 = index xs 0

  >   x1 = index xs 1

  >

  > main :: IO ()

  > main = withSystemRandom . asGenIO $ mcmc 10000 1 (fromList [0, 0]) bnn'
license-name: MIT
