homepage: ''
changelog-type: ''
hash: ef8ad58150e87c12f10b0473669f44f1a3498744e734121a9878fbd969fa873a
test-bench-deps:
  tf-random: ==0.5.*
  bytestring: ! '>=0.10.4.0 && <0.11'
  base: -any
  criterion: ! '>=1.1.0.0 && <1.5'
  splitmix: -any
  containers: ! '>=0.5 && <0.6'
  base-compat: ! '>=0.9.3 && <0.11'
  random: -any
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Fast Splittable PRNG
changelog: ''
basic-deps:
  base: ! '>=4.5 && <4.12'
  time: ! '>=1.4.0.1 && <1.9'
  random: ! '>=1.1 && <1.2'
all-versions:
- '0'
author: ''
latest: '0'
description-type: markdown
description: ! "# splitmix\n\nPure Haskell implementation of SplitMix pseudo-random
  number generator.\n\n## dieharder\n\n> [Dieharder](http://webhome.phy.duke.edu/~rgb/General/dieharder.php)
  is a random\nnumber generator (rng) testing suite. It is intended to test generators,
  not\nfiles of possibly random numbers as the latter is a fallacious view of what
  it\nmeans to be random. Is the number 7 random? If it is generated by a random\nprocess,
  it might be. If it is made up to serve the purpose of some argument\n(like this
  one) it is not. Perfect random number generators produce \"unlikely\"\nsequences
  of random numbers &ndash; at exactly the right average rate. Testing a rng\nis therefore
  quite subtle.\n\n```\ntime dieharder-input splitmix | dieharder -a -g 200\n```\n\nThe
  test-suite takes around half-an-hour to complete.\nAll tests are PASSED (occasionally
  WEAK).\n\nIn comparison, built-in [Marsenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister)\ntest
  takes around 15min.\n\n```\ntime dieharder-input -a\n```\n\n## benchmarks\n\n```\nbenchmarking
  list/random\ntime                 96.77 μs   (96.28 μs .. 97.35 μs)\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\nmean                 96.77 μs   (96.35 μs .. 97.63
  μs)\nstd dev              2.001 μs   (1.028 μs .. 3.796 μs)\nvariance introduced
  by outliers: 15% (moderately inflated)\n\nbenchmarking list/tf-random\ntime                 60.43
  μs   (60.12 μs .. 60.79 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 60.52 μs   (60.26 μs .. 60.91 μs)\nstd dev              1.120
  μs   (780.2 ns .. 1.513 μs)\nvariance introduced by outliers: 14% (moderately inflated)\n\nbenchmarking
  list/splitmix\ntime                 16.38 μs   (16.29 μs .. 16.47 μs)\n                     1.000
  R²   (0.999 R² .. 1.000 R²)\nmean                 16.34 μs   (16.25 μs .. 16.51
  μs)\nstd dev              386.8 ns   (201.5 ns .. 669.8 ns)\nvariance introduced
  by outliers: 24% (moderately inflated)\n\nbenchmarking tree/random\ntime                 115.4
  μs   (108.6 μs .. 126.0 μs)\n                     0.942 R²   (0.910 R² .. 0.977
  R²)\nmean                 116.0 μs   (110.3 μs .. 124.2 μs)\nstd dev              23.47
  μs   (16.60 μs .. 33.95 μs)\nvariance introduced by outliers: 95% (severely inflated)\n\nbenchmarking
  tree/tf-random\ntime                 132.4 μs   (132.2 μs .. 132.5 μs)\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\nmean                 132.5 μs   (132.3 μs .. 132.6
  μs)\nstd dev              403.3 ns   (323.0 ns .. 516.5 ns)\n\nbenchmarking tree/splitmix\ntime
  \                59.80 μs   (59.42 μs .. 60.15 μs)\n                     1.000 R²
  \  (0.999 R² .. 1.000 R²)\nmean                 59.61 μs   (59.26 μs .. 60.36 μs)\nstd
  dev              1.683 μs   (864.5 ns .. 3.206 μs)\nvariance introduced by outliers:
  27% (moderately inflated)\n```\n\nNote: the performance can be potentially further
  improved when GHC gets\n[SIMD Support](https://ghc.haskell.org/trac/ghc/wiki/SIMD/Implementation/Status).\n"
license-name: BSD3
