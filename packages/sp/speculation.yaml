homepage: http://github.com/ekmett/speculation
changelog-type: markdown
hash: d8c7de7defa74ce883d4167b5e11595dc13fcfc5d7ccc56ce8265d3abbcbf2c2
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: A framework for safe, programmable, speculative parallelism
changelog: ! "/1.5.0.3/\n\n * Support GHC 8\n * Support `transformers` 0.5\n\n/1.5.0.2/\n\n
  * Build warning-free on GHC 7.10+\n * Added an HLint configuration\n * Removed a
  redundant constraint from the type of `sequenceByA_`.\n * Removed a redundant `Monad
  m` constraint from `instance MonadSpec (ContT r m)`.\n\n/1.5/\n\n * Removed the
  use of `tag-bits`. This enables the API to be `Trustworthy`.\n\n/1.4/\n\n * Simplified
  MonadSpec\n\n/1.3/\n\n * Removed old benchmark/test framework.\n * Make numSparks
  support mandatory.\n * Moved to Control.Concurrent from Data\n * Added MonadSpec,
  so we can make instances for Codensity, etc. in other packages\n * Removed the ContT
  r STM combinators\n * Cleaned out old issues\n * Made compatible with the removal
  of the Eq/Show superclasses of Num in GHC 7.3+\n\n/1.2.0.2/\n\n * Fixed name collision
  with the new Distribution.Simple.testHook in Setup.lhs\n\n/1.2.0.1/\n\n * Weakened
  dependencies\n\n/1.2.0.0/:\n\n * Reorganized the module hierarchy into Data.Speculation\n\n/1.1.0.0/:\n\n
  * Added support for numSparks\n\n/1.0.0.0/:\n\n * Released\n\n/0.9.0/:\n\n * Removed
  interim boxing in the unsafeIsEvaluated and unsafeGetTagBits check\n\n/0.8.1/:\n\n
  * Added Data.List.Foldable\n * Added Data.Traversable.Foldable\n * Fixed an off-by-one
  error in the arguments to the speculative fold estimators\n\n/0.8.0.2/:\n\n * changed
  tests and benchmarks to not build by default to work around corruption in the hackage
  db\n\n/0.8.0.1/:\n\n * test suite now forces build\n"
basic-deps:
  stm: ! '>=2.1 && <2.5'
  base: ! '>=4.3 && <6'
  ghc-prim: -any
  transformers: ! '>=0.2.2.0 && <0.6'
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.0.1
- 0.8.0.2
- 0.8.1.0
- 0.8.2.0
- 0.9.0.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- '1.3'
- '1.4'
- 1.4.1
- 1.4.1.1
- 1.4.1.2
- '1.5'
- 1.5.0.1
- 1.5.0.2
- 1.5.0.3
author: Edward A. Kmett
latest: 1.5.0.3
description-type: markdown
description: ! "speculation\n===========\n\nA framework for safe, programmable, speculative
  parallelism, loosely based on:\n\n*  Prakash Prabhu, G. Ramalingam, and Kapil Vaswani,
  \"*Safe Programmable Speculative Parallelism*\",\n   In the proceedings of Programming
  Language Design and Implementation (PLDI) Vol 45, Issue 6 (June 2010) pp 50-61.\n
  \  <http://research.microsoft.com/pubs/118795/pldi026-vaswani.pdf>\n\nThis package
  provides speculative function application and speculative folds. Speculative `STM`
  transactions take the place\nof the transactional rollback machinery from the paper.\n\nYou
  can download it using `cabal install speculation`, if you have the Haskell Platform
  installed.\n\nSpeculative Function Application (Control.Concurrent.Speculation)\n-----------------------------------------------------------------\n\nVarious
  speculative function application combinators are provided. Two fairly canonical
  samples are described here.\n\n#### spec\n\n    spec :: Eq a => a -> (a -> b) ->
  a -> b\n\n`spec g f a` evaluates `f g` while forcing `a`, if `g == a` then `f g`
  is returned. Otherwise `f a` is evaluated.\n\nFurthermore, if the argument has already
  been evaluated, we avoid sparking the parallel computation at all.\n\nIf `g` is
  a good guess at the value of `a`, this is one way to induce parallelism in an otherwise
  sequential task.\n\nHowever, if `g` isn\\'t available more cheaply than `a`, then
  this saves no work, and if `g` is wrong, you risk evaluating the function twice.\n
  \   spec a f a = f $! a\n\nThe best-case timeline looks like:\n    [---- f g ----]\n
  \      [----- a -----]\n    [-- spec g f a --]\n\nThe worst-case timeline looks
  like:\n    [---- f g ----]\n       [----- a -----]\n                     [---- f
  a ----]\n    [------- spec g f a -----------]\n\nCompare these to the timeline of
  `f $! a`:\n    [---- a -----]\n                 [---- f a ----]\n\n#### specSTM\n\n`specSTM`
  provides a similar compressed timeline for speculated `STM` actions, but also rolls
  back side-effects.\n\nSpeculative Folds (Data.Foldable.Speculation)\n---------------------------------------------\n\nA
  speculative version of the combinators from `Data.Foldable` is provided as `Data.Foldable.Speculation`.\n\nEach
  combinator therein takes an extra argument that is used to speculate on the value
  of the list.\n\n#### foldr\n\n    foldr :: (Foldable f, Eq b) => (Int -> b) -> (a
  -> b -> b) -> b -> f a -> b\n\nGiven a valid estimator `g`, `foldr g f z xs` yields
  the same answer as `Foldable.foldr' f z xs`.\n\n`g n` should supply an estimate
  of the value returned from folding over the **last** `n` elements of the container.\n\nAs
  with `spec`, if the guess `g n` is accurate a reasonable percentage of the time
  and faster to compute than the ensuing fold, then this can provide increased opportunities
  for parallelism.\n\n#### foldl\n\n    foldl :: (Foldable f, Eq b) => (Int -> b)
  -> (b -> a -> b) -> b -> f a -> b\n\n`foldl` works similarly to `Foldable.foldl'`,
  except that `g n` should provide an estimate for the **first** `n` elements.\n\nContact
  Information\n-------------------\n\nContributions and bug reports are welcome!\n\nI
  can be reached through the user ekmett on github, as edwardk on irc.freenode.net
  #haskell channel, or by email at <ekmett@gmail.com>.\n\n-Edward Kmett\n"
license-name: BSD-3-Clause
