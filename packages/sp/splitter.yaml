homepage: https://bitbucket.org/robertmassaioli/splitter
changelog-type: ''
hash: 0b606f1236ab57b36d8070f9a60721ac8d47d881b509d825d84f3dd65e02c856
test-bench-deps: {}
maintainer: robertmassaioli@gmail.com
synopsis: Use numerical ranges to split out certain lines from a file.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  filepath: ! '>=1.2 && <1.4'
  parsec: ! '>=3'
  range: ! '>=0.1 && <=0.2'
  directory: ! '>=1.1 && <1.3'
all-versions:
- 0.1.0.0
author: Robert Massaioli
latest: 0.1.0.0
description-type: markdown
description: ! "# Splitter\n\nAuthor: _Robert Massaioli_\n\nWelcome to the splitter
  program written in Haskell. The purpose of this program is to\nallow an easy way
  to extract ranges of lines from text files. Programs like head and tail\nextract
  from the beginning and ends of files and programs like cat print out the entire\nfile.
  But what if you want to extract lines 101-127 in a file? This is the exact problem\nthat
  splitter was designed to solve and you can do that like this:\n\n    splitter 101-127\n\nFeatures
  include:\n\n - Written in Haskell and therefore Cross-Platform\n - Very Efficient
  / Very Fast\n - Does one job and does it well: in agreement with the [Unix Philosophy][1].\n\nIt
  is my hope that this tool becomes a valuable part of your toolkit and, if it does,
  then\nplease feel free to send me an email telling me about it.\n\n## Example Invocations\n\nExtract
  a few choice prime lines from a file:\n\n    splitter 2,3,5,7,11,13\n\nSemantically
  all of the arguments are concatenated together using the ',' symbol meaning\nthat
  the previous line is identical to this one:\n\n    splitter 2 3 5 7 11 12\n\nYou
  can extract spans of lines. For example, getting lines ten to twenty and thirty
  to\neighty would be done like so:\n\n    splitter 10-20 30-80\n\nYou can extract
  ranges of lines that are bound on only one end. So if you wanted to\nextract everything
  from line fourty onwards then you could do the following:\n\n    splitter 40-\n\nYou
  can of course perform the reverse operation and get all the lines counting upto
  and\nincluding fourty:\n\n    splitter -40\n\nAnd, if you really want to then you
  can just get all of the lines in the file:\n\n    splitter *    # This is the same
  as the 'cat' program\n\nAnd that is all that there is to it. There are a few extra
  useful options such as the\ninvert range and number lines options that invert the
  ranges you selected and add original\nline numbers next to the output. For more
  information run the help command.\n\n*Important* All ranges you can select are inclusive,
  so 10-20 will include lines ten and\ntwenty. In mathematical notation all ranges
  are square brackets and not round brackets.\n\n## Installation Instructions\n\nInstall
  it just like a normal haskell program. Download the source and then just:\n\n    cabal
  install\n\nAnd make sure that your cabal bin directory is in your environments PATH
  variable. That is all that\nthere is to it.\n\nIf you wish to have a play around
  with it first before installing it in your cabal/bin\ndirectory then you may wish
  to install it first in a [cabal-dev][2] environment.\n\n## Command Line Options\n\nYou
  can get these by simply asking for help:\n\n    $ splitter -h\n    Usage: split
  [options] <input>\n      -n      --numbers  include line numbers in final output\n
  \     -i      --invert   get the opposite of the lines specified\n      -V, -v  --version
  \ print version number\n      -H, -h  --help     print this help message\n\nAnd
  that is everything that you can currently do with the splitter program.\n\n [1]:
  http://en.wikipedia.org/wiki/Unix_philosophy\n [2]: http://www.haskell.org/haskellwiki/Cabal-dev\n"
license-name: MIT
