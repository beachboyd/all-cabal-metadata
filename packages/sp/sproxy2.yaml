homepage: ''
changelog-type: markdown
hash: 9e48d84f598a7ad8622fe254ef1b65e36d7a376808cf051199ea215e3c578bc8
test-bench-deps: {}
maintainer: Igor Pashev <pashev.igor@gmail.com>
synopsis: Secure HTTP proxy for authenticating users via OAuth2
changelog: ! "1.97.0\n======\n\n  * Added new option `timeout` to configure backend
  response timeout.\n\n  * Changed default random key length to 64 bytes (from 32).\n\n\n1.96.0\n======\n\n
  \ * Added support for Yandex (https://tech.yandex.com/oauth/).\n\n  * Encode full
  URL (including protocol) into the state parameter,\n    not just path.  This makes
  it possible to work with OAuth2 providers\n    that do not support multiple callback
  URL, like Yandex.\n\n  * Fixed POST requests for tokens with Google and LinkedIn.
  They\n    were mistakenly using URL paramaters instead of URL-encoded bodies.\n\n\n1.95.0\n======\n\n
  \ * Add end-point for checking access in a bunch (`/.sproxy/access`).\n\n  * Respond
  with 502 (Bad Gateway) on any backend error.\n    Previously it was 500 (Internal
  Server Error).\n\n\n1.94.1\n======\n\n  * Fixed a typo introduced in version 1.94.0
  in SQL query:\n    `... WHERE domain = domain ...` -> `... WHERE domain = :domain
  ...`\n\n\n1.94.0\n======\n\n  * BREAKING: Disregard possible port in the Host HTTP
  header.\n    Previously, Sproxy took possible port number into account when\n    looking
  for backend and privileges. Now it ignores port and considers\n    domain name only.
  \ This also gets Sproxy in line with browsers and SSL\n    certificates: certificates
  do not include port numbers, browsers ignore\n    ports when sending cookies.\n\n
  \ * BREAKING: no SQL wildcards (`%` or `_`) in domain names when looking up\n    for
  privileges.  This feature was ambiguous (in the same way as paths are)\n    and
  never used anyway.\n\n\n1.93.0\n======\n\n  * BREAKING: Allow `!include` in config
  file.\n    This changes semantics of options `key` and `oauth2.<provider>.client_secret`.\n
  \   They are no longer files, but strings.  To read content from files, use\n    !include.
  \ The point of being files or read from files is to segregate secrets\n    from
  non-sensitive easily discoverable settings.  With `!include` it is much more\n    simple
  and flexible.\n\n\n1.92.0\n======\n\n  * Allow running in plain HTTP mode (no SSL).
  Useful when Sproxy is behind some\n    other proxy or load-balancer. Added two more
  options: `ssl` (defaults to true)\n    and `https_port` (defaults to like `listen`).
  Options `ssl_key` and `ssl_cert`\n    are required only if `ssl == true`. SSL-terminations
  is still required at upstream\n    proxies, because the cookie is set for HTTPS
  only.\n\n  * Added \"user\" table into `sproxy.sql`. No action is required, but
  PostgreSQL database\n    built after this file will be incompatible with Sproxy
  Web ( <= 0.4.1 at least).\n\n\n1.91.0\n======\n\n  * In addition to good old PostgreSQL
  data source, made it possible\n    to import permission data from a YAML file. This
  means that Sproxy2\n    can work without any PostgreSQL database, just using file-only
  configuration.\n    Useful for development or trivial deployments. Added new `datafile`
  option\n    in configuration file.\n\n\n1.90.2\n======\n\n  * Make sure all Sproxy-specific
  HTTP headers are UTF8-encoded.\n\n  * `/.sproxy/logout` just redirects if no cookie.
  Previously\n    it was returning HTTP 404 to unauthenticated users, and redirecting\n
  \   authenticated users with removal of the cookie. The point is not to\n    reveal
  cookie name.\n\n  * Made Warp stop printing exceptions, mostly \"client closed connection\",\n
  \   which happens outside of our traps.\n\n\n1.90.1\n======\n\n  * Fixed headers
  processing. Wrong headers were making Chromium drop connection in HTTP/2.\n    Firefox
  sometimes couldn't handle gzipped and chunked responses in HTTP/1.1.\n\n  * After
  authenticating, redirect to original path with query parameters if\n    method was
  GET.  Otherwise redirect to \"/\". Previously, when unauthenticated\n    users click
  on \"https://example.net/foo?bar\", they are redirected to\n    \"https://example.net/foo\"
  regardless of the method.\n\n\n\n1.90.0 (Preview Release)\n========================\n\nSproxy2
  is overhaul of original [Sproxy](https://github.com/zalora/sproxy)\n(see also [Hackage](https://hackage.haskell.org/package/sproxy)).\nHere
  are the key differences (with Sproxy 0.9.8):\n\n  * Sproxy2 can work with remote
  PostgreSQL database. Quick access to the database is essential\n    as sproxy does
  it on every HTTP request. Sproxy2 pulls data into local SQLite3 database.\n\n  *
  At this release Sproxy2 is compatible with Sproxy database with one exception:\n
  \   SQL wildcards are not supported for HTTP methods. I. e. you have to change '%'
  in\n    the database to specific methods like GET, POST, etc.\n\n  * OAuth2 callback
  URLs changed: Sproxy2 uses `/.sproxy/oauth2/:provider`,\n    e. g. `/.sproxy/oauth2/google`.
  Sproxy used `/sproxy/oauth2callback` for Google\n    and `/sproxy/oauth2callback/linkedin`
  for LinkedIn.\n\n  * Sproxy2 does not allow login with email addresses not known
  to it.\n\n  * Sproxy2: OAuth2 callback state is serialized, signed and passed base64-encoded.\n
  \   Of course it's used to verify the request is legit.\n\n  * Sproxy2: session
  cookie is serialized, signed and sent base64-encoded.\n\n  * Path `/.sproxy` belongs
  to Sproxy2 completely. Anything under this path is never passed to backends.\n\n
  \ * Sproxy2 supports multiple backends. Routing is based on the Host HTTP header.\n\n
  \ * Sproxy2 uses [WAI](https://hackage.haskell.org/package/wai) / [Warp](https://hackage.haskell.org/package/warp)\n
  \   for incoming connections. As a result Sproxy2 supports HTTP2.\n\n  * Sproxy2
  uses [HTTP Client](https://hackage.haskell.org/package/http-client) to talk to backends.\n
  \   As a result Sproxy2 reuses backend connections instead of closing them after
  each request to the backend.\n\n  * Sproxy2 optionally supports persistent key again
  (removed in Sproxy 0.9.2).\n    This can be used in load-balancing multiple Sproxy2
  instances.\n\n  * Configuration file has changed. It's still YAML, but some options
  are renamed, removed or added.\n    Have a look at well-documented [sproxy.example.yml](./sproxy.example.yml)\n\n"
basic-deps:
  warp: -any
  http-client: ! '>=0.5.3'
  cookie: ! '>=0.4.2'
  wai-conduit: -any
  cereal: -any
  bytestring: -any
  wai: -any
  SHA: -any
  unix: -any
  base: ! '>=4.8 && <50'
  time: -any
  sqlite-simple: -any
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  docopt: -any
  entropy: -any
  resource-pool: -any
  network: -any
  word8: -any
  conduit: -any
  interpolatedstring-perl6: -any
  blaze-builder: -any
  warp-tls: ! '>=3.2'
  postgresql-simple: -any
  http-conduit: -any
  http-types: -any
  Glob: -any
  aeson: -any
  yaml: ! '>=0.8.4'
all-versions:
- '1.90.0'
- '1.90.1'
- '1.90.2'
- '1.91.0'
- '1.92.0'
- '1.93.0'
- '1.94.0'
- '1.94.1'
- '1.95.0'
- '1.96.0'
- '1.97.0'
author: Igor Pashev <pashev.igor@gmail.com>
latest: '1.97.0'
description-type: markdown
description: ! "# Sproxy2\n\nHTTP proxy for authenticating users via OAuth2.\n\n\n##
  Motivation\n\nThis is overhaul of original [Sproxy](https://hackage.haskell.org/package/sproxy).\nSee
  [ChangeLog.md](./ChangeLog.md) for the differences.\n\nWhy use a proxy for doing
  OAuth2? Isn't that up to the application?\n\n * sproxy is secure by default.  No
  requests make it to\n   the web server if they haven't been explicitly whitelisted.\n
  * sproxy is independent.  Any web application written in\n   any language can use
  it.\n\n## Use cases\n\n * Existing web applications with concept of roles. For example,\n
  \  [Mediawiki](https://www.mediawiki.org), [Jenkins](https://jenkins.io),\n   [Icinga
  Web 2](https://www.icinga.org/products/icinga-web-2/). In\n   this case you configure
  Sproxy to allow unrestricted access\n   to the application for some groups defined
  by Sproxy. These\n   groups are mapped to the application roles.  There is a [plugin
  for\n   Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Reverse+Proxy+Auth+Plugin)\n
  \  which can be used for this. Mediawiki and Icinga Web 2 were also\n   successfully
  deployed in this way, though it required changes to their\n   source code.\n\n *
  New web applications designed to work specifically behind Sproxy. In this case\n
  \  you define Sproxy rules to control access to the\n   application's API.  It would
  likely be [a single-page\n   application](https://en.wikipedia.org/wiki/Single-page_application).\n
  \  Examples are [MyWatch](https://hackage.haskell.org/package/mywatch) and\n   [Juan
  de la Cosa](https://hackage.haskell.org/package/juandelacosa).\n\n * Replace HTTP
  Basic authentication.\n\n\nHow it works\n============\n\nWhen an HTTP client makes
  a request, Sproxy checks for a *session cookie*.\nIf it doesn't exist (or it's invalid,
  expired), it responses with [HTTP\nstatus 511](https://tools.ietf.org/html/rfc6585)
  with the page, where the\nuser can choose an [OAuth2](https://tools.ietf.org/html/rfc6749)
  provider to\nauthenticate with.  Finally, we store the the email address in a session\ncookie:
  signed with a hash to prevent tampering, set for HTTP only (to prevent\nmalicious
  JavaScript from reading it), and set it for secure (since we don't\nwant it traveling
  over plaintext HTTP connections).\n\nFrom that point on, when sproxy detects a valid
  session cookie it extracts the\nemail, checks it against the access rules, and relays
  the request to the\nback-end server (if allowed).\n\n\nPermissions system\n------------------\nPermissions
  are stored in internal SQLite3 database and imported\nfrom data sources, which can
  be a PostgreSQL database or a file.  See\n[sproxy.sql](./sproxy.sql) and [datafile.example.yml](./datafile.example.yml)\nfor
  details.\n\nDo note that Sproxy2 fetches only `group_member`, `group_privilege`\nand
  `privilege_rule` tables, because only these tables are used for\nauthorization.
  The other tables in PostgreSQL schema serve for data\nintegrity. Data integrity
  of the data file is not verfied, though import\nmay fail due to primary key restrictions.\n\nOnly
  one data source can be used. The data in internal database, if any,\nis fully overwritten
  by the data from a data source. If no data source is\nspecified, the data in internal
  database remains unchanged, even between\nrestarts.  Broken data source is _not_
  fatal. Sproxy will keep using existing\ninternal database, or create a new empty
  one if missed. Broken data source\nmeans inability to connect to PostgreSQL database,
  missed datafile, etc.\n\nThe data from a PostgreSQL database are periodically fetched
  into the internal\ndatabase, while the data file is read once at startup.\n\nHere
  are the main concepts:\n\n- A `group` is identified by a name. Every group has\n
  \ - members (identified by email address, through `group_member`) and\n  - associated
  privileges (through `group_privilege`).\n- A `privilege` is identified by a name
  _and_ a domain. It has associated rules\n  (through `privilege_rule`) that define
  what the privilege gives access to.\n- A `rule` is a combination of sql patterns
  for a `domain`, a `path` and an\n  HTTP `method`. A rule matches an HTTP request,
  if all of these components\n  match the respective attributes of the request. However
  of all the matching\n  rules only the rule with the longest `path` pattern will
  be used to determine\n  whether a user is allowed to perform a request. This is
  often a bit\n  surprising, please see the following example:\n\n\nPrivileges example\n------------------\n\nConsider
  this `group_privilege` and `privilege_rule` relations:\n\ngroup            | privilege
  | domain\n---------------- | --------- | -----------------\n`readers`        | `basic`
  \  | `wiki.example.com`\n`readers`        | `read`    | `wiki.example.com`\n`editors`
  \       | `basic`   | `wiki.example.com`\n`editors`        | `read`    | `wiki.example.com`\n`editors`
  \       | `edit`    | `wiki.example.com`\n`administrators` | `basic`   | `wiki.example.com`\n`administrators`
  | `read`    | `wiki.example.com`\n`administrators` | `edit`    | `wiki.example.com`\n`administrators`
  | `admin`   | `wiki.example.com`\n\nprivilege   | domain             | path           |
  method\n----------- | ------------------ | -------------- | ------\n`basic`     |
  `wiki.example.com` | `/%`           | `GET`\n`read`      | `wiki.example.com` |
  `/wiki/%`      | `GET`\n`edit`      | `wiki.example.com` | `/wiki/edit/%` | `GET`\n`edit`
  \     | `wiki.example.com` | `/wiki/edit/%` | `POST`\n`admin`     | `wiki.example.com`
  | `/admin/%`     | `GET`\n`admin`     | `wiki.example.com` | `/admin/%`     | `POST`\n`admin`
  \    | `wiki.example.com` | `/admin/%`     | `DELETE`\n\nWith this setup, everybody
  (that is `readers`, `editors` and `administrators`s)\nwill have access to e.g. `/imgs/logo.png`
  and `/favicon.ico`, but only\nadministrators will have access to `/admin/index.php`,
  because the longest\nmatching path pattern is `/admin/%` and only `administrator`s
  have the `admin`\nprivilege.\n\nLikewise `readers` have no access to e.g. `/wiki/edit/delete_everything.php`.\n\n\nKeep
  in mind that:\n\n- Domains are converted into lower case (coming from a data source
  or HTTP requests).\n- Emails are converted into lower case (coming from a data source
  or OAuth2 providers).\n- Groups are case-sensitive and treated as is.\n- HTTP methods
  are *case-sensitive*.\n- HTTP query parameters are ignored when matching a request
  against the rules.\n- Privileges are case-sensitive and treated as is.\n- SQL wildcards
  (`_` and `%`) are supported for emails, paths (this _will_ change in future versions).\n\n\nChecking
  access in a bunch\n--------------------------\n\nThere is an API end-point for checking
  access rights in a single POST query:\n`/.sproxy/access`.  Users should be authenticated
  to use this end-point,\notherwise the respond will be HTTP 511.\n\nThe request body
  shall be a JSON object like this:\n\n```json\n{\n  \"tag1\": {\"path\": \"/foo\",
  \"method\": \"GET\"},\n  \"tag2\": {\"path\": \"/bar\", \"method\": \"GET\"}\n}\n```\n\nAnd
  the respond will contain a JSON array with tag matching path and method\npairs allowed
  to the user.  For example:\n\n```sh\n$ curl -d '{\"foo\": {\"path\":\"/get\", \"method\":\"GET\"},
  \"bar\": {\"path\":\"/post\", \"method\":\"POST\"}}' -XPOST -k 'https://example.ru:8443/.sproxy/access'
  ...\n[\"foo\",\"bar\"]\n\n$ curl -d '{\"foo\": {\"path\":\"/get\", \"method\":\"POST\"},
  \"bar\": {\"path\":\"/post\", \"method\":\"POST\"}}' -XPOST -k 'https://example.ru:8443/.sproxy/access'
  ...\n[\"bar\"]\n\n$ curl -d '{\"foo\": {\"path\":\"/\", \"method\":\"POST\"}, \"bar\":
  {\"path\":\"/post\", \"method\":\"GET\"}}' -XPOST -k 'https://example.ru:8443/.sproxy/access'
  ...\n[]\n\n```\n\n\nLogout\n------\n\nHitting the endpoint `/.sproxy/logout` will
  invalidate the session cookie.\nThe user will be redirected to `/` after logout.\n\n\nRobots\n------\n\nSince
  all sproxied resources are private, it doesn't make sense for web\ncrawlers to try
  to index them. In fact, crawlers will index only the login\npage. To prevent this,
  sproxy returns the following for `/robots.txt`:\n\n```\nUser-agent: *\nDisallow:
  /\n```\n\n\nHTTP headers passed to the back-end server\n------------------------------------------\n\nAll
  Sproxy headers are UTF8-encoded.\n\n\nheader               | value\n--------------------
  | -----\n`From:`              | visitor's email address, lower case\n`X-Groups:`
  \         | all groups that granted access to this resource, separated by commas
  (see the note below)\n`X-Given-Name:`      | the visitor's given (first) name\n`X-Family-Name:`
  \    | the visitor's family (last) name\n`X-Forwarded-Proto:` | the visitor's protocol
  of an HTTP request, always `https`\n`X-Forwarded-For`    | the visitor's IP address
  (added to the end of the list if header is already present in client request)\n\n\n`X-Groups`
  denotes an intersection of the groups the visitor belongs to and the groups that
  granted access:\n\nVisitor's groups | Granted groups | `X-Groups`\n----------------
  | -------------- | ---------\nall              | all, devops    | all\nall, devops
  \     | all            | all\nall, devops      | all, devops    | all,devops\nall,
  devops      | devops         | devops\ndevops           | all, devops    | devops\ndevops
  \          | all            | Access denied\n\n\nRequirements\n============\nSproxy2
  is written in Haskell with [GHC](http://www.haskell.org/ghc/).\nAll required Haskell
  libraries are listed in [sproxy2.cabal](sproxy2.cabal).\nUse [cabal-install](http://www.haskell.org/haskellwiki/Cabal-Install)\nto
  fetch and build all pre-requisites automatically.\n\n\nConfiguration\n=============\n\nBy
  default `sproxy2` will read its configuration from `sproxy.yml`.  There is\nexample
  file with documentation [sproxy.example.yml](sproxy.example.yml). You\ncan specify
  a custom path with:\n\n```\nsproxy2 --config /path/to/sproxy.yml\n```\n\n"
license-name: MIT
