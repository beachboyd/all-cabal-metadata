homepage: https://github.com/gregwebs/haskell-sphinx-client
changelog-type: ''
hash: c8c013a389825f5e70ecd3ab27e5bd08903f108aef6c0c033de6f6764401c2cc
test-bench-deps: {}
maintainer: Greg Weber <greg@gregweber.info>, Aleksandar Dimitrov <aleks.dimitrov@gmail.com>
synopsis: Haskell bindings to the Sphinx full-text searching daemon.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  text: <1.3
  network: -any
  xml: -any
  binary: -any
  text-icu: <0.8
  data-binary-ieee754: -any
all-versions:
- '0.0'
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.4.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.4.0.5
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.2.1
- 0.5.2.2
- 0.5.3
- 0.5.3.1
- 0.6.0
- 0.6.0.1
- 0.6.0.2
author: Chris Eidhof <ce+sphinx@tupil.com>, Greg Weber
latest: 0.6.0.2
description-type: markdown
description: ! "A haskell implementation of a [sphinx full text search](http://sphinxsearch.com)
  client.\nSphinx is a very fast and featureful full-text search daemon.\nVersion
  0.4 is Compatible with sphinx version 1.1-beta\nVersion 0.5+ is Compatible with
  sphinx version 2.0, but you can instead pass the version-one-one build flag.\n[On
  hackage](http://hackage.haskell.org/package/sphinx).\n\n# Usage\n\n## Constructing
  Queries\n\nThe data type `Query` is used to represent queries to the server. It
  specifies\na search string and the indexes to run the query on, as well as a comment,\nwhich
  may be the empty string. In order to run a query on all indexes, use\n`\"*\"` in
  the index field.\n\nThe convenience function `query` executes a single query and
  constructs the\n`Query` by itself, so you don't have to.\n\nTo execute more than
  one `Query`, use `runQueries`. Details are below in the\nsection [*Batch Queries*](#batch-queries).
  To construct simple queries, you can\nalso use `simpleQuery :: Text -> Query` which
  constructs a `Query` over all\nindexes. Don't forget that you can use record updates
  on a `Query`.\n\nIn extended mode you may want to escape special query characters
  with `escapeString`.\n\nAll interaction with the server, including sending queries
  and receiving\nresults, is based on the `Data.Text` string type. You might therefore
  want to\nenable the `OverloadedStrings` pragma.\n\n## Excerpts and XML Indexes\n\n`buildExcerpts`
  creates highlighted excerpts.\n\nYou will probably need to import the types as well:\n\n
  \   import qualified Text.Search.Sphinx as Sphinx\n    import qualified Text.Search.Sphinx.Types
  as SphinxT\n\nThere is also an `Indexable` module for generating an xml file of
  data to be indexed.\n\n## Batch Queries\n\nYou can send more than one query per
  request to the server (which may enable\nserver-side query optimization in certain
  cases. Refer to the\n[Sphinx manual](http://sphinxsearch.com/docs/2.0.4/api-func-addquery.html)\nfor
  details.) The function `runQueries` pipelines multiple queries together. If you\nare
  trying to combine the results, there are some helpers such as\n`maybeQueries` and
  `resultsToMatches`.\n\n~~~~~~ {.haskell}\n      mr <- Sphinx.maybeQueries sphinxLogger
  sphinxConfig [\n                 SphinxT.Query query1 \"db1\" \"\"\n               ,
  SphinxT.Query query1 \"db2\" \"\"\n               , SphinxT.Query query2 \"db1\"
  \"\"\n               , SphinxT.Query query2 \"db2\" \"\"\n               ]\n      case
  mr of\n        Nothing -> return Nothing\n        Just rs -> do\n          let combined
  = Sphinx.resultsToMatches 20 rs\n          if null combined\n             then return
  Nothing\n             else return $ Just combined\n~~~~~~\n\n**A note** for those
  transitioning from `0.5.*` to `0.6`: the function `addQueries`\nhas been removed.
  You can now directly send a list of `Query` to the server by using\n`runQueries`,
  which will handle the serialization for you behind the scenes.\n\n## Encoding\n\nThe
  sphinx server itself does not know about encodings except for the\ndifference between
  single-byte encodings and multi-byte encodings. It assumes\nthat all incoming queries
  are already properly encoded and matches the raw\nbytes it receives; the same holds
  for the results returned by the server. Hence\nthe responsibilty for using the proper
  encoding (and decoding) routines lies\nwith the caller.\n\nVersion 0.6.0 of `haskell-sphinx-client`
  introduces the `encoding` field in\nboth the `Configuration` data type and the `ExcerptConfiguration`
  data type.\nThe library handles proper encoding and decoding in the background;
  just\nmake sure you set the right encoding setting in the configuration!\n\nDetails\n=======\n\nImplemenation\n-------------\nImplementation
  of API as detailed in [the documentation](http://sphinxsearch.com/docs/manual-1.10.html).\nMost
  search and buildExcerpts features are implemented.\n\nHistory\n-------\nOriginally
  written by Tupil and maintained by Chris Eidhof for an earlier version of sphinx.\nGreg
  Weber improved the library and updated it for the latest version of sphinx, and
  is now maintaining it.\nAleksandar Dimitrov updated the library to use Text.\n\nUsage
  of this haskell client\n----------------------------\nTupil originally wrote this
  for use on a commercial project.\nThis sphinx package is now finding some use in
  the Yesod community. [Here is a well described example usage](https://github.com/yesodweb/yesod/wiki/Sphinx-Search),
  but do keep in mind there is no requirement to tie the *generation* of sphinx documents
  to your web application, just your database. Used in Yesod applications yesdoweb.com
  and eatnutrients.com.\n"
license-name: BSD-3-Clause
