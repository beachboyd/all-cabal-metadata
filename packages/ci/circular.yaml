homepage: https://github.com/dschrempf/circular#readme
changelog-type: markdown
hash: 3c2e15ce9dcd125757577ed8fa8c5165df87b12c0e161d28f6e0988a06a31c29
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  criterion: -any
  quickcheck-instances: -any
  QuickCheck: -any
  hspec-discover: -any
  aeson: -any
  circular: -any
  vector: -any
maintainer: dominik.schrempf@gmail.com
synopsis: Circular fixed-sized mutable vectors
changelog: |2+

  # Changelog for circular


  ## 0.1.1

  -   Remove `mean`.
  -   Add benchmark.
  -   Many small improvements.


  ## Unreleased changes

basic-deps:
  base: '>=4.7 && <5'
  aeson: -any
  vector: -any
all-versions:
- 0.1.0
- 0.1.1
author: Dominik Schrempf
latest: 0.1.1
description-type: markdown
description: |2+

  # Circular

  <p align="center"><img src="https://travis-ci.org/dschrempf/circular.svg?branch=master"/></p>

  Circular fixed-sized stacks.

  Circular stacks with fxed maximum size are just normal vectors with a
  pointer to the last element. They are useful because

  -   memory usage is constant
  -   they are fast, especially when summary statistics need to be
      computed across the stack (use `unsafePush`, if possible)
  -   they can be saved, and restored using JSON format

  When the stack is full, new, pushed elements replace the oldest (deepest)
  elements on the stack. Complex circular behavior can arise when pushes and pops
  are mixed. QuickCheck and unit tests with HSpec give promising results &#x2014; have
  a look yourself.

  I use circular stacks, for example, as the data type for traces of Markov
  chains.

  `Circular` is actively developed and functions may be removed, renamed, or
  changed. New ideas are welcome!

license-name: BSD-3-Clause
