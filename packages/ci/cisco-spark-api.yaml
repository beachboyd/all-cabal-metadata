homepage: https://github.com/nshimaza/webex-teams-api#readme
changelog-type: markdown
hash: 0531b8f0f3ee54f78afa48f1af2fc8811409d2f244f9ec0698b9e6c8a33250cf
test-bench-deps:
  warp: -any
  bytestring: -any
  wai: -any
  base: -any
  hspec: -any
  text: -any
  async: -any
  conduit: -any
  data-default: -any
  network-uri: -any
  attoparsec: -any
  http-conduit: -any
  http-types: -any
  aeson: -any
  cisco-spark-api: -any
maintainer: Naoto.Shimazaki@gmail.com
synopsis: DEPRECATED in favor of webex-teams-api
changelog: ! '## Cisco-spark-api 0.1.0.4


  * Deprecated in favor of webex-teams-api.


  ## Cisco-spark-api 0.1.0.3


  * Cisco Spark is now Cisco Webex Teams.


  ## Cisco-spark-api 0.1.0.2


  * Catch up to conduit-1.3.0.


  ## Cisco-spark-api 0.1.0.1


  * Put explicit upper bound for conduit.


  ## Cisco-spark-api 0.1.0.0


  * Initial release.

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  bitset-word8: -any
  conduit: -any
  data-default: -any
  utf8-string: -any
  network-uri: -any
  attoparsec: -any
  optparse-applicative: -any
  http-conduit: -any
  aeson: -any
  cisco-spark-api: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Naoto Shimazaki
latest: 0.1.0.4
description-type: markdown
description: ! "# cisco-spark-api (DEPRECATED)\n\nDeprecated in favor of webex-teams-api.\n\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Build
  Status](https://travis-ci.org/nshimaza/webex-teams-api.svg?branch=master)](https://travis-ci.org/nshimaza/webex-teams-api)\n[![Hackage](https://img.shields.io/hackage/v/cisco-spark-api.svg?style=flat)](https://hackage.haskell.org/package/cisco-spark-api)\n[![Stackage
  Nightly](http://stackage.org/package/cisco-spark-api/badge/nightly)](http://stackage.org/nightly/package/cisco-spark-api)\n[![Stackage
  LTS](http://stackage.org/package/cisco-spark-api/badge/lts)](http://stackage.org/lts/package/cisco-spark-api)\n\nA
  Haskell bindings for Cisco Webex Teams (formerly Cisco Spark) API\n\nCisco-spark-api
  package provides types and functions for accessing Cisco Webex Teams REST API.\nThe
  detail of the API is available from [developer site of Cisco Webex](https://developer.webex.com/)\n\nThis
  package is designed to improve type safety over the API.  Each entity is separately
  typed.\nJSON messages contained in REST responses are decoded into appropriate type
  of Haskell record.\nJSON messages sent in REST requests are encoded only from correct
  type of record.\n\nSome Webex Teams REST API return list of objects.  Those APIs
  require HTTP Link Header based pagination.\nHaskell functions for those APIs automatically
  request subsequent pages as needed.\nAlso those functions transform chunky response
  into seamless stream of elements.\n\nThis package also provides some sample usage
  in command line application style.\nSee source under app directory of the source
  package.\n\n### Sample Usage\n\nSending a message to a Room.\n\n```haskell\n    let
  auth        = Authorization \"your authorization token\"\n        roomId      =
  RoomId \"Room ID your message to be sent\"\n        messageText = MessageText \"your
  message\"\n        message     = CreateMessage (Just roomId) Nothing Nothing (Just
  messageText) Nothing Nothing\n    createEntity auth def createMessage >>= print
  . getResponseBody\n```\n\nFollowing example is calling List Membership API which
  returns membership between\nRooms and users (Person).  You can extract each Membership
  from\nConduit pipe.  The streamEntityWithFilter automatically performs pagenation
  when it is\nasked more element and last response indicated subsequent page in HTTP
  Link Header.\n\n```haskell\n    let auth   = Authorization \"your authorization
  token\"\n        filter = MembershipFilter yourRoomId Nothing Nothing\n    runConduit
  $ streamEntityWithFilter auth def filter .| takeC 200 .| mapM_C print\n```\n\nYou
  can find more examples in app/Main.hs\n\n### Support for Lens\n\nThis package provides
  many of records representing objects communicated via Webex Teams REST API.\nThose
  records are designed to allow create lenses by Control.Lens.TH.makeFields.\n\nFollowing
  example creates overloaded accessors for 'Person', 'Room' and 'Team'.\n\n```haskell\nmakeFields
  ''Person\nmakeFields ''Room\nmakeFields ''Team\n```\n\nYou can access 'personId',
  'roomId' and 'teamId' via overloaded accessor function 'id' like this.\n\n```haskell\n
  \   let yourPersonId = yourPerson ^. id\n        yourRoomId = yourRoom ^. id\n        yourTeamId
  = yourTeam ^. id\n```\n\nThis package does not provide pre-generated lenses for
  you because not everyone need it\nbut you can make it by yourself so easily as described.\n\n###
  Limitation\n\n- WebHook API is not yet implemented.\n- Relative reference in Link
  Header is not recognized as next page\n"
license-name: MIT
