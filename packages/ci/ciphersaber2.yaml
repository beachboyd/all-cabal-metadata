homepage: http://github.com/BartMassey/ciphersaber
changelog-type: ''
hash: a29614cc773a2dba6219730307cf59dd9c5f163ae1ee1bf3b22b53fdf333f34f
test-bench-deps: {}
maintainer: bart@cs.pdx.edu
synopsis: Implementation of CipherSaber2 RC4 cryptography.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <1'
  base: ==4.*
  array: ! '>=0.4 && <1'
  parseargs: ! '>=0.1 && <1'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
author: Bart Massey
latest: 0.1.1.2
description-type: markdown
description: ! "# ciphersaber2\nCopyright Â© 2015 Bart Massey\n\nThis package provides
  a Haskell library and driver program\nimplementing [CipherSaber-2](http://ciphersaber.gurus.org/)(CS2)\nstream
  encryption based on the\n[RC4](http://en.wikipedia.org/wiki/RC4) stream encryption\nalgorithm.
  This implementation has been tested against and\nis compatible with existing CipherSaber
  implementations.\n\n## CS2\n\nThe documentation for CS2 is a bit out-of-date and\nscattered.\n\n###
  History\n\nCS2 is based on the RC4 stream cipher.  Wikipedia\nhas a nice\n[history](http://en.wikipedia.org/wiki/RC4#History)
  of RC4\nas well as current reports on its\n[cryptanalysis](http://en.wikipedia.org/wiki/RC4#Security).\n\nIn
  1999, Arnold Reinhold suggested using RC4 as the basis\nfor citizens to learn to
  build their own encryption\nsoftware, along the lines of Jedi Light Sabers. Reinhold\nproposed
  a stream protocol for RC4 ciphertext that he called\n[CipherSaber](http://ciphersaber.gurs.org)
  (Note that the CipherSaber\nwebsite is mostly abandoned and in some state of disrepair.)\n\nIn
  2003, after cryptographic attacks were found against RC4\nas used in CipherSaber,
  Reinhold modified the CipherSaber\nprotocol to produce a new parameterized family
  of protocols\nknown as CS2: the original CipherSaber is a\nspecial case of CS2,
  and is often referred to as\nCipherSaber-1.\n\n### Algorithm\n\nPseudocode for CS2
  is available from a variety of\nplaces. The pseudocode given here attempts to be
  clear and\nnormative.\n\nCS2 encryption and decryption both require an RC4\nimplementation
  that has been modified to iterate the key\nschedule a given number of times.\n\n<!--
  This pseudocode translated from rc4.pseu by pseuf -->\n\n>   \n> --&nbsp;Produce
  an RC4 keystream of length&nbsp;*n*&nbsp;with  \n> --&nbsp;*r*&nbsp;rounds of key
  scheduling given key&nbsp;*k*  \n> *rc4*(*n*,&nbsp;*r*,&nbsp;*k*):  \n> &nbsp;&nbsp;&nbsp;&nbsp;*l*&nbsp;&#8592;&nbsp;**length**&nbsp;*k*
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Initialize&nbsp;the&nbsp;array.  \n> &nbsp;&nbsp;&nbsp;&nbsp;*S*&nbsp;&#8592;&nbsp;zero-based
  array of 256 bytes  \n> &nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..255
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*S*[*i*]&nbsp;&#8592;&nbsp;*i*
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Do&nbsp;key&nbsp;scheduling.  \n> &nbsp;&nbsp;&nbsp;&nbsp;*j*&nbsp;&#8592;&nbsp;0
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;**repeat**&nbsp;*r*&nbsp;**times**  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..255
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j*&nbsp;&#8592;&nbsp;(*j*&nbsp;+&nbsp;*S*[*i*]&nbsp;+&nbsp;*k*[*i*&nbsp;**mod**&nbsp;*l*])&nbsp;**mod**&nbsp;256
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*S*[*i*]&nbsp;&#8596;&nbsp;*S*[*j*]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;Finally,&nbsp;produce&nbsp;the&nbsp;stream.
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;*keystream*&nbsp;&#8592;&nbsp;zero-based array of&nbsp;*n*&nbsp;bytes
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;*j*&nbsp;&#8592;&nbsp;0  \n> &nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..n-1
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i'&nbsp;&#8592;&nbsp;(*i*&nbsp;+&nbsp;1)&nbsp;**mod**&nbsp;256
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*j*&nbsp;&#8592;&nbsp;(*j*&nbsp;+&nbsp;*S*[i'])&nbsp;**mod**&nbsp;256
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*S*[i']&nbsp;&#8596;&nbsp;*S*[*j*]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*keystream*[*i*]&nbsp;&#8592;&nbsp;*S*[(*S*[i']&nbsp;+&nbsp;*S*[*j*])&nbsp;**mod**&nbsp;256]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;**return**&nbsp;*keystream*  \n\n<!-- End of pseuf
  translation of rc4.pseu -->\n\n\nCS2 encryption requires a plaintext message (treated
  as a\nbytestream), a key, and an \"initial value\"\n([IV](http://en.wikipedia.org/wiki/Initialization_vector))\nof
  10 bytes. The key *should* be no more than 53 bytes, to\nensure good mixing during
  key scheduling.\n\nThe IV is a\n[nonce](http://en.wikipedia.org/wiki/Cryptographic_nonce)\nthat
  must be different for each message sent: it should be\nchosen randomly if possible,
  but may be chosen\npseudo-randomly or even just counted if necessary.\nCS2 appends
  the IV to the CS2 key to produce an RC4 key.\nRC4 uses only the first 256 RC4 key
  bytes. Thus, the CS2 key\n*must* be no more than 246 bytes: a longer CS2 key would\ncause
  some or all of the IV to not be used by RC4.\n\n<!-- This pseudocode translated
  from encrypt.pseu by pseuf -->\n\n>   \n> --&nbsp;Ciphersaber-2 encrypt message&nbsp;*m*&nbsp;with
  key&nbsp;*k*&nbsp;and  \n> --&nbsp;*r*&nbsp;rounds of key scheduling  \n> *encrypt*(*m*,&nbsp;*r*,&nbsp;*k*):
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*n*&nbsp;&#8592;&nbsp;**length**&nbsp;*m*  \n>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*iv*&nbsp;&#8592;&nbsp;appropriately-chosen 10-byte
  IV  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k'&nbsp;&#8592;&nbsp;prepend&nbsp;*k*&nbsp;**to**&nbsp;*iv*
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*keystream*&nbsp;&#8592;&nbsp;*rc4*(*n*,&nbsp;*r*,&nbsp;k')
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ciphertext&nbsp;&#8592;&nbsp;zero-based array
  of&nbsp;*n*&nbsp;+&nbsp;10&nbsp;bytes  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..9
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ciphertext[*i*]&nbsp;&#8592;&nbsp;*iv*[*i*]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..*n*  \n>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ciphertext[*i*&nbsp;+&nbsp;10]&nbsp;&#8592;&nbsp;*m*[*i*]&nbsp;**xor**&nbsp;*keystream*[*i*]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**return**&nbsp;ciphertext  \n\n<!-- End of
  pseuf translation of encrypt.pseu -->\n\nCS2 decryption requires ciphertext and
  the encryption key\nused to produce the ciphertext.\n\n<!-- This pseudocode translated
  from decrypt.pseu by pseuf -->\n\n>   \n> --&nbsp;Ciphersaber-2 decrypt ciphertext&nbsp;*m*&nbsp;with
  key&nbsp;*k*&nbsp;and  \n> --&nbsp;*r*&nbsp;rounds of key scheduling  \n> *decrypt*(*m*,&nbsp;*r*,&nbsp;*k*):
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*n*&nbsp;&#8592;&nbsp;**length**&nbsp;*m*  \n>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*iv*&nbsp;&#8592;&nbsp;*m*[0..9]  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete
  the first 10 characters of&nbsp;*m*  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k'&nbsp;&#8592;&nbsp;prepend&nbsp;*k*&nbsp;**to**&nbsp;*iv*
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*keystream*&nbsp;&#8592;&nbsp;*rc4*(*n*&nbsp;-&nbsp;10,&nbsp;*r*,&nbsp;k')
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext&nbsp;&#8592;&nbsp;zero-based array
  of&nbsp;*n*&nbsp;-&nbsp;10&nbsp;bytes  \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*i*&nbsp;**in**&nbsp;0..n-10
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext[*i*]&nbsp;&#8592;&nbsp;*m*[*i*]&nbsp;**xor**&nbsp;*keystream*[*i*]
  \ \n> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**return**&nbsp;plaintext  \n\n<!-- End of pseuf
  translation of decrypt.pseu -->\n\n## Library\n\nThe `CipherSaber2` library provides
  a relatively straightforward\n`ByteString` interface. See the `haddock` documentation\nfor
  details.\n\n## Driver\n\nThe program `cs2` uses the `CipherSaber2` library to encrypt\nor
  decrypt `stdin` to `stdout`.\n\n`cs2` is written in Haskell, so you will need a
  Haskell\ninstallation to run it. It depends on the package\n`[parseargs](http://hackage.haskell.org/package/parseargs)`\nfrom
  [Hackage](http://hackage.haskell.org), as well as the\n`bytestring` package that
  should probably have come with\nyour distribution but may need to be installed.
  Say \"`cabal\ninstall parseargs`\" and \"`cabal install bytestring`\" to get\nthings
  set up. (This in turn may require a `cabal-install`\npackage from your Linux distribution
  or thereabouts.)\n\nSay \"`runghc cs2.hs --help`\" for usage information.\n\nSay
  \"`runghc cs2.hs -e whee <f.txt >g.cs2`\" to encrypt the\nfile `f.txt` with key
  `whee`. An IV will be automatically\nchosen.\n\nSay \"`runghc cs2.hs -d whee <g.cs2
  >ff.txt`\" to decrypt the\nfile `g.cs2` with key `whee`.\n\n## Test Instances\n\nThe
  `test` directory include a bunch of plaintext/ciphertext\npairs taken from the original
  CS2 materials. Please see\n`README.md` in that directory for more information.\n\n##
  License\n\nThis work is licensed under the \"MIT License\".  Please\nsee the file
  LICENSE in the source distribution of this\nsoftware for license terms.\n\n"
license-name: MIT
