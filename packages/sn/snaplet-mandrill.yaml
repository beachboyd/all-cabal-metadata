homepage: https://github.com/ixmatus/snaplet-mandrill
changelog-type: ''
hash: 1811e8e04b311e77c743a4738a7ce475072ee299b23fb65edcf0201f6a6033da
test-bench-deps: {}
maintainer: parnell@digitalmentat.com
synopsis: Snap framework snaplet for the Mandrill API library.
changelog: ''
basic-deps:
  snap: ! '>=0.13 && <0.14'
  base: ! '>=4.4 && <5'
  configurator: ! '>=0.3 && <0.4'
  network: ! '>=2.5 && <2.7'
  mtl: ! '>=2 && <3'
  mandrill: ! '>=0.1 && <0.2'
  transformers: ! '>=0.4 && <0.5'
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Parnell Springmeyer
latest: 0.1.0.3
description-type: text
description: ! "* Welcome!\n  [[https://hackage.haskell.org/package/snaplet-mandrill][https://img.shields.io/hackage/v/snaplet-mandrill.svg?style=flat]]\n
  \ [[https://travis-ci.org/ixmatus/snaplet-mandrill][https://travis-ci.org/ixmatus/snaplet-mandrill.svg?branch=master]]\n
  \ \n  =snaplet-mandrill= provides a convenience interface to the Haskell\n  Mandrill
  package.\n\n  #+BEGIN_SRC\n  {-# LANGUAGE FlexibleInstances #-}\n  {-# LANGUAGE
  OverloadedStrings #-}\n  {-# LANGUAGE RecordWildCards   #-}\n  {-# LANGUAGE TemplateHaskell
  \  #-}\n\n  module Main where\n\n  ------------------------------------------------------------------------------\n
  \ import           Control.Applicative\n  import           Control.Lens\n  import
  \          Data.ByteString.Char8 as C8\n  import           Data.Maybe            (fromMaybe)\n
  \ import           Network.API.Mandrill  hiding (runMandrill)\n  import           Snap\n
  \ import           Snap.Snaplet.Mandrill\n  import           Text.Email.Validate\n\n
  \ ------------------------------------------------------------------------------\n
  \ data App = App\n      { _mandrill :: Snaplet MandrillState\n      }\n\n  makeLenses
  ''App\n\n  instance HasMandrill (Handler b App) where\n      getMandrill = with
  mandrill getMandrill\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application's routes.\n  routes :: [(ByteString, Handler App App ())]\n
  \ routes = [ (\"/\"            , writeText \"hello\")\n           , (\"mailme/:email\",
  fooHandler)\n           ]\n\n  decodedParam :: MonadSnap m => ByteString -> m ByteString\n
  \ decodedParam p = fromMaybe \"\" <$> getParam p\n\n  fooHandler :: Handler App
  App ()\n  fooHandler = do\n      email <- decodedParam \"email\"\n      case emailAddress
  email of\n          Nothing -> do\n              modifyResponse $ setResponseCode
  400\n          Just e  -> do\n              res <- runMandrill $ do\n                  return
  =<< sendEmail (newTextMessage e [e] \"Hello\" \"<p>My Html</p>\")\n\n              mandrillResponse
  res\n\n      getResponse >>= finishWith\n\n    where\n      mandrillResponse (MandrillSuccess
  _) = modifyResponse $ setResponseCode 204\n      mandrillResponse (MandrillFailure
  e) = do\n                      modifyResponse $ setResponseCode 500\n                      writeBS
  . C8.pack $ show e\n\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application initializer.\n  app :: SnapletInit App App\n  app = makeSnaplet
  \"app\" \"An snaplet example application.\" Nothing $ do\n      m <- nestSnaplet
  \"mandrill\" mandrill $ initMandrill\n      addRoutes routes\n      return $ App
  m\n\n\n  main :: IO ()\n  main = serveSnaplet defaultConfig app\n  #+END_SRC\n"
license-name: BSD-3-Clause
