homepage: https://github.com/ixmatus/snaplet-logger
changelog-type: ''
hash: ef26c1973754ac93e43aca2d2b95a06de1fd82d9499cf867ff152613eb0bf925
test-bench-deps: {}
maintainer: parnell@digitalmentat.com
synopsis: Snap framework snaplet for the Logger API library.
changelog: ''
basic-deps:
  snap: ! '>=0.13 && <0.14'
  base: ! '>=4.4 && <5'
  configurator: ! '>=0.3 && <0.4'
  hslogger: ! '>=1.0 && <2.0'
  mtl: ! '>=2 && <3'
  transformers: ! '>=0.4 && <0.5'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
author: Parnell Springmeyer
latest: 1.0.0.2
description-type: text
description: ! "* Welcome!\n  [[https://hackage.haskell.org/package/snaplet-hslogger][https://img.shields.io/hackage/v/snaplet-hslogger.svg?style=flat]]\n
  \ [[https://travis-ci.org/ixmatus/snaplet-hslogger][https://travis-ci.org/ixmatus/snaplet-hslogger.svg?branch=master]]\n
  \ \n  =snaplet-hslogger= provides a convenience interface to the Haskell\n  [[http://hackage.haskell.org/package/hslogger][HSLogger]]
  package.\n\n  #+BEGIN_SRC\n  {-# LANGUAGE FlexibleInstances #-}\n  {-# LANGUAGE
  OverloadedStrings #-}\n  {-# LANGUAGE RecordWildCards   #-}\n  {-# LANGUAGE TemplateHaskell
  \  #-}\n\n  module Main where\n\n  ------------------------------------------------------------------------------\n
  \ import           Control.Applicative\n  import           Control.Lens\n  import
  \          System.Log\n  import           Snap\n  import           Snap.Snaplet.Log\n
  \ import           Text.Email.Validate\n\n  ------------------------------------------------------------------------------\n
  \ data App = App\n      { _logger :: Snaplet ()\n      }\n\n  makeLenses ''App\n\n
  \ ------------------------------------------------------------------------------\n
  \ -- | The application's routes.\n  routes :: [(ByteString, Handler App App ())]\n
  \ routes = [ (\"/\"            , writeText \"hello\")\n           , (\"/foo\"         ,
  fooHandler)\n           ]\n\n  fooHandler :: Handler App App ()\n  fooHandler =
  do\n      log DEBUG \"Message\"\n      getResponse >>= finishWith\n\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application initializer.\n  app :: SnapletInit App App\n  app = makeSnaplet
  \"app\" \"An snaplet example application.\" Nothing $ do\n      m <- nestSnaplet
  \"hslogger\" logger $ initLogger\n      addRoutes routes\n      return $ App m\n\n\n
  \ main :: IO ()\n  main = serveSnaplet defaultConfig app\n  #+END_SRC\n"
license-name: BSD-3-Clause
