homepage: http://github.com/zimothy/snaplet-rest
changelog-type: ''
hash: 4b9d3b0607bfdae727d552290ff056f5bf1f39426789a49b03d7ed4da111b193
test-bench-deps: {}
maintainer: Timothy Jones <git@zimothy.com>
synopsis: REST resources for the Snap web framework
changelog: ''
basic-deps:
  snap: ! '>=0.13.0 && <0.14'
  bytestring: ! '>=0.10.0 && <0.11'
  case-insensitive: ! '>=1.0.0 && <1.1'
  base: ! '>=4.6.0 && <4.7'
  text: ! '>=0.11.3 && <0.12'
  snap-accept: ! '>=0.1.0 && <0.2'
  xmlhtml: ! '>=0.2.3 && <0.3'
  blaze-builder: ! '>=0.3.1 && <0.4'
  lens: ! '>=3.9.0 && <3.10'
  utf8-string: ! '>=0.3.7 && <0.4'
  snap-core: ! '>=0.9.4 && <0.10'
  mtl: ! '>=2.1.2 && <2.2'
  aeson: ! '>=0.6.2 && <0.7'
  http-media: ! '>=0.1.0 && <0.2'
all-versions:
- 0.1.0
author: Timothy Jones
latest: 0.1.0
description-type: haddock
description: ! 'REST resources for the Snap framework.


  As an example, let''s translate the following datatype into a resource.


  > data User = User Username String Int

  >

  > type Username = CI String


  We need a type to represent changes to the resource.  This ''partial'' type

  indicates what properties to change: either the name, the age, or both.


  > data UserPart = UserPart (Maybe String) (Maybe Int)


  This type also acts as a search mechanism: we can search by names, ages, or

  both.  We can use either a username or a @UserPart@ search to find users, and

  define a function to convert URL query string parameters to this search.


  > type UserId = Either Username UserPart

  >

  > userIdFromParams :: Params -> Maybe UserId


  Now we have the pieces required to define our CRUD behaviour.


  > createUser :: User -> AppHandler ()

  >

  > readUser :: UserId -> AppHandler [User]

  >

  > updateUser :: UserId -> UserPart -> AppHandler Bool

  >

  > deleteUser :: UserId -> AppHandler Bool


  If we''ve implemented Aeson instances, we can add JSON as a media format

  without having to define these manually.  Once the behaviour is attached to

  the resource, it can be served in the handler.


  > serveUser :: AppHandler ()

  > serveUser = serveResource $ resource

  >     & addMedia jsonInstances

  >     & setCreate createUser

  >     & setRead readUser

  >     & setUpdate updateUser

  >     & setDelete deleteUser

  >     & setFromParams userIdFromParams'
license-name: MIT
