homepage: https://github.com/ixmatus/snaplet-amqp
changelog-type: ''
hash: 5165c32d090b6e7db0c1b4d09e0338c2bc5003abde7ba369ecc5a87228d0f0c2
test-bench-deps: {}
maintainer: parnell@digitalmentat.com
synopsis: Snap framework snaplet for the AMQP library
changelog: ''
basic-deps:
  snap: ! '>=0.13 && <0.14'
  bytestring: ! '>=0.9 && <11'
  base: ! '>=4.4 && <5'
  amqp: ! '>=0.10 && <0.11'
  configurator: ! '>=0.3 && <0.4'
  monad-control: ! '>=0.3 && <0.4'
  resource-pool: ! '>=0.2 && <0.3'
  network: ! '>=2.5 && <2.7'
  lens: ! '>=4 && <5'
  mtl: ! '>=2 && <3'
  transformers: ! '>=0.4 && <0.5'
all-versions:
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.1.3.0
- 0.1.3.1
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
- 1.1.0.0
author: Parnell Springmeyer
latest: 1.1.0.0
description-type: text
description: ! "* Welcome!\n  [[https://hackage.haskell.org/package/snaplet-amqp][https://img.shields.io/hackage/v/snaplet-amqp.svg?style=flat]]\n
  \ [[https://travis-ci.org/ixmatus/snaplet-amqp][https://travis-ci.org/ixmatus/snaplet-amqp.svg?branch=master]]\n
  \ \n  =snaplet-amqp= provides a convenience interface to the Haskell AMQP\n  package.\n\n
  \ Because the AMQP package doesn't provide its own connection pooling\n  mechanism,
  this snaplet uses the =resource-pool= package to create a\n  pool of ten connections
  (only connections, not channels).\n\n  When the =runAmqp= function is used a connection
  from the pool is\n  leased, a channel is created and both the connection and channel
  are\n  applied to the supplied action.\n\n  #+BEGIN_SRC\n  {-# LANGUAGE FlexibleInstances
  #-}\n  {-# LANGUAGE OverloadedStrings #-}\n  {-# LANGUAGE RecordWildCards   #-}\n
  \ {-# LANGUAGE TemplateHaskell   #-}\n\n  module Main where\n\n  ------------------------------------------------------------------------------\n
  \ import           Control.Lens\n  import           Data.ByteString.Char8 as C8\n
  \ import           Network.AMQP\n  import           Snap\n  import           Snap.Snaplet.AMQP\n\n
  \ ------------------------------------------------------------------------------\n
  \ data App = App\n      { _amqp :: Snaplet AmqpState\n      }\n\n  makeLenses ''App\n\n
  \ instance HasAmqpPool (Handler b App) where\n      getAmqpPool = with amqp getAmqpPool\n\n
  \ ------------------------------------------------------------------------------\n
  \ -- | The application's routes.\n  routes :: [(ByteString, Handler App App ())]\n
  \ routes = [ (\"/\"   , writeText \"hello\")\n           , (\"test\", fooHandler)\n
  \          ]\n\n  fooHandler :: Handler App App ()\n  fooHandler = do\n      let
  serverQueue = \"myQueue\"\n          exchange'   = \"myExchange\"\n          routingKey
  \ = \"myKey\"\n\n      _ <- runAmqp $ \\chan -> do\n          _ <- declareQueue
  chan newQueue {queueName = serverQueue}\n\n          declareExchange chan newExchange
  { exchangeName = exchange'\n                                           , exchangeType
  = \"headers\"\n                                           }\n          bindQueue
  chan serverQueue exchange' routingKey\n\n          publishMsg chan exchange' routingKey\n
  \             newMsg {msgBody = \"AMQP Snaplet!\",\n                      msgDeliveryMode
  = Just Persistent}\n\n      modifyResponse $ setResponseCode 204\n\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application initializer.\n  app :: SnapletInit App App\n  app = makeSnaplet
  \"app\" \"An snaplet example application.\" Nothing $ do\n      m <- nestSnaplet
  \"amqp\" amqp $ initAMQP\n      addRoutes routes\n      return $ App m\n\n  main
  :: IO ()\n  main = serveSnaplet defaultConfig app\n  #+END_SRC\n"
license-name: BSD-3-Clause
