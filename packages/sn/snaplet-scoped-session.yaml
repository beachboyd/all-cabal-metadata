homepage: https://github.com/JustusAdam/snaplet-scoped-session#readme
changelog-type: ''
hash: d3114dcfa73b90223c58cb512a95bec0276918412302a455946d5d68a49b3e6d
test-bench-deps: {}
maintainer: dev@justus.science
synopsis: Modularised session state for Snaplets, in a Snaplet
changelog: ''
basic-deps:
  snap: -any
  base: ! '>=4.7 && <5'
  time: -any
  configurator: -any
  unordered-containers: -any
  async: -any
  data-default: -any
  lens: -any
  mtl: -any
  classy-prelude: -any
all-versions:
- 0.1.0.0
- 0.1.1
author: JustusAdam
latest: 0.1.1
description-type: markdown
description: ! "# Scoped sessions\n\nThis snaplet provides a convenient way to handle
  typed sessions in your snap application.\n\nIt uses lenses to separate your session
  state into smaller parts which can then be individually managed by nested snaplets.\nThe
  session state is therefore separated and subsnaplets have no access to the full
  global session state.\n\n## Session management\n\nSession management inside your
  application is done by a session `Snaplet`. The Snaplet is created using `initSessionSnaplet`
  and it expects a `Manager` as an argument.\nUsually you won't have to create this
  manager yourself, simply find a library function which provides you with one that
  suits your needs and drop it in there.\nAs an example there is a in memory which
  you can create with the function `initMemoryManager` from `Snap.Snaplet.Session.Scoped.InMemory`.
  You can find more information on this particular manager in the section [The InMemory
  Manager](#the-inmemory-manager)\n\n### The Manager typeclass\n\n`Manager`s are responsible
  for persisting the session state in whichever way he sees fit. Depending on your
  choice of manager therefore your session can be kept in memory or a database or
  persistent in files on the server.\nFurthermore the manager handles the connection
  to the client, which in most cases will be a session cookie.\n\nManagers are parameterised
  by the state they can manage. It uses the TypeInType extension to define the internal
  state.\n\n\nFor some Managers this may be any type\n\n```Haskell\ninstance Manager
  (MyManager a) where\n    type Manages (MyManager a) = a -- any state\n```\n\nor
  a constrained type\n\n```Haskell\ninstance Serialize a => Manager (MySerializingManager
  a) where\n    type Manages (MySerializingManager a) = a\n```\n\nor even a concrete
  type\n\n```Haskell\ninstance Manager MyCountingManager where\n    type Manages MyCountingManager
  = Int\n```\n\n#### The InMemory Manager\n\n`Snap.Snaplet.Session.Scoped.InMemory`
  defines a `Manager` which stores arbitrary server side session state in the form
  of in-memory Haskell data. Session tracking is done using a configurable cookie
  and sessions are automatically expired to free memory by a concurrent worker which
  cleans the session state.\n\nAn example of the configuration can be found in `resources/devel.cfg`.
  All values are optional.\n\n\n## Wiring the Application\n\nIn order to give your
  snaplets access to the session manager you have to specify how the manager snaplet
  can be reached from inside your application.\nThis is done by implementing a typeclass
  called `HasManager`.\n\n```Haskell\ndata MyApp = MyApp { _sessionSnaplet :: Snaplet
  MyManager, ... }\n\nmakeLenses ''MyApp\n\ninstance HasManager MyApp where\n    type
  TheManager MyApp = MyManager\n    toManager = subSnaplet sessionSnaplet\n```\n\nThen,
  for each subsnaplet which is to have access to a part of the state you have to implement
  `AccessSession` to define the substate a Snaplet has access to.\n\n```Haskell\ndata
  Session = Session\n    { _snapletA :: SnapletASession\n    , _snapletB :: SnapletBSession\n
  \   }\n\nmakeLenses SessionState\n\ninstance AccessSession SnapletA where\n    type
  GlobalSession SnapletA = SessionState\n    type LocalSession SnapletA = SnapletASession\n
  \   accessSession = mkAccessSessionLens snapletA\n\ninstance AccessSession SnapletB
  where\n    type GlobalSession SnapletB = SessionState\n    type LocalSession SnapletB
  = SnapletBSession\n    accessSession = mkAccessSessionLens snapletB\n```\n"
license-name: BSD-3-Clause
