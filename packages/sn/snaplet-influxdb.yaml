homepage: https://github.com/ixmatus/snaplet-influxdb
changelog-type: ''
hash: 534317fa9c7f878abb042745d154807a8d52602a96a23bc842a6ea2c5f18b321
test-bench-deps: {}
maintainer: parnell@digitalmentat.com
synopsis: Snap framework snaplet for the InfluxDB library
changelog: ''
basic-deps:
  http-client: ! '>=0.3 && <0.4'
  snap: ! '>=0.13 && <0.14'
  bytestring: ! '>=0.9 && <11'
  base: ! '>=4.4 && <5'
  configurator: ! '>=0.3 && <0.4'
  text: ! '>=1.0 && <2.0'
  monad-control: ! '>=0.3 && <0.4'
  network: ! '>=2.5 && <2.7'
  lens: ! '>=4 && <5'
  mtl: ! '>=2 && <3'
  transformers: ! '>=0.4 && <0.5'
  influxdb: ! '>=0.9 && <1.0'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.1.0
- 1.0.1.1
author: Parnell Springmeyer
latest: 1.0.1.1
description-type: text
description: ! "* Welcome!\n  [[https://hackage.haskell.org/package/snaplet-influxdb][https://img.shields.io/hackage/v/snaplet-influxdb.svg?style=flat]]\n
  \ [[https://travis-ci.org/ixmatus/snaplet-influxdb][https://travis-ci.org/ixmatus/snaplet-influxdb.svg?branch=master]]\n
  \ \n  =snaplet-influxdb= provides a convenience interface to the Haskell\n  InfluxDB
  package.\n\n  *NOTE: this code only builds a pool with the one server description\n
  \ provided in the config. When I get around to it the configuration\n  will be more
  advanced allowing you to specify a pool of servers for\n  the InfluxDB client to
  use.*\n\n  Usage is simple, make sure you've configured the connections\n  correctly
  in the InfluxDB snaplet:\n\n  #+BEGIN_SRC\n  {-# LANGUAGE FlexibleInstances #-}\n
  \ {-# LANGUAGE OverloadedStrings #-}\n  {-# LANGUAGE RecordWildCards   #-}\n  {-#
  LANGUAGE TemplateHaskell   #-}\n\n  module Main where\n\n  ------------------------------------------------------------------------------\n
  \ import           Control.Lens\n  import           Data.ByteString.Char8 as C8\n
  \ import           Database.InfluxDB\n  import           Snap\n  import           Snap.Snaplet.InfluxDB\n\n
  \ ------------------------------------------------------------------------------\n
  \ data App = App\n      { _influx :: Snaplet InfluxState\n      }\n\n  makeLenses
  ''App\n\n  instance HasInfluxPool (Handler b App) where\n      getInfluxPool = with
  influx getInfluxPool\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application's routes.\n  routes :: [(ByteString, Handler App App ())]\n
  \ routes = [ (\"/\"   , writeText \"hello\")\n           , (\"test\", fooHandler)\n
  \          ]\n\n  fooHandler :: Handler App App ()\n  fooHandler = do\n\n      --
  If you want full control over the type of post, precision,\n      -- maybe even
  the db to post to...\n\n      runInflux $ \\c -> do\n          post c \"db\" $ writeSeries
  \"myseries\" \"somevalue\"\n\n      -- OR if you want to use the database you've
  configured with a\n      -- default precision of Seconds...\n\n      runInfluxPost
  $ writeSeries \"myseries\" \"somevalue\"\n\n      modifyResponse $ setResponseCode
  204\n\n\n  ------------------------------------------------------------------------------\n
  \ -- | The application initializer.\n  app :: SnapletInit App App\n  app = makeSnaplet
  \"app\" \"An snaplet example application.\" Nothing $ do\n      m <- nestSnaplet
  \"influx\" influx $ initInflux\n      addRoutes routes\n      return $ App m\n\n
  \ main :: IO ()\n  main = serveSnaplet defaultConfig app\n  #+END_SRC\n"
license-name: BSD-3-Clause
