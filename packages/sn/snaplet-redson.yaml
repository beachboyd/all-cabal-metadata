homepage: https://github.com/dzhus/snaplet-redson/
changelog-type: ''
hash: e3844536fe71fbb50921fe85be5b36fb44608689dca6b2a4b97bda0535fac779
test-bench-deps: {}
maintainer: <dima@dzhus.org>
synopsis: CRUD for JSON data with Redis storage
changelog: ''
basic-deps:
  snap: ==0.8.*
  bytestring: ==0.9.*
  base: ==4.*
  configurator: ==0.2.*
  text: ==0.11.*
  websockets: ==0.6.*
  containers: ==0.4.*
  data-lens-template: ==2.1.*
  utf8-string: ==0.3.*
  websockets-snap: ==0.6.*
  snap-core: ==0.8.*
  mtl: ==2.*
  easy-file: ==0.1.*
  snaplet-redis: ==0.1.*
  hedis: ==0.4.*
  aeson: ==0.6.*
  data-lens: ! '>=2.0.1 && <2.1'
all-versions:
- 0.1.0.0
author: Dmitry Dzhus
latest: 0.1.0.0
description-type: haddock
description: ! 'This snaplet provides HTTP API to /c/reate, /r/ead,

  /u/pdate and /d/elete JSON objects sent by client

  and stored in Redis key-value cache. CRUD methods

  are mapped to HTTP `POST`, `GET`, `PUT` and

  `DELETE`. Valid objects are described using model

  definition syntax, which includes information on

  fields and permissions. The snaplet supports

  role-based user permissions system as implemented

  by Snap authentication. Model definitions may

  also be used by browser JavaScript to provide

  interface to create or edit objects.

  There is a permission-less transparent mode,

  WebSocket create/delete notifications and

  timeline method to serve information about

  recently added objects. Ad-hoc search is

  implemented in Redis and provided via snaplet

  route.

  There''s a "snapless" part of the package, which

  implements Snap-agnostic Redis CRUD operations

  for key-value pair collections and may be used

  for tools which operate with storage directly

  without using web framework.

  More of usage documentation is contained in

  <https://github.com/dzhus/snaplet-redson/blob/master/README.org>'
license-name: BSD-3-Clause
