homepage: https://github.com/lukerandall/snap-web-routes
changelog-type: text
hash: 4f1ccf5c285dcbd54964deab30b847fb48952e21853906f02a13f8872cc4d64a
test-bench-deps: {}
maintainer: luke.randall@gmail.com
synopsis: Type safe URLs for Snap
changelog: ! '2015-08-12 0.5.1.0


  * Bump deps


  2014-05-13 0.5.0.0


  * Add Resource and SingletonResource data types for RESTful routes

  * Ignore trailing slashes


  2014-05-07 0.4.0.0


  * Make router a snaplet


  2014-05-06 0.3.0.1


  * Move tutorial to readme as it didn''t show up on Hackage


  2014-05-06 0.3.0.0


  * Rename heistUrl to urlSplice

  * Add convenience functions to render routes as Text


  2014-05-06 0.2.0.0


  * Document functions properly

  * pass if routing fails

  * Fix haddocks & improve tutorial


  2014-05-03 0.1.0.0


  * Initial release.

'
basic-deps:
  snap: ! '>=0.13 && <1.1'
  bytestring: ! '>=0.9.1 && <0.11'
  base: ! '>=4.4 && <5'
  text: ! '>=0.11 && <1.3'
  xmlhtml: ! '>=0.1'
  web-routes: ! '>=0.27 && <0.28'
  snap-core: ! '>=0.9 && <1.1'
  mtl: ! '>=2 && <3'
  heist: ! '>=0.13 && <1.20'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
author: Luke Randall
latest: 0.5.1.0
description-type: markdown
description: ! "# snap-web-routes\n\n## Type safe URLs for Snap\n\n[`Snap web routes`](http://hackage.haskell.org/package/snap-web-routes)\nprovides
  type safe URLs for Snap using\n[`web routes`](http://hackage.haskell.org/package/web-routes).\n\n##
  How to use\n\nThe tutorial assumes you have a standard Snap app layout with an\nApplication.hs
  and Site.hs. If your setup differs you'll need to adapt\nthings accordingly.\n\n###
  `Application.hs`\n\nTo get going, you'll need to add a few things to `Application.hs`.\nThis
  includes creating the URL data type and adding the routing\nfunction to our `App`
  data type.\n\n```haskell\n-- Enable a few extensions\n{-# LANGUAGE FlexibleInstances
  #-} -- Needed by\n{-# LANGUAGE TypeFamilies      #-} -- web-routes\n{-# LANGUAGE
  DeriveGeneric     #-} -- Needed to derive Generic\n                                   --
  for our URL data type\n\n-- Used in HasRouter instances\nimport Control.Monad.State
  (get)\n\n-- Paths and params use Text.\nimport Data.Text (Text)\n\n-- Snap.Snaplet.Router.Types
  exports everything you need to\n-- define your PathInfo and HasRouter instances.\nimport
  Snap.Snaplet.Router.Types\n\n-- Your URL data type.  Deriving a `Generic` allows
  you to\n-- get a free `PathInfo` instance.\ndata AppUrl\n    = Login\n    | Logout\n
  \   | Count Int\n    | Echo Text\n    | Paths [Text]\n      deriving (Eq, Show,
  Read, Generic)\n\n-- Extend your App type to include the router snaplet.\ndata App
  = App\n    { _heist :: Snaplet (Heist App)\n    , _router :: Snaplet RouterState\n
  \   }\n\n-- Thanks to Generic, an empty instance definition is all\n-- you need.
  Alternately, you can implement 'toPathSegments'\n-- and 'fromPathSegments' yourself
  or use web-routes-th.\ninstance PathInfo AppUrl\n\n-- You need to define a HasRouter
  instance for your app.\n-- You must set type URL (Handler App App) to the URL\n--
  data type you defined above. The router in\n-- `with router` is the lens for the
  @RouterState@ snaplet\n-- you added to App.\ninstance HasRouter (Handler App App)
  where\n    type URL (Handler App App) = AppUrl\n    getRouterState = with router
  get\n\n-- You also need to define a HasRouter instance for the\n-- router snaplet.
  Once again, set type URL (Handler b\n-- RouterState) to the data type you defined
  above.\ninstance HasRouter (Handler b RouterState) where\n    type URL (Handler
  b RouterState) = AppUrl\n    getRouterState = get\n```\n\n### `Site.hs`\n\nMoving
  on to `Site.hs`, we'll setup handlers for each URL, as well as initialise\nour app
  with the router snaplet..\n\n```haskell\n-- Snap.Snaplet.Router provides routing
  functions\nimport Snap.Snaplet.Router\n\n-- Add your new routes using routeWith\nroutes
  :: [(ByteString, Handler App App ())]\nroutes = [ (\"\", routeWith routeAppUrl)\n
  \        , (\"\", serveDirectory \"static\")\n         ]\n\n-- Define handlers for
  each value constructor in your URL data type.\nrouteAppUrl :: AppUrl -> Handler
  App App ()\nrouteAppUrl appUrl =\n    case appUrl of\n      (Login)     -> with
  auth handleLoginSubmit\n      (Logout)    -> with auth handleLogout\n      (Count
  n)   -> writeText $ (\"Count = \" `T.append` (T.pack $ show n))\n      (Echo text)
  -> echo text\n      (Paths ps)  -> writeText $ T.intercalate \" \" ps\n\n-- You'll
  note that these are normal Snap handlers, except they can take\n-- values from the
  value constructor as arguments. This is a lot nicer than\n-- having to use getParam.\necho
  :: T.Text -> Handler App App ()\necho msg = heistLocal (bindString \"message\" msg)
  $ render \"echo\"\n\n-- Add the router snaplet to your app.\napp :: SnapletInit
  App App\napp = makeSnaplet \"app\" \"An example snap-web-routes app.\" Nothing $
  do\n    h <- nestSnaplet \"\" heist $ heistInit \"templates\"\n    r <- nestSnaplet
  \"router\" router $ initRouter \"\"\n    addRoutes routes\n    return $ App h r\n```\n\nThe
  prefix you pass to the router snaplet must match the prefix you specified\nin routes,
  e.g. if it was `(\"/prefix\", routeWith routeAppUrl)`) then:\n\n```haskell\nr <-
  nestSnaplet \"router\" router $ initRouter \"/prefix\"\n```\n\nIf you are having
  trouble figuring out why a particular request isn't routing\nas expected, try replacing
  `routeWith` with `routeWithDebug`. It'll display\nthe available routes, as well
  as any failed route parses. Just remember that\nit's **not suitable for production**
  use, and only displays debugging\ninformation for local requests.\n\n### Using URLs\n\nLet's
  look at how you can use your newly defined URL data type in your app.\nFirstly,
  you'll probably want to add links in Heist views. This is easily\naccomplished with
  the `urlSplice` and `urlParamsSplice` functions.\n\n```haskell\nlinksHandler ::
  Handler App App ()\nlinksHandler = heistLocal (I.bindSplices linksSplices) $ render
  \"links\"\n  where\n    linksSplices = do\n        \"loginUrl\" ## urlSplice Login\n
  \       \"echoUrl\"  ## urlSplice (Echo \"ping\")\n        \"countUrl\" ## urlParamsSplice
  (Count 10) [(\"explanation\", Just \"true\")]\n```\n\nAs you can see, splicing URLs
  into Heist views is easily accomplished. You\nwill likely also want to redirect
  to the handler for a certain URL. To do\nthis we've got `redirectURL` and `redirectURLParams`.
  Let's look at an\nexample.\n\n```haskell\ndoSomethingHandler :: Handler App App
  ()\ndoSomethingHandler = doSomething >> redirectURL Logout\n```\n\nHowever, you
  will sometimes wish to redirect within a handler that runs in a\nsnaplet other than
  the main app. With the router snaplet though, this is\neasily done:\n\n```haskell\nhandleLogout
  :: Handler App (AuthManager App) ()\nhandleLogout = logout >> (withTop router $
  redirectURL (Echo \"logged out\"))\n```\n\nLastly, you can render a URL as Text
  with `urlPath` and `urlPathParams`.\n\n```haskell\nmessageHandler :: Handler App
  App ()\nmessageHandler = do\n    pathText <- urlPath (Echo \"hello\")\n    heistLocal
  (I.bindSplices $ messageSplices path) $ render \"message\"\n  where\n    messageSplices
  path = do\n        \"message\"  ## I.textSplice $ \"The path is \" `append` pathText\n```\n\nRemember,
  for each of `urlSplice`, `redirectURL` and `urlPath` there is a\nparams version
  that takes a params list as an extra argument, and renders\nthe URL with the given
  params as a query string.\n"
license-name: BSD-3-Clause
