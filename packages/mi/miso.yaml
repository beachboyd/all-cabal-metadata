homepage: http://github.com/dmjio/miso
changelog-type: ''
hash: 707af277eba6aa835a9f17ce680214bb029010b8edc7a566356fb3c431e18efb
test-bench-deps: {}
maintainer: David M. Johnson <djohnson.m@gmail.com>
synopsis: A tasty Haskell front-end framework
changelog: ''
basic-deps:
  lucid: -any
  bytestring: -any
  base: <5
  text: -any
  http-api-data: -any
  servant: -any
  containers: -any
  network-uri: -any
  transformers: -any
  servant-lucid: -any
  http-types: -any
  aeson: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.3.0'
- '0.7.4.0'
- '0.7.5.0'
- '0.7.6.0'
- '0.7.7.0'
- '0.7.8.0'
- '0.8.0.0'
- '0.9.0.0'
- '0.10.0.0'
- '0.11.0.0'
- '0.12.0.0'
- '0.13.0.0'
- '0.14.0.0'
- '0.15.0.0'
- '0.16.0.0'
- '0.17.0.0'
- '0.18.0.0'
author: David M. Johnson <djohnson.m@gmail.com>
latest: '0.18.0.0'
description-type: markdown
description: ! "<h1 align=\"center\">miso</h1>\n<p align=\"center\">\n<a href=\"https://haskell-miso.org\">\n
  \ <img width=10% src=\"https://emojipedia-us.s3.amazonaws.com/thumbs/240/apple/96/steaming-bowl_1f35c.png\">\n
  \  </a>\n<p align=\"center\">A <i>tasty</i> <a href=\"https://www.haskell.org/\"><strong>Haskell</strong></a>
  front-end framework</p>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://haskell-miso-slack.herokuapp.com\">\n\t<img
  src=\"https://img.shields.io/badge/slack-miso-E01563.svg?style=flat-square\" alt=\"Miso
  Slack\">\n  </a>\n  <a href=\"http://hackage.haskell.org/package/miso\">\n\t<img
  src=\"https://img.shields.io/hackage/v/miso.svg?style=flat-square\" alt=\"Hackage\">\n
  \ </a>\n  <a href=\"https://haskell.org\">\n\t<img src=\"https://img.shields.io/badge/language-Haskell-green.svg?style=flat-square\"
  alt=\"Haskell\">\n  </a>\n  <a href=\"https://github.com/dmjio/miso/blob/master/LICENSE\">\n\t<img
  src=\"http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat-square\"
  alt=\"LICENSE\">\n  </a>\n  <a href=\"https://hydra.dmj.io\">\n\t<img src=\"https://img.shields.io/badge/build-Hydra-00BDFD.svg?style=flat-square\"
  alt=\"Miso Hydra\">\n  </a>\n  <a href=\"https://www.irccloud.com/invite?channel=%23haskell-miso&amp;hostname=irc.freenode.net&amp;port=6697&amp;ssl=1\">\n\t<img
  src=\"https://img.shields.io/badge/irc-%23haskell--miso-1e72ff.svg?style=flat-square\"
  alt=\"IRC #haskell-miso\">\n  </a>\n</p>\n\n**Miso** is a small \"[isomorphic](http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/)\"
  [Haskell](https://www.haskell.org/) front-end framework for quickly building highly
  interactive single-page web applications. It features a virtual-dom, diffing / patching
  algorithm, attribute and property normalization, event delegation, event batching,
  SVG, Server-sent events, Websockets, type-safe [servant](https://haskell-servant.github.io/)-style
  routing and an extensible Subscription-based subsystem. Inspired by [Elm](http://elm-lang.org/),
  [Redux](http://redux.js.org/) and [Bobril](http://github.com/bobris/bobril). **Miso**
  is pure by default, but side effects (like `XHR`) can be introduced into the system
  via the `Effect` data type. **Miso** makes heavy use of the [GHCJS](https://github.com/ghcjs/ghcjs)
  FFI and therefore has minimal dependencies. **Miso** can be considered a shallow
  [embedded domain-specific language](https://wiki.haskell.org/Embedded_domain_specific_language)
  for modern web programming.\n\n## Table of Contents\n- [Quick Start](#quick-start)\n
  \ - [Begin](#begin)\n  - [Stack](#stack)\n  - [Nix](#nix)\n  - [Cabal](#cabal)\n
  \ - [GHCJSi Caveats](#ghcjsi-caveats)\n  - [Architecture](#architecture)\n- [Examples](#examples)\n
  \ - [TodoMVC](#todomvc)\n  - [Flatris](#flatris)\n  - [2048](#2048)\n  - [Snake](#snake)\n
  \ - [Mario](#mario)\n  - [Websocket](#websocket)\n  - [SSE](#sse)\n  - [XHR](#xhr)\n
  \ - [Router](#router)\n  - [SVG](#svg)\n  - [Canvas 2D](#canvas-2d)\n  - [ThreeJS](#threejs)\n
  \ - [Simple](#simple)\n  - [File Reader](#file-reader)\n  - [WebVR](#webvr)\n- [Haddocks](#haddocks)\n
  \ - [GHC](#ghc)\n  - [GHCJS](#ghcjs)\n- [Sample Application](#sample-application)\n-
  [Building examples](#building-examples)\n- [Coverage](#coverage)\n- [Isomorphic](#isomorphic)\n-
  [Pinning nixpkgs](#pinning-nixpkgs)\n- [Binary cache](#binary-cache)\n- [Benchmarks](#benchmarks)\n-
  [Maintainers](#maintainers)\n- [Contributing](#contributing)\n- [License](#license)\n\n##
  Quick start\nTo get started quickly building applications, we recommend using the
  [`stack`](https://docs.haskellstack.org/en/stable/README/) or [`nix`](https://nixos.org/nix)
  package managers. Obtaining [`GHCJS`](https://github.com/ghcjs/ghcjs) is required
  as a prerequisite. `stack` and `nix` make this process easy, if you're using `cabal`
  we assume you have [obtained `GHCJS`](https://github.com/ghcjs/ghcjs#installation)
  by other means.\n\nAll source code depicted below for the quick start app is available
  [here](https://github.com/dmjio/miso/tree/master/sample-app).\n\n### Begin\nWe recommend
  using `nix` when working with `miso`, but it is just as fine to use `stack`.\nTo
  build the sample-app with `nix`, execute the command below:\n\n```bash\ngit clone
  https://github.com/dmjio/miso && cd miso/sample-app && nix-build\n```\n\nTo develop
  with `nix` run the below command (this will put you into a shell where you can iteratively
  develop the project with `cabal build`).\n\n```bash\ngit clone https://github.com/dmjio/miso
  && cd miso/sample-app && nix-shell -A env\n```\n\nFor more information on using
  `nix` w/ `miso`, see the [`nix` section below](#nix)\n\nTo build the sample-app
  with `stack`, execute the command below:\n```bash\ngit clone https://github.com/dmjio/miso
  && cd miso/sample-app && stack setup && stack build\n```\n\nNote: It's important
  to ensure that you don't have a global `cabal-install` present on your system. This
  could cause build problems. If you see an error like this (below), try deleting
  your global `cabal-install`.\n\n```bash\nexit status: 1\nstderr: solver must be
  one of: modular\nCallStack (from HasCallStack):\n  error, called at libraries/Cabal/Cabal/Distribution/ReadE.hs:46:24
  in Cabal-2.0.1.0:Distribution.ReadE\n```\n\n\nFor more information on using `stack`
  w/ `miso`, see the [`stack` section below](#stack)\n\n\n### Stack\nIn the `miso`
  repository there is a [folder named `stack`](https://github.com/dmjio/miso/tree/master/stack)
  with \"known to work\" configurations for `GHCJS`. One stack file exists for both
  the `7.10.3` and `8.0.1` versions of `GHCJS`. In general, we recommend developing
  with the `7.10.3` version since it currently supports `GHCJSi` (a REPL that connects
  to the browser by way of a [`nodejs`](https://nodejs.org/en/) web server using [`socket.io`](https://socket.io/))
  and building with the `8.0.1` version (if possible). For more information on using
  `stack` with `GHCJS`, please consult the [GHCJS section of the `stack` docs](https://docs.haskellstack.org/en/stable/ghcjs/).\n\nTo
  begin, create the following directory layout\n```bash\n➜  mkdir app && touch app/{Main.hs,app.cabal,stack.yaml}
  && tree app\napp\n|-- Main.hs\n|-- app.cabal\n`-- stack.yaml\n```\n\nAdd a `stack.yaml`
  file that uses a recent version of `miso`.\n```bash\n➜  cat app/stack.yaml\nresolver:
  lts-6.30\ncompiler: ghcjs-0.2.0.9006030_ghc-7.10.3\ncompiler-check: match-exact\n\npackages:\n
  - '.'\nextra-deps:\n - miso-0.12.0.0\n\nsetup-info:\n  ghcjs:\n\tsource:\n\t  ghcjs-0.2.0.9006030_ghc-7.10.3:\n\t\t
  url: http://ghcjs.tolysz.org/lts-6.30-9006030.tar.gz\n\t\t sha1: 2371e2ffe9e8781808b7a04313e6a0065b64ee51\n```\n\nAdd
  a `cabal` file\n```bash\n➜  cat app/*.cabal\nname:                app\nversion:
  \            0.1.0.0\nsynopsis:            First miso app\ncategory:            Web\nbuild-type:
  \         Simple\ncabal-version:       >=1.10\n\nexecutable app\n  main-is:             Main.hs\n
  \ build-depends:       base, miso\n  default-language:    Haskell2010\n```\n\nAdd
  the source from [Sample Application](#sample-application) to `app/Main.hs`\n\nRun
  `stack setup`. This might take a long time, since it will have to build `GHCJS`.\n```\nstack
  setup\n```\n\nRun `stack build` to get the static assets\n```\nstack build\n```\n\nSee
  the result\n```\nopen $(stack path --local-install-root)/bin/app.jsexe/index.html\n```\n\nUsing
  GHCJSi\n```\nstack ghci\n```\n\nIf that warns with `socket.io not found, browser
  session not available`, you'll need to install `socket.io`\n```\nnpm install socket.io\n```\n\nand
  update your `NODE_PATH`\n```\nexport NODE_PATH=$(pwd)/node_modules\n```\n\nNow you
  should be connected, and the app viewable in `GHCJSi` (open http://localhost:6400).\n```bash\n➜
  \ stack ghci\napp-0.1.0.0: initial-build-steps (exe)\nConfiguring GHCi with the
  following packages: app\nGHCJSi, version 0.2.0.9006020-7.10.3: http://www.github.com/ghcjs/ghcjs/
  \ :? for help\n[1 of 1] Compiling Main             ( /Users/david/Desktop/miso/sample-app/Main.hs,
  interpreted )\nsocket.io found, browser session available at http://localhost:6400\nOk,
  modules loaded: Main.\n*Main> main\nbrowser connected, code runs in browser from
  now on\n```\n\n### Nix\n`Nix` is a more powerful option for building web applications
  with `miso` since it encompasses development workflow, configuration management,
  and deployment. The source code for [`haskell-miso.org`](https://github.com/dmjio/miso/tree/master/examples/haskell-miso.org)
  is an example of this.\n\nIf unfamiliar with `nix`, we recommend [@Gabriel439](https://github.com/Gabriel439)'s
  [\"Nix and Haskell in production\"](https://github.com/Gabriel439/haskell-nix) guide.\n\nTo
  get started, we will use the [`cabal2nix`](https://github.com/NixOS/cabal2nix) tool
  to convert our `Cabal` file into a `nix` derivation (named `app.nix`). We'll then
  write a file named `default.nix`, which is used for building our project (via `nix-build`)
  and development (via `nix-shell`).\n\nTo begin, make the following directory layout:\n```bash\n➜
  \ mkdir app && touch app/{Main.hs,app.cabal,default.nix,app.nix} && tree app\napp\n|--
  Main.hs\n|-- app.cabal\n|-- default.nix\n`-- app.nix\n```\n\nAdd a `cabal` file\n```bash\n➜
  \ cat app/*.cabal\nname:                app\nversion:             0.1.0.0\nsynopsis:
  \           First miso app\ncategory:            Web\nbuild-type:          Simple\ncabal-version:
  \      >=1.10\n\nexecutable app\n  main-is:             Main.hs\n  build-depends:
  \      base, miso\n  default-language:    Haskell2010\n```\n\nUse [`cabal2nix`](https://github.com/NixOS/cabal2nix)
  to generate a file named `app.nix`\nthat looks like below.\n```bash\n➜  cabal2nix
  . --compiler ghcjs > app.nix\n➜  cat app.nix\n```\n\n```nix\n{ mkDerivation, base,
  miso, stdenv }:\nmkDerivation {\n  pname = \"app\";\n  version = \"0.1.0.0\";\n
  \ src = ./.;\n  isLibrary = false;\n  isExecutable = true;\n  executableHaskellDepends
  = [ base miso ];\n  description = \"First miso app\";\n  license = stdenv.lib.licenses.bsd3;\n}\n```\n\nWrite
  a `default.nix` (which calls `app.nix`), this fetches a recent version of `miso`.\n```nix\n{
  pkgs ? import ((import <nixpkgs> {}).fetchFromGitHub {\n\towner = \"NixOS\";\n\trepo
  = \"nixpkgs\";\n\trev = \"a0aeb23\";\n\tsha256 = \"04dgg0f2839c1kvlhc45hcksmjzr8a22q1bgfnrx71935ilxl33d\";\n
  \ }){}\n}:\nlet\n  result = import (pkgs.fetchFromGitHub {\n\towner = \"dmjio\";\n\trepo
  = \"miso\";\n\tsha256 = \"1l1gwzzqlvvcmg70jjrwc5ijv1vb6y5ljqkh7rxxq7hkyxpjyx9q\";\n\trev
  = \"95f6bc9b1ae6230b110358a82b6a573806f272c2\";\n  }) {};\nin pkgs.haskell.packages.ghcjs.callPackage
  ./app.nix {\n  miso = result.miso-ghcjs;\n}\n```\n\nBuild the project\n```\nnix-build\n```\n\nOpen
  the result\n```\nopen ./result/bin/app.jsexe/index.html\n```\n\nFor development
  with `nix`, it's important to have `cabal` present for building. This command will
  make it available in your `PATH`.\n```\nnix-env -iA cabal-install -f '<nixpkgs>'\n```\n\nTo
  be put into a shell w/ `GHCJS` and all the dependencies for this project present,
  use `nix-shell`.\n```\nnix-shell -A env\n```\n\nTo open `GHCJSi` (`NODE_PATH` should
  already be set properly)\n```\n$ cabal configure --ghcjs\n$ cabal repl\nPackage
  has never been configured. Configuring with default flags. If this\nfails, please
  run configure manually.\nResolving dependencies...\nConfiguring app-0.1.0.0...\nPreprocessing
  executable 'app' for app-0.1.0.0...\nGHCJSi, version 0.2.0-7.10.3: http://www.github.com/ghcjs/ghcjs/
  \ :? for help\n[1 of 1] Compiling Main             ( Main.hs, interpreted )\nOk,
  modules loaded: Main.\n*Main>\nbrowser connected, code runs in browser from now
  on\n```\n\n### Cabal\nThe latest stable version of `miso` will be available on Hackage.\nTo
  build with cabal, we assume `ghcjs` is in your `PATH` and `ghcjs-base` is present
  in your `ghcjs-pkg` list.\n```bash\ncabal sandbox init\ncabal install --ghcjs\ncabal
  build\nopen dist/build/app/app.jsexe/index.html\n```\n\n### GHCJSi Caveats\nIf you
  run `main` in `GHCJSi`, interrupt it and then run it again, you\nwill end up with
  two copies of your app displayed above each other. As\na workaround, you can use
  `clearBody >> main` which will completely\nclear the document body before rendering
  your application.\n\n### Architecture\nFor constructing client and server applications,
  we recommend using one `cabal` file with two executable sections, where the `buildable`
  attribute set is contingent on the compiler. An example of this layout is [here](https://github.com/dmjio/miso/blob/master/examples/haskell-miso.org/haskell-miso.cabal#L16-L60).
  For more info on how to use `stack` with a `client`/`server` setup, see this [link](https://docs.haskellstack.org/en/stable/ghcjs/#project-with-both-client-and-server).
  For more information on how to use `nix` with a `client`/`server` setup, see the
  [nix scripts](https://github.com/dmjio/miso/blob/master/examples/haskell-miso.org/default.nix)
  for [https://haskell-miso.org](https://haskell-miso.org).\n\n## Examples\n\n###
  TodoMVC\n  - [Link](https://todo-mvc.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/todo-mvc/Main.hs)\n\n###
  Flatris\n  - [Link](https://flatris.haskell-miso.org/) / [Source](https://github.com/ptigwe/hs-flatris/)\n\n###
  2048\n  - [Link](http://2048.haskell-miso.org/) / [Source](https://github.com/ptigwe/hs2048/)\n\n###
  Snake\n  - [Link](http://snake.haskell-miso.org/) / [Source](https://github.com/lbonn/miso-snake)\n\n###
  Mario\n  - [Link](https://mario.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/mario/Main.hs)\n\n###
  Websocket\n  - [Link](https://websocket.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/websocket/Main.hs)\n\n###
  SSE\n  - [Link](https://sse.haskell-miso.org/) / [Client](https://github.com/dmjio/miso/blob/master/examples/sse/client/Main.hs)
  / [Server](https://github.com/dmjio/miso/blob/master/examples/sse/server/Main.hs)\n\n###
  XHR\n  - [Link](https://xhr.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/xhr/Main.hs)\n\n###
  Router\n  - [Link](https://router.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/router/Main.hs)\n\n###
  SVG\n  - [Link](https://svg.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/svg/Main.hs)\n\n###
  Canvas 2D\n  - [Link](http://canvas.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/canvas2d/Main.hs)\n\n###
  ThreeJS\n  - [Link](http://threejs.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/three/Main.hs)\n\n###
  Simple\n  - [Link](https://simple.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/exe/Main.hs)\n\n###
  File Reader\n  - [Link](https://file-reader.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/file-reader/Main.hs)\n\n###
  WebVR\n  - [Link](https://fizruk.github.io/fpconf-2017-talk/miso-aframe-demo/dist/demo.jsexe/index.html)
  / [Source](https://github.com/fizruk/miso-aframe)\n\n## Haddocks\n\n### GHCJS\n
  \ - [Link](https://haddocks.haskell-miso.org/)\n\n### GHC\n  - [Link](http://hackage.haskell.org/package/miso)\n\n##
  Sample application\n```haskell\n-- | Haskell language pragma\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE RecordWildCards #-}\n\n-- | Haskell module declaration\nmodule
  Main where\n\n-- | Miso framework import\nimport Miso\nimport Miso.String\n\n--
  | Type synonym for an application model\ntype Model = Int\n\n-- | Sum type for application
  events\ndata Action\n  = AddOne\n  | SubtractOne\n  | NoOp\n  | SayHelloWorld\n
  \ deriving (Show, Eq)\n\n-- | Entry point for a miso application\nmain :: IO ()\nmain
  = startApp App {..}\n  where\n\tinitialAction = SayHelloWorld -- initial action
  to be executed on application load\n\tmodel         = 0             -- initial model\n\tupdate
  \       = updateModel   -- update function\n\tview          = viewModel     -- view
  function\n\tevents        = defaultEvents -- default delegated events\n\tsubs          =
  []            -- empty subscription list\n\tmountPoint    = Nothing       -- mount
  point for application (Nothing defaults to 'body')\n\n-- | Updates model, optionally
  introduces side effects\nupdateModel :: Action -> Model -> Effect Action Model\nupdateModel
  AddOne m = noEff (m + 1)\nupdateModel SubtractOne m = noEff (m - 1)\nupdateModel
  NoOp m = noEff m\nupdateModel SayHelloWorld m = m <# do\n  putStrLn \"Hello World\"
  >> pure NoOp\n\n-- | Constructs a virtual DOM from a model\nviewModel :: Model ->
  View Action\nviewModel x = div_ [] [\n   button_ [ onClick AddOne ] [ text \"+\"
  ]\n , text (ms x)\n , button_ [ onClick SubtractOne ] [ text \"-\" ]\n ]\n```\n\n##
  Building examples\n\nThe easiest way to build the examples is with the [`nix`](https://nixos.org/nix/)
  package manager\n```\ngit clone https://github.com/dmjio/miso && cd miso && nix-build\n```\n\nThis
  will build all examples and documentation into a folder named `result`\n```\n➜  miso
  git:(master) ✗ tree result -d\nresult\n|-- doc\n|   |-- x86_64-osx-ghc-8.0.2\n|
  \  |   `-- miso-0.2.0.0\n|   |       `-- html\n|   |           `-- src\n|   `--
  x86_64-osx-ghcjs-0.2.0-ghc7_10_3\n|       `-- miso-0.2.0.0\n|           `-- html\n|
  \              `-- src\n|-- examples\n|   |-- mario.jsexe\n|   |   `-- imgs\n|   |
  \      |-- jump\n|   |       |-- stand\n|   |       `-- walk\n|   |-- router.jsexe\n|
  \  |-- simple.jsexe\n|   |-- tests.jsexe\n|   |-- todo-mvc.jsexe\n|   `-- websocket.jsexe\n```\n\nTo
  see examples, we recommend hosting them with a webserver\n\n```\ncd result/examples/todo-mvc.jsexe
  && python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\n```\n\n##
  Coverage\n\nThe core algorithmic component of miso is [diff.js](https://github.com/dmjio/miso/blob/master/jsbits/diff.js).
  It is responsible for all DOM manipulation that occurs in a miso application and
  has [100% code coverage](http://coverage.haskell-miso.org). Tests and coverage made
  possible using [jsdom](https://github.com/jsdom/jsdom) and [jest](https://github.com/facebook/jest).\n\nTo
  run the tests and build the coverage report:\n\n```bash\ncd miso/tests\nnpm i\nnpm
  run test\n## Or by using `yarn` instead of `npm`:\n# yarn\n# yarn test\n```\n\n##
  Isomorphic\n\nIsomorphic javascript is a technique for increased SEO, code-sharing
  and perceived page load times. It works in two parts. First, the server sends a
  pre-rendered HTML body to the client's browser. Second, after the client javascript
  application loads, the pointers of the pre-rendered DOM are copied into the virtual
  DOM, and the application proceeds as normal. All subsequent page navigation is handled
  locally by the client, avoiding full-page postbacks as necessary.\n\nThe `miso`
  function is used to perform the pointer-copying behavior client-side.\n\nFor more
  information on how `miso` handles isomorphic javascript, we recommend [this tutorial](https://github.com/FPtje/miso-isomorphic-example).\n\n##
  Pinning nixpkgs\n\nBy default `miso` uses a known-to-work, pinned version of [`nixpkgs`](https://github.com/dmjio/miso/blob/master/default.nix#L1-L6).\nTo
  override this to your system's version of `nixpkgs` write:\n\n```\nnix-build --arg
  nixpkgs 'import <nixpkgs> {}'\n```\n\n## Binary cache\n\n`nix` users on a Linux
  distro can take advantage of a [binary cache](https://hydra.dmj.io/nix-cache-info)
  for faster builds. To use the binary cache simply append `https://hydra.dmj.io/nix-cache-info`
  during all `nix-shell` and/or `nix-build` invocations.\n\n```bash\nnix-build --option
  extra-binary-caches https://hydra.dmj.io\n```\n\nAlternatively, add `https://hydra.dmj.io`
  to your list of local binary caches in `nix.conf` (usually found in `/etc/nix/nix.conf`),
  and it will automatically be used on all invocations of `nix-build` and/or `nix-shell`.\n\n```\nbinary-caches
  = https://hydra.dmj.io/ https://cache.nixos.org/\n```\n\n## Benchmarks\n\n[According
  to benchmarks](https://medium.com/@saurabhnanda/benchmarks-fp-languages-libraries-for-front-end-development-a11af0542f7e),
  `miso` is among the fastest functional programming web frameworks, second only to
  [Elm](http://elm-lang.org).\n\n<img src=\"https://cdn-images-1.medium.com/max/1600/1*6EjJTf1mhlTxd4QWsygCwA.png\"
  width=\"500\" height=\"600\" />\n\n## Maintainers\n\n[@dmjio](https://github.com/dmjio)\n\n##
  Contributing\n\nFeel free to dive in! [Open an issue](https://github.com/dmjio/miso/issues/new)
  or submit [PRs](https://github.com/dmjio/miso/pulls).\n\nSee [CONTRIBUTING](https://github.com/dmjio/miso/blob/master/CONTRIBUTING.md)
  for more info.\n\n## License\n\n[BSD3](LICENSE) © David Johnson\n"
license-name: BSD3
