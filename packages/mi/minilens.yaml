homepage: https://github.com/RaminHAL9001/minilens
changelog-type: ''
hash: 311405156bef818d64b32739022cf03764b54c0900434890ccb20a392a8d220d
test-bench-deps: {}
maintainer: ramin.honary@gmail.com
synopsis: A minimalistic lens library, providing only the simplest, most basic lens
  functionality.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.0.0 && <0.11.0.0'
  base: ! '>=4.7 && <4.9'
  text: ! '>=1.2.0.0 && <1.3.0.0'
  semigroups: ! '>=0.16.2.0 && <=1.0.0.0'
  array: ! '>=0.5.0.0 && <0.6.0.0'
  containers: ! '>=0.5.5.0 && <0.6.0.0'
  mtl: ! '>=2.2.0 && <=2.2.1'
  transformers: ! '>=0.3.0.0 && <=0.4.3.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
author: Ramin Honary
latest: 1.0.0.2
description-type: haddock
description: ! '

  Lenses satisfy the properties of the Category type class, and are used

  to inspect and update individual elements of a data structue in a type-safe

  way. This library provides the simplest possible data types satisfying

  these properties.


  The "minilens" package aims to provide a very simple improvement on

  Haskell''s record syntax: the idea of composable record accessors

  called ''Lens''es.


  As of yet, there are no fancy Template Haskell APIs for generating lenses

  programmatically; you are expected to write your lenses by hand. Some handy

  handy combinator functions are provided to help you do this.


  This library was originally part of the Dao package, but has been branched

  into it''s own package in the hopes that it will be useful in a wider

  variety of projects.'
license-name: GPL-3.0-only
