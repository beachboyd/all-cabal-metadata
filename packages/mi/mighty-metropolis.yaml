homepage: http://github.com/jtobin/mighty-metropolis
changelog-type: ''
hash: b701c933b24dd6a556a57677189c1973809454c321ddf729a3f73c82234ce82a
test-bench-deps:
  base: ! '>=4 && <6'
  containers: ! '>=0.5 && <0.6'
  mighty-metropolis: -any
  mwc-probability: ! '>=1.0.1'
maintainer: jared@jtobin.ca
synopsis: The Metropolis algorithm.
changelog: ''
basic-deps:
  base: ! '>=4 && <6'
  kan-extensions: ! '>=5 && <6'
  mcmc-types: ! '>=1.0.1'
  pipes: ! '>=4 && <5'
  transformers: ! '>=0.5 && <1.0'
  mwc-probability: ! '>=1.0.1'
  primitive: ! '>=0.6 && <1.0'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.1.0
- 1.2.0
author: Jared Tobin
latest: 1.2.0
description-type: haddock
description: ! 'The classic Metropolis algorithm.


  Wander around parameter space according to a simple spherical Gaussian

  distribution.


  Exports a ''mcmc'' function that prints a trace to stdout, a ''chain'' function

  for collecting results in-memory, and a ''metropolis'' transition operator that

  can be used more generally.


  > import Numeric.MCMC.Metropolis

  >

  > rosenbrock :: [Double] -> Double

  > rosenbrock [x0, x1] = negate (5  *(x1 - x0 ^ 2) ^ 2 + 0.05 * (1 - x0) ^ 2)

  >

  > main :: IO ()

  > main = withSystemRandom . asGenIO $ mcmc 10000 1 [0, 0] rosenbrock'
license-name: MIT
