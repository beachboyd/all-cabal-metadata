homepage: https://github.com/phadej/microstache
changelog-type: markdown
hash: 6169e103918daa3d1d049f30cc58512e9bc80598a6516199a5ffb0be898100df
test-bench-deps:
  bytestring: -any
  microstache: -any
  base: -any
  hspec: ! '>=2.0 && <3.0'
  text: -any
  parsec: -any
  containers: -any
  aeson: -any
maintainer: Oleg Grenrus<oleg.grenrus@iki.fi>
synopsis: Mustache templates for Haskell
changelog: ! '## microstache 1.0.1.1


  - Fix build against `transformers-0.3`


  ## microstache 1.0.1


  - Add `renderMustacheW`


  ## microstache 1


  Initial release, corresponding to `stache-0.2.2`.

'
basic-deps:
  bytestring: ! '>=0.9.2.1 && <0.11'
  base: ! '>=4.5 && <4.13'
  unordered-containers: ! '>=0.2.5 && <0.3'
  text: ! '>=1.2 && <1.3'
  filepath: ! '>=1.3.0.0 && <1.5'
  parsec: ! '>=3.1.11 && <6.0'
  containers: ! '>=0.4.2.1 && <0.7'
  transformers: ! '>=0.3.0.0 && <0.6'
  deepseq: ! '>=1.3.0.0 && <1.5'
  aeson: ! '>=0.11 && <1.5'
  vector: ! '>=0.11 && <0.13'
  directory: ! '>=1.1.0.2 && <1.4'
all-versions:
- '1'
- 1.0.1
- 1.0.1.1
author: Mark Karpov <markkarpov@openmailbox.org>, Oleg Grenrus <oleg.grenrus@iki.fi>
latest: 1.0.1.1
description-type: markdown
description: ! "# microstache\n\nBased on [`stache`](http://hackage.haskell.org/package/stache)
  library, which uses `megaparsec`.\nThis library uses `parsec`, thus the name: `microstache`.\n\nThis
  is a Haskell implementation of Mustache templates. The implementation\nconforms
  to the version 1.1.3 of official [Mustache specification]\n(https://github.com/mustache/spec).
  It is extremely simple and\nstraightforward to use with minimal but complete API
  — three functions to\ncompile templates (from directory, from file, and from lazy
  text) and one to\nrender them.\n\nFor rendering you only need to create Aeson's
  `Value` where you put the data\nto interpolate. Since the library re-uses Aeson's
  instances and most data\ntypes in Haskell ecosystem are instances of classes like\n`Data.Aeson.ToJSON`,
  the whole process is very simple for end user.\n\nOne feature that is not currently
  supported is lambdas. The feature is\nmarked as optional in the spec and can be
  emulated via processing of parsed\ntemplate representation. The decision to drop
  lambdas is intentional, for\nthe sake of simplicity and better integration with
  Aeson.\n\n## Differences from `stache`\n\n- Instead of `megaparsec`, `parsec` is
  used. Error message quality is most likely degraded.\n- There are no TemplateHaskell
  used; yet there are no helpers provided.\n- Support for GHC-7.4.2 &ndash; GHC-8.2.1\n\n##
  Quick start\n\nHere is an example of basic usage:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main (main) where\n\nimport Data.Aeson\nimport Data.Text\nimport Text.Microstache\nimport
  qualified Data.Text.Lazy.IO as TIO\n\nmain :: IO ()\nmain = do\n  let res = compileMustacheText
  \"foo\"\n        \"Hi, {{name}}! You have:\\n{{#things}}\\n  * {{.}}\\n{{/things}}\\n\"\n
  \ case res of\n    Left err -> putStrLn (show err)\n    Right template -> TIO.putStr
  $ renderMustache template $ object\n      [ \"name\"   .= (\"John\" :: Text)\n      ,
  \"things\" .= [\"pen\" :: Text, \"candle\", \"egg\"]\n      ]\n```\n\nIf I run the
  program, it prints the following:\n\n```\nHi, John! You have:\n  * pen\n  * candle\n
  \ * egg\n```\n\nFor more information about Mustache templates the following links
  may be\nhelpful:\n\n* The official Mustache site: https://mustache.github.io/\n*
  The manual: https://mustache.github.io/mustache.5.html\n* The specification: https://github.com/mustache/spec\n*
  Stack Builders Stache tutorial: https://www.stackbuilders.com/tutorials/haskell/mustache-templates/\n\n##
  License\n\nCopyright © 2016–2017 Stack Builders, 2017 Oleg Grenrus\n\nDistributed
  under BSD 3 clause license.\n"
license-name: BSD-3-Clause
