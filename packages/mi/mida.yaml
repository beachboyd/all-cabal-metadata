homepage: https://github.com/mrkkrp/mida
changelog-type: markdown
hash: 7bbd847698b60c43bed6391db7e3e730659dcf902f045ecdefd0662f0af8761d
test-bench-deps:
  tf-random: ! '>=0.5 && <1.0'
  base: ! '>=4.8 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=1.2.0.4 && <1.3'
  megaparsec: ! '>=5.0 && <6.0'
  containers: ! '>=0.5.5.1 && <0.6'
  HCodecs: ! '>=0.5 && <0.6'
  mtl: ! '>=2.1.3.1 && <3.0'
  transformers: ! '>=0.2.0.0 && <0.6'
  random: -any
  QuickCheck: ! '>=2.8.2 && <3.0'
  mida: ! '>=1.0.2'
maintainer: Mark Karpov
synopsis: Language for algorithmic generation of MIDI files
changelog: ! "## MIDA 1.0.2\n\n* Refactoring, switch to Hspec for testing and Megaparsec
  5.\n\n## MIDA 1.0.1\n\n* Fixed issues with `directory` package. Please use `directory-1.2.3.0`
  or\n  newer. `stack.yaml` file is updated accordingly, if you clone the\n  repository.\n\n##
  MIDA 1.0.0\n\n* Use the `path-io` library.\n\n* Use YAML files for configuration.\n\n*
  Cosmetic changes in the interface.\n\n## MIDA 0.4.6\n\n* Support for Stack and other
  maintenance stuff;\n\n* Refactoring, more type-safe code and better libraries used.\n\n##
  MIDA 0.4.5\n\n* Various cosmetic changes;\n\n* Make the executable Cabal-installable.\n\n##
  MIDA 0.4.4\n\n* Cosmetic corrections in source code;\n\n* Switch to better libraries.\n\n##
  MIDA 0.4.3\n\n* Various corrections and cosmetic changes;\n\n* Improved printing
  of syntax trees;\n\n* Allow more flexible looping expressions.\n\n## MIDA 0.4.2\n\n*
  Introduced simplifications on the level of internal language;\n\n* Changed default
  values of some parameters;\n\n* Some characters have been replaced with pretty Unicode
  symbols;\n\n* Improved manual.\n\n## MIDA 0.4.1\n\n* Dramatically improved efficiency,
  now very long compositions can be\n  quickly rendered;\n\n* Lexer: changed style
  of comments, shell-like comments adopted;\n\n* Changed alias of notes: dièse is
  written now as `s` not as `#`, so middle\n  octave is: `c5`, `cs5`, `d5`, `ds5`,
  `e5`, etc.;\n\n* Now there are alias for all supported (in MIDI) pitches from 0
  to 127,\n  that is: from `c0` to `g10` (alias `c10` -- `g10` added);\n\n* Changed
  alias of modulation signs, reason for such change is purely\n  technical -- all
  alias now are predefined definitions, rather than\n  syntactic sugar, so all alias
  must be valid identifiers;\n\n* Identifiers can contain underline sign (`_`);\n\n*
  Arbitrary number of files can be specified for loading (from command line,\n  as
  well as from interactive REPL);\n\n* Many purely technical changes that are difficult
  to explain concisely, but\n  they should be mentioned, most important being addition
  of test suite and\n  ability to generate source files from syntax trees;\n\n* Added
  command line options: `--license` and `--version`.\n\n## MIDA 0.4.0\n\n* Fixed bug
  in batch mode;\n\n* Added tab completion based on contents of current input line,
  including\n  completion of file names for some commands;\n\n* Detection and rejection
  of recursive definitions;\n\n* Improved interface;\n\n* Wholly refactored (and sometimes
  rewritten) code (it's finally\n  sufficiently elegant);\n\n* More intuitive logic
  of evaluation in some corner cases;\n\n* Optional displaying of simplified principles
  (for debug and educational\n  purposes);\n\n* Ability to set tempo and program for
  preview;\n\n* Improved documentation.\n\n## MIDA 0.3.0\n\n* Improved interface and
  parsing;\n\n* Added `:prv` and `:load` special commands;\n\n* Added additional parameters:
  modulation, breath, aftertouch, and pitch\n  bend;\n\n* Fixed minor bugs.\n\n##
  MIDA 0.2.0\n\n* Better command line experience: history, auto-completion and more;\n\n*
  Fixed bug with infinite translation of scores that consist of elements\n  which
  have zero duration;\n\n* Introduced conception of sections;\n\n* All operations
  have become fully polymorphic.\n\n## MIDA 0.1.0\n\n* Initial release.\n"
basic-deps:
  tf-random: ! '>=0.5 && <1.0'
  exceptions: ==0.8.*
  haskeline: ! '>=0.7.1.3 && <0.8'
  path: ! '>=0.5.3 && <0.6'
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2.0.4 && <1.3'
  megaparsec: ! '>=5.0 && <6.0'
  filepath: ! '>=1.3.0.2 && <1.5'
  process: ! '>=1.2 && <1.5'
  data-default: ! '>=0.5.3 && <0.8'
  containers: ! '>=0.5.5.1 && <0.6'
  formatting: ! '>=6.2 && <7.0'
  HCodecs: ==0.5.*
  mtl: ! '>=2.1.3.1 && <3.0'
  file-embed: ! '>=0.0.9'
  transformers: ! '>=0.2.0.0 && <0.6'
  optparse-applicative: ! '>=0.11.0.2 && <0.13'
  random: -any
  QuickCheck: ! '>=2.8.2 && <3.0'
  aeson: ! '>=0.7 && <0.12'
  path-io: ! '>=0.3.1 && <2.0'
  mida: ! '>=1.0.2'
  yaml: ! '>=0.8.15 && <0.9'
all-versions:
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 1.0.0
- 1.0.1
- 1.0.2
author: Mark Karpov
latest: 1.0.2
description-type: markdown
description: ! "# MIDA\n\n[![License GPL 3](https://img.shields.io/badge/license-GPL_3-green.svg)](http://www.gnu.org/licenses/gpl-3.0.txt)\n[![Hackage](https://img.shields.io/hackage/v/mida.svg?style=flat)](https://hackage.haskell.org/package/mida)\n[![Build
  Status](https://travis-ci.org/mrkkrp/mida.svg?branch=master)](https://travis-ci.org/mrkkrp/mida)\n\nMIDA
  is a minimalistic declarative language for algorithmic generation of\nMIDI files.
  MIDA is not interactive in sense that you cannot control result\nof its activity
  in real time, it is intended for producers and should be\nused with a DAW. MIDA
  can help you create variative elements in your music\nin a very simple way. Since
  MIDI can control a lot of different instruments,\npower of MIDA is truly great.\n\nMain
  reason for MIDA development is to create software tool that can\nbe used in such
  a way that does not change established workflow, so\npeople could use familiar plugins
  and software instruments.\n\nCurrently MIDA can be used to translate source files
  into `.mid` files, and\nalso in interactive mode that will help you to understand
  how MIDA language\nworks.\n\nMIDA is a\n[member of Linux Audio consortium](http://linuxaudio.org/members.html).\n\n##
  Installation\n\n1. Install the [Haskell Tool Stack](http://haskellstack.org).\n\n2.
  Add `~/.local/bin` directory to your `PATH`, like this:\n\n   ```\n   # in .bashrc
  or similar\n   export PATH=$HOME/.local/bin:$PATH\n   ```\n\n3. Clone the repo,
  `cd` into it, and let `stack` do its thing:\n\n   ```\n   $ git clone https://github.com/mrkkrp/mida.git\n
  \  $ cd mida\n   $ stack build --copy-bins\n   ```\n\n4. Check it out:\n\n   ```\n
  \  $ mida --version\n   MIDA 1.0.0\n   ```\n\n## Example\n\nHere is a simple example
  of MIDA program that demonstrates syntax and\ndeclarative nature of the language.\n\n```\n#\n#
  Example of MIDA program\n# Tempo ≈ 50\n#\n\ndur0   = 6\ndur1   = dur0\ndur2   =
  dur0\ndur3   = {96 $ 2, 24}\npch0   = c5 {e5 d5 [a5 a5]} $ 2, g5\npch1   = pch0\npch2
  \  = {c2 c3}\npch3   = {c6 d6 e6 f6 g6 a6 b6 c7 e7}\nquiet  = {40..80}\nnormal =
  quiet + 30\nvel0   = quiet\nvel1   = quiet\nvel2   = 0, normal $ 2, 0\nvel3   =
  normal\n```\n\nSee [MIDA Manual](https://mrkkrp.github.io/mida/) for more information.\n\n##
  How to control other things?\n\nIf you're into this sort of thing, you may like
  my another project, called\n[ALGA](https://github.com/mrkkrp/alga). It allows to
  control automation\nnatively in various DAWs.\n\n## License\n\nCopyright © 2014–2016
  Mark Karpov\n\nDistributed under GNU GPL, version 3.\n"
license-name: GPL-3.0-only
