homepage: https://github.com/mokus0/misfortune
changelog-type: ''
hash: d7bb8aa00b7b6c21b75c1da2c22f2e74ecae722fa0a3f807d576f198cddd3e87
test-bench-deps: {}
maintainer: James Cook <mokus@deepbondi.net>
synopsis: fortune-mod clone
changelog: ''
basic-deps:
  regex-pcre: -any
  cereal: -any
  bytestring: -any
  base: ! '>=3 && <5'
  text: -any
  monad-loops: -any
  filepath: -any
  semigroups: -any
  utf8-string: -any
  regex-base: -any
  random-fu: ! '>=0.2.2'
  knob: -any
  vector: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.1.1
- 0.1.1.2
author: James Cook <mokus@deepbondi.net>
latest: 0.1.1.2
description-type: markdown
description: ! "misfortune ![Build Status](https://travis-ci.org/mokus0/misfortune.png)\n===========\n\nThis
  is a fortune-mod clone.  In addition to the features generally expected of a `fortune`
  program, this can be used as a Haskell library (`import Data.Fortune`) and also
  supports UTF-8 fortune files, configurable search paths, automatic merging of fortune
  databases with the same name (so you can have a local fortunes folder that just
  adds to existing fortune databases), filtering fortunes by line lengths, and a \"print
  fortune matching regex\" mode (instead of just \"print all fortunes matching regex\"
  mode).\n\nUsage\n------\n\nMost of the command-line flags from `fortune` work with
  `misfortune` as well.  To just print a fortune, run:\n\n    misfortune\n\nTo index
  a new fortune file (or update the index on an existing one), run:\n\n    misfortune-strfile
  path/to/file\n\nTo use the fortune API in your Haskell programs:\n\n    import Data.Fortune\n
  \   import qualified Data.Text as T\n    \n    main = do\n        f <- openFortuneFile
  \"pangrams\" '%' True\n        \n        appendFortune f (T.pack \"The quick brown
  fox jumps over the lazy dog.\")\n        appendFortune f (T.pack \"Quick blowing
  zephyrs vex daft Jim.\")\n        \n        closeFortuneFile f\n        \n        putStrLn
  =<< randomFortune [\"pangrams\"]\n\nThis example will create or append to a file
  \"pangrams\" in the working directory, and create or update the corresponding index
  file \"pangrams.dat\".  It then closes that file and requests a random fortune from
  all databases named \"pangrams\" in the search path - so it will either print one
  of the two just written or one found in another \"pangrams\" file.  Every eligible
  fortune is equally likely.\n\nInstallation\n-------------\n\nGet the current release
  from Hackage:\n\n    cabal install misfortune\n\nOr build the latest version from
  git:\n\n    git clone https://github.com/mokus0/misfortune.git\n    cd misfortune\n
  \   cabal install\n\n"
license-name: LicenseRef-PublicDomain
