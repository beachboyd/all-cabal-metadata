homepage: https://github.com/nfjinjing/miku
changelog-type: markdown
hash: 0462c3b6a613f596813102741e2af3ed215a2bb857a729bd8fa87dbcb8578bad
test-bench-deps: {}
maintainer: Jinjing Wang <nfjinjing@gmail.com>
synopsis: A minimum web dev DSL
changelog: ! '2016.3.17


  * Fix `captures` API to remain compatible with older versions

  * Remove `lens` dependenty to stay lean


  2016.3.16.1


  * Switch to WAI

  * Remove `public` and `mime` helpers, as those functionalities can be achieved through
  `wai-middleware-static`


  2016.3.16


  * Get rid of the Air dependency

  * Rewrite using common Haskell coding convention

'
basic-deps:
  bytestring: -any
  wai: -any
  case-insensitive: ! '>=1.2.0.5'
  base: ! '>4 && <=6'
  filepath: ! '>=1.4.0.0'
  containers: -any
  blaze-builder: ! '>=0.4.0.1'
  mtl: -any
  wai-extra: -any
  http-types: ! '>=0.9'
all-versions:
- 2011.6.11
- 2011.6.12
- 2011.6.15
- 2011.6.18
- 2011.6.19
- 2011.6.20
- 2011.6.24
- 2012.1.19
- 2012.10.27
- 2014.4.14
- 2014.5.19
- 2014.11.17
- 2016.3.16
- 2016.3.16.1
- 2016.3.17
author: Jinjing Wang
latest: 2016.3.17
description-type: markdown
description: ! "# miku\n\nA tiny web dev DSL\n\n## Example\n\n    {-# LANGUAGE OverloadedStrings
  #-}\n\n    import           Network.Miku\n    import           Network.Wai.Handler.Warp
  (run)\n\n    main :: IO ()\n    main = run 3000 . miku $ get \"/\" (text \"miku
  power\")\n\n\n## Installation\n\n    cabal update\n    cabal install miku\n    cabal
  install warp \n\n    -- copy and paste the above example to myapp.hs\n\n    runghc
  myapp.hs\n\ncheck: <http://localhost:3000>\n\n## Quick reference\n\n<https://github.com/nfjinjing/miku/blob/master/test/RouteExample.hs>\n\n##
  Routes\n\n### Verbs\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import Network.Miku\n
  \   import Network.Miku.Utils ((-))\n    import Network.Wai.Handler.Warp (run)\n
  \   import Prelude hiding ((-))\n\n    main = run 3000 . miku - do\n\n      get
  \"/\" - do\n        -- something for a get request\n\n      post \"/\" - do\n        --
  for a post request\n\n      put \"/\" - do\n        -- put ..\n\n      delete \"/\"
  - do\n        -- ..\n\n### Captures\n\n    get \"/say/:user/:message\" - do\n      text
  . show =<< captures\n\n    -- /say/miku/hello will output\n    -- [(\"user\",\"miku\"),(\"message\",\"hello\")]\n\n\n##
  WAI integration\n\n### Use WAI middleware\n\n    import Network.Wai.Middleware.RequestLogger\n\n
  \   middleware logStdout\n\n### Convert miku into a WAI application\n\n    -- in
  Network.Miku.Engine\n\n    miku :: MikuMonad -> Application\n\n\n## Hints\n\n* It's
  recommended to use your own html combinator / template engine. Try DIY with, e.g.
  [moe](https://github.com/nfjinjing/moe).\n* [Example view using custom html combinator
  (moe in this case)](https://github.com/nfjinjing/miku/blob/master/test/HTMLUsingMoe.hs)\n*
  When inspecting the request, use `ask` defined in `ReaderT` monad to get the `Request`,
  then use helper methods for `wai` to query it.\n* `Response` is in `StateT`, `html`
  and `text` are simply helper methods that update the state, i.e. setting the response
  body, content-type, etc.\n* You do need to understand monad transformers to reach
  the full power of `miku`.\n\n## Reference\n\n* miku is inspired by [Rack](http://rack.rubyforge.org),
  [Rails](http://rubyonrails.org), [Ramaze](http://ramaze.net), [Happstack](http://happstack.com/)
  and [Sinatra](http://www.sinatrarb.com/).\n"
license-name: BSD-3-Clause
