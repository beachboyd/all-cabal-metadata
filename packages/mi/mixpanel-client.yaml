homepage: https://github.com/hercules-ci/mixpanel-client#readme
changelog-type: markdown
hash: ee01055b13dafc3d112d2b0c354b4c29beda51e0a87c2a8fa59575e58efc80b4
test-bench-deps:
  http-client: -any
  bytestring: -any
  base: '>=4.7 && <5'
  time: -any
  base64-bytestring: -any
  servant-client: -any
  hspec: -any
  text: -any
  markdown-unlit: -any
  servant: '>=0.14.1'
  string-conv: -any
  http-client-tls: -any
  mixpanel-client: -any
  aeson: -any
maintainer: domen@hercules-ci.com
synopsis: Mixpanel client
changelog: |
  # Changelog

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
  and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

  ## [Unreleased]

  ## [0.3.0] - 2020-12-14

  ### Fixed

  - expose EngageData
  - EngageData.ignoreTime should be a `Maybe Bool`
  - fix parsing of ignoreTime

  ## [0.2.1] - 2019-08-26

  ### Fixed

  - 0.2.0 was a brown-paper-bag release

  ## [0.2.0] - 2019-03-13

  ### Changes

  - #4 add servant 0.16 support @domenkozar

  ## [0.1.1] - 2018-11-28

  ### Changes

  - ditch hpack @domenkozar
  - add Show instance for MixpanelError

  ## [0.1.0.0] - 2018-08-25

  - Intial release @domenkozar
basic-deps:
  http-client: -any
  bytestring: -any
  base: '>=4.7 && <5'
  time: -any
  base64-bytestring: -any
  servant-client: -any
  text: -any
  servant: '>=0.14.1'
  string-conv: -any
  http-client-tls: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.3.0
author: Domen Ko≈æar
latest: 0.3.0
description-type: markdown
description: |
  # MixPanel client for Haskell


  [![Build Status](https://travis-ci.com/hercules-ci/mixpanel-client.svg?branch=master)](https://travis-ci.com/domenkozar/mixpanel-client)
  [![Hackage](https://img.shields.io/hackage/v/mixpanel-client.svg)](https://hackage.haskell.org/package/mixpanel-client)


  Implements major features of [MixPanel HTTP API](https://mixpanel.com/help/reference/http):

  - [x] track
  - [x] alias
  - [x] engage
  - [ ] import
  - [ ] export

  ## Getting started

  ```haskell
  import Data.Aeson      ( (.=) )
  import Data.Time.Clock ( getCurrentTime )
  import GHC.Exts        ( fromList )
  import MixPanel        ( Operation(Set), engage, track, alias
                         , AuthToken(..), mkEnv
                         -- reexports
                         , newManager, tlsManagerSettings)


  main :: IO ()
  main = do
    -- setup
    manager <- newManager tlsManagerSettings
    let env = mkEnv (AuthToken "foobar") manager

    -- track a simple event
    Right () <- track env "Played Video" mempty

    -- track an event with extra properties
    Right () <- track env "Played Video Unique per user"
      $ fromList [ "distinct_id" .= ("generated-id" :: String)
                 , "customProperty" .= True ]

    -- alias the user
    Right () <- alias env "generated-id" "user@example.com"

    -- profile engagement
    now <- getCurrentTime
    Right () <- engage env "user@example.com"
      $ Set (fromList [ "$created" .= now])

    putStrLn "All good!"
  ```

  ## Design questions

  a) Why does it use `Object/Array` intemediate values from `Data.Aeson`?


  ## TODO

  - batch requests
  - expose extra url query paramerers
  - engage special properties more type safe?
  - filter out null values in requests to mixpanel
  - api support for tracking revenue
license-name: Apache-2.0
