homepage: http://www.github.com/massysett/sunlight
changelog-type: ''
hash: 26cf65c7fdadc25ac72d209de217f8f8b9892d317a9d2c034860d234ae3cfec2
test-bench-deps: {}
maintainer: omari@smileystation.com
synopsis: Test Cabalized package against multiple dependency versions
changelog: ''
basic-deps:
  bytestring: ! '>=0.9.2.1 && <0.11'
  Cabal: ! '>=1.14.0 && <1.19'
  base: ! '>=4.5.0.0 && <4.8'
  time: ! '>=1.4 && <1.5'
  tuple: ! '>=0.2.0.1 && <0.3'
  process: ! '>=1.1.0.1 && <1.3'
  old-locale: ! '>=1.0.0.4 && <1.1'
  random: ! '>=1.0.1.1 && <1.1'
  directory: ! '>=1.1.0.2 && <1.3'
all-versions:
- 0.2.0.0
- 0.4.0.0
- 0.6.0.0
author: Omari Norman
latest: 0.6.0.0
description-type: markdown
description: ! "# sunlight\n\nsunlight helps you test your Cabalized package against
  multiple\ndependency versions.\n\n## Why?\n\nI wrote sunlight because of minor quibbles
  I have with the Haskell\n[Package Versioning\nPolicy](http://www.haskell.org/haskellwiki/Package_versioning_policy).\nThe
  PVP encourages you to record top bounds on each of the\ndependencies in your package.
  \ This often keeps packages from\nbuilding when dependencies are updated, even if
  the dependencies\nhave changed in harmless ways.\n\nI'm not the only one with quibbles
  here: [Haskell Cafe\ndiscussion](http://www.haskell.org/pipermail/haskell-cafe/2012-August/102885.html).\nMy
  only quibble is with upper bounds; specifying the release of a\npackage by using
  the PVP is an excellent practice.\n\nI figure it would be much more useful for the
  Cabal file to serve as\ndocumentation of software versions that the package will
  build with.\nThe problem is that there was no easy way to make sure that a\npackage
  builds with the minimum versions specified in the Cabal\nfile.  For example, cabal
  install does not have an option to fetch\nthe lowest version of each dependency;
  instead, it eagerly fetches\nthe most recent dependencies--which is what you want
  most of the\ntime, but this makes it hard to ensure that the package builds with\nthe
  lowest possible dependencies.\n\nsunlight automatically builds the package using
  multiple GHC\nversions, so you can verify that the package builds even with\ndifferent
  dependencies or compiler versions.  This also makes it\neasier to maintain a package
  that builds with older GHC versions\nthat you may not use regularly.\n\n## Usage\n\nTo
  use sunlight, you need to specify a minimum bound for each\ndependency.  That minimum
  bound must be resolvable to an actual\nversion of the package.  It's OK to specify
  an exact bound, or an\noptional maximum bound, but there must be a minimum.\n\nFor
  example, these are all acceptable:\n\n    bytestring ==0.9.2.1\n    bytestring >=
  0.9.2.1 && < 0.10\n    bytestring >= 0.9.2.1\n\nThis is not acceptable because there
  is no bound at all:\n\n    bytestring\n\nThis is not acceptable because there is
  no lower bound:\n\n    bytestring <= 0.10\n\nThen you build a test executable.  An
  example is in the\n`sunlight-test.hs` file in the sunlight git tree.  This program\ntests
  sunlight itself.\n\nThe executable will output a number of reports in a `sunlight`\ndirectory,
  and it will also output a `current-versions.txt` report\nto show you the most recent
  versions of dependencies that work with\nyour package, as well as a `minimum-versions.txt`
  file showing you\nthat your package builds and tests with the minimum package\nversions.\n\nAlso,
  see the Haddocks on the Test.Sunlight module.\n\n## Disclaimer\n\nsunlight works,
  but I'm not sure it is a good solution to the\nproblem of managing bounds and dependencies
  in a Cabal file.  In\nparticular, it might be a better long-term idea to change\ncabal-install
  so that it can fetch the lowest versions rather than\nthe most recent ones.\n\nsunlight
  works on simple Cabal files but I have not tested it on any\nexotic files.\n\nsunlight
  makes no effort to be compatible with any Haskell compiler\nother than GHC.\n\n##
  See also\n\ncabal-bounds - program to automatically manage the bounds and\nversions
  in a Cabal file.\n[Github](https://github.com/dan-t/cabal-bounds)\n[Hackage](http://hackage.haskell.org/package/cabal-bounds)\n\ncabal-constraints
  - Repeatable builds for cabalized Haskell projects\n[Github](https://github.com/benarmston/cabal-constraints)\n[Hackage](http://hackage.haskell.org/package/cabal-constraints)\n\ncabal-freeze
  - hopefully will appear in `cabal` soon.\n[Github ticket](https://github.com/haskell/cabal/pull/1519)\n\n##
  License\n\nsunlight is licensed under the BSD license.\n\n## Why the name?\n\nThe
  word \"cabal\" has shadowy connotations.  This package helps\nensure your cabal
  is doing what you say it is doing...so it helps\nshine sunlight on your cabal which
  is, as they say, the best\ndisinfectant.\n"
license-name: BSD-3-Clause
