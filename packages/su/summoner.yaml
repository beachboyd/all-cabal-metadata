homepage: https://github.com/kowainik/summoner
changelog-type: markdown
hash: 2677c96fe6e0a514c05fe58fe53fb51b06fdbb1c3e328454e1e9474d5d2a6c78
test-bench-deps:
  hspec: ! '>=2.4.8'
  summoner: -any
  filepath: -any
  hedgehog: ! '>=0.5.3 && <1.1'
  tree-diff: ^>=0.0.2
  base-noprelude: ! '>=4.10 && <4.13'
  relude: -any
  neat-interpolation: -any
  tomland: -any
  directory: -any
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Tool for scaffolding fully configured batteries-included production-level
  Haskell projects.
changelog: |
  # Changelog

  `summoner` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 1.3.0.1 — Apr 10, 2019

  * Include golden test files into `extra-source-files`.

  ## 1.3.0 — Apr 9, 2019

  * [#285](https://github.com/kowainik/summoner/issues/285):
    Implement `summon script` command.
  * [#151](https://github.com/kowainik/summoner/issues/151),
    [#295](https://github.com/kowainik/summoner/issues/295):
    Add support for GHC-8.6. Make GHC-8.6.4 default.
  * [#269](https://github.com/kowainik/summoner/issues/269):
    __Important:__ Introduce `ghc-options` configuration parameter. Deprecate `warnings` field in TOML file.

    _Migration guide:_ Please, rename `warnings` field if you use one, it will be
    removed in the very next release. Use `ghc-options` instead.
  * [#303](https://github.com/kowainik/summoner/issues/303):
    Add option `noUpload` to TOML config file.
  * __Important:__ Summoner doesn't add old GHC versions into Travis matrix for
    Stack anymore. See this Stack issue for reasoning:
        https://github.com/commercialhaskell/stack/issues/4488
  * [#280](https://github.com/kowainik/summoner/issues/280):
    Support build with `cabal-install` on the AppVeyor CI.
  * [#272](https://github.com/kowainik/summoner/issues/272):
    Simplify Travis config for Cabal.
  * [#275](https://github.com/kowainik/summoner/issues/275):
    Simplify Travis settings/installation process for Stack.
  * [#261](https://github.com/kowainik/summoner/issues/261):
    Guess author login, name and email from `.gitconfig`.
  * [#268](https://github.com/kowainik/summoner/issues/268):
    Simplify process of adding custom prelude in the interactive mode.
  * [#282](https://github.com/kowainik/summoner/issues/282):
    Allow users to extend the `.gitignore` file.
  * [#286](https://github.com/kowainik/summoner/issues/286),
    [#288](https://github.com/kowainik/summoner/issues/288),
    [#304](https://github.com/kowainik/summoner/issues/304):
    Bump up to `tomland-1.0.0`, `relude-0.5.0`, `shellmet-0.0.1`.
  * Drop support for GHC-8.6.3 on CI. Support GHC-8.6.4 on CI.

  ## 1.2.0 — Nov 30, 2018

  * Make `cabal-version: 2.0` default in generated projects.
  * [#11](https://github.com/kowainik/summoner/issues/11):
    Support offline mode.
  * [#199](https://github.com/kowainik/summoner/issues/199):
    Add `None` license with no `LICENSE` file generation.
    Add licenses short descriptions text during the interactive mode.
    Patch `summon show license` command to show short description about
    each license.
  * [#197](https://github.com/kowainik/summoner/issues/197)
    Build with `stack` lts-12.20, and support `GHC` 8.4.4 in
    project generation. Make GHC-8.4.4 the default one for generated project.
  * [#37](https://github.com/kowainik/summoner/issues/37):
    Add HLint check on Travis CI in generatd projects.
  * [#142](https://github.com/kowainik/summoner/issues/142):
    Add version bounds to `base` in the generated `.cabal` file.
  * [#239](https://github.com/kowainik/summoner/issues/239):
    Make categories not mandatory.
  * Use `defaultDescription` for project description if not specified.
  * [#185](https://github.com/kowainik/summoner/issues/185):
    Add golden tests.
  * [#184](https://github.com/kowainik/summoner/issues/184)
    Add `--no-upload` option.
  * [#169](https://github.com/kowainik/summoner/issues/169):
    Make AppVeyor use the 64bits version of stack and build for 64 bits.
  * [#154](https://github.com/kowainik/summoner/issues/154):
    Add `Link` constructor to `Source` data type.
  * [#178](https://github.com/kowainik/summoner/issues/178):
    Remove unnecessary new lines and trailing spaces in most places.
  * [#168](https://github.com/kowainik/summoner/issues/168):
    Upgrade `stack` `intall-cabal` option's version to `2.2.0.1` in
    the generated Travis file.
  * [#195](https://github.com/kowainik/summoner/issues/195):
    Update prompt questions for CLI.
  * Add more documentation to the functions.
  * [#155](https://github.com/kowainik/summoner/issues/155):
    Bump up to `tomland-0.5.0`.
  * [#202](https://github.com/kowainik/summoner/issues/202):
    Bump up to `relude-0.4.0`.
  * Remove `tasty` dependencies from tests.
  * Drop support for GHC-8.6.1 on CI. Support GHC-8.6.2 on CI.
  * Drop support for GHC-8.4.3 on CI. Build with GHC-8.4.4 on CI.
  * Use `defaultDescription` for project description if not specified.

  ## 1.1.0.1 – Sep 10, 2018

  * Bump up `relude` version to `0.3.0`.
  * [#146](https://github.com/kowainik/summoner/issues/146):
    Migrate to `base-noprelude`.
  * Add -Werror to build option in generated .travis.yml

  ## 1.1.0

  * [#128](https://github.com/kowainik/summoner/issues/128):
    __Important:__ Replace `summon` with `summon new` command.
    To create a project now the following command should be used:
    ```
    summon new my-project
    ```
  * [#82](https://github.com/kowainik/summoner/issues/82):
    Add stackage badges.
  * [#109](https://github.com/kowainik/summoner/issues/109):
    Fix travis cache directories.
  * [#117](https://github.com/kowainik/summoner/issues/117):
    Step into created project properly
  * [#110](https://github.com/kowainik/summoner/issues/110):
    Print executing command.
  * [#91](https://github.com/kowainik/summoner/issues/91):
    Add warning fields for ghc.
  * [#90](https://github.com/kowainik/summoner/issues/90):
    Add TOML test.
  * [#120](https://github.com/kowainik/summoner/issues/120):
    Bump up dependencies.
  * [#58](https://github.com/kowainik/summoner/issues/58):
    Make `Licence` type safer.
  * [#124](https://github.com/kowainik/summoner/issues/124):
    Print directories bold.
  * [#130](https://github.com/kowainik/summoner/issues/130):
    Show git revision version under `--version` command.
  * [#63](https://github.com/kowainik/summoner/issues/63):
    Add `show ghc`, `show license` and `show license <LICENSE_NAME>` commands.
  * [#122](https://github.com/kowainik/summoner/issues/122):
    Remove github link from CHANGELOG when github is not chosen.
  * [#35](https://github.com/kowainik/summoner/issues/35):
    Add config option to add `.stylish-haskell.yaml` to your project
    (via URL or file path).
  * Bump up `tomland` version to `0.4.0`.
  * [#138](https://github.com/kowainik/summoner/issues/138):
    Remove traces of GitHub from `.cabal` file when GitHub integration is disabled.
  * [#31](https://github.com/kowainik/summoner/issues/31):
    Add config option to add `CONTRIBUTING.md` to your project
    (via URL or file path).
  * [#27](https://github.com/kowainik/summoner/issues/27):
    Remove `b` script.

  ## 1.0.6

  * Use `relude` instead of `universum`.
  * [#105](https://github.com/kowainik/summoner/issues/105):
    Add `--ignore-config` option.

  ## 1.0.5

  * [#100](https://github.com/kowainik/summoner/issues/100):
    Bump up to `ghc-8.4.3`. Add support for `Ghc843` in code
    and make it default.
  * Make CI badges in README be shown depending on the chosen options.
  * [#99](https://github.com/kowainik/summoner/issues/99):
    UseTravis-specific env variable `TRAVIS_BUILD_DIR` in created travis file.
  * [#97](https://github.com/kowainik/summoner/issues/97):
    Add cabal to created travis file.
  * [#96](https://github.com/kowainik/summoner/issues/96):
    Add option to choose `cabal`, `stack` or both.

  ## 1.0.4

  * Bump up `tomland` to version `0.3`.

  ## 1.0.3

  * [#92](https://github.com/kowainik/summoner/issues/92):
    Remove -fhide-source-paths from generated stack yaml files for
    GHC < 8.2

  ## 1.0.2

  * [#87](https://github.com/kowainik/summoner/issues/87):
    Fix Travis matrix for not default `ghc` versions.

  ## 1.0.1

  * [#85](https://github.com/kowainik/summoner/issues/85):
    Remove `base-noprelude` from dependencies.

  ## 1.0.0

  * __Important:__ Rename `hs-init` to `summoner`. Transform the script into the package.
  * [#54](https://github.com/kowainik/summoner/issues/54):
     Rename `on` and `off` commands to `with` and `without`.
  * [#48](https://github.com/kowainik/summoner/issues/48):
    - Add ability to write configurations file. Remove `Targets` data type.
      Use `Config` instead for default, file and CLI configurations.
  * [#60](https://github.com/kowainik/summoner/issues/60):
    Use custom prelude `universum`.
  * [#39](https://github.com/kowainik/summoner/issues/39):
    Add option to use custom prelude in CLI and in `.toml` configuration.
  * [#38](https://github.com/kowainik/summoner/issues/38):
    Add option to add default extensions to `.toml` config.
  * [#62](https://github.com/kowainik/summoner/issues/62):
    Make some parts of output not only colorful, but also bold. This makes output prettier.
  * [#67](https://github.com/kowainik/summoner/issues/67):
    Add `Aswer` data type to handle yes-no CLI questions.
  * [#61](https://github.com/kowainik/summoner/issues/61):
    Add CLI `--version` option.
  * [#73](https://github.com/kowainik/summoner/issues/73):
    Make custom prelude be table in toml.
  * [#74](https://github.com/kowainik/summoner/issues/74):
    Print hierarchy tree for the created project.

  # hs-init

  ## 0.0.4

  * Now works on windows systems as well
  * Add powershell install script for Windows


  ## 0.0.3

  * [#45](https://github.com/vrom911/hs-init/issues/45):
    Support AppVeyor CI for created projects.

  ## 0.0.2

  * Use metavar for on-off commands.
  * Upgrade `lts` to `10.3`, use `ghc 8.2.2` as default value.

  ## 0.0.1

  * [#36](https://github.com/vrom911/hs-init/issues/36):
    Add option for creating private repositories — `-p | --private`.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/kowainik/summoner/releases
basic-deps:
  bytestring: ^>=0.10.8.2
  shellmet: ^>=0.0.1
  base: ! '>=4.10 && <4.13'
  time: ^>=1.8
  text: ^>=1.2.3.0
  summoner: -any
  generic-deriving: ^>=1.12.2
  filepath: ^>=1.4.1.2
  gitrev: ^>=1.3.1
  process: ^>=1.6.1.0
  base-noprelude: ! '>=4.10 && <4.13'
  ansi-terminal: ! '>=0.8 && <0.10'
  relude: ^>=0.5.0
  optparse-applicative: ^>=0.14.2.0
  aeson: ! '>=1.2.4.0 && <1.5'
  neat-interpolation: ^>=0.3.2.2
  tomland: ^>=1.0
  directory: ^>=1.3.0.2
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.1.0
- 1.1.0.1
- 1.2.0
- 1.3.0
- 1.3.0.1
author: Veronika Romashkina, Dmitrii Kovanikov
latest: 1.3.0.1
description-type: markdown
description: "# \U0001F52E Summoner\n\n![wizard](https://user-images.githubusercontent.com/8126674/44388234-320aac00-a55a-11e8-879d-5dca68512031.png)\n[![Build](https://secure.travis-ci.org/kowainik/summoner.svg)](http://travis-ci.org/kowainik/summoner)\n[![Windows
  build](https://ci.appveyor.com/api/projects/status/github/kowainik/summoner?branch=master&svg=true)](https://ci.appveyor.com/project/kowainik/summoner)\n[![Hackage](https://img.shields.io/hackage/v/summoner.svg)](https://hackage.haskell.org/package/summoner)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/summoner/blob/master/LICENSE)\n\n>
  _So many of our dreams at first seem impossible, then they seem improbable, and\n>
  then, when we summon the will, they soon become inevitable._\n>\n> Christopher Reeve\n\nSummoner
  is a tool for scaffolding fully configured batteries-included production-level Haskell
  projects.\n\nDo you want to create a library that is to be uploaded to Hackage/Stackage,
  that builds with both Cabal and Stack and supports the latest three major GHC versions?\nOr
  you are building a production application which uses a custom prelude and has CI
  with Travis Linux and AppVeyors Windows checks?\nSummoner can help you do all that
  with minimal effort from you - it can even upload the project to GitHub if you wish!\n\nBy
  the way, Summoner operates as either CLI or TUI application, so you can choose what
  you're more comfortable with and install only the required one.\n\n## Structure\n\n*
  [Demo](#demo-)\n    + [TUI demo](#tui-demo-)\n    + [CLI demo](#cli-demo-)\n    +
  [Scaffolded project structure](#scaffolded-project-structure-)\n* [Features](#features-)\n*
  [Get started](#get-started-)\n    + [Prerequisites](#prerequisites-)\n    + [Installation](#installation-)\n
  \       + [Summon-TUI](#summon-tui-)\n          + [TUI: download binary](#tui-download-binary-)\n
  \         + [TUI: from source](#tui-from-source-)\n        + [Summon-CLI](#summon-cli-)\n
  \         + [CLI: download binary](#cli-download-binary-)\n          + [CLI: from
  Hackage/Stackage](#cli-from-hackagestackage-)\n          + [CLI: from source](#cli-from-source-)\n
  \   + [Setup](#setup-)\n* [Usage](#usage-)\n    + [Command-line arguments](#command-line-arguments-)\n
  \   + [File configuration](#file-configuration-)\n    + [TUI](#tui-)\n    + [CLI](#cli-)\n*
  [FAQ](#faq-)\n* [For Developers](#for-developers-)\n    + [Build](#build-)\n    +
  [Test](#test-)\n    + [Run](#run-)\n* [Changelog](#changelog-)\n* [Acknowledgments](#acknowledgments-)\n\n##
  Demo [↑](#structure)\n\n### TUI demo [↑](#structure)\n\n[![TUI demo](https://asciinema.org/a/214424.png)](https://asciinema.org/a/214424)\n\n###
  CLI demo [↑](#structure)\n\n[![CLI demo](https://asciinema.org/a/214433.png)](https://asciinema.org/a/214433)\n\n###
  Scaffolded project structure [↑](#structure)\n\nThis is an example of the project
  hierarchy you can get if you're running Summoner with all options enabled:\n\n```\nproject-name/\n├──
  app/\n│   └── Main.hs\n├── benchmark/\n│   └── Main.hs\n├── src/\n│   ├── ProjectName.hs\n│  
  └── Prelude.hs\n├── test/\n│   └── Spec.hs\n├── CHANGELOG.md\n├── CONTRIBUTING.md\n├──
  LICENSE\n├── project-name.cabal\n├── README.md\n├── Setup.hs\n├── stack.yaml\n├──
  appveyor.yml\n├── .git\n├── .gitignore\n├── .stylish-haskell.yaml\n└── .travis.yml\n```\n\nYou
  can also see complete examples in the following folder:\n\n* [`summon-cli/tests/golden`:
  Examples of scaffolded projects](https://github.com/kowainik/summoner/tree/master/summoner-cli/test/golden)\n\nDirectory
  `smallProject` contains an example of the straightforward package, and `fullProject`
  shows a generated project with more advanced structure and more features.\n\n##
  Features [↑](#structure)\n\nSummoner is a tool that combines predefined configurations,
  command-line arguments and a chosen interface.\n\nTo fully understand the power
  in your hands with the help of Summoner, please check out this section.\n\nBelow
  you can see highlighted features in different categories.\n\n### Project [↑](#structure)\n\n+
  Support for Cabal and Stack build tools.\n+ Ability to pick stanzas (library, executable,
  test-suite, benchmark).\n+ Option to include an alternative prelude, if desired.
  The project would then use [`base-noprelude` technique](http://hackage.haskell.org/package/Prelude),
  and the `Prelude` module would be added to the library target.\n+ Whole Hackage-upload
  checklist support.\n+ Support for multiple GHC versions, with thoughtful reflection
  on project meta, base versions (e.g. `base >= 4.9 && < 4.12`), etc.\n+ Ability to
  create runnable Haskell scripts.\n+ Different license support: MIT, BSD2, BSD3,
  GPL-2, GPL-3, LGPL-2.1, LGPL-3, AGPL-3, Apache-2.0, MPL-2.0, None (All Rights Reserved
  license without file).\n+ Creation of the `CHANGELOG.md` file with [PVP versioning
  policy](https://pvp.haskell.org).\n+ Ability to include your `.stylish-haskell.yaml`
  file.\n+ Usage of the `ghc-options` field with sensible defaults.\n\n  If `ghc-options`
  are not explicitly stated in the configuration file, then the following list of
  GHC flags is added to all stanzas:\n\n  ```\n  -Wall\n  -Wincomplete-uni-patterns\n
  \ -Wincomplete-record-updates\n  -Wcompat\n  -Widentities\n  -Wredundant-constraints
  \     (ghc >= 8.0)\n  -fhide-source-paths          (ghc >= 8.2.2)\n  -Wmissing-export-lists
  \      (ghc >= 8.4.1)\n  -Wpartial-fields             (ghc >= 8.4.1)\n  ```\n\n
  \ Besides, the following GHC options are added to the executable, tests and benchmark
  stanzas:\n\n  ```\n  -threaded\n  -rtsopts\n  -with-rtsopts=-N\n  ```\n\n### GitHub
  [↑](#structure)\n\n+ Initialisation of the git repository inside the project folder.\n+
  Initial commit creation.\n+ Uploading the repository to GitHub.\n+ Exhaustive `.gitignore`
  file.\n+ Formation of the `README` file with Hackage, Stackage and CI badges.\n+
  Linking to the GitHub repository in the `.cabal` file.\n+ Ability to include your
  `CONTRIBUTING.md` file.\n+ Guessing user credentials from `.gitconfig`.\n\n### CI
  [↑](#structure)\n\n+ Generation of the `.travis.yml` file that runs build and tests
  on CI under Linux using\n  [Dead simple Haskell Travis Settings for Cabal and Stack](https://chshersh.github.io/posts/2019-02-25-haskell-travis).\n+
  Configuration matrix on CI to build with multiple GHC versions and various build
  tools.\n+ `-Werror` is enabled on CI not to miss any warnings.\n+ Run HLint checks
  on CI.\n+ Generation of the `appveyor.yaml` file which runs build and tests on CI
  under Windows.\n\n### Others [↑](#structure)\n\n+ Ability to create a project in
  offline mode.\n\n## Get started [↑](#structure)\n\n### Prerequisites [↑](#structure)\n\nTo
  start using Summoner make sure that you have the following tools installed on your
  machine:\n\n* [`git`](https://git-scm.com) – to initialize the GitHub repo.\n* [`hub`](https://github.com/github/hub)
  – to upload the project to GitHub.\n* [`curl`](https://curl.haxx.se) – to download
  licenses.\n\n### Installation [↑](#structure)\n\nSummon contains two executables:\n\n*
  `summon`: scaffold projects using interactive CLI mode.\n* `summon-tui`: scaffold
  projects using TUI.\n\nBelow you can find the description of how to install each
  of them so you can choose the one you want.\n\n#### Summon-TUI [↑](#structure)\n\n>
  **NOTE:** `summon-tui` is not supported on Windows. See [this issue](https://github.com/jtdaugherty/vty/pull/1).\n\n#####
  TUI: download binary [↑](#structure)\n\nYou can download binary directly [from GitHub
  releases](https://github.com/kowainik/summoner/releases).\n\nAfter downloading binary,
  make it executable and copy it under convenient location, for example:\n\n```shell\nchmod
  +x summon-cli-linux\nmv summon-cli-linux ~/.local/bin/summon\n```\n\n##### TUI:
  from source [↑](#structure)\n\nFetch the repo using `cabal`:\n\n```shell\ncabal
  get -s summoner\n```\n\nor clone the directory from GitHub:\n\n```shell\ngit clone
  https://github.com/kowainik/summoner.git\n```\n\nStep into the directory:\n\n```haskell\ncd
  summoner\n```\n\nBuild and install using `cabal`:\n\n```shell\ncabal new-install
  summoner-tui:exe:summon-tui\n```\n\nBuild and install using `stack`:\n\n```shell\nstack
  install summoner-tui:exe:summon-tui\n```\n\n#### Summon-CLI [↑](#structure)\n\n#####
  CLI: download binary [↑](#structure)\n\nYou can download binary directly [from GitHub
  releases](https://github.com/kowainik/summoner/releases).\n\nAfter downloading binary,
  make it executable and copy it under convenient location, for example:\n\n```shell\nchmod
  +x summon-cli-linux\nmv summon-cli-linux ~/.local/bin/summon\n```\n\n##### CLI:
  from Hackage/Stackage [↑](#structure)\n\nUsing `cabal`:\n\n```shell\ncabal new-update\ncabal
  new-install summoner\n```\n\nUsing `stack`:\n\n```shell\nstack install summoner\n```\n\n#####
  CLI: from source [↑](#structure)\n\nFetch the repo using `cabal`:\n\n```shell\ncabal
  get -s summoner\n```\n\nor clone the directory from GitHub:\n\n```shell\ngit clone
  https://github.com/kowainik/summoner.git\n```\n\nStep into the directory:\n\n```haskell\ncd
  summoner\n```\n\nBuild and install using `cabal`:\n\n```shell\ncabal new-install
  summoner-cli:exe:summon\n```\n\nBuild and install using `stack`:\n\n```shell\nstack
  install summoner:exe:summon\n```\n\n### Setup [↑](#structure)\n\nYou can turn on
  bash auto-completion by running the following command:\n\n```shell\nsource <(summon
  --bash-completion-script `which summon`)\n```\n\n## Usage [↑](#structure)\n\nTo
  start `summon`ing projects nothing additional is required. However, to tweak your
  settings further, you can use additional configuration settings.\nThere are several
  options you can use to set particular configurations for new projects (in increasing
  order of priority):\n\n1. Default configuration file (`~/.summoner.toml`).\n2. Fields
  `user.login`, `user.name` and `user.email` from `~/.gitconfig`.\n3. Explicitly specified
  configuration file by `--file FILENAME` option (used instead of the default one
  if specified).\n4. Options that are stated by CLI arguments.\n5. User input. It
  could be\n    * **TUI** – User data specified in the window of `summon-tui`.\n    *
  **CLI** – Interactively inputted answers during execution of the `summon` command
  (for the options that were not specified on previous steps).\n\nTo cut a long story
  short, the configuration uses [Partial Options Monoid Pattern](https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67).\n\n###
  File configuration [↑](#structure)\n\nHere is the list of the options that can be
  configured to suit your needs. If options are not specified, they are asked interactively
  (or some sensible defaults are used).\n\n| Field            | Type    | Description
  \                                                                                                                                                         |\n|------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|
  `cabal`          | Bool    | Add Cabal support?                                                                                                                                                   |\n|
  `stack`          | Bool    | Add Stack support?                                                                                                                                                   |\n|
  `owner`          | Text    | GitHub login.                                                                                                                                                        |\n|
  `fullName`       | Text    | Full name.                                                                                                                                                           |\n|
  `email`          | Text    | E-mail address.                                                                                                                                                      |\n|
  `license`        | License | One of: `MIT`, `BSD2`, `BSD3`, `GPL-2`, `GPL-3`, `LGPL-2.1`,
  `LGPL-3`, `AGPL-3`, `Apache-2.0`, `MPL-2.0`, `None`.                                                    |\n|
  `ghcVersions`    | [GHC]   | `summoner` uses default `GHC-8.6.4`. However, additionally
  you can specify other versions. For each version `x.y.z` the `stack-x.y.z.yaml`
  will be created.          |\n| `github`         | Bool    | Turn on `GitHub` integration
  by default?                                                                                                                             |\n|
  `gitignore`      | [Text]  | List of files you want added to the default `.gitignore`.
  (Ignored if `github = false`)                                                                              |\n|
  `noUpload`       | Bool    | Do not upload to GitHub, but create all GitHub related
  files if specified (Ignored if `github = false`)                                                              |\n|
  `private`        | Bool    | Create private repository by default? (Ignored if `github
  = false`)                                                                                                  |\n|
  `travis`         | Bool    | Turn on `Travis` integration by default?  (Ignored
  if `github = false`)                                                                                              |\n|
  `appveyor`       | Bool    | Turn on `AppVeyor` integration by default?  (Ignored
  if `github = false`)                                                                                            |\n|
  `lib`            | Bool    | Create `src` folder with simple `ProjectName.hs` file
  and library target?                                                                                            |\n|
  `exe`            | Bool    | Create `app` folder with simple `Main.hs` file and
  executable target?                                                                                                |\n|
  `test`           | Bool    | Create `test` folder with simple `Spec.hs` file and
  test target?                                                                                                     |\n|
  `bench`          | Bool    | Create `benchmark` folder with `Main.hs` file with
  [`gauge`](https://hackage.haskell.org/package/gauge) library usage example?                                       |\n|
  `extensions`     | [Text]  | List of the default extensions to add into `default-extensions`
  section in the `.cabal`.                                                                             |\n|
  `ghc-options`    | [Text]  | List of the default GHC options to add into `ghc-options`
  section in the `.cabal`.                                                                                   |\n|
  `stylish.*`      | Text    | `stylish.file` to provide the absolute file path OR
  `stylish.url` to download the `.stylish-haskell.yaml` file to use in the project.
  \                               |\n| `contributing.*` | Text    | `contributing.file`
  to provide the absolute file path OR `contributing.url` download OR `contribuint.link`
  to link the `CONTRIBUTING.md` file to use in the project. |\n|`[prelude]`       |
  \        |                                                                                                                                                                      |\n|
  `package`        | Text    | The package name of the custom prelude you'd like to
  use in the project (doesn't work without `module` field).                                                       |\n|
  `module`         | Text    | The module name of the custom prelude you'd like to
  use in the project (doesn't work without `package` field).                                                       |\n\nSee
  the example of [the configuration for projects of the `Kowainik` organization](https://github.com/kowainik/org/blob/master/.summoner.toml).\n\n###
  Command line arguments [↑](#structure)\n\nAvailable commands:\n\n```\nUsage:\n  summon
  COMMAND\n      Set up your own Haskell project\n\nAvailable commands:\n  new                      Create
  a new Haskell project\n  script                   Create a new Haskell script\n
  \ show                     Show available licenses or ghc versions\n\nAvailable
  global options:\n  -h, --help               Show this help text\n  -v, --version
  \           Show summoner's version\n```\n\n#### **summon new** command: [↑](#structure)\n\n```\nUsage:\n
  \ summon new PROJECT_NAME [--ignore-config] [--no-upload] [--offline]\n             [-f|--file
  FILENAME]\n             [--cabal]\n             [--stack]\n             [--prelude-package
  PACKAGE_NAME]\n             [--prelude-module MODULE_NAME]\n             [with    [OPTIONS]]\n
  \            [without [OPTIONS]]\n\nAvailable options:\n  -h, --help               Show
  this help text\n  --ignore-config          Ignore configuration file\n  --no-upload
  \             Do not upload to GitHub. Special case of the '--offline' flag.\n  --offline
  \               Offline mode: create project with 'All Rights Reserved' license\n
  \                          and without uploading to GitHub.\n  --cabal                  Cabal
  support for the project\n  --stack                  Stack support for the project\n
  \ -f, --file FILENAME      Path to the toml file with configurations. If not\n                           specified
  '~/.summoner.toml' will be used if present\n  --prelude-package PACKAGE_NAME\n                           Name
  for the package of the custom prelude to use in\n                           the
  project\n  --prelude-module MODULE_NAME\n                           Name for the
  module of the custom prelude to use in\n                           the project\n\nAvailable
  commands:\n  with                     Specify options to enable\n  without                  Specify
  options to disable\n\nAvailable command options:\n  -h, --help               Show
  this help text\n  -g, --github             Github integration\n  -p, --private            Create
  private GitHub repository\n  -c, --travis             Travis CI integration\n  -w,
  --app-veyor          AppVeyor CI integration\n  -l, --library            Library
  target\n  -e, --exec               Executable target\n  -t, --test               Tests\n
  \ -b, --benchmark          Benchmarks\n```\n\n#### **summon script** command: [↑](#structure)\n\n```\nUsage:\n
  \ summon script BUILD_TOOL [-g|--ghc GHC_VERSION] [-n|--name FILE_NAME]\n      Create
  a new Haskell script\n\nAvailable options:\n  -h,--help                Show this
  help text\n  -g,--ghc GHC_VERSION     Version of the compiler to be used for script\n
  \ -n,--name FILE_NAME      Name of the script file\n```\n\n#### **summon show**
  command: [↑](#structure)\n\n```\nUsage:\n  summon show COMMAND\n      Show supported
  licenses or ghc versions\n\nAvailable commands:\n  ghc                      Show
  available ghc versions\n  license                  Show available licenses\n  license
  [LICENSE_NAME]   Show specific license text\n\nAvailable options:\n  -h, --help
  \              Show this help text\n```\n\nFor example, the following command preconfigures
  the project settings with the custom prelude `relude`, included library, executable,
  test stanzas (but without benchmarks), creates a private repository on GitHub with
  the Travis CI and AppVeyor CI integrated.\n\n```shell\nsummon new my-project with
  -letgcpw without -b --prelude-package relude --prelude-module Relude\n```\n\n###
  TUI [↑](#structure)\n\n#### TUI new command [↑](#structure)\n\n![summon new TUI](https://user-images.githubusercontent.com/8126674/49283553-fc684e00-f4cc-11e8-8411-f173f5f19a71.png)\n\n>
  **Section 1** – The main section where user inputs data or changes the configurations.\n\n>
  **Section 2** – The structure of the project that is going to be created with the
  current configurations. This tree changes on-the-fly.\n\n> **Section 3** – Hints,
  project status, or current errors in the configurations.\n\n> **Section 4** – Useful
  hotkeys.\n\nThe TUI window opens with the pre-filled information received from a
  config file and command-line arguments. However, it's possible to change any field
  as per your needs.\n\nIn the screenshot you can see that you'll be given a few text
  fields to fill in or some checkboxes that represent boolean values of the configurations.
  To help you fill in the correct input, there are some ⓘ info messages in the `Status`
  section, which give additional details about the current field.\n\nTo help you navigate
  between the form fields here are the available hotkeys:\n\n| Key                               |
  Action                                                                               |\n|-----------------------------------|--------------------------------------------------------------------------------------|\n|
  <kbd>Esc</kbd>                    | Abort `summoner`                                                                     |\n|
  <kbd>Enter</kbd>                  | If input is valid go to the Confirm window                                           |\n|
  <kbd>Tab</kbd>                    | Change the focus to the next active field                                            |\n|
  <kbd>Shift</kbd> + <kbd>Tab</kbd> | Change the focus to the previous active field
  \                                       |\n| <kbd>Space</kbd>                  |
  Enable/disable current checkbox or radio button                                      |\n|
  <kbd>Ctrl</kbd> + <kbd>d</kbd>    | Delete the input of the current text field                                           |\n|
  <kbd>Ctrl</kbd> + <kbd>u</kbd>    | Delete the input of the current text field from
  the cursor position to the beginning |\n| <kbd>Ctrl</kbd> + <kbd>k</kbd>    | Delete
  the input of the current text field from the cursor position to the end       |\n|
  <kbd>Ctrl</kbd> + <kbd>a</kbd>    | Move the cursor to the beginning of the current
  input field                          |\n| <kbd>Ctrl</kbd> + <kbd>e</kbd>    | Move
  the cursor to the end of the current input field                                |\n|
  <kbd>Up</kbd>/<kbd>Down</kbd>     | Scroll license list when focused                                                     |\n\nNote
  that the form should be valid in order to be able to go to the Confirm window. If
  there are some errors in the input, you could see details about these errors in
  the `Status` section of the form.\n\n#### TUI script command [↑](#structure)\n\nSee
  [CLI description](#cli-script-command-) of the `summon script` command.\n\n####
  TUI show command [↑](#structure)\n\nThese commands display the list of supported
  GHC versions or Licenses. Also, when the license name is specified the window with
  the scrollable content of the License text is shown.\n\n### CLI [↑](#structure)\n\n####
  CLI new command [↑](#structure)\n\nIn CLI mode of operation Summoner asks about
  every project setting. Most of the questions contain a default value, so you can
  press <kbd>Enter</kbd> to choose the default value.\nIf some option is specified
  via a configuration file or CLI arguments, then the question is skipped and the
  predefined value is used.\n\n#### CLI script command [↑](#structure)\n\nThis command
  creates minimal `cabal` or `stack` script file which allows you to save some keystrokes
  and eliminates the need to remember magic words for scripts.\n\n**Cabal example:**
  `summon script cabal -n Main.hs` generates executable file `Main.hs` with the following
  content:\n\n```haskell\n#!/usr/bin/env cabal\n{- cabal:\nbuild-depends:\n  , base
  ^>= 4.12.0.0\n-}\n\nmain :: IO ()\nmain = putStrLn \"Hello, World!\"\n```\n\n**Stack
  example:** `summon script stack -n Main.hs` generates executable file `Main.hs`
  with the following content:\n\n```haskell\n#!/usr/bin/env stack\n{- stack\n  --resolver
  lts-13.16\n  script\n  --package base\n-}\n\nmain :: IO ()\nmain = putStrLn \"Hello,
  World!\"\n```\n\n#### CLI show command [↑](#structure)\n\nThese commands display
  the list of supported GHC versions, or Licenses. Also, when the license name is
  specified, the content of the License is outputted to the terminal.\n\n## FAQ [↑](#structure)\n\n>
  I want to use HTTPS remote for the created GitHub project, but it creates SSH one.
  How should I fix this?\n\nWe are using `hub` tool to create the projects at GitHub.
  It uses SSH so that you would get the remote links in the following format:\n\n```\ngit@github.com:user/repo.git\n```\n\nWe
  can not change or configure this behaviour, but there are several workarounds in
  case you _need_ to use HTTPS link for the remote.\n\n1. Change the remote of the
  repository after its creation:\n   ```\n   git remote set-url origin https://github.com/user/repo.git\n
  \  ```\n2. Change `hub` configurations globally. Simply run the following command:\n
  \  ```shell\n   git config --global hub.protocol https\n   ```\n3. Alternatively,
  change `hub` configurations for a single session:\n   ```\n   export HUB_PROTOCOL=\"https\"\n
  \  ```\n\n## For Developers [↑](#structure)\n\nIf you'd like to take part in the
  development processes, here are a few things to keep in mind:\n\n* Summoner is a
  multi-package project which has two packages inside: `summoner-cli` and `summoner-tui`.
  We are supporting the same functionality in both of them, so, if it's possible,
  you should add/change the code in both of the packages.\n* Summoner uses the custom
  prelude [`relude`](https://github.com/kowainik/relude).\n* We are using the [Kowainik
  style guide](https://github.com/kowainik/org/blob/master/style-guide.md#haskell-style-guide).\n*
  To sum up, [here is the Contributing guide](https://github.com/kowainik/org/blob/master/CONTRIBUTING.md#contributing-to-the-kowainik-repositories)
  we use across the repositories.\n* This project is contributor-friendly, so be kind
  to other people working on the project.\n\n### Dependencies [↑](#structure)\n\nOn
  Linux, to build the `summoner-tui` you'll need to have `libtinfo` installed. The
  easiest way to get this is from your system's package manager and is usually available
  as the package `libtinfo-dev`.\n\n### Build [↑](#structure)\n\nTo build the project
  you can use the following commands:\n\n```shell=\ncabal new-build all\n```\n\nfor
  Cabal and\n\n```shell=\nstack build\n```\n\nfor Stack.\n\n### Test [↑](#structure)\n\nSummoner
  uses the golden tests technique for assuring the correctness of the generated files.
  For this purpose, we have [the `golden` folder](https://github.com/kowainik/summoner/tree/master/summoner-cli/test/golden)
  with two sample projects to test against.\n\nTo actually run tests you need to run:\n\n```shell\ncabal
  new-test all\n```\n\nor\n\n```shell\nstack test\n```\n\n### Run [↑](#structure)\n\nBuilding
  Summoner with the recommended method creates two executables: `summon` and `summon-tui`.
  To run the compiled executable you can use the following commands:\n\n```shell\ncabal
  new-exec summon -- SOME_COMMAND\ncabal new-exec summon-tui -- SOME_COMMAND\n```\n\nor\n\n```shell\nstack
  exec summon -- SOME_COMMAND\nstack exec summon-tui -- SOME_COMMAND\n```\n\n## Changelog
  [↑](#structure)\n\nEach package has its own changelog:\n\n* [Summoner changelog](https://github.com/kowainik/summoner/blob/master/summoner-cli/CHANGELOG.md#changelog).\n*
  [Summoner-TUI changelog](https://github.com/kowainik/summoner/blob/master/summoner-tui/CHANGELOG.md#changelog).\n\n##
  Acknowledgments [↑](#structure)\n\nThis project was inspired by [Aelve/new-hs](https://github.com/aelve/new-hs#readme),\nwhich
  is the tool with the same goal but it's only for creating cabal projects.\n\nIcons
  made by [Nikita Golubev](https://www.flaticon.com/authors/nikita-golubev)\nfrom
  [Flaticon](https://www.flaticon.com/) is licensed by\n[CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/).\n"
license-name: MPL-2.0
