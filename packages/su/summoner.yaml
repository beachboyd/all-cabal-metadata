homepage: https://github.com/kowainik/summoner
changelog-type: markdown
hash: a78ff0277d62cb1afbaacbdcbbaae284ef5a577e92d08f73597310d5f8f528e5
test-bench-deps:
  tasty-hedgehog: -any
  summoner: -any
  hedgehog: -any
  base-noprelude: -any
  relude: -any
  tasty: -any
  tomland: -any
maintainer: xrom.xkov@gmail.com
synopsis: Tool for creating completely configured production Haskell projects.
changelog: ! "# Summoner\n\n1.1.0.1\n=======\n\n* Bump up `relude` version to `0.3.0`.\n*
  [#146](https://github.com/kowainik/summoner/issues/146):\n  Migrate to `base-noprelude`.\n\n1.1.0\n=====\n\n*
  [#128](https://github.com/kowainik/summoner/issues/128):\n  __Important:__ Replace
  `summon` with `summon new` command.\n  To create a project now the following command
  should be used:\n  ```\n  summon new my-project\n  ```\n* [#82](https://github.com/kowainik/summoner/issues/82):\n
  \ Add stackage badges.\n* [#109](https://github.com/kowainik/summoner/issues/109):\n
  \ Fix travis cache directories.\n* [#117](https://github.com/kowainik/summoner/issues/117):\n
  \ Step into created project properly\n* [#110](https://github.com/kowainik/summoner/issues/110):\n
  \ Print executing command.\n* [#91](https://github.com/kowainik/summoner/issues/91):\n
  \ Add warning fields for ghc.\n* [#90](https://github.com/kowainik/summoner/issues/90):\n
  \ Add TOML test.\n* [#120](https://github.com/kowainik/summoner/issues/120):\n  Bump
  up dependencies.\n* [#58](https://github.com/kowainik/summoner/issues/58):\n  Make
  `Licence` type safer.\n* [#124](https://github.com/kowainik/summoner/issues/124):\n
  \ Print directories bold.\n* [#130](https://github.com/kowainik/summoner/issues/130):\n
  \ Show git revision version under `--version` command.\n* [#63](https://github.com/kowainik/summoner/issues/63):\n
  \ Add `show ghc`, `show license` and `show license <LICENSE_NAME>` commands.\n*
  [#122](https://github.com/kowainik/summoner/issues/122):\n  Remove github link from
  CHANGELOG when github is not chosen.\n* [#35](https://github.com/kowainik/summoner/issues/35):\n
  \ Add config option to add `.stylish-haskell.yaml` to your project\n  (via URL or
  file path).\n* Bump up `tomland` version to `0.4.0`.\n* [#138](https://github.com/kowainik/summoner/issues/138):\n
  \ Remove traces of GitHub from `.cabal` file when GitHub integration is disabled.\n*
  [#31](https://github.com/kowainik/summoner/issues/31):\n  Add config option to add
  `CONTRIBUTING.md` to your project\n  (via URL or file path).\n* [#27](https://github.com/kowainik/summoner/issues/27):\n
  \ Remove `b` script.\n\n1.0.6\n=====\n\n* Use `relude` instead of `universum`.\n*
  [#105](https://github.com/kowainik/summoner/issues/105):\n  Add `--ignore-config`
  option.\n\n1.0.5\n=====\n\n* [#100](https://github.com/kowainik/summoner/issues/100):\n
  \ Bump up to `ghc-8.4.3`. Add support for `Ghc843` in code\n  and make it default.\n*
  Make CI badges in README be shown depending on the chosen options.\n* [#99](https://github.com/kowainik/summoner/issues/99):\n
  \ UseTravis-specific env variable `TRAVIS_BUILD_DIR` in created travis file.\n*
  [#97](https://github.com/kowainik/summoner/issues/97):\n  Add cabal to created travis
  file.\n* [#96](https://github.com/kowainik/summoner/issues/96):\n  Add option to
  choose `cabal`, `stack` or both.\n\n1.0.4\n=====\n* Bump up `tomland` to version
  `0.3`.\n\n1.0.3\n=====\n* [#92](https://github.com/kowainik/summoner/issues/92):\n
  \ Remove -fhide-source-paths from generated stack yaml files for\n  GHC < 8.2\n\n1.0.2\n=====\n\n*
  [#87](https://github.com/kowainik/summoner/issues/87):\n  Fix Travis matrix for
  not default `ghc` versions.\n\n1.0.1\n=====\n\n* [#85](https://github.com/kowainik/summoner/issues/85):\n
  \ Remove `base-noprelude` from dependencies.\n\n1.0.0\n=====\n\n* __Important:__
  Rename `hs-init` to `summoner`. Transform the script into the package.\n* [#54](https://github.com/kowainik/summoner/issues/54):\n
  \  Rename `on` and `off` commands to `with` and `without`.\n* [#48](https://github.com/kowainik/summoner/issues/48):\n
  \ - Add ability to write configurations file. Remove `Targets` data type.\n    Use
  `Config` instead for default, file and CLI configurations.\n* [#60](https://github.com/kowainik/summoner/issues/60):\n
  \ Use custom prelude `universum`.\n* [#39](https://github.com/kowainik/summoner/issues/39):\n
  \ Add option to use custom prelude in CLI and in `.toml` configuration.\n* [#38](https://github.com/kowainik/summoner/issues/38):\n
  \ Add option to add default extensions to `.toml` config.\n* [#62](https://github.com/kowainik/summoner/issues/62):\n
  \ Make some parts of output not only colorful, but also bold. This makes output
  prettier.\n* [#67](https://github.com/kowainik/summoner/issues/67):\n  Add `Aswer`
  data type to handle yes-no CLI questions.\n* [#61](https://github.com/kowainik/summoner/issues/61):\n
  \ Add CLI `--version` option.\n* [#73](https://github.com/kowainik/summoner/issues/73):\n
  \ Make custom prelude be table in toml.\n* [#74](https://github.com/kowainik/summoner/issues/74):\n
  \ Print hierarchy tree for the created project.\n\n# hs-init\n\n0.0.4\n=====\n*
  Now works on windows systems as well\n* Add powershell install script for Windows\n\n\n0.0.3\n=====\n\n*
  [#45](https://github.com/vrom911/hs-init/issues/45):\n  Support AppVeyor CI for
  created projects.\n\n0.0.2\n=====\n\n* Use metavar for on-off commands.\n* Upgrade
  `lts` to `10.3`, use `ghc 8.2.2` as default value.\n\n0.0.1\n=====\n\n* [#36](https://github.com/vrom911/hs-init/issues/36):\n
  \ Add option for creating private repositories — `-p | --private`.\n"
basic-deps:
  bytestring: ^>=0.10.8.2
  time: ^>=1.8
  text: ^>=1.2.3.0
  summoner: -any
  generic-deriving: ^>=1.12.2
  filepath: ^>=1.4.1.2
  gitrev: ^>=1.3.1
  process: ^>=1.6.1.0
  base-noprelude: ! '>=4.10 && <5'
  ansi-terminal: ^>=0.8.0.4
  relude: ! '>=0.3.0 && <0.4'
  optparse-applicative: ^>=0.14.2.0
  aeson: ! '>=1.2.4.0 && <1.5'
  neat-interpolation: ^>=0.3.2.2
  tomland: ^>=0.4.0
  directory: ^>=1.3.0.2
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.0.5'
- '1.0.6'
- '1.1.0'
- '1.1.0.1'
author: Kowainik
latest: '1.1.0.1'
description-type: markdown
description: ! "# \U0001F52E Summoner\n\n![wizard](https://user-images.githubusercontent.com/8126674/44388234-320aac00-a55a-11e8-879d-5dca68512031.png)\n[![Build
  status](https://secure.travis-ci.org/kowainik/summoner.svg)](http://travis-ci.org/kowainik/summoner)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/summoner/blob/master/LICENSE)\n[![Hackage](https://img.shields.io/hackage/v/summoner.svg)](https://hackage.haskell.org/package/summoner)\n[![Stackage
  LTS](http://stackage.org/package/summoner/badge/lts)](http://stackage.org/lts/package/summoner)\n[![Stackage
  Nightly](http://stackage.org/package/summoner/badge/nightly)](http://stackage.org/nightly/package/summoner)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/summoner.svg)](http://packdeps.haskellers.com/reverse/summoner)\n\n>
  _So many of our dreams at first seem impossible, then they seem improbable, and\n>
  then, when we summon the will, they soon become inevitable._\n>\n> Christopher Reeve\n\nSummoner
  is the tool for creating fully configured production Haskell projects.\n\n## Demo\n\n[![asciicast](https://asciinema.org/a/198918.png)](https://asciinema.org/a/198918)\n\n##
  Getting started\n\n### Prerequisites\n\nTo start using it make sure you have the
  next tools installed on your machine:\n\n* [`Stack`](http://haskellstack.org) or
  [`cabal`](https://www.haskell.org/cabal/)\n* [`git`](https://git-scm.com)\n* [`hub`](https://github.com/github/hub)\n*
  [`curl`](https://curl.haxx.se)\n\n### Installation\n\nThe installation process can
  be done with the one simple command:\n\n    $ cabal new-install summoner\n\nor\n\n
  \   $ stack install summoner\n\nor directly from GitHub.\n\nYou can turn on the
  bash auto-completion by running the following command:\n\n```\n$ source <(summon
  --bash-completion-script `which summon`)\n```\n\nAfter that, you can call `summon`
  with the required command. To create a\nproject, use `summon new` command specifying
  the prefered CLI options, follow\nthe instructions during the interactive process
  of the project creation, and a\nnew project would be created in a subfolder as well
  as a repository under your\nGitHub account (if requested).\n\n### Usage\n\nThere
  are several options how to set particular configurations for the new projects:\n\n1.
  Default configuration file (`~/.summoner.toml`).\n2. Explicitly specified configuration
  file by `--file FILENAME` option (used\n   instead of the default one if specified).\n3.
  Options that are stated by CLI arguments.\n4. Interactively inputed answers during
  work of the `summon` command\n  (for the options that were not specified on previous
  steps).\n\nSo, the configuration uses [`Partial Options Monoid Pattern`](https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67).\n\nIf
  none of the mentioned above cases used then the configuration will be built interactively.\n\n####
  Configurations\n\n##### `.toml` files:\n\nHere is the list of the options that could
  be configured for your needs:\n\n###### Global keys\n\n* `cabal` – `true` if you
  want to build you project with `cabal`,\n             `false` if you don't. If not
  specified it would be asked during each run of the `summoner`.\n* `stack` – `true`
  if you want to build your project with `stack`,\n             `false` if you don't.
  If not specified it would be asked during each run of the `summoner`.\n* `owner`
  – `GitHub` login.\n* `fullName` – full name.\n* `email` – e-mail address.\n* `license`
  – license (possible options: `MIT`, `BSD2`, `BSD3`, `GPL-2`, `GPL-3`,\n              `LGPL-2.1`,
  `LGPL-3`, `AGPL-3`, `Apache-2.0`, `MPL-2.0`).\n* `ghcVersions` – `summoner` uses
  default `GHC-8.2.2`. But additionally you can specify other versions.\n                   For
  each version `x.y.z` the `stack-x.y.z.yaml` will be created.\n* `github` – `true`
  if you want to turn on `GitHub` integration by default,\n             `false` if
  you don't. If not specified it would be asked during each run of the `summoner`.\n*
  `travis` – `true` if you want to turn on `Travis` integration by default,\n             `false`
  if you don't. Ignored if `github = false`.\n             If not specified it would
  be asked during each run of the `summoner`.\n* `appveyor` – `true` if you want to
  turn on `AppVeyor` integration by default,\n               `false` if you don't.
  Ignored if `github = false`.\n               If not specified it would be asked
  during each run of the `summoner`.\n* `private` – `true` if you want to create private
  repositories by default,\n              `false` if you don't. Ignored if `github
  = false`.\n              If not specified it would be asked during each run of the
  `summoner`.\n* `lib` – `true` if you want to create `src` folder with dummy `Lib.hs`
  file and library target by default,\n          `false` if you don't. If not specified
  it would be asked during each run of the `summoner`.\n* `exe` – `true` if you want
  to create `app` folder with dummy `Main.hs` file and executable target by default,\n
  \         `false` if you don't. If not specified it would be asked during each run
  of the `summoner`.\n* `test` – `true` if you want to create `test` folder with dummy
  `Spec.hs` file and test target by default,\n          `false` if you don't. If not
  specified it would be asked during each run of the `summoner`.\n* `bench` – `true`
  if you want to create `benchmark` folder  with `Main.hs` file with [`gauge`](https://hackage.haskell.org/package/gauge)\n
  \           library usage example by default,\n          `false` if you don't. If
  not specified it would be asked during each run of the `summoner`.\n* `extensions`
  – List of the default extensions to add into `default-extensions` section in the
  `.cabal`.\n* `warnings` – List of the default checks and warnings to add into `ghc-options`
  section in the `.cabal`.\n* `stylish.*` — `stylish.file` to provide the absolute
  file path to the\n  `.stylish-haskell.yaml` file to use in the project. `stylish.url`
  to provide\n  the link to the `.stylish-haskell.yaml` file to use in the project.
  In case of\n  the absense or wrong path/link no `.stylish-haskell.yaml` file is
  created.\n* `contributing.*` — `contributing.file` to provide the absolute file
  path to the\n  `CONTRIBUTING.md` file to use in the project. `contributing.url`
  to provide\n  the link to the `CONTRIBUTING.md` file to use in the project. In case
  of\n  the absense or wrong path/link no `CONTRIBUTING` file is created.\n\n######
  Custom prelude options\n\nShould be specified inside `[prelude]` table.\n\n* `package`
  – Name of the package of the custom prelude you'd like to use in the project (doesn't
  work without `module` field).\n* `module` – Name of the module of the custom prelude
  you'd like to use in the project (doesn't work without `package` field).\n\n######
  Examples\n\nSee an example of [the configuration for projects of the `Kowainik`
  organization](https://github.com/kowainik/org/blob/master/.summoner.toml).\n\nBy
  default, the `summoner` looks for the configuration file (`.summoner.toml`) in home
  directory.\n\nThe other way to specify some particular `.toml` file is `summon new
  PROJECTNAME --file FILEPATH` command.\n\n##### CLI\n\nAvailable commands:\n\n```\nUsage:\n
  \ summon COMMAND\n      Set up your own Haskell project\n\nAvailable commands:\n
  \ new                      Create a new Haskell project\n  show                     Show
  available licenses or ghc versions\n\nAvailable global options:\n  -h, --help               Show
  this help text\n  -v, --version            Show summoner's version\n```\n\n**`summon
  new`** command:\n\n```\nUsage:\n  summon new PROJECT_NAME [--cabal] [--stack] [--ignore-config]\n
  \            [with [OPTIONS]] [without [OPTIONS]]\n             [-f|--file FILENAME]\n
  \            [--prelude-package PACKAGE_NAME]\n             [--prelude-module MODULE_NAME]\n\nAvailable
  options:\n  -h, --help               Show this help text\n  --ignore-config          Ignore
  configuration file\n  --cabal                  Cabal support for the project\n  --stack
  \                 Stack support for the project\n  -f, --file FILENAME      Path
  to the toml file with configurations. If not\n                           specified
  '~/.summoner.toml' will be used if present\n  --prelude-package PACKAGE_NAME\n                           Name
  for the package of the custom prelude to use in\n                           the
  project\n  --prelude-module MODULE_NAME\n                           Name for the
  module of the custom prelude to use in\n                           the project\n\nAvailable
  commands:\n  with                     Specify options to enable\n  without                  Specify
  options to disable\n\nAvailable command options:\n  -h, --help               Show
  this help text\n  -g, --github             Github integration\n  -p, --private            Create
  private GitHub repository\n  -c, --travis             Travis CI integration\n  -w,
  --app-veyor          AppVeyor CI integration\n  -l, --library            Library
  target\n  -e, --exec               Executable target\n  -t, --test               Tests\n
  \ -b, --benchmark          Benchmarks\n```\n\n**`summon show`** command:\n\n```\nUsage:\n
  \ summon show COMMAND\n      Show supported licenses or ghc versions\n\nAvailable
  commands:\n  ghc                      Show available ghc versions\n  license                  Show
  available licenses\n  license [LICENSE_NAME]   Show specific license text\n\nAvailable
  options:\n  -h, --help               Show this help text\n```\n\nThe options to
  be enabled/disabled can be specified while running the command.\nIf any of the applicable
  command options wasn't tagged as enabled/disabled, then\nthe question is asked during
  the work of the tool.\n\nFor example,\n\n```\n  summon new my-project with -letgcpw
  without -b --prelude-package relude --prelude-module Relude\n```\n\ncreates the
  fully functional project which uses custom prelude `relude`, contains\nlibrary,
  executable file, tests and create private repository on [github](https://github.com)\nintegrated
  with `Travis-CI`, `AppVeyor-CI`, but benchmarks won't be attached to this one.\n\nBut
  when calling this command\n\n```\n  summon new my-project\n```\n\nthe tool asks
  about every particular option, rather you'd like to have it\nor not in your project.\n\n##
  Features\n\nIf you're running the `summoner` with all options enabled a project
  with the following\nhierarchy is created:\n\n```\nproject-name\n├── app\n│   └──
  Main.hs\n├── benchmark\n│   └── Main.hs\n├── src\n│   ├── ProjectName.hs\n│   └──
  Prelude.hs\n├── test\n│   └── Spec.hs\n├── CHANGELOG.md\n├── LICENSE\n├── project-name.cabal\n├──
  README.md\n├── Setup.hs\n├── stack.yaml\n├── appveyor.yml\n├── .git\n├── .gitignore\n└──
  .travis.yml\n```\n\nMoreover, a repository with one commit at master is added with
  enabled Travis CI for that.\n\n## GHC options\n\nThe `-Wall` option is added to
  every stanza.\n\nThe following warning checks are added by default to executable,
  tests and benchmark stanzas:\n\n    -threaded\n    -rtsopts\n    -with-rtsopts=-N\n\nIf
  warnings are not explicitly stated in the configuration file, then the\nfollowing
  ghc-options are added to all stanzas.\n\n    -Wincomplete-uni-patterns\n    -Wincomplete-record-updates\n
  \   -Wcompat\n    -Widentities\n    -Wredundant-constraints      (ghc >= 8.0)\n
  \   -fhide-source-paths          (ghc >= 8.2.2)\n    -Wmissing-export-lists       (ghc
  >= 8.4.1)\n    -Wpartial-fields             (ghc >= 8.4.1)\n\n## Change log\n\n[List
  of changes](CHANGELOG.md).\n\n## Acknowledgments\n\nThis project was inspired by
  [Aelve/new-hs](https://github.com/aelve/new-hs#readme),\nwhich is the tool with
  the same goal but it's only for creating cabal projects.\n\nIcons made by [Nikita
  Golubev](https://www.flaticon.com/authors/nikita-golubev)\nfrom [Flaticon](https://www.flaticon.com/)
  is licensed by\n[CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/).\n"
license-name: MPL-2.0
