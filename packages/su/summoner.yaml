homepage: https://github.com/kowainik/summoner
changelog-type: markdown
hash: a12957ae8e11d4d4623fb676e6c8b19f90612bbe55ba5f4aa5529dc14b7bfee1
test-bench-deps:
  tasty-hedgehog: -any
  summoner: -any
  universum: -any
  hedgehog: -any
  base-noprelude: -any
  tasty: -any
maintainer: xrom.xkov@gmail.com
synopsis: Tool for creating completely configured production Haskell projects.
changelog: ! "# Summoner\n\n1.0.0\n=====\n\n* __Important:__ Rename `hs-init` to `summoner`.
  Transform the script into the package.\n* [#54](https://github.com/kowainik/summoner/issues/54):\n
  \  Rename `on` and `off` commands to `with` and `without`.\n* [#48](https://github.com/kowainik/summoner/issues/48):\n
  \ - Add ability to write configurations file. Remove `Targets` data type.\n    Use
  `Config` instead for default, file and CLI configurations.\n* [#60](https://github.com/kowainik/summoner/issues/60):\n
  \ Use custom prelude `universum`.\n* [#39](https://github.com/kowainik/summoner/issues/39):\n
  \ Add option to use custom prelude in CLI and in `.toml` configuration.\n* [#38](https://github.com/kowainik/summoner/issues/38):\n
  \ Add option to add default extensions to `.toml` config.\n* [#62](https://github.com/kowainik/summoner/issues/62):\n
  \ Make some parts of output not only colorful, but also bold. This makes output
  prettier.\n* [#67](https://github.com/kowainik/summoner/issues/67):\n  Add `Aswer`
  data type to handle yes-no CLI questions.\n* [#61](https://github.com/kowainik/summoner/issues/61):\n
  \ Add CLI `--version` option.\n* [#73](https://github.com/kowainik/summoner/issues/73):\n
  \ Make custom prelude be table in toml.\n* [#74](https://github.com/kowainik/summoner/issues/74):\n
  \ Print hierarchy tree for the created project.\n\n# hs-init\n\n0.0.4\n=====\n*
  Now works on windows systems as well\n* Add powershell install script for Windows\n\n\n0.0.3\n=====\n\n*
  [#45](https://github.com/vrom911/hs-init/issues/45):\n  Support AppVeyor CI for
  created projects.\n\n0.0.2\n=====\n\n* Use metavar for on-off commands.\n* Upgrade
  `lts` to `10.3`, use `ghc 8.2.2` as default value.\n\n0.0.1\n=====\n\n* [#36](https://github.com/vrom911/hs-init/issues/36):\n
  \ Add option for creating private repositories — `-p | --private`.\n"
basic-deps:
  bytestring: -any
  time: -any
  text: -any
  summoner: -any
  universum: ! '>=1.2.0'
  generic-deriving: -any
  filepath: -any
  process: -any
  base-noprelude: ! '>=4.9 && <5'
  ansi-terminal: -any
  optparse-applicative: -any
  aeson: -any
  neat-interpolation: -any
  tomland: -any
  directory: -any
all-versions:
- '1.0.0'
author: Kowainik
latest: '1.0.0'
description-type: markdown
description: ! "# :crystal_ball: Summoner\n\n[![Build status](https://secure.travis-ci.org/kowainik/summoner.svg)](http://travis-ci.org/kowainik/summoner)\n[![Windows
  build status](https://ci.appveyor.com/api/projects/status/github/kowainik/summoner?branch=master&svg=true)](https://ci.appveyor.com/project/kowainik/summoner)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/summoner/blob/master/LICENSE)\n[![Hackage](https://img.shields.io/hackage/v/summoner.svg)](https://hackage.haskell.org/package/summoner)\n\nThis
  is tool for creating completely configured production Haskell projects.\nConsider
  that it's using [`Stack`](http://haskellstack.org) for\ncreating and setting up
  projects.\n\n## Demo\n\n[![asciicast](https://asciinema.org/a/Wf8ZOMAZSUFyAJob70pwM6rZ1.png](https://asciinema.org/a/Wf8ZOMAZSUFyAJob70pwM6rZ1)\n\n##
  Getting started\n\n### Prerequisites\n\nTo start using it make sure you have next
  tools installed on your machine:\n* [`Stack`](http://haskellstack.org)\n* [`git`](https://git-scm.com)\n*
  [`hub`](https://github.com/github/hub)\n\n### Installation\n\nInstallation process
  can be done with one simple command:\n\n    $ stack install summoner\n\nYou can
  turn on the bash auto-completion by running the following command:\n\n```\n$ source
  <(summon --bash-completion-script `which summon`)\n```\n\nAfter that you can call
  `summon` with required command line options, follow\nthe instructions that will
  appear, and a new project would be created in a subfolder\nas well as a repository
  under your github account (if requested).\n\n### Usage\n\nThere are several options
  how to set particular configurations:\n\n1. Default configuration file (`~/.summoner.toml`).\n2.
  Explicitly specified configuration file by `--file FILENAME` option (used instead
  of default one if specified).\n3. Options that are stated by CLI arguments.\n4.
  Interactively inputed answers during work of the `summon` command\n  (for the options
  that were not specified on previous steps).\n\nSo the configuration uses [`Partial
  Options Monoid Pattern`](https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67).\n\nIf
  none of the mentioned above cases used then the configuration will be built interactively.\n\n####
  Configurations\n\n##### `.toml` files:\n\nHere is the list of the options that could
  be configured for your needs:\n\n###### Global keys\n\n* `owner` – `GitHub` login.\n*
  `fullName` – full name.\n* `email` – e-mail address.\n* `license` – license (possible
  options: `MIT`, `BSD2`, `BSD3`, `GPL-2`, `GPL-3`,\n              `LGPL-2.1`, `LGPL-3`,
  `AGPL-3`, `Apache-2.0`, `MPL-2.0`).\n* `ghcVersions` – `summoner` uses default `GHC-8.2.2`.
  But additionally you can specify other versions.\n                   For each version
  `x.y.z` the `stack-x.y.z.yaml` will be created.\n* `github` – `true` if you want
  to turn on `GitHub` integration by default,\n             `false` if you don't.
  If not specified it would be asked during each run of the `summoner`.\n* `travis`
  – `true` if you want to turn on `Travis` integration by default,\n             `false`
  if you don't. Ignored if `github = false`.\n             If not specified it would
  be asked during each run of the `summoner`.\n* `appveyor` – `true` if you want to
  turn on `AppVeyor` integration by default,\n               `false` if you don't.
  Ignored if `github = false`.\n               If not specified it would be asked
  during each run of the `summoner`.\n* `private` – `true` if you want to create private
  repositories by default,\n              `false` if you don't. Ignored if `github
  = false`.\n              If not specified it would be asked during each run of the
  `summoner`.\n* `bscript` – `true` if you want to include [build script](#build-script)
  by default,\n              `false` if you don't. If not specified it would be asked
  during each run of the `summoner`.\n* `lib` – `true` if you want to create `src`
  folder with dummy `Lib.hs` file and library target by default,\n          `false`
  if you don't. If not specified it would be asked during each run of the `summoner`.\n*
  `exe` – `true` if you want to create `app` folder with dummy `Main.hs` file and
  executable target by default,\n          `false` if you don't. If not specified
  it would be asked during each run of the `summoner`.\n* `test` – `true` if you want
  to create `test` folder with dummy `Spec.hs` file and test target by default,\n
  \         `false` if you don't. If not specified it would be asked during each run
  of the `summoner`.\n* `bench` – `true` if you want to create `benchmark` folder
  \ with `Main.hs` file with dummy `gauge` library usage example by default,\n          `false`
  if you don't. If not specified it would be asked during each run of the `summoner`.\n*
  `extensions` – List of the default extensions to add into `default-extensions` section
  in the `.cabal`.\n\n###### Custom prelude options\n\nShould be specified inside
  `[prelude]` table.\n\n* `package` – Name of the package of the custom prelude you'd
  like to use in the project (doesn't work without `module` field).\n* `module` –
  Name of the module of the custom prelude you'd like to use in the project (doesn't
  work without `package` field).\n\n###### Examples\n\nSee example of [configuration
  for projects of `Kowainik` organization](https://github.com/kowainik/org/blob/master/summoner.toml).\n\nBy
  default the `summoner` will look for the configuration file (`.summoner.toml`) in
  home directory.\n\nThe other way to specify some particular `.toml` file is `summon
  PROJECTNAME --file FILEPATH` command.\n\n##### CLI\n\nSee the basic usage syntax
  below (you can check it out with `summon --help` command):\n\n```\nsummon PROJECT_NAME
  [with [OPTIONS]] [without [OPTIONS]]\n       [-f|--file FILENAME]  [--prelude-package
  PACKAGE_NAME]\n       [--prelude-module MODULE_NAME]\n\nAvailable global options:\n
  \ -h, --help               Show this help text\n  -v, --version            Show
  summoner's version\n  -f, --file FILENAME      Path to the toml file with configurations.
  If not\n                           specified '~/.summoner.toml' will be used if
  present\n  --prelude-package PACKAGE_NAME\n                           Name for the
  package of the custom prelude to use in\n                           the project\n
  \ --prelude-module MODULE_NAME\n                           Name for the module of
  the custom prelude to use in\n                           the project\n\nAvailable
  commands:\n  with                     Specify options to enable\n  without                  Specify
  options to disable\n\nAvailable command options:\n  -h,--help                Show
  this help text\n  -g, --github             Github integration\n  -p, --private            Create
  private GitHub repository\n  -c, --travis             Travis CI integration\n  -w,
  --app-veyor          AppVeyor CI integration\n  -s, --script             Build script\n
  \ -l, --library            Library target\n  -e, --exec               Executable
  target\n  -t, --test               Tests\n  -b, --benchmark          Benchmarks\n\n```\n\nThe
  options to be enabled/disabled can be specified while running the command.\nIf any
  of applicable command options wasn't tagged as enabled/disabled then\nthe question
  will be asked during the work of the script.\n\nFor example,\n\n```\n  summon newProject
  with -letgcspw without -b --prelude-package universum --prelude-module Universum\n```\nwill
  create fully functional project which uses custom prelude `universum`, contains\nlibrary,
  executable file, tests, [build script](#build-script)\nand create private repository
  on [github](https://github.com)\nintegrated with `Travis-CI`, `AppVeyor-CI`, but
  benchmarks won't be attached to this one.\n\nBut when calling this command\n\n```\n
  \ summon newProject\n```\n\nthe tool will ask about every particular option, rather
  you'd like to have it\nor not in your project.\n\n### Note\n\nThis tool was tested
  with next settings:\n\n    stack version 1.6.1\n    git   version 2.11.0\n    hub
  \  version 2.2.9\n\n## Features\n\nIf you're running the `summoner` with all options
  enabled a project with the following\nhierarchy will be created:\n\n```\nproject-name\n├──
  app\n│   └── Main.hs\n├── benchmark\n│   └── Main.hs\n├── src\n│   ├── ProjectName.hs\n│  
  └── Prelude.hs\n├── test\n│   └── Spec.hs\n├── CHANGELOG.md\n├── LICENSE\n├── project-name.cabal\n├──
  README.md\n├── Setup.hs\n├── stack.yaml\n├── appveyor.yml\n├── .git\n├── .gitignore\n└──
  .travis.yml\n```\nand also repository with one commit at master will be added with
  enabled `Travis-CI` for that.\n\n### Build script\n\nThe `b` script builds the project
  in a way that is convenient for developers.\nIt passes the right flags into right
  places, builds the project with --fast,\ntidies up and highlights error messages
  in GHC output.\n\n#### Usage\n\n```\n  ./b                 build whole project with
  all targets\n  ./b -c              do stack clean\n  ./b -t              build and
  run tests\n  ./b -b              build and run benchmarks\n  ./b --nix           use
  nix to build package\n```\n\n## Change log\n\n[List of changes](https://github.com/kowainik/summoner/blob/master/CHANGELOG.md).\n\n##
  Acknowledgments\n\nThis project was inspired by [Aelve/new-hs](https://github.com/aelve/new-hs#readme),\nwhich
  is the tool with the same goal but the difference is that it's using\n[`cabal`](https://www.haskell.org/cabal/)
  for creating projects.\n"
license-name: MPL-2.0
