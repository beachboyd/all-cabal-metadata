homepage: https://github.com/cr-org/supernova
changelog-type: ''
hash: a20f5996155353df9004f90e1fc18158cebee10940001fe36f22177fbdaa5b0b
test-bench-deps:
  bytestring: -any
  supernova: -any
  base: -any
  text: -any
  async: -any
  aeson: -any
  streamly: -any
maintainer: gabriel.volpe@chatroulette.com
synopsis: Apache Pulsar client for Haskell
changelog: ''
basic-deps:
  bifunctor: '>=0.1.0 && <0.2'
  exceptions: '>=0.10.4 && <0.11'
  bytestring: '>=0.10.10 && <0.11'
  unliftio: '>=0.2.13 && <0.3'
  base: '>=4.13.0 && <4.14'
  managed: '>=1.0.7 && <1.1'
  text: '>=1.2.4 && <1.3'
  crc32c: '>=0.0.0 && <0.1'
  network: '>=3.1.2 && <3.2'
  lens-family-core: '>=2.0.0 && <2.1'
  proto-lens: '>=0.7.0 && <0.8'
  binary: '>=0.8.7 && <0.9'
  logging: '>=3.0.5 && <3.1'
  proto-lens-runtime: '>=0.7.0 && <0.8'
all-versions:
- 0.0.1
- 0.0.2
author: Gabriel Volpe
latest: 0.0.2
description-type: markdown
description: "supernova\n=========\n\n[![CI Status](https://github.com/cr-org/supernova/workflows/Haskell%20CI/badge.svg)](https://github.com/cr-org/supernova/actions)\n\n⚠️
  \ **it is still very much under development \U0001F6A7 so use it at your own risk**
  ⚠️\n\nA *supernova* is a powerful and luminous stellar explosion. This transient
  astronomical event occurs during the last evolutionary stages of a massive star
  or when a white dwarf is triggered into runaway nuclear fusion. The original object,
  called the progenitor, either collapses to a [neutron](https://github.com/cr-org/neutron)
  star or black hole, or is completely destroyed. The peak optical luminosity of a
  supernova can be comparable to that of an entire galaxy before fading over several
  weeks or months.\n\n[![supernova](https://www.jpl.nasa.gov/spaceimages/images/largesize/PIA22352_hires.jpg
  \"Kepler Beyond Planets: Finding Exploding Stars (Type Ia Supernova from a White
  Dwarf Stealing Matter)\")](https://www.jpl.nasa.gov/spaceimages/details.php?id=PIA22352)\n\n###
  Quick Start\n\nThe example located in `test/Main.hs` showcases a consumer & producer
  running concurrently (needs the `async` library).\n\n```haskell\nmain :: IO ()\nmain
  = runPulsar resources $ \\(Consumer {..}, Producer {..}) ->\n  let c = forever $
  fetch >>= \\(Message i m) -> msgDecoder m >> ack i\n      p = forever $ sleep 5
  >> traverse_ produce messages\n  in  concurrently_ c p\n\nresources :: Pulsar (Consumer
  IO, Producer IO)\nresources = do\n  ctx      <- connect defaultConnectData\n  consumer
  <- newConsumer ctx topic \"test-sub\"\n  producer <- newProducer ctx topic\n  return
  (consumer, producer)\n```\n\nA `Message` contains a `MessageID` you need for `ack`ing
  and a payload defined as a lazy `ByteString`.\n\nRun it with the following command:\n\n```shell\ncabal
  new-run supernova-tests\n```\n\nBy default, it logs to the standard output in DEBUG
  level. You can change it by suppling `LogOptions`.\n\n```haskell\nlogOpts :: LogOptions\nlogOpts
  = LogOptions Info StdOut\n\nrunPulsar' logOpts resources\n```\n\n### Streaming\n\nSince
  both consumers and producers operate on any `MonadIO m`, we could leverage some
  streaming libraries. Here's the same example using [streamly](https://hackage.haskell.org/package/streamly).\n\n```haskell\nimport
  \          Streamly\nimport qualified Streamly.Prelude              as S\n\nmain
  :: IO ()\nmain = runPulsar resources $ \\(Consumer {..}, Producer {..}) ->\n  let
  c = forever $ fetch >>= \\(Message i p) -> msgDecoder p >> ack i\n      p = forever
  $ sleep 5 >> traverse_ produce messages\n  in  S.drain . asyncly . maxThreads 10
  $ S.yieldM c <> S.yieldM p\n```\n\n### Development\n\nIt is recommended to use [Cachix](https://app.cachix.org/cache/hpulsar)
  to reduce the compilation time.\n\n```shell\nnix-build\n```\n\nOr within a Nix shell
  (run `nix-shell` at the project's root).\n\n```shell\ncabal new-build\n```\n"
license-name: Apache-2.0
