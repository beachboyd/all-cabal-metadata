homepage: http://github.com/mikeizbicki/subhask
changelog-type: ''
hash: 74ca8f3e3033b86453bef1f2b057ba839ba619632c647c6b93a7cb0ff16ef4f6
test-bench-deps:
  test-framework: ! '>=0.8.0'
  MonadRandom: -any
  base: -any
  test-framework-quickcheck2: ! '>=0.3.0'
  criterion: ==1.1.0.0
  subhask: -any
maintainer: mike@izbicki.me
synopsis: Type safe interface for programming in subcategories of Hask
changelog: ''
basic-deps:
  gamma: ==0.9.0.2
  bytestring: ==0.10.6.0
  MonadRandom: ==0.4
  base: ! '>=4.8 && <4.9'
  semigroups: ==0.16.2.2
  array: ==0.5.1.0
  erf: ==2.0.0.0
  containers: ==0.5.6.2
  lens: ==4.12.3
  cassava: ==0.4.3.1
  ghc-prim: ==0.4.0.0
  monad-primitive: ==0.1
  mtl: ==2.2.1
  approximate: ==0.2.2.1
  parallel: ==3.2.0.6
  deepseq: ==1.4.1.1
  bloomfilter: ==2.0.1.0
  QuickCheck: ==2.8.1
  hmatrix: ==0.16.1.5
  hyperloglog: ==0.3.4
  template-haskell: ==2.10.0.0
  primitive: ==0.6
  vector: ==0.10.12.3
  bytes: ==0.15.0.1
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
author: Mike Izbicki
latest: 0.1.1.0
description-type: markdown
description: ! "# SubHask ![](https://travis-ci.org/mikeizbicki/subhask.svg)\n\nSubHask
  is a radical rewrite of the Haskell [Prelude](https://www.haskell.org/onlinereport/standard-prelude.html).\nThe
  goal is to make numerical computing in Haskell *fun* and *fast*.\nThe main idea
  is to use a type safe interface for programming in arbitrary subcategories of [Hask](https://wiki.haskell.org/Hask).\nFor
  example, the category [Vect](http://ncatlab.org/nlab/show/Vect) of linear functions
  is a subcategory of Hask, and SubHask exploits this fact to give a nice interface
  for linear algebra.\nTo achieve this goal, almost every class hierarchy is redefined
  to be more general.\n\n<!--[MATLAB](http://www.mathworks.com/products/matlab/)/[Octave](https://www.gnu.org/software/octave/),-->\n<!--[R](http://www.r-project.org/),-->\n<!--[Julia](http://julialang.org/);-->\n<!--[Armadillo](http://arma.sourceforge.net/)
  and-->\n<!--[Eigen](http://eigen.tuxfamily.org/).-->\n\n<!--\nHaskell is the most
  fun language I've ever used,\nbut writing numeric applications in standard Haskell
  sucks.\nThe Prelude provides the wrong abstractions for serious number crunching.\nThis
  lack of unifying abstraction means the ecosystem is fragmented;\nevery library redefines
  its own abstractions, and these abstractions are not general enough for other libraries
  to reuse.\nI spent all my time writing plumbing between these libraries, which is
  error prone and soul sucking.\nSubHask removes the need for this plumbing.\nThe
  interface still needs a bit of polish in places,\nbut overall SubHask lets me ignore
  the boring details and focus on getting the math correct.\nFor me, it's making numeric
  Haskell programming as fun as non-numeric Haskell :)\n-->\n\nSubHask is a work in
  progress.\nThis README is intended to be a \"quick start guide\" to get you familiar
  with the current status and major differences from standard Haskell.\n\n### Table
  of contents:\n\n* [Installing](#installing)\n* [Examples](/examples)\n    * [The
  category of polynomials](examples/example0001-polynomials.lhs)\n    * [Sets are
  monads in the category `OrdHask` and `Mon`](examples/example0002-monad-instances-for-set.lhs)\n
  \   * [The category `(+>)` and linear algebra](examples/example0003-linear-algebra.lhs)\n*
  [New class hierarchies](#new-class-hierarchies)\n    * [The category hierarchy](#category-hierarchy)\n
  \   * [The functor hierarchy](#functor-hierarchy)\n    * [The container hierarchy](#container-hierarchy)\n
  \   * [The comparison hierarchy](#comparison-hierarchy)\n    * [The numeric hierarchy](#numeric-hierarchy)\n*
  [Automated testing](#automated-testing)\n* [Limitations](#limitations)\n\n## Installing\n\nSubHask
  depends on:\n\n1. GHC >= 7.10.\nYou can download the latest version of GHC [here](https://www.haskell.org/ghc/download).\n\n1.
  llvm >= 3.5, llvm < 3.6.\nTo install on Linux or Mac, run the following commands:\n\n
  \   ```\n    $ wget http://llvm.org/releases/3.5.2/llvm-3.5.2.src.tar.xz\n    $
  tar -xf llvm-3.5.2.src.tar.xz\n    $ cd llvm-3.5.2\n    $ mkdir build\n    $ cmake
  ..\n    $ make -j5\n    $ sudo make install\n    ```\n\n1. Any version of BLAS and
  LAPACK.\nHow to install these packages varies for different operating systems.\nFor
  Debian/Ubuntu systems, you can install them using:\n\n    ```\n    $ sudo apt-get
  install libblas-dev liblapack-dev\n    ```\n\nSubHask also has strict dependency
  requirements on other Haskell packages.\nTherefore, I recommend installing in a
  sandbox.\nThe following steps will create a project called `subhask-test`.\n\n```\n$
  mkdir subhask-test\n$ cd subhask-test\n$ cabal update\n$ cabal sandbox init\n$ cabal
  install subhask -j5\n```\n\nThe cabal install command takes about an hour to run
  on my laptop.\n\n<!--Then you can start ghci by running:-->\n<!--```-->\n<!--$ cabal
  repl-->\n<!--```-->\n\n## Examples\n\nSee the [examples](/examples) folder for the
  literate haskell files.\n\n## New Class Hierarchies\n\n### Category Hierarchy\n\nThe
  modified category hierarchy closely follows the presentation in the [Rosetta Stone
  paper](http://math.ucr.edu/home/baez/rosetta.pdf).\n\nThe image below shows the
  category hierarchy:\n\n<p align=\"center\"><img src=\"img/hierarchy-category.png\"></p>\n\nImportant
  points:\n\n1. Intuitively, `Concrete` categories are functions that have been annotated
  with special properties.\n    More formally, a `Concrete` category is one that is
  a subtype of `(->)`.\n    Subtyping is not a builtin feature of the Haskell language,
  but we simulate subtyping using the class `<:`.\n    See the documentation in [SubHask.SubType](/src/SubHask/SubType.hs)
  for more details.\n\n1. SubHask contains implementations of both categories and
  what I call \"category transformers.\"\nA category transformer creates a type corresponding
  to a subcategory in the original category.\nFor example, we can use the category
  transformer `MonT :: (* -> * -> *) -> * -> * -> *` to construct the category `MonT
  (->) :: * -> * -> *`, which corresponds to the category of monotonic functions.\nSee
  the [SubHask.Category.Trans.Monotonic](/src/SubHask/Category/Trans/Monotonic.hs)
  module for details.\n\n    The categories can be found in the `SubHask.Category.*`
  modules,\n    and transformers can be found in`SubHask.Category.Trans.*` modules.\n
  \   The design of these transformers roughly follows that of the [mtl library](https://hackage.haskell.org/package/mtl)
  to allow for composition of transformers.\n\n1. I have removed the `Arrow` hierarchy
  in favor of a more principled approach.\nSome of `Arrow`'s functionality has also
  been removed since I've never found a use for it,\nbut it will probably be added
  at a future point as SubHask matures.\n\n### Functor hierarchy\n\nIn the standard
  Prelude, the `Functor` type class corresponds to \"endofunctors on the category
  Hask\".\nSubHask generalizes this definition to endofunctors on any category:\n\n```\nclass
  Category cat => Functor cat f where\n    fmap :: cat a b -> cat (f a) (f b)\n```\n\nThe
  image below shows the functor hierarchy:\n\n<p align=\"center\"><img src=\"img/hierarchy-monad.png\"></p>\n\nThe
  dashed lines above mean that the `Functor`, `Applicative`, and `Monad` instances
  can depend on a category.\n\nImportant points:\n\n1. This modified functor hierarchy
  gives us a lot of power.\nFor example, we can finally make `Set` an instance of
  `Monad`!\nActually, `Set` is an instance of `Monad` in two separate categories:\nthe
  category of functions with an `Ord` constraint (i.e. `OrdHask`)\nand the category
  of monotonic functions (i.e. `MonT (->)` mentioned above).\nSemantically, both have
  the same meaning, but the monotonic `fmap` runs faster.\n\n1. We've introduced a
  new class `Then` that does not depend on the `Category`.\nThis class is a hack to
  make monads play nice with do notation;\nit's only member function is the `(>>)`
  operator.\nThere's probably something deep going on here that I'm just not aware
  of.\n\n1. Notice that the `Applicative` class is not a super class of `Monad`.\nWhile
  it's true that every `Monad` in `Hask` is also an `Applicative`,\nthis does not
  appear to be true for arbitrary categories.\nAt least it's definitely not true given
  the current definition of the `Category` class I've defined.\nI'm not sure if that's
  a limitation of my design or something more fundamental.\n\n1. The functor hierarchy
  is much smaller than the functor hierarchy available with base.\nI haven't included
  Prelude classes like `Alternative`, and I haven't included all of the classes Edward
  Kmett is famous for (see e.g. [category-extras](http://hackage.haskell.org/package/category-extras)).\nAll
  of these class can in principle be extended to the more generic setting of SubHask,
  I just haven't gotten around to it yet.\n\n    [Lens](http://hackage.haskell.org/package/lens)
  is the most famous package that uses the extended funtor hierarchy.\n    As-is,
  the current version of lens is fully compatible with SubHask;\n    however, the
  [container hierarchy](#container-hierarchy) below obviates the need for most of
  the fancy lenses.\n    Eventually, I'd like to implement lenses in arbitrary categories.\n
  \   For example, you could use a monotonic lens to guantee updates to a data structure
  are monotonic.\n    I haven't done very much work on this yet though.\n\n    Another
  interesting category theoretic Kmett library is [hask](https://hackage.haskell.org/package/hask).\n
  \   Everything in that library can be translated to SubHask, but that's not something
  I've done yet.\n\n### Comparison Hierarchy\n\nSubHask's comparison hierarchy is
  significantly more complicated than Prelude's.\nIt is directly inspired by [order
  theory](https://en.wikipedia.org/wiki/Order_theory) and [non-classical logic](https://en.wikipedia.org/wiki/Non-classical_logic).\n\nThe
  hierarchy is shown in the following image:\n\n<p align=\"center\"><img src=\"img/hierarchy-comparison.png\"></p>\n\nImportant
  points:\n\n1.  A type in SubHask can be compared using non-classical logics.\n    Consider
  the type of equality comparison:\n    ```\n    (==) :: Eq_ a => a -> a -> Logic
  a\n    ```\n    The return value is given by the type family `Logic a`, which specifies
  the logical system used on the type `a`.\n\n    For most types, `Logic a` will be
  `Bool`, and everything will behave as you would expect.\n    But this more general
  type lets us define equality on types for which classical equality is either uncomputable,
  undefined, or not what we actually want.\n\n    Consider the case of functions.\n
  \   Classical equality over functions is uncomputable.\n    But in SubHask, we define:\n
  \   ```\n    type instance Logic (a -> b) = a -> Logic b\n\n    class Eq_ b => Eq_
  (a -> b) where\n        (f==g) a = f a == g a\n    ```\n    This non-classical logic
  simplifies many situations.\n    For example, we can use the `(&&)` and `(||)` operators
  on functions:\n    ```\n    ghci> filter ( (>='c') && (<'f') || (=='q') ) ['a'..'z']\n
  \   \"cdeq\"\n    ```\n\n    I have a hunch this will make for a nice probabalistic
  programming interface,\n    but I could turn out completely wrong.\n\n* The `Eq`
  type class corresponds to the idea of [equivalence classes](https://en.wikipedia.org/wiki/Equivalence_class)
  in algebra.\nThere are much more general notions of equality that are well studied,
  e.g. [tolerance classes](https://en.wikipedia.org/wiki/Near_sets#Tolerance_classes_and_preclasses).\nI've
  been careful to design the existing comparison hierarchy so that it will be easy
  to add these more general notions of equality at some point in the future.\n\n###
  Container Hierarchy\n\nSubHask's container hierarchy is inspired by the [mono-traversable](http://hackage.haskell.org/package/mono-traversable)
  and [classy-prelude](https://hackage.haskell.org/package/classy-prelude) packages.\nThese
  packages use type families to make the standard type classes applicable to more
  data types.\nFor example, they can make `ByteString` an instance of `Foldable`,
  whereas the Prelude classes cannot.\nThis makes code *look* more generic, but unfortunately
  these packages' classes come with no laws.\nIn contrast, SubHask provides a clear
  and useful set of laws for each type class.\n\nThe container laws are closely related
  to the axioms of set theory.\nThe main two differences are that SubHask's laws handle
  the case of non-commutative containers but don't bother with infinitely sized containers.\nSee
  the [automated-testing](#automated-testing) section below for more details on class
  laws.\n\nThe container hierarchy is shown in the image below:\n\n<p align=\"center\"><img
  src=\"img/hierarchy-container.png\"></p>\n\nImportant points about containers:\n\n*
  The container hierarchy is general enough to support very weird containers.\nContainers
  like [HyperLogLog](/src/SubHask/Compatibility/HyperLogLog.hs)s and [BloomFilter](/src/SubHask/Compatibility/BloomFilter.hs)s
  fit nicely in the hierarchy and don't need to implement their own non-standard interface.\nThis
  makes generic programming much easier.\n\n* SubHask makes a clear distinction between
  vectors and arrays.\nA vector in SubHask is not a generic container (like it is
  in the C++ STL or Haskell's [vector](https://hackage.haskell.org/package/vector)
  package).\nThat's what arrays are for.\nVectors are elements of a vector space and
  subject to an entirely different set of laws (discussed in the [numeric hierarchy](#numeric-hierarchy)
  section below).\nThe array types can be found in the [SubHask.Algebra.Array](/src/SubHask/Algebra/Array.hs)
  module, and internally use the vector package for its nice fusion abilities.\n\n
  \   One nice result of the vector/array distinction is that it becomes easy to make
  unboxed arrays of unboxed vectors.\n    Unboxing the vectors within the array is
  crucial for high performance numeric operations, but it is not supported by standard
  Haskell.\n\n* Most Haskell data structures have two versions: a strict version and
  lazy version.\nStandard Haskell packages use a separate module for each version.\nThe
  classic example is the [containers](https://hackage.haskell.org/package/containers)
  library exporting a lazy `Map` type in `Data.Map` and a strict `Map` in `Data.Map.Strict`.\nUsing
  these types requires qualified imports and makes code less generic.\n\n    In SubHask,
  you can access the containers package by importing `SubHask.Compatibilty.Containers`.\n
  \   This module exports `Map` as a lazy map and `Map'` as a strict map.\n    In
  general, the prime symbol on a type signifies that it is a strict variant of the
  unprimed type.\n    In practice, I've found this makes code much easier to read.\n\n*
  There's actually two separate container hierarchies.\nIndexed containers (classes
  are prefixed with `Ix`) and non-indexed containers (classes have no prefix).\nAn
  example of an indexed container would be `Map` and a non-indexed container would
  be `Set`.\nSome types, like arrays and lists are both indexed and non-indexed.\n\n*
  The classes in the functor hierarchy don't relate to the classes in the container
  hierarchy.\nThis is a code smell that's caused by some of the limitations in Haskell's
  type system.\nSee the [limitations](#limitations) section below for details.\n<!--In
  particular, the functor hierarchy operates on types of kind ``(* -> * -> *) -> *
  -> *``-->\n\n* There is very little established mathematics about non-commutative
  containers.\nTherefore this hierarchy is not yet as well principled as the other
  hierarchies.\nIt has the least stable interface.\n\n### Numeric Hierarchy\n\nSubHask
  is directly inspired by a lot of good existing work on improving Haskell's numeric
  support.\nFor example:\n\n* The [hmatrix](http://hackage.haskell.org/package/hmatrix)
  package provides fast matrix operations via [LAPACK](https://en.wikipedia.org/wiki/LAPACK)
  and [BLAS](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms).\nOne
  of hmatrix's design goals is to maintain compatibility with the standard Prelude,
  and this makes hmatrix's class hierarchy confusing to work with.\nBecause SubHask
  does not maintain Prelude compatibility, we can have an interface that aligns more
  closely with the math.\n\n    Internally, SubHask's `Matrix` type is currently implemented
  via hmatrix.\n    In the future, I hope to make SubHask faster by supporting multiple
  backends like:\n\n    * [accelerate](http://hackage.haskell.org/package/accelerate),
  for GPU based linear algebra\n    * [bed-and-breakfast](http://hackage.haskell.org/package/bed-and-breakfast),
  a native haskell implementation that would allow matrices of the `Rational` and
  `Integer` types\n    * [eigen](http://hackage.haskell.org/package/eigen), bindings
  to the C++ Eigen library supporting dense and sparse formats\n    * [hblas](https://hackage.haskell.org/package/hblas),
  which supports more dense matrix formats\n\n    There's nothing difficult about
  adding these bindings.\n    It's just time consuming, which is why I haven't done
  it yet.\n\n* The [algebra](https://hackage.haskell.org/package/algebra) and [numeric-prelude](https://hackage.haskell.org/package/numeric-prelude)
  packages provide substantial rewrites of the `Num` class hierarchy.\nThese packages
  are excellent, but they have the following limitations:\n\n    * They *only* redefine
  the `Num` hierarchy.\n    But the `Num` hierarchy is closely related to each of
  the other hierarchies.\n    I've found that redefining the other hierarchies greatly
  simplified numeric programming.\n\n    * They don't have built-in linear algebra
  support, whereas SubHask does.\n\n    * They don't take advantage of GHC's more
  recent type system improvements.\n    SubHask is able to simplify some of the interfaces\n
  \   There are still a few warts in SubHask's interface, however, caused by [limitations](#limitations)
  in GHC's type system.\n\n    * They don't provide an automated test suite, whereas
  SubHask does.\n        See the [automated testing](#automated-testing) section below
  for details on how SubHask handles this.\n\n* Finally, many numeric packages try
  to extend the existing Prelude without breaking compatibility.\n\n    * [linear](http://hackage.haskell.org/package/linear)
  provides a vector hierarchy that exists on top of `Num`.\n    It's widely used on
  projects that require low dimensional matrices,\n    but performance is lacking
  for higher dimensional applications.\n\n    * [monoid-subclasses](https://hackage.haskell.org/package/monoid-subclasses)
  provides (as the name suggests) subclasses of monoid.\n    Between the modified
  numeric and container hierarchies, SubHask supports everything monoid-subclasses
  does with a simpler interface.\n\nYou can see it in the image below:\n\n<p align=\"center\"><img
  src=\"img/hierarchy-numeric.png\"></p>\n\nImportant points:\n\n* There are two main
  branches of the numeric hierarchy.\nAlong the bottom branch is the ring hierarchy.\nAlong
  the top branch is the branch for linear algebra.\n\n    Morally, every instance
  of a class in the ring hierarchy is also an instance of the equivalent class in
  the linear algebra hierarchy.\n    For example, every field can be considered as
  a one-dimensional vector.\n    I would like to formalize this connection, but it's
  [current impossible](#limitations).\n\n* Non-exact implementations using floating
  point are allowed.\nCurrently, these implementations break the laws of the classes,
  but only slightly.\nI intend to generalize the laws so that non-exact implementations
  are law abiding.\n\n## Automated testing\n\nThere are currently over 1000 quickcheck
  properties being checked in the test suite.\nBut I didn't write any of these tests
  by hand.\nWhenever I implement a new data type, template haskell functions add appropriate
  tests to the test suite automatically.\nI literally don't have to think at all about
  writing tests and I still get the full benefits.\nHere's how it works.\n\nEach class
  in the new hierarchies above comes with a set of laws they must obey.\nThose laws
  are documented using [quickcheck](https://hackage.haskell.org/package/QuickCheck)
  properties.\nThese properties fully describe the intended behavior of the class,\nand
  any instance that passes the quickcheck tests is a valid instance of the class.\n\nFor
  example, the `Eq` class is intended to capture the notion of [equivalence classes](https://en.wikipedia.org/wiki/Equivalence_class)
  from algebra.\nThe class definition is:\n```\nclass Eq_ a where\n    (==) :: a ->
  a -> Logic a\n    (/=) :: a -> a -> Logic a\n```\nand the quickcheck properties
  are:\n```\nlaw_Eq_reflexive :: Eq a => a -> Logic a\nlaw_Eq_reflexive a = a==a\n\nlaw_Eq_symmetric
  :: Eq a => a -> a -> Logic a\nlaw_Eq_symmetric a1 a2 = (a1==a2) == (a2==a1)\n\nlaw_Eq_transitive
  :: Eq a => a -> a -> a -> Logic a\nlaw_Eq_transitive a1 a2 a3 = (a1==a2&&a2==a3)
  ==> (a1==a3)\n\ndefn_Eq_noteq :: (Complemented (Logic a), Eq a) => a -> a -> Logic
  a\ndefn_Eq_noteq a1 a2 = (a1/=a2) == (not $ a1==a2)\n```\nThe three properties prefixed
  with `law` capture the laws of the equivalence classes and the property prefixed
  with `defn` shows how the operators `(==)` and `(/=)` must relate to each other.\n\nYou
  can use these laws to automatically test any data types you implement.\nAll you
  have to do is call the `mkSpecializedClassTests` template haskell function on the
  type you want to test.\nThis function constructs the test cases and adds them to
  the test suite.\nSee the [/tests/TestSuite.hs](https://github.com/mikeizbicki/subhask/blob/docs/test/TestSuite.hs)
  for how to use the function.\nThe module [SubHask.TemplateHaskell.Test](https://github.com/mikeizbicki/subhask/blob/master/src/SubHask/TemplateHaskell/Test.hs)
  contains the actual implementation.\n\nThe existing interface is pretty convenient,
  but I think it should be automated even more.\nThere's a minor limitation in template
  haskell that currently prevents full automation (see [#9699](https://ghc.haskell.org/trac/ghc/ticket/9699)).\n\n##
  Limitations\n\nSubHask is far from production ready.\nThere are roughly three causes
  of SubHask's limitations:\n\n1. A lot of the type signatures within SubHask are
  messier than they need to be due to limitations with GHC's type system.\nIn particular:\n\n
  \   * I wish I could use the `forall` keyword within constraints (see [#2893](https://ghc.haskell.org/trac/ghc/ticket/2893)
  and [#5927](https://ghc.haskell.org/trac/ghc/ticket/5927)).\n\n    * SubHask uses
  a lot of type families, some of which are injective.\n    We can't currently take
  advantage of injectivity, but adding support to GHC is being actively worked on
  (see [#6018](https://ghc.haskell.org/trac/ghc/ticket/6018)).\n\n    * A few of the
  invariants that are supposed to be maintained in SubHask's hierarchies can't be
  mechanically enforced because GHC doesn't allow cycles in the class hierarchy (see
  [#10592](https://ghc.haskell.org/trac/ghc/ticket/10592)).\n\n1. Some of the abstractions
  aren't quite right yet and will change in the future.\nI expect that as I write
  more programs that depend on SubHask, these abstractions will flesh themselves out
  a bit.\n\n1. There's a lot of grunt work that I just haven't had time for.\nFor
  example, the current implementation of the derivative category transformer in [SubHask.Category.Trans.Derivative](src/SubHask/Category/Trans/Derivative.hs)
  only supports forward mode automatic differentiation.\nAdding backwards mode support
  doesn't require any new ideas, just a couple hours of work.\nThere are currently
  118 `FIXME` comments in the source documenting similar limitations.\nA great, beginner
  friendly way to contribute to SubHask would be to find one of these limitations
  that interests you and fix it :)\n"
license-name: BSD-3-Clause
