homepage: https://github.com/zenhack/haskell-supervisors
changelog-type: markdown
hash: e761f16f5e9f4efb502731bd842e38f3b371ca5686913602d46a3f7ca27c21dd
test-bench-deps:
  base: '>=4.11 && <4.14'
  hspec: '>=2.6.0 && <2.8'
  supervisors: -any
maintainer: ian@zenhack.net
synopsis: Monitor groups of threads with non-hierarchical lifetimes.
changelog: |
  # Revision history for supervisors

  ## 0.2.0.0 -- 2018-12-18

  * Make the type of `withSupervisor` more general.
  * Drop unneeded dependency on `unliftio`.

  ## 0.1.0.0 -- 2018-11-10

  * First version. Released on an unsuspecting world.
basic-deps:
  stm: ^>=2.5
  base: '>=4.11 && <4.14'
  safe-exceptions: ^>=0.1.7
  async: ^>=2.2.1
  containers: '>=0.5.9 && <0.7'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Ian Denhardt
latest: 0.2.0.0
description-type: markdown
description: |
  [![hackage][hackage-img]][hackage]

  # Haskell Supervisors

  The `supervisors` package provides a useful abstraction for managing the
  groups of Haskell threads, which may not have a strictly hierarchical
  structure to their lifetimes.

  One way to think of it is that `supervisors` is to [async][async] as
  [resourcet][resourcet] is to [bracket][bracket].

  Most of the time you can manage these things in a hierarchical manner:
  for bracket, acquire a resource, do stuff with it, and release it. For
  async, spawn some tasks, wait for some or all of them, maybe kill the
  remaining ones, and return. The memory used by all of these threads is
  not reclaimed until the entire subtree finishes.

  But sometimes, your concurrency patterns don't fit neatly into a tree;
  that is what this package is for.

  This package was originally written for use in the rpc layer of the
  [capnp][capnp] package, where the various threads handling rpc calls
  can have essentially arbitrary lifetimes, but we often want to make
  sure they are all shut down when a connection is closed.

  Concretely, the library provides a `Supervisor` construct, which can be
  used to safely spawn threads while guaranteeing that:

  * When the supervisor is killed, all of the threads it supervises will be
    killed.
  * Child threads can terminate in any order, and memory usage will always
    be proportional to the number of *live* supervised threads.

  [async]: https://hackage.haskell.org/package/async
  [bracket]: http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Exception-Base.html#v:bracket
  [resourcet]: https://hackage.haskell.org/package/resourcet
  [capnp]: https://hackage.haskell.org/package/capnp

  [hackage-img]: https://img.shields.io/hackage/v/supervisors.svg
  [hackage]: https://hackage.haskell.org/package/supervisors
license-name: MIT
