homepage: https://github.com/totbwf/refinery#readme
changelog-type: markdown
hash: 500db20b0581be7f0a1d8e31f3b8e507e92777596e06dde8c986564037d78fd2
test-bench-deps:
  semigroupoids: ! '>=5'
  exceptions: ! '>=0.10'
  base: ! '>=4.7 && <5'
  containers: ! '>=0.5'
  pipes: ! '>=4'
  mtl: ! '>=2'
  mmorph: ! '>=1'
  refinery: -any
maintainer: reedmullanix@gmail.com
synopsis: Toolkit for building proof automation systems
changelog: |
  # Changelog for refinery

  ## Unreleased changes
basic-deps:
  semigroupoids: ! '>=5'
  exceptions: ! '>=0.10'
  base: ! '>=4.7 && <5'
  containers: ! '>=0.5'
  pipes: ! '>=4'
  mtl: ! '>=2'
  mmorph: ! '>=1'
all-versions:
- 0.1.0.0
author: Reed Mullanix
latest: 0.1.0.0
description-type: markdown
description: |
  # refinery

  `refinery` is a toolkit for building proof refinement/proof automation systems, based roughly on the [
  Algebraic Foundations of Proof Refinement](https://arxiv.org/abs/1703.05215).

  ## Overview
  The main datatype of the library is `TacticT goal extract m a`, which is a monad transformer that behaves as a tactic.
  When creating your domain-specific tactics, you should use `RuleT` and `rule` to implement them.
license-name: BSD-3-Clause
