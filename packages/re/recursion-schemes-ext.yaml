homepage: https://hub.darcs.net/vmchale/recursion-schemes-ext#readme
changelog-type: ''
hash: cc2f480fa992782344e88103f2c193204fe3a2ee3e75efad829a7bd0de93cf32
test-bench-deps:
  base: -any
  hspec: -any
  criterion: -any
  recursion-schemes-ext: -any
maintainer: vanessa.mchale@reconfigure.io
synopsis: Amateur addenda to recursion-schemes
changelog: ''
basic-deps:
  composition-prelude: -any
  base: ! '>4.9 && <4.11'
  lens: -any
  deepseq: -any
  recursion-schemes: ! '>=5.0'
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.1.0'
- '0.1.1.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.1.0'
author: Vanessa McHale
latest: '0.2.1.0'
description-type: markdown
description: ! "# recursion-schemes-ext\n\nThis adds several functions to\n[recursion-schemes](https://hackage.haskell.org/package/recursion-schemes-5.0.2),\nincluding
  a `cataM`.\n\n## Pitch\n\n### Monadic Functions\n\nThis package provides `cataM`,
  `anaM`, and `hyloM`. That means you can have\n(co)algebras that return a monadic
  value.\n\n### Dendromorphisms etc.\n\nLet's say you want to collapse a syntax tree.
  Suppose further that it's a\nrelatively involved syntax tree, and you have some
  data types that encapsulate\nothers. Here's a simple-minded example, where we collapse
  using traditional\nrecursion schemes:\n\n```haskell\n-- | We call our co-dependent
  data types 'Ernie' and 'Bert'. They represent mutually recursive\ndata Bert = Bert
  Ernie\n          | Num Integer\n          | String String\n          | Add Bert
  Bert\n\ndata Ernie = Ernie Bert\n           | Multiply Ernie Ernie\n           |
  List [Ernie]\n\nmakeBaseFunctor ''Ernie\nmakeBaseFunctor ''Bert\n\ncollapseErnieSyntaxTree
  :: (Recursive Ernie) => Ernie -> Ernie\ncollapseErnieSyntaxTree = cata algebra\n
  \   where algebra (ErnieF e)                                  = Ernie $ collapseBertSyntaxTree'
  e\n          algebra (MultiplyF (Ernie (Num i)) (Ernie (Num j))) = Ernie . Num $
  i * j\n          algebra x                                           = embed x\n\ncollapseBertSyntaxTree
  :: (Recursive Bert) => Bert -> Bert\ncollapseBertSyntaxTree = cata algebra\n    where
  algebra (BertF e)              = Bert $ collapseErnieSyntaxTree' e\n          algebra
  (AddF (Num i) (Num j)) = Num $ i + j\n          algebra x                      =
  embed x\n```\n\nContrast this to the solution using a dendromorphism, viz.\n\n```haskell\n--
  | We call our co-dependent data types 'Ernie' and 'Bert'. They represent mutually
  recursive\ndata Bert = Bert Ernie\n          | Num Integer\n          | String String\n
  \         | Add Bert Bert\n\ndata Ernie = Ernie Bert\n           | Multiply Ernie
  Ernie\n           | List [Ernie]\n\nmakeBaseFunctor ''Ernie\nmakeBaseFunctor ''Bert\n\nbertLens
  :: Lens' Bert Bert\nbertLens = ...\n\nernieLens :: Lens' Ernie Ernie\nernieLens
  = ...\n\nbertAlgebra :: BertF Bert -> Bert\nbertAlgebra (AddF (Num i) (Num j)) =
  Num $ i + j\nbertAlgebra x                      = embed x\n\nernieAlgebra :: ErnieF
  Ernie -> Ernie\nernieAlgebra (MultiplyF (Ernie (Num i)) (Ernie (Num j))) = Ernie
  . Num $ i * j\nernieAlgebra x                                           = embed
  x\n\ncollapseErnieSyntaxTree :: (Recursive Ernie) => Ernie -> Ernie\ncollapseErnieSyntaxTree
  = dendro (dummy :: Bert) ernieLens bertAlgebra ernieAlgebra\n\ncollapseBertSyntaxTree
  :: (Recursive Bert) => Bert -> Bert\ncollapseBertSyntaxTree = dendro (dummy :: Ernie)
  bertLens ernieAlgebra bertAlgebra\n```\n\n## Anti-Pitch\n\nThis library is experimental!
  The API of dendromorphisms and chemamorphisms in\nparticular is subject to change.\n"
license-name: BSD3
