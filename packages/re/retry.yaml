homepage: http://github.com/Soostone/retry
changelog-type: markdown
hash: 307a3931379fa94889e6beb6715dcfb37b465705523bb2077fc392ea8fb72e0d
test-bench-deps:
  exceptions: -any
  stm: -any
  base: ==4.*
  data-default-class: -any
  time: -any
  tasty-hedgehog: -any
  hedgehog: -any
  HUnit: ! '>=1.2.5.2'
  ghc-prim: -any
  mtl: -any
  tasty-hunit: -any
  transformers: -any
  random: -any
  tasty: -any
maintainer: ozgun.ataman@soostone.com
synopsis: Retry combinators for monadic actions that may fail
changelog: ! "0.7.6.2\n* Loosen bounds on exceptions again.\n\n0.7.6.1\n* Loosen bounds
  on exceptions.\n\n0.7.6.0\n* Clarify the semantics of `limitRetriesByDelay`.\n*
  Add `limitRetriesByCumulativeDelay`\n\n0.7.5.1\n* Improve haddocks for fullJitterBackoff.\n\n0.7.5.0\n*
  Add Semigroup instance when the Semigroup class is available through base.\n\n0.7.4.3\n*
  Loosen dependency upper bounds.\n\n0.7.5\n* Add skipAsyncExceptions helper function\n\n0.7.4.2\n*
  Loosen HUnit dependency for tests.\n\n0.7.4.1\n* Loosen QuickCheck dependency for
  tests.\n\n0.7.4\n* Widen transformers dependency\n\n0.7.3\n* Widen ghc-prim dependency
  for GHC 8\n\n0.7.2\n* Fix premature integer overflow error thanks to Mitsutoshi
  Aoe\n\n0.7.1\n* Various documentation updates.\n* Add stepping combinator for manual
  retries.\n* Add applyPolicy and applyAndDelay\n* Add Read instance for RetryStatus\n*
  Fix logic bug in rsPreviousDelay in first retry\n\n0.7.0.1\n* Officially drop support
  for GHC < 7.6 due to usage of Generics.\n\n0.7\n* RetryPolicy has become RetryPolicyM,
  allowing for policy logic to\n  consult the monad context.\n* RetryPolicyM now takes
  a RetryStatus value. Use the function\n  rsIterNum to preserve existing behavior
  of RetryPolicy only\n  receiving the number.\n* The monadic action now gets the
  RetryStatus on each try. Use const\n  if you don't need it.\n* recoverAll explicitly
  does not handle the standard async\n  exceptions. Users are encouraged to do the
  same when using\n  recovering, as catching async exceptions can be hazardous.\n*
  We no longer re-export (<>) from Monoid.\n* Utility functions simulatePolicy and
  simulatePolicyPP have been\n  added which help predict how a policy will behave
  on each iteration.\n\n0.6\n\n* Actions are now retried in the original masking state,
  while\n  handlers continue to run in `MaskedInterruptible` (@maoe)\n* Added several
  tests confirming exception hierarchy semantics under\n  `recovering` (@ozataman)\n\n0.5\n\n*
  Mitsutoshi's backoff work inspired a complete redo of the\n  RetryPolicy interface,
  replacing it with a monoidal RetryPolicy. The\n  result is a much thinner API that
  actually provides much more power\n  to the end user.\n* Now using microseconds
  in all premade policies. PLEASE TAKE CARE\n  WHEN UPGRADING. It was a bad idea to
  use miliseconds and deviate\n  from norms in the first place.\n\n0.4\n\n* Transitioned
  to using Edward Kmett's exceptions package instead of\n  monad-control. Use 0.3
  series if you still need monad-control\n  support.\n\n0.3\n\nThanks to John Wiegley
  and Michael Snoyman for their contributions:\n\n* Now using monad-control instead
  of MonadCatchIO, which is widely\n  agreed to be broken.\n* Now using transformers
  instead of mtl, which was a broader than\n  needed dependency.\n"
basic-deps:
  exceptions: ! '>=0.5 && <0.11'
  base: ! '>=4.6 && <5'
  data-default-class: -any
  ghc-prim: <0.6
  transformers: <0.7
  random: ! '>=1 && <1.2'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.0'
- '0.4'
- '0.5'
- '0.5.1'
- '0.6'
- '0.7'
- '0.7.0.1'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.4'
- '0.7.4.1'
- '0.7.4.2'
- '0.7.4.3'
- '0.7.5.0'
- '0.7.5.1'
- '0.7.6.0'
- '0.7.6.1'
- '0.7.6.2'
author: Ozgun Ataman
latest: '0.7.6.2'
description-type: markdown
description: ! '# README [![Build Status](https://travis-ci.org/Soostone/retry.svg?branch=master)](https://travis-ci.org/Soostone/retry)
  [![Coverage Status](https://coveralls.io/repos/Soostone/retry/badge.png?branch=master)](https://coveralls.io/r/Soostone/retry?branch=master)


  retry - combinators for monadic actions that may fail


  ## About


  Monadic action combinators that add delayed-retry functionality,

  potentially with exponential-backoff, to arbitrary actions.


  The main purpose of this package is to make it easy to work reliably

  with IO and similar actions that often fail. Common examples are

  database queries and large file uploads.



  ## Documentation


  Please see haddocks for documentation.


  ## Changes


  See [https://github.com/Soostone/retry/blob/master/changelog.md](changelog.md).


  ## Author


  Ozgun Ataman, Soostone Inc



  ## Contributors


  Contributors, please list yourself here.


  - Mitsutoshi Aoe (@maoe)

  - John Wiegley

  - Michael Snoyman

  - Michael Xavier

  - Marco Zocca (@ocramz)


'
license-name: BSD3
