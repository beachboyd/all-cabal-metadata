homepage: ''
changelog-type: markdown
hash: 2bfcaea723a3a9d081f80bf2132ab8350ba6c6208686446033b14f7f4a14e889
test-bench-deps: {}
maintainer: maintainer@obsidian.systems
synopsis: reflex-frp interface for running shell commands
changelog: |
  # Revision history for reflex-process

  ## 0.1.0.1

  * Loosen reflex-vty version bounds

  ## 0.1.0.0

  * Initial release. The core of the interface is `Reflex.Process.createProcess`, which runs a `System.Process.CreateProcess` command, taking `Event`s of input and producing `Event`s of output.
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.7 && <2.8'
  base: ! '>=4.12 && <4.14'
  text: ! '>=1.2.3 && <1.3'
  vty: ! '>=5.21 && <5.26'
  process: ! '>=1.6.4 && <1.7'
  data-default: ! '>=0.7.1 && <0.8'
  containers: ! '>=0.5 && <0.7'
  reflex: ! '>=0.6.2.4 && <0.7'
  reflex-process: -any
  reflex-vty: ! '>=0.1.2.1 && <0.2'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Obsidian Systems LLC
latest: 0.1.0.1
description-type: markdown
description: "reflex-process \n==============\n\n[![hackage](https://img.shields.io/hackage/v/reflex-process.svg)](https://hackage.haskell.org/package/reflex-process)
  [![hackage-ci](https://matrix.hackage.haskell.org/api/v2/packages/reflex-process/badge)](https://matrix.hackage.haskell.org/#/package/reflex-process)
  [![travis-ci](https://api.travis-ci.org/reflex-frp/reflex-process.svg?branch=develop)](https://travis-ci.org/reflex-frp/reflex-process)\n\nFunctional-reactive
  shell commands\n----------------------------------\n\nThis library provides a functional-reactive
  interface for running shell commands from [reflex](https://github.com/reflex-frp/reflex).\n\nExample\n-------\n\nThe
  following example uses [reflex-vty](https://github.com/reflex-frp/reflex-vty) to
  run a terminal application that calls a shell command and displays the result:\n\n```haskell\n>
  {-# LANGUAGE OverloadedStrings #-}\n> import Reflex\n> import Reflex.Process\n>
  import Reflex.Vty\n>\n> import Control.Monad ((<=<))\n> import Data.Default (def)\n>
  import qualified Data.Set as Set\n> import qualified Data.Text.Encoding as T\n>
  import qualified Graphics.Vty.Input as V\n> import qualified System.Process as P\n>\n>
  cmd :: P.CreateProcess\n> cmd = P.proc \"ls\" [\"-a\"]\n>\n> main :: IO ()\n> main
  = mainWidget $ do\n>   exit <- keyCombos $ Set.singleton (V.KChar 'c', [V.MCtrl])\n>
  \  p <- createProcess cmd def\n>   stdout <- foldDyn (flip mappend) \"\" $ _process_stdout
  p\n>   boxStatic def $ col $ do\n>     fixed 3 $ boxStatic def $ text \"reflex-process\"\n>
  \    fixed 3 $ text \"Press Ctrl-C to exit.\"\n>     fixed 1 $ text \"stdout:\"\n>
  \    stretch $ text $ T.decodeUtf8 <$> current stdout\n>   pure $ () <$ exit\n```\n"
license-name: BSD-3-Clause
