homepage: ''
changelog-type: markdown
hash: 2aeb9de69e68c9cc22fcaa90b6f2fd2d07b5fd7123265946f35ea4e0b5a873ee
test-bench-deps: {}
maintainer: maintainer@obsidian.systems
synopsis: reflex-frp interface for running shell commands
changelog: |
  # Revision history for reflex-process

  ## 0.1.0.0

  * Initial release. The core of the interface is `Reflex.Process.createProcess`, which runs a `System.Process.CreateProcess` command, taking `Event`s of input and producing `Event`s of output.
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.7 && <2.8'
  base: ! '>=4.12 && <4.14'
  text: ! '>=1.2.3 && <1.3'
  vty: ! '>=5.21 && <5.26'
  process: ! '>=1.6.4 && <1.7'
  data-default: ! '>=0.7.1 && <0.8'
  containers: ! '>=0.5 && <0.7'
  reflex: ! '>=0.6.2.4 && <0.7'
  reflex-process: -any
  reflex-vty: ! '>=0.1.2.1 && <0.1.3'
all-versions:
- 0.1.0.0
author: Obsidian Systems LLC
latest: 0.1.0.0
description-type: markdown
description: |
  reflex-process
  ==============

  Functional-reactive shell commands
  ----------------------------------

  This library provides a functional-reactive interface for running shell commands from [reflex](https://github.com/reflex-frp/reflex).

  Example
  -------

  The following example uses [reflex-vty](https://github.com/reflex-frp/reflex-vty) to run a terminal application that calls a shell command and displays the result:

  ```haskell
  > {-# LANGUAGE OverloadedStrings #-}
  > import Reflex
  > import Reflex.Process
  > import Reflex.Vty
  >
  > import Control.Monad ((<=<))
  > import Data.Default (def)
  > import qualified Data.Set as Set
  > import qualified Data.Text.Encoding as T
  > import qualified Graphics.Vty.Input as V
  > import qualified System.Process as P
  >
  > cmd :: P.CreateProcess
  > cmd = P.proc "ls" ["-a"]
  >
  > main :: IO ()
  > main = mainWidget $ do
  >   exit <- keyCombos $ Set.singleton (V.KChar 'c', [V.MCtrl])
  >   p <- createProcess cmd def
  >   stdout <- foldDyn (flip mappend) "" $ _process_stdout p
  >   boxStatic def $ col $ do
  >     fixed 3 $ boxStatic def $ text "reflex-process"
  >     fixed 3 $ text "Press Ctrl-C to exit."
  >     fixed 1 $ text "stdout:"
  >     stretch $ text $ T.decodeUtf8 <$> current stdout
  >   pure $ () <$ exit
  ```
license-name: BSD-3-Clause
