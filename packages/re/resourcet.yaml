homepage: http://github.com/snoyberg/conduit
changelog-type: markdown
hash: 1dcd374acdd3fe7d96606421fef764ce4fc58f68823f34ed892dcb9dddd436d8
test-bench-deps:
  base: -any
  hspec: ! '>=1.3'
  lifted-base: -any
  transformers: -any
  resourcet: -any
maintainer: michael@snoyman.com
synopsis: Deterministic allocation and freeing of scarce resources.
changelog: ! "## 1.1.10\n\n* Added `MonadUnliftIO` instances and `UnliftIO.Resource`\n\n##
  1.1.9\n\n* Add generalized version of resourceForkIO\n\n## 1.1.8.1\n\n* Allocation
  actions should be masked\n\n## 1.1.8\n\n* Add `instance MonadFix ResourceT`\n  [#281](https://github.com/snoyberg/conduit/pull/281)\n\n##
  1.1.7.5\n\n* Inline the tutorial from SoH\n\n## 1.1.7.4\n\n* Make test suite slightly
  more robust\n\n## 1.1.7.3\n\n* Doc tweak\n\n## 1.1.7.2\n\n* Remove upper bound on
  transformers [#249](https://github.com/snoyberg/conduit/issues/249)\n\n## 1.1.7.1\n\n*
  transformers-compat 0.5\n\n## 1.1.7\n\n* Canonicalise Monad instances [#237](https://github.com/snoyberg/conduit/pull/237)\n\n##
  1.1.6\n\n* Safe/Trustworthy for resourcet [#220](https://github.com/snoyberg/conduit/pull/220)\n\n##
  1.1.5\n\n*  Add pass-through instances for Alternative and MonadPlus [#214](https://github.com/snoyberg/conduit/pull/214)\n\n##
  1.1.4.1\n\n* Allow older `exceptions` version again\n\n## 1.1.4\n\n* Add `MonadResource
  ExceptT` instance [#198](https://github.com/snoyberg/conduit/pull/198)\n\n## 1.1.3.2\n\nmonad-control-1.0
  support [#191](https://github.com/snoyberg/conduit/pull/191)\n\n## 1.1.3\n\nProvide
  the `withEx` function to interact nicely with the exceptions package.\n"
basic-deps:
  exceptions: ! '>=0.5'
  base: ! '>=4.5 && <5'
  monad-control: ! '>=0.3.1 && <1.1'
  lifted-base: ! '>=0.1'
  containers: -any
  unliftio-core: -any
  mtl: ! '>=2.0 && <2.3'
  mmorph: -any
  transformers-base: ! '>=0.4.4 && <0.5'
  transformers: ! '>=0.2.2'
  transformers-compat: ! '>=0.3 && <0.6'
all-versions:
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.2.1'
- '0.3.2.2'
- '0.3.3'
- '0.3.3.1'
- '0.4.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.4.6'
- '0.4.7'
- '0.4.7.1'
- '0.4.7.2'
- '0.4.8'
- '0.4.9'
- '0.4.10'
- '0.4.10.1'
- '0.4.10.2'
- '1.1.0'
- '1.1.0.1'
- '1.1.1'
- '1.1.2'
- '1.1.2.1'
- '1.1.2.2'
- '1.1.2.3'
- '1.1.3'
- '1.1.3.1'
- '1.1.3.2'
- '1.1.3.3'
- '1.1.4'
- '1.1.4.1'
- '1.1.5'
- '1.1.6'
- '1.1.7'
- '1.1.7.1'
- '1.1.7.2'
- '1.1.7.3'
- '1.1.7.4'
- '1.1.7.5'
- '1.1.8'
- '1.1.8.1'
- '1.1.9'
- '1.1.10'
author: Michael Snoyman
latest: '1.1.10'
description-type: markdown
description: ! "## resourcet\n\nProper exception handling, especially in the presence
  of asynchronous\nexceptions, is a non-trivial task. But such proper handling is
  absolutely vital\nto any large scale application. Leaked file descriptors or database
  connections\nwill simply not be an option when writing a popular web application,
  or a high\nconcurrency data processing tool. So the question is, how do you deal
  with it?\n\nThe standard approach is the bracket pattern, which appears throughout
  much of\nthe standard libraries. `withFile` uses the bracket pattern to safely wrap
  up\n`openFile` and `closeFile`, guaranteeing that the file handle will be closed
  no\nmatter what. This approach works well, and I highly recommend using it.\n\nHowever,
  there's another approach available: the [resourcet\npackage](https://www.stackage.org/package/resourcet).
  \ If the bracket pattern\nis so good, why do we need another one? The goal of this
  post is to answer that\nquestion.\n\n## What is ResourceT\n\nResourceT is a monad
  transformer which creates a region of code where you can safely allocate resources.
  Let's write a simple example program: we'll ask the user for some input and pretend
  like it's a scarce resource that must be released. We'll then do something dangerous
  (potentially introducing a divide-by-zero error). We then want to immediately release
  our scarce resource and perform some long-running computation.\n\n```haskell\nimport
  Control.Monad.Trans.Resource\nimport Control.Monad.IO.Class\n\nmain = runResourceT
  $ do\n    (releaseKey, resource) <- allocate\n        (do\n            putStrLn
  \"Enter some number\"\n            readLn)\n        (\\i -> putStrLn $ \"Freeing
  scarce resource: \" ++ show i)\n    doSomethingDangerous resource\n    liftIO $
  putStrLn $ \"Going to release resource immediately: \" ++ show resource\n    release
  releaseKey\n    somethingElse\n    \ndoSomethingDangerous i =\n    liftIO $ putStrLn
  $ \"5 divided by \" ++ show i ++ \" is \" ++ show (5 `div` i)\n    \nsomethingElse
  = liftIO $ putStrLn\n    \"This could take a long time, don't delay releasing the
  resource!\"\n```\n\nTry entering a valid value, such as 3, and then enter 0. Notice
  that in both cases the \"Freeing scarce resource\" message is printed. And by using
  `release` before `somethingElse`, we guarantee that the resource is freed *before*
  running the potentially long process.\n\nIn this specific case, we could easily
  represent our code in terms of bracket with a little refactoring.\n\n```haskell\nimport
  Control.Exception (bracket)\n\nmain = do\n    bracket\n        (do\n            putStrLn
  \"Enter some number\"\n            readLn)\n        (\\i -> putStrLn $ \"Freeing
  scarce resource: \" ++ show i)\n        doSomethingDangerous\n    somethingElse\ndoSomethingDangerous
  i =\n    putStrLn $ \"5 divided by \" ++ show i ++ \" is \" ++ show (5 `div` i)\n
  \   \nsomethingElse = putStrLn\n    \"This could take a long time, don't delay releasing
  the resource!\"\n```\n\nIn fact, the `bracket` version is cleaner than the resourcet
  version. If so, why bother with resourcet at all? Let's build up to the more complicated
  cases.\n\n## bracket in terms of ResourceT\n\nThe first thing to demonstrate is
  that `ResourceT` is strictly more powerful than `bracket`, in the sense that:\n\n1.
  `bracket` can be implemented in terms of `ResourceT`.\n2. `ResourceT` cannot be
  implemented in terms of `bracket`.\n\nThe first one is pretty easy to demonstrate:\n\n```haskell\nimport
  Control.Monad.Trans.Resource\nimport Control.Monad.Trans.Class\n\nbracket alloc
  free inside = runResourceT $ do\n    (_releaseKey, resource) <- allocate alloc free\n
  \   lift $ inside resource\n    \nmain = bracket\n    (putStrLn \"Allocating\" >>
  return 5)\n    (\\i -> putStrLn $ \"Freeing: \" ++ show i)\n    (\\i -> putStrLn
  $ \"Using: \" ++ show i)\n```\n\nNow let's analyze why the second statement is true.\n\n##
  What ResourceT adds\n\nThe `bracket` pattern is designed with nested resource allocations.
  For example, consider the following program which copies data from one file to another.
  We'll open up the source file using `withFile`, and then nest within it another
  `withFile` to open the destination file, and finally do the copying with both file
  handles.\n\n```haskell\n{-# START_FILE main.hs #-}\nimport System.IO\nimport qualified
  Data.ByteString as S\n\nmain = do\n    withFile \"input.txt\" ReadMode $ \\input
  ->\n      withFile \"output.txt\" WriteMode $ \\output -> do\n        bs <- S.hGetContents
  input\n        S.hPutStr output bs\n    S.readFile \"output.txt\" >>= S.putStr\n{-#
  START_FILE input.txt #-}\nThis is the input file.\n```\n\nBut now, let's tweak this
  a bit. Instead of reading from a single file, we want to read from two files and
  concatenate them. We could just have three nested `withFile` calls, but that would
  be inefficient: we'd have two `Handle`s open for reading at once, even though we'll
  only ever need one. We could restructure our program a bit instead: put the `withFile`
  for the output file on the outside, and then have two calls to `withFile` for the
  input files on the inside.\n\nBut consider a more complicated example. Instead of
  just a single destination file, let's say we want to break up our input stream into
  chunks of, say, 50 bytes each, and write each chunk to successive output files.
  We now need to __interleave__ allocations and freeings of both the source and destination
  files, and we cannot statically know exactly how the interleaving will look, since
  we don't know the size of the files at compile time.\n\nThis is the kind of situation
  that `resourcet` solves well (we'll demonstrate in the next section). As an extension
  of this, we can write library functions which allow user code to request arbitrary
  resource allocations, and we can guarantee that they will be cleaned up. A prime
  example of this is in WAI (Web Application Interface). The user application may
  wish to allocate some scarce resources (such as database statements) and use them
  in the generation of the response body. Using `ResourceT`, the web server can guarantee
  that these resources will be cleaned up.\n\n\n## Interleaving with conduit\n\nLet's
  demonstrate the interleaving example described above. To simplify the code, we'll
  use the conduit package for the actual chunking implementation. Notice when you
  run the program that there are never more than two file handles open at the same
  time.\n\n```haskell\nimport           Control.Monad.IO.Class (liftIO)\nimport           Data.Conduit
  \          (addCleanup, runResourceT, ($$), (=$))\nimport           Data.Conduit.Binary
  \   (isolate, sinkFile, sourceFile)\nimport           Data.Conduit.List      (peek)\nimport
  \          Data.Conduit.Zlib      (gzip)\nimport           System.Directory       (createDirectoryIfMissing)\n\n--
  show\n-- All of the files we'll read from\ninfiles = map (\\i -> \"input/\" ++ show
  i ++ \".bin\") [1..10]\n\n-- Generate a filename to write to\noutfile i = \"output/\"
  ++ show i ++ \".gz\"\n\n-- Monad instance of Source allows us to simply mapM_ to
  create a single Source\n-- for reading all of the files sequentially.\nsource =
  mapM_ sourceFileTrace infiles\n\n-- The Sink is a bit more complicated: we keep
  reading 30kb chunks of data into\n-- new files. We then use peek to check if there
  is any data left in the\n-- stream. If there is, we continue the process.\nsink
  =\n    loop 1\n  where\n    loop i = do\n        isolate (30 * 1024) =$ sinkFileTrace
  (outfile i)\n        mx <- peek\n        case mx of\n            Nothing -> return
  ()\n            Just _ -> loop (i + 1)\n\n-- Putting it all together is trivial.
  ResourceT guarantees we have exception\n-- safety.\ntransform = runResourceT $ source
  $$ gzip =$ sink\n-- /show\n\n-- Just some setup for running our test.\nmain = do\n
  \   createDirectoryIfMissing True \"input\"\n    createDirectoryIfMissing True \"output\"\n
  \   mapM_ fillRandom infiles\n    transform\n\nfillRandom fp = runResourceT\n              $
  sourceFile \"/dev/urandom\"\n             $$ isolate (50 * 1024)\n             =$
  sinkFile fp\n\n\n-- Modified sourceFile and sinkFile that print when they are opening
  and\n-- closing file handles, to demonstrate interleaved allocation.\nsourceFileTrace
  fp = do\n    liftIO $ putStrLn $ \"Opening: \" ++ fp\n    addCleanup (const $ liftIO
  $ putStrLn $ \"Closing: \" ++ fp) (sourceFile fp)\n\nsinkFileTrace fp = do\n    liftIO
  $ putStrLn $ \"Opening: \" ++ fp\n    addCleanup (const $ liftIO $ putStrLn $ \"Closing:
  \" ++ fp) (sinkFile fp)\n```\n\n## resourcet is not conduit\n\nresourcet was originally
  created in the process of writing the conduit package.\nAs a result, many people
  have the impression that these two concepts are\nintrinsically linked. In fact,
  this is not true: each can be used separately\nfrom the other. The canonical demonstration
  of resourcet combined with conduit\nis the file copy function:\n\n```haskell\nimport
  Data.Conduit\nimport Data.Conduit.Binary\n\nfileCopy src dst = runResourceT $ sourceFile
  src $$ sinkFile dst\n\nmain = do\n    writeFile \"input.txt\" \"Hello\"\n    fileCopy
  \"input.txt\" \"output.txt\"\n    readFile \"output.txt\" >>= putStrLn\n```\n\nHowever,
  since this function does not actually use any of ResourceT's added functionality,
  it can easily be implemented with the bracket pattern instead:\n\n```haskell\nimport
  Data.Conduit\nimport Data.Conduit.Binary\nimport System.IO\n\nfileCopy src dst =
  withFile src ReadMode $ \\srcH ->\n                   withFile dst WriteMode $ \\dstH
  ->\n                   sourceHandle srcH $$ sinkHandle dstH\n\nmain = do\n    writeFile
  \"input.txt\" \"Hello\"\n    fileCopy \"input.txt\" \"output.txt\"\n    readFile
  \"output.txt\" >>= putStrLn\n```\n\nLikewise, resourcet can be freely used for more
  flexible resource management without touching conduit. In other words, these two
  libraries are completely orthogonal and, while they complement each other nicely,
  can certainly be used separately.\n\n## Conclusion\n\nResourceT provides you with
  a flexible means of allocating resources in an exception safe manner. Its main advantage
  over the simpler bracket pattern is that it allows interleaving of allocations,
  allowing for more complicated programs to be created efficiently. If your needs
  are simple, stick with bracket. If you have need of something more complex, resourcet
  may be your answer.\n"
license-name: BSD3
