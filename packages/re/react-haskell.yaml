homepage: https://github.com/joelburget/react-haskell
changelog-type: ''
hash: d28650142c7b91126f9df726803ccfb9a643f4b651fb9f5157e39b3f3415c544
test-bench-deps: {}
maintainer: joelburget@gmail.com
synopsis: Haskell React bindings
changelog: ''
basic-deps:
  void: ==0.7
  lens-family: -any
  base: ! '>=4.5 && <5'
  ghcjs-base: ! '>=0.1'
  monads-tf: -any
  unordered-containers: -any
  text: -any
  ghcjs-dom: ! '>=0.1'
  ghcjs-prim: ! '>=0.1.0.0'
  transformers: -any
  deepseq: -any
  aeson: -any
all-versions:
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 2.0.0
- 2.0.1
author: Joel Burget
latest: 2.0.1
description-type: haddock
description: ! 'This package provides high level bindings to Facebook''s <http://facebook.github.io/react/
  React> library, meant for use with GHCJS.


  React is a JavaScript library for building user interfaces. React (and React-Haskell)
  is focused on just UI - it''s not a framework.


  Currently React-Haskell can render simple stateful components, but not what React
  calls classes. Put another way, React-Haskell doesn''t support lifecycle methods
  yet.


  Here''s a simple example which demonstrates basic elements, attributes, state, and
  handling events.


  > page_ :: ReactNode Void

  > page_ =

  >     let cls = smartClass

  >             -- this is a record and these should really be curly braces,

  >             -- but haddock breaks on them.

  >             [ name = "page"

  >

  >             -- initially the input is empty

  >             , initialState = ""

  >

  >             -- always transition to the input''s new value

  >             , transition = \(_, value) -> (value, Nothing)

  >

  >             , renderFn = \_ str -> div_ [ class_ "container" ] $ do

  >                 input_ [ value_ str, onChange (Just . value . target) ]

  >             ]

  >     in classLeaf cls ()

  >

  > main :: IO ()

  > main = do

  >     Just doc <- currentDocument

  >     Just elem <- documentGetElementById doc ("elem" :: JSString)

  >     render page_ elem'
license-name: MIT
