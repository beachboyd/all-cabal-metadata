homepage: https://bitbucket.org/wuzzeb/react-flux
changelog-type: markdown
hash: c85b91bac8f4a496945331c4390f602fa08876b02bd751ee2fff086b1d2faae9
test-bench-deps: {}
maintainer: John Lenz <wuzzeb@gmail.com>
synopsis: A binding to React based on the Flux application architecture for GHCJS
changelog: ! "# 1.2.3\n\n* Add `rawJsRendering` function which allows you to inject
  arbitrary javascript code\n  into the rendering function of a view.  This is quite
  low-level and should be a last\n  resort, but it can be used if you have especially
  tricky 3rd-party React classes.  Having\n  said that, I suggest you try other approaches
  first.\n\n* Add `transHandler` and `liftViewToStateHandler` utility functions which
  can be used to transform\n  the handler that a `ReactElementM` lives in.\n\n# 1.2.2\n\n*
  Update the test suite to use hspec-webdriver-1.2.  There was no change to any code\n
  \ besides the test suite.\n\n# 1.2.1\n\n* A few fixes to get the haddock documentation
  (hopefully) working on hackage, no functional\n  change to any code in this release.\n\n#
  1.2.0\n\n* (Breaking Change) Add timeout support to the AJAX functionality.  This
  has three changes.  First, the AJAX code moved\n  into it's own module `React.Flux.Ajax`
  which is not re-exported by `React.Flux`.  Second, the\n  `AjaxRequest` has a new
  entry `reqTimeout` to optionally specify a timeout value.  Finally, the\n  `jsonAjax`
  function now takes a `RequestTimeout` as the first parameter.\n\n* `reactRender`
  and `reactRenderToString` now error when executed if you call them when compiling
  with GHC\n  instead of GHCJS.  These functions only work when using GHCJS to compile
  because for the actual rendering\n  we rely on the React javascript code.  In addition,
  there are a few haddock updates about this change.\n\n# 1.1.1\n\n* When compiling
  with GHC (not GHCJS), add fake instances for FromJSVal to allow more programs to
  compile\n  with GHC.  (Thanks SÃ¶nke Hahn!)\n\n* Export functions `timeToJSVal` and
  `dateToJSVal` from `React.Flux.Addons.Intl`.  These functions, which\n  have been
  used internally for a while, convert a Haskell `Day` or `UTCTime` to a JavaScript
  date.  They\n  are useful outside of `react-flux` when you want to pass dates or
  times to messages.\n\n* Some haddock improvements to `React.Flux.Addons.Intl`.\n\n#
  1.1.0\n\n* Breaking Change - I removed the use of `String` and replaced it with
  either `Text` or `JSString`\n  (from the `Data.JSString` module in `ghcjs-base`).
  \ If a value was just going to be passed straight into\n  react, I made it a JSString
  and if the value was intended to be manipulated in Haskell I used Text.\n  The main
  changes are:\n\n      * `elemText` used to (confusingly) take a `String`.  Now there
  are three functions: `elemString`,\n        `elemText`, and `elemJSString` that
  take a `String`, `Text`, and `JSString` value respectively.\n\n      * The type
  of `$=` now uses JSString.  `$=` is intended only to avoid ambiguity when using\n
  \       overloaded strings and string constants and `JSString` has an `IsString`
  instance.\n\n      * There is a new property creator `&=` which instead of converting
  to Aeson and then to a javascript\n        value like `@=` does, `&=` uses the `ToJSVal`
  class from `GHCJS.Foreign.Marshal` to convert values\n        directly to javascript.\n\n
  \     * Several functions had their type changed to instead of taking a String as
  a param take a Text or\n        JSString as a parameter\n\n   Despite being quite
  a large change, it didn't take much effort for me to convert my application to this\n
  \  new API.  You can see the conversion of the todo example application here:\n
  \  https://bitbucket.org/wuzzeb/react-flux/commits/a630da5f9032745ab92da6e3d9f9038915b9b319\n
  \  The main things that required changing are:\n\n      * Converting between `String`
  and `JSString` is done via `pack` and `unpack` in `Data.JSString`.\n        Converting
  between `Text` and `JSString` is done via `textToJSString` and `textFromJSString`\n
  \       in the `Data.JSString.Text` module.  In fact, this conversion needed to
  happen in only a\n        few places for me because for the most part the `IsString`
  instance and `OverloadedStrings`\n        extension properly converted the string
  literals to the proper type.  A few places I needed to\n        use `<>` from `Data.Monoid`
  to concatenate `JSString`s.\n\n      * A few places I was accidentally using `$=`
  for non-literal strings.  Switching these to `&=`\n        was enough, since `&=`
  is polymorphic over the type of the property value.\n\n      * Most places using
  `elemText` had an error, but here it was straightforward to switch to\n        either
  `elemString` or keep `elemText` and use `Text` values inside my store.\n\n* React-flux
  has used the shouldComponentUpdate lifetime method to prevent re-rendering in some
  cases,\n  but it was finicky and sometimes wouldn't work (not a correctness bug,
  just a missed performance\n  improvement).  I now better understand when it works
  and does not work, and edited the documentation\n  to explain this and what you
  can do in your own code (primarily add bang patterns to force thunks).\n  The new
  documentation is at the end of the main module page.\n\n* The shouldComponentUpdate
  lifetime method now knows about view props which are tuples of size two or\n  three,
  and will be able to skip re-rendering as long as each component of the tuple is
  unchanged\n  (and is not a thunk).\n\n* `React.Flux.Addons.Intl` now uses a new
  type `IntlProperty` defined in the module instead of using\n  the pair type from
  aeson.  This allows passing arbitrary JSVals to i18n functions instead of just\n
  \ aeson values.  This causes API breakage in `formattedNumberProp`, `formattedDateProp`,
  `pluralProp`,\n  `messageProp`, and `messageProp'`.\n\n* Ability to export react
  views to JavaScript.  `callbackViewWithProps` inside `React.Flux.PropertiesAndEvents`\n
  \ allows you to create a javascript function which returns a renderable and then
  pass that JavaScript\n  function to a foreign JavaScript class.  This is useful
  for example for fixed-data-table and ReactNative's\n  ListView among others.  Secondly,
  `exportViewToJavaScript` from `React.Flux` allows just exporting\n  a view to a
  JavaScript function, which is useful to embed a Haskell application into a larger
  JavaScript\n  React application.\n\n* Add a `style` combinator to easily write inline
  styles on elements.\n\n* Add `viewWithIKey` and `viewWithSKey` for views with integer
  and string keys.  The old `viewWithKey`\n  was akward to use when OverloadedStrings
  was enabled.\n\n# 1.0.7\n\n* Fix the build when building with GHC instead of GHCJS
  (an import was incorrectly protected by CPP)\n\n# 1.0.6\n\n* Fix a rare bug in stateful
  view event handlers: occasionally deepseq was not called and so there\n  was a race
  between react reusing the event and the haskell code extracting data from the event.\n*
  Add overlapping pragmas to the Callback instances, making the `callback` function
  easier to use\n  without requiring explicit type signatures.  This change is backwards
  compatible.\n* Some minor documentation updates.\n\n# 1.0.5\n\n* Fix a bug in the
  `jsonAjax` implementation: the request body was not properly JSON encoded.\n\n#
  1.0.4\n\n* Add helper functions `ajax` and `jsonAjax` to `React.Flux.Combinators`
  to assist with sending\n  a request to the backend and turning the response into
  actions.  See the haddocks for more\n  information.\n\n* Everything in react-flux
  is working with no changes against React 15 release candidate 1, although\n  react-bootstrap
  is currently not compatible (https://github.com/react-bootstrap/react-bootstrap/issues/1686).\n\n*
  Everything in `React.Flux.Addons.Intl` is working with no changes with react-intl
  2.0 release candidate 1.\n\n# 1.0.3\n\n* I switched to using stack to build, and
  updated the documentation to explain how to use stack.  It is\n  still possible
  to use cabal but I suggest using stack.  There is no functionality change in this
  release,\n  just updated documentation.\n\n# 1.0.2\n\n* Update to build with latest
  ghcjs master.  The breaking change was\n  https://github.com/ghcjs/ghcjs-base/commit/968dff527c2be2d3d4815e437ad9b2931ea1f35d\n
  \ which renamed JSRef to JSVal.  Therefore, react-flux no longer builds with ghcjs
  versions without\n  this commit.\n\n# 1.0.1\n\n* Add formatting support for properties
  to `React.Flux.Addons.Intl`.  These are needed for example to translate\n  the placeholder
  text for an input element.  This improvement caused a few changes to the types the
  Internal module.\n\n* Add a new example [purecss-side-menu](https://bitbucket.org/wuzzeb/react-flux/src/tip/example/purecss-side-menu)\n
  \ showing a responsive side menu built with PureCSS.\n\n* Add `classNames` function
  to `React.Flux.PropertiesAndEvents` to allow easily setting class names\n  based
  on calculations.\n\n* Add a new module `React.Flux.Combinators` which is re-exported
  by `React.Flux`.  The `Combinators` module\n  contains useful utilities that while
  not required, make your life a little simpler.\n\n# 1.0.0\n\n* Bindings to react-intl
  (http://formatjs.io/react/) for i18n support.  This is useful even if your app is\n
  \ a single language, as it allows easy number, date, relative time, and message
  formatting like pluralization.\n  It also supports multiple locales and translations
  of messages.\n\n* The type of `callback` has extended to allow arbitrary function
  properties to be\n  passed to foreign classes.  The old `callback` accepted callbacks
  of type `Aeson.Value -> handler`\n  while the new callback allows functions of any
  number of arguments, as long as each argument implements\n  `FromJSVal`.  Since
  `Aeson.Value` implements `FromJSVal`, any existing calls to `callback` should still
  work.\n  This change also caused some changes to types in `React.Flux.Internal`.\n\n*
  Add a function `nestedProperty` to `React.Flux.PropertiesAndEvents` to create nested
  properties.\n\n* Support for React 0.14\n    * React 0.13 and 0.14 are both supported
  from the same Haskell code, the differences are handled internally.\n    * If you
  are using React 0.14, you will have to include `react-dom.min.js` and make sure
  the\n      `ReactDOM` variable is protected by closure similar to how `React` must
  be protected.\n    * `initializeTouchEvents` has been removed from React 0.14, so
  you can remove the call from your app.\n    * The SVG `image_` tag is now supported
  by `React.Flux.DOM`.\n    * The new media events on images and videos don't have
  direct Haskell equivalents, instead the handlers can be\n      created by the new
  `on` function in `React.Flux.PropertiesAndEvents`.\n    * The CSS transitions in
  `React.Flux.Addons.React` were made simpler by just passing the raw\n      properties.
  \ There were several changes to the possible properties in React 0.14 and covering
  them all\n      from Haskell is not worth it when the properties can easily be created
  directly.\n\n* `reactRenderToString` was added to allow executing a react-flux application
  using node.\n\n# 0.9.4\n\n* Fix to build with latest ghcjs-base (requires at least
  aaa4d59117f37d1b9c60a154a9128b3bcc6301cd)\n  of ghcjs-base), so you may need to
  recompile ghcjs and ghcjs-base.\n* Add a function 'property' to create a property
  from any JSVal, not just Aeson values.\n* Add a function 'elementProperty' to create
  a property from a ReactElementM, useful for\n  interacting with foreign React classes.\n\n#
  0.9.3\n\n* Don't require web-routes dependency if not building the routing example\n\n#
  0.9.2\n\n* Bindings to react-bootstrap and the react addons\n* Add new routing example
  application (thanks Vladimir Sekissov!)\n\n# 0.9.1\n\n* Switch to use the improved-base
  branch of ghcjs (thanks Vladimir Sekissov!)\n\n# 0.9.0\n\n* Initial release\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  time: ! '>=1.5'
  unordered-containers: -any
  text: ! '>=1.2'
  react-flux: -any
  mtl: ! '>=2.1'
  deepseq: -any
  aeson: ! '>=0.8'
  template-haskell: ! '>=2.10'
all-versions:
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.1.0
- 1.1.1
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
author: John Lenz <wuzzeb@gmail.com>
latest: 1.2.3
description-type: markdown
description: ! "A GHCJS binding to [React](https://facebook.github.io/react/) based
  on the\n[Flux](https://facebook.github.io/flux/) design.  The flux design pushes
  state and complicated logic\nout of the view, allowing the rendering functions and
  event handlers to be pure Haskell functions.\nWhen combined with React's composable
  components and the one-way flow of data, React, Flux, and\nGHCJS work very well
  together.\n\n# Docs\n\nThe [haddocks](https://hackage.haskell.org/package/react-flux)
  contain the documentation.\n\n# Using in your own project\n\nI use stack to build
  my frontend which uses react-flux.  I set up stack and\nghcjs using [these\ninstructions](http://docs.haskellstack.org/en/stable/ghcjs/).
  \ Note that\nreact-flux requires GHCJS master (a.k.a. improved base).  I keep updated
  with\nthe latest version of GHCJS and lts.  As I write this, I use the following
  `stack.yaml`,\nbut as new LTS versions or new GHCJS versions come out I keep updating
  to them (and\nprobably forget to update this README :)\n\n~~~\nresolver: lts-6.1\npackages:\n
  \   - .\nextra-deps:\n    - react-flux-(version)\n\ncompiler: ghcjs-0.2.0.20160414_ghc-7.10.3\ncompiler-check:
  match-exact\nsetup-info:\n  ghcjs:\n    source:\n      ghcjs-0.2.0.20160414_ghc-7.10.3:\n
  \       url: https://s3.amazonaws.com/ghcjs/ghcjs-0.2.0.20160414_ghc-7.10.3.tar.gz\n
  \       sha1: 6d6f307503be9e94e0c96ef1308c7cf224d06be3\n~~~\n\n\n# Example Applications\n\nThe
  source contains some [example applications](https://bitbucket.org/wuzzeb/react-flux/src/tip/example).\nTo
  try out the TODO example, clone the repository, set up ghcjs manually as in the
  previous section, and then execute:\n\n~~~\nstack build\nmake\ncd example/todo\nfirefox
  todo.html\n~~~\n\nIf you don't have closure installed, you can open `todo-dev.html`
  instead of `todo.html`.  For more details on\nthe example applications, see the
  [README](https://bitbucket.org/wuzzeb/react-flux/src/tip/example/README.md).\n\n#
  Test Suite\n\nTo run the test suite, first you must build both the example applications
  and\nthe test-client using ghcjs.  (The test-client is a react-flux application\nwhich
  contains code for everything not contained in the todo example.)  This is\nthe first
  `stack build` below.  Then, you must build the test suite, which is a\nhaskell application
  using\n[hspec-webdriver](https://hackage.haskell.org/package/hspec-webdriver).  This\nmust
  be built using GHC (not GHCJS), so there is a separate `stack.yaml` file\nin the
  `test/spec` directory.  Also, `react-intl` must be installed in the test client\ndirectory.
  \ In summary, run the following commands:\n\n~~~ {.bash}\ncd test/client\nnpm install
  react-intl\ncd test/spec\nstack build\n~~~\n\nNext, install [selenium-server-standalone](http://www.seleniumhq.org/download/)
  (also from\n[npm](https://www.npmjs.com/package/selenium-server-standalone-jar)).\n\nFinally,
  start selenium-server-standalone and execute the test suite.  Make sure you also
  have\nclosure installed, since the test suite will compress the todo app before
  testing it.  It must be\nstarted from the `test/spec` directory, otherwise it does
  not find the correct javascript files.\n\n~~~\ncd test/spec\nstack exec react-flux-spec\n~~~\n\n#
  Other Projects\n\nIt differes significantly from the other two react bindings,\n[react-haskell](https://github.com/joelburget/react-haskell)
  and\n[ghcjs-react](https://github.com/fpco/ghcjs-react).  In particular, the major
  difference is how\nevents are handled.  In the Flux design, the state is moved out
  out of the view and then handlers\nproduce actions which transform the state.  Thus
  there is a one-way flow of data from the store into\nthe view.  In contrast, react-haskell
  and ghcjs-react both have event signals propagaing up the\nreact component tree,
  transforming state at each node.  In particular, react-haskell with its InSig\nand
  OutSig have the signals propagate up the tree and optionally transform state at
  each node and\nchange the type of the signal.\n"
license-name: BSD-3-Clause
