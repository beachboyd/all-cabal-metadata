homepage: http://github.com/silkapp/regular-xmlpickler
changelog-type: text
hash: 96e6bb416f0550d814450e27db266930447f504d3949b92c75e963c55f0c8bbc
test-bench-deps: {}
maintainer: code@silk.co
synopsis: Generic generation of HXT XmlPickler instances using Regular.
changelog: ! "0.1.2 -> 0.2\n  - Upgrade to hxt 9.2/9.3.\n  - Allow missing data for
  Maybe fields in records.\n  - Add instances for Text in addition to String.\n  -
  More lenient Bool parsing.\n  - Better error reporting in Bool parsing.\n  - Strip
  leading and trailing underscores from element names.\n  - Only lowercase first character
  of element names.\n  - Add pickler for Either.\n  - Fixed recursive schema generation.\n
  \ - Move from typLAB to Silk.\n"
basic-deps:
  base: ==4.*
  text: -any
  hxt: ! '>=9.2 && <9.4'
  regular: ! '>=0.2 && <0.4'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
author: Silk
latest: '0.2'
description-type: markdown
description: ! "This package allows you to automatically derive hxt picklers\n(conversions
  to and from xml) using the regular generics package.\n\nA simple example:\n\n```Haskell\n{-#
  LANGUAGE TemplateHaskell\n           , EmptyDataDecls\n           , TypeFamilies\n
  \          #-}\n\nimport Generics.Regular (deriveAll, PF)\nimport Text.XML.HXT.Arrow.Pickle
  (XmlPickler (..))\nimport Generics.Regular.XmlPickler (gxpickle)\n\ndata User =
  User\n  { name  :: String\n  , admin :: Bool\n  }\n\n-- Derive Regular instance.\nderiveAll
  ''User \"PFUser\"\ntype instance PF User = PFUser\n\n-- Define generic pickler instance.\ninstance
  XmlPickler User where\n  xpickle = gxpickle\n```\n\nNow you can use the functionality
  from `Text.XML.HXT.Arrow.Pickle`.\nFor example:\n\n```\n> showPickled [] (User \"Simon\"
  True)\n\n\"<user><name>Simon</name><admin>true</admin></user>\"\n\n> unpickleDoc
  xpickle $ head $ xread \"<user><name>Simon</name><admin>true</admin></user>\" ::
  Maybe User\n\nJust (User {name = \"Simon\", admin = True})\n```\n"
license-name: BSD-3-Clause
