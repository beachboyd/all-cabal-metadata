homepage: http://github.com/NicolasT/reedsolomon
changelog-type: ''
hash: 83eb915c17f1f7d6b114ba854d492b9976a169f954fbd824967e954f2926ecf9
test-bench-deps:
  exceptions: -any
  bytestring: -any
  base: -any
  criterion: ! '>=1.1 && <1.2'
  loop: -any
  reedsolomon: -any
  tasty-quickcheck: ! '>=0.8 && <0.9'
  mtl: -any
  tasty-hunit: ! '>0.9 && <0.10'
  random: ! '>=1.1 && <1.2'
  tasty: ! '>=0.10 && <0.12'
  QuickCheck: ! '>=2.7 && <2.10'
  primitive: -any
  profunctors: -any
  vector: -any
  tasty-ant-xml: ! '>=1.0 && <1.1'
maintainer: ikke@nicolast.be
synopsis: Reed-Solomon Erasure Coding in Haskell
changelog: ''
basic-deps:
  exceptions: ! '>=0.8 && <0.9'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <4.10'
  gitrev: ! '>=1.0 && <1.3'
  loop: ! '>=0.2 && <0.4'
  mtl: ! '>=2.1 && <2.3'
  primitive: ! '>=0.6 && <0.7'
  profunctors: ! '>=4.4 && <5.3'
  vector: ! '>=0.10 && <0.12'
all-versions:
- 0.0.3.0
- 0.0.4.0
- 0.0.4.2
- 0.0.4.3
author: Nicolas Trangez
latest: 0.0.4.3
description-type: markdown
description: ! "# Reed-Solomon\n[![Travis CI][3]][4]\n[![Circle CI][5]][6]\n[![Appveyor][7]][8]\n\n[3]:
  https://travis-ci.org/NicolasT/reedsolomon.svg?branch=master\n[4]: https://travis-ci.org/NicolasT/reedsolomon\n[5]:
  https://circleci.com/gh/NicolasT/reedsolomon/tree/master.svg?style=svg\n[6]: https://circleci.com/gh/NicolasT/reedsolomon/tree/master\n[7]:
  https://ci.appveyor.com/api/projects/status/wrxftgosavg0vtha/branch/master?svg=true\n[8]:
  https://ci.appveyor.com/project/NicolasT/reedsolomon/branch/master\n\nReed-Solomon
  Erasure Coding in Haskell, with speeds exceeding multiple GB/s/cpu core implemented
  in pure Haskell (and some SIMD C/assembler).\n\nThis is a Haskell port of the [GolangReedSolomon](https://github.com/klauspost/reedsolomon)
  library released by [Klaus Post](http://klauspost.com/), wich is a port of the [JavaReedSolomon](https://github.com/Backblaze/JavaReedSolomon)
  library released by [Backblaze](http://backblaze.com), with some additional optimizations.\n\nFor
  an introduction on erasure coding, see the post on the [Backblaze blog](https://www.backblaze.com/blog/reed-solomon/).\n\nPackage
  home: https://github.com/NicolasT/reedsolomon\n\n# Performance\nPerformance depends
  mainly on the number of parity shards. In rough terms, doubling the number of parity
  shards will double the encoding time.\n\nHere are the throughput numbers with some
  different selections of data and parity shards. For reference each shard is 1MB
  random data, and 1 CPU core is used for encoding.\n\n<table>\n  <thead>\n    <tr>\n
  \     <th>Data</th>\n      <th>Parity</th>\n      <th>Parity</th>\n      <th>SSSE3
  MB/s</th>\n      <th>AVX2 MB/s</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr><td>5</td><td>2</td><td>40%</td><td>3641,66</td><td>3987,24</td></tr>\n
  \   <tr><td>10</td><td>2</td><td>20%</td><td>3951,01</td><td>4444,44</td></tr>\n
  \   <tr><td>10</td><td>4</td><td>40%</td><td>1821,16</td><td>1927,90</td></tr>\n
  \   <tr><td>50</td><td>20</td><td>40%</td><td>398,09</td><td>431,78</td></tr>\n
  \ </tbody>\n</table>\n\nExample of performance on Intel(R) Core(TM) i7-4600U CPU
  @ 3.30GHz - 2 physical cores, 4 logical cores (note: `/proc/cpuinfo` mentions 2.10GHz
  only). The example uses 10 blocks with 16MB data each and 4 parity blocks.\n\n<table>\n
  \ <thead>\n    <tr>\n      <th>Threads</th>\n      <th>SSSE3 MB/s</th>\n      <th>AVX2
  MB/s</th>\n      <th>Speed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr><td>1</td><td>1551,89</td><td>1588,88</td><td>100%</td></tr>\n
  \ </tbody>\n</table>\n\n# Links\n* [Backblaze Open Sources Reed-Solomon Erasure
  Coding Source Code](https://www.backblaze.com/blog/reed-solomon/).\n* [GolangReedSolomon](https://github.com/klauspost/reedsolomon).
  Compatible Go library by Klaus Post.\n* [JavaReedSolomon](https://github.com/Backblaze/JavaReedSolomon).
  Compatible java library by Backblaze.\n* [go-erasure](https://github.com/somethingnew2-0/go-erasure).
  A similar library using cgo, slower in my tests.\n* [Screaming Fast Galois Field
  Arithmetic](http://www.snia.org/sites/default/files2/SDC2013/presentations/NewThinking/EthanMiller_Screaming_Fast_Galois_Field%20Arithmetic_SIMD%20Instructions.pdf).
  Basis for SSE3 optimizations.\n\n# License\n\nThis code, as the original [GolangReedSolomon](https://github.com/klauspost/reedsolomon)
  and [JavaReedSolomon](https://github.com/Backblaze/JavaReedSolomon) is published
  under an MIT license. See LICENSE file for more information.\n"
license-name: MIT
