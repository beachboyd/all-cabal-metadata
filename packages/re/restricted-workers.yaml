homepage: https://github.com/co-dan/interactive-diagrams/wiki/Restricted-Workers
changelog-type: ''
hash: 8377561c69681d9d35508ca2638b7da6e2a1c80d19f377a0bc2eb11151a7f8eb
test-bench-deps: {}
maintainer: difrumin@gmail.com
synopsis: Running worker processes under system resource restrictions
changelog: ''
basic-deps:
  cereal: ! '>=0.3 && <0.4'
  either: ! '>=3.4'
  bytestring: ! '>=0.10 && <0.13'
  unix: ! '>=2.6 && <2.8'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=4.5 && <4.8'
  text: ! '>=0.10'
  monad-control: ! '>=0.3 && <0.4'
  filepath: ! '>=1'
  network: ! '>=2.4 && <2.5'
  async: ! '>=2.0 && <2.1'
  data-default: ! '>=0.5'
  mtl: ! '>=2.1 && <2.2'
  transformers-base: ! '>=0.4 && <0.5'
  selinux: -any
  transformers: ! '>=0.3 && <0.4'
  directory: ! '>=1.2 && <1.3'
all-versions:
- 0.1.0
- 0.1.1
author: Dan Frumin
latest: 0.1.1
description-type: markdown
description: ! "# Restricted Workers Library\n\nThis library provides an abstract
  interface for running various kinds\nof workers under resource restrictions. It
  was originally developed as\npart of the\ninteractive-diagrams (<http://github.com/co-dan/interactive-diagrams>)\nproject.
  You can read more about security restrictions in the wiki: <https://github.com/co-dan/interactive-diagrams/wiki/Restricted-Workers>\n\nThe
  library provides a convenient way of running worker processes,\nsaving data obtained
  by the workers at start-up, a simple pool\nabstraction and a configurable security
  and resource limitations.\n\nRight now there are several kinds of security restrictions
  that could\nbe applied to the worker process:\n\n- RLimits\n- chroot jail\n- custom
  process euid\n- cgroups\n- process niceness\n- SELinux security context\n\n# Documentation\n\nThe
  easiest way to get a grip of the restricted-workers library is to\nlook at the examples
  below showing off the basic concepts of the\nlibrary. Another good idea would be
  to read haddock documentations\nwhich feature comments for each exported function
  and type in the\nlibrary. Do not hesitate to bug me if you think that the documentation\nin
  some places can be improved.\n\n## Examples\n\nThe following examples will walk
  you through creating basic kinds of\nworkers (IOWorker), handling a pool of workers,
  communicating with\nworkers using 'System.Restricted.Workers.Protocol' and creating
  your\nown types of workers.\n\n- [EchoWorker.lhs](examples/EchoWorker.lhs) - basic
  usage of\n  `IOWorker`\n- [EchoPool.lhs](examples/EchoPool.lhs) - basic usage of\n
  \ `Workers.Pool`\n- [CommandEvalProtocol.lhs](examples/CommandEvalProtocol.lhs)
  -\n  rewriting our Echo worker to use the provided Protocol module\n- [NewWorkerType.lhs](examples/NewWorkerTypes.lhs)
  - rolling out your\n  own worker types\n\n## Wiki page\n\n<https://github.com/co-dan/interactive-diagrams/wiki/Restricted-Workers>\n\n#
  External configurations \n\nSome restrictions require external configuration, below
  we provide\nsome example files for them that we use in interactive-diagrams:\n\n-
  SELinux configuration:\n  https://github.com/co-dan/interactive-diagrams/tree/master/selinux\n
  \ \n  Run `build.sh` to build the policy module, then `load.sh` to load\n  it. Read
  the\n  [blog post](http://parenz.wordpress.com/2013/07/15/interactive-diagrams-gsoc-progress-report/)\n
  \ which explains the policy.\n  \n- CGroups:\n  https://github.com/co-dan/interactive-diagrams/blob/master/cgconfig.conf\n
  \ \n  CGroups configuration is pretty straightforward. You can load the\n  configuration
  with\n  \n  ```\n  cgconfigparser -l cgconfig.conf\n  ```\n"
license-name: BSD-3-Clause
