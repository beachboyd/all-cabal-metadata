homepage: https://github.com/kcsongor/register-machine-type
changelog-type: ''
hash: 8dcb096c8f031cbf216524bc20a409e325779b6bc982963fe9c6884f6a385b8c
test-bench-deps: {}
maintainer: kiss.csongor.kiss@gmail.com
synopsis: A computationally universal register machine implementation at the type-level
changelog: ''
basic-deps:
  base: ! '>=4.8 && <=4.9'
all-versions:
- 0.1.0.0
author: Csongor Kiss
latest: 0.1.0.0
description-type: markdown
description: ! "# register-machine-type\nUniversal Register Machine implemented at
  the type-level of Haskell\n\n_This is just a proof of concept!_\n\nThe machine consists
  of a set of registers, a contiguous instruction pool (starting at index 0)\nand
  supports the following 3 instructions:\n- `Inc r l`     - increments register `r`
  by 1, and then jumps to label `l` (that is the instruction located at index `l`).\n-
  `Dec r l1 l2` - if the value of register `r` is 0, jumps to `l2`, otherwise decrements
  `r` and jumps to `l1`.\n- `Halt`        - halts the machine.\n\nThis formulation
  is identical to the [Lambek machine](https://en.wikipedia.org/wiki/Counter_machine),
  with the addition of an explicit `Halt` instruction, for convenience. This means
  that that Haskell's type system is Turing complete (with TypeFamilies and UndecidableInstances).\n\nIf
  the execution of a given program terminates, it will result in the type `Halted
  ip rs`, where `ip` is the\nindex of the instruction that halted the machine (there
  might be multiple `Halt` instructions in the code)\nand `rs` is a list representing
  the resulting state of the registers.\n\nSince the machine is implemented at the
  type-level of Haskell, the instructions are executed during\nthe type-checking phase.
  This means that a program that doesn't terminate will hang the type-checker.\n\n(Be
  careful with using an on-the-fly type checker editor plugin, as checking a \nnon-terminating
  (or even a relatively complex) program will consume **a lot** of RAM!)\n\n### An
  example\nInitialises R1 to 5, then raises 2 to the power of the value of R1,\nleaving
  the result (32) in R0. Uses R2 as a scratch register,\nthus the machine is initialised
  with 3 registers.\n\n```haskell\npow2 :: ('Halted a (r ': rs) ~\n            Run\n
  \             '[\n              -- Instr              | label index\n              --
  set R1 to 5\n                Inc (R 1) (L 1)             -- 0\n              , Inc
  (R 1) (L 2)             -- 1\n              , Inc (R 1) (L 3)             -- 2\n
  \             , Inc (R 1) (L 4)             -- 3\n              , Inc (R 1) (L 5)
  \            -- 4\n              -- set R0 to 1\n              , Inc (R 0) (L 6)
  \            -- 5\n              -- R0 = 2^R1\n              , Dec (R 1) (L 7) (L
  12)      -- 6\n              -- R2 = R0\n              , Dec (R 0) (L 8) (L 9)       --
  7\n              , Inc (R 2) (L 7)             -- 8\n              -- R0 = 2*R2\n
  \             , Dec (R 2) (L 10) (L 6)      -- 9\n              , Inc (R 0) (L 11)
  \           -- 10\n              , Inc (R 0) (L 9)             -- 11\n\n              ,
  Halt                        -- 12\n              ]) => Proxy r\npow2 = Proxy\n\n\n```\n\n#TODO\n-
  composable gadgets (that is reusable components, for these to work, their used registers
  and labels need to be separated)\n- more examples\n- formally prove correctness\n"
license-name: BSD-3-Clause
