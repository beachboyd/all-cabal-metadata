homepage: https://github.com/mrkkrp/req
changelog-type: markdown
hash: 343484c2f279d529f213c9b67c463e4baf112c14fa5669bc2589d6eb5e02d923
test-bench-deps:
  http-client: ==0.5.*
  bytestring: ! '>=0.10.8 && <0.11'
  case-insensitive: ! '>=0.2 && <1.3'
  base: ! '>=4.8 && <5.0'
  data-default-class: -any
  time: ! '>=1.2 && <1.9'
  unordered-containers: ! '>=0.2.5 && <0.2.10'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  hspec-core: ! '>=2.0 && <3.0'
  monad-control: ! '>=1.0 && <1.1'
  req: -any
  blaze-builder: ! '>=0.3 && <0.5'
  mtl: ! '>=2.0 && <3.0'
  QuickCheck: ! '>=2.7 && <3.0'
  http-types: ! '>=0.8 && <10.0'
  aeson: ! '>=0.9 && <1.4'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Easy-to-use, type-safe, expandable, high-level HTTP library
changelog: ! "## Req 1.0.0\n\n* Added the `reqBr` function allowing to consume `Response
  BodyReader`\n  without using a pre-defined instance of `HttpResponse`, in a custom
  way.\n\n* Now streaming of response body does not happen until we've checked headers\n
  \ and status code with `httpConfigCheckResponse`. It also doesn't happen on\n  every
  retry. Streaming and obtaining of final response value happens only\n  once when
  we're happy with everything.\n\n  Previously we first tried to consume and interpret
  response body before\n  checking status code and determining whether we should retry
  the request.\n  This was not good, because we could expect a JSON response but get
  a\n  response with status code 500, and then still we would try to parse it as\n
  \ JSON first before letting `httpConfigCheckResponse` throw an exception.\n\n  The
  corrected behavior should also make retrying more efficient.\n\n* Changed signatures
  of several fields of `HttpConfig`:\n  `httpConfigCheckResponse`, `httpConfigRetryPolicy`,
  and\n  `httpConfigRetryJudge` in order to eliminate redundant `IO` and prevent\n
  \ the possibility that these functions could start consuming `BodyReader`.\n\n*
  Removed the `makeResponsePreview` method from the `HttpResponse` type\n  class.
  Preview business is handled by the library automatically on a lower\n  level now.
  Users do not need to concern themselves with such stuff.\n\n* Changed the type signature
  of the `getHttpResponse` method of the\n  `HttpResponse` type class. Previously
  it left too much freedom (and\n  responsibility) to implementers of the method.
  In fact, we now limit what\n  `getHttpResponse` does to just consuming and interpreting
  `Response\n  BodyReader`, so we can properly control details of connection\n  opening/closing
  etc., for the user.\n\n* Dropped support for GHC 7.8.\n\n* Minor documentation improvements.\n\n##
  Req 0.5.0\n\n* Changed the signature of the `makeResponseBodyPreview` from `response
  ->\n  IO ByteString` to `response -> ByteString`.\n\n* Minor documentation improvements.\n\n##
  Req 0.4.0\n\n* Added the `Req` monad and `runReq` function to run it. This allows
  to use\n  `req` without defining new (orphan) instances.\n\n## Req 0.3.1\n\n* Added
  `basicAuthUnsafe`.\n\n## Req 0.3.0\n\n* Made URL parsing functions `parseUrlHttp`
  and `parseUrlHttps` recognize\n  port numbers.\n\n* Added `req'` function that allows
  to perform requests via a callback that\n  receives pre-constructed request and
  manager.\n\n* Removed the `ReturnRequest` HTTP response implementation as it was
  not\n  quite safe and was not going to work with retrying. Use `req'` instead for\n
  \ “pure” testing.\n\n* Changed the type of `httpConfigCheckResponse`, so the second
  argument can\n  be any instance of `HttpResponse`.\n\n* Added built-in automatic
  retrying. See `httpConfigRetryPolicy` and\n  `httpConfigRetryJudge` in `HttpConfig`.
  The default configuration retries\n  5 times on request timeouts.\n\n* Added the
  `makeResponseBodyPreview` method to the `HttpResponse` type\n  class that allows
  to specify how to build a “preview” of response body for\n  inclusion into exceptions.\n\n*
  Improved wording in the documentation and `README.md`.\n\n## Req 0.2.0\n\n* Added
  support for multipart form data in the form of `ReqBodyMultipart`\n  body option
  and `reqBodyMultipart` helper function. This also required a\n  change in the type
  signature of `getRequestContentType`, which now takes\n  `body`, not `Proxy body`
  because we need to extract boundary from `body`\n  and put it into `Content-Type`
  header. This change, however, shouldn't be\n  too dangerous for end-users.\n\n*
  Added support for OAuth 1.0 authentication via `oAuth1` option.\n\n## Req 0.1.0\n\n*
  Initial release.\n"
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: ! '>=0.10.8 && <0.11'
  case-insensitive: ! '>=0.2 && <1.3'
  base: ! '>=4.8 && <5.0'
  data-default-class: -any
  time: ! '>=1.2 && <1.9'
  text: ! '>=0.2 && <1.3'
  retry: ! '>=0.7 && <0.8'
  http-api-data: ! '>=0.2 && <0.4'
  monad-control: ! '>=1.0 && <1.1'
  connection: ! '>=0.2.2 && <0.3'
  blaze-builder: ! '>=0.3 && <0.5'
  authenticate-oauth: ! '>=1.5 && <1.7'
  http-client-tls: ! '>=0.3.2 && <0.4'
  mtl: ! '>=2.0 && <3.0'
  transformers-base: -any
  transformers: ! '>=0.4 && <0.6'
  http-types: ! '>=0.8 && <10.0'
  aeson: ! '>=0.9 && <1.4'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.5.0'
- '1.0.0'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '1.0.0'
description-type: markdown
description: ! "# Req\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/req.svg?style=flat)](https://hackage.haskell.org/package/req)\n[![Stackage
  Nightly](http://stackage.org/package/req/badge/nightly)](http://stackage.org/nightly/package/req)\n[![Stackage
  LTS](http://stackage.org/package/req/badge/lts)](http://stackage.org/lts/package/req)\n[![Build
  Status](https://travis-ci.org/mrkkrp/req.svg?branch=master)](https://travis-ci.org/mrkkrp/req)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/req/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/req?branch=master)\n\n*
  [Motivation and Req vs other libraries](#motivation-and-req-vs-other-libraries)\n*
  [Unsolved problems](#unsolved-problems)\n* [Related packages](#related-packages)\n*
  [Contribution](#contribution)\n* [License](#license)\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\n\nmodule Main (main) where\n\nimport Control.Monad.IO.Class\nimport
  Data.Aeson\nimport Data.Default.Class\nimport Network.HTTP.Req\n\nmain :: IO ()\n--
  You can either make your monad an instance of 'MonadHttp', or use\n-- 'runReq' in
  any IO-enabled monad without defining new instances.\nmain = runReq def $ do\n  let
  payload = object\n        [ \"foo\" .= (10 :: Int)\n        , \"bar\" .= (20 ::
  Int) ]\n  -- One function—full power and flexibility, automatic retrying on timeouts\n
  \ -- and such, automatic connection sharing.\n  r <- req POST -- method\n    (https
  \"httpbin.org\" /: \"post\") -- safe by construction URL\n    (ReqBodyJson payload)
  -- use built-in options or add your own\n    jsonResponse -- specify how to interpret
  response\n    mempty       -- query params, headers, explicit port number, etc.\n
  \ liftIO $ print (responseBody r :: Value)\n```\n\nReq is an easy-to-use, type-safe,
  expandable, high-level HTTP library that\njust works without any fooling around.\n\nWhat
  does the phrase “easy-to-use” mean? It means that the library is\ndesigned to be
  beginner-friendly so it's simple to add to your monad stack,\nintuitive to work
  with, well-documented, and does not get in your way. Doing\nHTTP requests is a common
  task and a Haskell library for this should be very\napproachable and clear to beginners,
  thus certain compromises were made. For\nexample, one cannot currently modify `ManagerSettings`
  of the default\nmanager because the library always uses the same implicit global
  manager for\nsimplicity and maximal connection sharing. There is a way to use your
  own\nmanager with different settings, but it requires a bit more typing.\n\n“Type-safe”
  means that the library is protective and eliminates certain\nclasses of errors.
  For example, we have correct-by-construction URLs, it's\nguaranteed that the user
  does not send the request body when using methods\nlike GET or OPTIONS, and the
  amount of implicit assumptions is minimized by\nmaking the user specify his/her
  intentions in an explicit form (for example,\nit's not possible to avoid specifying
  the body or method of a request).\nAuthentication methods that assume HTTPS force
  the user to use HTTPS at the\ntype level. The library also carefully hides underlying
  types from the\nlower-level `http-client` package because those types are not safe
  enough\n(for example `Request` is an instance of `IsString` and, if it's malformed,\nit
  will blow up at run-time).\n\n“Expandable” refers to the ability to create new components
  for dealing with\nHTTP without having to resort to ugly hacking. For example, it's
  possible to\ndefine your own HTTP methods, create new ways to construct the body
  of a\nrequest, create new authorization options, perform a request in a different\nway,
  and create your own methods to parse and represent a response. As a\nuser extends
  the library to satisfy his/her special needs, the new solutions\nwill work just
  like the built-ins. However, all of the common cases are also\ncovered by the library
  out-of-the-box.\n\n“High-level” means that there are less details to worry about.
  The library\nis a result of my experiences as a Haskell consultant. Working for
  several\nclients, who had very different projects, showed me that the library should\nadapt
  easily to any particular style of writing Haskell applications. For\nexample, some
  people prefer throwing exceptions, while others are concerned\nwith purity. Just
  define `handleHttpException` accordingly when making your\nmonad instance of `MonadHttp`
  and it will play together seamlessly. Finally,\nthe library cuts boilerplate down
  considerably, and helps you write concise,\neasy to read, and maintainable code.\n\nThe
  library uses the following mature packages under the hood to guarantee\nyou the
  best experience:\n\n* [`http-client`](https://hackage.haskell.org/package/http-client)—low
  level\n  HTTP client used everywhere in Haskell.\n* [`http-client-tls`](https://hackage.haskell.org/package/http-client-tls)—TLS\n
  \ (HTTPS) support for `http-client`.\n\nIt's important to note that since we leverage
  well-known libraries that the\nwhole Haskell ecosystem uses, there is no risk in
  using Req. The machinery\nfor performing requests is the same as with `http-conduit`
  and Wreq. The\nonly difference is the API.\n\n## Motivation and Req vs other libraries\n\n*This
  section is my opinion and it contains criticisms of other well-known\nlibraries.
  If you're user/fan of one of these libraries, please remember not\nto react aggressively
  and respect the fact that I may have different views\non API design from yours.*\n\nI
  have spent time to write the library because sending HTTP requests is such\na common
  thing and still there is no high-level library for that in Haskell\nthat I could
  use with pleasure. I'll explain why.\n\nFirst of all, there is `http-client` and
  `http-client-tls`. They just work.\nI have no issues with the libraries except that
  they are too low-level for\nmy taste. Indeed, even the docs say that they are low-level
  and “intended as\na base layer for more user-friendly packages”. This is exactly
  how I use\nthem in Req, as base level. Req is nothing but a different API to\n`http-client`,
  so it only works because of the hard work put into\n`http-client`.\n\n`http-conduit`
  definitely has its place. For one thing it allows you to\nstream request and response
  bodies in constant memory, what other library\nallows you to do that? On the other
  hand if you take a look at\n`Network.HTTP.Simple`, then although it's said that
  it's a “higher level\nAPI”, it's mostly the same as vanilla `http-client` in spirit/approach
  and\njust adds `conduit`-powered functions to perform requests and allows to use\nglobal
  implicit `Manager` (Req does the same). If I tried to frame what\nexactly I don't
  like about `http-conduit` in words, then it would be “the\nway requests are constructed”.
  You set, set, set instead of *being forced*\nto declare necessary bits and *being
  allowed* to declare optional bits in a\nway that their combination is certainly
  valid. And you parse request from a\nstring without the protection of TH that otherwise
  saves the day as in\nYesod.\n\nThen there is Wreq. `wreq` [doesn't see much development\nlately](https://github.com/bos/wreq/issues/93).
  `wreq` is by itself a weird\nlibrary, IMO. You have functions per method—not very
  good, as there may be\nnew methods, like PATCH which is not new but still missing
  (well you have\n`customMethod`, but what is the point of having per-method functions
  if you\nhave a more general way to use any method? you should be able to just insert\nmethods
  in the “argument slot” of `customMethod` and end up with a more\ngeneral solution).
  Now every method function has a companion that takes\n`Options` (like you have `get`
  and `getWith`). Why the duplication? Where is\ngenerality and flexibility? This
  is not all though, because you cannot\nreally use `get` you see in the main module,
  because you want to have\nconnection sharing. Wreq's author does not take the gift
  of automatic\nconnection re-use `Manager` from `http-client` provides, he invents
  the\nwhole new thing of “sessions”. Only inside a session your connections will\nbe
  shared and re-used. However with the session stuff you have yet another\nset of
  per-method functions like `get` and `getWith`—these are different\nones, to be used
  with sessions! Now if you have a multi-threaded app, here\nis a surprise for you:
  you can't share connections between threads as\nconnections are shared only inside
  `withSession` friend and “session will no\nlonger be valid after that function returns”.
  There are valid uses for\nsessions, but the point is that they are just too inconvenient
  for common\ntasks.\n\nIt's funny that one client I worked for had to have his own
  little wrapper\naround `http-client` just because he could not possibly use `wreq`
  and\n`http-client` and friends were too low-level. The previous paragraph is\nextracted
  from a talk with a Haskell developer who works for that client. I\nthought to myself
  “something is wrong with HTTP client libraries in Haskell\nif they had to make a
  wrapper”.\n\nWhat else? I used `servant-client` a couple of times but the amount
  of\nboilerplate it requires is frightening. If you have several query\nparameters,
  and you use just one of them, good luck passing lots of\n`Nothing`s.\n\n## Unsolved
  problems\n\nAWS request signing is problematic because request body can be in the
  form\nof an action to execute (and all that “popper” stuff for streaming), not\njust
  a `ByteString` and so getting its digest (hash) is not trivial without\nrunning
  the action and consuming body in its entirety before the request in\nmade. In Wreq
  the author chose to just use `error` when body is not a\n(strict or lazy) `ByteString`.
  Maybe it's OK for Wreq, but I don't consider\nthis a proper solution for Req as
  we support full variety of body options.\nFor example, what if I want to upload
  1 Gb file to S3? I want to stream it\nin constant memory but at the same time I
  need to calculate its hash before\nI start streaming. One solution to the problem
  seems to be in taking the\nhash explicitly (as an argument of the hypothetical `awsAuth`)
  and making it\na responsibility of the user to calculate the hash correctly. I don't
  like\nthis because it's not user-friendly. So the question stays open, for now\nthere
  is no AWS signing functionality provided out-of-the-box. The best\nsolution for
  talking to AWS is the `amazonka` package so far.\n\n## Related packages\n\nThe following
  packages are designed to be used with Req:\n\n* [`req-conduit`](https://hackage.haskell.org/package/req-conduit)—support\n
  \ for streaming request and response bodies in constant memory.\n\nIf you happen
  to have written a package that adds new features to Req,\nplease submit a PR to
  include it in this list.\n\n## Contribution\n\nIssues, bugs, and questions may be
  reported in [the GitHub issue tracker for\nthis project](https://github.com/mrkkrp/req/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2016–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
