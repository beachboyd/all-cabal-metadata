homepage: http://github.com/nahiluhmot/request-monad
changelog-type: markdown
hash: ff99ea37286d5971f5f52576639942b3993ac808504fae3a6666972896094a45
test-bench-deps: {}
maintainer: Tom Hulihan <hulihan.tom159@gmail.com>
synopsis: A transformer for generic requests
changelog: ! '# 0.3.0.1


  * Change the internal datastructure for `RequestT` from a `data` to a `newtype`


  # 0.3.0.0


  * Use `FreeT` monad to implement `RequestT`

  * Change the type of callback given to `requestT` from `r'' -> m a` to `r'' -> RequestT
  r r'' m a`


  # 0.2.0.0


  * Generalize `mapRequestT` and `mapResponseT` so that requests may be performed
  in middleware


  # 0.1.0.0


  * First public release

  * Add the `MonadRequest` type class

  * Add the `RequestT` monad

  * Initial documentation

'
basic-deps:
  free: ==4.9
  base: ! '>=4.7 && <4.8'
  mtl: ==2.2.*
  transformers: ==0.4.*
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
author: Tom Hulihan
latest: 0.3.0.1
description-type: markdown
description: ! "# request-monad\n\n[Hackage](http://hackage.haskell.org/package/request-monad)\n\nThis
  library exports a monad that can be used to abstract a request sending/response
  handling pattern.\nIt can be used to implement type-transforming middleware, as
  well as a way to easily implement stubbing.\n\n## Installation\n\nFrom the command
  line:\n\n```shell\n$ cabal install request-monad\n```\n\nTo use data types and functions
  export from this library:\n\n```haskell\nimport Control.Monad.Request\n```\n\n##
  Usage\n\nUsing `RequestT r r' m a` abstracts sending requests of type `r`, and handling
  responses of `r'`.\nBelow is an example of using `RequestT` to ask for somebody's
  name and age.\nNote that there is no logic about _how_ to get and return the strings
  in `getNameAndAge`, that's all handled in `prompt`.\n\n```haskell\nimport Control.Monad\nimport
  Control.Monad.Request\nimport System.IO\n\ngetNameAndAge :: Monad m => RequestT
  String String m (String, Int)\ngetNameAndAge = do\n    name <- send \"Name: \"\n
  \   age <- liftM read $ send \"Age: \"\n    return (name, age)\n\nprompt :: String
  -> IO String\nprompt str = putStr str >> hFlush stdout >> getLine\n\nmain :: IO
  ()\nmain = do\n    (name, age) <- runRequestT getNameAndAge prompt\n    putStrLn
  $ name ++ \" is \" ++ show age ++ \" years old.\"\n```\n\nBelow is an example of
  an echo server, which just returns the exact input that it was given.\n\n```haskell\nimport
  Control.Monad.Request\n\npingPong :: Monad m => RequestT String String m (String,
  String)\npingPong = do\n    a <- send \"ping\"\n    b <- send \"pong\"\n    return
  (a, b)\n\nmain :: IO ()\nmain = do\n    let (a, b) = runRequest pingPong id\n    putStrLn
  $ \"a: \" ++ a -- Prints \"a: ping\"\n    putStrLn $ \"b: \" ++ b -- Prints \"b:
  pong\"\n```\n\nAside from implementation-independant requests, this abstraction
  also simplifies adding request/response middleware.\nThe code below adds JSON deserialization
  to each response.\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Control.Monad\nimport
  Control.Monad.Request\nimport qualified Data.Aeson as A\nimport qualified Data.ByteString.Lazy
  as B\n\ndeserialize :: (A.FromJSON a, Monad m) => B.ByteString -> m (Maybe a)\ndeserialize
  = return . A.decode\n\ntryTwice :: Monad m => RequestT B.ByteString B.ByteString
  m (Maybe A.Value)\ntryTwice = mapResponseT deserialize $ do\n    a <- send \"request
  one\"\n    b <- send \"request two\"\n    return $ a `mplus` b\n\nhandleRequest
  :: Monad m => B.ByteString -> B.ByteString\nhandleRequest \"request one\" = return
  \"not json\"\nhandleRequest x             = \"[15]\"\n\nmain :: IO ()\nmain = do\n
  \   let res = runRequest tryTwice handleRequest\n    print $ res -- Prints \"Just
  (Array (fromList [Number 15.0]))\"\n```\n\n## TODO\n\n* Add a strict version of
  `RequestT`\n"
license-name: MIT
