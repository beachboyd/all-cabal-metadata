homepage: ''
changelog-type: markdown
hash: 5c84acad28c4373187fbb12bb251c340518451c204115029d9d05b4d8cfda20a
test-bench-deps: {}
maintainer: Anton Gushcha <ncrashed@protonmail.com>, Vladimir Krutkin <krutkinvs@gmail.com>
synopsis: Routing and retractable back button for reflex-dom
changelog: |
  0.1.7.0
  =======

  * Bump bounds to allow `reflex-0.8`.

  0.1.6.0
  =======

  * Fix compilation under ghcjs

  0.1.5.0
  =======

  * Fix compilation under `reflex-0.7`

  0.1.4.0
  =======

  * Bump version for `reflex`.

  0.1.3.0
  =======

  * Bump version for `reflex-dom`.

  0.1.2.0
  =======

  * Add instance for `MonadReflexCreateTrigger`.

  0.1.1.0
  =======

  * Add instances for `MonadRef`, `HasJSContext`, `HasDocument`.

  0.1.0.0
  =======

  * Initial release.
basic-deps:
  base: '>=4.7 && <4.15'
  ref-tf: '>=0.4 && <0.5'
  containers: '>=0.5 && <0.7'
  mtl: '>=2.1 && <2.3'
  reflex: '>=0.6 && <0.9'
  reflex-dom: '>=0.5 && <0.7'
  jsaddle: '>=0.9 && <0.10'
all-versions:
- 0.1.0.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
author: Anton Gushcha, Aminion, Vladimir Krutkin, Levon Oganyan
latest: 0.1.7.0
description-type: markdown
description: |
  Small library that implements "back" button feature for reflex-dom widgets.
  The core idea of the library is to have reusable widget that maintains history
  of switches and is decoupled from actual implementation of switching widgets.

  The library doesn't use platform specific parts like connection to Android
  system back button or browser back button, but provides functions to bind them
  into your retractable frontend.

  Example of usage:

  ``` haskell
  import Control.Monad
  import Reflex.Dom
  import Reflex.Dom.Retractable

  main :: IO ()
  main = mainWidget $ runRetract frontend

  frontend :: (MonadWidget t m, MonadRetract t m) => m ()
  frontend = void $ retractStack $ pageA 42

  pageA :: (MonadWidget t m, MonadRetract t m) => Int -> m ()
  pageA n = do
     e <- button "Go page B"
     void $ nextWidget $ ffor e $ const Retractable {
         retractableNext = pageB $ n + 1
       , retractablePrev = Just $ pure $ pageA n
       }

  pageB :: (MonadWidget t m, MonadRetract t m) => Int -> m ()
  pageB n = do
    e <- button "Go page A"
    void $ nextWidget $ ffor e $ const  Retractable {
         retractableNext = pageA $ n + 1
       , retractablePrev = Just $ pure $ pageB n
       }
  ```
license-name: MIT
