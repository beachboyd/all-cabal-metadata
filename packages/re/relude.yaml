homepage: https://github.com/kowainik/relude
changelog-type: markdown
hash: 56688e3cf6d5ef6bcfe5032ef7ea105cb9486afdab098c5a3a30b81074f559cf
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  tasty-hedgehog: -any
  unordered-containers: -any
  text: -any
  hedgehog: -any
  doctest: -any
  gauge: -any
  containers: -any
  utf8-string: -any
  relude: -any
  tasty: -any
  Glob: -any
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Custom prelude from Kowainik
changelog: ! "Change log\n==========\n\n0.1.1\n=====\n\n* [#44](https://github.com/kowainik/relude/issues/44)\n
  \ Implement parser deriviation from pretty-printers\n\n0.1.0\n=====\n\n* [#7](https://github.com/kowainik/relude/issues/7):\n
  \ Remove `Container.Class.Container`. Export `Foldable`.\n* [#2](https://github.com/kowainik/relude/issues/2):\n
  \ Remove `microlens` from dependencies.\n* [#10](https://github.com/kowainik/relude/issues/10):\n
  \ Remove `VarArg` module.\n* [#9](https://github.com/kowainik/relude/issues/9):\n
  \ Remove `safe-exceptions` from dependencies. Reexport `Exception` and\n  `SomeException`
  from `Control.Exception` instead.\n* [#11](https://github.com/kowainik/relude/issues/11):\n
  \ Remove `TypeOps` module and `type-operators` dependency.\n* [#13](https://github.com/kowainik/relude/issues/13):\n
  \ Remove `list`, `getContents`, `interact`, `getArgs`, `note` functions.\n  Remove
  `Lifted.ST` module.\n  Rename `Lifted.Env` to `Lifted.Exit`.\n* [#16](https://github.com/kowainik/relude/issues/16):\n
  \ Rename `whenLeft`, `whenRight`, `whenLeftM`, `whenRightM` to\n  `whenLeft_` and
  `whenRight_`, `whenLeftM_` and `whenRightM_`.\n  Add `whenLeft`, `whenRight`, `whenLeftM`,
  `whenRightM` which return\n  the value.\n* [#18](https://github.com/kowainik/relude/issues/18):\n
  \ Add `LazyStrict` type class for conversions.\n* `map` is not `fmap` anymore. Reexport
  `map` from `Data.List`\n* [#12](https://github.com/kowainik/relude/issues/12):\n
  \ Remove `liquid-haskell` support.\n* [#20](https://github.com/kowainik/relude/issues/20):\n
  \ Add `viaNonEmpty` function.\n* [#21](https://github.com/kowainik/relude/issues/21):\n
  \ Add `MonadFail` instance for `Either`.\n* [#17](https://github.com/kowainik/relude/issues/17):\n
  \ Add `foldMapA` and `foldMapM` functions.\n* [#4](https://github.com/kowainik/relude/issues/4):\n
  \ Rename package to `Relude`.\n* [#14](https://github.com/kowainik/relude/issues/14):\n
  \ Add `Relude.Extra.*` modules which are not exported by default but have useful\n
  \ functions.\n* [#8](https://github.com/kowainik/relude/issues/8):\n  Introduce
  `StaticMap` and `DynamicMap` type classes as universal interface for\n  Map-like
  structures.\n\n`relude` uses [PVP Versioning][1].\nThe change log is available [on
  GitHub][2].\n\n[1]: https://pvp.haskell.org\n[2]: https://github.com/kowainik/relude/releases\n"
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.8 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  utf8-string: -any
  ghc-prim: ! '>=0.4.0.0'
  mtl: -any
  hashable: -any
  transformers: -any
  deepseq: -any
all-versions:
- '0.1.0'
- '0.1.1'
author: Stephen Diehl, @serokell, Kowainik
latest: '0.1.1'
description-type: markdown
description: ! "Relude\n=========\n\n[![Build Status](https://travis-ci.org/kowainik/relude.svg?branch=master)](https://travis-ci.org/kowainik/relude)\n[![Hackage](https://img.shields.io/hackage/v/relude.svg)](https://hackage.haskell.org/package/relude)\n[![Stackage
  LTS](http://stackage.org/package/relude/badge/lts)](http://stackage.org/lts/package/relude)\n[![Stackage
  Nightly](http://stackage.org/package/relude/badge/nightly)](http://stackage.org/nightly/package/relude)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n`relude`
  is a custom prelude based on `universum`. `relude` tries to achieve the following
  goals:\n\n1. **Avoid all** [**partial functions**](https://www.reddit.com/r/haskell/comments/5n51u3/why_are_partial_functions_as_in_head_tail_bad/)\n
  \  (like `head :: [a] -> a`). The types of partial functions lie about their\n   behavior
  and usage of such functions can lead to the unexpected bugs. Though\n   you can
  still use some unsafe functions from `Relude.Unsafe` module, but they\n   are not
  exported by default.\n2. **Type-safety**. We like to make invalid states unrepresantable.
  And if it's\n   possible to express this concept through the types then we will
  do it.\n    \n    _Example:_\n    ```haskell\n    whenNotNull :: Applicative f =>
  [a] -> (NonEmpty a -> f ()) -> f ()\n    ```\n    instead of\n    ```haskell\n    whenNotNull
  :: Applicative f => [a] -> ([a] -> f ()) -> f ()\n    ```\n3. **Performance.** Prefer
  `Text` over [`String`](https://www.reddit.com/r/haskell/comments/29jw0s/whats_wrong_with_string/),\n
  \  use spaceleak-free functions (like our custom `sum` and `product`), introduce\n
  \  `{-# INLINE #-}` and `{-# SPECIALIZE #-}` pragmas where appropriate.\n4. **Minimalism**
  (low number of dependencies). We don't force users of `relude` to\n   stick to some
  specific lens or text formatting or logging library.\n5. **Convenience** (like lifted
  to `MonadIO` functions, more reexports). But we\n   want to bring common types and
  functions (like `containers` and `bytestrng`)\n   into scope because they are used
  in almost every application anyways.\n6. **Provide excellent documentation.**\n
  \  * Tutorial\n   * Migration guide from `Prelude`\n   * Haddock with examples for
  (almost) every function\n     (all examples are tested with [`doctest`](http://hackage.haskell.org/package/doctest))\n
  \  * Documentation regarding [internal module structure]((http://hackage.haskell.org/package/relude/docs/Relude.html))\n
  \  * `relude`-specific [HLint](http://hackage.haskell.org/package/hlint) rules:\n
  \    [`.hlint.yaml`](.hlint.yaml)\n7. **User-friendliness.** Ability to quickly
  migrate to `relude` if you're familiar\n   with the common libraries like `text`
  and `containers`.\n8. **Exploration.** Experiment with new ideas and proposals without
  introducing\n   breaking changes.\n\nThis README contains introduction to `Relude`
  and a tutorial on how to use it.\n\nStructure of this tutorial\n--------------------------\n\nThis
  tutorial has several parts:\n\n1. [Motivation.](#motivation-)\n2. [Get started.](#get-started-)\n3.
  [Difference from `Prelude`.](#difference-from-prelude-)\n4. [Reexports.](#reexports-)\n5.
  [What's new?](#whats-new-)\n6. [Migration guide.](#migration-guide-)\n\nThis is
  neither a tutorial on _Haskell_ nor tutorial on each function contained\nin `Relude`.
  For detailed documentation of every function together with examples\nand usage,
  see [_Haddock documentation_](http://hackage.haskell.org/package/relude).\n\nMotivation
  [↑](#structure-of-this-tutorial)\n------------------------------------------\n\nWe
  decided to base `relude` on `universum` due to the following reasons:\n\n1. `universum`
  helps to achieve our goals more than any other custom prelude.\n2. We worked on
  `universum` a lot (just check contributors statistics) and we\n   know its internal
  structure.\n\nThe motivation to create another alternative prelude instead of modifying\nexisting
  one is that it's hard to change preludes in any way. `relude`\nuses approach with
  `Extra.*` modules which are not exported by default so it's\nquite easy to bring
  something new (that satisfies `relude` goals) and let users\ndecide to use it or
  not.\n\nUnlike `universum`, we are:\n\n1. Not trying to replace `Foldable` with
  custom `Container` type class. We only\n   forbid `elem` and `notElem` functions
  for sets due to performance reasons.\n2. Have less dependencies: no `vector`, no
  `microlens`, no `safe-exceptions`, no `type-operators`.\n3. Have a lot of other
  different improvements.\n\nGet started [↑](#structure-of-this-tutorial)\n--------------------------------------------\n\nIf
  you want to start using `relude` in your project and explore it with the help\nof
  compiler, set everything up according to the instructions below.\n\n### `base-noprelude`\n\nThis
  is the recommended way to use custom prelude. It requires you to perform\nthe following
  steps:\n\n1. Replace `base` dependency with corresponding version of `base-noprelude`
  in\n   your `.cabal` file.\n2. Add the following `Prelude` module to your project
  (both to filesystem and to `exposed-modules`):\n   ```haskell\n   module Prelude\n
  \         ( module Relude\n          ) where\n\n   import Relude\n   ```\n3. Optionally
  modify your `Prelude` to include more or less functions. Probably\n   you want to
  hide something from `Relude` module. Or maybe you want to add\n   something from
  `Relude.Extra.*` modules!\n\nThis is a very convenient way to add a custom prelude
  to your project because\nyou don't need to import module manually inside each file
  and enable the\n`NoImplicitPrelude` extension.\n\n### Per-file configuration\n\nDisable
  the built-in prelude at the top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude
  #-}\n```\n\nOr directly in your project `.cabal` file, if you want to use in every
  module by default:\n\n```haskell\ndefault-extensions: NoImplicitPrelude\n```\n\nThen
  add the following import to your modules:\n\n```haskell\nimport Relude\n```\n\nDifference
  from Prelude [↑](#structure-of-this-tutorial)\n--------------------------------------------------------\n\n*
  `head`, `tail`, `last`, `init` work with `NonEmpty a` instead of `[a]`.\n* `undefined`
  triggers a compiler warning, because you probably don't want to\n  leave `undefined`
  in your code. Either use `throwIO`, `Except`, `error` or\n  `bug`.\n* Multiple sorting
  functions are available without imports:\n  + `sortBy :: (a -> a -> Ordering) ->
  [a] -> [a]`: sorts list using given custom comparator.\n  + `sortWith :: Ord b =>
  (a -> b) -> [a] -> [a]`: sorts a list based on some property of its elements.\n
  \ + `sortOn :: Ord b => (a -> b) -> [a] -> [a]`: just like `sortWith`, but more\n
  \   time-efficient if function is calculated slowly (though less\n    space-efficient).
  So you should write `sortOn length` (would sort elements\n    by length) but `sortWith
  fst` (would sort list of pairs by first element).\n* Functions `sum` and `product`
  are strict now, which makes them more efficient.\n* If you try to do something like
  `putStrLn \"hi\"`, you'll get an error message if\n  `OverloadedStrings` is enabled
  – it happens because the compiler doesn't know what\n  type to infer for the string.
  Use `putTextLn` in this case.\n* Since `show` doesn't come from `Show` anymore,
  you need to export `Show` from\n  `Text.Show` module if you want to implement `Show`
  instance manually.\n* You can't call `elem` and `notElem` functions over `Set` and
  `HashSet`. These\n  functions are forbidden for these two types because of the performance
  reasons.\n* `error` takes `Text`.\n* `lookup` doesn't work on list of pairs.\n\nReexports
  [↑](#structure-of-this-tutorial)\n------------------------------------------\n\n###
  Commonly used libraries\n\nFirst of all, we reexport some generally useful modules:
  `Control.Applicative`,\n`Data.Traversable`, `Data.Monoid`, `Control.DeepSeq`, `Data.List`,
  and lots of\nothers. Just remove unneeded imports after importing `Relude` (you
  can use\n`.hlint.yaml` file for this).\n\nThen, some commonly used types: `Map/HashMap/IntMap`,
  `Set/HashSet/IntSet`,\n`Seq`, `Text` and `ByteString` (as well as synonyms `LText`
  and `LByteString`\nfor lazy versions).\n\n`liftIO` and `MonadIO` are exported by
  default. A lot of `IO` functions are\ngeneralized to `MonadIO`.\n\n`deepseq` is
  exported. For instance, if you want to force deep evaluation of\nsome value (in
  IO), you can write `evaluateNF a`. WHNF evaluation is possible\nwith `evaluateWHNF
  a`.\n\nWe also reexport big chunks of these libraries: `mtl`, `stm`.\n\n[`Bifunctor`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Bifunctor.html)\ntype
  class with useful instances is exported.\n\n* `first` and `second` functions apply
  a function to first/second part of a tuple (for tuples).\n* `bimap` takes two functions
  and applies them to first and second parts respectively.\n\n### Text\n\nWe export
  `Text` and `LText`, and some functions work with `Text` instead of `String` –\nspecifically,
  IO functions (`readFile`, `putStrLn`, etc) and `show`. In fact, `show`\nis polymorphic
  and can produce strict or lazy `Text`, `String`, or `ByteString`.\nAlso, `toText/toLText/toString`
  can convert `Text|LText|String` types to\n`Text/LText/String`. If you want to convert
  to and from `ByteString` use\n`encodeUtf8/decodeUtf8` functions.\n\n### Debugging
  and `undefined`s\n\n`trace`, `traceM`, `traceShow`, etc. are available by default.
  GHC will warn you\nif you accidentally leave them in code, however (same for `undefined`).\n\nWe
  also have `data Undefined = Undefined` (which, too, comes with warnings).\n\n###
  Exceptions\n\nTODO: write about reexports, `Bug` and `Exc` pattern.\n\nWhat's new?
  [↑](#structure-of-this-tutorial)\n--------------------------------------------\n\nFinally,
  we can move to part describing the new cool features we bring with `relude`.\n\n*
  Safe analogue for `head` function: `safeHead :: [a] -> Maybe a` or you can\n  use
  our `viaNonEmpty` function to get `Maybe a`: `viaNonEmpty head :: [a] -> Maybe a`.\n*
  `uncons` splits a list at the first element.\n* `ordNub` and `sortNub` are _O(n
  log n)_ versions of `nub` (which is quadratic)\n  and `hashNub` and `unstableNub`
  are almost _O(n)_ versions of `nub`.\n* `(&)` – reverse application. `x & f & g`
  instead of `g $ f $ x` is useful sometimes.\n* `whenM`, `unlessM`, `ifM`, `guardM`
  are available and do what you expect\n  them to do (e.g. `whenM (doesFileExist \"foo\")`).\n*
  General fold functions:\n  ```haskell\n  foldMapA :: (Monoid b, Applicative m, Foldable
  f) => (a -> m b) -> f a -> m b\n  foldMapM :: (Monoid b, Monad m, Foldable f) =>
  (a -> m b) -> f a -> m b\n  ```\n* `readMaybe` and `readEither` are like `read`
  but total and give either\n  `Maybe` or `Either` with parse error.\n* `when(Just|Nothing|Left|Right|NotEmpty)[M][_]`\n
  \ let you conditionally execute something. Before:\n\n  ```haskell\n  case mbX of\n
  \     Nothing -> return ()\n      Just x  -> f x\n  ```\n\n  After:\n\n  ```haskell\n
  \ whenJust mbX $ \\x ->\n      f x\n  ```\n\n* `for_` for loops. There's also `forM_`
  but `for_` looks a bit nicer.\n\n  ```haskell\n  for_ [1..10] $ \\i -> do\n      ...\n
  \ ```\n\n* `andM`, `allM`, `anyM`, `orM` are monadic version of corresponding functions
  from `base`.\n\n* Conversions between `Either` and `Maybe` like `rightToMaybe` and
  `maybeToLeft`\n  with clear semantic.\n* `using(Reader|State)[T]` functions as aliases
  for `flip run(Reader|State)[T]`.\n* [`One` type class](src/Relude/Container/One.hs)\n
  \ for creating singleton containers. Even monomorhpic ones like `Text`.\n* [`StaticMap`
  and `DynamicMap`type classes](src/Relude/Extra/Map.hs) as a\n  general interface
  for `Map`-like data structures.\n* `evaluateWHNF` and `evaluateNF` functions as
  clearer and lifted aliases for\n  `evaluate` and `evaluate . force`.\n* `MonadFail`
  instance for `Either`.\n\nMigration guide [↑](#structure-of-this-tutorial)\n------------------------------------------------\n\nIn
  order to replace default `Prelude` with `relude` you should start with instructions
  given in\n[_get started_](#get-started-) section.\n\nThis section describes what
  you need to change to make your code compile with `relude`.\n\n1. Enable `-XOverloadedStrings`
  extension by default for your project.\n2. Since `head`, `tail`, `last` and `init`
  work for `NonEmpty` you should\n   refactor your code in one of the multiple ways
  described below:\n   1. Change `[a]` to `NonEmpty a` where it makes sense.\n   2.
  Use functions which return `Maybe`. There is the `viaNonEmpty` function for this.\n
  \     And you can use it like `viaNonEmpty last l`.\n       + `viaNonEmpty head
  l` is `safeHead l`\n       + `tail` is `drop 1`. It's almost never a good idea to
  use `tail` from `Prelude`.\n   3. Add `import qualified Relude.Unsafe as Unsafe`
  and replace function with qualified usage.\n3. If you use `fromJust` or `!!` you
  should use them from `import qualified Relude.Unsafe as Unsafe`.\n4. If you use
  `foldr` or `forM_` or similar for something like `Maybe a` or\n   `Either a b` it's
  recommended to replace usages of such function with\n   monomorhpic alternatives:\n
  \  * `Maybe`\n     + `(?:)          :: Maybe a -> a -> a`\n     + `fromMaybe     ::
  a -> Maybe a -> a`\n     + `maybeToList   :: Maybe a -> [a]`\n     + `maybeToMonoid
  :: Monoid m => Maybe m -> m`\n     + `maybe         :: b -> (a -> b) -> Maybe a
  -> b`\n     + `whenJust      :: Applicative f => Maybe a -> (a -> f ()) -> f ()`\n
  \    + `whenJustM     :: Monad m => m (Maybe a) -> (a -> m ()) -> m ()`\n\n   *
  `Either`\n     + `fromLeft   :: a -> Either a b -> a`\n     + `fromRight  :: b ->
  Either a b -> b`\n     + `either     :: (a -> c) -> (b -> c) -> Either a b -> c`\n
  \    + `whenRight_  :: Applicative f => Either l r -> (r -> f ()) -> f ()`\n     +
  `whenRightM_ :: Monad m => m (Either l r) -> (r -> m ()) -> m ()`\n\n5. Forget about
  `String` type.\n   + Replace `putStr` and `putStrLn` with `putText` and `putTextLn`.\n
  \  + Replace `(++)` with `(<>)` for `String`-like types.\n   + Try to use [`fmt`](http://hackage.haskell.org/package/fmt)
  library if you need to construct messages.\n   + Use `toText/toLText/toString` functions
  to convert to `Text/LazyText/String` types.\n   + Use `encodeUtf8/decodeUtf8` to
  convert to/from `ByteString`.\n6. Run `hlint` using `.hlint.yaml` file from `relude`
  package to cleanup code and imports.\n"
license-name: MIT
