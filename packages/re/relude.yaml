homepage: https://github.com/kowainik/relude
changelog-type: markdown
hash: 2d31e2536b43625176f124bdbcf9d5dbae60084c9ec93c66663436033e6eeaef
test-bench-deps:
  bytestring: -any
  base: ! '>=4.9 && <5'
  tasty-hedgehog: -any
  unordered-containers: -any
  text: -any
  hedgehog: ! '>=0.6'
  doctest: -any
  gauge: -any
  containers: -any
  relude: -any
  tasty: -any
  Glob: -any
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Custom prelude from Kowainik
changelog: ! "# Change log\n\nUnreleased\n====\n\n0.4.0 â€” Nov 6, 2018\n=====\n\n*
  [#70](https://github.com/kowainik/relude/issues/70):\n  Reexport `Contravariant`
  for GHC >= 8.6.1.\n* [#103](https://github.com/kowainik/relude/pull/104):\n  Drop
  `utf8-string` dependency and improve performance of conversion functions.\n* [#98](https://github.com/kowainik/relude/issues/98):\n
  \ Reexport `Bifoldable` related stuff from `base`.\n* [#99](https://github.com/kowainik/relude/issues/99):\n
  \ Reexport `Bitraversable` related stuff from `base`.\n* [#100](https://github.com/kowainik/relude/issues/100):\n
  \ Add `Relude.Extra.Validation` with `Validation`data type.\n* [#89](https://github.com/kowainik/relude/issues/81):\n
  \ Add `Relude.Extra.Type` module containing a `typeName` function.\n* [#92](https://github.com/kowainik/relude/issues/92)\n
  \ Add `Relude.Extra.Tuple` module, containing\n  `dupe`, `mapToFst`, `mapToSnd`,
  and `mapBoth` functions.\n* [#97](https://github.com/kowainik/relude/issues/97):\n
  \ Add `(&&^)` and `(||^)` operators.\n* [#81](https://github.com/kowainik/relude/issues/81):\n
  \ Add `asumMap` to `Foldable` functions.\n* [#80](https://github.com/kowainik/relude/issues/80):\n
  \ Add hlint rules for `whenLeft`, `whenLeftM`, `whenRight` and `whenRightM`.\n*
  [#79](https://github.com/kowainik/relude/issues/79):\n  Add HLint rules for `One`
  typeclass.\n* Remove `openFile` and `hClose`.\n* [#83](https://github.com/kowainik/relude/pull/83):\n
  \ Make documentation for `nub` functions prettier.\n* [#109](https://github.com/kowainik/relude/issues/109):\n
  \ Use Dhall v3.0.0 for hlint file generation.\n\n0.3.0\n=====\n\n* [#41](https://github.com/kowainik/relude/issues/41):\n
  \ Add `Foldable1`.\n* [#64](https://github.com/kowainik/relude/issues/64):\n  Remove
  `Print` typeclass.\n  Add `put[L]BS[Ln]` functions.\n  `trace` functions now take
  `String` as argument instead of `Text`.\n\n  **Important:** this is a breaking change.
  If you used polymorphic `putStrLn`\n  you need to remove type application or switch
  to one of the monomorphic\n  functions. Also, you can't abstract over `Print` typeclass
  anymore.\n* [#66](https://github.com/kowainik/relude/issues/66):\n  Export `(>>>)`
  and `(<<<)` from `Control.Category`.\n* [#59](https://github.com/kowainik/relude/issues/59):\n
  \ Introduce `flap` function and its operator version `??`.\n* [#64](https://github.com/kowainik/relude/issues/64):\n
  \ Improve performance of functions from `Foldable1`.\n  Add `foldl1'` function.\n*
  Reexport `uncons` from `base`.\n* Rewrite `die` implementation to use `die` from
  `base`.\n* [#19](https://github.com/kowainik/relude/issues/19):\n  Rewrite `.hlint.yaml`
  to Dhall.\n* Move `stdin`- and `stdout`-related functions to new module `Relude.Lifted.Terminal`.\n*
  [#67](https://github.com/kowainik/relude/issues/67):\n  Add HLint rules for `put*`
  functions.\n* [#22](https://github.com/kowainik/relude/issues/22):\n  `readFile`,
  `writeFile` and `appendFile` now work with `String`.\n  Add lifted version of `hClose`.\n
  \ Add `readFile`, `writeFile` and `appendFile` alternatives for `Text` and `ByteString`.\n*
  [#61](https://github.com/kowainik/relude/issues/61):\n  Add `under2` and `underF2`
  functions to `Relude.Extra.Newtype`.\n* [#60](https://github.com/kowainik/relude/issues/60):\n
  \ Add `hoistMaybe` and `hoistEither` functions.\n\n0.2.0\n=====\n\n* [#43](https://github.com/kowainik/relude/issues/43):\n
  \ Implement `Relude.Extra.Newtype` module.\n* [#46](https://github.com/kowainik/relude/issues/46):\n
  \ Add a function that returns its own name.\n* [#48](https://github.com/kowainik/relude/issues/48):\n
  \ Export `<&>` from `base`.\n  Also reexport `fromLeft` and `fromRight` from `base`
  where possible.\n* [#49](https://github.com/kowainik/relude/issues/49):\n  Speed
  up and refactor property tests.\n* [#54](https://github.com/kowainik/relude/issues/54):\n
  \ Improve documentation.\n  Add more examples to documentation and more tests.\n
  \ Reexport `withReader` and `withReaderT`.\n  Remove `safeHead`.\n  Rename `Relude.List.Safe`
  to `Relude.List.NonEmpty`.\n\n0.1.1\n=====\n\n* [#44](https://github.com/kowainik/relude/issues/44):\n
  \ Implement parser deriviation from pretty-printers.\n\n0.1.0\n=====\n\n* [#7](https://github.com/kowainik/relude/issues/7):\n
  \ Remove `Container.Class.Container`. Export `Foldable`.\n* [#2](https://github.com/kowainik/relude/issues/2):\n
  \ Remove `microlens` from dependencies.\n* [#10](https://github.com/kowainik/relude/issues/10):\n
  \ Remove `VarArg` module.\n* [#9](https://github.com/kowainik/relude/issues/9):\n
  \ Remove `safe-exceptions` from dependencies. Reexport `Exception` and\n  `SomeException`
  from `Control.Exception` instead.\n* [#11](https://github.com/kowainik/relude/issues/11):\n
  \ Remove `TypeOps` module and `type-operators` dependency.\n* [#13](https://github.com/kowainik/relude/issues/13):\n
  \ Remove `list`, `getContents`, `interact`, `getArgs`, `note` functions.\n  Remove
  `Lifted.ST` module.\n  Rename `Lifted.Env` to `Lifted.Exit`.\n* [#16](https://github.com/kowainik/relude/issues/16):\n
  \ Rename `whenLeft`, `whenRight`, `whenLeftM`, `whenRightM` to\n  `whenLeft_` and
  `whenRight_`, `whenLeftM_` and `whenRightM_`.\n  Add `whenLeft`, `whenRight`, `whenLeftM`,
  `whenRightM` which return\n  the value.\n* [#18](https://github.com/kowainik/relude/issues/18):\n
  \ Add `LazyStrict` type class for conversions.\n* `map` is not `fmap` anymore. Reexport
  `map` from `Data.List`\n* [#12](https://github.com/kowainik/relude/issues/12):\n
  \ Remove `liquid-haskell` support.\n* [#20](https://github.com/kowainik/relude/issues/20):\n
  \ Add `viaNonEmpty` function.\n* [#21](https://github.com/kowainik/relude/issues/21):\n
  \ Add `MonadFail` instance for `Either`.\n* [#17](https://github.com/kowainik/relude/issues/17):\n
  \ Add `foldMapA` and `foldMapM` functions.\n* [#4](https://github.com/kowainik/relude/issues/4):\n
  \ Rename package to `Relude`.\n* [#14](https://github.com/kowainik/relude/issues/14):\n
  \ Add `Relude.Extra.*` modules which are not exported by default but have useful\n
  \ functions.\n* [#8](https://github.com/kowainik/relude/issues/8):\n  Introduce
  `StaticMap` and `DynamicMap` type classes as universal interface for\n  Map-like
  structures.\n\n`relude` uses [PVP Versioning][1].\nThe change log is available [on
  GitHub][2].\n\n[1]: https://pvp.haskell.org\n[2]: https://github.com/kowainik/relude/releases\n"
basic-deps:
  bytestring: ^>=0.10
  stm: ! '>=2.4 && <2.6'
  base: ! '>=4.9 && <5'
  unordered-containers: ! '>=0.2.7 && <0.3'
  text: ^>=1.2
  containers: ! '>=0.5.7 && <0.7'
  ghc-prim: ! '>=0.4.0.0 && <0.6'
  mtl: ^>=2.2
  hashable: ^>=1.2
  transformers: ^>=0.5
  deepseq: ^>=1.4
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.4.0'
author: Stephen Diehl, @serokell, Kowainik
latest: '0.4.0'
description-type: markdown
description: ! "# Relude\n\n![Relude: cyclone logo](https://user-images.githubusercontent.com/4276606/44077619-d2abb39a-9fd6-11e8-9d9f-cc57a9d03fa0.png)\n[![Build
  Status](https://travis-ci.org/kowainik/relude.svg?branch=master)](https://travis-ci.org/kowainik/relude)\n[![Hackage](https://img.shields.io/hackage/v/relude.svg)](https://hackage.haskell.org/package/relude)\n[![Stackage
  LTS](http://stackage.org/package/relude/badge/lts)](http://stackage.org/lts/package/relude)\n[![Stackage
  Nightly](http://stackage.org/package/relude/badge/nightly)](http://stackage.org/nightly/package/relude)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/relude.svg)](http://packdeps.haskellers.com/reverse/relude)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n`relude`
  is a custom prelude, an alternative to default `Prelude`.\n`relude` tries to achieve
  the following goals:\n\n1. **Avoid all** [**partial functions**](https://www.reddit.com/r/haskell/comments/5n51u3/why_are_partial_functions_as_in_head_tail_bad/)\n
  \  (like `head :: [a] -> a`). The types of partial functions lie about their\n   behavior
  and usage of such functions can lead to the unexpected bugs. Though\n   you can
  still use some unsafe functions from `Relude.Unsafe` module, but they\n   are not
  exported by default.\n2. **Type-safety**. We like to make invalid states unrepresantable.
  And if it's\n   possible to express this concept through the types then we will
  do it.\n\n    _Example:_\n    ```haskell\n    whenNotNull :: Applicative f => [a]
  -> (NonEmpty a -> f ()) -> f ()\n    ```\n    instead of\n    ```haskell\n    whenNotNull
  :: Applicative f => [a] -> ([a] -> f ()) -> f ()\n    ```\n3. **Performance.** Prefer
  `Text` over [`String`](https://www.reddit.com/r/haskell/comments/29jw0s/whats_wrong_with_string/),\n
  \  use spaceleak-free functions (like our custom `sum` and `product`), introduce\n
  \  `{-# INLINE #-}` and `{-# SPECIALIZE #-}` pragmas where appropriate.\n4. **Minimalism**
  (low number of dependencies). We don't force users of `relude` to\n   stick to some
  specific lens or text formatting or logging library.\n5. **Convenience** (like lifted
  to `MonadIO` functions, more reexports). But we\n   want to bring common types and
  functions (like `containers` and `bytestring`)\n   into scope because they are used
  in almost every application anyways.\n6. **Provide excellent documentation.**\n
  \  * Tutorial\n   * Migration guide from `Prelude`\n   * Haddock with examples for
  (almost) every function\n     (all examples are tested with [`doctest`](http://hackage.haskell.org/package/doctest))\n
  \  * Documentation regarding [internal module structure]((http://hackage.haskell.org/package/relude/docs/Relude.html))\n
  \  * `relude`-specific [HLint](http://hackage.haskell.org/package/hlint) rules:\n
  \    [`.hlint.yaml`](.hlint.yaml)\n7. **User-friendliness.** Ability to quickly
  migrate to `relude` if you're familiar\n   with the common libraries like `text`
  and `containers`.\n8. **Exploration.** Experiment with new ideas and proposals without
  introducing\n   breaking changes. `relude` uses the approach with `Extra.*` modules
  which are not\n   exported by default so it's quite easy to bring something new
  and let users\n   decide to use it or not.\n\nThis README contains introduction
  to `Relude` and a tutorial on how to use it.\n\n## Structure of this tutorial\n\nThis
  tutorial has several parts:\n\n1. [Get started.](#get-started-)\n2. [Difference
  from `Prelude`.](#difference-from-prelude-)\n3. [Reexports.](#reexports-)\n4. [What's
  new?](#whats-new-)\n6. [Migration guide.](#migration-guide-)\n7. [For developers.](#for-developers-)\n\nThis
  is neither a tutorial on _Haskell_ nor tutorial on each function contained\nin `Relude`.
  For detailed documentation of every function together with examples\nand usage,
  see [_Haddock documentation_](http://hackage.haskell.org/package/relude).\n\n##
  Get started [â†‘](#structure-of-this-tutorial)\n\nIf you want to start using `relude`
  in your project and explore it with the help\nof compiler, set everything up according
  to the instructions below.\n\n### base-noprelude\n\nThis is the recommended way
  to use custom prelude. It requires you to perform\nthe following steps:\n\n1. Replace
  `base` dependency with corresponding version of `base-noprelude` in\n   your `.cabal`
  file.\n2. Add a `relude` dependency to your `.cabal` file.\n3. Add the following
  `Prelude` module to your project (both to filesystem and to `exposed-modules`):\n
  \  ```haskell\n   module Prelude\n          ( module Relude\n          ) where\n\n
  \  import Relude\n   ```\n   > **NOTE:** if you use [`summoner`](https://github.com/kowainik/summoner)
  to generate Haskell project,\n   > this tool can automatically create such structure
  for you when you specify custom prelude.\n4. Optionally modify your `Prelude` to
  include more or less functions. Probably\n   you want to hide something from `Relude`
  module. Or maybe you want to add\n   something from `Relude.Extra.*` modules!\n\nThis
  is a very convenient way to add a custom prelude to your project because\nyou don't
  need to import module manually inside each file and enable the\n`NoImplicitPrelude`
  extension.\n\n### Per-file configuration\n\nDisable the built-in prelude at the
  top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude #-}\n```\n\nOr directly
  in your project `.cabal` file, if you want to use in every module by default:\n\n```haskell\ndefault-extensions:
  NoImplicitPrelude\n```\n\nThen add the following import to your modules:\n\n```haskell\nimport
  Relude\n```\n\n## Difference from Prelude [â†‘](#structure-of-this-tutorial)\n\n*
  `head`, `tail`, `last`, `init` work with `NonEmpty a` instead of `[a]`.\n* `undefined`
  triggers a compiler warning, because you probably don't want to\n  leave `undefined`
  in your code. Either use `throwIO`, `Except`, `error` or\n  `bug`.\n* Multiple sorting
  functions are available without imports:\n  + `sortBy :: (a -> a -> Ordering) ->
  [a] -> [a]`: sorts list using given custom comparator.\n  + `sortWith :: Ord b =>
  (a -> b) -> [a] -> [a]`: sorts a list based on some property of its elements.\n
  \ + `sortOn :: Ord b => (a -> b) -> [a] -> [a]`: just like `sortWith`, but more\n
  \   time-efficient if function is calculated slowly (though less\n    space-efficient).
  So you should write `sortOn length` (would sort elements\n    by length) but `sortWith
  fst` (would sort list of pairs by first element).\n* Functions `sum` and `product`
  are strict now, which makes them more efficient.\n* Since `show` doesn't come from
  `Show` anymore, you need to export `Show` from\n  `Text.Show` module if you want
  to implement `Show` instance manually.\n* You can't call `elem` and `notElem` functions
  over `Set` and `HashSet`. These\n  functions are forbidden for these two types because
  of the performance reasons.\n* `error` takes `Text`.\n* `lookup` for lists is not
  exported.\n\n## Reexports [â†‘](#structure-of-this-tutorial)\n\n`relude` reexports
  some parts of the following libraries:\n\n* `base`\n* `containers`\n* `unordered-containers`\n*
  `text`\n* `bytestring`\n* `transformers`\n* `mtl`\n* `deepseq`\n* `stm`\n\nIf you
  want to clean up imports after switching to `relude`, you can use\n`relude`-specific
  [`.hlint.yaml`](.hlint.yaml) configuration for this task.\n\n### base\n\nSome generally
  useful modules from `base` package, like: `Control.Applicative`,\n`Data.Traversable`,
  `Data.Monoid`, `Data.List`, and lots of others.\n\n`liftIO` and `MonadIO` are exported
  by default. A lot of `IO` functions are\ngeneralized to `MonadIO`.\n\n[`Bifunctor`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Bifunctor.html)\ntype
  class with useful instances is exported.\n\n* `first` and `second` functions apply
  a function to first/second part of a tuple (for tuples).\n* `bimap` takes two functions
  and applies them to first and second parts respectively.\n\n`trace`, `traceM`, `traceShow`,
  etc. are available by default. GHC will warn you\nif you accidentally leave them
  in code, however (same for `undefined`).\n\nWe also have `data Undefined = Undefined`
  (which, too, comes with warnings).\n\n`relude` reexports `Exception` type from the
  `base` package and introduces the\n`bug` function as an alternative to `error`.
  There's also a very convenient\n`Exc` pattern-synonym to handle exceptions of different
  types.\n\nSee [`Relude.Exception`](src/Relude/Exception.hs) module for details on
  exceptions.\n\n### containers & unordered-containers\n\nThe following types from
  these two packages are exported:\nThen, some commonly used types:\n\n* Maps: strict
  versions of `Map`, `HashMap`, `IntMap`.\n* Sets: `Set`, `HashSet`, `IntSet`.\n*
  Sequences: `Seq`.\n\n### text & bytestring\n\n`relude` exports `Text` and `ByteString`
  (as well as synonyms `LText` and `LByteString`\nfor lazy versions) and some functions
  work with `Text` instead of `String` â€“\nspecifically, IO functions (`readFile`,
  `putStrLn`, etc) and `show`. In fact, `show`\nis polymorphic and can produce strict
  or lazy `Text`, `String`, or `ByteString`.\nAlso, `toText/toLText/toString` can
  convert `Text|LText|String` types to\n`Text/LText/String`. If you want to convert
  to and from `ByteString` use\n`encodeUtf8/decodeUtf8` functions.\n\n### transforms
  & mtl\n\nThe following parts of these two libraries are exported:\n\n* Transformers:
  `State[T]`, `Reader[T]`, `ExceptT`, `MaybeT`.\n* Classes: `MonadReader`, `MonadState`,
  `MonadError`.\n\n### Deepseq\n\n`deepseq` is exported. For instance, if you want
  to force deep evaluation of\nsome value (in `IO`), you can write `evaluateNF a`.
  WHNF evaluation is possible\nwith `evaluateWHNF a`.\n\n## What's new? [â†‘](#structure-of-this-tutorial)\n\nFinally,
  we can move to part describing the new cool features we bring with `relude`.\n\n###
  Available by default\n\n* Safe analogue for list functions: use `viaNonEmpty` function
  to get `Maybe a`.\n  + `viaNonEmpty head :: [a] -> Maybe a`\n* `uncons` splits a
  list at the first element.\n* `ordNub` and `sortNub` are _O(n log n)_ versions of
  `nub` (which is quadratic)\n  and `hashNub` and `unstableNub` are almost _O(n)_
  versions of `nub`.\n* `(&)` â€“ reverse application. `x & f & g` instead of `g $ f
  $ x` is useful sometimes.\n* `whenM`, `unlessM`, `ifM`, `guardM` are available and
  do what you expect\n  them to do (e.g. `whenM (doesFileExist \"foo\")`).\n* General
  fold functions:\n  ```haskell\n  foldMapA :: (Monoid b, Applicative m, Foldable
  f) => (a -> m b) -> f a -> m b\n  foldMapM :: (Monoid b, Monad m, Foldable f) =>
  (a -> m b) -> f a -> m b\n  ```\n* `readMaybe` and `readEither` are like `read`
  but total and give either\n  `Maybe` or `Either` with parse error.\n* `when(Just|Nothing|Left|Right|NotEmpty)[M][_]`\n
  \ let you conditionally execute something. Before:\n\n  ```haskell\n  case mbX of\n
  \     Nothing -> return ()\n      Just x  -> f x\n  ```\n\n  After:\n\n  ```haskell\n
  \ whenJust mbX $ \\x ->\n      f x\n  ```\n\n* `for_` for loops. There's also `forM_`
  but `for_` looks a bit nicer.\n\n  ```haskell\n  for_ [1..10] $ \\i -> do\n      ...\n
  \ ```\n\n* `andM`, `allM`, `anyM`, `orM` are monadic version of corresponding functions
  from `base`.\n\n* Conversions between `Either` and `Maybe` like `rightToMaybe` and
  `maybeToLeft`\n  with clear semantic.\n* `using(Reader|State)[T]` functions as aliases
  for `flip run(Reader|State)[T]`.\n* [`One` type class](src/Relude/Container/One.hs)\n
  \ for creating singleton containers. Even monomorhpic ones like `Text`.\n* [`StaticMap`
  and `DynamicMap`type classes](src/Relude/Extra/Map.hs) as a\n  general interface
  for `Map`-like data structures.\n* `evaluateWHNF` and `evaluateNF` functions as
  clearer and lifted aliases for\n  `evaluate` and `evaluate . force`.\n* `MonadFail`
  instance for `Either`.\n\n### Need to import explicitly\n\n* Convenient functions
  to work with `(Bounded a, Enum a)` types:\n  1. `universe :: (Bounded a, Enum a)
  => [a`: get all values of the type.\n  2. `inverseMap :: (Bounded a, Enum a, Ord
  k) => (a -> k) -> k -> Maybe a`: convert functions like `show` to parsers.\n* Nice
  helpers to deal with `newtype`s in a more pleasant way:\n\n  ```haskell\n  ghci>
  newtype Foo = Foo Bool deriving Show\n  ghci> under not (Foo True)\n  Foo False\n
  \ ```\n\n* Functions to operate with `CallStack`:\n\n  ```haskell\n  >>> foo ::
  HasCallStack => String; foo = ownName\n  >>> foo\n  \"foo\"\n  ```\n\n* `Foldable1`
  typeclass that contains generalized interface for folding\n  non-empty structures
  like `NonEmpty`.\n* `Validation` data type as an alternative to `Either` when you
  want to combine\n  all errors.\n\nExplore `Extra` modules: [`Relude.Extra`](src/Relude/Extra/)\n\n##
  Migration guide [â†‘](#structure-of-this-tutorial)\n\nIn order to replace default
  `Prelude` with `relude` you should start with instructions given in\n[_get started_](#get-started-)
  section.\n\nThis section describes what you need to change to make your code compile
  with `relude`.\n\n1. Enable `-XOverloadedStrings` extension by default for your
  project.\n2. Since `head`, `tail`, `last` and `init` work for `NonEmpty` you should\n
  \  refactor your code in one of the multiple ways described below:\n   1. Change
  `[a]` to `NonEmpty a` where it makes sense.\n   2. Use functions which return `Maybe`.
  There is the `viaNonEmpty` function for this.\n      And you can use it like `viaNonEmpty
  last l`.\n       + `tail` is `drop 1`. It's almost never a good idea to use `tail`
  from `Prelude`.\n   3. Add `import qualified Relude.Unsafe as Unsafe` and replace
  function with qualified usage.\n3. If you use `fromJust` or `!!` you should use
  them from `import qualified Relude.Unsafe as Unsafe`.\n4. If you use `foldr` or
  `forM_` or similar for something like `Maybe a` or\n   `Either a b` it's recommended
  to replace usages of such function with\n   monomorhpic alternatives:\n   * `Maybe`\n
  \    + `(?:)          :: Maybe a -> a -> a`\n     + `fromMaybe     :: a -> Maybe
  a -> a`\n     + `maybeToList   :: Maybe a -> [a]`\n     + `maybeToMonoid :: Monoid
  m => Maybe m -> m`\n     + `maybe         :: b -> (a -> b) -> Maybe a -> b`\n     +
  `whenJust      :: Applicative f => Maybe a -> (a -> f ()) -> f ()`\n     + `whenJustM
  \    :: Monad m => m (Maybe a) -> (a -> m ()) -> m ()`\n\n   * `Either`\n     +
  `fromLeft    :: a -> Either a b -> a`\n     + `fromRight   :: b -> Either a b ->
  b`\n     + `either      :: (a -> c) -> (b -> c) -> Either a b -> c`\n     + `whenRight_
  \ :: Applicative f => Either l r -> (r -> f ()) -> f ()`\n     + `whenRightM_ ::
  Monad m => m (Either l r) -> (r -> m ()) -> m ()`\n\n5. Forget about `String` type.\n
  \  + Replace `(++)` with `(<>)` for `String`-like types.\n   + Try to use [`fmt`](http://hackage.haskell.org/package/fmt)
  library if you need to construct messages.\n   + Use `toText/toLText/toString` functions
  to convert to `Text/LazyText/String` types.\n   + Use `encodeUtf8/decodeUtf8` to
  convert to/from `ByteString`.\n   + Use `(putStr[Ln]|readFile|writeFile|appendFile)[Text|LText|BS|LBS]`
  functions.\n6. Run `hlint` using `.hlint.yaml` file from `relude` package to cleanup
  code and imports.\n\n## For Developers [â†‘](#structure-of-this-tutorial)\n\n### Generating
  .hlint.yaml\n\nNote, that we are using custom `hlint` setting which are `Relude`
  specific. To\nkeep it up to date don't forget to reflect your changes in this file.
  We are\nusing `Dhall` to maintain the configurations. To use it follow the steps
  below.\n\nFirst time:\n\n```shell\n$ cabal new-install dhall-json\n```\n\nDhall
  3.0.0 is required, so make sure that the previous command installed\ndhall-json
  >= 1.2.4.\n\nTo generate `hlint` file:\n\n```shell\n$ dhall-to-yaml --omitNull <<<
  './hlint/hlint.dhall' > .hlint.yaml\n```\n\nCheck that you have generated valid
  `.hlint.yaml` file without parse errors:\n\n```shell\n$ hlint test/Spec.hs\n```\n\nSee
  our blog post where we describe the details of the implementation for this solution:\n\n*
  [Dhall To HLint](https://kowainik.github.io/posts/2018-09-09-dhall-to-hlint)\n\n\n##
  Acknowledgement\n\nIcons made by [Freepik](http://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)
  is licensed by [CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/).\n"
license-name: MIT
