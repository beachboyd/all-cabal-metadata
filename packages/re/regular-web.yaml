homepage: http://github.com/chriseidhof/regular-web
changelog-type: ''
hash: 104cd4755ee05fdf7aeb4789f1bdc3b2406d11d9d3660398bdd7c28ea771e23b
test-bench-deps: {}
maintainer: Chris Eidhof <chris+hackage@eidhof.nl>
synopsis: Generic programming for the web
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  xhtml: -any
  json: ! '>=0.4.3'
  fclabels: ! '>=0.4.2'
  applicative-extras: -any
  regular: ! '>=0.1.0.2'
  mtl: -any
  formlets: ==0.6.1
all-versions:
- '0.1'
- 0.1.1
author: Chris Eidhof
latest: 0.1.1
description-type: haddock
description: ! 'This package implements generic functions for web programming.

  Based on the @regular@ library [1], we provide generic functions for generating
  @HTML@, @Formlets@, and @JSON@.

  For a larger example, see the @Example.lhs@ [2] file on github.


  1. <http://hackage.haskell.org/package/regular>


  2. <http://github.com/chriseidhof/regular-web/blob/master/Example.lhs>


  /Example/


  Consider the following datatypes:


  > data Person = Person {

  >     _name   :: String

  >   , _age    :: Int

  >   , _isMale :: Bool

  >   , _place  :: Place

  >   }

  > data Place = Place {

  >     _city      :: String

  >   , _country   :: String

  >   , _continent :: String

  > }


  We can now derive a @Regular@ instance for the @Person@ datatype using Template

  Haskell:


  > $(deriveAll ''''Place  "PFPlace")

  > $(deriveAll ''''Person "PFPerson")


  >

  > type instance PF Place  = PFPlace

  > type instance PF Person = PFPerson


  We can construct an example person:


  > location :: Place

  > location = Place "Utrecht" "The Netherlands" "Europe"

  > chris    :: Person

  > chris    = Person "chris" 25 True location


  > And, as an example, we can generate |HTML| and |JSON| values:


  > locationHtml :: X.Html

  > locationHtml = ghtml location


  > personHtml :: X.Html

  > personHtml = ghtml chris


  > locationJSON :: JSValue

  > locationJSON = gto location'
license-name: BSD-3-Clause
