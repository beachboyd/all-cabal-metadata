homepage: https://github.com/parsonsmatt/record-wrangler#readme
changelog-type: markdown
hash: ba0cf2a7cd0ec81b91bac1670329d030aeb14df8fecb9503337a419a75d7dce7
test-bench-deps:
  base: ! '>=4.7 && <5'
  record-wrangler: -any
maintainer: parsonsmatt@gmail.com
synopsis: Alter your records with ease
changelog: |
  # Changelog for record-wrangler

  ## Unreleased changes
basic-deps:
  base: ! '>=4.11 && <5'
  template-haskell: -any
all-versions:
- 0.1.0.0
author: Matt Parsons
latest: 0.1.0.0
description-type: markdown
description: "# record-wrangler\n\n[![Build Status](https://travis-ci.org/parsonsmatt/record-wrangler.svg?branch=master)](https://travis-ci.org/parsonsmatt/record-wrangler)\n\nThis
  package uses `TemplateHaskell` to alter records in ways that may be convenient for
  you.\n\n## Inspiration\n\nLet's say you've got a set of API types and a set of domain
  types.\nThe API types define your HTTP contract, and you generically derive ToJSON
  and FromJSON instances from their field labels.\nThey look like this:\n\n```haskell\ndata
  User = User\n    { id :: Int\n    , name :: String\n    , age :: Int\n    }\n\ndata
  Dog = Dog\n    { id :: Int\n    , name :: String\n    , toy :: FavoriteToy\n    ,
  ownerId :: Int\n    }\n```\n\nThe domain types for your business logic look a little
  different, though.\nThe record fields are prefixed with an `_` underscore character,
  to allow for `lens` derivation.\nWe can pretend they have other differences that
  are relevant to internal details and irrelevant for showing off `record-wrangler`
  if that makes you feel better.\n\n```haskell\ndata Dog = Dog\n    { _id :: Int\n
  \   , _name :: String\n    , _toy :: FavoriteToy\n    , _ownerId :: Int\n    }\n\nmakeLenses
  ''Dog\n\ndata User = User\n    { _id :: Int\n    , _name :: String\n    , _age ::
  Int\n    }\n\nmakeLenses ''User\n```\n\nIf the record fields were the same, then
  we could just write the conversion function using `RecordWildCards` and it'd be
  fine:\n\n```haskell\nconvertUser Api.User{..} = Domain.User{..}\n```\n\nHowever,
  because the field labels are different, we have to do it manually:\n\n```haskell\nconvertUser
  Api.User{..} = Domain.User\n    { _id = id\n    , _name = name\n    , _age = age
  \n    }\n```\n\nThis is annoying and boilerplatey.\nI don't know about you, but
  I hate writing code, for every line of code I write is a chance to mess up.\nLet's
  use `record-wrangler` to make these conversions easier.\n\n```haskell\nwrangle ''Api.User
  defWrangleOpts \n    { fieldLabelModifier = \\fieldStr -> '_' : fieldStr \n    }\n```\n\nThis
  is going to take the `Api.User` type and modify it slightly.\nBy default, we append
  a `'` to the constructor name, type name, and field labels.\nHere, we've decided
  to prepend a `_` character to the field label.\nIt also generates a function `wrangleUserToUser'`
  which converts the old record to the modified one.\n\nWith the power of view patterns,
  our conversion function is now quite concise:\n\n```haskell\nconvertUser :: Api.User
  -> Domain.User\nconvertUser (wrangleUserToUser' -> User'{..}) = Domain.User{..}\n```\n"
license-name: BSD-3-Clause
