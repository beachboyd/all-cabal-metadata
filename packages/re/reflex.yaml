homepage: https://reflex-frp.org
changelog-type: markdown
hash: 8c70a01e93805d69563a4d18d976052d4e5e6f8e8fdc15beff940333dea4c486
test-bench-deps:
  hlint: <2.1 || >=2.2.2
  semialign: -any
  these: -any
  dependent-sum: -any
  monoidal-containers: -any
  split: -any
  stm: -any
  filemanip: -any
  base: -any
  time: -any
  dependent-map: -any
  filepath: -any
  criterion: -any
  process: -any
  ref-tf: -any
  loch-th: -any
  containers: -any
  lens: -any
  bifunctors: -any
  mtl: -any
  reflex: -any
  transformers: -any
  deepseq: -any
  these-lens: -any
  primitive: -any
  directory: -any
maintainer: ryan.trinkle@gmail.com
synopsis: Higher-order Functional Reactive Programming
changelog: |
  # Revision history for reflex

  ## 0.6.3

  * `Data.WeakBag.traverse` and `Data.FastWeakBag.traverse` have been deprecated.
    They are replaced with `Data.WeakBag.traverse_` and `Data.FastWeakBag.traverse_`, respectively.

  * Fixes a bug in `Reflex.Patch.MapWithMove.patchThatSortsMapWith` that was producing invalid `PatchMapWithMove`.

  * Add missing `NotReady` instances:
     - `instance NotReady (SpiderTimeline x) (SpiderHost x)`
     - `instance HasSpiderTimeline x => NotReady (SpiderTimeline x) (PerformEventT (SpiderTimeline x) (SpiderHost x))`

  ## 0.6.2.4

  * Update to monoidal-containers 0.6

  ## 0.6.2.3

  * Add an upper-bound to witherable

  ## 0.6.2.2

  * Support these >= 1. Add `split-these` flag to control whether to use new these/semialign combination or not.

  * Update version bounds to fix some CI failures

  * Add travis CI configuration

  ## 0.6.2.1

  * Generalize `fan` to `fanG` to take a `DMap` with non-`Identity`
    functor:
      * `fan` to `fanG`
      * `EventSelectorG` for `fanG` result selector.

  * Reduce the amount of unsafeCoerce in coercing newtypes under Event/Dynamic/Behavior.
      * Add fused ReaderIO for the purpose of coercion (ReaderT's third argument has nominal role preventing automated coerce)
      * Add incrementalCoercion/coerceIncremental to go with dynamicCoercion/coerceDynamic

  * Generalize merging functions:
    `merge` to `mergeG`,
    `mergeIncremental` to `mergeIncrementalG`,
    `mergeIncrementalWithMove` to `mergeIncrementalWithMoveG`.

  * Generalize distribute function:
      `distributeDMapOverDynPure` to `distributeDMapOverDynPureG`,

  ## 0.6.2.0

  * Fix `holdDyn` so that it is lazy in its event argument
    These produce `DMap`s  whose values needn't be `Identity`.

  * Stop using the now-deprecated `*Tag` classes (e.g., `ShowTag`).

  * Fix `holdDyn` so that it is lazy in its event argument.

  ## 0.6.1.0

  * Re-export all of `Data.Map.Monoidal`

  * Fix `QueryT` and `RequesterT` tests

  ## 0.6.0.0 -- 2019-03-20

  * Deprecate `FunctorMaybe` in favor of `Data.Witherable.Filterable`. We still export `fmapMaybe`, `ffilter`, etc., but they all rely on `Filterable` now.

  * Rename `MonadDynamicWriter` to `DynamicWriter` and add a deprecation for the old name.

  * Remove many deprecated functions.

  * Add a `Num` instance for `Dynamic`.

  * Add `matchRequestsWithResponses` to make it easier to use `Requester` with protocols that don't do this matching for you.

  * Add `withRequesterT` to map functions over the request and response of a `RequesterT`.

  * Suppress nil patches in `QueryT` as an optimization. The `Query` type must now have an `Eq` instance.

  * Add `throttleBatchWithLag` to `Reflex.Time`. See that module for details.
basic-deps:
  semigroupoids: ! '>=4.0 && <6'
  semialign: ! '>=1 && <1.2'
  these: ! '>=1 && <1.1'
  dependent-sum: ! '>=0.6 && <0.7'
  reflection: ==2.1.*
  witherable: ! '>=0.3 && <0.3.2'
  monoidal-containers: ! '>=0.6 && <0.7'
  constraints-extras: ! '>=0.3 && <0.4'
  stm: ! '>=2.4 && <2.6'
  exception-transformers: ==0.4.*
  base: ! '>=4.9 && <4.13'
  time: ! '>=1.4 && <1.9'
  comonad: ! '>=5.0.4 && <5.1'
  dependent-map: ! '>=0.3 && <0.4'
  prim-uniq: ! '>=0.1.0.1 && <0.2'
  syb: ! '>=0.5 && <0.8'
  unbounded-delays: ! '>=0.1.0.0 && <0.2'
  monad-control: ! '>=1.0.1 && <1.1'
  ref-tf: ==0.4.*
  data-default: ! '>=0.5 && <0.8'
  containers: ! '>=0.6 && <0.7'
  haskell-src-exts: ! '>=1.16 && <1.22'
  lens: ! '>=4.7 && <5'
  bifunctors: ! '>=5.2 && <5.6'
  mtl: ! '>=2.1 && <2.3'
  MemoTrie: ==0.6.*
  transformers: ! '>=0.5.6.0 && <0.6'
  random: ==1.1.*
  haskell-src-meta: ! '>=0.6 && <0.9'
  template-haskell: ! '>=2.9 && <2.15'
  primitive: ! '>=0.5 && <0.8'
  profunctors: ! '>=5.3 && <5.5'
all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.0.1
- '0.5'
- 0.5.0.1
- '0.6'
- 0.6.1
- 0.6.2.4
- 0.6.3
author: Ryan Trinkle
latest: 0.6.3
description-type: markdown
description: |
  ## [Reflex](https://reflex-frp.org/)

  [![Hackage](https://img.shields.io/hackage/v/reflex.svg)](http://hackage.haskell.org/package/reflex)

  ### Practical Functional Reactive Programming

  Reflex is a fully-deterministic, higher-order Functional Reactive Programming (FRP) interface and an engine that efficiently implements that interface.

  [Reflex-DOM](https://github.com/reflex-frp/reflex-dom) is a framework built on Reflex that facilitates the development of web pages, including highly-interactive single-page apps.

  A summary of Reflex functions is available in the [quick reference](Quickref.md).

  **Visit https://reflex-frp.org/ for more information, tutorials, documentation and [examples](https://examples.reflex-frp.org/).**

  ### Resources
  [Get started with Reflex](https://github.com/reflex-frp/reflex-platform)

  [/r/reflexfrp](https://www.reddit.com/r/reflexfrp)

  [irc.freenode.net #reflex-frp](http://webchat.freenode.net?channels=%23reflex-frp&uio=d4)

  ### Hacking

  Use the `./scripts/hack-on reflex` script in [Reflex Platform](https://github.com/reflex-frp/reflex-platform) to checkout the source code of `reflex` locally in `reflex-platform/reflex` directory.
  Then do modifications to the source in place, and use the `./try-reflex` or `./scripts/work-on` scripts to create the shell to test your changes.
license-name: BSD-3-Clause
