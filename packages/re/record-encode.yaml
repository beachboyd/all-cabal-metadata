homepage: https://github.com/ocramz/record-encode
changelog-type: ''
hash: 76561b2de9b0d22be6befb0c80ba040b074e5558da160d912b7499d5851371a5
test-bench-deps:
  base: -any
  hspec: -any
  generics-sop: -any
  QuickCheck: -any
  record-encode: -any
  vector: -any
maintainer: ocramz fripost org
synopsis: Generic encoding of records
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  generics-sop: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- 0.2.1
- 0.2.2
author: Marco Zocca
latest: 0.2.2
description-type: markdown
description: ! "# record-encode\n\n[![Build Status](https://travis-ci.org/ocramz/record-encode.png)](https://travis-ci.org/ocramz/record-encode)\n[![Hackage](https://img.shields.io/hackage/v/record-encode.svg)](https://hackage.haskell.org/package/record-encode)\n\nThis
  library provides generic machinery to encode values of some algebraic type as points
  in a vector space.\n\nAnalyzing datasets that have one or more categorical variables
  (that is, values having a sum type) typically requires a series of boilerplate transformations,
  and the `encodeOneHot` function provided here does precisely that.\n\n# Usage example\n\n```\n
  \   {-# language DeriveGeneric -#}\n\n    import qualified GHC.Generics as G\n    import
  qualified Generics.SOP as SOP\n    \n    import Data.Record.Encode\n\n    data X
  = A | B | C deriving (G.Generic)\n    instance SOP.Generic X\n```\n\n```\n    >
  encodeOneHot B\n    OH {oDim = 3, oIx = 1}\n```\n\n\n\n# Acknowledgements\n\nGagandeep
  Bhatia (@gagandeepb) for his GSoC '18 work on `Frames-beam`, Mark Karpov (@mrkkrp)
  for his Template Haskell tutorial, Anthony Cowley (@acowley) for `vinyl` and `Frames`,
  @mniip on Freenode #haskell for helping me better understand what can be done with
  generic programming."
license-name: BSD-3-Clause
