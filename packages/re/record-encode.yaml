homepage: https://github.com/ocramz/record-encode
changelog-type: ''
hash: 96a8a0077f72b2c6f08d1165a127f85b5b7aa84e883b782415e05d6a87d76e5d
test-bench-deps:
  base: -any
  hspec: -any
  generics-sop: -any
  QuickCheck: -any
  record-encode: -any
  vector: -any
maintainer: ocramz fripost org
synopsis: Generic encoding of records
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  generics-sop: -any
  vector: -any
all-versions:
- '0.1.0.0'
author: Marco Zocca
latest: '0.1.0.0'
description-type: markdown
description: ! "# record-encode\n\n[![Build Status](https://travis-ci.org/ocramz/record-encode.png)](https://travis-ci.org/ocramz/record-encode)\n\nThis
  library provides generic machinery to encode values of some algebraic type as points
  in a vector space.\n\nAnalyzing datasets that have one or more categorical variables
  (== values having a sum type) typically requires a series of boilerplate transformations,
  and the `encodeOneHot` function provided here does precisely that.\n\n# Usage example\n\n```\n
  \   {-# language DeriveGeneric -#}\n\n    import qualified GHC.Generics as G\n    import
  qualified Generics.SOP as SOP\n    \n    import Data.Record.Encode\n\n    data X
  = A | B | C deriving (G.Generic)\n    instance SOP.Generic X\n```\n\n```\n    >
  encodeOneHot B\n    [0,1,0]\n```\n\n\n\n# Acknowledgements\n\nGagandeep Bhatia (@gagandeepb)
  for his GSoC '18 work on `Frames-beam`, Mark Karpov (@mrkkrp) for his Template Haskell
  tutorial, Anthony Cowley (@acowley) for `vinyl` and `Frames`, @mniip on Freenode
  #haskell for helping me better understand what can be done with generic programming."
license-name: BSD3
