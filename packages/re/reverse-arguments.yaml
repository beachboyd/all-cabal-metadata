homepage: ''
changelog-type: ''
hash: 3a555ce3962b600b5f94c61985afc6b89658fd478b13892973c55e514e865efa
test-bench-deps: {}
maintainer: anselm.scholl@tu-harburg.de
synopsis: Reverse the arguments of arbitrary functions.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- 0.1.0.0
author: Anselm Jonas Scholl
latest: 0.1.0.0
description-type: markdown
description: ! '# Reversing function arguments


  This module provides the `reverseArgs` function which flips

  the arguments of a function of arbitrary arity. The return

  value of the flipped function can not be fully polymorphic

  as this could imply it is a function.


  Example:


  ```haskell

  myFlip :: (a -> b -> c -> d -> [e]) -> d -> c -> b -> a -> [e]

  myFlip = reverseArgs

  ```


  However, if you supply a proof (of the form `IsFun a ~ ''False`)

  that a is not a function, you can also return a polymorphic type.


  Example:


  ```haskell

  myFlip :: IsFun e ~ ''False => (a -> b -> c -> d -> e) -> d -> c -> b -> a -> e

  myFlip = reverseArgs

  ```'
license-name: BSD-3-Clause
