homepage: https://github.com/mgajda/restartable#readme
changelog-type: markdown
hash: 359eeaa5b7c65b83ed5d26d6082ddec42541aa06cbd876a53507972e5f69acd3
test-bench-deps: {}
maintainer: mjgajda@migamake.com
synopsis: Minimal live coding library for model-view-event-update applications.
changelog: |
  # Changelog for legio-decima

  ## Unreleased changes

  Nov 9 2020, 0.3.0.0
    - Better documentation.

  Nov 9 2020, 0.2.0.0
    - Reduce imports and used langauge extensions.
    - Add property testing function for `Initial`.

  Nov 9 2020, 0.1.0.0
    - First release on Hackage
basic-deps:
  bytestring: '>=0.10.10.1 && <0.11'
  unix: '>=2.7.2.2 && <2.8'
  base: '>=4.7 && <5'
  aeson: '>=1.4.7.1 && <1.5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: MichaÅ‚ J. Gajda
latest: 0.3.0.0
description-type: markdown
description: |+
  # Minimal live coding library for model-view-event-update applications.

  Minimal live coding library.
  It can store model of the model-view-event-update applications.
  It uses `FromJSON` and `ToJSON` with default value
  for absent data elements, and `Generic` parser otherwise:

  ```haskell
  import Control.Restartable.Initially(initially, Initial)

  data MyModel = Model { timestamp :: UTCTime }

  instance ToJSON MyModel where
  instance FromJSON MyModel where
    parseJSON = initially myDefaultValue
  instance Initial MyModel
  ```

  Then in the main module use:

  ```haskell
  import Control.Restartable.Checkpoint(restartable, Ending(..))

  main = restartable "checkpoint.save" myMain

  myMain :: MyModel -> IO (MyModel, Ending)
  ```

  It is preferred to attach initial value to every substructure,
  so whenever it fails to parse the remaining part of the state is still parsed correctly.

license-name: BSD-3-Clause
