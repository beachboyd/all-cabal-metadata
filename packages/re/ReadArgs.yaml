homepage: http://github.com/rampion/ReadArgs
changelog-type: ''
hash: c592c1e87db8e14e82a659e5b8b5d704b2a13263eaaab9934bfe807e8d415d50
test-bench-deps:
  base: ! '>=4.3.1.0 && <5'
  hspec: ! '>=1.3 && <3'
  text: ! '>=0.11.1.13 && <12'
  system-filepath: ! '>=0.4.7 && <0.5'
maintainer: noah.easterly@gmail.com
synopsis: Simple command line argument parsing
changelog: ''
basic-deps:
  base: ! '>=4.3.1.0 && <5'
  text: ! '>=0.11.1.13 && <12'
  system-filepath: ! '>=0.4.7 && <0.5'
all-versions:
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- 1.2.2
- 1.2.3
author: Noah Luck Easterly
latest: 1.2.3
description-type: haddock
description: ! 'ReadArgs provides the @readArgs@ IO action, which lets you tell the
  compiler

  to parse the command line arguments to fit the type signature you give.


  For example @(a :: Int, b :: String, c :: Float) <- readArgs@ would

  parse the first runtime argument as an @Int@, the second as a @String@ (no

  quotes required) and the third as a @Float@.


  If the runtime arguments are incompatible with the type signature,

  then a simple usage statement is given of the types needed.


  Continuing the previous example, if it was used in a

  program named @Example@, the error message for the above

  action would be:


  @

  usage: Example Int String Float

  @


  Any type that has both @Typeable@ and @Read@ instances

  can be used. @Char@, @String@, and @Text@ are handled specially so that

  command line arguments for both do not require quotes (as their

  @Read@ instances do). A special instance is provided for @FilePath@ so

  that no constructor or quotes are required.


  @readArgs@ also supports optional arguments and variadic arguments.

  Optional arguments are specified using @Maybe@, and variadic arguments

  using a list.  @(a :: Int, b :: Maybe String, c :: [Float]) <- readArgs@

  would successfully parse any of the following sets of command line arguments:


  @

  Example 1

  Example 1 2 3 4

  Example 1 foo

  Example 1 foo 2 3 4

  @


  But not


  @

  Example

  Example foo

  Example 1.0

  @


  Usage statements for optional and variadic arguments use command-line

  parlance:


  @

  usage: Example Int [String] [Float..]

  @


  Note that both optional and variadic parsers are greedy by default

  (so @Example 1 2 3 4@ was parsed as @(1, "2", [3.0,4.0])@.  They

  may both be made non-greedy through use of the @NonGreedy@ constructor:


  @

  ( a :: Int

  , NonGreedy b :: NonGreedy Maybe String

  , NonGreedy c :: NonGreedy [] Float

  ) <- readArgs

  @'
license-name: BSD-3-Clause
