homepage: ''
changelog-type: text
hash: 3ce38f1af2edc138b690a138e776637e5fd1ede9ee5151a31c4be77a73133943
test-bench-deps: {}
maintainer: generics@haskell.org
synopsis: Generic programming library for regular datatypes.
changelog: ! "version 0.3.4:\r\n  - Change template-haskell dependency to allow building
  with ghc-7.4.1.\r\n\r\nversion 0.3.3:\r\n  - Change template-haskell dependency
  to allow building with ghc-7.2.1.\r\n\r\nversion 0.3.2:\r\n  - Add missing S case
  to eq.\r\n\r\nversion 0.3.1:\r\n  - Fix a bug in the Template Haskell code (thanks
  to lists@snowlion.nl)\r\n\r\nversion 0.3.0:\r\n  - Remove gdseq (moved to the regular-extras
  package due to the introduction\r\n    of the deepseq dependency).\r\n\r\nversion
  0.2.4:\r\n  - Export Assoc(..) from Generics.Regular.Functions.Crush (thanks to
  Martijn\r\n    van Steenbergen).\r\n\r\nversion 0.2.3:\r\n  - Replaced the flag
  on the cabal package by an explicit test on the ghc\r\n    version. This makes it
  easier to build on ghc-6.12.\r\n\r\nversion 0.2.2:\r\n  - Update to build with ghc-6.12:
  require template-haskell-2.4.*, adapt\r\n    Generics.Regular.TH accordingly and
  use CPP to maintain compatibility with\r\n    ghc-6.10\r\n\r\nversion 0.2.1:\r\n
  \ - Do not export generic equality by default to avoid clashes with Prelude\r\n
  \ - Turn I and K into newtypes\r\n\r\nversion 0.2:\r\n  - Separated generic functions
  per modules\r\n  - Added generic unfold\r\n  - Added record selectors\r\n  - Improved
  generic show, added showsPrec\r\n  - Added generic read\r\n  - Added generic deep
  seq\r\n  - Added constructor names\r\n\r\nversion 0.1: initial release"
basic-deps:
  base: ! '>=4.0 && <5'
  template-haskell: ! '>=2.4 && <2.11'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.4.2
- 0.3.4.3
- 0.3.4.4
author: Jose Pedro Magalhaes
latest: 0.3.4.4
description-type: haddock
description: ! 'This package provides generic functionality for regular datatypes.

  Regular datatypes are recursive datatypes such as lists, binary trees,

  etc. This library cannot be used with mutually recursive datatypes or

  with nested datatypes. The multirec library [1] can deal with mutually

  recursive datatypes.


  This library has been described in the paper:


  *  /A Lightweight Approach to Datatype-Generic Rewriting./

  Thomas van Noort, Alexey Rodriguez, Stefan Holdermans, Johan Jeuring, Bastiaan Heeren.

  ACM SIGPLAN Workshop on Generic Programming 2008.


  More information about this library can be found at

  <http://www.cs.uu.nl/wiki/GenericProgramming/Regular>.


  \[1] <http://hackage.haskell.org/package/multirec>'
license-name: BSD-3-Clause
