homepage: http://github.com/ekmett/representable-tries/
changelog-type: markdown
hash: 1040f3e47c33d77c0a79bf36cfd82a7db4684022e5f5de9b1ebdba94fd1f154c
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Tries from representations of polynomial functors
changelog: ! '3.0.2

  -----

  * Removed intra-package dependencies

  * Added `README.markdown`

  * Added IRC build-bot notification

'
basic-deps:
  semigroupoids: ! '>=3'
  representable-functors: ! '>=3.0.0.1'
  base: ! '>=4 && <5'
  comonad: ! '>=3'
  adjunctions: ! '>=3'
  comonad-transformers: ! '>=3'
  distributive: ! '>=0.2.2'
  semigroups: ! '>=0.8.3.1'
  containers: ! '>=0.3 && <0.6'
  keys: ! '>=3.0.0.1'
  bifunctors: ! '>=3'
  mtl: ! '>=2.0.1 && <2.2'
  transformers: ! '>=0.2 && <0.4'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.3.1
- '0.3'
- 0.3.1
- 0.3.1.1
- 0.3.1.2
- 0.3.2
- 0.3.4
- 0.3.6
- 0.3.7
- 0.5.0
- 0.5.0.1
- 1.8.0
- 1.8.1
- '2.0'
- 2.0.0.1
- 2.0.0.2
- 2.0.1.1
- 2.0.1.2
- 2.0.2
- 2.0.3
- 2.0.4
- 2.0.5
- '2.2'
- 2.2.1
- '2.4'
- 2.4.0.1
- 2.4.0.2
- '2.5'
- '3.0'
- 3.0.1
- 3.0.1.1
- 3.0.2
author: Edward A. Kmett
latest: 3.0.2
description-type: markdown
description: ! 'representable-tries

  ===================


  [![Build Status](https://secure.travis-ci.org/ekmett/representable-functors.png?branch=master)](http://travis-ci.org/ekmett/representable-functors)


  This package provides a simple function memoization scheme based on the notion of
  representable functors.


  In category theory a representable functor (more pedantically a corepresentable
  functor) is one such that `f a` is isomorphic to `x -> a`. We choose the name `Representable`
  here because we are talking about haskell `Functor` instances, and they are all
  covariant, so this is the more natural notion of representability for Haskell.


  Given the existence of representable functors, we can choose a `Traversable` representable
  functor that has our data type as a representation, and use it to memoize functions
  by building

  a data structure that has one place to hold each answer for each possible argument.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD-3-Clause
