homepage: ''
changelog-type: markdown
hash: fb23ddedce2fb458b513b1753c7f80d7835bb69a76283dc1429ef93bae69aa1d
test-bench-deps: {}
maintainer: lukec@themk.net
synopsis: Types that can only be constructed if they match a regular expression
changelog: |
  # Revision history for regex-wrapper

  ## 0.1.0.0 -- 2019-11-11

  * Initial Version released.
basic-deps:
  bytestring: -any
  base: ^>=4.12.0.0
  text: -any
  containers: -any
  string-conv: -any
  regex-tdfa: -any
  hashable: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Luke Clifton
latest: 0.1.0.1
description-type: markdown
description: |
  ### Experimental

  This library allows you to create types that are guaranteed to contain a
  string that matches a given regular expression which is expressed at the
  type level.

  ```haskell
  newtype User = User (Matched String "^[a-zA-Z0-9]{4,15}$")

  parseUser :: String -> Either (RegexError String) User
  parseUser = fmap User . parseMatchedEither

  prettyUser :: User -> String
  prettyUser (User m) = asString m

  main :: IO ()
  main = do
      l <- getLine
      case parseUser l of
          Right user -> putStrLn $ "Hello, " ++ prettyUser user ++ "!"
          Left error -> putStrLn $ "Could not parse username: " ++ prettyRegexError  error
  ```

  ```
  ./prog
  bad
  Could not parse username: The input "bad" did not match the pattern ^[a-zA-Z0-9]{4,15}$
  ```

  ```
  ./prog
  good
  Hello, good!
  ```
license-name: BSD-3-Clause
