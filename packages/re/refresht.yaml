homepage: https://github.com/konn/refresht#readme
changelog-type: ''
hash: 19ca4238f145d7a4cf290139e246d1e61af82a26de02c3dcf09170aa9b823790
test-bench-deps: {}
maintainer: konn.jinro _at_ gmail.com
synopsis: Environment Monad with automatic resource refreshment
changelog: ''
basic-deps:
  exceptions: ! '>=0.8.3 && <0.9'
  base: ! '>=4.9.0.0 && <4.10'
  data-default: ! '>=0.7.1.1 && <0.8'
  refresht: ! '>=0.1.1.0 && <0.2'
  lens: ! '>=4.14 && <5'
  mtl: ! '>=2.2.1 && <2.3'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
author: Hiromi ISHII
latest: '0.1.1.0'
description-type: markdown
description: ! "RefreshT -- Environment Monad with automatic resource refreshment\n==================================================================\n\nOverview\n--------\n`refresht`
  package provides similar interface as `ReaderT`-monad,\nbut it comes with *automatic
  refreshment* mechanism.\nIn other words, the `RefreshT` monad transformer provides
  the\ngeneral way to maintain the *freshness* of the external environment,\nwith
  respoec to the specified condition or exceptions.\n\nThe typical usage is to communicate
  with the server which requires\nperiodic refreshment of access tokens, such as Google
  API.\n\nUsage\n-----\nThe following pseudo-code illustrates the typical usage:\n\n```haskell\nimport
  Control.Monad.Refresh\n\nimport Network.Wreq               (getWith, defaults)\nimport
  Control.Lens               ((&), (.~), (^.))\nimport Data.Time                  (addUTCTime,
  getCurrentTime, UTCTime)\nimport Data.ByetString.Lazy.Char8 (unpack)\nimport Control.Exception
  \         (fromException)\n\ndata User = User { expiration  :: UTCTime\n                 ,
  accessToken :: String\n                 }\n\nmain :: IO ()\nmain = do\n  time <-
  getCurrentTime\n  evalRefreshT conf (User (3600 `addUTCTime` time) \"initialtoken\")
  $ do\n    rsc <- withEnv $ \\User{..} ->\n      getWith (defaults & auth .~ oauth2Bearer
  accessToken)\n              \"https://example.com/api/resource\"\n    putStrLn $
  print rsc\n\nconf :: RefreshSetting User IO\nconf = defaultRefreshSetting\n     &
  refresher         .~ update\n     & shouldRefresh     .~ checkExpr\n     & isRefreshingError
  .~ isRefreshing\n  where\n    shouldRefresh usr = do -- checks expiration\n      now
  <- getCurrentTime\n      return $ now <= expiration usr\n          \n    update
  usr = do\n      -- Refreshed token for the service\n      bdy <- getWith\n        (defaults
  & param \"token\" .~ [accessToken usr])\n        \"https://example.com/api/refresh_token\"\n
  \     let token = unpack $ bdy ^. responseBody\n          usr'  = usr { accessToken
  = token\n                      , expiration = ...\n                      }\n\n      --
  Save updates in local file, or db.\n      writeFile \"database\" (show usr')\n      return
  usr'\n\n    -- 401 Unauthorized exception should cause refreshment\n    isRefreshing
  e =\n      case fromException e of\n        Just Error401 -> True\n        _ ->
  False\n```\n"
license-name: BSD3
