homepage: ''
changelog-type: ''
hash: a2439b1ff68620c1004e36420104d96bb8942395190607f98372f2afec20b31f
test-bench-deps:
  base: ! '>=4.7 && <5'
  remote-monad: ==0.2
  containers: ! '>=0.1 && <0.6'
  quickcheck-instances: ! '>=0.1 && <0.4'
  tasty-quickcheck: ! '>=0.8 && <0.9'
  natural-transformation: ! '>=0.3.1 && <0.4'
  tasty: ! '>=0.8 && <0.12'
  QuickCheck: ==2.8.*
maintainer: andygill@ku.edu
synopsis: An parametrizable Remote Monad, and parametrizable Applicative Functor
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  natural-transformation: ! '>=0.3.1 && <0.4'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.2'
author: Andy Gill, Justin Dawson
latest: '0.2'
description-type: haddock
description: ! 'An implementation of the concepts behind Remote Monads. There is support
  for various bundling strategies.


  @

  &#123;-&#35; LANGUAGE GADTs &#35;-&#125;

  &#123;-&#35; LANGUAGE KindSignatures &#35;-&#125;


  module Main where


  import Control.Natural (nat, (#))

  import Control.Remote.Monad

  import Control.Remote.Monad.Packet.Weak


  data Command :: * where

  &#32;&#32;Say :: String -> Command


  data Procedure :: * -> * where

  &#32;&#32;Temperature :: Procedure Int


  say :: String -> RemoteMonad Command Procedure ()

  say s = command (Say s)


  temperature :: RemoteMonad Command Procedure Int

  temperature = procedure Temperature


  runWP :: WeakPacket Command Procedure a -> IO a

  runWP (Command (Say s))       = print s

  runWP (Procedure Temperature) = return 42


  send :: RemoteMonad Command Procedure a -> IO a

  send = run $ runMonad $ nat runWP


  main = send $ do

  &#32;&#32;say &#34;Howdy doodly do&#34;

  &#32;&#32;say &#34;How about a muffin?&#34;

  &#32;&#32;t <- temperature

  &#32;&#32;say (show t ++ &#34;F&#34;)

  @'
license-name: BSD-3-Clause
