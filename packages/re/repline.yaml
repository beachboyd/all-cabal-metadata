homepage: https://github.com/sdiehl/repline
changelog-type: ''
hash: 0ebbf9a59edb60eeac7e002971d501a81ef633b2dc4db3908d27f30f95e4eac1
test-bench-deps: {}
maintainer: stephen.m.diehl@gmail.com
synopsis: Haskeline wrapper for GHCi-like REPL interfaces.
changelog: ''
basic-deps:
  haskeline: ! '>=0.7 && <0.8'
  base: ! '>=4.6 && <5.0'
  process: ! '>=1.2 && <2.0'
  containers: ! '>=0.5 && <0.7'
  mtl: ! '>=2.2 && <2.3'
all-versions:
- '0.1.0.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.0'
- '0.1.6.0'
- '0.1.7.0'
- '0.2.0.0'
author: Stephen Diehl
latest: '0.2.0.0'
description-type: markdown
description: ! "Repline\n-------\n\n[![Build Status](https://travis-ci.org/sdiehl/repline.svg)](https://travis-ci.org/sdiehl/repline)\n[![Hackage](https://img.shields.io/hackage/v/repline.svg)](https://hackage.haskell.org/package/repline)\n\nSlightly
  higher level wrapper for creating GHCi-like REPL monads that are composable with
  normal MTL\ntransformers. Mostly exists because I got tired of implementing the
  same interface for simple shells over and\nover and decided to canonize the giant
  pile of hacks that I use to make Haskeline work.\n\nUsage\n-----\n\n```haskell\ntype
  Repl a = HaskelineT IO a\n\n-- Evaluation : handle each line user inputs\ncmd ::
  String -> Repl ()\ncmd input = liftIO $ print input\n\n-- Tab Completion: return
  a completion for partial words entered\ncompleter :: Monad m => WordCompleter m\ncompleter
  n = do\n  let names = [\"kirk\", \"spock\", \"mccoy\"]\n  return $ filter (isPrefixOf
  n) names\n\n-- Commands\nhelp :: [String] -> Repl ()\nhelp args = liftIO $ print
  $ \"Help: \" ++ show args\n\nsay :: [String] -> Repl ()\nsay args = do\n  _ <- liftIO
  $ system $ \"cowsay\" ++ \" \" ++ (unwords args)\n  return ()\n\noptions :: [(String,
  [String] -> Repl ())]\noptions = [\n    (\"help\", help)  -- :help\n  , (\"say\",
  say)    -- :say\n  ]\n\nini :: Repl ()\nini = liftIO $ putStrLn \"Welcome!\"\n\nrepl
  :: IO ()\nrepl = evalRepl (pure \">>> \") cmd options (Word completer) ini\n```\n\nTrying
  it out:\n\n```haskell\n$ runhaskell Simple.hs\n# Or if in a sandbox: cabal exec
  runhaskell Simple.hs\nWelcome!\n>>> <TAB>\nkirk spock mccoy\n\n>>> k<TAB>\nkirk\n\n>>>
  spam\n\"spam\"\n\n>>> :say Hello Haskell\n _______________\n< Hello Haskell >\n
  ---------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\
  \      )\\/\\\n                ||----w |\n                ||     ||\n```\n\n\nStateful
  Tab Completion\n-----------------------\n\nQuite often tab completion is dependent
  on the internal state of the Repl so we'd like to query state of the\ninterpreter
  for tab completions based on actions performed themselves within the Repl, this
  is modeleted\nnaturally as a monad transformer stack with ``StateT`` on top of ``HaskelineT``.\n\n```haskell\ntype
  IState = Set.Set String\ntype Repl a = HaskelineT (StateT IState IO) a\n\n-- Evaluation\ncmd
  :: String -> Repl ()\ncmd input = modify $ \\s -> Set.insert input s\n\n-- Completion\ncomp
  :: (Monad m, MonadState IState m) => WordCompleter m\ncomp n = do\n  ns <- get\n
  \ return  $ filter (isPrefixOf n) (Set.toList ns)\n\n-- Commands\nhelp :: [String]
  -> Repl ()\nhelp args = liftIO $ print $ \"Help!\" ++ show args\n\nputs :: [String]
  -> Repl ()\nputs args = modify $ \\s -> Set.union s (Set.fromList args)\n\nopts
  :: [(String, [String] -> Repl ())]\nopts = [\n    (\"help\", help) -- :help\n  ,
  (\"puts\", puts) -- :puts\n  ]\n\nini :: Repl ()\nini = return ()\n\n-- Tab completion
  inside of StateT\nrepl :: IO ()\nrepl = flip evalStateT Set.empty\n     $ evalRepl
  (pure \">>> \") cmd opts (Word comp) init\n```\n\n\nPrefix Completion\n-----------------\n\nJust
  as GHCi will provide different tab completion for kind-level vs type-level symbols
  based on which prefix\nthe user has entered, we can also set up a provide this as
  a first-level construct using a ``Prefix`` tab\ncompleter which takes care of the
  string matching behind the API.\n\n```haskell\ntype Repl a = HaskelineT IO a\n\n--
  Evaluation\ncmd :: String -> Repl ()\ncmd input = liftIO $ print input\n\n-- Prefix
  tab completeter\ndefaultMatcher :: MonadIO m => [(String, CompletionFunc m)]\ndefaultMatcher
  = [\n    (\":file\"    , fileCompleter)\n  , (\":holiday\" , listCompleter [\"christmas\",
  \"thanksgiving\", \"festivus\"])\n  ]\n\n-- Default tab completer\nbyWord :: Monad
  m => WordCompleter m\nbyWord n = do\n  let names = [\"picard\", \"riker\", \"data\",
  \":file\", \":holiday\"]\n  return $ filter (isPrefixOf n) names\n\nfiles :: [String]
  -> Repl ()\nfiles args = liftIO $ do\n  contents <- readFile (unwords args)\n  putStrLn
  contents\n\nholidays :: [String] -> Repl ()\nholidays [] = liftIO $ putStrLn \"Enter
  a holiday.\"\nholidays xs = liftIO $ do\n  putStrLn $ \"Happy \" ++ unwords xs ++
  \"!\"\n\nopts :: [(String, [String] -> Repl ())]\nopts = [\n    (\"file\", files)\n
  \ , (\"holiday\", holidays)\n  ]\n\ninit :: Repl ()\ninit = return ()\n\nrepl ::
  IO ()\nrepl = evalRepl (pure \">>> \") cmd opts (Prefix (wordCompleter byWord) defaultMatcher)
  init\n```\n\nTrying it out:\n\n```haskell\n$ runhaskell Main.hs\n>>> :file <TAB>\nsample1.txt
  sample2.txt\n\n>>> :file sample1.txt\n\n>>> :holiday <TAB>\nchristmas thanksgiving
  festivus\n```\n\nInstallation\n------------\n\n```bash\n$ cabal install repline\n```\n\nLicense\n-------\n\nCopyright
  (c) 2014-2017, Stephen Diehl\nReleased under the MIT License\n"
license-name: MIT
