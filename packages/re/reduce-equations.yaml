homepage: http://chriswarbo.net/projects/repos/reduce-equations.html
changelog-type: ''
hash: 02e495bd32cfe83ce184a3d6e3b7c8b78ad0173cd9ea67f6fe70918e3a6fe224
test-bench-deps:
  MissingH: -any
  bytestring: -any
  reduce-equations: -any
  base: ! '>=4.8 && <4.10'
  text: -any
  quickspec: ==0.9.6
  containers: -any
  haskell-src-exts: ! '>=1.18.2'
  stringable: -any
  tasty-quickcheck: -any
  tasty: ! '>=0.7'
  QuickCheck: ==2.8.2
  aeson: -any
  directory: -any
maintainer: chriswarbo@gmail.com
synopsis: Simplify a set of equations by removing redundancies
changelog: ''
basic-deps:
  bytestring: -any
  reduce-equations: -any
  base: ! '>=4.8 && <4.10'
  text: -any
  quickspec: ==0.9.6
  containers: -any
  haskell-src-exts: ! '>=1.18.2'
  stringable: -any
  mtl: -any
  transformers: -any
  QuickCheck: -any
  aeson: -any
all-versions:
- 0.1.1.0
author: Chris Warburton
latest: 0.1.1.0
description-type: text
description: ! "# Reduce Equations #\n\nThis package provides a command `reduce-equations`
  which reads in a list of\nequations from stdin, performs some simplification, and
  writes the results to\nstdout.\n\nFor example, given the equations `a = b`, `b =
  c` and `a = c`, one of these will\nbe removed as it can be inferred from the other
  two. Similarly, given equations\n`f a = g`, `f b = g` and `a = b`, one of the first
  equations will be removed as\nit can be recovered by subtitution.\n\nAll of the
  real work is done by [QuickSpec](https://hackage.haskell.org/package/quickspec)\nThis
  package just provides stdio and machine-friendly formatting.\n\n## Formats ##\n\nAll
  IO is encoded in JSON. Both stdin and stdout should contain a single array\nof equations.
  The following example gives a single equation, which if written in\na more human-friendly
  form, would be `plus x x = times x 2`:\n\n```\n[\n {\"relation\": \"~=\",\n  \"lhs\":
  \     {\"role\": \"application\",\n               \"lhs\":  {\"role\": \"application\",\n
  \                       \"lhs\":  {\"role\":   \"constant\",\n                                 \"type\":
  \  \"Int -> Int -> Int\",\n                                 \"symbol\": \"plus\"},\n
  \                       \"rhs\":  {\"role\": \"variable\",\n                                 \"type\":
  \"Int\",\n                                 \"id\":   0}},\n               \"rhs\":
  \ {\"role\": \"variable\",\n                        \"type\": \"Int\",\n                        \"id\":
  \  0}},\n  \"rhs\":      {\"role\": \"application\",\n               \"lhs\":  {\"role\":
  \"application\",\n                        \"lhs\":  {\"role\":   \"constant\",\n
  \                                \"type\":   \"Int -> Int -> Int\",\n                                 \"symbol\":
  \"times\"},\n                        \"rhs\":  {\"role\": \"variable\",\n                                 \"type\":
  \"Int\",\n                                 \"id\":   0}},\n               \"rhs\":
  \ {\"role\":   \"constant\",\n                        \"type\":   \"Int\",\n                        \"symbol\":
  \"two\"}}}\n]\n```\n\n### Equations ###\n\nAn equation is an object with the following
  values:\n\n - `relation`: This is used mostly to identify that we've got an equation.
  In\n   practice, this is always `\"~=\"` (what that means is up to you).\n - `lhs`:
  this is a `term`, supposedly the left-hand-side of the equation,\n   although the
  only difference from `rhs` is the name.\n - `rhs`: this is a `term`, just like `lhs`
  except it's the right-hand-side.\n\nExample:\n\n```\n{\"relation\": \"~=\",\n  \"lhs\":
  \    {\"role\": \"application\",\n              \"lhs\":  {\"role\":   \"constant\",\n
  \                      \"type\":   \"Bool -> Bool\",\n                       \"symbol\":
  \"not\"},\n              \"rhs\":  {\"role\": \"application\",\n                       \"lhs\":
  {\"role\":   \"constant\",\n                               \"type\":   \"Bool ->
  Bool\",\n                               \"symbol\": \"not\"},\n                       \"rhs\":
  {\"role\": \"variable\",\n                               \"type\": \"Bool\",\n                               \"id\":
  0}}},\n  \"rhs\":     {\"role\": \"variable\",\n              \"type\": \"Bool\",\n
  \             \"id\":   0}}\n```\n\n### Terms ###\n\nA term is an object containing
  a `role`, which is one of `\"constant\"`,\n`\"variable\"` or `\"application\"`.
  The other fields depend on what the term's\n`role` is:\n\n - Constants\n    - `type`:
  The type of the constant, a string written in Haskell's type\n      notation. This
  is taken from the given function descriptions. For example\n      `\"Int -> (Int
  -> Bool) -> IO Float\"`\n    - `symbol`: The name of the constant, as a string.
  For example `\"reverse\"`.\n - Variables\n    - `type`: The type of the variable,
  a string written in Haskell's type\n      notation. The types can be made up, but
  they should be consistent (e.g.\n      both sides of an equation should have the
  same type; application should be\n      well-typed; etc.). Unification of polymorphic
  types isn't supported; types\n      are identified syntactically. For example `\"[Int]\"`.\n
  \   - `\"id\"`: A numeric ID for the variable. IDs start at `0`. Used to\n      distinguish
  between multiple variables of the same type. Variable ID only\n      matters within
  a single equation. For example, to represent three integer\n      variables we might
  use `{\"role\": \"variable\", \"type\": \"Int\", \"id\":0}`,\n      `{\"role\":
  \"variable\", \"type\": \"Int\", \"id\":1}` and\n      `{\"role\": \"variable\",
  \"type\": \"Int\", \"id\":2}`.\n - Applications\n    - `lhs`: A term representing
  a function to apply.\n    - `rhs`: A term representing the argument to apply the
  `lhs` function to.\n      Functions are curried, so calling with multiple arguments
  should be done\n      via a left-leaning tree.\n\n## Implementation Notes ##\n\nWe
  co-opt the equation-reducing machinery of the\n[QuickSpec](https://hackage.haskell.org/package/quickspec-0.9.6)
  library to do\nthe actual reduction. This relies heavily on existential types and
  Haskell's\n[Typeable](https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Typeable.html)\nmechanism.\n\nSince
  the incoming equations may have arbitrary types, and GHC doesn't let us\ndefine
  custom `Typeable` instances, we perform a conversion step:\n\n - Once an array of
  equations has been parsed, we recurse through the terms and\n   switch out each
  distinct type with a freshly-generated replacement, of the\n   form `Z`, `S Z`,
  `S (S Z)`, etc. (these are just Peano numerals, e.g. see\n   https://en.wikipedia.org/wiki/Successor_function
  )\n - We provide special functions `getRep` and `getVal` to plumb these Peano types\n
  \  into QuickSpec's machinery, convincing it that we have a signature of\n   well-typed
  terms.\n - We reduce the given equations, with their switched-out types, to get
  a\n   reduced set.\n - We switch back the types for presentation purposes, pretty-printing
  to JSON.\n"
license-name: BSD-3-Clause
