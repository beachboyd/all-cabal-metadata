homepage: http://github.com/ekmett/representable-functors/
changelog-type: markdown
hash: f15e598ca712171408d919803a48dcf786c94e9596a65336a3d66d0886ca60c5
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Representable functors
changelog: ! '3.2.0.2

  * Updated array dependency

  * Added proper upper bounds on dependencies


  3.2.0.1

  -------

  * Fixed issue [#1](https://github.com/ekmett/representable-functors/pull/1). Did
  `RULES` parsing change with GHC 7.6.3?


  3.2

  ---

  * Added Day Convolution


  3.1

  ---

  * Required Distributive as a superclass

  * Renamed `Data.Functor.Corepresentable` to `Data.Functor.Contravariant.Representable`
  to finally clean up this long-standing abuse of terminology.


  3.0.1

  -----

  * Removed intra-package dependencies

  * Added `README.markdown`

  * Added IRC build-bot notification

'
basic-deps:
  semigroupoids: ! '>=3 && <4'
  free: ! '>=3 && <4'
  base: ! '>=4 && <5'
  comonad: ! '>=3 && <4'
  comonad-transformers: ! '>=3 && <4'
  distributive: ! '>=0.2.2 && <1'
  semigroups: ! '>=0.8.3.1 && <1'
  array: ! '>=0.3.0.2 && <0.6'
  containers: ! '>=0.3 && <0.6'
  keys: ! '>=3 && <4'
  contravariant: ! '>=0.4.1 && <1'
  mtl: ! '>=2.0.1.0 && <2.2'
  transformers: ! '>=0.2 && <0.4'
  comonads-fd: ! '>=3 && <4'
all-versions:
- 0.1.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0
- 0.3.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.5.0
- 1.8.0
- '2.0'
- 2.0.0.1
- 2.0.0.3
- 2.0.0.4
- 2.0.0.5
- 2.0.1
- 2.0.2
- '2.1'
- 2.1.2
- '2.2'
- 2.2.1
- 2.2.1.1
- '2.4'
- 2.4.0.1
- 2.4.0.2
- '2.5'
- '3.0'
- 3.0.0.1
- 3.0.0.2
- 3.0.0.3
- 3.0.1
- '3.1'
- 3.2.0.1
- 3.2.0.2
author: Edward A. Kmett
latest: 3.2.0.2
description-type: markdown
description: ! 'representable-functors

  ======================


  [![Build Status](https://secure.travis-ci.org/ekmett/representable-functors.png?branch=master)](http://travis-ci.org/ekmett/representable-functors)


  This package provides representable functors for haskell. In category theory a representable
  functor (more pedantically a corepresentable functor) is one such that `f a` is
  isomorphic to `x -> a`. We choose the name `Representable` here because we are talking
  about haskell `Functor` instances, and they are all covariant, so this is the more
  natural notion of representability for Haskell.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD-3-Clause
