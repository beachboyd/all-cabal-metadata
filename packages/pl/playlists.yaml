homepage: https://github.com/pjones/playlists
changelog-type: markdown
hash: 3876dd92d887ec1b48ab1a595c86039e9d5ca0a967c600d9c8e48aa0f6a67ca7
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: ! '>=1.4.0'
  text: -any
  filepath: -any
  doctest: ! '>=0.9.11'
  playlists: -any
maintainer: Peter Jones <pjones@devalot.com>
synopsis: Library and executable for working with playlist files.
changelog: |
  # Version 0.5.0.0 (December 1, 2017)

    * Add support for track length (thanks to Catherine Galkina)

    * Widen dependency versions to latest available.

  # Version 0.4.1.0 (February 5, 2017)

    * Remove redundant constraints as reported by GHC 8.X.

    * Widen dependency versions to latest available.

  # Version 0.4.0.0 (November 21, 2016)

    * Added the `resolve` function.  If you have a playlist that
      contains references to remote playlists, this new function will
      recursively download and process playlists until it has a flat
      playlist with no further remote references.

      See the `playlists-http` package for an example of using the
      `resolve` function.

    * Added the `parserForFormat` function which directly exposes the
      `attoparsec` parser for each playlist type.  This should make it
      easy to write space efficient functions that parse playlists.

  # Version 0.3.0.0 (January 24, 2015)

    * Update dependencies to recent versions (thanks to Wieland Hoffmann).
basic-deps:
  bytestring: ! '>=0.10 && <1.0'
  base: ! '>=4.6 && <5'
  text: ! '>=0.11 && <1.3'
  filepath: ! '>=1.3 && <2.0'
  word8: ! '>=0.0 && <1.0'
  playlists: -any
  attoparsec: ! '>=0.10 && <1.0'
  optparse-applicative: ! '>=0.10 && <0.16'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
author: Peter Jones <pjones@devalot.com>
latest: 0.5.0.0
description-type: markdown
description: |
  # Haskell Playlists Library and Tool

  Playlists is a library for working with media playlist files.  The
  original motivation for the library was extracting URLs for streaming
  radio stations that use PLS and M3U playlist files.

  The package also includes an executable that can dump the URLs from a
  playlist file and convert between playlist file formats.

  ## Supported Formats

    * [PLS] []
    * [M3U and M3U8] [M3U]

  ## Future Plans

  Some playlist files can be really big.  I plan on adding support for
  incremental parsing and generating via [io-streams] [] at some point
  in the future.

  ## Library Example

      import qualified Data.ByteString as BS
      import Text.Playlist

      readPlaylist :: Format -> IO Playlist
      readPlaylist fmt = do
        content <- BS.getContents
        case parsePlaylist fmt content of
          Left err -> fail $ "failed to parse playlist on stdin: " ++ err
          Right x  -> return x


  ## Executable Example

      $ playlist urls --format PLS < somefile.pls

      $ playlist convert --from PLS --to M3U < somefile.pls

  [pls]: http://en.wikipedia.org/wiki/PLS_(file_format)
  [m3u]: http://en.wikipedia.org/wiki/M3U
  [io-streams]: http://hackage.haskell.org/package/io-streams
license-name: BSD-3-Clause
