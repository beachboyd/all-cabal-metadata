homepage: ''
changelog-type: markdown
hash: 1166a00a20a2edc34e9e47651023b4a4fb792da3a86711a053180ccdec09e38f
test-bench-deps:
  streaming: ! '>=0.1.4 && <0.3'
  base: ! '>=4.6 && <5'
  comonad: ==5.*
  doctest: ! '>=0.11'
  containers: ! '>=0.5.5 && <0.7'
  bifunctors: ! '>=5.4 && <5.6'
  tasty-hunit: ! '>=0.9.2'
  transformers: ! '>=0.4.2 && <0.6'
  tasty: ! '>=0.10.1.1'
  profunctors: ! '>=5.2 && <5.4'
maintainer: diaz.carrete@facebook.com
synopsis: Applicative/Arrow for resource estimation and progress tracking.
changelog: ! '2.0.1.0

  =======


  - Deprecated runPlanK in favor of runPlan''.

  - Deprecated planK in favor of plan''.

  - Deprecated planIO in favor of planIO''.


  2.0.0.0

  =======


  BREAKING CHANGES


  - *Lasagne* is now *Sylvan*.

  - runPlanK -> runKPlan

  - unliftPlanK -> unliftKPlan

  - planK -> kplan

  - planKIO -> kplanIO

  - Removed non-essential *paths* function.

  - Added "obligatoriness".


'
basic-deps:
  streaming: ! '>=0.1.4 && <0.3'
  base: ! '>=4.6 && <5'
  comonad: ! '>=5 && <6'
  containers: ! '>=0.5.5 && <0.7'
  bifunctors: ! '>=5.4 && <5.6'
  transformers: ! '>=0.4.2 && <0.6'
  profunctors: ! '>=5.2 && <5.4'
all-versions:
- 1.0.0.0
- 2.0.0.0
- 2.0.0.1
- 2.0.1.0
author: Daniel Diaz
latest: 2.0.1.0
description-type: markdown
description: ! "# plan-applicative\n\nA writer-like Applicative/Arrow for resource
  estimation and progress tracking.\n\n## Motivation\n\nI run scripts in my machine.
  Their logic is simple and predictable, even if the\nsteps are many and take long
  to complete. \n\nThe following infuriating situations happen:\n\n- The script fails
  at minute 45 because of a syntax error.\n- The script fails at minute 45 because
  it requests a missing resource whose\n  availability could have been checked when
  the script started.\n- It is difficult to ascertain how far along the execution
  we are at minute 45.\n\nThe first problem is solved by using a statically typed
  language or, for\ndynamic languages, some kind of [static](https://pypi.python.org/pypi/pyflakes)\n[analysis](https://github.com/bbatsov/rubocop)
  tool.\n\nFor the second problem, we need to have a summary of the resources that
  the\ncomputation will require, before running the computation itself. This can be\ndone
  by hand, adding a new check at the beginning of the script when we change\nsomething
  further down. But it's easy to forget to do so, and the initial\nchecks can become
  out of sync with the main code. It would be nice if each step\nof the computation
  foresaw its own resource needs and these accumulated\nautomatically as we composed
  the steps.\n\nFor the third problem, we need a channel that notifies you whenever
  a step of\nthe computation starts or finishes. Bonus points if nested steps are
  supported.\n\n## Problems\n\nCurrently the *ApplicativeDo* extension doesn't work
  very well with this\npackage's *Applicative* because an extant bug in GHC:\n[#10892](https://ghc.haskell.org/trac/ghc/ticket/10892).
  Sequencing actions\nwhose values are ignored gives an error.\n\n## Inspiration\n\n-
  [StaticArrow](http://hackage.haskell.org/package/arrows-0.4.4.1/docs/Control-Arrow-Transformer-Static.html)\n
  \ from the [arrows](http://hackage.haskell.org/package/arrows) package.\n\n- Not
  exactly an inspiration (as I don't understand the stuff well enough) but\n  Tomas
  Petricek's work on [\"coeffects\"](http://tomasp.net/coeffects/) seems\n  relevant
  for helping applications to \"fail early\". See section 1.1 of his\n  [thesis](http://tomasp.net/academic/theses/coeffects/thesis.pdf).\n\n"
license-name: BSD-3-Clause
