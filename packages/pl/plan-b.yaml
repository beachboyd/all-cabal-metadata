homepage: https://github.com/mrkkrp/plan-b
changelog-type: markdown
hash: 323031a3038598f3d745aeed5f14691080498c2ad89a9d85a78c9a702732710f
test-bench-deps:
  plan-b: -any
  path: ! '>=0.5 && <0.7'
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  path-io: ! '>=1.0.1 && <2.0'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Failure-tolerant file and directory editing
changelog: ! "## Plan B 0.2.1\n\n* Implement `Semigroup` instance for the `PgConfig`
  type.\n\n* Improved documentation and metadata.\n\n## Plan B 0.2.0\n\n* Added `moveByRenaming`
  option to allow move files and directories by\n  renaming. This is not default because
  moving by renaming is not always\n  possible, while moving by coping is always an
  option.\n\n## Plan B 0.1.1\n\n* Fixed the problem with moving of files and directories
  from `/tmp/` to\n  some location not under `/tmp/` resulting in “unsupported operation”\n
  \ exception on Unix. Now they are moved by copying.\n\n## Plan B 0.1.0\n\n* Initial
  release.\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.10'
  path: ! '>=0.5 && <0.7'
  base: ! '>=4.7 && <5.0'
  transformers: ! '>=0.3 && <0.6'
  path-io: ! '>=1.0.1 && <2.0'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '0.2.1'
description-type: markdown
description: ! "# Plan B\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/plan-b.svg?style=flat)](https://hackage.haskell.org/package/plan-b)\n[![Stackage
  Nightly](http://stackage.org/package/plan-b/badge/nightly)](http://stackage.org/nightly/package/plan-b)\n[![Stackage
  LTS](http://stackage.org/package/plan-b/badge/lts)](http://stackage.org/lts/package/plan-b)\n[![Build
  Status](https://travis-ci.org/mrkkrp/plan-b.svg?branch=master)](https://travis-ci.org/mrkkrp/plan-b)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/plan-b/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/plan-b?branch=master)\n\nThis
  is a Haskell library helping perform failure-tolerant operations on\nfiles and directories.\n\n##
  Quick start\n\nThe library allows to create and/or edit files, directories, and
  containers.\nBy “container” we mean archive-like object that can contain representation\nof
  a directory inside it. Consequently, we have six functions available:\n\n* `withNewFile`\n*
  `withExstingFile`\n* `withNewDir`\n* `withExistingDir`\n* `withNewContainer`\n*
  `withExistingContainer`\n\nYou specify name of an object to edit or create, options
  (more on them\nbelow), and an action that gets a `Path` argument with the same type
  as\nobject you intend to edit (we use type-safe file paths\nfrom [`path`](https://hackage.haskell.org/package/path)
  package here to\nprevent a certain class of potential bugs). Then, having that path,
  you can\nperform all actions you want to and if at some point during this editing
  an\nexception is thrown, state of file system is rolled back—you get no\ncorrupted
  files, half-way edited directories, everything is intact as if\nnothing happened
  at all. If, however, the action is executed successfully\n(i.e. no exceptions thrown),
  all your manipulations are reflected in the\nfile system.\n\nThis is a lightweight
  solution that makes it harder to corrupt sensitive\ninformation. And since file
  system exists in the real world, all sorts of\nbad things *can* (and *will*) happen.
  *You should always have plan B.*\n\nTemporary files and back-ups are handled and
  deleted automatically, however\nyou can pass options to change default behaviors.
  Not all options can be\nused with every function, but wrong combinations won't type-check,
  so it's\nOK.\n\nCollection of options is a monoid. `mempty` corresponds to the default\nbehavior,
  while non-standard behavioral deviations can be `mappend`ed to it.\n\nBy default,
  when we want to create a new object and it already exists, we\nget an exception,
  two alternative options exist (only work when you create a\nnew object):\n\n* `overrideIfExist`\n*
  `useIfExist`\n\nThere is no way to prevent exception when you want to *edit* object
  that\ndoes not exist, though.\n\nAll functions make use of temporary directories.
  You can control certain\naspects of this business:\n\n* `tempDir dir`—tells the
  library to create temporary directories and files\n  inside `dir`. By default system's
  standard temporary directory (e.g.\n  `/tmp/` on Unix-like systems) is used.\n\n*
  `nameTemplate template`—specifies template to use for generation of unique\n  file
  and directory names. By default `\"plan-b\"` is used.\n\n* `preserveCorpse`—if you
  add this to options, in case of failure\n  (exception), temporary directory is not
  automatically deleted and can be\n  inspected. However, if operation succeeds, temporary
  directory is *always*\n  deleted.\n\n* `moveByRenaming`—by default files and directories
  are moved by copying,\n  this option enables moving by renaming. If you also specify
  `tempDir` that\n  is on the same disk/partition as the final file you're generating,
  this\n  may speed up things considerably.\n\nThat should be enough for a quick intro,
  for more information regarding\nconcrete functions, consult Haddocks.\n\n## License\n\nCopyright
  © 2016–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
