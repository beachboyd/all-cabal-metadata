homepage: ''
changelog-type: markdown
hash: 63ac617c7a70b3402a6ee4bc58e2c7309305dc35be0c5b9286ec03c73d6389c2
test-bench-deps: {}
maintainer: michael@snoyman.com
synopsis: A standard library for Haskell
changelog: ! '## 0.0


  __NOTE__ All releases beginning with 0.0 are considered

  experimental. Caveat emptor!

'
basic-deps:
  exceptions: -any
  bytestring: -any
  unliftio: ! '>=0.2.4.0'
  unix: -any
  base: <10
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  containers: -any
  typed-process: ! '>=0.2.1.0'
  mtl: -any
  hashable: -any
  deepseq: -any
  microlens: -any
  vector: -any
  directory: -any
all-versions:
- '0.0.0.0'
author: Michael Snoyman
latest: '0.0.0.0'
description-type: markdown
description: ! "# The rio library\n\n*A standard library for Haskell*\n\n![Rio](https://camo.githubusercontent.com/fc162fb0024699c85f00eae769085a5fe528153e/68747470733a2f2f7777772e61687374617469632e636f6d2f70686f746f732f636974792f76692d76363837315f30305f31343030783434322e6a7067)\n\n__NOTE__
  This code is currently in prerelease status, and has been\nreleased as a tech preview.
  A number of us are actively working on\nimproving the project and getting it to
  a useful first release. For\nmore information, see the\n[description of goals](https://github.com/snoyberg/codename-karka#readme)\nand
  the\n[issue tracker for discussions](https://github.com/snoyberg/codename-karka/issues).
  If\nyou're reading this file anywhere but Github, you should probably\n[read the
  Github version instead](https://github.com/commercialhaskell/stack/tree/rio/subs/rio#readme),\nwhich
  will be more up to date.\n\nThe goal of the `rio` library is to help you jump start
  your Haskell\ncoding. It is intended as a cross between:\n\n* Collection of well
  designed, trusted libraries\n* Useful `Prelude` replacement\n* A set of best practices
  for writing production quality Haskell code\n\nYou're free to use any subset of
  functionality desired in your\nproject. This README will guide you through using
  `rio` to its fullest\nextent.\n\n## Standard library\n\nWhile GHC ships with a `base`
  library, as well as another of other\ncommon packages like `directory` and `transformers`,
  there are large\ngaps in functionality provided by these libraries. This choice
  for a\nmore minimalistic `base` is by design, but it leads to some\nunfortunate
  consequences:\n\n* For a given task, it's often unclear which is the right library
  to\n  use\n* When writing libraries, there is often concern about adding\n  dependencies
  to any libraries outside of `base`, due to creating a\n  heavier dependency footprint\n*
  By avoiding adding dependencies, many libraries end up\n  reimplementing the same
  functionality, often with incompatible types\n  and type classes, leading to difficulty
  using libraries together\n\nThis library attempts to define a standard library for
  Haskell. One\nimmediate response may be [XKCD #927](https://xkcd.com/927/):\n\n![XKCD
  Standards](https://imgs.xkcd.com/comics/standards.png)\n\nTo counter that effect,
  this library takes a specific approach: __it\nreuses existing, commonly used libraries__.
  Instead of defining an\nincompatible `Map` type, for instance, we standardize on
  the commonly\nused one from the `containers` library and reexport it from this\nlibrary.\n\nThis
  library attempts to define a set of libraries as \"standard,\"\nmeaning they are
  recommended for use, and should be encouraged as\ndependencies for other libraries.
  It does this by depending on these\nlibraries itself, and reexporting their types
  and functions for easy\nuse.\n\nBeyond the ecosystem effects we hope to achieve,
  this will hopefully\nmake the user story much easier. For a new user or team trying
  to get\nstarted, there is an easy library to depend upon for a large\npercentage
  of common functionality.\n\nSee the dependencies of this package to see the list
  of packages\nconsidered standard. The primary interfaces of each of these packages\nis
  exposed from this library via a `RIO.`-prefixed module reexporting\nits interface.\n\n##
  Prelude replacement\n\nThe `RIO` module works as a prelude replacement, providing
  more\nfunctionality and types out of the box than the standard prelude (such\nas
  common data types like `ByteString` and `Text`), as well as\nremoving common \"gotchas\",
  like partial functions and lazy I/O. The\nguiding principle here is:\n\n* If something
  is safe to use in general and has no expected naming\n  conflicts, expose it from
  `RIO`\n* If something should not always be used, or has naming conflicts,\n  expose
  it from another module in the `RIO.` hierarchy.\n\n## Best practices\n\n__NOTE__
  There is no need to follow any best practices listed here\nwhen using `rio`. However,
  in some cases, `rio` will make design\ndecisions towards optimizing for these use
  cases. And for Haskellers\nlooking for a set of best practices to follow: you've
  come to the\nright place!\n\nFor now, this is just a collection of links to existing
  best practices\ndocuments. We'll expand in the future.\n\n* https://www.fpcomplete.com/blog/2017/07/the-rio-monad\n*
  https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell\n"
license-name: MIT
