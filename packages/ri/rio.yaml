homepage: https://github.com/commercialhaskell/rio#readme
changelog-type: markdown
hash: d3a8a08ca7ce1257c62035fa2b95ce8bda2403c7ebfbe7b32c1efa9174a306e8
test-bench-deps:
  exceptions: -any
  rio: -any
  bytestring: -any
  unliftio: ! '>=0.2.6.0'
  unix: -any
  base: ! '>=4.9 && <10'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  filepath: -any
  process: -any
  containers: -any
  typed-process: ! '>=0.2.2.0'
  mtl: -any
  hashable: -any
  deepseq: -any
  microlens: -any
  primitive: -any
  vector: -any
  directory: -any
maintainer: michael@snoyman.com
synopsis: A standard library for Haskell
changelog: |
  # Changelog for rio

  ## 0.1.8.0

  * Re-export `Control.Monad.State.modify`, `Control.Monad.State.modify'` and `Control.Monad.State.gets` in `RIO.State`

  ## 0.1.7.0

  * Addition of `textDisplay` to `Display` class.

  ## 0.1.6.0

  * Changed `logUseColor` to default to `False` on Windows, even when verbose and on the terminal
  * Add `RIO.File` module which offers a family of file handling functions
    (`withBinaryFileDurable`, `withBinaryFileDurableAtomic`, among others.) with
    better durability and atomicity guarantees

  ## 0.1.5.0

  * Re-export `Numeric.Natural.Natural` [#119](https://github.com/commercialhaskell/rio/issues/119)
  * Re-export `Data.Functor.<&>` from GHC 8.4+, falling back local definition for `base < 4.11` [#117](https://github.com/commercialhaskell/rio/issues/117)
  * Re-export `Data.Proxy.Proxy(..)`
  * Re-export `fromEnum` from RIO, export `toEnum`, `read` and `fromJust` from RIO.Partial
  * Add `noLogging` function to skip logging on specific sub-routines
  * Re-export `Control.Category.>>>`

  ## 0.1.4.0

  * Add `Const` and `Identity`
  * Add `Reader` and `runReader`
  * Add instances for `MonadWriter` and `MonadState` to `RIO` via mutable reference [#103](https://github.com/commercialhaskell/rio/issues/103)

  ## 0.1.3.0

  * Add `newLogFunc` function to create `LogFunc` records outside of a callback scope
  * Allow dynamic reloading of `logMinLevel` and `logVerboseFormat` for the `LogOptions` record
  * Add `foldMapM`
  * Add `headMaybe`, `lastMaybe`, `tailMaybe`, `initMaybe`, `maximumMaybe`, `minimumMaybe`,
    `maximumByMaybe`, `minimumByMaybe` functions to `RIO.List` module (issue #82)
  * Move non partial functions `scanr1` and `scanl1` from `RIO.List.Partial` to `RIO.List` (issue #82)
  * Add `SimpleApp` and `runSimpleApp`
  * Add `asIO`

  ## 0.1.2.0

  * Allow setting usage of code location in the log output

  ## 0.1.1.0

  * Move some accidentally included partial functions

  ## 0.1.0.0

  * Initial stable release

  ## 0.0

  __NOTE__ All releases beginning with 0.0 are considered
  experimental. Caveat emptor!
basic-deps:
  exceptions: -any
  bytestring: -any
  unliftio: ! '>=0.2.6.0'
  unix: -any
  base: ! '>=4.9 && <10'
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  containers: -any
  typed-process: ! '>=0.2.2.0'
  mtl: -any
  hashable: -any
  deepseq: -any
  microlens: -any
  primitive: -any
  vector: -any
  directory: -any
all-versions:
- 0.0.0.0
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
- 0.1.8.0
author: Michael Snoyman
latest: 0.1.8.0
description-type: markdown
description: "# The rio library\n\n*A standard library for Haskell*\n\n![Rio](https://camo.githubusercontent.com/fc162fb0024699c85f00eae769085a5fe528153e/68747470733a2f2f7777772e61687374617469632e636f6d2f70686f746f732f636974792f76692d76363837315f30305f31343030783434322e6a7067)\n\n[![Build
  Status](https://travis-ci.org/commercialhaskell/rio.svg?branch=master)](https://travis-ci.org/commercialhaskell/rio)
  [![Build status](https://ci.appveyor.com/api/projects/status/n6935pmtlry77dmn?svg=true)](https://ci.appveyor.com/project/snoyberg/rio-21tpl)\n\n__NOTE__
  This code is currently in prerelease status, and has been\nreleased as a tech preview.
  A number of us are actively working on\nimproving the project and getting it to
  a useful first release. For\nmore information, see the\n[description of goals](https://github.com/snoyberg/codename-karka#readme)\nand
  the\n[issue tracker for discussions](https://github.com/commercialhaskell/rio/issues).
  If\nyou're reading this file anywhere but Github, you should probably\n[read the
  Github version instead](https://github.com/commercialhaskell/rio#readme),\nwhich
  will be more up to date.\n\nThe goal of the `rio` library is to make it easier to
  adopt Haskell\nfor writing production software.  It is intended as a cross between:\n\n*
  Collection of well designed, trusted libraries\n* Useful `Prelude` replacement\n*
  A set of best practices for writing production quality Haskell code\n\nYou're free
  to use any subset of functionality desired in your\nproject. This README will guide
  you through using `rio` to its fullest\nextent.\n\n## Standard library\n\nWhile
  GHC ships with a `base` library, as well as a number of other\ncommon packages like
  `directory` and `transformers`, there are large\ngaps in functionality provided
  by these libraries. This choice for a\nmore minimalistic `base` is by design, but
  it leads to some\nunfortunate consequences:\n\n* For a given task, it's often unclear
  which is the right library to\n  use\n* When writing libraries, there is often concern
  about adding\n  dependencies to any libraries outside of `base`, due to creating
  a\n  heavier dependency footprint\n* By avoiding adding dependencies, many libraries
  end up\n  reimplementing the same functionality, often with incompatible types\n
  \ and type classes, leading to difficulty using libraries together\n\nThis library
  attempts to define a standard library for Haskell. One\nimmediate response may be
  [XKCD #927](https://xkcd.com/927/):\n\n![XKCD Standards](https://imgs.xkcd.com/comics/standards.png)\n\nTo
  counter that effect, this library takes a specific approach: __it\nreuses existing,
  commonly used libraries__. Instead of defining an\nincompatible `Map` type, for
  instance, we standardize on the commonly\nused one from the `containers` library
  and reexport it from this\nlibrary.\n\nThis library attempts to define a set of
  libraries as \"standard,\"\nmeaning they are recommended for use, and should be
  encouraged as\ndependencies for other libraries. It does this by depending on these\nlibraries
  itself, and reexporting their types and functions for easy\nuse.\n\nBeyond the ecosystem
  effects we hope to achieve, this will hopefully\nmake the user story much easier.
  For a new user or team trying to get\nstarted, there is an easy library to depend
  upon for a large\npercentage of common functionality.\n\nSee the dependencies of
  this package to see the list of packages\nconsidered standard. The primary interfaces
  of each of these packages\nis exposed from this library via a `RIO.`-prefixed module
  reexporting\nits interface.\n\n## Prelude replacement\n\nThe `RIO` module works
  as a prelude replacement, providing more\nfunctionality and types out of the box
  than the standard prelude (such\nas common data types like `ByteString` and `Text`),
  as well as\nremoving common \"gotchas\", like partial functions and lazy I/O. The\nguiding
  principle here is:\n\n* If something is safe to use in general and has no expected
  naming\n  conflicts, expose it from `RIO`\n* If something should not always be used,
  or has naming conflicts,\n  expose it from another module in the `RIO.` hierarchy.\n\n##
  Best practices\n\nBelow is a set of best practices we recommend following. You're\nobviously
  free to take any, all, or none of this. Over time, these\nwill probably develop
  into much more extensive docs. Some of these\ndesign decisions will be catered to
  by choices in the `rio` library.\n\nFor Haskellers looking for a set of best practices
  to follow: you've\ncome to the right place!\n\n### Import practices\n\nThis library
  is intended to provide a fully loaded set of basic\nfunctionality. You should:\n\n*
  Enable the `NoImplicitPrelude` language extension (see below)\n* Add `import RIO`
  as your replacement prelude in all modules\n* Use the `RIO.`-prefixed modules as
  necessary, imported using the\n  recommended qualified names in the modules themselves.
  For example,\n  `import qualified RIO.ByteString as B`. See the module documentation\n
  \ for more information.\n* Infix operators may be imported unqualified, with a separate
  import\n  line if necessary. For example, `import RIO.Map ((?!), (\\\\))`. Do\n
  \ this only if your module contains no overlapping infix names,\n  regardless of
  qualification. For instance, if you are importing both\n  `RIO.Map.\\\\` and `RIO.List.\\\\`
  do not import either one unqualified.\n\n__TODO__ In the future, we may have editor
  integration or external\ntooling to help with import management. Also, see project
  template\ncomments below.\n\n### Language extensions\n\nVery few projects these
  days use bare-bones Haskell 98\nor 2010. Instead, almost all codebases enable some
  set of additional\nlanguage extensions. Below is a list of extensions we recommend
  as a\ngood default, in that these are:\n\n* Well accepted in the community\n* Cause
  little to no code breakage versus leaving them off\n* Are generally considered safe\n\nOur
  recommended defaults are:\n\n```\nAutoDeriveTypeable\nBangPatterns\nBinaryLiterals\nConstraintKinds\nDataKinds\nDefaultSignatures\nDeriveDataTypeable\nDeriveFoldable\nDeriveFunctor\nDeriveGeneric\nDeriveTraversable\nDoAndIfThenElse\nEmptyDataDecls\nExistentialQuantification\nFlexibleContexts\nFlexibleInstances\nFunctionalDependencies\nGADTs\nGeneralizedNewtypeDeriving\nInstanceSigs\nKindSignatures\nLambdaCase\nMonadFailDesugaring\nMultiParamTypeClasses\nMultiWayIf\nNamedFieldPuns\nNoImplicitPrelude\nOverloadedStrings\nPartialTypeSignatures\nPatternGuards\nPolyKinds\nRankNTypes\nRecordWildCards\nScopedTypeVariables\nStandaloneDeriving\nTupleSections\nTypeFamilies\nTypeSynonymInstances\nViewPatterns\n```\n\nNotes
  on some surprising choices:\n\n* `RecordWildCards` is really up for debate. It's
  widely used, but\n  rightfully considered by many to be dangerous. Open question
  about\n  what we do with it.\n* Despite the fact that `OverloadedStrings` can break
  existing code,\n  we recommend its usage to encourage avoidance of the `String`
  data\n  type. Also, for new code, the risk of breakage is much lower.\n* `MonadFailDesugaring`
  helps prevent partial pattern matches in your\n  code, see [#85](https://github.com/commercialhaskell/rio/issues/85)\n\n__TODO__
  Do we recommend setting in `package.yaml` or in the source\nfiles themselves? Need
  to discuss and come to a conclusion on this\npoint https://github.com/commercialhaskell/rio/issues/9\n\nThere
  are other language extensions which are perfectly fine to use as\nwell, but are
  not recommended to be turned on by default:\n\n```\nCPP\nTemplateHaskell\nForeignFunctionInterface\nMagicHash\nUnliftedFFITypes\nTypeOperators\nUnboxedTuples\nPackageImports\nQuasiQuotes\nDeriveAnyClass\nDeriveLift\nStaticPointers\n```\n\n###
  GHC Options\n\nWe recommend using these GHC complier warning flags on all projects,
  to catch \nproblems that might otherwise go overlooked:\n\n* `-Wall`\n* `-Wcompat`\n*
  `-Wincomplete-record-updates`\n* `-Wincomplete-uni-patterns`\n* `-Wredundant-constraints`\n\nYou
  may add them per file, or to your package.yaml, or pass them on the command \nline
  when running ghc. We plan to add these to the package.yaml of our project \ntemplate,
  once its ready.\n\nFor code targeting production use, you should also use the flag
  that turns all \nwarnings into errors, to force you to resolve the warnings before
  you ship your \ncode:\n\n* `-Werror`\n\nFurther reading: Alexis King explains why
  these are a good idea in [her blog \npost](https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/)
  \nwhich was the original inspiration for this section.\n\n### Monads\n\nA primary
  design choice you'll need to make in your code is how to\nstructure your monads.
  There are many options out there, with various\ntrade-offs. Instead of going through
  all of the debates, we're going\nto point to\n[an existing blog post](https://www.fpcomplete.com/blog/2017/07/the-rio-monad),\nand
  here just give recommendations.\n\n* If your code is going to perform I/O: it should
  live in the `RIO`\n  monad. `RIO` is \"reader IO.\" It's the same as `ReaderT env
  IO`, but\n  includes some helper functions in this library and leads to nicer\n
  \ type signatures and error messages.\n\n* If you need to provide access to specific
  data to a function, do it\n  via a typeclass constraint on the `env`, _not_ via
  a concrete\n  env. For example, this is bad:\n\n  ```haskell\n  myFunction :: RIO
  Config Foo\n  ```\n\n  This is good:\n\n  ```haskell\n  class HasConfig env where\n
  \   configL :: Lens' env Config -- more on this in a moment\n  myFunction :: HasConfig
  env => RIO env Foo\n  ```\n\n  Reason: by using typeclass constraints on the environment,
  we can\n  easily compose multiple functions together and collect up the\n  constraints,
  which wouldn't be possible with concrete\n  environments. We _could_ go more general
  with mtl-style typeclasses,\n  like `MonadReader` or `MonadHasConfig`, but `RIO`
  is a perfect\n  balance point in the composability/concreteness space (see blog
  post\n  above for more details).\n\n* When defining `Has`-style typeclasses for
  the environments, we use\n  lenses (which are exposed by `RIO`) because it provides
  for easy\n  composability. We also leverage superclasses wherever possible. As\n
  \ an example of how this works in practice:\n\n  ```haskell\n  -- Defined in RIO.Logger\n
  \ class HasLogFunc env where\n    logFuncL :: Lens' env LogFunc\n\n  class HasConfig
  env where\n    configL :: Lens' env Config\n  instance HasConfig Config where\n
  \   configL = id\n\n  data Env = Env { envLogFunc :: !LogFunc, envConfig :: !Config
  }\n  class (HasLogFunc env, HasConfig env) => HasEnv env where\n    envL :: Lens'
  env Env\n  instance HasLogFunc Env where\n    logFuncL = lens envLogFunc (\\x y
  -> x { envLogFunc = y })\n  instance HasConfig Env where\n    configL = lens envConfig
  (\\x y -> x { envConfig = y })\n  instance HasEnv Env where\n    envL = id\n\n  --
  And then, at some other part of the code\n  data SuperEnv = SuperEnv { seEnv ::
  !Env, seOtherStuff :: !OtherStuff }\n  instance HasLogFunc SuperEnv where\n    logFuncL
  = envL.logFuncL\n  instance HasConfig SuperEnv where\n    configL = envL.configL\n
  \ instance HasEnv SuperEnv where\n    envL = lens seEnv (\\x y -> x { seEnv = y
  })\n  ```\n\n  __TODO__ Open question: how do we decide when we use a `Lens'`\n
  \ versus just a `SimpleGetter` in these `Has` typeclasses?\n\n* If you're writing
  code that you want to be usable outside of `RIO`\n  for some reason, you should
  stick to the good mtl-style typeclasses:\n  `MonadReader`, `MonadIO`, `MonadUnliftIO`,
  `MonadThrow`, and\n  `PrimMonad`. It's better to use `MonadReader`+`Has` than to
  create\n  new typeclasses like `MonadLogger`, though usually just sticking\n  with
  the simpler `RIO env` is fine (and can easily be converted to\n  the more general
  form with `liftRIO`). You should avoid using the\n  following typeclasses (intentionally
  not exposed from this library):\n  `MonadBase`, `MonadBaseControl`, `MonadCatch`,
  and `MonadMask`.\n\n### Exceptions\n\nFor in-depth discussion, see\n[exceptions
  best practices](https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell).
  The\nbasic idea is:\n\n* If something can fail, and you want people to deal with
  that failure\n  every time (e.g., `lookup`), then return a `Maybe` or `Either`\n
  \ value.\n* If the use will sometimes not want to deal with it, then use\n  exceptions.
  In the case of pure code, use a `MonadThrow`\n  constraint. In the case of `IO`
  code: use runtime exceptions via\n  `throwIO` (works in the `RIO` monad too).\n*
  You'll be upset and frustrated that you don't know exactly how some\n  `IO` action
  can fail. Accept that pain, live with it, internalize\n  it, use `tryAny`, and move
  on. It's the price we pay for async\n  exceptions.\n* Do all resource allocations
  with functions like `bracket` and\n  `finally`.\n\nIt’s a good idea to define an
  app-wide exception type:\n\n```haskell\ndata AppExceptions\n  = NetworkChangeError
  Text\n  | FilePathError FilePath\n  | ImpossibleError\n  deriving (Typeable)\n\ninstance
  Exception AppExceptions\n\ninstance Show AppExceptions where\n  show =\n    \\case\n
  \     NetworkChangeError err -> \"network error: \" <> (unpack err)\n      FilePathError
  fp -> \"error accessing filepath at: \" <> fp\n      ImpossibleError -> \"this codepath
  should never have been executed. Please report a bug.\"\n```\n\n### Strict data
  fields\n\nMake data fields strict by default, unless you have a good reason to\ndo
  otherwise.\n\n### Project template\n\n__TODO__ In the future, we'll add a new Stack
  template for using this\nlibrary. We'll use hpack, not cabal files, and rely on
  automatic\nexposed-module discovery.\n\n### Safety first\n\nThis library intentionally
  puts safety first, and therefore avoids\npromoting partial functions and lazy I/O.
  If you think you need lazy\nI/O: you need a streaming data library like conduit
  instead.\n\n__TODO__ Decide if we include a streaming data solution out of the\nbox.
  https://github.com/commercialhaskell/rio/issues/1\n\n### When to generalize\n\nA
  common question in Haskell code is when should you generalize. Here\nare some simple
  guidelines. For parametric polymorphism: _almost\nalways_ generalize, it makes your
  type signatures more informative and\nfunctions more useful. In other words, `reverse
  :: [a] -> [a]` is far\nbetter than `reverse :: [Int] -> [Int]`.\n\nWhen it comes
  to typeclasses: the story is more nuanced. For\ntypeclasses provided by `RIO`, like
  `Foldable` or `Traversable`, it's\ngenerally a good thing to generalize to them
  when possible. The real\nquestion is defining your own typeclasses. As a general
  rule: avoid\ndoing so as long as possible. And _if_ you define a typeclass: make\nsure
  its usage can't lead to accidental bugs by allowing you to swap\nin types you didn't
  expect.\n\n__TODO__ Expand, clarify, examples.\n\n### Coding style\n\n__TODO__ Point
  to coding style guidelines, and discuss\n[hindent](https://github.com/commercialhaskell/hindent).\n\n###
  Module hierarchy\n\nThe `RIO.Prelude.` module hierarchy contains identifiers which
  are reexported\nby the `RIO` module. The reason for this is to make it easier to
  view the\ngenerated Haddocks. The `RIO` module itself is intended to be imported\nunqualified,
  with `NoImplicitPrelude` enabled. All other modules are _not_\nreexported by the
  `RIO` module,\nand will document inside of them whether they should be imported
  qualified or\nunqualified.\n"
license-name: MIT
