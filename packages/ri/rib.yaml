homepage: https://github.com/srid/rib#readme
changelog-type: markdown
hash: 81313e33ca885334cfa7e9113cbc2a546bc1f7ed5bdedeea068e1729ca4bff8e
test-bench-deps: {}
maintainer: srid@srid.ca
synopsis: Static site generator using Shake
changelog: "# Change Log for rib\n\n## 0.5.0.0\n\nThis release comes with a major
  API refactor. Key changes:\n\n- Added MMark support, as an alternative to Pandoc\n-
  Allows using arbitrary records to load metadata\n  - This replaces the previous
  complex metadata API\n- Added `Document` type that uses the custom metadata record\n-
  Add top-level `Rib` import namespace for ease of use\n- Remove the following:\n
  \ - JSON cache\n  - `Rib.Simple`\n- Support for Table of Contents via MMark\n\nOther
  changes:\n\n- Use type-safe path types using the [path](http://hackage.haskell.org/package/path)
  library.\n- Fix #40: Gracefully handle rendering/ parsing errors, without dying.\n-
  Misc error reporting improvements\n\n## 0.4.1.0\n\n- `Rib.Pandoc`: \n  - Export
  `render'` and `renderInlines'` (the non-Lucid versions)\n  - Re-export `Text.Pandoc.Readers`
  so the library user does not have to directly depend on `pandoc` only to render
  its documents.\n- `Rib.App`: The `run` funtion now takes two more arguments, specifying
  the input and output directory, which are no longer hardcoded.\n- `Rib.Simple`:
  add LaTeX to default list of readers\n- `Rib.Server`: Remove \".html\" detection
  magic from URLs\n\n## 0.3.0.0\n\n- Rename `Rib.App.Watch` to `Rib.App.WatchAndGenerate`\n\n##
  0.2.0.0\n\n- Initial release.\n"
basic-deps:
  warp: -any
  modern-uri: -any
  shake: -any
  mmark-ext: -any
  exceptions: -any
  lucid: ! '>=2.9.11 && <2.10'
  clay: ! '>=0.13.1 && <0.14'
  wai: ! '>=3.2.2 && <3.3'
  path: -any
  text: ! '>=1.2.3 && <1.3'
  mmark: -any
  megaparsec: -any
  async: -any
  pandoc-include-code: ! '>=1.4.0 && <1.5'
  base-noprelude: ! '>=4.7 && <5'
  pandoc-types: ! '>=1.17.5 && <1.18'
  containers: ! '>=0.6.0 && <0.7'
  pandoc: ! '>=2.7 && <3'
  binary: ! '>=0.8.6 && <0.9'
  relude: ! '>=0.6 && <0.7'
  mtl: ! '>=2.2.2 && <2.3'
  foldl: -any
  cmdargs: ! '>=0.10.20 && <0.11'
  named: -any
  fsnotify: ! '>=0.3.0 && <0.4'
  wai-app-static: ! '>=3.1.6 && <3.2'
  aeson: ! '>=1.4.2 && <1.5'
  path-io: -any
  directory: ! '>=1.0 && <2.0'
all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.4.1.0
- 0.5.0.0
author: Sridhar Ratnakumar
latest: 0.5.0.0
description-type: markdown
description: "![Logo](https://raw.githubusercontent.com/srid/rib/master/assets/rib.png)\n\n#
  rib\n\n[![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)\n[![Hackage](https://img.shields.io/hackage/v/rib.svg)](https://hackage.haskell.org/package/rib)\n[![built
  with nix](https://builtwithnix.org/badge.svg)](https://builtwithnix.org)\n\nRib
  is a Haskell library for writing your own **static site generator**.\n\nHow does
  it compare to Hakyll?\n\n- Use the [Shake](https://shakebuild.com/) build system\n-
  Builtin support for using Haskell DSL to define the HTML\n  ([Lucid](https://chrisdone.com/posts/lucid2/))
  & CSS\n  ([Clay](http://fvisser.nl/clay/)) of your site \n  - Like Hakyll, Rib uses
  [Pandoc](https://pandoc.org/) for parsing the source\n    documents. It also supports
  [MMark](https://github.com/mmark-md/mmark) if you need a lightweight alternative.\n-
  Remain as simple as possible to use (see example below)\n- Optional Nix based workflow
  for easily reproducible environment\n\nRib prioritizes the use of *existing* tools
  over reinventing them, and enables\nthe user to compose them as they wish instead
  of having to write code to fit a\ncustom framework.\n\n**Table of Contents**\n\n-
  [rib](#rib)\n    - [Quick Preview](#quick-preview)\n    - [Getting Started](#getting-started)\n
  \   - [Concepts](#concepts)\n        - [Directory structure](#directory-structure)\n
  \       - [Run the site](#run-the-site)\n        - [How Rib works](#how-rib-works)\n
  \       - [Editing workflow](#editing-workflow)\n        - [What's next?](#whats-next)\n
  \   - [Examples](#examples)\n\n## Quick Preview\n\nHere is how your code may look
  like if you were to generate your static site\nusing Rib:\n\n``` haskell\n-- First
  we shall define two datatypes to represent our pages. One, the page\n-- itself.
  Second, the metadata associated with each document.\n\n-- | A generated page is
  either an index of documents, or an individual document.\n--\n-- The `Document`
  type takes two type variables:\n-- 1. The first type variable specifies the parser
  to use: MMark or Pandoc\n-- 2. The second type variable should be your metadata
  record\ndata Page\n  = Page_Index [Document MMark DocMeta]\n  | Page_Doc (Document
  MMark DocMeta)\n\n-- | Type representing the metadata in our Markdown documents\n--\n--
  Note that if a field is not optional (i.e., not Maybe) it must be present.\ndata
  DocMeta\n  = DocMeta\n      { title :: Text,\n        description :: Maybe Text\n
  \     }\n  deriving (Show, Eq, Generic, FromJSON)\n\n-- | Main entry point to our
  generator.\n--\n-- `Rib.run` handles CLI arguments, and takes three parameters here.\n--\n--
  1. Directory `a`, from which static files will be read.\n-- 2. Directory `b`, under
  which target files will be generated.\n-- 3. Shake build action to run.\n--\n--
  In the shake build action you would expect to use the utility functions\n-- provided
  by Rib to do the actual generation of your static site.\nmain :: IO ()\nmain = Rib.run
  [reldir|a|] [reldir|b|] generateSite\n  where\n    -- Shake Action for generating
  the static site\n    generateSite :: Action ()\n    generateSite = do\n      --
  Copy over the static files\n      Rib.buildStaticFiles [[relfile|static/**|]]\n
  \     -- Build individual markdown files, generating .html for each.\n      docs
  <-\n        Rib.buildHtmlMulti [relfile|*.md|] $\n          renderPage . Page_Doc\n
  \     -- Build an index.html linking to the aforementioned files.\n      Rib.buildHtml
  [relfile|index.html|]\n        $ renderPage\n        $ Page_Index docs\n    -- Define
  your site HTML here\n    renderPage :: Page -> Html ()\n    renderPage page = with
  html_ [lang_ \"en\"] $ do\n      head_ $ do\n        meta_ [httpEquiv_ \"Content-Type\",
  content_ \"text/html; charset=utf-8\"]\n        title_ $ case page of\n          Page_Index
  _ -> \"My website!\"\n          Page_Doc doc -> toHtml $ title $ Rib.documentMeta
  doc\n        style_ [type_ \"text/css\"] $ Clay.render pageStyle\n      body_\n
  \       $ with div_ [id_ \"thesite\"]\n        $ do\n          with a_ [href_ \"/\"]
  \"Back to Home\"\n          hr_ []\n          case page of\n            Page_Index
  docs ->\n              div_ $ forM_ docs $ \\doc -> with li_ [class_ \"links\"]
  $ do\n                let meta = Rib.documentMeta doc\n                b_ $ with
  a_ [href_ (Rib.documentUrl doc)] $ toHtml $ title meta\n                maybe mempty
  Rib.renderMarkdown $\n                  description meta\n            Page_Doc doc
  ->\n              with article_ [class_ \"post\"] $ do\n                h1_ $ toHtml
  $ title $ Rib.documentMeta doc\n                Rib.documentHtml doc\n    -- Define
  your site CSS here\n    pageStyle :: Css\n    pageStyle = \"div#thesite\" ? do\n
  \     margin (em 4) (pc 20) (em 1) (pc 20)\n      \"li.links\" ? do\n        listStyleType
  none\n        marginTop $ em 1\n        \"b\" ? fontSize (em 1.2)\n        \"p\"
  ? sym margin (px 0)\n```\n\n(View full [`Main.hs`](https://github.com/srid/rib-sample/blob/master/Main.hs)
  at rib-sample)\n\n## Getting Started\n\nThe easiest way to get started with [Rib](/)
  is to [use the\ntemplate](https://help.github.com/en/articles/creating-a-repository-from-a-template)\nrepository,
  [**rib-sample**](https://github.com/srid/rib-sample), from Github.\n\n## Concepts\n\n###
  Directory structure\n\nLet's look at what's in the template repository:\n\n```shell\n$
  git clone https://github.com/srid/rib-sample.git mysite\n...\n$ cd mysite\n$ ls
  -F\na/  default.nix  Main.hs  README.md  rib-sample.cabal\n```\n\nThe three key
  items here are:\n\n1. `Main.hs`: Haskell source containing the DSL of the HTML/CSS
  of your site.\n1. `a/`: The source content (eg: Markdown sources and static files)\n1.
  `b/`: The target directory, excluded from the git repository, will contain\n   _generated_
  content (i.e., the HTML files, and copied over static content)\n   \nThe template
  repository comes with a few sample posts under `a/`, and a basic\nHTML layout and
  CSS style defined in `Main.hs`. \n\n### Run the site\n\nNow let's run them all.
  \n\nClone the sample repository locally, install [Nix](https://nixos.org/nix/) and\nrun
  your site as follows:\n\n```shell\nnix-shell --run 'ghcid -T main'\n```\n\n(Note
  even though the author recommends it Nix is strictly not required; you may\nsimply
  run `ghcid -T main` instead of the above command if you do not wish to\nuse Nix.)\n\nRunning
  this command gives you a local HTTP server at http://localhost:8080/\n(serving the
  generated files) that automatically reloads when either the content\n(`a/`) or the
  HTML/CSS/build-actions (`Main.hs`) changes. Hot reload, in other\nwords.\n\n###
  How Rib works\n\nHow does the aforementioned nix-shell command work?\n\n1. `nix-shell`
  will run the given command in a shell environment with all of our\ndependencies
  (notably the Haskell ones including the `rib` library itself)\ninstalled. \n\n1.
  [`ghcid`](https://github.com/ndmitchell/ghcid) will compile your `Main.hs`\n   and
  run its `main` function.\n\n1. `Main.hs:main` in turn calls `Rib.App.run` which
  takes as argument your custom Shake action that will build the static site.\n\n1.
  `Rib.App.run`: this parses the CLI arguments and runs the rib CLI \"app\" which\n
  \  can be run in one of a few modes --- generating static files, watching the\n
  \  `a/` directory for changes, starting HTTP server for the `b/` directory. By\n
  \  default---without any explicit arguments---this will run the Shake build\n   action
  passed as argument on every file change and spin up a HTTP server.\n   \nRun that
  command, and visit http://localhost:8080 to view your site.\n\n### Editing workflow\n\nNow
  try making some changes to the content, say `a/first-post.md`. You should\nsee it
  reflected when you refresh the page. Or change the HTML or CSS of your\nsite in
  `Main.hs`; this will trigger `ghcid` to rebuild the Haskell source and\nrestart
  the server.\n\n### What's next?\n\nGreat, by now you should have your static site
  generator ready and running! What\nmore can you do? Surely you may have specific
  needs; and this usually translates\nto running custom Shake actions during the build.
  Rib provides helper functions in `Rib.Shake` to make this easier. \n\nRib recommends
  writing your Shake actions in the style of being \n[forward-defined](http://hackage.haskell.org/package/shake-0.18.3/docs/Development-Shake-Forward.html)\nwhich
  adds to the simplicity of the entire thing.\n\n## Examples\n\n* [rib-sample](https://github.com/srid/rib-sample):
  Use this to get started with\n  your own site.\n\n* Author's own website. Live at
  https://www.srid.ca/ \n"
license-name: BSD-3-Clause
