homepage: https://github.com/srid/rib#readme
changelog-type: markdown
hash: 32ee3767458befec666ac2d0a7027e7b99091706150c4687065fd641c7bce534
test-bench-deps: {}
maintainer: srid@srid.ca
synopsis: Static site generator using Shake
changelog: "# Change Log for rib\n\n## 0.8.0.0\n\n- Dependency upgrades\n  - GHC 8.8\n
  \ - pandoc-include-code: 0.5.0.0\n  - pandoc-types: 1.20\n  - dhall: 1.30\n  - clay:
  0.13.3 (This is a downgrade, as 0.14 is not released yet)\n- New features:\n  -
  API exposes the CLI parser (`optparse-applicative`) for user-level composition\n
  \ - Add `Rib.Parser.Pandoc.getToC` returning rendered Table of contents for a Pandoc
  document\n  - Add `Rib.Parser.MMark.getFirstParagraphText`\n  - Add `Rib.Extra.OpenGraph`
  for Open Graph protocol\n  - Add to `Rib.Extra.CSS`, `googleFonts` and `stylesheet`\n-
  Bug fixes and misc changes:\n  - `routeUrl`: Fix incorrect substitution of \"foo-index.html\"
  with \"foo-\"\n  - Lucid rendering functions (like `MMark.render`) are now polymorphic
  in their monad.\n  - #122: Fix Pandoc parser never returning metadata\n  - #127:
  Rib's HTTP server now binds to `127.0.0.1`.\n  - Allow directory listings in HTTP
  server\n  - #130: Prevent unnecessary re-running of Shake action by debouncing fsnotify
  events\n  - #136: Move `.shake` database directory under `ribInputDir`\n  - default.nix:
  Takes `overrides` and `additional-packages` as extra arguments\n\n## 0.7.0.0\n\n-
  Dependency upgrades\n  - mmark: 0.0.7.2\n  - megaparsec: 0.8\n  - clay: 0.14\n  -
  shake: 0.8.15\n- New features:\n  - Added Dhall parser, `Rib.Parser.Dhall`\n  -
  Add `Rib.Extra` containing useful but non-essential features\n- MMark, extensions
  removed:\n  - `ghcSyntaxHighlighter`: we already have `skylighting` (which supports
  more parsers than Haskell)\n  - `obfuscateEmail`: requires JS, which is not documented.\n-
  API changes:\n  - Introduced `Route` functionality for simpler management of static
  routes.\n    - Removed `buildHtmlMulti`, `buildHtml`, `readSource` functions and
  `Source` type.\n  - Introduced `Rib.Shake.forEvery` to run a Shake action over a
  pattern of files when they change.\n  - Exposed `Rib.Shake.writeFileCached`\n  -
  `MMark.parse` and `Pandoc.parse` now automatically append path to `ribInputDir`
  and do not return Either.\n  - Added `MMark.parseWith` (and `parsePureWith`), to
  specify a custom list of mmark extensions\n- Bug fixes\n  - #95: Fix Shake error
  `resource busy (file is locked)`\n  - #97: Fix Shake error `AsyncCancelled` when
  server thread crashes\n  - #96 & #108: Drop problematic use of Shake `cacheActionWith`\n\n##
  0.6.0.0\n\n- Advance nixpkgs; require Shake >=0.18.4\n- Major API simplication:
  no more type class!\n  - Allow user to specify their own source parser as a Haskell
  function\n  - Removed types `Document` and `Markup` in favour of `Source`\n  - Expose
  `ribInputDir` and `ribOutputDir` for use in custom Shake actions\n- Bug fixes:\n
  \ - #63: create intermediate directories when generating post HTML\n  - #70: Don't
  crash on Shake errors\n  - Fix unnecessary rebuild of all files when only one file
  changed\n    - #66: Use caching (via Shake's `cacheActionWith`), to avoid writing
  HTML to disk until it has changed.\n\n## 0.5.0.0\n\nThis release comes with a major
  API refactor. Key changes:\n\n- Added MMark support, as an alternative to Pandoc\n-
  Allows using arbitrary records to load metadata\n  - This replaces the previous
  complex metadata API\n- Added `Document` type that uses the custom metadata record\n-
  Add top-level `Rib` import namespace for ease of use\n- Remove the following:\n
  \ - JSON cache\n  - `Rib.Simple`\n- Support for Table of Contents via MMark\n\nOther
  changes:\n\n- Use type-safe path types using the [path](http://hackage.haskell.org/package/path)
  library.\n- Fix #40: Gracefully handle rendering/ parsing errors, without dying.\n-
  Misc error reporting improvements\n\n## 0.4.1.0\n\n- `Rib.Pandoc`: \n  - Export
  `render'` and `renderInlines'` (the non-Lucid versions)\n  - Re-export `Text.Pandoc.Readers`
  so the library user does not have to directly depend on `pandoc` only to render
  its documents.\n- `Rib.App`: The `run` funtion now takes two more arguments, specifying
  the input and output directory, which are no longer hardcoded.\n- `Rib.Simple`:
  add LaTeX to default list of readers\n- `Rib.Server`: Remove \".html\" detection
  magic from URLs\n\n## 0.3.0.0\n\n- Rename `Rib.App.Watch` to `Rib.App.WatchAndGenerate`\n\n##
  0.2.0.0\n\n- Initial release.\n"
basic-deps:
  warp: -any
  modern-uri: -any
  shake: '>=0.18.5'
  mmark-ext: '>=0.2.1.0'
  exceptions: -any
  lucid: '>=2.9.11 && <2.10'
  clay: '>=0.13.3'
  wai: '>=3.2.2 && <3.3'
  path: '>=0.7.0'
  time: '>=1.9'
  dhall: '>=1.30 && <1.31'
  text: '>=1.2.3 && <1.3'
  mmark: '>=0.0.7.2'
  safe-exceptions: -any
  megaparsec: '>=8.0'
  filepath: -any
  async: -any
  pandoc-include-code: '>=1.5 && <1.6'
  base-noprelude: '>=4.7 && <5'
  pandoc-types: '>=1.20'
  containers: '>=0.6.0 && <0.7'
  pandoc: '>=2.7 && <3'
  binary: '>=0.8.6 && <0.9'
  relude: '>=0.6 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  foldl: -any
  cmdargs: '>=0.10.20 && <0.11'
  optparse-applicative: '>=0.15'
  fsnotify: '>=0.3.0 && <0.4'
  wai-app-static: '>=3.1.6 && <3.2'
  aeson: '>=1.4.2 && <1.5'
  path-io: '>=1.6.0'
  directory: '>=1.0 && <2.0'
all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
author: Sridhar Ratnakumar
latest: 0.8.0.0
description-type: markdown
description: "![Logo](https://raw.githubusercontent.com/srid/rib/master/assets/rib.png)\n\n#
  rib\n\n[![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)\n[![Hackage](https://img.shields.io/hackage/v/rib.svg)](https://hackage.haskell.org/package/rib)\n[![built
  with nix](https://img.shields.io/badge/builtwith-nix-purple.svg)](https://builtwithnix.org)\n[![Zulip
  chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://funprog.zulipchat.com/#narrow/stream/218047-Rib)\n\nRib
  is a Haskell **static site generator** that aims to reuse existing libraries instead
  of reinventing the wheel.\n\nHow does it compare to the popular static site generator
  Hakyll?\n\n- Uses the [Shake](https://shakebuild.com/) build system at its core.\n-
  Write HTML ([Lucid](https://chrisdone.com/posts/lucid2/)) & CSS ([Clay](http://fvisser.nl/clay/))
  in Haskell.\n- Built-in support for [Pandoc](https://pandoc.org/) and [MMark](https://github.com/mmark-md/mmark).\n-
  Remain as simple as possible to use (see example below)\n- Nix-based environment
  for reproducibility\n- `ghcid` and fsnotify for \"hot reload\"\n\nRib prioritizes
  the use of *existing* tools over reinventing them, and enables\nthe user to compose
  them as they wish instead of having to write code to fit a\ncustom framework.\n\n**Table
  of Contents**\n\n- [Quick Preview](#quick-preview)\n- [Getting Started](#getting-started)\n-
  [Concepts](#concepts)\n    - [Directory structure](#directory-structure)\n    -
  [Run the site](#run-the-site)\n    - [How Rib works](#how-rib-works)\n    - [Editing
  workflow](#editing-workflow)\n    - [What's next?](#whats-next)\n- [Examples](#examples)\n\n##
  Quick Preview\n\nHere is how your code may look like if you were to generate your
  static site\nusing Rib:\n\n```haskell\n-- | Route corresponding to each generated
  static page.\n--\n-- The `a` parameter specifies the data (typically Markdown document)
  used to\n-- generate the final page text.\ndata Route a where\n  Route_Index ::
  Route [(Route Pandoc, Pandoc)]\n  Route_Article :: Path Rel File -> Route Pandoc\n\n--
  | The `IsRoute` instance allows us to determine the target .html path for\n-- each
  route. This affects what `routeUrl` will return.\ninstance IsRoute Route where\n
  \ routeFile = \\case\n    Route_Index ->\n      pure [relfile|index.html|]\n    Route_Article
  srcPath ->\n      fmap ([reldir|article|] </>) $\n        replaceExtension \".html\"
  srcPath\n\n-- | Main entry point to our generator.\n--\n-- `Rib.run` handles CLI
  arguments, and takes three parameters here.\n--\n-- 1. Directory `content`, from
  which static files will be read.\n-- 2. Directory `dest`, under which target files
  will be generated.\n-- 3. Shake action to run.\n--\n-- In the shake action you would
  expect to use the utility functions\n-- provided by Rib to do the actual generation
  of your static site.\nmain :: IO ()\nmain = withUtf8 $ do\n  Rib.run [reldir|content|]
  [reldir|dest|] generateSite\n\n-- | Shake action for generating the static site\ngenerateSite
  :: Action ()\ngenerateSite = do\n  -- Copy over the static files\n  Rib.buildStaticFiles
  [[relfile|static/**|]]\n  let writeHtmlRoute :: Route a -> a -> Action ()\n      writeHtmlRoute
  r = Rib.writeRoute r . Lucid.renderText . renderPage r\n  -- Build individual sources,
  generating .html for each.\n  articles <-\n    Rib.forEvery [[relfile|*.md|]] $
  \\srcPath -> do\n      let r = Route_Article srcPath\n      doc <- Pandoc.parse
  Pandoc.readMarkdown srcPath\n      writeHtmlRoute r doc\n      pure (r, doc)\n  writeHtmlRoute
  Route_Index articles\n\n-- | Define your site HTML here\nrenderPage :: Route a ->
  a -> Html ()\nrenderPage route val = html_ [lang_ \"en\"] $ do\n  head_ $ do\n    meta_
  [httpEquiv_ \"Content-Type\", content_ \"text/html; charset=utf-8\"]\n    title_
  routeTitle\n    style_ [type_ \"text/css\"] $ C.render pageStyle\n  body_ $ do\n
  \   div_ [class_ \"header\"] $\n      a_ [href_ \"/\"] \"Back to Home\"\n    h1_
  routeTitle\n    case route of\n      Route_Index ->\n        div_ $ forM_ val $
  \\(r, src) ->\n          li_ [class_ \"pages\"] $ do\n            let meta = getMeta
  src\n            b_ $ a_ [href_ (Rib.routeUrl r)] $ toHtml $ title meta\n            renderMarkdown
  `mapM_` description meta\n      Route_Article _ ->\n        article_ $\n          Pandoc.render
  val\n  where\n    routeTitle :: Html ()\n    routeTitle = case route of\n      Route_Index
  -> \"Rib sample site\"\n      Route_Article _ -> toHtml $ title $ getMeta val\n
  \   renderMarkdown :: Text -> Html ()\n    renderMarkdown =\n      Pandoc.render
  . Pandoc.parsePure Pandoc.readMarkdown\n\n-- | Define your site CSS here\npageStyle
  :: Css\npageStyle = C.body ? do\n  C.margin (em 4) (pc 20) (em 1) (pc 20)\n  \".header\"
  ? do\n    C.marginBottom $ em 2\n  \"li.pages\" ? do\n    C.listStyleType C.none\n
  \   C.marginTop $ em 1\n    \"b\" ? C.fontSize (em 1.2)\n    \"p\" ? sym C.margin
  (px 0)\n\n-- | Metadata in our markdown sources\ndata SrcMeta\n  = SrcMeta\n      {
  title :: Text,\n        -- | Description is optional, hence `Maybe`\n        description
  :: Maybe Text\n      }\n  deriving (Show, Eq, Generic, FromJSON)\n```\n\n(View full
  [`Main.hs`](https://github.com/srid/rib-sample/blob/master/src/Main.hs) at rib-sample)\n\n##
  Getting Started\n\nThe easiest way to get started with [Rib](/) is to [use the\ntemplate](https://help.github.com/en/articles/creating-a-repository-from-a-template)\nrepository,
  [**rib-sample**](https://github.com/srid/rib-sample), from Github.\n\n## Concepts\n\n###
  Directory structure\n\nLet's look at what's in the template repository:\n\n```shell\n$
  git clone https://github.com/srid/rib-sample.git mysite\n...\n$ cd mysite\n$ ls
  -F\ncontent/  default.nix  Main.hs  README.md  rib-sample.cabal\n```\n\nThe three
  key items here are:\n\n1. `Main.hs`: Haskell source containing the DSL of the HTML/CSS
  of your site.\n1. `content/`: The source content (eg: Markdown sources and static
  files)\n1. `dest/`: The target directory, excluded from the git repository, will
  contain\n   _generated_ content (i.e., the HTML files, and copied over static content)\n
  \  \nThe template repository comes with a few sample posts under `content/`, and
  a basic\nHTML layout and CSS style defined in `Main.hs`. \n\n### Run the site\n\nNow
  let's run them all. \n\nClone the sample repository locally, install [Nix](https://nixos.org/nix/)
  (as\ndescribed in its README) and run your site as follows:\n\n```shell\nnix-shell
  --run 'ghcid -T \":main serve\"'\n```\n\n(Note that even though the author recommends
  it Nix is strictly not required; you may\nsimply run `ghcid -T \":main serve\"`
  instead of the above command if you do not wish to\nuse Nix.)\n\nRunning this command
  gives you a local HTTP server at http://127.0.0.1:8080\n(serving the generated files)
  that automatically reloads when either the content\n(`content/`) or the HTML/CSS/build-actions
  (`Main.hs`) changes. Hot reload, in other\nwords.\n\n### How Rib works\n\nHow does
  the aforementioned nix-shell command work?\n\n1. `nix-shell` will run the given
  command in a shell environment with all of our\ndependencies (notably the Haskell
  ones including the `rib` library itself)\ninstalled. \n\n1. [`ghcid`](https://github.com/ndmitchell/ghcid)
  will compile your `Main.hs`\n   and run its `main` function.\n\n1. `Main.hs:main`
  in turn calls `Rib.App.run` which takes as argument your custom \n   Shake action
  that will build the static site.\n\n1. `Rib.App.run`: this parses the CLI arguments
  and runs the rib CLI \"app\" which\n   can be run in one of a few modes --- generating
  static files, watching the\n   `content/` directory for changes, starting HTTP server
  for the `dest/` directory.\n   The \"serve\" subcommand will run the Shake build
  action passed as argument on \n   every file change and spin up a HTTP server.\n
  \  \nRun that command, and visit http://127.0.0.1:8080 to view your site.\n\n###
  Editing workflow\n\nNow try making some changes to the content, say `content/first-post.md`.
  You should\nsee it reflected when you refresh the page. Or change the HTML or CSS
  of your\nsite in `Main.hs`; this will trigger `ghcid` to rebuild the Haskell source
  and\nrestart the server.\n\n### What's next?\n\nGreat, by now you should have your
  static site generator ready and running! \n\nRib recommends writing your Shake actions
  in the style of being \n[forward-defined](http://hackage.haskell.org/package/shake-0.18.3/docs/Development-Shake-Forward.html)\nwhich
  adds to the simplicity of the entire thing.\n\n## Examples\n\n* [rib-sample](https://github.com/srid/rib-sample):
  Use this to get started with\n  your own site.\n  \n* [zulip-archive](https://github.com/srid/zulip-archive):
  Zulip chat archive viewer ([running here](https://funprog.srid.ca/)).\n\n* [open-editions.org](https://github.com/open-editions/open-editions.org)
  ([running here](https://open-editions.org/)).\n\n* Rib powers the Zettelkasten system
  [neuron](https://github.com/srid/neuron#neuron)\n  * Example: [www.srid.ca](https://www.srid.ca/)\n
  \ * Example: [neuron.srid.ca](https://neuron.srid.ca/)\n  * Example: [haskell.srid.ca](https://haskell.srid.ca/)\n"
license-name: BSD-3-Clause
