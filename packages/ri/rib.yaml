homepage: https://github.com/srid/rib#readme
changelog-type: markdown
hash: bcf0f1a54864c296b8303eb07532bc7cf50f53a1fca2ca482bd78eb8e0816b6a
test-bench-deps: {}
maintainer: srid@srid.ca
synopsis: ''
changelog: |+
  # Change Log for rib

  ## 0.2.0.0

  - Initial release.

basic-deps:
  warp: ! '>=3.2.28 && <3.3'
  shake: ! '>=0.18.3 && <0.19'
  lucid: ! '>=2.9.11 && <2.10'
  bytestring: ! '>=0.10.8 && <0.11'
  clay: ! '>=0.13.1 && <0.14'
  lens-aeson: ! '>=1.0.2 && <1.1'
  wai: ! '>=3.2.2 && <3.3'
  base: ! '>=4.7 && <5'
  time: ! '>=1.8.0 && <1.9'
  text: ! '>=1.2.3 && <1.3'
  async: ! '>=2.2.2 && <2.3'
  pandoc-include-code: ! '>=1.4.0 && <1.5'
  data-default: ! '>=0.7.1 && <0.8'
  pandoc-types: ! '>=1.17.5 && <1.18'
  containers: ! '>=0.6.0 && <0.7'
  lens: ! '>=4.17.1 && <4.18'
  pandoc: ! '>=2.7.3 && <2.8'
  binary: ! '>=0.8.6 && <0.9'
  skylighting: ! '>=0.8.1 && <0.9'
  mtl: ! '>=2.2.2 && <2.3'
  cmdargs: ! '>=0.10.20 && <0.11'
  wai-extra: ! '>=3.0.26 && <3.1'
  fsnotify: ! '>=0.3.0 && <0.4'
  http-types: ! '>=0.12.3 && <0.13'
  wai-app-static: ! '>=3.1.6 && <3.2'
  aeson: ! '>=1.4.2 && <1.5'
  safe: ! '>=0.3.17 && <0.4'
all-versions:
- 0.2.0.0
author: Sridhar Ratnakumar
latest: 0.2.0.0
description-type: markdown
description: "<!--\nCredit for this image: https://www.svgrepo.com/svg/24439/ribs\n-->\n<img
  align=\"right\" width=\"50\" src=\"https://raw.githubusercontent.com/srid/rib/master/assets/rib.svg?sanitize=true\"
  />\n\n# rib\n\nRib is a Haskell library for writing your own **static site generator**.\n\nHow
  does it compare to Hakyll?\n\n- Use the [Shake](https://shakebuild.com/) build system\n-
  Builtin support for using Haskell DSL to define the HTML\n  ([Lucid](https://chrisdone.com/posts/lucid2/))
  & CSS\n  ([Clay](http://fvisser.nl/clay/)) of your site \n  - Like Hakyll, Rib uses
  [Pandoc](https://pandoc.org/) for parsing the source\n    documents\n- Remain as
  simple as possible to use (see screenshot below)\n- Optional Nix based workflow
  for easily reproducible environment\n\nRib prioritizes the use of *existing* tools
  over reinventing them, and enables\nthe user to compose them as they wish instead
  of having to write code to fit a\ncustom framework.\n\nHere is how your code may
  look like if you were to generate your static site\nusing Rib:\n\n<img src=\"https://raw.githubusercontent.com/srid/rib/master/assets/rib-sample-main.png\"
  />\n\n## Getting Started\n\nThe easiest way to get started with [Rib](/) is to [use
  the\ntemplate](https://help.github.com/en/articles/creating-a-repository-from-a-template)\nrepository,
  [**rib-sample**](https://github.com/srid/rib-sample), from Github.\n\n### Directory
  structure\n\nLet's look at what's in the template repository:\n\n```shell\n$ git
  clone https://github.com/srid/rib-sample.git mysite\n...\n$ cd mysite\n$ ls -F\na/
  \ b/  default.nix  Main.hs  README.md  rib-sample.cabal\n```\n\nThe three key items
  here are:\n\n1. `Main.hs`: Haskell source containing the DSL of the HTML/CSS of
  your site.\n1. `a/`: The source content (eg: Markdown sources and static files)\n1.
  `b/`: The target directory, initially empty, will contain _generated_ content\n
  \  (i.e., the HTML files, and copied over static content)\n   \nThe template repository
  comes with a few sample posts under `a/`, and a basic\nHTML layout and CSS style
  defined in `Main.hs`. \n\n### Run the site\n\nNow let's run them all. \n\nClone
  the sample repository locally, install [Nix](https://nixos.org/nix/) and\nrun your
  site as follows:\n\n```shell\nnix-shell --run 'ghcid -T main'\n```\n\nRunning this
  command gives you a local HTTP server at http://localhost:8080/\n(serving the generated
  files) that automatically reloads when either the content\n(`a/`) or the HTML/CSS/build-actions
  (`Main.hs`) changes. Hot reload, in other\nwords.\n\n### How Rib works\n\nHow does
  the aforementioned nix-shell command work?\n\n1. `nix-shell` will run the given
  command in a shell environment with all of our\ndependencies (notably the Haskell
  ones including the `rib` library itself)\ninstalled. \n\n1. [`ghcid`](https://github.com/ndmitchell/ghcid)
  will compile your `Main.hs`\n   and run its `main` function.\n\n1. `Main.hs:main`
  in turn calls the Shake build action (via `Rib.App.run`)\n   defined in `Rib.Simple.buildAction`
  passing it your function `renderPage`.\n\nThere is quite a bit going on in that
  step 3! Let's break it down:\n\n1. `Rib.App.run`: this parses the CLI arguments
  and runs the rib CLI \"app\" which\n   can be run in one of a few modes --- generating
  static files, watching the\n   `a/` directory for changes, starting HTTP server
  for the `b/` directory. By\n   default---without any explicit arguments---this will
  run the Shake build\n   action passed as argument on every file change and spin
  up a HTTP server.\n   \n1. `Rib.Simple.buildAction`: The `run` function takes a
  Shake build action to\n   run on file change. `Rib.Simple` provides a very simple
  build action for\n   generating the most simple static site --- a list of posts
  with static assets\n   --- which the sample repository uses.\n   \nRun that command,
  and visit http://localhost:8080 to view your site.\n\n### Editing workflow\n\nNow
  try making some changes to the content, say `a/first-post.md`. You should\nsee it
  reflected when you refresh the page. Or change the HTML or CSS of your\nsite in
  `Main.hs`; this will trigger `ghcid` to rebuild the Haskell source and\nrestart
  the server.\n\n### What's next?\n\nGreat, by now you should have your static site
  generator ready and running! What\nmore can you do? Surely you may have specific
  needs; and this usually translates\nto running custom Shake actions during the build.\n\nRib
  provides helper functions in `Rib.Shake` and `Rib.Pandoc` to make this\neasier.
  Indeed the `Rib.Simple.buildAction` function which the sample project\nreadily uses
  makes use of these functions.\n\nIn order to customize your site's build actions,\n\n1.
  Copy the source for `buildAction` from the\n[`Rib.Simple`](https://github.com/srid/rib/blob/master/src/Rib/Simple.hs)
  module\nto your `Main.hs`\n\n1. Make any customizations you want in *your* `buildAction`
  function.\n\n1. Use that as the argument to the `Rib.App.run` function in your `main`\n\nNotice
  how Rib's builtin `buildAction` is \n[forward-defined](http://hackage.haskell.org/package/shake-0.18.3/docs/Development-Shake-Forward.html)\nwhich
  adds to the simplicity of the entire thing.\n\n## Examples\n\n* [rib-sample](https://github.com/srid/rib-sample):
  Use this to get started with\n  your own site.\n\n* Author's own website. Live at
  https://notes.srid.ca/ \n"
license-name: BSD-3-Clause
