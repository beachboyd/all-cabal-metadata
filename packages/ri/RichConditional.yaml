homepage: https://github.com/avieth/RichConditional
changelog-type: ''
hash: fae1bdce5f1ff45d671671254719c679062bb6f71469f4b9282cc075a64e872c
test-bench-deps: {}
maintainer: aovieth@gmail.com
synopsis: Tiny library to replace classic if/else
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.8'
all-versions:
- 0.1.0.0
author: Alexander Vieth
latest: 0.1.0.0
description-type: markdown
description: ! "Control.RichConditional\n=======================\n\nTypeclasses for
  describing \"rich conditionals\" which accomplish exactly what\na classic if/else
  would but without the use of `Bool`.\n\nThe inspiration is found in dependently
  typed languages, in which a `Bool` is\nseen to be a comparatively pathetic datatype:
  it carries very little\ninformation. A useful test for some condition always introduces
  new\ninformation, but with a classical if/else, this information not known to the\ncompiler
  because it's lossfully compressed into a `Bool`.\n\nThere is no new technology here,
  only typeclasses and functions which might\nmake it more convenient to avoid using
  if/else.\n\n#A motivating example\n\nTo demonstrate the point, suppose we defined
  the following module, in which\nthe constructors of `Visitor` are not exposed:\n\n```Haskell\nmodule
  Visitor (\n    Visitor\n  , isLoggedIn\n  , isGuest\n  ) where\n\ndata Visitor =
  LoggedIn User | Guest\n\nisLoggedIn :: Visitor -> Bool\nisLoggedIn v = case v of\n
  \ LoggedIn _ -> True\n  Guest -> False\n\nisGuest :: Visitor -> Bool\nisGuest v
  = case v of\n  LoggedIn _ -> False\n  Guest -> True\n```\n\nWe have indicator functions
  on `Visitor`, but they don't allow for a \nuseful interface. In the example below,
  we can't build a user's landing\npage because we can't get a hold of a `User` value.\n\n```Haskell\nuserLandingPage
  :: User -> LandingPage\n\nguestLandingPage :: LandingPage\n\nblindLandingPage ::
  Visitor -> LandingPage\nblindLandingPage v =\n  if isLoggedIn v\n  -- We know there's
  a user, but GHC does not!\n  then userLandingPage ?\n  else guestLandingPage\n```\n\nEvidently
  the `Visitor` library must provide some way to get a hold of\na `User` from a `Visitor`,
  but if it does provide this, then why even bother\ngiving the indicators `isLoggedIn`
  and `isGuest`?\n\nContrast the above definitions with a `Bool`-free approach:\n\n```Haskell\nmodule
  Visitor (\n    Visitor\n  , ifVisitor\n  ) where\n\ndata Visitor = LoggedIn User
  | Guest\n\nifVisitor :: Visitor -> (User -> a) -> a -> a\nifVisitor v ifUser ifGuest
  = case v of\n  LoggedIn user -> ifUser user\n  Guest -> ifGuest\n```\n\n`Visitor`
  is just `Maybe User` with a new name, and `ifVisitor` is just the\nfunction `maybe`
  with its parameter order shuffled. It provides users of\n`Visitor` a way to get
  a hold of a `User` for `LoggedIn` cases without\npattern matching on `Visitor` directly.
  It can be used to implement a well\nfactored version of the landing page example:\n\n```Haskell\nuserLandingPage
  :: User -> LandingPage\n\nguestLandingPage :: LandingPage\n\nlandingPage :: Visitor
  -> LandingPage\nlandingPage v = ifVisitor v userLandingPage guestLandingPage\n```\n\n#Use
  of RichConditional\n\nThis modification of the above examples shows how RichConditional
  could be\nused:\n\n```Haskell\n{-# LANGUAGE MultiParamTypeClasses #-}\n\ndata User
  = User\n\ndata Guest = Human | Robot\n\ndata Visitor = LoggedIn User | NotLoggedIn
  Guest\n\ninstance PartialIf Visitor User where\n  indicate v = case v of\n    LoggedIn
  user -> Just user\n    NotLoggedIn _ -> Nothing\n\ninstance PartialIf Visitor Guest
  where\n  indicate v = case v of\n    LoggedIn _ -> Nothing\n    NotLoggedIn guest
  -> Just guest\n\ninstance TotalIf Visitor User Guest where\n  decide v = case v
  of\n    LoggedIn user -> Left user\n    NotLoggedIn guest -> Right guest\n\nallGuests
  :: [Visitor] -> [Guest]\nallGuests vs = do\n  v <- vs\n  -- This is like guard,
  except that useful data comes\n  -- out of it, so that it fulfills the type signature\n
  \ -- of allGuests.\n  ensure v\n```\n"
license-name: MIT
