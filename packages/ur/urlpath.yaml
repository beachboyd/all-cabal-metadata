homepage: https://github.com/athanclark/urlpath#readme
changelog-type: ''
hash: 05ecdb019832b2dac4a26a05f8099df008dff623c8709b5431630ad61f430f8f
test-bench-deps: {}
maintainer: athan.clark@localcooking.com
synopsis: Painfully simple URL deployment.
changelog: ''
basic-deps:
  exceptions: -any
  split: -any
  path: -any
  base: ! '>=4.8 && <5'
  text: -any
  strict: -any
  monad-control: -any
  path-extra: ! '>=0.2.0'
  monad-control-aligned: -any
  mtl: -any
  mmorph: -any
  transformers-base: -any
  monad-logger: -any
  transformers: -any
  attoparsec-uri: ==0.0.5.1
  resourcet: -any
  vector: -any
all-versions:
- '5.0.0.1'
- '6.0.0'
- '6.0.1'
- '6.0.2'
- '6.0.3'
- '6.0.4'
- '7.0.0'
- '7.0.1'
- '7.0.2'
- '7.1.0'
- '8.0.0'
- '8.0.1'
- '8.1.0'
- '8.2.0'
- '9.0.0'
- '9.0.0.1'
author: Athan Clark
latest: '9.0.0.1'
description-type: markdown
description: ! "# urlpath\n\n[![Build Status](https://travis-ci.org/athanclark/urlpath.svg)](https://travis-ci.org/athanclark/urlpath)\n[![Coverage
  Status](https://coveralls.io/repos/athanclark/urlpath/badge.png?branch=master)](https://coveralls.io/r/athanclark/urlpath)\n[![Chat
  Room](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/athanclark/urlpath)\n[![MIT
  License](http://img.shields.io/badge/license-MIT-brightgreen.svg)](https://tldrlegal.com/license/mit-license)\n[![Hackage](http://img.shields.io/badge/hackage-1.0.0-brightgreen.svg)](https://hackage.haskell.org/package/urlpath)\n[![Waffle
  Issues](https://badge.waffle.io/athanclark/urlpath.png?label=ready&title=Ready)](https://waffle.io/athanclark/urlpath)\n\nDirt-simple,
  embarrassing, horribly unimaginative URL combinator library for \nHaskell.\n\n\n##
  Installation\n\n```bash\nλ> cabal install urlpath\n```\n\n## Usage\n\nYou can use
  the combinators purely, if you're into that:\n\n\n```haskell\nλ> expandRelative
  $ \"foo.php\" <?> (\"key1\",\"bar\") <&> (\"key2\",\"baz\")\n\n↪ \"foo.asp?key1=bar&key2=baz\"\n```\n\nOr
  you can use them with a configurable root, via the Reader monad:\n\n```haskell\nλ>
  runReader\n     (runAbsoluteUrl $ url $ \"foo.asp\" <?> (\"key1\",\"bar\") <&> (\"key2\",\"baz\"))\n
  \    \"http://example.com\"\n\n↪ \"http://example.com/foo.asp?key1=bar&key2=baz\"\n```\n`url`
  puts the `UrlString` in a MonadReader that we can use for applying our⋅\nhost. We
  use different monads for different deployment schemes (currently we⋅\nhave 3 - `RelativeUrlT`,
  `GroundedUrlT`, and `AbsoluteUrlT`), which we can⋅\nintegrate in different libraries,
  like Lucid:\n\n```haskell\nλ> (runAbsoluteUrl $ renderTextT $ do\n     foo <- lift
  $ url $ \"foo\" <?> (\"bar\",\"baz\")\n     script_ [src_ foo] \"\" )\n   ) \"example.com\"\n\n↪
  \"<script src=\\\"example.com/foo?bar=baz\\\"></script>\"\n```\n\nand, in Scotty:\n\n```haskell\nmain
  :: IO ()\nmain = scottyT 3000\n    rootConf\n    rootConf\n    run\n\n  where\n
  \   rootConf = flip runAbsoluteT \"http://example.com\"\n\n    run :: ( MonadIO
  m\n           , MonadReader T.Text m\n           , Url T.Text m ) =>\n           ScottyT
  LT.Text m ()\n    run = get \"/\" $ do\n      path <- lift $ url $ \"foo\" <?> (\"bar\",\"baz\")\n
  \     text $ LT.fromStrict path\n```\n\n```\nλ> curl localhost:3000/\n↪ \"http://example.com/foo?bar=baz\"\n```\n\n##
  How to run tests\n\n```bash\nλ> cabal install hspec --enable-tests && cabal test
  --show-details=always\n```\n\n## Contributing\n\nI would prefer it that any inquiries
  and questions go to the\n[Gitter Chat room](https://gitter.im/athanclark/urlpath),
  while any suggestions, \ncomplaints, or requests go in the\n[GitHub Issues](https://github.com/athanclark/urlpath/issues)
  /\n[Waffle Dashboard](https://waffle.io/athanclark/urlpath). All ideas are welcome!
  \n(Except really gross ones. I've got limits.)\n"
license-name: BSD3
