homepage: https://github.com/urbit/urbit-hob
changelog-type: ''
hash: a83462610028b959eae411670f4abf010c9645ae378227d54ec634c2dc4a06f3
test-bench-deps:
  base: -any
  hspec: -any
  hspec-core: -any
  urbit-hob: -any
  QuickCheck: -any
maintainer: jared@jtobin.io
synopsis: Hoon-style atom manipulation and printing functions
changelog: ''
basic-deps:
  cereal: ! '>=0.5 && <1'
  bytestring: ! '>=0.10 && <1'
  base: ! '>=4.7 && <6'
  text: ! '>=1.2 && <2'
  murmur3: ! '>=1.0 && <2'
  vector: ! '>=0.12 && <1'
all-versions:
- 0.1.0
- 0.1.1
author: Jared Tobin
latest: 0.1.1
description-type: haddock
description: |-
  Here you can primarily find functions for dealing with the \"patp\" phonetic
  base used by Urbit.  The \@p encoding is used for naming ships; it uniquely
  represents a 32-bit number in a memorable and pronounceable fashion.

  The \@p encoding is an obfuscated representation of an underlying 32-bit
  number, in particular, hence the \"ob\" in the library's name.

  The @Urbit.Ob@ module exposes two functions, 'patp' and 'fromPatp', for
  converting between representations.  You can render a 'Patp' value via the
  'render' function.

  Here's a quick example:

  >>> import qualified Urbit.Ob as Ob
  >>> let nidsut = Ob.patp 15663360
  >>> Ob.render nidsut
  "~nidsut-tomdun"
  >>> Ob.fromPatp nidsut
  15663360
license-name: MIT
