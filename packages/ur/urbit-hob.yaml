homepage: https://github.com/urbit/urbit-hob
changelog-type: ''
hash: 80092f3048e67f223ed357a956e551c313a2dbfa22c51915f4acd50f8d8adc1d
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  hspec-core: -any
  urbit-hob: -any
  QuickCheck: -any
maintainer: jared@jtobin.io
synopsis: Hoon-style atom manipulation and printing functions
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <1'
  base: ! '>=4.7 && <6'
  text: ! '>=1.2 && <2'
  murmur3: ! '>=1.0 && <2'
  vector: ! '>=0.12 && <1'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
author: Jared Tobin
latest: 0.2.0
description-type: haddock
description: |-
  Here you can primarily find functions for dealing with the \"patp\" phonetic
  base used by Urbit.  The \@p encoding is used for naming ships; it uniquely
  represents a 32-bit number in a memorable and pronounceable fashion.

  The \@p encoding is an /obfuscated/ representation of an underlying 32-bit
  number, in particular, hence the \"ob\" in the library's name.

  The @Urbit.Ob@ module exposes two functions, 'patp' and 'fromPatp', for
  converting between representations.  You can also render a 'Patp' value via
  the 'render' function, or parse one via 'parse'.

  Some quick examples:

  >>> :set -XOverloadedStrings
  >>> import qualified Urbit.Ob as Ob
  >>>
  >>> let nidsut = Ob.patp 15663360
  >>> Ob.render nidsut
  "~nidsut-tomdun"
  >>> Ob.fromPatp nidsut
  15663360
  >>> Ob.parse "~nidsut-tomdun"
  Right ~nidsut-tomdun
license-name: MIT
