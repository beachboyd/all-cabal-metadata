homepage: https://github.com/urbit/urbit-hob#readme
changelog-type: ''
hash: ad893bb71ffcf9500820213c12cfa2544e8757ab143ebb45f9c7cc48c7536e11
test-bench-deps:
  base: -any
  urbit-hob: -any
maintainer: jared@jtobin.io
synopsis: Hoon-style atom manipulation and printing functions
changelog: ''
basic-deps:
  cereal: ! '>=0.5 && <1'
  bytestring: ! '>=0.10 && <1'
  base: ! '>=4.7 && <6'
  text: ! '>=1.2 && <2'
  containers: ! '>=0.5 && <1'
  murmur3: ! '>=1.0 && <2'
all-versions:
- 0.1.0
author: Jared Tobin
latest: 0.1.0
description-type: haddock
description: |-
  Here you can primarily find functions for dealing with the "patp" phonetic
  base used by Urbit.  The '@p' encoding is used for naming ships; it uniquely
  represents a 32-bit number in a memorable and pronounceable fashion.

  The '@p' encoding is an obfuscated representation of an underlying 32-bit
  number, in particular, hence the 'ob' in the library's name.

  The library exposes two functions, 'patp' and 'fromPatp', for converting
  between representations.  You can render a 'Patp' value via the 'render'
  function.

  Here's a quick example:

  > import qualified Urbit.Ob as Ob
  >
  > let nidsut = Ob.patp 15663360
  > Ob.render nidsut
  "~nidsut-tomdun"
  > Ob.fromPatp nidsut
  15663360
license-name: MIT
