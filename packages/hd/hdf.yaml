homepage: http://rd.slavepianos.org/t/hdf
changelog-type: ''
hash: 8f0de65063c152c6e1a0122e543da0b15b3514d7078cbd3d2af4e1f2ff6ca4bb
test-bench-deps: {}
maintainer: rd@slavepianos.org
synopsis: ! 'HDF: Uniform Rate Audio Signal Processing in Haskell'
changelog: ''
basic-deps:
  murmur-hash: -any
  split: -any
  base: ==4.*
  filepath: -any
  process: -any
  hosc: ==0.15.*
  fgl-visualize: -any
  fgl: -any
  transformers: -any
  hsc3: ==0.15.*
  directory: -any
all-versions:
- '0.7'
- '0.11'
- '0.14'
- '0.15'
author: Rohan Drape
latest: '0.15'
description-type: text
description: ! "hdf - haskell data flow\n-----------------------\n\n[Haskell][hs]
  library for uniform rate audio signal processing.\n\nIt generates [C][c] code that
  requires either\n`RDL` (from [sc3-rdu][sc3-rdu]) or `jack-dl` (from [rju][rju]).\n\nThe
  [SC2][sc2] [analog bubbles][ab] graph can be written:\n\n~~~~\n  let o = lf_saw
  (mce2 8.0 7.23) 0.0 * 3.0 + 80.0\n      m = lf_saw 0.4 0.0 * 24.0 + o\n      s =
  sin_osc (midi_cps m) 0.0 * 0.04\n      c = comb_n [0,1] 0.4 s 0.2 4.0\n  in out
  c\n~~~~\n\nThe data flow graph this generates is:\n\n![](sw/hdf/svg/analog-bubbles.svg)\n\nThe
  generated C-code (for `jack-dl`) is [c/gen/analog-bubbles.c](sw/hdf/c/gen/analog-bubbles.c).\n\nSlightly
  more elaborate, the [berlin 1977][b7] graph can be written:\n\n~~~~\n    let clock_rate
  = 9\n        clock_time = 1 / clock_rate\n        clock = impulse clock_rate 0 --
  sequencer trigger\n        tr = trigger clock\n        note = sequ 0 [55,60,63,62,60,67,63,58]
  tr -- midi note pattern sequencer\n        tr_16 = pulse_divider tr 16 0 -- divide
  tr by 16\n        note' = sequ 1 [-12,-7,-5,0,2,5] tr_16 + note -- transpose\n        freq
  = midi_cps note' -- convert midi note to cycles per second\n        env = decay2
  clock (0.05 * clock_time) (2 * clock_time)\n        amp = env * 0.1 + 0.02 -- amplitude
  envelope\n        filt = env * (sin_osc 0.17 0 * 800) + 1400 -- filter frequency\n
  \       pw = sin_osc (mce2 0.08 0.09) 0 * 0.45 + 0.5 -- pulse width LFO(s)\n        s
  = lf_pulse freq 0 pw * amp -- not bandlimited\n    in out (comb_n [0,1] 0.2 (rlpf
  s filt 0.15) (mce2 0.2 0.17) 1.5)\n~~~~\n\nThe data flow graph this generates is:\n\n![](sw/hdf/svg/berlin-1977.svg)\n\nThe
  generated C-code (for `jack-dl`) is [c/gen/berlin-1977.c](sw/hdf/c/gen/berlin-1977.c).\n\n<!--
  These are from the small set of example [graphs][ix]. -->\n\nhdf implements `text-dl`
  for testing.\n\n[hs]: http://haskell.org/\n[c]: http://c2.com/cgi/wiki?CeeLanguage\n[sc3-rdu]:
  http://rd.slavepianos.org/?t=sc3-rdu\n[rju]: http://rd.slavepianos.org/?t=rju\n[ab]:
  sw/hsc3-graphs/gr/analog-bubbles.scd\n[b7]: sw/hsc3-graphs/gr/berlin-1977.scd\n[sc2]:
  http://audiosynth.com/\n[ix]: http://rd.slavepianos.org/?t=hdf&e=md/ix.md\n\nÂ© [rohan
  drape][rd], 2006-2014, [gpl]\n\n[rd]: http://rd.slavepianos.org/\n[gpl]: http://gnu.org/copyleft/\n"
license-name: LicenseRef-GPL
