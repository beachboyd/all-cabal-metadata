homepage: https://github.com/hdevtools/hdevtools/
changelog-type: markdown
hash: 6057c855a804af1e8d83e31fd11d5a35f4f67cf8619564f6bf6278fdb8365637
test-bench-deps: {}
maintainer: ! 'Sebastian Nagel <sebastian.nagel@ncoding.at>,

  Ranjit Jhala <jhala@cs.ucsd.edu>'
synopsis: Persistent GHC powered background server for FAST haskell development tools
changelog: ! "# Changelog\n\n## 0.1.7.0 - 2018-08-08\n\n * Add support for ghc-8.4
  and Cabal-2.2.\n\n## 0.1.6.1 - 2017-12-17\n\n * Fixed `moduleinfo` command to load
  targets correctly.\n * Print version on `-v` command line option.\n * Fixed build
  with ghc-8.2.0.\n\n## 0.1.6.0 - 2017-08-21\n\n * Added handling of source errors:
  GHC `SourceError` and other exceptions are\n   now correctly sent to the frontend
  process. This enables `hdevtools` to\n   correctly report haskell syntax errors
  and improves visibility of exceptions\n   leading the backend process to die.\n
  * `.hdevtoolsrc` file for project-specific configuration.\n * Use of `stack` can
  be turned off with `--nostack`.\n\n## 0.1.5.0 - 2016-12-23\n\n * (Re-)added template
  haskell support when required. Can be turned off using `--noth`.\n * Fixed system
  installed GHC libdir paths using stack.\n\n## 0.1.4.1 - 2016-09-04\n\n * Do not
  try to execute `stack` commands if not available.\n\n## 0.1.4.0 - 2016-08-08\n\n
  * Determine GHC libdir and binaries using stack.\n\n## 0.1.3.2 - 2016-06-09\n\n
  * Added GHC 8.0.x support\n\n## 0.1.3.1 - 2016-05-13\n\n * Added support for new
  Cabal versions\n * Do not generate code, fixing inline-c modules typechecking\n\n##
  0.1.3.0 - 2016-02-29\n\n * Improved performance in stack projects: The stack configuration
  is\n   updated only when the passed path implies a different `stack.yaml`.\n   Performance
  improved substantially from roughly ~1s to ~0.3s.\n\n## 0.1.2.2 - 2016-01-11\n\n
  * Added type checking support for tests and benchmarks in stack projects.\n"
basic-deps:
  ghc: ! '>=7.2'
  unix: -any
  Cabal: ! '>=1.24'
  base: ==4.*
  time: -any
  syb: -any
  filepath: -any
  process: -any
  network: -any
  ghc-paths: -any
  ghc-boot: ! '>=8.0'
  cmdargs: -any
  transformers: -any
  directory: -any
all-versions:
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.1.9
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.4.0
- 0.1.4.1
- 0.1.5.0
- 0.1.6.0
- 0.1.6.1
- 0.1.7.0
author: Bit Connor
latest: 0.1.7.0
description-type: markdown
description: ! "hdevtools\n=========\n\nPersistent GHC powered background server for
  FAST Haskell development tools\n\n\nAbout\n-----\n\n`hdevtools` is a backend for
  text editor plugins, to allow for things such as\nsyntax and type checking of Haskell
  code, and retrieving type information, all\ndirectly from within your text editor.\n\nThe
  advantage that `hdevtools` has over competitors, is that it runs silently\nin a
  persistent background process, and therefore is able to keeps all of your\nHaskell
  modules and dependent libraries loaded in memory. This way, when you\nchange only
  a single source file, only it needs to be reloaded and rechecked,\ninstead of having
  to reload everything.\n\nThis makes `hdevtools` very fast for checking syntax and
  type errors (runs just\nas fast as the `:reload` command in GHCi).\n\nIn fact, syntax
  and type checking is so fast, that you can safely enable auto\nchecking on every
  save. Even for huge projects, checking is nearly instant.\n\nOnce you start using
  `hdevtools` and you get used to having your errors shown\nto you instantly (without
  having to switch back and forth between GHCi and your\neditor), and shown directly
  on your code, in your editor (without having to\nwait forever for GHC to run) you
  will wonder how you ever lived without it.\n\nIn addition to checking Haskell source
  code for errors, `hdevtools` has tools\nfor getting info about identifiers, and
  getting type information for snippets\nof code.\n\nText Editor Integration\n-----------------------\n\n`hdevtools`
  is designed to be integrated into text editors. The list of current\neditor plugins
  that supply this integration is below.\n\nBut before you do anything, you must first
  install `hdevtools` itself. The\neasiest way is from [Stackage][14] using [stack][15]:\n```\n$
  stack install hdevtools\n```\n\n**Note:** `hdevtools` automatically discovers compiler
  and libraries installed\nvia stack.\n\nAlternatively one can install from [Hackage][1]
  via cabal install:\n```\n$ cabal install hdevtools\n```\n\nThen you should install
  one or more of the following editor plugins:\n\n### Vim - [Syntastic][2] ###\n\n[Syntastic][2]
  is a popular syntax checking plugin for Vim, and is the\nrecommended Vim integration
  of `hdevtools` syntax and type checking. Recent\nversions of Syntastic(since Sep.
  2012) have builtin support for `hdevtools`.\n\nSimply install `hdevtools` (as above)
  and [Syntastic][2], and it will\nautomatically check your Haskell files.\n\n[Syntastic][2]
  will respect the `g:hdevtools_options` variable (the same one as\nused by [vim-hdevtools][3],
  see below). See the section \"Specifying GHC\nOptions\" below for details how to
  use it.\n\n### Vim - [vim-hdevtools][3] ###\n\nIn addition to Syntastic, it is recommended
  that you also use\n[`vim-hdevtools`][3] for additional functionality.\n\n[`vim-hdevtools`][3]
  offers integration with the rest of the `hdevtools` tools,\nincluding retrieving
  info about the identifier under the cursor, and getting\nthe type of the code under
  the cursor. Refer to its documentation for more\ndetails.\n\n### Emacs - [flycheck][5]
  ###\n\n[Flycheck][5] is a modern batteries-included\nsyntax checker for Emacs, and
  there is a [flycheck-hdevtools][6] checker available.\n\n### Atom - [linter][8]
  ###\n\nThere are *two* packages for the [Atom](https://atom.io) editor:\n\n+ [linter-hdevtools][8]
  quickly finds and underlines type errors in Haskell files,\n+ [hover-tooltips-hdevtools][9]
  displays the types of identifiers under the mouse.\n\n### Sublime - [SublimeLinter][10]\n\n[SublimeLinter][10]
  is a plugin for Sublime Text 3 that provides a framework\nfor linting code. The
  [SublimeLinter-contrib-hdevtools][11] plugin uses\n`hdevtools` to typecheck Haskell
  code.\n\n### Manual Editor Integration for any Editor ###\n\nMost editors allow
  you to run a `make` command, and will then parse the output\nfor errors and show
  line numbers, allowing you to jump between errors.\n\nThe `hdevtools check` command
  is suitable for such usage.\n\nFor example, in Vim something like this will work:\n\n
  \   :let &makeprg='hdevtools check %'\n\n(Vim will replace the `%` character with
  the name of the current file). Then\nyou can run\n\n    :make\n\nAnd Vim will invoke
  `hdevtools` to check the current file for errors, and then\nshow a list of them
  and allow jumping to them.\n\nSee the \"Command Line Usage\" section below for more
  information.\n\nCommand Line Usage\n------------------\n\nNote: When using one of
  the above editor plugins, you don't really need to know\nthis.\n\n### Available
  Commands and Help ###\n\nFor the list of commands available, run:\n\n    $ hdevtools
  --help\n\nTo get help for a specific command, run:\n\n    $ hdevtools [COMMAND]
  --help\n\nFor example:\n\n    $ hdevtools check --help\n\n### The `hdevtools` background
  process ###\n\nThe first time `hdevtools` runs a command, it will spawn a background
  process\nthat will remain running forever. You can check the status of this background\nprocess
  by running:\n\n    $ hdevtools --status\n\nYou can shutdown the background process
  by running:\n\n    $ hdevtools --stop-server\n\nCommunication with the background
  process is done through a unix socket file.\nThe default name is `.hdevtools.sock`,
  in the current directory. This allows\nyou to use `hdevtools` with multiple projects
  simultaneously, without the\nbackground processes getting in the way of each other.\n\nYou
  can use a different socket file name with the `--socket` option, which\nshould be
  used for each invocation of `hdevtools`. Remember that when telling\n`hdevtools`
  to check a Haskell file, paths are relative to the path of the\nbackground process,
  not your current directory. This can cause problems, and\ntherefore it is recommended
  that you leave the socket file as the default, and\nalways run `hdevtools` from
  the same directory.\n\nYou can specify the path to a target file with the `--path`
  option. This is\nuseful for integration with IDEs that submit a *copy* of the original
  source\nfile (in a temporary directory) to `hdevtools` making it impossible to extract\nthe
  `.cabal` information for the file's project. In such cases, you can run as:\n\n
  \   $ hdevtools check -p /path/to/file.hs /tmp/file.hs\n\nand `hdevtools` will use
  the given path to obtain the `.cabal` information.\n\n\n### Specifying GHC Options
  ###\n\nFor most non-trivial projects, you will need to tell `hdevtools` about\nadditional
  GHC options that your project requires.\n\nAll `hdevtools` commands accept a `-g`
  flag for this purpose.\n\nFor example:\n\n* Your project source code is in the directory
  `src`\n* You want to use the GHC option `-Wall`\n* You want to hide the package
  `transformers` to prevent conflicts\n\nInvoke `hdevtools` with something like this:\n\n
  \   $ hdevtools check -g -isrc -g -Wall -g -hide-package -g transformers Foo.hs\n\nNotice
  that a `-g` flag is inserted before each GHC option. Don't try to string\nmultiple
  GHC options together after a single `-g` flag:\n\nThis won't work:\n\n    $ hdevtools
  check -g '-hide-package transformers' Foo.hs\n\nIn general, you will need to pass
  to `hdevtools` the same GHC options that you\nwould pass to GHCi.\n\nFor projects
  with custom build systems, you can prevent `hdevtools` from\ndetecting a global
  `stack.yaml` configuration with the argument `--nostack`.\n\n#### Specifying GHC
  Options in Vim ####\n\nThe Vim plugins allow setting GHC options in the `g:hdevtools_options`\nvariable.
  \ For example, for the above project, put the following in your\n`.vimrc`:\n\n    let
  g:hdevtools_options = '-g -isrc -g -Wall -g -hide-package -g transformers'\n\n####
  Specifying GHC Options with `.hdevtoolsrc` ####\n\nIf an `.hdevtoolsrc` file is
  present, then `hdevtools` will\nparse arguments from the `.hdevtoolsrc` file after
  arguments from the command\nline.\n\nFor example, for the above project, the `.hdevtoolsrc`
  file would contain:\n\n    -g -isrc -g -Wall -g -hide-package -g transformers\n\nThe
  `.hdevtoolsrc` file will be searched for in the target path and all parents\nof
  the target path, or, if the `hdevtools` command has no target, in `$PWD` and\nall
  parents of `$PWD`.\n\n\nCredits\n-------\n\n* `hdevtools` was inspired by [ghcmod][4].\n*
  development moved here from [bitc/hdevtools][12] and [schell/hdevtools][13].\n\n[1]:
  http://hackage.haskell.org/package/hdevtools\n[2]: https://github.com/scrooloose/syntastic\n[3]:
  https://github.com/bitc/vim-hdevtools\n[4]: http://www.mew.org/~kazu/proj/ghc-mod/en/\n[5]:
  https://github.com/flycheck/flycheck\n[6]: https://github.com/flycheck/flycheck-hdevtools\n[7]:
  https://atom.io\n[8]: https://atom.io/packages/linter-hdevtools\n[9]: https://atom.io/packages/hover-tooltips-hdevtools\n[10]:
  sublimelinter.com\n[11]: https://packagecontrol.io/packages/SublimeLinter-contrib-hdevtools\n[12]:
  https://github.com/bitc/hdevtools\n[13]: https://github.com/schell/hdevtools\n[14]:
  https://www.stackage.org/package/hdevtools\n[15]: haskellstack.org\n"
license-name: MIT
