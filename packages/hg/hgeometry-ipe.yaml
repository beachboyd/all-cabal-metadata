homepage: https://fstaals.net/software/hgeometry
changelog-type: text
hash: 5844a766c24f7ae565a9e7ca332a5b7d88e30695589922deaed9d9cf8fe3fd44
test-bench-deps:
  data-clist: -any
  hgeometry-combinatorial: -any
  bytestring: -any
  MonadRandom: -any
  hgeometry: -any
  base: -any
  approximate-equality: ! '>=1.1.0.2'
  hspec: ! '>=2.1'
  filepath: -any
  semigroups: -any
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  quickcheck-instances: ! '>=0.3'
  linear: -any
  colour: -any
  random: -any
  hgeometry-ipe: -any
  QuickCheck: ! '>=2.5'
  yaml: -any
  vector: -any
  directory: -any
maintainer: frank@fstaals.net
synopsis: Reading and Writing ipe7 files.
changelog: ''
basic-deps:
  semigroupoids: ! '>=5'
  data-clist: ! '>=0.0.7.2'
  hgeometry-combinatorial: ! '>=0.9.0.0'
  bytestring: ! '>=0.10'
  reflection: ! '>=2.1'
  fingertree: ! '>=0.1'
  MonadRandom: ! '>=0.5'
  hgeometry: ! '>=0.9.0.0'
  base: ! '>=4.11 && <5'
  text: ! '>=1.1.1.0'
  parsec: ! '>=3'
  dlist: ! '>=0.7'
  semigroups: ! '>=0.18'
  containers: ! '>=0.5.5'
  singletons: ! '>=2.0'
  vinyl: ! '>=0.10'
  lens: ! '>=4.2'
  quickcheck-instances: ! '>=0.3'
  bifunctors: ! '>=4.1'
  fixed-vector: ! '>=1.0'
  linear: ! '>=1.10'
  mtl: -any
  hexpat: ! '>=0.20.9'
  colour: ! '>=2.3.3'
  random: -any
  deepseq: ! '>=1.1'
  QuickCheck: ! '>=2.5'
  aeson: ! '>=1.0'
  template-haskell: -any
  yaml: ! '>=0.8'
  vector: ! '>=0.11'
all-versions:
- 0.9.0.0
author: Frank Staals
latest: 0.9.0.0
description-type: markdown
description: |
  HGeometry-ipe
  =============

  This package provides an API for reading and writing Ipe
  (http://ipe.otfried.org) files. This is all very work in
  progress. Hence, the API is experimental and may change at any time!

  Here is an example showing reading a set of points from an Ipe file,
  computing the DelaunayTriangulation, and writing the result again to
  an output file

  ```haskell
  mainWith                          :: Options -> IO ()
  mainWith (Options inFile outFile) = do
      ePage <- readSinglePageFile inFile
      case ePage of
        Left err                         -> print err
        Right (page :: IpePage Rational) -> case page^..content.traverse._IpeUse of
          []         -> putStrLn "No points found"
          syms@(_:_) -> do
             let pts  = syms&traverse.core %~ (^.symbolPoint)
                 pts' = NonEmpty.fromList pts
                 dt   = delaunayTriangulation $ pts'
                 out  = [iO $ drawTriangulation dt]
             writeIpeFile outFile . singlePageFromContent $ out
  ```

  See the [hgeometry-examples](https://github.com/noinia/hgeometry/tree/master/hgeometry-examples) package for more examples.
license-name: BSD-3-Clause
