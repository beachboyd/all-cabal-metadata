homepage: https://fstaals.net/software/hgeometry
changelog-type: markdown
hash: 73a3f8b76edeb71afb9387c6266c2d60771d09c25d4c7a8e605efb02a50af5dd
test-bench-deps:
  data-clist: -any
  bytestring: -any
  hgeometry: -any
  base: -any
  approximate-equality: ! '>=1.1.0.2'
  hspec: ! '>=2.1'
  filepath: -any
  criterion: ! '>=1.1.4.0'
  doctest: ! '>=0.8'
  semigroups: -any
  array: ! '>=0.5'
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  quickcheck-instances: ! '>=0.3'
  deepseq-generics: -any
  fixed-vector: -any
  linear: -any
  colour: -any
  optparse-applicative: -any
  random: -any
  deepseq: -any
  QuickCheck: ! '>=2.5'
  yaml: -any
  vector: -any
  directory: -any
maintainer: frank@fstaals.net
synopsis: Geometric Algorithms, Data structures, and Data types.
changelog: ! "#### 0.8 ###\n\n- Compatibility with GHC 8.6\n- Added \\(O(n\\log n)\\)
  time closest pair algorithm.\n- Added arrangement data type\n- Various Bugfixes\n-
  Added Camera data type with some world to screen transformations.\n- Additional
  read/show instances\n- Updated some of the show instances for Ipe related types.\n\n####
  0.7 ###\n\n- Compatibility with GHC 8.0-8.4\n- Implemented more Algorithms and Data
  Structures. This includes\n  * Polygon triangulation\n- A new implementation of
  PlanarSubdivision that now also supports disconnected\n  subdivsions.\n- Performance
  improvements by changing to a different Vector\n  implementation. For low dimensional
  vectors (of dimension at most four) we\n  now essentially use the types from\n  [linear](https://hackage.haskell.org/package/linear),
  this gives significant\n  speedups on several small benchmarks.\n- bugfixes.\n\n####
  0.6 ###\n\n- Implemented more Algorithms and Data Structures. This includes\n  *
  Bentley-Ottmannn line-segment intersection,\n  * Well-Separated Pair decompositions,\n
  \ * extremal point/tangents for Convex hulls,\n  * Minkowski sum for convex polygons,\n
  \ * one dimensional segment trees,\n  * one dimensional interval trees, and a\n
  \ * KD-tree.\n- Several bug fixes, including a very stupid bug in Box\n- Separate
  ConvexPolygon type.\n- More thorough testing for some of the algorithms.\n- Started
  work on a proper representation for planar subdivsions. This includes\n  a representation
  of planar graphs that support querying if two vertices are\n  connected by an edge
  in $O(1)$ time.\n- Dropped support for GHC 7.8\n\n#### 0.5 ###\n\n- Implemented
  several algorithms, including Delaunay Triangulation, EMST, and\nDouglas Peucker.\n-
  Revamped the data types for Intersections\n\n#### 0.4 ###\n\n- Major rewrite from
  scratch, providing much stronger type-level\n  guarantees. Incompatible with older
  versions.\n- Convex Hull and Smallest enclosing disk algorithms.\n- HGeometry now
  includes some very experimental and preliminary support for\n  reading and writing
  Ipe7 files.\n\n#### 0.2 & 0.3 ###\n\n- Internal releases.\n\n### 0.1.1 ###\n\n-
  Fixed a bug in point on n the line segment test\n- Generalized the types of inCircle,
  inDisc, onCircle, onDisc etc. We now need\n  only that the type representing precision
  model implements the typeclass\n  `Num` instead of `Floating'.\n\n### 0.1 ###\n\n-
  Initial release.\n"
basic-deps:
  semigroupoids: ! '>=5'
  data-clist: ! '>=0.0.7.2'
  bytestring: ! '>=0.10'
  reflection: ! '>=2.1'
  fingertree: ! '>=0.1'
  base: ! '>=4.10 && <5'
  text: ! '>=1.1.1.0'
  parsec: ! '>=3'
  dlist: ! '>=0.7'
  semigroups: ! '>=0.18'
  containers: ! '>=0.5.5'
  singletons: ! '>=2.0'
  vinyl: ! '>=0.6 && <0.9'
  lens: ! '>=4.2'
  quickcheck-instances: ! '>=0.3'
  bifunctors: ! '>=4.1'
  fixed-vector: ! '>=1.0'
  contravariant: ! '>=1.4'
  linear: ! '>=1.10'
  mtl: -any
  hexpat: ! '>=0.20.9'
  colour: ! '>=2.3.3'
  random: -any
  deepseq: ! '>=1.1'
  QuickCheck: ! '>=2.5'
  aeson: ! '>=1.0'
  template-haskell: -any
  yaml: ! '>=0.8'
  profunctors: ! '>=5.2.1'
  vector: ! '>=0.11'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.8.0.0'
author: Frank Staals
latest: '0.8.0.0'
description-type: markdown
description: ! "HGeometry\n=========\n\n[![Build Status](https://travis-ci.org/noinia/hgeometry.svg?branch=master)](https://travis-ci.org/noinia/hgeometry)\n[![Hackage](https://img.shields.io/hackage/v/hgeometry.svg)](https://hackage.haskell.org/package/hgeometry)\n\nHGeometry
  provides some basic geometry types, and geometric algorithms and data\nstructures
  for them. The main two focusses are: (1) Strong type safety, and (2)\nimplementations
  of geometric algorithms and data structures with good\nasymptotic running time guarantees.
  Design choices showing these aspects are\nfor example:\n\n- we provide a data type
  `Point d r` parameterized by a\ntype-level natural number `d`, representing d-dimensional
  points (in all cases\nour type parameter `r` represents the (numeric) type for the
  (real)-numbers):\n\n```haskell\nnewtype Point (d :: Nat) (r :: *) = Point { toVec
  :: Vector d r }\n```\n- the vertices of a `PolyLine d p r` are stored in a `Data.LSeq`
  which enforces\nthat a polyline is a proper polyline, and thus has at least two
  vertices.\n\nPlease note that aspect (2), implementing good algorithms, is much
  work in\nprogress. Only a few algorithms have been implemented, some of which could
  use\nsome improvements. Currently, HGeometry provides the following algorithms:\n\n*
  two \\(O(n \\log n)\\) time algorithms for convex hull in\n  $\\mathbb{R}^2$: the
  typical Graham scan, and a divide and conquer algorithm,\n* an \\(O(n)\\) expected
  time algorithm for smallest enclosing disk in $\\mathbb{R}^$2,\n* the well-known
  Douglas Peucker polyline line simplification algorithm,\n* an \\(O(n \\log n)\\)
  time algorithm for computing the Delaunay triangulation\n(using divide and conquer).\n*
  an \\(O(n \\log n)\\) time algorithm for computing the Euclidean Minimum Spanning\nTree
  (EMST), based on computing the Delaunay Triangulation.\n* an \\(O(\\log^2 n)\\)
  time algorithm to find extremal points and tangents on/to a\n  convex polygon.\n*
  An optimal \\(O(n+m)\\) time algorithm to compute the Minkowski sum of two convex\npolygons.\n*
  An \\(O(1/\\varepsilon^dn\\log n)\\) time algorithm for constructing a Well-Separated
  pair\n  decomposition.\n* The classic (optimal) \\(O(n\\log n)\\) time divide and
  conquer algorithm to\n  compute the closest pair among a set of \\(n\\) points in
  \\(\\mathbb{R}^2\\).\n\nIt also has some geometric data structures. In particular,
  HGeometry contans an\nimplementation of\n\n* A one dimensional Segment Tree. The
  base tree is static.\n* A one dimensional Interval Tree. The base tree is static.\n*
  A KD-Tree. The base tree is static.\n\nHGeometry also includes a datastructure/data
  type for planar graphs. In\nparticular, it has a `EdgeOracle` data structure, that
  can be built in \\(O(n)\\)\ntime that can test if the graph contains an edge in
  constant time.\n\nNumeric Types\n-------------\n\nAll geometry types are parameterized
  by a numerical type `r`. It is well known\nthat Floating-point arithmetic and Geometric
  algorithms don't go well together;\ni.e. because of floating point errors one may
  get completely wrong\nresults. Hence, I *strongly* advise against using `Double`
  or `Float` for these\ntypes. In several algorithms it is sufficient if the type
  `r` is\n`Fractional`. Hence, you can use an exact number type such as `Rational`.\n\nA
  Note on the Ext (:+) data type\n---------------------------------\n\nIn many applications
  we do not just have geometric data, e.g. `Point d r`s or\n`Polygon r`s, but instead,
  these types have some additional properties, like a\ncolor, size, thickness, elevation,
  or whatever. Hence, we would like that our\nlibrary provides functions that also
  allow us to work with `ColoredPolygon r`s\netc. The typical Haskell approach would
  be to construct type-classes such as\n`PolygonLike` and define functions that work
  with any type that is\n`PolygonLike`. However, geometric algorithms are often hard
  enough by\nthemselves, and thus we would like all the help that the type-system/compiler\ncan
  give us. Hence, we choose to work with concrete types.\n\nTo still allow for some
  extensibility our types will use the Ext (:+) type. For\nexample, our `Polygon`
  data type, has an extra type parameter `p` that allows\nthe vertices of the polygon
  to cary some extra information of type `p` (for\nexample a color, a size, or whatever).\n\n```haskell\ndata
  Polygon (t :: PolygonType) p r where\n  SimplePolygon :: C.CSeq (Point 2 r :+ p)
  \                        -> Polygon Simple p r\n  MultiPolygon  :: C.CSeq (Point
  2 r :+ p) -> [Polygon Simple p r] -> Polygon Multi  p r\n```\n\nIn all places this
  extra data is accessable by the (:+) type in Data.Ext, which\nis essentially just
  a pair.\n\nReading and Writing Ipe files\n-----------------------------\n\nApart
  from geometric types, HGeometry provides some interface for reading and\nwriting
  Ipe (http://ipe.otfried.org). However, this is all very work in\nprogress. Hence,
  the API is experimental and may change at any time! Here is an\nexample showing
  reading a set of points from an Ipe file, computing the\nDelaunayTriangulation,
  and writing the result again to an output file\n\n```haskell\nmainWith                          ::
  Options -> IO ()\nmainWith (Options inFile outFile) = do\n    ePage <- readSinglePageFile
  inFile\n    case ePage of\n      Left err                         -> print err\n
  \     Right (page :: IpePage Rational) -> case page^..content.traverse._IpeUse of\n
  \       []         -> putStrLn \"No points found\"\n        syms@(_:_) -> do\n           let
  pts  = syms&traverse.core %~ (^.symbolPoint)\n               pts' = NonEmpty.fromList
  pts\n               dt   = delaunayTriangulation $ pts'\n               out  = [iO
  $ drawTriangulation dt]\n           writeIpeFile outFile . singlePageFromContent
  $ out\n```\n\nSee the examples directory for more examples.\n"
license-name: BSD3
