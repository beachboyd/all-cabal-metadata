homepage: https://code.mathr.co.uk/hgmp
changelog-type: markdown
hash: d22f8a263d5b8e813a2e9a616f648d491de96d8f227130316d269c21843b2f03
test-bench-deps:
  hgmp: -any
  base: -any
  QuickCheck: ! '>=2.8 && <2.14'
maintainer: claude@mathr.co.uk
synopsis: Haskell interface to GMP
changelog: |
  # 0.1.1
  - raw function foreign import bindings
  - define hsc2hs #alignment macro for older GHC versions

  # 0.1.0.1
  - use hsc2hs's #alignment macro in Storable instances

  # 0.1.0.0
  - initial release
basic-deps:
  base: ! '>=4.8 && <4.14'
  integer-gmp: ! '>=1.0 && <1.1'
  ghc-prim: ! '>=0.4 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1
author: Claude Heiland-Allen
latest: 0.1.1
description-type: markdown
description: |
  hgmp
  ====

  Haskell interface to GMP.  Types and instances, and marshalling between Integer
  and Rational and the corresponding GMP types, along with raw foreign imports of
  GMP functions.  Allows FFI to GMP code (whether in GMP itself or in third-party
  code that uses GMP).

  A simple example illustrating binding to GMP's next probable-prime function:

      {-# LANGUAGE ForeignFunctionInterface #-}

      import Foreign.Ptr (Ptr(..))
      import Numeric.GMP.Types (MPZ)
      import Numeric.GMP.Utils (withInInteger, withOutInteger_)
      import Numeric.GMP.Raw.Safe (mpz_nextprime)
      import System.IO.Unsafe (unsafePerformIO)

      nextPrime :: Integer -> Integer
      nextPrime n =
        unsafePerformIO $
          withOutInteger_ $ \rop ->
            withInInteger n $ \op ->
              mpz_nextprime rop op
license-name: BSD-3-Clause
