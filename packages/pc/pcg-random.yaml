homepage: http://github.com/cchalmers/pcg-random
changelog-type: markdown
hash: ad8ed1d1ec74944144592b1846479f8e72c9d95169c240a2c1f53b965f24a213
test-bench-deps:
  base: -any
  doctest: -any
maintainer: c.chalmers@me.com
synopsis: Haskell bindings to the PCG random number generator.
changelog: ! "### 0.1.3.5\n\n* Build with ghc-8.4\n\n### 0.1.3.4\n\n* Fix byte array
  bugs in System.Random.PCG.Pure\n\n### 0.1.3.3\n\n* Added System.Random.PCG.Pure
  module.\n\n### 0.1.3.2\n\n* Added System.Random.PCG.Fast.Pure module.\n\n### 0.1.3.1\n\n*
  Added `withFrozen` function.\n\n### 0.1.3.0\n\n* Use [entropy](http://hackage.haskell.org/package/entropy)
  package for\n  system random generator.\n\n### 0.1.2.0\n\n* Allow primitive-0.6.\n\n###
  0.1.1.0\n\n* Add uniformB, a function to generate a bounded random number in [0,b)\n
  \ range. This preforms significantly faster than uniformR (0,b-1).\n\n* Add type
  specific versions for uniformR and uniformB.\n\n### 0.1.0.1\n\n* Fix bug when dealing
  with `Word` and `Int` types.\n\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.3 && <5'
  entropy: -any
  random: ! '>=1.0 && <2.0'
  primitive: ! '>=0.4 && <0.7'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.3.1'
- '0.1.3.2'
- '0.1.3.3'
- '0.1.3.4'
- '0.1.3.5'
author: Christopher Chalmers
latest: '0.1.3.5'
description-type: markdown
description: ! '## pcg-random


  [![Build Status](https://travis-ci.org/cchalmers/pcg-random.svg)](https://travis-ci.org/cchalmers/pcg-random)

  [![Hackage](https://img.shields.io/hackage/v/pcg-random.svg?style=flat)](https://hackage.haskell.org/package/pcg-random)


  Haskell bindings to the PCG random number generator http://www.pcg-random.org.


  > PCG is a family of simple fast space-efficient statistically good algorithms for
  random number generation. Unlike many general-purpose RNGs, they are also hard to
  predict.


  Implements the standard multiple stream generator as well as the fast, single and
  unique variants.


  The api is very similar to [mwc-random] but the pcg generator appears to be slightly
  faster. There is also a pure interface via the [random] libray.


  [mwc-random]: https://hackage.haskell.org/package/mwc-random

  [random]: http://hackage.haskell.org/package/random

'
license-name: BSD3
