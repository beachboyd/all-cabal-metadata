homepage: ''
changelog-type: ''
hash: cac75e0d8cd60a82141cb828c4c510cd93411de5fb53efc9d7022dd501f3dd9f
test-bench-deps: {}
maintainer: jozefg@cmu.edu
synopsis: A one file compiler for PCF
changelog: ''
basic-deps:
  void: -any
  bound: ==1.*
  base: ! '>=4.0 && <5'
  containers: ! '>=0.5'
  mtl: ==2.*
  c-dsl: -any
  monad-gen: -any
  transformers: -any
  prelude-extras: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Danny Gratzer
latest: 0.1.0.1
description-type: markdown
description: ! "## pcf\n\nA one file compiler for PCF to C. It's currently about 275
  lines of\ncompiler and 75 lines of extremely boring instances. The compiler is\nfully
  explained in [this blog post][post].\n\n## What's PCF\n\nPCF is a tiny typed, higher-order
  functional language. It has 3 main\nconstructs,\n\n1. Natural Numbers\n\n    In
  PCF there are two constants for natural numbers. `Zero` and\n    `Suc`. `Zero` is
  pretty self explanatory. `Suc e` is the successor\n    of a natural number, it's
  `1 + e` in other languages. Finally,\n    when given a natural number you can pattern
  match on it with\n    `ifz`.\n\n        ifz e {\n           Zero  => ...\n         |
  Suc x => ...\n        }\n\n    Here the first branch runs if `e` evaluates to zero
  and the second\n    branch is run if `e` evaluates to `Suc ...`. `x` is bound to
  the\n    predecessor of `e` in the successor case.\n\n2. Functions\n\n   PCF has
  functions. They can close over variables and are higher\n   order. Their pretty
  much what you would expect from a functional\n   language. The relevant words here
  are `Lam` and `App`. Note that\n   functions must be annotated with their arguments
  type.\n\n3. General Recursion\n\n   PCF has general recursion (and is thus Turing
  complete). It\n   provides it in a slightly different way than you might be used\n
  \  to. In PCF you have the expression `fix x : t in ...` and in the\n   `...` `x`
  would be bound. The intuition here is that `x` stands for\n   the whole `fix x :
  t in ...` expression. If you're a Haskell person\n   you can just desugar this to
  `fix $ \\x : t -> ...`.\n\n\n## Example\n\nFor a quick example of how this all hangs
  together, here is how you\nwould define `plus` in PCF\n\n``` haskell\n    plus =\n
  \     fix rec : nat -> nat -> nat in\n        λ m : nat.\n        λ n : nat.\n          ifz
  m {\n             Zero  => n\n           | Suc x => Suc (rec x n)\n          }\n```\n\nFor
  this library we'd write this AST as\n\n``` haskell\n    let lam x e = Lam Nat $
  abstract1 x e\n        fix x e = Fix (Arr Nat (Arr Nat Nat)) $ abstract1 x e\n        ifz
  i t x e = Ifz i t (abstract1 x e)\n        plus = fix 1 $ lam 2 $ lam 3 $\n                 ifz
  (V 2)\n                     (V 3)\n                     4 (Suc (App (V 1) (V 4)
  `App` (V 3)))\n    in App (App plus (Suc Zero)) (Suc Zero)\n```\n\nWe can then chuck
  this into the compiler and it will spit out the\nfollowing C code\n\n``` c\n    tagged_ptr
  _21(tagged_ptr * _30)\n    {\n        tagged_ptr _31 = dec(_30[1]);\n        tagged_ptr
  _35 = EMPTY;\n        if (isZero(_30[1]))\n        {\n            _35 = _30[2];\n
  \       }\n        else\n        {\n            tagged_ptr _32 = apply(_30[0], _31);\n
  \           tagged_ptr _33 = apply(_32, _30[2]);\n            tagged_ptr _34 = inc(_33);\n
  \           _35 = _34;\n        }\n        return _35;\n    }\n    tagged_ptr _18(tagged_ptr
  * _36)\n    {\n        tagged_ptr _37 = mkClos(_21, 2, _36[0], _36[1]);\n        return
  _37;\n    }\n    tagged_ptr _16(tagged_ptr * _38)\n    {\n        tagged_ptr _39
  = mkClos(_18, 1, _38[0]);\n        return _39;\n    }\n    tagged_ptr _29(tagged_ptr
  * _40)\n    {\n        tagged_ptr _41 = mkClos(_16, 0);\n        tagged_ptr _42
  = fixedPoint(_41);\n        tagged_ptr _43 = mkZero();\n        tagged_ptr _49 =
  inc(_43);\n        tagged_ptr _50 = apply(_42, _49);\n        tagged_ptr _51 = mkZero();\n
  \       tagged_ptr _56 = inc(_51);\n        tagged_ptr _57 = apply(_50, _56);\n
  \       return _57;\n    }\n    int main()\n    {\n        call(_29);\n    }\n```\n\nWhich
  when run with `preamble.c` pasted on top it prints out `2`. As\nyou'd hope.\n\n[post]:
  http://jozefg.bitbucket.org/posts/2015-03-24-pcf.html\n"
license-name: MIT
