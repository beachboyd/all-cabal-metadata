homepage: https://github.com/alephcloud/hs-aws-kinesis
changelog-type: markdown
hash: 2b4e0ac7d345823962668a0c66875e26466ecb15fa057e29a0db567bba6a00c7
test-bench-deps:
  bytestring: ! '>=0.10'
  base: ==4.*
  aws: ! '>=0.9'
  text: ! '>=1.1'
  aws-kinesis: -any
  tagged: ! '>=0.7'
  tasty-quickcheck: ! '>=0.8'
  mtl: ! '>=2.0'
  transformers: ! '>=0.3'
  tasty: ! '>=0.8'
  errors: ! '>=1.4.7'
  QuickCheck: ! '>=2.7'
  aws-general: ! '>=0.1'
  aeson: ! '>=0.7'
maintainer: Lars Kuhtz <lkuhtz@pivotmail.com>
synopsis: Bindings for Amazon Kinesis
changelog: ! "0.1.5\n=====\n\n*   Provide `NFData` instances for all suitable types.\n\n0.1.4\n=====\n\n*
  \  Solve [issue #15](https://github.com/alephcloud/hs-aws-kinesis/issues/15),\n
  \   adding support for custom endpoints.\n\n*   Add support for specifying a protocol
  to `KinesisConfiguration`.\n\n*   Raise lower bound on aws-general to 0.2.1.\n\n0.1.3\n=====\n\n*
  \  Fix [bug #9](https://github.com/alephcloud/hs-aws-kinesis/issues/9);\n    accept
  both `Message` and `message` in JSON error responses\n    from AWS.\n\n*   Solve
  [issue #11](https://github.com/alephcloud/hs-aws-kinesis/issues/11);\n    export
  PutRecords from Aws.Kinesis\n\n*   Raise lower bound on aws-general to 0.2.\n\n0.1.2\n=====\n\n*
  \  Add support `PutRecords` action.\n\n*   Fix a bug in the `GetShardIterator` action's
  `ToJSON` instance which\n    prevented starting an iterator at a sequence number.\n\n0.1.1\n=====\n\n*
  \  Add `IteratedTransaction` and `ListResponse` instances for\n    `DescribeStream`,
  `GetRecords`, and `ListStreams`.\n\n*   Fix recognition of test failures.\n\n0.1\n===\n\nFirst
  public version.\n"
basic-deps:
  bytestring: ! '>=0.10'
  base: ==4.*
  time: ! '>=1.4'
  base64-bytestring: ! '>=1.0'
  aws: ! '>=0.9'
  text: ! '>=1.1'
  conduit: ! '>=1.1'
  conduit-extra: ! '>=1.1'
  blaze-builder: ! '>=0.3'
  parsers: ! '>=0.11'
  quickcheck-instances: ! '>=0.3'
  transformers: ! '>=0.3'
  deepseq: ! '>=1.3'
  QuickCheck: ! '>=2.7'
  http-conduit: ! '>=2.1'
  resourcet: ! '>=1.1'
  aws-general: ! '>=0.2.2'
  http-types: ! '>=0.8'
  aeson: ! '>=0.7'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
author: Lars Kuhtz <lkuhtz@pivotmail.com>
latest: 0.1.5
description-type: markdown
description: ! '[![Build Status](https://travis-ci.org/alephcloud/hs-aws-general.svg?branch=master)](https://travis-ci.org/alephcloud/hs-aws-kinesis)



  Haskell Bindings for [Amazon Kinesis](http://aws.amazon.com/kinesis/)

  =====================================================================


  *API Version 2013-12-02*


  [Amazon Kinesis API Reference](http://docs.aws.amazon.com/kinesis/2013-12-02/APIReference)


  This package depends on the [aws-general](https://github.com/alephcloud/hs-aws-general)
  package

  and the [aws](https://github.com/aristidb/aws) package. From the latter the it borrows
  the

  machinery for [managing AWS credentials](https://hackage.haskell.org/package/aws-0.9/docs/Aws.html#g:17)

  and [making requests](https://hackage.haskell.org/package/aws-0.9/docs/Aws.html).
  There

  is also some documentation, including an usage example, in the

  [README of the aws package](https://github.com/aristidb/aws/blob/master/README.org)



  Installation

  ============


  Assuming that the Haskell compiler *GHC* and the Haskell build tool *cabal* is already

  installed run the following command from the shell:


  ~~~{.sh}

  cabal install --enable-tests

  ~~~


  Running Tests

  =============


  There are few test cases included in the package. These tests require an AWS account

  and AWS credentials stored in the file `~/.aws-keys` in the format described in
  the

  [documentation of the aws package](https://hackage.haskell.org/package/aws-0.9/docs/Aws.html#g:17).


  When running these tests some (low) costs may incur for usage of the AWS services.

  Therefor the user must explicitly consent to the usage of the AWS credentials by

  passing the commandline options `--run-with-aws-credentials` to the test application.


  ~~~{.sh}

  cabal test --test-option=--run-with-aws-credentials

  ~~~


  Example Usage

  =============


  Here is a very simple example for making a single request to AWS Kinesis. For more
  ellaborate

  usage refer to the [documentation of the AWS package](https://hackage.haskell.org/package/aws).


  ~~~{.haskell}

  import Aws

  import Aws.Core

  import Aws.General

  import Aws.Kinesis

  import Data.IORef


  cfg <- Aws.baseConfiguration

  creds <- Credentials "access-key-id" "secret-access-key" `fmap` newIORef []

  let kinesisCfg = KinesisConfiguration UsWest2

  simpleAws cfg kinesisCfg $ ListStreams Nothing Nothing

  ~~~


  In order to run the example you must replace `"access-key-id"` and

  `"secret-access-key"` with the respective values for your AWS account.


  You may also take a look at the test examples in

  [tests/Main.hs](https://github.com/alephcloud/hs-aws-kinesis/blob/master/tests/Main.hs).


'
license-name: Apache-2.0
