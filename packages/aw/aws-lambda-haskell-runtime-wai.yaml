homepage: https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai#readme
changelog-type: markdown
hash: 8d6442d388cb655b1971956945503be68606f210caa114bd9ae7db540547ee52
test-bench-deps:
  bytestring: -any
  wai: -any
  case-insensitive: -any
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  aws-lambda-haskell-runtime-wai: -any
  network: -any
  binary: -any
  aws-lambda-haskell-runtime: '>=3.0.0'
  vault: -any
  iproute: -any
  http-types: -any
  aeson: -any
maintainer: dnikolovv@hotmail.com
synopsis: Run wai applications on AWS Lambda
changelog: |
  # Changelog for aws-lambda-haskell-runtime-wai

  ## 1.0.1

  * Removed forgotten print statements
  * Applied a [temporary hotfix](https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai/pull/4) for handling query parameters
basic-deps:
  bytestring: -any
  wai: -any
  case-insensitive: -any
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  network: -any
  binary: -any
  aws-lambda-haskell-runtime: '>=3.0.0'
  vault: -any
  iproute: -any
  http-types: -any
  aeson: -any
all-versions:
- 1.0.0
- 1.0.1
author: Dobromir Nikolov
latest: 1.0.1
description-type: markdown
description: "# aws-lambda-haskell-runtime-wai [![Hackage](https://img.shields.io/hackage/v/aws-lambda-haskell-runtime-wai.svg?style=flat)](http://hackage.haskell.org/package/aws-lambda-haskell-runtime-wai)
  ![Haskell CI](https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai/workflows/Haskell%20CI/badge.svg)\n\n##
  Quick start\n\n1. Set up your project to use AWS Lambda by following the instructions
  on the [aws-lambda-haskell-runtime website](https://theam.github.io/aws-lambda-haskell-runtime/).\n2.
  Use the `waiHandler` function from `AWS.Lambda.Wai` to convert your [`wai`](https://hackage.haskell.org/package/wai)
  application to a handler. There are two ways to do this.\n\n```haskell\n-- 1. Pass
  in the initializeApplicationFunction\n-- this will call initializeApplication per
  each call\nhandler :: WaiHandler ()\nhandler = waiHandler initializeApplication\n\n--
  Wai application initialization logic\ninitializeApplication :: IO Application\ninitializeApplication
  = ...\n``` \n\n```haskell\n-- 2. Store the Application inside your custom context
  and provide a getter function\n-- this will initialize the application once per
  cold start and keep it alive while the lambda is warm\nhandler :: WaiHandler MyAppConfig\nhandler
  = waiHandler' getWaiApp\n\ndata MyAppConfig =\n  MyAppConfig\n    { getWaiApp ::
  Application }\n```\n\nFor a complete example see [theam/aws-lambda-haskell-runtime/tree/master/examples/wai-app](https://github.com/theam/aws-lambda-haskell-runtime/tree/master/examples/wai-app)\n"
license-name: BSD-3-Clause
