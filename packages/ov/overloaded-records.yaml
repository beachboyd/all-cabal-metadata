homepage: https://github.com/trskop/overloaded-records
changelog-type: markdown
hash: d9facb383b2a9eaff023753b26737b7c5fb0b35af0f0dd3aa1ccb9e9b02c7605
test-bench-deps:
  test-framework-hunit: ! '>=0.2.6 && <1'
  test-framework: ! '>=0.8 && <1'
  base: ! '>=4.7 && <5'
  data-default-class: ==0.0.* || ==0.1.*
  HUnit: ! '>=1.2 && <2'
  overloaded-records: -any
  template-haskell: ! '>=2.9 && <2.12'
maintainer: peter.trsko@gmail.com
synopsis: Overloaded Records based on current GHC proposal.
changelog: ! "# ChangeLog / ReleaseNotes\n\n\n## Version 0.4.2.0\n\n* `Rec` instances
  for `Eq1`, `Ord1`, `Show1`, `Eq`, `Ord`, and `Show`.\n  Instances for `Eq1`, `Ord1`
  and `Show1` are available only with transformers\n  ==0.5.\\* or with base >=4.9
  (i.e. GHC >=8). (**new**)\n* Introducing `WrappedLensLike` data type along with
  a simplified type\n  `WrappedLensLike'`. For each of these we have corresponding
  `lns` and `lns'`\n  operation for unpacking `WrappedLensLike`. (**new**)\n    *
  `lns :: WrappedLensLike f s t a b -> (a -> f b) -> s -> f t`\n    * `lns' :: WrappedLensLike'
  f s a -> (a -> f a) -> s -> f s`\n* Allowing fields\\/accessors to occur in multiple
  data constructors by not\n  creating duplicit instances, thanks to\n  [Andy Morris](https://github.com/andy-morris).
  See\n  [pull request #2](https://github.com/trskop/overloaded-records/pull/2).\n
  \ (**change**)\n* Data type `Label (l :: Symbol)` that can be used to pass label
  value around.\n  (**new**)\n* Instances for `fst`, `snd`, `thd` and `curry` fields
  for 11-tuples, 12-tuples\n  up to 15-tuples. (**new**)\n* Instances for `head` and
  `tail` fields for `NonEmpty` list. (**new**)\n* Instances for `HasField` and `ModifyField`
  `Rec context r` where `r` is\n  monomorphic. This is just a poor man's instance,
  since its usability is very\n  limited, but helpful in those special cases. Hopefully
  we will be able to\n  find a way how to define overloaded records machinery for
  `Rec context r` in\n  general. (**new**)\n\n\n## Version 0.4.1.0\n\n* Introducing
  `Getter` newtype along with `get` function. (**new**)\n    * `get :: Getter s a
  -> s -> a`\n* Introducing `Rec` data type that allows passing polymorphic record
  along with\n  its instances as a normal value. (**new**)\n* Corrections and updates
  in documentation (**change**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.4.1.0>\n\n\n##
  Version 0.4.0.0\n\n* Renamed `SetField` type class to `ModifyField`, it now contains
  following\n  methods (**breaking change**):\n    * `modifyField :: Proxy# l -> (a
  -> b) -> s -> t`\n    * `setField :: Proxy# l -> s -> b -> t`\n    * `fieldLens
  :: Functor f => Proxy# l -> (a -> f b) -> s -> f t`\n* Instances for tuples (i.e.
  `(a, b)`, `(a, b, c)`, ...) and lists (i.e.\n  `[a]`). (**new**)\n* Definitions
  from `Data.OverloadedRecords.TH` were moved to\n  `Data.OverloadedRecords.TH.Internal`,
  so that API can be split in to stable\n  and unstable (internal) API. (**change**)\n*
  Aliases `HasField'` and `ModifyField'` that enforce `s = t` and `a = b`. This\n
  \ is similar to definitions like `Lens'`. Simplified versions of methods and\n  functions
  are included using the same naming convention. (**new**)\n* `Setter` and `Setter'`
  changed to type aliases for `Modifier` type.\n  (**breaking change**)\n* Introducing
  `Setting` type alias for `Modifier` along with `setting`, which\n  is an alternative
  to `set` operation. (**new**)\n    * `setting :: Setting a s t b -> Proxy a -> b
  -> s -> t`\n* Changed order of arguments of functions `set` and `set'` (**breaking\n
  \ change**):\n    * `set :: Setter s t b -> b -> s -> t`\n    * `set' :: Setter'
  s a -> a -> s -> s`\n* Introduced type family `R` that can be used to define more
  compact type\n  signatures when mentioning multiple record fields in it. (**new**)\n*
  Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.4.0.0>\n\n\n##
  Version 0.3.0.0\n\n* Fixed defaultMakeFieldName, which actually behaved correctly
  only in very few\n  cases. (**bug fix**)\n* Added missing `HAVE_OVERLOADED_LABELS`
  macro, that actually allows us to use\n  GHC's `IsLabel` on GHC >8. (**bug fix**)\n*
  Exposing previously hidden `FromArrow` and `IsFieldAccessor`. (**change**)\n* Few
  simple unit tests. (**new**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.3.0.0>\n\n\n##
  Version 0.2.0.0\n\n* Function `overloadedRecords` renamed to `overloadedRecord`.
  There is also new\n  `overloadedRecords` function, that behaves as `overloadedRecord`,
  but for\n  multiple types at once. (**breaking change**)\n* It is now possible to
  customize overloadedRecord\\* family of functions with\n  custom getter and setter
  implementation. (**new**)\n* Types and functions follow, hopefully, better naming
  conventions. (**change**)\n* More low-level template haskell functions for those
  cases when it is\n  necessary to build your own higher-level ones, or when you need
  much more\n  control over the result. (**new**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.2.0.0>\n\n\n##
  Version 0.1.0.0\n\n* First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/overloaded-records-0.1.0.0>\n\n\n\n[Hackage]:\n
  \ http://hackage.haskell.org/\n  \"HackageDB (or just Hackage) is a collection of
  releases of Haskell packages.\"\n"
basic-deps:
  base: ! '>=4.7 && <5'
  data-default-class: ==0.0.* || ==0.1.*
  template-haskell: ! '>=2.9 && <2.12'
all-versions:
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
author: Peter TrÅ¡ko
latest: 0.4.2.0
description-type: markdown
description: ! "# Overloaded Records\n\n[![Hackage](http://img.shields.io/hackage/v/overloaded-records.svg)][Hackage:
  overloaded-records]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/overloaded-records.svg)](http://packdeps.haskellers.com/reverse/overloaded-records)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Build](https://travis-ci.org/trskop/overloaded-records.svg)](https://travis-ci.org/trskop/overloaded-records)\n\n\n##
  Description\n\nImplementation of *Overloaded Record Fields* based on current GHC
  proposal. It\nis built on top of functionality that is included in GHC 8.0.1, but
  it works on\nolder GHC versions as well. Most importantly, this library provides
  Template\nHaskell functions for automatic deriving of instancess for `HasField`
  and\n`ModifyField` type classes. With these instances overloaded fields can be used\ndirectly
  as getters and lenses.\n\n```Haskell\nimport Data.Default (Default(def))\nimport
  Data.OverloadedRecords.TH (overloadedRecord)\n\nnewtype Bar a = Bar {_bar :: a}\n\noverloadedRecord
  def ''Bar\n```\n\nOn GHC 8.0.1 it is possible to just write:\n\n```Haskell\n{-#
  LANGUAGE OverloadedLabels #-}\n\nimport Control.Lens ((+~))\n\nadd :: Int -> Bar
  Int -> Bar Int\nadd n = #bar +~ n\n```\n\nFor older GHC versions there is a family
  of Template Haskell functions that\nwill derive overloaded labels in form of standard
  haskell definitions:\n\n```Haskell\nimport Control.Lens ((+~))\nimport Data.OverloadedLabels.TH
  (label)\n\nlabel \"bar\"\n\nadd :: Int -> Bar Int -> Bar Int\nadd n = bar +~ n\n```\n\nMore
  about the current status of OverloadedRecordFields language extension can\nbe found
  on [GHC Wiki: OverloadedRecordFields][].\n\n\n## Usage Example\n\nFollowing is a
  more complex usage example that demonstrates some of the\npossibilities of *Overloaded
  Labels* provided by this library.\n\n```Haskell\n-- Basic set of language extensions
  required when defining instances for\n-- classes and type families from \"Data.OverloadedRecords\".\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses
  #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- Following
  language extensions are required by code like this:\n\n{-# LANGUAGE ConstraintKinds
  #-}\n    -- Codomain of type family 'R' is a 'Constraint' kind.\n\n{-# LANGUAGE
  FlexibleContexts #-}\n    -- Required in example when field type (second argument
  of ':::') is a\n    -- specific type instead of a polymorphic type.\n\n{-# LANGUAGE
  TypeOperators #-}\n    -- Required due to usage of ':::' type alias.\n\n-- Following
  language extensions are available only in GHC >=8:\n\n{-# LANGUAGE OverloadedLabels
  #-}\n    -- Enables #label syntactic sugar.\n\nmodule Example\n  where\n\nimport
  Data.Default (Default(def))\n    -- Provided by one of these packages:\n    --\n
  \   -- * data-default\n    -- * data-default-extra\n\nimport Data.OverloadedRecords\nimport
  Data.OverloadedRecords.TH (overloadedRecord)\n\n\ndata V3 a = V3\n    { v3x :: !a\n
  \   , v3y :: !a\n    , v3z :: !a\n    }\n  deriving Show\n\n-- Following line derives
  instances for various type classes and type\n-- families that are provided by the
  overloaded-records library.\n--\n-- However with def (default settings) this is
  done only for fields that\n-- start with type name, data constructor name, or underscore.
  Prefix is\n-- stripped. In example \"v3x\" is transformed in to \"x\" and so would
  be\n-- \"_x\".\noverloadedRecord def ''V3\n\ndata V4 a = V4\n    { v4x :: !a\n    ,
  v4y :: !a\n    , v4z :: !a\n    , v4t :: !a\n    }\n  deriving Show\n\noverloadedRecord
  def ''V4\n\nzeroV3\n    :: (Num a, R '[\"x\" ::: a, \"y\" ::: a, \"z\" ::: a] r)\n
  \   => r -> r\nzeroV3 = set' #x 0 . set' #y 0 . set' #z 0\n```\n\nThe following
  type signatures for `zeroV3` are equivalent:\n\n```Haskell\nzeroV3\n    :: (Num
  a, R '[\"x\" ::: a, \"y\" ::: a, \"z\" ::: a] r)\n    => r -> r\n```\n\n```Haskell\nzeroV3\n
  \   ::  ( Num a\n        , ModifyField' \"x\" r a\n        , ModifyField' \"y\"
  r a\n        , ModifyField' \"z\" r a\n        )\n    => r -> r\n```\n\nOne of the
  biggest features of *Overloaded Records* is the possibility to\ndefine functions
  that do not depend on concrete data types, but on the \"fields\"\nthey provide.
  In example function `zeroV3` can be applied to anything that has\nfields `\"x\"`,
  `\"y\"`, and `\"z\"` that reference values of some `Num` type:\n\n```Haskell\nÎ»>
  zeroV3 (V3 1 1 1 :: V3 Int)\nV3 {_x = 0, _y = 0, _z = 0}\n```\n\n```Haskell\nÎ»>
  zeroV3 (V4 1 1 1 1 :: V4 Int)\nV4 {_x = 0, _y = 0, _z = 0, _t = 1}\n```\n\nFunction
  `zeroV3` can be also defined using operators from\n[lens][Hackage: lens] library:\n\n```Haskell\nimport
  Control.Lens ((.~), simple)\n\nzeroV3\n    :: (Num a, R '[\"x\" ::: a, \"y\" :::
  a, \"z\" ::: a] r)\n    => r -> r\nzeroV3 r = r\n    & #x . simple .~ 0\n    & #y
  . simple .~ 0\n    & #z . simple .~ 0\n```\n\n\n## License\n\nThe BSD 3-Clause License,
  see [LICENSE][] file for details. This implementation\nis based on original prototype,
  which is under MIT License.\n\n\n## Contributions\n\nContributions, pull requests
  and bug reports are welcome! Please don't be\nafraid to contact author using GitHub
  or by e-mail.\n\n\n## Related Work\n\n* [ruin][Hackage: ruin] is a DSL for working
  with record types that also\n  leverages OverloadedLabels language extension.\n*
  [vinyl][Hackage: vinyl] provides extensible records for Haskell with lenses\n  using
  modern GHC features.\n\n\n\n[GHC Wiki: OverloadedRecordFields]:\n  https://ghc.haskell.org/trac/ghc/wiki/Records/OverloadedRecordFields\n
  \ \"OverloadedRecordFields language extension on GHC Wiki\"\n[Hackage: lens]:\n
  \ https://hackage.haskell.org/package/lens\n  \"lens package on Hackage\"\n[Hackage:
  overloaded-records]:\n  http://hackage.haskell.org/package/overloaded-records\n
  \ \"overloaded-records package on Hackage\"\n[Hackage: ruin]:\n  https://hackage.haskell.org/package/ruin\n
  \ \"ruin package on Hackage\"\n[Hackage: vinyl]:\n  https://hackage.haskell.org/package/vinyl\n
  \ \"vinyl package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The
  Haskell Programming Language\"\n[LICENSE]:\n  https://github.com/trskop/overloaded-records/blob/master/LICENSE\n
  \ \"License of overloaded-records package.\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n"
license-name: BSD-3-Clause
