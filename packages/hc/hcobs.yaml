homepage: https://github.com/berdario/hcobs#readme
changelog-type: ''
hash: e1b817fcf131ba92170f9590233ae060d6c0b930e38afad0db40841277819bc9
test-bench-deps:
  bytestring: -any
  reflection: -any
  base: -any
  hcobs: -any
  base64-bytestring: -any
  criterion: -any
  hedgehog: ! '>=0.5'
  weigh: -any
  ghc-prim: -any
  mtl: -any
  mmorph: -any
  deepseq: -any
maintainer: berdario@gmail.com
synopsis: An implementation of the Consistent Overhead Byte Stuffing algorithm
changelog: ''
basic-deps:
  bytestring: -any
  reflection: -any
  base: ! '>=4.7 && <5'
  containers: -any
  ghc-prim: -any
all-versions:
- '0.1.0.0'
author: Dario Bertini
latest: '0.1.0.0'
description-type: markdown
description: ! "# hcobs\n\n[![Build Status](https://travis-ci.org/berdario/hcobs.svg?branch=master)](https://travis-ci.org/berdario/hcobs)\n\nHaskell
  implementation of the [Consistent Overhead Byte Stuffing](https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing)
  algorithm.\n\nIt provides a `Stuffed` newtype wrapper for Lazy Bytestrings, which
  is parametrized on the Byte (Word8, representated as a type-level Nat) to be encoded
  away.\n\nThe implementation tries to be as efficient as possible, type safe and
  easy to use. If you have a \"sink\" like\n\n\n    sink :: Stuffed 0 -> IO ()\n    sink
  = undefined\n\nYou'd then simply be able to encode a Bytestring with `sink $ stuff
  bytes`.\n\nYou can try this out in ghci with:\n\n    > :set -XOverloadedStrings\n
  \   > :set -XDataKinds\n    > import Data.Stuffed\n    > let stuffedBytes = stuff
  \"a\\0b\\0c\" :: Stuffed 0\n    > unpack $ unwrap stuffedBytes -- directly access
  the underlying bytestring\n    [2,97,2,98,2,99]\n    > unpack $ unstuff stuffedBytes\n
  \   [97,0,98,0,99]\n"
license-name: BSD3
