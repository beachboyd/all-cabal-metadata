homepage: https://github.com/lulf/hcoap
changelog-type: ''
hash: 341428db573bf12dd204bd901b1218c38dfa92acf4d7276b33407cdd7a89539c
test-bench-deps:
  bytestring: -any
  base: -any
  network: -any
  async: -any
  HUnit: -any
  hcoap: -any
  random: -any
  QuickCheck: -any
maintainer: ulf.lilleengen@gmail.com
synopsis: CoAP implementation for Haskell.
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  stm: ! '>=2.4 && <2.5'
  base: ==4.*
  time: ! '>=1.4 && <1.6'
  network: ==2.6.*
  async: ! '>=2.0 && <3'
  binary: ! '>=0.7 && <0.8'
  network-uri: ! '>=2.6 && <3'
  mtl: ! '>=2.1 && <2.3'
  hcoap: -any
  iproute: ! '>=1.3 && <2'
  random: ! '>=1.1 && <2'
  dns: ! '>=2 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
author: Ulf Lilleengen
latest: 0.1.2.1
description-type: markdown
description: ! "Hcoap is a haskell CoAP library. See http://coap.technology/ for more
  information about the CoAP\nprotocol. The library aims to support RFC 7252 specification,
  and currently only support non-secure\nCoAP transport.\n\nThe library is split into
  a high-level API in Network.CoAP.Server and Network.CoAP.Client, and a lower layer
  API in Network.CoAP.Message for working directly with CoAP messages.\n\n[![Build
  Status](https://travis-ci.org/lulf/hcoap.svg?branch=master)](https://travis-ci.org/lulf/hcoap)\n\n##
  Example server\n    main =\n      withSocketsDo $ do\n        sock <- socket AF_INET6
  Datagram defaultProtocol\n        bindSocket sock (SockAddrInet6 5683 0 iN6ADDR_ANY
  0)\n        server <- createServer (createUDPTransport sock) (\\(request, _) ->
  do\n          let payload = Just (B.pack \"{\\\"value\\\":\\\"foo\\\"}\")\n          return
  (Response Content [ContentFormat ApplicationJson] payload))\n        runServer server\n\n##
  Example client\n    main = do\n      let request = Request { requestMethod = GET\n
  \                           , requestOptions = []\n                            ,
  requestPayload = Nothing\n                            , requestReliable = True }\n
  \   withSocketsDo $ do\n      sock <- socket AF_INET6 Datagram defaultProtocol\n
  \     bindSocket sock (SockAddrInet6 0 0 iN6ADDR_ANY 0)\n      let transport = createUDPTransport
  sock\n      client <- createClient transport\n      uri <- parseURI \"coap://[::1]:5683/hello\"\n
  \     response <- doRequest client uri request\n      putStrLn (\"Got response:
  \" ++ show response)\n      return ()\n"
license-name: BSD-3-Clause
