homepage: ''
changelog-type: ''
hash: 0d5df616e8810ca8d426a953c062825f92b4af21a75bb9d4d2ce485e4d45809f
test-bench-deps: {}
maintainer: Todd Wegner
synopsis: Virtual Rubik's cube of arbitrary size.
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  text: ! '>=0.11.2.3'
  HaskellForMaths: ! '>=0.4.5'
  QuickCheck: ! '>=2.5.1.1'
  directory: ! '>=1.1.0.1'
all-versions:
- 0.1.0
- 0.1.1
author: Todd Wegner
latest: 0.1.1
description-type: text
description: ! "----------------------------------------------------------------------------\n--
  \n--             :  hcube\n-- Copyright   :  (c) Todd Wegner 2012\n-- License     :
  \ BSD-style (see the LICENSE file)\n-- \n-- Maintainer  :  echbar137@yahoo.co.in\n--
  Stability   :  provisional\n-- Portability :  portable\n-- \n-----------------------------------------------------------------------------\n\nCommand
  line arguments for hcube :\n\n./hcube 2\tLoads the 2x2x2 cube state.\n./hcube 3\tLoads
  the 3x3x3 cube state.\n./hcube 4\tLoads the 4x4x4 cube state.\n./hcube 5\tLoads
  the 5x5x5 cube state.\n./hcube\t\tLoads the 3x3x3 cube state.\n./hcube <name of
  physical cube file> Creates cube based on physical file.\n\nCube is created in a
  solved state if no previous state for that dimension exists.\nAlthough the library
  supports cubes of arbitrary size, the hcube executable does not\nsupport sizes beyond
  5x5x5.\n\nThe state of cube is stored in the 'store' directory with a name based
  on the dimension\nof the cube.  For example a 3x3x3 cube is saved as 'solved/3x3x3'.\n\nIf
  the 'solve' directory does not exist it is created.\n\nLoading a physical Cube state
  :\nPhysical file must be placed in the 'store' directory.\n\nSample contents of
  a physical file for a 3x3x3 cube is :\n\n[(UpS,    [White,Green,Yellow,Green,White,Green,Red,White,Green]),\n
  (FrontS, [Blue,Blue,White,Yellow,Orange,Yellow,Red,Yellow,White]),\n (DownS,  [Yellow,Blue,Green,White,Yellow,Blue,White,Orange,Green]),\n
  (BackS,  [Orange,Blue,Orange,Yellow,Red,Red,Red,Orange,Blue]),\n (LeftS,  [Orange,White,Yellow,Red,Green,Red,Orange,Red,Red]),\n
  (RightS, [Blue,Green,Blue,Orange,Blue,White,Green,Orange,Yellow])]\n\nThis is a
  list of six tuples, corresponding to one for each six side of a cube.\nA tuple consists
  of the cube side followed by a list of colors appearing on that cube side.\nThe
  tuples can be in any order, however it is easier to use the order given, rotating
  the cube\nabout the Left and Right axis to identify the colors of four of the sides.\nThe
  order of the colors appear in the list is important and is given by the following
  diagram :\n\n1  2  3  Right     1  2  3  Up            1  2  3  Left \n4  5  6  Side
  \     4  5  6  Side          4  5  6  Side\n7  8  9            7  8  9                7
  \ 8  9\n\n                   1  2  3  Front\n                   4  5  6  Side\n
  \                  7  8  9\n\n                   1  2  3  Down\n                   4
  \ 5  6  Side\n                   7  8  9\n\n                   1  2  3  Back\n                   4
  \ 5  6  Side\n                   7  8  9\n\nConsole commands for hcube :\n\nhelp
  \  displays command list\nl1+    rotate layer 1 clockwise\nl2-    rotate layer 2
  counter\nh3+    rotate horizontal slab 3 clockwise\nh1-    rotate horizontal slab
  1 counter\nv2+    rotate vertical slab 2 clockwise\nv3-    rotate vertical slab
  3 counter\nl      left side view\nr      right side view\nr+     rotate whole cube
  clockwise 90 degrees (z axis)\nr-     rotate whole cube counter clockwise 90 degrees
  (z axis)\nr2     rotate whole cube 180 degrees\nfh     flip whole cube over along
  horizontal axis\nfv     flip whole cube over along vertical axis\nu      undo last
  cube operation\n\nHistory :\n0.1.0\tInital release.\n0.1.1\thcube is able to physical
  cube from a file.\n\nTo Do :\n1) Add two phase algorithm to solve 3x3x3 cube in
  minumal number of moves.\n2) Add undo.\n3) Add sequence macros.\n4) Extend to 4x4x4
  and 5x5x5.\n"
license-name: BSD-3-Clause
