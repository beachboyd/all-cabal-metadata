homepage: https://github.com/simonmar/async
changelog-type: markdown
hash: 61789382f449a02f827e70a029ba8f24a223b9c6b3792bb094fbd41ee360e851
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  stm: -any
  base: ! '>=4.3 && <4.13'
  async: -any
  HUnit: -any
maintainer: Simon Marlow <marlowsd@gmail.com>
synopsis: Run IO operations asynchronously and wait for their results
changelog: ! "## Changes in 2.2.1:\n\n - Add a Hashable instance for Async\n - Bump
  upper bounds\n - Documentation updates\n\n## Changes in 2.2:\n - cancel now throws
  AsyncCancelled instead of ThreadKilled\n - link and link2 now wrap exceptions in
  ExceptionInLinkedThread when\n   throwing to the linked thread. ExceptionInLinkedThread
  is a child\n   of AsyncException in the exception hierarchy, so this maintains the\n
  \  invariant that exceptions thrown asynchronously should be\n   AsyncExceptions.\n
  - link and link2 do not propagate AsyncCancelled, so it's now\n   possible to cancel
  a linked thread without cancelling yourself.\n - Added linkOnly and link2Only to
  specify which exceptions should be\n   propagated,if you want something other than
  the default behaviour\n   of ignoring AsyncCancelled.\n - new utility function compareAsyncs
  for comparing Asyncs of\n   different types.\n - Add a `Hashable` instance for `Async
  a`\n\n## Changes in 2.1.1.1:\n - Make 'cancelWith' wait for the cancelled thread
  to terminate, like 'cancel'\n - Updates to dependency bounds for GHC 8.2\n\n## Changes
  in 2.1.1:\n\n - Add `concurrently_`\n - Add `replicateConcurrently`\n - Add `replicateConcurrently_`\n
  - Fix incorrect argument order in `forConcurrently_`\n - Generalize `mapConcurrently_`
  and `forConcurrently_` to `Foldable`\n - `withAsync` now reliably kills the thread,
  by using an\n   uninterruptible cancel\n - Make `cancel` wait for the thread to
  finish, and adjust\n   'concurrently' to match\n\n## Changes in 2.1.0:\n\n - Bump
  base dependency to allow 4.10\n - Remove invalid Monad instance for `Concurrently`\n
  - Add `Monoid` and `Semigroup` instances for `Concurrently`\n - Add `forConcurrently`
  (flipped version of `mapConcurrently`)\n - Add STM version of all applicable IO
  functions:\n   `waitAnySTM`, `waitAnyCatchSTM`, `waitEitherSTM`,\n   `waitEitherCatchSTM`,
  `waitEitherSTM_`, and `waitBothSTM`.\n\n## Changes in 2.0.2:\n\n - Add a Monad instance
  for `Concurrently`\n - Bump base dependency to allow 4.9\n\n## Changes in 2.0.1.6:\n\n
  - Add workaround to waitCatch for #14\n\n## Changes in 2.0.1.5:\n\n - Bump `base`
  dependencies for GHC 7.8\n\n## Changes in 2.0.1.4:\n\n - Bump `base` dependency
  of test suite\n\n## Changes in 2.0.1.3:\n\n - Bump `base` dependency to allow 4.6\n\n##
  Changes in 2.0.1.2:\n\n - Bump `stm` dependency to 2.4\n\n## Changes in 2.0.1.1:\n\n
  - Safe Haskell support: `Control.Concurrent.Async` is now `Trustworthy`\n\n## Changes
  in 2.0.1.0:\n\n - Added a `Functor` instance for `Async`\n - Added `asyncBound`,
  `asyncOn`, `asyncWithUnmask`, `asyncOnWithUnmask`, `withAsyncBound`, `withAsyncOn`,
  `withAsyncWithUnmask`, `withAsyncOnWithUnmask`.\n - Added `mapConcurrently`\n -
  Added `Concurrently` (with `Applicative` and `Alternative` instances)\n"
basic-deps:
  stm: ! '>=2.2 && <2.6'
  base: ! '>=4.3 && <4.13'
  async: -any
  hashable: ! '>=1.1.1.0 && <1.3'
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.4'
- 2.0.0.0
- 2.0.1.0
- 2.0.1.1
- 2.0.1.2
- 2.0.1.3
- 2.0.1.4
- 2.0.1.5
- 2.0.1.6
- 2.0.2
- 2.1.0
- 2.1.1
- 2.1.1.1
- 2.2.1
author: Simon Marlow
latest: 2.2.1
description-type: haddock
description: ! 'This package provides a higher-level interface over

  threads, in which an @Async a@ is a concurrent

  thread that will eventually deliver a value of

  type @a@.  The package provides ways to create

  @Async@ computations, wait for their results, and

  cancel them.


  Using @Async@ is safer than using threads in two

  ways:


  * When waiting for a thread to return a result,

  if the thread dies with an exception then the

  caller must either re-throw the exception

  (''wait'') or handle it (''waitCatch''); the

  exception cannot be ignored.


  * The API makes it possible to build a tree of

  threads that are automatically killed when

  their parent dies (see ''withAsync'').'
license-name: BSD-3-Clause
