homepage: https://github.com/packetloop/asif#readme
changelog-type: markdown
hash: 8ecd18c7507e938898a73829911eabfa79a119e80773fad8e6a0acb0e2ca2999
test-bench-deps:
  conduit-combinators: -any
  exceptions: -any
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  asif: -any
  hspec: -any
  text: -any
  temporary-resourcet: -any
  hw-ip: -any
  hedgehog: -any
  network: -any
  conduit: -any
  conduit-extra: -any
  containers: -any
  lens: -any
  binary: -any
  old-locale: -any
  thyme: -any
  iproute: -any
  attoparsec: -any
  generic-lens: -any
  resourcet: -any
  hw-bits: -any
  cpu: -any
  vector: -any
  hw-hspec-hedgehog: -any
maintainer: mayhem@arbor.net
synopsis: ''
changelog: ! '# Changelog for asif


  ## Unreleased changes

'
basic-deps:
  conduit-combinators: -any
  exceptions: -any
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  asif: -any
  text: -any
  temporary-resourcet: -any
  hw-ip: -any
  network: -any
  conduit: -any
  conduit-extra: -any
  containers: -any
  lens: -any
  binary: -any
  old-locale: -any
  thyme: -any
  iproute: -any
  attoparsec: -any
  generic-lens: -any
  optparse-applicative: -any
  resourcet: -any
  hw-bits: -any
  cpu: -any
  vector: -any
  directory: -any
all-versions:
- '1.0.0'
- '2.0.0'
- '3.0.0'
- '3.1.0'
- '3.2.0'
author: Arbor Networks
latest: '3.2.0'
description-type: markdown
description: ! "# Arbor Safe Intelligence Format (asif)\n![CircleCI](https://circleci.com/gh/packetloop/asif.svg?style=svg&circle-token=1420752ec3bc7c068b3a35925ad5f9c63e3d3773)\n\nLibrary
  for creating and querying segmented feeds.\n\n## File Format Specification\n\n###
  Layer 0: Segments\n\n```\n+--------------------+\n|Segmented OSI Model |\n+--------------------+\n\n
  magic, where XXXX is a feed type\n+---------------------+-------------+\n| \"seg:XXXX\"
  [char:8] | ver: uint64 |\n+---------------------+-------------+\n\nc -- countries\na
  -- asns\nn -- naics\n\n header\n+-----------------+\n| seg_num: uint64 |\n+-----------------+\n\n
  segments\n+-----------------------+-----------------------+\n| segment_offset: int32
  | segment_length: int32 |\n+-----------------------+-----------------------+\n\n
  segment vector\n+-------------+\n| key: X, ... |\n+-------------+\n\n segment vector\n+-------------+\n|
  val: Y, ... |\n+-------------+\n```\n\nVector keys are fixed-length values such
  as 4-byte IPv4 addresses,\n2-byte country codes, or 4-byte NAIC IDs.\n\nAll values
  are little-endian.\n\nValues are other ints or can be null-terminated strings.\n\n###
  Layer 1: Segment filenames\n\nSegment 0 must contain a concatenated list of null
  terminated filenames.\n\nThe first filename must be `.asif/filenames`.\n\nThe n-th
  filename in the segment 0 describes the n-th segment in the file.\n\n### Layer 2:
  Additional metadata\n\nThe `asif` file may contain contain a named segment `.asif/createtime`.\nIf
  it does, this segment concatenated `Word64` numbers representing the create\ntime
  of each file in microseconds since epoch.  If the segment does not have a\ncreate
  time, it's create time entry will be `0` instead.\n\nThe `asif` file may contain
  contain a named segment `.asif/formats`.\nIf it does, this segment concatenated
  null terminated strings representing the\nformat of the data in the respective segments.
  \ The `dump` command will use\nthis information to choose the most appropriate way
  to print the data in each\nsegment.\n\n## CLI\n[CLI documentation](doc/cli.md)\n"
license-name: MIT
