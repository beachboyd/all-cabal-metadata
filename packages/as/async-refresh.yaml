homepage: https://github.com/mtesseract/async-refresh
changelog-type: ''
hash: 319441b58a67e256222aa6751f51fba525caba3182a27152a6d71e986aff91eb
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  stm: -any
  base: -any
  text: -any
  criterion: -any
  HUnit: -any
  monad-logger: -any
  async-refresh: -any
maintainer: mtesseract@silverratio.net
synopsis: Package implementing core logic for refreshing of expiring data.
changelog: ''
basic-deps:
  microlens-th: -any
  unliftio: -any
  stm: -any
  base: ! '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  unliftio-core: -any
  formatting: -any
  lifted-async: -any
  monad-logger: -any
  microlens: -any
all-versions:
- '0.1.7'
- '0.2.0'
- '0.2.0.2'
- '0.3.0.0'
author: Moritz Clasmeier
latest: '0.3.0.0'
description-type: markdown
description: ! "# async-refresh [![Hackage version](https://img.shields.io/hackage/v/async-refresh.svg?label=Hackage)](https://hackage.haskell.org/package/async-refresh)
  [![Stackage version](https://www.stackage.org/package/async-refresh/badge/lts?label=Stackage)](https://www.stackage.org/package/async-refresh)
  [![Build Status](https://travis-ci.org/mtesseract/async-refresh.svg?branch=master)](https://travis-ci.org/mtesseract/async-refresh)\n\n###
  About\n\nThis is Haskell library implementing the logic for refreshing of\nexpiring
  data according to user-provided actions.\n\n### Usage\n\n- Create a new configuration
  using `newAsyncRefreshConf`, providing\n  the action to be used for data refreshing.\n\n-
  Adjust the configuration using the `asyncRefreshConfSet*` functions,\n  in particular
  using `asyncRefreshConfSetCallback`.\n\n- Use `newAsyncRefresh` to initiate a new
  thread managing the\n  asynchronous refreshing.\n\n### Example\n\nThe following
  IO action produces a `TVar` which is updated every ten\nseconds to contain the current
  time (wrapped in an `Either\nSomeException`, because refreshing may fail).\n\n```\nperiodicTimeUpdater
  :: IO (TVar (Either SomeException UTCTime))\nperiodicTimeUpdater = runStderrLoggingT
  $ do\n  timeStore <- liftIO $ newTVarIO (Left (toException NotFound))\n  let conf
  = newAsyncRefreshConf (RefreshResult <$> liftIO getCurrentTime <*> pure Nothing)\n
  \       & asyncRefreshConfSetLabel \"CurrentTime updated every 10 seconds\"\n        &
  asyncRefreshConfSetDefaultInterval (10 * 10^3)\n        & asyncRefreshConfSetCallback
  (liftIO . atomically . writeTVar timeStore . fmap refreshResult)\n  _ <- newAsyncRefresh
  conf\n  return timeStore\n```\n"
license-name: BSD3
