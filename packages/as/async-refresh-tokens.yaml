homepage: https://github.com/mtesseract/async-refresh-tokens#readme
changelog-type: ''
hash: 6f1959d6bf496cf532cc16ea3bdc12056f77af90d228e661b9aa405b98a17ae6
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  unliftio: -any
  base: -any
  async-refresh-tokens: -any
  criterion: -any
  HUnit: -any
  monad-logger: -any
maintainer: mtesseract@silverratio.net
synopsis: Package implementing core logic for refreshing of expiring access tokens
changelog: ''
basic-deps:
  microlens-th: ! '>=0.4'
  bytestring: -any
  unliftio: -any
  base: ! '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  unliftio-core: -any
  formatting: -any
  monad-logger: -any
  async-refresh: ! '>=0.3.0.0'
  microlens: ! '>=0.4'
all-versions:
- 0.1.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
author: Moritz Clasmeier
latest: 0.4.0.0
description-type: markdown
description: ! "# async-refresh-tokens [![Hackage version](https://img.shields.io/hackage/v/async-refresh-tokens.svg?label=Hackage)](https://hackage.haskell.org/package/async-refresh-tokens)
  [![Stackage version](https://www.stackage.org/package/async-refresh-tokens/badge/lts?label=Stackage)](https://www.stackage.org/package/async-refresh-tokens)
  [![Build Status](https://travis-ci.org/mtesseract/async-refresh-tokens.svg?branch=master)](https://travis-ci.org/mtesseract/async-refresh-tokens)\n\n###
  About\n\nThis is Haskell library built on top of the async-refresh package\nimplementing
  the logic for refreshing of expiring access tokens.\n\n### Usage\n\n- Create new
  token types.\n\n- Make the tokens be instances of the `IsToken` type classes by\n
  \ defining the `tokenScopes` method and (optionally) `tokenName` (a\n  human readable
  label for this token).\n\n- Use `newEmptyTokenStore` to create a new token stores
  (token stores\n  are basically `TVar`s containing the tokens wrapped in `Either\n
  \ SomeException`).\n\n- Create a new configuration by adjusting `defaultTokenConf`
  using the\n  functions `tokenConfAddRequest` and `tokenConfSetFactor`. The\n  function
  `tokenConfAddRequest` expects values of type `RequestToken`\n  â€” these values encapsulate
  the token stores together with a\n  token-refreshing action.\n\n- Use `newTokenRefresher`
  to initiate token refreshing for each\n  registered token refreshing request.\n\n-
  To use the current token, extract it from the `TVar` using\n  `readTVar` (and pattern
  matching on `Right`).\n\n### Example\n\n```\n{-# LANGUAGE OverloadedStrings   #-}\n\ndata
  TokenFoo\n\ninstance IsToken TokenFoo where\n  tokenScopes _ = [\"foo.read\", \"foo.write\"]\n\ncreateTokenStoreFoo
  :: LoggingT IO (TokenStore TokenFoo)\ncreateTokenStoreFoo = do\n  tokenFoo <- newEmptyTokenStore
  (Proxy :: Proxy TokenFoo)\n  let conf = defaultTokenConf\n             & tokenConfAddRequest
  (RequestToken tokenFoo actionFoo)\n  _ <- newTokenRefresher conf\n  return tokenFoo\n\n
  \ where actionFoo :: (MonadIO m, IsToken t) => m (RefreshResult (Token t))\n        actionFoo
  =\n          return $ RefreshResult (Token \"secret-foo-token\") Nothing\n```\n"
license-name: BSD-3-Clause
