homepage: https://github.com/mouri111/ast-monad-json#readme
changelog-type: ''
hash: 76544dd28e18dd0f17d88de6ea6d347d57301f9f6f14018265dba4ec67f46a31
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  ast-monad-json: -any
  ast-monad: -any
maintainer: 8128jp@gmail.com
synopsis: A library for writing JSON
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  ast-monad: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Masato Mouri
latest: 0.1.0.1
description-type: markdown
description: ! "# ast-monad-json\nA library for writing JSON\n\n## Example\n```Haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Main where\n\nimport Language.ASTMonad\nimport
  Language.ASTMonad.Json\nimport Language.ASTMonad.Json.Renderer\nimport qualified
  Data.Text.Lazy.IO as TL\nimport qualified Data.Text.Lazy.Builder as TB\n\ndata Parameter
  = Parameter { px :: Int, py :: Int }\n\njsonCode :: Json Parameter\njsonCode = do\n
  \ \"id1\" `is` \"val1\"\n  \"id2\" `is` \"val2\"\n  \"flag\" `isBool` True\n  \"point\"
  `isArray` do\n    x <- getParam px\n    y <- getParam py\n    \"px\" `isNum` x\n
  \   \"py\" `isNum` y\n\nmain :: IO ()\nmain = do\n  let param = Parameter { px =
  123, py = 456 }\n  TL.putStrLn $ TB.toLazyText $ renderJson $ buildAST jsonCode
  param JsonEnvironment\n```\n\nThe execution result of the above code is\n\n```\n{\"id1\":\"val1\",\"id2\":\"val2\",\"flag\":true,\"point\":{\"px\":123,\"py\":456}}\n```\n\n"
license-name: BSD-3-Clause
