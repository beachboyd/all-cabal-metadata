homepage: https://github.com/smith-security/oauth2-jwt-bearer
changelog-type: markdown
hash: 17bdd58432781ca700be05f6f57f9b01a55914499569b56128166fe30494a082
test-bench-deps:
  warp: -any
  http-client: -any
  streaming-commons: -any
  bytestring: -any
  oauth2-jwt-bearer: -any
  base: ! '>=4.10 && <5'
  text: -any
  jose: -any
  hedgehog: ==0.6.*
  network: -any
  async: -any
  x509-store: -any
  x509: -any
  http-client-tls: -any
  Spock-core: -any
  cryptonite: -any
  mmorph: ==1.*
  http-types: -any
  aeson: -any
maintainer: mth@smith.st
synopsis: OAuth2 jwt-bearer client flow as per rfc7523
changelog: ! '# Revision history for oauth2-jwt-bearer


  ## 0.1.0.0  -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: ==0.10.*
  transformers-bifunctors: ==0.*
  base: ! '>=4.10 && <5'
  time: ==1.*
  unordered-containers: ==0.2.*
  text: ==1.*
  jose: ==0.7.*
  lens: ==4.*
  http-client-tls: ! '>=0.2 && <0.4'
  transformers: ! '>=0.4 && <0.6'
  http-types: ==0.*
  aeson: ! '>=1.0 && <1.5'
all-versions:
- 0.0.1
author: Mark Hibberd
latest: 0.0.1
description-type: markdown
description: ! "# oauth2-jwt-bearer\n\nThis is an implementation of the jwt-bearer
  authorization grant flow\nthat is specified by the OAuth2 JWT profile in\n[rfc7523](https://tools.ietf.org/html/rfc7523).\n\nThe
  goal is to implement a portable implementation of this flow that\ncan be used against
  multiple servers. Its goal is to be pretty\ngeneral, and has been tested against
  the [Google Cloud Platform OAuth2\nimplementation](https://developers.google.com/identity/protocols/OAuth2ServiceAccount),\nand
  the [Smith implementation](http://smith.st/) as well as a generic\ntest server,
  but there may be a way to go. If you find a server that\nthis implementation doesn't
  work with, let me know and I will add a\ntest and address it.\n\n### Why?\n\nOAuth2
  / OIDC flows are complicated enough that it warrants having an\nimplementation to
  fall back on. The scope of this library is one\nspecific flow to make the implementation
  manageable. It would be nice\nto have a complete set of flow implentations, but
  the reality is that\nOAuth2 doesn't really offer much in the terms of interoperability
  - it\nis about consistency/security, not about interchangable\nimplementations -
  this means that implementing everything at once is a\nsomewhat lost battle. Restricting
  ourselves to this specific flow\nallows us to provide something useful and possible.\n\n###
  Stability\n\nThis library is new, and should have the disclaimers that normally\ncomes
  with that, but the API should be stable and is currently in\nproduction level usage.
  The library will be maintained going forward.\n\n\n### Example\n\nA crude example:\n\n```\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Network.OAuth2.JWT.Client.Example where\n\nimport
  \          Crypto.JWT (JWK)\nimport           Network.OAuth2.JWT.Client\nimport
  \          Network.HTTP.Client (Manager)\n\n\nexample :: Manager -> JWK -> IO (Either
  GrantError AccessToken)\nexample manager key =  do\n  let\n    endpoint = TokenEndpoint
  \"https://www.googleapis.com/oauth2/v4/token\"\n    iss = Issuer \"example@example.org\"\n
  \   scopes = [Scope \"profile\"]\n    aud = Audience \"https://www.googleapis.com/oauth2/v4/token\"\n
  \   expiry = ExpiresIn 3600\n    claims = Claims iss Nothing aud scopes expiry []\n
  \ store <- newStore manager endpoint claims key\n  grant store\n```\n\nThe key function
  here is the `grant` function which is what you call\nto get your access token.\n\nThe
  `grant` function obtains an access token, if we have already\naquired one (and it
  is still valid) we will re-use that token, if we\ndon't already have a token or
  the token has expired, we go and ask for\na new one.\n\nThis operation is safe to
  call from multiple threads. If we are using\na current token reads will happen concurrently,
  If we have to go to\nthe network the request will be serialised so that only one
  request is\nmade for a new token.\n\nThe access token can be used as a bearer token
  in an `Authorization`\nheader. See the specification for more details but it would
  be\nsomething like:\n\n```\nAuthorization: Bearer ${ACCESS_TOKEN}\n```\n"
license-name: BSD-3-Clause
