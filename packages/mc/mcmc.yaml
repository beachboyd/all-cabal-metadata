homepage: https://github.com/dschrempf/mcmc#readme
changelog-type: markdown
hash: 1dbf56024e5d8c084a57a00449abc834cf8d67e12f7980a7c0ab47f83563b042
test-bench-deps:
  mwc-random: -any
  base: '>=4.7 && <5'
  hspec: -any
  mcmc: -any
  criterion: -any
  log-domain: -any
  statistics: -any
  QuickCheck: -any
  hspec-discover: -any
  microlens: -any
  vector: -any
  directory: -any
maintainer: dominik.schrempf@gmail.com
synopsis: Sample from a posterior using Markov chain Monte Carlo
changelog: |2+

  # Markov chain Monte Carlo sampling - ChangeLog


  ## Unreleased changes


  ## 0.3.0

  -   New shorter example/test for dating trees.
  -   `noData` allows running a chain without likelihood function.
  -   Give proposal parameters `PName`, `PDescription`, and `PWeight` newtype
      wrappers.
  -   Give `Tune` a data type.
  -   Allow periodical cleansing of state (`Cleaner`).
  -   Add description string to proposals, so that they can be identified in an
      easier way.
  -   Add simplices and proposals on simplices.
  -   `slideUniform` renamed to `slideUniformSymmetric`.
  -   Merge tools into internal.
  -   Do not export internal modules.


  ## 0.2.4

  -   **Change order of arguments for proposals**.
  -   'slideStem' was renamed to 'slideBranch'.
  -   Change ProposalSimple from newtype to type.
  -   Contravariant instances of parameter and batch monitors. Use `(>$<)` instead
      of `(@.)` and `(@#)`.
  -   Add `gammaDirichlet` prior for partitioned dating analyses.


  ## 0.2.3

  -   Contrary proposals.
  -   Change how monitors are lifted (use normal function, not a lens).
  -   Priors.
  -   Remove concurrent monitors (was slow).
  -   Improve MCMC sampler output.


  ## 0.2.2

  -   Move away from hpack.


  ## 0.2.1

  -   Consistently use ByteString instead of Text.
  -   Verbosity levels.
  -   Improved handling of proposals, moves, and monitors.
  -   Bactrian moves.
  -   Many small changes.


  ## 0.1.3

  Many changes; notably it is now possible to continue a Markov chain run.

basic-deps:
  bytestring: -any
  mwc-random: -any
  base: '>=4.7 && <5'
  time: -any
  double-conversion: -any
  data-default: -any
  log-domain: -any
  containers: -any
  math-functions: -any
  zlib: -any
  statistics: -any
  dirichlet: -any
  transformers: -any
  microlens: -any
  aeson: -any
  primitive: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.3
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.3.0
author: Dominik Schrempf
latest: 0.3.0
description-type: markdown
description: |2+

  # Markov chain Monte Carlo

  <p align="center"><img src="https://travis-ci.org/dschrempf/mcmc.svg?branch=master"/></p>

  Sample from a posterior using Markov chain Monte Carlo methods.

  At the moment, the library is tailored to the Metropolis-Hastings algorithm
  since it covers most use cases. More algorithms will be implemented soon.


  ## Documentation

  The [source code](https://hackage.haskell.org/package/mcmc) contains detailed documentation about general concepts as well
  as specific functions.


  ## Examples

  Have a look at the [example MCMC analyses](https://github.com/dschrempf/mcmc/tree/master/mcmc-examples). They can be built with [Stack](https://docs.haskellstack.org/en/stable/README/) and are
  attached to this repository.

      git clone https://github.com/dschrempf/mcmc.git
      cd mcmc
      stack build

  For example, estimate the [accuracy of an archer](https://github.com/dschrempf/mcmc/blob/master/mcmc-examples/Archery/Archery.hs) with

      stack exec archery

license-name: GPL-3.0-or-later
