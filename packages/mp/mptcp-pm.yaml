homepage: https://github.com/teto/netlink_pm
changelog-type: text
hash: 71e5ac1967bb8d4ce4d54188361f92dc8037578453358ee7a9384210909f811b
test-bench-deps:
  cereal: -any
  netlink: -any
  bytestring: -any
  base: ! '>=4.12 && <4.20'
  HUnit: -any
  ip: -any
  containers: -any
  aeson: -any
maintainer: teto
synopsis: A work in progress Multipath TCP path manager
changelog: |
  v0.0.1:
  - addition of 100s of bugs
  - will mess up your mind
basic-deps:
  cereal: -any
  netlink: ! '>=1.1.1.1'
  bytestring: -any
  bytestring-conversion: -any
  base: ! '>=4.12 && <4.20'
  process: -any
  ip: -any
  c2hsc: -any
  fast-logger: -any
  containers: -any
  optparse-applicative: -any
  aeson: -any
all-versions:
- 0.0.1
author: ''
latest: 0.0.1
description-type: markdown
description: "\nThis is a rewrite in haskell of the python netlink module.\nnix-shell
  -p 'haskellPackages.ghcWithHoogle(p: with p; [netlink optparse-applicative ])'\n\n\nThe
  netlink module asks for GENL_ADMIN_PERM => The operation requires the CAP_NET_ADMIN
  privilege\n\nsudo setcap cap_net_admin+ep hs/dist-newstyle/build/x86_64-linux/ghc-8.6.3/netlink-pm-1.0.0/x/daemon/build/daemon/daemon\n\n#
  Netlink explanation\n\nTo fetch TCP diagnostics:\nCreates a socket with family eNETLINK_INET_DIAG
  (really NETLINK_SOCK_DIAG) with value 4\nAF_INET => netlink family 2\n\n\n\n# Compilation\n\nWith
  a custom netlink and kernel\nCompile the custom netlink library with\n```\n$ cabal
  configure --enable-library-profiling\n```\n```\nkernel $ make headers_install\n$
  cabal configure --package-db /home/teto/netlink-hs/dist/package.conf.inplace --extra-include-dirs=/home/teto/mptcp2/build/usr/include
  -v3 --enable-profiling\n```\n\n\n# Usage\n\nEnter the nix-shell shell-test.nix and
  start the daemon:\n\n$ cabal run daemon\n\nor\n$ buildNRun\nTo print a stacktrace\ncabal
  run daemon toto -- +RTS -xc\n\nIn a shell:\n`$ nix run nixpkgs.iperf -c iperf -s`\n\nIn
  another:\n`$ nix run nixpkgs.iperf -c iperf -c localhost -b 1KiB -t 4 --cport 5500
  -4`\n\nTODO:\nss package sends by default\n```\n-- #define SS_ALL ((1 << SS_MAX)
  - 1)\n-- #define SS_CONN (SS_ALL & ~((1<<SS_LISTEN)|(1<<SS_CLOSE)|(1<<SS_TIME_WAIT)|(1<<SS_SYN_RECV)))\n--
  #define TIPC_SS_CONN ((1<<SS_ESTABLISHED)|(1<<SS_LISTEN)|(1<<SS_CLOSE))\n```\n-
  [ ] write wordToEnums function, especially to fix getSockDiagRequestHeader\n(with
  bitset package once it's fixed)\n\n# Testsuite\n\n# BUGS\n\n- conversion of IDiagExt
  is bad everywhere ? req.r.idiag_ext |= (1<<(INET_DIAG_INFO-1));\n- we need to request
  more states\n\n# TODO \n- pass local/server IPs as commands to the PM ?\n- generate
  completion scripts via --zsh-completion-script\n- to get kernel ifindex: cat /sys/class/net/lo/ifindex\n"
license-name: GPL-3.0-only
