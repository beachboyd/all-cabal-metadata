homepage: https://github.com/futurice/haskell-tdigest#readme
changelog-type: markdown
hash: 0cdad173d8d35bf1831305621077b3dd9774b36457af85fc30d70f80e8fc4a76
test-bench-deps:
  tdigest: -any
  base: -any
  doctest: ! '>=0.11.1 && <0.17'
  semigroups: -any
  base-compat: -any
  binary: -any
  tasty-quickcheck: ! '>=0.8.4 && <0.11'
  vector-algorithms: -any
  tasty: ! '>=0.11.0.4 && <1.2'
  deepseq: -any
  vector: -any
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: On-line accumulation of rank-based statistics
changelog: ! "## 0.2.1\n\n- Add size, valid, validate, and debugPrint for NonEmpty\n
  \ [#26](https://github.com/futurice/haskell-tdigest/pull/26)\n\n## 0.2\n\n- Add
  `Data.TDigest.Vector` module.\n\n## 0.1\n\n- Add `validateHistogram` and `debugPrint`\n-
  Fix a pointy centroid bug.\n- Add `Data.TDigest.NonEmpty` module\n- Add `mean`,
  `variance`, `stddev`\n"
basic-deps:
  semigroupoids: ! '>=5.2.2 && <5.4'
  base: ! '>=4.7 && <4.12'
  base-compat: ! '>=0.10.1 && <0.11'
  binary: ! '>=0.7.1.0 && <0.10'
  vector-algorithms: ! '>=0.7.0.1 && <0.8'
  transformers: ! '>=0.3 && <0.6'
  deepseq: ! '>=1.3.0.2 && <1.5'
  reducers: ! '>=3.12.2 && <3.13'
  vector: ! '>=0.12.0.1 && <0.13'
all-versions:
- '0'
- '0.1'
- '0.2'
- '0.2.1'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0.2.1'
description-type: markdown
description: ! '# tdigest


  A new data structure for accurate on-line accumulation of rank-based statistics
  such as quantiles and trimmed means.


  See original paper: ["Computing extremely accurate quantiles using t-digest"](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf)
  by Ted Dunning and Otmar Ertl


  ## Synopsis


  ```hs

  Î» *Data.TDigest > median (tdigest [1..1000] :: TDigest 3)

  Just 499.0090729817737

  ```


  ## Benchmarks


  Using 50M exponentially distributed numbers:


  - average: **16s**; incorrect approximation of median, mostly to measure prng speed

  - sorting using `vector-algorithms`: **33s**; using 1000MB of memory

  - sparking t-digest (using some `par`): **53s**

  - buffered t-digest: **68s**

  - sequential t-digest: **65s**


  ## Example histogram


  ```

  tdigest-simple -m tdigest -d standard -s 100000 -c 10 -o output.svg -i 34

  cp output.svg example.svg

  inkscape --export-png=example.png --export-dpi=80 --export-background-opacity=0
  --without-gui example.svg

  ```


  ![Example](https://raw.githubusercontent.com/futurice/haskell-tdigest/master/tdigest/example.png)

'
license-name: BSD3
