homepage: https://www.haskelltutorials.com/odd-jobs
changelog-type: markdown
hash: 80c143394b17b94a9772f2e515b91f03d5e2378cc86adb96235dba998a9121dc
test-bench-deps:
  warp: -any
  friendly-time: -any
  lucid: -any
  either: -any
  bytestring: -any
  hostname: -any
  unliftio: -any
  unix: -any
  direct-daemonize: -any
  base: '>=4.7 && <5'
  time: -any
  tasty-hedgehog: -any
  tasty-discover: -any
  unordered-containers: -any
  text: -any
  monad-control: -any
  resource-pool: -any
  filepath: -any
  hedgehog: -any
  lifted-base: -any
  odd-jobs: -any
  timing-convenience: -any
  servant-server: -any
  servant: -any
  fast-logger: -any
  containers: -any
  string-conv: -any
  unliftio-core: -any
  postgresql-simple: -any
  mtl: -any
  mmorph: -any
  lifted-async: -any
  tasty-hunit: -any
  monad-logger: -any
  optparse-applicative: -any
  servant-lucid: -any
  random: -any
  tasty: -any
  text-conversions: -any
  aeson: -any
  safe: -any
  directory: -any
maintainer: saurabhnanda@gmail.com
synopsis: A full-featured PostgreSQL-backed job queue (with an admin UI)
changelog: |
  # Changelog

  ## 0.1.0

  - Initial release
  - LISTEN/NOTIFY for immediate execution of jobs
  - Polling for execution of jobs in the future, and for retrying failed jobs.
  - Utilities for rapidly building CLIs that can be deployed as background daemons
  - Structured logging
  - Graceful shutdown
  - Basic concurrency control
  - Incomplete web UI
  - First cut of Haddock docs
  - Simple CLI example
basic-deps:
  warp: -any
  foreign-store: -any
  friendly-time: -any
  lucid: -any
  either: -any
  bytestring: -any
  hostname: -any
  unliftio: -any
  unix: -any
  direct-daemonize: -any
  base: '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  monad-control: -any
  resource-pool: -any
  filepath: -any
  odd-jobs: -any
  timing-convenience: -any
  servant-server: -any
  servant: -any
  fast-logger: -any
  string-conv: -any
  unliftio-core: -any
  postgresql-simple: -any
  mtl: -any
  monad-logger: -any
  optparse-applicative: -any
  servant-lucid: -any
  text-conversions: -any
  aeson: -any
  safe: -any
  directory: -any
all-versions:
- 0.1.0
author: Saurabh Nanda
latest: 0.1.0
description-type: markdown
description: "# Introduction\n\nPlease read the **detailed tutorial** available at
  [Odd Jobs Tutorial](https://www.haskelltutorials.com/odd-jobs). Broadly, here is
  the **most common** way to get started with this library:\n\n- (For a working version
  of the steps described below, please check the [simple-example](https://github.com/saurabhnanda/odd-jobs/tree/master/simple-example)
  directory in the project repo).\n- Create a DB table to hold your jobs using the
  `OddJobs.Migrations.createJobTable` function.\n- Create a sum-type to represent
  your job payloads, for example:\n    ```\n    data MyJob = SendWelcomeEmail Int\n
  \              | SendPasswordResetEmail Text\n               | SetupSampleData Int\n
  \              deriving (Eq, Show, Generic, ToJSON, FromJSON)\n    ```\n- Ensure
  that you use a \"tagged\" JSON encoding for this data-type for best results (this
  is the default behaviour in Aeson). For example:\n    ```\n    Aeson.encode (SendWelcomeEmail
  10) == \"{\\\"tag\\\":\\\"SendWelcomeEmail\\\", \\\"contents\\\":10}\"\n    ```\n
  \   \n- Create you \"core\" job-runner function:\n    ```\n    myJobRunner :: Job
  -> IO ()\n    myJobRunner Job{jobPayload} = \n      case jobPayload of\n        SendWelcomeEmail
  userId -> sendWelcomeEmail userId\n        SendPasswordResetEmail tkn -> sendPasswordResetEmail
  tkn\n        SetupSampleData userId -> sendPasswordResetEmail userId\n    ```\n
  \   \n- Use `OddJobs.Job.createJob` and `OddJobs.Job.scheduleJob` within your app
  whenever you want to enqueue a job.\n- Use `OddJobs.Cli` to wrap all of this together
  into a nice CLI that can fork itself as a background daemon.\n- Hook this up to
  your [deployment scripts](https://www.haskelltutorials.com/odd-jobs/deployment.html)
  and you're good to go!\n"
license-name: BSD-3-Clause
