homepage: http://clash-lang.org/
changelog-type: markdown
hash: d288c03e68cd9a16c035357e2b6a96ea1bf114ff9b3bfa1b7e3702b921580805
test-bench-deps:
  base: ! '>=4.8 && <5'
  ghc-typelits-knownnat: -any
  ghc-typelits-natnormalise: ! '>=0.6 && <0.7'
  tasty-quickcheck: ! '>=0.8'
  tasty-hunit: ! '>=0.9'
  tasty: ! '>=0.10'
maintainer: christiaan.baaij@gmail.com
synopsis: Derive KnownNat constraints from other KnownNat constraints
changelog: ! "# Changelog for the [`ghc-typelits-knownnat`](http://hackage.haskell.org/package/ghc-typelits-knownnat)
  package\n\n## 0.6 *September 14th 2018*\n* Move `KnownNat2` instances for `Div`
  and `Mod` from `ghc-typelits-extra` to `ghc-typelits-knownnat`\n\n## 0.5 *May 9th
  2018*\n* Fix Inferred constraint is too strong [#19](https://github.com/clash-lang/ghc-typelits-knownnat/issues/19)\n\n##
  0.4.2 *April 15th 2018*\n* Add support for GHC 8.5.20180306\n\n## 0.4.1 *March 17th,
  2018*\n* Add support for GHC 8.4.1\n\n## 0.4 *January 4th, 2018*\n* Add partial
  GHC 8.4.1-alpha1 support\n* Drop `singletons` dependency [#15](https://github.com/clash-lang/ghc-typelits-knownnat/issues/15)\n
  \ * `KnownNatN` classes no longer have the `KnownNatFN` associated type family\n\n##
  0.3.1 *August 17th 2017*\n* Fix testsuite for GHC 8.2.1\n\n## 0.3 *May 15th 2017*\n*
  GHC 8.2.1 support: Underlying representation for `KnownNat` in GHC 8.2 is `Natural`,
  meaning users of this plugin will need to update their code to use `Natural` for
  GHC 8.2 as well.\n\n## 0.2.4 *April 10th 2017*\n* New features:\n  * Derive constraints
  for unary functions via a `KnownNat1` instance; thanks to @nshepperd [#11](https://github.com/clash-lang/ghc-typelits-knownnat/pull/11)\n
  \ * Use type-substituted [G]iven KnownNats (partial solve for [#13](https://github.com/clash-lang/ghc-typelits-knownnat/issues/13))\n\n##
  0.2.3 *January 15th 2017*\n* Solve normalised literal constraints, i.e.:\n  * `KnownNat
  (((addrSize + 1) - (addrSize - 1))) ~ KnownNat 2`\n\n## 0.2.2 *September 29th 2016*\n*
  New features:\n  * Derive smaller constraints from larger constraints when they
  differ by a single variable, i.e. `KnownNat (a + b), KnownNat b` implies `KnownNat
  a`.\n\n## 0.2.1 *August 19th 2016*\n* Fixes bugs:\n  * Source location of derived
  wanted constraints is, erroneously, always set to line 1, column 1\n\n## 0.2 *August
  17th 2016*\n* New features:\n  * Handle `GHC.TypeLits.-`\n  * Handle custom, user-defined,
  type-level operations\n  * Thanks to Gabor Greif (@ggreif): derive smaller from
  larger constraints, i.e. `KnownNat (n+1)` implies `KnownNat n`\n\n## 0.1.2\n* New
  features: Solve \"complex\" KnownNat constraints involving arbitrary type-functions,
  as long as there is a given KnownNat constraint for this type functions.\n\n## 0.1.1
  *August 11th 2016*\n* Fixes bug: panic on a non-given KnownNat constraint variable\n\n##
  0.1 *August 10th 2016*\n* Initial release\n"
basic-deps:
  ghc: ! '>=8.0.1 && <8.8'
  base: ! '>=4.9 && <5'
  ghc-tcplugins-extra: ! '>=0.3'
  ghc-typelits-natnormalise: ! '>=0.6 && <0.7'
  transformers: ! '>=0.5.2.0 && <0.6'
  template-haskell: ! '>=2.11.0.0 && <2.15'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- '0.5'
- 0.5.1
- '0.6'
author: Christiaan Baaij
latest: '0.6'
description-type: markdown
description: ! "# ghc-typelits-knownnat\n\n[![Build Status](https://secure.travis-ci.org/clash-lang/ghc-typelits-knownnat.svg?branch=master)](http://travis-ci.org/clash-lang/ghc-typelits-knownnat)\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-knownnat.svg)](https://hackage.haskell.org/package/ghc-typelits-knownnat)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-knownnat.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-knownnat)\n\nA
  type checker plugin for GHC that can derive \"complex\" `KnownNat`\nconstraints
  from other simple/variable `KnownNat` constraints. i.e. without this\nplugin, you
  must have both a `KnownNat n` and a `KnownNat (n+2)` constraint in\nthe type signature
  of the following function:\n\n```haskell\nf :: forall n . (KnownNat n, KnownNat
  (n+2)) => Proxy n -> Integer\nf _ = natVal (Proxy :: Proxy n) + natVal (Proxy ::
  Proxy (n+2))\n```\n\nUsing the plugin you can omit the `KnownNat (n+2)` constraint:\n\n```haskell\nf
  :: forall n . KnownNat n => Proxy n -> Integer\nf _ = natVal (Proxy :: Proxy n)
  + natVal (Proxy :: Proxy (n+2))\n```\n\nThe plugin can derive `KnownNat` constraints
  for types consisting of:\n\n* Type variables, when there is a corresponding `KnownNat`
  constraint\n* Type-level naturals\n* Applications of the arithmetic expression:
  `{+,-,*,^}`\n* Type functions, when there is either:\n  * a matching given `KnownNat`
  constraint; or\n  * a corresponding `KnownNat<N>` instance for the type function\n\nTo
  elaborate the latter points, given the type family `Min`:\n\n```haskell\ntype family
  Min (a :: Nat) (b :: Nat) :: Nat where\n  Min 0 b = 0\n  Min a b = If (a <=? b)
  a b\n```\n\nthe plugin can derive a `KnownNat (Min x y + 1)` constraint given only
  a\n`KnownNat (Min x y)` constraint:\n\n```haskell\ng :: forall x y . (KnownNat (Min
  x y)) => Proxy x -> Proxy y -> Integer\ng _ _ = natVal (Proxy :: Proxy (Min x y
  + 1))\n```\n\nAnd, given the type family `Max`:\n\n```haskell\ntype family Max (a
  :: Nat) (b :: Nat) :: Nat where\n  Max 0 b = b\n  Max a b = If (a <=? b) b a\n```\n\nand
  corresponding `KnownNat2` instance:\n\n```haskell\ninstance (KnownNat a, KnownNat
  b) => KnownNat2 \"TestFunctions.Max\" a b where\n  natSing2 = let x = natVal (Proxy
  @ a)\n                 y = natVal (Proxy @ b)\n                 z = max x y\n             in
  \ SNatKn z\n  {-# INLINE natSing2 #-}\n```\n\nthe plugin can derive a `KnownNat
  (Max x y + 1)` constraint given only a\n`KnownNat x` and `KnownNat y` constraint:\n\n```haskell\nh
  :: forall x y . (KnownNat x, KnownNat y) => Proxy x -> Proxy y -> Integer\nh _ _
  = natVal (Proxy :: Proxy (Max x y + 1))\n```\n\nTo use the plugin, add the\n\n```\nOPTIONS_GHC
  -fplugin GHC.TypeLits.KnownNat.Solver\n```\n\nPragma to the header of your file.\n"
license-name: BSD-2-Clause
