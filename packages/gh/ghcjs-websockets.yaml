homepage: http://github.com/mstksg/ghcjs-websockets
changelog-type: markdown
hash: 1901cc0693c96bc77c6484ac202ce8e6302c2eb2eb6b986a054aaaad9901b2ff
test-bench-deps: {}
maintainer: Justin Le <justin@jle.im>
synopsis: ! 'Deprecated: use ghcjs-base''s native websockets'
changelog: ! "0.3.0.5\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.5>\n\n*
  \  Fixing `withURL` blocking when there is a javascript error on connection.\n    (Thanks
  to sztupi)\n\n0.3.0.4\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.4>\n\n*
  \  Fixed bug on double mutex acquisition for `connectionClosed`.\n\n0.3.0.3\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.3>\n\n**DEPRECATED:**
  Please use `0.3.0.4`!\n\n*   Added CPP an cabal file flags necessary to enable building
  on (normal)\n    GHC, for hackage and usage with hybrid projects.\n\n0.3.0.2\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.2>\n\n**DEPRECATED:**
  Please use `0.3.0.4`!\n\n*   Lowered bounds on *text* dependency.\n*   Added `CHANGELOG.md`
  and `README.md` to extra source dependecy fields, to\n    count them in the cabal
  package.\n\n0.3.0.1\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.1>\n\n**DEPRECATED:**
  Please use `0.3.0.4`!\n\n*   Fixed the \"other-modules\" cabal file field to include
  non-exported but\n    important modules.\n\n0.3.0.0\n-------\n<https://github.com/mstksg/ghcjs-websockets/releases/tag/v0.3.0.0>\n\n**DEPRECATED:**
  Please use `0.3.0.4`!\n\n*   First official release.  API more or less stabilized.
  \ Library is more or\n    less stable, but there are still some extra aspects of
  the javascript\n    websockets API to hook onto for more power/information, and
  some\n    javascript errors to be handled on edge cases.\n\n"
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  ghcjs-base: ! '>=0.1'
  base64-bytestring: ! '>=1'
  text: ! '>=1'
  binary: ! '>=0.7'
all-versions:
- 0.3.0.4
- 0.3.0.5
author: Justin Le <justin@jle.im>
latest: 0.3.0.5
description-type: markdown
description: ! "ghcjs-websockets\n================\n\n[![Join the chat at https://gitter.im/mstksg/ghcjs-websockets](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mstksg/ghcjs-websockets?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n*ghcjs-websockets*
  aims to provide a clean, idiomatic, efficient, low-level,\nout-of-your-way, bare
  bones, concurrency-aware interface with minimal\nabstractions over the [Javascript
  Websockets API][jsapi], inspired by common\nHaskell idioms found in libraries like
  [io-streams][] and the server-side\n[websockets][] library, targeting compilation
  to Javascript with `ghcjs`.\n\nThe interface abstracts websockets as simple IO/file
  handles, with additional\naccess to the natively \"typed\" (text vs binary) nature
  of the Javascript\nWebsockets API.  There are also convenience functions to directly
  decode\nserialized data (serialized with [binary][]) sent through channels.\n\nThe
  library is mostly intended to be a low-level FFI library, with the hopes\nthat other,
  more advanced libraries maybe build on the low-level FFI bindings\nin order to provide
  more advanced and powerful abstractions.  Most design\ndecisions were made with
  the intent of keeping things as simple as possible in\norder for future libraries
  to abstract over it.\n\nMost of the necessary functionality is in hopefully in\n`JavaScript.WebSockets`;
  more of the low-level API is exposed in\n`JavaScript.WebSockets.Internal` if you
  need it for library construction.\n\nDocumenation is [online on github pages][documentation].\n\n[jsapi]:
  http://www.w3.org/TR/websockets/\n[io-streams]: http://hackage.haskell.org/package/io-streams\n[websockets]:
  http://hackage.haskell.org/package/websockets\n[binary]: http://hackage.haskell.org/package/binary\n[documentation]:
  http://mstksg.github.io/ghcjs-websockets/JavaScript-WebSockets.html\n\nUsage\n-----\n\n```haskell\nimport
  Data.Text (unpack)\n\n-- A simple echo client, echoing all incoming text data\nmain
  :: IO ()\nmain = withUrl \"ws://my-server.com\" $ \\conn ->\n    forever $ do\n
  \       t <- receiveText conn\n        putStrLn (unpack t)\n        sendText conn
  t\n```\n\nThe above code will attempt to interpret all incoming data as UTF8-encoded\nText,
  and throw away data that does not.\n\n`conn` is a `Connection`, which encapsulates
  a websocket channel.\n\nYou can also do the same thing to interpret all incoming
  data as any instance\nof `Binary` --- say, `Int`s:\n\n```haskell\n-- A simple client
  waiting for connections and outputting the running sum\nmain :: IO ()\nmain = withUrl
  \"ws://my-server.com\" (runningSum 0)\n\nrunningSum :: Int -> Connection -> IO ()\nrunningSum
  n conn = do\n    i <- receiveData conn\n    print (n + i)\n    runningSum (n + i)
  conn\n```\n\n`receiveData` will block until the `Connection` receives data that
  is\ndecodable as whatever type you expect, and will throw away all nondecodable\ndata
  (including `Text` data).\n\nThe `receive` function is provided as an over-indulgent
  layer of abstraction\nwhere you can receive both `Text` and instances of `Binary`
  with the same\nfunction using typeclass magic --- for the examples above, you could
  use\n`receive` in place of both `receiveText` and `receiveData`.\n\n`send` works
  the same way for `sendText` and `sendData`.\n\nIf you want to, you can access the
  incoming data directly using the\n`SocketMsg` sum type, which exposes either a `Text`
  or a lazy `ByteString`:\n\n```haskell\nimport Data.Text (unpack, append)\nimport
  qualified Data.ByteString.Base64.Lazy as B64\n\nmain :: IO ()\nmain = withUrl \"ws://my-server.com\"
  $ \\conn ->\n    forever $ do\n        msg <- receiveMessage\n        putStrLn $
  case msg of\n            SocketMsgText t ->\n                unpack $ append \"Received
  text: \" t\n            SocketMsgData d ->\n                \"Received data: \"
  ++ show (B64.encode d)\n```\n\nYou can talk to multiple connections by nesting `withUrl`:\n\n```haskell\n--
  Act as a relay between two servers\nmain :: IO ()\nmain =  withUrl \"ws://server-1.com\"
  $ \\conn1 ->\n        withUrl \"ws://server-2.com\" $ \\conn2 ->\n            forever
  $ do\n                msg <- receiveMessage conn1\n                sendMessage conn2
  msg\n```\n\nAnd also alternatively, you can manually open and close connections:\n\n```haskell\n--
  Act as a relay between two servers\nmain :: IO ()\nmain = do\n    conn1 <- openConnection
  \"ws://server-1.com\"\n    conn2 <- openConnection \"ws://server-2.com\"\n    forever
  $ do\n        msg <- receiveMessage conn1\n        sendMessage conn2 msg\n    closeConnection
  conn2\n    closeConnection conn1\n```\n\n`receiveMessage` and its varieties will
  all throw an exception if the\nconnection closes while they're waiting or if you
  attempt to receive on a\nclosed connection.  You can handle these with mechanisms
  from\n`Control.Exception`, or you can use their \"maybe\"-family counterparts,\n`receiveMessageMaybe`,
  etc., who will return results in `Just` on a success,\nor return a `Nothing` if
  the connection is closed or if receiving on a closed\nconnection.\n\nYou can use
  also `connectionClosed :: Connection -> IO Bool` to check if the\ngiven `Connection`
  object is closed (or `connectionCloseReason` to see *why*).\n\nWhen closing connections,
  there might be some messages that were received by\nthe socket but never processed
  on the Haskell side with a `receive` method.\nThese will normally be deleted; however,
  you can use\n`closeConnectionLeftovers` or `withUrlLeftovers` to grab a list of
  the raw\n`SocketMsg`s remaining after closing.\n\n### Issues and Roadmap\n\nAs of
  now, there are still some exceptions that might be thrown by the\nJavascript websockets
  API that are not explicitly handled by the library.  For\nthe most part, things
  are usable and asynchronous exceptions (in Haskell)\nshould all be handled well
  at this point.  There are also some small aspects\nof the websockets API that aren't
  yet accessible through the library.\n\n### Copyright\n\nCopyright (c) Justin Le
  2015\n\n"
license-name: MIT
