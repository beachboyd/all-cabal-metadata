homepage: ''
changelog-type: ''
hash: bbbff0aaeb21912e361bb3fbbc635479e16a4d9637a7c19f6128686e7fce1381
test-bench-deps: {}
maintainer: ezyang@cs.stanford.edu
synopsis: Print minimal export lists
changelog: ''
basic-deps:
  ghc: ! '>=8.1 && <8.3'
  unix: -any
  base: ==4.10.*
  containers: -any
  ghc-paths: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Edward Z. Yang
latest: 0.1.0.1
description-type: markdown
description: ! "# ghc-usage\n\n`ghc-usage` is a simple frontend plugin which outputs
  the minimum export\nlist for every module and signature necessary to compile the
  package.\nThis is useful for taking a large signature and paring it down to\nprecisely
  the identifiers you use.\n\nFor example, suppose you have:\n\n```\nsignature A where\n
  \   f :: Int\n    g :: Bool\nmodule B where\n    h = f\n```\n\nClearly, only `f`
  is actually used.  Thus, `ghc-usage` will output:\n\n```\nsignature A (\n    f\n)
  where\n```\n\nThe benefit of having a reduced signature is that you allow more\nimplementations
  (because you require fewer function implementations.)\n\nThis tool also outputs
  minimal export lists for modules, which might\nbe useful if you're trying to make
  modules more abstract/find\nunnecessary exports. (Though, if this is a library,
  obviously\nthere might be external clients using these libraries!)\n\n## How to
  use\n\n`ghc-usage` is only compatible with GHC 8.2 and later.\n\nInstall using `cabal
  install ghc-usage`, and then run\n`ghc-usage --interactive A B C`.  If you are working
  in a Cabal\nproject, you can run `cabal repl -w ghc-usage` or `cabal new-repl -w
  usage`\nto get the correct command line arguments.\n\nGHC 8.2 is probably not the
  default `ghc` executable in your path.\nIn this case, you will need to also pass
  `--with-ghc-pkg=/path/to/ghc-pkg-8.2`;\notherwise Cabal will complain about a version
  mismatch.\n"
license-name: BSD-3-Clause
