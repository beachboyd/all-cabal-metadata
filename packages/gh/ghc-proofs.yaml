homepage: https://github.com/nomeata/ghc-proofs
changelog-type: markdown
hash: b087c21fd6bcf9340d1e3d61c16019dcd605248a836e00ccb3f68c0f985c6bcc
test-bench-deps:
  base: ! '>=4.9 && <4.11'
  ghc-proofs: -any
  transformers: -any
maintainer: mail@joachim-breitner.de
synopsis: GHC plugin to prove program equations by simplification
changelog: ! '# Revision history for ghc-proofs


  ## 0.1.1  -- 2017-09-05


  * Also run simplifier in stage 0


  ## 0.1  -- 2017-08-26


  * Initial release to hackage


  ## 0  -- 2017-02-06


  * Development commences

'
basic-deps:
  ghc: ! '>=8.2 && <8.4'
  base: ! '>=4.9 && <4.11'
all-versions:
- '0.1'
- 0.1.1
author: Joachim Breitner
latest: 0.1.1
description-type: markdown
description: ! "Prove program equations with GHC\n================================\n\nThis
  GHC plugin allows you to embed code equation into your code, and have them\nchecked
  by GHC.\n\nSynopsis\n--------\n\nSee the `GHC.Proof` module for the documentation,
  but there really isn't much\nmore to it than:\n\n```haskell\n{-# OPTIONS_GHC -O
  -fplugin GHC.Proof.Plugin #-}\nmodule Simple where\n\nimport GHC.Proof\nimport Data.Maybe\n\nmy_proof1
  = (\\f x -> isNothing (fmap f x))\n        === (\\f x -> isNothing x)\n```\n\nIf
  you compile this, you will reassurringly read:\n\n```\n$ ghc Simple.hs\n[1 of 1]
  Compiling Simple           ( Simple.hs, Simple.o )\nGHC.Proof: Proving my_proof1
  …\nGHC.Proof proved 1 equalities\n```\n\nSee the [`examples/`](examples/) directory
  for more examples of working proofs\n(with GHC HEAD).\n\nIf you have proof that
  GHC cannot prove, for example\n\n```haskell\nnot_a_proof = (2+2::Int) === (5::Int)\n```\n\nthen
  the compiler will tell you so, and abort the compilation:\n```\n$ ghc Simple.hs\n[1
  of 1] Compiling Simple           ( Simple.hs, Simple.o )\nGHC.Proof: Proving not_a_proof
  …\nProof failed\n    Simplified LHS: GHC.Types.I# 4#\n    Simplified RHS: GHC.Types.I#
  5#\n    Differences:\n    • 4# /= 5#\n\nSimple.hs: error: GHC.Proof could not prove
  all equalities\n```\n\nHow does it work?\n-----------------\n\nGHC is a mighty optimizing
  compiler, and the centerpiece of optimizing, the\n*simplifier* is capable of quite
  a bit of symbolic execution. We can use this\nto prove program equalities, simply
  by taking two expressions, letting GHC\nsimplify them as far as possible. If the
  resulting expressions are the same,\nthen the original expressions are – as far
  as the compiler is concerned –\nidenticial.\n\nThe GHC simplifier works on the level
  of the intermediate language GHC Core,\nand failed proofs will be reported as such.\n\nThe
  gory details are as follows: The simplifier is run 8 times, twice for each\nof the
  simplifier phases 4, 3, 2 and 1. In between, the *occurrence analiser*\nis run.
  Near the end, we also run *common-subexpression elimination*.\n\nThe simplifier
  is run with more aggressive flags. In particular, it is\ninstructed to inline functions
  aggressively and without worrying about code\nsize.\n\n\nWhy is this so great?\n---------------------\n\n
  * You can annotate your code with proofs, in the same file, in the same\n   language,
  without extra tools (besides the plugin).\n * The proofs stay with the code and
  are run with every compilation.\n * The proof goes through when *the compiler* thinks
  the expressions are the\n   same. There is no worry about whether an external proof
  tools captures the\n   semantics of GHC’s Haskell precisely.\n * It suports, in
  principle, all of Haskell’s syntax, including a huge number\n   of extensions.\n
  * It is super easy (if it works).\n * Using rewrite rules allows proofs with regard
  to some theory (e.g. with\n   regard to equations about `foldr` and other list combinators),
  independent\n   of whether these are proven.\n\nWhy is this not so great?\n--------------------\n\n
  * It can only prove quite simple things right now.\n * Even for easy things, the
  proof might fail because GHC simply simplifies the\n   expressions slightly different,
  and there is not always an easy way of\n   fixing this.\n * The proofs depend on
  optimization flags.\n * There is no guarantee that the next GHC release will be
  able to prove the\n   same things.\n * Failed proofs are reported in GHC Core instead
  of Haskell.\n * At least currently, it more or less requires GHC HEAD (it compiles
  with\n   GHC-8.0, but it has less control over the simplifier and less proofs will
  go\n   through.)\n\nWhat can it prove?\n------------------\n\nNot everything. By
  far.\n\nBut some nice, practical results work, see for example the\n[proofs of the
  `Applicative` and `Monad` laws for `Control.Applicative.Succs`](examples/Successors.hs).\n\nBest
  results were observed with compositions of non-recursive\nfunctions that handle
  non-recursive data or handle lists usind standard list\ncombinators.\n\nThe GHC
  simplifier generally refuses to inline recursive functions, so there is\nnot much
  we can do with these for now.\n\nMy proof is not found. What can I do?\n-------------------------------------\n\nThe
  plugin searches for top-level bindings of the form\n```haskell\nsomename = proof
  expression1 expression2\n```\nor\n```haskell\nsomename = expression1 === expression2\n```\n\nGHC
  will drop them before the plugin sees them, though, if `somename` is not\nexported,
  so make sure it is exported. If you really do not want to export it, then you can
  keep it alive using the trick of\n```haskell\n{-# RULES \"keep somename alive\"
  id somename = somename #-}\n```\n\nIf it still does not work, check the output of
  `-dverbose-core2core` for why\nyour binding does not have the expected form. Maybe
  you can fix it somehow.\n\nMy proof does not go through. Can I fix that?\n---------------------------------------------\n\nMaybe.
  Here are some tricks that sometimes help:\n\n *  Check if your functions are properly
  unfolded in the proof. Maybe an\n    `INLINEABLE` pragma helps.\n\n *  Use `{-#
  LANGUAGE BangPatterns #-}` and mark some arguments as strict:\n\n    ```haskell\n
  \   my_proof2 = (\\d !x -> fromMaybe d x)\n            === (\\d !x -> maybe d id
  x)\n    ```\n\n    GHC makes these functions strict by putting the body in a case.
  This has\n    roughly the same effect as s *case split* in interactive theorem proving.\n\n
  *  Allow GHC to assume one of your functions is strict:\n\n    ```haskell\n    str
  :: (a -> b) -> (a -> b)\n    str f x = x `seq` f x\n\n    monad_law_3 = (\\ (x::Succs
  a) k h -> x >>= (\\x -> k x >>= str h))\n              === (\\ (x::Succs a) k h
  -> (x >>= k) >>= str h)\n    ```\n\n *  Instead of using recursion, try to use combinators
  (e.g. `filter`, `map`, `++` etc.).\n\n *  Add rewrite rules to tell GHC about some
  program equations that it should\n    use while simplifying. This is in particular
  useful when working with list functions\n\n    Here are some examples:\n    ```haskell\n
  \   {-# RULES \"mapFB/id\" forall c . mapFB c (\\x -> x) = c #-}\n    {-# RULES
  \"foldr/nil\" forall k n . GHC.Base.foldr k n [] = n #-}\n    {-# RULES \"foldr/mapFB\"
  forall c f g n1 n2 xs.\n        GHC.Base.foldr (mapFB c f) n1 (GHC.Base.foldr (mapFB
  (:) g) n2 xs)\n        = GHC.Base.foldr (mapFB c (f.g)) (GHC.Base.foldr (mapFB c
  f) n1 n2) xs\n        #-}\n    ```\n\n    But note that these apply to your whole
  module, and are exported from it, so you\n    should not attempt to add such a rule
  to the same module where you prove\n    the rule. And if you don’t want these rules
  to be applied in normal code,\n    put your proofs into a separate `Proof` module
  that is never imported.\n\n\nShall I use this in production?\n-------------------------------\n\nYou
  can try. It certainly does not hurt, and proofs that go through are fine.\nIt might
  not prove enough to be really useful.\n\nWhat next?\n----------\n\nIt remains to
  be seen how useful this approach really is, and what can be done\nto make it more
  useful. So we need to start proving some things.\n\nHere are some aspects that likely
  need to be improved:\n\n * The user should be put into control of some of the simplifier
  settings.\n   Depending on the proof, one might want to go through more or less
  of the\n   simplifier phases, or disable and enable certain rules.\n\n * Maybe a
  syntax that does not abuse term-level bindings can be introduced.\n   Currently,
  though, this is not possible for a plugin.\n\n * If deemed useful, this functionaly
  maybe can become part of GHC, and the\n   simplifier could get a few extra knobs
  to turn.\n\n * A custom function to compare expressions that relates more than just\n
  \  alpha-equivalence could expand the scope of this plugin.\n\n * The reporting
  of failed proofs can be improved.\n\n * Come up with a better story about recursive
  functions.\n\nHow else can I prove things about Haskell?\n------------------------------------------\n\n
  * Wait for full dependent types in Haskell and express your equivalences as\n   types.\n
  * Manually or mechanically (e.g. using [Haskabelle](https://isabelle.in.tum.de/haskabelle.html))
  rewrite your code in a\n   theorem prover such as [Isabelle](http://isabelle.in.tum.de/),\n
  \  [Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php) or\n   [Coq](https://coq.inria.fr/),
  and prove stuff there.\n * Write your code in these theorem provers in the first
  place and export them\n   to Haskell.\n * You might be able to prove a few things
  using\n   [Liquid Haskell](https://ucsd-progsys.github.io/liquidhaskell-blog/) or,\n
  \  actually quite similar to this, [HERMIT](http://ku-fpg.github.io/software/hermit/).\n\n\nCan
  I comment or help?\n----------------------\n\nSure! We can use the GitHub issue
  tracker for discussions, and obviously\ncontributions are welcome.\n\n"
license-name: MIT
