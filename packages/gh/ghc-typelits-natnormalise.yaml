homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: 1995bf872a8f74ef57a8d0386ccc452a30656892dfc385de4cb4c72391d45067
test-bench-deps:
  base: ! '>=4.8 && <5'
  ghc-typelits-natnormalise: -any
  tasty-hunit: ! '>=0.9'
  tasty: ! '>=0.10'
  template-haskell: ! '>=2.11.0.0'
maintainer: christiaan.baaij@gmail.com
synopsis: GHC typechecker plugin for types of kind GHC.TypeLits.Nat
changelog: ! "# Changelog for the [`ghc-typelits-natnormalise`](http://hackage.haskell.org/package/ghc-typelits-natnormalise)
  package\n\n## 0.5.4 *October 14th 2017*\n* Perform normalisations such as: `2^x
  * 4^x ==> 8^x`\n\n## 0.5.3 *May 15th 2017*\n* Add support for GHC 8.2\n\n## 0.5.2
  *January 15th 2017*\n* Fixes bugs:\n  * Reification from SOP to Type sometimes loses
  product terms\n\n## 0.5.1 *September 29th 2016*\n* Fixes bugs:\n  * Cannot solve
  an equality for the second time in a definition group\n\n## 0.5 *August 17th 2016*\n*
  Solve simple inequalities, i.e.:\n  * `a  <= a + 1`\n  * `2a <= 3a`\n  * `1  <=
  a^b`\n\n## 0.4.6 *July 21th 2016*\n* Reduce \"x^(-y) * x^y\" to 1\n* Fixes bugs:\n
  \ * Subtraction in exponent induces infinite loop\n\n## 0.4.5 *July 20th 2016*\n*
  Fixes bugs:\n  * Reifying negative exponent causes GHC panic\n\n## 0.4.4 *July 19th
  2016*\n* Fixes bugs:\n  * Rounding error in `logBase` calculation\n\n## 0.4.3 *July
  18th 2016*\n* Fixes bugs:\n  * False positive: \"f :: (CLog 2 (2 ^ n) ~ n, (1 <=?
  n) ~ True) => Proxy n -> Proxy (n+d)\"\n\n## 0.4.2 *July 8th 2016*\n* Find more
  unifications:\n  * `(2*e ^ d) ~ (2*e*a*c) ==> [a*c := 2*e ^ (d-1)]`\n  * `a^d *
  a^e ~ a^c ==> [c := d + e]`\n  * `x+5 ~ y ==> [x := y - 5]`, but only when `x+5
  ~ y` is a given constraint\n\n## 0.4.1 *February 4th 2016*\n* Find more unifications:\n
  \ * `F x y k z ~ F x y (k-1+1) z` ==> [k := k], where `F` can be any type function\n\n##
  0.4 *January 19th 2016*\n* Stop using 'provenance' hack to create conditional evidence
  (GHC 8.0+ only)\n* Find more unifications:\n  * `F x + 2 - 1 - 1 ~ F x` ==> [F x
  := F x], where `F` can be any type function with result `Nat`.\n\n## 0.3.2\n* Find
  more unifications:\n  * `(z ^ a) ~ (z ^ b) ==> [a := b]`\n  * `(i ^ a) ~ j ==> [a
  := round (logBase i j)]`, when `i` and `j` are integers, and `ceiling (logBase i
  j) == floor (logBase i j)`.\n\n## 0.3.1 *October 19th 2015*\n* Find more unifications:\n
  \ * `(i * a) ~ j ==> [a := div j i]`, when `i` and `j` are integers, and `mod j
  i == 0`.\n  * `(i * a) + j ~ k  ==> [a := div (k-j) i]`, when `i`, `j`, and `k`
  are integers, and `k-j >= 0` and `mod (k-j) i == 0`.\n\n## 0.3 *June 3rd 2015*\n*
  Find more unifications:\n  * `<TyApp xs> + x ~ 2 + x ==> [<TyApp xs> ~ 2]`\n* Fixes
  bugs:\n  * Unifying `a*b ~ b` now returns `[a ~ 1]`; before it erroneously returned
  `[a ~ ]`, which is interpred as `[a ~ 0]`...\n  * Unifying `a+b ~ b` now returns
  `[a ~ 0]`; before it returned the undesirable, though equal, `[a ~ ]`\n\n## 0.2.1
  *May 6th 2015*\n* Update `Eq` instance of `SOP`: Empty SOP is equal to 0\n\n## 0.2
  *April 22nd 2015*\n* Finds more unifications:\n  * `(2 + a) ~ 5  ==>  [a := 3]`\n
  \ * `(3 * a) ~ 0  ==>  [a := 0]`\n\n## 0.1.2 *April 21st 2015*\n* Don't simplify
  expressions with negative exponents\n\n## 0.1.1 *April 17th 2015*\n* Add workaround
  for https://ghc.haskell.org/trac/ghc/ticket/10301\n\n## 0.1 *March 30th 2015*\n*
  Initial release\n"
basic-deps:
  ghc: ! '>=8.0.1 && <8.4'
  base: ! '>=4.9 && <5'
  ghc-tcplugins-extra: ! '>=0.2'
  integer-gmp: ! '>=1.0 && <1.1'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.4.6'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
author: Christiaan Baaij
latest: '0.5.4'
description-type: markdown
description: ! "# ghc-typelits-natnormalise\n\n[![Build Status](https://secure.travis-ci.org/clash-lang/ghc-typelits-natnormalise.svg?branch=master)](http://travis-ci.org/clash-lang/ghc-typelits-natnormalise)\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-natnormalise.svg)](https://hackage.haskell.org/package/ghc-typelits-natnormalise)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-natnormalise.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-natnormalise)\n\nA
  type checker plugin for GHC that can solve _equalities_ \nof types of kind `Nat`,
  where these types are either:\n\n* Type-level naturals\n* Type variables\n* Applications
  of the arithmetic expressions `(+,-,*,^)`.\n\nIt solves these equalities by normalising
  them to _sort-of_\n`SOP` (Sum-of-Products) form, and then perform a\nsimple syntactic
  equality.\n\nFor example, this solver can prove the equality between:\n\n```\n(x
  + 2)^(y + 2)\n```\n\nand\n\n```\n4*x*(2 + x)^y + 4*(2 + x)^y + (2 + x)^y*x^2\n```\n\nBecause
  the latter is actually the `SOP` normal form\nof the former.\n\nTo use the plugin,
  add\n\n```\n{-# OPTIONS_GHC -fplugin GHC.TypeLits.Normalise #-}\n```\n\nTo the header
  of your file.\n"
license-name: BSD2
