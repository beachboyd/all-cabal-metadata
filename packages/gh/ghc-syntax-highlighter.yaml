homepage: https://github.com/mrkkrp/ghc-syntax-highlighter
changelog-type: markdown
hash: f553c94830848a95faa6dfefb3a19f92551e5856ef5feb36d51dae3d2ddc6033
test-bench-deps:
  base: ! '>=4.11 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  ghc-syntax-highlighter: -any
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Syntax highlighter for Haskell using lexer of GHC itself
changelog: ! '## GHC syntax highlighter 0.0.3.0


  * Compiles with GHC 8.6.


  ## GHC syntax highlighter 0.0.2.0


  * Added `Loc` and `tokenizeHaskellLoc`.


  ## GHC syntax highlighter 0.0.1.0


  * Initial release.

'
basic-deps:
  ghc: ! '>=8.4 && <8.7'
  base: ! '>=4.11 && <5.0'
  text: ! '>=0.2 && <1.3'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
author: Mark Karpov <markkarpov92@gmail.com>
latest: 0.0.3.0
description-type: markdown
description: ! "# GHC syntax highligher\n\n[![License FreeBSD](https://img.shields.io/badge/license-FreeBSD-brightgreen.svg)](http://opensource.org/licenses/BSD-2-Clause)\n[![Hackage](https://img.shields.io/hackage/v/ghc-syntax-highlighter.svg?style=flat)](https://hackage.haskell.org/package/ghc-syntax-highlighter)\n[![Stackage
  Nightly](http://stackage.org/package/ghc-syntax-highlighter/badge/nightly)](http://stackage.org/nightly/package/ghc-syntax-highlighter)\n[![Stackage
  LTS](http://stackage.org/package/ghc-syntax-highlighter/badge/lts)](http://stackage.org/lts/package/ghc-syntax-highlighter)\n[![Build
  Status](https://travis-ci.org/mrkkrp/ghc-syntax-highlighter.svg?branch=master)](https://travis-ci.org/mrkkrp/ghc-syntax-highlighter)\n\nThis
  is a syntax highlighter library for Haskell using lexer of GHC itself.\n\nHere is
  a blog post announcing the package, the readme is mostly derived\nfrom it:\n\n*
  https://markkarpov.com/post/announcing-ghc-syntax-highlighter.html\n\n## Motivation\n\nParsing
  Haskell is hard, because Haskell is a complex language with\ncountless features.
  The only way to get it right 100% is to use parser of\nGHC itself. Fortunately,
  now there is the [`ghc`][ghc] package, which as of\nversion 8.4.1 exports enough
  of GHC's source code to allow us use its lexer.\n\nAlternative approaches, even
  decent ones like [`highlight.js`][hljs] either\ndon't support cutting-edge features
  or do their work without sufficient\nprecision so that many tokens end up combined
  and the end result is\ntypically still hard to read.\n\n## API\n\nThe API is extremely
  simple:\n\n```haskell\n-- | Token types that are used as tags to mark spans of source
  code.\n\ndata Token\n  = KeywordTok         -- ^ Keyword\n  | PragmaTok          --
  ^ Pragmas\n  | SymbolTok          -- ^ Symbols (punctuation that is not an operator)\n
  \ | VariableTok        -- ^ Variable name (term level)\n  | ConstructorTok     --
  ^ Data\\/type constructor\n  | OperatorTok        -- ^ Operator\n  | CharTok            --
  ^ Character\n  | StringTok          -- ^ String\n  | IntegerTok         -- ^ Integer\n
  \ | RationalTok        -- ^ Rational number\n  | CommentTok         -- ^ Comment
  (including Haddocks)\n  | SpaceTok           -- ^ Space filling\n  | OtherTok           --
  ^ Something else?\n  deriving (Eq, Ord, Enum, Bounded, Show)\n\n-- | Tokenize Haskell
  source code. If the code cannot be parsed, return\n-- 'Nothing'. Otherwise return
  the original input tagged by 'Token's.\n--\n-- The parser does not require the input
  source code to form a valid Haskell\n-- program, so as long as the lexer can decompose
  your input (most of the\n-- time), it'll return something in 'Just'.\n\ntokenizeHaskell
  :: Text -> Maybe [(Token, Text)]\n```\n\nSo given a simple program:\n\n```haskell\nmodule
  Main (main) where\n\nimport Data.Bits\n\n-- | Program's entry point.\n\nmain ::
  IO ()\nmain = return ()\n```\n\nIt outputs something like this:\n\n```haskell\nbasicModule
  :: [(Token, Text)]\nbasicModule =\n  [ (KeywordTok,\"module\")\n  , (SpaceTok,\"
  \")\n  , (ConstructorTok,\"Main\")\n  , (SpaceTok,\" \")\n  , (SymbolTok,\"(\")\n
  \ , (VariableTok,\"main\")\n  , (SymbolTok,\")\")\n  , (SpaceTok,\" \")\n  , (KeywordTok,\"where\")\n
  \ , (SpaceTok,\"\\n\\n\")\n  , (KeywordTok,\"import\")\n  , (SpaceTok,\" \")\n  ,
  (ConstructorTok,\"Data.Bits\")\n  , (SpaceTok,\"\\n\\n\")\n  , (CommentTok,\"--
  | Program's entry point.\")\n  , (SpaceTok,\"\\n\\n\")\n  , (VariableTok,\"main\")\n
  \ , (SpaceTok,\" \")\n  , (SymbolTok,\"::\")\n  , (SpaceTok,\" \")\n  , (ConstructorTok,\"IO\")\n
  \ , (SpaceTok,\" \")\n  , (SymbolTok,\"(\")\n  , (SymbolTok,\")\")\n  , (SpaceTok,\"\\n\")\n
  \ , (VariableTok,\"main\")\n  , (SpaceTok,\" \")\n  , (SymbolTok,\"=\")\n  , (SpaceTok,\"
  \")\n  , (VariableTok,\"return\")\n  , (SpaceTok,\" \")\n  , (SymbolTok,\"(\")\n
  \ , (SymbolTok,\")\")\n  , (SpaceTok,\"\\n\")\n  ]\n```\n\n`Nothing` is rarely returned
  if ever, because it looks like the lexer is\ncapable of interpreting almost any
  text as a stream of GHC tokens.\n\n## How to use it in your blog\n\nDepends on your
  markdown processor. If you're an [`mmark`][mmark] user, good\nnews, since version
  0.2.1.0 of [`mmark-ext`][mmark-ext] it includes the\n`ghcSyntaxHighlighter` extension.
  Due to flexibility of MMark, it's possible\nto use this highlighter for Haskell
  and [`skylighting`][skylighting] as a\nfall-back for everything else. Consult [the
  docs][mmark-ext-docs] for more\ninformation.\n\n[skylighting][skylighting] is what
  Pandoc uses. And from what I can tell\nit's hardcoded to use only that library for
  highlighting, so some creativity\nmay be necessary to get it work.\n\n## Contribution\n\nIssues,
  bugs, and questions may be reported in [the GitHub issue tracker for\nthis project](https://github.com/mrkkrp/ghc-syntax-highlighter/issues).\n\nPull
  requests are also welcome.\n\n## License\n\nCopyright Â© 2018 Mark Karpov\n\nDistributed
  under BSD 3 clause license.\n\n[ghc]: https://hackage.haskell.org/package/ghc\n[hljs]:
  https://highlightjs.org/\n[mmark]: https://hackage.haskell.org/package/mmark\n[mmark-ext]:
  https://hackage.haskell.org/package/mmark-ext\n[skylighting]: https://hackage.haskell.org/package/skylighting\n[mmark-ext-docs]:
  https://hackage.haskell.org/package/mmark-ext/docs/Text-MMark-Extension-GhcSyntaxHighlighter.html\n"
license-name: BSD-3-Clause
