homepage: https://github.com/ndmitchell/ghcid#readme
changelog-type: text
hash: 0c738619498cf092119b510a6762b3d57a8f734b74cbe6fc3f243535e798350a
test-bench-deps:
  extra: ! '>=1.2'
  unix: -any
  base: ! '>=4'
  time: ! '>=1.5'
  filepath: -any
  process: -any
  containers: -any
  terminal-size: ! '>=0.3'
  ansi-terminal: -any
  cmdargs: -any
  tasty-hunit: -any
  tasty: -any
  fsnotify: -any
  directory: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: GHCi based bare bones IDE
changelog: ! "Changelog for ghcid\n\n0.6.9, released 2018-01-26\n    #121, add a --poll
  flag to use polling instead of notifiers\n    Require time-1.5 or above\n    #124,
  add timestamp to \"All good\" message\n    After the test completes write a message\n0.6.8,
  released 2017-11-10\n    #110, work even if -v0 is passed to ghci\n    Read additional
  arguments from .ghcid file if present\n0.6.7, released 2017-09-17\n    #104, add
  --ignore-loaded flag for use with -fobject-code\n    #103, deal with new GHC error
  formatting\n0.6.6, released 2016-11-11\n    #89, exit sooner when the child process
  exits unexpectedly\n    Add Eq instance for Ghci\n    #88, add a --project flag\n
  \   Rename --notitle flag to --no-title\n0.6.5, released 2016-08-10\n    #82, properly
  deal with warning messages including spans\n    #78, support boot files better\n
  \   Better support for dealing with GHC 8.0 call stack messages\n    #79, support
  multiple --test flags\n    #71, improve multi-project stack support\n    #74, make
  sure Cygwin terminals flush output properly\n    If the test exits then exit ghcid\n0.6.4,
  released 2016-05-13\n    #69, fix up for stack project with file arguments\n0.6.3,
  released 2016-05-11\n    #68, add --no-status to avoid printing the reloading message\n0.6.2,
  released 2016-04-25\n    #63, detect test failures and update the titlebar/icon\n
  \   #66, add --warnings to run tests even in there are warnings\n    #62, find stack.yaml
  in the parent directory\n    Make --verbose echo all things sent to stdin\n    #57,
  support wrappers that access stdin first (e.g. stack)\n    #67, make --reload/--restart
  recurse through directories\n    #61, deal with drive letters in files (for stack
  on Windows)\n    #58, improve the --help message\n0.6.1, released 2016-04-06\n    Add
  --reload to add files that reload, but do not restart\n    #56, allow --restart
  to take directories\n0.6, released 2016-04-06\n    #38, implement loading with stack\n
  \   Add process, quit and execStream to the API\n    #29, add interrupt function\n
  \   Add Data instances for the types\n    Make stopGhci more effective, now kills
  the underlying process\n    Make startGhci take a function to write the buffer to\n0.5.1,
  released 2016-03-02\n    #17, deal with recursive modules errors properly\n    #50,
  use -fno-code when not running tests (about twice as fast)\n    #44, abbreviate
  the redundant module import error\n    #45, add an extra space before the ... message\n
  \   #42, always show the first error in full\n    #43, work even if people use break-on-exception
  flags\n    #42, make the first error a minimum of 5 lines\n0.5, released 2015-06-20\n
  \   Add an extra boolean argument to startGhci\n    Add the number of modules loaded
  after All good\n    Print out messages until the prompt comes up\n    #23, add arguments
  and change what commands get invoked\n    #35, change the titlebar icon on Windows\n0.4.2,
  released 2015-06-11\n    Fix a GHC 7.6 warning\n0.4.1, released 2015-06-11\n    #37,
  add a --notitle flag\n    Require extra-1.2\n0.4, released 2015-06-07\n    #33,
  make Ctrl-C more robust\n    #31, add an outputfile feature\n    #32, make newer
  warnings first (save a file, view its warnings)\n    #28, fix issues on VIM file
  saves\n    #29, support running a quick test on each save\n    Add a --directory
  flag to change directory first\n    #26, use fs-notify to avoid excessive wakeups\n
  \   #25, detect console size just before using it\n0.3.6, released 2015-03-09\n
  \   #24, don't error out if error/putStrLn are not imported\n0.3.5, released 2015-02-25\n
  \   #19, put errors in bold\n    #9, display interesting information in the title
  bar\n    #7, reload if the .ghci or .cabal file changes\n    Use nubOrd\n    Require
  extra-1.1\n0.3.4, released 2014-12-24\n    #21, if you aren't waiting for any files,
  exit\n0.3.3, released 2014-12-21\n    #21, if the root file is missing, report an
  error\n    #20, avoid an O(n^2) nub\n0.3.2, released 2014-11-06\n    #18, reformat
  excessively long lines, add a --width flag\n0.3.1, released 2014-10-28\n    Ensure
  if there are lots of warnings, the first error gets shown\n0.3, released 2014-10-24\n
  \   #11, ignore certain GHCi-only warnings\n    #13, fix version printing\n    #8,
  display Loading... when starting\n    Require the extra library\n    #14, figure
  out the terminal height automatically\n0.2, released 2014-10-06\n    #6, rewrite
  as a library\n    Remove duplicate error messages from cabal repl\n0.1.3, released
  2014-09-29\n    #2, handle files that get deleted while loaded\n    #3, flesh out
  the test suite\n    #4, give a polite error if ghci does not start\n    #5, add
  --topmost flag to make the window topmost\n    Add a very simple test suite\n    Default
  to cabal repl if there is no .ghci file\n    #1, if there is an IOError just :reload\n
  \   Say why you are reloading\n0.1.1, released 2014-09-27\n    Support arguments
  to --command\n0.1, released 2014-09-27\n    Initial version\n"
basic-deps:
  extra: ! '>=1.2'
  unix: -any
  base: ==4.*
  time: ! '>=1.5'
  filepath: -any
  process: ! '>=1.1'
  containers: -any
  terminal-size: ! '>=0.3'
  ansi-terminal: -any
  cmdargs: ! '>=0.10'
  fsnotify: -any
  directory: -any
all-versions:
- '0.1'
- '0.1.1'
- '0.1.3'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.6.8'
- '0.6.9'
author: Neil Mitchell <ndmitchell@gmail.com>, jpmoresmau
latest: '0.6.9'
description-type: markdown
description: ! "# ghcid [![Hackage version](https://img.shields.io/hackage/v/ghcid.svg?label=Hackage)](https://hackage.haskell.org/package/ghcid)
  [![Stackage version](https://www.stackage.org/package/ghcid/badge/lts?label=Stackage)](https://www.stackage.org/package/ghcid)
  [![Linux Build Status](https://img.shields.io/travis/ndmitchell/ghcid.svg?label=Linux%20build)](https://travis-ci.org/ndmitchell/ghcid)
  [![Windows Build Status](https://img.shields.io/appveyor/ci/ndmitchell/ghcid.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/ghcid)\n\nEither
  \"GHCi as a daemon\" or \"GHC + a bit of an IDE\". To a first approximation, it
  opens `ghci` and runs `:reload` whenever your source code changes, formatting the
  output to fit a fixed height console. Unlike other Haskell development tools, `ghcid`
  is intended to be _incredibly simple_. In particular, it doesn't integrate with
  any editors, doesn't depend on GHC the library and doesn't start web servers.\n\n_Acknowledgements:_
  This project incorporates significant work from [JPMoresmau](https://github.com/JPMoresmau),
  who is listed as a co-author.\n\n### Using it\n\nRun `cabal update && cabal install
  ghcid` to install it as normal. Then run `ghcid --height=8 --topmost \"--command=ghci
  Main.hs\"`. The `height` is the number of lines you are going to resize your console
  window to (defaults to height of the console). The `topmost` is to make the window
  sit above all others, which only works on Windows. The `command` is how you start
  your project in `ghci`. If you omit `--command` then it will default to `stack ghci`
  if you have the `stack.yaml` file and `.stack-work` directory, default to `ghci`
  if you have a `.ghci` file in the current directory, and otherwise default to `cabal
  repl`.\n\nPersonally, I always create a `.ghci` file at the root of all my projects,
  which usually [reads something like](https://github.com/ndmitchell/ghcid/blob/master/.ghci):\n\n
  \   :set -fwarn-unused-binds -fwarn-unused-imports\n    :set -isrc\n    :load Main\n\nAfter
  that, resize your console and make it so you can see it while working in your editor.
  On Windows the console will automatically sit on top of all other windows. On Linux,
  you probably want to use your window manager to make it topmost or use a [tiling
  window manager](http://xmonad.org/).\n\n### What you get\n\nOn every save you'll
  see a list of the errors and warnings in your project. It uses `ghci` under the
  hood, so even relatively large projects should update their status pretty quickly.
  As an example:\n\n    Main.hs:23:10:\n        Not in scope: `verbosit'\n        Perhaps
  you meant `verbosity' (imported from System.Console.CmdArgs)\n    Util.hs:18:1:
  Warning: Defined but not used: `foo'\n\nOr, if everything is good, you see:\n\n
  \   All good\n\nPlease [report any bugs](https://github.com/ndmitchell/ghcid/issues)
  you find.\n\n### Ghcid Integration\n\nThere are a few tools that integrate Ghcid
  into editors, see the [plugins](plugins/) folder for currently supported integrations.\n\n###
  FAQ\n\n* _This isn't as good as full IDE._ I've gone for simplicity over features.
  It's a point in the design space, but not necessarily the best point in the design
  space for you. For \"real\" IDEs see [the Haskell wiki](http://www.haskell.org/haskellwiki/IDEs).\n*
  _If I delete a file and put it back it gets stuck._ Yes, that's a [bug in GHCi](https://ghc.haskell.org/trac/ghc/ticket/9648).
  If you see GHCi getting confused just kill `ghcid` and start it again.\n* _I want
  to run my tests when files change._ You can pass any `ghci` expression with the
  `--test` flag, e.g. `--test=:main`, which will be run whenever the code is warning
  free (or pass `--warnings` for when the code is merely error free).\n* _I want to
  run arbitrary commands when arbitrary files change._ This project reloads `ghci`
  when files loaded by `ghci` change. If you want a more general mechanism something
  like [Steel Overseer](https://github.com/schell/steeloverseer) will probably work
  better.\n* _I want syntax highlighting in the error messages._ One option is to
  use Neovim or Emacs and run the terminal in a buffer whose file type is set to Haskell.\n*
  _I'm not seeing pattern matching warnings._ Ghcid automatically appends `-fno-code`
  to the command line, which makes the reload cycle about twice as fast. Unfortunately
  GHC 8.0 suffers from [bug 10600](https://ghc.haskell.org/trac/ghc/ticket/10600)
  which means `-fno-code` also disables pattern matching warnings. Until that GHC
  bug is fixed either accept no pattern match warnings or use `-c` to specify a command
  line to start `ghci` that doesn't include `-fno-code`.\n"
license-name: BSD3
