homepage: https://github.com/coot/ghc-tags-plugin#readme
changelog-type: markdown
hash: 3d021ea5b611a6344a862a4dc632fbe878eb3ec6d5d54940f38ec1347ed8c6d2
test-bench-deps:
  bytestring: -any
  ghc-tags-library: -any
  base: -any
  tasty-golden: -any
  text: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  attoparsec: -any
  tasty: -any
  QuickCheck: -any
maintainer: profunctor@pm.me
synopsis: A compiler plugin which generates tags file from GHC syntax tree.
changelog: |
  # Revision history for ghctags

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.

  ## 0.1.1.0 -- 2020-03-03

  * Added support for tag's kinds.
  * Added various file headers
basic-deps:
  ghc: ! '>=8.4 && <8.9'
  bytestring: ^>=0.10
  ghc-tags-library: -any
  base: ! '>=4.12.0.0 && <4.14'
  text: ^>=1.2
  gitrev: ^>=1.3
  containers: ^>=0.6
  directory: ^>=1.3
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
author: Marcin Szamotulski
latest: 0.1.2.0
description-type: markdown
description: "# Ghc Tags Compiler Plugin\n![](https://github.com/coot/ghc-tags-plugin/workflows/GHC-8.8.3/badge.svg)\n![](https://github.com/coot/ghc-tags-plugin/workflows/GHC-8.6.5/badge.svg)\n\nA
  [Ghc Compiler Plugin](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#compiler-plugins)\nwhich
  generates tags for each compiled module or component.\n\n# Requirements\n\n```\nghc
  >= 8.6\n```\n\n# vim configuration\n\nEach generated tags file is put next to the
  corresponding `*.cabal` file.  If\nyou just have a repo with a cabal file in the
  main directory `vim` default\n`tags` setting will work, if you have some modules
  in subdirectories you will\nneed to set:\n```\n:set tags+=*/tags\n```\n\n# Plugin
  usage\n\nConfiguration of this plugin requires some familiarity with `ghc` packages.\nCheck
  out\n[documentation](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html#packages)\nhow
  to use `-plugin-package` or `-plugin-package-id`.  In the examples below we\nus
  `-plugin-package=ghc-tags-plugin` but specifying version\n`-package=ghc-tags-plugin-0.0.0.0`
  (where `0.0.0.0` is the version you\ninstalled), might work better.  You can use
  `ghc-pkg latest`  (likely with\nappropriate `--package-db` flag) to check which
  version is available.\n\n## ghc\n\n```\nghc -plugin-package=ghc-tags-plugin -fplugin=Plugin.GhcTags\n```\n\n##
  cabal\n\nInstall the `ghc-tags-plugin` to cabal store with:\n```\ncabal install
  --lib ghc-tags-plugin\n```\n\nIn `cabal.project.local` file add `package` stanza
  for every local package :\n```\nproject some-project\n    ghc-options: -package-db=PACKAGE_DB\n
  \                -plugin-package=ghc-tags-plugin\n                 -fplugin=Plugin.GhcTags\n```\n\n`PACKAGE_DB`
  is likely to be something like (for `ghc-8.6.5`)\n'${HOME}/.cabal/store/ghc-8.6.5/package.db'
  (all environment variables must be\nexpanded).\n\n## stack\n\nInstall `ghc-tags-plugin`
  \n\n```\nstack install ghc-tags-plugin\n```\n\nIn `stack.yaml` file add:\n```\nghc-options:\n
  \   some-project: -package-db=PACKAGE_DB\n                  -plugin-package=ghc-tags-plugin\n
  \                 -fplugin=Plugin.GhcTags\n```\n\nwhere `PACKAGE_DB` is the package
  db where `ghc-tags-plugin` was installed by\n`stack`.\n\n## modifying `cabal` files\n\nYou
  can always add `ghc-tags-plugin` as a build dependency in a cabal file (for\neach
  component).  You should hide it behind a flag and then use `cabal` or `stack`\nto
  enable it (or `cabal.project.local` or `stack.yaml` files for that purpose).\n\n#
  Security implications of compiler plugins\n\nSuch plugins can:\n\n* run arbitrary
  `IO`;\n* modify abstract syntax tree in some way;  a malicious plugin could change\n
  \ some security parameter in your code exposing a security hole.\n\nThis plugin
  only reads & writes to `tags` file (and updates a shared mutable\nstate) as of `IO`,
  and does not\n[modify/](https://github.com/coot/ghc-tags-plugin/blob/master/lib/Plugin/GhcTags.hs#L79)\nthe
  syntax tree.\n"
license-name: MPL-2.0
