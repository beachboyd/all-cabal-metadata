homepage: https://github.com/coot/ghc-tags-plugin#readme
changelog-type: markdown
hash: e1d0b7c6d9008444492a7d2ff0477336681278a3b2ce68a84e578adf2bf4567c
test-bench-deps: {}
maintainer: profunctor@pm.me
synopsis: A compiler plugin which generates tags file from GHC syntax tree.
changelog: |
  # Revision history for ghctags

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  ghc: ! '>=8.4 && <8.9'
  bytestring: ^>=0.10
  base: ^>=4.12.0.0
  containers: ^>=0.6
  attoparsec: ^>=0.13.0.0
  directory: ^>=1.3
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Marcin Szamotulski
latest: 0.1.0.2
description-type: markdown
description: "# Ghc Tags Compiler Plugin\nA [Ghc Compiler Plugin](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#compiler-plugins)\nwhich
  generates tags for each compiled module or component.\n\n# vim configuration\n\nEach
  generated tags file is put next to the corresponding `*.cabal` file.  If\nyou just
  have a repo with a cabal file in the main directory `vim` default\n`tags` setting
  will work, if you have some modules in subdirectories you will\nneed to set:\n```\n:set
  tags+=*/tags\n```\n\n# Plugin usage\n\nConfiguration of this plugin requires some
  familiarity with `ghc` packages.\nCheck out\n[documentation](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/packages.html#packages)\nhow
  to use `-plugin-package` or `-plugin-package-id`.  In the examples below we\nus
  `-plugin-package=ghc-tags-plugin` but specifying version\n`-package=ghc-tags-plugin-0.0.0.0`
  (where `0.0.0.0` is the version you\ninstalled), might work better.  You can use
  `ghc-pkg latest`  (likely with\nappropriate `--package-db` flag) to check which
  version is available.\n\n## ghc\n\n```\nghc -plugin-package=ghc-tags-plugin -fplugin=Plugin.GhcTags\n```\n\n##
  cabal\n\nInstall the `ghc-tags-plugin` to cabal store with:\n```\ncabal install
  ghc-tags-plugin\n```\n\nIn `cabal.project.local` file add `package` stanza for every
  local package :\n```\nproject some-project\n    ghc-options: -package-db=PACKAGE_DB
  -plugin-package=ghc-tags-plugin -fplugin=Plugin.GhcTags\n```\n\n`PACKAGE_DB` is
  likely something to be something like (for `ghc-8.6.5`)\n'${HOME}/.cabal/store/ghc-8.6.5/package.db'
  (all environment variables must be\nexpanded).\n\n## stack\n\nInstall `ghc-tags-plugin`
  \n\n```\nstack install ghc-tags-plugin\n```\n\nIn `stack.yaml` file add:\n```\nghc-options:\n
  \   some-project: -package-db=PACKAGE_DB -plugin-package=ghc-tags-plugin -fplugin=Plugin.GhcTags\n```\n\nwhere
  `PACKAGE_DB` is the package db where `ghc-tags-plugin` was installed by\n`stack`.\n\n##
  modifying `cabal` files\n\nYou can always add `ghc-tags-plugin` as a build dependency
  in a cabal file (for\neach component).  You can hide it behind a flag and then use
  `cabal` or `stack`\nto enable it (or `cabal.project.local` or `stack.yaml` files
  for that purpose).\n\n# Security implications of compiler plugins\n\nSuch plugins
  can:\n\n* run arbitrary `IO`;\n* modify abstract syntax tree in some way;  a malicious
  plugin could change\n  some security parameter in your code exposing a security
  hole.\n\nThis plugin only reads & writes to `tags` file (and updates a shared mutable\nstate)
  as of `IO`, and does not\n[modify/](https://github.com/coot/ghc-tags-plugin/blob/master/lib/Plugin/GhcTags.hs#L79)\nthe
  syntax tree.\n"
license-name: MPL-2.0
