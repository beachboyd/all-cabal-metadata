homepage: https://github.com/digital-asset/ghcide#readme
changelog-type: ''
hash: d246e95faf736a4209380a9128c310bae2d6b8eb16f8e6b666cceff66a31f39d
test-bench-deps:
  lsp-test: -any
  ghc: -any
  extra: -any
  base: -any
  parser-combinators: -any
  text: -any
  filepath: -any
  containers: -any
  lens: -any
  tasty-hunit: -any
  haskell-lsp-types: -any
  tasty: -any
maintainer: Digital Asset
synopsis: The core of an IDE
changelog: ''
basic-deps:
  shake: ! '>=0.17.5'
  ghc: ! '>=8.4'
  bytestring: -any
  extra: -any
  unix: -any
  stm: -any
  base: ==4.*
  time: -any
  unordered-containers: -any
  text: -any
  safe-exceptions: -any
  syb: -any
  filepath: -any
  async: -any
  data-default: -any
  hie-bios: ! '>=0.2'
  sorted-list: -any
  containers: -any
  ghcide: -any
  ghc-paths: -any
  ghc-boot: -any
  binary: -any
  utf8-string: -any
  rope-utf16-splay: -any
  network-uri: -any
  mtl: -any
  hashable: -any
  prettyprinter: -any
  transformers: -any
  haskell-lsp-types: -any
  optparse-applicative: -any
  deepseq: -any
  ghc-boot-th: -any
  aeson: -any
  haskell-lsp: ! '>=0.15'
  prettyprinter-ansi-terminal: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
author: Digital Asset
latest: 0.0.3
description-type: markdown
description: "# `ghcide` - A library for building Haskell IDE tooling\n\nNote: `ghcide`
  was previously called `hie-core`.\n\nOur vision is that you should build an IDE
  by combining:\n\n\n<img style=\"float:right;\" src=\"img/vscode2.png\"/>\n\n* [`hie-bios`](https://github.com/mpickering/hie-bios)
  for determining where your files are, what are their dependencies, what extensions
  are enabled and so on;\n* `ghcide` (i.e. this library) for defining how to type
  check, when to type check, and producing diagnostic messages;\n* A bunch of plugins
  that haven't yet been written, e.g. [`hie-hlint`](https://github.com/ndmitchell/hlint)
  and [`hie-ormolu`](https://github.com/tweag/ormolu), to choose which features you
  want;\n* [`haskell-lsp`](https://github.com/alanz/haskell-lsp) for sending those
  messages to a [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/)
  server;\n* An extension for your editor. We provide a [VS Code extension](https://code.visualstudio.com/api)
  as `extension` in this directory, although the components work in other LSP editors
  too (see below for instructions using Emacs).\n\nThere are more details about our
  approach [in this blog post](https://4ta.uk/p/shaking-up-the-ide).\n\n## Features\n\n`ghcide`
  already exports the following features via the lsp protocol:\n\n| Feature | LSP
  name |\n| - | - |\n| Display error messages (parse errors, typecheck errors, etc.)
  and enabled warnings. | diagnostics |\n| Go to definition in local package | definition
  \ | \n| Display type and source module of values | hover |\n| Remove redundant imports,
  replace suggested typos for values and module imports, fill type holes, insert missing
  type signatures, add suggested ghc extensions  | codeAction (quickfix) |\n| Organize
  imports | codeAction (source.organizeImports) |\n\n## Using it\n\n### Install `ghcide`\n\n####
  With Nix\n\n[See ghcide-nix repository](https://github.com/hercules-ci/ghcide-nix)\n\n####
  With Cabal or Stack\n\nFirst install the `ghcide` binary using `stack` or `cabal`,
  e.g.\n\n1. `git clone https://github.com/digital-asset/ghcide.git`\n2. `cd ghcide`\n3.
  `cabal install` or `stack install` (and make sure `~/.local/bin` is on your `$PATH`)\n\nIt's
  important that `ghcide` is compiled with the same compiler you use to build your
  projects.\n\n### Test `ghcide`\n\nNext, check that `ghcide` is capable of loading
  your code. Change to the project directory and run `ghcide`, which will try and
  load everything using the same code as the IDE, but in a way that's much easier
  to understand. For example, taking the example of [`shake`](https://github.com/ndmitchell/shake),
  running `ghcide` gives some error messages and warnings before reporting at the
  end:\n\n```\nFiles that worked: 152\nFiles that failed: 6\n * .\\model\\Main.hs\n
  * .\\model\\Model.hs\n * .\\model\\Test.hs\n * .\\model\\Util.hs\n * .\\output\\docs\\Main.hs\n
  * .\\output\\docs\\Part_Architecture_md.hs\nDone\n```\n\nOf the 158 files in Shake,
  as of this moment, 152 can be loaded by the IDE, but 6 can't (error messages for
  the reasons they can't be loaded are given earlier). The failing files are all prototype
  work or test output, meaning I can confidently use Shake.\n\nThe `ghcide` executable
  mostly relies on [`hie-bios`](https://github.com/mpickering/hie-bios) to do the
  difficult work of setting up your GHC environment. If it doesn't work, see [the
  `hie-bios` manual](https://github.com/mpickering/hie-bios#readme) to get it working.
  My default fallback is to figure it out by hand and create a `direct` style [`hie.yaml`](https://github.com/ndmitchell/shake/blob/master/hie.yaml)
  listing the command line arguments to load the project.\n\nOnce you have got `ghcide`
  working outside the editor, the next step is to pick which editor to integrate with.\n\n###
  Using with VS Code\n\nInstall the VS code extension (see https://code.visualstudio.com/docs/setup/mac
  for details on adding `code` to your `$PATH`):\n\n1. `cd extension/`\n2. `npm ci`\n3.
  `npm run vscepackage`\n4. `code --install-extension ghcide-0.0.1.vsix`\n\nNow opening
  a `.hs` file should work with `ghcide`.\n\n### Using with Emacs\n\nIf you don't
  already have [MELPA](https://melpa.org/#/) package installation configured, visit
  MELPA [getting started](https://melpa.org/#/getting-started) page to get set up.
  Then, install [`use-package`](https://melpa.org/#/use-package). Finally, add the
  following lines to your `.emacs`.\n```elisp\n;; LSP\n(use-package flycheck\n  :ensure
  t\n  :init\n  (global-flycheck-mode t))\n(use-package yasnippet\n  :ensure t)\n(use-package
  lsp-mode\n  :ensure t\n  :hook (haskell-mode . lsp)\n  :commands lsp)\n(use-package
  lsp-ui\n  :ensure t\n  :commands lsp-ui-mode)\n(use-package lsp-haskell\n :ensure
  t\n :config\n (setq lsp-haskell-process-path-hie \"ghcide\")\n (setq lsp-haskell-process-args-hie
  '())\n ;; Comment/uncomment this line to see interactions between lsp client/server.\n
  ;;(setq lsp-log-io t)\n)\n```\n\n### Using with Vim/Neovim\n\n#### LanguageClient-neovim\nInstall
  [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\n\nAdd
  this to your vim config:\n```vim\nlet g:LanguageClient_rootMarkers = ['*.cabal',
  'stack.yaml']\nlet g:LanguageClient_serverCommands = {\n    \\ 'rust': ['rls'],\n
  \   \\ 'haskell': ['ghcide', '--lsp'],\n    \\ }\n```\n\nRefer to `:he LanguageClient`
  for more details on usage and configuration.\n\n#### vim-lsp\nInstall [vim-lsp](https://github.com/prabirshrestha/vim-lsp).\n\nAdd
  this to your vim config:\n\n```vim\nau User lsp_setup call lsp#register_server({\n
  \   \\ 'name': 'ghcide',\n    \\ 'cmd': {server_info->['/your/path/to/ghcide', '--lsp']},\n
  \   \\ 'whitelist': ['haskell'],\n    \\ })\n```\n\nTo verify it works move your
  cursor over a symbol and run `:LspHover`.\n\n### coc.nvim\n\nInstall [coc.nvim](https://github.com/neoclide/coc.nvim)\n\nAdd
  this to your coc-settings.json (which you can edit with :CocConfig):\n\n```json\n{\n
  \ \"languageserver\": {\n    \"haskell\": {\n      \"command\": \"ghcide\",\n      \"args\":
  [\n        \"--lsp\"\n      ],\n      \"rootPatterns\": [\n        \".stack.yaml\",\n
  \       \".hie-bios\",\n        \"BUILD.bazel\",\n        \"cabal.config\",\n        \"package.yaml\"\n
  \     ],\n      \"filetypes\": [\n        \"hs\",\n        \"lhs\",\n        \"haskell\"\n
  \     ]\n    }\n  }\n}\n```\n\nHere's a nice article on setting up neovim and coc:
  [Vim and Haskell in\n2019](http://marco-lopes.com/articles/Vim-and-Haskell-in-2019/)\n\n##
  History and relationship to other Haskell IDE's\n\nThe code behind `ghcide` was
  originally developed by [Digital Asset](https://digitalasset.com/) as part of the
  [DAML programming language](https://github.com/digital-asset/daml). DAML is a smart
  contract language targeting distributed-ledger runtimes, based on [GHC](https://www.haskell.org/ghc/)
  with custom language extensions. The DAML programming language has [an IDE](https://webide.daml.com/),
  and work was done to separate off a reusable Haskell-only IDE (what is now `ghcide`)
  which the [DAML IDE then builds upon](https://github.com/digital-asset/daml/tree/master/compiler/damlc).
  Since that time, there have been various [non-Digital Asset contributors](https://github.com/digital-asset/ghcide/graphs/contributors),
  in addition to continued investment by Digital Asset.\n\nThe Haskell community [has](https://github.com/DanielG/ghc-mod)
  [various](https://github.com/chrisdone/intero) [IDE](https://github.com/rikvdkleij/intellij-haskell)
  [choices](http://leksah.org/), but the one that has been gathering momentum is [`haskell-ide-engine`](https://github.com/haskell/haskell-ide-engine#readme).
  Our project owes a debt of gratitude to the `haskell-ide-engine`. We reuse libraries
  from their ecosystem, including [`hie-bios`](https://github.com/mpickering/hie-bios#readme)
  (a likely future environment setup layer in `haskell-ide-engine`), [`haskell-lsp`](https://github.com/alanz/haskell-lsp#readme)
  and [`lsp-test`](https://github.com/bubba/lsp-test#readme) (the `haskell-ide-engine`
  [LSP protocol](https://microsoft.github.io/language-server-protocol/) pieces). We
  make heavy use of their contributions to GHC itself, in particular the work to make
  GHC take string buffers rather than files. While `ghcide` is not a part of `haskell-ide-engine`,
  we feel it _could_ form the core of a future version - but such decisions are up
  to the `haskell-ide-engine` contributors.\n\nThe best summary of the architecture
  of `ghcide` is available [this talk](https://www.youtube.com/watch?v=cijsaeWNf2E&list=PLxxF72uPfQVRdAsvj7THoys-nVj-oc4Ss)
  ([slides](https://ndmitchell.com/downloads/slides-making_a_haskell_ide-07_sep_2019.pdf)),
  given at [MuniHac 2019](https://munihac.de/2019.html). However, since that talk
  the project has renamed from `hie-core` to `ghcide`, and the repo has moved to [this
  location](https://github.com/digital-asset/ghcide/).\n"
license-name: Apache-2.0
