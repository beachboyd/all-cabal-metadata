homepage: https://github.com/clintonmead/ghc-instances#readme
changelog-type: ''
hash: 8c4b9d3dfc2b9e34064ac233242f8b4f813ba447d7a2191476e434d56b4d6f66
test-bench-deps: {}
maintainer: clintonmead@gmail.com
synopsis: Easily import all instances contained in GHC distributed libraries
changelog: ''
basic-deps:
  ghc: -any
  hoopl: -any
  bytestring: -any
  unix: -any
  Cabal: -any
  base: <4.11
  time: -any
  hpc: -any
  filepath: -any
  process: -any
  array: -any
  integer-gmp: -any
  containers: -any
  ghc-boot: -any
  binary: -any
  ghc-prim: -any
  deepseq: -any
  template-haskell: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Clinton Mead
latest: 0.1.0.1
description-type: haddock
description: ! 'This package simply has a number of modules which import all the modules

  from each package that is distributed with GHC.


  There''s also a module "Control.Instances.GHC_Packages", that imports all of the

  above modules, essentially importing every module distributed with GHC.


  Why would you want to do this?


  Lets say I''ve got a data type \"D a\". And a class \"C\".


  Further, lets say I can define \"C (D a)\" if "a" is of class \"C1\".

  I can also \"C (D a)\" if "a" is of class \"C2\"


  Lets try:


  instance C1 a => C (D a) where ...


  instance C2 a => C (D a) where ...


  These are going to be overlapping. We can''t do this.


  But instead, we import "Control.Instances.GHC_Packages". And then we can

  use [reify](https://hackage.haskell.org/package/template-haskell-2.12.0.0/docs/Language-Haskell-TH.html#v:reify)

  from [Template Haskell](https://hackage.haskell.org/package/template-haskell-2.12.0.0)

  to bring every \"C1\" and \"C2\" instance in to scope that''s defined anywhere in
  "base"

  or any GHC module.


  We can then use Template Haskell to define all our instances. We can explicitly
  define what happens

  when both \"C1\" and \"C2\" instances are defined, perhaps prefering one over the
  other.


  As we''ve got the full power of Haskell in Template Haskell, we can do these manipulations.


  The package [static-closure](https://hackage.haskell.org/package/static-closure)

  is an example of using these instances to generate it''s own instances for it''s
  data type.


  This package will need to be updated with each release of GHC but currently the

  cabal file and modules should contain appropriate pre-processor directives that

  this package should work from least from GHC 7.8 to GHC 8.2.'
license-name: BSD-3-Clause
