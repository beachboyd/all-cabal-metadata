homepage: https://github.com/aupiff/keccak#readme
changelog-type: ''
hash: 5c09bdfc2aee106e460e9293dbe7fc4441d022cd5354fc88edf81ed09262b086
test-bench-deps:
  keccak: -any
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: -any
  text: -any
  test-framework-quickcheck2: -any
  parsec: -any
  HUnit: -any
  gauge: -any
  memory: -any
  quickcheck-instances: -any
  cryptonite: -any
  base16-bytestring: -any
  QuickCheck: -any
maintainer: blankman@boustro.com
synopsis: haskell keccak functions
changelog: ''
basic-deps:
  keccak: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  base16-bytestring: -any
  vector: -any
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
author: Roy Blankman
latest: '0.1.3'
description-type: markdown
description: ! "# keccak\n\n[![Travis\nCI](https://img.shields.io/travis/aupiff/keccak.svg?label=Travis%20CI)](https://travis-ci.org/aupiff/keccak)\n\nA
  pure haskell implementation of the keccak family of hashes.\n\nDocumentation available
  on\n[Hackage](http://hackage.haskell.org/package/keccak).\n\n## Example usage\n\nIn
  the example usage below, I encode `ByteString`s in base16 so that they\ncan be read
  as standard hex strings.\n\n```haskell\nghci> import Data.ByteString.Base16 as BS16\n\nghci>
  :t keccak256\nkeccak256 :: BS.ByteString -> BS.ByteString\n\nghci> BS16.encode $
  keccak256 \"testing\"\n\"5f16f4c7f149ac4f9510d9cf8cf384038ad348b3bcdc01915f95de12df9d1b02\"\n\nghci>
  BS16.encode $ keccak256 \"\"\n\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"\n```\n\n##
  Testing\n\n```\nstack test\n```\n\nNIST uses the [Secure Hash Algorithm Validation
  System\n(SHAVS)](https://csrc.nist.gov/CSRC/media//Projects/Cryptographic-Algorithm-Validation-Program/documents/shs/SHAVS.pdf)\nto
  validate the correctness of hash implementations. For all four variants of\nSHA3
  and Keccak, the `keccak` library's implementations successfully\n[pass](https://github.com/aupiff/keccak/blob/master/test/Spec.hs)
  the standard\nKATs (Known Answer Tests).\n\n## Benchmarks\n\n```\nstack bench\n```\n\n`cryptonite`'s
  C-based implementation of Keccack256 is currently 31x faster\nthan my Haskell.\n\n```\nbenchmarked
  keccak\ntime                 192.9 μs   (189.3 μs .. 196.5 μs)\n                     0.997
  R²   (0.994 R² .. 0.999 R²)\nmean                 196.2 μs   (194.2 μs .. 199.8
  μs)\nstd dev              8.622 μs   (5.653 μs .. 12.30 μs)\nvariance introduced
  by outliers: 24% (moderately inflated)\n\nbenchmarked cryptonite-keccak\ntime                 6.105
  μs   (6.038 μs .. 6.186 μs)\n                     0.999 R²   (0.998 R² .. 0.999
  R²)\nmean                 6.302 μs   (6.236 μs .. 6.413 μs)\nstd dev              293.5
  ns   (196.1 ns .. 440.9 ns)\nvariance introduced by outliers: 26% (moderately inflated)\n```\n\nEventually,
  I hope the library will have very few dependencies (only base,\nvector & bytestring,
  currently) and excellent performance.\n\n## References\n\n[Cryptographic Sponge
  Functions](https://keccak.team/files/CSF-0.1.pdf)\n\n[Official Keccak Reference](https://keccak.team/files/Keccak-reference-3.0.pdf)\n\n[Specification
  summary](https://keccak.team/keccak_specs_summary.html)\n"
license-name: MIT
