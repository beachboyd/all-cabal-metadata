homepage: ''
changelog-type: ''
hash: 435a69e2371cadbb51c47029cc7fadb2eedad5078c7b7bc1a4fb5e77dac20c1c
test-bench-deps: {}
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Multi-process orchestration for development and integration testing
changelog: ''
basic-deps:
  bytestring: -any
  unix: -any
  base: ! '>4.6 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  process: ==1.2.*
  network: -any
  async: -any
  conduit: ==1.1.*
  conduit-extra: -any
  ansi-terminal: ! '>=0.6'
  hslogger: -any
  optparse-applicative: ==0.11.*
  aeson: -any
  yaml: -any
  directory: -any
all-versions:
- 0.4.4
author: Brendan Hay
latest: 0.4.4
description-type: markdown
description: ! "# Keiretsu\n\n## Table of Contents\n\n* [Introduction](#introduction)\n*
  [Configuration](#configuration)\n    - [Intfile](#intfile)\n    - [Procfile](#procfile)\n
  \   - [.env](#env)\n* [Contributing](#contributing)\n* [Licence](#licence)\n\n\n##
  Introduction\n\nKeiretsu is an orchestration manager primarily designed for local
  development\nand integration testing.\n\nIt allows you to specify dependencies that
  should be running/available before\nthe start of the local application, triggers
  setup/teardown hooks,\nand applies a consistent environment to all child processes
  ensuring deterministic\nand repeatable configuration.\n\n\n## Installation\n\nGHC
  `7.6.2` or later is required to compile Keiretsu.\n\n```shell\ncabal install\n```\n\n\n##
  Configuration\n\nThere are 3 configuration file formats which Keiretsu will read,
  controlling\nvarious aspects such as dependencies, processes, and the environment.\n\nAn
  example for a Haskell project named `proxy` with two dependencies, `users`\nand
  `images` would look as follows:\n\n```\n+ images/\n|   + dist/\n|   |   + build/\n|
  \  |   |   + images/\n|   |   |       + images\n|   + src/\n|   |   + Main.hs\n|
  \  + .env\n|   + Intfile\n|   + Procfile\n+ proxy/\n|   + dist/\n|   |   + build/\n|
  \  |   |   + proxy/\n|   |   |       + proxy\n|   + src/\n|   |   + Main.hs\n|   +
  .env\n|   + Intfile\n|   + Procfile\n+ users/\n    + dist/\n    |   + build/\n    |
  \  |   + users/\n    |   |       + users\n    + src/\n    |   + Main.hs\n    + .env\n
  \   + Intfile\n    + Procfile\n```\n\n\n### Intfile\n\nThe `Intfile` specifies project
  dependencies with a `key: value` line based format.\n\nAn example `Intfile` for
  the `proxy` service (from above) which specifies two dependencies on\n`users` and
  `images`:\n\n```\nusers: ../users\nimages: ../images\n```\n\nThis will make Keirestu
  recurse into those sub-directories and continue looking\nfor the various configuration
  file types.\n\n### Procfile\n\nKeiretsu uses an identical format to [foreman's](https://github.com/ddollar/foreman)
  `Procfile`\nto describe processes.\n\nAn example `Procfile` for the `users` service
  (from above) specifying both\nweb and redis proctypes:\n\n```\nredis: redis-server
  --port $PORT\nweb: ./dist/build/web/web -p $PORT\n```\n\nThis will make Keiretsu
  will start two processes for this dependency.\n\n> Proctypes are simply unique names
  used to identify the related command within\n> a dependencies' scope.\n> Currently
  multiline proctypes are not supported.\n\n### .env\n\n`.env` files are used to supplement
  the process environment with configuration\nvalues for a specific dependency.\n\nAgain,
  using the example project layout from above if the `images` service had\na `.env`
  file in the project directory with the following:\n\n```\nIMAGES_TMP: /var/tmp/images-service\n```\n\nThe
  key/value pairs would be loaded into the environment and available to\nall processes.\n\n\n##
  Contributing\n\nFor any problems, comments or feedback please create an issue [here
  on GitHub](github.com/brendanhay/keiretsu/issues).\n\n\n## Licence\n\nkeiretsu is
  released under the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/)\n"
license-name: LicenseRef-OtherLicense
