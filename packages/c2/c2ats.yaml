homepage: https://github.com/metasepi/c2ats#readme
changelog-type: ''
hash: 1b3225b7b59bdecee98a82c07322ab3c54c6397849ad7cb42d7008a0b978f46e
test-bench-deps:
  test-framework-hunit: -any
  c2ats: -any
  test-framework: -any
  base: -any
  HUnit: -any
  test-framework-th: -any
maintainer: kiwamu@debian.or.jp
synopsis: Translate C code into ATS
changelog: ''
basic-deps:
  c2ats: -any
  base: ! '>=4.6 && <5'
  containers: -any
  language-c: ! '>=0.5.0'
  regex-posix: -any
  pretty: ! '>=1.1.3.1'
all-versions:
- 0.1.0.1
author: Kiwamu Okabe
latest: 0.1.0.1
description-type: markdown
description: ! "# c2ats - generate ATS interface from C code [![Build Status](https://travis-ci.org/metasepi/c2ats.svg)](https://travis-ci.org/metasepi/c2ats)\n\n##
  What's this?\n\n[ATS](http://www.ats-lang.org/) is a statically typed programming
  language that unifies implementation with formal specification. It can powerfully
  capture invariant in program.\n\nHowever, don't you feel frustration to use API
  of many C language libraries from ATS code? Don't you manually import such API into
  ATS code?\n\nThe c2ats is an utility to generate ATS's sats file importing from
  C language header, semi-automatically.\n\n## Requirements\n\n* [GCC](https://gcc.gnu.org/)
  to parse C language header\n* [cabal](https://www.haskell.org/cabal/) or [stack](https://haskellstack.org/)
  to build [Haskell](https://www.haskell.org/) code\n\nWe are testing this tool on
  [Debian GNU/Linux](https://www.debian.org/).\n\n## Install\n\nCheckout source code
  of the c2ats:\n\n```\n$ git clone https://github.com/metasepi/c2ats.git\n$ cd c2ats\n```\n\nThen
  install using cabal:\n\n```\n$ cabal install\n$ which c2ats\n/home/YourName/.cabal/bin/c2ats\n```\n\nor
  install using stack:\n\n```\n$ stack install\n$ which c2ats\n/home/YourName/.local/bin/c2ats\n```\n\n##
  Usage\n\nStart from [Hello World example](./example/hello). Create following fake
  C language header to use `printf(3)` function in C language:\n\n```\n$ vi example.h\n#include
  <stdio.h>\n```\n\nNext, let the c2ats to generate ATS sats file from above header:\n\n```\n$
  c2ats gen example.h > example.sats\n$ wc -l example.sats\n318 example.sats\n$ grep
  _printf example.sats\nfun fun_c2ats_printf: {l1:addr} (!ptr_v_1(char, l1) | ptr
  l1) -> int = \"mac#printf\"\n```\n\nThe sats file has many ATS declarations generated
  from the C header. It includes a declaration of `printf(3)` which can be used as
  following in dats:\n\n```\n$ vi main.dats\n#include \"share/atspre_define.hats\"\n#include
  \"share/atspre_staload.hats\"\n\nstaload UN = \"prelude/SATS/unsafe.sats\"\n\nstaload
  \"example.sats\"\n\nfun my_printf (s: string): void = {\n  val p = string2ptr s\n
  \ val (pfat, fpfat | p) = $UN.ptr_vtake p\n  val ret = fun_c2ats_printf (pfat |
  p)\n  prval () = fpfat pfat\n}\n\nimplement main0 () = {\n  val s = \"Hello, world!\\n\"\n
  \ val () = my_printf s\n}\n$ patscc main.dats\n$ ./a.out\nHello, world!\n```\n\nOf
  course, above code is so messy. It's caused by assigning a bad signature to `fun_c2ats_printf`
  function. You can get better dats code, if modify sats file as following:\n\n```\n$
  vi example.sats\n--snip--\nfun fun_c2ats_printf: (string) -> int = \"mac#printf\"\n--snip--\n$
  vi main.dats\n#include \"share/atspre_define.hats\"\n#include \"share/atspre_staload.hats\"\n\nstaload
  UN = \"prelude/SATS/unsafe.sats\"\n\nstaload \"example.sats\"\n\nimplement main0
  () = {\n  val s = \"Hello, world!\\n\"\n  val _ = fun_c2ats_printf s\n}\n$ patscc
  main.dats\n$ ./a.out\nHello, world!\n```\n\nTotally, the c2ats generates a scaffold
  (you may be familiar with [Ruby on Rails](http://rubyonrails.org/)) to build ATS
  application. Sometimes, it's useful to create application rapidly. However, such
  scaffold should be replaced with better signature until shipping your product.\n\nThe
  other examples are found at [example](./example/) directory.\n\n## License\n\nGPLv3
  or later.\n"
license-name: GPL-3.0-only
