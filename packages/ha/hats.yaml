homepage: https://github.com/kosmoskatten/hats
changelog-type: markdown
hash: cbe6364b1e2c56d155e01b14f5da844a5b5c26835995778b2521b37db20f6e3c
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  stm: -any
  base: -any
  text: -any
  test-framework-quickcheck2: -any
  criterion: -any
  process: -any
  hats: -any
  async: -any
  HUnit: -any
  attoparsec: -any
  random: -any
  QuickCheck: -any
  aeson: -any
maintainer: patrik.sandahl@gmail.com
synopsis: Haskell client for the NATS messaging system
changelog: ! "# 0.1.0.1\n\n* Made exception handling for exceptions from the network
  package a little\n  more robust. Exceptions from the network package is just strings,
  and\n  matching of errors need to be done by string matching. If a string is\n  changing
  the exception handler can fail. Added substring matching to\n  better handle this
  case.\n\n* Fixing a documentation bug.\n\n# 0.1.0.0\n\n* Initial release of hats
  - NATS client for Haskell.\n\n  The hats library provides client access for Haskell
  applications\n  using the NATS messaging system [https://nats.io](https://nats.io).\n\n
  \ A few examples can be found in [https://github.com/kosmoskatten/hats/blob/master/example/Examples.hs](https://github.com/kosmoskatten/hats/blob/master/example/Examples.hs).\n"
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  hats: -any
  network: -any
  async: -any
  connection: -any
  conduit: -any
  conduit-extra: -any
  network-uri: -any
  attoparsec: -any
  transformers: -any
  random: -any
  deepseq: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Patrik Sandahl
latest: 0.1.0.1
description-type: markdown
description: ! "HATS - Haskell NATS client\n===\n\nHaskell client for the NATS messaging
  system (see https://nats.io for\na general introduction to NATS).\n\nExamples:\n\nThis
  section gives a simple messaging example using this library. The\nexample requires
  the presence of a NATS server, running on localhost\nusing the default port 4222.
  If other host or port, adapt the\nexample.\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nmodule Main\n    ( main\n    ) where\n\nimport Network.Nats\nimport Text.Printf\n\nmain
  :: IO ()\nmain =\n    withNats defaultSettings [\"nats://localhost\"] $ \\nats ->
  do\n\n       -- Subscribe to the topic \"foo\".\n       (s, q) <- subscribe nats
  \"foo\" Nothing\n\n       -- Publish to topic \"foo\", do not request a reply.\n
  \      publish nats \"foo\" Nothing \"Some payload\"\n\n       -- Wait for a message,
  print the message's payload\n       msg <- nextMsg q\n       printf \"Received %s\\n\"
  (show $ payload msg)\n\n       -- Unsubscribe from topic \"foo\".\n       unsubscribe
  nats s Nothing\n```\n\nBeside from the subscription mode where messages, synchronously,
  are\nfetched from a queue there is also an asynchronous mode where each\nrequest
  is handled immediately in their own thread.\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nmodule Main\n    ( main\n    ) where\n\nimport Control.Monad\nimport Data.Maybe\nimport
  Network.Nats\nimport Text.Printf\n\nmain :: IO ()\nmain =\n    withNats defaultSettings
  [\"nats://localhost\"] $ \\nats -> do\n       \n        -- A simple - asynchronous
  - help service that will answer\n        -- requesters that give a reply topic with
  \"I can help\".\n        s1 <- subscribeAsync nats \"help\" Nothing $ \\msg -> do\n
  \           printf \"Help service received: %s\\n\" (show $ payload msg)\n            when
  (isJust $ replyTo msg) $\n                publish nats (fromJust $ replyTo msg)
  Nothing \"I can help\"\n\n        -- Subscribe to help replies.\n        (s2, q)
  <- subscribe nats \"help.reply\" Nothing\n\n        -- Request help.\n        publish
  nats \"help\" (Just \"help.reply\") \"Please ...\"\n\n        -- Wait for reply.\n
  \       msg <- nextMsg q\n        printf \"Received: %s\\n\" (show $ payload msg)\n\n
  \       -- Unsubscribe.\n        unsubscribe nats s1 Nothing\n        unsubscribe
  nats s2 Nothing\n```\n"
license-name: MIT
