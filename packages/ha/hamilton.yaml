homepage: https://github.com/mstksg/hamilton#readme
changelog-type: markdown
hash: fc95e1caa612e3f1e22c28878489f9efedada32e87158c709be1463579298921
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Physics on generalized coordinate systems using Hamiltonian Mechanics and
  AD
changelog: ! "Changelog\n=========\n\nVersion 0.1.0.3\n---------------\n\n*Mar 20,
  2018*\n\n<https://github.com/mstksg/hamilton/releases/tag/v0.1.0.3>\n\n*   Compatibility
  with *base-4.11.0.0* and GHC 8.4\n*   Compatibility with *vector-sized-1.0.0.0*\n*
  \  Internal conversion functions refactored using *hmatrix-vector-sized*,\n    *hessianF*.\n\nVersion
  0.1.0.2\n---------------\n\n*Jan 21, 2018*\n\n<https://github.com/mstksg/hamilton/releases/tag/v0.1.0.2>\n\n*
  \  Compatibility with *typelits-witneses-0.3.0.0*\n\nVersion 0.1.0.1\n---------------\n\n*Aug
  17, 2017*\n\n<https://github.com/mstksg/hamilton/releases/tag/v0.1.0.1>\n\n*   Removed
  `Num` instance in the examples file, to account for\n    *vector-sized*'s new `Num`
  instances.\n*   COMPLETE pragmas for examples file.\n\nVersion 0.1.0.0\n---------------\n\n*Nov
  27, 2016*\n\n<https://github.com/mstksg/hamilton/releases/tag/v0.1.0.0>\n\n*   Initial
  release.\n"
basic-deps:
  ansi-wl-pprint: -any
  base: ! '>=4.9 && <5'
  ad: -any
  vector-sized: ! '>=1.0'
  typelits-witnesses: ! '>=0.2.3'
  vty: -any
  hmatrix-vector-sized: -any
  ghc-typelits-knownnat: -any
  containers: -any
  hamilton: -any
  optparse-applicative: ! '>=0.13'
  hmatrix: ! '>=0.18'
  finite-typelits: -any
  hmatrix-gsl: ! '>=0.18'
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
author: Justin Le
latest: '0.1.0.3'
description-type: markdown
description: ! "Hamilton\n========\n\n[![Build Status](https://travis-ci.org/mstksg/hamilton.svg?branch=master)](https://travis-ci.org/mstksg/hamilton)\n\nSimulate
  physics on arbitrary coordinate systems using [automatic\ndifferentiation][ad] and
  [Hamiltonian mechanics][].  State only an arbitrary\nparameterization of your system
  and a potential energy function!\n\n[ad]: http://hackage.haskell.org/package/ad\n[Hamiltonian
  mechanics]: https://en.wikipedia.org/wiki/Hamiltonian_mechanics\n\nFor example,
  a simulating a [double pendulum system][dps] by simulating the\nprogression of the
  angles of each bob:\n\n[dps]: https://en.wikipedia.org/wiki/Double_pendulum\n\n[![My
  name is William Rowan Hamilton](http://i.imgur.com/Vaaa2EC.gif)][gifv]\n\n[gifv]:
  http://i.imgur.com/Vaaa2EC.gifv\n\nYou only need:\n\n1.  Your generalized coordinates
  (in this case, `θ1` and `θ2`), and equations\n    to convert them to cartesian coordinates
  of your objects:\n\n    ~~~haskell\n    x1 = sin θ1\n    y1 = -cos θ1\n    x2 =
  sin θ1 + sin θ2 / 2      -- second pendulum is half-length\n    y2 = -cos θ1 - cos
  θ2 / 2\n    ~~~\n\n2.  The masses/inertias of each of those cartesian coordinates
  (`m1` for `x1`\n    and `y1`, `m2` for `x2` and `y2`)\n\n3.  A potential energy
  function for your objects:\n\n    ~~~haskell\n    U = (m1 y1 + m2 y2) * g\n    ~~~\n\nAnd
  that's it! Hamiltonian mechanics steps your generalized coordinates (`θ1`\nand `θ2`)
  through time, without needing to do any simulation involving\n`x1`/`y1`/`x2`/`y2`!
  \ And you don't need to worry about tension or any other\nstuff like that.  All
  you need is a description of your coordinate system\nitself, and the potential energy!\n\n~~~haskell\ndoublePendulum
  :: System 4 2\ndoublePendulum =\n    mkSystem' (vec4 m1 m1 m2 m2)            --
  masses\n              (\\(V2 θ1 θ2)     -> V4 (sin θ1)            (-cos θ1)\n                                     (sin
  θ1 + sin θ2/2) (-cos θ1 - cos θ2/2)\n              )                             --
  coordinates\n              (\\(V4 _ y1 _ y2) -> (m1 * y1 + m2 * y2) * g)\n                                            --
  potential\n~~~\n\nThanks to [~~Alexander~~ William Rowan Hamilton][WRH], we can
  express our\nsystem parameterized by arbitrary coordinates and get back equations
  of motions\nas first-order differential equations.  This library solves those first-order\ndifferential
  equations for you using automatic differentiation and some matrix\nmanipulation.\n\n[WRH]:
  https://www.youtube.com/watch?v=SZXHoWwBcDc\n\nSee a [blog post][] I wrote on this,
  and also the [hackage documentation][] and the\n[example runner user guide][user
  guide] (and its [source][example runner]).\n\n[blog post]: https://blog.jle.im/entry/introducing-the-hamilton-library.html\n[hackage
  documentation]: http://hackage.haskell.org/package/hamilton\n[example runner]: https://github.com/mstksg/hamilton/blob/master/app/Examples.hs\n[user
  guide]: https://github.com/mstksg/hamilton#example-app-runner\n\n### Full Example\n\nLet's
  turn our double pendulum (with the second pendulum half as long) into an\nactual
  running program.  Let's say that `g = 5`, `m1 = 1`, and `m2 = 2`.\n\nFirst, the
  system:\n\n~~~haskell\nimport           Numeric.LinearAlgebra.Static\nimport qualified
  Data.Vector.Sized as V\n\n\ndoublePendulum :: System 4 2\ndoublePendulum = mkSystem'
  masses coordinates potential\n  where\n    masses :: R 4\n    masses = vec4 1 1
  2 2\n    coordinates\n        :: Floating a\n        => V.Vector 2 a\n        ->
  V.Vector 4 a\n    coordinates (V2 θ1 θ2) = V4 (sin θ1)            (-cos θ1)\n                                (sin
  θ1 + sin θ2/2) (-cos θ1 - cos θ2/2)\n    potential\n        :: Num a\n        =>
  V.Vector 4 a\n        -> a\n    potential (V4 _ y1 _ y2) = (y1 + 2 * y2) * 5\n\n\n--
  some helper patterns to pattern match on sized vectors\npattern V2 :: a -> a ->
  V.Vector 2 a\npattern V2 x y <- (V.toList->[x,y])\n  where\n    V2 x y = fromJust
  (V.fromList [x,y])\n\npattern V4 :: a -> a -> a -> a -> V.Vector 4 a\npattern V4
  x y z a <- (V.toList->[x,y,z,a])\n  where\n    V4 x y z a = fromJust (V.fromList
  [x,y,z,a])\n~~~\n\nNeat!  Easy, right?\n\nOkay, now let's run it.  Let's pick a
  starting configuration (state of the\nsystem) of `θ1` and `θ2`:\n\n~~~haskell\nconfig0
  :: Config 2\nconfig0 = Cfg (vec2 1 0  )  -- initial positions\n              (vec2
  0 0.5)  -- initial velocities\n~~~\n\nConfigurations are nice, but Hamiltonian dynamics
  is all about motion through\nphase space, so let's convert this configuration-space
  representation of the\nstate into a phase-space representation of the state:\n\n~~~haskell\nphase0
  :: Phase 2\nphase0 = toPhase doublePendulum config0\n~~~\n\nAnd now we can ask for
  the state of our system at any amount of points in time!\n\n~~~haskell\nghci> evolveHam
  doublePendulum phase0 [0,0.1 .. 1]\n-- result: state of the system at times 0, 0.1,
  0.2, 0.3 ... etc.\n~~~\n\nOr, if you want to run the system step-by-step:\n\n\n~~~haskell\nevolution
  :: [Phase 2]\nevolution = iterate (stepHam 0.1 doublePendulum) phase0\n~~~\n\nAnd
  you can get the position of the coordinates as:\n\n~~~haskell\npositions :: [R 2]\npositions
  = phsPositions <$> evolution\n~~~\n\nAnd the position in the underlying cartesian
  space as:\n\n~~~haskell\npositions' :: [R 4]\npositions' = underlyingPos doublePendulum
  <$> positions\n~~~\n\nExample App runner\n------------------\n\n*([Source][example
  runner])*\n\nInstallation:\n\n~~~bash\n$ git clone https://github.com/mstksg/hamilton\n$
  cd hamilton\n$ stack install\n~~~\n\nUsage:\n\n~~~bash\n$ hamilton-examples [EXAMPLE]
  (options)\n$ hamilton-examples --help\n$ hamilton-examples [EXAMPLE] --help\n~~~\n\nThe
  example runner is a command line application that plots the progression of\nseveral
  example system through time.\n\n\n| Example      | Description                                                |
  Coordinates                                                         | Options                                                       |\n|--------------|------------------------------------------------------------|---------------------------------------------------------------------|---------------------------------------------------------------|\n|
  `doublepend` | Double pendulum, described above                           | `θ1`,
  `θ2` (angles of bobs)                                         | Masses of each bob
  \                                           |\n| `pend`       | Single pendulum
  \                                           | `θ` (angle of bob)                                                  |
  Initial angle and velocity of bob                             |\n| `room`       |
  Object bounding around walled room                         | `x`, `y`                                                            |
  Initial launch angle of object                                |\n| `twobody`    |
  Two gravitationally attracted bodies, described below      | `r`, `θ` (distance
  between bodies, angle of rotation)               | Masses of bodies and initial
  angular veocity                  |\n| `spring`     | Spring hanging from a block
  on a rail, holding up a weight | `r`, `x`, `θ` (position of block, spring compression,
  spring angle) | Masses of block, weight, spring constant, initial compression |\n|
  `bezier`     | Bead sliding at constant velocity along bezier curve       | `t`
  (Bezier time parameter)                                         | Control points
  for arbitrary bezier curve                     |\n\nCall with `--help` (or `[EXAMPLE]
  --help`) for more information.\n\nMore examples\n-------------\n\n### Two-body system
  under gravity\n\n[![The two-body solution](http://i.imgur.com/TDEHTcb.gif)][gifv2]\n\n[gifv2]:
  http://i.imgur.com/TDEHTcb.gifv\n\n1.  The generalized coordinates are just:\n\n
  \   *   `r`, the distance between the two bodies\n    *   `θ`, the current angle
  of rotation\n\n    ~~~haskell\n    x1 =  m2/(m1+m2) * r * sin θ        -- assuming
  (0,0) is the center of mass\n    y1 =  m2/(m1+m2) * r * cos θ\n    x2 = -m1/(m1+m2)
  * r * sin θ\n    y2 = -m1/(m1+m2) * r * cos θ\n    ~~~\n\n2.  The masses/inertias
  are again `m1` for `x1` and `y1`, and `m2` for `x2` and\n    `y2`\n\n3.  The potential
  energy function is the classic gravitational potential:\n\n    ~~~haskell\n    U
  = - m1 * m2 / r\n    ~~~\n\nAnd...that's all you need!\n\nHere is the actual code
  for the two-body system, assuming `m1` is `100` and\n`m2` is `1`:\n\n~~~haskell\ntwoBody
  :: System 4 2\ntwoBody = mkSystem masses coordinates potential\n  where\n    masses
  :: R 4\n    masses = vec4 100 100 1 1\n    coordinates\n        :: Floating a\n
  \       => V.Vector 2 a\n        -> V.Vector 4 a\n    coordinates (V2 r θ) = V4
  (r1 * cos θ) (r1 * sin θ)\n                              (r2 * cos θ) (r2 * sin
  θ)\n      where\n        r1 =   r *   1 / 101\n        r2 = - r * 100 / 101\n    potential\n
  \       :: Num a\n        => V.Vector 4 a\n        -> a\n    potential (V2 r _)
  = - 100 / r\n~~~\n\nPotential improvements\n----------------------\n\n*   **Time-dependent
  systems**:  Shouldn't be an problem in theory/math; just\n    add a time parameter
  before all of the functions.  This opens a lot of\n    doors, like deriving inertial
  forces for free (like the famous Coriolis\n    force and centrifugal force).\n\n
  \   The only thing is that it makes the API pretty inconvenient, because it'd\n
  \   require all of the functions to also take a time parameter.  Of course, the\n
  \   easy way out/ugly solution would be to just offer two versions of the same\n
  \   function (one for time-independent systems and one for time-dependent\n    systems.
  \ But this is un-ideal.\n\n*   Velocity-dependent potentials:  Would give us the
  ability to model systems\n    with velocity-dependent Lagrangians like a charged
  particle in an\n    electromagnetic field, and also dissipative systems, like systems
  with\n    friction (dependent on `signum v`) and linear & quadratic wind resistance.\n\n
  \   This issue is much harder, theoretically.  It involves inverting arbitrary\n
  \   functions `forall a. RealFloat a => V.Vector n a -> V.Vector m a`.  It\n    might
  be possible with the help of some\n    [bidirectionalization techniques][bff-pearl],
  but I can't get the [bff][]\n    package to compile, and I'm not sure how to get
  [bff-mono][] to work with\n    numeric functions.\n\n    If anyone is familiar with
  bidirectionalization techniques and is willing\n    to help out, please send me
  a message or open an issue! :)\n\n[bff-pearl]: https://pdfs.semanticscholar.org/5f0d/ef02dbd96e102be9104d2ceb728d2a2a5beb.pdf\n[bff]:
  http://hackage.haskell.org/package/bff\n[bff-mono]: http://hackage.haskell.org/package/bff-mono\n\n"
license-name: BSD3
