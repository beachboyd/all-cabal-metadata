homepage: https://github.com/haskell-suite/haskell-src-exts
changelog-type: text
hash: 85c61301e37f3f3f65f4db16ffbffa112d826b94c434cf706b8764e492fb4c88
test-bench-deps:
  tasty-smallcheck: -any
  base: <5
  tasty-golden: ! '>=2.2.2'
  filepath: -any
  smallcheck: ! '>=1.0'
  containers: -any
  haskell-src-exts: -any
  mtl: -any
  pretty-show: ==1.6.10
  tasty: ! '>=0.3'
  directory: -any
maintainer: Matthew Pickering <matthewtpickering@gmail.com>
synopsis: ! 'Manipulating Haskell source: abstract syntax, lexer, parser, and pretty-printer'
changelog: ! "1.19.1 --> 1.20.0\n===================\n\n* GHC 8.2 updates\n* Add some
  missing Generics instances (#380)\n* Support Template Haskell pattern splices (#352)\n*
  Fix overloaded labels starting with _ (#362)\n* Relax MultiParamTypeClass check
  (#333)\n* DeriveAnyClass (#337)\n* Deriving Strategies (#387)\n* OVERLAPS/OVERLAPPING/OVERLAPPABLE
  pragmas\n* Unboxed Sums\n* Expression holes in infix expressions\n* Support multiple
  pattern synonyms per pattern synonym signature\n* COMPLETE pragmas\n* Fix #309,
  remove unnecessary semi-colon from pretty printer\n* Refine ExplicitNamespaces to
  properly export type operators\n\n1.19.0 --> 1.19.1\n===================\n\n* Revert
  making fields of `SrcLoc` strict. (#340)\n\n\n1.18.2 --> 1.19.0\n===================\n\n*
  Add JavaScriptFFI to known extensions (#335)\n* Remove space when pretty printing
  `SrcLoc`. (#307)\n* Don't reverse arguments in a context. (#328)\n* Add support
  for EmptyCase extension (#255)\n\n\n1.18.1 --> 1.18.2\n===================\n\n*
  Fix overzealous lexing of type applications\n\n1.18.0 --> 1.18.1\n===================\n\n*
  Fix overzealous lexing of overloaded labels.\n\n\n1.17.1 --> 1.18.0\n===================\n\n*
  Remove simplified AST\n* GHC 8.0 update: Overloaded labels, type applications, pattern
  synonym\nextensions, StrictData, injective type families\n\nAST changes:\n\n* Add
  TyQuasiQuote (#279).\n\nOther changes:\n\n* Only treat 'role' as a keyword in certain
  contexts (#286).\n* Prettyprint '!' in patterns correctly when BangPatterns are
  enabled (#287).\n* Parse magic hash with multiple trailing hashes (#300).\n* Apply
  fixities inside pattern synonym builders\n* Fix lexing of idents with multiple trailing
  #\n\n** 1.17.x\n\n1.17.0 --> 1.17.1\n=================\n\nBug Fix:\n\n* Fix bug
  in parsing view patterns (#284)\n\n1.16.0.1 --> 1.17.0\n===================\n\nAST
  changes:\n\n* Replaced VarA with AppA in Asst (#168).\n* Promoted list/tuple members
  changed from Promoted to Type (#162).\n* Update PatBind, Match, and Alt from containing
  Binds to Maybe Binds to\n  distinguish between empty where clauses and where clauses
  with no\n  binds (#244).\n* Add RoleAnnotDecl and Role to support Role annotations
  (#215).\n* Move NameSpace field from EVar/IVar to EAbs/IAbs.\n\nOther changes:\n\n*
  Add standalone parsers for ImportDecl.\n* Fix pretty-printer bugs for HaRP (#160).\n*
  Insert parentheses when pretty-printing non-atomic bang types (#169).\n* Un-reverse
  confusion of left and right arrow (#175).\n* Prettyprint option pragmas like 1.15
  (#172).\n* Conditionally insert lines when pretty-printing declarations (#171).\n*
  Distinguish deriving (Show) from deriving Show (#189).\n* Allow parsing of unicode
  subscript and superscript functions (#173).\n* Pretty print unboxed tuples with
  spaces (#193).\n* Improve performance when parsing long extension lists (#200).\n*
  Properly pretty print constructor and class operators (#204).\n* Read Haskell source
  files as UTF-8 (#223).\n* Fix ExplicitNamespaces parsing (#216).\n* PolyKinds implies
  KindSignatures (#220).\n* Preserve location information for infix binds (#205).\n*
  Preserve positional information in checkPattern (#231).\n* Maintain correct line
  numbers when parsing multiline GHC_OPTIONS (#218).\n* Correctly parse \"*\" with
  TypeOperators (#81).\n* Export the \"pretty\" method (#222).\n* Add javascript calling
  convention for foreign imports (#236).\n* Add non-greedy parsers for module heads
  (#191).\n* Add a flag to disable arity checking when parsing (#260).\n* Parse \"-\"
  in type signatures (#206).\n* Add support for type wildcards and expression holes
  (#252).\n* Add support for Pattern Synonyms (#197).\n* Bump the happy lower bound
  (#250).\n* Make test suite pass on GHC 7.12 (#224).\n* Support linking Haddock comments
  to AST nodes (#213).\n* Parse multiline LANGUAGE pragmas (#217).\n* Parse trailing
  where (#25).\n* Parse modules starting with pragmas and indented\n  \"module\" keyword
  (#122).\n* Use pretty-show to get human readable test outputs.\n* Respect fixity
  declarations inside where/let/class in\n  `applyFixities` (#212).\n* Correctly parse
  the combination of view patterns and bang patterns. (#276)\n\n** 1.16.x\n\n1.16.0
  --> 1.16.0.1\n===================\n\nInclude generated InternalParser.hs in the
  release tarball\n(See http://ro-che.info/articles/2014-03-08-happy-alex-ghc-7.8
  for details)\n\n1.15.0.1 --> 1.16.0\n===================\n\nNew language features:\n\n*
  DoRec\n* Closed type families\n* GADT records\n* ExplicitNamespaces\n* Type equality
  constraints\n* PolyKinds\n* DataKinds\n* Default associated types\n* Instance signatures\n*
  OVERLAP pragma\n* Parallel arrays\n* MINIMAL pragma\n* Default signatures\n* Safe
  Haskell\n* Binary literals\n* Qualified record puns\n* Type splices\n\nAST changes:\n\n*
  PatBind no longer contains the optional Maybe Type field. The type\n  signature
  is now represented as part of the pattern (PatTypeSig)\n* GuardedAlt and GuardedAlts
  types are replaced with the isomorphic\n  GuardedRhs and Rhs types\n* Move parentheses
  from the Context to Asst type\n* Change DeclHead and InstHead to make it possible
  to represent\n  various ways to put parentheses around parts of declarations. Introduce
  a new\n  type InstRule for the same purpose.\n* Change representation of negated
  patterns\n* Make strictness annotations on data type fields part of those fields'
  Type\n\nNotable bug fixes:\n\n* Allow statements, and not just expression, in MultiWayIf
  conditions\n* Allow equality constraints when GADTs are enabled\n* Fix parsing and
  printing of pragma modifiers, such as CONLIKE\n* Don't treat 'capi' or 'interruptible'
  as a keyword except after 'foreign'\n* Let ImpredicativeTypes imply ExplicitForAll\n*
  Let RecursiveDo enable 'rec' keyword\n* Fix pretty-printing of the unary minus sign\n*
  Do not require FlexibleContexts for things like Ord (i Int) => ...\n* Fix pretty-printing
  of deriving clauses\n* Parse \"Constraint\" as a kind with ConstraintKinds enabled\n*
  Support qualified quasi-quoters\n* Enable ScopedTypeVariables when parsing rules\n*
  Only permit record wildcards in last position\n* Allow n-parameter infix data declaration
  heads\n\nOther changes:\n\n* Expose showToken from Language.Haskell.Exts.Lexer\n*
  Show instance for SrcLoc and SrcSpan are changed (now they do not contain\n* field
  names)\n* Add DeriveGeneric to known extensions\n\n** 1.15.x\n\n1.15.0 --> 1.15.0.1\n===============\n\n*
  Eliminate inexhaustive patterns (and consequent bugs)\n* The test suite for 1.15.0
  wouldn't build due to a missing file in the source\n  distribution. Fixed.\n\n1.14.0.1
  --> 1.15.0\n===============\n\n* Add support for extensions:\n  - MultiWayIf\n  -
  LambdaCase\n  - DataKinds\n* Remove support for old (deprecated) Generics\n* Derive
  GHC's Generic instances for datatypes\n* Derive some missing Data and Typeable instances\n*
  Multiple bug fixes\n* Add missing Functor and Applicative instances for monads\n*
  Remove support for GHCs older than 7.4\n\n** 1.14.x\n\n1.14.0 --> 1.14.0.1\n===============\n\nNothing
  has actually changed here (apart from the CHANGELOG). This release is\ndone to include
  InternalParser.hs generated with happy 1.19 so that it compiles\nwith GHC 7.8.\n\n1.13.6
  --> 1.14.0\n===============\n\n* Modernize the Extension datatype in L.H.E.Extension,
  following the lead\n  of Cabal, to allow negative and positive extension modifiers
  (turning\n  features on and off). You need to worry about backwards-incompatible\n
  \ changes if any of the following pertains to you:\n  1) If you use the Extension
  datatype programmatically - it has changed\n     significantly (see documentation).\n
  \ 2) The ParseMode record now has one more field\n     (baseLanguage :: Language),
  which might give you a type error.\n  3) The behavior of the (extensions :: [Extension])
  field has changed,\n     which could bite you if you pass custom extensions in the
  ParseMode.\n     Previously, the ParseMode defaulted to the list of extensions accepted\n
  \    by Haskell2010, and if you set the list explicitly you would override\n     this.
  Now, the defaults are { baseLanguage = Haskell2010, extensions = [] },\n     and
  explicitly setting a list of extensions will be interpreted on top of\n     Haskell2010.
  See further the documentation for L.H.E.Extension.\n\n* Add support for the 'capi'
  calling convention. It is enabled with the CApiFFI\n  extension. It's been included
  since GHC 7.4, and advertised since 7.6.\n\n* Add support for the 'interruptible'
  FFI safety annotation, enabled with\n  the InterruptibleFFI extension.\n\n* Give
  better error message when lexing newline fails. In particular, fix the bug\n  when
  the parser would crash if the file didn't end with a newline.\n\n* Support unboxed
  tuple expressions and patterns.\n\n* Fix bug in lexing of primitive integer literals
  in hex or octal notation.\n\n* Disallow negative primitive word literals\n  (such
  as W# (-0x8000000000000000##)).\n\n* Allow phase control for SPECIALIZE pragma.\n\n*
  Derive Foldable and Traversable instances for all annotated AST types.\n\n* Fix
  bug with pretty-printing WARNING and DEPRECATED pragmas.\n\n\n** 1.13.x\n\n1.13.5
  --> 1.13.6\n===============\n\n* Allow 0-parameter type classes when MultiParamTypeClasses
  is on.\n\n* Add support for NondecreasingIndentation. Previously it was always on,\n
  \ which is the default behavior in GHC. Now it is on only if enabled, or\n  when
  using the newly added ghcDefaults extension set (instead of haskell2010).\n\n\n1.13.4
  --> 1.13.5\n===============\n\n* Expose Language.Haskell.Exts.Lexer, which implements\n
  \ a standalone token stream lexer. The module is\n  re-exported both by Language.Haskell.Exts
  and by\n  Language.Haskell.Exts.Annotated.\n\n\n1.13.3 --> 1.13.4\n===============\n\n*
  Fix bug where operators starting with # written in\n  parentheses would not be parsed
  when UnboxedTuples is\n  turned on. Now works.\n\n* Allow 'family' and 'forall'
  as (non-type) varid's. This\n  adds one more shift/reduce conflict to the parser,
  and\n  its resolution means that '{-# RULES \"name\" forall = ... #-}'\n  is not
  allowed.\n\n* Complete the set of FFI calling conventions from the Haskell\n  2010
  report (even if no compiler implements them). Also\n  include the 'js' calling convention,
  supported by UHC.\n\n\n1.13.2 --> 1.13.3\n===============\n\n* Fundep premises are
  now allowed to be empty.\n\n* Fix the bug where the lexer would crash on a LINE
  pragma\n  that did not include a line number.\n\n* Fix the bug where the lexer would
  require the # of a\n  MagicHash-style type constructor to be succeeded by at\n  least
  one character in the file.\n\n* Fix long-standing bug where the parser would crash
  with\n  an ugly \"Internal error\" error message if encountering\n  an extra }.\n\n*
  Report errors at the right place for function arity\n  mismatches. Earlier they
  were reported at end of file,\n  now they are reported where the function is declared.\n\n*
  Lexer now properly fails on line-breaks in string literals.\n\n* Lexer now handles
  character escapes up to 0x10FFFF (unicode).\n\n\n1.13.1 --> 1.13.2\n===============\n\n*
  Fix the bug with the precedence of unary prefix minus.\n  Previously it was resolved
  as binding more tightly\n  than any infix operator, now it is correctly treated\n
  \ as having the same fixity as binary infix minus.\n\n\n1.13.0 --> 1.13.1\n===============\n\n*
  Allow an optional semi before the closing tag of\n  an element. This achieves a
  similar effect for\n  XmlSyntax in do blocks as DoAndIfThenElse does for\n  the
  if construct. No more need to indent the closing\n  tag one step further than the
  opening tag.\n\n* Add a dummy 'noLoc :: SrcLoc' to L.H.E.SrcLoc, to\n  use when
  generating code. It could definitely be\n  done more elegantly, but not without
  inducing another\n  major version bump, so later.\n\n* Fix a regression from 1.11.x
  where the parser would crash\n  upon encountering non-simple class/data declaration\n
  \ heads, e.g. 'data A [a]'. Now fails with a parse error\n  as intended.\n\n\n1.12.0
  --> 1.13.0\n===============\n\n* Add extensions DoAndIfThenElse and NPlusKPatterns
  to\n  Language.Haskell.Exts.Extensions.\n\n* DoAndIfThenElse is now supported, at
  long last,\n  making HSE compatible with Haskell2010\n\n* Introduce haskell98 and
  haskell2010 extension groups,\n  exported from Language.Haskell.Exts.Extensions.\n\n*
  Backwards-incompatible change: default parse mode\n  is now to use haskell2010,
  which means the following\n  features are recognized by default: DoAndIfThenElse,\n
  \ PatternGuards, ForeignFunctionInterface, EmptyDataDecls.\n  NPlusKPatterns is
  no longer recognized by default.\n\n\n** 1.12.x\n\n1.11.1 --> 1.12.0\n===============\n\n*
  Move from old [$...| quasi-quote syntax to the new [...| one.\n  The old syntax
  is still recognized while parsing.\n\n* Allow symbols as variables when TypeOperators
  is enabled.\n\n* Rename ExplicitForall in ExplicitForAll, to be consistent\n  with
  GHC and the Haskell' process.\n\n\n** 1.11.x\n\n1.10.2 --> 1.11.1\n===============\n\n*
  API change: the fixities field in ParseMode is now of type\n  Maybe [Fixity].  If
  the field is Nothing the parsing will\n  not try to do any fixity resolution whatsoever,
  otherwise\n  it behaves as before.\n\n* API change, bug fix: The Fixity type contains
  a QName rather\n  than an Op to name the operator.  The operator must match\n  the
  given QName exactly (i.e., unqualified names only match\n  unqualified names, and
  qualified names only match qualified\n  names) for applyFixities to perform fixups.\n\n*
  Bug fix: End-of-file inside an OPTIONS pragma no longer loops.\n\n\n\n** 1.10.x\n\n1.10.1
  --> 1.10.2\n===============\n\n* Fix a missing case in the Functor declaration for
  Decl. Thanks\n  to Malcolm Wallace for the patch!\n\n1.10.0 --> 1.10.1\n===============\n\n*
  Enable the unicode version of DoubleColon (x2237). Thanks\n  to Andr�s Sicard-Ram�rez
  for the patch!\n\n1.9.6 --> 1.10.0\n===============\n\n* Ensure that implied extensions
  are always picked up, not only\n  when using the parseFile* family of functions
  as previously.\n\n* Add the newly devised <%>...</%> syntax to the XmlSyntax support.\n
  \ This causes changes to pretty much everything, including adding\n  a case to the
  AST which prompts the major version bump.\n\n\n** 1.9.x\n\n1.9.5 --> 1.9.6\n===============\n\n*
  Fix a bug (#203) where the lexer loops on malformed quasi-quoters.\n\n* Fix a bug
  with pretty-printing RULES pragmas.\n\n1.9.4 --> 1.9.5\n===============\n\n* Fix
  a bug where deriving clauses for GADT-style data declarations\n  were not properly
  indented.\n\n* Pretty-printing patterns is now more accurate in inserting (and not\n
  \ inserting) parentheses when needed.\n\n1.9.3 --> 1.9.4\n===============\n\n* Pretty-printer
  now inserts parentheses in clever places when\n  printing kinds.\n\n* Pretty-printing
  expressions is now far more accurate in inserting\n  (and not inserting) parentheses
  when needed.\n\n* Pretty-printing negative expressions no longer inserts a superfluous\n
  \ space between the - and the expression.\n\n1.9.2 --> 1.9.3\n===============\n\n*
  Constructors for newtype declarations must now have exactly one\n  argument. This
  is only when using the classic syntax, not with\n  GADT-style syntax.\n\n* Fix a
  bug where preceding commas in tuple sections were counted\n  one too few.\n\n1.9.1
  --> 1.9.2\n===============\n\n* Fix a bug with pretty-printing lexer tokens.\n\n*
  Fix a bug where non-colon TypeOperators could not be used in\n  prefix mode.\n\n1.9.0
  --> 1.9.1\n===============\n\n* Export parseFileContentsWithExts from .Exts.\n\n1.8.2
  --> 1.9.0\n===============\n\n* OptionPragma is renamed to the more descriptive
  ModulePragma,\n  and adds a constructor AnnModulePragma for handling ANN pragmas\n
  \ preceding module header.\n\n* Add instances for Eq/Ord/Data/Typeable for Fixity.\n\n*
  Add 'parseFileWithComments' and 'parseFileContentsWithComments'\n  to L.H.Exts .\n\n*
  More informative error messages when HSX tags are mismatched.\n\n\n\n** 1.8.x\n\n1.8.1
  --> 1.8.2\n===============\n\n* Don't insert redundant parentheses around record
  constructions\n  and updates.\n\n1.8.0 --> 1.8.1\n===============\n\n* Fix three
  bugs with the handling of ANN. I must have been really\n  tired when implementing
  that support.\n\n1.7.2 --> 1.8.0\n===============\n\n* Add an instance Show Fixity
  (derived).\n\n* Support for the new ANN and INLINE_CONLIKE pragmas.\n\n* Export
  knownExtensions from .Extension.\n\n* Remove support for CFILES and INCLUDE pragmas.
  The support wasn't\n  correct anyway, as it assumed the pragmas appeared at the
  top of\n  files. As CFILES/INCLUDE pragmas can (and do) appear anywhere,\n  there's
  no hope to support them in the AST. Better to remove the\n  support altogether.
  Files with CFILES/INCLUDE pragmas can still\n  be parsed of course, but those pragmas
  will be handled as comments.\n\n* Parsing with ignoreLinePragmas = False now correctly
  updates the\n  file name.\n\n* Allow the whole SPECIALISE/INLINE family of pragmas
  in instance\n  declarations. The InsInline constructor is removed, and is now\n
  \ represented by InsDecl (InlineSig ...).\n\n* Fix a bug with line numbering and
  quasi quotes, and a similar one\n  with line numbering and CDATA.\n\n* Fix a few
  minor bugs in the exactPrinter.\n\n* Fix the strange handling of so called strings
  in LINE pragmas.\n\n** 1.7.x\n\n1.7.1 --> 1.7.2\n===============\n\n* Fixes a bug
  in lexing LINE pragmas (used when ignoreLinePragmas\n  is set to False).\n\n1.7.0
  --> 1.7.1\n===============\n\n* UnicodeSyntax now also enables the forall symbol
  (U+2200).\n\n1.6.1 --> 1.7.0\n===============\n\n* Operators defined on the form\n\n
  \    (a `op` b) c = ...\n\n  could not be handled by the (annotated) AST, nor the
  parser. I had to\n  change the definition of the AST node for InfixMatch to allow
  a list\n  of right-hand subpatterns, i.e.\n\n     InfixMatch l (Pat l) (Name l)
  (Pat l) ...\n\n  has become\n\n     InfixMatch l (Pat l) (Name l) [Pat l] ...\n\n
  \ I also had an epiphany and fixed the issue that would arise with\n  exact printing
  of prefix definitions including parentheses, so\n  that now works too!\n\n** 1.6.x\n\n1.6.0
  --> 1.6.1\n===============\n\n* UnicodeSyntax now works not only for identifiers,
  but also for\n  ->, <- and =>, as well as Arrows arrows and kind stars.\n\n1.5.3
  --> 1.6.0\n===============\n\n* (=~=) turns out to be too general at Functor (for
  intuitive and not\n  technical reasons), so is specialised to Annotated to closer
  mirror\n  the original intention.\n\n* applyFixities is hoisted to a monad, and
  now fails on ambiguous infix\n  expressions.\n\n** 1.5.x\n\n1.5.2 --> 1.5.3\n===============\n\n*
  Several small bug fixes in the exact printer, and fail more gracefully\n  if the
  number of srcInfoPoints doesn't match the needs of the node.\n\n1.5.1 --> 1.5.2\n===============\n\n*
  Fix a bug in the exact printer that made it always print the first token\n  at position
  (0,0).\n\n* In fixing the above, Annotated is now a superclass of ExactP. It was
  already\n  a superclass in spirit, and nothing can break from this since ExactP
  is only\n  exported abstractly.\n\n1.5.0 --> 1.5.1\n===============\n\n* The pretty
  printer now introduces parentheses for non-atomic arguments to\n  function application.
  Note that infix applications are left untouched, no\n  parentheses will be inserted
  there, as it is assumed that fixities are\n  already properly resolved.\n\n* Fix
  a bug in the pretty printer where view patterns and n+k patterns were\n  not properly
  parenthesised.\n\n1.4.0 --> 1.5.0\n===============\n\n* Add support for acting on
  LINE pragmas while parsing, i.e. updating the source\n  position according to info
  given in LINE pragmas. This is done conditionally\n  based on a new flag ignoreLinePragmas
  in the ParseMode, hence the need to\n  increase the major version.\n\n** 1.4.x\n\n1.3.5
  --> 1.4.0\n===============\n\n* The AST node for Proc in the simple AST is changed
  to include a SrcLoc argument,\n  to make it consistent with similar nodes e.g. Lambda.
  This is specifically needed\n  for transformation of patterns in HSX.\n\n\n** 1.3.x\n\n1.3.4
  --> 1.3.5\n===============\n\n* Added an entry point in the parser for statements,
  and an instance Parseable Stmt\n  to go with it.\n\n* Ensured that .Annotated exports
  all relevant parseXXX(WithYYY) functions.\n\n1.3.3 --> 1.3.4\n===============\n\n*
  Operator fixities are now resolved in patterns.\n\n1.3.2 --> 1.3.3\n===============\n\n*
  Fixes a bug where qualified keywords are rejected even if the extension that\n  enables
  the keyword in question is not turned on.\n\n\n1.3.0 --> 1.3.2\n===============\n\n(Let's
  forget 1.3.1 ever existed.)\n\n* Fix a bug where declarations of infix operators
  were not properly merged as FunBinds.\n\n"
basic-deps:
  base: ! '>=4.5 && <5'
  array: ! '>=0.1'
  ghc-prim: -any
  cpphs: ! '>=1.3'
  pretty: ! '>=1.0'
all-versions:
- '0.2.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.7'
- '0.3.9'
- '0.3.10'
- '0.3.11'
- '0.3.12'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.4'
- '0.4.4.1'
- '0.4.5'
- '0.4.6'
- '0.4.8'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '1.0.0'
- '1.0.1'
- '1.1.0'
- '1.1.1'
- '1.1.3'
- '1.1.3.1'
- '1.1.4'
- '1.2.0'
- '1.3.0'
- '1.3.1'
- '1.3.2'
- '1.3.3'
- '1.3.4'
- '1.3.5'
- '1.4.0'
- '1.5.0'
- '1.5.1'
- '1.5.2'
- '1.5.3'
- '1.6.0'
- '1.6.1'
- '1.7.0'
- '1.7.1'
- '1.7.2'
- '1.8.0'
- '1.8.1'
- '1.8.2'
- '1.9.0'
- '1.9.3'
- '1.9.4'
- '1.9.5'
- '1.9.6'
- '1.10.0'
- '1.10.1'
- '1.10.2'
- '1.11.1'
- '1.12.0'
- '1.13.0'
- '1.13.1'
- '1.13.2'
- '1.13.3'
- '1.13.4'
- '1.13.5'
- '1.14.0'
- '1.14.0.1'
- '1.15.0'
- '1.15.0.1'
- '1.16.0'
- '1.16.0.1'
- '1.17.0'
- '1.17.1'
- '1.18.0'
- '1.18.1'
- '1.18.2'
- '1.19.0'
- '1.19.1'
- '1.20.0'
author: Niklas Broberg
latest: '1.20.0'
description-type: markdown
description: ! "Haskell Source Extensions\n=========================\n\nhaskell-src-exts
  is a package for handling and manipulating Haskell source\ncode. It is a descendant
  of the haskell-src package that is part of the standard\nlibraries, but extends
  this to support a number of syntactic\nextensions, e.g. MPTCs, fundeps, GADTs, TH
  etc. The aim is to support all\nextensions recognized by the community, as determined
  by what is implemented\nin compilers and tools.\n\nApart from the more standard
  extensions supported by e.g. GHC,\nhaskell-src-exts provides support for HaRP (Haskell
  Regular Patterns)\nand HSX (Haskell Source with XML) syntax.\n\nPackage structure\n-----------------\n\nThe
  modules that comprise haskell-src-exts all reside in the hierarchic\nnamespace Language.Haskell.Exts.
  Notable exposed modules include:\n\n* `Language.Haskell.Exts` - Imports and re-exports
  all the below,\n  and also defines some functions that combine functionality from
  several\n  modules.\n* `Language.Haskell.Exts.Syntax` - The abstract syntax tree\n
  \ that the other modules work on.\n* `Language.Haskell.Exts.Build` - Combinators
  for building\n  abstract syntax.\n* `Language.Haskell.Exts.Parser` - Functions for
  parsing Haskell\n  source code into an abstract syntax representation.\n\n\nLicense\n-------\n\nThe
  haskell-src-exts Package is distributed under a derived BSD-style license. It\nderives
  from several sources, all of which are distributable under\nBSD-style or compatible
  licenses. See the file LICENSE for the complete\nlicense text.\n"
license-name: BSD3
