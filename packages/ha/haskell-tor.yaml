homepage: http://github.com/GaloisInc/haskell-tor
changelog-type: ''
hash: 720c57d94bc280fd630566ad459b008653307b93076bede1d1892b8c6a2440ec
test-bench-deps:
  test-framework-hunit: ! '>=0.3 && <0.5'
  bytestring: ! '>=0.10 && <0.11'
  test-framework: ! '>=0.8 && <0.10'
  hourglass: ! '>=0.2.9 && <0.4'
  base: ! '>=4.7 && <5.0'
  time: ! '>=1.4 && <1.6'
  haskell-tor: ! '>=0.1 && <0.3'
  test-framework-quickcheck2: ! '>=0.3 && <0.5'
  asn1-types: ! '>=0.2 && <0.4'
  pretty-hex: ! '>=1.0 && <1.4'
  HUnit: ! '>=1.2 && <1.4'
  memory: ! '>=0.7 && <0.11'
  x509: ! '>=1.6 && <1.8'
  binary: ! '>=0.7 && <0.9'
  cryptonite: ! '>=0.6 && <0.10'
  QuickCheck: ! '>=2.7 && <2.9'
maintainer: awick@galois.com
synopsis: A Haskell Tor Node
changelog: ''
basic-deps:
  cereal: ! '>=0.4 && <0.6'
  bytestring: ==0.10.*
  fingertree: ! '>=0.1 && <0.3'
  hourglass: ! '>=0.2.9 && <0.4'
  pure-zlib: ! '>=0.4 && <0.5'
  base: ! '>=4.7 && <5.0'
  time: ! '>=1.4 && <1.6'
  base64-bytestring: ! '>=1.0 && <1.2'
  haskell-tor: ! '>=0.1 && <0.3'
  tls: ! '>=1.3.2 && <1.5'
  asn1-types: ==0.3.*
  pretty-hex: ! '>=1.0 && <1.2'
  network: ! '>=2.5 && <2.7'
  async: ! '>=2.0.2 && <2.2'
  x509-store: ! '>=1.6 && <1.8'
  monadLib: ! '>=3.7 && <3.9'
  array: ! '>=0.5 && <0.7'
  memory: ! '>=0.7 && <0.11'
  containers: ! '>=0.5 && <0.7'
  x509: ! '>=1.6 && <1.8'
  hans: ! '>=2.6 && <2.8'
  binary: ! '>=0.7.1 && <0.9'
  cryptonite: ! '>=0.6 && <0.10'
  attoparsec: ! '>=0.13 && <0.15'
  asn1-encoding: ==0.9.*
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
author: Adam Wick
latest: 0.1.2
description-type: markdown
description: ! "# A Tor Implementation in Haskell\n\n    This version of haskell-tor
  is (C) 2015 Galois, Inc., and distributed under\n    a standard, three-clause BSD
  license. Please see the file LICENSE,\n    distributed with this software, for specific
  terms and conditions.\n\n## What is Tor?\n\nTor is a secure onion routing network
  for providing anonymized access to both\nthe public Internet as well as a series
  of Tor-internal hidden services. Much\nmore information about Tor can be found at
  http://torproject.org.\n\nMany thanks to all the hard work that project has put
  into developing and\nevangelizing Tor.\n\n## What is in this repository?\n\nThis
  repository contains a Tor implementation in Haskell. It is eventually\ndesigned
  to be a fully-compliant Tor implementation, but at the moment lacks\nsome features:\n\n
  \ * Support for finding or implementing hidden services.\n  * Proper flow-control
  support.\n  * Statistics updating.\n  * Directory server support.\n\nUsing this
  library as an entrance node (i.e., to create anonymized connections\nto hosts on
  the Internet) is fairly well tested and should be functional. Relay\nand exit node
  support is implemented but much less well tested. For whichever\nuse case you have,
  please report any problems you find to the GitHub issue\ntracker.\n\n## Building
  haskell-tor\n\nThis library uses cabal as its build system, and should work for
  Mac, Unix, and\nHaLVM-based installations. Windows support may work ... we just
  haven't tested\nit.\n\n### Understanding Network Stacks\n\nThe haskell-tor library
  is built such that it can use one of two built-in\nnetwork stacks and/or a third-party
  network stack that you provide. How you get\neach of these is governed by two flags
  that correspond to the two network\nstacks:\n\n  * `network` ensures that haskell-tor
  includes defaults for the standard,\n    sockets-based network stack as described
  in the Haskell `network` library.\n\n  * `hans` ensures that haskell-tor includes
  defaults for the Haskell\n    Network stack, which is a clean-slate networks stack
  that runs off raw\n    Ethernet frames.\n\nThe defaults are a little complicated.
  To help try to sort things out, here is a\ntable that describes all the combinations
  of flags, and what the default is for\neach platform:\n\n| Default | Platform |
  `network` | `hans` | Meaning                                 |\n|---------|----------|-----------|--------|-----------------------------------------|\n|
  \        | Normal   | True      | True   | Support for both `hans` and `network`
  \  |\n|   *     | Normal   | True      | False  | Support only `network`                  |\n|
  \        | Normal   | False     | True   | Support only `hans`                     |\n|
  \        | Normal   | False     | False  | No network stack support (BYONS)        |\n|
  \        | HaLVM    | True      | True   | Support only `hans` (`network` ignored)
  |\n|         | HaLVM    | True      | False  | No network stack support (see prev.)
  \   |\n|   *     | HaLVM    | False     | True   | Support only `hans`                     |\n|
  \        | HaLVM    | False     | False  | No network stack support (BYONS)        |\n\n###
  Standard Cabal Constraints\n\nIf you're building with the HaLVM, please add the
  constraints `--constraint \"tls\n+hans\"`, `--constraint \"tls -network\"`, and
  `-f-network` to your build flags,\nand if you're using the `integer-simple` library
  (for example, to avoid GPL\nentanglements with unikernels), you should add the constraints
  `--constraint\n\"cryptonite -integer-gmp\"`, `--constraint \"scientific +integer-simple\"`
  and\n`--constraint \"scientific < 0.3.4.1\"`.\n\nIn either case, we strongly suggest
  using sandboxes to keep everything nice and\ntidy.\n\n## Important Note\n\nThis
  is an early implementation of Tor that has not been peer-reviewed. Those\nwith a
  true, deep need for anonymity should strongly consider using the mainline\nTor client
  until and unless this version receives appropriate extensions,\ntesting, and review.\n\n##
  Usage\n\nAs with most Haskell packages, this package can either be used as a library
  or\nas a binary package. Currently, the executable binary will simply perform an\nexample
  get from whatismyip.com. Extending this to support a wider range of\nfeatures is
  an open issue.\n"
license-name: BSD-3-Clause
