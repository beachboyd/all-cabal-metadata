homepage: ''
changelog-type: markdown
hash: 3cee833807e693cae5342f6a6bb5b0fe5d28f80b8c2438f084f0b672f14e06db
test-bench-deps:
  exceptions: '>=0.1'
  test-framework-hunit: '>=0.2.0'
  bytestring: -any
  test-framework: '>=0.1'
  base: '>=4.6.0.1 && <5'
  time: -any
  hspec: '>=0.2.0'
  hint: '>=0.3.3.5'
  stringsearch: '>=0.3.6.4'
  filepath: -any
  process: -any
  network: '>=2.3.1.0'
  doctest: '>=0.3.0'
  HUnit: '>=1.1'
  containers: -any
  haskell-awk: -any
  haskell-src-exts: '>=1.14.0'
  mtl: '>=2.1.2'
  easy-file: -any
  transformers: '>=0.3.0.0'
  temporary: '>=1.0'
  directory: -any
maintainer: Mario Pastorelli <pastorelli.mario@gmail.com>,  Samuel Gélineau <gelisam@gmail.com>
synopsis: Transform text from the command-line using Haskell expressions.
changelog: |
  # What's new?

  ## New in 1.1.1

  GHC 7.10 compatibility.

  ## New in 1.1

  In a nutshell, custom context directories and GHC 7.8 compatibility.

  ### Breaking changes

  * The detection of whether the user prelude needs to be recompiled has been improved, leading to the removal of the no-longer useful `--recompile` flag.

  ### "Breaking" changes (if you used internal stuff)

  * The `haskell-awk` library has changed.
  * The format of `~/.hawk/cache` has changed.

  ### New features

  * GHC 7.8 compatibility.
  * A context directory other than `~/.hawk` can be specified.
  * A `.hawk` directory can be placed in the current directory (or one of its ancestors) and it will be used instead of `~/.hawk`. This allows different projects to use different user preludes.

  ### Bugfixes

  * Some examples from the documentation needed minor changes in order to produce the documented output.
  * `hawk ""` is now a syntax error.
  * `cabal install --enable-tests` no longer complains that the runtime isn't installed.

  ### Minor improvements

  * The nomenclature for "lines" and "words" is now "records" and "fields", because the delimiters don't need to be newline and space.
  * Usage is shown when `hawk` is called with no arguments.
  * A warning message is displayed when `~/.hawk` is first created.
  * More succinct `--help` output.
  * More uniform presentation of warnings and error messages.
basic-deps:
  exceptions: '>=0.1'
  bytestring: -any
  base: '>=4.6.0.1 && <5'
  time: -any
  hint: '>=0.3.3.5'
  stringsearch: '>=0.3.6.4'
  filepath: -any
  process: -any
  network: '>=2.3.1.0 && <2.7.0.0'
  containers: -any
  haskell-awk: -any
  haskell-src-exts: '>=1.16.0 && <1.18.0'
  mtl: '>=2.1.2'
  easy-file: -any
  transformers: '>=0.3.0.0'
  directory: -any
all-versions:
- 1.0.1
- '1.1'
- 1.1.1
author: Mario Pastorelli <pastorelli.mario@gmail.com>,  Samuel Gélineau <gelisam@gmail.com>
latest: 1.1.1
description-type: markdown
description: |
  # Hawk

  Transform text from the command-line using Haskell expressions. Similar to [awk](http://cm.bell-labs.com/cm/cs/awkbook/index.html), but using Haskell as the text-processing language.

  ## Examples

  In [Unix](http://en.wikipedia.org/wiki/Unix) the file `/etc/passwd` is used to
  keep track of every registered user in the system. Each entry in the file
  contains information about a single user, using a simple colon-separated format.
  For example:

  ```
  root:x:0:0:root:/root:/bin/bash
  ```

  The first field is the username. We can use Hawk to list all usernames as follows:

  ```bash
  > cat /etc/passwd | hawk -d: -m 'head'
  root
  ```

  The `-d` option tells Hawk to use `:` as field delimiters, causing the first line to be interpreted as `["root", "x", "0", "0", "root", "/root", "/bin/bash"]`.
  The `-m` tells Hawk to map a function over each line of the input. In this case, the function `head` extracts the first field of the line, which happens to be the username.

  We could of course have achieved identical results by using awk instead of Hawk:

  ```bash
  > cat /etc/passwd | awk -F: '{print $1}'
  root
  ```

  While Hawk and awk have similar use cases, the philosophy behind the two is very
  different. Awk uses a specialized language designed to concisely express many text transformations,
  while Hawk uses the general-purpose language Haskell, which is also known for being concise, among other things.
  There are many standard command-line tools that can be easily approximated using
  [short Haskell expressions](http://www.haskell.org/haskellwiki/Simple_Unix_tools).

  Another important difference is that while awk one-liners are self-contained, Hawk encourages the use of libraries and user-defined functions. By adding function definitions, module imports and language pragmas to Hawk's user-configurable [prelude file](https://github.com/gelisam/hawk/tree/master/doc#user-prelude), those functions, libraries and language extensions become available to Hawk one-liners.
  For instance, we could add a `takeLast` function extracting the last `n` elements from a list, and use it to (inefficiently) approximate `tail`:

  ```bash
  > echo 'takeLast n = reverse . take n . reverse' >> ~/.hawk/prelude.hs
  > seq 0 100 | hawk -a 'takeLast 3'
  98
  99
  100
  ```


  For more details, see the [documentation](doc/README.md).

  ## Installation

  To install the stable version, simply use `cabal install haskell-awk` (_not_
  `cabal install hawk`, that's another unrelated package) and
  add `~/.cabal/bin` (or your sandbox's `bin` folder) to your PATH. You should
  be ready to use Hawk:

  ```bash
  > hawk '[1..3]'
  1
  2
  3
  ```

  To install the development version, clone this repository and use `cabal
  install` or `cabal-dev install` to compile Hawk and its dependencies. Cabal
  installs the binary to `~/.cabal/bin/hawk`, while cabal-dev installs it to
  `./cabal-dev/bin/hawk`. The first run will create a default configuration into
  `~/.hawk/prelude.hs` if it doesn't exist.

  [![Build Status](https://secure.travis-ci.org/gelisam/hawk.png)](http://travis-ci.org/gelisam/hawk)
license-name: Apache-2.0
