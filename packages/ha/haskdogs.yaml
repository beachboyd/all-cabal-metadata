homepage: http://github.com/grwlf/haskdogs
changelog-type: ''
hash: 84c4a9e52fde8b193317d6c55a850859303da9c58259597ffb8f727f265e8b03
test-bench-deps: {}
maintainer: grrwlf@gmail.com
synopsis: Generate tags file for Haskell project and its nearest deps
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  text: -any
  hasktags: -any
  filepath: -any
  process: -any
  containers: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.4
- 0.4.5
- 0.5.0
- 0.5.1
- 0.5.3
- 0.5.4
author: Sergey Mironov
latest: 0.5.4
description-type: markdown
description: ! "HaskDogs\n========\n\nHaskdogs is a shellscript-like tool which creates
  tag file for entire haskell\nproject directory. It takes into account first-level
  dependencies by recursively\nscanning imports and adding matching projects to the
  dependency list. Next,\nHaskdogs uses cabal or stack to unpack their sources into
  a temporary directory,\nwhich is `~/.haskdogs` by default. Finally, hasktags is
  called to produce the\n`tags` file.\n\nAs a result, programmer can use his/her text
  editor supporting tags (e.g. vim)\nto jump directly to definition of any standard
  or foreign function he/she uses.\n\nNote, that haskdogs relies on some GNU programs
  as well as on Unix shell\ncommands such as 'cd', 'mkdir' and so on. Also it would
  run 'stack' and ghc-pkg'\nin order to obtain package information.\n\nINSTALL\n-------\n\nCheck
  the dependencies. Currently they are: stack, hasktags, GNU find,\nwhich and shell.\n\nPlease
  follow stack's documentation(https://github.com/commercialhaskell/stack) to install
  stack.\n\n\t$ stack install hasktags haskdogs\n\nMake sure that PATH contains path
  to your stack binaries directory ($HOME/.local/bin by default).\n\nRUNNING\n-------\n\n1.
  Make sure yoy have installed hasktags and put it in PATH.\n\n2. cd to your Haskell
  project dir\n\n       $ cd $HOME/my-haskell-project\n\n3. Run haskdogs without arguments
  to generate tags file in Vim-compatible format\n\n       $ haskdogs\n\nEmacs users
  would probably want to add -e hasktags option to build Emacs-compatible TAGS.\n\n
  \   $ haskdogs --help\n    haskdogs - Recursive hasktags-based TAGS generator for
  a Haskell project\n\n    Usage: haskdogs [--version] [-d|--dir-list FILE] [-f|--file-list
  FILE]\n                    [--hasktags-args OPTS] [--stack-args OPTS] [--ghc-pkg-args
  OPTS]\n                    [--use-stack ARG] [--deps-dir PATH] [--raw] [OPTS]\n\n
  \   Available options:\n      -h,--help                Show this help text\n      --version
  \               Show version number\n      -d,--dir-list FILE       File containing
  directory list to process (use '-' to\n                               read from
  stdin)\n      -f,--file-list FILE      File containing Haskell sources to process
  (use '-'\n                               to read from stdin)\n      --hasktags-args
  OPTS     Arguments to pass to hasktags. -c -x is the default.\n                               Not
  for raw mode.\n      --stack-args OPTS        Arguments to pass to stack\n      --ghc-pkg-args
  OPTS      Arguments to pass to ghc-pkgs\n      --use-stack ARG          Execute
  ghc-pkg via stack, arg is ON, OFF or AUTO\n                               (the default)\n
  \     --deps-dir PATH          Specify the directory PATH to place the dependencies\n
  \                              of the project. Default is [/home/grwlf/.haskdogs]\n
  \     --raw                    Don't execute hasktags, print list of files to tag
  on\n                               the STDOUT. The output may be piped into hasktags\n
  \                              like this: `haskdogs --raw | hasktags -c -x STDIN'\n
  \     OPTS                     More hasktags options, use `--' to pass flags\n                               starting
  with `-'. Not for raw mode.\n\n\nThe following error could be caused by (over)strict
  Haskell policy regarding\nUnicode locale:\n\n    haskdogs: fd:5: hGetContents: invalid
  argument (invalid byte sequence)\n\nIt usually happens when the program tries to
  print Unicode character to\nnon-unicode console. In order to overcome, try the following
  setting:\n\n    export LANG=en_US.UTF8\n\n\nVIM HINT\n--------\n\nHasdogs (and underlying
  Hasktags) use simple scanning algorithm so it may become\nconfused facing functions
  with identical names. In this case Hasktags includes\nall of them in the output
  file so user has to decide which tag to jump to. Vim\noffers :tag and :ts commands
  to deal with such situations but it is somewhat\ncumbersome to type them every time.\n\nTo
  speedup things a bit I use the following vim binding. It iterates over all\nsame
  tags quickly with just one C-] command.\n\n    \" Cyclic tag navigation {{{\n\tlet
  g:rt_cw = ''\n\tfunction! RT()\n\t\tlet cw = expand('<cword>')\n\t\ttry\n\t\t\tif
  cw != g:rt_cw\n\t\t\t\texecute 'tag ' . cw\n\t\t\t\tcall search(cw,'c',line('.'))\n\t\t\telse\n\t\t\t\ttry\n\t\t\t\t\texecute
  'tnext'\n\t\t\t\tcatch /.*/\n\t\t\t\t\texecute 'trewind'\n\t\t\t\tendtry\n\t\t\t\tcall
  search(cw,'c',line('.'))\n\t\t\tendif\n\t\t\tlet g:rt_cw = cw\n\t\tcatch /.*/\n\t\t\techo
  \"no tags on \" . cw\n\t\tendtry\n\tendfunction\n\tmap <C-]> :call RT()<CR>\n    \"
  }}}\n\nJust copy the code above to your ~/.vimrc and reload the vim.\n\n\nNIX NOTE\n--------\n\nThe
  easiest way to generate Hakell tags on [Nix](https://nixos.org/nix)-machine\nis
  to run Haskdogs from `nix-shell` as follows:\n\n    nix-shell -p haskellPackages.haskdogs
  haskellPackages.hasktags haskellPackages.cabal-install ghc\n    (nix-shell) $ haskdogs\n\n\n"
license-name: BSD-3-Clause
