homepage: https://github.com/facebook/Haxl
changelog-type: markdown
hash: fb919568849f267399c52218672f7fd037a276cd9378ee82235dc97addb24492
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: ==4.*
  time: -any
  haxl: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  HUnit: ! '>=1.2 && <1.7'
  containers: -any
  binary: -any
  hashable: -any
  deepseq: -any
  aeson: ! '>=0.6 && <1.3'
maintainer: The Haxl Team <haxl-team@fb.com>
synopsis: ! 'A Haskell library for efficient, concurrent,

  and concise data access.'
changelog: ! "# Changes in version 2.0.0.0\n\n  * Completely rewritten internals to
  support arbitrarily overlapping\n    I/O and computation.  Haxl no longer runs batches
  of I/O in\n    \"rounds\", waiting for all the I/O to complete before resuming the\n
  \   computation. In Haxl 2, we can spawn I/O that returns results in\n    the background
  and computation fragments are resumed when the\n    values they depend on are available.
  \ See\n    `tests/FullyAsyncTest.hs` for an example.\n\n  * A new `PerformFetch`
  constructor supports the new concurrency\n    features: `BackgroundFetch`. The data
  source is expected to call\n    `putResult` in the background on each `BlockedFetch`
  when its\n    result is ready.\n\n  * There is a generic `DataSource` implementation
  in\n    `Haxl.DataSource.ConcurrentIO` for performing each I/O operation\n    in
  a separate thread.\n\n  * Lots of cleanup and refactoring of the APIs.\n\n  * License
  changed from BSD+PATENTS to plain BSD3.\n\n# Changes in version 0.5.1.0\n\n  * 'pAnd'
  and 'pOr' were added\n  * 'asyncFetchAcquireRelease' was added\n  * 'cacheResultWithShow'
  was exposed\n  * GHC 8.2.1 compatibility\n\n# Changes in version 0.5.0.0\n  * Rename
  'Show1' to 'ShowP' ([#62](https://github.com/facebook/Haxl/issues/62))\n\n# Changes
  in version 0.3.0.0\n\n  * Some performance improvements, including avoiding quadratic\n
  \   slowdown with left-associated binds.\n\n  * Documentation cleanup; Haxl.Core
  is the single entry point for the\n    core and engine docs.\n\n  * (>>) is now
  defined to be (*>), and therefore no longer forces\n    sequencing.  This can have
  surprising consequences if you are\n    using Haxl with side-effecting data sources,
  so watch out!\n\n  * New function withEnv, for running a sub-computation in a local
  Env\n\n  * Add a higher-level memoization API, see 'memo'\n\n  * Show is no longer
  required for keys in cachedComputation\n\n  * Exceptions now have `Eq` instances\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  bytestring: ! '>=0.9 && <0.11'
  stm: ==2.4.*
  base: ==4.*
  time: ! '>=1.4 && <1.9'
  haxl: -any
  unordered-containers: ==0.2.*
  text: ! '>=1.2.1.0 && <1.3'
  filepath: ! '>=1.3 && <1.5'
  containers: ==0.5.*
  binary: ! '>=0.7 && <0.10'
  ghc-prim: -any
  hashable: ==1.2.*
  transformers: -any
  deepseq: -any
  pretty: ==1.1.*
  aeson: ! '>=0.6 && <1.4'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.5.0.0'
- '0.5.1.0'
- '2.0.0.0'
author: Facebook, Inc.
latest: '2.0.0.0'
description-type: markdown
description: ! "![Haxl Logo](https://github.com/facebook/Haxl/raw/master/logo.png)\n\n#
  Haxl\n\nHaxl is a Haskell library that simplifies access to remote data, such\nas
  databases or web-based services. Haxl can automatically\n\n * batch multiple requests
  to the same data source,\n * request data from multiple data sources concurrently,\n
  * cache previous requests.\n\nHaving all this handled for you behind the scenes
  means that your\ndata-fetching code can be much cleaner and clearer than it would\notherwise
  be if it had to worry about optimizing data-fetching. We'll\ngive some examples
  of how this works in the pages linked below.\n\nThere are two Haskell packages here:\n\n
  * `haxl`: The core Haxl framework\n * `haxl-facebook` (in [example/facebook](example/facebook)):
  An (incomplete) example data source for accessing the Facebook Graph API\n\nTo use
  Haxl in your own application, you will likely need to build one or more\n*data sources*:
  the thin layer between Haxl and the data that you want\nto fetch, be it a database,
  a web API, a cloud service, or whatever.\n\nThere is a generic datasource in \"Haxl.DataSource.ConcurrentIO\"
  that\ncan be used for performing arbitrary IO operations concurrently, given\na
  bit of boilerplate to define the IO operations you want to perform.\n\nThe `haxl-facebook`
  package shows how we might build a Haxl data\nsource based on the existing `fb`
  package for talking to the Facebook\nGraph API.\n\n## Where to go next?\n\n * [The
  Story of Haxl](https://code.facebook.com/posts/302060973291128/open-sourcing-haxl-a-library-for-haskell/)\n
  \  explains how Haxl came about at Facebook, and discusses our\n   particular use
  case.\n\n * [An example Facebook data source](example/facebook/readme.md) walks\n
  \  through building an example data source that queries the Facebook\n   Graph API
  concurrently.\n\n * [Fun with Haxl (part 1)](https://simonmar.github.io/posts/2015-10-20-Fun-With-Haxl-1.html)\n
  \  Walks through using Haxl from scratch for a simple SQLite-backed\n   blog engine.\n\n
  * [The N+1 Selects Problem](example/sql/readme.md) explains how Haxl\n   can address
  a common performance problem with SQL queries by\n   automatically batching multiple
  queries into a single query,\n   without the programmer having to specify this behavior.\n\n
  * [Haxl Documentation](http://hackage.haskell.org/package/haxl) on\n   Hackage.\n\n
  * [There is no Fork: An Abstraction for Efficient, Concurrent, and Concise Data
  Access](http://community.haskell.org/~simonmar/papers/haxl-icfp14.pdf), our paper
  on Haxl, accepted for publication at ICFP'14.\n\n[![Build Status](https://travis-ci.org/facebook/Haxl.svg?branch=master)](https://travis-ci.org/facebook/Haxl)\n"
license-name: BSD3
