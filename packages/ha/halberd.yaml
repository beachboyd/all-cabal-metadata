homepage: http://github.com/haskell-suite/halberd/
changelog-type: text
hash: b5d15591546da38fcc39557e5ace9351bc3a03e905085140c12b629ede8fbc1c
test-bench-deps:
  halberd: -any
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  split: ==0.2.*
  Cabal: ! '>=1.16 && <1.22'
  base: ! '>=4.5 && <4.8'
  HUnit: ==1.2.*
  tagged: ! '>=0.4 && <0.8'
  containers: ! '>=0.4 && <0.6'
  haskell-src-exts: ! '>=1.14 && <1.17'
  mtl: ! '>=2.0 && <2.3'
  haskell-names: ! '>=0.2 && <0.5'
  haskell-packages: ==0.2.*
maintainer: hesselink@gmail.com
synopsis: A tool to generate missing import statements for Haskell modules.
changelog: ! "0.1.2.9\n  * Allow haskell-src-exts 1.16.\n\n0.1.2.8\n  * Allow haskell-names
  0.4.\n\n0.1.2.7\n  * Fix missing cases when using haskell-src-exts 1.15.\n  * Allow
  mtl 2.2.\n\n0.1.2.6\n  * Allow Cabal 1.20.*.\n\n0.1.2.5\n  * Allow haskell-src-exts
  1.15.\n\n0.1.2.4\n  * Allow base 4.7 (GHC 7.8).\n\n0.1.2.3\n  * Allow haskell-names
  0.3.\n\n0.1.2.2:\n  * Remove hardcoded path from source.\n\n0.1.2.1:\n  * Relax
  Cabal constraint.\n  * Remove halberd constraint. It made the last version unbuildable.\n\n0.1.2:\n
  \ * Actual order independent choosing.\n  * Added test cases.\n  * Refactored code.\n\n0.1.1:\n
  \ * Include needed modules.\n  * Smarter, order-independent auto-choosing.\n\n0.1:\n
  \ * Initial release\n"
basic-deps:
  halberd: -any
  Cabal: ! '>=1.16 && <1.22'
  base: ! '>=4.5 && <4.8'
  syb: ! '>=0.3 && <0.5'
  tagged: ! '>=0.4 && <0.8'
  containers: ! '>=0.4 && <0.6'
  haskell-src-exts: ! '>=1.14 && <1.17'
  mtl: ! '>=2.0 && <2.3'
  haskell-names: ! '>=0.2 && <0.5'
  haskell-packages: ==0.2.*
  safe: ==0.3.*
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.1.2.6
- 0.1.2.7
- 0.1.2.8
- 0.1.2.9
author: Erik Hesselink, Simon Meier, Tom Lokhorst, Roman Cheplyaka
latest: 0.1.2.9
description-type: markdown
description: ! "Halberd: generating imports\n==========\n\nHalberd is a tool to help
  you add missing imports to your Haskell source files. With it, you can write your
  source without imports, call Halberd, and just paste in the import lines.\n\nCurrently,
  it tries to automatically choose an import if there is a single sensible option.
  If it can't, it will prompt you with a simple menu. After running, it prints the
  imports, which you need to copy manually. Editor integration is planned.\n\nThe
  imports generated are either qualified, if the unbound function looks like `M.lookup`,
  or explicit, if it looks like `void`.\n\nExample\n----------\n\nAs an example, say
  you have written the following (nonsensical and type incorrect) Haskell file called
  `test.hs`:\n\n``` haskell\nmain :: IO Int8\nmain = do\n    forM_ [1,2] $ \\x ->
  print $ M.lookup x table\n    liftM id $ return $ headNote \"Impossible\" [10]\n\ntable
  :: M.Map String Int8\ntable = M.fromList [(\"Odeca\", 1), (\"Hackathon\",2)]\n```\n\nYou
  can run Halberd on this by running `halberd test.hs`. It will prompt you with three
  questions:\n\n```\nforM_:\n1) Control.Monad\n2) Data.Foldable\n\nM.lookup:\n1) Data.List\n2)
  GHC.List\n3) Prelude\n4) Data.IntMap\n5) Data.IntMap.Lazy\n6) Data.IntMap.Strict\n7)
  Data.Map\n8) Data.Map.Lazy\n9) Data.Map.Strict\n\nInt8:\n1) Data.Int\n2) Foreign\n3)
  Foreign.Safe\n4) GHC.Int\n```\n\nAfter making the choices by typing `1`, `7` and
  `1`, it generated the folling output:\n\n``` haskell\n------------- Could not find
  import for -------------\n - headNote\n\n-------- Insert these imports into your
  file --------\n\nimport qualified Data.Map as M\nimport Control.Monad ( forM_, liftM
  )\nimport Data.Int ( Int8 )\n```\n\nAs you can see, it didn't ask questions about
  `M.Map`, `M.fromList`, `liftM` and the second usage of `Int8`. It figured these
  out either because of previous choices, or because there was only a single option.\n\nInstallation\n----------\n\nHalberd
  uses the Haskell Suite packages (`haskell-src-exts`, `haskell-packages` and `haskell-names`)
  for parsing, name resolution and finding exposed identifiers of packages. While
  these can be installed from hackage, generating databases of names for new packages
  currently needs a custom version of the `cabal install` executable.  See the [documentation
  for haskell-names](https://github.com/haskell-suite/haskell-names) for more details.\n\nTo
  install Halberd, just do\n\n```\ncabal install halberd\n```\n\nThis will give you
  a `halberd` executable that takes a single argument, the file to generate imports
  for. By default, it only draws names from `base`. If you want to add more names,
  use `hs-gen-iface` from the `haskell-names` package.\n\nImprovements\n----------\n\nHalberd
  is still in an unfinished state. Some planned improvements are:\n\n* Smarter automatic
  choices.\n* Editor integration.\n* Easier installation of name databases (`haskell-names`).\n*
  Integration with existing imports.\n* Better choice UI.\n* Choices based on type
  information (`haskell-type-exts`).\n\nContributions are welcome!\n"
license-name: BSD-3-Clause
