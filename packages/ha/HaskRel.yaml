homepage: ''
changelog-type: ''
hash: f2881bf8849306b92c6aa29ac65178b6b192a4053284d69116e88fb63a72127e
test-bench-deps: {}
maintainer: thormichael@gmail.com
synopsis: ! 'HaskRel, Haskell as a DBMS with support for the relational

  algebra'
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  tagged: ! '>=0.8 && <0.9'
  containers: ! '>=0.5 && <0.6'
  ghc-prim: ! '>=0.4 && <0.5'
  HList: ! '>=0.4 && <0.5'
  directory: ! '>=1.2 && <1.3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Thor Michael Støre
latest: 0.1.0.2
description-type: markdown
description: ! "HaskRel, Haskell as a DBMS with support for the relational algebra\n==================================================================\n\n(C)
  2015, Thor Michael Støre\n\nHaskRel aims to define those elements of the relational
  theory of database\nmanagement that Haskell can accommodate, thus enabling Haskell
  (or more\nprecisely GHC) in its own right as a DBMS with first-class support for
  those\nparts of the relational model. It does not qualify as a proper RDBMS since
  it\nas-is only defines the relational algebra, base relational variables and\nrelational
  assignment. It does not define the relational calculus, views,\nconstraints and
  transactions (beyond the fundamental requirement that the tuples\nof relations are
  to be unique), certain operators like relation valued aggregate\noperators, nor
  a few minor or even deprecated operators such as DIVIDE. The\nimplemented parts
  are decently complete even if there are major implementation\nshortcomings that
  prevent this from being practically usable as an actual DBMS.\n\nI refer to it as
  _first-class_ since the types of the relational model are\nfirst-class types to
  Haskell, and the Haskell type system is able to induce the\ntype resulting of relational
  expressions (for instance that a natural join of\ntwo relations results in a relation
  with a heading that is the setwise union of\nthe headings of the original relations).\n\nAs
  such it isn't as much just an implementation of the relational model built\nusing
  Haskell (the way, say, PostgreSQL is an implementation of SQL using C), as\na Haskell
  library that accommodates a subset of the relational model (unlike\nPostgreSQL,
  which doesn't turn C into an RDBMS), where GHCi is employed as a\ndatabase terminal
  front-end.\n\n\nModel\n-----\n\nHaskRel is based on the relational model of database
  management, as defined by\nChris Date and Hugh Darwen today. For an understanding
  of the foundation HaskRel\nbuilds on see for instance\n[SQL and Relational Theory,
  2nd ed.](http://shop.oreilly.com/product/0636920022879.do),\nwhich has been the
  principal guide in this endeavor (I have plenty of SQL in my\nbackground so a book
  on SQL and the relational model has been a good\nintroduction to the latter). See
  also\n[The Third Manifesto (TTM)](http://www.dcs.warwick.ac.uk/~hugh/TTM/TTM-2013-02-07.pdf),\nand
  the additional material on <http://www.thethirdmanifesto.com/> (this might\nbe better
  to start with for those mathematically inclined but not steeped in\nSQL). Regarding
  The Third Manifesto it is important to note that all parts of\nTTM that overlap
  with something preexisting in Haskell or which Haskell cannot\nsupport have been
  disregarded when implementing HaskRel (it's about determining\nwhere we stand, after
  all).\n\nHaskRel is not based on SQL, there is no support for anything that it defines\nbeyond
  what the relational model does, nor plans for that. Tutorial D has been\nthe reference
  when implementing the functions of the relational algebra,\nalthough HaskRel does
  not satisfy the criteria of D. For a project of this kind\nit is sensible to follow
  developed theory as it stands rather than an industry\nstandard that deviates from
  it. More specifically, HaskRel is intended as an\nexploration of the possibilities
  to directly employ a general purpose\nprogramming language and its associated REPL
  as a relational database management\nsystem, or even as a bit of an academic exercise,
  and a great deal of SQL is not\nrelevant towards this end. (SQL defines for instance
  its own types, while\nHaskRel is explicitly intended to build upon Haskell's, and
  SQL's type system is\nweaker than Haskell's, in that it employs a wide range of
  coercions between\ntypes).\n\nFeatures and aspects of SQL that go beyond or deviate
  from relational theory are\nby and large irrelevant for the purpose of HaskRel,
  and may even overlap or\nconflict with Haskell idioms that are more relevant to
  adhere to for a \"make an\nRDBMS out of a general purpose programming language\"
  project. (Parts of Tutorial\nD also overlap, such as the `THE_` operator and selectors
  vs. show and read, but\nall in all a fraction of what SQL does.) Even if there were
  plans to go beyond\nthis and support SQL it would be a good first step to first
  support the\nfundamentals of the relational model both as _completely_ as it is
  reasonable to\ndo, and to do so _properly_.\n\nIn addition to naming certain other
  aspects of Tutorial D has been adopted, such\nas argument order. Such aspects may
  be changed in the future if HaskRel is found\nto be solid enough to stand on its
  own, particularly if there are ways to\nexpress this that are more idiomatic vis-a-vis
  Haskell (Tutorial D is, after\nall, not a definition of the relational model, but
  a vehicle for understanding\nit).\n\nOf the shortcomings of model that are mentioned
  above the relational calculus,\ndatabase constraints, and transactions would be
  possible to add in a reasonably\ncomplete manner (I hope I am able to work on this).
  Views would be the most\ndifficult, as far as I able to tell it is not possible
  to properly implement\nthis fully within Haskell, although I don't know if some
  part of it can\nbe. (This is something SQL products have had difficulties with,
  after all, and\nan area where the SQL standard is obtuse.) One further particular
  issue is that\ndata definition is performed by writing, compiling and loading Haskell,
  which is\nvery static compared to DDL in a proper DBMS.\n\n\nImplementation\n--------------\n\nHaskRel
  is developed and tested with GHC 7.10.2. It builds upon HList (at least\nversion
  0.4.0.0). Separately from this library there is also an optional variant\nthat builds
  on TIPs instead of records, which additionally relies on Lens\n(tested with version
  4.12.3).\n\nThere are many missing implementation level features that database products
  rely\non, enough so that HaskRel neither is nor will be usable as a production system,\neven
  if the shortcomings mentioned regarding the model was in place. Query\noptimization
  and indexes are the major ones, just for starters, which would\nrequire a monumental
  effort that there are no plans for. There is also the issue\nthat even slightly
  complex queries have compile times running into several\nseconds. HaskRel also builds
  on Data.Set to manage relation bodies, although\nthis is too limited to support
  a practically usable RDBMS, at least by itself.\n\nIn any case, HaskRel is very,
  very far from being a usable database management\nsystem, and there is as such no
  plan to bring it there, but I hope it's useful\nfrom an academic perspective.\n\n\nTrying
  it out\n=============\n\nA Haskell version of the ubiquitous suppliers-and-parts
  database is included as\na [sample database](examples/SuppliersPartsDB/), with GHC
  installed this can be\nloaded by running suppliersPartsDB.sh in examples from the
  command line. This\nloads [`SuppliersPartsExample.hs`](examples/SuppliersPartsExample.hs),
  which\ncontains Haskell renditions of Tutorial D expressions used as examples in
  SQL\nand Relational Theory, 2nd ed chapters 6 and 7. In the documentation see\nparticularly\n[`Database.HaskRel.Relational.Expression`](http://hackage.haskell.org/package/HaskRel/docs/Database-HaskRel-Relational-Expression.html),\nwhich
  \"pulls together\" both the algebra and assignment functions and generalizes\nthem
  to operate as they should in a DBMS (with caveats), on both base variables\nand
  values.\n\nAlternatively, `cabal repl` will start a GHCi session with the required
  modules\nloaded, although one will have to either load a file with definitions,
  or define\nsome elements to play around with. In the example below most everything
  is\nad-hoc, predefining a few values would make certain expressions look less\nmessy.
  Here are what relation constants look like:\n\n    *Database.HaskRel.RDBMS> let
  foo = relation' [( 10, \"foo\" ),( 20, \"bar\" ) ] :: Relation '[Attr \"asdf\" Int,
  Attr \"qwer\" String]\n    *Database.HaskRel.RDBMS> let bar = relation' [( 10, \"one\"
  ),( 30, \"two\" ) ] :: Relation '[Attr \"asdf\" Int, Attr \"zxcv\" String]\n    *Database.HaskRel.RDBMS>
  pt foo\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ qwer :: String
  │\n    ╞═════════════╪════════════════╡\n    │ 10          │ foo            │\n
  \   │ 20          │ bar            │\n    └─────────────┴────────────────┘\n    *Database.HaskRel.RDBMS>
  pt bar\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ zxcv :: String
  │\n    ╞═════════════╪════════════════╡\n    │ 10          │ one            │\n
  \   │ 30          │ two            │\n    └─────────────┴────────────────┘\n    *Database.HaskRel.RDBMS>
  pt$ foo `naturalJoin` bar\n    ┌─────────────┬────────────────┬────────────────┐\n
  \   │ asdf :: Int │ qwer :: String │ zxcv :: String │\n    ╞═════════════╪════════════════╪════════════════╡\n
  \   │ 10          │ foo            │ one            │\n    └─────────────┴────────────────┴────────────────┘\n\n(Note
  that certain operating systems and browsers have difficulties displaying\nthe horizontal
  lines of tables, either single or double. On OS X Firefox has\nworked better than
  Chrome.)\n\nAs advertised, Haskell infers the type of relational expressions (mind
  the type\nsynonyms though):\n\n    *Database.HaskRel.RDBMS> :t foo\n    foo :: Relation
  '[Attr \"asdf\" Int, Attr \"qwer\" String]\n    *Database.HaskRel.RDBMS> :t bar\n
  \   bar :: Relation '[Attr \"asdf\" Int, Attr \"zxcv\" String]\n    *Database.HaskRel.RDBMS>
  :t (foo `naturalJoin` bar)\n    (foo `nJoin` bar)\n      :: containers-0.5.6.2:Data.Set.Base.Set\n
  \          (RTuple\n              '[Tagged \"asdf\" Int, Tagged \"qwer\" String,
  Tagged \"zxcv\" [Char]])\n\nAd-hoc relvars can be defined thusly:\n\n    *Database.HaskRel.RDBMS>
  let baz = Relvar \"baz.rv\" :: Relvar '[Attr \"asdf\" Int, Attr \"qwer\" String]\n
  \   *Database.HaskRel.RDBMS> assign baz (empty :: Relation '[Attr \"asdf\" Int,
  Attr \"qwer\" String] )\n    Value assigned to baz.rv\n\nSee [Definition.hs](examples/SuppliersPartsDB/Definition.hs)
  of the\nSuppliersPartsDB for a way to do this properly.\n\n`assign` against a newly
  defined relvar initializes it in the file system, and\nwill create a file relative
  to the directory the interpreter is run from.\n\n    *Database.HaskRel.RDBMS> pt
  baz\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ qwer :: String │\n
  \   ╞═════════════╪════════════════╡\n    └─────────────┴────────────────┘\n    *Database.HaskRel.RDBMS>
  insert baz foo\n    Inserted 2 of 2 tuples into baz.rv\n    *Database.HaskRel.RDBMS>
  pt baz\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ qwer :: String
  │\n    ╞═════════════╪════════════════╡\n    │ 10          │ foo            │\n
  \   │ 20          │ bar            │\n    └─────────────┴────────────────┘\n    *Database.HaskRel.RDBMS>
  insert baz ( relation [rTuple ((Label::Label \"asdf\") .=. 30, (Label::Label \"qwer\")
  .=. \"frotz\")] )\n    Inserted 1 of 1 tuples into baz.rv\n    *Database.HaskRel.RDBMS>
  pt baz\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ qwer :: String
  │\n    ╞═════════════╪════════════════╡\n    │ 10          │ foo            │\n
  \   │ 20          │ bar            │\n    │ 30          │ frotz          │\n    └─────────────┴────────────────┘\n\nConcise
  expression of updates require a set of language extensions (this in addition to
  DataKinds, which this module enables by default):\n\n    *Database.HaskRel.RDBMS>
  :set -XQuasiQuotes -XKindSignatures -XViewPatterns\n    *Database.HaskRel.RDBMS>
  update baz (\\ [pun|asdf|] -> asdf > 15 ) (\\ [pun|qwer|] -> case (qwer ++ \"-new\")
  of (qwer) -> [pun|qwer|])\n    Updated 2 of 3 tuples in baz.rv\n    *Database.HaskRel.RDBMS>
  pt baz\n    ┌─────────────┬────────────────┐\n    │ asdf :: Int │ qwer :: String
  │\n    ╞═════════════╪════════════════╡\n    │ 10          │ foo            │\n
  \   │ 20          │ bar-new        │\n    │ 30          │ frotz-new      │\n    └─────────────┴────────────────┘\n\nAll
  functions of the relational algebra that HaskRel implement work against both\nrelation
  constants and relvars, as do the print functions `p` and `pt`:\n\n    *Database.HaskRel.RDBMS>
  p$ baz `nJoin` bar\n    ┌──────┬───────────┬──────┐\n    │ asdf │ qwer      │ zxcv
  │\n    ╞══════╪═══════════╪══════╡\n    │ 10   │ foo       │ one  │\n    │ 30   │
  frotz-new │ two  │\n    └──────┴───────────┴──────┘\n\n\nContributions\n-------------\n\nWhile
  contributions to HaskRel itself would be great, the limiting factors for\nHaskRel
  to develop further, let alone be usable, is in its foundations. The most\ninteresting
  work that could be done with HaskRel is to go through it and find\npoints where
  Haskell or its ecosystem could be improved to the benefit of both\nHaskRel and other
  projects, and focus development efforts on that. The two most\nimportant libraries
  that HaskRel builds on are HList and Data.Set; efforts\ntowards improving them or
  arguments towards replacing them would be beneficial.\n\nMaking HaskRel usable for
  practical purposes is not on the horizon, but it may\nbe possible to improve it
  further towards being a demonstrator of the relational\nmodel. A list of \"things
  Haskell/GHC needs in order to qualify as a first class\nRDBMS\" would also be a
  fun list to have, even if there isn't a chance of it\nhappening.\n"
license-name: GPL-2.0-only
