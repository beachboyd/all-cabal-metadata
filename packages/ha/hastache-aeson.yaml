homepage: https://github.com/proger/hastache-aeson
changelog-type: ''
hash: a36aeadacf69a4d36d9d3396120ca532ade497aea2d7383a5b0029b838647cd1
test-bench-deps: {}
maintainer: Vladimir Kirillov <proger@hackndev.com>
synopsis: render hastache templates using aeson values
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.6 && <5'
  unordered-containers: ! '>=0.2'
  text: ! '>=0.11'
  hastache: ! '>=0.5'
  containers: ! '>=0.5'
  scientific: ! '>=0.2'
  aeson: ! '>=0.7.0.4'
  vector: ! '>=0.10'
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Vladimir Kirillov <proger@hackndev.com>
latest: 0.1.1.0
description-type: markdown
description: ! "hastache-aeson\n==============\n\n[![Build Status](https://travis-ci.org/proger/hastache-aeson.svg?branch=master)](https://travis-ci.org/proger/hastache-aeson)\n\n*
  Lets you pass [aeson](http://hackage.haskell.org/package/aeson) `Value` as `MuContext`
  to [hastache](http://hackage.haskell.org/package/hastache)\n* Since [yaml](http://hackage.haskell.org/package/yaml)
  is API-compatible to `aeson`, you can also render `yaml` `Value`s.\n\nExample\n-------\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport qualified Data.ByteString.Char8 as BS\nimport
  qualified Data.ByteString.Lazy.Char8 as LBS\n\nimport Control.Monad\nimport Data.Maybe
  (fromJust)\n\nimport Data.Yaml\nimport Text.Hastache\nimport Text.Hastache.Aeson
  (jsonValueContext)\n\nevent = BS.readFile \"event.yaml\"\ntemplate = BS.readFile
  \"index.mustache\"\n\nrender template value = hastacheStr defaultConfig template
  (jsonValueContext value)\n\nmain = do\n    value <- liftM (fromJust . decode) event
  :: IO Value\n    template' <- template\n    render template' value >>= LBS.putStrLn\n```\n\n\nContributors\n------------\n\n-
  Viktar Basharymau\n- Vladimir Kirillov\n"
license-name: BSD-3-Clause
