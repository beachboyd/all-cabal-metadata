homepage: https://github.com/jberryman/hashabler
changelog-type: markdown
hash: 7b7a462c901d126eb71bd1124882d9e18f4287b45a0a9d183defd2fb9d36985e
test-bench-deps: {}
maintainer: brandon.m.simmons@gmail.com
synopsis: Principled, portable & extensible hashing of data and types, including an
  implementation of the FNV-1a and SipHash algorithms.
changelog: ! "2.0.0\n---\n* Use `decodeFloat` for Float and Double, for sanity and
  consistency with\n  ghcjs. Hash values for these typed have changed.\n* Fix integer-gmp
  flag and support ghcjs (thanks to roelvandijk!)\n\n\n1.3.0\n---\n* Performance improvements\n*
  Implement a faster siphash-1-3\n\n1.2.1\n---\n* Eq, Read, Show for SipKey\n\n1.2\n---\n*
  SipKey is now a new data type with unboxed fields, instead of tuple\n* export a
  new mixType helper for defining StableHashable instances\n\n1.1\n---\n* Parameterize
  `Hash32/64/128` types by the type of their hashed source data,\n  to enforce legitimate
  equality comparisons of hashes.\n* Add `StableHashable` for distinguishing types
  with respect to their hashes\n  across platforms and programs.\n\n1.0\n---\n* Added
  a `mix64` method, in use in, `Word/Int64` `ByteString` types and `P.ByteArray`\n*
  `Hash` renamed `HashState` and roll clarified in docs\n* `instance Hashable` of
  `Float` and `Double` now use `mix32` and `mix64` respectively.\n* Implemented 64-bit
  and 128-bit siphash\n* Instances up to 15-tuples. Now web scale!\n\n0.1.0.2\n---\n*
  (initial release)\n\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <4.10'
  text: ! '>=1.1.1.3'
  array: ! '>=0.4'
  integer-gmp: ! '>=0.2'
  ghc-prim: -any
  template-haskell: -any
  primitive: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- 1.3.0
- 2.0.0
author: Brandon Simmons
latest: 2.0.0
description-type: haddock
description: ! 'This package is a rewrite of the @hashable@ library by Milan Straka
  and

  Johan Tibell, having the following goals:


  - Extensibility; it should be easy to implement a new hashing algorithm on

  any @Hashable@ type; in this package we provide SipHash and FNV-1a.


  - Honest hashing of values, and principled hashing of algebraic data types

  (see e.g. hashable issues #74 and #30)


  - Cross-platform consistent hash values, with a versioning guarantee. Where

  possible we ensure morally identical data hashes to indentical values

  regardless of processor word size and endianness.


  - Make implementing identical hash routines in other languages as painless

  as possible. In addition to SipHash, we provide an implementation of a

  simple hashing algorithm (FNV-1a) and make an effort to define Hashable

  instances in a way that is well-documented and sensible, so that e.g. one

  can easily implement a string hashing routine in JavaScript that will

  match the way we hash strings here.


  /Versioning/: Except for instances where we specifically note that we make

  no promise of consistency, changes to hash values (and consequently changes

  to @StableHashable@ values, where applicable) entail a major version number

  bump.'
license-name: BSD-3-Clause
