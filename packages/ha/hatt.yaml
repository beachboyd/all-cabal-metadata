homepage: http://extralogical.net/projects/hatt
changelog-type: text
hash: 27ceb5f0c65df134db783a72bff207eab4450c2fe39692cbb5d02373e61a55d7
test-bench-deps:
  test-framework: ! '>=0.4.1'
  base: ! '>=4 && <5'
  test-framework-quickcheck2: -any
  hatt: -any
maintainer: benedict@eastaugh.net
synopsis: A truth table generator for classical propositional logic.
changelog: ! "Hatt changelog\n==============\n\nVersion 1.5.0\n-------------\n\n*
  Breaking API change: variables are now represented by a newtype wrapper `Var`\n
  \ around `Char`s, rather than just a `String`. This made it easier to write a\n
  \ good QuickCheck instance for this type.\n* Added QuickCheck instances for the
  `Expr` and `Var` datatypes.\n* Added a module to perform conversions of expressions
  to various normal forms,\n  including negation normal form, conjunctive normal form
  and disjunctive normal\n  form. Its use is supported in interactive mode by prefixing
  an expression with\n  \"nnf\", \"cnf\" or \"dnf\". Tests for the module are included
  and can be run with\n  `cabal test`. The module is exported as `Data.Logic.Propositional.NormalForms`\n
  \ and must be imported separately.\n* The `Data.Logic.Propositional.Tables` module
  is now exported by the library.\n  Its `truthTable` and `truthTableP` functions
  are still exported by the main\n  `Data.Logic.Propositional` module (as well as
  by the newly exposed module) for\n  backwards compatibility.\n* The `values` function
  is now exported.\n\nVersion 1.4.0\n-------------\n\n* Make the parser slightly more
  liberal: unparenthesised expressions with a\n  binary connective as their primary
  connective such as \"a | b\" are now parsed\n  correctly, as are expressions with
  superfluous spaces such as \" ( c -> ~ d )\".\n\nVersion 1.3.1\n-------------\n\n*
  Added command history and better text input handling with Haskeline.\n\nVersion
  1.3.0\n-------------\n\n* Add the `--coloured` command-line flag and `colour` command
  in interactive\n  mode to make truth value colouring optional.\n* Relax containers
  dependency to >= 0.3 && < 0.5.\n\nVersion 1.2.1\n-------------\n\n* Use truth table
  and parsing code to produce the example console session in\n  the interactive mode
  help text.\n\nVersion 1.2.0\n-------------\n\n* Truth values are coloured green
  (T) and red (F) when printed.\n\nVersion 1.1.1\n-------------\n\n* Correct semantics
  for interpreting conditionals. Fixes an operator precedence\n  bug in the previous
  implementation.\n\nVersion 1.1\n-----------\n\n* Allow variables to be lower case
  ASCII letters as well as upper case.\n\nVersion 1.0\n-----------\n\n* Pretty-printing
  can now be enabled and disabled when in the interactive mode\n  by using the `pretty`
  command.\n\nVersion 0.3\n-----------\n\n* Added an interactive mode.\n* Made interactive
  mode the default: it's only not entered if the `--evaluate`\n  flag is passed and
  the `--interactive` flag is not.\n\nVersion 0.2\n-----------\n\n* Added the `--pretty`
  option to pretty-print expressions.\n* The `--evaluate` option now prints ASCII
  truth tables by default.\n* Added `truthTableP` function to allow configurable expression
  printing.\n* The `variables` function now returns a list of unique elements.\n*
  Dependency `base` loosened to >= 4 && < 5 so it will build with GHC 7.\n* Exposed
  and other modules now correctly differentiated in cabal file.\n\nVersion 0.1\n-----------\n\n*
  Initial release.\n"
basic-deps:
  ansi-wl-pprint: ! '>=0.6 && <0.7'
  haskeline: ! '>=0.6'
  base: ==4.*
  parsec: ! '>=2.1 && <3.2'
  containers: ! '>=0.3 && <0.6'
  cmdargs: ! '>=0.7'
  QuickCheck: ! '>=2.4'
  hatt: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '1.0'
- '1.1'
- 1.1.1
- 1.2.0
- 1.2.1
- 1.3.0
- 1.3.1
- 1.4.0
- 1.4.0.1
- 1.4.0.2
- 1.5.0.0
- 1.5.0.2
- 1.5.0.3
author: Benedict Eastaugh
latest: 1.5.0.3
description-type: markdown
description: ! "Hatt\n====\n\n[Hatt] is a command-line program which prints truth
  tables for expressions in\nclassical propositional logic, and a library allowing
  its parser, evaluator and\ntruth table generator to be used in other programs.\n\n\nInstallation\n------------\n\nHatt
  is available from [Hackage]. To install it with `cabal-install`, update\nyour list
  of known packages and then install Hatt.\n\n    $ cabal update\n    $ cabal install
  hatt\n\nTo build it from source, `cd` into the directory containing the Hatt source\nfiles,
  including `hatt.cabal`, and run `cabal install`.\n\n\nValid Hatt expressions\n----------------------\n\nThe
  following are all valid expression forms which can be parsed by Hatt, where\nϕ and
  ψ are metalinguistic variables standing in for any valid expression.\n\n* Variables:
  `P`, `Q`, `a`, `b` etc.---basically anything in the character\n  class `[a-zA-Z]`\n*
  Negation: `~ϕ`\n* Conjunction: `(ϕ & ψ)`\n* Disjunction: `(ϕ | ψ)`\n* Conditional:
  `(ϕ -> ψ)`\n* Biconditional: `(ϕ <-> ψ)`\n\nParentheses are not required around
  top-level formulae, regardless of whether\nthe primary connective is binary. For
  example, the expression `a | b` is valid\nand will be parsed correctly, as would
  `p <-> (q & ~r)`, although the\nparenthesised versions of both these expressions
  (`(a | b)` and\n`(p <-> (q & ~r))`) are also fine.\n\nThere is currently no support
  for operator precedence, so nested expressions\nmust be parenthesised correctly
  for the parser to make sense of them.\n\n\nUsing the `hatt` command-line program\n-------------------------------------\n\nThe
  default mode is interactive: you start the program, enter expressions at\nthe prompt,
  and their truth tables are printed. Here's an example session.\n\n    $ hatt\n    Entering
  interactive mode. Type `help` if you don't know what to do!\n    > A | B\n    A
  B | (A | B)\n    -------------\n    T T | T\n    T F | T\n    F T | T\n    F F |
  F\n    > p -> (q & ~r)\n    p q r | (p -> (q & ~r))\n    -----------------------\n
  \   T T T | F\n    T T F | T\n    T F T | F\n    T F F | F\n    F T T | T\n    F
  T F | T\n    F F T | T\n    F F F | T\n    > e <-> f\n    e f | (e <-> f)\n    ---------------\n
  \   T T | T\n    T F | F\n    F T | F\n    F F | T\n    > exit\n\nThe `--evaluate`
  flag lets you pass a single expression to be evaluated\ndirectly.\n\n    $ hatt
  --evaluate=\"P -> (Q | ~R)\"\n    P Q R | (P -> (Q | ~R))\n    -----------------------\n
  \   T T T | F\n    T T F | F\n    T F T | F\n    T F F | F\n    F T T | F\n    F
  T F | F\n    F F T | T\n    F F F | F\n\nBy default, `hatt` will print ASCII representations
  of expressions. If you have\na Unicode-capable terminal, try passing the `--pretty`
  option to pretty-print\nexpressions using the the more common logical symbols.\n\n
  \   $ hatt --evaluate=\"P -> (Q | ~R)\" --pretty\n    P Q R | (P → (Q ∨ ¬R))\n    ----------------------\n
  \   T T T | F\n    T T F | F\n    T F T | F\n    T F F | F\n    F T T | F\n    F
  T F | F\n    F F T | T\n    F F F | F\n\nYou can enable pretty-printing while in
  interactive mode by using the `pretty`\ncommand.\n\nIf you pass the `--coloured`
  flag, `hatt` will colour the truth values in the\ntables which it prints: green
  for true, red for false. You can enable colouring\nduring interactive mode by using
  the `colour` command.\n\nYou can print out the normal forms of expressions too,
  by prefixing an\nexpression with `nnf`, `dnf` or `cnf`.\n\n    $ hatt --pretty\n
  \   > nnf ~(P -> (Q & R))\n    (P ∧ (¬Q ∨ ¬R))\n\nThe three supported normal forms
  are [negation normal form], [conjunctive normal\nform] and [disjunctive normal form].\n\n\nUsing
  Hatt in other programs\n----------------------------\n\nHatt exposes the `Data.Logic.Propositional`
  module, which provides a simple API\nfor parsing, evaluating, and printing truth
  tables, and for converting logical\nexpressions into normal forms.\n\n\n[Hatt]:
  \   http://extralogical.net/projects/hatt\n[Hackage]: http://hackage.haskell.org/\n[negation
  normal form]: http://en.wikipedia.org/wiki/Negation_normal_form\n[conjunctive normal
  form]: http://en.wikipedia.org/wiki/Conjunctive_normal_form\n[disjunctive normal
  form]: http://en.wikipedia.org/wiki/Disjunctive_normal_form\n"
license-name: BSD-3-Clause
