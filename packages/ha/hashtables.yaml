homepage: http://github.com/gregorycollins/hashtables
changelog-type: markdown
hash: 9fe11efe645ad4358fefaa9003f05a61daf95d63220ff93c91a3bf1a519b9271
test-bench-deps: {}
maintainer: greg@gregorycollins.net
synopsis: Mutable hash tables in the ST monad
changelog: ! "# Hashtables changelog\n\n## 1.2.2.1\n\n  - Adjusted base lower bound
  (it was incorrect), bumped some testsuite +\n    benchmark bounds.\n\n## 1.2.2.0\n
  \ - Bumped vector bounds.\n\n  - Added `lookupIndex` and `nextByIndex` functions.\n
  \ - Add `mutate` function.\n\nThanks to contributors:\n\n  - Vykintas BaltruÅ¡aitis.\n
  \ - Franklin Chen\n  - Iavor Diatchki\n  - Eric Mertins\n\n## 1.2.1.1\n  - Bumped
  vector bounds.\n\n## 1.2.1.0\n\n  - Fixed an FFI import typo bug\n    (https://github.com/gregorycollins/hashtables/pull/27),
  thanks to Thijs\n    Alkemade for the fix.\n\n## 1.2.0.2\n\n  - Fixed serious bug
  (https://github.com/gregorycollins/hashtables/issues/24)\n    in basic hash table
  making it impossible to reliably store more than 64k\n    elements (after shortening
  the hash code arrays to 16 bits I neglected to\n    realize that I was storing item
  counts using the same array type).\n\n## 1.2.0.1\n\n  - Fixed bug in C code re:
  clang interpreting \"inline\" strictly according to\n    (insane) C99 semantics:
  http://clang.llvm.org/compatibility.html#inline\n\n  - Fixed a compile bug affecting
  versions of base older than 4.4.\n\n  - Changed int type from Int to Word in CheapPseudoRandomBitStream
  to fix an\n    integer overflow warning.\n\n## 1.2.0.0\n\n### Switch to smaller
  hash codes to go faster and save space.\n\nBefore, in the basic and cuckoo hash
  tables, we were storing full\nmachine-word-sized hash codes in the table so that
  we could quickly search a\nwhole cache line for a key (or a combination of keys)
  without branching.\n\nIt turns out that a full machine word is not really necessary
  for this\napplication; switching to a 16-bit key will very slightly increase the
  number\nof hash collisions within buckets (meaning that we'll compare more keys),
  but\nwill pay big dividends in terms of:\n\n  - reduced wastage of RAM\n\n  - searching
  more keys at once, allowing buckets to grow bigger\n\n  - more cache hits on the
  hash codes array.\n\n### Other\n\n  - Dependency bumps\n\n  - Fix definitions of
  forwardSearch2 and forwardSearch3 in PORTABLE mode (also\n    used on Windows) to
  match C implementations.\n\n## 1.1.2.1\n  - Fixes for GHC 7.8 compatibility.\n\n##
  1.1.2.0\n  - Bump allowable versions of hashable, primitive, and vector, blacklisting\n
  \   some bad hashable versions\n\n  - Add specialize pragmas for fromListWithSizeHint\n\n##
  1.1.0.2\n  - Use CPP to allow compilation against base 4.2/4.3.\n\n## 1.1.0.1\n
  \ - Re-added SPECIALIZE pragmas that were previously removed.\n\n## 1.1.0.0\n  -
  Add 'fromListWithSizeHint'\n  - 'fromList': don't be strict in the list argument\n\n##
  1.0.1.8\nBump vector and primitive dependencies.\n\n## 1.0.1.7\nFix bug in C FFI
  code (not correctly promoting CInt to Int).\n\n## 1.0.1.6\nFix for benchmark suite
  .cabal file.\n\n## 1.0.1.5\nAdded benchmark suite.\n\n## 1.0.1.4\nBump test-framework
  dependency.\n\n## 1.0.1.3\nBump testsuite dependencies.\n\n## 1.0.1.2\nFix testsuite
  on Windows.\n\n## 1.0.1.1\nBuild fix for Windows.\n\n## 1.0.1.0\n\nBugfix for http://github.com/gregorycollins/hashtables/issues/1
  (Basic.lookup\nloops).\n"
basic-deps:
  base: ! '>=4.8 && <5'
  ghc-prim: -any
  hashable: ! '>=1.1 && <1.2 || >=1.2.1 && <1.3'
  primitive: -any
  vector: ! '>=0.7 && <0.13'
all-versions:
- '1.0.0.0'
- '1.0.1.0'
- '1.0.1.1'
- '1.0.1.2'
- '1.0.1.3'
- '1.0.1.4'
- '1.0.1.5'
- '1.0.1.6'
- '1.0.1.7'
- '1.0.1.8'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.2.0'
- '1.1.2.1'
- '1.2.0.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.1.0'
- '1.2.1.1'
- '1.2.2.0'
- '1.2.2.1'
author: Gregory Collins
latest: '1.2.2.1'
description-type: markdown
description: ! "This package provides a couple of different implementations of mutable
  hash\ntables in the ST monad, as well as a typeclass abstracting their common\noperations,
  and a set of wrappers to use the hash tables in the IO monad.\n\n**Quick start**:
  documentation for the hash table operations is provided in the\n`Data.HashTable.Class`
  module, and the IO wrappers are located in the\n`Data.HashTable.IO` module.\n\nThis
  package currently contains three hash table implementations:\n\n  1. `Data.HashTable.ST.Basic`
  contains a basic open-addressing hash table\n     using linear probing as the collision
  strategy. On a pure speed basis it\n     should currently be the fastest available
  Haskell hash table\n     implementation for lookups, although it has a higher memory
  overhead\n     than the other tables and can suffer from long delays when the table
  is\n     resized because all of the elements in the table need to be rehashed.\n\n
  \ 2. `Data.HashTable.ST.Cuckoo` contains an implementation of \"cuckoo hashing\"\n
  \    as introduced by Pagh and Rodler in 2001 (see\n     [http://en.wikipedia.org/wiki/Cuckoo\\_hashing](http://en.wikipedia.org/wiki/Cuckoo_hashing)).\n
  \    Cuckoo hashing has worst-case /O(1)/ lookups and can reach a high \"load\n
  \    factor\", in which the table can perform acceptably well even when more\n     than
  90% full. Randomized testing shows this implementation of cuckoo\n     hashing to
  be slightly faster on insert and slightly slower on lookup than\n     `Data.Hashtable.ST.Basic`,
  while being more space efficient by about a\n     half-word per key-value mapping.
  Cuckoo hashing, like the basic hash table\n     implementation using linear probing,
  can suffer from long delays when the\n     table is resized.\n\n  3. `Data.HashTable.ST.Linear`
  contains a linear hash table (see\n     [http://en.wikipedia.org/wiki/Linear\\_hashing](http://en.wikipedia.org/wiki/Linear_hashing)),\n
  \    which trades some insert and lookup performance for higher space\n     efficiency
  and much shorter delays when expanding the table. In most\n     cases, benchmarks
  show this table to be currently slightly faster than\n     `Data.HashTable` from
  the Haskell base library.\n\nIt is recommended to create a concrete type alias in
  your code when using this\npackage, i.e.:\n\n    import qualified Data.HashTable.IO
  as H\n    \n    type HashTable k v = H.BasicHashTable k v\n\n    foo :: IO (HashTable
  Int Int)\n    foo = do\n        ht <- H.new\n        H.insert ht 1 1\n        return
  ht\n\nFirstly, this makes it easy to switch to a different hash table implementation,\nand
  secondly, using a concrete type rather than leaving your functions abstract\nin
  the HashTable class should allow GHC to optimize away the typeclass\ndictionaries.\n\nThis
  package accepts a couple of different cabal flags:\n\n  * `unsafe-tricks`, default
  **on**. If this flag is enabled, we use some\n    unsafe GHC-specific tricks to
  save indirections (namely `unsafeCoerce#` and\n    `reallyUnsafePtrEquality#`. These
  techniques rely on assumptions about the\n    behaviour of the GHC runtime system
  and, although they've been tested and\n    should be safe under normal conditions,
  are slightly dangerous. Caveat\n    emptor. In particular, these techniques are
  incompatible with HPC code\n    coverage reports.\n\n  * `sse41`, default /off/.
  If this flag is enabled, we use some SSE 4.1\n    instructions (see\n    [http://en.wikipedia.org/wiki/SSE4](http://en.wikipedia.org/wiki/SSE4),\n
  \   first available on Intel Core 2 processors) to speed up cache-line searches\n
  \   for cuckoo hashing.\n\n  * `bounds-checking`, default /off/. If this flag is
  enabled, array accesses\n    are bounds-checked.\n\n  * `debug`, default /off/.
  If turned on, we'll rudely spew debug output to\n    stdout.\n\n  * `portable`,
  default /off/. If this flag is enabled, we use only pure\n    Haskell code and try
  not to use unportable GHC extensions. Turning this\n    flag on forces `unsafe-tricks`
  and `sse41` *OFF*.\n"
license-name: BSD3
