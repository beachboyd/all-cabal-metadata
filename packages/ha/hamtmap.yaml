homepage: https://github.com/exclipy/pdata
changelog-type: ''
hash: bbdcebe83e12f704a0b6611b1a9e7aa22db20023c6e3d44505617410f53733b6
test-bench-deps: {}
maintainer: Kevin Wu Won <exclipy@gmail.com>
synopsis: A purely functional and persistent hash map
changelog: ''
basic-deps:
  base: ! '>=4 && <4.5'
  array: <0.5
  hashable: ! '>=1.0 && <1.3'
  deepseq: ! '>=1.1 && <1.5'
all-versions:
- '0.2'
- '0.3'
author: Kevin Wu Won
latest: '0.3'
description-type: markdown
description: ! "Hash Array Mapped Tries\n=======================\n\nOne of the prominent
  features of the [Clojure][1] language are a set of\n[immutable data structures][2]
  with efficient manipulation operations.  One of\nthe most innovative and important
  is the persistent hash map based on the\n*hash array mapped trie* (HAMT).\n\nThis
  project is a port of this structure to Haskell, as Data.HamtMap.  The\ninterface
  has been kept as consistent as possible with Data.Map.\n\n[1]: http://clojure.org/\n[2]:
  http://clojure.org/datatypes\n\n\nBasic usage\n-----------\nHere's a demo of what
  you can do with a HamtMap:\n\n    ghci> :m + Data.HamtMap\n    ghci> empty Data.HashTable.hashString\n
  \           -- an empty HamtMap (requires a key hash function)\n    fromList hashFn
  []\n\n    ghci> insert \"foo\" 1 it\n    fromList hashFn [(\"foo\",1)]\n\n    ghci>
  insert \"bar\" 42 it\n    fromList hashFn [(\"foo\",1),(\"bar\",42)]\n\n    ghci>
  insert \"qux\" 123 it\n    fromList hashFn [(\"qux\",12),(\"foo\",1),(\"bar\",42)]\n\n
  \   ghci> insert \"qux\" 13 it  -- inserting an existing key overwrites by default\n
  \   fromList hashFn [(\"qux\",13),(\"foo\",1),(\"bar\",42)]\n\n    ghci> let a =
  it\n    ghci> a ! \"foo\"\n    1\n\n    ghci> a ! \"baz\"  -- using (!) is unsafe\n
  \   *** Exception: array index out of range: element not in the map\n\n    ghci>
  Data.HamtMap.lookup \"bar\" a\n    Just 42\n\n    ghci> Data.HamtMap.lookup \"baz\"
  a  -- 'lookup' returns a safe Maybe\n    Nothing\n\n    ghci> adjust succ \"foo\"
  a  -- apply a function to a value\n    fromList hashFn [(\"qux\",13),(\"foo\",2),(\"bar\",42)]\n\n
  \   ghci> Data.HamtMap.map succ a  -- apply a function to all values\n    fromList
  hashFn [(\"qux\",14),(\"foo\",2),(\"bar\",43)]\n\n    ghci> keys a\n    [\"qux\",\"foo\",\"bar\"]\n\n
  \   ghci> elems a\n    [13,1,42]\n\n    ghci> fromList Data.HashTable.hashString
  [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n    fromList hashFn [(\"b\",2),(\"c\",3),(\"a\",1)]\n\n
  \   ghci> toList it\n    [(\"b\",2),(\"c\",3),(\"a\",1)]\n\n\nInstallation\n------------\n\nTo
  try it yourself, just do the usual:\n\n    $ runghc Setup.hs configure --user\n
  \   $ runghc Setup.hs build\n    $ runghc Setup.hs install\n\nPerformance\n-----------\n\nThe
  single-element operations for the hash map have logarithmic asymtotic\nruntime complexity.
  \ However, it is implemented as a 32-ary tree, which means it\nnever exceeds a depth
  of 7 nodes, so you can treat them as constant-time\noperations (for relatively large
  constants).\n\nHow it works\n------------\n\nI wrote this code after reading the
  following explanatory blog posts on how the\nClojure version works.  They should
  also provide a decent birds-eye overview of\nmy Haskell implementation.\n\n* [Understanding
  Clojure’s PersistentHashMap\n  ](http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/)\n*
  [Assoc and Clojure’s PersistentHashMap: part II\n  ](http://blog.higher-order.net/2010/08/16/assoc-and-clojures-persistenthashmap-part-ii/)\n\n\nTo
  do\n-----\n* Match Data.Map in completeness\n* Performance tuning\n  * Efficient
  implementations of (//), etc. based on fromList\n"
license-name: BSD-3-Clause
