homepage: http://documentup.com/haskell-suite/haskell-packages
changelog-type: markdown
hash: 31774b52ca099c5a96c75b6de57e6dd8424392cb7192ea35e4850e7c2b11220e
test-bench-deps: {}
maintainer: David Himmelstrup <lemmih@gmail.com>
synopsis: Haskell suite library for package management and integration with Cabal
changelog: ! "Changes\n=======\n\nVersion 0.4\n-----------\n\nUpdate to Cabal-1.24.\nUpdate
  to aeson-0.11.0.0.\n\nVersion 0.3\n-----------\n\nUpdate to Cabal-1.22.\n\nChange
  the format of on-disk JSON interface files.\n\nVersion 0.2.4.4\n---------------\n\nPut
  upper bound on Cabal\n\nVersion 0.2.4.3\n---------------\n\nUpdate to optparse-applicative
  0.11\n\nVersion 0.2.4.2\n---------------\n\nUpdate to optparse-applicative 0.10\n\nVersion
  0.2.4.1\n---------------\n\nFix a bug with empty CPP defines (such as `-DFOO`)\n\nVersion
  0.2.4\n-------------\n\n* Add `customMain`\n* Fix a bug where only one of multiple
  output files with the same base name but\n  different extensions would be copied
  on installation\n\nVersion 0.2.3.4\n---------------\n\nDepend on `either` instead
  of `EitherT`\n\nVersion 0.2.3.3\n---------------\n\nThe fixed version of 0.2.3.2.
  (The released tarball for 0.2.3.2 contained some\nunintended changes.)\n\nVersion
  0.2.3.2\n---------------\n\nDrop upper version bound on aeson.\n\nVersion 0.2.3.1\n---------------\n\n*
  Upgrade to optparse-applicative 0.6\n* Provide the `--help` option for subcommands\n\nVersion
  0.2.3\n-------------\n\nRelax Cabal dependency constraint to include Cabal-1.14\n\nVersion
  0.2.2\n-------------\n\nAdd mtl instances (`MonadState`, `MonadReader` etc.) for
  the `ModuleT`\ntransformer.\n\nVersion 0.2.1\n-------------\n\nDummy release to
  force rebuild on hackage (now that haskell-src-exts 1.14 is\nreleased).\n\nVersion
  0.2\n-----------\n\n* Compiler now accepts the `--package-name` argument, to specify
  the name of the\n  package being compiled. `CompileFn` is changed accordingly.\n*
  Add support for relative paths in package databases.\n"
basic-deps:
  bytestring: ! '>=0.9'
  Cabal: ==2.3.* || ==2.0.*
  base: ! '>=4.5 && <5'
  hse-cpp: ! '>=0.2'
  filepath: -any
  tagged: -any
  containers: -any
  haskell-src-exts: ! '>=1.18'
  binary: ! '>=0.8'
  mtl: ! '>=2.1'
  transformers: ! '>=0.3'
  optparse-applicative: ! '>=0.11'
  deepseq: -any
  transformers-compat: ! '>=0.3'
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
- '0.2.3.2'
- '0.2.3.3'
- '0.2.3.4'
- '0.2.4'
- '0.2.4.1'
- '0.2.4.2'
- '0.2.4.3'
- '0.2.4.4'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.6.1'
- '0.6.2'
author: Roman Cheplyaka
latest: '0.6.2'
description-type: markdown
description: ! "There are two cases when you may need haskell-packages: if you are
  writing a\nHaskell compiler (or any tool that processes Haskell source code, such
  as a\nstatic analyzer), or if you want to integrate with an existing Haskell compiler\nthat
  uses haskell-packages.\n\n## Writing a compiler\n\nIf you are writing a compiler,
  you typically want to integrate it with Cabal, to\nbe able to build ordinary Haskell
  packages.\n\nIf you go the hard way, this involves:\n\n1.  **Parsing command line
  parameters**. Sounds easy — just take a list of files to\n    compile. In reality
  you also need to handle package ids and package dbs, CPP\n    options (`-DFOO=1`),
  language extension flags (`-XRankNTypes`) etc.\n\n    To integrate with Cabal, you
  also need to tell it the list of installed\n    packages, supported languages and
  extensions etc.\n\n2.  Actual **integration with Cabal** means understanding how
  Cabal works and\n    hard-coding support for your compiler. And then getting it
  accepted and\n    waiting for the next Cabal release.\n\n    You may pretend that
  you are GHC or other compiler that is already supported\n    by Cabal. It might
  work, but often it won't, for various reasons. Also,\n    GHC's command line protocol
  is quite complex.\n\n3.  **Package management**. You need to implement a package
  db mechanism, which would\n    let you to keep track of installed packages. Then
  you'd have to implement a\n    `ghc-pkg`-like tool to manage those databases, for
  both Cabal and your users.\n\n**Or**, you can simply use this library!\n\nIt already
  has command line options parsing, Cabal support, and package\nmanagement. All you
  need to do is to provide the function to do actual\ncompilation and tell a couple
  of other things about your compiler. See\nthe `Distribution.HaskellSuite.Compiler`
  module for details.\n\n## Using other compilers\n\nSome compilers produce artifacts
  that you may want to use. A good example is the\n`hs-gen-iface` compiler from haskell-names
  which generates an _interface_ for each\nmodule — the set of all named entities
  (functions, types, classes) that are\nexported by that module. This information
  can be then used either by other\ncompilers, or by tools like IDEs.\n\nAssuming
  the compiler uses haskell-packages and exports its database type, it's\nvery easy
  to use its artifacts. See `Distribution.HaskellSuite.Packages` for\npackage resolution
  and `Distribution.HaskellSuite.Modules` for module\nresolution.\n\n## Usage\n\nFirst,
  make sure that you have cabal-install from git:\n\n    git clone git@github.com:haskell/cabal.git\n
  \   cd cabal\n    (cd Cabal && cabal install)\n    (cd cabal-install && cabal install)\n\nTo
  compile a Haskell package using a haskell-packages tool:\n\n    cabal install --haskell-suite
  -w $TOOL\n\nwhere `$TOOL` may be either a full path to the compiler, or just an
  executable\nname if it's in `$PATH`.\n\n## Maintainers\n\n[David Himmelstrup](https://github.com/Lemmih)
  is the primary maintainer.\n\n[Roman Cheplyaka](https://github.com/feuerbach) is
  the original author.\n\n[Adam Bergmark](https://github.com/bergmark) is the backup
  maintainer. Please\nget in touch with him if the primary maintainer cannot be reached.\n"
license-name: MIT
