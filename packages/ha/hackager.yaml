homepage: https://github.com/dterei/Hackager
changelog-type: markdown
hash: f59c36f28390978d9bb426b1216226d9c68f3345001c69f0ed8f50b3358bb807
test-bench-deps: {}
maintainer: David Terei <code@davidterei.com>
synopsis: Hackage testing tool
changelog: ! '# hackager change log


  ## 1.3.0.1 -- 20th November, 2015


  * Fix reported version number.


  ## 1.3.0.0 -- 17th November, 2015


  * Add ability to select packages to compile using a regular expression.

  * Change file naming convention for output files to be more informative.

  * Improve documentation.


  ## 1.2.0.1 -- 19th May, 2015


  * Fix compilation on GHC < 7.10.


  ## 1.2.0.0 -- 19th May, 2015


  * Fix package compilation when `-j` used with Cabal.

  * Add support for setting cabal flags when compiling packages.

  * General code cleaning.

  * Fix compilation on GHC 7.10.


  ## 1.0.1 -- April 23rd, 2012


  * Fix cabal description.


  ## 1.0.0 -- April 23rd, 2012


  * Support parallel building.

  * Fix code to work with latest cabal and GHC.

  * Add better option parsing and user interface.

  * Pull hackager from GHC into own repo.


'
basic-deps:
  Cabal: -any
  base: ! '>=2 && <5'
  filepath: -any
  process: -any
  containers: -any
  regex-tdfa: -any
  mtl: -any
  directory: -any
all-versions:
- 0.2.0.0
- 1.0.0
- 1.0.1
- 1.2.0.0
- 1.2.0.1
- 1.3.0.0
- 1.3.0.1
author: The GHC Team, David Terei <code@davidterei.com>
latest: 1.3.0.1
description-type: markdown
description: ! "# Hackager [![Hackage version](https://img.shields.io/hackage/v/hackager.svg?style=flat)](https://hackage.haskell.org/package/hackager)
  [![Build Status](https://img.shields.io/travis/dterei/hackager.svg?style=flat)](https://travis-ci.org/dterei/hackager)\n\nHackager
  is a tool to compile all of the Haskell Hackage package repository.\nThis is useful
  for testing Haskell compilers.\n\n## Using\n\nHackager consists of one tool that
  supports multiple commands.\n\n''hackager'' is invoked with the following options:\n\n~~~~
  {.sh}\n$ usage: hackager [--version] [--help] <command> [<args>]\n\nThe valid hackager
  commands are:\n    record    Try building all of hackage and record results\n    report
  \   Compare two 'record' runs and display results\n\nSee 'hackager help <command>'
  for more information on a specific command\n~~~~\n\n''hackager record'' has the
  following options:\n\n~~~~ {.sh}\nusage: hackager record -o NAME [-c CABAL] [-g
  GHC] [-p GHC-PKG] [-d DEP-FLAGS]\n                      [-f PKG-FLAGS] [-n THREADS]
  [PKGS...]\n\n    NAME         A name by which the results of this hackager run will\n
  \                be referred, e.g. \\\"ghc-7.6.1\\\"\n    CABAL        The path
  to the cabal program to use\n    GHC          The path to the ghc program to use\n
  \   GHC-PKG      The path to the ghc-pkg program to use\n    DEP-FLAGS    The flags
  to use when compiling dependencies of a package\n                 e.g. \\\"--ghc-option=-XFoo\\\"\n
  \   PKG-FLAGS    The flags to use when compiling a package\n                 e.g.
  \\\"--ghc-option=-XBar\\\"\n    THREADS      Number of threads to use to build in
  parallel\n    PKGS         A list of packages to build. If not specified all of\n
  \                hackage is built\n~~~~\n\n### Executing a run of Hackager\n\nHere
  is a run with GHC, no special options and using 4 threads (note that this\ngenerally
  takes a long time, i.e. a few days):\n\n~~~ {.sh}\n$ hackager record -o normal -n
  4\n~~~~\n\nThis run has two parts. First, the 'stats' part, where Hackager checks
  which\npackages of the ones requested it believes it can build. Packages that can't
  be\nbuilt are ones that we can't satisfy the dependencies for, usually due to the\npackage
  itself or one of its dependencies not being compatible with the version\nof GHC
  in use. This produces files of the form `stats.*` in the output\ndirectory and should
  only take a few minutes.\n\nThe second part consists of attempting to build every
  package (in isolation)\nthat Hackager reported it could attempt to build from the
  first part. This\ntakes hours to days (for all of Hackage), and stores results in
  files of the\nform `build.*`. Log files for the build results of each package are
  also saved\nunder folders (with alphabetical grouping to make browsing easier).\n\n###
  Comparing Results of Two Runs\n\nAfter the first fun, execute a second run with
  the delta you wish. For example,\nthis time using ''-XAlternativeLayoutRule'' to
  compile each package (but not\nthe dependencies of the package):\n\n~~~~ {.sh}\n$
  hackager record -o altern -f \"--ghc-option=-XAlternativeLayoutRule\" -n 4\n~~~~\n\nOnce
  done, you can compare the results of the two runs:\n\n~~~~ {.sh}\n$ hackager report
  normal altern\n\n                            normal\n                     Built,
  Failed, Deps Failed, Not Tried\naltern Built           628       0            0
  \         0\n       Failed           73     215            0          0\n       Deps
  Failed       0       0          170          0\n       Not Tried         0       0
  \           0          0\n~~~~\n\nThese results mean that 73 packages became unbuildable
  when the alternative\nlayout rule is used.\n\n## File Output\n\nWhen looking at
  the files created by a single run of Hackager, the important\none is `stats.summary`,
  which cotains the following fields:\n\n* ''Num packages'':   Number of packges we
  are testing.\n* ''Installable'':    Packages we believe we can install.\n* ''Uninstallable'':
  \ Packages we can't build (i.e., wrong GHC version)\n* ''Errored '':       Packages
  Cabal claims can be built but we don't\n                      understand Cabal's
  output.\n* ''Installations'':  Total number of packages builds we will perform during\n
  \                     the run.\n\nHackager also produces a reverse dependency list
  for each package and a\nhistogram of the reverse dependency count for pacakges,
  storing them in files\nof the form `stats.*`.\n\n## Caution\n\nHackager can cause
  arbitrary code to run on your machine. For example:\n\n * TemplateHaskell is run
  at compile time and can execute arbitrary code\n * Package configure scripts will
  be run\n * Custom Setup.hs programs will be run\n\n## Get involved!\n\nWe are happy
  to receive bug reports, fixes, documentation\nenhancements, and other improvements.\n\nPlease
  report bugs via the\n[github issue tracker](http://github.com/dterei/Hackager/issues).\n\nMaster
  [git repository](http://github.com/dterei/Hackager):\n\n* `git clone git://github.com/dterei/Hackager.git`\n\n##
  Licensing\n\nThis library is BSD-licensed.\n\n"
license-name: BSD-3-Clause
