homepage: https://github.com/waddlaw/haskell-stack-trace-plugin
changelog-type: markdown
hash: 88717b4b0085ba0d7ce4e73b821efc771b2bfbceb3f8e5dd4faa1f8ba772e1d9
test-bench-deps: {}
maintainer: ingronze@gmail.com
synopsis: haskell-stack-trace-plugin
changelog: ! '# Revision history for haskell-stack-trace-pugin


  ## 0.1.0.0 -- 2018-12-07


  * First version. Released on an unsuspecting world.

'
basic-deps:
  ghc: ==8.6.2
  haskell-stack-trace-plugin: -any
  base: ==4.12.*
all-versions:
- '0.1.0.0'
author: Shinya Yamaguchi
latest: '0.1.0.0'
description-type: markdown
description: ! "# haskell-stack-trace-plugin\n\nThis plugin allow implicitly add `HasCallStack`
  class to every top-level function for all module. Hence, we can  to get completely
  continuous call stack.\n\n1. (implicitly) Import [GHC.Stack](https://www.stackage.org/haddock/lts-12.21/base-4.11.1.0/GHC-Stack.html)
  for all modules.\n2. Add [HasCallStack](https://www.stackage.org/haddock/lts-12.21/base-4.11.1.0/GHC-Stack.html#t:HasCallStack)
  constraint for all top-level functions.\n\nRequirement: (8.6 <= on GHC)\n\n## Synopsis\n\n```haskell\nmodule
  Main where\n\nimport Data.Maybe (fromJust)\n\nmain :: IO ()\nmain = print f1\n\nf1
  :: Int\nf1 = f2\n\nf2 :: Int\nf2 = f3\n\n-- HsQualTy\nf3 :: HasCallStack => Int\nf3
  = f4 0\n\n-- HsQualTy\nf4 :: Show a => a -> Int\nf4 _ = f5 0 0\n\n-- HsFunTy\nf5
  :: Int -> Int -> Int\nf5 _ _ = head f6\n\n-- HsListTy\nf6 :: [Int]\nf6 = [fst f7]\n\n--
  HsTupleTy\nf7 :: (Int, Int)\nf7 = (fromJust f8, fromJust f8)\n\n-- HsAppTy\nf8 ::
  Maybe Int\nf8 = Just fError\n\n-- HsTyVar\nfError :: Int\nfError = error \"fError\"\n```\n\nThis
  example get error:\n\n```shell\n$ cabal new-build\nexample/Main.hs:15:7: error:\n
  \   Not in scope: type constructor or class ‘HasCallStack’\n   |\n15 | f3 :: HasCallStack
  => Int\n   |       ^^^^^^^^^^^^\n```\n\nYes, add `import GHC.Stack` to above example.\n\nFix
  and rebuild!\n\n```shell\n$ cabal new-run\nexample: fError\nCallStack (from HasCallStack):\n
  \ error, called at example/Main.hs:41:10 in main:Main\n```\n\nHmm, it is not useful.
  But, you will to be happy when enable this plugin.\n\n```cabal\n  ghc-options:\n
  \   -fplugin=StackTrace.Plugin\n```\n\n```shell\n$ cabal new-run\n...\n\nexample:
  fError\nCallStack (from HasCallStack):\n  error, called at example/Main.hs:40:10
  in main:Main\n  fError, called at example/Main.hs:36:11 in main:Main\n  f8, called
  at example/Main.hs:32:16 in main:Main\n  f7, called at example/Main.hs:28:11 in
  main:Main\n  f6, called at example/Main.hs:24:15 in main:Main\n  f5, called at example/Main.hs:20:8
  in main:Main\n  f4, called at example/Main.hs:16:6 in main:Main\n  f3, called at
  example/Main.hs:12:6 in main:Main\n  f2, called at example/Main.hs:9:6 in main:Main\n
  \ f1, called at example/Main.hs:6:14 in main:Main\n  main, called at example/Main.hs:6:1
  in main:Main\n```\n\nGreat!!!"
license-name: MIT
