homepage: https://github.com/airalab/habit#readme
changelog-type: ''
hash: 398d8070ae1faee8c8a97b7107c3c415dc3830d88d30bbb83d2ac5f69d1da1d1
test-bench-deps: {}
maintainer: mail@akru.me
synopsis: Haskell message bot framework
changelog: ''
basic-deps:
  http-client: ! '>=0.4.31.2 && <0.5'
  telegram-api: ! '>=0.5.0.1 && <0.6'
  base: ==4.9.*
  persistent: ==2.6.*
  text: ! '>=1.2.2.1 && <1.3'
  persistent-template: ! '>=2.5.1.6 && <2.6'
  monad-control: ! '>=1.0.1.0 && <1.1'
  persistent-postgresql: ==2.6.*
  containers: ! '>=0.5.7.1 && <0.6'
  pipes: ! '>=4.1.9 && <4.2'
  http-client-tls: ! '>=0.2.4.1 && <0.3'
  persistent-mysql: ==2.6.*
  cryptonite: ==0.21.*
  transformers-base: ! '>=0.4.4 && <0.5'
  monad-logger: ! '>=0.3.20.1 && <0.4'
  transformers: ! '>=0.5.2.0 && <0.6'
  resourcet: ! '>=1.1.8.1 && <1.2'
  persistent-sqlite: ==2.6.*
  habit: ! '>=0.2.2.0 && <0.3'
all-versions:
- 0.2.1.2
- 0.2.2.0
author: Alexander Krupenkin
latest: 0.2.2.0
description-type: markdown
description: ! "## Haskell Bot it :: Message bot framework\n\n[![Build Status](https://travis-ci.org/airalab/habit.svg?branch=master)](https://travis-ci.org/airalab/habit)\n[![Build
  status](https://ci.appveyor.com/api/projects/status/jgydugfn3tx8o56g?svg=true)](https://ci.appveyor.com/project/akru/habit)\n[![Hackage](https://img.shields.io/hackage/v/habit.svg)](http://hackage.haskell.org/package/habit)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/habit.svg)\n![Haskell Programming
  Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\n###
  Install\n\n    $ git clone https://github.com/airalab/habit && cd habit\n    $ stack
  setup\n    $ stack ghci\n\n### Run your story\n\nThe `Story` is an abstraction about
  sparsed data getted from user\nthough dialogue.\n\n```haskell\nhelloStory :: Story
  a\nhelloStory _ = hello <$> question \"How your name?\"\n                     <*>
  question \"How your surname?\"\n                     <*> question \"How old are
  you?\"\n```\n\nAs you see the story handler `hello` is apply though the questions\nto
  user responses.\n\n```haskell\ntype Name    = Text\ntype Surname = Text\ntype Age
  \    = Int\n\nhello :: Monad m => Name -> Surname -> Age -> m BotMessage\nhello
  name surname age = do\n    return . toMessage $ \"Hello, \" <> name <> \" \" <>
  surname <> \"!\\n\"\n                      <> \"You lost \" <> (pack $ show age)
  <> \" years =)\"\n```\n\nTo run the `Story` simple pass it to `storyBot` as value
  of mapping between\ncommand an story. `APIToken` type class defines token for given
  platform,\ne.g. Telegram platform.\n\n```haskell\ninstance APIToken Telegram where\n
  \   apiToken = \"bot...\"\n\nmain :: IO ()\nmain = runBot myBot\n  where myBot ::
  Bot Telegram ()\n        myBot = storyBot helpMsg [(\"/hello\", helloStory)]\n```\n\nFull
  example [text](examples/Hello.hs).\n"
license-name: BSD-3-Clause
