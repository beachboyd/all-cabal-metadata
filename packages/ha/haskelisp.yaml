homepage: http://github.com/githubuser/haskelisp#readme
changelog-type: ''
hash: a1b283345ab2aa1553f6293a7b261e973bcb546a0eaecbfd76a9fd5978052041
test-bench-deps: {}
maintainer: takenari.shinohara@gmail.com
synopsis: Write Emacs module in Haskell, using Emacs 25's Dynamic Module feature
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  text: <1.3
  protolude: <0.2
  containers: <0.6
  mtl: <2.3
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.1.0
author: Takenari Shinohara
latest: 0.1.1.0
description-type: markdown
description: ! "EXPERIMENTAL\n\nWrite Emacs module in Haskell, using Emacs 25's Dynamic
  Module feature.\n\n* Only tested with linux.\n* Only tested with Stack (LTS 6.26)\n*
  You need to build emacs with --with-modules configuration options\n* You need to
  specify some ghc-options to make it work\n\nSample:\n\n    {-# LANGUAGE ForeignFunctionInterface,OverloadedStrings
  #-}\n    module Main where\n\n    import Emacs\n    import Foreign.C.Types\n\n    foreign
  export ccall \"emacs_module_init\" emacsModuleInit :: EmacsModule\n\n    emacsModuleInit
  :: EmacsModule\n    emacsModuleInit = defmodule \"sample-module\" $ do\n\n      setVal
  \"foo\" (Symbol \"bar\")\n\n      defun \"square\" $ \\i -> do\n        message
  \"haskell squre function called\"\n        return $ (i*i :: Int)\n\n    main ::
  IO ()\n    main = undefined\n\n# How to use\n\nExplain using Stack and LTS 6.26
  as premise.\n\n## 1. Create a new project with Stack\n\n    $ stack --resolver=lts-6.26
  new mymodule\n\n## 2. Change executable name to *.so and add haskelisp to the dependency\n\nmymodule.cabal:\n\n
  \   executable mymodule.so\n      hs-source-dirs:      app\n      main-is:             Main.hs\n
  \     ghc-options:         -threaded -rtsopts -with-rtsopts=-N\n      build-depends:
  \      base\n                         , mymodule\n                         , haskelisp\n
  \     default-language:    Haskell2010\n\n## 3. Change `ghc-options` and add `cc-options`
  to make shared library\n\nmymodule.cabal:\n\n    executable mymodule.so\n      ...\n
  \     cc-options:          -fPIC\n      ghc-options:         -shared -dynamic -fPIC
  -lHSrts-ghc7.10.3\n      ...\n\n## 4. Modules must be GPL compatible\n\nThe shared
  library must include `plugin_is_GPL_compatible` symbol to be loaded by Emacs.\nPrepare
  a C source file and specify it with `c-sources` option.\n\n    $ echo 'int plugin_is_GPL_compatible;'
  > plugin_is_GPL_compatible.c\n\nmymodule.cabal:\n\n    executable mymodule.so\n
  \     ...\n      c-sources:           plugin_is_GPL_compatible.c\n      ...\n\n##
  5. Write some code\n\nMain.hs:\n\n    {-# LANGUAGE ForeignFunctionInterface,OverloadedStrings
  #-}\n    module Main where\n\n    import Emacs\n    import Foreign.C.Types\n\n    foreign
  export ccall \"emacs_module_init\" emacsModuleInit :: EmacsModule\n\n    emacsModuleInit
  :: EmacsModule\n    emacsModuleInit = defmodule \"mymodule\" $ do\n\n      defun
  \"mysquare\" $ \\i -> do\n        message \"haskell squre function called\"\n        return
  $ (i*i :: Int)\n\n    main :: IO ()\n    main = undefined\n\nWe don't need `main`
  function, but without it cause a compile error,\nso include a dummy one. It won't
  be called.\n\n## 6. Build\n\n    $ stack build\n\n## 7. Copy the genereated shared
  library under `load-path`\n\nFor example, if `~/.emacs.d/lisp` is included in `load-path`:\n\n
  \   $ cp .stack-work/install/x86_64-linux/lts-6.26/7.10.3/bin/mymodule.so ~/.emacs.d/lisp/\n\n##
  8. Load your shared library\n\n    (require 'mymodule)\n"
license-name: GPL-3.0-only
