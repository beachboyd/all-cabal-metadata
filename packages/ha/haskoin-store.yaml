homepage: http://github.com/haskoin/haskoin#readme
changelog-type: markdown
hash: 10e244efe08b785d59fb3ff394c43843566c73526e7f2848c2ec1b3ac5df5c32
test-bench-deps:
  haskoin-core: -any
  unliftio: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  haskoin-store: -any
  rocksdb-haskell: -any
  haskoin-node: -any
  nqe: -any
  mtl: -any
  monad-logger: -any
maintainer: xenog@protonmail.com
synopsis: Storage and index for Bitcoin and Bitcoin Cash
changelog: ! '# Changelog

  All notable changes to this project will be documented in this file.


  The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)

  and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).


  ## 0.1.0

  ### Changed

  - Fix tests


  ## 0.2.0

  ### Added

  - Documentation everywhere.

  - Ability to retrieve address transactions.


  ### Changed

  - New versions of NQE and Haskoin Node upstream.

  - Improve and simplify API.

  - Multi-element endpoints return arrays of arrays.

  - Database snapshots for all queries are now mandatory.


  ### Removed

  - Retrieving unspent and spent outputs for an address.

  - Redundant API endpoints for multiple elements.


  ## 0.1.3

  ### Changed

  - Fix a bug with transaction notifications.

  - Improve handling orphan transactions.


  ## 0.1.2

  ### Changed

  - Specify dependencies better.


  ## 0.1.1

  ### Changed

  - Dependency `secp256k1` is now `secp256k1-haskell`.


  ## 0.1.0

  ### Added

  - New `CHANGELOG.md` file.

  - Bitcoin (BTC) and Bitcoin Cash (BCH) compatibility.

  - RocksDB database.

  - Mempool support.

  - HTTP streaming for events.

  - CashAddr support.

  - Bech32 support.

  - Rate limits.


  ### Changed

  - Split out of former `haskoin` repository.

  - Use hpack and `package.yaml`.


  ### Removed

  - Removed Stylish Haskell configuration file.

  - Remvoed `haskoin-core` and `haskoin-wallet` packages from this repository.

'
basic-deps:
  cereal: -any
  haskoin-core: -any
  bytestring: -any
  rocksdb-query: -any
  unliftio: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  filepath: -any
  haskoin-store: -any
  network: -any
  conduit: -any
  rocksdb-haskell: -any
  containers: -any
  haskoin-node: -any
  nqe: -any
  mtl: -any
  monad-logger: -any
  transformers: -any
  optparse-applicative: -any
  random: -any
  string-conversions: -any
  scotty: -any
  http-types: -any
  aeson: -any
  directory: -any
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2.0'
- '0.2.1'
author: Jean-Pierre Rupp
latest: '0.2.1'
description-type: markdown
description: ! '# Haskoin Store


  Full blockchain index & store featuring:


  - Address index.

  - Mempool.

  - Persistent storage using RocksDB.

  - RESTful endpoints for blockchain data.

  - Concurrent design.

  - No blocking on database access.

  - Guaranteed consistency within a request.

  - Atomic updates to prevent corruption.



  ## Install


  * Get [Stack](https://haskell-lang.org/get-started).

  * Get [Nix](https://nixos.org/nix/).

  * Clone this repository `git clone https://github.com/haskoin/haskoin-store`.

  * From the root of this repository run `stack --nix build --copy-bins`.

  * File will usually be installed in `~/.local/bin/haskoin-store`.



  ## API Documentation


  * [Swagger API Documentation](https://btc.haskoin.com/).



  ## Addresses & Balances


  For every address Haskoin Store has a balance object that contains basic statistics
  about the address. These statistics are described below.


  * `confirmed` balance is that which is in the blockchain. Will always be positive
  or zero.

  * `unconfirmed` balance represent aggregate changes done by mempool transactions.
  Can be negative if the transactions currently in the mempool are expected to reduce
  the balance when all of them make it into the blockchain.

  * `outputs` is the count of outputs that send funds to this address. It is just
  a count and not a monetary value.

  * `utxo` is the count of outputs that send funds to this address that remain unspent,
  taking the mempool into account: if spent in the mempool it will *not* count as
  unspent.

'
license-name: LicenseRefPublicDomain
