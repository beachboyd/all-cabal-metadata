homepage: https://github.com/8084/haskell-holes-th
changelog-type: ''
hash: 396da36442dc4e20d77e58666c0bb14918ffbae1e39e990474db42ea43987954
test-bench-deps: {}
maintainer: klntsky@gmail.com
synopsis: Infer haskell code by given type.
changelog: ''
basic-deps:
  base: ! '>=4.9 && <4.10'
  template-haskell: ! '>=2.11 && <2.12'
all-versions:
- 0.0.0.1
- 1.0.0.0
author: klntsky
latest: 1.0.0.0
description-type: markdown
description: ! "# haskell-holes-th\n\n[TIP](https://en.wikipedia.org/wiki/Type_inhabitation_problem)
  solver for [simply typed lambda calculus](https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus)
  to automatically infer the code from type definitions using [TemplateHaskell](https://wiki.haskell.org/Template_Haskell).
  It may also be viewed as a prover for intuitionistic propositional logic with only
  implication allowed.\n\n## Usage\n\nThe following example shows the basic usage
  of the macro.\n\n```\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Language.Haskell.Holes\n\n--
  \\x -> x\ni :: a -> a\ni = $(hole [| I :: a -> a |])\n\n-- \\x y -> x y y\nw ::
  (a -> a -> b) -> a -> b\nw = $(hole [| W :: (a -> a -> b) -> a -> b |])\n\n-- \\x
  y z -> x (y z)\nb :: (b -> c) -> (a -> b) -> (a -> c)\nb = $(hole [| B :: (b ->
  c) -> (a -> b) -> (a -> c) |])\n\n-- \\x y z -> x z y\nc :: (a -> b -> c) -> (b
  -> a -> c)\nc = $(hole [| C :: (a -> b -> c) -> (b -> a -> c) |])\n```\n\nAlso check
  out [Test.hs](Test.hs).\n\n## Limitations\n\n- Only atomic types from the given
  context can be inferred. Use `holeWith` instead of `hole` to specify a non-default
  context. The default one contains `Bool`, `Char`, `Double`, `Float`, `Int`, `Integer`,
  `Word` and `String`.\n\n- Haskell's type system is more rich than simply typed lambda
  calculus (it allows polymorphism), so some of the types that have corresponding
  definitions in Haskell can't be inferred. Also, in STLC every typed term is strongly
  normalizing, so the type of [fixed-point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator)
  can't be inhabited.\n\n## Custom context\n\nAny atomic type can be added to the
  context by constructing a quoted expression of that type and a type itself (as an
  [Exp from TemplateHaskell](https://hackage.haskell.org/package/template-haskell/docs/Language-Haskell-TH.html#t:Exp)).\n\n```\nt3
  :: Maybe Int\nt3 = $(holeWith\n       -- context = [Just 0 :: Maybe Int]\n       [([|
  Just 0 |], AppT (ConT ''Maybe) (ConT ''Int))]\n       [| mi :: Maybe Int |])\n\n```\n\nIf
  the type do not correspond to the quoted value, *the code containing the inferred
  term* will not compile, but no warnings or errors will be shown if the quoted value
  is never used.\n\nType definition in terms of `Exp` can be retrieved from `ghci`
  as follows:\n\n```\n$ ghci -XTemplateHaskell\nPrelude> :m + Language.Haskell.TH\nPrelude
  Language.Haskell.TH> runQ [| _ :: Either (Maybe Int) String |] >>= print\nSigE (UnboundVarE
  _) (AppT (AppT (ConT Data.Either.Either) (AppT (ConT GHC.Base.Maybe) (ConT GHC.Types.Int)))
  (ConT GHC.Base.String))\n```\nThe part starting after `(UnboundVarE _)` is needed.\n\n##
  Notes\n\nType unification is not implemented, but it may be added in the future."
license-name: MIT
