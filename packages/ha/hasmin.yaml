homepage: https://github.com/contivero/hasmin#readme
changelog-type: markdown
hash: b3b484d0511e0bce57618e4b5d6bd66a91ea0d4f07564a5c0e6492b0e1445b41
test-bench-deps:
  base: ! '>=4.9 && <5.1'
  hspec: ! '>=2.2 && <3.0'
  text: ==1.2.*
  hspec-attoparsec: ! '>=0.1.0.0 && <0.2'
  hasmin: -any
  criterion: ! '>=0.11 && <1.4'
  doctest: ! '>=0.11 && <0.14'
  mtl: ! '>=2.2.1 && <2.3'
  doctest-discover: ! '>=0.1.0.0 && <0.2'
  attoparsec: ! '>=0.12 && <0.14'
  QuickCheck: ! '>=2.8 && <3.0'
  directory: ! '>=1.3.0.0 && <1.4'
maintainer: Cristian Adrián Ontivero <cristianontivero@gmail.com>
synopsis: CSS Minifier
changelog: ! "# Changelog\nThis project adheres to [PVP](https://pvp.haskell.org).\n\n##
  1.0.1\n\n### Added\n\n* Removing `all` and `all and` in media query lists, since
  `all`\n  is assumed when not present. In other words, the following\n  rules are
  equivalent:\n  ```css\n  @media all {/*..*/}\n  @media {/*..*/}\n  ```\n  and so
  are these:\n  ```css\n  @media all and (min-width: 500px) {/*..*/}\n  @media (min-width:
  500px) {/*..*/}\n  ```\n  Note that this applies to media query lists in at-import
  rules too.\n\n* Replacing the `url()` notation for a \\<string> when used in the
  `@import`\n  rule.\n\n* Four pseudoelement minifications:\n\n  1. `:nth-of-type(1)`
  --> `:first-of-type`.\n  2. `:nth-last-of-type(1)` --> `:last-of-type`.\n  3. `:nth-child(1)`
  --> `:first-child`.\n  4. `:nth-last-child(1)` --> `:last-child`.\n\n* `[class~=x]`
  to `.x` minification.\n\n### Improved\n* \\<position> parser, making hasmin around
  four times faster on stylesheets with\n  many \\<position> values.\n\n### Fixed\n*
  Length's Eq instance, which would equate lengths with the same numerical\n  value
  when one had an absolute unit, and the other relative, e.g. 1in and 1em.\n* Escaped
  character conversion: converting characters would crash the program\n  when:\n\n
  \   1. The escaped character had more than 6 hexadecimal digits (6 is the specs\n
  \      maximum); E.g. `\\aaaaaaa`.\n    2. The escaped character's numerical representation
  was out of the unicode\n       range.\n\n  This is no longer the case.\n\n## 1.0\n\n###
  Added\n* `border-color-*`, `border-width-*` and `border-style-*` longhands are now\n
  \  replaced by their shorthand, when the four corresponding longhands are\n   present
  in a rule.\n* Style rules merging: merges pairs of rules that either have all the\n
  \ same selectors, or all the same declarations. For it to be safe, it only does\n
  \ so whenever two conditions don't meet:\n    1. There is a rule in between with
  the same specificity\n    2. This rule has a declaration that \"clashes\" (interferes)
  with one of the\n       declarations of the rules to be merged.\n\n  By default
  it is enabled, but it can be disabled with `--no-rule-merging` (or\n  using a `Config`
  with `MergeRulesOn`).\n\n### Changed\n* Replaced `--no-property-sorting` for `--sort-properties`.
  Now Hasmin doesn't\n  sort properties by default; sorting declarations became opt-in
  rather than\n  opt-out. This is because:\n    1. Whether lexicographical sorting
  of properties aids compression varies a\n       lot from stylesheet to stylesheet,
  for some files it helps, for others it\n       hurts.\n    2. The current implementation
  doesn't take into account all the possible\n       interactions between properties,
  making it unsafe.\n\n### Fixed\n* Fixed non-exhaustive pattern bug introduced in
  0.3.3\n* Fixed parser choking with rules that contained a semicolon but no\n  declarations,
  e.g. `div { ; }`.\n\n## 0.3.3 [YANKED]\nThis version introduced a non-exhaustive
  pattern bug. Don't use it.\n\n### Added\nAdded a simple merging of adjacent media
  queries (`@media` rules), e.g.:\n```css\n@media all and (min-width: 24rem) {\n  a
  { font-size: 1.2rem; }\n}\n@media all and (min-width: 24rem) {\n  b { padding-left:
  .25rem; padding-right: .25rem; }\n}\n```\nGets merged into into:\n```css\n@media
  all and (min-width: 24rem) {\n  a { font-size: 1.2rem; }\n  b { padding-left: .25rem;
  padding-right: .25rem; }\n}\n```\n\n## 0.3.2.4\n* Relaxed doctest upper bound once
  more, see [stackage issue 2663](https://github.com/fpco/stackage/issues/2663#issuecomment-319880160).\n\n##
  0.3.2.3\n* Relaxed doctest upper bound.\n\n## 0.3.2.2\n* Relaxed criterion upper
  bound.\n\n## 0.3.2.1\n* Relaxed optparse-applicative upper bound.\n\n## 0.3.2\n*
  Fixed some dimensions minifying incorrectly.\n* Fixed some Eq instances.\n* <An+B>
  values data type modified to disallow invalid values. This makes the\n  data type
  safer, also simplifying the Quickcheck Arbitrary instance.\n* Improved test coverage.\n\n##
  0.3.1.3\n* Added support for `@supports` rules, and a slight minification for them:
  it\n  removes adjacent negations, i.e.: @supports not (not ...) gets turn into\n
  \ @supports ....\n* Fixed a small bug with `:lang()` where spaces before the right
  parenthesis\n  weren't being removed.\n* Improved test coverage.\n\n## 0.3.0.1\nInitial
  release\n"
basic-deps:
  bytestring: ! '>=0.10.2.0 && <0.11'
  base: ! '>=4.9 && <5.1'
  text: ==1.2.*
  hasmin: -any
  gitrev: ! '>=1.0.0 && <1.4'
  matrix: ! '>=0.3.4 && <0.4'
  containers: ! '>=0.5 && <0.6'
  hopfli: ! '>=0.2 && <0.4'
  parsers: ! '>=0.12.3 && <0.13'
  bifunctors: ! '>=5.4 && <5.6'
  mtl: ! '>=2.2.1 && <2.3'
  numbers: ! '>=3000.2.0.0 && <3000.3'
  attoparsec: ! '>=0.12 && <0.14'
  optparse-applicative: ! '>=0.11 && <0.15'
all-versions:
- '0.3.0.1'
- '0.3.1.3'
- '0.3.2'
- '0.3.2.1'
- '0.3.2.2'
- '0.3.2.3'
- '0.3.2.4'
- '0.3.3'
- '0.3.3.1'
- '1.0'
- '1.0.1'
author: (c) 2017 Cristian Adrián Ontivero <cristianontivero@gmail.com>
latest: '1.0.1'
description-type: markdown
description: ! "Hasmin - A Haskell CSS Minifier\n====\n[![Build Status](https://travis-ci.org/contivero/hasmin.svg?branch=master)](https://travis-ci.org/contivero/hasmin)\n[![Hackage](https://img.shields.io/hackage/v/hasmin.svg?style=flat)](http://hackage.haskell.org/package/hasmin)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/hasmin.svg?style=flat)](http://packdeps.haskellers.com/specific?package=hasmin)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nAside
  from the usual techniques (e.g. whitespace removal, color minification,\netc.),
  the idea was to explore new possibilities, by implementing things\nother minifiers
  weren't doing, or they were, but not taking full advantage of.\n\nAlso, the minifier
  implements some techniques that do nothing for minified\nsizes, but attempt to improve
  post-compression sizes (at least when using\nDEFLATE, i.e. gzip).\n\nFor a list
  of techniques, see [the wiki](https://github.com/contivero/hasmin/wiki).\nTo use
  it as a library, see\n[below](https://github.com/contivero/hasmin#library).\n\n##
  Building & Installing\n### Stack\nThe easiest and prefered way is using\n[stack](https://docs.haskellstack.org/en/stable/README/).
  Clone the repo, then:\n```sh\n$ cd path/to/hasmin/repo\n$ stack build\n```\nAfter
  that, you can install it with `stack install` (installs by default to `~/.local/bin`).\nIf
  you'd rather just try it out, use `stack exec hasmin` (keep in mind it has\na slight
  additional delay at the beginning when run this way).\n\n### Cabal\nAlternatively,
  you can use [cabal](https://www.haskell.org/cabal/):\n```sh\n$ cd path/to/hasmin/repo\n$
  cabal update                      # Make sure to have the latest package list\n$
  cabal sandbox init                # Initialise a sandbox\n$ cabal install --only-dependencies
  # Install dependencies into the sandbox\n$ cabal build                       # Build
  hasmin inside the sandbox\n```\n\n## Minifier Usage\nHasmin expects a path to the
  CSS file, and outputs the minified result to\nstdout. Say you have a `sheet.css`
  and want to minify it, and save it as\n`sheet.min.css`. Then, run:\n```sh\n$ hasmin
  sheet.css > sheet.min.css\n```\n\nEvery technique is enabled by default, except
  for:\n 1. Escaped character conversions (e.g. converting `\\2714` into `✔`, enabled\n
  \   with `--convert-escaped-characters`).\n 2. Dimension minifications (e.g. converting
  `12px` to `9pt`, enabled with\n    `--dimension-min`, or just `-d`).\n 3. Lexicographical
  sorting of declarations (enabled with\n    `--sort-declarations`).\n\nThe first
  two are disabled mainly because they are—on average, not\nalways—detrimental for
  DEFLATE compression. As for declaration sorting, whether\nit benefits or hurts compression
  rates is very stylesheet-dependent, and the\ncurrent implementation is quite naive,
  hence unsafe.\n\nWhen something needs to be disabled, use the appropriate flag.
  Not every\ntechnique can be toggled, but if there is any one in particular that
  you need to\nand can't, open an issue about it.\n\nNote: there is a problem in Windows
  when using the\n`--convert-escaped-characters` flag to enable the conversion of
  escaped\ncharacters. A workaround is changing the code page, which can be done by
  running\n`chcp 65001` in the terminal (whether cmd, or cygwin).\n\n## Library\nThe
  preferable way to use Hasmin as a library is to `import Hasmin`; a usage\nexample
  can be seen in the [module's documentation](https://hackage.haskell.org/package/hasmin/docs/Hasmin.html).\nThat
  is currently the only module that is sure to abide by\n[PVP](https://pvp.haskell.org/).
  Most other exposed modules are so because tests\nneed it, and thus definitions there
  may be changed anytime. In case something\ninternal is needed though, feel free
  to open an issue about it.\n\n## Zopfli Integration\nHasmin uses bindings to Google's\n[Zopfli
  library](https://en.wikipedia.org/wiki/Zopfli), allowing the\npossibility to compress
  the result.\n\nSince the output is a gzip file, it can be used for the web. It tipically\nproduces
  files 3~8% smaller than zlib, at the cost of being around 80 times\nslower, so it
  is only a good idea if you don't need compression on the fly.\n\n\nZopfli is [released
  under the Apache License, Version 2.0](https://github.com/google/zopfli/blob/master/COPYING).\n"
license-name: BSD3
