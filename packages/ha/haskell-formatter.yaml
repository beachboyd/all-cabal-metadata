homepage: https://github.com/evolutics/haskell-formatter
changelog-type: ''
hash: f8155235794cde11994a70eafb2b292dde55308a8e726469beaf94bd69d6fafb
test-bench-deps:
  hlint: ! '>=1.9'
  filemanip: ! '>=0.3'
  base: ! '>=4.6 && <4.8'
  filepath: ! '>=1.3'
  doctest: ! '>=0.9'
  containers: ! '>=0.5'
  directory-tree: ! '>=0.11'
  tasty-hunit: ! '>=0.8'
  tasty: ! '>=0.9'
  haskell-formatter: -any
maintainer: Benjamin Fischer <benjamin.fischer@evolutics.info>
synopsis: Haskell source code formatter
changelog: ''
basic-deps:
  base: ! '>=4.6 && <4.8'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.0'
  filepath: ! '>=1.3'
  containers: ! '>=0.5'
  haskell-src-exts: ==1.16.*
  optparse-applicative: ! '>=0.10'
  scientific: ! '>=0.3'
  yaml: ! '>=0.8'
  haskell-formatter: -any
  directory: ! '>=1.2'
all-versions:
- 0.1.0
- 1.0.0
author: Benjamin Fischer
latest: 1.0.0
description-type: text
description: ! "=================\nHaskell Formatter\n=================\n\nThe Haskell
  Formatter formats Haskell source code. It is strict in that it fundamentally rearranges
  code.\n\nInstallation\n============\n\nRun\n\n::\n\n    $ cabal install haskell-formatter\n\nto
  create an executable, which is referred to as ``haskell-formatter`` in the following.
  On Linux, for example, you should now be able to call it as\n\n::\n\n    $ ~/.cabal/bin/haskell-formatter
  --help\n\nIn case of issues with dependencies, try to use a Cabal sandbox. For convenience,
  this can be done by\n\n::\n\n    $ make sandbox\n\nUsage\n=====\n\nBasics\n------\n\nRead
  source code from ``Input.hs``, format it, and write it to ``Output.hs`` by\n\n::\n\n
  \   $ haskell-formatter --input Input.hs --output Output.hs\n\nIf the input or output
  file is not given, it defaults to the corresponding standard stream. This allows
  commands like\n\n::\n\n    $ haskell-formatter < Input.hs\n\nFor more help about
  the usage, call\n\n::\n\n    $ haskell-formatter --help\n\nStyle Configuration\n-------------------\n\nThe
  formatting style can be configured with a file referred by the ``--style`` option.
  For instance, the call\n\n::\n\n    $ haskell-formatter --style my_style.yaml --input
  Input.hs --output Output.hs\n\nuses ``my_style.yaml`` as a style file. Such files
  are in the `YAML format <http://en.wikipedia.org/wiki/YAML>`_. The following is
  an `example style file <testsuite/resources/examples/default_style.yaml>`_, which
  at the same time shows the available keys with their default values.\n\n.. GitHub
  does currently not allow to include files with the reStructuredText directive ``include``
  (https://github.com/github/markup/issues/172).\n\n   Thus, the file content is replicated
  here. There is a test which checks that the strings of both sources are equal.\n\n..
  code:: yaml\n\n    # Lines should be no longer than this length in characters.\n
  \   line_length_limit: 80\n    \n    # How much to spread code over multiple lines
  instead of trying to fill a single\n    # line. More precisely, this guides the
  ratio of \"line_length_limit\" to the\n    # ribbon length (the number of characters
  on a line without leading and trailing\n    # whitespace). Only the lowest value
  of 1 forces \"line_length_limit\" to be\n    # applied strictly.\n    # Reference:
  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.8777\n    ribbons_per_line:
  1\n    \n    # More than this number of empty lines in succession are merged.\n
  \   successive_empty_lines_limit: 1\n    \n    # Indentation lengths in characters.\n
  \   indentations:\n        class:  8    # \"class\" and \"instance\" declarations.\n
  \       do:     3    # \"do\" notation. \n        case:   4    # Body of \"case\"
  expressions.\n        let:    4    # Declarations in \"let\" expressions.\n        where:
  \ 6    # Declarations in \"where\" clauses.\n        onside: 2    # Continuation
  lines which would otherwise be offside.\n    \n    # Decides which parts of the
  code to sort.\n    order:\n        # Sequence of import declarations.\n        import_declarations:
  true\n    \n        # Entities of import lists.\n        import_entities: true\n\nRelated
  Projects\n================\n\nYou may like to have a look at the following projects,
  which aim at formatting Haskell code, too.\n\n* `hindent <https://github.com/chrisdone/hindent>`_\n*
  `stylish-haskell <https://github.com/jaspervdj/stylish-haskell>`_\n\nLicense\n=======\n\nSee
  the `LICENSE file <LICENSE>`_.\n"
license-name: GPL-3.0-only
