homepage: https://github.com/Yvee1/hascard#readme
changelog-type: markdown
hash: 4dfe92ed7486e5f52a7d24cb3c2654ddd70ee9135b0c83ed49ee1dbd6d23d836
test-bench-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  mwc-random: '>=0.14 && <0.15'
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  vty: '>=5.28.2 && <5.31'
  strict: '>=0.3.2 && <0.4'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  parsec: '>=3.1.13 && <3.2'
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  random-fu: '>=0.2.7 && <0.3'
  optparse-applicative: '>=0.15.1 && <0.16'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.56'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
maintainer: stevenvdb@live.nl
synopsis: A TUI for reviewing notes using 'flashcards' written with markdown-like
  syntax.
changelog: |
  # Changelog for hascard
  ## 0.1.4.0
  New:
  - Deleted or moved files are also no longer shown in the recently selected files list

  Fixed bugs:
  - A new line after the last seperator `---` caused the parsing to fail, now it does not
  - If the last card was an open question and there was no `---` at the end, it was shown as a definition card (issue #6, thanks @stemvork)

  ## 0.1.3.0
  New:
  - Add `-s` shuffle flag and `-a` amount option to CLI.
  - Add macOS binary and homebrew formula

  ## 0.1.2.0
  New:
  - Hidden files/directories (so starting with '.') are now hidden by default, and can be shown by pressing 'h' in the filebrowser


  Fixed bugs:
  - Parsing now succeeds even if the text file does not end with ---
  - When passing a file to the CLI, the absolute path is saved instead of the relative one, preventing issues with the 'recently selected files'

  ## 0.1.1.0
  New:
  - Add nix build support (by @srid)
  - Recently used decks are now ordered by most recent first
  - Recently used decks now have unique names. Previously only the filename was shown, but now path is shown up to unique name

  Fixed bugs:
  - Failed parsing of settings file now results in default settings instead of error
  - After selecting a file from system, the card selector had to be refreshed before the file appeared in the recently selected decks list. The file is now present immediately
  - Directly selecting a card via the CLI now also adds it to the recents list
  - Selecting a card via the CLI now returns an error if it has a different filetype than '.txt'. If no filetype is given, '.txt' is assumed.


  ## 0.1.0.0
  Initial release
basic-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  mwc-random: ==0.14.*
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  vty: '>=5.28.2 && <5.31'
  strict: '>=0.3.2 && <0.4'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  parsec: '>=3.1.13 && <3.2'
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  random-fu: '>=0.2.7 && <0.3'
  optparse-applicative: '>=0.15.1 && <0.16'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.56'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.1.0
- 0.1.2.0
- 0.1.4.0
author: Steven van den Broek
latest: 0.1.4.0
description-type: markdown
description: "# hascard\nA minimal commandline utility for reviewing notes. 'Flashcards'
  can be written in markdown-like syntax.\n\n![a recording of example usage of the
  hascard application](./recordings/recording.gif)\n\n## Contents\n- [Installation](#installation)\n-
  [Usage](#usage)\n- [Cards](#cards)\n  - [Definition](#definition)\n  - [Multiple
  choice](#multiple-choice)\n  - [Multiple answer](#multiple-answer)\n  - [Open question](#open-question)\n-
  [Miscellaneous info](#miscellaneous-info)\n\n## Installation\nInstallation on Windows
  is not possible sadly, aside from WSL. This is because hascard depends on vty which
  only supports unix operating systems (this includes macOS).\n\n### Homebrew (for
  macOS)\nFor macOS users an installation using homebrew is provided via a custom
  tap. You can run \n```\nbrew update\nbrew install Yvee1/tools/hascard\n```\n\n###
  Binary\nLinux and macOS binaries are available under [releases](https://github.com/Yvee1/hascard/releases/).
  To be able to run it from any directory, it has to be added to the PATH. This can
  be done by copying it to e.g. the `/usr/local/bin` directory.\n\n### Snapcraft\nHascard
  is also on [snapcraft](https://snapcraft.io/hascard). Installation instructions
  are on that site. If you already have snap installed you can just install hascard
  via `sudo snap install hascard`. By default snap applications are isolated from
  the system and run in a sandbox. This means that hascard does not have permission
  to read or write any files on the system aside from those under `%HOME/snap/hascard`.
  To be able to read cards also in other directories under the home directory, hascard
  makes use of the `home` interface which might need to be enabled manually using
  `sudo snap connect hascard:home :home`.\n\n**Note**: The installation with snapcraft
  does not work with all terminals, [known issues are with alacritty and st](https://github.com/Yvee1/hascard/issues/3),
  because of problems with terminfo that I do not know how to solve. With me, this
  did not happen with the other installation methods so try those if you have a somewhat
  non-standard terminal. If anyone knows what the problem might be, let me know!\n\n###
  Install from source\nAnother option is to build hascard and install it from source.
  For this you can use the Haskell build tool called [stack](https://docs.haskellstack.org/en/stable/README/#how-to-install),
  or [nix](https://nixos.org/). Then for example clone this repository somewhere:\n```\ngit
  clone https://github.com/Yvee1/hascard.git\ncd hascard\n```\nand do `stack install
  hascard` or `nix-build` respectively.\n\n## Usage\nSimply run `hascard` to open
  the main application. Menu navigation can be done with the arrow keys or with the
  'j' and 'k' keys. The controls for the different cards can be found at the bottom
  of the screen by default. This, and a couple other things, can be changed in the
  settings menu. Currently there is no functionality for making cards inside the hascard
  application itself, but they can easily be written in your favorite text editor
  since the syntax is human-friendly. \n\n### CLI\nThe CLI provides some options for
  running hascard; to see them all run `hascard -h`. As an example, say you have a
  file `deck.txt` with lots of cards in it and you want to review 5 random ones, you
  can use `hascard deck -s -a 5`. Here `-s` shuffles the deck and `-a 5` specifies
  we only want to look at 5 of them.\n\n## Cards\nDecks of cards are written in `.txt`
  files. Cards are seperated with a line containing three dashes `---`. For examples,
  see the [`/cards`](https://github.com/Yvee1/hascard/tree/master/cards) directory.
  In this section the 4 different cards are listed, with the syntax and how it is
  represented in the application.\n\n### Definition\nThis is the simplest card, it
  simply has a title and can be flipped to show the contents. For example the following
  card\n```\n# Word or question\nExplanation or definition of this word, or the answer
  to the question.\n```\nwill result in\n![](./recordings/definition.gif)\n\n### Multiple
  choice\nThis is a typical multiple choice question. The question starts with a `#`
  and the choices follow. Only one answer is correct, and is indicated by a `*`, the
  other questions are preceded by a `-`. As an example, the following text\n\n```\n#
  Multiple choice question, (only one answer is right)\n- Choice 1\n* Choice 2 (this
  is the correct answer)\n- Choice 3\n- Choice 4\n```\n\ngets rendered as\n![](./recordings/multiple-choice.gif)\n\n###
  Multiple answer\nMultiple choice questions with multiple possible answers is also
  possible. Here again the question starts with `#` and the options follow. Preceding
  each option is a box `[ ]` that is filled with a `*` or a `x` if it is correct.
  For example\n\n```\n# Multiple answer question\n[*] Option 1 (this is a correct
  answer)\n[ ] Option 2\n[*] Option 3 (this is a correct answer)\n[ ] Option 4\n```\nresults
  in\n![](./recordings/multiple-answer.gif)\n\n### Open question\nOpen questions are
  also supported. The words that have to be filled in should be surrounded by underscores
  `_`. Multiple answer possibilities can also be given by seperating them with vertical
  bars `|`. As an example, the card\n\n```\n# Fill in the gaps\nThe symbol â‚¬ is for
  the currency named _Euro_, and is used in the _EU|European Union_.\n```\nbehaves
  like this\n![](./recordings/gapped-question.gif)\n\n## Miscellaneous info\nWritten
  in Haskell, UI built with [brick](https://github.com/jtdaugherty/brick) and parsing
  of cards done with [parsec](https://github.com/haskell/parsec). Recordings of the
  terminal were made using [terminalizer](https://github.com/faressoft/terminalizer).
  The filebrowser widget was mostly copied from the brick [filebrowser demo program](https://github.com/jtdaugherty/brick/blob/master/programs/FileBrowserDemo.hs).
  Homebrew and Travis configurations were made much easier by [the tutorial from Chris
  Penner](https://chrispenner.ca/posts/homebrew-haskell).\n"
license-name: BSD-3-Clause
