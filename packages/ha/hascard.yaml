homepage: https://github.com/Yvee1/hascard#readme
changelog-type: markdown
hash: 6daf25ae430fcbc015cbbc349b667fdf1473cf4cbb7ce40775ccc3cee5c3fccf
test-bench-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  vty: '>=5.28.2 && <5.31'
  strict: '>=0.3.2 && <0.4'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  parsec: '>=3.1.13 && <3.2'
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  optparse-applicative: '>=0.15.1 && <0.16'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.56'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
maintainer: stevenvdb@live.nl
synopsis: A TUI for reviewing notes using 'flashcards' written with markdown-like
  syntax.
changelog: |-
  # Changelog for hascard

  ## 0.1.1.0
  New:
  - Add nix build support (by @srid)
  - Recently used decks are now ordered by most recent first
  - Recently used decks now have unique names. Previously only the filename was shown, but now path is shown up to unique name

  Fixed bugs:
  - Failed parsing of settings file now results in default settings instead of error
  - After selecting a file from system, the card selector had to be refreshed before the file appeared in the recently selected decks list. The file is now present immediately
  - Directly selecting a card via the CLI now also adds it to the recents list
  - Selecting a card via the CLI now returns an error if it has a different filetype than '.txt'. If no filetype is given, '.txt' is assumed.


  ## 0.1.0.0
  Initial release
basic-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  vty: '>=5.28.2 && <5.31'
  strict: '>=0.3.2 && <0.4'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  parsec: '>=3.1.13 && <3.2'
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  optparse-applicative: '>=0.15.1 && <0.16'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.56'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.1.0
author: Steven van den Broek
latest: 0.1.1.0
description-type: markdown
description: |
  # hascard
  A minimal commandline utility for reviewing notes. 'Flashcards' can be written in markdown-like syntax.

  ![a recording of example usage of the hascard application](./recordings/recording.gif)

  ## Contents
  - [Installation](#installation)
  - [Cards](#cards)
  - [Miscellaneous info](#miscellaneous-info)

  ## Installation
  ### Binary
  The binary used on my system is available under [releases](https://github.com/Yvee1/hascard/releases/). If you run debian with the x86-64 architecture that binary should work for you too. To be able to run it from any directory, it has to be added to the PATH. This can be done by copying it to e.g. the `/usr/local/bin` directory.

  ### Snapcraft
  Hascard is also on [snapcraft](https://snapcraft.io/hascard). Installation instructions are on that site. If you already have snap installed you can just install hascard via `sudo snap install hascard`. By default snap applications are isolated from the system and run in a sandbox. This means that hascard does not have permission to read or write any files on the system aside from those under `%HOME/snap/hascard`. To be able to read cards also in other directories under the home directory, hascard makes use of the `home` interface which might need to be enabled manually using `sudo snap connect hascard:home :home`.

  ### Install from source
  Another option is to build hascard and install it from source. For this you can use the Haskell build tool called [stack](https://docs.haskellstack.org/en/stable/README/#how-to-install), or [nix](https://nixos.org/). Then for example clone this repository somewhere:
  ```
  git clone https://github.com/Yvee1/hascard.git
  cd hascard
  ```
  and do `stack install hascard` or `nix-build` respectively.

  ## Cards
  Decks of cards are written in `.txt` files. Cards are seperated with a line containing three dashes `---`. For examples, see the [`/cards`](https://github.com/Yvee1/hascard/tree/master/cards) directory. In this section the 4 different cards are listed, with the syntax and how it is represented in the application.

  ### Definition
  This is the simplest card, it simply has a title and can be flipped to show the contents. For example the following card
  ```
  # Word or question
  Explanation or definition of this word, or the answer to the question.
  ```
  will result in
  ![](./recordings/definition.gif)

  ### Multiple choice
  This is a typical multiple choice question. The question starts with a `#` and the choices follow. Only one answer is correct, and is indicated by a `*`, the other questions are preceded by a `-`. As an example, the following text

  ```
  # Multiple choice question, (only one answer is right)
  - Choice 1
  * Choice 2 (this is the correct answer)
  - Choice 3
  - Choice 4
  ```

  gets rendered as
  ![](./recordings/multiple-choice.gif)

  ### Multiple answer
  Multiple choice questions with multiple possible answers is also possible. Here again the question starts with `#` and the options follow. Preceding each option is a box `[ ]` that is filled with a `*` or a `x` if it is correct. For example

  ```
  # Multiple answer question
  [*] Option 1 (this is a correct answer)
  [ ] Option 2
  [*] Option 3 (this is a correct answer)
  [ ] Option 4
  ```
  results in
  ![](./recordings/multiple-answer.gif)

  ### Open question
  Open questions are also supported. The words that have to be filled in should be surrounded by underscores `_`. Multiple answer possibilities can also be given by seperating them with vertical bars `|`. As an example, the card

  ```
  # Fill in the gaps
  The symbol â‚¬ is for the currency named _Euro_, and is used in the _EU|European Union_.
  ```
  behaves like this
  ![](./recordings/gapped-question.gif)

  ## Miscellaneous info
  Written in Haskell, UI built with [brick](https://github.com/jtdaugherty/brick) and parsing of cards done with [parsec](https://github.com/haskell/parsec). Recordings of the terminal were made using [terminalizer](https://github.com/faressoft/terminalizer).
license-name: BSD-3-Clause
