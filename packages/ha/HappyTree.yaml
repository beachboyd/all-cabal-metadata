homepage: https://github.com/MarisaKirisame/HappyTree#readme
changelog-type: markdown
hash: 0a421f9f7d2dfe565eb4abe84d71132958539d67bc6bd25720dfa7d7a44fff05
test-bench-deps:
  base: ! '>=4.7 && <5'
  constraints: ==0.9.1
  singletons: ==2.3.1
  generics-sop: ==0.3.1.0
  HappyTree: -any
  safe: ==0.3.15
maintainer: lolisa@marisa.moe
synopsis: Type Safe and End to End Decision Tree
changelog: ! '# Changelog for HappyTree


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  constraints: ==0.9.1
  singletons: ==2.3.1
  generics-sop: ==0.3.1.0
  safe: ==0.3.15
all-versions:
- 0.2018.1.5
- 0.2018.1.7
- 0.2018.1.8
author: Marisa Kirisame
latest: 0.2018.1.8
description-type: markdown
description: ! '# HappyTree


  Happy Tree is a end-to-end decision tree library in Haskell.


  That mean, it''s main selling point is, while most decision tree library support
  splitting on Discrete Category/Continuous Variable (Read: essentially Int and Double),
  Happy Tree let you split on any type, as long as you specify how to split on it.


  Want to decide on List or AST? No Problem!


  Want to use your custom quantile search like thingy to speed up splitting on continuous
  variable? Piece of Cake!


  Want to use different split strategy at the same time, splitting on the finest choice?
  You Name It: It form a monoid.


  ## Known Problem


  Can only split on finitely many type now. Cannot split on


  data Perfect a = Here a | More (Perfect (a, a)).

'
license-name: BSD-3-Clause
