homepage: https://github.com/agrafix/hasql-simple#readme
changelog-type: ''
hash: 2554df30f5dbff8e1ed89a2c16a3652db56efea328216704f4d0fec1f4e6635f
test-bench-deps: {}
maintainer: mail@athiemann.net
synopsis: A somewhat opinionated "simpler" API to hasql
changelog: ''
basic-deps:
  hasql: -any
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  time: ! '>=1.6'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.2'
  contravariant: ! '>=1.4'
  aeson: ! '>=1.1'
  vector: ! '>=0.12'
all-versions:
- 0.1.0.0
author: Alexander Thiemann
latest: 0.1.0.0
description-type: markdown
description: ! "# hasql-simple\n\n[![CircleCI](https://circleci.com/gh/agrafix/hasql-simple.svg?style=svg)](https://circleci.com/gh/agrafix/hasql-simple)\n\nA
  somewhat opinionated \"simpler\" API to hasql. This allows to write code like:\n\n```haskell\nimport
  Hasql.Query\nimport Hasql.Simple\nimport qualified Hasql.Decoders as D\n\ndata NewUser\n
  \   = NewUser\n    { nu_username :: !T.Text\n    , nu_email :: !T.Text\n    , nu_password
  :: !(Password 'PtHash)\n    } deriving (Show)\n\ncreateUserQ :: Query NewUser UserId\ncreateUserQ
  =\n    statement sql encoder decoder True\n    where\n      sql =\n          \"INSERT
  INTO login (username, email, password) VALUES ($1, $2, $3) RETURNING id;\"\n      encoder
  =\n          req nu_username\n          <> req nu_email\n          <> req nu_password\n
  \     decoder =\n          D.singleRow dbDecVal\n```\n\nThe `-simple` in the name
  is due to this type class approach beeing similar to the one found in `postgresql-simple`.
  All contributions (e.g. more instances and/or helper functions) are welcome, please
  send a PR.\n"
license-name: BSD-3-Clause
