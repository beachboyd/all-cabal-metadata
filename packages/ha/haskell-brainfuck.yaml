homepage: ''
changelog-type: ''
hash: 531bc702b7a4216cacb98165e5aa8fa13ba76af85b1b2ef7e676ed20fbe1c724
test-bench-deps:
  haskell-brainfuck: -any
  bytestring: ==0.10.4.0
  tasty-th: ==0.1.2
  base: ! '>=4.7 && <4.8'
  tasty-quickcheck: ==0.8.1
  mtl: ==2.1.3.1
  tasty: ==0.8.1.3
  QuickCheck: ==2.7.5
maintainer: Sebastian Galkin <paraseba@gmail.com>
synopsis: BrainFuck interpreter
changelog: ''
basic-deps:
  haskell-brainfuck: -any
  bytestring: ==0.10.4.0
  base: ==4.7.*
  parsec: ==3.1.5
  mtl: ==2.1.3.1
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Sebastian Galkin <paraseba@gmail.com>
latest: 0.1.0.1
description-type: markdown
description: ! "# haskell-brainfuck\n\nInterpreter for the\n[brainfuck programming
  language](http://www.muppetlabs.com/~breadbox/bf/)\n\n[![Build Status](https://api.travis-ci.org/paraseba/haskell-brainfuck.svg?branch=master)](https://travis-ci.org/paraseba/haskell-brainfuck)\n\nhaskel-brainfuck
  is distributed as a library, but it also includes an executable\nto run brainfuck
  programs. You can find haskell-brainfuck in\n[Hackage](https://hackage.haskell.org/package/haskell-brainfuck-0.1.0.0)\n\n##
  Usage\n### Library\n```haskell\nimport HaskBF.Eval\nimport qualified Data.ByteString.Lazy
  as BS\nimport Control.Monad.State\n\nmain = do\n  -- The following will evaluate
  the file using stdin and stdout for I/O.\n  -- Evaluation results in an EvalResult\n\n
  \ file <- BS.readFile \"/path/to/file.bf\"\n  (EvalSuccess _) <- evalBS defaultIOMachine
  file\n  print \"ok\"\n\n\n  -- The following will evaluate the file using the State
  monad and input\n  -- provided by input\n\n  let input  = []\n      output = []\n
  \     result = execState (evalStr simulatorMachine \"+.>-.\") (SimState input output)\n
  \ print $ simStateOutput result == [1, -1]\n```\n\n### Executable\n```bash\nbrainfuck
  fib.bf\n```\n\n## Tests\nYou can run the test suite with\n```bash\ncabal test\n```\n\n##
  Documentation\nhttp://paraseba.github.io/haskell-brainfuck/\n"
license-name: MIT
