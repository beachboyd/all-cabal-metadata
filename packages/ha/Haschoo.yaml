homepage: http://iki.fi/matti.niemenmaa/misc-projects.html#haschoo
changelog-type: ''
hash: ba4a650e0b6035166826cd10fddf201b9b42894cd3723862348b813a15102748
test-bench-deps: {}
maintainer: Matti Niemenmaa <matti.niemenmaa+haschoo@iki.fi>
synopsis: Minimalist R5RS Scheme interpreter
changelog: ''
basic-deps:
  base: ==4.*
  monad-loops: ==0.3.*
  parsec: ! '>=2.1 && <3.2'
  list-tries: ! '>=0.1 && <0.5'
  array: ! '>=0.4 && <0.5'
  mtl: ! '>=1.1 && <2.2'
  numbers: ! '>=2009.5.28 && <3000.1'
all-versions:
- '0.0'
- '0.1'
- 0.1.1
- 0.1.2
author: Matti Niemenmaa
latest: 0.1.2
description-type: text
description: ! "Haschoo: the Scheme interpreter to be sneezed at\n=======\n\nHaschoo
  is a little R5RS [1] interpreter written in Haskell for a university\ncourse. The
  name, if it's not obvious, is a portmanteau of \"Haskell\", \"Scheme\",\nand \"achoo\",
  the last of which is meant to signify something along the lines of\nit being a sneeze's
  worth of code and not a particularly serious endeavour.\n\nFor licensing information,
  see LICENSE.txt.\n\nUsage\n-----\n\nHaschoo is quite spartan. It doesn't understand
  any command line options: if\ngiven no parameters, it becomes a REPL which terminates
  on end-of-file,\notherwise it runs the file named by each argument as a standalone
  Scheme\nprogram.\n\nBuilding\n--------\n\nHaschoo is not written in standard Haskell
  98, but depends on GHC-only (at the\ntime of writing) compiler extensions, so you'll
  need GHC to build it. Get it at\nhttp://www.haskell.org/ghc/; version 6.10.2 was
  used for testing, but later\n6.10 versions should work as well.\n\nNowadays you
  can also try the Haskell Platform, intended as a simple installer\nto get you started
  quickly: http://hackage.haskell.org/platform/\n\nIf you have the cabal-install tool
  installed ([2] or the Haskell Platform),\ninstalling Haschoo without downloading
  it manually should be as simple as:\n\ncabal install Haschoo\n\nIf you've already
  got Haschoo downloaded, and you have cabal-install, try:\n\ncabal configure\ncabal
  build\ncabal install\n\nIf you don't have cabal-install, the following commands,
  run from Haschoo's root\ndirectory, should also work:\n\nrunhaskell Setup.hs configure\nrunhaskell
  Setup.hs build\nrunhaskell Setup.hs install\n\nGoal\n----\n\nIf Haschoo can be said
  to have had a goal, it is minimalism: it tries to be a\nbit of a DeathStation 9000
  (see e.g. [3]) for R5RS. Currently it achieves this\nin the following ways:\n\n-
  No non-R5RS procedures are implemented or recognized.\n- No extensions are made
  to existing R5RS procedures.\n- Only two optional procedures are implemented: -
  and / for more than two\n  arguments.\n- Literal lists, strings, and vectors are
  immutable, as allowed by R5RS 3.4.\n\nThe basic idea was that if something works
  in Haschoo, it should work in any\nR5RS system. That's not quite the current situation,
  but it seems to be mostly\ntrue, at least based on my limited testing.\n\nKnown
  bugs\n----------\n\nDue to time and energy constraints I didn't manage to iron out
  the following:\n\n- Continuations, regretfully, are not implemented at all.\n\n-
  Nested ellipses in macros don't always work correctly.\n  (e.g. tests/macros/nested-ellipses.scm)\n\n-
  The \"read\" procedure doesn't work very well: due to annoying technical\n  issues,
  it works by reading one character at a time and then trying to parse\n  the string
  gathered thus far, stopping on a successful parse. Hence reading\n  \"-1\" gives
  \"-\" followed by \"1\".\n\n- Quasiquotation has some silly bugs. For example, `(1
  2 . ,(list 3 4)) results\n  in '(1 2 unquote (list 3 4)) instead of '(1 2 (list
  3 4)).\n\nNo doubt there are many other lurking bugs. Time and energy constraints
  tend to\nlimit testing as well.\n\nReferences\n----------\n\n[1]: http://schemers.org/Documents/Standards/R5RS/\n[2]:
  http://hackage.haskell.org/trac/hackage/wiki/CabalInstall\n[3]: http://wikibin.org/articles/deathstation-9000.html\n"
license-name: BSD-3-Clause
