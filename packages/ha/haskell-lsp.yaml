homepage: https://github.com/alanz/haskell-lsp
changelog-type: markdown
hash: 72b6c2c6675e56ee5caeb41c7d33472387832db884d444d7d0c64a380de2f695
test-bench-deps:
  bytestring: -any
  stm: -any
  base: -any
  yi-rope: -any
  hspec: -any
  text: -any
  filepath: -any
  data-default: -any
  sorted-list: ==0.2.1.*
  containers: -any
  lens: ! '>=4.15.2'
  quickcheck-instances: -any
  network-uri: -any
  hashable: -any
  QuickCheck: -any
  aeson: -any
  haskell-lsp: -any
  directory: -any
maintainer: alan.zimm@gmail.com
synopsis: Haskell library for the Microsoft Language Server Protocol
changelog: |
  # Revision history for haskell-lsp

  ## 0.10.0.0 -- 2019-04-22

  * Add `withProgress` and `withIndefiniteProgress` functions for sending
    `window/progress` notifications.

  ## 0.9.0.0

  * Add `MarkupContent` to `HoverResponse`, and (some) json roundtrip tests.

  ## 0.8.2.0 -- 2019-04-11

  * Add `applyTextEdit` and `editTextEdit` helpers
  * Set the typedefinitionProvider capability if it has a handler
  * Add stack files for GHC 8.4.4 and 8.6.4

  ## 0.8.1.0 -- 2019-02-28

  * Update Handler to delegate to typeDefinitionHandler instead of
    definitionHandler. by @fendor

  ## 0.8.0.1 -- 2018-10-27

  * Support GHC 8.6.1 by loosening constraints. Via @domenkozar

  ## 0.8.0.0 -- 2018-09-08

  * Update Hover to be a nullable according to spec
  * Move Lenses into a separate module, `Language.Haskell.LSP.Types.Lens`

  ## 0.7.0.0 -- 2018-08-14

  * Update CompletionItem
   * Add `commitCharacters` field
   * Add `MarkupContent` option for `documentation`
   * Add `preselect` field
  * Add CompletionContext
  * Add new server capabilities
  * Add workspace folder support
  * Add document color and color presentation
  * Add folding range support
  * Add goto type support
  * s/TH/Types/g
   * Move all types into haskell-lsp-types
   * Hide Language.Haskell.LSP.TH.DataTypesJSON - Use Language.Haskell.LSP.Types instead
  * Add lenses for Language.Haskell.LSP.Types.Capabilities


  ## 0.6.0.0 -- 2018-08-06

  * Add new DocumentSymbol type and heirarchal support
  * Rename CommandOrCodeAction to CAResult
  * Add handler for 'textDocument/implementation' request from client
  * Bump stack resolvers for lts 11 and lts 12

  ## 0.5.0.0  -- 2018-08-03

  * Update Command.arguments to match specification
  * Update ClientCapabilities to v3.10
  * Add MarkupContent
  * Add new CompletionKinds
  * Add new SymbolKinds
  * Add preset version capabilities

  ## 0.4.0.0  -- 2018-07-10

  * CodeAction support as per v3.8 of the specification, by @Bubba
  * Update VersionedTextDocumentIdentifier to match specification, by @Bubba

  ## 0.3.0.0

  * Handle TextDocumentSync fallbacks with new TDS type.

  ## 0.2.3.0  -- 2018-99-99

  * GHC 8.4.3 support
  * Apply changes to the VFS in the order received in a message.
    This fixes vscode undo behaviour. By @Bubba
  * Introduce additional error codes as per the LSP spec. By @Bubba
  * Add preliminary support for recording LSP traffic for later playback
    in test scenarios. By @Bubba

  ## 0.2.2.0  -- 2018-05-04

  * Make Diagnostic relatedInformation optional, as per the LSP Spec. By @Bubba.

  ## 0.2.1.0  -- 2018-05-02

  * Support GHC 8.4.2
  * Split into two packages
  * Language.Haskell.LSP.TH.DataTypesJSON becomes Language.Haskell.LSP.Types
  * Diagnostic now has _relatedInformation. Can default it to mempty. via @AlexeyRaga
  * Correct the name of the DidChangeWatchedFilesParams field, by @robrix
  * Make sure to escape URIs properly for Windows file paths
    Fixes #75. Also added a couple of pretty dumb tests!, by @johnsonw


  ## 0.2.0.1  -- 2017-12-27

  * Built with LTS 10.1 (stack)
  * Don't escape semicolons after drive letters by @nponeccop
  * Add Foldable and Traversable instance to List by @noughtmare

  ## 0.2.0.0  -- 2017-11-23

  * Major changes as implementation continued. Now seems stable, used in haskell-ide-engine

  ## 0.1.0.0  -- 2017-07-19

  * First version. Implements version 3 of the Microsoft Language
    Server Protocol
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.9 && <4.13'
  time: -any
  yi-rope: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  parsec: -any
  data-default: -any
  sorted-list: ==0.2.1.*
  containers: -any
  lens: ! '>=4.15.2'
  hslogger: -any
  network-uri: -any
  mtl: -any
  hashable: -any
  transformers: -any
  haskell-lsp-types: ! '>=0.10.0'
  aeson: ! '>=1.0.0.0'
  haskell-lsp: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.1.0
- 0.8.2.0
- 0.9.0.0
- 0.10.0.0
author: Alan Zimmerman
latest: 0.10.0.0
description-type: markdown
description: |+
  [![CircleCI](https://img.shields.io/circleci/project/github/alanz/haskell-lsp.svg)](https://circleci.com/gh/alanz/haskell-lsp)
  [![Hackage](https://img.shields.io/hackage/v/haskell-lsp.svg)](https://hackage.haskell.org/package/haskell-lsp)

  # haskell-lsp
  Haskell library for the Microsoft Language Server Protocol

  Warning: this library and its associated ecosystem is under development at the
  moment. So do not have high expectations, it is not ready for casual use.

  ## Hacking

  To see this library in use you need to install the [haskell-ide-engine](https://github.com/alanz/haskell-ide-engine/)

      git clone https://github.com/haskell/haskell-ide-engine --recursive
      cd haskell-ide-engine
      stack install

  This will put the `hie` executable in your path.

  Then, run the plugin in vscode:

      git clone https://github.com/alanz/vscode-hie-server
      cd vscode-hie-server
      code .

  In vscode, press F5 to run the extension in development mode.

  You can see a log from `hie` by doing

      tail -F /tmp/hie-vscode.log

  There are also facilities on the code to send back language-server-protocol log
  and show events.

  It can also be used with emacs, see https://github.com/emacs-lsp/lsp-haskell

  ## Using the example server

      stack install

  will generate a `lsp-hello` executable.

  Changing the server to be called in the [`vscode-hie-server`](https://github.com/alanz/vscode-hie-server/blob/master/hie-vscode.sh#L21) plugin from `hie` to
  `lsp-hello` will run the example server instead of hie.

  Likewise, changing the executable in `lsp-haskell` for emacs.

  ## Useful links

  - https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md

  ## Other resource

  See #haskell-ide-engine on IRC freenode

license-name: MIT
