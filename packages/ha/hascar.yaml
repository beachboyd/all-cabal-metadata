homepage: https://github.com/VirtualForgeGmbH/hascar
changelog-type: markdown
hash: 1aea857d11ddc5f196d2b2b33ce3e510109126a461ade9b69f24cf1a6ef04f24
test-bench-deps:
  bytestring: -any
  hascar: -any
  path: -any
  base: -any
  hex: -any
  conduit: -any
  cryptohash: -any
maintainer: Hans-Christian Esperer <hc@hcesperer.org>
synopsis: Decompress SAPCAR archives
changelog: ! "0.2.2.1\n-------\n\n- When unwrapping transport files from PAT files,\n
  \ name the transport files properly\n- Add an option to specify the extraction directory\n
  \ (default: CWD)\n\n0.2.2.0\n-------\n\n- Add an option to extract transport files
  from PAT\n  files automatically\n\n0.2.1.2\n-------\n\n- Remove version constraints,
  rely on stack/nixos instead\n  for dependency management\n\n0.2.1.1\n-------\n\n-
  Make it compile with ghc-8.0.2\n\n0.2.1.0\n-------\n\n- Make \"SapCar\" a real type
  instead of a type synonym\n- Use the type system to prevent \"CarEntry\"s to escape
  the monad\n\n0.2.0.0\n-------\n\n- Use ST unboxed arrays instead of Data.Sequence
  and\n  avoid usage of \"temporary lists\" during conversion\n  to ByteStrings\n-
  Add a parameter \"size\" to the decompressBlock\n  function for more efficiency\n-
  Rename the decompressBlock function to\n  decompressBlocks for clarity\n- Limit
  the maximum SAPCAR block size to make memory\n  exhaustion attacks a bit less easy\n-
  Compile the application single threadedly for more\n  efficiency (yes, it does help
  in this case!)\n\n0.1.1.0\n-------\n\n- Expose the decompressBlock function directly\n"
basic-deps:
  exceptions: -any
  bytestring: -any
  ansi-wl-pprint: -any
  hascar: -any
  unix: -any
  path: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  filepath: -any
  gitrev: -any
  conduit: -any
  array: -any
  containers: -any
  binary: -any
  mtl: -any
  transformers: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.2.0
- 0.2.2.1
author: Hans-Christian Esperer <hc@hcesperer.org>
latest: 0.2.2.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/VirtualForgeGmbH/hascar.svg?branch=master)](https://travis-ci.org/VirtualForgeGmbH/hascar)\n\n#
  What is hascar?\n\nHASCAR is a free unzip utility for SAP's SAPCAR format. You can
  use it to\ndecompress sap car files on the command line. The command line utility
  also\nsupports unwrapping of transport files that are contained inside patch files.\n(Option
  -p, --depat) You can also use it as a library in your own haskell programs. So\nfar,
  only the latest version of sapcar files are is supported, which is 2.01.\n\nIt is
  implemented 100% in haskell, including the lzh decompression\nroutine.\n\nThis is
  not yet in a stable state. It should successfully unpack lzh\ncompressed files and
  uncompressed files.\n\nThe SAPCAR container format decoder is based on [research
  done by\nMartin Gallo](https://github.com/CoreSecurity/pysap) with further\ninvestigation
  by Hans-Christian Esperer <hc@hcesperer.org>, who also\ndid the LZH decompressor
  reimplementation.\n\nWhat is supported:\n\n* Reading SAPCAR archives version 2.01
  only\n* Unpacking files that are LZH compressed\n* Unpacking files that are not
  compressed\n* Unpacking transport files are wrapped inside a PAT file\n\nTODO:\n\n*
  Implement LZC\n* Implement packing functionality\n* Maybe implement signature checking\n*
  Make the LZH algorithm more efficient (the author just about\n  started to learn
  haskell when he embarked on implementing\n  that algorithm :-)\n  => Some work on
  this has been done; more is required.\n* Implement CRC checking\n\n\n# Installing
  hascar\n\n## nixos\n\nUsers of [nixos](https://nixos.org) can simply install hascar
  by issuing\n\"nix-env -iaP haskellPackages.hascar\". Or if you only need it temporarily,
  open\na nix-shell like this: \"nix-shell -p haskellPackages.hascar\"\n\n## FreeBSD/GNU_Linux/OS
  X/Windows\n\nTo compile and install, first [get stack](\nhttp://docs.haskellstack.org/en/stable/README/),
  then issue:\n\nstack build && stack install\n\nhascar will be installed to ~/.local/bin
  \ . You should set your PATH variable to point\nto this directory.\n\n# Verifying
  signatures and encrypted archives\n\nSince both use a proprietary crypto API, this
  is currently not supported.\n\n# Usage\n\nRun hascar with the -h flag to get help.
  The basic usage should be the\nsame as with SAP(R)'s sapcar tool. It should be noted
  that the used\ncommand line parser is a bit more strict than what you might be used\nto.\n\n#
  Extracting transport files from PAT files\n\nSAR files can contain transport files
  that are wrapped inside PAT (patch)\nfiles. Since hascar 0.2.2.0 the option -p is
  offered, that will try to\nautomatically detect PAT files. If such a file is detected,
  the contained\ntransport file is extracted.\n"
license-name: GPL-2.0-only
