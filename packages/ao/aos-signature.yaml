homepage: https://github.com/adjoint-io/aos-signature#readme
changelog-type: ''
hash: de3950f558259f0e8a3a59cdbde87539d2dce4bc832ca436743a78abb6aaf082
test-bench-deps:
  aos-signature: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  protolude: ! '>=0.2'
  memory: -any
  cryptonite: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  QuickCheck: -any
maintainer: Adjoint Inc (info@adjoint.io)
synopsis: An implementation of the AOS signatures
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  protolude: ! '>=0.2'
  memory: -any
  cryptonite: -any
  mtl: -any
  random: -any
all-versions:
- '0.1.0'
- '0.1.1'
author: ''
latest: '0.1.1'
description-type: markdown
description: ! "<p align=\"center\">\n  <a href=\"http://www.adjoint.io\"><img src=\"https://www.adjoint.io/assets/img/adjoint-logo@2x.png\"
  width=\"250\"/></a>\n</p>\n\n[![CircleCI](https://circleci.com/gh/adjoint-io/aos-signature.svg?style=svg&circle-token=ec783d4839d6a26e274796dd6e014399eac3918b)](https://circleci.com/gh/adjoint-io/aos-signature)\n[![Hackage](https://img.shields.io/hackage/v/aos-signature.svg)](http://hackage.haskell.org/package/aos-signature)\n\nA
  ring signature, also know as a Spontaneous Anonymous Group (SAG) or 1-out-of-n signature,
  convinces a verifier that a message is signed by any member in a group of n independent
  signers without allowing the verifier to identify who the signer was.\n\nAbe-Ohkubo-Suzuki
  Ring Signatures\n=================================\n\nIn their paper, \"1-out-of-n
  Signatures from a Variety of Keys\"[1], Abe, Ohkubo and Suzuki (AOS) present a method
  to construct a 1-out-of-n signature scheme that allows mixture use of different
  flavours of keys at the same time.\n\n### Linkable Spontaneous Anonymous Group (LSAG)
  Signature\n\nLiu, et al.[2] add the property of linkability to ring signatures.
  Linkability means\nthat two signatures by the same signer can be identified as such,
  but the signer remains anonymous. It adds the feature of claimability, which allows
  a signer to claim responsibility by providing proof of having generated a given
  signature.\n\nA LSAG signature scheme satisfies three properties:\n\n- **Anonymity**:
  A signer cannot be distinguished from a pool of `t` commitments (public keys).\n-
  **Spontaneity**: No group secret, group manager of secret sharing setup stage.\n-
  **Linkability**: Two signatures by the same signer can be linked.\n\n### A LSAG
  Signature Scheme over elliptic curves\n\nIt consists of two parts: signature generation
  and signature verification. Let L = {y<sub>0</sub>, ..., y<sub>t-1</sub>} be a list
  of `t` public keys. Let H:{0, 1}* -> Z<sub>n</sub> where `H` is a cryptographic
  hash function and `n` is the order of the elliptic curve over a finite field F<sub>q</sub>.
  For i ∈ {0, ..., t-1},\neach user `i` has a distinct public key y<sub>i</sub> and
  a private key x<sub>i</sub>.\n\n### Signature Generation\n\nLet k ∈ {0, ..., t-1}
  be the position of the prover's public key in the list `L`\nof public keys. Let
  x<sub>k</sub> be its private key. The LSAG signature of a message m ∈ {0,1}* is
  generated by the following steps:\n\n1. Compute h = [H(L)] \\* g, where `g` is the
  generator of the elliptic curve, and\ny = [x<sub>k</sub>] \\* h. Both computations
  are the product of a scalar and a point in the curve.\n\n2. Select u ∈ Z<sub>n</sub>
  and compute the first challenge ch<sub>k+1</sub> = H(L, y, m, [u] \\* g, [u] \\*
  h)\n\n3. For i in {k+1, ..., t-1, 0, ... k-1}, choose s<sub>i</sub> ∈ Z<sub>n</sub>
  and compute the remaining challenges: ch<sub>i+1</sub> = H(L, y, m, [s<sub>i</sub>]
  \\* g + [ch<sub>i</sub>] \\* y<sub>i</sub>, [s<sub>i</sub>] \\* h + [ch<sub>i</sub>]
  \\* y)\n\n4. With the last ch<sub>k</sub> computed, calculate s<sub>k</sub> = (u
  - x<sub>k</sub> \\* ch<sub>k</sub>) mod n\n\nThe signature is (ch<sub>0</sub>, [s<sub>0</sub>,
  ..., s<sub>t-1</sub>], y).\n\n### Signature Verification\n\nGiven a message `m`,
  a signature of a message (ch<sub>0</sub>, [s<sub>0</sub>, ..., s<sub>t-1</sub>],
  y) and a list of public keys `L`, an honest verifier checks a signature as follows:\n\n1.
  For i in {0, ..., t-1} compute ch<sub>i+1</sub> = H(L, y, m, [s<sub>i</sub>] \\*
  g + [ch<sub>i</sub>] \\* y<sub>i</sub>, [s<sub>i</sub>] \\* h + [ch<sub>i</sub>]
  \\* y), where h = [H(L)] \\* g.\n\n2. Check whether c<sub>0</sub> is equal to H(L,
  y, m, [s<sub>t-1</sub>] \\* g + [ch<sub>t-1</sub>] \\* y<sub>t-1</sub>, [s<sub>t-1</sub>]
  \\* h + [ch<sub>t-1</sub>] \\* y)\n\n```haskell\ntestSignature\n  :: ECC.Curve\n
  \ -> Int\n  -> ByteString\n  -> IO Bool\ntestSignature curve nParticipants msg =
  do\n  -- Generate public and private keys\n  (pubKey, privKey) <- ECC.generate curve\n
  \ -- Generate random foreign participants\n  extPubKeys <- genNPubKeys curve nParticipants\n
  \ -- Position of the signer's key in the set of public keys\n  k <- fromInteger
  <$> generateBetween 0 (toInteger $ length extPubKeys - 1)\n  -- List of public keys\n
  \ let pubKeys = insert k pubKey extPubKeys\n  -- Sign message with list of public
  keys and signer's key pair\n  signature <- sign pubKeys (pubKey, privKey) msg\n
  \ -- Verify signature\n  pure $ verify pubKeys signature msg\n```\n\n**References**:\n1.
  M. Abe, M. Ohkubo, K. Suzuki. \"1-out-of-n Signatures from a Variety of Keys\",
  2002\n2. K. Liu, K. Wei, S. Wong. \"Linkable Spontaneous Anonymous Group\nSignature
  for Ad Hoc Groups\", 2004\n\n\n**Notation**:\n\n1. `[b] * P`: multiplication of
  a point P and a scalar b over an elliptic curve defined over a finite field modulo
  a prime number\n\nLicense\n-------\n\n```\nCopyright 2018 Adjoint Inc\n\nLicensed
  under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file
  except in compliance with the License.\nYou may obtain a copy of the License at\n\n
  \   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable
  law or agreed to in writing, software\ndistributed under the License is distributed
  on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  or implied.\nSee the License for the specific language governing permissions and\nlimitations
  under the License.\n```\n"
license-name: LicenseRefApache
