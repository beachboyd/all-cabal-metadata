homepage: https://github.com/EarnestResearch/kubernetes-webhook-haskell#readme
changelog-type: ''
hash: 80d4293fec720533c338f65846cb8753f6c9edb9cf93c19e991821e0ceb78eed
test-bench-deps: {}
maintainer: amarrella@earnestresearch.com
synopsis: Create Kubernetes Admission Webhooks in Haskell
changelog: ''
basic-deps:
  bytestring: '>=0.10.8 && <0.11'
  base: '>=4.7 && <5'
  base64-bytestring: '>=1.0.0 && <1.3'
  unordered-containers: '>=0.2.10 && <0.3'
  text: '>=1.2.3 && <1.3'
  binary: '>=0.8.6 && <0.9'
  aeson: '>=1.4.6 && <1.6'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
author: Alessandro Marrella
latest: 0.2.0.3
description-type: markdown
description: "# kubernetes-webhook-haskell\n\nThis library lets you create [Kubernetes
  Admission Webhooks](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)
  in Haskell.\n\nUsing webhooks in Kubernetes requires some configuration, in the
  [dhall](./dhall) directory you can find some useful templates that you can reuse
  to deploy your webhooks. [cert-manager](https://cert-manager.io/docs/) is required
  to be installed in the cluster to use the templates.\n\nExample webhook using Servant:\n```hs\nmodule
  Kubernetes.Example\n    ( startApp,\n    app,\n    )\nwhere\n\nimport Control.Monad.IO.Class\nimport
  qualified Data.Aeson as A\nimport qualified Data.ByteString as BS\nimport qualified
  Data.HashMap.Strict as HM\nimport Data.Text\nimport GHC.Generics\nimport qualified
  Kubernetes.Webhook as W\nimport Network.Wai\nimport Network.Wai.Handler.Warp\nimport
  Network.Wai.Handler.WarpTLS\nimport Servant\nimport System.Environment\n\ntype API
  =\n\"mutate\" :> ReqBody '[JSON] W.AdmissionReviewRequest :> Post '[JSON] W.AdmissionReviewResponse\n\ndata
  Toleration\n= Toleration\n    { effect :: Maybe TolerationEffect,\n        key ::
  Maybe Text,\n        operator :: Maybe TolerationOperator,\n        tolerationSeconds
  :: Maybe Integer,\n        value :: Maybe Text\n    }\nderiving (Generic, A.ToJSON)\n\ndata
  TolerationEffect = NoSchedule | PreferNoSchedule | NoExecute deriving (Generic,
  A.ToJSON)\n\ndata TolerationOperator = Exists | Equal deriving (Generic, A.ToJSON)\n\ntestToleration
  :: Toleration\ntestToleration =\nToleration\n    { effect = Just NoSchedule,\n    key
  = Just \"dedicated\",\n    operator = Just Equal,\n    tolerationSeconds = Nothing,\n
  \   value = Just \"test\"\n    }\n\nstartApp :: IO ()\nstartApp = do\nlet tlsOpts
  = tlsSettings \"/certs/tls.crt\" \"/certs/tls.key\"\n    warpOpts = setPort 8080
  defaultSettings\nrunTLS tlsOpts warpOpts app\n\napp :: Application\napp = serve
  api server\n\napi :: Proxy API\napi = Proxy\n\nserver :: Server API\nserver = mutate\n\nmutate
  :: W.AdmissionReviewRequest -> Handler W.AdmissionReviewResponse\nmutate req = pure
  $ W.mutatingWebhook req (\\_ -> Right addToleration)\n\naddToleration :: W.Patch\naddToleration
  = \nW.Patch\n    [ W.PatchOperation\n        { op = W.Add,\n        path = \"/spec/tolerations/-\",\n
  \       from = Nothing,\n        value = Just $ A.toJSON testToleration\n        }\n
  \   ]\n```\n\n"
license-name: MIT
