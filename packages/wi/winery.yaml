homepage: https://github.com/fumieval/winery#readme
changelog-type: markdown
hash: d14af57626272b55ad741f9f2adf07973b0102c3278d2ccd811300ead98b3570
test-bench-deps:
  serialise: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  megaparsec: ! '>=6.0.0'
  semigroups: -any
  gauge: -any
  containers: -any
  cassava: -any
  binary: -any
  mtl: -any
  hashable: -any
  prettyprinter: -any
  transformers: -any
  deepseq: -any
  scientific: -any
  QuickCheck: -any
  winery: -any
  aeson: -any
  cpu: -any
  vector: -any
  prettyprinter-ansi-terminal: -any
  directory: -any
maintainer: fumiexcel@gmail.com
synopsis: Sustainable serialisation library
changelog: ! '# 0.3


  * Supported `UTCTime`

  * Added an instance for lazy `ByteString`

  * Added `toEncodingWithSchema`


  # 0.2


  * Renamed `extract*With` to `extract*By` for consistency

  * Added `hPut`

  * Improved the performance

  * Added `-J` option to `winery` which exports a JSON

  * Decoder now throws `DecodeException` rather than error calls


  # 0.1.1


  * Add `Data.Winery.Query`

  * The command line tool supports a simple query language


  # 0.1


  Overhauled the encoding; Sorry, incompatible with 0


  # 0


  Initial release

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  megaparsec: ! '>=6.0.0'
  semigroups: -any
  containers: -any
  mtl: -any
  hashable: -any
  prettyprinter: -any
  transformers: -any
  scientific: -any
  winery: -any
  aeson: -any
  cpu: -any
  vector: -any
  prettyprinter-ansi-terminal: -any
all-versions:
- '0'
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
author: Fumiaki Kinoshita
latest: 0.3.1
description-type: markdown
description: ! "# winery\n\nwinery is a serialisation library for Haskell.\n\n* __Fast
  encoding__: can create a bytestring or write to a handle efficiently\n* __Compact
  representation__: uses VLQ by default. Separates schemata and contents\n* __Stateless
  decoding__: you can decode a value without reading all the leading bytes\n* __Inspectable__:
  data can be read without the original instance\n\n## Interface\n\nThe interface
  is simple; `serialise` encodes a value with its schema, and\n`deserialise` decodes
  a ByteString using the schema in it.\n\n```haskell\nclass Serialise a\n\nserialise
  :: Serialise a => a -> B.ByteString\ndeserialise :: Serialise a => B.ByteString
  -> Either String a\n```\n\nIt's also possible to serialise schemata and data separately.\n\n```haskell\n--
  Note that 'Schema' is an instance of 'Serialise'\nschema :: Serialise a => proxy
  a -> Schema\nserialiseOnly :: Serialise a => a -> B.ByteString\n```\n\n`getDecoder`
  gives you a deserialiser.\n\n```haskell\ngetDecoder :: Serialise a => Schema ->
  Either StrategyError (ByteString -> a)\n```\n\nFor user-defined datatypes, you can
  either define instances\n\n```haskell\ninstance Serialise Foo where\n  schemaVia
  = gschemaViaRecord\n  toEncoding = gtoEncodingRecord\n  deserialiser = gdeserialiserRecord
  Nothing\n```\n\nfor single-constructor records, or just\n\n```haskell\ninstance
  Serialise Foo\n```\n\nfor any ADT. The former explicitly describes field names in
  the schema, and the\nlatter does constructor names.\n\n## Streaming output\n\nYou
  can write data to a handle without allocating a ByteString. You can see the\nlength
  before serialisation.\n\n```haskell\ntoEncoding :: Serialise a => a -> Encoding\nhPutEncoding
  :: Handle -> Encoding -> IO ()\ngetSize :: Encoding -> Int\n```\n\n## The schema\n\nThe
  definition of `Schema` is as follows:\n\n```haskell\ndata Schema = SSchema !Word8\n
  \ | SUnit\n  | SBool\n  | SChar\n  | SWord8\n  | SWord16\n  | SWord32\n  | SWord64\n
  \ | SInt8\n  | SInt16\n  | SInt32\n  | SInt64\n  | SInteger\n  | SFloat\n  | SDouble\n
  \ | SBytes\n  | SText\n  | SList !Schema\n  | SArray !(VarInt Int) !Schema -- fixed
  size\n  | SProduct [Schema]\n  | SProductFixed [(VarInt Int, Schema)] -- fixed size\n
  \ | SRecord [(T.Text, Schema)]\n  | SVariant [(T.Text, [Schema])]\n  | SFix Schema
  -- ^ binds a fixpoint\n  | SSelf !Word8 -- ^ @SSelf n@ refers to the n-th innermost
  fixpoint\n  deriving (Show, Read, Eq, Generic)\n```\n\nThe `Serialise` instance
  is derived by generics.\n\nThere are some special schemata:\n\n* `SSchema n` is
  a schema of schema. The winery library stores the concrete schema of `Schema` for
  each version, so it can deserialise data even if the schema changes.\n* `SFix` binds
  a fixpoint.\n* `SSelf n` refers to the n-th innermost fixpoint bound by `SFix`.
  This allows it to provide schemata for inductive datatypes.\n\n## Backward compatibility\n\nIf
  having default values for missing fields is sufficient, you can pass a\ndefault
  value to `gdeserialiserRecord`:\n\n```haskell\n  deserialiser = gdeserialiserRecord
  $ Just $ Foo \"\" 42 0\n```\n\nYou can also build a custom deserialiser using the
  Alternative instance and combinators such as `extractField`, `extractConstructor`,
  etc.\n\n## Pretty-printing\n\n`Term` can be deserialised from any winery data. It
  can be pretty-printed using the `Pretty` instance:\n\n```\n{ bar: \"hello\"\n, baz:
  3.141592653589793\n, foo: Just 42\n}\n```\n\nYou can use the `winery` command-line
  tool to inspect values.\n\n```\n$ winery '.[:10] | .first_name .last_name' benchmarks/data.winery\nShane
  Plett\nMata Snead\nLevon Sammes\nIrina Gourlay\nBrooks Titlow\nAntons Culleton\nRegine
  Emerton\nStarlin Laying\nOrv Kempshall\nElizabeth Joseff\nCathee Eberz\n```\n\nAt
  the moment, the following queries are supported:\n\n* `.` return itself\n* `.[]`
  enumerate all the elements in a list\n* `.[i]` get the i-th element\n* `.[i:j]`
  enumerate i-th to j-th items\n* `.foo` Get a field named `foo`\n* `F | G` compose
  queries (left to right)\n\n## Benchmark\n\n```haskell\ndata TestRec = TestRec\n
  \ { id_ :: !Int\n  , first_name :: !Text\n  , last_name :: !Text\n  , email :: !Text\n
  \ , gender :: !Gender\n  , num :: !Int\n  , latitude :: !Double\n  , longitude ::
  !Double\n  } deriving (Show, Generic)\n```\n\n(De)serialisation of the datatype
  above using generic instances:\n\n```\nserialise/list/winery                    mean
  847.4 μs  ( +- 122.7 μs  )\nserialise/list/binary                    mean 1.221
  ms  ( +- 169.0 μs  )\nserialise/list/serialise                 mean 290.4 μs  (
  +- 34.98 μs  )\nserialise/item/winery                    mean 243.1 ns  ( +- 27.50
  ns  )\nserialise/item/binary                    mean 1.080 μs  ( +- 75.82 ns  )\nserialise/item/serialise
  \                mean 322.4 ns  ( +- 21.09 ns  )\nserialise/file/winery                    mean
  681.9 μs  ( +- 247.0 μs  )\nserialise/file/binary                    mean 1.731
  ms  ( +- 611.6 μs  )\nserialise/file/serialise                 mean 652.9 μs  (
  +- 185.8 μs  )\ndeserialise/winery                       mean 733.2 μs  ( +- 11.70
  μs  )\ndeserialise/binary                       mean 1.582 ms  ( +- 122.3 μs  )\ndeserialise/serialise
  \                   mean 823.3 μs  ( +- 38.08 μs  )\n\n```\n\nNot bad, considering
  that binary and serialise don't encode field names.\n"
license-name: BSD-3-Clause
