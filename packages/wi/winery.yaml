homepage: https://github.com/fumieval/winery#readme
changelog-type: markdown
hash: f2baa8a0af1413652060a5509b3d4475cfacc81b6ff67fd617218ec346f17d2b
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  mtl: -any
  hashable: -any
  prettyprinter: -any
  transformers: -any
  winery: -any
  vector: -any
  prettyprinter-ansi-terminal: -any
maintainer: fumiexcel@gmail.com
synopsis: Sustainable serialisation library
changelog: ! '# 0


  Initial release

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  mtl: -any
  hashable: -any
  prettyprinter: -any
  transformers: -any
  winery: -any
  vector: -any
  prettyprinter-ansi-terminal: -any
all-versions:
- '0'
author: Fumiaki Kinoshita
latest: '0'
description-type: markdown
description: ! "# winery\n\nwinery is a serialisation library for Haskell. It tries
  to achieve two\ngoals: compact representation and perpetual inspectability.\n\nThe
  `binary` library provides a compact representation, but there is no way to\ninspect
  the serialised value without the original instance.\n\nThere's `serialise`, which
  is an alternative library based on CBOR. Every value has to be accompanied with
  tags, so it tends to be redundant for arrays of small values. Encoding records with
  field names is also redudant.\n\n## Interface\n\nThe interface is simple; `serialise`
  encodes a value with its schema, and\n`deserialise` decodes a ByteString using the
  schema in it.\n\n```haskell\nclass Serialise a\n\nserialise :: Serialise a => a
  -> B.ByteString\ndeserialise :: Serialise a => B.ByteString -> Either String a\n```\n\nIt's
  also possible to serialise schemata and data separately.\n\n```haskell\n-- Note
  that 'Schema' is an instance of 'Serialise'\nschema :: Serialise a => proxy a ->
  Schema\nserialiseOnly :: Serialise a => a -> B.ByteString\n```\n\n`getDecoder` gives
  you a deserialiser.\n\n```haskell\ngetDecoder :: Serialise a => Schema -> Either
  StrategyError (ByteString -> a)\n```\n\nFor user-defined datatypes, you can either
  define instances\n\n```haskell\ninstance Serialise Foo where\n  schemaVia = gschemaViaRecord\n
  \ toEncoding = gtoEncodingRecord\n  deserialiser = gdeserialiserRecord Nothing\n```\n\nfor
  single-constructor records, or just\n\n```haskell\ninstance Serialise Foo\n```\n\nfor
  any ADT. The former explicitly describes field names in the schema, and the\nlatter
  does constructor names.\n\n## The schema\n\nThe definition of `Schema` is as follows:\n\n```haskell\ndata
  Schema = SSchema !Word8\n  | SUnit\n  | SBool\n  | SChar\n  | SWord8\n  | SWord16\n
  \ | SWord32\n  | SWord64\n  | SInt8\n  | SInt16\n  | SInt32\n  | SInt64\n  | SInteger\n
  \ | SFloat\n  | SDouble\n  | SBytes\n  | SText\n  | SList !Schema\n  | SArray !(VarInt
  Int) !Schema -- fixed size\n  | SProduct [Schema]\n  | SProductFixed [(VarInt Int,
  Schema)] -- fixed size\n  | SRecord [(T.Text, Schema)]\n  | SVariant [(T.Text, [Schema])]\n
  \ | SFix Schema -- ^ binds a fixpoint\n  | SSelf !Word8 -- ^ @SSelf n@ refers to
  the n-th innermost fixpoint\n  deriving (Show, Read, Eq, Generic)\n```\n\nThe `Serialise`
  instance is derived by generics.\n\nThere are some special schemata:\n\n* `SSchema
  n` is a schema of schema. The winery library stores the concrete schema of `Schema`
  for each version, so it can deserialise data even if the schema changes.\n* `SFix`
  binds a fixpoint.\n* `SSelf n` refers to the n-th innermost fixpoint bound by `SFix`.
  This allows it to provide schemata for inductive datatypes.\n\n## Backward compatibility\n\nIf
  having default values for missing fields is sufficient, you can pass a\ndefault
  value to `gdeserialiserRecord`:\n\n```haskell\n  deserialiser = gdeserialiserRecord
  $ Just $ Foo \"\" 42 0\n```\n\nYou can also build a custom deserialiser using the
  Alternative instance and combinators such as `extractField`, `extractConstructor`,
  etc.\n\n## Pretty-printing\n\n`Term` can be deserialised from any winery data. It
  can be pretty-printed using the `Pretty` instance:\n\n```\n{ bar: \"hello\"\n, baz:
  3.141592653589793\n, foo: Just 42\n}\n```\n"
license-name: BSD3
