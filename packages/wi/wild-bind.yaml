homepage: https://github.com/debug-ito/wild-bind
changelog-type: markdown
hash: 3ebc291a195ae29403e89c7c3fd0364b457bbf3c3a2b54599f351d59124af95f
test-bench-deps:
  stm: ! '>=2.4.2 && <2.5'
  base: -any
  hspec: ! '>=2.1.7'
  wild-bind: -any
  transformers: -any
  QuickCheck: ! '>=2.6 && <3.0'
  microlens: ! '>=0.2.0 && <0.5'
maintainer: Toshio Ito <debug.ito@gmail.com>
synopsis: Dynamic key binding framework
changelog: ! "# Revision history for wild-bind\n\n## 0.1.1.1  -- 2018-03-14\n\n* Confirmed
  test with `hspec-2.5.0`.\n  Remove its dependency upper bound, because I think it's
  stable enough.\n\n\n## 0.1.1.0  -- 2018-01-01\n\n* Description: add `Describable`
  instance of `Either`.\n* Binding: add some functions: \n  `bindsF`, `bindsF'`, `bindingF`,
  `bindingF'`, `revise`, `revise'`,\n  `justBefore`, `justAfter`\n* FrontEnd: derive
  `Eq` and `Ord` for `FrontEvent`.\n* Add `WildBind.Seq` module.\n* .cabal: use `other-extensions`
  instead of `default-extensions`.\n\n\n## 0.1.0.3  -- 2017-01-24\n\n* Confirmed build
  with `hspec-2.4.0`.\n\n\n## 0.1.0.2  -- 2016-10-09\n\n* Confirmed build with `hspec-2.3.0`.\n\n\n##
  0.1.0.1  -- 2016-09-22\n\n* Fix URL in package description.\n\n\n## 0.1.0.0  --
  2016-09-22\n\n* First version. Released on an unsuspecting world.\n"
basic-deps:
  base: ! '>=4.6 && <5.0'
  text: ! '>=1.2.0 && <1.3'
  containers: ! '>=0.5.0 && <0.6'
  transformers: ! '>=0.3.0 && <0.6'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.1.0'
- '0.1.1.1'
author: Toshio Ito <debug.ito@gmail.com>
latest: '0.1.1.1'
description-type: markdown
description: ! "# wild-bind\n\nWildBind is a dynamic and programmable key binding
  framework. See https://github.com/debug-ito/wild-bind for WildBind in general.\n\n##
  Architecture and Terminology\n\nWildBind consists of `FrontEnd` and `Binding`.\n\n
  \                    +-------------------+\n    (user) --input-> |   desktop env.
  \   |---[FrontEnd]---[Binding]\n                     |                   |                    |\n
  \                    | (front-end state) |             (back-end state)\n                     +-------------------+\n\n-
  A `FrontEnd` interfaces with a desktop environment. It reads input from the user
  and the state of the desktop environment. The state is called \"front-end state\".
  `FrontEnd` passes those two kinds of data to `Binding`.\n- A `Binding` binds actions
  to input symbols. Optionally it has its own state, which is called \"back-end state\".\n\n\n##
  wild-bind Packages\n\n- [wild-bind](https://hackage.haskell.org/package/wild-bind):
  WildBind core data types and functions. This package defines `FrontEnd`, `Binding`
  and other common types. Although WildBind is mainly targeted to number pads, its
  core is independent of any input types or desktop environments.\n- [wild-bind-x11](https://hackage.haskell.org/package/wild-bind-x11):
  A `FrontEnd` implementation for X11 desktop environments.\n- [wild-bind-indicator](https://hackage.haskell.org/package/wild-bind-indicator):
  A GUI that describes current `Binding` to the user.\n- [wild-bind-task-x11](https://hackage.haskell.org/package/wild-bind-task-x11):
  A bundle package that combines all packages above. End users should use this package
  first.\n\n\n## Author\n\nToshio Ito <debug.ito at gmail.com>\n\n"
license-name: BSD3
