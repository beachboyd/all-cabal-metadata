homepage: https://github.com/esoeylemez/wires
changelog-type: markdown
hash: 643ce73dcbbeb4251336627e345e053e46738901819226db211f3d08399a593b
test-bench-deps: {}
maintainer: Ertugrul Söylemez <esz@posteo.de>
synopsis: Functional reactive programming library
changelog: ! "# 0.2.1\n\n  * Fix: bumped version bounds\n\n  * Fix: more strictness
  fixes\n\n  * Fix: `README.md` formatting for Hackage\n\n  * Add: Semigroup and generalised
  Monoid instances for `Event`\n\n## Contributors\n\n  * [tsahyt](https://github.com/tsahyt)\n\n#
  0.2.0\n\n  * **Breaking change**: Safer API for `manage` and `manage'`\n\n  * Fix:
  wire strictness; strict value recursion like the following\n    works now:\n\n        rec
  x <- scan x0 -< x `seq` ev\n\n  * Change: tighter version bounds\n\n  * Add: event
  functions `splitE`, `unalignE`, `unlessE`\n\n  * Add: wire transforms `asksW`, `askW`,
  `hoistW`, `runReaderW`\n\n## Contributors\n\n  * [Kosyrev Serge](mailto:_deepfire@feelingofgreen.ru)\n\n#
  0.1.0\n\n  * Initial version.\n"
basic-deps:
  semigroupoids: ! '>=5.0 && <5.3'
  these: ==0.7.*
  base: ! '>=4.8 && <5'
  mtl: ! '>=2.0 && <2.3'
  deepseq: ==1.4.*
  profunctors: ! '>=5.0 && <5.3'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.2.1'
author: Ertugrul Söylemez <esz@posteo.de>
latest: '0.2.1'
description-type: markdown
description: ! "Wires\n=====\n\nThis is a functional reactive programming library
  for interactive\napplications with the following features:\n\n  * heavy focus on
  real-time applications like games and simulations,\n\n  * very small core abstraction,\n\n
  \ * efficient in both time and space.\n\nUntil a proper tutorial has been written,
  please check out the\n*examples* directory.  If you have questions, join #haskell-game
  on\nirc.freenode.net.  If you would like to report a bug or request a\nfeature,
  please [file an\nissue](https://github.com/esoeylemez/wires/issues).\n\n\nModule
  overview\n---------------\n\nThe library is split into two roles: *applications*
  and *controllers*.\nAn application developer models interactions and implements
  reactive\nsystems, i.e. the application logic.  A controller developer implements\nthe
  glue between the application and the real world, i.e. how events and\ntime-varying
  values map to actual things on the screen or in the\nnetwork.  The module structure
  reflects that distinction:\n\n  * `Control.Wire`: Application language (basically
  core + utils)\n  * `Control.Wire.Controller`: Controller language\n  * `Control.Wire.Core`:
  Core application language\n  * `Control.Wire.Internal`: You should never need this
  module\n  * `Control.Wire.Utils`: Extra application utilities\n\nModules not listed
  here are highly experimental and should not be used.\n\nIf you are asking yourself
  whether you are an application or a\ncontroller developer: at this early stage of
  development you are\nprobably both, which means that you will write the application
  as well\nas connect its inputs and outputs to the real world.\n"
license-name: BSD3
