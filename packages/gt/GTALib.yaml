homepage: https://bitbucket.org/emoto/gtalib
changelog-type: ''
hash: 5175f5af8a189a8d09a1f140a9353cb34c7807bcb8954975a8e0416c687e99a4
test-bench-deps:
  test-framework-hunit: ! '>=0.2.7 && <0.3'
  test-framework: ! '>=0.6 && <0.7'
  GTALib: ! '>=0.0.1'
  base: ! '>=4.3 && <4.6'
  HUnit: ! '>=1.2.4.2 && <1.3'
maintainer: emoto@mist.i.u-tokyo.ac.jp
synopsis: A library for GTA programming
changelog: ''
basic-deps:
  base: ! '>=4.3 && <4.6'
  containers: ! '>=0.4 && <0.6'
  parallel: ! '>=3.1 && <3.3'
  deepseq: ! '>=1.1 && <1.4'
  template-haskell: ! '>=2.5 && <2.8'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
author: Kento Emoto
latest: 0.0.6
description-type: haddock
description: ! 'This package provides the core functionalities of the GTA (Generate,
  Test, and Aggregate) programming framework on Haskell (c.f., Kento Emoto, Sebastian
  Fischer, Zhenjiang Hu: Generate, Test, and Aggregate - A Calculation-based Framework
  for Systematic Parallel Programming with MapReduce. ESOP 2012: 254-273. The authors''
  version is available at <http://www.ipl-lab.org/~emoto/ESOP2012.pdf>).


  /Example/


  The following code is a GTA program to solve the 0-1 Knapsack problem (<http://en.wikipedia.org/wiki/Knapsack_problem>).
  It /appears to be an exponential cost/ proram in the number of input items, because
  it appears to generate all item selections by @subsP items@ (/Generate/), discard
  those with total weight heavier than the knapsack''s capacity by @`filterBy` weightlimit
  capacity@ (/Test/), and take the most valuable selection by @`aggregateBy` maxsumsolutionWith
  getValue@ (/Aggregate/). However, it /actually runs in a linear time/ owing to our
  proposed program transformation ''Filter-embedding Semiring Fusion'' implemented
  in the library. In addition, it runs in /parallel/ so that you can get linear speedup.


  > knapsack capacity items =

  >  subsP items

  >  `filterBy` weightlimit capacity

  >  `aggregateBy` maxsumsolutionWith getValue

  >

  > getValue (_, v) = v

  > getWeight (w, _) = w

  >

  > weightlimit w = (<=w) <.> weightsum where

  >   weightsum = homJ'' times single nil

  >   x1 `times` x2  = (   x1 +    x2) `min` (w+1)

  >   single i  = getWeight i `min` (w+1)

  >   nil = 0


  Several examples of GTA programming are found in /examples/ directory at <https://bitbucket.org/emoto/gtalib/src>.'
license-name: BSD-3-Clause
