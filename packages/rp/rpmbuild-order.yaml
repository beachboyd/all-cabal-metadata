homepage: https://github.com/juhp/rpmbuild-order
changelog-type: text
hash: df88e81c0cc8f36d65a2b0e1b86b75d9ad69abc4f0b38a0c54d6754732438949
test-bench-deps: {}
maintainer: Jens Petersen <petersen@redhat.com>
synopsis: Order RPM packages by dependencies
changelog: ! '* 0.2 (2018-08-17)

  - error if no spec file

  - filter out hidden files from deps search

  - add --version

  - generate manpage with help2man


  * 0.1 (2018-07-18)

  - initial release with sort, deps and rdeps (reverse dependencies) commands


'
basic-deps:
  explicit-exception: -any
  Cabal: -any
  base: <5
  filepath: -any
  process: -any
  containers: -any
  fgl: -any
  transformers: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.2.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/juhp/rpmbuild-order.png)](https://travis-ci.org/juhp/rpmbuild-order)\n[![Hackage](http://img.shields.io/hackage/v/rpmbuild-order.png)](http://hackage.haskell.org/package/rpmbuild-order)\n[![license](https://img.shields.io/badge/license-BSD-brightgreen.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n#
  rpmbuild-order\n\nThis package based on code from [cabal-sort](http://hackage.haskell.org/package/cabal-sort),
  sorts rpm package spec files by build order.\n\n    $ rpmbuild-order --help\n    $
  rpmbuild-order sort mycore mylib myapp\n    mylib\n    mycore\n    myapp\n\nThe
  arguments passed can either be directories named after the package, or spec files.\n\nBy
  default it outputs the package names, but it can also output\nthe spec filenames
  or directory paths for easier scripting.\n\nUsing the rpmbuild-order `deps` and
  `rdeps` commands the ordered\ndependencies and reverse dependencies of a package
  can be obtained\nfrom the current set of checked out package sources.\n\n## Known
  problems\nGiven packages A, B, C, where C depends on B, and B depends on A,\nand
  you call\n\n    rpmbuild-order C.spec A.spec\n\nthen the output may be wrong if
  C does not have a direct dependency on A.\nEven if the order is correct, B is missing
  in the output\nand thus in this case the list of packages cannot be reliably used\nfor
  a sequence of builds.\n\n"
license-name: BSD3
