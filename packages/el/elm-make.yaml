homepage: http://elm-lang.org
changelog-type: ''
hash: 254b31c0342747610b2f1f366a1321f9403c8fa87d985d07330fcfcf99f785cf
test-bench-deps: {}
maintainer: info@elm-lang.org
synopsis: A build tool for Elm projects
changelog: ''
basic-deps:
  bytestring: -any
  ansi-wl-pprint: -any
  elm-compiler: ! '>=0.15 && <0.16'
  base: ! '>=4.2 && <5'
  blaze-markup: -any
  text: -any
  filepath: -any
  containers: ! '>=0.3'
  binary: -any
  mtl: -any
  blaze-html: -any
  optparse-applicative: ! '>=0.10 && <0.11'
  elm-package: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Evan Czaplicki
latest: 0.1.2
description-type: markdown
description: ! "# elm-make\n\n`elm-make` is a build tool for Elm.\n\n  * **Compile
  down to JS or HTML** &mdash; turn Elm files into artifacts that\n    can be used
  with whatever backend you are already using.\n\n  * **Build in parallel** &mdash;
  if you have four cores, `elm-make` will try to\n    compile four files at all times.\n\n
  \ * **Build dependencies** &mdash; `elm-make` is designed to work with\n    `elm-package`
  so if you use a bunch of 3rd party packages they will all\n    work just fine.\n\n
  \ * **Build what you need** &mdash; if a module is not needed for your project it\n
  \   will not be built or appear in the resulting JS or HTML.\n\n\n## Basic Usage\n\nYour
  Elm projects should all have a root directory, like `project/` that all\nof your
  Elm related stuff is going to live in. Lets imagine having the\nfollowing directory
  structure.\n\n```\nproject/\n    Main.elm\n    SearchBox.elm\n    SearchResults.elm\n
  \   Theme.elm\n```\n\nWe have a couple Elm modules, maybe they depend on each other
  in some way. To\nturn this into JavaScript, you can run the following command:\n\n```bash\nelm-make
  Main.elm --output=main.html\n```\n\nBefore creating an HTML file called `main.html`,
  this will prompt you to\ninstall `elm-lang/core` which contains all of the core
  modules needed to make\nElm programs work.\n\nIt will also create a file called
  `elm-package.json` which gives a structured\ndescription of your project. `elm-make`
  uses this file to figure out what\ndirectories it needs to look in and which packages
  are relevant.\n\n\n## More Advanced Usage\n\nA lot of the more advanced stuff involves
  fiddling with `elm-package.json` to\nmake your directory structure nicer or to make
  sure you are working with the\nright dependencies.\n\n### Directory Structure\n\nIn
  the Basic Usage section above, we saw a pretty boring directory structure.\nAs we
  actually used it, it would probably expand to look like this:\n\n```\nproject/\n
  \   elm-package.json\n    elm-stuff/...\n    LICENSE\n    Main.elm\n    README.md\n
  \   SearchBox.elm\n    SearchResults.elm\n    Theme.elm\n```\n\nPretty messy! There
  is a field in `elm-package.json` called `source-directories`\nthat allows you to
  list all the directories that contain Elm modules. By default\nit only lists the
  root directory `.` but it is best to change that a bit. If you\nare doing an Elm
  only project, this structure is pretty nice.\n\n```\nproject/\n    src/\n        Main.elm\n
  \       SearchBox.elm\n        SearchResults.elm\n        Theme.elm\n    elm-package.json\n
  \   LICENSE\n    README.md\n```\n\nI would set `\"source-directories\": [ \"src\"
  ]` keeping the root of the project\nas clean as possible.\n\nIf you have a project
  that has both frontend and backend components, I have\nbeen experimenting with this
  directory structure.\n\n```\nproject/\n    backend/...\n    frontend/\n        Main.elm\n
  \       SearchBox.elm\n        SearchResults.elm\n        Theme.elm\n    elm-package.json\n
  \   LICENSE\n    README.md\n```\n\nIn this world you set `\"source-directories\":
  [ \"frontend\" ]`. This pattern is\nused for [the `package.elm-lang.org` project][src]
  and seems to work pretty\nwell.\n\n[src]: https://github.com/elm-lang/package.elm-lang.org/\n\n###
  Managing Dependencies\n\nThere are two general approaches to managing dependencies
  depending on what you\nare trying to do. These rules may not apply in every case,
  but they are good\nguidelines.\n\n  1. If you are creating a package for others
  to use, you want to keep your\n     dependency ranges as broad as possible. You
  also only want to extend\n     ranges as far as you have tested. When you say \"my
  library works with\n     4.0.0 of this package\" before that version has been released
  or before\n     you have tested with it, you are likely to make life suck for your
  users.\n     Do not do that!\n\n  2. If you are creating an app or product, you
  want to keep your dependency\n     ranges very specific. When you build, a file
  is generated called\n     `elm-stuff/exact-dependencies.json` which lists all of
  the packages needed\n     for your project and the exact versions you happen to
  be using right now.\n     You may want to check this in to version control if you
  want the same\n     exact thing every time.\n\nIf you are in camp #1 creating a
  package for others, we have plans to help\nautomate the process of expanding version
  bounds. If your project compiles\nwith the new stuff and your tests pass, it is
  conceivable that everything\njust works. We will be experimenting with this!"
license-name: BSD-3-Clause
