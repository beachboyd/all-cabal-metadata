homepage: https://github.com/domenkozar/elm2nix#readme
changelog-type: markdown
hash: 45ce181644465bad5e4f02386c3418e921e5ab570b096bb0a95fc033c17a3373
test-bench-deps:
  base: ! '>=4.7 && <5'
  elm2nix: -any
maintainer: domen@dev.si
synopsis: Turn your Elm project into buildable Nix project
changelog: |
  # Changelog for elm2nix

  ## 0.1.1 (2019-02-19)

  ### Changes

  - #22 Support req-0.1.0.0 (@domenkozar)

  ## 0.1.0 (2018-12-28)

  - Initial release (@domenkozar)
basic-deps:
  bytestring: -any
  ansi-wl-pprint: -any
  here: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  async: -any
  req: -any
  data-default: -any
  elm2nix: -any
  containers: -any
  binary: -any
  mtl: -any
  transformers: -any
  optparse-applicative: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0
- 0.1.1
author: Domen KoÅ¾ar
latest: 0.1.1
description-type: markdown
description: |
  # elm2nix

  [![Build Status](https://travis-ci.org/hercules-ci/elm2nix.svg?branch=master)](https://travis-ci.org/hercules-ci/elm2nix)
  [![Hackage](https://img.shields.io/hackage/v/elm2nix.svg)](https://hackage.haskell.org/package/elm2nix)

  Convert an [Elm](http://elm-lang.org/) project into
  [Nix](https://nixos.org/nix/) expressions.

  It consists of multiple commands:
  - `elm2nix convert`: Given `elm.json` in current directory, all dependencies are
    parsed and their sha256sum calculated
  - `elm2nix snapshot`: Downloads snapshot of http://package.elm-lang.org into `versions.dat`
  - `elm2nix init`: Generates `default.nix` that glues everything together

  ## Assumptions

  Supports Elm 0.19.x

  ## Installation

  ### From nixpkgs (recommended)

  Make sure you have up to date stable or unstable nixpkgs channel.

      $ nix-env -iA elm2nix

  ### From source

      $ git clone https://github.com/domenkozar/elm2nix.git
      $ cd elm2nix
      $ nix-env -if .

  ## Usage

      $ git clone https://github.com/evancz/elm-todomvc.git
      $ cd elm-todomvc
      $ elm2nix init > default.nix
      $ elm2nix convert > elm-srcs.nix
      $ elm2nix snapshot > versions.dat
      $ nix-build
      $ chromium ./result/Main.html

  ## Running tests (as per CI)

      $ ./scripts/tests.sh

  ## FAQ

  ### Why is mkDerivation inlined into `default.nix`?

  As it's considered experimental, it's generated for now. Might change in the future.

  ### How to use with ParcelJS and Yarn?

  Instead of running `elm2nix init`, use something like:

  ```nix
  { pkgs ? import <nixpkgs> {}
  }:

  let
    yarnPkg = pkgs.yarn2nix.mkYarnPackage {
      name = "myproject-node-packages";
      packageJSON = ./package.json;
      unpackPhase = ":";
      src = null;
      yarnLock = ./yarn.lock;
      publishBinsFor = ["parcel-bundler"];
    };
  in pkgs.stdenv.mkDerivation {
    name = "myproject-frontend";
    src = pkgs.lib.cleanSource ./.;

    buildInputs = with pkgs.elmPackages; [
      elm
      elm-format
      yarnPkg
      pkgs.yarn
    ];

    patchPhase = ''
      rm -rf elm-stuff
      ln -sf ${yarnPkg}/node_modules .
    '';

    shellHook = ''
      ln -fs ${yarnPkg}/node_modules .
    '';

    configurePhase = pkgs.elmPackages.fetchElmDeps {
      elmPackages = import ./elm-srcs.nix;
      versionsDat = ./versions.dat;
    };

    installPhase = ''
      mkdir -p $out
      parcel build -d $out index.html
    '';
  }
  ```
license-name: BSD-3-Clause
