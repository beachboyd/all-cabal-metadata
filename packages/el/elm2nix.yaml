homepage: https://github.com/domenkozar/elm2nix#readme
changelog-type: markdown
hash: 7d4f711f0cb7998e145cb159697c2e659c4d45ea2a1f966eae234ea8b00265d0
test-bench-deps:
  base: ! '>=4.7 && <5'
  elm2nix: -any
maintainer: domen@dev.si
synopsis: Turn your Elm project into buildable Nix project
changelog: ! '# Changelog for elm2nix


  ## 0.1.0 (2018-12-28)


  - Initial release (@domenkozar)

'
basic-deps:
  bytestring: -any
  ansi-wl-pprint: -any
  here: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  async: -any
  req: -any
  data-default: -any
  elm2nix: -any
  containers: -any
  binary: -any
  mtl: -any
  transformers: -any
  optparse-applicative: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0
author: Domen KoÅ¾ar
latest: 0.1.0
description-type: markdown
description: ! "# elm2nix\n\n[![Build Status](https://travis-ci.org/domenkozar/elm2nix.svg?branch=master)](https://travis-ci.org/domenkozar/elm2nix)\n[![Hackage](https://img.shields.io/hackage/v/elm2nix.svg)](https://hackage.haskell.org/package/elm2nix)\n\nConvert
  an [Elm](http://elm-lang.org/) project into\n[Nix](https://nixos.org/nix/) expressions.\n\nIt
  consists of multiple commands:\n- `elm2nix convert`: Given `elm.json` in current
  directory, all dependencies are\n  parsed and their sha256sum calculated\n- `elm2nix
  snapshot`: Downloads snapshot of http://package.elm-lang.org into `versions.dat`\n-
  `elm2nix init`: Generates `default.nix` that glues everything together\n\n## Assumptions\n\nSupports
  Elm 0.19.x\n\n## Installation\n\n    $ nix-shell -p stack --run \"stack install
  --nix\"\n\n## Usage\n\n    $ git clone https://github.com/evancz/elm-todomvc.git\n
  \   $ cd elm-todomvc\n    $ ~/.local/bin/elm2nix init > default.nix\n    $ ~/.local/bin/elm2nix
  convert > elm-srcs.nix\n    $ ~/.local/bin/elm2nix snapshot > versions.dat\n    $
  nix-build\n    $ chromium ./result/index.html\n\n## Running tests (as per CI)\n\n
  \   $ ./scripts/tests.sh\n\n## FAQ\n\n### Why is mkDerivation inlined into `default.nix`?\n\nAs
  it's considered experimental, it's generated for now. Might change in the future.\n\n###
  How to use with ParcelJS and Yarn?\n\nInstead of running `elm2nix init`, use something
  like:\n\n```nix\n{ pkgs ? import <nixpkgs> {}\n}:\n\nlet\n  yarnPkg = pkgs.yarn2nix.mkYarnPackage
  {\n    name = \"myproject-node-packages\";\n    packageJSON = ./package.json;\n
  \   unpackPhase = \":\";\n    src = null;\n    yarnLock = ./yarn.lock;\n    publishBinsFor
  = [\"parcel-bundler\"];\n  };\nin pkgs.stdenv.mkDerivation {\n  name = \"myproject-frontend\";\n
  \ src = pkgs.lib.cleanSource ./.;\n\n  buildInputs = with pkgs.elmPackages; [\n
  \   elm\n    elm-format\n    yarnPkg\n    pkgs.yarn\n  ];\n\n  patchPhase = ''\n
  \   rm -rf elm-stuff\n    ln -sf ${yarnPkg}/node_modules .\n  '';\n\n  shellHook
  = ''\n    ln -fs ${yarnPkg}/node_modules .\n  '';\n\n  configurePhase = pkgs.elmPackages.fetchElmDeps
  {\n    elmPackages = import ./elm-srcs.nix;\n    versionsDat = ./versions.dat;\n
  \ };\n\n  installPhase = ''\n    mkdir -p $out\n    parcel build -d $out index.html\n
  \ '';\n}\n```\n"
license-name: BSD-3-Clause
