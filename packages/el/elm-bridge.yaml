homepage: https://github.com/agrafix/elm-bridge
changelog-type: markdown
hash: 664c4c6ef02a424bd909fb84d97aa6d57534c724b93e6cd3721d2b961e458534
test-bench-deps:
  base: -any
  hspec: ! '>=2.0'
  text: -any
  containers: -any
  QuickCheck: -any
  hspec-discover: -any
  aeson: -any
  elm-bridge: -any
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Derive Elm types and Json code from Haskell types
changelog: ! "# v0.4.2\n\nDrop support for `aeson < 1.`\nAdd support for `aeson ==
  1.2.*`\n\n# v0.4.1\n\n## Bugfixes\n * Fixed support for Elm 0.18 (see issue #17)\n\n#
  v0.4.0\n## New features\n * Support for Elm 0.18\n * Dropped support for Elm 0.17
  and Elm 0.16\n\n# v0.3.0\n## New features\n * Support for Elm 0.17\n\n# v0.2.2\n\n##
  New features\n * The Elm JSON encoders and decoders now match `aeson` more closely.
  In partlicular, single constructor sum types are now encoded without\n   the constructor.
  Also, the `aeson` 0.11 option `unwrapUnaryRecords` is now supported.\n\n## Bugfixes\n
  * Fixed Elm type error in encoders for types like `[Map String v]` (0.2.1.2).\n\n#
  v0.2.1\n\n## New features\n\n * The template Haskell derivation functions now take
  `aeson` `Option` type instead of a custom type.\n This change makes it easier to
  synchronize the Haskell and Elm code.\n * The generated Elm code can be personalized.
  Helpers functions assist in converting type names, and defining which type will
  be newtyped.\n\n## Notes\n\n * The generated Elm code depends on the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/1.1.0/)
  package.\n"
basic-deps:
  base: ! '>=4.7 && <5'
  aeson: ! '>=1'
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.2.1'
- '0.3.0.0'
- '0.3.0.2'
- '0.4.0'
- '0.4.1'
- '0.4.2'
author: Alexander Thiemann <mail@athiemann.net>, Simon Marechal <bartavelle@gmail.com>
latest: '0.4.2'
description-type: markdown
description: ! "Elm Bridge\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/elm-bridge.svg)](https://travis-ci.org/agrafix/elm-bridge)\n\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/elm-bridge.svg)](http://packdeps.haskellers.com/reverse/elm-bridge)\n\n##
  Intro\n\nHackage: [elm-bridge](http://hackage.haskell.org/package/elm-bridge)\n\nBuilding
  the bridge from [Haskell](http://haskell.org) to [Elm](http://elm-lang.org) and
  back. Define types once, use on both sides and enjoy easy (de)serialisation. Cheers!\n\nThis
  version of the package only supports Elm 0.18. Version 0.3.0.2 supports Elm 0.16
  and Elm 0.17.\n\nNote that the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/latest/)
  package, with version >= 1.2.0, is expected by the generated Elm modules.\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\nimport Elm.Derive\nimport
  Elm.Module\n\nimport Data.Proxy\n\ndata Foo\n   = Foo\n   { f_name :: String\n   ,
  f_blablub :: Int\n   } deriving (Show, Eq)\n\nderiveBoth defaultOptions ''Foo\n\nmain
  :: IO ()\nmain =\n    putStrLn $ makeElmModule \"Foo\"\n    [ DefineElm (Proxy ::
  Proxy Foo)\n    ]\n\n```\n\nOutput will be:\n\n```elm\nmodule Foo where\n\nimport
  Json.Decode\nimport Json.Decode exposing ((:=))\nimport Json.Encode\nimport Json.Helpers
  exposing (..)\n\n\ntype alias Foo  =\n   { f_name: String\n   , f_blablub: Int\n
  \  }\n\njsonDecFoo : Json.Decode.Decoder ( Foo )\njsonDecFoo =\n   (\"f_name\" :=
  Json.Decode.string) `Json.Decode.andThen` \\pf_name ->\n   (\"f_blablub\" := Json.Decode.int)
  `Json.Decode.andThen` \\pf_blablub ->\n   Json.Decode.succeed {f_name = pf_name,
  f_blablub = pf_blablub}\n\njsonEncFoo : Foo -> Value\njsonEncFoo  val =\n   Json.Encode.object\n
  \  [ (\"f_name\", Json.Encode.string val.f_name)\n   , (\"f_blablub\", Json.Encode.int
  val.f_blablub)\n   ]\n```\n\nFor more usage examples check the tests or the examples
  dir.\n\n## Install\n\n### Haskell\n\n* Using cabal: `cabal install elm-bridge`\n*
  From Source: `git clone https://github.com/agrafix/elm-bridge.git && cd elm-bridge
  && cabal install`\n\n### Elm\n\n* `elm package install bartavelle/json-helpers`\n\n##
  Contribute\n\nPull requests are welcome! Please consider creating an issue beforehand,
  so we can discuss what you would like to do. Code should be written in a consistent
  style throughout the project. Avoid whitespace that is sensible to conflicts. (E.g.
  alignment of `=` signs in functions definitions) Note that by sending a pull request
  you agree that your contribution can be released under the BSD3 License as part
  of the `elm-bridge` package or related packages.\n"
license-name: BSD3
