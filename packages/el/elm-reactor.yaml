homepage: http://elm-lang.org
changelog-type: ''
hash: 7e9b7040a6257bdbff793b84710149072c77a02c0b7a93d19cccc931cfebfed4
test-bench-deps: {}
maintainer: info@elm-lang.org
synopsis: Interactive development tool for Elm programs
changelog: ''
basic-deps:
  bytestring: -any
  elm-compiler: ! '>=0.15 && <0.16'
  base: ! '>=4.2 && <5'
  time: -any
  blaze-markup: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  websockets: ! '>=0.9 && <0.10'
  containers: ! '>=0.3'
  snap-server: -any
  websockets-snap: ! '>=0.8.2.1'
  snap-core: -any
  mtl: -any
  cmdargs: -any
  blaze-html: -any
  HTTP: -any
  transformers: -any
  system-filepath: -any
  fsnotify: ! '>=0.1.0.2'
  directory: ! '>=1.2'
all-versions:
- '0.1'
- '0.2'
- 0.2.0.1
- '0.3'
- 0.3.1
author: Evan Czaplicki
latest: 0.3.1
description-type: markdown
description: ! "# Elm Reactor\n\nInteractive development tool that makes it easy to
  develop and debug Elm\nprograms. Key features include:\n\n  * Automatically compile
  any Elm program\n  * [Hot-swapping][]\n  * [Time travel debugging][debug]\n  * Compatible
  with any editor\n\n[hot-swapping]: http://elm-lang.org/blog/Interactive-Programming.elm\n[debug]:
  http://debug.elm-lang.org\n\nThis means you can get a great development experience
  whether you are using\nSublime Text, emacs, vim, or whatever else to edit Elm code.\n\n##
  Install\n\nInstall [Elm Platform][platform]. This will install Elm Reactor and everything\nelse
  it needs.\n\n[platform]: http://elm-lang.org/Install.elm\n\n## Use\n\nNavigate to
  the Elm project you want to work on. A great project to get started\nwith is [elm-examples][]
  which contains some simple programs that should be fun\nto debug.\n\n[elm-examples]:
  https://github.com/evancz/elm-examples\n\nIn the root of your Elm project start
  the reactor with:\n\n```bash\nelm-reactor\n```\n\nNow open [http://localhost:8000](http://localhost:8000)
  in your browser. You\nshould see a navigation page for your project.\n\nClick on
  any file to see what it looks like. For example, you can navigate to\nan Elm file
  and try it out. If you modify the file, you can just refresh that\npage and see
  the new version!\n\n#### Time Travel Debugging\n\nTo use the debugger, click the
  small wrench next to every Elm file. This will\nstart your Elm program with a control
  panel that lets you:\n\n  * Pause, rewind, and continue from any point.\n\n  * Add
  watches and traces to track and visualize values over time.\n\n  * Swap in new code
  at any time, maintaining all recorded events.\n\n\n#### Debugging code embedded
  in HTML\n\nTo use the debugger with more complex HTML or CSS, you may want to start
  the\ndebugger from within an HTML file. This process is still improving, so *use
  this\nwith caution*.\n\nIn your custom HTML file, load the `/_reactor/debug.js`
  script.\n\n```html\n<script type=\"text/javascript\" src=\"/_reactor/debug.js\"></script>\n```\n\nThat
  creates the `Elm.fullscreenDebug` function so you can initiate your Elm\nprogram
  with the debugger:\n\n```javascript\nvar main = Elm.fullscreenDebug('MyProject.Main',
  'MyProject/Main.elm');\n```\n\nThe first argument is the name of the module you
  would like to debug.\nThe second argument is the name of the source file for that
  module.\nThe file name is needed so that we know which file to recompile when\nthe
  Reactor detects that a file has changed. You may edit a dependency,\nbut we always
  need to compile from the root file.\n"
license-name: BSD-3-Clause
