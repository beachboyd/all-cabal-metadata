homepage: https://github.com/ocramz/xeno
changelog-type: markdown
hash: 7544df3df1d65eec48b2b2692008748c95f6b5b014d81c5e5ddc1afdc000e56a
test-bench-deps:
  xeno: -any
  bytestring: -any
  base: -any
  hspec: -any
  criterion: -any
  xml: -any
  hexml: -any
  weigh: -any
  ghc-prim: -any
  hexpat: -any
  deepseq: -any
maintainer: Marco Zocca (ocramz fripost org)
synopsis: A fast event-based XML parser in pure Haskell
changelog: ! "\t0.3.5\n\t* Improve error handling (#24 #26, mgajda)\n\n\t0.3.4\n\t*
  Fixed #14 and add test for #15\n\t* Fixed typos in the examples (unhammer)\n\n\t0.3.2\n\tFixed
  DOM parsing from bystrings with non-zero offset (#11, qrilka)\n\t\n\t0.3\n\tFixed
  name parsing (for attributes and tags) so it conforms with the XML spec (qrilka)\n\tFixed
  parsing failure when root tag is preceded by white space (though without checking
  for white space characters specifically) (qrilka)\n\tAdded contribution guidelines
  (ocramz)\t\n\n\t0.2\n\tAdded CDATA support (Rembane)\t\n\n\t0.1\n\tFirst Hackage
  release\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  array: -any
  mutable-containers: -any
  mtl: -any
  deepseq: -any
  vector: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
author: Christopher Done
latest: '0.3.5'
description-type: markdown
description: ! "# xeno\n\n[![Build Status](https://travis-ci.org/ocramz/xeno.png)](https://travis-ci.org/ocramz/xeno)
  [![Hackage version](https://img.shields.io/hackage/v/xeno.svg?label=Hackage)](https://hackage.haskell.org/package/xeno)
  [![Stackage version](https://www.stackage.org/package/xeno/badge/lts?label=Stackage)](https://www.stackage.org/package/xeno)\n\nA
  fast event-based XML parser.\n\n[Blog post](http://chrisdone.com/posts/fast-haskell-c-parsing-xml).\n\n##
  Features\n\n* SAX-style/fold parser which triggers events for open/close\n  tags,
  attributes, text, etc.\n* Low memory use (see memory benchmarks below).\n* Very
  fast (see speed benchmarks below).\n* It\n  [cheats like Hexml does](http://neilmitchell.blogspot.co.uk/2016/12/new-xml-parser-hexml.html)\n
  \ (doesn't expand entities, or most of the XML standard).\n* Written in pure Haskell.\n*
  CDATA is supported as of version 0.2.\n\nPlease see the bottom of this file for
  guidelines on contributing to this library.\n\n\n## Performance goals\n\nThe [hexml](https://github.com/ndmitchell/hexml)
  Haskell library uses\nan XML parser written in C, so that is the baseline we're
  trying to\nbeat or match roughly.\n\n![Imgur](http://i.imgur.com/XgdZoQ9.png)\n\nThe
  `Xeno.SAX` module is faster than Hexml for simply walking the\ndocument. Hexml actually
  does more work, allocating a DOM. `Xeno.DOM`\nis slighly slower or faster than Hexml
  depending on the document,\nalthough it is 2x slower on a 211KB document.\n\nMemory
  benchmarks for Xeno:\n\n    Case                Bytes  GCs  Check\n    4kb/xeno/sax
  \       2,376    0  OK\n    31kb/xeno/sax       1,824    0  OK\n    211kb/xeno/sax
  \    56,832    0  OK\n    4kb/xeno/dom       11,360    0  OK\n    31kb/xeno/dom
  \     10,352    0  OK\n    211kb/xeno/dom  1,082,816    0  OK\n\nI memory benchmarked
  Hexml, but most of its allocation happens in C,\nwhich GHC doesn't track. So the
  data wasn't useful to compare.\n\nSpeed benchmarks:\n\n    benchmarking 4KB/hexml/dom\n
  \   time                 6.317 μs   (6.279 μs .. 6.354 μs)\n                         1.000
  R²   (1.000 R² .. 1.000 R²)\n    mean                 6.333 μs   (6.307 μs .. 6.362
  μs)\n    std dev              97.15 ns   (77.15 ns .. 125.3 ns)\n    variance introduced
  by outliers: 13% (moderately inflated)\n\n    benchmarking 4KB/xeno/sax\n    time
  \                5.152 μs   (5.131 μs .. 5.179 μs)\n                         1.000
  R²   (1.000 R² .. 1.000 R²)\n    mean                 5.139 μs   (5.128 μs .. 5.161
  μs)\n    std dev              58.02 ns   (41.25 ns .. 85.41 ns)\n\n    benchmarking
  4KB/xeno/dom\n    time                 10.93 μs   (10.83 μs .. 11.14 μs)\n                         0.994
  R²   (0.983 R² .. 0.999 R²)\n    mean                 11.35 μs   (11.12 μs .. 11.91
  μs)\n    std dev              1.188 μs   (458.7 ns .. 2.148 μs)\n    variance introduced
  by outliers: 87% (severely inflated)\n\n    benchmarking 31KB/hexml/dom\n    time
  \                9.405 μs   (9.348 μs .. 9.480 μs)\n                         0.999
  R²   (0.998 R² .. 0.999 R²)\n    mean                 9.745 μs   (9.599 μs .. 10.06
  μs)\n    std dev              745.3 ns   (598.6 ns .. 902.4 ns)\n    variance introduced
  by outliers: 78% (severely inflated)\n\n    benchmarking 31KB/xeno/sax\n    time
  \                2.736 μs   (2.723 μs .. 2.753 μs)\n                         1.000
  R²   (1.000 R² .. 1.000 R²)\n    mean                 2.757 μs   (2.742 μs .. 2.791
  μs)\n    std dev              76.93 ns   (43.62 ns .. 136.1 ns)\n    variance introduced
  by outliers: 35% (moderately inflated)\n\n    benchmarking 31KB/xeno/dom\n    time
  \                5.767 μs   (5.735 μs .. 5.814 μs)\n                         0.999
  R²   (0.999 R² .. 1.000 R²)\n    mean                 5.759 μs   (5.728 μs .. 5.810
  μs)\n    std dev              127.3 ns   (79.02 ns .. 177.2 ns)\n    variance introduced
  by outliers: 24% (moderately inflated)\n\n    benchmarking 211KB/hexml/dom\n    time
  \                260.3 μs   (259.8 μs .. 260.8 μs)\n                         1.000
  R²   (1.000 R² .. 1.000 R²)\n    mean                 259.9 μs   (259.7 μs .. 260.3
  μs)\n    std dev              959.9 ns   (821.8 ns .. 1.178 μs)\n\n    benchmarking
  211KB/xeno/sax\n    time                 249.2 μs   (248.5 μs .. 250.1 μs)\n                         1.000
  R²   (1.000 R² .. 1.000 R²)\n    mean                 251.5 μs   (250.6 μs .. 253.0
  μs)\n    std dev              3.944 μs   (3.032 μs .. 5.345 μs)\n\n    benchmarking
  211KB/xeno/dom\n    time                 543.1 μs   (539.4 μs .. 547.0 μs)\n                         0.999
  R²   (0.999 R² .. 1.000 R²)\n    mean                 550.0 μs   (545.3 μs .. 553.6
  μs)\n    std dev              14.39 μs   (12.45 μs .. 17.12 μs)\n    variance introduced
  by outliers: 17% (moderately inflated)\n\n## DOM Example\n\nEasy as running the
  parse function:\n\n``` haskell\n> parse \"<p key='val' x=\\\"foo\\\" k=\\\"\\\"><a><hr/>hi</a><b>sup</b>hi</p>\"\nRight\n
  \ (Node\n     \"p\"\n     [(\"key\", \"val\"), (\"x\", \"foo\"), (\"k\", \"\")]\n
  \    [ Element (Node \"a\" [] [Element (Node \"hr\" [] []), Text \"hi\"])\n     ,
  Element (Node \"b\" [] [Text \"sup\"])\n     , Text \"hi\"\n     ])\n```\n\n## SAX
  Example\n\nQuickly dumping XML:\n\n``` haskell\n> let input = \"Text<tag prop='value'>Hello,
  World!</tag><x><y prop=\\\"x\\\">Content!</y></x>Trailing.\"\n> dump input\n\"Text\"\n<tag
  prop=\"value\">\n  \"Hello, World!\"\n</tag>\n<x>\n  <y prop=\"x\">\n    \"Content!\"\n
  \ </y>\n</x>\n\"Trailing.\"\n```\n\nFolding over XML:\n\n``` haskell\n> fold const
  (\\m _ _ -> m + 1) const const const const 0 input -- Count attributes.\nRight 2\n```\n\n```
  haskell\n> fold (\\m _ -> m + 1) (\\m _ _ -> m) const const const const 0 input
  -- Count elements.\nRight 3\n```\n\nMost general XML processor:\n\n``` haskell\nprocess\n
  \ :: Monad m\n  => (ByteString -> m ())               -- ^ Open tag.\n  -> (ByteString
  -> ByteString -> m ()) -- ^ Tag attribute.\n  -> (ByteString -> m ())               --
  ^ End open tag.\n  -> (ByteString -> m ())               -- ^ Text.\n  -> (ByteString
  -> m ())               -- ^ Close tag.\n  -> ByteString                         --
  ^ Input string.\n  -> m ()\n```\n\nYou can use any monad you want. IO, State, etc.
  For example, `fold` is\nimplemented like this:\n\n``` haskell\nfold openF attrF
  endOpenF textF closeF s str =\n  execState\n    (process\n       (\\name -> modify
  (\\s' -> openF s' name))\n       (\\key value -> modify (\\s' -> attrF s' key value))\n
  \      (\\name -> modify (\\s' -> endOpenF s' name))\n       (\\text -> modify (\\s'
  -> textF s' text))\n       (\\name -> modify (\\s' -> closeF s' name))\n       str)\n
  \   s\n```\n\nThe `process` is marked as INLINE, which means use-sites of it will\ninline,
  and your particular monad's type will be potentially erased\nfor great performance.\n\n\n##
  Contributors\n\nSee CONTRIBUTORS.md\n\n\n## Contribution guidelines\n\nAll contributions
  and bug fixes are welcome and will be credited appropriately, as long as they are
  aligned with the goals of this library: speed and memory efficiency. In practical
  terms, patches and additional features should not introduce significant performance
  regressions.\n"
license-name: BSD3
