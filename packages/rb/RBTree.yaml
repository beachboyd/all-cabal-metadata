homepage: git://github.com/wuxb45/Haskell-RBTree.git
changelog-type: ''
hash: c5230f6a227f6ea74dc9ed07480e899accafd576c21eca44d0abe260ddbd1e05
test-bench-deps: {}
maintainer: Wu Xingbo
synopsis: Pure haskell Red-Black-Tree implemetation
changelog: ''
basic-deps:
  base: ! '>3 && <5'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
author: Wu Xingbo
latest: 0.0.5
description-type: text
description: ! "Pure haskell implementation from Wu Xingbo (wuxb45@gmail.com) 2011\n\nWARNING:This
  Implementation mainly concerns about functionality. \n  After that I will improve
  the performence and efficiency.\n\nto Build & Install for yourself:\nshell> runhaskell
  Setup.lhs configure --user\nshell> runhaskell Setup.lhs build\nshell> runhaskell
  Setup.lhs install\n\non any problem, you may try this:\nshell> runhaskell Setup.lhs
  register\n\nfor system, replace '--user' with '--ghc'\n\nchangelog (0.0.2):\nadd
  bangpatterns to some data field.\nadd ghc optimization flags to .cabal\nbe careful
  of memory usage. insert 10MiB Int values takes 3 seconds and 800MiB memory space.\n\nchangelog
  (0.0.3):\nadd function \"searchFast\".\nrename 'remove*' functions to 'delete*'s.\n\nchangelog
  (0.0.4):\nadd functions for search min/max value.\nadd functions for search for
  a interval that the two values in the tree holds the given value\nmodified search
  functions can accept a 'compare' function like:\n    (b -> a -> Ordering)\n  search
  for an 'a' by first key of a (RBTree (a,b)) canbe done in such way:\n> b :: Int\n>
  b = 10\n> t :: RBTree (Int,String)\n> t = insertOrdList emptyRB [(1,\"hello\"),
  (2,\"world\")]\n> result :: (Int,String)\n> result = search (\\k (k',_) -> k `compare`
  k') t 2\nit returns \"Just (2,\"world\")\"\n\nchangelog (0.0.5):\nadd three operators
  for insert/delete/search.\nupdates the comments to co-op with haddock.\ndelete the
  RBTreeTest module. clean is better.\n\n"
license-name: BSD-3-Clause
