homepage: https://github.com/Teaspot-Studio/gore-and-ash-sync
changelog-type: markdown
hash: e1638c846aed1aeb6ab311f26ba78d9ff225fe91eb82fccbb279fd75e159cac5
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Gore&Ash module for high level network synchronization
changelog: ! '1.2.0.0

  =======


  * Updted to ghc 8 and added changelog.'
basic-deps:
  exceptions: ! '>=0.8.0.2'
  cereal: ! '>=0.4.1.1'
  bytestring: ! '>=0.10.6.0'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.5.1'
  text: ! '>=1.2.2.0'
  gore-and-ash-actor: ! '>=1.1.0.0'
  gore-and-ash: ! '>=1.1.0.0'
  containers: ! '>=0.5.6.2'
  gore-and-ash-network: ! '>=1.4.0.0'
  mtl: ! '>=2.2.1'
  hashable: ! '>=1.2.3.3'
  gore-and-ash-logging: ! '>=2.0.0.0'
  deepseq: ! '>=1.4.1.1'
all-versions:
- 1.1.0.0
- 1.1.1.0
- 1.2.0.0
- 1.2.0.1
author: Anton Gushcha
latest: 1.2.0.1
description-type: markdown
description: ! "gore-and-ash-sync\n====================\n\nThe module provides facilities
  of high level synchronizing for [Gore&Ash](https://github.com/Teaspot-Studio/gore-and-ash)
  engine.\n\nThe module depends on:\n- [gore-and-ash-logging](https://github.com/Teaspot-Studio/gore-and-ash-logging)\n-
  [gore-and-ash-actor](https://github.com/Teaspot-Studio/gore-and-ash-actor)\n- [gore-and-ash-network](https://github.com/Teaspot-Studio/gore-and-ash-network)\n\nInstalling\n==========\n\nAdd
  following to your `stack.yml` to `packages` section:\n```yaml\n- location:\n    git:
  https://github.com/Teaspot-Studio/gore-and-ash-sync.git\n    commit: <PLACE HERE
  FULL HASH OF LAST COMMIT> \n```\n\nWhen defining you application stack, add `SyncT`:\n```
  haskell\ntype AppStack = ModuleStack [LoggingT, ActorT, NetworkT, SyncT, ... other
  modules ... ] IO\n```\n\nUnfortunately deriving for `SyncMonad` isn't work (bug
  of GHC 7.10.3), so you need meddle with some boilerplate while defining `SyncMonad`
  instance for your application monad wrapper:\n``` haskell\nnewtype AppMonad a =
  AppMonad (AppStack a)\n  deriving (Functor, Applicative, Monad, MonadFix, MonadIO,
  MonadThrow, MonadCatch LoggingMonad, NetworkMonad)\n\ninstance SyncMonad AppMonad
  where \n  getSyncIdM = AppMonad . getSyncIdM\n  getSyncTypeRepM = AppMonad . getSyncTypeRepM\n
  \ registerSyncIdM = AppMonad . registerSyncIdM\n  addSyncTypeRepM a b = AppMonad
  $ addSyncTypeRepM a b\n  syncScheduleMessageM peer ch i mt msg  = AppMonad $ syncScheduleMessageM
  peer ch i mt msg\n  syncSetLoggingM = AppMonad . syncSetLoggingM\n  syncSetRoleM
  = AppMonad . syncSetRoleM\n  syncGetRoleM = AppMonad syncGetRoleM\n  syncRequestIdM
  a b = AppMonad $ syncRequestIdM a b \n```"
license-name: BSD-3-Clause
