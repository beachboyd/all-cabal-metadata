homepage: https://github.com/f-me/dmcc#readme
changelog-type: markdown
hash: 47bc1c10a1a0e5d2c743345076290b652a8cf6b4abcc57f72031b2fae546e4d3
test-bench-deps: {}
maintainer: dima@dzhus.org
synopsis: AVAYA DMCC API bindings and WebSockets server for AVAYA
changelog: ! '# Changelog


  ## [1.1.0.0] - 2018-11-04


  ### Changed


  - GHC 8.6.x support


  ### Removed


  - Plain unencrypted (non-TLS) connections to AES server are no longer supported


  ## [1.0.0.1] - 2018-05-10


  ### Changed


  - GHC 8.4.x support


  ## [1.0.0.0] - 2018-05-10


  [1.1.0.0]: https://github.com/f-me/dmcc/compare/1.0.0.1...1.1.0.0

  [1.0.0.1]: https://github.com/f-me/dmcc/compare/1.0.0.0...1.0.0.1

  [1.0.0.0]: https://github.com/f-me/dmcc/tree/1.0.0.0

'
basic-deps:
  http-client: <0.6
  bytestring: <0.11
  case-insensitive: <1.3
  unliftio: <0.3
  unix: <2.8
  openssl-streams: <1.3
  stm: <2.6
  xml-conduit: <1.9
  base: <4.13
  time: <1.9
  xml-hamlet: <0.6
  configurator: <0.4
  text: <1.3
  safe-exceptions: <0.2
  monad-control: <1.1
  network: <2.9
  websockets: <0.13
  dmcc: -any
  containers: <0.7
  lens: <4.18
  io-streams: <1.6
  binary: <0.9
  classy-prelude: <1.6
  transformers-base: <0.5
  monad-logger: <0.4
  random: <1.2
  HsOpenSSL: <0.12
  aeson: <1.5
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
author: Max Taldykin, Timofey Cherganov, Dmitry Dzhus, Viacheslav Lotsmanov
latest: 1.1.0.0
description-type: markdown
description: ! "# dmcc: AVAYA library for Haskell\n\n[![Travis CI build status](https://travis-ci.org/f-me/dmcc.svg)](https://travis-ci.org/f-me/dmcc)\n[![Hackage](https://img.shields.io/hackage/v/dmcc.svg?colorB=5e5184&style=flat)](https://hackage.haskell.org/package/dmcc)\n[![Hackage
  deps](https://img.shields.io/hackage-deps/v/dmcc.svg)](http://packdeps.haskellers.com/feed?needle=dmcc)\n\nThis
  package contains a Haskell library which may be used to implement\ncomputer telephony
  integration using [AVAYA DMCC XML API][dmcc-api]. A\nsimple server (dmcc-ws) built
  atop the library is also included. The\nserver allows clients use JSON-over-WebSockets
  to control AVAYA\nagents, receive event notifications and agent state updates.\n\nThe
  package uses third-party call control functions of DMCC API.\nThere's no first-party
  call control support and no access to media\nstreams.\n\nAVAYA DMCC XML API is largely
  based on [ECMA-354][] (CSTA Phase III)\nstandard, so in theory the package can be
  used with other compliant\ntelephony solutions.\n\n## Features\n\n- First-party
  interface for most of call control functions (making and\n  answering calls, hold,
  conference call, transfer, barge in, state\n  control).\n\n- State change events
  (implemented in the library using polling to\n  compensate for the lack of a native
  implementation in DMCC 6.x).\n\n- Webhook support (the library can send HTTP requests
  in response to\n  agent state change events).\n\n## Site-specific notes\n\nOne basic
  TSAPI license is consumed for every agent controlled by\nthe library.\n\nDMCC 6.x
  is supported. Consult your Avaya AES administration page to\ncheck for software
  versions and available licenses.\n\n## dmcc-ws server\n\nThe server exposes portions
  of Haskell library interface via\nWebSockets using JSON messages for client-server
  exchange. Its purpose\nis to provide a clean agent-centric interface to DMCC API
  suitable for\nusage from client applications running in a browser.\n\nRun the server
  as\n\n```\ndmcc-ws dmcc-ws.cfg\n```\n\nSee example configuration file at `dmcc-ws/example.cfg`.\n\nWith
  `dmcc-ws` running, you may start controlling an agent with\nextension `XXX` by connecting
  to WebSocket URL `http://host:port/XXX`.\nThe server accepts client commands in
  JSON:\n\n```json\n{\"action\":\"MakeCall\", \"number\":\"989150603267\"}\n```\n\nConsult
  [`DMCC.Action`][dmcc-actions] documentation in Haddock docs for DMCC library\nfor
  supported commands.\n\nThe server reports telephony events along with updated agent
  snapshot:\n\n```json\n{\n  \"newSnapshot\": {\n    \"state\": [\"Busy\", \"\"],\n
  \   \"calls\": {\n      \"179\": {\n        \"failed\": false,\n        \"held\":
  false,\n        \"ucid\": \"00001001791428242051\",\n        \"interlocutors\":
  [\n          \"989150603267:ADACs8300::0\"\n        ],\n        \"start\": \"2015-04-05T13:52:52.803Z\",\n
  \       \"direction\": {\n          \"contents\": [],\n          \"dir\": \"Out\"\n
  \       },\n        \"answered\": \"2015-04-05T13:53:02.686Z\"\n      }\n    }\n
  \ },\n  \"dmccEvent\": {\n    \"callId\": \"179\",\n    \"event\": \"EstablishedEvent\"\n
  \ },\n  \"tag\": \"TelephonyEvent\"\n}\n```\n\nClient applications may use events
  to update their UI incrementally or\nre-process the whole state every time an event
  arrives.\n\n## macOS\n\nOn macOS with `openssl` installed via Homebrew, build with\n\n```bash\nstack
  build --extra-include-dirs=/usr/local/opt/openssl/include/ --extra-lib-dirs=/usr/local/opt/openssl/lib/\n```\n\n[dmcc-api]:
  https://www.devconnectprogram.com/site/global/products_resources/avaya_aura_application_enablement_services/interfaces/dmcc/overview/index.gsp\n\n[ecma-354]:
  http://www.ecma-international.org/publications/standards/Ecma-354.htm\n\n[dmcc-actions]:
  https://hackage.haskell.org/package/dmcc/docs/DMCC-Agent.html#t:Action\n"
license-name: BSD-3-Clause
