homepage: http://github.com/andreasabel/java-adt
changelog-type: markdown
hash: 43f20d4de2140728b46c3b07b3bdfa71acb0668940f0d53dfc57cc47308420b8
test-bench-deps: {}
maintainer: Andreas Abel <andreas.abel@gu.se>
synopsis: Create immutable algebraic data structures for Java.
changelog: ! 'Changelog for java-adt

  ======================


  0.2018.11.4

  -----------


  - fixed compilation with ghc-8.4.4 and ghc-8.6.1

'
basic-deps:
  base: ! '>=4.2 && <5.0'
  array: -any
  pretty: -any
all-versions:
- 0.2016.11.28
- 0.2018.11.4
author: Andreas Abel
latest: 0.2018.11.4
description-type: markdown
description: ! "# java-adt\nA tool to create immutable algebraic data structures and
  visitors for Java\n(such as abstract syntax trees).  The input syntax is similar
  to Haskell data types,\nand they will be compiled to Java class hierarchies.\n\nInstallation\n------------\n\nWith
  a running Haskell installation such as the\n[Haskell platform](https://www.haskell.org/platform/),\nsimply
  type into your shell\n```\ncabal install alex happy java-adt\n```\nand make sure
  your `.cabal/bin/` (or similar) is part of your system PATH.\n\nExample 1: Immutable
  linked lists with default visitor\n------------------------------------------------------\n\nInput:
  List.hs\n```haskell\ndata List A = Nil | Cons { head :: A, tail :: List A }\n```\nInvokation
  `java-adt List.hs` prints to standard output:\n```java\nabstract class List<A> {\n}\n\nclass
  Nil<A> extends List<A> {\n    public Nil () {\n    }\n}\n\nclass Cons<A> extends
  List<A> {\n    public A head;\n    public List<A> tail;\n    public Cons (A head,
  List<A> tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n}\n```\nInvokation:
  `java-adt -o List.java List.hs` leaves output in `List.java`.\n\nInvokation: `java-adt
  -d List.hs` outputs same but with default visitor on standard output:\n```java\nabstract
  class List<A> {\n    public abstract <R> R accept (ListVisitor<R,A> v);\n}\n\nclass
  Nil<A> extends List<A> {\n    public Nil () {\n    }\n    public <R> R accept (ListVisitor<R,A>
  v) {\n        return v.visit (this);\n    }\n}\n\nclass Cons<A> extends List<A>
  {\n    public A head;\n    public List<A> tail;\n    public Cons (A head, List<A>
  tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    public
  <R> R accept (ListVisitor<R,A> v) {\n        return v.visit (this);\n    }\n}\n\ninterface
  ListVisitor<R,A> {\n    public R visit (Nil<A> l);\n    public R visit (Cons<A>
  l);\n}\n```\n\nExample 2: A simple AST with custom visitor\n-------------------------------------------\n\nInput
  file `Exp.hs`:  (Note the use of Haskell lists in `[Exp]`)\n```haskell\ndata Exp\n
  \ = EInt  { i :: Integer }\n  | EAdd  { e1 :: Exp, e2 :: Exp }\n  | ECall { f ::
  String, es :: [Exp] }\n--visitor Integer EvalVisitor\n```\nInvokation `java-ast
  -o Exp.java Exp.hs` outputs into `Exp.java`:\n```java\nimport java.util.List;\n\nabstract
  class Exp {\n    public abstract Integer accept (EvalVisitor v);\n}\n\nclass EInt
  extends Exp {\n    public Integer i;\n    public EInt (Integer i) {\n        this.i
  = i;\n    }\n    public Integer accept (EvalVisitor v) {\n        return v.visit
  (this);\n    }\n}\n\nclass EAdd extends Exp {\n    public Exp e1;\n    public Exp
  e2;\n    public EAdd (Exp e1, Exp e2) {\n        this.e1 = e1;\n        this.e2
  = e2;\n    }\n    public Integer accept (EvalVisitor v) {\n        return v.visit
  (this);\n    }\n}\n\nclass ECall extends Exp {\n    public String f;\n    public
  List<Exp> es;\n    public ECall (String f, List<Exp> es) {\n        this.f = f;\n
  \       this.es = es;\n    }\n    public Integer accept (EvalVisitor v) {\n        return
  v.visit (this);\n    }\n}\n\ninterface EvalVisitor {\n    public Integer visit (EInt
  e);\n    public Integer visit (EAdd e);\n    public Integer visit (ECall e);\n}\n\n```\n\nInput
  file grammar\n------------------\n\nThe input file format is similar to Haskell
  data type declarations,\nwith the special comment `--visitor`.\n```\n  datadecl
  \   ::= 'data' uppername '=' constructors visitors\n\n  constructor ::= uppername
  ['{' fieldlist '}']\n\n  fieldlist   ::= fieldlist ',' field\n                |
  field\n\n  field       ::= lowername '::' type\n\n  type        ::= type atom\n
  \               | atom\n\n  atom        ::= name\n                | '[' type ']'\n
  \               | '(' type ')'\n\n  visitor     ::= '--visitor' type name\n```\n\nLimitations\n-----------\n\n-
  Visitors do not support mutually recursive data types.\n- Record types with same
  constructor name as record name do not produce valid Java. E.g.\n  ```haskell\n
  \ data R = R { f :: A }\n  ```\n  creates two classes with name `R` and subsequent
  Java compilation errors.\n"
license-name: LicenseRef-OtherLicense
