homepage: https://scravy.de/hydrogen-cli-args/
changelog-type: markdown
hash: f2483f7729725ed9792e09efe0040025bea0d4978312040726c8e690516459cd
test-bench-deps: {}
maintainer: julian@scravy.de
synopsis: Hydrogen Command Line Arguments Parser
changelog: ! '## v0.11

  - unrecognized short opts are now kept in argument list

'
basic-deps:
  base: ! '>=4.7 && <5'
  hydrogen-prelude: ==0.17
  containers: ==0.5.*
  hydrogen-multimap: ==0.1
all-versions:
- '0.14'
- '0.17'
author: Julian Fleischer
latest: '0.17'
description-type: markdown
description: ! "hydrogen-cli-args\n=================\n\n[![Build Status](https://travis-ci.org/scravy/hydrogen-cli-args.svg?branch=master)](https://travis-ci.org/scravy/hydrogen-cli-args)\n\nAn
  easy to use command line arguments parser.\n\n    main = do\n\n        (options,
  switches, args) <- getOpts [\n            'V' ~: switch \"version\"\n          ,
  'h' ~: switch \"help\"\n          ,        optarg \"inFile\"\n          ,        optarg
  \"outFile\"\n          , 'v' ~: switch \"verbose\"\n          , 'f' ~: optarg \"flag\"\n
  \         , 'D' ~: optarg \"config\"\n          ]\n\n        when (switches ? \"version\")
  $ println \"Example v1.0\"\n\n        when (switches ? \"help\") showManual\n\n
  \       let flags  = options ! \"flag\"\n            config = options ! \"config\"\n\n
  \       ...\n\nThis program will accept arguments like that:\n\n    -h --version
  -DHELLLO --config=SOME_CONFIG -f flagvalue\n\n+ `options` in the above example is
  a `MultiMap String String`\n+ `switches` is a `Set String`\n+ `args` contains the
  remaining arguments as a `[String]`.\n\nIf an optional argument, defined by `optarg`
  is given (by its short alias or by\nits long name) it will show up in the `options`
  `MultiMap`. Note that you can check\nfor a key beings set with `(?)` and retrieve
  all associated values with `(!)`.\nAlso note that `(!)` will always return a list,
  but possibly en empty one (if no option\nwas given).\n\nLong options can be given
  as `--key value` or as `--key=value`.\n\nShort options can be given as `-D value`
  as well as `-Dvalue`.\n\nIf a switch, defined by `switch` is given, it will show
  up in the `switches` `Set`.\nYou can query for whether a switch is set or not with
  `(?)`.\n\nSwitches can be combined, i.e. `-hv` is the same as `-h -v`.\n\nIf `--`
  is supplied as an argument, no options are evaluated beyond this point.\nAny unknown
  or malformed option (`-x`, `--xxxx`) will be treated as an argument.\n\n\nAPI\n---\n\n###
  Define options\n\n#### `switch :: String -> Option`\n\nDefines a command line switch
  with the given long name.\n\n\n#### `optarg :: String -> Option`\n\nDefines a command
  line option with the given long name.\n\n\n#### `alias  ~: option :: Char -> Option
  -> Option`\n\nDefines a shorthand for the given option.\n\n\n#### `option ~? check
  :: Option -> (String -> Bool) -> Option`\n\nDefines a check which the optional arguments'
  value has to pass.\n\n\n#### `option ~= pattern :: Option -> String -> Option`\n\nDefines
  a pattern which the optional arguments' value must match.\n\n\n### Get options and
  arguments\n\n#### `type OptArgs = (MultiMap String String, Set String, [String])`\n\n####
  `getOpts :: [Options] -> IO OptArgs`\n\n#### `getOpts' :: [Options] -> [String]
  -> OptArgs`\n\n\n### Query MultiMaps / Sets\n\nPart of [hydrogen-prelude](http://github.com/scravy/hydrogen-prelude).\n"
license-name: MIT
