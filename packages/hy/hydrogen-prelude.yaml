homepage: http://scravy.de/hydrogen-prelude/
changelog-type: markdown
hash: ef6b40709fe02a2519dca79cd5f1b1187239e502b417091c08f87d22e8bc8927
test-bench-deps: {}
maintainer: julian@scravy.de
synopsis: Hydrogen Prelude
changelog: ! "## v0.1\n+ initial release\n\n## v0.1.0.1\n+ Patch: Modules were not
  properly exported in Cabal file\n\n## v0.1.1\n+ Added `module Numeric`, `Data.Map
  (Map)`, and `Data.Set (Set)`\n\n## v0.2\n+ Added `for`\n\n## v0.2.0.1\n+ Added CHANGELOG.md
  to source package\n\n## v0.2.1\n+ Added `__` (short hand for `undefined`)\n\n##
  v0.3\n+ Also exports\n  + `module Data.Ix`,\n  + `module Data.Array`,\n  + `Data.Bits`,\n
  \ + `Data.Ratio`,\n  + and `Data.Complex`\n+ New dependency on `hydrogen-version`\n
  \ + Exports `module Hydrogen.Version` as replacement for `module Data.Version`\n\n##
  v0.4\n*Skipped, bumped to v0.5 to be aligned with other hydrogen packages*\n\n##
  v0.5\n+ Deriving instance `Eq` for `ZonedTime`\n\n## v0.6\n+ New dependencies\n
  \ + `cereal` for serialization\n  + `strict` for strict io in `Hydrogen.Prelude.IO`\n+
  Also exports\n  + `module Data.Dynamic`\n  + `module Data.Typeable`\n+ Added `ShowBox`
  class (an existentially qualified container type)\n\n## v0.7\n+ Newly deriving instances\n
  \ + `Serialize` for `ZonedTime`\n  + `Serialize` for `Version`\n\n## v0.8\n+ Added
  `class TMap (tmap)` and `class Has (HasKey, HasValue, (!))`\n+ Introduced `type
  List a` as alias for `[a]`\n+ Also exports\n  + `Data.Seq`\n+ Added the F-Sharp
  inspired `|>` (which is `flip ($)`)\n+ Exporting only `Generic` from `GHC.Generics`\n+
  Added `Hydrogen.Prelude.Network`\n\n## v0.9\n+ Also exports\n  + `module Data.Traversable`\n+
  Added `class Container (Contained, (?))`\n+ `fmap` is exported as `map`\n\n## v0.10\n+
  Added `safeHeadAndTail`, `safeHeadAndTail2`, `firstJust`\n+ Little documentation
  improvements\n+ Added `findFilesRecursively` and `findFilesRecursivelyWithContext`\n
  \ in `Hydrogen.Prelude.System`\n\n## v0.11\n+ Added `nicify` form `Text.Nicify`\n+
  Upgraded dependency `hydrogen-version` from `>=1.2` to `>=1.3`\n\n## v0.12\n+ Added
  `Default`\n\n## v0.13\n+ _Skipped_\n\n## v0.14\n+ Aligned with other `hydrogen-*`
  packages\n\n## v0.15\n+ Added `Apply`\n+ Added `uncurry3`, `uncurry4`, `uncurry5`\n\n##
  v0.16\n+ Changed `Apply` to use `-XMultiParamTypeClasses` and `-XTypeFamilies`\n
  \ for better type inference\n+ Added `$$`, `$$$`, `$$$$`, `$$$$$` (like `uncurryN`)\n+
  Added `<$$>`, `<$$$>`, `<$$$$>`, `<$$$$$>` (like `<$>` and `uncurryN`)\n\n## v0.17\n+
  Removed instance `MonadPlus m => Default (m a)`.\n\n## v0.18\n+ Removed dependency
  on `nicify`\n\n## v0.19\n+ Removed `Apply` and `Applicator` again\n+ Lowered dependencies
  to work with GHC 7.6 and base 4.6 too\n\n## v0.20\n+ Support for GHC 7.4, 7.6, and
  7.8\n+ Instances for `Serializable` but also for `Binary`\n\n"
basic-deps:
  cereal: ! '>=0.4.1.1'
  bytestring: ! '>=0.9.2.1'
  base: ! '>=4.5 && <5'
  time: ! '>=1.4'
  text: ! '>=0.11.2'
  uuid: ! '>=1.3'
  strict: ! '>=0.3'
  filepath: ! '>=1.3'
  process: ! '>=1.1.0.1'
  network: ! '>=2.3'
  array: ! '>=0.4'
  containers: ! '>=0.4.2.1'
  hydrogen-multimap: ! '>=0.3'
  binary: ! '>=0.7'
  regex-tdfa: ! '>=1.2'
  regex-base: ! '>=0.93.1'
  hashable: ! '>=1.1'
  transformers: ! '>=0.3'
  random: ! '>=1.0.1.1'
  hydrogen-version: ! '>=1.4'
  directory: ! '>=1.1'
all-versions:
- '0.14'
- '0.15'
- '0.16'
- '0.17'
- '0.18'
- '0.19'
- '0.20'
author: Julian Fleischer
latest: '0.20'
description-type: markdown
description: ! "hydrogen-prelude\n================\n\n[![Build Status](https://travis-ci.org/scravy/hydrogen-prelude.svg?branch=master)](https://travis-ci.org/scravy/hydrogen-prelude)\n\n+
  [`about`](#about)\n  + [`scravy.de/hydrogen-prelude`](http://scravy.de/hydrogen-prelude)\n
  \ + [`hackage.haskell.org/package/hydrogen-prelude`](http://hackage.haskell.org/package/hydrogen-prelude)\n+
  [`goodies`](#goodies)\n  + [`(!)`](#--has-a--a--haskey-a--hasvalue-a)\n  + [`(?)`](#--container-a--a--contained-a--bool)\n
  \ + [`tmap`](#tmap)\n  + [`fmap` vs `map`](#fmap-vs-map)\n  + [`__`](#__--a)\n  +
  [`|>`](#fsharps--which-is-flip-)\n  + [`safeHead`](#safehead--a--a--a)\n  + [`ShowBox`](#showbox--forall-a-show-a--a--showbox)\n
  \ + [`.|`, `.&`, `.^`](#----a--bool--a--bool--a--bool)\n  + [`List a`](#type-list-a--a)\n
  \ + [`Default a`](#class-default-a)\n  + [`Apply a`](#class-apply-a)\n+ [`re-exports`](#re-exports)\n
  \ + [`Hydrogen.Prelude`](#hydrogenprelude)\n  + [`Hydrogen.Prelude.IO`](#hydrogenpreludeio)\n
  \ + [`Hydrogen.Prelude.System`](#hydrogenpreludesystem)\n  + [`Hydrogen.Prelude.Network`](#hydrogenpreludenetwork)\n+
  [`FAQ`](#faq)\n\nabout\n-----\n\nA Prelude that exports much of the standard library
  (more then `Prelude`), without conflicts. If for example you were to import `Prelude`
  and `Data.List` or `Data.Foldable` you will run into ambiguous imports (regarding
  `foldr` for example). This Prelude aims at exporting the most general functions
  (in this case `foldr` from `Data.Foldable`).\n\nIt also pulls in some default packages
  like `cereal` for serialization and `containers` for data types like `Map` and `Set`.
  Every datatype exported by this Prelude comes with instances for `Serialize`.\n\nLongs
  story short, instead of:\n\n    import Prelude hiding (\n      all, and, any, concat,
  concatMap, elem, foldl, foldl1, foldr, foldr1,\n      mapM, mapM_, maximum, minimum,
  notElem, or, product, sequence, sequence_, sum\n     )\n    import \"base\" Control.Monad
  hiding (\n      forM, forM_, mapM, mapM_, msum, sequence, sequence_\n     )\n    import
  Data.Foldable\n    import Data.Traversable\n    import Data.List hiding (\n      all,
  and, any, concat, concatMap, elem, find, foldl, foldl', foldl1, foldr, foldr1,\n
  \     mapAccumL, mapAccumR, maximum, maximumBy, minimum, minimumBy, notElem, or,
  product, sum\n     )\n    \nit suffices to:\n\n    import Hydrogen.Prelude\n\ngoodies\n-------\n\nBeyond
  existing functions from well-known standard packages, this prelude defines a few
  utilities (mostly aimed at unifying functionality across different packages, like
  `containers` and `array`).\n\n---\n\n### `(!) :: Has a ⇒ a → HasKey a → HasValue
  a`\n\n`(!)` is provided for several data types which associate a key and a value.\n\n
  \   [(1, 'a'), (3, 'v')] ! 1  →  'a'\n\nInstances are defined for\n\n+ `Eq k ⇒ [(k,
  v)]`\n+ `Ix i ⇒ Array i e` with `HasKey → i`\n+ `Ord k ⇒ Map k v` with `HasValue
  → v`\n+ `Ord k ⇒ MultiMap k v` with `HasValue → [v]`\n\n---\n\n### `(?) :: Container
  a ⇒ a → Contained a → Bool`\n\nCheck whether the element on the right is contained
  in the collection on the left.\n\n    [1, 2, 4] ? 3  →  False\n\nInstances are defined
  for\n\n+ `Eq a ⇒ [a]`\n+ `Ord a ⇒ Set a`\n+ `Eq a ⇒ Seq a`\n+ `Ord k ⇒ Map k v`
  with `Contained → k`\n+ `Ord k ⇒ MultiMap k v` with `Contained → k`\n\n---\n\n###
  `tmap`\n\nA little bit like `fmap` but defined differently on some datatypes (applies
  e.g. to both components of a tuple).\n\n    tmap succ (3, 4)  →  (4, 5)\n\nInstances
  are defined for\n\n+ `(a, a)`\n+ `(a, a, a)`\n+ `(a, a, a, a)`\n+ `[a]`\n+ `Seq
  a`\n+ `Map k v`\n+ `MultiMap k v`\n\n---\n\n### `fmap` vs `map`\n\nHydrogen Prelude
  exports `fmap` as `map` - the way it ought to be.\n\n---\n\n### `__ :: a`\n\nA handy
  shortcut for `undefined`.\n\n---\n\n### FSharp's `|>` (which is `flip ($)`)\n\nUse
  it to pipe things from one function to the other, left to right:\n\n    head xs
  |> fromEnum |> show\n\n---\n\n### `safeHead :: a → [a] → a`\n\nThe head of the list,
  or the default given as first argument.\n\n    safeHead x xs = maybe x head . listToMaybe\n\n---\n\n###
  `ShowBox :: forall a. (Show a) ⇒ a → ShowBox` ###\n\nWrap anything that is showable
  (can be used to build heterogeneous lists).\n\n---\n\n### `.|, .&, .^ :: (a → Bool)
  → (a → Bool) → (a → Bool)`\n\nCombines predicates.\n\n    filter (isDigit .| isLetter)\n\n---\n\n###
  `type List a = [a]`\n\nA longhand for the type of lists, if you prefer this more
  wordy version.\n\n---\n\n### `class Default a` ###\n\nA class that provides the
  `def` function for default values for types.\nInstances of `MonadPlus` automatically
  have an instance where `def = mzero`.\n\nDefault instances for most primitive types
  are also provided.\n\n---\n\n### `class Apply a` ###\n\nProvides the `*$*` operator
  which is your all-purpose application operator.\nIt does uncurrying (if you want
  to apply a tupel result of a function to\na function that is curryied, works with
  tupels of up to 5 components) and\nalso works with `Applicative`, i.e. it also does
  `fmap . uncurry`:\n\n    data Operator = Operator Value OperatorType Value\n\n    parseInfixOperation
  :: Parser (Value, OperatorType, Value)\n\n    ... Operator *$* parseInfixOperation
  ...\n\nre-exports\n----------\n\n\n### Hydrogen.Prelude\n\nThe Hydrogen Prelude
  offers you the functions and datatypes from these modules, all with one import:\n\n+
  from [`base`](http://hackage.haskell.org/package/base)\n  + `module Prelude`\n  +
  `module Control.Applicative`\n  + `module Control.Arrow`\n  + `module Control.Monad`\n
  \ + `module Data.Bits`\n  + `module Data.Bool`\n  + `module Data.Char`\n  + `module
  Data.Complex`\n  + `module Data.Complex`\n  + `module Data.Dynamic`\n  + `module
  Data.Either`\n  + `module Data.Fixed`\n  + `module Data.Function`\n  + `module Data.Foldable`\n
  \ + `module Data.Int`\n  + `module Data.Ix`\n  + `module Data.List`\n  + `module
  Data.Maybe`\n  + `module Data.Ord`\n  + `module Data.Ratio`\n  + `module Data.String`\n
  \ + `module Data.Time`\n  + `module Data.Traversable`\n  + `module Data.Tuple`\n
  \ + `module Data.Typeable`\n  + `module Data.Word`\n  + `module Numeric`\n  + `module
  Text.Printf`\n\n+ from [`array`](http://hackage.haskell.org/package/array)\n  +
  `module Data.Array`\n\n+ from [`cereal`](http://hackage.haskell.org/package/cereal)\n
  \ + `module Data.Serialize`\n\n+ from [`containers`](http://hackage.haskell.org/package/containers)\n
  \ + `Data.Set`, `Data.Map`, and `Data.Seq`\n\n+ from [`hashable`](http://hackage.haskell.org/package/hashable)\n
  \ + `module Data.Hashable`\n\n+ form [`hydrogen-multimap`](http://hackage.haskell.org/package/hydrogen-multimap)\n
  \ + `Hydrogen.MultiMap`\n\n+ from [`hydrogen-version`](http://hackage.haskell.org/package/hydrogen-version)\n
  \ + `module Hydrogen.Version`\n\n+ from [`regex-tdfa`](http://hackage.haskell.org/package/regex-tdfa)\n
  \ + `module Text.Regex.TDFA`\n\n+ from [`time`](http://hackage.haskell.org/package/time)\n
  \ + `module Data.Time`\n\n+ from [`transformers`](http://hackage.haskell.org/package/transformers)\n
  \ + `module Data.Functor.Identity`\n  + `module Data.Functor.Reverse`\n\n+ from
  [`uuid`](http://hackage.haskell.org/package/uuid)\n  + `Data.UUID`\n  + `Data.UUID.fromString`
  as `uuidFromString`\n  + `Data.UUID.V4.nextRandom` as `randomUUID`\n\n\n### Hydrogen.Prelude.IO\n\n+
  from [`base`](http://hackage.haskell.org/package/base)\n  + `module Data.IORef`\n
  \ + `module Control.Concurret`\n  + `module Control.Exception`\n  + `module System.IO`\n
  \ + `module System.Timeout`\n\n+ from [`strict`](http://hackage.haskell.org/package/strict)\n
  \ + strict IO functions `hGetContents'`, `getContents'`, `readFile'`, `interact'`\n\n\n###
  Hydrogen.Prelude.System\n\n+ from [`base`](http://hackage.haskell.org/package/base)\n
  \ + `module System.CPUTime`\n  + `module System.Environment`\n  + `module System.Exit`\n
  \ + `module System.Info`\n\n+ from [`directory`](http://hackage.haskell.org/package/directory)\n
  \ + `module System.Directory`\n\n+ from [`filepath`](http://hackage.haskell.org/package/filepath)\n
  \ + `module System.FilePath`\n\n+ from [`process`](http://hackage.haskell.org/package/process)\n
  \ + `module System.Process`\n\n+ from [`random`](http://hackage.haskell.org/package/random)\n
  \ + `module System.Random`\n\n\n### Hydrogen.Prelude.Network\n\n+ from [`network`](http://hackage.haskell.org/package/network)\n
  \ + `module Network`\n\n\nFAQ\n===\n\nHow is some of the *magic* accomplished?\n----------------------------------------\n\nMostly
  with `XTypeFamilies` and `XStandaloneDeriving`.\n\nSo this works only with GHC?\n----------------------------\n\nYes,
  for now at least.\n\nWhat is `hydrogen`\n------------------\n\nhttps://www.youtube.com/watch?v=rbBX6aEzEz8\n\n\n"
license-name: MIT
