homepage: https://github.com/GaloisInc/myxine
changelog-type: markdown
hash: a3150fa88249ddf209a5357182ed0e2dda6f5fb5b42f8e69949707f2ecd168d4
test-bench-deps:
  bytestring: -any
  base: ^>=4.13.0.0
  text: -any
  myxine-client: -any
maintainer: kwf@galois.com
synopsis: A Haskell client for the Myxine GUI server
changelog: ''
basic-deps:
  http-client: ^>=0.6
  bytestring: ^>=0.10
  dependent-sum: ^>=0.6
  base: ^>=4.13.0.0
  unordered-containers: ^>=0.2
  text: ^>=1.2
  dependent-map: ^>=0.3
  req: ^>=3.1
  hashable: ^>=1.3
  file-embed: ^>=0.0.11.1
  transformers: ^>=0.5
  http-types: ^>=0.12
  aeson: ^>=1.4
  template-haskell: ^>=2.15
all-versions:
- 0.0.0.1
author: Kenny Foner
latest: 0.0.0.1
description-type: haddock
description: |-
  [Myxine](https://github.com/GaloisInc/myxine) is a language-agnostic local
  server that lets you build interactive applications in the browser using a
  RESTful API. This package defines high-level typed Haskell bindings for using
  Myxine to quickly prototype surprisingly high-performance GUIs.

  Myxine itself runs as a local server, separately from these bindings. It is
  built in [Rust](https://www.rust-lang.org/learn/get-started), and can be
  installed using the standard Rust build tool @cargo@:

  > $ cargo install myxine

  This Haskell package does __not__ manage the @myxine@ server process; it
  assumes that it is already running in the background (either started by an
  end-user, or managed by your own Haskell application).

  __Required extensions:__ This library relies on the @OverloadedRecordFields@
  language extension, since a variety of browser event interfaces share field
  names/types. Without enabling it, you'll see many bewildering errors about
  ambiguous names. You may also find useful for concision the extensions
  @NamedFieldPuns@ and @RecordWildCards@.

  __Package versioning and stability:__ This package should be considered in
  "alpha" stability at present. No compatibility between alpha versions is
  guaranteed.
license-name: MIT
