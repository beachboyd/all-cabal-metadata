homepage: http://hub.darcs.net/thielema/guarded-allocation/
changelog-type: ''
hash: 303ce89b8a91c26165e3426dc26fff9ad622bf5fc3ef47f679ea82c569ea6b13
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Memory allocation with added stress tests and integrity checks
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
all-versions:
- '0.0'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.0'
description-type: markdown
description: ! "The overall idea of the package is to make programming mistakes\nlet
  low-level programs fail reproducibly.\n\nWhat the routines do:\n\n *  After allocation
  fill the memory with the hex string 0xDEADF00D.\n    This allows to check whether
  the caller\n    properly initialises allocated buffers.\n\n *  Allocate some memory
  before and after the actual buffer\n    and fill it with 0xABADCAFE.\n    On deallocation
  it is checked that this pattern is still intact.\n    If not, abort with an error.\n
  \   This allows to check for range violations.\n\n *  Before deallocation fill the
  memory with 0xDEADBEEF.\n    This helps to detect when the program reads memory
  after its deallocation.\n\n *  The `create` routine additionally makes a copy of
  the initialized buffer.\n    The finalizer compares the contents of the buffer and
  its copy.\n    This way it can detect if an immutable array was altered after its
  creation.\n\n\nRange violations might alternatively be detected by range checking
  techniques.\nAllocation problems might be solved using Regions.\nThe provided functions
  might overlook range violations\nbut they help detecting bugs\nwhen you have not
  full control over the code that processes memory content,\ne.g. when calling external
  routines via FFI.\n"
license-name: BSD3
