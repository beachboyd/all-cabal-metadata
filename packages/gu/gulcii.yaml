homepage: https://code.mathr.co.uk/gulcii
changelog-type: ''
hash: 010b3ba7b2162747e7cccabc6c225a2bd4430d8a078df0a221811e8e06290741
test-bench-deps: {}
maintainer: claude@mathr.co.uk
synopsis: graphical untyped lambda calculus interactive interpreter
changelog: ''
basic-deps:
  base: ! '>=3 && <6'
  filepath: ! '>=1.1 && <1.5'
  cairo: ! '>=0.11 && <0.14'
  containers: ! '>=0.3 && <0.6'
  gtk: ! '>=0.11 && <0.15'
all-versions:
- '0.2.0.1'
- '0.2.0.3'
- '0.3'
author: Claude Heiland-Allen
latest: '0.3'
description-type: markdown
description: ! "GULCII\n======\n\nGULCII is an untyped lambda calculus interpreter
  supporting interactive\nmodification of a running program with graphical display
  of graph reduction.\n\n\nSyntax\n------\n\nLambda calculus terms with some sugar
  coating:\n  \n    term ::= variable                    -- free or bound\n         |
  '\\' var+ strategy term        -- lambda abstraction\n         | term+                         --
  application\n         | '(' term ')'\n         | integer\n         | list\n    variable
  ::= [a-z][A-Za-z0-9]*\n    strategy = '.' | '!' | '?'           -- lazy | strict
  | copy\n    integer ::= [0-9]+                   -- uses Scott-encoding\n    list
  ::= '[' (term (, T)*)? ']'      -- uses Scott-encoding\n\nThere are three variants
  of lambda abstraction: lazy, strict, and copy:\n\n    \\x . f x x    -- x is evaluated
  lazily with sharing\n    \\x ! f x x    -- x is evaluated strictly and shared\n
  \   \\x ? f x x    -- x is copied before any evaluation\n\nThere is additional syntax
  sugar for natural numbers and lists, using\n<http://en.wikipedia.org/wiki/Mogensen%E2%80%93Scott_encoding#Scott_encoding>:\n\n
  \   [0,1,2,3]\n\nThere is a small standard library based loosely around the Haskell
  Prelude:\n\n    :load prelude\n    :browse\n\nIf you define a term using free variables,
  they can be modified while\nthe program is running, but sharing is lost.  If you
  define a term as\na fixed point (perhaps with Y-combinator) then sharing works (to
  some\nextent), but you can't modify the code while it is running any more.\n\n\nMeta
  Commands\n-------------\n\nTo exit type:\n\n    :quit\n\nEntering a term evaluates
  it.\n\nTerms can be bound to names, stored in a global dictionary:\n\n    foo =
  bar\n\nThe global dictionary can be listed or wiped clean:\n\n    :browse\n    :clear\n\nInstalled
  files can be loaded:\n\n    :load church\n\nMachine-readable node statistics are
  output to stdout, as well as when\nfree variables are instantiated by looking up
  their definitions.  These\nare intended to be used for sonification, for example
  with Pure-data:\n\n    pd extra/gulcii.pd &\n    sleep 5\n    gulcii | pdsend 8765\n\nThe
  sonification is controlled by two commands:\n\n    :start\n    :stop\n\n\nSettings\n--------\n\nThere
  are some runtime adjustable settings:\n\n    :get NewsOnTop\n    :set NewsOnTop\n
  \   :unset NewsOnTop\n    :toggle NewsOnTop\n\nWhere NewsOnTop is a setting.  Settings
  include:\n\n    TraceEvaluation\n    CollectGarbage\n    RealTimeDelay\n    RealTimeAcceleration\n
  \   RetryIrreducible\n    EmitStatistics\n    EmitRebindings\n    EchoToStdOut\n
  \   EchoToGUI\n    SaveImages\n    NewsOnTop\n"
license-name: GPL-2
