homepage: http://www.ccs.neu.edu/~tov/pubs/alms/
changelog-type: ''
hash: 733c1999e301b143c10f37c3a39514b17bed6075f20059d8d02f61f992200125
test-bench-deps: {}
maintainer: tov@ccs.neu.edu
synopsis: a practical affine language
changelog: ''
basic-deps:
  stm: ! '>=2.0'
  base: ==4.*
  tuple: ! '>=0.2'
  syb: ! '>=0.1'
  filepath: ! '>=1.1'
  network: ! '>=2.2'
  parsec: ==3.*
  HUnit: ! '>=1.2'
  array: ! '>=0.3'
  containers: ! '>=0.1'
  editline: ! '>=0.2.1'
  fgl: ! '>=5'
  mtl: ! '>=1.1'
  transformers: ! '>=0.2'
  random: ! '>=1'
  incremental-sat-solver: ! '>=0.1.7'
  QuickCheck: ! '>=2'
  pretty: ! '>=1'
  template-haskell: ! '>=2.0'
  directory: ! '>=1.0'
all-versions:
- '0.4.9'
- '0.4.9.1'
- '0.4.10'
- '0.4.11'
- '0.4.12'
- '0.5.0'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.6.8'
author: Jesse A. Tov <tov@ccs.neu.edu>
latest: '0.6.8'
description-type: text
description: ! "This is a prototype implementation of Alms, an affine language with\nmodules
  and subtyping.\n\nPlease see http://users.eecs.northwestern.edu/~jesse/pubs/alms/
  for more\ninformation.\n\nCONTENTS\n\n * GETTING STARTED\n * WHAT TO TRY\n * PAPER
  SYNTAX VERSUS ASCII SYNTAX\n * EDITLINE TROUBLE\n\n\nGETTING STARTED\n\n  Alms is
  no longer actively maintained, and does not build with the\n  latest GHC. In particular,
  it is know to work with GHC 7.6.3, and and\n  likely no longer works with GHC 6.
  It also does not work with GHC 8.\n\n  Provided that a not-too-recent ghc is in
  your path, to build on UNIX\n  it ought to be be sufficient to type:\n\n    % make\n\n
  \ This should produce an executable \"alms\" in the current directory,\n\n  If this
  fails, it may also be necessary to either install the editline\n  package first
  or disable line editing (Please see EDITLINE TROUBLE).\n\n  On Windows, build with
  Cabal:\n\n    > runghc Setup.hs configure\n    > runghc Setup.hs build\n\n  This
  produces an executable in \"dist\\build\\alms\\alms\".\n\n  Cabal should work on
  UNIX as well, but mixing Cabal and make leads to\n  linker errors, so it's probably
  best to stick with one or the other.\n\n\nWHAT TO TRY\n\n  Examples from the paper
  and several more are in the examples/\n  directory.  The examples from section 2
  of the POPL submission are in:\n\n    examples/ex60-popl-deposit.alms\n    examples/ex61-popl-AfArray.alms\n
  \   examples/ex62-popl-AfArray-type-error.alms\n    examples/ex63-popl-CapArray.alms\n
  \   examples/ex64-popl-CapLockArray.alms\n    examples/ex65-popl-Fractional.alms\n
  \   examples/ex66-popl-RWLock.alms\n\n  Other notable examples include two implementations
  of session types,\n  an implementation of Sutherland-Hodgman re-entrant polygon
  clipping\n  (1974) using session types, and the tracked Berkeley Sockets API from\n
  \ our ESOP 2010 paper:\n\n    lib/libsessiontype.alms\n    lib/libsessiontype2.alms\n
  \   examples/session-types-polygons.alms\n    lib/libsocketcap.alms\n\n  The echo
  server from the ESOP paper, which uses libsocketcap, is in\n  examples/echoServer.alms.
  \ To try it, listening on port 10000, run:\n\n    % ./alms examples/echoServer.alms
  10000\n\n  To connect to the echo server, you can run\n\n    % ./alms examples/netcat.alms
  localhost 10000\n\n  from another terminal.\n\n  The examples directory contains
  many more examples, many of which are\n  small, but demonstrate type or contract
  errors -- the comment at the\n  top of each example says what to expect.  Run many
  of the examples\n  with:\n\n    % make examples\n\n  Or run the examples as regression
  tests (quietly):\n\n    % make tests\n\n  Of course, you can also run the interpreter
  in interactive mode:\n\n    % ./alms\n\n  You can load libraries from the command
  line like this:\n\n    % ./alms -lsocketcap\n\n  Or from within the REPL like this:\n\n
  \   #- #load \"libsocketcap\"\n\n  Finally, it may be helpful to know about the
  #i command for asking the\n  REPL about identifiers:\n\n    #- #i list Exn *\n    type
  +`a list : `a = (::) of `a * `a list | ([])   -- built-in\n    module Exn    --
  defined at lib/libbasis.alms:198:1-32\n    type +`a * +`b : `a \\/ `b   -- built-in\n
  \   val ( * ) : int -> int -> int   -- built-in\n\n\nPAPER SYNTAX VERSUS ASCII SYNTAX\n\nThe
  language as presented in the paper is faithful to the language as\nimplemented,
  except for issues of pretty printing:\n\n  LaTeX (what the paper says)     ASCII
  (what you type)\n  -----------------------------------------------------\n  \\forall
  \\exists \\lambda         all ex fun   (binders)\n  \\alpha                          'a
  \          (unlimited type variable)\n  \\hat\\alpha                      `a           (affine
  type variable)\n  \\to^A                           -A>          (affine arrow)\n
  \ \\to^{\\hat\\alpha}                -a>          (arrow with qualifier)\n  \\sqcup
  \                         \\/           (qualifier join)\n  \\pm \\baro + -                   =
  0 + -      (variances)\n\n\nEDITLINE TROUBLE\n\n  Line editing is enabled in the
  REPL by default, which depends on the\n  editline Cabal package.  If make fails
  and says something about\n  editline, then there are three options:\n\n   - Disable
  line editing:\n\n       % make clean; make FLAGS=-editline\n\n     or\n\n       %
  cabal install --flags=\"-editline\" alms\n\n   - Use readline instead:\n\n       %
  make clean; make FLAGS=readline\n\n     or\n\n       % cabal install --flags=\"readline\"
  alms\n\n   - Try to install editline or readline . . .\n\n  Installing editline
  can be kind of touchy.  On my system,\n\n    % cabal install editline\n\n  seemed
  to install it, but Cabal still couldn't find it when\n  building this program.  Installing
  editline globally made it work:\n\n    % sudo cabal install --global editline\n\n
  \ (Likewise, readline didn't work until I installed it globally.)\n\n  At this point,
  older versions of Cabal may give the installed library\n  bad permissions, so something
  like this may help, depending on where\n  it installs things:\n\n    % sudo chmod
  -R a+rX /usr/local/lib/editline*\n\n  If the cabal installation of the GHC package
  fails, it may be\n  necessary first to install the C library that it depends on.
  \ The\n  source is available at http://www.thrysoee.dk/editline/.  On my Debian\n
  \ system, I was able to install it with:\n\n    % sudo aptitude install libedit2
  libedit-dev\n\n  Note that libeditline is a *completely different* library, and\n
  \ installing that will not help.\n\n"
license-name: BSD3
