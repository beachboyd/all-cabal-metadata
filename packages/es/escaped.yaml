homepage: https://github.com/pbrisbin/escaped#readme
changelog-type: markdown
hash: 9347d0e90cb1a66d0f7c8cbe7607b6ccba2c914b6fe7277b7175d6f4df2b1dee
test-bench-deps:
  base: ! '>=4.7 && <5'
  escaped: -any
  hspec: -any
  doctest: -any
  quickcheck-properties: -any
  QuickCheck: -any
maintainer: pbrisbin@gmail.com
synopsis: Produce Text with terminal escape sequences
changelog: ! '## [*Unreleased*](https://github.com/pbrisbin/escaped/compare/v1.0.0.0...master)


  None


  ## [v1.0.0.0](https://github.com/pbrisbin/escaped/tree/v1.0.0.0)


  - Initial release

'
basic-deps:
  unix: -any
  base: ! '>=4.7 && <5'
  escaped: -any
  text: -any
  quickcheck-instances: -any
  QuickCheck: -any
all-versions:
- '1.0.0.0'
author: Patrick Brisbin
latest: '1.0.0.0'
description-type: markdown
description: ! "# escaped\n\nProduce `Text` with terminal escape sequences.\n\n##
  Usage\n\n### Quick Start\n\n```hs\n{-# LANGUAGE OverloadedStrings #-}\nmodule Main
  where\n\nimport Data.Semigroup ((<>))\nimport Data.Text.Escaped\nimport qualified
  Data.Text.IO as T\n\nmain :: IO ()\nmain = T.putStrLn $ render $ \"This is \" <>
  red \"red\" <> \" text.\"\n```\n\n### Example\n\nRunning the example executable
  will produce everything this library currently\nsupports:\n\n![Example](./example.png)\n\n###
  Helper Functions\n\nThe above uses the `red` helper function, which prefixes the
  given value with\nthe (foreground) color red, then resets after.\n\n**NOTE**: this
  function composes `Escaped`s, so you can nest:\n\n```hs\n\"This is \" <> red (bg
  Blue \"red on blue\") <> \" text.\"\n```\n\n### The `Escaped` Type\n\nBehind those
  helpers, a `Semigroup` instance, and the `OverLoadedStrings`\nextension, what you're
  actually doing is building up a value of type `Escaped`:\n\n```console\nλ> :set
  -XOverloadedStrings\nλ> \"one\" <> red \"red\" <> \"three\"\nMany [Plain \"one\",FG
  Red,Plain \"red\",Reset,Plain \"three\"]\nλ> render it\n\"one\\ESC[31mred\\ESC[0mthree\"\n```\n\nThe
  `Escaped` type has constructors for the various shell escapes and is meant\nto be
  used directly for non-trivial cases.\n\n```hs\n\"This is \" <> Blink <> FG Red <>
  \"blinking red\" <> Reset <> \" text.\"\n```\n\nIf you need to interpolate *non-literals*
  of type `Text`, use the `Plain`\nconstructor:\n\n```hs\nlogMessage :: Level -> Text
  -> Escaped\nlogMessage l msg = \"[\" <> prefix <> \"] \" <> Plain msg\n  where\n
  \   prefix :: Level -> Escaped\n    prefix Info = blue \"INFO\"\n    prefix Warn
  = yellow \"WARN\"\n    -- etc.\n```\n\n### Terminal Applications\n\nThe `terminalRenderer`
  function queries if `stdout` is connected to a tty and\nreturns `render` or `plain`
  as appropriate:\n\n```hs\nmain = do\n    r <- terminalRenderer\n\n    T.putStrLn
  $ r $\n        \"This will be escaped as \"\n        <> red \"red\"\n        <>
  \" only if we're connected to a tty.\"\n```\n\n## Development & Testing\n\n```console\nstack
  setup\nstack build --pedantic test\n```\n\nSee also the [`Makefile`](./Makefile).\n\n---\n\n[CHANGELOG](./CHANGELOG.md)
  | [LICENSE](./LICENSE)\n"
license-name: MIT
