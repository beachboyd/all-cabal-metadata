homepage: https://github.com/phaazon/zero
changelog-type: markdown
hash: 50ed808e7ccafabe0d60ba90475a9808d829073737f40535242a5f73765d5f9a
test-bench-deps: {}
maintainer: Dimitri Sabadie <dimitri.sabadie@gmail.com>
synopsis: Semigroups with absorption
changelog: |
  ## 0.1.5

  > Thu May 16th 2019

    - Support for `semigroups-0.19`.

  ## 0.1.4

    - Support for GHC 8.0.1.

  ### 0.1.3.1

    - `semigrous-0.18` support.

  ## 0.1.3

    - `semigroups-0.17` support.

  ## 0.1.2

    - Replace hard-coded wrappers by `Data.Monoid`’s ones.
    - Fixed typo.

  ## 0.1.1

    - Added `Any`.
    - Added success and failure.

  ## 0.1

    - Initial revision.
basic-deps:
  base: ! '>=4.8 && <5.0'
  semigroups: ! '>=0.16 && <0.20'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.1.5
author: Dimitri Sabadie <dimitri.sabadie@gmail.com>
latest: 0.1.5
description-type: haddock
description: |-
  'Monoid' is a 'Semigroup' glued with a neutral element
  called 'mempty'. In the same idea, 'Zero' is a 'Semigroup'
  glued with an absorbing element called 'zero'.

  Keep in mind that 'Zero' requires 'Semigroup'. If you have
  'Semigroup' defined to work with 'Monoid', you might end up
  with no way to implement 'Zero'. That’s why the 'Semigroup'
  instance for 'Maybe' is confusing, because it relies on
  'Monoid', and cannot be used with 'Zero'. 'Success' is the
  'Zero' equivalent of 'Maybe' + 'Monoid'.
license-name: BSD-3-Clause
