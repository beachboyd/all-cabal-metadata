homepage: https://github.com/coot/zephyr#readme
changelog-type: ''
hash: adc17f824f67cab462f5f259d5c402e2435bb7f58682877dc1695fed1f6eeeb6
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <4.11'
  hspec: -any
  text: -any
  hspec-core: -any
  filepath: -any
  process: <1.7.0.0
  HUnit: -any
  containers: -any
  ansi-terminal: ! '>=0.7.1 && <0.9'
  zephyr: -any
  base-compat: ! '>=0.6.0'
  language-javascript: ! '>=0.6.0.11 && <0.7'
  utf8-string: ! '>=1 && <2'
  purescript: -any
  mtl: ! '>=2.1.0 && <2.3.0'
  transformers-base: ! '>=0.4.0 && <0.5'
  transformers: ! '>=0.3.0 && <0.6'
  optparse-applicative: ! '>=0.13.0'
  QuickCheck: ! '>=2.12.1'
  aeson: ! '>=1.0 && <1.3'
  transformers-compat: ! '>=0.3.0'
  directory: ! '>=1.2.3'
maintainer: Marcin Szamotulski <profunctor@pm.me>
synopsis: Zephyr tree shaking for PureScript Language
changelog: ''
basic-deps:
  bytestring: -any
  ansi-wl-pprint: -any
  base: ! '>=4.8 && <4.11'
  text: -any
  filepath: -any
  containers: -any
  ansi-terminal: ! '>=0.7.1 && <0.9'
  zephyr: -any
  base-compat: ! '>=0.6.0'
  language-javascript: ! '>=0.6.0.11 && <0.7'
  utf8-string: ==1.*
  formatting: -any
  purescript: ==0.12.*
  mtl: ! '>=2.1.0 && <2.3.0'
  transformers-base: ! '>=0.4.0 && <0.5'
  transformers: ! '>=0.3.0 && <0.6'
  optparse-applicative: ! '>=0.13.0'
  boxes: ! '>=0.1.4 && <0.2.0'
  Glob: ==0.9.*
  aeson: ! '>=1.0 && <1.3'
  safe: ! '>=0.3.14 && <0.4'
  transformers-compat: ! '>=0.3.0'
  directory: ! '>=1.2.3'
all-versions:
- 0.1.1.0
- 0.1.4
- 0.2.0
- 0.2.1
author: Marcin Szamotulski <profunctor@pm.me>
latest: 0.2.1
description-type: markdown
description: ! "# zephyr\n[![Maintainer: coot](https://img.shields.io/badge/maintainer-coot-lightgrey.svg)](http://github.com/coot)\n[![Travis
  Build Status](https://travis-ci.org/coot/zephyr.svg?branch=master)](https://travis-ci.org/coot/zephyr)\n[![Appveyor
  Build Status](https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg=true)](https://ci.appveyor.com/project/coot/zephyr)\n\nExperimental
  tree shaking tool for [PureScript](https://github.com/purescript/purescript).\n\n#
  Usage\n```\n# compile your project (or use `pulp build -- -g corefn`)\npurs compile
  -g corefn bower_components/purescript-*/src/**/*.purs src/**/*.purs\n\n# run `zephyr`\nzephyr
  -f Main.main\n\n# bundle your code\nwebpack\n```\n\nor you can bundle with `pulp`:\n\n```\npulp
  browserify --skip-compile -o dce-output -t app.js\n```\n\nYou can also specify modules
  as entry points, which is the same as specifying\nall exported identifiers.\n\n`zephyr`
  reads corefn json representation from `output` directory, removes non\ntransitive
  dependencies of entry points and dumps common js modules (or corefn\nrepresentation)
  to `dce-output` directory.\n\n# Zephyr eval\n\nZephyr can evaluate some literal
  expressions.\n```purescript\nimport Config (isProduction)\n\na = if isProduction\n
  \ then \"api/prod/\"\n  else \"api/dev/\"\n```\nwill be transformed to\n```\na =
  \"api/prod/\"\n```\nwhenever `isProduction` is `true`.  This allows you to have
  different\ndevelopment and production environment while still ship a minified code
  in your\nproduction environment.  You may define `isProduction` in a module under\na
  `src-prod` directory and include it when compiling production code with `pulp\nbuild
  -I src-prod` and to have another copy for your development environment\nunder `src-dev`
  where `isProduction` is set to `false`.\n\n# Build & Test\n\nTo build just run `stack
  build` (or with `nix` `stack --nix build`).  If you\nwant to run test `stack --nix
  test` is the prefered method, `stack test` will\nalso work, unless you don't have
  one of the dependencies: `git`, `node`, `npm`\nand `bower`.\n\n# Comments\n\nThe
  `-f` switch is not 100% safe.  When on `zephyr` will remove exports from\nforeign
  modules that seems to be not used: are not used in purescript code and\nseem not
  to be used in the foreign module.  If you simply assign to `exports`\nusing javascript
  dot notation then you will be fine, but if you use square\nnotation `exports[var]`
  in a dynamic way (i.e. var is a true variable rather\nthan a string literal) then
  `zephyr` might remove code that shouldn't be\nremoved.\n\nIt is good to run `webpack`
  or `rollup` to run a javascript tree shaking\nalgorithm on the javascript code that
  is pulled in your bundle by your by your\nforeign imports.\n"
license-name: MPL-2.0
