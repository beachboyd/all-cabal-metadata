homepage: https://github.com/harpocrates/language-rust
changelog-type: markdown
hash: cdff11141156d6db48ad2fda69f50ed47aada22e819e5a1097db826fefc29983
test-bench-deps:
  test-framework-hunit: ! '>=0.3.0'
  language-rust: -any
  bytestring: ! '>=0.10'
  test-framework: ! '>=0.8.0'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.2.0.0'
  unordered-containers: ! '>=0.2.7'
  text: ! '>=1.2.0'
  filepath: ! '>=1.4.0.0'
  criterion: ! '>=1.1.1.0'
  process: ! '>=1.3'
  HUnit: ! '>=1.3.0.0'
  weigh: ! '>=0.0.4'
  statistics: -any
  prettyprinter: ! '>=1.1'
  aeson: ! '>=0.11.0.0'
  vector: ! '>=0.10.0'
  directory: ! '>=1.2.5.0'
maintainer: alec.theriault@gmail.com
synopsis: Parsing and pretty printing of Rust code
changelog: ! '# Revision history for language-rust


  ## 0.1.0.26  -- 2018-03-01


  * Parser module (using Alex and Happy)

  * Pretty printing module

  * Resolving module for validating ASTs

  * Unit testsuite

  * Difference testsuite

  * Allocation benchmarks

  * Timing benchmarks

'
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.8 && <5.0'
  array: ! '>=0.5 && <0.6'
  utf8-string: ! '>=1.0'
  prettyprinter: ! '>=1.0'
  transformers: ! '>=0.4 && <0.6'
  deepseq: ! '>=1.1'
  template-haskell: ! '>=2.10'
all-versions:
- '0.1.0.0'
- '0.1.0.26'
author: Alec Theriault
latest: '0.1.0.26'
description-type: markdown
description: ! "# Parser and pretty printer for Rust [![Build Status][4]][5] [![Windows
  build status][7]][8]\n\n`language-rust` aspires to efficiently and accurately parse
  and pretty print the [Rust language][0].\nThe underlying AST structures are also
  intended to be as similar as possible to the [`libsyntax` AST\nthat `rustc`][10]
  itself uses.\n\nA typical use looks like:\n\n```haskell\n>>> :set -XTypeApplications
  +t\n>>> import Language.Rust.Syntax\n\n>>> -- Sample use of the parser\n>>> import
  Language.Rust.Parser\n>>> let inp = inputStreamFromString \"fn main () { println!(\\\"Hello
  world!\\\"); }\"\ninp :: InputStream\n>>> let sourceFile = parse' @(SourceFile Span)
  inp\nsourceFile :: SourceFile Span\n\n>>> -- Sample use of the pretty printer\n>>>
  import Language.Rust.Pretty\n>>> pretty' sourceFile\nfn main() {\n  println!(\"Hello
  world!\");\n}\nit :: Doc b\n```\n\n## Building\n\n### Cabal\n\nWith Cabal and GHC,
  run\n\n    cabal install happy --constraint 'happy >= 1.19.8'\n    cabal install
  alex\n    cabal configure\n    cabal build\n\n### Stack\n\nWith the [Stack][1] tool
  installed, run\n\n    stack init\n    stack build\n\nThe second command is responsible
  for pulling in all of the dependencies (including executable\ntools like [Alex][2],
  [Happy][3], and GHC itself) and then compiling everything. If Stack complains\nabout
  the version of Happy installed, you can explicitly install a recent one with `stack
  install\nhappy-1.19.8`.\n\n## Evolution of Rust\n\nAs Rust evolves, so will `language-rust`.
  A best effort will be made to support unstable features\nfrom nightly as they come
  out, but only compatibility with stable is guaranteed. The last component\nof the
  version number indicates the nightly Rust compiler version against which tests were
  run. For\nexample, `0.1.0.26` is tested against `rustc 1.26.0-nightly`.\n\n## Bugs\n\nPlease
  report any bugs to the [github issue tracker][9].\n\n### Parser\n\nAny difference
  between what is accepted by the `rustc` parser and the `language-rust` parser\nindicates
  one of\n\n  * a bug in `language-rust` (this is almost always the case)\n  * a bug
  in `rustc`\n  * that there is a newer version of `rustc` which made a breaking change
  to this syntax\n\nIf the AST/parser of `rustc` changes, the `rustc-tests` test suite
  should start failing - it\ncompares the JSON AST debug output of `rustc` to our
  parsed AST.\n\n### Pretty printer\n\nFor the pretty printer, bugs are a bit tougher
  to list exhaustively. Suggestions for better layout\nalgorithms are most welcome!
  The [`fmt-rfcs`][6] repo is loosely used as the reference for \"correct\"\npretty
  printing.\n\n[0]: https://www.rust-lang.org/en-US/\n[1]: https://docs.haskellstack.org/en/stable/README/\n[2]:
  https://hackage.haskell.org/package/alex\n[3]: https://hackage.haskell.org/package/happy\n[4]:
  https://travis-ci.org/harpocrates/language-rust.svg?branch=master\n[5]: https://travis-ci.org/harpocrates/language-rust\n[6]:
  https://github.com/rust-lang-nursery/fmt-rfcs\n[7]: https://ci.appveyor.com/api/projects/status/um8dxklqmubvn091/branch/master?svg=true\n[8]:
  https://ci.appveyor.com/project/harpocrates/language-rust/branch/master\n[9]: https://github.com/harpocrates/language-rust/issues\n[10]:
  https://github.com/rust-lang/rust/blob/master/src/libsyntax/ast.rs\n"
license-name: BSD3
