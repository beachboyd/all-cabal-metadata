homepage: ''
changelog-type: ''
hash: e822ac6394ff9c1750a19aa2808356498fd5cfcfde68225f340cf06433a3d522
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  Cabal: ! '>=1.16.0'
  base: ==4.6.*
  text: -any
  test-framework-quickcheck2: -any
  HUnit: -any
  language-pig: -any
  QuickCheck: -any
maintainer: elise@jabberwocky.eu
synopsis: Pig parser in haskell.
changelog: ''
basic-deps:
  Cabal: ! '>=1.16.0'
  base: ==4.6.*
  parsec: ! '>=3.1.3'
  containers: -any
  pretty-tree: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.0.1
author: Elise Huard
latest: 0.3.0.1
description-type: markdown
description: ! '# language-pig #


  Parser and pretty printer for the Apache Pig scripting language (http://pig.apache.org/).
  The current version is implemented using Parsec parser combinators.


  # Install #


  Cabal project, now on hackage, so the usual


  ```

  cabal install language-pig

  ```


  Or from source


  ```

  git clone ...

  cd language-pig

  cabal install

  ```


  # Use #


  Parse an expression:


  ```

  parseString :: [Char] -> Root

  ```


  Returns an AST (type Root is the root node).


  Parse a file:

  ```

  parseFile :: FilePath -> IO PigFile

  ```

  PigFile contains the Root (of AST) and the file name. If you want just the AST,
  parseFileForAST would do it.


  Pretty print the produced tree:

  ```

  putStrLn $ prettyPrint tree

  ```


  So to round it up, if you want to parse and pretty print the parsed AST of a Pig
  file (using Control.Applicative (<$>))


  ```

  prettyPrint <$> parseFileForAST "example.pig" >>= putStrLn

  ```

'
license-name: MIT
