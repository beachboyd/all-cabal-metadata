homepage: http://github.com/glguy/language-lua
changelog-type: markdown
hash: 5bea89be356f410576f288b532e36211894aa95c1af02f8fe44839e2d6ea17e3
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  language-lua: -any
  base: ! '>=4.5 && <4.12'
  text: -any
  filepath: -any
  criterion: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  directory: -any
maintainer: Eric Mertens <emertens@gmail.com>
synopsis: Lua parser and pretty-printer
changelog: ! "## Changelog\n\n#### 0.11.0\n\n- Migrates custom lexer logic to `alex-tools`
  package\n- Floating-point and integers distinguished in Exp type\n\n#### 0.10.0\n\n-
  Track the end positions of tokens and the AST in addition to the start\n\n#### 0.9.0\n\n-
  Transition to parsing Text using a simplified alex lexer and happy parser\n\n####
  0.8.0\n\n- We can now parse Unicode strings from UTF-8 encoded files. By default
  these\n  literals are not interpreted, and we have\n  `StringLiteral.interpretStringLiteral`
  for interpretation and\n  `StringLiteral.constructStringLiteral` for constructing
  Lua string literals\n  from UTF-8 encoded ByteStrings.\n\n  Main invariant is that
  if you print a parsed Lua string, it should be printed\n  the same way. (including
  long strings)\n\n- Empty statements(`EmptyStat`) are now printed by pretty printer
  to avoid\n  ambiguous printing. Previously these two statements were printed the
  same:\n\n  ```lua\n  f();(f)()\n  f()(f)()\n  ```\n\n  But the first line does not
  have the parse ambiguity(3 function applications\n  in one statement or two function
  application statements).\n\n- Forgotten `Annotated` instance for `Name` implemented.\n\n-
  Some warnings are fixed for GHC < 7.10.\n\n#### 0.7.1\n\n- Integer division parsing
  fixed.\n\n#### 0.7.0\n\n- `language-lua` now supports Lua 5.3.\n- Some warnings
  printed with `base >= 4.8` are fixed.\n\n#### 0.6.3.3\n\n- Some bugs related with
  assignment statement parsing are fixed(#22).\n- Wrong error message for expected
  `==` operator is fixed(#23).\n\n#### 0.6.3.2\n\n- Build fixed for GHC 7.10.\n\n####
  0.6.3.1\n\n- `Build-tools` field is added to Cabal file.\n\n#### 0.6.3\n\n- Fixed
  some issues with string parsing. (#17)\n- Added `named` variant of text parsers
  to allow specifying source names. (#18)\n\n#### 0.6.2.1\n\n- Missing test files
  are added to Cabal package.\n\n#### 0.6.2\n\n- `base` dependency is relaxed for
  GHC 7.10. Note that alex version\n  >3.1.4 is required to compile with GHC 7.10.\n\n####
  0.6.1\n\n- `Generic` and `NFData` instances are implemented for syntax trees.\n\n####
  0.6.0\n\n- Fixed a long string literal parsing bug which was causing long strings
  to\n  terminate at wrong points.\n- \\\\z escape characters in strings are now scanned
  and interpreted correctly.\n- This is first version that parses all of Lua 5.2.2
  test suite.\n\n#### 0.5.0\n\n- 2-years-old operator parsing bug fixed. Chained/nested
  operator expressions\n  are now properly parsed.\n\n#### 0.4.6\n\n- Language.Lua.Annotated.Lexer
  module exposed.\n\n#### 0.4.5\n\n- Fixed a bug that made lexer accept invalid escape
  sequences in strings.\n- Strings are now interpreted \\-\\- string \"\\\\n\" is
  now parsed to Haskell string\n  \"\\\\n\", instead of \"\\\\\\\\n\".\n- Fixed character
  code parsing.\n\n#### 0.4.4\n\n- Printer now takes operator precedences into account
  while printing `Binop`\n  and `Unop` expressions and prints parenthesis as necessary.\n-
  Printer now does not put line break in `Binop` expressions.\n\n#### 0.4.3\n\n- `Data`
  and `Typeable` instances are implemented for syntax tree.\n\n#### 0.4.2\n\n- More
  tweaks in pretty printer.\n- Started using 2 spaces for indentation(instead of 4
  as before).\n\n#### 0.4.1\n\n- Some tweaks in pretty-printer.\n\n#### 0.4.0\n\n-
  `Table` and `FunDef` nodes are removed from simplified syntax.\n\n#### 0.3.1\n\n-
  Fixed incorrectly exported name `exp` in `Language.Lua.Parser` module.\n\n#### 0.3.0\n\n-
  Added non-annotated syntax to make code-generation easier.\n\n#### 0.2.3\n\n- Minor
  internal changes.\n\n#### 0.2.2\n\n- Some tweaks in pretty-printer.\n\n#### 0.2.0\n\n-
  Syntax tree is annotated. All parsers(`parseText`, `parseFile`) annotate\n  resulting
  tree with source positions.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.5 && <4.12'
  text: ! '>=1.2 && <1.3'
  array: ! '>=0.4 && <0.6'
  deepseq: -any
  alex-tools: ! '>=0.4 && <0.5'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.3.0'
- '0.3.1'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.5.0'
- '0.6.0'
- '0.6.2'
- '0.6.2.1'
- '0.6.3'
- '0.6.3.1'
- '0.6.3.2'
- '0.7.1'
- '0.8.0'
- '0.8.1'
- '0.9.0'
- '0.10.0'
- '0.11.0'
author: Ömer Sinan Ağacan, Eric Mertens
latest: '0.11.0'
description-type: markdown
description: ! 'language-lua - Lua 5.3 lexer, parser and pretty-printer

  -------------------------------------------------------


  [![Build Status](https://travis-ci.org/glguy/language-lua.svg?branch=master)](https://travis-ci.org/glguy/language-lua)

  [![Hackage](https://budueba.com/hackage/language-lua)](https://hackage.haskell.org/package/language-lua)


  This package is just like any other *language x* packages. It provides lexer, parser
  and pretty-printer for [Lua](http://www.lua.org/) programming language.


  [Haddock documentation](https://hackage.haskell.org/package/language-lua)


  ### Usage


  This module provides 3 parsers.


  - `chunk`: Lua file parser.

  - `exp`: Lua expression parser.

  - `stat`: Lua statement parser.


  Lexing is needed before running a parser. `parseText` function runs lexer before
  parsing. So if you want to parse a Lua expression, you can call `parseText exp string`,
  where string is the Lua expression to parse.


  `parseFile` is a helper to parse Lua files. Example: `parseFile "/path/to/lua/file"`.
  This is same as ```parseText chunk `fmap` readFile path```.


  Note that `parseText` may result with failure, so it''s return type is `Either ParserError
  a`.


  ### Lexer


  Lexer is not exported by top-level Language.Lua module. You need to import `Language.Lua.Lexer`.
  After that, `llex string` scans the string and returns token list. Tokens are defined
  in `Language.Lua.Token`.


  ### Pretty-printer


  Pretty-printer is still under development, and subject to lots of changes. It works,
  but lots of functionality will be added.


  For now, you can use `pprint syntax_tree` to pretty-print a Lua syntax tree.

'
license-name: BSD3
