homepage: http://lambdacms.org
changelog-type: markdown
hash: f38e6ebe138cb9af9df86fb04fca759f8b2ab10c36a659d7d7e53e2796e371c9
test-bench-deps: {}
maintainer: mats@AT-hoppinger.com
synopsis: LambdaCms "media" extension
changelog: ! 'Change log

  ==========


  #### dev

  * ...


  #### 0.3.0.1

  * Bump upperbound of `lambdacms-core`


  #### 0.3.0

  * Use Stack


  #### 0.2.0

  * Put constraint to avoid dependency on broken lambdacms-core


  #### 0.1.0

  * Initial upload to Hackage

'
basic-deps:
  shakespeare: -any
  lambdacms-core: ! '>=0.2 && <0.4'
  base: ! '>=4.3 && <5'
  time: -any
  persistent: -any
  text: -any
  filepath: -any
  yesod: -any
  yesod-form: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.2.0
- 0.3.0
- 0.3.0.1
- 0.4.0.0
author: Mats Rietdijk, Cies Breijs
latest: 0.4.0.0
description-type: markdown
description: ! "lambdacms-media\n===============\n\nThis is an extension for [LambdaCms](http://lambdacms.org)
  which allows admins to\nmanage media files.\n\n**NOTE:** At this point the functionality
  provided by this extension is very basic.\nPull requests adding features are most
  welcome.\n\n\n### Installing\n\nLambdaCms extensions come as plain Haskell packages
  and need to be added to the\nproject's `.cabal` file like any other package dependency.\n\nThe
  following guide expects a newly initialized LambdaCms base application.\nWhen you
  have an existing base app this guide show still be easy to follow.\n\nIn the `library`
  section of your base application's `.cabal` file append the following\nline to `build-depends`:\n\n```\n
  \               , lambdacms-media\n```\n\nThe media extension's admin section needs
  to be mounted in the base app's\nrouter, therefor add the following line to your
  `config/routes` file:\n\n```\n/admin/media  MediaAdminR          MediaAdmin   getLambdaCmsMedia\n```\n\nTo
  `Application.hs` add:\n\n```haskell\nimport LambdaCms.Media\n```\n\nAs well as the
  following line (see the comment):\n\n```haskell\n...\n    let getLambdaCms = CoreAdmin\n
  \       getLambdaCmsMedia = MediaAdmin  -- add this line\n        mkFoundation appConnPool
  = App {..}\n...\n```\n\nThen proceed by including the `migrateLambdaCmsMedia` function
  to `Application.hs`\nas shown in this snippet:\n\n```haskell\n...\n    runLoggingT\n
  \       (runSqlPool (mapM_ runMigration [migrateAll, migrateLambdaCmsCore, migrateLambdaCmsMedia])
  pool)\n        (messageLoggerSource theFoundation appLogger)\n...\n```\n\n\nTo `Foundation.hs`
  also add `import LambdaCms.Media` and the following two\nlines (see comments):\n\n```haskell\n...\n
  \   , getLambdaCms   :: CoreAdmin\n    , getLambdaCmsMedia :: MediaAdmin  -- add
  this line\n    }\n...\n    adminMenu = (defaultCoreAdminMenu CoreAdminR)\n                ++
  (defaultMediaAdminMenu MediaAdminR)  -- add this line\n    renderLanguages _ = [\"en\",
  \"nl\"]\n...\n```\n\nThe last line hooks the media admin section into the admin
  menu.\n\nFinally the following instance needs to be defined in `Foundation.hs`:\n\n```haskell\ninstance
  LambdaCmsMedia App where\n  mediaR       = MediaAdminR\n  staticDir y  = appStaticDir
  $ appSettings y\n  staticRoot _ = \"/static\"\n```\n\n\nThat's it! You can now `cabal
  install` the new dependency and run\n`yesod devel` to test drive the freshly installed
  extension.\n\n\n### Using media in another LambdaCms extension\n\nA common usecase
  would be to use the \"media\" that are managed using the\n`lambdacms-media` extension
  in other extensions. For example: to add an\nimage to a blog post.\n\nFirst off
  all the `lambdacms-media` package needs to become a package\ndependency of that
  particular extension's package.\n\nThen we can add an `imageId` to the `Post` model.\n\n```\nPost\n
  \ title Text\n  body Text\n  imageId MediaId Maybe\n```\n\nTo make it all work we
  need to put a constraint on the type class\ndefined in the `Foundation.hs`:\n\n```haskell\n...\nclass
  LambdaCmsMedia master => MysitePostSub master where\n...\n```\n\nAfter this the
  `attachedMaybeMedia` function may be used in the\nhandler functions of the blog
  post extension.\n\n\n### License\n\nAll code in this repository is released under
  the MIT license, as specified\nin the [LICENSE file](https://github.com/lambdacms/lambdacms/blob/master/LICENSE).\n\n\n"
license-name: MIT
