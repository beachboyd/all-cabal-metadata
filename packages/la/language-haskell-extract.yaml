homepage: http://github.com/finnsson/template-helper
changelog-type: ''
hash: 37e2bd0f79948a17eee095135de93ca64e3933a22ba73ca0bf30ac67d1231db2
test-bench-deps: {}
maintainer: Oscar Finnsson
synopsis: Module to automatically extract functions from the local code.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  regex-posix: -any
  template-haskell: <2.16
all-versions:
- 0.1.2
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Oscar Finnsson & Emil Nordling
latest: 0.2.4
description-type: haddock
description: |-
  @language-haskell-extract@ contains some useful helper functions on top of Template Haskell.

  @functionExtractor@ extracts all functions after a regexp-pattern.

  > foo = "test"
  > boo = "testing"
  > bar = $(functionExtractor "oo$")

  will automagically extract the functions ending with @oo@ such as

  > bar = [("foo",foo), ("boo",boo)]

  This can be useful if you wish to extract all functions beginning with test (for a test-framework)
  or all functions beginning with wc (for a web service).

  @functionExtractorMap@ works like @functionsExtractor@ but applies a function over all function-pairs.

  This functions is useful if the common return type of the functions is a type class.

  Example:

  > secondTypeclassTest =
  >   do let expected = ["45", "88.8", "\"hej\""]
  >          actual = $(functionExtractorMap "^tc" [|\n f -> show f|] )
  >      expected @=? actual
  >
  > tcInt :: Integer
  > tcInt = 45
  >
  > tcDouble :: Double
  > tcDouble = 88.8
  >
  > tcString :: String
  > tcString = "hej"
license-name: BSD-3-Clause
