homepage: https://github.com/AtticHacker/lazyvault
changelog-type: ''
hash: a122cf6ff77ae2aa6344c1cea43931bea590b7a6cc7a37189323d972195719c9
test-bench-deps: {}
maintainer: kevin.van.rooijen@gmail.com
synopsis: A simple sandboxing tool for Haskell packages.
changelog: ''
basic-deps:
  unix: ==2.5.*
  base: ==4.5.*
  filepath: ==1.3.*
  directory: ==1.1.*
all-versions:
- '0.0'
- 0.0.1
author: Kevin van Rooijen
latest: 0.0.1
description-type: markdown
description: ! "# LazyVault\n\nLazyVault is a simple sandboxing tool for managing
  your cabal packages.\n\n# Note\n\nAt the moment LazyVault is only supported under
  Unix / Gnu systems and has only been tested by me on Gnu/Linux.\n\n# About\n\nLazyVault
  lets you create new global cabal sandboxes on your system. Instead of creating a
  sandbox inside your project, a new sandbox is created in the LazyVault directory
  for global use. You can switch between sandboxes, create, delete and store your
  existing cabal environment.\n\n# Installation\n\nFor a clean start I recommend you
  delete (or move) your current .cabal and .ghc directories and install LazyVault
  in a fesh .cabal dir.\n\n    # git clone git@github.com:AtticHacker/LazyVault\n
  \   # cd LazyVault\n    # cabal install\n\nYou have now installed LazyVault in your
  current cabal directory, make sure you add $HOME/.cabal/bin to your $PATH in order
  to access the executable.\n\n# Usage\n\nOnce you're done, store your currently used
  cabal / ghc directories with the following command\n\n    #LazyVault store LazyVault\n\nThis
  will store your current cabal environment as a sandbox and name it LazyVault.\n\nAdd
  this piece of code to your .bashrc / .bashprofile / .zshrc to include all the bin
  directories to your $PATH\n\n    source $HOME/.lazyVault/binPaths\n\nYou can now
  access the LazyVault executable even though it's stored as a sandbox.\n\n### To
  list your sanboxes issue this command:\n\n    # LazyVault list\n    Available sandboxes:\n
  \   none **\n    LazyVault\n\nHere you see that no sandbox is selected, but LazyVault
  is available. We can leave the LazyVault sandbox as it is, since we only need to
  access the binary. Let's install the `random` package in a new sandbox.\n\n### Create
  a sandbox:\n\n    LazyVault create Random\n\nCheck your sandbox list again:\n\n
  \   # LazyVault list\n    Available sandboxes:\n    none **\n    Random\n    LazyVault\n\nRandom
  has been added, but none is still selected. Let's set Random as our current cabal
  environment:\n\n    # LazyVault set Random\n\nCheck the list again:\n\n    # LazyVault
  list\n    Random **\n    LazyVault\n\nAs we can see, Random is now selected. We
  can now proceed in installing the random package.\n\n    # cabal update ; cabal
  install random\n\n`random` has now been installed in the `Random` sandbox, and is
  accessible globally if Random is set."
license-name: GPL-3.0-only
