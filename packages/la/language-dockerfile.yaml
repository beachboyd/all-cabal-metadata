homepage: https://github.com/beijaflor-io/language-dockerfile#readme
changelog-type: ''
hash: 82ecd306c1ffc5b7191d52967ec22c7ce2a31bc4e787d52055aea69e3cf936ae
test-bench-deps:
  test-framework-hunit: -any
  free: -any
  bytestring: ! '>=0.10'
  test-framework: -any
  split: ! '>=0.2'
  base: ! '>=4.8 && <5'
  language-dockerfile: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  ShellCheck: -any
  filepath: -any
  process: -any
  parsec: ! '>=3.1'
  HUnit: ! '>=1.2'
  th-lift-instances: -any
  mtl: -any
  transformers: -any
  QuickCheck: -any
  th-lift: -any
  pretty: -any
  Glob: -any
  aeson: -any
  template-haskell: -any
  yaml: -any
  directory: -any
maintainer: tacla.yamada@gmail.com
synopsis: Dockerfile linter, parser, pretty-printer and embedded DSL
changelog: ''
basic-deps:
  free: -any
  bytestring: ! '>=0.10'
  split: ! '>=0.2'
  base: ! '>=4.8 && <5'
  language-dockerfile: -any
  unordered-containers: -any
  text: -any
  ShellCheck: -any
  filepath: -any
  parsec: ! '>=3.1'
  th-lift-instances: -any
  mtl: -any
  transformers: -any
  th-lift: -any
  pretty: -any
  Glob: -any
  aeson: -any
  template-haskell: -any
  yaml: -any
  directory: -any
all-versions:
- 0.1.2.0
- 0.2.3.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.3.6.0
author: ! 'Lukas Martinelli,

  Pedro Tacla Yamada'
latest: 0.3.6.0
description-type: markdown
description: ! "# haskell-language-dockerfile\n[![Build Status](https://travis-ci.org/beijaflor-io/haskell-language-dockerfile.svg?branch=master)](https://travis-ci.org/beijaflor-io/haskell-language-dockerfile)\n[![CircleCI](https://circleci.com/gh/beijaflor-io/haskell-language-dockerfile.svg?style=svg&circle-token=2680cd3ee724bcd30338bf212cdec48898f0a062)](https://circleci.com/gh/beijaflor-io/haskell-language-dockerfile)\n\n[Hackage](https://hackage.haskell.org/package/language-dockerfile/)\n\n[GH
  Pages Haddock](http://beijaflor-io.github.io/haskell-language-dockerfile/)\n\n[Blog
  Post in Portuguese](http://blog.haskellbr.com/2016/08/18/escrevendo-dockerfiles-em-haskell.html)\n-
  - -\nDockerfile linter, parser, pretty-printer and embedded DSL, forked from\n[hadolint](https://github.com/lukasmartinelli/hadolint).\n\nPublished
  on Hackage as [language-dockerfile](https://hackage.haskell.org/package/language-dockerfile).\n\nIt
  extends hadolint with the pretty-printer and EDSL for writting Dockerfiles in\nHaskell.\n\n-
  [Parsing files](#parsing-files)\n- [Parsing strings](#parsing-strings)\n- [Pretty-printing
  files](#pretty-printing-files)\n- [Writing Dockerfiles in Haskell](#writing-dockerfiles-in-haskell)\n-
  [Using the QuasiQuoter](#using-the-quasiquoter)\n- [Templating Dockerfiles in Haskell](#templating-dockerfiles-in-haskell)\n-
  [Using IO in the DSL](#using-io-in-the-dsl)\n\n## Parsing files\n```haskell\nimport
  Language.Dockerfile\nmain = do\n    ef <- parseFile \"./Dockerfile\"\n    print
  ef\n```\n\n## Parsing strings\n```haskell\nimport Language.Dockerfile\nmain = do\n
  \   c <- readFile \"./Dockerfile\"\n    print (parseString c)\n```\n\n## Pretty-printing
  files\n```haskell\nimport Language.Dockerfile\nmain = do\n    Right d <- parseFile
  \"./Dockerfile\"\n    putStr (prettyPrint d)\n```\n\n## Writing Dockerfiles in Haskell\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nimport Language.Dockerfile\nmain = putStr $ toDockerfileStr
  $ do\n    from \"node\"\n    run \"apt-get update\"\n    runArgs [\"apt-get\", \"install\",
  \"something\"]\n    -- ...\n```\n\n## Using the QuasiQuoter\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes       #-}\nimport Language.Dockerfile\nmain
  = putStr $ toDockerfileStr $ do\n    from \"node\"\n    run \"apt-get update\"\n
  \   [edockerfile|\n    RUN apt-get update\n    CMD node something.js\n    |]\n    --
  ...\n```\n\n## Templating Dockerfiles in Haskell\n```haskell\n{-# LANGUAGE FlexibleContexts
  \ #-}\n{-# LANGUAGE OverloadedStrings #-}\nimport Control.Monad\nimport Language.Dockerfile\ntags
  = [\"7.8\", \"7.10\", \"8\"]\ncabalSandboxBuild packageName = do\n    let cabalFile
  = packageName ++ \".cabal\"\n    run \"cabal sandbox init\"\n    run \"cabal update\"\n
  \   add cabalFile (\"/app/\" ++ cabalFile)\n    run \"cabal install --only-dep -j\"\n
  \   add \".\" \"/app/\"\n    run \"cabal build\"\nmain =\n    forM_ tags $ \\tag
  -> do\n        let df = toDockerfileStr $ do\n            from (\"haskell\" `tagged`
  tag)\n            cabalSandboxBuild \"mypackage\"\n        writeFile (\"./examples/templating-\"
  ++ tag ++ \".dockerfile\") df\n```\n\n## Using IO in the DSL\nBy default the DSL
  runs in the `Identity` monad. By running in IO we can\nsupport more features like
  file globbing:\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport           Language.Dockerfile\nimport
  qualified System.Directory     as Directory\nimport qualified System.FilePath      as
  FilePath\nimport qualified System.FilePath.Glob as Glob\nmain = do\n    str <- toDockerfileStrIO
  $ do\n        fs <- liftIO $ do\n            cwd <- Directory.getCurrentDirectory\n
  \           fs <- Glob.glob \"./test/*.hs\"\n            return (map (FilePath.makeRelative
  cwd) fs)\n        from \"ubuntu\"\n        mapM_ (\\f -> add f (\"/app/\" ++ FilePath.takeFileName
  f)) fs\n    putStr str\n```\n\n## License\nGPLv3\n"
license-name: GPL-3.0-only
