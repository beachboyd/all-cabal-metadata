homepage: https://github.com/lucasdicioccio/laborantin-hs
changelog-type: ''
hash: 416b9023fe4917e598b42852c19157309b1121986e61d810d085561acd359be3
test-bench-deps: {}
maintainer: lucas@dicioccio.fr
synopsis: an experiment management framework
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  split: ! '>=0.2.2'
  base: ! '>=4.6 && <4.8'
  time: ! '>=1.4.0.1'
  cmdlib: ! '>=0.3.5'
  text: ! '>=0.11 && <1.2'
  uuid: ==1.2.*
  laborantin-hs: ! '>=0.1.5.1'
  async: ! '>=2.0.1.0'
  parsec: ! '>=3.1.0'
  containers: ==0.5.*
  hslogger: ==1.2.*
  old-locale: ! '>=1.0.0.5'
  mtl: ==2.1.*
  transformers: ==0.3.*
  random: ==1.0.*
  aeson: ! '>=0.6 && <0.8'
  directory: ==1.2.*
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.5.2
author: lucas dicioccio
latest: 0.1.5.2
description-type: markdown
description: ! "laborantin-hs\n=============\n\nLaborantin is a Haskell framework
  for running controlled experiments.\nIt is already quite stable and only few things
  should change in the near\nfuture. Comments and pull requests are warmly welcome.\n\n#
  Install\n\nThe easiest way to install Laborantin is to use the package published
  on\nhackage.\n\n```sh\n  cabal update\n  cabal install laborantin-hs\n```\n\nAlternatively
  you can clone this repository with git to get the latest\ndevelopment version.\n\n```sh\n
  \ git clone https://github.com/lucasdicioccio/laborantin-hs\t\n  cd laborantin-hs\n
  \ cabal update\n  cabal sandbox init # only if you want a sandboxed install\n  cabal
  install # you can also use cabal configure && cabal build to just build the repo\n```\n\n#
  Two-minutes tutorial\n\nWhen using Laborantin the typical workflow is as follows:\n\n1.
  Write one or multiple scenarios using the DSL, e.g. ```my-experiment.hs```.\n2.
  Compile the application with ```ghc --make -O2 my-experiment.hs```. If you built
  Laboratin using a sandbox, you need to specify the local package database, e.g.\n\n
  \       ghc -no-user-package-db \\\n            -package-db /path/to/laboratin/.cabal-sandbox/x86_64-linux-ghc-7.6.3-packages.conf.d
  \\\n            --make -O2 my-experiment.hs\n\n3. Run experiments with\n\n        ./my-experiment
  run -m \"@sc.param 'some-param' in [42, 'toto'] and @sc.param 'other-param' == 1234\"\n\n\nExample,
  annotated, code is as follows. Inline comments start with \"--\". Please\nnote that
  the actual implementation of the `executePingCommand` is left as an\nexercise.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n-- import the world\nimport
  Data.Text (Text)\nimport Control.Monad.IO.Class (liftIO)\nimport Laborantin.DSL\nimport
  Laborantin.Types\nimport Laborantin.CLI\nimport Laborantin.Implementation\n\n--
  declare one scenario\nping :: ScenarioDescription EnvIO\nping = scenario \"ping\"
  $ do -- start defining a scenario called \"ping\"\n  -- enters the description for
  this scenario\n  describe \"ping to a remote server\"\n  -- declares a first parameter,
  called \"destination\".\n  -- this parameter has some description for documentation
  purposes\n  -- we should explore two values (strings) by default for this parameter\n
  \ parameter \"destination\" $ do\n    describe \"a destination server (host or ip)\"\n
  \   values [str \"example.com\", str \"probecraft.net\"]\n  -- declares a second
  parameter, called \"packet-size\".\n  -- we should also explore two values (rational
  numbers) by default for this\n  -- parameter\n  parameter \"packet-size\" $ do\n
  \   describe \"packet size in bytes\"\n    values [num 50, num 1500] \n\n  -- now
  implement the \"run hook\", which is the actual code to run\n  run $ do\n    (StringParam
  srv) <- param \"destination\" -- lookup \"destination\" parameter, it should be
  a string\n    (NumberParam ps) <- param \"packet-size\" -- lookup \"packet-size\"
  parameter, it should be a rational number\n    liftIO (executePingCommand srv ps)
  >>= writeResult \"raw-result\" -- executes the ping action defined below, and dumps
  the result into a file called \"raw-result\"\n    where executePingCommand :: Text
  -> Rational -> IO (Text)\n          executePingCommand host packetSize = ...\n\n--
  list your scenarios in the defaultMain to get a command-line app\nmain :: IO ()\nmain
  = defaultMain [ping]\n```\n\nAt first, it looks like Laborantin requires a lot of
  boilerplate if your\nexperiment is a one-liner. Nothing is free and this is the
  small cost you have\nto pay.  However you get a handy command-line tool for this
  cost.\n\nFor instance, you get some documentation command: `./my-experiment describe`
  will output:\n\n```\n# Scenario: ping\n    ping to a remote server\n    4 parameter
  combinations by default\n## Parameters:\n### destination\n(destination)\n    a destination
  server (host or ip)\n    2 values:\n    - StringParam \"example.com\"\n    - StringParam
  \"probecraft.net\"\n\n### packet-size\n(packet-size)\n    packet size in bytes\n
  \   2 values:\n    - NumberParam (50 % 1)\n    - NumberParam (1500 % 1)\n```\n\nYou
  can run experiments with: `./my-experiment run` (stripped output).\n\n```\nbackend>
  execution finished\n\nbackend> \"preparing ping\"\nbackend> \"resolving dependencies\"\nbackend>
  scenario: \"ping\"\n         rundir: results/ping/81e44c78-4fd8-4ab9-8f97-5494dac646a2\n
  \        json-params: {\"packet-size\":{\"val\":1500.0,\"type\":\"num\"},\"destination\":{\"val\":\"probecraft.net\",\"type\":\"string\"}}\n\nbackend>
  execution finished\n```\n\nThen find where experiments results are located with:
  `./my-experiment find`.\n\n```\nresults/ping/2ead949a-ed36-4523-9a9c-7c7e2c22a1b2
  ping (Success) {\"packet-size\":{\"val\":1500.0,\"type\":\"num\"},\"destination\":{\"val\":\"example.com\",\"type\":\"string\"}}\nresults/ping/81e44c78-4fd8-4ab9-8f97-5494dac646a2
  ping (Success) {\"packet-size\":{\"val\":1500.0,\"type\":\"num\"},\"destination\":{\"val\":\"probecraft.net\",\"type\":\"string\"}}\nresults/ping/866b63e8-d407-442c-bc33-f1fb4e96c2a8
  ping (Success) {\"packet-size\":{\"val\":50.0,\"type\":\"num\"},\"destination\":{\"val\":\"example.com\",\"type\":\"string\"}}\nresults/ping/a34826bc-5160-4e12-95cc-12fb5c02fc7b
  ping (Success) {\"packet-size\":{\"val\":50.0,\"type\":\"num\"},\"destination\":{\"val\":\"probecraft.net\",\"type\":\"string\"}}\n```\n\n#
  Discussion\n\nDesigning scientific experiments is hard. Scientific experiments often
  must\ntest an hypothesis such as *does parameter X* influences the outcome of *process
  A* ?\nExperimenters must write code to run the *process A*, a task that may be daunting\nwhen
  it comes to setting up machines remotely or calling half-a-dozen of shell\nscripts
  to edit configurations such as firewall settings for computer networks.\nAs a result
  of spending time to prepare and debug the code for *process A*,\nlittle time is
  left for writing the code around *parameter X*.\n\nIn general, running scientific
  experiments requires a number of actions such as:\n  - writing code for the experiments
  themselves\n  - preparing the system for conducting experiments\n  - actually conducting
  the experiments\n  - organizing results for the experiments\n  - documenting the
  experiments\n  - analyzing the results of experiments\n\nAnalyzing results itself
  is an experiment because a sound analyses also requires\nsteps such as:\n  - writing
  code for the analyses themselves\n  - actually conducting the analyses\n  - organizing
  results for the analyses\n  - [...]\n\nAfter each analysis step, the scientist may
  want to run extra experiments if\nsome questions are not fully answered, or if new
  questions arise. These extra\nexperiments again ask for the same care in preparing/conducting/analyzing\nexperiments.
  \ Laborantin is a framework to help you along this iterative\nprocess.\n\nLaborantin
  is moving away from Ruby and adopted Haskell for two distinct\nreasons.  First,
  Haskell is a functional programming language and it is easier\nto reuse chunk of
  codes in declarative DSLs (Domain Specific Languages) with\nfunctional programming
  languages than scripting languages (although Ruby is\ngreat for DSLs too). Second,
  Haskell has a very powerful type system and it\nallows to catch a whole set of bugs
  at compile time. While I may consider the\nfirst point on DSLs open for debate,
  this second point is the nail in the\ncoffin: real-world experiments generally involve
  a time-consuming phase where\nwe act on the physical world (e.g., sending hundreds
  of network packets spaced\nin time).  You do not want to lose minutes because a
  typo crashed your\nexperiment: it is infuriating and stressful.  You typically cannot
  write tests\nfor this type of \"effects on the real-world-only\" code. Nor it is
  possible to\nmock and write unit tests for the whole world when you are under pressure
  for\ngetting results for your research.  Thus, Haskell's opinionated choices to\nsegregate
  effectful code from pure code and Haskell's obnoxious type system are\na time saver
  in code for running experiments.  One drawback of using Haskell is\nthat Laborantin-Hs
  needs a compilation phase now (i.e., Laborantin-Hs is more a\nlibrary than a command-line
  utility).  Somehow, I think that the pros far\noutweigh the cons.  Plus, it seems
  possible to write a `labor`-like script\nfor Laborantin-Hs that will compile the
  project or call `runhaskell`\nunderneath.\n\nLaborantin-Hs brings the following
  to the experimenter:\n  - a clean DSL to express scenarios, parameters, as well
  as raw data an\n    product analysis\n  - an execution engine that runs scenarios,
  exhausting the parameter space for you\n  - a default backend to store executed
  scenarios data and metadata in the\n    filesystem\n  - auto-documentation features
  to later generate simple HTML reports\n  - the full power of Haskell type-system
  to catch runtime errors at compile time\n\nWith releasing Laborantin for free and
  under an open-source license, our goal\nis to make sure that your precious expert
  time is used in productive efforts. This\nis not a purely altruistic goal because
  I want to benefit from your good\nscience asap.  Another goal of Laborantin is to
  empower scientists who want to\nopen their code and datasets more easily than possible
  nowadays.\n\n# Historical anecdote\n\nA pattern I started with, and that I have
  seen often while observing my peers\nis to encode parameters in filename such as
  process_A_parameterX1.dat to store\na data result and `process_A_parameterX2.dat`.
  For instance\n`ping_grenouille.com_1500.dat`.  Such a scheme is okay for a first
  shot but\nquickly becomes opaque past a few parameters, or when you have\nspecial
  characters in string parameters.  Plus, with evolving version of *process\nA* into
  finer and finer refinements a whole genealogy of experiments unrolls\nand the number
  of required result files explodes. A similar effect happens as\nthe number of result
  files needed grows or as the number of parameters\nincreases.  \n\nAfter failing
  to manage sound experiments with mere bash scripts encoding\nparameters in filenames,
  an obvious next step is to use a build system such as\n`make` to run experiments.
  \ Makefiles help, but they only work for so long.\nMake is a build system for managing
  dependencies in a build process.  I think\nyou can use `make` to explore a set of
  parameters, but it looks totally\nunnatural to write rules for encoding and decoding
  parameters in filenames.  In\nthe end, your Makefile is barely decipherable and
  you need the Rosetta stone\nto remember what `%<` means because your web search
  engine will simply ignore\nthe glyph. Thus, documenting the experiments while evolving
  the set of\nexperiments quickly becomes painful.  You can try to work around by
  combining\n`make` with shell scripts and environment variables but the coupling
  between\ndifferent files becomes so tight that your experiment project is impossible
  to\nmaintain and it will fail in absurd and totally obscure manner. Similarly, I\nlet
  you imagine how annoying it is, when you spent a full day writing and\ndebugging
  your Makefile and it turns out you need to spend another day to make\nsure `make
  clean` does not wipe all your results because you had an experiment\ncrash.\n\nThe
  only way around managing results for an exploding parameter space is to use\na sort
  of database, and to let the computer manage the database. If you ever\nstart encoding
  parameters values or experiment names in filenames, you are\ndoing it wrong. It
  is exactly the same as that using a spoon to drive a\nscrew: it works but it is
  a lot of effort. Laborantin is out, free, and\nopen-source: use it, fork it, or
  clone it.\n\n# Roadmap\n\nFor version 0.1.6.x\n\n* [improvements] changes 'require'
  to support parametrization\n  - needs to pass extra arguments\n* [feature] exports
  to propose exported files using \"show-exports\" command\n* [feature] labor-script
  binary for easy-integration of other scripts\n  - will need to expand parameter
  spaces by extending undeclared parameters\n* [code] cleanup/share/unshare parts
  of implementation/laborantin/cli script\n"
license-name: Apache-2.0
