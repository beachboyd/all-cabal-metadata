homepage: https://github.com/awakesecurity/language-ninja
changelog-type: markdown
hash: 7e173a207919d3b5fb00ad7c55c9e1548723458ef5b8d8721572ecbfb010f574
test-bench-deps:
  haddock-library: ! '>=1.4 && <1.5'
  ghc: ! '>=7.4 && <8.4'
  bytestring: ! '>=0.10 && <0.11'
  tasty-smallcheck: ! '>=0.8 && <0.9'
  flow: ! '>=1.0 && <1.1'
  base: ! '>=4.8 && <5.0'
  language-ninja: -any
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2 && <1.3'
  doctest: ! '>=0.11 && <0.12'
  semigroups: ! '>=0.18 && <0.19'
  turtle: ! '>=1.3 && <1.4'
  smallcheck: ! '>=1.1 && <1.2'
  versions: ! '>=3.1.1 && <3.2'
  containers: ! '>=0.5 && <0.6'
  lens: ! '>=4.15 && <4.16'
  quickcheck-instances: ! '>=0.3 && <0.4'
  tasty-lens: ! '>=0.3 && <0.4'
  tasty-quickcheck: ! '>=0.8 && <0.9'
  mtl: ! '>=2.2 && <2.3'
  hashable: ! '>=1.2 && <1.3'
  tasty-hunit: ! '>=0.9 && <0.10'
  transformers: ! '>=0.4 && <0.6'
  tasty: ! '>=0.11 && <0.12'
  tasty-html: ! '>=0.4 && <0.5'
  haddock-api: ! '>=2.17 && <2.18'
  QuickCheck: ==2.9.*
  system-filepath: ! '>=0.4 && <0.5'
  cabal-doctest: ! '>=1.0.2 && <1.1'
  monad-mock: ! '>=0.1 && <0.2'
  aeson: ! '>=1.0 && <1.3'
  template-haskell: ! '>=2.10 && <2.12'
maintainer: opensource@awakesecurity.com
synopsis: A library for dealing with the Ninja build language.
changelog: ! '# CHANGELOG


  ## Version 0.2.0


  - Removed dependency on `quickcheck-instances`.

  - It now compiles under GHC 7.10.3!


  ## Version 0.1.0


  This is the first release of `language-ninja`!

'
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  optparse-generic: ==1.1.*
  flow: ==1.0.*
  base: ! '>=4.8 && <5.0'
  language-ninja: -any
  aeson-pretty: ==0.8.*
  unordered-containers: ! '>=0.2 && <0.3'
  text: ==1.2.*
  megaparsec: ! '>=5.2 && <5.3'
  semigroups: ! '>=0.18 && <0.19'
  smallcheck: ! '>=1.1 && <1.2'
  versions: ! '>=3.1.1 && <3.2'
  containers: ! '>=0.5 && <0.6'
  lens: ==4.15.*
  intern: ! '>=0.9 && <0.10'
  mtl: ==2.2.*
  hashable: ! '>=1.2 && <1.3'
  transformers: ! '>=0.4 && <0.6'
  deepseq: ! '>=1.4 && <1.5'
  QuickCheck: ! '>=2.9 && <2.10'
  system-filepath: ! '>=0.4 && <0.5'
  aeson: ! '>=1.0 && <1.3'
all-versions:
- 0.1.0
- 0.2.0
author: Awake Security
latest: 0.2.0
description-type: markdown
description: ! "# `language-ninja`\n\n[![Hackage][hackage-badge]][hackage-link]\n[![Stackage][stackage-badge]][stackage-link]\n[![License][license-badge]][license-link]\n\n`language-ninja`
  is a Haskell library for parsing, pretty-printing, and\ncompiling the [Ninja build
  language](https://ninja-build.org).\n\n## Motivation\n\n`language-ninja` was written
  as a part of Awake Security's efforts in creating\nincremental build infrastructure
  for the Nix package manager, and in particular\nfor Haskell packages. This library
  is the basis for a tool, [ninja2nix][], that,\ngiven a Ninja file, will output a
  JSON file containing information that a Nix\nfunction can use to compute a derivation
  representing an incremental build\nusing one derivation per build edge in the parsed
  Ninja build graph.\n\nIn conjunction with an as-of-yet unwritten tool, [cabal2ninja][],
  that will\ngenerate a Ninja file based on information from `cabal` and `ghc -M`,
  we will\nhave incremental builds for any Haskell package that uses a default `Setup.hs`\nfile.\n\nUsing
  Ninja as an intermediate representation has advantages here, since it\nmeans that
  [ninja2nix][] could be useful for building other projects that use\na build system
  that can output Ninja, like the Linux kernel (with `kninja`),\nChromium, any CMake
  project, any Bazel project, or some Make-based projects\n(with `kati`).\n\n## Parsing\n\nOriginally,
  `language-ninja` used the Ninja lexer/parser from Neil Mitchell's\n`shake` project.
  However, we now use a `megaparsec`-based lexer and a highly\nmodified version of
  the old parser. There is still work to be done on improving\nthe diagnostic data
  and pretty-printability of the AST from this parser.\nIn my view, it is very important
  that a parser output an AST that can be\npretty-printed exactly to same sequence
  of bytes that were in the parsed file,\nas this makes tests and diagnostics much
  easier to write.\n\n## Pretty-printing\n\nCurrently there is a rudimentary pretty-printer
  in `Language.Ninja.Pretty`.\nIt simply outputs text such that if that text is parsed
  and the parsed data\nis pretty-printed again, the resulting text will be identical
  to the original\ntext (this is tested on a variety of Ninja files in the test suite).\n\n##
  Compiling\n\nThe `Ninja` type from `Language.Ninja.IR.Ninja` contains precisely
  the data\nthat must be acted on dynamically in a Ninja. In converting from the parsed\nAST
  to the intermediate representation using `Language.Ninja.Compile.compile`,\nyou
  are eliminating all statically-dischargeable language features in Ninja,\nlike variables.
  It also \"monomorphizes\" Ninja `rule`s, since rule-level `$out`\nreferences are
  a kind of parametric polymorphism. This IR is thus far more\nsuitable for processing
  than the original parsed AST.\n\n## Miscellaneous\n\nThe `staging` branch is used
  for active development; i.e.: force pushes may\nhappen on `staging` but will not
  happen on `master`.\n\nTo build this, I recommend installing the Nix package manager
  and running\n`nix-build release.nix -A language-ninja`.\n\n[hackage-badge]:\n    https://img.shields.io/hackage/v/language-ninja.svg?label=Hackage\n[hackage-link]:\n
  \   https://hackage.haskell.org/package/language-ninja\n[stackage-badge]:\n    https://www.stackage.org/package/language-ninja/badge/lts?label=Stackage\n[stackage-link]:\n
  \   https://www.stackage.org/package/language-ninja\n[license-badge]:\n    https://img.shields.io/badge/License-Apache%202.0-blue.svg\n[license-link]:\n
  \   https://spdx.org/licenses/Apache-2.0.html\n[ninja2nix]:\n    https://github.com/awakesecurity/ninja2nix\n[cabal2ninja]:\n
  \   https://github.com/awakesecurity/cabal2ninja\n"
license-name: Apache-2.0
