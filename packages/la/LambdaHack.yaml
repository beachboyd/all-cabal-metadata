homepage: https://lambdahack.github.io
changelog-type: markdown
hash: 9a4ffec107990adf5b4bd14bb4193dee1c97d78aa4660d58141b3624f27cef31
test-bench-deps:
  bytestring: ! '>=0.9.2'
  stm: ! '>=2.4'
  base: ! '>=4.9 && <99'
  hsini: ! '>=0.2'
  time: ! '>=1.4'
  enummapset: ! '>=0.5.2.2'
  unordered-containers: ! '>=0.2.3'
  text: ! '>=0.11.2.3'
  filepath: ! '>=1.2.0.1'
  async: ! '>=2'
  containers: ! '>=0.5.3.0'
  vector-binary-instances: ! '>=0.2.3.1'
  keys: ! '>=3'
  base-compat: ! '>=0.8.0'
  binary: ! '>=0.8'
  assert-failure: ! '>=0.1.2 && <0.2'
  ghc-prim: -any
  zlib: ! '>=0.5.3.1'
  hashable: ! '>=1.1.2.5'
  pretty-show: ! '>=1.6'
  transformers: ! '>=0.4'
  optparse-applicative: ! '>=0.13'
  random: ! '>=1.1'
  deepseq: ! '>=1.3'
  LambdaHack: -any
  template-haskell: ! '>=2.6'
  miniutter: ! '>=0.4.5.0'
  vector: ! '>=0.11'
  directory: ! '>=1.1.0.1'
maintainer: Mikolaj Konarski <mikolaj.konarski@funktory.com>
synopsis: A game engine library for tactical squad ASCII roguelike dungeon crawlers
changelog: ! "## [v0.8.3.0](https://github.com/LambdaHack/LambdaHack/compare/v0.8.1.2...v0.8.3.0)\n\n-
  Add a hack to run SDL2 on the main thread, fixing the OS X crash\n- Warn visually
  when impressed and Calm running low, risking domination\n- Display actor as red
  when low Calm and impressed or when low HP\n- Fix, complete and fine tune UI, AI
  and server skill and weapon checks\n- Fix a bug where item aspects look different
  to clients than to the server\n- Change the requirements for the main menu ASCII
  art\n\n## [v0.8.1.2](https://github.com/LambdaHack/LambdaHack/compare/v0.8.1.1...v0.8.1.2)\n\n-
  Fix typos detected by lintian\n- Fix the code that runs in case of old async (bug
  introduced in v0.8.1.1)\n\n## [v0.8.1.1](https://github.com/LambdaHack/LambdaHack/compare/v0.8.1.0...v0.8.1.1)\n\n-
  no player-visible changes\n- make it possible to compile with old async package\n-
  rewrite copyright information according to Debian format\n- make github display
  the correct main license\n\n## [v0.8.1.0](https://github.com/LambdaHack/LambdaHack/compare/v0.8.0.0...v0.8.1.0)\n\n-
  no player-visible changes\n- significantly reduce RAM usage when compiling library\n-
  update and extend CI\n\n## [v0.8.0.0, aka 'Explosive dashboard'](https://github.com/LambdaHack/LambdaHack/compare/v0.7.1.0...v0.8.0.0)\n\n-
  rework greying out menu items and permitting item application and projection\n-
  rework history collection; merge message repetitions more aggressively\n- display
  HP in red when below (configurable) warning threshold\n- tweak AI: actors remember
  they are fleeing; better leader choice, etc.\n- add to content specialized explosive
  projectiles; tune the effects\n- calculate loot score component based on fraction
  of dungeon loot collected\n- don't hardwire item price, but let it be specified
  in content\n- let all valuables glitter in the dark to avoid complete level exploration\n-
  teach AI to cure ailments and shake off impressions\n- rework detection effects;
  add detection of items embedded in tiles\n- automatically identify stolen items
  that only have minor effects\n- let projectiles hit each other if fragile and substantial
  enough\n- rework item kind identification code; change the way it's defined in content\n-
  make more item kinds (including some traps) secret\n- protect paralyzed actors with
  a stasis condition to avoid infinite paralysis\n- implement dumping screenshots
  in SDL2 and create animated GIFs in Makefile\n- generate most common consumables
  less often, but in depth-scaled bunches\n- make pushed actors alter tiles and trigger
  effects of embedded items\n- validate and cross-validate more content; reduce content
  creation boilerplate\n- make summoning more varied and prevent chain-summoning\n-
  add many ways to conditionally sequence effects\n- create large, merged rooms more
  often\n- generalize the terrain altering player command (C-c, mouse)\n- let RET,
  SPACE and ESC clear pending messages, if any\n- add dashboard with links to all
  menus and info screens\n- scale some organ and trap power with level depth\n- simplify
  level-scaled dice roll semantics\n- change scaled dice notation 'dl' to 'dL' for
  readability in-game\n- rebalance items and decrease dice variety to unclutter backpack\n-
  colour-code beneficial and harmful conditions in menu and in HUD\n- display item
  lore (also for organs, embedded items, explosions, etc.)\n- display embedded item
  descriptions as if they were tile descriptions\n- tweak blast visuals, lower particle
  counts, beautify their spread\n- tweak projectile visuals, e.g., display an extra
  frame when projectile dies\n- add intro screen and work on other ways to convey
  story\n- simplify a lot of code, including a bit of game rules\n- fix some bugs,
  tweak content, speed up some AI bottlenecks\n\n## [v0.7.1.0, aka 'Ancient troubles'](https://github.com/LambdaHack/LambdaHack/compare/v0.7.0.0...v0.7.1.0)\n\n-
  add amazing cave and item (actor, blast, organ) descriptions\n- package for Windows
  as an installer and also as zip archives\n- fix a crash from SDL frontend under
  some OpenGL drivers (no thread-safety)\n- add WWW address to the Main Menu, for
  other sites that may run our JS blob\n\n## [v0.7.0.0, aka 'The dice are cast'](https://github.com/LambdaHack/LambdaHack/compare/v0.6.2.0...v0.7.0.0)\n\n-
  decouple tile searching from tile alteration\n- refrain from identifying items that
  are not randomized\n- switch away from incapacitated leader to let others revive
  him\n- make rescue easier by not going into negative HP the first time\n- fix crowd
  of friends on another level slowing even actors that melee\n- fix missing report
  about items underneath an actor when changing levels\n- API breakage: change the
  syntax of dice in content\n- API addition: introduce cave descriptions\n- keep all
  client states in the server and optimize communication with clients\n- improve item
  choice for identification and item polymorphing\n- reset embedded items when altering
  tile\n- replace atomic command filtering with exception catching\n- reimplement
  dice as symbolic expressions inducing multiple RNG calls\n- switch to optparse-applicative
  and rewrite cli handling\n- add stack and cabal new-build project files\n- improve
  haddocks across the codebase\n\n## [v0.6.2.0, aka 'Zoom out'](https://github.com/LambdaHack/LambdaHack/compare/v0.6.1.0...v0.6.2.0)\n\n-
  make fireworks slower and so easier to spot\n- make rattlesnake deeper but more
  common\n- announce no effect of activation\n- describe original and current faction
  of an actor\n- highlight dominated actors\n- mark organs with comma instead of percent
  and gems with dollar\n- make the healing cave dangerous to prevent camping\n- slightly
  balance various content\n- by default move item the same as last time\n- often spawn
  between heroes and stairs going deeper\n- fix totalUsefulness computation for negative
  effects\n- fix abandoning distant enemy target despite no alternatives\n- fix slow
  pushing of actors\n- fix a crash when many actors run towards stairs\n- hotfix:
  Pass zoom keys through to the browser\n- help players find the info about changing
  the font size\n- depend on GHC >= 8.0 and new vector\n- specialize client code already
  in SampleMonadClient.hs\n- enable StrictData in all modules\n- replace 'failure'
  with 'error' that now shows call stack\n\n## [v0.6.1.0, aka 'Breaking one rule at
  a time'](https://github.com/LambdaHack/LambdaHack/compare/v0.6.0.0...v0.6.1.0)\n\n-
  fix redrawing after window minimized and restored\n- hack around vanishing texture
  on Windows\n- hack around SDL backends not thread-safe on Windows\n- the only breaking
  API change: specify font directory in game rules content\n- let the game use its
  own fonts, not fonts from the sample game in library\n- tweak some item creation
  to occur in character's pack, not on the ground\n- slightly balance various content\n-
  make sure the 'resolution' effect is not a drawback\n- make artifact weapon rarities
  more regular\n- avoid creating lit, open dungeon at the bottom, where foes have
  ranged weapons\n- number scenarios in user descriptions\n- correct, add and modify
  some in-game messages\n- let player hear unseen summonings performed by other actors\n-
  don't let actors hear blasts hitting walls, as opposed to hitting actors\n- when
  moving item out of shared stash, reset its timeouts\n- when ascending, shift timeouts
  of inventory as well\n- when creating item not on the ground, discover it\n- when
  dominating, auto-discover only if the item can't be discovered by use\n- let henchmen
  take into account their targets, as described in PLAYING.md\n- let only walkable
  tiles be explorable, for clear walls inside solid blocks\n- move to API 2.0.0 of
  sdl2-ttf and depend on corrected sdl2 (builds on Windows)\n- simplify code thanks
  to the new sdl2-ttf API\n- tweak travis scripts and building docs in README\n\n##
  [v0.6.0.0, aka 'Too much to tell'](https://github.com/LambdaHack/LambdaHack/compare/v0.5.0.0...v0.6.0.0)\n\n-
  add and modify a lot of content: items, tiles, embedded items, scenarios\n- improve
  AI: targeting, stealth, moving in groups, item use, fleeing, etc.\n- make monsters
  more aggressive than animals\n- tie scenarios into a loose, optional storyline\n-
  add more level generators and more variety to room placement\n- make stairs not
  walkable and use them by bumping\n- align stair position on the levels they pass
  through\n- introduce noctovision\n- increase human vision to 12 so that normal speed
  missiles can be sidestepped\n- tweak and document weapon damage calculation\n- derive
  projectile damage mostly from their speed\n- make heavy projectiles better vs armor
  but easier to sidestep\n- improve hearing of unseen actions, actors and missiles
  impacts\n- let some missiles lit up on impact\n- make torches reusable flares and
  add blankets for dousing dynamic light\n- add detection effects and use them in
  items and tiles\n- make it possible to catch missiles, if not using weapons\n- make
  it possible to wait 0.1 of a turn, at the cost of no bracing\n- improve pathfinding,
  prefer less unknown, alterable and dark tiles on paths\n- slow down actors when
  acting at the same time, for speed with large factions\n- don't halve Calm at serious
  damage any more\n- eliminate alternative FOV modes, for speed\n- stop actors blocking
  FOV, for speed\n- let actor move diagonally to and from doors, for speed\n- improve
  blast (explosion) shapes visually and gameplay-wise\n- add SDL2 frontend and deprecate
  GTK frontend\n- add specialized square bitmap fonts and hack a scalable font\n-
  use middle dot instead of period on the map (except in teletype frontend)\n- add
  a browser frontend based on DOM, using ghcjs\n- improve targeting UI, e.g., cycle
  among items on the map\n- show an animation when actor teleports\n- add character
  stats menu and stat description texts\n- add item lore and organ lore menus\n- add
  a command to sort item slots and perform the sort at startup\n- add a single item
  manipulation menu and let it mark an item for later\n- make history display a menu
  and improve display of individual messages\n- display highscore dates according
  to the local timezone\n- make the help screen a menu, execute actions directly from
  it\n- rework the Main Menu\n- rework special positions highlight in all frontends\n-
  mark leader's target on the map (grey highlight)\n- visually mark currently chosen
  menu item and grey out impossible items\n- define mouse commands based on UI mode
  and screen area\n- let the game be fully playable only with mouse, use mouse wheel\n-
  pick menu items with mouse and with arrow keys\n- add more sanity checks for content\n-
  reorganize content in files to make rebasing on changed content easier\n- rework
  keybinding definition machinery\n- let clients, not the server, start frontends\n-
  version savefiles and move them aside if versions don't match\n- lots of bug fixes
  internal improvements and minor visual and text tweaks\n\n## [v0.5.0.0, aka 'Halfway
  through space'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.101.0...v0.5.0.0)\n\n-
  let AI put excess items in shared stash and use them out of shared stash\n- let
  UI multiple items pickup routine put items that don't fit into equipment into shared
  stash, if possible, not into inventory pack\n- re-enable the ability to hear close,
  invisible foes\n- add a few more AI and autonomous henchmen tactics (CTRL-T)\n-
  keep difficulty setting over session restart\n- change some game start keybindings\n-
  replace the Duel game mode with the Raid game mode\n- various bugfixes, minor improvements
  and balancing\n\n## [v0.4.101.0, aka 'Officially fun'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.100.0...v0.4.101.0)\n\n-
  the game is now officially fun to play\n- introduce unique boss monsters and unique
  artifact items\n- add animals that heal the player\n- let AI gang up, attempt stealth
  and react to player aggressiveness\n- spawn actors fast and close to the enemy\n-
  spawn actors less and less often on a given level, but with growing depth\n- prefer
  weapons with effects, if recharged\n- make the bracing melee bonus additive, not
  multiplicative\n- let explosions buffet actors around\n- make braced actors immune
  to translocation effects\n- use mouse for movement, actor selection, aiming\n- don't
  run straight with selected actors, but go-to cross-hair with them\n- speed up default
  frame rate, slow down projectiles visually\n- rework item manipulation UI\n- you
  can pick up many items at once and it costs only one turn\n- allow actors to apply
  and project from the shared stash\n- reverse messages shown in player diary\n- display
  actor organs and stats\n- split highscore tables wrt game modes\n- move score calculation
  formula to content\n- don't keep the default/example config file commented out;
  was misleading\n- I was naughty again and changed v0.5.0.0 of LambdaHack content
  API slightly\n  one last time\n\n## [v0.4.100.0, aka 'The last thaw'](https://github.com/LambdaHack/LambdaHack/compare/v0.4.99.0...v0.4.100.0)\n\n-
  unexpectedly thaw and freeze again v0.5.0.0 of LambdaHack content API\n- unexpectedly
  implement timeouts and temporary effects easily without FRP\n- make a couple of
  skill levels meaningful and tweak skills of some actors\n- make AI prefer exploration
  of easier levels\n- permit overfull HP and Calm\n- let non-projectile actors block
  view\n- make colorful characters bold (if it resizes your fonts, turn off via colorIsBold
  = False in config file or --noColorIsBold on commandline)\n- start the game with
  a screensaver safari mode\n- add i386 Linux and Windows compilation targets to Makefile\n\n##
  [v0.4.99.0, aka 'Player escapes'](https://github.com/LambdaHack/LambdaHack/compare/v0.2.14...v0.4.99.0)\n\n-
  balance the example game content a bit (campaign still unbalanced)\n- various code
  and documentation tweaks and fixes\n- add cabal flag expose_internal that reveals
  internal library operations\n- merge FactionKind into ModeKind and rework completely
  the semantics\n- compatibility tweaks for Nixpkgs\n- define AI tactics, expose them
  to UI and add one more: follow-the-leader\n- share leader target between the UI
  and AI client of each faction\n- specify monster spawn rate per-cave\n- extend content
  validation and make it more user friendly\n- freeze v0.5.0.0 of LambdaHack content
  API\n\n## [v0.2.14, aka 'Out of balance'](https://github.com/LambdaHack/LambdaHack/compare/v0.2.12...v0.2.14)\n\n-
  tons of new (unbalanced) content, content fields, effects and descriptions\n- add
  a simple cabal test in addition to make-test and travis-test\n- generate items and
  actors according to their rarities at various depths\n- redo weapon choice, combat
  bonuses and introduce armor\n- introduce skill levels for abilities (boolean for
  now, WIP)\n- remove regeneration, re-add through periodically activating items\n-
  ensure passable areas of randomly filled caves are well connected\n- make secondary
  factions leaderless\n- auto-tweak digital line epsilon to let projectiles evade
  obstacles\n- add shrapnel (explosions) and organs (body parts)\n- express actor
  kinds as item kinds (their trunk)\n- add dynamic lights through items, actors, projectiles\n-
  fix and improve item kind and item stats identification\n- make aspects additive
  from all equipment and organ items\n- split item effects into aspects, effects and
  item features\n- rework AI and structure it according to the Ability type\n- define
  Num instance for Dice to make writing it in content easier\n- remove the shared
  screen multiplayer mode and all support code, for now\n- rename all modules and
  nearly all other code entities\n- check and consume HP when calling friends and
  Calm when summoning\n- determine sight radius from items and cap it at current Calm/5\n-
  introduce Calm; use to hear nearby enemies and limit item abuse before death\n-
  let AI actors manage items and share them with party members\n- completely revamp
  item manipulation UI\n- add a command to cede control to AI\n- separate actor inventory,
  10-item actor equipment and shared party stash\n- vi movement keys (hjklyubn) are
  now disabled by default\n- new movement keyset: laptop movement keys (uk8o79jl)\n\n##
  [v0.2.12](https://github.com/LambdaHack/LambdaHack/compare/v0.2.10...v0.2.12)\n\n-
  improve and simplify dungeon generation\n- simplify running and permit multi-actor
  runs\n- let items explode and generate shrapnel projectiles\n- add game difficulty
  setting (initial HP scaling right now)\n- allow recording, playing back and looping
  commands\n- implement pathfinding via per-actor BFS over the whole level\n- extend
  setting targets for actors in UI tremendously\n- implement autoexplore, go-to-target,
  etc., as macros\n- let AI use pathfinding, switch leaders, pick levels to swarm
  to\n- force level/leader changes on spawners (even when played by humans)\n- extend
  and redesign UI bottom status lines\n- get rid of CPS style monads, aborts and WriterT\n-
  benchmark and optimize the code, in particular using Data.Vector\n- split off and
  use the external library assert-failure\n- simplify config files and limit the number
  of external dependencies\n\n## [v0.2.10](https://github.com/LambdaHack/LambdaHack/compare/v0.2.8...v0.2.10)\n\n-
  screensaver game modes (AI vs AI)\n- improved AI (can now climbs stairs, etc.)\n-
  multiple, multi-floor staircases\n- multiple savefiles\n- configurable framerate
  and combat animations\n\n## [v0.2.8](https://github.com/LambdaHack/LambdaHack/compare/v0.2.6.5...v0.2.8)\n\n-
  cooperative and competitive multiplayer (shared-screen only in this version)\n-
  overhauled searching\n- rewritten engine code to have a single server that sends
  restricted game state updates to many fat clients, while a thin frontend layer multiplexes
  visuals from a subset of the clients\n\n## [v0.2.6.5](https://github.com/LambdaHack/LambdaHack/compare/v0.2.6...v0.2.6.5)\n\n-
  this is a minor release, primarily intended to fix the broken haddock documentation
  on Hackage\n- changes since 0.2.6 are mostly unrelated to gameplay:\n    - strictly
  typed config files split into UI and rules\n    - a switch from Text to String throughout
  the codebase\n    - use of the external library miniutter for English sentence generation\n\n##
  [v0.2.6](https://github.com/LambdaHack/LambdaHack/compare/v0.2.1...v0.2.6)\n\n-
  the Main Menu\n- improved and configurable mode of squad combat\n\n## [v0.2.1](https://github.com/LambdaHack/LambdaHack/compare/v0.2.0...v0.2.1)\n\n-
  missiles flying for three turns (by an old kosmikus' idea)\n- visual feedback for
  targeting\n- animations of combat and individual monster moves\n\n## [v0.2.0](https://github.com/LambdaHack/LambdaHack/compare/release-0.1.20110918...v0.2.6)\n\n-
  the LambdaHack engine becomes a Haskell library\n- the LambdaHack game depends on
  the engine library\n"
basic-deps:
  bytestring: ! '>=0.9.2'
  stm: ! '>=2.4'
  base: ! '>=4.9 && <99'
  hsini: ! '>=0.2'
  time: ! '>=1.4'
  enummapset: ! '>=0.5.2.2'
  unordered-containers: ! '>=0.2.3'
  text: ! '>=0.11.2.3'
  filepath: ! '>=1.2.0.1'
  async: ! '>=2'
  sdl2: ! '>=2'
  containers: ! '>=0.5.3.0'
  vector-binary-instances: ! '>=0.2.3.1'
  keys: ! '>=3'
  base-compat: ! '>=0.8.0'
  binary: ! '>=0.8'
  assert-failure: ! '>=0.1.2 && <0.2'
  ghc-prim: -any
  sdl2-ttf: ! '>=2'
  zlib: ! '>=0.5.3.1'
  hashable: ! '>=1.1.2.5'
  pretty-show: ! '>=1.6'
  transformers: ! '>=0.4'
  optparse-applicative: ! '>=0.13'
  random: ! '>=1.1'
  deepseq: ! '>=1.3'
  LambdaHack: -any
  template-haskell: ! '>=2.6'
  miniutter: ! '>=0.4.5.0'
  vector: ! '>=0.11'
  directory: ! '>=1.1.0.1'
all-versions:
- '0.1.20080412'
- '0.1.20080413'
- '0.1.20090606'
- '0.1.20110117'
- '0.1.20110918'
- '0.2.0'
- '0.2.1'
- '0.2.6'
- '0.2.6.5'
- '0.2.8'
- '0.2.10'
- '0.2.10.5'
- '0.2.10.6'
- '0.2.12'
- '0.2.14'
- '0.4.9.0'
- '0.4.99.0'
- '0.4.100.0'
- '0.4.101.0'
- '0.4.101.1'
- '0.5.0.0'
- '0.8.1.0'
- '0.8.1.1'
- '0.8.1.2'
- '0.8.3.0'
author: Andres Loeh, Mikolaj Konarski
latest: '0.8.3.0'
description-type: markdown
description: ! "LambdaHack\n==========\n\n[![Build Status](https://travis-ci.org/LambdaHack/LambdaHack.svg?branch=master)](https://travis-ci.org/LambdaHack/LambdaHack)\n[![Hackage](https://img.shields.io/hackage/v/LambdaHack.svg)](https://hackage.haskell.org/package/LambdaHack)\n[![Join
  the chat at https://gitter.im/LambdaHack/LambdaHack](https://badges.gitter.im/LambdaHack/LambdaHack.svg)](https://gitter.im/LambdaHack/LambdaHack?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nLambdaHack
  is a Haskell[1] game engine library for ASCII roguelike[2]\ngames of arbitrary theme,
  size and complexity, with optional\ntactical squad combat. It's packaged together
  with a sample\ndungeon crawler in fantasy setting that can be tried out\nin the
  browser at http://lambdahack.github.io.\n(It runs fastest on Chrome. Keyboard commands
  and savefiles\nare supported only on recent enough versions of browsers.\nMouse
  should work everywhere.)\n\nAs an example of the engine's capabilities, here is
  a showcase of shooting down explosive projectiles. A couple were shot down close
  enough to enemies to harm them. Others exploded closer to our party members and
  took out of the air the projectiles that would otherwise harm them.\n\n![gameplay
  screenshot](https://raw.githubusercontent.com/LambdaHack/media/master/screenshot/allureofthestars.com.shooting.down.explosives.gif)\n\nThis
  was a semi-automatic stealthy speedrun of the escape scenario of the sample game
  that comes with the engine. Small fixed font. The enemy gang has a huge numerical
  and equipment superiority. Our team loots the area on auto-pilot until the first
  foe is spotted. Then they scout out enemy positions. Then hero 1 draws enemies and
  unfortunately enemy fire as well, which is when he valiantly shoots down explosives
  to avoid the worst damage. Then heroine 2 sneaks behind enemy lines to reach the
  remaining treasure. That accomplished, the captain signals retreat and leaves for
  the next area (the zoo).\n\n\nUsing the engine\n----------------\n\nTo use the engine,
  you need to specify the content to be\nprocedurally generated. You specify what
  the game world\nis made of (entities, their relations, physics and lore)\nand the
  engine builds the world and runs it.\nThe library lets you compile a ready-to-play
  game binary,\nusing either the supplied or a custom-made main loop.\nSeveral frontends
  are available (SDL2 is the default\nfor desktop and there is a JavaScript browser
  frontend)\nand many other generic engine components are easily overridden,\nbut
  the fundamental source of flexibility lies\nin the strict and type-safe separation
  of code from the content\nand of clients (human and AI-controlled) from the server.\n\nPlease
  see the changelog file for recent improvements\nand the issue tracker for short-term
  plans. Long term goals\ninclude multiplayer tactical squad combat, in-game content\ncreation,
  auto-balancing and persistent content modification\nbased on player behaviour. Contributions
  are welcome.\n\nOther games known to use the LambdaHack library:\n\n* Allure of
  the Stars[6], a near-future Sci-Fi game\n* Space Privateers[8], an adventure game
  set in far future\n\nNote: the engine and the example game are bundled together
  in a single\nHackage[3] package released under the permissive `BSD3` license.\nYou
  are welcome to create your own games by forking and modifying\nthe single package,
  but please consider eventually splitting your changes\ninto a separate content-only
  package that depends on the upstream\nengine library. This will help us exchange
  ideas and share improvements\nto the common codebase. Alternatively, you can already
  start the development\nin separation by cloning and rewriting Allure of the Stars[10]\nand
  mix and merge with the example LambdaHack game rules at will.\nNote that the LambdaHack
  sample game derives from the Hack/Nethack visual\nand narrative tradition[9], while
  Allure of the Stars uses the more free-form\nMoria/Angband style (it also uses the
  `AGPL` license, and `BSD3 + AGPL = AGPL`,\nso make sure you want to liberate your
  code and content to such an extent).\n\nWhen creating a new game based on LambdaHack
  I've found it useful to place\ncompletely new content at the end of the content
  files to distinguish from\nmerely modified original LambdaHack content and thus
  help merging with new\nreleases. Removals of LambdaHack content merge reasonably
  well, so there are\nno special considerations. When modifying individual content
  items,\nit makes sense to keep their Haskell identifier names and change only\nin-game
  names and possibly frequency group names.\n\n\nInstallation of the sample game from
  binary archives\n----------------------------------------------------\n\nThe game
  runs rather slowly in the browser (fastest on Chrome)\nand you are limited to only
  one font, though it's scalable.\nAlso, savefiles are prone to corruption on the
  browser,\ne.g., when it's closed while the game is still saving progress\n(which
  takes a long time). Hence, after trying out the game,\nyou may prefer to use a native
  binary for your architecture, if it exists.\n\nPre-compiled game binaries are available
  through\nthe release page[11] (and, for Windows, continuously from AppVeyor[18]).\nTo
  use a pre-compiled binary archive, unpack it and run the executable\nin the unpacked
  directory or use program shortcuts from the installer,\nif available.\n\nOn Linux,
  make sure you have the SDL2 libraries installed on your system\n(e.g., libsdl2-2.0-0,
  libsdl2-ttf-2.0-0 on Ubuntu).\nOn Mac OS X, you need SDL2 installed, e.g.,\nfrom
  [libsdlorg](https://www.libsdl.org/download-2.0.php).\nFor Windows, the SDL2 and
  all other needed libraries are already\ncontained in the game's binary archive.\nNote
  that Windows binaries no longer work on Windows XP, since Cygwin\nand MSYS2 dropped
  support for XP.\n\n\nScreen and keyboard configuration\n---------------------------------\n\nThe
  game UI can be configured via a config file.\nThe default settings, the same that
  are built into the binary,\nare in [GameDefinition/config.ui.default](https://github.com/LambdaHack/LambdaHack/blob/master/GameDefinition/config.ui.default).\nWhen
  the game is run for the first time, the file is copied to the default\nuser data
  folder, which is `~/.LambdaHack/` on Linux,\n`C:\\Users\\<username>\\AppData\\Roaming\\LambdaHack\\`\n(or
  `C:\\Documents And Settings\\user\\Application Data\\LambdaHack\\`\nor something
  else altogether) on Windows, and in RMB menu, under\n`Inspect/Application/Local
  Storage` when run inside the Chrome browser.\n\nScreen font can be changed by editing
  the config file in the user\ndata folder. For a small game window, the highly optimized\n16x16x.fon
  and 8x8x.fon bitmap fonts are the best,\nbut for larger window sizes or if you require
  international characters\n(e.g. to give custom names to player characters), a modern
  scalable font\nsupplied with the game is the only option. The game window automatically\nscales
  according to the specified font size.\n\nIf you don't have a numeric keypad, you
  can use mouse or laptop keys\n(uk8o79jl) for movement or you can enable the Vi keys
  (aka roguelike keys)\nin the config file. If numeric keypad doesn't work, toggling\nthe
  Num Lock key sometimes helps. If running with the Shift key\nand keypad keys doesn't
  work, try Control key instead.\nThe game is fully playable with mouse only, as well
  as with keyboard only,\nbut the most efficient combination for some players is mouse
  for go-to,\ninspecting, and aiming at distant positions and keyboard for everything
  else.\n\nIf you are using a terminal frontend, numeric keypad may not work\ncorrectly
  depending on versions of the libraries, terminfo and terminal\nemulators. Toggling
  the Num Lock key may help.\nThe curses frontend is not fully supported due to the
  limitations\nof the curses library. With the vty frontend started in an xterm,\nControl-keypad
  keys for running seem to work OK, but on rxvt they do not.\nThe commands that require
  pressing Control and Shift together won't\nwork either, but fortunately they are
  not crucial to gameplay.\n\n\nCompilation of the library and sample game from source\n------------------------------------------------------\n\nIf
  you want to compile native binaries from the source code,\nuse Cabal (already a
  part of your OS distribution, or available within\nThe Haskell Platform[7]), which
  also takes care of all the dependencies.\n\nThe recommended frontend is based on
  SDL2, so you need the SDL2 libraries\nfor your OS. On Linux, remember to install
  the -dev versions as well,\ne.g., libsdl2-dev and libsdl2-ttf-dev on Ubuntu Linux
  16.04.\n(Compilation to JavaScript for the browser is more complicated\nand requires
  the ghcjs[15] compiler and optionally the Google Closure\nCompiler[16] as well.)\n\nThe
  latest official version of the LambdaHack library can be downloaded,\ncompiled for
  SDL2 and installed automatically by Cabal from Hackage[3]\nas follows\n\n    cabal
  update\n    cabal install LambdaHack\n\nFor a newer snapshot, clone the source code
  from github[5]\nand run Cabal from the main directory\n\n    cabal install\n\nThere
  is a built-in black and white line terminal frontend, suitable\nfor teletype terminals
  or a keyboard and a printer (but it's going to use\na lot of paper, unless you disable
  animations with `--noAnim`). To compile\nwith one of the less rudimentary terminal
  frontends (in which case you are\non your own regarding font choice and color setup
  and you won't have\nthe spiffy colorful squares around special positions, only crude
  highlights),\nuse Cabal flags, e.g,\n\n    cabal install -fvty\n\n\nTesting and
  debugging\n---------------------\n\nThe [Makefile](https://github.com/LambdaHack/LambdaHack/blob/master/Makefile)\ncontains
  many sample test commands.\nNumerous tests that use the screensaver game modes (AI
  vs. AI)\nand the teletype frontend are gathered in `make test`.\nOf these, travis
  runs `test-travis` on each push to github.\nTest commands with prefix `frontend`
  start AI vs. AI games\nwith the standard, user-friendly frontend.\n\nRun `LambdaHack
  --help` to see a brief description of all debug options.\nOf these, the `--sniff`
  option is very useful (though verbose\nand initially cryptic), for displaying the
  traffic between clients\nand the server. Some options in the config file may prove
  useful too,\nthough they mostly overlap with commandline options (and will be totally\nmerged
  at some point).\n\nYou can use HPC with the game as follows (details vary according\nto
  HPC version).\n\n    cabal clean\n    cabal install --enable-coverage\n    make
  test\n    hpc report --hpcdir=dist/hpc/dyn/mix/LambdaHack --hpcdir=dist/hpc/dyn/mix/LambdaHack-xxx/
  LambdaHack\n    hpc markup --hpcdir=dist/hpc/dyn/mix/LambdaHack --hpcdir=dist/hpc/dyn/mix/LambdaHack-xxx/
  LambdaHack\n\nA quick manual playing session after the automated tests would be
  in order,\nas well, since the tests don't touch the topmost UI layer.\nNote that
  a debug option of the form `--stopAfter*` is required to cleanly\nterminate any
  automated test. This is needed to gather any HPC info,\nbecause HPC requires a clean
  exit to save data files.\n\n\nCoding style\n------------\n\nStylish Haskell is used
  for slight auto-formatting at buffer save; see\n[.stylish-haskell.yaml](https://github.com/LambdaHack/LambdaHack/blob/master/.stylish-haskell.yaml).\nAs
  defined in the file, indentation is 2 spaces wide and screen is\n80-columns wide.
  Spaces are used, not tabs. Spurious whitespace avoided.\nSpaces around arithmetic
  operators encouraged.\nGenerally, relax and try to stick to the style apparent in
  a file\nyou are editing. Put big formatting changes in separate commits.\n\nHaddocks
  are provided for all module headers and for all functions and types\nfrom major
  modules, in particular the modules that are interfaces\nfor a whole directory of
  modules. Apart of that, only very important\nfunctions and types are distinguished
  by having a haddock.\nIf minor ones have comments, they should not be haddocks\nand
  they are permitted to describe implementation details and be out of date.\nPrefer
  assertions to comments, unless too verbose.\n\n\nFurther information\n-------------------\n\nFor
  more information, visit the wiki[4]\nand see [PLAYING.md](https://github.com/LambdaHack/LambdaHack/blob/master/GameDefinition/PLAYING.md),\n[CREDITS](https://github.com/LambdaHack/LambdaHack/blob/master/CREDITS)\nand
  [COPYLEFT](https://github.com/LambdaHack/LambdaHack/blob/master/COPYLEFT).\n\nHave
  fun!\n\n\n\n[1]: http://www.haskell.org/\n[2]: http://roguebasin.roguelikedevelopment.org/index.php?title=Berlin_Interpretation\n[3]:
  http://hackage.haskell.org/package/LambdaHack\n[4]: https://github.com/LambdaHack/LambdaHack/wiki\n[5]:
  http://github.com/LambdaHack/LambdaHack\n[6]: http://allureofthestars.com\n[7]:
  http://www.haskell.org/platform\n[8]: https://github.com/tuturto/space-privateers\n[9]:
  https://github.com/LambdaHack/LambdaHack/wiki/Sample-dungeon-crawler\n[10]: https://github.com/AllureOfTheStars/Allure\n[11]:
  https://github.com/LambdaHack/LambdaHack/releases\n[15]: https://github.com/ghcjs/ghcjs\n[16]:
  https://www.npmjs.com/package/google-closure-compiler\n[18]: https://ci.appveyor.com/project/Mikolaj/lambdahack/build/artifacts\n"
license-name: BSD3
