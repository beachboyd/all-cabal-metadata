homepage: http://lambdacube3d.com
changelog-type: markdown
hash: aa6f1099c020ad594d76bb300378656f5dd80e7f4d60ead03f7dda2ae071f9c3
test-bench-deps: {}
maintainer: csaba.hruska@gmail.com
synopsis: LambdaCube 3D is a DSL to program GPUs
changelog: ! "\n# v0.6\n\n-   new features\n    -   support mutual constant and function
  definitions\n    -   support pattern type annotations\n    -   support guards +
  where\n    -   support view patterns\n    -   support pattern guards\n    -   support
  as-patterns\n    -   implement pattern match reachability and exhaustiveness warnings
  \n    -   support parsing only\n    -   support printing desugared source code\n-
  \  improvements\n    -   allow pattern match on tuple types\n    -   implement constraint
  kinds (useful for type classes)\n    -   improve pretty printing\n    -   better
  presentation of types in editor tooltips\n    -   better error messages (e.g. for
  mismatching operator fixities)\n    -   speedup the builtin interpreter in the compiler\n-
  \  bugfixes\n    -   fix local function handling\n    -   fix parens around operators\n
  \   -   fix parsing of operator definitions\n    -   fix parsing of sections\n    -
  \  fix parsing of literals\n    -   fix switching to type namespace after @\n    -
  \  fix a bug in escape code parsing\n-   documentation\n    -   reorganise and cleanup
  the compiler sources\n    -   begin to write developer's guide\n    -   documentation
  on pattern match compilation\n-   dependencies\n    -   use megaparsec 5.0\n    -
  \  switch to ansi-wl-pprint\n    -   allow newer base, optparse-applicative and
  QuickCheck libraries\n-   other\n    -   move the TODOs to Trello: https://trello.com/b/TcuVPBAR/lambdacube3d\n
  \   -   work on prototypes\n        -   Reducer.hs -- experiment with lazy evaluation
  in the ST monad\n        -   ShiftReducer.hs -- experiment with lazy evaluation
  purely, with incremental GC\n        -   LamMachine.hs -- experiment with lazy evaluation
  purely, with incremental GC (next version)\n        -   Inspector.hs -- a tool for
  inspect the state of LamMachine, intended for debugging/visualizing lazy evaluation\n
  \       -   LamMachineV2.hs -- experiment with lazy evaluation in the ST monad,
  with explicit, generational GC\n\n\n# v0.5\n\n-   compiler\n    -   support local
  pattern matching functions\n    -   support recursive local definitions\n    -   more
  polymorph type for equality constraints\n        (~) :: forall a . a -> a -> Type\n
  \   -   tuples are representated as heterogeneous lists\n    -   support one-element
  tuple syntax: (( element ))\n    -   reduction: don't overnormalize (String -/->
  [Char])\n    -   compiler optimization: names have Int identifiers\n-   libraries/OpenGL
  API\n    -   use the advantage of heterogeneous lists\n        (simplified and more
  complete type family instances)\n    -   needed to explicitly denote one-element
  attribute tuples\n    -   set programmable point size with ProgramPointSize\n    -
  \  use lists instead of streams\n    -   rename\n        -   fetch_ --> fetch; fetchArrays_
  --> fetchArrays\n        -   zeroComp --> zero; oneComp --> one\n-   codegen\n    -
  \  generate functions in shaders (previously functions were inlined)\n    -   normalized
  variable names in the generated pipeline\n    -   optimization: remove duplicate
  shader programs\n    -   pretty printed shader programs\n    -   include compiler
  version in the generated pipeline as a string info field\n-   testenv\n    -   performance
  benchmarks (time and memory consumption)\n-   other\n    -   parsec dependency changed
  to megaparsec\n    -   registered on stackage too (next to HackageDB)\n\n\n# v0.4
  - tagged on Feb 5, 2016\n\n-   compiler\n    -   support type synonyms\n    -   support
  simple import lists (hiding + explicit)\n    -   support multiple guards\n    -
  \  handle constructor operator fixities, also in patterns\n    -   definitions are
  allowed in any order (not just bottom-up)\n    -   desugar node definitions (more
  robust, previously node definition handling was ad-hoc)\n    -   support qualified
  module imports\n    -   better tooltip ranges & types\n    -   bugfix: fix looping
  in type checking of recursive definitions\n-   compiler optimization\n    -   separate
  types and values (vs. church style lambda)\n    -   separate use of neutral terms\n
  \   -   erease lambda variable type\n    -   erease univ. pol. arguments of constructors\n
  \   -   erease univ. pol. arguments of case functions\n    -   speed up 'eval' function\n
  \   -   tried to speedup with cache max. de bruin indices\n    -   use less 'try'
  in parser\n-   libraries\n    -   always put base library modules to include path\n
  \   -   OpenGL API: simplify CullMode: remove FrontFace it is always ccw\n    -
  \  OpenGL API: simplify Depth images handling\n-   testenv\n    -   language feature
  tests framework\n-   other\n    -   released on HackageDB\n\n\n# v0.3 - tagged on
  Jan 18, 2016\n\n-   compiler\n    -   complete rewrite from scratch\n    -   use
  De Bruijn indices instead of String names\n    -   pattern match compilation\n    -
  \  compositional type inference is replaced by a zipper-based approach\n        which
  plays better together with dependent types\n-   libraries/OpenGL API\n    -   interpolation
  handling is decoupled from vertex shader descriptions\n    -   introduce Stream
  data type; use just two types of streams instead of 4\n-   testenv\n    -   use
  Travis CI (continuous integration) with a docker image\n    -   timeout for tests\n\n\n#
  first DSL compiler - tagged on Jun 14, 2015\n\n-   supports a fair amount of Haskell98
  language features\n-   partially supports GADTs and type families\n-   supports
  explicit type application\n-   supports row polymorphism and swizzling\n-   uses
  compositional typing for better error messages\n-   OpenGL API provided in attached
  Builtins and Prelude modules\n-   generates LambdaCube3D IR (intermediate representation)\n\n\n"
basic-deps:
  vect: ! '>=0.4.7'
  exceptions: ==0.8.*
  JuicyPixels: ! '>=3.2.7 && <3.3'
  bytestring: ==0.10.*
  ansi-wl-pprint: ==0.6.*
  base: ! '>=4.7 && <4.10'
  time: ! '>=1.5 && <1.7'
  base64-bytestring: ! '>=1.0.0.1'
  text: ==1.2.*
  megaparsec: ==5.0.*
  monad-control: ==1.0.*
  filepath: ==1.4.*
  process: ! '>=1.2'
  async: ! '>=2.0 && <2.2'
  websockets: ! '>=0.9.6.1'
  semigroups: -any
  patience: ==0.1.*
  containers: ==0.5.*
  tasty-quickcheck: ! '>=0.8 && <0.9'
  mtl: ==2.2.*
  lambdacube-compiler: -any
  lambdacube-ir: ==0.3.*
  pretty-show: ! '>=1.6.9'
  optparse-applicative: ! '>=0.12 && <0.14'
  tasty: ! '>=0.11 && <0.12'
  deepseq: ==1.4.*
  QuickCheck: ! '>=2.8.2 && <2.10'
  aeson: ! '>=0.9 && <0.12'
  vector: ==0.11.*
  directory: ==1.2.*
all-versions:
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.0.1
author: Csaba Hruska, Péter Diviánszky, Dániel Pék, Andor Pénzes
latest: 0.6.0.1
description-type: haddock
description: ! 'LambdaCube 3D is a domain specific language and library that makes
  it

  possible to program GPUs in a purely functional style.'
license-name: BSD-3-Clause
