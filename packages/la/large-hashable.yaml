homepage: https://github.com/factisresearch/large-hashable
changelog-type: text
hash: 4c946515701d43370f3f9b298f7229ca4701799e39ea8c1a75cf584ff1a3fa09
test-bench-deps:
  cereal: -any
  bytestring: -any
  HTF: -any
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  large-hashable: -any
  strict: -any
  containers: -any
  safecopy: -any
  hashable: -any
  byteable: -any
  base16-bytestring: -any
  transformers: -any
  deepseq: -any
  scientific: -any
  QuickCheck: -any
  aeson: -any
  vector: -any
  bytes: -any
  cryptohash: -any
maintainer: Stefan Wehr <wehr@cp-med.com>
synopsis: Efficiently hash (large) Haskell values
changelog: ! "0.1.0.4: 2017-03-19\n        * fixed build on `i686` related to non-fixed
  size integers\n\n0.1.0.2: 2016-10-10\n        * fixed build problems because of
  TemplateHaskell 2.11\n\n0.1.0.1: 2016-08-10\n        * fixed build issue: added
  bitfn.h to cabal file\n\n0.1.0.0: 2016-08-09\n        * initial release\n"
basic-deps:
  void: -any
  bytestring: -any
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  strict: -any
  containers: -any
  utf8-light: -any
  base16-bytestring: -any
  transformers: -any
  scientific: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  bytes: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Stefan Wehr, Lukas Epple
latest: 0.1.0.4
description-type: markdown
description: ! '# LargeHashable


  [![Build Status](https://travis-ci.org/factisresearch/large-hashable.svg?branch=master)](https://travis-ci.org/factisresearch/large-hashable)

  [![Hackage](https://img.shields.io/hackage/v/large-hashable.svg)](http://hackage.haskell.org/package/large-hashable)


  Efficiently hash Haskell values with MD5, SHA256, SHA512 and other

  hashing algorithms.


  ## Install


  * Using cabal: `cabal install large-hashable`

  * Using Stack: `stack install large-hashable`


  ### Building from git repository


  - clone the repository

  - Install the stack tool (http://haskellstack.org)

  - `stack build` builds the code

  - `stack test` builds the code and runs the tests

  - `run-benchmarks.sh` runs the benchmark suite

'
license-name: BSD-3-Clause
