homepage: https://github.com/matt-noonan/lawful#readme
changelog-type: ''
hash: d531511cdeeeb157ec4c8907dc529f546f28b8ab0a303b6c893b397ea7fa5f65
test-bench-deps: {}
maintainer: matt.noonan@gmail.com
synopsis: Assert the lawfulness of your typeclass instances.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- 0.1.0.0
author: Matt Noonan
latest: 0.1.0.0
description-type: markdown
description: ! "# lawful: Assert that your typeclass instances are lawful\n\n## What
  is this package for?\n\nThis small library provides a single two-parameter typeclass
  `Lawful c t`,\nwhere `c` is a typeclass and `t` is a type. Declaring an instance
  of\n`Lawful C T` is an assertion that \"the instance for `C T` obeys the laws of\nthe
  class `C` (whatever *that* means!)\"\n\nFor example, a lawful instance of `Eq T`
  should satisfy the reflexive\nlaw `x == x` for all `x :: T`.  This is certainly
  true for most types, such\nas `Int` or `[a]` when `Eq a` is lawful, so we can define\n\n```haskell\nLawful
  Eq Int\nLawful Eq a => Lawful Eq [a]\n```\n\nBut it *isn't* true for `Double`:\n\n```\nλ>
  nan = 0 / 0 :: Double\nλ> nan == nan\nFalse\n\n```\n\n## Why is there a `c t` constraint
  on `Lawful c t`?\n\nThis constraint lets you use a `Lawful c t` wherever a `c t`
  would be expected, \nas in:\n\n```haskell\nsame :: Lawful Eq a => a -> a -> Bool\nsame
  x y = x == y\n```\n\n## How do I know what laws are expected from a typeclass?\n\nIf
  everybody more-or-less agrees on what the right laws are, hopefully they bothered
  to\nwrite them down somewhere. If they didn't, then sorry! You're on your own!\n\n##
  Shouldn't all typeclass instances be lawful anyway, making this package useless?\n\nWouldn't
  that be nice?\n"
license-name: BSD-3-Clause
