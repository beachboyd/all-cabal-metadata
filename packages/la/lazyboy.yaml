homepage: https://github.com/ix/lazyboy#readme
changelog-type: markdown
hash: 948a9e25cf7db4e01551de4a075369a4d28a3e7c27b9da833fcfd0e85708eda9
test-bench-deps:
  microstache: ! '>=1.0.1.1 && <1.1'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.6.1 && <2.7'
  text: ! '>=1.2.3.1 && <1.3'
  lazyboy: -any
  transformers: ! '>=0.5.6.2 && <0.6'
  aeson: ! '>=1.4.2.0 && <1.5'
maintainer: rose@lain.org.uk
synopsis: An EDSL for programming the Game Boy.
changelog: |
  # Changelog for Lazyboy

  # 0.2.0.0
  - Started versioning.
  - Formatted as a library package.

  ## 0.2.0.1
  - Removed some useless instances of Show and Read.
  - Refactored most of the documentation.

  # 0.1.0.0
  - Initial version.

  ## Unreleased changes
basic-deps:
  microstache: ! '>=1.0.1.1 && <1.1'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.6.1 && <2.7'
  text: ! '>=1.2.3.1 && <1.3'
  transformers: ! '>=0.5.6.2 && <0.6'
  aeson: ! '>=1.4.2.0 && <1.5'
all-versions:
- 0.2.0.1
author: Rose
latest: 0.2.0.1
description-type: markdown
description: "![LAZYBOY](meta/logo.png)\n[![Build Status](https://travis-ci.org/ix/lazyboy.svg?branch=master)](https://travis-ci.org/ix/lazyboy)\n[![Coverage
  Status](https://coveralls.io/repos/github/ix/lazyboy/badge.svg?branch=master)](https://coveralls.io/github/ix/lazyboy?branch=master)\n---\n\nAn
  embedded domain-specific language + compiler written in Haskell for producing code
  to run on the Nintendo Game Boy.\n\nAlso features a library for manipulating constructs
  such as memory and graphics.\n\nCurrently, RGBASM is the only output target, but
  in the future native machine code generation is planned.\n\nSyntax example (will
  be updated as more complex constructs are added):\n```haskell\nmain :: IO ()\nmain
  = rom >>= T.putStrLn\n    where rom = compileROM $ do\n            smiley <- embedBytes
  image\n            -- set scroll values\n            write (Address scx) 0\n            write
  (Address scy) 0\n            -- set background palette\n            setBackgroundPalette
  defaultPalette\n            -- perform graphics operations\n            onVblank
  $ do\n                disableLCD\n                memcpy (Name smiley) (Address
  $ 0x9010) $ fromIntegral $ length image\n                memset (Address 0x9904)
  (0x992F - 0x9904) 0 -- clear the background tilemap\n                write (Address
  background1) 1 -- write the background tile data\n                setLCDControl
  $ defaultLCDControl { lcdDisplayEnable = True, lcdBackgroundEnable = True }\n            --
  halt indefinitely\n            freeze\n\nimage :: [Word8]\nimage = [0x00,0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x81,0x81,0x7e,0x7e,0x00,0x00,0x00,0x00]\n```\n\nSee
  `app/Main.hs` for a full usage example.\n\nBuild a ROM (output will be named `main.gb`):\n```\nstack
  run > examples/main.asm\ncd examples && make NAME=main\n```\n\n# About issues\nI
  mostly use the issue tracker on here as a place to write about planned features
  and compiler development, \ndon't take the count as an indicator of active bugs,
  and be sure to filter to show only issues that are bugs if you are curious on the
  state of the project.\n\n# Contributing\nPlease see the [Contributing](https://github.com/ix/lazyboy/wiki/Contributing)
  page on the Wiki.\n\nAdditional information about the project can also be found
  on the Wiki.\n\n# Special thanks\nThanks to [Francesco149](https://github.com/Francesco149)
  and [Bonzi](https://github.com/bnzis) for kindly devoting their time and knowledge
  to the project. The graphics functionality in particular would not be where it is
  without their assistance.\n"
license-name: BSD-3-Clause
