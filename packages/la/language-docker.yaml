homepage: https://github.com/hadolint/language-docker#readme
changelog-type: ''
hash: 3d3b5adebe576d8d5c72619117481513a3d89adf66850c6628ed6d0f2991971e
test-bench-deps:
  free: -any
  bytestring: ! '>=0.10'
  split: ! '>=0.2'
  base: ! '>=4.9 && <5'
  time: -any
  hspec: -any
  text: -any
  megaparsec: ! '>=7.0'
  language-docker: -any
  filepath: -any
  process: -any
  HUnit: ! '>=1.2'
  containers: -any
  mtl: -any
  prettyprinter: -any
  QuickCheck: -any
  th-lift: -any
  Glob: -any
  template-haskell: -any
  directory: -any
maintainer: lorenzo@seatgeek.com
synopsis: Dockerfile parser, pretty-printer and embedded DSL
changelog: ''
basic-deps:
  free: -any
  bytestring: ! '>=0.10'
  split: ! '>=0.2'
  base: ! '>=4.9 && <5'
  time: -any
  text: -any
  megaparsec: ! '>=7.0'
  containers: -any
  mtl: -any
  prettyprinter: -any
  th-lift: -any
  template-haskell: -any
all-versions:
- 1.0.0
- 2.0.0
- 2.0.1
- 3.0.0
- 3.0.1
- 4.0.0
- 4.0.1
- 5.0.0
- 5.0.1
- 6.0.0
- 6.0.1
- 6.0.2
- 6.0.3
- 6.0.4
- 7.0.0
- 8.0.0
- 8.0.1
- 8.0.2
author: |-
  Lukas Martinelli,
  Pedro Tacla Yamada,
  José Lorenzo Rodríguez
latest: 8.0.2
description-type: markdown
description: "[![Build Status][travis-img]][travis]\n[![Hackage][hackage-img]][hackage]\n[![GPL-3
  licensed][license-img]][license]\n\n# haskell-language-docker\n\nDockerfile parser,
  pretty-printer and embedded DSL\n\nProvides de ability to parse docker files, a
  pretty-printer and EDSL for\nwritting Dockerfiles in Haskell.\n\n- [Parsing files](#parsing-files)\n-
  [Parsing strings](#parsing-strings)\n- [Pretty-printing files](#pretty-printing-files)\n-
  [Writing Dockerfiles in Haskell](#writing-dockerfiles-in-haskell)\n- [Using the
  QuasiQuoter](#using-the-quasiquoter)\n- [Templating Dockerfiles in Haskell](#templating-dockerfiles-in-haskell)\n-
  [Using IO in the DSL](#using-io-in-the-dsl)\n\n## Parsing files\n\n```haskell\nimport
  Language.Docker\nmain = do\n    ef <- parseFile \"./Dockerfile\"\n    print ef\n```\n\n##
  Parsing strings\n\n```haskell\nimport Language.Docker\nmain = do\n    c <- readFile
  \"./Dockerfile\"\n    print (parseString c)\n```\n\n## Pretty-printing files\n\n```haskell\nimport
  Language.Docker\nmain = do\n    Right d <- parseFile \"./Dockerfile\"\n    putStr
  (prettyPrint d)\n```\n\n## Writing Dockerfiles in Haskell\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\n{-# LANGUAGE OverloadedLists #-}\nimport Language.Docker\n\nmain
  = putDockerfileStr $ do\n    from \"node\"\n    run \"apt-get update\"\n    run
  [\"apt-get\", \"install\", \"something\"]\n    -- ...\n```\n\n## Using the QuasiQuoter\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes       #-}\nimport Language.Docker\nmain
  = putDockerfileStr $ do\n    from \"node\"\n    run \"apt-get update\"\n    [edockerfile|\n
  \   RUN apt-get update\n    CMD node something.js\n    |]\n    -- ...\n```\n\n##
  Templating Dockerfiles in Haskell\n\n```haskell\n{-# LANGUAGE FlexibleContexts  #-}\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE OverloadedLists #-}\nimport Control.Monad\nimport
  Language.Docker\nimport Data.String (fromString)\nimport qualified Data.Text.Lazy.IO
  as L\n\ntags = [\"7.8\", \"7.10\", \"8\"]\ncabalSandboxBuild packageName = do\n
  \   let cabalFile = packageName ++ \".cabal\"\n    run \"cabal sandbox init\"\n
  \   run \"cabal update\"\n    add [fromString cabalFile] (fromString $ \"/app/\"
  ++ cabalFile)\n    run \"cabal install --only-dep -j\"\n    add \".\" \"/app/\"\n
  \   run \"cabal build\"\nmain =\n    forM_ tags $ \\tag -> do\n        let df =
  toDockerfileText $ do\n            from (\"haskell\" `tagged` tag)\n            cabalSandboxBuild
  \"mypackage\"\n        L.writeFile (\"./examples/templating-\" ++ tag ++ \".dockerfile\")
  df\n```\n\n## Using IO in the DSL\nBy default the DSL runs in the `Identity` monad.
  By running in IO we can\nsupport more features like file globbing:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE OverloadedLists #-}\nimport           Language.Docker\nimport
  qualified System.Directory     as Directory\nimport qualified System.FilePath      as
  FilePath\nimport qualified System.FilePath.Glob as Glob\nimport Data.List.NonEmpty
  (fromList)\nimport qualified Data.Text.Lazy.IO    as L\n\nmain = do\n    str <-
  toDockerfileTextIO $ do\n        fs <- liftIO $ do\n            cwd <- Directory.getCurrentDirectory\n
  \           fs <- Glob.glob \"./test/*.hs\"\n\t    let relativeFiles = map (FilePath.makeRelative
  cwd) fs\n            return (fromList relativeFiles)\n        from \"ubuntu\"\n\tcopy
  $ (toSources fs) `to` \"/app/\"\n    L.putStr str\n```\n\n[hackage-img]: https://img.shields.io/hackage/v/language-docker.svg\n[hackage]:
  https://hackage.haskell.org/package/language-docker\n[travis-img]: https://travis-ci.org/hadolint/language-docker.svg?branch=master\n[travis]:
  https://travis-ci.org/hadolint/language-docker\n[license-img]: https://img.shields.io/badge/license-GPL--3-blue.svg\n[license]:
  https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)\n"
license-name: GPL-3.0-only
