homepage: https://wiki.haskell.org/Lambdabot
changelog-type: text
hash: b8110d70ddb3641abd5102bea4ddab66f67ad26f91f79d32bc113b6a0b15fb4a
test-bench-deps: {}
maintainer: James Cook <mokus@deepbondi.net>
synopsis: Lambdabot is a development tool and advanced IRC bot
changelog: ! "lambdabot 5.1.0.4\n\t* support ghc-8.6 (#174, #175)\n\t* @pl timeout
  works again (#173)\n\nlambdabot 5.1.0.2\n\t* support ghc-8.4\n\t* #155, #163, #164,
  #168, #169, #170\n\nlambdabot 5.1.0.1\n\t* support ghc-8.0\n\t* support haskell-src-exts
  1.18+\n\t* better oeis output\n\t* #141, #149\n\nlambdabot 5.1\n\t* support for
  dependent-sum 0.3 (#130)\n\t* IRC reconnect support (#125, by Nikolay Amiantov)\n\t*
  unmtl parsing fix (#129, by Daniel Wagner)\n\t* #131, #138, #139, #140, #142, #143\n\nlambdabot
  5.0.3\n\t* compatibility with ghc-7.10: relax utf8-string upper bound\n\t* numerous
  bugfixes (#121, #122, #123, #117, #98)\n\nlambdabot 5.0.2.2\n\t* update Changelog\n\nlambdabot
  5.0.2.1\n\t* use QuickCheck-safe for @check command\n\t* ship ghc version specific
  Pristen.hs files\n\t* the dict plugin no longer looks up more than one word at a
  time\n\nlambdabot 5.0.1\n\t* update to monad-control-1.0\n\t* if ./State/ exists,
  then state files are stored there even if a\n\t  corresponding file exists in ~/.lambdabot/State\n"
basic-deps:
  lambdabot-irc-plugins: ! '>=5.1.0.1 && <5.2'
  lambdabot-novelty-plugins: ! '>=5.1.0.1 && <5.2'
  base: ! '>=3 && <5'
  lambdabot-haskell-plugins: ! '>=5.1.0.1 && <5.2'
  lambdabot-social-plugins: ! '>=5.1.0.1 && <5.2'
  lambdabot-reference-plugins: ! '>=5.1.0.1 && <5.2'
  mtl: ! '>=2'
  lambdabot-misc-plugins: ! '>=5.1.0.1 && <5.2'
  lambdabot-core: ! '>=5.1.0.1 && <5.2'
all-versions:
- '4.0'
- '4.1'
- '4.2.1'
- '4.2.2'
- '4.2.2.1'
- '4.2.3.0'
- '4.2.3.1'
- '4.2.3.2'
- '4.2.3.3'
- '4.3'
- '4.3.0.1'
- '5.0'
- '5.0.1'
- '5.0.2.1'
- '5.0.2.2'
- '5.0.3'
- '5.1'
- '5.1.0.1'
- '5.1.0.2'
- '5.1.0.4'
author: James Cook
latest: '5.1.0.4'
description-type: markdown
description: ! "# About Lambdabot\n\nLambdabot is an IRC bot written over several
  years by those on the Freenode\n`#haskell` IRC channel.\n\nIt operates as a command
  line tool, embedded in an editor, embedded in GHCi,\nvia internet relay chat and
  on the web.\n\n## Installation\n\nThe easiest way to install `lambdabot` is from
  hackage, by the following\ncommands:\n\n    cabal install --constraint 'transformers
  installed' lambdabot djinn\n    hoogle data\n\nThe second command fetches the data
  for Lambdabot's `@hoogle` command, which\nis a thin wrapper around the [`hoogle`](https://www.haskell.org/hoogle/)\ncommand
  line tool. Invoking `lambdabot` will (hopefully) display a\n`lambdabot>` prompt.\n\nIt
  is also possible to install lambdabot in a sandbox. In that case, use\n`cabal exec
  lambdabot` to launch lambdabot.\n\n## Files\n\nSome lambdabot modules maintain state.
  The state is stored in `./State/`\nif that directory exits; otherwise, it will end
  up on `~/.lambdabot/State/`.\nState files of particular interest are:\n\n * `Pristine.hs`
  and `L.hs`: Environment for running Haskell code.\n   The command `@let` adds new
  definitions to `L.hs`, whereas `@undefine`\n   copies `Pristine.hs` to `L.hs`.\n
  * `offlinerc`: This file contains a history of commands typed into\n   lambdabot's
  tty interface.\n\n## Customization\n\nThe state file `Pristine.hs` defines the environment
  in which Haskell code\nis run. To customize lambdabot's modules, unpack the lambdabot
  package\n\n    cabal unpack lambdabot; cd lambdabot-<version>\n\nYou can then edit
  `src/Modules.hs` to configure the loaded modules.\n\n## Using Lambdabot\n\nLambdabot
  has a number of modules, most of which provide several commands.\nType `@listmodules`
  to obtain a list of module names, and then\n`@list <module>` to list a module's
  commands. Executing `@help command`\ndisplays a short description of the command.\n\nThe
  following sample session demonstrates some useful lambdabot commands.\n\n    lambdabot>
  > sum [1..10]\n     55\n    lambdabot> @let foo = 42\n    lambdabot> > product [1..foo]\n
  \    1405006117752879898543142606244511569936384000000000\n    lambdabot> @undefine\n
  \       Not in scope:‘foo’\n        Perhaps you meant ‘Data.Traversable.for’ (imported
  from Data.Traversable)\n    lambdabot> @type map\n    (a -> b) -> [a] -> [b]\n    lambdabot>
  @djinn (b -> c) -> (a -> b) -> a -> c\n    f a b c = a (b c)\n    lambdabot> @pl
  \\x y z -> y z x\n    flip flip\n    lambdabot> @unpl flip flip\n    (\\ b c f ->
  c f b)\n    lambdabot> @undo do x <- step1; step2; step3\n    step1 >>= \\ x ->
  step2 >> step3\n\n## Further Information\n\n- [lambdabot](https://github.com/lambdabot/lambdabot)
  on github\n- [lambdabot](https://wiki.haskell.org/Lambdabot) on the Haskell wiki
  (outdated)\n- [GOA: GHCI integration](https://wiki.haskell.org/GHC/GHCi#GHCi_on_Acid)
  (Haskell Wiki)\n"
license-name: LicenseRefGPL
