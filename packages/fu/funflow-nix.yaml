homepage: ''
changelog-type: markdown
hash: 5dcb6f3172e11125a05dabd6f8b7aa4d8357af9d2139e7d2dbb70c2cd8072d8d
test-bench-deps:
  modern-uri: -any
  unix: -any
  path: -any
  base: <5
  funflow-nix: -any
  safe-exceptions: -any
  filepath: -any
  process: -any
  async: -any
  data-default: ! '>=0.7'
  containers: -any
  funflow: -any
  tasty-hunit: -any
  temporary: -any
  random: -any
  tasty: -any
  path-io: -any
  directory: -any
maintainer: matthewtpickering@gmail.com
synopsis: Utility functions for using funflow with nix
changelog: ! '# Revision history for funflow-nix


  ## 0.1.0.0 -- 2018-11-16


  * Initial Release

'
basic-deps:
  modern-uri: -any
  path: -any
  base: ! '>=4.10 && <5'
  funflow-nix: -any
  text: -any
  funflow: ! '>=1.4'
  path-io: -any
all-versions:
- 0.1.0.0
author: Matthew Pickering
latest: 0.1.0.0
description-type: markdown
description: ! "`funflow-nix` provides functions for creating flows which run in a
  nix\nenvironment.\n\nThe library exposes the `NixConfig` data type which allows
  you to specify the\nenvironment and command to run. This is then turned into a flow
  using `nix`.\n\nA complete example can be seen in `examples/Simple.hs`.\n\nWe can
  pin the version of nixpkgs we want to use by specifying a tarball to\nuse as the
  source.\n\n```\ntarballSource :: NixpkgsSource\ntarballSource = NixpkgsTarball [uri|https://github.com/NixOS/nixpkgs/archive/a19357241973538212b5cb435dde84ad25cbe337.tar.gz|]\n\nnixConfig
  :: Environment -> NixConfig\nnixConfig senv =\n  NixShellConfig {\n    environment
  = senv\n    , command = \"jq\"\n    , args = [ParamText \"--version\"]\n    , env
  = []\n    , stdout = StdOutCapture\n    , nixpkgsSource = tarballSource\n  }\n```\n\nOnce
  the config has been specified. It can be turned into a flow by using the\n`nix`
  function.\n\n\n```\njqVersionPkg :: SimpleFlow () String\njqVersionPkg = readString_
  <<< nix (\\() -> nixConfig (PackageList [\"jq\"]))\n```\n\n"
license-name: BSD-3-Clause
