homepage: http://joyful.com/fungen
changelog-type: text
hash: 007dfa0dca8d6eb719e374f8eaa7c8cabb5c8b1d27154c02a821c1457e4cc359
test-bench-deps: {}
maintainer: Simon Michael <simon@joyful.com>
synopsis: A lightweight, cross-platform, OpenGL/GLUT-based game engine.
changelog: ! "1.0.1 2016/8/18\n\n* add stack config for GHC 8\n* fix building with
  current stackage/OpenGL/GLUT\n* fix examples' wrong dependency\n\n1.0 2015/9/21\n\n*
  support GHC 7.10\n* support stack\n* repo moved to haskell-game organisation\n\n0.4.6.1
  2014/10/9\n\n* update changelog\n\n0.4.6 2014/10/9\n\n* move to github, enable issue
  tracker\n\n0.4.5 2014/10/8\n\n* add executables to run examples (fungen-hello, fungen-pong,
  fungen-worms)\n\n0.4.4 2014/10/7\n\n* add missing files to cabal file (Samuel GÃ©lineau)\n*
  support & require latest OpenGL 2.9\n* make IOGame also a Functor and Applicative,
  for ghc 7.10\n\n0.4.3 2014/4/5\n\n* set upper bound on OpenGL to avoid build failure
  with OpenGL 2.9\n\n0.4.2 2013/08/07\n\n* add q as quit key to examples\n* fix buggy
  input when holding down keys on windows\n\n0.4.1 2013/08/06\n\n* reorganised and
  exposed more haddocks\n\n0.4 2013/08/05\n\n* a new hakyll-based website, incorporating
  the old site\n* tested with GHC 7.6\n* input handlers now receive mouse position
  and modifier state\n  (inspired by Pradeep Kumar).  See fungentest.hs for examples.\n*
  more haddocks\n\n0.3 2011/02/13, Simon Michael\n\n* updated for GHC 6.12 & base
  4\n* module names simplified\n* beginning of haddockification\n* docs moved into
  repo\n* published to darcsden, hackage, wiki, haskell-cafe, #haskell-game, reddit\n\n0.1-hackage
  2008/09/17, Miloslav Raus\n\n* first hackage release\n* updated for GHC 6.10\n*
  cabalised\n* Tested under Win32 & Linux/Intel. Known glitches: Flickering under
  linux\n  (at least on my shitty laptop). Weird pong paddle behavior under Win32.\n\n0.1-ghc6.8
  2008/02/26, Simon Michael\n\n* updated for GHC 6.8\n* slight tweaks to examples\n*
  public darcs repo\n\n0.1 2002, Andre Furtado\n\n* first public release\n"
basic-deps:
  OpenGL: -any
  GLUT: -any
  base: ==4.*
  base-compat: -any
  random: -any
  FunGEn: ==1.0.*
all-versions:
- '0.1'
- '0.3'
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.6.1
- '1.0'
- 1.0.1
author: Andre Furtado <awbf@cin.ufpe.br>
latest: 1.0.1
description-type: markdown
description: ! "<style>\n/*\nbody {\n    background-color:black;\n    color:white;\n}\n*/\n.a
  {\n    font-weight:bold;\n    color:red;\n    font-size:200%;\n}\n.b {\n    font-weight:normal;\n
  \   /* color:#bbb; */\n    color:black;\n    font-size:smaller;\n}\n</style>\n\n<div
  style=\"float:right; margin:3em 0 1em 1em;\">\n<a href=\"https://github.com/simonmichael/fungen/blob/master/examples/hello.hs#L1\"><img
  border=0 src=\"/site/logo.gif\" title=\"Click to see the hello world example\" style=\"margin-top:2em;\"></a>\n<br>\n<a
  href=\"https://github.com/simonmichael/fungen/blob/master/examples/pong/pong.hs#L1\"><img
  border=0 src=\"/site/pong.png\" title=\"Click to see the pong example\" style=\"margin-top:2em;\"></a>\n<br>\n<a
  href=\"https://github.com/simonmichael/fungen/blob/master/examples/worms/worms.hs#L1\"><img
  border=0 src=\"/site/worms.png\" title=\"Click to see the worms (snake) example\"
  style=\"margin-top:1em;\"></a>\n</div>\n\n# <span class=\"a\">Fun<span class=\"b\">ctional</span>
  G<span class=\"b\">ame</span> En<span class=\"b\">gine</span></span>\n\nFunGEn (Functional
  Game Engine) is a BSD-licensed, cross-platform,\nOpenGL/GLUT-based, non-FRP game
  engine/framework written in\nHaskell. Created by Andre Furtado in 2002, it's the
  oldest Haskell\ngame engine, and with very few dependencies and two example games,\nit's
  one of the easiest ways to get started with Haskell game\ndevelopment. It provides:\n\n*
  Initialization, updating, removing, rendering and grouping\n  routines for game
  objects\n* Definition of a game background (or map), including texture-based\n  maps
  and tile maps\n* Reading and intepretation of the player's keyboard and mouse input\n*
  Collision detection\n* Time-based functions and pre-defined game actions\n* Loading
  and displaying of 24-bit bitmap files\n* Some debugging and game performance evaluation
  facilities\n<!-- * Sound support (windows only, not in current release) -->\n\n[Simon
  Michael](http://joyful.com) provides basic maintenance for\nthis package. If you'd
  like to take it over, contact me (`sm` on the #haskell-game IRC channel).\n\n**Home:**
  \     <http://joyful.com/fungen> \\\n**Hackage:**   <http://hackage.haskell.org/package/FunGEn>
  \\\n**Code:**      <https://github.com/haskell-game/fungen> \\\n\\\n**Docs:**\\\n&nbsp;
  [Changelog](http://hackage.haskell.org/package/FunGEn/changelog) \\\n&nbsp; [API
  docs](https://hackage.haskell.org/package/FunGEn/docs/Graphics-UI-Fungen.html) \\\n&nbsp;
  Andre's original [pong tutorial](site/example.html) \\\n&nbsp; Haskell wiki [Game_Development](http://www.haskell.org/haskellwiki/Game_Development)
  \\\n&nbsp; Haskell wiki [OpenGL tutorial](http://www.haskell.org/haskellwiki/OpenGLTutorial1)
  \\\n<!-- Updated [pong tutorial](TUTORIAL.html) \\ -->\n<!-- the [old site](http://www.cin.ufpe.br/~haskell/fungen)
  \\ -->\n\\\n**Community:**\\\n&nbsp; [#haskell-game](http://ircbrowse.net/day/haskell-game/today/recent)
  IRC channel\n       ([join](http://webchat.freenode.net/?channels=haskell-game))
  \\\n&nbsp; [FunGEn questions](http://stackoverflow.com/search?tab=newest&q=fungen)
  on Stack Overflow \\\n&nbsp; [haskellgamedev](http://www.reddit.com/r/haskellgamedev)
  reddit \\\n&nbsp; [haskell-cafe](http://www.haskell.org/haskellwiki/Mailing_lists)
  mail list \\\n\n\n## Getting started\n```\n$ cabal update\n$ [cabal sandbox init]
  \   # if needed, to avoid dependency problems\n$ cabal install FunGEn    # & make
  sure ~/.cabal/bin or ./.cabal-sandbox/bin or windows equiv. are in your PATH\n$
  fungen-hello\n$ fungen-pong\n$ fungen-worms\n```\nor\n```\n$ git clone http://github.com/haskell-game/fungen\n$
  cd fungen\n$ stack install\n$ fungen-hello\n$ fungen-pong\n$ fungen-worms\n``````\n\n##
  History\n\nAndre's 2002 site included this Q & A:\n\n> **What is a game engine?**\n>
  \n> A game engine can be considered as a library that provides game facilities\n>
  to a game programmer. When using a game engine, the programmer must\n> specify when
  the game events happen, rather than how they are\n> implemented. A same functionality
  may have its implementation varying from\n> platform to platform, in the case the
  engine is platform-independent. The\n> main advantage of a game engine is that it
  can be reused to the\n> development of many different kind of games, in an automated
  way, saving a\n> lot of programming time.\n> \n> **Why Haskell?**\n> \n> We believe
  that Haskell is a great language to develop games, because of\n> its high level
  of abstraction and the generation of a more concise,\n> elegant and shorter code.
  This is great for code maintenance and\n> understanding. Combining the power of
  Haskell with the facilities provided\n> by game engines seems a promising project.
  You can find more info on\n> Haskell in its official site.\n> \n> **What is HOpenGL?**\n>
  \n> HOpenGL stands for Haskell Open Graphics Library. Actually, it is a\n> binding
  to one of the most famous graphics libraries around the world\n> (OpenGL) and its
  auxiliary toolkit (GLUT). In other words, it makes\n> possible to call OpenGL/GLUT
  routines (which were written in the C\n> language) when programming in Haskell.
  You can find more info on HOpenGL\n> in my HOpenGL Tutorial site, or in its official
  site.\n\nand this:\n\n> Current Status: Some feedback indicated that the first version
  of FunGEn was not as \"functional\" as it was desired: some game issues were still
  being dealt through an imperative fashion. This way, the authors of this project
  decided to change the game engine philosophy: programmers should describe a game
  as a set of \"specifications\" rather than defining its behavior imperatively. One
  plausible alternative for accomplishing this task\n> is porting the Clean Game Library
  (CGL) to Haskell, adding some FunGEn specific features. Hence, this is the actual
  status of the FunGEn project: it is being rebuilt in order to provide game programming
  mechanisms following the CGL\n> concepts. This really demands some time, but the
  authors expect a new version to be released soon.\n> \n> ... PLEASE NOTE: this is
  the very first version of FunGEn, and it was released just to get some feedback
  from game programmers. You are strongly invited to <A HREF=\"mailto:awbf@cin.ufpe.br\">tell</A>
  your game programming experiences with FunGEn, helping us to release a definitive,
  stable version). Ok, after this disclaimer, please fell yourself free to take a
  quick tour in the site; it contains a lot of useful information for those who are
  really interested in trying a new game programming experience. Nice coding...\n\nand
  this todo list:\n\n> Here you have a list of some upcoming FunGEn features, and
  some other\n> desired features (but with no implementation prevision yet).\n> \n>
  - Support map scrolling (coming soon);\n> - Support mouse input management (coming
  soon);\n> - Make a polygon map definition avaiable (coming soon);\n> - Make sound
  avaible to non-Win32 platforms;\n> - Create, if possible, some operators to avoid
  the excessive (x <- ...) syntax;\n> - Support auto-animated objects;\n> - Create
  a GLUT independent font support (or perhaps extend it);\n> - Improve the installation
  process;\n> - Upgrade FunGEn to be both a 2D (bidimensional) and 2D 1/2 (bi and
  a half dimensional) engine;\n> - Create a map editor/generator (possibly in other
  language, or using the brand new Haskell GUI...);\n> - Take courage to start thinking
  about the 3D world...\n> \n> Would you like to suggest a feature? Feel free to do
  it. Would you like to\n> implement a feature? Please do it! Keep in touch.\n\nand
  these credits:\n\n> FunGEn was created by Andre Furtado, Computation Science graduation\n>
  student at the Informatics Center (CIn) of the Federal University of\n> Pernambuco
  (UFPE), as part of a Scientific Iniciation (PIBIC/CNPq)\n> research project (Creating
  a Game Platform Using Haskell), oriented by\n> lecturer Andre Santos (PhD, 1995,
  University of Glasgow), who was\n> responsible for figuring out a lot of FunGEn
  implementation details.\n> \n> I would like to thank also the following people who
  contributed for the development of FunGEn:\n> \n> - Sven Panne\n> - Jay Cox\n> -
  Geber Ramalho\n> - Carlos Andre Pessoa\n> - Charles Madeira\n> - Monique Monteiro\n>
  - The people at the Haskell mailing lists\n> \n> FunGEn can be distributed freely,
  in the hope that it will be useful, but\n> WITHOUT ANY WARRANTY; without even the
  implied warranty of MERCHANTABILITY\n> or FITNESS FOR A PARTICULAR PURPOSE. I would
  thank you if you cite my name\n> and this site if you are going to use FunGEn for
  other things besides home\n> programming.\n"
license-name: BSD-3-Clause
