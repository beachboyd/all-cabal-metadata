homepage: ''
changelog-type: markdown
hash: 2e2ebd7600df8ecaca8828da0285e794a56c1e50e9da6d89f9d7f3b3180fe45c
test-bench-deps: {}
maintainer: isfeldt@kth.se
synopsis: Generate Haskell wrappers for Futhark libraries
changelog: |
  # Changelog for futhask

  ## Unreleased changes
basic-deps:
  split: '>=0.2.3 && <0.3'
  base: '>=4.7 && <4.15'
  raw-strings-qq: ==1.1.*
  futhask: -any
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.0
author: Gusten Isfeldt
latest: 0.1.0
description-type: markdown
description: "# Futhask\nFuthask is a code generator that aims to create safe, Haskell
  friendly wrappers for Futhark libraries.\n\n## Installation\n    stack install\n\n##
  Use\n### Generate Code\n    futhask [Backend] [Futhark.h] [HaskellSourceDir] [ModuleName]\n\n####
  Example\n    futhark opencl --library myprogram.fut\n    futhask opencl myprogram.h
  src MyLibrary\n\nFor a simple example of how generated haskell code can be used,
  see [FuthaskExample](https://gitlab.com/Gusten_Isfeldt/futhaskexample)\n\n### Import
  Code\n    import [ModuleName]\n    import [ModuleName].Entries\n    \nIf using `stack`
  add `c-sources: [Futhark.c]` to the `library` section of `package.yaml`\n\n####
  OpenCL\n    extra-libraries: OpenCL \n\n#### CUDA\n    include-dirs: /opt/cuda/include\n
  \   extra-lib-dirs: /opt/cuda/lib\n    extra-libraries: cuda cudart nvrtc\n\n###
  Dependencies\n`massiv` is required for all backends.\nThe codes generated for OpenCL
  and CUDA, both refer to types from the `OpenCL` and `cuda` packages respectively.
  This is only relevant if one wants to use certain functions in the raw interface,
  but, without modification, the generated code will not compile without these dependencies.\n\n##
  Generated Code\nThe generated code can be split in two main parts, raw and wrapped.
  The raw interface is simply the C-functions wrapped in the IO-monad, providing no
  added safety and requiring manual memory management. The wrapped interface uses
  `newForeignPtr` to introduce all Futhark pointers to the GC, and provides function
  types closer to those used within Futhark, returning tuples instead of writing to
  pointers.\n\n### Context Generation\n    getContext :: [ContextOption] -> IO Context\n\nAvailable
  context options will depend on backend used.\n\n### The FT monad\nTo make the wrappers
  safe, and reduce clutter from explicitly passing around the context, the FT monad
  is introduced. The FT monad is an environment (Reader) monad that implicitly passes
  the context around as necessary. Like the ST monad, the FT monad is parameterised
  by a rigid type variable to prevent references to the context from escaping the
  monad.\n\nTo run computations, the function\n\n    runFTIn :: Context -> (forall
  c. FT c a) -> a\n\nis used. Additionally\n\n    runFTWith :: [ContextOption] ->
  (forall c. FT c a) -> a\n    runFT :: (forall c. FT c a) -> a\n\nare defined for
  convienience for cases where the context doesn't need to be reused.\n\n### Input
  and Output\nFor conversion between Futhark values and Haskell values, two classes
  are defined.\n\n    class Input fo ho where\n        toFuthark :: ho -> FT c (fo
  c) \n\n    class Output fo ho where\n        fromFuthark :: fo c -> FT c ho\n\nInstances
  of Input and Output are generated for all transparent Futhark-arrays. The Haskell
  representation is `Array S` from `Data.Massiv.Array`. The absence of functional
  dependencies in the definitions might require more explicit type signatures, but
  gives more flexibility to define new instances. For tuples of instances, functions
  on the form `fromFutharkTN`, where `N` is the tuple size, are defined.\n"
license-name: BSD-3-Clause
