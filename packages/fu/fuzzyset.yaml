homepage: https://github.com/laserpants/fuzzyset-haskell
changelog-type: ''
hash: e02a682d97adf81f0fdceee70cd345c4c49ee0d4d88692a6f35d12c79608da1a
test-bench-deps:
  base-unicode-symbols: ! '>=0.2.2.4 && <0.3'
  base: -any
  unordered-containers: ! '>=0.2.8.0'
  hspec: ! '>=2.4.4'
  text: ! '>=1.2.2.2'
  lens: ! '>=4.15.4'
  ieee754: ==0.8.0
  fuzzyset: -any
maintainer: hildenjohannes@gmail.com
synopsis: Fuzzy set for approximate string matching
changelog: ''
basic-deps:
  base-unicode-symbols: ! '>=0.2.2.4 && <0.3'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.8.0'
  text: ! '>=1.2.2.2'
  data-default: ==0.7.1.1
  lens: ! '>=4.15.4'
  text-metrics: ==0.3.0
  vector: ! '>=0.12.0.1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
author: Johannes Hildén
latest: '0.1.0.7'
description-type: markdown
description: ! "# fuzzyset-haskell [![Build Status](https://img.shields.io/travis/laserpants/fuzzyset-haskell/master.svg?style=flat)](https://travis-ci.org/laserpants/fuzzyset-haskell)
  [![License](https://img.shields.io/badge/license-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)
  [![Language](https://img.shields.io/badge/language-Haskell-yellow.svg)](https://www.haskell.org/)
  [![Hackage](https://img.shields.io/hackage/v/fuzzyset.svg)](http://hackage.haskell.org/package/fuzzyset)\n\n##
  Table of Contents\n\n* [About](#about)\n* [Install](#install)\n* [How to use](#how-to-use)\n*
  [API](#api)\n* [Examples](#examples)\n\n## About\n\nA fuzzy string set data structure
  for approximate string matching. This implementation is based on the Python and
  JavaScript libraries with the same name:\n\n* [JavaScript version](https://github.com/Glench/fuzzyset.js)\n*
  [Python version](https://github.com/axiak/fuzzyset)\n\n## Install\n\n```\ncabal
  install fuzzyset\n```\n\nFor details, see [Hackage docs](http://hackage.haskell.org/package/fuzzyset).
  This library is also available on [Stackage](https://www.stackage.org/package/fuzzyset).
  To install using [Stack](https://www.haskellstack.org/):\n\n```\nstack install fuzzyset\n```\n\n##
  How to use\n\nMake sure the `OverloadedStrings` pragma is enabled. Then there are
  just three steps:\n\n1. Create a set using one of `defaultSet`, `mkSet`, or `fromList`.\n2.
  To add entries, use `add`, `addToSet`, or `addMany`.\n3. Then query the set with
  `get`, `getOne`, or `getWithMinScore`.\n\n```\n>>> defaultSet `add` \"Jurassic Park\"
  `add` \"Terminator\" `add` \"The Matrix\" `getOne` \"percolator\"\nJust \"Terminator\"\n```\n\n```\n>>>
  defaultSet `add` \"Shaggy Rogers\" `add` \"Fred Jones\" `add` \"Daphne Blake\" `add`
  \"Velma Dinkley\" `get` \"Shaggy Jones\"\n[(0.7692307692307693,\"Shaggy Rogers\"),(0.5,\"Fred
  Jones\")]\n```\n\nSee [here](https://github.com/laserpants/fuzzyset-haskell/blob/master/README.md#examples)
  for more examples.\n\n## API\n\n### Initializing\n\n#### `mkSet :: Size -> Size
  -> Bool -> FuzzySet`\n\n* `Size` The lower bound of gram sizes to use (inclusive)\n*
  `Size`\tThe upper bound of gram sizes to use (inclusive)\n* `Bool`\tWhether to use
  Levenshtein distance to determine the score\n* `FuzzySet` An empty fuzzy string
  set\n\nInitialize a FuzzySet.\n\n#### `defaultSet :: FuzzySet`\n\nA FuzzySet with
  the following field values:\n\n```\n{ gramSizeLower  = 2\n, gramSizeUpper  = 3\n,
  useLevenshtein = True\n, exactSet       = ε\n, matchDict      = ε\n, items          =
  ε }\n```\n\n#### `fromList :: [Text] -> FuzzySet`\n\nCreate a fuzzy string set with
  entries from the given list.\n\n```\nfromList = addMany defaultSet\n```\n\n### Adding\n\n####
  `add :: FuzzySet -> Text -> FuzzySet`\n\n* `FuzzySet` Fuzzy string set to add the
  entry to\n* `Text` The new entry\n* `FuzzySet` The updated set\n\nAdd an entry to
  the set, or do nothing if a key identical to the provided value already exists in
  the set.\n\n#### `addToSet :: FuzzySet -> Text -> (FuzzySet, Bool)`\n\n* `FuzzySet`
  Fuzzy string set to add the entry to\n* `Text`\tThe new entry\n* `(FuzzySet, Bool)`
  The updated set and a boolean, which will be `True` if, and only if, the value was
  not already in the set.\n\nAdd an entry to the set and return a pair with the new
  set, and a boolean to indicate if a new entry was inserted, or not.\n\n#### `addMany
  :: FuzzySet -> [Text] -> FuzzySet`\n\n* `FuzzySet` Fuzzy string set to add the entries
  to\n* `[Text]` A list of new entries\n* `FuzzySet` A new fuzzy string set\n\nAdd
  a list of entries to the set, in one go.\n\n```\naddMany = foldr (flip add)\n```\n\n###
  Retrieving\n\n#### `get :: FuzzySet -> Text -> [(Double, Text)]`\n\n* `FuzzySet`
  The fuzzy string set to compare the string against\n* `Text` The lookup query\n*
  `[(Double, Text)]` A list of results (score and matched value pairs)\n\nTry to match
  the given string against the entries in the set, using a minimum score of 0.33.
  Return a list of results ordered by similarity score, with the closest match first.\n\n####
  `getWithMinScore :: Double -> FuzzySet -> Text -> [(Double, Text)]`\n\n* `Double`
  A minimum score\n* `FuzzySet` The fuzzy string set to compare the string against\n*
  `Text` The lookup query\n* `[(Double, Text)]` A list of results (score and matched
  value pairs)\n\nTry to match the given string against the entries in the set, and
  return a list of all results with a score greater than or equal to the specified
  minimum score (i.e., the first argument). The results are ordered by similarity
  score, with the closest match first.\n\n#### `getOne :: FuzzySet -> Text -> Maybe
  Text`\n\n* `FuzzySet` The fuzzy string set to compare the string against\n* `Text`
  The lookup query\n* `Maybe Text` Return `Just` the result, if a match was found,
  otherwise `Nothing`\n\nTry to match the given string against the entries in the
  set, and return the closest match, if one is found.\n\n### Inspecting\n\nThere are
  also a few functions to inspect the set.\n\n#### `size :: FuzzySet -> Int`\n\nReturn
  the number of entries in the set.\n\n```\n>>> size (defaultSet `add` \"map\" `add`
  \"cap\")\n2\n```\n\n#### `isEmpty :: FuzzySet -> Bool`\n\nReturn a boolean to indicate
  whether the set is empty.\n\n```\n>>> isEmpty (fromList [])\nTrue\n```\n\n#### `values
  :: FuzzySet -> [Text]`\n\nReturn the elements of the set.\n\n```\n>>> values (fromList
  [\"bass\", \"craze\", \"space\", \"lace\", \"daze\", \"haze\", \"ace\", \"maze\"])\n[\"space\",\"daze\",\"bass\",\"maze\",\"ace\",\"craze\",\"lace\",\"haze\"]\n```\n\n##
  Examples\n\n```\n{-# LANGUAGE OverloadedStrings #-}\nmodule Main where\n\nimport
  Data.FuzzySet\n\nstates = [ \"Alabama\"        , \"Alaska\"         , \"American
  Samoa\"            , \"Arizona\"       , \"Arkansas\"\n         , \"California\"
  \    , \"Colorado\"       , \"Connecticut\"               , \"Delaware\"      ,
  \"District of Columbia\"\n         , \"Florida\"        , \"Georgia\"        , \"Guam\"
  \                     , \"Hawaii\"        , \"Idaho\"\n         , \"Illinois\"       ,
  \"Indiana\"        , \"Iowa\"                      , \"Kansas\"        , \"Kentucky\"\n
  \        , \"Louisiana\"      , \"Maine\"          , \"Maryland\"                  ,
  \"Massachusetts\" , \"Michigan\"\n         , \"Minnesota\"      , \"Mississippi\"
  \   , \"Missouri\"                  , \"Montana\"       , \"Nebraska\"\n         ,
  \"Nevada\"         , \"New Hampshire\"  , \"New Jersey\"                , \"New
  Mexico\"    , \"New York\"\n         , \"North Carolina\" , \"North Dakota\"   ,
  \"Northern Marianas Islands\" , \"Ohio\"          , \"Oklahoma\"\n         , \"Oregon\"
  \        , \"Pennsylvania\"   , \"Puerto Rico\"               , \"Rhode Island\"
  \ , \"South Carolina\"\n         , \"South Dakota\"   , \"Tennessee\"      , \"Texas\"
  \                    , \"Utah\"          , \"Vermont\"\n         , \"Virginia\"
  \      , \"Virgin Islands\" , \"Washington\"                , \"West Virginia\"
  , \"Wisconsin\"\n         , \"Wyoming\" ]\n\nstatesSet = fromList states\n\nmain
  = mapM_ print (get statesSet \"Burger Islands\")\n```\n\nThe output of this program
  is:\n\n```\n(0.7142857142857143,\"Virgin Islands\")\n(0.5714285714285714,\"Rhode
  Island\")\n(0.44,\"Northern Marianas Islands\")\n(0.35714285714285715,\"Maryland\")\n```\n\nUsing
  the same definition of `statesSet` from previous example:\n\n```\n>>> get statesSet
  \"Why-oh-me-ing\"\n[(0.5384615384615384,\"Wyoming\")]\n\n>>> get statesSet \"Connect
  a cat\"\n[(0.6923076923076923,\"Connecticut\")]\n\n>>> get statesSet \"Transylvania\"\n[(0.75,\"Pennsylvania\"),(0.3333333333333333,\"California\"),(0.3333333333333333,\"Arkansas\"),(0.3333333333333333,\"Kansas\")]\n\n>>>
  get statesSet \"CanOfSauce\"\n[(0.4,\"Kansas\")]\n\n>>> get statesSet \"Alaska\"\n[(1.0,\"Alaska\")]\n\n>>>
  get statesSet \"Alaskanbraskansas\"\n[(0.47058823529411764,\"Arkansas\"),(0.35294117647058826,\"Kansas\"),(0.35294117647058826,\"Alaska\"),(0.35294117647058826,\"Alabama\"),(0.35294117647058826,\"Nebraska\")]\n```\n"
license-name: BSD3
