homepage: https://notabug.org/fr33domlover/funbot-git-hook/
changelog-type: text
hash: 7e064f06371f758c3e5e6a1d6aaa68bc7f75943c4e6fa89dd43461a3544f545f
test-bench-deps: {}
maintainer: fr33domlover@riseup.net
synopsis: Git hook which sends events to FunBot.
changelog: ! "If you have a local clone of the repository, you can see a detailed
  list of\nchanges using:\n\n  $ git log\n\nThere is also a web interface in NotABug
  which can display commit history.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  hit: ! '>=0.6.3'
  text: -any
  filepath: -any
  utf8-string: ! '>=1'
  funbot-ext-events: -any
  network-uri: ! '>=2.6'
  funbot-client: -any
  template: ! '>=0.2'
  directory: -any
all-versions:
- '0.1'
author: fr33domlover
latest: '0.1'
description-type: markdown
description: ! "# funbot-git-hook\n\nThis is a program to use as a Git post-receive
  hook, which collects new commits\nand tags made in the Git push, and reports them
  to a running instance of\n[FunBot][funbot], so that the bot can announce the event
  to IRC.\n\n[funbot]: https://notabug.org/fr33domlover/funbot\n\nSee below for usage
  instructions.\n\nThe official download location is the Git repository:\n\n<https://notabug.org/fr33domlover/funbot-git-hook.git>\n\nOccasionally,
  releases are made to Hackage, the Haskell package repository.\nSee <http://hackage.haskell.org/package/funbot-git-hook>.\n\nThis
  software is free software, and is committed to software freedom. It is\nreleased
  to the public domain using the CC0 Public Domain Dedication. For the\nboring \"legal\"
  details see the file `COPYING`.\n\nSee the file `INSTALL` for hints on installation.
  The file `ChangeLog` explains\nhow to see the history log of the changes done in
  the code. `NEWS` provides a\nfriendly overview of the changes for each release.\n\n##
  Usage Instructions\n\n### Quickstart\n\nIf you feel you already know the details
  and just want to get the hook working\nquickly, here's a usage example you can adapt
  to your needs. If these quick\ninstructions are al familiar, great! Otherwise, there
  is a detailed guide in\nthe next section.\n\nThe commands below assume manual management
  of git config and hooks for the\nserver. If you prefer to use Gitolite's features
  instead, check the Gitolite\nwebsite or read the hints provided in the next sections.\n\nOn
  the machine where you build the hook program:\n\n    $ sudo add-apt-repository ppa:hvr/ghc\n
  \   $ sudo apt-get update\n    $ sudo apt-get install cabal-install-1.22 ghc-7.8.4\n
  \   $ echo 'export PATH=~/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.8.4/bin:$PATH'
  >> ~/.bashrc\n    $ PATH=~/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.8.4/bin:$PATH\n
  \   $ cabal update\n    $ cd /home/joe\n\nIf you're using git master:\n\n    $ git
  clone https://notabug.org/fr33domlover/funbot-git-hook.git\n    $ cd funbot-git-hook\n
  \   $ cabal sandbox init\n    $ cabal install --only-dependencies\n    $ cabal build\n\nIf
  you're using the Hackage release:\n\n    $ mkdir funbot-sandbox\n    $ cd funbot-sandbox\n
  \   $ cabal sandbox init\n    $ cabal install funbot-git-hook\n\nNow copy `dist/build/funbot-client-post-receive/funbot-client-post-receive`
  to\nthe server as `/var/lib/gitserver/repos/myrepo.git/hooks/post-receive`.\n\nOn
  the git server machine:\n\n    # su - git\n    $ git config --global funbot.commit-url-template
  'http://git.rel4tion.org/?p=${repo}.git;a=commitdiff;h=${commit}'\n    $ cd repos/myrepo.git\n
  \   $ git config --local funbot.owner johndoe\n    $ git config --local funbot.bot-url
  'http://bot.rel4tion.org/client'\n\nRun `ldd funbot-client-post-receive` (on the
  binary) and make sure the listed\nlibraries are installed.\n\n### Intro\n\nSome
  development platforms, such as Gogs and GitLab, have web hook support.\nFunBot supports
  the web hook data formats of some of them, and then this\npackage isn't needed.
  But some platforms are perhaps not supported by FunBot\nyet. And some are simple
  git servers which perhaps don't have web hooks at all,\nfor example Gitolite. For
  these cases, `funbot-git-hook` provides the ability\nto report events to a FunBot
  instance.\n\nI expect that Gitolite will be the primary use case of this package,
  and the\ninstructions below explain both the general case, and specific hints for\nGitolite
  server admins.\n\n### Git Server\n\nSuppose you have a git server with repositories
  placed under\n`/var/lib/gitserver/repos`, and they are bare repos. There is a system
  user\nnamed `git` whose home directory is `/var/lib/gitserver`. We'd like to add
  a\ngit hook to a repo named `myrepo`, whose path would be\n`/var/lib/gitserver/repos/myrepo.git`.\n\n###
  Git Config\n\nThe hook program takes its parameters from the git config. It checks
  both in\nthe global user config and in the repo-specific config.\n\nThe following
  config options are used:\n\n`funbot.commit-url-template`\n\nWhen FunBot announces
  a commit, it specifies a URL meant to refer to a web page\nshowing commit details.
  For example, if you use Gitolite, you probably use\n*gitweb* or *cgit* to generate
  a web interface for browsing the repos. This\nconfig option allows you to specify
  a template for that URL. The template\ncontains 3 variables, which will be inserted
  by the hook program when it runs:\n\n1. `repo` : the repository name, without a
  `.git` suffix\n2. `branch` : name of the branch the commit belongs to\n3. `commit`
  : commit reference in the form of a SHA hash\n\nYour template doesn't have to include
  all 3. Use the ones you need.\n\nVariables in the template are specified like `$var`
  or like `${var}`. Use `$$`\nto get a literal `$` character. For example, this works
  with gitweb:\n\n    http://git.rel4tion.org/?p=${repo}.git;a=commitdiff;h=${commit}\n\nThis
  config option is optional. If you don't specify it, an empty URL will be\nassumed.
  You'll probably want to specify it in the global config\n(`~/.gitconfig`), since
  on a single git server instance your repos most likely\nshare the same template.\n\n
  \   # su - git\n    $ git config --global funbot.commit-url-template 'http://git.rel4tion.org/?p=${repo}.git;a=commitdiff;h=${commit}'\n\nIf
  you use Gitolite, you can set it globally for all the repos in your\n`gitolite.conf`
  like this:\n\n    repo @all\n        config funbot.commit-url-template = \"http://git.rel4tion.org/?p=${repo}.git;a=commitdiff;h=${commit}\"\n\nNote
  that by default Gitolite will refuse to accept this config line because\nthe value
  contains a character considered unsafe, `$`. See the Gitolite config\nfor more info
  and instructions how to safely allow `$` to be used.\n\n`funbot.owner`\n\nFunBot
  maintains a list of repositories, and configuration for announcing their\nevents.
  For example, to which IRC channel should your repo's commits be\nannounced? For
  which branches? What to do if a large amount of commits are\npushed at once? FunBot
  keeps this information. When a commit is reported to it,\nit needs to go to these
  records, find your repo's name and fetch the\nconfigurations for it. But since different
  people and servers may have repos\nwith identical name, FunBot uses two things to
  identify and find a repo in its\nrecords:\n\n1. The repo name\n2. A repo owner string,
  i.e. a username of a person responsible for the repo\n\nThis config option allows
  you to specify the owner string. It is **required**.\nIf no owner string is found,
  nothing will be sent to FunBot. Assuming you set\nthis per-repo, you can do it like
  this on the command line:\n\n    # su - git\n    $ cd ~/repos/myrepo.git\n    $
  git config --local funbot.owner johndoe\n\nOr using Gitolite:\n\n    repo myrepo\n
  \       RW+ = johndoe\n        R   = daemon\n        config funbot.owner = johndoe\n\nThe
  first `johndoe` is matched by Gitolite against the SSH key filenames, while\nthe
  second `johndoe` is an arbitrary owner nickname you can pick. They don't\nhave to
  be identical, but it may be a good idea to keep them identical for\nconsistency,
  and for cases your web UI contains author links etc.\n\n`funbot.bot-url`\n\nFunBot
  accept events from clients through an HTTP based API. This config option\nis the
  URL at which your favorite FunBot instance accepts events. It is\n**required**.\n\nFor
  example, `http://bot.rel4tion.org/client`.\n\n### Deploying the Hook Program\n\nThere
  are several ways to deply the hook:\n\n- Build it somewhere else and copy the binary
  to the server\n- Install it on the server\n- Build it in a sandbox on the server\n-
  Run it as a script using the Haskell interpreter\n\nTechnically there could also
  be \"use a distro package\" but there is none yet.\nContributions are very welcome,
  especially for making a `deb` package for\nTrisquel.\n\nIf you're not sure which
  one to pick, I suggest the first option. Build from\nthe safety and comfort of your
  personal computer, and just copy the binary.\nThat binary *does* require some dependency
  libraries to be present, but most of\nthem are commonly available and you can use
  the `ldd` command on it to\ndetermine exactly which dependencies are needed.\n\nThe
  binary executable contains its Haskell library dependencies, so it's bigger\nthan
  a typical git hook, which is often a simple script. On my system, its size\nis 19MB.
  You can try to make it smaller by stripping symbols, if you want.\n\n#### Building
  and Deploying the Binary\n\nI'll assume the distribution used is Trisquel GNU/Linux-libre.
  The same\ncommands should probably work for other Debian-based distributions. Adapt
  to\nyour system as needed.\n\nAdd a PPA and install a basic Haskell tools (compiler,
  package\nmanager, etc.):\n\n    $ sudo add-apt-repository ppa:hvr/ghc\n    $ sudo
  apt-get update\n    $ sudo apt-get install cabal-install-1.22 ghc-7.8.4\n\nAdd `~/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.8.4/bin`
  to your `$PATH` in\n`bashrc` or similar.\n\nDownload the package index:\n\n    $
  cabal update\n\nIf you'd like to use the package release from Hackage, install it
  inside a\nfresh sandbox:\n\n    $ mkdir funbot-sandbox\n    $ cd funbot-sandbox\n
  \   $ cabal sandbox init\n    $ cabal install funbot-git-hook\n\nIf you're instead
  working with a git clone, go to the repo directory and create\na cabal sandbox:\n\n
  \   $ cd /home/joe/git-repos/funbot-git-hook\n    $ cabal sandbox init\n\nInstall
  dependency packages:\n\n    $ cabal install --only-dependencies\n\nBuild the program:\n\n
  \   $ cabal build\n\nNow `dist/build/funbot-client-post-receive/` contains a binary
  executable\n`funbot-client-post-receive`. Use `ldd` to determine which libraries
  it links\nto at runtime and make sure they are installed on the server (hopefully
  most if\nnot all of them will be available as distro packages).\n\nFinally, you
  can put the binary on the server as\n`/var/lib/gitserver/repos/myrepo.git/hooks/post-receive`.
  If you use Gitolite,\nyou can instead drop it in the `/var/lib/gitserver/local/hooks/repo-specific`\ndirectory,
  and specify it in `gitolite.conf`:\n\n    repo myrepo\n        RW+ = johndoe\n        R
  \  = daemon\n        config funbot.owner = johndoe\n        option hook.post-receive
  = funbot-client-post-receive\n\n#### Running using the Interpreter\n\nIf you want
  to do that for any reason, here's how. Install the packages from\nthe PPA on the
  server. Do the rest as the `git` user. Clone this repo if you\nhaven't yet. Instead
  of creating a sandbox, run a single\n`cabal install --only-dependencies` which will
  install the dependencies locally\nfor the `git` user.\n\nNow add `#!/usr/bin/env
  runhaskell` as the first line of `src/Main.hs`, make\nthis file executable (`chmod
  +x src/Main.hs`) and copy it to the final location\nas explained for the binary
  at the bottom of the previous section.\n\n## Bug and Patches\n\nSee [here](https://notabug.org/fr33domlover/funbot#reporting-bugs-and-suggesting-features).\n"
license-name: LicenseRef-PublicDomain
