homepage: ''
changelog-type: ''
hash: f9f952685353ceb207c39a73c86797d218bf2a085730a8af2cd6ae20a48e7202
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Combinators that allow for a more functional/monadic style of Arrow programming
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  HList: ! '>=0.2 && <0.3'
all-versions:
- '0.0'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.0'
description-type: haddock
description: ! 'If you program with Arrows you have two choices:

  Use the plain Arrow combinators, that are cumbersome to use,

  or use special Arrow syntax, that is built into all Haskell compilers

  and is still not very functional programming style.

  The arrow syntax still forces you to introduce temporary names,

  that you would not need in a functional notation.


  Where you would write things like


  > mix <<< (id &&& delay) <<< lowpass


  using plain Arrow combinators, you can now write


  > lowpass >>>= \x ->

  >    mix <<< (listen x &&& (delay <<< listen x))


  where the @(>>>=)@ resembles the monadic bind

  and allows you for shared access to an arrow result.

  Thus it can be used like a @let@.'
license-name: BSD-3-Clause
