homepage: https://github.com/fused-effects/fused-effects-lens#readme
changelog-type: markdown
hash: 635d491c98ed3319730dcf6118c219a765fef79aceb726d9f38d0765746da1b0
test-bench-deps:
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.4.1'
  fused-effects-lens: -any
  lens: ! '>=4 && <5'
  fused-effects: ! '>=0.1.2 && <1'
maintainer: patrickt@github.com
synopsis: Monadic lens combinators for fused-effects.
changelog: |
  # v0.2.0.0

  * Use `microlens` for lens primitives to enable use with other lens libraries.
  * Add explicit `forall`s to `views` and `uses`.

  # v0.1.0.0

  Initial release.
basic-deps:
  base: ! '>=4.7 && <5'
  fused-effects: ! '>=0.1.2 && <1'
  microlens: ! '>=0.4 && <1'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Patrick Thomson
latest: 0.2.0.0
description-type: markdown
description: |
  # fused-effects-lens

  This package provides an interface to the [`lens`](https://github.com/ekmett/lens) library (and other such libraries such as `microlens` and `generic-lens`) that is compatible with [`fused-effects`](https://github.com/robrix/fused-effects). The standard formulation of `lens` combinators for operating in `MonadState` contextsâ€”`use`, `.=`, et alâ€”rely on `mtl` for `MonadState` and `MonadReader`, which is not applicable to `Reader` and `State` effects.

  This package is meant to be used alongside `lens`, like so:

  ``` haskell
  import Control.Lens hiding (view, use, assign)
  import Control.Effect.Lens (view, use, assign)
  ```

  ## Example

  Given a `Context` type that we will use in a `State` effect:

  ``` haskell
  data Context = Context
    { _amount :: Int
    , _disabled :: Bool
    } deriving (Eq, Show)

  makeLenses ''Context
  ```

  We can can use the `use` combinators to extract a lens target from the current state, and `assign` to write to a field of that state:

  ``` haskell
  stateTest :: (Member (State Context) sig, Carrier sig m, Monad m) => m Int
  stateTest = do
    initial <- use amount
    amount .= (initial + 1)
    disabled .= True
    use amount
  ```

  You can find a more complete example, including one that works with multiple `State` constraints in a single computation, in the `test` directory.

  ## License

  BSD3, like `fused-effects`.
license-name: BSD-3-Clause
