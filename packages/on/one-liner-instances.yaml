homepage: https://github.com/mstksg/one-liner-instances#readme
changelog-type: markdown
hash: 2b099cc971eb60b7dad0b67d34828833ed5ee4f7279f77df5976fc6f3333cdc0
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Generics-based implementations for common typeclasses
changelog: ! 'Changelog

  =========


  Version 0.1.2.1

  ---------------


  *Apr 21, 2018*


  <https://github.com/mstksg/one-liner-instances/releases/tag/v0.1.2.1>


  *   Forgot to export *System.Random.OneLiner*!


  Version 0.1.2.0

  ---------------


  *Apr 20, 2018*


  <https://github.com/mstksg/one-liner-instances/releases/tag/v0.1.2.0>


  *   Generic instances for `Random` from the *random* package.


  Version 0.1.1.0

  ---------------


  *Feb 5, 2018*


  <https://github.com/mstksg/one-liner-instances/releases/tag/v0.1.1.0>


  *   Newtype instances actually didn''t work before!  They do now :)

  *   Added generic implementations and newtypes for `Bounded`, `Ord`, and `Eq`.

  *   Some aggressive inlining in all modules.

  *   Added clarification and comparisons to other libraries to README


  Version 0.1.0.0

  ---------------


  *Feb 3, 2018*


  **Deprecated**


  <https://github.com/mstksg/one-liner-instances/releases/tag/v0.1.0.0>


  *   Initial release


'
basic-deps:
  base: ! '>=4.7 && <5'
  one-liner: ! '>=0.9'
  random: -any
all-versions:
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
author: Justin Le
latest: '0.1.2.1'
description-type: markdown
description: ! "one-liner-instances\n===================\n\nThis package uses machinery
  from *[one-liner][]* in order to provide default\nimplementations for methods from
  `Num`, `Fractional`, `Floating`, `Semigroup`,\n`Monoid`, `Bounded`, `Eq`, `Ord`,
  and `Random`.  These will work for any types\n(deriving `Generic`) whose fields
  are all instances of that typeclass.\n\nFor `Num`, `Fractional`, `Floating`, `Semigroup`,
  and `Monoid`, the types also\nmust have only a single constructor.  `Random` methods
  offer variants with\nsingle constructors (for performance) and with multiple constructors.\n\n[one-liner]:
  https://hackage.haskell.org/package/one-liner\n\nSo, `gPlus` (generic addition)
  will work for:\n\n```haskell\ndata Tup1 a b = Tup1 a b            -- requires Num
  a, Num b\ndata Tup2 a   = Tup2 Int a          -- requires Num a, Num b\ndata Tup3
  \    = Tup3 Int Double\ndata Tup4 a b = Tup4 Int Double     -- no constraint on
  a or b\n```\n\nBut not on:\n\n```haskell\ndata Tup5 a   = Tup2 String a       --
  String is not an instance of Num\n```\n\nThese are implemented by applying the operation
  to every field.\n\nNewtype wrappers\n----------------\n\nSimilar to `WrappedMonoid`
  and `WarppedMonad` from *base*, some convenient\nnewtype wrappers are provided that
  will give free instances of `Num`, etc. for\nappropriate types:\n\nIf `a` is a data
  type (deriving `Generic`) with a single constructor whose\nfields all have instances
  of `Num`, then `GNum a` has a `Num` instance (and\nsame for `Fractional`, `Floating`,
  etc.).\n\nIf `a` is a data type (deriving `Generic`) with a single constructor whose\nfields
  all have instances of `Semigroup`, then `GMonoid a` has a `Semigroup`\ninstance
  (and same for `Monoid`).\n\nIf `a` is a data type (deriving `Generic`) whose fields
  all have instances of\n`Bounded`, then `GBounded a` has a `Bounded` instance.\n\nIf
  `a` is a data type (deriving `Generic`) whose fields all have instances of\n`Eq`,
  then `GOrd a` has a `Eq` instance (and same for\n`Ord`).\n\nComparisons\n-----------\n\nThis
  package provides very similar functionality to *[generic-deriving][]*.\n\n[generic-deriving]:
  http://hackage.haskell.org/package/generic-deriving\n\nThere are a few major design
  differences between *generic-deriving* and\n*one-liner*, the package that this one
  is built on.\n\n*generic-deriving* creates a *separate* \"deriving\" typeclass for
  every\ntypeclass one wants to generalize.  So, there is a separate `GMonoid`\ntypeclass,
  a separate `GEnum` typeclass, etc.\n\n*one-liner* instead creates a single typeclass
  (`ADTRecord` and `Constraints`)\nto unify all generalizable typeclasses.  Both the
  generic `Monoid` and generic\n`Num` instances are built upon the same `Constraints`
  typeclass.  From a\nusability standpoint, *one-liner* allows one to easily create
  generic versions\nof their own, custom typeclasses -- something that *generic-deriving*
  does not\nhelp with.\n\n*one-liner-instances*, however, is simply a package using
  the *one-liner*\nengine to provide generic instances for common classes where it
  is possible.\n\nThe main difference in practical usability between *one-liner-instances*
  and\n*generic-deriving* themselves are few, but are mainly:\n\n*   *one-liner-instances*
  has generic implementations for\n    `Num`/`Fractional`/`Floating`, and *generic-deriving*
  doesn't.  This is a\n    superficial difference, however, since nothing fundamental
  is preventing\n    *generic-deriving* from adding them in the future.\n*   *one-liner-instances*
  provides newtype wrappers that can automatically\n    imbue appropriate types with
  instances, which can be used with the upcoming\n    [DerivingVia][] syntax to automatically
  derive instances, or just used on\n    their own for convenience purposes.\n\n    *generic-deriving*
  does not aim to do this at this moment.\n*   Integrates with the rest of the *one-liner*
  ecosystem, if one is already\n    using it to provide constraints for custom typeclasses.\n\n[DerivingVia]:
  https://twitter.com/Iceland_jack/status/959923603096719360\n"
license-name: BSD3
