homepage: https://github.com/s9gf4ult/one-time-password
changelog-type: markdown
hash: 9da17e88b6e57282cd436d2eb9a7683385dd4b594d45930d46f7215c2a964f39
test-bench-deps:
  bytestring: -any
  base: ! '>=3 && <5'
  time: ! '>=1.1'
  cryptonite: -any
  tasty-hunit: -any
  tasty: -any
  one-time-password: -any
maintainer: s9gf4ult@gmail.com <Aleksey Uimanov>
synopsis: HMAC-Based and Time-Based One-Time Passwords
changelog: ! "# CHANGELOG\n\n## 2.0.0\n### Changed\n* Change versioning to semver\n*
  Use `cryptonite` instead of deprecated `cryptohash` (broken backwards\n  compatibility)\n\n##
  1.0.0.1\n\n* Documentation typos fixed\n\n## 1.0.0.0\n\n* Forked from OTP (https://github.com/matshch/OTP)\n*
  Rewrote with `cryptohash`\n* Add multiple hash functions support\n* Tests improoved:
  all RFC test verctors passed\n"
basic-deps:
  cereal: -any
  bytestring: -any
  base: ! '>=3 && <5'
  time: ! '>=1.1'
  memory: -any
  cryptonite: -any
all-versions:
- 1.0.0.0
- 1.0.0.1
- 2.0.0
author: Artem Leshchev, Aleksey Uimanov
latest: 2.0.0
description-type: markdown
description: ! "# What\n\nOne time password implementation according to RFC4226 and
  RFC6238 in\nHaskell.\n\n# Generation passwords\n\nIf you need to generate HOTP password
  described in RFC4226, then use\n\n```haskell\n>>> hotp SHA1 \"1234\" 100 6\n317569\n\n>>>
  hotp SHA512 \"1234\" 100 6\n134131\n```\n\nOr\n\n```haskell\n>>> totp SHA1 \"1234\"
  (read \"2010-10-10 00:01:00 UTC\") 30 8\n43388892\n```\n\nto generate TOTP password
  described in RFC6238.\n\n# Checking passwords\n\n```haskell\nhotpCheck :: (HashAlgorithm
  a)\n          => a                  -- ^ Hashing algorithm\n          -> ByteString
  \        -- ^ Shared secret\n          -> (Word64, Word64)   -- ^ how much counters
  to take lower and higher than ideal\n          -> Word64             -- ^ ideal
  (expected) counter value\n          -> Word               -- ^ Number of digits
  in password\n          -> Word32             -- ^ Password entered by user\n          ->
  Bool               -- ^ True if password acceptable\n```\n\n```haskell\n>>> hotpCheck
  SHA1 \"1234\" (0,0) 10 6 50897\nTrue\n\n>>> hotpCheck SHA1 \"1234\" (0,0) 9 6 50897\nFalse\n\n>>>
  hotpCheck SHA1 \"1234\" (0,1) 9 6 50897\nTrue\n```\n\nHere almost the same aguments
  as for `hotp` function, but there is\nalso `(0, 0)` tuple. This tuple describes
  range of counters to check\nin case of desynchronisation of counters between client
  and\nserver. I.e. if you specify `(1, 1)` and ideal counter will be `10`\nthen function
  will check passwords for `[9, 10, 11]` list of\ncounters.\n\nThere is also some
  protection, so if you specify `(minBound,\nmaxBound)` then function will check just
  1000 counters around ideal.\n\nHere is the same for TOTP:\n\n```haskell\n>>> totpCheck
  SHA1 \"1234\" (0, 0) (read \"2010-10-10 00:00:00 UTC\") 30 6 778374\nTrue\n\n>>>
  totpCheck SHA1 \"1234\" (0, 0) (read \"2010-10-10 00:00:30 UTC\") 30 6 778374\nFalse\n\n>>>
  totpCheck SHA1 \"1234\" (1, 0) (read \"2010-10-10 00:00:30 UTC\") 30 6 778374\nTrue\n```\n"
license-name: MIT
