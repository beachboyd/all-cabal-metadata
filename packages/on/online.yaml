homepage: https://github.com/tonyday567/online#readme
changelog-type: ''
hash: 8c6cb9757396e34845e6fd0c645ab85874142400db5ec644596e6ec286e2a1e4
test-bench-deps:
  base: ! '>=4.7 && <5'
  doctest: -any
  protolude: -any
  tasty: -any
maintainer: tonyday567@gmail.com
synopsis: online statistics
changelog: ''
basic-deps:
  tdigest: -any
  online: -any
  optparse-generic: -any
  base: ! '>=4.7 && <5'
  numhask-prelude: -any
  text: -any
  protolude: -any
  perf: -any
  formatting: -any
  foldl: -any
  vector-algorithms: -any
  scientific: -any
  vector: -any
all-versions:
- '0.2.0'
- '0.2.1.0'
- '0.2.2.0'
author: Tony Day
latest: '0.2.2.0'
description-type: markdown
description: ! "[online](https://github.com/tonyday567/online)\n==============================================\n\n[![Build\nStatus](https://travis-ci.org/tonyday567/online.svg)](https://travis-ci.org/tonyday567/online)\n[![Hackage](https://img.shields.io/hackage/v/online.svg)](https://hackage.haskell.org/package/online)\n[![lts](https://www.stackage.org/package/online/badge/lts)](http://stackage.org/lts/package/online)\n[![nightly](https://www.stackage.org/package/online/badge/nightly)](http://stackage.org/nightly/package/online)\n\nonline
  turns a statistic (in haskell this can usually be thought of as a\nfold of a foldable)
  into an online algorithm.\n\nmotivation\n==========\n\nImagine a data stream, like
  an ordered indexed container or a\ntime-series of measurements. An exponential moving
  average can be\ncalculated as a repeated iteration over a stream of xs:\n\n$$ ema_t
  = ema_{t-1} * 0.9 + x_t * 0.1 $$\n\nThe 0.1 is akin to the learning rate in machine
  learning, or 0.9 can be\nthought of as a decaying or a rate of forgetting. An exponential
  moving\naverage learns about what the value of x has been lately, where lately\nis,
  on average, about 1/0.1 = 10 x's ago. All very neat.\n\nThe first bit of neat is
  speed. There's 2 times and a plus. The next is\nspace: an ema is representing the
  recent xs in a size as big as a single\nx. Compare that with a simple moving average
  where you have to keep the\nhistory of the last n xs around to keep up (just try
  it).\n\nIt's so neat, it's probably a viable monoidal category all by itself.\n\nonline\n======\n\nHaskell
  allows us to abstract the compound ideas in an ema and create\npolymorphic routines
  over a wide variety of statistics, so that they all\nretain these properties of
  speed, space and rigour.\n\n    av xs = L.fold (online identity (.* 0.9)) xs\n    --
  av [0..10] == 6.030559401413827\n    -- av [0..100] == 91.00241448887785\n\n`online
  identity (.* 0.9)` is how you express an ema with a decay rate\nof 0.9.\n\nonline
  works for any statistic. Here's the construction of standard\ndeviation using applicative
  style:\n\n    std :: Double -> L.Fold Double Double\n    std r = (\\s ss -> sqrt
  (ss - s**2)) <$> ma r <*> sqma r\n      where\n        ma r = online identity (.*r)\n
  \       sqma r = online (**2) (.*r)\n\n[perf](https://hackage.haskell.org/package/perf)\n================================================\n\n1
  cycle = 0.4 nanoseconds.\n\n    sum to 1,000\n    run                       first
  \    2nd     3rd     4th     5th  40th %\n    sumInt [0..]            6.064e3 1.746e3
  1.560e3 1.540e3 1.626e3  1.544e3 cycles\n    sumDouble [0..]         7.835e5 3.032e5
  3.104e5 2.837e5 3.051e5  8.957e4 cycles\n    sumPoly [0..]           1.139e5 7.660e4
  7.638e4 7.648e4 7.636e4  7.674e4 cycles\n    sum Int                 1.601e4 1.186e4
  1.167e4 1.158e4 1.176e4  1.168e4 cycles\n    sum Double              2.756e4 1.189e4
  1.158e4 1.163e4 1.158e4  1.159e4 cycles\n    sum Poly                1.170e4 1.172e4
  1.163e4 1.166e4 1.158e4  1.164e4 cycles\n    fold sum                1.177e4 1.174e4
  1.178e4 1.185e4 1.177e4  1.175e4 cycles\n    fold av                 2.935e4 1.190e4
  1.181e4 1.182e4 1.177e4  1.181e4 cycles\n    fold ma                 1.289e4 1.202e4
  1.205e4 1.203e4 1.206e4  1.201e4 cycles\n    fold std                2.052e5 1.210e5
  7.236e5 1.364e5 1.348e5  1.324e5 cycles\n    fold maL1               8.218e4 1.192e5
  1.052e5 2.567e5 1.168e5  7.856e4 cycles\n    fold absmaL1            3.405e5 5.966e4
  5.976e4 6.025e4 5.939e4  5.975e4 cycles\n\nrecipe\n======\n\n    stack build --test
  --exec \"$(stack path --local-install-root)/bin/online-bench\" --exec \"$(stack
  path --local-bin)/pandoc -f markdown -i other/header.md other/readme_.md other/footer.md
  -t html -o index.html --filter pandoc-include --mathjax\" --exec \"$(stack path
  --local-bin)/pandoc -f markdown -i other/readme_.md -t markdown -o readme.md --filter
  pandoc-include --mathjax\" --file-watch\n"
license-name: BSD3
