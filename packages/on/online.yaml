homepage: https://github.com/tonyday567/online#readme
changelog-type: ''
hash: eb556a00cee0ff1223d9258f12b50bed561c19453764f3af25142b0baaf62c7e
test-bench-deps:
  online: -any
  base: ! '>=4.7 && <5'
  doctest: -any
  protolude: -any
  tasty: -any
maintainer: tonyday567@gmail.com
synopsis: online statistics
changelog: ''
basic-deps:
  tdigest: -any
  numhask: -any
  online: -any
  optparse-generic: -any
  base: ! '>=4.7 && <5'
  text: -any
  protolude: -any
  perf: -any
  formatting: -any
  foldl: -any
  vector-algorithms: -any
  scientific: -any
  vector: -any
all-versions:
- '0.2.0'
- '0.2.1.0'
author: Tony Day
latest: '0.2.1.0'
description-type: markdown
description: ! "[online](https://github.com/tonyday567/online)\n==============================================\n\n[![Build\nStatus](https://travis-ci.org/tonyday567/online.svg)](https://travis-ci.org/tonyday567/online)\n[![Hackage](https://img.shields.io/hackage/v/online.svg)](https://hackage.haskell.org/package/online)\n[![lts](https://www.stackage.org/package/online/badge/lts)](http://stackage.org/lts/package/online)\n[![nightly](https://www.stackage.org/package/online/badge/nightly)](http://stackage.org/nightly/package/online)\n\nonline
  turns a statistic (in haskell this can usually be thought of as a\nfold of a foldable)
  into an online algorithm.\n\nmotivation\n==========\n\nImagine a data stream, like
  an ordered indexed container or a\ntime-series of measurements. An exponential moving
  average can be\ncalculated as a repeated iteration over a stream of xs:\n\n$$ ema_t
  = ema_{t-1} * 0.9 + x_t * 0.1 $$\n\nThe 0.1 is akin to the learning rate in machine
  learning, or 0.9 can be\nthought of as a decaying or a rate of forgetting. An exponential
  moving\naverage learns about what the value of x has been lately, where lately\nis,
  on average, about 1/0.1 = 10 x's ago. All very neat.\n\nThe first bit of neat is
  speed. There's 2 times and a plus. The next is\nspace: an ema is representing the
  recent xs in a size as big as a single\nx. Compare that with a simple moving average
  where you have to keep the\nhistory of the last n xs around to keep up (just try
  it).\n\nIt's so neat, it's probably a viable monoidal category all by itself.\n\nonline\n======\n\nHaskell
  allows us to abstract the compound ideas in an ema and create\npolymorphic routines
  over a wide variety of statistics, so that they all\nretain these properties of
  speed, space and rigour.\n\n    av xs = L.fold (online identity (.* 0.9)) xs\n    --
  av [0..10] == 6.030559401413827\n    -- av [0..100] == 91.00241448887785\n\n`online
  identity (.* 0.9)` is how you express an ema with a decay rate\nof 0.9.\n\nonline
  works for any statistic. Here's the construction of standard\ndeviation using applicative
  style:\n\n    std :: Double -> L.Fold Double Double\n    std r = (\\s ss -> sqrt
  (ss - s**2)) <$> ma r <*> sqma r\n      where\n        ma r = online identity (.*r)\n
  \       sqma r = online (**2) (.*r)\n\n[perf](https://hackage.haskell.org/package/perf)\n================================================\n\n1
  cycle = 0.4 nanoseconds.\n\n    sum to 1,000\n    run                       first
  \    2nd     3rd     4th     5th  40th %\n    sumInt [0..]             8.69e3  1.59e3
  \ 1.54e3  1.60e3  1.64e3 1.57e3 cycles\n    sumDouble [0..]          3.00e5  2.82e5
  \ 3.27e5  2.99e5  2.61e5 9.38e4 cycles\n    sumPoly [0..]            9.34e4  1.05e5
  \ 1.09e5  1.18e5  1.64e5 7.81e4 cycles\n    sum Int                  1.67e4  1.17e4
  \ 1.16e4  1.17e4  1.16e4 1.17e4 cycles\n    sum Double               2.63e4  1.18e4
  \ 1.17e4  1.16e4  1.16e4 1.16e4 cycles\n    sum Poly                 1.28e4  1.18e4
  \ 1.17e4  1.17e4  1.18e4 1.17e4 cycles\n    fold sum                 1.23e4  1.19e4
  \ 1.18e4  1.17e4  1.18e4 1.18e4 cycles\n    fold av                  1.23e4  1.18e4
  \ 1.18e4  1.18e4  1.18e4 1.18e4 cycles\n    fold ma                  1.24e4  1.19e4
  \ 1.20e4  1.19e4  1.19e4 1.19e4 cycles\n    fold std                 2.04e5  1.15e5
  \ 6.14e5  1.16e5  1.16e5 1.12e5 cycles\n    fold maL1                9.11e4  8.32e4
  \ 1.27e5  3.34e5  1.04e5 1.02e5 cycles\n    fold absmaL1             6.82e4  6.71e4
  \ 6.64e4  6.66e4  2.97e5 6.65e4 cycles\n\nrecipe\n======\n\n    stack build --test
  --exec \"$(stack path --local-install-root)/bin/online-bench\" --exec \"$(stack
  path --local-bin)/pandoc -f markdown -i other/header.md other/readme_.md other/footer.md
  -t html -o index.html --filter pandoc-include --mathjax\" --exec \"$(stack path
  --local-bin)/pandoc -f markdown -i other/readme_.md -t markdown -o readme.md --filter
  pandoc-include --mathjax\" --file-watch\n"
license-name: BSD3
