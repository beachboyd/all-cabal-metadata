homepage: https://github.com/ofmooseandmen/jord
changelog-type: markdown
hash: e7e648395fa287e8445baa70e9b4e63a793ed11f48cbdd649d95295ccac8db3b
test-bench-deps:
  base: ! '>=4.9 && <5'
  hspec: ==2.*
  HUnit: ==1.6.*
  jord: -any
maintainer: Cedric Liegeois <ofmooseandmen@yahoo.com>
synopsis: Geographical Position Calculations
changelog: ! "### 0.3.1.0\r\n\r\n- Added ECEF position\r\n- Added Frames (Body, Local,
  North East Down)\r\n- Added delta and target from position(s), frame and earth model\r\n-
  Added earth models (WGS84, WGS72, GRS80 and derived spherical models)\r\n- Builds
  against LTS 12.2 (GHC 8.4.3) and LTS 11.18 (GHC 8.2.2)\r\n\r\n### 0.2.0.0\r\n\r\n-
  GeoPos -> LatLong\r\n- Split Position from GreatCircle\r\n- require base >= 4.9\r\n\r\n###
  0.1.0.0\r\n\r\n- Initial version\r\n"
basic-deps:
  haskeline: ! '>=0.7 && <0.8'
  base: ! '>=4.9 && <5'
  jord: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
author: Cedric Liegeois
latest: '0.3.1.0'
description-type: markdown
description: ! "# Jord - Geographical Position Calculations\r\n\r\n[![travis build
  status](https://img.shields.io/travis/ofmooseandmen/jord/master.svg?label=travis+build)](https://travis-ci.org/ofmooseandmen/jord)\r\n[![Hackage](https://img.shields.io/hackage/v/jord.svg)](http://hackage.haskell.org/package/jord)\r\n[![license](https://img.shields.io/badge/license-BSD3-lightgray.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n\r\n>
  __Jord__ [_Swedish_] is __Earth__ [_English_]\r\n\r\n## What is this?\r\n\r\nJord
  is a [Haskell](https://www.haskell.org) library that implements various geographical
  position calculations using the algorithms described in [Gade, K. (2010). A Non-singular
  Horizontal Position Representation](http://www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf).\r\n\r\n-
  Transformation between ECEF (earth-centred, earth-fixed), Latitude/Longitude and
  N-Vector positions for spherical and ellipsoidal earth model\r\n- Transformation
  between Latitude/Longitude and N-Vector positions\r\n- Local, Body and North, East,
  Down Frames: delta between positions, target position from reference position and
  delta\r\n- surface distance, initial & final bearing, interpolated position, great
  circle intersections, cross track distance, ...\r\n\r\n## How do I build it?\r\n\r\nIf
  you have [Stack](https://docs.haskellstack.org/en/stable/README/),\r\nthen:\r\n```sh\r\n$
  stack build --test\r\n```\r\n\r\n## How do I use it?\r\n\r\n[See documentation on
  Hackage](http://hackage.haskell.org/package/jord/docs/Data-Geo-Jord.html)\r\n\r\n```haskell\r\nimport
  Data.Geo.Jord\r\n\r\n-- Delta between positions in frameL\r\nlet p1 = decimalLatLongHeight
  1 2 (metres (-3))\r\nlet p2 = decimalLatLongHeight 4 5 (metres (-6))\r\nlet w =
  decimalDegrees 5 -- wander azimuth\r\ndeltaBetween p1 p2 (frameL w) wgs84 -- = deltaMetres
  359490.579 302818.523 17404.272\r\n\r\n-- destination position from 531914N0014347W
  having travelled 500Nm on a heading of 96.0217°\r\n-- using mean earth radius derived
  from the WG84 ellipsoid\r\ndestination (readLatLong \"531914N0014347W\") (decimalDegrees
  96.0217) (nauticalMiles 500) r84\r\n\r\n-- surface distance between 54°N,154°E and
  its antipodal position\r\n-- using mean earth radius derived from the WG84 ellipsoid\r\nlet
  p = decimalLatLong 54 154\r\nsurfaceDistance p (antipode p) r84\r\n```\r\n\r\nJord
  comes with a REPL (built with [haskeline](https://github.com/judah/haskeline)):\r\n\r\n```sh\r\n$
  jord-exe\r\njord> finalBearing (destination (antipode 54°N,154°E) 54° 1000m) 54°N,154°E\r\njord>
  angle: 126°0'0.0\" (126.0)\r\n```\r\n"
license-name: BSD3
