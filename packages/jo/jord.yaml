homepage: https://github.com/ofmooseandmen/jord
changelog-type: markdown
hash: 5d75bb111f2f734ae4e1e5cc25b5f345f83e65b168a3e9218f3e238eb0811b67
test-bench-deps:
  base: ! '>=4.9 && <5'
  hspec: ==2.*
  HUnit: ==1.6.*
  jord: -any
maintainer: Cedric Liegeois <ofmooseandmen@yahoo.com>
synopsis: Geographical Position Calculations
changelog: ! "### 0.4.2.0\r\n\r\n- Fixed intercept\r\n- jord-exe renamed jord-repl\r\n\r\n###
  0.4.1.0\r\n\r\n- Fixed interceptBySpeed\r\n- Nautical miles symbol is \"nm\"\r\n-
  REPL: intercept for intercept, interceptBySpeed and interceptByTime\r\n- REPL: show
  length and speed in user selected unit\r\n\r\n### 0.4.0.0\r\n\r\n- Added ECEF, frames
  and delta to REPL\r\n- Added Speed\r\n- Added Duration\r\n- Added Kinematics: course,
  position, CPA and intercept\r\n\r\n### 0.3.1.0\r\n\r\n- Added ECEF position\r\n-
  Added Frames (Body, Local, North East Down)\r\n- Added delta and target from position(s),
  frame and earth model\r\n- Added earth models (WGS84, WGS72, GRS80 and derived spherical
  models)\r\n- Builds against LTS 12.2 (GHC 8.4.3) and LTS 11.18 (GHC 8.2.2)\r\n\r\n###
  0.2.0.0\r\n\r\n- GeoPos -> LatLong\r\n- Split Position from GreatCircle\r\n- require
  base >= 4.9\r\n\r\n### 0.1.0.0\r\n\r\n- Initial version\r\n"
basic-deps:
  haskeline: ! '>=0.7 && <0.8'
  base: ! '>=4.9 && <5'
  jord: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
author: Cedric Liegeois
latest: '0.4.2.0'
description-type: markdown
description: ! "# Jord - Geographical Position Calculations\r\n\r\n[![travis build
  status](https://img.shields.io/travis/ofmooseandmen/jord/master.svg?label=travis+build)](https://travis-ci.org/ofmooseandmen/jord)\r\n[![Hackage](https://img.shields.io/hackage/v/jord.svg)](http://hackage.haskell.org/package/jord)\r\n[![license](https://img.shields.io/badge/license-BSD3-lightgray.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n\r\n>
  __Jord__ [_Swedish_] is __Earth__ [_English_]\r\n\r\n## What is this?\r\n\r\nJord
  is a [Haskell](https://www.haskell.org) library that implements various geographical
  position calculations using the algorithms described in [Gade, K. (2010). A Non-singular
  Horizontal Position Representation](http://www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf)
  and in\r\n[Shudde, Rex H. (1986). Some tactical algorithms for spherical geometry](https://calhoun.nps.edu/bitstream/handle/10945/29516/sometacticalalgo00shud.pdf):\r\n\r\n-
  transformation between ECEF (earth-centred, earth-fixed), latitude/longitude and
  [*n*-vector](https://www.navlab.net/nvector) positions for spherical and ellipsoidal
  earth model,\r\n- transformation between latitude/longitude and *n*-vector positions,\r\n-
  local, body and north, east, down Frames: delta between positions, target position
  from reference position and delta,\r\n- geodetics: surface distance, initial & final
  bearing, interpolated position, great circle intersections, cross track distance,
  ...,\r\n- kinematics: position from p0, bearing and speed, closest point of approach
  between tracks, intercept (time, speed, minimum speed).\r\n\r\n## How do I build
  it?\r\n\r\nIf you have [Stack](https://docs.haskellstack.org/en/stable/README/),\r\nthen:\r\n```sh\r\n$
  stack build --test\r\n```\r\n\r\n## How do I use it?\r\n\r\n[See documentation on
  Hackage](http://hackage.haskell.org/package/jord/docs/Data-Geo-Jord.html)\r\n\r\n```haskell\r\nimport
  Data.Geo.Jord\r\n\r\n-- Delta between positions in frameL\r\nlet p1 = decimalLatLongHeight
  1 2 (metres (-3))\r\nlet p2 = decimalLatLongHeight 4 5 (metres (-6))\r\nlet w =
  decimalDegrees 5 -- wander azimuth\r\ndeltaBetween p1 p2 (frameL w) wgs84 -- deltaMetres
  359490.579 302818.523 17404.272\r\n\r\n-- destination position from 531914N0014347W
  having travelled 500Nm on a heading of 96.0217°\r\n-- using mean earth radius derived
  from the WGS84 ellipsoid\r\ndestination84 (readLatLong \"531914N0014347W\") (decimalDegrees
  96.0217) (nauticalMiles 500)\r\n-- using mean earth radius derived from the GRS80
  ellipsoid\r\ndestination (readLatLong \"531914N0014347W\") (decimalDegrees 96.0217)
  (nauticalMiles 500) r80\r\n\r\n-- surface distance between 54°N,154°E and its antipodal
  position\r\nlet p = decimalLatLong 54 154\r\n-- using mean earth radius derived
  from the WGS84 ellipsoid\r\nsurfaceDistance84 p (antipode p)\r\n-- using mean earth
  radius derived from the GRS80 ellipsoid\r\nsurfaceDistance p (antipode p) r80\r\n\r\n--
  closest point of approach between tracks\r\nlet p1 = decimalLatLong 20 (-60)\r\nlet
  b1 = decimalDegrees 10\r\nlet s1 = knots 15\r\nlet p2 = decimalLatLong 34 (-50)\r\nlet
  b2 = decimalDegrees 220\r\nlet s2 = knots 300\r\nlet t1 = Track p1 b1 s1\r\nlet
  t2 = Track p2 b2 s2\r\n-- using mean earth radius derived from the WGS84 ellipsoid\r\ncpa84
  t1 t2\r\n-- using mean earth radius derived from the WGS72 ellipsoid\r\ncpa t1 t2
  r72\r\n```\r\n\r\nJord comes with a REPL (built with [haskeline](https://github.com/judah/haskeline)):\r\n\r\n```sh\r\n$
  jord-exe\r\njord> finalBearing (destination (antipode 54°N,154°E) 54° 1000m) 54°N,154°E\r\njord>
  angle: 126°0'0.0\" (126.0)\r\njord> f = frameB 10d 20d 30d\r\njord> Body (vehicle)
  frame:\r\n      yaw  : 10°0'0.000\" (10.0)\r\n      pitch: 20°0'0.000\" (20.0)\r\n
  \     roll : 30°0'0.000\" (30.0)\r\njord> d = delta 3000 2000 100\r\njord> Delta:\r\n
  \     x: 3.0km\r\n      y: 2.0km\r\n      z: 0.1km\r\njord> p0 = geo 49.66618 3.45063
  0\r\njord> latlong: 49°39'58.248\"N,3°27'2.268\"E (49.66618, 3.45063)\r\n      height
  : 0.0km\r\njord> target p0 f d wgs84\r\njord> latlong: 49°41'30.486\"N,3°28'52.561\"E
  (49.69180166666667, 3.4812669444444446)\r\n      height : 6.0077e-3km\r\njord>  \r\n```\r\n"
license-name: BSD3
