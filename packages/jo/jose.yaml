homepage: https://github.com/frasertweedale/hs-jose
changelog-type: ''
hash: 7f023b680a5326fa4fdd8968720667fb42ac3516910fc60fb69c8132bc7b9343
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  base64-bytestring: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  tasty-hspec: ! '>=1.0'
  jose: -any
  semigroups: -any
  monad-time: -any
  memory: -any
  containers: -any
  x509: -any
  lens: -any
  quickcheck-instances: -any
  cryptonite: -any
  tasty-quickcheck: -any
  network-uri: -any
  mtl: -any
  attoparsec: -any
  tasty: -any
  QuickCheck: -any
  concise: -any
  aeson: -any
  template-haskell: -any
  safe: -any
  vector: -any
maintainer: frase@frase.id.au
synopsis: Javascript Object Signing and Encryption and JSON Web Token library
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  unix: -any
  base: ! '>=4.8 && <5'
  time: ! '>=1.5'
  base64-bytestring: ==1.0.*
  unordered-containers: ==0.2.*
  text: ! '>=1.1'
  jose: -any
  semigroups: ! '>=0.15'
  monad-time: ! '>=0.1'
  memory: ! '>=0.7'
  containers: ! '>=0.5'
  x509: ! '>=1.4'
  lens: ! '>=4.3'
  quickcheck-instances: -any
  cryptonite: ! '>=0.7'
  network-uri: ! '>=2.6'
  mtl: ! '>=2'
  attoparsec: -any
  QuickCheck: ! '>=2'
  concise: ! '>=0.1'
  aeson: ! '>=0.8.0.1'
  template-haskell: ! '>=2.4'
  safe: ! '>=0.3'
  vector: -any
all-versions:
- '0.1.26.0'
- '0.1.27.0'
- '0.2.31.0'
- '0.2.33.0'
- '0.2.38.0'
- '0.2.38.1'
- '0.3.38.0'
- '0.3.41.0'
- '0.3.41.1'
- '0.3.41.2'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.0.3'
- '0.4.0.4'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.0.3'
- '0.5.0.4'
- '0.5.0.5'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.7.0.0'
- '0.8.0.0'
author: Fraser Tweedale
latest: '0.8.0.0'
description-type: markdown
description: ! "# jose - Javascript Object Signing and Encryption & JWT (JSON Web
  Token)\n\n*jose* is a Haskell implementation of [Javascript Object Signing and\nEncryption](https://datatracker.ietf.org/wg/jose/)
  and [JSON Web\nToken](https://tools.ietf.org/html/rfc7519).\n\nThe JSON Web Signature
  (JWS; RFC 7515) implementation is complete.\nJSON Web Encryption (JWE; RFC 7516)
  is not yet implemented.\n\n**EdDSA** signatures (RFC 8037) are supported (Ed25519
  only).\n\nJWK Thumbprint (RFC 7638) is supported (requires *aeson* >= 0.10).\n\n[Contributions](#contributing)
  are welcome.\n\n## Security\n\nIf you discover a security issue in this library,
  please email me\nthe details, ideally with a proof of concept (`frase @ frase.id.au`\n;
  [PGP key](https://pgp.mit.edu/pks/lookup?op=get&search=0x4B5390524111E1E2)).\n\nBefore
  reporting an issue, please note the following known\nvulnerabilities:\n\n- The **ECDSA**
  implementation is vulnerable to **timing attacks** and\n  should therefore only
  be used for verification.\n\nand the following known **not-vulnerabilities**:\n\n-
  The library is not vulnerable to [JWS **algorithm substitution\n  attacks**](\n
  \ https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/).\n
  \ Haskell's type system excludes this attack.\n\n- The default JWS validation settings
  reject the **`\"none\"`\n  algorithm**, as [required by RFC 7518](\n  https://tools.ietf.org/html/rfc7518#section-3.6).\n\n-
  The library is not vulnerable to ECDH [**invalid curve attacks**](\n  https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html)\n
  \ because JWE is not implemented.\n\n\n## Interoperability issues\n\nThe following
  known interoperability issues will not be addressed,\nso please do not open issues:\n\n-
  Some JOSE tools and libraries permit the use of **short keys**, in\n  violation
  of the RFCs.  This implementation reject JWS or JWT\n  objects minted with short
  keys, as required by the RFCs.\n\n- The *Auth0* software produces objects with an
  [invalid `\"x5t\"`\n  parameter](\n  https://community.auth0.com/questions/7227/certificate-thumbprint-is-longer-than-20-bytes).\n
  \ The datum [should be a base64url-encoded SHA-1 digest](\n  https://tools.ietf.org/html/rfc7515#section-4.1.7),
  but *Auth0*\n  produces a base64url-encoded hex-encoded SHA-1 digest.  The object\n
  \ can be repaired\n  ([example](https://github.com/frasertweedale/hs-jose/issues/54#issuecomment-356460452))\n
  \ so that this library will admit it, unless the offending parameter\n  is part
  of the *JWS Protected Header* in which case you are out of\n  luck (until *Auth0*
  bring their implementation into compliance).\n\n- JWKs with leading null bytes in
  the RSA `\"n\"` parameter (a\n  [violation of RFC\n  7518](https://tools.ietf.org/html/rfc7518#section-2))
  have been\n  [seen in the\n  wild](https://github.com/frasertweedale/hs-jose/issues/68).
  \ This\n  library rejects nonconformant JWKs.  If you know which\n  programs/libraries
  produce such objects, please file bugs against\n  them.  It is straightforward to
  repair these keys:\n  base64url-decode the offending parameter, drop the leading
  null\n  byte, base64url-encode again then update the JSON object.\n\n\n## Contributing\n\nBug
  reports, patches, feature requests, code review, crypto review,\nexamples and documentation
  are welcome.\n\nIf you are wondering about how or whether to implement some feature\nor
  fix, please open an issue where it can be discussed.  I\nappreciate your efforts,
  but I do not wish such efforts to be\nmisplaced.\n\nTo submit a patch, please use
  ``git send-email`` or open a pull\nrequest.  Write a [well formed commit message](\nhttp://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\nIf
  your patch is nontrivial, update the copyright notice at the top\nof the modified
  files\n"
license-name: Apache-2.0
