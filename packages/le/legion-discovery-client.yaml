homepage: https://github.com/owensmurray/legion-discovery-client#readme
changelog-type: ''
hash: d30e139bf006d643d12b374c0aec6b129d66d3b57195c9ad2d0c577bd30bd4a8
test-bench-deps:
  base: -any
  legion-discovery-client: -any
maintainer: rick@owensmurray.com
synopsis: Client library for communicating with legion-discovery.
changelog: ''
basic-deps:
  http-client: ! '>=0.5.6.1 && <0.6'
  bytestring: ! '>=0.10.6.0 && <0.11'
  Cabal: ! '>=1.22.5.0 && <1.25'
  base: ! '>=4.7 && <4.10'
  text: ! '>=1.2.2.1 && <1.3'
  load-balancing: ! '>=1.0 && <1.1'
  safe-exceptions: ! '>=0.1.4.0 && <0.2'
  text-show: ! '>=3.4.1.1 && <3.7'
  containers: ! '>=0.5.6.2 && <0.6'
  monad-logger: ! '>=0.3.20.2 && <0.4'
  transformers: ! '>=0.4.2.0 && <0.6'
  resourcet: ! '>=1.1.7.5 && <1.2'
  http-types: ! '>=0.9.1 && <0.10'
  aeson: ! '>=0.11.2.1 && <1.2'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 0.1.1.1
- 0.2.0.1
author: Rick Owens
latest: 0.2.0.1
description-type: markdown
description: ! "# legion-discovery-client\n\nThis is a Haskell client library used
  to communicate with the Legion\nDiscovery discovery service.\n\n\n## Performing
  a query without registering a service.\n\nIf you want to perform a query without
  registering yourself a service,\nthe following example is how you might typically
  accomplish that. Note\nthat even though you are not starting a service, you must
  still specify\na name and a version for the local program. The reason for this is\nthat
  Legion Discovery keeps track of all requests in order to build a\ndependency graph
  of your service ecosystem.\n\n```haskell\nimport Network.HTTP.Client as C\nimport
  OM.Discovery (connect, query)\n\n...\n\nlet\n  name = \"my-program\" {- the name
  of this client program. -}\n  version = \"0.1\" {- the version of this client program.
  \ -}\n  targetService = \"some-service\" {- the name of the service you are looking
  for. -}\n  targetRange = \"> 1.1.1 && < 1.2\" {- the range of acceptable versions
  you wish to find. -}\nin do\n  manager <- C.newManager C.defaultManagerSettings\n
  \ discovery <- connect name version manager\n\n  servicesInstances <- query targetService
  targetRange discovery\n  ...\n```\n\n\n## Registering a service.\n\nThe following
  example shows how to register a service, using\n`withService`.\n\n```haskell\nimport
  Network.HTTP.Client as C\nimport OM.Discovery (connect, withService)\n\n...\n\nlet\n
  \ name = \"my-program\" {- the name of this client program. -}\n  version = \"0.1\"
  {- the version of this client program.  -}\n  serviceAddr = \"http://ec2-foo-bar.amazon.com:8080\"
  {- the address on which your service is running. -}\nin do\n  manager <- C.newManager
  C.defaultManagerSettings\n  discovery <- connect name version manager\n\n  withService
  serviceAddr discovery $ do\n    {-\n      Your service code here. When this IO block
  exits (for any reason,\n      including exceptions) then the service will unregister
  itself.\n    -}\n```\n\n"
license-name: Apache-2.0
