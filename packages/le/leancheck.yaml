homepage: https://github.com/rudymatela/leancheck#readme
changelog-type: ''
hash: 2b951d1f1ed8dc586c2a10e261cd1f5efa2cd8e4eade62523a039d5dc959242e
test-bench-deps:
  base: ==4.*
  leancheck: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: Enumerative property-based testing
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  template-haskell: -any
all-versions:
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.7.0'
- '0.7.1'
- '0.7.2'
author: Rudy Matela <rudy@matela.com.br>
latest: '0.7.2'
description-type: markdown
description: ! "LeanCheck\n=========\n\n[![LeanCheck's Build Status][build-status]][build-log]\n[![LeanCheck
  on Hackage][hackage-version]][leancheck-on-hackage]\n[![LeanCheck on Stackage LTS][stackage-lts-badge]][leancheck-on-stackage-lts]\n[![LeanCheck
  on Stackage Nightly][stackage-nightly-badge]][leancheck-on-stackage-nightly]\n\nLeanCheck
  is a simple enumerative [property-based testing] library.  Properties\nare defined
  as Haskell functions returning a boolean value which should be\n`True` for all possible
  choices of argument values.    LeanCheck applies\nenumerated argument values to
  these properties in search for a counterexample.\nProperties can be viewed as parameterized
  unit tests.\n\nLeanCheck works by producing *tiers* of test values: a possibly infinite
  list\nof finite sublists of same-and-increasingly-sized values.  This enumeration
  is\nsimilar to [Feat]'s.  However, the ranking and ordering of values are defined\ndifferently.
  \ The interface is also different.\n\nThroughout this README lines that begin with
  the [symbol `>`] indicate a line\nentered into an interactive interpreter (`ghci`).
  \ The result of evaluating the\nexpression is then printed on the following line.\n\n\nInstalling\n----------\n\nTo
  install the latest LeanCheck version from Hackage, just run:\n\n\t$ cabal update\n\t$
  cabal install leancheck\n\n\nChecking if properties are True\n-------------------------------\n\nTo
  check if properties are True,\njust use the function [`holds`] `:: Testable a =>
  Int -> a -> Bool`.\nIt takes _two arguments_:\nthe _number of values_ to test\nand
  a _property_ (function returning Bool),\nthen, it returns a boolean indicating whether
  the property holds.\nSee (ghci):\n\n\t> import Test.LeanCheck\n\t> import Data.List\n\t>
  holds 100 $ \\xs -> sort (sort xs) == sort (xs::[Int])\n\tTrue\n\t> holds 100 $
  \\xs -> [] `union` xs == (xs::[Int])\n\tFalse\n\n\nFinding counter examples\n------------------------\n\nTo
  find counter examples to properties,\nyou can use the function [`counterExample`]
  `:: Testable a => Int -> a -> Maybe [String]`.\nIt takes _two arguments_:\nthe _number
  of values_ to test\nand a _property_ (function returning Bool).\nThen, it returns
  Nothing if no results are found or Just a list of Strings\nrepresenting the offending
  arguments to the property.\nSee (ghci):\n\n\t> import Test.LeanCheck\n\t> import
  Data.List\n\n\t> counterExample 100 $ \\xs -> sort (sort xs) == sort (xs::[Int])\n\tNothing\n\n\t>
  counterExample 100 $ \\xs -> [] `union` xs == (xs::[Int])\n\tJust [\"[0,0]\"]\n\n\t>
  counterExample 100 $ \\xs ys -> xs `union` ys == ys `union` (xs::[Int])\n\tJust
  [\"[]\",\"[0,0]\"]\n\n\nChecking properties like in SmallCheck/QuickCheck\n-------------------------------------------------\n\nTo
  \"check\" properties like in [SmallCheck] and [QuickCheck]\nautomatically printing
  results on standard output,\nyou can use the function [`check`] `:: Testable a =>
  a -> IO ()`.\n\n\t> import Test.LeanCheck\n\t> import Data.List\n\n\t> check $ \\xs
  -> sort (sort xs) == sort (xs::[Int])\n\t+++ OK, passed 200 tests.\n\n\t> check
  $ \\xs ys -> xs `union` ys == ys `union` (xs::[Int])\n\t*** Failed! Falsifiable
  (after 4 tests):\n\t[] [0,0]\n\nThe function [`check`] tests for a maximum of 200
  tests.\nTo check for a maximum of `n` tests, use [`checkFor`] `n`.\nTo get a boolean
  result wrapped in `IO`, use [`checkResult`] or [`checkResultFor`].\nThere is no
  \"quiet\" option, just use [`holds`] or [`counterExample`] in that case.\n\n\nTesting
  user-defined types\n--------------------------\n\nLeanCheck works on properties
  with [`Listable`] argument types.\n[`Listable`] instances are declared similarly
  to SmallCheck:\n\n\tdata MyType = MyConsA\n\t            | MyConsB Int\n\t            |
  MyConsC Int Char\n\t            | MyConsD String\n\n\tinstance Listable MyType where\n\t
  \ tiers = cons0 MyConsA\n\t       \\/ cons1 MyConsB\n\t       \\/ cons2 MyConsC\n\t
  \      \\/ cons1 MyConsD\n\nFor types that do not have a constraning data invariant,
  instances can be\nautomatically derived with [Template Haskell] by using [`deriveListable`]
  like\nso:\n\n\tderiveListable ''MyType\n\nThe [`tiers`] function return a potentially
  infinite list of finite sub-lists\n(tiers).  Each successive tier has values of
  increasing size.\n\n\ttiers :: Listable a => [[a]]\n\nFor convenience, the function
  [`list`] returns a potentially infinite list\nof values of the bound type:\n\n\tlist
  :: Listable a => [a]\n\nSo, for example:\n\n\t> take 5 (list :: [(Int,Int)])\n\t[(0,0),(0,1),(1,0),(0,-1),(1,1)]\n\nThe
  `list` function can be used to debug your custom instances.\n\n[`Listable`] class
  instances are more customizable than what is described here:\ncheck source comments
  or haddock documentation for details.\n\n\nFurther reading\n---------------\n\nFor
  a detailed documentation of each function, see\n[LeanCheck's Haddock documentation].\n\nFor
  an introduction to property-based testing\nand a step-by-step guide to LeanCheck,
  see the\n[tutorial on property-based testing with LeanCheck]\n\\(`doc/tutorial.md`
  in the source repository).\n\nLeanCheck is subject to a chapter in a [PhD Thesis
  (2017)].\n\n[LeanCheck's Haddock documentation]: https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html\n[tutorial
  on property-based testing with LeanCheck]: https://github.com/rudymatela/leancheck/blob/master/doc/tutorial.md\n\n[`Listable`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#t:Listable\n[`holds`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:holds\n[`counterExample`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:counterExample\n[`check`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:check\n[`checkFor`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkFor\n[`checkResult`]:
  \   https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkResult\n[`checkResultFor`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkResultFor\n[`tiers`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:tiers\n[`list`]:
  \          https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:list\n[`deriveListable`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:deriveListable\n\n[property-based
  testing]: https://github.com/rudymatela/leancheck/blob/master/doc/tutorial.md\n[Feat]:
  https://hackage.haskell.org/package/testing-feat\n[SmallCheck]: https://hackage.haskell.org/package/smallcheck\n[QuickCheck]:
  https://hackage.haskell.org/package/QuickCheck\n[PhD Thesis (2017)]: https://matela.com.br/paper/rudy-phd-thesis-2017.pdf\n\n[symbol
  `>`]: https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810780208\n[Template
  Haskell]: https://wiki.haskell.org/Template_Haskell\n\n[build-status]: https://travis-ci.org/rudymatela/leancheck.svg?branch=master\n[build-log]:
  \   https://travis-ci.org/rudymatela/leancheck\n[hackage-version]: https://img.shields.io/hackage/v/leancheck.svg\n[leancheck-on-hackage]:
  https://hackage.haskell.org/package/leancheck\n[stackage-lts-badge]:            http://stackage.org/package/leancheck/badge/lts\n[stackage-nightly-badge]:
  \       http://stackage.org/package/leancheck/badge/nightly\n[leancheck-on-stackage]:
  \        http://stackage.org/package/leancheck\n[leancheck-on-stackage-lts]:     http://stackage.org/lts/package/leancheck\n[leancheck-on-stackage-nightly]:
  http://stackage.org/nightly/package/leancheck\n"
license-name: BSD3
