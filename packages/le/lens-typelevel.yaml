homepage: https://github.com/mstksg/lens-typelevel#readme
changelog-type: markdown
hash: 2da0be997b27e5b1f3e06df8c1b6384282a0838602f50946a9b83df7600c4fd7
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Type-level lenses using singletons
changelog: ! 'Changelog

  =========


  Version 0.1.0.1

  ---------------


  *October 28, 2018*


  <https://github.com/mstksg/lens-typelevel/releases/tag/v0.1.0.1>


  *   Instances for `N`.

  *   Export value-level `mkLens`.

  *   Extensive documentation additions.


  Version 0.1.0.0

  ---------------


  *October 26, 2018*


  <https://github.com/mstksg/lens-typelevel/releases/tag/v0.1.0.0>


  *   Initial release.


'
basic-deps:
  base: ! '>=4.12 && <5'
  singletons: ! '>=2.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Justin Le
latest: '0.1.0.1'
description-type: markdown
description: ! "# [lens-typelevel][]\n\n[![lens-typelevel on Hackage](https://img.shields.io/hackage/v/lens-typelevel.svg?maxAge=86400)](https://hackage.haskell.org/package/lens-typelevel)\n[![Build
  Status](https://travis-ci.org/mstksg/lens-typelevel.svg?branch=master)](https://travis-ci.org/mstksg/lens-typelevel)\n\nvan
  Laarhoven lenses at the type level using *[singletons][]* defunctionalization.\n\n[lens-typelevel]:
  http://hackage.haskell.org/package/lens-typelevel\n[singletons]: https://hackage.haskell.org/package/singletons\n\n```haskell\nghci>
  :kind! '(\"hello\", 6 ) & L1_ .~ 'True\n'( 'True, 6 )\n\nghci> :kind! '(\"hello\",
  6 ) ^. L2_\n6\n\nghci> :kind! '(\"hello\", 6 ) ^. To_ SndSym0\n6\n\nghci> :kind!
  '(\"hello\", 'True ) & L2_ %~ NotSym0\n'(\"hello\", 'False )\n\nghci> :kind! '[
  'True, 'False, 'False ] & Traverse_ %~ NotSym0\n'[ 'False, 'True, 'True ]\n\nghci>
  :kind! '(\"hello\", '(6, 'False ) ) ^. L2_ .@ L1_\n6\n\nghci> type TestList = '[
  '(\"hello\", 'True), '(\"world\", 'False), '(\"curry\", 'False)]\nghci> :kind! TestLst
  ^.. Traverse_ .@ L1_\n'[\"hello\", \"world\", \"curry\"]\n\nghci> :kind! '[] ^?!
  Traverse_\nError \"Failed indexing into empty traversal\"\n\nghci> :kind! '[\"hello\",
  \"world\", \"curry\"] & IxList_ ('S 'Z) .~ \"haskell\"\n'[\"hello\", \"haskell\",
  \"curry\"]\n```\n\nIt's pretty much the exact same representation as the *lens*
  library; it's\nessentially an API-faithful port with the same representation and
  essentially\nthe same implementation.  We even have `CloneLens_` and `CloneTraversal_`\nimplemented
  using type-level versions of `Context` and `Bazaar`:\n\n```haskell\nghci> type CloneExample
  l   = ('( 'True, 'False ) & CloneLens_ l %~ NotSym0)\n                                                  ^.
  CloneLens_ l\nghci> :kind! CloneExample L1_\n'False\nghci> :kind! CloneExample L2_\n'True\n```\n\nUsing
  prefix function names:\n\n```haskell\nghci> :kind! Set  L1_       'True        '(\"hello\",
  6     )\n'( 'True, 6 )\n\nghci> :kind! View L2_                    '(\"hello\",
  6     )\n6\n\nghci> :kind! View (To_ SndSym0)          '(\"hello\", 6     )\n6\n\nghci>
  :kind! Over L2_       NotSym0      '(\"hello\", 'True )\n'(\"hello\", 'False )\n\nghci>
  :kind! Over Traverse_ NotSym0      '[ 'True, 'False, 'False ]\n'[ 'False, 'True,
  'True ]\n\nghci> :kind! View (L2_ .@ L1_)           '(\"hello\", '(6, 'False ) )\n6\n\nghci>
  type TestList = '[ '(\"hello\", 'True), '(\"world\", 'False), '(\"curry\", 'False)]\nghci>
  :kind! ToListOf (Traverse_ .@ L1_) TestList\n'[\"hello\", \"world\", \"curry\"]\n\nghci>
  :kind! UnsafePreview Traverse_     '[]\nError \"Failed indexing into empty traversal\"\n\nghci>
  :kind! Set (IxList_ ('S 'Z)) \"haskell\" '[\"hello\", \"world\", \"curry\"]\n'[\"hello\",
  \"haskell\", \"curry\"]\n```\n\nDefining lenses\n---------------\n\nThere are two
  main ways to define optics.\n\nFirst, you can write them by hand using `singletonsOnly`:\n\n```haskell\n$(singletonsOnly
  [d|\n  l1 :: Functor f => LensLike (a, c) (b, c) a b\n  l1 f (x, y) = (\\x' -> (x',
  y)) <$> f x\n\n  l1Alt :: Functor f => LensLike (a, c) (b, c) a b\n  l1Alt = mkLens
  fst (\\(_, y) x -> (x', y))\n\n  getFirst :: Getting a (a, b) a\n  getFirst = to
  fst\n  |])\n```\n\nThis creates the *type families* `L1`, `L1Alt`, and `GetFirst`;
  however, these\naren't lenses, because they aren't partially applied.  The lactual
  lenses are\n`L1Sym0`, `L1AltSym0`, and `GetFirstSym0`.  As a convention, I\nrecommend
  aliasing the *actual* lenses with an underscore suffix:\n\n```haskell\n-- L1_       ::
  Functor f => LensLike f (a, c) (b, c) a b\ntype L1_       = L1Sym0\n\n-- L1Alt_
  \   :: Functor f => LensLike f (a, c) (b, c) a b\ntype L1Alt     = L1AltSym0\n\n--
  GetFirst_ :: Getting a (a, b) a\ntype GetFirst_ = GetFirstSym0\n```\n\nThe number
  after the `Sym` is determined by how many arguments you need to\napply to your function
  before you get to the actual lens.  For example,\n`IxList` requires one argument
  (the index) to get to the actual traversal, so\nthe definition in the library is:\n\n```haskell\ntype
  IxList_ i = IxListSym1 i\n```\n\nSecond, you can write them directly at the type
  level using combinators like\n`MkLens_` and `To_`:\n\n```haskell\ntype GetFirst_
  = To_ FstSym0\n```\n\n(`FstSym0` is the promotion of `fst` from the *singletons*
  library)\n"
license-name: BSD3
