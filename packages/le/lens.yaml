homepage: http://github.com/ekmett/lens/
changelog-type: markdown
hash: 98bdb7edb9b78637310a2b45096e3551c359ec1a7725ed03980fe968a14697c7
test-bench-deps:
  test-framework-hunit: ! '>=0.2'
  bytestring: -any
  test-framework: ! '>=0.6'
  base: -any
  comonad: ! '>=4'
  unordered-containers: -any
  text: -any
  generic-deriving: -any
  filepath: -any
  test-framework-quickcheck2: ! '>=0.2'
  criterion: ! '>=1'
  doctest: ! '>=0.11.4 && <0.12 || >=0.13 && <0.15'
  semigroups: ! '>=0.9'
  HUnit: ! '>=1.2'
  test-framework-th: ! '>=0.2'
  containers: -any
  simple-reflect: ! '>=0.3.1'
  lens: -any
  mtl: -any
  nats: -any
  transformers: -any
  parallel: -any
  deepseq: -any
  QuickCheck: ! '>=2.4'
  vector: -any
  directory: ! '>=1.0'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Lenses, Folds and Traversals
changelog: ! "4.16 [2018.01.28]\n-----------------\n* The `Semigroup` instances for
  `Traversed` and `Sequenced` are now more\n  constrained (going from `Apply` to `Applicative`
  and `Monad`, respectively).\n  In GHC 8.4, `Semigroup` is a superclass of `Monoid`,
  therefore we'd need to\n  have `Apply` constraint in the `Monoid` instances. We
  opted to weaken our\n  ability to use `Apply` than to lose compatibility with third-party
  packages\n  that don't supply instances for `Apply`.\n\n  In practice this changes
  the (specialised) type signature of `traverseOf_`\n  ```diff+\n  - traverseOf_ ::
  Apply f       => Fold1 s a -> (a -> f r) -> s -> f ()\n  + traverseOf_ :: Applicative
  f => Fold1 s a -> (a -> f r) -> s -> f ()\n  ```\n  and similarly for `forOf_` and
  `sequenceOf_`.\n\n  As part of this change, new combinatorsÂ `traverse1Of_`, `for1Of_`
  and\n  `sequence1Of_` were added for `Apply`-only effects.\n\n  Similar instance
  context changes were made for `Folding` and `Effect`,\n  but these changes aren't
  publicly visible.\n\n* Add `Control.Lens.Unsound`, which exports unsound functionality
  for forming\n  products of lenses and sums of prisms.\n\n* Add `Numeric.Natural.Lens`,
  which export convenient isomorphisms for\n  natural numbers.\n\n* Add `Strict` instances
  for strict and lazy `ST`.\n\n* Adapt `Language.Haskell.TH.Lens` for `template-haskell-2.13`
  (bundled\n  with GHC 8.4).\n\n* Add `Semigroup` and `Monoid` instances for `Indexing`.\n\n4.15.4\n----\n*
  `makeFields` and `declareFields` are now smarter with respect to type\n  families.
  Because GHC does not allow mentioning type families in instance\n  heads, the Template
  Haskell machinery works around this restriction by\n  instead generating instances
  of the form:\n\n  ```haskell\n  type family Fam a\n  data Rec a = Rec { _recFam
  :: Fam a }\n  makeFields ''Rec\n\n  ===>\n\n  instance (b ~ Fam a) => HasFam (Rec
  a) b where ...\n  ```\n\n  This requires enabling the `UndecidableInstances` extension,
  so this trick is\n  only employed when a field's type contains a type family application.\n*
  `declareFields` now avoids creating duplicate field classes that are shared\n  among
  multiple datatypes within the same invocation.\n* The Template Haskell machinery
  will no longer generate optics for fields\n  whose types mention existentially quantified
  type variables.\n* Add `HasCallStack` constraints to partial operations\n* Reexport
  `(.@~)` and `(.@=)` from `Control.Lens.Operators`\n* Support `doctest-0.13`\n\n4.15.3\n----\n*
  Generalized types of `transformMOf`, `transformOf`, `transformMOnOf`,\n  `transformOnOf`,
  `rewriteMOf`, `rewriteOf`, `rewriteMOnOf` and `rewriteOnOf`.\n* Depend on `th-abstraction`
  package for normalizing differences across\n  `template-haskell` versions\n\n4.15.2\n----\n*
  Build with GHC 8.2\n* Expand tuple accessors to support up to 19-tuples\n* Add more
  `Rewrapped` and `Wrapped` instances for data types from the `base`,\n  `bifunctors`,
  `exceptions`, `free`, `profunctors`, and `semigroupoids`\n  libraries\n* Add a `Generic`
  default implementation for `Wrapped`\n* Add `Wrapped` instances for data types introduced
  in `Foreign.C.Types` and\n  `System.Posix.Types` in `base-4.10.0.0`\n* Add prisms
  for recently introduced data types in `Control.Exception`\n* Revamp `Setup.hs` to
  use `cabal-doctest`. This makes it build\n  with `Cabal-1.25`, and makes the `doctest`s
  work with `cabal new-build` and\n  sandboxes.\n* Add `makeFieldsNoPrefix`, a variant
  of `makeFields` which gives the desired\n  behavior in the presence of `DuplicateRecordFields`.
  Also add\n  `classUnderscoreNoPrefixFields` and `classUnderscoreNoPrefixNamer`,
  the\n  corresponding `LensRules` and `FieldNamer`, respectively.\n* Add `toNonEmptyOf`,
  `first1Of`, `last1Of`, `minimum1Of`, and `maximum1Of`\n  to `Control.Lens.Fold`\n*
  Add `both1` to `Control.Lens.Traversal`\n* Generalize the type of `levels` and `ilevels`
  in `Control.Lens.Level` to work\n  on `Fold`s\n* Generalize the type of `getting`
  in `Control.Lens.Getter` to work with any\n  `Optical`\n* Add `throwing_` to `Control.Monad.Error.Lens`
  and `Control.Exception.Lens`\n* Fix the meta-data in the .cabal file to properly
  indicate that this project\n  has a BSD2 license\n\n4.15.1\n----\n* Restore the
  `generic` and `generic1` functions in `GHC.Generics.Lens`\n\n4.15\n----\n* Remove
  `Generics.Deriving.Lens` module.\n* Incorporate `URec`, which was introduced in
  `GHC.Generics` in `base-4.9`. For compatibility with older versions of `base`, `lens`
  now conditionally depends on `generic-deriving`\n* Add `Rewrapped` instance for
  `ExceptT`\n* Add `FunctorWithIndex`, `FoldableWithIndex`, and `TraversableWithIndex`
  instances for `Sum`, `Proxy`, `Tagged` and data types in `GHC.Generics`\n* Remove
  unneeded context from `*WithIndex HashMap` instances\n* Add `Data.Map.Lens.toMapOf`\n*
  Add moral `Functor` constraint for `to` `ito` `ilike` `ilike` to allow the\n  \"indented\"
  type signature using Getter with redundant warnings turned on.\n\n4.14\n----\n*
  Remove `Cons` and `Snoc` instances for `NonEmpty`.\n\n4.13.2.1\n------\n* Fixed
  `itraverse_` and `imapM_` returning bottom\n\n4.13.2\n------\n* Restore default
  signature for `Control.Lens.At.at`\n* Improve operations for `Data.Sequence.Seq`\n*
  Fix `declarePrisms` behavior on GHC 8 using GADT record syntax\n\n4.13.1\n------\n*
  Modified to enable the `doctests` to build with `stack`.\n* Removed `.ghci`.\n*
  Added `lookupOf`\n* Support GHC 8\n* Support `transformers` 0.5\n* Support `kan-extensions`
  5\n* Support `comonad` 5\n* Better support for `Closed` from `profunctors`.\n\n4.13\n----\n*
  Pattern synonyms\n* Moved `foldMapBy` and `foldBy` into `reflection` 2.1\n* Added
  `traverseByOf`, `sequenceByOf`.\n* Reexported `traverseBy` and `sequenceBy` from
  `reflection` 2.1.\n* Modified the signatures of `alaf` and `auf` to work with a
  `Functor` rather than a `Profunctor` and rather drastically generalized them.\n*
  Removed `Control.Lens.Internal.Getter.coerce` in favor of the upstream `phantom`
  combinator in `contravariant` 1.3+\n* Renamed `coerced` to `phantasm` to get it
  out of the way.\n* Added `Wrapped` instance for `Down`\n\n4.12.3\n------\n* Move
  `Review` and `AReview` to `Control.Lens.Type` fixing a bug in `makePrisms`\n* Expose
  `HasTypes` class in `Language.Haskell.TH.Lens`\n* Make types of `foldByOf` and `foldMapByOf`
  more specific to hide implementation details\n* Add Prisms to `Language.Haskell.TH`
  for new constructors in `template-haskell-2.10`\n* Generalize type of `_FunDep`
  to an `Iso`\n\n4.12.2\n------\n* Incorporated a bug fix for `foldByOf` and `foldMapByOf`
  to actually let them work on folds.\n* Added a `Plated` instance for `CofreeT`\n\n4.12.1\n------\n*
  The `Simple` type alias is now poly-kinded. This lets you use `Simple Field1 s a`
  and the like in constraints.\n* Added `HasTypes` to `Language.Haskell.TH.Lens`.\n*
  Support for `vector-0.11.0` which changes `Stream` to `Bundle`\n\n4.12\n----\n*
  `reflection 2` support.\n\n4.11.2\n------\n* Give `cosmosOn` a more general type.\n\n4.11.1\n------\n*
  Added `cosmos`, `cosmosOf`, `cosmosOn`, `cosmosOnOf` to `Control.Lens.Plated`.\n*
  Added `icontains`, `iat`, `iix`.\n* Made various documentation improvements.\n*
  Added a `test-templates` flag.\n\n4.11\n----\n* Proper `profunctors` 5.1 support.
  This extended the superclass constraints for `Conjoined`, so it resulted in a major
  version bump.\n\n4.10\n----\n* Added `elemIndexOf`, `elemIndicesOf`, `findIndexOf`,
  and `findIndicesOf`.\n* Fixed `Ixed` instance for `Tree`. It no longer drops nodes
  prior to the traversed node.\n* `bifunctors` 5, `profunctors` 5 and `semigroupoids`
  5 support.\n\n4.9.1\n-----\n* Added `_Wrapped` support for `NonEmpty`.\n* Added
  `_Wrapped` support for `Alt`.\n* Fixed `Rewrapped` instance for `Last`.\n\n4.9\n-------\n*
  `filepath` 1.4 support\n* Removed `Control.Monad.Primitive.Lens` and shed the `primitive`
  dependency.\n* Add missing `_WithIndex` instances from `keys` package\n* Much more
  code is inferred `Safe` rather than `Trustworthy`.\n* Documented the difference
  between `unsafeSingular` and `singular`.\n* `folding` now produces an actual `Fold`.\n*
  Cleaned up builds for GHC 7.10 to get rid of redundant import warnings.\n\n4.8\n---\n*
  When built with `profunctors` 4.4 on GHC 7.8+ we no longer need to use `unsafeCoerce`
  at all!\n  This drastically reduces the level of trust involved in the way we have
  optimized `lens`.\n* Added `fusing`. This optimizes long `Lens` chains, by enfocing
  a form of `fmap` fusion based on the Yoneda lemma. This is particularly effective
  at making faster lenses the definition is recursive or complex enough that it cannot
  be inlined.\n* Added `confusing`. This optimizes long `Traversal` chains. As with
  `fusing` it is best used when the definition for the `Traversal` chain in question
  is recursive or complex enough that it cannot be inlined, but the implementation
  is much more confusing.\n* Remove deprecated stuff: `Control.Lens.Loupe`, `headOf`,
  `makeFieldsWith`,\n  `strippingPrefix`, `strippingSuffix`\n* Added `Cons` and `Snoc`
  instances for `NonEmpty`\n* Removed `Data.List.Split.Lens` module\n* Reimplemented
  `bytestring` traversals to avoid internal modules\n* Added `gplate`, an implementation
  of `plate` for any type implementing `Generic`\n* Strictness revisited\n  * Add
  `generateLazyPatterns` configuration flag to `makeLenses` rules.\n  * Make the default
  `makeLenses` behavior to generate STRICT optics\n  * Add strict variants of `_1`
  .. `_9` named `_1'` .. `_9'`\n* Generalized some combinators in `Data.Vector.Generic.Lens`
  and added `converted`\n\n4.7\n---\n* Migrated `Control.Lens.Action` to `lens-action`.\n*
  Added `Data.Vector.Generic.Lens.vectorIx` function for indexing vectors with only
  `Vector` constraint.\n* Added `Field1` and `Field2` instances for `Data.Functor.Product.Product`.\n*
  Removed the \"typeclass synonym\" `Gettable`.\n* Added new flag to `makeLenses`,
  `generateUpdateableOptics`, which allows\n  the generation of only `Getter`s and
  `Fold`s. This feature is intended\n  to be used when the constructors are hidden
  behind validating, \"smart\"\n  constructors.\n* Fixed Template Haskell name generation
  when using GHC 7.10\n* Fixed Template Haskell generation of classes methods where
  field types used\n  existential quantification\n\n4.6.0.1 [maintenance release]\n-------\n*
  Compatibility with `base` 4.8 [Edit: this turned out to not work for the final release
  of GHC 7.10]\n\n4.6\n---\n* Reduced `Review` to two arguments, like `Getter`.\n*
  Added `abbreviatedFields` to permit `makeFieldsWith` to be invoked with an argument
  that lets it act like it did pre-4.5 and accept arbitrary common prefixes.\n\n4.5\n---\n*
  Provide access to the typename in `lensRules` naming function.\n* `makeFields` camelcasing
  rules now properly support types with camelcasing. `MyType` with field `myTypeFieldA`
  generates `fieldA` now. Previously the prefix ignore capitalization and the field
  would need to be named `mytypeFieldA`.\n* `makeClassy` works on types even when
  none of the fields would generate optics.\n* Added `Monad`, `MonadReader`, `MonadPlus`
  and `Bind` instances for `ReifiedMonadicFold`\n* Added missing fixity declarations
  on many operators.\n* Migrated `Codec.Compression.Zlib.Lens` to `zlib-lens` package.\n\n4.4.0.2\n---\n*
  `text` 1.2.0.0 support\n* Remove the use of the TemplateHaskell extension from the
  library to enable lens to be used on stage1 cross-compilers\n\n4.4.0.1\n----\n*
  Restore previous default of `makeFields` using the camel case field namer.\n\n4.4\n----\n*
  Internals of Template Haskell code generation rewritten. makeLenses,\n  makeClassy,
  and makeFields have been unified into the same generator.\n* TH generated single
  constructor Lens use irrefutable pattern matching to\n  enable construction starting
  with undefined.\n* TH generated traverals unify their field arguments (type synonyms
  not\n  currently expanded) enabling exotic traversals to be generated.\n* Added
  instances for `Text` to `Data.Aeson.Lens`\n* Reimplemented `makePrisms`, adding
  support for `makeClassyPrisms`, infix constructrs generate periods (.) prefixed
  prisms.\n* Added `Choice` to `Review` so that `Prism` is a proper subtype of `Review`\n*
  Migrated `Data.Aeson.Lens` to `lens-aeson` package.\n* Fixed `GHC.Generics.Lens.tinplate`
  behavior on single-field data types and empty data types.\n\n4.3.3\n-----\n* `semigroupoids`
  4.2 support\n\n4.3.2\n-----\n* `contravariant` 1.0 support\n\n4.3.1\n-----\n* Added
  `bytewise` to `Data.Bits`\n\n4.3\n---\n* Switched the \"direction\" of the `Iso`
  argument to `au` to match the order generated by `makePrisms` and `makeLenses`.\n*
  Removed `makeIsos` in favor of `makePrisms` and `makeLenses`. Each of these functions
  will construct `Iso`s when appropriate.\n* Removed `declareIsos` in favor of `declarePrisms`
  and `declareLenses`. Each of these functions will construct `Iso`s when appropriate.\n*
  Added `matching` for type-changing matches with `Prism`s.\n* Added `withPrism` for
  recovering the functions passed to `prism`.\n* Added `negated`, the isomorphism
  for the `negate` function.\n\n4.2\n---\n* Added `_Text` isomorphisms to make the
  proper use with `(#)` more obvious and fit newer convention.\n* Added `Wrapped`
  instances for `Vector` types\n* Resolved issue #439.  The various `Prism`s for string-like
  types in `Data.Aeson.Lens` are now law-abiding `Prism`s \"up to quotient.\"\n* Added
  `selfIndex`.\n* Support `attoparsec` 0.12.\n\n4.1.2\n-----\n* When used with `exceptions`
  0.4, `throwingM` will permit use with a mere `MonadThrow`.\n\n4.1.1\n----\n* Generalized
  the types of `mapping`, `bimapping`, `contramapping`, `dimapping`, `lmapping`, `rmapping`
  to support changing the `Functor`, `Bifunctor`, `Contravariant`, and `Profunctor`
  respectively.\n* Compatibility with `free` 4.6\n\n4.1\n---\n* Added `Plated` instances
  for various free monad variants.\n* Compatibility with GHC HEAD (7.9+)\n\n4.0.7\n-----\n*
  Removed dependency on `constraints`. It was used in a pre-release version of 4.0
  but never made it into 4.0, but the dependency had remained around complicating
  builds for GHC 7.4.\n\n4.0.6\n-----\n* `makeLenses` attempt to make the accessors
  it can under existential quantification.\n* Added `(&~)`.\n* _Experimental_ support
  for parallel builds on GHC 7.8 with `cabal install lens -fj`. Due to at last one
  known issue with GHC, it isn't recommended to use this option when rebuilding lens,
  as a race condition on at least one platform has been seen in the wild.\n* Added
  `RoleAnnotations` for GHC 7.8.1. These rule out a few user-accessible bottoms that
  could be caused by creative abuse of the new `Coercible` machinery. However, there
  was no `unsafeCoerce` exposed.\n* Removed some impossible cases that required unwritable
  instances from the example doctypes.\n\n4.0.5\n-----\n* Added `bimapping` to `Control.Lens.Iso`\n*
  Restored correct behavior of `makePrism` on types with a single constructor.\n*
  `makeLenses` now generates `Getter`s and `Fold`s on universally quantified fields.\n\n4.0.4\n-----\n*
  Made `declareFields` work again.\n\n4.0.3\n-----\n* Fixed random segfaulting when
  using `foldMapBy`.\n\n4.0.2\n-----\n* Properly bundled the modules needed for the
  properties test suite into the tarball for hackage.\n\n4.0.1\n-----\n* Typo fixes\n*
  Exporting `Rewrapping` from `Control.Lens.Wrapped`.\n* Removed the dependency on
  `cpphs`.\n\n4.0\n----\n* Added `nearly` to `Control.Lens.Prism`.\n* Added `Control.Lens.Empty`,
  exporting `_Empty`.\n* We now require `DefaultSignatures`.\n* Added `failing` and
  `ifailing` to `Control.Lens.Traversal`.\n* Changed the signature of `Data.List.Split.Lens.condensing`
  due to the addition of `DropBlankFields` to `Data.List.Split.CondensePolicy` in
  `split`.\n* Simplified `Each`, `Ixed`, and `Contains`. They are no longer indexed.
  The previous design was actively getting in the way of user-defined instances.\n*
  Replaced more of our home-grown types with standard ones. They had previously been
  defined to help make more intelligible error messages, but when we switched to using
  `(Contravariant f, Functor f)` instead of `(Gettable f)`, these ceased to really
  help. Now you can define even more `lens`-compatible types (e.g. `Getter` and `Fold`)
  without depending on `lens`.\n  * Replaced the use of `Accessor` with `Const`.\n
  \ * Replaced the use of `Mutator` with `Identity`.\n  * Replaced the use of `Reviewed`
  with `Tagged`.\n* Removed the deprecated `Control.Lens.Simple` module.\n* Repurposed
  `Control.Lens.Combinators` to re-export `Control.Lens` sans any operators; previous
  residents rehomed to `Control.Lens.Lens`.\n* Added `Control.Lens.Operators` to export
  just the operators. Varying your import styles between these supports many qualified
  usage scenarios.\n* Simplified `Cons` and `Snoc`. Now they must be a `Prism`.\n*
  Simplified `Contains`. This necessitated losing many instancs of `Contains`, but
  makes it much easier and more consistent to use and instantiate.\n* Simplified the
  various `AsFoo` types in `Control.Exception.Lens`\n* Simplified the types in `System.IO.Error.Lens`.\n*
  Merged `lens-aeson` into `lens`.\n* We're exiling `Control.Lens.Zipper` to a separate
  package. This will let the design for it iterate faster and let us explore the trade-offs
  between the 3.8 style and the 3.9 style of zippers.\n* Generalized `alongside`,
  `inside`, `both`.\n* Switched to a new `Typeable` version of `reflection` for the
  harder combinators in `Control.Exception.Lens`. This enables us to comply with GHC
  7.7's ban on hand-written `Typeable` instances.\n* Added a `_Show` `Prism`.\n* Added
  `Control.Lens.Extras` for the combinator names we don't have the gall to claim outright,
  but which are consistent with the rest.\n* Renamed the constructors for `ReifiedLens`,
  etc. to just be the name of their base type.\n* Added many many missing instances
  for `ReifiedFold` and `ReifiedGetter`. This permits things like `runFold ((,) <$>
  Fold (traverse._1) <*> Fold (traverse._2))` to be a `Fold`\n  and `ReifiedFold`
  can be used as a `Monad`, `Profunctor`, etc.\n* Many performance optimizations.\n*
  Switched to `exceptions` from `MonadCatchIO-transformers`\n* Added types for working
  with `RelevantFold` and `RelevantTraversal`. These are a `Fold` or `Traversal` that
  always has at least one target. Since `Apply` isn't a superclass of `Applicative`,
  you occasionally need to convert between them, but it lets you more readily work
  with less unsafety.\n* Changed `unwrapping` and `wrapping` to have the same constructor-oriented
  order as a `Prism` and renamed them t `_Wrapping` and `_Unwrapping` respectively.\n*
  Drastically changed the way `_Wrapping` and `_Unwrapping` are built to get much
  better inference.\n* There are about 15,000 lines of patches over the last year,
  so I'm sure we missed a few big changes.\n\n3.10.1 [maintenance release]\n------\n*
  Compatibility with `base` 4.7\n\n3.10.0.1 [maintenance release]\n--------\n* Compatibility
  with `text` 1.0\n\n3.10\n----\n* Switched to `bifunctors`, `comonad`, `profunctors`,
  and `semigroupoids` 4.0.\n\n3.9.2\n-----\n* Generalized signatures for `throwing`
  and `throwingM`.\n\n3.9.1\n-----\n* 'condensingPolicy' was updated to work with
  'split' 0.2.2\n\n3.9.0.3\n-------\n* Bumped dependency on `generic-deriving` again.\n\n3.9.0.2\n-------\n*
  Bumped dependency on `generic-deriving` to enable building on GHC HEAD.\n\n3.9.0.1\n-------\n*
  Updated the field guide image to link to imgur. Sadly the overview haddock and the
  haddocks are not generated in the same directory, so the haddock hook for copying
  the image only works locally.\n\n3.9\n-----\n* Changed `Getting` to take 3 arguments
  instead of 5. If you need the old behavior for portability you can use\n  `Overloaded
  (Accessor r) s t a b` instead of `Getting r s t a b` and it'll work consistently
  back through the last few releases.\n* Added `involuted` to `Control.Lens.Iso`.\n*
  Factored out a common `reversed` definition from all the various forms of it around
  the library and placed it in `Control.Lens.Iso`.\n* Added `binary`, `octal`, `decimal`
  and `hex` to `Numeric.Lens`.\n* Added `sans` to `Control.Lens.At`.\n* Improved interoperability:\n
  \ * Reimplemented `Gettable` as an alias for `Contravariant` and `Functor` together
  to derive `Getter` and `Fold`. This means you can now\n    implement a `Getter`
  or `Fold` with only a Haskell 98 dependency (`contravariant`).\n  * Removed `Reviewable`.
  We now use `Bifunctor` and `Profunctor` together to derive `Review`. This means
  you can now implement a `Review`\n    with Haskell 98 dependencies (`profunctors`
  and `bifunctors`).\n  * These changes enables more types to be defined without incurring
  a dependency on the `lens` package.\n\n3.8.7.0-3.8.7.3 [maintenance releases]\n-----\n*
  Fixes to dependencies and pragmas.\n\n3.8.6 [maintenance release]\n-----\n* Fixed
  an issue with `DefaultSignatures` being used outside of the appropriate `#ifdef`
  that caused compilation issues on GHC 7.0.2.\n* Generalized the signature of `prism'`\n*
  Added `\\_Void` and `only` to `Control.Lens.Prism` and `devoid` to `Control.Lens.Lens`.\n*
  Added `\\_Nothing` to `Control.Lens.Prism`.\n* Added `devoid` and `united` to `Control.Lens.Lens`.\n\n3.8.5\n-----\n*
  Fixed more sporadic issues in doctests, caused by carrying flags from `$setup` between
  modules.\n\n3.8.4\n-----\n* Renamed `strippingPrefix` to `prefixed`, `strippingSuffix`
  to `suffixed`. Left the old names as deprecated aliases.\n* Fixed issues with the
  test suite caused by `doctests` carrying flags from the `$setup` block between modules.\n*
  Benchmarks now use `generic-deriving` rather than `ghc-prim` directly, like the
  rest of the package.\n* Added `Generics.Deriving.Lens`, which is now simply re-exported
  from `GHC.Generics.Lens`.\n\n3.8.3\n-----\n* Added `strippingSuffix` and `stripSuffix`
  to `Data.Data.Lens`\n* Added `unpackedBytes` and `unpackedChars` to `Data.ByteString.*.Lens`\n*
  Added `unpacked` to `Data.Text.*.Lens`\n* Added `(#)` as an infix form of `review`
  to ease using a `Prism` like a smart constructor in `Control.Lens.Review`.\n\n3.8.2\n-----\n*
  Added a notion of `Handleable(handler, handler_)` to `Control.Exception.Lens` to
  facilitate constructing a `Handler` from an arbitrary `Fold` or `Prism`.\n* Added
  a notion of `Handler` and `catches` to and `Control.Monad.Error.Lens` to mirror
  the `Control.Exception` and `Control.Monad.CatchIO` constructions.\n* Added additional
  doctests and documentation.\n* Improved error messages and support for types with
  arguments in `makeFields`.\n\n3.8.1\n-----\n* Fixed a bug in `makeFields` in hierarchical
  modules.\n\n3.8.0.2\n-------\n* Fixed an issue with running the `doctests` test
  suite when an older version of `semigroups` is installed.\n\n3.8\n---\n* Overall:\n
  \ * Replaced each of the different `SimpleFoo` type aliases with `Foo'` throughout.
  The various `Simple` aliases can still be found in `Control.Lens.Simple` but are
  now deprecated.\n  * Made sweeping changes to `Iso` and `Prism` and `Indexed` lenses
  internally. They are now based on `profunctors`. This affects how you use `indexed`
  in the resulting code and dramatically changed the meaning of `Overloaded`.\n  *
  Generalized combinators to pass through indices unmodified wherever possible and
  added indexed variants to existing combinators. There are hundreds of these changes
  and they would swamp this list.\n* `Control.Exception.Lens`\n  * This module was
  created to add combinators and prisms that make it possible to work with GHC's extensible
  exceptions and monad transformer stacks more easily. There are knock-on changes
  in `Data.Dynamic.Lens`, `System.Exit.Lens`, and `System.IO.Error.Lens`.\n* `Control.Lens.At`\n
  \ * Moved `At(at)` and `Contains(contains)` and factored out `Ixed(ix)`.\n  * Deprecated
  `_at` and `resultAt`.\n  * Removed various `ordinal` and `ix` combinators, which
  are subsumed by `Ixed(ix)`.\n* `Control.Lens.Cons`\n  * Consoldiated the various
  `_head`, `_tail`, `_init` and `_last` traversals that were scattered around the
  place into a pair of `Cons` and `Snoc` classes that provide `_Cons` and `_Snoc`
  prisms respectively, and combinators that build on top.\n* `Control.Lens.Each`\n
  \ * Generalized the signature of `Each` to permit it to provide an `IndexedSetter`
  for `((->) e)`.\n  * `Each` now uses an `Index` type family that is shared with
  `At`, `Ixed` and `Contains` to indicate these operations are related.\n* `Control.Lens.Equality`\n
  \ * Added as a stronger form of `Iso` that can be used to safely cast.\n  * Added
  the adverb `simply`, which can be used to simplify the types of most combinators
  in the library so they only take a simple lens, simple traversal, etc as their first
  argument instead. e.g. `simply view` forces `a ~ b`, `s ~ t` in the argument to
  `view`.\n* `Control.Lens.Fold`\n  * Added `foldr1Of'` and `foldl1Of'`.\n  * Added
  `has` and `hasn't`.\n* `Control.Lens.Indexed`\n  * The various indexed combinators
  for each type were distributed to their respective modules. This module grew to
  encompass the remaining index-specifics.\n  * Added `index` and `indices`, and removed
  `iwhere` and `iwhereOf`. Use `itraversed.indices even` and `bar.indices (>3)` instead.\n*
  `Control.Lens.Internal`\n  * This module was exploded into more manageable component
  modules.\n* `Control.Lens.Iso`\n  * `Strict(strict)` is now a `Simple Iso`.\n  *
  Added `magma` and `imagma` which can be used to provide a 'debugging view' of a
  `Traversal`.\n* `Control.Lens.Lens`\n  * Restructuring split this module out from
  `Control.Lens.Type` and merged the contents `Control.Lens.IndexedLens`.\n* `Control.Lens.Level`\n
  \ * This module was created to provide the breadth-first-search Traversals `levels`
  and `ilevels` which can be used to do (optionally depth-limited) breadth-first searches
  through arbitrary traversals reaching all leaves at finite depth in finite time.
  To use these in full accordance with the laws you should restrict yourself to commutative
  operations and finite containers, but they are useful even in the absence of these
  properties.\n* `Control.Lens.Loupe`\n  * In the interest of consistency, the `Loupe`
  alias has been deprecated in favor of `ALens`.\n  * `Loupe` (and `ALens`) are now
  defined in terms of `Pretext` rather than `Context`. This permits them to be cloned
  at a reduced cost reducing the call for `ReifiedLens`.\n* `Control.Lens.Operators`\n
  \ * Added this module for users who insist on qualified use, but want access to
  the operators. They can `import qualified Control.Lens as Lens` and `import Control.Lens.Operators`
  unqualified.\n* `Control.Lens.Prism`\n  * Added `prism'` to construct `SimplePrism`s.\n*
  `Control.Lens.Reified`\n  * Consolidated the various `ReifiedFoo` definitions into
  one module.\n* `Control.Lens.Representable`\n  * This module was removed. Its functionality
  may be split out into a separate package, but currently the `linear` package exports
  is own `Linear.Core` module to provide this functionality. It was taking lots of
  useful names for little functionality and didn't feel like the rest of the API.\n*
  `Control.Lens.Review`\n  * This module now factors the `review` functionality out
  of `Prism` and exposes `unto`, which is to `review` what `to` is to `view`.\n* `Control.Lens.Setter`\n
  \ * Added `contramapped` and `argument` for mapping over inputs.\n* `Control.Lens.Simple`\n
  \ * Removed the infix lens aliases and repurposed the module to house the now deprecated
  `SimpleFoo` type aliases, which were replaced universally with `Foo'`.\n* `Control.Lens.TH`\n
  \ * `makeLenses` now generates `Lens'` and `Traversal'` where appropriate\n  * Added
  `makePrisms` as a generalized `makeIso` that automatically generates a `Prism` for
  each constructor. `makePrisms` generates names with an `_Foo` convention. This was
  consolidated upon throughout the library to reduce namespace conflicts between prisms
  and lenses.\n  * Added `makeFields`, which generates classes for each individual
  field in a data type.\n  * Added `makeWrapped`, which automatically generates a
  `Wrapped` instance for a newtype.\n* `Control.Lens.Type`\n  * This module was repurposed
  to provide a single home for all the standard lens-like type aliases used when producing
  lenses. You still need to go to their respective modules to find the types for consuming
  lens-likes if you want to generate your own lens combinators\n* `Control.Lens.Wrapped`\n
  \ * Added `wrapped'` and `unwrapped'` for scenarios where you need the help with
  type inference.\n* `Control.Lens.Zipper`\n  * Converted `Zipper` to walk a magma
  based on the original structure and to use indices from indexed traversals when
  restoring from tape. This also means that when zipping around within a balanced
  structure with ascending keys `moveTo` can operate in logarithmic time, but required
  changing the `Zipper` type to add the index type.\n* `Data.Bits.Lens`\n  * Added
  `byteAt`.\n* `Data.ByteString.Lens`\n  * `Data.ByteString.Lazy.Lens` now uses `Int64`-based
  indexing.\n  * The `Traversal` for strict `ByteStrings` now construct a balanced
  tree up to a given grain size. This permits zipper based seeking to operate in logarithmic
  time and speeds up many traversals.\n* `Numeric.Lens`\n  * Created. `base` shows
  and reads integers at base-2 through base-36. `integral` can be used as a safe `fromInteger`/`toInteger`.\n\n3.7.6
  [maintenance release]\n-----\n* Fixed an issue with the `Complex` `Each` instance.\n\n3.7.5
  [maintenance release]\n-----\n* Fixed an errant `LANGUAGE` pragma\n\n3.7.4 [maintenance
  release]\n-----\n* Backported the API for `ALens` and `ALens'` to support `snap`
  builds on old platforms.\n\n3.7.3 [maintenance release]\n-----\n* Removed my intra-package
  dependency upper bounds for my own packages. In particular this enables us to work
  with `semigroups` 0.9.\n* Switched to `transformers-compat` to avoid having unbuilding
  modules at the top of the documentation, and to ease 3rd party compatibility.\n*
  Updated `Setup.lhs` to be compatible with Cabal 1.17\n\n3.7.2 [maintenance release]\n-----\n*
  Bug fix for `Magnify`. It was missing functional dependencies to determine its `k`
  parameter from `m` or `n`.\n\n3.7.1.2 [maintenance release]\n-------\n* Made the
  doctest test suite hide all but the exact versions of packages used to build this
  package to avoid problems with complicated user environments.\n* Removed doctests
  based on `:t` as they are fragile and break across GHC versions.\n* Fixed GHC 7.0.4
  compatibility by guarding `DefaultSignatures` in `Control.Lens.Each`.\n\n3.7.1.1
  [maintenance release]\n-------\n* Removed tests that will (likely) fail in the presence
  of `hashable` 1.2\n\n3.7.1\n-----\n* Added `preuse`, `preuses` to `Control.Lens.Fold`\n*
  Added `Each(each)` to `Control.Lens.Each` for indexed traversal of potentially monomorphic
  containers.\n* Added `indexing64` and `traversed64` for help with large containers.\n*
  Generalized the type signature of `choosing`.\n* Exported `unwrapped` from `Control.Lens.Wrapped`.\n*
  Support for `hashable` 1.2\n* Added `(??)` to `Control.Lens.Combinators`.\n\n3.7.0.2\n-------\n*
  Fixed flagging for Safe Haskell.\n* Fixed examples.\n* Cleaned up the statement
  of the Prism laws.\n\n3.7.0.1\n-------\n* Corrected bounds for hashable.\n* Fixed
  compatibility with Haskell Platform 2011.4.0.0 -- you may have to install with --constraint=\"transformers
  = 0.2.2.0\" to avoid getting new mtl and transformer versions installed.\n\n[3.7](https://github.com/ekmett/lens/issues?milestone=11&page=1&state=closed)\n-----\n*
  Renamed `Projection` to `Prism`.\n* Implemented a complete redesign of the way `Iso`
  and `Prism` are handled internally. Any `Iso` can now be used as a `Prism`.\n* The
  `isos` combinator is no longer required. `iso` can now be used to construct an `Iso`.\n*
  Changes to the signature of `from` and `under` were necessitated by the new design.\n*
  Added `Control.Lens.Wrapped` providing a canonical isomorphism for newtypes.\n*
  Repurposed `ala` to be closer to the original design in `newtype`, but added `au`
  and `alaf`.\n* Added `_magnitude`, `_phase` and `_conjugate` to `Data.Complex.Lens`.
  Renamed other lenses for consistency: `_realPart`, `_imagPart`, `_polar`.\n* Promoted
  `_left` and `_right` to prisms and moved them to `Control.Lens.Prism`.\n* Generalized
  `view` and `views` to subsume the old functionality of `peruse` and `peruses`.\n*
  Generalized `review` and `reviews` to both return a `MonadReader` and to work on
  a `Projection`.\n* Added `view'`/`views'` and `use'`/`uses'` for `Simple` access
  to the environment/state.\n* Added `set'`, a `Simple` version of `set`.\n* Added
  `reuse` : `use` :: `review` : `view` and `reuses` : `uses` :: `reviews` : `views`
  for working a `Projection` from the current `MonadState`.\n* Removed many isomorphisms
  for various newtypes. `_const`, `identity`, `_sum`, etc. Use `wrapping Const`, `wrapping
  Identity`, etc.\n* Removed `Data.Monoid.Lens` now that its newtypes are instances
  of `Wrapped`, exporting the (`<>=`)-variants from `Control.Lens.*`.\n* Renamed `via`
  to `cloneIso` for consistency.\n* Moved `Indexed(..)` to `Control.Lens.Classes`.\n*
  Renamed `index` to `indexed` to reduce conflicts with third-party libraries.\n*
  Added `curried` and `uncurried` to `Control.Lens.Iso`.\n* Added `Strict(strict)`
  for ad hoc overloading of conversions between strict and lazy variants of `ByteString`
  and `Text`.\n* Bug fixes for `tugTo` and `jerkTo`.\n* These no longer traverse in
  the wrong direction: `scanl1Of`, `scanr1Of`, `mapAccumLOf`, and `mapAccumROf`.\n*
  Added `anon` to `Control.Lens.Iso`.\n* Generalized the types of the `Control.Lens.Zipper`
  combinators to work with other MonadPlus instances.\n* Added `withins` to `Control.Lens.Zipper`
  now that they can work better with [].\n* Added `singular` and `unsafeSingular`
  to `Control.Lens.Traversal` to assert a `Traversal` is a `Lens`, a `Fold` is a `Getter`
  or a `MonadicFold` is an `Action`.\n* Generalized `sequenceAOf_`'s type to match
  `sequenceA_`.\n* Renamed `up`/`down`/`left`/`right` to `upward`/`downward`/`leftward`/`rightward`
  to reduce conflicts -- in particular with `Control.Arrow`.\n* Readded `leftmost`
  and `rightmost` due to the verbosity of `farthest leftward`/`farthest rightward`.\n*
  Added `preview`/`previews`/`firstOf` and deprecated `headOf`.\n* Added `iview`/`iviews`/`iuse`/`iuses`
  to `Control.Lens.IndexedGetter`.\n* We've generalized the type of Bazaar and provided
  generalized variants of `partsOf`, etc. that used it.\n\n3.6.0.4 [maintenance release]\n-------\n*
  Added support for `test-framework` 0.8\n\n3.6.0.3 [maintenance release]\n-------\n*
  Added support for `test-framework` 0.7\n\n3.6.0.2 [maintenance release]\n-------\n*
  Added more explicit dependencies to the doctest suite.\n* Disabled the 'expected
  failure' quickcheck tests that occasionally would fail with internal QuickCheck
  errors.\n\n3.6.0.1 [maintenance release]\n-------\n* Added explicit dependency on
  containers and unordered-containers to the doctest suite\n\n[3.6](https://github.com/ekmett/lens/issues?milestone=9&state=closed)\n---\n*
  Added `upon` (along with variants of it) to `Data.Data.Lens`, which can be used
  to generate a `Traversal` from a field accessor or any function that returns, unmodified,\n
  \ a single field that would be visited by `template`.\n* Added some missing `examples/`
  files to the distribution.\n* Renamed `Data.Bits.Lens.traverseBits` to `bits`.\n*
  Removed `(^!?)`, which was an alias for `(^?!)`.\n* Removed the need for `Trustworthy`
  by changing the implementation of `coerce` for `BazaarT`.\n* Moved BazaarT to `Control.Lens.Internal`.\n*
  Added `(<&>)` to `Control.Lens.Combinators`.\n* `element` and `elementOf` are now
  indexed traversals rather than lenses and have moved to `Control.Lens.IndexedTraversal`.
  This both fixes their former partiality and lets you use chain indexed combinators
  with them.\n* Added `elements` and `elementsOf` as indexed traversals for ordinal
  indexing into regular traversals that generalize `element` and `elementOf`.\n* Renamed
  `Data.Complex.Lens.traverseComplex` to `complex`.\n* Changed `Data.Complex.Lens.polarize`
  to a `Simple Iso`, due to the `RealFloat` constraint causing inference problems.\n*
  Renamed `traverseLeft` and `traverseRight` to `_left` and `_right` respectively.\n*
  Renamed `traverseSlice`, `traverseFrom`, and `traverseTo` in `Data.Sequence.Lens`
  to `sliced`, `slicedFrom`, and `slicedTo` respectively.\n* Renamed `traverseAt`
  to `_at` in `Control.Lens.IndexedTraversal`.\n* Renamed `traverseArray` to `_array`
  in `Data.Array.Lens`.\n* Renamed and made the combinators in `Control.Lens.Zipper`
  more compositional to reduce third-party naming conflicts down to just `left` and
  `right`.\n* Renamed `&=` and `|=` to `.&.=` and `.|.=` for consistency, mutatis
  mutandis their related operations.\n* Added a `Plated` instances for `Language.Haskell.TH`
  types.\n* Renamed `atIndex` and `atIndices` in `Data.Vector.Lens` and `Data.Vector.Generic.Lens`
  to `ordinal` and `ordinals` to match `Data.Sequence.Lens`\n\n3.5.1\n-----\n* Improved
  SafeHaskell inference.\n\n[3.5](https://github.com/ekmett/lens/issues?milestone=8&state=closed)\n---\n*
  Fixed a potential SafeHaskell issue where a user could use `undefined` to derive
  `unsafeCoerce`. You now have to import an explicitly\n  Unsafe module and create
  an instance of `Trustworthy` for your type to cause this behavior, so if you do,
  it's on your head, not mine. :)\n* Renamed `EvilBazaar` to `BazaarT`.\n* Moved a
  lot of internals around. Most notably, `Gettable`, `Settable` and `Effective` have
  moved to `Control.Lens.Classes`.\n* Exposed `partsOf'` and `unsafePartsOf'` in `Control.Lens.Traversal`
  to reduce reliance on `BazaarT` in `Control.Lens.Zipper`\n\n[3.4](https://github.com/ekmett/lens/issues?milestone=7&state=closed)\n---\n*
  Renamed `(%)` to `(&)` and `(^%)` to `(^&)`. This avoids the conflict with `Data.Ratio`,
  which was our highest priority conflict with a third party library.\n* Switched
  to a more liberal type for `ignored`\n* Removed some \"`isplitting`\" bad combinators
  from `Control.Lens.IndexedFold`.\n* Made `indexed`, `taking`, and `dropping` and
  `elementOf` lazier and capable of dealing with infinite traversals and infinite
  folds.\n* Improved `Indexing` to support infinite traversals and folds.\n* Removed
  some of the more redundant combinators from `Control.Lens.Plated`, which already
  had existing aliases in the rest of the traversal API.\n* Moved `partsOf`, `holesOf`,
  and `elementOf` into `Control.Lens.Traversal`.\n* Renamed `query` to `peruse` and
  `queries` to `peruses`. These are much less contentious names,\n  both contain `use`
  in their name for analogy to `use` and `uses` and the word is about reading.\n*
  Simpler `simple`.\n* Added `enum` and `non` to `Control.Lens.Iso`.\n* Added `(^?!)`
  to `Control.Lens.Fold` for unsafe access to the head of a `Fold`.\n* Changed `_head`,
  `_tail`, `_init` and `_last` to traversals in `Data.List.Lens` and `Data.Sequence.Lens`.\n*
  Eliminated `traverseHead`, `traverseTail`, `traverseInit` and `traverseLast`.\n*
  `partsOf` and `unsafePartsOf` can now also be applied to a `Fold` yielding a `Getter`
  or to a `MonadicFold` yielding an `Action`.\n\n3.3\n---\n* Redefined `simple` and
  moved it to `Control.Lens.Iso`. Instead of using `simple l` you can now compose
  `l.simple` or `simple.l` providing more nuanced control and a more compositional
  API.\n* Moved the various `foo#` combinators used to emit cleaner core into an unexported
  module, `Control.Lens.Unsafe`. This removes `MagicHash` from the public API.\n*
  Removed the `bazaar#` and `runBazaar#` coercions that caused issues on GHC HEAD.\n*
  Changed the default definition of `plate` to `uniplate` from `ignored`.\n* Added
  `Data.Vector.Lens` and instances for `Data.Vector`.\n* Added support for the `split`
  package, which is now part of the Haskell platform.\n* Removed redundant `Data.List.traverseList`.
  Use `itraversed` or `traverse` instead.\n* Moved `(:<->)` to `Control.Lens.Simple`.\n*
  Fixed a bug in `Control.Lens.TH` that was causing `makeIso` not to work.\n* Added
  `lifted` to `Control.Lens.Setter` for mapping over monads.\n* Added `beside` to
  `Control.Lens.Traversal`.\n* Removed the operators from `Data.List.Lens`, they broke
  the overall pattern of the rest of the API, and were terrible clutter.\n* Fixed
  a bug that caused `resultAt` to give wrong answers most of the time.\n* Changed
  `resultAt` to an `IndexedLens` and moved it to `Control.Lens.IndexedLens`\n* Changed
  `ignored` to an `IndexedTraversal` and moved it to `Control.Lens.IndexedTraversal`\n*
  We've relinquished the name `value`.\n\n3.2\n---\n* Made `elementOf` lazier and
  moved it from `Control.Lens.Traversal` to `Control.Lens.Plated`.\n* Made `holesOf`
  and `partsOf` lazier to deal with infinite structures.\n* Resolved issue #75. We
  now generate nicer core for most `Setter` and `Fold` operations, and some others.\n*
  Made lenses for field access like `_1`, `_2`, etc. lazier.\n* Added `Control.Lens.Loupe`,
  which provides a limited form of `Lens` that can be read from and written to and
  which can compose\n  with other lenses, but can also be returned in a list or as
  a monadic result, but cannot be used directly for most combinators\n  without cloning
  it first. It is easier to compose than a `ReifiedLens`, but slightly slower.\n*
  Moved (`:=>`) and (`:->`) into `Control.Lens.Simple`, which is not exported by `Control.Lens`
  by default to reduce name conflicts with third party libraries.\n\n3.1\n---\n* Simplified
  the type of `filtered`, so that it can be composed with other folds rather than
  be parameterized on one. Included the caveat that the new `filtered` is still not
  a legal `Traversal`, despite seeming to compose like one.\n* Renamed `ifiltered`
  to `ifiltering`, and while it still must take an indexed lens-like as an argument,
  I included a similar caveat about the result not being a legal `IndexedLens` when
  given an `IndexedLens`. The function was renamed because its signature no longer
  lined up with the new `filtered` and the gerundive '-ing' suffix has come to indicate
  an operator that transformers another lens/traversal/etc. into a new one.\n* Added
  `taking` and `dropping` to `Control.Lens.Traversal`.\n\n3.0.6\n-----\n* Alpha-renamed
  all combinators to a new scheme. Instead of `Foo a b c d`, they now follow `Foo
  s t a b`. This means that you don't need to alpha rename everything in your head
  to work through the examples, simplifies exposition, and uses s and t for common
  state monad parameters. Thanks go to Shachaf Ben-Kiki for the grunt work of slogging
  through hundreds of definitions by hand and with regular expressions!\n* Restored
  lenses to `Trustworthy` status so they can be used with Safe Haskell once more.\n\n3.0.5\n-----\n*
  Fixed a bug in `rights1` and `lefts1` in `Control.Lens.Zipper` which would cause
  them to loop forever when given a 0 offset.\n\n3.0.4\n-----\n* Added `?~`, `<?~`,
  `?=` and `<?=` to `Control.Lens.Setter` for setting the target(s) of a Lens to `Just`
  a value. They are particularly useful when combined with `at`.\n\n3.0.3\n-----\n*
  Refined the behavior of `substType` in `Control.Lens.TH` to match the behavior of
  `typeVarsEx` when moving under binders.\n\n\n3.0.2\n-----\n* Added `generateSignatures`
  option to `Control.Lens.TH` to allow the end user to disable the generation of type
  signatures for the\n  template-haskell generated lenses. This lets the user supply
  hand-written haddocks and more restricted signatures.\n\n3.0.1\n-----\n* Added `Control.Lens.Type.simple`.\n\n[3.0](https://github.com/ekmett/lens/issues?milestone=6&state=closed)\n---\n*
  Added `Control.Lens.Zipper`.\n* Added `<<~`, a version of `<~` that supports chaining
  assignment.\n* Added `:->`, `:=>`, and `:<->` as type operator aliases for `Simple
  Lens`, `Simple Traversal`, and `Simple Iso`  respectively.\n\n[2.9](https://github.com/ekmett/lens/issues?milestone=5&state=closed)\n---\n*
  Added `<<%~`, `<<.~`, `<<%=` and `<<.=` for accessing the old values targeted by
  a `Lens` (or a summary of those targeted by a `Traversal`)\n* Renamed `|>` to `%`,
  as `%~` is the lensed version of `%`, and moved it to `Control.Lens.Getter` along
  with a version `^%` with tighter\n  precedence that can be interleaved with `^.`\n*
  Upgraded to `doctest` 0.9, which lets us factor out common `$setup` for our doctests\n*
  Renamed `merged` to `choosing`. Added a simpler `chosen` operation to mirror `both`.\n*
  Added `Control.Lens.Projection`\n* Renamed `traverseException` to `exception` and
  `traverseDynamic` to `dynamic`, upgrading them to use `Projection`.\n* `makeClassy`
  now places each generated `Lens` or `Traversal` inside the class it constructs when
  possible.\n  This makes it possible for users to just export `HasFoo(..)`, rather
  than have to enumerate each lens in\n  the export list. It can only do that if it
  creates the class. If the `createClass` flag is disabled, then\n  it will default
  to the old behavior.\n* Added `performs` to `Control.Lens.Action` to mirror `views`
  in `Control.Lens.Getter`.\n\n[2.8](https://github.com/ekmett/lens/issues?milestone=4&state=closed)\n---\n*
  Restored compatibility with GHC 7.2. This required a major version bump due to making
  some MPTC-based default signatures conditional.\n\n2.7.0.1\n-------\n* Added the
  missing `Control.Lens.Combinators` to exported-modules! Its absence was causing
  it not to be included on hackage.\n\n[2.7](https://github.com/ekmett/lens/issues?milestone=3&state=closed)\n---\n*
  Generalized the signature of `Getting`, `Acting` and `IndexedGetting` to help out
  with the common user code scenario of needing to read\n  and then write to change
  types.\n* Documentation cleanup and additional examples.\n* Renamed `au` to `ala`,
  introducing further incompatibility with the `newtype` package, but reducing confusion.\n*
  Removed need for `Data.Map.Lens` and `Data.IntMap.Lens` by adding `TraverseMin`
  and `TraverseMax` to `Control.Lens.IndexedTraversal`.\n* Flipped fixity of `~:`
  and `<~:`\n* Added `++~`, `++=`, `<++~` and `<++=` to Data.List.Lens in response
  to popular demand.\n* Added `|>`, `<$!>` and `<$!` to `Control.Lens.Combinators`,
  which exports combinators that are often useful in lens-based code, but that\n  don't
  strictly involve lenses.\n* Added an HUnit-based test suite by @orenbenkiki\n\n2.6.1\n-----\n*
  Fixed bugs in `Traversal` code-generation.\n\n[2.6](https://github.com/ekmett/lens/issues?milestone=2&state=closed)\n---\n*
  Added build option `-f-inlining` to facilitate building with the various TH 2.8
  versions used by GHC 7.6 and HEAD.\n* Added build option `-f-template-haskell` for
  testing without template haskell. (Users should be able to assume TH is enabled;
  use this only for testing!)\n* Added support for generating a `Traversal` rather
  than a `Lens` when multiple fields map to the same name or some constructors are
  missing a field.\n* Removed `_` from the lens names in `System.FilePath.Lens`.\n*
  Added `iwhere`, `withIndices`, `withIndicesOf`, `indices` and `indicesOf` to ease
  work with indexed traversals\n* Added `assign` as an alias for `(.=)` in `Control.Lens.Setter`.\n*
  Added `~:`, `=:`, `<~:` and `<=:` to `Data.List.Lens`\n\n[2.5](https://github.com/ekmett/lens/issues?milestone=1&state=closed)\n---\n*
  Added `Control.Lens.Plated`, a port of Neil Mitchell's `uniplate` that can be used
  on any `Traversal`.\n* Added `Data.Data.Lens` with smart traversals that know how
  to avoid traversing parts of a structure that can't contain a given type.\n* Added
  `Data.Typeable.Lens` with `_cast` and `_gcast` like `traverseData`\n* Renamed `IndexedStore`
  to `Context` now that it is used in user-visible locations, and since I also use
  it as `uniplate`'s notion of a context.\n* Renamed `Kleene` to `Bazaar` -- \"a bazaar
  contains a bunch of stores.\"\n* Added `Comonad` instances for `Context` and `Bazaar`,
  so we can use stores directly as the notion of an editable context in uniplate\n*
  Compatibility with both sets of template haskell quirks for GHC 7.6.1-rc1 and the
  GHC 7.6.1 development head.\n* Renamed `children` to `branches` in `Data.Tree.Lens`.\n*
  Added `At` and `Contains` to `Control.Lens.IndexedLens`.\n* Added `FunctorWithIndex`,
  `FoldableWithIndex`, and `TraversableWithIndex` under `Control.Lens.WithIndex`\n*
  Added support for `unordered-containers`.\n\n2.4.0.2\n-------\n* GHC 7.6.1 development
  HEAD compatibility (but broke 7.6.1-rc1)\n\n2.4.0.1\n-------\n* Haddock cleanup\n\n2.4\n-----\n*
  Added the indexed `Kleene` store to `Control.Lens.Internal`\n* Moved `Gettable`,
  `Accessor`, `Settable` and `Mutator` to `Control.Lens.Internal`\n* Added `cloneTraversal`
  to `Control.Lens.Traversal`\n* Renamed `clone` to `cloneLens` in `Control.Lens.Type`\n*
  Generalized the type of `zoom` to subsume `focus`.\n* Removed `Focus(..)` from `Control.Lens.Type`.\n*
  Factored out `Control.Lens.Isomorphic`.\n* Moved many private types to `Control.Lens.Internal`\n*
  Added `conFields` to `Language.Haskell.TH.Lens`.\n* Added `System.FilePath.Lens`.\n\n2.3\n---\n*
  Added missing `{-# INLINE #-}` pragmas\n* Renamed `meanwhile` to `throughout` in
  `Control.Parallel.Strategies.Lens`\n* Added `Magnify` to `Control.Lens.Getter`.\n*
  Added `Zoom` to `Control.Lens.Type`.\n\n2.2\n---\n* Added `<&=`, `<&~`, `<|=`, and
  `<|~`\n* Moved `<>~`, `<<>~`, `<>=`, and `<<>=` to `Data.Monoid.Lens`\n* Template
  Haskell now uses eager binding to avoid adding dependencies.\n\n2.1\n---\n* Renamed
  `adjust` to `over`\n* Added `au`, `auf` and `under`\n* Added `Data.Monoid.Lens`\n*
  Increased lower dependency bound on `mtl` for cleaner installation.\n"
basic-deps:
  semigroupoids: ! '>=5 && <6'
  exceptions: ! '>=0.1.1 && <1'
  free: ! '>=4 && <6'
  void: ! '>=0.5 && <1'
  bytestring: ! '>=0.9.1.10 && <0.11'
  reflection: ! '>=2.1 && <3'
  base: ! '>=4.5 && <5'
  comonad: ! '>=4 && <6'
  unordered-containers: ! '>=0.2.4 && <0.3'
  text: ! '>=0.11 && <1.3'
  distributive: ! '>=0.3 && <1'
  kan-extensions: ! '>=5 && <6'
  filepath: ! '>=1.2.0.0 && <1.5'
  semigroups: ! '>=0.8.4 && <1'
  array: ! '>=0.3.0.2 && <0.6'
  base-orphans: ! '>=0.5.2 && <1'
  th-abstraction: ! '>=0.2.1 && <0.3'
  tagged: ! '>=0.4.4 && <1'
  containers: ! '>=0.4.0 && <0.6'
  bifunctors: ! '>=5.1 && <6'
  ghc-prim: -any
  contravariant: ! '>=1.3 && <2'
  mtl: ! '>=2.0.1 && <2.3'
  hashable: ! '>=1.1.2.3 && <1.3'
  transformers: ! '>=0.2 && <0.6'
  parallel: ! '>=3.1.0.1 && <3.3'
  template-haskell: ! '>=2.4 && <2.14'
  call-stack: ! '>=0.1 && <0.2'
  transformers-compat: ! '>=0.4 && <1'
  profunctors: ! '>=5.2.1 && <6'
  vector: ! '>=0.9 && <0.13'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.1'
- '1.1.1'
- '1.2'
- '1.3'
- '1.3.1'
- '1.4'
- '1.4.1'
- '1.5'
- '1.6'
- '1.7'
- '1.7.1'
- '1.8'
- '1.9'
- '1.9.1'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '2.4.0.2'
- '2.5'
- '2.6'
- '2.6.1'
- '2.7'
- '2.7.0.1'
- '2.8'
- '2.9'
- '3.0'
- '3.0.1'
- '3.0.2'
- '3.0.3'
- '3.0.4'
- '3.0.5'
- '3.0.6'
- '3.1'
- '3.2'
- '3.3'
- '3.4'
- '3.5'
- '3.5.1'
- '3.6'
- '3.6.0.1'
- '3.6.0.2'
- '3.6.0.3'
- '3.6.0.4'
- '3.7'
- '3.7.0.1'
- '3.7.0.2'
- '3.7.1'
- '3.7.1.1'
- '3.7.1.2'
- '3.7.2'
- '3.7.3'
- '3.7.4'
- '3.7.5'
- '3.7.6'
- '3.8'
- '3.8.0.1'
- '3.8.0.2'
- '3.8.1'
- '3.8.2'
- '3.8.3'
- '3.8.4'
- '3.8.5'
- '3.8.6'
- '3.8.7'
- '3.8.7.1'
- '3.8.7.2'
- '3.8.7.3'
- '3.9'
- '3.9.0.1'
- '3.9.0.2'
- '3.9.0.3'
- '3.9.1'
- '3.9.2'
- '3.10'
- '3.10.0.1'
- '3.10.1'
- '3.10.2'
- '3.10.3'
- '4.0'
- '4.0.1'
- '4.0.2'
- '4.0.3'
- '4.0.4'
- '4.0.5'
- '4.0.6'
- '4.0.7'
- '4.1'
- '4.1.1'
- '4.1.2'
- '4.1.2.1'
- '4.2'
- '4.3'
- '4.3.1'
- '4.3.2'
- '4.3.3'
- '4.4'
- '4.4.0.1'
- '4.4.0.2'
- '4.5'
- '4.6'
- '4.6.0.1'
- '4.7'
- '4.7.0.1'
- '4.8'
- '4.9'
- '4.9.1'
- '4.10'
- '4.11'
- '4.11.1'
- '4.12'
- '4.12.1'
- '4.12.2'
- '4.12.3'
- '4.13'
- '4.13.1'
- '4.13.2'
- '4.13.2.1'
- '4.14'
- '4.15'
- '4.15.1'
- '4.15.2'
- '4.15.3'
- '4.15.4'
- '4.16'
author: Edward A. Kmett
latest: '4.16'
description-type: markdown
description: ! 'Lens: Lenses, Folds, and Traversals

  ==================================


  [![Hackage](https://img.shields.io/hackage/v/lens.svg)](https://hackage.haskell.org/package/lens)
  [![Build Status](https://secure.travis-ci.org/ekmett/lens.svg)](http://travis-ci.org/ekmett/lens)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/lens.svg)](http://packdeps.haskellers.com/reverse/lens)


  This package provides families of [lenses](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Type.hs),
  [isomorphisms](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Iso.hs),
  [folds](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Fold.hs), [traversals](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Traversal.hs),
  [getters](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Getter.hs)
  and [setters](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Setter.hs).


  If you are looking for where to get started, [a crash course video](http://youtu.be/cefnmjtAolY?hd=1)
  on how `lens` was constructed and how to use the basics is available on youtube.
  It is best watched in high definition to see the slides, but the [slides](http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf)
  are also available if you want to use them to follow along.


  The [FAQ](https://github.com/ekmett/lens/wiki/FAQ), which provides links to a large
  number of different resources for learning about lenses and an overview of the [derivation](https://github.com/ekmett/lens/wiki/Derivation)
  of these types can be found on the [Lens Wiki](https://github.com/ekmett/lens/wiki)
  along with a brief [overview](https://github.com/ekmett/lens/wiki/Overview) and
  some [examples](https://github.com/ekmett/lens/wiki/Examples).


  Documentation is available through [github](http://ekmett.github.com/lens/frames.html)
  (for HEAD) or [hackage](http://hackage.haskell.org/package/lens) for the current
  and preceding releases.


  Field Guide

  -----------


  [![Lens Hierarchy](https://raw.githubusercontent.com/wiki/ekmett/lens/images/Hierarchy.png)](https://creately.com/diagram/h5nyo9ne1/QZ9UBOtw4AJWtmAKYK3wT8Mm1HM%3D)



  Examples

  --------


  (See [`wiki/Examples`](https://github.com/ekmett/lens/wiki/Examples))


  First, import `Control.Lens`.


  ```haskell

  ghci> import Control.Lens

  ```


  Now, you can read from lenses


  ```haskell

  ghci> ("hello","world")^._2

  "world"

  ```


  and you can write to lenses.


  ```haskell

  ghci> set _2 42 ("hello","world")

  ("hello",42)

  ```


  Composing lenses for reading (or writing) goes in the order an imperative programmer
  would expect, and just uses `(.)` from the `Prelude`.


  ```haskell

  ghci> ("hello",("world","!!!"))^._2._1

  "world"

  ```


  ```haskell

  ghci> set (_2._1) 42 ("hello",("world","!!!"))

  ("hello",(42,"!!!"))

  ```


  You can make a `Getter` out of a pure function with `to`.


  ```haskell

  ghci> "hello"^.to length

  5

  ```


  You can easily compose a `Getter` with a `Lens` just using `(.)`. No explicit coercion
  is necessary.


  ```haskell

  ghci> ("hello",("world","!!!"))^._2._2.to length

  3

  ```


  As we saw above, you can write to lenses and these writes can change the type of
  the container. `(.~)` is an infix alias for `set`.


  ```haskell

  ghci> _1 .~ "hello" $ ((),"world")

  ("hello","world")

  ```


  Conversely `view`, can be used as a prefix alias for `(^.)`.


  ```haskell

  ghci> view _2 (10,20)

  20

  ```


  There are a large number of other lens variants provided by the library, in particular
  a `Traversal` generalizes `traverse` from `Data.Traversable`.


  We''ll come back to those later, but continuing with just lenses:


  You can let the library automatically derive lenses for fields of your data type


  ```haskell

  data Foo a = Foo { _bar :: Int, _baz :: Int, _quux :: a }

  makeLenses ''''Foo

  ```


  This will automatically generate the following lenses:


  ```haskell

  bar, baz :: Lens'' (Foo a) Int

  quux :: Lens (Foo a) (Foo b) a b

  ```


  A `Lens` takes 4 parameters because it can change the types of the whole when you
  change the type of the part.


  Often you won''t need this flexibility, a `Lens''` takes 2 parameters, and can be
  used directly as a `Lens`.


  You can also write to setters that target multiple parts of a structure, or their
  composition with other

  lenses or setters. The canonical example of a setter is ''mapped'':


  ```haskell

  mapped :: Functor f => Setter (f a) (f b) a b

  ```


  `over` is then analogous to `fmap`, but parameterized on the Setter.


  ```haskell

  ghci> fmap succ [1,2,3]

  [2,3,4]

  ghci> over mapped succ [1,2,3]

  [2,3,4]

  ```


  The benefit is that you can use any `Lens` as a `Setter`, and the composition of
  setters with other setters or lenses using `(.)` yields

  a `Setter`.


  ```haskell

  ghci> over (mapped._2) succ [(1,2),(3,4)]

  [(1,3),(3,5)]

  ```


  `(%~)` is an infix alias for ''over'', and the precedence lets you avoid swimming
  in parentheses:


  ```haskell

  ghci> _1.mapped._2.mapped %~ succ $ ([(42, "hello")],"world")

  ([(42, "ifmmp")],"world")

  ```


  There are a number of combinators that resemble the `+=`, `*=`, etc. operators from
  C/C++ for working with the monad transformers.


  There are `+~`, `*~`, etc. analogues to those combinators that work functionally,
  returning the modified version of the structure.


  ```haskell

  ghci> both *~ 2 $ (1,2)

  (2,4)

  ```


  There are combinators for manipulating the current state in a state monad as well


  ```haskell

  fresh :: MonadState Int m => m Int

  fresh = id <+= 1

  ```


  Anything you know how to do with a `Foldable` container, you can do with a `Fold`


  ```haskell

  ghci> :m + Data.Char Data.Text.Lens

  ghci> allOf (folded.text) isLower ["hello"^.packed, "goodbye"^.packed]

  True

  ```


  You can also use this for generic programming. Combinators are included that are
  based on Neil Mitchell''s `uniplate`, but which

  have been generalized to work on or as lenses, folds, and traversals.


  ```haskell

  ghci> :m + Data.Data.Lens

  ghci> anyOf biplate (=="world") ("hello",(),[(2::Int,"world")])

  True

  ```


  As alluded to above, anything you know how to do with a `Traversable` you can do
  with a `Traversal`.


  ```haskell

  ghci> mapMOf (traverse._2) (\xs -> length xs <$ putStrLn xs) [(42,"hello"),(56,"world")]

  "hello"

  "world"

  [(42,5),(56,5)]

  ```


  Moreover, many of the lenses supplied are actually isomorphisms, that means you
  can use them directly as a lens or getter:


  ```haskell

  ghci> let hello = "hello"^.packed

  "hello"

  ghci> :t hello

  hello :: Text

  ```


  but you can also flip them around and use them as a lens the other way with `from`!


  ```haskell

  ghci> hello^.from packed.to length

  5

  ```


  You can automatically derive isomorphisms for your own newtypes with `makePrisms`.
  e.g.


  ```haskell

  newtype Neither a b = Neither { _nor :: Either a b } deriving (Show)

  makePrisms ''''Neither

  ```


  will automatically derive


  ```haskell

  neither :: Iso (Neither a b) (Neither c d) (Either a b) (Either c d)

  nor :: Iso (Either a b) (Either c d) (Neither a b) (Neither c d)

  ```


  such that


  ```haskell

  from neither = nor

  from nor = neither

  neither.nor = id

  nor.neither = id

  ```


  There is also a fully operational, but simple game of [Pong](https://github.com/ekmett/lens/blob/master/examples/Pong.hs)
  in the [examples/](https://github.com/ekmett/lens/blob/master/examples/) folder.


  There are also a couple of hundred examples distributed throughout the haddock documentation.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD2
