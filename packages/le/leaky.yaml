homepage: http://fremissant.net/leaky
changelog-type: text
hash: a7e5cbf35ea79d9cc793a638e235a14dfa0fcb5cf43b50f01214509e5e4a690b
test-bench-deps: {}
maintainer: Andrew Seniuk <rasfar@gmail.com>
synopsis: Robust space leak, and its strictification
changelog: ! "\n** 0.3.0.3 -> 0.4.0.0\n - deepseq-bounded major version bump again
  (OverloadedStrings! yummy)\n - there'll be two or three of these over the next month
  or so, then\n   thing'll likely get pretty quiet\n\n0.3.0.2 -> 0.3.0.3\n - figured
  out a few tricks\n - hopefully this upload is the ticket; sorry for the extra version
  uploads\n - cpphs is now again REQUIRED\n----\n - almost out of ideas...\n - (determined
  to thwart the rogue build reporter)\n - a non-Simple build type might help\n    -
  might help by simply getting ignored by this builder,\n      for one thing -- but
  who else might it affect adversely?...\n - ghc-paths won't help since that info
  isn't accessible in\n   the .cabal file anyway -- there's very little to help us
  there\n   it seems\n - I'm trying to use env, but the trouble is, the -optP args\n
  \  are reordered by GHC\n    - in particular, the -D options are always first, which\n
  \     ruins the hack since env chokes on those\n - if only we could write -pgmP\"env
  PATH=$PATH:blah cpphs\"!\n\n0.3.0.1 -> 0.3.0.2\n - once more...\n\n0.3.0.0 -> 0.3.0.1\n
  - I'll buck this cowboy yet...\n\n** 0.2.1.1 -> 0.3.0.0\n - deepseq-bounded major
  version bump\n\n0.2.1.0 -> 0.2.1.1\n - non-manual USE_CPPHS flag added (also in
  seqaid and in deepseq-bounded)\n   so that client build system can decide whether
  cpp is available, or\n   it needs to install and use cpphs\n\n0.2.0.1 -> 0.2.1.0\n
  - realised I should be using \"manual:true\" in all my .cabal flags,\n   or else
  the constraint solver is free to toggle them!!\n\n0.2.0.0 -> 0.2.0.1\n - added a
  note in the .cabal description field, about the\n   rogue build failure report\n\n**
  0.1.7.0 -> 0.2.0.0\n - deepseq-bounded had a major version bump\n - fixed cpphs
  missing dependency for seqaid (also affects this package)\n - more...\n\n"
basic-deps:
  base: ==4.*
  deepseq-generics: ==0.1.*
  deepseq-bounded: ! '>=0.8 && <1.0'
  cpphs: ! '>1.14'
  random: ==1.1
  generics-sop: ==0.1.*
  seqaid: ==0.4.0.*
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.6.0
- 0.1.7.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0.0
author: Andrew G. Seniuk
latest: 0.4.0.0
description-type: text
description: ! "\n\nThis leaky mini-project provides a Haskell program exhibiting
  classic\nspace leak behaviour.  It leaks in GHC 7.8.3 (and lower), even when\ncompiled
  -O2.\n\n\n  leaky-min-cppd.hs  - a tiny Haskell program that leaks in GHC 7.8.3
  -O2\n  leaky-min.hs       - like leaky-min-cppd.hs, with some alternatives\n  leaky.hs
  \          - a similar but elaborated example, with .cabal flags\n\n\nIn addition
  to the source files, more information can be found\nat the http://www.fremissant.net/leaky
  project homepage,\nincluding discussion links (cafe, reddit, etc.).\n\nThere may
  also be a community-editable version at the\nhttps://www.haskell.org/haskellwiki/Space_Leak
  wiki page.\n\n\nConfigure and build in place:\n\n >  cabal get leaky                     #
  download and unpack leaky\n >  cd leaky-0.1.0.0                    # (or whatever
  version it is)\n >  cabal configure && cabal build      # build in place\n\nRun
  by supplying a seed for the random number generator:\n\n >  ./dist/build/leaky/leaky
  234\n\n\nOr you may prefer to build in a sandbox:\n\n >  cabal get leaky\n >  cd
  leaky-0.1.0.0\n >  cabal sandbox init\n >  cabal install --only-dependencies\n >
  \ cabal install\n\nAnd to run:\n\n >  ./.cabal-sandbox/bin/leaky 234\n\n\nNOTE:
  If you don't build with Cabal, you will need to\nput options from leaky.cabal into
  your command line.\n\nAnyway, seqaid uses both the Cabal library and\nthe cabal
  executable, meaning that only FORCING_STRATEGY\nfrom 0 through 3 (refer to leaky.cabal)
  can work\nwtihout the presence of the leaky.cabal file.\n\n\nThe output is explained
  at http://www.fremissant.net/leaky/output.html\nor in the corresponding local document
  ./HTML/output.html.\n\n\nThe FORCING_STRATEGY CPP macro currently controls the leak
  and plug\nvariants, which are best set by editing the leaky.cabal file,reconfiguring\nand
  rebuilding (or reinstalling in the case of a sandbox).  See the\nincluded file rough-fs-twiddling-guide.txt
  for more details.\n\nThere are also some constants in leaky.hs you may like to adjust.\n\n\nIf
  you have a version of the compiler that does not leak for\nthe default variant of
  leaky, please let me know at rasfar@gmail.com,\nor on the reddit discussion:\n\n
  \ http://www.reddit.com/r/haskell/comments/2pscxh/ann_deepseqbounded_seqaid_leaky/\n\nIt's
  nice to share your thoughts.\n\n\nSept. 20, 2014 / Dec. 2014\nAndrew Seniuk\nrasfar
  on #haskell\n\n\n"
license-name: BSD-3-Clause
