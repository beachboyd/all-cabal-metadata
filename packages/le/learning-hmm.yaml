homepage: https://github.com/mnacamura/learning-hmm
changelog-type: markdown
hash: 78f019c83c22485898342ff7eee09d0a261a92142e11b04e5653f09694cdc8a4
test-bench-deps: {}
maintainer: Mitsuhiro Nakamura <m.nacamura@gmail.com>
synopsis: Yet another library for hidden Markov models
changelog: ! "Revision history for Haskell package learning-hmm\n===\n\n## Version
  0.3.2.2\n- Catch up with base-4.8\n\n## Version 0.3.2.1\n- Bug fix release\n\n##
  Version 0.3.2.0\n- Add function `euclideanDistance` which measures the Euclidean
  distance between\n  two models\n\n## Version 0.3.1.3\n- Bug fix release\n\n## Version
  0.3.1.2\n- Default the limit of Baum-Welch iteration to 10000 (in `baumWelch'`)\n\n##
  Version 0.3.1.1\n- Bug fix release\n\n## Version 0.3.1.0\n- Add function `baumWelch'`
  that performs the Baum-Welch algorithm and returns\n  a result locally maximizing
  its likelihood. This behaviour is different from\n  that of `baumWelch`, which returns
  a list of intermediate results.\n\n## Version 0.3.0.0\n- Add `Learning.IOHMM` which
  represents a class of input-output HMM\n- Delete `Learning.HMM.new`\n\n## Version
  0.2.1.0\n- Performance improvements with employing 'hmatrix'\n- `withEmission` now
  does iterative re-estimation based on the Viterbi path\n\n## Version 0.2.0.0\n-
  Remove dependency on the 'logfloat' package\n- Performance improvements\n\n## Version
  0.1.1.0\n- Add function `init` for random initialization\n- Add function `simulate`
  for running a Markov process\n\n## Version 0.1.0.0\n- Original version\n"
basic-deps:
  base: ! '>=4.7 && <5'
  containers: -any
  random-fu: -any
  deepseq: -any
  random-source: -any
  hmatrix: ! '>=0.16'
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
author: Mitsuhiro Nakamura
latest: 0.3.2.2
description-type: haddock
description: ! 'This library provides functions for the maximum likelihood

  estimation of discrete hidden Markov models. At present,

  only Baum-Welch and Viterbi algorithms are implemented for

  the plain HMM and the input-output HMM.'
license-name: MIT
