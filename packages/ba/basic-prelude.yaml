homepage: https://github.com/snoyberg/basic-prelude#readme
changelog-type: markdown
hash: efe61aec70e6f523435d46fcd18587f28febbb1bc7d20d20e5aa249d93ed9e96
test-bench-deps: {}
maintainer: michael@snoyman.com
synopsis: An enhanced core prelude; a common foundation for alternate preludes.
changelog: ! "## 0.7.0\n\n* Export applicative version of Foldable and Traversable
  functions [#72](https://github.com/snoyberg/basic-prelude/issues/72)\n* Generalize
  all IO functions to MonadIO [#75](https://github.com/snoyberg/basic-prelude/issues/75)\n*
  Use `foldl1` for `maximumBy` and `minimumBy` [#74](https://github.com/snoyberg/basic-prelude/issues/74)\n*
  Remove nonexistent `foldr'` from `Data.List` hiding list\n* Remove the `lifted-base`
  dependency. This means that `CorePrelude`\n  and `BasicPrelude` no longer expose
  any exception handling\n  functions. This is intentional: the new recommendations
  from this\n  library are to use an async-exception-aware exception handling\n  library,
  either\n  [safe-exceptions](https://haskell-lang.org/library/safe-exceptions)\n
  \ or [unliftio](https://www.stackage.org/package/unliftio).\n\n## 0.6.1.1\n\n* Add
  `HasCallStack` for `terror`\n\n## 0.6.1\n\n* Generalize `sum` and `product` to `Foldable`
  [#69](https://github.com/snoyberg/basic-prelude/issues/69)\n\n## 0.6.0\n\n* Export
  `show` from `Show` typeclass, and rename current `show` to `tshow` [#67](https://github.com/snoyberg/basic-prelude/issues/67)\n\n##
  0.5.2\n\n* Expose `bool`\n\n## 0.5.1\n\n* Expose `asum`\n* Deprecate `empty` (so
  it can be replaced with `Alternative`'s `empty`)\n\n## 0.5.0\n\n* Expose more Foldable/Traversable
  stuff\n\n## 0.4.1\n\n* terror\n\n## 0.4.0\n\n* Drop system-filepath\n\n## 0.3.13\n\n*
  Export converters between FilePath <-> Text, String. [#56](https://github.com/snoyberg/basic-prelude/pull/56)\n\n##
  0.3.12\n\n* Add `fromShow` [#55](https://github.com/snoyberg/basic-prelude/pull/55)\n\n##
  0.3.11\n\n* [Generalize `print`](https://github.com/snoyberg/basic-prelude/pull/51)\n\n##
  0.3\n\n* Moved a number of exports from @BasicPrelude@ to @CorePrelude@ and vice-versa.\n\n##
  0.2\n\n* Renamed `BasicPrelude` to `CorePrelude` and added a new @BasicPrelude@
  module\nprovided a full-featured `Prelude` alternative. Also added a number of new\nexports.\n\n##
  0.1\n\n* Initial version, code taken from @classy-prelude@ with a few minor tweaks.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  containers: -any
  hashable: -any
  transformers: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.3.4.0'
- '0.3.5.0'
- '0.3.6.0'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
- '0.3.11'
- '0.3.11.1'
- '0.3.12'
- '0.3.13'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.6.1'
- '0.6.1.1'
- '0.7.0'
author: Michael Snoyman, Dan Burton
latest: '0.7.0'
description-type: markdown
description: ! 'basic-prelude

  =============


  The premise of `basic-prelude` is that there are a lot of very commonly desired

  features missing from the standard `Prelude`, such as commonly used operators

  (`<$>` and `>=>`, for instance) and imports for common datatypes (e.g.,

  `ByteString` and `Vector`). At the same time, there are lots of other

  components which are more debatable, such as providing polymorphic versions of

  common functions.


  So `basic-prelude` is intended to give a common foundation for a number of

  alternate preludes. The package provides two modules: `CorePrelude` provides

  the common ground for other preludes to build on top of, while `BasicPrelude`

  exports `CorePrelude` together with commonly used list functions to provide a

  drop-in replacement for the standard `Prelude`.


  Users wishing to have an improved `Prelude` can use `BasicPrelude`. Developers

  wishing to create a new prelude should use `CorePrelude`.

'
license-name: MIT
