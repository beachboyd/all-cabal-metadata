homepage: http://haskell.org/haskellwiki/Unicode-symbols
changelog-type: ''
hash: ee659877e9de4446108a0a28f63abe00b90b4dfad3c30053a2e766f11e26e491
test-bench-deps: {}
maintainer: Roel van Dijk <roel@lambdacube.nl>
synopsis: Unicode alternatives for common functions and operators
changelog: ''
basic-deps:
  base: ! '>=4.8.0.0 && <5'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.3
- 0.1.4
- '0.2'
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.2.1.4
- 0.2.1.5
- 0.2.2
- 0.2.2.1
- 0.2.2.2
- 0.2.2.3
- 0.2.2.4
- 0.2.3
- 0.2.4
author: Roel van Dijk <roel@lambdacube.nl>
latest: 0.2.4
description-type: markdown
description: |
  This package defines Unicode symbol aliases for a number of functions
  and operators in the `base` package of the Haskell standard library.
  Many of these aliases enable the use of standard mathematical notation
  in place of ASCII approximations or textual names.  For example, `(∧)`
  (U+2227 LOGICAL AND) can be used in place of `(&&)` for boolean AND.

  All symbols are documented with their actual definition and their
  Unicode code point. They should be completely interchangeable with
  their definitions.

  # Versus the `UnicodeSyntax` language extension

  This library only provides Unicode aliases for *library* functions.
  If you want to use Unicode symbols for core language tokens, also
  enable the
  [`UnicodeSyntax`](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#unicode-syntax)
  language extension. This extension enables Unicode characters to be
  used to stand for certain ASCII character sequences, i.e. `→` instead
  of `->`, `∀` instead of `forall` and many others.

  # Credits

  Original idea by Péter Diviánszky.
license-name: BSD-3-Clause
