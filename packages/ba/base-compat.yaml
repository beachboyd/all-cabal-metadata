homepage: ''
changelog-type: markdown
hash: f3795c7048c104443600334c9ffa2f7cabc78cf45dc9cd6342d46c37facb9258
test-bench-deps: {}
maintainer: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@gmail.com>'
synopsis: A compatibility layer for base
changelog: ! "## Changes in 0.10.4 [2018.07.03]\n - Make more modules `Trustworthy`.
  In particular, fix a regression in which\n   `Prelude.Compat` was inferred as `Unsafe`
  by explicitly marking it as\n   `Trustwothy`.\n\n## Changes in 0.10.3 [2018.07.02]\n
  - Backport the proper fixity for `($!)`, which was accidentally omitted in\n   `base-compat-0.10.2`.\n\n##
  Changes in 0.10.2 [2018.07.02]\n - Sync with `base-4.12`/GHC 8.6\n - Backport `RuntimeRep`-polymorphic
  versions of `($!)` and `throw` to\n   `Prelude.Compat` and `Control.Exception.Compat`,
  respectively\n   (if using `base-4.10`/GHC 8.2 or later).\n - Introduce the `Data.Functor.Contravariant.Compat`
  module, which reexports\n   `Data.Functor.Contravariant` if using `base-4.12`/GHC
  8.6 or later.\n\n   See `Data.Functor.Contravariant.Compat` in the corresponding\n
  \  `base-compat-batteries` release for a version with a wider support window.\n\n##
  Changes in 0.10.1 [2018.04.10]\n - Add `Data.List.NonEmpty.Compat`.\n - Reexport
  `(Data.Semigroup.<>)` from `Data.Monoid.Compat` back to `base-4.9`.\n\n## Changes
  in 0.10.0 [2018.04.05]\n - Sync with `base-4.11`/GHC 8.4\n - Backport `Semigroup((<>))`
  to `Prelude.Compat`.\n\n   Note that the `Semigroup` class has only been in `base`
  since\n   `base-4.9`/GHC 8.0, so accordingly, this can only be backported back\n
  \  to GHC 8.0. If you wish to have a version of `Prelude.Compat` that backports\n
  \  `Semigroup` to older GHCs (by conditionally depending on the `semigroups`\n   library),
  use the `Prelude.Compat` module from the `base-compat-batteries`\n   package.\n
  - Backport `(<&>)` to `Data.Functor.Compat`\n - Backport `iterate'` to `Data.List.Compat`\n
  - Backport `showHFloat` to `Numeric.Compat`\n - Backport a `RuntimeRep`-polymorphic
  `withTypeable` function to\n   `Type.Reflection.Compat`. (This is only exported
  on `base-4.10`/GHC 8.2.)\n - Introduce the following modules, back until the oldest
  version of `base`\n   that can support backporting them. If you wish to use them
  in conjunction\n   with older versions of `base`, use the `base-compat-batteries`
  package.\n   - `Control.Monad.Fail.Compat` (back until `base-4.9`/GHC 8.0)\n   -
  `Control.Monad.IO.Class.Compat` (back until `base-4.9`/GHC 8.0)\n   - `Data.Bifunctor`
  (back until `base-4.8`/GHC 7.10)\n   - `Data.Bifoldable` and `Data.Bitraversable`
  (back until `base-4.10`/GHC 8.2)\n   - `Data.Functor.Compose.Compat`, `Data.Functor.Product.Compat`,
  and\n     `Data.Functor.Sum.Compat` (back until `base-4.9`/GHC 8.0)\n   - `Data.Functor.Identity.Compat`
  (back until `base-4.8`/GHC 7.10)\n   - `Data.Semigroup.Compat` (back until `base-4.9`/GHC
  8.0)\n   - `Data.Void.Compat` (back until `base-4.8`/GHC 7.10)\n   - `Numeric.Natural.Compat`
  (back until `base-4.8`/GHC 7.10)\n - Introduce versions of modules with the suffix
  `.Repl`. These simply reexport\n   the contents of their counterparts without the
  `.Repl` suffix to provide\n   a globally unique namespace to import from in the
  event one wants to import\n   `base-compat` modules into GHCi. (In `base-compat-batteries`,
  the\n   corresponding suffix is `.Repl.Batteries`.)\n\n## Changes in 0.9.3 [2017.04.10]\n
  - Sync with `base-4.10`/GHC 8.2\n - Backport `fromLeft`/`fromRight` to `Data.Either.Compat`\n
  - Backport implementations of `maximumBy`/`minimumBy` which use constant stack\n
  \  space to `Data.Foldable.Compat`\n - Backport `asProxyTypeOf` with a generalized
  type signature to\n   `Data.Proxy.Compat`\n - Backport `gcoerceWith` to `Data.Type.Coercion.Compat`\n
  - Backport `plusForeignPtr` to `Foreign.ForeignPtr.Compat`\n\n## Changes in 0.9.2\n
  - Allow building on the HaLVM\n\n## Changes in 0.9.1\n - Use the more efficient
  version of `replicateM` and `replicateM_` introduced\n   in `base-4.9`\n\n## Changes
  in 0.9.0\n - Sync with `base-4.9`/GHC 8.0\n - Weakened `RealFloat` constraints on
  `realPart`, `imagPart`, `conjugate`,\n   `mkPolar`, and `cis` in `Data.Complex.Compat`\n
  - Backport `Foreign.ForeignPtr.Safe` and `Foreign.Marshal.Safe`\n - Generalize `filterM`,
  `forever`, `mapAndUnzipM`, `zipWithM`, `zipWithM_`,\n   `replicateM`, and `replicateM_`
  in `Control.Monad` from `Monad` to\n   `Applicative`\n - Backport `.Unsafe.Compat`
  modules (for `Control.Monad.ST`,\n   `Control.Monad.ST.Lazy`, `Foreign.ForeignPtr`,
  and `Foreign.Marshal`)\n - Backport `forkFinally` and `forkOSWithUnmask` to `Control.Concurrent.Compat`\n
  - Backport `Data.Functor.Const`\n - Backport `modifyIORef'`, `atomicModifyIORef'`
  and `atomicWriteIORef` to\n   `Data.IORef.Compat`\n - `Data.Ratio.{denominator,numerator}`
  have no `Integral` constraint anymore\n - Backport `modifySTRef'` to `Data.STRef.Compat`\n
  - Export `String`, `lines`, `words`, `unlines`, and `unwords` to\n   `Data.String.Compat`\n
  - Generalize `Debug.Trace.{traceM, traceShowM}` from `Monad` to `Applicative`\n
  - Backport `errorWithoutStackTrace` to `Prelude.Compat`\n - Backport `unsafeFixIO`
  and `unsafeDupablePerformIO` to\n   `System.IO.Unsafe.Compat`\n\n## Changes in 0.8.2\n
  - Backport `bitDefault`, `testBitDefault`, and `popCountDefault` in\n   `Data.Bits.Compat`
  to all versions of `base`\n   - Backport `toIntegralSized` to `base-4.7`\n - Backport
  `nub` and `nubBy` (as well as `union` and `unionBy`, which are\n   implemented in
  terms of them) to fix logic error in `Data.List.Compat`\n - Backport `byteSwap16`,
  `byteSwap32`, and `byteSwap64` to `Data.Word.Compat`\n - Backport `fillBytes` in
  `Foreign.Marshal.Utils.Compat`\n - Backport `showFFloatAlt` and `showGFloatAlt`
  to `Numeric.Compat`\n\n## Changes in 0.8.1.1\n - Fixed Windows build\n\n## Changes
  in 0.8.1\n - Implement `setEnv` and `unsetEnv` in `System.Environment.Compat` (which
  were\n   ported from the `setenv` package). As a result, `base-compat` now depends\n
  \  on `unix` on POSIX-like operating systems.\n - Drop GHC 6.12 (and `base-4.2.0.0`)
  compatibility\n\n## Changes in 0.8.0.1\n - Retrospective version bump updating the
  changelog to reflect the changes\n   made in 0.8.0\n\n## Changes 0.8.0\n - All orphan
  instances were split off into a separate package,\n   [`base-orphans`](https://github.com/haskell-compat/base-orphans)\n
  - `base-compat` no longer redefines the data types `Down` and `Alt`. See\n   [here](https://github.com/haskell-compat/base-compat/issues/17)
  for\n   the discussion that led to this change.\n - Update `Control.Monad.Compat`
  for `base-4.8.0.0`\n - Update `Data.List.Compat` for `base-4.8.0.0`\n - Update `Data.Foldable.Compat`
  for `base-4.8.0.0`\n\n## Changes in 0.7.1\n - Backported `Alt` to `Data.Monoid.Compat`\n
  - Backported `Down` to `Data.Ord.Compat`\n\n## Changes in 0.7.0\n - Add functions
  and orphan instances introduced by changes to\n   `base-4.7.0.0` and `base-4.8.0.0`\n\n##
  Changes in 0.6.0\n - Update `Prelude.Compat` for `base-4.8.0.0` and AMP\n\n## Changes
  in 0.5.0\n - Remove Control.Exception.Base.Compat and GHC.Exception.Compat\n - Add
  System.Exit.Compat.die\n - Compatibility with base-4.7.1\n\n## Changes in 0.4.1\n
  - Add `setEnv` and `unsetEnv` to `System.Environment.Compat`\n\n## Changes in 0.4.0\n
  - Major refactoring: base-compat no longer aims to replace all base,\n   only new
  code is included in module .Compat\n - Removed stubbed modules\n - Removed generation
  scripts\n\n## Changes in 0.3\n - Added functions from Base 4.7 (bool, isLeft, isRight)\n
  - Added instances from Base 4.7 (Either Foldable, Traversable,...)\n\n## Changes
  in 0.2.1\n - Fix build on windows\n\n## Changes in 0.2.0\n - Re-export everything
  from base\n - provides access to `VERSION_base` and `MIN_VERSION_base` CPP macros
  (with\n   `#include \"base-compat.h\"`)\n - Do not re-export `System.IO.Error.catch`
  from `Prelude` for `base` < 4.6.0\n - Add `Eq`/`Ord` instance for `ErrorCall`\n
  - Remove `GHC.IOBase`, `GHC.Handle`, `Control.Concurrent.QSem`,\n   `Control.Concurrent.QSemN`,
  `Control.Concurrent.SampleVar`, `Data.HashTable`\n\n## Changes in 0.1.0\n - Remove
  getExecutablePath, it did not work with GHC < 7.2 (patches welcome!)\n - Add `<>`\n"
basic-deps:
  unix: -any
  base: ! '>=4.3 && <5'
all-versions:
- '0.8.0'
- '0.8.0.1'
- '0.8.1.1'
- '0.8.2'
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.3'
- '0.10.0'
- '0.10.1'
- '0.10.4'
author: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@gmail.com>'
latest: '0.10.4'
description-type: markdown
description: ! "# A compatibility layer for `base`\n[![Hackage](https://img.shields.io/hackage/v/base-compat.svg)][Hackage:
  base-compat]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/base-compat.svg)](http://packdeps.haskellers.com/reverse/base-compat)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-MIT-brightgreen.svg)][tl;dr Legal:
  MIT]\n\n[Hackage: base-compat]:\n  http://hackage.haskell.org/package/base-compat\n
  \ \"base-compat package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n
  \ \"The Haskell Programming Language\"\n[tl;dr Legal: MIT]:\n  https://tldrlegal.com/license/mit-license\n
  \ \"MIT License\"\n\n## Scope\n\nThe scope of `base-compat` is to provide functions
  available in later versions\nof base to a wider (older) range of compilers.\n\nIn
  addition, successful library proposals that have been accepted to be part of\nupcoming
  versions of `base` are also included.  This package is not intended to\nreplace
  `base`, but to complement it.\n\nNote that `base-compat` does not add any orphan
  instances.  There is a separate\npackage [`base-orphans`](https://github.com/haskell-compat/base-orphans)
  for\nthat.\n\nIn addition, `base-compat` only backports functions. In particular,
  we\npurposefully do not backport data types or type classes introduced in newer\nversions
  of `base`. For more info, see the\n[Data types and type classes](#data-types-and-type-classes)\nsection.\n\n`base-compat`
  is intentionally designed to have zero dependencies. As a\nconsequence, there are
  some modules that can only be backported up to certain\nversions of `base`. If an
  even wider support window is desired in these\nscenarios, there also exists a `base-compat-batteries`
  package which augments\n`base-compat` with certain compatibility package dependencies.
  For more info,\nsee the [Dependencies](#dependencies) section.\n\n## Basic usage\n\nIn
  your cabal file, you should have something like this:\n\n```\n  build-depends:      base
  \             >= 4.3\n                    , base-compat       >= 0.9.0\n```\n\nThen,
  lets say you want to use the `isRight` function introduced with\n`base-4.7.0.0`.
  \ Replace:\n\n```\nimport Data.Either\n```\n\nwith\n\n```\nimport Data.Either.Compat\n```\n\n_Note
  (1)_: There is no need to import both unqualified.  The `.Compat` modules\nre-exports
  the original module.\n\n_Note (2)_: If a given module `.Compat` version is not defined,
  that either\nmeans that:\n\n* The module has not changed in recent base versions,
  thus no `.Compat` is\n  needed.\n* The module has changed, but the changes depend
  on newer versions of GHC, and\n  thus are not portable.\n* The module has changed,
  but those changes have not yet been merged in\n  `base-compat`: patches are welcomed!\n\n##
  Using `Prelude.Compat`\n\nIf you want to use `Prelude.Compat` (which provides all
  the\nAMP/Traversable/Foldable changes from `base-4.8.0.0`), it's best to hide\n`Prelude`,
  e.g.:\n\n    import Prelude ()\n    import Prelude.Compat\n\n    main :: IO ()\n
  \   main = mapM_ print (Just 23)\n\nAlternatively, you can use the `NoImplicitPrelude`
  language extension:\n\n    {-# LANGUAGE NoImplicitPrelude #-}\n    import Prelude.Compat\n\n
  \   main :: IO ()\n    main = mapM_ print (Just 23)\n\nNote that we use\n\n    mapM_
  :: (Foldable t, Monad m) => (a -> m b) -> t a -> m ()\n\nfrom `Data.Foldable` here,
  which is only exposed from `Prelude` since\n`base-4.8.0.0`.\n\nUsing this approach
  allows you to write code that works seamlessly with all\nversions of GHC that are
  supported by `base-compat`.\n\n## What is covered\nSo far the following is covered.\n\n###
  For compatibility with the latest released version of `base`\n\n * `Prelude.Compat`
  incorporates the AMP/Foldable/Traversable changes and\n   exposes the same interface
  as `Prelude` from `base-4.9.0.0`\n * `System.IO.Error.catch` is not re-exported
  from `Prelude.Compat` for older\n   versions of `base`\n * `Text.Read.Compat.readMaybe`\n
  * `Text.Read.Compat.readEither`\n * `Data.Monoid.Compat.<>`\n * Added `bitDefault`,
  `testBitDefault`, and `popCountDefault` to `Data.Bits.Compat`\n * Added `toIntegralSized`
  to `Data.Bits.Compat` (if using `base-4.7`)\n * Added `bool` function to `Data.Bool.Compat`\n
  * Added `isLeft`, `isRight`, `fromLeft`, and `fromRight` to `Data.Either.Compat`\n
  * Added `forkFinally` to `Control.Concurrent.Compat`\n * Added `withMVarMasked`
  function to `Control.Concurrent.MVar.Compat`\n * Added `(<$!>)` function to `Control.Monad.Compat`\n
  * Weakened `RealFloat` constraints on `realPart`, `imagPart`, `conjugate`, `mkPolar`,\n
  \  and `cis` in `Data.Complex.Compat`\n * Added more efficient `maximumBy`/`minimumBy`
  to `Data.Foldable.Compat`\n * Added `($>)` and `void` functions to `Data.Functor.Compat`\n
  * `(&)` function to `Data.Function.Compat`\n * `($>)` and `void` functions to `Data.Functor.Compat`\n
  * `modifyIORef'`, `atomicModifyIORef'` and `atomicWriteIORef` to `Data.IORef.Compat`\n
  * `dropWhileEnd`, `isSubsequenceOf`, `sortOn`, and `uncons` functions to `Data.List.Compat`\n
  * Correct versions of `nub`, `nubBy`, `union`, and `unionBy` to `Data.List.Compat`\n
  * `asProxyTypeOf` with a generalized type signature to `Data.Proxy.Compat`\n * `modifySTRef'`
  to `Data.STRef.Compat`\n * `String`, `lines`, `words`, `unlines`, and `unwords`
  to `Data.String.Compat`\n * `gcoerceWith` to `Data.Type.Coercion.Compat`\n * `makeVersion`
  function to `Data.Version.Compat`\n * `traceId`, `traceShowId`, `traceM`, and `traceShowM`
  functions to `Debug.Trace.Compat`\n * `byteSwap16`, `byteSwap32`, and `byteSwap64`
  to `Data.Word.Compat`\n * `plusForeignPtr` to `Foreign.ForeignPtr.Compat`\n * `calloc`
  and `callocBytes` functions to `Foreign.Marshal.Alloc.Compat`\n * `callocArray`
  and `callocArray0` functions to `Foreign.Marshal.Array.Compat`\n * `fillBytes` to
  `Foreign.Marshal.Utils.Compat`\n * Added `Data.List.Compat.scanl'`\n * `showFFloatAlt`
  and `showGFloatAlt` to `Numeric.Compat`\n * `lookupEnv`, `setEnv` and `unsetEnv`
  to `System.Environment.Compat`\n * `unsafeFixIO` and `unsafeDupablePerformIO` to
  `System.IO.Unsafe.IO`\n * `RuntimeRep`-polymorphic `($!)` to `Prelude.Compat`\n
  * `RuntimeRep`-polymorphic `throw` to `Control.Exception.Compat`\n\n## What is not
  covered\n\n### Data types and type classes\n`base-compat` purposefully does not
  export any data types or type classes that\nwere introduced in more recent versions
  of `base`. The main reasoning for this\npolicy is that it is not some data types
  and type classes have had their APIs\nchange in different versions of `base`, which
  makes having a consistent\ncompatibility API for them practically impossible.\n\nAs
  an example, consider the `FiniteBits` type class. It was introduced in\n[`base-4.7.0.0`](http://hackage.haskell.org/package/base-4.7.0.0/docs/Data-Bits.html#t:FiniteBits)\nwith
  the following API:\n\n```haskell\nclass Bits b => FiniteBits b where\n    finiteBitSize
  :: b -> Int\n```\n\nHowever, in [`base-4.8.0.0`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-Bits.html#t:FiniteBits),\n`FiniteBits`
  gained additional functions:\n\n```haskell\nclass Bits b => FiniteBits b where\n
  \   finiteBitSize :: b -> Int\n    countLeadingZeros :: b -> Int   -- ^ @since 4.8.0.0\n
  \   countTrailingZeros :: b -> Int  -- ^ @since 4.8.0.0\n```\n\nThis raises the
  question: how can `FiniteBits` be backported consistently\nacross all versions of
  `base`? One approach is to backport the API exposed in\n`base-4.8.0.0` on versions
  prior to `4.7.0.0`.  The problem with this is that\n`countLeadingZeros` and `countTrailingZeros`
  are not exposed in `base-4.7.0.0`,\nso instances of `FiniteBits` would have to be
  declared like this:\n\n```haskell\ninstance FiniteBits Foo where\n    finiteBitSize
  = ...\n#if MIN_VERSION_base(4,8,0) || !(MIN_VERSION_base(4,7,0))\n    countLeadingZeros
  = ...\n    countTrailingZeros = ...\n#endif\n```\n\nAnother approach is to backport
  the API from `base-4.7.0.0` and to declare\nadditional methods outside of the class:\n\n```haskell\n#if
  MIN_VERSION_base(4,7,0) && !(MIN_VERSION_base(4,8,0))\ncountLeadingZeros :: FiniteBits
  b => b -> Int\ncountLeadingZeros = {- default implementation #-}\n#endif\n```\n\nThe
  situation is only slightly better for classes which exist across all versions of
  `base`,\nbut have grown their API. For example, it's tempting to define\n\n```haskell\n#if
  !(MIN_VERSION_base(4,8,0))\ndisplayException :: Exception e => e -> String\ndisplayException
  = show\n#endif\n```\n\nAs with the previous approach, you won't be able to define
  new members of the type\nclass without CPP guards. In other words, the non-CPP approach
  would limit\nuses to the lowest common denominator.\n\nAs neither approach is a
  very satisfactory solution, and to embrace\nconsistency, we do not pursue either
  approach. For similar reasons, we do not\nbackport data types.\n\n### Dependencies\n\n`base-compat`
  is designed to have zero dependencies (besides libraries that\nship with GHC itself).
  A consequence of this choice is that there are certain\nmodules that have a \"limited\"
  support window. An important example of this is\n`Prelude.Compat`, which backports
  the `Semigroup` class to versions of `base`\nolder than 4.11 (when it was added
  to the `Prelude`). Because `Semigroup` was\nnot added to `base` until `base-4.9`,
  `base-compat` cannot backport it to\nany earlier version of `base` than this.\n\nIf
  you would instead desire to be able to use a version of `Prelude.Compat`\nthat _does_
  backport `Semigroup` to even older versions of `base`, even if it\nmeans pulling
  in other dependencies, then you are in luck. There also exists\na `base-compat-batteries`
  package, which exposes a strict superset of the API\nin `base-compat`. `base-compat-batteries`
  has all the same modules as\n`base-compat`, but exposes more functionality on more
  versions of `base` by\nreexporting things from compatibility libraries whenever
  necessary. (For\ninstance, `base-compat-batteries` exports the `Semigroup` class
  from the\n`semigroups` library when built against versions of `base` older than
  4.9.)\n\nBecause `base-compat` and `base-compat-batteries` have the same module
  names,\nthey are quite easy to switch out for one another in library projects, at
  the\nexpense of having clashing names if one tries to import them in GHCi. To\nwork
  around this issue, `base-compat` and `base-compat-batteries` also provide\ncopies
  of each module with the suffix `.Repl` (for `base-compat`) and\n`.Repl.Batteries`
  (for `base-compat-batteries`) to give them globally unique\nnamespaces in the event
  one wants to import them into GHCi.\n\nHere is a list of compatibility libraries
  that `base-compat-batteries` depends\non, paired with the things that each library
  backports:\n\n* [`bifunctors`](http://hackage.haskell.org/package/bifunctors)\n
  \ for:\n  * The [`Bifunctor`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-Bifunctor.html#t:Bifunctor)\n
  \   type class, introduced in `base-4.8.0.0`\n  * The [`Bifoldable`](http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Bifoldable.html#t:Bifoldable)\n
  \   and [`Bitraversable`](http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Bitraversable.html#t:Bitraversable)\n
  \   type classes, introduced in `base-4.10.0.0`\n* [`contravariant`](http://hackage.haskell.org/package/contravariant)\n
  \ for the [`Contravariant`](http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Functor-Contravariant.html#t:Contravariant)\n
  \ type class, introduced in `base-4.12.0.0`.\n* [`fail`](http://hackage.haskell.org/package/fail)\n
  \ for the [`MonadFail`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Monad-Fail.html#t:MonadFail)\n
  \ type class, introduced in `base-4.9.0.0`\n* [`nats`](http://hackage.haskell.org/package/nats)\n
  \ for the [`Natural`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Numeric-Natural.html)\n
  \ data type, introduced in `base-4.8.0.0`\n* [`semigroups`](http://hackage.haskell.org/package/semigroups)\n
  \ for the [`Semigroup`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Semigroup)\n
  \ typeclass and the\n  [`NonEmpty`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-List-NonEmpty.html#t:NonEmpty),\n
  \ [`Min`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Min),\n
  \ [`Max`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Max),\n
  \ [`First`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:First),\n
  \ [`Last`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Last),\n
  \ [`WrappedMonoid`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:WrappedMonoid),\n
  \ [`Option`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Option),\n
  \ and\n  [`Arg`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Semigroup.html#t:Arg)\n
  \ data types, introduced in `base-4.9.0.0`\n* [`tagged`](http://hackage.haskell.org/package/tagged)\n
  \ for the [`Proxy`](http://hackage.haskell.org/package/base-4.7.0.0/docs/Data-Proxy.html#t:Proxy)\n
  \ data type, introduced in `base-4.7.0.0`\n* [`transformers`](http://hackage.haskell.org/package/transformers)\n
  \ for:\n  * The [`Identity`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-Functor-Identity.html#t:Identity)\n
  \   data type, introduced in `base-4.8.0.0`\n  * The [`MonadIO`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Monad-IO-Class.html#t:MonadIO)\n
  \   type class; and the\n    [`Compose`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Functor-Compose.html#t:Compose),\n
  \   [`Product`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Functor-Product.html#t:Product),\n
  \   and\n    [`Sum`](http://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Functor-Sum.html#t:Sum)\n
  \   data types, introduced in `base-4.9.0.0`\n* [`void`](http://hackage.haskell.org/package/void)\n
  \ for the [`Void`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-Void.html#t:Void)\n
  \ data type, introduced in `base-4.8.0.0`\n\n## Supported versions of GHC/`base`\n\n
  * `ghc-8.6.1`  / `base-4.12.0.0`\n * `ghc-8.4.3`  / `base-4.11.1.0`\n * `ghc-8.4.2`
  \ / `base-4.11.1.0`\n * `ghc-8.4.1`  / `base-4.11.0.0`\n * `ghc-8.2.2`  / `base-4.10.1.0`\n
  * `ghc-8.2.1`  / `base-4.10.0.0`\n * `ghc-8.0.2`  / `base-4.9.1.0`\n * `ghc-8.0.1`
  \ / `base-4.9.0.0`\n * `ghc-7.10.3` / `base-4.8.2.0`\n * `ghc-7.10.2` / `base-4.8.1.0`\n
  * `ghc-7.10.1` / `base-4.8.0.0`\n * `ghc-7.8.4`  / `base-4.7.0.2`\n * `ghc-7.8.3`
  \ / `base-4.7.0.1`\n * `ghc-7.8.2`  / `base-4.7.0.0`\n * `ghc-7.8.1`  / `base-4.7.0.0`\n
  * `ghc-7.6.3`  / `base-4.6.0.1`\n * `ghc-7.6.2`  / `base-4.6.0.1`\n * `ghc-7.6.1`
  \ / `base-4.6.0.0`\n * `ghc-7.4.2`  / `base-4.5.1.0`\n * `ghc-7.4.1`  / `base-4.5.0.0`\n
  * `ghc-7.2.2`  / `base-4.4.1.0`\n * `ghc-7.2.1`  / `base-4.4.0.0`\n * `ghc-7.0.4`
  \ / `base-4.3.1.0`\n * `ghc-7.0.3`  / `base-4.3.1.0`\n * `ghc-7.0.2`  / `base-4.3.1.0`\n
  * `ghc-7.0.1`  / `base-4.3.0.0`\n\nWe also make an attempt to keep `base-compat`
  building with GHC HEAD, but due\nto its volatility, it may not work at any given
  point in time. If it doesn't,\nplease report it!\n\nPatches are welcome; add tests
  for new code!\n"
license-name: MIT
