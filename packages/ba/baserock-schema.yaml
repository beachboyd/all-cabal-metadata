homepage: ''
changelog-type: markdown
hash: c4dd49e0ed540da1ed95c1b82ad7b934852aea39401650f946cf107d7104582e
test-bench-deps:
  rio: -any
  baserock-schema: -any
  microlens-platform: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  yaml-pretty-extras: -any
  QuickCheck: -any
  aeson: -any
maintainer: locallycompact@gmail.com
synopsis: Baserock Definitions Schema
changelog: ! '# Changelog for baserock-schema


  ## 0.0.3.5


  Upgrade to yaml-0.8.31.1

  Add maybe-track-ref for potentially tracking ref and updating sha

  Add steal-instructions for pulling chunk instructions from a separate branch


  ## 0.0.3.4


  Use hackage version of gitlab-api


  ## 0.0.3.3


  Fix build-mode typo


  ## 0.0.3.2


  Upgrade set-all-refs and bump-shas to work on system or stratum dynamically


  ## 0.0.3.1


  Catch errors when sha is not found when updating.

  Drop .git suffix when attempting to contact gitlab api


  ## 0.0.3.0


  Switch to use Haskell-etc for cli options

  Get basic lens functionality working

  Drop MonadState database, it''s not needed

  Depend on yaml-pretty-extras or file lensing


  ## 0.0.2.0


  Switch to use RIO for main loading systems

  Add basic MonadState database for Definitions

  Example sanitizer


  ## 0.0.1.5


  * Fix some schema issues.

  * Add lens interfaces.

  * Add example application using gitlab-api


  ## 0.0.1.0


  * Add Basic Chunk, Stratum and System parsing for baserock definitions V9

  * Add "AST" decoders/encoders

  * Add Stratum Graph representation

'
basic-deps:
  rio: -any
  baserock-schema: -any
  microlens-platform: -any
  lens-aeson: -any
  base: ! '>=4.7 && <5'
  yaml-pretty-extras: -any
  etc: -any
  hashable: -any
  gitlab-api: -any
  aeson: -any
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.1.2'
- '0.0.1.3'
- '0.0.1.5'
- '0.0.2.0'
- '0.0.3.4'
- '0.0.3.5'
author: Daniel Firth
latest: '0.0.3.5'
description-type: markdown
description: ! "# baserock-schema\n\nDefinitions schema for baserock system definitions.
  This repository provides a library\nfor interaction with definitions via lenses
  as well as several common tools for\nassisting with annoying rebase work where your
  development branch and master have\ndiverged too much.\n\n## Building\n\nYou will
  need [stack](https://docs.haskellstack.org/en/stable/README/)\n\nYou can build with\n\n
  \   stack build\n\n## Testing\n\nYou can run the tests with\n\n    stack test\n\n##
  Installing\n\nYou can install the application by running\n\n    stack install\n\nwhich
  will install the baserock executable. You may then sit in a definitions repository
  and run\n\n    baserock sanitize <path/to/morph>\n\n## Usage\n\nThe main executable
  has several commands you can use to manipulate definitions in useful ways.\nAll
  commands which take a <morph> field can usually be given either a system or a stratum,
  and\nin some but not all cases a chunk morph where it makes sense.\n\nYou can sanitize
  a system or stratum with\n\n    baserock sanitize <path/to/morph>\n\nYou can set
  all the refs for every chunk in a given system or stratum by running\n\n    baserock
  set-all-refs <ref> <path/to/morph>\n\nYou can use information from gitlab to modify
  your morphologies. To bump the sha of\nevery chunk to the HEAD of its currently
  listed ref, run\n\n    baserock bump-shas <path/to/morph> -t GITLAB_API_TOKEN -u
  GITLAB_BASE_URL\n\nYou can also change the ref and track shas if and only if the
  supplied ref exists\non gitlab, by running\n\n    baserock maybe-track-ref <ref>
  <path/to/morph> -t GITLAB_API_TOKEN -u GITLAB_BASE_URL\n\nYou can checkout the chunk
  instructions for every chunk in a system or stratum from a\ndifferent branch in
  the current definitoins repository, by running\n\n    baserock steal-instructions
  <branch> <path/to/morph>\n"
license-name: BSD3
