homepage: https://github.com/haskell-compat/base-orphans#readme
changelog-type: markdown
hash: 3faaef449038b5b9916f39dc0ccc9ed20a827ac9a91ad5e8527256fb102c4f5c
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ==2.*
  base-orphans: -any
  QuickCheck: -any
maintainer: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@gmail.com>'
synopsis: Backwards-compatible orphan instances for base
changelog: ! "## Changes in 0.7 [2018.03.08]\n - Backported new instances from GHC
  8.4/`base-4.11`\n   * `Alternative` instance for `ZipList`\n   * `Data` instance
  for `IntPtr` and `WordPtr`\n   * `Num`, `Functor`, `Applicative`, `Monad`, `Semigroup`,
  and `Monoid`\n     instances for `Data.Ord.Down`\n   * `MonadFail`, `Semigroup`,
  and `Monoid` instances for strict `ST`\n\n## Changes in 0.6 [2017.04.10]\n - Backported
  new instances from GHC 8.2/`base-4.10`\n   (see https://github.com/haskell-compat/base-orphans/issues/39):\n
  \  * `Data` instance for `Const`\n   * `Eq1`, `Ord1`, `Read1`, and `Show1` instances
  for `NonEmpty`\n   * `Semigroup` instances for `IO`, `Event`, and `Lifetime`\n -
  Backported `Typeable` instances for `(:+:)`, `(:*:)`, `(:.:)`, `M1`, `Rec1`,\n   `ArrowMonad`,
  `Kleisli`, `WrappedArrow`, `WrappedMonad`, and `Any` on GHC\n   7.6 and earlier\n
  - Backported `Data` instances for `(:+:)`, `(:*:)`, `(:.:)`, `M1`, and `Rec1`\n
  \  on GHC 7.6 and earlier\n\n## Changes in 0.5.4\n - Backported `Bits`, `FiniteBits`,
  `Floating`, `Fractional`, `Integral`,\n   `IsString`, `Num`, `Real`, `RealFloat`,
  and `RealFrac` instances for\n   `Identity` and `Const` (introduced in `base-4.9`)\n\n##
  Changes in 0.5.3\n - Backported `Alternative`, `MonadPlus` and `MonadZip` instances
  for `U1` and\n   `Proxy`, and made the `Functor`, `Foldable`, `Traversable`, `Alternative`,\n
  \  and `Monad` instances for `U1` lazier to correspond with `base-4.9`\n\n## Changes
  in 0.5.2\n - Backported `Enum`, `Bounded`, `Ix`, `Functor`, `Applicative`, `Monad`,\n
  \  `MonadFix`, `MonadPlus`, `MonadZip`, `Foldable`, `Traversable`, and\n   `Data`
  instances for datatypes in the `GHC.Generics` module (introduced in\n   `base-4.9`)\n\n##
  Changes in 0.5.1\n - The `Storable` instances for `Complex` and `Ratio` are now
  exactly as lazy\n   as their counterparts in `base` (see issue\n   [#36](https://github.com/haskell-compat/base-orphans/issues/36))\n\n##
  Changes in 0.5.0\n - GHC 8.0 compatibility\n - Backported instances introduced in
  GHC 8.0/`base-4.9`\n   (see https://github.com/haskell-compat/base-orphans/issues/32)\n\n##
  Changes in 0.4.5\n - Import `Control.Monad.Instances` (which exports `Functor` and
  `Monad`\n   instances for `(->) r`, and `Functor` instances for `(,) a` and `Either
  a`)\n   on GHCs before 7.6. This ensures that these instances will always be in\n
  \  scope, and you won't have to import a module which is deprecated on recent\n
  \  GHC releases.\n - Fix build on GHC HEAD (again)\n\n## Changes in 0.4.4\n - Fix
  build on GHC HEAD\n\n## Changes in 0.4.3\n - Fix build on OSes where `HTYPE_DEV_T
  = Int32` (e.g., OS X)\n\n## Changes in 0.4.2\n - `Functor` instances for `Handler`\n
  - `Functor`. `Applicative`, `Alternative`, and `MonadPlus` instances for\n   `ArrowMonad`\n
  - Expose `Read` and `Show` instances for `Down` on GHCs before 7.8\n - `Bits`, `Bounded`,
  and `Integral` instances for `CDev`\n\n## Changes in 0.4.1\n - Fixed imports on
  GHC < 7.8 on Windows\n\n## Changes in 0.4.0\n - Removed all `Generic` and `Generic1`
  instances. These have been moved to the\n   `generic-deriving` library.\n\n## Changes
  in 0.3.3\n - `Typeable` instances for `(~)`, `Any`, `Constraint`, `CSigset`, `Handler`,\n
  \  `Opaque`, `SPEC`, and every promotable data constructor in `base`\n\n## Changes
  in 0.3.2\n - `Storable (Complex a)` instance no longer requires a `RealFloat a`\n
  \  constraint if using `base-4.4` or later\n\n## Changes in 0.3.1\n - `Functor`,
  `Applicative`, and `Monad` instances for `First` and `Last`\n\n## Changes in 0.3.0\n
  - `Show` instance for `Fingerprint`\n - `Data.Orphans` is now `Trustworthy`\n -
  Backported the `Generic` and `Generic1` instances available in `base-4.7.0.0`\n
  \  to GHC 7.2, 7.4, and 7.6, namely\n   * `Const`, `WrappedMonad`, and `ZipList`
  from `Control.Applicative`\n   * `WrappedArrow` from `Control.Category`\n   * `All`,
  `Any`, `Dual`, `Endo`, `First`, `Last`, `Product`, and `Sum` from\n     `Data.Monoid`\n
  \  * `U1`, `Par1`, `Rec1`, `K1`, `M1`, `(:+:)`, `(:*:)`, `(:.:)`, `Arity`,\n     `Associativity`,
  and `Fixity` from `GHC.Generics`\n\n## Changes in 0.2.0\n - Drop GHC 6.12 (and `base-4.2.0.0`)
  compatibility\n - Fix Windows, GHCJS build\n - `Read` instance for `Fixed`\n - `Applicative`
  instances for strict and lazy `ST`\n - `Typeable` instance for `SampleVar`\n - `Applicative`
  and `Alternative` instances for `ReadP` and `ReadPrec`\n - `Typeable` instance for
  `KProxy`\n - `Typeable` instances for more data types in `GHC.`-prefixed modules\n
  - `Generic` instances for `Arity`, `Associativity`, and `Fixity` from\n   the `GHC.Generics`
  module\n - Corrected the `Generic` instance for `(:*:)` to work around GHC bug #9830\n"
basic-deps:
  base: ! '>=4.3 && <5'
  ghc-prim: -any
all-versions:
- '0'
- '0.4.1'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.6'
- '0.7'
author: ! 'Simon Hengel <sol@typeful.net>,

  João Cristóvão <jmacristovao@gmail.com>,

  Ryan Scott <ryan.gl.scott@gmail.com>'
latest: '0.7'
description-type: markdown
description: ! "# `base-orphans`\n[![Hackage](https://img.shields.io/hackage/v/base-orphans.svg)][Hackage:
  base-orphans]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/base-orphans.svg)](http://packdeps.haskellers.com/reverse/base-orphans)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-MIT-brightgreen.svg)][tl;dr Legal:
  MIT]\n[![Build](https://img.shields.io/travis/haskell-compat/base-orphans.svg)](https://travis-ci.org/haskell-compat/base-orphans)\n\n[Hackage:
  base-orphans]:\n  http://hackage.haskell.org/package/base-orphans\n  \"base-orphans
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: MIT]:\n  https://tldrlegal.com/license/mit-license\n
  \ \"MIT License\"\n\n## Scope\n\n`base-orphans` defines orphan instances that mimic
  instances available in later\nversions of `base` to a wider (older) range of compilers.
  `base-orphans` does\nnot export anything except the orphan instances themselves
  and complements\n[base-compat](http://hackage.haskell.org/package/base-compat).\n\nNote
  that `base-orphans` doesn't cover every possible instance. See the\n[What is not
  covered](#what-is-not-covered) section for exceptions.\n\n## Usage\n\nTo use `base-orphans`,
  simply `import Data.Orphans ()`.\n\n## What is covered\n\n * `Alternative`, `MonadPlus`,
  and `MonadZip` instances for `Proxy`\n * `Alternative`, `Applicative`, `Bounded`,
  `Data`, `Enum`, `Foldable`, `Functor`, `Ix`, `Monad`, `MonadFix`, `MonadPlus`, `MonadZip`,
  and `Traversable` instances for data types in `GHC.Generics`\n * `Alternative`,
  `Eq`, `Ord`, `Read`, `Show`, `Foldable`, and `Traversable` instances for `ZipList`\n
  * `Applicative` and `Alternative` instances for `ReadP` and `ReadPrec`\n * `Applicative`
  instance for strict and lazy `ST`\n * `Applicative`, `Foldable`, `Functor`, `Monad`,
  and `Traversable` instances for `Complex`,\n   `Dual`, `First`, `Last`, `Product`,
  and `Sum`\n * `Bits` instance for `Bool`\n * `Bits`, `Bounded`, and `Integral` instances
  for `CDev`\n * `Bits`, `Bounded`, `Enum`, `FiniteBits`, `Floating`, `Fractional`,
  `Integral`, `IsString`, `Ix`, `Num`, `Real`, `RealFloat`, `RealFrac`, and `Storable`
  instances for `Const` and `Identity`\n * `Data` instances for `All`, `Any`, and
  `Const`, `IntPtr`, and `WordPtr`\n * `Data`, `MonadFix` and `MonadZip` instances
  for `Alt`, `Dual`, `First`, `Last`,\n   `Product`, and `Sum`\n * `Data` and `IsList`
  instances for `Version`\n * `Eq` and `Ord` instances for `Control.Exception.ErrorCall`\n
  * `Eq`, `Ord`, `Read`, and `Show` instances for data types in `GHC.Generics`\n *
  `Eq1`, `Ord1`, `Read1`, and `Show1` instances for `NonEmpty`\n * `Foldable` instance
  for `Either`, `(,)` and `Const`\n * `Functor` instance for `Handler`, `ArgOrder`,
  `OptDescr`, and `ArgDescr`\n * `Functor`, `Applicative`, `Alternative`, and `MonadPlus`
  instances for `ArrowMonad`\n * `Monad` instance for `(,)`\n * `Monad` instance for
  `WrappedMonad`\n * `MonadFail`, `Monoid`, and `Semigroup` instances for strict `ST`\n
  * `MonadZip` instance for `Maybe`\n * `Monoid`, `Eq`, `Ord`, `Read`, and `Show`
  instances for `Const`\n * `Monoid` instances for `Identity` and `IO`\n * `Num` instance
  for `Sum` and `Product`\n * `Read` instance for `Fixed`\n * `Applicative`, `Functor`,
  `Monad`, `Monoid`, `Num`, `Read`, `Semigroup`, and `Show` instances for `Down`\n
  * `Semigroup` instances for `IO`, `Event` and `Lifetime`\n * `Show` instance for
  `Fingerprint`\n * `Storable` instance for `()`, `Complex`, and `Ratio`\n * `Traversable`
  instance for `Either`, `(,)` and `Const`\n * `Typeable` instance for most data types,
  typeclasses, and promoted data constructors (when possible)\n\n## What is not covered\n`base-orphans`
  does not define the following instances:\n\n* `Generic` or `Generic1` instances.
  These can be found in the\n  [`Generics.Deriving.Instances`](https://hackage.haskell.org/package/generic-deriving-1.8.0/docs/Generics-Deriving-Instances.html)\n
  \ module of the [`generic-deriving`](https://hackage.haskell.org/package/generic-deriving)\n
  \ library.\n* The `Alternative IO` and `MonadPlus IO` instances. These can be found
  in the\n  [`Control.Monad.Trans.Error`](http://hackage.haskell.org/package/transformers-0.4.3.0/docs/src/Control-Monad-Trans-Error.html#line-69)\n
  \ module of the [`transformers`](http://hackage.haskell.org/package/transformers)
  library.\n\n## Supported versions of GHC/`base`\n\n * `ghc-8.4.1`  / `base-4.11.0.0`\n
  * `ghc-8.2.2`  / `base-4.10.1.0`\n * `ghc-8.2.1`  / `base-4.10.0.0`\n * `ghc-8.0.2`
  \ / `base-4.9.1.0`\n * `ghc-8.0.1`  / `base-4.9.0.0`\n * `ghc-7.10.3` / `base-4.8.2.0`\n
  * `ghc-7.10.2` / `base-4.8.1.0`\n * `ghc-7.10.1` / `base-4.8.0.0`\n * `ghc-7.8.4`
  \ / `base-4.7.0.2`\n * `ghc-7.8.3`  / `base-4.7.0.1`\n * `ghc-7.8.2`  / `base-4.7.0.0`\n
  * `ghc-7.8.1`  / `base-4.7.0.0`\n * `ghc-7.6.3`  / `base-4.6.0.1`\n * `ghc-7.6.2`
  \ / `base-4.6.0.1`\n * `ghc-7.6.1`  / `base-4.6.0.0`\n * `ghc-7.4.2`  / `base-4.5.1.0`\n
  * `ghc-7.4.1`  / `base-4.5.0.0`\n * `ghc-7.2.2`  / `base-4.4.1.0`\n * `ghc-7.2.1`
  \ / `base-4.4.0.0`\n * `ghc-7.0.4`  / `base-4.3.1.0`\n * `ghc-7.0.3`  / `base-4.3.1.0`\n
  * `ghc-7.0.2`  / `base-4.3.1.0`\n * `ghc-7.0.1`  / `base-4.3.0.0`\n\nWe also make
  an attempt to keep `base-orphans` building with GHC HEAD, but due\nto its volatility,
  it may not work at any given point in time. If it doesn't,\nplease report it!\n\nPatches
  are welcome; add tests for new code!\n"
license-name: MIT
