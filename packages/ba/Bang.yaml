homepage: https://github.com/5outh/Bang/
changelog-type: ''
hash: 9e42854ed6d48ccc8414e7ab399730e8b8cc92adf31f333ef744cbf3d2f9d0d9
test-bench-deps: {}
maintainer: bkovach13@gmail.com
synopsis: A Drum Machine DSL for Haskell
changelog: ''
basic-deps:
  stm: ! '>=2.4 && <5'
  base: ! '>=4.6 && <5'
  time: ! '>=1.4.2 && <1.5'
  bifunctors: ! '>=4 && <5'
  mtl: ! '>=2.1 && <3'
  transformers: ! '>=0.3 && <0.4'
  hmidi: ! '>=0.2.1 && <3.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.6
- 0.1.1.0
- 0.1.1.1
author: Benjamin Kovach
latest: 0.1.1.1
description-type: markdown
description: ! "Bang\n====\n\nAn <b>E</b>mbedded <b>D</b>omain <b>S</b>pecific <b>L</b>anguage
  for writing drum machine patterns in Haskell.\n\nBang interfaces with your system
  MIDI device in order to play drum compositions, directly written in and \ninterpreted
  by the Haskell programming language.\n\nCurrently, Bang only supports OSX. Windows
  playback works, but is finnicky. In particular, if you interrupt a composition launched
  from a ghci interpreter session, the built-in MIDI synthesizer will complain about
  already being in use the next time you attempt to play something, until ghci is
  reloaded. This issue does not arise when playing songs from files. If you define
  a `main` function in an external file, and compile and run it, interrupting compositions
  should work fine.\n\n### Installing\n\nInstallation of the library is simple.\n\n```\n>
  cabal update\n> cabal install Bang\n```\n\nOn Windows (*again, not recommended*),
  You should be good to go at this point. If you see **Using MIDI Device: Microsoft
  GS Wavetable Synth** when playing your first composition, you're set. If this happens
  but nothing plays, please contact me.\n\nOn OSX, some additional setup is required
  to output MIDI sounds. First, you'll need to download and install [SimpleSynth](http://notahat.com/simplesynth/).
  Next, you'll need to set up a MIDI IAC driver. Open Audio MIDI Setup (in `Applications
  -> Utilities`) and press âŒ˜2 (or go `Window -> Show MIDI Window`). You should see
  a slightly greyed out **IAC Driver** icon. Double click it, then check the box labeled
  \"Device is online.\" Launch SimpleSynth and set the MIDI Source to \"**IAC Driver
  Bus 1**\" (or whatever you named your IAC driver) using the drop-down box at the
  top of the window. Audio from `Bang` should now feed into and play through SimpleSynth.\n\n###
  Getting Started\n\nBang exports two main entry points for playing compositions,
  `bang` to play compositions once and stop, and `bangR`, to play compositions on
  repeat. In all of the following examples, `bang` can be replaced by `bangR`.\n\nTo
  play a single bass drum hit:\n\n```haskell\n> :m + Bang\n> bang bd\n```\n\n#####
  Sequential Composition\n\nTo play two compositions sequentially, use `<>` (from
  `Data.Monoid`):\n\n```haskell\n> :m + Data.Monoid\n> bang $ bd <> sn -- bass, then
  snare.\n```\n\n##### Rests\n\nTo add rests into compositions, use `rest`:\n\n```haskell\n>
  bang $ bd <> rest (1/4) <> bd -- bass, quarter rest, bass.\n```\n\nMany special
  cases of rests reside in [Bang.Interface.Base](https://github.com/5outh/Bang/blob/master/src/Bang/Interface/Base.hs).
  These include `qr` (quarter rest), `hr` (half), `er` (eighth), `wr` (whole) and
  more.\n\n##### Parallel Composition\n\nTo play two compositions in parallel, use
  `><`:\n\n```haskell\n> bang $ bd >< sn -- bass and snare at the same time.\n```\n\n#####
  Repetition\n\nTo play a composition multiple times in sequence, use `#>`:\n\n```haskell\n>
  bang $ 4 #> bd -- play 4 bass drum hits in sequence\n```\n\n##### Changing Tempo\n\n`bang`
  plays a composition at 120 BPM by default. To change the tempo, use `!>`, which
  expects a fraction as the first argument:\n\n```haskell\n> bang $ (1/2) !> (bd <>
  sn) -- play at half speed\n```\n\nA number of special cases of tempo-setting functions
  such as `double`, `quad`, `half`, and `triplets` reside in [Bang.Interface.Base](https://github.com/5outh/Bang/blob/master/src/Bang/Interface/Base.hs).\n\n#####
  Changing Duration\n\nBy default, each primitive note in `Bang` has duration `1/4`.
  To set the duration for a composition, use `~~`:\n\n```haskell\n> bang $ 1 ~~ (bd
  <> bd) -- play two bass drum hits with a total duration of 1.\n```\n\n##### Polyrhythms\n\nComposing
  polyrhythms can be done in three ways. The first, using `~=~`:\n\n```haskell\n--
  play a 3/4 polyrhythm with bass drum triplets and snare quarter notes.\n> bang $
  (3, 3 #> bd) ~=~ (4, 4 #> sn)\n```\n\nThe other two ways are by using `~=` and `=~`.
  These are slightly more general than the above case, and can be used for more than
  just polyrhythms. `a ~= b` smashes (or elongates) `b` into the duration of `a`,
  while `=~` does the same thing, but in the other direction. For example, the polyrhythm
  above can be more concisely represented like this:\n\n```haskell\n> bang $ (3 #>
  bd) =~ (4 #> sn)\n```\n\nTo play the same rhythm in `3/4` duration, just use the
  other operator:\n\n```haskell\n> bang $ (3 #> bd) ~= (4 #> sn)\n```\n\n##### Slicing
  Compositions\n\nTo play only the first part of a composition, use `takeDur` or `<<~`.
  To chop off a section of the end of a composition, use `dropDur` or `~>>`:\n\n```haskell\n>
  bang $ (1/4) <<~ ( 2 #> (bd <> sn) ) -- Play only `bd`\n> bang $ (1/4) ~>> ( 2 #>
  (bd <> sn) ) -- Play bd, sn, bd\n```\n\n##### Silencing\n\nTo instead silence parts
  of a composition, use `hushFor` (`~@>`) to silence from the beginning, or `hushFrom`
  (`<@~`) to silence from some point until the end of a composition:\n\n```haskell\n>
  bang $ (1/4) ~@> ( 2 #> (bd <> sn) ) -- Play a quarter rest, then bd, sn, bd\n>
  bang $ (1/4) <@~ ( 2 #> (bd <> sn) ) -- Play `bd`, then a 3/4 rest.\n```\n\n#####
  Duration Normalization\n\nWe can normalize a list of compositions to the same duration
  and play them sequentially using `normalize` or `<!>`:\n\n```haskell\n-- play each
  composition sequentially with duration 1.\n> bang $ 1 <!> [bd, 3 #> sn, 5 #> hc]\n```\n\nWe
  can do the same, but play each in parallel using `normalizeC` (C for 'Concurrent')
  or `>!<`:\n\n```haskell\n-- play each composition concurrently with duration 1.\n>
  bang $ 1 >!< [bd, 3 #> sn, 5 #> hc]\n```\n\n##### Mapping Over Composition Lists\n\nWe
  can map an operator over a list of compositions using `>>~`:\n\n```haskell\n-- Play
  each note in the list twice, sequentially.\n> bang $ (2 #>) >>~ [sn, bd, hc]\n```\n\n####
  Other Transformations\n\n##### Reversal\n\n`reverseMusic` does just what you'd expect:\n\n```haskell\n>
  bang $ reverseMusic $ bd <> sn -- snare, then bass.\n```\n\n##### Mirrors\n\n`mirror`
  plays a composition forward, then backward. `mirrorR` plays it backwards, then forwards:\n\n```haskell\n>
  bang $ mirror  $ bd <> sn -- bd, sn, sn, bd\n> bang $ mirrorR $ bd <> sn -- sn,
  bd, bd, sn\n```\n\n##### Cross\n\n`cross` plays a composition both forward and backward
  at the same time:\n\n```haskell\n> bang $ cross $ bd <> sn -- (bd & sn), (bd & sn)\n```\n\n#####
  Repeating\n\n`rep` repeats a composition ad infinitum:\n\n```haskell\n> bang $ rep
  bd -- bd, bd, bd, bd ...\n```\n\n##### Measures\n\n`m4` is a convenience constructor
  for 4-element compositions (useful for piecing together 4-element measures):\n\n```haskell\n>
  bang $ m4 bd hc bd sn -- bd, hc, bd, sn\n```\n\n##### Note About Monoids\n\nCompositions
  form two monoids: one under `<>` (sequential composition) and one under `><` (parallel
  composition). To avoid wrapping everything in newtypes, the `<>` monoid is the 'real'
  one, and the `><` one uses similar names to the \"real\" monoid names.\n\nOf particular
  note are the \"concat\" functions. `mconcat` plays a list of compositions in sequence,
  while `cconcat` plays a list of compositions in parallel:\n\n```haskell\n> bang
  $ mconcat [bd, sn, hc, sn] -- bd, sn, hc, sn in sequence\n> bang $ cconcat [bd,
  sn, hc]     -- bd, sn, hc all at once \n```\n\n##### Extras\n\nAll of the operators
  reside in [Bang.Music.Operators](https://github.com/5outh/Bang/blob/master/src/Bang/Music/Operators.hs),
  with most underlying implementations (and plain text functions) in [Bang.Music.Transform](https://github.com/5outh/Bang/blob/master/src/Bang/Music/Transform.hs).\n\nAll
  of the primitive sounds (such as `bd`, `sn` and `hc` are implemented in [Bang.Interface.Drum](https://github.com/5outh/Bang/blob/master/src/Bang/Interface/Drum.hs).
  This includes all of the MIDI percussion sounds, with the more common ones having
  shortform and longform names. All of these can be used in Bang compositions.\n\nFinally,
  the full documentation is available [on Hackage](https://hackage.haskell.org/package/Bang).\n\n#####
  An Extended Example\n\n```haskell\n-- | The first few measures of 'Toxicity' by
  System of a Down.\ntoxicityIntro =\n  let sh = sn >< hc -- snare and closed hi-hat
  combo\n      bc = bd >< hc -- bass and closed hi-hat combo\n      cd = bd >< cc
  -- bass and crash cymbal combo\n  in bang $ \n     double $ -- play at double tempo\n
  \      bd <>\n       ( double $ \n         mconcat [ -- concatenate into a single
  sequential composition\n           mconcat [sh, bd, qr, bd, sh, qr, bd, qr, sh,
  qr]\n         , mconcat [ \n             (2 #>) >>~ [sn, t1, t2] -- play each element
  of the list twice\n           , double $ 4 #> sn\n           , (2 #>) >>~ [sn, t1,
  t2] \n           , m4 cd qr hc sn -- groups of measures with 4 beats  \n           ,
  m4 hc bd sh qr\n           , m4 hc sn bc qr\n           , m4 bc qr hc sh\n           ,
  m4 hc bd sh qr\n           , m4 bd qr sh qr \n           ] \n         ] )\n```\n\n###
  Acknowlegements\n\nA lot of inspiration and guidance on the implementation of Bang
  comes from the [Haskell School of Music](http://haskell.cs.yale.edu/euterpea/haskell-school-of-music/)
  and Paul Hudak's [very interesting paper](http://cpsc.yale.edu/sites/default/files/files/tr1259.pdf).
  [Tidal by Alex McLean](http://yaxu.org/tidal/) is also notable as inspiration. The
  goal of Bang is to produce a small subset of these things that works well for something
  very specific: composing drum-only beats.\n"
license-name: MIT
