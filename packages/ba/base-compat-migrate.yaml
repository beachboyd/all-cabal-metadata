homepage: https://github.com/bergmark/base-compat-migrate#readme
changelog-type: markdown
hash: 3a169712aaec0836b7c38a56e513307204b449fdc381877574cffdef361cf784
test-bench-deps: {}
maintainer: adam@bergmark.nl
synopsis: Helps migrating projects to base-compat(-batteries).
changelog: ! '# Changelog for base-compat-migrate


  ## 0.1.0.1


  * Upgrade to `base == 4.11.1.*`


  ## 0.1.0.0


  * Initial release

'
basic-deps:
  base: ==4.11.1.*
  base-compat: ==0.10.1.*
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Adam Bergmark
latest: '0.1.0.1'
description-type: markdown
description: ! "# base-compat-migrate [![Hackage](https://img.shields.io/hackage/v/base-compat-migrate.svg)](https://hackage.haskell.org/package/base-compat-migrate)
  [![Build Status](https://travis-ci.org/bergmark/base-compat-migrate.svg)](https://travis-ci.org/bergmark/base-compat-migrate)\n\nThis
  library is meant as a temporary migration library when moving a\nlibrary to\n[base-compat](http://hackage.haskell.org/package/base-compat)
  or\nupgrading it. Replace `base-compat` with\n[base-compat-batteries](https://hackage.haskell.org/package/base-compat-batteries)\nin
  the rest of the README if you want to use that library instead.\n\n`base-compat`
  defines backwards compatible versions of some base\nmodules; If you for example
  want to make sure `import Prelude` does\nthe same thing on all GHC versions you
  can instead `import\nPrelude.Compat`. If a Compat module exists it means it has
  some\nbackwards compatibility fix, it also re-exports everything that is\nunchanged
  from the corresponding base module.\n\nbase-compat notably does not have Compat
  modules for every base module\nso you often need to depend on both base and base-compat.
  The standard\nrecommended work-flow is to build your project with the oldest GHC
  you\nwant to support and add Compat imports accordingly.\n\nIf you don't have quick
  access to old GHCs it can be error-prone to\nmigrate to upgrade base-compat since
  you need to look through all base\nimports to see if you should be using Compat
  versions instead.\n\n## Workflow\n\nThis library offers a different work flow:\n\n1.
  Make sure you are using a GHC version compatible with this project\n   (At the time
  of writing it is GHC 8.4.1)\n1. Replace any `base` and `base-compat` dependencies
  in your project\n   with `base-compat-migrate`.\n1. Add `default-extensions: NoImplicitPrelude`
  to each build component\n   (libraries, executables, test suites, benchmarks).\n1.
  Compile your project and fix issues:\n  * Add any needed `Prelude.Compat` imports\n
  \ * If a `base` module can't be found change the import to the\n    `Compat` version
  instead.\n1. Finally, replace the `base-compat-migrate` dependency with `base`\n
  \  and `base-compat`.\n\nWhenever you wish to support newer versions of `base` or
  `base-compat`\nyou can repeat these steps.\n\n### Common Issues with Solutions\n\n*
  If your package declares Paths modules it won't compile without\n  access to base.
  You can drop the Paths module until the affected\n  component builds, and then add
  it again along with the base\n  dependency.\n\n## Dependencies\n\nSince `base-compat-migrate`
  re-exports modules, we depend on minor\nversions of `base` and `base-compat`. A
  new minor version of either\nmay require a new release of this library. This project's
  cabal file\nis generated by running `generate-library/Main.hs`.\n"
license-name: BSD3
