homepage: ''
changelog-type: markdown
hash: 79a67fc0d3f258fe82a456c924d07abd6ce2e3de15e9fe5e17fd61de3dd44e36
test-bench-deps:
  barbies: -any
  base: '>=4.7 && <5'
  barbies-th: -any
maintainer: fumiexcel@gmail.com
synopsis: Create strippable HKD via TH
changelog: |
  # Revision history for barbies-th

  ## 0.1.1 -- 2020/04/19

  * Improved the deriving mechanism; deriving clauses within `declareBareB` are translated into `deriving via Barbie ...`

  ## 0.1 -- 2020/02

  * First version. Released on an unsuspecting world.
basic-deps:
  barbies: ^>=2.0
  base: '>=4.12'
  template-haskell: '>=2.14 && <2.16'
all-versions:
- '0'
- '0.1'
- 0.1.1
author: Fumiaki Kinoshita
latest: 0.1.1
description-type: markdown
description: |
  barbies-th
  ====

  [![Hackage](https://img.shields.io/hackage/v/barbies-th.svg)](https://hackage.haskell.org/package/barbies-th)
  ![Haskell CI](https://github.com/fumieval/barbies-th/workflows/Haskell%20CI/badge.svg)

  A wrapper library for [barbies](http://hackage.haskell.org/package/barbies) to generate [strippable HKD](http://hackage.haskell.org/package/barbies-1.1.3.0/docs/Data-Barbie-Bare.html)s. It transforms the following declaration

  ```haskell
  declareBareB [d|
    data Foo = Foo
      { foo :: Int
      , bar :: String
      }  |]
  ```

  into:

  ```haskell
  data Foo sw h = Foo
      { foo :: Wear sw h Int,
      , bar :: Wear sw h String
      } deriving Generic
  instance BareB Foo
  instance FieldNamesB (Foo Covered) where
    bfieldNames = Foo (Const "foo") (Const "bar")
  instance ProductB (Foo Covered) where
    bprod (Foo xfoo xbar) (Foo yfoo ybar)
      = Foo (Pair xfoo yfoo) (Pair xbar ybar)
  instance FunctorB (Foo Covered) where ...
  instance TraversableB (Foo Covered) where ...
  instance ConstraintsB (Foo Covered)
  instance ProductBC (Foo Covered)
  ```

  GHC sometimes takes very long time to compile code with generically derived instances, and it often fails to inline functions properly too. This package generates most instance methods by TH, reducing large amount of compilation time
  of the declarations and use sites.

  Unlike [higgledy](https://hackage.haskell.org/package/higgledy) which relies on
  in-memory representation using `GHC.Generic`, you don't have to worry about the performance, and you can benefit from various language features
  (e.g. -Wmissing-fields, `RecordWildCards` etc) even in higher-kinded form.
license-name: BSD-3-Clause
