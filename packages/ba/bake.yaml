homepage: https://github.com/ndmitchell/bake#readme
changelog-type: text
hash: c9ee89a28a69d1667d6d80c6c5801991dfd7517573dc3041525fe219596d656e
test-bench-deps: {}
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Continuous integration system
changelog: ! "Changelog for Bake\n\n0.5\n    Allow extra-1.5.1\n    #19, support much
  bigger files\n0.4\n    Remove the --author parameter from many operations\n    Rewrite
  notifications\n0.3\n    Add persistence to an SQLite db\n    Add ping expiration\n
  \   Start testing as soon as you are launched\n0.2\n    Require extra-0.3\n    Lots
  of work on lots of things\n    #1, add incremental building\n    #1, mirror the
  Git repo\n    Require a name for the client\n    Sort out which directory things
  are run from\n    Change to a separate --host and --port flag\n0.1\n    Works to
  some level\n0.0\n    Initial version, not ready for public use\n"
basic-deps:
  warp: ! '>=3.0'
  http-client: -any
  shake: ! '>=0.15'
  bytestring: -any
  wai: ! '>=3.0.1'
  extra: ! '>=1.5.1'
  base: ==4.*
  disk-free-space: -any
  time: -any
  sqlite-simple: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  direct-sqlite: -any
  containers: -any
  old-locale: -any
  cmdargs: ! '>=0.10'
  hashable: -any
  HTTP: -any
  wai-extra: -any
  transformers: ! '>=0.4'
  random: -any
  deepseq: -any
  http-conduit: -any
  smtp-mail: -any
  http-types: -any
  aeson: -any
  safe: -any
  directory: -any
all-versions:
- '0.0'
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.5'
description-type: markdown
description: ! "# Bake [![Hackage version](https://img.shields.io/hackage/v/bake.svg?style=flat)](https://hackage.haskell.org/package/bake)
  [![Build Status](https://img.shields.io/travis/ndmitchell/bake.svg?style=flat)](https://travis-ci.org/ndmitchell/bake)\n\n**Warning:
  This project is still under heavy development and you are recommended to use the
  Git repo rather than a packaged release.**\n\nBake is a continuous integration server,
  designed for large, productive, semi-trusted teams. In particular it primarily targets:\n\n*
  _Large teams_ where there are at least several contributors working full-time on
  a single code base.\n* _Productive teams_ which are regularly pushing code, many
  times a day.\n* _Semi-trusted teams_ where code does not go through manual code
  review, but code does need to pass a test suite and perhaps some static analysis.
  People are assumed to be fallible.\n\nTo give a flavour, the web GUI looks of a
  running Bake system looks like:\n\n![](https://raw.githubusercontent.com/ndmitchell/bake/master/screenshot-part.png)\n\n_Acknowledgements:_
  The name \"Bake\" is thanks to Andy Adams-Moran.\n\n\n## The Design\n\nBake is a
  Haskell library that can be used to put together a continuous integration server.
  To run Bake you start a single server for your project, which coordinates tasks,
  provides an HTTP API for submitting new patches, and a web-based GUI for viewing
  the progress of your patches. You also run some Bake clients which run the tests
  on behalf of the server. While Bake is written in Haskell, most of the tests are
  expected to just call some system command.\n\nThere are a few aspects that make
  Bake different from most alternatives:\n\n* Patches are submitted to Bake, but are
  not applied to the main repo until they have passed all their tests. There is no
  way for someone to \"break the build\" - at all points the repo will build on all
  platforms and all tests will pass.\n* Bake scales up so that even if you have 5
  hours of testing and 50 commits a day it will not require 250 hours of computation
  per day. In order for Bake to prove that a set of patches pass a test, it does not
  have to test each patch individually.\n* Bake allows multiple clients to run tests,
  even if some tests are only able to be run on some clients, allowing both parallelisation
  and specialisation (testing both Windows and Linux, for example).\n* Bake can detect
  that tests are no longer valid, for example because they access a server that is
  no longer running, and report the issue without blaming the submitted patches.\n\n##
  The Workflow\n\nBake is highly parametrisable, and can be reconfigured to support
  several different styles of use, but here I give one plausible workflow. Imagine
  a number of developers, somewhere between 5 and 50. Each developer has 1 or 2 active
  branches they are working on. You have a master branch, which developers merge from
  once a day. When a developer has completed something they push their branch to the
  Git repo and register the SHA1 with Bake. Bake then tests the patch on all tests
  (in conjunction with all other patches that got promoted) and if it passes merges
  it into the master branch. Once a day (say 7pm) you pause the incoming patches,
  ensure the queue has emptied, then resume.\n\n\n## An Example\n\nThe test suite
  provides both [an example configuration](https://github.com/ndmitchell/bake/blob/master/src/Example.hs)
  and [commands to drive it](https://github.com/ndmitchell/bake/blob/master/src/Test.hs).
  Here we annotate a slightly simplified version of the example, for lists of imports
  see the original code.\n\nFirst we define an enumeration for where we want tests
  to run. Our server is going to require tests on both Windows and Linux before a
  `patch` is accepted.\n```haskell\n    data Platform = Linux | Windows deriving (Show,Read)\n
  \   platforms = [Linux,Windows]\n```\nNext we define the `test` type. A `test` is
  something that must pass before a `patch` is accepted.\n```haskell\n    data Action
  = Compile | Run Int deriving (Show,Read)\n```\nOur type is named `Action`. We have
  two distinct types of tests, compiling the code, and running the result with a particular
  argument. Now we need to supply some information about the tests:\n```haskell\n
  \   allTests = [(p,t) | p <- platforms, t <- Compile : map Run [1,10,0]]\n    \n
  \   execute :: (Platform,Action) -> TestInfo (Platform,Action)\n    execute (p,Compile)
  = matchOS p $ run $ do\n        cmd \"ghc --make Main.hs\"\n    execute (p,Run i)
  = require [(p,Compile)] $ matchOS p $ run $ do\n        cmd (\".\" </> \"Main\")
  (show i)\n```\nWe have to declare `allTests`, then list of all tests that must pass,
  and `execute`, which gives information about a test. Note that the `test` type is
  `(Platform,Action)`, so a test is a platform (where to run the test) and an `Action`
  (what to run). The `run` function gives an `IO` action to run, and `require` specifies
  dependencies. We use an auxiliary `matchOS` to detect whether a test is running
  on the right platform:\n```haskell\n    #if WINDOWS\n    myPlatform = Windows\n
  \   #else\n    myPlatform = Linux\n    #endif\n\n    matchOS :: Platform -> TestInfo
  t -> TestInfo t\n    matchOS p = suitable (return . (==) myPlatform)\n```\nWe use
  the `suitable` function to declare whether a test can run on a particular client.
  Finally, we define the `main` function:\n```haskell\n    main :: IO ()\n    main
  = bake $\n        ovenGit \"http://example.com/myrepo.git\" \"master\" $\n        ovenTest
  readShowStringy (return allTests) execute\n        defaultOven{ovenServer=(\"127.0.0.1\",5000)}\n```\nWe
  define `main = bake`, then fill in some configuration. We first declare we are working
  with Git, and give a repo name and branch name. Next we declare what the tests are,
  passing the information about the tests. Finally we give a host/port for the server,
  which we can visit in a web browser or access via the HTTP API.\n\n\n## Using the
  Example\n\nNow we have defined the example, we need to start up some servers and
  clients using the command line for our tool. Assuming we compiled as `bake`, we
  can write `bake server` and `bake client` (we'll need to launch at least one client
  per OS). We can view the state by visiting `http://127.0.0.1:5000` in a web browser.\n\nTo
  add a patch we can run `bake addpatch --name=d088cc3c677a867185f083aca200cb421c27b984`,
  using the SHA1 of the commit, which will try and integrate that patch into the `master`
  branch, after all the tests have passed. Alternatively, we can run `bake addpatch
  --name=$(git rev-parse HEAD)` to try and integrate our working tree into `master`.\n\nWhen
  viewing the server, there are a few additional URL's that may be of use:\n\n* `?stats=`
  will show stats about which tests take longest, how long a test run takes, which
  test fails most often.\n* `?raw=` will give internal details of the implementation.\n*
  `/dump` will download an SQLite database containing all of the persistent state.\n*
  `?admin=` will give you an admin control panel on any page, letting you retry/delete
  patches and skip tests. If you want to restrict access to this panel, run `bake
  admin myPassword` which says that running `bake server --admin=3A18885C` will then
  require `?admin=myPassword`.\n"
license-name: BSD-3-Clause
