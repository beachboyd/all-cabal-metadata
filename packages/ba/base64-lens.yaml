homepage: https://github.com/emilypi/base64-lens
changelog-type: markdown
hash: f57483b5f1b4974c8b90f03a45f67c766d65c6de97d86bacd48a859209633b76
test-bench-deps:
  base: ! '>=4.10 && <5'
  base64-lens: -any
  doctest: -any
  lens: -any
maintainer: emilypi@cohomolo.gy
synopsis: Optics for the Base64 library
changelog: |
  # Revision history for base64-lens

  ## 0.3

  * Instead of focusing on the `Base64Lenient` `Iso` as a `Lens` (which swaps its focus compared to its sibling `Prism`s),
    change it to be symmetrical with the other `Prism`s so that it can be used as a generalized `Prism`.

  ## 0.2

  * Bump `base64` dependency to settle on 0.4 with the "finalized" api.
  * Remove `_Base64Unpadded` prism and `Base64Unpadded` patterns from `ByteString` and `Text`
  * Kill all CPP

  ## 0.1.0.0

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.10 && <5'
  text: ! '>=1.2 && <1.3'
  lens: ! '>=4.0 && <5'
  base64: ! '>=0.4 && <0.5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
- 0.2.0
- 0.3.0
author: Emily Pillmore
latest: 0.3.0
description-type: markdown
description: "# Base64-lens\n\n[![Build Status](https://travis-ci.com/emilypi/base64-lens.svg?branch=master)](https://travis-ci.com/emilypi/base64-lens)\n[![Hackage](https://img.shields.io/hackage/v/base64-lens.svg)](https://hackage.haskell.org/package/base64-lens)\n\nThis
  package provides optics and convenient pattern synonyms for the [base64](https://hackage.haskell.org/package/base64)
  library.\n\n### Patterns\n\nThe pattern synonyms provided in this library are:\n\n```haskell\npattern
  Base64 :: ByteString -> ByteString\npattern Base64Url :: ByteString -> ByteString\npattern
  Base64UrlUnpadded :: ByteString -> ByteString\npattern Base64Lenient :: ByteString
  -> ByteString\npattern Base64UrlLenient :: ByteString -> ByteString\n\n-- and \n\npattern
  Base64 :: Text -> Text\npattern Base64Url :: Text -> Text\npattern Base64UrlUnpadded
  :: Text -> Text\npattern Base64Lenient :: Text -> Text\npattern Base64UrlLenient
  :: Text -> Text\n```\n\nThese provide a convenient high level interface for passing
  Base64 encoded values.\n\n\n### Optics\n\n`Prism`s for encoding and decoding `Text`
  and `ByteString` values are given as part of the library:\n\n\n```haskell\n_Base64
  :: Prism' ByteString ByteString\n_Base64Url :: Prism' ByteString ByteString\n_Base64UrlUnpadded
  :: Prism' ByteString ByteString\n_Base64Lenient :: Iso' ByteString ByteString\n_Base64UrlLenient
  :: Iso' ByteString ByteString\n\n-- and\n\n_Base64 :: Prism' Text Text\n_Base64Url
  :: Prism' Text Text\n_Base64UrlUnpadded :: Prism' Text Text\n_Base64Lenient :: Iso'
  Text Text\n_Base64UrlLenient :: Iso' Text Text\n```\n\nIf a particular structure
  has a `Lens` into some `Text` or `ByteString` value they might want to encode (or
  decode), then composing such a `Lens` with these `Prisms` yields an affine `Traversal`,
  resulting in a structure which has the focus of its `Lens` encoded as or decoded
  from Base64(-url). All one needs to do is compose their optics:\n\n```haskell\n\ndata
  MyStruct = MyStruct\n  { _a :: Int\n  , _b :: Text\n  } deriving Show\n\nb :: Lens'
  MyStruct Text\nb = lens _b (\\t b_ -> t { _b = b_ })\n\nmyB64Struct :: Traversal'
  s Text\nmyB64Struct = b . _Base64\n\n-- >>> MyStruct 3 \"U3Vu\" ^? b . _Base64\n--
  MyStruct {_a = 3, _b = \"Sun\"}\n\nbRe :: Review MyStruct Text\nbRe = unto (\\b
  -> MyStruct 0 b)\n\n-- >>> bRe . _Base64 # \"Sun\"\n-- MyStruct {_a = 0, _b = \"UV3u\"}\n```\n\nThe
  data of a `Prism` naturally conforms to this \"encoding/decoding\" dichotomy, where
  the `Review`, or \"builder\" half of the `Prism` of type `b -> t` is an encoding,
  and the \"Matcher\" half of the prism, of type `s -> Either t a`, represents a decoding
  of a similar structure. Hence, `Prism` is the most appropriate structure.\n"
license-name: BSD-3-Clause
