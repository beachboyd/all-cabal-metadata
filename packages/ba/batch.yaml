homepage: https://github.com/agrafix/batch#readme
changelog-type: markdown
hash: 27088099e383a564480ebc480e61d94721019925b1ebbeccb2e2e0d9418863f9
test-bench-deps:
  batch: -any
  stm: ! '>=2.4'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4'
  timespan: ! '>=0.3'
maintainer: mail@athiemann.net
synopsis: Simplify queuing up data and processing it in batch.
changelog: ! '# Changelog for batch


  ## 0.1.0.0


  * First release


  ## Unreleased changes

'
basic-deps:
  stm: ! '>=2.4'
  base: ! '>=4.7 && <5'
  monad-control: ! '>=1.0'
  async: ! '>=2.0'
  lifted-base: ! '>=0.2.3'
  timespan: ! '>=0.3'
  mtl: ! '>=2.2'
  lifted-async: ! '>=0.9'
  transformers-base: ! '>=0.4'
all-versions:
- '0.1.0.0'
author: Alexander Thiemann
latest: '0.1.0.0'
description-type: markdown
description: ! "# batch\n\n[![CircleCI](https://circleci.com/gh/agrafix/batch.svg?style=svg)](https://circleci.com/gh/agrafix/batch)\n\nSimplify
  queuing up data and processing it in batch.\n\n```haskell\nimport Control.Batch\nimport
  Control.Concurrent.STM\nimport Control.Monad\n\nexample :: IO ()\nexample =\n  do
  outVar <- atomically $ newTVar []\n     let cfg =\n             Batch\n             {
  b_runEveryItems = Just 5\n             , b_runAfterTimeout = Nothing\n             ,
  b_maxQueueLength = Nothing\n             , b_runBatch =\n                     \\x
  -> atomically $ modifyTVar' outVar (++x)\n             }\n     withBatchRunner cfg
  $ \\hdl ->\n         do replicateM_ 5 $ bh_enqueue hdl True\n            out <-\n
  \               atomically $\n                do x <- readTVar outVar\n                   when
  (length x /= 5) retry\n                   pure x\n            out `shouldBe` [True,
  True, True, True, True]\n```\n"
license-name: BSD3
