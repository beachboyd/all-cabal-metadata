homepage: https://github.com/jcpetruzza/barbies#readme
changelog-type: markdown
hash: 1001094b5cc0292770be80da003cb1c86c2d4b3dff051c5bf9fc494f825c8b77
test-bench-deps:
  barbies: -any
  base: ! '>=4.7 && <5'
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
maintainer: jcpetruzza@gmail.com
synopsis: Classes for working with types that can change clothes.
changelog: ! "# Changelog for barbies\n\n## 0.1.3.0\n  - Use both `Monoid` and `Semigroup`
  as constraints for the `Monoid` instance, so that this works with ghc 8.0 to 8.4
  (Fraser Murray)\n\n## 0.1.2.0\n  - Use `Monoid` and not `Semigroup` as constraints
  for the `Monoid` instance\n\n## 0.1.1.0\n  - Add `instance Semigroup (Barbie b)`
  to go along the `Monoid` instance\n\n## 0.1.0.1\n  - Works under GHC 8.0.2, but
  notice one needs to use empty instance\n    declarations, because ghc chokes on
  `deriving` clauses.\n\n\n## 0.1.0.0 - Initial release\n"
basic-deps:
  base: ! '>=4.7 && <5'
  bifunctors: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.2.0'
- '0.1.3.0'
author: Daniel Gorin
latest: '0.1.3.0'
description-type: markdown
description: ! "# barbies [![Build Status](https://travis-ci.org/jcpetruzza/barbies.svg?branch=master)](https://travis-ci.org/jcpetruzza/barbies)\n\nTypes
  that are parametric on unary type-constructors that control\ntheir shapes are like
  Barbies that can wear different clothes\nto become a different doll. This is a common
  Haskell-idiom. E.g.,\n\n```haskell\n\ndata Barbie f\n  = Barbie\n      { name ::
  f String\n      , age  :: f Int\n      }\n\nb1 :: Barbie Last       -- Barbie with
  a monoid structure\nb2 :: Barbie (Const a)  -- container Barbie\nb3 :: Barbie Identity
  \  -- Barbie's new clothes\n\n```\n\nThis package provides basic classes and abstractions
  to work with these types and easily transform them.\n"
license-name: BSD3
