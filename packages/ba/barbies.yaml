homepage: https://github.com/jcpetruzza/barbies#readme
changelog-type: markdown
hash: 5bef00ab60fd3b079e9ab3e80ce3f5580cf0d877918c9f7f72ee41e3f112051d
test-bench-deps:
  barbies: -any
  base: ! '>=4.7 && <5'
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: jcpetruzza@gmail.com
synopsis: Classes for working with types that can change clothes.
changelog: "# Changelog for barbies\n\n## 1.1.2.1\n  - Uploaded 1.1.2.0 was broken
  (missing `btraverseC`)\n\n## 1.1.2.0\n  - Add `traverseC` (Ole Krüger).\n  - Fix
  typo in ProductB laws (thanks to Ben Radford).\n\n## 1.1.1.0\n  - Add `bmapC` (Chris
  Penner).\n\n## 1.1.0.0\n  - Make all classes poly-kinded (#7): a barbie can now
  be any type \n    parameterised by a type `(k -> Type)`. In particular, a (higher-kinded)\n
  \   barbie is a type parameterised by a barbie. Thanks to Ole Krüger.\n\n  - Add
  instances for functor transformers: `Proxy`, `Const`, `Product`, `Sum`\n    and
  `Compose` (Ole Krüger).\n\n## 1.0.0.0\n  - Replaced `ConstraintsOf` in `ConstraintsB`
  by `AllB`, which allows\n    constraints to be given on `a` instead of on `f a`.
  The `ClassF`\n    class lets us specify constraints on `f a` by doing `AllB (ClassF
  c f) b`.\n    `ConstraintsOf` becomes then a type alias. Credit goes to Csongor
  Kiss.\n\n  - `ConstraintsOf` was ultimately deprecated in favour of `AllBF`, which\n
  \   is shorter and more consistent with `AllB`.\n\n  - Renamed `ConstraintsB(adjProof)`
  to `ConstraintsB(baddDicts)`.\n\n  - Renamed `ProofB(bproof)` to `ProductBC(bdicts)`.\n\n
  \ - Changed the way `Wear` works: now wear-types need to have an extra\n    type
  parameter that controls whether they are `Bare` or `Covered`. This\n    let us remove
  all the \"magic\" that was involved, in the sense that\n    one couldn't have instances
  of `FunctorB`, etc, for wear-types wihtout\n    using `unsafeCoerce` (this was true
  also for handwritten instances).\n\n  - Added `bsequence'`, a frequent specialisation
  of `bsequence`.\n\n  - Added `bfoldMap`.\n\n  - Added `buniqC` and `bmempty`.\n\n
  \ - Improved the internal instance derivation mechanism. We no longer\n    need
  `unsafeCoerce` and the code should be in general indistinguishible\n    from hand-written
  instances (not currently verified).\n\n  - Fixed support for barbie-types that have
  additional type parameters (#5).\n\n## 0.1.4.0\n  - Added `btraverse_`\n\n  - Added
  the trivial `Void` and `Unit` barbies\n\n## 0.1.3.1\n  - Fixed issue on Barbie-types
  with strictness annotations.\n\n## 0.1.3.0\n  - Use both `Monoid` and `Semigroup`
  as constraints for the `Monoid` instance,\n    so that this works with ghc 8.0 to
  8.4 (Fraser Murray)\n\n## 0.1.2.0\n  - Use `Monoid` and not `Semigroup` as constraints
  for the `Monoid` instance\n\n## 0.1.1.0\n  - Added `instance Semigroup (Barbie b)`
  to go along the `Monoid` instance\n\n## 0.1.0.1\n  - Works under GHC 8.0.2, but
  notice one needs to use empty instance\n    declarations, because ghc chokes on
  `deriving` clauses.\n\n## 0.1.0.0 - Initial release\n"
basic-deps:
  base: ! '>=4.7 && <5'
  bifunctors: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 1.0.0.0
- 1.1.0.0
- 1.1.1.0
- 1.1.2.1
author: Daniel Gorin
latest: 1.1.2.1
description-type: markdown
description: |
  # barbies [![Build Status](https://travis-ci.org/jcpetruzza/barbies.svg?branch=master)](https://travis-ci.org/jcpetruzza/barbies)

  Types that are parametric on unary type-constructors that control
  their shapes are like Barbies that can wear different clothes
  to become a different doll. This is a common Haskell-idiom. E.g.,

  ```haskell

  data Barbie f
    = Barbie
        { name :: f String
        , age  :: f Int
        }

  b1 :: Barbie Last       -- Barbie with a monoid structure
  b2 :: Barbie (Const a)  -- container Barbie
  b3 :: Barbie Identity   -- Barbie's new clothes

  ```

  This package provides basic classes and abstractions to work with these types and easily transform them.
license-name: BSD-3-Clause
