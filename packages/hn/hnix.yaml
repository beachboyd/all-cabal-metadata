homepage: https://github.com/haskell-nix/hnix#readme
changelog-type: ''
hash: 13da97c09489ccf0b908fbe7817401137559eebc377c00cd7b8a66b77e8c251b
test-bench-deps:
  exceptions: -any
  serialise: -any
  cryptohash-sha1: -any
  bytestring: -any
  dependent-sum: -any
  data-fix: -any
  tasty-th: -any
  unix: -any
  hashing: -any
  split: -any
  base: ! '>=4.9 && <5'
  time: -any
  tasty-hedgehog: -any
  Diff: -any
  unordered-containers: ! '>=0.2.9 && <0.3'
  text: -any
  cryptohash-md5: -any
  megaparsec: ! '>=7.0 && <7.1'
  filepath: -any
  criterion: -any
  process: -any
  hedgehog: -any
  containers: -any
  hnix: -any
  cryptohash-sha256: -any
  interpolate: -any
  generic-random: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  cryptohash-sha512: -any
  pretty-show: -any
  base16-bytestring: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  deepseq: ! '>=1.4.2 && <1.5'
  Glob: -any
  template-haskell: -any
  directory: -any
maintainer: johnw@newartisans.com
synopsis: Haskell implementation of the Nix language
changelog: ''
basic-deps:
  http-client: ! '>=0.5.14 && <0.6'
  exceptions: ! '>=0.10.0 && <0.11'
  free: ==5.1.*
  regex-tdfa-text: ! '>=1.0.0 && <1.1'
  serialise: ! '>=0.2.1 && <0.3'
  cryptohash-sha1: ! '>=0.11.100 && <0.12'
  bytestring: ! '>=0.10.8 && <0.11'
  these: ! '>=0.7.5 && <0.8'
  dependent-sum: ! '>=0.4 && <0.5'
  lens-family: ==1.2.1
  logict: ! '>=0.6.0 && <0.7'
  data-fix: ! '>=0.2.0 && <0.3'
  unix: ! '>=2.7.2 && <2.8'
  haskeline: ! '>=0.7.4.2 && <0.8'
  hashing: ! '>=0.1.0 && <0.2'
  split: ! '>=0.2.3 && <0.3'
  base: ! '>=4.9 && <5'
  time: ! '>=1.8.0 && <1.9'
  comonad: ! '>=5.0.4 && <5.1'
  parser-combinators: ! '>=1.0.1 && <1.1'
  deriving-compat: ! '>=0.3 && <0.6'
  unordered-containers: ! '>=0.2.9 && <0.3'
  text: ! '>=1.2.3 && <1.3'
  cryptohash-md5: ! '>=0.11.100 && <0.12'
  megaparsec: ! '>=7.0 && <7.1'
  syb: ! '>=0.7 && <0.8'
  monad-control: ! '>=1.0.2 && <1.1'
  filepath: ! '>=1.4.2 && <1.5'
  process: ! '>=1.6.3 && <1.7'
  ref-tf: ! '>=0.4.0 && <0.5'
  lens-family-th: ! '>=0.5.0 && <0.6'
  semigroups: ! '>=0.18 && <0.19'
  array: ! '>=0.4 && <0.6'
  lens-family-core: ==1.2.1
  repline: -any
  xml: ! '>=1.3.14 && <1.4'
  containers: ! '>=0.5.11.0 && <0.7'
  hnix: -any
  binary: ! '>=0.8.5 && <0.9'
  cryptohash-sha256: ! '>=0.11.101 && <0.12'
  interpolate: ! '>=0.2.0 && <0.3'
  regex-tdfa: ! '>=1.2.3 && <1.3'
  http-client-tls: ! '>=0.3.5 && <0.4'
  contravariant: ! '>=1.5 && <1.6'
  mtl: ! '>=2.2.2 && <2.3'
  hashable: ! '>=1.2.5 && <1.3'
  transformers-base: ! '>=0.4.5 && <0.5'
  cryptohash-sha512: ! '>=0.11.100 && <0.12'
  pretty-show: ! '>=1.9.5 && <1.10'
  base16-bytestring: ! '>=0.1.1 && <0.2'
  prettyprinter: ! '>=1.2.1 && <1.3'
  transformers: ! '>=0.5.5 && <0.6'
  optparse-applicative: ! '>=0.14.3 && <0.15'
  hnix-store-core: ! '>=0.1.0 && <0.2'
  deepseq: ! '>=1.4.2 && <1.5'
  scientific: ! '>=0.3.6 && <0.4'
  monadlist: ! '>=0.0.2 && <0.1'
  http-types: ! '>=0.12.2 && <0.13'
  aeson: ! '>=1.4.2 && <1.5'
  template-haskell: -any
  vector: ! '>=0.12.0 && <0.13'
  directory: ! '>=1.3.1 && <1.4'
all-versions:
- 0.2.0
- 0.2.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
author: John Wiegley
latest: 0.6.1
description-type: markdown
description: |
  # hnix

  [![Build Status](https://api.travis-ci.org/haskell-nix/hnix.svg)](https://travis-ci.org/haskell-nix/hnix)
  [![Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/haskell-nix/Lobby)
  <sup>([Hackage Matrix Builder](https://matrix.hackage.haskell.org/package/hnix))</sup>

  Haskell parser, evaluator and type checker for the Nix language.

  ## Prerequisites

  Nix is installed and in your `$PATH`. This is so that `nix-store` can be used
  for interacting with store paths, until `hnix-store` is ready.

  ## Getting Started

  ```bash
  $ git clone --recursive https://github.com/haskell-nix/hnix.git
  ...
  $ cd hnix
  $ nix-shell
  $ cabal configure --enable-tests
  $ cabal build
  $ cabal test
  # To run all of the tests, which takes up to a minute:
  $ env ALL_TESTS=yes cabal test
  # To run only specific tests (see `tests/Main.hs` for a list)
  $ env NIXPKGS_TESTS=yes PRETTY_TESTS=1 cabal test
  $ ./dist/build/hnix/hnix --help
  ```

  ## Building a Docker container

  If you don't have Nix installed, or you'd just like to play around with `hnix`
  completely separately from your main system, you can build a Docker container:

  ```bash
  $ docker build -t hnix .
  $ docker run hnix hnix --eval --expr '1 + 2'

  # In order to refer to files under the current directory:
  $ docker run -v $PWD/:/tmp/build run hnix hnix default.nix
  ```

  ## Building with full debug info

  To build `hnix` for debugging, and with full tracing output and stack traces,
  use:

  ```
  $ nix-shell
  $ cabal configure --enable-tests --enable-profiling --flags=profiling --flags=tracing
  $ cabal build
  $ ./dist/build/hnix/hnix -v5 --trace <args> +RTS -xc
  ```

  Note that this will run quite slowly, but will give the most information as to
  what might potentially be going wrong during parsing or evaluation.

  ## Building with benchmarks enabled

  To build `hnix` with benchmarks enabled:

  ```
  $ nix-shell --arg doBenchmarks true
  $ cabal configure --enable-tests --enable-benchmarks
  $ cabal build
  $ cabal bench
  ```

  ## Building with profiling enabled

  To build `hnix` with profiling enabled:

  ```
  $ nix-shell
  $ cabal configure --enable-tests --enable-profiling --flags=profiling
  $ cabal build
  $ ./dist/build/hnix/hnix <args> +RTS -p
  ```

  ## Building with GHCJS

  From the project root directory, run:

  ```
  $ NIX_CONF_DIR=$PWD/ghcjs nix-build ghcjs
  ```

  This will build an `hnix` library that can be linked to your GHCJS
  application.

  ## Using the Cachix binary cache

  If you're on macOS, you can use the binary cache at Cachix to avoid building
  the specific dependencies used by hnix. Just use these commands:

      nix-env -iA cachix -f https://github.com/NixOS/nixpkgs/tarball/db557aab7b690f5e0e3348459f2e4dc8fd0d9298
      cachix use hnix

  ## How you can help

  ### Issue Tracker Backlog

  If you're looking for a way to help out, try taking a look
  [here](https://github.com/haskell-nix/hnix/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee).
  When you find an issue that looks interesting to you, comment on the ticket to
  let others know you're working on it; look for others who might have done the
  same. You can talk with everyone live on
  [Gitter](https://gitter.im/haskell-nix/Lobby).

  When you're ready to submit a pull request, test it with:
  ```
  git submodule update --init --recursive
  nix-shell --run "LANGUAGE_TESTS=yes cabal test"
  ```

  Make sure that all the tests that were passing prior to your PR are still
  passing afterwards; it's OK if no new tests are passing.

  ### Evaluating Nixpkgs with HNix

  Currently the main high-level goal is to be able to evaluate all of nixpkgs. To
  run this yourself, first build hnix with `nix-build`, then run the following
  command:

  ```
  ./result/bin/hnix --eval -E "import <nixpkgs> {}" --find
  ```
license-name: BSD-3-Clause
