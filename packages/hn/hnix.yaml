homepage: https://github.com/haskell-nix/hnix#readme
changelog-type: markdown
hash: 29b0d324da329f5599fcb59cc89fd0315a15a024a05678c2fcc939f2d84082a1
test-bench-deps:
  exceptions: -any
  serialise: -any
  bytestring: -any
  data-fix: -any
  tasty-th: -any
  unix: -any
  split: -any
  base: -any
  time: -any
  tasty-hedgehog: -any
  Diff: -any
  unordered-containers: -any
  text: -any
  megaparsec: -any
  filepath: -any
  criterion: -any
  process: -any
  hedgehog: -any
  containers: -any
  hnix: -any
  mtl: -any
  tasty-hunit: -any
  pretty-show: -any
  base16-bytestring: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  deepseq: -any
  Glob: -any
  template-haskell: -any
  neat-interpolation: -any
  directory: -any
maintainer: johnw@newartisans.com
synopsis: Haskell implementation of the Nix language
changelog: |2

  # Changelog


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.10.1...0.11.0#files_bucket) 0.11.0 (2020-11-02)

  * Breaking:
    * [(link)](https://github.com/haskell-nix/hnix/pull/740) Deleted incorrect `instance Generic1 NKeyName` from `module Nix.Expr.Types`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/739) Parentheses now are properly included in the location annotation for Nix expressions, change of `nixParens` in `module Nix.Parser` essentially results in the change of all module `nix*` function results, essentially making results of the whole module more proper.

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/741) Fix QQ Text lifting error: work around of [GHC#12596 "can't find interface-file declaration"](https://gitlab.haskell.org/ghc/ghc/-/issues/12596).
    * [(link)](https://github.com/haskell-nix/hnix/pull/744) Fix comments inclusion into location annotations, by using pre-whitespace position for source end locations.


  ### [(diff)](https://github.com/haskell-nix/hnix/compare/0.10.0...0.10.1#files_bucket) 0.10.1 (2020-09-13)

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/715) `{Binding, NExpr, NExprF, NKeyName}` gained `Ord1` instances.
      * These instances were required by downstream projects to be able to use newer HNix.
    * [(link)](https://github.com/haskell-nix/hnix/pull/712) CLI gained `--long-version` option for gathering a detailed debug information.
      * Currently, reports Git commit and its date.
      * [(link)](https://github.com/haskell-nix/hnix/issues/718) Currently does not work in case of use of the `nix-build`, in which case simply returns `UNKNOWN` placeholder.


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.9.1...0.10.0#files_bucket) 0.10.0 (2020-09-12)

  * Breaking:
    * [(link)](https://github.com/haskell-nix/hnix/pull/699) Removed `NExpr` `{FromJSON, ToJSON}` instances.
      * This also removed the JSON output feature for unevaluated expression trees.

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/703) CLI gained `--version` option.
    * Dependencies:
      * [(link)](https://github.com/haskell-nix/hnix/pull/686) Requires last major `data-fix` (`0.3`).
      * [(link)](https://github.com/haskell-nix/hnix/pull/679) Requires last major `prettyprinter` (`1.7`).


  ### [(diff)](https://github.com/haskell-nix/hnix/compare/0.9.0...0.9.1#files_bucket) 0.9.1 (2020-07-13)

  * Additional:
    * REPL:
      * Better tab completion.
      * Accepting multi-line input.
      * Support for passing evaluated expression result of `hnix --eval -E`.
        to REPL as an `input` variable.
      * Support for loading `.hnixrc` from the current directory.
    * Reporting of `builtins.nixVersion` bumped from 2.0 to 2.3.
    * Dependencies:
      * Freed from: `{interpolate, contravariant, semigroups, generic-random, tasty-quickcheck}`.
      * Requires last major `repline` (`0.4`).


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.8.0...0.9.0#files_bucket) 0.9.0 (2020-06-15)

  * Breaking:
    * Removed instances due to migration to `haskeline 0.8`:
      * `instance MonadException m => MonadException(StateT(HashMap FilePath NExprLoc) m)`.
      * `instance MonadException m => MonadException(Fix1T StandardTF m)`.
    * Dependencies:
      * Requires last major `haskeline` (`0.8`).

  * Additional:
    * Library: Official support for `GHC 8.4 - 8.10`.
    * Executable complies only under `GHC 8.10`.

  * Changelog started. Previous release was `0.8.0`.


  ---

  HNix uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org
basic-deps:
  http-client: '>=0.5.14 && <0.6 || >=0.6.4 && <0.8'
  exceptions: '>=0.10.0 && <0.11'
  free: ==5.1.*
  serialise: '>=0.2.1 && <0.3'
  semialign: '>=1 && <1.2'
  bytestring: '>=0.10.8 && <0.11'
  these: '>=1.0.1 && <1.2'
  lens-family: '>=1.2.2 && <2.2'
  logict: '>=0.6.0 && <0.7 || >=0.7.0.2 && <0.8'
  data-fix: '>=0.3.0 && <0.4'
  unix: '>=2.7.2 && <2.8'
  haskeline: '>=0.8.0.0 && <0.9'
  hashing: '>=0.1.0 && <0.2'
  split: '>=0.2.3 && <0.3'
  base: '>=4.11 && <5'
  time: '>=1.8.0 && <1.9 || >=1.9.3 && <1.10'
  comonad: '>=5.0.4 && <5.1'
  parser-combinators: '>=1.0.1 && <1.3'
  deriving-compat: '>=0.3 && <0.6'
  semialign-indexed: '>=1 && <1.2'
  unordered-containers: '>=0.2.9 && <0.3'
  text: '>=1.2.3 && <1.3'
  megaparsec: '>=7.0 && <9.1'
  syb: '>=0.7 && <0.8'
  monad-control: '>=1.0.2 && <1.1'
  filepath: '>=1.4.2 && <1.5'
  gitrev: '>=1.1.0 && <1.4'
  process: '>=1.6.3 && <1.7'
  ref-tf: '>=0.4.0 && <0.5'
  lens-family-th: '>=0.5.0 && <0.6'
  array: '>=0.4 && <0.6'
  lens-family-core: '>=1.2.2 && <2.2'
  repline: '>=0.4.0.0 && <0.5'
  xml: '>=1.3.14 && <1.4'
  containers: '>=0.5.11.0 && <0.7'
  some: '>=1.0.1 && <1.1'
  hnix: -any
  binary: '>=0.8.5 && <0.9'
  regex-tdfa: '>=1.2.3 && <1.4'
  http-client-tls: '>=0.3.5 && <0.4'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.2.5 && <1.4'
  transformers-base: '>=0.4.5 && <0.5'
  pretty-show: '>=1.9.5 && <1.11'
  base16-bytestring: '>=0.1.1 && <0.2'
  prettyprinter: '>=1.7.0 && <1.8'
  transformers: '>=0.5.5 && <0.6'
  optparse-applicative: '>=0.14.3 && <0.17'
  hnix-store-core: '>=0.1.0 && <0.3'
  deepseq: '>=1.4.3 && <1.5'
  scientific: '>=0.3.6 && <0.4'
  monadlist: '>=0.0.2 && <0.1'
  http-types: '>=0.12.2 && <0.13'
  aeson: '>=1.4.2 && <1.6'
  template-haskell: '>=2.13 && <2.17'
  vector: '>=0.12.0 && <0.13'
  neat-interpolation: '>=0.4 && <0.6'
  directory: '>=1.3.1 && <1.4'
all-versions:
- 0.2.0
- 0.2.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.7.0
- 0.7.1
- 0.8.0
- 0.9.0
- 0.9.1
- 0.10.0
- 0.10.1
- 0.11.0
author: John Wiegley
latest: 0.11.0
description-type: markdown
description: "[![Chatroom Gitter](https://img.shields.io/badge/Chatroom-Gitter-%23753a88)](https://gitter.im/haskell-nix/Lobby)\n[![Hackage](https://img.shields.io/hackage/v/hnix?color=%235e5086&label=Latest%20release%20on%20Hackage)](https://hackage.haskell.org/package/hnix)\n[![Hackage
  Matrix Builder](https://img.shields.io/badge/Hackage%20Matrix-Builder-%235e5086)](https://matrix.hackage.haskell.org/package/hnix)\n[![Bounds](https://img.shields.io/hackage-deps/v/hnix?label=Released%20dep%20bounds)](https://packdeps.haskellers.com/feed?needle=hnix)\n[![Hydra
  CI](https://img.shields.io/badge/Nixpkgs%20Hydra-CI-%234f72bb)](https://hydra.nixos.org/job/nixpkgs/trunk/haskellPackages.hnix.x86_64-linux#tabs-status)\n[![Repology
  page](https://img.shields.io/badge/Repology-page-%23005500)](https://repology.org/project/haskell:hnix/versions)\n\n\n#
  hnix\n\nParser, evaluator and type checker for the Nix language written in Haskell.\n\n\n##
  Contents\n\n<!-- TOC generates automatically, do not bother editing any further
  TOC text -->\n<!-- START doctoc generated TOC please keep comment here to allow
  auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n-
  [Prerequisites](#prerequisites)\n- [Getting Started](#getting-started)\n  - [Cachix
  prebuild binary caches](#cachix-prebuild-binary-caches)\n  - [Development using
  Cabal](#development-using-cabal)\n    - [Building the project](#building-the-project)\n
  \     - [With benchmarks](#with-benchmarks)\n      - [With profiling](#with-profiling)\n
  \     - [With full debug info](#with-full-debug-info)\n    - [Run HNix](#run-hnix)\n
  \ - [Use of the Nix-build](#use-of-the-nix-build)\n    - [Run benchmarks](#run-benchmarks)\n
  \   - [With profiling](#with-profiling-1)\n    - [With full debug info](#with-full-debug-info-1)\n
  \   - [Run the result](#run-the-result)\n- [Development status loop with amazing
  `ghcid`](#development-status-loop-with-amazing-ghcid)\n- [Using the HNix REPL](#using-the-hnix-repl)\n-
  [Nix laziness](#nix-laziness)\n- [Contributing](#contributing)\n- [Evaluating Nixpkgs
  with HNix](#evaluating-nixpkgs-with-hnix)\n\n<!-- END doctoc generated TOC please
  keep comment here to allow auto update -->\n\n\n## Prerequisites\nTooling is WIP,
  `nix-shell` and `nix-store` are still used for their purpose, so, to access them
  Nix is required to be installed.\n\n## Getting Started\n\n```\n# Note: --recursive\ngit
  clone --recursive https://github.com/haskell-nix/hnix.git\ncd hnix\n```\n\n\n###
  Cachix prebuild binary caches\n\nIf you opt in to use of Nix environment, please
  enable the official HNix Cachix binary cache:\n\n1. Go through https://cachix.org/
  and set it up.\n\n2. Run: `cachix use hnix`\n\n\n### Development using Cabal\n\nCabal
  [Quickstart](https://cabal.readthedocs.io/en/3.4/nix-local-build.html).\n\n1. (Optional),
  to enter the projects reproducible Nix environment:\n```\nnix-shell\n```\n  \n2.
  Building:\n```\ncabal v2-configure\ncabal v2-build\n```\n\n3. Loading the project
  into `ghci` REPL:\n```\ncabal v2-repl\n```\n\n4. Testing:\n\n* Default suite:\n```\ncabal
  v2-test\n```\n\n* All available tests:\n```\nenv ALL_TESTS=yes cabal v2-test\n```\n\n*
  Selected (list of tests is in `tests/Main.hs`):\n```\nenv NIXPKGS_TESTS=yes PRETTY_TESTS=1
  cabal v2-test\n```\n\n#### Building the project\n\n##### With benchmarks\n\nTo run
  benchmarks:\n\n```\ncabal v2-bench\n```\n\n##### With profiling\n\nTo build `hnix`
  with profiling enabled:\n\n```\ncabal v2-configure --enable-tests --enable-profiling
  --flags=profiling\ncabal v2-run hnix -- <args> +RTS -p\n```\n\n##### With full debug
  info\n\nTo build `hnix` for debugging, with full tracing output and stack traces:\n\n```\ncabal
  v2-configure --enable-tests --enable-profiling --flags=profiling --flags=tracing\ncabal
  v2-run hnix -- -v5 --trace <args> +RTS -xc\n```\n\nNote that this going to run quite
  slowly, but would give the most information as to what happens during parsing &
  evaluation.\n\n\n#### Run HNix\n```\ncabal v2-run hnix -- --help\n```\n(`--` is
  for separation between `cabal` & `hnix` args)\n\n\n### Use of the Nix-build\n\nThere
  is a number of build options to use with `nix-build`, documentation of them is in:
  `./default.nix`, keys essentially pass-through the [Nixpkgs Haskell Lib API](https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib.nix).\n\nOptions
  can be used as:\n```\nnix-build \\\n  --arg <option1> <argument1> \\\n  --arg <option2>
  <argument2> \\\n  --argstr <option3> \"<strinTypeArg>\"\n```\n\n#### Run benchmarks\n\n```\nnix-build
  \\\n  --arg disableOptimization false \\\n  --arg enableDeadCodeElimination true
  \\\n  --arg doStrip true \\\n  --arg doBenchmark true\n```\n\n#### With profiling\n\n```\nnix-build
  \\\n  --arg disableOptimization false \\\n  --arg enableDeadCodeElimination true
  \\\n  --arg enableLibraryProfiling true \\\n  --arg enableExecutableProfiling true\n```\n\n####
  With full debug info\n\n```\nnix-build \\\n  --arg disableOptimization false \\\n
  \ --arg enableDeadCodeElimination true \\\n  --arg doBenchmark true \\\n  --arg
  doStrip false \\\n  --arg enableLibraryProfiling true \\\n  --arg enableExecutableProfiling
  true\n  --arg doTracing true \\\n  --arg enableDWARFDebugging true\n```\n\n####
  Run the result\n\n```\n./result/bin/hnix\n```\n\n## Development status loop with
  amazing [`ghcid`](https://github.com/ndmitchell/ghcid)\n\n```\nghcid --command=\"cabal
  v2-repl --repl-options=-fno-code --repl-options=-fno-break-on-exception --repl-options=-fno-break-on-error
  --repl-options=-v1 --repl-options=-ferror-spans --repl-options=-j\"\n```\n(optional)
  To use projects reproducible environment, wrap `ghcid ...` command into a `nix-shell
  --command ' '`.\n\nFor simplicity `alias` the command in your shell.\n\n\n## Using
  the HNix REPL\n\nEnter in:\n```\nhnix --repl\n```\n\nEvaluate an expression:\n```\nhnix
  --eval -E '(import <nixpkgs> {}).pkgs.hello' --repl\n```\nThis also binds the evaluated
  expression result to the `input` variable, so that variable can be inspected.\n\nUse
  the `:help` command for a list of all available REPL commands.\n\n## Nix laziness\n\nNix
  is a lazy language with the ability of recursion, so by default REPL and eval prints
  are lazy:\n\n```\nhnix \\\n  --eval \\\n  --expr '{ x = true; }'\n  \n{ x = \"<CYCLE>\";
  }\n```\n\nTo disable laziness add the `--strict` to commands or `:set strict` in
  the REPL.\n\n```\nhnix \\\n  --eval \\\n  # Strictly \\\n  --strict \\\n  --expr
  '{ x = true; }'\n  \n{ x = true; }\n```\n\n## Contributing\n\n1. If something in
  the [quests](https://github.com/haskell-nix/hnix/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee)
  looks interesting, look through the thread and leave a comment taking it, to let
  others know you're working on it.\n\n2. You are free to chat with everyone on [Gitter](https://gitter.im/haskell-nix/Lobby).\n\n3.
  When the pull request is ready to be submitted, to save time - please, test it with:\n\n```\ngit
  submodule update --init --recursive\nnix-shell --run \"LANGUAGE_TESTS=yes cabal
  v2-test\"\n```\n\nPlease, check that all tests that were passing prior (most probably
  all tests mentioned in the command) are still passing for the PR, it is faster to
  check that locally than through CI. It's OK if no new tests are passing.\n\n## Evaluating
  Nixpkgs with HNix\n\nCurrently, the main high-level goal is to be able to evaluate
  all of Nixpkgs:\n\n```\nhnix --eval -E \"import <nixpkgs> {}\" --find\n```\n"
license-name: BSD-3-Clause
