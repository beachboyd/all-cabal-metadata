homepage: https://github.com/haskell-nix/hnix#readme
changelog-type: ''
hash: 464bcaca5ae943843dfac8422fc41826b376a52f4839696528e9e2dde97a7b8e
test-bench-deps:
  exceptions: -any
  serialise: -any
  cryptohash-sha1: -any
  bytestring: -any
  ansi-wl-pprint: -any
  data-fix: -any
  tasty-th: -any
  unix: -any
  hashing: -any
  split: -any
  base: ! '>=4.9 && <5'
  time: -any
  tasty-hedgehog: -any
  Diff: -any
  unordered-containers: ! '>=0.2.9 && <0.3'
  text: -any
  cryptohash-md5: -any
  megaparsec: -any
  filepath: -any
  criterion: -any
  process: -any
  hedgehog: -any
  containers: -any
  hnix: -any
  cryptohash-sha256: -any
  interpolate: -any
  generic-random: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  cryptohash-sha512: -any
  pretty-show: -any
  base16-bytestring: -any
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  deepseq: ! '>=1.4.2 && <1.5'
  Glob: -any
  template-haskell: -any
  directory: -any
maintainer: johnw@newartisans.com
synopsis: Haskell implementation of the Nix language
changelog: ''
basic-deps:
  http-client: -any
  exceptions: -any
  ghc-datasize: -any
  regex-tdfa-text: -any
  serialise: -any
  cryptohash-sha1: -any
  bytestring: -any
  these: -any
  lens-family: ==1.2.1
  ansi-wl-pprint: -any
  logict: -any
  data-fix: -any
  unix: -any
  haskeline: -any
  hashing: -any
  split: -any
  base: ! '>=4.9 && <5'
  time: -any
  deriving-compat: ! '>=0.3 && <0.6'
  unordered-containers: ! '>=0.2.9 && <0.3'
  text: -any
  cryptohash-md5: -any
  megaparsec: ! '>=6.5 && <7.0'
  syb: -any
  filepath: -any
  process: -any
  lens-family-th: -any
  semigroups: ! '>=0.18 && <0.19'
  array: ! '>=0.4 && <0.6'
  lens-family-core: ==1.2.1
  repline: -any
  xml: -any
  containers: -any
  hnix: -any
  binary: -any
  cryptohash-sha256: -any
  interpolate: -any
  regex-tdfa: -any
  http-client-tls: -any
  mtl: -any
  hashable: ! '>=1.2.5 && <1.3'
  cryptohash-sha512: -any
  pretty-show: -any
  base16-bytestring: -any
  transformers: -any
  optparse-applicative: -any
  deepseq: ! '>=1.4.2 && <1.5'
  scientific: -any
  monadlist: -any
  http-types: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  directory: -any
all-versions:
- 0.2.0
- 0.2.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
author: John Wiegley
latest: 0.5.2
description-type: markdown
description: ! '# hnix


  [![Build Status](https://api.travis-ci.org/haskell-nix/hnix.svg)](https://travis-ci.org/haskell-nix/hnix)

  [![Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/haskell-nix/Lobby)

  <sup>([Hackage Matrix Builder](https://matrix.hackage.haskell.org/package/hnix))</sup>


  Haskell parser, evaluator and type checker for the Nix language.


  ## Prerequisites


  Nix is installed and in your `$PATH`. This is so that `nix-store` can be used

  for interacting with store paths, until `hnix-store` is ready.


  ## Getting Started


  ```bash

  $ git clone --recursive https://github.com/haskell-nix/hnix.git

  ...

  $ cd hnix

  $ nix-shell

  $ cabal configure --enable-tests

  $ cabal build

  $ cabal test

  # To run all of the tests, which takes up to a minute:

  $ env ALL_TESTS=yes cabal test

  # To run only specific tests (see `tests/Main.hs` for a list)

  $ env NIXPKGS_TESTS=yes PRETTY_TESTS=yes cabal test

  $ ./dist/build/hnix/hnix --help

  ```


  ## Building a Docker container


  If you don''t have Nix installed, or you''d just like to play around with `hnix`

  completely separately from your main system, you can build a Docker container:


  ```bash

  $ docker build -t hnix .

  $ docker run hnix hnix --eval --expr ''1 + 2''


  # In order to refer to files under the current directory:

  $ docker run -v $PWD/:/tmp/build run hnix hnix default.nix

  ```


  ## Building with full debug info


  To build `hnix` for debugging, and with full tracing output and stack traces,

  use:


  ```

  $ nix-shell

  $ cabal configure --enable-tests --enable-profiling --flags=profiling --flags=tracing

  $ cabal build

  $ ./dist/build/hnix/hnix -v5 --trace <args> +RTS -xc

  ```


  Note that this will run quite slowly, but will give the most information as to

  what might potentially be going wrong during parsing or evaluation.


  ## Building with benchmarks enabled


  To build `hnix` with benchmarks enabled:


  ```

  $ nix-shell --arg doBenchmarks true

  $ cabal configure --enable-tests --enable-benchmarks

  $ cabal build

  $ cabal bench

  ```


  ## Building with profiling enabled


  To build `hnix` with profiling enabled:


  ```

  $ nix-shell

  $ cabal configure --enable-tests --enable-profiling --flags=profiling

  $ cabal build

  $ ./dist/build/hnix/hnix <args> +RTS -p

  ```


  ## Building with GHCJS


  From the project root directory, run:


  ```

  $ NIX_CONF_DIR=$PWD/ghcjs nix-build ghcjs

  ```


  This will build an `hnix` library that can be linked to your GHCJS

  application.


  ## How you can help


  If you''re looking for a way to help out, try taking a look

  [here](https://github.com/haskell-nix/hnix/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee).

  When you find an issue that looks interesting to you, comment on the ticket to

  let others know you''re working on it; look for others who might have done the

  same. You can talk with everyone live on

  [Gitter](https://gitter.im/haskell-nix/Lobby).


  When you''re ready to submit a pull request, test it with:

  ```

  git submodule update --init --recursive

  nix-shell --run "LANGUAGE_TESTS=yes cabal test"

  ```


  Make sure that all the tests that were passing prior to your PR are still

  passing afterwards; it''s OK if no new tests are passing.

'
license-name: BSD-3-Clause
