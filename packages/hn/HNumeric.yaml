homepage: https://github.com/Axect/HNumeric#readme
changelog-type: markdown
hash: 61c0b9febb0c5c7e283b3a727d342e114553c3ed91bacb2714cc1c5cbaf223fa
test-bench-deps:
  base: ! '>=4.7 && <5'
  HNumeric: -any
  normaldistribution: -any
maintainer: edeftg@gmail.com
synopsis: Haskell Numeric Library with pure functionality, R & MATLAB Syntax.
changelog: ! '# Changelog for HNumeric


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  HNumeric: -any
  normaldistribution: -any
all-versions:
- '0.2.0.0'
author: Tae Geun Kim
latest: '0.2.0.0'
description-type: markdown
description: ! "# HNumeric\n\n![Travis](https://travis-ci.org/Axect/HNumeric.svg?branch=master)\n\n##
  Packages\n\n* HNum.Vector : Contain vector, matrix, linear algebra\n* HNum.Stats
  : Contain statistical functions\n\n## Installation\n\n### 1. Native Use\n\nYou can
  use this package just change `app/Main.hs`\nThen, just type next command\n\n```bash\ngit
  clone https://github.com/Axect/HNumeric\n```\n\n### 2. Cabal Install\n\nFirst, install
  prerequisite.\n\n```sh\ncabal install normaldistribution\n```\n  \nSecond, install
  tarball & unpack.\n\n```sh\nexport VERSION=0.2.0.0\n\nwget -O HNumeric-${VERSION}.tar.gz
  https://github.com/Axect/HNumeric/blob/master/dist/HNumeric-${VERSION}.tar.gz\\?raw\\=true\n\ntar
  -xvf HNumeric-${VERSION}.tar.gz\n```\n\nFinally, build & install\n\n```sh\ncabal
  build\ncabal install\n```\n\nFinish!\n\n### 3. Import to Stack project\n\nIf you
  use this package to your own project, then you should change `stack.yaml` and `package.yaml`\n\n####
  1) Change `stack.yaml`\n\n```yaml\n# In stack.yaml\nextra-deps:\n  - git: https://github.com/Axect/HNumeric.git\n
  \   commit: [Latest Commit]\n  - normaldistribution-1.1.0,3\n```\n\n* Replace [Latest
  Commit] with latest commit in [HNumeric Commit](https://github.com/Axect/HNumeric/commits/master)\n\n####
  2) Change `package.yaml`\n\n```yaml\n# In package.yaml\ndependecies:\n- base\n-
  HNumeric\n- normaldistribution\n```\n\nThen enjoy!\n\n## Usage\n\n### Import Module\n\n*
  HNum.Vector\n* HNum.Stats\n\n### Basic Vector Usage\n\n```haskell\n-- HNumeric-0.2.0.0
  Documentation\n\nlet a = vector [1,2,3] -- Vector declaration\nlet b = vector [4,5,6]\n\n--
  Print Vector\nprint a\n\n-- You can (+1) by fmap (Vector is functor)\n(+1) <$> a
  \n\n-- Or MATLAB-like operator (.+, .-, .*, ./, .^)\na .+ 1\n\n-- You can make list
  from vector\ntoList a -- [1, 2, 3]\n\n-- You can make vector from list\nfromList
  [1,2,3] -- Vector [1,2,3]\n\n-- You can add (subtract, multiply, divide) vectors\na
  + b -- Vector [5,7,9]\n\n-- Also dot product is here.\na .*. b -- 1*4 + 2*5 + 3*6
  = 32\n\n-- Declare Matrix (Syntactic Sugar)\nlet c = matrix [[1,2],[3,4]]\n\n--
  or Declare using R Syntax\nlet d = Matrix {val = Vector [5,6,7,8], row = 2, col
  = 2, byRow = True}\n\n-- Determinant\ndet c\n\n-- Inverse\ninv c\n\n-- Transpose\ntranspose
  c\n\n-- Matrix ops with Constant (+, -, *, /, ^)\nc .+ 1 -- Matrix [[2,3],[4,5]]\n\n--
  Matrix ops with Matrix (+, -)\nc + c -- Matrix [[2,4],[6,8]]\n\n-- Matrix Multiplication\nc
  %*% d\n\n-- Matrix - Inverse Multiplication\nc %/% d\n\n-- Vector Concatenate\nhcat
  a b -- Vector [1,2,3,4,5,6]\nvcat a b -- Matrix [[1,2,3],[4,5,6]]\n\n-- Matrix Concatenate\nhcat
  c d -- Matrix [[1,2,5,6],[3,4,7,8]]\nvcat c d -- Matrix [[1,2],[3,4],[5,6],[7,8]]\n\n--
  Insert Vector to Matrix\nVector [1, 2] .: c -- Matrix [[1,2],[1,2],[3,4]]\n```\n\n###
  Basic Stats Usage\n\n```haskell\n-- Sample Vector (import Vector)\nv = Vector [1..10]\nw
  = Vector [10, 9 .. 1]\n\n-- Mean\nmean v\n\n-- Var\nvar v\n\n-- Std\nstd v\n\n--
  Cov Matrix\ncov v w\n\n-- Only Cov\ncov' v w\n\n-- Linear Fit\n(intercept, slope)
  = lm v w -- (11.0, -1.0) -- (Intercept, Slope)\n\n-- Linear Fit function\nlineFit
  (intercept, slope) (Vector [1 .. 20])\n\n-- RSS\nrss v w\n\n-- RSE\nrse v w\n```\n\n###
  TODO\n\n* ~~Effective Matrix Multiplication~~\n* Write Vector to CSV\n* ~~Haddock~~\n*
  DataFrame using Map\n* ~~Fix Matrix Implementation~~\n* ~~Numeric Class Define~~\n"
license-name: BSD3
