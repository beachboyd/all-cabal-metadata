homepage: https://github.com/ian-ross/hnetcdf
changelog-type: markdown
hash: b7c6c49177cb2794c16c3a59016f365791bf45789a45e6d7115004171a9acd49
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  base: ! '>=4.3 && <5'
  test-framework-quickcheck2: ==0.3.*
  HUnit: ! '>=1.2.5.2 && <1.4'
  containers: -any
  errors: -any
  QuickCheck: ! '>=2.8.1 && <2.9'
  hnetcdf: -any
  repa: -any
  vector: -any
  directory: -any
maintainer: ian@skybluetrades.net
synopsis: Haskell NetCDF library
changelog: ! "0.3.0.0\n-------\n* Breaking change: fix problem with hmatrix API --
  replace\n  `HRowMajorMatrix` and `HColumnMajorMatrix` with single `HMatrix`\n  type
  and manage data ordering internally.\n\n0.2.1.0\n-------\n* Update to work with
  hmatrix 0.16\n\n0.2.0.0\n-------\n* Add partial output API\n"
basic-deps:
  either: ! '>=4.4 && <4.5'
  base: ! '>=4.3 && <5'
  filepath: ! '>=1.4 && <1.5'
  containers: ! '>=0.5.0.0 && <0.6'
  transformers: ! '>=0.2 && <0.6'
  errors: ! '>=2.0 && <2.2'
  hnetcdf: -any
  repa: ==3.4.*
  vector: ! '>=0.10.9 && <0.12'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.0
author: Ian Ross
latest: 0.4.0.0
description-type: markdown
description: ! "hnetcdf\n=======\n\n[![Build Status](https://travis-ci.org/ian-ross/hnetcdf.svg?branch=master)](https://travis-ci.org/ian-ross/hnetcdf)\n\nHaskell
  NetCDF library: as well as conventional low-level FFI bindings\nto the functions
  in the NetCDF library (in the `Data.NetCDF.Raw`\nmodules), `hnetcdf` provides a
  higher-level Haskell interface\n(currently only for reading data).  This higher-level
  interface aims\nto provide a \"container polymorphic\" view of NetCDF data allowing\nNetCDF
  variables to be read into `Storable` `Vectors` and Repa arrays\neasily.\n\nFor example:\n\n```
  haskell\nimport Data.NetCDF\nimport Foreign.C\nimport qualified Data.Vector.Storable
  as SV\n...\ntype SVRet = IO (Either NcError (SV.Vector a))\n...\n  enc <- openFile
  \"tst.nc\" ReadMode\n  case enc of\n    Right nc -> do\n      eval <- get nc \"varname\"
  :: SVRet CDouble\n      ...\n```\n\ngets the full contents of a NetCDF variable
  as a `Storable` `Vector`,\nwhile the following code reads the same variable (assumed
  to be\nthree-dimensional) into a Repa array:\n\n``` haskell\nimport Data.NetCDF\nimport
  Foreign.C\nimport qualified Data.Array.Repa as R\nimport qualified Data.Array.Repa.Eval
  as RE\nimport Data.Array.Repa.Repr.ForeignPtr (F)\n...\ntype RepaRet3 a = IO (Either
  NcError (R.Array F R.DIM3 a))\n...\n  enc <- openFile \"tst.nc\" ReadMode\n  case
  enc of\n    Right nc -> do\n      eval <- get nc \"varname\" :: RepaRet3 CDouble\n
  \     ...\n```\n"
license-name: BSD-3-Clause
