homepage: https://github.com/verement/lmdb-simple#readme
changelog-type: ''
hash: a4e72c3e2edbf4103ce7298ab566f8c914ea9159624adc2ce094f1122b47c5e3
test-bench-deps:
  lmdb-simple: -any
  base: -any
  hspec: -any
  criterion: -any
  QuickCheck: -any
maintainer: rob@mars.org
synopsis: Simple API for LMDB
changelog: ''
basic-deps:
  lmdb: ! '>=0.2 && <0.3'
  serialise: ! '>=0.2 && <0.3'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
author: Rob Leslie
latest: '0.4.0.0'
description-type: markdown
description: ! "\nSimple Haskell API for LMDB\n===========================\n\nThis
  package allows you to store arbitrary Haskell values in and retrieve them\nfrom
  a persistent [Lightning Memory-mapped Database][LMDB] on disk.\n\n  [LMDB]: https://symas.com/lightning-memory-mapped-database/\n\nLMDB
  is a high-performance [ACID][]-compliant no-maintenance read-optimized\nkey-value
  store. Any Haskell type with a [`Serialise`][Serialise] instance can\nbe stored
  in an LMDB database, or used as a key to index one.\n\n  [ACID]: https://en.wikipedia.org/wiki/ACID\n
  \ [Serialise]: https://hackage.haskell.org/package/serialise/docs/Codec-Serialise-Tutorial.html#g:3\n\nThis
  package provides a few different APIs for using LMDB:\n\n  * The basic API provides
  transactional `put` and `get` functions to store\n    and retrieve values from an
  LMDB database.\n\n  * The extended API provides many functions similar to those
  in `Data.Map`,\n    e.g. `lookup`, `insert`, `delete`, `foldr`, and so on.\n\n  *
  The `View` API provides a read-only snapshot of an LMDB database that can\n    be
  queried from pure code.\n\n  * The `DBRef` API provides a mutable variable similar
  to `IORef` that is\n    tied to a particular key in an LMDB database.\n\n"
license-name: BSD3
