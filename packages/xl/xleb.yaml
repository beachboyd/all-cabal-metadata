homepage: https://github.com/aisamanra/xleb
changelog-type: markdown
hash: 8f056c9251ac0206f7cf2e61d38f15102aa377d7eb8bc77f76b97f6255d690a3
test-bench-deps: {}
maintainer: Getty Ritter <xleb@infinitenegativeutility.com>
synopsis: A simple monadic language for parsing XML structures.
changelog: ! '0.1.0

  =====


  Initial working library version.

'
basic-deps:
  base: ! '>=4.7 && <5'
  xleb: -any
  xml: ==1.3.*
  containers: ! '>=0.5.10 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  pretty-show: ! '>=1.6 && <1.7'
all-versions:
- '0.1.0'
author: Getty Ritter <xleb@infinitenegativeutility.com>
latest: '0.1.0'
description-type: markdown
description: ! "# Xleb\n\nThe `xleb` library defines a simple monadic language for
  easily parsing XML structures. It does not parse the XML itself, relying on the
  [`xml`](http://hackage.haskell.org/package/xml) library to define the underlying
  types and parser, but rather exposes a simple monad with helper functions to make
  defining XML-based structures quick and straightforward, of roughly equal complexity
  to defining a `fromJSON` instance for [`aeson`](http://hackage.haskell.org/package/aeson).\n\n##
  Basic Usage\n\n\nThe `Xleb` monad describes both parsing _and_ traversing a given
  XML structure: several of the functions to produce `Xleb` computations take other
  `Xleb` computations, which are run on various sub-parts of the XML tree. Consequently,
  instead of decomposing an XML structure and passing it around to various functions,
  the `Xleb` language treats \"the current location in the tree\" as an implicit piece
  of data in the `Xleb` monad.\n\nYou will generally want to identify your root note
  with the `elem` function to ensure that your root note has the tag you expect. Children
  of that node can be accessed using the `child` or `children` function to either
  unambiguously find a specific child element, or to find all child elements that
  match a given selector and apply a `Xleb` computation to each of them.\n\n~~~~.haskell\n
  \ a <- X.child (X.byTag \"a\") parseA\n  b <- X.children (X.byTag \"b\") parseB\n~~~~\n\nLeaf
  data tends to come in two forms in XML: attribute values (like `<tag attr=\"value\">`)
  or tag content (like `<tag>value</tag>`). In both cases, the `Xleb` functions allow
  you to parse that content however you'd like by providing an arbitrary function
  of type `String -> Either String a`. The `xleb` library provides several built-in
  functions of this type for common situations.\n\n~~~~.haskell\n  c <- X.attr \"index\"
  X.number\n  d <- X.contents X.string\n~~~~\n\nFinally, the `Xleb` monad has `Alternative`
  instances which allow for concise expression of optional values or multiple possibilities.\n\n~~~~.haskell\n
  \ e <- X.children X.any (parseA <|> parseB)\n  f <- optional (X.attr \"total\" X.number)\n~~~~\n\n##
  Simple Example\n\nSay we want to parse a simple XML feed format that looks like
  the following, with the extra caveat that we'd like the `author` field to be optional:\n\n~~~~.xml\n<feed>\n
  \ <title>Feed Name</title>\n  <author>Pierre Menard</author>\n  <entry title=\"Entry
  01\">First Post</entry>\n  <entry title=\"Entry 02\">Second Post Post</entry>\n</feed>\n~~~~\n\nWe
  can write a `Xleb` computation which is capable of parsing this structure in a handful
  of lines, here written in a slightly unusual way in order to show off some features
  of the library:\n\n~~~~.haskell\nimport           Control.Applicative (optional)\nimport
  qualified Text.XML.Xleb as X\n\nfeed :: X.Xleb (String, Maybe String, [(String,
  String)])\nfeed = X.elem \"feed\" $ do\n  feedTitle   <- X.child (X.byTag \"title\")
  $\n                   X.contents X.string\n  feedAuthor  <- optional $ X.child (X.byTag
  \"author\") $\n                              X.contents X.string\n  feedEntries
  <- X.children (X.byTag \"entry\") entry\n  return (feedTitle, feedAuthor, feedEntries)\n\nentry
  :: X.Xleb (String, String)\nentry = (,) <$> X.attr \"title\" X.string <*> X.contents
  X.string\n~~~~\n\nFor a larger example, look at the [Atom-parsing example](https://github.com/aisamanra/xleb/blob/master/examples/atom/Main.hs),
  which is both more idiomatic and more complete.\n"
license-name: BSD3
