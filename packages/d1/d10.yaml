homepage: https://github.com/typeclasses/d10
changelog-type: markdown
hash: 1915a128a07c36c69015d5b45f3eb3d373c7ad5b20850357012e5468c697c535
test-bench-deps:
  base: ! '>=4.10 && <4.13'
  doctest: ! '>=0.13 && <0.17'
maintainer: Chris Martin, Julie Moronuki
synopsis: Digits 0-9
changelog: ! "**v0.1.0.0**\n\n  * Initial release\n\n**v0.1.0.1**\n\n  * Improve error
  messages when quasi-quoters are used in a\n    non-expression context\n\n**v0.1.1.0**\n\n
  \ * Add functions for generating Template Haskell expressions\n    to be spliced,
  as alternatives to using the quasi-quoters\n\n**v0.2.0.0**\n\n  * Add Template Haskell
  splice patterns `d10Pat` and `d10ListPat`\n  * Define `quotePat` for the quasi-quoters
  `d10` and `d10list`,\n    so they can now be used with pattern matching\n  * Add
  `Integral a` constraint to `d10` and `d10list` in the\n    `Data.D10.Num` module,
  because this is needed for the\n    definition of `quotePat`.\n\n**v0.2.0.1**\n\n
  \ * Add `CHANGELOG.md` to package distribution\n\n**v0.2.1.0**\n\n  * Add functions
  mod-10 arithmetic functions: `(+)`, `(-)`, `(*)`\n"
basic-deps:
  base: ! '>=4.10 && <4.13'
  template-haskell: ! '>=2.12 && <2.15'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.1
- 0.2.1.0
author: Chris Martin
latest: 0.2.1.0
description-type: markdown
description: ! "# d10\n\nData types representing the digits zero through nine.\n\n##
  Modules\n\nEach of the following modules defines a different type named\n`D10`,
  all of which are different representations of the same\nconcept:\n\n* `Data.D10.Char`
  - Defines a `D10` type as a newtype for `Char`,\n  where the values are restricted
  to characters between `'0'` and\n  `'9'`.\n* `Data.D10.Num` - Defines a `D10` type
  as a newtype for any\n  type with an instance of the `Num` class, where the values\n
  \ are restricted to numbers between `fromInteger 0` and\n  `fromInteger 9`.\n* `Data.D10.Safe`
  - Defines a `D10` type as\n  `D0 | D1 | D2 | ... | D9`.\n\nOther modules:\n\n* `Data.D10.Predicate`
  - Functions to test whether values of\n  various types represent digits in the range
  *0* to *9*.\n\n## Quasi-quoters\n\nEach module that defines a `D10` type also defines
  quasi-quoters\nfor it. With the `QuasiQuotes` GHC extension enabled, a single\ndigit
  like *7* can be written as `[d10|7|]`, and a list of digits\nlike *[4,5,6]* can
  be written as `[d10|456|]`. For `Data.D10.Char`\nand `Data.D10.Num`, the quasi-quoters
  are an important feature,\nbecause the `D10` types defined in these modules have
  unsafe\nconstructors, and the quasi-quoters provide compile-time assurance\nthat
  we never construct a `D10` that represents a value outside\nthe range *0* to *9*.
  For `Data.D10.Safe`, the quasi-quoter is\noffered merely as a possible convenience,
  allowing you to write\n`[d10|456789|]` in place of the somewhat longer expression\n`[D4,D5,D6,D7,D8,D9]`.\n"
license-name: MIT
