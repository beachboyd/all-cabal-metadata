homepage: http://github.com/llvm-hs/llvm-hs/
changelog-type: markdown
hash: 63e5e91dd24b66b52311dc109bdc94ac6a773d60d07977d61c3b2626e4672d16
test-bench-deps:
  bytestring: -any
  base: ! '>=4.9 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  containers: ! '>=0.4.2.1'
  llvm-hs-pure: -any
  tasty-quickcheck: ! '>=0.8'
  mtl: ! '>=2.1'
  tasty-hunit: ! '>=0.9'
  transformers: ! '>=0.3'
  tasty: ! '>=0.11'
maintainer: Anthony Cowley, Stephen Diehl, Moritz Kiefer <moritz.kiefer@purelyfunctional.org>
synopsis: Pure Haskell LLVM functionality (no FFI).
changelog: ! "## 6.0.0 (2018-03-06)\n\n* Support for LLVM 6.0\n  * Add `StrictFP`
  and `SanitizeHWAddress` function attributes.\n  * Remove `UnsafeAlgebra` constructor
  from `FastMathFlags`.\n  * Add `allowReassoc`, `allowContract` and `approxFunc`
  fields to `FastMathFlags`.\n  * Remove `NoFastMathFlags` constructor since it is
  equivalent to\n    setting all fields in the `FastMathFlags` record to\n    `False`.
  Existing uses of `NoFastMathFlags` can be replaced by the\n    `noFastMathFlags`
  value.\n* Add `AggregateZero` for zero-initializing structs, arrays and vectors.
  Previously `Null`\n  was used for null pointers as  well as zero-inializing aggregates.
  The new behavior reflects\n  LLVM’s internal representation and the C++-API. Existing
  uses of `Null` on non-pointer types\n  must be changed to `AggregateZero`.\n* Fix
  recursive function calls in the `IRBuilder` API.\n\n## 5.1.2 (2018-01-06)\n\n* Fixes
  and enhancements to the IRBuilder\n  * `sdiv` and `udiv` no longer default to exact.\n
  \ * Fix type of global references.\n  * Add more instructions.\n\n\n## 5.1.1 (2017-12-16)\n\n*
  Add a completely new API for building modules in a monadic style similar to the
  IRBuilder provided by LLVM’s C++ API. The modules can be found in `LLVM.IRBuilder`.
  An example can be found in the readme and in the test suite.\n* Add an API for getting
  the type of LLVM values in\n  `LLVM.AST.Typed`. This is primarily intended to be
  used in other\n  libraries that build upon `llvm-hs-pure` such as `llvm-hs-pretty`.\n\n##
  5.1.0 (2017-10-12)\n\n### Enhancements\n\n* Suport string attributes as parameter
  attributes\n* Support more calling conventions\n* Support `NoTail` `TailCallKind`\n\n##
  5.0.0 (2017-09-07)\n\n* Support for LLVM 5.0\n\n    We only give a summary of the
  changes affecting the public API of `llvm-hs-pure` here.\n    Please refer to the
  official\n    [release notes for LLVM 5.0](http://releases.llvm.org/5.0.0/docs/ReleaseNotes.html)\n
  \   for an overview of all changes in LLVM 5.0.\n\n    * The `X86_64_Win64` calling
  convention is now called `Win64`.\n    * There is a new `Speculatable` function
  attribute.\n    * The `CrossThread` synchronization scope has been removed. There
  is\n      now a new `System` synchronization scope.\n\n## 4.1.0 (2017-05-17)\n\n*
  Switch AST to `ByteString`/`ShortByteString` reflecting LLVM’s use\n  of C-style
  strings.\n* `preferredAlignment` is now a `Word32` instead of `Maybe Word32`. To\n
  \ recover the old behavior set it to the same value as abiAlignment.\n* `GlobalAlias`
  now expects the element type of a pointer type instead\n  of the pointer type itself.
  The address space is passed separately\n  via the `addrSpace` field. This makes
  `GlobalAlias` consistent with\n  `GlobalVariable`.\n* The `FloatingPointType` constructor
  now takes a `FloatingPointType` argument\n  instead of a width and a `FloatingPointFormat`
  to more closely match the\n  LLVM IR language reference.\n* The `IsString` instance
  of `Name` now throws an error on non-ASCII\n  strings instead of silently discarding
  the upper bytes. There is\n  also a new `mkName` function with the same behavior
  for easier\n  discoverability. Non-ASCII names need to be encoded using an arbitrary
  encoding to\n  to a `ShortByteString` which can then be used as a `Name`.\n\n##
  4.0.0 (initial release, changes in comparison to llvm-general)\n\n* Move modules
  from `LLVM.General*` to `LLVM.*`\n* Support for LLVM 4.0\n* Improved support for
  LLVM’s exception handling instructions\n* `-fshared-llvm` is now supported on windows
  (thanks to @RyanGLScott)\n* Default to `-fshared-llvm`\n* Expose `LLVM.Internal.*`
  modules.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  fail: -any
  base: ! '>=4.9 && <5'
  unordered-containers: ! '>=0.2'
  containers: ! '>=0.4.2.1'
  mtl: ! '>=2.1'
  attoparsec: ! '>=0.13'
  transformers: ! '>=0.3 && <0.6'
  template-haskell: ! '>=2.5.0.0'
all-versions:
- '4.0.0.0'
- '4.1.0.0'
- '5.0.0'
- '5.1.0'
- '5.1.1'
- '5.1.2'
- '6.0.0'
author: Anthony Cowley, Stephen Diehl, Moritz Kiefer <moritz.kiefer@purelyfunctional.org>,
  Benjamin S. Scarlet
latest: '6.0.0'
description-type: haddock
description: ! 'llvm-hs-pure is a set of pure Haskell types and functions for interacting
  with LLVM <http://llvm.org/>.

  It includes an ADT to represent LLVM IR (<http://llvm.org/docs/LangRef.html>). The
  llvm-hs package

  builds on this one with FFI bindings to LLVM, but llvm-hs-pure does not require
  LLVM to be available.'
license-name: BSD3
