homepage: ''
changelog-type: ''
hash: abb9b6b4a959e019d01b40dd94a9fb3168e8f83004594494309aeec35e405c43
test-bench-deps: {}
maintainer: travitch@cs.wisc.edu
synopsis: Useful tools built on llvm-analysis
changelog: ''
basic-deps:
  llvm-analysis: ! '>=0.2.0'
  bytestring: -any
  filemanip: ! '>=0.3.5.2'
  base: ==4.*
  blaze-markup: -any
  llvm-tools: ! '>=0.2.0.0'
  unordered-containers: -any
  llvm-data-interop: ! '>=0.2.0'
  process-conduit: -any
  filepath: -any
  conduit: -any
  graphviz: -any
  xml: -any
  containers: -any
  blaze-html: ! '>=0.5'
  parallel-io: -any
  attoparsec: -any
  optparse-applicative: ! '>=0.7.0 && <0.8'
  attoparsec-conduit: -any
  directory: -any
all-versions:
- 0.2.0.0
- 0.2.0.1
author: Tristan Ravitch
latest: 0.2.0.1
description-type: markdown
description: ! "This package includes some tools to visualize the LLVM IR.  Current\nvisualizations
  include static call graphs, CFGs, CDGs, dominator\ntrees, and some simple escape
  graphs.  Output formats include most\ngraphviz-supported formats, along with an
  HTML-based format.\n\n# Usage\n\nOptions for the visualizer:\n\n    -o --output=[FILE
  or DIR]  The destination of a file output\n    -t --type=[GRAPHTYPE]      The graph
  requested.  One of Cfg, Cdg, Cg,\n                               Domtree, Postdomtree\n
  \   -f --format=GVOUT          The type of output to produce: Gtk, Xlib, Html, XDot,\n
  \                              Eps, Jpeg, Pdf, Png, Ps, Ps2, Svg.  Default: Gtk\n
  \   -? --help                  Display help message\n\n\nFor all graph types except
  the call graph, the output specifies a\n*directory*.  The directory will contain
  one output file for each\nfunction in the input IR module.  For the static call
  graph, the\noutput is a single file.  If the format is 'Html', the output is\nalways
  a directory.\n\nThe Html format is special.  It produces an SVG embedded in an HTML\npage.
  \ The SVG can be navigated (via panning and zooming) using an\nopenstreetmap-style
  interface (it uses the OpenLayers library).\n\nInput files can be LLVM bitcode files,
  LLVM assembly files, or C/C++ source\nfiles.\n\n# Dependencies\n\nThis package depends
  on a few other Haskell libraries that are not yet\non Hackage:\n\n * hbgl\n * haggle\n
  * ifscs\n * llvm-base-types\n * llvm-data-interop\n * llvm-analysis\n\nAdditionally,
  it requires that you have the LLVM shared libraries (versions\n3.0-3.2) and tools
  installed on your system (`llvm-config` must be in your\n`PATH`).\n\n# Installation\nInstallation
  would look something like:\n\n```bash\nREPOSITORIES=\"hbgl-experimental\nhaggle\nifscs\nitanium-abi\nllvm-base-types\nllvm-data-interop\nllvm-analysis\nllvm-tools\"\n\n#
  Download the repositories\nfor REPO in $REPOSITORIES\ndo\n  git clone git://github.com/travitch/$REPO.git\ndone\n\n#
  Add ./ prefixes to each repository (for cabal)\nTOINSTALL=`echo ./$REPOSITORIES
  \ | sed 's: : ./:g'`\n\n# Build the tools along with dependencies\ncabal install
  $TOINSTALL\n```\n\n"
license-name: BSD-3-Clause
