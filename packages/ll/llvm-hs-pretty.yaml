homepage: https://github.com/llvm-hs/llvm-hs-pretty
changelog-type: ''
hash: 80a43b9c9dc03a0848facf5b28ce7bdb134bac2e61e099869afcd72b3994e207
test-bench-deps:
  base: ! '>=4.6 && <5.0'
  tasty-golden: ! '>=1.1'
  text: ! '>=0.1'
  tasty-hspec: ! '>=1.1'
  filepath: ! '>=1.3'
  llvm-hs-pure: ! '>=5.0'
  llvm-hs: ! '>=5.1'
  mtl: ! '>=2.2'
  tasty-hunit: -any
  pretty-show: ! '>=1.6 && <1.7'
  transformers: ! '>=0.3 && <0.6'
  tasty: ! '>=0.11'
  llvm-hs-pretty: -any
  directory: ! '>=1.2'
maintainer: stephen.m.diehl@gmail.com
synopsis: Pretty printer for LLVM IR.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.6 && <5.0'
  text: ! '>=0.1'
  array: ! '>=0.5'
  wl-pprint-text: ! '>=1.1'
  llvm-hs-pure: ! '>=5.1'
all-versions:
- '0.1.0.0'
author: Stephen Diehl
latest: '0.1.0.0'
description-type: markdown
description: ! "llvm-hs-pretty\n--------------\n\n[![Build Status](https://travis-ci.org/llvm-hs/llvm-hs-pretty.svg)](https://travis-ci.org/llvm-hs/llvm-hs-pretty)\n\nA
  pretty printer for ``llvm-hs-pure``. Goal is to be able to pretty print a\nsufficiently
  large subset of the LLVM AST from pure Haskell without having to go\nthrough the
  C++ API.\n\nUsage\n-----\n\n```bash\nsudo apt-get install llvm-dev-5.0\n```\n\nThere
  is a single function ``ppllvm`` that maps a LLVM.AST.Module to a\nString.\n\n```haskell\nimport
  LLVM.AST\nimport LLVM.Pretty (ppllvm)\n\nppllvm :: Module -> Text\n```\n\nTests\n-----\n\nThe
  test suite currently consists of round tripping a LLVM IR from correct IR\noutputted
  by the llc toolchain, parsing into llvm-general AST and then printing\nit back out
  and comparing it with the original textual form to see if the pretty\nprinter faithfully
  preserves the structure. The sample modules are in\n``tests/``.\n\nUsing stack:\n\n```bash\n$
  stac build\n$ stack test\n```\n\nUsing cabal:\n\n```bash\n$ cabal run\n$ cabal run
  -- tests/simple.ll\n```\n\nIf you're using Nix then:\n\n```bash\n$ nix-shell\n$
  cabal run\n```\n\nExample\n-------\n\nTo try out the standalone example run:\n\n```bash\n$
  stack repl\n$ :load Example.hs\nmain\n```\n\nConsider the basic example LLVM module.\n\n```llvm\n;
  ModuleID = 'example-llvm-module'\n\ndefine i8 @f(i8 %x){\nentry:\n  ret i8 %x\n}\n```\n\nUsing
  the LLVM.AST we construct the type and feed it to the pretty\nprinter.\n\n```haskell\nmodule
  Standalone where\n\n-- Pretty Printer\nimport LLVM.Pretty (ppllvm)\n\n-- AST\nimport
  qualified LLVM.AST as AST\nimport qualified LLVM.AST.Linkage as Linkage\nimport
  qualified LLVM.AST.Visibility as Visibility\nimport qualified LLVM.AST.CallingConvention
  as Convention\n\nimport Data.Text.Lazy.IO as TIO\n\nastModule :: AST.Module\nastModule
  = AST.Module\n    { AST.moduleName         = \"example-llvm-module\"\n    , AST.moduleDataLayout
  \  = Nothing\n    , AST.moduleTargetTriple = Nothing\n    , AST.moduleDefinitions
  \ =\n        [ AST.GlobalDefinition\n            (AST.Function\n                Linkage.External\n
  \               Visibility.Default\n                Nothing\n                Convention.C\n
  \               []\n                (AST.IntegerType 8)\n                (AST.Name
  \"f\")\n                ([AST.Parameter (AST.IntegerType 8) (AST.Name \"x\") []],
  False)\n                []\n                Nothing\n                Nothing\n                0\n
  \               Nothing\n                Nothing\n                [ AST.BasicBlock\n
  \                   (AST.Name \"entry\")\n                    []\n                    (AST.Do\n
  \                       (AST.Ret\n                            (Just\n                                (AST.LocalReference\n
  \                                   (AST.IntegerType 8)\n                                    (AST.Name
  \"x\")\n                                )\n                            )\n                            []\n
  \                       )\n                    )\n                ]\n            )\n
  \       ]\n    }\n\nmain :: IO ()\nmain = TIO.putStrLn (ppllvm astModule)\n```\n\nLicense\n-------\n\nReleased
  under the MIT License.\n\nCopyright (c) 2014-2017, Stephen Diehl\nCopyright (c)
  2015 Cedric Shock\n"
license-name: MIT
