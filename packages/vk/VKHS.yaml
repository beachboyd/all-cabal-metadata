homepage: http://github.com/grwlf/vkhs
changelog-type: markdown
hash: 4934f61d0949141fbdeb3c2e1448f2d4430908f301b526c179e4c5aedb698a2a
test-bench-deps: {}
maintainer: grrwlf@gmail.com
synopsis: Provides access to Vkontakte social network via public API
changelog: ! "Version 1.9.1\n-------------\n* Fixed user photo uploading using `vkq
  photo`\n\nVersion 1.9\n-----------\n\n* Disable Audio API due to upstream changes\n*
  Handle re-login conditions\n* Handle too-many-requests condition\n* Stop re-exporting
  `Prelude`, `Imports` provides aliases for popular\n  `Data.Text` functions\n* Cache
  access token in file\n* Minor fixes\n\nVersion 1.7.2\n-------------\n\n* Initial
  support for runhaskell mode\n\nVersion 1.7.1\n-------------\n\n* Support setting
  IDv2 tags for downloaded audio files\n* CLI: Fix 'call' command output\n* CLI: Fix
  'music' command naming\n\n\nVersion 1.6.0\n-------------\n\n* Use coroutine-based
  engine, offering smooth error handling\n* Use pipes-http as network backend\n\n"
basic-deps:
  http-client: -any
  bytestring: -any
  case-insensitive: -any
  split: -any
  base: ! '>=4.6 && <5'
  data-default-class: -any
  time: -any
  aeson-pretty: -any
  text: -any
  clock: -any
  filepath: -any
  parsec: -any
  containers: -any
  regexpr: -any
  pipes: -any
  utf8-string: -any
  http-client-tls: -any
  pipes-http: -any
  network-uri: -any
  mtl: -any
  pretty-show: -any
  optparse-applicative: -any
  scientific: -any
  tagsoup: -any
  http-types: -any
  aeson: -any
  vector: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
- 0.5.7
- 1.6.0
- 1.6.1
- 1.6.2
- 1.6.3
- 1.6.4
- 1.7.0
- 1.7.1
- 1.7.2
- 1.7.3
- '1.8'
- 1.8.1
- 1.8.2
- 1.8.3
- 1.8.4
- '1.9'
- 1.9.1
author: Sergey Mironov
latest: 1.9.1
description-type: markdown
description: ! "VKHS\n====\n\nVKHS provides access to [Vkontakte](http://vk.com) social
  network, popular\nmainly in Russia.  Library can be used to login into the network
  as a\nstandalone application (OAuth implicit flow as they call it). Having the access\ntoken,
  it is possible to call various API methods to -query audio files-\n(disabled by
  VK) or retrieve wall messages.\n\nFeatures\n--------\n\n* Provides access to VK
  API. Interface options include: VK monad and `vkq` command\n  line tool.\n* Uses
  HTTPS protocol.\n* Solves login form interaction, may be used to operate new/disposable
  VK accounts.\n* VK monad is designed as an interruptable coroutine. The supervisor
  supports\n  ondemand re-login, and may be used for long-running tasks.\n* Project
  includes a set of `Web.VKHS.API.Simple` wrappers designed to be\n  copied into `runhaskell`
  scripts and tweaked according to ones need.\n* No more dependencies on curlhs/taglib.\n\nToDo\n----\n\n*
  ~~Decrypt 'RepeatedForm' errors~~\n* ~~Support storing access-tokens in a temp file~~\n*
  Still no support for captchas, one probably should hack `defaultSupervisor`\n  and
  add them.\n* Re-implement VK monad as a Free monad special case\n* Runhaskell: handle
  some standard command line arguments\n* Minor issues here and there. Use `git grep
  FIXME` to find them\n* ~~File uploading still not functioning.~~\n* Network connection
  timeout is not handled by the coroutine supervisor.\n* Enhance the way `vkq` accepts
  arguments, support multy-line messages.\n* Grammatical mistakes. Any corrections
  will be kindly accepted.\n\nInstalling\n==========\n\nInstalling from Hackage\n-----------------------\n\nIn
  order to install VKHS, one typically should do the following\n\n    $ cabal update\n
  \   $ cabal install VKHS\n\n\nInstalling from source\n----------------------\n\n
  \   $ git clone https://github.com/grwlf/vkhs\n    $ cd vkhs\n    $ cabal install\n\nDeveloping
  using Nix\n--------------------\n\nThe author of this project uses [Nix](http://nixos.org)
  as a main development\nplatform. The `default.nix` file contain Nix expression describing
  the environment\n\n#### Entering Nix shell environment\n\n    $ git clone https://github.com/grwlf/vkhs\n
  \   $ cd vkhs\n    $ nix-shell\n\n#### Usual development\n\n    $ ghci -isrc:app/vkq:app/common\n
  \   $ cabal install\n    $ ^D\n\n#### Returning to the system shell\n\n    $ ^D\n
  \   $ nix-build\n    $ ls ./result\n\n\nBuilding ctags file\n-------------------\n\n`./mktags.sh`
  script may be used to build ctags `tags` file supported by many\ntext editors. The
  script uses `hasktags` via `haskdogs` tools, available on\nHackage.\n\n    $ haskdogs\n\n\n\nVKQ
  command line application\n============================\n\n`vkq` is a command line
  tool which demonstrates API usage. It can be used for\nlogging in, -downloading
  music- and reading wall messages. Call `vkq --help` or\n`vkq command --help` to
  read online help.\n\nLogging in to VK\n----------------\n\nIn order to send API
  requests, the VK client typically needs an access token.\n`vkq` receives it as a
  result of signing in.  Once received, the token may be\nsaved to `VKQ_ACCESS_TOKEN`
  environment variable, into `.vkhs-access-token`\nfile or passed to future instances
  directly using `-a` argument.\n\n#### Saving access token in the environment variable\n\n
  \   $ vkq login user@mail.org pass123\n    d8a41221616ef5ba19537125dc0349bad9d529fa15314ad765911726fe98b15185ac41a7ca2c62f3bf4b9\n
  \   $ export VKQ_ACCESS_TOKEN=d785932b871f096bd73aac6a35d7a7c469dd788d796463a871e5beb5c61bc6c96788ec2\n\nAlternatively,
  result may be achieved using `--eval` option\n\n    $ eval `vkq login user@mail.org
  pass123 --eval`\n\n#### Saving access token to file\n\nVKQ will cache the access
  token into a file. Newer versions of VKHS have\n`--access-token-flag` option enabled
  by default. Set it to empty value to\ndisable the caching.\n\n\nPerforming API calls\n--------------------\n\n`vkq`
  allows user to call arbitrary API method. The generic interface is as follows:\n\n
  \   $ vkq api --help\n    Usage: vkq api [--verbose] [--req-per-sec N] [--interactive]
  [--appid APPID]\n                   [--user USER] [--pass PASS] [-a ACCESS_TOKEN]\n
  \                  [--access-token-file FILE] METHOD PARAMS [--pretty]\n      Call
  VK API method\n\n    Available options:\n      --verbose                Be verbose\n
  \     --req-per-sec N          Max number of requests per second\n      --interactive
  \           Allow interactive queries\n      --appid APPID            Application
  ID, defaults to VKHS\n      --user USER              User name or email\n      --pass
  PASS              User password\n      -a ACCESS_TOKEN          Access token. Honores
  VKQ_ACCESS_TOKEN environment\n                               variable\n      --access-token-file
  FILE Filename to store actual access token, should be used\n                               to
  pass its value between sessions\n      METHOD                   Method name\n      PARAMS
  \                  Method arguments, KEY=VALUE[,KEY2=VALUE2[,,,]]\n      --pretty
  \                Pretty print resulting JSON\n      -h,--help                Show
  this help text\n\n\nThe session may look like the following:\n\n    $ vkq api \"messages.send\"
  \"user_id=111111,message=\\\"test\\\"\"  --pretty\n    bd7da7e9cfb4cc12c0a49093173ca8785c7d6c918f00edb7315bb8526f5f372f1174b643e50e1a47d35da\n\n
  \   $ vkq api \"users.get\" \"\"\n    {\"response\":[{\"first_name\":\"Сергей\",\"uid\":222222,\"last_name\":\"Миронов\"}]}\n\n
  \   $ vkq api \"messages.send\" \"user_id=333333,message=Hi theree!\"\n    {\"response\":57505}\n\n
  \   $ vkq api \"groups.search\" \"q=Haskell\"\n    {\n        \"response\": [\n
  \           30,\n            {\n                \"screen_name\": \"ml_mat_asm\",\n
  \               \"photo\": \"https://pp.userapi.com/c638217/v638217626/54113/v5Ib71-dDzo.jpg\",\n
  \               \"is_closed\": 0,\n                \"photo_medium\": \"https://pp.userapi.com/c638217/v638217626/54112/Nu_si987vOc.jpg\",\n
  \               \"name\": \"Matlab | Assembler | MathCAD | Haskell | Prolog\",\n
  \               \"photo_big\": \"https://pp.userapi.com/c638217/v638217626/54111/HGnUbgUorVU.jpg\",\n
  \               \"gid\": 78651325,\n                \"is_admin\": 0,\n                \"is_member\":
  0,\n                \"type\": \"page\"\n            },\n            ...\n    }\n\nVKHS
  library/runhaskell mode\n============================\n\nStarting from 1.7.2 the
  library supports runhaskell-mode.\n\n\n    #!/usr/bin/env runhaskell\n    {-# LANGUAGE
  RecordWildCards #-}\n\n    import Web.VKHS\n    import Web.VKHS.Imports\n\n    main
  :: IO ()\n    main = runVK_ defaultOptions $ do\n      Sized cnt cs <- getCountries\n
  \     forM_ cs $ \\Country{..} -> do\n        liftIO $ tputStrLn co_title\n\nWhen
  executed, the program asks for login/password and outputs list of countries\nknown
  to VK.  `getCountries` and several other methods are defined in\n`Web.VKHS.API.Simple`.\n\nThe
  distribuption contains `./app/runhaskell` folder with a couple of examples.\n\nDebugging\n=========\n\nVerbosity
  may be increased using `--verbose` flag or `o_verbose` field of\n`GenericOptions`.
  Login automata saves `latest.html` file during operation.\n\nReferences\n==========\n*
  Implicit-flow authentication, see\n  [documentation in Russian](http://vk.com/developers.php?oid=-1&p=Авторизация_клиентских_приложений)\n
  \ for details\n* [VK API documentation](https://vk.com/dev/methods)\n\nLicense\n=======\n\nBSD3
  license\n\nCopyright (c) 2014, Sergey Mironov <grrwlf@gmail.com>\n\n"
license-name: BSD-3-Clause
