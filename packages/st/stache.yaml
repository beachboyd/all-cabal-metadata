homepage: https://github.com/stackbuilders/stache
changelog-type: markdown
hash: 4309e553b4597ce3297fad587f7612f76fed00090175ed140ae9d8ebdae937e8
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ==1.2.*
  megaparsec: ! '>=7.0 && <8.0'
  criterion: ! '>=0.6.2.1 && <1.6'
  containers: ==0.5.*
  stache: -any
  hspec-megaparsec: ! '>=2.0 && <3.0'
  file-embed: -any
  deepseq: ! '>=1.4 && <1.5'
  aeson: ! '>=0.11 && <1.5'
  template-haskell: ! '>=2.10 && <2.14'
  yaml: ! '>=0.8 && <0.11'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Mustache templates for Haskell
changelog: ! "## Stache 2.0.1\n\n* Now interpolation with escaping also escapes single
  quotes as `&#39`.\n\n## Stache 2.0.0\n\n* Uses Megaparsec 7. In particular, the
  parser now returns\n  `ParseErrorBundle` on failure and the bundle is also inside\n
  \ `MustacheException`.\n\n## Stache 1.2.1\n\n* Fixed a bug in `compileMustacheDir'`
  from `Text.Mustache.Compile.TH`: it\n  did not use the supplied predicate and selected
  only `.mustache` files\n  like `compileMustacheDir`.\n\n## Stache 1.2.0\n\n* Added
  `compileMustacheDir'` and `getMusthacheFilesInDir'` that allow for a\n  custom template
  predicate. Also exposed `isMustacheFile` as the default\n  predicate used by functions
  like `compileMustacheDir`.\n\n* Abandon attempts to support GHC 7.8.\n\n## Stache
  1.1.2\n\n* Fixed compilation of the test suite with Cabal 2.0/GHC 8.2.1.\n\n## Stache
  1.1.1\n\n* Exported `mustacheRenderW`, `MustacheWarning`, and\n  `displayMustacheWarning`
  from `Text.Mustache`.\n\n## Stache 1.1.0\n\n* Added `mustacheRenderW` that allows
  to render a `Template` collecting\n  warnings in the process. Also added the `MusthacheWarning`
  type\n  representing the warnings themselves and `displayMustacheWarning` to\n  pretty-print
  the warnings.\n\n## Stache 1.0.0\n\n* Improved metadata and documentation.\n\n*
  Breaking change: the `renderMustache` function does not throw exceptions\n  when
  referenced key is not provided as per the spec. This is the behaviour\n  we had
  before 0.2.0, and it played better with the rest of Mustache.\n  Correspondingly,
  `MustacheRenderException` was removed.\n\n* Stache now uses Megaparsec 6 for parsing.\n\n*
  `MustacheException` now includes original input as `Text`.\n\n* `compileMustacheText`
  and `parseMustache` now accept strict `Text` instead\n  of lazy `Text`.\n\n* Minor
  improvement in rendering speed.\n\n* Stop depending on `exceptions` and drop `MonadThrow`
  constraints.\n\n## Stache 0.2.2\n\n* Add the `getMustacheFilesInDir` function.\n\n*
  Make TH helpers `compileMustacheDir` and `compileMustacheFile` detect\n  changes
  in the templates and force recompilation.\n\n## Stache 0.2.1\n\n* Made TH parse
  errors nicer.\n\n## Stache 0.2.0\n\n* Breaking change: the `renderMustache` function
  will throw an exception\n  when referenced key was not provided. This is a better
  behavior than\n  silent interpolation of an empty string, because missing values
  are almost\n  always a mistake and it's easy to provide empty strings explicitly
  anyway.\n\n* Allowed `directory-1.3.0.0`.\n\n## Stache 0.1.8\n\n* Rename `specs`
  directory to `specification` as the previous name somehow\n  caused conflicts when
  deploying an application on Heroku with Stache as a\n  dependency.\n\n## Stache
  0.1.7\n\n* Added `mustache` quasi-quoter.\n\n## Stache 0.1.6\n\n* Fixed a bug in
  the lookup algorithm for dot-separated keys.\n\n## Stache 0.1.5\n\n* When section's
  key is a number or non-empty string, it's accessible as `.`\n  in the section body.\n\n*
  Allow Aeson 1.0.\n\n## Stache 0.1.4\n\n* Numbers are now treated as “true” values.\n\n*
  Added `Semigroup` instance for `Key`.\n\n* Now change of delimiters affects special
  unescaped variable syntax as\n  well, for example: `{{=<< >>=}}<<{var}>>` will be
  parsed as unescaped\n  variable `var`.\n\n* `compileMustacheFile` now shows full
  path to malformed template when the\n  template cannot be parsed.\n\n* Defined `displayException`
  method of `Exception` type class for\n  `MustacheException` using `parseErrorPretty`
  from Megaparsec.\n\n## Stache 0.1.3\n\n* Cosmetic improvements.\n\n* Minor improvement
  in performance of parser.\n\n## Stache 0.1.2\n\n* Fixed compilation of benchmarks
  with Megaparsec 5.0.1 and later.\n\n## Stache 0.1.1\n\n* Added benchmarks.\n\n##
  Stache 0.1.0\n\n* Initial release.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <5.0'
  unordered-containers: ! '>=0.2.5 && <0.3'
  text: ! '>=1.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  filepath: ! '>=1.2 && <1.5'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.1 && <3.0'
  deepseq: ! '>=1.4 && <1.5'
  aeson: ! '>=0.11 && <1.5'
  template-haskell: ! '>=2.10 && <2.14'
  vector: ! '>=0.11 && <0.13'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
- '0.1.8'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '1.0.0'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.2.0'
- '1.2.1'
- '2.0.0'
- '2.0.1'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '2.0.1'
description-type: markdown
description: ! "# Stache\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/stache.svg?style=flat)](https://hackage.haskell.org/package/stache)\n[![Stackage
  Nightly](http://stackage.org/package/stache/badge/nightly)](http://stackage.org/nightly/package/stache)\n[![Stackage
  LTS](http://stackage.org/package/stache/badge/lts)](http://stackage.org/lts/package/stache)\n[![Build
  Status](https://travis-ci.org/stackbuilders/stache.svg?branch=master)](https://travis-ci.org/stackbuilders/stache)\n\nThis
  is a Haskell implementation of Mustache templates. The implementation\nconforms
  to the version 1.1.3 of the\nofficial [Mustache specification](https://github.com/mustache/spec).
  It is\nextremely simple and straightforward to use with minimal but complete\nAPI—three
  functions to compile templates (from directory, from file, and\nfrom lazy text)
  and one to render them.\n\nThe implementation uses the Megaparsec parsing library
  to parse the\ntemplates which results in superior quality of error messages.\n\nFor
  rendering you only need to create Aeson's `Value` where you put the data\nto interpolate.
  Since the library re-uses Aeson's instances and most data\ntypes in the Haskell
  ecosystem are instances of classes like\n`Data.Aeson.ToJSON`, the whole process
  is very simple for the end user.\n\nTemplate Haskell helpers for compilation of
  templates at compile time are\navailable in the `Text.Mustache.Compile.TH` module.
  The helpers currently\nwork only with GHC 8 and later.\n\nOne feature that is not
  currently supported is lambdas. The feature is\nmarked as optional in the spec and
  can be emulated via processing of parsed\ntemplate representation. The decision
  to drop lambdas is intentional, for\nthe sake of simplicity and better integration
  with Aeson.\n\n## Quick start\n\nHere is an example of basic usage:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main (main) where\n\nimport Data.Aeson\nimport
  Data.Text\nimport Text.Megaparsec\nimport Text.Mustache\nimport qualified Data.Text.Lazy.IO
  as TIO\n\nmain :: IO ()\nmain = do\n  let res = compileMustacheText \"foo\"\n        \"Hi,
  {{name}}! You have:\\n{{#things}}\\n  * {{.}}\\n{{/things}}\\n\"\n  case res of\n
  \   Left bundle -> putStrLn (errorBundlePretty bundle)\n    Right template -> TIO.putStr
  $ renderMustache template $ object\n      [ \"name\"   .= (\"John\" :: Text)\n      ,
  \"things\" .= [\"pen\" :: Text, \"candle\", \"egg\"]\n      ]\n```\n\nIf I run the
  program, it prints the following:\n\n```\nHi, John! You have:\n  * pen\n  * candle\n
  \ * egg\n```\n\nFor more information about Mustache templates the following links
  may be\nhelpful:\n\n* The official Mustache site: https://mustache.github.io/\n*
  The manual: https://mustache.github.io/mustache.5.html\n* The specification: https://github.com/mustache/spec\n*
  Stack Builders Stache tutorial: https://www.stackbuilders.com/tutorials/haskell/mustache-templates/\n\n##
  Contribution\n\nIssues, bugs, and questions may be reported in [the GitHub issue
  tracker for\nthis project](https://github.com/stackbuilders/stache/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2016–2018 Stack Builders\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
