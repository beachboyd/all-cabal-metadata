homepage: ''
changelog-type: markdown
hash: 53bb66b7983cf6173d30e02f61a0c62d8bfca36caa7f295c7cdb40cc620a46f4
test-bench-deps:
  streaming: -any
  bytestring: -any
  base: -any
  hspec: ==2.4.*
  quickcheck-instances: -any
  streaming-process: -any
  QuickCheck: ==2.*
  streaming-bytestring: -any
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Streaming support for running system process
changelog: ! '# Revision history for streaming-process


  ## 0.1.0.0  -- 2018-05-23


  * First version. Released on an unsuspecting world.

'
basic-deps:
  streaming: ! '>=0.1.4.0 && <0.3'
  exceptions: ! '>=0.6 && <0.11'
  streaming-concurrency: ==0.3.*
  streaming-commons: ! '>=0.1.16 && <0.3'
  bytestring: -any
  base: ==4.*
  streaming-with: ==0.2.*
  monad-control: ==1.*
  process: ! '>=1.2.0.0 && <1.7'
  lifted-async: ! '>=0.9.1 && <0.11'
  transformers-base: -any
  transformers: -any
  streaming-bytestring: ! '>=0.1.4.5 && <0.2'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1.0.0'
author: Ivan Lazar Miljenovic
latest: '0.1.0.0'
description-type: markdown
description: ! 'streaming-process

  =================


  [![Hackage](https://img.shields.io/hackage/v/streaming-process.svg)](https://hackage.haskell.org/package/streaming-process)
  [![Build Status](https://travis-ci.org/haskell-streaming/streaming-process.svg)](https://travis-ci.org/haskell-streaming/streaming-process)


  Run a process, streaming data in or out.


  A lot of configuration options are available to fine-tune which inputs

  and outputs are streamed.


  This uses [streaming-with] to handle resource management, and

  [streaming-concurrency] for handling both `stdout` and `stderr`

  together.


  As such, code is typically run in a continuation-passing-style.  You

  may wish to use the `Streaming.Process.Lifted` module if you have many

  of these nested.


  [streaming-with]: http://hackage.haskell.org/package/streaming-with

  [streaming-concurrency]: http://hackage.haskell.org/package/streaming-concurrency


  Exceptions

  ----------


  The functions in this library will all throw

  `ProcessExitedUnsuccessfully` if the process/command itself fails.


  WARNING

  -------


  If using this module, you will need to have:


  ```cabal

  ghc-options -threaded

  ```


  in the executable section of your `.cabal` file, otherwise your code

  will likely hang!

'
license-name: MIT
