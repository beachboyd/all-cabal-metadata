homepage: ''
changelog-type: markdown
hash: 27cb5f69ba92cb7f84493ff8b8b9a72acd7785513b1e3a14511d4df4ce4ff324
test-bench-deps: {}
maintainer: Ivan.Miljenovic@gmail.com
synopsis: with/bracket-style idioms for use with streaming
changelog: ! "# Revision history for streaming-with\n\n## 0.2.2.0 -- 2018-05-23\n\n*
  Actually export `liftThrow` from within `Streaming.With.Lifted`.\n\n## 0.2.1.1 --
  2018-03-23\n\n* Bump exceptions dependency\n\n## 0.2.1.0 -- 2018-02-06\n\n* Add
  the `RunWithable` class.\n\n* Add the `within`, `liftActionIO` and `liftThrow` functions
  for use\n  with `Withable`.\n\n## 0.2.0.0 -- 2017-07-07\n\n* Add `Monad w` constraint
  to `Withable w`\n\n    - This was the intended use case all along, with the intent
  that\n      you can write code generic in the choice of `w`.\n\n## 0.1.1.0 -- 2017-07-07\n\n*
  Add support for the [temporary] package, specifically the functions:\n\n    * `withSystemTempFile`\n
  \   * `withTempFile`\n    * `withSystemTempDirectory`\n    * `withTempDirectory`\n\n
  \   [temporary]: http://hackage.haskell.org/package/temporary\n\n## 0.1.0.0 -- 2017-06-30\n\n*
  First release.\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  base: ==4.*
  managed: ==1.0.*
  transformers: -any
  temporary: ! '>=1.2.1 && <1.3'
  streaming-bytestring: ! '>=0.1.0.3 && <0.2'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
author: Ivan Lazar Miljenovic
latest: '0.2.2.0'
description-type: markdown
description: ! "streaming-with\n==============\n\n[![Hackage](https://img.shields.io/hackage/v/streaming-with.svg)](https://hackage.haskell.org/package/streaming-with)
  [![Build Status](https://travis-ci.org/haskell-streaming/streaming-with.svg)](https://travis-ci.org/haskell-streaming/streaming-with)\n\n>
  with/bracket-style idioms for use with [streaming]\n\nThis library provides resource
  management for the [streaming]\necosystem of libraries using bracketed continuations.\n\n[streaming]:
  http://hackage.haskell.org/package/streaming\n\nCurrently, these only contain file-handling
  utilities; if you can\nthink of any more functions that fit in here please let me
  know!\n\nThere are two ways of using this library:\n\n1. Explicitly pass around
  the continuations using `Streaming.With`.\n\n2. If you have a lot of nested continuations,
  you may prefer using\n   `Streaming.With.Lifted` with either [`ContT`] or [managed];
  these\n   will allow you to pass around the parameters to the continuations.\n\n[`ContT`]:
  http://hackage.haskell.org/packages/archive/transformers/latest/doc/html/Control-Monad-Trans-Cont.html#v:ContT\n[managed]:
  http://hackage.haskell.org/package/managed\n\nMotivation\n----------\n\nThe streaming
  library has some usages of `MonadResource` from the\n[resourcet] package to try
  and perform resource allocation; in\ncomparison to `conduit` however, streaming
  doesn't support prompt\nfinalisation.  Furthermore, because in may ways `Conduit`s
  can be\nconsidered to be a datatype representing monadic functions between two\ntypes
  whereas a single `Stream` is more akin to a producing-only\n`Conduit` or `Pipe`,
  attempts at having something like `readFile` that\nreturns a `Stream` does not always
  lead to the resource being closed\nat the correct point.  The consensus in the issue
  for [promptness for\nstreaming] was that perhaps relying upon `MonadResource` was
  not the\ncorrect approach.\n\n[resourcet]: http://hackage.haskell.org/package/resourcet\n[promptness
  for streaming]: https://github.com/michaelt/streaming/issues/23\n\n\nThe [Bracket
  pattern] (also known as the _with..._ idiom, or a subset\nof continuation passing
  style) allows for a convenient way to obtain\nand then guarantee the release of
  (possibly scarce) resources.  This\ncan be further enhanced when dealing with nested
  usages of these with\nthe use of either the [`ContT`] managed transformer or the
  [managed]\nlibrary (where `Managed` -- or at least its safe variant -- is\nisomorphic
  to `ContT () IO`).\n\n[Bracket pattern]: https://wiki.haskell.org/Bracket_pattern\n\nThe
  biggest downside of using `bracket` from the standard `base`\nlibrary is that the
  types are not very convenient in the world of\nmonad transformers: it is limited
  to `IO` computations only, which\nmeans for our use of streaming that we could only
  use `Stream f IO r`\nwithout any state, logging, etc.  However, the [exceptions]
  library\ncontains a more general purpose variant that provides us with extra\nflexibility;
  it doesn't even need to be in `IO` if you have a\ncompletely pure `Stream`! (A variant
  is also available in\n[lifted-base], but it is less used and streaming already depends
  upon\nexceptions).\n\n[exceptions]: http://hackage.haskell.org/package/exceptions\n[lifted-base]:
  http://hackage.haskell.org/package/lifted-base\n\nDisadvantages\n-------------\n\nWhilst
  the bracket pattern is powerful, it does have some downsides of\nwhich you should
  be aware (specifically compared to [resourcet] which\nis the main alternative).\n\nFirst
  of all, independent of its usage with streaming, is that whilst\n`bracket` predates
  [resourcet], the latter is [more powerful].\nWhether this extra power is of use
  to you is up to you, but it does\nmean that you in effect have lots of nested resource
  management rather\nthan just one overall resource control.\n\n[more powerful]: http://www.yesodweb.com/blog/2013/03/resourcet-overview\n\nThe
  obvious disadvantage of using the bracket pattern is that it does\nnot fit in as
  nicely in the function composition style that usage of\nstreaming enables compared
  to other stream processing libraries.  This\ncan be mitigated somewhat with using
  the lifted variants in this\npackage which allows you to operate monadically (which
  still isn't as\nnice but may be preferable to lots of explicitly nested continuations).\n\nFurthermore,
  without prompt finalisation the same \"long running\ncomputation\" [issue] is relevant.
  \ For example, consider something\nthat looks like this:\n\n```haskell\nwithBinaryFile
  \"myFile\" ReadMode $\n  doSomethingWithEachLine\n  . B.lines\n  . B.hGetContents\n```\n\nIdeally,
  after the last chunk from the file is read, the file handle\nwould be closed.  However,
  that is not the case: it's not until the\n_entire computation_ is complete that
  the handle is closed.  Note,\nhowever, that the same limitation is present when
  using\n`MonadResource`: this is a limitation of the `Stream` type, not on how\nwe
  choose to allocate and manage resources.\n\n[issue]: http://www.yesodweb.com/blog/2013/10/core-flaw-pipes-conduit\n"
license-name: MIT
