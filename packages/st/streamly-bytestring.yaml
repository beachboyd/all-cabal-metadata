homepage: https://github.com/psibi/streamly-bytestring#readme
changelog-type: markdown
hash: 8e36124dcee708a463eef405d3b1d65d9d1293e277fc18b52627fd9eb38811df
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  filepath: -any
  streamly-bytestring: -any
  gauge: -any
  quickcheck-instances: -any
  temporary: -any
  random: -any
  deepseq: -any
  hspec-discover: -any
  streamly: -any
  directory: -any
maintainer: sibi@psibi.in
synopsis: Library for streamly and bytestring interoperation.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.0 && <0.11'
  base: ! '>=4.7 && <5'
  streamly: ! '>=0.7.0 && <0.8'
all-versions:
- 0.1.0.0
author: Sibi Prabakaran
latest: 0.1.0.0
description-type: markdown
description: "# `streamly-bytestring`\n\nLibrary for streamly and bytestring interoperation.\n\n##
  Description\n\nThis package provides `Streamly.External.ByteString` and\n`Streamly.External.ByteString.Lazy`.\n\n###
  Strict ByteString\n\n`Streamly.External.ByteString` provides functions to for\ninteroperation
  between streamly and strict bytestring.\n\n`fromArray` and `toArray` are used to
  efficiently convert between\nstreamly's pinned array type (`Streamly.Memory.Array`)
  and bytestring.\n\n`read`, `writeN` and `write` are `Unfold`s & `Fold`s provided
  by streamly\nthat are used to create and consume a stream of `Word8`. `writeN` is
  more\nefficient than `write` and should be preferred over `write` when possible.\n\n###
  Lazy Bytestring\n\n`Streamly.External.ByteString.Lazy` provides functions to for\ninteroperation
  between streamly and lazy bytestring.\n\n`readChunks` and `read` are `Unfold`s.
  `unfold` from `Streamly.Prelude` can be\nused to create a stream of `Array Word8`
  or a stream of `Word8` from a\nlazy `ByteString`.\n\n`toChunks` is defined as `unfold
  readChunks`. `fromChunks` can be used to create a\nlazy `ByteString` from a stream
  of `Array Word8` chunks.\n\n## Usage\n\nThis is a dumb program that counts the number
  of bytes in a file.\n\n```\nimport Streamly\nimport qualified Streamly.Prelude as
  S\n\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy
  as BSL\n\nimport qualified Streamly.External.ByteString as Strict\nimport qualified
  Streamly.External.ByteString.Lazy as Lazy\n\nimport System.IO (FilePath)\n\nstrictByteStringSize
  :: BS.ByteString -> IO Int\nstrictByteStringSize bs = S.length $ S.unfold Strict.read
  bs\n\nlazyByteStringSize :: BSL.ByteString -> IO Int\nlazyByteStringSize bsl = S.foldl'
  (+) 0\n\t\t       $ S.mapM strictByteStringSize\n\t\t       $ S.map Strict.fromArray\n\t\t
  \      $ Lazy.toChunks bsl\n\nfileSize :: FilePath -> IO Int\nfileSize path = do\n
  \   bsl <- BSL.readFile path\n    lazyByteStringSize bsl\n```\n\n\n\n\n\n\n\n\n\n\n"
license-name: BSD-3-Clause
