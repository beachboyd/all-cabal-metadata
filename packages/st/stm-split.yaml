homepage: ''
changelog-type: ''
hash: 0662cf0501ccdfcf72d6bc615ed2c7870aea0d6d32e7690956f8d7f20a9b595c
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: TMVars, TVars and TChans with distinguished input and output side
changelog: ''
basic-deps:
  stm: ! '>=2.2 && <2.6'
  base: ! '>=4 && <5'
all-versions:
- '0.0'
- 0.0.0.1
- 0.0.0.2
- 0.0.1
- 0.0.2
- 0.0.2.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.2.1
description-type: haddock
description: ! 'Transactional MVars, Vars and Channels with distinguished input and
  output side.

  When threads communicate via a TMVar, a TVar or a TChan

  there are often clearly defined roles,

  which thread is the sender and which one is receiver.

  We provide wrappers around the standard concurrency communication channels

  that make the distinction clear and type safe.


  For example, if a function has a parameter of type @TChan.In@

  then it is sure that it will only write to that channel.

  Additionally if the compiler warns about an unused @TChan.Out@

  that was created by @TChan.new@

  then you know that the receiver part of your communication is missing.


  See also package @concurrent-split@ for non-transactional communication.

  This package follows the same idea as @chan-split@ but is strictly Haskell 98.'
license-name: BSD-3-Clause
