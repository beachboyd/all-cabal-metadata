homepage: https://github.com/fpco/stackage-curator
changelog-type: markdown
hash: 91ae84dddd69da732d3089fe5329a7513e575b6519c5a4f65b8f6192e3b2d482
test-bench-deps:
  stackage-curator: -any
  http-client: -any
  Cabal: -any
  base: -any
  hspec: -any
  text: -any
  classy-prelude-conduit: -any
  containers: -any
  http-client-tls: -any
  QuickCheck: -any
  yaml: -any
  directory: -any
maintainer: michael@fpcomplete.com
synopsis: Tools for curating Stackage bundles
changelog: ! "## 0.16.0.0\n\n* Use Cabal.Simple.BuildToolDepends.getAllToolDependencies
  to compute the tools field of SimpleDesc [#52](https://github.com/fpco/stackage-curator/issues/52)\n*
  Do not build tests/benches if there are no test suites or benchmarks\n* `non-parallel-build`\n*
  Cabal 2.2\n\n## 0.15.2.0\n\n* Add a check for mistyped or otherwise unknown package
  names [#47](https://github.com/fpco/stackage-curator/issues/47)\n\n## 0.15.1.0\n\n*
  `skipped-haddocks`\n* Support for GHC 8.2\n* Switch from cryptohash to cryptonite\n\n##
  0.15.0.0\n\n* Ignore packages with invalid flag definitions [fpco/stackage#2468](https://github.com/fpco/stackage/issues/2468)\n*
  Support a `no-revisions` field to ignore Hackage revisions (experimental) [fpco/stackage#2469](https://github.com/fpco/stackage/issues/2469)\n*
  Cabal 2.0\n* cabal-format-version\n\n## 0.14.5\n\n* Add support for the `hide` field
  [yesodweb/wai#579](https://github.com/yesodweb/wai/issues/579)\n* `list-revdeps`
  command [#28](https://github.com/fpco/stackage-curator/issues/28)\n* Support for
  newer classy-prelude (fixes some char enc bugs)\n\n## 0.14.4.1\n\n* A few missing
  fixes\n\n## 0.14.4\n\n* Support latest Stackage Nightly [#27](https://github.com/fpco/stackage-curator/issues/27)\n\n##
  0.14.3\n\n* Much improved logic for calculating if a package needs to be rebuilt\n
  \ due to rebuilding a dependency\n* Include components using a dependency is check
  output\n\n## 0.14.2\n\n* Add `all-cabal-hashes-commit`\n* Add `tell-me-when-its-released`\n*
  Fix warnings for `parseUrl`\n\n## 0.14.1.1\n\n* Fix for latest nightly snapshot
  [#21](https://github.com/fpco/stackage-curator/issues/21)\n\n## 0.14.1\n\n* configure-args\n*
  Support for GHC 8's documentation directory location\n* Checked cabal-version in
  .cabal files\n* Switch to store\n\n## 0.14.0\n\n* Move stackage-types into this
  package\n* Move stackage-build-plan into this package\n* Start building benchmarks
  [stackage#1372](https://github.com/fpco/stackage/issues/1372)\n* Add cabal-from-head\n*
  Include cabal file size and hash info\n\n## 0.13.3\n\nMove away from outdated stackage-metadata\n\nWe
  already have local package index functionality, which uses the\ncorrect index. See:\nhttps://groups.google.com/d/msg/stackage/bf1xewtp9oo/MUB2K20OJQAJ\n\n##
  0.13.2\n\n* --no-rebuild-cabal\n* Fix allow-newer by simply stripping all version
  bounds in .cabal files\n* Fix build failure [#13](https://github.com/fpco/stackage-curator/issues/13)\n\n##
  0.13.1\n\n* Let test suite pass when no package index available [stackage#1165](https://github.com/fpco/stackage/issues/1165)\n\n##
  0.13.0\n\n* build-tool-overrides\n* Avoid using the cabal-install executable [stackage#1107](https://github.com/fpco/stackage/issues/1107)\n\n##
  0.12.0\n\n* New create-plan flags: `--add-package`, `--expect-test-failure` and
  `--expect-haddock-failure`\n* Package description caching\n\n## 0.11.0\n\n* Use
  newest version of libraries [#6](https://github.com/fpco/stackage-curator/issues/6)\n\n##
  0.10.0\n\n* Added `pcSkipBuild`\n\n## 0.8.2\n\n* `upload-docs` command\n\n## 0.8.1\n\n*
  Redefine core packages [#395](https://github.com/fpco/stackage/issues/395)\n* Add
  --constraint flag for create-plan\n\n## 0.8.0.1\n\n* GHC 7.10 support\n\n## 0.8.0\n\n*
  Restructured commands to work on server/Docker setup\n\n## 0.7.4\n\n* `-j`/`--jobs`
  option for build flags\n* Only pass in required .haddock files (more memory efficiency)\n\n##
  0.7.3\n\n* Number of jobs == number of capabilities\n* `--bundle-dest`\n* `--skip-git-push`\n*
  Removed some of the old upload stuff\n* Better exception output (limited to 500
  characters)\n\n## 0.7.2\n\n* Add `diff` command\n\n## 0.7.1.1\n\n* Fix bug with
  existing .haddock file collection\n\n## 0.7.1\n\n* Add the `stats` command\n\n##
  0.7.0.4\n\n* Respect --summary option\n\n## 0.7.0.3\n\n* LTS bumps: specify a goal\n\n##
  0.7.0.2\n\n* Deal better with invariant violations around unregistered packages\n\n##
  0.7.0\n\n* Renamed to stackage-curator\n\n## 0.6.1\n\n* Switch to V2 upload by default\n*
  --skip-hoogle option\n\n## 0.6.0\n\n* Upload bundle V2 stuff\n\n## 0.5.2\n\n* Upload
  LTS to Hackage with the name LTSHaskell\n\n## 0.5.1\n\n* `loadBuildConstraints`\n*
  More command line options\n\n## 0.5.0\n\n* Print \"Still Alive\" while checking,
  to avoid Travis timeouts\n* Include `stackage upload-nightly` command\n* Optional
  plan checking\n\n## 0.4.0\n\n* Command line uses optparse-applicative with additional
  options\n* Library profiling support during build\n* Remove cfGlobalFlags (just
  use package-specific flags)\n\n## 0.3.1\n\n* Added `justCheck` and `stackage check`
  command line.\n\n## 0.3.0.1\n\nPre-fetch all packages from Hackage to catch Hackage
  downtime early.\n\n## 0.3.0.0\n\n* Return progress URL from uploadBundle\n\n## 0.2.1.4\n\nGenerate
  a `core` file in bundles.\n\n## 0.2.1.1\n\nRun postBuild earlier to avoid problems
  from broken doc uploads.\n\n## 0.2.1.0\n\n* Use TLS manager (to download from Github)\n\n##
  0.2.0.0\n\n* Minor fixes\n* `pbGlobalInstall`\n\n## 0.1.0.0\n\nFirst version of
  Stackage which is made available as its own package. The\ncodebase has been completely
  rewritten at this point, to be ready for generated\nboth Stackage Nightly and LTS
  Haskell distributions.\n"
basic-deps:
  stackage-curator: -any
  http-client: ! '>=0.5'
  amazonka: ! '>=1.4.5'
  exceptions: -any
  streaming-commons: ! '>=0.1.7.1'
  lucid: -any
  bytestring: -any
  stm: -any
  xml-conduit: -any
  Cabal: ! '>=2.2 && <2.3'
  base: ==4.*
  data-default-class: -any
  time: -any
  unordered-containers: -any
  text: -any
  syb: -any
  system-fileio: -any
  unix-compat: -any
  filepath: -any
  process: -any
  async: -any
  html-conduit: -any
  conduit: -any
  classy-prelude-conduit: ! '>=1'
  cryptonite-conduit: -any
  semigroups: -any
  conduit-extra: -any
  memory: -any
  containers: -any
  monad-unlift-ref: ! '>=0.2'
  tar: ! '>=0.3'
  xml-types: -any
  store: -any
  utf8-string: -any
  amazonka-core: -any
  old-locale: -any
  http-client-tls: -any
  mime-types: -any
  cryptonite: -any
  zlib: -any
  mtl: -any
  optparse-simple: -any
  hashable: -any
  blaze-html: -any
  monad-unlift: ! '>=0.2'
  transformers: -any
  temporary: -any
  optparse-applicative: ! '>=0.11'
  http-conduit: -any
  system-filepath: -any
  resourcet: -any
  aeson: ! '>=1'
  amazonka-s3: -any
  mono-traversable: -any
  safe: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- '0.7.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.0.3'
- '0.7.0.4'
- '0.7.0.5'
- '0.7.1'
- '0.7.1.1'
- '0.7.2'
- '0.7.2.1'
- '0.7.3'
- '0.7.4'
- '0.8.0'
- '0.8.0.1'
- '0.8.1'
- '0.9.0'
- '0.10.0'
- '0.11.0'
- '0.12.0'
- '0.13.0'
- '0.13.1'
- '0.13.2'
- '0.13.3'
- '0.14.0'
- '0.14.1'
- '0.14.1.1'
- '0.14.3'
- '0.14.4'
- '0.14.4.1'
- '0.14.5'
- '0.15.0.0'
- '0.15.1.0'
- '0.16.0.0'
author: Michael Snoyman
latest: '0.16.0.0'
description-type: markdown
description: ! '## stackage-curator


  [![Build Status](https://travis-ci.org/fpco/stackage-curator.svg?branch=master)](https://travis-ci.org/fpco/stackage-curator)

  [![Hackage](http://img.shields.io/hackage/v/stackage-curator.png)](http://hackage.haskell.org/package/stackage-curator)

  [![Stackage LTS](http://stackage.org/package/stackage-curator/badge/lts)](http://stackage.org/lts/package/stackage-curator)

  [![Stackage Nightly](http://stackage.org/package/stackage-curator/badge/nightly)](http://stackage.org/nightly/package/stackage-curator)


  This repository contains the code for curating Stackage package sets and

  building reusable package databases. It was originally simply called the

  stackage package and was part of the stackage repository, but since this is a

  tool very few people need to use, we split it into its own package with a name

  to indicate it''s limited usage (curators only).


  More information on Stackage:


  * [Stackage Homepage](https://www.stackage.org)

  * [Main stackage repo](https://github.com/fpco/stackage)


  ### Code explanation


  We start off with *constraints*. Constraints state things like "package X has a

  given version range," who the maintainer is for a package, the description of

  the system/compiler being used, etc. `BuildConstraints` describes the build as

  a whole, whereas `PackageConstraints` describes the constraints on an

  individual package.


  There are two primary ways of getting a `BuildConstraints`.

  `defaultBuildConstraints` inspects the first GHC in the PATH environment variable
  to

  determine GHC version, core packages, core tools, etc. It then uses the

  `Stackage.Config` module to extract information on additional packages to be

  installed. The secondary approach is in `Stackage2.UpdateBuildPlan`, which will
  be

  discussed later.


  `BuildConstraints` does not specify a build completely. That is given by a

  `BuildPlan`, which is similarly broken down into `BuildPlan` and `PackagePlan`.

  In order to get a `BuildPlan`, we need two pieces of information: the

  `BuildConstraints`, and a package index. The package index (usually downloaded

  from Hackage) is a collection of all of the cabal files available.


  By applying a `BuildConstraints` to a package index (via `newBuildPlan`), we

  get a proposed `BuildPlan`. There is no guarantee that this `BuildPlan` is

  valid. To validate it, we use `checkBuildPlan`. A `BuildPlan` is an instance of

  both `ToJSON` and `FromJSON`, and therefore can be serialized to a file for

  later use.


  When dealing with LTS Haskell, we want to be able to take a `BuildPlan`, and

  update to a newer `BuildPlan` that keeps all packages at the same major

  version.  `updateBuildConstraints` turns a `BuildPlan` into a new

  `BuildConstraints` with that restriction, and `updateBuildPlan` applies

  `newBuildPlan` to that result. As mentioned previously: this is *not* a

  validated result, and therefore `checkBuildPlan` must be used.


  A `BuildPlan` can be acted on. This is done to check that all packages compile

  together, run relevant test suites, test Haddock documentation is correct, and

  produce as artifacts both a self-contained GHC binary package database and a

  set of Haddock documentation. (Not yet implemented.)


  A `BuildPlan` may be converted into a bundle to be uploaded to Stackage Server.

  (Not yet implemented.)

'
license-name: MIT
