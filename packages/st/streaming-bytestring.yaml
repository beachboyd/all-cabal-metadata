homepage: https://github.com/haskell-streaming/streaming-bytestring
changelog-type: markdown
hash: 5518d9480b703d2ecf9bbb0d4c76d63053daa99eb08589af4225be72eaf4b36e
test-bench-deps:
  streaming: -any
  bytestring: -any
  tasty-smallcheck: ! '>=0.8.1'
  base: ! '>=4 && <5'
  smallcheck: ! '>=1.1.1'
  transformers: -any
  tasty: ! '>=0.11.0.4'
  streaming-bytestring: -any
maintainer: andrew.thaddeus@gmail.com, what_is_it_to_do_anything@yahoo.com
synopsis: ! 'effectful byte steams, or: bytestring io done right.'
changelog: ! '## 0.1.6


  - `Semigroup` instance for `ByteString m r` added

  - New function `lineSplit`


  ## 0.1.5


  - Update for `streaming-0.2`

'
basic-deps:
  streaming: ! '>=0.1.4.0 && <0.3'
  exceptions: -any
  bytestring: ! '>=0.10.4'
  base: <5.0
  mtl: ! '>=2.1 && <2.3'
  mmorph: ! '>=1.0 && <1.2'
  transformers-base: -any
  transformers: ! '>=0.3 && <0.6'
  deepseq: -any
  resourcet: -any
all-versions:
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.8'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.2'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.4.2'
- '0.1.4.3'
- '0.1.4.4'
- '0.1.4.5'
- '0.1.4.6'
- '0.1.5'
- '0.1.6'
author: michaelt
latest: '0.1.6'
description-type: markdown
description: ! "# bytestring-streaming\n\nThis package depends on the [`streaming`
  library](https://github.com/michaelt/streaming)\n\n\n              copy 200M file
  \   divide it on lines, \n                                adding '!' to each \n
  \                               \n    lazy      0m0.813s          0m8.597s\n    streaming
  0m0.783s          0m9.664s\n    pipes     0m0.771s          0m49.176s\n    conduit\t
  \ 0m1.068s          2m25.437s\n\nThis library is modeled as far as possible on the
  internal structure of\n`Data.ByteString.Lazy`. There are two changes: a chunk may
  be delayed\nby a monadic step, and the sucession of steps has a 'return' value:\n\n
  \   data ByteString m r =\n      Empty r\n      | Chunk {-#UNPACK #-} !S.ByteString
  (ByteString m r)\n      | Go (m (ByteString m r ))\n\nunlike \n\n    data ByteString
  = \n      Empty \n      | Chunk {-#UNPACK #-} !S.ByteString ByteString\n   \nThat's
  it. \n\n-----\n\nAnother module is planned that would correspond more closely to
  \n`Pipes.Bytestring` than to `Data.ByteString.Lazy`.   \n`Producer ByteString m
  r` as it is treated in `pipes-bytestring` as\nthe `ByteString m r` type is here.
  The result is much faster, at least \nwith preliminary tests. The modules integrating
  `attoparsec` and `aeson` \nare simple replicas of k0001's `pipes-attoparsec` and
  `pipes-aeson`. \nAlso included is a replica of `pipes-http`.\n\nIt is possible that
  `streaming-bytestring` is conceptually clearer than \n`pipes-bytestring` as well
  - and clearer than the approach taken by \n`conduit` and `io-streams`.  All of these
  are forced to integrate the \nconception of *an amorphous succession of bytes that
  may be chunked anywhere* - \nthe direct result of, say, `fromHandle`, `sourceFile`
  and\nthe like - and a succession of 'semantically' distinct bytestrings \nof interest
  under a single concept. \n\n----\n\nStrange as it may seem, it is arguable that
  the general `Producer`, \n`Source`, and `InputStream` concepts from these libraries
  ought not \nto hold `ByteString`s *except* as conceptually separate units, e.g.
  \nthe lines of a document taken as strict bytestrings, where that is \nlegitimate.
  An `InputStream ByteString` is like an `InputStream Int`; \na `Conduit.Source m
  ByteString` has the same type as a `Source m Int`;\na `Pipes.Producer ByteString
  m r` has the same type as a `Producer Int m r`.\nThese types are suited to the general
  stream transformations these \nlibraries make possible. \n\nWe can see the strangeness
  in the `io-streams` `lines` \n\n    lines :: InputStream ByteString -> IO (InputStream
  ByteString)\n\nand the `conduit` `linesUnboundedAscii`\n\n    linesUnboundedAscii
  :: (Monad m) => Conduit ByteString m ByteString\n    \n(specializing slightly).
  In either case, what enters on the left will\nbe a succession of anyhow-chunked
  bytes; what exits on the right will \nbe a succession of significant individual
  things of type `ByteString`.  \n\nWhat we find in `IOStreams.lines` and\n`linesUnlimitedAscii`
  are comparable to what we would have if `bytestring`\ndefined \n\n    lines :: L.ByteString
  -> [S.ByteString]\n   \nor more absurdly\n\n    lines :: L.ByteString -> L.ByteString
  \n\nand exposed methods for inspecting the hitherto secret chunks contained\nin
  lazy bytestrings. \n\nThe model employed by the present package is a little different.
  \ First, \nthe primitive `lines` concept is just\n\n    lines :: ByteString m r
  -> Stream (ByteString m) m r\n\nas in `pipes-bytestring`; this corresponds precisely
  to \n\n    lines :: ByteString -> [ByteString]\n\nas it appears in `Data.ByteString.Lazy`
  -- the elements of the list (stream) are \nthemselves lazy bytestrings. \n\nBut
  `pipes-bytestring` attempts to *mean* by `Producer ByteString m r` \nwhat we express
  by `ByteString m r` - the undifferentiated byte stream.\nBut (we are provisionally
  suggesting) that isn't what `Producer ByteString m r` \nmeans, and this is part
  of the reason why `pipes-bytestring` is difficult \nfor people to grasp. The user
  frequently proposes to inspect and work \nwith individual lines with Pipes themselves
  and thus needs\n\n    produceLines :: Producer ByteString m r -> Producer ByteString
  m r\n    produceLines = folds B.concat B.empty id . view Pipes.ByteString.lines\n
  \   \nHere we would instead write a \n\n    produceLines :: ByteString m r -> Stream
  (Of ByteString) m r\n\nwhich is transparently related to the type of lines itself\n\n
  \   lines :: ByteString m r -> Stream (ByteString m) m r\n\nThe distinctive type
  of `produceLines` clearly express the transition \nfrom the world of amorphously
  chunked bytestreams to the world of \nsignificant individual values, in this case
  individual strict bytestrings.  \n\n\n\n"
license-name: BSD3
