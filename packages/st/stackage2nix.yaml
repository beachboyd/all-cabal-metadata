homepage: https://github.com/typeable/stackage2nix#readme
changelog-type: markdown
hash: 81793e19ef2c971c5c7c44f7b55b33eeab67a624f0219fa9ae862b30e80f8b07
test-bench-deps:
  shakespeare: -any
  bytestring: -any
  Cabal: -any
  base: -any
  hspec: -any
  text: -any
  network-uri: -any
  stackage2nix: -any
  pretty: -any
  yaml: -any
maintainer: bushevdv@gmail.com
synopsis: Convert Stack files into Nix build instructions.
changelog: ! "# 0.7.2\n- Build with ghc-8.4\n- Drop compatibility with Cabal<2.2\n-
  Don't check extra-deps when generating derivation from stack.yaml\n\n# 0.7.1\n-
  Generate stack packages `stack-yaml-packages.nix`\n\n# 0.7.0\n- Add compatibility
  with nixos-18.03\n- Drop compatibility with nixos-17-09\n- Add partial support for
  new stack extra-deps syntax.\n  https://docs.haskellstack.org/en/stable/yaml_configuration/#packages-and-extra-deps\n
  \ Supported same syntax for packages and extra-deps sections\n\n# 0.6.1\n- Pass
  extra `buildHaskellPackages` argument to `makePackageSet` function\n\n# 0.6.0\n-
  Replace call to `<nixpkgs/pkgs/development/haskell-modules>` in generated\n  Haskell
  packages with `makePackageSet` library function\n\n# 0.5.0\n- Add `--with-stackage`
  and `--with-stackage-closure` flag generates stackage\n- Add `--extra-deps-revision-latest`
  flag. Changes generation strategy for the\n  direct dependencies of the stack.yaml
  extra-deps. Default strategy is to\n  generate exact revision defined in the Stackage
  config. With this flag\n  enabled, direct dependencies of the stack.yaml extra-deps
  will be generated\n  with latest revision available on Hackage. This may help when
  Cabal fails to\n  resolve dependencies of extra-deps, and dependences are fixed
  in the latest\n  revision\n- Upd by default stackage2nix generates override of pre-generated
  Stackage\n  packages set.\n- Upd generated Stackage packages with `doCheck` and
  `runHaddock` enabled by\n  default\n- Remove `--do-check-stackage` flag (enabled
  by default)\n- Remove `--do-haddock-stackage` flag (enabled by default)\n- Remove
  `--no-packages-closure` flag (use `--with-stackage-closure`)\n- Remove `cabal2nix
  < 2.7.2` support #45\n\n# 0.4.0\n- Add `--resolver` option to generate full stackage
  packages set\n- Add Nix wrapper, see `nix/README.md`\n- Upd support cabal2nix >2.5\n-
  Fix honor `--hackage-db` flag\n\n# 0.3.0\n- Initial Hackage release\n- Add CHANGELOG.md\n"
basic-deps:
  stackage-curator: ! '>=0.15'
  exceptions: ! '>0.8'
  gitlib-libgit2: ! '>3'
  bytestring: -any
  Cabal: ! '>2.2'
  base: ! '>4.7 && <5'
  gitlib: ! '>3'
  unordered-containers: -any
  text: -any
  language-nix: -any
  filepath: -any
  containers: -any
  lens: -any
  inflections: ! '>=0.3'
  distribution-nixpkgs: ! '>=1.1'
  network-uri: -any
  hopenssl: ! '>2.2'
  stackage2nix: -any
  cabal2nix: ! '>=2.7.2'
  optparse-applicative: -any
  deepseq: -any
  QuickCheck: -any
  pretty: -any
  aeson: -any
  yaml: -any
all-versions:
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.7.0
- 0.7.1
- 0.7.2
author: ! 'Dmitry Bushev

  , Benno Fünfstück'
latest: 0.7.2
description-type: markdown
description: ! "# stackage2nix\n\n[![Build Status](https://travis-ci.org/typeable/stackage2nix.svg?branch=master)](https://travis-ci.org/typeable/stackage2nix)\n\n`stackage2nix`
  converts a Stack file into a Nix Haskell packages set.\n\n# Create build derivation
  from stack.yaml\n\n## Generate targets from stack.yaml only\n\n```\nstack exec --
  stackage2nix .\n```\n\nCommand creates file `default.nix` which overrides `haskell.packages.stackage`\npackages
  set. You should use\n[typeable/nixpkgs-stackage](https://github.com/typeable/nixpkgs-stackage)
  overlay that\nadds LTS Stackage packages to Nixpkgs.\n\nBuild package with overlay
  installed:\n\n```\nnix-build -A stackage2nix\n```\n\n## Generate Stackage packages
  for the build\n\nIf you don't want to use Stackage overlay, stackage2nix can generate
  required\npackages with `--with-stackage-closure` flag.\n\n``` bash\nstack exec
  -- stackage2nix \\\n  --all-cabal-hashes /path/to/commercialhaskell/all-cabal-hashes
  \\\n  --lts-haskell /path/to/fpco/lts-haskell \\\n  --with-stackage-closure \\\n
  \ ./stack.yaml\n```\n\nTo generate Stackage packages, you should supply additional\n`--all-cabal-hashes`
  and `--lts-haskell` flags that points to\n[commercialhaskell/all-cabal-hashes](https://github.com/commercialhaskell)\nchecked
  out to `hackage` branch and\n[fpco/lts-haskell](https://github.com/fpco/lts-haskell)
  respectively.\n\n### stackage2nix wrapper\n\nYou can use stackage2nix wrapper from
  `nix` directory that adds required flags:\n\n```\nnix-env -i -f ./nix/stackage2nix\nstackage2nix
  --with-stackage-closure ./stack.yaml\n```\n\nThis command will produce `packages.nix`
  and `configuration-packages.nix`\nStackage packages and its override in `default.nix`\n\n##
  Generate full Stackage\n\n`--with-stackage` parameter generates full Stackage LTS
  in addition to the\ntargets from `stack.yaml`\n\n```\nnix-env -i -f ./nix/stackage2nix\nstackage2nix
  --with-stackage ./stack.yaml\n```\n\n## Generate Stackage from LTS resolver\n\nYou
  can also generate only Stackage packages set from the resolver:\n\n```\nnix-env
  -i -f ./nix/stackage2nix\nstackage2nix --resolver lts-10.0\n```\n\nThis command
  will produce Stackage packages `packages.nix`, packages config\n`configuration-packages.nix`
  and a Haskell packages set `default.nix`.\n\n## Runtime dependencies\n\n- `nix-env`
  is required to be on PATH by the\n  [distribution-nixpkgs](https://hackage.haskell.org/package/distribution-nixpkgs)\n
  \ dependency\n- `nix-prefetch-scripts` is required on PATH if you have git dependencies
  in\n  `stack.yaml`\n\n## Override result derivation\n\nComplex projects may require
  some extra customization.\nSnippet `override.nix` below shows a minimal example
  of how to apply additional\noverrides on top of Haskell packages set produced by
  `stackage2nix`.\n\n``` nix\nwith import <nixpkgs> {};\nwith haskell.lib;\nlet haskellPackages
  = import ./. {};\nin haskellPackages.override {\n  overrides = self: super: {\n
  \   stackage2nix = disableSharedExecutables super.stackage2nix;\n  };\n}\n```\n\n```\nnix-build
  -A stackage2nix override.nix\n```\n\nFor more complex overrides and detailed information
  on how to work with Haskell packages in Nix, see Nixpkgs manual [User’s Guide to
  the Haskell Infrastructure](http://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure)\n\n##
  Tests\n\nIntegration tests that build stackage2nix form different yaml configs:\n\n```
  bash\nSTACKAGE_REPO=<path/to/stackage/repo> \\\nALL_CABAL_HASHES=<path/to/all-cabal-hashes/repo>
  \\\nSTACK_FILE=stack-ghc-7103.yaml \\\n./ci-stackage2nix\n```\n"
license-name: BSD-3-Clause
