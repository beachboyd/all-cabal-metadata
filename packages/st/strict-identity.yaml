homepage: https://github.com/cartazio/strict-identity
changelog-type: markdown
hash: dfbae3f135c13e0809e251df1c3f654eaa80c74d8cce3be4ca5c29f777fb6a53
test-bench-deps: {}
maintainer: carter at wellposed.com
synopsis: Strict Identity Monad, handy for writing fast code!
changelog: ! '0.1.0.0

  --------


  first release of strict-identity'
basic-deps:
  base: ! '>=4.3 && <5.0'
all-versions:
- 0.1.0.0
author: Carter Tazio Schonwald
latest: 0.1.0.0
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/cartazio/strict-identity.png?branch=master)](https://travis-ci.org/cartazio/strict-identity)\n\n#About\n\nstrict-identity
  package is meant to make writing nested strict let \nexpression heavy code a bit
  more pleasant, for all those High Performance \nHaskell lib authors out there.\n\nA
  simple example of the strict identity monad in action (and working wonderfully)\nis
  the following bit fiddling code, which generates C competitive assembly \non both
  major GHC backends, -fasm and -fllvm\n\n```haskell\n(>>) = unsafeShiftR\n(<<) =
  unsafeShiftL\nouterShuffle64A :: Word -> Word \nouterShuffle64A !x =\n    runStrictIdentity
  $! do\n        x <- return $! ((x .&. 0x00000000FFFF0000) << 16 )\n            .|.
  ((x>>16) .&. 0x00000000FFFF0000) .|. (x .&. 0xFFFF00000000FFFF)\n        x <-  return
  $! ((x .&. 0x0000FF000000FF00 ) <<  8 )\n            .|. (x >> 8) .&. 0x0000FF000000FF00
  .|. (x  .&. 0xFF0000FFFF0000FF)\n        x<-  return $! (( x .&. 0x00F000F000F000F0
  ) << 4 )\n            .|. (x >> 4) .&. 0x00F000F000F000F0 .|. (x .&. 0xF00FF00FF00FF00F
  )\n        x<-   return $!((x .&.  0x0C0C0C0C0C0C0C0C )<< 2 )\n            .|. (x
  >> 2) .&. 0x0C0C0C0C0C0C0C0C .|.( x .&. 0xC3C3C3C3C3C3C3C3)\n        x<-   return
  $! ( (x .&. 0x2222222222222222)  << 1 ) \n            .|. (x>> 1) .&. 0x2222222222222222
  .|. (x .&. 0x9999999999999999)\n        return x\n```"
license-name: BSD-3-Clause
