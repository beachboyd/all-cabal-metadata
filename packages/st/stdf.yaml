homepage: https://github.com/gitfoxi/Stdf
changelog-type: ''
hash: 749b4a71fb2e5feb47c2d0ee00e506d9d5b75bb4368faf555c312ff2d353ece5
test-bench-deps: {}
maintainer: 415fox@gmail.com
synopsis: Parse Structured Test Data Format (STDF)
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  unix-time: ! '>=0.3'
  split: ==0.2.*
  base: ==4.7.*
  time: ! '>=1.4'
  base64-bytestring: ==1.0.*
  stdf: ! '>=0.2'
  text: ==1.1.*
  containers: ! '>=0.5'
  binary: ==0.7.*
  zlib: ! '>=0.5'
  data-binary-ieee754: ! '>=0.4'
  aeson: ==0.8.*
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Michael Fox
latest: 0.2.0.0
description-type: markdown
description: ! "Data.Stdf\n=========\n\nStructured Test Data Format (STDF) is used
  to log test data by semiconductor automated test equipment (ATE).\n\nThere's a couple
  of good, open-source libraries for parsing STDF, notably [PyStdf](https://github.com/cmars/pystdf).\n\nLatest
  version: 0.2\n\nThe Data.Stdf advantage\n-----------------------\n\n1. Haskell\n2.
  Fast\n\n\nInstall\n-------\n\n    cabal install stdf\n\nOr for the latest revision,
  clone and build from here.\n\nUsage\n-----\n\nHere's an example of converting STDF
  to JSON. (What else would you want to do\nwith it?)\n\n    import Data.Stdf\n    import
  qualified Data.ByteString.Lazy.Char8 as BL\n    import Data.Aeson\n\n    -- unparsed
  records have type Raw for the time being\n    notRaw :: Rec -> Bool\n    notRaw
  (Raw _) = False\n    notRaw _       = True\n\n    main = do\n        raw <- BL.readFile
  \"test.stdf\"\n        let recs = parse raw\n        let goodRecs = filter notRaw
  recs\n        mapM_ (BL.putStrLn . encode) goodRecs\n\n\nIncluded Examples Applications\n------------------------------\n\n*
  WaferMap -- prints a pretty wafermap like this:\n\n```\n$ Examples/WaferMap test.stdf\nFile:
  test.stdf\n.   .   .   .   .   11  11  11  11  11  .   .   .   .   .   .\n.   .
  \  .   11  11  11  11  6   1   6   11  11  11  .   .   .\n.   .   11  11  1   11
  \ 11  11  1   11  1   1   11  11  .   .\n.   1   1   1   11  1   1   1   1   6   6
  \  6   1   1   11  .\n203 11  11  11  11  11  1   6   11  1   1   11  1   11  11
  \ .\n11  11  11  11  1   11  6   1   1   1   11  11  11  11  11  11\n11  11  11
  \ 11  1   1   11  1   11  6   1   11  1   11  11  11\n203 11  11  1   1   11  6
  \  1   11  212 6   1   11  11  11  .\n.   200 6   11  1   1   1   1   1   6   11
  \ 1   1   11  11  .\n.   .   11  11  11  11  1   1   1   11  1   1   1   11  .   .\n.
  \  .   .   11  11  1   11  11  1   11  11  11  11  .   .   .\n.   .   .   .   .
  \  11  11  11  11  200 212 .   .   .   .   .\n```\n\n* StdfToJson -- prints each
  Stdf record as a one-line JSON object for easy importing into other languages for
  further processing\n\n\nPerformance\n-----------\n\nPerformance is very good but
  can be 50% better if you build with `-O2`.\nHowever compiling takes forever with
  `-O2`.\n\n\nNot Implemented\n----------------\n\n### Non-Intel floating-point and
  endianness\n\nIt really blows my mind that Stdf expects the parser to support any
  N CPU bit\nencodings. I won't do it.\n\n### Some tricky records and fields\n\nNot
  yet covering all fields of all Stdf records.\nSeveral interesting optional fields
  in PTR, MPR and FTR are not yet processed.\n"
license-name: GPL-2.0-only
