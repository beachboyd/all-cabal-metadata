homepage: https://github.com/HaskellZhangSong/TopdownDerive
changelog-type: ''
hash: e0fed0fb58d142edff169170540c7bab25014fe04a98d24ea1f0792798019544
test-bench-deps: {}
maintainer: Haskell.Zhang.Song@hotmail.com
synopsis: This package will derive class instance along the data type declaration
  tree.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  mtl: ! '>=2.2.1'
  template-haskell: ! '>=2.10'
all-versions:
- 0.0.0.1
author: songzh
latest: 0.0.0.1
description-type: markdown
description: ! "# TopdownDerive\nThis code will do standalone deriving along the data
  type declaration dependencies in Haskell.\nPlease see https://ghc.haskell.org/trac/ghc/ticket/10607
  \nFor example\n\n    {-# LANGUAGE TemplateHaskell  #-}\n    {-# LANGUAGE KindSignatures
  #-}\n    {-# LANGUAGE StandaloneDeriving #-}\n    {-# LANGUAGE DeriveGeneric #-}\n
  \   {-# LANGUAGE ConstraintKinds #-}\n    {-# LANGUAGE DeriveAnyClass #-}\n        \n
  \   {-# OPTIONS_GHC -ddump-splices  #-}\n        \n    import Data.Derive.TopDown.StandaloneDerive\n
  \   import qualified GHC.Generics as G\n    import qualified Data.Binary as B\n
  \   import qualified Data.Aeson as A\n\n    data C a b = A (B a)\n    data B a =
  B a | F (D a)\n    data D b = D b | E b\n    derivings instances [''Eq, ''G.Generic,
  ''Ord] ''C\n\n    derivings generic_instances [''B.Binary, ''A.FromJSON, ''A.ToJSON]
  ''C\n\nwill give:\n\n    derivings instances [''Eq, ''G.Generic, ''Ord] ''C\n    ======>\n
  \   deriving instance Eq b_acQA => Eq (D b_acQA)\n    deriving instance Eq a_acQB
  => Eq (B a_acQB)\n    deriving instance (Eq a_acQC, Eq b_acQD) => Eq (C a_acQC b_acQD)\n
  \   deriving instance G.Generic b_acQA => G.Generic (D b_acQA)\n    deriving instance
  G.Generic a_acQB => G.Generic (B a_acQB)\n    deriving instance (G.Generic a_acQC,
  G.Generic b_acQD) =>\n                      G.Generic (C a_acQC b_acQD)\n    deriving
  instance Ord b_acQA => Ord (D b_acQA)\n    deriving instance Ord a_acQB => Ord (B
  a_acQB)\n    deriving instance (Ord a_acQC, Ord b_acQD) => Ord (C a_acQC b_acQD)\n
  \   D:\\Haskell\\TopDerive.hs:20:1-70: Splicing declarations\n    derivings\n      generic_instances
  [''B.Binary, ''A.FromJSON, ''A.ToJSON] ''C\n    ======>\n    deriving instance (B.Binary
  b_acQA, G.Generic b_acQA) =>\n                      B.Binary (D b_acQA)\n    deriving
  instance (B.Binary a_acQB, G.Generic a_acQB) =>\n                      B.Binary
  (B a_acQB)\n    deriving instance (B.Binary a_acQC,\n                       B.Binary
  b_acQD,\n                       G.Generic a_acQC,\n                       G.Generic
  b_acQD) =>\n                      B.Binary (C a_acQC b_acQD)\n    deriving instance
  (A.FromJSON b_acQA, G.Generic b_acQA) =>\n                      A.FromJSON (D b_acQA)\n
  \   deriving instance (A.FromJSON a_acQB, G.Generic a_acQB) =>\n                      A.FromJSON
  (B a_acQB)\n    deriving instance (A.FromJSON a_acQC,\n                       A.FromJSON
  b_acQD,\n                       G.Generic a_acQC,\n                       G.Generic
  b_acQD) =>\n                      A.FromJSON (C a_acQC b_acQD)\n    deriving instance
  (A.ToJSON b_acQA, G.Generic b_acQA) =>\n                      A.ToJSON (D b_acQA)\n
  \   deriving instance (A.ToJSON a_acQB, G.Generic a_acQB) =>\n                      A.ToJSON
  (B a_acQB)\n    deriving instance (A.ToJSON a_acQC,\n                       A.ToJSON
  b_acQD,\n                       G.Generic a_acQC,\n                       G.Generic
  b_acQD) =>\n                      A.ToJSON (C a_acQC b_acQD)\n    \nNote: if you
  want to derive a type class with a default implementation with Generic class, you
  need to write `derivings generic_instances`.\n\nHope this can save you some work.\n"
license-name: MIT
