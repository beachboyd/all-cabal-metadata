homepage: https://github.com/litxio/streamly-cassava#readme
changelog-type: markdown
hash: 14ba090a8e46209e5ff3c7536c00e1b4578c76fda2108c6719196d897501be99
test-bench-deps:
  streaming: -any
  exceptions: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  streaming-cassava: -any
  hspec: -any
  text: -any
  streaming-with: -any
  criterion: -any
  quickcheck-instances: -any
  weigh: -any
  cassava: -any
  mtl: -any
  streamly-cassava: -any
  QuickCheck: -any
  streaming-bytestring: -any
  streamly: -any
  vector: -any
maintainer: richard@litx.io
synopsis: CSV streaming support via cassava for the streamly ecosystem
changelog: |
  # Changelog for streamly-cassava

  ## Unreleased changes
basic-deps:
  exceptions: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  cassava: -any
  mtl: -any
  streamly: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Richard Warfield
latest: 0.1.1.0
description-type: markdown
description: "# streamly-cassava\n\nStream CSV data in\\/out using\n[Cassava](http://hackage.haskell.org/package/cassava).
  \ Adapted from\n[streaming-cassava](http://hackage.haskell.org/package/streaming-cassava).\n\nFor
  efficiency, operates on streams of strict ByteString chunks \n(i.e. `IsStream t
  => t m ByteString`) rather than directly on streams of Word8. \nThe chunkStream
  function is useful for generating an input stream from a\nhandle.\n\nExample usage:\n\n```haskell\nimport
  Streamly\nimport qualified Streamly.Prelude as S\nimport Streamly.Csv (decode, encode,
  chunkStream)\nimport System.IO\nimport qualified Data.Csv as Csv\nimport qualified
  Data.ByteString as BS\nimport Data.Vector (Vector)\n\nmain = do\n  h <- openFile
  \"testfile.csv\" ReadMode\n  let chunks = chunkStream h (64*1024)\n      recs =
  decode Csv.HasHeader chunks :: SerialT IO (Vector BS.ByteString)\n  withFile \"dest.csv\"
  WriteMode $ \\ho ->\n    S.mapM_ (BS.hPut ho) $ encode Nothing recs\n```\n"
license-name: BSD-3-Clause
