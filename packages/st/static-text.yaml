homepage: https://github.com/dzhus/static-text#readme
changelog-type: markdown
hash: 278342e230e751a52b7b47f4bf4d87057fb885cce56b79bf0d1ace9dcd890977
test-bench-deps:
  bytestring: <0.11
  base: <5
  static-text: -any
  doctest: <0.16
  tasty-hunit: <0.11
  doctest-discover: ! '>=0.1.0.8 && <0.2'
  tasty: <1.1
  template-haskell: <2.14
maintainer: dima@dzhus.org
synopsis: Lists, Texts, ByteStrings and Vectors of statically known length
changelog: ! "# Changelog\n\n## [0.2.0.1] - 2018-03-15\n\n### Changed\n\n- GHC 8.4.x
  support\n\n## [0.2.0] - 2018-02-17\n\n### Changed\n\n- Package renamed to `static-text`
  as per\n  <https://github.com/dzhus/static-text/issues/2>. Old names were\n  changed
  as follows:\n\n    | before       | after             |\n    |--------------|-------------------|\n
  \   | `Data.Sext`  | `Data.StaticText` |\n    | `Sext n a`   | `Static a n`      |\n
  \   | `Sextable a` | `IsStaticText a`  |\n    | `$(sext ..)` | `$(st ..)`        |\n\n##
  [0.1.3.1] - 2017-10-29\n\n### Added\n\n- GHC 8.2.x support\n\n## [0.1.3] - 2017-03-26\n\n###
  Added\n\n- `ShortByteString` support\n\n### Fixed\n\n- A bug in `createLeft` which
  failed to actually pad/truncate strings\n  (reported by Altai-man <https://github.com/dzhus/static-text/issues/4>)\n\n##
  [0.1.2] - 2017-01-18\n\n### Added\n\n- `Vector` support, `Eq` and `Ord` instances
  (contributed by Dylan\n  Simon <https://github.com/dzhus/static-text/pull/3>)\n\n##
  [0.1.1] - 2016-19-12\n\n### Added\n\n- GHC 8.0.x support\n\n## [0.1.0.2] - 2015-12-06\n\n###
  Added\n\n- GHC 7.10.x support\n\n## [0.1.0.0] - 2014-08-10\n\n[0.2.0]:   https://github.com/dzhus/static-text/compare/0.1.3.1...0.2.0\n[0.1.3.1]:
  https://github.com/dzhus/static-text/compare/0.1.3...0.1.3.1\n[0.1.3]:   https://github.com/dzhus/static-text/compare/0.1.2...0.1.3\n[0.1.2]:
  \  https://github.com/dzhus/static-text/compare/0.1.1...0.1.2\n[0.1.1]:   https://github.com/dzhus/static-text/compare/0.1.0.2...0.1.1\n[0.1.0.2]:
  https://github.com/dzhus/static-text/compare/0.1.0.0...0.1.0.2\n[0.1.0.0]: https://github.com/dzhus/static-text/tree/0.1.0.0\n"
basic-deps:
  bytestring: <0.11
  base: <5
  text: <1.3
  template-haskell: <2.14
  vector: <0.13
all-versions:
- '0.2'
- '0.2.0.1'
author: Dmitry Dzhus
latest: '0.2.0.1'
description-type: markdown
description: ! "# static-text: lists, Texts, ByteStrings and Vectors of statically
  known length\n\n[![Travis CI build status](https://travis-ci.org/dzhus/static-text.svg)](https://travis-ci.org/dzhus/static-text)\n[![Hackage](https://img.shields.io/hackage/v/static-text.svg?colorB=5e5184&style=flat)](https://hackage.haskell.org/package/static-text)\n[![Hackage
  deps](https://img.shields.io/hackage-deps/v/static-text.svg)](http://packdeps.haskellers.com/feed?needle=static-text)\n\nstatic-text
  provides type-level safety for basic operations on\nstring-like types (finite lists
  of elements), such as `Data.Text`,\n`String` (and all lists), `Data.ByteString`
  and `Data.Vector`. Use it\nwhen you need static guarantee on lengths of strings
  produced in your\ncode.\n\nAn example application would be a network exchange protocol
  built of\npackets with fixed-width fields:\n\n```haskell\n{-# LANGUAGE DataKinds
  #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE TemplateHaskell #-}\nimport
  Data.StaticText\n\nmkPacket :: ByteString -> Static ByteString 32\nmkPacket inp
  =\n  -- 5-character version signature\n  $(st \"PKT10\") `append`\n  -- 25-character
  payload\n  payload `append`\n  -- 2-character payload checksum\n  checksum\n  where\n
  \   payload = createLeft 0x20 inp\n    checksum :: Static ByteString 2\n    checksum
  = createLeft 0x20 $\n               pack $ show $ Data.Static.length payload `mod`
  100\n\nmessage :: Static ByteString 64\nmessage = mkPacket \"Hello\" `append` mkPacket
  \"world\"\n```\n\nPlease consult the [Hackage page for static-text][hackage-doc]
  for\ndocumentation and examples.\n\n## Alternatives\n\nThe emphasis of static-text
  is on type-safe padding/truncation and\ntype-safe string literals. Other similar
  libraries may suit different\nuse cases:\n\n- [vector-sized][] and [fixed-vector][]:
  full support for Vector API,\n  but not string-like types.\n\n[hackage-doc]: http://hackage.haskell.org/package/static-text/docs/Data-StaticText.html\n\n[fixed-vector]:
  \ https://hackage.haskell.org/package/fixed-vector\n\n[vector-sized]: https://hackage.haskell.org/package/vector-sized\n"
license-name: BSD3
