homepage: https://github.com/michaelschade/hs-stripe
changelog-type: ''
hash: b75c84f4bf267043b340ae6bec24f3095bdeec99d3cbb977bc3c6bbe53478d8f
test-bench-deps: {}
maintainer: ! 'Michael Schade <m@mschade.me>,

  Luke Hoersten <luke@hoersten.org>'
synopsis: A Haskell implementation of the Stripe API.
changelog: ''
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=3 && <5'
  time: ! '>=1.0 && <1.5'
  unordered-containers: ! '>=0.1.4.6 && <0.3'
  text: ! '>=0.11.0 && <1.3'
  utf8-string: ! '>=0.3.7 && <0.4'
  mtl: ! '>=2.1 && <2.2'
  http-conduit: ! '>=2.0 && <2.2'
  http-types: ! '>=0.6.11 && <0.9'
  aeson: ! '>=0.6.1 && <0.9'
all-versions:
- '0.1'
- 0.3.0.2
- 0.4.0.0
- 0.5.0.0
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.1
- 0.8.3
author: Spearhead Development, L.L.C.
latest: 0.8.3
description-type: text
description: ! "This is an unofficial Haskell implementation of the [Stripe API][sapi].\n\n**Note**
  that this has worked in my tests, but I have not used it in production\nyet. Try
  it thoroughly and let me know if you\n[find any bugs](https://github.com/michaelschade/hs-stripe/issues)
  or\n[have any improvements](http://help.github.com/send-pull-requests/).\n\nInstallation\n============\n\nInstallation
  is simple. If you have [cabal](http://www.haskell.org/cabal/)\ninstalled, just run:\n\n
  \   cabal install stripe\n\nand you'll be on your way!\n\nExample Usage\n=============\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport           Web.Stripe.Charge (Amount (..),
  Charge (..), Count (..),\n                                    Currency (..), Offset
  (..), getCharges)\nimport           Web.Stripe.Client (SecretKey (..), StripeConfig,
  defaultConfig,\n                                    runStripeT)\n\n-- The secret
  key below is used on the live Stripe API documentation. In\n-- practice, you should
  always store your secret key securely.\nconf :: StripeConfig\nconf  = defaultConfig
  $ SecretKey \"sk_test_mkGsLqEW6SLnZa487HYfJVLf\"\n\nmain :: IO ()\nmain  = do\n
  \   amounts <- runStripeT conf $ do\n        charges <- getCharges Nothing (Just
  $ Count 5) (Just $ Offset 1)\n        return   $ map getAmt charges\n    either
  err (putStrLn . show) amounts\n    where\n        getAmt c = (unAmount $ chargeAmount
  c, unCurrency $ chargeCurrency c)\n        err _    = putStrLn \"Uh-oh! It didn't
  work :-(\"\n```\n\nWhich produces the output along the lines of:\n`[(842,\"usd\"),(2048,\"usd\"),(1010,\"usd\"),(4096,\"usd\"),(4200,\"usd\")]`.\n\nLimitations\n===========\n\n*
  This package currently does not implement Stripe invoices.\n\nHelp\n====\n\nFirst,
  consult the Haddock and [Stripe API][sapi] docs to be certain you're\nusing the
  API correctly. It's a good idea to\n[try another library](https://stripe.com/docs/libraries)
  first to see if it\nworks there. If you think you might be misunderstanding the
  API, or having an\nissue with Stripe itself, it's best to\n[contact them](https://stripe.com/help/contact).\n\nIf
  all of that fails, or if you otherwise think it's an issue with this\nimplementation
  of the API, please submit an issue here. Better yet, submit\na pull request with
  a proposed solution!\n\nContributors\n============\n\n* [Michael Schade](https://twitter.com/sch)\n*
  [Luke Hoersten](https://twitter.com/LukeHoersten)\n* [Max Cantor](https://twitter.com/maxcan)\n\nLicense\n=======\n\nWe
  like the MIT license. See `LICENSE`.\n\n[sapi]: https://stripe.com/docs/api \"Stripe
  API\"\n"
license-name: BSD-3-Clause
