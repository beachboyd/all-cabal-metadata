homepage: https://github.com/fpco/store#readme
changelog-type: markdown
hash: 6ec0c3d1e4fb7c379f68cbe24a04b8677081eca900caf7144f27cc1c583fcb38
test-bench-deps:
  free: ! '>=4.11'
  void: ! '>=0.5.11'
  cereal: -any
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  clock: ! '>=0.3'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  criterion: -any
  network: ! '>=2.6.0.2'
  async: ! '>=2.0.2'
  lifted-base: ! '>=0.2.3.3'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  vector-binary-instances: -any
  weigh: -any
  bifunctors: ! '>=4.0'
  store: -any
  ghc-prim: ! '>=0.3.1.0'
  contravariant: ! '>=1.3'
  hashable: ! '>=1.2.3.1'
  cereal-vector: -any
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ==0.4.*
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
maintainer: Michael Sloan <sloan@fpcomplete.com>
synopsis: Fast binary serialization
changelog: |
  # ChangeLog

  ## 0.5.1.1

  * Update to the instances for generics, to improve error messages for
    sum types with more than 255 constructors.  See
    [#141](https://github.com/fpco/store/issues/141)

  ## 0.5.1.0

  * Update to TH to support sum types with more than 62 constructors.

  * Uses TH to derive Either instance, so that it can sometimes have ConstSize #119.

  ## 0.5.0.1

  * Updates to test-suite enabling `store` to build with newer dependencies.

  ## 0.5.0

  * `Data.Store.Streaming` moved to a separate package, `store-streaming`.

  ## 0.4.3.2

  * Buildable with GHC 8.2

  * Fix to haddock formatting of Data.Store.TH code example

  ## 0.4.3.1

  * Fixed compilation on GHC 7.8

  ## 0.4.3

  * Less aggressive inlining, resulting in faster compilation / simplifier
    not running out of ticks

  ## 0.4.2

  * Fixed testsuite

  ## 0.4.1

  * Breaking change in the encoding of Map / Set / IntMap / IntSet,
    to use ascending key order. Attempting to decode data written by
    prior versions of store (and vice versa) will almost always fail
    with a decent error message. If you're unlucky enough to have a
    collision in the data with a random Word32 magic number, then the
    error may not be so clear, or in extremely rare cases,
    successfully decode, yielding incorrect results. See
    [#97](https://github.com/fpco/store/issues/97) and
    [#101](https://github.com/fpco/store/pull/101).


  * Performance improvement of the 'Peek' monad, by introducing more
    strictness.  This required a change to the internal API.

  * API and behavior of 'Data.Store.Version' changed. Previously, it
    would check the version tag after decoding the contents. It now
    also stores a magic Word32 tag at the beginning, so that it fails
    more gracefully when decoding input that lacks encoded version
    info.

  ## 0.4.0

  Deprecated in favor of 0.4.1

  ## 0.3.1

  * Fix to derivation of primitive vectors, only relevant when built with
    primitive-0.6.2.0 or later

  * Removes INLINE pragmas on the generic default methods.  This
    dramatically improves compilation time on recent GHC versions.
    See [#91](https://github.com/fpco/store/issues/91).

  * Adds `instance Contravariant Size`

  ## 0.3

  * Uses store-core-0.3.*, which has support for alignment sensitive
    architectures.

  * Adds support for streaming decode from file descriptor, not supported on
    windows. As part of this addition, the API for "Data.Store.Streaming" has
    changed.

  ## 0.2.1.2

  * Fixes a bug that could could result in attempting to malloc a negative
    number of bytes when reading corrupted data.

  ## 0.2.1.1

  * Fixes a bug that could result in segfaults when reading corrupted data.

  ## 0.2.1.0

  Release notes:

  * Adds experimental `Data.Store.Version` and deprecates `Data.Store.TypeHash`.
    The new functionality is similar to TypeHash, but there are much fewer false
    positives of hashes changing.

  Other enhancements:

  * Now exports types related to generics

  ## 0.2.0.0

  Release notes:

  * Core functionality split into `store-core` package

  Breaking changes:

  * `combineSize'` renamed to `combineSizeWith`

  * Streaming support now prefixes each Message with a magic number, intended to
    detect mis-alignment of data frames. This is worth the overhead, because
    otherwise serialization errors could be more catastrophic - interpretting some
    bytes as a length tag and attempting to consume many bytes from the source.

  Other enhancements:

  * [weigh](https://github.com/fpco/weigh) based allocations benchmark.

  * Addition of `Array` / `UArray` instances

  * Streaming support now has checks for over/undershooting buffer

  Bug fixes:


  ## 0.1.0.0

  * First public release
basic-deps:
  free: ! '>=4.11'
  void: ! '>=0.5.11'
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  network: ! '>=2.6.0.2'
  async: ! '>=2.0.2'
  lifted-base: ! '>=0.2.3.3'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  bifunctors: ! '>=4.0'
  ghc-prim: ! '>=0.3.1.0'
  contravariant: ! '>=1.3'
  hashable: ! '>=1.2.3.1'
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ! '>=0.4 && <0.5'
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- '0.3'
- 0.3.1
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.3.2
- 0.5.0
- 0.5.0.1
- 0.5.1.0
- 0.5.1.1
author: ''
latest: 0.5.1.1
description-type: markdown
description: |
  # store

  The 'store' package provides efficient binary serialization. There are a couple
  features that particularly distinguish it from most prior Haskell serialization
  libraries:

  * Its primary goal is speed. By default, direct machine representations are used
    for things like numeric values (`Int`, `Double`, `Word32`, etc) and buffers
    (`Text`, `ByteString`, `Vector`, etc). This means that much of serialization
    uses the equivalent of `memcpy`.

    We have plans for supporting architecture independent serialization - see
    [#36](https://github.com/fpco/store/issues/36) and
    [#31](https://github.com/fpco/store/issues/31). This plan makes little endian
    the default, so that the most common endianness has no overhead.

  * Instead of implementing lazy serialization / deserialization involving
    multiple input / output buffers, `peek` and `poke` always work with a single
    buffer. This buffer is allocated by asking the value for its size before
    encoding. This simplifies the encoding logic, and allows for highly optimized
    tight loops.

  * `store` can optimize size computations by knowing when some types always
    use the same number of bytes.  This allows us to compute the byte size of a
    `Vector Int32` by just doing `length v * 4`.

  It also features:

  * Optimized serialization instances for many types from base, vector,
    bytestring, text, containers, time, template-haskell, and more.

  * TH and GHC Generics based generation of Store instances for datatypes

  * TH generation of testcases.

  * Utilities for streaming encoding / decoding of Store encoded messages, via the
    `store-streaming` package.

  ## Blog posts

  * [Initial release announcement](https://www.fpcomplete.com/blog/2016/05/store-package)
  * [Benchmarks of the prototype](https://www.fpcomplete.com/blog/2016/03/efficient-binary-serialization)
  * [New 'weigh' allocation benchmark package](https://www.fpcomplete.com/blog/2016/05/weigh-package),
    created particularly to aid optimizing `store`.
license-name: MIT
