homepage: https://github.com/fpco/store#readme
changelog-type: markdown
hash: 3a1cef93e5f660286da19f6ca6192c8782c2145a88913e5f9d6ac71ddbce55c4
test-bench-deps:
  free: ! '>=4.11'
  void: ! '>=0.5.11'
  cereal: -any
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  clock: ! '>=0.3'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  criterion: -any
  network: ! '>=2.6.0.2'
  async: ! '>=2.0.2'
  lifted-base: ! '>=0.2.3.3'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  vector-binary-instances: -any
  weigh: -any
  bifunctors: ! '>=4.0'
  store: -any
  ghc-prim: ! '>=0.3.1.0'
  contravariant: ! '>=1.3'
  hashable: ! '>=1.2.3.1'
  cereal-vector: -any
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ==0.4.*
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
maintainer: Michael Sloan <sloan@fpcomplete.com>
synopsis: Fast binary serialization
changelog: ! "# ChangeLog\n\n## 0.5.0.1\n\n* Updates to test-suite enabling `store`
  to build with newer dependencies.\n\n## 0.5.0\n\n* `Data.Store.Streaming` moved
  to a separate package, `store-streaming`.\n\n## 0.4.3.2\n\n* Buildable with GHC
  8.2\n\n* Fix to haddock formatting of Data.Store.TH code example\n\n## 0.4.3.1\n\n*
  Fixed compilation on GHC 7.8\n\n## 0.4.3\n\n* Less aggressive inlining, resulting
  in faster compilation / simplifier\n  not running out of ticks\n\n## 0.4.2\n\n*
  Fixed testsuite\n\n## 0.4.1\n\n* Breaking change in the encoding of Map / Set /
  IntMap / IntSet,\n  to use ascending key order. Attempting to decode data written
  by\n  prior versions of store (and vice versa) will almost always fail\n  with a
  decent error message. If you're unlucky enough to have a\n  collision in the data
  with a random Word32 magic number, then the\n  error may not be so clear, or in
  extremely rare cases,\n  successfully decode, yielding incorrect results. See\n
  \ [#97](https://github.com/fpco/store/issues/97) and\n  [#101](https://github.com/fpco/store/pull/101).\n\n\n*
  Performance improvement of the 'Peek' monad, by introducing more\n  strictness.
  \ This required a change to the internal API.\n\n* API and behavior of 'Data.Store.Version'
  changed. Previously, it\n  would check the version tag after decoding the contents.
  It now\n  also stores a magic Word32 tag at the beginning, so that it fails\n  more
  gracefully when decoding input that lacks encoded version\n  info.\n\n## 0.4.0\n\nDeprecated
  in favor of 0.4.1\n\n## 0.3.1\n\n* Fix to derivation of primitive vectors, only
  relevant when built with\n  primitive-0.6.2.0 or later\n\n* Removes INLINE pragmas
  on the generic default methods.  This\n  dramatically improves compilation time
  on recent GHC versions.\n  See [#91](https://github.com/fpco/store/issues/91).\n\n*
  Adds `instance Contravariant Size`\n\n## 0.3\n\n* Uses store-core-0.3.*, which has
  support for alignment sensitive\n  architectures.\n\n* Adds support for streaming
  decode from file descriptor, not supported on\n  windows. As part of this addition,
  the API for \"Data.Store.Streaming\" has\n  changed.\n\n## 0.2.1.2\n\n* Fixes a
  bug that could could result in attempting to malloc a negative\n  number of bytes
  when reading corrupted data.\n\n## 0.2.1.1\n\n* Fixes a bug that could result in
  segfaults when reading corrupted data.\n\n## 0.2.1.0\n\nRelease notes:\n\n* Adds
  experimental `Data.Store.Version` and deprecates `Data.Store.TypeHash`.\n  The new
  functionality is similar to TypeHash, but there are much fewer false\n  positives
  of hashes changing.\n\nOther enhancements:\n\n* Now exports types related to generics\n\n##
  0.2.0.0\n\nRelease notes:\n\n* Core functionality split into `store-core` package\n\nBreaking
  changes:\n\n* `combineSize'` renamed to `combineSizeWith`\n\n* Streaming support
  now prefixes each Message with a magic number, intended to\n  detect mis-alignment
  of data frames. This is worth the overhead, because\n  otherwise serialization errors
  could be more catastrophic - interpretting some\n  bytes as a length tag and attempting
  to consume many bytes from the source.\n\nOther enhancements:\n\n* [weigh](https://github.com/fpco/weigh)
  based allocations benchmark.\n\n* Addition of `Array` / `UArray` instances\n\n*
  Streaming support now has checks for over/undershooting buffer\n\nBug fixes:\n\n\n##
  0.1.0.0\n\n* First public release\n"
basic-deps:
  free: ! '>=4.11'
  void: ! '>=0.5.11'
  th-utilities: ! '>=0.2'
  bytestring: ! '>=0.10.4.0'
  base: ! '>=4.7 && <5'
  time: ! '>=1.4.2'
  base64-bytestring: ! '>=0.1.1'
  unordered-containers: ! '>=0.2.5.1'
  hspec: ! '>=2.1.2'
  text: ! '>=1.2.0.4'
  th-orphans: ! '>=0.12.2'
  syb: ! '>=0.4.4'
  monad-control: ! '>=0.3.3.0'
  filepath: ! '>=1.3'
  network: ! '>=2.6.0.2'
  async: ! '>=2.0.2'
  lifted-base: ! '>=0.2.3.3'
  semigroups: ! '>=0.8'
  th-reify-many: ! '>=0.1.6'
  array: ! '>=0.5.0.0'
  smallcheck: ! '>=1.1.1'
  integer-gmp: ! '>=0.5.1.0'
  base-orphans: ! '>=0.4.3'
  th-lift-instances: ! '>=0.1.4'
  containers: ! '>=0.5.5.1'
  bifunctors: ! '>=4.0'
  ghc-prim: ! '>=0.3.1.0'
  contravariant: ! '>=1.3'
  hashable: ! '>=1.2.3.1'
  transformers: ! '>=0.3.0.0'
  deepseq: ! '>=1.3.0.2'
  th-lift: ! '>=0.7.1'
  resourcet: ! '>=1.1.3.3'
  template-haskell: ! '>=2.9.0.0'
  mono-traversable: ! '>=0.7.0'
  primitive: ! '>=0.6'
  safe: ! '>=0.3.8'
  store-core: ! '>=0.4 && <0.5'
  vector: ! '>=0.10.12.3'
  hspec-smallcheck: ! '>=0.3.0'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.11.6'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.1.2'
- '0.3'
- '0.3.1'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.3.2'
- '0.5.0'
- '0.5.0.1'
author: ''
latest: '0.5.0.1'
description-type: markdown
description: ! "# store\n\nThe 'store' package provides efficient binary serialization.
  There are a couple\nfeatures that particularly distinguish it from most prior Haskell
  serialization\nlibraries:\n\n* Its primary goal is speed. By default, direct machine
  representations are used\n  for things like numeric values (`Int`, `Double`, `Word32`,
  etc) and buffers\n  (`Text`, `ByteString`, `Vector`, etc). This means that much
  of serialization\n  uses the equivalent of `memcpy`.\n\n  We have plans for supporting
  architecture independent serialization - see\n  [#36](https://github.com/fpco/store/issues/36)
  and\n  [#31](https://github.com/fpco/store/issues/31). This plan makes little endian\n
  \ the default, so that the most common endianness has no overhead.\n\n* Instead
  of implementing lazy serialization / deserialization involving\n  multiple input
  / output buffers, `peek` and `poke` always work with a single\n  buffer. This buffer
  is allocated by asking the value for its size before\n  encoding. This simplifies
  the encoding logic, and allows for highly optimized\n  tight loops.\n\n* `store`
  can optimize size computations by knowing when some types always\n  use the same
  number of bytes.  This allows us to compute the byte size of a\n  `Vector Int32`
  by just doing `length v * 4`.\n\nIt also features:\n\n* Optimized serialization
  instances for many types from base, vector,\n  bytestring, text, containers, time,
  template-haskell, and more.\n\n* TH and GHC Generics based generation of Store instances
  for datatypes\n\n* TH generation of testcases.\n\n* Utilities for streaming encoding
  / decoding of Store encoded messages, via the\n  `store-streaming` package.\n\n##
  Blog posts\n\n* [Initial release announcement](https://www.fpcomplete.com/blog/2016/05/store-package)\n*
  [Benchmarks of the prototype](https://www.fpcomplete.com/blog/2016/03/efficient-binary-serialization)\n*
  [New 'weigh' allocation benchmark package](https://www.fpcomplete.com/blog/2016/05/weigh-package),\n
  \ created particularly to aid optimizing `store`.\n"
license-name: MIT
