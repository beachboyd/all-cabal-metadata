homepage: https://github.com/chessai/st2.git
changelog-type: markdown
hash: 01e352c9124c402a94954ddc3af733bd41f72d098a4b722d925d6a84d88c932d
test-bench-deps: {}
maintainer: chessai1996@gmail.com
synopsis: shared heap regions between local mutable state threads
changelog: ! "# Revision history for st2\n\n## 0.1.0.2 -- 2018-11-02\n\n* Fix build
  on GHC-8.6, which requires Control.Monad.ST2 to have\n  -XPolyKinds enabled in order
  to compile.\n\n## 0.1.0.1 -- 2018-11-02\n\n* Fix internal bug that could cause semantic
  differences under optimisations,\n  related to implementation of runRegion#.\n\n##
  0.1.0.0 -- 2018-07-23\n\n* First version. Released on an unsuspecting world.\n"
basic-deps:
  base: ! '>=4.9 && <4.13'
  ghc-prim: -any
  gdp: ! '>=0.0.0.1 && <0.1.0.0'
  primitive: ! '>=0.6.4.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: chessai
latest: 0.1.0.2
description-type: haddock
description: ! 'This library implements the ST2 monad, a type using GDP (ghosts of
  departed proofs)

  to define shared regions of memory between local mutable state threads. This allows

  us to define a region of the heap in more minute contours, with each state thread

  having explicit access to regions in memory. This is achieved using the function
  `runST2`,

  which in effects lets the user run a computation that makes use of two partially-overlapping

  memory regions. Within that computation, the user can run sub-computations bound
  to one or

  the other memory region. Furthermore, a sub-computation can move any variable that
  it owns

  into the common overlap via `share`.


  An example is shown in the documentation, where one sub-computation creates two
  cells: one

  private, and the other shared. A second sub-computation has unconstrained access
  to the

  shared cell. Yet even though the private reference is also in scope during the second

  sub-computation, any attempts to access it there will fail to compile.'
license-name: BSD-3-Clause
