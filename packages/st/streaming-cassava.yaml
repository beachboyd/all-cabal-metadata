homepage: ''
changelog-type: markdown
hash: 2d1dfeb09af62009e88311fe92f44d06dafb5cdd38879b437ea6adb3bc40acfe
test-bench-deps:
  streaming: -any
  base: -any
  streaming-cassava: -any
  hspec: ==2.4.*
  text: -any
  quickcheck-instances: -any
  mtl: ! '>=2.2.1 && <2.3'
  QuickCheck: ==2.*
  vector: ! '>=0.3'
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Cassava support for the streaming ecosystem
changelog: ! '# Revision history for streaming-cassava


  ## 0.1.0.1 -- 2018-01-23


  * Bump dependency on `streaming`.


  * Document what to do with `readFile` errors.


  ## 0.1.0.0 -- 2017-06-30


  * First version.

'
basic-deps:
  streaming: ! '>=0.1.1.0 && <0.3'
  bytestring: -any
  base: ! '>=4.8 && <5'
  cassava: ==0.5.*
  mtl: -any
  transformers: -any
  streaming-bytestring: <0.2
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Ivan Lazar Miljenovic
latest: '0.1.0.1'
description-type: markdown
description: ! "streaming-cassava\n=================\n\n[![Hackage](https://img.shields.io/hackage/v/streaming-cassava.svg)](https://hackage.haskell.org/package/streaming-cassava)
  [![Build Status](https://travis-ci.org/haskell-streaming/streaming-cassava.svg)](https://travis-ci.org/haskell-streaming/streaming-cassava)\n\n>
  [cassava] support for the [streaming] ecosystem\n\n[cassava]: http://hackage.haskell.org/package/cassava\n[streaming]:
  http://hackage.haskell.org/package/streaming\n\nThis library allows you to easily
  stream CSV data in and out.  You can\ndo so using both \"plain\" record-based (with
  optional header support)\nor name-based (header required to determine ordering)\nencoding/decoding.\n\nAll
  encoding/decoding options are supported, it's possible to\nautomatically add on
  default headers and you can even choose whether\nto fail on the first parse error
  or handle errors on a row-by-row\nbasis.\n\nErrors with `readFile`\n----------------------\n\nA
  common use-case is to stream CSV-encoded data in from a file.  You\nmay be tempted
  to use `readFile` from [streaming-bytestring] to obtain\nthe file contents, but
  if you do you're likely to run into exceptions\nsuch as `hGetBufSome: illegal operation
  (handle is closed)`.\n\nThe recommended solution is to use the [streaming-with]
  package for\nthe IO aspects.  You can then write something like:\n\n```haskell\nwithBinaryFileContents
  \\\"myFile.csv\\\" $\n  doSomethingWithStreamingCSV\n  . 'decodeByName'\n```\n\n[streaming-bytestring]:
  https://hackage.haskell.org/package/streaming-bytestring\n[streaming-with]: https://hackage.haskell.org/package/streaming-with\n"
license-name: MIT
