homepage: https://github.com/composewell/streamly
changelog-type: markdown
hash: 81dfd7fb8a7ca56eefcc789fef000d4ea2ce712a66dafc391292d2b2c3f3577d
test-bench-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.8 && <5'
  hspec: ! '>=2.0 && <3'
  gauge: ! '>=0.2.1 && <0.3'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <3'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1.0.0 && <1.2'
  deepseq: ! '>=1.4.0 && <1.5'
  QuickCheck: ! '>=2.8 && <2.12'
  streamly: -any
maintainer: harendra.kumar@gmail.com
synopsis: Beautiful Streaming, Concurrent and Reactive Composition
changelog: ! "## 0.2.1\n\n### Bug Fixes\n* Fixed a bug that caused some transformation
  ops to return incorrect results\n  when used with concurrent streams. The affected
  ops are `take`, `filter`,\n  `takeWhile`, `drop`, `dropWhile`, and `reverse`.\n\n##
  0.2.0\n\n### Breaking changes\n* Changed the semantics of the Semigroup instance
  for `InterleavedT`, `AsyncT`\n  and `ParallelT`. The new semantics are as follows:\n
  \ * For `InterleavedT`, `<>` operation interleaves two streams\n  * For `AsyncT`,
  `<>` now concurrently merges two streams in a left biased\n    manner using demand
  based concurrency.\n  * For `ParallelT`, the `<>` operation now concurrently meges
  the two streams\n    in a fairly parallel manner.\n\n  To adapt to the new changes,
  replace `<>` with `serial` wherever it is used\n  for stream types other than `StreamT`.\n\n*
  Remove the `Alternative` instance.  To adapt to this change replace any usage\n
  \ of `<|>` with `parallel` and `empty` with `nil`.\n* Stream type now defaults to
  the `SerialT` type unless explicitly specified\n  using a type combinator or a monomorphic
  type.  This change reduces puzzling\n  type errors for beginners. It includes the
  following two changes:\n  * Change the type of all stream elimination functions
  to use `SerialT`\n    instead of a polymorphic type. This makes sure that the stream
  type is\n    always fixed at all exits.\n  * Change the type combinators (e.g. `parallely`)
  to only fix the argument\n    stream type and the output stream type remains polymorphic.\n\n
  \ Stream types may have to be changed or type combinators may have to be added\n
  \ or removed to adapt to this change.\n* Change the type of `foldrM` to make it
  consistent with `foldrM` in base.\n* `async` is renamed to `mkAsync` and `async`
  is now a new API with a different\n  meaning.\n* `ZipAsync` is renamed to `ZipAsyncM`
  and `ZipAsync` is now ZipAsyncM\n  specialized to the IO Monad.\n* Remove the `MonadError`
  instance as it was not working correctly for\n  parallel compositions. Use `MonadThrow`
  instead for error propagation.\n* Remove Num/Fractional/Floating instances as they
  are not very useful. Use\n  `fmap` and `liftA2` instead.\n\n### Deprecations\n*
  Deprecate and rename the following symbols:\n    * `Streaming` to `IsStream`\n    *
  `runStreaming` to `runStream`\n    * `StreamT` to `SerialT`\n    * `InterleavedT`
  to `WSerialT`\n    * `ZipStream` to `ZipSerialM`\n    * `ZipAsync` to `ZipAsyncM`\n
  \   * `interleaving` to `wSerially`\n    * `zipping` to `zipSerially`\n    * `zippingAsync`
  to `zipAsyncly`\n    * `<=>` to `wSerial`\n    * `<|` to `async`\n    * `each` to
  `fromFoldable`\n    * `scan` to `scanx`\n    * `foldl` to `foldx`\n    * `foldlM`
  to `foldxM`\n* Deprecate the following symbols for future removal:\n    * `runStreamT`\n
  \   * `runInterleavedT`\n    * `runAsyncT`\n    * `runParallelT`\n    * `runZipStream`\n
  \   * `runZipAsync`\n\n### Enhancements\n* Add the following functions:\n    * `consM`
  and `|:` operator to construct streams from monadic actions\n    * `once` to create
  a singleton stream from a monadic action\n    * `repeatM` to construct a stream
  by repeating a monadic action\n    * `scanl'` strict left scan\n    * `foldl'` strict
  left fold\n    * `foldlM'` strict left fold with a monadic fold function\n    *
  `serial` run two streams serially one after the other\n    * `async` run two streams
  asynchronously\n    * `parallel` run two streams in parallel (replaces `<|>`)\n
  \   * `WAsyncT` stream type for BFS version of `AsyncT` composition\n* Add simpler
  stream types that are specialized to the IO monad\n* Put a bound (1500) on the output
  buffer used for asynchronous tasks\n* Put a limit (1500) on the number of threads
  used for Async and WAsync types\n\n## 0.1.2\n\n### Enhancements\n* Add `iterate`,
  `iterateM` stream operations\n\n### Bug Fixes\n* Fixed a bug that casued unexpected
  behavior when `pure` was used to inject\n  values in Applicative composition of
  `ZipStream` and `ZipAsync` types.\n\n## 0.1.1\n\n### Enhancements\n* Make `cons`
  right associative and provide an operator form `.:` for it\n* Add `null`, `tail`,
  `reverse`, `replicateM`, `scan` stream operations\n* Improve performance of some
  stream operations (`foldl`, `dropWhile`)\n\n### Bug Fixes\n* Fix the `product` operation.
  Earlier, it always returned 0 due to a bug\n* Fix the `last` operation, which returned
  `Nothing` for singleton streams\n\n## 0.1.0\n\n* Initial release\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  stm: ! '>=2.4.3 && <2.5'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <2'
  lockfree-queue: ! '>=0.2.3 && <0.3'
  lifted-base: ! '>=0.2 && <0.3'
  containers: ! '>=0.5 && <0.6'
  atomic-primops: ! '>=0.8 && <0.9'
  mtl: ! '>=2.2 && <3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.1'
author: Harendra Kumar
latest: '0.2.1'
description-type: markdown
description: ! "# Streamly\n\n## Stream`ing` `Concurrent`ly\n\nStreamly, short for
  streaming concurrently, is a simple yet powerful streaming\nlibrary with concurrent
  merging and concurrent nested looping support. A stream\nis just like a list except
  that it is a list of monadic actions rather than\npure values.  Streamly streams
  can be generated, consumed, combined, or\ntransformed serially or concurrently.
  We can loop over a stream serially or\nconcurrently.  We can also have serial or
  concurrent nesting of loops. For\nthose familiar with the list transformer concept
  streamly is a concurrent list\ntransformer. Streamly uses standard composition abstractions.
  Concurrent\ncomposition is just the same as serial composition except that we use
  a simple\ncombinator to request a concurrent composition instead of serial. The\nprogrammer
  does not have to be aware of threads, locking or synchronization to\nwrite scalable
  concurrent programs.\n\nStreamly provides functionality that is equivalent to streaming
  libraries\nlike [pipes](https://hackage.haskell.org/package/pipes) and\n[conduit](https://hackage.haskell.org/package/conduit)
  but with a list like\nAPI. The streaming API of streamly is close to the monadic
  streams API of the\n[vector](https://hackage.haskell.org/package/vector) package
  and similar in\nconcept to the [streaming](https://hackage.haskell.org/package/streaming)\npackage.
  In addition to providing streaming functionality, streamly subsumes\nthe functionality
  of list transformer libraries like `pipes` or\n[list-t](https://hackage.haskell.org/package/list-t)
  and also the logic\nprogramming library [logict](https://hackage.haskell.org/package/logict).
  On\nthe concurrency side, it subsumes the functionality of the\n[async](https://hackage.haskell.org/package/async)
  package. Because it supports\nstreaming with concurrency we can write FRP applications
  similar in concept to\n[Yampa](https://hackage.haskell.org/package/Yampa) or\n[reflex](https://hackage.haskell.org/package/reflex).
  To understand the\nstreaming library ecosystem and where streamly fits in you may
  want to read\n[streaming libraries](https://github.com/composewell/streaming-benchmarks#streaming-libraries)\nas
  well. Also see the [Comparison with Existing\nPackages](https://hackage.haskell.org/package/streamly/docs/Streamly-Tutorial.html)\nsection
  in the streamly tutorial.\n\nWhy use streamly?\n\n  * Simple list like streaming
  API, if you know how to use lists then you know\n    how to use streamly.\n  * Powerful
  yet simple and scalable concurrency. Concurrency is not intrusive,\n    concurrent
  programs are written exactly the same way as non-concurrent\n    ones. There is
  no other package that provides such high level, simple and\n    flexible concurrency
  support.\n  * It is a general programming framework providing you all the necessary
  tools\n    to solve a wide range of programming problems, unifying the functionality\n
  \   provided by several disparate packages in a concise and simple API.\n  * Best
  in class performance. See\n    [streaming-benchmarks](https://github.com/composewell/streaming-benchmarks)\n
  \   for a comparison of popular streaming libraries on micro-benchmarks.\n\n  For
  more information, see:\n\n  * [Streamly.Tutorial](https://hackage.haskell.org/package/streamly/docs/Streamly-Tutorial.html)
  module in the haddock documentation for a detailed introduction\n  * [examples](https://github.com/composewell/streamly/tree/master/examples)
  directory in the package for some simple practical examples\n\n## Streaming Pipelines\n\nUnlike
  `pipes` or `conduit` and like `vector` and `streaming` `streamly`\ncomposes stream
  data instead of stream processors (functions).  A stream is\njust like a list and
  is explicitly passed around to functions that process the\nstream.  Therefore, no
  special operator is needed to join stages in a streaming\npipeline, just the standard
  forward (`$`) or reverse (`&`) function application\noperator is enough.  Combinators
  are provided in `Streamly.Prelude` to\ntransform or fold streams.\n\nThis snippet
  reads numbers from stdin, prints the squares of even numbers and\nexits if an even
  number more than 9 is entered.\n\n```haskell\nimport Streamly\nimport qualified
  Streamly.Prelude as S\nimport Data.Function ((&))\n\nmain = runStream $\n       S.repeatM
  getLine\n     & fmap read\n     & S.filter even\n     & S.takeWhile (<= 9)\n     &
  fmap (\\x -> x * x)\n     & S.mapM print\n```\n\n## Serial and Concurrent Merging\n\nSemigroup
  and Monoid instances can be used to fold streams serially or\nconcurrently. In the
  following example we are composing ten actions in the\nstream each with a delay
  of 1 to 10 seconds, respectively. Since all the\nactions are concurrent we see one
  output printed every second:\n\n``` haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\nimport Control.Concurrent (threadDelay)\n\nmain = S.toList $ parallely $ foldMap
  delay [1..10]\n where delay n = S.once $ threadDelay (n * 1000000) >> print n\n```\n\nStreams
  can be combined together in many ways. We are providing some examples\nbelow, see
  the tutorial for more ways. We will use the following `delay`\nfunction in the examples
  to demonstrate the concurrency aspects:\n\n``` haskell\nimport Streamly\nimport
  qualified Streamly.Prelude as S\nimport Control.Concurrent\n\ndelay n = S.once $
  do\n    threadDelay (n * 1000000)\n    tid <- myThreadId\n    putStrLn (show tid
  ++ \": Delay \" ++ show n)\n```\n### Serial\n\n```haskell\nmain = runStream $ delay
  3 <> delay 2 <> delay 1\n```\n```\nThreadId 36: Delay 3\nThreadId 36: Delay 2\nThreadId
  36: Delay 1\n```\n\n### Parallel\n\n```haskell\nmain = runStream . parallely $ delay
  3 <> delay 2 <> delay 1\n```\n```\nThreadId 42: Delay 1\nThreadId 41: Delay 2\nThreadId
  40: Delay 3\n```\n\n## Nested Loops (aka List Transformer)\n\nThe monad instance
  composes like a list monad.\n\n``` haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\n\nloops = do\n    x <- S.fromFoldable [1,2]\n    y <- S.fromFoldable [3,4]\n
  \   S.once $ putStrLn $ show (x, y)\n\nmain = runStream loops\n```\n```\n(1,3)\n(1,4)\n(2,3)\n(2,4)\n```\n\n##
  Concurrent Nested Loops\n\nTo run the above code with demand-driven depth first
  concurrency i.e. each\niteration in the loops can run concurrently depending on
  the consumer rate:\n\n``` haskell\nmain = runStream $ asyncly $ loops\n```\n\nTo
  run it with demand driven breadth first concurrency:\n\n``` haskell\nmain = runStream
  $ wAsyncly $ loops\n```\n\nTo run it with strict concurrency irrespective of demand:\n\n```
  haskell\nmain = runStream $ parallely $ loops\n```\n\nTo run it serially but interleaving
  the outer and inner loop iterations\n(breadth first serial):\n\n``` haskell\nmain
  = runStream $ wSerially $ loops\n```\n\n## Magical Concurrency\n\nStreams can perform
  semigroup (<>) and monadic bind (>>=) operations\nconcurrently using combinators
  like `asyncly`, `parallelly`. For example,\nto concurrently generate squares of
  a stream of numbers and then concurrently\nsum the square roots of all combinations
  of two streams:\n\n``` haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\n\nmain = do\n    s <- S.sum $ asyncly $ do\n        -- Each square is performed
  concurrently, (<>) is concurrent\n        x2 <- foldMap (\\x -> return $ x * x)
  [1..100]\n        y2 <- foldMap (\\y -> return $ y * y) [1..100]\n        -- Each
  addition is performed concurrently, monadic bind is concurrent\n        return $
  sqrt (x2 + y2)\n    print s\n```\n\nOf course, the actions running in parallel could
  be arbitrary IO actions.  For\nexample, to concurrently list the contents of a directory
  tree recursively:\n\n``` haskell\nimport Path.IO (listDir, getCurrentDir)\nimport
  Streamly\nimport qualified Streamly.Prelude as S\n\nmain = runStream $ asyncly $
  getCurrentDir >>= readdir\n   where readdir d = do\n            (dirs, files) <-
  S.once $ listDir d\n            S.once $ mapM_ putStrLn $ map show files\n            --
  read the subdirs concurrently, (<>) is concurrent\n            foldMap readdir dirs\n```\n\nIn
  the above examples we do not think in terms of threads, locking or\nsynchronization,
  rather we think in terms of what can run in parallel, the rest\nis taken care of
  automatically. When using `asyncly` the programmer does\nnot have to worry about
  how many threads are to be created they are\nautomatically adjusted based on the
  demand of the consumer.\n\nThe concurrency facilities provided by streamly can be
  compared with\n[OpenMP](https://en.wikipedia.org/wiki/OpenMP) and\n[Cilk](https://en.wikipedia.org/wiki/Cilk)
  but with a more declarative\nexpression.\n\n## Reactive Programming (FRP)\n\nStreamly
  is a foundation for first class reactive programming as well by virtue\nof integrating
  concurrency and streaming. See\n[AcidRain.hs](https://github.com/composewell/streamly/tree/master/examples/AcidRain.hs)\nfor
  a console based FRP game example and\n[CirclingSquare.hs](https://github.com/composewell/streamly/tree/master/examples/CirclingSquare.hs)\nfor
  an SDL based animation example.\n\n## Performance\n\n`Streamly` has best in class
  performance even though it generalizes streaming\nto concurrent composition that
  does not mean it sacrifices non-concurrent\nperformance. See\n[streaming-benchmarks](https://github.com/composewell/streaming-benchmarks)
  for\ndetailed performance comparison with regular streaming libraries and the\nexplanation
  of the benchmarks. The following graphs show a summary, the first\none measures
  how four pipeline stages in a series perform, the second one\nmeasures the performance
  of individual stream operations; in both cases the\nstream processes a million elements:\n\n![Composing
  Pipeline Stages](charts/comparative/ComposingPipelineStages.svg)\n![All Operations
  at a Glance](charts/comparative/AllOperationsataGlance.svg)\n\n## Contributing\n\nThe
  code is available under BSD-3 license\n[on github](https://github.com/composewell/streamly).
  Join the\n[gitter chat](https://gitter.im/composewell/streamly) channel for discussions.\nYou
  can find some of the\n[todo items on the github wiki](https://github.com/composewell/streamly/wiki/Things-To-Do).\nPlease
  ask on the gitter channel or [contact the maintainer directly](mailto:harendra.kumar@gmail.com)\nfor
  more details on each item. All contributions are welcome!\n\nThis library was originally
  inspired by the `transient` package authored by\nAlberto G. Corona.\n"
license-name: BSD3
