homepage: https://github.com/composewell/streamly
changelog-type: markdown
hash: e421ec35182447cc9064b09e194cc5b538890701eceec19e6026bbf53bc173b0
test-bench-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.8 && <5'
  hspec: ! '>=2.0 && <3'
  gauge: ! '>=0.2.3 && <0.3'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <3'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1.0.0 && <1.2'
  deepseq: ! '>=1.4.0 && <1.5'
  QuickCheck: ! '>=2.10 && <2.12'
  streamly: -any
maintainer: harendra.kumar@gmail.com
synopsis: Beautiful Streaming, Concurrent and Reactive Composition
changelog: ! "## 0.4.0\n\n### Breaking changes\n\n* Signatures of `zipWithM` and `zipAsyncWithM`
  have changed\n* Some functions in prelude now require an additional `Monad` constraint
  on\n  the underlying type of the stream.\n\n### Deprecations\n\n* `once` has been
  deprecated and renamed to `yieldM`\n\n### Enhancements\n\n* Add concurrency control
  primitives `maxThreads` and `maxBuffer`.\n* Significant performance improvements
  utilizing stream fusion optimizations.\n* Add `yield` to construct a singleton stream
  from a pure value\n* Add `repeat` to generate an infinite stream by repeating a
  pure value\n* Add `fromList` and `fromListM` to generate streams from lists, faster
  than\n  `fromFoldable` and `fromFoldableM`\n* Add `map` as a synonym of fmap\n*
  Add `scanlM'`, the monadic version of scanl'\n* Add `takeWhileM` and `dropWhileM`\n*
  Add `filterM`\n\n## 0.3.0\n\n### Breaking changes\n\n* Some prelude functions, to
  whom concurrency capability has been added, will\n  now require a `MonadAsync` constraint.\n\n###
  Bug Fixes\n\n* Fixed a race due to which, in a rare case, we might block indefinitely
  on\n  an MVar due to a lost wakeup.\n* Fixed an issue in adaptive concurrency. The
  issue caused us to stop creating\n  more worker threads in some cases due to a race.
  This bug would not cause any\n  functional issue but may reduce concurrency in some
  cases.\n\n### Enhancements\n* Added a concurrent lookahead stream type `Ahead`\n*
  Added `fromFoldableM` API that creates a stream from a container of monadic\n  actions\n*
  Monadic stream generation functions `consM`, `|:`, `unfoldrM`, `replicateM`,\n  `repeatM`,
  `iterateM` and `fromFoldableM` can now generate streams\n  concurrently when used
  with concurrent stream types.\n* Monad transformation functions `mapM` and `sequence`
  can now map actions\n  concurrently when used at appropriate stream types.\n* Added
  concurrent function application operators to run stages of a\n  stream processing
  function application pipeline concurrently.\n* Added `mapMaybe` and `mapMaybeM`.\n\n##
  0.2.1\n\n### Bug Fixes\n* Fixed a bug that caused some transformation ops to return
  incorrect results\n  when used with concurrent streams. The affected ops are `take`,
  `filter`,\n  `takeWhile`, `drop`, `dropWhile`, and `reverse`.\n\n## 0.2.0\n\n###
  Breaking changes\n* Changed the semantics of the Semigroup instance for `InterleavedT`,
  `AsyncT`\n  and `ParallelT`. The new semantics are as follows:\n  * For `InterleavedT`,
  `<>` operation interleaves two streams\n  * For `AsyncT`, `<>` now concurrently
  merges two streams in a left biased\n    manner using demand based concurrency.\n
  \ * For `ParallelT`, the `<>` operation now concurrently meges the two streams\n
  \   in a fairly parallel manner.\n\n  To adapt to the new changes, replace `<>`
  with `serial` wherever it is used\n  for stream types other than `StreamT`.\n\n*
  Remove the `Alternative` instance.  To adapt to this change replace any usage\n
  \ of `<|>` with `parallel` and `empty` with `nil`.\n* Stream type now defaults to
  the `SerialT` type unless explicitly specified\n  using a type combinator or a monomorphic
  type.  This change reduces puzzling\n  type errors for beginners. It includes the
  following two changes:\n  * Change the type of all stream elimination functions
  to use `SerialT`\n    instead of a polymorphic type. This makes sure that the stream
  type is\n    always fixed at all exits.\n  * Change the type combinators (e.g. `parallely`)
  to only fix the argument\n    stream type and the output stream type remains polymorphic.\n\n
  \ Stream types may have to be changed or type combinators may have to be added\n
  \ or removed to adapt to this change.\n* Change the type of `foldrM` to make it
  consistent with `foldrM` in base.\n* `async` is renamed to `mkAsync` and `async`
  is now a new API with a different\n  meaning.\n* `ZipAsync` is renamed to `ZipAsyncM`
  and `ZipAsync` is now ZipAsyncM\n  specialized to the IO Monad.\n* Remove the `MonadError`
  instance as it was not working correctly for\n  parallel compositions. Use `MonadThrow`
  instead for error propagation.\n* Remove Num/Fractional/Floating instances as they
  are not very useful. Use\n  `fmap` and `liftA2` instead.\n\n### Deprecations\n*
  Deprecate and rename the following symbols:\n    * `Streaming` to `IsStream`\n    *
  `runStreaming` to `runStream`\n    * `StreamT` to `SerialT`\n    * `InterleavedT`
  to `WSerialT`\n    * `ZipStream` to `ZipSerialM`\n    * `ZipAsync` to `ZipAsyncM`\n
  \   * `interleaving` to `wSerially`\n    * `zipping` to `zipSerially`\n    * `zippingAsync`
  to `zipAsyncly`\n    * `<=>` to `wSerial`\n    * `<|` to `async`\n    * `each` to
  `fromFoldable`\n    * `scan` to `scanx`\n    * `foldl` to `foldx`\n    * `foldlM`
  to `foldxM`\n* Deprecate the following symbols for future removal:\n    * `runStreamT`\n
  \   * `runInterleavedT`\n    * `runAsyncT`\n    * `runParallelT`\n    * `runZipStream`\n
  \   * `runZipAsync`\n\n### Enhancements\n* Add the following functions:\n    * `consM`
  and `|:` operator to construct streams from monadic actions\n    * `once` to create
  a singleton stream from a monadic action\n    * `repeatM` to construct a stream
  by repeating a monadic action\n    * `scanl'` strict left scan\n    * `foldl'` strict
  left fold\n    * `foldlM'` strict left fold with a monadic fold function\n    *
  `serial` run two streams serially one after the other\n    * `async` run two streams
  asynchronously\n    * `parallel` run two streams in parallel (replaces `<|>`)\n
  \   * `WAsyncT` stream type for BFS version of `AsyncT` composition\n* Add simpler
  stream types that are specialized to the IO monad\n* Put a bound (1500) on the output
  buffer used for asynchronous tasks\n* Put a limit (1500) on the number of threads
  used for Async and WAsync types\n\n## 0.1.2\n\n### Enhancements\n* Add `iterate`,
  `iterateM` stream operations\n\n### Bug Fixes\n* Fixed a bug that casued unexpected
  behavior when `pure` was used to inject\n  values in Applicative composition of
  `ZipStream` and `ZipAsync` types.\n\n## 0.1.1\n\n### Enhancements\n* Make `cons`
  right associative and provide an operator form `.:` for it\n* Add `null`, `tail`,
  `reverse`, `replicateM`, `scan` stream operations\n* Improve performance of some
  stream operations (`foldl`, `dropWhile`)\n\n### Bug Fixes\n* Fix the `product` operation.
  Earlier, it always returned 0 due to a bug\n* Fix the `last` operation, which returned
  `Nothing` for singleton streams\n\n## 0.1.0\n\n* Initial release\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  heaps: ! '>=0.3 && <0.4'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <2'
  lockfree-queue: ! '>=0.2.3 && <0.3'
  containers: ! '>=0.5 && <0.6'
  ghc-prim: ! '>=0.2 && <0.6'
  atomic-primops: ! '>=0.8 && <0.9'
  mtl: ! '>=2.2 && <3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.4.0'
author: Harendra Kumar
latest: '0.4.0'
description-type: markdown
description: ! "# Streamly\n\n## Stream`ing` `Concurrent`ly\n\nStreamly, short for
  streaming concurrently, provides monadic streams, with a\nsimple API, almost identical
  to standard lists, and an in-built support for\nconcurrency.  By using stream-style
  combinators on stream composition,\nstreams can be generated, merged, chained, mapped,
  zipped, and consumed\nconcurrently â€“ providing a generalized high level programming
  framework\nunifying streaming and concurrency. Controlled concurrency allows even
  infinite\nstreams to be evaluated concurrently.  Concurrency is auto scaled based
  on\nfeedback from the stream consumer.  The programmer does not have to be aware
  of\nthreads, locking or synchronization to write scalable concurrent programs.\n\nThe
  basic streaming functionality of streamly is equivalent to that provided by\nstreaming
  libraries like\n[vector](https://hackage.haskell.org/package/vector),\n[streaming](https://hackage.haskell.org/package/streaming),\n[pipes](https://hackage.haskell.org/package/pipes),
  and\n[conduit](https://hackage.haskell.org/package/conduit).\nIn addition to providing
  streaming functionality, streamly subsumes\nthe functionality of list transformer
  libraries like `pipes` or\n[list-t](https://hackage.haskell.org/package/list-t),
  and also the logic\nprogramming library [logict](https://hackage.haskell.org/package/logict).
  On\nthe concurrency side, it subsumes the functionality of the\n[async](https://hackage.haskell.org/package/async)
  package. Because it supports\nstreaming with concurrency we can write FRP applications
  similar in concept to\n[Yampa](https://hackage.haskell.org/package/Yampa) or\n[reflex](https://hackage.haskell.org/package/reflex).\n\nWhy
  use streamly?\n\n  * _Simplicity_: Simple list like streaming API, if you know how
  to use lists\n    then you know how to use streamly. This library is built with
  simplicity\n    and ease of use as a design goal.\n  * _Concurrency_: Simple, powerful,
  and scalable concurrency.  Concurrency is\n    built-in, and not intrusive, concurrent
  programs are written exactly the\n    same way as non-concurrent ones.\n  * _Generality_:
  Unifies functionality provided by several disparate packages\n    (streaming, concurrency,
  list transformer, logic programming, reactive\n    programming) in a concise API.\n
  \ * _Performance_: Streamly is designed for high performance. It employs stream\n
  \   fusion optimizations for best possible performance. Serial peformance is\n    equivalent
  to the venerable `vector` library in most cases and even better\n    in some cases.
  \ Concurrent performance is unbeatable.  See\n    [streaming-benchmarks](https://github.com/composewell/streaming-benchmarks)\n
  \   for a comparison of popular streaming libraries on micro-benchmarks.\n\nFor
  more details on streaming library ecosystem and where streamly fits in,\nplease
  see\n[streaming libraries](https://github.com/composewell/streaming-benchmarks#streaming-libraries).\nAlso,
  see the [Comparison with Existing\nPackages](https://hackage.haskell.org/package/streamly/docs/Streamly-Tutorial.html)\nsection
  in the streamly tutorial.\n\nFor more information on streamly, see:\n\n  * [Streamly.Tutorial](https://hackage.haskell.org/package/streamly/docs/Streamly-Tutorial.html)
  module in the haddock documentation for a detailed introduction\n  * [examples](https://github.com/composewell/streamly/tree/master/examples)
  directory in the package for some simple practical examples\n\n## Streaming Pipelines\n\nUnlike
  `pipes` or `conduit` and like `vector` and `streaming`, `streamly`\ncomposes stream
  data instead of stream processors (functions).  A stream is\njust like a list and
  is explicitly passed around to functions that process the\nstream.  Therefore, no
  special operator is needed to join stages in a streaming\npipeline, just the standard
  function application (`$`) or reverse function\napplication (`&`) operator is enough.
  \ Combinators are provided in\n`Streamly.Prelude` to transform or fold streams.\n\nThe
  following snippet provides a simple stream composition example that reads\nnumbers
  from stdin, prints the squares of even numbers and exits if an even\nnumber more
  than 9 is entered.\n\n```haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\nimport Data.Function ((&))\n\nmain = runStream $\n       S.repeatM getLine\n
  \    & fmap read\n     & S.filter even\n     & S.takeWhile (<= 9)\n     & fmap (\\x
  -> x * x)\n     & S.mapM print\n```\n\n## Concurrent Stream Generation\n\nMonadic
  construction and generation functions e.g. `consM`, `unfoldrM`,\n`replicateM`, `repeatM`,
  `iterateM` and `fromFoldableM` etc. work concurrently\nwhen used with appropriate
  stream type combinator (e.g. `asyncly`, `aheadly` or\n`parallely`).\n\nThe following
  code finishes in 3 seconds (6 seconds when serial):\n\n```\n> let p n = threadDelay
  (n * 1000000) >> return n\n> S.toList $ aheadly $ p 3 |: p 2 |: p 1 |: S.nil\n[3,2,1]\n\n>
  S.toList $ parallely $ p 3 |: p 2 |: p 1 |: S.nil\n[1,2,3]\n```\n\nThe following
  finishes in 10 seconds (100 seconds when serial):\n\n```\nrunStream $ asyncly $
  S.replicateM 10 $ p 10\n```\n\n## Concurrent Streaming Pipelines\n\nUse `|&` or
  `|$` to apply stream processing functions concurrently. The\nfollowing example prints
  a \"hello\" every second; if you use `&` instead of\n`|&` you will see that the
  delay doubles to 2 seconds instead because of serial\napplication.\n\n```\nmain
  = runStream $\n      S.repeatM (threadDelay 1000000 >> return \"hello\")\n   |&
  S.mapM (\\x -> threadDelay 1000000 >> putStrLn x)\n```\n\n## Mapping Concurrently\n\nWe
  can use `mapM` or `sequence` functions concurrently on a stream.\n\n```\n> let p
  n = threadDelay (n * 1000000) >> return n\n> runStream $ aheadly $ S.mapM (\\x ->
  p 1 >> print x) (serially $ repeatM (p 1))\n```\n\n## Serial and Concurrent Merging\n\nSemigroup
  and Monoid instances can be used to fold streams serially or\nconcurrently. In the
  following example we compose ten actions in the\nstream, each with a delay of 1
  to 10 seconds, respectively. Since all the\nactions are concurrent we see one output
  printed every second:\n\n``` haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\nimport Control.Concurrent (threadDelay)\n\nmain = S.toList $ parallely $ foldMap
  delay [1..10]\n where delay n = S.yieldM $ threadDelay (n * 1000000) >> print n\n```\n\nStreams
  can be combined together in many ways. We provide some examples\nbelow, see the
  tutorial for more ways. We use the following `delay`\nfunction in the examples to
  demonstrate the concurrency aspects:\n\n``` haskell\nimport Streamly\nimport qualified
  Streamly.Prelude as S\nimport Control.Concurrent\n\ndelay n = S.yieldM $ do\n    threadDelay
  (n * 1000000)\n    tid <- myThreadId\n    putStrLn (show tid ++ \": Delay \" ++
  show n)\n```\n### Serial\n\n```haskell\nmain = runStream $ delay 3 <> delay 2 <>
  delay 1\n```\n```\nThreadId 36: Delay 3\nThreadId 36: Delay 2\nThreadId 36: Delay
  1\n```\n\n### Parallel\n\n```haskell\nmain = runStream . parallely $ delay 3 <>
  delay 2 <> delay 1\n```\n```\nThreadId 42: Delay 1\nThreadId 41: Delay 2\nThreadId
  40: Delay 3\n```\n\n## Nested Loops (aka List Transformer)\n\nThe monad instance
  composes like a list monad.\n\n``` haskell\nimport Streamly\nimport qualified Streamly.Prelude
  as S\n\nloops = do\n    x <- S.fromFoldable [1,2]\n    y <- S.fromFoldable [3,4]\n
  \   S.yieldM $ putStrLn $ show (x, y)\n\nmain = runStream loops\n```\n```\n(1,3)\n(1,4)\n(2,3)\n(2,4)\n```\n\n##
  Concurrent Nested Loops\n\nTo run the above code with, lookahead style concurrency
  i.e. each iteration in\nthe loop can run run concurrently by but the results are
  presented in the same\norder as serial execution:\n\n``` haskell\nmain = runStream
  $ aheadly $ loops\n```\n\nTo run it with depth first concurrency yielding results
  asynchronously in the\nsame order as they become available (deep async composition):\n\n```
  haskell\nmain = runStream $ asyncly $ loops\n```\n\nTo run it with breadth first
  concurrency and yeilding results asynchronously\n(wide async composition):\n\n```
  haskell\nmain = runStream $ wAsyncly $ loops\n```\n\nThe above streams provide lazy/demand-driven
  concurrency which is automatically\nscaled as per demand and is controlled/bounded
  so that it can be used on\ninfinite streams. The following combinator provides strict,
  unbounded\nconcurrency irrespective of demand:\n\n``` haskell\nmain = runStream
  $ parallely $ loops\n```\n\nTo run it serially but interleaving the outer and inner
  loop iterations\n(breadth first serial):\n\n``` haskell\nmain = runStream $ wSerially
  $ loops\n```\n\n## Magical Concurrency\n\nStreams can perform semigroup (<>) and
  monadic bind (>>=) operations\nconcurrently using combinators like `asyncly`, `parallelly`.
  For example,\nto concurrently generate squares of a stream of numbers and then concurrently\nsum
  the square roots of all combinations of two streams:\n\n``` haskell\nimport Streamly\nimport
  qualified Streamly.Prelude as S\n\nmain = do\n    s <- S.sum $ asyncly $ do\n        --
  Each square is performed concurrently, (<>) is concurrent\n        x2 <- foldMap
  (\\x -> return $ x * x) [1..100]\n        y2 <- foldMap (\\y -> return $ y * y)
  [1..100]\n        -- Each addition is performed concurrently, monadic bind is concurrent\n
  \       return $ sqrt (x2 + y2)\n    print s\n```\n\nOf course, the actions running
  in parallel could be arbitrary IO actions.  For\nexample, to concurrently list the
  contents of a directory tree recursively:\n\n``` haskell\nimport Path.IO (listDir,
  getCurrentDir)\nimport Streamly\nimport qualified Streamly.Prelude as S\n\nmain
  = runStream $ aheadly $ getCurrentDir >>= readdir\n   where readdir d = do\n            (dirs,
  files) <- S.yieldM $ listDir d\n            S.yieldM $ mapM_ putStrLn $ map show
  files\n            -- read the subdirs concurrently, (<>) is concurrent\n            foldMap
  readdir dirs\n```\n\nIn the above examples we do not think in terms of threads,
  locking or\nsynchronization, rather we think in terms of what can run in parallel,
  the rest\nis taken care of automatically. When using `aheadly` the programmer does\nnot
  have to worry about how many threads are to be created, they are\nautomatically
  adjusted based on the demand of the consumer.\n\nThe concurrency facilities provided
  by streamly can be compared with\n[OpenMP](https://en.wikipedia.org/wiki/OpenMP)
  and\n[Cilk](https://en.wikipedia.org/wiki/Cilk) but with a more declarative\nexpression.\n\n##
  Reactive Programming (FRP)\n\nStreamly is a foundation for first class reactive
  programming as well by virtue\nof integrating concurrency and streaming. See\n[AcidRain.hs](https://github.com/composewell/streamly/tree/master/examples/AcidRain.hs)\nfor
  a console based FRP game example and\n[CirclingSquare.hs](https://github.com/composewell/streamly/tree/master/examples/CirclingSquare.hs)\nfor
  an SDL based animation example.\n\n## Performance\n\n`Streamly` has best in class
  performance even though it generalizes streaming\nto concurrent composition that
  does not mean it sacrifices non-concurrent\nperformance. See\n[streaming-benchmarks](https://github.com/composewell/streaming-benchmarks)
  for\ndetailed performance comparison with regular streaming libraries and the\nexplanation
  of the benchmarks. The following graphs show a summary, the first\none measures
  how four pipeline stages in a series perform, the second one\nmeasures the performance
  of individual stream operations; in both cases the\nstream processes a million elements:\n\n![Composing
  Pipeline Stages](charts/comparative/ComposingPipelineStages.svg)\n![All Operations
  at a Glance](charts/comparative/AllOperationsataGlance.svg)\n\n## Contributing\n\nThe
  code is available under BSD-3 license\n[on github](https://github.com/composewell/streamly).
  Join the\n[gitter chat](https://gitter.im/composewell/streamly) channel for discussions.\nYou
  can find some of the\n[todo items on the github wiki](https://github.com/composewell/streamly/wiki/Things-To-Do).\nPlease
  ask on the gitter channel or [contact the maintainer directly](mailto:harendra.kumar@gmail.com)\nfor
  more details on each item. All contributions are welcome!\n\nThis library was originally
  inspired by the `transient` package authored by\nAlberto G. Corona.\n"
license-name: BSD3
