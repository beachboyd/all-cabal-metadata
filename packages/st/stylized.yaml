homepage: http://patch-tag.com/r/lucid/Stylized
changelog-type: ''
hash: f06fdb215f24d77d130c3a5d02b1aab26d081a482a2977413271f75d9254d7c9
test-bench-deps: {}
maintainer: luca.pwns@gmail.com
synopsis: Ways to output stylized text on ANSI consoles.
changelog: ''
basic-deps:
  base: ! '>=4.1 && <4.2'
  ansi-terminal: ! '>=0.5 && <0.6'
all-versions:
- 0.1.2
- 0.1.3
author: Luca Molari
latest: 0.1.3
description-type: text
description: ! "{-\n\n.: Sample usage :.\n  :------------:\n\n  You can run this README
  with: `runhaskell README`\n\n-}\n\n\n-- 0) import stylized module\n\nimport System.Console.ANSI.Stylized\n\n\n--
  1) a data type to 'tag' messages:\n\ndata MsgType\n  = Info\n  | Warning\n  | Error\n
  \ deriving (Enum)\n\n\n-- 2) a function from tags to styles:\n\nstylemap :: MsgType
  -> Style\nstylemap Info    = ((Dull, Green), (NormalIntensity, NoUnderline))\nstylemap
  Warning = ((Dull, Yellow), (NormalIntensity, NoUnderline))\nstylemap Error   = ((Dull,
  Red), (NormalIntensity, NoUnderline))\n\n\n-- 3) a logging function built from 'T'
  ending functions (i.e. putLnT and putT)\n\nmyLogLn msg = putLnT stylemap msg >>
  resetGR\nmyLog msg = putT stylemap msg >> resetGR\n\n\n-- 4) some example messages:\n\nmsgs1
  = [\n  (Info, \"Info Message\\n\"),\n  (Warning, \"Warning Message\\n\"),\n  (Error,
  \"Error Message\") ]\n\nmsgs2 = zip (cycle $ enumFrom Info) [\"some \", \"random
  \", \"messages \"]\n\n\n-- 5) print:\n\nmain = do\n  myLog   msgs2\n  myLogLn msgs2\n
  \ myLogLn msgs1\n\n\n-- 6) you can always use S-ending functions ('curried' or 'uncurried'
  ones)\n\n  putStrLnS ((Dull, Blue), (NormalIntensity, SingleUnderline)) \"blue underlined\"\n
  \ putLnS\n    [ (((Vivid, Yellow), (NormalIntensity, NoUnderline)), \"vivid yellow
  \")\n    , (((Vivid, Blue), (NormalIntensity, NoUnderline)), \"vivid blue\")\n    ]\n\n\n--
  7) Remember to reset (if you want to)!\n\n  resetGR\n"
license-name: LicenseRef-GPL
