homepage: https://github.com/jeffreyrosenbluth/static-canvas
changelog-type: ''
hash: 876ae56659dd863acd9c59a8cdebe639a7e12aa3bebbd26eacbd83547e8975fc
test-bench-deps: {}
maintainer: jeffrey.rosenbluth@gmail.com
synopsis: DSL to generate HTML5 Canvas javascript.
changelog: ''
basic-deps:
  free: ! '>=4.9 && <5.1'
  base: ! '>=4.5 && <4.12'
  text: ! '>=0.11 && <1.3'
  double-conversion: ! '>=2.0 && <2.1'
  mtl: ! '>=2.1 && <2.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
author: Jeffrey Rosenbluth
latest: 0.2.0.3
description-type: markdown
description: ! "# static-canvas [![Hackage](https://img.shields.io/hackage/v/static-canvas.svg?style=flat)](https://hackage.haskell.org/package/static-canvas)\nA
  simple DSL for writing HTML5 Canvas in haskell and converting it\nto Javascript.
  By static we mean non-interactive, so the parts of\nthe Canvas API that need to
  query the browser for run time information\nlike `isPointInPath(x, y)` are not included.
  This turns out to be\na surprisingly small part of HTML5 Canvas.\n\nHere is Hello
  static-canvas with fancy text.\n\n![Text](http://i.imgur.com/HGjSpJ6.png)\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Graphics.Static\nimport
  Graphics.Static.ColorNames\n\ntext :: CanvasFree ()\ntext = do\n  font \"italic
  60pt Calibri\"\n  lineWidth 6\n  strokeStyle blue\n  fillStyle goldenrod\n  textBaseline
  TextBaselineMiddle\n  strokeText \"Hello\" 150 100 \n  fillText \"Hello World!\"
  150 100\n\nmain :: IO ()\nmain = writeCanvasDoc \"Text.html\" 600 400 text\n```\nThere
  are plenty of examples in [Examples](https://github.com/jeffreyrosenbluth/static-canvas/tree/master/examples).\nHere
  is one more showing how to use pattern to fill a rectangle.\n\n![line](http://i.imgur.com/RRvyXyv.png)\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Graphics.Static\n\npattern
  :: CanvasFree ()\npattern = do\n  img <- newImage \"tile.png\"\n  onImageLoad img
  $ do\n    ptn <- createPattern img Repeat\n    rect 0 0 400 400\n    fillStyle ptn\n
  \   fill\n\nmain :: IO ()\nmain = writeCanvasDoc \"Pattern.html\" 400 400 pattern\n```\n"
license-name: BSD-3-Clause
