homepage: ''
changelog-type: markdown
hash: dd3d662b2391fbadeb60b9a5ef25e26d6895871ad4734096e2c6f252df9e7d04
test-bench-deps:
  streaming: ! '>=0.2.0.0 && <0.3'
  streaming-commons: ! '>=0.2.1.0'
  base: ! '>=4.10 && <5'
  filepath: ! '>=1.3'
  doctest: ! '>=0.16.0'
  containers: ! '>=0.5.0.1'
  tasty-hunit: ! '>=0.9.2'
  streaming-bracketed: -any
  tasty: ! '>=0.10.1.1'
  directory: ! '>=1.3.1.0'
maintainer: diaz_carrete@yahoo.com
synopsis: A resource management decorator for "streaming".
changelog: ''
basic-deps:
  streaming: ! '>=0.2.0.0 && <0.3'
  base: ! '>=4.10 && <5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: daniel
latest: '0.1.0.1'
description-type: markdown
description: ! "# streaming-bracketed\n\n[![Build Status](https://travis-ci.org/danidiaz/streaming-bracketed.svg?branch=master)](https://travis-ci.org/danidiaz/streaming-bracketed)\n\n##
  What's this?\n\nA resource management \"decorator\" for the `Stream` type from\n[streaming](http://hackage.haskell.org/package/streaming).
  \ \n\nThe idea is that the `Bracketed` type represents a `Stream` which might have\nsome
  finalizers that will be triggered when we reach a given point in the\nstream.\n\nBy
  being careful about how we lift operations to work on `Bracketed` streams,\nwe can
  ensure that finalizers are promptly called even with operations like\n`take`.\n\n`Bracketed`
  streams are ultimately consumed by using a continuation.\n\n## Differences with
  resourcet\n\n[resourcet](http://hackage.haskell.org/package/resourcet) is a widely
  used\nlibrary for resource handling. It provides a monad transformer over IO that\nkeeps
  track of registered resources and ensures proper cleanup.\n\nThe main differences
  with the present library are:\n\n- This library only works on `Stream`s from streaming.\n\n-
  `Bracketed` sits above the streaming monad, not below like `ResourceT`.\n\n- This
  library aims to provide smarter handling of stream functions like\n  `take`, without
  too much hassle.\n\n- In this library finalizer scopes are nested, unlike `ResourceT`
  which allows\n  arbitrary interleavings. \n\n## Doubts\n\n- Lifting functions like
  `splitAt` might cause problems if we try to use the\n  rest of the stream.\n\n##
  Motivation\n\nFrom the\n[CHANGELOG](http://hackage.haskell.org/package/streaming-0.2.1.0/changelog)
  of\nthe [streaming](http://hackage.haskell.org/package/streaming) package:\n\n    Remove
  bracketStream, MonadCatch instance, and everything dealing with\n    ResourceT.
  All of these things of sort of broken for Stream since there is no\n    guarantee
  of linear consumption (functions like take can prevent finalizers\n    from running).\n\n[One
  Github issue](https://github.com/haskell-streaming/streaming/issues/52).\n\n[Another
  one](https://github.com/haskell-streaming/streaming-with/issues/2).\n\n[Streaming
  libs exercise/challenge](https://twitter.com/DiazCarrete/status/1016073374458671104):\n\n
  \   Given a list [(Filepath,Int,Int)] of files and line ranges, create a stream\n
  \   of lines belonging to the concatenated ranges.\n\n    Prompt release of file
  handles is required. resource-handling monads and\n    \"withXXX\"-style functions
  are allowed.\n\n"
license-name: MIT
