homepage: https://github.com/tfausak/strive#readme
changelog-type: markdown
hash: 7d13da79f7efe860d168e531821dd512b583c2b6ba2bc23fe3c37cbe126ef83f
test-bench-deps:
  http-client: ! '>=0.4.31 && <0.6'
  bytestring: ! '>=0.10.8 && <0.11'
  strive: -any
  base: ! '>=4.9.0 && <4.13'
  time: ! '>=1.6.0 && <1.9'
  text: ! '>=1.2.2 && <1.3'
  markdown-unlit: ! '>=0.4.0 && <0.6'
  data-default: ! '>=0.7.1 && <0.8'
  http-client-tls: ! '>=0.2.4 && <0.4'
  transformers: ! '>=0.5.2 && <0.6'
  gpolyline: ! '>=0.1.0 && <0.2'
  http-types: ! '>=0.9.1 && <0.13'
  aeson: ! '>=0.11.2 && <0.12 || >=1.0.2 && <1.5'
  template-haskell: ! '>=2.11.0 && <2.15'
maintainer: Taylor Fausak
synopsis: A client for the Strava V3 API.
changelog: ! '# Change log


  Strive uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/tfausak/strive/releases

'
basic-deps:
  http-client: ! '>=0.4.31 && <0.6'
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.9.0 && <4.13'
  time: ! '>=1.6.0 && <1.9'
  text: ! '>=1.2.2 && <1.3'
  data-default: ! '>=0.7.1 && <0.8'
  http-client-tls: ! '>=0.2.4 && <0.4'
  transformers: ! '>=0.5.2 && <0.6'
  gpolyline: ! '>=0.1.0 && <0.2'
  http-types: ! '>=0.9.1 && <0.13'
  aeson: ! '>=0.11.2 && <0.12 || >=1.0.2 && <1.5'
  template-haskell: ! '>=2.11.0 && <2.15'
all-versions:
- 0.5.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.7.0
- 0.7.1
- 0.8.0
- 1.0.0
- 1.0.1
- 2.0.0
- 2.0.1
- 2.1.0
- 2.2.0
- 2.2.1
- 2.2.2
- 3.0.0
- 3.0.1
- 3.0.2
- 3.0.3
- 3.0.4
- 4.0.0
- 4.0.1
- 4.0.2
- 4.0.3
- 4.1.0
- 5.0.0
- 5.0.1
- 5.0.2
- 5.0.3
- 5.0.4
- 5.0.5
- 5.0.6
- 5.0.7
author: ''
latest: 5.0.7
description-type: markdown
description: ! "# [Strive][]\n\n[![Version badge][]][version]\n[![Build badge][]][build]\n\nStrive
  is a Haskell client for the [Strava V3 API][].\n\n---\n\n- [Installation](#installation)\n-
  [Usage](#usage)\n  - [Authentication](#authentication)\n    - [Request access](#request-access)\n
  \   - [Token exchange](#token-exchange)\n    - [Deauthorization](#deauthorization)\n
  \ - [Athletes](#athletes)\n    - [Retrieve current athlete](#retrieve-current-athlete)\n
  \   - [Retrieve another athlete](#retrieve-another-athlete)\n    - [Update current
  athlete](#update-current-athlete)\n    - [Totals and stats](#totals-and-stats)\n
  \   - [List athlete K/QOMs/CRs](#list-athlete-kqomscrs)\n  - [Friends and followers](#friends-and-followers)\n
  \   - [List athlete friends](#list-athlete-friends)\n    - [List athlete followers](#list-athlete-followers)\n
  \   - [List both following](#list-both-following)\n  - [Activities](#activities)\n
  \   - [Create an activity](#create-an-activity)\n    - [Retrieve an activity](#retrieve-an-activity)\n
  \   - [Update an activity](#update-an-activity)\n    - [Delete an activity](#delete-an-activity)\n
  \   - [List athlete activities](#list-athlete-activities)\n    - [List related activities](#list-related-activities)\n
  \   - [List friends' activities](#list-friends-activities)\n    - [List activity
  zones](#list-activity-zones)\n    - [List activity laps](#list-activity-laps)\n
  \ - [Comments](#comments)\n    - [List activity comments](#list-activity-comments)\n
  \ - [Kudos](#kudos)\n    - [List activity kudoers](#list-activity-kudoers)\n  -
  [Photos](#photos)\n    - [List activity photos](#list-activity-photos)\n  - [Clubs](#clubs)\n
  \   - [Retrieve a club](#retrieve-a-club)\n    - [List athlete clubs](#list-athlete-clubs)\n
  \   - [List club members](#list-club-members)\n    - [List club activities](#list-club-activities)\n
  \   - [Join a club](#join-a-club)\n    - [Leave a club](#leave-a-club)\n  - [Gear](#gear)\n
  \   - [Retrieve gear](#retrieve-gear)\n  - [Segments](#segments)\n    - [Retrieve
  a segment](#retrieve-a-segment)\n    - [List starred segments](#list-starred-segments)\n
  \   - [List efforts](#list-efforts)\n    - [Segment leaderboard](#segment-leaderboard)\n
  \   - [Segment explorer](#segment-explorer)\n  - [Segment efforts](#segment-efforts)\n
  \   - [Retrieve a segment effort](#retrieve-a-segment-effort)\n  - [Streams](#streams)\n
  \   - [Retrieve activity streams](#retrieve-activity-streams)\n    - [Retrieve effort
  streams](#retrieve-effort-streams)\n    - [Retrieve segment streams](#retrieve-segment-streams)\n
  \ - [Uploads](#uploads)\n    - [Upload an activity](#upload-an-activity)\n    -
  [Check upload status](#check-upload-status)\n\n## Installation\n\nAdd it to your
  Cabal file:\n\n~~~\nbuild-depends:\n  strive\n~~~\n\nOr install it manually:\n\n~~~
  {.sh}\n$ cabal update\n$ cabal install strive\n~~~\n\nStrive uses [Semantic Versioning][].
  See [the change log][] for a detailed list\nof changes.\n\n## Usage\n\nTo use the
  API, you'll need an access token. Once you have that, create a new\nclient using
  the default HTTP manager.\n\n~~~ {.haskell .ignore}\n{-# LANGUAGE OverloadedStrings
  #-}\nimport Strive\nlet token = \"...\"\nclient <- buildClient (Just token)\n~~~\n\nMost
  types implement lenses for their fields. Lenses are preferred over directly\naccessing
  the fields. For instance, instead of doing this:\n\n~~~ {.haskell .ignore}\nclient_accessToken
  (client { client_accessToken = \"record token\" })\n-- \"record token\"\n~~~\n\nDo
  this:\n\n~~~ {.haskell .ignore}\nget accessToken (set accessToken \"lens token\"
  client)\n-- \"lens token\"\n~~~\n\n<!--\n\nThis setup is required for these examples
  to work, but it isn't required for a\nreader of this file to understand what's going
  on.\n\n~~~ {.haskell}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.ByteString.Char8
  (pack)\nimport Data.Time.Calendar (fromGregorian)\nimport Data.Time.Clock (UTCTime
  (UTCTime))\nimport Strive\nimport System.Exit (exitSuccess)\n\nmain :: IO ()\nmain
  = do\n  _ <- exitSuccess\n  client <- buildClient (Just \"token\")\n~~~\n\n-->\n\n###
  [Authentication](http://strava.github.io/api/v3/oauth/)\n\n#### [Request access](http://strava.github.io/api/v3/oauth/#get-authorize)\n\n~~~
  {.haskell}\n  let authorizeUrl = buildAuthorizeUrl 1790 \"http://localhost\" $ with\n
  \       [ set approvalPrompt False\n        , set privateScope True\n        , set
  writeScope True\n        , set state \"...\"\n        ]\n  print (authorizeUrl ::
  String)\n~~~\n\n#### [Token exchange](http://strava.github.io/api/v3/oauth/#post-token)\n\n~~~
  {.haskell}\n  tokenExchangeResponse <- exchangeToken 1790 \"secret\" \"code\"\n
  \ print (tokenExchangeResponse :: Result TokenExchangeResponse)\n~~~\n\n#### [Deauthorization](http://strava.github.io/api/v3/oauth/#deauthorize)\n\n~~~
  {.haskell}\n  deauthorizationResponse <- deauthorize client\n  print (deauthorizationResponse
  :: Result DeauthorizationResponse)\n~~~\n\n### [Athletes](http://strava.github.io/api/v3/athlete/)\n\n####
  [Retrieve current athlete](http://strava.github.io/api/v3/athlete/#get-details)\n\n~~~
  {.haskell}\n  currentAthlete <- getCurrentAthlete client\n  print (currentAthlete
  :: Result AthleteDetailed)\n~~~\n\n#### [Retrieve another athlete](http://strava.github.io/api/v3/athlete/#get-another-details)\n\n~~~
  {.haskell}\n  anotherAthlete <- getAthlete client 65516\n  print (anotherAthlete
  :: Result AthleteSummary)\n~~~\n\n#### [Update current athlete](http://strava.github.io/api/v3/athlete/#update)\n\n~~~
  {.haskell}\n  updatedAthlete <- updateCurrentAthlete client $ with\n    [ set city
  (Just \"Dallas\")\n    , set state (Just \"Texas\")\n    , set country (Just \"United
  States\")\n    , set sex (Just Male)\n    , set weight (Just 72.57)\n    ]\n  print
  (updatedAthlete :: Result AthleteDetailed)\n~~~\n\n#### [Totals and stats](http://strava.github.io/api/v3/athlete/#stats)\n\n~~~
  {.haskell}\n  athleteStats <- getAthleteStats client 65516\n  print (athleteStats
  :: Result AthleteStats)\n~~~\n\n#### [List athlete K/QOMs/CRs](http://strava.github.io/api/v3/athlete/#koms)\n\n~~~
  {.haskell}\n  athleteCrs <- getAthleteCrs client 65516 $ with\n    [ set page 1\n
  \   , set perPage 2\n    ]\n  print (athleteCrs :: Result [EffortDetailed])\n~~~\n\n###
  [Friends and followers](http://strava.github.io/api/v3/follow/)\n\n#### [List athlete
  friends](http://strava.github.io/api/v3/follow/#friends)\n\n~~~ {.haskell}\n  currentFriends
  <- getCurrentFriends client $ with\n    [ set page 1\n    , set perPage 2\n    ]\n
  \ print (currentFriends :: Result [AthleteSummary])\n~~~\n\n~~~ {.haskell}\n  friends
  <- getFriends client 65516 $ with\n    [ set page 1\n    , set perPage 2\n    ]\n
  \ print (friends :: Result [AthleteSummary])\n~~~\n\n#### [List athlete followers](http://strava.github.io/api/v3/follow/#followers)\n\n~~~
  {.haskell}\n  currentFollowers <- getCurrentFollowers client $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (currentFollowers :: Result [AthleteSummary])\n~~~\n\n~~~
  {.haskell}\n  followers <- getFollowers client 65516 $ with\n    [ set page 1\n
  \   , set perPage 2\n    ]\n  print (followers :: Result [AthleteSummary])\n~~~\n\n####
  [List both following](http://strava.github.io/api/v3/follow/#both)\n\n~~~ {.haskell}\n
  \ commonFriends <- getCommonFriends client 65516 $ with\n    [ set page 1\n    ,
  set perPage 2\n    ]\n  print (commonFriends :: Result [AthleteSummary])\n~~~\n\n###
  [Activities](http://strava.github.io/api/v3/activities/)\n\n#### [Create an activity](http://strava.github.io/api/v3/activities/#create)\n\n~~~
  {.haskell}\n  createdActivity <- createActivity client \"An Example\" Run (UTCTime
  (fromGregorian 1970 0 0) 0) 10 $ with\n    [ set description (Just \"...\")\n    ,
  set distance (Just 100.0)\n    ]\n  print (createdActivity :: Result ActivityDetailed)\n~~~\n\n####
  [Retrieve an activity](http://strava.github.io/api/v3/activities/#get-details)\n\n~~~
  {.haskell}\n  activity <- getActivity client 141273622 $ with\n    [ set allEfforts
  True\n    ]\n  print (activity :: Result ActivitySummary)\n~~~\n\n#### [Update an
  activity](http://strava.github.io/api/v3/activities/#put-updates)\n\n~~~ {.haskell}\n
  \ updatedActivity <- updateActivity client 141273622 $ with\n    [ set name (Just
  \"WedEx Pit Stop\")\n    , set type_ (Just Ride)\n    , set private (Just False)\n
  \   , set commute (Just True)\n    , set trainer (Just False)\n    , set gearId
  (Just \"b387882\")\n    , set description Nothing\n    ]\n  print (updatedActivity
  :: Result ActivityDetailed)\n~~~\n\n#### [Delete an activity](http://strava.github.io/api/v3/activities/#delete)\n\n~~~
  {.haskell}\n  deletedActivity <- deleteActivity client 162674281\n  print (deletedActivity
  :: Result ())\n~~~\n\n#### [List athlete activities](http://strava.github.io/api/v3/activities/#get-activities)\n\n~~~
  {.haskell}\n  currentActivities <- getCurrentActivities client $ with\n    [ set
  before (Just (UTCTime (fromGregorian 1970 0 0) 0))\n    , set after (Just (UTCTime
  (fromGregorian 1970 0 0) 0))\n    , set page 1\n    , set perPage 2\n    ]\n  print
  (currentActivities :: Result [ActivitySummary])\n~~~\n\n#### [List related activities](http://strava.github.io/api/v3/activities/#get-related)\n\n~~~
  {.haskell}\n  relatedActivities <- getRelatedActivities client 141273622 $ with\n
  \   [ set page 1\n    , set perPage 2\n    ]\n  print (relatedActivities :: Result
  [ActivitySummary])\n~~~\n\n#### [List friends' activities](http://strava.github.io/api/v3/activities/#get-feed)\n\n~~~
  {.haskell}\n  feed <- getFeed client $ with\n    [ set page 1\n    , set perPage
  2\n    ]\n  print (feed :: Result [ActivitySummary])\n~~~\n\n#### [List activity
  zones](http://strava.github.io/api/v3/activities/#zones)\n\n~~~ {.haskell}\n  activityZones
  <- getActivityZones client 141273622\n  print (activityZones :: Result [ActivityZoneDetailed])\n~~~\n\n####
  [List activity laps](http://strava.github.io/api/v3/activities/#laps)\n\n~~~ {.haskell}\n
  \ activityLaps <- getActivityLaps client 141273622\n  print (activityLaps :: Result
  [ActivityLapSummary])\n~~~\n\n### [Comments](http://strava.github.io/api/v3/comments/)\n\n####
  [List activity comments](http://strava.github.io/api/v3/comments/#list)\n\n~~~ {.haskell}\n
  \ activityComments <- getActivityComments client 90112360 $ with\n    [ set markdown
  True\n    , set page 1\n    , set perPage 2\n    ]\n  print (activityComments ::
  Result [CommentSummary])\n~~~\n\n### [Kudos](http://strava.github.io/api/v3/kudos/)\n\n####
  [List activity kudoers](http://strava.github.io/api/v3/kudos/#list)\n\n~~~ {.haskell}\n
  \ activityKudoers <- getActivityKudoers client 141273622 $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (activityKudoers :: Result [AthleteSummary])\n~~~\n\n###
  [Photos](http://strava.github.io/api/v3/photos/)\n\n#### [List activity photos](http://strava.github.io/api/v3/photos/#list)\n\n~~~
  {.haskell}\n  activityPhotos <- getActivityPhotos client 141273622\n  print (activityPhotos
  :: Result [PhotoSummary])\n~~~\n\n### [Clubs](http://strava.github.io/api/v3/clubs/)\n\n####
  [Retrieve a club](http://strava.github.io/api/v3/clubs/#get-details)\n\n~~~ {.haskell}\n
  \ club <- getClub client 11193\n  print (club :: Result ClubDetailed)\n~~~\n\n####
  [List athlete clubs](http://strava.github.io/api/v3/clubs/#get-athletes)\n\n~~~
  {.haskell}\n  currentClubs <- getCurrentClubs client\n  print (currentClubs :: Result
  [ClubSummary])\n~~~\n\n#### [List club members](http://strava.github.io/api/v3/clubs/#get-members)\n\n~~~
  {.haskell}\n  clubMembers <- getClubMembers client 11193 $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (clubMembers :: Result [AthleteSummary])\n~~~\n\n####
  [List club activities](http://strava.github.io/api/v3/clubs/#get-activities)\n\n~~~
  {.haskell}\n  clubActivities <- getClubActivities client 11193 $ with\n    [ set
  page 1\n    , set perPage 2\n    ]\n  print (clubActivities :: Result [ActivitySummary])\n~~~\n\n####
  [Join a club](http://strava.github.io/api/v3/clubs/#join)\n\n~~~ {.haskell}\n  joinedClub
  <- joinClub client 165\n  print (joinedClub :: Result ())\n~~~\n\n#### [Leave a
  club](http://strava.github.io/api/v3/clubs/#leave)\n\n~~~ {.haskell}\n  leftClub
  <- leaveClub client 165\n  print (leftClub :: Result ())\n~~~\n\n### [Gear](http://strava.github.io/api/v3/gear/)\n\n####
  [Retrieve gear](http://strava.github.io/api/v3/gear/#show)\n\n~~~ {.haskell}\n  theGear
  <- getGear client \"b387855\"\n  print (theGear :: Result GearDetailed)\n~~~\n\n###
  [Segments](http://strava.github.io/api/v3/segments/)\n\n#### [Retrieve a segment](http://strava.github.io/api/v3/segments/#retrieve)\n\n~~~
  {.haskell}\n  theSegment <- getSegment client 4773104\n  print (theSegment :: Result
  SegmentDetailed)\n~~~\n\n#### [List starred segments](http://strava.github.io/api/v3/segments/#starred)\n\n~~~
  {.haskell}\n  starredSegments <- getStarredSegments client $ with\n    [ set page
  1\n    , set perPage 2\n    ]\n  print (starredSegments :: Result [SegmentSummary])\n~~~\n\n####
  [List efforts](http://strava.github.io/api/v3/segments/#efforts)\n\n~~~ {.haskell}\n
  \ theSegmentEfforts <- getSegmentEfforts client 4773104 $ with\n    [ set athleteId
  (Just 65516)\n    , set range (Just ((UTCTime (fromGregorian 1970 0 0) 0), (UTCTime
  (fromGregorian 1970 0 0) 0)))\n    , set page 1\n    , set perPage 2\n    ]\n  print
  (theSegmentEfforts :: Result [EffortDetailed])\n~~~\n\n#### [Segment leaderboard](http://strava.github.io/api/v3/segments/#leaderboard)\n\n~~~
  {.haskell}\n  segmentLeaderboardResponse <- getSegmentLeaderboard client 4773104
  $ with\n    [ set gender (Just Male)\n    , set ageGroup (Just Ages0To24)\n    ,
  set weightClass (Just Kilograms65To74)\n    , set following (Just True)\n    , set
  clubId (Just 11193)\n    , set dateRange (Just \"this_year\")\n    , set contextEntries
  (Just 15)\n    , set page 1\n    , set perPage 2\n    ]\n  print (segmentLeaderboardResponse
  :: Result SegmentLeaderboardResponse)\n~~~\n\n#### [Segment explorer](http://strava.github.io/api/v3/segments/#explore)\n\n~~~
  {.haskell}\n  segmentExplorerResponse <- exploreSegments client (32.0, -96.0, 33.0,
  -95.0) $ with\n    [ set activityType Riding\n    , set minCat 0\n    , set maxCat
  5\n    ]\n  print (segmentExplorerResponse :: Result SegmentExplorerResponse)\n~~~\n\n###
  [Segment efforts](http://strava.github.io/api/v3/efforts/)\n\n#### [Retrieve a segment
  effort](http://strava.github.io/api/v3/efforts/#retrieve)\n\n~~~ {.haskell}\n  segmentEffort
  <- getSegmentEffort client 1595370098\n  print (segmentEffort :: Result EffortDetailed)\n~~~\n\n###
  [Streams](http://strava.github.io/api/v3/streams/)\n\n#### [Retrieve activity streams](http://strava.github.io/api/v3/streams/#activity)\n\n~~~
  {.haskell}\n  activityStreams <- getActivityStreams client 141273622 [LatlngStream,
  WattsStream] $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n
  \   ]\n  print (activityStreams :: Result [StreamDetailed])\n~~~\n\n#### [Retrieve
  effort streams](http://strava.github.io/api/v3/streams/#effort)\n\n~~~ {.haskell}\n
  \ effortStreams <- getEffortStreams client 1595370098 [LatlngStream, WattsStream]
  $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n    ]\n  print
  (effortStreams :: Result [StreamDetailed])\n~~~\n\n#### [Retrieve segment streams](http://strava.github.io/api/v3/streams/#segment)\n\n~~~
  {.haskell}\n  segmentStreams <- getSegmentStreams client 4773104 [LatlngStream,
  WattsStream] $ with\n    [ set resolution (Just Low)\n    , set seriesType Time\n
  \   ]\n  print (segmentStreams :: Result [StreamDetailed])\n~~~\n\n### [Uploads](http://strava.github.io/api/v3/uploads/)\n\n####
  [Upload an activity](http://strava.github.io/api/v3/uploads/#post-file)\n\n~~~ {.haskell}\n
  \ uploadedActivity <- uploadActivity client (pack \"...\") \"gpx.gz\" $ with\n    [
  set activityType (Just Ride)\n    , set name (Just \"An Example\")\n    , set description
  (Just \"...\")\n    , set private True\n    , set trainer False\n    , set externalId
  (Just \"...\")\n    ]\n  print (uploadedActivity :: Result UploadStatus)\n~~~\n\n####
  [Check upload status](http://strava.github.io/api/v3/uploads/#get-status)\n\n~~~
  {.haskell}\n  upload <- getUpload client 16486788\n  print (upload :: Result UploadStatus)\n~~~\n\n[Strive]:
  http://taylor.fausak.me/strive/\n[Version badge]: https://www.stackage.org/package/strive/badge/nightly?label=version\n[version]:
  https://www.stackage.org/package/strive\n[Build badge]: https://travis-ci.org/tfausak/strive.svg?branch=master\n[build]:
  https://travis-ci.org/tfausak/strive\n[Strava V3 API]: http://strava.github.io/api/\n[Semantic
  Versioning]: http://semver.org/spec/v2.0.0.html\n[the change log]: CHANGELOG.md\n"
license-name: MIT
