homepage: https://github.com/shlok/streamly-archive#readme
changelog-type: markdown
hash: 3917089a8fa388aaaf84e134b5fa56d468549ec25dc5b8a1b7eb1e5a618d4d93
test-bench-deps:
  bytestring: '>=0.10 && <0.11'
  base: '>=4.7 && <5'
  filepath: '>=1.4.2.1 && <1.5'
  streamly-archive: ==0.0.1
  tar: '>=0.5.1.1 && <0.6'
  cryptonite: '>=0.26'
  zlib: '>=0.6.2.1 && <0.7'
  tasty-quickcheck: '>=0.10.1.1 && <0.11'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  temporary: '>=1.3 && <1.4'
  tasty: '>=1.2.3 && <1.3'
  QuickCheck: '>=2.13.2 && <2.14'
  streamly: '>=0.7 && <0.8'
  directory: '>=1.3.6.0 && <1.4'
maintainer: sd-haskell@quant.is
synopsis: Stream data from archives using the streamly library.
changelog: |
  # Changelog for streamly-archive

  ## Unreleased changes
basic-deps:
  bytestring: '>=0.10 && <0.11'
  base: '>=4.7 && <5'
  streamly: '>=0.7 && <0.8'
all-versions:
- 0.0.1
author: Shlok Datye
latest: 0.0.1
description-type: markdown
description: |
  # streamly-archive

  Stream data from archives (tar, tar.gz, zip, or any other format [supported by libarchive](https://github.com/libarchive/libarchive/wiki/LibarchiveFormats)) using the Haskell [streamly](https://hackage.haskell.org/package/streamly) library.

  ## Requirements

  Install libarchive on your system.

  * Debian Linux: `sudo apt-get install libarchive-dev`.
  * macOS: `brew install libarchive`.

  ## Quick start

  ```haskell
  {-# LANGUAGE ScopedTypeVariables, TypeApplications #-}

  module Main where

  import Crypto.Hash (hashFinalize, hashInit, hashUpdate)
  import Crypto.Hash.Algorithms (SHA256)
  import Data.ByteString (ByteString)
  import Data.Either (isRight)
  import Data.Function ((&))
  import Data.Maybe (fromJust, fromMaybe)
  import Data.Void (Void)
  import Streamly.External.Archive (Header, headerPathName, readArchive)
  import Streamly.Internal.Data.Fold.Types (Fold (..))
  import Streamly.Internal.Data.Unfold.Types (Unfold)
  import qualified Streamly.Prelude as S

  main :: IO ()
  main = do
      -- Obtain an unfold for the archive.
      -- For each entry in the archive, we will get a Header followed
      -- by zero or more ByteStrings containing chunks of file data.
      let unf :: Unfold IO Void (Either Header ByteString)
              = readArchive "/path/to/archive.tar.gz"

      -- Create a fold for converting each entry (which, as we saw
      -- above, is a Left followed by zero or more Rights) into a
      -- path and corresponding SHA-256 hash (Nothing for no data).
      let entryFold :: Fold IO (Either Header ByteString) (String, Maybe String)
              = Fold
                  (\(mpath, mctx) e ->
                      case e of
                          Left h -> do
                              mpath' <- headerPathName h
                              return (mpath', mctx)
                          Right bs ->
                              return (mpath,
                                  Just . (`hashUpdate` bs) $
                                      fromMaybe (hashInit @SHA256) mctx))
                  (return (Nothing, Nothing))
                  (\(mpath, mctx) ->
                      return (show $ fromJust mpath,
                                  show . hashFinalize <$> mctx))

      -- Execute the stream, grouping at the headers (the Lefts) using the
      -- above fold, and output the paths and SHA-256 hashes along the way.
      S.unfold unf undefined
          & S.groupsBy (\e _ -> isRight e) entryFold
          & S.mapM_ print
  ```

  ## Benchmarks

  See `./bench/README.md`. We find on our machine<sup>†</sup> that (1) reading an archive using this library is just as fast as using plain Haskell `IO` code; and that (2) both are somewhere between 1.7x (large files) and 2.5x (many 1-byte files) slower than C.

  The former fulfills the promise of [streamly](https://hackage.haskell.org/package/streamly) and stream fusion. The differences to C are presumably explained by the marshalling of data into the Haskell world and are currently small enough for our purposes.

  <sup>†</sup> [Linode](https://linode.com); Debian 10, Dedicated 32GB: 16 CPU, 640GB Storage, 32GB RAM.
license-name: BSD-3-Clause
