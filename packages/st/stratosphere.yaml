homepage: https://github.com/frontrowed/stratosphere#readme
changelog-type: markdown
hash: d9c7ba5fc9003545d885b29c15459eb7bd980474478e3cb3993c987cac96eeb5
test-bench-deps:
  bytestring: -any
  base: -any
  aeson-pretty: ! '>=0.8'
  unordered-containers: ! '>=0.2'
  hspec: -any
  text: ! '>=1.1'
  containers: -any
  lens: ! '>=4.5'
  hashable: -any
  hspec-discover: -any
  stratosphere: -any
  aeson: ! '>=0.11'
  template-haskell: ! '>=2.0'
maintainer: David Reaver
synopsis: EDSL for AWS CloudFormation
changelog: ! "# Change Log\n\n## 0.24.2\n\n* Update resource specification document
  to version 2.5.0\n\n## 0.24.1\n\n* Update resource specification document to support
  EKS\n\n## 0.24.0\n\n* Update resource specification document to version 2.4.0\n\n##
  0.23.0\n\n* Update resource specification document to version 2.3.0\n\n## 0.22.3\n\n*
  Update resource specification document to new unspecified version\n\n## 0.22.2\n\n*
  Update resource specification document to version 2.2.0\n\n## 0.22.1\n\n* Update
  resource specification document to version 2.1.0\n\n## 0.22.0\n\n* Bug fix: `AWSTemplateFormatVersion`
  was being formatted incorrectly in JSON.\n\n## 0.21.0\n\n* Update resource specification
  document to some new unspecified version.\n* Add new `nodejs8.10` to lambda\n\n##
  0.20.0\n\n* Fix name of `AutoScalingRollingUpdatePolicy` `SuspendProcesses` parameter\n*
  Update list of AWS Lambda `Runtime` values\n\n## 0.19.1\n\n* Add compatibility with
  GHC 8.4.1\n\n## 0.19.0\n\n* Fix `Equals` function requiring `Val Bool` arguments
  instead of `Val a`\n* Add `Metadata` field to `Resource` type\n\n## 0.18.0\n\n*
  Update resource specification document to version 2.0.0\n* Fix missing `AWS::ElasticLoadBalancingV2::ListenerCertificate`
  resource\n\n## 0.17.0\n\n* Fix JSON instances for non-codegen code.\n* Allow the
  `Split` function to use `Val a` in its second argument.\n\n## 0.16.0\n\n* **BREAKING
  CHANGE**: Renamed lenses for non-generated code to match naming\n  conventions of
  generated code.\n* Update resource specification document to 1.14.0\n\n## 0.15.2\n\n*
  Update resource specification document to some unspecified new version.\n* `stratosphere`
  now compiles with no warnings.\n\n## 0.15.1\n\n* Update resource specification document
  to version 1.13.0\n\n## 0.15.0\n\n* Update resource specification document to some
  unspecified new version.\n\n## 0.14.0\n\n* Update resource specification document
  to version 1.12.0\n\n## 0.13.0\n\n* Update resource specification document to version
  1.11.0\n\n## 0.12.0\n\n* Update resource specification document to version 1.10.0\n\n##
  0.11.0\n\n* Update resource specification document to version 1.8.0\n\n## 0.10.0\n\n*
  Update resource specification document to version 1.7.0\n\n## 0.9.0\n\n* Update
  resource specification document to version 1.6.0\n\n## 0.8.0\n\n* Update resource
  specification document (no version given in doc)\n* GHC 8.2.1 compatibility\n\n##
  0.7.1\n\n* Add `Export` field to the `Output` type. This allows you to declare\n
  \ cross-stack references.\n\n## 0.7.0\n\n* Made `Val` and `ValList` more type-safe
  by moving some constructors to\n  `ValList` and being more specific with types in
  functions that only accept\n  `Text` parameters. Specific examples include:\n  -
  `Join` and `Select` now require a `ValList` argument\n  - `Base64` and `Join` now
  work only on `Val Text`, not `Val a`\n  - `GetAZs` and `Split` are now in `ValList`,
  not `Val`\n* Created `ImportValueList` as a `ValList` alternative to `ImportValue`.\n*
  Added support for `Fn::Sub` intrinsic function.\n\n## 0.6.0\n\n* **BREAKING CHANGE**:
  Added `ValList` type. This new type allows you to\n  reference parameters that are
  already list types. Previously you had to use\n  some kludgy workarounds. For example,
  you can now `Ref` a parameter of type\n  `List<AWS::EC2::AvailabilityZone::Name>`.\n\n
  \ Every type that used to be `[Val a]` is now `ValList a`. If you use the\n  `OverloadedLists`
  pragma, you might not have to change any of your code.\n  Otherwise, you must wrap
  existing lists in the `ValList` constructor.\n\n* **BREAKING CHANGE**: The newtype
  wrappers `Integer'`, `Bool'`, and `Double'`\n  are no longer required. CloudFormation
  expects numbers and bools to be JSON\n  strings. These newtypes used to be necessary
  so we didn't use JSON\n  numbers/bools. Now the conversion is handled internally,
  and users don't need\n  to worry about this when using `stratosphere`.\n\n## 0.5.0\n\n*
  Update resource specification document (no version given)\n\n## 0.4.4\n\n* Update
  the resource specification document to version `1.4.2`\n\n## 0.4.3\n\n* Update the
  resource specification document to version `1.4.1`\n\n## 0.4.2\n\n* Update the resource
  specification document to version `1.2.1`\n\n## 0.4.1\n\n* Manually write out all
  JSON instances to speed up compilation\n* Fix bug in CloudFormation specification
  where `EvaluationPeriods` was\n  accidentally set to `Double`.\n\n## 0.4.0\n\n*
  Derive the `Eq` type class for everything. This is useful when comparing two\n  templates.\n*
  Added the new `Fn::Split` function.\n* Fix error in resource specification document
  where\n  `AWS::AutoScaling::AutoScalingGroup.Tags` was mistakenly called `AsTags`.\n*
  Fix error in resource specification document where the two properties `Image`\n
  \ and `Name` in `AWS::ECS::TaskDefinition.ContainerDefinition` were incorrectly\n
  \ marked as *not* required, even though they are required.\n* Fix JSON instances
  for auto scaling group update policies\n\n## 0.3.1\n\n* Updated resource specification
  document to version 1.1.1.\n\n## 0.3.0\n\n* **Backwards-incompatible**: We now use
  the official AWS JSON spec document to\n  auto-generate types. This means there
  is no more Python scraper and custom\n  JSON schemas. The behavior of the library
  is exactly the same, but a ton of\n  resource names changed to match official the
  official AWS names. On the plus\n  side, we now have 100% service coverage!\n\n##
  0.2.2\n\n* Fixed a test suite failure caused by bleeding edge HLint version.\n\n##
  0.2.1\n\n* Added Dynamo DB table resources (@ababkin)\n* Fix the Python docs scraper
  mishandling the `required` value in some cases,\n  and also missing some properties
  of resources (@amar47shah)\n* Added a ton of SNS and SQS resources (@ababkin)\n*
  Added a experimental checker for duplicate resource names (@amar47shah)\n\n## 0.2.0\n\n*
  Breaking change: The `DependsOn` property previously allowed lists of `Val\n  Text`,
  when in fact CloudFormation only accepts literal `Text` values. The\n  new type
  of `DependsOn` is `Maybe [Text]`.\n* Added `AWS::ElastiCache::CacheCluster` resource
  (@MichaelXavier)\n* Added many `AWS::Lambda` resources and associated resource properties
  (@ababkin)\n* Added new `ImportValue` CloudFormation function (@timmytofu)\n* Added
  tons of AWS Kineses resources (@MichaelXavier)\n* Added a lot of Api Gateway resources
  (@ababkin)\n* Allow setting `LensPrefix` in JSON model files to avoid name collisions\n
  \ (https://github.com/frontrowed/stratosphere/issues/27)\n\n## 0.1.6\n\n* Fix Haddock
  parsing for `FindInMap`. We now run haddock in CircleCI so we\n  shouldn't see a
  regression like this in the future.\n\n## 0.1.5\n\n* Added S3 buckets and bucket
  policies\n* Added CloudTrail Trail (Thanks @timmytofu!)\n* Added the `FindInMap`
  intrinsic function. (Thanks @MichaelXavier!)\n* Added `SecurityGroupEgress` and
  `SecurityGroupIngress` rules. (Thanks\n  @MichaelXavier!)\n* Fixed type of ELB policy
  using the more specific `NameAndValue` type. (Thanks\n  @MichaelXavier!)\n\n## 0.1.4\n\n*
  Added `UserName` property to the IAM User resource. (Thanks @timmytofu!)\n* Added
  IAM Group and Role name parameters. (Thanks again @timmytofu!)\n\n## 0.1.3\n\n*
  Update `aeson-pretty` to version 0.8 so we can stay in stackage nightly.\n* Fix
  not exporting resource name lens.\n\n## 0.1.2.1\n\n* Removed some dependencies that
  crept in so we can build against stackage\n  nightly and use GHC 8. These were actually
  dependencies of\n  `stratosphere-gen` and aren't needed for `stratosphere`.\n\n##
  0.1.2\n\n* Added all of the resources and resource properties for Auto Scaling Groups.\n*
  New AutoScalingGroup example\n* Added UpdatePolicy, CreationPolicy, and DependsOn\n\n##
  0.1.1\n\n* Small bug fix for \"style\" test when using the cabal distribution\n\n##
  0.1 (initial release)\n\n* Initial release with all Template components implemented
  along with a huge\n  set of Resources.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  aeson-pretty: ! '>=0.8'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.1'
  containers: -any
  lens: ! '>=4.5'
  hashable: -any
  aeson-qq: -any
  stratosphere: -any
  aeson: ! '>=0.11'
  template-haskell: ! '>=2.0'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.2.1'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.7.1'
- '0.8.0'
- '0.9.0'
- '0.10.0'
- '0.11.0'
- '0.12.0'
- '0.13.0'
- '0.14.0'
- '0.15.0'
- '0.15.1'
- '0.15.2'
- '0.16.0'
- '0.17.0'
- '0.18.0'
- '0.19.0'
- '0.19.1'
- '0.20.0'
- '0.21.0'
- '0.22.2'
- '0.22.3'
- '0.23.0'
- '0.24.0'
- '0.24.1'
- '0.24.2'
author: ''
latest: '0.24.2'
description-type: markdown
description: ! "# Stratosphere: AWS CloudFormation in Haskell\n\n[![Circle CI](https://circleci.com/gh/frontrowed/stratosphere.svg?style=svg)](https://circleci.com/gh/frontrowed/stratosphere)\n\nAWS
  CloudFormation is a system that provisions and updates Amazon Web Services\n(AWS)
  resources based on declarative templates. Common criticisms of\nCloudFormation include
  the use of JSON as the template language and limited\nerror-checking, often only
  available in the form of run-time errors and stack\nrollbacks. By wrapping templates
  in Haskell, we are able to easily construct\nthem and help ensure correctness.\n\nThe
  goals of stratosphere are to:\n* Build a Haskell EDSL to specify CloudFormation
  templates. Since it is\n  embedded in Haskell, it is type-checked and generally
  much easier to work\n  with than raw JSON.\n* Have a simple checking/linting system
  outside of the types that can find\n  common errors in templates.\n* Be able to
  also read valid CloudFormation JSON templates so they can be\n  type-checked. This
  also gives us free integration tests by using the huge\n  amount of example templates
  available in the AWS docs.\n\n## Example\n\nHere is an example of a `Template` that
  creates an EC2 instance, along with the\nJSON output:\n\n```haskell\n{-# LANGUAGE
  OverloadedLists #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport
  qualified Data.ByteString.Lazy.Char8 as B\nimport Stratosphere\n\nmain :: IO ()\nmain
  = B.putStrLn $ encodeTemplate instanceTemplate\n\ninstanceTemplate :: Template\ninstanceTemplate
  =\n  template\n  [ resource \"EC2Instance\" (\n    EC2InstanceProperties $\n    ec2Instance\n
  \   \"ami-22111148\"\n    & eciKeyName ?~ (Ref \"KeyName\")\n    )\n    & deletionPolicy
  ?~ Retain\n  ]\n  & description ?~ \"Sample template\"\n  & parameters ?~\n  [ parameter
  \"KeyName\" \"AWS::EC2::KeyPair::KeyName\"\n    & description ?~ \"Name of an existing
  EC2 KeyPair to enable SSH access to the instance\"\n    & constraintDescription
  ?~ \"Must be the name of an existing EC2 KeyPair.\"\n  ]\n```\n\n```json\n{\n  \"Description\":
  \"Sample template\",\n  \"Parameters\": {\n    \"KeyName\": {\n      \"Description\":
  \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\n      \"ConstraintDescription\":
  \"Must be the name of an existing EC2 KeyPair.\",\n      \"Type\": \"AWS::EC2::KeyPair::KeyName\"\n
  \   }\n  },\n  \"Resources\": {\n    \"EC2Instance\": {\n      \"DeletionPolicy\":
  \"Retain\",\n      \"Type\": \"AWS::EC2::Instance\",\n      \"Properties\": {\n
  \       \"KeyName\": {\n          \"Ref\": \"KeyName\"\n        },\n        \"ImageId\":
  \"ami-22111148\"\n      }\n    }\n  }\n}\n```\n\nPlease see the [examples](examples/)
  directory for more in-depth examples.\n\n## Value Types\n\nCloudFormation resource
  parameters can be literals (strings, integers, etc),\nreferences to another resource
  or a Parameter, or the result of some function\ncall. We encapsulate all of these
  possibilities in the `Val a` type.\n\nWe recommend using the `OverloadedStrings`
  extension to reduce the number of\n`Literal`s you have to use.\n\n## Lenses\n\nAlmost
  every CloudFormation resource has a handful of required arguments, and\nmany more
  optional arguments. Each resource is represented as a record type\nwith optional
  arguments wrapped in `Maybe`. Each resource also comes with a\nconstructor that
  accepts required resource parameters as arguments. This allows\nthe user to succinctly
  specify the resource parameters they actually use\nwithout adding too much noise
  to their code.\n\nTo specify optional arguments, we recommend using the lens operators
  `&` and\n`?~`. In the example above, the `ec2Instance` function takes the AMI as
  an\nargument, since it is required by the `EC2Instance` resource type. Then, the\noptional
  EC2 key name is specified using the `&` and `?~` lens operators.\n\nThis approach
  is very similar to the approach taken by the `amazonka` library.\nSee this\n[blog
  post](http://brendanhay.nz/amazonka-comprehensive-haskell-aws-client#smart-constructors)\nfor
  an explanation.\n\n## Auto-generation\n\nAll of the resources and resource properties
  are auto-generated from\na\n[JSON schema file](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html)
  and\nare placed in `library-gen/`. The `gen/` directory contains the auto-generator\ncode
  and the JSON model file. We include the `library-gen/` directory in git so\nthe
  build process is simplified. To build `library-gen` from scratch and then\nbuild
  all of `stratosphere`, just run the very short `build.sh` script. You can\npass
  stack args to the script too, so run `./build.sh --fast` to build the\nlibrary without
  optimization. This is useful for development.\n\nIn the future, it would be great
  to not have to include the auto-generated code\nin git.\n\n## Contributing\n\nFeel
  free to raise any issues, or even just make suggestions, by filing a\nGithub issue.\n\n##
  Future Work\n\n* Implement basic checker for things like undefined Refs and duplicate
  field\n  names. This stuff would be too unwieldy to do in types, and performing
  a\n  checking pass over a template should be pretty straightforward.\n* Use a custom
  JSON encoder so the templates look a little more idiomatic. We\n  also create a
  lot of empty whitespace and newlines using aeson-pretty. There\n  are limits on
  the size of CloudFormation templates, and we want readable\n  output without hitting
  the limits. Also, we have some newtypes that just\n  exist to override aeson instances,
  and we could get rid of those.\n* Use a custom JSON decoder with useful error messages.
  Although we don't use\n  them, we have implemented FromJSON instances for everything.
  Theoretically,\n  stratosphere could be used as a checker/linter for existing JSON\n
  \ CloudFormation templates.\n"
license-name: MIT
