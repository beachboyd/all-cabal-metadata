homepage: https://wiki.haskell.org/Software_transactional_memory
changelog-type: markdown
hash: 8a8a091e7113f9c07eb9ad4f58a67eb4a5ec58b2857c6ba80fa4d8d45015524c
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Software Transactional Memory
changelog: ! "# Changelog for [`stm` package](http://hackage.haskell.org/package/stm)\n\n##
  2.4.5.0 *Feb 2018*\n\n  * Fix space leak in `TBQueue` (gh-2, GHC#14494)\n\n  * Make
  `signalTSem` resilient against `Int` overflows (gh-4)\n\n  * Make definition of
  `readTQueue` consistent with `readTBQueue` (gh-3, GHC#9539)\n\n  * Add `flushTQueue`
  to `Control.Concurrent.STM.TQueue` (gh-1)\n\n  * Add `flushTBQueue` to `Control.Concurrent.STM.TBQueue`
  (gh-1)\n\n  * Add `signalTSemN` operation (gh-5)\n\n\n## 2.4.4.1  *Dec 2015*\n\n
  \ * Add support for `base-4.9.0.0`\n\n  * Drop support for GHC 6.12 / `base-4.2`\n\n##
  2.4.4  *Dec 2014*\n\n  * Add support for `base-4.8.0.0`\n\n  * Tighten Safe Haskell
  bounds\n\n  * Add `mkWeakTMVar` to `Control.Concurrent.STM.TMVar`\n\n  * Add `@since`-annotations\n\n##
  2.4.3  *Mar 2014*\n\n  * Update behaviour of `newBroadcastTChanIO` to match\n    `newBroadcastTChan`
  in causing an error on a read from the\n    broadcast channel\n\n  * Add `mkWeakTVar`\n\n
  \ * Add `isFullTBQueue`\n\n  * Fix `TChan` created via `newBroadcastTChanIO` to
  throw same\n    exception on a `readTChan` as when created via `newBroadcastTChan`\n\n
  \ * Update to Cabal 1.10 format\n\n## 2.4.2  *Nov 2012*\n\n  * Add `Control.Concurrent.STM.TSem`
  (transactional semaphore)\n\n  * Add Applicative/Alternative instances of STM for
  GHC <7.0\n\n  * Throw proper exception when `readTChan` called on a broadcast `TChan`\n\n##
  2.4  *Jul 2012*\n\n  * Add `Control.Concurrent.STM.TQueue` (a faster `TChan`)\n\n
  \ * Add `Control.Concurrent.STM.TBQueue` (a bounded channel based on `TQueue`)\n\n
  \ * Add `Eq` instance for `TChan`\n\n  * Add `newBroadcastTChan` and `newBroadcastTChanIO`\n\n
  \ * Some performance improvements for `TChan`\n\n  * Add `cloneTChan`\n"
basic-deps:
  base: ! '>=4.3 && <4.12'
  array: ! '>=0.3 && <0.6'
all-versions:
- '2.1'
- '2.1.1.0'
- '2.1.1.2'
- '2.1.2.0'
- '2.1.2.1'
- '2.1.2.2'
- '2.2.0.0'
- '2.2.0.1'
- '2.3'
- '2.4'
- '2.4.2'
- '2.4.3'
- '2.4.4'
- '2.4.4.1'
- '2.4.5.0'
author: ''
latest: '2.4.5.0'
description-type: haddock
description: ! 'Software Transactional Memory, or STM, is an abstraction for

  concurrent communication. The main benefits of STM are

  /composability/ and /modularity/. That is, using STM you can write

  concurrent abstractions that can be easily composed with any other

  abstraction built using STM, without exposing the details of how

  your abstraction ensures safety. This is typically not the case

  with other forms of concurrent communication, such as locks or

  ''MVar''s.'
license-name: BSD3
