homepage: https://github.com/ChrisPenner/slick#readme
changelog-type: markdown
hash: ac42ec7f26c6715a534fa182cfb5d3767a181932b40a26d56170ca6a141e5cfa
test-bench-deps:
  shake: -any
  bytestring: -any
  lens-aeson: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  containers: -any
  lens: -any
  pandoc: -any
  binary: -any
  mustache: -any
  slick: -any
  aeson: -any
maintainer: example@example.com
synopsis: ''
changelog: ! "# Changelog for sitepipe-shake\n\n## 0.1.1.0\n- Add gfm markdown options
  on writer extensions\n    - this should allow pandoc to auto-generate id's on header
  tags\n\n## 0.1.0.1\n- Docs update\n\n## 0.1.0.0\n- Initial release\n\n## Unreleased
  changes\n"
basic-deps:
  shake: -any
  bytestring: -any
  lens-aeson: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  containers: -any
  lens: -any
  pandoc: -any
  binary: -any
  mustache: -any
  aeson: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.1.0'
author: Chris Penner
latest: '0.1.1.0'
description-type: markdown
description: ! "# Slick\n\nSlick is a static site generator written and configured
  using Haskell. It's the spiritual successor to my previous\nstatic-site generator
  project [SitePipe](https://github.com/chrispenner/SitePipe/); but is faster, simpler,
  and more\neasily used in combination with other tools.\n\nSlick provides a small
  set of tools and combinators for building static\nwebsites on top of the [Shake](https://shakebuild.com/)
  build system. Shake is\nadaptable, fast, reliable, and caches aggressively so it's
  a sensible tool for\nstatic-site builds, but figuring out how to get started can
  be a bit abstract. Slick aims to answer the question of\n'how do I get a site building?'
  while giving you the necessary tools and examples to figure out how to accomplish
  your\ngoals.\n\nSee the [hackage docs](https://hackage.haskell.org/package/slick)
  for in depth help on available combinators.\n\nAlso check out the [example site](https://github.com/ChrisPenner/Slick/blob/master/example-site/app/Main.hs)!\n\n#
  Overview\n\nHere's a quick overview of what Slick can do:\n\n-   Slick provides
  helpers for loading in blog-post-like things using Pandoc\n    under the hood;\n
  \   -   This means that if Pandoc can read it, you can use it with Slick!\n    -
  \  Write your blog posts in Markdown or LaTeX and render it to\n        syntax-highlighted
  HTML!\n    -   Slick processes Pandoc (and LaTeX) metadata into a usable form (as
  an\n        Aeson Value object) which you can manipulate as you please.\n- Slick
  provides combinators for rendering [Mustache templates](https://mustache.github.io/)\n
  \   - Slick wraps Justus Adam's [Mustache](http://hackage.haskell.org/package/mustache-2.3.0/docs/Text-Mustache.html)\n
  \       library and provides cached template rendering with awareness of changes
  to templates, partials, and Mustache\n        objects.\n    - It's a thin wrapper
  so you can still use things like Mustache functions, etc. if you like!\n- Provides
  only the individual tools without opinions about how to wire them up; if you want
  to load blog posts from \n    a database and render them out using Blaze html; well
  go ahead, we can help with that!\n- Provides caching of arbitrary (JSON serializable)
  objects using Shake resulting in super-fast rebuild times! \n\nAnother static site
  generator? What about Hakyll/Jekyll?\n--------------------------------------------------------\n\nYup,
  yet another static site generator. I've tried using Hakyll and Jekyll on\ndifferent
  occasions and found there was too much magic going on with all of the\nmonadic contexts
  for me to understand how to customize things for my use-cases.\nEven adding simple
  tags/categories to my blog seemed far more complex then it\nneeded to be; Hakyll
  specifically got me really bogged down; what was the\nCompiler monad? How does an
  Item work? How do I add a custom field? Why\ncouldn't I just edit data directly
  like I'm used to doing in Haskell? They\nseemed a bit too opinionated without giving
  me escape hatches to wire in my own\nfunctionality. If they're working for you,
  then great! But they weren't working\nfor me, so that's where SitePipe and subsequently
  Slick came from.\n\nQuick Start\n---------------\n\nThe easiest way to get started
  is to clone this repo and try out\nthe example in the example-site directory. \n\nYou
  can build the example using Stack by `cd`ing into the directory and running\n`stack
  build && stack exec example-site-exe site`. This creates a 'dist' folder with the\nresults
  of the build. A quick way to serve the site is to use [Serve](https://www.npmjs.com/package/serve).\n\n```shell\n$
  npm install -g serve\nserve dist\n```\n\nThen navigate to the port which is serving
  (usually http://localhost:3000 or http://localhost:5000 )\n\n\n# Example Site:\n\nHere's
  an example of using slick to render out the posts for a pretty simple blog;\n\n```haskell\nmodule
  Main where\n\nimport qualified Data.Text as T\nimport Development.Shake\nimport
  Development.Shake.FilePath\nimport Data.Foldable\nimport Slick\n\n\n-- convert a
  source filepath to a build filepath\n-- e.g. site/css/style.css -> build/css/style.css\nsrcToBuild
  :: FilePath -> FilePath\nsrcToBuild path = \"build\" </> dropDirectory1 path\n\nmain'
  :: IO ()\nmain' =\n  shakeArgs shakeOptions $ do\n    -- Require all the things
  we need to build the site\n    -- For this simplified example we'll just copy static
  assets and build a page for each post\n    \"site\" ~> need [\"static\", \"posts\"]\n
  \   -- Require all static assets\n    \"static\" ~> do\n      staticFiles <- getDirectoryFiles
  \".\" [\"site/css//*\", \"site/js//*\", \"site/images//*\"]\n      let copyStaticFile
  path = copyFileChanged path (srcToBuild path)\n      traverse_ copyStaticFile staticFiles\n
  \    -- Find and require every post to be built\n     -- this uses the `~>` 'phony'
  rule because it doesn't actually write any files on its own\n    \"posts\" ~> do\n
  \     postPaths <- getDirectoryFiles \"site/posts\" [\"*.md\"]\n      -- We tell
  shake we need to build each individual post\n      -- We require each post separately
  so that Shake can cache them individually\n      need (((-<.> \"html\") . srcToBuild)
  <$> postPaths)\n     -- rule for actually building posts\n    \"build/posts//*.html\"
  %> \\out -> do \n      -- Recover the path where the source file for the post should
  be\n      let srcPath = (dropDirectory1 out) -<.> \"md\"\n      fileContents <-
  readFile' srcPath\n      -- Load a markdown source file into an Aeson Value \n      --
  The 'content' key contains an html-rendered string\n      -- Any metadata from a
  yaml block is loaded into the appropriate keys in the Aeson object\n      -- e.g.
  author, date, tags, etc.\n      postData <- markdownToHTML . T.pack $ fileContents\n
  \     -- Load a mustache template using using cache if available\n      template
  <- compileTemplate' \"site/templates/post.html\"\n      -- Fill in the template
  using the post metadata/content\n      writeFile' out . T.unpack $ substitute template
  postData\n```\n\nNot pictured above is:\n\n- Deserializing post metadata into an
  object which implements `FromJSON`\n- Using custom Pandoc readers to load other
  document types\n- Using `jsonCache`s to cache intermediate JSON results to improve
  build times and simplify logic.\n"
license-name: BSD3
