homepage: https://github.com/harporoeder/slotmap#readme
changelog-type: markdown
hash: f3d3da78c830388b9b35f9729d1ed0f7b73f41f474e53b2acb8b84f017e2fafb
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  slotmap: -any
  primitive: -any
  vector: -any
maintainer: roederharpo@protonmail.ch
synopsis: Pure Haskell slotmap implementation over ST or IO.
changelog: ! '# Changelog for slotmap


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  primitive: -any
  vector: -any
all-versions:
- 0.1.0.0
author: Harpo Roeder
latest: 0.1.0.0
description-type: markdown
description: ! "# Haskell SlotMap\n\nThis package implements the SlotMap data structure.
  SlotMaps are popular in certain high performance situations. This implementation
  is generic over ST or IO. More information on SlotMaps can be found [here](http://open-std.org/JTC1/SC22/WG21/docs/papers/2017/p0661r0.pdf).\n\n##
  Example Usage\n\n```\nmodule Main where\n\nimport Data.SlotMap as M\n\nmain :: IO
  ()\nmain = do\n  -- Create SlotMap\n  m <- M.empty\n\n  -- Insert Elements\n  a
  <- M.insert 3 m\n  b <- M.insert 7 m\n  c <- M.insert 9 m\n\n  -- Print Elements\n
  \ M.lookup a m >>= putStrLn . show -- Just 3\n  M.lookup b m >>= putStrLn . show
  -- Just 7\n  M.lookup c m >>= putStrLn . show -- Just 9\n\n  -- Mutate Elements\n
  \ M.delete a m\n  M.update m (1+) b\n  M.map (*2) m\n\n  -- Print Updated Elements\n
  \ M.lookup a m >>= putStrLn . show -- Just Nothing\n  M.lookup b m >>= putStrLn
  . show -- Just 16\n  M.lookup c m >>= putStrLn . show -- Just 18\n```\n\n## Structure
  Properties\n\nKeys are a weakly owning reference to the contents of the store. On
  insertion a unique key is returned. There is a generational index system such that
  when a storage slot is reused previous keys to the same slot do not incorrectly
  return a value.\n\n| Operation | Complexity |\n|-----------|------------|\n| Lookup
  \   | O(1)       |\n| Map       | O(N)*1     |\n| Update    | O(1)       |\n| Delete
  \   | O(1)       |\n| Insert    | O(1)*2     |\n| Size      | O(1)*3     |\n\n1.
  Where N = capacity NOT size.\n2. May initiate allocation if the capacity is full.\n3.
  Size != capacity. Capacity may never shrink.\n"
license-name: BSD-3-Clause
