homepage: https://github.com/mrkkrp/slug
changelog-type: markdown
hash: 50dcee38e205aae28c7c3f21d20ce981f75b5c0a15193879e6493b235f0c7d4f
test-bench-deps:
  exceptions: ! '>=0.6 && <0.10'
  base: ! '>=4.7 && <5.0'
  slug: -any
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=1.0 && <1.3'
  http-api-data: ! '>=0.2 && <0.4'
  path-pieces: ! '>=0.1.5 && <0.3'
  QuickCheck: ! '>=2.4 && <3.0'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Type-safe slugs for Yesod ecosystem
changelog: ! "## Slug 0.1.7\n\n* Defined `Semigroup` instance for `Slug`.\n\n* Improved
  documentation and metadata.\n\n## Slug 0.1.6\n\n* Allowed Aeson 1.1.\n\n* Switched
  to Hspec for test suite.\n\n* Made public `Arbitrary` instance for `Slug`.\n\n*
  Derived `Eq` for `SlugException`.\n\n* Drop support for GHC 7.6.\n\n* Started to
  use the derived `Show` instance for `SlugException`.\n  Human-friendly version goes
  to `Exception`'s method `displayException`\n  instead.\n\n* Added instances of `ToHttpApiData`
  and `FromHttpApiData` for `Slug`.\n\n## Slug 0.1.5\n\n* Allow Aeson 1.0.\n\n## Slug
  0.1.4\n\n* Derive `Ord` and `Data` instances for `Slug`.\n\n## Slug 0.1.3\n\n* Export
  plain function `unSlug` instead of record selector `unSlug`.\n\n## Slug 0.1.2\n\n*
  Improved error messages in `parseJSON`.\n\n## Slug 0.1.1\n\n* Add `Read` instance
  of `Slug`.\n\n* Add `parseSlug` and `truncateSlug` functions.\n\n* Functions (including
  instance methods) that parse `Text` that must be\n  formatted as valid slug are
  case-sensitive now.\n\n## Slug 0.1.0\n\n* Initial release.\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.10'
  base: ! '>=4.7 && <5.0'
  persistent: ! '>=2.0 && <3.0'
  text: ! '>=1.0 && <1.3'
  http-api-data: ! '>=0.2 && <0.4'
  path-pieces: ! '>=0.1.5 && <0.3'
  QuickCheck: ! '>=2.4 && <3.0'
  aeson: ! '>=0.8 && <1.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '0.1.7'
description-type: markdown
description: ! "# Slug\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/slug.svg?style=flat)](https://hackage.haskell.org/package/slug)\n[![Stackage
  Nightly](http://stackage.org/package/slug/badge/nightly)](http://stackage.org/nightly/package/slug)\n[![Stackage
  LTS](http://stackage.org/package/slug/badge/lts)](http://stackage.org/lts/package/slug)\n[![Build
  Status](https://travis-ci.org/mrkkrp/slug.svg?branch=master)](https://travis-ci.org/mrkkrp/slug)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/slug/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/slug?branch=master)\n\nThis
  is a [slug](https://en.wikipedia.org/wiki/Semantic_URL#Slug)\nimplementation that
  plays nicely with the [Yesod](http://www.yesodweb.com/)\necosystem. Although it's
  fairly easy to write this thing, slugs are useful\nand general enough to be coded
  once and be used again and again. So this\nlittle package eliminates some boilerplate
  you might find yourself writing.\n\n## Quick start\n\nThe package provides the data
  type `Slug` that is an instance of various\ntype classes, so it can be used with
  Persistent or as a part of a route. It\nalso works with the `aeson` package.\n\nThe
  slugs are completely type-safe. When you have a `Slug`, you can be sure\nthat there
  is a valid slug inside. Valid slug has the following qualities:\n\n* it's not empty;\n\n*
  it consists only of alpha-numeric groups of characters (words) separated\n  by `'-'`
  dashes in such a way that entire slug cannot start or end in a\n  dash and also
  two dashes in a row cannot be found;\n\n* every character with defined notion of
  case is lower-cased.\n\nTo use the package with persistent models, just import `Web.Slug`
  and add it\nto model file:\n\n```\nMyEntity\n  slug Slug\n  …\n```\n\nUse it in
  route file like this:\n\n```\n/post/#Slug PostR GET\n```\n\nIn Haskell code, create
  slugs from `Text` with `mkSlug` and extract their\ntextual representation with `unSlug`.
  The following property holds:\n\n```haskell\nmkSlug = mkSlug >=> mkSlug . unSlug\n```\n\n##
  License\n\nCopyright © 2015–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
