homepage: https://github.com/rethab/h-gpgme
changelog-type: markdown
hash: 766b55d31ccda73fe20704bad3181c663ffbfc197eac623999efff0dc33940dd
test-bench-deps:
  exceptions: -any
  bindings-gpgme: ! '>=0.1.6 && <0.2'
  email-validate: -any
  bytestring: ! '>=0.9'
  unix: ! '>=2.5'
  base: ==4.*
  time: ! '>=1.4 && <2.0'
  filepath: -any
  data-default: -any
  HUnit: ! '>=1.2 && <1.4'
  tasty-quickcheck: ! '>=0.8 && <1.0'
  tasty-hunit: ! '>=0.9 && <1.0'
  transformers: ! '>=0.4.1 && <0.6'
  temporary: -any
  tasty: ! '>=0.10 && <1.0'
  QuickCheck: -any
  directory: -any
maintainer: rethab@protonmail.ch
synopsis: High Level Binding for GnuPG Made Easy (gpgme)
changelog: ! "# Changelog\n\n## 0.5.0.0\n\n### New Features\n\n- Add Stack support\n-
  Add key generation functionality\n- Add remove key functionality\n- Add clear sign
  functionality\n- Add progress callback functionality\n- Add file encryption and
  decryption\n- Add safe `collectSignatures'` function\n\n### Bug fixes\n\n- Prevent
  potential memory leak in `withCtx`\n- Return full fingerprint for `keySubKeys`\n-
  Fix crash bug in `verifyInternal` involving a call to `performUnsafeIO`\n\n### Maintenance\n-
  Replace dependency on `either` with `transfers` (thanks hvr)\n\n## 0.4.0.0\n- verifyDetached
  and verifyDetached' Verify a payload using a detached signature. (thanks mmhat)\n-
  verifyPlain and verifyPlain' Verify a payload using a plain signature. (thanks mmhat)\n\n##
  0.3.0.0\n- Added listKeys (thanks bgamari)\n- Replaced withArmor with setArmor\n-
  Removed withKey, manual freeing is no longer required so you can use getKey (thanks
  bgamari)\n- Support for passphrase callbacks (thanks bgamari)\n - Note that the
  operation of this feature is a bit inconsistent between GPG versions. GPG 1.4 using
  the use-agent option and GPG >= 2.1 require that the gpg-agent for the session has
  the allow-loopback-pinentry option enabled (this can be achieved by adding allow-loopback-pinentry
  to gpg-agent.conf. GPG versions between 2.0 and 2.1 do not support the --pinentry-mode
  option necessary for this support.\n - See http://lists.gnupg.org/pipermail/gnupg-devel/2013-February/027345.html
  and the gpgme-tool example included in the gpgme tree for details.\n\n## 0.2.0.0\n-
  Added withArmor for ASCII-armored output (thanks yaccz)\n"
basic-deps:
  bindings-gpgme: ! '>=0.1.6 && <0.2'
  email-validate: -any
  bytestring: ! '>=0.9'
  unix: ! '>=2.5'
  base: ==4.*
  time: ! '>=1.4 && <2.0'
  data-default: -any
  transformers: ! '>=0.4.1 && <0.6'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
author: Reto Habluetzel
latest: '0.5.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/h-gpgme.svg)](https://hackage.haskell.org/package/h-gpgme)
  [![Build Status](https://travis-ci.org/rethab/h-gpgme.svg?branch=master)](https://travis-ci.org/rethab/h-gpgme)\n\nh-gpgme:
  High Level Haskell Bindings for GnuPG Made Easy\n========================================================\n\n##
  Examples\n\n```haskell\nlet alice_pub_fpr = \"EAACEB8A\"\n\n-- encrypt\nJust enc
  <- withCtx \"test/bob\" \"C\" OpenPGP $ \\bCtx -> runMaybeT $ do\n        aPubKey
  <- MaybeT $ getKey bCtx alice_pub_fpr NoSecret\n        fromRight $ encrypt bCtx
  [aPubKey] NoFlag plain\n\n-- decrypt\ndec <- withCtx \"test/alice\" \"C\" OpenPGP
  $ \\aCtx ->\n        decrypt aCtx enc\n```\n\nSee the test folder for more examples\n\n[Changelog](CHANGELOG.markdown)\n"
license-name: MIT
