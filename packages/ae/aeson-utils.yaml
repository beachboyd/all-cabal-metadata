homepage: ''
changelog-type: markdown
hash: 2534db42b7ea4e15268593d27278b0d61350793921a8bf60bb6ad558acaed452
test-bench-deps: {}
maintainer: code@silk.co
synopsis: Utilities for working with Aeson.
changelog: ! "# Changelog\n\n#### 0.3.0.2\n\n* Allow `aeson 0.9.*`. Because of the
  aeson release `eitherDecodeV` and `decodeV` now behave the same as `eitherDecode`
  and `decode` respectively, this package can still be used as a compatibility layer.\n\n####
  0.3.0.1\n\n* Allow `attoparsec 0.13.*`\n\n## 0.3\n\n* The semantics of `eitherDecodeV`
  and `decodeV` have been changed to conform to aeson's `eitherDecode` and `decode`:
  They now consume until end of input and strip trailing whitespace.\n\n  This is
  necessary to remove ambiguity when decoding JSON-like values that are\n  not necessarily
  properly formatted for JSON. For example, parsing a hexadecimal\n  digit sequence
  that starts with digits but does not have double quotes should\n  fail to parse
  rather than be interpreted as a number.\n\n#### 0.2.2.1\n\n* Allow `attoparsec 0.12.*`\n\n###
  0.2.2.0\n\n* Deprecate `parseNumber` in favor of `Data.Scientific.floatingOrInteger`\n*
  Re-export `Data.Scientific.floatingOrInteger`\n\n#### 0.2.1.1\n\n* Allow `scientific
  0.3.*`\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ==4.*
  text: ! '>=0.11 && <1.3'
  attoparsec: ! '>=0.10 && <0.14'
  scientific: ! '>=0.3.2 && <0.4'
  aeson: ! '>=0.6 && <1.5'
all-versions:
- '0.2.1'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.2.1'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
author: Silk. B.V.
latest: '0.3.0.2'
description-type: markdown
description: ! "# aeson-utils\n\n[![Build Status](https://travis-ci.org/silkapp/aeson-utils.svg?branch=master)](https://travis-ci.org/silkapp/aeson-utils)\n\nA
  small package containing helpful addititions to aeson.\n\nIt provides `eitherDecodeV`
  and `decodeV` functions (analogous to `eitherDecode` and `decode` in aeson) that
  can be used to parse atomic JSON values at the top level. This is not strictly valid
  JSON, only objects and arrays are allowed at the top level in the specification,
  but aeson's `encode` allows this already. This gives us the nice property `decodeV
  . encode = Just`.\n\nThe package also contains the `.=?` operator that you can use
  to optionally construct object pairs:\n\n```haskell\nobject (\n  [ \"a\" .= foo\n
  \ , \"b\" .= bar\n  ] ++ catMaybes\n  [ \"c\" .=? mBaz\n  , \"d\" .=? mQux\n  ])\n```\n\nFinally
  it has a `parseNumber` function that converts a scientific into `Either Integer
  Double` in case you want to distinguish between integrals and fractionals.\n\n##
  Installation instructions\n\n[aeson-utils is available on hackage](http://hackage.haskell.org/package/aeson-utils)\n\n```\ncabal
  install aeson-utils\n```\n"
license-name: BSD3
