homepage: ''
changelog-type: markdown
hash: 97c0e0301180aba2bb4121bfa292faf95abd31c2861b63d7662cd574cd31ab0d
test-bench-deps: {}
maintainer: Kristof Bastiaensen
synopsis: Apply a json-patch to any haskell datatype.
changelog: ! "# aeson-diff-generic 0.0.2\n\n*April 2, 2018*\n\n   - Better documentation.\n
  \  - Tested builds\n\n# aeson-diff-generic 0.0.1\n\n*April 1, 2018*\n\nInitial release
  of aeson-diff-generic.  It has the implementations for\nthe `JsonPatch` and `fieldLens`
  classes, and `JsonPatch` instances for\nall datatype supported by the aeson package.
  \ It also includes the\n`deriveJsonPatch` template haskell function for generating
  `JsonPatch` instances.\n"
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.5 && <5'
  time: ! '>=1.1.1.4'
  unordered-containers: ! '>=0.2.5.0 && <0.3'
  text: ! '>=1.1.1.0'
  dlist: ! '>=0.6'
  th-abstraction: ! '>=0.2.2 && <0.3'
  tagged: ! '>=0.8.3 && <0.9'
  containers: ! '>=0.5.8'
  base-compat: ! '>=0.9.1 && <0.10'
  hashable: ! '>=1.1.2.0'
  uuid-types: ! '>=1.0.3 && <1.1'
  scientific: ! '>=0.3.4.7 && <0.4'
  aeson-diff: ! '>=1.1.0.0 && <1.2'
  aeson: ! '>=1.2.4.0 && <1.3'
  template-haskell: ! '>=2.7'
  vector: ! '>=0.8'
all-versions:
- '0.0.1'
- '0.0.2'
author: Kristof Bastiaensen
latest: '0.0.2'
description-type: markdown
description: ! "# Welcom to `aeson-diff-generic` [![Hackage](https://img.shields.io/hackage/v/aeson-diff-generic.svg)](https://hackage.haskell.org/package/aeson-diff-generic)
  [![Build Status](https://travis-ci.org/kuribas/aeson-diff-generic.svg)](https://travis-ci.org/kuribas/aeson-diff-generic)\n\naeson-diff-generic
  is a haskell library that allows you to apply a\nJSON patch [rfc6902](https://tools.ietf.org/html/rfc6902)
  document\ndirectly to a haskell datatype.  A JSON Patch document is a sequence\nof
  instructions to modify a JSON value.  It is suitable for use with \nthe HTTP PATCH
  method.  \n\nSuppose you are writing a client/server application with\nauto-save.
  Every time the user makes a change to the document, the\nclient needs to tell the
  server about it. If the document being edited\nis large, sending the entire updated
  document is impractical, so you\nwant to send a diff instead. JSON patch\n[rfc6902](https://tools.ietf.org/html/rfc6902)
  is a standard format\nfor representing diffs, but it applies to JSON documents,
  not Haskell\nvalues. Let's say our document is represented by a Haskell value of\ntype
  Doc: we need a Doc patch, not a json patch.\n\nThe aeson library uses GHC.Generics
  or template haskell to define a\ndefault json encoding for algebraic datatypes.
  The aeson-diff-generic\ncan generate code, using options given to aeson, to interpret
  a json\npatch as a Doc patch.\n\n# Example\n\nSuppose we have a datatype for which
  we have a ToJSON and FromJSON instance:\n\n```haskell\n{-# LANGUAGE DeriveGeneric,
  TemplateHaskell, OverloadedStrings #-}\nimport Data.Aeson\nimport Data.Aeson.Diff\nimport
  Data.Aeson.Diff.Generic\nimport GHC.Generics\n\ndata Pet = Bird | Cat | Dog | Fish\n
  \ deriving (Show, Eq, Generic)\n\ndata Person = Person\n  { name :: String\n  ,
  age  :: Int\n  , pet  :: Pet\n  } deriving (Show, Eq, Generic)\n\ninstance ToJSON
  Pet where\n  toJSON = genericToJSON defaultOptions\n  toEncoding = genericToEncoding
  defaultOptions\n  \ninstance FromJSON Pet where\n  parseJSON = genericParseJSON
  defaultOptions\n\ninstance ToJSON Person where\n  toJSON = genericToJSON defaultOptions\n
  \ toEncoding = genericToEncoding defaultOptions\n  \ninstance FromJSON Person where\n
  \ parseJSON = genericParseJSON defaultOptions\n```\n\nWe can now create a JsonPatch
  instance for our datatypes.  Creating\none by hand is tedious, so aeson-diff-generic
  gives two alternative\nways to create one: using the `FieldLens` class, or using
  template\nhaskell with the \"Data.Aeson.Diff.Generic.TH\" module.\n\n### Creating
  instances with fieldlens.\n\nA fieldlens maps a `Key` onto a getter and setter into
  the given data.\n\nFor our Pet datatype we don't have any fields to index into,
  so it just returns an error:\n\n```haskell\ninstance FieldLens Pet where\n  fieldLens
  _ _ = Error \"Invalid Path\"\n```\n\nSince this is the default implementation, so
  we can do simply:\n\n```haskell\ninstance FieldLens Pet\n```\n\nFor the Person datatype
  we map each field to the `GetSet` type:\n\n```haskell\ninstance FieldLens Person
  where\n  fieldLens (OKey field) (Person name_ age_ pet_) =\n    case field of\n
  \     \"name\" -> pure $ GetSet name_ (\\v -> pure $ Person v age_ pet_)\n      \"age\"
  \ -> pure $ GetSet age_ (\\v -> pure $ Person name_ v pet_)\n      \"pet\"  -> pure
  $ GetSet pet_ (\\v -> pure $ Person name_ age_ v)\n      _ -> Error \"Invalid Path\"\n
  \ fieldLens _ _ = Error \"Invalid Path\"\n```\n\nNow our `JsonPatch` instance will
  automatically use the `FieldLens` instance.\n\n```haskell\ninstance JsonPatch Person\ninstance
  JsonPatch Pet\n```\n\n### Creating instances with template haskell\n\nFieldLens
  still involves some boilerplate.  We can avoid that by using\nthe template haskell
  functions from \"Data.Aeson.Diff.Generic.TH\":\n\n```haskell\ninstance JsonPatch
  Pet\ninstance FieldLens Pet\n\nderiveJsonPatch defaultOptions ''Person\n```\n\n###
  applying patches\n\nNow we can apply patches to our data:\n\n```haskell\n> joe =
  Person \"Joe\" 32 Fish\n> john = Person \"John\" 32 Bird\n> patch = Data.Aeson.Diff.diff
  (toJSON joe) (toJSON john)\n\n> import qualified Data.ByteString.Lazy.Char8 as ByteString\n>
  ByteString.putStrLn $ encode patch\n[{\"op\":\"replace\",\"path\":\"/name\",\"value\":\"John\"},{\"op\":\"replace\",\"path\":\"/pet\",\"value\":\"Bird\"}]\n\n>
  Success json = Data.Aeson.Diff.patch patch (toJSON joe)\n> ByteString.putStrLn $
  encode json\n{\"age\":32,\"name\":\"John\",\"pet\":\"Bird\"}\n\n> Data.Aeson.Diff.Generic.patch
  patch joe\nSuccess (Person {name = \"John\", age = 32, pet = Bird})\n```\n\n# Join
  in!\n\nI am happy to receive bug reports, fixes, documentation enhancements,\nand
  other improvements.\n\nPlease report bugs via the\n[github issue tracker](http://github.com/kuribas/aeson-diff-generic/issues).\n\nMaster
  [git repository](http://github.com/kuribas/aeson-diff-generic):\n\n* `git clone
  git://github.com/kuribas/aeson-dif-generic.git`\n\nSee what's changed in recent
  (and upcoming) releases:\n\n* https://github.com/kuribas/aeson-diff-generic/blob/master/changelog.md\n\n(You
  can create and contribute changes using git)\n\n\n# Authors\n\nThis library is written
  by Kristof Bastiaensen.\n"
license-name: BSD3
