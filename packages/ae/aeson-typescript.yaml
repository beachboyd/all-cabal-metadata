homepage: https://github.com/codedownio/aeson-typescript#readme
changelog-type: markdown
hash: bd58ac144088aff22b9e6fd8b569dea465050b4ba932c6d09d37ece5175bfcd6
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  process: -any
  th-abstraction: -any
  containers: -any
  aeson-typescript: -any
  interpolate: -any
  mtl: -any
  temporary: -any
  tasty: -any
  aeson: -any
  template-haskell: -any
  tasty-ant-xml: -any
  directory: -any
maintainer: tom@codedown.io
synopsis: Generate TypeScript definition files from your ADTs
changelog: ! '# Changelog for aeson-typescript


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  th-abstraction: -any
  containers: -any
  interpolate: -any
  mtl: -any
  aeson: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
author: Tom McLaughlin
latest: '0.1.0.0'
description-type: markdown
description: ! "\n# Welcome to `aeson-typescript` [![Hackage](https://img.shields.io/hackage/v/aeson.svg)](https://hackage.haskell.org/package/aeson-typescript)
  [![Build Status](https://travis-ci.org/bos/aeson.svg)](https://travis-ci.org/codedownio/aeson-typescript)\n\nThis
  library provides a way to generate TypeScript `.d.ts` files that match your existing
  Aeson `ToJSON` instances.\nIf you already use Aeson's Template Haskell support to
  derive your instances, then deriving TypeScript is as simple as\n\n```haskell\n$(deriveTypeScript
  myAesonOptions ''MyType)\n```\n\nFor example,\n\n```haskell\ndata D a = Nullary\n
  \        | Unary Int\n         | Product String Char a\n         | Record { testOne
  \  :: Double\n                  , testTwo   :: Bool\n                  , testThree
  :: D a\n                  } deriving Eq\n```\n\nNext we derive the necessary instances.\n\n```haskell\n$(deriveTypeScript
  (defaultOptions {fieldLabelModifier = drop 4, constructorTagModifier = map toLower})
  ''D)\n```\n\nNow we can use the newly created instances.\n\n```haskell\n>>> putStrLn
  $ formatTSDeclarations $ getTypeScriptDeclaration (Proxy :: Proxy D)\n\ntype D<T>
  = \"nullary\" | IUnary<T> | IProduct<T> | IRecord<T>;\n\ntype IUnary<T> = number;\n\ntype
  IProduct<T> = [string, string, T];\n\ninterface IRecord<T> {\n  tag: \"record\";\n
  \ One: number;\n  Two: boolean;\n  Three: D<T>;\n}\n```\n\nIt's important to make
  sure your JSON and TypeScript are being derived with the same options. For this
  reason, we\ninclude the convenience 'HasJSONOptions' typeclass, which lets you write
  the options only once, like this:\n\n```haskell\ninstance HasJSONOptions MyType
  where getJSONOptions _ = (defaultOptions {fieldLabelModifier = drop 4})\n\n$(deriveJSON
  (getJSONOptions (Proxy :: Proxy MyType)) ''MyType)\n$(deriveTypeScript (getJSONOptions
  (Proxy :: Proxy MyType)) ''MyType)\n```\n"
license-name: BSD3
