homepage: https://github.com/codedownio/aeson-typescript#readme
changelog-type: markdown
hash: 4b786ed08d2d60964339dbe53bae2d7c303814588fbda91f984cec6de96640a0
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  process: -any
  th-abstraction: -any
  containers: -any
  aeson-typescript: -any
  interpolate: -any
  mtl: -any
  temporary: -any
  tasty: -any
  aeson: -any
  template-haskell: -any
  tasty-ant-xml: -any
  directory: -any
maintainer: tom@codedown.io
synopsis: Generate TypeScript definition files from your ADTs
changelog: ! '# Changelog for aeson-typescript


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  th-abstraction: -any
  containers: -any
  interpolate: -any
  mtl: -any
  aeson: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Tom McLaughlin
latest: '0.1.0.1'
description-type: markdown
description: ! "\n# Welcome to `aeson-typescript` [![Hackage](https://img.shields.io/hackage/v/aeson-typescript.svg)](https://hackage.haskell.org/package/aeson-typescript)
  [![Build Status](https://travis-ci.org/codedownio/aeson-typescript.svg)](https://travis-ci.org/codedownio/aeson-typescript)\n\nThis
  library provides a way to generate TypeScript `.d.ts` files that match your existing
  Aeson `ToJSON` instances.\nIf you already use Aeson's Template Haskell support to
  derive your instances, then deriving TypeScript is as simple as\n\n```haskell\n$(deriveTypeScript
  myAesonOptions ''MyType)\n```\n\nFor example,\n\n```haskell\ndata D a = Nullary\n
  \        | Unary Int\n         | Product String Char a\n         | Record { testOne
  \  :: Double\n                  , testTwo   :: Bool\n                  , testThree
  :: D a\n                  } deriving Eq\n```\n\nNext we derive the necessary instances.\n\n```haskell\n$(deriveTypeScript
  (defaultOptions {fieldLabelModifier = drop 4, constructorTagModifier = map toLower})
  ''D)\n```\n\nNow we can use the newly created instances.\n\n```haskell\n>>> putStrLn
  $ formatTSDeclarations $ getTypeScriptDeclaration (Proxy :: Proxy D)\n\ntype D<T>
  = \"nullary\" | IUnary<T> | IProduct<T> | IRecord<T>;\n\ntype IUnary<T> = number;\n\ntype
  IProduct<T> = [string, string, T];\n\ninterface IRecord<T> {\n  tag: \"record\";\n
  \ One: number;\n  Two: boolean;\n  Three: D<T>;\n}\n```\n\nIt's important to make
  sure your JSON and TypeScript are being derived with the same options. For this
  reason, we\ninclude the convenience `HasJSONOptions` typeclass, which lets you write
  the options only once, like this:\n\n```haskell\ninstance HasJSONOptions MyType
  where getJSONOptions _ = (defaultOptions {fieldLabelModifier = drop 4})\n\n$(deriveJSON
  (getJSONOptions (Proxy :: Proxy MyType)) ''MyType)\n$(deriveTypeScript (getJSONOptions
  (Proxy :: Proxy MyType)) ''MyType)\n```\n\n# Suggestions for use\n\nThis library
  was written to make it easier to typecheck your TypeScript frontend against your
  Haskell backend. Here's how I like to integrate it into my workflow:\n\nThe idea
  is to set up a separate Haskell executable in your Cabal file whose sole purpose
  is to generate types. For example, in your hpack `package.yaml` file add a new executable
  like this:\n\n```yaml\nexecutables:\n  ...\n  tsdef:\n    main: Main.hs\n    source-dirs:
  tsdef\n    dependencies:\n    - my-main-app\n    ...\n```\n\nAnd `tsdef/Main.hs`
  should look like this:\n\n```haskell\nmodule Main where\n\nimport Data.Proxy\nimport
  Data.Monoid\nimport MyLibraries\n\n$(deriveTypeScript (getJSONOptions (Proxy ::
  Proxy MyType1)) ''MyType1)\n$(deriveTypeScript (getJSONOptions (Proxy :: Proxy MyType2))
  ''MyType2)\n...\n\nmain = putStrLn $ formatTSDeclarations (\n  (getTypeScriptDeclaration
  (Proxy :: Proxy MyType1)) <>\n  (getTypeScriptDeclaration (Proxy :: Proxy MyType2))
  <>\n  ...\n)\n```\n\nNow you can generate the types by running `stack runhaskell
  tsdef/Main.hs > types.d.ts`. I like to make this an automatic step in my Gulpfile,
  Webpack config, etc.\n\n\n# See also\n\nIf you want a much more opinionated web
  framework for generating APIs, check out [servant](http://haskell-servant.readthedocs.io/en/stable/).
  (Although it doesn't seem to support TypeScript client generation at the moment.)\n\nFor
  another very powerful framework that can generate TypeScript client code based on
  an API specification, see [Swagger/OpenAPI](https://github.com/swagger-api/swagger-codegen).\n"
license-name: BSD3
