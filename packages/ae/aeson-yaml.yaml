homepage: https://github.com/clovyr/aeson-yaml
changelog-type: markdown
hash: b5b7d1a4b36f162da1d0e66f8bc2a71e553c8cfeb1ddd99b69442275f8a171ff
test-bench-deps:
  bytestring: -any
  base: -any
  tasty-discover: -any
  unordered-containers: -any
  string-qq: -any
  aeson-yaml: -any
  tasty-hunit: -any
  tasty: -any
  aeson: -any
  yaml: -any
maintainer: patrick@clovyr.io
synopsis: Output any Aeson value as YAML (pure Haskell library)
changelog: |
  # 1.0.0.0

  Initial version
basic-deps:
  bytestring: ! '>=0.10.4.0 && <0.11'
  base: ! '>=4.8.2.0 && <5'
  unordered-containers: ! '>=0.1.0.0 && <0.3'
  text: ! '>=0.1 && <1.3'
  aeson-yaml: -any
  aeson: ! '>=0.4.0.0 && <1.5'
  vector: ! '>=0.1 && <0.13'
all-versions:
- 1.0.0.0
author: Patrick Nielsen
latest: 1.0.0.0
description-type: markdown
description: |
  # aeson-yaml

  BSD3-licensed library to encode any Aeson value as YAML, without a
  dependency on an external YAML library like `yaml` (libyaml C FFI) or
  `HsYaml` (GPL).

  ## Usage

  ```haskell
  import qualified Data.Aeson.Yaml as Aeson.Yaml

  Aeson.Yaml.encode :: ToJSON a => a -> LazyByteString

  -- To encode multiple values, separated by '---' (YAML documents),
  -- use `encodeDocuments`.
  Aeson.Yaml.encodeDocuments :: ToJSON a => [a] -> LazyByteString

  -- To encode values of different types, use `toJSON` from `Data.Aeson`
  -- like so:
  encodeDocuments [toJSON x, toJSON y, toJSON z]
  ```

  See [bin/JsonToYaml.hs](bin/JsonToYaml.hs) for a simple command-line application
  using this library.

  ## Documentation

  [Hackage](https://hackage.haskell.org/package/aeson-yaml)

  ## License

  [BSD3](LICENSE)
license-name: BSD-3-Clause
