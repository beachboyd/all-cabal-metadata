homepage: ''
changelog-type: ''
hash: 56598728aff2900c8b1d0002c1bd35420bc25289db094b73fdbfd33ddce8f8a9
test-bench-deps:
  base: ! '>=4 && <5'
  nondeterminism: -any
  tasty-hunit: -any
  tasty: -any
maintainer: Andrei Barbu <andrei@0xab.com>
synopsis: A monad and monad transformer for nondeterministic computations.
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  containers: -any
  mtl: ! '>=2'
all-versions:
- '1.0'
- '1.2'
- '1.4'
author: Andrei Barbu <andrei@0xab.com>
latest: '1.4'
description-type: markdown
description: ! "# Nondeterminism\n\nThis package is available via [Hackage where its
  documentation resides](https://hackage.haskell.org/package/nondeterminism).\n\nThis
  provides nondeterministic computations in Haskell. It implements\nan `Amb` monad
  in which you can perform nondeterministic choices along\nwith a monad transformer
  version, `AmbT`.\n\n## Amb\n\nAn example which finds Pythagorean triplets up to
  a certain size, project Euler problem 9.\n\n```haskell\nimport Control.Monad\nimport
  Control.Monad.Amb\npyTriple :: (Num t, Ord t) => t -> Amb r (t, t, t)\npyTriple
  n = do a <- anIntegerBetween 1 n\n                b <- anIntegerBetween (a + 1)
  n\n                c <- anIntegerBetween (b + 1) n\n                when (a*a +
  b*b /= c*c) empty\n                return (a,b,c)\nlength $ allValues $ pyTriple
  100\n```\n\nMore examples can be found in `tests/test.hs`.\n\n## Future\n\n - allValues
  is not lazy in its return value\n"
license-name: LicenseRef-LGPL
