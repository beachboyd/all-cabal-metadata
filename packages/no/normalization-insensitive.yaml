homepage: https://github.com/ppelleti/normalization-insensitive
changelog-type: text
hash: 0e4752244395bb712a55d21056c0efcab9fd90e4a3a617d7b1f25b42eeee1bdc
test-bench-deps:
  test-framework-hunit: '>=0.2.4 && <0.4'
  bytestring: '>=0.9 && <0.11'
  test-framework: '>=0.2.4 && <0.9'
  base: '>=4.7 && <5'
  text: '>=1.1.1 && <1.3'
  criterion: '>=0.6.1 && <1.6'
  normalization-insensitive: -any
  HUnit: '>=1.2.2 && <1.7'
  hashable: '>=1.0 && <1.4'
  deepseq: '>=1.1 && <1.5'
maintainer: Patrick Pelletier <code@funwithsoftware.org>
synopsis: Normalization insensitive string comparison
changelog: |
  2.0.1

  * Expose 'normalized'


  2.0.0.1

  * Avoid using Data.ByteString.UTF8.Normalize, which was deprecated in
    unicode-transforms-0.2.0


  2.0

  * New package normalization-insensitive based on case-insensitive


  1.2.0.5

  * Support HUnit-1.3
  * Support criterion-1.1
  * Updated .nix files


  1.2.0.4

  * Fixed #17: https://github.com/basvandijk/case-insensitive/issues/17


  1.2.0.3

  * Add CHANGELOG to extra-source files so that it shows up on Hackage


  1.2.0.2

  * Bump base and deepseq upper bounds for GHC 7.10 compatibility

  * Add case-insensitive.nix and default.nix

  * Fix #14: Build failure with GHC 7.2.2

  * Fix #8: Don't unnecessarily use NoImplicitPrelude


  1.2.0.1

  * Solved warnings on GHC-7.8.3

  * Bump text upper version bounds


  1.2.0.0

  * Derived a Data instance for CI


  1.1.0.3

  * Support text-1.1


  1.1.0.2

  * Support text-1.0


  1.1.0.1

  * Fixed bad character L178


  1.1

  * Added the Data.CaseInsensitive.Unsafe module

  * Mark Data.CaseInsensitive.Internal as Unsafe


  1.0.0.2

  *  Support criterion-0.8


  1.0.0.1

  * Fix building on GHC-6.12.1

  * Bump base upper bound for GHC 7.7

  * Added a NEWS file


  1.0  @  Mon Jan 28 14:39:05 UTC 2013

  * Make package ready for the Haskell Platform

  * Drop the UnicodeSyntax, TypeSynonymInstances and FlexibleInstances
    language extensions

  * Add instance NFData s => NFData (CI s)

  * Add a hidden method to the FoldCase type class:
      foldCaseList :: [s] -> [s]
      foldCaseList = L.map foldCase

  * Add instance FoldCase a => FoldCase [a] where
          foldCase = foldCaseList

  * Add instance FoldCase Char where
          foldCase     = toLower
          foldCaseList = TL.unpack . TL.toCaseFold . TL.pack

  * Added a simple test suite

  * Added a simple benchmark

  * Added a rewrite rule to make 'mk' more efficient on strict
    ByteStrings


  0.4.0.4  @  Fri Dec 14 07:06:58 UTC 2012

  * Support hashable-1.2


  0.4.0.3  @  Sat Aug 18 07:20:49 UTC 2012

  * Improve performance of foldCase on sctrict and lazy ByteStrings


  0.4.0.2  @  Thu Aug 16 14:58:33 UTC 2012

  * Declare Data.CaseInsensitive to be Trustworthy

  * Support base-4.6

  * Support bytestring-0.10


  0.4.0.1  @  Wed Dec 14 15:24:55 UTC 2011

  * Support base-4.5


  0.4  @  Thu Oct 27 18:29:58 UTC 2011

  * Remove instance FoldCase Char

  * Perform proper case folding on Strings:
    -instance FoldCase String where foldCase = L.map toLower
    +instance FoldCase String where foldCase = TL.unpack . TL.toCaseFold . TL.pack


  0.3.0.1  @  Mon Aug 8 06:28:21 UTC 2011

  * Support base-4.4


  0.3  @  Thu Jul 14 07:38:52 UTC 2011

  * Add instance Hashable s => Hashable (CI s)


  0.2.0.2  @  Thu Jun 30 22:24:23 UTC 2011

  * Moved from darcs on code.haskell.org
    to git on githb.com


  0.2.0.1  @  Tue Mar 29 20:30:32 UTC 2011

  * Drop dependency on base-unicode-symbols


  0.2  @  Mon Feb 7 20:18:34 UTC 2011

  * Export foldedCase :: CI s -> s

  * Remove instance FoldCase s â‡’ FoldCase [s]

  * Add instance FoldCase String


  0.1  @  Sun Feb 6 23:54:22 UTC 2011

  * Initial release
basic-deps:
  bytestring: '>=0.9 && <0.11'
  base: '>=4.7 && <5'
  unicode-transforms: '>=0.1.0.1 && <0.4'
  text: '>=1.1.1 && <1.3'
  hashable: '>=1.0 && <1.4'
  deepseq: '>=1.1 && <1.5'
all-versions:
- '2.0'
- 2.0.0.1
- 2.0.1
author: |-
  Bas van Dijk,
  Patrick Pelletier
latest: 2.0.1
description-type: markdown
description: |
  Latest:
  [![Hackage](https://img.shields.io/hackage/v/normalization-insensitive.svg)](https://hackage.haskell.org/package/normalization-insensitive)
  Linux:
  [![Build Status](https://travis-ci.org/ppelleti/normalization-insensitive.svg?branch=master)](https://travis-ci.org/ppelleti/normalization-insensitive)
  Windows:
  [![Build status](https://ci.appveyor.com/api/projects/status/0qhwhc1cfsphf263/branch/master?svg=true)](https://ci.appveyor.com/project/ppelleti/normalization-insensitive/branch/master)

  The module `Data.Unicode.NormalizationInsensitive` provides the `NI`
  type constructor which can be parameterized by a string-like type like:
  `String`, `ByteString`, `Text`, etc.. Comparisons of values of the resulting
  type will be insensitive to normalization.

  This is very similar in spirit to the [`case-insensitive`][1] package, and is
  in fact based on the same code.

  This package uses [NFC][2] internally, although that shouldn't matter to
  you, unless you use `unsafeMk`.

  [1]: https://hackage.haskell.org/package/case-insensitive
  [2]: https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms
license-name: BSD-3-Clause
