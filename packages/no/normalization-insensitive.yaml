homepage: https://github.com/ppelleti/normalization-insensitive
changelog-type: text
hash: d2544296187b57c9de39af2e0854d4ce79ed3dace8841e53137e0ceff25b58fd
test-bench-deps:
  test-framework-hunit: ! '>=0.2.4 && <0.4'
  bytestring: ! '>=0.9 && <0.11'
  test-framework: ! '>=0.2.4 && <0.9'
  base: ! '>=4.7 && <5'
  text: ! '>=1.1.1 && <1.3'
  criterion: ! '>=0.6.1 && <1.4'
  normalization-insensitive: -any
  HUnit: ! '>=1.2.2 && <1.7'
  hashable: ! '>=1.0 && <1.3'
  deepseq: ! '>=1.1 && <1.5'
maintainer: Patrick Pelletier <code@funwithsoftware.org>
synopsis: Normalization insensitive string comparison
changelog: ! "2.0.1\n\n* Expose 'normalized'\n\n\n2.0.0.1\n\n* Avoid using Data.ByteString.UTF8.Normalize,
  which was deprecated in\n  unicode-transforms-0.2.0\n\n\n2.0\n\n* New package normalization-insensitive
  based on case-insensitive\n\n\n1.2.0.5\n\n* Support HUnit-1.3\n* Support criterion-1.1\n*
  Updated .nix files\n\n\n1.2.0.4\n\n* Fixed #17: https://github.com/basvandijk/case-insensitive/issues/17\n\n\n1.2.0.3\n\n*
  Add CHANGELOG to extra-source files so that it shows up on Hackage\n\n\n1.2.0.2\n\n*
  Bump base and deepseq upper bounds for GHC 7.10 compatibility\n\n* Add case-insensitive.nix
  and default.nix\n\n* Fix #14: Build failure with GHC 7.2.2\n\n* Fix #8: Don't unnecessarily
  use NoImplicitPrelude\n\n\n1.2.0.1\n\n* Solved warnings on GHC-7.8.3\n\n* Bump text
  upper version bounds\n\n\n1.2.0.0\n\n* Derived a Data instance for CI\n\n\n1.1.0.3\n\n*
  Support text-1.1\n\n\n1.1.0.2\n\n* Support text-1.0\n\n\n1.1.0.1\n\n* Fixed bad
  character L178\n\n\n1.1\n\n* Added the Data.CaseInsensitive.Unsafe module\n\n* Mark
  Data.CaseInsensitive.Internal as Unsafe\n\n\n1.0.0.2\n\n*  Support criterion-0.8\n\n\n1.0.0.1\n\n*
  Fix building on GHC-6.12.1\n\n* Bump base upper bound for GHC 7.7\n\n* Added a NEWS
  file\n\n\n1.0  @  Mon Jan 28 14:39:05 UTC 2013\n\n* Make package ready for the Haskell
  Platform\n\n* Drop the UnicodeSyntax, TypeSynonymInstances and FlexibleInstances\n
  \ language extensions\n\n* Add instance NFData s => NFData (CI s)\n\n* Add a hidden
  method to the FoldCase type class:\n    foldCaseList :: [s] -> [s]\n    foldCaseList
  = L.map foldCase\n\n* Add instance FoldCase a => FoldCase [a] where\n        foldCase
  = foldCaseList\n\n* Add instance FoldCase Char where\n        foldCase     = toLower\n
  \       foldCaseList = TL.unpack . TL.toCaseFold . TL.pack\n\n* Added a simple test
  suite\n\n* Added a simple benchmark\n\n* Added a rewrite rule to make 'mk' more
  efficient on strict\n  ByteStrings\n\n\n0.4.0.4  @  Fri Dec 14 07:06:58 UTC 2012\n\n*
  Support hashable-1.2\n\n\n0.4.0.3  @  Sat Aug 18 07:20:49 UTC 2012\n\n* Improve
  performance of foldCase on sctrict and lazy ByteStrings\n\n\n0.4.0.2  @  Thu Aug
  16 14:58:33 UTC 2012\n\n* Declare Data.CaseInsensitive to be Trustworthy\n\n* Support
  base-4.6\n\n* Support bytestring-0.10\n\n\n0.4.0.1  @  Wed Dec 14 15:24:55 UTC 2011\n\n*
  Support base-4.5\n\n\n0.4  @  Thu Oct 27 18:29:58 UTC 2011\n\n* Remove instance
  FoldCase Char\n\n* Perform proper case folding on Strings:\n  -instance FoldCase
  String where foldCase = L.map toLower\n  +instance FoldCase String where foldCase
  = TL.unpack . TL.toCaseFold . TL.pack\n\n\n0.3.0.1  @  Mon Aug 8 06:28:21 UTC 2011\n\n*
  Support base-4.4\n\n\n0.3  @  Thu Jul 14 07:38:52 UTC 2011\n\n* Add instance Hashable
  s => Hashable (CI s)\n\n\n0.2.0.2  @  Thu Jun 30 22:24:23 UTC 2011\n\n* Moved from
  darcs on code.haskell.org\n  to git on githb.com\n\n\n0.2.0.1  @  Tue Mar 29 20:30:32
  UTC 2011\n\n* Drop dependency on base-unicode-symbols\n\n\n0.2  @  Mon Feb 7 20:18:34
  UTC 2011\n\n* Export foldedCase :: CI s -> s\n\n* Remove instance FoldCase s â‡’ FoldCase
  [s]\n\n* Add instance FoldCase String\n\n\n0.1  @  Sun Feb 6 23:54:22 UTC 2011\n\n*
  Initial release\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.7 && <5'
  unicode-transforms: ! '>=0.1.0.1 && <0.4'
  text: ! '>=1.1.1 && <1.3'
  hashable: ! '>=1.0 && <1.3'
  deepseq: ! '>=1.1 && <1.5'
all-versions:
- '2.0'
- '2.0.0.1'
- '2.0.1'
author: ! 'Bas van Dijk,

  Patrick Pelletier'
latest: '2.0.1'
description-type: markdown
description: ! 'Latest:

  [![Hackage](https://img.shields.io/hackage/v/normalization-insensitive.svg)](https://hackage.haskell.org/package/normalization-insensitive)

  Linux:

  [![Build Status](https://travis-ci.org/ppelleti/normalization-insensitive.svg?branch=master)](https://travis-ci.org/ppelleti/normalization-insensitive)

  Windows:

  [![Build status](https://ci.appveyor.com/api/projects/status/0qhwhc1cfsphf263/branch/master?svg=true)](https://ci.appveyor.com/project/ppelleti/normalization-insensitive/branch/master)


  The module `Data.Unicode.NormalizationInsensitive` provides the `NI`

  type constructor which can be parameterized by a string-like type like:

  `String`, `ByteString`, `Text`, etc.. Comparisons of values of the resulting

  type will be insensitive to normalization.


  This is very similar in spirit to the [`case-insensitive`][1] package, and is

  in fact based on the same code.


  This package uses [NFC][2] internally, although that shouldn''t matter to

  you, unless you use `unsafeMk`.


  [1]: https://hackage.haskell.org/package/case-insensitive

  [2]: https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms

'
license-name: BSD3
