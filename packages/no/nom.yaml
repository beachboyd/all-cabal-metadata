homepage: https://github.com/bellissimogiorno/nominal#readme
changelog-type: ''
hash: 61484470ca2d65ac72831a7be3f4920be78eb8dd9eee824ef88f282b8b1b236c
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  doctest: '>=0.15 && <0.17'
  data-default: -any
  base-compat: '>=0.10.5 && <0.12'
  nom: -any
  QuickCheck: -any
  template-haskell: -any
maintainer: murdoch.gabbay@gmail.com
synopsis: Name-binding & alpha-equivalence
changelog: ''
basic-deps:
  extra: '>=1.6.9 && <1.7'
  flow: '>=1.0.20 && <1.1'
  base: '>=4.7 && <5'
  TypeCompose: '>=0.9.14 && <0.10'
  syb: '>=0.7 && <0.8'
  Unique: '>=0.4.7 && <0.5'
  data-default: '>=0.7.1 && <0.8'
  containers: '>=0.5.11 && <0.6.3'
  QuickCheck: '>=2.11.3 && <2.13.3'
  algebra: '>=4.3.1 && <4.4'
  finite-typelits: '>=0.1.4 && <0.2'
all-versions:
- 0.1.0.0
author: Murdoch J. Gabbay
latest: 0.1.0.0
description-type: haddock
description: |-
  Nominal-flavoured implementation of data in a context of local names, following the ideas in <https://link.springer.com/article/10.1007/s001650200016 a new approach to abstract syntax with variable binding> (see also <http://www.gabbay.org.uk/papers.html#newaas-jv author's pdfs>).
  __The recommended landing page is "Language.Nominal", so please go there first.__ See also: a tutorial in "Language.Nominal.Examples.Tutorial"; a short development of untyped lambda-calculus in "Language.Nominal.Examples.UntypedLambda"; an example development of System F in "Language.Nominal.Examples.SystemF"; and an example development of an EUTxO-style blockchain in "Language.Nominal.Examples.IdealisedEUTxO".
license-name: BSD-3-Clause
