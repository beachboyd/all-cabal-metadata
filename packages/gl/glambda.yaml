homepage: https://github.com/goldfirere/glambda
changelog-type: markdown
hash: f5b3087f3a007a1b9f9771326cb437bade88a3e782828d336f21aa0529d8fca3
test-bench-deps:
  ansi-wl-pprint: ! '>=0.6.7.1'
  base: ==4.*
  parsec: ! '>=3.1'
  mtl: ! '>=2.2.1'
  tasty-hunit: ! '>=0.9'
  glambda: -any
  transformers: ! '>=0.4.0.0'
  tasty: ! '>=0.8.1'
  template-haskell: -any
maintainer: Richard Eisenberg <rae@cs.brynmawr.edu>
synopsis: A simply typed lambda calculus interpreter, written with GADTs
changelog: ! 'Release notes for glambda

  =========================


  1.0.2

  -----


  Update package dependencies to drop dependency on `either`.


  1.0.1

  -----


  Update package dependencies to drop dependency on `errors`.


  1.0

  ---


  Initial release.

'
basic-deps:
  ansi-wl-pprint: ! '>=0.6.7.1'
  haskeline: ! '>=0.7.1.1'
  base: ==4.*
  parsec: ! '>=3.1'
  containers: ! '>=0.5'
  mtl: ! '>=2.2.1'
  glambda: -any
  transformers: ! '>=0.4.0.0'
  directory: ! '>=1.2.0.1'
all-versions:
- '1.0'
- '1.0.1'
- '1.0.2'
author: Richard Eisenberg <rae@cs.brynmawr.edu>
latest: '1.0.2'
description-type: markdown
description: ! "A Practical Introduction to Haskell GADTs\n=========================================\n\nThis
  repo and these notes are for a talk given at [LambdaConf][1] in\nBoulder, CO, USA,
  on 22 May, 2015.\n\nSee below for more information about `glambda` itself.\n\nSetup\n-----\n\n**Do
  this first!**\n\nWe will be working from my [glambda][2] project to learn about
  Generalized\nAlgebraic Datatypes (GADTs). The `glambda` package has a non-trivial
  set\nof dependencies. While I'm introducing myself and GADTs, generally, it would\nbe
  wise to download and compile all of the dependencies onto your laptop.\nThen, when
  we get to hands-on exercises, you'll be all ready to go.\n\nHere's what to do\n\n
  \   > git clone git://github.com/goldfirere/glambda.git\n    > cd glambda\n    >
  cabal sandbox init\n    > cabal install --only-dependencies --enable-tests -j<#
  of CPUs you have>\n\nThis should make your computer spin for a little while. In
  the meantime,\nenjoy the talk! (If you have trouble with `cabal sandbox`, possibly
  because\nof an old `cabal`, try the sequence of commands above without that step.)\n\nExercises
  1 and 2 do *not* require those dependencies, so you can work on\nthem while compiling
  dependencies.\n\nInstructions for exercises:\n - [Exercise 1](Exercise1.md)\n -
  [Exercise 2](Exercise2.md)\n - [Exercise 3](Exercise3.md)\n\n[1]: http://www.degoesconsulting.com/lambdaconf-2015/\n[2]:
  https://github.com/goldfirere/glambda\n\nMore information about `glambda` appears
  below:\n\nThe Glamorous Glambda Interpreter\n=================================\n\nGlambda
  is a simply-typed lambda calculus interpreter. While it is intended\nto be easy-to-use
  and help users learn about the lambda calculus, its real\nstrength is its implementation,
  which makes heavy use of GADTs, and is designed\nto serve as a showcase of writing
  a real-world program with extra compile-time\nguarantees.\n\nThis manual focuses
  only on the user experience. The structure of the code\nwill be described in a series
  of GADT programming tutorials coming out\nReal Soon Now.\n\nExample session\n---------------\n\nSaying
  `cabal install glambda` will produce an executable `glam`. `glam` is\nthe lambda-calculus
  interpreter. It is GHCi-like, accepting commands beginning\nwith a `:`. Here is
  an example session:\n\n~~~\n                   \\\\\\\\\\\\\n                    \\\\\\\\\\\\\n
  \                /-\\ \\\\\\\\\\\\\n                |   | \\\\\\\\\\\\\n                 \\-/|
  \ \\\\\\\\\\\\\n                    | //\\\\\\\\\\\\\n                 \\-/ ////\\\\\\\\\\\\\n
  \                   //////\\\\\\\\\\\\\n                   //////  \\\\\\\\\\\\\n
  \                 //////    \\\\\\\\\\\\\nWelcome to the Glamorous Glambda interpreter,
  version 1.0.\nλ> (\\x:Int.x + 2) 5\n7 : Int\nλ> revapp = \\x:Int.\\y:Int->Int.y
  x\nrevapp = λ#. λ#. #0 #1 : Int -> (Int -> Int) -> Int\nλ> not = \\b:Bool.if b then
  false else true\nnot = λ#. if #0 then false else true : Bool -> Bool\nλ> revapp
  (3 < 4) not\nBad function application.\n  Function type: Int -> (Int -> Int) ->
  Int\n  Argument type: Bool\nin the expression 'revapp (3 < 4)'\nλ> not (3 < 4)\nfalse
  : Bool\nλ> :type revapp (10 % 3)\n(λ#. λ#. #0 #1) (10 % 3) : (Int -> Int) -> Int\nλ>
  :step revapp (10 % 3) (\\x:Int.x * 2)\n(λ#. λ#. #0 #1) (10 % 3) (λ#. #0 * 2) : Int\n-->
  (λ#. #0 (10 % 3)) (λ#. #0 * 2) : Int\n--> (λ#. #0 * 2) (10 % 3) : Int\n--> 10 %
  3 * 2 : Int\n--> 1 * 2 : Int\n--> 2 : Int\n2 : Int\nλ> :quit\nGood-bye.\n~~~\n\nAs
  you can see, glambda uses [de Bruijn indices][3] to track variable binding.\nIn
  the actual output (if your console supports it), the binders (`#`) and\nusage sites
  (`#0`, `#1`) are colored so that humans can easily tell which\nvariable is used
  where.\n\n[3]: https://en.wikipedia.org/wiki/De_Bruijn_index\n\nYou can also see
  above that the input to glambda must be fully annotated;\nglambda does *not* do
  type inference. However, note that types on binders\ndo not appear in the output:
  once an input is type-checked, the type information\nis erased. Yet, because of
  the use of GADTs in the implementation, we\ncan be sure that the reductions are
  type-safe.\n\nThe Language\n------------\n\nThe glambda language is an explicitly
  typed simply typed lambda calculus,\nwith integers (`Int`) and booleans (`Bool`).
  The following operators are\nsupported, with their usual meanings, associativity,
  and precedence:\n\n    + - * / % < <= > >= ==\n\nThe only slightly unusual member
  of this list is `%`, which takes a modulus,\nlike in C-inspired languages. The division
  operator `/` does integer division,\nnaturally.\n\nGlambda supports a ternary conditional
  operator, demonstrated in the\nsnippet above, as `if <boolean expression> then <exp>
  else <exp>`.\n\nInteger constants must be positive. Subtract from 0 to get a negative
  integer.\n\nBoolean constants are spelled `false` and `true`.\n\nComments are exactly
  as in Haskell: `--` starts a line comment, and\n`{- ... -}` is a block comment.
  Comments can be nested.\n\nVariable names are as in Haskell: names must start with
  a letter or\nunderscore (although case is immaterial) and then may have letters,
  numbers,\nand underscores.\n\nThe language is not whitespace-aware.\n\nMost of what
  we have seen are *expressions*. Glambda also supports *statements*.\nA statement
  is either an expression or has the form `<name> = <expression>`.\nThis latter form
  assigns a global variable to the expression. These global\nvariables are expanded
  during type-checking: they are more like macros than\nproper cells holding information.
  Statements can be separated by `;`.\n\nThe Interface\n-------------\n\nWhen you
  type an expression into the glambda interpreter, it is evaluated\nfully, and the
  value is printed, along with its type.\n\nWhen you type a global variable assignment,
  that variable is assigned, and\nits (unevaluated) contents are printed, along with
  its type.\n\nYou can also run commands, as described below. Commands all start with
  a\nleading `:`, and that `:` must be the first character on the input line.\nArguments
  to a command are given after the command itself. Commands can\nbe abbreviated by
  typing an unambiguous prefix to a command. For example,\n`:t` can be used to get
  an expression's type, because no other command\nbegins with `t`.\n\nCommands\n--------\n\n`:quit`
  quits the glambda interpreter.\n\n`:lex` lexes the given text and pretty-prints
  the result.\n\n`:parse` parses the given text and pretty-prints the result.\n\n`:eval`
  type-checks and evaluates the given expression. This is\nthe default behavior at
  the command line.\n\n`:step` runs the given expression through the single-step semantics.\nThis
  shows you every step of the way from your expression down to\na value. This uses
  a *different* evaluation strategy than `:eval` does,\nbut the result should always
  be the same.\n\n`:type` gives you the type of an expression.\n\n`:all` runs both
  `:eval` and `:step` on an expression.\n"
license-name: BSD3
