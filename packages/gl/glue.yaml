homepage: ''
changelog-type: ''
hash: 3579cadc60b0b623732e2a9771c1179db11227e2882a5130e11d5d1fcf322c5a
test-bench-deps:
  ekg-core: -any
  base: ==4.*
  time: -any
  unordered-containers: -any
  hspec: ! '>=2.1.10'
  text: -any
  monad-control: -any
  async: -any
  lifted-base: -any
  quickcheck-instances: -any
  hashable: -any
  transformers-base: -any
  transformers: -any
  QuickCheck: -any
maintainer: github@futurenotfound.com
synopsis: Make better services.
changelog: ''
basic-deps:
  ekg-core: ! '>=0.1.0.4 && <1'
  base: ! '>=4.6 && <4.9'
  time: -any
  unordered-containers: -any
  text: -any
  glue: -any
  monad-loops: -any
  monad-control: -any
  async: -any
  lifted-base: -any
  hashable: -any
  transformers-base: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2
- 0.1.3
- 0.2.0
author: Sean Parsons
latest: 0.2.0
description-type: markdown
description: ! "Building Better Services\n========================\n\n[![Build Status](https://secure.travis-ci.org/seanparsons/glue.svg)](http://travis-ci.org/seanparsons/glue)\n\nThis
  package provides methods to deal with the common needs of services talking to other
  services, like timeouts and retries, treating these as cross-cutting concerns that
  aren't tied to a specific transport like HTTP.\n\nExamples\n========\n\nBatching\n--------\n\nIn
  a social network there may be another service that returns user records, if this
  social network is really busy it would likely be more efficient to capture multiple
  calls and dispatch them as one multi-get call.\n\nThe batchingService function creates
  both single and multi-get calls (hence the \"fmap snd\" below), which accumulate
  requests over a user defined window in time and dispatch them once that window has
  passed.\n\n```haskell\ndata User = User Int String\n\nmakeUser :: Int -> User\nmakeUser
  userId = User userId (\"User \" ++ (show userId))\n\nuserService :: S.HashSet Int
  -> IO (M.HashMap Int User)\nuserService request = do\n  threadDelay 500\n  return
  $ M.fromList $ fmap (\\r -> (r, makeUser r)) $ S.toList request\n\nbatchedUserService
  :: IO (S.HashSet Int -> IO (M.HashMap Int User))\nbatchedUserService = fmap snd
  $ batchingService defaultBatchingOptions userService\n```\n\n\nRetries\n-------\n\nOften
  we want to retry service calls if they've failed because it might've been a transient
  error that subsequently succeeds.\n\n```haskell\nfailingService :: IORef Int ->
  Int -> IO Int\nfailingService ref request = do\n  counter <- atomicModifyIORef'
  ref (\\c -> (c + 1, c + 1))\n  if counter `mod` 3 == 0 then fail \"Bang!\" else
  return (request * 2)\n\nnotSoFailingService :: IO (Int -> IO Int)\nnotSoFailingService
  = do\n  ref <- liftIO $ newIORef 0\n  return $ retryingService defaultRetryOptions
  $ failingService ref\n```\n\nCaching\n-------\n\n```haskell\nserviceThatNeedsCaching
  :: Int -> IO Int\nserviceThatNeedsCaching request = do\n  putStrLn \"Doing Something
  Expensive!\"\n  return (request * 2)\n\ncachedService :: IO (Int -> IO Int)\ncachedService
  = do\n  cache <- newAtomicLRU $ Just 100\n  return $ cacheWithLRU cache serviceThatNeedsCaching\n```\n"
license-name: BSD-3-Clause
