homepage: https://github.com/mseri/fbmessenger-api-hs#fbmessenger-api
changelog-type: ''
hash: 45a564e9426505ec2a90013b6d20fcbe3b82ef4d6552d858dc084242af030556
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  filepath: -any
  fbmessenger-api: -any
  aeson: -any
maintainer: marcello.seri@gmail.com
synopsis: High-level bindings to Facebook Messenger Platform API
changelog: ''
basic-deps:
  warp: -any
  http-client: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  stm: -any
  base: ! '>=4.7 && <5'
  servant-client: ! '>=0.7.0'
  unordered-containers: -any
  text: -any
  servant-server: ! '>=0.7.0'
  servant: ! '>=0.7.0'
  fbmessenger-api: -any
  http-client-tls: -any
  mime-types: -any
  monad-logger: -any
  transformers: -any
  string-conversions: -any
  wai-logger: -any
  http-types: -any
  aeson: -any
  http-media: -any
all-versions:
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.2.1
author: Marcello Seri
latest: 0.1.2.1
description-type: markdown
description: ! "# FBMessenger API\n\n[![Build Status](https://travis-ci.org/mseri/fbmessenger-api-hs.svg?branch=master)](https://travis-ci.org/mseri/fbmessenger-api-hs)\n![Hackage](https://img.shields.io/hackage/v/fbmessenger-api.svg)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/fbmessenger-api.svg)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\nHigh-level
  bindings to the [Messenger Platform API](https://developers.facebook.com/docs/messenger-platform/)
  based on [servant](https://haskell-servant.github.io/) library.\nWe try to maintain
  the overall structure compatible with [telegram-api](https://github.com/klappvisor/haskell-telegram-api).\n\nThere
  was an incongruence between the spec and the actual serialization of the webhook
  requests that became apparent when testing an actual messenger bot. For this reason
  you should **use only versions of the library that are `>= 0.1.1`**!\n\nThis library
  is alpha software and the API design could change to improve composability, ergonomicity
  and ease of use. We recommend using `stack` for dealing with this library (you will
  need to add it to the `extra-deps` in `stack.yaml`).\n\nNOTE (1.6.2016): the WelcomeMessageSendAPI
  recently changed. The Platform no-longer accepts any welcome message api-wise (only
  a custom payload is now allowed). The library will be updated to reflect this change
  as soon as I can (otherwise you are welcome to submit a PR). To setup/modify the
  Welcome Message you have to use the online interface.\n\n# Usage\n\nBefore being
  able to test and use the bot, you will need to verify your key.\nThe example app
  in `example-app/example.hs` contains a servant server that implements the verification
  and a trivial echo-server.\nYou can run it with\n\n```{.bash}\nVERIFY_TOKEN=\"your_token_goes_here\"
  stack exec example\n```\n\nand pass it some data (here assuming you have `httpie`
  installed)\n\n```{.bash}\nhttp get 'localhost:3000/webhook/?hub.verify_token=your_token_goes_here&hub.challenge=test'\nhttp
  post :3000/webhook < test-files/wsTextMessageRequest.json\n```\n\nOtherwise run
  `stack ghci` then copy and paste the following\n\n```{.haskell}\n:m +Network.HTTP.Client\n:m
  +Network.HTTP.Client.TLS\n:m +Data.Text\n\nlet token = Token $ Data.Text.pack \"your_token_goes_here\"\nlet
  manager = newManager tlsManagerSettings\nmanager >>= \\m -> subscribedApps $ Just
  token m\n```\n\nYou should get a positive response or (in case of inactive token):\n\n```{.haskell}\nLeft
  (FailureResponse {responseStatus = Status {statusCode = 400, statusMessage = \"Bad
  Request\"}, responseContentType = application/json, responseBody = \"{\\\"error\\\":{\\\"message\\\":\\\"Invalid
  OAuth access token.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":190,\\\"fbtrace_id\\\":\\\"ESxHmUos2B+\\\"}}\"})\n```\n\n#
  Contribution\n\n1. Fork repository\n2. Do some changes\n3. Create pull request\n4.
  Wait for CI build and review\n\nYou can use stack to build the project\n\n    stack
  build\n\nTo run tests\n\n    stack test\n\n# TODO\n\n- Tests for the network part
  of the api (hard, requires a bot setted up and permanently running just for the
  tests)\n- Check if assumption on https://github.com/mseri/fbmessenger-api-hs/blob/master/src/Web/FBMessenger/API/Bot/WebhookAPI.hs#L99
  is safe\n- Cleanup Webhooks API Requests and add higher level helpers\n"
license-name: BSD-3-Clause
