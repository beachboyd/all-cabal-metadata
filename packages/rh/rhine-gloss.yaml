homepage: ''
changelog-type: markdown
hash: 7cd7514d9b01edb959dec15a36b2d3d5f3d4f896c83b0a9089a797f4e1602d8c
test-bench-deps: {}
maintainer: programming@manuelbaerenz.de
synopsis: ! 'Wrapper to run reactive programs written in Rhine

  with Gloss as backend'
changelog: ! '# Revision history for rhine-gloss


  ## 0.4.0.0 -- 2017.12.04


  * Version bump


  ## 0.3.0.0  -- 2017-11-30


  * Added simple example.


  ## 0.2.0.0  -- 2017-11-29


  * First version. Version numbers follow rhine.

'
basic-deps:
  gloss: ==1.11.*
  dunai: ==0.4.*
  base: ! '>=4.7 && <5'
  rhine-gloss: -any
  rhine: ==0.4.*
all-versions:
- '0.3.0.0'
- '0.4.0.0'
author: Manuel BÃ¤renz
latest: '0.4.0.0'
description-type: markdown
description: ! "# README\n\nThis package provides a simple wrapper for the `gloss`
  library,\nor rather the function `Graphics.Gloss.play`,\nenabling you to write `gloss`
  applications as synchronous signal functions.\nAn example \"gears\" program, which
  you can run as `cabal run gloss-gears`,\nnow becomes as simple as:\n\n```haskell\nimport
  FRP.Rhine.Gloss\n\n\n-- | Calculate a gear wheel rotated by a certain angle.\ngears
  :: Float -> Picture\ngears angle = color green $ pictures\n  $ circleSolid 60\n
  \ : map (rotate angle) [ rotate (45 * n) $ rectangleSolid 20 150 | n <- [0..3] ]\n\n--
  | Rotate the gear with a constant angular velocity.\nmainSyncSF :: GlossSyncSF a\nmainSyncSF
  = timeInfoOf sinceStart >>> arr (* 50) >>> arr gears\n\nmain :: IO ()\nmain = flowGloss
  (InWindow \"rhine-gloss-gears\" (400, 400) (10, 10)) (greyN 0.3) 30\n     $ buildGlossRhine
  Just mainSyncSF\n```\n"
license-name: BSD3
