homepage: https://github.com/opyapeus/jmonkey#readme
changelog-type: markdown
hash: 65c224d093f455c174e73aaa627977deaa43a8ae3fa246a345a75974fbfead23
test-bench-deps:
  free: -any
  base: ! '>=4.7 && <5'
  jmacro: -any
  casing: -any
  jmonkey: -any
maintainer: opyapeus@gmail.com
synopsis: ''
changelog: ! '# Changelog for jmonkey


  ## Unreleased changes

'
basic-deps:
  warp: -any
  free: -any
  lucid: -any
  clay: -any
  wai: -any
  base: ! '>=4.7 && <5'
  text: -any
  jmacro: -any
  casing: -any
  jmonkey: -any
  http-types: -any
all-versions:
- '0.1.0.0'
author: peus
latest: '0.1.0.0'
description-type: markdown
description: ! '# jmonkey


  [![Build status](https://travis-ci.org/opyapeus/jmonkey.svg?branch=master)](https://travis-ci.org/opyapeus/jmonkey)


  Jmonkey is very restricted but handy EDSL for javascript.


  The DOM effect that jmonkey can do is just to change classes and ids of HTML elements.


  So it only supports some on-actions and condition checks.


  Instead of limited functions, it can be called internally unlike other rich javascript
  EDSLs that require external calls.


  If you manage some states for complex frontend actions, jmonkey won''t be usable.


  Jmonkey may be useful when you implement some actions that css can not handle.


  ## Example


  A practical implementation is shown in [example](example).


  Clone this repository first, and execute following.


  ```sh

  stack run

  ```


  Then access to localhost:3000.


  ## Documentation


  - [API documentation on Hackage](#TODO)


  ## Contribution


  If you find a bug or want new features or else, making issues and PRs are very welcome.'
license-name: MIT
