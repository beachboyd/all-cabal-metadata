homepage: https://github.com/ivanperez-keera/dunai
changelog-type: ''
hash: 38d5faa5583e99e794ccd2e7926bedf894b897508e83ac31362730035ee36115
test-bench-deps: {}
maintainer: ivan.perez@keera.co.uk
synopsis: Generalised reactive framework supporting classic, arrowized and monadic
  FRP.
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  transformers-base: -any
  transformers: -any
all-versions:
- '0.0.1.0'
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
author: Ivan Perez, Manuel BÃ¤renz
latest: '0.3.0.0'
description-type: haddock
description: ! 'Dunai is a DSL for strongly-typed CPS-based composable transformations.


  Dunai is based on a concept of Monadic Stream Functions (MSFs). MSFs are

  transformations defined by a function @unMSF :: MSF m a b -> a -> m (b, MSF m a
  b)@

  that executes one step of a simulation, and produces an output in a monadic

  context, and a continuation to be used for future steps.


  MSFs are a generalisation of the implementation mechanism used by Yampa,

  Wormholes and other FRP and reactive implementations.


  When combined with different monads, they produce interesting effects. For

  example, when combined with the @Maybe@ monad, they become transformations

  that may stop producing outputs (and continuations). The @Either@ monad gives

  rise to MSFs that end with a result (akin to Tasks in Yampa, and Monadic

  FRP).


  Flattening, that is, going from some structure @MSF (t m) a b@ to @MSF m a b@

  for a specific transformer @t@ often gives rise to known FRP constructs. For

  instance, flattening with @EitherT@ gives rise to switching, and flattening

  with @ListT@ gives rise to parallelism with broadcasting.


  MSFs can be used to implement many FRP variants, including Arrowized FRP,

  Classic FRP, and plain reactive programming. Arrowized and applicative

  syntax are both supported.


  For a very detailed introduction to MSFs, see:

  <http://dl.acm.org/citation.cfm?id=2976010>

  (mirror: <http://www.cs.nott.ac.uk/~psxip1/#FRPRefactored>).'
license-name: BSD3
