homepage: ''
changelog-type: ''
hash: 7a73a8f7b33fbcc0a48573e169f23570cbc9094fe4b1d857ff22ab9ef66ef24f
test-bench-deps:
  MissingH: -any
  duplo: -any
  base: ==4.7.*
  HUnit: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: ken@pixbi.com
synopsis: Frontend development build tool
changelog: ''
basic-deps:
  warp: -any
  shake: -any
  MissingH: -any
  bytestring: -any
  wai: -any
  duplo: -any
  base: ==4.7.*
  base64-bytestring: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  executable-path: -any
  system-fileio: -any
  filepath: -any
  process: -any
  containers: -any
  ansi-terminal: -any
  lens: -any
  regex-compat: -any
  language-javascript: -any
  utf8-string: -any
  mtl: -any
  transformers: -any
  text-format: -any
  system-filepath: -any
  fsnotify: -any
  scotty: -any
  http-types: -any
  aeson: -any
  directory: -any
all-versions:
- 1.6.0
- 1.6.1
- 1.6.2
- 1.6.3
- 1.6.4
- 1.6.5
- 1.6.6
- 1.6.9
- 1.6.18
- 1.6.19
- 1.8.0
- 1.8.1
author: Kenneth Kan
latest: 1.8.1
description-type: markdown
description: ! "# duplo\n\nA opinionated, framework-less build tool for web applications\n\n\n##
  Installation\n\nIf \"npm\" sounds familiar:\n\n1. Get a [Mac](http://www.apple.com/mac/)\n2.
  Install [Homebrew](http://brew.sh/)\n3. Get [npm](http://npmjs.org/): `brew install
  npm`\n4. Get [GMP](https://gmplib.org/): `brew install gmp`\n5. Get pre-1.x.x [Component](https://github.com/componentjs):
  `npm install -g\n   component@0.19.9`\n6. Get [duplo](https://github.com/pixbi/duplo):
  `npm install -g duplo`\n\nIf \"cabal\" sounds more familiar:\n\n```sh\n$ git clone
  git@github.com:pixbi/duplo.git\n$ cd duplo\n$ cabal install\n```\n\n\n## Usage\n\n-
  `duplo help` displays all commands.\n- `duplo info` displays the version for this
  duplo installation.\n- `duplo init <user> <repo>` scaffolds a new duplo repo in
  the current\n  directory.\n- `duplo build` builds the project. `DUPLO_ENV` defaults
  to `developoment`.\n- `duplo dev`: starts a webserver, watches for file changes,
  and builds in\n  development environment.\n- `duplo test` builds test cases and
  run it in a browser.\n- `duplo production`: like `duplo dev` but builds in production
  environment\n- `duplo patch` bumps the patch version.\n- `duplo minor` bumps the
  minor version.\n- `duplo major` bumps the major version.\n\n\n## Guiding Principle\n\nThis
  is a build tool, not an application framework. It simply compiles and\nbuilds your
  codebase for you and does not inject a runtime into or impose a\nstructure on your
  application.\n\nHowever, it does have opinions, specifically:\n\n- [Jade](http://jade-lang.com/)
  over HTML\n- [Stylus](http://learnboost.github.io/stylus/) over CSS\n- [GitHub](http://github.com/)
  and by extension [git](http://git-scm.com/) for\n  source code management\n- [Heroku](https://www.heroku.com/)
  for application deployment\n- [Selenium](http://docs.seleniumhq.org/) for automated
  browser testing\n- [CircleCI](https://circleci.com/) for continuous integration\n\nThe
  idea is to manage and deploy your code exclusively with git and have\nCircleCI deals
  with deployment for you. However, duplo is a build tool; it\ndoesn't care about
  the exact structure of your application. This means that all\nscripts are dumped
  into one single file, and so are the stylesheets and the\nmarkup.\n\n\n## File Structure\n\n
  \   app/            --> Application code\n    app/index.jade  --> Entry point for
  markups. Only this file is compiled.\n                        Use Jade's include
  system to pull in other markups.\n    app/index.js    --> Application entry point.
  Only the top-level\n                        application's `index.js` is included
  and run. Its\n                        dependencies' are ignored.\n    app/assets/
  \    --> Asset files are copied as-is to build's top-level\n                        directory\n
  \   app/styl/       --> It contains \"special\" stylesheets that get loaded\n                        before
  any other stylesheets.\n    app/modules/    --> All other application code not listed
  above must be\n                        placed here. All files at the `app/` level
  are not\n                        included by default.\n    components/     --> Other
  repos imported via Component.IO\n    component.json  --> The Component.IO manifest\n
  \   dev/            --> Files here are included only when building in\n                        development
  mode.\n    dev/assets/     --> Copied as-is just like `app/assets/`. Files here
  would\n                        replace those with the same name under `app/assets/`.\n
  \   dev/modules/    --> Works just like `app/modules/`.\n    public/         -->
  Built files when developing. Not committed to source\n    tests/          --> Test
  files go here\n\n\n## Development\n\nDuring development, everything in the `dev/assets/`
  directory is copied over\nas-is *at the end* of the build process. This means that
  files in the directory\nwould replace whatever that has been built (or copied over
  from `app/assets/`)\nat their respective locations.\n\nAnything under `dev/modules/`
  would be treated just like those under\n`app/modules/`, that they would be concatenated/compiled
  into the respective\noutput files (i.e. `index.html`, `index.css`, or `index.js`).\n\nThis
  repo is checked with [git-vogue](https://github.com/anchor/git-vogue).\nIt's highly
  recommended that you use it for duplo development as well.\n\n\n## Testing\n\n```sh\n$
  duplo test\n```\n\nThe test suite contains:\n\n- a headless browser based on [PhantomJS](http://phantomjs.org/)
  and\n  [Mocha-Phantomjs](https://github.com/metaskills/mocha-phantomjs).\n- a cross-browser
  runner based on\n  [browserstack-runner](https://github.com/browserstack/browserstack-runner)\n\n###
  Write a test suite for your [duplo](https://github.com/pixbi/duplo) project\n\n```\nroot\n|--
  app/modules/\n    |-- a.js\n    |-- b.js\n    |-- c/\n        |- d.js\n|-- tests/\n
  \   |-- test-a.js\n    |-- test-b.js\n    |-- c/\n        |-- d.js\n```\n\nWhen
  testing your codebase, structure your project like the above. Note that\nthe path
  relative to `tests/` should correspond to the path relative to\n`app/modules/`.\n\nAn
  example of a test suite:\n\n```js\ndefine('name this to whatever but do not conflict
  with your module (e.g. `test-a`)',\n['moduleA'], function (a) {\n\n  describe('some
  text', function () {\n    it('should ...', function () {\n      // now you can use:\n
  \     //  expect()....\n      //  assert()....\n    });\n  });\n\n});\n```\n\nDuplo's
  test suite uses [mocha](http://mochajs.org/) and\n[chai.js](http://chaijs.com/).
  It also supports another powerful testing tool,\n[SinonJS](http://sinonjs.org/),
  so you may fake/mock any functions, ajax\nrequests, and timers yourself.\n\nYou
  may therefore use these functions:\n\n- mocha: `describe`, `it` and etc.\n- chai.js:
  `expect` and `assert`.\n- sinon.js: `sinon.spy`, `sinon.stub`, `sinon.useFakeTimers`
  and etc.\n\n### BrowserStack\n\nTo make your repo BrowserStack-runnable, modify
  this template and save it to\nthe root directory of your project (which is added
  to `.gitignore` to prevent\ninformation leakage into your git history):\n\n```json\n{\n
  \ \"username\": \"your-username-here\",\n  \"key\": \"your-key-here\",\n  \"test_path\":
  \"index.html\",\n  \"test_framework\": \"mocha\",\n  \"browsers\": [\n    {\n      \"browser\":
  \"chrome\",\n      \"browser_version\": \"latest\",\n      \"os\": \"OS X\",\n      \"os_version\":
  \"Mountain Lion\"\n    }\n  ]\n}\n```\n\n\n## Environment\n\nduplo injects the `DUPLO_ENV`
  global variable with the value from the\nenvironment variable of the same name when
  building. There is no default value.\n\n\n## Entry Point\n\nEvery application has
  a main entry point. In a duplo application, it is\n`app/index.js`. Each repo may
  contain its own `app/index.js` but only the repo\non which duplo is run does duplo
  execute `app/index.js`. Note that\n`app/index.js` is excluded when duplo commits
  via Component.IO so that the\nconsuming application does not see library index files
  when building the\nproject.\n\nNote that duplo only inspects the *top-level* `define()`.
  If you use\n`require()`, your program may not execute as duplo is not aware of anything\nother
  than `define()` declarations. The proper way to declare an entry point in\n`app/index.js`
  is:\n\n```js\ndefine('anyNameHere',\n[/* ... dependencies ... */],\nfunction (/*
  ... dependencies ... */) {\n  // Code here ...\n});\n```\n\n\n## Application Parameterization\n\nIf
  you need some build-time customization of the app, such as customizing each\nbuild
  with a JSON object of unique IDs and metadata, you can pass any string\nas the environment
  variable `DUPLO_IN`. The string is then turned into a\nJavaScript string and stored
  into a global variable.\n\nTo avoid special characters, `DUPLO_IN` must be base-64
  encoded.\n\nFor example, say you need to pass in a random ID for each build, you
  would\ninvoke:\n\n```sh\n// Content decoded as: `{\"id\":\"someId\"}`\n$ env DUPLO_IN=\"eyJpZCI6InNvbWVJZCJ9\"
  duplo\n```\n\nThen in `app/index.js`:\n\n```js\nvar someId = DUPLO_IN.id;\n```\n\nNote
  that all newline characters are removed before the string is wrapped into\na JavaScript
  string.\n\n\n## JavaScript Concatenation Order\n\nJavaScript files are not concatenated
  in any particular order. You must wrap\ncode inside an AMD module and declaring
  its dependencies. For code that needs\nto be executed at initialization, utilize
  the environment's initialization\nevent such as `document.addEventListener(\"DOMContentLoaded\")`
  to bootstrap the\nrest of the script.\n\n\n## CSS/Stylus Concatenation Order\n\nUnlike
  script files, where you place your CSS files within `app/` is\nsignificant. Stylus
  files will be concatenated in this order:\n\n    app/styl/variables.styl --> An
  optional variable file that gets injected\n                                into
  every Stylus file\n    app/styl/keyframes.styl --> Keyframes\n    app/styl/fonts.styl
  \    --> Font declarations\n    app/styl/reset.styl     --> Resetting existing CSS
  in the target\n                                environment\n    app/styl/main.styl
  \     --> Application CSS that goes before any module\n                                CSS\n
  \   app/**/*.styl           --> All other CSS files\n\nThere is no particular concatenation
  order between different dependencies.\n\n\n## HTML/Jade Concatenation Order\n\nJade
  files are concatenated in no particular order as the Jade include system\nis used
  for explicit ordering.\n\n\n## Automatic rewriting for Jade\n\nduplo does not and
  cannot peek into Jade's include system. However, it does\nautomatically expand paths
  in include statements to make the inclusion process\neasier. Take this example:\n\n```jade\ninclude
  index.jade\ninclude menu/index.jade\ninclude pixbi-helper/index.jade\n```\n\nIn
  the absence of a Component repo string (i.e. `<user>-<repo>`), the path is\nassumed
  to be pointing to a file under the `modules` directory in the current\nrepo. With
  a component repo string, it is assumed to also be pointing to a file\nunder the
  `modules` directory, but in the corresponding component's repo.\n\nThe above is
  effectively rewritten into these paths, relative to the top-level\nrepo's directory.\n\n```jade\ninclude
  app/modules/index.jade\ninclude app/modules/menu/index.jade\ninclude components/pixbi-helper/app/modules/index.jade\n```\n\n\n##
  A note on the `modules` directory\n\nBy now, it should be obvious that there are
  really two \"modes\" for any duplo\nrepo: an application mode and a library mode.
  In application mode, duplo acts\nas the top-level program, including other duplo
  repos via Component as\nlibraries. In this scenario, `app/index.js` and `app/index.jade`
  are included\ninto the build. Contrast this to the library mode, where only those
  in the\n\"second\" level (e.g. `modules/`, `assets/`, `styl/`) are included into
  the\nbuild.\n\n\n## Component Versions\n\nEach component's version is recorded in
  the `DUPLO_VERSIONS` global variable,\nin the form similar to:\n\n```json\n{\n  \"pixbi-main\":
  \"4.1.9\",\n  \"pixbi-launcher\": \"0.1.4\"\n}\n```\n\n\n## Dependency Selection\n\nSome
  cases require the repo to be polymorphic in the sense that we could\ngenerate different
  forms of the same codebase. For example, you may need to\nbuild the repo in an embeddable
  form which would exclude certain dependencies\nthat are required in its standalone
  form.\n\nIn this case you would include a `modes` attribute in the `component.json`\nmanifest
  file. The attribute would contain an `embeddable` and a `standalone`\nattributes,
  each of which would then contain an array of dependencies as\nspecified in the `dependencies`
  attribute to include.\n\nRunning duplo with the environment variable `DUPLO_MODE`
  set to `embeddable`\nwould build with the dependencies specified under `embeddable`
  while setting\n`MODE` to `standalone` would do the same with those specified under
  the\n`standalone` attribute. Otherwise duplo would just build with all dependencies.\n\nNote
  that dependency selection applies at the dependency level but not at the\nfile level
  within the components.\n\nAlso note that duplo caches between builds. When you switch
  dependency\nselection, remember to `duplo clean` your repo first.\n\nPutting it
  all together, an example of a `component.json`:\n\n```json\n{\n  \"dependencies\":
  {\n    \"pixbi/sdk\": \"1.1.1\",\n    \"pixbi/embeddable\": \"2.2.2\",\n    \"pixbi/standalone\":
  \"3.3.3\"\n  },\n  \"modes\": {\n    \"embeddable\": [\n      \"pixbi/standalone\"\n
  \   ],\n    \"standalone\": [\n      \"pixbi/embeddable\"\n    ]\n  }\n}\n```\n\n\n##
  Duplo Log\n\nNote that tasks are run in parallel so the display log may look scrambled
  from\nline to line. This is normal.\n\n\n## Developing duplo\n\nRight now duplo
  is published to both Hackage and NPM. Because of various\ncompatibility issues,
  each time duplo is published all of the following must be\ndone:\n\n1. Manually
  bump version in *both* `duplo.cabal` and `package.json`\n2. `$ git tag <version>`\n3.
  `$ util/publish.sh`\n4. `$ npm publish`\n5. [Publish to Hackage](http://hackage.haskell.org/upload)\n\nNote:
  *ALWAYS* always use [Stackage](http://www.stackage.org/) while do not\nspecify versions
  in the Cabal file. Just specify the dependencies by name and\nlet Stackage manage
  the versions.\n\n\n## Copyright and License\n\nCode and documentation copyright
  2014 Pixbi. Code released under the MIT\nlicense. Docs released under Creative Commons.\n"
license-name: MIT
