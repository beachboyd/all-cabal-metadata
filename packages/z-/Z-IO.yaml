homepage: https://github.com/haskell-Z/Z-IO
changelog-type: markdown
hash: 211617e77558a1c2e3af9b176d13c23030f2431a2aaae41b50144355ae3e73be
test-bench-deps:
  bytestring: -any
  Z-Data: -any
  base: -any
  hspec: '>=2.5.4'
  word8: -any
  HUnit: -any
  quickcheck-instances: -any
  zlib: -any
  hashable: -any
  scientific: -any
  QuickCheck: '>=2.10'
  primitive: -any
  Z-IO: -any
maintainer: winterland1989@gmail.com
synopsis: Simple and high performance IO toolkit for Haskell
changelog: |
  # Revision history for Z-IO

  ## 0.1.8.1  -- 2020-10-24

  * Export `ZStream` type from `Z.IO.BIO.Zlib`

  ## 0.1.8.0  -- 2020-10-24

  * Remove type index from `BufferedInput`, `BufferedOutput`.
  * Add `Z.IO.BIO` module to facilitate streaming process, and `Z.IO.BIO.Concurrent` to facilitate producer-consumer model.
  * Remove streamming related functions from `Z.IO.Buffered`, use `Z.IO.BIO` instead.
  * Move `Z.IO.Compression.Zlib` to `Z.IO.BIO.Zlib`, change API to `BIO` style.
  * Add `Z.IO.FileSystem.Watch` module, provides cross-platform filesystem watching.

  ## 0.1.7.0  -- 2020-10-24

  * Add `iso8016DateFormat`, change logger's default time format to include time zone.
  * Rename `warn` to `warning`, change `Level` to `Int` type alias in `Z.IO.Logger`, add `critical`.
  * Export `TimeVal` from `Z.IO.Environment`.
  * Add `getCPUInfo`, `getLoadAvg`, `getXXXMem` to `Z.IO.Environment`.

  ## 0.1.6.1  -- 2020-10-17

  * Export `ResUsage` from `Z.IO.Environment`.
  * Export `Level` from `Z.IO.Logger`.
  * Add linefeed with default logger formattor.

  ## 0.1.6.0  -- 2020-10-17

  * Fix a bug affects udp exception raising(simliar to the one fixed in 0.1.5.2).
  * Add `Z.IO.StdStream.Ansi` module, add a default colored logger.
  * Add `Z.IO.Time` module, for fast time parsing and formatting.
  * Add `Z.IO.FileSystem.FilePath` module for file path manipulations.
  * Add `getCWD`, `chDir`, `getHomeDir`, `getTempDir`, `getPassWD` to `Z.IO.Environment`.
  * Add `chown`, `fchown`, `lchown` to `Z.IO.FileSystem` and `Z.IO.FileSystem.Threaded`.
  * Rename `UVFD` to `FD` accross module.

  ## 0.1.5.2  -- 2020-10-13

  * Fix windows dist(add `fs-fd-hash-inl.h` to other-source-files).

  ## 0.1.5.1  -- 2020-10-13

  * Export `ProcessFlag` from `Z.IO.Process`.
  * Add quick read & write functions to fileSystem modules.
  * Fix a bug: when exception raise from server loop an uninitialized uv_check_t is closed.
  * Update libuv's version to 1.40.1.
  * Change `IOEInfo` type to use `Text` instead of `CBytes`.

  ## 0.1.5.0  -- 2020-10-10

  * Add `Z.IO.Process` module.
  * Move many flag type to type alias from newtype, adjust patterns haddock.
  * Sync IPC's server API to TCP's.

  ## 0.1.4.0  -- 2020-10-02

  * Add `Z.IO.Environment` module.
  * Add various instances to data types in `Z.IO.UV.FFI`.
  * Fix a UDP batch receiving bug.
  * Remove `UV` prefix in config data types(`Z.IO.FileSystem`, `Z.IO.UDP`).
  * Change `TCP`, `IPC` server config, move server worker to start params instead of config.
  * `Logger` type rework, colorful logger are possible.

  ## 0.1.3.0  -- 2020-09-28
  * Rename `newBufferedInput/Output` to `newBufferedInput'/Output'`, add default chunk `newBufferedInput/Output`.
  * Remove `ghc-pirm` depends.
  * Make library works with GHC 8.6 and 8.8 again.

  ## 0.1.2.0  -- 2020-09-28

  * Add file offset interface back, see `FilePtr` and `FilePtrT`.
  * Remove `checkFileTClosed` from `Z.IO.FileSystem.Threaded`.
  * Take c source file list from libuv Makefile, remove lib requirements on linux and osx.
  * Fix `uv_check_t` initiate order in accept loop, which cause a segfault.

  ## 0.1.1.2  -- 2020-09-25

  * Fix macOS build problem caused by missing zconf.h.
  * Add more tests(TCP, IPC).

  ## 0.1.1.0  -- 2020-09-19

  * Add stream utilities to `Z.IO.Buffered`.
  * Add `Z.Compression.Zlib`.
basic-deps:
  exceptions: ==0.10.*
  Z-Data: '>=0.1.9.1 && <0.2.0'
  unix-time: '>=0.4.7 && <0.5'
  stm: ==2.5.*
  base: '>=4.12 && <5.0'
  time: '>=1.8 && <2.0'
  unordered-containers: ==0.2.*
  primitive: '>=0.7.1 && <0.7.2'
all-versions:
- 0.1.0.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.5.1
- 0.1.5.2
- 0.1.6.0
- 0.1.6.1
- 0.1.7.0
- 0.1.8.0
- 0.1.8.1
author: Dong Han, Tao He
latest: 0.1.8.1
description-type: markdown
description: "## Z-IO\n\n[![Hackage](https://img.shields.io/hackage/v/Z-IO.svg?style=flat)](https://hackage.haskell.org/package/Z-IO)
  [![Linux Build Status](https://github.com/haskell-Z/z-io/workflows/ubuntu-ci/badge.svg)](https://github.com/haskell-Z/z-io/actions)
  [![MacOS Build Status](https://github.com/haskell-Z/z-io/workflows/osx-ci/badge.svg)](https://github.com/haskell-Z/z-io/actions)
  [![Windows Build Status](https://github.com/haskell-Z/z-io/workflows/win-ci/badge.svg)](https://github.com/haskell-Z/z-io/actions)\n\nThis
  package is part of [Z](https://github.com/haskell-Z/Z) project, provides basic IO
  operations:\n\n* IO resource management, resource pool\n* File system operations\n*
  Network: DNS, TCP, UDP and IPC\n* Buffered input and output\n* Process management\n*
  Environment settings\n* High performance logger\n* High performance low resolution
  timer\n\n## Requirements\n\n* A working haskell compiler system, GHC(>=8.6), cabal-install(>=2.4),
  hsc2hs.\n* Tests need  [hspec-discover](https://hackage.haskell.org/package/hspec-discover).\n\n##
  Example usage\n\n```haskell\n> :set -XOverloadedStrings  \n> import Z.IO.Network\n>
  import Z.IO.Resource\n> import Z.IO.Buffered\n> \n> -- call getAddrInfo to perform
  DNS\n> head <$> getAddrInfo Nothing \"www.bing.com\" \"http\"\nAddrInfo {addrFlags
  = [AI_ADDRCONFIG,AI_V4MAPPED], addrFamily = SocketFamily 2, addrSocketType = SocketType
  1, addrProtocol = ProtocolNumber 6, addrAddress = 204.79.197.200:80, addrCanonName
  = }\n>\n> import qualified Z.Data.Text as T\n> -- send a simple HTTP request\n>
  :{\nlet addr = SocketAddrInet 80 (tupleToInetAddr (13,107,21,200))\n-- addr = ipv4
  \"13.107.21.200\" 80\nin withResource (initTCPClient defaultTCPClientConfig{ tcpRemoteAddr
  = addr}) $ \\ tcp -> do\n    i <- newBufferedInput tcp \n    o <- newBufferedOutput
  tcp\n    writeBuffer o \"GET http://www.bing.com HTTP/1.1\\r\\nHost: www.bing.com\\r\\n\\r\\n\"\n
  \   flushBuffer o\n    readBuffer i >>= pure . T.validate\n:}\n\"HTTP/1.1 200 OK\\r\\nDate:
  Sat, 19 Sep 2020 06:11:08 GMT\\r\\nContent-Length: 0\\r\\n\\r\\n\"\n>\n> -- Start
  a TCP echo server, use @nc -v localhost 8080@ to test\n> :{\nstartTCPServer defaultTCPServerConfig{
  \n    tcpListenAddr = SocketAddrInet 8080 inetLoopback} $ \\ tcp -> do\n        i
  <- newBufferedInput tcp \n        o <- newBufferedOutput tcp\n        forever $
  readBuffer i >>= writeBuffer o >> flushBuffer o\n}\n:}\n```\n\n## Dev guide\n\n```bash\n#
  get code\ngit clone --recursive git@github.com:haskell-Z/z-io.git \ncd z-io\n# build\ncabal
  build\n# test\ncabal run Z-IO-Test\n# install \ncabal install\n# generate document\ncabal
  haddock\n```\n"
license-name: BSD-3-Clause
