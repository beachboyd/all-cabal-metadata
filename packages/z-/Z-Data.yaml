homepage: https://github.com/haskell-Z/z-data
changelog-type: markdown
hash: 3bd9f1977293ef562e27fb6575d8435c6df21aae623b7d07e2dea84a36938e3d
test-bench-deps:
  Z-Data: -any
  base: -any
  hspec: '>=2.5.4'
  word8: -any
  HUnit: -any
  integer-gmp: '>=0.2 && <1.1'
  quickcheck-instances: -any
  hashable: -any
  scientific: -any
  QuickCheck: '>=2.10'
  primitive: -any
maintainer: winterland1989@gmail.com
synopsis: Array, vector and text
changelog: "# Revision history for Z-Data\n\n## 0.1.7.0  -- 2020-10-15\n\n* Change
  `defaultChunkSize` from 32K to 16K to reduce memory overhead.\n* Change `CBytes`
  to use null terminated byte array, add JSON instances.\n* Add JSON instances to
  various arrays, Fix `Char`'s JSON instance to reject string length > 1.\n* Add `decodeText`
  and `decodeText'` to `Z.Data.JSON`.\n\n## 0.1.6.1  -- 2020-10-09\n\n* Remove `Str`
  newtype.\n* Make `CBytes` a newtype.\n* Add JSON instances for `ExitCode`, Add Unaligned
  instances for `Ptr a`.\n* Use type alias instead of newtypes for `Locale`, `Category`
  in `Z.Data.Text`. \n\n## 0.1.6.0  -- 2020-10-09\n\n* Rename `ToText` to `ShowT`,
  `toText` to `showT`, add FFI types instances, remove `Str` newtype.\n* Change `Text`
  's `Show` and `ShowT` escaping rules to reuse JSON escaping, remove `Read` instance.\n*
  Add `ShowT` instances to `CBytes` and FFI types.\n\n## 0.1.5.0  -- 2020-10-02\n\n*
  Rework `CBytes` type to use unpinned byte array, add `withCBytesUnsafe`, `allocCBytesUnsafe`.\n*
  Export `head`, `tail`, `init`, `last` from `Z.IO.Vector`, `Z.IO.Text` (well, safety
  first).\n* Change `unalignedSize` in `UnalignedAccess` class's type to take a instance
  type and return `Int`.\n* Rename `UnalignedAccess` to `Unaligned`.\n\n## 0.1.4.2
  \ -- 2020-10-02\n\n* Remove `withMutablePrimArrayUnsafe/Safe` from `Z.Foreign`.\n*
  Add `allocPrimArrayUnsafe/Safe`, `allocPrimVectorUnsafe/Safe`, `allocBytesUnsafe/Safe`,
  `fromPtr/fromPrimPtr`\n  to `Z.Foreign`.\n\n## 0.1.4.1  -- 2020-09-29\n\n* Add `fromNullTerminated`
  to `Z.Foreign`(and `Z.Data.Vector.Base`).\n* Change `Category` and `Locale`(`Z.Data.Text`)
  to use pattern synonyms, add `envLocale` to `Z.Data.Text`.\n* Add `validateASCII`
  and `validateASCIIMaybe` to `Z.Data.Text`.\n\n## 0.1.4.0  -- 2020-09-24\n\n* Make
  library works with GHC 8.6 and 8.8 again.\n* Add `pinPrimVector` and `pinPrimArray`
  to `Z.Foreign`.\n* Export `fail'` from `Z.Data.Parser`\n\n## 0.1.3.1  -- 2020-09-24\n\n*
  Change `clearMBA` 's type to match `clearPtr`.\n* Move `peekMBA`, `pokeMBA` to `UnalignedAccess`
  class.\n\n## 0.1.3.0  -- 2020-09-20\n\n* Add indexing funtion to `Z.Data.Vector`
  and `Z.Data.Text`.\n* Add `peekMBA`, `pokeMBA` and `clearMBA` to `Z.Foreign`.\n\n##
  0.1.2.0  -- 2020-09-19\n\n* Rename `read/write/indexWord8ArrayAs` to `read/write/indexWord8ArrayAs#`.\n*
  Add `read/write/indexWord8ArrayAs`, `read/write/indexPrimWord8ArrayAs`.\n* Fix JSON
  encoding code in generic instance(constructor with single payload case).\n\n"
basic-deps:
  case-insensitive: ==1.2.*
  base: '>=4.12 && <5.0'
  unordered-containers: ==0.2.*
  integer-gmp: '>=0.2 && <1.1'
  tagged: ==0.8.*
  ghc-prim: '>=0.5.3 && <0.6.2'
  hashable: ==1.3.*
  deepseq: '>=1.4 && <1.5'
  scientific: ==0.3.*
  QuickCheck: '>=2.10'
  template-haskell: '>=2.14.0'
  primitive: '>=0.7.1 && <0.7.2'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.5.0
- 0.1.6.0
- 0.1.6.1
- 0.1.7.0
author: Dong Han, Tao He
latest: 0.1.7.0
description-type: markdown
description: "## Z-Data\n\n[![Hackage](https://img.shields.io/hackage/v/Z-Data.svg?style=flat)](https://hackage.haskell.org/package/Z-Data)
  [![Linux Build Status](https://github.com/haskell-Z/z-data/workflows/ubuntu-ci/badge.svg)](https://github.com/haskell-Z/z-data/actions)
  [![MacOS Build Status](https://github.com/haskell-Z/z-data/workflows/osx-ci/badge.svg)](https://github.com/haskell-Z/z-data/actions)
  [![Windows Build Status](https://github.com/haskell-Z/z-data/workflows/win-ci/badge.svg)](https://github.com/haskell-Z/z-data/actions)\n\nThis
  package is part of [Z](https://github.com/haskell-Z/Z) project, provides basic data
  structures and functions:\n\n* Array, vector(array slice)\n* Text based UTF-8, basic
  unicode manipulating\n* FFI utilties\n* Parsing and building monad\n* JSON encoding
  and decoding\n\n## Requirements\n\n* A working haskell compiler system, GHC(>=8.6),
  cabal-install(>=2.4), hsc2hs.\n\n* Tests need [hspec-discover](https://hackage.haskell.org/package/hspec-discover).\n\n##
  Example usage\n\n```haskell\n> import qualified Z.Data.Vector as V\n> import qualified
  Z.Data.Array as A\n>\n> -- convert from list\n> let v = V.pack [1..10] :: V.PrimVector
  Int  \n> -- vector combinators works on arrays as well\n> let a = V.pack [1..10]
  :: A.Array Int   \n> -- slicing vector(slice) is O(1)\n> V.take 3 v                              \n[1,2,3]\n--
  slicing array is not O(1)\n> V.drop 3 a                              \nfromListN
  7 [4,5,6,7,8,9,10]\n>\n> V.intersperse 10 v\n[1,10,2,10,3,10,4,10,5,10,6,10,7,10,8,10,9,10,10]\n>\n>
  V.mergeSort (V.intersperse 10 v) \n[1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]\n>
  -- Generic KMP search on vectors\n> V.indices (V.singleton 10) (V.intersperse 10
  v) True   \n[1,3,5,7,9,11,13,15,17,18]\n>\n> -- quoter for writing numeric vector
  literals\n> :set -XQuasiQuotes \n> :t [V.vecWord|1,2,3,4,5,4,3,2,1|]                     \n[V.vecWord|1,2,3,4,5,4,3,2,1|]
  :: V.PrimVector Word\n>\n> import qualified Z.Data.Builder as B\n> import qualified
  Z.Data.Text as T\n> :set -XOverloadedStrings \n>\n> -- Builders can be used with
  OverloadedStrings\n> B.buildBytes $ \"builders: \" >> B.hex (3 :: Word16) >> B.comma
  >> B.double 1.2345678\n[98,117,105,108,100,101,114,115,58,32,48,48,48,51,44,49,46,50,51,52,53,54,55,56]\n>
  \n> T.validate . B.buildBytes $ \"builders: \" >> B.hex (3 :: Word16) >> B.comma
  >> B.double 1.2345678\n\"builders: 0003,1.2345678\"\n>\n> import qualified Z.Data.JSON
  as JSON\n> import GHC.Generics\n> \n> JSON.parseValue \"[1,2,3,4,5]\"\n([],Right
  (Array [Number 1.0,Number 2.0,Number 3.0,Number 4.0,Number 5.0]))\n>\n> -- JSON
  module support deriving through Generic\n> set -XDeriveAnyClass -XDeriveGeneric\n>
  data Foo = Foo {foo :: Double} deriving (JSON.FromValue, JSON.ToValue, JSON.EncodeJSON,
  Generic)\n> JSON.toValue (Foo 0.01)\nObject [(\"foo\",Number 1.0e-2)]\n> JSON.encodeText
  (Foo 0.01)\n\"{\\\"foo\\\":1.0e-2}\"\n```\n\n## Dev guide\n\n```bash\n# get code\ngit
  clone --recursive git@github.com:haskell-Z/z-data.git \ncd z-data\n# build\ncabal
  build\n# test\ncabal run Z-Data-Test\n# install \ncabal install\n# generate document\ncabal
  haddock\n```\n"
license-name: BSD-3-Clause
