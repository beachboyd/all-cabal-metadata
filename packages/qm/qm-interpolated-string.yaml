homepage: https://github.com/unclechu/haskell-qm-interpolated-string
changelog-type: markdown
hash: 3b2299c950bbb1e4c8ffe9392c8d64c8aa298a8a1a0a43605081a64f7da23ff1
test-bench-deps:
  qm-interpolated-string: -any
  base: ==4.*
  hspec: ==2.*
maintainer: Viacheslav Lotsmanov <lotsmanov89@gmail.com>
synopsis: Implementation of interpolated multiline strings
changelog: ! "## <a name=\"v0.2.0.0\"></a>0.2.0.0\n\n* Added tab (`\\t`) symbol escaping\n
  \ (breaks backward compatibility with [v0.1.1.0](#v0.1.1.0))\n* Support new [LTS
  Haskell 9.0 (ghc-8.0.2)](https://www.stackage.org/lts-9.0)\n  (updated upper version
  of **haskell-src-meta** from 0.7.x to 0.8.x)\n* Added `qmb` QuasiQuoter,\n  it's
  `qm` + `b` (line-<b>B</b>reaks),\n  it works just as `qm` but keeps line breaks
  (still ignores indendation)\n* Added `qnb` QuasiQuoter (`qmb` without interpolation),\n
  \ it's `qn` + `b` (line-<b>B</b>reaks),\n  it works just as `qn` but keeps line
  breaks (still ignores indendation)\n* Added `qms` QuasiQuoter,\n  it's `qm` + `s`
  (<b>S</b>paces),\n  it works just as `qmb` but kept line breaks replaced with spaces\n*
  Added `qns` QuasiQuoter (`qms` without interpolation),\n  it's `qn` + `s` (<b>S</b>paces),\n
  \ it works just as `qnb` but kept line breaks replaced with spaces\n* More docs
  and tests\n\n## <a name=\"v0.1.1.0\"></a>0.1.1.0\n\n* Added `qn` QuasiQuoter as
  alternative to `qm` but without interpolation\n* Some code refactoring\n* More docs
  and tests\n"
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  text: ==1.*
  haskell-src-meta: ! '>=0.3 && <0.9'
  template-haskell: ! '>=2.5 && <3'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
author: Viacheslav Lotsmanov
latest: '0.2.0.0'
description-type: markdown
description: ! "# [qm|interpolated-string|]\n\n[![Hackage](https://img.shields.io/hackage/v/qm-interpolated-string.svg)](https://hackage.haskell.org/package/qm-interpolated-string)\n[![Build
  Status](https://travis-ci.org/unclechu/haskell-qm-interpolated-string.svg?branch=master)](https://travis-ci.org/unclechu/haskell-qm-interpolated-string)\n\nImplementation
  of interpolated multiline string\n[QuasiQuoter](https://wiki.haskell.org/Quasiquotation)\nthat
  ignores indentation and trailing whitespaces.\n\nActually it's modification of\n[interpolatedstring-perl6](https://github.com/audreyt/interpolatedstring-perl6)\npackage.
  I've forked it to implemenent my own strings I really like.\n\nThis implementation
  based on `qc` from **interpolatedstring-perl6** package\nbut ignores any indentation,
  line breaks\n(except explicitly written using `\\n` char)\nand trailing whitespaces.\n\n*
  'm' in `qm` means '**M**ultiline'.\n* 'n' in `qn` means '**N**o interpolation'.\n*
  'b' in `qmb`/`qnb` means 'line **B**reaks'.\n* 's' in `qms`/`qns` means '**S**paces'.\n\nWrite
  a decoratively formatted string and your\ndecorative indentation and line breaks
  wont go to result string,\nbut when you really need it, you could just escape it
  using backslash.\n\n## Usage example\n\n```haskell\n{-# LANGUAGE QuasiQuotes #-}\n\nimport
  Text.InterpolatedString.QM\n\nmain :: IO ()\nmain = do\n  -- Hello, world! Pi is
  3.14…\n  putStrLn [qms| Hello,\n                 world!\n                 Pi is
  {floor pi}.{floor $ (pi - 3) * 100}… |]\n\n  -- Some examples with HTML below to
  demonstrate the difference\n  -- between all of the quasi-quoters.\n\n  let title
  = \"Testing\"\n      text  = \"Some testing text\"\n\n  -- <article><h1>Testing</h1><p>Some
  testing text</p></article>\n  putStrLn [qm|\n    <article>\n      <h1>{title}</h1>\n
  \     <p>{text}</p>\n    </article>\n  |]\n\n  -- <article><h1>{title}</h1><p>{text}</p></article>\n
  \ putStrLn [qn|\n    <article>\n      <h1>{title}</h1>\n      <p>{text}</p>\n    </article>\n
  \ |]\n\n  -- <article> <h1>Testing</h1> <p>Some testing text</p> </article>\n  putStrLn
  [qms|\n    <article>\n      <h1>{title}</h1>\n      <p>{text}</p>\n    </article>\n
  \ |]\n\n  -- <article> <h1>{title}</h1> <p>{text}</p> </article>\n  putStrLn [qns|\n
  \   <article>\n      <h1>{title}</h1>\n      <p>{text}</p>\n    </article>\n  |]\n\n
  \ -- <article>\n  -- <h1>Testing</h1>\n  -- <p>Some testing text</p>\n  -- </article>\n
  \ putStrLn [qmb|\n    <article>\n      <h1>{title}</h1>\n      <p>{text}</p>\n    </article>\n
  \ |]\n\n  -- <article>\n  -- <h1>{title}</h1>\n  -- <p>{text}</p>\n  -- </article>\n
  \ putStrLn [qnb|\n    <article>\n      <h1>{title}</h1>\n      <p>{text}</p>\n    </article>\n
  \ |]\n```\n\n## Tables\n\n### All QuasiQuoters\n\n```\n| QuasiQuoter | Interpolation
  | Indentation | Line breaks          | Trailing whitespaces |\n|-------------|---------------|-------------|----------------------|----------------------|\n|
  qm          | ✓             | Removed     | Removed              | Removed              |\n|
  qn          | ✗             | Removed     | Removed              | Removed              |\n|
  qmb         | ✓             | Removed     | Kept                 | Removed              |\n|
  qnb         | ✗             | Removed     | Kept                 | Removed              |\n|
  qms         | ✓             | Removed     | Replaced with spaces | Removed              |\n|
  qns         | ✗             | Removed     | Replaced with spaces | Removed              |\n```\n\n###
  About naming logic\n\n```\n| Contains in its name | What means                       |
  QuasiQuoters |\n|----------------------|----------------------------------|--------------|\n|
  m                    | Resolves interpolation blocks    | qm, qmb, qms |\n| n                    |
  Without interpolation            | qn, qnb, qns |\n| b                    | Keeps
  line breaks                | qmb, qnb     |\n| s                    | Replaces line
  breaks with spaces | qms, qns     |\n```\n\n## About escaping\n\n### Symbols that
  can be escaped\n\nBackslash is used for escaping these:\n\n  1. `\\n` - line break\n
  \ 2. `\\ ` - space (space is supposed to be escaped when you're going to keep\n
  \           some part of indentation)\n  3. `\\↵` - backslash just before end of
  line cuts off line break\n            (makes sense for `qmb`, `qnb`, `qms` and `qns`)\n
  \ 4. `\\{` - opening bracket of interpolation block\n            (only for `qm`,
  `qmb` and `qms`, to prevent interpolation\n            and interpret this block
  as plain text)\n  5. `\\t` or `\\‣` (where `‣` is real tab symbol) - tab (escaping
  it to keep some\n     part of indentation, or if you need tab symbol for some reason,\n
  \    escaping real tabs makes sense only for keeping some part of indentation)\n
  \ 6. `\\\\` - backslash itself (for situations when you don't want to escape\n            other
  symbols but just want backslash symbol, `\\\\t`, `\\\\n`, `\\\\↵`,\n            `\\\\{`,
  etc., if backslash doesn't come with any of symbols from\n            this list
  it is interpreted just as backslash symbol, keep in mind\n            that `\\\\\\`
  (without any of symbols from this list after)\n            and `\\\\\\\\` are producing
  same result - `\\\\`)\n\n### Escaping examples\n\n```haskell\n[qm| foo\\nbar  |]
  -- \"foo\\nbar\"\n[qm| foo\\\\nbar |] -- \"foo\\\\nbar\"\n[qm| foo\\tbar  |] --
  \"foo\\tbar\"\n[qm| foo\\\\tbar |] -- \"foo\\\\tbar\"\n[qm| foo\\‣bar  |] -- \"foo\\tbar\"
  \  (`‣` is real tab symbol)\n[qm| foo\\\\‣bar |] -- \"foo\\\\\\tbar\" (`‣` is real
  tab symbol)\n[qm| foo\\ bar  |] -- \"foo bar\"\n[qm| foo\\\\ bar |] -- \"foo\\\\
  bar\"\n\n[qm| foo\\\n     bar  |] -- \"foobar\"\n[qm| foo\\\\\n     bar  |] -- \"foo\\\\bar\"\n\n[qmb|
  foo\\\n      bar  |] -- \"foobar\"\n[qmb| foo\\\\\n      bar  |] -- \"foo\\\\\\nbar\"\n\n[qm|
  foo\\bar    |] -- \"foo\\\\bar\"\n[qm| foo\\\\bar   |] -- \"foo\\\\bar\"\n[qm| foo\\\\\\bar
  \ |] -- \"foo\\\\\\\\bar\"\n[qm| foo\\\\\\\\bar |] -- \"foo\\\\\\\\bar\"\n```\n\n##
  More examples\n\n```haskell\n[qm|   you can escape spaces\n     \\ when you need
  them    |]\n-- Result: \"you can escape spaces when you need them\"\n```\n\n```haskell\n[qm|\n
  \       indentation and li\n  ne bre\n   aks are i\n       gno\n     red\n|]\n--
  Result: \"indentation and line breaks are ignored\"\n```\n\n```haskell\n[qm|  \\
  \ You can escape indentation or\\n\n         line breaks when you need them! \\
  \ |]\n-- Result: \"  You can escape indentation or\\nline breaks when you need them!
  \ \"\n```\n\n```haskell\n[qm| Interpolation blocks can be escaped too: {1+2} \\{3+4}
  |]\n-- Result: \"Interpolation blocks can be escaped too: 3 {3+4}\"\n```\n\nIf you
  don't need interpolation - just replace `m` to `n` in quasi-quoter name:\n\n```haskell\n[qm|
  foo {1+2} |] -- Result: \"foo 3\"\n[qn| foo {1+2} |] -- Result: \"foo {1+2}\"\n\n[qms|
  foo {1+2} |] -- Result: \"foo 3\"\n[qns| foo {1+2} |] -- Result: \"foo {1+2}\"\n\n[qmb|
  foo {1+2} |] -- Result: \"foo 3\"\n[qnb| foo {1+2} |] -- Result: \"foo {1+2}\"\n```\n\n##
  Author\n\n[Viacheslav Lotsmanov](https://github.com/unclechu)\n\n## License\n\n[The
  Unlicense](./LICENSE)\n"
license-name: PublicDomain
