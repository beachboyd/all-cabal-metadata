homepage: https://github.com/sjoerdvisscher/free-functors
changelog-type: text
hash: bbc865226f85f7ee047bda4928bbf39d17946799ac5f80e90a2fda559d8e832f
test-bench-deps: {}
maintainer: sjoerd@w3future.com
synopsis: Free functors, adjoint to functors that forget class constraints.
changelog: |
  CHANGELOG

  1.0.1 -> 1.1
    - Use derive-lifted-instances i/o algebraic-classes
    - Add deriving instances for `HFree` and `HHFree`
    - Fix `Traversable` and `Foldable` instances of `Free`

  1.0 -> 1.0.1
    - Simpler `ShowHelper`

  0.8.4 -> 1.0
    - Switch to using the QuantifiedConstraints extension
    - Removed Data.Constraint.Class1

  0.8.3 -> 0.8.4
    - Updated to constraints-0.10
    - Updated for GHC 8.4
      - Updated to base-4.11
      - Updated to template-haskell-2.13
      - `Semigroup` is now a superclass of `Monoid`

  0.8.2 -> 0.8.3
    - Added Data.Functor.Free.TH to other-modules

  0.8.1 -> 0.8.2
    - Support for `deriveInstances` for classes which have one or more superclasses
    - `deriveInstances` now also derives the `HasSuperClasses` instance
    - Expose internal `ShowHelper` datatype

  0.8 -> 0.8.1
    - Added HHCofree
    - Changes towards support for `SuperClass1` in TH code for `Free`

  0.7.2 -> 0.8
    - Updated for GHC 8.2
      - Updated to base-4.10
      - Updated to template-haskell-2.12
      - Updated to algebraic-classes-0.8

  0.7.1 -> 0.7.2
    - Fixed Traversable instance of `Free c`

  0.7 -> 0.7.1
    - Rewritten SuperClass1

  0.6.5 -> 0.7
    - Allow contravariant uses of HFree
    - Added HHFree for free profunctors/categories/arrows
    - Updated to base-4.9
    - Updated to template-haskell-2.11
    - Updated to comonad-5
    - Updated to constraints-0.9
    - Updated to algebraic-classes-0.7

  0.6.4.1 -> 0.6.5
    - Updated to transformers-0.5.0.0
    - Updated to constraints-0.6

  0.6.4 -> 0.6.4.1
    - Raise lower bounds of template-haskell

  0.6.3.3 -> 0.6.4
    - Updated to algebraic-classes 0.6
    - Updated to template-haskell-2.10.0.0

  0.6.3.2 -> 0.6.3.3
    - Updated to void 0.7

  0.6.3.1 -> 0.6.3.2
    - Updated to constraints 0.4

  0.6.2 -> 0.6.3.1
    - Updated to comonad 4.2
    - Updated to transformers 0.4.1.0

  0.6.1.1 -> 0.6.2
    - Updated to template-haskell-2.9.0.0
    - Added instance Applicative (HFree Monad f)

  0.6.1 -> 0.6.1.1
    - Added a changelog

  0.6 -> 0.6.1
    - Updated to comonad-4.0
    - Added convert to Data.Functor.HCofree
basic-deps:
  base: '>=4.13 && <4.15'
  comonad: ==5.*
  bifunctors: ==5.*
  contravariant: ==1.5.*
  derive-lifted-instances: ==0
  transformers: ==0.5.*
  template-haskell: '>=2.15 && <2.17'
  profunctors: ==5.*
all-versions:
- '0'
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- 0.6.1
- 0.6.1.1
- 0.6.2
- 0.6.3
- 0.6.3.1
- 0.6.3.2
- 0.6.3.3
- 0.6.4
- 0.6.4.1
- 0.6.5
- '0.7'
- 0.7.1
- 0.7.2
- '0.8'
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- '0.9'
- '1.0'
- 1.0.1
- '1.1'
- 1.1.1
author: Sjoerd Visscher
latest: 1.1.1
description-type: haddock
description: |-
  A free functor is a left adjoint to a forgetful functor. It used to be the case
  that the only category that was easy to work with in Haskell was Hask itself, so
  there were no interesting forgetful functors.

  But the new ConstraintKinds feature of GHC provides an easy way of creating
  subcategories of Hask. That brings interesting opportunities for free (and cofree) functors.

  The examples directory contains an implementation of non-empty lists as free semigroups,
  and automata as free actions. The standard example of free higher order functors is free monads,
  and this definition can be found in Data.Functor.HFree.
license-name: BSD-3-Clause
