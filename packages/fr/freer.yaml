homepage: https://gitlab.com/queertypes/freer
changelog-type: markdown
hash: f8650d4787f0909b7887188f0f1ff84ead5f5932d4c3a2d3e49120b7d95b3c5d
test-bench-deps:
  free: -any
  base: -any
  criterion: -any
  freer: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: allele.dev@gmail.com
synopsis: Implementation of the Freer Monad
changelog: ! "# 0.2.4.1 (November 25, 2016)\n\n* Restore GHC (7.8, 7.10) compatibility\n\n#
  0.2.4.0 (November 25, 2016)\n\n* Internal reorg\n  * In particular, hide implementation
  details in Union.Internal\n  * Rewrite interpreters in terms of `extract` instead
  of `decomp`\n\n# 0.2.3.0 (June 25, 2016)\n\n* Add GHC 8 support\n\n# 0.2.2.2 (Sep.
  14, 2015)\n\n* Use local `data Nat` for `Data.Open.Union`\n  * Using GHC.TypeLits
  lead to overlapping instances\n\n# 0.2.2.1 (Sep. 14, 2015)\n\n* Document ALL THE
  THINGS\n\n# 0.2.2.0 (Sep. 13, 2015)\n\n* Add bench suite\n\n# 0.2.1.0 (Sep. 13,
  2015)\n\n* Add test suite\n\n# 0.2.0.2 (Sep. 12, 2015)\n\n* Clean up language extensions
  per file\n* Add Teletype DSL to the README\n\n# 0.2.0.1 (Sep. 12, 2015)\n\n* Add
  Teletype DSL example\n* Expose `send` in public interface\n\n# 0.2.0.0 (Sep. 12,
  2015)\n\n* Implement NonDetEff\n* Separate Cut/Coroutine out from Internals\n  *
  Partial implementation: won't compile yet\n* Extract remaining examples from Internal
  comments\n\n# 0.1.1.0 (Sep. 12, 2015)\n\n* Warnings clean up\n* Examples separated
  from primary implementation\n* Initial project documentation added\n\n# 0.1.0.0
  (Sep. 12, 2015)\n\n* Initial release\n"
basic-deps:
  base: ! '>=4.7 && <5'
  freer: -any
all-versions:
- 0.2.2.1
- 0.2.2.2
- 0.2.2.3
- 0.2.2.4
- 0.2.2.5
- 0.2.2.6
- 0.2.3.0
- 0.2.4.0
- 0.2.4.1
author: Allele Dev
latest: 0.2.4.1
description-type: markdown
description: ! "# Freer: Extensible Effects with Freer Monads\n\nFreer is an implementation
  of\n[\"Freer Monads, More Extensible Effects\"](http://okmij.org/ftp/Haskell/extensible/more.pdf).
  Much\nof the implementation is a repackaging and cleaning up of the\nreference materials
  provided\n[here](http://okmij.org/ftp/Haskell/extensible/).\n\n# Features\n\nThe
  key features of Freer are:\n\n* An efficient effect system for Haskell as a library\n*
  Implementations for several common Haskell monad instances:\n  * Reader\n  * Writer\n
  \ * State\n  * StateRW: State in terms of Reader/Writer\n  * Trace\n  * Exception\n*
  Core components for defining your own Effects\n\n# Example: Teletype DSL\n\nHere's
  what using Freer looks like:\n\n```haskell\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE
  FlexibleContexts #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE DataKinds #-}\nmodule
  Teletype where\n\nimport Control.Monad.Freer\nimport Control.Monad.Freer.Internal\nimport
  System.Exit hiding (ExitSuccess)\n\n--------------------------------------------------------------------------------\n
  \                         -- Effect Model --\n--------------------------------------------------------------------------------\ndata
  Teletype s where\n  PutStrLn    :: String -> Teletype ()\n  GetLine     :: Teletype
  String\n  ExitSuccess :: Teletype ()\n\nputStrLn' :: Member Teletype r => String
  -> Eff r ()\nputStrLn' = send . PutStrLn\n\ngetLine'  :: Member Teletype r => Eff
  r String\ngetLine' = send GetLine\n\nexitSuccess' :: Member Teletype r => Eff r
  ()\nexitSuccess' = send ExitSuccess\n\n--------------------------------------------------------------------------------\n
  \                    -- Effectful Interpreter --\n--------------------------------------------------------------------------------\nrunTeletype
  :: Eff '[Teletype] w -> IO w\nrunTeletype (Val x) = return x\nrunTeletype (E u q)
  = case extract u of\n              (PutStrLn msg) -> putStrLn msg  >> runTeletype
  (qApp q ())\n              GetLine        -> getLine      >>= \\s -> runTeletype
  (qApp q s)\n              ExitSuccess    -> exitSuccess\n\n--------------------------------------------------------------------------------\n
  \                       -- Pure Interpreter --\n--------------------------------------------------------------------------------\nrunTeletypePure
  :: [String] -> Eff '[Teletype] w -> [String]\nrunTeletypePure inputs req =\n  reverse
  . snd $ run (handleRelayS (inputs, []) (\\s _ -> pure s) go req)\n  where\n    go
  :: ([String], [String])\n       -> Teletype v\n       -> (([String], [String]) ->
  Arr '[] v ([String], [String]))\n       -> Eff '[] ([String], [String])\n    go
  (is, os) (PutStrLn msg) q = q (is, msg : os) ()\n    go (i:is, os) GetLine q = q
  (is, os) i\n    go ([], _) GetLine _ = error \"Not enough lines\"\n    go (_, os)
  ExitSuccess _ = pure ([], os)\n```\n\n# Contributing\n\nContributions are welcome!
  Documentation, examples, code, and\nfeedback - they all help.\n\nBe sure to review
  the included code of conduct. This project adheres\nto the [Contributor's Covenant](http://contributor-covenant.org/).
  By\nparticipating in this project you agree to abide by its terms.\n\n## Developer
  Setup\n\nThe easiest way to start contributing is to install\n[stack](https://github.com/commercialhaskell/stack).
  stack can install\nGHC/Haskell for you, and automates common developer tasks.\n\nThe
  key commands are:\n\n* stack setup : install GHC\n* stack build\n* stack clean\n*
  stack haddock : builds documentation\n* stack test\n* stack bench\n* stack ghci
  : start a REPL instance\n\n# Licensing\n\nThis project is distrubted under a BSD3
  license. See the included\nLICENSE file for more details.\n\n# Acknowledgements\n\nThis
  package would not be possible without the paper and the reference\nimplementation.
  In particular:\n\n* Data.Open.Union maps to [OpenUnion41.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion41.hs)\n*
  Data.FTCQueue maps to [FTCQueue1](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)\n*
  Control.Monad.Freer* maps to [Union1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)\n\nThere
  will be deviations from the source.\n"
license-name: BSD-3-Clause
