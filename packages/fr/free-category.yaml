homepage: https://github.com/coot/free-category#readme
changelog-type: markdown
hash: 868fa37ca46d0aef1379dc7f99332f0c2cf439ac5b0de10806d88da0c60375e8
test-bench-deps: {}
maintainer: profunctor@pm.me
synopsis: Free category
changelog: "# Changelog for free-category\n\n## Version 0.0.3.0\n- Efficient 'Cat'
  and 'Aff' based on real time queues with scheduling\n- Added Monoid instances \n-
  Added Op category\n- added `arrArr`, `mapArr`, `foldArr` for `Arr` free arrow category\n-
  added `arrCat`, `mapCat`, `fodlMap` for `Cat` free categroy\n\n## Version 0.0.2.0\n\n-
  EffCategory class and FreeEffCat category transformer\n- Example usage of FreeEffCat\n\n##
  Version 0.0.1.0\n- free category (concrete and condensity transformed)\n- free arrows
  (concrete and condensity transformed)\n\n## Unreleased changes\n"
basic-deps:
  base: ! '>=4.9 && <5'
  free-algebras: ! '>=0.0.7.0'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
author: Marcin Szamotulski
latest: 0.0.3.0
description-type: markdown
description: |
  # Free Category
  [![Maintainer: coot](https://img.shields.io/badge/maintainer-coot-lightgrey.svg)](http://github.com/coot)
  [![CircleCI](https://circleci.com/gh/coot/free-category/tree/master.svg?style=svg)](https://circleci.com/gh/coot/free-category/tree/master)

  This package contains efficient free categories. There are two presentations:

  * using realtime queues (C. Okasaki 'Pure Functional Data Structures')
  * using continuation passing style

  Free arrows and free Kleisli categories are also included.

  Free categories are useful to model state machines in a simple yet type safe
  manner.  For that purpose `Kleisli` categroies are a very useful target which
  allows to include monadic computations.  This packge contains a useful
  generalisation of `Kliesli` categories captured by `EffCategory` class
  (effectful categories), and a (free) transformer which lifts a category to
  an effectful one.

  ## Some examples
  * [LoginStateMachine](https://github.com/coot/free-category/blob/master/examples/src/LoginStateMachine.hs):
    based on [State Machines All The Way
    Down](https://www.youtube.com/watch?v=xq7ZuSRgCR4) by Edwin Bradly, 2017 You
    can run it with `cabal new-run examples:login-state-machine`.
  * Read more [here](https://coot.me/posts/finite-state-machines.html) on
    a simple example of a finite state machine encoded using a free category
    using a simple GADT.
  * Another
    [example](https://github.com/coot/free-algebras/blob/master/examples/src/Control/Category/Free.hs).
  * [Blog post](https://coot.me/posts/kleisli-categories-and-free-monads.html) on Keleisli categories.
license-name: MPL-2.0
