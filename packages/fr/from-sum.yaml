homepage: https://github.com/cdepillabout/from-sum
changelog-type: ''
hash: 066082bd3023017326216d31f32a49a94b0cf5f2af5fba8cf5d1b9e3fb94bd9d
test-bench-deps:
  base: -any
  doctest: -any
  Glob: -any
maintainer: cdep.illabout@gmail.com
synopsis: Canonical fromMaybeM and fromEitherM functions.
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  mtl: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
author: Dennis Gosnell
latest: 0.2.1.0
description-type: markdown
description: ! '

  Control.FromSum

  ===============


  [![Build Status](https://secure.travis-ci.org/cdepillabout/from-sum.svg)](http://travis-ci.org/cdepillabout/from-sum)

  [![Hackage](https://img.shields.io/hackage/v/from-sum.svg)](https://hackage.haskell.org/package/from-sum)

  [![Stackage LTS](http://stackage.org/package/from-sum/badge/lts)](http://stackage.org/lts/package/from-sum)

  [![Stackage Nightly](http://stackage.org/package/from-sum/badge/nightly)](http://stackage.org/nightly/package/from-sum)


  This Haskell module exports the `fromEitherM` and `fromMaybeM` convenience

  functions.


  ```haskell

  fromMaybeM :: m a -> Maybe a -> m a


  fromEitherM :: (e -> m a) -> Either e a -> m a

  ```


  `fromEitherM leftAction eitherValue` is the same as `either leftAction pure

  eitherValue`.


  `fromMaybeM nothingAction maybeValue` is the same as `maybe nothingAction pure

  maybeValue`.


  ## Usage


  ```haskell

  >>> import Control.FromSum (fromEitherM, fromMaybeM)

  >>> fromMaybeM [] $ Just 5

  [5]

  >>> fromMaybeM [] Nothing

  []

  >>> fromEitherM (\s -> [length s]) $ Right 5

  [5]

  >>> fromEitherM (\s -> [length s]) $ Left "foo"

  [3]

  ```

'
license-name: BSD-3-Clause
