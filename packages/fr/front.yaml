homepage: haskell-front.org
changelog-type: markdown
hash: e1d40b2b487e5d32e8d64719dee21dfbbaed7af3813f4a7484d5f4ea1961a0e7
test-bench-deps: {}
maintainer: persiantiger@yandex.ru
synopsis: A reactive frontend web framework
changelog: |
  # Revision history for front

  ## 0.0.0.5 -- 2020-03-17

  * Remove indentation from output html.

  ## 0.0.0.4 -- 2020-03-15

  * Support GHC 8.6.5, switch to LTS-14.
  * Change `CommandHandler` typeclass to higher-order function.

  ## 0.0.0.3 -- 2020-02-04

  * `Todo` example reworked to be complaint with http://todomvc.com.
  * `onBlur`, `onDoubleClick`, `onEnter` event handlers added.

  ## 0.0.0.2 -- 2019-04-10

  * Integration with Servant established.
  * `Todo` example decoupled from `servant` and `yesod`.
  * Added abstraction for `Broadcast` communication.

  ## 0.0.0.1 -- 2019-02-25

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: ! '>=0.10'
  stm: -any
  base: ! '>=4.0 && <5'
  blaze-markup: ! '>=0.8'
  fay-dom: -any
  text: ! '>=1.2'
  async: -any
  websockets: -any
  conduit: -any
  mtl: -any
  fay-websockets: -any
  blaze-html: ! '>=0.9'
  fay: ! '>=0.24.0.5'
  aeson: -any
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
author: Andrey Prokopenko
latest: 0.0.0.5
description-type: markdown
description: "# front (work-in-progress)\n\nA front-end web framework which aim is
  to bring the power of GHC on client side with as less JavaScript as possible by
  the Fay.\n\nThe goal is to have a tiny websockets-based bridge between client and
  server to propagate client events on server for further handling.\n\n## Features\n\n-
  Server-side rendering.\n- both SPA and regular webapp (sharing state across multiple
  routes).\n- Several communication models (single session, broadcast, etc.).\n- Virtual
  DOM with full/partial rendering.\n- \"blaze-html\" like extended markup tree for
  handling both DOM and JS events.\n\n## Usage\n\n1. Add `front` as a dependency to
  your project using preferred build tool.\n2. Obtain `bundle.js` by\n\n```\ncurl
  https://raw.githubusercontent.com/swamp-agr/front/master/examples/todo/static/bundle.js\n```\n\nand
  include it as static resource in your application server. \n\n3. Import `Shared`
  module.\n4. Choose proper communication model (Only session, Broadcast, etc.).\n5.
  That's it.\n\n## Examples\n\n- `TODO`\n\n  - Installation with Stack (`servant-auth-cookie`
  should be fixed to allow build with `cabal`):\n  ```\n  stack install --flag=\"front:examples\"\n
  \ ```\n  - usage:\n  ```\n  cd examples/todo\n  # for servant-based:\n  todo-servant-example\n
  \ # for yesod-based:\n  todo-yesod-example\n  # open web browser:\n  open http://localhost:3000\n
  \ ```\n\n## Developer Installation (Contribution)\n\nFor server:\n\n```\ncabal new-build\n```\n\nor\n\n```\nstack
  build\n```\n\nFor client (issue: faylang/fay#459):\n\n```\ncabal sandbox init\ncabal
  install # fay executable and libraries will be loaded\nexport HASKELL_PACKAGE_SANDBOX=`echo
  .cabal-sandbox/*-packages.conf.d/`\n.cabal-sandbox/bin/fay \\\n  --package fay-dom,fay-websockets
  \\\n  --include shared,fay \\\n  -o bundle.js fay/Client.hs\n```\n\nor\n\n```\n~/.local/bin/fay
  \\\n  --package fay-dom,fay-websockets \\\n  --include shared,fay \\\n  -o bundle.js
  fay/Client.hs\n```\n\nPlease do not hesitate to open Issue to discuss your questions
  or use cases.\n\n## Acknowledgement\n\nThis ongoing framework would not have happened
  without these people and technologies:\n\n- @5HT for inspiration by **N2O** framework.
  The idea of transfer both data and events over websockets.\n- @jaspervdj for **blaze-html**.\n-
  @meiersi for **blaze-react** and the approach how to handle events in the same markup
  with html.\n- @snoyberg for **yesod-fay** and the way how to embed generated assert
  into server\nand to trigger dependent Fay compilation from Haskell code.\n- @bergmark
  for **Fay** compiler."
license-name: BSD-3-Clause
