homepage: https://github.com/salemove/freddy-hs
changelog-type: ''
hash: 3b91a389c24c35643c9c33595510156b96e3bd28c8bdb8652fb8e5e39324b3ee
test-bench-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.8 && <5'
  amqp: ! '>=0.13.1'
  hspec: ! '>=1.3'
  text: ! '>=0.11.2'
  uuid: ! '>=1.3.11'
  async: ! '>=2.1.0'
  data-default: ! '>=0.6.0'
  random: ! '>=1.1'
  broadcast-chan: ! '>=0.1.0'
maintainer: indrek@urgas.eu
synopsis: RabbitMQ Messaging API supporting request-response
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.8 && <5'
  amqp: ! '>=0.13.1'
  text: ! '>=0.11.2'
  uuid: ! '>=1.3.11'
  data-default: ! '>=0.6.0'
  random: ! '>=1.1'
  broadcast-chan: ! '>=0.1.0'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
author: Indrek Juhkam
latest: 0.1.2.0
description-type: markdown
description: ! "# RabbitMQ Messaging API supporting request-response\n\n[![Build Status](https://travis-ci.org/salemove/freddy-hs.svg?branch=master)](https://travis-ci.org/salemove/freddy-hs)\n[![Code
  Climate](https://codeclimate.com/github/salemove/freddy-hs/badges/gpa.svg)](https://codeclimate.com/github/salemove/freddy-hs)\n\n##
  Setup\n\n* Create a connection:\n\n```haskell\nimport qualified Network.Freddy as
  Freddy\nimport qualified Network.Freddy.Request as R\n\nconnection <- Freddy.connect
  \"127.0.0.1\" \"/\" \"guest\" \"guest\"\n```\n\n## Delivering messages\n\n### Simple
  delivery\n\n#### Send and forget\nSends a `message` to the given `destination`.
  If there is no consumer then the\nmessage stays in the queue until somebody consumes
  it.\n```haskell\n  Freddy.deliver connection R.newReq {\n    R.queueName = \"notifications.user_signed_in\",\n
  \   R.body = \"{\\\"user_id\\\": 1}\"\n  }\n```\n\n#### Expiring messages\nSends
  a `message` to the given `destination`. If nobody consumes the message in\n`timeoutInMs`
  milliseconds then the message is discarded. This is useful for\nshowing notifications
  that must happen in a certain timeframe but guaranteed\ndelivery is not a strict
  requirement.\n```haskell\n  Freddy.deliver connection R.newReq {\n    R.queueName
  = \"notifications.user_signed_in\",\n    R.body = \"{\\\"user_id\\\": 1}\",\n    R.timeoutIsMs
  = 5000\n  }\n```\n\n### Request delivery\nSends a `message` to the given `destination`.
  Has a default timeout of 3\nseconds and discards the message from the queue if a
  response hasn't been\nreturned in that time.\n```haskell\n  response <- Freddy.deliverWithResponse
  connection R.newReq {\n    R.queueName = \"echo\",\n    R.body = \"{\\\"msg\\\":
  \\\"what did you say?\\\"}\"\n  }\n\n  case response of\n    Right payload -> putStrLn
  \"Received positive result\"\n    Left (Freddy.InvalidRequest payload) -> putStrLn
  \"Received error\"\n    Left Freddy.TimeoutError -> putStrLn \"Request timed out\"\n```\n\n##
  Responding to messages\n```haskell\n  processMessage (Freddy.Delivery body replyWith
  failWith) = replyWith body\n\n  connection <- Freddy.connect \"127.0.0.1\" \"/\"
  \"guest\" \"guest\"\n  Freddy.respondTo connection \"echo\" processMessage\n```\n\n##
  Tapping into messages\nListens for messages on a given destination or destinations
  without\nconsuming them.\n\n```haskell\n  processMessage body = putStrLn body\n\n
  \ connection <- Freddy.connect \"127.0.0.1\" \"/\" \"guest\" \"guest\"\n  Freddy.tapInto
  connection \"notifications.*\" processMessage\n```\n\n* Note that it is not possible
  to respond to the message while tapping.\n* When tapping the following wildcards
  are supported in the `queueName`:\n  * `#` matching 0 or more words\n  * `*` matching
  exactly one word\n\nExamples:\n\n```haskell\nFreddy.tapInto connection \"i.#.free\"
  processMessage\n```\n\nreceives messages that are delivered to `\"i.want.to.break.free\"`\n\n```haskell\nFreddy.tapInto
  connection \"somebody.*.love\" processMessage\n```\n\nreceives messages that are
  delivered to `somebody.to.love` but doesn't receive messages delivered to `someboy.not.to.love`\n"
license-name: MIT
