homepage: https://github.com/ElvishJerricco/fraxl
changelog-type: ''
hash: 2e5056f4b93c29968dfac7e8c173f007027413af5bed050f4a7343b6c6d08e05
test-bench-deps:
  base: -any
  time: -any
  fraxl: -any
maintainer: willfancher38@gmail.com
synopsis: Cached and parallel data fetching.
changelog: ''
basic-deps:
  exceptions: ! '>=0.8.3 && <0.11'
  free: ! '>=5.0.2 && <5.2'
  dependent-sum: ==0.4.*
  base: ! '>=4.8 && <5'
  dependent-map: ! '>=0.2.4.0 && <0.3'
  async: ! '>=2.1.1.1 && <2.3'
  type-aligned: ! '>=0.9.6 && <0.10'
  vinyl: ! '>=0.6 && <0.9'
  mtl: ! '>=2.2.2 && <2.3'
  transformers: ! '>=0.4.2.0 && <0.6'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
author: Will Fancher
latest: '0.2.0.1'
description-type: markdown
description: ! "Fraxl\n---\n\n[Hackage](https://hackage.haskell.org/package/fraxl)
  • [Presentation](https://youtu.be/Fe3-N9mKuPA)\n\nFraxl is a library based on Facebook's
  [Haxl](https://github.com/facebook/Haxl).\nThe goal is to decompose Haxl into more
  general parts,\nin order to form a stronger composition with better type safety
  and purity.\n\nUsage\n---\n\nUsing Fraxl is fairly similar to Haxl.\nYou define
  a request data type (often a GADT), and a `Fetch` function.\nWith this, Fraxl is
  able to perform requests concurrently.\n\n```haskell\ndata MySource a where\n  MyString
  :: MySource String\n  MyInt :: MySource Int\n\ntype Fetch f m a = ASeq f a -> m
  (ASeq m a)\n\nfetchMySource :: MonadIO m => Fetch MySource m a\nfetchMySource ANil
  = return ANil\nfetchMySource (ACons f fs) = (ACons. liftIO . wait)\n  <$> liftIO
  (async $ downloadSource f)\n  <*> fetchMySource fs\n\n> let a = ...\n> runFraxl
  fetchMySource a\n\n```\n\nYou'll notice a few things here.\nFor one, a data source
  can choose what monad it lives in.\nUnlike Haxl, which only lets you live in `IO`,\nFraxl
  is a monad transformer, allowing you to use arbitrary underlying monads.\nThus,
  maintaining state between fetches can be left up to the data source.\nThis can be
  used for several things, such as caching or session management.\n\nUnlike Haxl,
  a data source isn't tied to one fetch function.\nHaxl requires your data source
  to implement the `DataSource` class.\nBy passing a `Fetch` function to Fraxl,\nit's
  easy to have multiple interpretations of the same data source.\nThis is useful for
  mocking and testing data sources.\n\n`ASeq :: (* -> *) -> * -> *` is similar to
  a heterogenous list.\nIt is the data structure used by the fast free applicative.\nInterpreting
  this is akin to interpreting the free applicative.\n\nThe `Fetch` function takes
  a list of `f` requests,\nand for each request, returns an `m` action that waits
  on the response.\nThat is, `fetch` should start background threads for requests,\nand
  return all the actions for Fraxl to block with until they complete.\nThis way, Fraxl
  can have many requests start their work in parallel,\nand call all their wait-actions
  together.\n\nComposition\n---\n\nFraxl is a composition of general tools.\nAt the
  base of this composition is a free monad transformer\n([the basis of which is described
  here](http://elvishjerricco.github.io/2016/04/08/applicative-effects-in-free-monads.html)).\nThis
  is because Fraxl (and Haxl) is necessarily a free monad.\nIt's taking arbitrary
  data sources of kind `* -> *`,\nand constructing a monad out of them.\nSince there
  exists a free monad transformer with applicative optimization,\nthere's no reason
  not to use it and get the transformer structure for free.\n\nThe next layer of the
  composition is the free applicative.\nThe free monad with applicative optimization
  uses any applicative\n(rather than any functor, as with the traditional free monad).\nSince
  the free applicative uses any type of kind `* -> *`,\nit is the perfect candidate
  for this layer.\nIt allows Fraxl to see all the requests made in\nan applicative
  computation at once, which is how Fraxl can parallelize them.\n\nThe final layer
  is the data source layer.\nIt is user-specified, but will often be a `Union :: [*
  -> *] -> * -> *`.\nThe union is essentially a nested either type\nover any number
  of type constructors.\n\n```\nUnion '[f, g, h] a ≡ Either (f a) (Either (g a) (h
  a))\n```\n\nIf all of those types are data sources, the union allows\nFraxl to handle
  all of them as one data source, in one layer of Fraxl.\nThe nice thing about this
  is that it makes it type safe to use a data source.\nWhereas Haxl will simply trust
  that you know what you're doing,\nFraxl will make it a type error to forget to initialize
  a data source,\nor call a computation without guaranteeing its data source is available.\n\nThe
  data source layer can be easily modified.\nCaching is a substitution of this layer
  that replaces the data\nsource with one that caches the results of the original.\nIt
  does this with a dependent map, whose keys are requests,\nand whose values are `MVars`
  of the results.\nIf an uncached request is requested,\nan empty `MVar` is inserted
  into the cache map, the original `fetch` is called,\nand the result is stored in
  the `MVar`.\nIf a cached request is requested,\nthe wait-action returned will simply
  be `readMVar`.\n\n---\n\nCheck out [the example](examples/src/Main.hs) for a demonstration.\n"
license-name: BSD3
