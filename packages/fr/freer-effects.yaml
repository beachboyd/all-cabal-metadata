homepage: https://github.com/IxpertaSolutions/freer-effects
changelog-type: markdown
hash: 5e5595bd0b3d4a5ffe872f84ff778e08d9032750d87943ea85abe35abdb6adb3
test-bench-deps:
  free: -any
  freer-effects: -any
  base: -any
  criterion: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: ixcom-core@ixperta.com
synopsis: Implementation of effect system for Haskell.
changelog: ! "# Change Log\n\nAll notable changes to this project will be documented
  in this file.\n\n## [0.3.0.1] (April 16, 2017)\n\n* Relax `hlint` version bounds
  and disable `hlint` tests in non-developer\n  builds.\n  [#31](https://github.com/IxpertaSolutions/freer-effects/issues/31)\n\n##
  [0.3.0.0] (March 06, 2017)\n\n* Package renamed to `freer-effects` to distinguish
  it from original `freer`.\n  [#4](https://github.com/IxpertaSolutions/freer-effects/issues/4)\n*
  Fix `Could not deduce: effs ~ (r : rs)` that may occur when using\n  a `Member`
  contraint (a regression introduced in 0.2.4.0)\n  [freer!12](https://gitlab.com/queertypes/freer/merge_requests/12)\n*
  Add `runNatS` convenience function\n  [freer!13](https://gitlab.com/queertypes/freer/merge_requests/13)\n*
  Add `evalState` and `execState` convenience functions\n  [freer!14](https://gitlab.com/queertypes/freer/merge_requests/14)\n*
  Data constructors of `Yield`, `CutFalse`, `Fresh`, `State` and `Trace`\n  are now
  exposed in addition to `Exc`, `Reader` and `Writer`\n* Generalised type signature
  of `asks`.\n  [#7](https://github.com/IxpertaSolutions/freer-effects/issues/7)\n*
  Renamed modules `Data.Open.Union.*` to `Data.OpenUnion.*`.\n  [#8](https://github.com/IxpertaSolutions/freer-effects/issues/8)\n*
  `NonDetEff` separated into its own module and renamed to `NonDet`.\n  [#11](https://github.com/IxpertaSolutions/freer-effects/issues/11)\n*
  Reimplement `Union` using\n  <http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs>
  as a basis.\n  [#14](https://github.com/IxpertaSolutions/freer-effects/issues/14)\n*
  Renamed `Teletype` example DSL to `Console`.\n\n## [0.2.4.1] (November 25, 2016)\n\n*
  Restore GHC (7.8, 7.10) compatibility\n\n## 0.2.4.0 (November 25, 2016)\n\n* Internal
  reorg\n  * In particular, hide implementation details in Union.Internal\n  * Rewrite
  interpreters in terms of `extract` instead of `decomp`\n* Add `runNat` convenience
  function\n\n## 0.2.3.0 (June 25, 2016)\n\n* Add GHC 8 support\n\n## 0.2.2.2 (Sep.
  14, 2015)\n\n* Use local `data Nat` for `Data.Open.Union`\n  * Using GHC.TypeLits
  lead to overlapping instances\n\n## 0.2.2.1 (Sep. 14, 2015)\n\n* Document ALL THE
  THINGS\n\n## 0.2.2.0 (Sep. 13, 2015)\n\n* Add bench suite\n\n## 0.2.1.0 (Sep. 13,
  2015)\n\n* Add test suite\n\n## 0.2.0.2 (Sep. 12, 2015)\n\n* Clean up language extensions
  per file\n* Add Teletype DSL to the README\n\n## 0.2.0.1 (Sep. 12, 2015)\n\n* Add
  Teletype DSL example\n* Expose `send` in public interface\n\n## 0.2.0.0 (Sep. 12,
  2015)\n\n* Implement NonDetEff\n* Separate Cut/Coroutine out from Internals\n  *
  Partial implementation: won't compile yet\n* Extract remaining examples from Internal
  comments\n\n## 0.1.1.0 (Sep. 12, 2015)\n\n* Warnings clean up\n* Examples separated
  from primary implementation\n* Initial project documentation added\n\n## 0.1.0.0
  (Sep. 12, 2015)\n\n* Initial release\n\n[0.3.0.1]: https://github.com/IxpertaSolutions/freer/compare/0.3.0.0...0.3.0.1\n[0.3.0.0]:
  https://github.com/IxpertaSolutions/freer/compare/0.2.4.1...0.3.0.0\n[0.2.4.1]:
  https://github.com/IxpertaSolutions/freer/compare/0.2.4.0...0.2.4.1\n"
basic-deps:
  freer-effects: -any
  base: ! '>=4.7 && <5'
all-versions:
- 0.3.0.0
- 0.3.0.1
author: Allele Dev, Ixcom Core Team, and other contributors
latest: 0.3.0.1
description-type: markdown
description: ! "# Freer Effects: Extensible Effects with Freer Monads\n\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)](http://www.haskell.org)\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)](https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29)\n\n[![Hackage](http://img.shields.io/hackage/v/freer-effects.svg)](https://hackage.haskell.org/package/freer-effects)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/freer-effects.svg)](http://packdeps.haskellers.com/reverse/freer-effects)\n[![Build](https://travis-ci.org/IxpertaSolutions/freer-effects.svg?branch=master)](https://travis-ci.org/IxpertaSolutions/freer-effects)\n\n\n#
  Description\n\nLibrary `freer-effects` is an implementation of effect system for
  Haskell,\nwhich is based on the work of Oleg Kiselyov et al.:\n\n* [Freer Monads,
  More Extensible Effects](http://okmij.org/ftp/Haskell/extensible/more.pdf)\n* [Reflection
  without Remorse](http://okmij.org/ftp/Haskell/zseq.pdf)\n* [Extensible Effects](http://okmij.org/ftp/Haskell/extensible/exteff.pdf)\n\nMuch
  of the implementation is a repackaging and cleaning up of the reference\nmaterials
  provided [here](http://okmij.org/ftp/Haskell/extensible/).\n\n\n# Features\n\nThe
  key features of Freer are:\n\n* An efficient effect system for Haskell as a library.\n*
  Implementations for several common Haskell monads as effects:\n    * `Reader`\n
  \   * `Writer`\n    * `State`\n    * `StateRW`: State in terms of Reader/Writer.\n
  \   * `Trace`\n    * `Exception`\n* Core components for defining your own Effects.\n\n\n#
  Example: Console DSL\n\nHere's what using Freer looks like:\n\n```haskell\n{-# LANGUAGE
  GADTs #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE TypeOperators #-}\n{-#
  LANGUAGE DataKinds #-}\nmodule Console where\n\nimport Control.Monad.Freer\nimport
  Control.Monad.Freer.Internal\nimport System.Exit hiding (ExitSuccess)\n\n--------------------------------------------------------------------------------\n
  \                              -- Effect Model --\n--------------------------------------------------------------------------------\ndata
  Console s where\n    PutStrLn    :: String -> Console ()\n    GetLine     :: Console
  String\n    ExitSuccess :: Console ()\n\nputStrLn' :: Member Console r => String
  -> Eff r ()\nputStrLn' = send . PutStrLn\n\ngetLine' :: Member Console r => Eff
  r String\ngetLine' = send GetLine\n\nexitSuccess' :: Member Console r => Eff r ()\nexitSuccess'
  = send ExitSuccess\n\n--------------------------------------------------------------------------------\n
  \                         -- Effectful Interpreter --\n--------------------------------------------------------------------------------\nrunConsole
  :: Eff '[Console] w -> IO w\nrunConsole (Val x) = return x\nrunConsole (E u q) =\n
  \   case extract u of\n        PutStrLn msg -> putStrLn msg >>  runConsole (qApp
  q ())\n        GetLine      -> getLine      >>= \\s -> runConsole (qApp q s)\n        ExitSuccess
  \ -> exitSuccess\n\n--------------------------------------------------------------------------------\n
  \                            -- Pure Interpreter --\n--------------------------------------------------------------------------------\nrunConsolePure
  :: [String] -> Eff '[Console] w -> [String]\nrunConsolePure inputs req =\n    reverse
  . snd $ run (handleRelayS (inputs, []) (\\s _ -> pure s) go req)\n  where\n    go
  \ :: ([String], [String])\n        -> Console v\n        -> (([String], [String])
  -> Arr '[] v ([String], [String]))\n        -> Eff '[] ([String], [String])\n    go
  (is,   os) (PutStrLn msg) q = q (is, msg : os) ()\n    go (i:is, os) GetLine        q
  = q (is, os) i\n    go ([],   _ ) GetLine        _ = error \"Not enough lines\"\n
  \   go (_,    os) ExitSuccess    _ = pure ([], os)\n```\n\n\n# Contributing\n\nContributions
  are welcome! Documentation, examples, code, and feedback - they\nall help.\n\n\n##
  Developer Setup\n\nThe easiest way to start contributing is to install\n[stack](https://haskellstack.org/).
  Stack can install GHC/Haskell for you, and\nautomates common developer tasks.\n\nThe
  key commands are:\n\n* `stack setup` – install required version of GHC compiler\n*
  `stack build` – builds project, dependencies are automatically resolved\n* `stack
  test` – builds project, its tests, and executes the tests\n* `stack bench` – builds
  project, its benchmarks, and executes the benchamks\n* `stack ghci` – start a REPL
  instance with a project modules loaded\n* `stack clean`\n* `stack haddock` – builds
  documentation\n\nFor more information about `stack` tool can be found in its\n[documentation](https://haskellstack.org/).\n\n\n#
  Licensing\n\nThis project is distrubted under a BSD3 license. See the included\nLICENSE
  file for more details.\n\n\n# Acknowledgements\n\nPackage `freer-effects` started
  as a fork of\n[freer](http://hackage.haskell.org/package/freer) authored by Allele
  Dev.\n\nThis package would not be possible without the paper and the reference\nimplementation.
  In particular:\n\n* `Data.OpenUnion` maps to\n  [OpenUnion51.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs)\n*
  `Data.FTCQueue` maps to\n  [FTCQueue1](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)\n*
  `Control.Monad.Freer*` maps to\n  [Eff1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)\n\nThere
  will be deviations from the source.\n"
license-name: BSD-3-Clause
