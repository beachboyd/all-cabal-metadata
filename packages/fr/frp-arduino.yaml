homepage: http://github.com/frp-arduino/frp-arduino
changelog-type: ''
hash: edeb14791d5c55cb5dd636ec26b9f03a4e26c3e5d7683a7a40eb4368c3a10b96
test-bench-deps: {}
maintainer: ricli85@gmail.com
synopsis: Arduino programming without the hassle of C.
changelog: ''
basic-deps:
  base: ==4.*
  containers: -any
  mtl: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
author: Rickard Lindberg
latest: 0.1.1.0
description-type: markdown
description: ! "* [Introduction](#introduction)\n* [The language](#the-language)\n
  \ * [FRP](#frp)\n    * [Transforming](#transforming)\n    * [Keeping state](#keeping-state)\n
  \   * [Filtering](#filtering)\n  * [EDSL](#edsl)\n  * [Compiles to C](#compiles-to-c)\n*
  [Examples](#examples)\n  * [Running the examples](#running-the-examples)\n  * [Example:
  Blinking led](#example-blinking-led)\n  * [Example: Blinking pair of leds](#example-blinking-pair-of-leds)\n
  \ * [Example: Blinking with variable frequency](#example-blinking-with-variable-frequency)\n
  \ * [Example: Writing bytes on UART](#example-writing-bytes-on-uart)\n  * [Example:
  Displaying text on LCD](#example-displaying-text-on-lcd)\n* [API](#api)\n* [Questions](#questions)\n*
  [Contributing](#contributing)\n* [Developer Documentation](#developer-documentation)\n*
  [Resources](#resources)\n* [License](#license)\n* [This document](#this-document)\n\n##
  Introduction\n\nWe believe that programming the [Arduino](http://arduino.cc/) can
  be *more fun*\nif we don't have to use the C language to program it. We aim to create
  a new\nlanguage that allows us to program the Arduino using higher-level\nconstructs.
  Our mission:\n\n**Arduino programming without the hassle of C**\n\n## The language\n\nThe
  language we create has the following properties:\n\n* It is based on the functional
  reactive programming (FRP) paradigm\n* It is implemented as a deeply embedded domain
  specific language (EDSL) in\n  Haskell\n* It compiles to C code\n\nLets explore
  them in more detail.\n\n### FRP\n\nThis section introduces FRP and shows how it
  fits in the domain of programming\nan Arduino.\n\nThe central building block in
  FRP is a **stream**. A stream contains values\nthat change over time. Consider an
  input pin on the Arduino. If we constantly\nread the value of the pin we will get
  different values (high or low) over time:\n\n![Example input stream.](doc/input-stream.png)\n\nWe
  could take this stream and assign it to an output pin. Whenever there is a\nnew
  value on the input stream, that value will be sent to the output pin. In\nthis example
  we have a led connected to the output pin:\n\n![Stream connected to Arduino.](doc/stream-arduino.png)\n\nSo
  building an Arduino application using FRP involves capturing inputs as\nstreams,
  doing some interesting calculations (we'll come to that), and\nassigning streams
  to outputs.\n\n#### Transforming\n\nThe most common thing we do with streams is
  to transform the values in some\nway. This operation is called map ([`mapS`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:mapS)).
  Let's say we have a\nstream of numbers:\n\n![A stream of numbers.](doc/number-stream.png)\n\nWe
  can transform this stream to a stream of booleans by mapping a function that\nconverts
  even numbers to true and odd numbers to false:\n\n![Mapping numbers to booleans.](doc/map-number-stream.png)\n\nWe
  now have a stream that alternates its boolean value at a time interval.\n\nMapping
  is always a one-to-one conversion.\n\n#### Keeping state\n\nStreams can also be
  used to keep track of state. We achieve that with the fold\n([`foldpS`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:foldpS))
  operation.\n\nA fold is like a map where we also have access to a state and the
  output is the\nnew state.\n\nLet's say we have a stream of booleans representing
  if a button is pressed or\nnot. Now we want a stream that keeps track of the number
  of button presses. We\ncan do that by folding the following function (pseudo code)
  with an initial\n`clickCount` value of 0:\n\n    if buttonIsPressed\n        clickCount
  + 1\n    else\n        clickCount\n\n![Counting number of clicks.](doc/stream-fold.png)\n\nThe
  very first time `clickCount` is 0. Subsequent values are incremented by one\nif
  the boolean value is true, otherwise we just pass the current `clickCount`\nalong.\n\n####
  Filtering\n\nSometimes we would like to discard values from a stream. We do that
  with the\nfilter ([`filterS`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:filterS))
  operation.\n\nWe can for example keep all even numbers in a stream:\n\n![Filtering
  a stream.](doc/stream-filter.png)\n\n### EDSL\n\nOur language is embedded in the
  Haskell language. That means that when we write\nprograms in our language, we are
  actually writing Haskell programs.\n\nHowever, our programs will not look like standard
  Haskell because they use\ncustom operators that are more suited to the FRP paradigm.\n\nBy
  hosting our language inside Haskell, as opposed to making up our own custom\nsyntax,
  we gain a few things:\n\n* We don't have to write our own parser\n* We can take
  advantage of Haskell's advanced type system\n\nWhen we combine our program with
  the language library, we get an executable\nthat, when run, will produce a C file:\n\n![The
  EDSL workflow.](doc/edsl.png)\n\nThe executable is a compiler from our EDSL to C.\n\n###
  Compiles to C\n\nIn order to make our EDSL execute on the Arduino, we compile it
  to a C source\nfile which we then turn into avr assembly code by using the avr gcc
  toolchain.\n\n## Examples\n\nIn this section we will see what our EDSL looks like
  and what kinds of programs\nwe can write using it.\n\n### Running the examples\n\nCommand
  to compile an example:\n\n    ./make [name of example]\n\nCommand to compile and
  upload an example to a connected Arduino:\n\n    ./make [name of example] upload\n\nA
  board name can be specified as an environment variable if using a board other\nthan
  the Arduino Uno. Currently supported board names include \"Uno\" (default\nArduino
  Uno) and \"Nano\" (Arduino Nano).\n\n    BOARD=[name of board] ./make [name of example]
  upload\n\nBefore we can run these commands, we need to install a few dependencies:\n\n*
  [The Haskell platform](https://www.haskell.org/platform/)\n* [Arduino-Makefile](https://github.com/sudar/Arduino-Makefile)\n\nHaskell
  should be installed system wide, but Arduino-Makefile should just be\ncopied to
  the root of this repository.\n\nIn order to use Arduino-Makefile, we also need standard
  build tools like make\nand gcc, and in particular, the [gcc toolchain for avr](http://www.nongnu.org/avr-libc/).\n\nOn
  a Fedora system, we can install all dependencies with the following\ncommands:\n\n
  \   yum install haskell-platform\n    yum install arduino-core\n    git clone https://github.com/sudar/Arduino-Makefile.git\n\nHspec
  is required for tests to pass:\n\n    cabal update && cabal install hspec\n\nThe
  arduino-core package depends on the following packages:\n\n* avr-gcc\n* avr-gcc-c++\n*
  avr-libc\n* avrdude\n\n### Example: Blinking led\n\n<p align=\"center\">\n  <a href=\"http://youtu.be/UdIXmmp-6tw\">\n
  \     <img src=\"http://img.youtube.com/vi/UdIXmmp-6tw/0.jpg\">\n  </a>\n</p>\n\n```haskell\nimport
  Arduino.Uno\n\nmain = compileProgram $ do\n\n    digitalOutput pin13 =: clock ~>
  toggle\n```\n\n* Source code: [examples/Blink.hs](examples/Blink.hs)\n* Generated
  C code (no need to understand this): [examples/Blink.c](examples/Blink.c)\n* Compile
  and upload command: `./make Blink upload`\n\nThis is the hello world of Arduino
  programs.\n\nLets examine this example line by line:\n\n```haskell\nimport Arduino.Uno\n```\n\nThis
  imports functions that allow us to define a program in the EDSL.\n\n```haskell\nmain
  = compileProgram $ do\n```\n\nThe `main` function is the standard `main` function
  in Haskell. The\n[`compileProgram`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:compileProgram)
  function has the following type:\n\n```haskell\ncompileProgram :: Action a -> IO
  ()\n```\n\nThat means that we can define a set of actions in the do-block that we
  pass to\n`compileProgram`. It takes those actions, builds an internal representation
  of\nthe program, and then generates C code and writes that to a file.\n\nSo what
  action is defined by the last line in the example?\n\n```haskell\ndigitalOutput
  pin13 =: clock ~> toggle\n```\n\nLet's look at the type for the [`=:`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:-61-:)
  operator:\n\n```haskell\n(=:) :: Output a -> Stream a -> Action ()\n```\n\nIt takes
  an output of a specific type and connects it to a stream of values of\nthe same
  type.\n\nThe types of [`digitalOutput`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-Uno.html#v:digitalOutput)
  and [`pin13`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-Uno.html#v:pin13)\nreveal
  that we have an output for bits:\n\n```haskell\ndigitalOutput :: GPIO -> Output
  Bit\n\npin13 :: GPIO\n```\n\nThat means that the stream we define on the right hand
  side has to be a stream\nof bits. The stream is created with the following expression:\n\n```haskell\nclock
  ~> toggle\n```\n\nLet's look at the types of the individual components:\n\n```haskell\nclock
  :: Stream Word\n\n(~>) :: Stream a -> (Stream a -> Stream b) -> Stream b\n\ntoggle
  :: Stream Word -> Stream Bit\n```\n\n[`clock`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-Uno.html#v:clock)
  is a built in stream that produces incrementing\nintegers at a given time interval.\n\n[`toggle`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-Library.html#v:toggle)
  is a function that converts a stream of words to a\nstream of bits by mapping the
  [`isEven`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:isEven)
  function: Even words are\nconverted to 1 and odd words are converted to 0.\n\n[`~>`](http://hackage.haskell.org/package/frp-arduino/docs/Arduino-DSL.html#v:-126--62-)
  is an operator that takes a stream on the left hand side\nand a function on the
  right hand side. The result is a stream that we get by\napplying the function to
  the stream on the left hand side.\n\nThe resulting stream in the example is a stream
  of bits that toggles between 1\nand 0 values at a specific time interval. When we
  connect that stream to the\npin where the led is connect, the led will blink at
  a specific time interval.\n\n### Example: Blinking pair of leds\n\n<p align=\"center\">\n
  \ <a href=\"http://youtu.be/dWl3nfAJy08\">\n      <img src=\"http://img.youtube.com/vi/dWl3nfAJy08/0.jpg\">\n
  \ </a>\n</p>\n\n```haskell\nimport Arduino.Uno\n\nmain = compileProgram $ do\n\n
  \   let doubleOutput = output2 (digitalOutput pin12) (digitalOutput pin13)\n\n    doubleOutput
  =: every 5000 ~> flip2TupleStream\n\nflip2TupleStream :: Stream a -> Stream (Bit,
  Bit)\nflip2TupleStream = foldpS (\\_ -> flip2Tuple) (pack2 (bitLow, bitHigh))\n
  \   where\n        flip2Tuple :: Expression (a, b) -> Expression (b, a)\n        flip2Tuple
  tuple = let (aValue, bValue) = unpack2 tuple\n                           in pack2
  (bValue, aValue)\n```\n\n* Source code: [examples/DoubleBlink.hs](examples/DoubleBlink.hs)\n*
  Generated C code (no need to understand this): [examples/DoubleBlink.c](examples/DoubleBlink.c)\n*
  Compile and upload command: `./make DoubleBlink upload`\n\nThis example shows how
  to group two values together and output them to two\ndifferent outputs.\n\n### Example:
  Blinking with variable frequency\n\n```haskell\nimport Arduino.Uno\nimport Data.Tuple
  (swap)\n\nmain = compileProgram $ do\n\n    setupAlternateBlink pin11 pin12 (createVariableTick
  a0)\n\nsetupAlternateBlink :: GPIO -> GPIO -> Stream a -> Action ()\nsetupAlternateBlink
  pin1 pin2 triggerStream = do\n    output2 (digitalOutput pin1) (digitalOutput pin2)
  =: alternate triggerStream\n    where\n        alternate :: Stream a -> Stream (Bit,
  Bit)\n        alternate = foldpS2Tuple (\\_ -> swap) (bitLow, bitHigh)\n\ncreateVariableTick
  :: AnalogInput -> Stream ()\ncreateVariableTick limitInput = accumulator limitStream
  timerDelta\n    where\n        limitStream :: Stream Arduino.Uno.Word\n        limitStream
  = analogRead limitInput ~> mapS analogToLimit\n        analogToLimit :: Expression
  Arduino.Uno.Word -> Expression Arduino.Uno.Word\n        analogToLimit analog =
  1000 + analog * 20\n```\n\n* Source code: [examples/FrequencyBlink.hs](examples/FrequencyBlink.hs)\n*
  Generated C code (no need to understand this): [examples/FrequencyBlink.c](examples/FrequencyBlink.c)\n*
  Compile and upload command: `./make FrequencyBlink upload`\n\nThis is like blinking
  a pair of leds except that the frequency of the blinks in\nthis example depends
  on an analog input.\n\n### Example: Writing bytes on UART\n\n```haskell\nimport
  Arduino.Uno\n\nmain = compileProgram $ do\n\n    digitalOutput pin13 =: clock ~>
  toggle\n\n    uart =: timerDelta ~> mapSMany formatDelta ~> flattenS\n\nformatDelta
  :: Expression Arduino.Uno.Word -> [Expression [Byte]]\nformatDelta delta = [ formatString
  \"delta: \"\n                    , formatNumber delta\n                    , formatString
  \"\\r\\n\"\n                    ]\n```\n\n* Source code: [examples/UART.hs](examples/UART.hs)\n*
  Generated C code (no need to understand this): [examples/UART.c](examples/UART.c)\n*
  Compile and upload command: `./make UART upload`\n\nThis example shows how to write
  bytes to the UART output.\n\n### Example: Displaying text on LCD\n\n```haskell\nimport
  Arduino.Uno\nimport qualified Arduino.Library.LCD as LCD\n\nmain = compileProgram
  $ do\n\n    tick <- def clock\n\n    digitalOutput pin13 =: tick ~> toggle\n\n    setupLCD
  [ bootup ~> mapSMany (const introText)\n             , timerDelta ~> mapSMany statusText\n
  \            ]\n\nintroText :: [Expression LCD.Command]\nintroText = concat\n    [
  LCD.position 0 0\n    , LCD.text \"FRP Arduino\"\n    ]\n\nstatusText :: Expression
  Arduino.Uno.Word -> [Expression LCD.Command]\nstatusText delta = concat\n    [ LCD.position
  1 0\n    , LCD.text \":-)\"\n    ]\n\nsetupLCD :: [Stream LCD.Command] -> Action
  ()\nsetupLCD streams = do\n    LCD.output rs d4 d5 d6 d7 enable =: mergeS streams\n
  \   where\n        rs     = digitalOutput pin3\n        d4     = digitalOutput pin5\n
  \       d5     = digitalOutput pin6\n        d6     = digitalOutput pin7\n        d7
  \    = digitalOutput pin8\n        enable = digitalOutput pin4\n```\n\n* Source
  code: [examples/LCD.hs](examples/LCD.hs)\n* Generated C code (no need to understand
  this): [examples/LCD.c](examples/LCD.c)\n* Compile and upload command: `./make LCD
  upload`\n\nThis example shows how to display text on an LCD display.\n\n## API\n\nThe
  API documentation for the latest version is hosted in the Modules section on Hackage:\n\nhttp://hackage.haskell.org/package/frp-arduino\n\n##
  Questions\n\nWe want to be welcoming to newcomers.\n\nIn particular, if there is
  something you don't understand, please let us know\nand we'll try to explain it
  and improve our documentation.\n\nTo ask a question,\n[create a new issue](https://github.com/frp-arduino/frp-arduino/issues/new)\nand
  attach the question label.\n\n## Contributing\n\nThe contributors are listed in
  [AUTHORS](AUTHORS) (add yourself).\n\nWe use the [C4.1 (Collective Code Construction
  Contract)](http://rfc.zeromq.org/spec:22)\nprocess for contributions.\nMore discussions
  and explanations of the process can be found in the\n[The ZeroMQ Community](http://zguide.zeromq.org/page:all#Chapter-The-ZeroMQ-Community),\nin
  particular [here](http://zguide.zeromq.org/page:all#The-ZeroMQ-Process-C).\n\nComments
  on the process:\n\n> A patch MUST compile cleanly and pass project self-tests on
  at least the\n> principle target platform.\n\nIn our case, this means that `./test`
  should run without failure.\n\n[![Build Status](https://travis-ci.org/frp-arduino/frp-arduino.svg)](https://travis-ci.org/frp-arduino/frp-arduino)\n\n##
  Developer Documentation\nBelow is a collection of information to help developers
  extend and improve frp-arduino.\n\n* [Adding Boards](doc/adding-boards.md)\n\n##
  Resources\n\n* [Domain-specific Languages and Code Synthesis Using Haskell](http://queue.acm.org/detail.cfm?id=2617811)\n*
  [Tech Mesh 2012 - Making EDSLs fly - Lennart Augustsson](https://www.youtube.com/watch?v=7gF7iFB4mFY)\n*
  [Representing DSL expressions in Haskell](http://augustss.blogspot.se/2007/06/representing-dsl-expressions-in-haskell.html)\n\n##
  License\n\nThe Haskell library that implements the language and all examples are
  free\nsoftware, distributed under the GNU General Public License, version 3. For
  more\ninformation, see [COPYING](COPYING).\n\n## This document\n\nThis document
  ([README.md](README.md)) is automatically generated from the\nsources in the [doc](doc)
  folder by running `python doc/generate_readme.py`.\n"
license-name: GPL-3.0-only
