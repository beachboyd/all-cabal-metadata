homepage: http://github.com/ekmett/free/
changelog-type: markdown
hash: 078aa111e619d14939b031ea34ede2066fa35c34ab8e39ad0bcb91284afbb55e
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Monads for free
changelog: ! "5.0.1 [2018.03.07]\n------------------\n* Fix the build on old GHCs
  with `transformers-0.4`.\n\n5 [2018.01.28]\n--------------\n* Add a `Semigroup`
  instance for `IterT`.\n* Add `MonadFail` instances for `IterT` and `FreeT`.\n* Add
  a `Comonad` instance for the free `Applicative`, `Ap`.\n* Add `Control.Monad.Free.Ap`
  and `Control.Monad.Trans.Free.Ap` modules, based\n  on the \"Applicative Effects
  in Free Monads\" series of articles by Will\n  Fancher.\n* Derive `Data` instances
  for `Free` and `Cofree`.\n* `Control.Monad.Free.TH` now properly supports `template-haskell-2.11.0.0`.
  In\n  particular, it now supports `GadtC` and `RecGadtC`, which are new\n  `template-haskell`
  forms for representing GADTs.\n* Add `telescoped_`, `shoots`, and `leaves` to `Control.Comonad.Cofree`\n*
  Add the `Control.Applicative.Free.Fast` module, based on Dave Menendez's\n  article
  \"Free Applicative Functors in Haskell\"\n* Add `foldFreeT` to `Control.Monad.Trans.Free`\n*
  Improve the `foldMap` and `cutoff` functions for\n  `Control.Monad.Free.Church.F`,
  and add a `Traversable`\n* Add a `MonadBase` instance for `FreeT`\n* Add a performance
  test comparing Free and Church interpreters\n* The use of `prelude-extras` has been
  removed. `free` now uses the\n  `Data.Functor.Classes` module to give `free`'s datatypes
  instances of `Eq1`,\n  `Ord1`, `Read1`, and `Show1`. Their `Eq`, `Ord`, `Read`,
  and `Show` instances\n  have also been modified to incorporate these classes. For
  example, what\n  previously existed as:\n\n  ```haskell\n  instance (Eq (f (Free
  f a)), Eq a) => Eq (Free f a) where\n  ```\n\n  has now been changed to:\n\n  ```haskell\n
  \ instance (Eq1 f, Eq a) => Eq (Free f a) where\n  ```\n* Remove redundant `Functor`
  constraints from `Control.Alternative.Free`\n\n4.12.4\n------\n* Removed a number
  of spurious class constraints.\n* Support GHC 8\n\n4.12.3\n------\n* Support `comonad`
  5\n\n4.12.2\n------\n* Add instances for `ExceptT`: like `ErrorT`, but without an
  `Error` constraint.\n* Support `containers`\n* Support `transformers` 0.5\n\n\n4.12.1\n------\n*
  Support GHC 7.4\n\n4.12\n----\n* Add instances of `MonadCatch` and `MonadThrow`
  from `exceptions` to `FT`, `FreeT` and `IterT`.\n* `semigroupoids` 5, `profunctors`
  5, and `bifunctors` 5 support.\n\n4.11\n-----\n* Pass Monad[FreeT].fail into underlying
  monad\n* Add `retractT`.\n* Added `cutoff` for the church encoded free monad.\n*
  `cutoff` now accepts negative numbers.\n* Added `intersperseT` and `intercalateT`.\n*
  Added `foldFree` and `foldF`.\n* Added some new `template-haskell` toys.\n\n4.10.0.1\n------\n*
  Fix for very old `cabal` versions where the `MIN_VERSION_foo` macros aren't negation
  friendly.\n\n4.10\n----\n* Redefine `Alternative` and `MonadPlus` instances of `IterT`
  so that they apply to any underlying `Monad`.\n  `mplus` or `<|>` is Capretta's
  `race` combinator; `mzero` or `empty` is a non-terminating computation.\n* Redefine
  `fail s` for `IterT` as `mzero`, for any string `s`.\n* Added `Control.Monad.Trans.Iter.untilJust`,
  which repeatedly retries a `m (Maybe a)` computation until\n  it produces `Just`
  a value.\n* Fix things so that we can build with GHC 7.10, which also uses the name
  `Alt` in `Data.Monoid`, and which exports `Monoid` from `Prelude`.\n\n4.9\n---\n*
  Remove `either` support. Why? It dragged in a large number of dependencies we otherwise
  don't support, and so is probably best inverted.\n\n4.8.0.1\n-------\n* Allow complation
  with older versions of `base`. (Foldable didn't add foldl' until base 4.6)\n\n4.8\n-----\n*
  Added a `MonadFree` instance for `EitherT` (frrom the `either` package).\n* Support
  for `transformers` 0.4\n\n4.7.1\n-----\n* Added more versions of `cutoff`.\n\n4.7\n---\n*
  Added `prelude-extras` support. This makes it possible to work without `UndecidableInstances`
  for most operations.\n* Removed the `GHC_TYPEABLE` flag.\n\n4.6.1\n-----\n* Added
  `hoistF`\n\n4.6\n---\n* Víctor López Juan and Fabian Ruch added many documentation
  improvements and a whole host of proofs of correctness.\n* Improvements in the template
  haskell code generator.\n* Added instances for `MonadWriter` and `MonadCont` where
  appropriate, thanks to Nickolay Kudasov.\n* Added `cutoff`, `iterTM`, and `never`.\n*
  Made modifications to some `Typeable` and `Data` instances to work correctly on
  both GHC 7.8.1rc1 and 7.8.1rc2.\n* Removed `Control.MonadPlus.Free`. Use `FreeT
  f []` instead and the result will be law-abiding.\n* Replaced `Control.Alternative.Free`
  with a new approach that is law-abiding for left-distributive Alternatives.\n\n4.5\n-----\n*
  Added `Control.Monad.Free.TH` with `makeFree` to make it easier to write free monads.\n*
  Added missing instances for `MonadFix` and `MonadCont` where appropriate.\n\n4.2\n-----\n*
  Added `Control.Monad.Trans.Iter` and `Control.Comonad.Trans.Coiter`.\n\n4.1.1\n-----\n*
  Added a default signature to `wrap`, based on a construction by @fizruk.\n\n4.0\n---\n*
  Updated to work with `semigroupoids` and `comonad` 4.0\n* `instance ComonadCofree
  Maybe NonEmpty`\n* `instance ComonadCofree (Const b) ((,) b)`\n\n3.4.2\n-----\n*
  Generalized `liftF`.\n* Added `iterM`\n\n3.4.1\n-----\n* Added support for GHC 7.7's
  polykinded `Typeable`\n\n3.4\n---\n* Added instance `MonadFree f (ContT r m)`\n\n3.3.1\n-----\n*
  Refactored build system\n* Removed upper bounds on my own intra-package dependencies\n\n3.3\n---\n*
  Added `Control.Alternative.Free` and `Control.MonadPlus.Free`\n\n3.2\n---\n* Added
  `Control.Free.Applicative`\n* Moved `Control.Monad.Free.Church` from `kan-extensions`
  into this package.\n"
basic-deps:
  semigroupoids: ! '>=4 && <6'
  exceptions: ! '>=0.6 && <0.10'
  base: ==4.*
  comonad: ! '>=4 && <6'
  distributive: ! '>=0.2.1'
  semigroups: ! '>=0.8.3.1 && <1'
  containers: <0.6
  bifunctors: ! '>=4 && <6'
  mtl: ! '>=2.0.1.0 && <2.3'
  transformers-base: <0.5
  transformers: ! '>=0.2.0 && <0.6'
  template-haskell: ! '>=2.7.0.0 && <3'
  transformers-compat: ! '>=0.3 && <1'
  profunctors: ! '>=4 && <6'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '1.8.0'
- '1.8.0.1'
- '1.8.0.3'
- '1.8.0.4'
- '2.0'
- '2.0.1'
- '2.0.1.1'
- '2.0.2'
- '2.0.3'
- '2.1'
- '2.1.1'
- '2.1.1.1'
- '2.2'
- '3.0'
- '3.1'
- '3.1.1'
- '3.2'
- '3.3'
- '3.3.0.1'
- '3.3.0.2'
- '3.3.1'
- '3.4'
- '3.4.1'
- '3.4.2'
- '4.0'
- '4.1'
- '4.2'
- '4.4'
- '4.5'
- '4.6'
- '4.6.1'
- '4.7'
- '4.7.1'
- '4.8'
- '4.8.0.1'
- '4.9'
- '4.10.0.1'
- '4.11'
- '4.12'
- '4.12.1'
- '4.12.2'
- '4.12.3'
- '4.12.4'
- '5'
- '5.0.1'
author: Edward A. Kmett
latest: '5.0.1'
description-type: markdown
description: ! 'free

  ====


  [![Hackage](https://img.shields.io/hackage/v/free.svg)](https://hackage.haskell.org/package/free)
  [![Build Status](https://secure.travis-ci.org/ekmett/free.png?branch=master)](http://travis-ci.org/ekmett/free)


  This package provides a common definitions for working with free monads, free applicatives,
  and cofree comonads in Haskell.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
