homepage: https://github.com/coot/free-algebras#readme
changelog-type: markdown
hash: 3796d89793727177f5e0292b52ce240db90aa565fd31ced2f7f54e3f03738c0b
test-bench-deps:
  free: -any
  groups: -any
  data-fix: -any
  base: ! '>=4.9 && <5'
  kan-extensions: -any
  hedgehog: -any
  constraints: -any
  dlist: -any
  containers: -any
  free-algebras: -any
  natural-numbers: -any
  mtl: -any
  transformers: -any
maintainer: profunctor@pm.me
synopsis: Free algebras in Haskell.
changelog: |
  # Changelog for free-algebras

  ## Version 0.0.7.2
  - Enhanced documentation, and properly attributed fix in ChangeLog.

  ## Version 0.0.7.1
  - `Data.Group.Free.normalize` and `Data.Group.Free.normalizeL` are not both
    `O(n)`, but the former is implemented using the latter (e.g. transforms
    `DList` to a list), by Justin Le (https://github.com/mstsg)

  ## Version 0.0.7.0
  - Poly kinded `Control.Algebra.Free.FreeAlgebra` and
    `Control.Algebra.Free2.FreeAlgebra2`
  - removed actions (MSet, SSet), use `monoid-extras` or `semigroups-actions`
    packages

  ## Version 0.0.6.0
  - `Num a => SSet (Sum a) a` and `Num a => SSet (Product a) a` instances
  - `Num a => MSet (Sum a) a` and `Num a => MSet (Product a) a` instances
  - removed some overlapping instances for `SSet` and `MSet`
  - `Control.Algebra.Free2` module, see `free-category` package for applications.

  ## Version 0.0.5.1
  - Improved documentation

  ## Version 0.0.5.0
  - `FreeAlgebra` renamed `proof` to `codom`, added `Proof` smart constructor `proof`.
  - `FreeAlgebra` instance for `Identity` functor
  - generic `Free` type
  - `DList` and `FreeGroup` based on `DList`, `FreeGroupL`
  - documentation on strictness / laziness improved

  ## Version 0.0.4.0

  - `S` new type wrapper in `SSet`, and overlappable instance for
    `SSet s a => SSet (S s) (Endo a)`
  - `foldrFree` and friends
  - `foldrMSet`
  - documented intersection with `monad-mmorph` package.

  ## Version 0.0.3.0

  - Breaking change: changed proofs in FreeAlgebra and FreeAlgebra1 class; now
    using `FreeAlgebra` and `FreeAlgebra1` classes let us deduce an adjunction.
  - Monadicity example

  ## Version 0.0.2.0
  - Simplified `Proof` type.

  ## Unreleased changes
basic-deps:
  free: ! '>=4.0 && <6.0'
  groups: ! '>=0.3 && <0.5'
  data-fix: <0.3
  base: ! '>=4.9 && <5'
  kan-extensions: ! '>=4.1 && <6.0'
  constraints: ! '>=0.8 && <0.11.0'
  dlist: ! '>=0.8 && <0.9'
  containers: ! '>=0.4.2 && <0.7'
  natural-numbers: ! '>=0.1 && <0.2'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.5 && <0.6'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.5.0
- 0.0.5.1
- 0.0.6.0
- 0.0.7.0
- 0.0.7.1
- 0.0.7.2
author: Marcin Szamotulski
latest: 0.0.7.2
description-type: markdown
description: |
  # Free Algebras
  [![Maintainer: coot](https://img.shields.io/badge/maintainer-coot-lightgrey.svg)](http://github.com/coot)
  [![CircleCI](https://circleci.com/gh/coot/free-algebras/tree/master.svg?style=svg)](https://circleci.com/gh/coot/free-algebras/tree/master)

  Universal algebra approach (which is compatible with categorical approach) to
  free algebras (including higher order structures like functors, applicative
  functors or monads).  Mathematical introduction alongside with some Haskell
  ideas can be found
  [here](https://marcinszamotulski.me/posts/free-monads.html).

  For an example check out [this](https://github.com/coot/free-algebras/blob/master/examples/src/Network/TCP.hs).
license-name: MPL-2.0
