homepage: https://github.com/aaronlevin/free-http
changelog-type: ''
hash: beeb9639e36c13497dbaad5e13d8fa01385e619334aa62d79234a96aae5b36fe
test-bench-deps: {}
maintainer: vilevin@gmail.com
synopsis: An HTTP Client based on Free Monads.
changelog: ''
basic-deps:
  http-client: ! '>=0.4.0'
  free: ! '>=4.0'
  bytestring: ! '>=0.10.0.0'
  base: ! '>4.6 && <4.9'
  time: ! '>=1.4.0.1'
  text: ! '>=1.0.0.0'
  mtl: ! '>=2.0.0.0'
  transformers: ! '>=0.4.0.0'
  QuickCheck: ! '>=2.7'
  http-types: ! '>=0.8.0'
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.2.0
author: Aaron Levin
latest: 0.2.0
description-type: markdown
description: ! "Free Your Client... and Your Requests Will Follow\n=================================================\n\n`free-http`
  is an http-client based on Free Monads. `free-http` exposes a Free Monad to express
  standard http verbs as well as several backends to interpet programs written in
  the free monad using various http clients (currently: a pure client, an `http-client`-backed
  client, and a random client).\n\nSee [here](https://github.com/aaronlevin/free-http/blob/master/src/Network/HTTP/Client/Free/Examples.hs#L152)
  for an example.\n\nTo use free-http, simply:\n\n1. Import Network.HTTP.Client.Free
  to use the library.\n2. Choose your base request type by defining your own instance
  of the `RequestType` type family or importing one from an interpreter. E.g.\n\n
  \ ```\n  data MyClient\n  type instance RequestType MyClient = Request\n  ```\n\n
  \ or\n\n  ```\n  import Network.HTTP.Free.Client.HttpClient (HttpClient)\n  ```\n\n3.
  Choose your base response type by defining your own instance of the `ResponseTYpe`
  type family or importing one from an interpreter. E.g.  \n\n  ```\n  type instance
  ResponseType MyClient = Response ByteString\n  ```\n\n  or\n\n  ```\n  import Network.HTTP.Free.Client.HttpClient
  (HttpClient)\n  ```\n\n4. Write a program in the 'FreeHttp MyClient m a' free monad.\n5.
  Import an interpreter, such as 'HttpClient'\n\n  ```\n  import Network.HTTP.Free.Client.HttpClient\n
  \ ```\n\n6. Run your program against the interpreter:\n\n  ```\n  runHttp (myProgram
  :: FreeHttp MyClient IO String)\n  ```\n\n## Design Choices\n\n### `RequestType`
  and `ResponseType`\n\nHaskell is fortunate to have several very well-designed http
  clients: [http-client](https://hackage.haskell.org/package/http-client-0.4.16/docs/Network-HTTP-Client.html),
  [wreq](http://www.serpentine.com/wreq/), [http-conduit](https://hackage.haskell.org/package/http-conduit),
  [pipes-http](https://hackage.haskell.org/package/pipes-http), etc. Unfortunately,
  a few of those clients support several different *Request* and *Response* types.
  To keep `free-http` flexible, we use two type families defined as:\n\n```\ntype
  family RequestType client  :: *\ntype family ResponseType client :: *\n```\n\nOur
  `HttpF` functor is thus defined as:\n\n```\ndata HttpF client a = HttpF StdMethod
  (RequestType client) (ResponseType client -> a)\n                    deriving Functor\n```\n\nThis
  allows our `HttpF` functor to be agnostic of the foundational request and response
  type, while allowing interpreter authors to specify the concrete types they need
  for their http client libraries (e.g. `Request` in the case of `http-client`). A
  consequence of this is that `free-http` clients (you) need to specify, at some point,
  the foundation you're using. This can be done in two ways:\n\n1. You can define
  your own foundation (see above).\n2. You can import one from an interpreter.\n\nTo
  specify your request and response foundation, use replace the `client` type in `HttpF
  client a` or `FreeHttp client m a` to the type signalling your foundation. For example,
  the http-client, pure, and arbitrary interpreters use `HttpClient`, `PureClient`,
  and `ArbitraryClient` respectively.\n"
license-name: MIT
