homepage: https://github.com/lexi-lambda/freer-simple#readme
changelog-type: markdown
hash: 2419be815725c8e3f55947603da00ee4978396ed2480ea3dacf8227d36aa8781
test-bench-deps:
  free: -any
  extensible-effects: -any
  base: '>=4.9 && <5'
  freer-simple: -any
  criterion: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: Implementation of a friendly effect system for Haskell.
changelog: |
  # 1.2.1.1 (October 4th, 2019)

  - Loosened bounds on `template-haskell` ([#29](https://github.com/lexi-lambda/freer-simple/issues/29)).
  - Made some minor internal changes to better support GHC 8.8.

  # 1.2.1.0 (November 15th, 2018)

  - Improved `makeEffect` from `Control.Monad.Freer.TH` to support more datatypes ([#17](https://github.com/lexi-lambda/freer-simple/pull/17)).

  # 1.2.0.0 (October 23rd, 2018)

  - Added `Control.Monad.Freer.TH`, which provides a `makeEffect` function that automatically generates boilerplate operations using `send` for an effect ([#15](https://github.com/lexi-lambda/freer-simple/pull/15)).

  # 1.1.0.0 (February 20th, 2018)

  - Changed the implementation of `LastMember` to avoid an issue similar to the one with `Member` fixed in 1.0.1.1 that could cause the constraint to unnecessarily fail to solve ([#6](https://github.com/lexi-lambda/freer-simple/issues/6)).
  - Changed the order of the type variables in `interpretM` to be more consistent with other functions (only relevant in combination with `TypeApplications`).
  - Re-exported `(~>)` from `Control.Natural` through `Control.Monad.Freer`.

  # 1.0.1.1 (January 31st, 2018)

  - Fixed a bug that could cause `Member` constraints to erroneously fail to solve ([#3](https://github.com/lexi-lambda/freer-simple/pull/3)).

  # 1.0.1.0 (January 27th, 2018)

  - Added `subsume` to `Control.Monad.Freer` for deduplicating effects.
  - Added `gets` to `Control.Monad.Freer.State` ([#1](https://github.com/lexi-lambda/freer-simple/pull/1)).

  # 1.0.0.0 (December 7th, 2017)

  - Initial release.
basic-deps:
  base: '>=4.9 && <5'
  freer-simple: -any
  natural-transformation: '>=0.2'
  transformers-base: -any
  template-haskell: '>=2.11 && <2.17'
all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.1.1
author: Allele Dev, Ixcom Core Team, Alexis King, and other contributors
latest: 1.2.1.1
description-type: markdown
description: |
  # Freer: Extensible Effects with Freer Monads [![Build Status](https://travis-ci.org/lexi-lambda/freer-simple.svg?branch=master)](https://travis-ci.org/lexi-lambda/freer-simple)

  # Description

  The `freer-simple` library (a fork of [`freer-effects`](http://hackage.haskell.org/package/freer-effects)) is an implementation of an effect system for Haskell, which is based on the work of Oleg Kiselyov et al.:

    - [Freer Monads, More Extensible Effects](http://okmij.org/ftp/Haskell/extensible/more.pdf)
    - [Reflection without Remorse](http://okmij.org/ftp/Haskell/zseq.pdf)
    - [Extensible Effects](http://okmij.org/ftp/Haskell/extensible/exteff.pdf)

  Much of the implementation is a repackaging and cleaning up of the reference materials provided [here](http://okmij.org/ftp/Haskell/extensible/).

  # Features

  The key features of `freer-simple` are:

    - An efficient effect system for Haskell as a library.
    - Implementations for several common Haskell monads as effects:
      - `Reader`
      - `Writer`
      - `State`
      - `Trace`
      - `Error`
    - Core components for defining your own Effects.

  # Example: Console DSL

  Here's what using `freer-simple` looks like:

  ```haskell
  {-# LANGUAGE GADTs #-}
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE TypeOperators #-}
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE LambdaCase #-}
  module Console where

  import Control.Monad.Freer
  import Control.Monad.Freer.Error
  import Control.Monad.Freer.State
  import Control.Monad.Freer.Writer
  import System.Exit hiding (ExitCode(ExitSuccess))

  --------------------------------------------------------------------------------
                                 -- Effect Model --
  --------------------------------------------------------------------------------
  data Console r where
    PutStrLn    :: String -> Console ()
    GetLine     :: Console String
    ExitSuccess :: Console ()

  putStrLn' :: Member Console effs => String -> Eff effs ()
  putStrLn' = send . PutStrLn

  getLine' :: Member Console effs => Eff effs String
  getLine' = send GetLine

  exitSuccess' :: Member Console effs => Eff effs ()
  exitSuccess' = send ExitSuccess

  --------------------------------------------------------------------------------
                            -- Effectful Interpreter --
  --------------------------------------------------------------------------------
  runConsole :: Eff '[Console, IO] a -> IO a
  runConsole = runM . interpretM (\case
    PutStrLn msg -> putStrLn msg
    GetLine -> getLine
    ExitSuccess -> exitSuccess)

  --------------------------------------------------------------------------------
                               -- Pure Interpreter --
  --------------------------------------------------------------------------------
  runConsolePure :: [String] -> Eff '[Console] w -> [String]
  runConsolePure inputs req = snd . fst $
      run (runWriter (runState inputs (runError (reinterpret3 go req))))
    where
      go :: Console v -> Eff '[Error (), State [String], Writer [String]] v
      go (PutStrLn msg) = tell [msg]
      go GetLine = get >>= \case
        [] -> error "not enough lines"
        (x:xs) -> put xs >> pure x
      go ExitSuccess = throwError ()
  ```

  # Contributing

  Contributions are welcome! Documentation, examples, code, and feedback - they all help.


  ## Developer Setup

  The easiest way to start contributing is to install [stack](https://haskellstack.org/). Stack can install GHC/Haskell for you, and automates common developer tasks.

  The key commands are:

    - `stack setup` — install required version of GHC compiler
    - `stack build` — builds project, dependencies are automatically resolved
    - `stack test` — builds project, its tests, and executes the tests
    - `stack bench` — builds project, its benchmarks, and executes the benchamks
    - `stack ghci` — start a REPL instance with a project modules loaded
    - `stack clean`
    - `stack haddock` — builds documentation

  More information about `stack` can be found in its [documentation](https://haskellstack.org/).

  # Licensing

  This project is distributed under a BSD3 license. See the included LICENSE file for more details.

  # Acknowledgements

  The `freer-simple` package started as a fork of [freer-effects](http://hackage.haskell.org/package/freer-effects) by Ixperta Solutions, which in turn is a fork of [freer](http://hackage.haskell.org/package/freer) by Allele Dev. All implementations are based on the paper and reference implementation by Oleg Kiselyov. In particular:

    - `Data.OpenUnion` maps to [OpenUnion51.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs)
    - `Data.FTCQueue` maps to [FTCQueue1](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)
    - `Control.Monad.Freer*` maps to [Eff1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)

  There will be deviations from the source.
license-name: BSD-3-Clause
