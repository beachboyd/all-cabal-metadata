homepage: https://github.com/lexi-lambda/freer-simple#readme
changelog-type: markdown
hash: 8e48416a24a066dc3595ecdc525323183f4862f2c2909a686898af4a6dd1e37c
test-bench-deps:
  free: -any
  extensible-effects: -any
  base: ! '>=4.9 && <5'
  freer-simple: -any
  criterion: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: Implementation of a friendly effect system for Haskell.
changelog: ! '# 1.2.0.0 (October 23rd, 2018)


  - Added `Control.Monad.Freer.TH`, which provides a `makeEffect` function that automatically
  generates boilerplate operations using `send` for an effect ([#15](https://github.com/lexi-lambda/freer-simple/pull/15)).


  # 1.1.0.0 (February 20th, 2018)


  - Changed the implementation of `LastMember` to avoid an issue similar to the one
  with `Member` fixed in 1.0.1.1 that could cause the constraint to unnecessarily
  fail to solve ([#6](https://github.com/lexi-lambda/freer-simple/issues/6)).

  - Changed the order of the type variables in `interpretM` to be more consistent
  with other functions (only relevant in combination with `TypeApplications`).

  - Re-exported `(~>)` from `Control.Natural` through `Control.Monad.Freer`.


  # 1.0.1.1 (January 31st, 2018)


  - Fixed a bug that could cause `Member` constraints to erroneously fail to solve
  ([#3](https://github.com/lexi-lambda/freer-simple/pull/3)).


  # 1.0.1.0 (January 27th, 2018)


  - Added `subsume` to `Control.Monad.Freer` for deduplicating effects.

  - Added `gets` to `Control.Monad.Freer.State` ([#1](https://github.com/lexi-lambda/freer-simple/pull/1)).


  # 1.0.0.0 (December 7th, 2017)


  - Initial release.

'
basic-deps:
  base: ! '>=4.9 && <5'
  freer-simple: -any
  natural-transformation: ! '>=0.2'
  transformers-base: -any
  template-haskell: ! '>=2.11 && <2.15'
all-versions:
- '1.0.0.0'
- '1.0.1.0'
- '1.0.1.1'
- '1.1.0.0'
- '1.2.0.0'
author: Allele Dev, Ixcom Core Team, Alexis King, and other contributors
latest: '1.2.0.0'
description-type: markdown
description: ! "# Freer: Extensible Effects with Freer Monads [![Build Status](https://travis-ci.org/lexi-lambda/freer-simple.svg?branch=master)](https://travis-ci.org/lexi-lambda/freer-simple)\n\n#
  Description\n\nThe `freer-simple` library (a fork of [`freer-effects`](http://hackage.haskell.org/package/freer-effects))
  is an implementation of an effect system for Haskell, which is based on the work
  of Oleg Kiselyov et al.:\n\n  - [Freer Monads, More Extensible Effects](http://okmij.org/ftp/Haskell/extensible/more.pdf)\n
  \ - [Reflection without Remorse](http://okmij.org/ftp/Haskell/zseq.pdf)\n  - [Extensible
  Effects](http://okmij.org/ftp/Haskell/extensible/exteff.pdf)\n\nMuch of the implementation
  is a repackaging and cleaning up of the reference materials provided [here](http://okmij.org/ftp/Haskell/extensible/).\n\n#
  Features\n\nThe key features of `freer-simple` are:\n\n  - An efficient effect system
  for Haskell as a library.\n  - Implementations for several common Haskell monads
  as effects:\n    - `Reader`\n    - `Writer`\n    - `State`\n    - `Trace`\n    -
  `Error`\n  - Core components for defining your own Effects.\n\n# Example: Console
  DSL\n\nHere's what using `freer-simple` looks like:\n\n```haskell\n{-# LANGUAGE
  GADTs #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE TypeOperators #-}\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE LambdaCase #-}\nmodule Console where\n\nimport
  Control.Monad.Freer\nimport Control.Monad.Freer.Error\nimport Control.Monad.Freer.State\nimport
  Control.Monad.Freer.Writer\nimport System.Exit hiding (ExitCode(ExitSuccess))\n\n--------------------------------------------------------------------------------\n
  \                              -- Effect Model --\n--------------------------------------------------------------------------------\ndata
  Console r where\n  PutStrLn    :: String -> Console ()\n  GetLine     :: Console
  String\n  ExitSuccess :: Console ()\n\nputStrLn' :: Member Console effs => String
  -> Eff effs ()\nputStrLn' = send . PutStrLn\n\ngetLine' :: Member Console effs =>
  Eff effs String\ngetLine' = send GetLine\n\nexitSuccess' :: Member Console effs
  => Eff effs ()\nexitSuccess' = send ExitSuccess\n\n--------------------------------------------------------------------------------\n
  \                         -- Effectful Interpreter --\n--------------------------------------------------------------------------------\nrunConsole
  :: Eff '[Console, IO] a -> IO a\nrunConsole = runM . interpretM (\\case\n  PutStrLn
  msg -> putStrLn msg\n  GetLine -> getLine\n  ExitSuccess -> exitSuccess)\n\n--------------------------------------------------------------------------------\n
  \                            -- Pure Interpreter --\n--------------------------------------------------------------------------------\nrunConsolePure
  :: [String] -> Eff '[Console] w -> [String]\nrunConsolePure inputs req = snd . fst
  $\n    run (runWriter (runState inputs (runError (reinterpret3 go req))))\n  where\n
  \   go :: Console v -> Eff '[Error (), State [String], Writer [String]] v\n    go
  (PutStrLn msg) = tell [msg]\n    go GetLine = get >>= \\case\n      [] -> error
  \"not enough lines\"\n      (x:xs) -> put xs >> pure x\n    go ExitSuccess = throwError
  ()\n```\n\n# Contributing\n\nContributions are welcome! Documentation, examples,
  code, and feedback - they all help.\n\n\n## Developer Setup\n\nThe easiest way to
  start contributing is to install [stack](https://haskellstack.org/). Stack can install
  GHC/Haskell for you, and automates common developer tasks.\n\nThe key commands are:\n\n
  \ - `stack setup` — install required version of GHC compiler\n  - `stack build`
  — builds project, dependencies are automatically resolved\n  - `stack test` — builds
  project, its tests, and executes the tests\n  - `stack bench` — builds project,
  its benchmarks, and executes the benchamks\n  - `stack ghci` — start a REPL instance
  with a project modules loaded\n  - `stack clean`\n  - `stack haddock` — builds documentation\n\nMore
  information about `stack` can be found in its [documentation](https://haskellstack.org/).\n\n#
  Licensing\n\nThis project is distributed under a BSD3 license. See the included
  LICENSE file for more details.\n\n# Acknowledgements\n\nThe `freer-simple` package
  started as a fork of [freer-effects](http://hackage.haskell.org/package/freer-effects)
  by Ixperta Solutions, which in turn is a fork of [freer](http://hackage.haskell.org/package/freer)
  by Allele Dev. All implementations are based on the paper and reference implementation
  by Oleg Kiselyov. In particular:\n\n  - `Data.OpenUnion` maps to [OpenUnion51.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs)\n
  \ - `Data.FTCQueue` maps to [FTCQueue1](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)\n
  \ - `Control.Monad.Freer*` maps to [Eff1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)\n\nThere
  will be deviations from the source.\n"
license-name: BSD3
