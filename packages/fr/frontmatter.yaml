homepage: https://github.com/yamadapc/haskell-frontmatter
changelog-type: markdown
hash: 76ea8dc6787f3181cba818f397d8cd6adc5870c161f63c5c06708617717b7f62
test-bench-deps:
  bytestring: -any
  frontmatter: -any
  base: -any
  hspec: -any
  text: -any
  attoparsec: -any
  QuickCheck: -any
  yaml: -any
maintainer: tacla.yamada@gmail.com
synopsis: Parses frontmatter as used in Jekyll markdown files.
changelog: ! '# 0.1.0.2

  - Improve the cabal description


  # 0.1.0.1

  - Add changelog to hackage package


  # 0.1.0.0

  Initial version published to hackage

'
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  attoparsec: ! '>=0.11.3.0'
  yaml: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Pedro Tacla Yamada
latest: 0.1.0.2
description-type: markdown
description: ! "# haskell-frontmatter\n[![Build Status](https://travis-ci.org/yamadapc/haskell-frontmatter.svg?branch=master)](https://travis-ci.org/yamadapc/haskell-frontmatter)\n[![Hackage
  Version](https://img.shields.io/hackage/v/frontmatter.svg)](http://hackage.haskell.org/package/frontmatter)\n-
  - -\nAttoparsec parsers for YAML frontmatter as used in Jekyll. Because of how\n`Data.Yaml`
  is implemented using `Data.Aeson`, the\n`Data.Yaml.Frontmatter.frontmatterYaml`
  instance of `Parser` works with YAML and\nJSON.\n\n## Installation\n_This actually
  won't work right now_\n```\n$ stack install frontmatter\n```\n\n## Usage\n```haskell\nimport
  Data.Frontmatter\nimport Data.Yaml (Value)\n\nmain = ByteString.readFile \"something.md\"
  >>= parseYamlFrontmatter >>= \\case\n    Done ri fm -> do\n        print (fm ::
  Value) -- aeson object in the frontmatter (the explicit\n                            --
  type required because the parser will return\n                            -- anything
  with a FromJSON\n\n        putStrLn ri         -- rest of the document\n    _ ->
  error \"Parse failure\"\n```\n\nSee the haddocks for more information. Essentially
  exports an `Attoparsec`\nparser and some helpers. Usage examples also available
  at the `test` directory.\n\n## Why?\nI'm working on the Haskell workshop tool\n[`workhs`](https://github.com/haskellbr/workhs).
  In my mind, using markdown file\nnames as metadata is a very sensible decision.
  However, I'd like for tutorial\nwriters to be able to override metadata. Then, Jekyll's
  YAML frontmatter format\nis a great choice:\n- It's familiar\n- It's very, very
  easy to implement\n\n## License\nThis software is published under the MIT license.
  For more information refer to\nthe [LICENSE](/LICENSE) file.\n"
license-name: MIT
