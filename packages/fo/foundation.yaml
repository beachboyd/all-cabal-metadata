homepage: https://github.com/haskell-foundation/foundation
changelog-type: markdown
hash: 34ae8673a56abee46b149cc541fccab0faac9941c2f5eb59c65c10c50b862515
test-bench-deps:
  basement: -any
  base: ==4.*
  foundation: -any
  gauge: ! '>=0.2.0'
maintainer: vincent@snarc.org
synopsis: Alternative prelude with batteries and no dependencies
changelog: ! "## 0.0.18\n\n* Add missing lowlevel Block functionality\n* Cleanup UArray
  to use more functions from Block\n* Push Xoroshiro down to basement\n* Add instances
  for foundation's numerical classes for C types\n* Update benchmarks to gauge 0.2.0\n*
  Add documentation to some block & uarray functions\n\n## 0.0.17\n\n* Add Terminal
  capabilities: ANSI Escape, UTF8 codepage initialization, get dimensions\n* Checks:
  Output now has colors\n* Hashable: Add Word128 & Word256 & Boxed Array instances\n*
  Semigroup: Compatibility with GHC 8.4\n* Drop criterion for benchmark, now use Gauge\n*
  Remove more UnboxedTuples from Foundation for easier loading with bytecode interpreter\n*
  Reduce overhead of profiling common primitive operation like size and offset addition
  by\n  preventing auto-caf in abstraction module\n* Optimise UTF8 validation\n* Optimise
  String toList (allow fusion)\n* Optimise String reversal\n* Merge different version
  of lowlevel array algorithms with one backed by a class.\n* Zn64/Zn : Add Num, Additive,
  Subtractive, NormalForm, Arbitrary instances\n\n## 0.0.16\n\n* Re-organize type
  sized structure and add UVect and Vect\n* Cleanup constraint in ListN, and add couple
  of combinators\n* Add ExceptT\n* Add some exception combinators (try,finally) that
  works with foundation classes.\n* Tidy mutable algorithm for sorting removing redundant
  code\n* Add primitive to convert Double/Float to Word64/Word32\n* Cleanup withPtr
  / getAddr code to be safer\n\n## 0.0.15\n\n* Add Bits instance for Natural compat
  with 7.8\n\n## 0.0.14\n\nTypes:\n\n* Add bounded Natural (Zn & Zn64)\n* Add Word128
  and Word256\n\nClass:\n\n* Add From/Into type class\n\nCollection:\n\n* Add breakEnd,
  spanEnd, revFindIndex\n* Improve arrays sorting\n* Add arrays fromListN implementation\n*
  Add arrays convertion primitive\n\nBlockN:\n\n* Cleanup API\n* Implement unsnoc\n\nMisc:\n\n*
  Improve random generation with XorShift\n* Improve ghc 8.2 support (warning removals)\n*
  Remove dependency on QuickCheck\n* Split lowlevel modules into basement package\n*
  Fix compilation with musl\n* Improve native array safety when using through pointer\n\nFile:\n\n*
  remove foldText\n\n## 0.0.13\n\nBlock:\n* Optimise fold\n\nUArray:\n* Re-organise
  type to be more modular for later change\n* Remove the pinned array explicit status
  in favor of asking\n  the runtime system directly on demand.\n* Optimise fold operations\n*
  Optimise all&any\n* Optimise isPrefixOf\n* Optimise isSuffixOf\n* Optimise finding
  byte\n* Add an optimise function to break on line (CRLF & LF) as part of a stream\n\nString:\n*
  Optimise length\n* Optimise all&any\n* Optimise foldr\n* Remove many unboxed tuples
  (next, prev, ..) in favor of a strict unpack\n  constructor\n* Optimise lines using
  array breakLine\n\nCollection:\n* add stripPrefix & stripSuffix\n\nTests:\n* Improve
  performance\n\nMisc:\n* Cleanup Offset/Size types with the C boundary\n* Faster
  Offset/Size convertions\n* Add Base64 support\n* Add LE/BE instance for NormalForm\n*
  Add UUID generation and parsing\n\n## 0.0.12\n\n* Fix build windows building & time
  subsystem\n* Add BlockN: Typed-fixed length block of memory\n* Add Base64\n* Add
  'or' and 'and'\n\n## 0.0.11\n\n* Add Hlint support (configuration file), and default
  travis job\n* Property report error through with the ASCII, UTF16, UTF32 string
  decoders\n* Fix issue with OSX < Sierra\n* Improve Parser and fix backtracking issue\n*
  Strictify UArray to contains a strict ByteArray#\n* Improve any & all for most collection
  types\n* Improve minimum & maximum for most collection types\n* Add foldl1 & foldr1\n*
  Add takeWhile & dropWhile\n* Remove foldl\n* Add basic String builder\n* Add String
  replace function\n* Add conduit sourceList\n* Improve performance of String uncons,
  unsnoc, filter and fromBytes UTF8 (validate)\n* Improve UArray filter\n* Fix compilation
  issue on windows with `clock_gettime` which is not available though all possible
  compilation mode\n\n## 0.0.10\n\n* Cleanup collection APIs that take a lone Int
  (length, take, drop, splitAt, ..) to take a CountOf\n* Rename Size to CountOf\n*
  Add basic time functions\n* Add os dependent timing capability\n* Add simple pattern
  matching for test names with checks.\n* add '--list-tests' for checks\n* Optimise
  Eq and Ord for blocks and uarray\n\n## 0.0.9\n\n* Introduce Block & MutableBlock
  which represent a chunk of memory without slices\n  and are faster/leaner in many
  cases.\n* Cleanup String code and some primitives boundaries\n* Fix storable alignment
  tests\n* Add These data type (either a, b or both)\n* Implement checks command line\n*
  Improve checks terminal output\n* drop support for GHC 7.4 and GHC 7.6\n* Improve
  performance of copy out of block and uarray\n\n## 0.0.8\n\n* Add MonadReader and
  MonadState\n* Improve performance of numerical read parsers (integral, double)\n*
  Improve precision of double read parser\n* Add Textual conduit combinator (fromBytes,
  toBytes, lines)\n* Add DList\n* Fix building on latest Win32, RHEL 5.8\n* Add NormalForm\n*
  Export some functions in Internal module to manipulate unboxed mutable array\n\n##
  0.0.7\n\n* Improve Checks: random seed, new properties and improved printing\n*
  Add ability to parse Natural, Integer, and Double from String\n* Temporarily remove
  compilation of experimental network resolution introduced in 0.0.5 for windows building.\n*
  Cleanup Offset and Size fixing some bug in String module\n\n## 0.0.6\n\n* Fix build
  on Centos 6.x / older linux distribution\n* Improve test checks generators\n\n##
  0.0.5\n\n* Generalize monadic map (mapM, mapM\\_)\n* HostName type\n* Network address
  / name resolution\n* Fix compilation on FreeBSD & OpenBSD\n* Initial re-implementation
  for property tests and tests orchestration\n* Fix bug in splitElem, and breakElem\n*
  Improve splitOn to return empty elements\n* Fix API bug for snoc and cons in Chunked
  UArray\n* Add UUID\n* Check API\n* Fix compilation on !x86\n\n## 0.0.4\n\n* Add
  Conduit for all your streaming needs\n* Expose Sequential from Foundation\n* Export
  internal withPtr for optimisation\n* Export `ifThenElse`\n* Use the proper `String`
  type for error instead of `[Char]`\n* Add `any` and `all` to `Collection`\n* Add
  defaulting to Integer and Double for numerical types\n* Add negation for Double
  and Float (and their associated C types)\n* Add/Export system bindings (Posix file/memory
  handling, Linux Inotify)\n* Add Big Endian (BE) / Little Endian (LE) wrapping types\n*
  Add a way to transform an UArray into Hexadecimal/Base16\n* Add IPv4 and IPv6 types\n\n##
  0.0.3\n\nMonad:\n\n* Add MonadCatch and MonadThrow classes\n* Add Transformer base
  class (MonadTrans)\n* Add IdentityT, StateT, ReaderT\n\nBuild:\n\n* Fix build on
  !x86\n\n## 0.0.2\n\nClasses:\n\n* Add `Bifunctor`\n* Implement Better storable type
  class (#111)\n* Expose Nthable for GHC >= 7.10 (product type getter)\n* Split basic
  function from `Sequential` to `Collection`\n* show return a Foundation `String`
  now instead of `[Char]`\n\nNumerical:\n* Overhaul of numerical classes (`Integral`,
  `Rational`, `Divisible`, ..)\n* add IntegralRounding (i.e. rounding from floating
  types)\n* Expose IEEE manipulation stuff\n* Expose all trigonometry functions in
  `Foundation.Math.Trigonometry`\n* Export `Natural` (Unsigned `Integer`)\n\nCollection:\n*
  Add partition\n* Add isPrefixOf and isSuffixOf\n* Add ArrayBuilder machinery\n*
  Add `String` parser\n* Add minimum and maximum to Collection.\n* Export Foldable
  and Collection in Foundation\n* add head,last,tail,init\n\nTypes:\n* Basic `ArrayUArray`
  support (Array of unboxed Array)\n* Add instance for `Float` and `Double` for numerical\n*
  Boxed array: add native slicing in the type\n* add `NonEmpty` type\n* Add some Data
  declaration for based type\n\nHashing:\n* Hashing: add FNV, SipHash hash functions
  family\n* Hashable: add support to hash types\n\nRandom support:\n* Add support
  for system entropy\n* Add pseudo random generation capability using a ChaCha core.\n\n##
  0.0.1\n\n* Initial version\n"
basic-deps:
  basement: ==0.0.5
  base: ! '>=4.8 && <5'
  ghc-prim: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.6'
- '0.0.7'
- '0.0.8'
- '0.0.9'
- '0.0.10'
- '0.0.11'
- '0.0.12'
- '0.0.13'
- '0.0.14'
- '0.0.15'
- '0.0.16'
- '0.0.17'
- '0.0.18'
author: Vincent Hanquez <vincent@snarc.org>
latest: '0.0.18'
description-type: markdown
description: ! "Foundation\n==========\n\n[![Linux Build Status](https://img.shields.io/travis/haskell-foundation/foundation/master.svg?label=Linux%20build)](https://travis-ci.org/haskell-foundation/foundation)\n[![Windows
  Build Status](https://img.shields.io/appveyor/ci/vincenthz/foundation/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/vincenthz/foundation/branch/master)\n[![Doc](https://readthedocs.org/projects/haskell-foundation/badge/?version=latest)](http://haskell-foundation.readthedocs.io/en/latest/)\n[![Stackage
  version](https://www.stackage.org/package/foundation/badge/lts?label=Stackage)](https://www.stackage.org/package/foundation)\n[![Hackage
  version](https://img.shields.io/hackage/v/foundation.svg?label=Hackage)](https://hackage.haskell.org/package/foundation)\n[![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)\n[![Haskell](https://img.shields.io/badge/Language-Haskell-yellowgreen.svg)](https://www.haskell.org)\n[![Coverage
  Status](https://coveralls.io/repos/github/haskell-foundation/foundation/badge.svg?branch=master)](https://coveralls.io/github/haskell-foundation/foundation?branch=master)\n\nDocumentation:\n\n*
  [Read the doc](http://haskell-foundation.readthedocs.io/en/latest/)\n* [Foundation
  on stackage](https://www.stackage.org/package/foundation)\n* [Foundation on hackage](https://hackage.haskell.org/package/foundation)\n\nDiscuss:\n\n*
  [FP Chat](https://fpchat-invite.herokuapp.com) `#haskell-foundation` channel\n*
  [Gitter](https://gitter.im/haskell-foundation/foundation)\n\nGoals\n=====\n\n* provide
  a base like set of modules that provide a consistent set of features and bugfixes
  across multiple versions of GHC (unlike base).\n* provide a better and more efficient
  prelude than base's prelude.\n* be self-sufficient: no external dependencies apart
  from base (or ghc packages).\n* provide better data-types: packed unicode string
  by default, arrays.\n* Better numerical classes that better represent mathematical
  things (No more all-in-one Num).\n\nUsage\n=====\n\nHow to use with the normal Prelude\n----------------------------------\n\nAdd
  the `foundation` package in your cabal file, and it's recommended to import Foundation
  qualified if\nyou're planning to use with the normal Prelude:\n\nFor example:\n\n```haskell\nimport
  qualified Foundation as F\n```\n\nIt's also recommended if you're going to deal
  with packages using text, bytestring, vector.. to use\nthe `foundation-edge` package.\n\nHow
  to use fully without Prelude\n--------------------------------\n\nDisable the built-in
  prelude at the top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude #-}\n```\n\nOr
  directly in your project cabal file:\n\n```haskell\nDefault-Extensions: NoImplicitPrelude\n```\n\nThen
  in your modules:\n\n```haskell\nimport Foundation\n```\n\nAdvanced settings\n----------------------\n\nPlease
  check out the chapter [Advanced Usage Options](docs/advanced-runtime.md) in the\ndocumentation.\n\n\nHow
  to contribute\n=================\n\nContribution guide can be found\n[here](http://haskell-foundation.readthedocs.io/en/latest/contributing/).\n\n\nProfiling\n---------\n\nIf
  you want to see the core (simpl step) or the assembly (asm step), then you can build
  with\n\n    stack build --ghc-options -ddump-simpl --ghc-options -ddump-asm\n\nNote
  that it doesn't actually will create the necessary extra files if the modules doesn't
  need building.\n\nyou can then find your build by-products in:\n\n    .stack-work/dist/<architecture>/Cabal-<CabalVersion>/build/\n\nEach
  modules that get compiled will create an equivalent file in the build directory:\n\n*
  ModuleName.dump-simpl\n* ModuleName.dump-asm\n\nFor profiling individual programs,
  the following command is useful:\n\n    stack ghc -- -O --make X.hs -prof -auto-all
  -caf-all -fforce-recomp\n\nBenchmarking\n------------\n\nTo get the list of benchmark:\n\n
  \   stack bench --benchmark-arguments -l\n\nTo compare against other libraries,
  you need to set the `bench-all` flag\n\n    stack bench --flag foundation:bench-all
  --benchmark-arguments -l\n\nTo run a specific or set of benchmarks :\n\n    stack
  bench --flag foundation:bench-all --benchmark-arguments 'types/String/SplitAt/mascii-10/Text'\n
  \   stack bench --flag foundation:bench-all --benchmark-arguments '-m prefix types/String/SplitAt'\n
  \   stack bench --flag foundation:bench-all --benchmark-arguments '-m glob types/String/SplitAt'\n\nTo
  register a set of benchmarks:\n\n    stack bench --flag foundation:bench-all --benchmark-arguments
  \"--csv $(git describe).csv\"\n\n\nDesign\n======\n\nFoundation started on the simple
  idea of trying to put everything I need in one\nsimple and consistent package. The
  amazing haskell ecosystem is extremely\nfragmented and maintained by different people
  with different goals, free time,\nand style. The overall scare of not trying to
  change anything relatively\ncentral (`base`, `bytestring`, `text`, `vector`, ...)
  for a promise of stability\nhas pushed many people to work on their own thing, leading
  to unnecessary work\nduplication and further fragmentation.\n\n\nFoundation uses
  and abuses type families.\n\n\nCode Organisation\n=================\n\nEvery foundation
  modules start by `Foundation`.\n\n* `Foundation` is the prelude replacement module.\n*
  `Basement.Compat` contains only compatibilty and re-export from ghc/ghc-prim/base.\n*
  `Foundation.Primitive` is where all the lowlevel magic happens:\n  * Important types
  that underpins many others part\n  * Pervasive features\n"
license-name: BSD3
