homepage: https://github.com/waiting-for-dev/follow#readme
changelog-type: markdown
hash: 513f9b1b59dfcb65acb2a0a5a36573a328cb5d955a26d5ed401c4946c168245d
test-bench-deps:
  exceptions: -any
  bytestring: -any
  feed: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  req: -any
  HandsomeSoup: -any
  hxt: -any
  transformers: -any
  aeson: -any
  yaml: -any
  follow: -any
maintainer: marc@lamarciana.com
synopsis: Haskell library to follow content published on any subject.
changelog: ! "# Change Log\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)
  \nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## [0.0.1]
  - 2018-09-14\n- Initial release\n"
basic-deps:
  exceptions: -any
  bytestring: -any
  feed: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  req: -any
  HandsomeSoup: -any
  hxt: -any
  transformers: -any
  aeson: -any
  yaml: -any
  follow: -any
all-versions:
- '0.1.0.0'
author: Marc Busqué Pérez
latest: '0.1.0.0'
description-type: markdown
description: ! "# Follow\n\n`Follow` is a Haskell library to build recipes which allow
  you to\nfollow the content published about any subject you are interested.\n\nHere
  bellow you have a quick tutorial you can follow.  Just run the\nsnippets of code
  in the repl.\n\n```haskell\n:set -XOverloadedStrings\nimport Follow\nimport Data.Time
  (LocalTime)\nimport Control.Monad (join)\nimport qualified Data.Text.IO as T (writeFile)\nimport
  Data.Yaml (decodeFileThrough)\n```\n\n## Subject\n\nA subject is just a bunch of
  information about what is being\nfollowed. It consists of a title, a description
  and a list of tags,\n\n```haskell\nhaskell =\n  Subject\n    { sTitle = \"Haskell\"\n
  \   , sDescription = \"Some resources about Haskell\"\n    , sTags = [\"haskell\",
  \"programming\"]\n    }\n```\n\n## Directory\n\nA directory is just a subject and
  a list of entries.\n\nAn entry is an item meant to contain an URI with content relative
  to\nthe associated subject along with associated information.\n\n```haskell\nmanualDirectory
  =\n  Directory\n    { dSubject = haskell\n    , dEntries =\n        [ Entry\n            {
  eURI =\n                Just \"https://bartoszmilewski.com/2013/06/19/basics-of-haskell/\"\n
  \           , eGUID = Just \"basics-of-haskell\"\n            , eTitle = Just \"Basics
  of Haskell\"\n            , eDescription = Just \"Introductory material for Haskell\"\n
  \           , eAuthor = Just \"Bartosz Milewski\"\n            , ePublishDate =
  Just (read \"2013-06-19 14:14:00\" :: LocalTime)\n            }\n        ]\n    }\n```\n\n##
  Fetchers\n\nOf course, building list of entries by hand is not very\nuseful. Fetchers
  are functions which usually reach the outside world\nto return a list of entries
  and which can throw an error.\n\nAny fetcher can be used, but `Follow` tries to
  ship with common\nones. Right now there are two fetchers available:\n\n- [Feed](src/Follow/Fetchers/Feed.hs):
  Take entries from a RSS or Atom feed.\n- [Web Scraping](src/Follow/Fetchers/WebScraping.hs):
  Take entries\n  scraping the HTML of a web page.\n\nThe function `directoryFromFetched`
  can be used to glue a subject with\nsome fetched content:\n\n```haskell\nimport
  qualified Follow.Fetchers.Feed as Feed\n\ndirectory =\n  directoryFromFetched (Feed.fetch
  \"https://bartoszmilewski.com/feed/\") haskell\n```\n\n## Middlewares\n\nFetched
  content may need some further processing in order to fit what\nis actually desired.
  A middleware is a function which transforms a\ndirectory into another directory,
  allowing us to do any kind of\ntransformation.\n\nThe aim of `Follow` is to provide
  some common middlewares. For now,\nthere are these ones:\n\n- [Filter](src/Follow/Middlewares/Filter.hs):
  Filter entries according\n  some predicate.\n- [Sort](src/Follow/Middlewares/Sort.hs):
  Sort entries.\n- [Decode](src/Follow/Middlewares/Decode.hs): Decodes entries from\n
  \ UTF8 or other encodings.\n\n```haskell\nimport qualified Follow.Middlewares.Sort
  as Sort\n\nsortedDirectory =\n  Sort.apply (Sort.byGetter eTitle) <$> directory\n```\n\n##
  Digesters\n\nOnce you have your distillate content, you need some way to consume\nit.
  A `Digester` is a function which transforms a directory into\nanything that can
  be consumed by an end user.\n\nAs before, `Follow` aims to provide useful ones out
  of the box. Right\nnow the following are available:\n\n- [Simple Text](src/Follow/Digesters/SimpleText.hs):
  Simple textual\n  representation of the directory.\n- [Pocket](src/Follow/Digesters/Pocket.hs):
  Send fetched links to\n  [Pocket](https://getpocket.com).\n\n```haskell\nimport
  qualified Follow.Digesters.SimpleText as SimpleText\n\ncontent = SimpleText.digest
  <$> sortedDirectory\n```\n\nNow, for example, you are ready to save the content
  to a file:\n\n```haskell\njoin $ T.writeFile \"/your/path/haskell.txt\" <$> content\n```\n\n##
  Recipes: Combining sources and middlewares\n\nContent is not limited to be fetched
  from a single source. Instead, a\ndirectory can be built merging the entries fetched
  from different\nsources. Also, the stack of middlewares to be applied to each source
  can be\ngiven in a single shot.\n\nThis whole process specification is called a
  `Recipe`, and it contains\nall the information needed to follow a subject.\n\nTo
  build the recipe you need to provide three fields:\n\n- The subject being followed.\n-
  A list of two field tuples where:\n  - First field is some fetched content.\n  -
  Second field is a list of middlewares to apply to the fetched content in the first
  field.\n- A list of middlewares to apply to the directory resulted after applying
  the list of fetched/middlewares.\n\n```haskell\nhaskellRecipe =\n  Recipe\n    {
  rSubject = haskell\n    , rSteps =\n        [ ( Feed.fetch \"https://bartoszmilewski.com/feed/\"\n
  \         , [Sort.apply (Sort.byGetter eTitle)])\n        , (Feed.fetch \"https://planet.haskell.org/rss20.xml\",
  [])\n        ]\n    , rMiddlewares = []\n    }\n```\n\nYou can combine the function
  `directoryFromRecipe` and some digester\nto quickly consume a recipe:\n\n```haskell\nSimpleText.digest
  <$> directoryFromRecipe haskellRecipe\n```\n\n## Collecting recipes\n\nOne nice
  thing in Follow is that you don't need to create the recipes\nprogrammatically each
  time you need them. Instead, you can store them\nin a [YAML](https://en.wikipedia.org/wiki/YAML)
  file and just parse\nthem when you need.\n\nFor example, the previous recipe can
  be represented in a file\n`recipe.yml` as the following:\n\n```yaml\nsubject:\n
  \ title: Haskell\n  description: Some resources about Haskell\n  tags: [haskell,
  programming]\nsteps:\n  -\n    - type: feed\n      options:\n        url: \"https://bartoszmilewski.com/feed/\"\n
  \   -\n      - type: sort\n        options:\n          function:\n            type:
  by_field\n            options:\n              field: title\nmiddlewares: []\n```\n\nYou
  can use now decode functions in\n[`Data.Yaml`](https://hackage.haskell.org/package/yaml)
  to get the\nrecipe back:\n\n```haskell\nrecipe' <- decodeFileThrow \"/your/path/recipe.yml\"
  :: IO (Recipe IO)\ndirectory' = directoryFromRecipe recipe'\n```\n\nLook at [`src/Follow/Parser.hs`](src/Follow/Parser.hs)
  for details about\nencoding each kind of fetcher and middleware.\n\n## Contributing\n\nBug
  reports and pull requests are welcome on GitHub at\nhttps://github.com/waiting-for-dev/follow.
  This project is\nintended to be a safe, welcoming space for collaboration, and\ncontributors
  are expected to adhere to the [Contributor\nCovenant](http://contributor-covenant.org)
  code of conduct.\n\n## License\n\nThe package is available as open source under
  the terms of the [GNU\nLGPLv3 License](http://opensource.org/licenses/LGPL-3.0).\n"
license-name: LGPL-3
