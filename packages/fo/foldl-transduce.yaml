homepage: ''
changelog-type: text
hash: 23699809f527053c8f3792499065d5dce5465dd2173e0c09bdcc5111983682dd
test-bench-deps:
  free: ! '>=4'
  monoid-subclasses: ! '>=0.4'
  split: ! '>=0.2.2'
  base: ! '>=4.4 && <5'
  text: -any
  criterion: ! '>=1.1.0.0 && <1.2'
  doctest: ! '>=0.10.1'
  lens-family-core: ! '>=1.2.0'
  tasty-quickcheck: ! '>=0.8.3.2'
  foldl: -any
  foldl-transduce: -any
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.1'
maintainer: diaz_carrete@yahoo.com
synopsis: Transducers for foldl folds.
changelog: ! "# 0.6.0.0\n\n- Update to match change in foldl library.\n\n# 0.5.1.0\n\n-
  Removed upper bounds in dependencies.\n\n# 0.5.0.0\n\n- Before, splitters always
  found at least one group, even for empty streams.\n  Now, no groups are found for
  empty streams.\n- Made some type signatures a bit more strict.\n- Eliminated previously
  deprecated functions and modules.\n\n# 0.4.7.0\n\n- Added \"sections\" splitter.\n-
  Deprecated Control.Foldl.Transduce.Textual\n\n# 0.4.6.0\n\n- Deprecated Control.Foldl.Transduce.ByteString.IO
  \n- Added Control.Foldl.Transduce.ByteString\n- Added \"paragraphs\" splitter.\n\n#
  0.4.5.0\n\n- added split\n\n# 0.4.4.0\n\n- deprecated quiesceWith\n- added Fallible.\n\n#
  0.4.3.0\n\n- deprecated splitWhen in favor of break\n- deprecated textualSplitWhen
  in favor of textualBreak\n\n# 0.4.2.0\n\n- Added \"trip\" fold.\n- Added Control.Foldl.Transduce.Textual.\n\n#
  0.4.1.0\n\n- Added module Control.Foldl.Transduce.ByteString.IO, to\n  avoid having
  to depend on other packages for simple I/O tasks.\n- Added \"unit\" fold.\n\n# 0.4.0.0\n\n-
  Changed order of parameters for groups' and groupsM'. Hopefully the new one\n  is
  clearer.\n- It was annoying to use \"evenly (transduce ...)\" every time. Added
  new\n  ToTransductions' typeclass for types that can be converted to an infinite\n
  \ list of transductions.\n- Added ToFold typeclass as well.\n\n# 0.3.0.0\n\n- Transducers
  can now delimit segments in the done function, too.\n  This was required for transducers
  like surround to work as splitters.\n- Strengthened the constraints on the surround
  function to Traversable.\n- Added dependency on free and monoid-subclasses.\n- group
  functions can now treat each group differently.\n- Added ignore, splitAt, splitWhen,
  splitLast\n- removed drop, take... use splitAt, splitWhen + bisect.\n- Added bisect,
  evenly convenience functions.\n\n# 0.2.1.0\n\n- Comonad and Extend instances for
  Transducer \n- Added words splitter\n- Added take, drop, takeWhile, dropWhile transducers\n\n#
  0.2.0.0\n\n- Removed the Spliiter type. Now it's transducers for everything!\n-
  generalizeTransducer -> _generalize\n- simplifyTransducer -> _simplify\n- removed
  chokepoint and chokepointM\n\n\n# 0.1.2.0\n\n- Added explicit bifunctors dependency.\n-
  Added Transduce', TransduceM' type synonyms.\n- Added groups', groupsM'.\n\n\n#
  0.1.1.0\n\n- Changed signatures of transduce' and transduceM'.\n- generalize' ->
  generalizeTransducer\n- simplify' -> simplifyTransducer\n- dropped direct profunctors
  dependency.\n"
basic-deps:
  semigroupoids: ! '>=5.0'
  free: ! '>=4'
  void: ! '>=0.6'
  monoid-subclasses: ==0.4.*
  bytestring: ! '>=0.9.2.1'
  split: ! '>=0.2.2'
  base: ! '>=4 && <5'
  comonad: ! '>=4'
  text: ! '>=0.11.2.0'
  semigroups: ! '>=0.18'
  containers: -any
  bifunctors: ! '>=5'
  foldl: ! '>=1.4'
  transformers: ! '>=0.2.0.0'
  profunctors: ! '>=5'
all-versions:
- '0.0.1'
- '0.1.0.0'
- '0.1.0.1'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.2.3'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.4.5.0'
- '0.4.6.0'
- '0.4.7.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.6.0.0'
author: Daniel Diaz
latest: '0.6.0.0'
description-type: markdown
description: ! "## What's in this library?\n\nStateful transducers and streaming-preserving
  group operations for the folds in\nGabriel Gonzalez's [foldl](http://hackage.haskell.org/package/foldl)
  package.\n\n## When to use this library?\n\n- When you want to wrap a stateful decoder
  over a **Fold**. An example is\ndecoding UTF-8: the decoder must be stateful because
  a multi-byte character may\nhave been split across two blocks of bytes.\n\n- When
  you want to tweak the stream of data that arrives into a **Fold**, but\nonly at
  certain positions. Stripping whitespace at the beginning of a text\nstream, for
  example.\n\n- When you want to perform group operations without breaking \"streaminess\",\nsimilar
  to what [pipes-group](http://hackage.haskell.org/package/pipes-group)\ndoes.\n\n##
  Why use this library for grouping instead of **pipes-group**?\n\nGrouping fold-side
  instead of producer-side has the advantage that, since the\nresults are still **Fold**s,
  you can combine them using **Applicative**.\n\nAlso, **Fold**s can work with sources
  other than **Producer**s from pipes.\n\nGrouping fold-side has limitations as well:\n\n-
  You can't perform bracketing operations like \"withFile\" that span the folding\n
  \ of an entire group. pipes-group allows them.\n\n- You have more flexibility in
  pipes-group to decide how to delimit and fold\n  the next group based on previous
  results.\n\n\n## Where can I find working examples for this library?\n\nIn the [examples](https://github.com/danidiaz/foldl-transduce/tree/master/examples)
  folder of the repo.\n"
license-name: BSD3
