homepage: https://github.com/mrkkrp/forma
changelog-type: markdown
hash: 6413096054fe751dcf4ef51989063be2ca63af6bb15ca6bba6842e99c37e89f9
test-bench-deps:
  forma: -any
  base: ! '>=4.9 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  containers: ! '>=0.5 && <0.7'
  mtl: ! '>=2.0 && <3.0'
  aeson: ! '>=0.9 && <1.5'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Parse and validate forms in JSON format
changelog: ! '## Forma 1.1.0


  * Added `runFormPure`.


  ## Forma 1.0.0


  * The library has been completely redesigned and rewritten.


  ## Forma 0.2.0


  * Added `withCheck`.


  ## Forma 0.1.0


  * Initial release.

'
basic-deps:
  base: ! '>=4.9 && <5.0'
  unordered-containers: ! '>=0.2.5 && <0.3'
  text: ! '>=0.2 && <1.3'
  containers: ! '>=0.5 && <0.7'
  mtl: ! '>=2.0 && <3.0'
  aeson: ! '>=0.9 && <1.5'
all-versions:
- '0.1.0'
- '0.2.0'
- '1.0.0'
- '1.1.0'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '1.1.0'
description-type: markdown
description: ! "# Forma\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/forma.svg?style=flat)](https://hackage.haskell.org/package/forma)\n[![Stackage
  Nightly](http://stackage.org/package/forma/badge/nightly)](http://stackage.org/nightly/package/forma)\n[![Stackage
  LTS](http://stackage.org/package/forma/badge/lts)](http://stackage.org/lts/package/forma)\n[![Build
  Status](https://travis-ci.org/mrkkrp/forma.svg?branch=master)](https://travis-ci.org/mrkkrp/forma)\n\nThis
  module provides a tool for validation of forms that are represented in\nthe JSON
  format. Sending forms in JSON format via an AJAX request instead of\ntraditional
  submitting of forms has a number of advantages:\n\n* Smoother user experience: no
  need to reload the whole page.\n\n* Form rendering is separated and lives only in
  GET handler, POST (or\n  whatever method you deem appropriate for your use case)
  handler only\n  handles validation and actual effects that form submission should\n
  \ initiate.\n\n* You get a chance to organize form input just like you want.\n\nThe
  task of validation of a form in the JSON format may seem simple, but\nit's not trivial
  to get it right. The library allows you to:\n\n* Define form parser using type-safe
  applicative notation with field labels\n  being stored on the type label which guards
  against typos and will force\n  all your field labels be always up to date.\n\n*
  Parse JSON `Value` according to the definition of form you created.\n\n* Stop parsing
  immediately if given form is malformed and cannot be\n  processed.\n\n* Validate
  forms using any number of *composable* checkers that you write\n  for your specific
  problem domain. Once you have a vocabulary of checkers,\n  creation of new forms
  is just a matter of combining them, and yes they do\n  combine nicely.\n\n* Collect
  validation errors from multiple branches of parsing (one branch\n  per form field)
  in parallel, so validation errors in one branch do not\n  prevent us from collecting
  validation errors from other branches. This\n  allows for a better user experience
  as the user can see all validation\n  errors at the same time.\n\n* Use `optional`
  and `(<|>)` from `Control.Applicative` in your form\n  definitions instead of ugly
  ad-hoc stuff.\n\n* Perform validation using several form fields at once. You choose
  which\n  “sub-region” of your form a given check will have access to, see\n  `withCheck`.\n\n##
  Example of use\n\nHere is a complete working example:\n\n```haskell\n{-# LANGUAGE
  DataKinds         #-}\n{-# LANGUAGE OverloadedLabels  #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main (main) where\n\nimport Control.Monad.Except\nimport Data.Aeson\nimport
  Data.Text (Text)\nimport Web.Forma\nimport qualified Data.Text as T\n\ntype LoginFields
  = '[\"username\", \"password\", \"remember_me\"]\n\ndata LoginForm = LoginForm\n
  \ { loginUsername   :: Text\n  , loginPassword   :: Text\n  , loginRememberMe ::
  Bool\n  } deriving (Show)\n\nloginForm :: Monad m => FormParser LoginFields Text
  m LoginForm\nloginForm = LoginForm\n  <$> field #username notEmpty\n  <*> field
  #password notEmpty\n  <*> field' #remember_me\n\nnotEmpty :: Monad m => Text ->
  ExceptT Text m Text\nnotEmpty txt =\n  if T.null txt\n    then throwError \"This
  field cannot be empty.\"\n    else return txt\n\nmyInput :: Value\nmyInput = object\n
  \ [ \"username\"    .= (\"Bob\" :: Text)\n  , \"password\"    .= (\"123\" :: Text)\n
  \ , \"remember_me\" .= True\n  ]\n\nmain :: IO ()\nmain = runForm loginForm myInput
  >>= print\n```\n\nYou may want to play with it a bit before writing serious code.\n\n##
  Contribution\n\nIssues, bugs, and questions may be reported in [the GitHub issue
  tracker for\nthis project](https://github.com/mrkkrp/forma/issues).\n\nPull requests
  are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright © 2017–2018
  Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
