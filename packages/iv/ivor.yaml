homepage: http://www.dcs.st-and.ac.uk/~eb/Ivor/
changelog-type: ''
hash: 32900700e14c90c9c9aad7d7790c36540bad4c7a4af16cfdc1c16c6289902635
test-bench-deps: {}
maintainer: Edwin Brady <eb@dcs.st-and.ac.uk>
synopsis: Theorem proving library based on dependent type theory
changelog: ''
basic-deps:
  base: ! '>=3 && <4.4'
  haskell98: <2
  parsec: -any
  containers: -any
  binary: -any
  mtl: -any
  directory: -any
all-versions:
- 0.1.5
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.10.1
- 0.1.11
- 0.1.12
- 0.1.14
- 0.1.14.1
author: Edwin Brady
latest: 0.1.14.1
description-type: haddock
description: ! 'Ivor is a type theory based theorem prover, with a

  Haskell API, designed for easy extending and embedding

  of theorem proving technology in Haskell

  applications. It provides an implementation of the

  type theory and tactics for building terms, more or

  less along the lines of systems such as Coq or Agda,

  and taking much of its inspiration from Conor

  McBride''s presentation of OLEG.


  The API provides a collection of primitive tactics and

  combinators for building new tactics. It is therefore

  possible to build new tactics to suit specific

  applications. Ivor features a dependent type theory

  similar to Luo''s ECC with definitions (and similar to

  that implemented in Epigram), with dependent pattern

  matching, and experimental multi-stage programming

  support. Optionally, it can be extended with

  heterogeneous equality, primitive types and operations,

  new parser rules, user defined tactics and (if you

  want your proofs to be untrustworthy) a fixpoint

  combinator.'
license-name: BSD-3-Clause
