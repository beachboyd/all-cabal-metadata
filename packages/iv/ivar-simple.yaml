homepage: ''
changelog-type: text
hash: c9d28dca5fbce7ab6754ad2d7474b8fc98a240ad3650ba2e594d05c245989b1a
test-bench-deps: {}
maintainer: Bertram Felgenhauer <int-e@gmx.de>
synopsis: Write once concurrency primitives.
changelog: "0.3.3   (2020-10-06)\n\t* use only one `MVar` per `IVar` instead of two,
  taking advantage\n\t  of the fact that `readMVar` has been atomic since ghc 7.10\n\t*
  add `Eq` instance and `uncons` operation for `IChan`\n\t  (suggested by ski@Freenode)\n\n0.3.2
  \  (2015-10-29)\n\t* add `Eq` instances for `IVar` and `MIChan`\n\t  (suggested
  by nwf@Freenode)\n\n0.3.1   (2015-07-02)\n\t* fix building with ghc 7.8\n\n0.3     (2012-07-24)\n\t*
  change NonTermination to a custom BlockedIndefinitelyOnIVar\n\t  exception, and
  require base >= 4. (using NonTermination leads to\n\t  <<loop>> messages)\n\n0.2
  \    (2012-07-23)\n\t* change BlockedIndefinitely exception (gone since ghc 7.0)
  to\n\t  NonTermination\n\n0.1.0.2 (2009-06-03)\n\t* depend on base < 5 instead of
  base.\n\n0.1.0.1 (2009-01-11)\n\t* make Data.IVar.Simple.tryWrite exception safe\n\t
  \ (noticed by Chris Kuklewicz)\n\n0.1.0.0 (2009-01-11)\n\t* initial version\n"
basic-deps:
  base: '>=4.7 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
author: ''
latest: 0.3.3
description-type: markdown
description: |
  ## What is this?

  ivar-simple provides immutable, write-once variables (`IVar`s) in the
  `Data.IVar.Simple` module.

  It also provides two more experimental channel implementations built on
  top of `IVar`s,

  * `Data.IVar.Simple.IChan`:
    multi-cast channels with write-once semantics.
  * `Data.IVar.Simple.MIChan`:
    channels with write semantics similar to Control.Concurrent.Chan

  ## Comparison to data-ivar

  Both data-ivar and ivar-simple provide a write-once variable. That's where
  the similarities end:

  * Reading an `IVar` with data-ivar is an `IO` operation. In ivar-simple it's
    a pure function.
  * data-ivar provides a `Reader` monoid, monad, etc. for reading from one of
    several `IVar`s. ivar-simple has no such functionality.
  * The data-ivar implementation can, in principle, add arbitrary `IO` actions
    that are called when an `IVar` is written. (This detail is not exposed,
    however)
  * Technically, ivar-simple tries for efficiency by exploiting the existing
    locking structures in the RTS; in particular, reading a full `IVar` for
    a second time is as cheap as evaluating a record selector.
    (I have no performance numbers for this.)
license-name: MIT
