homepage: ''
changelog-type: text
hash: 621fb72fa7e0af2bca95f0df57dd42acad6415ad7e4e59f9b9aa0f454c970fd3
test-bench-deps: {}
maintainer: Bertram Felgenhauer <int-e@gmx.de>
synopsis: Write once concurrency primitives.
changelog: ! "0.3.2   (2015-10-29)\n\t* add Eq instances for `IVar` and `MIChan`\n\n0.3.1
  \  (2015-07-02)\n\t* fix building with ghc 7.8\n\n0.3     (2012-07-24)\n\t* change
  NonTermination to a custom BlockedIndefinitelyOnIVar\n\t  exception, and require
  base >= 4. (using NonTermination leads to\n\t  <<loop>> messages)\n\n0.2     (2012-07-23)\n\t*
  change BlockedIndefinitely exception (gone since ghc 7.0) to\n\t  NonTermination\n\n0.1.0.2
  (2009-06-03)\n\t* depend on base < 5 instead of base.\n\n0.1.0.1 (2009-01-11)\n\t*
  make Data.IVar.Simple.tryWrite exception safe\n\t  (noticed by Chris Kuklewicz)\n\n0.1.0.0
  (2009-01-11)\n\t* initial version\n"
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
author: ''
latest: 0.3.2
description-type: markdown
description: ! "## What is this?\n\nivar-simple provides immutable, write-once variables
  (`IVar`s) in the\n`Data.IVar.Simple` module.\n\nIt also provides two more experimental
  channel implementations built on\ntop of `IVar`s,\n\n* `Data.IVar.Simple.IChan`:\n
  \ multi-cast channels with write-once semantics.\n* `Data.IVar.Simple.MIChan`:\n
  \ channels with write semantics similar to Control.Concurrent.Chan\n\n## Comparison
  to data-ivar\n\nBoth data-ivar and ivar-simple provide a write-once variable. That's
  where\nthe similarities end:\n\n* Reading an `IVar` with data-ivar is an `IO` operation.
  In ivar-simple it's\n  a pure function.\n* data-ivar provides a `Reader` monoid,
  monad, etc. for reading from one of\n  several `IVar`s. ivar-simple has no such
  functionality.\n* The data-ivar implementation can, in principle, add arbitrary
  `IO` actions\n  that are called when an `IVar` is written. (This detail is not exposed,\n
  \ however)\n* Technically, ivar-simple tries for efficiency by exploiting the existing\n
  \ locking structures in the RTS; in particular, reading a full `IVar` for\n  a second
  time is as cheap as evaluating a record selector.\n  (I have no performance numbers
  for this.)\n"
license-name: MIT
