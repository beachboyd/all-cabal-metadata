homepage: https://github.com/ndmitchell/nsis#readme
changelog-type: text
hash: dd5990d64f9873d251e2ea92d919aacba701864ea37c3477bd73357e39aa80f8
test-bench-deps:
  base: ==4.*
  process: -any
  uniplate: ! '>=1.5'
  nsis: -any
  transformers: ! '>=0.2'
  directory: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: DSL for producing Windows Installer using NSIS.
changelog: ! "Changelog for NSIS\n\n0.3.2\n    Support Semigroup class\n0.3.1\n    #11,
  add unsafeInject and unsafeInjectGlobal\n    #10, add unicode function\n0.3\n    Make
  strCheck take a message\n    Add a plugin for helping with radio button\n    Make
  constant force an evaluation\n    Make section return the section id\n    Generalise
  the type of nsis\n    Add a radio button example\n0.2.5\n    Support OName on file\n0.2.4\n
  \   #3, clone the EnvVarUpdate plugin\n    Add abort\n    Add strCheck function\n
  \   Add strIsSuffixOf\n    Fix strIsPrefixOf\n    Add writeRegExpandStr\n    Expose
  some window functions findWindow, getDlgItem, sendMessage\n    Add WinMessages plugin/header\n
  \   Remove upper bounds\n    #2, add setDetailsPrint\n    Add support for parameters
  to the finish page\n0.2.3\n    Add explicit page events\n    #1, add a Win7 taskbar
  progress plugin module\n    Collapse duplicate events into one\n    Hook up Show/Pre/Leave
  functions for pages\n    Add sleep\n    Add a wrapper round the Base64 plugin\n
  \   Add support for plugins\n    Switch to cabal test support, requires Cabal-1.10\n
  \   Add sectionGet and sectionSet\n    Add all the binary operations as instances
  of Bit\n    Add event and onSelChange\n    Add execWait and execShell\n    Add envVar\n
  \   Add copyFiles function\n0.2.2\n    Change writeFileLines' to not build up a
  large buffer\n0.2.1\n    #592, make the License page take a license file\n0.2\n
  \   Add Applicative instance for Action\n    Add str, int and bool functions\n0.1.2\n
  \   Allow transformers-0.3.0.0\n0.1.1\n    Improved documentation\n    Remove findOnce,
  you can use fileExists instead\n0.1\n    Start of changelog\n"
basic-deps:
  base: ==4.*
  uniplate: ! '>=1.5'
  transformers: ! '>=0.2'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.3'
- '0.3.1'
- '0.3.2'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.3.2'
description-type: markdown
description: ! "# NSIS Manual [![Hackage version](https://img.shields.io/hackage/v/nsis.svg?label=Hackage)](https://hackage.haskell.org/package/nsis)
  [![Build Status](https://img.shields.io/travis/ndmitchell/nsis.svg)](https://travis-ci.org/ndmitchell/nsis)\n\nThis
  library makes it easier to write [NSIS Windows Installers](http://nsis.sourceforge.net/).
  You should use this library if:\n\n* You want to write a Windows Installer, and
  have picked NSIS (which is a common choice, and in my opinion, one of the best installer
  generators for Windows).\n\nThe original NSIS tool requires you to write a script
  in a custom programming language. This library lets you write a Haskell program
  using special functions that generates an NSIS script. Using this library is better
  because:\n\n* **MUI2 by default:** As NSIS has evolved there are now three separate
  ways to define your user interface, using the Classic builtin commands, using MUI1
  or using MUI2. Of these, MUI2 is by far the nicest and should always be used, but
  the Classic interface is far easier to use. My library always uses MUI2 and makes
  it easy to use.\n* **Flow control:** NSIS installer scripts are written in a goto-orientated
  assembly language, making it hard to write any meaningful programs. In contrast,
  my library presents an imperative statement/expression language. Scripts end up
  significantly shorter and more readable.\n* **Variables:** The original NSIS system
  has global mutable variables, 16 register variables and a stack - it directly mirrors
  assembly programming. In my system, variables are properly scoped and named.\n\nIf
  your script is simple it is likely to look relatively similar in either system.
  If your script is complex it could end up 100 lines shorter and far clearer in my
  system. As an illustrative example, let's warn before installing into the Windows
  directory or the System directory. In original NSIS this would be:\n\n    StrCmp
  $WINDIR $INSTDIR bad 0\n    StrCmp $SYSDIR $INSTDIR bad 0\n    Goto skip\n    bad:\n
  \   MessageBox MBOK|MB_ICON_EXCLAMATION \"Warning: installing into the Windows directory\"\n
  \   skip:\n\nUsing this library we can write:\n\n    iff_ (\"$INSTDIR\" %== \"$WINDIR\"
  %|| \"$INSTDIR\" %== \"$SYSDIR\") $\n        alert \"Warning: installing into the
  Windows directory\"\n\n## A Simple Example\n\nThe [Examples](https://github.com/ndmitchell/nsis/tree/master/Examples)
  directory contains a number of simple NSIS scripts, several ported from the NSIS
  distributed examples. As a simple example:\n\n    import Development.NSIS\n\n    main
  = writeFile \"example1.nsi\" $ nsis $ do\n         name \"Example1\"                  --
  The name of the installer\n         outFile \"example1.exe\"           -- Where
  to produce the installer\n         installDir \"$DESKTOP/Example1\"   -- The default
  installation directory\n         requestExecutionLevel User       -- Request application
  privileges for Windows Vista\n         -- Pages to display\n         page Directory
  \                  -- Pick where to install\n         page InstFiles                   --
  Give a progress bar while installing\n         -- Groups fo files to install\n         section
  \"\" [] $ do\n             setOutPath \"$INSTDIR\"        -- Where to install files
  in this section\n             file [] \"Example1.hs\"        -- File to put into
  this section\n\nRunning this code will generate a file `example1.nsi` that can be
  processed with `makensis` to produce the installer `example1.exe`. Documentation
  on each of the functions [is available here](http://hackage.haskell.org/package/nsis/docs/Development-NSIS.html).\n\n##
  Contributions welcome\n\nI welcome contributions. Some things you could help with:\n\n*
  I currently wrap most of the standard NSIS functions, but not all of them. I welcome
  any additional wrappers. I have been wrapping functions by need, but eventually
  would like to have everything wrapped.\n* The functions are mostly intended to be
  understood in conjunction with the NSIS documentation. I welcome any enhanced documented
  or work to make the documentation standalone, so people don't need to look at the
  underlying NSIS docs.\n* I currently wrap 2 plugins - one I needed and one that
  made a good demo. I welcome wrappers for all plugins.\n\nI have written this library
  to address my needs. I would welcome bug reports or pull requests, in particular
  if you can write the installer you need in NSIS but not in this library.\n"
license-name: BSD3
