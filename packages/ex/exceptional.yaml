homepage: https://github.com/
changelog-type: ''
hash: 8d310cde1b8562f7a31c42951c42b5de154fe433a5dbfc6e14b0e7eae7094b82
test-bench-deps: {}
maintainer: peter@harpending.org
synopsis: Essentially the Maybe type with error messages.
changelog: ''
basic-deps:
  exceptions: -any
  base: ==4.*
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.5.1
- 0.2.0.0
- 0.3.0.0
author: Peter Harpending
latest: 0.3.0.0
description-type: markdown
description: ! "exceptional\n===========\n\nThis is a Haskell library that exists
  to house a type:\n\n```haskell\ndata Exceptional x\n  = Failure String\n  | Success
  x\n```\n\nIt's much like `Maybe`, except instead of `Nothing`, we have `Failure\nString`.\n\nA
  comparison could also be made to `Either String`. I made this\nlibrary because I
  was dissatisfied with the `Monad` instance for\n`Either`. In this type, `fail =
  Failure`. It's rather simple.\n\nInstalling\n----------\n\n    cabal install exceptional\n\nOr,
  add `exceptional` to the `build-depends` field in your `.cabal`\nfile."
license-name: BSD-2-Clause
