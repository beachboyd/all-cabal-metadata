homepage: https://github.com/sheyll/extensible-effects-concurrent#readme
changelog-type: markdown
hash: 57203d15a74947bac638b28777152a6873fe6afa4b0e2e39a3dfea8bec2e9de6
test-bench-deps:
  extensible-effects-concurrent: -any
  hostname: -any
  extensible-effects: -any
  stm: -any
  base: -any
  time: -any
  tasty-discover: -any
  text: -any
  filepath: -any
  async: -any
  data-default: -any
  HUnit: -any
  containers: -any
  lens: -any
  tasty-hunit: -any
  pretty-types: ! '>=0.2.3.1 && <0.4'
  tasty: -any
  deepseq: -any
  QuickCheck: -any
maintainer: sven.heyll@gmail.com
synopsis: Message passing concurrency as extensible-effect
changelog: "# Changelog for extensible-effects-concurrent\n\n## 0.24.3\n- Add `EmbedProtocol`
  related function `toEmbeddedOrigin`\n    \n## 0.24.2\n- Add more `EmbedProtocol`
  related functions:\n    - `embedReplySerializer`\n    - `embedRequestOrigin`\n-
  Improve documentation for `EffectfulServer`     \n- Improve documentation for `StatefulServer`
  \    \n\n## 0.24.1\n\n- Add more `EmbedProtocol` tuple instances (4-tuple, 5-tuple)\n-
  Make `Effectful.Server` instances composable (See the `GenServerTests` for an example)\n
  \ [more details in a seperate file](./ChangeLog-Details-0.24.1.md)\n- Add `ProcessTitle`
  - every process now must have a short title text for logging\n- Add `ProcessDetails`
  - every process can call `UpdateProcessDetails` to update\n  its infos about the
  current state of it for debugging and error tracing purposes.\n- Add `GetProcessState`
  to retreive the `ProcessDetails` for some other process.\n\n## 0.24.0\n\n- Get rid
  of the `PrettyTypeShow` constraint in `Tangible`\n- Get rid of `LogWriterEffects`
  and the necessity for some `UndecidableInstances` that came with it  \n- Add `Server`
  module for `Api` handling via type classes\n    - Add `Stateless` \n    - Add `GenServer`\n-
  Reimplement `Supervisor`    \n       \n## 0.23.0\n\n- Include the process id in
  the console and trace log renderer\n- Add a **process supervisor** similar to Erlang/OTPs
  simple_one_for_one supervisor.\n- Fix `SingleThreadedScheduler` process linking
  bug: A process shall not be interrupted\n  when a linked process exits normally.
  \n- Rename **ExitReason** to **Interrupt** and make the interrupt and exit handling
  \n  API more robust. \n\n## 0.22.1\n\n- Fix duplicated content in RFC-5424 log message
  renderer\n\n## 0.22.0    \n\n- Remove `SchedulerProxy` ruins \n\n- Make message
  sending strict:\n\n  Ensure that every message sent from one process to another\n
  \ is reduced to normal form by the sender. \n\n    - Remove *all* lazy message selectors\n
  \   - Introduce a newtype wrapper `StrictDynamic` around `Dynamic`\n      and export
  only a constructor that deeply evaluates the\n      value to *rnf* before converting
  it to a `Dynamic` \n\n- Change the `Server` API for better system *vitality*:\n\n-
  Add `callWithTimeout`: A `call` over `IO` with a `Timeout` parameter\n\n- Add more
  efficient log renderer:\n    - `renderLogMessageBodyNoLocation`\n    - `renderRFC5424NoLocation`
  \    \n          \n## 0.21.2\n\n- Fix copy-paste error: Remove the `LogsTo` constraint
  from `withAsyncLogWriter`\n\n## 0.21.1\n\n- Remove dependency to the `socket` and
  `socket-unix` packages\n  - they are marked as *broken* by in NixOS\n  - the code
  based on `network` is much shorter\n\n- Rewrite the UDP log writer to use `network`\n\n-
  Rewrite the UnixSocket log writer to use `network`\n\n## 0.21.0\n\n- Add more log
  message renderers\n\n    - Multiple extra time stamp formats\n    - RFC3164\n\n-
  Add IO log writer for unix domain sockets, e.g. `/dev/log`\n\n- Add IO log writer
  for UDP\n\n- Extract and simplify the async logger\n\n- Extract and simplify the
  file log writers\n\n## 0.20.0\n\n- Rewrite Logging API so that usage is not as bloated\n\n##
  0.19.1\n\n- Fix Travis build\n- Fix typos\n- Fix README\n\n## 0.19.0\n\n- Adapt
  to extensible-effects-concurrent 5.0.0.1\n- Update to Stackage LTS-13.13\n- Improve
  NIX expressions\n- Rewrite the logging API\n- Improve Documentation\n- Add Examples\n\n##
  0.18.1\n\n- Fix inappropriate `LinkedProcessCrashed` interrupt when a process exits
  with `NotRecovered ProcessFinished`\n\n## 0.18.0\n\n- Split-up and replace `spawnLinkObservationQueue`
  with a simpler (but more verbose) alternative\n\n## 0.17.0\n\n- Rename misspelled
  `spawnLinkObserverationQueue` to `spawnLinkObservationQueue`\n\n## 0.16.1\n\n- Export
  `ObserverRegistry` constructors for custom event registration handling\n\n## 0.16.0\n\nAPI
  Stabilization and cleanup release with major API changes.\n\n- Replace `Control.Eff.Concurrent.Api.Server`
  with\n   `Control.Eff.Concurrent.Api.Server2` and rename\n   `Control.Eff.Concurrent.Api.Server2`
  to\n   `Control.Eff.Concurrent.Api.Server`\n\n- Rewrite `Observer` and related modules
  like `Observer.Queue`\n  - Remove all type classes\n  - Rely on `Server2`\n  - Remove
  `CallBackObserver`\n  - Remove the observer support code in `Server2`\n\n- Remove
  the `SchedulerProxy` parameter and tell library users to enable `AllowAmbiguousTypes`
  and `TypeApplications`\n  - Remove dependent support code like `HasScheduler`\n\n##
  0.15.0\n\n- Add `Api` `Request` and `Reply` types\n- Add `RequestOrigin` which can
  be used in `Server2` based Api servers to queue and defer replies to `Call`s\n\n##
  0.14.3\n\n- Export the functions introduced in 0.14.2 in `Control.Eff.Concurrent`.\n\n##
  0.14.2\n\n- Add `Server2` functions to spawn and _link_\n- Add a `Server2` function
  to defer the reply to a `Call`s called:\n  `handleCallsDeferred`\n\n## 0.14.1\n\n-
  Add Server2 based observation handling with `handleObservations`\n\n## 0.14.0\n\n-
  Fix/Improve Server2\n\n## 0.13.2\n\n- Add `ProcessFinished`\n- Add `tryUninterrupted`\n-
  Add simpler `Server2`\n\n## 0.13.1\n\n- Remove misguided `MonadCatch` constraints
  in the `ObservationQueueReader`\n  functions, and use `Interrupts` instead\n\n##
  0.13.0\n\n- Fix bad constraints in `Queue` observer\n\n## 0.12.2\n\n- Fix some compiler
  warnings\n\n## 0.12.1\n\n- Fix build errors with GHC-8.6\n\n## 0.12.0\n\n- Add implicit
  SchedulerProxy\n- Add flushMessages\n- Add receiving with timeout\n- Add process
  `Link`ing and `Monitoring`.\n- Make the distinction between recoverable and non-recoverable
  exit explicit in\n  the type parameter of `ExitReason`, and introduce `interruptXXXX`\n
  \ functions in addition to `shutdownXXXX` functions, to throw recoverable exits.\n-
  Merge `ShutdownRequest` and `ExitReason`\n- Rename `receiveLoopSuchThat` to `receiveSelectedLoop`\n-
  Pass the exit reason to the callback passed to `receiveSelectedLoop`\n- Rename `receiveMessage`
  to `receiveAnyMessage`\n- Rename `receiveAnyLoop` to `receiveAnyLoop`\n- Pass the
  exit reason to the callback passed to `receiveAnyLoop`\n- Rename `receiveMessage`
  to `receiveAnyMessage`\n- Rename `receiveMessageAs` to `receiveMessage`\n- Rename
  `receiveLoop` to `receiveLoop`\n- Pass the exit reason to the callback passed to
  `receiveAnyLoop`\n- Remove `SchedulerShuttingDown`\n- Improve logging for exceptions
  in `ForkIOScheduler`\n- Fix a bug in the logging system that caused all log filters
  to be forgotten\n  when using unliftings such as `MonadBaseControl`, `MonadThrow`,
  `MonadCatch`\n  and `MonadMask`\n- Fix the scheduler shutdown to not always run
  into the cancellation timeout\n\n## 0.11.1\n\n- Fix a compilation error\n\n## 0.11.0\n\n-
  Change the return type of `spawnCallbackObserver` from\n  `Bool` to `ApiServerCmd`\n\n##
  0.10.0\n\n- Re-introduce a Logs Effect but keep the LogWriter Reader\n- Get rid
  of the LogWriterProxy and the implicit argument\n- Make logging stricter: require
  log message to be NFData instances\n\n## 0.9.2\n\n- Try to adapt the dependency
  versions to make hackage happy again\n\n## 0.9.1\n\n- Add smart constructors for
  `MessageSelector`\n- Remove `ReceiveMessage` `Process` action\n- Rename `ReceiveMessageSuchThat`
  to `ReceiveSelectedMessage`\n- Improve some Show instances, e.g. ProcessId\n- Rewrite
  Logging API:\n  - Vastly simplified API\n\n## 0.9.0\n\n- Make `ForkIOScheduler`
  faster and more robust\n- Add `ExitReason`\n- Add `ProcessState`\n- Add `ShutdownRequest`
  type\n- Rewrite logging to be a `Reader` of a `LogWriter`\n- Remove pure logging,
  the `Logs...` constraint must be\n  accompanied by `Lifted IO` (or `MonadIO`) in
  many log functions\n  most prominently `logMsg`\n- Add a `lmDistance` field in `LogMessage`\n-
  Add `increaseLogMessageDistance` and `dropDistantLogMessages`\n  using the new `lmDistance`
  field\n- Add a newtype for the argument to selective receives: `MessageSelector`\n-
  Add a `makeReference` function to `Process` which will return process local\n  unique
  `Int`s\n- Rename `spawnServer` to `spawnServerWithEffects` and add a simpler version
  of\n  `spawnServerWithEffects` called `spawnServer`\n- Make all `ApiHandler` handler
  callbacks optional (by changing the type to `Maybe ...`)\n- `ApiHandler` must now
  return an `ApiServerCmd`.\n- Add `ApiServerCmd` which allows handler functions to
  leave to server loop without\n  exiting the process\n- Fix `Observer.Queue`\n- Rename
  fields in `ApiHandler`\n- Add smart constructors for `ApiHandler`\n\n## 0.8.0\n\n-
  Add selective receive\n- Complete `Api.Server` rewrite (simplification)\n- Move
  examples to `./examples/` and add executables to the\n  cabal file\n\n## 0.7.3\n\n-
  Add `withFrozenCallStack` to exposed functions\n- Add `ObserverState` type alias\n\n##
  0.7.2\n\n- Add `ObservationQueue` utility\n- Fix missing re-exports from\n  `Control.Eff.Concurrent.Api.Client`\n
  \ in `Control.Eff.Concurrent` introduced in recent versions\n\n## 0.7.1\n\n- Improve
  call-stack support in log messages\n- Expose `setLogMessageTimestamp` and `setLogMessageThreadId`\n\n##
  0.7.0\n\n- Remove the parameter from `closeLogChannelAfter` that had the optional:\n
  \ last-log-message-before-channel-closes\n\n## 0.6.4\n\n- Add `whereIsServer`\n\n##
  0.6.3\n\n- Add `ServerReader` type alias\n\n## 0.6.2\n\n- Fix bad `containers` version
  boundary\n\n## 0.6.1\n\n- Improve Experimental Nix Expressions\n\n## 0.6.0\n\n-
  Rewrite Logging\n- Improve Experimental Nix Expressions\n\n## 0.5.0.0\n\n- Switch
  to `extensible-effects` version `3.1.0.0`\n- Bump to stackage LTS-12.9\n- Add `Control.Eff.Log.MessageFactory`\n-
  Add `Control.Eff.Log.Message`\n\n## 0.4.0.0\n\n- Switch to `extensible-effects`
  version `3.0.0.0`\n- Improve single threaded scheduler to be more space efficient\n-
  Add some strictness annotations\n- Add `Control.Eff.Loop` with (hopefully) constant
  space `forever` and\n  `replicateM_`\n- Add `Control.Eff.Concurrent`, a module that
  conveniently re-exports most\n  library functions.\n\n## 0.3.0.2\n\n- Improve single
  threaded scheduler such that the main process can return a value\n\n## 0.3.0.1\n\n-
  Fix a race condition in the SchedulerSession shutdown\n- Improve the interactive
  scheduler session API\n- Rename `SchedulerVar` -> `SchedulerSession`\n- Remove `submitPrint`\n\n##
  0.3.0.0\n\n- Add support for running and interacting with a scheduler\n  and it's
  processes from IO, for example from ghci\n- Rename `yieldProcess` to `executeAndResumeOrExit`\n-
  Add an actual `yieldProcess`, that behaves like `yield`\n- Change the return type
  of function to `()` where applicable\n  to avoid all these `_ <- sendMessage...`
  or `void $ sendMessage`\n  dances.\n- Add a simple logging observer: `spawnLoggingObserver`\n-
  Removed `Control.Eff.Interactive`\n- Removed most functions in `Control.Eff.ExceptionExtra`\n-
  Make `sendMessage` and the reply in `call` strict with respect to the message\n
  \ payload\n\n## 0.2.0.3\n\n- Improve 'Api' documentation\n- Improve `LogChannel`
  API\n- Reorganize unit tests\n- Hopefully tune travis ci test parameter enough to
  get a stable build result\n\n## 0.2.0.2\n\n- Fix minor `stack upload` complaints
  about the cabal file\n\n## 0.2.0.1\n\n- Simplify IO Exception handling in `ForkIoScheduler`,\n-
  Add many unit tests for exception, exit and shutdown\n\n## 0.2.0.0\n\n- Add `Spawn`
  to `Process`\n- Merge `MessagePassing` and `Process`\n- Add initial test suite\n-
  Fix shutdown error in `ForkIoScheduler`\n- Rename `Dispatcher` to `Scheduler`\n-
  Add `receiveAnyLoop` function to `Process`\n- Change `Api.Server` `serve` to loop
  instead of handling just one request\n- Allow combining multiple `ApiHandler` such
  that one process can handle\n  multiple APIs\n\n## 0.1.3.0\n\n- Rename and split
  `GenServer` to `Api`, `Api.Client`, `Api.Server`\n- Add `registerServer`, `callRegistered`
  and `castRegistered`\n- Remove the variant of `cast` that returns a boolean\n\n##
  0.1.2.2\n\n- Try to fix version bounds for hackage\n\n## 0.1.2.1\n\n- Add more documentation\n-
  Simplify Scheduler API\n- Make more exception safe\n\n## 0.1.2.0\n\n- Add Observer
  module\n- Implement Exception handling\n- Improve Scheduler shutdown\n- Add logging
  support via the logging-effect library\n\n## 0.1.1.0\n\n- Substantial API reorganization\n-
  Rename/Move modules\n\n## 0.1.0.1\n\n- Stack/Cabal/Github Cosmetics\n- Travis build
  job\n\n## 0.1.0.0\n\n- Initial Version\n"
basic-deps:
  extensible-effects-concurrent: -any
  exceptions: ! '>=0.10 && <0.11'
  bytestring: ! '>=0.10 && <0.11'
  hostname: -any
  extensible-effects: ==5.*
  stm: ! '>=2.4.5 && <2.6'
  base: ! '>=4.12 && <5'
  time: ! '>=1.8 && <1.9'
  text: ==1.2.*
  safe-exceptions: ! '>=0.1 && <0.2'
  monad-control: ! '>=1.0 && <1.1'
  filepath: ==1.4.*
  process: ! '>=1.6 && <1.7'
  network: ! '>=2 && <4'
  async: ! '>=2.2 && <3'
  data-default: ==0.7.*
  containers: ! '>=0.5.8 && <0.7'
  lens: ! '>=4.14 && <4.18'
  mtl: ! '>=2.2 && <2.3'
  transformers-base: ! '>=0.4 && <0.5'
  pretty-types: ! '>=0.2.3.1 && <0.4'
  parallel: ! '>=3.2 && <3.3'
  deepseq: ==1.4.*
  QuickCheck: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- '0.8'
- 0.9.0
- 0.9.2
- 0.9.2.1
- 0.9.2.2
- 0.10.0
- 0.11.1
- 0.12.0
- 0.12.1
- 0.13.0
- 0.13.2
- 0.14.0
- 0.14.1
- 0.14.2
- 0.14.3
- 0.15.0
- 0.16.0
- 0.16.1
- 0.17.0
- 0.18.0
- 0.18.1
- 0.19.0
- 0.19.1
- 0.20.0
- 0.21.0
- 0.21.1
- 0.22.0
- 0.22.1
- 0.23.0
- 0.24.0
- 0.24.1
- 0.24.2
- 0.24.3
author: Sven Heyll
latest: 0.24.3
description-type: markdown
description: "# extensible-effects-concurrent\n\n[![Build Status](https://travis-ci.org/sheyll/extensible-effects-concurrent.svg?branch=master)](https://travis-ci.org/sheyll/extensible-effects-concurrent)\n\n[![Hackage](https://img.shields.io/hackage/v/extensible-effects-concurrent.svg?style=flat)](http://hackage.haskell.org/package/extensible-effects-concurrent)\n\n##
  From Erlang to Haskell\n\nThis project is an attempt to implement core ideas learned
  from the **Erlang/OTP**  \nframework in Haskell using **`extensible-effects`**.\n\nThis
  library sketches my personal history of working on a large, real world Erlang\napplication,
  trying to bring some of the ideas over to Haskell.\n\nI know about cloud-haskell
  and transient, but I wanted something based on \n'extensible-effects', and I also
  wanted to deepen my understanding of it.\n\n### Modeling an Application with Processes\n\nThe
  fundamental approach to modelling applications in Erlang is\nbased on the concept
  of concurrent, communicating processes.\n\nThe mental model of the programming framework
  regards objects as **processes**\nwith an isolated internal state. \n\n**`Processes`**
  are at the center of that contraption. All *actions*\nhappen in processes, and all
  *interactions* happen via messages sent\nbetween processes. \n\nThis is called **Message
  Passing Concurrency**;\nin this library it is provided via the **`Process`** effect.
  \n\nThe **`Process`** effect itself is just an *abstract interface*.\n\nThere are
  two schedulers, that *interpret* the `Process` effect:\n\n- A *multi-threaded* scheduler,
  based on the `async`\n- A *pure* single-threaded scheduler, based on coroutines\n\n###
  Process Life-Cycles and Interprocess Links\n\nAll processes except the first process
  are **`spawned`** by existing \nprocesses.\n\nWhen a process **`spawns`** a new
  process they are independent apart from the fact that\nthe parent knows the process-id
  of the spawend child process.\n \nProcesses can **monitor** each other to be notified
  when a communication partner exits, \npotentially in unforseen ways.\n\nSimilarily
  processes may choose to mutually **link** each other.\n\nThat allows to model **trees**
  in which processes watch and start or\nrestart each other.\n\nBecause processes
  never share memory, the internal - possibly broken - state of \na process is gone,
  when a process exits; hence restarting a process will not\nbe bothered by left-over,
  possibly inconsistent, state. \n\n### Higher Level Abstractions\n\nProcesses can
  receive only message of type `Dynamic`.\n\nIn order to leverage Haskells type-safety,
  a bit of support code is available.\n\nThere is a **data family** called **`Api`**
  allowing to model **calls** and \n**casts**, as well as event management and process
  supervision.\n\nThese facilities are very important to build **non-defensive**,
  **let-it-crash**\napplications, resilient to runtime errors.   \n\n### Additional
  services\n\nCurrently a custom **logging effect** is also part of the code base.\n\n##
  Usage and Implementation\n\n### Example Code\n\n```haskell\nmodule Main where\n\nimport
  \          Control.Eff\nimport           Control.Eff.Concurrent\nimport           Data.Dynamic\nimport
  \          Control.DeepSeq\nimport           GHC.Stack (HasCallStack)\n\nmain ::
  IO ()\nmain = defaultMain firstExample\n\nnewtype WhoAreYou = WhoAreYou ProcessId
  \n  deriving (Typeable, NFData, Show)\n\nfirstExample \n  :: (HasCallStack, Member
  Logs q) \n  => Eff (InterruptableProcess q) ()\nfirstExample = do\n  person <- spawn\n
  \   (do\n      logInfo \"I am waiting for someone to ask me...\"\n      WhoAreYou
  replyPid <- receiveMessage\n      sendMessage replyPid \"Alice\"\n      logInfo
  (show replyPid ++ \" just needed to know it.\")\n    )\n  me <- self\n  sendMessage
  person (WhoAreYou me)\n  personName <- receiveMessage\n  logInfo (\"I just met \"
  ++ personName)\n\n```\n\n**Running** this example causes this output:\n\n```text\nDEBUG
  \    scheduler loop entered                                                   ForkIOScheduler.hs
  line 157\nDEBUG            !1 enter process                                                            ForkIOScheduler.hs
  line 549\nNOTICE           !1 ++++++++ main process started ++++++++                                   ForkIOScheduler.hs
  line 461\nDEBUG            !2 enter process                                                            ForkIOScheduler.hs
  line 549\nINFO             !2 I am waiting for someone to ask me...                                               Main.hs
  line 26\nINFO             !2 !1 just needed to know it.                                                          Main.hs
  line 29\nDEBUG            !2 exit normally                                                            ForkIOScheduler.hs
  line 568\nINFO             !1 I just met Alice                                                                    Main.hs
  line 34\nNOTICE           !1 ++++++++ main process returned ++++++++                                  ForkIOScheduler.hs
  line 463\nDEBUG            !1 exit normally                                                            ForkIOScheduler.hs
  line 568\nDEBUG     scheduler loop returned                                                  ForkIOScheduler.hs
  line 159\nDEBUG     scheduler cleanup begin                                                  ForkIOScheduler.hs
  line 154\nNOTICE    cancelling processes: []                                                 ForkIOScheduler.hs
  line 168\nNOTICE    all processes cancelled                                                  ForkIOScheduler.hs
  line 179\n```\n\n### Required GHC Extensions\n\nIn order to use the library you
  might need to activate some extension\nin order to fight some ambiguous types, stemming
  from the flexibility to\nchoose different Scheduler implementations.\n\n- AllowAmbiguousTypes\n-
  TypeApplications\n\n\n## Planned Features\n\n- Stackage [![extensible-effects-concurrent
  LTS](http://stackage.org/package/extensible-effects-concurrent/badge/lts)](http://stackage.org/lts/package/extensible-effects-concurrent)\n\n-
  Scheduler `ekg` Monitoring\n"
license-name: BSD-3-Clause
