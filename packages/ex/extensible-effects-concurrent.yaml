homepage: https://github.com/sheyll/extensible-effects-concurrent#readme
changelog-type: markdown
hash: 91438d0d2e01da233a4e8e288b7a7d208ba2ea68e5d91c6eedcca917b3ea070c
test-bench-deps:
  extensible-effects-concurrent: -any
  extensible-effects: ! '>=3'
  stm: -any
  base: ! '>=4.9 && <5'
  tasty-discover: -any
  HUnit: -any
  containers: -any
  lens: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: <2.12
maintainer: sven.heyll@gmail.com
synopsis: Message passing concurrency as extensible-effect
changelog: ! "# Changelog for extensible-effects-concurrent\n\n## 0.7.0\n\n- Remove
  the parameter from `closeLogChannelAfter` that had the optional:\n  last-log-message-before-channel-closes\n\n##
  0.6.4\n\n- Add `whereIsServer`\n\n## 0.6.3\n\n- Add `ServerReader` type alias\n\n##
  0.6.2\n\n- Fix bad `containers` version boundary\n\n## 0.6.1\n\n- Improve Experimental
  Nix Expressions\n\n## 0.6.0\n\n- Rewrite Logging\n- Improve Experimental Nix Expressions\n\n##
  0.5.0.0\n\n- Switch to `extensible-effects` version `3.1.0.0`\n- Bump to stackage
  LTS-12.9\n- Add `Control.Eff.Log.MessageFactory`\n- Add `Control.Eff.Log.Message`\n\n##
  0.4.0.0\n\n- Switch to `extensible-effects` version `3.0.0.0`\n- Improve single
  threaded scheduler to be more space efficient\n- Add some strictness annotations\n-
  Add `Control.Eff.Loop` with (hopefully) constant space `forever` and\n  `replicateM_`\n-
  Add `Control.Eff.Concurrent`, a module that conveniently re-exports most\n  library
  functions.\n\n## 0.3.0.2\n\n- Improve single threaded scheduler such that the main
  process can return a value\n\n## 0.3.0.1\n\n- Fix a race condition in the SchedulerSession
  shutdown\n- Improve the interactive scheduler session API\n- Rename `SchedulerVar`
  -> `SchedulerSession`\n- Remove `submitPrint`\n\n## 0.3.0.0\n\n- Add support for
  running and interacting with a scheduler\n  and it's processes from IO, for example
  from ghci\n- Rename `yieldProcess` to `executeAndResume`\n- Add an actual `yieldProcess`,
  that behaves like `yield`\n- Change the return type of function to `()` where applicable\n
  \ to avoid all these `_ <- sendMessage...` or `void $ sendMessage`\n  dances.\n-
  Add a simple logging observer: `spawnLoggingObserver`\n- Removed `Control.Eff.Interactive`\n-
  Removed most functions in `Control.Eff.ExceptionExtra`\n- Make `sendMessage` and
  the reply in `call` strict with respect to the message\n  payload\n\n## 0.2.0.3\n\n-
  Improve 'Api' documentation\n- Improve `LogChannel` API\n- Reorganize unit tests\n-
  Hopefully tune travis ci test parameter enough to get a stable build result\n\n##
  0.2.0.2\n\n- Fix minor `stack upload` complaints about the cabal file\n\n## 0.2.0.1\n\n-
  Simplify IO Exception handling in `ForkIoScheduler`,\n- Add many unit tests for
  exception, exit and shutdown\n\n## 0.2.0.0\n\n- Add `Spawn` to `Process`\n- Merge
  `MessagePassing` and `Process`\n- Add initial test suite\n- Fix shutdown error in
  `ForkIoScheduler`\n- Rename `Dispatcher` to `Scheduler`\n- Add `receiveLoop` function
  to `Process`\n- Change `Api.Server` `serve` to loop instead of handling just one
  request\n- Allow combining multiple `ApiHandler` such that one process can handle\n
  \ multiple APIs\n\n### TODO\n\n- Add `Kill` action to `Process`\n\n## 0.1.3.0\n\n-
  Rename and split `GenServer` to `Api`, `Api.Client`, `Api.Server`\n- Add `registerServer`,
  `callRegistered` and `castRegistered`\n- Remove the variant of `cast` that returns
  a boolean\n\n## 0.1.2.2\n\n- Try to fix version bounds for hackage\n\n## 0.1.2.1\n\n-
  Add more documentation\n- Simplify Scheduler API\n- Make more exception safe\n\n##
  0.1.2.0\n\n- Add Observer module\n- Implement Exception handling\n- Improve Scheduler
  shutdown\n- Add logging support via the logging-effect library\n\n## 0.1.1.0\n\n-
  Substantial API reorganization\n- Rename/Move modules\n\n## 0.1.0.1\n\n- Stack/Cabal/Github
  Cosmetics\n- Travis build job\n\n## 0.1.0.0\n\n- Initial Version\n"
basic-deps:
  extensible-effects: ! '>=3'
  stm: ! '>=2.4.5 && <2.6'
  base: ! '>=4.9 && <5'
  time: -any
  monad-control: -any
  filepath: -any
  process: -any
  data-default: -any
  logging-effect: -any
  tagged: -any
  containers: ! '>=0.5.8 && <0.7'
  lens: -any
  mtl: -any
  transformers: -any
  random: -any
  parallel: -any
  deepseq: -any
  QuickCheck: <2.12
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.3.0'
- '0.2.0.2'
- '0.2.0.3'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.6.0'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.7.0'
author: Sven Heyll
latest: '0.7.0'
description-type: markdown
description: ! "# extensible-effects-concurrent\n\nMessage passing concurrency with
  'forkIO' and 'extensible-effects' inspired by Erlang.\n\n[![Build Status](https://travis-ci.org/sheyll/extensible-effects-concurrent.svg?branch=master)](https://travis-ci.org/sheyll/extensible-effects-concurrent)\n\n[![Hackage](https://img.shields.io/badge/hackage-extensible-effects-concurrent-green.svg?style=flat)](http://hackage.haskell.org/package/extensible-effects-concurrent)
  \n\n[![extensible-effects-concurrent LTS](http://stackage.org/package/extensible-effects-concurrent/badge/lts)](http://stackage.org/lts/package/extensible-effects-concurrent)\n\n##
  Example\n\nTODO\n"
license-name: BSD3
