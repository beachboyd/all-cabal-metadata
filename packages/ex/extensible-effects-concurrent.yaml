homepage: https://github.com/sheyll/extensible-effects-concurrent#readme
changelog-type: markdown
hash: 556443aa465f7e666ee6d499ced72edee92d8cf1b517e9bcaf89f39b90f39ada
test-bench-deps:
  extensible-effects-concurrent: -any
  extensible-effects: ! '>=3.1.0.2 && <3.2'
  stm: -any
  base: ! '>=4.7 && <5'
  tasty-discover: -any
  async: -any
  data-default: -any
  HUnit: -any
  containers: -any
  lens: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: <2.12
maintainer: sven.heyll@gmail.com
synopsis: Message passing concurrency as extensible-effect
changelog: ! "# Changelog for extensible-effects-concurrent\n\n## 0.18.1\n\n- Fix
  inappropriate `LinkedProcessCrashed` interrupt when a process exits with `NotRecovered
  ProcessFinished`\n\n## 0.18.0\n\n- Split-up and replace `spawnLinkObservationQueue`
  with a simpler (but more verbose) alternative\n\n## 0.17.0\n\n- Rename misspelled
  `spawnLinkObserverationQueue` to `spawnLinkObservationQueue`\n\n## 0.16.1\n\n- Export
  `ObserverRegistry` constructors for custom event registration handling\n\n## 0.16.0\n\nAPI
  Stabilization and cleanup release with major API changes.\n\n- Replace `Control.Eff.Concurrent.Api.Server`
  with\n   `Control.Eff.Concurrent.Api.Server2` and rename\n   `Control.Eff.Concurrent.Api.Server2`
  to\n   `Control.Eff.Concurrent.Api.Server`\n\n- Rewrite `Observer` and related modules
  like `Observer.Queue`\n  - Remove all type classes\n  - Rely on `Server2`\n  - Remove
  `CallBackObserver`\n  - Remove the observer support code in `Server2`\n\n- Remove
  the `SchedulerProxy` parameter and tell library users to enable `AllowAmbiguousTypes`
  and `TypeApplications`\n  - Remove dependent support code like `HasScheduler`\n\n##
  0.15.0\n\n- Add `Api` `Request` and `Reply` types\n- Add `RequestOrigin` which can
  be used in `Server2` based Api servers to queue and defer replies to `Call`s\n\n##
  0.14.3\n\n- Export the functions introduced in 0.14.2 in `Control.Eff.Concurrent`.\n\n##
  0.14.2\n\n- Add `Server2` functions to spawn and _link_\n- Add a `Server2` function
  to defer the reply to a `Call`s called:\n  `handleCallsDeferred`\n\n## 0.14.1\n\n-
  Add Server2 based observation handling with `handleObservations`\n\n## 0.14.0\n\n-
  Fix/Improve Server2\n\n## 0.13.2\n\n- Add `ProcessFinished`\n- Add `tryUninterrupted`\n-
  Add simpler `Server2`\n\n## 0.13.1\n\n- Remove misguided `MonadCatch` constraints
  in the `ObservationQueueReader`\n  functions, and use `Interrupts` instead\n\n##
  0.13.0\n\n- Fix bad constraints in `Queue` observer\n\n## 0.12.2\n\n- Fix some compiler
  warnings\n\n## 0.12.1\n\n- Fix build errors with GHC-8.6\n\n## 0.12.0\n\n- Add implicit
  SchedulerProxy\n- Add flushMessages\n- Add receiving with timeout\n- Add process
  `Link`ing and `Monitoring`.\n- Make the distinction between recoverable and non-recoverable
  exit explicit in\n  the type parameter of `ExitReason`, and introduce `interruptXXXX`\n
  \ functions in addition to `shutdownXXXX` functions, to throw recoverable exits.\n-
  Merge `ShutdownRequest` and `ExitReason`\n- Rename `receiveLoopSuchThat` to `receiveSelectedLoop`\n-
  Pass the exit reason to the callback passed to `receiveSelectedLoop`\n- Rename `receiveMessage`
  to `receiveAnyMessage`\n- Rename `receiveAnyLoop` to `receiveAnyLoop`\n- Pass the
  exit reason to the callback passed to `receiveAnyLoop`\n- Rename `receiveMessage`
  to `receiveAnyMessage`\n- Rename `receiveMessageAs` to `receiveMessage`\n- Rename
  `receiveLoop` to `receiveLoop`\n- Pass the exit reason to the callback passed to
  `receiveAnyLoop`\n- Remove `SchedulerShuttingDown`\n- Improve logging for exceptions
  in `ForkIOScheduler`\n- Fix a bug in the logging system that caused all log filters
  to be forgotten\n  when using unliftings such as `MonadBaseControl`, `MonadThrow`,
  `MonadCatch`\n  and `MonadMask`\n- Fix the scheduler schutdown to not always run
  into the cancellation timeout\n\n## 0.11.1\n\n- Fix a compilation error\n\n## 0.11.0\n\n-
  Change the return type of `spawnCallbackObserver` from\n  `Bool` to `ApiServerCmd`\n\n##
  0.10.0\n\n- Re-introduce a Logs Effect but keep the LogWriter Reader\n- Get rid
  of the LogWriterProxy and the implicit argument\n- Make logging stricter: require
  log message to be NFData instances\n\n## 0.9.2\n\n- Try to adapt the dependency
  versions to make hackage happy again\n\n## 0.9.1\n\n- Add smart constructors for
  `MessageSelector`\n- Remove `ReceiveMessage` `Process` action\n- Rename `ReceiveMessageSuchThat`
  to `ReceiveSelectedMessage`\n- Improve some Show instances, e.g. ProcessId\n- Rewrite
  Logging API:\n  - Vastly simplified API\n\n## 0.9.0\n\n- Make `ForkIOScheduler`
  faster and more robust\n- Add `ExitReason`\n- Add `ProcessState`\n- Add `ShutdownRequest`
  type\n- Rewrite logging to be a `Reader` of a `LogWriter`\n- Remove pure logging,
  the `Logs...` constraint must be\n  accompanied by `Lifted IO` (or `MonadIO`) in
  many log functions\n  most prominently `logMsg`\n- Add a `lmDistance` field in `LogMessage`\n-
  Add `increaseLogMessageDistance` and `dropDistantLogMessages`\n  using the new `lmDistance`
  field\n- Add a newtype for the argument to selective receives: `MessageSelector`\n-
  Add a `makeReference` function to `Process` which will return process local\n  unique
  `Int`s\n- Rename `spawnServer` to `spawnServerWithEffects` and add a simpler version
  of\n  `spawnServerWithEffects` called `spawnServer`\n- Make all `ApiHandler` handler
  callbacks optional (by changing the type to `Maybe ...`)\n- `ApiHandler` must now
  return an `ApiServerCmd`.\n- Add `ApiServerCmd` which allows handler functions to
  leave to server loop without\n  exitting the process\n- Fix `Observer.Queue`\n-
  Rename fields in `ApiHandler`\n- Add smart constructors for `ApiHandler`\n\n## 0.8.0\n\n-
  Add selective receive\n- Complete `Api.Server` rewrite (simplification)\n- Move
  examples to `./examples/` and add executables to the\n  cabal file\n\n## 0.7.3\n\n-
  Add `withFrozenCallStack` to exposed functions\n- Add `ObserverState` type alias\n\n##
  0.7.2\n\n- Add `ObservationQueue` utility\n- Fix missing re-exports from\n  `Control.Eff.Concurrent.Api.Client`\n
  \ in `Control.Eff.Concurrent` introduced in recent versions\n\n## 0.7.1\n\n- Improve
  call-stack support in log messages\n- Expose `setLogMessageTimestamp` and `setLogMessageThreadId`\n\n##
  0.7.0\n\n- Remove the parameter from `closeLogChannelAfter` that had the optional:\n
  \ last-log-message-before-channel-closes\n\n## 0.6.4\n\n- Add `whereIsServer`\n\n##
  0.6.3\n\n- Add `ServerReader` type alias\n\n## 0.6.2\n\n- Fix bad `containers` version
  boundary\n\n## 0.6.1\n\n- Improve Experimental Nix Expressions\n\n## 0.6.0\n\n-
  Rewrite Logging\n- Improve Experimental Nix Expressions\n\n## 0.5.0.0\n\n- Switch
  to `extensible-effects` version `3.1.0.0`\n- Bump to stackage LTS-12.9\n- Add `Control.Eff.Log.MessageFactory`\n-
  Add `Control.Eff.Log.Message`\n\n## 0.4.0.0\n\n- Switch to `extensible-effects`
  version `3.0.0.0`\n- Improve single threaded scheduler to be more space efficient\n-
  Add some strictness annotations\n- Add `Control.Eff.Loop` with (hopefully) constant
  space `forever` and\n  `replicateM_`\n- Add `Control.Eff.Concurrent`, a module that
  conveniently re-exports most\n  library functions.\n\n## 0.3.0.2\n\n- Improve single
  threaded scheduler such that the main process can return a value\n\n## 0.3.0.1\n\n-
  Fix a race condition in the SchedulerSession shutdown\n- Improve the interactive
  scheduler session API\n- Rename `SchedulerVar` -> `SchedulerSession`\n- Remove `submitPrint`\n\n##
  0.3.0.0\n\n- Add support for running and interacting with a scheduler\n  and it's
  processes from IO, for example from ghci\n- Rename `yieldProcess` to `executeAndResumeOrExit`\n-
  Add an actual `yieldProcess`, that behaves like `yield`\n- Change the return type
  of function to `()` where applicable\n  to avoid all these `_ <- sendMessage...`
  or `void $ sendMessage`\n  dances.\n- Add a simple logging observer: `spawnLoggingObserver`\n-
  Removed `Control.Eff.Interactive`\n- Removed most functions in `Control.Eff.ExceptionExtra`\n-
  Make `sendMessage` and the reply in `call` strict with respect to the message\n
  \ payload\n\n## 0.2.0.3\n\n- Improve 'Api' documentation\n- Improve `LogChannel`
  API\n- Reorganize unit tests\n- Hopefully tune travis ci test parameter enough to
  get a stable build result\n\n## 0.2.0.2\n\n- Fix minor `stack upload` complaints
  about the cabal file\n\n## 0.2.0.1\n\n- Simplify IO Exception handling in `ForkIoScheduler`,\n-
  Add many unit tests for exception, exit and shutdown\n\n## 0.2.0.0\n\n- Add `Spawn`
  to `Process`\n- Merge `MessagePassing` and `Process`\n- Add initial test suite\n-
  Fix shutdown error in `ForkIoScheduler`\n- Rename `Dispatcher` to `Scheduler`\n-
  Add `receiveAnyLoop` function to `Process`\n- Change `Api.Server` `serve` to loop
  instead of handling just one request\n- Allow combining multiple `ApiHandler` such
  that one process can handle\n  multiple APIs\n\n## 0.1.3.0\n\n- Rename and split
  `GenServer` to `Api`, `Api.Client`, `Api.Server`\n- Add `registerServer`, `callRegistered`
  and `castRegistered`\n- Remove the variant of `cast` that returns a boolean\n\n##
  0.1.2.2\n\n- Try to fix version bounds for hackage\n\n## 0.1.2.1\n\n- Add more documentation\n-
  Simplify Scheduler API\n- Make more exception safe\n\n## 0.1.2.0\n\n- Add Observer
  module\n- Implement Exception handling\n- Improve Scheduler shutdown\n- Add logging
  support via the logging-effect library\n\n## 0.1.1.0\n\n- Substantial API reorganization\n-
  Rename/Move modules\n\n## 0.1.0.1\n\n- Stack/Cabal/Github Cosmetics\n- Travis build
  job\n\n## 0.1.0.0\n\n- Initial Version\n"
basic-deps:
  extensible-effects-concurrent: -any
  exceptions: ! '>=0.10 && <0.11'
  extensible-effects: ! '>=3.1.0.2 && <4'
  stm: ! '>=2.4.5 && <2.6'
  base: ! '>=4.7 && <5'
  time: ! '>=1.8 && <1.9'
  safe-exceptions: ! '>=0.1 && <0.2'
  monad-control: ! '>=1.0 && <1.1'
  filepath: ==1.4.*
  process: ! '>=1.6 && <1.7'
  async: ! '>=2.2 && <3'
  data-default: ==0.7.*
  containers: ! '>=0.5.8 && <0.7'
  lens: ! '>=4.14 && <4.18'
  mtl: ! '>=2.2 && <2.3'
  transformers-base: ! '>=0.4 && <0.5'
  parallel: ! '>=3.2 && <3.3'
  deepseq: ==1.4.*
  QuickCheck: <2.12
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- '0.8'
- 0.9.0
- 0.9.2
- 0.9.2.1
- 0.9.2.2
- 0.10.0
- 0.11.1
- 0.12.0
- 0.12.1
- 0.13.0
- 0.13.2
- 0.14.0
- 0.14.1
- 0.14.2
- 0.14.3
- 0.15.0
- 0.16.0
- 0.16.1
- 0.17.0
- 0.18.0
- 0.18.1
author: Sven Heyll
latest: 0.18.1
description-type: markdown
description: ! "# extensible-effects-concurrent\n\nMessage passing concurrency with
  'forkIO' and 'extensible-effects' inspired by Erlang.\n\n[![Build Status](https://travis-ci.org/sheyll/extensible-effects-concurrent.svg?branch=master)](https://travis-ci.org/sheyll/extensible-effects-concurrent)\n\n[![Hackage](https://img.shields.io/hackage/v/extensible-effects-concurrent.svg?style=flat)](http://hackage.haskell.org/package/extensible-effects-concurrent)\n\nAlso
  included:\n\n- Logging\n\n- Memory Leak Free `forever`\n\n## GHC Extensions\n\nIn
  order to use the library you might need to activate some extension\nin order to
  fight some ambiguous types, stemming from the flexibility to\nchoose different Scheduler
  implementations.\n\n- AllowAmbiguousTypes\n- TypeApplications\n\n\n## Example\n\n```haskell\nmodule
  Main where\n\nimport           Control.Eff\nimport           Control.Eff.Lift\nimport
  \          Control.Eff.Concurrent\nimport           Data.Dynamic\nimport           Control.Concurrent\nimport
  \          Control.DeepSeq\n\nmain :: IO ()\nmain = defaultMain\n  (do\n    lift
  (threadDelay 100000) -- because of async logging\n    firstExample\n    lift (threadDelay
  100000) -- ... async logging\n  )\n\nnewtype WhoAreYou = WhoAreYou ProcessId deriving
  (Typeable, NFData, Show)\n\nfirstExample\n  :: (HasLogging IO q) => Eff (InterruptableProcess
  q) ()\nfirstExample = do\n  person <- spawn\n    (do\n      logInfo \"I am waiting
  for someone to ask me...\"\n      WhoAreYou replyPid <- receiveMessage\n      sendMessage
  replyPid \"Alice\"\n      logInfo (show replyPid ++ \" just needed to know it.\")\n
  \   )\n  me <- self\n  sendMessage person (WhoAreYou me)\n  personName <- receiveMessage\n
  \ logInfo (\"I just met \" ++ personName)\n\n\n```\n\n**Running** this example causes
  this output:\n(_not entirely true because of async logging, but true enough_)\n\n```text\n2018-11-05T10:50:42
  DEBUG     scheduler loop entered                                                   ForkIOScheduler.hs
  line 131\n2018-11-05T10:50:42 DEBUG            !1 [ThreadId 11] enter process                                                            ForkIOScheduler.hs
  line 437\n2018-11-05T10:50:42 NOTICE           !1 [ThreadId 11] ++++++++ main process
  started ++++++++                                   ForkIOScheduler.hs line 394\n2018-11-05T10:50:42
  DEBUG            !2 [ThreadId 12] enter process                                                            ForkIOScheduler.hs
  line 437\n2018-11-05T10:50:42 INFO             !2 [ThreadId 12] I am waiting for
  someone to ask me...                                               Main.hs line
  27\n2018-11-05T10:50:42 INFO             !2 [ThreadId 12] !1 just needed to know
  it.                                                          Main.hs line 30\n2018-11-05T10:50:42
  DEBUG            !2 [ThreadId 12] returned                                                                 ForkIOScheduler.hs
  line 440\n2018-11-05T10:50:42 INFO             !1 [ThreadId 11] I just met Alice
  \                                                                   Main.hs line
  35\n2018-11-05T10:50:42 NOTICE           !1 [ThreadId 11] ++++++++ main process
  returned ++++++++                                  ForkIOScheduler.hs line 396\n2018-11-05T10:50:42
  DEBUG            !1 [ThreadId 11] returned                                                                 ForkIOScheduler.hs
  line 440\n2018-11-05T10:50:42 DEBUG     scheduler loop returned                                                  ForkIOScheduler.hs
  line 133\n2018-11-05T10:50:42 DEBUG     scheduler cleanup begin                                                  ForkIOScheduler.hs
  line 137\n2018-11-05T10:50:42 NOTICE    cancelling processes: []                                                 ForkIOScheduler.hs
  line 149\n2018-11-05T10:50:42 DEBUG     scheduler cleanup done                                                   ForkIOScheduler.hs
  line 141\n```\n\n## TODO\n\n### Stackage\n\nStill todo...\n\n[![extensible-effects-concurrent
  LTS](http://stackage.org/package/extensible-effects-concurrent/badge/lts)](http://stackage.org/lts/package/extensible-effects-concurrent)\n\n\n###
  Other\n\n- Process Linking/Monitoring\n\n- Scheduler `ekg` Monitoring\n\n- Timers
  and Timeouts (e.g. in `receive`)\n\n- Rename stuff\n"
license-name: BSD-3-Clause
