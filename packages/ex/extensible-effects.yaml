homepage: https://github.com/suhailshergill/extensible-effects
changelog-type: ''
hash: ad04ecbfb1f18994b5de8bc6c2a9ca9df6dbb698c04cf26a025d48e5eda55b4a
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  extensible-effects: -any
  base: ! '>=4.7 && <4.12'
  monad-control: ! '>=1.0'
  test-framework-quickcheck2: ==0.3.*
  criterion: -any
  HUnit: -any
  test-framework-th: ! '>=0.2'
  silently: ! '>=1.2'
  mtl: -any
  QuickCheck: -any
maintainer: suhailshergill@gmail.com
synopsis: An Alternative to Monad Transformers
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.12'
  monad-control: ! '>=1.0 && <1.1'
  transformers-base: ==0.4.*
all-versions:
- '1.0'
- '1.1.0'
- '1.2.0'
- '1.2.1'
- '1.4.1'
- '1.7.1'
- '1.7.1.0'
- '1.7.1.1'
- '1.7.1.2'
- '1.7.2.1'
- '1.8.0.0'
- '1.8.1.0'
- '1.9.0.0'
- '1.9.0.1'
- '1.9.1.0'
- '1.9.2.2'
- '1.10.0.1'
- '1.11.0.0'
- '1.11.0.1'
- '1.11.0.2'
- '1.11.0.3'
- '1.11.0.4'
- '1.11.1.0'
- '2.0.0.0'
- '2.0.0.2'
- '2.0.1.0'
- '2.1.0.0'
- '2.2.1.0'
- '2.3.0.0'
- '2.3.0.1'
- '2.4.0.0'
- '2.5.0.0'
- '2.5.1.0'
- '2.5.1.2'
- '2.5.2.0'
- '2.5.3.0'
- '2.6.0.0'
- '2.6.0.1'
author: Oleg Kiselyov, Amr Sabry, Cameron Swords, Ben Foppa
latest: '2.6.0.1'
description-type: markdown
description: ! "extensible-effects is based on the work\n[Extensible Effects: An Alternative
  to Monad Transformers](http://okmij.org/ftp/Haskell/extensible/).\nPlease read the
  [paper](http://okmij.org/ftp/Haskell/extensible/exteff.pdf) and\nthe followup [freer
  paper](http://okmij.org/ftp/Haskell/extensible/more.pdf) for\ndetails. Additional
  explanation behind the approach can be found on [Oleg's website](http://okmij.org/ftp/Haskell/extensible/).\n\n[![Build
  Status](https://travis-ci.org/suhailshergill/extensible-effects.svg?branch=master)](https://travis-ci.org/suhailshergill/extensible-effects)\n[![Join
  the chat at https://gitter.im/suhailshergill/extensible-effects](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/suhailshergill/extensible-effects?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Stories
  in Ready](https://badge.waffle.io/suhailshergill/extensible-effects.png?label=ready&title=Ready)](http://waffle.io/suhailshergill/extensible-effects)\n[![Stories
  in progress](https://badge.waffle.io/suhailshergill/extensible-effects.png?label=in%20progress&title=In%20progress)](http://waffle.io/suhailshergill/extensible-effects)\n\n##
  Advantages\n\n  * Effects can be added, removed, and interwoven without changes
  to code not\n    dealing with those effects.\n\n## Limitations\n\n### Current implementation
  only supports GHC version 7.8 and above\nThis is not a fundamental limitation of
  the design or the approach, but there is\nan overhead with making the code compatible
  across a large number of GHC\nversions. If this is needed, patches are welcome :)\n\n###
  Ambiguity-Flexibility tradeoff\n\nThe extensibility of `Eff` comes at the cost of
  some ambiguity. A useful pattern\nto mitigate the ambiguity is to specialize the
  call to the handler of effects\nusing [type application](https://ghc.haskell.org/trac/ghc/wiki/TypeApplication)\nor
  type annotation. Examples of this pattern can be seen in\n[Example/Test.hs](./test/Control/Eff/Example/Test.hs).\n\nNote,
  however, that the extensibility can also be traded back, but that detracts\nfrom
  some of the advantages. For details see section 4.1 in the\n[paper](http://okmij.org/ftp/Haskell/extensible/exteff.pdf).\n\nSome
  examples where the cost of extensibility is apparent:\n\n  * Common functions can't
  be grouped using typeclasses, e.g.\n    the `ask` and `getState` functions can't
  be grouped with some\n\n        class Get t a where\n          ask :: Member (t
  a) r => Eff r a\n\n    `ask` is inherently ambiguous, since the type signature only
  provides\n    a constraint on `t`, and nothing more. To specify fully, a parameter\n
  \   involving the type `t` would need to be added, which would defeat the\n    point
  of having the grouping in the first place.\n  * Code requires greater number of
  type annotations. For details see\n    [#31](https://github.com/suhailshergill/extensible-effects/issues/31).\n"
license-name: MIT
