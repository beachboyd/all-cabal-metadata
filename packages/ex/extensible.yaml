homepage: https://github.com/fumieval/extensible
changelog-type: markdown
hash: 5e7eada0aa4f77cc5780777d9e01c6ff6203b270ed83fa28f26e452992d51b90
test-bench-deps:
  base: -any
  lens: -any
  QuickCheck: -any
  extensible: -any
  template-haskell: -any
maintainer: Fumiaki Kinoshita <fumiexcel@gmail.com>
synopsis: Extensible, efficient, optics-friendly data types and effects
changelog: ! "0.4.7.2\n-------------------------------------------------\n* Added
  cassava's `ToNamedRecord`, `ToRecord`, `FromNamedRecord` and `FromRecord` instances\n*
  Added `KeyIs` and `ValueIs`\n* Added `FromJSON` and `ToJSON` instances for `(:*)`\n\n0.4.7.1\n-------------------------------------------------\n*
  Fixed weird CPP errors on macOS 10.13.2 (#18)\n* Added `optFlag`, `optLastArg`,
  and `optionOptArg`\n\n0.4.7\n-------------------------------------------------\n*
  Made various optimisations to improve the compilation time\n* Added trivial instances
  for `FromBits`\n* Generalised the API of `Data.Extensible.GetOpt`\n\n0.4.6\n-------------------------------------------------\n*
  New module `Data.Extensible.GetOpt`\n* Added `fromBitProd`\n* Added `Hashable` instances
  for `:*`, `:|`, `BitProd`, `Membership`, and various wrappers\n* Added an `Unbox`
  instance for `:*`\n* Added `hfoldlWithIndex` and `hfoldlWithIndexFor`\n\n0.4.5\n-------------------------------------------------\n*
  Added `nothingEff`\n* Added `happend`\n* Added `Arbitrary` instances for `:*`, `:|`,
  and wrappers\n* Added `Data.Extensible.Bits`\n\n0.4.4\n-------------------------------------------------\n*
  Added `contEff` and `runContEff`\n* Added `castEff`\n* Added `evalStateEff`\n* Added
  `Semigroup` and `Monoid` instances for `Match`, `Comp`, `Prod`\n* Added `evalStateDef`,
  `execStateDef`, and `execWriterDef`\n* Added `mkFieldAs`\n* Added a `Bounded` instance
  for `:*`\n\n0.4.3\n-------------------------------------------------\n* Added `WrappedPointer`\n*
  Added `NFData` and `Generic` instances for `Comp`\n* Added a `Semigroup` instance
  for `h :* xs` and `Membership xs x`\n* Added `Prod`\n* Added `peelEff0`\n* Changed
  the `IsLabel` instance so that a function is always inferred as an optic\n* `Data.Extensible.Class`
  now exports `compareMembership`\n* Renamed `runMembership` to `leadership`\n\n0.4.2\n-------------------------------------------------\n*
  Made `newFrom` strict\n* `pieceAt` for `(:*)` is now strict\n* Added `(<!)`\n* Added
  `peelEff1`, `peelAction0`, `execStateEff`, `execWriterEff`\n* Added atomic operations
  for `Struct`\n* Added constrained variants of folds\n\n0.4.1\n--------------------------------------------------\n*
  Added `hforce`\n* Added an `NFData` instance for `(:*)` and `:|`\n* Added a rule
  to fuse a chain of product updates\n* Added a `Monoid` instance for `TangleT`\n*
  Added `(@==)`\n* `#foo` can now be overloaded as `FieldOptic \"foo\"`\n\n0.4\n---------------------------------------------------\n*
  Added `Data.Extensible.Struct`\n* Changed the representation of `(:*)` to use `SmallArray`\n*
  Removed `(<:*)`. `hhead`, `htail`, `huncons`, `(*++*)`, `htrans`\n* New functions:
  `hfoldrWithIndex`, `hrepeat`, `hrepeatFor`, `haccumMap`,\n  `haccum`, `hpartition`,
  `henumerate`, `hlength`, `hcount`\n* Added various derived instances for `Field`\n*
  Added `liftField`, `liftField2`\n* Added `Wrapper` instances for `Maybe` and `[]`\n*
  Added `>:` as a synonym for `:>`\n* `Data.Extensible.Effect`\n  * Refined the API\n
  \ * Added `Data.Extensible.Effect.Default`\n* Added `Data.Extensible.Tangle`\n*
  Added `record`\n* Type inference aids\n\n0.3.7.1\n----------------------------------------------------\n*
  `pieceAt` for `(:*)` is now index-preserving\n* Removed `sector`, `sectorAt`, `picked`\n\n0.3.7\n-----------------------------------------------------\n*
  Support GHC 8.0\n* Added a `Monoid` instance for `Field`\n* Added `Data.Extensible.Record`\n*
  Added `Enum` and `Bounded` instances for `Proxy :| xs`\n* Removed `Data.Extensible.Union`\n\n0.3.6\n-----------------------------------------------------\n*
  Added `(@:>)`\n* Added `(!-!!)`, `nihility`, `squash`\n\n0.3.5\n-----------------------------------------------------\n*
  Added `Data.Extensible.Effect`\n* Added `decEffects`\n\n0.3.4\n-----------------------------------------------------\n*
  Added `Data.Extensible.Wrapper`\n* Added `itemAt`, `item`, `itemAssoc`\n* Safe Haskell\n*
  Generalized `Field`\n\n0.3.3\n-----------------------------------------------------\n*
  Renamed `sectorAt`, `sector`, `sectorAssoc` to `pieceAt`, `piece`, `pieceAssoc`,
  respectively\n* `picked` is now subsumed by `piece`\n    * `mkField` yields more
  generalized optics\n* Renamed `UnionAt` to `EmbedAt`\n* Removed `clause`; Use `piece
  . _Match`\n* Removed `record`; Use `piece . _K0`\n* Added `htraverseWithIndex`\n*
  Renamed `ord` to `mkMembership`\n* Fixed the `Show` instance of `:|`\n* Added `Variant`\n\n0.3.2\n-----------------------------------------------------\n*
  Added `Associate` class and combinators around it\n* `Data.Extensible.Record` now
  lets values be independent from keys\n    * `mkField` requires 1 argument\n* Added
  `Data.Extensible.Union`, partially taking `elevator`'s functionality\n* Removed
  old `Data.Extensible.Union` and `Data.Extensible.League`\n* Removed `(<?!)`\n\n0.3.1\n-----------------------------------------------------\n*
  Removed `Reifiable`\n* Now `library` yields desired dictionaries\n* Added `remember`\n*
  Added `strike` and `strikeAt`\n\n0.3\n-----------------------------------------------------\n*
  Renamed `generate` to `htabulate`\n* Renamed `generateA` to `hgenerate`\n* Renamed
  `generateFor` to `htabulateFor`\n* Renamed `generateForA` to `hgenerateFor`\n* Renamed
  `htabulate` to `hmapWithIndex`\n* Added `(<@=>)`\n* Added `Comp`\n* Fixed badly-specialized
  `htraverse`\n* Added `hsequence`, `hdistribute`, `hcollect`\n* Added `hindex`\n\n0.2.10\n-----------------------------------------------------\n*
  Optimized `sector` (~2x)\n\n0.2.9\n-----------------------------------------------------\n*
  Renamed `(<?~)` to `(<?!$)`\n* Renamed `(<$?~)` to `(<?!~)`\n* Refactored `Data.Extensible.Dictionary`\n*
  Supported serialization/deserialization of products using `binary`\n\n0.2.8\n-----------------------------------------------------\n*
  Improved performance considerably\n\n0.2.7\n-----------------------------------------------------\n*
  Added `accessing`\n* Added `decFields` and `decFieldsDeriving`\n* Renamed `Position`
  to `Membership`\n\n0.2.6\n-----------------------------------------------------\n*
  Right-associated `(++)`\n* Added `htrans`\n* Added `recordType`\n* Made Eq, Ord,
  Show instances for Position more reasonable\n\n0.2.5\n-----------------------------------------------------\n*
  Added `(<:)`\n* Re-exported `Data.Extensible.Record`, `Data.Extensible.Union`, `Data.Extensible.League`\n*
  Brushed instances up\n* Added `subset`\n* Added `Data.Extensible.Internal.HList`
  and combinators\n\n0.2.4\n------------------------------------------------------\n*
  Corrected the definition of `Half`\n* Added `coinclusion`, `wrench`, `retrench`
  along with `Nullable`\n* Added `htabulate`\n\n0.2.3\n-------------------------------------------------------\n*
  Corrected the behavior of `Generate` and `Forall`\n* Made type errors more readable\n*
  Added `(*++*)`\n* Fixed the accidental miscall of `getUnion`\n\n0.2.2\n--------------------------------------------------------\n*
  Added `recordAt`\n* Added `ord`\n* Re-added `K1`\n* Toggled INLINE pragmas\n\n0.2.1\n--------------------------------------------------------\n*
  Added `hhead` and `htail`\n* Changed the definition of `Union` to use coyoneda style\n\n0.2\n--------------------------------------------------------\n*
  Split modules up\n* Flipped `Position`\n* Added several combinators\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  comonad: -any
  monad-skeleton: ! '>=0.1.2'
  unordered-containers: -any
  text: -any
  constraints: -any
  semigroups: -any
  tagged: -any
  cassava: -any
  ghc-prim: -any
  StateVar: -any
  mtl: -any
  hashable: -any
  transformers: -any
  deepseq: -any
  QuickCheck: -any
  aeson: -any
  template-haskell: -any
  primitive: -any
  profunctors: -any
  vector: -any
all-versions:
- '0.0'
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.2.6'
- '0.2.7'
- '0.2.8'
- '0.2.9'
- '0.2.10'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.7'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.4.6'
- '0.4.7'
- '0.4.7.1'
- '0.4.7.2'
author: Fumiaki Kinoshita
latest: '0.4.7.2'
description-type: markdown
description: ! 'extensible

  ======================


  [![Build Status](https://travis-ci.org/fumieval/extensible.svg?branch=master)](https://travis-ci.org/fumieval/extensible)

  [![Hackage](https://img.shields.io/hackage/v/extensible.svg)](https://hackage.haskell.org/package/extensible)


  This package provides extensible poly-kinded records, variants and effects.


  Several tutorials can be found at [School of Haskell](https://www.schoolofhaskell.com/user/fumieval/extensible).


  Bug reports and contributions are welcome!

'
license-name: BSD3
