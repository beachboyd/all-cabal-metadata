homepage: https://github.com/biocad/uniprot-kb#readme
changelog-type: markdown
hash: 1bece5653d05be24e4e0de6fecc638064540d2806436977fd753c328c1867755
test-bench-deps:
  uniprot-kb: -any
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4.1 && <2.6'
  text: ! '>=0.2 && <1.3'
  attoparsec: -any
  QuickCheck: ! '>=2.9 && <2.12'
  neat-interpolation: ! '>=0.3'
maintainer: pavel@yakovlev.me
synopsis: UniProt-KB format parser
changelog: ! '# Changelog for uniprot-kb


  All notable changes to this project will be documented in this file.


  The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)

  and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).


  ## 0.1.2.0

  * Every record in UniProt-KB can be parsed.

  * Any capital english letter can be an amino acid.

  * Schema was changed a little.

  * Multiple fixes on specification bugs.

  * Evidence is not parsed any more as it''s breaks specification in lots of ways.


  ## 0.1.1.2

  * Empty FT description bugfix


  ## 0.1.1.1

  * `Generic` deriving for all types


  ## 0.1.1.0

  * Back compability lost for SQ section

  * No more DuplicateRecordFields, so it can be built by 7.x

  * Includes and Contains sections of DE tested


  ## 0.1.0.1

  * Small fixes in description fields read

  * Documentation fixes

  * Usage example in README


  ## 0.1.0.0

  * Any UniProt-KB file can be parsed

'
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=0.2 && <1.3'
  attoparsec: ! '>=0.10 && <0.14'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.2.0'
author: Pavel Yakovlev
latest: '0.1.2.0'
description-type: markdown
description: ! "# uniprot-kb\n\n[![Travis](https://img.shields.io/travis/biocad/uniprot-kb.svg)](https://travis-ci.org/biocad/uniprot-kb)\n[![hackage](https://img.shields.io/hackage/v/uniprot-kb.svg)](https://hackage.haskell.org/package/uniprot-kb)\n[![hackage-deps](https://img.shields.io/hackage-deps/v/uniprot-kb.svg)](https://hackage.haskell.org/package/uniprot-kb)\n\nA
  well-typed UniProt file format parser.\n\n## Documentation\n\nTo build Haddock documentation
  run:\n```\n$ stack haddock\n```\n\n## Usage example\n\nYou can use this simple code
  to parse any UniProt file:\n\n``` haskell\nimport           Bio.Uniprot\nimport
  \          Data.Attoparsec.Text (parseOnly)\nimport           Data.Text            (Text)\nimport
  qualified Data.Text.IO         as TIO\nimport           Text.Pretty.Simple   (pPrint)\n\nmain
  :: IO ()\nmain = do\n    uniprot <- TIO.getContents\n    case parseOnly parseRecord
  uniprot of\n      Left err  -> putStrLn \"Error on parse\"\n      Right obj -> pPrint
  obj\n```\n\nSo you can parse any stdin `Text` of UniProt by using `parseRecord`
  function. The result will be presented by\na `Record` datatype:\n``` haskell\ndata
  Record = Record\n  { id   :: ID\n  , ac   :: AC\n  , dt   :: DT\n  , de   :: DE\n
  \ , gn   :: [GN]\n  , os   :: OS\n  , og   :: Maybe OG\n  , oc   :: OC\n  , ox   ::
  Maybe OX\n  , oh   :: [OH]\n  , refs :: [Reference]\n  , cc   :: [CC]\n  , dr   ::
  [DR]\n  , pe   :: PE\n  , kw   :: KW\n  , ft   :: [FT]\n  , sq   :: SQ\n  } deriving
  (Show, Eq, Ord)\n```\n\nYou can run this to test the implementation:\n``` bash\nstack
  runhaskell uniprot.hs < example/LOLA2_DROME.dat\n```\n"
license-name: BSD3
