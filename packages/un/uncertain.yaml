homepage: https://github.com/mstksg/uncertain
changelog-type: markdown
hash: 25752a3ef8e66968ab75dc8ec3c741bcfdb39a46ee2a97de2503fa46e31a478f
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Manipulating numbers with inherent experimental/measurement uncertainty
changelog: ! "Version 0.3.1.0\n===============\n\n<https://github.com/mstksg/uncertain/releases/tag/v0.3.1.0>\n\n*
  \  Added support for *GHC 8.0* by providing pattern synonym type signatures in\n
  \   the proper format.\n*   `(:+/-)` pattern synonym now exported as a \"constructor\"
  with `Uncert`\n*   Generalized the type signatures for `liftCX` functions to work
  for all `a`.\n    Restriction to `Fractional` now occurs only at exit points of
  the `CVar`\n    abstraction.\n*   Removed the redundant constraint on `Functor m`
  for the *MonteCarlo*\n    module's `liftUX` functions.\n\nVersion 0.3.0.0\n===============\n\n<https://github.com/mstksg/uncertain/releases/tag/v0.3.0.0>\n\n*
  \  **(Breaking change)** Moved the top-level modules from *Data* to *Numeric*,\n
  \   to better reflect the nature of the library and to align with the\n    convention
  of other similar libraries.\n\nVersion 0.2.0.0\n===============\n\n<https://github.com/mstksg/uncertain/releases/tag/v0.2.0.0>\n\n*
  \  Initial release, re-written from the unreleased `0.1.0.0` by\n    re-implementing
  error propagation with the [ad][] library.\n\n[ad]: https://hackage.haskell.org/package/ad\n\n"
basic-deps:
  free: ! '>=4'
  mwc-random: ! '>=0.10'
  base: ! '>=4.6 && <5'
  ad: ! '>=4'
  containers: ! '>=0.5'
  base-compat: -any
  transformers: ! '>=0.2'
  primitive: ! '>=0.1'
all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Justin Le
latest: 0.3.1.0
description-type: markdown
description: ! "Uncertain\n=========\n\n[![Build Status](https://travis-ci.org/mstksg/uncertain.svg?branch=master)](https://travis-ci.org/mstksg/uncertain)\n\nProvides
  tools to manipulate numbers with inherent experimental/measurement\nuncertainty,
  and propagates them through functions based on principles from\nstatistics.\n\nDocumentation
  maintained at <https://mstksg.github.io/uncertain>.\n\n## Usage\n\n```haskell\nimport
  Numeric.Uncertain\n```\n\n### Create numbers\n\n```haskell\n7.13 +/- 0.05\n91800
  +/- 100\n12.5 `withVar` 0.36\nexact 7.9512\n81.42 `withPrecision` 4\n7    :: Uncert
  Double\n9.18 :: Uncert Double\nfromSamples [12.5, 12.7, 12.6, 12.6, 12.5]\n```\n\nCan
  be descontructed/analyzed with `:+/-` (pattern synonym/pseudo-constructor\nmatching
  on the mean and standard deviation), `uMean`, `uStd`, `uVar`, etc.\n\n### Manipulate
  with error propagation\n\n```haskell\nghci> let x = 1.52 +/- 0.07\nghci> let y =
  781.4 +/- 0.3\nghci> let z = 1.53e-1 `withPrecision` 3\nghci> cosh x\n2.4 +/- 0.2\nghci>
  exp x / z * sin (y ** z)\n10.9 +/- 0.9\nghci> pi + 3 * logBase x y\n52 +/- 5\n```\n\nPropagates
  uncertainty using second-order multivariate Taylor expansions of\nfunctions, computed
  using the *[ad][]* library.\n\n[ad]: https://hackage.haskell.org/package/ad\n\n####
  Arbitrary numeric functions\n\n```haskell\nghci> liftUF (\\[x,y,z] -> x*y+z)\n             [
  12.2 +/- 0.5\n             , 56 +/- 2\n             , 0.12 +/- 0.08\n             ]\n680
  +/- 40\n```\n\n## Correlated samples\n\nCan propagate uncertainty on complex functions
  take from potentially correlated\nsamples.\n\n```haskell\nghci> import Numeric.Uncertain.Correlated\nghci>
  evalCorr $ do\n        x <- sampleUncert $ 12.5 +/- 0.8\n        y <- sampleUncert
  $ 15.9 +/- 0.5\n        z <- sampleUncert $ 1.52 +/- 0.07\n        let k = y **
  x\n        resolveUncert $ (x+z) * logBase z k\n1200 +/- 200\n```\n\n### \"Interactive\"
  Exploratory Mode\n\n*Correlated* module functionality can be used in *ghci* or `IO`
  or `ST`, for\n\"interactive\" exploration.\n\n```haskell\nghci> x <- sampleUncert
  $ 12.5 +/- 0.8\nghci> y <- sampleUncert $ 15.9 +/- 0.5\nghci> z <- sampleUncert
  $ 1.52 +/- 0.07\nghci> let k = y**x\nghci> resolveUncert $ (x+z) * logBase z k\n1200
  +/- 200\n```\n\n## Monte Carlo-based propagation of uncertainty\n\nProvides a module
  for propagating uncertainty using [Monte Carlo\nsimulations][]\n\n[Monte Carlo simulations]:
  https://en.wikipedia.org/wiki/Monte_Carlo_method\n\n```haskell\nghci> import qualified
  Numeric.Uncertain.MonteCarlo as MC\nghci> import System.Random.MWC\nghci> let x
  = 1.52 +/- 0.07\nghci> let y = 781.4 +/- 0.3\nghci> let z = 1.53e-1 `withPrecision`
  3\nghci> g <- create\nghci> cosh x\n2.4 +/- 0.2\nghci> MC.liftU cosh x g\n2.4 +/-
  0.2\nghci> exp x / z * sin (y ** z)\n10.9 +/- 0.9\nghci> MC.liftU3 (\\a b c -> exp
  a / c * sin (b**c)) x y z g\n10.8 +/- 1.0\nghci> pi + 3 * logBase x y\n52 +/- 5\nghci>
  MC.liftU2 (\\a b -> pi + 3 * logBase a b) x y g\n51 +/- 5\n```\n\n## Comparisons\n\nNote
  that this is very different from other libraries with similar data types\n(like
  from [intervals][] and [rounding][]); these do not attempt to maintain intervals
  or\nsimply digit precisions; they instead are intended to model actual\nexperimental
  and measurement data with their uncertainties, and apply\nfunctions to the data
  with the uncertainties and properly propagating the\nerrors with sound statistical
  principles.\n\n[intervals]: https://hackage.haskell.org/package/intervals\n[rounding]:
  https://hackage.haskell.org/package/rounding\n\nFor a clear example, take\n\n```haskell\n>
  (52 +/- 6) + (39 +/- 4)\n91. +/- 7.\n```\n\nIn a library like [intervals][], this
  would result in `91 +/- 10` (that is, a\nlower bound of 46 + 35 and an upper bound
  of 58 + 43).  However, with\nexperimental data, errors in two independent samples
  tend to \"cancel out\", and\nresult in an overall aggregate uncertainty in the sum
  of approximately 7.\n\n## Copyright\n\nCopyright (c) Justin Le 2016\n"
license-name: BSD-3-Clause
