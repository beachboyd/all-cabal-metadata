homepage: https://github.com/sheyll/unliftio-messagebox#readme
changelog-type: ''
hash: 533cc8c235d6281bd9c9d6d992b0500792238812ab26d16889c9f8cf798694a0
test-bench-deps:
  unliftio: -any
  base: '>=4.14 && <5'
  text: -any
  criterion: -any
  data-default: ==0.7.*
  HUnit: -any
  unliftio-messagebox: -any
  containers: '>=0.5.8 && <0.7'
  atomic-primops: -any
  tasty-quickcheck: -any
  mtl: -any
  unagi-chan: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  tasty-html: -any
  QuickCheck: -any
maintainer: sven.heyll@gmail.com
synopsis: Fast and robust message queues for concurrent processes
changelog: ''
basic-deps:
  unliftio: -any
  base: '>=4.14 && <5'
  text: -any
  data-default: ==0.7.*
  unliftio-messagebox: -any
  containers: '>=0.5.8 && <0.7'
  atomic-primops: -any
  mtl: -any
  unagi-chan: -any
  hashable: -any
  QuickCheck: -any
all-versions:
- 1.0.0
author: Sven Heyll
latest: 1.0.0
description-type: markdown
description: "# Fast and Robust Message Queues for Concurrent Processes\n\n**NOTE:**
  To be able to fully view this README, use the [web page](https://sheyll.github.io/unliftio-messagebox/).\n\nA
  thin wrapper around a subset of `unagi-chan` based on `unliftio`.\n\nThe unit tests
  and benchmarks in this project excercise a subset \nof `unagi-chan`, so hopefully
  the user of this library doesn't\nhave to worry about this.\n\nThis project also
  aims to implicitly verify parts of `unagi-chan`.\n\nThe overall goal is to reduce
  the risk of live and dead locks and \nthread starvation, as well as acceptable performance
  \neven in massively concurrent programs.\n\nAdditionally in \n## Module Structure\n\nThe
  library is contained in modules with names starting with \n**UnliftIO.MessageBox**.\n\n![Module
  Structure](./generated-reports/module-graph/module-graph.png)\n\nAlso the module
  \n`UnliftIO.MessageBox` [(API docs)](./generated-reports/haddock-report/unliftio-messagebox/UnliftIO-MessageBox.html)\n[(Hackage)](http://hackage.haskell.org/package/unliftio-messagebox/docs/UnliftIO-MessageBox.html)\nexposes
  the API, and can be used to import everything.\n\nThe full documentation is either
  [on this page](./generated-reports/haddock-report/unliftio-messagebox/index.html)[(build
  log)](./generated-reports/haddock-report/build.log)\nor on [Hackage](http://hackage.haskell.org/package/unliftio-messagebox).\n\n##
  Benchmarks\n\n* [Single Core Results](./generated-reports/benchmark-report/benchmark-1-CORES.html)\n*
  [Multi Core Results](./generated-reports/benchmark-report/benchmark-ALL-CORES.html)\n\n##
  Unit Tests\n\n* [Test Results](./generated-reports/test-profiling-report/test-result.html)\n*
  [Test Coverage](./generated-reports/test-coverage-report/hpc_index.html)\n### Heap
  Profiling\n\n![Test Heap Profiling Report](./generated-reports/test-profiling-report/unliftio-messagebox-test.svg)\n\n###
  Time Profiling\n\n[Test Profiling Report](./generated-reports/test-profiling-report/unliftio-messagebox-test.prof)\n\n##
  Memory Leak Test \n\nThis is a small application with a 1002 processes, each performing
  a fix amount of \nwork.\n\nWhen the work is done, all processes synchronise before
  starting a new iteration.\nAfter each iteration, the memory usage is queried from
  the GHC runtime \nstatistics.\nThere are 100 iterations like that. \n\nAfter that
  all processes are shutdown, and the process\nstarts all over again, 30 times.\n\nIn
  total 3000 iterations.\n\nIf memory is leaked it should become visible.\n\nThe test
  program is executated with the `+RTS -M400m` option that instructs\nthe runtime
  to limit the available heap to 400MB, so when there is a memory\nleak, the program
  would at some point crash with a heap exhaustion error.\n\n![Memleak Test Heap Profiling
  Report](./generated-reports/memleak-test-report/unliftio-messagebox-memleak-test.svg)\n\nThe
  output is printed into [this log file](./generated-reports/memleak-test-report/test.log).\n"
license-name: BSD-2-Clause
