homepage: http://code.haskell.org/~wren/
changelog-type: text
hash: 6f4e01d9d5dc01db56e1dc9e2380d7d8d17488ab810dd94aea1966ea60aa6200
test-bench-deps: {}
maintainer: wren@community.haskell.org
synopsis: Simple generic unification algorithms.
changelog: ! "0.10.0.1 (2015-05-30):\n    - Moved VERSION to CHANGELOG\n0.10.0 (2015-03-29):\n
  \   - Cleaned up things to compile cleanly for GHC 7.10\n    - Cleaned up deprecation
  warnings re Control.Monad.Error\n    - Control.Monad.EitherK: liberalized Monad
  restriction to\n      Applicative where possible.\n    - Control.Monad.MaybeK: liberalized
  Monad restriction to\n      Applicative where possible.\n    - Control.Unification.Types:
  Completely revamped the old\n      UnificationFailure data type as the new UFailure
  data type\n      and Fallible type class.\n\n0.9.0 (2014-06-03):\n    - Control.Unification.Types:
  changed the fundeps on BindingMonad\n      and RankedBindingMonad so that things
  compile under GHC 7.8.2\n    - Data.Functor.Fixedpoint: eta-expanded RULES to avoid
  GHC >=\n      7.8 warnings about them potentially not firing due to (.)\n      being
  inlined first.\n0.8.1 (2014-05-27):\n    - Control.Unification.Types: added Functor,
  Foldable, and\n      Traversable instances for UnificationFailure. (h/t Graham Rogers)\n0.8.0
  (2012-07-11):\n    - Control.Unification.Types: Changed the type of Unifiable.zipMatch\n0.7.0
  (2012-03-19):\n    - Renamed MutTerm to UTerm (and MutVar to UVar)\n    - Replaced
  the Variable.eqVar method by plain old Eq.(==)\n    - Control.Unification: added
  getFreeVarsAll, applyBindingsAll,\n      freshenAll\n    - Swapped type argument
  order for MutTerm, so that it can be a\n      functor etc. Also changed BindingMonad,
  UnificationFailure,\n      Rank, and RankedBindingMonad for consistency.\n0.6.0
  (2012-02-17):\n    - Removed the phantom type argument for Variables.\n0.5.0 (2011-07-12):\n
  \   - Moved UnificationFailure to Control.Unification.Types\n    - Renamed NonUnifiable
  to TermMismatch\n    - Control.Unification: exposed fullprune, semiprune, occursIn\n
  \   - Control.Unification: added unifyOccurs, subsumes\n    - Control.Unification:
  (re)added symbolic names for binary operators\n0.4.0 (2011-07-07):\n    - Removed
  heterogeneous unification, and rewrote practically everything.\n    - Added semipruning
  instead of full pruning.\n    - Added visited-sets instead of occurs-checks.\n    -
  Added weightedness to path compression (a la union--find).\n    - This is the version
  emailed for the 2011-07-07 talk at McMaster.\n0.3.6 (2011-06-18):\n    - Forked
  from the Dyna2 project.\n"
basic-deps:
  logict: ! '>=0.4'
  base: ==4.*
  containers: -any
  mtl: ! '>=2.0'
all-versions:
- 0.5.0
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.1
- 0.9.0
- 0.10.0
- 0.10.0.1
author: wren gayle romano
latest: 0.10.0.1
description-type: text
description: ! "unification-fd\n==============\n\nThis is a simple package and should
  be easy to install. You should\nbe able to use one of the following standard methods
  to install it.\n\n    -- With cabal-install and without the source:\n    $> cabal
  install unification-fd\n    \n    -- With cabal-install and with the source already:\n
  \   $> cd unification-fd\n    $> cabal install\n    \n    -- Without cabal-install,
  but with the source already:\n    $> cd unification-fd\n    $> runhaskell Setup.hs
  configure --user\n    $> runhaskell Setup.hs build\n    $> runhaskell Setup.hs test\n
  \   $> runhaskell Setup.hs haddock --hyperlink-source\n    $> runhaskell Setup.hs
  copy\n    $> runhaskell Setup.hs register\n\nThe test step is optional and currently
  does nothing. The Haddock\nstep is also optional. If you see some stray lines that
  look like\nthis:\n\n    mkUsageInfo: internal name? t{tv a7XM}\n\nFeel free to ignore
  them. They shouldn't cause any problems, even\nthough they're unsightly. This should
  be fixed in newer versions\nof GHC. For more details, see:\n\n    http://hackage.haskell.org/trac/ghc/ticket/3955\n\nIf
  you get a bunch of type errors about there being no MonadLogic\ninstance for StateT,
  this means that your copy of the logict library\nis not compiled against the same
  mtl that we're using. To fix this,\nupdate logict to use the same mtl.\n\n\nPortability\n===========\n\nAn
  attempt has been made to keep this library as portable as possible,\nbut it does
  rely on some common language extensions (i.e., ones\nimplemented by Hugs as well
  as GHC) as well as a couple which are\nonly known to be supported by GHC. All required
  language extensions\nare:\n\n    Rank2Types\n    MultiParamTypeClasses\n    FunctionalDependencies
  -- Alas, necessary for type inference\n    FlexibleContexts       -- Necessary for
  practical use of MPTCs\n    FlexibleInstances      -- Necessary for practical use
  of MPTCs\n    UndecidableInstances   -- Needed for Show instances due to two-level
  types\n\n----------------------------------------------------------- fin.\n"
license-name: BSD-3-Clause
