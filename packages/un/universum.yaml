homepage: https://github.com/serokell/universum
changelog-type: markdown
hash: 8c9da445b518d85f7f9db5aad30b468467a7ee25e72154adb50a29ddf49f485d
test-bench-deps:
  base: ! '>=4.10.1.0 && <5'
  unordered-containers: ! '>=0.2.8.0'
  text: ! '>=1.2.2.2'
  universum: -any
  criterion: ! '>=1.2.6.0'
  semigroups: ! '>=0.18.3'
  containers: ! '>=0.5.10.2'
  mtl: ! '>=2.2.1'
  hashable: ! '>=1.2.6.1'
  deepseq: ! '>=1.4.3.0'
maintainer: Serokell <hi@serokell.io>
synopsis: Custom prelude used in Serokell
changelog: ! "1.0.2\n=====\n\n* [#91](https://github.com/serokell/universum/issues/91):\n
  \ Change argument order of `foldl'`.\n* [#97](https://github.com/serokell/universum/issues/97):\n
  \ Add `ToPairs` type class with the ability to have list of pairs.\n\n1.0.1\n=====\n\n*
  [#100](https://github.com/serokell/universum/issues/100):\n  Add `bug` function
  = `impureThrow`.\n\n1.0.0\n=====\n\n* [#90](https://github.com/serokell/universum/issues/90):\n
  \ Improve project structure.\n* [#89](https://github.com/serokell/universum/issues/89):\n
  \ Add export of `Universum.Nub` module to `Universum`.\n* Add `listToMaybe` to `Universum.Monad.Reexport`.\n*
  [#81](https://github.com/serokell/universum/issues/81):\n  Make `putText` and `putLText`
  to be versions of `putStr`.\n  Add `putTextLn` and `putLTextLn` -- versions of `putStrLn`.\n*
  [#5](https://github.com/serokell/universum/issues/5):\n  Add safe versions of `head`,
  `tail`, `init`, `last` functions for `NonEmpty` list.\n  Old `head` (which returns
  `Maybe`) is renamed to `safeHead`.\n  Reexports from `safe` are removed.\n* Remove
  `unsnoc` (this function is very slow and shouldn't be used).\n* [#88](https://github.com/serokell/universum/issues/88):\n
  \ Add `HasCallStack =>` to `error` and `undefined` functions.\n* [#58](https://github.com/serokell/universum/issues/58):\n
  \ Make `Element` type family be associated type family.\n  Remove `{-# OVERLAPPABLE
  #-}` instance for `ToList` and `Container`. Add default instances for basic types.\n
  \ Remove `WrappedList` `newtype` because it's not needed anymore.\n  Remove `NontrivialContainer`
  constraint alias.\n* [#56](https://github.com/serokell/universum/issues/56):\n  Make
  `elem` and `notElem` faster for `Set` and `HashSet` by introducing `ElementConstraint`
  associated type family.\n\n0.9.1\n=====\n\n* Change `base` version to be `< 5`.\n\n0.9.0\n=====\n\n*
  [#79](https://github.com/serokell/universum/issues/79):\n  Import '(<>)' from Semigroup,
  not Monoid.\n* Improve travis configartion.\n* [#80](https://github.com/serokell/universum/issues/80):\n
  \ Rename `Container` to `ToList`, `NontrivialContainer` to `Container`.\n  Keep
  `NontrivialContainer` as type alias.\n* Rename `Containers` module to `Container.Class`.\n*
  Move all container-related reexports from `Universum` to `Container.Reexport`.\n*
  Add default implementation of `null` function.\n* Add `WrappedList` newtype with
  instance of `Container`.\n* Improve compile time error messages for disallowed instances.\n\n0.8.0\n=====\n\n*
  [#83](https://github.com/serokell/universum/issues/83):\n  Change the order of types
  in `show` and `print` functions.\n* Move string related reexports and functions
  to `Conv` module.\n* Rename `Conv` module to `String`.\n* Move `print` function
  to `Print` module.\n* [#77](https://github.com/serokell/universum/issues/77):\n
  \ Add `modify'` function to export list.\n\n0.7.1.1\n=======\n\n* [#69](https://github.com/serokell/universum/issues/69):\n
  \ Document `SuperComposition` operator `(...)`.\n\n0.7.1\n=====\n\n* [#68](https://github.com/serokell/universum/issues/68):\n
  \ Separate all 'nub' functions to `Nub` module, add `sortNub` and `unstableNub`
  there.\n* [#54](https://github.com/serokell/universum/issues/54):\n  Reorganize
  .cabal.\n* [#21](https://github.com/serokell/universum/issues/21):\n  Add benchmarks.\n*
  [#65](https://github.com/serokell/universum/issues/65):\n  Use `TypeNats` instead
  of `TypeLits` when possible.\n\n0.7.0\n=====\n\n* [#47](https://github.com/serokell/universum/issues/47):\n
  \ Reexport `put` and `get` for `MonadState`.\n* [#48](https://github.com/serokell/universum/issues/48):\n
  \ Export boxed `Vector` type.\n* [#49](https://github.com/serokell/universum/issues/49):\n
  \ Export `IdentityT` and `runIdentityT`.\n* [#51](https://github.com/serokell/universum/issues/51):\n
  \ Add `fromRight` and `fromLeft` that behave like `fromMaybe` but for `Either`.\n*
  [#52](https://github.com/serokell/universum/issues/52):\n  Add `maybeToMonoid ::
  Monoid m => Maybe m -> m`.\n* Remove `Symbol`-related types for sure.\n* Return
  back seems to be useful function `guardM` removed in `v0.3`.\n* Add `notElem` for
  `NonTrivialContainer`.\n\n0.6.1\n=====\n\n* Fixed version number bug (it had 4 numbers).\n\n0.6.0.0\n=======\n\n*
  [#62](https://github.com/serokell/universum/issues/62):\n  Export exceptions-related
  functions from 'safe-exceptions'.\n\n0.5.1\n=====\n\n* Fix an infinite loop in `decodeUtf8`
  from `Text` to `ByteString.Lazy`.\n\n0.5\n===\n\n* Export `MonadTrans` typeclass.\n*
  Remove `Symbol`-related exports from `GHC.TypeLits`.\n* Remove `SrcLoc` and `Location`
  reexports from `GHC.ExecutionStack`.\n* Add `With` type operator.\n* Add `hashNub`.\n*
  Export strict `StateT` instead of lazy.\n\n0.4.3\n=====\n\n* Assign associativity
  and priority to (...), export typeclass itself.\n\n0.4.2\n=====\n\n* [#25](https://github.com/serokell/universum/issues/25):\n
  \ Add vararg functions composition operator (...).\n* Rewrite `concatMapM` & `concatForM`
  so that they allow traversed\n  and returned-by-function container types differ.\n\n0.4.1\n=====\n\n*
  Reexport `sortWith` from `GHC.Exts`.\n\n0.4\n===\n\n* Add _haddock_ documentation
  with 100% coverage.\n* Rewrite README tutorial.\n* [#37](https://github.com/serokell/universum/issues/37):\n
  \ Add generalized version of `readEither`.\n* [#38](https://github.com/serokell/universum/issues/38):\n
  \ Add `evaluateNF`, `evaluateNF_`, `evaluateWHNF`, `evaluateWHNF_`.\n* [#39](https://github.com/serokell/universum/issues/39):\n
  \ Add lifted versions of `IORef` functions.\n* Remove `foreach`\n* Reexport `(&&&)`
  from `Control.Arrow`.\n* Add lifted version of `readTVarIO`.\n* `interact` and `getContents`
  work with _Lazy Text_.\n* Reexport `MaybeT`, `maybeToExceptT`, `exceptToMaybeT`.\n\n0.3\n===\n\n*
  [#28](https://github.com/serokell/universum/issues/28):\n  Remove `putByteString`
  and `putLByteString`.\n* [#29](https://github.com/serokell/universum/issues/29):\n
  \ Remove `panic`, `FatalError` and `notImplemented`.\n  Rename `NotImplemented`
  into `Undefined`.\n* [#32](https://github.com/serokell/universum/issues/32):\n  Remove
  `orAlt`, `orEmpty`, `liftAA2`, `eitherA`, `purer`, `<<*>>`,\n  `traceIO`, `guardM`,
  `hush`, `tryIO`, `liftM'`, `liftM2'`,\n  `applyN`, `guardedA`,\n  Bifunctor instances
  for tuples of length higher than 2.\n  Generalize `concatMapM`, add `concatForM`
  and operator versions.\n* [#35](https://github.com/serokell/universum/issues/35):\n
  \ Generalize `andM`, `orM`, `allM`, `anyM` over container type.\n\n0.2.2\n=====\n\n*
  [#33](https://github.com/serokell/universum/issues/33):\n  Add `($)` and `Each`
  type operators.\n\n0.2.1\n=====\n\n* [#24](https://github.com/serokell/universum/issues/26):\n
  \ Add `whenNothing`, `whenNothing_`, `whenNothingM`, `whenNothingM_`,\n  `whenLeft`,
  `whenLeftM`, `whenRight`, `whenRightM`,\n  `whenNotNull`, `whenNotNullM`.\n* [#26](https://github.com/serokell/universum/issues/24):\n
  \  Add `usingReader`, `usingReaderT`,\n       `usingState`, `usingStateT`,\n       `executingState`,
  `executingStateT`,\n       `evaluatingState`, `evaluatingStateT`.\n* Remove `maybeToEither`.\n\n0.2\n===\n\n*
  Add `one` (similar to `singleton`).\n* Expose `Symbol` and `Nat` types from `GHC.TypeLits`
  by default.\n* Export `genericLength` and other generic list return functions.\n*
  Rename `msg` to `fatalErrorMessage`.\n* Export `ExceptT`\n* Export `ReaderT`, and
  `StateT` constructors.\n* Export `NonEmpty` type and constructor for Base 4.9 only.\n*
  Export `Data.Semigroup` type and functions for Base 4.9 only.\n* Export `String`.\n\n0.1.13\n======\n\n*
  Add lenses from `microlens`.\n* Add `(<&>)`.\n* Reexport `(&)` from `Data.Function`
  if it's present there instead\n  of always defining our own (this is actually done
  by reexporting it\n  from `Lens.Micro` which does the right thing).\n* Fix a space
  leak in `whenJust`.\n\n0.1.12\n======\n\n* Use custom classes instead of `Foldable`.
  Thanks to this, `length` and similar functions can't anymore be used on tuples or
  `Maybe`, but can be used on e.g. `Text`, `ByteString` and `IntSet`.\n\n* Add `allM`,
  `anyM,` `andM`, `orM`.\n\n* Reexport `fail` and `MonadFail`.\n\n0.1.11\n======\n\n*
  Expose `putByteString` and `putLByteString` monomorphic versions of `putStrLn` functions\n*
  Switch exported `(<>)` to be from `Data.Monoid` instead of Semigroup.\n* Export
  `Hashable`\n\n0.1.10\n======\n\n* Generalize most `IO` functions to `MonadIO`\n*
  Make `die` available for older versions of base\n\n0.1.9\n=====\n\n* Make `sum`
  and `product` strict\n\n0.1.8\n=====\n\n* ``foreach`` for applicative traversals.\n*
  ``hush`` function for error handling.\n* ``tryIO`` function for error handling.\n*
  ``pass`` function for noop applicative branches.\n* Mask ``Handler`` typeclass export.\n*
  Mask ``yield`` function export.\n\n0.1.7\n=====\n\n* Export monadic ``(>>)`` operator
  by default.\n* Add ``traceId`` and ``traceShowId`` functions.\n* Export``reader``
  and ``state``  functions by default.\n* Export lifted ``throwIO`` and ``throwTo``
  functions.\n\n0.1.6\n=====\n\n* Add uncatchable panic exception throwing using Text
  message.\n* Remove ``printf``\n* Remove ``string-conv`` dependency so Stack build
  works without ``extra-deps``.\n* Bring ``Callstack`` machinery in for GHC 8.x.\n*
  Remove ``throw`` and ``assert`` from ``Control.Exception`` exports.\n* Remove ``unsafeShiftL``
  and ``unsafeShiftR`` from ``Data.Bits`` exports.\n* Reexport ``throw`` as ``unsafeThrow``
  via Unsafe module.\n* Hides all Show class functions. Only the Class itself is exported.
  Forbids custom instances that are not GHC derived.\n* Export`` encodeUtf8`` and
  ``decodeUtf8`` functions by default.\n* Adds ``unsnoc`` function.\n\n0.1.5\n=====\n\n*
  Initial release.\n"
basic-deps:
  bytestring: ! '>=0.10.8.2'
  stm: ! '>=2.4.4.1'
  base: ! '>=4.8 && <5'
  unordered-containers: ! '>=0.2.8.0'
  text: ! '>=1.2.2.2'
  safe-exceptions: ! '>=0.1.6.0'
  type-operators: ! '>=0.1.0.4'
  containers: ! '>=0.5.10.2'
  utf8-string: ! '>=1.0.1.1'
  ghc-prim: ! '>=0.5.1.1'
  mtl: ! '>=2.2.1'
  hashable: ! '>=1.2.6.1'
  transformers: ! '>=0.5.2.0'
  text-format: ! '>=0.3.1.1'
  deepseq: ! '>=1.4.3.0'
  microlens-mtl: ! '>=0.1.11.0'
  microlens: ! '>=0.4.8.1'
  vector: ! '>=0.12.0.1'
all-versions:
- '0.1.8'
- '0.1.12'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5'
- '0.5.1'
- '0.5.1.1'
- '0.6.0.0'
- '0.6.1'
- '0.7.0'
- '0.7.1'
- '0.7.1.1'
- '0.8.0'
- '0.9.0'
- '0.9.1'
- '1.0.0'
- '1.0.2'
author: Stephen Diehl, @serokell
latest: '1.0.2'
description-type: markdown
description: ! "Universum\n=========\n\n[![Build Status](https://travis-ci.org/serokell/universum.svg?branch=master)](https://travis-ci.org/serokell/universum)\n[![Hackage](https://img.shields.io/hackage/v/universum.svg)](https://hackage.haskell.org/package/universum)\n[![Stackage
  LTS](http://stackage.org/package/universum/badge/lts)](http://stackage.org/lts/package/universum)\n[![Stackage
  Nightly](http://stackage.org/package/universum/badge/nightly)](http://stackage.org/nightly/package/universum)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA
  custom prelude used in Serokell.\n\nWhat is this?\n-------------\n\nThis README
  contains introduction to `Universum` and a tutorial on how to use it.\n\nStructure
  of this tutorial\n--------------------------\n\nThis tutorial has several parts:\n\n1.
  Philosophy and motivation.\n2. How to use `universum`.\n3. Changes in `Prelude`
  (some gotchas).\n4. Already known things that weren't in `Prelude` brought into
  scope.\n5. New things added.\n\nThis is not a tutorial on _Haskell_, and not even
  a tutorial on each function. For the detailed\ndocumentation of every function with
  examples and usages see\n[_Haddock documentation_](http://hackage.haskell.org/package/universum).\n\nWhy
  another custom Prelude?\n---------------------------\n\n### Motivation\n\nIn [Serokell](https://github.com/serokell/),
  \ we want to be as much productive as possible.\nThat's why we are using [_Haskell_](https://haskell-lang.org/).
  This choice of language implies\nthat we're restricted to use [`Prelude`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Prelude.html):\nimplicit
  import of basic functions, type classes and data types. But the default `Prelude`\n[is
  considered to be not so good](https://news.ycombinator.com/item?id=8002749)\ndue
  to some historical reasons.\n\nThis is why we decided to use a better tool. Hopefully
  _Haskell_ provides us with ability\nto replace default `Prelude` with some alternative.
  All we need to do is to implement\nnew basic set of defaults. But we don't intend
  to implement everything from scratch.\nThere're already plenty of [preludes](https://guide.aelve.com/haskell/alternative-preludes-zr69k1hc).\nAfter
  some hot long discussions our team decided to base our custom prelude on\n[`protolude`](https://github.com/sdiehl/protolude).
  If you're not familiar with it,\nyou can read [a tutorial about `protolude`](http://www.stephendiehl.com/posts/protolude.html).\n\nThe
  next section explains why we have made this choice and what we are willing to do.\nThis
  tutorial doesn't cover the differences from `protolude`. Instead, it explains how
  Universum is different from custom `Prelude`.\n\n### Main goals\n\nWhile creating
  and maintaining a custom prelude, we are pursuing the following goals:\n\n1. Avoid
  all [partial functions](https://www.reddit.com/r/haskell/comments/5n51u3/why_are_partial_functions_as_in_head_tail_bad/).\n
  \  We like [total](http://mathworld.wolfram.com/TotalFunction.html) and exception-free
  functions.\n   You can still use some [_unsafe_](https://github.com/serokell/universum/blob/master/src/Unsafe.hs)\n
  \  functions but they are not exported by default.\n2. Use more efficient [string
  representations](https://www.reddit.com/r/haskell/comments/29jw0s/whats_wrong_with_string/).\n
  \  `String` type is crushingly inefficient. All our functions either try to be polymorphic
  over string\n   types, or use [`Text`](http://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text.html)\n
  \  as the default string type. `String` type alias is still reexported, because
  the community\n   is evolving slowly, some libraries still use `String` type. But
  we recommend to avoid `String`!\n3. Don't reinvent the wheel. We're not trying to
  rebuild whole type hierarchy from scratch,\n   as it's done in [`classy-prelude`](https://github.com/snoyberg/mono-traversable).\n
  \  Instead, we reexport common and well-known things from `base` and some other\n
  \  libraries used in everyday production programming in _Haskell_.\n   > **Note**:
  well, we did end up inventing something new.\n4. Export more useful and commonly
  used functions. [Hello, my name is Dmitry. I was\n   coding _Haskell_ for 3 years
  but still hoogling which module `liftIO` comes from.](https://twitter.com/magnars/status/834683466130345984)\n
  \  Things like `liftIO`, `ReaderT` type, `MVar`-related functions have unambiguous
  names,\n   are used in almost every non-trivial project, and it's really tedious
  to import them\n   manually every time.\n\nUnlike `protolude`, we are:\n\n1. Not
  trying to be as general as possible (thus we don't export much from\n   [`GHC.Generics`](https://github.com/sdiehl/protolude/blob/41710698eedc66fb0bfc5623d3c3a672421fbab5/src/Protolude.hs#L365)).\n2.
  Not trying to maintain every version of `ghc` compiler (only the\n   [latest 3](https://github.com/serokell/universum/blob/b6353285859e9ed3544bddbf55d70237330ad64a/.travis.yml#L15)\n3.
  Trying to make writing production code easier (see\n   [enhancements and fixes](https://github.com/serokell/universum/issues)).\n\nHow
  to use Universum\n----------\n\nOkay, enough philosophy. If you want to just start
  using `universum` and\nexplore it with the help of compiler, set everything up according
  to the instructions below.\n\nDisable the built-in prelude at the top of your file:\n\n```haskell\n{-#
  LANGUAGE NoImplicitPrelude #-}\n```\n\nOr directly in your project `.cabal` file,
  if you want to use in every module by default:\n\n```haskell\ndefault-extensions:
  NoImplicitPrelude\n```\n\nThen add the following import to your modules:\n\n```haskell\nimport
  Universum\n```\n\nIf you're using [Emacs](https://www.gnu.org/software/emacs/),
  you can\n[modify your configs](https://github.com/serokell/universum/issues/8#issuecomment-276444879)\na
  little bit if you don't want to type `import Universum` manually every time.\n\n\nGotchas\n-------\n\n*
  `id` is renamed to `identity` (because it's nice to be able to use `id` as a variable
  name).\n* `head`, `tail`, `last`, `init` work with `NonEmpty a` instead of `[a]`.\n*
  Safe analogue for `head` function: `safeHead :: [a] -> Maybe a`.\n* `undefined`
  triggers a compiler warning, which is probably not what you want. Either use `throwIO`,
  `Except`, or `error`.\n* `map` is `fmap` now.\n* `sortOn` is available without import.
  This function efficiently sorts a list based on some\n  property of its elements
  (e.g. `sortOn length` would sort elements by length).\n* Functions `sum` and `product`
  are strict now, which makes them more efficient.\n* If you try to do something like
  `putStrLn \"hi\"`, you'll get an error message if\n  `OverloadedStrings` is enabled
  – it happens because the compiler doesn't know what\n  type to infer for the string.
  Use `putText` in this case.\n* Since `show` doesn't come from `Show` anymore, you
  can't write `Show` instances easily.\n  Either use autoderived instances or\n  [`Buildable`](https://github.com/serokell/universum/blob/f2ccf8afd862e37ccd204c0ef9efde48a05c2d29/src/Universum.hs#L144).\n*
  You can't call some `Foldable` methods over `Maybe` and some other types.\n  `Foldable`
  generalization is useful but\n  [potentially error-prone](https://www.reddit.com/r/haskell/comments/60r9hu/proposal_suggest_explicit_type_application_for/).\n
  \ Instead we created our own fully compatible with `Foldable`\n  [`Container` type
  class](https://github.com/serokell/universum/blob/b6353285859e9ed3544bddbf55d70237330ad64a/src/Universum/Container/Class.hs#L180)\n
  \ but that restricts the usage of functions like `length` over `Maybe`, `Either`,
  `Identity` and tuples.\n  We're also using _GHC 8_ feature of\n  [custom compile-time
  errors](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#custom-compile-time-errors)\n
  \ to produce\n  [more helpful messages](https://github.com/serokell/universum/blob/54a742c10720f11c739f2d268365d723924b83a9/src/Containers.hs#L474).\n*
  As a consequence of previous point, some functions like `traverse_`, `forM_`, `sequenceA_`,
  etc.\n  are generalized over `Container` type classes.\n* `error` takes `Text`.\n*
  `foldl'` takes a function with its arguments flipped compared with the `base` version.\n\n\nThings
  that you were already using, but now you don't have to import them explicitly\n--------------------------------------------------------------------------\n\n###
  Commonly used libraries\n\nFirst of all, we reexport some generally useful modules:
  `Control.Applicative`,\n`Data.Traversable`, `Data.Monoid`, `Control.DeepSeq`, `Data.List`,
  and lots of others.\nJust remove unneeded imports after importing `Universum` (GHC
  should tell you which ones).\n\nThen, some commonly used types: `Map/HashMap/IntMap`,
  `Set/HashSet/IntSet`, `Seq`, `Text` and `ByteString`\n(as well as synonyms `LText`
  and `LByteString` for lazy versions).\n\n`liftIO` and `MonadIO` are exported by
  default. A lot of functions are generalized to `MonadIO`.\n\n`deepseq` is exported.
  For instance, if you want to force deep evaluation of some value (in IO),\nyou can
  write `evaluateNF a`. WHNF evaluation is possible with `evaluateWHNF a`.\n\nWe also
  reexport big chunks of these libraries: `mtl`, `stm`, `microlens`, `microlens-mtl`.\n\n[`Bifunctor`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Bifunctor.html)\ntype
  class with useful instances is exported.\n\n* `first` and `second` functions apply
  a function to first/second part of a tuple (for tuples).\n* `bimap` takes two functions
  and applies them to first and second parts respectively.\n\n### Text\n\nWe export
  `Text` and `LText`, and some functions work with `Text` instead of `String` –\nspecifically,
  IO functions (`readFile`, `putStrLn`, etc) and `show`. In fact, `show`\nis polymorphic
  and can produce strict or lazy `Text`, `String`, or `ByteString`.\nAlso, `toS` can
  convert any string type to any string type, but you can use `toText`, `toByteString`,
  `toString` functions to convert to any specific type.\n\n### Debugging and `undefined`s\n\n`trace`,
  `traceM`, `traceShow`, etc. are available by default. GHC will warn you\nif you
  accidentally leave them in code, however (same for `undefined`).\n\nWe also have
  `data Undefined = Undefined` (which, too, comes with warnings).\n\n### Exceptions\n\nWe
  use [`safe-exceptions`](https://github.com/fpco/safe-exceptions)\nlibrary for exceptions
  handling. Don't import `Control.Exceptions`\nmodule explicitly. Instead use functionality
  from `safe-exceptions`\nprovided by `universum` or import `Control.Exceptions.Safe`
  module.\n\nWhat's new?\n-----------\n\nFinally, we can move to part describing the
  new cool features we bring with `universum`.\n\n* `uncons` splits a list at the
  first element.\n* `ordNub` and `sortNub` are _O(n log n)_ versions of `nub` (which
  is quadratic)\n  and `hashNub` and `unstableNub` are almost _O(n)_ versions of `nub`.\n*
  `(&)` – reverse application. `x & f & g` instead of `g $ f $ x` is useful sometimes.\n*
  `pretty` and `prettyL` for converting `Buildable` into `Text` (can be used instead
  of `show`).\n* `whenM`, `unlessM`, `ifM`, `guardM` are available and do what you
  expect\n  them to do (e.g. `whenM (doesFileExist \"foo\")`).\n* Very generalized
  version of `concatMapM`, too, is available and does what expected.\n* `readMaybe`
  and `readEither` are like `read` but total and give either\n  `Maybe` or `Either`
  with parse error.\n* `when(Just|Nothing|Left|Right|NotEmpty)[M][_]`\n  let you conditionally
  execute something. Before:\n\n  ```haskell\n  case mbX of\n      Nothing -> return
  ()\n      Just x  -> ... x ...\n  ```\n\n  After:\n\n  ```haskell\n  whenJust mbX
  $ \\x ->\n      ... x ...\n  ```\n\n* `for_` for loops. There's also `forM_` but
  `for_` looks a bit nicer.\n\n  ```haskell\n  for_ [1..10] $ \\i -> do\n      ...\n
  \ ```\n\n* `andM`, `allM`, `anyM`, `orM` are monadic version of corresponding functions
  from `base`.\n* Type operator `$` for writing types like `Maybe $ Either String
  $ Maybe Int`.\n* `Each` type family. So this:\n\n  ```haskell\n  f :: Each [Show,
  Read] [a, b] => a -> b -> String\n  ```\n\n  translates into this:\n\n  ```haskell\n
  \ f :: (Show a, Show b, Read a, Read b) => a -> b -> String\n  ```\n\n* `With` type
  operator. So this:\n\n  ```haskell\n  a :: With [Show, Read] a => a -> a\n  ```\n\n
  \ translates into this:\n\n  ```haskell\n  a :: (Show a, Read a) => a -> a\n  ```\n\n*
  Variadic composition operator `(...)`. So you can write:\n\n  ```haskell\n  ghci>
  (show ... (+)) 1 2\n  \"3\"\n  ghci> show ... 5\n  \"5\"\n  ghci> (null ... zip5)
  [1] [2] [3] [] [5]\n  True\n  ghci> let process = map (+3) ... filter\n  ghci> process
  even [1..5]\n  [5,7]\n  ```\n\n* Conversions between `Either` and `Maybe` like `rightToMaybe`
  and `maybeToLeft`\n  with clear semantic.\n* `using(Reader|State)[T]` functions
  as aliases for `flip run(Reader|State)[T]`.\n* [`One` type class](https://github.com/serokell/universum/blob/master/src/Containers.hs#L473)\n
  \ for creating singleton containers. Even monomorhpic ones like `Text`.\n* `evaluateWHNF`
  and `evaluateNF` functions as clearer and lifted aliases for\n  `evaluate` and `evaluate
  . force`.\n* `ToPairs` type class for data types that can be converted to list of
  pairs.\n\nLicense\n-------\n\nReleased under the MIT License.\nCopyright (c) 2016,
  Stephen Diehl, 2016-2017, Serokell\n"
license-name: MIT
