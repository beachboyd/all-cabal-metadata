homepage: https://github.com/serokell/universum
changelog-type: markdown
hash: 6577e33039ac656a8a7c63e7fb00ba3821ea1657a051e1d37d10bf56fa125f8b
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  tasty-hedgehog: -any
  unordered-containers: -any
  text: -any
  universum: -any
  hedgehog: -any
  doctest: -any
  gauge: -any
  containers: -any
  utf8-string: -any
  tasty: -any
  Glob: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Custom prelude used in Serokell
changelog: ! "1.4.0\n=====\n* [#167](https://github.com/serokell/universum/issues/164):\n
  \ `identity` has been removed.\n\n  _Migration guide:_ use `Universum.id` instead.\n*
  [#177](https://github.com/serokell/universum/issues/177):\n  The `mask_` reexport
  from `safe-exceptions` has been removed.\n\n  _Migration_guide:_ use `Control.Exception.Safe.mask_`
  from `safe-exceptions`\n  instead.\n* [#178](https://github.com/serokell/universum/issues/178):\n
  \ `getArgs` has been removed.\n\n  _Migration guide:_ use `liftIO` directly with
  `System.Environment.getArgs`\n  from base.\n* [#179](https://github.com/serokell/universum/issues/179):\n
  \ `getContents` and `interact` have been removed.\n\n  _Migration guide:_ use `liftIO`
  directly with `Data.Text.Lazy.IO.getContents`\n  and `Data.Text.Lazy.IO.interact`,
  both from the `text` package.\n* [#180](https://github.com/serokell/universum/issues/180):\n
  \ The `Lifted.ST` module has been removed.\n  \n  _Migration guide:_ use `liftIO`
  directly with functions from\n  `Control.Monad.ST` instead.\n* [#181](https://github.com/serokell/universum/issues/181):\n
  \ `list` has removed.\n\n1.3.0\n=====\n\n* [#167](https://github.com/serokell/universum/issues/164):\n
  \ `identity` has been deprecated.\n\n  _Migration guide:_ use `Universum.id` instead.\n*
  [#170](https://github.com/serokell/universum/pull/170):\n  Remove `ElementConstraint`
  from the `Container` class.\n  \n  _Migration guide:_ remove `ElementConstraint`
  from every instance and every type signature.\n* [#174](https://github.com/serokell/universum/issues/174)\n
  \ The `type-operators` dependency has been removed.\n* [#177](https://github.com/serokell/universum/issues/177):\n
  \ The `mask_` reexport from `safe-exceptions` has been deprecated.\n\n  _Migration_guide:_
  use `Control.Exception.Safe.mask_` from `safe-exceptions`\n  instead.\n* [#178](https://github.com/serokell/universum/issues/178):\n
  \ `getArgs` has been deprecated. To be removed in a future version.\n\n  _Migration
  guide:_ use `liftIO` directly with `System.Environment.getArgs`\n  from `base`.\n*
  [#179](https://github.com/serokell/universum/issues/179):\n  `getContents` and `interact`
  have been deprecated.\n\n  _Migration guide:_ use `liftIO` directly with `Data.Text.Lazy.IO.getContents`\n
  \ and `Data.Text.Lazy.IO.interact`, both from the `text` package.\n* [#180](https://github.com/serokell/universum/issues/180):\n
  \ The `Lifted.ST` module has been deprecated. To be removed in a future\n  version.\n
  \ \n  _Migration guide:_ use `liftIO` directly with functions from\n  `Control.Monad.ST`
  instead.\n* [#181](https://github.com/serokell/universum/issues/181):\n  `list`
  has been deprecated. To be removed in a future version.\n\n1.2.0\n=====\n\n* [#159](https://github.com/serokell/universum/issues/159)
  **Breaking change**:\n  Remove `text-format` dependency.\n\n  _Migration guide:_
  import `Buildable` type class either from `text-format` or `formatting` or `fmt`
  library. There is no direct replacement for `pretty` and `prettyL` in popular libraries.
  You can define `prettyL = Data.Text.Lazy.Builder.toLazyText . build` and `pretty
  = Data.Text.Lazy.toStrict` . prettyL`.\n* [#164](https://github.com/serokell/universum/issues/164):\n
  \ Don't reexport `log :: Floating a => a -> a`.\n\n1.1.1\n=====\n\n* [#148](https://github.com/serokell/universum/issues/148):\n
  \ Add `CODEOWNERS` and contributing guide.\n* [#135](https://github.com/serokell/universum/issues/135):\n
  \ Add documentation regarding internal module structure.\n* [#113](https://github.com/serokell/universum/issues/113):\n
  \ Annotate `at` function from `Unsafe` module and `ordNub`\n  function from `Nub`
  module with `liquidhaskell`.\n* [#73](https://github.com/serokell/universum/issues/73):\n
  \ Add more examples to docs and fix warnings where possible.\n* Move reexport of
  `NonEmpty` to `Universum.List` module.\n\n1.1.0\n=====\n\n* [#144](https://github.com/serokell/universum/issues/144):\n
  \ Add `Exc` pattern synonym.\n* [#60](https://github.com/serokell/universum/issues/60):\n
  \ Reexport `Natural` type from `Numeric.Natura` module.\n* [#118](https://github.com/serokell/universum/issues/118):\n
  \ Reexport `Type` from `Data.Kind` module.\n* [#130](https://github.com/serokell/universum/issues/130):\n
  \ Merge `ToList` and `Container` type classes into single type class `Container`.\n*
  [#15](https://github.com/serokell/universum/issues/15):\n  Add `?:` function to
  `Universum.Monad.Maybe`.\n* [#128](https://github.com/serokell/universum/issues/128):\n
  \ Add `Unsafe` module with unsafe functions to works with lists and `Maybe`.\n*
  [#129](https://github.com/serokell/universum/issues/129):\n  Reexport `id`.\n* [#136](https://github.com/serokell/universum/issues/136):\n
  \ Change `foldl'` type back, add `flipfoldl'` instead.\n\n1.0.4.1\n=====\n\n* [#127](https://github.com/serokell/universum/issues/127):\n
  \ Fix `doctest` for `text-1.2.3`.\n\n1.0.4\n=====\n\n* [#53](https://github.com/serokell/universum/issues/53):\n
  \ Add `doctest` to `universum`. Also imporove and fix documentation.\n* [#117](https://github.com/serokell/universum/issues/117):\n
  \ Drop the support of `GHC-8.0.1`.\n* [#104](https://github.com/serokell/universum/issues/104):\n
  \ Reexport `hashWithSalt` from `Data.Hashable`.\n* [#95](https://github.com/serokell/universum/issues/95):\n
  \ Reexport `Compose` from `Data.Functor.Compose`.\n* [#124](https://github.com/serokell/universum/issues/124):\n
  \ Export methods of class `Exception`.\n\n1.0.3\n=====\n\n* [#114](https://github.com/serokell/universum/issues/114):\n
  \ Reexport more functions from `safe-exceptions`.\n\n1.0.2\n=====\n\n* [#91](https://github.com/serokell/universum/issues/91):\n
  \ Change argument order of `foldl'`.\n* [#97](https://github.com/serokell/universum/issues/97):\n
  \ Add `ToPairs` type class with the ability to have list of pairs.\n\n1.0.1\n=====\n\n*
  [#100](https://github.com/serokell/universum/issues/100):\n  Add `bug` function
  = `impureThrow`.\n\n1.0.0\n=====\n\n* [#90](https://github.com/serokell/universum/issues/90):\n
  \ Improve project structure.\n* [#89](https://github.com/serokell/universum/issues/89):\n
  \ Add export of `Universum.Nub` module to `Universum`.\n* Add `listToMaybe` to `Universum.Monad.Reexport`.\n*
  [#81](https://github.com/serokell/universum/issues/81):\n  Make `putText` and `putLText`
  to be versions of `putStr`.\n  Add `putTextLn` and `putLTextLn` -- versions of `putStrLn`.\n*
  [#5](https://github.com/serokell/universum/issues/5):\n  Add safe versions of `head`,
  `tail`, `init`, `last` functions for `NonEmpty` list.\n  Old `head` (which returns
  `Maybe`) is renamed to `safeHead`.\n  Reexports from `safe` are removed.\n* Remove
  `unsnoc` (this function is very slow and shouldn't be used).\n* [#88](https://github.com/serokell/universum/issues/88):\n
  \ Add `HasCallStack =>` to `error` and `undefined` functions.\n* [#58](https://github.com/serokell/universum/issues/58):\n
  \ Make `Element` type family be associated type family.\n  Remove `{-# OVERLAPPABLE
  #-}` instance for `ToList` and `Container`. Add default instances for basic types.\n
  \ Remove `WrappedList` `newtype` because it's not needed anymore.\n  Remove `NontrivialContainer`
  constraint alias.\n* [#56](https://github.com/serokell/universum/issues/56):\n  Make
  `elem` and `notElem` faster for `Set` and `HashSet` by introducing `ElementConstraint`
  associated type family.\n* Remove `Unsafe` module. Though, see issue [#128](https://github.com/serokell/universum/issues/128)\n
  \ for disuccion regarding possible return of this module.\n\n0.9.1\n=====\n\n* Change
  `base` version to be `< 5`.\n\n0.9.0\n=====\n\n* [#79](https://github.com/serokell/universum/issues/79):\n
  \ Import '(<>)' from Semigroup, not Monoid.\n* Improve travis configartion.\n* [#80](https://github.com/serokell/universum/issues/80):\n
  \ Rename `Container` to `ToList`, `NontrivialContainer` to `Container`.\n  Keep
  `NontrivialContainer` as type alias.\n* Rename `Containers` module to `Container.Class`.\n*
  Move all container-related reexports from `Universum` to `Container.Reexport`.\n*
  Add default implementation of `null` function.\n* Add `WrappedList` newtype with
  instance of `Container`.\n* Improve compile time error messages for disallowed instances.\n\n0.8.0\n=====\n\n*
  [#83](https://github.com/serokell/universum/issues/83):\n  Change the order of types
  in `show` and `print` functions.\n* Move string related reexports and functions
  to `Conv` module.\n* Rename `Conv` module to `String`.\n* Move `print` function
  to `Print` module.\n* [#77](https://github.com/serokell/universum/issues/77):\n
  \ Add `modify'` function to export list.\n\n0.7.1.1\n=======\n\n* [#69](https://github.com/serokell/universum/issues/69):\n
  \ Document `SuperComposition` operator `(...)`.\n\n0.7.1\n=====\n\n* [#68](https://github.com/serokell/universum/issues/68):\n
  \ Separate all 'nub' functions to `Nub` module, add `sortNub` and `unstableNub`
  there.\n* [#54](https://github.com/serokell/universum/issues/54):\n  Reorganize
  .cabal.\n* [#21](https://github.com/serokell/universum/issues/21):\n  Add benchmarks.\n*
  [#65](https://github.com/serokell/universum/issues/65):\n  Use `TypeNats` instead
  of `TypeLits` when possible.\n\n0.7.0\n=====\n\n* [#47](https://github.com/serokell/universum/issues/47):\n
  \ Reexport `put` and `get` for `MonadState`.\n* [#48](https://github.com/serokell/universum/issues/48):\n
  \ Export boxed `Vector` type.\n* [#49](https://github.com/serokell/universum/issues/49):\n
  \ Export `IdentityT` and `runIdentityT`.\n* [#51](https://github.com/serokell/universum/issues/51):\n
  \ Add `fromRight` and `fromLeft` that behave like `fromMaybe` but for `Either`.\n*
  [#52](https://github.com/serokell/universum/issues/52):\n  Add `maybeToMonoid ::
  Monoid m => Maybe m -> m`.\n* Remove `Symbol`-related types for sure.\n* Return
  back seems to be useful function `guardM` removed in `v0.3`.\n* Add `notElem` for
  `NonTrivialContainer`.\n\n0.6.1\n=====\n\n* Fixed version number bug (it had 4 numbers).\n\n0.6.0.0\n=======\n\n*
  [#62](https://github.com/serokell/universum/issues/62):\n  Export exceptions-related
  functions from 'safe-exceptions'.\n\n0.5.1\n=====\n\n* Fix an infinite loop in `decodeUtf8`
  from `Text` to `ByteString.Lazy`.\n\n0.5\n===\n\n* Export `MonadTrans` typeclass.\n*
  Remove `Symbol`-related exports from `GHC.TypeLits`.\n* Remove `SrcLoc` and `Location`
  reexports from `GHC.ExecutionStack`.\n* Add `With` type operator.\n* Add `hashNub`.\n*
  Export strict `StateT` instead of lazy.\n\n0.4.3\n=====\n\n* Assign associativity
  and priority to (...), export typeclass itself.\n\n0.4.2\n=====\n\n* [#25](https://github.com/serokell/universum/issues/25):\n
  \ Add vararg functions composition operator (...).\n* Rewrite `concatMapM` & `concatForM`
  so that they allow traversed\n  and returned-by-function container types differ.\n\n0.4.1\n=====\n\n*
  Reexport `sortWith` from `GHC.Exts`.\n\n0.4\n===\n\n* Add _haddock_ documentation
  with 100% coverage.\n* Rewrite README tutorial.\n* [#37](https://github.com/serokell/universum/issues/37):\n
  \ Add generalized version of `readEither`.\n* [#38](https://github.com/serokell/universum/issues/38):\n
  \ Add `evaluateNF`, `evaluateNF_`, `evaluateWHNF`, `evaluateWHNF_`.\n* [#39](https://github.com/serokell/universum/issues/39):\n
  \ Add lifted versions of `IORef` functions.\n* Remove `foreach`\n* Reexport `(&&&)`
  from `Control.Arrow`.\n* Add lifted version of `readTVarIO`.\n* `interact` and `getContents`
  work with _Lazy Text_.\n* Reexport `MaybeT`, `maybeToExceptT`, `exceptToMaybeT`.\n\n0.3\n===\n\n*
  [#28](https://github.com/serokell/universum/issues/28):\n  Remove `putByteString`
  and `putLByteString`.\n* [#29](https://github.com/serokell/universum/issues/29):\n
  \ Remove `panic`, `FatalError` and `notImplemented`.\n  Rename `NotImplemented`
  into `Undefined`.\n* [#32](https://github.com/serokell/universum/issues/32):\n  Remove
  `orAlt`, `orEmpty`, `liftAA2`, `eitherA`, `purer`, `<<*>>`,\n  `traceIO`, `guardM`,
  `hush`, `tryIO`, `liftM'`, `liftM2'`,\n  `applyN`, `guardedA`,\n  Bifunctor instances
  for tuples of length higher than 2.\n  Generalize `concatMapM`, add `concatForM`
  and operator versions.\n* [#35](https://github.com/serokell/universum/issues/35):\n
  \ Generalize `andM`, `orM`, `allM`, `anyM` over container type.\n\n0.2.2\n=====\n\n*
  [#33](https://github.com/serokell/universum/issues/33):\n  Add `($)` and `Each`
  type operators.\n\n0.2.1\n=====\n\n* [#24](https://github.com/serokell/universum/issues/26):\n
  \ Add `whenNothing`, `whenNothing_`, `whenNothingM`, `whenNothingM_`,\n  `whenLeft`,
  `whenLeftM`, `whenRight`, `whenRightM`,\n  `whenNotNull`, `whenNotNullM`.\n* [#26](https://github.com/serokell/universum/issues/24):\n
  \  Add `usingReader`, `usingReaderT`,\n       `usingState`, `usingStateT`,\n       `executingState`,
  `executingStateT`,\n       `evaluatingState`, `evaluatingStateT`.\n* Remove `maybeToEither`.\n\n0.2\n===\n\n*
  Add `one` (similar to `singleton`).\n* Expose `Symbol` and `Nat` types from `GHC.TypeLits`
  by default.\n* Export `genericLength` and other generic list return functions.\n*
  Rename `msg` to `fatalErrorMessage`.\n* Export `ExceptT`\n* Export `ReaderT`, and
  `StateT` constructors.\n* Export `NonEmpty` type and constructor for Base 4.9 only.\n*
  Export `Data.Semigroup` type and functions for Base 4.9 only.\n* Export `String`.\n\n0.1.13\n======\n\n*
  Add lenses from `microlens`.\n* Add `(<&>)`.\n* Reexport `(&)` from `Data.Function`
  if it's present there instead\n  of always defining our own (this is actually done
  by reexporting it\n  from `Lens.Micro` which does the right thing).\n* Fix a space
  leak in `whenJust`.\n\n0.1.12\n======\n\n* Use custom classes instead of `Foldable`.
  Thanks to this, `length` and similar functions can't anymore be used on tuples or
  `Maybe`, but can be used on e.g. `Text`, `ByteString` and `IntSet`.\n\n* Add `allM`,
  `anyM,` `andM`, `orM`.\n\n* Reexport `fail` and `MonadFail`.\n\n0.1.11\n======\n\n*
  Expose `putByteString` and `putLByteString` monomorphic versions of `putStrLn` functions\n*
  Switch exported `(<>)` to be from `Data.Monoid` instead of Semigroup.\n* Export
  `Hashable`\n\n0.1.10\n======\n\n* Generalize most `IO` functions to `MonadIO`\n*
  Make `die` available for older versions of base\n\n0.1.9\n=====\n\n* Make `sum`
  and `product` strict\n\n0.1.8\n=====\n\n* ``foreach`` for applicative traversals.\n*
  ``hush`` function for error handling.\n* ``tryIO`` function for error handling.\n*
  ``pass`` function for noop applicative branches.\n* Mask ``Handler`` typeclass export.\n*
  Mask ``yield`` function export.\n\n0.1.7\n=====\n\n* Export monadic ``(>>)`` operator
  by default.\n* Add ``traceId`` and ``traceShowId`` functions.\n* Export``reader``
  and ``state``  functions by default.\n* Export lifted ``throwIO`` and ``throwTo``
  functions.\n\n0.1.6\n=====\n\n* Add uncatchable panic exception throwing using Text
  message.\n* Remove ``printf``\n* Remove ``string-conv`` dependency so Stack build
  works without ``extra-deps``.\n* Bring ``Callstack`` machinery in for GHC 8.x.\n*
  Remove ``throw`` and ``assert`` from ``Control.Exception`` exports.\n* Remove ``unsafeShiftL``
  and ``unsafeShiftR`` from ``Data.Bits`` exports.\n* Reexport ``throw`` as ``unsafeThrow``
  via Unsafe module.\n* Hides all Show class functions. Only the Class itself is exported.
  Forbids custom instances that are not GHC derived.\n* Export`` encodeUtf8`` and
  ``decodeUtf8`` functions by default.\n* Adds ``unsnoc`` function.\n\n0.1.5\n=====\n\n*
  Initial release.\n"
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.8 && <5'
  unordered-containers: -any
  text: -any
  safe-exceptions: -any
  containers: -any
  utf8-string: -any
  ghc-prim: ! '>=0.4.0.0'
  mtl: -any
  hashable: -any
  transformers: -any
  deepseq: -any
  microlens-mtl: -any
  microlens: -any
  vector: -any
all-versions:
- '1.1.0'
- '1.1.1'
- '1.2.0'
- '1.3.0'
- '1.4.0'
author: Stephen Diehl, @serokell
latest: '1.4.0'
description-type: markdown
description: ! "Universum\n=========\n\n[![Build Status](https://travis-ci.org/serokell/universum.svg?branch=master)](https://travis-ci.org/serokell/universum)\n[![Windows
  build status](https://ci.appveyor.com/api/projects/status/github/serokell/universum?branch=master&svg=true)](https://ci.appveyor.com/project/gromakovsky/universum)\n[![Hackage](https://img.shields.io/hackage/v/universum.svg)](https://hackage.haskell.org/package/universum)\n[![Stackage
  LTS](http://stackage.org/package/universum/badge/lts)](http://stackage.org/lts/package/universum)\n[![Stackage
  Nightly](http://stackage.org/package/universum/badge/nightly)](http://stackage.org/nightly/package/universum)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n`universum`
  is a custom prelude used in @Serokell that has:\n\n1. **Excellent documentation**:
  tutorial, migration guide from `Prelude`,\n   Haddock with examples for (almost)
  every function,\n   all examples are tested with [`doctest`](http://hackage.haskell.org/package/doctest),\n
  \  documenation regarding internal module structure.\n2. `universum`-specific [HLint](http://hackage.haskell.org/package/hlint)
  rules:\n   [`.hlint.yaml`](https://github.com/serokell/universum/blob/master/.hlint.yaml)\n3.
  Only a few LiquidHaskell properties right now, but LiquidHaskell is on Travis\n
  \  CI and other properties are just waiting to be added!\n4. Focus on safety, convenience
  and efficiency.\n\nWhat is this file about?\n------------------------\n\nThis README
  contains introduction to `Universum` and a tutorial on how to use it.\n\nStructure
  of this tutorial\n--------------------------\n\nThis tutorial has several parts:\n\n1.
  [Philosophy and motivation.](#why-another-custom-prelude-)\n2. [How to use `universum`.](#how-to-use-universum-)\n3.
  [Changes in `Prelude` (some gotchas).](#gotchas-)\n4. [Already known things that
  weren't in `Prelude` brought into scope.](#things-that-you-were-already-using-but-now-you-dont-have-to-import-them-explicitly-)\n5.
  [New things added.](#whats-new-)\n6. [Migration guide from `Prelude`.](#migration-guide-from-prelude-)\n\nThis
  is neither a tutorial on _Haskell_ nor tutorial on each function contained in Universum.
  For detailed\ndocumentation of every function together with examples and usage,
  see\n[_Haddock documentation_](http://hackage.haskell.org/package/universum).\n\nWhy
  another custom Prelude? [↑](#structure-of-this-tutorial)\n---------------------------\n\n###
  Motivation\n\nAt [Serokell](https://github.com/serokell/), we strive to be as productive
  as possible. That's why we are using [_Haskell_](https://haskell-lang.org/). This
  choice of language implies\nthat we're restricted to use [`Prelude`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Prelude.html):\nimplicit
  import of basic functions, type classes and data types. Unfortunately, the default
  `Prelude`\n[is considered to be not so good](https://news.ycombinator.com/item?id=8002749)\ndue
  to some historical reasons.\n\nThis is why we decided to use a better tool. Luckily,
  _Haskell_ provides us with the ability\nto replace default `Prelude` with an alternative.
  All we had to do is to implement a\nnew basic set of defaults. There already were
  plenty of [preludes](https://guide.aelve.com/haskell/alternative-preludes-zr69k1hc),\nso
  we didn't plan to implement everything from scratch.\nAfter some long, hot discussions,
  our team decided to base our custom prelude on\n[`protolude`](https://github.com/sdiehl/protolude).
  If you're not familiar with it,\nyou can read [a tutorial about `protolude`](http://www.stephendiehl.com/posts/protolude.html).\n\nThe
  next section explains why we've made this choice and what we are willing to do.\nThis
  tutorial doesn't cover the differences from `protolude`. Instead, it explains how
  Universum is different from regular `Prelude`.\n\n### Main goals\n\nWhile creating
  and maintaining a custom prelude, we are pursuing the following goals:\n\n1. Avoid
  all [partial functions](https://www.reddit.com/r/haskell/comments/5n51u3/why_are_partial_functions_as_in_head_tail_bad/).\n
  \  We like [total](http://mathworld.wolfram.com/TotalFunction.html) and exception-free
  functions.\n   You can still use some unsafe functions from `Universum.Unsafe` module,\n
  \  but they are not exported by default.\n2. Use more efficient [string representations](https://www.reddit.com/r/haskell/comments/29jw0s/whats_wrong_with_string/).\n
  \  `String` type is crushingly inefficient. All our functions either try to be polymorphic
  over string\n   type or use [`Text`](http://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text.html)\n
  \  as the default string type. Because the community is evolving slowly, some libraries
  still use `String` type, so `String` type alias is still reexported. We recommend
  to avoid `String` as much as you can!\n3. Try to not reinvent the wheel. We're not
  trying to rebuild whole type hierarchy from scratch,\n   as it's done in [`classy-prelude`](https://github.com/snoyberg/mono-traversable).\n
  \  Instead, we reexport common and well-known things from `base` and some other\n
  \  libraries that are used in everyday production programming in _Haskell_.\n   >
  **Note**: well, we did end up inventing _some_ new things.\n4. Export more useful
  and commonly used functions. [Hello, my name is Dmitry. I was\n   coding _Haskell_
  for 3 years but still hoogling which module `liftIO` comes from.](https://twitter.com/magnars/status/834683466130345984)\n
  \  Things like `liftIO`, `ReaderT` type, `MVar`-related functions have unambiguous
  names,\n   are used in almost every non-trivial project, and it's really tedious
  to import them\n   manually every time.\n\nUnlike `protolude`, we are:\n\n1. Not
  trying to be as general as possible (thus we don't export much from\n   [`GHC.Generics`](https://github.com/sdiehl/protolude/blob/41710698eedc66fb0bfc5623d3c3a672421fbab5/src/Protolude.hs#L365)).\n2.
  Not trying to maintain every version of `ghc` compiler (but [at least the\n   latest
  3](https://github.com/serokell/universum/blob/b6353285859e9ed3544bddbf55d70237330ad64a/.travis.yml#L15)).\n3.
  Trying to make writing production code easier (see\n   [enhancements and fixes](https://github.com/serokell/universum/issues)).\n\nHow
  to use Universum [↑](#structure-of-this-tutorial)\n--------------------\n\nOkay,
  enough philosophy. If you want to just start using `universum` and\nexplore it with
  the help of compiler, set everything up according to the instructions below.\n\nDisable
  the built-in prelude at the top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude
  #-}\n```\n\nOr directly in your project `.cabal` file, if you want to use in every
  module by default:\n\n```haskell\ndefault-extensions: NoImplicitPrelude\n```\n\nThen
  add the following import to your modules:\n\n```haskell\nimport Universum\n```\n\nIf
  you're using [Emacs](https://www.gnu.org/software/emacs/) and don't want to\ntype
  `import Universum` manually every time, you can\n[modify your configs](https://github.com/serokell/universum/issues/8#issuecomment-276444879)\na
  little bit.\n\nIf you want to get familiar with `universum` internal structure,
  you can just\nread top-level documentation for\n[`Universum`](http://hackage.haskell.org/package/universum/docs/Universum.html)\nmodule.\n\nGotchas
  [↑](#structure-of-this-tutorial)\n-------\n\n* `head`, `tail`, `last`, `init` work
  with `NonEmpty a` instead of `[a]`.\n* Safe analogue for `head` function: `safeHead
  :: [a] -> Maybe a`.\n* `undefined` triggers a compiler warning, which is probably
  not what you want. Either use `throwIO`, `Except`, `error` or `bug`.\n* `map` is
  `fmap` now.\n* Multiple sorting functions are available without imports:\n  + `sortBy
  :: (a -> a -> Ordering) -> [a] -> [a]`: sorts list using given custom comparator.\n
  \ + `sortWith :: Ord b => (a -> b) -> [a] -> [a]`: sorts a list based on some property
  of its elements.\n  + `sortOn :: Ord b => (a -> b) -> [a] -> [a]`: just like `sortWith`,
  but more time-efficient if function is calculated slowly (though less space-efficient).
  So you should write `sortOn length` (would sort elements by length) but `sortWith
  fst` (would sort list of pairs by first element).\n* Functions `sum` and `product`
  are strict now, which makes them more efficient.\n* If you try to do something like
  `putStrLn \"hi\"`, you'll get an error message if\n  `OverloadedStrings` is enabled
  – it happens because the compiler doesn't know what\n  type to infer for the string.
  Use `putTextLn` in this case.\n* Since `show` doesn't come from `Show` anymore,
  you can't write `Show` instances easily.\n* You can't call some `Foldable` methods
  over `Maybe` and some other types.\n  `Foldable` generalization is useful but\n
  \ [potentially error-prone](https://www.reddit.com/r/haskell/comments/60r9hu/proposal_suggest_explicit_type_application_for/).\n
  \ Instead we created our own fully compatible with `Foldable`\n  [`Container` type
  class](https://github.com/serokell/universum/blob/b6353285859e9ed3544bddbf55d70237330ad64a/src/Universum/Container/Class.hs#L180)\n
  \ but that restricts the usage of functions like `length` over `Maybe`, `Either`,
  `Identity` and tuples.\n  We're also using _GHC 8_ feature of\n  [custom compile-time
  errors](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#custom-compile-time-errors)\n
  \ to produce\n  [more helpful messages](https://github.com/serokell/universum/blob/54a742c10720f11c739f2d268365d723924b83a9/src/Containers.hs#L474).\n*
  As a consequence of previous point, some functions like `traverse_`, `forM_`, `sequenceA_`,
  etc.\n  are generalized over `Container` type classes.\n* `error` takes `Text`.\n\n\nThings
  that you were already using, but now you don't have to import them explicitly [↑](#structure-of-this-tutorial)\n------------------------------------------------------------------------------------\n\n###
  Commonly used libraries\n\nFirst of all, we reexport some generally useful modules:
  `Control.Applicative`,\n`Data.Traversable`, `Data.Monoid`, `Control.DeepSeq`, `Data.List`,
  and lots of others.\nJust remove unneeded imports after importing `Universum` (GHC
  should tell you which ones).\n\nThen, some commonly used types: `Map/HashMap/IntMap`,
  `Set/HashSet/IntSet`, `Seq`, `Text` and `ByteString`\n(as well as synonyms `LText`
  and `LByteString` for lazy versions).\n\n`liftIO` and `MonadIO` are exported by
  default. A lot of `IO` functions are generalized to `MonadIO`.\n\n`deepseq` is exported.
  For instance, if you want to force deep evaluation of some value (in IO),\nyou can
  write `evaluateNF a`. WHNF evaluation is possible with `evaluateWHNF a`.\n\nWe also
  reexport big chunks of these libraries: `mtl`, `stm`, `microlens`, `microlens-mtl`.\n\n[`Bifunctor`](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Bifunctor.html)\ntype
  class with useful instances is exported.\n\n* `first` and `second` functions apply
  a function to first/second part of a tuple (for tuples).\n* `bimap` takes two functions
  and applies them to first and second parts respectively.\n\n### Text\n\nWe export
  `Text` and `LText`, and some functions work with `Text` instead of `String` –\nspecifically,
  IO functions (`readFile`, `putStrLn`, etc) and `show`. In fact, `show`\nis polymorphic
  and can produce strict or lazy `Text`, `String`, or `ByteString`.\nAlso, `toText/toLText/toString`
  can convert `Text|LText|String` types to `Text/LText/String`. If you want to convert
  to and from `ByteString` use `encodeUtf8/decodeUtf8` functions.\n\n### Debugging
  and `undefined`s\n\n`trace`, `traceM`, `traceShow`, etc. are available by default.
  GHC will warn you\nif you accidentally leave them in code, however (same for `undefined`).\n\nWe
  also have `data Undefined = Undefined` (which, too, comes with warnings).\n\n###
  Exceptions\n\nWe use [`safe-exceptions`](https://github.com/fpco/safe-exceptions)\nlibrary
  for exceptions handling. Don't import `Control.Exceptions`\nmodule explicitly. Instead
  use functionality from `safe-exceptions`\nprovided by `universum` or import `Control.Exceptions.Safe`
  module.\n\nWhat's new? [↑](#structure-of-this-tutorial)\n-----------\n\nFinally,
  we can move to part describing the new cool features we bring with `universum`.\n\n*
  `uncons` splits a list at the first element.\n* `ordNub` and `sortNub` are _O(n
  log n)_ versions of `nub` (which is quadratic)\n  and `hashNub` and `unstableNub`
  are almost _O(n)_ versions of `nub`.\n* `(&)` – reverse application. `x & f & g`
  instead of `g $ f $ x` is useful sometimes.\n* `whenM`, `unlessM`, `ifM`, `guardM`
  are available and do what you expect\n  them to do (e.g. `whenM (doesFileExist \"foo\")`).\n*
  Very generalized version of `concatMapM`, too, is available and does what expected.\n*
  `readMaybe` and `readEither` are like `read` but total and give either\n  `Maybe`
  or `Either` with parse error.\n* `when(Just|Nothing|Left|Right|NotEmpty)[M][_]`\n
  \ let you conditionally execute something. Before:\n\n  ```haskell\n  case mbX of\n
  \     Nothing -> return ()\n      Just x  -> ... x ...\n  ```\n\n  After:\n\n  ```haskell\n
  \ whenJust mbX $ \\x ->\n      ... x ...\n  ```\n\n* `for_` for loops. There's also
  `forM_` but `for_` looks a bit nicer.\n\n  ```haskell\n  for_ [1..10] $ \\i -> do\n
  \     ...\n  ```\n\n* `andM`, `allM`, `anyM`, `orM` are monadic version of corresponding
  functions from `base`.\n* Type operator `$` for writing types like `Maybe $ Either
  String $ Maybe Int`.\n* `Each` type family. So this:\n\n  ```haskell\n  f :: Each
  [Show, Read] [a, b] => a -> b -> String\n  ```\n\n  translates into this:\n\n  ```haskell\n
  \ f :: (Show a, Show b, Read a, Read b) => a -> b -> String\n  ```\n\n* `With` type
  operator. So this:\n\n  ```haskell\n  a :: With [Show, Read] a => a -> a\n  ```\n\n
  \ translates into this:\n\n  ```haskell\n  a :: (Show a, Read a) => a -> a\n  ```\n\n*
  Variadic composition operator `(...)`. So you can write:\n\n  ```haskell\n  ghci>
  (show ... (+)) 1 2\n  \"3\"\n  ghci> show ... 5\n  \"5\"\n  ghci> (null ... zip5)
  [1] [2] [3] [] [5]\n  True\n  ghci> let process = map (+3) ... filter\n  ghci> process
  even [1..5]\n  [5,7]\n  ```\n\n* Conversions between `Either` and `Maybe` like `rightToMaybe`
  and `maybeToLeft`\n  with clear semantic.\n* `using(Reader|State)[T]` functions
  as aliases for `flip run(Reader|State)[T]`.\n* [`One` type class](https://github.com/serokell/universum/blob/master/src/Containers.hs#L473)\n
  \ for creating singleton containers. Even monomorhpic ones like `Text`.\n* `evaluateWHNF`
  and `evaluateNF` functions as clearer and lifted aliases for\n  `evaluate` and `evaluate
  . force`.\n* `ToPairs` type class for data types that can be converted to list of
  pairs (like `Map` or `HashMap` or `IntMap`).\n\nMigration guide from Prelude [↑](#structure-of-this-tutorial)\n----------------------------\n\nIn
  order to replace default `Prelude` with `universum` you should start with instructions
  given in\n[how to use universum](https://github.com/serokell/universum#how-to-use-universum-)
  section.\n\nThis section describes what you need to change to make your code compile
  with `universum`.\n\n1. Enable `-XOverloadedStrings` and `-XTypeFamilies` extension
  by default for your project.\n2. Since `head`, `tail`, `last` and `init` work for
  `NonEmpty` you should\n   refactor your code in one of the multiple ways described
  below:\n   1. Change `[a]` to `NonEmpty a` where it makes sense.\n   2. Use functions
  which return `Maybe`. They can be implemented using `nonEmpty` function. Like `head
  <$> nonEmpty l`.\n       + `head <$> nonEmpty l` is `safeHead l`\n       + `tail`
  is `drop 1`. It's almost never a good idea to use `tail` from `Prelude`.\n   3.
  Add `import qualified Universum.Unsafe as Unsafe` and replace function with qualified
  usage.\n3. If you use `fromJust` or `!!` you should use them from `import qualified
  Universum.Unsafe as Unsafe`.\n4. Derive or implement `Container` instances for your
  data types which implement\n   `Foldable` instances. This can be done in a single
  line because `Container`\n   type class automatically derives from `Foldable`.\n5.
  `Container` type class from `universum` replaces `Foldable` and doesn't have\n   instances
  for `Maybe a`, `(a, b)`, `Identity a` and `Either a b`. If you use\n   `foldr` or
  `forM_` or similar for something like `Maybe a` you should replace\n   usages of
  such function with monomorhpic alternatives:\n   * `Maybe`\n     + `(?:)          ::
  Maybe a -> a -> a`\n     + `fromMaybe     :: a -> Maybe a -> a`\n     + `maybeToList
  \  :: Maybe a -> [a]`\n     + `maybeToMonoid :: Monoid m => Maybe m -> m`\n     +
  `maybe         :: b -> (a -> b) -> Maybe a -> b`\n     + `whenJust      :: Applicative
  f => Maybe a -> (a -> f ()) -> f ()`\n     + `whenJustM     :: Monad m => m (Maybe
  a) -> (a -> m ()) -> m ()`\n\n   * `Either`\n     + `fromLeft   :: a -> Either a
  b -> a`\n     + `fromRight  :: b -> Either a b -> b`\n     + `either     :: (a ->
  c) -> (b -> c) -> Either a b -> c`\n     + `whenRight  :: Applicative f => Either
  l r -> (r -> f ()) -> f ()`\n     + `whenRightM :: Monad m => m (Either l r) ->
  (r -> m ()) -> m ()`\n\n6. If you have types like `foo :: Foldable f => f a -> a
  -> a` you should chose one of the following:\n   + `Right`: Modify types for `Container`
  like `foo :: (Container t, Element t ~ a) => t -> a -> a`.\n   + `Left`: Import
  `Data.Foldable` module `qualified` and use everything `Foldable`-related qualified.\n7.
  Forget about `String` type.\n   + Replace `putStr` and `putStrLn` with `putText`
  and `putTextLn`.\n   + Replace `(++)` with `(<>)` for `String`-like types.\n   +
  Try to use [`fmt`](http://hackage.haskell.org/package/fmt) library if you need to
  construct messages.\n   + Use `toText/toLText/toString` functions to convert to
  `Text/LazyText/String` types.\n   + Use `encodeUtf8/decodeUtf8` to convert to/from
  `ByteString`.\n8. Run `hlint` using `.hlint.yaml` file from `universum` package
  to cleanup code and imports.\n\nProjects that use Universum [↑](#structure-of-this-tutorial)\n---------------------------\n\nPlease
  submit a PR if you are using Universum!\n\n| λ |\n|---|\n| [cardano-report-server](https://github.com/input-output-hk/cardano-report-server)
  |\n| [cardano-sl](https://github.com/input-output-hk/cardano-sl) |\n| [importify](https://github.com/serokell/importify)
  |\n| [log-warper](https://github.com/serokell/log-warper) |\n| [orgstat](https://github.com/volhovm/orgstat)
  |\n| [tintin](https://github.com/theam/tintin) |\n| [require](https://theam.github.io/require/)
  |\n| [ariadne](https://github.com/serokell/ariadne) |\n"
license-name: MIT
