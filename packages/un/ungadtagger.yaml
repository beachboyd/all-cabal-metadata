homepage: http://github.com/andriyp/ungadtagger
changelog-type: ''
hash: 60054b1d7a0d252a6f14b0dc69e9c54a883860d4884bc483f6be0e30ac8a0c66
test-bench-deps: {}
maintainer: Andriy Polishchuk <andriy.s.polishchuk@gmail.com>
synopsis: Abstract GADTs from typelevel tags
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- 1.0.0
author: Andriy Polishchuk
latest: 1.0.0
description-type: haddock
description: ! 'UnGADTagger encapsulates abstraction-from-GADT-tag workflow by utilizing
  existentials, rank2-types and kind polymorphism.


  An example:


  > # LANGUAGE GADTs, DataKinds, KindSignatures, LambdaCase #

  >

  > import Data.GADT.Untagged

  >

  > data Tag = A | B

  >

  > data Gadt :: Tag -> * where

  >   ConA :: String   -> Gadt A

  >   ConB :: [Gadt A] -> Gadt B

  >   ConC :: Integer  -> Gadt B

  >

  > foo :: something -> [Untagged Gadt] -> String

  > foo _ = quux

  >   where

  >     quux  = concat . map baz

  >     baz x = match x $ \case

  >       ConA s  -> s

  >       ConB xs -> quux (map untag xs)

  >       ConC i  -> show i

  >

  > test = foo "some cfg for e.g." (xs ++ ys)

  >   where

  >     xs = map untag [ConA "A1..", ConA "A2.."]

  >     ys = map untag [ConB [ConA "A3.."], ConC 456]

  >

  > -- > "A1..A2..A3..456"

'
license-name: BSD-3-Clause
