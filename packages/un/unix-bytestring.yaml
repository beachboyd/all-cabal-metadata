homepage: http://code.haskell.org/~wren/
changelog-type: text
hash: 1370234c04dcc32f68f17b2ef12caec489e0ce955e2a91b809ab7091b70e7df1
test-bench-deps: {}
maintainer: wren@community.haskell.org
synopsis: Unix/Posix-specific functions for ByteStrings.
changelog: ! "0.3.7.3 (2015-05-30):\n    - Moved VERSION to CHANGELOG\n0.3.7 (2013-08-08):\n
  \   - System.Posix.IO.ByteString: Corrected a bug in fdSeek/tryFdSeek where the
  return value was always 0 on largefile i686 systems due to the underlying C function
  being (undocumentedly) implemented as a macrocall. This had been fixed in unix-2.6.0.1,
  and I've just backported their fix (replacing the previous unix-2.4.2.0 implementation).
  Cf:\n    * <https://github.com/ghc/packages-base/blob/master/System/Posix/Internals.hs#L414>\n
  \   * <https://github.com/ghc/packages-unix/blob/master/System/Posix/IO/Common.hsc#L306>\n0.3.6
  (2013-05-29):\n    - System.Posix.Types.Iovec: adjusted unsafeForeignPtrToPtr for
  GHC 7.8\n0.3.5.4 (2012-08-23):\n    - System.Posix.IO.ByteString: adjusted some
  imports for GHC 7.6\n    - Removed the custom Setup.hs, for compatibility with GHC
  7.6\n0.3.5.3 (2012-02-21):\n    - Foreign.C.Error.Safe: changed (Num a) to (Eq a,
  Num a) for GHC 7.4\n0.3.5 (2011-06-29):\n    - System.Posix.IO.ByteString: added
  fdSeek, tryFdSeek.\n    - Foreign.C.Error.Safe: added.\n0.3.4.1 (2011-04-03):\n
  \   - LICENSE: corrected license for the fdReadBuf and fdWriteBuf functions\n0.3.4
  (2011-03-26):\n    - System.Posix.IO.ByteString.Lazy: Fixed functions to check (<=0)
  instead of (==0)\n0.3.3 (2011-03-26):\n    - System.Posix.IO.ByteString: added tryFdReadBuf,
  tryFdReadvBuf, tryFdPreadBuf, tryFdWriteBuf, tryFdWritevBuf, tryFdPwriteBuf\n0.3.2.1
  (2011-03-20):\n    - Changed the cabal category label to System\n    - Uploaded
  to Hackage\n0.3.2 (2011-03-17):\n    - Removed the dependency on @unix@.\n0.3.1
  (2011-03-07):\n    - System.Posix.IO.ByteString: added fdPreads\n    - System.Posix.IO.ByteString.Lazy:
  added fdPread\n0.3.0 (2011-03-07):\n    - System.Posix.IO.ByteString: added fdReadvBuf,
  exposed fdWritevBuf\n    - System.Posix.IO.ByteString: added fdReadBuf and fdWriteBuf
  for compatibility with older versions of the @unix@ package\n    - System.Posix.IO.ByteString:
  added fdPread, fdPreadBuf\n    - System.Posix.IO.ByteString: added fdPwrite, fdPwriteBuf\n\n0.2.1
  (2011-03-06):\n    - Added a custom build in order to define __HADDOCK__ when appropriate.\n
  \   - System.Posix.IO.ByteString: added fdReads\n0.2.0 (2011-03-05):\n    - Corrected
  the specifications (writev etc is XPG4.2, not POSIX)\n    - Added some extra #includes
  for legacy reasons\n    - Changed stability to experimental.\n    - Added new module
  System.Posix.Types.Iovec\n    - System.Posix.IO.ByteString.Lazy: added fdWritev\n
  \   - System.Posix.IO.ByteString.Lazy: changed fdWrite to fdWrites\n    - System.Posix.IO.ByteString:
  added fdWrites and fdWritev\n    - Renamed package to unix-bytestring\n\n0.1.0 (2011-02-27):\n
  \   - Moved Data.ByteString.Posix to System.Posix.IO.ByteString\n    - Moved Data.ByteString.Lazy.Posix
  to System.Posix.IO.ByteString.Lazy\n\n0.0.2 (2011-02-20):\n    - Fixed stack overflow
  possibility in Lazy.fdWrite\n0.0.1 (2010-11-10):\n    - Added lazy variants\n0.0.0
  (2010-11-10):\n    - Initial version forked from Posta-IPC\n"
basic-deps:
  bytestring: ! '>=0.9.1.5'
  base: ! '>=4.1 && <5'
all-versions:
- 0.3.2
- 0.3.2.1
- 0.3.3
- 0.3.4
- 0.3.4.1
- 0.3.5
- 0.3.5.3
- 0.3.5.4
- 0.3.6
- 0.3.7
- 0.3.7.2
- 0.3.7.3
author: wren gayle romano
latest: 0.3.7.3
description-type: text
description: ! "unix-bytestring\n===============\n\nIn general, this is a simple package
  and should be easy to install.\nYou must have hsc2hs installed in order to compile
  the package (but\nthen you probably already do). With the cabal-install program
  you\ncan just do:\n\n    $> cabal install unix-bytestring\n\nOr if you don't have
  cabal-install, then you can use the Cabal library:\n\n    $> runhaskell Setup.hs
  configure\n    $> runhaskell Setup.hs build\n    $> runhaskell Setup.hs test\n    $>
  runhaskell Setup.hs haddock --hyperlink-source\n    $> runhaskell Setup.hs copy\n
  \   $> runhaskell Setup.hs register\n\nThe test step is optional and currently does
  nothing. The Haddock\nstep is also optional.\n\n\nFFI Problems\n============\n\nThe
  unix-bytestring package uses standard POSIX header files\n<sys/types.h>, <sys/uio.h>,
  and <unistd.h>. If Cabal has difficulty\nfinding these files or reports another
  error, be sure your include\npath variables are correct. If the problem persists,
  contact the\nmaintainer.\n\n\nBuilding for GHC (6.8 and above)\n================================\n\nNothing
  special to mention. \n\n\nBuilding for Hugs (September 2006)\n==================================\n\nI
  haven't actually compiled this for Hugs because I don't have a\nnew enough version
  of Cabal for it, but I don't forsee any difficulties.\nIf you do compile this for
  Hugs, let the maintainer know how it\nwent.\n\nWhen compiling for Hugs, see the
  following bugs for Cabal's interaction\nwith ffihugs. These bugs do not currently
  affect this package, but\nthis notice is here in case they affect future versions.
  For more\ndetails and a minimal regression suite, see:\n\n    <http://community.haskell.org/~wren/cabal-ffihugstest/>\n\n\n(1)
  <http://hackage.haskell.org/trac/hackage/ticket/526>\nOptions in hugs-options aren't
  passed through to ffihugs, most\nimportantly -98 and +o are the ones we'd like to
  pass. For enabling\nthe +o flag Hugs-Sept06 does not honor:\n    pragma    {-# LANGUAGE
  OverlappingInstances #-}\n    pragma    {-# OPTIONS_HUGS +o #-}\n    cabal     extensions:
  OverlappingInstances\nAnd the -98 flag has similar issues. Therefore this is a real\nproblem.\n\nImmediate
  solution: The options set in hugs-options should be passed\nto ffihugs as well.
  As of Cabal 1.6 they are not passed (verified\nby Duncan Coutts). The two programs
  accept all the same options,\nso this is valid.\n\nIdeal solution: Based on the
  extensions field, Cabal should\nautomatically determine whether -98 and +o need
  to be enabled (for\nboth hugs and ffihugs).\n\n\n(2) <http://hackage.haskell.org/trac/hackage/ticket/527>\nIf
  CPP is being used in conjunction with FFI, then cpp/cpphs is not\ncalled before
  ffihugs is called. Thus, users must pass an -F flag\nto ffihugs in order to declare
  a code filter (and must pass all\ncpp-options to -F manually). For example:\n\n
  \   --ffihugs-option=-F'cpp -P -traditional -D__HUGS__ -D__BLAH__'\n\nThis requires
  duplicating the build specifications, which defeats\nthe point of Cabal. Also it
  leads to tricky issues about ensuring\nthe proper level of quoting/escaping. (e.g.
  using the plural,\n--ffihugs-options=..., breaks it. Wrapping the -F'cpp...' in
  double\nquotes breaks it.)\n\n-----------------------------------------------------------
  fin.\n"
license-name: BSD-3-Clause
