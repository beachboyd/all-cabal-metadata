homepage: https://github.com/fpco/unliftio/tree/master/unliftio#readme
changelog-type: markdown
hash: ec362271f50126c63a92723b5c7586d1801ae2ed766514ebcf1f045e9554285f
test-bench-deps:
  unliftio: -any
  unix: -any
  stm: ! '>=2.4.3'
  base: ! '>=4.7 && <5'
  hspec: -any
  filepath: -any
  async: ! '>2.1.1'
  unliftio-core: ! '>=0.1.1.0'
  transformers: -any
  deepseq: -any
  directory: -any
maintainer: michael@snoyman.com
synopsis: The MonadUnliftIO typeclass for unlifting monads to IO (batteries included)
changelog: ! "## 0.2.3.0\n\n* Use more generalized `withRunInIO` in `unliftio-core-0.1.1.0`\n*
  Add `getMonotonicTime` function\n\n## 0.2.2.0\n\n* Add `pureTry` and `pureTryDeep`\n\n##
  0.2.1.0\n\n* Add `UnliftIO.STM`\n* Add a number of functions to `UnliftIO.IO`\n\n##
  0.2.0.0\n\n* Remove `monad-logger` instances (moved into `monad-logger` itself in\n
  \ release `0.3.26`)\n* Remove `resourcet` instances and `UnliftIO.Resource` (moved
  into `resourcet`\n  itself in release `1.1.10`)\n\n## 0.1.1.0\n\n* Doc improvements.\n*
  Fix `UnliftIO.Chan` type signatures [#3](https://github.com/fpco/unliftio/pull/3).\n*
  Add `UnliftIO.Concurrent` module [#5](https://github.com/fpco/unliftio/pull/5).\n\n##
  0.1.0.0\n\n* Initial release.\n"
basic-deps:
  unix: -any
  stm: ! '>=2.4.3'
  base: ! '>=4.7 && <5'
  filepath: -any
  async: ! '>2.1.1'
  unliftio-core: ! '>=0.1.1.0'
  transformers: -any
  deepseq: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.4.0'
author: Michael Snoyman, Francesco Mazzoli
latest: '0.2.4.0'
description-type: markdown
description: ! "# unliftio\n\n[![Travis Build Status](https://travis-ci.org/fpco/unliftio.svg?branch=master)](https://travis-ci.org/fpco/unliftio)\n[![AppVeyor
  Build status](https://ci.appveyor.com/api/projects/status/sprg5nlyh0codcpv?svg=true)](https://ci.appveyor.com/project/snoyberg/unliftio)\n\n\nProvides
  the core `MonadUnliftIO` typeclass, a number of common\ninstances, and a collection
  of common functions working with it.  Not\nsure what the `MonadUnliftIO` typeclass
  is all about? Read on!\n\n__NOTE__ This library is young, and will likely undergo
  some serious changes\nover time. It's also very lightly tested. That said: the core
  concept of\n`MonadUnliftIO` has been refined for years and is pretty solid, and
  even though\nthe code here is lightly tested, the vast majority of it is simply
  apply\n`withUnliftIO` to existing functionality. Caveat emptor and all that.\n\n##
  Quickstart\n\n* Replace imports like `Control.Exception` with\n  `UnliftIO.Exception`.
  Yay, your `catch` and `finally` are more\n  powerful and safer!\n* Similar with
  `Control.Concurrent.Async` with `UnliftIO.Async`\n* Or go all in and import `UnliftIO`\n*
  Naming conflicts: let `unliftio` win\n* Drop the deps on `monad-control`, `lifted-base`,
  and `exceptions`\n* Compilation failures? You may have just avoided subtle runtime
  bugs\n\nSound like magic? It's not. Keep reading!\n\n## Unlifting in 2 minutes\n\nLet's
  say I have a function:\n\n```haskell\nreadFile :: FilePath -> IO ByteString\n```\n\nBut
  I'm writing code inside a function that uses `ReaderT Env IO`, not\njust plain `IO`.
  How can I call my `readFile` function in that\ncontext? One way is to manually unwrap
  the `ReaderT` data constructor:\n\n```haskell\nmyReadFile :: FilePath -> ReaderT
  Env IO ByteString\nmyReadFile fp = ReaderT $ \\_env -> readFile fp\n```\n\nBut having
  to do this regularly is tedious, and ties our code to a\nspecific monad transformer
  stack. Instead, many of us would use\n`MonadIO`:\n\n```haskell\nmyReadFile :: MonadIO
  m => FilePath -> m ByteString\nmyReadFile = liftIO . readFile\n```\n\nBut now let's
  play with a different function:\n\n```haskell\nwithBinaryFile :: FilePath -> IOMode
  -> (Handle -> IO a) -> IO a\n```\n\nWe want a function with signature:\n\n```haskell\nmyWithBinaryFile\n
  \   :: FilePath\n    -> IOMode\n    -> (Handle -> ReaderT Env IO a)\n    -> ReaderT
  Env IO a\n```\n\nIf I squint hard enough, I can accomplish this directly with the\n`ReaderT`
  constructor via:\n\n```haskell\nmyWithBinaryFile fp mode inner =\n  ReaderT $ \\env
  -> withBinaryFile\n    fp\n    mode\n    (\\h -> runReaderT (inner h) env)\n```\n\nI
  dare you to try to and accomplish this with `MonadIO` and\n`liftIO`. It simply can't
  be done. (If you're looking for the\ntechnical reason, it's because `IO` appears
  in\n[negative/argument position](https://www.fpcomplete.com/blog/2016/11/covariance-contravariance)\nin
  `withBinaryFile`.)\n\nHowever, with `MonadUnliftIO`, this is possible:\n\n```haskell\nimport
  Control.Monad.IO.Unlift\n\nmyWithBinaryFile\n    :: MonadUnliftIO m\n    => FilePath\n
  \   -> IOMode\n    -> (Handle -> m a)\n    -> m a\nmyWithBinaryFile fp mode inner
  =\n  withRunInIO $ \\runInIO ->\n  withBinaryFile\n    fp\n    mode\n    (\\h ->
  runInIO (inner h))\n```\n\nThat's it, you now know the entire basis of this library.\n\n##
  How common is this problem?\n\nThis pops up in a number of places. Some examples:\n\n*
  Proper exception handling, with functions like `bracket`, `catch`,\n  and `finally`\n*
  Working with `MVar`s via `modifyMVar` and similar\n* Using the `timeout` function\n*
  Installing callback handlers (e.g., do you want to do\n  [logging](https://www.stackage.org/package/monad-logger)
  in a signal\n  handler?).\n\nThis also pops up when working with libraries which
  are monomorphic on\n`IO`, even if they could be written more extensibly.\n\n## Examples\n\nReading
  through the codebase here is likely the best example to see\nhow to use `MonadUnliftIO`
  in practice. And for many cases, you can\nsimply add the `MonadUnliftIO` constraint
  and then use the\npre-unlifted versions of functions (like\n`UnliftIO.Exception.catch`).
  But ultimately, you'll probably want to\nuse the typeclass directly. The type class
  has only one method --\n`askUnliftIO`:\n\n```haskell\nnewtype UnliftIO m = UnliftIO
  { unliftIO :: forall a. m a -> IO a }\n\nclass MonadIO m => MonadUnliftIO m where\n
  \ askUnliftIO :: m (UnliftIO m)\n```\n\n`askUnliftIO` gives us a function to run
  arbitrary computation in `m`\nin `IO`. Thus the \"unlift\": it's like `liftIO`,
  but the other way around.\n\nHere are some sample typeclass instances:\n\n```haskell\ninstance
  MonadUnliftIO IO where\n  askUnliftIO = return (UnliftIO id)\ninstance MonadUnliftIO
  m => MonadUnliftIO (IdentityT m) where\n  askUnliftIO = IdentityT $\n                withUnliftIO
  $ \\u ->\n                return (UnliftIO (unliftIO u . runIdentityT))\ninstance
  MonadUnliftIO m => MonadUnliftIO (ReaderT r m) where\n  askUnliftIO = ReaderT $
  \\r ->\n                withUnliftIO $ \\u ->\n                return (UnliftIO
  (unliftIO u . flip runReaderT r))\n```\n\nNote that:\n\n* The `IO` instance does
  not actually do any lifting or unlifting, and\n  therefore it can use `id`\n* `IdentityT`
  is essentially just wrapping/unwrapping its data\n  constructor, and then recursively
  calling `withUnliftIO` on the\n  underlying monad.\n* `ReaderT` is just like `IdentityT`,
  but it captures the reader\n  environment when starting.\n\nWe can use `askUnliftIO`
  to unlift a function:\n\n```haskell\ntimeout :: MonadUnliftIO m => Int -> m a ->
  m (Maybe a)\ntimeout x y = do\n  u <- askUnliftIO\n  System.Timeout.timeout x $
  unliftIO u y\n```\n\nor more concisely using `withRunIO`:\n\n```haskell\ntimeout
  :: MonadUnliftIO m => Int -> m a -> m (Maybe a)\ntimeout x y = withRunInIO $ \\run
  -> System.Timeout.timeout x $ run y\n```\n\nThis is a common pattern: use `withRunInIO`
  to capture a run function,\nand then call the original function with the user-supplied
  arguments,\napplying `run` as necessary. `withRunIO` takes care of invoking\n`unliftIO`
  for us.\n\nWe can also use the run function with different types due to\n`withRunInIO`
  being higher-rank polymorphic:\n\n```haskell\nrace :: MonadUnliftIO m => m a ->
  m b -> m (Either a b)\nrace a b = withRunInIO $ \\run -> A.race (run a) (run b)\n```\n\nAnd
  finally, a more complex usage, when unlifting the `mask`\nfunction. This function
  needs to unlift values to be passed into the\n`restore` function, and then `liftIO`
  the result of the `restore`\nfunction.\n\n```haskell\nmask :: MonadUnliftIO m =>
  ((forall a. m a -> m a) -> m b) -> m b\nmask f = withRunInIO $ \\run -> Control.Exception.mask
  $ \\restore ->\n  run $ f $ liftIO . restore . run\n```\n\n## Limitations\n\nNot
  all monads which can be an instance of `MonadIO` can be instances\nof `MonadUnliftIO`,
  due to the `MonadUnliftIO` laws (described in the\nHaddocks for the typeclass).
  This prevents instances for a number of\nclasses of transformers:\n\n* Transformers
  using continuations (e.g., `ContT`, `ConduitM`, `Pipe`)\n* Transformers with some
  monadic state (e.g., `StateT`, `WriterT`)\n* Transformers with multiple exit points
  (e.g., `ExceptT` and its ilk)\n\nIn fact, there are two specific classes of transformers
  that this\napproach does work for:\n\n* Transformers with no context at all (e.g.,
  `IdentityT`, `NoLoggingT`)\n* Transformers with a context but no state (e.g., `ReaderT`,
  `LoggingT`)\n\nThis may sound restrictive, but this restriction is fully\nintentional.
  Trying to unlift actions in stateful monads leads to\nunpredictable behavior. For
  a long and exhaustive example of this, see\n[A Tale of Two Brackets](https://www.fpcomplete.com/blog/2017/06/tale-of-two-brackets),\nwhich
  was a large motivation for writing this library.\n\n## Comparison to other approaches\n\nYou
  may be thinking \"Haven't I seen a way to do `catch` in `StateT`?\"\nYou almost
  certainly have. Let's compare this approach with\nalternatives. (For an older but
  more thorough rundown of the options,\nsee\n[Exceptions and monad transformers](http://www.yesodweb.com/blog/2014/06/exceptions-transformers).)\n\nThere
  are really two approaches to this problem:\n\n* Use a set of typeclasses for the
  specific functionality we care\n  about. This is the approach taken by the `exceptions`
  package with\n  `MonadThrow`, `MonadCatch`, and `MonadMask`. (Earlier approaches\n
  \ include `MonadCatchIO-mtl` and `MonadCatchIO-transformers`.)\n* Define a generic
  typeclass that allows any control structure to be\n  unlifted. This is the approach
  taken by the `monad-control`\n  package. (Earlier approaches include `monad-peel`
  and `neither`.)\n\nThe first style gives extra functionality in allowing instances
  that\nhave nothing to do with runtime exceptions (e.g., a `MonadCatch`\ninstance
  for `Either`). This is arguably a good thing. The second\nstyle gives extra functionality
  in allowing more operations to be\nunlifted (like threading primitives, not supported
  by the `exceptions`\npackage).\n\nAnother distinction within the generic typeclass
  family is whether we\nunlift to just `IO`, or to arbitrary base monads. For those
  familiar,\nthis is the distinction between the `MonadIO` and `MonadBase`\ntypeclasses.\n\nThis
  package's main objection to all of the above approaches is that\nthey work for too
  many monads, and provide difficult-to-predict\nbehavior for a number of them (arguably:
  plain wrong behavior). For\nexample, in `lifted-base` (built on top of `monad-control`),
  the\n`finally` operation will discard mutated state coming from the cleanup\naction,
  which is usually not what people expect. `exceptions` has\n_different_ behavior
  here, which is arguably better. But we're arguing\nhere that we should disallow
  all such ambiguity at the type level.\n\nSo comparing to other approaches:\n\n###
  monad-unlift\n\nThrowing this one out there now: the `monad-unlift` library is built\non
  top of `monad-control`, and uses fairly sophisticated type level\nfeatures to restrict
  it to only the safe subset of monads. The same\napproach is taken by `Control.Concurrent.Async.Lifted.Safe`
  in the\n`lifted-async` package. Two problems with this:\n\n* The complicated type
  level functionality can confuse GHC in some\n  cases, making it difficult to get
  code to compile.\n* We don't have an ecosystem of functions like `lifted-base` built
  on\n  top of it, making it likely people will revert to the less safe\n  cousin
  functions.\n\n### monad-control\n\nThe main contention until now is that unlifting
  in a transformer like\n`StateT` is unsafe. This is not universally true: if only
  one action\nis being unlifted, no ambiguity exists. So, for example, `try :: IO
  a\n-> IO (Either e a)` can safely be unlifted in `StateT`, while `finally\n:: IO
  a -> IO b -> IO a` cannot.\n\n`monad-control` allows us to unlift both styles. In
  theory, we could\nwrite a variant of `lifted-base` that never does state discards,
  and\nlet `try` be more general than `finally`. In other words, this is an\nadvantage
  of `monad-control` over `MonadUnliftIO`. We've avoided\nproviding any such extra
  typeclass in this package though, for two\nreasons:\n\n* `MonadUnliftIO` is a simple
  typeclass, easy to explain. We don't\n  want to complicated matters (`MonadBaseControl`
  is a notoriously\n  difficult to understand typeclass). This simplicity\n  is captured
  by the laws for `MonadUnliftIO`, which make the\n  behavior of the run functions
  close to that of the already familiar\n  `lift` and `liftIO`.\n* Having this kind
  of split would be confusing in user code, when\n  suddenly `finally` is not available
  to us. We would rather encourage\n  [good practices](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern)\n
  \ from the beginning.\n\nAnother distinction is that `monad-control` uses the `MonadBase`\nstyle,
  allowing unlifting to arbitrary base monads. In this package,\nwe've elected to
  go with `MonadIO` style. This limits what we can do\n(e.g., no unlifting to `STM`),
  but we went this way because:\n\n* In practice, we've found that the vast majority
  of cases are dealing\n  with `IO`\n* The split in the ecosystem between constraints
  like `MonadBase IO`\n  and `MonadIO` leads to significant confusion, and `MonadIO`
  is by\n  far the more common constraints (with the typeclass existing in\n  `base`)\n\n###
  exceptions\n\nOne thing we lose by leaving the `exceptions` approach is the ability\nto
  model both pure and side-effecting (via `IO`) monads with a single\nparadigm. For
  example, it can be pretty convenient to have\n`MonadThrow` constraints for parsing
  functions, which will either\nreturn an `Either` value or throw a runtime exception.
  That said,\nthere are detractors of that approach:\n\n* You lose type information
  about which exception was thrown\n* There is ambiguity about _how_ the exception
  was returned in a\n  constraint like `(MonadIO m, MonadThrow m`)\n\nThe latter could
  be addressed by defining a law such as `throwM =\nliftIO . throwIO`. However, we've
  decided in this library to go the\nroute of encouraging `Either` return values for
  pure functions, and\nusing runtime exceptions in `IO` otherwise. (You're of course
  free to\nalso return `IO (Either e a)`.)\n\nBy losing `MonadCatch`, we lose the
  ability to define a generic way to\ncatch exceptions in continuation based monads
  (such as\n`ConduitM`). Our argument here is that those monads can freely provide\ntheir
  own catching functions. And in practice, long before the\n`MonadCatch` typeclass
  existed, `conduit` provided a `catchC`\nfunction.\n\nIn exchange for the `MonadThrow`
  typeclass, we provide helper\nfunctions to convert `Either` values to runtime exceptions
  in this\npackage. And the `MonadMask` typeclass is now replaced fully by\n`MonadUnliftIO`,
  which like the `monad-control` case limits which\nmonads we can be working with.\n\n##
  Async exception safety\n\nThe `safe-exceptions` package builds on top of the `exceptions`\npackage
  and provides intelligent behavior for dealing with\nasynchronous exceptions, a common
  pitfall. This library provides a set\nof exception handling functions with the same
  async exception behavior\nas that library. You can consider this library a drop-in
  replacement\nfor `safe-exceptions`. In the future, we may reimplement\n`safe-exceptions`
  to use `MonadUnliftIO` instead of `MonadCatch` and\n`MonadMask`.\n\n## Package split\n\nThe
  `unliftio-core` package provides just the typeclass with minimal\ndependencies (just
  `base` and `transformers`). If you're writing a\nlibrary, we recommend depending
  on that package to provide your\ninstances. The `unliftio` package is a \"batteries
  loaded\" library\nproviding a plethora of pre-unlifted helper functions. It's a
  good\nchoice for importing, or even for use in a custom prelude.\n\n## Orphans\n\nThe
  `unliftio` package currently provides orphan instances for types\nfrom the `resourcet`
  and `monad-logger` packages. This is not intended\nas a long-term solution; once
  `unliftio` is deemed more stable, the\nplan is to move those instances into the
  respective libraries and\nremove the dependency on them here.\n\nIf there are other
  temporary orphans that should be added, please\nbring it up in the issue tracker
  or send a PR, but we'll need to be\nselective about adding dependencies.\n\n## Future
  questions\n\n* Should we extend the set of functions exposed in `UnliftIO.IO` to
  include\n  things like `hSeek`?\n* Are there other libraries that deserve to be
  unlifted here?\n"
license-name: MIT
