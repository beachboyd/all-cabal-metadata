homepage: http://github.com/harendra-kumar/unicode-transforms
changelog-type: markdown
hash: 8bde4cf60f3a303a77de5f4463b78ab71b5bde183d5cac99df7cc065f23b0d69
test-bench-deps:
  split: ! '>=0.1 && <0.3'
  path: ! '>=0.0.0 && <0.7'
  base: ! '>=4.7 && <5'
  unicode-transforms: -any
  text: ! '>=1.1.1 && <1.3'
  filepath: ! '>=1.0 && <2'
  gauge: ! '>=0.2.0 && <0.3'
  getopt-generics: ! '>=0.11 && <0.14'
  optparse-applicative: ! '>=0.0.1 && <0.15'
  deepseq: ! '>=1.1.0 && <1.5'
  QuickCheck: ! '>=2.1 && <2.14'
  path-io: ! '>=0.1.0 && <1.5'
maintainer: harendra.kumar@gmail.com
synopsis: Unicode normalization
changelog: |
  ## 0.3.6

  * Update to Unicode version 12.1.0
  * Update Quickcheck dependency version bounds
  * Test with GHC 8.6.5

  ## 0.3.5

  * Update dependency version bounds
  * Test with GHC 8.6.2

  ## 0.3.4

  * GHC 8.4.1 support

  ## 0.3.3

  * GHC 8.2.1 support

  ## 0.3.2

  * Work around a GHC/LLVM issue for ARM

  ## 0.3.1

  * Update dependency versions

  ## 0.3.0

  * Support Unicode version 9.0

  ## 0.2.1

  * Improve speed and resource hog during compilation

  ## 0.2.0

  * Support Unicode version 8.0
  * Switch to pure Haskell implementation

  ## 0.1.0.1

  * Initial release based on utf8proc C implementation
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.7 && <5'
  text: ! '>=1.1.1 && <1.3'
  bitarray: ! '>=0.0.1 && <0.1'
all-versions:
- 0.1.0.1
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
author: Harendra Kumar
latest: 0.3.6
description-type: markdown
description: |
  # Unicode Transforms

  Fast Unicode 12.1.0 normalization in Haskell (NFC, NFKC, NFD, NFKD).

  ## What is normalization?

  Unicode characters with adornments (e.g. Á) can be represented in two different
  forms, as a single composed character (U+00C1 = Á) or as multiple decomposed
  characters (U+0041(A) U+0301( ́ ) = Á). They are differently encoded byte
  sequences but for humans they have exactly the same visual appearance.

  A regular byte comparison may tell that two strings are different even though
  they might be equivalent. We need to convert both the strings in a
  [`normalized`](http://unicode.org/reports/tr15/) form using the [Unicode
  Character Database](http://www.unicode.org/Public/UCD/latest/) before we can
  compare them for equivalence. For example:
  ```
  >> import Data.Text.Normalize
  >> normalize NFC "\193" == normalize NFC "\65\769"
  True
  ```

  ## Contributing
  Please use https://github.com/harendra-kumar/unicode-transforms to raise
  issues, or send pull requests.
license-name: BSD-3-Clause
