homepage: http://github.com/cirquit/UTFTConverter
changelog-type: ''
hash: 0cb16ad4a4a632d3b710f42d85f4d96cbf1906a52a413e253a24c032c42f67e7
test-bench-deps:
  JuicyPixels: ! '>=3.2 && <3.3'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <4.9'
  time: ! '>=1.4 && <1.6'
  hspec: ==2.1.*
  filepath: ! '>=1.3 && <1.5'
  UTFTConverter: ==0.1.*
  directory: ! '>=1.2 && <1.3'
maintainer: Alexander Isenko <alex.isenko@protonmail.com>
synopsis: Processing popular picture formats into .c or .raw format in RGB565
changelog: ''
basic-deps:
  JuicyPixels: ==3.2.*
  bytestring: ==0.10.*
  image-type: ! '>=0.1.0.0'
  base: ! '>=4.7 && <4.9'
  time: ! '>=1.4 && <1.6'
  filepath: ! '>=1.3 && <1.5'
  UTFTConverter: ==0.1.*
  directory: ==1.2.*
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Alexander Isenko
latest: 0.1.0.1
description-type: markdown
description: ! "# UTFTConverter\n\nThis is my take at an offline converter from the
  below defined formats to `.c` or `.raw` format.\n\nI will try to make the tool as
  identical as possible to the corresponding tool at [RinkyDink](http://www.rinkydinkelectronics.com/library.php?id=51).\n\n##
  Usage:\n\n  ```\n  ./UTFTConverter <filespec> /c|r [/o <path>] [/t AVR|ARM|PIC32]\n\n
  \ <filespec>:  File(s) to convert\n  parameters: /c            - Create output as
  .c array files\n              /r            - Create output as .raw files\n              /o
  <path>     - Set the output directory to <path>\\n\n              /t <platform>
  - Select target plaform\n                              AVR   : Most Arduinos, Bobuion\n
  \                             ARM   : Arduino Due, Teensy, TI CC3200 LaunchPad\n
  \                             PIC32 : All chipKit boards\\n\n\n  You must specify
  either /c or /r. All other parameters are optional.\n  If /o is ommited the current
  directory will be used for output.\n  If /t is ommited the target platform will
  be set to AVR.\n  ```\n\n## Differences to the Windows tool:\n\n  * You can specifiy
  as many files as you want, not only a directory (`mydir/*.jpg` still works, the
  shell does all the work for you)\n  * If you specify a target platform while converting
  to `.raw` the platform will not be printed\n  * If you specify a non-existing directory
  as target, it will be created\n  * The length of the array is NOT preceded by `0x`\n
  \ * You can use the flags in any order you want\n  * This tool will check the files
  via magic bytes\n\n## Binaries\n\n  * precompiled binary for Ubuntu distributions
  in `bin/UTFTConverter_u` (compiled on Linux Mint 17)\n  * precompiled binary for
  Windows in `bin/UTFTConverter_w.exe` (compiled on Windows 7)\n\n## Installation
  via cabal:\n\n**Step 1**: Install the Glasgow Haskell Compiler and `cabal` OR the
  Haskell packaging tool\n\n#### For Ubuntu distributions:\n  * `sudo apt-get install
  ghc`\n  * download the `cabal-install.tar.gz` from [cabal](http://hackage.haskell.org/package/cabal-install)\n
  \ * unpack the `.tar.gz file`, the cabal-install folder should include a `bootstrap.sh`\n
  \ * run `./bootstrap.sh`\n\n#### For any operation system:\n  * Follow the instructions
  for your operation system on [Haskell Platform](http://haskell.org/platform)\n\n\n**Step
  2**: When you have `ghc` and `cabal` OR the Haskell Platform installed:\n\n####
  If you want the library AND the binary (the easier way):\n  * run `cabal install
  UTFTConverter`\n  * the executable is now at `~/.cabal/bin/UTFTConverter`\n\n####
  If you want to build it by hand:\n  * download the JuicyPixels library - `cabal
  install JuicyPixels` | `stack install \n  * download the git repository - `git clone
  http://github.com/cirquit/UTFTConverter`\n  * run `make` and the binary is in the
  same directory OR\n  * run `cabal install` and the binary is in `/dist/build/` and
  in your home directory under `~/.cabal/bin/UTFTConverter` OR\n  * run `stack build
  && stack install` and the binary is somewhere in your `.stack-work/`\n\n\n## Installation
  via stack:\n\n * Install stack [Official guide](https://github.com/commercialhaskell/stack/blob/master/doc/GUIDE.md)
  / [My simplified guide](https://github.com/cirquit/ffp-lib)\n * open your shell
  and type `stack setup`\n * after that `stack install UTFTConverter`\n * look up
  the messages where your executable lies\n\n#### To do:\n\n  * maybe add resizing
  with a basic linear algorithm\n  * I'm planning to make a simple API that you can
  start locally which accepts any below defined formats and responses with the parsed
  `.raw` file. (another project)\n\n#### About:\n\nWhile working on a streaming project
  on the Arduino, I needed to convert `.jpg's` to the `.c` or `.raw` format on the
  fly and send them to the Arduino. Unfortunately, the tools that were included in
  the corresponding UTFT library were compiled for Windows and there was no public
  API to do so. That's why I thought it would be a nice first project, that some people
  could benefit from.\n"
license-name: MIT
