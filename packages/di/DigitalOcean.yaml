homepage: ''
changelog-type: ''
hash: ce8ed5469aa40aa7697e8b839d0b55813abcefb1a2515b04cb8d00162a765807
test-bench-deps:
  base: -any
  hspec: ! '>=2.0'
  text: -any
  DigitalOcean: -any
  lens: -any
  mtl: -any
maintainer: lclarkmichalek@gmail.com
synopsis: A client library for the DigitalOcean API
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: -any
  base: ! '>=4.7 && <4.8'
  unordered-containers: -any
  text: ! '>=1.2.0.3 && <1.3'
  wreq: -any
  containers: -any
  lens: -any
  mtl: -any
  transformers: -any
  aeson: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Laurie Clark-Michalek
latest: 0.1.1.0
description-type: markdown
description: ! "DigitalOcean\n============\n\nA Haskell Digital Ocean API.\n\nExposes
  a lens based interface onto the Digital Ocean API. Fairly feature\ncomplete.\n\nError
  Handling & IO Monads\n--------------------------\n\nInstead of enforcing a monad
  to return, all functions that do IO and stuff have a\ntype something along the lines
  of:\n\n    getSSHKeys :: (Error e, MonadError e m, MonadIO m) => Config -> m [SSHKey]\n\nTranslated
  to human, this just means that the monad `m` that is returned can\n1) encapsulate
  IO, and 2) represent an error, of type `e`. This is useful if you\nwant to use `ExceptT`
  or something similarly fun to represent your errors.\nHowever, for simple use, you
  will be relived to hear that `m` may be the plain\nold `IO` monad, which will represent
  its errors by throwing `IOException`\nexceptions.\n\nThis means, despite the confusing
  type signature, we may write things such as:\n\n    main = do\n      auth <- fmap
  head getArgs -- Get the auth from the cmd line\n      keys <- getSSHKeys . Config
  . pack $ auth -- Get the ssh keys\n      putStrLn . show $ keys -- And display them\n\nSee
  the ./examples directory for further usage\n\nTODO:\n-----\n\n* Pagination\n* Tests\n*
  HTTP session reuse\n"
license-name: AGPL-3.0-only
