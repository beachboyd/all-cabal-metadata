homepage: https://github.com/llllllllll/Math.Diophantine
changelog-type: ''
hash: 76edd719d055b77901b7db598fca7aedee2716baa1b47295466efbc5027e242c
test-bench-deps: {}
maintainer: Joe Jevnik <joejev@gmail.com>
synopsis: A quadratic diophantine equation solving library.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  array: ! '>=0.5.0.0'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Joe Jevnik
latest: 0.2.1.0
description-type: markdown
description: ! "Math.Diophantine\n==============\n\nA quadratic diophantine equation
  solving library for haskell.\n\n\nOverview:\n---------\n\nThis library is designed
  to solve for equations in the form of:\n\n    ax^2 + bxy + cy^2 + dx + ey + f =
  0\n\nThroughout the library, the variables (a,b,c,d,e,f) will always refer to these\ncoefficients.
  This library will also use the alias:\n\n    type Z = Integer\n\nto shorten the
  type declerations of the data types and functions.\n\n\nInstallation:\n-------------\n\nTo
  install the library, just use cabal along with the provided install files.\n\n\nUse:\n----\n\nimport
  the library with:\n\n    import module Math.Diophantine\n\nThe most import function
  of this library is `solve :: Equation -> Either\nSolveError Solution`.\nThe types
  of equations that this library can solve are defined by the different\ninstances
  of `Equation`:\n\n- `GeneralEquation Z Z Z Z Z Z` - where the six Integers coincide
  with the six\n\tcoefficients.\n- `LinearEquation Z Z Z` - where the 3 integers are
  d, e, and f.\n- `SimpleHyperbolicEquation Z Z Z Z` - where the 3 integers are b,
  d, e, and\n\tf.\n- `ElipticalEquation Z Z Z Z Z Z` -  where the six Integers coincide
  with the\n\tsix coefficients.\n- `ParabolicEquation Z Z Z Z Z Z` - where the six
  Integers coincide with the\n\tsix coefficients.\n- `HyperbolicEquation Z Z Z Z Z
  Z` -  where the six Integers coincide with the\n  six coefficients.\n\nFor most
  cases, one will want to call solve with a GeneralEquation. A\nGeneralEquation is
  used when one does not know the type of equation before hand,\nor wants to take
  advantage of the libraries ability to detirmine what kind of\nform it fits best.
  One can call `specializeEquation` to convert a\nGeneralEquation into the best specialized
  equation that it matches. This\nfunction is called within solve, so one can pass
  any type of function to solve.\nThe specific functions will try to match to a GeneralEquation
  if they can;\nhowever, they will throw an error if they cannot. The error behavior
  exists only\nbecause these functions should only be called directly if and only
  if you know\nat compile time that this function will only ever recieve the proper
  form. One\nmay want to use these directly for a speed increase, or to clarify a
  section of\ncode. The solve* functions will return a Solution. Solutions are as
  follows:\n\n- `ZxZ` - ZxZ is the cartesian product of Z and Z, or the set of all
  pairs of\n  integers. This Solution denotes cases where all pairs will satisfy your\n
  \ equation, such as 0x + 0y = 0.\n- `NoSolutions` - This Solution denotes that for
  all (x,y) in Z cross Z,\n  no pair satisfies the equation.\n- `SolutionSet [(Z,Z)]`
  - This Solution denotes that for all pairs (x,y) in this\n  set, they will satisfy
  the given equation.\n\n\nThere is also a `readEquation :: String -> Either ParseError
  Equation` and\n`solveString :: String -> Either SolveError Solution` for parsing
  equations out\nof strings. This will do some basic simplification of the equation.\n\n\nTODO:\n-----\n\n-
  Finish the implementation of solveHyperbolic\n"
license-name: GPL-2.0-only
