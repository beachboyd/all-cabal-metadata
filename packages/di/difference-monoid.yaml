homepage: https://github.com/oisdk/difference-monoid#readme
changelog-type: markdown
hash: ffe3451263d7dee42b1bc26a6bac0c132589e69371669b600d773ebf4ce10f01
test-bench-deps:
  semigroupoids: -any
  groups: -any
  base: ! '>=4.7 && <5'
  comonad: -any
  adjunctions: -any
  distributive: -any
  hedgehog: -any
  doctest: -any
  containers: -any
  hedgehog-checkers: -any
  difference-monoid: -any
  deepseq: -any
  QuickCheck: -any
maintainer: mail@doisinkidney.com
synopsis: ''
changelog: ! '# Changelog for difference-monoid


  ## Unreleased changes

'
basic-deps:
  semigroupoids: -any
  groups: -any
  base: ! '>=4.7 && <5'
  comonad: -any
  adjunctions: -any
  distributive: -any
  deepseq: -any
all-versions:
- 0.1.0.0
author: Donnacha OisÃ­n Kidney
latest: 0.1.0.0
description-type: markdown
description: ! "# difference-monoid\n\nThis package provides the Difference Monoid,
  which adds subtraction to\narbitrary monoids.\n\nThis has a number of uses:\n\n*
  `Diff (Product a)` will give you a type similar to\nData.Ratio. Here, the \"subtraction\"
  operation is division. For\nexample:\n\n    ```haskell\n    >>> (1 :-: 2) <> (3
  :-: 4) :: Diff (Product Int)\n    Product {getProduct = 3} :-: Product {getProduct
  = 8}\n    ```\n\n* In a similar vein, `Diff (Sum a)` will add subtraction\nto a
  numeric type:\n\n    ```haskell\n    >>> runDiff (-) (diff 2 <> diff 3 <> invert
  (diff 4)) :: Sum Natural\n    Sum {getSum = 1}\n    ```\n\n    This will let you
  work with nonnegative types, where you need some\n    form of subtraction (for,
  e.g., differences, hence the name), and\n    you only want to check for underflow
  once.\n\n* Using the above example, in particular, we get a monoid for averages:\n\n
  \   ```haskell\n    >>> import Data.Function (on)\n    >>> let avg = runDiff ((%)
  `on` getProduct.getSum) . foldMap (fmap Sum . diff . Product)\n    >>> avg [1,4,3,2,5]\n
  \   3 % 1\n    ```\n\nThe Monoid and Semigroup laws hold in a pretty\nstraightforward
  way, provided the underlying type also follows those\nlaws.\n\nFor the Group laws,
  the underlying type must be a\ncancellative semigroup.\n\nA cancellative semigroup
  is one where\n\n* `a <> b = a <> c` implies `b = c`\n* `b <> a = c <> a` implies
  `b = c`\n\nIf this does not hold, than the equivalence only holds modulo the\nthe
  addition of some constant\n\nMost common semigroups are cancellative, however notable\nexceptions
  include the cross product of vectors, matrix\nmultiplication, and sets:\n\n```haskell\nfromList
  [1] <> fromList [1,2] = fromList [1] <> fromList [2]`\n```\n\nThis type is known
  formally as the [Grothendieck group](https://en.wikipedia.org/wiki/Grothendieck_group).\n\nThe
  package also provides the `Parity` monad and comonad, which is left-adjunct to the
  difference monoid.\n"
license-name: MIT
