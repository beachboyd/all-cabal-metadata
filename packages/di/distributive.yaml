homepage: http://github.com/ekmett/distributive/
changelog-type: markdown
hash: 4392c9cebcfda0fa237c6663b81841902694000885802b49187e1370116d189f
test-bench-deps:
  base: ==4.*
  hspec: ! '>=2 && <3'
  distributive: -any
  generic-deriving: ! '>=1.11 && <2'
  doctest: ! '>=0.11.1 && <0.14'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Distributive functors -- Dual to Traversable
changelog: ! "0.5.3\n-----\n* Support `doctest-0.12`\n\n0.5.2\n-----\n* Revamp `Setup.hs`
  to use `cabal-doctest`. This makes `distributive` build\n  with `Cabal-1.25`, and
  makes the `doctest`s work with `cabal new-build` and\n  sandboxes.\n* Fix bugs in
  `Data.Distributive.Generic` that cause generic `Distributive`\n  instances not to
  work properly for datatypes with recursive types\n* Add `genericCollect` to `Data.Distributive.Generic`,
  and switch the underlying\n  machinery in that module to work on a `collect`-like
  method instead of a\n  `distribute`-like one\n* Add a test suite for regression-testing
  `Data.Distributive.Generic`\n\n0.5.1\n-----\n* Add `Distributive` instances for
  datatypes from `Data.Semigroup` and `GHC.Generics`\n* Add `MINIMAL` pragma for `Distributive`\n\n0.5.0.2\n-------\n*
  A more elegant fix for builds on GHC 7.2\n\n0.5.0.1\n-------\n* Fix builds on GHC
  7.2\n\n0.5\n---\n* Added flags for removing some dependencies.\n* Support `doctests`
  when building to non-standard locations (such as when using `stack`.)\n* Support
  `base-orphans`\n\n0.4.4\n-----\n* `transformers 0.4` compatibility\n\n0.4.3.1\n-----\n*
  Fixed builds with older versions of GHC\n\n0.4.2\n-------\n* Added `Data.Distributive.Generic`.\n\n0.4.1\n-----\n*
  `Control.Monad.Instances` is deprecated in GHC 7.8. Don't import it there.\n\n0.4\n---\n*
  Added support for `Data.Tagged` and `Data.Proxy`.\n\n0.3.1\n-----\n* Minor documentation
  fix\n\n0.3\n---\n* Added instances for `Control.Applicative.Backwards` and `Data.Functor.Reverse`
  from `transformers` 0.3, taking them from `transformers-compat` if necessary for
  `transformers` 0.2\n\n"
basic-deps:
  base: ! '>=4 && <5'
  base-orphans: ! '>=0.5.2 && <1'
  tagged: ! '>=0.7 && <1'
  transformers: ! '>=0.2 && <0.6'
  transformers-compat: ! '>=0.3 && <1'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.3.2'
- '0.4.4'
- '0.5'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.1'
- '0.5.2'
- '0.5.3'
author: Edward A. Kmett
latest: '0.5.3'
description-type: markdown
description: ! 'distributive

  ============


  [![Hackage](https://img.shields.io/hackage/v/distributive.svg)](https://hackage.haskell.org/package/distributive)
  [![Build Status](https://secure.travis-ci.org/ekmett/distributive.png?branch=master)](http://travis-ci.org/ekmett/distributive)


  This package provides the notion that is categorically dual to `Traversable`.


  A `Distributive` `Functor` is one that you can push any functor inside of.


  ```haskell

  distribute :: (Functor f, Distributive g) => f (g a) -> g (f a)

  ```


  Compare this with the corresponding Traversable notion, `sequenceA`.


  ```haskell

  sequenceA :: (Applicative f, Traversable g) => g (f a) -> f (g a)

  ```


  This package includes instances for common types, and includes other methods similar
  to `traverse` which fuse the use of `fmap`.


  We only require `Functor` rather than some dual notion to `Applicative`, because
  the latter cannot meaningfully exist in Haskell

  since all comonoids there are trivial.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
