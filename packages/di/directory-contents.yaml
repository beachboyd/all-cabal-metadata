homepage: ''
changelog-type: markdown
hash: 55a4efbf99880810037e5b82f26689f727c22a4fb8bba03c28c67d6f753ef641
test-bench-deps:
  base: -any
  filepath: -any
  directory-contents: -any
maintainer: maintainer@obsidian.systems
synopsis: Recursively build a tree of directory contents.
changelog: |
  # Revision history for directory-contents

  ## 0.1.0.0

  * Build recursive directory trees and try to avoid symlink cycles. Includes functions to walk a directory tree, filter it, and display it.
basic-deps:
  witherable: '>=0.3 && <0.4'
  base: '>=4.12 && <4.15'
  text: ==1.2.*
  filepath: ==1.4.*
  containers: '>=0.6 && <0.7'
  transformers: '>=0.5 && <0.6'
  directory-contents: -any
  directory: '>=1.3 && <1.4'
all-versions:
- 0.1.0.0
author: Obsidian Systems
latest: 0.1.0.0
description-type: markdown
description: |
  directory-contents
  ==================
  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/directory-contents.svg)](https://hackage.haskell.org/package/directory-contents) [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/directory-contents/badge)](https://matrix.hackage.haskell.org/#/package/directory-contents) [![Github CI](https://github.com/obsidiansystems/directory-contents/workflows/github-action/badge.svg)](https://github.com/obsidiansystems/directory-contents/actions) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/obsidiansystems/directory-contents/blob/master/LICENSE)

  Recursively list the contents of a directory while avoiding symlink loops.

  Description
  -----------

  Modeled after the linux `tree` command (when invoked with the follow-symlinks
  option), this module recursively lists the contents of a directory while
  avoiding symlink loops. In particular, `tree -l` and `buildDirTree` should
  provide the same result. See the documentation of `buildDirTree` for an
  example.

  In addition to building the directory-contents tree, this module provides
  facilities for filtering, displaying, and navigating the directory hierarchy.

  Example
  -------

  ```haskell

  >
  > import Data.Foldable as F
  > import Data.List
  > import qualified Data.Text as T
  > import System.Directory.Contents
  > import System.FilePath
  >
  > main :: IO ()
  > main = do
  >   mp <- buildDirTree "."
  >   case mp of
  >     Nothing -> putStrLn "Couldn't find that path."
  >     Just p -> do
  >       let f = pruneDirTree =<< filterDirTree ((`elem` [".hs", ".lhs"]) . takeExtension) p
  >       putStrLn $ case f of
  >         Nothing -> "No haskell source files found."
  >         Just hs -> unlines
  >           [ "Paths that contain haskell source files:"
  >           , T.unpack $ drawDirTree hs
  >           , ""
  >           , "Haskell source files:"
  >           , intercalate ", " $ F.toList hs
  >           ]
  >

  ```
license-name: BSD-3-Clause
