homepage: http://yousource.it.jyu.fi/optimization-with-haskell
changelog-type: ''
hash: 4730aab2af3b45eeac6a3f371d2d6ba42200af7a414f8abaadfa8bfc3b872bec
test-bench-deps: {}
maintainer: ville.tirronen@jyu.fi
synopsis: Global optimization using Differential Evolution
changelog: ''
basic-deps:
  mwc-random: ! '>=0.8 && <0.9'
  base: ! '>=4 && <5'
  fclabels: ! '>=0.11 && <0.12'
  mtl: ! '>2 && <=3'
  parallel: ! '>=3.1 && <4'
  deepseq: ! '>=1.1 && <2'
  primitive: ! '>=0.3.1 && <4'
  vector: ! '>=0.7 && <0.8'
all-versions:
- 0.0.1
- 0.0.2
author: Ville Tirronen
latest: 0.0.2
description-type: haddock
description: ! 'Plain Differential Evolution algorithm for optimizing

  real-valued functions. For further info, see

  Differential evolution: a practical approach

  to global optimization By Kenneth V. Price,

  Rainer M. Storn, and Jouni A. Lampinen.


  This Library is optimized and should achieve runtimes

  with factor of 2 from c.

  For optimal performance, pay some attention to

  rts memory parameters.


  Example in GHCi:


  >import Data.Vector.Unboxed as VUB

  >import Numeric.Optimization.Algorithms.DifferentialEvolution

  >

  >let fitness = VUB.sum . VUB.map (*2)

  >

  >de (defaultParams fitness ((VUB.replicate 60 0), (VUB.replicate 60 0)))'
license-name: MIT
