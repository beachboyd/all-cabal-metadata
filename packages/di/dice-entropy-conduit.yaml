homepage: http://monoid.at/code
changelog-type: ''
hash: 919eef72f7f0e35d7c0a56f70a44647ba62fe5bc58c79800b0ed8d7a5983519f
test-bench-deps:
  test-framework: ! '>=0.4.1'
  base: ! '>=4 && <5'
  test-framework-quickcheck2: -any
  QuickCheck: ! '>=2.4'
maintainer: peter.robinson@monoid.at
synopsis: Cryptographically secure n-sided dice via rejection sampling.
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ==4.*
  entropy: ! '>=0.3.2'
  conduit: ! '>=1.1.7'
  transformers: ! '>=0.4.0.0'
all-versions:
- 1.0.0.0
- 1.0.0.1
author: Peter Robinson <peter.robinson@monoid.at>
latest: 1.0.0.1
description-type: haddock
description: ! 'This library uses rejection sampling to provide cryptographically
  secure

  @n@-sided dice rolls and random sampling (within a given range).

  The number of used random bits is close to the information-theoretic optimal

  bound.


  /Usage:/


  If we wanted to use the system-specific entropy source (''systemEntropy'') to

  produce 10 dice rolls of a 6-sided dice (i.e. range [0,5]), we could write:


  > > systemEntropy $$ diceRolls 6 =$= CL.take 10

  > [5,1,3,3,0,5,3,2,2,1]


  The function ''testPerformance'' yields the actual number of consumed random

  bits:


  > > testPerformance 12 10000

  > Generated 10000 random samples in range [0,11]

  > Average number of bits used: 3.5904

  > Entropy lower bound on the number of required bits: 3.5849625007211565

  > Performance ratio: 1.0015167520658164


  Feedback is welcome!'
license-name: LGPL-2.1-only
