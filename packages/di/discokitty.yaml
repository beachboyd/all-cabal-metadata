homepage: https://github.com/mroman42/discokitty
changelog-type: ''
hash: 73ef13360b035388125c5565f6420a890c8c6ce982a6be90aabb9545c6ee9c7f
test-bench-deps: {}
maintainer: mromang08+github@gmail.com
synopsis: DisCoCat implementation.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  containers: ! '>=0.5.7.1'
all-versions:
- 0.1.0
author: Mario Rom√°n (mroman42)
latest: 0.1.0
description-type: markdown
description: "# discokitty\n\n![Version](https://img.shields.io/badge/version-0.1.0-blue.svg)\n\nAn
  educational implementation of the DisCoCat framework as described\nin *\"Mathematical
  Foundations for a Compositional Distributional Model\nof Meaning\"* ([link](https://arxiv.org/abs/1003.4394))
  by Coecke,\nSadrzadeh and Clark.\n\n<img src=\"https://raw.githubusercontent.com/mroman42/discokitty/master/logo.png\"
  width=\"200\" align=\"center\">\n\n*[Sunglasses Kitty](https://thenounproject.com/Gilleas/collection/kitty-emoticons/?i=359412#)
  \nby Rikki Lorie, licensed under Creative Commons*\n\n\n## Usage example\n\nPlease
  note that this library is work in progress and it is possible\nthat substantial
  changes will be made.  In the following example we\nwork in the category of relations
  declaring the meaning and grammar\ntype of some words and then we evaluate an example
  sentence.\n\n``` haskell\nmodule Discokitty.Examples.AliceAndBob where\n\nimport
  \          Discokitty\nimport           Discokitty.Models.Diagrams\nimport           Discokitty.Models.Rel\n\n--
  We first declare an universe with all the possible basis words,\n-- both nouns and
  sentences.  The rest of the types are parameterized\n-- by this universe.\ndata
  Universe = Alice | Bob | IsTrue | IsFalse deriving (Eq, Ord, Show)\n\n-- We choose
  to use the category of relations for this example, and we\n-- declare a term to
  be a word in the category of relations for our\n-- given universe.\ntype Term =
  Words (Rel Universe)\n\n-- We give meaning to some terms.  Relations are described
  as subsets using\n-- \"relation\", and the Lambek grammatical type must be written
  at the end.\nalice :: Term\nalice = Words\n  { meaning = relation [ [ Alice ] ]\n
  \ , grammar = [N]\n  , text = \"Alice\"\n  }\n\nbob :: Term\nbob = Words\n  { meaning
  = relation [ [ Bob ] ]\n  , grammar = [N]\n  , text = \"Bob\"\n  }\n\nloves :: Term\nloves
  = Words\n  { meaning = relation [ [ Alice , IsTrue , Bob ] ]\n  , grammar = [ L
  N , S , R N ]\n  , text = \"loves\"\n  }\n\n\n-- In our example sentence, we evaluate
  \"Alice loves Bob\".\n-- This produces the following output:\n--   > [[IsTrue]]
  of grammar type [S]\nexample :: [Term]\nexample = sentence [alice , loves , bob]
  @@@ [S]\n\n\n-- We can also generate Tikz diagrams.\nexampleDiagram :: String\nexampleDiagram
  = tikzDiagrams [alice , loves , bob]\n```\n\nThe generated tikz diagram looks as
  follows.\n\n<img src=\"https://raw.githubusercontent.com/mroman42/discokitty/master/alicelovesbob.jpg\"
  width=\"300\" align=\"center\">\n"
license-name: GPL-3.0-only
