homepage: https://mbays.sdf.org/diohsc
changelog-type: ''
hash: aac147616d53ac4ac61ea742ed316da938bc82ecfabb55df05abb2cf7817113f
test-bench-deps: {}
maintainer: mbays@sdf.org
synopsis: Gemini client
changelog: ''
basic-deps:
  exceptions: <0.11
  mime: <0.5
  data-hash: <0.3
  bytestring: <0.11
  x509-validation: <1.7
  hourglass: <0.3
  unix: -any
  haskeline: (>=0.8 && <0.9)
  base: (>=4.3 && <5)
  data-default-class: <0.2
  text: <1.3
  pem: <0.3
  tls: <1.6
  filepath: <1.5
  process: <1.7
  asn1-types: <0.4
  network: <3.2
  x509-store: <1.7
  parsec: <3.2
  containers: <0.7
  terminal-size: <0.4
  x509: <1.8
  regex-compat: <0.96
  drunken-bishop: <0.2
  cryptonite: <0.28
  network-uri: <2.8
  mtl: <2.3
  iconv: -any
  transformers: <0.6
  temporary: <1.4
  safe: <0.4
  directory: (>=1.3 && <1.4)
all-versions:
- 0.1.1
author: Martin Bays
latest: 0.1.1
description-type: markdown
description: "# Diohsc: Denotationally Intricate Obedient Haskell Smallnet Client\n\ndiohsc
  [URI]\n\n## Features\n* Simple line-based command-response terminal user interface
  with ANSI colour.\n* Terse but combinatorially expressive command language.\n* Navigational
  aids: history, marks, queue.\n* Facilities to invoke external commands and use per-scheme
  proxies.\n* Responses streamed to pager or external command.\n* Certificate checking
  with TOFU and/or explicitly trusted CAs.\n* Support for TLS resuming, 0RTT, and
  client certificates.\n* All configuration and certificates stored as user-manipulable
  files.\n* Extensive help.\n\n## Building\nInstall the haskell package manager cabal;
  e.g. on a debian system:\n```\n$ sudo apt-get install cabal-install\n```\n\nThen
  in the diohsc directory, run\n```\n$ cabal update && cabal install\n```\nThe resulting
  binary will be installed as `~/.cabal/bin/diohsc`.\n\n### Compile-time options\nlibmagic
  can be used to detect mimetypes of local files; try:\n`cabal install -f Magic`\n\n##
  Trusting server certificates\nFirst, a disclaimer: do not trust this software to
  keep you secure. Although \neverything seems to be working as intended, and though
  the libraries it \ndepends on seem solid, this is \"very alpha\" software and should
  not be relied \non.\n\ndiohsc uses \"Trust On First Use\": if a host provides a
  certificate chain you \ndo not currently trust, the client will ask for confirmation
  then add the \ncertificate for the host to a collection stored in `~/.diohsc/known_hosts/`
  if \nthere isn't already one stored; if there is one already stored, it will give
  \nsome details and ask if you want to overwrite it with the newly provided one.\n\nYou
  can also trust Certificate Authorities by putting their certificates in \n`~/.diohsc/trusted_certs/`.
  For example, if you want to trust all the \ncertificates installed on your system,\n```\n$
  ln -s /etc/ssl/certs/* ~/.diohsc/trusted_certs/\n```\nor if you just want to trust
  Let's Encrypt:\n```\n$ mkdir ~/.diohsc/trusted_certs\n$ wget -O ~/.diohsc/trusted_certs/lets-encrypt-x3-cross-signed.pem
  https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem\n$ sha256sum ~/.diohsc/trusted_certs/lets-encrypt-x3-cross-signed.pem\ne446c5e9dbef9d09ac9f7027c034602492437a05ff6c40011d7235fca639c79a
  /home/me/.diohsc/trusted_certs/lets-encrypt-x3-cross-signed.pem\n```\n\n## Configuration\nSee
  diohscrc.sample for ideas for configuration options, in particular\nindicating how
  to make use of third-party software to allow diohsc to access\ngopher, and parse
  markdown and html, and provide ascii-art previews of image\nfiles. Copy the file
  to ~/.diohsc/diohscrc and uncomment lines as appropriate.\n\n## Multiple instances\nMultiple
  simultaneous diohsc instances may share ~/.diohsc without serious \nconflict. However,
  command history is written only on exit, so the last \ninstance to exit will determine
  that history. The log is appended to \ncontinuously, but read only on startup, so
  logs from simultaneous instances \nwill be interleaved. Uris in ~/.diohsc/queue
  are taken by an instance on \nstartup and whenever it processes a command, and leftover
  queue items are \nwritten there on exit.\n\nTo ensure that an instance won't interfere
  with other running instances:\neither use \"--datadir\" to specify an alternative
  directory to ~/.diohsc,\nor use the \"--ghost\" option (which also acts as a \"private
  browsing\" mode).\n\n## Running under Windows\nIt is apparently possible to compile
  and run diohsc on Windows. However, it \nrequires a terminal with ANSI and unicode
  support, which it seems is not the \ndefault situation in even the most recent versions
  of Windows. On Windows 10, \nfollowing the instructions of this link has been reported
  to work:\nhttps://akr.am/blog/posts/using-utf-8-in-the-windows-terminal\n"
license-name: GPL-3.0-only
