homepage: ''
changelog-type: markdown
hash: 09d40e5e8aaf3ca79c1ba126e31d79f195e49c283fa65d6345e2130cf933d31f
test-bench-deps: {}
maintainer: diagrams-discuss@googlegroups.com
synopsis: A Pandoc filter to express diagrams inline using the Haskell EDSL _Diagrams_
changelog: ! "## v0.3 (2016-02-23)\n\n  - Choose output type based on Pandoc output
  format\n  - Set diagram size from Attributes in Pandoc IR / markdown\n  - Support
  latest `pandoc-types`\n"
basic-deps:
  diagrams-lib: ==1.3.*
  base: ! '>=4.6 && <4.9'
  diagrams-cairo: ==1.3.*
  filepath: ! '>=1.3 && <1.5'
  pandoc-types: ==1.16.*
  diagrams-pandoc: ! '>=0.2 && <0.3'
  diagrams-builder: ==0.7.*
  linear: ! '>=1.10 && <1.21'
  optparse-applicative: ! '>=0.11 && <0.13'
  directory: ==1.2.*
all-versions:
- '0.1'
- '0.2'
- '0.3'
author: Daniel Bergey
latest: '0.3'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/diagrams/diagrams-pandoc.svg?branch=master)](https://travis-ci.org/diagrams/diagrams-pandoc)\n\nA
  [pandoc](http://johnmacfarlane.net/pandoc/) filter to express\ndiagrams inline using
  the haskell EDSL\n[diagrams](http://projects.haskell.org/diagrams/).\n\n## Usage\n\nCreate
  an input file called `demo.md` with the following text:\n\n``` markdown\n    This
  is how to draw a circle:\n    ~~~ diagram\n    example = circle 1\n    ~~~\n```\n\nInstall
  diagrams-pandoc, then run pandoc as follows:\n\n``` shell\n    pandoc -t html demo.md
  --filter diagrams-pandoc -o demo.html -s\n```\n\nThe file demo.html should now have
  an img tag pointing at a PNG of a circle.\n\n## Attributes\n\nYou can specify attributes
  to control how the diagram is generated.\nThe following, for example,\n``` markdown\n
  \   ~~~ {.diagram width=800 height=400}\n    example = circle 1\n    ~~~\n```\nwill
  override the default width and height of the generated diagram.\nThe following attributes
  are supported:\n\n* `width`: The width of the generated diagram, in pixels. The
  default is 500.\n* `height`: The height of the generated diagram, in pixels. The
  default is 200.\n\n## Details\n\n`diagrams-pandoc` compiles code blocks containing
  diagrams expressions\nand includes the resulting images in the pandoc markup.  It
  is meant\nto be run as a\n[pandoc filter](http://johnmacfarlane.net/pandoc/scripting.html)
  as\nshown above.\n\n`diagrams-pandoc` evaluates the diagrams expression `example`
  by\ndefault. This can be modified by passing a command line argument.\n\n`diagrams-pandoc`
  is aware of two code block classes.  A block with\nthe `diagram` class will be replaced
  by the resulting image---the code\nwill not appear in the output.  A block with
  the `diagram-haskell`\nclass will produce both an image and a (syntax highlighted)
  code\nblock.  The input block is replaced by image appears before the code\nblock,
  and the `diagram-haskell` class is replaced by the `haskell`\nclass, so that pandoc
  can perform syntax highlighting as usual.\n\n`diagrams-pandoc` produces images in
  the `pdf` format when used with\nthe `latex` and `beamer` writers of `pandoc` and
  produced `png` output\notherwise.\n\nI have only tested with pandoc's markdown reader.
  \ In particular, the\nrst reader does not attach classes to code blocks, only to
  Div elements.\n\n## Installing\n\n`diagrams-pandoc` is on Hackage.  To install,
  run `cabal install diagrams-pandoc`\n\n## TODO\n\n* use pandoc output type to pick
  an image file format\n* for formats which are more human-readable (eg, markdown,
  rst), leave\n  code block alone?\n* provide command-line flags to override default
  behavior\n* add Backends besides Cairo\n* Support RST by handling `Div class=diagram
  [CodeBlock foo bar]` the same as `CodeBlock class=diagram bar`\n* Alternate install
  directions using `stack`\n"
license-name: BSD-3-Clause
