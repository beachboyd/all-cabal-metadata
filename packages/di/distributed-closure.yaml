homepage: https://github.com/tweag/distributed-closure
changelog-type: ''
hash: a51270513a7bd48edd656309b381681f9d8fd9ab2d5bd47a27f38b75810c174a
test-bench-deps:
  base: ! '>=4.8'
  hspec: ! '>=2.1'
  distributed-closure: -any
  binary: ! '>=0.7'
  QuickCheck: ! '>=2.8'
maintainer: m@tweag.io
synopsis: Serializable closures for distributed programming.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.8 && <5'
  syb: ! '>=0.5'
  constraints: ! '>=0.4'
  binary: ! '>=0.7.5'
  template-haskell: ! '>=2.10'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0'
author: Mathieu Boespflug
latest: '0.4.0'
description-type: markdown
description: ! "# distributed-closure\n\n[![Build Status](https://travis-ci.org/tweag/distributed-closure.svg)](https://travis-ci.org/tweag/distributed-closure)\n\nLeverage
  the `-XStaticPointers` [extension][staticpointers-extension]\nfrom GHC 7.10 onwards
  for distributed programming using lightweight\nserializable closures. This package
  implements a *serializable\nclosure* abstraction on top of static pointers. Serializable
  closures\ncan be shipped around a computer cluster. This is useful for\nimplementing
  intuitive and modular distributed applications. See\n[this blog post][ocharles-static-pointers]
  for a hands on introduction\nand [this paper][ch-paper] for the original motivation.\n\n[staticpointers-extension]:
  https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#static-pointers\n[ocharles-static-pointers]:
  https://ocharles.org.uk/blog/guest-posts/2014-12-23-static-pointers.html\n[ch-paper]:
  http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf\n\n#
  Example\n\nIn GHC 8 and above, remoting a computation on another node using this\nlibrary
  goes along the lines of\n\n```Haskell\ndata NodeId\n\n-- Assume we're given a spaw
  primitive.\nspawn :: NodeId -> Closure (IO ()) -> IO ()\n\n-- A computation to remote
  on another node.\nhello :: String -> IO ()\nhello name = putStrLn (\"Hello, \" ++
  name)\n\nmain = do\n  name <- getLine\n  spawn \"someAddress\" (static hello `cap`
  name)\n```\n\n`distributed-closure` does not implement sending/receiving/spawning\nclosures
  - that's left for higher-level frameworks. Only closure\ncreation, composition and
  (de)serialization.\n"
license-name: BSD3
