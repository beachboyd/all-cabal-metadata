homepage: https://github.com/bjornbm/dimensional/
changelog-type: markdown
hash: 914ec50043947f6cbc5d51022e5252d8a225e790e8867d8a98b18cfcb6199665
test-bench-deps:
  base: -any
  hspec: -any
  criterion: -any
  doctest: -any
  dimensional: -any
  deepseq: -any
  QuickCheck: -any
  Glob: -any
  template-haskell: -any
maintainer: bjorn@buckwalter.se
synopsis: ! 'Statically checked physical dimensions,

  using Type Families and Data Kinds.'
changelog: ! "1.2 (2018-11)\n-------------\n* Add `NoStarIsType` extension and import
  `Data.Kind.Type` for [GHC 8.6 compitbility](https://github.com/ghc-proposals/ghc-proposals/blob/05721788de9ab6538def68c3c2c9dec50c9f24a8/proposals/0020-no-type-in-type.rst).
  Abandon compatibility with GHC < 8.\n\n1.1 (2018-03)\n-------------\n* Added `Semigroup`
  instances for [GHC 8.4 compatibility](https://ghc.haskell.org/trac/ghc/wiki/Migration/8.4#SemigroupMonoidsuperclasses).\n*
  Breaking: Renamed `Root` type family to `NRoot`. Added `Sqrt` and `Cbrt` type\n
  \ synonyms. Added `sqrt` and `cbrt` for term level dimensions.\n* Breaking: Changed
  `Numeric.Units.Dimensional.Prelude` to export dimensionally\n  typed `signum`, `recip`,
  and `logBase` instead of the ones from `Prelude`.\n* Breaking: Changed `Numeric.Units.Dimensional.Prelude`
  to export `(.)` and `id`\n  from `Control.Category` instead of from `Prelude`.\n*
  Breaking: Created a `product` function which take the product of a foldable structure
  of\n  `Dimensionless` values. Exported this `product` function from Numeric.Units.Dimensional.Prelude\n
  \ instead of the one from `Prelude`.\n* Breaking: Changed the `HasDimension` typeclass
  to require an instance of the new\n  `HasDynamicDimension` typeclass.\n* Breaking:
  Added operators for `AnyUnit` to the Numeric.Units.Dimensional.Dynamic\n  module
  which may cause name collisions.\n* Breaking: Added dynamic versions of `(*~)`,
  `(/~)`, and `siUnit` to the Numeric.Units.Dimensional.Dynamic\n  module which may
  cause name collisions.\n* Breaking: Removed exports of `nMeter`, `nSecond`, `kilo`,
  etc from Numeric.Units.Dimensional.UnitNames.\n  Access these instead by inspecting
  the relevant units or prefixes.\n* Breaking: Generalized the type of `dimensionlessLength`
  from\n  `(Num a, Foldable f) => f (Dimensional v d a) -> Dimensionless a)` to\n
  \ `(Num a, Foldable f) => f b -> Dimensionless a`. This provides a weaker constraint
  on the type `a`\n  and may result in ambiguous types in code that depends on the
  former less general type.\n* Fixed a bug in the definition of the `inHg_NIST`.\n*
  Fixed a bug in the interchange name of the Dalton.\n* Added units for the US survey
  foot, yard, inch, mil, and mile.\n* Added the short ton as a unit of mass.\n* Clarified
  that the UCUM acre is based on the US survey foot.\n* Added a version of the acre
  based on the international foot.\n* Added `Data`, `Generic`, `Typeable` and `NFData`
  instances for many ancillary types.\n* Added `unQuantity` to the Coercion module
  to ease unwrapping without\n  introducing ambiguous type variables.\n* Created explicit
  representation of metric `Prefix`es.\n* Added a multiplicative `Monoid` instance
  for `AnyQuantity` and for `AnyUnit`.\n* Added the `DynQuantity` type to represent
  possibly valid quantities of statically\n  unknown dimension, suitable for performing
  arithmetic with such quantities.\n* Added `nroot` function for term-level dimensions.\n*
  Added the Numeric.Units.Dimensional.Float module with convenient wrappers around
  functions\n  from RealFloat and IEEE for inspecting floating point quantities.\n*
  Added an `AEq` instance for `Quantity`.\n* Added `Eq1` and `Ord1` instances for
  `Quantity`.\n* Exposed the name of an 'AnyUnit' without promoting it to a 'Unit'
  first.\n* Exposed a way to convert atomic 'UnitName's back into 'NameAtom's.\n*
  Added the `btu`, a unit of energy.\n* Added the `gauss`, a unit of magnetic flux
  density.\n* Added the `angstrom`, a unit of length.\n* Relocated git repository
  to https://github.com/bjornbm/dimensional\n\n1.0.1.3 (2016-09)\n-----------------\n*
  Fixed an issue with applying metric prefixes to units with non-rational conversion
  factors.\n\n1.0.1.2 (2016-05)\n-----------------\n* Support for GHC 8.0.1-rc4, avoiding
  GHC Trac issue 12026.\n* Added support for stack.\n\n1.0.1.1 (2015-11)\n-----------------\n*
  Improved example in readme.\n\n1.0.1.0 (2015-11)\n-----------------\n* Added Numeric.Units.Dimensional.Coercion
  module.\n* Bumped exact-pi dependency to < 0.5.\n* Restored changelog.\n* Addressed
  issues with documentation.\n\n1.0.0.0 (2015-11)\n-----------------\n* Changed to
  DataKinds and ClosedTypeFamilies encoding of dimensions.\n* Added names and exact
  values to `Unit`s.\n* Added `AnyUnit` and `AnyQuantity` for quantities whose dimension
  is statically unknown.\n* Added Storable and Unbox instances for `Quantity`.\n*
  Added dimensionally-polymorphic `siUnit` for the coherent SI base unit of any dimension.\n*
  Added some additional units.\n\n0.13.0.2 (2015-04)\n------------------\n*  Corrected
  definition of lumen.\n\n\n0.13.0.1 (2014-09)\n------------------\n*  Bumped time
  dependency to < 1.6.\n\n\n0.13 (2014-02)\n--------------\n*  Bump major version
  (should have been done in previous version).\n\n\n0.12.3 (2014-02)\n----------------\n*
  \ Bump numtype dependency to 1.1 (GHC 7.8.1 compatibility fix).\n*  Added `Torque`.\n*
  \ Added D.. for the type synonym quantities (e.g., `Angle`).\n\n\n0.12.2 (2013-11)\n----------------\n*
  \ Added `FirstMassMoment`, `MomentOfInertia`, `AngularMomentum`.\n*  Improved unit
  numerics.\n\n\n0.12.1 (2013-07)\n----------------\n*  Typeable Dimensionals.\n\n\n0.12
  (2013-06)\n--------------\n*  Polymorphic `_0` (closes issue 39).\n*  Added `astronomicalUnit`.\n*
  \ Added imperial volume units.\n*  Added 'mil' (=inch/1000).\n*  Added [`tau`][3].\n*
  \ Added `KinematicViscosity`.\n\n[3]: http://tauday.com/tau-manifesto\n\n\n0.10.1.2
  (2011-09)\n------------------\n*  Bumped time dependency to < 1.5.\n\n\n0.10.1.2
  (2011-08)\n------------------\n*  Bumped time dependency to < 1.4.\n\n\n0.10.1 (2011-08)\n----------------\nGHC
  7.2.1 compatibility fix:\n\n*  Increased CGS context-stack to 30.\n\n\n0.10 (2011-05)\n--------------\nSee
  the [announcement][2].\n\n[2]: http://flygdynamikern.blogspot.se/2011/05/announce-dimensional-010.html\n\n\n0.9
  (2011-04)\n-------------\nSee the [announcement][1].\n\n[1]: http://flygdynamikern.blogspot.se/2011/04/announce-dimensional-09.html\n"
basic-deps:
  base: ! '>=4.7 && <5'
  semigroups: -any
  numtype-dk: ! '>=0.5 && <1.1'
  exact-pi: ! '>=0.4.1 && <0.5'
  ieee754: ! '>=0.7.6'
  deepseq: ! '>=1.3'
  vector: ! '>=0.10'
all-versions:
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- '0.8'
- 0.8.0.1
- 0.8.2.1
- '0.9'
- '0.10'
- 0.10.1
- 0.10.1.1
- 0.10.1.2
- 0.10.2
- '0.12'
- 0.12.1
- 0.12.1.1
- 0.12.2
- 0.12.3
- '0.13'
- 0.13.0.1
- 0.13.0.2
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- '1.1'
- '1.2'
author: Bjorn Buckwalter
latest: '1.2'
description-type: markdown
description: ! "# dimensional\n\nThis library provides statically-checked dimensional
  arithmetic for physical quantities, using the 7 SI base dimensions.\n\nData kinds
  and closed type families provide a flexible, safe, and discoverable implementation
  that leads to largely self-documenting\nclient code.\n\n[![Build Status](https://travis-ci.org/bjornbm/dimensional.svg?branch=master)](https://travis-ci.org/bjornbm/dimensional)\n[![Hackage
  Version](http://img.shields.io/hackage/v/dimensional.svg)](http://hackage.haskell.org/package/dimensional)\n[![Stackage
  version](https://www.stackage.org/package/dimensional/badge/lts?label=Stackage)](https://www.stackage.org/package/dimensional)\n\n##
  Usage\n\nSimply importing `Numeric.Units.Dimensional.Prelude` provides access to
  dimensional arithmetic opertors, SI units and other common units\naccepted for use
  with the SI, and convenient aliases for quantities with commonly used dimensions.\n\nThe
  `Unit d a` type represents a unit with dimension `d`, whose conversion factor to
  the coherent SI base unit of the corresponding dimension\nis represented by a value
  of type `a`. `a` is commonly chosen to be `Double`, but can be any `Floating` type.
  Where possible, support is also\nprovided for `Fractional` or `Num` values.\n\nSimilarly,
  the `Quantity d a` type represents a quantity with dimension `d`, whose numeric
  value is of type `a`. Aliases allow the use of, e.g.,\n`Length Double` to mean `Quantity
  DLength Double`. A complete list of available aliases is given in the haddock documentation
  for the\n`Numeric.Units.Dimensional.Quantities`.\n\nIn the example below, we will
  solve a simple word problem.\n\nA car travels at 60 kilometers per hour for one
  mile, at 50 kph for one mile,\nat 40 kph for one mile, and at 30 kph for one mile.
  How many minutes does the journey take?\nWhat is the average speed of the car? How
  many seconds does the journey take, rounded up to the next whole second?\n\n```haskell\n{-#
  LANGUAGE NoImplicitPrelude #-}\n\nmodule ReadmeExample where\n\nimport Numeric.Units.Dimensional.Prelude\nimport
  Numeric.Units.Dimensional.NonSI (mile)\n\nleg :: Length Double\nleg = 1 *~ mile
  -- *~ combines a raw number and a unit to form a quantity\n\nspeeds :: [Velocity
  Double]\nspeeds = [60, 50, 40, 30] *~~ (kilo meter / hour)\n  -- *~~ does the same
  thing for a whole Functor at once\n  -- Parentheses are required around unit expressions
  that are comingled with *~, /~, *~~, or /~~ operations\n\ntimeOfJourney :: Time
  Double\ntimeOfJourney = sum $ fmap (leg /) speeds\n  -- We can use dimensional versions
  of ordinary functions like / and sum to combine quantities\n\naverageSpeed :: Velocity
  Double\naverageSpeed = _4 * leg / timeOfJourney\n  -- _4 is an alias for the dimensionless
  number 4\n\nwholeSeconds :: Integer\nwholeSeconds = ceiling $ timeOfJourney /~ second\n
  \ -- /~ lets us recover a raw number from a quantity and a unit in which it should
  be expressed\n\nmain :: IO ()\nmain = do\n         putStrLn $ \"Length of journey
  is: \" ++ showIn minute timeOfJourney\n         putStrLn $ \"Average speed is: \"
  ++ showIn (mile / hour) averageSpeed\n         putStrLn $ \"If we don't want to
  be explicit about units, the show instance uses the SI basis: \" ++ show averageSpeed\n
  \        putStrLn $ \"The journey requires \" ++ show wholeSeconds ++ \" seconds,
  rounded up to the nearest second.\"\n```\n\n## Contributing\n\nFor project information
  (issues, updates, wiki, examples) see:\n  https://github.com/bjornbm/dimensional\n"
license-name: BSD-3-Clause
