homepage: http://github.com/ekmett/discrimination/
changelog-type: markdown
hash: d42ae36c97ea9c0c8844b47ee162c5530f3daf708636f01010f58dcf52602876
test-bench-deps:
  base: ! '>=4.9'
  unordered-containers: -any
  criterion: -any
  containers: -any
  ghc-prim: -any
  deepseq: -any
  discrimination: -any
  primitive: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Fast generic linear-time sorting, joins and container construction.
changelog: |
  ## 0.4

  * Added `Natural`, `Integer` and `()` discrimination

  ## 0.3

  * Fixed a corner case where `conquer` would lie and return an empty equivalence class when fed no inputs.

  ## 0.2.1

  * `promises` 0.3 support
  * `vector` 0.11 support
  * `transformers` 0.5 support
  * `transformers-compat` support
  * ghc 8 support

  ## 0.2

  * `grouping` is now much more efficient.

  ## 0.1

  * `grouping` is now productive. This means it can start spitting out results as it goes! To do this I created the `promises` package and switched to using it behind the scenes for many combinators that consume a `Group`. This has a bunch of knock-on effects:
    * `grouping` is now working properly with respect to its law!
    * `grouping` now uses an American-flag style top-down radix sort rather than a bottom up radix sort for all operations. This is sadly required for productivity. This will use a lot more memory for intermediate arrays, as we don't get to return them to storage after we're done.
    * We now use much smaller intermediate arrays for `grouping`. Should we do the same for `sorting`?

  ## 0

  * Initialized repository
basic-deps:
  void: ! '>=0.5 && <1'
  base: ! '>=4.8 && <5'
  semigroups: ! '>=0.16.2 && <1'
  array: ! '>=0.5 && <0.6'
  integer-gmp: -any
  containers: ! '>=0.4 && <0.7'
  promises: ! '>=0.2 && <0.4'
  ghc-prim: -any
  contravariant: ! '>=1.3.1 && <2'
  hashable: ! '>=1.2 && <1.4'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  primitive: ! '>=0.6.4 && <0.8'
  transformers-compat: ! '>=0.3 && <1'
  profunctors: ! '>=5 && <6'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0'
- '0.1'
- 0.2.1
- '0.3'
- '0.4'
author: Edward A. Kmett
latest: '0.4'
description-type: markdown
description: |
  discrimination
  ==============

  [![Hackage](https://img.shields.io/hackage/v/discrimination.svg)](https://hackage.haskell.org/package/discrimination) [![Build Status](https://secure.travis-ci.org/ekmett/discrimination.png?branch=master)](http://travis-ci.org/ekmett/discrimination)

  This package provides linear time sorting, partitioning, and joins for a wide array of Haskell data types. This work is based on a
  "final encoding" of the ideas presented in [multiple](http://hjemmesider.diku.dk/~henglein/papers/henglein2011a.pdf) [papers](http://hjemmesider.diku.dk/~henglein/papers/henglein2011c.pdf) and [talks](https://www.youtube.com/watch?v=sz9ZlZIRDAg) by [Fritz Henglein](http://hjemmesider.diku.dk/~henglein).

  By adopting a final encoding we can enjoy many instances for standard classes, lawfully, without quotienting.

  Contact Information
  -------------------

  Contributions and bug reports are welcome!

  Please feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.

  -Edward Kmett
license-name: BSD-3-Clause
