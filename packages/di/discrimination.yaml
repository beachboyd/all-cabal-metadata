homepage: http://github.com/ekmett/discrimination/
changelog-type: markdown
hash: 3c23660bf7b0474e85592006d13612b917abead89ca4e2eb064c01ef59bb77d9
test-bench-deps:
  base: ! '>=4.9'
  unordered-containers: -any
  criterion: -any
  containers: -any
  ghc-prim: -any
  deepseq: -any
  discrimination: -any
  primitive: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Fast generic linear-time sorting, joins and container construction.
changelog: ! "## 0.3\n\n* Fixed a corner case where `conquer` would lie and return
  an empty equivalence class when fed no inputs.\n\n## 0.2.1\n\n* `promises` 0.3 support\n*
  `vector` 0.11 support\n* `transformers` 0.5 support\n* `transformers-compat` support\n*
  ghc 8 support\n\n## 0.2\n\n* `grouping` is now much more efficient.\n\n## 0.1\n\n*
  `grouping` is now productive. This means it can start spitting out results as it
  goes! To do this I created the `promises` package and switched to using it behind
  the scenes for many combinators that consume a `Group`. This has a bunch of knock-on
  effects:\n  * `grouping` is now working properly with respect to its law!\n  * `grouping`
  now uses an American-flag style top-down radix sort rather than a bottom up radix
  sort for all operations. This is sadly required for productivity. This will use
  a lot more memory for intermediate arrays, as we don't get to return them to storage
  after we're done.\n  * We now use much smaller intermediate arrays for `grouping`.
  Should we do the same for `sorting`?\n\n## 0\n\n* Initialized repository\n"
basic-deps:
  void: ! '>=0.5 && <1'
  base: ! '>=4.8 && <5'
  semigroups: ! '>=0.16.2 && <1'
  array: ! '>=0.5 && <0.6'
  containers: ! '>=0.4 && <0.6'
  promises: ! '>=0.2 && <0.4'
  ghc-prim: -any
  contravariant: ! '>=1.3.1 && <2'
  hashable: ! '>=1.2 && <1.3'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  primitive: ! '>=0.6 && <0.7'
  transformers-compat: ! '>=0.3 && <1'
  profunctors: ! '>=5 && <6'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0'
- '0.1'
- '0.2.1'
- '0.3'
author: Edward A. Kmett
latest: '0.3'
description-type: markdown
description: ! 'discrimination

  ==============


  [![Hackage](https://img.shields.io/hackage/v/discrimination.svg)](https://hackage.haskell.org/package/discrimination)
  [![Build Status](https://secure.travis-ci.org/ekmett/discrimination.png?branch=master)](http://travis-ci.org/ekmett/discrimination)


  This package provides linear time sorting, partitioning, and joins for a wide array
  of Haskell data types. This work is based on a

  "final encoding" of the ideas presented in [multiple](http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011a.pdf)
  [papers](http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011c.pdf)
  and [talks](https://www.youtube.com/watch?v=sz9ZlZIRDAg) by [Fritz Henglein](http://www.diku.dk/hjemmesider/ansatte/henglein/).


  By adopting a final encoding we can enjoy many instances for standard classes, lawfully,
  without quotienting.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
