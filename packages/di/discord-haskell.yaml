homepage: https://github.com/aquarial/discord-haskell
changelog-type: markdown
hash: ecbeec7b5ed286e6facab857e0d1c42f8fe2747fdd08cdf29fa04ba825aed268
test-bench-deps: {}
maintainer: ksfish5@gmail.com
synopsis: Write bots for Discord in Haskell
changelog: |
  # Changelog

  View on github for newest version: https://github.com/aquarial/discord-haskell/blob/master/changelog.md

  ## master


  ## 1.4.0

  Rename `SubEmbed` to `EmbedPart`

  New and improved Embed API: Add `CreateEmbed` record and `createEmbed :: CreateEmbed -> Embed`

  `CreateEmbedImageUpload` implementation inspired by [Flutterlice](https://github.com/aquarial/discord-haskell/pull/32)

  ## 1.3.0

  [PixeLinc](https://github.com/aquarial/discord-haskell/pull/33) Add `DeleteSingleReaction` rest-request, Add GuildId to `ReactinInfo`, Add `MESSAGE_REACTION_REMOVE_EMOJI` gateway event

  `GetReactions` actually returns the User objects request

  Rename `Ban` to `GuildBan`

  Re-export UTCTime from `time` package

  ## 1.2.0

  [MDeltaX](https://github.com/aquarial/discord-haskell/pull/27) Fixed typo: depreciated --> deprecated

  [MDeltaX](https://github.com/aquarial/discord-haskell/pull/29) More consistency: RoleID --> RoleId

  [MDeltaX](https://github.com/aquarial/discord-haskell/pull/29) Fix ModifyGuildRole: Post --> Patch && optional args

  [Hippu](https://github.com/aquarial/discord-haskell/pull/31) Won't crash on integer-nonces in ChannelMessage-events (usually strings)

  ## 1.1.3

  Minor improvements to rate-limiting like using newer `X-RateLimit-Reset-After` header

  ## 1.1.2

  [michalrus](https://github.com/aquarial/discord-haskell/issues/25) Fix `DeleteGuildRole` parse exception

  ## 1.1.1

  Fix ModifyGuildRolePositions results in 400 Bad Request issue

  ## 1.1.0

  Upgrade req to 2.x major version.

  ## 1.0.0

  Going through some major updates to the library. Expect types to change and things to break.

  Compare the [old ping-pong](https://github.com/aquarial/discord-haskell/blob/20f7f8556823a754c76d01484118a5abf336530b/examples/ping-pong.hs)
  to the [new ping-pong](https://github.com/aquarial/discord-haskell/blob/7eaa6ca068f945603de7f43f6f270c2dbecd3c85/examples/ping-pong.hs)

  Added a few rest ADT types

  ## 0.8.4

  [marcotoniut](https://github.com/aquarial/discord-haskell/pull/18) Improved changed Embed ADT to have optional fields, and improved two field names

  Add `ModifyGuildMember`, `AddGuildMember`, `AddGuildMemberRole`, `AddGuildMemberRole`, `RemoveGuildmembeRole`, `GetGuildBan`, `GetGuildVanityURL` rest data types

  ## 0.8.3

  Simplify Message Author from `Either WebhookId User` to `User`

  Add `loginRestGatewayWithLog`

  ### 0.8.2

  Hardcode CreateReaction delay so bots can add reactions 4 times faster

  [MP2E](https://github.com/aquarial/discord-haskell/pull/14) Fixed parse error on GuildBanAdd + GuildBanRevoke: user\_object instead the whole object

  ### 0.8.1

  [MP2E](https://github.com/aquarial/discord-haskell/pull/11) Fixed parse error on GuildRoleDelete: role_id instead of role

  ### 0.8.0

  `MessageUpdate` does not contain a full Message object, just `ChannelId` `MessageId`

  Message Author changed from `User` to `Either WebhookId User`

  Add Webhook ADT

  Add requests: GetInvite, DeleteInvite

  UpdateStatusVoiceOpts takes Bool for Mute

  `Unavailable` becomes `GuildUnavailable`

  ### 0.7.1

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/6/files) Typo in RequestGuildMemberOpts fields fixed.

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/6/files) Added Activity, ActivityType ADT

  UpdateStatusTypes became UpdateStatusType (singular ADT)

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/7) Retry connection on 1001 websocket close

  ### 0.7.0

  Snowflake -> named id

  Add requests: ModifyChanPositions, CreateGuildChannel

  Changed constructors of Channel to have prefix "Channel", isGuildChannel --> channelIsInGuild

  Change Emoji Id ADTs

  ### 0.6.0

  Add requests: CreateGuildEmoji, GroupDMRemoveRecipient, ModifyCurrentUser, EditChannelPermissions, CreateChannelInvite, GroupDMAddRecipient, ModifyGuild

  restCall, readCache pass errors as an ADT, including underling http exceptions

  Only add "Bot " prefix to secret token if it's not there

  ### 0.5.1

  sendCommand with GatewaySendable types

  ### 0.5.0

  restCall with Request types

  nextEvent with Event types
basic-deps:
  http-client: ! '>=0.6.4 && <0.7'
  emoji: ==0.1.0.2
  JuicyPixels: ! '>=3.2.9.5 && <3.4'
  bytestring: ! '>=0.10.8.2 && <0.11'
  MonadRandom: ! '>=0.5.1.1 && <0.6'
  base: ==4.*
  time: ! '>=1.8.0.2 && <1.9'
  base64-bytestring: ! '>=1.0.0.1 && <1.1'
  unordered-containers: ! '>=0.2.9.0 && <0.3'
  text: ! '>=1.2.3.0 && <1.3'
  safe-exceptions: ! '>=0.1.7.0 && <0.2'
  async: ! '>=2.2.1 && <2.3'
  websockets: ! '>=0.12.5.1 && <0.13'
  req: ! '>=2.1.0 && <2.2'
  data-default: ! '>=0.7.1.1 && <0.8'
  containers: ! '>=0.5.11.0 && <0.7'
  iso8601-time: ! '>=0.1.5 && <0.2'
  wuss: ! '>=1.1.10 && <1.2'
  discord-haskell: -any
  aeson: ! '>=1.3.1.1 && <1.5'
  vector: ! '>=0.12.0.1 && <0.13'
all-versions:
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.2.0
- 1.3.0
- 1.4.0
author: Karl
latest: 1.4.0
description-type: markdown
description: "# discord-haskell [![Build Status](https://travis-ci.org/aquarial/discord-haskell.png?branch=master)](https://travis-ci.org/aquarial/discord-haskell)\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}  -- allows \"string literals\" to be Text\n\nimport
  Control.Monad (when)\nimport Data.Text (isPrefixOf, toLower, Text)\nimport Control.Concurrent
  (threadDelay)\nimport qualified Data.Text.IO as TIO\n\nimport Discord\nimport Discord.Types\nimport
  qualified Discord.Requests as R\n\n-- | Replies \"pong\" to every message that starts
  with \"ping\"\npingpongExample :: IO ()\npingpongExample = do userFacingError <-
  runDiscord $ def\n                                            { discordToken = \"Bot
  ZZZZZZZZZZZZZZZZZZZ\"\n                                            , discordOnEvent
  = eventHandler }\n                     TIO.putStrLn userFacingError\n\neventHandler
  :: DiscordHandle -> Event -> IO ()\neventHandler dis event = case event of\n       MessageCreate
  m -> when (not (fromBot m) && isPing (messageText m)) $ do\n               _ <-
  restCall dis (R.CreateReaction (messageChannel m, messageId m) \"eyes\")\n               threadDelay
  (4 * 10^6)\n               _ <- restCall dis (R.CreateMessage (messageChannel m)
  \"Pong!\")\n               pure ()\n       _ -> pure ()\n\nfromBot :: Message ->
  Bool\nfromBot m = userIsBot (messageAuthor m)\n\nisPing :: Text -> Bool\nisPing
  = (\"ping\" `isPrefixOf`) . toLower\n```\n\n\n### Installing\n\ndiscord-haskell
  is on hosted on hackage at https://hackage.haskell.org/package/discord-haskell,
  \n\nIn `stack.yaml`\n\n```yaml\nextra-deps:\n- emoji-0.1.0.2\n- discord-haskell-1.2.0\n
  \   # check hackage for the most recent version\n```\n\nIn `project.cabal`\n\n```cabal\nexecutable
  haskell-bot\n  main-is:             src/Main.hs\n  default-language:    Haskell2010\n
  \ ghc-options:         -threaded\n  build-depends:       base\n                     ,
  text\n                     , discord-haskell\n```\n\nFor a more complete example
  with various options go to \n[Installing the Library](https://github.com/aquarial/discord-haskell/wiki/Installing-the-Library)
  wiki page\n\nAlso take a look at \n[Creating your first Bot](https://github.com/aquarial/discord-haskell/wiki/Creating-your-first-Bot)\nfor
  some help setting up your bot token\n\n\n### Emoji\n\nFor single character Emoji
  you can use the unicode name (\"eyes\", \"fire\", etc).\n\nFor multi-character Emoji
  you must use the discord format. Type `\\:emoji:` into\na discord chat and paste
  that into the Text\n\nFor example `:thumbsup::skin-tone-3:` is `\"\U0001F44D\\127997\"`.
  \nA custom emoji will look like `<name:id_number>` or `name:id_number`.\n\nSee [examples/ping-pong.hs](https://github.com/aquarial/discord-haskell/blob/master/examples/ping-pong.hs)\n
  for a `CreateReaction` request in use.\n \n### Embeds\n\nEmbeds are special messages
  with boarders and images. [Example embed created by discord-haskell](./examples/embed-photo.jpg)\n\nThe
  `Embed` record (and sub-records) store embed data received from Discord.\n\nThe
  `CreateEmbed` record stores data when we want to create an embed.\n\n`CreateEmbed`
  has a `Default` instance, so you only need to specify the fields you use:\n\n```haskell\n_
  <- restCall dis (R.CreateMessageEmbed <channel_id> \"Pong!\" $\n        def { createEmbedTitle
  = \"Pong Embed\"\n            , createEmbedImage = Just $ CreateEmbedImageUpload
  <bytestring>\n            , createEmbedThumbnail = Just $ CreateEmbedImageUrl\n
  \                   \"https://avatars2.githubusercontent.com/u/37496339\"\n            })\n```\n\nUploading
  a file each time is slow, prefer uploading images to a hosting site like imgur.com,
  and then referencing them.\n \n### Limitations\n\nThe following features are not
  implemented:\n\n- Voice & Audio\n- Authenticating with a user token\n\n### Debugging\n\nAlways
  print the userFacingError Text returned from `runDiscord`. I use this to record\nerrors
  that cannot be recovered from.\n\nIf something else goes wrong with the library
  please open an issue. It is helpful,\nbut not always necessary, to attach a log
  of what's going on when the library\ncrashes.\n\nAssign a handler to the `discordOnLog
  :: Text -> IO ()` to print info as it happens.\nRemember to remove sensitive information
  before posting.\n\n### Getting Help\n\n#### Official discord docs\n\nFor a list
  of rest requests, gateway events, and gateway sendables go to the \n[official discord
  documentation](https://discordapp.com/developers/docs/intro)\n\nThe rest requests
  line up very closely. The documentation lists \n[Get Channel](https://discordapp.com/developers/docs/resources/channel#get-channel)\nand
  discord-haskell has `GetChannel :: ChannelId -> ChannelRequest Channel`. Same for
  gateway `Event`s.\n\n#### Examples\n\nThe [examples](https://github.com/aquarial/discord-haskell/tree/master/examples)
  were crafted\nto display a variety of use cases. Read them with care.\n\n#### Open
  an Issue\n\nFor deeper questions about how the library functions, feel free to open
  an issue.\n\n#### Discord server\n\nComing sometime!\n"
license-name: MIT
