homepage: https://github.com/aquarial/discord-haskell
changelog-type: markdown
hash: 0304d355ddbf9aafc80075001b1ef4a36fe5ca080ef7cc3d1c9e16bb54076c73
test-bench-deps: {}
maintainer: ksfish5@gmail.com
synopsis: Write bots for Discord in Haskell
changelog: |
  # Changelog

  View on github for newest version: https://github.com/aquarial/discord-haskell/blob/master/changelog.md

  ## master

  ## 0.8.4

  [marcotoniut](https://github.com/aquarial/discord-haskell/pull/18) Improved changed Embed ADT to have optional fields, and improved two field names

  Add `ModifyGuildMember`, `AddGuildMember`, `AddGuildMemberRole`, `AddGuildMemberRole`, `RemoveGuildmembeRole`, `GetGuildBan`, `GetGuildVanityURL` rest data types

  ## 0.8.3

  Simplify Message Author from `Either WebhookId User` to `User`

  Add `loginRestGatewayWithLog`

  ### 0.8.2

  Hardcode CreateReaction delay so bots can add reactions 4 times faster

  [MP2E](https://github.com/aquarial/discord-haskell/pull/14) Fixed parse error on GuildBanAdd + GuildBanRevoke: user\_object instead the whole object

  ### 0.8.1

  [MP2E](https://github.com/aquarial/discord-haskell/pull/11) Fixed parse error on GuildRoleDelete: role_id instead of role

  ### 0.8.0

  `MessageUpdate` does not contain a full Message object, just `ChannelId` `MessageId`

  Message Author changed from `User` to `Either WebhookId User`

  Add Webhook ADT

  Add requests: GetInvite, DeleteInvite

  UpdateStatusVoiceOpts takes Bool for Mute

  `Unavailable` becomes `GuildUnavailable`

  ### 0.7.1

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/6/files) Typo in RequestGuildMemberOpts fields fixed.

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/6/files) Added Activity, ActivityType ADT

  UpdateStatusTypes became UpdateStatusType (singular ADT)

  [t1m0thyj](https://github.com/aquarial/discord-haskell/pull/7) Retry connection on 1001 websocket close

  ### 0.7.0

  Snowflake -> named id

  Add requests: ModifyChanPositions, CreateGuildChannel

  Changed constructors of Channel to have prefix "Channel", isGuildChannel --> channelIsInGuild

  Change Emoji Id ADTs

  ### 0.6.0

  Add requests: CreateGuildEmoji, GroupDMRemoveRecipient, ModifyCurrentUser, EditChannelPermissions, CreateChannelInvite, GroupDMAddRecipient, ModifyGuild

  restCall, readCache pass errors as an ADT, including underling http exceptions

  Only add "Bot " prefix to secret token if it's not there

  ### 0.5.1

  sendCommand with GatewaySendable types

  ### 0.5.0

  restCall with Request types

  nextEvent with Event types
basic-deps:
  http-client: ! '>=0.5.13.1 && <0.6'
  JuicyPixels: ! '>=3.2.9.5 && <3.4'
  bytestring: ! '>=0.10.8.2 && <0.11'
  MonadRandom: ! '>=0.5.1.1 && <0.6'
  base: ! '>=4 && <5'
  time: ! '>=1.8.0.2 && <1.9'
  base64-bytestring: ! '>=1.0.0.1 && <1.1'
  unordered-containers: ! '>=0.2.9.0 && <0.3'
  text: ! '>=1.2.3.0 && <1.3'
  safe-exceptions: ! '>=0.1.7.0 && <0.2'
  async: ! '>=2.2.1 && <2.3'
  websockets: ! '>=0.12.5.1 && <0.13'
  req: ! '>=1.1.0 && <1.3'
  data-default: ! '>=0.7.1.1 && <0.8'
  containers: ! '>=0.5.11.0 && <0.7'
  iso8601-time: ! '>=0.1.5 && <0.2'
  wuss: ! '>=1.1.10 && <1.2'
  aeson: ! '>=1.3.1.1 && <1.5'
  vector: ! '>=0.12.0.1 && <0.13'
all-versions:
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
author: Karl
latest: 0.8.4
description-type: markdown
description: "# discord-haskell [![Build Status](https://travis-ci.org/aquarial/discord-haskell.png?branch=master)](https://travis-ci.org/aquarial/discord-haskell)\n\nPlease
  refer to `Getting Started` and `Notes` when\nrelevant. A few minutes of reading
  can save you\nhours of debugging.\n\nRecent change: `master` branch has the potentially
  broken, most\nrecent commits, `stable` has the most recent working version.\nPull
  requests are automatically made against `master` and it's\nnice to merge pull requests
  to test them.\n\n## Getting Started\n\n1 Create an application at the Developer
  Portal:\n<https://discordapp.com/developers/applications>.\n\n2 Add a 'Bot User'
  using the settings pane on the left. Take\nnote of `CLIENT ID` on this page.\n\n3
  Use the BOT PERMISSIONS tab to compute a Permissions Int to use for step 3\n\n3
  Invite the bot to a server filling in the `<information>` below.\nClient ID and
  Permissions come from previous steps.\n`https://discordapp.com/oauth2/authorize?client_id=<CLIENT_ID>&scope=bot&permissions=<PERMISSIONS>`\n\n4
  To send `CreateMessage` events with restCall, you must connect to the gateway at
  least once. Try running `examples/gateway.hs` with your token to satisfy this.\n[This
  is a Discord requirement.](https://discordapp.com/developers/docs/resources/channel#create-message)\n\n5
  Look at the examples to get an idea of how the library is used.\n[examples/gateway.hs](./examples/gateway.hs),\n[examples/rest.hs](./examples/rest.hs),\n[examples/cache.hs](./examples/cache.hs),
  and\n[examples/ping-pong.hs](./examples/ping-pong.hs)\n\n6 Understand what's available
  to the bot. Rest API calls can modify\n[Channels](https://discordapp.com/developers/docs/resources/channel#get-channel),\n[Emoji](https://discordapp.com/developers/docs/resources/emoji#list-guild-emojis),\n[Guilds](https://discordapp.com/developers/docs/resources/guild#get-guild),\netc.
  Most endpoints are covered with very similar names. `List Guild Emojis`\nbecomes
  `ListGuildEmojis`. You can use `:info` in `ghci` on type constructors to\nexplore
  the ADTs.\n\n[Gateway Events](https://discordapp.com/developers/docs/topics/gateway#commands-and-events-gateway-events)\nprovide
  the other source of info, using `nextEvent` and `sendCommand`. Use `:info` to explore
  `Event` and `GatewaySendable` ADTs.\n\n7 Add this library to your dependencies.
  discord-haskell is on hackage,\nopen an issue if the dependencies are too strict
  and you can't\nadd it to your project.. You can also use the github repo.\n\n```\n#
  in stack.yaml (if using stack)\nresolver: lts-12.10\nextra-deps:\n- git: git@github.com:aquarial/discord-haskell.git\n
  \ commit: <most recent stable commit>\n  extra-dep: true\n\n# in project.cabal\n
  \ build-depends:       base\n                     , discord-haskell\n\n```\n\n##
  Notes\n\n`loginRest` allows `restCall`. `loginRestGateway` allows `restCall`,\n`nextEvent`,
  `sendCommand`, and `readCache`. **Use `loginRest` if you don't need the\ngateway.**\n\nUse
  `Control.Exception.finally` with `stopDiscord` to safely\nkill background threads
  when running examples in ghci\n(otherwise exit ghci and reopen to kill threads).\n\nThe
  examples will work on the `stable` branch. The `master` branch\nhas the most recent
  (potentially) breaking changes.\n\nTo get the format to use for Emoji, type `\\:emoji:`
  into\na discord chat. You should copy-paste that into the request. This\ncan be
  a bit finicky.  The equivalent of `:thumbsup::skin-tone-3:`\nis `\"\U0001F44D\\127997\"`
  for example, and a custom emoji will look\nlike `<name:id_number>` or `name:id_number`.\n\n##
  Debugging\n\nIf something goes wrong with the library please open an issue. It is
  helpful,\nbut not always necessary, to attach a log of what's going on when the
  library\ncrashes.\n\nUse `loginRestGatewayWithLog :: Auth -> String -> IO (stuff)`
  to write the events to\na file. Remember to remove sensitive information before
  posting.\n\n## History\n\nThis library was originally forked from\n[discord.hs](https://github.com/jano017/Discord.hs).\nAfter
  rewriting the gateway/rest loops and extending the types\nI think it makes more
  sense to present this library as\nseparate from the source. The APIs are not compatible.\n\n##
  TO DO\n\nIn roughly the order I'm working on them:\n\n- Finish REST request ADT.
  Search for `-- todo` pattern\n- Add data types for\n[permissions](https://discordapp.com/developers/docs/topics/permissions)
  and\n[presences](https://discordapp.com/developers/docs/topics/gateway#presence-update)\n-
  Update channel types (fill out guildcategory)\n- Modify cache with Events\n- Add
  gateway ToJSON for events\n- Update comments on ADT types\n\n"
license-name: MIT
