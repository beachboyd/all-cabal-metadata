homepage: ''
changelog-type: text
hash: ea3fcedfefa7b47fe917a236bfc7a2d19edac48876e93925f174fb9feffa9308
test-bench-deps: {}
maintainer: m.misamore@gmail.com
synopsis: Finite directed cubical complexes and associated algorithms
changelog: ! "* 0.1.1.2 (2014-06-07)\n  - Added preliminary support for VTK output
  in ascii polydata format.\n    Input is suitable for use (and has been used) with
  ParaView. XTK's parser\n\t seems to be incomplete at the moment, unfortunately.
  Otherwise\n\t visualizations could happen via WebGL.\n  - Messed around with INLINE
  and -funbox-strict-fields a bit; no benefit\n    realized.\n\n"
basic-deps:
  bytestring: ==0.10.*
  base: ==4.6.*
  unordered-containers: ==0.2.*
  containers: ==0.5.*
  hashable: ==1.2.*
  parallel: ==3.2.*
  deepseq: ==1.3.*
  QuickCheck: ==2.6.*
  vector: ==0.10.*
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
author: Michael D. Misamore
latest: 0.1.2.0
description-type: text
description: ! "# directed-cubical\n## by Michael Misamore, Feb 2014\n\nThis package
  provides a library of functions for creating and manipulating finite directed cubical
  complexes, together with a module containing algorithms implementing the corner
  reduction techniques invented by the author for simplifying these complexes. Further
  enhancements will be added as time permits.  The underlying theory is described
  in the author's research article \"Computing Path Categories of Finite Directed
  Cubical Complexes\". \n\nSome examples are available under the \"Examples\" directory.
  To use them, unpack the tarball for this package into some directory, cd into directed-cubical-0.1.0.0,
  and run \"cabal install\" (assuming the Haskell Platform has been installed already).
  \ That should compile and install the modules on your system as well as build some
  library documentation (in the \"dist\" directory).  If all works okay so far, you
  should be able to change to the \"Examples\" directory and compile them with lines
  like\n\nghc -O2 swissFlag.hs -threaded\n\nwhich should give an optimized, threaded
  program that runs the corner reduction algorithm against the famous \"swiss flag\"
  example. Multiple threads work like this:\n\n./swissFlag +RTS -N4\n\nwhere 4 is
  the number of cores in this example.\n\n"
license-name: BSD-3-Clause
