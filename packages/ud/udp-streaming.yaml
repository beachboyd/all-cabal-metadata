homepage: https://hub.darcs.net/mihaigiurgeanu/udp-streaming
changelog-type: ''
hash: 37c3815a4075991131eb16367a524e0661480e54789cef2eb3f5641e92d81c80
test-bench-deps: {}
maintainer: mihai.giurgeanu@gmail.com
synopsis: Streaming to and from UDP socket
changelog: ''
basic-deps:
  streaming: ! '>=0.2 && <0.3'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.6 && <5.0'
  network: ! '>=2.0 && <3'
  resourcet: ! '>=1.2 && <2'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
author: Mihai Giurgeanu
latest: 0.2.0.0
description-type: markdown
description: ! "udp-streaming\n==============\n\nSimple fire and forget style streaming
  source and consumer in the spirit\nof the [udp-conduit](https://github.com/kqr/udp-conduit)
  package.\n\nHere's an example run in ghci that sends e messages to UDP port 8888
  on localhost,\nfrom the port 3000 on the localhost:\n\n    >>> import qualified
  Streaming.Prelude as S\n    >>> import Control.Monad.Trans.Resource\n    >>> import
  Streaming.UDP\n    >>>\n    >>> :set -XOverloadedStrings\n    >>>\n    >>> addr1
  <- SockAddrInet 8888 <$> (inet_addr \"127.0.0.1\")\n    >>>\n    >>> runResourceT
  $ toUDP \"127.0.0.1\" 3000 $ S.zip (S.each [\"hello\", \"world\", \"!\"]) (S.repeat
  addr1)\n    \nHere's an example in ghci where we continuously receive messages with
  a \nmaximum length of 500 bytes on port 8888 on localhost:\n\n    >>> import qualified
  Streaming.Prelude as S\n    >>> import Streaming.UDP\n    >>> import Control.Monad.Trans.Resource\n
  \   >>> import qualified Data.ByteString as B \n    >>>\n    >>>\n    >>> runResourceT
  $ S.stdoutLn $ S.map (map (toEnum.fromEnum) . B.unpack) $ S.map fst $ fromUDP \"127.0.0.1\"
  8888 500\n\n\nNow, here's an example where we receive messages on port 8001, encode
  them as hex\ndigits (using base16-bytestring package), and then send them on to
  port 8002.\n\n    >>> import qualified Streaming.Prelude as S\n    >>> import Streaming.UDP\n
  \   >>> import Data.ByteString.Base16 (encode)\n    >>> import Control.Monad.Trans.Resource\n
  \   >>>\n    >>> addr2 <- SockAddrInet 8002 <$> (inet_addr \"127.0.0.1\")\n    >>>\n
  \   >>> runResourceT $ toUDP \"127.0.0.1\" 8002 $ S.zip (S.map encode $ S.map fst
  $ fromUDP \"127.0.0.1\" 8001 500) (S.repeat addr2)\n\nOr you could, in the previous
  example, to also log the messages receved, before processing and\nsend them further:\n\n
  \   >>> runResourceT $ toUDP \"127.0.0.1\" 3000 $ S.zip (S.map encode $ S.map fst
  $ S.print $ S.copy $ fromUDP \"127.0.0.1\" 8001 500) (S.repeat addr2)\n    \n"
license-name: MIT
