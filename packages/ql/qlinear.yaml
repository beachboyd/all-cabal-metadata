homepage: https://github.com/JuniorGarbageCollector/QLinear#readme
changelog-type: ''
hash: efb775c87c9cc788c9d6b000b59c5f1d814e75e93c59da1c81fd156c217b4088
test-bench-deps:
  split: -any
  base: -any
  hspec: -any
  parsec: -any
  haskell-src-exts: -any
  linear: -any
  haskell-src-meta: -any
  template-haskell: -any
maintainer: GooseDB@yandex.ru
synopsis: Typesafe library for linear algebra
changelog: ''
basic-deps:
  split: '>=0.2.3 && <0.3'
  base: '>=4.13.0 && <4.15'
  parsec: '>=3.1.13 && <3.2'
  haskell-src-exts: '>=1.23.1 && <1.24'
  linear: '>=1.21.1 && <1.22'
  haskell-src-meta: '>=0.8.5 && <0.9'
  template-haskell: '>=2.15.0 && <2.16'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: JuniorGarbageCollector
latest: 0.1.0.1
description-type: markdown
description: "# QLinear\n\nQLinear is type safe library for linear algebra based on
  `\"macro-constructors\"`\n\n## Constructors:\n * matrix\n    > ```[matrix| a b ;
  c d |]``` builds matrix __2x2__  `[ [a, b], [c, d] ]`  \n    \n    Example: \n    ```haskell\n
  \   [matrix| 1 2; 3 4 |] ~+~ [matrix| 2 3; 4 5 |] == [matrix| 3 5; 7 9 |] \n    ```
  \  \n    > Also you can't, for example, add two matrix with different size. \n    ```haskell\n
  \  [matrix| 1 2; 3 4 |] ~+~ [matrix| 1 2 3; 4 5 6; 7 8 9 |] -- will not be compiled\n
  \   ```\n\n  * vector\n    > ```[vector| a b c d |]``` builds matrix __4x1__ `[
  [a], [b], [c], [d] ]`  \n * operator\n    > ```[operator| (x, y) => (y, x) |]```
  builds matrix __2x2__ of operator `[ [0, 1], [1, 0] ]` that swaps coodrinates  \n
  \   > ```[operator| (x, y) => (2 * x, y) |]``` builds matrix __2x2__ of operator
  `[ [2, 0], [0, 1] ]` that doubles `x` coordinate  \n   \n   Example: \n    ```haskell\n
  \   [operator| (x, y) => (3 * y, x / 2) |] ~*~ [vector| 2 8 |] == [vector| 24 1
  |]\n    ```\n## Syntax:\n   * matrix: `val11 val12 .. val1n; val21 val22 .. val2n;
  ..; valm1 valm2 .. valmn `\n   * vector: `val1 val2 .. valn`\n   * operator: `(var1,
  var2, .., varn) =>  (exp1, exp2, .., expn)`  \n     where \n     * `val` is `number
  literal`, `variable` or `any Haskell expression` between `(` and `)`\n     * `var`
  is Haskell variable   \n     * `exp` is any Haskell expression\n  ---\nAlso there
  are basic operations as determinant, transposition, etc."
license-name: BSD-3-Clause
