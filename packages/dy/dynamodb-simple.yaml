homepage: https://github.com/ondrap/dynamodb-simple
changelog-type: markdown
hash: bbb02e8d8231e1f2571a14962e16f4d260a354a7b555bf5e596c501d36cc7355
test-bench-deps:
  amazonka: -any
  base: -any
  dynamodb-simple: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  safe-exceptions: -any
  conduit: -any
  semigroups: -any
  tagged: -any
  containers: -any
  lens: -any
  amazonka-dynamodb: ! '>=1.4.5'
  hashable: -any
  transformers: -any
maintainer: palkovsky.ondrej@gmail.com
synopsis: Typesafe library for working with DynamoDB database
changelog: ! '# 0.4.0.1


  - Fixed default signatures to compile with GHC 8.2


  # 0.4.0.0


  - Slightly changed TH API to allow table prefixing

  - Better consistency settings detection for queryOverIndex


  # 0.3.0.0


  - API changes regarding position of `Proxy`

  - Added index->table conversion functions

  - Added conduits for left/inner join

  - Added queryOverIndex

  - Simplification of exposed function signatures


  # 0.2.0.0


  - Changed API to always include a `Proxy`

  - Added proxy generation (`tTable`, `iTableIndex`)

  - Added polymorphic lenses for fields starting with underscore

  - Changed generated column names from `colColumn` to `column''`

  - Overriden buggy amazonka paging

'
basic-deps:
  amazonka: -any
  exceptions: -any
  monad-supply: -any
  bytestring: ! '>=0.10.8.0'
  base: ! '>=4.8 && <5'
  unordered-containers: -any
  text: -any
  double-conversion: -any
  monad-loops: -any
  conduit: -any
  semigroups: -any
  tagged: -any
  containers: -any
  lens: -any
  amazonka-dynamodb: ! '>=1.4.5'
  amazonka-core: -any
  hashable: -any
  transformers: -any
  uuid-types: -any
  scientific: -any
  generics-sop: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
author: Ondrej Palkovsky
latest: '0.5.0.0'
description-type: markdown
description: ! "# DynamoDB layer for Haskell\n\n[![Build Status](https://travis-ci.org/ondrap/dynamodb-simple.svg?branch=master)](https://travis-ci.org/ondrap/dynamodb-simple)
  [![Hackage](https://img.shields.io/hackage/v/dynamodb-simple.svg)](https://hackage.haskell.org/package/dynamodb-simple)\n\nThis
  library intends to simplify working with DynamoDB AWS database.\nIt uses Generics
  code ([generics-sop](https://hackage.haskell.org/package/generics-sop)) on top of
  your structures\nand just by adding a few instances allows you to easily generate
  AWS\ncommands.\n\n````haskell\ndata Test = Test {\n    category :: T.Text\n  , user
  \    :: T.Text\n  , subject  :: T.Text\n  , replies  :: Int\n} deriving (Show)\n--
  Generate instances and category', user' etc. variables for queries/updates\nmkTableDefs
  \"migrate\" (tableConfig \"\" (''Test, WithRange) [] [])\n\ntest :: IO ()\ntest
  = do\n  lgr  <- newLogger Info stdout\n  setEnv \"AWS_ACCESS_KEY_ID\" \"XXXXXXXXXXXXXX\"\n
  \ setEnv \"AWS_SECRET_ACCESS_KEY\" \"XXXXXXXXXXXXXXfdjdsfjdsfjdskldfs+kl\"\n  env
  \ <- newEnv Discover\n  let dynamo = setEndpoint False \"localhost\" 8000 dynamoDB\n
  \ let newenv = env & configure dynamo & set envLogger lgr\n  runResourceT $ runAWS
  newenv $ do\n      migrate mempty Nothing -- Create tables, indices etc.\n      --\n
  \     putItem (Test \"news\" \"john\" \"test\" 20)\n      --\n      item <- getItem
  Eventually tTest (\"news\", \"john\")\n      liftIO $ print item\n      --\n      items
  <- scanCond tTest (replies' >. 15) 10\n      liftIO $ print items\n````\n### Features\n\n-
  Global secondary indexes.\n- Local secondary indexes.\n- Tables with only hash keys
  as well as tables with combined hash and sort key.\n- Sparse indexes (define the
  column as `Maybe` in a table, omit the `Maybe` in index definition).\n- Automatically
  generate polymorphic lenses to access fields in main table and index records.\n-
  Standard datatypes including `Tagged` and basic default instances for data types
  supporting\n  `Show/Read`.\n- New types can be added easily.\n- High-level, easy-to-use
  API - hides intricacies of both DynamoDB and amazonka library.\n- Type-safe conditions,
  including nested structures.\n- Type-safe update actions.\n- Template-haskell macro
  to easily create all relevant instances.\n- 'Schema migration' - upon startup checks
  if the database schema matches the definition\n  and, if possible, adjusts the database.
  If it is impossible, it fails.\n- Automatic handling of invalid values (empty strings,
  empty sets). Automatic rewriting of\n  queries when searching for these empty values.\n-
  Compatible with GHC8 `DuplicateRecordFields`\n- Customizable table and index names.
  Custom translation of field names to attribute names.\n- AWS Dynamo streaming settings.\n-
  Utilities to help with simulated joins or retriving original data from index.\n-
  Both conduit and page-based API.\n\n### What is planned\n\n- Support for automatic
  versioning of fields.\n\n### Limitations\n\n- Projections are not supported. Using
  some generic programming on tuples it should be possible.\n- You cannot compare
  attributes between themselves (i.e. `currentAccount' >=. averageAccount'`).\n  I'm
  not sure this would be currently technically possible. Does anybody need it?\n\n###
  Handling of NULLs\n\nDynamoDB does not accept empty strings/sets. It accepts `NULL`,
  but that is not acceptable\nin fields that are used for sparse indexing.\n\nEmpty
  string and empty set are represented by omitting the value.\n\n* `Just Nothing ::
  Maybe (Maybe a)` will become `Nothing` on retrieval.\n* `[Just 1, Nothing, Just
  3]` will become `[Just 1, Just 3]` on retrieval.\n* `HashMap Text (Maybe a)` is
  not a good idea; missing values will disappear.\n* `Maybe (Set a)` will become `Nothing`
  on empty set\n* Don't try to use inequality comparisons (`>.`, `<.`) on empty strings.\n*
  If you use `maybeCol' == Nothing`, it gets internally replaced\n  by `attr_missing(maybeCol)`,
  so it will behave as expected. The same with\n  empty `String` or `Set`. Keep that
  in mind when traversing nested structures.\n* In case of schema change, `Maybe`
  columns are considered `Nothing`.\n* In case of schema change, `String` columns
  are decoded as empty strings, `Set` columns\n  as empty sets, `[a]` columns as empty
  lists.\n* Condition for `== \"\"`, `== []` etc. is automatically enhanced to account
  for non-existent attributes\n  (i.e. after schema change).\n* Empty list/empty hashmap
  is represented as empty list/hashmap; however it is allowed to be decoded\n  even
  when the attribute is missing in order to allow better schema migrations.\n"
license-name: BSD3
