homepage: https://github.com/GaloisInc/s-cargot-letbind
changelog-type: markdown
hash: 238100aa0badc2f285fb7e5bf423b2f3465562061dcce0f8ecca45aa6f279ef6
test-bench-deps:
  s-cargot: ! '>=0.1.4.0 && <0.2'
  base: ! '>=4.9 && <5'
  text: ! '>=1.2 && <2'
  s-cargot-letbind: -any
  parsec: ! '>=3.1 && <4'
  HUnit: ! '>=1.6 && <1.7'
maintainer: kquick@galois.com
synopsis: Enables let-binding and let-expansion for s-cargot defined S-expressions.
changelog: ! "# Revision history for s-cargot-letbind\n\n## 0.2.3.0  -- 2018-06-12\n\n\t*
  Relax upper bound to allow build with GHC 8.4\n\n\t* Haddock documentation fix for
  special characters.\n\n## 0.2.2.0  -- 2018-03-02\n\n\t* Updated to use s-cargot
  release 0.1.4.0.\n\n\tMore performance fixes in s-cargot for `basicPrint`, and using\n\t`unconstrainedPrint`
  without a width specification (because a\n\twidth specification devolves into `basicPrint`
  anyhow).\n\n## 0.2.1.0  -- 2018-03-02\n\n\t* Updated to use s-cargot release 0.1.3.0
  and the\n\t`unconstrainedPrint` added in that version for increased\n\tperformance.\n\n##
  0.2.0.0  -- 2018-02-16\n\n\t* Added verification ability to ensure let-bind variables
  are\n\talways unique with respect to each-other and with respect to all\n\tgenerated
  symbol strings within the s-expression.  This is\n\tperformed internally within
  the 'discoverLetBindings' function,\n\tbut requires the ability to get the string
  representation of an\n\tS-expression atom, so the 'extractStr' function is added
  to the\n\t'DiscoveryGuide' to support this.  If not provided, or if the\n\tprovided
  form returns Nothing, no validation will be performed.\n\n\t* Suppress generation
  of let-binding phrase if there are no\n\t  discovered bindings to apply.\n\n## 0.1.0.0
  \ -- 2018-02-14\n\n\t* Initial version.\n\n"
basic-deps:
  s-cargot: ! '>=0.1.4.0 && <0.2'
  base: ! '>=4.9 && <5'
  text: ! '>=1.2 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
author: Kevin Quick
latest: 0.2.3.0
description-type: haddock
description: ! 'This module allows let bindings to be introduced into the S-Expression

  syntax.


  For example, instead of:


  >    (concat (if (enabled x) (+ (width x) (width y)) (width y))

  >            " meters")


  this can be re-written with let bindings:


  >    (let ((wy    (width y))

  >          (wboth (+ (width x) wy))

  >          (wide  (if (enabled x) wboth wy))

  >         )

  >      (concat wide " meters"))


  As S-expressions grow larger, let-binding can help readability for

  those expressions.  This module provides the ''discoverLetBindings''

  function that will convert an S-expression into one containing

  let-bound variables, and the inverse function ''letExpand'' which will

  expand let-bound variables back into the expression.'
license-name: ISC
