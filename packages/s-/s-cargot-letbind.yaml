homepage: https://github.com/GaloisInc/s-cargot-letbind
changelog-type: markdown
hash: 51c86d037a188d953af85b5a835b3678941f78ff79ac452329fe41a2d895c3a0
test-bench-deps:
  s-cargot: ! '>=0.1.0.0'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2 && <2'
  s-cargot-letbind: -any
  parsec: ! '>=3.1 && <4'
  HUnit: ! '>=1.6 && <1.7'
maintainer: kquick@galois.com
synopsis: Enables let-binding and let-expansion for s-cargot defined S-expressions.
changelog: ! "# Revision history for s-cargot-letbind\n\n## 0.2.0.0  -- 2018-02-16\n\n\t*
  Added verification ability to ensure let-bind variables are\n\t  always unique with
  respect to each-other and with respect to all\n      generated symbol strings within
  the s-expression.  This is\n\t  performed internally within the 'discoverLetBindings'
  function,\n\t  but requires the ability to get the string representation of an\n
  \     S-expression atom, so the 'extractStr' function is added to the\n\t  'DiscoveryGuide'
  to support this.  If not provided, or if the\n\t  provided form returns Nothing,
  no validation will be performed.\n\n\t* Suppress generation of let-binding phrase
  if there are no\n\t  discovered bindings to apply.\n\n## 0.1.0.0  -- 2018-02-14\n\n\t*
  Initial version.\n\n"
basic-deps:
  s-cargot: ! '>=0.1.0.0'
  base: ! '>=4.10 && <4.11'
  text: ! '>=1.2 && <2'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Kevin Quick
latest: '0.2.0.0'
description-type: haddock
description: ! 'This module allows let bindings to be introduced into the S-Expression

  syntax.


  For example, instead of:


  >    (concat (if (enabled x) (+ (width x) (width y)) (width y))

  >            " meters")


  this can be re-written with let bindings:


  >    (let ((wy    (width y))

  >          (wboth (+ (width x) wy))

  >          (wide  (if (enabled x) wboth wy))

  >         )

  >      (concat wide " meters"))


  As S-expressions grow larger, let-binding can help readability for

  those expressions.  This module provides the ''discoverLetBindings''

  function that will convert an S-expression into one containing

  let-bound variables, and the inverse function ''letExpand'' which will

  expand let-bound variables back into the expression.'
license-name: ISC
