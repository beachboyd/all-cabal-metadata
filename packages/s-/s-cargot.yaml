homepage: https://github.com/aisamanra/s-cargot
changelog-type: markdown
hash: 1a416467bc26b374f3cf522e97efdcffedaa30b6421375c2f8e3dcb10540d338
test-bench-deps:
  s-cargot: -any
  base: ! '>=4.7 && <5'
  text: ! '>=1.2 && <2'
  parsec: ! '>=3.1 && <4'
  QuickCheck: ! '>=2.8 && <3'
maintainer: Getty Ritter <s-cargot@infinitenegativeutility.com>
synopsis: A flexible, extensible s-expression library.
changelog: ! "v0.1.3.0\n=======\n\nFeatures:\n\n* Added the `Located` type for source
  location tracking for `atom`\n  values (thanks ckoparkar!)\n* Added `unconstrainedPrint`,
  which does not try to restrict a printed\n  s-expression to a fixed width but will
  attempt to indent it in a\n  reasonable way nonetheless.\n\nFixes:\n\n* Pretty-printing
  configurations created with `flatPrint` now use a\n  _much_ more efficient pretty-printer.\n*
  Internally, pretty-printers use a richer type which improves\n  performance somewhat
  by cutting down on repeated intermediate\n  printing, and future work will build
  on this to make printing even\n  more efficient.\n\nv0.1.2.0\n=======\n\n* Added
  `atom` and `mkAtomParser` helper functions for new\n  user-defined atom types.\n*
  New parsers for various atom types:\n    * Exported parsers for individual Haskell
  literals, to allow\n      building new variations on the `HaskLike` atom type.\n
  \   * Added syntaxes for arbitrary-base numeric literals in the style of\n      Common
  Lisp and M4\n* Added a suite of basic QuickCheck tests\n* Compatibility fix: GHC
  7.8 didn't allow type signatures on pattern\n  synonyms.\n\n\nv0.1.1.0\n=======\n\n*
  Strongly considered but did not keep a changelog. â€¦sorry.\n"
basic-deps:
  s-cargot: -any
  base: ! '>=4.7 && <5'
  text: ! '>=1.2 && <2'
  parsec: ! '>=3.1 && <4'
  containers: ! '>=0.5 && <1'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.2.0'
- '0.1.3.0'
author: Getty Ritter <s-cargot@infinitenegativeutility.com>
latest: '0.1.3.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/s-cargot.svg)](https://hackage.haskell.org/package/s-cargot)\n\nS-Cargot
  is a library for parsing and emitting S-expressions, designed to be flexible, customizable,
  and extensible. Different uses of S-expressions often understand subtly different
  variations on what an S-expression is. The goal of S-Cargot is to create several
  reusable components that can be repurposed to nearly any S-expression variant.\n\nS-Cargot
  does _not_ aim to be the fastest or most efficient s-expression library. If you
  need speed, then it would probably be best to roll your own [AttoParsec]() parser.
  Wherever there's a choice, S-Cargot errs on the side of maximum flexibility, which
  means that it should be easy to plug together components to understand various existing
  flavors of s-expressions or to extend it in various ways to accomodate new flavors.\n\n##
  What Are S-Expressions?\n\nS-expressions were originally the data representation
  format in Lisp implementations, but have found broad uses outside of that as a data
  representation and storage format. S-expressions are often understood as a representation
  for binary trees with optional values in the leaf nodes: an empty leaf is represented
  with empty parens `()`, a non-empty leaf is represented as the scalar value it contains
  (often tokens like `x` or other programming language literals), and an internal
  node is represented as `(x . y)` where `x` and `y` are standing in for other s-expressions.
  In Lisp parlance, an internal node is called a _cons cell_, and the first and second
  elements inside it are called the _car_ and the _cdr_, for historical reasons. Non-empty
  lef nodes are referred to in the s-cargot library as _atoms_.\n\nOften, s-expressions
  are used to represent lists, in which case the list is treated as a right-branching
  tree with an empty leaf as the far right child of the tree. S-expression languages
  have a shorthand way of representing these lists: instead of writing successsively
  nested pairs, as in `(1 . (2 . (3 . ()))`, they allow the sugar `(1 2 3)`. This
  is the most common way of writing s-expressions, even in languages that allow raw
  cons cells (or \"dotted pairs\") to be written.\n\nThe s-cargot library refers to
  expressions where every right-branching sequence ends in an empty leaf as _well-formed
  s-expressions_. Note that any s-expression which can be written without using a
  dotted pair is necessarily well-formed.\n\nUnfortunately, while in common use, s-expressions
  do not have a single formal standard. They are often defined in an ad-hoc way, which
  means that s-expressions used in different contexts will, despite sharing a common
  parentheses-delimited structure, differ in various respects. Additionally, because
  s-expressions are used as the concrete syntax for languages of the Lisp family,
  they often have conveniences (such as comment syntaxes) and other bits of syntactic
  sugar (such as _reader macros_, which are described more fully later) that make
  parsing them much more complicated. Even ignoring those features, the _atoms_ recognized
  by a given s-expression variation can differ widely.\n\nThe s-cargot library was
  designed to accomodate several different kinds of s-expression formats, so that
  an s-expression format can be easily expressed as a combination of existing features.
  It includes a few basic variations on s-expression languages as well as the tools
  for parsing and emitting more elaborate s-expressions variations without having
  to reimplement the basic plumbing yourself.\n\n## Using the Library\n\nThe central
  way of interacting with the S-Cargot library is by creating and modifying datatypes
  which represent specifications for parsing and printing s-expressions. Each of those
  types has two type parameters, which are often called `atom` and `carrier`:\n\n~~~~\n
  \                        +------ the type that represents an atom or value\n                         |\n
  \                        |    +- the Haskell representation of the SExpr itself\n
  \                        |    |\nparser  :: SExprParser  atom carrier\nprinter ::
  SExprPrinter atom carrier\n~~~~\n\nVarious functions will be provided that modify
  the carrier type (i.e. the output type of parsing or input type of serialization)
  or the language recognized by the parsing.\n\n## Representing S-expressions\n\nThere
  are three built-in representations of S-expression lists: two of them are isomorphic,
  as one or the other might be convenient for working with S-expression data in a
  particular circumstance, while the third represents only the \"well-formed\" subset
  of possible S-expressions, which is often convenient when using s-expressions for
  configuration or data storage.\n\n~~~~.haskell\n-- cons-based representation\ndata
  SExpr atom\n  = SCons (SExpr atom) (SExpr atom)\n  | SNil\n  | SAtom atom\n\n--
  list-based representation\ndata RichSExpr atom\n  = RSList [RichSExpr atom]\n  |
  RSDotList [RichSExpr atom] atom\n  | RSAtom atom\n\n-- well-formed representation\ndata
  WellFormedSExpr atom\n  = WFSList [WellFormedSExpr atom]\n  | WFSAtom atom\n~~~~\n\nThe
  `WellFormedSExpr` representation should be structurally identical to the `RichSExpr`
  representation in all cases where no improper lists appear in the source. Both of
  those representations are often more convenient than writing multiple nested `SCons`
  constructors, in the same way that the `[1,2,3]` syntax in Haskell is often less
  tedious than writing `1:2:3:[]`.\n\nFunctions for converting back and forth between
  representations are provided, but you can also modify a `SExprSpec` to parse to
  or serialize from a particular representation using the `asRich` and `asWellFormed`
  functions.\n\n~~~~.haskell\n>>> decode basicParser \"(a b)\"\nRight [SCons (SAtom
  \"a\") (SCons (SAtom \"b\") SNil)]\n>>> decode (asRich basicParser) \"(a b)\"\nRight
  [RSList [RSAtom \"a\",RSAtom \"b\"]]\n>>> decode (asWellFormed basicParser) \"(a
  b)\"\nRight [WFSList [WFSAtom \"a\",WFSAtom \"b\"]]\n>>> decode basicParser \"(a
  . b)\"\nRight [SCons (SAtom \"a\") (SAtom \"b\")]\n>>> decode (asRich basicParser)
  \"(a . b)\"\nRight [RSDotted [RSAtom \"a\"] \"b\"]\n>>> decode (asWellFormed basicParser)
  \"(a . b)\"\nLeft \"Found atom in cdr position\"\n~~~~\n\nThese names and patterns
  can be quite long, especially when you're constructing or matching on S-expression
  representations in Haskell source, so S-Cargot also exports several pattern synonyms
  that can be used both as expressions and in pattern-matching. These are each contained
  in their own module, as their names conflict with each other, so it's recommended
  to only import the module corresponding to the type that you plan on working with:\n\n~~~~.haskell\n>>>
  import Data.SCargot.Repr.Basic\n>>> A 2 ::: A 3 ::: A 4 ::: Nil\nSCons (SAtom 2)
  (SCons (SAtom 3) (SCons (SAtom 4) SNil))\n~~~~\n\n~~~~.haskell\n>>> import Data.SCargot.Repr.WellFormed\n>>>
  L [A 1,A 2,A 3]\nWFSList [WFSAtom 1,WFSAtom 2,WFSAtom 3]\n>>> let sexprSum (L xs)
  = sum (map sexprSum xs); sexprSum (A n) = n\n>>> :t sexprSum\nsexprSum :: Num a
  => WellFormedSExpr a -> a\n>>> sexprSum (L [A 2, L [A 3, A 4]])\n9\n~~~~\n\nIf you
  are using GHC 7.10 or later, several of these will be powerful bidirectional pattern
  synonyms that allow both constructing and pattern-matching on s-expressions in non-trivial
  ways:\n\n~~~~.haskell\n>>> import Data.SCargot.Repr.Basic\n>>> L [ A 2, A 3, A 4
  ]\nSCons (SAtom 2) (SCons (SAtom 3) (SCons (SAtom 4) SNil))\n~~~~\n\n## Atom Types\n\nAny
  type can serve as an underlying atom type in an S-expression parser or serializer,
  provided that it has a Parsec parser or a serializer (i.e. a way of turning it into
  `Text`.) For these examples, I'm going to use a very simple serializer that is roughly
  like the one found in `Data.SCargot.Basic`, which parses symbolic tokens of letters,
  numbers, and some punctuation characters. This means that the 'serializer' here
  is just the identity function which returns the relevant `Text` value:\n\n~~~~.haskell\nparser
  :: SExprParser Text (SExpr Text)\nparser = mkParser (pack <$> many1 (alphaNum <|>
  oneOf \"+-*/!?\"))\n\nprinter :: SExprPrinter Text (SExpr Text)\nprinter = flatPrint
  id\n~~~~\n\nA more elaborate atom type might distinguish between different varieties
  of token. A small example (that understands just alphabetic identifiers and decimal
  numbers) would look like this:\n\n~~~~.haskell\nimport Data.Text (Text, pack)\n\ndata
  Atom = Ident Text | Num Int deriving (Eq, Show)\n\npAtom :: Parser Atom\npAtom =
  \ ((Num . read) <$> many1 digit)\n     <|> (Ident . pack) <$> takeWhile1 isAlpha)\n\nsAtom
  :: Atom -> Text\nsAtom (Ident t) = t\nsAtom (Num n)   = pack (show n)\n\nmyParser
  :: SExprParser Atom (SExpr Atom)\nmyParser = mkParser pAtom\n\nmyPrinter :: SExprPrinter
  Atom (SExpr Atom)\nmyPrinter = flatPrint sAtom\n~~~~\n\nWe can then use this newly
  created atom type within an S-expression for both parsing and serialization:\n\n~~~~.haskell\n>>>
  decode myParser \"(foo 1)\"\nRight [SCons (SAtom (Ident \"foo\")) (SCons (SAtom
  (Num 1)) SNil)]\n>>> encode mySpec [L [A (Num 0), A (Ident \"bar\")]]\n\"(0 bar)\"\n~~~~\n\nSeveral
  common atom types appear in the module [`Data.SCargot.Common`](https://hackage.haskell.org/package/s-cargot-0.1.0.0/docs/Data-SCargot-Common.html),
  including various kinds of identifiers and number literals. The long-term plan for
  S-Cargot is to include more and more kinds of built-in atoms, in order to make putting
  together an S-Expression parser even easier. If you have a common syntax for an
  atom type that you think should be represented there, please [suggest it in an issue](https://github.com/aisamanra/s-cargot/issues)!\n\nTo
  make it easier to build up parsers for atom types without having to use Parsec manually,
  S-Cargot also exports `Data.SCargot.Atom`, which provides a shorthand way of building
  up a `SExprParser` from a list of parser-constructor pairs:\n\n~~~~.haskell\nimport
  Data.SCargot.Atom (atom, mkParserFromAtoms)\nimport Data.SCargot.Common (parseR7RSIdent,
  signedDecNumber)\n\n-- we want our atom type to understand R7RS identifiers and\n--
  signed decimal numbers\ndata Atom\n  = Ident Text\n  | Num Integer\n    deriving
  (Eq, Show)\n\nmyParser :: SExprParser Atom (SExpr Atom)\nmyParser = mkAtomParser\n
  \ [ atom Ident parseR7RSIdent\n  , atom Num   signedDecNumber\n  ]\n~~~~\n\n## Carrier
  Types\n\nAs pointed out above, there are three different \"carrier\" types that
  are used to represent S-expressions by the library, but you can use any type as
  a carrier type for a spec. This is particularly useful when you want to parse into
  your own custom tree-like type. For example, if we wanted to parse a small S-expression-based
  arithmetic language, we could define a data type and transformations from and to
  an S-expression type:\n\n~~~~.haskell\nimport           Data.Char (isDigit)\nimport
  \          Data.Text (Text)\nimport qualified Data.Text as T\n\n\ndata Expr = Add
  Expr Expr | Num Int deriving (Eq, Show)\n\ntoExpr :: RichSExpr Text -> Either String
  Expr\ntoExpr (L [A \"+\", l, r]) = Add <$> toExpr l <*> toExpr r\ntoExpr (A c)\n
  \ | T.all isDigit c = pure (Num (read (T.unpack c)))\n  | otherwise       = Left
  \"Non-numeric token as argument\"\ntoExpr _ = Left \"Unrecognized s-expr\"\n\nfromExpr
  :: Expr -> RichSExpr Text\nfromExpr (Add x y) = L [A \"+\", fromExpr x, fromExpr
  y]\nfromExpr (Num n)   = A (T.pack (show n))\n~~~~\n\nthen we could use the `convertSpec`
  function to add this directly to the `SExprSpec`:\n\n~~~~.haskell\n>>> let parser'
  = setCarrier toExpr (asRich myParser)\n>>> :t parser'\nSExprParser Atom Expr\n>>>
  decode parser' \"(+ 1 2)\"\nRight [Add (Num 1) (Num 2)]\n>>> decode parser' \"(0
  1 2)\"\nLeft \"Unrecognized s-expr\"\n~~~~\n\n## Comments\n\nBy default, an S-expression
  parser does not include a comment syntax, but the provided `withLispComments` function
  will cause it to understand traditional Lisp line-oriented comments that begin with
  a semicolon:\n\n~~~~.haskell\n>>> decode basicParser \"(this ; has a comment\\n
  inside)\\n\"\nLeft \"(line 1, column 7):\\nunexpected \\\";\\\"\\nexpecting space
  or atom\"\n>>> decode (withLispComments basicParser) \"(this ; has a comment\\n
  inside)\\n\"\nRight [SCons (SAtom \"this\") (SCons (SAtom \"inside\") SNil)]\n~~~~\n\nAdditionally,
  you can provide your own comment syntax in the form of an Parsec parser. Any Parsec
  parser can be used, so long as it meets the following criteria:\n- it is capable
  of failing (as is called until SCargot believes that there are no more comments)\n-
  it does not consume any input in the case of failure, which may involve wrapping
  the parser in a call to `try`\n\nFor example, the following adds C++-style comments
  to an S-expression format:\n\n~~~~.haskell\n>>> let cppComment = string \"//\" >>
  manyTill newline >> return ()\n>>> decode (setComment cppComment basicParser) \"(a
  //comment\\n  b)\\n\"\nRight [SCons (SAtom \"a\") (SCons (SAtom \"b\") SNil)]\n~~~~\n\nThe
  [`Data.SCargot.Comments`](https://hackage.haskell.org/package/s-cargot/docs/Data-SCargot-Comments.html)
  module defines some helper functions for creating comment syntaxes, so the `cppComment`
  parser above could be defined as simply\n\n~~~~.haskell\n>>> let cppComment = lineComment
  \"//\"\n>>> decode (setComment cppComment basicParser) \"(a //comment\\n  b)\\n\"\nRight
  [SCons (SAtom \"a\") (SCons (SAtom \"b\") SNil)]\n~~~~\n\nAdditionally, a handful
  of common comment syntaxes are defined in [`Data.SCargot.Comments`](https://hackage.haskell.org/package/s-cargot/docs/Data-SCargot-Comments.html),
  including C-style, Haskell-style, and generic scripting-language-style comments,
  so in practice, we could write the above example as\n\n~~~~.haskell\n>>> decode
  (withCLikeLineComments basicParser) \"(a //comment\\n  b)\\n\"\nRight [SCons (SAtom
  \"a\") (SCons (SAtom \"b\") SNil)]\n~~~~\n\n## Reader Macros\n\nIn Lisp variants,
  a _reader macro_ is a macro---a function that operates on syntactic structures---which
  is invoked during the _scanning_, or lexing, phase of a Lisp parser. This allows
  the _lexical_ syntax of a Lisp to be modified. A very common reader macro in most
  Lisp variants is the single quote, which allows the syntax `'expr` to stand as sugar
  for the literal s-expression `(quote expr)`. The S-Cargot library accomodates this
  by keeping a map from characters to Haskell functions that can be used analogously
  to reader macros. This is a common enough special case that there are shorthand
  ways of writing this, but we could support the `'expr` syntax by creating a Haskell
  function to turn `expr` into `(quote expr)` and adding that as a reader macro associated
  with the character `'`:\n\n~~~~.haskell\n>>> let quote expr = SCons (SAtom \"quote\")
  (SCons expr SNil)\n>>> :t quote\nquote :: IsString atom => SExpr atom -> SExpr atom\n>>>
  let addQuoteReader = addReader '\\'' (\\ parse -> fmap quote parse)\n>>> addQuoteReader
  :: IsString atom => SExprParser atom c -> SExprParser atom c\n>>> decode (addQuoteReader
  basicParser) \"'foo\"\nRight [SCons (SAtom \"quote\") (SCons (SAtom \"foo\") SNil)]\n~~~~\n\nA
  reader macro is passed the an s-expression parser so that it can perform recursive
  parse calls, and it can return any `SExpr` it would like. It may also take as much
  or as little of the remaining parse stream as it would like. For example, the following
  reader macro does not bother parsing anything else and merely returns a new token:\n\n~~~~.haskell\n>>>
  let qmReader = addReader '?' (\\ _ -> pure (SAtom \"huh\"))\n>>> decode (qmReader
  basicParser) \"(?1 2)\"\nRight [SCons (SAtom \"huh\") (SCons (SAtom \"1\") (SCons
  (SAtom \"2\") SNil))]\n~~~~\n\nWe can define a similar reader macro directly in
  Common Lisp, although it's important to note that Common Lisp converts all identifiers
  to uppercase, and also that the quote in line `[3]` is necessary so that the Common
  Lisp REPL doesn't attempt to evaluate `(huh 1 2)` as code:\n\n~~~~.lisp\n[1]> (defun
  qm-reader (stream char) 'huh)\nQM-READER\n[2]> (set-macro-character #\\? #'qm-reader)\nT\n[3]>
  '(?1 2)\n(HUH 1 2)\n~~~~\n\nReader macros in S-Cargot can be used to define bits
  of Lisp syntax that are not typically considered the purview of S-expression parsers.
  For example, some Lisp-derived languages allow square brackets as a subsitute for
  proper lists, and to support this we could define a reader macro that is indicated
  by the `[` character and repeatedly calls the parser until a `]` character is reached:\n\n~~~~.haskell\n>>>
  let vec p = (char ']' *> pure SNil) <|> (SCons <$> p <*> vec p)\n>>> :t vec\nvec\n
  \ :: Stream s m Char =>\n     ParsecT s u m (SExpr atom) -> ParsecT s u m (SExpr
  atom)\n>>> let withVecReader = addReader '[' vec\n>>> decode (asRich (withVecReader
  basicParser)) \"(1 [2 3])\"\nRight [RSList [RSAtom \"1\",RSList [RSAtom \"2\",RSAtom
  \"3\"]]]\n~~~~\n\n## Pretty-Printing and Indentation\n\nThe s-cargot library also
  includes a simple but often adequate pretty-printing system for S-expressions. A
  printer that prints a single-line s-expression is created with `flatPrint`:\n\n~~~~.haskell\n>>>
  let printer = flatPrint id\n>>> :t printer\nSExprPrinter Text (SCargot Text)\n>>>
  Text.putStrLn $ encode printer [L [A \"foo\", A \"bar\"]]\n(foo bar)\n~~~~\n\nA
  printer that tries to pretty-print an s-expression to fit attractively within an
  80-character limit can be created with `basicPrint`:\n\n~~~~.haskell\n>>> let printer
  = basicPrint id\n>>> let sentence = \"this stupendously preposterously supercalifragilisticexpialidociously
  long s-expression\"\n>>> let longSexpr = L [A word | word <- Text.words sentence
  ]\n>>> Text.putStrLn $ encodeOne printer longSexpr\n(this\n  stupendously\n  preposterously\n
  \ supercalifragilisticexpialidociously\n  long\n  s-expression)\n~~~~\n\nA printer
  created with `basicPrint` will \"swing\" things that are too long onto the subsequent
  line, indenting it a fixed number of spaces. We can modify the number of spaces
  with `setIndentAmount`:\n\n~~~~.haskell\n>>> let printer = setIndentAmount 4 (basicPrint
  id)\n>>> Text.putStrLn $ encodeOne printer longSexpr\n(this\n    stupendously\n
  \   preposterously\n    supercalifragilisticexpialidociously\n    long\n    s-expression)\n~~~~\n\nWe
  can also modify what counts as the 'maximum width', which for a `basicPrint` printer
  is 80 by default:\n\n~~~~.haskell\n>>> let printer = setMaxWidth 8 (basicPrint id)\n>>>
  Text.putStrLn $ encodeOne printer (L [A \"one\", A \"two\", A \"three\"])\n(one\n
  \ two\n  three)\n~~~~\n\nOr remove the maximum, which will always put the whole
  s-expression onto one line, regardless of its length:\n\n~~~~.haskell\n>>> let printer
  = removeMaxWidth (basicPrint id)\n>>> Text.putStrLn $ encodeOne printer longSexpr\n(this
  stupendously preposterously supercalifragilisticexpialidociously long s-expression)\n~~~~\n\nWe
  can also specify an _indentation strategy_, which decides how to indent subsequent
  expressions based on the head of a given expression. The default is to always \"swing\"
  subsequent expressions to the next line, but we could also specify the `Align` constructor,
  which will print the first two expressions on the same line and then any subsequent
  expressions horizontally aligned with the second one, like so:\n\n~~~~.haskell\n>>>
  let printer = setIndentStrategy (\\ _ -> Align) (setMaxWidth 8 (basicPrint id))\n>>>
  Text.putStrLn $ encodeOne printer (L [A \"one\", A \"two\", A \"three\", A \"four\"])\n(one
  two\n     three\n     four)\n~~~~\n\nOr we could choose to keep some number of expressions
  on the same line and afterwards swing the subsequent ones:\n\n~~~~.haskell\n>>>
  let printer = setIndentStrategy (\\ _ -> SwingAfter 1) (setMaxWidth 8 (basicPrint
  id))\n>>> Text.putStrLn $ encodeOne printer (L [A \"one\", A \"two\", A \"three\",
  A \"four\"])\n(one two\n  three\n  four)\n~~~~\n\nIn many situations, we might want
  to choose a different indentation strategy based on the first expression within
  a proper list: for example, Common Lisp source code is often formatted so that,
  following a `defun` token, the function name and arguments are on the same line,
  and then the body of the function is indented a fixed amount. We can express an
  approximation of that strategy like this:\n\n~~~~.haskell\n>>> let strategy (A ident)
  | \"def\" `Text.isPrefixOf` ident = SwingAfter 2; strategy _ = Align\n>>> let printer
  = setIndentStrategy strategy (setMaxWidth 20 (basicPrint id))\n>>> let fact = L
  [A \"defun\", A \"fact\", L [A \"x\"], L [A \"product\", L [A \"range\", A \"1\",
  A \"x\"]]]\n>>> Text.putStrLn $ encodeOne printer fact\n(defun fact (x)\n  (product
  (range 1 x)))\n>>> let app = L [A \"apply\", L [A \"lambda\", L [A \"y\"], L [A
  \"fact\", A \"y\"]], L [A \"+\", A \"2\", A \"3\"]]\n(apply (lambda (y) (fact y)\n
  \      (+ 2 3))\n~~~~\n\n## Putting It All Together\n\nHere is a final example which
  implements a limited arithmetic language with Haskell-style line comments and a
  special reader macro to understand hex literals:\n\n~~~~.haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule SCargotExample where\n\nimport Control.Applicative ((<|>))\nimport
  Data.Char (isDigit)\nimport Data.SCargot\nimport Data.SCargot.Repr.Basic\nimport
  Data.Text (Text, pack)\nimport Numeric (readHex)\nimport Text.Parsec (anyChar, char,
  digit, many1, manyTill, newline, satisfy, string)\nimport Text.Parsec.Text (Parser)\n\n--
  Our operators are going to represent addition, subtraction, or\n-- multiplication\ndata
  Op = Add | Sub | Mul deriving (Eq, Show)\n\n-- The atoms of our language are either
  one of the aforementioned\n-- operators, or positive integers\ndata Atom = AOp Op
  | ANum Int deriving (Eq, Show)\n\n-- Once parsed, our language will consist of the
  applications of\n-- binary operators with literal integers at the leaves\ndata Expr
  = EOp Op Expr Expr | ENum Int deriving (Eq, Show)\n\n-- Conversions to and from
  our Expr type\ntoExpr :: SExpr Atom -> Either String Expr\ntoExpr (A (AOp op) :::
  l ::: r ::: Nil) = EOp op <$> toExpr l <*> toExpr r\ntoExpr (A (ANum n)) = pure
  (ENum n)\ntoExpr sexpr = Left (\"Unable to parse expression: \" ++ show sexpr)\n\nfromExpr
  :: Expr -> SExpr Atom\nfromExpr (EOp op l r) = A (AOp op) ::: fromExpr l ::: fromExpr
  r ::: Nil\nfromExpr (ENum n)     = A (ANum n) ::: Nil\n\n-- Parser and serializer
  for our Atom type\npAtom :: Parser Atom\npAtom = ((ANum . read) <$> many1 digit)\n
  \    <|> (char '+' *> pure (AOp Add))\n     <|> (char '-' *> pure (AOp Sub))\n     <|>
  (char '*' *> pure (AOp Mul))\n\nsAtom :: Atom -> Text\nsAtom (AOp Add) = \"+\"\nsAtom
  (AOp Sub) = \"-\"\nsAtom (AOp Mul) = \"*\"\nsAtom (ANum n)  = pack (show n)\n\n--
  Our comment syntax is going to be Haskell-like:\nhsComment :: Parser ()\nhsComment
  = string \"--\" >> manyTill anyChar newline >> return ()\n\n-- Our custom reader
  macro: grab the parse stream and read a\n-- hexadecimal number from it:\nhexReader
  :: Reader Atom\nhexReader _ = (A . ANum . rd) <$> many1 (satisfy isHexDigit)\n  where
  isHexDigit c = isDigit c || c `elem` hexChars\n        rd = fst . head . readHex\n
  \       hexChars :: String\n        hexChars = \"AaBbCcDdEeFf\"\n\n-- Our final
  s-expression parser and printer:\nmyLangParser :: SExprParser Atom Expr\nmyLangParser\n
  \ = setComment hsComment        -- set comment syntax to be Haskell-style\n  $ addReader
  '#' hexReader     -- add hex reader\n  $ setCarrier toExpr           -- convert
  final repr to Expr\n  $ mkParser pAtom              -- create spec with Atom type\n\nmkLangPrinter
  :: SExprPrinter Atom Expr\nmkLangPrinter\n  = setFromCarrier fromExpr\n  $ setIndentStrategy
  (const Align)\n  $ basicPrint sAtom\n\n>>> decode myLangParser \"(+ (* 2 20) 10)
  (* 10 10)\"\n[EOp Add (EOp Mul (ENum 2) (ENum 20)) (ENum 10),EOp Mul (ENum 10) (ENum
  10)]\n~~~~\n\nKeep in mind that you often won't need to write all this by hand,
  as you can often use a variety of built-in atom types, reader macros, comment types,
  and representations, but it's a useful illustration of all the options that are
  available to you should you need them!\n"
license-name: BSD3
