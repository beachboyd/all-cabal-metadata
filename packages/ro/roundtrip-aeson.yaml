homepage: https://github.com/christian-marie/roundtrip-aeson
changelog-type: text
hash: d7307dfbb57e7290c7065626b93814a67a75dff2ec5d0183964950d46db40d10
test-bench-deps:
  bytestring: -any
  lens-aeson: -any
  base: ! '>=4.7'
  text: -any
  roundtrip: -any
  roundtrip-aeson: -any
  aeson: -any
  vector: -any
maintainer: Christian Marie
synopsis: Un-/parse JSON with roundtrip invertible syntax definitions.
changelog: ! 'Tue Oct  9 20:06:26 AEDT 2018


  Fixed build under ghc-8.2.2 and nix


  Wed Oct 10 13:09:40 AEDT 2018


  Fixed demo.hs for new prelude

'
basic-deps:
  bytestring: -any
  lens-aeson: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: ! '>=1.2 && <1.3'
  roundtrip: ! '>=0.2 && <0.3'
  containers: ! '>=0.5 && <0.6'
  lens: -any
  scientific: -any
  aeson: -any
  vector: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
author: Thomas Sutton <me@thomas-sutton.id.au>, Christian Marie <christian@ponies.io>
latest: '0.2.0.2'
description-type: markdown
description: ! "Roundtrip Aeson\n===============\n\n[![Build Status][6]][7]\n\n[roundtrip][1]
  allows you to write [invertible syntax descriptions][2] -- or,\nto put it another
  way, a parser and pretty printer combined -- for String or\nXML data. This package
  extends this to support constructing and destructing\nJSON documents.\n\nExample\n-------\n\nUsing
  `roundtrip-aeson` is relatively straightforward:\n\n1. Define your data type;\n\n2.
  Define [partial isomorphisms][3] for the constructors (probably using the\n[template
  haskell][4]);\n\n2. Describe the syntax of its JSON representation; and\n\n3. Use
  that representation to build and parse JSON.\n\n````{.haskell}\nimport Data.Aeson.RoundTrip\n\ndata
  Invoice\n    = Unpaid Bool Integer Bool\n    | Paid Double\n  deriving (Show)\n\ndefineIsomorphisms
  ''Invoice\n\ninvoiceSyntax :: JsonSyntax s => s Invoice\ninvoiceSyntax =\n    unpaid\n
  \       <$> jsonField \"overdue\" jsonBool\n        <*> jsonField \"total\"   jsonIntegral\n
  \       <*> jsonField \"warned\"  jsonBool\n    <|> paid\n        <$> jsonField
  \"total\"   jsonRealFrac\n\nmain :: IO ()\nmain = do\n    -- Build a JSON representation.\n
  \   let Right x = runBuilder invoiceSyntax $ Unpaid False 40 [False]\n    L.putStrLn
  $ encode x\n    -- Parse a JSON representation.\n    print $ runParser invoiceSyntax
  x\n````\n\nSee [tests/demo.hs][5] for the complete source of this example.\n\n[1]:
  https://hackage.haskell.org/package/roundtrip\n[2]: http://scholar.google.com/scholar?cluster=14145973580303258649\n[3]:
  https://hackage.haskell.org/package/roundtrip/docs/Control-Isomorphism-Partial-Iso.html\n[4]:
  https://hackage.haskell.org/package/roundtrip/docs/Control-Isomorphism-Partial-TH.html\n[5]:
  https://github.com/anchor/roundtrip-aeson/blob/master/tests/demo.hs\n[6]: https://travis-ci.org/anchor/roundtrip-aeson.svg?branch=master\n[7]:
  https://travis-ci.org/anchor/roundtrip-aeson\n"
license-name: BSD3
