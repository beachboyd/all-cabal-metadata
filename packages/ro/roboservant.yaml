homepage: https://github.com/mwotton/roboservant#readme
changelog-type: markdown
hash: 7b5e35ed416541322259a3c63f9a3c442c96fe8218d5f2100eac0aa0e1d1fdba
test-bench-deps:
  servant-flatten: -any
  bytestring: -any
  base: '>=4.7 && <5'
  servant-client: '>=0.17'
  hedgehog: -any
  servant-server: '>=0.17'
  roboservant: -any
  servant: '>=0.17'
  containers: -any
  mtl: -any
  string-conversions: -any
  aeson: -any
maintainer: mwotton@gmail.com
synopsis: Automatic session-aware servant testing
changelog: |
  # Changelog for roboservant

  ## Unreleased changes
basic-deps:
  servant-flatten: -any
  bytestring: -any
  base: '>=4.7 && <5'
  servant-client: '>=0.17'
  hedgehog: -any
  servant-server: '>=0.17'
  servant: '>=0.17'
  containers: -any
  mtl: -any
  string-conversions: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Mark Wotton, Samuel Schlesinger
latest: 0.1.0.2
description-type: markdown
description: "# roboservant\n\nAutomatically fuzz your servant apis in a contextually-aware
  way.\n\n![CI](https://github.com/mwotton/roboservant/workflows/CI/badge.svg)\n\n\n#
  why?\n\nServant gives us a lot of information about what a server can do. We\nuse
  this information to generate arbitrarily long request/response\nsessions and verify
  properties that should hold over them.\n\n# example\n\nOur api under test:\n\n```\nnewtype
  Foo = Foo Int\n  deriving (Generic, Eq, Show, Typeable)\n  deriving newtype (FromHttpApiData,
  ToHttpApiData)\n\ntype FooApi =\n  \"item\" :> Get '[JSON] Foo\n    :<|> \"itemAdd\"
  :> Capture \"one\" Foo :> Capture \"two\" Foo :> Get '[JSON] Foo\n    :<|> \"item\"
  :> Capture \"itemId\" Foo :> Get '[JSON] ()\n```\n\nFrom the tests:\n\n```\n  assert
  \"should find an error in Foo\" . not\n    =<< checkSequential (Group \"Foo\" [(\"Foo\",
  RS.prop_sequential @Foo.FooApi Foo.fooServer)])\n```\n\nWe have a server that blows
  up if the value of the int in a `Foo` ever gets above 10. Note:\nthere is no generator
  for `Foo` types: larger `Foo`s can only be made only by combining existing\n`Foo`s
  with `itemAdd`. This is an important distinction, because many APIs will return
  UUIDs or\nsimilar as keys, which make it impossible to cover a useful section of
  the state space without\nusing the values returned by the API\n\n\n# why not servant-quickcheck?\n\n[servant-quickcheck](https://hackage.haskell.org/package/servant-quickcheck)\nis
  a great package and I've learned a lot from it. Unfortunately, as mentioned previously,\nthere's
  a lot of the state space you just can't explore without context: modern webapps
  are\nfull of pointer-like structures, whether they're URLs or database\nkeys/uuids,
  and servant-quickcheck requires that you be able to generate\nthese without context
  via Arbitrary.\n\n## extensions/todo\n\n- add some \"starter\" values to the store\n
  \ - there may be a JWT that's established outside the servant app, for instance.\n-
  `class Extras a where extras :: Gen [a]`\n  - default implementation `pure []`\n
  \ - selectively allow some types to create values we haven't seen from the api.\n\t`newtype
  FirstName = FirstName Text`, say.\n- break down each response type into its components\n
  \ - if i have\n\t- `data Foo = FBar Bar | FBaz Baz`\n\t- an endpoint `foo` that
  returns a `Foo`\n\t- and an endpoint `bar` that takes a `Bar`\n  - I should be able
  to call `foo` to get a `Foo`, and if it happens to be an `FBar Bar`, I\n\tshould
  be able to use that `Bar` to call `bar`.\n- better handling of properties to be
  verified\n  - some properties should always hold (no 500s): this already works.\n
  \ - to-do: there may be some other properties that hold contextually\n\t- healthcheck
  should be 200\n\t- test complex permissions/ownership/delegation logic - should
  never be able to\n\t  get access to something you don't own or haven't been delegated
  access to.\n\n## other possible applications\n\n- coverage\n  - if you run the checker
  for a while and `hpc` suggests you still have bad coverage,\n\tyour api is designed
  in a way that requires external manipulation and may be improvable.\n\n- benchmarking\n
  \ - we can generate \"big-enough\" call sequences, then save the database & a sample
  call for each\n\tendpoint that takes long enough to be a reasonable test.\n  - from
  this we can generate tests that a given call on that setup never gets slower.\n"
license-name: BSD-3-Clause
