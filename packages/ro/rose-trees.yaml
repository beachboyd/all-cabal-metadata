homepage: https://github.com/athanclark/rose-trees#readme
changelog-type: ''
hash: ce82d1b5a2283f6fc675c83cd07986eba1e3b11b29ec66e934aa99cf291430a2
test-bench-deps:
  semigroupoids: -any
  witherable: ! '>=0.2'
  base: ! '>=4.11 && <5.0'
  unordered-containers: -any
  rose-trees: -any
  criterion: -any
  semigroups: -any
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  mtl: -any
  hashable: -any
  tasty: -any
  deepseq: -any
  QuickCheck: ! '>=2.9.2'
  sets: ! '>=0.0.5'
maintainer: athan.clark@gmail.com
synopsis: Various trie implementations in Haskell
changelog: ''
basic-deps:
  semigroupoids: -any
  witherable: ! '>=0.2'
  base: ! '>=4.11 && <5.0'
  unordered-containers: -any
  semigroups: -any
  containers: -any
  quickcheck-instances: -any
  mtl: -any
  hashable: -any
  deepseq: -any
  QuickCheck: ! '>=2.9.2'
  sets: ! '>=0.0.5'
all-versions:
- 0.0.3
- 0.0.4
- 0.0.4.1
- 0.0.4.2
- 0.0.4.3
- 0.0.4.4
- 0.0.4.5
author: Athan Clark
latest: 0.0.4.5
description-type: markdown
description: |
  [![Stories in Ready](https://badge.waffle.io/athanclark/rose-trees.png?label=ready&title=Ready)](https://waffle.io/athanclark/rose-trees)
  rose-trees
  ==========

  A simple class for making the construction of rose trees look prettier. I've also
  made an implementation of a left-child right-sibling binary tree-based rose tree,
  and one that uses `Data.Set` internally as a forest.
license-name: BSD-3-Clause
