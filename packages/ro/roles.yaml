homepage: http://github.com/matt-noonan/roles/
changelog-type: markdown
hash: 4fa3f234da9e32fa3de9b9bec2cfcd9a2332d64a9ecc8d664fa6696489d75516
test-bench-deps: {}
maintainer: Matt Noonan <matt.noonan@gmail.com>
synopsis: Composable class-based roles
changelog: ! "0.2\n---\n* Drop lens, add containers dependency\n* Remove instances
  that rely on 'new' and 'eta' (for now)\n\t\n\n0.1\n---\n* Repository initialized\n"
basic-deps:
  base: ! '>=4.7 && <5'
  containers: -any
all-versions:
- 0.2.0.0
author: Edward A. Kmett, Matt Noonan
latest: 0.2.0.0
description-type: markdown
description: ! "# roles\n\nComposable, class-based roles.\n\n# Table of contents\n\n
  \ * [Motivation: What is the cost of a `newtype`?](#what-is-the-cost)\n  * [Background](#background)\n
  \   * [The magical `Coercible` class](#magical)\n    * [Lifting coercions](#lifting)\n
  \   * [Roles to the rescue](#roles)\n  * [The `roles` library](#library)\n    *
  [What problem does this library solve?](#what-problem)\n    * [How can I use this
  library?](#how-can-i)\n    * [History](#history)\n\n# What is the cost of a `newtype`?
  <a name=\"what-is-the-cost\"></a>\n\nThe conventional wisdom is that Haskell's `newtype`
  gives you a zero-cost\nabstraction--wrapping and unwrapping of `newtype`s are purely
  a compile-time\noperation. Unfortunately, this is not *quite* the case:\n\n```haskell\n--
  A zero-cost abstraction... or is it?\nnewtype User = User String\n\n-- 'name x'
  and 'x' will refer to the same in-memory entity at run-time...\nname :: User ->
  String\nname (User x) = x\n\n-- ...but 'maybeName x' and 'x' will not be the same
  at run-time:\n-- a new value of type 'Maybe String' is allocated, despite being\n--
  identical to the input!\nmaybeName :: Maybe User -> Maybe String\nmaybeName = fmap
  name\n```\n\nSee the POPL '11 paper [Generative Type Abstraction and Type-level
  Computation](http://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf) for
  a more\nthrough investigation of the problem and a solution, and the ICFP '14 paper
  [Safe Zero-cost Coercions for Haskell](http://cs.brynmawr.edu/~rae/papers/2014/coercible/coercible-ext.pdf)
  for\nimplementation of the `Coercible` typeclass in Haskell. Still more information
  can be found [on the Haskell wiki](https://ghc.haskell.org/trac/ghc/wiki/Roles).\n\n#
  Background <a name=\"background\"></a>\n\n## The magical `Coercible` class <a name=\"magical\"></a>\n\nThe
  solution described in the second paper was to introduce a typeclass `Coercible a
  b` of the\nform\n\n```haskell\nclass Coercible a b where\n    coerce :: a -> b\n```\n\nThere
  is something a bit magical about a typeclass like this, that requires baked-in\ncompiler
  support:\nConsider a declaration `newtype New = MkNew Old`. Within the module where
  `New` is\ndefined, we should be able to freely `coerce` between `New` and `Old`.
  But then again,\nif  `MkNew` is not exported, then *outside* of the module we should
  *not* be able to\n`coerce` between `New` and `Old`. As a result, the `Coercible`
  class must involve special\ncompiler magic to ensure that `coerce` is only available
  in the appropriate modules.\n\n## Lifting coercions <a name=\"lifting\"></a>\n\nLet's
  revisit the `maybeName` issue. Ideally, we would like to rewrite the example\nto
  make the coercions explicit, to guarantee zero runtime cost:\n\n```haskell\nnewtype
  User = User String\n\nname :: User -> String\nname = coerce\n\n-- GHC knows that
  it can coerce 'User' to 'String', but\n-- how about 'Maybe User' to 'Maybe String'?\nmaybeName
  :: Maybe User -> Maybe String\nmaybeName = coerce\n```\n\nFor this to work, we would
  need instances of `Coercible User String` (provided by\nGHC compiler magic, since
  we're in the module where `User` is defined) and\nalso `Coercible a b => Coercible
  (Maybe a) (Maybe b)`.\n\nYou might expect GHC could implement a generic \"coercion
  lifting\" rule of the form\n`Coercible a b => Coercible (f a) (f b)`. Unfortunately
  this would be unsound\nin the presence of type families:\n\n```haskell\nnewtype
  User = MkUser String\n\ntype family Fam\ntype instance Fam String = Int\ntype instance
  Fam User   = Double\n```\n\nIf GHC naively added the coercion lifting rule, then
  we would be able to\ncoerce from `Double` to `Int` by:\n\n```haskell\nCoercible
  User String => Coercible (Fam User) (Fam String) -- a.k.a. Coercible Double Int!\n```\n\nThis
  is obviously no good.\n\n## Roles to the rescue <a name=\"roles\"></a>\n\nIt seems
  that sometimes we can lift a `Coercion a b` to a `Coercion (f a) (f b)`\n(e.g. for
  `Maybe`) and sometimes we cannot (e.g. for `Fam`). To figure out when\na coercion
  `a -> b` can be lifted to a coercion `f a -> f b`, GHC infers a *role*\nfor the
  type parameter of `f`. If `f` can safely support coercion-lifting, then\nwe say
  `f`'s type parameter has a *representational* role; otherwise, it has a\n*nominal*
  role.\n\nHappily, GHC will infer that `Maybe`'s type parameter is representational,
  while\n`Fam`'s type parameter is nominal. This lets our definition `maybeName =
  coerce`\npass the compiler, while attempting to coerce an `Int` to a `Double` via\n`Fam`
  will fail.\n\n# The `roles` library <a name=\"library\"></a>\n\n## What problem
  does this library solve? <a name=\"what-problem\"></a>\n\nUnfortunately, in GHC
  Haskell there is currently (circa late 2017) no way to\nwrite something like this:\n\n```haskell\ncoerceFirst
  :: (Coercible a b, Functor f) => [f a] -> Maybe (f b)\ncoerceFirst []    = Nothing\ncoerceFirst
  (x:_) = Just (coerce x)\n{- GHC says:\n    • Couldn't match representation of type
  ‘f a’ with that of ‘f b’\n        arising from a use of ‘coerce’\n      NB: We cannot
  know what roles the parameters to ‘f’ have;\n        we must assume that the role
  is nominal\n-}\n```\n\nGHC rightly refuses to lift the coercion from `a` to `b`
  into a coercion from\n`f a` to `f b`: it does not have any assurance that the functor\n`f`
  uses its type parameter representationally.\n\nIn other words, this function needs
  to have a constraint `Representational f` that\nmeans something like \"`f`'s type
  parameter has a representational\nrole.\"\n\nThis library simply provides the `Representational`
  typeclass for a variety of\ntypes in `base` and `containers`.\n\n## How can I use
  this library? <a name=\"how-can-i\"></a>\n\nSince it is not made up of GHC pixie-dust
  magic, `Representational` needs a way to\nconvince GHC that the lifted coercion
  is allowed.\nIt does this via the lone function of the `Representational` class:\n\n```haskell\nclass
  Representational f where\n  rep :: Coercion a b -> Coercion (f a) (f b)\n```\n\nA
  value of type `Coercion a b` is like a certificate that tells GHC \"you are allowed\nto
  coerce `a` to `b`\". You cash the certificate in by using `coerceWith`, yielding\nan
  actual coercion from `a` to `b`. The `rep` function simply converts a certificate\nfor
  coercing `a` to `b` into a certificate for coercing `f a` into `f b`.\n\nWe can
  now fix the example from the previous section:\n\n```haskell\ncoerceFirst :: (Coercible
  a b, Representational f, Functor f) => [f a] -> Maybe (f b)\ncoerceFirst []    =
  Nothing\ncoerceFirst (x:_) = Just (coerceWith (rep Coercion) x)\n--                        ~~~~~~~~~~~~~~~~~~~~~~~~~\n--
  \                                  |\n--   This means: (1) Get a certificate verifying
  that we can coerce `a` to `b`.\n--                   This certificate is `Coercion`,
  and we got it by making use\n--                   of the constraint `Coercible a
  b`.\n--               (2) Since `f` is `Representational`, we can use `rep` to upgrade\n--
  \                  the certificate to a certificate for coercion from `f a` to `f
  b`.\n--               (3) Use `coerceWith` to hand the certificate over to GHC,
  obtaining\n--                   an actual coercion from `f a` to `f b` in return.\n\n{-
  GHC says: sounds good to me! -}\n```\n\nFor another usage example, see the `withRecMap`
  function from `justified-containers`,\nand the corresponding test case. A `Representational`
  constraint is used to ensure\nthat large maps are not duplicated in memory, despite
  undergoing a complex series\nof `newtype`-related manipulations. An earlier version
  of `withRecMap` worked by\n`fmap`ping newtype wrappers and unwrappers, which caused
  an accidental duplication\nof the map.\n\n## History <a name=\"history\"></a>\n\nThis
  package is a fork of Edward Kmett's original `roles 0.1`. It offers\nfewer instances
  of `Representational`, in exchange for a much smaller set\nof dependencies. The
  instances that involve `new` and `eta` have been\nremoved, and instances for `containers`
  have been added.\n"
license-name: BSD-3-Clause
