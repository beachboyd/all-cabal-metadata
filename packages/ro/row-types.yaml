homepage: https://github.com/target/row-types
changelog-type: markdown
hash: e9584ebc9d4bd1d07ce64785568a6de0c252d08943af657593d7d3224f084cfb
test-bench-deps:
  row-types: -any
  base: '>=2 && <6'
  gauge: '>=0.2.0'
  generic-lens: '>=1.1.0.0'
  deepseq: '>=1.4'
maintainer: dwincort@gmail.com
synopsis: Open Records and Variants
changelog: "## 1.0.0.0 [2020-09-12]\r\nThis release has many breaking changes, specifically
  to `metamorph` and some functions related to `Variant`, hence the major version
  bump to `1.0`.  However, users that only use basic features of records may not notice
  a difference.\r\n\r\n- Removed `metamorph'` and `biMetamorph'` in favor of generalizing
  `metamorph` over choice of bifunctor.\r\n- Removed \"unsafe\" functions (`unsafeRemove`
  and `unsafeInjectFront` from `Records` and `unsafeMarkVar` and `unsafeInjectFront`
  from `Variants`).\r\n- Removed `Switch` class, reimplementing the `switch` function
  using `BiForall`.\r\n- Swap the order of the result of calling `trial`, `multiTrial`,
  and `split`.\r\n- Added new functions to `Records`: `lazyRemove`, `curryRec`, `(.$)`,
  `zipTransform`, `zipTransform'`, `traverse`, `traverseMap`, `distribute`, and `coerceRec`.\r\n-
  Added new functions to `Variants`: `fromLabelsMap`, `traverse`, `traverseMap`, and
  `coerceVar`.\r\n- Added `Dictionaries` module, full of axioms that are helpful for
  using `metamorph`.  Moved axioms from `Internal` to `Dictionaries` (in some cases,
  the type variable order has changed).\r\n- Added `ApSingle` type family as well
  as `eraseSingle`, `mapSingle`, and `eraseZipSingle` (thanks Jordan Woehr!).\r\n-
  Improved error messages.\r\n\r\nNote: GHC 8.4 and earlier are no longer officially
  supported in row-types 1.0.0.0.\r\n\r\n\r\n## 0.4.0.0 [2020-05-20]\r\n- Renamed
  `toNative` to `toNativeGeneral` and `toNativeExact` to `toNative` for records and
  likewise for `fromNative` for variants.\r\n- Added a type family `NativeRow` which,
  when given any generic type that can go through `fromNative`, is equal to the row-type
  of the resulting record/variant.  Note that `NativeRow` is defined separately (and
  differently!) for records vs variants, so it is exported at the `Data.Row.Records`/`Variants`
  level but not at `Data.Row`.\r\n- Added `coerceRec` and `coerceVar` to coerce the
  row-types of records and variants respectively.\r\n- Exposed `BiForall` in `Data.Row`,
  `Data.Row.Records`, and `Data.Row.Variants`\r\n- (Internal) Rewrote internal `Generic`
  code to use an associated type family instead of a standalone one.\r\n\r\nNote:
  GHC 8.2 and earlier are no longer officially supported in row-types 0.4.0.0.\r\n\r\n##
  0.3.1.0 [2020-01-29]\r\n- Added \"native\" classes as exports for `Records` and
  `Variants` (e.g., `ToNative`, `FromNative`)\r\n- Added more example hs files.\r\n\r\n##
  0.3.0.0 [2019-05-28]\r\n- Added `HasField` and `AsConstructor` instances (from generic-lens)
  for `Rec` and `Var` respectively.\r\n- Added record-overwrite function `.//`.\r\n-
  Added `Generic` instances for Rec and Var.\r\n- Added mapHas entailment connecting
  `Map f r .! l` to `r .! l`.\r\n- Changed `Forall2` to `BiForall`.\r\n  - Added `BiConstraint`
  type class for use  with `BiForall`.\r\n- Added `Ap` type family that functions
  as `ap` over rows using zipping.\r\n  - Added `mapF` to map a function over a record
  with an `Ap` row.\r\n- Added `toDynamicMap` and `fromDynamicMap` as functions to
  convert between `Rec`s and  `HashMap Text Dynamic`s.\r\n- Added `toNativeExact`
  to convert a `Rec` to a native Haskell type without losing any fields.\r\n- Added
  `toNative`, `fromNative`, and `fromNativeExact` for `Var`s.\r\n- Added `unSingleton`
  for `Var`s.\r\n  - Removed `unSingleton` from `Data.Row` export list.\r\n- Tightened
  the type signatures of `focus` (for both `Rec` and `Var`) to improve type inference
  when using `focus` in lens-like situations.\r\n\r\n## 0.2.3.1 [2018-07-11]\r\n-
  Fix a bug in the `Show` instance for `Rec`.\r\n\r\n## 0.2.3.0 [2018-07-02]\r\n-
  Update the `Show` instance for `Rec` to render valid code.\r\n- Add `toNative` and
  `fromNative` functions for records to easily convert between Haskell records and
  row-types records.\r\n- Make type families in `Data.Row.Internal` polykinded (thanks
  James Yu!)\r\n\r\n## 0.2.1.0 [2018-03-20]\r\n- Bug Fix: The type of `update` for
  both `Rec` and `Var` now enforce the newly inserted type is correct.\r\n- New: Add
  `restrict` and `split` for `Var`s.  \r\n  - Removed `restrict` from `Data.Row` export
  list.\r\n- New: Added support for universally quantified rows: `mapForall` and `uniqueMap`.\r\n-
  Added very simple test suite.\r\n\r\n## 0.2.0.0 [2018-02-12]\r\n- Initial Release\r\n"
basic-deps:
  base: '>=2 && <5'
  unordered-containers: '>=0.2'
  text: -any
  constraints: '>=0.11'
  hashable: '>=1.2'
  generic-lens: '>=1.0.0.0'
  deepseq: '>=1.4'
  profunctors: '>=5.0'
all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 1.0.0.0
author: Daniel Winograd-Cort, Matthew Farkas-Dyck
latest: 1.0.0.0
description-type: markdown
description: "Row-Types\r\n=======\r\n\r\n[![Build Status](https://api.travis-ci.org/target/row-types.svg?branch=master)](https://travis-ci.org/target/row-types/branches)\r\n[![Hackage](https://img.shields.io/hackage/v/row-types.svg)](https://hackage.haskell.org/package/row-types)\r\n\r\nRow-types
  is a library of open records and variants for Haskell using closed\r\ntype families
  and type literals (among other things...).\r\nSee [examples/Examples.lhs](https://raw.githubusercontent.com/target/row-types/master/examples/Examples.lhs)\r\nfor
  a literate Haskell file that functions as an overview of how this library can be
  used,\r\nand check out [the website](https://target.github.io/row-types/) for further
  examples.\r\n\r\nAvailable on [Hackage](https://hackage.haskell.org/package/row-types).\r\n\r\nThis
  work is a branch from CTRex [1,2] with other inspiration from data-diverse [3].\r\nMy
  thanks to the authors and contributors of those libraries!\r\n\r\n\r\n[1] https://wiki.haskell.org/CTRex
  \\\r\n[2] https://hackage.haskell.org/package/CTRex/docs/Data-OpenRecords.html \\\r\n[3]
  https://hackage.haskell.org/package/data-diverse\r\n"
license-name: MIT
