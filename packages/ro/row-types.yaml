homepage: ''
changelog-type: markdown
hash: a2d26ef268d38e76b82504e564ba771c0d03793e5452d05660e60803ae45d086
test-bench-deps:
  row-types: -any
  base: ! '>=2 && <6'
  criterion: ! '>=1.1'
  generic-lens: ! '>=1.1.0.0'
  deepseq: ! '>=1.4'
maintainer: daniel.winograd-cort@target.com, matthew.farkas-dyck@target.com
synopsis: Open Records and Variants
changelog: "## 0.3.0.0 [2019-05-28]\n- Added `HasField` and `AsConstructor` instances
  (from generic-lens) for `Rec` and `Var` respectively.\n- Added record-overwrite
  function `.//`.\n- Added `Generic` instances for Rec and Var.\n- Added mapHas entailment
  connecting `Map f r .! l` to `r .! l`.\n- Changed `Forall2` to `BiForall`.\n  -
  Added `BiConstraint` type class for use  with `BiForall`.\n- Added `Ap` type family
  that functions as `ap` over rows using zipping.\n  - Added `mapF` to map a function
  over a record with an `Ap` row.\n- Added `toDynamicMap` and `fromDynamicMap` as
  functions to convert between `Rec`s and  `HashMap Text Dynamic`s.\n- Added `toNativeExact`
  to convert a `Rec` to a native Haskell type without losing any fields.\n- Added
  `toNative`, `fromNative`, and `fromNativeExact` for `Var`s.\n- Added `unSingleton`
  for `Var`s.\n  - Removed `unSingleton` from `Data.Row` export list.\n- Tightened
  the type signatures of `focus` (for both `Rec` and `Var`) to improve type inference
  when using `focus` in lens-like situations.\n\n## 0.2.3.1 [2018-07-11]\n- Fix a
  bug in the `Show` instance for `Rec`.\n\n## 0.2.3.0 [2018-07-02]\n- Update the `Show`
  instance for `Rec` to render valid code.\n- Add `toNative` and `fromNative` functions
  for records to easily convert between Haskell records and row-types records.\n-
  Make type families in `Data.Row.Internal` polykinded (thanks James Yu!)\n\n## 0.2.1.0
  [2018-03-20]\n- Bug Fix: The type of `update` for both `Rec` and `Var` now enforce
  the newly inserted type is correct.\n- New: Add `restrict` and `split` for `Var`s.
  \ \n  - Removed `restrict` from `Data.Row` export list.\n- New: Added support for
  universally quantified rows: `mapForall` and `uniqueMap`.\n- Added very simple test
  suite.\n\n## 0.2.0.0 [2018-02-12]\n- Initial Release\n"
basic-deps:
  base: ! '>=2 && <5'
  unordered-containers: ! '>=0.2'
  text: -any
  constraints: -any
  hashable: ! '>=1.2'
  generic-lens: ! '>=1.0.0.0'
  deepseq: ! '>=1.4'
  profunctors: ! '>=5.0'
all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
author: Daniel Winograd-Cort, Matthew Farkas-Dyck
latest: 0.3.0.0
description-type: markdown
description: |
  Row-Types
  =======

  [![Build Status](https://api.travis-ci.org/target/row-types.svg?branch=master)](https://travis-ci.org/target/row-types/branches)
  [![Hackage](https://img.shields.io/hackage/v/row-types.svg)](https://hackage.haskell.org/package/row-types)

  Row-types is a library of open records and variants for Haskell using closed
  type families and type literals (among other things...).
  See [examples/Examples.lhs](https://raw.githubusercontent.com/target/row-types/master/examples/Examples.lhs)
  for an overview of how this library can be used.

  Available on [Hackage](https://hackage.haskell.org/package/row-types)


  This work is a branch from CTRex [1,2] with other inspiration from data-diverse [3].
  My thanks to the authors and contributors of those libraries!

  [1] https://wiki.haskell.org/CTRex

  [2] https://hackage.haskell.org/package/CTRex/docs/Data-OpenRecords.html

  [3] https://hackage.haskell.org/package/data-diverse
license-name: MIT
