homepage: https://github.com/ff-notes/ron
changelog-type: ''
hash: d755a5162ee13794c8d06467100e8ff381baf011051200632e53aadb502669e9
test-bench-deps:
  base: ! '>=4.10 && <4.13'
  ron: -any
  criterion: -any
  deepseq: -any
maintainer: Yuriy Syrovetskiy <haskell@cblp.su>
synopsis: RON, RON-RDT, and RON-Schema
changelog: ''
basic-deps:
  bytestring: -any
  extra: -any
  base: ! '>=4.10 && <4.13'
  time: -any
  Diff: -any
  unordered-containers: -any
  text: -any
  stringsearch: -any
  filepath: -any
  data-default: -any
  containers: -any
  binary: -any
  mtl: -any
  network-info: -any
  hashable: -any
  attoparsec: -any
  errors: -any
  deepseq: -any
  aeson: -any
  template-haskell: -any
  safe: -any
  vector: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
author: ''
latest: '0.2'
description-type: haddock
description: ! 'Replicated Object Notation (RON), data types (RDT), and RON-Schema


  Typical usage:


  > import RON.Data

  > import RON.Schema.TH

  > import RON.Storage.IO as Storage

  >

  > $(let note = StructLww "Note"

  >           [ ("active", field boole)

  >           , ("text",   field rgaString) ]

  >           def{saHaskellDeriving = ["Eq", "Show"]}

  >   in mkReplicated [DStructLww note])

  >

  > instance Collection Note where

  >     collectionName = "note"

  >

  > main :: IO ()

  > main = do

  >     let dataDir = "./data/"

  >     h <- Storage.newHandle dataDir

  >     runStorage h $ do

  >         obj <- newObject

  >             Note{active = True, text = "Выступить на FProg SPb"}

  >         createDocument obj'
license-name: BSD3
