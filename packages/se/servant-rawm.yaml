homepage: https://github.com/cdepillabout/servant-rawm
changelog-type: markdown
hash: d339db03ae2e7fdd9d86705af76a0f9e4bedca421f1e9b578a864b675c84cef8
test-bench-deps:
  warp: -any
  http-client: -any
  bytestring: -any
  wai: -any
  base: -any
  servant-client: -any
  text: -any
  servant-client-core: -any
  tasty-hspec: -any
  doctest: -any
  servant-server: -any
  servant: -any
  hspec-wai: -any
  servant-rawm: -any
  tasty-hunit: -any
  transformers: -any
  tasty: -any
  http-types: -any
  Glob: -any
  http-media: -any
maintainer: cdep.illabout@gmail.com
synopsis: Embed a raw 'Application' in a Servant API
changelog: ! "\n## 0.3.0.0\n\n* Update to work with the latest version of Servant
  (0.14) and remove support from older versions of Servant.\n* Remove support from
  Stackage LTS versions older than 12.\n\n## 0.2.0.2\n\n*   Add missing test file
  to extra-source-files in the cabal file.\n\n## 0.2.0.1\n\n*   Add tests and more
  documentation.\n\n## 0.2.0.0\n\n*   (commit 30a2cd48488d) Add a phantom type to
  `RawM` to allow the user to\n    change the output documentation.\n*   (commit 30a2cd48488d)
  Add a `HasDocs` instance for `RawM` that uses\n    the `HasDocs` instance for the
  phantom type.\n\n## 0.1.0.0\n\n*   Initial release.\n"
basic-deps:
  warp: -any
  http-client: ! '>=0.5'
  servant-docs: ! '>=0.11'
  bytestring: ! '>=0.10'
  wai: ! '>=3.2'
  base: ! '>=4.8 && <5'
  servant-client: ! '>=0.14'
  text: -any
  servant-client-core: ! '>=0.14'
  filepath: ! '>=1.4'
  servant-server: ! '>=0.14'
  servant: -any
  lens: ! '>=4.0'
  servant-rawm: -any
  transformers: -any
  resourcet: ! '>=1.0'
  http-types: ! '>=0.9'
  wai-app-static: ! '>=3.1'
  http-media: ! '>=0.6'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
author: Dennis Gosnell
latest: 0.3.0.0
description-type: markdown
description: ! '

  # Servant.RawM


  [![Build Status](https://secure.travis-ci.org/cdepillabout/servant-rawm.svg)](http://travis-ci.org/cdepillabout/servant-rawm)

  [![Hackage](https://img.shields.io/hackage/v/servant-rawm.svg)](https://hackage.haskell.org/package/servant-rawm)

  [![Stackage LTS](http://stackage.org/package/servant-rawm/badge/lts)](http://stackage.org/lts/package/servant-rawm)

  [![Stackage Nightly](http://stackage.org/package/servant-rawm/badge/nightly)](http://stackage.org/nightly/package/servant-rawm)

  ![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)


  `servant-rawm` provides a way to embed a WAI

  [`Application`](https://hackage.haskell.org/package/wai-3.2.1.1/docs/Network-Wai.html#t:Application)

  in a Servant handler. It is more convenient and powerful than the

  [`Raw`](https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Raw.html#t:Raw)

  type provided by [`servant`](https://hackage.haskell.org/package/servant).


  See the

  [Haddocks on Hackage for `servant-rawm`](https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html)

  for an explanation of how to use the

  [`RawM`](https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html#t:RawM)

  type.


  ## Example


  There is code for an example server, client, and documentation located

  in [`example/`](example/). The following section describes how to run the

  example executables.


  ### Building


  The example executables can be built with the following command:


  ```sh

  $ stack build --flag servant-rawm:buildexample

  ```


  ### Server


  After building, the server can be run with the following command:


  ```sh

  $ stack exec -- servant-rawm-example-server

  ```


  This runs a server on port 8201 serving files

  in [`example/files/`](example/files/).


  It can be accessed from `curl` like the following:


  ```sh

  $ curl http://localhost:8201/serve-directory/foo.txt

  This is an example text file.

  ```


  ### Client


  After building, the client can be run like the following:


  ```sh

  $ stack exec -- servant-rawm-example-client

  Successfully got file ./example/files/foo.txt:


  This is an example text file.

  ```


  ### Documentation


  After building, the documentation can be generated like the following. This is

  documentation for the API defined in [example/Api.hs](example/Api.hs):


  ```sh

  $ stack exec -- servant-rawm-example-docs

  ...

  ```

'
license-name: BSD-3-Clause
