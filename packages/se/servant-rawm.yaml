homepage: https://github.com/cdepillabout/servant-rawm
changelog-type: markdown
hash: abee186db4f9eaeaf66bc6a442abfdc27ca31871f8e945c8b74244cded001836
test-bench-deps: {}
maintainer: |-
  cdep.illabout@gmail.com
  , nil.krjst@gmail.com
synopsis: Embed a raw 'Application' in a Servant API
changelog: |
  ## 1.0.0.0

  *   The implementations of the `RawM` endpoint are divided into
      `servant-rawm-client`, `servant-rawm-docs`, and `servant-rawm-server` to
      avoid introducing unnecessary dependencies and reduce the compilation
      overhead. You will need to add either of the implementations to your
      dependencies, and import the corresponding implementation
      (`Servant.RawM.Server`, `Servant.RawM.Client`, or `Servant.RawM.Docs`) for
      the `RawM` endpoint to function correctly.
      [#16](https://github.com/cdepillabout/servant-rawm/pull/16)
      Thanks [@Krasjet](https://github.com/Krasjet)!

  ## 0.3.2.0

  *   Add an instance for
      [`HasLink`](http://hackage.haskell.org/package/servant-0.16.2/docs/Servant-Links.html#t:HasLink)
      to `RawM` [#12](https://github.com/cdepillabout/servant-rawm/pull/12).
      Thanks [@amesgen](https://github.com/amesgen)!

  ## 0.3.1.0

  *   Update to work with servant-0.16
      [#10](https://github.com/cdepillabout/servant-rawm/pull/10). Thanks
      [@vlatkoB](https://github.com/vlatkoB)!

  ## 0.3.0.0

  *   Update to work with the latest version of Servant (0.14) and remove support from older versions of Servant.
  *   Remove support from Stackage LTS versions older than 12.

  ## 0.2.0.2

  *   Add missing test file to extra-source-files in the cabal file.

  ## 0.2.0.1

  *   Add tests and more documentation.

  ## 0.2.0.0

  *   (commit 30a2cd48488d) Add a phantom type to `RawM` to allow the user to
      change the output documentation.
  *   (commit 30a2cd48488d) Add a `HasDocs` instance for `RawM` that uses
      the `HasDocs` instance for the phantom type.

  ## 0.1.0.0

  *   Initial release.
basic-deps:
  base: '>=4.8 && <5'
  servant: '>=0.16'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 1.0.0.0
author: Dennis Gosnell
latest: 1.0.0.0
description-type: markdown
description: |
  # Servant.RawM

  [![Build Status](https://secure.travis-ci.org/cdepillabout/servant-rawm.svg)](http://travis-ci.org/cdepillabout/servant-rawm)
  [![Hackage](https://img.shields.io/hackage/v/servant-rawm.svg)](https://hackage.haskell.org/package/servant-rawm)
  [![Stackage LTS](http://stackage.org/package/servant-rawm/badge/lts)](http://stackage.org/lts/package/servant-rawm)
  [![Stackage Nightly](http://stackage.org/package/servant-rawm/badge/nightly)](http://stackage.org/nightly/package/servant-rawm)
  ![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)

  `servant-rawm` provides a way to embed a WAI
  [`Application`](https://hackage.haskell.org/package/wai-3.2.1.1/docs/Network-Wai.html#t:Application)
  in a Servant handler. It is more convenient and powerful than the
  [`Raw`](https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Raw.html#t:Raw)
  type provided by [`servant`](https://hackage.haskell.org/package/servant).

  See the
  [Haddocks on Hackage for `servant-rawm`](https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html)
  for an explanation of how to use the
  [`RawM`](https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html#t:RawM)
  type.

  After `servant-rawm` 1.0.0.0, the implementations of the `RawM` endpoint are
  divided into `servant-rawm-client`, `servant-rawm-docs`, and
  `servant-rawm-server` to avoid introducing unnecessary dependencies and reduce
  the compilation overhead.

  You will need to add either of the implementations to your dependencies, and
  import the corresponding implementation (`Servant.RawM.Server`,
  `Servant.RawM.Client`, or `Servant.RawM.Docs`) for the `RawM` endpoint to
  function correctly.

  ## Example

  There is code for an example server, client, and documentation located
  in [`servant-rawm-examples-and-tests/example/`](servant-rawm-examples-and-tests/example/). The following section describes how to run the
  example executables.

  ### Building

  The example executables can be built with the following command:

  ```sh
  $ stack build servant-rawm-examples-and-tests
  ```

  ### Server

  After building, the server can be run with the following command:

  ```sh
  $ stack exec -- servant-rawm-example-server
  ```

  This runs a server on port 8201 serving files
  in [`servant-rawm-examples-and-tests/example/files/`](servant-rawm-examples-and-tests/example/files/).

  It can be accessed from `curl` like the following:

  ```sh
  $ curl http://localhost:8201/serve-directory/foo.txt
  This is an example text file.
  ```

  ### Client

  After building and running the server, the client can be run like the following:

  ```sh
  $ stack exec -- servant-rawm-example-client
  Successfully got file ./example/files/foo.txt:

  This is an example text file.
  ```

  ### Documentation

  After building, the documentation can be generated like the following. This is
  documentation for the API defined in
  [servant-rawm-examples-and-tests/example/Api.hs](servant-rawm-examples-and-tests/example/Api.hs):

  ```sh
  $ stack exec -- servant-rawm-example-docs
  ...
  ```

  ## Maintainers

  - [@cdepillabout](https://github.com/cdepillabout)
  - [@Krasjet](https://github.com/Krasjet)
license-name: BSD-3-Clause
