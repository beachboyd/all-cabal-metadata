homepage: https://github.com/ChrisCoffey/haskell-opentracing-light#readme
changelog-type: markdown
hash: b53e9fafaddc1f5b6631bd9ac6165e459a4bedc7d5c5fd0bed0a531f8cdd0b15
test-bench-deps:
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  http-api-data: -any
  monad-control: -any
  HUnit: -any
  containers: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  servant-tracing: -any
  transformers: -any
  tasty: -any
  QuickCheck: -any
  aeson: -any
maintainer: chris@foldl.io
synopsis: ''
changelog: ! '# Changelog for servant-tracing


  ## Unreleased changes

'
basic-deps:
  warp: -any
  http-client: -any
  bytestring: -any
  wai: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  http-api-data: -any
  monad-control: -any
  async: -any
  lifted-base: -any
  servant-server: -any
  servant: -any
  containers: -any
  mtl: -any
  hashable: -any
  servant-tracing: -any
  transformers: -any
  random: -any
  bytestring-lexing: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Chris Coffey
latest: 0.1.0.2
description-type: markdown
description: ! "# servant-tracing\n\n[![Build Status](https://travis-ci.org/ChrisCoffey/haskell-opentracing-light.svg?branch=master)](https://travis-ci.org/ChrisCoffey/haskell-opentracing-light)\n\nThis
  repository is the minimum required for publishing trace data to Zipkin or Jaeger.
  It adheres to the [Open Tracing Standard] (https://github.com/opentracing/specification)
  but is not complete. See the documentation on Hackage for module-level details.\n\n\n###
  Using the library\n\nThe OpenTracing standard revolves around a single function,
  `recordSpan`. `recordSpan` is responsible for creating new spans (see the standard
  for the definition of a span) and ensuring child spans use the new id. In order
  to properly build this tree of calls library users must provide the necessary environment
  via a `MonadTracer` instance (see haddocks). Library users are responsible for defining
  their own publish loop. There is a default `Zipkin` publisher in `Tracing.Zipkin`
  which works with Jaeger & Zipkin, but the loop to drain the `spanBuffer` must be
  provided by the user.\n\n```\nfoo :: (MonadIO m, MonadTracer m) =>\n    Int\n    ->
  m String\nfoo str = recordSpan\n    Nothing\n    [Tag \"Ultimate Answer to Life,
  The Universe and Everything\", Tag 42]\n    \"Compute Ultimate Question\"\n    $
  pure \"Oops\"\n```\n\nThe code above logs a new span to the `spanBuffer`, where
  it will sit until published. If it turns out that `foo` is called from an active
  span, then it will be recorded as a child of said higher span.\n\n### Testing Locally
  with the Demo App\n\nYou can start up a compatible server for [Zipkin](https://zipkin.io/pages/quickstart.html)
  or [Jaeger](https://jaegertracing.netlify.com/docs/deployment/) via a standalone
  docker container. From there its a matter of seting the following environment variables:\n-
  *TRACING_ENDPOINT*: a `String` with the fully url to a running tracing server\n-
  *TRACING_SERVICE*: a `String` name for your service\n\n\n#### Pending Features\n-
  Concurrent tracing support.\n- Thrift support\n- Additional clients\n- Pluggable
  samplers\n"
license-name: MIT
