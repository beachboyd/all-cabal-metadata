homepage: http://haskell-servant.github.io/
changelog-type: markdown
hash: 0e27162de14f724434d96e34b6cd8bae403cab78e81c0c49f382b1a72260ccd3
test-bench-deps:
  snap: -any
  exceptions: -any
  either: -any
  bytestring: -any
  case-insensitive: -any
  base: ==4.*
  time: -any
  base64-bytestring: -any
  hspec: ! '>=2.4.3 && <2.5'
  text: -any
  digestive-functors: ! '>=0.8.1.0 && <0.9'
  hspec-core: ! '>=2.4.3 && <2.5'
  process: -any
  network: ! '>=2.6'
  parsec: -any
  HUnit: ! '>=1.4'
  servant: -any
  containers: -any
  snap-server: -any
  lens: -any
  snap-cors: -any
  io-streams: -any
  hspec-snap: ! '>=1.0.0.2 && <1.1'
  snap-core: -any
  mtl: -any
  servant-snap: -any
  transformers: -any
  temporary: -any
  QuickCheck: -any
  string-conversions: -any
  http-types: -any
  aeson: -any
  directory: -any
maintainer: alpmestan@gmail.com imalsogreg@gmail.com
synopsis: A family of combinators for defining webservices APIs and serving them
changelog: ! '0.8.2

  ------


  Add `HasServer` instances for `StreamGenerator`



  0.8.0.1

  -------


  Add headers from MonadSnap state response to the servant-snap computed response

  Add a commented-out snap-cors test to the test suite. It doesn''t pass, although

  manual testing of snap-cors works.


  0.8

  -------


  Copy BasicAuth and Context from servant-server to support basic auth checking


  0.7.1

  -------


  Call ''Snap.Core.pass'' when routing an empty URI path. This allows an entire

  served API to fall through, which is more in line with the rest of snap routing,

  and allows multiple servant API''s to be served under the same path context

  from ''Snap.Core.route''.


  0.7.0.5

  -------


  Fix throwError bug ignoring ServantError headers


  0.7.0.4

  -------


  Fix throwError bug ignoring ServantError body


  0.7.0.3

  -------


  Bump servant upper bound, allow 0.9


  0.7

  ----


  Initial release

'
basic-deps:
  http-client: -any
  snap: ! '>=1.0 && <1.2'
  either: ! '>=4.3 && <4.6'
  bytestring: ==0.10.*
  case-insensitive: ! '>=1.2 && <1.3'
  base: ! '>=4.7 && <4.11'
  base64-bytestring: ! '>=1.0 && <1.1'
  servant-client: -any
  text: ==1.2.*
  map-syntax: -any
  http-api-data: ! '>=0.2 && <0.4'
  filepath: ! '>=1 && <1.5'
  word8: ! '>=0.1 && <0.2'
  servant: ==0.13.*
  containers: ! '>=0.5 && <0.6'
  snap-server: ! '>=1.0 && <1.2'
  lens: -any
  snap-cors: -any
  io-streams: ! '>=1.3 && <1.6'
  snap-core: ! '>=1.0.2 && <1.2'
  network-uri: ! '>=2.6 && <2.7'
  mtl: ! '>=2.0 && <2.3'
  mmorph: ! '>=1 && <1.2'
  attoparsec: ! '>=0.12 && <0.14'
  servant-snap: -any
  transformers: ! '>=0.3 && <0.6'
  heist: -any
  errors: -any
  string-conversions: ! '>=0.3 && <0.5'
  http-types: ! '>=0.8 && <0.13'
  aeson: ! '>=0.7 && <1.3'
  http-media: ! '>=0.7.1.2 && <0.8'
all-versions:
- '0.7'
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
- 0.7.3
- '0.8'
- 0.8.0.1
- 0.8.1
- 0.8.2
author: Alp Mestanogullari, SÃ¶nke Hahn, Julian K. Arni, Greg Hale
latest: 0.8.2
description-type: markdown
description: ! "![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\n[![Build
  Status](https://travis-ci.org/haskell-servant/servant-snap.svg?branch=master)](https://travis-ci.org/haskell-servant/servant-snap)\n\nA
  library for running [servant](https://haskell-servant.github.io) APIs under any
  [MonadSnap](http://snapframework.com) monad. For example, we can build a `Servant`
  server from `Snap` handlers:\n\n\n\n```\n> :set -XTypeOperators -XDataKinds -XOverloadedStrings\n>
  import Data.Proxy (Proxy(..))\n> import Data.Text (Text, append)\n> import Servant\n>
  import Servant.Server (serveSnap)\n> import Snap.Http.Server (quickHttpServe)\n>
  type Api = \"number\" :> Get '[JSON] Int  :<|>  \"hello\" :> Capture \"name\" String
  :> Get '[JSON] String)\n> let api = Proxy :: Proxy Api\n> quickHttpServe $ serveSnap
  api (return 5 :<|> \\name -> return (append \"Hello, \" name))\n\ncurl localhost:8000/hello/world\n\"Hello,
  world\"\n```\n\nOr we can integrate a `Servant` API into a more complex application
  with [`Snaplets`](https://hackage.haskell.org/package/snap-1.0.0.0/docs/Snap-Snaplet.html)
  and your own `Handler b v` monad.\n\nThere is a longer example demonstrating this
  below, and one you can compile at [example/greet.hs](https://github.com/haskell-servant/servant-snap/blob/master/example/greet.hs).\n\nFor
  more information about getting started servant itself, please see the [servant documentation](https://haskell-servant.readthedocs.io/en/stable/).
  To learn about Snap, see the [snap-core](https://hackage.haskell.org/package/snap-core-1.0.0.0/docs/Snap-Core.html)
  and [snaplet](https://hackage.haskell.org/package/snap-1.0.0.0/docs/Snap-Snaplet.html)
  haddocks.\n\n\n## Comparison with `servant-server`\n\n**servant-snap** is very similar
  to `servant-server`, providing a number of `HasServer` instances for various `servant`
  API combinators and the function `serveSnap` for turning your API spec into a runnable
  server.\n\n**servant-snap** hosts `MonadSnap m` handlers (for example `Snap`, `Handler
  b v`). **servant-server** hosts `EitherT ServantErr IO` handlers and other monads
  that can be naturally transformed via `[enter](http://haskell-servant.readthedocs.io/en/stable/tutorial/Server.html#using-another-monad-for-your-handlers)`.\nThis
  makes **servant-snap** both a bit more flexible and a bit less type-safe, because
  **servant-snap** handlers can access data from the HTTP request. **servant-server**
  on the other hand hides the raw request from the handlers so that all routing decisions
  are determined strictly by the API type.\n\nSnap's `Handler b v` handlers use lenses
  and snaplets to control which effects and state the handler can access.\nIn **servant-server**,
  you use `[vault](https://hackage.haskell.org/package/servant-0.8.1/docs/Servant-API-Vault.html)`
  to hold these needed bits of state (for example, database connections).\n\n**servant-server**
  provides combinators for controlling access to sub-api's. **servant-snap** still
  does authentication through the `[auth snaplet](https://hackage.haskell.org/package/snap-1.0.0.0/docs/Snap-Snaplet-Auth.html)`,
  without signalling this in the API type.\nWe are still thinking about how to support
  type-level signalling of auth requirements for **servant-snap**.\nIt would be possible
  to provide `snap`-specific auth combinators, but using them would force a `snap`
  dependency on the API itself, which we want to avoid (it is common to compile a
  `servant` API with `ghcjs`, so we want the API to be packaged without any system
  dependencies).\n\n\n## FAQ\n\n\n### Can `servant-snap` serve Heist templates?\n\nYou
  can call `renderTemplate` in a handler for a `Raw` endpoint. We don't offer a `Heist`
  combinator, but in the future this may be nice to have in another package.\n\n\n###
  What does Snap offer beyond a regular **servant-server** application?\n\nSnap has
  a very simple core, a nice monad for request/response handling, and a large number
  of stable units of added functionality (\"Snaplets\") for handling auth, persistence,
  templating, etc. One of the biggest pain-points of Snap use is manually digging
  data out of requests, validating it, and building responses. Servant fills this
  gap for snap perfectly. Read more about the [Snap Framework](http://www.snapframework.com)!\n\n\n###
  If this package is called **servant-snap**, shouldn't **servant-server** be named
  **servant-wai**? The current naming is confusing.\n\nAt some point, we hope to split
  **servant-server** into a generic base part and **servant-wai**, **servant-snap**,
  backends. This would make writing other backends easier and drastically reduce code
  duplication.\n\n\n\n## More detailed Snap example\n\nNote: *It's recommended to
  use `snap init` to build a site template for new projects, rather than packing everything
  into a single file like this.*\n\n\n```\n-- Top-level Application State\ndata App
  = App\n  { _heist :: Snaplet (Heist App)\n  , _sess  :: Snaplet SessionManager\n
  \ , _db    :: Snaplet Postgres\n  , _auth  :: Snaplet (AuthManager App)\n  }\n\nmakeLenses''
  App\n\ninstance HasHeist App where\n  heistLens = subSnaplet heist\n\n\n-- Our app's
  base monad\ntype AppHandler = Handler App App\n\n\n-- Our Servant API\ntype Api
  = \"users\" :> Get '[JSON] [User]\n           :<|>\n           \"user\" :> Capture
  \"name\" Text :> Get '[JSON] User\n           :<|>\n           \"reset_db\" :> Post
  '[JSON] NoContent\n\n\n-- Servant API implementation using DB and Auth Snaplets\napiServer
  :: ServerT Api AppHandler\napiServer = getAllUsers :<|> getUserByName :<|> resetDB\n
  \ where\n    getAllUsers =\n      with db $ query_ \"SELECT * FROM users\"\n\n    getUserByName
  name =\n      with db $ query  \"SELECT * FROM users WHERE name=(?)\" [(Only name)]\n\n
  \   resetDB = do\n      isAdmin <- with auth $ do\n        u <- getCurrentUser\n
  \       return ((userLogin <$> u) == Just \"admin\")\n      if isAdmin\n      then
  with db $ query_ \"DELETE FROM users\"\n      else throwError err403\n          \n\n--
  Snap initializer action\n-- (Notice that we mix servant and non-servant routes)\napp
  :: SnapletInit App App\napp =  makeSnaplet \"app\" \"standard example app\" Nothing
  $ do\n  h <- nestSnaplet \"\" heist $  heistInit \"templates\"\n  s <- nestSnaplet
  \"sess\" sess $\n    initCookieSessionManager \"site_key.txt\" \"sess\" Nothing
  (Just 3600)\n  d <- nestSnaplet \"db\" db pgsInit\n  a <- nestSnaplet \"auth\" auth
  $ initPostgresAuth sess d\n  addRoutes [ (\"login\",     with auth handleLoginSubmit)
  \   -- Regular snap handler\n            , (\"logout\",    with auth handleLogout)
  \        -- for non-API routes\n            , (\"new_user\",  with auth handleNewUser)\n
  \           , (\"api\",       serveSnap api apiServer         -- servant-snap handler\n
  \           , (\"\",          serveDirectory \"static\")\n            ]\n  addAuthSplices
  h auth\n  return $ App h s d a\n\nmain :: IO ()\nmain = httpServe defaultConfig
  app\n```\n"
license-name: BSD-3-Clause
