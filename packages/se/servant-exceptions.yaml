homepage: https://github.com/ch1bo/servant-exceptions#readme
changelog-type: markdown
hash: 74edd7eea8211c3fc6df66a93086c84a848cefc5efec8501fc70eb67c2eb2e67
test-bench-deps: {}
maintainer: sebastian.nagel@ncoding.at
synopsis: ''
changelog: ! "# Changelog\n\n## 0.1.1 - 2018-01-23\n\n * Add support for `servant-0.12`.\n\n##
  0.1.0 - 2017-12-16\n"
basic-deps:
  warp: -any
  exceptions: -any
  wai: -any
  base: ! '>=4.7 && <5'
  text: -any
  servant-server: -any
  servant: -any
  mtl: -any
  servant-exceptions: -any
  http-types: -any
  aeson: -any
  http-media: -any
all-versions:
- 0.1.0
- 0.1.1
author: Sebastian Nagel
latest: 0.1.1
description-type: markdown
description: ! "# servant-exceptions\nServant servers typically run their handlers
  in some form of `IO`. Either directly in the builtin `Handler` monad or a custom
  monad transformer on top it. When APIs fail, one would typically use the `MonadError
  ServantError` instance via `throwError` to create an error response of type `ServantErr`.\n\nThis
  approach has two problems:\n\n* `Handler` (basically being `ExceptT ServantErr IO`)
  is considered an anti-pattern by some, as it suggests to novice users that only
  `ServantErr` would occur, but in `IO` any exception can be raised to abort execution\n*
  `ServantErr` values need to be created at the call site of `throwError`, where the
  requested content type and/or headers are not available\n\n`servant-exception` tries
  to help with both by making it easy to catch specific error types with an instance
  of `Exception` and provide automatic encoding into the requested content-type.\n\nThe
  API combinator `Throws e` can be used to catch exceptions of type `e` in the server,
  for example:\n\n```\ntype API = \"api\" :> Throws UsersError :> \"users\" :> Get
  '[JSON, PlainText] [User]\n```\n\nThe type `UsersError` can then be used to describe
  expected errors and their conversion via type class instances:\n\n```\ndata UsersError
  = UserNotFound\n                | UserAlreadyExists\n                | InternalError\n
  \               deriving (Show)\n\ninstance Exception UsersError\n\ninstance ToServantErr
  UsersError where\n  status UserNotFound = status404\n  status UserAlreadyExists
  = status409\n  status InternalError = status500\n\ninstance ToJSON UsersError where\n
  \ toJSON e = object [ \"type\" .= show (typeOf e)\n                    , \"message\"
  .= message e\n                    ]\n\ninstance MimeRender PlainText UsersError
  where\n  mimeRender ct = mimeRender ct . show\n```\n\n## TODO\n\nThis package is
  still a work-in-progress and lacks at least\n\n* Documentation, more examples\n*
  `servant-client` support\n* `servant-docs` support\n\n## Credit\n\nThis package
  is inspired by `servant-checked-exceptions` (Throws combinator) and\nthe generalized
  error handling in `cardano-sl`.\n"
license-name: BSD-3-Clause
