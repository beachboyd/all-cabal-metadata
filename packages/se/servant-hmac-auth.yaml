homepage: https://github.com/holmusk/servant-hmac-auth
changelog-type: markdown
hash: f148f3412d69a86473704610b9008879cded87ebdf5c94b2bf419a06ce447cf7
test-bench-deps:
  base: -any
  servant-hmac-auth: -any
maintainer: tech@holmusk.com
synopsis: Servant authentication with HMAC
changelog: ! '# Change log


  `servant-hmac-auth` uses [PVP Versioning][1].

  The change log is available [on GitHub][2].


  0.0.0

  =====


  * Initially created.


  [1]: https://pvp.haskell.org

  [2]: https://github.com/holmusk/servant-hmac-auth/releases

'
basic-deps:
  warp: ^>=3.2
  http-client: ==0.5.*
  bytestring: ^>=0.10
  wai: ^>=3.2
  case-insensitive: ^>=1.2
  base: ! '>=4.11 && <5'
  base64-bytestring: ^>=1.0
  servant-client: ==0.14.*
  servant-client-core: ^>=0.14.1
  servant-hmac-auth: -any
  servant-server: ! '>=0.14.1 && <0.15'
  servant: ! '>=0.14.1 && <0.15'
  memory: ^>=0.14.14
  containers: ! '>=0.5.7 && <0.7'
  binary: ^>=0.8
  cryptonite: ^>=0.25
  mtl: ^>=2.2.2
  transformers: ^>=0.5
  http-types: ^>=0.12
  aeson: ^>=1.3
all-versions:
- '0.0.0'
author: Holmusk
latest: '0.0.0'
description-type: markdown
description: ! "# servant-hmac-auth\n\n[![Hackage](https://img.shields.io/hackage/v/servant-hmac-auth.svg)](https://hackage.haskell.org/package/servant-hmac-auth)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Stackage
  Lts](http://stackage.org/package/servant-hmac-auth/badge/lts)](http://stackage.org/lts/package/servant-hmac-auth)\n[![Stackage
  Nightly](http://stackage.org/package/servant-hmac-auth/badge/nightly)](http://stackage.org/nightly/package/servant-hmac-auth)\n\nServant
  authentication with HMAC\n\n## Example\n\nIn this section, we will introduce the
  client-server example.\nTo run it locally you can:\n\n```shell\n$ cabal new-build\n$
  cabal new-exec readme\n```\n\nSo,it will run this on your machine.\n\n### Setting
  up\n\nSince this tutorial is written using Literate Haskell, first, let's write
  all necessary pragmas and imports.\n\n```haskell\n{-# LANGUAGE DataKinds                  #-}\n{-#
  LANGUAGE DeriveGeneric              #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving
  #-}\n{-# LANGUAGE OverloadedStrings          #-}\n{-# LANGUAGE TypeApplications
  \          #-}\n{-# LANGUAGE TypeOperators              #-}\n\nimport Control.Concurrent
  (forkIO, threadDelay)\nimport Data.Aeson (FromJSON, ToJSON)\nimport Data.Proxy (Proxy
  (..))\nimport GHC.Generics (Generic)\nimport Network.HTTP.Client (defaultManagerSettings,
  newManager)\nimport Network.Wai.Handler.Warp (run)\nimport Servant.API ((:>), Get,
  JSON)\nimport Servant.Client (BaseUrl (..), Scheme (..), ServantError, mkClientEnv)\nimport
  Servant.Server (Application, Server, serveWithContext)\n\nimport Servant.Auth.Hmac
  (HmacAuth, HmacClientM, SecretKey (..), hmacAuthServerContext, hmacClient,\n                          runHmacClient,
  signSHA256)\n```\n\n### Server\n\nLet's define our `TheAnswer` data type with the
  necessary instances for it.\n\n```haskell\nnewtype TheAnswer = TheAnswer Int\n    deriving
  (Show, Generic, FromJSON, ToJSON)\n\ngetTheAnswer :: TheAnswer\ngetTheAnswer = TheAnswer
  42\n```\n\nNow, let's introduce a very simple protected endpoint. The value of `TheAnswer`\ndata
  type will be the value that our API endpoint returns. It our case we want\nit to
  return the number `42` for all signed requests.\n\n```haskell\ntype TheAnswerToEverythingUnprotectedAPI
  = \"answer\" :> Get '[JSON] TheAnswer\ntype TheAnswerToEverythingAPI = HmacAuth
  :> TheAnswerToEverythingUnprotectedAPI\n```\n\nAs you can see this endpoint is protected
  by `HmacAuth`.\n\nAnd now our server:\n\n```haskell\nserver42 :: Server TheAnswerToEverythingAPI\nserver42
  = \\_ -> pure getTheAnswer\n```\n\nNow we can turn `server` into an actual webserver:\n\n```haskell\ntopSecret
  :: SecretKey\ntopSecret = SecretKey \"top-secret\"\n\napp42 :: Application\napp42
  = serveWithContext\n    (Proxy @TheAnswerToEverythingAPI)\n    (hmacAuthServerContext
  signSHA256 topSecret)\n    server42\n```\n\n### Client\n\nNow let's implement client
  that queries our server and signs every request\nautomatically.\n\n```haskell\nclient42
  :: HmacClientM TheAnswer\nclient42 = hmacClient @TheAnswerToEverythingUnprotectedAPI\n```\n\nNow
  we need to write function that runs our client:\n\n```haskell\nrunClient :: SecretKey
  -> HmacClientM a -> IO (Either ServantError a)\nrunClient sk client = do\n    manager
  <- newManager defaultManagerSettings\n    let env = mkClientEnv manager $ BaseUrl
  Http \"localhost\" 8080 \"\"\n    runHmacClient signSHA256 sk env client\n```\n\n###
  Main\n\nAnd we're able to run our server in separate thread and perform two quiries:\n\n*
  Properly signed\n* Signed with different key\n\n```haskell\nmain :: IO ()\nmain
  = do\n    _ <- forkIO $ run 8080 app42\n\n    print =<< runClient topSecret client42\n
  \   print =<< runClient (SecretKey \"wrong!\") client42\n\n    threadDelay $ 10
  ^ (6 :: Int)\n```\n"
license-name: MIT
