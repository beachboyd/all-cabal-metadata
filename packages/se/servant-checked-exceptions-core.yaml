homepage: https://github.com/cdepillabout/servant-checked-exceptions
changelog-type: markdown
hash: 8acaf782929555956f95b13de8cc1d87ffe91c1feb1c5ff57fe02015bdbd793b
test-bench-deps:
  base: -any
  doctest: -any
  Glob: -any
maintainer: cdep.illabout@gmail.com
synopsis: Checked exceptions for Servant APIs.
changelog: ! "## 2.0.0.0\n\n*    Initial release of `servant-checked-exceptions-core`
  package, with\n     core types factored out of `servant-checked-exceptions` for
  users\n     who want access to them without incurring a dependency on `servant-server`\n
  \    and `servant-client`. See\n    [issue 25](https://github.com/cdepillabout/servant-checked-exceptions/issues/25)\n\n*
  \   Compared to `servant-checked-exceptions`, `servant-checked-exceptions-core`\n
  \    breaks up the `Exceptions` module into `Verbs` and `Envelope`.\n    [issue
  18](https://github.com/cdepillabout/servant-checked-exceptions/issues/18)\n"
basic-deps:
  servant-docs: ! '>=0.10'
  bytestring: -any
  base: ! '>=4.9 && <5'
  text: -any
  world-peace: -any
  http-api-data: -any
  servant: ! '>=0.12'
  tagged: -any
  servant-checked-exceptions-core: -any
  deepseq: -any
  http-types: -any
  aeson: -any
  http-media: -any
  profunctors: -any
all-versions:
- 2.0.0.0
author: Dennis Gosnell
latest: 2.0.0.0
description-type: markdown
description: ! "\nServant.Checked.Exceptions\n==========================\n\n[![Build
  Status](https://secure.travis-ci.org/cdepillabout/servant-checked-exceptions.svg)](http://travis-ci.org/cdepillabout/servant-checked-exceptions)\n[![Hackage](https://img.shields.io/hackage/v/servant-checked-exceptions.svg)](https://hackage.haskell.org/package/servant-checked-exceptions)\n[![Stackage
  LTS](http://stackage.org/package/servant-checked-exceptions/badge/lts)](http://stackage.org/lts/package/servant-checked-exceptions)\n[![Stackage
  Nightly](http://stackage.org/package/servant-checked-exceptions/badge/nightly)](http://stackage.org/nightly/package/servant-checked-exceptions)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\n`servant-checked-exceptions`
  provides a way to specify errors thrown by a\nServant api on the type level.  It
  allows easy composition between different\nerror types.\n\n`servant-checked-exceptions`
  provides the\n[`Throws`](https://hackage.haskell.org/package/servant-checked-exceptions/docs/Servant-Checked-Exceptions.html#t:Throws)\ndata
  type to signify which errors can be thrown by an api.  For instance,\nimagine a
  `getAuthor` api that returns an `Author` based on an `AuthorId`:\n\n```haskell\n--
  This is a servant-compatible type describing our api.\ntype Api =\n  \"author\"
  :>\n  Capture \"author-id\" AuthorId :>\n  Throws DatabaseError :>\n  Throws AuthorNotFoundError
  :>\n  Get '[JSON] Author\n\n-- These are the two errors that can be thrown:\ndata
  DatabaseError = DatabaseError\ndata AuthorNotFoundError = AuthorNotFoundError\n```\n\nThe
  corresponding handler function uses the\n[`Envelope`](https://hackage.haskell.org/package/servant-checked-exceptions/docs/Servant-Checked-Exceptions.html#t:Envelope)\ndata
  type to model the possibility of returning an `Author` successfully, or\neither
  `DatabaseError` or `AuthorNotFoundError` unsuccessfully.\nInternally, `Envelope`
  is using an open sum-type to easily represent multiple\ndifferent errors:\n\n```haskell\ngetAuthorHandler\n
  \ :: AuthorId\n  -> Handler (Envelope '[DatabaseError, AuthorNotFoundError] Author)\ngetAuthorHandler
  authorId = ...\n```\n\nFor more documentation and usage examples, see the\n[documentation](https://hackage.haskell.org/package/servant-checked-exceptions)
  on Hackage.\n\n## Why would I want to use this?\n\nUsing `Envelope` with its open
  sum-type to represent errors gives us an easy\nway to reuse errors on multiple routes.\n\nFor
  instance, imagine that we had another api for updating an author's name,\ngiven
  the author's ID.  Using `Throws` and `Envelope`, it might look like this:\n\n```haskell\ntype
  Api =\n  \"update-author-name\" :>\n  Capture \"author-id\" AuthorId :>\n  Capture
  \"author-name\" AuthorName :>\n  Throws DatabaseError :>\n  Throws AuthorNotFoundError
  :>\n  Throws AuthorNameTooShort :>\n  Post '[JSON] Author\n\ndata AuthorNameTooShort
  = AuthorNameTooShort\n\npostChangeAuthorName\n  :: AuthorId\n  -> AuthorName\n  ->
  Handler (Envelope '[DatabaseError, AuthorNotFoundError, AuthorNameTooShort] Author)\npostChangeAuthorName
  authorId newAuthorName = ...\n```\n\nWe are able to reuse the `DatabaseError` and
  `AuthorNotFoundError`.  If we try\nto return an error that is not declared using
  `Throws`, GHC will give us an\nerror.  We get flexiblity and type-safety.\n\nWhen
  using [servant-docs](https://hackage.haskell.org/package/servant-docs) to\ncreate
  documentation, only one instance of `ToSample` needs to be created for\neach error
  (`DatabaseError`, `AuthorNotFoundError`, and `AuthorNameTooShort`).\nMultiple instances
  of `ToSample` do not need to be created for _every_\ndifferent `Envelope` used in
  a handler.\n\n## Example\n\nThis repository contains an [example](example/) of using\n`servant-checked-exceptions`.
  \ This includes an [api](example/Api.hs),\n[server](example/Server.hs), [client](example/Client.hs),
  and\n[documentation](example/Docs.hs).\n\nBelow I show how to compile and run these
  examples.\n\n### Compile\n\nThe examples can be compiled by using the `buildexample`
  flag:\n\n```sh\n$ stack build --flag servant-checked-exceptions:buildexample\n```\n\nThis
  creates three executables.  A server, a client, and a documentaiton\ngenerator.\n\n###
  Run the server\n\nThe server is a small example that will take search queries and
  return results.\nThe server can be run with the following command:\n\n```sh\n$ stack
  exec -- servant-checked-exceptions-example-server\n```\n\nThis runs the server on
  port 8201.  Here is an example of using `curl` to\naccess the server.  This will
  send the query `hello`:\n\n```sh\n$ curl \\\n    --request POST \\\n    --header
  'Accept: application/json' \\\n    'http://localhost:8201/lax-search/hello'\n{\"data\":\"good\"}\n```\n\nIf
  you try to send a query that is not `hello`, the server will return an error:\n\n```sh\n$
  curl \\\n    --request POST \\\n    --header 'Accept: application/json' \\\n    'http://localhost:8201/lax-search/goodbye'\n{\"err\":\"BadSearchTermErr\"}\n```\n\nThere
  is also a strict api, that requires `hello` to be capitalized like `Hello`:\n\n```sh\n$
  curl \\\n    --request POST \\\n    --header 'Accept: application/json' \\\n    'http://localhost:8201/strict-search/hello'\n{\"err\":\"IncorrectCapitalization\"}\n$
  curl \\\n    --request POST \\\n    --header 'Accept: application/json' \\\n    'http://localhost:8201/strict-search/Hello'\n{\"data\":\"good\"}\n```\n\n###
  Run the client\n\nThe client provides a small command line application to query
  the server.  In\norder to use the client, the server must be running.\n\nUse the
  client to access the lax search api:\n\n```sh\n$ stack exec -- servant-checked-exceptions-example-client
  foobar\nthe search term was not \"Hello\"\n$ stack exec -- servant-checked-exceptions-example-client
  hello\nSuccess: good\n```\n\nUse the client to access the strict search api:\n\n```sh\n$
  stack exec -- servant-checked-exceptions-example-client --strict hello\nthe search
  term was not capitalized correctly\n$ stack exec -- servant-checked-exceptions-example-client
  --strict Hello\nSuccess: good\n```\n\n### Run the documentation generator\n\nThe
  documentation generator will generate documentation for the api in Markdown:\n\n```sh\n$
  stack exec -- servant-checked-exceptions-example-docs\n```\n\nHere is a small example
  of the documentation that will be generated for the lax\nsearch api:\n\n```markdown\n##
  POST /lax-search/:query\n\n#### Captures:\n\n- *query*: a search string like \"hello\"
  or \"bye\"\n\n#### Response:\n\n- Status code 200\n- Headers: []\n\n- Supported
  content types are:\n\n    - `application/json`\n\n- This is a successful response.\n\n{\"data\":\"good\"}\n\n-
  a completely incorrect search term was used\n\n{\"err\":\"BadSearchTermErr\"}\n```\n\nYou
  can see that both the success and error responses are documented.\n\n## Packaging
  the core types\n\n[`servant-checked-exceptions-core`](https://hackage.haskell.org/package/servant-checked-exceptions-core)\nexports
  the core types need for building an API with checked exceptions,\nallowing you to
  avoid depending on server-side libraries like `warp`, `Glob`\nand `servant-server`.
  This can be useful if you are writing an API meant to be\nshared with ghcjs and
  run in a browser, where these dependencies aren't\navailable.\n\n"
license-name: BSD-3-Clause
