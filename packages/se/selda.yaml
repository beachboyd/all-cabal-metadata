homepage: https://selda.link
changelog-type: markdown
hash: ae9216e88a6000e4ca9618ab837f6ebe701d1aae6a99688aae545b55fba66be8
test-bench-deps: {}
maintainer: anton@ekblad.cc
synopsis: Multi-backend, high-level EDSL for interacting with SQL databases.
changelog: ! '# Revision history for Selda



  ## 0.3.2.0 -- 2018-08-07


  * Some aggregates are now nullable.

  * sum_ on an empty table doesn''t crash anymore.

  * Aggregating over an empty selectValues doesn''t crash anymore.



  ## 0.3.1.0 -- 2018-08-06


  * Minor API fix when defining table attributes.



  ## 0.3.0.0 -- 2018-08-05


  * Support for Stack and GHC 8.4.

  * Precedence fix for selector index (!) operator.

  * Accept INT and SMALLINT columns in user-created PostgreSQL tables.

  * Add combinator for turning off foreign key checking.

  * Rename unsafeRowId/unsafeId to toRowId/rowId.

  * Add typed row identifiers.

  * More generic type for sum_.

  * Table validation against current database.

  * Basic migration support.

  * Basic index support.

  * Remove ad hoc tables; only generic tables from now on.



  ## 0.2.0.0 -- 2018-04-02


  * Support custom column names for generic tables.

  * Scope safety fix for inner queries.

  * Better type errors on GHC 8+ for inner queries.



  ## 0.1.12.1 -- 2018-02-27


  * New PPConfig hook for more flexibility when compiling types.



  ## 0.1.12.0 -- 2018-01-11


  * Allow recursive and optional foreign keys.

  * Allow arbitrary enums in tables, represented as text.

  * Fix RowID issues for PostgreSQL.

  * Fix auto-incrementing primary keys for generic tables.



  ## 0.1.11.2 -- 2017-12-14


  * Fix treatment of booleans in PostgreSQL backend.



  ## 0.1.11.1 -- 2017-10-10


  * Fix rare infinite loop bug in in-process cache.



  ## 0.1.11.0 -- 2017-09-08


  * Fix name generation in the presence of isIn over queries.

  * SELECT DISTINCT support.

  * Conditional expressions and matchNull.



  ## 0.1.10.1 -- 2017-08-11


  * Fix name generation in the presence of multiple aggregates.



  ## 0.1.10.0 -- 2017-08-01


  * Async exception safety.

  * Allow MonadSelda instances not built on SeldaT.

  * Chunk very large insertions on backends that request it (i.e. SQLite).

  * GHC 8.2 support.



  ## 0.1.9.0 -- 2017-06-16


  * Properly document semantics of order.

  * Export conditional inserts.

  * Fix Haste build for backends.



  ## 0.1.8.0 -- 2017-06-10


  * Move SQL pretty-printing config into a single type.

  * Support for binary blobs.

  * Support for prepared statements.

  * Support for connection reuse across Selda computations.

  * Cleaner and more robust backend API.

  * Stricter type constraints on comparisons.

  * Allow limit on inner queries.

  * Allow inspecting row identifiers.



  ## 0.1.7.0 -- 2017-05-17


  * Add specialized insertUnless upsert variant.

  * Fix potential race condition in upserts.

  * Use abstract row identifier type for auto-incrementing primary keys.

  * Less strict version bounds on dependencies.



  ## 0.1.6.0 -- 2017-05-07


  * Conditional insert ("upsert") support.

  * Support `SELECT x IN (SELECT ...)` and `SELECT x IN (a, b, ...)` queries.

  * Explicit inner queries.

  * Rename `inner` to `innerJoin`, more intuitive behavior for `suchThat`.

  * Add `from` shorthand for `\s q -> fmap (!s) q`.

  * Unique and foreign key constraints for generics.



  ## 0.1.5.0 -- 2017-05-05


  * Inner join support.

  * More sensible names in backend API.

  * Fix rounding and casts.



  ## 0.1.4.1 -- 2017-05-04


  * Fix cache consistency bug in the presence of multiple databases.



  ## 0.1.4.0 -- 2017-05-04


  * Add uniqueness constraints and foreign keys.



  ## 0.1.3.3 -- 2017-05-04


  * Fix cache invalidation race when using transactions.



  ## 0.1.3.2 -- 2017-05-01


  * Only throw well-documented, Selda-specific exceptions.



  ## 0.1.3.1 -- 2017-05-01


  * More Hackage-friendly README.



  ## 0.1.3.0 -- 2017-04-30


  * Add selectors for non-generic tables.

  * Allow default insertions on all columns.

  * More sensible API for LIMIT.

  * Fix broken SQL being generated for pathological corner cases.

  * Documentation fixes.



  ## 0.1.2.0 -- 2017-04-20


  * Replace `Â¤` with `:*:` in table definitions.



  ## 0.1.1.1 -- 2017-04-20


  * Minor documentation fixes.



  ## 0.1.1.0 -- 2017-04-20


  * Generic tables, queries and mutation.

  * Select from inline tables.

  * Tutorial updates.

  * Minor bugfixes.



  ## 0.1.0.0 -- 2017-04-14


  * Initial release.

'
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <1.10'
  unordered-containers: ! '>=0.2.6 && <0.3'
  text: ! '>=1.0 && <1.3'
  mtl: ! '>=2.0 && <2.3'
  hashable: ! '>=1.1 && <1.3'
  psqueues: ! '>=0.2 && <0.3'
all-versions:
- '0.1.0.0'
- '0.1.1.1'
- '0.1.2.0'
- '0.1.3.3'
- '0.1.4.1'
- '0.1.5.0'
- '0.1.6.0'
- '0.1.7.0'
- '0.1.8.0'
- '0.1.9.0'
- '0.1.10.1'
- '0.1.11.2'
- '0.1.12.1'
- '0.3.2.0'
author: Anton Ekblad
latest: '0.3.2.0'
description-type: markdown
description: ! "Selda\n=====\n\n[![Join the chat at https://gitter.im/selda-hs/Lobby](https://badges.gitter.im/selda-hs/Lobby.svg)](https://gitter.im/selda-hs/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Hackage](https://img.shields.io/hackage/v/selda.svg?style=flat)](http://hackage.haskell.org/package/selda)\n[![IRC
  channel](https://img.shields.io/badge/IRC-%23selda-1e72ff.svg?style=flat)](https://www.irccloud.com/invite?channel=%23selda&amp;hostname=irc.freenode.net&amp;port=6697&amp;ssl=1)\n![MIT
  License](http://img.shields.io/badge/license-MIT-brightgreen.svg)\n[![Build Status](https://travis-ci.org/valderman/selda.svg?branch=master)](https://travis-ci.org/valderman/selda)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/selda.svg)\n\n\nWhat is Selda?\n==============\n[Selda](https://selda.link)
  is a Haskell library for interacting with SQL-based relational databases.\nIt was
  inspired by [LINQ](https://en.wikipedia.org/wiki/Language_Integrated_Query) and\n[Opaleye](http://hackage.haskell.org/package/opaleye).\n\n\nFeatures\n========\n\n*
  Monadic interface.\n* Portable: backends for SQLite and PostgreSQL.\n* Generic:
  easy integration with your existing Haskell types.\n* Creating, dropping and querying
  tables using type-safe database schemas.\n* Typed query language with products,
  filtering, joins and aggregation.\n* Inserting, updating and deleting rows from
  tables.\n* Conditional insert/update.\n* Transactions, uniqueness constraints and
  foreign keys.\n* Seamless prepared statements.\n* Configurable, automatic, consistent
  in-process caching of query results.\n* Lightweight and modular: few dependencies,
  and non-essential features are\n  optional or split into add-on packages.\n\n\nGetting
  started\n===============\n\nInstall the `selda` package from Hackage, as well as
  at least one of the\nbackends:\n\n    $ cabal update\n    $ cabal install selda
  selda-sqlite selda-postgresql\n\nThen, read [the tutorial](https://selda.link/tutorial).\nThe
  [API documentation](http://hackage.haskell.org/package/selda) will probably\nalso
  come in handy.\n\n\nRequirements\n============\n\nSelda requires GHC 7.10+, as well
  as SQLite 3.7.11+ or PostgreSQL 9.6+.\nTo build the SQLite backend, you need a C
  compiler installed.\nTo build the PostgreSQL backend, you need the `libpq` development
  libraries\ninstalled (`libpq-dev` on Debian-based Linux distributions).\n\nHacking\n=======\n\nContributing\n------------\n\nAll
  forms of contributions are welcome!\n\nIf you have a bug to report, please try to
  include as much information as\npossible, preferably including:\n\n* A brief description
  (one or two sentences) of the bug.\n* The version of Selda+backend where the bug
  was found.\n* A step-by-step guide to reproduce the bug.\n* The *expected* result
  from following these steps.\n* What *actually* happens when following the steps.\n*
  Which component contains the bug (selda, selda-sqlite or selda-postgresql),\n  if
  you're reasonably sure about where the bug is.\n\nBonus points for a small code
  example that illustrates the problem.\n\nIf you want to contribute code, please
  consult the following checklist before\nsending a pull request:\n\n* Does the code
  build with a recent version of GHC?\n* Do all the tests pass?\n* Have you added
  any tests covering your code?\n\n\nSetting up the build environment\n--------------------------------\n\nFrom
  the repository root:\n\n* Install `libpq-dev` from your package manager.\n    This
  is required to build the PostgreSQL backend.\n* Run `make sandbox` followed by `make
  deps`.\n    This will set up a local sandbox for your Selda hacking, and install
  all\n    Haskell necessary dependencies.\n* Familiarise yourself with the various
  targets in the makefile.\n    The dependencies between Selda, the backends and the
  tests are slightly\n    complex, so straight-up cabal is too quirky for day to day
  hacking.\n\n\nSetting up a VM for PostgreSQL testing\n--------------------------------------\n\nWhile
  the SQLite backend is completely self-contained, the PostgreSQL backend\nneeds an
  appropriate server for testing. Setting this up in a virtual machine\nis definitely
  less intrusive than setting up a server on your development\nmachine. To set up
  a VM for the PostgreSQL backend tests:\n\n* Install your favourite hypervisor, such
  as VMWare player or VirtualBox.\n* Download a pre-built PostgreSQL VM from\n    [Bitnami](https://bitnami.com/stack/postgresql/virtual-machine).\n*
  Import the OVA file into your hypervisor.\n* Change the network settings of your
  newly imported VM to NAT, and make sure\n    that port 5432 is forwarded. Note that
  this will conflict with any PostgreSQL\n    server running on your machine while
  the VM is running.\n* Boot your VM and note the password displayed on the login
  screen.\n* Create the file `selda-tests/PGConnectInfo.hs` with the following content:\n
  \   ```haskell\n    {-# LANGUAGE OverloadedStrings #-}\n    module PGConnectInfo
  where\n    import Database.Selda.PostgreSQL\n    \n    pgConnectInfo = \"test\"
  `on` \"localhost\" `auth` (\"postgres\", \"$PASSWORD\")\n    ```\n    Where `$PASSWORD`
  is the password from the VM's login screen.\n* Log in to the VM and disable the
  built-in firewall by running\n    `sudo systemctl disable ufw ; sudo systemctl stop
  ufw`.\n* From your host machine, create the test database:\n    ```\n    $ psql
  -h 127.0.0.1 -U postgres -W\n    [password from login screen]\n    # CREATE TABLE
  test;\n    # \\q\n    ```\n* Run `make pgtest` to check that everything works.\n\n\nTODOs\n-----\n\nFeatures
  that would be nice to have but are not yet implemented.\n\n* Monadic if/else.\n*
  Streaming\n* MySQL/MariaDB backend.\n* MSSQL backend.\n* Automatically sanity check
  changelog, versions and date before release.\n"
license-name: MIT
