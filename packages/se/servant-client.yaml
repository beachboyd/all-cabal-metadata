homepage: http://haskell-servant.readthedocs.org/
changelog-type: markdown
hash: 48a71f97589e6d1a86cfbd5e31e6b10005bf47652fe7ca77fdf75f81479f4c26
test-bench-deps:
  warp: -any
  http-client: -any
  tdigest: ! '>=0.2 && <0.3'
  bytestring: -any
  wai: -any
  base: -any
  servant-client: -any
  hspec: ! '>=2.6.0 && <2.7'
  text: -any
  markdown-unlit: -any
  http-api-data: -any
  kan-extensions: -any
  servant-client-core: -any
  entropy: ! '>=0.4.1.3 && <0.5'
  network: ! '>=2.8.0.0 && <2.9'
  HUnit: ! '>=1.6.0.0 && <1.7'
  servant-server: ==0.15.*
  servant: ==0.15.*
  base-compat: -any
  mtl: -any
  transformers: -any
  generics-sop: ! '>=0.4.0.1 && <0.5'
  QuickCheck: ! '>=2.12.6.1 && <2.13'
  http-types: -any
  aeson: -any
  transformers-compat: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: Automatic derivation of querying functions for servant
changelog: ! "[The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant-client/CHANGELOG.md)\n[Changelog
  for `servant` package contains significant entries for all core packages.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)\n\n0.15\n----\n\n-
  Streaming refactoring.\n  [#991](https://github.com/haskell-servant/servant/pull/991)\n
  \ [#1076](https://github.com/haskell-servant/servant/pull/1076)\n  [#1077](https://github.com/haskell-servant/servant/pull/1077)\n\n
  \ The streaming functionality (`Servant.API.Stream`) is refactored to use\n  `servant`'s
  own `SourceIO` type (see `Servant.Types.SourceT` documentation),\n  which replaces
  both `StreamGenerator` and `ResultStream` types.\n\n  New conversion type-classes
  are `ToSourceIO` and `FromSourceIO`\n  (replacing `ToStreamGenerator` and `BuildFromStream`).\n
  \ There are instances for *conduit*, *pipes* and *machines* in new packages:\n  [servant-conduit](https://hackage.haskell.org/package/servant-conduit)\n
  \ [servant-pipes](https://hackage.haskell.org/package/servant-pipes) and\n  [servant-machines](https://hackage.haskell.org/package/servant-machines)\n
  \ respectively.\n\n  Writing new framing strategies is simpler. Check existing strategies
  for examples.\n\n  This change shouldn't affect you, if you don't use streaming
  endpoints.\n\n- *servant-client* Separate streaming client.\n  [#1066](https://github.com/haskell-servant/servant/pull/1066)\n\n
  \ We now have two `http-client` based clients,\n  in `Servant.Client` and `Servant.Client.Streaming`.\n\n
  \ Their API is the same, except for\n  - `Servant.Client` **cannot** request `Stream`
  endpoints.\n  - `Servant.Client` is *run* by direct\n    `runClientM :: ClientM
  a -> ClientEnv -> IO (Either ServantError a)`\n  - `Servant.Client.Streaming` **can**
  request `Stream` endpoints.\n  - `Servant.Client.Streaming` is *used* by CPSised\n
  \   `withClientM :: ClientM a -> ClientEnv -> (Either ServantError a -> IO b) ->
  IO b`\n\n  To access `Stream` endpoints use `Servant.Client.Streaming` with\n  `withClientM`;
  otherwise you can continue using `Servant.Client` with `runClientM`.\n  You can
  use both too, `ClientEnv` and `BaseUrl` types are same for both.\n\n  **Note:**
  `Servant.Client.Streaming` doesn't *stream* non-`Stream` endpoints.\n  Requesting
  ordinary `Verb` endpoints (e.g. `Get`) will block until\n  the whole response is
  received.\n\n  There is `Servant.Client.Streaming.runClientM` function, but it has\n
  \ restricted type. `NFData a` constraint prevents using it with\n  `SourceT`, `Conduit`
  etc. response types.\n\n  ```haskell\n  runClientM :: NFData a => ClientM a -> ClientEnv
  -> IO (Either ServantError a)\n  ```\n\n  This change shouldn't affect you, if you
  don't use streaming endpoints.\n\n- Drop support for GHC older than 8.0\n  [#1008](https://github.com/haskell-servant/servant/pull/1008)\n
  \ [#1009](https://github.com/haskell-servant/servant/pull/1009)\n\n- *servant-client-core*
  Add `NFData (GenResponse a)` and `NFData ServantError` instances.\n  [#1076](https://github.com/haskell-servant/servant/pull/1076)\n\n
  *servant-client-core* Add `aeson` and `Lift BaseUrl` instances\n  [#1037](https://github.com/haskell-servant/servant/pull/1037)\n\n0.14\n----\n\n-
  `Stream` takes a status code argument\n\n  ```diff\n  -Stream method        framing
  ctype a\n  +Stream method status framing ctype a\n  ```\n\n  ([#966](https://github.com/haskell-servant/servant/pull/966)\n
  \  [#972](https://github.com/haskell-servant/servant/pull/972))\n\n- `ToStreamGenerator`
  definition changed, so it's possible to write an instance\n  for conduits.\n\n  ```diff\n
  \ -class ToStreamGenerator f a where\n  -   toStreamGenerator :: f a -> StreamGenerator
  a\n  +class ToStreamGenerator a b | a -> b where\n  +   toStreamGenerator :: a ->
  StreamGenerator b\n  ```\n\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  Added `NoFraming` streaming strategy\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  *servant-client-core* Add `hoistClient` to `HasClient`.\n  Just like `hoistServer`
  allows us to change the monad in which request handlers\n  of a web application
  live in, we also have `hoistClient` for changing the monad\n  in which *client functions*
  live.\n  Read [tutorial section for more information](https://haskell-servant.readthedocs.io/en/release-0.14/tutorial/Client.html#changing-the-monad-the-client-functions-live-in).\n
  \ ([#936](https://github.com/haskell-servant/servant/pull/936))\n\n- *servant-client*
  Add more constructors to `RequestBody`, including\n  `RequestBodyStream`.\n  *Note:*
  we are looking for http-library agnostic API,\n  so the might change again soon.\n
  \ Tell us which constructors are useful for you!\n  ([#913](https://github.com/haskell-servant/servant/pull/913))\n\n0.13.0.1\n--------\n\n-
  Support `base-compat-0.10`\n\n0.13\n----\n\n- Streaming endpoint support.\n  ([#836](https://github.com/haskell-servant/servant/pull/836))\n-
  *servant* Add `Servant.API.Modifiers`\n  ([#873](https://github.com/haskell-servant/servant/pull/873))\n-
  *servant-client* Support `http-client`â€™s `CookieJar`\n  ([#897](https://github.com/haskell-servant/servant/pull/897)\n
  \  [#883](https://github.com/haskell-servant/servant/pull/883))\n\n0.12.0.1\n--------\n\n-
  Send `Accept` header.\n  ([#858](https://github.com/haskell-servant/servant/issues/858))\n\n0.12\n----\n\n-
  Factored out into `servant-client-core` all the functionality that was\n  independent
  of the `http-client` backend.\n\n0.11\n----\n\n### Other changes\n\n- Path components
  are escaped\n  ([#696](https://github.com/haskell-servant/servant/pull/696))\n-
  `Req` `reqPath` field changed from `String` to `BS.Builder`\n  ([#696](https://github.com/haskell-servant/servant/pull/696))\n-
  Include `Req` in failure errors\n  ([#740](https://github.com/haskell-servant/servant/pull/740))\n\n0.10\n-----\n\n###
  Breaking changes\n\nThere shouldn't be breaking changes. Released as a part of `servant`
  suite.\n\n### Other changes\n\n* Add MonadBase and MonadBaseControl instances for
  ClientM\n  ([#663](https://github.com/haskell-servant/servant/issues/663))\n\n*
  client asks for any content-type in Accept contentTypes non-empty list\n  ([#615](https://github.com/haskell-servant/servant/pull/615))\n\n*
  Add `ClientLike` class that matches client functions generated using `client`\n
  \ with client data structure.\n  ([#640](https://github.com/haskell-servant/servant/pull/640))\n\n*
  Allow direct use of 'RequestBody'\n  ([#661](https://github.com/haskell-servant/servant/pull/661))\n\n0.9.1.1\n-------\n\n*
  Add MonadThrow and MonadCatch instances for ClientM\n\n0.9\n---\n\n* BACKWARDS INCOMPATIBLE:
  `client` now returns a ClientM which is a Reader for\n  BasicEnv. BasicEnv comprises
  the HttpManager and BaseUrl that have had to be\n  passed to each method returned
  by `client`.\n\n0.7.1\n-----\n\n* Support GHC 8.0\n* `ServantError` has an `Eq`
  instance now.\n\n0.6\n---\n\n* `client` no longer takes `BaseUrl` and `Manager`
  arguments. Instead, each function returned by `client` requires these two arguments.\n\n0.5\n---\n\n*
  Use the `text` package instead of `String`.\n* Support for the `HttpVersion`, `IsSecure`,
  `RemoteHost` and `Vault` combinators\n* Added support for `path` on `BaseUrl`.\n*
  `client` now takes an explicit `Manager` argument.\n* Use `http-api-data` instead
  of `Servant.Common.Text`\n* Client functions now consider any 2xx successful.\n*
  Remove matrix params.\n* Added support for Basic authentication\n* Add generalized
  authentication support via the `AuthClientData` type family and\n  `AuthenticateReq`
  data type\n\n0.4.1\n-----\n* The `HasClient` instance for `Delete cts ()` now does
  not care at all about content types provided.\n\n0.4\n---\n* `Delete` now is like
  `Get`, `Post`, `Put`, and `Patch` and returns a response body\n* Support content-type
  aware combinators and `Accept`/`Content-type` headers\n* Added a lot of tests\n*
  Support multiple concurrent threads\n* Use `ServantError` to report Errors instead
  of `String`\n* Make the clients for `Raw` endpoints return the whole `Response`
  value (to be able to access response headers for example)\n* Support for PATCH\n*
  Make () instances expect No Content status code, and not try to decode body.\n*
  Add support for response headers\n\n0.2.2\n-----\n* Add TLS support\n* Add matrix
  parameter support\n"
basic-deps:
  http-client: ! '>=0.5.13.1 && <0.6'
  semigroupoids: ! '>=5.3.1 && <5.4'
  exceptions: ! '>=0.10.0 && <0.11'
  bytestring: ! '>=0.10.8.1 && <0.11'
  stm: ! '>=2.4.5.1 && <2.6'
  base: ! '>=4.9 && <4.13'
  time: ! '>=1.6.0.1 && <1.9'
  text: ! '>=1.2.3.0 && <1.3'
  kan-extensions: ! '>=5.2 && <5.3'
  servant-client-core: ! '>=0.15 && <0.15.1'
  monad-control: ! '>=1.0.2.3 && <1.1'
  servant: ==0.15.*
  containers: ! '>=0.5.7.1 && <0.7'
  base-compat: ! '>=0.10.5 && <0.11'
  mtl: ! '>=2.2.2 && <2.3'
  transformers-base: ! '>=0.4.5.2 && <0.5'
  transformers: ! '>=0.5.2.0 && <0.6'
  deepseq: ! '>=1.4.2.0 && <1.5'
  http-types: ! '>=0.12.2 && <0.13'
  http-media: ! '>=0.7.1.3 && <0.8'
  transformers-compat: ! '>=0.6.2 && <0.7'
all-versions:
- '0.2'
- 0.2.1
- 0.2.2
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.4
- 0.4.4.2
- 0.4.4.3
- 0.4.4.4
- 0.4.4.5
- 0.4.4.6
- 0.4.4.7
- '0.5'
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- '0.9'
- 0.9.0.1
- 0.9.1
- 0.9.1.1
- '0.10'
- '0.11'
- '0.12'
- 0.12.0.1
- '0.13'
- 0.13.0.1
- '0.14'
- '0.15'
author: Servant Contributors
latest: '0.15'
description-type: markdown
description: ! "# servant-client\n\n![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\nThis
  library lets you automatically derive Haskell functions that let you query each
  endpoint of a *servant* webservice.\n\n## Example\n\n``` haskell\n{-# LANGUAGE DataKinds
  #-}\n{-# LANGUAGE TypeOperators #-}\n\nimport Data.Proxy\nimport Data.Text\nimport
  Network.HTTP.Client (newManager, defaultManagerSettings)\nimport Servant.API\nimport
  Servant.Client\n\n\ntype Book = Text\n\ntype MyApi = \"books\" :> Get '[JSON] [Book]
  -- GET /books\n        :<|> \"books\" :> ReqBody '[JSON] Book :> Post '[JSON] Book
  -- POST /books\n\nmyApi :: Proxy MyApi\nmyApi = Proxy\n\n-- 'client' allows you
  to produce operations to query an API from a client.\npostNewBook :: Book -> ClientM
  Book\ngetAllBooks :: ClientM [Book]\n(getAllBooks :<|> postNewBook) = client myApi\n\n\nmain
  :: IO ()\nmain = do\n  manager' <- newManager defaultManagerSettings\n  res <- runClientM
  getAllBooks (mkClientEnv manager' (BaseUrl Http \"localhost\" 8081 \"\"))\n  case
  res of\n    Left err -> putStrLn $ \"Error: \" ++ show err\n    Right books -> print
  books\n```\n"
license-name: BSD-3-Clause
