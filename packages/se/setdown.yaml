homepage: http://bitbucket.org/robertmassaioli/setdown
changelog-type: ''
hash: b851398c816fe28d7f78781fb4538df08fc2495ead2962cb6b3804ef73188caf
test-bench-deps: {}
maintainer: robertmassaioli@gmail.com
synopsis: Treating files as sets to perform rapid set manipulation.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.4'
  split: ==0.2.*
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  uuid: ==1.3.*
  filepath: ! '>=1.2 && <3'
  array: ! '>=0.5'
  table-layout: ! '>=0.8'
  containers: ==0.6.*
  mtl: ==2.2.*
  cmdargs: ! '>=0.10'
  directory: ! '>=1.1 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
author: Robert Massaioli
latest: 0.1.1.0
description-type: markdown
description: "# Setdown - Line based set manipulation\n\nAuthor: [Robert Massaioli][6]
  \ \nCreated in: 2015  \n\n## Installation Steps\n\nIf you just want to install setdown
  then you just need to make sure that you have Haskell and Cabal\ninstalled and then:\n\n
  \   cabal install setdown\n\nThis works because [setdown is on hackage][7]!\n\n##
  What is setdown and how does it work?\n\nSetdown is a command line tool for line
  based set operations. To use setdown you write a \"setdown\ndefinitions file\" often
  suffixed with **.setdown**. If you are familiar with [Make][3] then you can think\nof
  this **.setdown** file much like a Makefile. Inside that file you write a number
  of\ndefinitions of the form:\n\n    definitionName: \"file-1.txt\" /\\ \"file-2.txt\"\n\nThis
  line says that \"definitionName\" is a new set definition that is a label for the
  intersection of\n\"file-1.txt\" and \"file-2.txt\". You can write more complicated
  expressions that this.\n\n### Example Setdown Projects\n\n[Checkout the setdown-examples
  project][2] on Bitbucket; it will show you how setdown works.\n\nHowever, to get
  an in-depth description of setdown and its abilities you should\nread the sections
  below.\n\n### Input Files\n\nIn setdown *each file is treated as a list of elements
  where each line\nis an element*. Input files do not need to begin as sets; they
  can contain duplicate and unsorted\nelements. Setdown will automatically sort and
  de-duplicate all input files, turning them into sets.\n\nAnother important point
  is that of relativity: specifically, if have a **.setdown** file that\nreferences
  the input file \"some-elements.txt\" and I run the setdown executable from a directory
  that\nis not the same directory as the **.setdown** file then where will setdown
  look for the\nsome-elements.txt file? The answer is that we always look for files
  relative to the **.setdown**\nfile. That is where you wrote your definitions so
  the paths are relative to that. It was designed in\nthis way so that you could run
  setdown from anywhere in the directory tree and still get the same\nresult. It was
  an important design of setdown that you always get the same result every time that
  you run it.\nSetdown has been designed to be current working directory invariant,
  as opposed to many\nother command line programs. Please keep this in mind.\n\n###
  Set Operations and Precidence\n\nIn the setdown language there are a number of supported
  operators:\n\n - Intersection: /\\\n - Union: \\/\n - Difference: -\n\nFor example,
  they might be used in the following way:\n\n    definition: (A - B) \\/ (C /\\ D)\n\nYou
  may be wondering what [operator precidence][1] the setdown language uses and the
  answer is:\nthere is no operator precidence at all, instead *you must clearly specify
  the precidence of nested\nexpressions with brackets*. This is very important because
  it will result in parsing errors\notherwise. To explain the reasoning for explicit
  operator precedence:\n\n    -- Here is a simple expression\n    def: A /\\ B \\/
  C\n    -- Now, should this be parsed as:\n    defV1: (A /\\ B) \\/ C\n    -- or
  as:\n    defV2: A /\\ (B \\/ C)\n    -- If you pretend that B is the empty set (E)
  then you can see that these expression evaluate\n    -- completely differently.
  If we simplify them with that assumption then they become:\n    defV1-bempty: E\n
  \   defV2-bempty: A /\\ C\n\nSo as you can see, order of operations really matters
  for set operations. Because it is so critical\nthe use of brackets is mandatory.\n\n###
  Comments\n\nIn the setdown language you can add comments by writing a double-dash
  (--) and then writing the\ncomment till the end of the line. The following comments
  are valid:\n\n    -- This is a definition for A, created because we wanted to do
  X\n    A: \"y.txt\" - \"z.txt\"\n\n    -- This is an example of a comment halfway
  through an expression\n    B: (A \\/ C) -- \\/ D This is still a comment and \\/
  D never happens\n\nYou can use comments to leave messages for any people that might
  read your setdown definitions in\nthe future. It may help explain to them what you
  were trying to do.\n\n### Writing your own definitions\n\nIn the setdown language
  you can write a definition in the following format:\n\n     <definitionName>: <expression>\n\nWhere
  the definition name is the identifier that you give to that expression. An expression
  is the\napplication of set operations on identifiers or files. A practical example
  of what this looks like\nshould help cement what this means. Here is a valid setdown
  file:\n\n    -- A is the intersection of the file b-1.out and the set B\n    A:
  \"b-1.out\" /\\ B\n\n    -- B is the union of the file a-1.out and a-2.out\n    B:
  \"a-1.out\" \\/ \"a-2.out\"\n\n    -- C is the difference of the file b-1.out and
  the set B\n    C: \"b-1.out\" - B\n\nUsually, when you write these definitions you
  put them in a file that has a suffix of **.setdown**.\nYou can then feed this file
  into the setdown executable like so:\n\n    setdown path/to/mydefinitions.setdown\n\nFor
  more information on the options that you can pass to the setdown executable try
  running\n\n    setdown --help\n\nAnd good luck!\n\n## Building the code\n\nTo build
  the code for this project just have [Haskell installed][4] and [cabal][5] and then:\n\n
  \   cabal new-install\n\nAnd that should have the code built on your machine. Then,
  if you modify the code, just use cabal run to run setdown:\n\n    cabal run setdown
  -- --help\n    cabal run setdown -- mydefinitions.setdown\n\nThat is all that there
  is to it!\n\n### With nix for local development\n\nIf you want to install setdown
  locally using nix for local development then do the following:\n\n    $ nix-shell\n
  \   $ cabal sandbox init\n    $ cabal install\n\nThat should install setdown in
  development mode locally.  \n\n## Contributing to the setdown project\n\nIf you
  wish to contribute to the setdown project then please just:\n\n 1. Raise an issue
  with what you intend to fix / improve.\n 1. Wait for Robert Massioli to get back
  to you and give you the thumbs up. If you get Robert\n    Massaioli's \"merge approval\"
  then that means that, if you write the code to Roberts satisfaction\n    then it
  will be merged in.\n 1. Write the code.\n 1. Raise a PR and ask Robert Massaioli
  to review it. (Maybe iterate a bit to get it cleaned up)\n 1. Get it merged in.\n
  1. Celebrate!\n\nI would love to have contributions to the project and, even though
  it may look like a complicated\nprocess just follow it because it is designed to
  make your life, and my life, easier. Cheers!\n\n [1]: http://en.wikipedia.org/wiki/Order_of_operations\n
  [2]: https://bitbucket.org/robertmassaioli/setdown-examples\n [3]: http://www.gnu.org/software/make/\n
  [4]: https://www.haskell.org/platform/\n [5]: https://www.haskell.org/cabal/\n [6]:
  https://robertmassaioli.wordpress.com/\n [7]: http://hackage.haskell.org/package/setdown\n"
license-name: BSD-3-Clause
