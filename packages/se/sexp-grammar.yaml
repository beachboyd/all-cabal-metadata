homepage: https://github.com/esmolanka/sexp-grammar
changelog-type: ''
hash: fc76d94992a297282141a925b67e682d1abdf4e151e6595b458d6b699174f4de
test-bench-deps:
  bytestring: -any
  base: -any
  text: -any
  criterion: -any
  semigroups: -any
  containers: -any
  sexp-grammar: -any
  utf8-string: -any
  invertible-grammar: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  prettyprinter: -any
  tasty: -any
  deepseq: -any
  scientific: -any
  QuickCheck: -any
maintainer: Eugene Smolanka <esmolanka@gmail.com>, Sergey Vinokurov <serg.foo@gmail.com>
synopsis: Invertible grammar combinators for S-expressions
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5.0'
  text: ! '>=1.2 && <1.3'
  semigroups: ! '>=0.16 && <0.19'
  array: ! '>=0.5 && <0.6'
  containers: ! '>=0.5.5 && <0.6'
  utf8-string: ! '>=1.0 && <2.0'
  invertible-grammar: ! '>=0.1 && <0.2'
  prettyprinter: ! '>=1 && <1.3'
  deepseq: ! '>=1.0 && <2.0'
  recursion-schemes: ! '>=5.0 && <6.0'
  scientific: ! '>=0.3.3 && <0.4'
all-versions:
- '1.1.1'
- '1.2.1'
- '1.2.2'
- '1.2.3'
- '1.3.0'
- '2.0.0'
- '2.0.1'
author: Eugene Smolanka, Sergey Vinokurov
latest: '2.0.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/esmolanka/sexp-grammar.svg?branch=master)](https://travis-ci.org/esmolanka/sexp-grammar)\n\nsexp-grammar\n============\n\nIt
  is a library of invertible parsing combinators for\nS-expressions. The combinators
  -- primitive grammars -- not only\nencode a way how to parse S-expressions into
  a Haskell value, but how\nto serialise it back into an S-expression.\n\nThe approach
  used in `sexp-grammar` is inspired by the paper\n[Invertible syntax descriptions:
  Unifying parsing and pretty printing](http://www.informatik.uni-marburg.de/~rendel/unparse/)\nand
  a similar implementation of invertible grammar approach for JSON, library by\nMartijn
  van Steenbergen called [JsonGrammar2](https://github.com/MedeaMelana/JsonGrammar2).\n\nLet's
  have a look at `sexp-grammar` at work:\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  \    #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE TypeOperators     #-}\n\nimport
  GHC.Generics\nimport Data.Text (Text)\nimport Language.SexpGrammar\nimport Language.SexpGrammar.Generic\n\ndata
  Person = Person\n  { pName    :: Text\n  , pAddress :: Text\n  , pAge     :: Maybe
  Int\n  } deriving (Show, Generic)\n\ninstance SexpIso Person where\n  sexpIso =
  with $ \\person ->  -- Person is isomorphic to:\n    list (                           --
  a list with\n      el (sym \"person\") >>>          -- a symbol \"person\",\n      el
  string         >>>          -- a string, and\n      props (                        --
  a property-list with\n        \"address\" .:  string >>>     -- a keyword :address
  and a string value, and\n        \"age\"     .:? int))  >>>     -- an optional keyword
  :age with int value.\n    person\n```\n\nWe've just defined an isomorphism between
  S-expression representation\nand Haskell data record representation of the same
  information.\n\n```haskell\nghci> :set -XTypeApplications\nghci> import Language.SexpGrammar\nghci>
  import Data.ByteString.Lazy.Char8 (pack, unpack)\nghci> person <- either error return
  . decode @Person . pack =<< getLine\n(person \"John Doe\" :address \"42 Whatever
  str.\" :age 25)\nghci> person\nPerson {pName = \"John Doe\", pAddress = \"42 Whatever
  str.\", pAge = Just 25}\nghci> putStrLn (either id unpack (encode person))\n(person
  \"John Doe\" :address \"42 Whatever str.\" :age 25)\n```\n\nSee more [examples](https://github.com/esmolanka/sexp-grammar/tree/master/examples)\nin
  the repository.\n"
license-name: BSD3
