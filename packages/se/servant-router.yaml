homepage: https://github.com/ElvishJerricco/servant-router
changelog-type: ''
hash: 62a32a04400ad5e13370ca0c14d0c066cb257364dbb6ed75fbf92ee88b122952
test-bench-deps:
  warp: -any
  base: -any
  servant-server: -any
  servant: -any
  servant-blaze: -any
  servant-router: -any
  blaze-html: -any
maintainer: willfancher38@gmail.com
synopsis: Servant router for non-server applications.
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.8 && <5'
  text: ==1.2.*
  http-api-data: ==0.2.*
  servant: ==0.7.*
  network-uri: ==2.6.*
  http-types: ==0.9.*
all-versions:
- 0.7.1
- 0.8.0
- 0.8.1
- 0.9.0
author: Will Fancher
latest: 0.9.0
description-type: markdown
description: ! "servant-router\n---\n\n`servant-router` routes a URI given a Servant
  API and an appropriate handler.\nIn web applications,\nthis is used to make single
  page applications (SPAs) with front-end routing,\nletting you share portions of
  your Servant APIs between the client and server.\n\n`servant-router` does not depend
  on `reflex` or any GHCJS packages.\nIt's intended to be a general purpose URI router
  on any platform.\nCombined with `reflex-dom`, `servant-reflex`, and `reflex-dom-contrib`,\nthis
  makes for a very satisfactory front-end Haskell experience.\n\n```haskell\n{-# LANGUAGE
  DataKinds     #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Main where\n\nimport
  \          Control.Monad.Except\nimport           Data.Proxy\nimport           Reflex.Dom\nimport
  \          Reflex.Dom.Contrib.Router\nimport           Servant.API\nimport           Servant.Router\n\ntype
  MyApi = \"books\" :> Capture \"id\" Int :> View\n        :<|> \"search\" :> QueryParam
  \"keywords\" String :> View\nmyApi :: Proxy MyApi\nmyApi = Proxy\n\nmain :: IO ()\n--
  reflex-dom-contrib provides a 'routeSite' function\n-- for routing single page applications
  with reflex.\n-- servant-router uses the provided uri String to perform the routing.\nmain
  = routeSite $ \\uri -> do\n  let handler = books :<|> search\n      books i = do\n
  \       -- Here, you would get and display a book.\n        -- Return a Reflex event
  for changing the browser location.\n        return never\n      search Nothing =
  do\n        -- Here, you would display a search bar.\n        return never\n      search
  (Just keywords) = do\n        -- Here you would display the search bar plus results.\n
  \       return never\n  -- With the handler constructed, run the router with the
  uri.\n  result <- runRoute uri myApi handler\n  case result of\n    -- If 'Left',
  there was no correct route for the uri.\n    Left _ -> do\n      el \"div\" $ text
  \"No such page\"\n      return never\n    -- If 'Right', the result of the route
  is returned.\n    Right e -> return e\n```\n\nServing\n---\n\nWhen using `servant-router`
  on the front-end in Single Page Applications (SPAs),\nyou still need to serve the
  application from the back-end.\nTo share the routing layout between the front-end
  and back-end,\nthe `View` endpoints need to be converted to a verb like `Get`.\nPlus,
  with an SPA,\nall the end-points should serve the same HTML on the back-end.\nTo
  do this, use the `ViewTransform` type family, and `constHandler` function.\n\n```haskell\ntype
  Views = \"books\" :> View\n        :<|> \"search\" :> QueryParam \"query\" String
  :> View\n\n-- Equivalent to:\n--\n--   type ViewsServer = \"books\" :> Get '[HTML]
  Blaze.Html\n--          :<|> \"search\" :> QueryParam \"query\" String :> Get '[HTML]
  Blaze.Html\ntype ViewsServer = ViewTransform Views (Get '[HTML] Blaze.Html)\n\nviewsServer
  :: Server ViewsServer\nviewsServer = constHandler\n\t    (Proxy :: Proxy Views)\n\t
  \   (Proxy :: Proxy Handler) $\n\t    docTypeHtml $ do\n\t      H.head $ return
  ()\n\t      body $\n\t        script ! src \"app.js\" $ return ()\n```\n"
license-name: BSD-3-Clause
