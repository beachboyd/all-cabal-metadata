homepage: ''
changelog-type: text
hash: f87166b4be8e2d163b7cd4b18de8afbc2185e4a0e4e47960d7d5dc90b34b5d7d
test-bench-deps: {}
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Use Pandoc to render servant API documentation
changelog: ! "## 0.5.0.0 -- 2018-01-17\n\nThis release has behavioural changes to
  match how servant-docs 0.11.1\nworks (hence the major version bump).\n\nAPI Change:\n\n*
  Add `pandocWith` that takes in a `RenderOptions`.  This allows for:\n\n    - Selecting
  whether to show all or just one mime-type for requests\n      and responses.\n\n
  \   - Optionally group all Notes under a common header.\n\nBehavioural Changes:\n\n*
  Display notes, auth\n\n* Rationalise header depths\n\n* Document the HTTP method
  the parameters of an endpoint belong to\n  (rather than assuming `GET` for all of
  them).\n\n* Handle multiple content types for request/response bodies.\n\n* Add
  a grouping header for the Headers and endpoint is sensitive to.\n\n## 0.4.1.4 --
  2017-07-25\n\nSupports servant-docs 0.11.  Changed behaviour means that this release\ncan
  no longer support older versions.\n\n## 0.4.1.3 -- 2017-07-25\n\nUpdated dependencies
  for http-media, pandoc-types and servant-docs.\n\nNew maintainer: Ivan Miljenovic\n\n##
  0.4.1.2 -- 2015-11-18\n\nExplicit import list for lens to hopefully avoid dependency
  problems.\n\n## 0.4.1.1 -- 201-07-26\n\nModify version bounds\n\n## 0.4.1 -- 2015-06-26\n\nPut
  end points in canonical order.\n\n## 0.4.0 -- 2015-05-23\n\nUpdate for servant 0.4\n\n##
  0.1.0.2 -- 2015-01-04\n\nFix breaking interface change from servant-docs 0.3\n\n##
  0.1.0.1 -- 2015-01-04\n\nFix trailing \",\" when rendering list of values\n\n##
  0.1 -- 2015-01-04\n\nInitial release\n"
basic-deps:
  servant-docs: ! '>=0.11.1 && <0.12'
  bytestring: ! '>=0.10 && <0.11'
  case-insensitive: ! '>=0.2 && <1.3'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2 && <1.3'
  pandoc-types: ! '>=1.12 && <1.18'
  lens: ! '>=4.9 && <5'
  string-conversions: ! '>=0.1 && <0.5'
  http-media: ! '>=0.6 && <0.8'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.4.0'
- '0.4.1'
- '0.4.1.1'
- '0.4.1.2'
- '0.4.1.3'
- '0.4.1.4'
- '0.5.0.0'
author: Matthew Pickering, Ivan Miljenovic
latest: '0.5.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/servant-pandoc.svg)](https://hackage.haskell.org/package/servant-pandoc)
  [![Build Status](https://travis-ci.org/mpickering/servant-pandoc.svg)](https://travis-ci.org/mpickering/servant-pandoc)\n\nAn
  extension to [servant-docs] that allows you to use [Pandoc] to\nrender your Servant
  API documentation.\n\n[servant-docs]: http://hackage.haskell.org/package/servant-docs\n[Pandoc]:
  http://pandoc.org/\n\nHow to use this package\n=======================\n\nGenerate
  documentation directly\n-------------------------------\n\nA very simple program
  to render the API documentation as a mediawiki\ndocument might look as follows.\n\n```haskell\nimport
  Text.Pandoc\nimport Servant.Docs.Pandoc\nimport Servant.Docs\nimport Data.Default
  (def)\n\nmyApi :: Proxy MyAPI myApi = Proxy\n\nwriteDocs :: API -> IO ()\nwriteDocs
  api = writeFile \"api.mw\" (writeMediaWiki def (pandoc api))\n```\n\nCreate a Pandoc
  filter\n----------------------\n\nThe `makeFilter` function allows you to make a
  filter which can be\nused directly with pandoc from the command line. This filter
  will just\nappend the API documentation to the end of the document. Example\nusage:\n\n```haskell\n--
  api.hs\nmain :: IO ()\nmain = makeFilter (docs myApi)\n```\n\nThen to run this:\n\n```sh\npandoc
  -o api.pdf --filter=api.hs manual.md\n```\n\n### Custom filters\n\nA more sophisticated
  filter might be to actually convert introduction\nand note bodies to Markdown before
  processing (note: this is not\nenabled by default as the `pandoc` library is GPL-licensed,
  whereas\nthis library uses `pandoc-types` which is BSD3-licensed):\n\n```haskell\nimport
  Data.Monoid         (mconcat, (<>))\nimport Servant.Docs.Pandoc (pandoc)\nimport
  Text.Pandoc         (readMarkdown)\nimport Text.Pandoc.JSON    (Block(Para, Plain),
  Inline(Str), Pandoc(Pandoc),\n                            toJSONFilter)\nimport
  Text.Pandoc.Options (def)\nimport Text.Pandoc.Walk    (walkM)\n\nmain :: IO ()\nmain
  = toJSONFilter append\n  where\n    append :: Pandoc -> Pandoc\n    append = (<>
  mconcat (walkM parseMarkdown (pandoc myApi)))\n\nparseMarkdown :: Block -> [Block]\nparseMarkdown
  bl = case bl of\n                     Para  [Str str] -> toMarkdown str\n                     Plain
  [Str str] -> toMarkdown str\n                     _               -> [bl]\n  where\n
  \   toMarkdown = either (const [bl]) unPandoc . readMarkdown def\n\n    unPandoc
  (Pandoc _ bls) = bls\n```\n"
license-name: MIT
