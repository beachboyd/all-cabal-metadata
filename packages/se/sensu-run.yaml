homepage: https://github.com/maoe/sensu-run#readme
changelog-type: markdown
hash: 7316afef8db7b117ace4079498f5f1350016bed36c8a7f808a8c6ff84befbe9e
test-bench-deps: {}
maintainer: me@maoe.name
synopsis: A tool to send command execution results to Sensu
changelog: |
  # Revision history for sensu-run

  ## 0.7.0.5 -- 2020-02-10

  * Relax upper version bound for lens

  ## 0.7.0.4 -- 2019-01-07

  * Relax upper version bounds for base and lens

  ## 0.7.0.3 -- 2019-08-20

  * Relax upper version bound for optparse-applicative

  ## 0.7.0.2 -- 2019-06-18

  * Fix redundant newline at the beginning of the cabal file

  ## 0.7.0.1 -- 2019-06-18

  * Minor fix to .travis.yml. No changes in Haskell code.

  ## 0.7.0 -- 2019-06-17

  * Handle signals and resend them to the monitored process (#27)

  ## 0.6.1.1 -- 2019-05-28

  * Relax upper version bounds for http-client and network
  * Specify cabal-version: 2.2
  * Update .travis.yml with newer GHCs

  ## 0.6.1 -- 2018-12-13

  * Fix the broken --timeout option
  * Add support for GHC 8.6

  ## 0.6.0.3 -- 2018-11-06

  * Relax upper version bound for base

  ## 0.6.0.2 -- 2018-09-12

  * Add source-repository stanza in the cabal file

  ## 0.6.0.1 -- 2018-09-11

  * Relax upper version bound for network

  ## 0.6.0 -- 2018-07-09

  * Lock a file to prevent multiple instances of the same name from running
      * Use --no-lock option to disable this behavior

  ## 0.5.0.3 -- 2018-07-07

  * Relax upper version bound for lens
  * Update Stackage LTS to 11.16

  ## 0.5.0.2 -- 2018-06-11

  * Relax upper version bound for aeson

  ## 0.5.0.1 -- 2018-04-30

  * Relax upper version bound for network and fix a warning

  ## 0.5.0 -- 2018-04-20

  * Add support for HTTPS (#18)
  * Do not append new line to the output when the command was successful
  * Add --redirect option (#12)
  * Relax upper version bound for temporary
  * Tighten upper version bound for unix

  ## 0.4.0.5 -- 2018-04-09

  * Relax upper version bounds for base and aeson

  ## 0.4.0.4 -- 2018-01-30

  * Relax upper version bounds for http-types, lens and time

  ## 0.4.0.3 -- 2017-11-07

  * Relax upper version bound for http-types

  ## 0.4.0.2 -- 2017-11-07

  * Relax upper version bound for unix-compat

  ## 0.4.0.1 -- 2017-10-26

  * Relax upper version bound for http-types

  ## 0.4.0 -- 2017-08-03

  * Include command output in response even on timeout/failure (#14)

  ## 0.3.0 -- 2017-07-25

  * Add user field to result JSON (#7)
  * Handle missing executable properly (#10)

  ## 0.2.0 -- 2017-07-12

  * Relax upper version bound for base
  * Kill child process(es) when timeout occurs

  ## 0.1.1.3 -- 2017-06-11

  * Relax upper version bound for optparse-applicative
  * Binary releases

  ## 0.1.1 -- 2017-06-09

  * Add --version option

  ## 0.1.0 -- 2017-06-07

  * Fix a bug that ignores --handle option by accident
  * Small documentation fixes
  * Enable AppVeyor builds

  ## 0.0.0  -- 2017-05-16

  * Initial release
basic-deps:
  http-client: ! '>=0.5.6 && <0.7'
  bytestring: ! '>=0.10 && <0.11'
  unix: <2.8
  base: ! '>=4.11 && <4.14'
  time: ! '>=1.5.0.1 && <1.10'
  text: ! '>=1.2.2 && <1.3'
  unix-compat: <0.6
  filepath: ! '>=1.4.1 && <1.5'
  process: ! '>=1.6.3.0 && <1.7'
  network: ! '>=2.2.3 && <3.2'
  async: <2.3
  wreq: ! '>=0.5.0 && <0.6'
  lens: ! '>=4.15 && <4.20'
  http-client-tls: <0.4
  filelock: <0.2
  temporary: ! '>=1.1 && <1.4'
  optparse-applicative: ! '>=0.12 && <0.16'
  http-types: ! '>=0.9.1 && <0.13'
  aeson: ! '>=0.11 && <1.5'
  vector: ! '>=0.11 && <0.13'
  directory: <1.4
all-versions:
- 0.0.0
- 0.1.0
- 0.1.1
- 0.1.1.3
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.4.0.5
- 0.5.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.6.0
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
- 0.6.1
- 0.6.1.1
- 0.7.0
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
author: Mitsutoshi Aoe
latest: 0.7.0.5
description-type: markdown
description: |
  # sensu-run
  [![Hackage](https://img.shields.io/hackage/v/sensu-run.svg)](http://hackage.haskell.org/package/sensu-run)
  [![Hackage-Deps](https://img.shields.io/hackage-deps/v/sensu-run.svg)](http://packdeps.haskellers.com/feed?needle=sensu-run)
  [![Build Status](https://travis-ci.org/maoe/sensu-run.svg?branch=master)](https://travis-ci.org/maoe/sensu-run)
  [![Build status](https://ci.appveyor.com/api/projects/status/k9594kkn4tncotqt/branch/master?svg=true)](https://ci.appveyor.com/project/maoe/sensu-run/branch/master)

  `sensu-run` runs a command and send its result to Sensu server using the [client socket input](https://sensuapp.org/docs/latest/reference/clients.html#client-socket-input) or via the Sensu API. It is useful to monitor cron jobs for example.

  ## Installation

  NOTE: Currently sensu-run doesn't work on Windows. See [#16](https://github.com/maoe/sensu-run/issues/16).

  Binary releases are available at [GitHub Releases](https://github.com/maoe/sensu-run/releases). Currently supported platforms for the binary releases are:

  * Ubuntu (64bit)
  * macOS
  * Windows (x64, x86)

  You can also build it yourself using [stack](https://docs.haskellstack.org/en/stable/README/):
  ```sh
  stack install sensu-run
  ```
  will install the `sensu-run` command in `~/.local/bin`.

  ## Usage

  ```console
  % sensu-run --help
  Usage: sensu-run ([-n|--name NAME] [--source SOURCE] [--ttl SECONDS]
                   [--timeout SECONDS] [--handler HANDLER] ([--port PORT] |
                   [--server URL]) [--redirect] [--no-lock] [--dry|--dry-run]
                   [-s|--shell] [COMMAND] | [-v|--version])

  Available options:
    -h,--help                Show this help text
    -n,--name NAME           The name of the check
    --source SOURCE          The check source, used to create a JIT Sensu client
                             for an external resource
    --ttl SECONDS            The time to live in seconds until check results are
                             considered stale
    --timeout SECONDS        The check executaion duration timeout in seconds
    --handler HANDLER        Sensu event handler(s) to use for events created by
                             the check
    --port PORT              Send results to the local sensu-client listening on
                             the specified port (default: 3030)
    --server URL             Send results to the specified Sensu server
    --redirect               Redirect command output to sensu-run's output
    --no-lock                Do not create a lock file to allow multiple instances
                             to run
    --dry,--dry-run          Dump the JSON object which is supposed to be sent
    -s,--shell               Execute the command using the shell
  ```

  `--dry-run` option is useful to check the JSON output:

  ```console
  % sensu-run --name check-home-src-size --handler foo --dry-run -- du -s $HOME/src | jq .
  {
    "name": "check-home-src-size",
    "command": "du -s /home/maoe/src",
    "issued": 1501041549,
    "executed": 1501041549,
    "duration": 1.674895,
    "status": 0,
    "output": "55513524\t/home/maoe/src\n",
    "handlers": [
      "foo"
    ],
    "user": "maoe"
  }
  ```

  Use the `--shell` option if you want to use shell functions:
  ```console
  % sensu-run --name check-home-src-size --handler foo --dry-run --shell -- "cd $HOME/src; du -s ." | jq .
  {
    "name": "check-home-src-size",
    "command": "cd /home/maoe/src; du -s .",
    "issued": 1501041568,
    "executed": 1501041568,
    "duration": 1.224157,
    "status": 0,
    "output": "55513524\t.\n",
    "handlers": [
      "foo"
    ],
    "user": "maoe"
  }
  ```

  Without the `--dry-run` option, `sensu-run` sends the output to localhost:PORT, which is expected to be listened by `sensu-client`.

  `sensu-run` sets the status field depending on the command exit code and timeout:

  | command exit code | `status` field |
  |-------------------|----------------|
  | 0                 | 0 (OK)         |
  | non-zero          | 2 (CRITICAL)   |
  | command timed out | 3 (UNKNOWN)    |

  ### Sensu API

  `sensu-run` supports posting check results via Sensu API as well. Use `--server` option to specify Sensu server addresses. If multiple servers are specified, `sensu-run` tries them one by one until it succeeds.

  ```sh
  sensu-run --name check-true --handler foo --server sensu1.example.com --server sensu2.example.com --dry-run -- du -s $HOME/src
  ```

  ## Handling signals on UNIX systems

  `sensu-run` traps the following signals and resends them to the monitored process:

  * SIGHUP
  * SIGINT
  * SIGQUIT
  * SIGTERM
license-name: BSD-3-Clause
