homepage: http://github.com/ppetr/semigroups-actions/
changelog-type: ''
hash: 6941ccc93374d3bdafb927f1af6bbbbd91d666a608cecc1948e1455c85cabd0e
test-bench-deps: {}
maintainer: Petr Pudlák <petr.mvd@gmail.com>
synopsis: Semigroups actions
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  semigroups: ! '>=0.8 && <0.9'
  containers: ! '>=0.3 && <0.6'
all-versions:
- '0.1'
author: Petr Pudlák
latest: '0.1'
description-type: markdown
description: ! "# semigroups-actions\n\nIn mathematics, an action of a semigroup on
  a set is an operation that\nassociates each element of the semigroup is with a transformation
  on the set.\nSee Wikipedia articles on\n[semigroup action](http://en.wikipedia.org/wiki/Semigroup_action)
  and\n[group action](http://en.wikipedia.org/wiki/Group_action).\n\nThis package
  complements and depends on [semigroups](http://hackage.haskell.org/package/semigroups).\n\nIt
  requires `MultiParamTypeClasses` extension.\n\n## Examples\n\nSimilarly to semigroups,
  semigroup (or monoid) actions arise almost everywhere (if you look for them).\n\n###
  Natural numbers acting on monoids\n\nThe multiplication monoid of natural numbers
  acts on any other monoid:\n\n```haskell\nn `act` x = x <> ... <> x -- x appears
  n-times\n```\n\nSo ``0 `act` x == mempty``, ``3 `act` x == x <> x <> x`` etc. TODO
  efficiency\n\nThis is expressed by `newtype Repeat` and instance\n\n```haskell\ninstance
  (Monoid w, Whole n) => SemigroupAct (Product n) (Repeat w) where\n```\n\nMany different
  concepts can be expressed using such an action, including\n\n- repeating a list
  `n`-times (`replicate`),\n- compose a function `f` `n`-times, commonly denoted as
  _fⁿ_ in mathematics:\n\n    ```haskell\n    (Repeat (Endo fⁿ)) = (Product n) `act`
  (Repeat (Endo f))\n    ```\n\n## Self-application\n\nAny semigroup (or monoid) can
  be viewed as acting on itself. In this case, `act` simply becomes `<>`. This is
  expressed by the `SelfAct` type:\n\n```haskell\nnewtype SelfAct a = SelfAct a\ninstance
  Semigroup g => Semigroup (SelfAct g) where\n    (SelfAct x) <> (SelfAct y) = SelfAct
  $ x <> y\n```\n\n## Matrices acting on vectors\n\nMatrices with multiplication can
  be viewed as a group acting on vectors.\n\n# Copyright\n\nCopyright 2012, Petr Pudlák\n\nContact:
  [petr.pudlak.name](http://petr.pudlak.name/) or through github.\n\nLicense: BSD3\n"
license-name: BSD-3-Clause
