homepage: https://github.com/erewok/servant-py#readme
changelog-type: ''
hash: baf8504124919613546c58c6d23c5f82c4726853f7a122e4abebac88dd29d0bb
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  servant-py: -any
  servant: -any
  lens: -any
  base-compat: -any
  servant-foreign: -any
  QuickCheck: -any
  aeson: -any
maintainer: eraker@gmail.com
synopsis: Automatically derive python functions to query servant webservices.
changelog: ''
basic-deps:
  warp: -any
  bytestring: ! '>=0.10.8.1 && <0.11'
  wai: -any
  stm: -any
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.3.0 && <1.3'
  servant-py: -any
  filepath: -any
  servant-server: -any
  servant: ! '>=0.11 && <0.16'
  servant-blaze: -any
  lens: ! '>=4.16.1 && <5'
  charset: ! '>=0.3.7.1 && <0.4'
  servant-foreign: ! '>=0.11 && <0.16'
  blaze-html: -any
  aeson: ! '>=1.3.1.1 && <1.4'
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
author: Erik Aker
latest: 0.1.1.0
description-type: markdown
description: ! "# servant-py\n\nThis library lets you derive automatically Python
  functions that let you query each endpoint of a *servant* webservice.\n\nCurrently,
  the only supported method for generating requests is via the `requests` library,
  which is the recommended way to generate HTTP requests in the Python world (even
  among Python core devs).\n\n## Inspiration\n\nThis library is largely inspired by
  [servant-js](https://github.com/haskell-servant/servant-js) and by the fantastic
  work of the Servant team in general. Any good ideas you find in here are from their
  work (any mistakes are almost entirely mine, however).\n\n## Example\n\nThere are
  two different styles of function-return supported here: `DangerMode` and `RawResponse`.\n\nThe
  latter returns the raw response from issuing the request and the former calls `raise_for_status`
  and then attempts to return `resp.json()`. You can switch which style you'd like
  to use by creating a proper `CommonGeneratorOptions` object.\n\nThe default options
  just chucks it all to the wind and goes for `DangerMode` (because, seriously, we're
  using Haskell to generate Python here...).\n\nFollowing is an example of using the
  Servant DSL to describe endpoints and then using `servant-py` to create Python clients
  for those endpoints.\n\n#### Servant DSL API Description\n\n``` haskell\n{-# LANGUAGE
  DataKinds                  #-}\n{-# LANGUAGE DeriveGeneric              #-}\n{-#
  LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE TypeOperators              #-}\n\nmodule
  Main where\n\nimport           Data.Aeson\nimport qualified Data.ByteString.Char8
  as B\nimport           Data.Proxy\nimport qualified Data.Text             as T\nimport
  \          GHC.Generics\nimport           Servant\nimport           System.FilePath\n\nimport
  \          Servant.PY\n\n-- * A simple Counter data type\nnewtype Counter = Counter
  { value :: Int }\n  deriving (Generic, Show, Num)\ninstance ToJSON Counter\n\ndata
  LoginForm = LoginForm\n { username :: !T.Text\n , password :: !T.Text\n , otherMissing
  :: Maybe T.Text\n } deriving (Eq, Show, Generic)\ninstance ToJSON LoginForm\n\n--
  * Our API type\ntype TestApi = \"counter-req-header\" :> Post '[JSON] Counter\n
  \         :<|> \"counter-queryparam\"\n            :> QueryParam \"sortby\" T.Text\n
  \           :> Header \"Some-Header\" T.Text :> Get '[JSON] Counter\n          :<|>
  \"login-queryflag\" :> QueryFlag \"published\" :> Get '[JSON] LoginForm\n          :<|>
  \"login-params-authors-with-reqBody\"\n            :> QueryParams \"authors\" T.Text\n
  \           :> ReqBody '[JSON] LoginForm :> Post '[JSON] LoginForm\n          :<|>
  \"login-with-path-var-and-header\"\n            :> Capture \"id\" Int\n            :>
  Capture \"Name\" T.Text\n            :> Capture \"hungrig\" Bool\n            :>
  ReqBody '[JSON] LoginForm\n            :> Post '[JSON] (Headers '[Header \"test-head\"
  B.ByteString] LoginForm)\n\ntestApi :: Proxy TestApi\ntestApi = Proxy\n\n-- where
  our static files reside\nresult :: FilePath\nresult = \"examples\"\n\nmain :: IO
  ()\nmain = writePythonForAPI testApi requests (result </> \"api.py\")\n```\n\n####
  Generated Python Code\n\nIf you build the above and run it, you will get some output
  that looks like the following:\n\n```python\nfrom urllib import parse\n\nimport
  requests\n\ndef post_counterreqheader():\n    \"\"\"\n    POST \"counter-req-header\"\n\n
  \   \"\"\"\n    url = \"http://localhost:8000/counter-req-header\"\n\n    resp =
  requests.post(url)\n    resp.raise_for_status()\n    return resp.json()\n\n\ndef
  get_counterqueryparam(sortby, headerSomeHeader):\n    \"\"\"\n    GET \"counter-queryparam\"\n\n
  \   \"\"\"\n    url = \"http://localhost:8000/counter-queryparam\"\n\n    headers
  = {\"Some-Header\": headerSomeHeader}\n    params = {\"sortby\": sortby}\n    resp
  = requests.get(url,\n                        headers=headers,\n                        params=params)\n\n
  \   resp.raise_for_status()\n    return resp.json()\n\n\ndef get_loginqueryflag(published):\n
  \   \"\"\"\n    GET \"login-queryflag\"\n\n    \"\"\"\n    url = \"http://localhost:8000/login-queryflag\"\n\n
  \   params = {\"published\": published}\n    resp = requests.get(url,\n                        params=params)\n\n
  \   resp.raise_for_status()\n    return resp.json()\n\n\ndef post_loginparamsauthorswithreqBody(authors,
  data):\n    \"\"\"\n    POST \"login-params-authors-with-reqBody\"\n\n    \"\"\"\n
  \   url = \"http://localhost:8000/login-params-authors-with-reqBody\"\n\n    params
  = {\"authors\": authors}\n    resp = requests.post(url,\n                         params=params,\n
  \                        json=data)\n\n    resp.raise_for_status()\n    return resp.json()\n\n\ndef
  post_loginwithpathvarandheader_by_id_by_Name_by_hungrig(id, Name, hungrig, data):\n
  \   \"\"\"\n    POST \"login-with-path-var-and-header/{id}/{Name}/{hungrig}\"\n
  \   Args:\n        id\n        Name\n        hungrig\n    \"\"\"\n    url = \"http://localhost:8000/login-with-path-var-and-header/{id}/{Name}/{hungrig}\".format(\n
  \       id=parse.quote(id),\n        Name=parse.quote(Name),\n        hungrig=parse.quote(hungrig))\n\n
  \   resp = requests.post(url,\n                         json=data)\n\n    resp.raise_for_status()\n
  \   return resp.json()\n```\n\nIf you would like to compile and run this example
  yourself, you can do that like so:\n\n```\n$ stack build --flag servant-py:example\n$
  stack exec servant-py-exe\n$ cat examples/api.py\n```\n"
license-name: BSD-3-Clause
