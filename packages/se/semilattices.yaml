homepage: https://github.com/robrix/semilattices
changelog-type: markdown
hash: 215d40aa231ed1786211809a5f4b7768a708a8ac1625507b9d5ddb4929323a8e
test-bench-deps:
  base: -any
  doctest: ! '>=0.7 && <1.0'
  quickcheck-instances: ==0.3.*
  QuickCheck: ! '>=2.7 && <2.12'
maintainer: rob.rix@me.com
synopsis: Semilattices
changelog: ! '# 0.0.0.3


  Support GHC 8.6 and its newer `containers` and `base`.


  # 0.0.0.2


  Add a `Lower` instance for `Data.Sequence.Seq`.


  # 0.0.0.1


  Add `Lower` instances for some `Data.Monoid` types.



  # 0.0.0.0


  Initial release on hackage.

'
basic-deps:
  base: ! '>=4.9 && <4.13'
  unordered-containers: ! '>=0.2 && <0.3'
  containers: ! '>=0.5 && <0.7'
  hashable: ! '>=1.2 && <1.3'
all-versions:
- '0.0.0.0'
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
author: Rob Rix
latest: '0.0.0.3'
description-type: markdown
description: ! '[![Build Status](https://travis-ci.com/robrix/semilattices.svg?branch=master)](https://travis-ci.com/robrix/semilattices)


  # `semilattices`


  This Haskell package defines typeclasses for join- and meet-semilattices, and for
  upper and lower bounds, and a variety of instances for each.



  ## Usage


  Semilattices are idempotent commutative semigroups, and come in two flavours: `Join`
  and `Meet`. This presentation of them doesn’t inherit from `Semigroup` however,
  since `Semigroup`s already exist and the relationships between the various classes
  here warrant their own operators.


  Join semilattices can be combined using the `\/` operator (pronounced “lub,” for
  “least upper bound”). Meet semilattices can be combined with the `/\` operator (pronounced
  “glb,” for “greatest lower bound”). They have opposite relationships to `Lower`
  and `Upper` bounds (which are optional; in general, there are more lower bounds
  than upper ones).



  ## Related work


  - [`lattices`](http://hackage.haskell.org/package/lattices) also offers join & meet
  semilattices, & their respective bounds. Relative to `lattices`, `semilattices`
  primarily offers a different class hierarchy, e.g. `Lower` & `Upper` do not have
  `Join` & `Meet` as superclasses. Relative to `semilattices`, `lattices` offers classes
  for lattices (both bounded and un-), partial orderings, a variety of operations
  for instances.

'
license-name: BSD3
