homepage: http://github.com/mattjbray/servant-elm#readme
changelog-type: markdown
hash: 5195750459208b828ff19ffa9413b765743b0037763f75780390c1c3f5542310
test-bench-deps:
  base: -any
  Diff: -any
  hspec: -any
  text: -any
  servant-elm: -any
  process: -any
  HUnit: -any
  servant: -any
  mockery: -any
  interpolate: -any
  elm-export: ! '>=0.5'
  aeson: ! '>=0.9'
  directory: -any
maintainer: mattjbray@gmail.com
synopsis: Automatically derive Elm functions to query servant webservices.
changelog: ! "0.5.0.0\n-------\n* Fix generation for APIs with response headers.\n*
  Support Servant's `Optional` and `Required` modifiers for\n  `Header`s and `QueryParam`s
  (`Header` arguments are now `Maybe`s\n  by default). (phaazon) (#31)\n* Filter out
  forbidden Cookie header. (xilnocas) (#37)\n\n0.4.0.1\n-------\n* Remove hyphens
  from generated function names. (servant-foreign-0.10 no longer\n  does this for
  us.)\n\n0.4.0.0\n-------\n* Allow passing the base URL dynamically in Elm. (#20)\n*
  Don't use `toString` on `Text` parameters. (domenkozar) (#23, #24)\n* Fix query
  parameter generation. (domenkozar) (#25)\n\n0.3.0.1\n-------\n* Prefix generated
  function arguments to ensure valid Elm identifiers (#21)\n* Put integration tests
  behind a Cabal flag. (#22)\n\n0.3.0.0\n-------\n* Update for Elm 0.18 and the new
  elm-lang/http library.\n* Generated Elm functions now return an `Http.Request` value.\n\n0.2.0.0\n-------\n*
  Use Text throughout the API.\n* We no longer auto-generate Elm sources for the types,
  encoders and decoders\n  used in your API - you must now use `elm-export`'s `toElmTypeSource`
  functions\n  explicitly. See the tests and examples for usage.\n* Allow setting
  options to pass to `elm-export`.\n* Update to `servant-0.8` (purcell).\n* Basic
  support for custom headers.\n* Fix: `String` query params were being wrapped in
  double-quotes.\n* Test: verify that the generated code can be compiled by Elm (soenkehahn)\n\n0.1.0.2\n-------\n*
  Fix for API endpoints that return Unit (kantp)\n\n0.1.0.1\n-------\n* Convenience
  re-exports from Elm and Data.Proxy.\n* Add Haddoc documentation.\n\n0.1\n---\n*
  Initial release.\n"
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  servant-elm: -any
  servant: ! '>=0.8'
  lens: -any
  wl-pprint-text: -any
  servant-foreign: ! '>=0.8'
  elm-export: ! '>=0.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
author: Matt Bray
latest: '0.5.0.0'
description-type: markdown
description: ! "# Servant Elm\n\n[![Build Status](https://travis-ci.org/mattjbray/servant-elm.svg?branch=master)](https://travis-ci.org/mattjbray/servant-elm)\n\nGenerate
  Elm functions to query your Servant API!\n\nElm type generation coutesy of [krisajenkins/elm-export](https://github.com/krisajenkins/elm-export).\n\n##
  Installation\n\nServant Elm is [available on Hackage](http://hackage.haskell.org/package/servant-elm).\n\n##
  Example\n\nFirst, some language pragmas and imports.\n\n```haskell\n{-# LANGUAGE
  DataKinds         #-}\n{-# LANGUAGE DeriveGeneric     #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE TypeOperators     #-}\n\nimport           Elm          (Spec (Spec),
  specsToDir, toElmDecoderSource,\n                               toElmTypeSource)\nimport
  \          GHC.Generics (Generic)\nimport           Servant.API  ((:>), Capture,
  Get, JSON)\nimport           Servant.Elm  (ElmType, Proxy (Proxy), defElmImports,\n
  \                              generateElmForAPI)\n```\n\nWe have some Haskell-defined
  types and our Servant API.\n\n```haskell\ndata Book = Book\n    { name :: String\n
  \   } deriving (Generic)\n\ninstance ElmType Book\n\ntype BooksApi = \"books\" :>
  Capture \"bookId\" Int :> Get '[JSON] Book\n```\n\nNow we can generate Elm functions
  to query the API:\n\n```haskell\nspec :: Spec\nspec = Spec [\"Generated\", \"MyApi\"]\n
  \           (defElmImports\n             : toElmTypeSource    (Proxy :: Proxy Book)\n
  \            : toElmDecoderSource (Proxy :: Proxy Book)\n             : generateElmForAPI
  \ (Proxy :: Proxy BooksApi))\n\nmain :: IO ()\nmain = specsToDir [spec] \"my-elm-dir\"\n```\n\nLet's
  save this as `example.hs` and run it:\n\n```\n$ stack runghc example.hs\nWriting:
  my-elm-dir/Generated/MyApi.elm\n$\n```\n\nHere's what was generated:\n\n```elm\nmodule
  Generated.MyApi exposing (..)\n\nimport Json.Decode exposing (..)\nimport Json.Decode.Pipeline
  exposing (..)\nimport Json.Encode\nimport Http\nimport String\n\n\ntype alias Book
  =\n    { name : String\n    }\n\ndecodeBook : Decoder Book\ndecodeBook =\n    decode
  Book\n        |> required \"name\" string\n\ngetBooksByBookId : Int -> Http.Request
  (Book)\ngetBooksByBookId capture_bookId =\n    Http.request\n        { method =\n
  \           \"GET\"\n        , headers =\n            []\n        , url =\n            String.join
  \"/\"\n                [ \"\"\n                , \"books\"\n                , capture_bookId
  |> toString |> Http.encodeUri\n                ]\n        , body =\n            Http.emptyBody\n
  \       , expect =\n            Http.expectJson decodeBook\n        , timeout =\n
  \           Nothing\n        , withCredentials =\n            False\n        }\n```\n\nSee
  [`examples`](examples) for a complete usage example, or take a look at\n[mattjbray/servant-elm-example-app](https://github.com/mattjbray/servant-elm-example-app)\nfor
  an example project using this library.\n\n## Development\n\n```\n$ git clone https://github.com/mattjbray/servant-elm.git\n$
  cd servant-elm\n$ stack test\n$ stack test --flag servant-elm:integration\n```\n\nTo
  build all examples:\n\n```\n$ make examples\n```\n\nTo run an example:\n\n```\n$
  cd examples/e2e-tests\n$ elm-reactor\n# Open http://localhost:8000/elm/Main.elm\n```\n"
license-name: BSD3
