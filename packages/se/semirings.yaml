homepage: http://github.com/chessai/semirings
changelog-type: markdown
hash: 1e237657ba6ebfde98b5b9f6e3e4c14c3442f61c11ba66272ef40f1ab4b58d6e
test-bench-deps: {}
maintainer: chessai <chessai1996@gmail.com>
synopsis: two monoids as one, in holy haskimony
changelog: ! "0.2.0.1: [2018.07.28]\n---------------------\n* Add instances for `Op`,
  `Equivalence`, `Comparison`, and `Predicate` from Data.Functor.Contravariant (upcoming
  base 4.12.0.0)\n* docfix for (prod -> product, prod' -> product')\n\n0.2.0.0: [2018.07.23]\n---------------------\n*
  Fixed the `Semiring` instances of `Set`, `HashSet`, `Vector`, `Storable Vector`,
  `Unboxed Vector`.\n* Removed the `Semiring` instances of `Seq`, `Alt`, `Endo`.\n*
  Added comprehensive test suite that tests all `Semiring` instances defined in Data.Semiring\n*
  Added Free semiring (Data.Semiring.Free)\n* Added newtypes: `Add`, `Mul`\n* Bounds
  for containers: [0.3,0.6] -> [0.5.4,0.6.0.9]\n* Add semiring instance for `Proxy`\n*
  names changed: (prod -> product, prod' -> product')\n* sum' and product' now use
  foldl' instead of foldr'\n\n0.1.2: [2018.05.04]\n-------------------\n* `semirings`
  now builds back to\n  GHC-7.4.1.\n* many doc fixes.\n\n0.1.1: [2018.04.20]\n-------------------\n*
  Remove unused `coerce-util` dependency.\n\n0.1.0:\n------\n* Initial version.\n"
basic-deps:
  base: ! '>=4.5 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  integer-gmp: -any
  containers: ! '>=0.5.4 && <0.6.1.0'
  hashable: ! '>=1.1 && <1.3'
  vector: ! '>=0.7 && <0.13.0.0'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3.0'
- '0.2.0.0'
- '0.2.0.1'
author: chessai
latest: '0.2.0.1'
description-type: markdown
description: ! "semirings\n==========\n\nHaskellers are usually familiar with monoids
  and semigroups. A monoid has an appending operation `<>` or `mappend` and an identity
  element `mempty`. A semigroup has an append `<>`, but does not require an `mempty`
  element.\n\nA Semiring has two appending operations, 'plus' and 'times', and two
  respective identity elements, 'zero' and 'one'.\n\nMore formally, A semiring R is
  a set equipped with two binary relations + and *, such that:\n\n- (R, +) is a commutative
  monoid with identity element 0:\n  - (a + b) + c = a + (b + c)\n  - 0 + a = a +
  0 = a\n  - a + b = b + a\n- (R, *) is a monoid with identity element 1:\n  - (a
  * b) * c = a * (b * c)\n  - 1 * a = a * 1 = a\n- Multiplication left and right distributes
  over addition\n  - a * (b + c) = (a * b) + (a * c)\n  - (a + b) * c = (a * c) +
  (b * c)\n- Multiplication by '0' annihilates R:\n  - 0 * a = a * 0 = 0\n\n*-semirings\n===========\n\nA
  *-semiring (pron. \"star-semiring\") is any semiring with an additional operation
  'star' (read as \"asteration\"), such that:\n\n- star a = 1 + a * star a = 1 + star
  a * a\n\nA derived operation called \"aplus\" can be defined in terms of star by:\n\n-
  star :: a -> a\n- star a = 1 + aplus a\n- aplus :: a -> a\n- aplus a = a * star
  a\n\nAs such, a minimal instance of the typeclass 'Star' requires only 'star' or
  'aplus' to be defined.\n\nuse cases\n=========\n\nsemirings themselves are useful
  as a way to express that a type is both a commutative and associative monoid.\n\n*-semirings
  are useful in a number of applications; such as matrix algebra, regular expressions,
  kleene algebras, graph theory, tropical algebra, dataflow analysis, power series,
  linear recurrence relations.\n\nSome relevant (informal) reading material:\n\nhttp://stedolan.net/research/semirings.pdf\n\nhttp://r6.ca/blog/20110808T035622Z.html\n\nhttps://byorgey.wordpress.com/2016/04/05/the-network-reliability-problem-and-star-semirings/\n\nadditional
  credit\n======\n\nSome of the code in this library was lifted directly from the
  Haskell library 'semiring-num'.\n"
license-name: BSD3
