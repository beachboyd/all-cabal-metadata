homepage: https://github.com/scvalex/sexp
changelog-type: ''
hash: 0fef328a621ec00ea27bb94e39675c85c607061b667f560577fb47e4cff9229e
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: ! '>=4.4 && <5'
  test-framework-quickcheck2: -any
  HUnit: -any
  containers: -any
  QuickCheck: -any
  sexp: -any
maintainer: scvalex@gmail.com
synopsis: S-Expression parsing/printing made fun and easy
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.4 && <5'
  dlist: -any
  containers: -any
  ghc-prim: -any
  mtl: -any
  cmdargs: -any
  attoparsec: -any
  sexp: -any
  vector: -any
all-versions:
- '0.5'
- '0.6'
- '0.7'
author: Alexandru Scvortov <scvalex@gmail.com>
latest: '0.7'
description-type: markdown
description: ! "sexp\n====\n\n> S-Expression parsing/printing made fun and easy\n\nUsage\n=====\n\n`sexp`
  provides an S-expression data-type, and printers and parsers\nthat work on all data-types
  that have `Generic` instances (so,\neverything you're ever likely to define yourself).\n\nIn
  order to encode/decode a custom data-type with `sexp`, 1) add a\n`Generic` instance
  for it, and 2) add an *empty* `Sexpable` instance\nfor it.  The default implementation
  of `Sexpable`'s `toSexp` and\n`fromSexp` uses the `Generic` representation of the
  data-type to\nencode and decode it.\n\nIn order to print a `Sexp`, use `printHum`
  (for human-friendly\noutput), or `printMach` (for human-unfriendly output).  In
  order to\nparse a `Sexp`, use `parse` and friends.\n\nSee the documentation on [Hackage][sexp]
  for details.\n\n    % ghci\n    GHCi, version 7.6.2: http://www.haskell.org/ghc/
  \ :? for help\n\n    λ > :set -XDeriveGeneric\n\n    λ > import Language.Sexp\n\n
  \   λ > import GHC.Generics\n\n    λ > data MyType = Foo { unFoo :: Int, getBar
  :: Double } deriving ( Show, Generic )\n\n    λ > instance Sexpable MyType\n\n    λ
  > toSexp (Foo 23 42.0)\n    List [Atom \"Foo\",List [List [Atom \"unFoo\",Atom \"23\"],List
  [Atom \"getBar\",Atom \"42.0\"]]]\n\n    λ > printMach (toSexp (Foo 23 42.0))\n
  \   \"(Foo ((unFoo 23) (getBar \\\"42.0\\\")))\"\n\n    λ > parseExn (printMach
  (toSexp (Foo 23 42.0)))\n    [List [Atom \"Foo\",List [List [Atom \"unFoo\",Atom
  \"23\"],List [Atom \"getBar\",Atom \"42.0\"]]]]\n\n    λ > fromSexp (head (parseExn
  (printMach (toSexp (Foo 23 42.0))))) :: Maybe MyType\n    Just (Foo {unFoo = 23,
  getBar = 42.0})\n\nInstallation\n------------\n\nThis package is on [Hackage][sexp].
  \ To install it, run:\n\n    cabal update\n    cabal install sexp\n\n[sexp]: http://hackage.haskell.org/package/sexp\n"
license-name: GPL-3.0-only
