homepage: https://github.com/archambaultv/sexpresso#readme
changelog-type: markdown
hash: 5215b30e9e5750eb2ff92238c9d06741e88b69075a665eda62f401e3f3dace5b
test-bench-deps:
  tasty-smallcheck: ! '>=0.8'
  base: ! '>=4.7 && <5'
  text: ! '>=0.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  sexpresso: -any
  smallcheck: ! '>=1.0'
  containers: ! '>=0.5 && <0.7'
  tasty-hunit: ! '>=0.10.0.1'
  tasty: ! '>=0.8'
maintainer: archambault.v@gmail.com
synopsis: A flexible library for parsing and printing S-expression
changelog: "# Changelog for S-expresso\n\nVersion 1.0.0.2\n---------------\n\n* Update
  Resolver\n* Update synopsis\n\nVersion 1.0.0.1\n---------------\n\n* Add version
  bounds to the dependencies\n\nVersion 1.0.0.0\n---------------\n\n* Change type
  of SExprParser from `SExpParser m c b a` to `SExprParser m\n  b a`. The `c` parameter
  is now an existential. \n\n* `SExprParser` is not a record anymore. So `pAtom`,
  `pSpace` and\n  `pSpacingRule` are now functions and cannot be used in record\n
  \ syntax. The have been rename to `getAtom`, `getSpace` and\n  `getSpacingRule`.\n\n*
  The `pSTag` and `pETag` functions have been removed since `SExprParser`\n  is defined
  using an existential.\n  \n* Documentation improvements.\n\nVersion 0.1.1.1\n---------------\n\n*
  Fix documentation error for the pattern :::\n\nVersion 0.1.1.0\n---------------\n\n*
  Add Scheme R5RS language\n\nVersion 0.1.0.0\n--------------- \n\n* SExpr datatype\n*
  Generic SExpr parser\n* SExpr parser for character\n* SExpr flat printer\n"
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=0.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  containers: ! '>=0.5 && <0.7'
all-versions:
- 1.0.0.2
author: Vincent Archambault-Bouffard
latest: 1.0.0.2
description-type: markdown
description: "# S-expresso\n\nS-expresso is a Haskell library designed to help you
  parse and print\ndata or source code encoded as an S-expression. It provides a very\nflexible
  parser and (for now) a flat printer.\n\n# What is an S-expression\nBasically, an
  S-expression is a special form of tree structured\ndata. An S-expression object
  is either an atom or a list of atoms and other S-expressions.\n\nThis datatype is
  the definition of an S-expression for\nS-expresso. \n\n~~~haskell\ndata SExpr b
  a = SList b [SExpr b a]\n               | SAtom a\n~~~\n\nThe parameter `a` allows
  you to specify the datatype of atoms and the\nparameter `b` is usefull for keeping
  metadata about S-expression like\nsource position for example.\n\n`SExpr` is not
  equivalent to `[a]` because the later cannot\ndistinguish between an atom `(SAtom
  _)` and a tree containing only one\natom `(SList _ [SAtom _])`. `SExpr` is also
  not equivalent to `Tree a`\nfrom `Data.Tree` because the later cannot encode the
  empty tree\n`(SList _ [])` and does not enforce that atoms are at the leaves.\n\n##
  The Sexp type\nIf you are only interested by the atoms, you can use the type alias\n`Sexp`
  that is a variant of the more general 'SExpr' data type with no\ndata for the 'SList'
  constructor.\n~~~haskell\ntype Sexp a = SExpr () a\n~~~\n\nThis type also comes
  with a bidirectional pattern synonym also named\n`Sexp` for object of the form `SExpr
  () _`.\n~~~\nx = Sexp [A 3]                   <-> x = SList () [SAtom 3]\nfoo (Sexp
  xs)                    <-> foo (SList () xs)\nfoo (Sexp (Sexp ys : A x : xs))  <->
  foo (SList () (SList () ys : SAtom x : xs))\n~~~\n\n## Pattern synonyms\nS-expresso
  defines four pattern synonyms to ease your programming with\n`SExpr`. The patterns
  `L` helps you match the `SList` constructor and only\nits sublist, disregarding
  the `b` field. The pattern `:::` and `Nil` helps\nyou specify the shape of the sublist
  of an `SList` constructor and\nfinally the pattern `A` is a shorthand for `SAtom`.\n\nTogether
  they make working with `SExpr` a little easier.\n~~~\na = A 3                      <->
  a = SAtom 3\nfoo (A x)                    <-> foo (SAtom x)\nfoo (A x1 ::: A x2
  ::: Nil)  <-> foo (SList _ [SAtom x1, SAtom x2])\nfoo (A x ::: L xs))          <->
  foo (SList _ (SAtom x : xs))\nfoo (L ys ::: A x ::: L xs)) <-> foo (SList _ (SList
  _ ys : SAtom x : xs))\nfoo (L x)                    <-> foo (SList _ x)\n~~~\n\nNotice
  that you need to end the pattern `:::` with `Nil` for the empty\nlist or `L xs`
  for matching the remainder of the list. Indeed, if you write\n\n~~~\nfoo (x :::
  xs) = ...\n~~~\n\nthis is equivalent to :\n\n~~~\nfoo (SList b (x : rest)) = let
  xs = SList b rest\n                           in ...\n~~~\n\nYou can refer to the
  documentation of the `:::` constructor for more information.\n\n# Parsing S-expressions\nThe
  parsing is based on\n[megaparsec](http://hackage.haskell.org/package/megaparsec).
  S-expresso\nallows you to customize the following :\n* The parser for atoms\n* The
  opening tag (usually \"(\"), the closing tag (usually \")\") and a\n  possible dependency
  of the closing tag on the opening one.\n* If some space is required or optional
  between any pair of atoms.\n* How to parse space (ex: treat comments as whitespace)\n\nThe
  library offers amoung others the `decodeOne` and `decode`\nfunctions. The former
  only reads one S-expression while the other\nparses many S-expressions.  Both functions
  creates a megaparsec\nparser from a `SExprParser` argument.\n\nThe `SExprParser`
  is the data type that defines how to read an\nS-expression.  The easiest way to
  create a `SExprParser` is to use the\nfunction `plainSExprParser` with your own
  custom atom parser. This\nwill create a parser where S-expression starts with \"(\",
  ends with \")\"\nand space is mandatory between atoms.\n\n~~~haskell\nImport Data.Void\nImport
  qualified Data.Text as T\nImport Text.Megaparsec\nImport Text.Megaparsec.Char\nImport
  qualified Text.Megaparser.Char.Lexer as L\n\natom = some letter\n\nsexp = decode
  $ plainSExprParser atom\n\n-- Returns (SList () [SAtom \"hello\", SAtom \"world\"])\nex1
  = parse sexp \"\" \"(hello world)\"\n\n-- Returns (SList () [SAtom \"hello\", SAtom
  \"world\", SList () [SAtom \"bonjour\"]])\nex2 = parse sexp \"\" \"  (hello world(bonjour))
  \ \"\n\n-- Returns SAtom \"hola\"\nex2 = parse sexp \"\" \"hola\"\n~~~\n\n## Customizing
  the SExprParser\nS-expresso provides many functions to modify the behavior of the\nparser.
  For example, you can use the functions `setTags`,\n`setTagsFromList`, `setSpace`
  and `setSpacingRule` to modify the\nbehavior of the parser. Following on the preceding
  example:\n\n~~~haskell\n-- setTags\ndata MyType = List | Vector\n\nlistOrVector
  =\n  let sTag = (char '(' >> return List) <|> (string \"#(\" >> return Vector)\n
  \     eTag = \\t -> char ')' >> return t\n      p = setTags sTag eTag $\n          plainSExprParser
  atom\n  in decode p\n\n-- Returns (SList List [SList Vector [SAtom \"a\", SAtom
  \"b\"], SAtom \"c\"])\nex3 = parse listOrVector \"\" \"(#(a b) c)\"\n\n-- setTagsFromList\nlistOrVector2
  = decode $ \n                setTagsFromList [(\"(\",\")\",List),(\"#(\",\")\",Vector)]
  $\n                plainSExprParser atom\n\n\n-- Returns (SList List [SList Vector
  [SAtom \"a\", SAtom \"b\"], SAtom \"c\"])\nex4 = parse listOrVector2 \"\" \"(#(a
  b) c)\"\n\n-- setSpace\nwithComments = decode $\n               -- See megaparsec
  Space in Megaparsec.Char.Lexer\n               setSpace (L.Space Space1 (skipLineComment
  \";\") empty) $\n               plainSExprParser atom\n\n-- Returns (SList () [SAtom
  \"hello\", SList () [SAtom \"bonjour\"]])\nex5 = parse withComments \"\" \"(hello
  ;world\\n (bonjour))\"\n\n-- setSpacingRule\noptionalSpace = decode $\n                setSpacingRule
  spaceIsOptional $\n                plainSExprParser (some letter <|> some digitChar)\n\n--
  Returns (SList () [SAtom \"hello\", SAtom \"1234\", SAtom \"world\"])\nex5 = parse
  optionalSpace \"\" \"(hello1234world)\"\n~~~\n\nYou can also directly build a custom
  SExprParser with the constructor `SExprParser`.\n\n## Adding Source Location\nIf
  you need the source position of the atoms and s-expression, the\nfunction `withLocation`
  transforms an `SExprParser b a` into\n`SExprParser (Located b) (Located a)`. The
  `Located` datatype is\ndefined\n[here](https://github.com/archambaultv/sexpresso/blob/master/src/Data/SExpresso/Parse/Location.hs).\n"
license-name: LicenseRef-OtherLicense
