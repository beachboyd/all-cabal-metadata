homepage: ''
changelog-type: markdown
hash: 2f7a8a657928d2a72ebe2a2861aee984332602d3149ff81942df4b421abc61f2
test-bench-deps:
  bytestring: ! '>=0.10.8.2'
  sequence-formats: ! '>=1.4.0'
  base: ! '>=4.12.0.0'
  hspec: ! '>=2.7.1'
  sequenceTools: -any
  pipes: ! '>=4.3.11'
  vector: ! '>=0.12.0.3'
maintainer: stephan.schiffels@mac.com
synopsis: A package with tools for processing DNA sequencing data
changelog: "V 1.2.3 : Adapted to newest sequence-formats. Had to change all the chromosome-related
  code to the newType Chrom datatype. Also started implementing normaliseBimWithVCF.\n\nV
  1.2.4: normaliseBimWithVCF is ready.\n\nV 1.3.0: Lots of refactoring. Lots of testing.
  Removed some features in vcf2eigenstrat and in pileupCaller, including\n         the
  option in pileupCaller to call without a SNP file.\n\nV 1.3.1: Bumped dependency
  on sequence-formats to new sequence-formats-1.4.0, which includes strand-information
  in pileup data, as well as \n         rsIds in freqSum to output the correct rsId,
  and an option to parse chromosomes X, Y and MT.\n\nV 1.4.0: Added single strand
  mode, and new triallelic treatment.\n\nV 1.4.0.1: Improved README, fixed output
  bug in genoStats.hs\n"
basic-deps:
  rio: ! '>=0.1.11.0'
  bytestring: ! '>=0.10.8.2'
  lens-family: ! '>=1.2.3'
  ansi-wl-pprint: ! '>=0.6.9'
  split: ! '>=0.2.3.3'
  sequence-formats: ! '>=1.4.0'
  base: ! '>=4.12.0.0 && <5'
  pipes-group: ! '>=1.0.12'
  pipes-ordered-zip: ! '>=1.1.0'
  sequenceTools: -any
  pipes: ! '>=4.3.11'
  foldl: ! '>=1.4.5'
  optparse-applicative: ! '>=0.14.3.0'
  random: ! '>=1.1'
  pipes-safe: ! '>=2.3.1'
  vector: ! '>=0.12.0.3'
all-versions:
- 1.4.0.1
- 1.4.0.2
author: Stephan Schiffels
latest: 1.4.0.2
description-type: markdown
description: |
  # SequenceTools

  [![Anaconda package](https://anaconda.org/bioconda/sequencetools/badges/installer/conda.svg)](https://anaconda.org/bioconda/sequencetools)

  (bioconda package available thanks to [apeltzer](https://github.com/apeltzer)!)

  This repository contains some programs that I use for processing sequencing data.

  # Installation

  1. Download stack (https://docs.haskellstack.org/en/stable/README/#how-to-install<Paste>).
  2. Clone the repository using `git clone https://github.com/stschiff/sequenceTools.git; cd sequenceTools`.
  3. Run `stack install` inside the sequenceTools directory. If everything goes as planned, you should end up having the executables defined in this package under `~/.local/bin`.
  4. Add `~/.local/bin` to your PATH, for example by adding to your `~/.profile` or `~/.bash_profile` the line `PATH=$PATH:$HOME/.local/bin`. Run `source ~/.profile` or `source ~/.bash_profile`, respectively, to update your path.
  5. Run `pileupCaller --version`. It should output `1.4.0`. You're all set.

  ## pileupCaller

  The main tool in this repository is the program `pileupCaller` to sample alleles from low coverage sequence data. The first step is to generate a “pileup” file at all positions you wish to genotype. To do that, here is a typical command line, which restricts to mapping and base quality of 30:

      samtools mpileup -R -B -q30 -Q30 -l <list_of_positions.txt> \
          -f <reference_genome.fasta> \
          Sample1.bam Sample2.bam Sample3.bam > pileup.txt

  Important Note: You should definitely use the `-B` flag, which disables base alignment quality recalibration. This mechanism is turned on by default and causes huge reference bias with low coverage ancient DNA data. This flag disables the mechanism.

  In the above command line, the file "list_of_positions.txt" should either contain positions (0-based) or a bed file (see samtools manual for details). The output is a simple text file with all positions that could be genotyped in the three samples.

  Next, you need to run my tool pileupCaller, which you run like this:

      pileupCaller --randomHaploid --sampleNames Sample1,Sample2,Sample3 \
          --samplePopName MyPop -f <Eigenstrat.snp> \
          -e <My_output_prefix> < pileup.txt

  Here, options `--sampleNames` gives the names of the samples that is output in the Eigenstrat `*.ind` file, and and `-–samplePopName` is optional to also give the population names in that file (defaults to `Unknown`, you can also change it later in the output). Then, option `-f` gives an Eigenstrat positions file. This is important because the pileup file only contains sites which could be called in at least one of your samples. In order to later merge your dataset with another Eigenstrat file, pileupCaller will check every position in the other Eigenstrat file to make sure every position is output with the correct alleles and missing genotypes if appropriate. Finally, the `-e` option specifies Eigenstrat as output format and gives the prefix for the `*.ind`, `*.pos` and `*.geno` files. Without the `-e` option, pileupCaller will output in FreqSum format,  described [here](https://rarecoal-docs.readthedocs.io/en/latest/rarecoal-tools.html#vcf2freqsum), which is useful for debugging your pipeline, since it's just a single file that is output into the terminal and can therefore easily be inspected.

  You can also get some help by typing `pileupCaller -h`, which shows a lot more option, for example the sampling method, minimal coverage and other important options.

  Note that you can also fuse the two steps above into one unix pipe:

      samtools mpileup -R -B -q30 -Q30 -l <list_of_positions.txt> \
          -f <reference_genome.fasta> \
          Sample1.bam Sample2.bam Sample3.bam | \
      pileupCaller --randomHaploid --sampleNames Sample1,Sample2,Sample3 \
          --samplePopName MyPop -f <Eigenstrat.snp> \
          -e <My_output_prefix>

  There is however an issue here: If you have aligned your read data to a version of the reference genome that uses `chr1`, `chr2` and so on as chromosome names, the resulting Eigenstrat file will be valid, but won't merge with other Eigenstrat datasets that use chromosome names `1`, `2` and so on. I would therefore recommend to strip the `chr` from your chromosome names if necessary. You can do that easily using a little UNIX filter using the `sed` tool. In the full pipeline, it looks like this:

      samtools mpileup -R -B -q30 -Q30 -l <list_of_positions.txt> \
          -f <reference_genome.fasta> \
          Sample1.bam Sample2.bam Sample3.bam | sed 's/chr//' | \
      pileupCaller --sampleNames Sample1,Sample2,Sample3 \
          --samplePopName MyPop -f <Eigenstrat.snp> \
          -o EigenStrat -e <My_output_prefix>

  ## vcf2eigenstrat

  Simple tool to convert a VCF file to an Eigenstrat file. Pretty self-explanatory. Please run `vcf2eigenstrat --help` to output some documentation.

  ## genoStats

  A simple tool to get some per-individual statistics from an Eigenstrat or Freqsum-file. Run `genoStats --help` for documentation.
license-name: GPL-3.0-only
