homepage: https://github.com/ncrashed/servant-auth-token#readme
changelog-type: markdown
hash: 07b99068eebe69da271bc7bc9a29a529208fe5e8923bfa6999bc63fc3190d370
test-bench-deps: {}
maintainer: ncrashed@gmail.com
synopsis: Persistent backend for servant-auth-token server
changelog: ! '0.6.0.0

  =======


  * Breaking changes in `servant-auth-token-0.5.0.0`.


  0.5.1.1

  =======


  * Relax `servant` and `servant-server` versions.


  0.5.1.0

  =======


  * Fix instances of `ConvertStorage` that causes #12


  0.5.0.0

  =======


  * MTL instances for `PersistentBackendT`. Use `liftDB` instead of removed `MonadReader
  SqlBackend` instance.


  0.3.2.0

  =======


  * Initial factor out from parent package.

'
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  servant-auth-token-api: ! '>=0.5 && <0.6'
  servant-auth-token: ! '>=0.5 && <0.6'
  base: ! '>=4.7 && <5'
  time: ! '>=1.5 && <1.9'
  persistent: ! '>=2.2 && <2.8'
  text: ! '>=1.2 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  persistent-template: ! '>=2.1 && <2.7'
  monad-control: ! '>=1.0 && <1.1'
  servant-server: ! '>=0.9 && <0.12'
  aeson-injector: ! '>=1.0 && <1.2'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.4.0.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.6.0.0'
- '0.6.1.0'
author: NCrashed
latest: '0.6.1.0'
description-type: markdown
description: ! "# servant-auth-token-persistent\n\nStorage backend on persistent for
  [servant-auth-token](https://github.com/NCrashed/servant-auth-token) server.\n\nAn
  itegration of the backend is simple:\n``` haskell\n-- | Special monad for authorisation
  actions\nnewtype AuthM a = AuthM { unAuthM :: PersistentBackendT IO a }\n  deriving
  (Functor, Applicative, Monad, MonadIO, MonadError ServantErr, HasStorage, HasAuthConfig)\n\n--
  | Execution of authorisation actions that require 'AuthHandler' context\nrunAuth
  :: AuthM a -> ServerM a\nrunAuth m = do\n  cfg <- asks envAuthConfig\n  pool <-
  asks envPool\n  liftHandler $ ExceptT $ runPersistentBackendT cfg pool $ unAuthM
  m\n```\n\nDon't forget to add migration to your server startup (if you actually
  want automatic migrations):\n``` haskell\n-- | Create new server environment\nnewServerEnv
  :: MonadIO m => ServerConfig -> m ServerEnv\nnewServerEnv cfg = do\n  let authConfig
  = defaultAuthConfig\n  pool <- liftIO $ do\n    pool <- createPool cfg\n    -- run
  migrations\n    flip runSqlPool pool $ runMigration S.migrateAllAuth\n    -- create
  default admin if missing one\n    _ <- runPersistentBackendT authConfig pool $ ensureAdmin
  17 \"admin\" \"123456\" \"admin@localhost\"\n    return pool\n  let env = ServerEnv
  {\n        envConfig = cfg\n      , envAuthConfig = authConfig\n      , envPool
  = pool\n      }\n  return env\n```\n\nSee a full example in [servant-auth-token-example-persistent](https://github.com/NCrashed/servant-auth-token/tree/master/example/persistent).\n"
license-name: BSD3
