homepage: https://github.com/seek-oss/serverless-haskell#readme
changelog-type: ''
hash: 3cacfd2b68ef1c6cdc1ddf142a7185b6e4ca3361ccbef247a54d3fb656089e23
test-bench-deps:
  bytestring: -any
  case-insensitive: -any
  aeson-casing: -any
  unix: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  network-simple: -any
  text: -any
  network: -any
  amazonka-kinesis: -any
  lens: -any
  amazonka-core: -any
  raw-strings-qq: -any
  serverless-haskell: -any
  iproute: -any
  hspec-discover: -any
  http-types: -any
  aeson: -any
  amazonka-s3: -any
maintainer: akotlyarov@seek.com.au
synopsis: Deploying Haskell code onto AWS Lambda using Serverless
changelog: ''
basic-deps:
  bytestring: -any
  case-insensitive: -any
  aeson-casing: -any
  unix: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  network-simple: -any
  text: -any
  network: -any
  amazonka-kinesis: -any
  lens: -any
  amazonka-core: -any
  iproute: -any
  http-types: -any
  aeson: -any
  amazonka-s3: -any
all-versions:
- 0.0.0
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.6
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.6
- 0.6.7
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.7
- 0.8.8
- 0.8.10
- 0.8.11
- 0.9.0
- 0.9.1
- 0.9.3
- 0.9.4
- 0.10.0
- 0.10.1
- 0.10.2
author: ''
latest: 0.10.2
description-type: markdown
description: "# Serverless Haskell\n\n[![Build status](https://img.shields.io/travis/seek-oss/serverless-haskell.svg)](https://travis-ci.org/seek-oss/serverless-haskell)\n[![Hackage](https://img.shields.io/hackage/v/serverless-haskell.svg)](https://hackage.haskell.org/package/serverless-haskell)\n[![Stackage
  LTS](https://www.stackage.org/package/serverless-haskell/badge/lts)](https://www.stackage.org/lts/package/serverless-haskell)\n[![Hackage
  dependencies](https://img.shields.io/hackage-deps/v/serverless-haskell.svg)](https://packdeps.haskellers.com/feed?needle=serverless-haskell)\n[![npm](https://img.shields.io/npm/v/serverless-haskell.svg)](https://www.npmjs.com/package/serverless-haskell)\n\nDeploying
  Haskell code onto [AWS Lambda] using [Serverless].\n\n## Prerequisites\n\n* AWS
  account\n* [Stack]\n* [NPM]\n* [Docker]\n\n## Usage\n\nThere are two ways to start,
  either via the stack template, or directly modifying a project. You may want to
  use the manual approach as the template specifies a specific stack resolver as it
  needs to hardcode the `stack.yaml` file.\n\nIn either case, you will want to have
  [Serverless] installed, eg. `npm install -g serverless`.\n\n### Using the stack
  template\n\n* Create a [Stack] package for your code:\n\n  ```shell\n  stack new
  mypackage https://raw.githubusercontent.com/seek-oss/serverless-haskell/master/serverless-haskell.hsfiles\n
  \ ```\n\n* Update the resolver in the `stack.yaml` file. This is hardcoded as the
  resolver number is not known at template interpolation time. You should pick either
  the latest resolver, or one you have used before and have thus prebuilt many of
  the core packages for.\n  \n* Install the dependencies and build the project:\n
  \n  ```shell\n  cd mypackage\n  npm install\n  stack build\n  sls invoke local -f
  mypackage-func\n  ```\n  \n  This should invoke serverless locally and display output
  once everything has built.\n  \n### Manually\n\n* Create a [Stack] package for your
  code:\n\n  ```shell\n  stack new mypackage\n  ```\n\n  LTS 9-15 are supported, older
  versions are likely to work too but untested.\n\n* Initialise a Serverless project
  inside the Stack package directory and install\n  the `serverless-haskell` plugin:\n\n
  \ ```shell\n  cd mypackage\n  npm init .\n  npm install --save serverless serverless-haskell@x.y.z\n
  \ ```\n\n  The version of the NPM package to install must match the version of the\n
  \ Haskell package.\n\n* Create `serverless.yml` with the following contents:\n\n
  \ ```yaml\n  service: myservice\n\n  provider:\n    name: aws\n    runtime: haskell\n\n
  \ functions:\n    myfunc:\n      handler: mypackage.myfunc\n      # Here, mypackage
  is the Haskell package name and myfunc is the executable\n      # name as defined
  in the Cabal file. The handler field may be prefixed\n      # with a path of the
  form `dir1/.../dirn`, relative to `serverless.yml`,\n      # which points to the
  location where the Haskell package `mypackage` is\n      # defined. This prefix
  is not needed when the Stack project is defined at\n      # the same level as `serverless.yml`.\n\n
  \ plugins:\n    - serverless-haskell\n  ```\n\n* Write your `main` function:\n\n
  \ ```haskell\n  import qualified Data.Aeson as Aeson\n\n  import AWSLambda\n\n  main
  = lambdaMain handler\n\n  handler :: Aeson.Value -> IO [Int]\n  handler evt = do\n
  \   putStrLn \"This should go to logs\"\n    print evt\n    pure [1, 2, 3]\n  ```\n\n*
  Use `sls deploy` to deploy the executable to AWS Lambda.\n\n  The `serverless-haskell`
  plugin will build the package using Stack and upload\n  it to AWS together with
  a JavaScript wrapper to pass the input and output\n  from/to AWS Lambda.\n\n  You
  can test the function and see the invocation results with\n  `sls invoke -f myfunc`.\n\n
  \ To invoke the function locally, use `sls invoke local -f myfunc`.\n\n### API Gateway\n\nThis
  plugin supports handling API Gateway requests. Declare the HTTP events\nnormally
  in `serverless.yml` and use\n[AWSLambda.Events.APIGateway](https://hackage.haskell.org/package/serverless-haskell/docs/AWSLambda-Events-APIGateway.html)\nin
  the handler to process them.\n\n[Serverless Offline] can be used for local testing
  of API Gateway requests.\n\n### Notes\n\n* Only AWS Lambda is supported at the moment.
  Other cloud providers would\n  require different JavaScript wrappers to be implemented.\n\nSee\n[AWSLambda](https://hackage.haskell.org/package/serverless-haskell/docs/AWSLambda.html)\nfor
  documentation, including additional options to control the deployment.\n\n## Development\n\n`master`
  branch is the stable version. It is normally released to Hackage once\nnew changes
  are merged via Git tags.\n\nThe package is also maintained in Stackage LTS, provided
  the dependencies are\nnot blocking it.\n\n### Testing\n\n* Haskell code is tested
  with Stack: `stack test`.\n* JavaScript code is linted with `eslint`.\n\n### Integration
  tests\n\nIntegration test verifies that the project can build and deploy a complete\nfunction
  to AWS, and it runs with expected functionality.\n\nIntegration test is only automatically
  run up to deployment due to the need for\nan AWS account. To run manually:\n\n*
  Ensure you have the required dependencies: `curl`, [jq], [NPM], `pwgen` and\n  [Stack].\n*
  Get an AWS account and add the access credentials into your shell environment.\n*
  Run `./integration-test/run.sh`. The exit code indicates success.\n* To verify just
  the packaging, without deployment, run\n  `./integration-test/run.sh --dry-run`.\n*
  By default, the integration test is run with the LTS specified in\n  `stack.yaml`.
  To specify a different series, use `RESOLVER_SERIES=lts-9`.\n* To avoid creating
  a temporary directory for every run, specify\n  `--no-clean-dir`. This can speed
  up repeated test runs, but does not guarantee\n  the same results as a clean test.\n\n###
  Releasing\n\n* Ensure you are on the `master` branch.\n* Ensure that all the changes
  are reflected in the changelog.\n* Run the integration tests.\n* Run `./bumpversion
  major|minor|patch`. This will increment the version number,\n  update the changelog,
  create and push the Git tag and the branch.\n* If you have released an LTS version,
  merge the version branch into `master`,\n  taking care of the conflicts around version
  numbers and changelog, and release\n  the latest version as well.\n\n[AWS Lambda]:
  https://aws.amazon.com/lambda/\n[Docker]: https://www.docker.com/\n[jq]: https://stedolan.github.io/jq/\n[NPM]:
  https://www.npmjs.com/\n[Serverless]: https://serverless.com/framework/\n[Serverless
  Offline]: https://github.com/dherault/serverless-offline\n[Stack]: https://haskellstack.org\n"
license-name: MIT
