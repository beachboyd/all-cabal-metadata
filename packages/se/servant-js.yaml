homepage: http://haskell-servant.readthedocs.org/
changelog-type: markdown
hash: ecb088dd524f25b94a5345363e9f7a2feb867d2ecb26fed448fd01126320ec69
test-bench-deps:
  base: -any
  hspec: ! '>=2.3.0 && <2.5'
  text: -any
  servant-js: -any
  servant: -any
  lens: -any
  base-compat: -any
  language-ecmascript: ! '>=0.16'
  QuickCheck: -any
  hspec-expectations: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: Automatically derive javascript functions to query servant webservices.
changelog: ! "0.9.3\n-------\n\n* Remove check of responseType in vanilla backend\n
  \ ([#13](https://github.com/haskell-servant/servant-js/pull/13), [#14](https://github.com/haskell-servant/servant-js/issues/14))\n\n0.9.2\n-----\n\n*
  Fix code generation for query flag\n  ([#11](https://github.com/haskell-servant/servant-js/issues/11))\n*
  Improve error handling in vanilla backend\n  ([#9](https://github.com/haskell-servant/servant-js/pull/9))\n\n0.9.1\n-----\n\n*
  Fix javascript function name generation\n* Allow servant-0.10\n\n0.5\n----\n\n*
  Extract javascript-obvlious types and helpers to *servant-foreign*\n* Use `text`
  package instead of `String`\n* Provide new targets for code generation along with
  the old jQuery one: vanilla Javascript and Angular.js\n* Greatly simplify usage
  of this library by reducing down the API to just 2 functions: `jsForAPI` and `writeJSForAPI`
  + the choice of a code generator\n* Support for the `HttpVersion`, `IsSecure`, `RemoteHost`
  and `Vault` combinators\n* Remove matrix params.\n\n0.4\n---\n* `Delete` now is
  like `Get`, `Post`, `Put`, and `Patch` and returns a response body\n* Extend `HeaderArg`
  to support more advanced HTTP header handling (https://github.com/haskell-servant/servant-jquery/pull/6)\n*
  Support content-type aware combinators (but require that endpoints support JSON)\n*
  Add support for Matrix params (https://github.com/haskell-servant/servant-jquery/pull/11)\n*
  Add functions that directly generate the Javascript code from the API type without
  having to manually pattern match on the result.\n\n0.2.2\n-----\n\n* Fix an issue
  where toplevel Raw endpoints would generate a JS function with no name (https://github.com/haskell-servant/servant-jquery/issues/2)\n*
  Replace dots by _ in paths (https://github.com/haskell-servant/servant-jquery/issues/1)\n"
basic-deps:
  warp: -any
  stm: -any
  base: ! '>=4.7 && <4.11'
  text: ! '>=1.2 && <1.3'
  servant-js: -any
  filepath: ! '>=1'
  servant-server: -any
  servant: ! '>=0.9 && <0.14'
  lens: ! '>=4'
  base-compat: ! '>=0.9'
  charset: ! '>=0.3'
  servant-foreign: ! '>=0.9 && <0.12'
  transformers: -any
  aeson: ! '>=0.7 && <1.3'
all-versions:
- '0.5'
- '0.6'
- '0.6.1'
- '0.7'
- '0.7.1'
- '0.8'
- '0.8.1'
- '0.9'
- '0.9.1'
- '0.9.2'
- '0.9.3'
- '0.9.3.1'
- '0.9.3.2'
author: Servant Contributors
latest: '0.9.3.2'
description-type: markdown
description: ! "# servant-js\n\n![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\nThis
  library lets you derive automatically Javascript functions that let you query each
  endpoint of a *servant* webservice.\n\nIt contains a powerful system allowing you
  to generate functions for several frameworks (Angular, AXios, JQuery) as well as\nvanilla
  (framework-free) javascript code.\n\n## Example\n\nRead more about the following
  example [here](https://github.com/haskell-servant/servant/tree/master/servant-js/examples#examples).\n\n```
  haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE
  DeriveGeneric #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\nimport Control.Concurrent.STM\nimport
  Control.Monad.IO.Class\nimport Data.Aeson\nimport Data.Proxy\nimport GHC.Generics\nimport
  Network.Wai.Handler.Warp (run)\nimport Servant\nimport Servant.JS\nimport System.FilePath\n\n--
  * A simple Counter data type\nnewtype Counter = Counter { value :: Int }\n  deriving
  (Generic, Show, Num)\n\ninstance ToJSON Counter\n\n-- * Shared counter operations\n\n--
  Creating a counter that starts from 0\nnewCounter :: IO (TVar Counter)\nnewCounter
  = newTVarIO 0\n\n-- Increasing the counter by 1\ncounterPlusOne :: MonadIO m =>
  TVar Counter -> m Counter\ncounterPlusOne counter = liftIO . atomically $ do\n  oldValue
  <- readTVar counter\n  let newValue = oldValue + 1\n  writeTVar counter newValue\n
  \ return newValue\n\ncurrentValue :: MonadIO m => TVar Counter -> m Counter\ncurrentValue
  counter = liftIO $ readTVarIO counter\n\n-- * Our API type\ntype TestApi = \"counter\"
  :> Post '[JSON] Counter -- endpoint for increasing the counter\n          :<|> \"counter\"
  :> Get  '[JSON] Counter -- endpoint to get the current value\n\ntype TestApi' =
  TestApi -- The API we want a JS handler for\n           :<|> Raw     -- used for
  serving static files\n\n-- this proxy only targets the proper endpoints of our API,\n--
  not the static file serving bit\ntestApi :: Proxy TestApi\ntestApi = Proxy\n\n--
  this proxy targets everything\ntestApi' :: Proxy TestApi'\ntestApi' = Proxy\n\n--
  * Server-side handler\n\n-- where our static files reside\nwww :: FilePath\nwww
  = \"examples/www\"\n\n-- defining handlers\nserver :: TVar Counter -> Server TestApi\nserver
  counter = counterPlusOne counter     -- (+1) on the TVar\n            :<|> currentValue
  counter       -- read the TVar\n\nserver' :: TVar Counter -> Server TestApi'\nserver'
  counter = server counter\n             :<|> serveDirectory www         -- serve
  static files\n\nrunServer :: TVar Counter -- ^ shared variable for the counter\n
  \         -> Int          -- ^ port the server should listen on\n          -> IO
  ()\nrunServer var port = run port (serve testApi' $ server' var)\n\nmain :: IO ()\nmain
  = do\n  -- write the JS code to www/api.js at startup\n  writeJSForAPI testApi jquery
  (www </> \"api.js\")\n\n  -- setup a shared counter\n  cnt <- newCounter\n\n  --
  listen to requests on port 8080\n  runServer cnt 8080\n```\n"
license-name: BSD3
