homepage: https://github.com/brandonchinn178/self-extract#readme
changelog-type: markdown
hash: 07dbf0041eb4ba7b7fa4303736ecbe38db31508ef4a2b3e5702c0ccba7413007
test-bench-deps: {}
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: A Haskell library to make self-extracting executables
changelog: ! '## self-extract 0.4.0


  Fixes:

  * Works with lts-11.*


  ## self-extract 0.3.4


  Fixes:

  * Better error message if no archive was bundled


  ## self-extract 0.3.3


  Fixes:

  * Make bundling occur in same directory as exe

  * Use typed paths for `ztar`


  ## self-extract 0.3.2


  Fixes:

  * Use `GZip` instead of `Zip` (#14), thanks to ztar-0.1.1


  ## self-extract 0.3.1


  Other fixes:

  * Uses `Zip` instead of `GZip`, due to filename limits in tar (#14)


  ## self-extract 0.3.0


  Breaking fixes:

  * `bundle` now works standalone, without needing to be in a Cabal hook

  * Use `getExe` in Cabal hooks instead


  Other fixes:

  * Add tests

  * Add dev flag

  * Upgrade to ztar-0.1.0


  ## self-extract 0.2.0.0


  Fixed bug due to stripping the exes after bundling, which is only a problem when
  bundling multiple

  executables in a package.


  Major fixes:

  * Packages should use `bundle` in the `postCopy` hook, rather than the `postBuild`
  hook.


  Other fixes:

  * Updated documentation


  ## self-extract 0.1.0.0


  * Initial implementation

'
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  extra: ! '>=1.6 && <1.7'
  Cabal: ! '>=2.0 && <3'
  path: ! '>=0.6 && <0.7'
  base: ! '>=4.7 && <5'
  unix-compat: ! '>=0.5 && <0.6'
  self-extract: -any
  binary: ! '>=0.8.5 && <0.9'
  ztar: ! '>=1.0 && <1.1'
  file-embed: ! '>=0.0.10 && <0.1'
  path-io: ! '>=1.3 && <1.4'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.4.0'
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: '0.4.0'
description-type: markdown
description: ! "# self-extract\n\nA Haskell library that can make an executable self-extracting.\n\n##
  Usage\n\n### Basic\n\n```\nimport Codec.SelfExtract (extractTo)\nimport System.Environment
  (getArgs)\n\nmain :: IO ()\nmain = do\n  dir <- head <$> getArgs\n  extractTo dir\n```\n\n```\n$
  stack ghc Example.hs\n$ mkdir artifacts && touch artifacts/hello.txt artifacts/world.txt\n$
  stack build self-extract && stack exec -- self-bundle ./Example artifacts/\n$ ./Example
  dist\n$ ls dist\nhello.txt\nworld.txt\n```\n\n### With Cabal hooks\n\n* Add `self-extract`
  to the Cabal file\n\n```\ncustom-setup\n  setup-depends: base, Cabal, self-extract\n\nexecutable
  name-of-executable\n  build-depends: self-extract\n```\n\n* Call `bundle` in `Setup.hs`\n\n```\nimport
  Codec.SelfExtract (bundle)\nimport Codec.SelfExtract.Distribution (getExe)\nimport
  Distribution.Simple\n\nmain = defaultMainWithHooks simpleUserHooks\n  { postCopy
  = \\args cf pd lbi -> do\n      postCopy simpleUserHooks args cf pd lbi\n      exe
  <- getExe lbi \"name-of-executable\"\n      bundle exe \"dir-to-bundle\"\n  }\n```\n\n*
  Call `extractTo` in the executable\n\n```\nimport Codec.SelfExtract\n\nmain = do\n
  \ -- will extract to $CWD/dir\n  extractTo \"dir\"\n\n  -- will extract to /usr/local/lib\n
  \ extractTo \"/usr/local/lib\"\n\n  -- will extract to a temporary directory\n  withExtractToTemp
  $ \\dir -> ...\n```\n\n### Details\n\nThe above instructions should be a black box,
  but here is an explanation of the implementation\nif you need to know the details
  of how it works.\n\nWhen the executable containing `extractTo` is built, some space
  will be allocated to contain the\nsize of the binary.\n\n`bundle` will take the
  directory specified and run `tar` on it. It will also get the size of the\ngiven
  executable and write the size into the space allocated by `extractTo`. Then `bundle`
  will\nreplace the executable with the executable itself concatenated with the tar
  archive.\n\nWhen `extractTo` is called, it will read the size of the executable
  that was written with `bundle`.\nAfter seeking to the size of the binary, the tar
  archive can be extracted to the desired directory.\n"
license-name: BSD3
