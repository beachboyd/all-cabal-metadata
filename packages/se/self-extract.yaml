homepage: ''
changelog-type: markdown
hash: 0bee12d96c6e1fe886b39e5cfa760fdec21540209ff2c5ab4f16ccf26838d0df
test-bench-deps: {}
maintainer: Brandon Chinn <brandon@leapyear.io>
synopsis: A Haskell library to make self-extracting executables
changelog: ! '## self-extract 0.1.0.0


  * Initial implementation

'
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  extra: ! '>=1.6 && <1.7'
  Cabal: ! '>=2.0 && <3'
  path: ! '>=0.6 && <0.7'
  base: ! '>=4.7 && <5'
  unix-compat: ! '>=0.5 && <0.6'
  process: ! '>=1.6 && <1.7'
  binary: ! '>=0.8.5 && <0.9'
  file-embed: ! '>=0.0.10 && <0.1'
  path-io: ! '>=1.3 && <1.4'
all-versions:
- '0.1.0.0'
author: Brandon Chinn <brandon@leapyear.io>
latest: '0.1.0.0'
description-type: markdown
description: ! "# self-extract\n\nA Haskell library that can make an executable self-extracting.\n\n##
  Usage\n\n### .cabal file\n\n```\n...\nbuild-type: Custom\n...\n\ncustom-setup\n
  \ setup-depends: base, Cabal, self-extract\n\n...\n\nexecutable name-of-executable\n
  \ build-depends: self-extract, ...\n  ...\n```\n\n### Setup.hs\n\nBasic:\n\n```\nimport
  Codec.SelfExtract.Distribution (bundle)\nimport Distribution.Simple\n\nmain = defaultMainWithHooks
  simpleUserHooks\n  { postBuild = \\args bf pd lbi -> do\n      postBuild simpleUserHooks
  args bf pd lbi\n      bundle \"name-of-executable\" \"dir-to-bundle\" lbi\n  }\n```\n\nUsing
  the [Path](https://hackage.haskell.org/package/path-0.6.1) library:\n\n```\nimport
  Codec.SelfExtract.Distribution (bundle')\nimport Distribution.Simple\nimport Path
  (reldir)\n\nmain = defaultMainWithHooks simpleUserHooks\n  { postBuild = \\args
  bf pd lbi -> do\n      postBuild simpleUserHooks args bf pd lbi\n      bundle' \"name-of-executable\"
  [reldir|dir-to-bundle|] lbi\n  }\n```\n\n### Executable file\n\nBasic:\n\n```\nimport
  Codec.SelfExtract (extractTo)\n\nmain = do\n  extractTo \"dir\" -- will extract
  to $CWD/dir\n  extractTo \"/usr/local/lib\"\n  ...\n```\n\nExtract to a temporary
  directory:\n\n```\nimport Codec.SelfExtract (withExtractToTemp)\nimport System.Directory
  (removeDirectory)\n\nmain = do\n  withExtractToTemp $ \\tmp -> do\n    ...\n```\n\nUsing
  the [Path](https://hackage.haskell.org/package/path-0.6.1) library:\n\n```\nimport
  Codec.SelfExtract (extractTo', withExtractToTemp')\nimport Path (absdir, reldir)\nimport
  Path.IO (removeDir)\n\nmain = do\n  extractTo' $ [reldir|dir|] -- will extract to
  $CWD/dir\n  extractTo' $ [absdir|/usr/local/lib|]\n  withExtractToTemp' $ \\tmp
  -> do\n    ...\n```\n\n### Details\n\nThe above instructions should be a black box,
  but here is an explanation of the implementation\nif you need to know the details
  of how it works.\n\nWhen the executable containing `extractTo` is built, some space
  will be allocated to contain the\nsize of the binary.\n\n`bundle` will find the
  executable from `LocalBuildInfo`'s `buildDir`. It will take the directory\nspecified
  and run `tar` on it. It will also get the size of the executable and write the size
  into\nthe space allocated by `extractTo`. Then `bundle` will replace the executable
  with the executable\nitself concatenated with the tar archive.\n\nWhen `extractTo`
  is called, it will read the size of the executable that was written in `bundle`.\nAfter
  seeking to the size of the binary, the tar archive can be extracted to the desired
  directory.\n"
license-name: BSD3
