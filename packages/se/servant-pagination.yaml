homepage: https://github.com/chordify/haskell-servant-pagination
changelog-type: markdown
hash: 2199413d793728bb83f48d80ffe04f556054a09650a8ebadc52abcb03cda676d
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  servant-server: -any
  servant-pagination: -any
  QuickCheck: -any
maintainer: Chordify <haskelldevelopers@chordify.net>, Matthias Benkort <matthias.benkort@gmail.com>
synopsis: Type-safe pagination for Servant APIs
changelog: ! "# Changelog\n\n## v2.1.0 (2018-04-16) \n\n- Add some tests (QuickCheck
  round-up & control some Ranges parsing)\n- Add `Show` and `Eq` instances for Ranges\n-
  Expose `putRange` function \n- Review `getDefaultRange` signature (remove Maybe
  argument)\n\n\n## v2.0.0 (2018-04-06)\n\n- Review internal implementation and public
  API (ditch Range combinator to favor type-level\n  list and more discrete footprint).
  \n\n- Remove 'Total-Count' header, can still be added on top of the range headers
  but isn't a Range\n  header so to speak. \n\n- Extend haddock documentation to be
  more user-friendly\n\n\n## v1.0.0 (2018-02-06)\n\n- Initial release\n"
basic-deps:
  warp: ! '>=3.2 && <4'
  base: ==4.*
  text: ! '>=1.2 && <2'
  servant-server: ! '>=0.11 && <0.14'
  servant: ! '>=0.11 && <0.14'
  servant-pagination: -any
  aeson: ! '>=1.2 && <2'
  safe: ! '>=0.3 && <1'
all-versions:
- '2.1.0'
author: Chordify
latest: '2.1.0'
description-type: markdown
description: ! "# servant-pagination [![](https://img.shields.io/hackage/v/servant-pagination.svg)](https://hackage.haskell.org/package/servant-pagination)\n\n##
  Overview\n\nThis module offers opinionated helpers to declare a type-safe and a
  flexible pagination\nmechanism for Servant APIs. This design, inspired by [Heroku's
  API](https://devcenter.heroku.com/articles/platform-api-reference#ranges),\nprovides
  a small framework to communicate about a possible pagination feature of an endpoint,\nenabling
  a client to consume the API in different fashions (pagination with offset / limit,\nendless
  scroll using last referenced resources, ascending and descending ordering, etc.)\n\nTherefore,
  client may provide a `Range` header with their request with the following format:\n\n-
  `Range: <field> [<value>][; offset <o>][; limit <l>][; order <asc|desc>]`\n\nFor
  example: `Range: createdAt 2017-01-15T23:14:67.000Z; offset 5; order desc` indicates
  that\nthe client is willing to retrieve the next batch of document in descending
  order that were\ncreated after the fifteenth of January, skipping the first 5.\n\nAs
  a response, the server may return the list of corresponding document, and augment
  the\nresponse with 3 or 4 headers:\n\n- `Accept-Ranges`: A comma-separated list
  of field upon which a range can be defined\n- `Content-Range`: Actual range corresponding
  to the content being returned\n- `Next-Range`: Indicate what should be the next
  `Range` header in order to retrieve the next range\n\nFor example:\n\n- `Accept-Ranges:
  createdAt, modifiedAt`\n- `Content-Range: createdAt 2017-01-15T23:14:51.000Z..2017-02-18T06:10:23.000Z`\n-
  `Next-Range: createdAt 2017-02-19T12:56:28.000Z; offset 0; limit 100; order desc`\n\n\n##
  Getting Starting\n\nCode-wise, the integration is rather seamless and requires to
  declare a `Range` type on\non a given field and to provide an instance of `HasPagination`
  and `FromHttpApiData`. \nThe `getRangeField` method from `HasPagination` is merely
  a getter to retrieve\na range's field value from a resource. \n\n```hs\ndata Color
  = Color\n  { name :: String\n  , rgb  :: [Int]\n  , hex  :: String\n  } deriving
  (Eq, Show, Generic)\n\ninstance ToJSON Color where\n  toJSON = genericToJSON defaultOptions\n\ninstance
  HasPagination Color \"name\" where\n  type RangeType Color \"name\" = String\n  getFieldValue
  _ = name\n```\n\nThat's it, the range is ready to use and to be declared in the
  Servant API. Additionally,\nthis library provides a small type alias helper `PageHeaders`
  to derive response headers from\na range. For example:\n\n```hs\ntype API =\n  \"colors\"\n
  \ :> Header \"Range\" (Ranges '[\"name\"] Color)\n  :> GetPartialContent '[JSON]
  (Headers (PageHeaders '[\"name\"] Color) [Color])\n```\n\nThe range is then provided
  to the corresponding handler as a `Maybe NameRange` (for Servant\n<0.13) type and
  can be used by the backend service to actually apply the given range and \nfetch
  the resources demanded by the client. To send the response, one can leverage the\n`returnPage`
  to lift a collection of resources into a Servant Handler:\n\n```hs\ndefaultRange
  :: Range \"name\" String\ndefaultRange =\n  getDefaultRange (Proxy @Color)\n\nserver
  :: Maybe (Ranges '[\"name\"] Color) -> Handler (Headers (PageHeaders '[\"name\"]
  Color) [Color])\nserver mrange = do\n  let range =\n        fromMaybe defaultRange
  (mrange >>= extractRange)\n\n  returnRange range (applyRange range colors)\n```\n\n>
  See `examples/Simple.hs` for a running version of this guide.\n\n\n## Multiple Ranges\n\nAs
  you've probably noticed, the 'Ranges' type takes a list of 'Symbol' of accepted
  fields. For\neach of those 'Symbol', there must be a instance of `HasPagination`
  tighting the 'Symbol' to a\n'Resource' and a given type. This enables you to define
  as many ranges as you want on a given\nresource type. For instance, one could go
  for:\n\n```hs\ninstance HasPagination Color \"hex\" where\n  type RangeType Color
  \"hex\" = String\n  getFieldValue _ = hex\n\n-- to then define: Ranges '[\"name\",
  \"hex\"] Color\n```\n\n> See `examples/Complex.hs` for more complex examples.\n\n\n##
  Parsing Options\n\nBy default, `servant-pagination` provides an implementation of
  `getRangeOptions` for each \n`HasPagination` type-class. However, this can be overwritten
  when defining a instance of that\nclass to provide your own options. This options
  come into play when a `Range` header is\nreceived and isn't fully specified (`limit`,
  `offset`, `order` are all optional) to provide \ndefault fallback values for those.\n\nFor
  instance, let's say we wanted to change the default limit to `5` in for our range
  on\n`\"name\"`, we could tweak the corresponding `HasPagination` instance as follows:\n\n```hs\ninstance
  HasPagination Color \"name\" where\n  type RangeType Color \"name\" = String\n  getFieldValue
  _ = name\n  getRangeOptions _ _ = defaultOptions { defaultRangeLimit = 5 }\n```\n\n\n##
  Changelog\n\n[CHANGELOG.md](CHANGELOG.md)\n\n\n## License\n\n[LGPL-3 Â© 2018 Chordify](LICENSE)\n"
license-name: LGPL-3
