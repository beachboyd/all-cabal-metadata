homepage: ''
changelog-type: ''
hash: 52e7210e7659b77db908beb79e653a52cdc734deb2a7bc1ac1d04d9cbb3d836f
test-bench-deps:
  warp: -any
  base: ! '>=4.7 && <4.12'
  servant-generic: -any
  text: -any
  servant-server: ! '>=0.7.1'
  servant: ! '>=0.7.1'
  network-uri: -any
maintainer: chpatrick@gmail.com
synopsis: Specify Servant APIs with records.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.12'
  servant-server: ! '>=0.7.1'
  servant: ! '>=0.7.1 && <0.14.1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
author: Patrick Chilton
latest: '0.1.0.3'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/chpatrick/servant-generic.svg?branch=master)](https://travis-ci.org/chpatrick/servant-generic)
  [![Hackage](https://img.shields.io/hackage/v/servant-generic.svg)](http://hackage.haskell.org/package/servant-generic)\n\ntl;dr\n-----\nSpecify
  Servant APIs with simple records instead of `:<|>` trees.\n\n```haskell\ndata Site
  route = Site\n  { about :: route :-\n      \"about\" :> Get '[PlainText] Text\n
  \ , faq :: route :-\n      \"faq\" :> Get '[PlainText] Text\n  } deriving Generic\n\nsiteServer
  :: Site AsServer\nsiteServer = Site\n  { about = return \"about\"\n  , faq = return
  \"faq\"\n  }\n\ntype Api = ToServant (Site AsApi)\n\nmain :: IO ()\nmain = run 31337
  $ serve (Proxy :: Proxy Api) (toServant siteServer)\n```\n\nSo long and thanks for
  all the `:<|>`\n-------------------------------------\nServant is great for building
  typesafe APIs. However, its biggest weakness is that you need to specify APIs as
  a tree of `:<|>` operators:\n\n```haskell\ntype SiteOld =\n       \"about\" :> Get
  '[PlainText] Text\n  :<|> \"faq\" :> Get '[PlainText] Text\n  :<|> \"subsite\" :>
  SubSiteOld\n\ntype SubSiteOld =\n       \"echo\" :> Capture \"x\" Text :> Get '[PlainText]
  Text\n  :<|> \"timestwo\" :> Capture \"x\" Int :> Get '[PlainText] Text\n\nsiteOldServer
  :: Server SiteOld\nsiteOldServer =\n       return \"about\"\n  :<|> subSiteOldServer\n
  \ :<|> return \"faq\"\n\nsubSiteOldServer :: Server SubSiteOld\nsubSiteOldServer
  =\n       return\n  :<|> (\\x -> return $ T.pack $ show (x * 2))\n```\n\nThis is
  cumbersome because you need to remember the exact order of routes when you are implementing
  the API. Not only that, but if you get anything wrong, you are treated with an incomprehensible
  error message. Let's see what happens if we mix up the implementations of `/faq`
  and `/subsite`:\n\n```\n    • Couldn't match type ‘(Text\n                            ->
  transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n                                 ServantErr
  IO Text)\n                           :<|> (Int\n                                 ->
  transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n                                      ServantErr
  IO Text)’\n                     with ‘transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n
  \                            ServantErr IO Text’\n      Expected type: Server SiteOld\n
  \       Actual type: transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n                       ServantErr
  IO Text\n                     :<|> (Server SubSiteOld\n                           :<|>
  ((Text\n                                  -> transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n
  \                                      ServantErr IO Text)\n                                 :<|>
  (Int\n                                       -> transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n
  \                                           ServantErr IO Text)))\n    • In the
  expression:\n        return \"about\" :<|> subSiteOldServer :<|> return \"faq\"\n
  \     In an equation for ‘siteOldServer’:\n          siteOldServer\n            =
  return \"about\" :<|> subSiteOldServer :<|> return \"faq\"\n```\n\nCan you figure
  out what the problem is from that?\n\nWhat this package lets you do is to specify
  routes as regular Haskell records:\n\n```haskell\ndata Site route = Site\n  { about
  :: route :-\n      \"about\" :> Get '[PlainText] Text\n  , faq :: route :-\n      \"faq\"
  :> Get '[PlainText] Text\n  , subSite :: route :-\n      \"subsite\" :> ToServant
  (SubSite AsApi) -- record APIs can be nested easily\n  } deriving Generic\n\ndata
  SubSite route = SubSite\n  { echo :: route :-\n      \"echo\" :> Capture \"x\" Text
  :> Get '[PlainText] Text\n  , timesTwo :: route :-\n      \"timestwo\" :> Capture
  \"x\" Int :> Get '[PlainText] Text\n  } deriving Generic\n\ntype Api = ToServant
  (Site AsApi)\n\nsubSiteServer :: SubSite AsServer\nsubSiteServer = SubSite\n  {
  echo = return\n  , timesTwo = \\x -> return $ T.pack $ show (x * 2)\n  }\n\nsiteServer
  :: Site AsServer\nsiteServer = Site\n  { about = return \"about\"\n  , faq = return
  \"faq\"\n  , subSite = toServant subSiteServer\n  }\n```\n\nNow everything is named
  so we don't need to remember which route is which.\nThese records can be converted
  to Servant-compatible types like this:\n```haskell\nToServant (MyApiRecord AsApi)\n```\n\nand
  to Servant-compatible implementations like this:\n\n```haskell\ntoServant myApiRecordServer\n```\n\nThese
  functions work with any library based on Servant, not just `servant-server`.\n\nWhat
  happens if we make the same mistake as above?\n\n```\n    • Couldn't match type
  ‘(Text\n                            -> transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n
  \                                ServantErr IO Text)\n                           :<|>
  (Int\n                                 -> transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n
  \                                     ServantErr IO Text)’\n                     with
  ‘transformers-0.5.2.0:Control.Monad.Trans.Except.ExceptT\n                             ServantErr
  IO Text’\n      Expected type: AsServer :- (\"faq\" :> Get '[PlainText] Text)\n
  \       Actual type: ToServant (SubSite AsServer)\n    • In the ‘faq’ field of a
  record\n      In the expression:\n        Site\n          {about = return \"about\",
  faq = toServant subSiteServer,\n           subSite = return \"faq\",\n           home
  = return \"So long and thanks for all the :<|>\"}\n      In an equation for ‘siteServer’:\n
  \         siteServer\n            = Site\n                {about = return \"about\",
  faq = toServant subSiteServer,\n                 subSite = return \"faq\",\n                 home
  = return \"So long and thanks for all the :<|>\"}\n```\nNow, GHC tells us that the
  problem is in the `faq` field, and that we passed a `SubSite` route rather than
  an `\"faq\"` route.\n\nThis approach is based on my [solga](https://github.com/chpatrick/solga)
  library, which also has these benefits and is a lot simpler than Servant."
license-name: MIT
