homepage: https://github.com/ChrisPenner/selections#readme
changelog-type: ''
hash: 53e9a2fc12e0fa27dc6b031a54403734d0ceca64a08e6db0b1e35db66bb82f50
test-bench-deps: {}
maintainer: christopher.penner@gmail.com
synopsis: Combinators for operating with selections over an underlying functor
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  comonad: -any
  bifunctors: -any
  profunctors: -any
all-versions:
- 0.1.0.0
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
author: Chris Penner
latest: 0.2.0.0
description-type: markdown
description: ! "Selections\n==========\n[![Hackage](https://img.shields.io/badge/hackage-latest-green.svg)](https://hackage.haskell.org/package/selections)\n\n[See
  it on Hackage](https://hackage.haskell.org/package/selections)\n\n`selections` is
  a haskell package for transforming subsets of values within a functor using\nan
  intuitive selection-based interface.\n\nEver wished you could select just a few
  values within a functor, perform some\noperations on them, then flatten them back
  into the plain old functor again? Now\nyou can!\n\n`Selection` is a newtype wrapper
  around Functors which adds several\ncombinators and interesting instances. Wrapping
  a functor in `Selection` allows\nyou to:\n\n-   Select specific values within your
  functor according to a predicate\n-   Expand/Contract selections based on additional
  predicates using `include`\n    and `exclude`\n-   Select values based on their
  context if your functor is also a Comonad\n-   Map over unselected and/or selected
  values using `Bifunctor`\n-   Traverse over unselected and/or selected values using
  `Bitraversable`\n-   Fold over unselected and/or selected values using `Bifoldable`\n-
  \  Perform monad computations over selected values if your functor is a Monad\n-
  \  Extract all unselected or selected elements to a list\n-   Deselect and return
  to your original functor using `unify`\n-   Traverse or fold over selections using
  `Control.Lens`\n\nHere's how it looks, tutorials are available\n[here](https://github.com/ChrisPenner/selections/tree/master/tutorials).\n\n```haskell\nxs
  = [1..6]\nÎ»> newSelection xs & select even & mapSelected (+100) & bimap ((\"Odd:
  \" ++) . show) ((\"Even: \" ++) . show) & forgetSelection\n[\"Odd: 1\",\"Even: 102\",\"Odd:
  3\",\"Even: 104\",\"Odd: 5\",\"Even: 106\"]\n```\n\nTechnically you could use `Selection`
  as a monad-transformer, but it's a bit\nclunky and you'd probably be better off
  with\n[`EitherT`](https://hackage.haskell.org/package/either-4.4.1.1/docs/Control-Monad-Trans-Either.html).\n\nFun
  fact, `Selection` is isomorphic to `EitherT`, but the semantics are quite\ndifferent
  and they're suited to different purposes.\n\n## When Should/Shouldn't I Use Selections?\n\nYou
  can use selections whenever you've got a bunch of things and you want to operate
  over just a few of them at a time.\nYou can do everything that selections provides
  by combining a bunch of predicates with fmap, but it gets messy really\nquick; selections
  provides a clean interface for this sort of operation.\n\nYou shouldn't use selections
  when you're looking for a monadic interface for this sort of thing, selections works\nat
  the value level and typically you want to chain selection commands using `(.)` or
  `(&)`, it technically can\nbe used as a monad transformer if your underlying functor
  is also a monad, but at that point you may wish to check\nout [`EitherT`](https://hackage.haskell.org/package/either-4.4.1.1/docs/Control-Monad-Trans-Either.html)
  instead.\n\n## Examples\n\nCheck out the [Accounts\ntutorial](https://github.com/ChrisPenner/selections/tree/master/tutorials/Basic.md)\nfirst
  to get your bearings. After that continue to the [Lenses\ntutorial](https://github.com/ChrisPenner/selections/tree/master/tutorials/Lenses.md).\n"
license-name: BSD-3-Clause
