homepage: http://fremissant.net/seqaid
changelog-type: text
hash: df22ad91c03537f2d27eea9fd1fc855776e4f73e3383f4d1ebe7526772d21fce
test-bench-deps: {}
maintainer: Andrew Seniuk <rasfar@gmail.com>
synopsis: Dynamic strictness control, including space leak repair
changelog: ! "\n** 0.3.0.1 -> 0.4.0.0\n - deepseq-bounded major version bump again
  (OverloadedStrings! yummy)\n - there'll be two or three of these over the next month
  or so, then\n   thing'll likely get pretty quiet\n\n0.3.0.0 -> 0.3.0.1\n - still
  trying to decide on policy regarding cpphs\n - this is all motivated by one pesky
  rogue anonymous build spammer\n - had a spot of trouble over this, but learned a
  few tricks\n - hopefully this upload is the ticket; sorry for the extra version
  uploads\n\n** 0.2.1.1 -> 0.3.0.0\n - deepseq-bounded major version bump\n\n0.2.1.0
  -> 0.2.1.1\n - added a non-manual USE_CPPHS flag to seqaid.cabal, which should\n
  \  in principle allow the client build system to try cpphs first, and\n   if that
  build fails, then try again with a native cpp if there's\n   one in the path (which
  is usually the case)\n    - this auto-toggle works for me with GHC 7.8.4 and Cabal
  1.22.0.0\n    - what is the oldest version of cabal-install that this\n      auto-toggling
  will happen in?...\n - improvements in platform-dependent handling in Demo.hs\n
  - and also in choice of leaky version in Demo.hs\n\n0.2.0.0 -> 0.2.1.0\n - realised
  I should be using Manual: True in all my .cabal flags,\n   or else the constraint
  solver is free to toggle them!!\n\n** 0.1.7.0 -> 0.2.0.0\n - deepseq-bounded had
  a major version bump\n - fixed cpphs missing dependency (Seqaid lib, and seqaid
  and seqaidpp exe's)\n - more...\n\n"
basic-deps:
  regex-pcre: <=0.94.4
  exceptions: ==0.5.*
  ghc: ! '>=7.6 && <7.10'
  Cabal: ! '>=1.10'
  base: ==4.*
  syb: <=0.4.2
  filepath: ==1.3.*
  process: ==1.*
  array: ==0.4.* || ==0.5.*
  containers: ==0.5.*
  ghc-paths: ==0.1.*
  deepseq-bounded: ! '>=0.8 && <1.0'
  regex-base: <=0.93.2
  mtl: ==2.*
  cpphs: ! '>=1.14'
  transformers: ==0.3.*
  temporary: ==1.2.*
  template-haskell: ==2.9.*
  directory: ==1.2.*
all-versions:
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6.0
- 0.1.7.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
author: Andrew G. Seniuk
latest: 0.4.0.0
description-type: text
description: ! "\n  ----------------------------------------------------------\n\n
  \ Seqaid : Space Leak Diagnostic and Remedial Tool\n\n  Andrew Seniuk\n  rasfar@gmail.com\n
  \ 2014\n\n  ----------------------------------------------------------\n\n  The
  easiest way to get started with seqaid is\n\n     cabal install seqaid\n     seqaid
  demo\n\n  This will create a fresh directory, populate\n  it with the <leaky> test
  project, and configure,\n  build and run it with seqaid instrumentation.\n  Consult
  the leaky.cabal, README, and leaky.hs files\n  in that directory for additional
  information.\n  (The README explains the console output.)\n\n  ----------------------------------------------------------\n\n
  \ To instrument your own project (\"myapp\" for didactic purposes),\n  typically
  the following steps suffice:\n\n    1. cabal install seqaid, of course.\n\n    2.
  Add the following (at the appropriate level of indentation)\n       to your myapp.cabal
  file:\n\n         default-extensions:  TemplateHaskell\n         ghc-options:         -fplugin=Seqaid.Plugin\n
  \        ghc-options:         -F -pgmF seqaidpp\n         ghc-options:         -with-rtsopts=-T\n\n
  \   3. Create a seqaid.config file in the project dir.\n       The preprocessor
  will parse this, and control\n       the extent of the instrumentation harness.\n\n
  \      There is no mechanism yet for real blanket\n       instrumentation: You must
  name at least\n       the modules you want instrumented, and the\n       types you're
  interested in.  All binds in\n       a module will be covered however.\n\n       Looking
  at the seqaid.config file for leaky:\n\n         package    leaky\n         module
  \    Main\n           binds    duty\n             types  Types.TA\n         instances
  \ Types.TA, Types.TB, Types.TC\n\n       is this was changed to\n\n         package
  \   leaky\n         module     Main\n         types      Types.TA\n         instances
  \ Types.TA, Types.TB, Types.TC\n\n       then all binds in module Main will be instrumented
  at\n       all subexpressions having type Types.TA.\n\n       The instances line
  names types you need to be able\n       to force through.  If you get missing instance
  errors\n       when you build, then you probably need to add those\n       types
  to this list.\n\n  ----------------------------------------------------------\n\n
  \ When the preprocessor runs, it will parse the configuration\n  from seqaid.config,
  and perform the requisite insertions and\n  substitutions behind the scenes.\n\n
  \   NOTE: This will never ever edit your source files directly!\n    GHC takes care
  of running the preprocessor (-F option) on\n    its own temporary files, in the
  natural course of the\n    compilation pipeline.\n\n  ----------------------------------------------------------\n\n
  \ The other project inseparable from this is <deepseq-bounded>.\n\n  More specific
  information resides in\n   - this document, and links from it:\n       http://www.fremissant.net/deepseq-bounded-seqaid-leaky\n
  \  - reddit thread(s): http://www.reddit.com/r/haskell/comments/2pscxh/ann_deepseqbounded_seqaid_leaky/\n
  \  - the Haddock API docs for <seqaid> and <deepseq-bounded>\n   - haskell.org mailing
  list thread(s), for instance:\n       http://web.archiveorange.com/archive/v/nDNOvlhf3EjknkvBbCya\n\n
  \ And to a lesser extent, sporadic bits of information can also\n  be found in files
  in the source distribution\n   - the project README and .cabal files\n   - comments
  in the source files [tend to obsolescence]\n\n  Subsequent versions will hopefully
  be more cohesive.\n\n  ----------------------------------------------------------\n\n"
license-name: BSD-3-Clause
