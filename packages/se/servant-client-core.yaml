homepage: http://haskell-servant.readthedocs.org/
changelog-type: markdown
hash: 1104e2a0c28a8b102db7f4bea2db1decabc4c5440d0b71fbf7f770aaef37b913
test-bench-deps:
  base: -any
  hspec: ! '>=2.4.1 && <2.6'
  servant-client-core: -any
  base-compat: -any
  deepseq: ! '>=1.3.0.2 && <1.5'
  QuickCheck: ! '>=2.11.3 && <2.13'
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: Core functionality and class for client function generation for servant
  APIs
changelog: ! "[The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant-client-core/CHANGELOG.md)\n[Changelog
  for `servant` package contains significant entries for all core packages.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)\n\n0.14.1\n------\n\n-
  Merge in `servant-generic` (by [Patrick Chilton](https://github.com/chpatrick))\n
  \ into `servant` (`Servant.API.Generic`),\n  `servant-client-code` (`Servant.Client.Generic`)\n
  \ and `servant-server` (`Servant.Server.Generic`).\n\n0.14\n----\n\n- `Stream` takes
  a status code argument\n\n  ```diff\n  -Stream method        framing ctype a\n  +Stream
  method status framing ctype a\n  ```\n\n  ([#966](https://github.com/haskell-servant/servant/pull/966)\n
  \  [#972](https://github.com/haskell-servant/servant/pull/972))\n\n- `ToStreamGenerator`
  definition changed, so it's possible to write an instance\n  for conduits.\n\n  ```diff\n
  \ -class ToStreamGenerator f a where\n  -   toStreamGenerator :: f a -> StreamGenerator
  a\n  +class ToStreamGenerator a b | a -> b where\n  +   toStreamGenerator :: a ->
  StreamGenerator b\n  ```\n\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  Added `NoFraming` streaming strategy\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  *servant-client-core* Free `Client` implementation.\n  Useful for testing `HasClient`
  instances.\n  ([#920](https://github.com/haskell-servant/servant/pull/920))\n\n-
  *servant-client-core* Add `hoistClient` to `HasClient`.\n  Just like `hoistServer`
  allows us to change the monad in which request handlers\n  of a web application
  live in, we also have `hoistClient` for changing the monad\n  in which *client functions*
  live.\n  Read [tutorial section for more information](https://haskell-servant.readthedocs.io/en/release-0.14/tutorial/Client.html#changing-the-monad-the-client-functions-live-in).\n
  \ ([#936](https://github.com/haskell-servant/servant/pull/936))\n\n  iF you have
  own combinators, you'll need to define a new method of\n  `HasClient` class, for
  example:\n\n  ```haskell\n  type Client m (MyCombinator :> api) = MyValue :> Client
  m api\n  hoistClientMonad pm _ nt cl = hoistClientMonad pm (Proxy :: Proxy api)
  nt . cl\n  ```\n\n0.13.0.1\n--------\n\n- Support `base-compat-0.10`\n\n0.13\n----\n\n-
  Streaming endpoint support.\n  ([#836](https://github.com/haskell-servant/servant/pull/836))\n-
  *servant* Add `Servant.API.Modifiers`\n  ([#873](https://github.com/haskell-servant/servant/pull/873))\n\n0.12\n----\n\n-
  First version. Factored out of `servant-client` all the functionality that was\n
  \ independent of the `http-client` backend.\n"
basic-deps:
  exceptions: ! '>=0.10.0 && <0.11'
  free: ! '>=5.0.2 && <5.2'
  bytestring: ! '>=0.10.4.0 && <0.11'
  base: ! '>=4.7 && <4.13'
  base64-bytestring: ! '>=1.0.0.1 && <1.1'
  text: ! '>=1.2.3.0 && <1.3'
  http-api-data: ! '>=0.3.8.1 && <0.4'
  servant: ! '>=0.14.1 && <0.15'
  containers: ! '>=0.5.5.1 && <0.7'
  base-compat: ! '>=0.10.1 && <0.11'
  network-uri: ! '>=2.6.1.0 && <2.7'
  generics-sop: ! '>=0.3.2.0 && <0.4'
  http-types: ! '>=0.12.1 && <0.13'
  safe: ! '>=0.3.17 && <0.4'
  http-media: ! '>=0.7.1.2 && <0.8'
all-versions:
- '0.12'
- '0.13'
- '0.13.0.1'
- '0.14'
- '0.14.1'
author: Servant Contributors
latest: '0.14.1'
description-type: markdown
description: ! "# servant-client-core\n\n![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\nHTTP-client-agnostic
  client functions for servant APIs.\n\nThis library should mainly be of interest
  to backend- and combinator-writers.\n\n## For backend-writers\n\nIf you are creating
  a new backend, you'll need to:\n\n1. Define a `RunClient` instance for your datatype
  (call it `MyMonad`)\n2. Define a `ClientLike` instance. This will look like:\n\n```
  haskell\ninstance ClientLike (MyMonad a) (MyMonad a) where\n  mkClient = id\n```\n\n3.
  Re-export the module Servant.Client.Core.Reexport so that your end-users\n   can
  be blissfully unaware of 'servant-client-core', and so each\n   backend-package
  comes closer to the warm hearth of the drop-in-replacement\n   equivalence class.\n\n##
  For combinator-writers\n\nYou'll need to define a new `HasClient` instance for your
  combinator. There are\nplenty of examples to guide you in the\n[HasClient](src/Servant/Client/Core/Internal/HasClient.hs)
  module.\n"
license-name: BSD3
