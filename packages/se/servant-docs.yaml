homepage: http://haskell-servant.readthedocs.org/
changelog-type: markdown
hash: 43357f1fb869ba7ab4dda4fbb09ca48c5e24961b5727bb4109cb89d229172b11
test-bench-deps:
  servant-docs: -any
  base: -any
  hspec: ! '>=2.4.4 && <2.5'
  servant: -any
  lens: -any
  string-conversions: -any
  aeson: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: generate API docs for your servant webservice
changelog: ! "[The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant-docs/CHANGELOG.md)\n[Changelog
  for `servant` package contains significant entries for all core packages.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)\n\n0.11.2\n------\n\n*
  Allow `servant-0.13`:\n  - Doesn't have instances for streaming.\n  - Servant.API.Modifiers
  extra information isn't used.\n\n0.11.1\n------\n\n* Export `DocAuthentication`
  and related lenses.\n* Make `defAction`'s documentation visible in Haddock documentation.\n*
  Add a markdown header for the Headers an endpoint is sensitive to.\n* Document the
  HTTP Method the parameters of an endpoint belong to\n  (rather than assuming `GET`
  for all of them).\n* Content type of sample response body is also displayed.\n*
  Can now customise various aspects of how the document is produced\n  using `markdownWith`
  and `RenderingOptions`:\n    - How many content-types for each example are shown\n
  \   - Whether notes should be grouped together under their own header.\n\n0.11\n----\n\n*
  changed the type of `rqbody`.\n\n0.10\n----\n\nThere are no changes. Released as
  a part of `servant` suite.\n\n0.7.1\n-----\n\n* Support GHC 8.0\n\n0.7\n---\n\n*
  Use `throwError` instead of `throwE` in documentation\n\n0.5\n----\n\n* Support
  for the `HttpVersion`, `IsSecure`, `RemoteHost` and `Vault` combinators\n* Support
  maximum samples setting with new `DocOptions` type (used by `docsWithOptions` and
  `docsWith`)\n* Remove redundant second parameter of ToSample\n* Add Generic-based
  default implementation for `ToSample` class\n* Add more `ToSamples` instances: `Bool`,
  `Ordering`, tuples (up to 7), `[]`, `Maybe`, `Either`, `Const`, `ZipList` and some
  monoids\n* Move `toSample` out of `ToSample` class\n* Add a few helper functions
  to define `toSamples`\n* Remove matrix params.\n* Added support for Basic authentication\n\n0.4\n---\n*
  `Delete` now is like `Get`, `Post`, `Put`, and `Patch` and returns a response body\n*
  Allow for extra information to be added to the docs\n* Support content-type aware
  combinators of *servant-0.4*\n* Render endpoints in a canonical order (https://github.com/haskell-servant/servant-docs/pull/15)\n*
  Remove ToJSON superclass from ToSample\n* Split out Internal module\n* Add support
  for response headers\n* Allow `ToSample` to return a different type than it's arguments\n*
  Add Proxy argument to `ToSample`\n\n0.3\n---\n\n* Add the ability to display multiple
  responses, with some accompanying `Text` to describe the context in which we get
  the corresponding JSON.\n* Expose the `headers` lens\n* Represent an endpoint's
  path as `[String]` (previously `String`), fixing a corner case where the leading
  `/` would be missing.\n"
basic-deps:
  servant-docs: -any
  bytestring: ! '>=0.10.4.0 && <0.11'
  case-insensitive: ! '>=1.2.0.10 && <1.3'
  base: ! '>=4.7 && <4.11'
  aeson-pretty: ! '>=0.8.5 && <0.9'
  unordered-containers: ! '>=0.2.8.0 && <0.3'
  text: ! '>=1.2.3.0 && <1.3'
  servant: ==0.13.*
  lens: ! '>=4.15.4 && <4.17'
  base-compat: ! '>=0.9.3 && <0.10'
  control-monad-omega: ! '>=0.3.1 && <0.4'
  hashable: ! '>=1.2.6.1 && <1.3'
  string-conversions: ! '>=0.4.0.1 && <0.5'
  http-types: ! '>=0.12 && <0.13'
  aeson: ! '>=1.2.3.0 && <1.3'
  http-media: ! '>=0.7.1.1 && <0.8'
all-versions:
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.4'
- '0.4.4.2'
- '0.4.4.3'
- '0.4.4.4'
- '0.4.4.5'
- '0.4.4.6'
- '0.4.4.7'
- '0.5'
- '0.6'
- '0.6.1'
- '0.7'
- '0.7.1'
- '0.8'
- '0.8.1'
- '0.9'
- '0.9.0.1'
- '0.9.1'
- '0.9.1.1'
- '0.10'
- '0.11'
- '0.11.1'
- '0.11.2'
author: Servant Contributors
latest: '0.11.2'
description-type: markdown
description: ! "# servant-docs\n\n![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)\n\nGenerate
  API docs for your *servant* webservice. Feel free to also take a look at [servant-pandoc](https://github.com/mpickering/servant-pandoc)
  which uses this package to target a broad range of output formats using the excellent
  **pandoc**.\n\n## Example\n\nSee [here](https://github.com/haskell-servant/servant/blob/master/servant-docs/example/greet.md)
  for the output of the following program.\n\n``` haskell\n{-# LANGUAGE DataKinds
  #-}\n{-# LANGUAGE PolyKinds #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE DeriveGeneric
  #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE
  OverloadedStrings #-}\n\nimport Data.Proxy\nimport Data.Text\nimport Servant.Docs\n\n--
  our type for a Greeting message\ndata Greet = Greet { _msg :: Text }\n  deriving
  (Generic, Show)\n\n-- we get our JSON serialization for free. This will be used
  by the default\n-- 'MimeRender' instance for 'JSON'.\ninstance FromJSON Greet\ninstance
  ToJSON Greet\n\n-- We can also implement 'MimeRender' explicitly for additional
  formats.\ninstance MimeRender PlainText Greet where\n    mimeRender Proxy (Greet
  s) = \"<h1>\" <> cs s <> \"</h1>\"\n\n-- we provide a sample value for the 'Greet'
  type\ninstance ToSample Greet where\n  toSample = Just g\n\n    where g = Greet
  \"Hello, haskeller!\"\n\ninstance ToParam (QueryParam \"capital\" Bool) where\n
  \ toParam _ =\n    DocQueryParam \"capital\"\n                  [\"true\", \"false\"]\n
  \                 \"Get the greeting message in uppercase (true) or not (false).
  Default is false.\"\n\ninstance ToCapture (Capture \"name\" Text) where\n  toCapture
  _ = DocCapture \"name\" \"name of the person to greet\"\n\ninstance ToCapture (Capture
  \"greetid\" Text) where\n  toCapture _ = DocCapture \"greetid\" \"identifier of
  the greet msg to remove\"\n\n-- API specification\ntype TestApi =\n       \"hello\"
  :> Capture \"name\" Text :> QueryParam \"capital\" Bool :> Get '[JSON,PlainText]
  Greet\n  :<|> \"greet\" :> RQBody '[JSON] Greet :> Post '[JSON] Greet\n  :<|> \"delete\"
  :> Capture \"greetid\" Text :> Delete '[] ()\n\ntestApi :: Proxy TestApi\ntestApi
  = Proxy\n\n-- Generate the Documentation's ADT\ngreetDocs :: API\ngreetDocs = docs
  testApi\n\nmain :: IO ()\nmain = putStrLn $ markdown greetDocs\n```\n"
license-name: BSD3
