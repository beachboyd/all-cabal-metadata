homepage: https://github.com/tsani/servant-github-webhook
changelog-type: markdown
hash: bd541388a08f76449c0b915fc14b52629ac9c94d9ffd06334f8e7163b7c27685
test-bench-deps:
  warp: -any
  servant-github-webhook: -any
  bytestring: -any
  wai: -any
  base: -any
  servant-server: -any
  aeson: -any
maintainer: servant-github-webhook@mail.jerrington.me
synopsis: Servant combinators to facilitate writing GitHub webhooks.
changelog: ! "# Revision history for servant-github-webhook\n\n## 0.3.2.0  -- 2017-12-25\n\n*
  Support GHC 8.2 / `base` 4.10.\n* Bump up version bound for `github` to 0.18.\n\n##
  0.3.1.0  -- 2017-08-06\n\n* Drop support for GHC <8.\n* Drop support for Servant
  <0.11.\n* Switch from Crypto package to cryptonite package.\n* Now servant-github-webhook
  builds with stack.\n\n## 0.3.0.0  -- 2016-09-22\n\n* Pass reflected key index to
  the handler function for GitHubSignedReqBody.\n  This allows for more generic handler
  functions, as they can determine\n  programmatically which repository they are responding
  to.\n\n## 0.2.0.1  -- 2016-09-13\n\n* Improve documentation (formatting and typos)
  and examples (remove unnecessary\n  verbosity).\n\n## 0.2.0.0  -- 2016-09-11\n\n*
  Generalize `GitHubSignedReqBody` combinator to `GitHubSignedReqBody''` to\n  allow
  for configuring multiple signing keys, on a per-route basis.\n* Make `GitHubKey`
  take a function instead of simply an `IO` action.\n* Reexport `KProxy`, to make
  writing `Demote'` instances easier.\n\n## 0.1.0.0  -- 2016-09-10\n\nInitial release.\n\n*
  Implement `GitHubSignedReqBody` combinator for automatic signature\n  verification
  during routing.\n* Implement `GitHubEvent` combinator for dispatching to routes
  based on the\n  webhook type.\n* Known issue: only one global `GitHubKey` can be
  used across all routes.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.2 && <3.3'
  base: ! '>=4.9 && <4.11'
  text: ! '>=1.2 && <1.3'
  servant-server: ! '>=0.11 && <0.12'
  servant: ! '>=0.11 && <0.12'
  memory: ! '>=0.14 && <0.15'
  cryptonite: ! '>=0.23 && <0.25'
  github: ! '>=0.15 && <0.18'
  base16-bytestring: ! '>=0.1 && <0.2'
  string-conversions: ! '>=0.4 && <0.5'
  http-types: ! '>=0.9 && <0.10'
  aeson: ! '>=0.11 && <1.3'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.1.0'
- '0.3.2.0'
author: Jacob Thomas Errington
latest: '0.3.2.0'
description-type: markdown
description: ! "servant-github-webhook\n======================\n\n[![Build Status][badge-travis]][travis]\n[![Hackage][badge-hackage]][hackage]\n\nThis
  library facilitates writing Servant routes that can safely act as GitHub\nwebhooks.\n\nFeatures:\n\n
  \ * Dispatching to routes based on the type of repository event.\n  * Automatic
  verification of request signatures.\n  * Route protection expressed in the type
  system, so webhook routes and\n    regular routes cannot be confused.\n\nWhy use
  servant-github-webhook?\n-------------------------------\n\nA webhook server needs
  to be publicly hosted. How can legitimate requests sent\nby GitHub be distinguished
  from (malicious) requests sent by other clients?\n\nWhen a webhook is configured
  on a repository, a *secret key* is added. This key\nis used by GitHub to compute
  a *signature* of the request body that it sends;\nthis signature is included in
  the request headers. The routing combinators in\nservant-github-webhook compute
  the signature of the received request body using\nthe same key, and check that the
  signature in the request headers matches. If\nit does, then the request is legitimate.\n\n[hackage]:
  https://hackage.haskell.org/package/servant-github-webhook\n[badge-hackage]: https://img.shields.io/hackage/v/servant-github-webhook.svg\n[travis]:
  https://travis-ci.org/tsani/servant-github-webhook?branch=master\n[badge-travis]:
  https://travis-ci.org/tsani/servant-github-webhook.svg?branch=master\n"
license-name: MIT
