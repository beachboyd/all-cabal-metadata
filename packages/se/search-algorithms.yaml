homepage: https://github.com/devonhollowood/search-algorithms#readme
changelog-type: ''
hash: 091d0e4170d201df8145b385ef4cc3111dc3596a9acc59a760613092a3ae8431
test-bench-deps:
  base: -any
  hspec: ! '>=2.2'
  doctest: ! '>=0.8'
  containers: ! '>=0.5'
  search-algorithms: -any
maintainer: devonhollowood@gmail.com
synopsis: Common graph search algorithms
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  containers: ! '>=0.5 && <0.6'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
author: Devon Hollowood
latest: '0.3.0'
description-type: markdown
description: ! "# search-algorithms\nHaskell library containing common graph search
  algorithms\n\n[![Build Status](https://travis-ci.org/devonhollowood/search-algorithms.svg?branch=master)](https://travis-ci.org/devonhollowood/search-algorithms)\n\nLots
  of problems can be modeled as graphs, but oftentimes one doesn't want to use an
  explicit graph structure to represent the problem. Maybe the graph would be too
  big (or is infinite), maybe making an explicit graph is unwieldy for the problem
  at hand, or maybe one just wants to generalize over graph implementations. That's
  where this library comes in: this is a collection of generalized search algorithms,
  so that one doesn't have to make the graphs explicit. In general, this means that
  one provides each search function with a function to generate neighboring states,
  possibly some functions to generate additional information for the search, a predicate
  which tells when the search is complete, and an initial state to start from. The
  result is a path from the initial state to a \"solved\" state, or `Nothing` if no
  such path is possible.\n\n## Documentation\nDocumentation is hosted on [Hackage](http://hackage.haskell.org/package/search-algorithms).\n\n##
  Acknowledgements\nThis library shares a similar functionality with the [astar](http://hackage.haskell.org/package/astar)
  library (which I was unaware of when I released the first version of this library).
  `astar`'s interface has since influenced the development of this library's interface,
  and this library owes a debt of gratitude to `astar` for that reason.\n\n\n## Examples\n###
  Change-making problem\n```haskell\nimport Algorithm.Search (bfs)\n\ncountChange
  target = bfs (add_one_coin `pruning` (> target)) (== target) 0\n  where\n    add_one_coin
  amt = map (+ amt) coins\n    coins = [1, 5, 10, 25]\n\n-- countChange gives the
  subtotals along the way to the end:\n-- >>> countChange 67\n-- Just [1, 2, 7, 17,
  42, 67]\n```\n\n### Simple directed acyclic graph:\n```haskell\nimport Algorithm.Search
  (dfs)\nimport qualified Data.Map as Map\n\ngraph = Map.fromList [\n  (1, [2, 3]),\n
  \ (2, [4]),\n  (3, [4]),\n  (4, [])\n  ]\n\n-- Run dfs on the graph:\n-- >>> dfs
  (graph Map.!) (== 4) 1\n-- Just [3,4]\n```\n\n### Using A* to find a path in an
  area with a wall:\n```haskell\nimport Algorithm.Search (aStar)\n\ntaxicabNeighbors
  :: (Int, Int) -> [(Int, Int)]\ntaxicabNeighbors (x, y) = [(x, y + 1), (x - 1, y),
  (x + 1, y), (x, y - 1)]\n\nisWall :: (Int, Int) -> Bool\nisWall (x, y) = x == 1
  && (-2) <= y && y <= 1\n\ntaxicabDistance :: (Int, Int) -> (Int, Int) -> Int\ntaxicabDistance
  (x1, y1) (x2, y2) = abs (x2 - x1) + abs (y2 - y1)\n\nfindPath :: (Int, Int) -> (Int,
  Int) -> Maybe (Int, [(Int, (Int, Int))])\nfindPath start end =\n  let next = taxicabNeighbors\n
  \     cost = taxicabDistance\n      remaining = (taxicabDistance end)\n  in aStar
  (next `pruning` isWall) cost remaining (== end) start\n\n-- findPath p1 p2 finds
  a path between p1 and p2, avoiding the wall\n-- >>> findPath (0, 0) (2, 0)\n-- Just
  (6,[(0,1),(0,2),(1,2),(2,2),(2,1),(2,0)])\n--\n-- This correctly goes up and around
  the wall\n```\n"
license-name: BSD3
