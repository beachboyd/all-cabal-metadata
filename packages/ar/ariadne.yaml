homepage: https://github.com/feuerbach/ariadne
changelog-type: ''
hash: d9405eaf11db45e03759dfb0267bc926ee231c7b9ed6950f2da798643815a44c
test-bench-deps:
  base: ! '>=4 && <5'
  filepath: -any
  bert: -any
  containers: -any
  haskell-src-exts: -any
  utf8-string: -any
  tasty-hunit: ! '>=0.4'
  tasty: ! '>=0.7'
  directory: -any
maintainer: ''
synopsis: Go-to-definition for Haskell
changelog: ''
basic-deps:
  stm: -any
  Cabal: ! '>=1.16'
  base: ! '>=4 && <5'
  hse-cpp: ! '>=0.1'
  filepath: -any
  data-lens-fd: -any
  async: -any
  bert: ! '>=1.2'
  tagged: -any
  containers: ! '>=0.4'
  haskell-src-exts: ! '>=1.16'
  data-lens-template: -any
  utf8-string: ! '>=0.3'
  hslogger: ! '>=1.2'
  mtl: ! '>=2.1'
  haskell-names: ! '>=0.4.1'
  haskell-packages: ! '>=0.2'
  transformers: -any
  data-lens: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
author: Roman Cheplyaka
latest: 0.1.2.3
description-type: markdown
description: ! "Ariadne\n=======\n\n**Ariadne [is not maintained][1]. If you want
  to take over, get in touch.**\n\n[1]: http://ro-che.info/articles/2014-11-01-rebalancing-open-source-portfolio\n\nAriadne
  provides a \"go-to-definition\" functionality for Haskell.\n\n[Video demonstration](http://youtu.be/-sbGijbhxAc)\n\nUsage\n-----\n\nTo
  use Ariadne, you need two things:\n\n* install this package, `ariadne`, which includes
  the `ariadne-server`\n  executable, and make sure this executable is running;\n*
  find and install a plugin for your editor or IDE of choice.\n\nEditor plugins\n--------------\n\nCurrently,
  the following editor/IDE plugins exist:\n\n* [vim](https://github.com/feuerbach/ariadne-vim)\n*
  [emacs](https://github.com/manzyuk/ariadne-el)\n\nLimitations\n-----------\n\nAs
  of v0.1, Ariadne only knows about the current file. It won't find definitions\nin
  other files in the same directory, or in the installed packages. It also\nwon't
  look in the Cabal file for the language extensions, and a file may fail to\nparse
  because of that.\n\nThese will be addressed in the future versions.\n\nCreating
  a plugin\n-----------------\n\nWriting a new Ariadne plugin should be straightforward
  (assuming you\nknow how to extend your editor/IDE).\n\nIf you write a new plugin,
  let me know so I can update the list above, and also\nnotify you when the protocol
  changes.\n\n[bert]: http://bert-rpc.org/\n\n### Conventions\n\nIn the protocol description
  below, we don't use Erlang's upper-case/lower-case\nconvention, because it would
  confuse anyone except Erlang or Prolog programmers.\nInstead, variables and functions
  are written lowercase, and atoms are prefixed\nwith the colon, e.g. `:atom`.\n\n###
  Protocol\n\nYou communicate with the Ariadne server via the [BERT-RPC protocol][bert]
  over\nTCP. The server listens on the local TCP port 39014. The BERT-RPC module is\n`ariadne`.\n\nThe
  request has form\n\n    find(file, line, column)\n\nwhere `file` is a binary string,
  `line` and `column` are integers. `file` must\ncontain the full and canonical path
  to the Haskell source file. It is assumed to\nbe UTF-8 encoded, although this may
  improve in the future.\n\nThe `line` and `column` should probably be the current
  cursor position. Ariadne\nwill look up the name at that location. Lines and columns
  are numbered starting\nfrom 1.\n\nThe possible responses are:\n\n    { :no_name
  }\n\nThis means that there's no recognized name at the\ngiven position. The plugin
  should probably do nothing in this case.\n\n    { :loc_known, file, line, column
  }\n\nThis means that the name is defined at the given file, line, and column. The\n`file`
  is again a binary UTF-8 encoded full path. The plugin should probably\njump at that
  location.\n\n    { :loc_unknown, modname }\n\nWe don't know where the name is defined,
  but we know it comes from the given\nmodule (binary UTF-8 encoded name). The plugin
  may want to show this\ninformation to the user.\n\n    { :error, message }\n\nSome
  error has occurred. For example, the file has a syntax or scoping error.\nThe plugin
  is expected to present the error message to the user.\n\nThe message is a binary
  UTF-8 encoded text, possibly spanning multiple lines.\n\nOther requests and responses
  will probably be added in the future versions.\n\nMaintainers\n-----------\n\n[Roman
  Cheplyaka](https://github.com/feuerbach) is the primary maintainer.\n\n[Oleksandr
  Manzyuk](https://github.com/manzyuk) is the backup maintainer. Please\nget in touch
  with him if the primary maintainer cannot be reached.\n"
license-name: MIT
