homepage: https://github.com/silkapp/arrow-list
changelog-type: markdown
hash: b378ebb0f81e6630c634b7ec8b13d00f53883b83a0cc885c903b58ef04ddf68c
test-bench-deps: {}
maintainer: code@silk.co
synopsis: List arrows for Haskell.
changelog: ! "# Changelog\n\n## 0.7\n\n* Renamed modules to not clash with hxt\n  *
  `Control.Arrow.ArrowF` => `Control.Arrow.ArrowListLike.Class`\n  * `Control.Arrow.ArrowKleisli`
  => `Control.Arrow.ArrowKleisli.Class`\n  * `Control.Arrow.ArrowList` => `Control.Arrow.ArrowList.Class`\n\n*
  Renamed the `ArrowF` class to `ArrowListLike`.\n\n#### 0.6.1.5\n\n* Allow mtl 2.2.\n\n####
  0.6.1.4\n\n* arrow-list is now maintained by Silk and located at https://www.github.com/silkapp/arrow-list\n"
basic-deps:
  base: ==4.*
  containers: ! '>=0.3 && <0.6'
  mtl: ! '>=1.1 && <2.3'
all-versions:
- 0.1.0
- 0.2.0
- '0.6'
- 0.6.1
- 0.6.1.4
- 0.6.1.5
- '0.7'
author: Sebastiaan Visser
latest: '0.7'
description-type: markdown
description: ! "# List arrows for Haskell.\n[![Build Status](https://travis-ci.org/silkapp/arrow-list.svg?branch=master)](https://travis-ci.org/silkapp/arrow-list)\n\nThis
  small Haskell library provides some type classes, types and functions to\nwork with
  list arrows and the more generalized container arrows. List arrows\nrepresent computations
  that may return multiple outputs. Making functions that\nreturn lists an instance
  of both the `Category` and `Arrow` type classes allow\nyou to easily compose multiple
  computations into one with standard building\nblocks.\n\nThis package provides:\n\n
  \ - A type class `ArrowList` for embedding functions that produce a list of\n    outputs
  into _some_ list arrow.\n\n  - A list of utility functions for working with list-arrows,
  these functions\n    are based on the `ArrowList` type class so they are not tied
  one specific\n    instance.\n\n  - A concrete list arrow type that is implemented
  as a `Kleisli` arrow over\n    the `ListT` list monad transformer. In short, you
  can both build pure list\n    arrows and list arrows that produce tributary effects.\n\n
  \ - Not list arrow specific: A type class `ArrowKleisli` for embedding monadic\n
  \   computations into an arrow.\n\n  - A type class `ArrowF` for embedding functions
  that produce a some\n    Foldable + Alternative functor of outputs into _some_ container
  arrow.\n"
license-name: BSD-3-Clause
