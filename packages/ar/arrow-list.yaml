homepage: https://github.com/silkapp/arrow-list
changelog-type: markdown
hash: e043419b6cab237fbd4bc8fd1a1ce415f93622a58aac9e087cff0783075536d1
test-bench-deps: {}
maintainer: code@silk.co
synopsis: List arrows for Haskell.
changelog: |
  # Changelog

  ### 0.7.1

  * Fix compilation with GHC 8.8.

  ## 0.7

  * Renamed modules to not clash with hxt
    * `Control.Arrow.ArrowF` => `Control.Arrow.ArrowListLike.Class`
    * `Control.Arrow.ArrowKleisli` => `Control.Arrow.ArrowKleisli.Class`
    * `Control.Arrow.ArrowList` => `Control.Arrow.ArrowList.Class`

  * Renamed the `ArrowF` class to `ArrowListLike`.

  #### 0.6.1.5

  * Allow mtl 2.2.

  #### 0.6.1.4

  * arrow-list is now maintained by Silk and located at https://www.github.com/silkapp/arrow-list
basic-deps:
  fail: ==4.9.*
  base: ==4.*
  containers: '>=0.3 && <0.7'
  mtl: '>=1.1 && <2.3'
all-versions:
- 0.1.0
- 0.2.0
- '0.6'
- 0.6.1
- 0.6.1.4
- 0.6.1.5
- '0.7'
- 0.7.1
author: Sebastiaan Visser
latest: 0.7.1
description-type: markdown
description: |
  # List arrows for Haskell.
  [![Build Status](https://travis-ci.org/silkapp/arrow-list.svg?branch=master)](https://travis-ci.org/silkapp/arrow-list)

  This small Haskell library provides some type classes, types and functions to
  work with list arrows and the more generalized container arrows. List arrows
  represent computations that may return multiple outputs. Making functions that
  return lists an instance of both the `Category` and `Arrow` type classes allow
  you to easily compose multiple computations into one with standard building
  blocks.

  This package provides:

    - A type class `ArrowList` for embedding functions that produce a list of
      outputs into _some_ list arrow.

    - A list of utility functions for working with list-arrows, these functions
      are based on the `ArrowList` type class so they are not tied one specific
      instance.

    - A concrete list arrow type that is implemented as a `Kleisli` arrow over
      the `ListT` list monad transformer. In short, you can both build pure list
      arrows and list arrows that produce tributary effects.

    - Not list arrow specific: A type class `ArrowKleisli` for embedding monadic
      computations into an arrow.

    - A type class `ArrowF` for embedding functions that produce a some
      Foldable + Alternative functor of outputs into _some_ container arrow.
license-name: BSD-3-Clause
