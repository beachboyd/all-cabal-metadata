homepage: https://github.com/pepeiborra/arrowp
changelog-type: ''
hash: a47bba818ddcaf607dc6fe5124d7b4e64e71d669b0ed29f04e0ff2bc8388d204
test-bench-deps:
  arrows: -any
  base: -any
  arrowp-qq: -any
  template-haskell: -any
maintainer: Jose Iborra <pepeiborra@gmail.com>
synopsis: A preprocessor and quasiquoter for translating arrow notation
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  haskell-src-exts-util: ! '>=0.2.0'
  uniplate: -any
  data-default: -any
  containers: -any
  haskell-src-exts: -any
  arrowp-qq: -any
  NoHoed: -any
  transformers: -any
  haskell-src-meta: -any
  template-haskell: <2.13
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.0.1
- 0.2.1
- 0.2.1.1
author: Jose Iborra <pepeiborra@gmail.com>
latest: 0.2.1.1
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/arrowp-qq.svg)](https://hackage.haskell.org/package/arrowp-qq)\n[![Stackage
  Nightly](http://stackage.org/package/arrowp-qq/badge/nightly)](http://stackage.org/nightly/package/arrowp-qq)\n[![Travis
  Build Status](https://travis-ci.org/pepeiborra/arrowp-qq.svg)](https://travis-ci.org/pepeiborra/arrowp-qq)\n\nArrowp-qq\n==========\nA
  preprocessor for arrow notation \nbased on the arrowp preprocessor developed by
  Ross Paterson <ross@soi.city.ac.uk>.\n\nNotable features include support for GHC
  Haskell syntax and a\nquasiquoter that can be used instead of the preprocessor.\n\nNote
  that recent versions of GHC support this notation directly, and\ngive better error
  messages to boot. But the translation produced by GHC\nis in some cases not as good
  as it could be.\n\nStatus\n------\n\nThe parser cannot handle banana brackets for\ncontrol
  operators in arrow notation (the **proc** keyword in the original paper), \ndue
  to a \n[limitation](https://github.com/haskell-suite/haskell-src-exts/issues/45)
  \nin haskell-src-exts. In order to use banana brackets, the recommendation\nis to
  fall back to the GHC Arrows parser. \n\nSupport for GHC Haskell notation inside
  arrow blocks is not complete, e.g.\nmulti-way-if and lambda case are unlikely to
  work as expected. If you run into \none of these, please open an issue or vote for
  an existing one, as I plan to extend\nthe support on demand.\n\nUsing the `proc`
  quasi quoter\n---------------------------\n\n```\naddA :: Arrow a => a b Int ->
  a b Int -> a b Int\naddA f g = [proc| x -> do\n\t\ty <- f -< x\n\t\tz <- g -< x\n\t\treturnA
  -< y + z |]\n```\n\nUsing the **arrowp-ext** preprocessor\n---------------------------------\n\n```\n{-#
  OPTIONS -F -pgmF arrowp-ext #-}\n```\n\nComparison with **arrowp**\n-----------------------\n**arrowp-qq**
  extends the original **arrowp** in three dimensions:\n1. It replaces the `haskell-src`
  based parser with one based on `haskell-src-exts`, which handles most of GHC 8.0.2
  Haskell syntax.\n2. It provides not only a preprocessor but also a quasiquoter,
  which is a better option in certain cases.\n3. It extends the desugaring to handle
  static conditional expressions. Example:\n```\nproc inputs -> do\n  results <- processor
  -< inputs\n  if outputResultsArg\n    then outputSink -< results\n    else returnA
  -< ()\n  returnA -< results\n```\nThe standard **arrowp** (and GHC) desugaring for
  this code is:\n```\n  = ((processor >>> arr (\\ results -> (results, results)))
  >>>\n       (first\n          (arr\n             (\\ results -> if outputResultsArg
  then Left results else Right ())\n             >>> (outputSink ||| returnA))\n          >>>
  arr (\\ (_, results) -> results)))\n```\nThis requires an `ArrowChoice`, but there
  is a more efficient desugaring which \nperforms the choice at compile time and thus
  an `Arrow` suffices:\n```\n((processor >>> arr (\\ results -> (results, results)))
  >>>\n       (first\n          (if outputResultsArg then outputSink else arr (\\
  results -> ()))\n          >>> arr (\\ (_, results) -> results)))\n```\n\nComparison
  with **GHC**\n-----------------------\nThe GHC desugarer does not do a very good
  job of minimizing the number of\n`first` calls inserted. In certain `Arrow` instances,
  this can have a material effect\non performance. Example:\n```\ntrivial = proc inputs
  -> do\n   chunked <- chunk -< inputs\n   results <- process -< chunked\n   returnA
  -< results\n```\nThis code ought to desugar to a chain of arrows, and indeed, both
  arrowp and\narrowp-qq desugar this to:\n```\ntrivial = chunk >>> process\n```\nHowever
  GHC will produce (approximately) the following code:\n```\n  arr(\\inputs -> (inputs,inputs))
  >>> first chunk >>> first process >>> arr fst\n```\n"
license-name: LicenseRef-GPL
