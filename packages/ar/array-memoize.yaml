homepage: ''
changelog-type: ''
hash: 2dc57f15e55ff320494704733bef5792c2404e9ad8bd5f0d3119abb9d36a31f6
test-bench-deps: {}
maintainer: Dominic Orchard
synopsis: Memoization combinators using arrays for finite sub-domains of functions
changelog: ''
basic-deps:
  base: <5
  array: ! '>=0.4'
all-versions:
- 0.5.0
- 0.6.0
author: Dominic Orchard
latest: 0.6.0
description-type: haddock
description: ! 'Memoization combinators are great for providing high-performance Haskell
  programs,

  but they can be even faster if memoization is performed on a finite, discrete domain

  since an array can then be used to store results.


  This package provides various combinators for doing just this, including also

  combinators for quanitzing and discretizing Float/Double-valued functions.


  Example:


  @

  fib'' :: (Int -> Int) -> Int -> Int

  fib'' _ 0 = 1

  fib'' _ 1 = 1

  fib'' rec n = rec (n - 1) + rec (n - 2)

  fib :: Int -> Int

  fib = arrayMemoFix (0, 1000) fib''

  @'
license-name: BSD-3-Clause
