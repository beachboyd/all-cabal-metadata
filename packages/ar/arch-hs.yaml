homepage: https://github.com/berberman/arch-hs
changelog-type: markdown
hash: 2cf08022fcd041cd631a3a9eec87cb54cf23d088724efc3a6c5211e4c5e82e84
test-bench-deps: {}
maintainer: berberman <1793913507@qq.com>
synopsis: Distribute hackage packages to archlinux
changelog: |
  # Changelog

  `arch-hs` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.3.0.0

  * Update name preset

  * Add check in submit

  ## 0.2.0.0

  * More accurate naming conversion between hackage representation and archlinux representation, according to [NAME_PRESET.json](https://github.com/berberman/arch-hs/blob/master/data/NAME_PRESET.json)

  * Clearer project structure

  * More reasonable exceptions

  * Provide versions of haskell packages in archlinux community

  * Add `arch-hs-submit` executable

  ## 0.1.1.0

  * Add uusi option

  ## 0.1.0.0

  * Support sub-libraries ([#16](https://github.com/berberman/arch-hs/issues/16))

  * Split `arch-hs-uusi` into [`uusi`](https://github.com/berberman/uusi)

  * Better performance in dependency resolving

  * Fix recommended package order

  * Trace for dependency resolving

  * More reasonable PKGBUILD template ([#17](https://github.com/berberman/arch-hs/issues/16) [#18](https://github.com/berberman/arch-hs/issues/16) [#19](https://github.com/berberman/arch-hs/issues/16) [#20](https://github.com/berberman/arch-hs/issues/16))

  * Fix indentation of flags' pretty printing

  ## 0.0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/berberman/arch-hs/releases
basic-deps:
  microlens-th: '>=0.4.3 && <0.5'
  bytestring: '>=0.10.10 && <0.11'
  split: '>=0.2.3 && <0.3'
  Cabal: '>=3.2.0 && <3.3'
  base: '>=4.14.0 && <4.15'
  text: '>=1.2.3 && <1.3'
  megaparsec: '>=8.0.0 && <8.1'
  filepath: '>=1.4.2 && <1.5'
  req: '>=3.6.0 && <3.7'
  conduit: '>=1.3.2 && <1.4'
  arch-hs: -any
  conduit-extra: '>=1.3.5 && <1.4'
  hackage-db: '>=2.1.0 && <2.2'
  containers: '>=0.6.2 && <0.7'
  tar-conduit: '>=0.3.2 && <0.4'
  colourista: ==0.1.*
  polysemy: '>=1.3.0 && <1.4'
  optparse-applicative: '>=0.15.1 && <0.16'
  deepseq: '>=1.4.4 && <1.5'
  algebraic-graphs: ==0.5.*
  microlens: '>=0.4.11 && <0.5'
  aeson: '>=1.5.4 && <1.6'
  template-haskell: '>=2.16.0 && <2.17'
  neat-interpolation: '>=0.5.1 && <0.6'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
author: berberman
latest: 0.3.0.0
description-type: markdown
description: "# arch-hs\n\n[![GitHub CI](https://github.com/berberman/arch-hs/workflows/CI/badge.svg)](https://github.com/berberman/arch-hs/actions)\n[![Build
  Status](https://travis-ci.com/berberman/arch-hs.svg?branch=master)](https://travis-ci.com/berberman/arch-hs)\n[![Hackage](https://img.shields.io/hackage/v/arch-hs.svg?logo=haskell)](https://hackage.haskell.org/package/arch-hs)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nA program
  generating PKGBUILD for hackage packages. Special thanks to [felixonmars](https://github.com/felixonmars/).\n\n**Notice
  that `arch-hs` will always support only the latest GHC version.**\n\n\n## Introduction\n\nGiven
  the name of a package in hackage, `arch-hs` can generate PKGBUILD files, not only
  for the package\nwhose name is given, but also for all dependencies missing in [community](https://www.archlinux.org/packages/).\n`arch-hs`
  has a naive built-in dependency solver, which can fetch those dependencies and find
  out which are required to be packaged.\nDuring the dependency calculation, all version
  constraints will be discarded due to the arch haskell packaging strategy,\nthus
  there is no guarantee of dependencies' version consistency.\n\n## Prerequisite\n\n`arch-hs`
  is just a PKGBUILD text file generator, which is not integrated with `pacman`, depending
  on nothing than:\n\n* Pacman database (`community.db`)\n\n* Hackage index tarball
  (`01-index.tar`, or `00-index.tar` previously) -- usually provided by `cabal-install`\n\n##
  Installation\n\nBoth `arch-hs` and `arch-hs-diff` are portable, which means that
  they are not restricted to Arch Linux.\nHowever, if you want to run them in other
  systems, you have to build them from source.\n\n### Install the latest release\n\n```\n#
  pacman -S arch-hs\n```\n\n`arch-hs` is available in [community](https://www.archlinux.org/packages/community/x86_64/arch-hs/),
  so you can install it using `pacman`.\n\n### Install the development version\n\n```\n#
  pacman -S arch-hs-git\n```\n\nThe `-git` version is available in [archlinuxcn](https://github.com/archlinuxcn/repo),
  following the latest git commit.\n\n## Build\n\n```\n$ git clone https://github.com/berberman/arch-hs\n```\n\nThen
  build it via stack or cabal.\n\n#### Stack\n```\n$ stack build\n```\n\n#### Cabal
  (dynamic)\n```\n$ cabal configure --disable-library-vanilla --enable-shared --enable-executable-dynamic
  --ghc-options=-dynamic \n$ cabal build\n```\n\n## Usage\n\nJust run `arch-hs` in
  command line with options and a target. Here is an example:\nwe will create the
  archlinux package of [accelerate](https://hackage.haskell.org/package/accelerate):\n\n```\n$
  arch-hs -o ~/test accelerate\n\n......\n\n  ⓘ Recommended package order (from topological
  sort):\n1. unique\n2. tasty-kat\n3. accelerate\n\n......\n\n  ⓘ Write file: /home/berberman/test/haskell-accelerate/PKGBUILD\n
  \ ⓘ Write file: /home/berberman/test/haskell-unique/PKGBUILD\n  ⓘ Write file: /home/berberman/test/haskell-tasty-kat/PKGBUILD\n
  \ ✔ Success!\n\n```\n\nThis message tells us that in order to package `accelerate`,
  we must package `unique`\nand `tasty-kat` first sequentially, because `accelerate`
  dependents on them to build or test,\nwhereas they are not present in archlinux
  community repo.\n\n```\n$ tree ~/test\n/home/berberman/Desktop/test\n├── haskell-accelerate\n│
  \  └── PKGBUILD\n├── haskell-tasty-kat\n│   └── PKGBUILD\n└── haskell-unique\n    └──
  PKGBUILD\n```\n\n`arch-hs` will generate PKGBUILD for each package. Let's see what
  we have in `./haskell-accelerate/PKGBUILD`:\n\n``` bash\n# This file was generated
  by arch-hs, please check it manually.\n# Maintainer: Your Name <youremail@domain.com>\n\n_hkgname=accelerate\npkgname=haskell-accelerate\npkgver=1.3.0.0\npkgrel=1\npkgdesc=\"An
  embedded language for accelerated array processing\"\nurl=\"https://github.com/AccelerateHS/accelerate/\"\nlicense=(\"custom:BSD3\")\narch=('x86_64')\ndepends=('ghc-libs'
  'haskell-ansi-terminal' 'haskell-base-orphans' 'haskell-cryptonite' 'haskell-half'
  'haskell-hashable' 'haskell-hashtables' 'haskell-hedgehog' 'haskell-lens' 'haskell-prettyprinter'
  'haskell-prettyprinter-ansi-terminal' 'haskell-primitive' 'haskell-tasty' 'haskell-terminal-size'
  'haskell-unique' 'haskell-unordered-containers' 'haskell-vector')\nmakedepends=('ghc'
  'haskell-doctest')\nsource=(\"https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz\")\nsha256sums=('4b97161f145c81f7554679802059598587e06d49b2c153e7bafc4dd6974bad92')\n\nbuild()
  {\n  cd $_hkgname-$pkgver\n\n  runhaskell Setup configure -O --enable-shared --enable-executable-dynamic
  --disable-library-vanilla \\\n    --prefix=/usr --docdir=/usr/share/doc/$pkgname
  --enable-tests \\\n    --dynlibdir=/usr/lib --libsubdir=\\$compiler/site-local/\\$pkgid
  \\\n    --ghc-option=-optl-Wl\\,-z\\,relro\\,-z\\,now \\\n    --ghc-option='-pie'\n\n
  \ runhaskell Setup build\n  runhaskell Setup register --gen-script\n  runhaskell
  Setup unregister --gen-script\n  sed -i -r -e \"s|ghc-pkg.*update[^ ]* |&'--force'
  |\" register.sh\n  sed -i -r -e \"s|ghc-pkg.*unregister[^ ]* |&'--force' |\" unregister.sh\n}\n\ncheck()
  {\n  cd $_hkgname-$pkgver\n  runhaskell Setup test\n}\n\npackage() {\n  cd $_hkgname-$pkgver\n\n
  \ install -D -m744 register.sh \"$pkgdir\"/usr/share/haskell/register/$pkgname.sh\n
  \ install -D -m744 unregister.sh \"$pkgdir\"/usr/share/haskell/unregister/$pkgname.sh\n
  \ runhaskell Setup copy --destdir=\"$pkgdir\"\n  install -D -m644 LICENSE -t \"$pkgdir\"/usr/share/licenses/$pkgname/\n
  \ rm -f \"$pkgdir\"/usr/share/doc/$pkgname/LICENSE\n}\n```\n\n`arch-hs` will collect
  the information from hackage db, and apply it into a fixed template after some processing
  steps\nincluding renaming, matching license, and filling out dependencies etc.\nHowever,
  packaging haven't been done so far.\n`arch-hs` may does well statically, but we
  should guarantee that this package can be built by ghc with the latest dependencies;\nhence
  some patchs may be required in `prepare()`, such as [uusi](#Uusi).\n\n\n## Options\n\n###
  Output\n\n```\n$ arch-hs -o ~/test TARGET\n```\n\nUsing `-o` can generate a series
  of PKGBUILD including `TARGET` with its dependencies into the output dir. If you
  don't pass it, only dependency calculation will occur.\n\n### Flag Assignments\n```\n$
  arch-hs -f TARGET:FLAG_A:true TARGET\n```\n\nUsing `-f` can pass flags, which may
  affect the results of resolving.  \n\n### AUR Searching\n\n```\n$ arch-hs -a TARGET\n```\n\nWith
  `-a`, `arch-hs` will regard AUR as another package provider, and it will try to
  search missing packages in AUR as well.\n\n### Skipping Components\n\n```\n$ arch-hs
  -s COMPONENT_A TARGET\n```\n\nUsing `-s` can force skip runnable components in dependency
  resolving.\nThis is useful when a package doesn't provide flag to disable its runnables,
  which will be built by default but are trivial in system level packaging.\nNotice
  that this only makes sense in the lifetime of `arch-hs`, whereas generated PKGBUILD
  and actual build processes will not be affected.\n\n### Extra Cabal Files\n\n```\n$
  arch-hs -e ~/TARGET/TARGET.cabal TARGET\n```\n\n**For Testing Purposes Only**\n\nUsing
  `-e` can include extra `.cabal` files as supplementary. Useful when the `TARGET`
  hasn't been released to hackage.\n\n### Trace\n\n```\n$ arch-hs --trace TARGET\n```\n\nWith
  `--trace`, `arch-hs` can print the process of dependency resolving into stdout.\n\n```\n$
  arch-hs --trace-file foo.log TARGET\n```\n\nSimilar to `--trace`, but the log will
  be written into a file.\n\n### Uusi\n\n```\n$ arch-hs -o ~/test --uusi TARGET\n```\n\nWith
  `--uusi`, `arch-hs` will generate following snippet for each package:\n\n```bash\nprepare()
  {\n  uusi $_hkgname-$pkgver/$_hkgname.cabal\n}\n```\n\nSee [uusi](https://hackage.haskell.org/package/uusi)
  for details.\n\n### Help\n\n```\n$ arch-hs --help\narch-hs - a program generating
  PKGBUILD for hackage packages.\n\nUsage: arch-hs [-h|--hackage PATH] [-c|--community
  PATH] [-o|--output PATH] \n               [-f|--flags package_name:flag_name:true|false,...]
  \n               [-s|--skip component_name,...] [-e|--extra PATH_1,...] [-a|--aur]\n
  \              [--trace] [--trace-file PATH] [--uusi] TARGET\n  Try to reach the
  TARGET QAQ.\n\nAvailable options:\n  -h,--hackage PATH        Path to hackage index\n
  \                          tarball (default: \"~/.cabal/packages/YOUR_HACKAGE_MIRROR/01-index.tar
  | 00-index.tar\")\n  -c,--community PATH      Path to\n                           community.db
  (default: \"/var/lib/pacman/sync/community.db\")\n  -o,--output PATH         Output
  path to generated PKGBUILD files (empty means\n                           dry run)\n
  \ -f,--flags package_name:flag_name:true|false,...\n                           Flag
  assignments for packages - e.g.\n                           inline-c:gsl-example:true
  (separated by ',')\n  -s,--skip component_name,...\n                           Skip
  a runnable component (executable, test suit, or\n                           benchmark)
  in dependency calculation\n  -e,--extra PATH_1,...    Extra cabal files' path -
  e.g.\n                           /home/berberman/arch-hs/arch-hs.cabal\n  -a,--aur
  \                Enable AUR searching\n  --trace                  Print trace to
  stdout\n  --trace-file PATH        Path to trace file (empty means do not write
  trace to\n                           file)\n  --uusi                   Splicing
  uusi into prepare()\n  -h,--help                Show this help text\n\n```\n\nFor
  all available options, have a look at the help message.\n\n\n## [Name preset](https://github.com/berberman/arch-hs/blob/master/data/NAME_PRESET.json)\n\nTo
  distribute a haskell package to archlinux, the name of package should be changed
  according to the naming convention:\n\n* for haskell libraries, their names must
  have `haskell-` prefix\n\n* for programs, it depends on circumstances\n\n* names
  should always be in lower case\n\nHowever, it's not enough to prefix the string
  with `haskell-` and transform to lower case; in some special situations, the hackage
  name\nmay have `haskell-` prefix already, or the case is irregular, thus we have
  to a name preset manually. Once a package distributed to archlinux,\nwhose name
  conform to above-mentioned situation, the name preset should be upgraded correspondingly.\n\n##
  Diff\n\n`arch-hs` also provides a component called `arch-hs-diff`. `arch-hs-diff`
  can show the differences of package description between two versions of a package.\nThis
  is useful in the subsequent maintenance of a package. Example:\n\n```\n$ arch-hs-diff
  HTTP 4000.3.14 4000.3.15\n  ▶ You didn't pass -f, different flag values may make
  difference in dependency resolving.\n  ⓘ Start running...\n  ⓘ Downloading cabal
  file from https://hackage.haskell.org/package/HTTP-4000.3.14/revision/0.cabal...\n
  \ ⓘ Downloading cabal file from https://hackage.haskell.org/package/HTTP-4000.3.15/revision/0.cabal...\nPackage:
  HTTP\nVersion: 4000.3.14  ⇒  4000.3.15\nSynopsis: A library for client-side HTTP\nURL:
  https://github.com/haskell/HTTP\nDepends:\n    base  >=4.3.0.0 && <4.14\n    time
  \ >=1.1.2.3 && <1.10\n    array  >=0.3.0.2 && <0.6\n    bytestring  >=0.9.1.5 &&
  <0.11\n    mtl  >=2.0 && <2.3\n    network  >=2.6 && <3.2\n    network-uri  ==2.6.*\n
  \   parsec  >=2.0 && <3.2\n--------------------------------------\n    base  >=4.3.0.0
  && <4.15\n    time  >=1.1.2.3 && <1.11\n    array  >=0.3.0.2 && <0.6\n    bytestring
  \ >=0.9.1.5 && <0.11\n    mtl  >=2.0 && <2.3\n    network  >=2.6 && <3.2\n    network-uri
  \ ==2.6.*\n    parsec  >=2.0 && <3.2\nMakeDepends:\n    HUnit  >=1.2.0.1 && <1.7\n
  \   deepseq  >=1.3.0.0 && <1.5\n    httpd-shed  >=0.4 && <0.5\n    mtl  >=1.1.1.0
  && <2.3\n    pureMD5  >=0.2.4 && <2.2\n    split  >=0.1.3 && <0.3\n    test-framework
  \ >=0.2.0 && <0.9\n    test-framework-hunit  >=0.3.0 && <0.4\nFlags:\n  HTTP\n    ⚐
  mtl1:\n      description:\n        Use the old mtl version 1.\n      default: False\n
  \     isManual: False\n    ⚐ warn-as-error:\n      description:\n        Build with
  warnings-as-errors\n      default: False\n      isManual: True\n    ⚐ conduit10:\n
  \     description:\n        Use version 1.0.x or below of the conduit package (for
  the test suite)\n      default: False\n      isManual: False\n    ⚐ warp-tests:\n
  \     description:\n        Test against warp\n      default: False\n      isManual:
  True\n    ⚐ network-uri:\n      description:\n        Get Network.URI from the network-uri
  package\n      default: True\n      isManual: False\n\n\n  ✔ Success!\n```\n\n`arch-hs-diff`
  does not require hackage db, it downloads cabal files from hackage server instead.
  \n\n## Submit\n\nFor hackage distribution maintainers only.\n\n## Limitations\n\n*
  The dependency solver will **ONLY** expand the dependencies of *executables* , *libraries*
  and *sub-libraries* recursively, because\ncircular dependency lies ubiquitously
  involving *test suites* and their *buildTools*. `arch-hs` is not able to handle
  with complicated situations:\nthe libraries of a package partially exist in hackage,
  some libraries include external sources, etc. \n\n* Currently, `arch-hs`'s functionality
  is limited to dependency processing, whereas necessary procedures like\nfile patches,
  loose of version constraints, etc. are need to be done manually, so **DO NOT** give
  too much trust in generated PKGBUILD files.\n\n## ToDoList\n\n- [ ] **Standardized
  pretty printing**.\n\n- [x] AUR support.\n\n- [x] Working with given `.cabal` files
  which haven't been released to hackage.\n\n- [ ] Using `hackage-security` to manage
  hackage index tarball.\n\n\n## Contributing\n\nIssues and PRs are always welcome.
  **\\_(:з」∠)\\_**\n"
license-name: MIT
