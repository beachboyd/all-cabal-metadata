homepage: https://github.com/mstksg/typelits-witnesses
changelog-type: markdown
hash: a9d35bf0dbc6365c254b231cea44d47674c58e00288a794cf9d7afc6642676bf
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Existential witnesses, singletons, and classes for operations on GHC TypeLits
changelog: ! "Version 0.3.0.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.3.0.0>\n\n*
  \  Added extra witnesses inside the constructors of `(:<=?)`.\n*   Allowed functions
  to polymorphically expect `p n` instead of `Proxy n`\n    whenever possible.\n*
  \  Soft deprecation of *GHC.TypeLits.Witnesses*, in case people want to use\n    the
  functionality of *singletons* without the full library.\n*   Formal deprecation
  of *GHC.TypeLits.List*, with migration information,\n    because it's just so much
  more unweidly than using *singletons*.\n\nVersion 0.2.3.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.3.0>\n\n*
  \  Added the `GHC.TypeLits.Compare` module for refining bounds and proving\n    inequalities
  on `KnownNat`s and associated utility functions.\n\nVersion 0.2.2.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.2.0>\n\n*
  \  Removed redundant `KnownNats` and `KnownSymbols` constraints for `sameNats`\n
  \   and `sameSymbols`.\n\nVersion 0.2.1.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.1.0>\n\n*
  \  Added \"eliminators\", a staple of dependently typed programming, for\n    `NatList`
  and `SymbolList`.\n\nVersion 0.2.0.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.0.0>\n\n*
  \  **Breaking**: Changed the name of `someNatsVal'` to `someNatsValPos`, to\n    break
  away from the \"just add `'`\" anti-pattern and to make the function\n    name a
  bit more meaningful.\n\n*   Added `reifyNats'`, a \"safe\" version of `reifyNats`.
  \ Ideally,\n    `reifyNats` should be the safe one, but its connection to `reifyNat`
  from\n    the *reflection* package is very strong and worth preserving, I think.\n\nVersion
  0.1.2.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.2.0>\n\n*
  \  Added `mapNatList'` and `mapSymbolList'` companions to `mapNatList` and\n    `mapSymbolList`;
  they use `NatList` and `SymbolList` instead of Rank-2\n    types, so they can work
  better with function composition with `(.)` and\n    other things that Rank-2 types
  would have trouble with.\n\n*   Added `sameNats` and `sameSymbols`, modeled after
  `sameNat` and\n    `sameSymbol`.  They provide witnesses to GHC that `KnownNat`s
  passed in\n    are both the same.\n\nVersion 0.1.1.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.1.0>\n\n*
  \  Added strict fields to `NatList`, `SomeNats`, `SymbolList`, and\n    `SomeSymbols`.
  \ It really doesn't make any sense for them to be lazy.\n\nVersion 0.1.0.1\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.0.1>\n\n*
  \  Added README to the cabal package as an extra source file, for viewing on\n    Hackage.\n\nVersion
  0.1.0.0\n===============\n\n<https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.0.0>\n\n*
  \  Initial version.\n\n"
basic-deps:
  reflection: ! '>=2'
  base: ! '>=4.7 && <5'
  constraints: -any
  base-compat: -any
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.3.0'
- '0.3.0.0'
author: Justin Le
latest: '0.3.0.0'
description-type: markdown
description: ! "typelits-witnesses\n==================\n\n[![typelits-witnesses on
  Hackage](https://img.shields.io/hackage/v/typelits-witnesses.svg?maxAge=2592000)](https://hackage.haskell.org/package/typelits-witnesses)\n[![typelits-witnesses
  on Stackage LTS](http://stackage.org/package/typelits-witnesses/badge/lts)](http://stackage.org/lts/package/typelits-witnesses)\n[![typelits-witnesses
  on Stackage Nightly](http://stackage.org/package/typelits-witnesses/badge/nightly)](http://stackage.org/nightly/package/typelits-witnesses)\n[![Build
  Status](https://travis-ci.org/mstksg/typelits-witnesses.svg?branch=master)](https://travis-ci.org/mstksg/typelits-witnesses)\n\n\nProvides
  witnesses for `KnownNat` and `KnownSymbol` instances for various\noperations on
  GHC TypeLits --- in particular, the arithmetic operations\ndefined in `GHC.TypeLits`,
  and also for type-level lists of `KnownNat` and\n`KnownSymbol` instances.\n\nThis
  is useful for situations where you have `KnownNat n`, and you want to\nprove to
  GHC `KnownNat (n + 3)`, or `KnownNat (2*n + 4)`.\n\nIt's also useful for when you
  want to work with type level lists of\n`KnownNat`/`KnownSymbol` instances and singletons
  for traversing them, and be\nable to apply analogies of `natVal`/`symbolVal` to
  lists with analogies for\n`SomeNat` and `SomeSymbol`.\n\nNote that most of the functionality
  in this library can be reproduced in a more\ngeneric way using the great [singletons][]
  library.  The versions here are\nprovided as a \"plumbing included\" alternative
  that makes some commonly found\ndesign patterns involving GHC's TypeLits functionality
  a little smoother,\nespecially when working with external libraries or GHC TypeLit's
  `Nat`\ncomparison API.\n\n[singletons]: https://hackage.haskell.org/package/singletons\n\nGHC.TypeLits.Compare\n--------------------\n\nProvides
  tools for refining upper and lower bounds on `KnownNat`s and proving\ninequalities
  involving *GHC.TypeLits*'s comparison API. (Both with `<=?` and\n`CmpNat`).\n\nIf
  a library function requires `1 <= n` constraint, but only `KnownNat n` is\navailable:\n\n~~~haskell\nfoo
  :: (KnownNat n, 1 <= n) => Proxy n -> Int\n\nbar :: KnownNat n => Proxy n -> Int\nbar
  n = case Proxy @1 %<=? n of\n          LE  Refl -> foo n\n          NLE _    ->
  0\n~~~\n\n`foo` requires that `1 <= n`, but `bar` has to handle all cases of `n`.
  \ `%<=?`\nlets you compare the `KnownNat`s in two `Proxy`s and returns a `:<=?`,
  which\nhas two constructors, `LE` and `NLE`.\n\nIf you pattern match on the result,
  in the `LE` branch, the constraint\n`1 <= n` will be satisfied according to GHC,
  so `bar` can safely call\n`foo`, and GHC will recognize that `1 <= n`.\n\nIn the
  `NLE` branch, the constraint that `1 > n` is satisfied, so any\nfunctions that require
  that constraint would be callable.\n\nFor convenience, `isLE` and `isNLE` are also
  offered:\n\n~~~haskell\nbar :: KnownNat n => Proxy n -> Int\nbar n = case Proxy
  @1 `isLE` n of\n          Just Refl -> foo n\n          Nothing   -> 0\n~~~\n\nSimilarly,
  if a library function requires something involving `CmpNat`,\nyou can use `cmpNat`
  and the `SCmpNat` type:\n\n~~~haskell\nfoo1 :: (KnownNat n, CmpNat 5 n ~ LT) =>
  Proxy n -> Int\nfoo2 :: (KnownNat n, CmpNat 5 n ~ GT) => Proxy n -> Int\n\nbar ::
  KnownNat n => Proxy n -> Int\nbar n = case Proxy @5 `cmpNat` n of\n          CLT
  Refl -> foo1 n\n          CEQ _    -> 0\n          CGT Refl -> foo2 n\n~~~\n\nYou
  can use the `Refl` that `cmpNat` gives you with `flipCmpNat` and\n`cmpNatLE` to
  \"flip\" the inequality or turn it into something compatible\nwith `<=?` (useful
  for when you have to work with libraries that mix the\ntwo methods) or `cmpNatEq`
  and `eqCmpNat` to get to/from witnesses for\nequality of the two `Nat`s.\n\n\nGHC.TypeLits.Witnesses\n----------------------\n\n**SOFT
  DEPRECATED**: Use *[singletons][]* library instead!  However, this\nmodule is still
  here in case people want the functionality of *singletons*\nwithout requiring the
  entire library.\n\nProvides witnesses for instances arising from the arithmetic
  operations\ndefined in `GHC.TypeLits`.\n\nIn general, if you have `KnownNat n`,
  GHC can't infer `KnownNat (n + 1)`;\nand if you have `KnownNat m`, as well, GHC
  can't infer `KnownNat (n + m)`.\n\nThis can be extremely annoying when dealing with
  libraries and applications\nwhere one regularly adds and subtracts type-level nats
  and expects `KnownNat`\ninstances to follow.  For example, vector concatenation
  of length-encoded\nvector types can be:\n\n~~~haskell\nconcat :: (KnownNat n, KnownNat
  m)\n       => Vector n       a\n       -> Vector m       a\n       -> Vector (n
  + m) a\n~~~\n\nBut, `n + m` now does not have a `KnownNat` instance, which severely
  hinders\nwhat you can do with this!\n\nConsider this concrete (but silly) example:\n\n~~~haskell\ngetDoubled
  :: KnownNat n => Proxy n -> Integer\ngetDoubled p = natVal (Proxy @(n * 2))\n~~~\n\nWhich
  is supposed to call `natVal` with `n * 2`.  However, this fails, because\nwhile
  `n` is a `KnownNat`, `n * 2` is not necessarily so.  This module lets\nyou re-assure
  GHC that this is okay.\n\nThe most straightforward/high-level usage is with `withNatOp`:\n\n~~~haskell\ngetDoubled
  :: forall n. KnownNat n => Proxy n -> Integer\ngetDoubled p = withNatOp (%*) p (Proxy
  @2) $\n    natVal (Proxy @(n * 2))\n~~~\n\nWithin the scope of the argument of\n`withNatOp
  (%*) (Proxy @n) (Proxy @m)`, `n * m` is an instance\nof `KnownNat`, so you can use
  `natVal` on it, and get the expected result:\n\n~~~haskell\n> getDoubled (Proxy
  @12)\n24\n~~~\n\nThere are four \"nat operations\" defined here, corresponding to
  the four\ntype-level operations on `Nat` provided in `GHC.TypeLits`: `(%+)`, `(%-)`,\n`(%*)`,
  and `(%^)`, corresponding to addition, subtraction, multiplication, and\nexponentiation,
  respectively.\n\nNote that `(%-)` is implemented in a way that allows for the result
  to be a\n*negative* `Nat`.\n\nThere are more advanced operations dealing with low-level
  machinery, as well,\nin the module.  See module documentation for more detail.\n\n###
  Singletons replacement\n\nThis module is deprecated, and it is recommended you use
  the functionality from\nthe *[singletons][]* package instead.  A direct translation
  using `Proxy` would\nbe:\n\n~~~haskell\ngetDoubled :: forall n. KnownNat n => Proxy
  n -> Integer\ngetDoubled p = withKnownNat (SNat @n %:* SNat @2) $\n    natVal (Proxy
  @(n * 2))\n~~~\n\nBut one using singletons throughout the whole process would be:\n\n~~~haskell\ngetDoubled
  :: forall n. KnownNat n => Sing n -> Integer\ngetDoubled s = withKnownNat (s %:*
  SNat @2) $\n    natVal (Proxy @(n * 2))\n~~~\n\n\nGHC.TypeLits.List\n-------------------\n\n**HARD
  DEPRECATED: Use *[singletons][]* library instead!  This module is\nextremely unweildy,
  and using *singletons* is much, much smoother on many\nlevels, and integrates everything
  together in a nice way.  This module will\nlikely be removed in a future version.\n\nProvides
  analogies of `KnownNat`, `SomeNat`, `natVal`, etc., to type-level\nlists of `KnownNat`
  instances, and also singletons for iterating over\ntype-level lists of `Nat`s and
  `Symbol`s.\n\nIf you had `KnownNats ns`, then you have two things you can do with
  it; first,\n`natsVal`, which is like `natVal` but for type-level lists of `KnownNats`:\n\n~~~haskell\n>
  natsVal (Proxy @[1,2,3])\n[1,2,3]\n~~~\n\nAnd more importantly, `natsList`, which
  provides singletons that you can\npattern match on to \"reify\" the structure of
  the list, getting a `Proxy n` for\nevery item in the list with a `KnownNat`/`KnownSymbol`
  instance in scope for\nyou to use:\n\n~~~haskell\nprintNats :: NatList ns -> IO
  ()\nprintNats nl = case nl of\n                 ØNL       ->\n                   return
  ()\n                 p :># nl' -> do\n                   print $ natVal p\n                   printNats
  nl'\n~~~\n\n~~~haskell\n> printNats (natsList :: @[1,2,3])\n1\n2\n3\n~~~\n\nWithout
  this, there is no way to \"iterate over\" and \"access\" every `Nat` in a\nlist
  of `KnownNat`s.  You can't \"iterate\" over `[1,2,3]` in `Proxy [1,2,3]`,\nbut you
  can iterate over them in `NatList [1,2,3]`.\n\nThis module also lets you \"reify\"
  lists of `Integer`s or `String`s into\n`NatList`s and `SymbolList`s, so you can
  access them at the type level for\nsome dependent types fun.\n\n~~~haskell\n> reifyNats
  [1,2,3] $ \\nl -> do\n    print nl\n    printNats nl\nProxy :<# Proxy :<# Proxy
  :<# ØNL\n1\n2\n3\n~~~\n\nAnother thing you can do is provide witneses that two `[Nat]`s
  or `[Symbol]`s\nare the same/were instantiated with the same numbers/symbols.\n\n~~~haskell\n>
  reifyNats [1,2,3] $ \\ns -> do\n  reifyNats [1,2,3] $ \\ms -> do\n    case sameNats
  ns ms of\n      Just Refl -> -- in this branch, ns and ms are the same.\n      Nothing
  \  -> -- in this branch, they aren't\n~~~\n\nThe above would match on the `Just
  Refl` branch.\n\nSee module documentation for more details and variations.\n\n###
  Singletons replacement\n\nThis module is deprecated, and it is recommended you use
  the functionality from\nthe *[singletons][]* package instead.  `natsVal` is `fromSing`,
  `reifyNats` is\n`toSing`/`withSomeSing`, `sameNats` is simply `%~`, and you can
  traverse/reify\nsingletons of lists too:\n\n~~~haskell\nprintNats :: forall (ns
  :: [Nat]). Sing ns -> IO ()\nprintNats ss = case ss of\n                 SNil             ->\n
  \                  return ()\n                 s `SCons` ss' -> do\n                   print
  $ fromSing s\n                   printNats ss'\n~~~\n\n"
license-name: MIT
