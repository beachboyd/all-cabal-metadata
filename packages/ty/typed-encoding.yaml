homepage: https://github.com/rpeszek/typed-encoding#readme
changelog-type: markdown
hash: 6b28b37c2da5e264f9b35882bb4439c4fe4e1cda24b5184348676ab9441af981
test-bench-deps:
  bytestring: ==0.10.*
  base: '>=4.7 && <5'
  base64-bytestring: ==1.0.*
  text: ==1.2.*
  doctest: '>=0.16 && <0.17'
  quickcheck-instances: '>=0.3.20 && <0.4'
  typed-encoding: -any
  doctest-discover: '>=0.2 && <0.3'
  QuickCheck: '>=2.13.1 && <2.14'
maintainer: robpeszek@gmail.com
synopsis: Type safe string transformations
changelog: "# Changelog for typed-encoding\n\n## 0.1.0.0\n - initial release\n \n"
basic-deps:
  bytestring: '>=0.10 && <0.11'
  base: '>=4.7 && <5'
  base64-bytestring: '>=1.0 && <1.1'
  text: '>=1.2 && <1.3'
all-versions:
- 0.1.0.0
author: Robert Peszek
latest: 0.1.0.0
description-type: markdown
description: "# typed-encoding\nType level annotations, string transformations, and
  other goodies that make programming strings safer.\n\n## Motivation\nI have recently
  spent a lot of time troubleshooting various `Base64`, `quoted-printable`, and `Utf8`
  encoding issues.  \nI decided to write a library that will help avoiding issues
  like these.\n\nThis library allows to specify and work with types like\n\n```Haskell\n--
  some data encoded in base 64\nmydata :: Enc '[\"enc-B64\"] ByteString\n\n-- some
  text (utf8) data encoded in base 64 \nmyData :: Enc '[\"enc-B64\", \"r-UTF8\"] ByteString\n```\n\nand
  provides ways for \n   - encoding\n   - decoding\n   - recreation (encoding validation)\n
  \  - type conversions\n\n... but this approach seems to be a bit more...\n\n```Haskell\n--
  upper cased text encoded as base64\nexample :: Enc '[\"enc-B64\", \"do-UPPER\"]
  () T.Text\nexample = encodeAll . toEncoding () $ \"some text goes here\"\n```\n\nIt
  becomes a type directed, declarative approach to string transformations.\n\nTransformations
  can be\n   - used with parameters.\n   - applied or undone partially (if encoding
  is reversible)\n \n## Examples \n\nPlease see `Examples.TypedEncoding` it the module
  list.\n \n## Dependencies on other encoding libs\n\nCurrently it uses\n   - `base64-bytestring`
  because it was my driving example\n   - I will try to separate other deps like `servant`,
  specific encoding libraries, etc into separate libs if there is interest. I consider
  orphan instances to be OK in this context. (GHC will classify them as such despite
  use of unique symbols.)\n\n## Plans, some TODOs\n   - lensifying conversions \n
  \  - better implementation type safety\n\n## Tested with\n   - stack (1.9.3) lts-14.27
  (ghc-8.6.5)\n\n## Known issues\n   - running test suite: cabal has problems with
  doctest, use stack  \n   https://github.com/haskell/cabal/issues/6087   "
license-name: BSD-3-Clause
