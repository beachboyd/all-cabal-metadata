homepage: https://github.com/rpeszek/typed-encoding#readme
changelog-type: markdown
hash: 9751fac04c829252b9196237aad19e8e712a024abf7e5074239ef5ad8c99bf50
test-bench-deps:
  bytestring: ==0.10.*
  base: '>=4.10 && <5'
  symbols: '>=0.3 && <0.3.1'
  base64-bytestring: ==1.0.*
  hspec: -any
  text: ==1.2.*
  doctest: '>=0.16 && <0.17'
  quickcheck-instances: '>=0.3.20 && <0.4'
  typed-encoding: -any
  doctest-discover: '>=0.2 && <0.3'
  QuickCheck: '>=2.13.1 && <2.14'
maintainer: robpeszek@gmail.com
synopsis: Type safe string transformations
changelog: "# Changelog for typed-encoding\n\n## Anticipated future breaking changes\n\n-
  `Data.TypedEncoding.Internal.Class.IsStringR` expected to be be changed / replaced\n-
  (post 0.3) \"enc-B64\" will be moved to a different package (more distant goal)\n\n##
  0.3\n\n- Breaking: Numerous changes on the implementation side, new version should
  be largely compatible on the call site except\n    for small differences in constraints
  and order for type variables (if `-XTypeApplications` is used).\n    See [v3 migration
  guide](https://github.com/rpeszek/typed-encoding/blob/master/doc/v3ConversionGuide.md).\n
  \ - `EncodeFAll`, `DecodeFAll`, `RecreateFAll`, `EncodeF`, `DecodeF`, `RecreateF`
  replaced with\n     `EncodeAll`, `DecodeAll`, `ValidateAll`, `Encode`, `Decode`,
  `Validate`.\n  - functions used to create encoding instances or encoding combinators
  (e.g. `implEncodeP`) are now more precisely typed\n  - `Displ String` instance (used
  in examples, has been made consistent with Text and ByteString)\n  - Modules under
  `Data.TypedEncoding.Combinators` merged into `Data.TypedEncoding.Instances`.\n  -
  Modules under `Data.TypedEncoding.Internal` have been reorganized and moved outside
  of `Internal`. Various  changes that make the library easier to navigate. \n    for
  better navigation and discovery.\n  - some previously exported combinators (e.g.
  `implTranF`) have moved to `Data.TypedEncoding.Instances.Support.Unsafe` \n  - `ToEncString`,
  `FromEncString` have more type variables and function name but backward compatible
  functions\n    have been provided.  \n  - `Superset` typeclass removed, replaced
  with `IsSuperset` type family.\n  - Minor changes in `forall` variable order in
  combinators for `\"r-bool:\"` encodings.\n  - `Encoder` type removed, replaced by
  `Encodings`.\n  - `checkWithValidationsEnc` combinator renamed to `check`\n  - (Considered
  private) `MkCheckedEnc` constructor became `UnsafeMkCheckedEnc`\n  - (Considered
  private) `MkEnc` constructor became `UnsafeMkEnc`\n \n- new functionality\n  - new
  types and typeclasses are based on both encoding name and algorithm name allowing\n
  \   typeclass definitions for open encodings like `\"r-ban:\"` that can contain
  arbitrary symbol literals. \n  - new set of combinators grouped into `_` (compiler
  decided algorithm), `'` (program specifies algorithm), and\n    `algorithm name
  ~ encoding name` categories  \n  - `above` combinator subsumes partial encoding
  / decoding combinators \n  - `EncodingSuperset` class added\n\n\n## 0.2.2 \n\n-
  Next version (0.3) will have number of breaking changes, some rethinking and a lot
  of cleanup,\n  this version preps for some of that (see section above)\n- Fixes\n
  \ - Conversions type safety issues\n  - new and corrected approach to conversions
  (all old conversion functions have been deprecated)\n  - corrected documentation
  in `Data.TypedEncoding.Combinators.Restriction.BoundedAlphaNums`\n- new functionality:\n
  \ - `Enc` versions for `pack`/ `unpack` for `Text` and `ByteString`. \n  - `Enc`
  versions of `decodeUtf8` / `encodeUtf8`\n  - new and corrected approach to conversions
  (all old conversion functions have been deprecated)\n  - `IsSuperset` type family
  with basic combinators deprecates `Superset` typeclass.\n  - more modules exported
  from `Data.TypedEncoding.Instances.Support` for instance and combinator creation\n
  \ - more utility type families `Data.TypedEncoding.Internal.Util.TypeLits` \n  -
  more utility combinators for creating encoding instances and combinators.\n  - String
  instance added in number of places, including for \"r-ASCII\" encoding\n  - few
  more support convenience functions.\n- deprecation warnings (see above) \n\n## 0.2.1.0\n\n-
  new functionality:\n  - bounded alpha-numeric restriction encodings (`r-ban`)\n
  \ - boolean algebra of encodings \n- minor improvements\n  - dropped IsString constraint
  from instances in `Data.TypedEncoding.Instances.Restriction.Common`\n  - added forall
  annotation to encodeAll and decodeAll\n\n## 0.2.0.0\n\n- breaking:\n  - Data.TypedEncoding.Instances
  modules reorganized\n  - Data.TypedEncoding.Internal.Class modules reorganized\n
  \ - Data.TypedEncoding.Internal.Utils module renamed\n  - Several TypeAnnotations
  friendly changes:\n      * Removed polymorphic kinds in most places\n      * Changed
  typeclass name from `Subset` to `Superset`\n      * flipped type parameters on FlattenAs,
  HasA typeclass functions\n      * Removed Proxy parameters from several methods
  (few methods have a '_' backward compatible version which still has them)\n- new
  functionality:\n  - `ToEncString` - class allowing to convert types to `Enc` encoded
  strings\n  - `FromEncString` - class reverses ToEncString\n  - `CheckedEnc` untyped
  version of `Enc` containing valid encoding\n  - `SomeEnc` existentially quantified
  version of `Enc` \n  - `UncheckedEnc` for working with not validated encoding\n
  \ - `RecreateExUnkStep` constructor added to RecreateEx\n  -  utility `IsStringR`
  - reverse to `IsString` class\n  -  utility `SymbolList` class\n- docs: \n  - ToEncString
  example\n\n\n## 0.1.0.0\n\n- initial release\n \n"
basic-deps:
  bytestring: '>=0.10 && <0.11'
  base: '>=4.10 && <5'
  symbols: '>=0.3 && <0.3.1'
  base64-bytestring: '>=1.0 && <1.1'
  text: '>=1.2 && <1.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
author: Robert Peszek
latest: 0.3.0.0
description-type: markdown
description: "# typed-encoding\nType level annotations, string transformations, and
  other goodies that make programming strings safer.\n\n## Motivation\nI have recently
  spent a lot of time troubleshooting various `Base64`, `quoted-printable`, and `UTF-8`
  encoding issues.  \nI decided to write a library that will help avoiding issues
  like these.\n\nThis library allows to specify and work with types like\n\n```Haskell\n--
  some data encoded in base 64\nmydata :: Enc '[\"enc-B64\"] ByteString\n\n-- some
  text (utf8) data encoded in base 64 \nmyData :: Enc '[\"enc-B64\", \"r-UTF8\"] ByteString\n```\n\nIt
  allows to define precise string content annotations like:\n\n```Haskell\nipaddr
  :: Enc '[\"r-IpV4\"] Text\n```\n\nand provides ways for \n\n- encoding\n- decoding\n-
  recreation (encoding validation)\n- type conversions\n- converting types to encoded
  strings\n- typesafe conversion of encoded strings to types\n\n... but this approach
  seems to be a bit more...\n\n```Haskell\n-- upper cased text encoded as base64\nexample
  :: Enc '[\"enc-B64\", \"do-UPPER\"] () T.Text\nexample = encodeAll . toEncoding
  () $ \"some text goes here\"\n```\n\nIt becomes a type directed, declarative approach
  to string transformations.\n\nTransformations can be\n\n- used with parameters\n-
  applied or undone partially (if encoding is reversible)\n\nOne of more interesting
  uses of this library are encoding restrictions.   \n(Arbitrary) bounded alpha-numeric
  (`r-ban`) restrictions \nand a simple annotation Boolean algebra are both provided.\n\n```Haskell\nphone
  :: Enc '[\"r-ban:999-999-9999\"] () T.Text\nphone = ...\n\n-- simple boolean algebra:\nphone'
  :: Enc '[\"boolOr:(r-ban:999-999-9999)(r-ban:(999) 999-9999)\"] () T.Text\nphone'
  = ...\n```\n\n\n## Examples \n\nPlease see `Examples.TypedEncoding` it the module
  list.\n\n## Other encoding packages\n\nMy approach will be to write specific encodings
  (e.g. _HTTP_) or wrap encodings from other packages using separate \"bridge\" projects.\n\nCurrently
  `typed-encoding` depends on\n\n- `base64-bytestring` because it was my driving example,
  this is likely to move out to a separate bridge project at some point. \n\nBridge
  work:\n\n- [typed-encoding-encoding](https://github.com/rpeszek/typed-encoding-encoding)
  bridges [encoding](https://github.com/dmwit/encoding) package\n\n## News \n\n- v0.3
  has numerous changes and improvements. \n\n## Tested with\n\n- stack (1.9.3) lts-14.27
  (ghc-8.6.5)\n- needs ghc >= 8.2.2, base >=4.10 for GHC.TypeLits support\n\n## Known
  issues\n\n- running test suite: cabal has problems with doctest, use stack  \n   https://github.com/haskell/cabal/issues/6087
  \  \n"
license-name: BSD-3-Clause
