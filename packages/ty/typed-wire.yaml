homepage: http://github.com/typed-wire/typed-wire#readme
changelog-type: ''
hash: c9a868bc1c710cde864efbf1255a9eda4293a0789a789ce030a7171a5915fbd4
test-bench-deps:
  bytestring: ! '>=0.10'
  HTF: ! '>=0.13'
  base: -any
  text: ! '>=1.2'
  typed-wire: -any
  filepath: ! '>=1.4'
  process: ! '>=1.2'
  temporary: ! '>=1.1'
  aeson: -any
  directory: ! '>=1.2.2'
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Language-independent type-safe communication
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  typed-wire: -any
  filepath: ! '>=1.4'
  gitrev: ! '>=1.1'
  parsec: ! '>=3.1'
  containers: ! '>=0.5'
  mtl: ! '>=2.2'
  optparse-applicative: -any
  http-types: ! '>=0.8.6'
  directory: ! '>=1.2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
author: Alexander Thiemann <mail@athiemann.net>
latest: 0.3.1.1
description-type: markdown
description: ! "typed-wire\n=====\n\n[![Build Status](https://travis-ci.org/typed-wire/typed-wire.svg)](https://travis-ci.org/typed-wire/typed-wire)\n[![Hackage](https://img.shields.io/hackage/v/typed-wire.svg)](http://hackage.haskell.org/package/typed-wire)\n\n##
  Intro\n\nHackage: [typed-wire](http://hackage.haskell.org/package/typed-wire)\nStackage:
  [typed-wire](https://www.stackage.org/package/typed-wire)\n\nLanguage independent
  type-safe communication\n\n## Motivation / WIP Notice\n\nHere are some details on
  the library:\n\n* I wrote this because I have more and more micro-service architectures.
  The simplest form is a Haskell (REST-Api) Backend talking with an Elm/Purescript/...
  frontend. I got really tired of defining all data types in Haskell, Elm, PureScript,
  ... and writing JSON parsing/serialization functions for them in all languages.
  typed-wire attempts to solve this/my problem: It generates type definitions and
  matching JSON parsing/serialization for all target languages from a definition file.
  It can also generate API definitions, but this feature is not finished yet.\n* It's
  not ready yet - it is still missing some planned features, testing and documentation\n*
  It's used in production at one of my projects to ensure DRY type-safe communication
  between an Elm client and a Haskell server (www.bahn-buddy.de , german)\n* If anyone
  thinks this is cool, needs it too and would like to help out please shoot me an
  email :-)\n\n## Cli Usage: twirec\n\n```sh\n$ twirec --help\nGenerate bindings using
  typed-wire for different languages\n\nUsage: twirec [--version] [-i|--include-dir
  DIR] [-e|--entrypoint MODULE-NAME]\n              [--hs-out DIR] [--elm-out DIR]
  [--purescript-out DIR]\n  Language-independent type-safe communication\n\nAvailable
  options:\n  -h,--help                Show this help text\n  --version                Show
  version and exit\n  -i,--include-dir DIR     Directory to search for modules\n  -e,--entrypoint
  MODULE-NAME\n                           Entrypoint for compiler\n  --hs-out DIR
  \            Generate Haskell bindings to specified dir\n  --elm-out DIR            Generate
  Elm bindings to specified dir\n  --purescript-out DIR     Generate PureScript bindings
  to specified dir\n\n```\n\n## Install\n\n* Using cabal: `cabal install typed-wire`\n*
  Using Stack: `stack install typed-wire`\n* From Source (cabal): `git clone https://github.com/typed-wire/typed-wire.git
  && cd typed-wire && cabal install`\n* From Source (stack): `git clone https://github.com/typed-wire/typed-wire.git
  && cd typed-wire && stack build`\n\n\n## Misc\n\n### Supported GHC Versions\n\n*
  7.10.2\n\n### License\n\nReleased under the MIT license.\n(c) 2015 - 2016 Alexander
  Thiemann <mail@athiemann.net>\n"
license-name: MIT
