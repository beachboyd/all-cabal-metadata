homepage: https://github.com/Lokidottir/typerbole
changelog-type: ''
hash: 62f89e02f7752d24111a37f753a4024f84828a4af7dc7de3af25d70d5b17981b
test-bench-deps:
  either: -any
  checkers: -any
  base: -any
  hspec: -any
  syb: -any
  typerbole: -any
  semigroups: -any
  containers: -any
  bifunctors: ! '>=5 && <5.3'
  QuickCheck: -any
maintainer: ma302fh@gold.ac.uk
synopsis: A typesystems library with exaggerated claims
changelog: ''
basic-deps:
  either: -any
  base: ! '>=4.7 && <5'
  megaparsec: -any
  syb: -any
  semigroups: -any
  containers: ! '>=0.5 && <0.6'
  lens: -any
  bifunctors: ! '>=5'
  generic-random: ==0.1.1.0
  fgl: ! '>=5.5 && <5.6'
  mtl: -any
  QuickCheck: -any
  data-ordlist: -any
  th-lift: -any
  template-haskell: -any
  safe: -any
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
author: Fionan Haralddottir
latest: 0.0.0.5
description-type: markdown
description: ! "# typerbole ![hackage](https://img.shields.io/hackage/v/typerbole.svg?style=flat-square)\n\nParameterized
  typesystems, lambda cube typeclasses, and typechecking interfaces.\n\n## Parameterized
  Typesystems\n\nLike how datatypes such as `List a` (`[a]`), `Set a`, `Tree a` etc.
  in haskell have a parameter for a contained type, this library is based on the idea
  that a datatype that represents expressions can have a parameter for a typesystem.\n\n###
  An Example: The Lambda Calculus\n\nAs an example, we can put together a datatype
  that represents the syntax for the Lambda Calculus:\n\n```haskell\ndata LambdaTerm
  c v t =\n      Variable v -- a variable bound by a lambda abstraction\n    | Constant
  c -- a constant defined outside of the term\n    | Apply (LambdaTerm c v t) (LambdaTerm
  c v t) -- an application of one term to another\n    | Lambda (v, t) (LambdaTerm
  c v t) -- A lambda abstraction\n```\n\nThis datatype has 3 parameters. The first
  two parameters represent constants and variables respectively, what's important
  is the final parameter `t` which is the parameter for the typesystem being used.\n\nWe
  can use the typesystem `SimplyTyped` in `Compiler.Typesystem.SimplyTyped` as the
  typesystem to make this a simply-typed lambda calculus, or we could slot in `SystemF`,
  `SystemFOmega`, `Hask`, to change the typesystem associcated with with it.\n\nSadly
  there's no magic that builds typecheckers for these (yet). Instead, using the language
  extensions `MultiParamTypeClasses` and `FlexibleInstances` and the `Typecheckable`
  typeclass from `Control.Typecheckable` we write a typechecker for each of these
  occurences.\n\n```haskell\ninstance (...) => Typecheckable (LambdaTerm c v) (SimplyTyped
  m) where\n    ...\ninstance (...) => Typecheckable (LambdaTerm c v) (SystemF m p)
  where\n    ...\ninstance (...) => Typecheckable (LambdaTerm c v) (SystemFOmega m
  p k) where\n    ...\n-- and so on.\n```\n\nOr we can just ignore it all and turn
  it into an untyped lambda calculus:\n\n```haskell\ntype UntypedLambdaTerm c v =
  LambdaTerm c v ()\n```\n\n## The Lambda Cube\n\nThe lambda cube describes the properties
  of a number of typesystems, an overview can be found [**here**](./lambdacube-overview.md).
  It is the basis for the library's classification of typesystems, a typeclass hierarchy
  where each axis is represented by a typeclass whose methods and associated types
  are indicitive of the properties of the axis.\n\n![](https://github.com/Lokidottir/typerbole/blob/master/diagrams/typeclass-hierarchy.png?raw=true)\n\n***\n\n###
  Supported lambda-cube axies\n\n- [x] Simply-typed lambda calculus\n- [x] Polymorphic
  lambda calculus\n- [x] Higher-order lambda calculus\n- [x] Dependently-typed lambda
  calculus (dubiously, not got a implemented typesystem to back it up)\n\n### TODOs\n\n-
  [ ] Give `Calculi.Lambda.Cube.Polymorphic.Unification` better documentation (incl.
  diagrams for graph-related functions/anything that'll benefit).\n- [ ] Finish the
  `Typecheckable` & `Inferable` instances for the typesystems in `Compiler.Typesystem.*`\n-
  [ ] Put together a working travis file.\n- [ ] Implement a Calculus of Constructions
  typesystem.\n- [ ] Document the type expression psudocode\n- [ ] Design a typeclass
  for typesystems with constraints (`Num a => ...`, `a ~ T` etc).\n- [ ] Provide a
  default way of evaluating lambda expressions.\n- [ ] Make the quasiquoters use the
  lambda cube typeclasses instead of specific typesystem implementations.\n- [ ] Subhask-style
  automated test writing.\n- [ ] Explore homotopy type theory\n- [ ] Remove all extensions
  that aren't light syntactic sugar from `default-extensions` and declare them explicitly
  in the modules they're used.\n- [ ] Listen to `-Wall`\n- [ ] Move `Control.Typecheckable`
  to it's own package.\n- [ ] Elaborate on the `Typecheck` type. Maybe make it a typeclass.\n\n###
  Papers, Sites and Books read during development\n\n* Introduction to generalized
  type systems, Dr Henk Barendregt (Journal of Functional Programming, April 1991)\n\n*
  A Modern Perspective on Type Theory [(x)](https://www.amazon.co.uk/Modern-Perspective-Type-Theory-Origins/dp/1402023340)\n\n*
  A proof of correctness for the Hindley-Milner type inference algorithm, Dr Jeff
  Vaughan [(x)](http://www.jeffvaughan.net/docs/hmproof.pdf)\n\n* Compositional Type
  Checking for Hindley-Milner Type Systems with Ad-hoc Polymorphism, Dr. Gergő Érdi
  [(x)](https://gergo.erdi.hu/elte/thesis.pdf)\n\n* Many wikipedia pages on type theory.\n"
license-name: BSD-3-Clause
