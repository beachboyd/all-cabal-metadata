homepage: https://github.com/knupfer/type-of-html
changelog-type: markdown
hash: 822c2b9e3f4bb197f9764abdcb92fdf255543c3ad0a9905019ff4be8517ec6e1
test-bench-deps:
  type-of-html: -any
  bytestring: -any
  base: ==4.10.*
  hspec: -any
  text: -any
  criterion: -any
  blaze-html: -any
  QuickCheck: -any
maintainer: fknupfer@gmail.com
synopsis: High performance type driven html generation.
changelog: ! '# Revision history for type-of-html


  ## 1.0.1.0  -- 2017-10-29


  * export Document

  * use double conversion


  ## 1.0.0.0  -- 2017-09-18


  * perf increase

  * more compile time optimizations

  * more test cases

  * more Convert instances


  ## 0.5.1.0  -- 2017-09-13


  * perf increase

  * better compile times


  ## 0.5.0.0  -- 2017-09-12


  * type attributes

  * don''t allow invalid attributes

  * perf increase

  * better compile times


  ## 0.4.2.0  -- 2017-09-11


  * don''t remove omittable tags

  * simplify internals


  ## 0.4.0.0  -- 2017-09-09


  * new api: attributes are now monoids

  * builder based: higher perf


  ## 0.3.0.0  -- 2017-09-05


  * Overhaul of api

  * Monomorphic render functions

  * Remove inefficient builders

  * Predifined attributes

  * Single polymorphic implementation for all renderers


  ## 0.2.1.0  -- 2017-08-04


  * Escape strings


  ## 0.2.0.0  -- 2017-07-30


  * Full implementation


  ## 0.1.0.0  -- 2017-07-09


  * First draft

'
basic-deps:
  bytestring: -any
  base: ! '>=4.10 && <4.11'
  text: -any
  double-conversion: -any
  ghc-prim: -any
all-versions:
- '0.2.1.1'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '1.0.0.0'
- '1.0.1.0'
author: Florian Knupfer
latest: '1.0.1.0'
description-type: markdown
description: ! "# Type of html\n\n`type-of-html` is a library for generating html
  in a highly\nperformant, modular and type safe manner.\n\nPlease look at the documentation
  of the module for an overview of the api:\n[Html](https://hackage.haskell.org/package/type-of-html/docs/Html.html)\n\nNote
  that you need at least ghc 8.2.\n\n## Typesafety\n\nPart of the html spec is encoded
  at the typelevel, turning a lot of\nmistakes into type errors.\n\nLet's check out
  the /type safety/ in ghci:\n\n```haskell\n>>> td_ (tr_ \"a\")\n\n<interactive>:1:1:
  error:\n    • 'Tr is not a valid child of 'Td\n    • In the expression: td_ (tr_
  \"a\")\n      In an equation for ‘it’: it = td_ (tr_ \"a\")\n\n<interactive>:1:6:
  error:\n    • 'Tr can't contain a string\n    • In the first argument of ‘td_’,
  namely ‘(tr_ \"a\")’\n      In the expression: td_ (tr_ \"a\")\n      In an equation
  for ‘it’: it = td_ (tr_ \"a\")\n\n>>> tr_ (td_ \"a\")\n<tr><td>a</td></tr>\n```\n\nAnd\n\n```haskell\n>>>
  td_A (A.coords_ \"a\") \"b\"\n\n<interactive>:1:1: error:\n    • 'CoordsA is not
  a valid attribute of 'Td\n    • In the expression: td_A (A.coords_ \"a\") \"b\"\n
  \     In an equation for ‘it’: it = td_A (A.coords_ \"a\") \"b\"\n\n>>> td_A (A.id_
  \"a\") \"b\"\n<td id=\"a\">b</td>\n```\n\nEvery parent child relation of html elements
  is checked against the\nspecification of html and non conforming elements result
  in compile\nerrors.\n\nThe same is true for html attributes.\n\nThe checking is
  a bit lenient at the moment:\n\n- some elements can't contain itself as any descendant:
  at the moment we look only at direct children. This allows some (quite exotic) invalid
  html documents.\n- some elements change their permitted content based on attributes:
  we always allow content as if all relevant attributes are set.\n\nNever the less:
  these cases are seldom.  In the vast majority of cases you're only allowed to construct
  valid html.\nThese restrictions aren't fundamental, they could be turned into compile
  time errors.  Perhaps a future version will be even more strict.\n\n## Modularity\n\nHtml
  documents are just ordinary haskell values which can be composed or abstracted over:\n\n```haskell\n>>>
  let table = table_ . map (tr_ . map td_)\n>>> :t table\ntable :: ('Td ?> a) => [[a]]
  -> 'Table > ['Tr > ['Td > a]]\n>>> table [[\"A\",\"B\"],[\"C\"]]\n<table><tr><td>A</td><td>B</td></tr><tr><td>C</td></tr></table>\n>>>
  import Data.Char\n>>> html_ . body_ . table $ map (\\c -> [[c], show $ ord c]) ['a'..'d']\n<html><body><table><tr><td>a</td><td>97</td></tr><tr><td>b</td><td>98</td></tr><tr><td>c</td><td>99</td></tr><tr><td>d</td><td>100</td></tr></table></body></html>\n```\n\nAnd
  here's an example module:\n\n```haskell\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE
  DataKinds     #-}\n\nmodule Main where\n\nimport Html\n\nimport qualified Html.Attribute
  as A\n\nmain :: IO ()\nmain\n  = print\n  . page\n  $ map td_ [1..(10::Int)]\n\npage\n
  \ :: 'Tr ?> a\n  => a\n  -> ('Div :@: ('ClassA := String # 'IdA := String))\n        (
  'Div > String\n        # 'Div > String\n        # 'Table > 'Tr > a\n        )\npage
  tds =\n  div_A (A.class_ \"qux\" # A.id_ \"baz\")\n    ( div_ \"foo\"\n    # div_
  \"bar\"\n    # table_ (tr_ tds)\n    )\n```\n\nPlease note that the type of `page`
  is inferable, so ask ghc-mod or\nwhatever you use to write it for you.  If you choose
  not to write the\ntypes, you don't need the language extensions.  I strongly suggest\nthat
  you don't write type signatures for `type-of-html`.\n\nAll text will be automatically
  html escaped:\n\n```haskell\n>>> i_ \"&\"\n<i>&amp;</i>\n\n>>> div_A (A.id_ \">\")
  ()\n<div id=\"&gt;\"></div>\n```\n\nIf you want to opt out, wrap your types into
  the 'Raw'\nconstructor. This will increase performance, but can be only used with\ntrusted
  input. You can use this e.g. to embed some blaze-html code\ninto type-of-html.\n\n```haskell\n>>>
  i_ (Raw \"</i><script></script><i>\")\n<i></i><script></script><i></i>\n```\n\n##
  Performance\n\n`type-of-html` is a lot faster than `blaze-html` or than `lucid`.\n\nLook
  at the following benchmarks:\n\nRemember this benchmark from `blaze-html`?\n\n![blaze](https://jaspervdj.be/blaze/images/benchmarks-bigtable.png)\n\nThis
  is comparing blaze with `type-of-html`:\n\n![type-of-html](https://user-images.githubusercontent.com/5609565/30524978-229dd21c-9bfe-11e7-8404-1f69b93cec22.png)\n\nTo
  look at the exact code of this benchmark look [here](bench/Main.hs)\nin the repo.
  \ The big table benchmark here is only a 4x4 table. Using\na 1000x10 table like
  on the blaze homepage yields even better relative\nperformance (~9 times faster),
  but would make the other benchmarks\nunreadable.\n\nHow is this possible? We supercompile
  lots of parts of the generation\nprocess. This is possible thanks to the new features
  of GHC 8.2:\nAppendSymbol. We represent tags and attributes as kinds and map these\nto
  (a :: [Symbol]) and then fold all neighbouring Symbols with\nAppendSymbol. Afterwards
  we reify the Symbols with symbolVal which\nwill be embedded in the executable as
  Addr#. All this happens at\ncompile time. At runtime we do only generate the content
  and append\nBuilders.\n\nFor example, if you write:\n\n```haskell\nrenderText $
  tr_ (td_ \"test\")\n```\n\nThe compiler does optimize it to the following (well,
  unpackCString#\ndoesn't exist for Builder, so it's slightly more complicated):\n\n```haskell\ndecodeUtf8
  $ toLazyByteString\n  (  Data.ByteString.Builder.unpackCString# \"<tr><td>\"#\n
  \ <> builderCString# \"test\"#\n  <> Data.ByteString.Builder.unpackCString# \"</tr>\"#\n
  \ )\n```\n\nNote that the compiler automatically sees that your string literal\ndoesn't
  need utf8 and converts directly the `\"test\"# :: Addr#` to an\nescaped Builder
  without any intermediate structure, not even an\nallocated bytestring.\n\n```haskell\nrenderByteString
  $ tr_ (td_ \"teſt\")\n```\n\nResults in\n\n```haskell\ntoLazyByteString\n  (  Data.ByteString.Builder.unpackCString#
  \"<tr><td>\"#\n  <> encodeUtf8BuilderEscaped prim (Data.Text.unpackCString# \"te\\\\197\\\\191t\"#)\n
  \ <> Data.ByteString.Builder.unpackCString# \"</tr>\"#\n  )\n```\n\nIf you write\n\n```haskell\nrenderBuilder
  $ div_ (div_ ())\n```\n\nThe compiler does optimize it to the following:\n\n```haskell\nData.ByteString.Builder.unpackCString#
  \"<div><div></div></div>\"#\n```\n\nThis sort of compiletime optimization isn't
  for free, it'll increase\ncompilation times.\n\nNote that compiling with `-O2` results
  in a ~25% faster binary than\nwith `-O` and compiling with `-O0` compiles about
  15 times faster, so\nbe sure that you develop with `-O0` and benchmark or deploy
  with\n`-O2`.  Be aware, that cabal compiles only with `-O` if you don't\nspecify
  explicitly otherwise.\n\n### Even faster\n\nNeed for speed?  Consider following
  advise, which is sorted in\nascending order of perf gains:\n\nIf you've got attributes
  or contents of length 1, use a Char.\n\nThis allows for a more efficient conversion
  to builder, because we\nknow the length at compile time.\n\n```haskell\ndiv_ 'a'\n```\n\nIf
  you know for sure that you don't need escaping, use `Raw`.\n\nThis allows for a
  more efficient conversion to builder, because we\ndon't need to escape.\n\n```haskell\ndiv_
  (Raw \"a\")\n```\n\nIf you've got numeric attributes or contents, don't convert
  it to a\nstring.\n\nThis allows for a more efficient conversion to builder, because
  we\ndon't need to escape and don't need to handle utf8.\n\n```haskell\ndiv_ (42
  :: Int)\n```\n\nIf you know that an attribute or content is empty, use `()`.\n\nThis
  allows for more compile time appending and avoids two runtime\nappends.\n\n```haskell\ndiv_
  ()\n```\n\nIf you know for sure a string at compile time which doesn't need\nescaping,
  use a `Proxy Symbol`.\n\nThis allows for more compile time appending and avoids
  two runtime\nappends, escaping and conversion to a builder.\n\n```haskell\ndiv_
  (Proxy @\"hello\")\n```\n\nThese techniques can have dramatic performance implications,\nespecially
  the last two. If you replace for example in the `big page\nwith attributes` benchmark
  every string with a Proxy Symbol, it'll run\nin 10 ns which is 500 times faster
  than `blaze-html`.  Looking at core\nshows that this is equivalent of directly embedding
  the entire\nresulting html as bytestring in the binary and is therefore the\nfastest
  possible output.\n\n## Comparision to lucid and blaze-html\n\nAdvantages of `type-of-html`:\n-
  more or less 10 times faster on a medium sized page\n- a lot higher type safety:
  nearly no invalid document is inhabited\n- fewer dependencies\n\nDisadvantages of
  'type-of-html':\n- a bit noisy syntax (don't write types!)\n- sometimes unusual
  type error messages\n- compile times (30sec for a medium sized page, with `-O0`
  only ~2sec)\n- needs at least ghc 8.2\n\nI'd generally recommend that you put your
  documents into an extra\nmodule to avoid frequent recompilations.  Additionally
  you can use\n`type-of-html` within an `blaze-html` document and vice versa.  This\nallows
  you to gradually migrate, or only write the hotpath in a more\nefficient representation.\n\n##
  Example usage\n\n```haskell\n{-# OPTIONS_GHC -fno-warn-missing-signatures #-}\n\nmodule
  Main where\n\nimport Html\n\nimport Data.Text.Lazy.IO as TL\n\nmain :: IO ()\nmain
  = TL.putStrLn $ renderText example\n\nexample =\n  html_\n    ( body_\n      ( h1_\n
  \       ( img_\n        # strong_ \"0\"\n        )\n      # div_\n        ( div_
  \"1\"\n        )\n      # div_\n        ( form_\n          ( fieldset_\n            (
  div_\n              ( div_\n                ( label_ \"a\"\n                # select_\n
  \                 ( option_ \"b\"\n                  # option_ \"c\"\n                  )\n
  \               # div_ \"d\"\n                )\n              )\n            #
  button_ (i_ \"e\")\n            )\n          )\n        )\n      )\n    )\n```\n"
license-name: BSD3
