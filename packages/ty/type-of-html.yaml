homepage: https://github.com/knupfer/type-of-html
changelog-type: markdown
hash: 3f0434d9488c2598658076e4c6698b6568fa9416b63b4cafe305244280b7cc3c
test-bench-deps:
  type-of-html: -any
  bytestring: -any
  base: ! '>=4.9 && <5'
  hspec: -any
  text: -any
  criterion: -any
  blaze-html: -any
  QuickCheck: -any
maintainer: fknupfer@gmail.com
synopsis: High performance type driven html generation.
changelog: ! '# Revision history for type-of-html


  ## 1.3.1.0  -- 2017-12-28


  * internal cleanup

  * make constraints more concise


  ## 1.3.0.0  -- 2017-12-12


  * add Either

  * add Maybe

  * internal refactor

  * cleaner api of the Convert class


  ## 1.2.0.0  -- 2017-11-28


  * remove argument from boolean attributes


  ## 1.1.0.1  -- 2017-11-17


  * factor out CPP


  ## 1.1.0.0  -- 2017-11-04


  * add support for ghc 802

  * simplify types

  * set up ci


  ## 1.0.1.0  -- 2017-10-29


  * export Document

  * use double conversion


  ## 1.0.0.0  -- 2017-09-18


  * perf increase

  * more compile time optimizations

  * more test cases

  * more Convert instances


  ## 0.5.1.0  -- 2017-09-13


  * perf increase

  * better compile times


  ## 0.5.0.0  -- 2017-09-12


  * type attributes

  * don''t allow invalid attributes

  * perf increase

  * better compile times


  ## 0.4.2.0  -- 2017-09-11


  * don''t remove omittable tags

  * simplify internals


  ## 0.4.0.0  -- 2017-09-09


  * new api: attributes are now monoids

  * builder based: higher perf


  ## 0.3.0.0  -- 2017-09-05


  * Overhaul of api

  * Monomorphic render functions

  * Remove inefficient builders

  * Predifined attributes

  * Single polymorphic implementation for all renderers


  ## 0.2.1.0  -- 2017-08-04


  * Escape strings


  ## 0.2.0.0  -- 2017-07-30


  * Full implementation


  ## 0.1.0.0  -- 2017-07-09


  * First draft

'
basic-deps:
  bytestring: -any
  base: ! '>=4.9 && <5'
  text: -any
  double-conversion: -any
  ghc-prim: -any
all-versions:
- '0.2.1.1'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '1.0.0.0'
- '1.0.1.0'
- '1.0.1.1'
- '1.1.0.0'
- '1.2.0.0'
- '1.3.0.0'
- '1.3.0.1'
- '1.3.1.0'
- '1.3.1.1'
- '1.3.2.0'
author: Florian Knupfer
latest: '1.3.2.0'
description-type: markdown
description: ! "# Type of html\n\n`type-of-html` is a library for generating html
  in a highly\nperformant, modular and type safe manner.\n\nPlease look at the documentation
  of the module for an overview of the api:\n[Html](https://hackage.haskell.org/package/type-of-html/docs/Html.html)\n\nNote
  that you need at least ghc 8.0.\n\n## Typesafety\n\nPart of the html spec is encoded
  at the typelevel, turning a lot of\nmistakes into type errors.\n\nLet's check out
  the /type safety/ in ghci:\n\n```haskell\n>>> td_ (tr_ \"a\")\n\n<interactive>:1:1:
  error:\n    • 'Tr is not a valid child of 'Td\n    • In the expression: td_ (tr_
  \"a\")\n      In an equation for ‘it’: it = td_ (tr_ \"a\")\n\n<interactive>:1:6:
  error:\n    • 'Tr can't contain a string\n    • In the first argument of ‘td_’,
  namely ‘(tr_ \"a\")’\n      In the expression: td_ (tr_ \"a\")\n      In an equation
  for ‘it’: it = td_ (tr_ \"a\")\n\n>>> tr_ (td_ \"a\")\n<tr><td>a</td></tr>\n```\n\nAnd\n\n```haskell\n>>>
  td_A (A.coords_ \"a\") \"b\"\n\n<interactive>:1:1: error:\n    • 'CoordsA is not
  a valid attribute of 'Td\n    • In the expression: td_A (A.coords_ \"a\") \"b\"\n
  \     In an equation for ‘it’: it = td_A (A.coords_ \"a\") \"b\"\n\n>>> td_A (A.id_
  \"a\") \"b\"\n<td id=\"a\">b</td>\n```\n\nEvery parent child relation of html elements
  is checked against the\nspecification of html and non conforming elements result
  in compile\nerrors.\n\nThe same is true for html attributes.\n\nThe checking is
  a bit lenient at the moment:\n\n- some elements can't contain itself as any descendant:
  at the moment we look only at direct children. This allows some (quite exotic) invalid
  html documents.\n- some elements change their permitted content based on attributes:
  we always allow content as if all relevant attributes are set.\n\nNever the less:
  these cases are seldom.  In the vast majority of cases you're only allowed to construct
  valid html.\nThese restrictions aren't fundamental, they could be turned into compile
  time errors.  Perhaps a future version will be even more strict.\n\n## Modularity\n\nHtml
  documents are just ordinary haskell values which can be composed or abstracted over:\n\n```haskell\n>>>
  let table = table_ . map (tr_ . map td_)\n>>> :t table\ntable :: ('Td ?> a) => [[a]]
  -> 'Table > ['Tr > ['Td > a]]\n>>> table [[\"A\",\"B\"],[\"C\"]]\n<table><tr><td>A</td><td>B</td></tr><tr><td>C</td></tr></table>\n>>>
  import Data.Char\n>>> html_ . body_ . table $ map (\\c -> [[c], show $ ord c]) ['a'..'d']\n<html><body><table><tr><td>a</td><td>97</td></tr><tr><td>b</td><td>98</td></tr><tr><td>c</td><td>99</td></tr><tr><td>d</td><td>100</td></tr></table></body></html>\n```\n\nAnd
  here's an example module:\n\n```haskell\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE
  DataKinds     #-}\n\nmodule Main where\n\nimport Html\n\nimport qualified Html.Attribute
  as A\n\nmain :: IO ()\nmain\n  = print\n  . page\n  $ map td_ [1..(10::Int)]\n\npage\n
  \ :: 'Tr ?> a\n  => a\n  -> ('Div :@: ('ClassA := String # 'IdA := String))\n        (
  'Div > String\n        # 'Div > String\n        # 'Table > 'Tr > a\n        )\npage
  tds =\n  div_A (A.class_ \"qux\" # A.id_ \"baz\")\n    ( div_ \"foo\"\n    # div_
  \"bar\"\n    # table_ (tr_ tds)\n    )\n```\n\nPlease note that the type of `page`
  is inferable, so ask ghc-mod or\nwhatever you use to write it for you.  If you choose
  not to write the\ntypes, you don't need the language extensions.  I strongly suggest\nthat
  you don't write type signatures for `type-of-html`.\n\nAll text will be automatically
  html escaped:\n\n```haskell\n>>> i_ \"&\"\n<i>&amp;</i>\n\n>>> div_A (A.id_ \">\")
  ()\n<div id=\"&gt;\"></div>\n```\n\nIf you want to opt out, wrap your types into
  the 'Raw'\nconstructor. This will increase performance, but can be only used with\ntrusted
  input. You can use this e.g. to embed some blaze-html code\ninto type-of-html.\n\n```haskell\n>>>
  i_ (Raw \"</i><script></script><i>\")\n<i></i><script></script><i></i>\n```\n\n##
  Controlflow\n\nYou can use Either and Maybe in your documents:\n\n```haskell\n>>>
  div_ (Just (div_ \"a\"))\n<div><div>a</div></div>\n\n>>> div_ (if True then Nothing
  else Just (div_ \"b\"))\n<div></div>\n\n>>> div_ (if True then Left (div_ \"a\")
  else Right \"b\")\n<div><div>a</div></div>\n\n>>> div_A (if True then Right (A.id_
  \"a\") else Left (A.class_ \"a\")) \"b\"\n<div id=\"a\">b</div>\n```\n\nIf you use
  Either, both possible outcomes are typechecked if they are valid children.\n\nYou
  can combine Either, Maybe and Lists in any way you want.  The\ntypes will get jolly
  complicated, but if you don't write the types,\nyou'll be good.\n\n## Performance\n\n`type-of-html`
  is a lot faster than `blaze-html` or than `lucid`.\n\nLook at the following benchmarks:\n\nRemember
  this benchmark from `blaze-html`?\n\n![blaze](https://jaspervdj.be/blaze/images/benchmarks-bigtable.png)\n\nThis
  is comparing blaze with `type-of-html`:\n\n![type-of-html](https://user-images.githubusercontent.com/5609565/30524978-229dd21c-9bfe-11e7-8404-1f69b93cec22.png)\n\nTo
  look at the exact code of this benchmark look into the repo.  The\nbig table benchmark
  here is only a 4x4 table. Using a 1000x10 table\nlike on the blaze homepage yields
  even better relative performance (~9\ntimes faster), but would make the other benchmarks
  unreadable.\n\nIf you use ghc 802 performance will be about 20% slower compared
  to\nnewer ghcs, but obviously still a lot faster than blaze.\n\nHow is this possible?
  We supercompile lots of parts of the generation\nprocess. This is possible thanks
  to the new features of GHC 8.2:\nAppendSymbol. We represent tags and attributes
  as kinds and map these\nto (a :: [Symbol]) and then fold all neighbouring Symbols
  with\nAppendSymbol. Afterwards we reify the Symbols with symbolVal which\nwill be
  embedded in the executable as Addr#. All this happens at\ncompile time. At runtime
  we do only generate the content and append\nBuilders. Because all functions from
  this library get inlined, we'll\nautomatically profit from future optimizations
  in ByteString.Builder.\n\nFor example, if you write:\n\n```haskell\nrenderText $
  tr_ (td_ \"test\")\n```\n\nThe compiler does optimize it to the following (well,
  unpackCString#\ndoesn't exist for Builder, so it's slightly more complicated):\n\n```haskell\ndecodeUtf8
  $ toLazyByteString\n  (  Data.ByteString.Builder.unpackCString# \"<tr><td>\"#\n
  \ <> builderCString# \"test\"#\n  <> Data.ByteString.Builder.unpackCString# \"</tr>\"#\n
  \ )\n```\n\nNote that the compiler automatically sees that your string literal\ndoesn't
  need utf8 and converts directly the `\"test\"# :: Addr#` to an\nescaped Builder
  without any intermediate structure, not even an\nallocated bytestring.\n\n```haskell\nrenderByteString
  $ tr_ (td_ \"teſt\")\n```\n\nResults in\n\n```haskell\ntoLazyByteString\n  (  Data.ByteString.Builder.unpackCString#
  \"<tr><td>\"#\n  <> encodeUtf8BuilderEscaped prim (Data.Text.unpackCString# \"te\\\\197\\\\191t\"#)\n
  \ <> Data.ByteString.Builder.unpackCString# \"</tr>\"#\n  )\n```\n\nIf you write\n\n```haskell\nrenderBuilder
  $ div_ (div_ ())\n```\n\nThe compiler does optimize it to the following:\n\n```haskell\nData.ByteString.Builder.unpackCString#
  \"<div><div></div></div>\"#\n```\n\nThis sort of compiletime optimization isn't
  for free, it'll increase\ncompilation times.\n\nNote that compiling with `-O2` results
  in a ~25% faster binary than\nwith `-O` and compiling with `-O0` compiles about
  15 times faster, so\nbe sure that you develop with `-O0` and benchmark or deploy
  with\n`-O2`.  Be aware, that cabal compiles only with `-O` if you don't\nspecify
  explicitly otherwise.\n\n### Even faster\n\nNeed for speed?  Consider following
  advise, which is sorted in\nascending order of perf gains:\n\nIf you've got attributes
  or contents of length 1, use a Char.\n\nThis allows for a more efficient conversion
  to builder, because we\nknow the length at compile time.\n\n```haskell\ndiv_ 'a'\n```\n\nIf
  you know for sure that you don't need escaping, use `Raw`.\n\nThis allows for a
  more efficient conversion to builder, because we\ndon't need to escape.\n\n```haskell\ndiv_
  (Raw \"abc\")\n```\n\nIf you've got numeric attributes or contents, don't convert
  it to a\nstring.\n\nThis allows for a more efficient conversion to builder, because
  we\ndon't need to escape and don't need to handle utf8.\n\n```haskell\ndiv_ (42
  :: Int)\n```\n\nIf you know that an attribute or content is empty, use `()`.\n\nThis
  allows for more compile time appending and avoids two runtime\nappends.\n\n```haskell\ndiv_
  ()\n```\n\nIf you know for sure a string at compile time which doesn't need\nescaping,
  use a `Proxy Symbol`.\n\nThis allows for more compile time appending and avoids
  two runtime\nappends, escaping and conversion to a builder.\n\n```haskell\ndiv_
  (Proxy @\"hello\")\n```\n\nThese techniques can have dramatic performance implications,\nespecially
  the last two. If you replace for example in the `big page\nwith attributes` benchmark
  every string with a Proxy Symbol, it'll run\nin 10 ns which is 500 times faster
  than `blaze-html`.  Looking at core\nshows that this is equivalent of directly embedding
  the entire\nresulting html as bytestring in the binary and is therefore the\nfastest
  possible output.\n\n## Comparision to lucid and blaze-html\n\nAdvantages of `type-of-html`:\n-
  more or less 10 times faster on a medium sized page\n- a lot higher type safety:
  nearly no invalid document is inhabited\n- fewer dependencies\n\nDisadvantages of
  'type-of-html':\n- a bit noisy syntax (don't write types!)\n- sometimes unusual
  type error messages\n- compile times (30sec for a medium sized page, with `-O0`
  only ~2sec)\n- needs at least ghc 8\n\nI'd generally recommend that you put your
  documents into an extra\nmodule to avoid frequent recompilations.  Additionally
  you can use\n`type-of-html` within an `blaze-html` document and vice versa.  This\nallows
  you to gradually migrate, or only write the hotpath in a more\nefficient representation.\n\n##
  Example usage\n\n```haskell\n{-# OPTIONS_GHC -fno-warn-missing-signatures #-}\n\nmodule
  Main where\n\nimport Html\n\nimport Data.Text.Lazy.IO as TL\n\nmain :: IO ()\nmain
  = TL.putStrLn $ renderText example\n\nexample =\n  html_\n    ( body_\n      ( h1_\n
  \       ( img_\n        # strong_ \"foo\"\n        )\n      # div_\n        ( div_
  \"bar\"\n        )\n      # div_\n        ( form_\n          ( fieldset_\n            (
  div_\n              ( div_\n                ( label_ \"zot\"\n                #
  select_\n                  ( option_ 'b'\n                  # option_ 'c'\n                  )\n
  \               # map div_ [1..5 :: Int]\n                )\n              )\n            #
  button_ (i_ ())\n            )\n          )\n        )\n      )\n    )\n```\n\n##
  FAQ\n\n### Why don't you provide a pretty printer?\n\nIt's sadly not possible to
  pretty print html source in a semantic preserving way.\nIf you add before every
  tag a newline and indentation, the following happens:\n\n```html\n<i>a</i><em>b</em>\n```\n\n```html\n<i>\n
  \ a\n</i>\n<em>\n  b\n</em>\n```\n\nThis would add a space when rendering.  So perhaps
  we'll avoid all\nthese text modifying tags, but now look at `<pre>`. Every whitespace\nand
  newline within is semantically important.  And even if we avoid\nmodifying stuff
  within `<pre>`, there is the nasty css property\n`white-space: pre;`. With this,
  all bets are off to modify any\nindenting, because we can't know which css will
  apply to the document:\n- It may include a link, so it would be dynamic.\n- There
  might be meddling javascript.\n- The user of the browser is free to activate a custom
  css.\n\nIf we go creative, there is still one option:\n\n```html\n<div\n  ><div\n
  \   >Hello World!</div\n  ></div\n>\n```\n\nThis would be semantically correct,
  but would this be pretty?\n\nI recommend, that if you want to debug html, use mozilla
  fire bug, so\nyou can as well fold trees and look at the rendering.\n\n### Why don't
  you keep track of appended tag lengths at compile time?\nWell, it's true that we
  could improve performance a miniscule by that:\nby knowing the length of the string,
  we could just use internal\nbytestring functions to copy over the addr#.  This would
  avoid a ccall\nto determine the length of the addr# more or less per tag.\n\nAt
  the other hand, luckily ghc moves all these bytestrings to the\ntoplevel in core,
  so we have this cost only the first time we use this\nbytestring.  Considering that
  most webpages have a lot more than one\nvisitor, this dwarfs the cost (about 3 nanoseconds)
  a lot.\n\nThe negative side of doing this would be a severe complication for the\ntypechecker,
  which is already quite stressed with this library.\n\nBesides, there is a ghc ticket
  about replacing compile time strings\n(addr#) with bytearray#, which contains it's
  length. So in some\nfuture, we'll have this for free.\n\n### Wouldn't it be more
  efficient to append all compile time stuff to one huge Symbol and use '[(Nat,Nat)]
  to slice it?\nCool idea, but no.  This would reduce memory fragmentation and avoid
  a\nterminating null more or less per tag at the cost of the lost of\nsharing. Being
  unable to inspect a Symbol, we would end up with a lot\nof repetitions, which are
  at the moment shared.  Even the bytestring,\nwhich is used for the Symbol, is shared
  of equal Symbols.\n\n### Isn't there any performance tweak left?\nAt the moment,
  string literals are handled well, but not optimal.  The\nescaping of string literals
  is done everytime when rendering the html\ndocument, ideally we convince GHC to
  float the escaped string literal\nto top level.  I guess, that would make things
  a bit faster.\n"
license-name: BSD3
