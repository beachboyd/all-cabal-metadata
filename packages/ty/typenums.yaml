homepage: https://github.com/adituv/typenums#readme
changelog-type: markdown
hash: 272a106d74bcdbe53ed355a7ea0856b99737db590953e39b0decaaac80be7711
test-bench-deps:
  base: ! '>4.9 && <5.0'
  hspec: ! '>=2.0'
  typenums: -any
  QuickCheck: ! '>=2.0'
maintainer: aditu.venyhandottir@gmail.com
synopsis: Type level numbers using existing Nat functionality
changelog: ! "Change log\n==========\n\ntypenums uses [PVP Versioning][1].\nThe change
  log is available [on GitHub][2].\n\n0.1.2.1\n=======\n* Fix build failure on GHC
  8.6 by adding conditional NoStarIsType langauge\npragma\n\n0.1.2\n=====\n* ([#2](https://github.com/adituv/typenums/issues/2))\n
  \ Refactored type-level arithmetic so that the type families are exposed from\n
  \ an Internal module.\n\n0.1.1.1\n=======\n* Add UndecidableInstances language extension
  to Data.TypeNums.Rats.  This\n  fixes a compilation error with GHC HEAD.\n\n0.1.1\n=====\n*
  ([#1](https://github.com/adituv/typenums/issues/1))\n  Added existentially-quantified
  datatypes SomeInt and SomeRat to handle\n  type-level Ints and Rats that are not
  statically known.  Added functions\n  someIntVal and someRatVal to construct these
  from an Integer/Rational value.\n\n0.1.0.0\n=======\n* Initial Haddock release\n*
  Defined type-level integers and rationals\n* Defined polykinded arithmetic over
  nats, ints and rats\n* Defined polykinded comparison over nats, ints and rats \n*
  Added Data.TypeLits module\n\n[1]: https://pvp.haskell.org\n[2]: https://github.com/adituv/typenums/releases\n\n"
basic-deps:
  base: ! '>4.9 && <5.0'
all-versions:
- 0.1.1.1
- 0.1.2
- 0.1.2.1
author: AdituV
latest: 0.1.2.1
description-type: markdown
description: ! "# typenums\n\n[![Hackage](https://img.shields.io/hackage/v/typenums.svg)](https://hackage.haskell.org/package/typenums)\n[![Build
  status](https://secure.travis-ci.org/adituv/typenums.svg?branch=master)](https://travis-ci.org/adituv/typenums)\n[![Windows
  build status](https://ci.appveyor.com/api/projects/status/github/adituv/typenums?branch=master&svg=true)](https://ci.appveyor.com/project/adituv/typenums)\n[![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/adituv/typenums/blob/master/LICENSE)\n\nType
  level numbers using existing Nat functionality. Uses kind-polymorphic\ntypeclasses
  and type families to facilitate more general code compatible with\nexisting code
  using type-level Naturals.\n\n## Usage\nImport either Data.TypeNums or Data.TypeLits
  instead of GHC.TypeLits.  Some\ndefinitions conflict with GHC.TypeLits, so if you
  really must import it, use\nan explicit import list.\n\nThis library is intended
  to be used in a kind-polymorphic way, such that\na type-level integer parameter
  can be written as a natural, and a rational\ncan be written as either of the other
  two.  As an example:\n\n```haskell\n{-# LANGUAGE PolyKinds #-}\n\ndata SomeType
  (n :: k) = SomeType\n\nuseSomeType :: KnownInt n => SomeType n -> _\nuseSomeType
  = -- ...\n```\n\n## Syntax\n* Positive integers are written as natural numbers,
  as before.  Optionally\n  they can also be written as `Pos n`.\n* Negative integers
  are written as `Neg n`.\n* Ratios are written as `n :% d`, where `n` can be a natural
  number, `Pos n`,\n  or `Neg n`, and `d` is a natural number.\n\nAddition, subtraction
  and multiplication at type level are all given as infix\noperators with standard
  notation, and are compatible with any combination of\nthe above types.  Equality
  and comparison constraints are likewise available\nfor any combination of the above
  types.\n\nN.B. The equality constraint conflicts with that in Data.Type.Equality.
  \ The\n(==) operator from Data.Type.Equality is re-exported as (==?) from both\nData.TypeNums
  and Data.TypeLits.\n"
license-name: BSD-3-Clause
