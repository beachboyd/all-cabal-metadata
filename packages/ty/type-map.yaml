homepage: https://github.com/Lysxia/type-map
changelog-type: markdown
hash: d12e6e99bb61a8ffb884e3978aeed8d20bd37e02e55afd3c4af74e7c4968d682
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ! '>=4.9'
  HUnit: -any
  type-map: -any
maintainer: lysxia@gmail.com
synopsis: Type-indexed maps
changelog: ! "# 0.1.5.0\n\n- Add role annotations for all the various type maps.\n
  \ Now the parameters have nominal roles.\n\n  Previously, they had phantom roles,
  which broke uses of `unsafeCoerce`.\n\n# 0.1.4.0\n\n- Add `(<:)` to `Dynamic`. (deepfire)\n\n#
  0.1.3.0\n\n- Add `update` to `Dynamic`. (deepfire)\n\n# 0.1.2.0\n\n- Update `Dynamic`\n
  \ + Export `empty`\n  + Add `size`, `delete`, `union`, `difference`, `intersection`\n\n#
  0.1.1.0\n\n- Compatible with GHC 8.2\n"
basic-deps:
  base: ! '>=4.7 && <5'
  containers: -any
  ghc-prim: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
author: Li-yao Xia
latest: 0.1.5.0
description-type: markdown
description: ! "Type-indexed maps [![Hackage](https://img.shields.io/hackage/v/type-map.svg)](https://hackage.haskell.org/package/type-map)
  [![Build Status](https://travis-ci.org/Lysxia/type-map.svg)](https://travis-ci.org/Lysxia/type-map)\n=================\n\nMaps
  whose keys are types.\n\nThis package includes:\n\n- a dynamic type map using GHC's
  `Typeable` class,\n  with a `Proxy`-based API (`Data.TypeMap.Dynamic`)\n  or a `TypeApplications`-based
  API (`Data.TypeMap.Dynamic.Alt`);\n\n- a static type map, whose type is indexed
  by its list of keys\n  (there are actually multiple implementations with different
  underlying\n  representations (`[]`, `Map`, `Vector`)).\n\nBoth variants support
  arbitrary, user-defined mappings between types and\nvalues, via defunctionalization.\n\n[Example
  using the dynamically-typed\ninterface](https://github.com/Lysxia/type-map/tree/master/examples/dynamic.hs).\n\nSee
  also [this package's description on Hackage](https://hackage.haskell.org/package/type-map).\n\nRelated\n-------\n\n-
  [typerep-map](https://hackage.haskell.org/package/typerep-map),\n  a more performant
  dynamic type map.\n\nInternal module policy\n----------------------\n\nModules under
  `Data.TypeMap.Internal` are not subject to any versioning policy.\nBreaking changes
  may apply to them at any time.\n\nIf something in those modules seems useful, please
  report it or create a pull\nrequest to export it from an external module.\n"
license-name: MIT
