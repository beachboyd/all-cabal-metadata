homepage: https://haskell-lang.org/library/typed-process
changelog-type: markdown
hash: 8e9206a2f3c2e1ba2233df97600bbf2bf0007b4670f36b87d456a066d1dee14d
test-bench-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.8 && <5'
  base64-bytestring: -any
  hspec: -any
  process: ! '>=1.2'
  async: -any
  typed-process: -any
  transformers: -any
  temporary: -any
maintainer: michael@snoyman.com
synopsis: Run external processes, with strong typing of streams
changelog: ! "## 0.2.3.0\n\n* Add support for the single-threaded runtime via polling\n\n##
  0.2.2.0\n\n* Add inherit versions of setter functions\n\n## 0.2.1.0\n\n* Add `readProcessStdout`,
  `readProcessStdout_`, `readProcessStderr`, and `readProcessStderr_`\n* Do not show
  modified environment information in exceptions\n\n## 0.2.0.0\n\n* Remove dependency
  on `conduit` and `conduit-extra`. Relevant code added to\n  `Data.Conduit.Process.Typed`
  in `conduit-extra-1.2.1`.\n\n## 0.1.1\n\n* Introduce 'unsafeProcessHandle' function\n\n##
  0.1.0.1\n\n* Fix bug in `waitForProcess` that caused exit code to be lost\n* Minor
  doc improvements\n\n## 0.1.0.0\n\n* Initial commit\n"
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.8 && <5'
  process: ! '>=1.2'
  async: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
author: Michael Snoyman
latest: 0.2.3.0
description-type: markdown
description: ! "## typed-process\n\n[![Build Status](https://travis-ci.org/fpco/typed-process.svg?branch=master)](https://travis-ci.org/fpco/typed-process)
  [![Build status](https://ci.appveyor.com/api/projects/status/bhh7aekbgeqp7g5j/branch/master?svg=true)](https://ci.appveyor.com/project/snoyberg/typed-process/branch/master)\n\nAPI
  level documentation (Haddocks) may be [found on\nStackage](https://www.stackage.org/package/typed-process).\n\nThis
  library provides the ability to launch and interact with external\nprocesses. It
  wraps around the\n[process library](https://haskell-lang.org/library/process), and\nintends
  to improve upon it by:\n\n1. Using type variables to represent the standard streams,
  making them\n   easier to manipulate\n2. Use proper concurrency (e.g., the async
  library) in place of the\n   weird lazy I/O tricks for such things as consuming
  output streams\n3. Allow for more complex concurrency by providing STM-based functions\n4.
  Using binary I/O correctly\n5. Providing a more composable API, designed to be easy
  to use for\n   both simple and complex use cases\n\n__NOTE__ It's highly recommended
  that you compile any program using this\nlibrary with the multi-threaded runtime,
  usually by adding `ghc-options:\n-threaded` to your executable stanza in your cabal
  or `package.yaml` file. The\nsingle-threaded runtime necessitates some inefficient
  polling to be used under\nthe surface.\n\n## Synopsis\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.IO (hPutStr, hClose)\nimport System.Process.Typed\nimport qualified Data.ByteString.Lazy
  as L\nimport qualified Data.ByteString.Lazy.Char8 as L8\nimport Control.Concurrent.STM
  (atomically)\nimport Control.Exception (throwIO)\n\nmain :: IO ()\nmain = do\n    --
  Run a process, print its exit code\n    runProcess \"true\" >>= print\n    runProcess
  \"false\" >>= print\n\n    -- Check that the exit code is a success\n    runProcess_
  \"true\"\n    -- This will throw an exception: runProcess_ \"false\"\n\n    -- Capture
  output and error\n    (dateOut, dateErr) <- readProcess_ \"date\"\n    print (dateOut,
  dateErr)\n\n    -- Use shell commands\n    (dateOut2, dateErr2) <- readProcess_
  \"date >&2\"\n    print (dateOut2, dateErr2)\n\n    -- Interact with a process\n
  \   let catConfig = setStdin createPipe\n                  $ setStdout byteStringOutput\n
  \                 $ proc \"cat\" [\"/etc/hosts\", \"-\", \"/etc/group\"]\n    withProcess_
  catConfig $ \\p -> do\n        hPutStr (getStdin p) \"\\n\\nHELLO\\n\"\n        hPutStr
  (getStdin p) \"WORLD\\n\\n\\n\"\n        hClose (getStdin p)\n\n        atomically
  (getStdout p) >>= L8.putStr\n```\n\n## Types\n\nThe two primary types in this package
  are `ProcessConfig` and\n`Process`. `ProcessConfig` gives a specification for how
  to run a\nprocess (e.g., the command to run, working directory, environment\nvariables)
  and how to deal with the three standard streams: input,\noutput, and error. You
  use one of the functions in this package for\nlaunching a process to turn a `ProcessConfig`
  into a `Process`, which\nrepresents an actual running system process.\n\nThe easiest
  way to create a `ProcessConfig` is using the `IsString`\ninstance and `OverloadedStrings`.
  For example, to run the `date`\ncommand, we can do the following. (NOTE: The type
  signatures used here\nare simply to spell things out, they are not needed.)\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = do\n    let dateConfig :: ProcessConfig
  () () ()\n        dateConfig = \"date\"\n\n    process <- startProcess dateConfig\n
  \   exitCode <- waitExitCode (process :: Process () () ())\n    print exitCode\n\n
  \   stopProcess process\n```\n\nThis shows the general workflow: use `startProcess`
  to launch a\n`Process` from a `ProcessConfig`, interact with it (such as\n`waitExitCode`
  to wait for the process to exit), and then clean up\nresources with `stopProcess`.
  (We'll get to those `() () ()` type\nparameters in the next section.)\n\nInstead
  of explicitly dealing with `startProcess` and `stopProcess`,\nit's recommended to
  instead use `withProcess`, which uses the bracket\npattern and is exception safe:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = withProcess \"date\" $ \\process ->
  do\n    exitCode <- waitExitCode (process :: Process () () ())\n    print exitCode\n```\n\nBut
  this pattern of running a process, waiting for it to exit, and\ngetting its exit
  code is very common, so it has a helper function of\nits own:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = do\n    exitCode <- runProcess \"date\"\n
  \   print exitCode\n```\n\nWe'll discuss some functions which automatically check
  the exit code\nbelow.\n\n## Type parameters\n\nBoth `ProcessConfig` and `Process`
  take three type parameters:\nthe types of the standard input, output, and error
  streams for the\nprocess. As you saw above, our default is `()` for each, and our\ndefault
  behavior is to inherit the streams from the parent\nprocess. This is why, when you
  run the previous programs, the `date`\nprogram's output goes directly to your console.\n\nWe
  can override these defaults in a number of ways. Perhaps the\neasiest is to simply
  close the stream for the child so it cannot use\nit at all.\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = do\n    let dateConfig :: ProcessConfig
  () () ()\n        dateConfig = setStdin closed\n                   $ setStdout closed\n
  \                  $ setStderr closed\n                     \"date\"\n    exitCode
  <- runProcess dateConfig\n    print exitCode\n```\n\nA few things to note:\n\n*
  The type parameter is still `()`, since there's no data to\n  return. We'll see
  some more interesting cases later.\n* This process now returns an `ExitFailure 1`,
  since it tries to write\n  to a closed `stdout` file descriptor.\n\n## Using `proc`
  and `shell`\n\nUsing the `OverloadedStrings` approach works nicely for some cases,\nbut
  we'll often want more control over things. There are two smart\nconstructors available:
  `proc` takes a command and list of arguments,\nand `shell` takes a single string
  which will be passed directly to the\nsystem's shell.\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = do\n    -- Command and arguments\n
  \   runProcess (proc \"cat\" [\"/etc/hosts\"]) >>= print\n\n    -- Shell\n    runProcess
  (shell \"cat /etc/hosts >&2 && false\") >>= print\n```\n\nThe behavior of the `OverloadedStrings`
  approach we've used until now\nis actually based on these two smart constructors.
  If you provide it a\nstring without any spaces (like `\"date\"`), it will use `proc`
  without\nany arguments, e.g. `fromString \"date\" = proc \"date\" []`. If there
  are\nany spaces in the string, it will use `shell`.\n\n__EXERCISE__: Rewrite the
  previous example to not use the `shell`\nconstructor.\n\n## Checking the exit code\n\nWe've
  done a lot of printing of exit codes. In many cases, we don't\nactually want to
  look at the exit code, but instead just throw an\nexception if the process failed.
  Fortunately, we have such an\nexit-code-checking function.\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = runProcess_ \"date\"\n```\n\nBy adding
  the `_` at the end of `runProcess`, we're now automatically\nchecking the exit code
  and throwing an exception if it returns\nanything but success. Want to see it in
  action?\n\n```haskell\n#!/usr/bin/env stack\n-- stack --resolver lts-10.2 script\n{-#
  LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\n\nmain :: IO ()\nmain
  = runProcess_ \"false\"\n```\n\nUnder the surface, this function is using the `checkExitCode`\nfunction.
  We can do this more explicitly if desired:\n\n```haskell\n#!/usr/bin/env stack\n--
  stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\n\nmain
  :: IO ()\nmain = withProcess \"false\" checkExitCode\n```\n\n## Reading from a process\n\nSending
  all output to the parent process's handles is sometimes\ndesired, but often we'd
  rather just capture that output. The easiest\nway to do that is to capture it in
  memory as a lazy\n`ByteString`. Fortunately, we have a helper `readProcess` function
  for\nthat:\n\n```haskell\n#!/usr/bin/env stack\n-- stack --resolver lts-10.2 script\n{-#
  LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\nimport System.Exit
  (ExitCode)\nimport Data.ByteString.Lazy (ByteString)\n\nmain :: IO ()\nmain = do\n
  \   (exitCode, out, err) <- readProcess \"date\"\n    print (exitCode :: ExitCode)\n
  \   print (out :: ByteString)\n    print (err :: ByteString)\n```\n\nOne thing to
  point out is that, even though this is a lazy\n`ByteString`, it is not using any
  lazy I/O. When `readProcess` exits,\nthe output has been fully generated, and is
  resident in memory. We\nonly use a lazy `ByteString` instead of a strict one for
  better memory\nconfiguration (chunking into multiple smaller bits instead of one\nmassive
  chunk of data).\n\nLike `runProcess`, there's an exit-code-checking variant of\n`readProcess`:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\nimport Data.ByteString.Lazy (ByteString)\n\nmain :: IO ()\nmain
  = do\n    (out, err) <- readProcess_ \"date\"\n    print (out :: ByteString)\n    print
  (err :: ByteString)\n```\n\n__EXERCISE__: Use shell redirection to move the output
  from standard\noutput to standard error.\n\n## Redirecting to a file\n\nAnother
  technique we'll commonly want to employ is to redirect output\nfrom a process to
  a file. This is superior to the memory approach as\nit does not have the risk of
  using large amounts of memory, though it\nis more inconvenient. Together with the\n[`UnliftIO.Temporary`](https://www.stackage.org/haddock/lts-10.2/unliftio-0.2.2.0/UnliftIO-Temporary.html),
  we\ncan do some nice things:\n\n```haskell\n#!/usr/bin/env stack\n-- stack --resolver
  lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\nimport
  UnliftIO.Temporary (withSystemTempFile)\n\nmain :: IO ()\nmain = withSystemTempFile
  \"date\" $ \\fp h -> do\n    let dateConfig = setStdin closed\n                   $
  setStdout (useHandleClose h)\n                   $ setStderr closed\n                     \"date\"\n\n
  \   runProcess_ dateConfig\n\n    readFile fp >>= print\n```\n\nThe `useHandleClose`
  function lets us provide an already existing\n`Handle`, and will close it when done.
  If you want to write the output\nof multiple processes to a single file, you can
  instead use\n`useHandleOpen`:\n\n```haskell\n#!/usr/bin/env stack\n-- stack --resolver
  lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\nimport
  System.IO (hClose)\nimport UnliftIO.Temporary (withSystemTempFile)\nimport Control.Monad
  (replicateM_)\n\nmain :: IO ()\nmain = withSystemTempFile \"date\" $ \\fp h -> do\n
  \   let dateConfig = setStdin closed\n                   $ setStdout (useHandleOpen
  h)\n                   $ setStderr closed\n                     \"date\"\n\n    replicateM_
  10 $ runProcess_ dateConfig\n    hClose h\n\n    readFile fp >>= putStrLn\n```\n\n__EXERCISE__
  Create a separate file for error output and capture that\nas well.\n\n## Providing
  input\n\nUsing `OverloadedStrings`, it's trivial to provide some input to a\nprocess:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = runProcess_ $ setStdin \"Hello World!\\n\"
  \"cat\"\n```\n\nThis is just a shortcut for using the `byteStringInput` function:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\n\nmain :: IO ()\nmain = runProcess_ $ setStdin (byteStringInput
  \"Hello World!\\n\") \"cat\"\n```\n\nBut like output and error, we can also use
  a `Handle` or a temporary\nfile:\n\n```haskell\n#!/usr/bin/env stack\n-- stack --resolver
  lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\nimport
  System.IO\nimport UnliftIO.Temporary (withSystemTempFile)\n\nmain :: IO ()\nmain
  = withSystemTempFile \"input\" $ \\fp h -> do\n    hPutStrLn h \"Hello World!\"\n
  \   hClose h\n\n    withBinaryFile fp ReadMode $ \\h' ->\n        runProcess_ $
  setStdin (useHandleClose h') \"cat\"\n```\n\n## Interacting with a process\n\nSo
  far, everything we've done has been _running_ processes: spawning a\nchild with
  some settings, then waiting for it to exit. We will often\nwant to _interact_ with
  a process: spawn it, and then send it input or\nreceive output from it while it
  is still running.\n\nFor this, using `createPipe` makes a lot of sense:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport
  System.Process.Typed\nimport System.IO\n\nmain :: IO ()\nmain = do\n    let catConfig
  = setStdin createPipe\n                  $ setStdout createPipe\n                  $
  setStderr closed\n                    \"cat\"\n\n    withProcess_ catConfig $ \\p
  -> do\n        hPutStrLn (getStdin p) \"Hello!\"\n        hFlush (getStdin p)\n
  \       hGetLine (getStdout p) >>= print\n\n        hClose (getStdin p)\n```\n\n__EXERCISE__:
  What happens if you remove the `hClose` line, and why?\nHint: what happens if you
  both remove `hClose` _and_ replace\n`withProcess_` with `withProcess`?\n\n## Other
  settings\n\nWe've so far only played with modifying streams, but there are a\nnumber
  of other settings you can tweak. It's best to just\n[look at the API docs](https://www.stackage.org/package/typed-process)\nfor
  all available functions. We'll give examples of the two most\ncommon settings: the
  working directory and environment variables.\n\n```haskell\n#!/usr/bin/env stack\n--
  stack --resolver lts-10.2 script\n{-# LANGUAGE OverloadedStrings #-}\nimport System.Process.Typed\n\nmain
  :: IO ()\nmain = do\n    putStrLn \"1:\"\n    runProcess_ \"pwd\"\n    putStrLn
  \"\\n2:\"\n    runProcess_ $ setWorkingDir \"/tmp\" \"pwd\"\n\n    putStrLn \"\\n3:\"\n
  \   runProcess_ \"env\"\n    putStrLn \"\\n4:\"\n    runProcess_ $ setEnv [(\"HELLO\",
  \"WORLD\")] \"env\"\n```\n\n## Async and STM\n\nWhen interacting with a process
  on multiple streams, you'll often want\nto use some kind of concurrency. The strong
  recommendation is to use\nthe\n[async library](https://haskell-lang.org/library/async).
  Additionally,\nthis library provides a number of functions that use STM, which also\nplays
  very nicely with concurrency and the async package. For some\nexamples, check out:\n\n*
  `waitExitCodeSTM`\n* `getExitCodeSTM`\n* `checkExitCodeSTM`\n* `byteStringOutput`\n\n__EXERCISE__
  Reimplement the `readProcess` function using\n`byteStringOutput` and `waitExitCodeSTM`.\n\n__EXERCISE__
  Reimplement the `readProcess_` function using\n`byteStringOutput` and `checkExitCodeSTM`.\n"
license-name: MIT
