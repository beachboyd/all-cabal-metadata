homepage: ''
changelog-type: markdown
hash: 65a2d222044676686859fda43f119cb0f02ab5d04718ee3a7331628dade69931
test-bench-deps:
  base: -any
  sdl2: -any
  weigh: ! '>=0.0.8'
  linear: -any
  deepseq: -any
  vector: -any
maintainer: gabriel@system.is, ollie@ocharles.org.uk
synopsis: Both high- and low-level bindings to the SDL library (version 2.0.4+).
changelog: ! "2.4.1.0\n=======\n\n* More SDL functions no longer allocate. See\n  https://github.com/haskell-game/sdl2/pull/179
  and\n  https://github.com/haskell-game/sdl2/issues/178. Thanks to @chrisdone for
  this\n  work.\n\n\n* Fixed an off-by-one bug in `SDL.Input.Mouse.getMouseButtons`.
  See\n  https://github.com/haskell-game/sdl2/pull/177 for more information. Thanks
  to\n  @Linearity for identifying and fixing this bug.\n\n        \n2.4.0.1\n=======\n*
  Raise upper bounds for `exceptions` to <0.11\n\n\n2.4.0\n=====\n* `getRelativeMouseLocation`
  now returns `Vector` instead of `Point`.\n* `getModalMouseLocation` returns either
  a `Vector` or a `Point`, wrapped in (new) `ModalLocation`.\n* `WindowSizeChangedEventData`
  includes the new window size.\n* Added an invalid state to the `ControllerButtonState`
  enum, and switched to a more reliable state detection method.\n* Raise upper bounds
  for `exceptions` to <0.10\n\n\n2.3.0\n=====\n\n* Windows builds now use `-D_SDL_main_h`.
  See https://github.com/haskell-game/sdl2/issues/139 for more discussion.\n* Some
  basic support for game controller events have been added. See `SDL.Input.GameController`
  and changes to `ControllerDeviceEventData`.\n* Support for event watching: `addEventWatch`
  and `delEventWatch`.\n* High-level bindings now distinguish between finger down
  / motion / up.\n  See `SDL.Event.TouchFingerEvent` and `SDL.Event.TouchFingerMotionEvent`.\n*
  Several event payloads now have their `Window` fields modified to use `Maybe Window`,
  substituting `Nothing` for null pointers.\n* High-level structure for controller
  button state: `ControllerButtonState`.\n* High-level structure for controller buttons:
  `ControllerButton`.\n* High-level structure for controller connection: `ControllerDeviceConnection`.\n*
  High-level structure for joystick device connection: `JoyDeviceConnection`.\n* High-level
  structure for joystick button state: `JoyButtonState`.\n* Support for user defined
  events: `registerEvent`, `pushRegisteredEvent`, and `getRegisteredEvent`.\n* Initial
  window visibility can be specified in `WindowConfig` for `createWindow` function.\n*
  `WarpMouseOrigin` is now fully exported and can warp to global coordinates.\n* It's
  possible to retrieve palette information with `paletteNColors`, `paletteColors`
  and `palletColor`.\n\n\n2.2.0\n=====\n\n* Version 2.0.4 of the SDL2 C library is
  now required:\n  * `SDL.Event`:\n    * Add `AudioDeviceEvent` constructor to `Event`\n
  \   * Add `KeymapChangedEvent` constructor to `EventPayload`\n    * Add `mouseWheelEventDirection`
  field to `MouseWheelEventData`\n  * `SDL.Input.Mouse`:\n    * Add `MouseScrollDirection`
  enumeration\n  * `SDL.Raw.Audio`:\n    * Add `clearQueuedAudio` function\n    *
  Add `getQueuedAudioSize` function\n    * Add `queueAudio` function\n  * `SDL.Raw.Enum`:\n
  \   * Add `SDL_GL_CONTEXT_RELEASE_BEHAVIOR` pattern synonym\n    * Add `JoystickPowerLevel`
  pattern synonyms\n    * Add `SDL_MOUSEWHEEL_NORMAL` and `SDL_MOUSEWHEEL_FLIPPED`
  pattern synonyms\n    * Add `SDL_KEYMAPCHANGED`, `SDL_AUDIODEVICEADDED`, `SDL_AUDIODEVICEREMOVED`,\n
  \     `SDL_RENDER_TARGETS_RESET`, and `SDL_RENDER_DEVICE_RESET` pattern synonyms\n
  \   * Add `SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE` and\n      `SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH`
  pattern synonyms\n    * Add `SDL_WINDOW_MOUSE_CAPTURE` pattern synonym\n  * `SDL.Raw.Event`:\n
  \   * Add `captureMouse` function\n    * Add `getGlobalMouseState` function\n    *
  Add `warpMouseGlobal` function\n    * Add `joystickCurrentPowerLevel` function\n
  \   * Add `joystickFromInstanceID` function\n    * Add `gameControllerFromInstanceID`
  function\n  * `SDL.Raw.Event`:\n    * Add `AudioDeviceEvent` constructor to `Event`\n
  \   * Add `KeymapChangedEvent` constructor to `Event`\n    * Add `mouseWheelEventDirection`
  field to `MouseMotionEvent` constructor\n\n* Add `SDL.Exception` module, exposing
  `SDLException`\n* Add new function, `createSoftwareRenderer`, to render onto a surface\n*
  Add joystick POV hat support\n* Remove deprecated functionality:\n  * `InitEverything`
  enumeration in `SDL.Init`\n  * `mapRGB` in `SDL.Video.Renderer`\n  * `setRelativeMouseMode`
  in `SDL.Input.Mouse`\n  * `getRelativeMouseMode` in `SDL.Input.Mouse`\n  * `getMouseLocation`
  in `SDL.Input.Mouse`\n* Remove `ClipboardUpdateEventData`\n* Merge `isScreenSaverEnabled`,
  `enableScreenSaver`, and `disableScreenSaver`\n  into a `screenSaverEnabled` StateVar.\n*
  Make function `surfaceBlit` in `SDL.Video.Renderer` return final blit\n  rectangle
  post-clipping.\n* Make all fields in EventData constructors strict\n* Fix issue
  with `setWindowMode` transitions not working properly between\n  fullscreen and
  windowed modes.\n\n2.1.3.1\n=======\n\n* Raise upper bounds for `vector` to <0.13\n\n2.1.3\n=====\n\n*
  Cabal flag `no-linear` removes dependency on `linear` (and thus, transiently,\n
  \ `lens`). See `SDL.Vect` for details.\n* Remove 'lens' dependency from all examples.\n*
  Add Cabal flag `opengl-example` to separate that target from `examples`,\n  because
  it is now the only example with an extra dependency (OpenGL).\n* Make `hlint` happy
  with examples.\n* Add `updateTexture` wrapper for native `SDL_UpdateTexture`.\n*
  Expose `glGetDrawableSize` (can differ from window size in some environments).\n*
  Correct `hintToString` output to match SDL hint tokens, rather than the names\n
  \ of the CPP macros defining them.\n* Removed `ghc-options: -Wall` until we drop
  support for GHC 7.8. (>1300 warnings!)\n* Various documentation updates.\n\n2.1.2.1\n=======\n\n*
  Raise upper bounds for `lens` to <4.15 (affects examples only)\n\n2.1.2\n=====\n\n*
  Revise some documentation examples to be more idomatic\n* Update `.gitignore` to
  cover `stack` and other tools\n* Raise upper bounds for `transformers` to <0.6\n*
  Lower required SDL2 version to 2.0.2.\n* Fix decoding of `TextEditingEvent` where
  the Raw bindings failed to stop reading\n  character data past the null terminator.\n\n2.1.1\n=====\n\n*
  `SDL.Input.Mouse` new has a new API for fetching the location of the mouse. This\n
  \ API gives you greater control over finding the mouse position with respect to
  the\n  various \"modes\" a mouse can be in. The old API still exists, but will be
  removed\n  at some point in the future.\n* `SDL.Raw` now has a binding to `SDL_free`.\n\n2.1.0\n=====\n\n*
  Introduce `initializeAll` and deprecate `InitEverything`. To fix this deprecation\n
  \ warning, change `initialize [InitEverything]` to `initializeAll`.\n* `surfaceColorKey`,
  `surfaceFillRect` and `surfaceFillRects` now all operate on\n  on RGBA `V4 Word8`
  values. They all implicitly map and unmap (using `SDL_MapRGBA`\n  and `SDL_GetRGBA`
  respectively).\n* `SDL.mapRGB` is now deprecated, as this conversion is always done
  for you.\n  If you still need this routine, use `SDL.Raw.mapRGB`.\n* Fix a runtime
  crash when reading the current BlendMode of a texture. Thanks to\n  @seppeljordan
  for discovering and fixing this bug.\n\n2.0.0\n=====\n* Introduce a set of comprehensive
  high-level bindings to SDL. These bindings\n  should allow users to work with SDL
  while writing idiomatic Haskell code. They\n  take care of pointer manipulation,
  and wrap up values in much more \"natural\"\n  data types. The high-level bindings
  live in the `SDL` namespace, and have been\n  extensively documented.\n* Raw bindings
  have been moved from `Graphics.UI.SDL` to `SDL.Raw`.\n\n\n1.3.1\n=====\n* Correct
  type signature of `getSurfaceBlendMode`\n\n1.3.0\n=====\n* Use pattern synonyms
  exclusively\n  * `Graphics.UI.SDL.Enum.Pattern` overrides `Graphics.UI.SDL.Enum`\n*
  Generalize all IO functions over MonadIO\n* Add convenience wrapper functions for
  constructing FunPtr callbacks\n* Add Typeable instances to all type classes\n* Add
  strictness annotations to all data structure fields\n* Add missing `SDLK_AUDIOPREV`
  enumeration\n* Correct deserialization of `SDL_TEXTINPUT` event\n  * Data beyond
  the null terminator was returned previously\n\n1.2.0\n=====\n* Add support for pattern
  synonyms as an alternative for SDL enumerations\n  * Only present when compiling
  with GHC 7.8 or newer\n* Add missing enumerations:\n  * `keymodShift`, `keymodCtrl`,
  `keymodAlt`, `keymodGUI`\n  * `keyPressend`, `keyReleased`\n  * `toucheMouseID`\n*
  Specialize init flags over `InitFlag`, a `Word32`\n* Generalize `keymod*` enumerations
  over `Num`\n  * The C API is inconsistent on their types\n* Fix foreign imports
  on `Graphics.UI.SDL.Thread`\n* Correct type signature of `getRenderDrawBlendMode`\n*
  Correct type signature of `queryTexture`\n* Remove export of `Keycode` from `Graphics.UI.SDL.Types`\n
  \ * `Graphics.UI.SDL.Enum` already exports `Keycode`\n\n1.1.3\n=====\n* Add missing
  `Keycode` enumerations\n* Add missing enumerations:\n  * `audioAllowFrequencyChange`,
  `audioAllowFormatChange`\n  * `audioAllowChannelsChange`, `audioAllowAnyChange`\n\n1.1.2\n=====\n*
  Add `ClipboardUpdateEvent` to `Event` data structure\n* Add `UnknownEvent` to `Event`
  data structure\n\n1.1.1\n=====\n* Add `Graphics.UI.SDL.Platform` module\n* Add `Graphics.UI.SDL.Thread`
  module and associated types and enumerations\n* Add `getWindowWMInfo`\n* Add `setError`\n*
  Add additional logging functions\n\n1.1.0\n=====\n* Require SDL 2.0.3\n  * Add `gameControllerAddMappingsFromFile`\n
  \ * Add `gameControllerAddMappingsFromRW`\n  * Add `glResetAttributes`\n  * Add
  `mouseButtonEventClicks` field to `WindowEvent`\n* Add missing mouse button enumerations\n\n1.0.2\n=====\n*
  Correct type signature of `getNumTouchFingers`\n\n1.0.1\n=====\n* Factor type of
  `addHintCallback` and `delHintCallback` into `HintCallback`\n* Add `Version` data
  structure\n"
basic-deps:
  exceptions: ! '>=0.4 && <0.11'
  bytestring: ! '>=0.10.4.0 && <0.11'
  base: ! '>=4.7 && <5'
  text: ! '>=1.1.0.0 && <1.3'
  StateVar: ! '>=1.1.0.0 && <1.2'
  linear: ! '>=1.10.1.2 && <1.21'
  transformers: ! '>=0.2 && <0.6'
  vector: ! '>=0.10.9.0 && <0.13'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
- '1.2.0'
- '1.3.0'
- '1.3.1'
- '2.0.0'
- '2.1.0'
- '2.1.1'
- '2.1.2'
- '2.1.2.1'
- '2.1.3'
- '2.1.3.1'
- '2.2.0'
- '2.3.0'
- '2.4.0'
- '2.4.0.1'
- '2.4.1.0'
author: Gabríel Arthúr Pétursson, Oliver Charles
latest: '2.4.1.0'
description-type: haddock
description: ! 'This package contains bindings to the SDL 2 library, in both high-
  and

  low-level forms:


  The ''SDL'' namespace contains high-level bindings, where enumerations are split

  into sum types, and we perform automatic error-checking.


  The ''SDL.Raw'' namespace contains an almost 1-1 translation of the C API into

  Haskell FFI calls. As such, this does not contain sum types nor error

  checking. Thus this namespace is suitable for building your own abstraction

  over SDL, but is not recommended for day-to-day programming.


  Read "SDL" for a getting started guide.'
license-name: BSD3
