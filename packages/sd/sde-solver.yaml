homepage: https://github.com/davnils/sde-solver
changelog-type: ''
hash: 1a95c98598785d1b27e42d561a4e64b0e79eaf89321a135c0887ae16ea274c2d
test-bench-deps: {}
maintainer: nilsson.dd+code@gmail.com
synopsis: Distributed SDE solver
changelog: ''
basic-deps:
  cereal: ! '>=0.3 && <1'
  mwc-random: ! '>=0.12 && <1'
  mersenne-random-pure64: ! '>=0.2.0.3 && <1'
  base: ! '>=4.5 && <5'
  normaldistribution: ! '>=1.1.0.3 && <2'
  ghc-prim: ! '>=0.2 && <1'
  mtl: ! '>=2.1 && <3'
  haskell-mpi: ! '>=1.2 && <2'
  cereal-vector: ! '>=0.2 && <1'
  parallel: ! '>=3.2 && <4'
  vector: ! '>=0.10 && <1'
all-versions:
- 0.1.0.0
author: David Nilsson
latest: 0.1.0.0
description-type: haddock
description: ! 'This package contains utilities for solving SDE instances in various
  ways.

  Basically an ''SDE'' instance is solved using some ''SDESolver'' working with some
  distribution mechanism.

  Results are gathered at the end point of the specified interval.


  Included in the package are ways of doing distributed calculations over an MPI cluster,

  or optionally only using the local solver with built in parallelization.

  Two SDE instances have been implemented; geometric brownian motion and the Langevin
  equation,

  see the haddock documentation for an example.


  The main interface is accessible through "Numeric.DSDE" which provides various way
  of solving generic problems.

  This module supports either local or distributed calculations in the IO monad and
  gathering the results as a distribution.

  Under the surface there is also a working pure implementation for monadic environments,
  using a pure Mersenne twister PRNG.


  Internally there are several abstractions used when dealing with each component
  building up a solution.

  Given some ''SDE'' and ''SDESolver'' instances, it is also required to have some
  PRNG providing normally distributed numbers.

  This has been implemented over some specific monads and only results of type ''Double''.

  All of the internal components are written with polymorphism in mind, acting over
  some monad instance and generic result types in all cases.'
license-name: BSD-3-Clause
