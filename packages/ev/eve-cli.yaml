homepage: https://github.com/ChrisPenner/eve-cli#readme
changelog-type: markdown
hash: 6774f0646e8fe32d63e039aa6942085f96b93a4c5a2ca4d6ef5e3472ad2346fb
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2 && <1.3'
  vty: ! '>=5.20 && <6'
  lens: ! '>=4.16 && <4.17'
  eve-cli: -any
  mtl: ! '>=2.2 && <2.3'
  eve: ! '>=0.1 && <0.2'
maintainer: christopher.penner@gmail.com
synopsis: ''
changelog: ! '# Changelog for eve-cli


  ## Unreleased changes

'
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.7 && <5'
  text: ==1.2.*
  vty: ! '>=5.20 && <6'
  lens: ==4.16.*
  eve-cli: -any
  mtl: ==2.2.*
  eve: ==0.1.*
all-versions:
- 0.2.0.0
author: Chris Penner
latest: 0.2.0.0
description-type: markdown
description: ! "Eve.CLI\n=======\n\nEve.CLI provides [`eve`](https://github.com/ChrisPenner/eve)
  compatible helpers for building CLI apps.\nIt allows you to:\n- Respond to Keyboard,
  Mouse, and Resize Events\n- Render text/images to your terminal\n\nHere's what it
  looks like:\n\n```haskell\nmodule Main where\n\nimport Eve (eve_, App, exit)\nimport
  Eve.CLI (initCLI, onKeypress_, renderImage, Keypress(..))\nimport qualified Data.Text.Lazy
  as T\nimport qualified Graphics.Vty as V\nimport Control.Monad (void)\n\nmain ::
  IO ()\nmain = eve_ $ do\n  initCLI\n  onKeypress_ showKeypress\n    where\n      --
  | Display the last key combination that you pressed on screen\n      showKeypress
  :: Keypress -> App ()\n      showKeypress (Keypress V.KEsc _) = exit\n      showKeypress
  keypress = void . renderImage $ V.text V.defAttr . T.pack . show $ keypress\n```\n\nEvents\n------\n\nEve.CLI
  is a small wrapper on top of [vty](https://github.com/jtdaugherty/vty); so you'll
  also need to import\n`Graphics.Vty` in order to interact with most events. The following
  event listeners are provided:\n\n- onEvent\n- onKeypress\n- onMouseDown\n- onMouseUp\n-
  onResize\n- onPaste\n\nSee the hackage docs for more in depth API documentation.\n\nRendering\n---------\n\nCurrently
  Eve.CLI supports only rendering a\n[`Vty.Image`](http://hackage.haskell.org/package/vty-5.21/docs/Graphics-Vty-Image.html);\nthis
  means you can use any of `Vty`'s image building combinators, then simply\ncall `renderImage`
  with the image you've built.\n"
license-name: BSD-3-Clause
