homepage: https://github.com/YoEight/eventstore#readme
changelog-type: markdown
hash: f8cde913ba4f9beff62b9cdf25750d682735340120bf45055ab6a7678f7aeafa
test-bench-deps:
  exceptions: -any
  cereal: -any
  bytestring: -any
  stm: -any
  base: ! '>=4.7 && <5'
  time: ! '>=1.4 && <1.9'
  unordered-containers: -any
  text: -any
  uuid: -any
  safe-exceptions: -any
  monad-control: -any
  tasty-hspec: -any
  async: -any
  lifted-base: -any
  connection: ==0.2.*
  semigroups: -any
  fast-logger: -any
  containers: -any
  dotnet-timespan: -any
  protobuf: -any
  lifted-async: -any
  hashable: -any
  tasty-hunit: -any
  transformers-base: -any
  stm-chans: -any
  tasty: -any
  eventstore: -any
  aeson: -any
  mono-traversable: ==1.*
maintainer: yo.eight@gmail.com
synopsis: EventStore TCP Client
changelog: ! "1.1.3\n-----\n* Remove `text-format` dependency.\n\n1.1.2\n-----\n*
  Aeson bump version.\n\n1.1.1\n-----\n* Fix connection-manager connection reference.
  The issue was the client was starting\n  to send requests to server even if the
  confirmation hasn't been confirmed yet.\n\n1.1.0\n-----\n* Supports GetEventStore
  >= 4.0.0 protocol changes.\n* No longer support GetEventStore < 4.0.0.\n* Stream
  versions are `Int64`.\n\n1.0.0\n-----\n* Support SemVer versioning.\n\n0.15.0.2\n--------\n*
  Support GHC 8.2.1.\n* Support Stackage LTS 9.\n\n0.15.0.1\n--------\n* Discard version
  restriction on `hashable` library.\n\n0.15.0.0\n--------\n* Overall internal components
  refactoring.\n* Decrease memory pressure by 10 folds.\n* Improve general performance.\n*
  Provide proper logging support using `fast-logger` library.\n* Support operation
  timeout detection.\n* Detects if the server is overwhelmed and act accordingly.\n*
  Improve connection management code.\n* Expose EKG monitoring metrics.\n\n0.14.0.1\n----------\n*
  Fix subscription deadlock on connection drop.\n* Fix subscription catchup state
  tracking on connection drop.\n* Fix internal connection dispose lock implementation.\n*
  Bump `aeson` version.\n\n0.14.0.0\n--------\n* Fix deadlock issues in subscription
  code.\n* Improve cluster connection fiability.\n* Internal refactoring.\n* Typeful
  `EventType`\n\n0.13.1.7\n--------\n* Report stream name when facing a 'Stream not
  found' error from the server on catchup subscription.\n* Prevent the driver from
  deadlocking when asking for catchup subscription on a stream that doesn't exist.\n\n0.13.1.6\n--------\n*
  Fix a deadlock on user side when asking a catchup subscription on a stream that
  doesn't exist.\n\n0.13.1.5\n--------\n* Fix an internal connection bug.\n\n0.13.1.4\n--------\n*
  Bump `aeson` version.\n* Internal connection refactoring.\n\n0.13.1.3\n--------\n*
  Bump `http-client` version.\n\n0.13.1.2\n--------\n* Restrain `http-client` package
  version.\n\n0.13.1.1\n--------\n* Typo on `streamExists` implementation.\n\n0.13.1.0\n--------\n*
  Add `streamExists` `ExpectedVersion` smart constructor.\n\n0.13.0.1\n--------\n*
  Bump protobuf version\n\n0.13.0.0\n--------\n* Implement SSL Connection\n* Implement
  `waitConfirmation` function\n\n0.12.0.0\n--------\n* Quit using internal .NET TimeSpan
  for dotnet-timespan TimeSpan\n\n0.11.0.0\n--------\n* Implement Cluster connection.\n*
  Domain can be used to connect to a server instance.\n\n0.10.0.2\n--------\n* Bump
  aeson version.\n\n0.10.0.1\n--------\n* Bump async version.\n\n\n0.10.0.0\n--------\n*
  Fix $maxAge and $cacheControl TimeSpan metadata serialization.\n* Fix `timeSpanFrom*`
  functions.\n* Implement `timeSpanTotalDays`, `timeSpanTotalHours`, `timeSpanTotalMinutes`
  and `timeSpanTotalSeconds`.\n* Add `withBinary` and `withBinaryAndMetadata`.\n*
  Remove useless `TimeSpan` `ToJSON` and `FromJSON` instances.\n* Drop `attoparsec`
  dependency.\n\n0.9.1.3\n-------\n* Increase cereal upper bound to <0.6\n\n0.9.1.2\n-------\n*
  Increase aeson upper bound to <0.11\n\n0.9.1.1\n-------\n* Fix stackage integration.\n\n0.9.1.0\n-------\n*
  Introduce convinient persistent subscription functions.\n* Add multi GHC version
  testing.\n\n0.9.0.0\n-------\n* Rewrite entirely the internals.\n* Implement integration
  tests.\n* Rename every `ExpectedVersion` smart constructors.\n* Improve internal
  and public documentation.\n* Improve failure reports when the connection dropped.\n*
  Implement more robust internal connection.\n\n0.8.0.0\n-------\n* Implement competing
  consumers.\n* Expose an uniform API among all kind of subscriptions.\n* Rewrite
  internal subscription management.\n* Add missing `Eq` or `Show` instances for exposed
  datatypes.\n* Add `streamMetadataCustomPropertyValue` and `streamMetadataCustomProperty`.\n*
  Add logging capability.\n\n0.7.2.1\n-------\n* Fix compilation issue\n\n0.7.2.0\n-------\n*
  Add `setStreamMetadata`\n* Add `getStreamMetadata`\n\n0.7.1.0\n-------\n* Internal
  connection changes\n* Allow creating an event with an existing ID\n\n0.7.0.1\n-------\n*
  Tight package channnel to connection instance in order to prevent loss on connection
  drops.\n* `Connection` has asynchronous operation for real now.\n\n0.7.0.0\n-------\n*
  Fix date conversion. `recordedEventCreateEpoch` is no longer exposed.\n* Add `waitTillCatchup`
  and `hasCaughtUp` functions.\n* Add `exactStream` `ExpectedVersion` smart constructor.
  As the result,\n`ExpectedVersion` constructors are no longer exposed. You have to
  use\n`anyStream`, `noStream`, `emptyStream` or `exactStream` instead.\n\n0.6.0.1\n-------\nNo
  changes\n\n0.6.0.0\n-------\n* Support `keepRetrying` reconnection strategy.\n"
basic-deps:
  http-client: ==0.5.*
  exceptions: -any
  cereal: ! '>=0.4 && <0.6'
  bytestring: -any
  ekg-core: -any
  stm: -any
  base: ! '>=4.7 && <5'
  time: ! '>=1.4 && <1.9'
  unordered-containers: -any
  text: -any
  uuid: ==1.3.*
  safe-exceptions: -any
  clock: -any
  monad-control: -any
  lifted-base: -any
  connection: ==0.2.*
  semigroups: ! '>=0.5'
  array: -any
  fast-logger: -any
  containers: ==0.5.*
  dotnet-timespan: -any
  bifunctors: -any
  protobuf: ! '>=0.2.1.1 && <0.3'
  interpolate: -any
  mtl: -any
  lifted-async: -any
  hashable: -any
  transformers-base: -any
  stm-chans: -any
  monad-logger: ! '>=0.3.20'
  random: ==1.*
  machines: ! '>=0.6'
  aeson: ! '>=0.8 && <1.4'
  mono-traversable: ==1.*
  dns: ! '>=3.0.1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.1.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.6.0.0'
- '0.6.0.1'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.2.1'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.1.0'
- '0.9.1.1'
- '0.9.1.2'
- '0.9.1.3'
- '0.10.0.0'
- '0.10.0.1'
- '0.10.0.2'
- '0.11.0.0'
- '0.12.0.0'
- '0.13.1.5'
- '0.13.1.6'
- '0.13.1.7'
- '0.14.0.0'
- '0.14.0.1'
- '0.14.0.2'
- '0.15.0.0'
- '0.15.0.1'
- '0.15.0.2'
- '1.0.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
author: Yorick Laupa
latest: '1.1.3'
description-type: markdown
description: ! "EventStore Haskell TCP client\n=============================\n\n[![CircleCI](https://circleci.com/gh/YoEight/eventstore/tree/dev%2F1.0.svg?style=svg)](https://circleci.com/gh/YoEight/eventstore/tree/dev%2F1.0)\n\n[![Talk
  and exchange ideas in our dedicated Discord Server!]()](https://discord.gg/x7q37jJ)\n\nThat
  driver supports 100% of EventStore features !\nMore information about the GetEventStore
  database can be found there: https://geteventstore.com/\n\nRequirements\n============\n
  \ * 64bits system\n  * GHC        >= 7.8.3\n  * Cabal      >= 1.18\n  * EventStore
  >= 3.0.0 (>= 3.1.0 if you want competing consumers).\n\n*Note: If you use this client
  version >= to `1.1`, it will only supports EventStore >= 4.0.0.*\n\nInstall\n=======\n\n*
  Using [Hackage](https://hackage.haskell.org/package/eventstore)\n```\n$ cabal update\n$
  cabal install eventstore\n```\n\n* From source\n```\n$ git clone https://github.com/YoEight/eventstore.git\n$
  cd eventstore\n$ cabal install --only-dependencies\n$ cabal configure\n$ cabal install\n```\n\nHow
  to test\n===========\nTests are available. Those assume a server is running on `127.0.0.1`
  and `1113` port.\n```\n$ cabal install --only-dependencies --enable-tests\n$ cabal
  configure --enable-tests\n$ cabal test\n```\n\nHow to use\n==========\n\nThis code
  snippet showcases client version >= `1.1`.\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-} -- That library uses `Text` pervasively. This pragma permits to use\n                                   --
  String literal when a Text is needed.\nmodule Main where\n\nimport Control.Concurrent.Async
  (wait)\nimport Data.Aeson\n-- It requires to have `aeson` package installed. Note
  that EventStore doesn't constraint you to JSON\n-- format but putting common use
  aside, by doing so you'll be able to use some interesting EventStore\n-- features
  like its Complex Event Processing (CEP) capabality.\n\nimport Database.EventStore\n--
  Note that imports 'NonEmpty' data constructor and 'nonEmpty' function from\n-- 'Data.List.NonEmpty'.\n\nmain
  :: IO ()\nmain = do\n    -- A common pattern with an EventStore connection is to
  create a single instance only and pass it\n    -- wherever you need it (it's threadsafe).
  It's very important to not consider an EventStore connection like\n    -- its regular
  SQL counterpart. An EventStore connection will try its best to reconnect\n    --
  automatically to the server if the connection dropped. Of course that behavior can
  be tuned\n    -- through some settings.\n    conn <- connect defaultSettings (Static
  \"127.0.0.1\" 1113)\n    let js  = object [\"isHaskellTheBest\" .= True] -- (.=)
  comes from Data.Aeson module.\n        evt = createEvent \"programming\" Nothing
  (withJson js)\n\n    -- Appends an event to a stream named `languages`.\n    as
  <- sendEvent conn \"languages\" anyVersion evt Nothing\n\n    -- EventStore interactions
  are fundamentally asynchronous. Nothing requires you to wait\n    -- for the completion
  of an operation, but it's good to know if something went wrong.\n    _ <- wait as\n\n
  \   -- Again, if you decide to `shutdown` an EventStore connection, it means your
  application is\n    -- about to terminate.\n    shutdown conn\n\n    -- Make sure
  the EventStore connection completes every ongoing operation. For instance, if\n
  \   -- at the moment we call `shutdown` and some operations (or subscriptions) were
  still pending,\n    -- the connection aborted all of them.\n    waitTillClosed conn\n```\nNotes\n=====\nThat
  library was tested on Linux and OSX.\n\nContributions and bug reports are welcome!\n\nBSD3
  License\n\n-Yorick Laupa\n"
license-name: BSD3
