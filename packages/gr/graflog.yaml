homepage: https://github.com/m-arnold/graflog#readme
changelog-type: ''
hash: 936eb6da89e0aca0f9990b061acd79d317eab5baf29e6e25f10357f1f14358c1
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  graflog: -any
  containers: -any
  test-fixture: -any
  mtl: -any
  aeson: -any
maintainer: marnold@cj.com
synopsis: Monadic correlated log events
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  containers: -any
  mtl: -any
  text-conversions: -any
  aeson: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 1.0.0
- 2.0.0
- 3.0.0
- 4.0.0
- 5.0.0
- 6.0.0
- 6.1.0
- 6.1.1
- 6.1.2
- 6.1.3
- 6.1.4
- 6.1.5
author: Michael Adlai Arnold
latest: 6.1.5
description-type: markdown
description: ! "# Graflog\n\nMonadic correlated log events!\n\n##To Use:\n\n- given
  a data type:\n    ```\n    data UserSpec = UserSpec\n      { email :: Email\n      ,
  password :: Text\n      , name :: Text\n      } deriving (Eq, Show, Generic)\n    ```\n\n
  \   we can create an instance of ToLog:\n    ```\n    instance ToLog UserSpec where\n
  \     toLog UserSpec{email, name} =\n        dictionary\n          [ pair \"email\"
  email\n          , pair \"password\" Redacted\n          , pair \"name\" name ]\n
  \   ```\n\n    and derive JSON instances of that:\n    ```\n    deriveJSON defaultOptions
  ''UserSpec\n    ```\n\n    which can then be logged inside a monad:\n    ```\n    foo
  = do\n      let jimbo = UserSpec (Email \"jimbo@gmail.com\" ...)\n      logJSON
  $ Event (CorrelationId 0) (EventId 0) \"User\" (toLog jimbo)\n      return jimbo\n
  \   ```\n\n- you must force stdout to flush after each line, or logs won't appear
  in a timely manner: call `Graflog.Console.enableStdoutLineBuffering` at the top
  of your main function.\n\n- CorrelationId and EventId generation are not yet supported,
  so you must create an event manually:\n  - inside do notation: `let event = Event
  (CorrelationId 0) (EventId 0)`\n  - followed at some point by: `logJSON $ event
  (Action \"some kind of metadata\") (toLog dataToLog)`\n\n##To Do:\n\n- CorrelationId
  and EventId generation\n- Generic derivation of ToLog / ToJSON instances\n- Support
  for non-JSON logging?\n"
license-name: BSD-3-Clause
