homepage: https://github.com/blamario/grampa/tree/master/grammatical-parsers
changelog-type: ''
hash: 212bbf0aa891fb53f168440e2577d9ee1a74c9203c4e986e7399455e1f17e083
test-bench-deps:
  rank2classes: ! '>=1.0.2 && <1.2'
  monoid-subclasses: ==0.4.*
  grammatical-parsers: -any
  checkers: ! '>=0.4.6 && <0.5'
  base: ! '>=4.9 && <5'
  testing-feat: <0.5
  text: ! '>=1.1'
  criterion: ! '>=1.0'
  doctest: ! '>=0.8'
  containers: ! '>=0.5.7.0 && <0.6'
  parsers: <0.13
  tasty-quickcheck: ! '>=0.7'
  tasty: ! '>=0.7'
  deepseq: ! '>=1.1'
  QuickCheck: ! '>=2 && <3'
maintainer: Mario Blažević <blamario@protonmail.com>
synopsis: parsers that combine into grammars
changelog: ''
basic-deps:
  rank2classes: ! '>=1.0.2 && <1.2'
  monoid-subclasses: ==0.4.*
  grammatical-parsers: -any
  base: ! '>=4.9 && <5'
  containers: ! '>=0.5.7.0 && <0.6'
  parsers: <0.13
  transformers: ! '>=0.5 && <0.6'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
author: Mario Blažević
latest: '0.3.1'
description-type: markdown
description: ! "Grammatical Parsers\n===================\n\nBehold, yet another parser
  combinator library in Haskell. Except this one is capable of working with grammars
  rather than mere parsers. A more in-depth description is available in the [paper](../Grampa.lhs.pdf)
  from Haskell Symposium 2017, what follows is a short tutorial.\n\nYou can apply
  the usual\n[Applicative](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative),\n[Alternative](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Alternative),
  and\n[Monad](http://hackage.haskell.org/package/base/docs/Control-Monad.html#t:Monad)
  operators to combine primitive parsers\ninto larger ones. The combinators from the
  [parsers](http://hackage.haskell.org/package/parsers) library type classes\nare
  also available. Here are some typical imports you may need:\n\n~~~ {.haskell}\n{-#
  LANGUAGE RecordWildCards, ScopedTypeVariables, TemplateHaskell #-}\nmodule README
  where\nimport Control.Applicative\nimport Data.Char (isDigit)\nimport Data.Functor.Classes
  (Show1, showsPrec1)\nimport Text.Grampa\nimport Text.Grampa.ContextFree.LeftRecursive
  (Parser)\nimport qualified Rank2.TH\n~~~\n\nWhat puts this library apart from most
  is that these parsers are *grammatical*, just as the library name says. Instead\nof
  writing the parser definitions as top-level bindings, you can and should group them
  into a grammar record definition,\nlike this:\n\n~~~ {.haskell}\narithmetic :: GrammarBuilder
  Arithmetic g Parser String\narithmetic Arithmetic{..} = Arithmetic{\n   sum= product\n
  \        <|> string \"-\" *> (negate <$> product)\n         <|> (+) <$> sum <* string
  \"+\" <*> product\n         <|> (-) <$> sum <* string \"-\" <*> product,\n   product=
  factor\n         <|> (*) <$> product <* string \"*\" <*> factor\n         <|> div
  <$> product <* string \"/\" <*> factor,\n   factor= read <$> number\n           <|>
  string \"(\" *> sum <* string \")\",\n   number= takeCharsWhile1 isDigit <?> \"number\"}\n~~~\n\nWhat
  on Earth for? One good reason is that these parser definitions can then be left-recursive,
  which is normally a\ndeath knell for parser libraries. There are other benefits
  like memoization and grammar composability, and the main\ndownside is the obligation
  to declare the grammar record:\n\n~~~ {.haskell}\ndata Arithmetic f = Arithmetic{sum
  \    :: f Int,\n                               product :: f Int,\n                               factor
  \ :: f Int,\n                               number  :: f String}\n~~~\n\nand to
  make it an instance of several rank 2 type classes:\n\n~~~ {.haskell}\n$(Rank2.TH.deriveAll
  ''Arithmetic)\n~~~\n\nOptionally, you may also be inclined to declare a proper ``Show``
  instance, as it's often handy:\n\n~~~ {.haskell}\ninstance Show1 f => Show (Arithmetic
  f) where\n   show Arithmetic{..} =\n      \"Arithmetic{\\n  sum=\" ++ showsPrec1
  0 sum\n           (\",\\n  product=\" ++ showsPrec1 0 factor\n           (\",\\n
  \ factor=\" ++ showsPrec1 0 factor\n           (\",\\n  number=\" ++ showsPrec1
  0 number \"}\")))\n~~~\n\nOnce that's done, use [fixGrammar](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:fixGrammar)
  to, well, fix the grammar\n\n~~~ {.haskell}\ngrammar = fixGrammar arithmetic\n~~~\n\nand
  then [parseComplete](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:parseComplete)\nor
  [parsePrefix](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:parsePrefix)
  to parse\nsome input.\n\n~~~ {.haskell}\n-- |\n-- >>> parseComplete grammar \"42\"\n--
  Arithmetic{\n--   sum=Compose (Right [42]),\n--   product=Compose (Right [42]),\n--
  \  factor=Compose (Right [42]),\n--   number=Compose (Right [\"42\"])}\n-- >>> parseComplete
  grammar \"1+2*3\"\n-- Arithmetic{\n--   sum=Compose (Right [7]),\n--   product=Compose
  (Left (ParseFailure 1 [\"endOfInput\"])),\n--   factor=Compose (Left (ParseFailure
  1 [\"endOfInput\"])),\n--   number=Compose (Left (ParseFailure 1 [\"endOfInput\"]))}\n--
  >>> parsePrefix grammar \"1+2*3 apples\"\n-- Arithmetic{\n--   sum=Compose (Compose
  (Right [(\"+2*3 apples\",1),(\"*3 apples\",3),(\" apples\",7)])),\n--   product=Compose
  (Compose (Right [(\"+2*3 apples\",1)])),\n--   factor=Compose (Compose (Right [(\"+2*3
  apples\",1)])),\n--   number=Compose (Compose (Right [(\"+2*3 apples\",\"1\")]))}\n~~~\n\nTo
  see more grammar examples, go straight to the\n[examples](https://github.com/blamario/grampa/tree/master/grammatical-parsers/examples)
  directory that builds up several\nsmaller grammars and combines them all together
  in the\n[Combined](https://github.com/blamario/grampa/blob/master/grammatical-parsers/examples/Combined.hs)
  module.\n\nFor more conventional tastes there are monolithic examples of\n[Lua](https://github.com/blamario/language-lua2/blob/master/src/Language/Lua/Grammar.hs)
  and [Oberon](http://hackage.haskell.org/package/language-oberon) grammars as well.\n"
license-name: BSD3
