homepage: http://projects.haskell.org/graphviz/
changelog-type: markdown
hash: 5fad513f27c6fa4ee92f27461bb7386a5541b6b7edd601483fe693d4ac3963c5
test-bench-deps:
  fgl-arbitrary: ==0.2.*
  base: -any
  hspec: ! '>=2.1 && <2.6'
  text: -any
  filepath: -any
  criterion: ! '>=0.5 && <1.5'
  graphviz: -any
  containers: -any
  fgl: ! '>=5.5.0.0'
  deepseq: -any
  QuickCheck: ! '>=2.3 && <2.12'
  hspec-discover: -any
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Bindings to Graphviz for graph visualisation.
changelog: ! "% Changelog\n% Ivan Lazar Miljenovic\n\nRelease History and Changelog\n=============================\n\nThe
  following is information about what major changes have gone into\neach release.\n\nChanges
  in 2999.20.0.2\n----------------------\n\n* Fix Haddock issue (thanks to **Moritz
  Kiefer**)\n\n* Bump HSpec upper bound (thanks to **Moritz Kiefer**)\n\n* Make Hackage
  happier with Cabal-Version field\n\nChanges in 2999.20.0.1\n----------------------\n\n*
  Allow building with temporary-1.3.*.\n\nChanges in 2999.20.0.0\n----------------------\n\n*
  Can now create subgraphs using the Monadic representation.\n\n* Allow unescaped
  `-` and `'` in HTML labels (thanks to **Andrey\n  Kartashov**)\n\n* Support for
  strict `Text` instances for printing/parsing.\n\n* Creating a Graph representation
  with `mkGraph` was not adding edges\n  correctly (reported by **Joshua Chia**).\n\n*
  Test suite now uses HSpec, making it a lot easier to add tests for\n  specific issues.\n\n*
  Builds with GHC 8.4.* (thanks to **Tony Day**).\n\n* Monoid and Semigroup instances
  for Monadic representation (thanks to\n  **Chris Martin**).\n\n* Be more lenient
  in parsing some attributes (e.g. allow `top` instead\n  of just `t` for `VerticalPlacement`).\n\n*
  Add new HTML attributes: `Columns`, `GradientAngle`, `Rows`, `Sides`\n  and `Style`.\n\n*
  Improve/update the TestParsing executable to work on being able to\n  parse all
  the sample `Dot` graphs shipped with Graphviz.\n\n* Bump dependencies.\n\nChanges
  in 2999.19.0.0\n----------------------\n\n* Roll back change in 2999.18.1.0 for
  Monadic graphs, as they turn out\n  to not actually work in practice (reported by
  **Lennart Spitzner**).\n\n* Add a `quickParams` value to help with testing graphs
  in ghci\n  (requested by **Ian Jeffries**).\n\n* Fix parsing of edge chains (reported
  by **Jonas Collberg**).\n\n* Fix how seemingly numeric text literals are quoted
  (reported by\n  **Joey Hess**).\n\nChanges in 2999.18.1.2\n----------------------\n\n*
  Allow dlist-0.8, thanks to **Sean Leather**.\n\n* Properly allow QuickCheck-2.9.\n\nChanges
  in 2999.18.1.1\n----------------------\n\n* Bump allowed version of QuickCheck for
  the test suite.\n\nChanges in 2999.18.1.0\n----------------------\n\n* Monadic graphs
  can now have edges to and from lists of nodes, as\n  requested by **Harold Carr**.\n\n*
  Compatible with GHC-8.* pre-releases.\n\n    - Please note that there is currently
  a warning emitted on\n      compilation by GHC-8.*; this has been reported\n      [here](https://ghc.haskell.org/trac/ghc/ticket/11822).\n\nChanges
  in 2999.18.0.2\n----------------------\n\n* Match new behaviour of `dot`, etc. in
  supporting edge specifications\n  like `a, b -> c, d` (spotted by **Dilawar Singh**).\n\nChanges
  in 2999.18.0.1\n----------------------\n\n* Loosened bound on `fgl-arbitrary`.\n\nChanges
  in 2999.18.0.0\n----------------------\n\n* Now builds on GHC 7.10.*.\n\n* Attribute
  changes:\n\n    - Added the `NoTranslate` attribute.\n\n    - Add support for overlines
  in HTML labels.\n\n    Both of these are available as of Graphviz 2.38.0, but were\n
  \   somehow overlooked in previous releases of this library.\n\n* Uses new `fgl-arbitrary`
  library for testing rather than custom\n  instances for FGL graphs.\n\n* Migrated
  to git; central repository now on\n  [GitHub](https://github.com/ivan-m/graphviz).\n\nChanges
  in 2999.17.0.2\n----------------------\n\n* Augmentation tests are no longer run
  by default.  This avoids\n  problems where Graphviz is not installed/configured
  properly.\n\n* Use `.gv` for temporary files instead of `.dot`.\n\nChanges in 2999.17.0.1\n----------------------\n\n*
  Allow usage of `transformers-0.4.*`, by **Sergei Trofimovich**.\n\nChanges in 2999.17.0.0\n----------------------\n\n*
  Add support for Graphviz 2.32.0, 2.32.1, 2.34.0, 2.36.0 and 2.38.0:\n\n    - **WARNING**:
  at least as of Graphviz-2.32.0, `dot -Tcanon` no\n      longer produces Dot code
  that is in the format expected by the\n      Canonical Dot representation in this
  library.  As such, unless\n      you're very sure of your sources you should _always_
  use the\n      Generalised representation for parsing (see also the new\n      `FromGeneralisedDot`
  class mentioned below).\n\n    - New attributes:\n\n        + `XDotVersion` (as
  of 2.34.0)\n\n        + `InputScale` (as of 2.36.0)\n\n        + `OverlapShrink`
  (as of 2.36.0)\n\n    - Changed attributes:\n\n        + `Aspect` no longer available
  (as of 2.36.0)\n\n        + New `ModeType` values for use with `sfdp`: `SpringMode`
  and\n          `MaxEnt`.\n\n        + `Weight` now takes a value of type `Number`,
  that explicitly\n          distinguishes between `Doubles` and `Ints`.\n\n        +
  `FixedSize` and `Normalize` now have their own types.\n\n        + New `Shape`s:
  `Star` and `Underline` (as well as `Square`\n          which seems to have been
  omitted from previous versions).\n\n    - Other relevant changes:\n\n        + `XDot`
  now takes an optional version.  Note that this\n          doesn't have any effect
  on how _graphviz_ works.\n\n        + The default extension for Dot-graphs is now
  `.gv` rather\n          than `.dot` to reflect Graphviz's changed conventions.\n\n*
  Other changes to the API:\n\n    - Add the `FromGeneralisedDot` class, which provides
  a\n      semi-inverse to `fromCanonical` in `DotRepr`.\n\n    - `GraphID` now uses
  `Number` rather than separate `Int` and\n      `Double` constructors; this only
  matters if you manually\n      constructed or de-constructed `GraphID` values (`ToGraphID`\n
  \     still works).\n\n    - Add the ability to parse a Dot graph \"liberally\":
  that is, if an\n      `Attribute` doesn't match the specification, then let it fall\n
  \     back to an `UnknownAttribute`.  This is still experimental, and\n      requires
  more manual usage than the in-built commands (e.g. it\n      isn't supported in
  the default round-tripping).\n\n    - Now using the definition of `bracket` from
  `polyparse >= 1.9`.\n\n    - Monadic representation now has `Functor` and `Applicative`\n
  \     instances to satisfy the up-coming changes in GHC 7.10.\n\n* Compilation time
  has been reduced in two ways:\n\n    - The `Data.GraphViz.Attributes.Complete` module
  has been split up\n      (but still exports the same API, so no need to import more\n
  \     modules).  Whilst I haven't measured it, this should also reduce\n      memory
  requirements for compilation.\n\n    - The testsuite now uses the library explicitly,
  and thus no\n      longer needs to re-compile half the library.\n\n* Bug-fixes:\n\n
  \   - Double values are now longer parseable without double quotes if\n      they
  have an exponential term (to better match the definition).\n\n    - It is no longer
  assumed when round-tripping that `dot -Tdot`\n      generates canonicalised Dot
  graphs.\n\n* The `TestParsing` script is now directly buildable by Cabal using\n
  \ the `test-parsing` flag (the resulting executable is called\n  `graphviz-testparsing`).
  \ This is not made an actual test-suite as\n  not all files found will be actual
  Dot graphs, and it's known that\n  it fails on some.  Instead it's meant to be used
  as an indication of\n  how well this library parses \"real-world\" Dot code.\n\nChanges
  in 2999.16.0.0\n----------------------\n\n* Add support for Graphviz-2.30.0:\n\n
  \   - New attributes:\n\n        + `Area`\n        + `Head_LP`\n        + `LayerListSep`\n
  \       + `LayerSelect`\n        + `Tail_LP`\n        + `XLP`\n\n    - `BgColor`,
  `Color` and `FillColor` now take a list of colors\n      with optional weightings.\n\n
  \   - Layer handling now supports layer sub-ranges.\n\n    - Added the voronoi-based
  option to `Overlap`.\n\n    - Added the `Striped` and `Wedged` styles.\n\n* Updates
  to attributes and their values:\n\n    - The following attributes have had their
  values changed to better\n      reflect what they represent:\n\n        + `FontPath`
  takes a `Path` value.\n\n        + `Layout` takes a `GraphvizCommand` (and thus\n
  \         `GraphvizCommand` has been moved to\n          `Data.GraphViz.Attributes.Complete`).\n\n
  \   - Added `MDS` to `Model` (which had somehow been overlooked).\n\n    - Various
  attributes now have defaults added/updated/removed if\n      wrong.\n\n    - Removed
  the following deprecated attributes:\n\n        + `ShapeFile`\n\n        + `Z`\n\n*
  Now any value that has a defined default can be parsed when the Dot\n  code just
  has `attribute=\"\"` (which `dot -Tcanon` is fond of doing\n  to \"reset\" attributes).\n\n*
  `GraphvizCommand` now defines `Sfdp` (which had somehow been\n  overlooked up till
  now).\n\n* The `canonicalise` and related functions have been re-written;\n  whilst
  there might be some cases where their behaviour does not\n  fully match how `dot
  -Tcanon` and `tred` behave (due to the\n  interaction of various attributes), the
  new implementation is much\n  more sane.\n\n* Use temporary files rather than pipes
  when running dot, etc.\n\n    Makes it more portable, and also avoids issues where
  dot, etc. use\n    100% CPU when a graph is passed in via stdin.\n\n    Original
  patch by **Henning Thielemann**.\n\n* `renderCompactDot` now outputs to just one
  line (which means it's\n  shorter, but more difficult to read for a human).\n\n*
  The QuickCheck instances are a bit smarter now to avoid having such\n  ugly huge
  outputs when a test fails.\n\n* More documentation to help you understand what certain
  data types\n  are for, etc.\n\nChanges in 2999.15.0.1\n----------------------\n\n*
  Fixed bug where `canonicalise` and related functions did not\n  properly deal with
  attributes of a single node or edge within a\n  sub-graph.\n\nChanges in 2999.15.0.0\n----------------------\n\n*
  The repository is now hosted on\n  [hub.darcs.net](http://hub.darcs.net/ivanm/graphviz),
  and using the\n  bug-tracker there.\n\n* Updates to various `Attribute` definitions:\n\n
  \   - The list of available shapes has been expanded to take into\n      account
  the new synthetic biology shapes.\n\n    - The `Size` and `FontNames` attributes
  now have specified data types.\n\n    - The optional start and end points for `Spline`s
  were previously\n      the wrong way round; this has now been fixed.\n\n    - Explicitly
  only print 2-dimensional `Point` values for `Rect`\n      and `DPoint` (previously
  only 2-dimensional values where parsed,\n      but it was possible to print a 3-dimensional
  value).\n\n    - HTML-like labels previously disallowed empty textual label\n      components
  when parsing; spotted by **Daniel Hummel**.\n\n* `GraphvizParams` now lets you specify
  whether a \"cluster\" is\n  actually a cluster or a sub-graph.  Requested by **Gabor
  Greif**.\n\n* Fixed an error where printing edges whose attributes contained a\n
  \ `ColorScheme` attribute, that attribute would stay in the state and\n  the old
  color scheme would override the _parent's_ state.\n\n* Previously, some malformed
  attributes were accepted when being\n  parsed as they silently became parsed as
  an `UnknownAttribute`.\n  Now, attributes where the attribute name and the equal
  sign are\n  successfully parsed **but** the value of the attribute is _not_\n  successfully
  parse will throw an unrecoverable error.\n\n    **Note**: this does mean that some
  Dot graphs that are accepted by\n    Graphviz (as they separate tokenizing from
  parsing; as such\n    something like `\"0.1\"` is successfully accepted as an integer,\n
  \   specifically `0`) are no longer accepted when parsing them in.\n\n* Miscellaneous
  parsing improvements:\n\n    - Whilst not specified anywhere, Graphviz seems to
  treat empty\n      quotes as values for attributes expecting a number as their\n
  \     default; as such, this is now taken into account when parsing.\n\n    - `DPoint`
  values can now parse an optional `+` prefix.\n\n    - Whitespaces after commas in
  HSV colors are now accepted.\n\n* Error messages from parsing are improved to help
  you track down\n  where the parsing error occurred (in that it's easier to find
  which\n  attribute failed to parse, etc.).\n\n* Some parsing combinators are no
  longer publicly accessible, but\n  shouldn't be needed by end users anyway (as they
  were there for\n  parsing the Attribute data type).\n\nChanges in 2999.14.1.0\n----------------------\n\n*
  Add `isGraphvizInstalled` and `quitWithoutGraphviz` for programs to\n  test whether
  Graphviz has been installed (as previous attempts at\n  doing so via actual calls
  to dot, neato, etc. weren't working and\n  would be too verbose anyway).\n\nChanges
  in 2999.14.0.0\n----------------------\n\n* Added an instance of `Labellable` for
  strict `Text` values, as\n  requested by **Erik Rantapaa**.\n\nChanges in 2999.13.0.3\n----------------------\n\n*
  Allow usage of transformers-0.3.*.  Spotted by **Peter Simons**.\n\nChanges in 2999.13.0.2\n----------------------\n\n*
  The `String` instance for `ToGraphID` requires the\n  `TypeSynonymInstances` pragma
  (at least on GHC < 7.4).  Spotted by\n  **Gregory Guthrie**.\n\nChanges in 2999.13.0.1\n----------------------\n\n*
  Fixed Haddock typos.\n\nChanges in 2999.13.0.0\n----------------------\n\n* Added
  support for the `osage` and `patchwork` visualisation tools,\n  available as of
  Graphviz-2.28.0.\n\n* Updated attributes as of Graphviz-2.28.0:\n\n    - `SVG` colors
  are now supported, and the support for different\n      colors has been revamped.\n\n
  \   - `overlap=false` is now equivalent to `overlap=prism` and the\n      `RemoveOverlaps`
  option has been removed.\n\n    - `LabelScheme` and `Rotation` are new attributes
  for use with\n      `sfdp`.\n\n    - `Scale` is a new attribute for use with `twopi`.\n\n
  \   - Add new italics, bold, underline, superscript and subscript\n      options
  for HTML-like labels.\n\n    - `LHeight` and `LWidth` for getting the height and
  width of the\n      root graph and clusters.\n\n* Updated attributes from the current
  development branch of Graphviz\n  (i.e. 2.29.*).  Please note that these will probably
  not work yet,\n  but are implemented now for future-proofing.\n\n    - A new style
  for edges: `Tapered`.\n\n    - `XLabel` allows you to specify labels external to
  a node or\n      edge.  `ForceLabels` allow you to specify that these should be\n
  \     drawn even when they will cause overlaps.\n\n    - `ImagePath` allows you
  to specify where to search for images.\n\n    - HTML-like labels now support `ID`
  values as well as horizontal\n      and vertical rules.\n\n    - `BgColor` and `FillColor`
  now take a list of colors: this allows\n      gradient fills for graphs, clusters
  and nodes.  The `Radial`\n      style and `GradientAngle` are also used for this
  purpose.\n\n    - `FillColor` is now used by edges to set the color of any arrows.\n\n
  \   - [WebP](http://en.wikipedia.org/wiki/WebP) output support added.\n\n* Other
  attribute changes:\n\n    - Use a specified data type for the `Ordering` attribute
  rather\n      than an arbitrary `Text` value, and provide a documented wrapper\n
  \     in `Data.GraphViz.Attributes`.\n\n    - `Bb` has been renamed `BoundingBox`.\n\n
  \   - `ID` now only takes `EscString` (a type alias for `Text`) values\n      rather
  than arbitrary `Label`s.\n\n    - The `Data.GraphViz.Attributes.HTML` module has
  had all values\n      re-named and is now meant to be imported qualified.  It is
  also\n      no longer re-exported from `Data.GraphViz.Attributes.Complete`.\n\n*
  The `ToGraphID` class provides a common wrapper to help create\n  cluster identifiers,
  etc.\n\n* Cabal's `Test-Suite` functionality is now used.  As part of this,\n  the
  `Data.GraphViz.Testing` module and sub-modules are no longer\n  exported by the
  library.\n\n* The new `Benchmark` support in Cabal-1.14 is now used for the\n  benchmark
  script.\n\n* Dropped support for base-3.\n\n* The `Data.GraphViz.State` module is
  no longer exposed, as there's no\n  need for users to use it.\n\n* Bugfixes:\n\n
  \   - Some corner cases in canonicalisation prevented it from being\n      idempotent.\n\n
  \   - The `TestParsing` script will no longer crash and refuse to\n      continue
  if an IO-based error (e.g. unable to successfully call\n      `dot`) occurs.\n\n
  \   - A typo was spotted by **Gabor Greif**.\n\nChanges in 2999.12.0.4\n----------------------\n\n*
  Parsing error messages have been cleared up, especially when parsing\n  Dot graphs.
  \ This came about from trying to help **Uri J. Braun**\n  with an error in his code
  (which took a while to diagnose as a\n  problem with the node type).\n\n* Made more
  clear to people looking in `Data.GraphViz` who want to\n  create Dot graphs by hand
  to look in `Data.GraphViz.Types` (came\n  about when **Rustom Mody** stated he got
  confused trying to work out\n  how to do this).\n\n* Fixed up augmentation; bug
  and fix spotted by **Max Rabkin**.\n\n* Fix up the TestParsing script to actually
  use the new type setup.\n  It can also now take a single directory as an argument,
  and will try\n  to parse all (non-recursive) files in that directory.\n\nChanges
  in 2999.12.0.3\n----------------------\n\n* Fixes various mistakes in the Haddock
  documentation that slipped\n  through (either in the `String -> Text` conversion
  or adding new\n  modules and not checking their documentation thoroughly enough).\n\nChanges
  in 2999.12.0.2\n----------------------\n\n* Forgot to explicitly list the module
  for Arbitrary instance for the\n  graph representation.\n\nChanges in 2999.12.0.1\n----------------------\n\n*
  Fix a bug that prevented graphviz from being built with GHC 7.2.\n\nChanges in 2999.12.0.0\n----------------------\n\nMany
  large-level changes were done in this release; in rough\ncategories these are:\n\n###
  Conversions from other types\n\n* Can now more easily create Dot graphs from other
  graph-like data\n  structures with the new `graphElemsToDot` function, which takes
  a\n  list of nodes and edges.\n\n* It is now no longer possible to use `graphToDot`,
  etc. to create Dot\n  graphs with anonymous clusters; all clusters must now have
  explicit\n  names (note that uniqueness is not enforced, and it is still\n  possible
  to directly create Dot graphs with anonymous clusters).\n\n### Dot graph representations\n\n*
  The canonical graph representation has been moved to its own module:\n  `Data.GraphViz.Types.Canonical`.\n\n*
  The generalised representation has had all its \"G\" and \"g\" prefixes\n  removed.\n\n*
  Two new representations:\n\n    - `Data.GraphViz.Types.Graph` allows graph-like
  manipulation of\n      Dot code.\n\n    - `Data.GraphViz.Types.Monadic` provides
  a monadic interface into\n      building relatively static graphs, based upon the\n
  \     [_dotgen_](http://hackage.haskell.org/package/dotgen) library by\n      Andy
  Gill.\n\n* The `DotRepr` class has been expanded, and three pseudo-classes have\n
  \ been provided to reduce type-class contexts in type signatures.\n\n### Using and
  manipulation Dot graphs\n\n* Pure Haskell implementations of `dot -Tcanon` and `tred`
  are\n  available in `Data.GraphViz.Algorithms`.\n\n* A new module is available for
  more direct low-level I/O with Dot\n  graphs, including the ability to run custom
  commands as opposed to\n  being limited to the standard dot, neato, etc.\n\n###
  Attributes\n\n* `Data.GraphViz.Attributes` now contains a slimmed-down recommended\n
  \ list of attributes; the complete list can still be found in\n  `Data.GraphViz.Attributes.Complete`.\n\n*
  The `charset` attribute is no longer available.\n\n* Functions for specifying custom
  attributes (for pre-processors,\n  etc.) are available.\n\n### Implementation\n\n*
  Now uses [`Text`](http://hackage.haskell.org/package/text) values\n  rather than
  `String`s.  Whilst performing this migration, the\n  improvements in speed for both
  printing and parsing improved\n  dramatically.\n\n    - As part of this, human-readable
  Dot code is now produced by\n      default.  As such, the `prettyPrint` and `prettyPrint'`\n
  \     functions have been removed.\n\n* Now uses state-based printing and parsing,
  so that things like graph\n  directedness, layer separators and color schemes can
  be taken into\n  account.\n\n* Parsing large data-types (e.g. `Attributes`) now
  uses less\n  back-tracking.\n\n* Now has a benchmarking script for testing printing
  and parsing\n  speed.\n\n* Uses a custom exception type rather than a mish-mash
  of error,\n  `Maybe`, `Either`, exception types from used libraries, etc.\n\n* Usage
  of UTF-8 is now enforced when doing I/O.  If another encoding\n  is required, the
  `Text` value that's printed/parsed has to be\n  written/read from disk/network/etc.
  manually.\n\n### Bug-Fixes\n\n* The `Rects` `Attribute` should be able to take a
  list of `Rect`\n  values; error spotted by **Henning Gunther**.\n\n* In some cases,
  global attribute names were being printed without\n  even an empty list (which doesn't
  match what dot, etc. expect).\n\nChanges in 2999.11.0.0\n----------------------\n\n*
  Addition of the `Labellable` class (and its method `toLabel`) to\n  make it easier
  to construct labels.\n\n* Backslashes (i.e. the `\\` character) are now escaped/unescaped\n
  \ properly (bug spotted by **Han Joosten**).  As part of this:\n\n    - Dot-specific
  escapes such as `\\N` are now also handled\n      correctly, so the slash does not
  need to be escaped.\n\n    - Newline (`'\\n'`) characters in labels, etc. are escaped
  to\n      centred-newlines in Dot code, but not unescaped.\n\n* `Point` values can
  now have the optional third dimension and end in\n  a `!` to indicate that that
  position should be used (as input to\n  Graphviz).\n\n* `LayerList` uses `LayerID`
  values, and now has a proper `shrink`\n  implementation in the test suite.\n\nChanges
  in 2999.10.0.1\n----------------------\n\n* Fixed a mistake in one of the source
  files that was made just to\n  make\n  [haskell-src-exts](http://hackage.haskell.org/package/haskell-src-exts)\n
  \ happier.\n\n* Fix the `Arbitrary` instance for `Point` in the testsuite (since\n
  \ there's only one constructor now).\n\nChanges in 2999.10.0.0\n----------------------\n\n*
  Conversion of `FGL`-style graphs to `DotRepr` values is now achieved\n  using the
  new `GraphvizParams` configuration type.  This allows us\n  to define a single parameter
  that stores all the conversion\n  functions to pass around rather than having to
  pass around several\n  functions.  This also allows all the non-clustered and clustered\n
  \ functions to be collapsed together, whereas what used to be handled\n  by the
  primed functions is now achieved by using the\n  `setDirectedness` function.\n\n
  \   There are three default `GraphvizParams` available:\n\n    - `defaultParams`
  provides some sensible defaults (no attributes\n      or clustering).\n\n    - `nonClusteredParams`
  is an alias of `defaultParams` where the\n      clustering type is explicitly set
  to be `()` for cases where you\n      don't want any clustering at all (whereas
  `defaultParams` allows\n      you to set your own clustering functions).\n\n    -
  `blankParams` sets all fields to be `undefined`; this is useful\n      for situations
  where you have functions that will set some\n      values for you and there is no
  sensible default you can use\n      (mainly for the clustering function).\n\n* Expansion
  of the `DotRepr` class:\n\n    - More common functions are now defined as methods
  (`getID`,\n      etc.).\n\n    - The ability to get more information about the structure
  of the\n      `DotRepr` graph, as well as where all the `DotNode`s are, etc.\n\n
  \   - `graphNodes` now returns `DotNode`s defined only as part of\n      `DotEdge`s,
  and will also merge duplicate `DotNode`s together.\n\n    - `graphNodes` and `graphEdges`
  also return `GlobalAttributes`\n      that apply to them.\n\n* The `Point` type
  now only has one constructor: `Point Double\n  Double`.  The `Int`-only constructor
  was present due to historical\n  purposes and I thought that the `Pos` value for
  a `DotNode` would\n  always be a pair of `Int`s; this turns out not to be the case.\n\n*
  `SortV` and `PrismOverlap` now only take `Word16` values rather than\n  `Int`s,
  as they're not meant to allow negative values (the choice of\n  using `Word16` rather
  than `Word` was arbitrary, and because it's\n  unlikely those values will be large
  enough to require the larger\n  values available in `Word`).\n\n* `NodeCluster`
  has been generalised to not have to take an `LNode`\n  for the node type; the type
  alias `LNodeCluster` is available if you\n  still want this.\n\n* Several documentation
  typos fixed, including one spotted by **Kevin\n  Quick**.\n\n* The test-suite now
  allows running individual tests.\n\nChanges in 2999.9.0.0\n---------------------\n\n*
  graphviz now has an FAQ and an improved README as well as its own\n  [homepage](http://projects.haskell.org/graphviz/).\n\n*
  Canonicalisation of `DotRepr` values is now available with the\n  `canonicalise`
  function.\n\n* Add support for record labels; values are automatically\n  escaped/unescaped.
  \ The `Record` and `MRecord` shapes have been\n  added for use with these labels.
  \ **Requested by Minh Thu and Eric\n  Kow.**\n\n* Add support for HTML-like values
  (this replaces the wrong and\n  completely broken URL datatype).  Strings are automatically\n
  \ escaped/unescaped.\n\n* Named `PortPos` values are now accepted (as required for
  record and\n  HTML-like labels).\n\n* `GraphID` no longer allows HTML-like values
  (since Graphviz doesn't\n  seem to allow it).\n\n* `RankSep` takes a list of `Double`
  values as required.\n\n* `Attribute` has a new constructor `UnknownAttribute` for
  use when\n  parsing deprecated Graphviz attributes in old Dot code.\n\n* Various
  parsing fixes; of special note:\n\n    - Statements no longer need to end in a semi-colon;\n\n
  \   - Anonymous sub-graphs are now supported.\n\n    - Edge statements can now handle
  node groupings (e.g. ` a -> {b\n      c}`) as well as `portPos` values (e.g. `a:from
  -> b:to`).\n\n    - Unquoted `String`s containing non-ASCII characters are now\n
  \     parsed properly (though they are assumed to be encoded with\n      UTF-8).
  \ **Thanks to Jules Bean (aka quicksilver) for working\n      out how to do this.**\n\n
  \   More specifically: almost all Dot files that ship with Graphviz, as\n    documentation
  in the Linux kernel, etc. are now parseable.\n\n* A new script to assist in testing
  whether \"real-world\" Dot graphs\n  are parseable.\n\n* Slight performance increase
  when parsing: whereas parsing is done\n  case-insensitively, the \"correct\" case
  is now checked by default\n  which has a moderate affect on parsing times.\n\n*
  Split lines are now able to be handled when parsing.\n\nChanges in 2999.8.0.0\n---------------------\n\n*
  Added support for generalised `DotGraph`s; this optional\n  representation removes
  the restriction of ordering of Dot\n  statements.  This allows for greater flexibility
  of how to specify\n  Dot code.  As an offshoot from this, most relevant functions
  now\n  utilise a new `DotRepr` class that work with both `DotGraph`s and\n  the
  new `GDotGraph`s; this shouldn't affect any code already in use.\n\n* With the **prompting
  of Noam Lewis**, the augmentation functions\n  have been revamped in two ways:\n\n
  \ - Now contains support for multiple edges.\n\n  - The ability to perform \"manual\"
  augmentation if greater control is\n    desired.\n\n* Add a preview function to
  quickly render and visualise an `FGL`\n  graph using the `Xlib` canvas.\n\n* Added
  a pseudo-inverse of the `FGL -> Dot` functions (a graph is\n  created, but the original
  node and edge labels are unrecoverable).\n\n* The `Printing` and `Parsing` modules
  have been moved (from\n  `Data.GraphViz.Types` to `Data.GraphViz`).\n\n* Reworked
  file-generating commands such that they return the filename\n  of the created file
  if successful.\n\nChanges in 2999.7.0.0\n---------------------\n\n* Updated and
  extended functions to interact with the Graphviz tools.\n  This now includes:\n\n
  \ - a better listing of available output types;\n\n  - distinguishing file outputs
  from canvas outputs;\n\n  - ability to automatically add the correct file extension
  to file\n    outputs\n\n  - Return any errors if calling Graphviz failed rather
  than just\n    printing them to stderr\n\n* Improved `Color` support:\n\n  - fixed
  `ColorScheme` values\n\n  - explicitly named `X11` colors\n\n  - conversion to/from
  values from the [colour] library\n\n  [colour]: http://www.haskell.org/haskellwiki/Colour\n\n*
  Removed `OrientationGraph`; problems with distinguishing it when\n  parsing from
  node-based `Orientation` values; its functionality is\n  duplicated by `Rotate`.\n\n*
  By default, the generated Dot code is now no longer indented; you\n  can now use
  the `prettyPrint` functions in `Data.GraphViz` to\n  produce readable Dot code.\n\n*
  Added a testsuite; this is buildable by building with\n  `--flags-test`.  Numerous
  printing and parsing bugs were picked up\n  with this.\n\nChanges in 2999.6.0.0\n---------------------\n\n*
  Remove some `Shape` aliases and change capitalisation of others.\n\n* Properly parse
  and print IDs of clusters.\n\n* Allow `NodeCluster` values to have node types different
  from the\n  `LNode` they come from.\n\nChanges in 2999.5.1.1\n---------------------\n\n*
  When used as labels, etc., the Dot keywords `node`, `edge`, `graph`,\n  `digraph`,
  `subgraph`, and `strict` need to be quoted.  **Spotted by\n  Kathleen Fisher.**\n\nChanges
  in 2999.5.1.0\n---------------------\n\n* Potentially fixed the `graphvizWithHandle`
  bug; correct approach\n  **spotted by Nikolas Mayr**.\n\n* Fixed up `Parsing` of
  various `Attribute` sub-values, especially\n  `Point` and `Spline` (and hence `Pos`,
  which uses them).\n\n* Pre-process out comments and join together multi-line strings
  before\n  parsing.\n\n* Properly parse `Doubles` like `\".2\"`.\n\nChanges in 2999.5.0.0\n---------------------\n\nA
  major re-write occured; these are the highlights:\n\n* Re-write parsing and printing
  of Dot code using the new `ParseDot`\n  and `PrintDot` classes.  This should finally
  fix all quoting issues,\n  as well as leaving `Show` as the code representation
  for hacking\n  purposes.  As part of this, the `Data.GraphViz.ParserCombinators`\n
  \ module has been moved to `Data.GraphViz.Types.Parsing`.\n\n* Re-write the various
  `Dot*` datatypes in `Data.GraphViz.Types`.\n  Sub-graphs/clusters are now their
  own entity rather than being part\n  of `DotNode` and the Node ID type is now a
  type parameter rather\n  than being just `Int`.  Sub-graphs/clusters can now also
  be parsed.\n\n* The various conversion functions in `Data.GraphViz` now come in
  two\n  flavours: the unprimed versions take in a `Bool` indicating if the\n  graph
  is directed or not; the primed versions attempt to\n  automatically detect this.\n\n*
  Add cluster support for the graph augmentation functions, **as\n  requested by Nikolas
  Mayr**.\n\n* Allow custom arrow types as supported by GraphViz; **as requested by\n
  \ Han Joosten**.\n\n* Fixed a bug in HSV-style `Color` values where `Int` was used
  instead of\n  `Double`; **spotted by Michael deLorimier**.\n\n* Properly resolved
  the situation initially spotted by Neil Brown:\n  Matthew Sackman was following
  Dot terminology for an edge `a -> b`\n  when using _head_ for `b` and _tail_ for
  `a` (this is presumably\n  because the head/tail of the arrow are at those nodes).
  \ `DotEdge`\n  now uses _from_ and _to_ avoid ambiguity; the various `Attribute`\n
  \ values still follow upstream usage.\n\nChanges in 2999.1.0.2\n---------------------\n\n*
  Fix a bug **spotted by Srihari Ramanathan** where `Color` values\n  were double-quoted.\n\nChanges
  in 2999.1.0.1\n---------------------\n\n* The `Color` `Attribute` should take `[Color]`,
  not just a single\n  `Color`.\n\nChanges in 2999.1.0.0\n---------------------\n\n*
  Stop using `Either` for composite `Attributes` and use a custom\n  type: this avoids
  problems with the `Show` instance.\n\nChanges in 2999.0.0.0\n---------------------\n\n*
  Fixed a bug where the Show instance and read function for `DotEdge`\n  had the from/to
  nodes the wrong way round.  This was not immediately\n  noticed since the `Graph`
  to `DotGraph` functions created them the\n  wrong way round, so for those users
  who only used these this was not\n  apparent.  **Spotted by Neil Brown.**\n\n* Greatly
  improved `Attribute` usage: almost all attributes are now\n  covered with allowed
  values.\n\n* Extend DotGraph to include whether a graph is strict or not and if\n
  \ it has an ID.  Also move the directedGraph field.\n\n* Make `Dot` refer to the
  actual dot command and `DotArrow` refer to\n  the `ArrowType` (rather than `DotCmd`
  and `Dot` as before).\n\n* Make the `Data.GraphViz.ParserCombinators` module available
  to end\n  users again, but not re-exported by `Data.GraphViz`; it has a\n  warning
  message up the top not to be used.  It is there purely for\n  documentative purposes.\n\n*
  Use [extensible-exceptions] so that `base-3.x` is once again\n  supported.\n\n  [extensible-exceptions]:
  http://hackage.haskell.org/package/extensible-exceptions\n\n* Follow the [Package
  Versioning Policy] rather than using dates for\n  versions.\n\n  [Package Versioning
  Policy]: http://www.haskell.org/haskellwiki/Package_versioning_policy\n\n\nChanges
  in 2009.5.1\n-------------------\n\n* New maintainer: Ivan Lazar Miljenovic.\n\n*
  Support `polyparse >= 1.1` (as opposed to `< 1.3`)\n\n* Require `base == 4.*` (i.e.
  `GHC 6.10.*`) due to new exception handling.\n\n* Include functions from [Graphalyze-0.5]
  for running GraphViz\n  commands, etc.\n\n  [Graphalyze-0.5]: http://hackage.haskell.org/package/Graphalyze-0.5\n\n*
  Module re-organisation.\n\n* The `Data.GraphViz.ParserCombinators` module is no
  longer available\n  to end users.\n\n* Improved Haddock documentation.\n\nChanges
  in 2008.9.20\n--------------------\n\n* Differentiate between undirected and directed
  graphs (previously\n  only directed graphs were supported).\n\n* Clustering support
  was added.\n\nOlder versions\n--------------\n\nFor versions of graphviz older than
  `2008.9.20`, the exact differences\nbetween versions is unknown.\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.5.0.0 && <5'
  text: -any
  filepath: -any
  process: -any
  dlist: ! '>=0.5 && <0.9'
  graphviz: -any
  containers: -any
  polyparse: ! '>=1.9 && <1.13'
  wl-pprint-text: ==1.2.*
  fgl: ! '>=5.4 && <5.7'
  mtl: ==2.*
  colour: ==2.3.*
  temporary: ! '>=1.1 && <1.4'
  directory: -any
all-versions:
- 2999.10.0.0
- 2999.10.0.1
- 2999.11.0.0
- 2999.12.0.0
- 2999.12.0.1
- 2999.12.0.2
- 2999.12.0.3
- 2999.12.0.4
- 2999.13.0.0
- 2999.13.0.1
- 2999.13.0.2
- 2999.13.0.3
- 2999.14.0.0
- 2999.14.1.0
- 2999.15.0.0
- 2999.15.0.1
- 2999.16.0.0
- 2999.17.0.0
- 2999.17.0.1
- 2999.17.0.2
- 2999.18.0.0
- 2999.18.0.1
- 2999.18.0.2
- 2999.18.1.0
- 2999.18.1.1
- 2999.18.1.2
- 2999.19.0.0
- 2999.20.0.0
- 2999.20.0.1
- 2999.20.0.2
author: Matthew Sackman, Ivan Lazar Miljenovic
latest: 2999.20.0.2
description-type: markdown
description: ! "% Haskell bindings to the Graphviz toolkit\n% Ivan Lazar Miljenovic\n\nThe
  graphviz Library\n====================\n\n[![Hackage](https://img.shields.io/hackage/v/graphviz.svg)](https://hackage.haskell.org/package/graphviz)
  [![Build Status](https://travis-ci.org/ivan-m/graphviz.svg)](https://travis-ci.org/ivan-m/graphviz)\n\nThe
  _graphviz_ library provides bindings to the [Graphviz] graph\nvisualisation suite
  of tools for the purely functional programming\nlanguage [Haskell].  It can be downloaded
  from [HackageDB] or - if you\nhave [cabal-install] - installing it is as simple
  as:\n\n~~~~~~~~~~~~~~~~~~~~ {.bash}\ncabal update\ncabal install graphviz\n~~~~~~~~~~~~~~~~~~~~\n\n[Graphviz]:
  http://www.graphviz.org/\n[Haskell]: http://haskell.org/\n[HackageDB]: http://hackage.haskell.org/package/graphviz\n[cabal-install]:
  http://haskell.org/haskellwiki/Cabal-Install\n\nLibrary features\n----------------\n\nMain
  features of the graphviz library include:\n\n* Almost complete coverage of all Graphviz
  attributes and syntax.\n\n* Support for specifying clusters.\n\n* The ability to
  use a custom node type.\n\n* Functions for running a Graphviz layout tool with all
  specified\n  output types.\n\n* The ability to not only generate but also parse
  Dot code with two\n  options: strict and liberal (in terms of ordering of statements).\n\n*
  Functions to convert [FGL] graphs and other graph-like data\n  structures to Dot
  code - including support to group them into\n  clusters - with a high degree of
  customisation by specifying which\n  attributes to use and limited support for the
  inverse operation.\n\n* Round-trip support for passing an [FGL] graph through Graphviz
  to\n  augment node and edge labels with positional information, etc.\n\n[FGL]: http://web.engr.oregonstate.edu/~erwig/fgl/haskell/\n\ngraphviz
  is free software licensed under a [3-Clause BSD License].\n\n\\(C\\) 2008 [Matthew
  Sackman](http://www.wellquite.org/)\n\n\\(C\\) 2008 - onwards [Ivan Lazar Miljenovic](http://ivanmiljenovic.wordpress.com/)\n\n[3-Clause
  BSD License]: http://www.opensource.org/licenses/bsd-license.php\n\nFor more information,
  feel free to\n[email](mailto:Ivan.Miljenovic+graphviz@gmail.com) me.\n"
license-name: BSD-3-Clause
