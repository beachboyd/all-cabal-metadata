homepage: https://github.com/caraus-ecms/graphql#readme
changelog-type: markdown
hash: 2d8d717169012e445cbef1fdfdc21cd57e018472061f18868c7ece603e315d3e
test-bench-deps:
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.10.0 && <0.3'
  hspec: ! '>=2.7.1 && <2.8'
  text: ! '>=1.2.3.1 && <1.3'
  megaparsec: ! '>=7.0.5 && <7.1'
  containers: ! '>=0.6.0.1 && <0.7'
  raw-strings-qq: ==1.1.*
  hspec-megaparsec: ! '>=2.0.1 && <2.1'
  transformers: ! '>=0.5.6.2 && <0.6'
  aeson: ! '>=1.4.6.0 && <1.5'
  graphql: -any
  hspec-expectations: ! '>=0.8.2 && <0.9'
maintainer: belka@caraus.de
synopsis: Haskell GraphQL implementation
changelog: "# Change Log\nAll notable changes to this project will be documented in
  this file.\n\n## [0.6.1.0] - 2019-12-23\n### Fixed\n- Parsing multiple string arguments,
  such as \n  `login(username: \"username\", password: \"password\")` would fail on
  the comma\n  due to strings not having a space consumer.\n- Fragment spread is evaluated
  based on the `__typename` resolver. If the\n  resolver is missing, it is assumed
  that the type condition is satisfied (all\n  fragments are included).\n- Escaping
  characters during encoding.\n\n### Added\n- Directive support (@skip and @include).\n-
  Pretifying multi-line string arguments as block strings.\n\n## [0.6.0.0] - 2019-11-27\n###
  Changed\n- `Language.GraphQL.Encoder` moved to `Language.GraphQL.AST.Encoder`.\n-
  `Language.GraphQL.Parser` moved to `Language.GraphQL.AST.Parser`.\n- `Language.GraphQL.Lexer`
  moved to `Language.GraphQL.AST.Lexer`.\n- All `Language.GraphQL.AST.Value` data
  constructor prefixes were removed. The\n  module should be imported qualified.\n-
  All `Language.GraphQL.AST.Core.Value` data constructor prefixes were removed.\n
  \ The module should be imported qualified.\n- `Language.GraphQL.AST.Core.Object`
  is now just a HashMap.\n- `Language.GraphQL.AST.Transform` is isn't exposed publically
  anymore.\n- `Language.GraphQL.Schema.resolve` accepts a selection `Seq` (`Data.Sequence`)\n
  \ instead of a list. Selections are stored as sequences internally as well.\n- Add
  a reader instance to the resolver's monad stack. The Reader contains\n  a Name/Value
  hashmap, which will contain resolver arguments.\n\n### Added\n- Nested fragment
  support.\n\n### Fixed\n- Consume ignored tokens after `$` and `!`. I mistakenly
  assumed that\n  `$variable` is a single token, same as `Type!` is a single token.
  This is not\n  the case, for example `Variable` is defined as `$ Name`, so these
  are two\n  tokens, therefore whitespaces and commas after `$` and `!` should be\n
  \ consumed.\n\n### Improved\n- `Language.GraphQL.AST.Parser.type_`: Try type parsers
  in a variable\n  definition in a different order to avoid using `but`.\n\n### Removed\n-
  `Language.GraphQL.AST.Arguments`. Use `[Language.GraphQL.AST.Argument]`\n  instead.\n-
  `Language.GraphQL.AST.Directives`. Use `[Language.GraphQL.AST.Directives]`\n  instead.\n-
  `Language.GraphQL.AST.VariableDefinitions`. Use\n  `[Language.GraphQL.AST.VariableDefinition]`
  instead.\n- `Language.GraphQL.AST.FragmentName`. Use `Language.GraphQL.AST.Name`
  instead.\n- `Language.GraphQL.Execute.Schema` - It was a resolver list, not a schema.\n-
  `Language.GraphQL.Schema`: `enum`, `enumA`, `wrappedEnum` and `wrappedEnumA`.\n
  \ Use `scalar`, `scalarA`, `wrappedScalar` and `wrappedScalarA` instead.\n\n\n##
  [0.5.1.0] - 2019-10-22\n### Deprecated\n- `Language.GraphQL.AST.Arguments`. Use
  `[Language.GraphQL.AST.Argument]`\n  instead.\n- `Language.GraphQL.AST.Directives`.
  Use `[Language.GraphQL.AST.Directives]`\n  instead.\n- `Language.GraphQL.AST.VariableDefinitions`.
  Use\n  `[Language.GraphQL.AST.VariableDefinition]` instead.\n\n### Added\n- Module
  documentation.\n- Inline fragment support.\n\n### Fixed\n- Top-level fragments.\n-
  Fragment for execution is chosen based on the type.\n\n## [0.5.0.1] - 2019-09-10\n###
  Added\n- Minimal documentation for all public symbols.\n\n### Deprecated\n- `Language.GraphQL.AST.FragmentName`.
  Replaced with Language.GraphQL.AST.Name.\n- `Language.GraphQL.Execute.Schema` -
  It is not a schema (at least not a\n  complete one), but a resolver list, and the
  resolvers should be provided by\n  the user separately, because the schema can originate
  from a GraphQL\n  document. `Schema` name should be free to provide a data type
  for the real\n  schema later.\n- `Language.GraphQL.Schema`: `enum`, `enumA`, `wrappedEnum`
  and `wrappedEnumA`.\n  There are actually only two generic types in GraphQL: Scalars
  and objects.\n  Enum is a scalar value.\n\n### Fixed\n- Parsing block string values.\n\n##
  [0.5.0.0] - 2019-08-14\n### Added\n- `executeWithName` executes an operation with
  the given name.\n- Export `Language.GraphQL.Encoder.definition`,\n  `Language.GraphQL.Encoder.type'`
  and `Language.GraphQL.Encoder.directive`.\n- Export `Language.GraphQL.Encoder.value`.
  Escapes \\ and \" in strings now.\n\n### Changed\n- `Operation` includes now possible
  operation name which allows to support\n  documents with multiple operations.\n-
  `Language.GraphQL.Encoder.document` and other encoding functions take a\n  `Formatter`
  as argument to distinguish between minified and pretty printing.\n- All encoder
  functions return `Data.Text.Lazy`.\n\n### Removed\n- Unused `Language.GraphQL.Encoder.spaced`.\n\n##
  [0.4.0.0] - 2019-07-23\n### Added\n- Support for mutations.\n- Error handling (with
  monad transformers).\n- Nullable types.\n- Arbitrary nested lists support.\n- Potential
  BOM header parsing.\n\n### Changed\n- attoparsec is replaced with megaparsec.\n-
  The library is now under `Language.GraphQL` (instead of `Data.GraphQL`).\n- HUnit
  and tasty are replaced with Hspec.\n- `Alternative`/`MonadPlus` resolver constraints
  are replaced with `MonadIO`.\n\n### Removed\n- Duplicates from `Language.GraphQL.AST`
  already available in\n  `Language.GraphQL.AST.Core`.\n- All module exports are now
  explicit, so private and help functions aren't\n  exported anymore.\n\n## [0.3]
  - 2015-09-22\n### Changed\n- Exact match numeric types to spec.\n- Names follow
  now the spec.\n- AST slightly different for better readability or easier parsing.\n-
  Replace golden test for test to validate parsing/encoding.\n\n### Added\n- Parsing
  errors in all cases where `Alternative` is used.\n- GraphQL encoder.\n\n### Fixed\n-
  Expect braces `inputValueDefinitions` instead of parens when parsing.\n\n## [0.2.1]
  - 2015-09-16\n### Fixed\n- Include data files for golden tests in Cabal package.\n-
  Support for ghc-7.8.\n\n## [0.2] - 2015-09-14\n### Added\n- Rudimentary parser for
  `GraphQL` which successfully parses the sample file\n  `kitchen-sink.graphql` from
  `graphql-js` tests.\n- Golden test for `kitchen-sink.grahql` parsing.\n### Changed\n-
  Many optional data types in `GraphQl` didn't need to be wrapped in a `Maybe`.\n-
  Some `newtype`s became type synonyms for easier parsing.\n\n## 0.1 - 2015-09-12\n###
  Added\n- Data types for the GraphQL language.\n\n[0.6.1.0]: https://github.com/caraus-ecms/graphql/compare/v0.6.0.0...v0.6.1.0\n[0.6.0.0]:
  https://github.com/caraus-ecms/graphql/compare/v0.5.1.0...v0.6.0.0\n[0.5.1.0]: https://github.com/caraus-ecms/graphql/compare/v0.5.0.1...v0.5.1.0\n[0.5.0.1]:
  https://github.com/caraus-ecms/graphql/compare/v0.5.0.0...v0.5.0.1\n[0.5.0.0]: https://github.com/caraus-ecms/graphql/compare/v0.4.0.0...v0.5.0.0\n[0.4.0.0]:
  https://github.com/caraus-ecms/graphql/compare/v0.3...v0.4.0.0\n[0.3]: https://github.com/caraus-ecms/graphql/compare/v0.2.1...v0.3\n[0.2.1]:
  https://github.com/caraus-ecms/graphql/compare/v0.2...v0.2.1\n[0.2]: https://github.com/caraus-ecms/graphql/compare/v0.1...v0.2\n"
basic-deps:
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.10.0 && <0.3'
  text: ! '>=1.2.3.1 && <1.3'
  megaparsec: ! '>=7.0.5 && <7.1'
  containers: ! '>=0.6.0.1 && <0.7'
  transformers: ! '>=0.5.6.2 && <0.6'
  aeson: ! '>=1.4.6.0 && <1.5'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- '0.3'
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
author: |-
  Danny Navarro <j@dannynavarro.net>,
  Matthías Páll Gissurarson <mpg@mpg.is>,
  Sólrún Halla Einarsdóttir <she@mpg.is>
latest: 0.6.1.0
description-type: markdown
description: |
  # Haskell GraphQL

  [![Hackage Version](https://img.shields.io/hackage/v/graphql.svg)](https://hackage.haskell.org/package/graphql)
  [![Build Status](https://semaphoreci.com/api/v1/belka-ew/graphql/branches/master/badge.svg)](https://semaphoreci.com/belka-ew/graphql)
  [![License](https://img.shields.io/badge/license-BSD--3--Clause-blue.svg)](https://raw.githubusercontent.com/caraus-ecms/graphql/master/LICENSE)

  GraphQL implementation in Haskell.

  This implementation is relatively low-level by design, it doesn't provide any
  mappings between the GraphQL types and Haskell's type system and avoids
  compile-time magic. It focuses on flexibility instead, so other solutions can
  be built on top of it.

  ## State of the work

  For now this only provides a parser and a printer for the GraphQL query
  language and allows to execute queries and mutations without the schema
  validation step. But the idea is to be a Haskell port of
  [`graphql-js`](https://github.com/graphql/graphql-js).

  For the list of currently missing features see issues marked as
  "[not implemented](https://github.com/caraus-ecms/graphql/labels/not%20implemented)".

  ## Documentation

  API documentation is available through
  [hackage](https://hackage.haskell.org/package/graphql).

  You'll also find a small tutorial with some examples under
  [docs/tutorial](https://github.com/caraus-ecms/graphql/tree/master/docs/tutorial).

  ## Contact

  Suggestions, contributions and bug reports are welcome.

  Should you have questions on usage, please open an issue and ask – this helps
  to write useful documentation.

  Feel free to contact on Slack in [#haskell on
  GraphQL](https://graphql.slack.com/messages/haskell/). You can obtain an
  invitation [here](https://graphql-slack.herokuapp.com/).
license-name: BSD-3-Clause
