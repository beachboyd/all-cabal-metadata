homepage: http://rochel.info/#graph-rewriting
changelog-type: ''
hash: 83b30e7e523f778de7c120b567bd665ca8f045cc384daa3a0bd0a373afcf2ba9
test-bench-deps: {}
maintainer: jan@rochel.info
synopsis: Two evalutors of the SKI combinator calculus as interactive graph rewrite
  systems
changelog: ''
basic-deps:
  base-unicode-symbols: ==0.2.*
  OpenGL: ==3.0.*
  GLUT: ! '>=2.4 && <2.8'
  base: ! '>=4.3 && <4.10'
  graph-rewriting-gl: ! '>=0.7.6'
  parsec: ! '>=3.1.0 && <3.2'
  graph-rewriting: ! '>=0.7.6'
  graph-rewriting-layout: ! '>=0.5.4'
all-versions:
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.7
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.4
- 0.5.6
- 0.5.7
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.6
- 0.6.7
author: Jan Rochel
latest: 0.6.7
description-type: haddock
description: This package serves as an example for how to use the graph-rewriting,
  graph-rewriting-layout, and graph-rewriting-gl packages to create a graph rewriting
  system with an interactive, graphical front-end. The SKI combinator calculus is
  implemented once as an interaction net with combinators that accumulate their arguments,
  and once with rules that consume all the arguments at once. The sources (of the
  interaction net implementation) are well documented and serve as a tutorial for
  implementing your own rewrite system. Start reading in INet/Graph.hs. To run the
  program run either the "ski-inet" or the "ski-direct" with one of the files from
  the "examples" directory as an argument. For usage of the GUI see "GraphRewriting.GL.UI".
license-name: BSD-3-Clause
