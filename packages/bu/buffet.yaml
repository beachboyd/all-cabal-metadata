homepage: https://github.com/evolutics/buffet#readme
changelog-type: ''
hash: 0609fe3a81a6b743e1bf90caee3d69064449c4e0482b519109ab25719942773a
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  buffet-internal: -any
  typed-process: -any
  tasty-hunit: -any
  tasty: -any
  aeson: -any
  yaml: -any
  vector: -any
  directory: -any
maintainer: benjamin.fischer@evolutics.info
synopsis: Assembles many Dockerfiles in one.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  buffet-internal: -any
all-versions:
- 0.2.0
- 0.3.0
author: Benjamin Fischer
latest: 0.3.0
description-type: markdown
description: "# Buffet \U0001F35C\n\n[![Build](https://img.shields.io/travis/evolutics/buffet)](https://travis-ci.org/evolutics/buffet)\n[![License](https://img.shields.io/github/license/evolutics/buffet)](LICENSE)\n[![Package](https://img.shields.io/hackage/v/buffet)](https://hackage.haskell.org/package/buffet)\n\nAssemble
  many Dockerfiles in a single Dockerfile. This gives you the convenience of one Docker
  image with your favorite tools while keeping the modularity of a separate Dockerfile
  per tool.\n\nSee [Code Cleaner Buffet](https://github.com/evolutics/code-cleaner-buffet)
  for an application of this.\n\n## Installation\n\nRun\n\n```bash\nstack install
  buffet\n```\n\nor\n\n```bash\ncabal install buffet\n```\n\nYou are ready when\n\n```bash\nbuffet
  --help\n```\n\nworks.\n\n## Usage example\n\nSay we work on a simple website with
  HTML code that we would like to format, clean up, and validate. For this purpose,
  we choose the tools Prettier and HTML Tidy, which we plan use in continuous integration
  via a Docker image.\n\nFor the following, we assume you first run\n\n```bash\ngit
  clone https://github.com/evolutics/buffet.git\ncd buffet\n```\n\n### Assembling\n\nIn
  the subfolders of [`examples/quick_start`](examples/quick_start), you see a [Dockerfile
  for Prettier](examples/quick_start/prettier/Dockerfile) and another [Dockerfile
  for HTML Tidy](examples/quick_start/tidy/Dockerfile). These Dockerfiles (called
  \"dishes\") are the modular toy blocks, which we now automatically combine to one
  Dockerfile (called \"buffet\") by running\n\n```bash\nbuffet assemble examples/quick_start\n```\n\nThis
  prints a Dockerfile based on the subfolders of `examples/quick_start`. From this,
  we can then build a Docker image `mona_linta` with\n\n```bash\nbuffet assemble examples/quick_start
  | \\\n  docker build --build-arg prettier=1.19.1 --tag mona_linta -\n```\n\nNote
  how in case of Prettier, we pass a `--build-arg` to parameterize the tool version.\n\n###
  Testing\n\nAs a demo that our Docker image works as expected, run\n\n```bash\ndocker
  run -it --rm mona_linta\nprettier --version\ntidy --version\n```\n\nTo integrate
  a check like `prettier --version` as a test of the tool installation, add a `HEALTHCHECK`
  instruction as you see in the [Dockerfile for Prettier](examples/quick_start/prettier/Dockerfile).
  The exit status of such a command is then reported when you run our example test
  suite with\n\n```bash\nbuffet test --arguments examples/quick_start/test_arguments.yaml
  \\\n  examples/quick_start\n```\n\nThis builds a Docker image to then run the tests.
  The file [`test_arguments.yaml`](examples/quick_start/test_arguments.yaml) provides
  a map that is used for two things: firstly, its entries are used as `--build-arg`
  options when building the image, and secondly, only tests of dishes referred in
  this map are run.\n\nIf you like, try adding a test for HTML Tidy.\n\n### Documenting\n\nYou
  can generate documentation with\n\n```bash\nbuffet document --template examples/quick_start/document_template.md.mustache
  \\\n  examples/quick_start\n```\n\nThis renders the template [`document_template.md.mustache`](examples/quick_start/document_template.md.mustache).
  To print the raw template context, omit this option as in\n\n```bash\nbuffet document
  examples/quick_start\n```\n\nAmong others, data from `LABEL` instructions is integrated
  in the template context.\n\n## Terminology\n\n- **Buffet:** A Dockerfile automatically
  assembled based on many dishes.\n- **Dish:** A Dockerfile, usually providing a specific
  command-line tool.\n- **Menu:** Configuration with a list of dishes to be assembled
  in a buffet.\n"
license-name: MIT
