homepage: https://github.com/evolutics/buffet#readme
changelog-type: ''
hash: 3b54d997bb1989aeb7458a00685c5f8876b0a97853be2df9293634dd0d12c0e0
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  buffet-internal: -any
  typed-process: -any
  tasty-hunit: -any
  tasty: -any
  aeson: -any
  yaml: -any
  vector: -any
  directory: -any
maintainer: benjamin.fischer@evolutics.info
synopsis: Assembles many Dockerfiles in one.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  buffet-internal: -any
all-versions:
- 0.2.0
author: Benjamin Fischer
latest: 0.2.0
description-type: markdown
description: "# Buffet \U0001F35C\n\n[![Build](https://img.shields.io/travis/evolutics/buffet)](https://travis-ci.org/evolutics/buffet)\n[![License](https://img.shields.io/github/license/evolutics/buffet)](LICENSE)\n[![Package](https://img.shields.io/hackage/v/buffet)](https://hackage.haskell.org/package/buffet)\n\nAssemble
  many Dockerfiles in a single Dockerfile. This gives you the convenience of one Docker
  image with your favorite tools while keeping the modularity of a separate Dockerfile
  per tool.\n\nSee [Code Cleaner Buffet](https://github.com/evolutics/code-cleaner-buffet)
  for an application of this.\n\n## Installation\n\nRun\n\n```bash\nstack install
  buffet\n```\n\nor\n\n```bash\ncabal install buffet\n```\n\nYou are ready when\n\n```bash\nbuffet
  --help\n```\n\nworks.\n\n## Usage example\n\nSay we work on a simple website with
  HTML code that we would like to format, clean up, and validate. For this purpose,
  we choose the tools Prettier and HTML Tidy, which we plan use in continuous integration
  via a Docker image.\n\nFor the following, we assume you first run\n\n```bash\ngit
  clone https://github.com/evolutics/buffet.git\ncd buffet\n```\n\n### Building\n\nIn
  the subfolders of the [`example`](example) folder, you see a [Dockerfile for Prettier](example/prettier/Dockerfile)
  and another [Dockerfile for HTML Tidy](example/tidy/Dockerfile). These Dockerfiles
  (called \"dishes\") are the modular toy blocks, which we now automatically combine
  to one Dockerfile (called \"buffet\") by running\n\n```bash\nbuffet build example\n```\n\nThis
  prints a Dockerfile based on the subfolders of `example`. From this, we can then
  build a Docker image `mona_linta` with\n\n```bash\nbuffet build example | docker
  build \\\n  --build-arg prettier=1.19.1 --build-arg tidy=1 --tag mona_linta -\n```\n\nNote
  how we pass a `--build-arg` per tool, assigning each a nonempty value. In case of
  Prettier, we use this to parameterize the tool version. If we do not mention a tool
  in a `--build-arg`, it is not available in the image.\n\n### Testing\n\nAs a demo
  that our Docker image works as expected, run\n\n```bash\ndocker run -it --rm mona_linta\nprettier
  --version\ntidy --version\n```\n\nTo integrate a check like `prettier --version`
  as a test of the tool installation, add a `HEALTHCHECK` instruction as you see in
  the [Dockerfile for Prettier](example/prettier/Dockerfile). The exit status of such
  a command is then reported when you run our example test suite with\n\n```bash\nbuffet
  test --arguments example/test_arguments.yaml example\n```\n\nThe file [`test_arguments.yaml`](example/test_arguments.yaml)
  provides the `--build-arg` configuration for this test run.\n\nIf you like, try
  adding a test for HTML Tidy.\n\n### Documenting\n\nYou can generate documentation
  with\n\n```bash\nbuffet document --template example/document_template.md.mustache
  example\n```\n\nThis renders the template [`document_template.md.mustache`](example/document_template.md.mustache).
  To print the raw template context, omit this option as in\n\n```bash\nbuffet document
  example\n```\n\nAmong others, data from `LABEL` instructions is integrated in the
  template context.\n\n## Terminology\n\n- **Buffet:** A Dockerfile automatically
  assembled based on many dishes.\n- **Dish:** A Dockerfile, usually providing a specific
  command-line tool.\n- **Menu:** Configuration with a list of dishes to be assembled
  in a buffet.\n"
license-name: MIT
