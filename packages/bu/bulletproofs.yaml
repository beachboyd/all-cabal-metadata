homepage: https://github.com/adjoint-io/bulletproofs#readme
changelog-type: markdown
hash: fa17ed4a0497318fbd883884c70fb4ccf70bacdc9a9f9492427b577f5d0b110d
test-bench-deps:
  MonadRandom: -any
  base: ! '>=4.7 && <5'
  tasty-discover: -any
  text: -any
  criterion: ! '>=1.5.1.0'
  protolude: ! '>=0.2'
  random-shuffle: -any
  memory: -any
  bulletproofs: -any
  containers: -any
  cryptonite: -any
  arithmoi: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: Adjoint Inc (info@adjoint.io)
synopsis: ''
changelog: ! "# Changelog for bulletproofs\n\n## 0.1\n\n* Initial release.\n* Implementation
  of the Bulletproofs protocol for range proofs\n* Use of the improved inner-product
  argument to reduce the communication complexity\n* Support for SECp256k1 curve\n\n##
  0.2\n\n* Prove and verify computations of arithmetic circuits using Bulletproofs\n
  \ protocol.\n* Extend range proofs with support for multi-range proofs.\n* Add documentation
  and provide examples to explain and use arithmetic circuits.\n* Provide examples
  for using aggregated range proofs.\n* Add multi-range proofs documentation.\n\n##
  0.3\n\n* Update dependencies\n\n## 0.4\n\n* Use double exponentiation to improve
  performance.\n* Use Control.Exception.assert to make sure debugging assertions are
  not checked\n  when compiled with optimisations.\n* Add benchmarks for rangeproofs.\n"
basic-deps:
  MonadRandom: -any
  base: ! '>=4.7 && <5'
  text: -any
  protolude: ! '>=0.2'
  random-shuffle: -any
  memory: -any
  containers: -any
  cryptonite: -any
  arithmoi: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
author: ''
latest: 0.4.0
description-type: markdown
description: ! "<p align=\"center\">\n  <a href=\"http://www.adjoint.io\"><img src=\"https://www.adjoint.io/assets/img/adjoint-logo@2x.png\"
  width=\"250\"/></a>\n</p>\n\n[![CircleCI](http://circleci.com/gh/adjoint-io/bulletproofs.svg?style=shield)](https://circleci.com/gh/adjoint-io/bulletproofs)\n[![Hackage](https://img.shields.io/hackage/v/bulletproofs.svg)](http://hackage.haskell.org/package/bulletproofs)\n\nBulletproofs
  are short zero-knowledge arguments of knowledge that do not require a trusted setup.\nArgument
  systems are proof systems with computational soundness.\n\nBulletproofs are suitable
  for proving statements on committed values, such as range proofs, verifiable suffles,
  arithmetic circuits, etc.\nThey rely on the discrete logarithmic assumption and
  are made non-interactive using\nthe Fiat-Shamir heuristic.\n\nThe core algorithm
  of Bulletproofs is the inner-product algorithm presented by Groth [2].\nThe algorithm
  provides an argument of knowledge of two binding vector Pedersen commitments that
  satisfy a given inner product relation.\nBulletproofs build on the techniques of
  Bootle et al. [3] to introduce a communication efficient inner-product proof that
  reduces\noverall communication complexity of the argument to only 2log<sub>2</sub>(n)
  where n is the dimension\nof the two vectors of commitments.\n\n\nRange proofs\n============\n\nBulletproofs
  present a protocol for conducting short and aggregatable range proofs.\nThey encode
  a proof of the range of a committed number in an inner product, using polynomials.\nRange
  proofs are proofs that a secret value lies in a certain interval.\nRange proofs
  do not leak any information about the secret value, other\nthan the fact that they
  lie in the interval.\n\nThe proof algorithm can be sketched out in 5 steps:\n\nLet
  _v_ be a value in _[0, n)_ and **a<sub>L</sub>** a vector of bit such that <**a<sub>L</sub>**,
  **2<sup>n</sup>**> = _v_.\nThe components of **a<sub>L</sub>** are the binary digits
  of _v_.\nWe construct a complementary vector **a<sub>R</sub>** = **a<sub>L</sub>**
  − **1**<sup>n</sup>\nand require that **a<sub>L</sub>** ◦ **a<sub>R</sub>** = 0
  holds.\n\n- **P -> V : A, S** - where A and S are blinded Pedersen commitments to
  **a<sub>L</sub>** and **a<sub>R</sub>**.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;A&space;=&space;h&space;\\cdot&space;\\alpha&space;&plus;&space;\\textbf{g}&space;\\cdot&space;\\textbf{a}_L&space;&plus;&space;\\textbf{h}&space;\\cdot&space;\\textbf{a}_R&space;\\in&space;\\mathbb{G}&space;$)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;S&space;=&space;h&space;\\cdot&space;\\rho&space;&plus;&space;\\textbf{g}&space;\\cdot&space;\\textbf{s}_L&space;&plus;&space;\\textbf{h}&space;\\cdot&space;\\textbf{s}_R&space;\\in&space;\\mathbb{G}&space;$)\n\n-
  **V -> P : y, z** - Verifier sends challenges _y_ and _z_ to fix **A** and **S**.\n\n-
  **P -> V : T<sub>1</sub>, T<sub>2</sub>** - where T<sub>1</sub> and T<sub>2</sub>
  are commitments to\nthe coefficients t<sub>1</sub>, of a polynomial t constructed
  from the existing values in the protocol.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;\\textbf{l}&space;=&space;l(x)&space;=&space;\\textbf{a}_L&space;-&space;z&space;\\cdot&space;\\textbf{1}^n&space;&plus;&space;\\textbf{s}_L&space;\\cdot&space;x&space;\\in&space;\\mathbb{Z}^n_p$)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;\\textbf{r}&space;=&space;r(x)&space;=&space;\\textbf{y}^n&space;\\circ&space;(\\textbf{a}_R&space;&plus;&space;z&space;\\cdot&space;\\textbf{1}^n&space;&plus;&space;\\textbf{s}_R&space;\\cdot&space;x&space;)&space;&plus;&space;z^2&space;\\cdot&space;\\textbf{2}^n&space;\\in&space;\\mathbb{Z}^n_p&space;$)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;t&space;=&space;\\langle&space;\\textbf{l},&space;\\textbf{r}&space;\\rangle&space;\\in&space;\\mathbb{Z}_p$)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$T_i&space;=&space;g&space;\\cdot&space;t_i&space;&plus;&space;h&space;\\cdot&space;\\tau_i&space;\\in&space;\\mathbb{G},&space;\\hspace{3em}&space;i&space;=&space;\\{1,&space;2\\}&space;$)\n\n-
  **V -> P : x** - Verifier challenges Prover with value _x_.\n\n- **P -> V : tau,
  mu, t, l, r** - Prover sends several commitments that the verifier will then check.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;\\tau_x&space;=&space;\\tau_2&space;\\cdot&space;x^2&space;&plus;&space;\\tau_1&space;\\cdot&space;x&space;&plus;&space;z^2&space;\\cdot&space;\\gamma&space;\\in&space;\\mathbb{Z}_p&space;$)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  ![equation](https://latex.codecogs.com/gif.latex?\\\\&space;$&space;\\mu&space;=&space;\\alpha&space;&plus;&space;\\rho&space;\\cdot&space;x&space;\\in&space;\\mathbb{Z}_p&space;$)\n\nSee
  [Prover.hs](https://github.com/adjoint-io/bulletproofs/blob/master/Bulletproofs/RangeProof/Prover.hs
  \"Prover.hs\") for implementation details.\n\nThe interaction described is made
  non-interactive using the Fiat-Shamir Transform wherein all the random\nchallenges
  made by V are replaced with a hash of the transcript up until that point.\n\nInner-product
  range proof\n=========================\n\nThe size of the proof is further reduced
  by leveraging the compact O(log<sub>n</sub>) inner product proof.\n\nThe inner-product
  argument in the protocol allows to prove knowledge of vectors **l** and **r**, whose
  inner product is _t_ and\nthe commitment _P_ ∈  _G_ is a commitment of these two
  vectors. We can therefore replace sending\n(tau, mu, t, **l**, **r**) with a transfer
  of (tau, mu, t) and an execution of an inner product argument.\n\nThen, instead
  of sharing **l** and **r**, which has a communication cost of 2n elements, the inner-product\nargument
  transmits only 2 [log<sub>2</sub>] + 2 elements. In total, the prover sends only
  2 [log<sub>2</sub>(n)] + 4\ngroup elements and 5 elements in _Z_<sub>p</sub>\n\nAggregating
  Logarithmic Proofs\n==============================\n\nWe can construct a single
  proof of range of multiple values, while only incurring an additional space cost
  of 2 log<sub>2</sub>(m) for\n_m_ additional values _v_, as opposed to a multiplicative
  factor of _m_ when creating _m_ independent range proofs.\n\nThe aggregate range
  proof makes use of the inner product argument. It uses 2 [log<sub>2</sub> (n * m)]
  + 4 group elements and 5 elements in Z<sub>p</sub>.\n\nSee [Multi range proof example](https://github.com/adjoint-io/bulletproofs/tree/master#multi-range-proof)\n\n\nUsage\n=====\n\nSingle
  range proof:\n-------------------\n\n```haskell\nimport qualified Bulletproofs.RangeProof
  as RP\n\ntestSingleRangeProof :: (Integer, Integer) -> IO Bool\ntestSingleRangeProof
  (v, vBlinding) = do\n  let vCommit = commit v vBlinding\n      -- n needs to be
  a power of 2\n      n = 2 ^ 8\n      upperBound = 2 ^ n\n\n  -- Prover\n  proofE
  <- runExceptT $ RP.generateProof upperBound (v, vBlinding)\n\n  -- Verifier\n  case
  proofE of\n    Left err -> panic $ show err\n    Right (proof@RangeProof{..})\n
  \     -> pure $ RP.verifyProof upperBound vCommit proof\n```\n\nMulti range proof:\n------------------\n\n```haskell\nimport
  qualified Bulletproofs.MultiRangeProof as MRP\n\ntestMultiRangeProof :: [(Integer,
  Integer)] -> IO Bool\ntestMultiRangeProof vsAndvBlindings = do\n  let vCommits =
  fmap (uncurry commit) vsAndvBlindings\n      -- n needs to be a power of 2\n      n
  = 2 ^ 8\n      upperBound = 2 ^ n\n\n  -- Prover\n  proofE <- runExceptT $ MRP.generateProof
  upperBound vsAndvBlindings\n\n  -- Verifier\n  case proofE of\n    Left err -> panic
  $ show err\n    Right (proof@RangeProof{..})\n      -> pure $ MRP.verifyProof upperBound
  vCommits proof\n```\n\n\nThe dimension _n_ needs to be a power of 2.\nThis implementation
  offers support for SECp256k1, a Koblitz curve.\nFurther information about this curve
  can be found in the Uplink docs:\n[SECp256k1 curve](https://www.adjoint.io/docs/cryptography.html#id1
  \"SECp256k1 curve\")\n\n\nZero-knowledge proof for Arithmetic Circuits\n============================================\n\nAn
  arithmetic circuit over a field and variables (a<sub>1</sub>, ..., a<sub>n</sub>)
  is a directed acyclic graph whose vertices are called gates.\n\nArithmetic circuit
  can be described alternatively as a list of multiplication gates with a collection
  of linear consistency equations\nrelating the inputs and outputs of the gates. Any
  circuit described as an acyclic graph can be efficiently converted into this alternative
  description.\n\nBulletproofs present a protocol to generate zero-knowledge argument
  for arithmetic circuits using the inner product argument,\nwhich allows to get a
  proof of size 2 log<sub>2</sub>(n) + 13 elements and include committed values as
  inputs to the arithmetic circuit.\n\nIn the protocol, the Prover proves that the
  hadamard product of _a<sub>L</sub>_ and _a<sub>R</sub>_ and a set of linear constraints
  hold.\nThe input values _v_ used to generate the proof are then committed and shared
  with the Verifier.\n\n```haskell\nimport qualified Bulletproofs.ArithmeticCircuit\n\n--
  \ Example:\n--  2 linear constraints (q = 2):\n--  aL[0] + aL[1] + aL[2] + aL[3]
  = v[0]\n--  aR[0] + aR[1] + aR[2] + aR[3] = v[1]\n--\n--  4 multiplication constraints
  (implicit) (n = 4):\n--  aL[0] * aR[0] = aO[0]\n--  aL[1] * aR[1] = aO[1]\n--  aL[2]
  * aR[2] = aO[2]\n--  aL[3] * aR[3] = aO[3]\n--\n--  2 input values (m = 2)\n\narithCircuitExample
  :: ArithCircuit Fq\narithCircuitExample = ArithCircuit\n  { weights = GateWeights\n
  \   { wL = [[1, 1, 1, 1]\n           ,[0, 0, 0, 0]]\n    , wR = [[0, 0, 0, 0]\n
  \          ,[1, 1, 1, 1]]\n    , wO = [[0, 0, 0, 0]\n           ,[0, 0, 0, 0]]\n
  \   }\n  , commitmentWeights = [[1, 0]\n                        ,[0, 1]]\n  , cs
  = [0, 0]\n  }\n\ntestArithCircuitProof :: ([Fq], [Fq]) -> ArithCircuit Fq -> IO
  Bool\ntestArithCircuitProof (aL, aR) arithCircuit = do\n  let n = 4\n      m = 2\n
  \     q = 2\n\n  -- Multiplication constraints\n  let aO = aL `hadamardp` aR\n\n
  \ -- Linear constraints\n      v0 = sum aL\n      v1 = sum aR\n\n  commitBlinders
  <- replicateM m Fq.random\n  let commitments = zipWith commit [v0, v1] commitBlinders\n\n
  \ let arithWitness = ArithWitness\n        { assignment = Assignment aL aR aO\n
  \       , commitments = commitments\n        , commitBlinders = commitBlinders\n
  \       }\n\n  proof <- generateProof arithCircuit arithWitness\n\n  pure $ verifyProof
  commitments proof arithCircuit\n```\n\n**References**:\n\n1.  Bunz B., Bootle J.,
  Boneh D., Poelstra A., Wuille P., Maxwell G.\n    \"Bulletproofs: Short Proofs for
  Confidential Transactions and More\". Stanford, UCL, Blockstream, 2017\n\n2. Groth
  J. \"Linear Algebra with Sub-linear Zero-Knowledge Arguments\". University College
  London, 2009\n\n3. Bootle J., Cerully A., Chaidos P., Groth J, Petit C. \"Efficient
  Zero-Knowledge Arguments for\nArithmetic Circuits in the Discrete Log Setting\".
  University College London and University of Oxford, 2016.\n\n**Notation**:\n\n-
  ◦ : Hadamard product\n- <> :Inner product\n- **a**: Vector\n\n\nLicense\n-------\n\n```\nCopyright
  2018 Adjoint Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou
  may not use this file except in compliance with the License.\nYou may obtain a copy
  of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required
  by applicable law or agreed to in writing, software\ndistributed under the License
  is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  either express or implied.\nSee the License for the specific language governing
  permissions and\nlimitations under the License.\n```\n"
license-name: LicenseRef-Apache
