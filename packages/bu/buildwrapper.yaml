homepage: https://github.com/JPMoresmau/BuildWrapper
changelog-type: text
hash: a01d0a870785d70d2b2db92e0d5903fd16fe0032b85aa440de6f2751626abca9
test-bench-deps:
  bytestring: -any
  ghc-pkg-lib: -any
  HTF: ! '>0.9'
  Cabal: -any
  base: <5
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  async: -any
  conduit: -any
  HUnit: -any
  conduit-extra: -any
  containers: -any
  old-time: -any
  mtl: -any
  dynamic-cabal: -any
  buildwrapper: -any
  attoparsec: -any
  transformers: -any
  aeson: -any
  vector: -any
  directory: -any
maintainer: JP Moresmau <jpmoresmau@gmail.com>
synopsis: A library and an executable that provide an easy API for a Haskell IDE
changelog: ! "0.8.7\n\t- support GHC 7.8: ConLike structure, different error messages,
  requirement for -dynamic"
basic-deps:
  ghc: -any
  bytestring: -any
  ghc-pkg-lib: -any
  Cabal: -any
  base: <5
  time: -any
  unordered-containers: -any
  text: -any
  syb: -any
  filepath: -any
  process: -any
  async: -any
  conduit: -any
  conduit-extra: -any
  containers: -any
  haskell-src-exts: ! '>=1.12 && <1.17'
  ghc-paths: -any
  utf8-string: -any
  old-time: -any
  regex-tdfa: -any
  mtl: -any
  cmdargs: -any
  dynamic-cabal: ! '>=0.3.1 && <0.4'
  buildwrapper: -any
  cpphs: -any
  attoparsec: ! '>=0.11 && <0.13'
  transformers: -any
  deepseq: -any
  aeson: ! '>=0.7 && <0.9'
  vector: ! '>=0.8'
  directory: -any
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.7
- 0.8.8
- 0.8.9
- 0.8.10
- 0.8.11
- 0.9.0
- 0.9.1
author: JP Moresmau <jpmoresmau@gmail.com>, based on the work of Thomas Schilling
  and others
latest: 0.9.1
description-type: markdown
description: ! "# BuildWrapper\r\n\r\n[![Build Status](https://travis-ci.org/JPMoresmau/BuildWrapper.svg?branch=master)](https://travis-ci.org/JPMoresmau/BuildWrapper)\r\n\r\nBuildWrapper
  is a program designed to help an IDE deal with a Haskell project. It combines several
  tools under a simple API:\r\n\r\n- Cabal to configure and build the project. BuildWrapper
  works best on project that provide a cabal file.\r\n- GHC to load a particular file
  or buffer and generate a typechecked AST\r\n- Haskell-src-exts to parse a particular
  file and generate an outline\r\n\r\nBuildWrapper provides a library and an executable.
  Intended usage is mostly through the executable. This is how it's used by EclipseFP,
  the set of Haskell development plugins for the Eclipse IDE. \r\nThis executable
  is *short-lived*, it is not a running server as scion (the project BuildWrapper
  is an evolution of) or scion-browser. You launch it with parameters, it perform
  some work, and returns a JSON result.\r\nBuildWrapper uses a temporary work folder
  inside the project to store both a copy of the source files and the result of its
  operations. In an IDE setting, the content of the temporary folder may contain files
  representing unsaved data, which allow BuildWrapper to use Cabal and file based
  operations regardless.\r\n\r\n\r\nYou can run `buildwrapper --help` to get a feel
  for the different options you can call buildwrapper with. You can also run EclipseFP
  with the debug mode preference on to see the BuildWrapper interaction in an Eclipse
  console view.\r\n\r\n## Generic options\r\nThese options are available to all commands.\r\n\r\n-
  tempfolder: the name of the temporary folder, relative to the location of the project
  cabal file. Usually .dist-buildwrapper\r\n- cabalpath: the location of the cabal
  executable\r\n- cabalfile: the location of the project cabal file\r\n- cabalflags:
  the flags to pass to cabal when configuring\r\n- logcabal: should the call to the
  cabal executable be logged?\r\n\r\n## synchronize\r\nSynchronize ensures that all
  the files in the temporary work folder represent the up to date version of the source
  files. It returns the list of files actually copied from the main folder to the
  work folder. \r\n\r\n- force: true/false: copies files even if destination (in temporary
  folder) is newer\r\n\r\nExample: `buildwrapper synchronize --force=false --tempfolder=.dist-buildwrapper
  --cabalpath=/home/myuser/.cabal/bin/cabal --cabalfile=/home/myuser/myproject/myproject.cabal
  --cabalflags= --logcabal=true`\r\n\r\n\r\n## synchronize1\r\nSynchronizes only one
  file.\r\n\r\n- file: the relative path of the file to synchronize (relative to the
  project root)\r\n- force: true/false: copies files even if destination (in temporary
  folder) is newer\r\n\r\n## write\r\nUpdates the content of the file in the work
  folder. Note that an external tool could also write directly in the work folder.\r\n\r\n-
  file: the relative path of the file to update (relative to the project root)\r\n-
  contents: the contents to write\r\n\r\n## configure\r\nRuns cabal configure on the
  project. This command usually is not needed, as the build command will trigger a
  configure if needed.\r\nReturns the errors encountered, if any.\r\n\r\n- verbosity:
  the verbosity of Cabal output\r\n- cabaltarget: Source|Target: use the original
  cabal file or the one in the work folder\r\n\r\n## build\r\nRuns cabal build on
  the project.\r\nReturns the errors encountered, if any, and the files processed
  during that build.\r\n\r\n- verbosity: the verbosity of Cabal output\r\n- cabaltarget:
  Source|Target: use the original cabal file or the one in the work folder\r\n- output:
  true|false: should we actually run the linker and generates output\r\n\r\nExample:
  `buildwrapper build --output=true --cabaltarget=Source --tempfolder=.dist-buildwrapper
  --cabalpath=/home/myuser/.cabal/bin/cabal --cabalfile=/home/myuser/myproject/myproject.cabal
  --cabalflags= --logcabal=true`\r\n\r\n\r\n## build1\r\nBuild one file using the
  GHC API. BuildWrapper takes care of calling the API with the proper flags from the
  cabal file.\r\nReturns the errors encountered during the build, if any.\r\nThe AST
  and the build flags used are stored in a hidden file alongside the source file in
  the work folder. This file, with the .bwinfo extension, is plain JSON and can be
  parsed by an external tool if need be.\r\n\r\n- file: the relative path of the file
  to update (relative to the project root)\r\n\r\n## getbuildflags\r\nReturns the
  build flags use to build a particular file\r\n\r\n- file: the relative path of the
  file to update (relative to the project root)\r\n\r\n## outline\r\nReturns an outline
  of the file: the top level declarations, the import and export statements. This
  is generated using haskell-src-exts so the file does not need to be correct in respect
  to the typechecker, but needs to be valid Haskell syntax. If need be, the file is
  pre-processed by cpp2hs.\r\n\r\n- file: the relative path of the file to update
  (relative to the project root)\r\n\r\n## tokentypes\r\nReturns a collection of lexer
  tokens for a particular file. The tokens have a type assigned to them (documentation,
  symbols, etc). This is used to provide syntax coloring in an IDE. If need be, the
  file is pre-processed and the preprocessor tokens are returned in the collection
  too.\r\n\r\n- file: the relative path of the file to update (relative to the project
  root)\r\n\r\n## occurrences\r\nFind all occurrences of the given text in lexer tokens.
  Only fully matching tokens are retrieved.\r\n\r\n- file: the relative path of the
  file to update (relative to the project root)\r\n- token: the token text to search
  for\r\n\r\n## thingatpoint\r\nReturns the object found at a particular point in
  a source. Information can include a name, a module, a type, a haddock type code.\r\nThis
  uses the generated .bwinfo file to perform the search so does not invoke the GHC
  API unless necessary (.bwinfo file missing or older than source)\r\n\r\n- file:
  the relative path of the file to update (relative to the project root)\r\n- line:
  the line to look at\r\n- column: the column to look at\r\n\r\n## namesinscope\r\nReturns
  the list of names in scope (GHC API call)\r\n\r\n- file: the relative path of the
  file to update (relative to the project root)\r\n\r\n## locals\r\nReturns the list
  of names defined locally to a point in the source (inside the function, say)\r\n\r\n-
  file: the relative path of the file to update (relative to the project root)\r\n-
  sline: the start line of the defining scope\r\n- scolumn: the start column of the
  defining scope\r\n- eline: the end line of the defining scope\r\n- ecolumn: the
  end column of the defining scope\r\n\r\n## cleanimports\r\nReturns the cleaned imports
  line: the location and import text for the minimal required imports \r\n\r\n- file:
  the relative path of the file to update (relative to the project root)\r\n\r\n##
  dependencies\r\nReturns the list of all package dependencies for all cabal components
  in the cabal file, with the package database they are registered in\r\n\r\n## components\r\nReturns
  the list of all components of the cabal file (executables, library, test suites)\r\n"
license-name: BSD-3-Clause
