homepage: https://github.com/pbrisbin/bugsnag-haskell#readme
changelog-type: markdown
hash: 1f97c1064f2f0303004a2822b350d79cc81996043a08f83f328423f42ccc8d8d
test-bench-deps:
  unliftio: -any
  base: ! '>=4.8.0 && <5'
  time: -any
  hspec: -any
  text: -any
  doctest: -any
  bugsnag-haskell: -any
  aeson-qq: -any
  aeson: -any
maintainer: pbrisbin@gmail.com
synopsis: Bugsnag error reporter for Haskell
changelog: ! "## [*Unreleased*](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.1...master)\n\nNone\n\n##
  [v0.0.2.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.0...v0.0.2.1)\n\n-
  Set StackFrame as in-project based on the `CodeIndex` when present\n- Correctly
  parse `throwString` exceptions with newlines in the message\n\n## [v0.0.2.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.3...v0.0.2.0)\n\n-
  Add `CodeIndex` support\n\n  Adds a Template Haskell function to read your project
  source into an in-memory\n  Map structure to be set on your `BugsnagSettings` value.
  Then, as part of\n  notification, we can attach lines of source context to the StackFrames
  we\n  have. NOTE: This has memory-footprint implications, so is entirely opt-in.\n\n
  \ See https://github.com/pbrisbin/bugsnag-haskell/pull/39\n\n## [v0.0.1.3](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.2...v0.0.1.3)\n\n-
  Redact sensitive request headers by default [#31](https://github.com/pbrisbin/bugsnag-haskell/issues/31)\n-
  Deprecate Settings that should be `BeforeNotify` values [#32](https://github.com/pbrisbin/bugsnag-haskell/issues/32)\n-
  `bugsnagShouldNotify` operates after any `BeforeNotify` changes\n\n## [v0.0.1.2](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.2)\n\n-
  Make App Version an opaque `Text`, not a structured `Version` ([@MaxGabriel](https://github.com/pbrisbin/bugsnag-haskell/pull/29))\n\n##
  [v0.0.1.1](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.1)\n\nFirst (pre-)
  released version.\n"
basic-deps:
  warp: -any
  http-client: -any
  exceptions: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  unliftio: -any
  yesod-core: -any
  base: ! '>=4.8.0 && <5'
  time: -any
  text: -any
  network: -any
  parsec: -any
  ua-parser: -any
  th-lift-instances: -any
  containers: -any
  http-client-tls: -any
  bugsnag-haskell: -any
  iproute: -any
  http-conduit: -any
  http-types: -any
  Glob: ! '>=0.9.0'
  aeson: ! '>=1.3.0.0'
  template-haskell: -any
all-versions:
- '0.0.1.1'
- '0.0.1.2'
- '0.0.1.3'
- '0.0.2.0'
- '0.0.2.1'
- '0.0.2.2'
author: Patrick Brisbin
latest: '0.0.2.2'
description-type: markdown
description: ! "# Bugsnag error reporter for Haskell\n\nCatch and report exceptions
  in your Haskell code.\n\n## Configuration\n\n```hs\nsettings <- newBugsnagSettings
  \"BUGSNAG_API_KEY\"\n```\n\nSee [`Network.Bugsnag.Settings`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Settings.html).\n\n##
  Reporting an Error\n\n```hs\nnotifyBugsnag settings $ toException\n    $ bugsnagException
  \"Error\" \"message\"\n        [ $(currentStackFrame) \"myFunction\"\n        ]\n```\n\nSee
  [`Network.Bugsnag.Notify`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Notify.html).\n\n##
  Throwing & Catching\n\nThrow a `BugsnagException` yourself:\n\n```hs\nthrow\n    $
  bugsnagException \"Error\" \"message\" [$(currentStackFrame) \"myFunction\"]\n```\n\nCatch
  any exceptions, notify, and re-throw it:\n\n```hs\nmyFunction `catch` \\ex -> do\n
  \   notifyBugsnag settings ex\n    throw ex\n```\n\n## Examples\n\n- [Simple](./examples/simple/Main.hs)\n-
  [Command-Line](./examples/cli/Main.hs)\n- [WAI/Warp](./examples/warp/Main.hs)\n-
  [Yesod](./examples/yesod/Main.hs)\n\nExamples can be built locally with:\n\n```console\nstack
  build --flag bugsnag-haskell:examples\n```\n\n## Contributing\n\nSee [CONTRIBUTING](./CONTRIBUTING.md).\n\n---\n\n[CHANGELOG](./CHANGELOG.md)
  | [LICENSE](./LICENSE)\n"
license-name: MIT
