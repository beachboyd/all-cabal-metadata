homepage: https://github.com/pbrisbin/bugsnag-haskell#readme
changelog-type: markdown
hash: 44a48e25058e45c8cc351355f6a601d9b4bc6c9895e61e84b4dcd3366302a26b
test-bench-deps:
  unliftio: -any
  base: '>=4.11.0 && <5'
  time: -any
  hspec: -any
  text: -any
  doctest: -any
  bugsnag-haskell: -any
  aeson-qq: -any
  aeson: -any
  yaml: -any
maintainer: pbrisbin@gmail.com
synopsis: Bugsnag error reporter for Haskell
changelog: |
  ## [_Unreleased_](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.1...master)

  None.

  ## [v0.0.4.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.0...v0.0.4.1)

  - Fix invalid URLs in Request tab (missing leading `/`s in paths)

  ## [v0.0.4.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.3.1...v0.0.4.0)

  - Fixed serialization of headers in BugsnagRequest

    Previously, headers were a list of:

    ```
    [(CI ByteString, ByteString)]
    ```

    So they serialized as an array, but Bugsnag only accepts objects for headers.

    To solve this, the `newtype BugsnagRequestHeaders` wraps the headers and has a
    correct `ToJSON` instance.

  ## [v0.0.3.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.3.0...v0.0.3.1)

  - Tag SomeException with the underlying exception class

  ## [v0.0.3.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.2...v0.0.3.0)

  - Fix sensitive request header redacting
  - Remove `defaultBeforeNotify`

  ## [v0.0.2.2](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.1...v0.0.2.2)

  Packaging changes only.

  ## [v0.0.2.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.0...v0.0.2.1)

  - Set StackFrame as in-project based on the `CodeIndex` when present
  - Correctly parse `throwString` exceptions with newlines in the message

  ## [v0.0.2.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.3...v0.0.2.0)

  - Add `CodeIndex` support

    Adds a Template Haskell function to read your project source into an in-memory
    Map structure to be set on your `BugsnagSettings` value. Then, as part of
    notification, we can attach lines of source context to the StackFrames we
    have. NOTE: This has memory-footprint implications, so is entirely opt-in.

    See https://github.com/pbrisbin/bugsnag-haskell/pull/39

  ## [v0.0.1.3](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.2...v0.0.1.3)

  - Redact sensitive request headers by default
    [#31](https://github.com/pbrisbin/bugsnag-haskell/issues/31)

    **NOTE**: this wasn't actually working at this point. It is actually fixed in
    v0.0.3.0.

  - Deprecate Settings that should be `BeforeNotify` values
    [#32](https://github.com/pbrisbin/bugsnag-haskell/issues/32)
  - `bugsnagShouldNotify` operates after any `BeforeNotify` changes

  ## [v0.0.1.2](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.2)

  - Make App Version an opaque `Text`, not a structured `Version`
    ([@MaxGabriel](https://github.com/pbrisbin/bugsnag-haskell/pull/29))

  ## [v0.0.1.1](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.1)

  First (pre-) released version.
basic-deps:
  warp: -any
  http-client: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  unliftio: -any
  yesod-core: -any
  base: '>=4.11.0 && <5'
  time: -any
  text: -any
  network: -any
  parsec: -any
  ua-parser: -any
  th-lift-instances: -any
  containers: -any
  http-client-tls: -any
  bugsnag-haskell: -any
  iproute: -any
  http-conduit: -any
  http-types: -any
  Glob: '>=0.9.0'
  aeson: '>=1.3.0.0'
  template-haskell: -any
all-versions:
- 0.0.1.1
- 0.0.1.2
- 0.0.1.3
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.0.3.1
- 0.0.4.0
- 0.0.4.1
author: Patrick Brisbin
latest: 0.0.4.1
description-type: markdown
description: |
  # Bugsnag error reporter for Haskell

  Catch and report exceptions in your Haskell code.

  ## Configuration

  ```hs
  settings <- newBugsnagSettings "BUGSNAG_API_KEY"
  ```

  See [`Network.Bugsnag.Settings`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Settings.html).

  ## Reporting an Error

  ```hs
  notifyBugsnag settings $ toException
      $ bugsnagException "Error" "message"
          [ $(currentStackFrame) "myFunction"
          ]
  ```

  See [`Network.Bugsnag.Notify`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Notify.html).

  ## Throwing & Catching

  Throw a `BugsnagException` yourself:

  ```hs
  throw
      $ bugsnagException "Error" "message" [$(currentStackFrame) "myFunction"]
  ```

  Catch any exceptions, notify, and re-throw it:

  ```hs
  myFunction `catch` \ex -> do
      notifyBugsnag settings ex
      throw ex
  ```

  ## Examples

  - [Simple](./examples/simple/Main.hs)
  - [Command-Line](./examples/cli/Main.hs)
  - [WAI/Warp](./examples/warp/Main.hs)
  - [Yesod](./examples/yesod/Main.hs)

  Examples can be built locally with:

  ```console
  stack build --flag bugsnag-haskell:examples
  ```

  ## Contributing

  See [CONTRIBUTING](./CONTRIBUTING.md).

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
