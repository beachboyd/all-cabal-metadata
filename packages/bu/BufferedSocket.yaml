homepage: ''
changelog-type: ''
hash: 8a2e1f63764c4765d38f7df3bde4738e1a8219443feef72897d8851c3484aeaf
test-bench-deps: {}
maintainer: tomas.o.more@gmail.com
synopsis: A socker wrapper that makes the IO of sockets much cleaner
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5.0'
  text: ! '>=1.1 && <1.3'
  network: ! '>=2.4 && <2.7'
all-versions:
- 0.2.0.0
- 0.2.1.0
author: Tomas Möre
latest: 0.2.1.0
description-type: markdown
description: ! "### BufferedSocket\n##### A wrapper for webSockets\n\nThis package
  is made to make reading and writing from network sockets easy in haskell.\n\nTo
  make a socket you need three things.\n\n1. A socket made from the Network package
  (BufferedSockets doesn't meddle with your configuration so you have to do all this
  yourself)\n2. Descide output buffer size \n\n3. Descide input buffer size\n\n4.
  (party like it's 1969) \n\nthis is done with the following function:\n```haskell\nmakeBufferedSocket
  :: (Socket, SockAddr) -> InputBufferSize -> OutputBufferSize -> IO BufferedSocket\n```\n\n\n###
  \  The main functions for read and write:\n\n#####  Reading:\n```haskell\nread ::
  BS.BufferedSocket -> IO r\n```\nThe standard read is made to ready any basic data
  values.\nThis is amongst Word8 to Word64 and Int8 to Int64\n\n```haskell\nreadString
  :: BS.BufferedSocket -> Int -> IO s\n```\nThea readString funtcion can read both
  lazy and strict bytestrings. \nBut you need to provide the number of bytes to read.\n\nTo
  read any other kind of data is is reccomended to still use these functions. And
  then use decoding methods to get the data format you want. \n\n\n```haskell\nreadToByte
  :: BufferedSocket -> Word8 -> IO ByteString\nreadToByteMax :: BufferedSocket ->
  Word8 -> MaxLength -> IO (Maybe ByteString)\n\nreadToByteString :: BufferedSocket
  -> ByteString -> IO ByteString\nreadToByteStringMax :: BufferedSocket -> ByteString
  -> MaxLength -> IO (Maybe ByteString)\n```\nThe above functions are made to scan
  the input buffer for specific bytes. All of them of course reads more data from
  the network if necesarry \nHowever it is reccomended to use the \"Max\" verions
  of the functions as they put a limit to how much data may be read \n\n\n#####  Writing:\n```haskell\nsend
  :: BS.BufferedSocket -> s -> IO ()\n```\nSends any basic data type and both lazy
  and strict ByteStrings\nIf you wish to send any other kind of data use encoding
  methods for the data type.\n\n```haskell\nflush :: BufferedSocket -> IO ()\n```\nData
  is not sent to the network unless:\n1. The writing buffer is full\n2. Flush is called\n\n\n###
  \ Buffer functionalities \n##### Input\nThe buffers are made to work is a fairly
  standard way. \nEvery time we read from the socket the socket first checks the buffer
  if data is available. If it is it will just aquire the data from the buffer. \nIf
  not then it will access the network and attempt to read for the ammount of bytes
  that are available in the buffer.\nIf not enthough space is available the first
  step is to see if clearing the offset will grant enoguh space. If not it will allow
  the  data to be saved elsewhere.\n\n\n##### Output\nIs much simpler then Input.
  Simply puts the bytes together before sending. The actaul sending of data will only
  happend once the buffer is full OR the flush function is called\n\n\n\n###  Example
  code:\nhere under is some example code. Warning this is pretty pointless code!!!
  \n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport qualified Network.Socket
  as NS -- NS for \"native socket\"\nimport qualified BufferedSocket as BS \nimport
  qualified Data.ByteString as B\n\ntestServerPort = 1337\ntestHost = \"localhost\"\ntestServerMaxConnections
  = 1\n\n\nbufferSize = 1024 * 10\n\n-- This is an example how to make a TCP server
  in haskell \n-- Keep in mind that this is a pretty supid server \n\nmakeTestTcpServer::
  (BS.BufferedSocket -> IO ())  -> IO ()\nmakeTestTcpServer thunk  = NS.withSocketsDo
  $ do \n    -- creates a tcp socket\n    serverSock <- NS.socket NS.AF_INET NS.Stream
  0\n    -- Binds the socket to serve at address \n    NS.bindSocket serverSock (NS.SockAddrInet
  testServerPort NS.iNADDR_ANY)\n\n    NS.listen serverSock testServerMaxConnections\n
  \   socketData@(subSock,subSockaddr) <- NS.accept serverSock\n\n    serverBSock
  <- BS.makeBufferedSocket socketData bufferSize bufferSize\n\n    thunk serverBSock\n\n
  \   NS.sClose serverSock\n\nmain = makeTestTcpServer $ \\bSock -> \n            BS.send
  bSocket (\"Hello world!\" :: B.ByteString) \n\n\n```\n"
license-name: MIT
