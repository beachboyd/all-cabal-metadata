homepage: https://github.com/snowleopard/build
changelog-type: ''
hash: 84229529df8fa8e680fb53933cf0c8c065298979d48d7a14bb1c12cb79294783
test-bench-deps:
  extra: ! '>=1.5.3 && <1.7'
  base: ! '>=4.7 && <5'
  build: -any
  containers: ! '>=0.5.7.1 && <0.6'
  mtl: ! '>=2.2.1 && <2.3'
  transformers: ! '>=0.5.2.0 && <0.6'
maintainer: ! 'Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard'
synopsis: Build systems a la carte
changelog: ''
basic-deps:
  extra: ! '>=1.5.3 && <1.7'
  base: ! '>=4.7 && <5'
  filepath: ! '>=1.4.1.0 && <1.5'
  containers: ! '>=0.5.7.1 && <0.6'
  mtl: ! '>=2.2.1 && <2.3'
  transformers: ! '>=0.5.2.0 && <0.6'
  random: ! '>=1.1 && <1.2'
  algebraic-graphs: ! '>=0.1.1 && <0.2'
all-versions:
- '0.0.1'
- '0.0.1.1'
- '1.0'
author: Andrey Mokhov, Neil Mitchell, Simon Peyton Jones
latest: '1.0'
description-type: markdown
description: ! "# Build Systems à la Carte\n\n[![Hackage version](https://img.shields.io/hackage/v/build.svg?label=Hackage)](https://hackage.haskell.org/package/build)
  [![Linux & OS X status](https://img.shields.io/travis/snowleopard/build/master.svg?label=Linux%20%26%20OS%20X)](https://travis-ci.org/snowleopard/build)
  [![Windows status](https://img.shields.io/appveyor/ci/snowleopard/build/master.svg?label=Windows)](https://ci.appveyor.com/project/snowleopard/build)\n\nThis
  project provides an executable framework for developing and comparing build systems,
  viewing them as\nrelated points in landscape rather than as isolated phenomena.
  The code derives from the ICFP 2018 paper\n[\"Build Systems à la Carte\"](https://github.com/snowleopard/build-systems/releases/download/icfp-submission/build-systems.pdf).\n\n##
  Getting Started\n\nYou may be interested to:\n\n* Run `stack test` to execute all
  the provided build systems on a very simple example.\n* Run `stack haddock` to generate
  HTML documentation of all the interfaces.\n* Read the code, particularly [System.hs](src/Build/System.hs)
  which is the concrete implementation of\n  all build systems. Following the imports
  (or the\n  [Haddock documentation](https://hackage.haskell.org/package/build)) will
  lead you to all the\n  constituent parts.\n\n## Further Activities\n\nThere aren't
  really any. The code served as a proving ground for ideas, and its existence both
  allows\nconfirmation that our conclusions are valid, and opportunity to cheaply
  conduct further experiments. Although\nthe code is a useful adjoint to the paper,
  it is not essential to it (other than we wouldn't have been\nable to discover what
  we did without an executable specification).\n\n## Background Information\n\nThe
  task abstraction is explored more completely in\n[this blog post](https://blogs.ncl.ac.uk/andreymokhov/the-task-abstraction/),
  and the motivation behind\nthe project in [an earlier blog post](https://blogs.ncl.ac.uk/andreymokhov/cloud-and-dynamic-builds/).\n"
license-name: MIT
