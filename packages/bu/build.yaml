homepage: https://github.com/snowleopard/build
changelog-type: ''
hash: 3964f48bcc88bf9fae5f9248b6535a5e7f5b7bd5f552385653f7cd3861042e3f
test-bench-deps:
  extra: ! '>=1.5.3'
  base: ! '>=4.7 && <5'
  build: -any
  containers: ! '>=0.5.7.1'
  mtl: ! '>=2.2.1'
  transformers: ! '>=0.5.2.0'
maintainer: ! 'Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard'
synopsis: Build systems a la carte
changelog: ''
basic-deps:
  extra: ! '>=1.5.3'
  base: ! '>=4.7 && <5'
  filepath: ! '>=1.4.1.0'
  containers: ! '>=0.5.7.1'
  mtl: ! '>=2.2.1'
  transformers: ! '>=0.5.2.0'
  random: ! '>=1.1'
  algebraic-graphs: ! '>=0.1.1'
all-versions:
- '0.0.1'
author: Andrey Mokhov, Neil Mitchell, Simon Peyton Jones
latest: '0.0.1'
description-type: markdown
description: ! '# Build Systems à la Carte


  [![Linux & OS X status](https://img.shields.io/travis/snowleopard/build/master.svg?label=Linux%20%26%20OS%20X)](https://travis-ci.org/snowleopard/build)
  [![Windows status](https://img.shields.io/appveyor/ci/snowleopard/build/master.svg?label=Windows)](https://ci.appveyor.com/project/snowleopard/build)


  This project provides an executable framework for developing and comparing build
  systems, viewing them as related points in landscape rather than as isolated phenomena.
  The code derives from the ICFP 2018 paper ["Build Systems à la Carte"](https://github.com/snowleopard/build-systems/releases/download/icfp-submission/build-systems.pdf).


  ## Getting Started


  To install from a Docker image do _TODO: Insert instuctions here_. After that you
  should have a copy of GHC and a standard Cabal project.


  You may be interested to:


  * Run `cabal test` to execute all the provided build systems on a very simple example.

  * Run `cabal haddock` to generate HTML documentation of all the interfaces.

  * Read the code, particularly [System.hs](src/Build/System.hs) which is the concrete
  implementation of all build systems. Following the imports (or the Haddock documentation)
  will lead you to all the consistuent parts.


  ## Further Activities


  There aren''t really any. The code served as a proving ground for ideas, and it''s
  existence both allows confirmation that our conclusions are valid, and opportunity
  to cheaply conduct further experiments. However, the code is a useful adjoint to
  the paper, it is not essential to it (other than we wouldn''t have been able to
  discover what we did without an executable specification).


  ## Background Information


  The task abstraction is explored more completely in [this blog post](https://blogs.ncl.ac.uk/andreymokhov/the-task-abstraction/),
  and the motivation behind the project in [an earlier blog post](https://blogs.ncl.ac.uk/andreymokhov/cloud-and-dynamic-builds/).

'
license-name: MIT
