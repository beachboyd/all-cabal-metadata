homepage: http://github.com/silkapp/bumper
changelog-type: markdown
hash: 1cd28042d55e1292a7ca8cdbb43afd5a170db915f91a2e0d3aa210da6b918e64
test-bench-deps: {}
maintainer: code@silk.co
synopsis: Automatically bump package versions, also transitively.
changelog: ! '#### 0.6.0.3


  * Allow Cabal 1.22.*


  #### 0.6.0.2


  * Allow Cabal 1.20.*


  #### 0.6.0.1


  * Fixed link to README in .cabal


  ## 0.6


  * Added documentation and changelog

  * Transitive bumps are now level 3 instead of level 2 (--minor)

'
basic-deps:
  split: ! '>=0.1 && <0.3'
  Cabal: ! '>=1.6 && <1.26'
  base: ==4.*
  fclabels: ! '>=1.0 && <2.1'
  strict: ==0.3.2
  process: ! '>=1.0 && <1.5'
  containers: ! '>=0.4 && <0.6'
  regex-compat: ! '>=0.93 && <0.96'
all-versions:
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.1
- 0.5.1.1
- 0.5.1.2
- '0.6'
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
author: Silk
latest: 0.6.0.3
description-type: markdown
description: ! "# Bumper\n\n[![Build Status](https://travis-ci.org/silkapp/bumper.svg?branch=master)](https://travis-ci.org/silkapp/bumper)\n\nBumper
  is a tool for working with cabal packages. It lets you manage the version bounds
  of packages by transitively bumping packages (and their dependencies transitively),
  without you needing to edit the cabal files manually.\n\nIt's useful if you have
  a set of packages that you develop together.\n\nYou can install the latest version
  from [Hackage](http://hackage.haskell.org/package/bumper)\n```shell\n$ cabal install
  bumper\n```\nor try the git version if you are feeling adventurous.\n\n\nTo get
  started you should have all projects under a common directory, such as\n```\nproject/package-1\nproject/package-2\n```\n\nYou
  can now make changes to these packages and use bumper to handle version bumps. See
  Examples below.\n\n\n## Interface\n\n```\n$ bumper --help\nUsage: bumper [OPTIONS...],
  with the following options:\n  -m PACKAGE(,PACKAGE)*  --major=PACKAGE(,PACKAGE)*
  \                        Comma-separated list of packages which will get a major
  bump (bump at position 1).\n  -n PACKAGE(,PACKAGE)*  --minor=PACKAGE(,PACKAGE)*
  \                        Comma-separated list of packages which will get a minor
  bump (bump at position 2).\n  -0 PACKAGE(,PACKAGE)*  --bump-0=PACKAGE(,PACKAGE)*
  \                       Comma-separated list of packages which will get a bump at
  position 0.\n  -1 PACKAGE(,PACKAGE)*  --bump-1=PACKAGE(,PACKAGE)*                        Comma-separated
  list of packages which will get a bump at position 1.\n  -2 PACKAGE(,PACKAGE)*  --bump-2=PACKAGE(,PACKAGE)*
  \                       Comma-separated list of packages which will get a bump at
  position 2.\n  -3 PACKAGE(,PACKAGE)*  --bump-3=PACKAGE(,PACKAGE)*                        Comma-separated
  list of packages which will get a bump at position 3.\n                         --set-versions=PACKAGE@VERSION(,PACKAGE@VERSION)*
  \ Comma-separated list of packages and their versions.\n  -t                     --no-transitive
  \                                   Do not apply bumping transitively.\n  -i PACKAGE(,PACKAGE)*
  \ --ignore=PACKAGE(,PACKAGE)*                        Comma-separated list of packages
  which will be ignored when transitive bumping.\n  -g PATH                --global=PATH
  \                                     Bump according to latest version number in
  the given package database.\n  -d                     --dry-run                                          Just
  output the dependencies that will be updated.\n  -?                     --help                                             Show
  usage help and exit.\n  -v                     --version                                          Show
  version info and exit.\n```\n\n\n## Behavior\n\n* Bumper does not reformat your
  cabal file, it only replaces the version ranges without using Cabal's pretty printer
  (which ignores existing formatting)\n\n* Transitive bumps are always position 3
  (D) bumps. Note that your transitive packages may re-export modules or instances
  from their dependencies, so they may need to bumped further\n\n* There is no support
  for bumping external packages. If you depend on something you are not maintaining
  you need to bump that version manually\n\n* Bumper respects version ranges you have
  specified, if `b` depends on `a >= 0.1 && < 0.3` and you bump `a` to `0.2.3` the
  bound will not change, but if you bump `a` to `0.3` `b`'s dependency will change
  to `a == 0.3.*`\n\n* If you depend on a specific version range (minor, major, ...)
  the level of the range may change after bumping. Depending on `a == 0.1.2.*` and
  doing a major bump of `a` will change your dependency to `a == 0.2.*`, but...\n\n*
  If you have an explicit version dependency (`a == 0.1.0.1`) then a major bump of
  `a` will result in `a == 0.2`.\n\n\n## Examples\n\nYou can find this repository
  with empty cabal projects at http://github.com/silkapp/bumper-example\n\n```shell\n$
  git clone http://www.github.com/silkapp/bumper-example.git\n```\n\nIt contains four
  empty cabal projects, all with version `0.1`:\n\n* `b` depends on `a == 0.1` (fixed
  version)\n* `c` depends on `a == 0.1.*` and `b == 0.1.*` (major dependencies)\n*
  `d` depends on `a` (any version) and `b >= 0.1 && < 0.2` (major dependency)\n\nSay
  we make a minor change to `a` and we've checked that all packages build together,
  so we run\n\n```shell\n$ bumper --minor a # or bumper -2 a\n$ git diff\n\na/a.cabal\n-version:
  \            0.1\n+version:             0.1.1\n\nb/b.cabal\n-version:             0.1\n+version:
  \            0.1.0.1\n-                     , a == 0.1\n+                     ,
  a == 0.1.1\n```\n\n`b`'s version and its dependency on `a` was bumped as well. `c`
  and `d` are still compatible with `a` so they were not modified.\n\nIt works in
  the same fashion no matter what degree of bumping you do.\n\n```shell\n$ git reset
  --hard\n$ bumper --major a\n$ git diff\n\na/a.cabal\n-version:             0.1\n+version:
  \            0.2\n\nb/b.cabal\n-version:             0.1\n+version:             0.1.0.1\n-
  \                    , a == 0.1\n+                     , a == 0.2\n\nc/c.cabal\n-version:
  \            0.1\n+version:             0.1.0.1\n-                     , a == 0.1.*\n+
  \                    , a == 0.2.*\n```\n\nBumper combines all changes you do so
  versions aren't bumped several times, below `b` gets one major bump instead of a
  major and a minor.\n\n```shell\n$ git reset --hard\n$ bumper --major a,b\n$ git
  diff\n\na/a.cabal\n-version:             0.1\n+version:             0.2\n\nb/b.cabal\n-version:
  \            0.1\n+version:             0.2\n\nc/c.cabal\n-version:             0.1\n+version:
  \            0.1.0.1\n-                     , a == 0.1.*\n+                     ,
  a == 0.2.*\n-                     , b == 0.1.*\n+                     , b == 0.2.*\n\nd/d.cabal\n-version:
  \            0.1\n+version:             0.1.0.1\n-                     , b >= 0.1
  && < 0.2\n+                     , b == 0.2\n```\n"
license-name: BSD-3-Clause
