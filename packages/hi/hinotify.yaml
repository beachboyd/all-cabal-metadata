homepage: https://github.com/kolmodin/hinotify.git
changelog-type: markdown
hash: d2dc25a18e144eef5e07a2d5bfcbc4275bed664f40247b23ca8c8e6dc0f7c657
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  hinotify: -any
  directory: -any
maintainer: Lennart Kolmodin <kolmodin@gmail.com>
synopsis: Haskell binding to inotify
changelog: ! "hinotify\n======\n\nhinotify-0.3.10\n---------------\n\n- Allow async-2.2.\n-
  Use `RawFilePath` (`ByteString`) for filenames, from `unix` package.\n\n  Changes
  the `Event` type and `addWatch` function.\n\n\nhinotify-0.3.9\n--------------\n\nPatches
  contributed by Simon Marlow marlowsd@gmail.com\n\n- Don't run callbacks in `mask_`.\n\n
  \ It prevented the callback threads from receiving StackOverflow, amongst other
  things.\n\n- Synchronous `killThread`.\n\n  `killThread` will now wait for the callback
  dispatcher threads to finish.\n\n- Bug fixes\n\n  https://github.com/kolmodin/hinotify/pull/23\n\nhinotify-0.3.8\n--------------\n\n-
  Use file system encoding for file names.\n\n  When run in a locale like LANG=C,
  this ensures that the filename is encoded\n  as a filename, so that arbitrary bytes
  in it will round-trip correctly,\n  rather than being stripped out.\n\n  Fixes https://github.com/kolmodin/hinotify/issues/13\n\n
  \ Patch contributed by Joey Hess joeyh@joeyh.name\n"
basic-deps:
  bytestring: -any
  unix: -any
  base: ! '>=4.5.0.0 && <5'
  async: ! '>=1.0 && <2.3'
  containers: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.7'
- '0.3.8'
- '0.3.8.1'
- '0.3.9'
- '0.3.10'
author: Lennart Kolmodin
latest: '0.3.10'
description-type: markdown
description: ! "hinotify: inotify for Haskell\n=============================\n\n[![Build
  Status](https://api.travis-ci.org/kolmodin/hinotify.png?branch=master)](http://travis-ci.org/kolmodin/hinotify)\n\nAbout\n-----\n\nhinotify,
  a library to [inotify] which has been part of the Linux kernel\nsince 2.6.13.\n\ninotify
  provides file system event notification, simply add a watcher to\na file or directory
  and get an event when it is accessed or modified.\n\nThis module is named `hinotify`.\n\nSee
  example code in the `examples` directory, distributed with the source\ncode.\n\n[inotify]:
  http://www.kernel.org/pub/linux/kernel/people/rml/inotify/\n\nNews\n----\n\n**hinotify
  0.3.7**\n\n* Bug fix: When registerering a new watch on a path which is already
  watched,\n  don't overwrite the event listener from the previous watch.\n\n**hinotify
  0.3.2**\n\n* Make each `WatchDescriptor` contain its `INotify`. Changes to the function
  types:\n\n>      -removeWatch :: INotify -> WatchDescriptor -> IO ()\n>      +removeWatch
  :: WatchDescriptor -> IO ()\n\n* Fix typo in declaration of `Deleted` in `data Event`;\n\n>
  \     - { isDirecotry :: Bool\n>      + { isDirectory :: Bool\n\n**hinotify 0.3.1**\n\n*
  Use `inotify.h` from `glibc` rather than from the linux headers, as\n      recommended
  upstream.\n\n**hinotify 0.3**\n\n* Compiles with GHC 6.12, GHC 6.10.4, GHC 6.8.2
  and GHC 6.6.1\n\n**hinotify 0.2**\n\n* Updates to the API\n    - Function names
  is now in semiCamelCase\n    - Restructure event parameters to make it more consistent\n*
  Small test suit in `tests/`\n* Compiles with GHC 6.8.2 and GHC 6.6.1\n* Requires
  Cabal 1.2\n\n**hinotify 0.1**\n:   Initial release\n\nAPI\n---\n\nThe API basically
  consists of:\n\n```haskell\ninitINotify :: IO INotify\naddWatch :: INotify\n         ->
  [EventVariety]   -- different events to listen on\n         -> FilePath         --
  file/directory to watch\n         -> (Event -> IO ()) -- event handler\n         ->
  IO WatchDescriptor\nremoveWatch :: WatchDescriptor -> IO ()\n```\n\nA sample program:\n\n```haskell\nimport
  System.Directory\nimport System.IO\n\nimport System.INotify\n\nmain :: IO ()\nmain
  = do\n  inotify <- initINotify\n  print inotify\n  home <- getHomeDirectory\n  wd
  <- addWatch\n          inotify\n          [Open,Close,Access,Modify,Move]\n          home\n
  \         print\n  print wd\n  putStrLn \"Listens to your home directory. Hit enter
  to terminate.\"\n  getLine\n  removeWatch wd\n```\n\nDownload\n--------\n\nThe code
  is available via the [homepage], and via darcs:\n\n    git clone https://github.com/kolmodin/hinotify.git\n\nThe
  [API] is available online.\n\nI'm most grateful for feedback on the API, and what
  else you might have to\nsuggest.\n\nAuthor\n------\n\nLennart Kolmodin\n\n`kolmodin
  at gmail.com`\n\nLegal\n-----\n\nThis software is released under a BSD-style license.
  See LICENSE for\nmore details.\n\nCopyright &copy; 2007-2012 Lennart Kolmodin\n\n[homepage]:
  https://github.com/kolmodin/hinotify.git\n\n[API]: http://hackage.haskell.org/packages/archive/hinotify/latest/doc/html/System-INotify.html\n"
license-name: BSD3
