homepage: https://github.com/lehins/hip
changelog-type: markdown
hash: 11a3b06a222abae8d2f1da717890b24392de1df22a2c2bb388922565a73dd9be
test-bench-deps:
  bytestring: -any
  base: ! '>=4.5 && <5'
  hspec: -any
  criterion: -any
  repa-algorithms: -any
  deepseq: -any
  QuickCheck: -any
  repa: -any
  vector: -any
  hip: -any
maintainer: lehins@yandex.ru
synopsis: Haskell Image Processing (HIP) Library.
changelog: ! "1.5.2.0\n=======\n\n* Fixed FFT performace issue\n* Reduced JuicyPixels
  module compile time and introduced conversion functions.\n* Created `Filter` and
  implemented few filters: `gaussianBlur`\n* Indroduced `Seq` format wrapper for sequence
  of images (eg. animated GIFs)\n\n1.5.2.0\n=======\n\n* Fixed `Storable` instance
  for some Pixel types.\n* Fixed reading/writing animated GIFs. Added a detailed example
  to documentation.\n* Improved encoding/decoding of images.\n* Improved coversion
  between `ColorSpace`s.\n\n1.5.1.0\n=======\n\n* Significantly improved convolution
  performance.\n* Improved exchanging representation between images, by removing `Exchangable`\n
  \ class, but keeping `exchange` function usage unchaged, thus it should be\n  backwards
  compatible up to a type signature.\n* Created general `fromVector` to `toVector`
  functions\n* Brought back `fromRepaArrayS` and `fromRepaArrayP` functions [#6]\n\n1.5.0.0\n=======\n\n*
  Refactored `Gray` color space to be `X`, in order to reflect it's generality\n*
  Renamed few core functions:\n\n  * `mapPx` -> `liftPx`,\n  * `zipWithPx` -> `liftPx2`,\n
  \ * `broadcastC` -> `promote`,\n  * `singleton` -> `scalar`.\n\n* `upsample`/`downsample`
  functions are now a lot more general.\n\n\n1.4.0.1\n=======\n\n* Fixed the ability
  to construct complex images by installing `Complex` into `Elevator`\n* Made it possible
  to write complex images by concatenating real and imaginary part together.\n* Fixed
  writing images in other representation than `VS`.\n\n1.4.0.0\n=======\n\nMajor rewrite,
  with most of functionality is still backwards compatible, but\nwith a some extra
  features.\n\n* Storable Repa and Vector representations through generic implementations\n*
  `ColorSpace` is more general allowing for non polymorphic Pixel types\n* `Elevator`
  works on base types rather than on pixels\n* Conversions from JuicyPixels and NetPbm
  is done through casting a Vector\n  rather than through an explicit conversion.\n\nMajor
  API changes:\n\n  * Renaming `RS` and `RP` Repa representations into `RSU` and `RPU`.\n
  \ * Addition `VS` Storable Vector representationas well as `RSS` and `RPS`\n    Storable
  Repa representations.\n\n1.3.0.0\n=======\n\n* Significantly simplified interface:\n
  \ * Removed `ManifestArray`, `SequentialArray` and `MutableArray` classes in favor
  of `MArray`.\n* Rewrite of Repa image representations. Removed `RD` representation.\n*
  Introduced function `canvasSize`.\n\n1.2.0.0\n=======\n\n* Changed `Interpolation`
  in a way that border resolution is supplied separatly\n  from the method.\n* Introduced
  function `translate`.\n* Added a better test suite. Improved coverage.\n* Fixed
  a bug with border resolution strategy `Continue`.\n* Added better error messaging
  for border checks.\n\n1.1.0.1\n=======\n\n* Backwards compatibility with GHC 7.8\n\n1.1.0.0\n=======\n\n*
  GHC 8 support.\n* Improved IO:\n  * OS default image viewer is used for displaying
  images with ability to use a custom one.\n  * Histogram plotting is done using diagrams
  instead of cairo backend,\n    significantly simplifying installation\n\n\n1.0.2.0\n=======\n\n*
  Changed the way image displaying works. Now `displayImage` function will try\n  to
  automatically detect the default external viewer program.\n* Renamed module `Graphics.Image.IO.External`
  to `Graphics.Image.IO.Formats`,\n  so it reflects the purpose slightly better.\n\n1.0.1.2\n=======\n\n*
  Added support of \"vector>=0.11.0.0\"\n\n1.0.1.1\n=======\n\n* Added `rotate` function.\n*
  Fixed writing `RGBA` files with `writeImage` (#2).\n\n1.0.1\n=====\n\n* Made it
  compatible with GHC >= 7.4 (#1)\n* Added histogram plotting using Charts\n"
basic-deps:
  Chart: ! '>=1.5'
  JuicyPixels: ! '>=3.2.7'
  bytestring: ! '>=0.9.0.4'
  Chart-diagrams: ! '>=1.5'
  base: ! '>=4.5 && <5'
  netpbm: ! '>=1.0.1'
  filepath: ! '>=1.0'
  process: ! '>=1.1.0.0'
  colour: ! '>=2.3.3'
  temporary: ! '>=1.1.1'
  deepseq: ! '>=1.1'
  repa: ! '>=3.2.1.1 && <4'
  primitive: ! '>=0.4'
  vector: ! '>=0.10'
  directory: ! '>=1.2.2.0'
all-versions:
- 1.0.0.0
- 1.0.1
- 1.0.1.1
- 1.0.1.2
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.2.0.0
- 1.3.0.0
- 1.4.0.0
- 1.4.0.1
- 1.5.0.0
- 1.5.1.0
- 1.5.2.0
- 1.5.3.0
author: Alexey Kuleshevich
latest: 1.5.3.0
description-type: markdown
description: ! "Haskell Image Processing Library\n================================\n\nHaskell
  Image Processing (HIP) Library\n\nDocumentation is on [Hackage](http://hackage.haskell.org/package/hip),
  and [Stackage](https://www.stackage.org/nightly/package/hip).\n\n[![Build Status](https://travis-ci.org/lehins/hip.svg?branch=master)](https://travis-ci.org/lehins/hip)
  \n[![Hackage](https://img.shields.io/hackage/v/hip.svg?style=flat)](https://hackage.haskell.org/package/hip)\n\nInstallation\n------------\n\nInstall
  HIP using `cabal`:\n\n* `$ cabal update && cabal install hip`\n\nand using `stack`:\n\n*
  `$ stack install hip`\n\nIn order to be able to view images in GHCi an external
  image viewer is used. You\ncan use any viewer that accepts a filename as an argument,
  and by default, image\nviewer specified by the OS is used.\n\n"
license-name: BSD-3-Clause
