homepage: http://github.com/vincenthz/hit
changelog-type: ''
hash: c2bb71f239a4e38fd783f2f65784405a858a6188bc4343737c12be9d20b01ba2
test-bench-deps:
  bytestring: -any
  hourglass: -any
  base: ! '>=3 && <7'
  hit: -any
  bytedump: ! '>=1.0'
  tasty-quickcheck: -any
  tasty: -any
maintainer: Vincent Hanquez <vincent@snarc.org>
synopsis: Git operations in haskell
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  hourglass: ! '>=0.2'
  base: ! '>=4 && <5'
  system-fileio: -any
  unix-compat: -any
  parsec: ! '>=3'
  patience: -any
  containers: -any
  utf8-string: -any
  zlib-bindings: ! '>=0.1 && <0.2'
  zlib: -any
  mtl: -any
  byteable: -any
  attoparsec: ! '>=0.10.1'
  random: -any
  system-filepath: -any
  vector: -any
  cryptohash: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
author: Vincent Hanquez <vincent@snarc.org>
latest: 0.6.3
description-type: markdown
description: ! "Hit\n===\n\nHit is a reimplementation of some git operations in pure
  haskell.\n\n\nwhat it does do:\n\n* read loose objects, and packed objects.\n* write
  new loose objects\n* git like operations available: commit, cat-file, verify-pack,
  rev-list, ls-tree.\n\nwhat is doesn't do:\n\n* reimplement the whole of git.\n*
  checkout's index reading/writing, fetching, merging, diffing.\n\nThe main functions
  for users are available from the Data.Git module.\n\nThe essential functions are:\n\n*
  withRepo: create a new git context and execute a function with the context. functional
  equivalent of withFile but for git repository.\n* withCurrentRepo: similar to withRepo
  but found the repository from the user current directory.\n* resolveRevision: turns
  a git revision (e.g. HEAD, 0a24^^^~3) into a SHA1 reference.\n* resolvePath: from
  a commit ref and a path, it will gives the tree or blob reference of the object
  at the specific path (see example).\n* getObject: from a SHA1 reference, gives a
  high level object (Commit, Blob, Tree, Tag, Delta) from the git repository. if called
  with resolveDelta set, it will resolves deltas to be simple objects with the deltas
  applied.\n* getObjectRaw: similar to getObject but gives a raw representation (lazy
  bytestring) of the object.\n* getCommit: similar to getObject but gives back a commit.\n*
  getTree: similar to getObject but gives back a tree.\n\nAPI Example\n-----------\n\nresolving
  path of the README file and returning the reference to the blob :\n\n    {-# LANGUAGE
  OverloadedStrings #-}\n    import Data.Git.Repository\n\n    showPathRef commitRef
  = withRepo \".git\" $ \\git -> do\n        ref <- maybe (error \"inexistent object
  at this path\") id `fmap` resolvePath git commitRef [\"README\"]\n        putStrLn
  (\"README has the reference: \" ++ show ref)\n\n\ncatting an object from a ref:\n\n
  \   import Data.Git.Repository\n\n    catFile ref = withRepo \".git\" $ \\git ->
  do\n        obj <- maybe (error \"not a valid object\") id `fmap` getObjectRaw git
  ref True\n        L.putStrLn (oiData obj)\n\n\nmore examples on how to use api can
  be found in Hit.hs.\n"
license-name: BSD-3-Clause
