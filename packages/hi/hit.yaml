homepage: http://github.com/vincenthz/hit
changelog-type: ''
hash: 23c6ca63cd2b3cb8c06831251fcef87db88dc67e7059ad616d86e5c83d158cf1
test-bench-deps:
  bytestring: -any
  hourglass: -any
  base: ! '>=3 && <7'
  hit: -any
  bytedump: ! '>=1.0'
  tasty-quickcheck: -any
  tasty: -any
maintainer: Vincent Hanquez <vincent@snarc.org>
synopsis: Git operations in haskell
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  hourglass: ! '>=0.2'
  base: ! '>=4 && <4.11'
  system-fileio: -any
  unix-compat: -any
  parsec: ! '>=3'
  patience: <0.2
  containers: -any
  utf8-string: -any
  zlib-bindings: ! '>=0.1 && <0.2'
  zlib: -any
  mtl: -any
  byteable: -any
  attoparsec: ! '>=0.10.1'
  random: -any
  system-filepath: -any
  vector: -any
  cryptohash: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
author: Vincent Hanquez <vincent@snarc.org>
latest: 0.6.3
description-type: markdown
description: |
  Hit
  ===

  Hit is a reimplementation of some git operations in pure haskell.


  what it does do:

  * read loose objects, and packed objects.
  * write new loose objects
  * git like operations available: commit, cat-file, verify-pack, rev-list, ls-tree.

  what is doesn't do:

  * reimplement the whole of git.
  * checkout's index reading/writing, fetching, merging, diffing.

  The main functions for users are available from the Data.Git module.

  The essential functions are:

  * withRepo: create a new git context and execute a function with the context. functional equivalent of withFile but for git repository.
  * withCurrentRepo: similar to withRepo but found the repository from the user current directory.
  * resolveRevision: turns a git revision (e.g. HEAD, 0a24^^^~3) into a SHA1 reference.
  * resolvePath: from a commit ref and a path, it will gives the tree or blob reference of the object at the specific path (see example).
  * getObject: from a SHA1 reference, gives a high level object (Commit, Blob, Tree, Tag, Delta) from the git repository. if called with resolveDelta set, it will resolves deltas to be simple objects with the deltas applied.
  * getObjectRaw: similar to getObject but gives a raw representation (lazy bytestring) of the object.
  * getCommit: similar to getObject but gives back a commit.
  * getTree: similar to getObject but gives back a tree.

  API Example
  -----------

  resolving path of the README file and returning the reference to the blob :

      {-# LANGUAGE OverloadedStrings #-}
      import Data.Git.Repository

      showPathRef commitRef = withRepo ".git" $ \git -> do
          ref <- maybe (error "inexistent object at this path") id `fmap` resolvePath git commitRef ["README"]
          putStrLn ("README has the reference: " ++ show ref)


  catting an object from a ref:

      import Data.Git.Repository

      catFile ref = withRepo ".git" $ \git -> do
          obj <- maybe (error "not a valid object") id `fmap` getObjectRaw git ref True
          L.putStrLn (oiData obj)


  more examples on how to use api can be found in Hit.hs.
license-name: BSD-3-Clause
