homepage: https://github.com/SFML-haskell/SFML-control
changelog-type: ''
hash: c8fb779ae62ceeab28457b1c3b6e52117d833413f6078222c34d29d045bbe9fe
test-bench-deps: {}
maintainer: alfredo.dinapoli@gmail.com
synopsis: Higher level library on top of SFML
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5'
  SFML: ! '>=0.2.0.0'
  mtl: ! '>=2.0.0.0'
  template-haskell: -any
all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
author: Alfredo Di Napoli
latest: 0.2.0.2
description-type: markdown
description: ! "SFML-control\n============\n\nThis library expose a SFML monad which
  deliver a higher level of abstraction\nover the low level bindings.\n\n# What do
  you mean by higher level?\nIt exposes a `SFML` monad you must use and eventually
  run to go back into `IO`.\nIn doing that, the `SFML` monad runs all the destructors
  for you. This means you\ndon't have to worry about explicit deallocation of the
  underlying C resources.\n\n# How the bindings are achieved?\nTo scrap as much boilerplate
  as possible, TH has been used. In fact, thanks to\nthe TH machinery, the whole [SFML](https://github.com/SFML-haskell/SFML)
  functions has been lifted appropriately here:\n\n[Conversions](https://github.com/SFML-haskell/SFML-control/blob/master/src/Control/Monad/SFML/Conversions.hs)\n\n#
  Example\nThis is a 1:1 translation of [this](https://github.com/SFML-haskell/SFML/blob/master/demos/hello/main.hs)
  example:\n\n``` haskell\nmodule Main where\n\nimport Control.Monad.SFML\nimport
  qualified SFML.Graphics as G\nimport qualified SFML.Window as W\nimport SFML.Graphics.Color\n\nimport
  Paths_SFMLExamples\n\nmain :: IO ()\nmain = runSFML $ do\n    let ctxSettings =
  Just $ W.ContextSettings 24 8 0 1 2\n    wnd <- createRenderWindow (W.VideoMode
  640 480 32)\n           \"SFML-Control Demo\" [W.SFDefaultStyle] ctxSettings\n    logoPath
  \ <- liftIO $ getDataFileName \"Haskell-Logo.png\"\n    fontPath  <- liftIO $ getDataFileName
  \"Vera.ttf\"\n    musicPath <- liftIO $ getDataFileName \"DST-BreakOut.ogg\"\n    tex
  <- textureFromFile logoPath Nothing\n    spr <- createSprite\n    fnt <- fontFromFile
  fontPath\n    txt <- createText\n    setTextString txt \"Haskell-Control\\nhandles
  memory\\nfor you\"\n    setTextFont txt fnt\n    setTextCharacterSize txt 20\n    setTextColor
  txt blue\n    msc <- musicFromFile musicPath\n    play msc\n    setTexture spr tex
  True\n    loop wnd spr txt\n\n\nloop :: G.RenderWindow -> G.Sprite -> G.Text ->
  SFML ()\nloop wnd spr txt = do\n    drawSprite wnd spr Nothing\n    drawText   wnd
  txt $ Just (G.renderStates { G.transform = G.translation 460 40 })\n    display
  wnd\n    evt <- waitEvent wnd\n    case evt of\n        Nothing -> return ()\n        Just
  W.SFEvtClosed -> return ()\n        _ -> loop wnd spr txt\n```\n\nAs you can see
  it's almost a 1:1 translation, you just need to run the monad\nand get rid of explicit
  `destroy` !\n\n# Why two libraries?\nWe decided that the user shouldn't pay the
  extra burder of a `SFML` monad if all he\nwants is a low level SFML binding.\n"
license-name: MIT
