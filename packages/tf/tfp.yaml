homepage: http://www.haskell.org/haskellwiki/Type_arithmetic
changelog-type: text
hash: 59b9e6958d3edea0618b8ccdec41265fa69fd88dc96a2dacfa5ef5e76ea2d007
test-bench-deps:
  base: -any
  tfp: -any
  QuickCheck: ! '>=1.2.0.0'
maintainer: haskell@henning-thielemann.de
synopsis: Type-level integers, booleans, lists using type families
changelog: ! "1.0:\n\n* Change representation of decimals to an inherently normalized
  form\n  that is symmetric with respect to positive and negative numbers.\n\n* singularize
  module names\n\n* separate Decimal and general representation\n\n* use Proxys instead
  of plain types for data functions\n  This is also consistent with new Nat kind,\n
  \ where types of kind Nat have no data values.\n\n* Ord: make infix operators classes
  and prefix functions type functions\n  It seems to be more natural to me to write\n
  \    x :<: y   and   GTT x y ~ True\n\n* Num, Bool, Ord: remove T suffixes from
  functions\n  Use qualification instead.\n"
basic-deps:
  base: ! '>=3.0 && <5'
  utility-ht: ! '>=0.0.10 && <0.1'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '1.0'
- 1.0.0.1
- 1.0.0.2
author: Peter Gavin, Henning Thielemann
latest: 1.0.0.2
description-type: haddock
description: ! 'TFP is an abbreviation for Type Family Programming.

  It provides implementations of type-level integers and booleans,

  and (eventually) simple type-level data structures.

  It uses type families as functions to produce new types,

  which provides an intuitive way to parameterize data types

  and functions on numerical values at compile time.'
license-name: BSD-3-Clause
