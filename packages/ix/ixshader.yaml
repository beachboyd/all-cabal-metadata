homepage: https://github.com/schell/ixshader#readme
changelog-type: ''
hash: 82a35da1c14dd8d3689b066bb394a65dd1a762dcf60ea877349b257c86726e26
test-bench-deps: {}
maintainer: schell@takt.com
synopsis: A shallow embedding of the OpenGL Shading Language in Haskell.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  prettyclass: ! '>=1.0'
  language-glsl: ! '>=0.2'
  parsec: ! '>=3.1'
  singletons: ! '>=2.2'
  indexed: ! '>=0.1.3'
  ghc-prim: ! '>=0.5'
  template-haskell: ! '>=2.11.1.0'
all-versions:
- 0.0.1.0
author: Schell Scivally
latest: 0.0.1.0
description-type: markdown
description: ! "# ixshader\n`ixshader` is a shallow embedding of the OpenGL Shading
  Language in Haskell. It\naims to look as close to actual glsl shader code as possible,
  while providing\nbetter compile-time safety. Currently writing shader code in `ixshader`'s\n`IxShader`
  monad will catch variable assignment mismatches, multiplication\nmismatches and
  some other common errors. It also builds a description of your\nshader at the type
  level to use downstream during buffering and uniform updates.\nLastly, it abstracts
  over shader code written for opengl and webgl.\n\nSince this is a work in progress
  the entire language is not yet supported,\nthough you can easy use the `nxt` and
  `acc` functions to push your own glsl into\nthe pipeline, typechecking only what
  you want.\n\nThe resulting source is pretty and human readable, even debuggable
  without\nsourcemapping.\n\nYou should create a separate file for your shaders as
  `ixshader` relies on\nthe `RebindableSyntax` language extension and re-defines key
  functions such as\n`>>=`, `>>`, `return`, `fail`, `void`, `fromInteger` and `fromRational`.\n\n##
  example\n\n```haskell\n{-# LANGUAGE AllowAmbiguousTypes   #-}\n{-# LANGUAGE DataKinds
  \            #-}\n{-# LANGUAGE FlexibleContexts      #-}\n{-# LANGUAGE FlexibleInstances
  \    #-}\n{-# LANGUAGE GADTs                 #-}\n{-# LANGUAGE LambdaCase            #-}\n{-#
  LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE PolyKinds             #-}\n{-#
  LANGUAGE RankNTypes            #-}\n{-# LANGUAGE RebindableSyntax      #-}\n{-#
  LANGUAGE ScopedTypeVariables   #-}\n{-# LANGUAGE TypeFamilies          #-}\n{-#
  LANGUAGE TypeInType            #-}\n{-# LANGUAGE TypeOperators         #-}\n{-#
  LANGUAGE UndecidableInstances  #-}\n\nmodule MyShaders where\n\nimport Graphics.IxShader\n\nmyvertex\n
  \ :: forall (ctx :: GLContext). HasContext ctx\n  => IxShader ctx '[] '[ In      Xvec2
  \"position\"\n                       , In      Xvec4 \"color\"\n                       ,
  Uniform Xmat4 \"projection\"\n                       , Uniform Xmat4 \"modelview\"\n
  \                      , Out     Xvec4 \"fcolor\"\n                       , Out
  \    Xvec4 \"gl_Position\"\n                       , Main\n                       ]
  ()\nmyvertex = do\n  pos    <- in_\n  color  <- in_\n  proj   <- uniform_\n  modl
  \  <- uniform_\n  fcolor <- out_\n  glPos  <- gl_Position\n  main_ $ do\n    fcolor
  .= color\n    glPos  .= proj .* modl .* (pos .: 0.0 .: 1.0)\n\nmyfragment\n  ::
  forall (ctx :: GLContext). IsGLContext ctx\n  => IxShader ctx '[] '[ In  Xvec4 \"fcolor\"\n
  \                      , Out Xvec4 (GLFragName ctx)\n                       , Main\n
  \                      ] ()\nmyfragment = do\n  fcolor <- in_\n  glFrag <- gl_FragColor\n
  \ main_ $ glFrag .= fcolor\n\n\nmain = do\n  putStrLn \"First OpenGL:\"\n  putSrcLn
  $ vertex @'OpenGLContext\n  putStrLn \"\\nThen WebGL:\"\n  putSrcLn $ vertex @'WebGLContext\n{-\nFirst
  OpenGL:\nin vec2 position;\nin vec4 color;\nuniform mat4 projection;\nuniform mat4
  modelview;\nout vec4 fcolor;\nvoid main ()\n{ fcolor = color;\n  gl_Position = projection
  * modelview * vec4 (position.x, position.y, 0.0, 1.0);\n}\n\nThen WebGL:\nattribute
  vec2 position;\nattribute vec4 color;\nuniform mat4 projection;\nuniform mat4 modelview;\nvarying
  vec4 fcolor;\nvoid main ()\n{ fcolor = color;\n  gl_Position = projection * modelview
  * vec4 (position.x, position.y, 0.0, 1.0);\n}\n-}\n```\n"
license-name: BSD-3-Clause
