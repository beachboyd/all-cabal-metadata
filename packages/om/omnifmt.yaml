homepage: https://github.com/hjwylde/omnifmt
changelog-type: markdown
hash: 51f61090b21ee761c23c15b3a1f371f306c9ac912c2b55fa565848e8dbba42fa
test-bench-deps: {}
maintainer: public@hjwylde.com
synopsis: A pretty-printer wrapper to faciliate ease of formatting during development.
changelog: ! '## Changelog


  #### Upcoming


  #### v0.2.1.1


  *Revisions*


  * Fixed a bug that disallowed global info options in a non-omnifmt directory. ([#13](https://github.com/hjwylde/omnifmt/issues/13))


  #### v0.2.1.0


  *Minor*


  * Added Bash completion for `--mode` and arguments. ([#13](https://github.com/hjwylde/omnifmt/issues/13))


  *Revisions*


  * Fixed a bug that disallowed global info options in a non-omnifmt directory. ([#13](https://github.com/hjwylde/omnifmt/issues/13))


  #### v0.2.0.1


  *Revisions*


  * Fixed a bug causing prettifying to fail across filesystem boundaries. ([#14](https://github.com/hjwylde/omnifmt/issues/14))


  #### v0.2.0.0


  *Major*


  * Removed `checkFileExists` from the pipeline (moved to `handle`). ([#12](https://github.com/hjwylde/omnifmt/issues/12))


  *Revisions*


  * Changed path outputs to be relative to the root directory. ([#12](https://github.com/hjwylde/omnifmt/issues/12))


  #### v0.1.0.1


  *Revisions*


  * Fixed a bug causing prettifying to fail across filesystem boundaries. ([#14](https://github.com/hjwylde/omnifmt/issues/14))


  #### v0.1.0.0


  *Major*


  * Extracted omnifmt out from git@github.com:hjwylde/git-fmt. ([#1](https://github.com/hjwylde/omnifmt/issues/1))


  *Revisions*


  * Fixed a bug causing the program to hang when not in the root directory. ([#7](https://github.com/hjwylde/omnifmt/issues/7))

  * Fixed a bug where output files could be created outside of the temp directory.
  ([#11](https://github.com/hjwylde/omnifmt/issues/11))

  * Fixed a bug that omitted searching the drive for a config file. ([#8](https://github.com/hjwylde/omnifmt/issues/8))


'
basic-deps:
  exceptions: ! '>=0.8'
  extra: ! '>=1.4'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.2'
  filepath: ! '>=1.4'
  fast-logger: ! '>=2.4'
  pipes: ! '>=4.1'
  pipes-concurrency: ! '>=2.0'
  monad-parallel: ! '>=0.7'
  omnifmt: -any
  mtl: ! '>=2.2'
  monad-logger: ! '>=0.3'
  temporary: ! '>=1.2'
  optparse-applicative: ! '>=0.11 && <0.13'
  aeson: ! '>=0.8'
  yaml: ! '>=0.8'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
author: Henry J. Wylde
latest: 0.2.1.1
description-type: markdown
description: ! "# omnifmt\n\n[![Project Status: Wip - Initial development is in progress,
  but there has not yet been a stable, usable release suitable for the public.](http://www.repostatus.org/badges/1.0.0/wip.svg)](http://www.repostatus.org/#wip)\n[![Build
  Status](https://travis-ci.org/hjwylde/omnifmt.svg?branch=master)](https://travis-ci.org/hjwylde/omnifmt)\n[![Release](https://img.shields.io/github/release/hjwylde/omnifmt.svg)](https://github.com/hjwylde/omnifmt/releases/latest)\n[![omnifmt
  on Stackage LTS](https://www.stackage.org/package/omnifmt/badge/lts)](https://www.stackage.org/lts/package/omnifmt)\n[![omnifmt
  on Stackage Nightly](https://www.stackage.org/package/omnifmt/badge/nightly)](https://www.stackage.org/nightly/package/omnifmt)\n\nA
  pretty-printer wrapper to faciliate ease of formatting during development.\nomnifmt
  automatically formats code via external pretty-printers.\nThe idea was taken from
  gofmt, just with a bit of expansion to more languages.\n\nFormatted code is:\n\n*
  Easier to write: never worry about minor formatting concerns while hacking away.\n*
  Easier to read: when all code looks the same you need not mentally convert others'
  formatting\n  style into something you can understand.\n* Easier to maintain: mechanical
  changes to the source don't cause unrelated changes to the file's\n  formatting;
  diffs show only the real changes.\n* Uncontroversial: never have a debate about
  spacing or brace position ever again.\n\n(Bullet points taken from [https://blog.golang.org/go-fmt-your-code](https://blog.golang.org/go-fmt-your-code).)\n\n###
  Installing\n\nInstalling omnifmt is easiest done using either\n    [stack](https://github.com/commercialhaskell/stack)
  (recommended) or\n    [Cabal](https://github.com/haskell/cabal).\n\n**Using stack:**\n\n```bash\nstack
  install omnifmt\nexport PATH=$PATH:~/.local/bin\n```\n\n**Using Cabal:**\n\n```bash\ncabal-install
  omnifmt\nexport PATH=$PATH:~/.cabal/bin\n```\n\n### Usage\n\nThe omnifmt binary
  provides an interface for selecting files and piping them through external\n    pretty-printers.\nIt
  supports both prettifying the files immediately and performing dry-runs to see which
  files are\n    ugly.\n\n**The basics:**\n\nBy default omnifmt formats on all files
  found from the root directory;\n    the root directory is the first parent directory
  with an '.omnifmt.yaml' config file.\n\nPassing arguments to omnifmt will override
  this and only operate on the given files and directories.\n\n**Modes:**\n\nomnifmt
  can run in three different modes, *normal*, *dry-run* and *diff*.\n\nNormal mode
  writes to (prettifies) all ugly files immediately and outputs the prettified file
  paths\n    to *stdout*.\n\nDry-run mode outputs the ugly file paths to stdout.\n\nDiff
  mode outputs a diff of all ugly files with their prettified version.\n\n#### Configuration\n\nConfiguration
  is done via an '.omnifmt.yaml' file in the root directory.\nThe file contains a
  list of *programs* that link *extensions* to a prettifying *command*, e.g.,\n```yaml\nhaskell:\n
  \   extensions: [\"hs\", \"lhs\"]\n    command:    \"stylish-haskell {{input}} >
  {{output}}\"\n\njavascript:\n    extensions: [\"js\"]\n    command:    \"js-beautify
  -f {{input}}\"\n\njson:\n    extensions: [\"json\"]\n    command:    \"json_pp\"\n\nruby:\n
  \   extensions: [\"rb\"]\n    command:    \"ruby-beautify\"\n```\n\nEach command
  declares how to read the *input file* and how to write to the *output file*.\nIf
  the input variable is omitted, the file contents are fed to the command through
  *stdin*.\nLikewise if the output variable is omitted, the pretty contents are read
  from stdout.\nThe output file is used to compare whether the original was pretty
  or ugly before writing to it.\n\nThe extensions field is pretty self explanatory,
  but if you use the same extension more than once\n    then precedence goes to the
  program defined first.\n\n#### Examples\n\nSee the [docs/example-configs/](https://github.com/hjwylde/omnifmt/tree/master/docs/example-configs/)\n
  \   directory for some common pretty-printers and their corresponding omnifmt config
  (pull requests\n    are welcome for adding more).\nJust don't forget to actually
  call the config file '.omnifmt.yaml'!\n\n**NB:** I haven't tested them fully, be
  careful in case one is buggy.\n\n### Auto-completion\n\nAdd the following (depending
  on your shell) to include support for auto-completion.\n\n**Bash:**\n\n```bash\nsource
  <(omnifmt --bash-completion-script `which omnifmt`)\n```\n\n**zsh:**\n\n```zsh\nautoload
  -Uz bashcompinit && bashcompinit\nsource <(omnifmt --bash-completion-script `which
  omnifmt`)\n```\n\n"
license-name: BSD-3-Clause
