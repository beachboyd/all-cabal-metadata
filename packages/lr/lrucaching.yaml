homepage: https://github.com/cocreature/lrucaching#readme
changelog-type: markdown
hash: 9ea0f923ac9e0c0ba0776933667c48856480c60b3a6425dd3df4340bcc7bd935
test-bench-deps:
  base: -any
  hspec: ! '>=2.2 && <2.7'
  containers: ! '>=0.5 && <0.7'
  lrucaching: -any
  hashable: -any
  transformers: ! '>=0.4 && <0.6'
  deepseq: -any
  QuickCheck: ! '>=2.8 && <2.13'
maintainer: moritz.kiefer@purelyfunctional.org
synopsis: LRU cache
changelog: ! "0.3.3\n----\n* Drop support for GHC 7.8\n* Bump QuickCheck upper bound\n\n0.3.2\n----\n*
  Bump QuickCheck upper bound\n\n0.3.1\n-----\n* Allow vector == 0.12.*\n* Do not
  use hspec-discover. This allows building the tests using\n  `cabal new-build`.\n\n0.3.0\n-----\n*
  Add `Data.LruCache.IO.Finalizer` for automatically running finalizer\n  when evicting
  cache entrvies.\n* Rename `newStripedHandle` to `newStripedLruHandle`\n\n0.2.1\n-----\n*
  Fix build with GHC 7.8\n\n0.2.0\n----\n* Donâ€™t clear cache on clock overflow. This
  means that elements are\n  never evicted without notifying the user via insertView.\n\n0.1.0\n-----\nInitial
  release.\n"
basic-deps:
  base: ! '>=4.8 && <5'
  base-compat: ! '>=0.9 && <0.11'
  hashable: ! '>=1.2 && <1.3'
  deepseq: ! '>=1.4 && <1.5'
  psqueues: ! '>=0.2 && <0.3'
  vector: ! '>=0.11 && <0.13'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
author: Moritz Kiefer
latest: '0.3.3'
description-type: markdown
description: ! "# lrucaching\n\n[![Build Status](https://travis-ci.org/cocreature/lrucaching.svg?branch=master)](https://travis-ci.org/cocreature/lrucaching)\n[![Hackage](https://img.shields.io/hackage/v/lrucaching.svg)](https://hackage.haskell.org/package/lrucaching)\n\nAn
  implementation of lrucaches based on a\n[blogpost](https://jaspervdj.be/posts/2015-02-24-lru-cache.html)
  by\nJasper Van der Jeugt.\n\nThis package has no relation to\n[lrucache](https://hackage.haskell.org/package/lrucache).
  I created it\nbecause there were bugs in `lrucache` and the maintainer was not\nresponding
  to issues.\n\n\n## Usage\n\nThe easiest way to use this library is to use `Data.LruCache.IO`.
  This wraps the\ncache in a `Data.IORef`, a mutable varible in the `IO` monad.\n\ne.g.
  To create a `1000`-item cache, keyed by `Integer`, storing `String`:\n\n```haskell\nimport
  qualified Data.LruCache.IO as LRU\n\nnewCache :: IO (LRU.LruHandle Integer String)\nnewCache
  = LRU.newLruHandle 1000\n\ncachedLookup cache key = LRU.cached cache key $\n    --
  insert some something expensive\n    return $ show key\n\nmain :: IO ()\nmain =
  do\n    cache <- newCache\n    cachedLookup cache 123 >>= putStrLn\n```\n"
license-name: BSD3
