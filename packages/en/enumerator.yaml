homepage: https://john-millikin.com/software/enumerator/
changelog-type: ''
hash: 3fbdac43f6385ed9312506c8d8a037930c02c32ff9d9eaf265db1da98d42b682
test-bench-deps: {}
maintainer: jmillikin@gmail.com
synopsis: Reliable, high-performance processing with left-fold enumerators
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.0 && <4.11'
  text: ! '>=0.7'
  containers: ! '>=0.1'
  transformers: ! '>=0.2'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- '0.3'
- 0.3.0.1
- '0.4'
- 0.4.0.1
- 0.4.0.2
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- 0.4.9
- 0.4.9.1
- 0.4.10
- 0.4.11
- 0.4.12
- 0.4.13
- 0.4.13.1
- 0.4.14
- 0.4.15
- 0.4.16
- 0.4.17
- 0.4.18
- 0.4.19
- 0.4.20
author: John Millikin <jmillikin@gmail.com>
latest: 0.4.20
description-type: haddock
description: ! 'Typical buffer&#x2013;based incremental I/O is based around a single
  loop,

  which reads data from some source (such as a socket or file), transforms

  it, and generates one or more outputs (such as a line count, HTTP

  responses, or modified file). Although efficient and safe, these loops are

  all single&#x2013;purpose; it is difficult or impossible to compose

  buffer&#x2013;based processing loops.


  Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to

  operate on data from an external source. However, lazy I/O has several

  shortcomings. Most notably, resources such as memory and file handles can

  be retained for arbitrarily long periods of time, causing unpredictable

  performance and error conditions.


  Enumerators are an efficient, predictable, and safe alternative to lazy

  I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed

  in near&#x2013;constant space by pure code. Although somewhat more complex

  to write, using enumerators instead of lazy I/O produces more correct

  programs.


  This library contains an enumerator implementation for Haskell, designed to

  be both simple and efficient. Three core types are defined, along with

  numerous helper functions:


  * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume

  a sequence of /input/ values, and generate a single /output/ value.

  Many iteratees are designed to perform side effects (such as printing to

  @stdout@), so they can also be used as monad transformers.


  * /Enumerator/: Data sources, which generate input sequences. Typical

  enumerators read from a file handle, socket, random number generator, or

  other external stream. To operate, enumerators are passed an iteratee, and

  provide that iteratee with input until either the iteratee has completed its

  computation, or EOF.


  * /Enumeratee/: Data transformers, which operate as both enumerators and

  iteratees. Enumeratees read from an /outer/ enumerator, and provide the

  transformed data to an /inner/ iteratee.'
license-name: MIT
