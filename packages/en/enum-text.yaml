homepage: https://github.com/cdornan/enum-text#readme
changelog-type: markdown
hash: 9085ee94616f517388f32a17f9dd19dc37f426e1ece4eccc839d3601576323b0
test-bench-deps: {}
maintainer: chris@chrisdornan.com
synopsis: A text rendering and parsing toolkit for enumerated types
changelog: |
  # 0.1.0.0

    * first release
basic-deps:
  fmt: -any
  bytestring: -any
  base: ! '>=4.8.2 && <10'
  unordered-containers: -any
  text: -any
  possibly: -any
  array: -any
  hashable: -any
all-versions:
- 0.1.0.0
author: Chris Dornan
latest: 0.1.0.0
description-type: markdown
description: |
  # enum-text

  A simple toolkit for rendering enumerated types into `Text` `Builder` (used by
  the [`fmt`](http://hackage.haskell.org/package/fmt) package) and parsing them
  back again into Text with the provided `TextParsable` type class.

  To get the `Buildable` and `TextParsable` instances for an enumerated data type
  use the following pattern:

  ```
  import Fmt
  import Text.Enum.Text

  data Foo = FOO_bar | FOO_bar_baz
    deriving (Bounded,Enum,Eq,Ord,Show)

  instance EnumText     Foo
  instance Buildable    Foo where build     = buildEnumText
  instance TextParsable Foo where parseText = parseEnumText
  ```

  This will use the default configuration for generating the text of each
  enumeration from the derived `show` text, namely:

    * removing the prefix upto and including the first underscore (`_`);
    * converting each subsequent underscore (`_`) into a dash (`-`).

  See the Haddocks for details on how to override this default configuration for
  any given enumeration type.

  Functions for rendering text, generating and parsing UTF-8 encoded ByteStrings
  (suitable for cassava) and `Hashable` functions are also provided `EnumText`.
license-name: BSD-3-Clause
