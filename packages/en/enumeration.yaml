homepage: https://github.com/emc2/enumeration
changelog-type: ''
hash: 18c687ef0127d2379955c687249c5f7c88f3c487c37ffebf5435e8f44e223716
test-bench-deps:
  Cabal: ! '>=1.16.0'
  base: ! '>=4.4.0 && <5'
  arith-encode: -any
  HUnit-Plus: -any
  containers: -any
  heap: -any
  binary: -any
  arithmoi: -any
maintainer: Eric McCorkle <emc2@metricspace.net>
synopsis: ! 'A practical API for building recursive enumeration

  procedures and enumerating datatypes.'
changelog: ''
basic-deps:
  Cabal: ! '>=1.16.0'
  base: ! '>=4.4.0 && <5'
  arith-encode: -any
  containers: -any
  heap: -any
  binary: -any
  arithmoi: -any
all-versions:
- 0.1.0
author: Eric McCorkle
latest: 0.1.0
description-type: haddock
description: ! 'A library providing tools for building enumeration procedures for
  recursively-

  enumerable datatypes.  This is built atop the arith-encode library, and makes

  use of the natural number isomorphisms it provides to represent individual

  decisions in the enumeration procedure.  As such, each enumeration result is

  denoted by a unique path, consisting of a sequence of natural numbers.  An

  enumeration procedure is simply a (partial) mapping between sequences

  and a given datatype.


  The library provides functionality for constructing enumeration procedures,

  as well as facilities for performing enumeration according to various search

  strategies (depth-first, breadth-first, etc).  These procedures can also be

  "warm-started" using a path or a set of paths.  Obvious applications include

  exhaustive search, testing, automated proving, and others.


  Additionally, as a path is simply a sequence of natural numbers, an

  enumeration procedure can double as a binary serializer/deserializer.  For

  well-behaved enumeration procedures (ie. those where the mapping is an

  isomorphism), the resulting binary format should be very nearly succinct.


  This is the first release candidate for 1.0 (initial release)'
license-name: BSD-3-Clause
