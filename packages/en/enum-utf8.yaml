homepage: https://github.com/cdornan/enum-text#readme
changelog-type: markdown
hash: 0164973f735ad70551c51c94f2333bebbe1768f301e2f28567935e5b0ea02e5b
test-bench-deps: {}
maintainer: chris@chrisdornan.com
synopsis: An experimental Utf8 parsing toolkit for enumerated types
changelog: |
  # 0.1.0.0

    * first release
basic-deps:
  bytestring: -any
  base: ! '>=4.8.2 && <10'
  unordered-containers: -any
  possibly: -any
  array: -any
  hashable: -any
  render-utf8: -any
all-versions:
- 0.1.0.0
author: Chris Dornan
latest: 0.1.0.0
description-type: markdown
description: |
  # enum-utf8

  An experimental toolkit for rendering enumerated types into `Utf8` from
  the [`render-utf8`](http://hackage.haskell.org/package/render-utf8) package)
  and parsing them back again with the provided `Utf8Parsable` type class.
  It is based on the `render-utf8` and
  [`enum-text`](http://hackage.haskell.org/package/enum-text) packages.

  To get the `Buildable` and `TextParsable` instances for an enumerated data type
  use the following pattern:

  ```
  import Text.Enum.Utf8
  import Text.Utf8

  data Foo = FOO_bar | FOO_bar_baz
    deriving (Bounded,Enum,Eq,Ord,Show)

  instance EnumUtf8     Foo
  instance Renderable   Foo where render    = renderEnumUtf8
  instance Utf8Parsable Foo where parseUtf8 = parseEnumUtf8

  main :: IO ()
  main = mapM_ (cvtLn . render) [minBound..maxBound::Foo]
  ```

  This will use the default configuration for generating the text of each
  enumeration from the derived `show` text, namely:

    * removing the prefix upto and including the first underscore (`_`);
    * converting each subsequent underscore (`_`) into a dash (`-`).

  See the Haddocks for details on how to override this default configuration for
  any given enumeration type.

  Functions for generating and parsing UTF-8 encoded ByteStrings (suitable for
  cassava), as are `Hashable` functions.
license-name: BSD-3-Clause
