homepage: https://github.com/cdepillabout/envelope#readme
changelog-type: ''
hash: fe52ba9f0628790a2ffbd9d46d94dec7f87fd78f9fd685db9eee4496d87d4e6b
test-bench-deps:
  base: -any
  doctest: -any
  Glob: -any
maintainer: cdep.illabout@gmail.com
synopsis: Defines generic 'Envelope' type to wrap reponses from a JSON API.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  text: ! '>=1.2'
  http-api-data: ! '>=0.3'
  mtl: ! '>=2.2'
  aeson: ! '>=0.11'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
author: Dennis Gosnell
latest: 0.2.2.0
description-type: markdown
description: ! "\nWeb.Envelope\n============\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/envelope.svg)](http://travis-ci.org/cdepillabout/envelope)\n[![Hackage](https://img.shields.io/hackage/v/envelope.svg)](https://hackage.haskell.org/package/envelope)\n[![Stackage
  LTS](http://stackage.org/package/envelope/badge/lts)](http://stackage.org/lts/package/envelope)\n[![Stackage
  Nightly](http://stackage.org/package/envelope/badge/nightly)](http://stackage.org/nightly/package/envelope)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\nThis module exports
  an `Envelope` type that can be used to wrap reponses from a JSON REST API.  It provides
  a successful `Success` response, and a failure `Err` response.\n\nHere is a small
  demonstration of returning a success response:\n\n```haskell\n>>> import qualified
  Data.ByteString.Lazy.Char8 as C8\n>>> import Data.Aeson (decode, encode)\n>>> let
  successEnvelope = toSuccessEnvelope 3 :: Envelope Text Int\n>>> C8.putStrLn $ encode
  successEnvelope\n{\"data\":3}\n>>> decode \"{\\\"data\\\":3}\" :: Maybe (Envelope
  Text Int)\nJust (EnvelopeSuccess (Success 3))\n```\n\nYour data gets wrapped in
  an object with a single `\"data\"` field:\n\n```json\n{\n    \"data\": 3\n}\n```\n\nNow
  lets look at how an error response is encoded and decoded.  It is encoded\nas an
  object with two members: @\\\"extra\\\"@ and @\\\"error\\\"@.\n\n```haskell\n>>>
  let errorEnvelope = toErrEnvelope \"DB_ERROR\" \"there was an error in the database\"
  :: Envelope String Int\n>>> C8.putStrLn $ encode errorEnvelope\n{\"extra\":\"there
  was an error in the database\",\"error\":\"DB_ERROR\"}\n>>> decode \"{\\\"extra\\\":\\\"there
  was an error in the database\\\",\\\"error\\\":\\\"DB_ERROR\\\"}\" :: Maybe (Envelope
  String Int)\nJust (EnvelopeErr (Err {errErr = \"DB_ERROR\", errExtra = Just \"there
  was an error in the database\"}))\n```\n\nYour error type and extra message get
  wrapped in an object:\n\n```json\n{\n    \"extra\": \"there was an error in the
  database\",\n    \"error\": \"DB_ERROR\"\n}\n```\n"
license-name: BSD-3-Clause
