homepage: https://github.com/0xd34df00d/enum-subset-generate#readme
changelog-type: markdown
hash: c55480a639978f6ef47ae861d9feb5db1fadfa0b0b05c26739ab7e43f2be42fe
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  enum-subset-generate: -any
  generic-random: -any
  QuickCheck: -any
  microlens: -any
  template-haskell: -any
maintainer: 0xd34df00d@gmail.com
synopsis: Generate an ADT being a subset of another ADT, and the corresponding mappings.
changelog: ! '# Changelog for enum-subset-generate


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  microlens: -any
  template-haskell: -any
all-versions:
- '0.1.0.0'
author: Georg Rudoy
latest: '0.1.0.0'
description-type: markdown
description: ! "# enum-subset-generate\n\n[![Build Status](https://travis-ci.org/0xd34df00d/enum-subset-generate.svg?branch=master)](https://travis-ci.org/0xd34df00d/enum-subset-generate)\n\nGenerates
  an ADT having a subset of constructors of some other ADT along with a\npair of functions
  to map between the two.\n\n## Motivation\n\nConsider implementing FFI bindings for
  a library. The lower level (directly\nmapping the C API onto Haskell) might expose
  an enumeration as an ADT, not all\nvalues of which might make sense for higher-level
  well-typed code. In this case\nthe higher-level bindings might instead expose the
  generated ADT.\n\nAs an example, consider a parser library for a language like C++
  or Java. A\ncursor pointing to a node in an AST might have a property like\n```c\nenum
  AccessSpecifier {\n    AS_Invalid,\n    AS_Public,\n    AS_Protected,\n    AS_Private\n};\n\nAccessSpecifier
  getAccessSpecifier(Cursor*);\n```\n\nAccess specifier doesn't make much sense for
  a node representing a `for`-loop,\nhence the `AS_Invalid` member.\n\nA low-level
  Haskell bindings library might translate this enum into\n```haskell\nmodule Library.Bindings.FFI
  where\n\n-- ...\n\ndata AccessSpecifier = Invalid\n                     | Public\n
  \                    | Protected\n                     | Private\n                     deriving
  (Eq, Ord, Show)\n\ngetAccessSpecifier :: Cursor -> BindingsMonad AccessSpecifier\n```\n\nA
  more type-safe wrapper around this might introduce typed cursors and add a\nconstraint
  to the function:\n```haskell\nmodule Library.Bindings.Pure where\n\nimport qualified
  Library.Bindings.FFI as FFI\n\naccessSpecifier :: HasAccessSpecifier t => Cursor
  t -> FFI.AccessSpecifier\n```\nso this `accessSpecifier` is guaranteed to always
  produce a non-`Invalid`\nresult. But since it's not explicitly stated in the types,
  the calling code will\nnot be able to know about this, so the compiler's case analyzer
  might still\nrequire handling the case of `Invalid`.\n\nUsing this library, one
  might instead just do\n```haskell\n-- Generate an AccessSpecifier in this module
  using FFI.AccessSpecifier\n-- but without the FFI.Invalid constructor.\nmkEnum ''FFI.AccessSpecifier
  ['FFI.Invalid]\n\naccessSpecifier :: HasAccessSpecifier t => Cursor t -> AccessSpecifier\n```\n"
license-name: BSD3
