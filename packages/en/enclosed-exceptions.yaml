homepage: https://github.com/jcristovao/enclosed-exceptions
changelog-type: markdown
hash: 6d4e9b5156721ccfa62d3cdcbf13d8571773031050ec714cb55b841f0c183f6a
test-bench-deps:
  stm: -any
  base: -any
  hspec: ! '>=1.3'
  monad-control: -any
  async: ! '>=2.0'
  lifted-base: ! '>=0.2'
  transformers-base: -any
  transformers: -any
  deepseq: -any
  QuickCheck: -any
maintainer: jmacristovao@gmail.com, michael@snoyman.com
synopsis: Catching all exceptions from within an enclosed computation
changelog: ! '# ChangeLog for enclosed-exceptions


  ## 1.0.3


  * Skip some tests on GHC 8.4 [#12](https://github.com/jcristovao/enclosed-exceptions/issues/12)


  ## 1.0.2.1


  * Support for GHC 7.4 and earlier


  ## 1.0.2


  * Use MVar in tryAny, drop async dependency [#9](https://github.com/jcristovao/enclosed-exceptions/pull/9)


  ## 1.0.1


  * Added tryDeep and catchDeep

'
basic-deps:
  base: ! '>=4.6 && <5'
  monad-control: -any
  lifted-base: ! '>=0.2'
  transformers-base: -any
  transformers: -any
  deepseq: -any
all-versions:
- '1.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.1'
- '1.0.1.1'
- '1.0.2'
- '1.0.3'
author: Michael Snoyman, João Cristóvão
latest: '1.0.3'
description-type: markdown
description: ! "enclosed-exceptions\n===================\n\nThe purpose of this module
  is to allow you to capture all exceptions originating from within the enclosed computation,\nwhile
  still reacting to asynchronous exceptions aimed at the calling thread.\n\nThis way,
  you can be sure that the function that calls, for example,  ```catchAny```,\nwill
  still respond to ```ThreadKilled``` or ```Timeout``` events raised by another thread
  \n(with ``throwTo``), while capturing all exceptions, synchronous or asynchronous,\nresulting
  from the execution of the enclosed computation.\n\nOne particular use case is to
  allow the safe execution of code from various\nlibraries (which you do not control),
  capturing any faults that might occur,\nwhile remaining responsive to higher level
  events and control actions.\n\nThis library was originally developed by [Michael
  Snoyman](http://www.snoyman.com/) for the\n[ClassyPrelude](http://hackage.haskell.org/package/classy-prelude)
  library,\nand was latter spun-off into a separate independent package.\n\nFor a
  more detailed explanation of the motivation behind this functions, see:\n\n[Catching
  all exceptions](https://www.fpcomplete.com/user/snoyberg/general-haskell/exceptions/catching-all-exceptions)\n\nand
  \n \n[the discussion in haskell-cafe](https://groups.google.com/forum/#!topic/haskell-cafe/e9H2I-3uVJE)\n"
license-name: MIT
