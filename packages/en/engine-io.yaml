homepage: http://github.com/ocharles/engine.io
changelog-type: markdown
hash: 6127fb36eacae0ae7f7ba8f742597e55c410b5440f3cd268ef05c54716b3b42e
test-bench-deps: {}
maintainer: ollie@ocharles.org.uk
synopsis: A Haskell implementation of Engine.IO
changelog: ! "## 1.2.18\n\n### Other Changes\n\n* Switch from `either` to `errors`.\n\n##
  1.2.17\n\n### Other Changes\n\n* Increased the upper-bound of `aeson` to < 1.3.\n*
  Increased the upper-bound of `websockets` to < 0.13.\n\n## 1.2.16\n\n### Other Changes\n\n*
  Increased the upper-bound of `aeson` to < 1.2.\n\n## 1.2.15\n\n* Increased the upper-bound
  of `aeson`, `vector` and `websockets`.\n\n## 1.2.14\n\n* Increased the upper-bound
  of `base` and `transformers`.\n\n## 1.2.13\n\n* Increased the upper-bound of `aeson`
  to allow < 0.12.\n\n## 1.2.12\n\n* Increased the upper-bound of `async` to allow
  < 2.2.\n\n## 1.2.11\n\n* Increased the upper-bound of aeson to allow < 0.11.\n\n##
  1.2.10\n\n* Increase upper-bound of `vector` to < 0.12.\n\n## 1.2.9\n\n* Same changes
  as 1.2.8, but the 1.2.8 release was formed incorrectly and didn't\n  compile.\n\n##
  1.2.8\n\n* Fixed a bug in the heartbeat monitor. The heartbeat thread exists to
  ensure\n  that all connections are still active, so we can detect when a long-polling\n
  \ connection is closed. However, older versions of `engine-io`, the timer would\n
  \ be reset whenever *we* sent the client a message, rather than only when we\n  *received*
  a message from the client. This meant that for high-traffic\n  applications, old
  connections might never be removed, resulting in a memory\n  leak.\n\n## 1.2.7\n\n*
  Support decoding payloads coming through XHR polling transport.\n  Previously, this
  scenario would lead to HTTP 400 responses.\n* Increased upper bound on `either`
  to < 4.5.\n\n## 1.2.6\n\n* Increased upper-bounds of aeson to < 0.10 and of attoparsec
  to < 0.14.\n\n## 1.2.5\n\n* Increased the upper-bound of base to allow < 4.9. Now
  builds on\n  GHC 7.10.1.\n\n## 1.2.4\n\n* Add a 100ms delay in the WebSocket upgrade
  process. This matches the\n  behavior of the reference engine.io implementation
  (in NodeJS), and\n  avoids a race condition on slower machines. Without this, it
  was\n  possible for the client to experience a up-to-45s delay before\n  upgrading.\n\n##
  1.2.3\n\n* Revert double-encoding introduced in 1.0.1. This now requires that you\n
  \ use a modern version of the `socket.io` client library. This work was\n  tested
  against `socket.io-1.2.1.js`.\n\n## 1.2.2\n\n* We now use `stm-delay` to implement
  a timeout, if we don't *receive*\n  network traffic from the client. Under normal
  operation, the Socket.io\n  client should ping the server, so an idle session should
  remain alive.\n\n## 1.2.1\n\n* Fixed a potential race condition in session allocation,
  where we could\n  clobber existing session ids.\n\n## 1.2.0\n\n* `ServerAPI`'s `srvParseParseRequestBody`
  has changed its return type to\n  `Either String a`. This allows API providers to
  catch exceptions that may\n  happen when attempting to perform this parse.\n\n##
  1.1.2\n\n* 1.1.1 accidently removed `websockets` from the list of available upgrades.\n
  \ This release reverts that change.\n\n## 1.1.1\n\n* Long-polling connections now
  emit a `ping` message after 45 seconds, if no\n  data is written to them.\n\n* There
  is a new `dupRawReader` function, which lets you create a read-only\n  stream of
  raw communication with a socket.\n\n## 1.1.0\n\n* The `ServerAPI` functions `srvWriteBuilder`,
  `srvSetContentType` and\n  `srvSetResponseCode` have been merged into a single function:\n
  \ `srvTerminateWithResponse`. This should allow `ServerAPI` to be provided for\n
  \ Yesod.\n\n  Thanks to Tim Baumann (@timjb) for this change.\n\n## 1.0.2\n\n* The
  `ping` thread spawned by `websockets` is now disabled, as it has been\n  observed
  that these pings are using invalid sockets. Specifically, see\n  https://github.com/lpsmith/postgresql-simple/issues/117.\n\n##
  1.0.1\n\n* Purposefully double-encode websocket traffic. Unfortunately this is necessary\n
  \ due to https://github.com/Automattic/engine.io-client/issues/322. When a new\n
  \ version of `engine.io` is released upstream, I will revert this.\n\n## 1.0.0\n\n*
  Initial release\n"
basic-deps:
  free: ! '>=4.9 && <5.0'
  bytestring: ! '>=0.10.2.0 && <0.11'
  mwc-random: ! '>=0.13 && <0.14'
  stm-delay: ! '>=0.1.1 && <0.2'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=4.6 && <4.11'
  base64-bytestring: ! '>=1.0 && <1.1'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=0.11 && <1.3'
  monad-loops: ! '>=0.4 && <0.5'
  async: ! '>=2.0 && <2.2'
  websockets: ! '>=0.8 && <0.13'
  attoparsec: ! '>=0.11 && <0.14'
  transformers: ! '>=0.2 && <0.6'
  errors: ! '>=2.0.0 && <2.3'
  aeson: ! '>=0.7 && <1.3'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '1.1.2'
- '1.2.0'
- '1.2.1'
- '1.2.2'
- '1.2.3'
- '1.2.4'
- '1.2.5'
- '1.2.6'
- '1.2.7'
- '1.2.8'
- '1.2.9'
- '1.2.10'
- '1.2.11'
- '1.2.12'
- '1.2.13'
- '1.2.14'
- '1.2.15'
- '1.2.16'
- '1.2.17'
- '1.2.18'
author: Oliver Charles
latest: '1.2.18'
description-type: haddock
description: ! 'This library provides a Haskell implementation of

  <https://github.com/Automattic/engine.io Engine.IO>, a library for real-time

  client-server communication on the web. Engine.IO works with old browsers via

  XHR long-polling, and seamlessy upgrades to web sockets. This implementation

  supports the majority of the Engine.IO protocol, including text and binary

  packets and the upgrading protocol.'
license-name: BSD3
