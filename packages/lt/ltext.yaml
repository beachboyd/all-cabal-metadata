homepage: https://github.com/ltext/ltext#readme
changelog-type: ''
hash: 9ecf183ced06927d3dee117929edc1395b894e08c70e70f34f8afc37d1b8a6d6
test-bench-deps:
  exceptions: -any
  extra: -any
  base: -any
  unordered-containers: -any
  text: -any
  quickcheck-combinators: ! '>=0.0.5'
  ltext: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  mtl: -any
  attoparsec: -any
  transformers: -any
  tasty: -any
  QuickCheck: -any
  pretty: -any
  directory: -any
maintainer: athan.clark@localcooking.com
synopsis: Parameterized file evaluator
changelog: ''
basic-deps:
  exceptions: -any
  extra: -any
  base: ! '>=4.11 && <5'
  unordered-containers: -any
  text: -any
  quickcheck-combinators: ! '>=0.0.5'
  ltext: -any
  quickcheck-instances: -any
  mtl: -any
  attoparsec: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: -any
  pretty: -any
  directory: -any
all-versions:
- '0.1.2.2'
- '0.1.3'
author: Athan Clark
latest: '0.1.3'
description-type: markdown
description: ! "![ltext](https://cdn.rawgit.com/ltext/ltext.github.io/master/logo/ltext.png)\n\nλtext\n=====\n\n>
  General-Purpose Templating Utility\n\n# Overview\n\nλtext turns text files into
  higher-order functions, featuring a Hindley-Milner /\nprenex polymorphic type system.
  See the [github.io page](http://ltext.github.io/).\n\n## Building\n\n```bash\n$>
  git clone git@github.com/ltext/ltext\n$> cd ltext\n$> stack install ltext\n```\n\nThis
  should install in one pass; all the non-stackage dependencies are included\nin `stack.yaml`.\n\n##
  Usage\n\n```bash\n$> ltext --help\n\nλtext - parameterized file evaluator\n\nUsage:
  ltext EXPRESSION [--version] [-t|--type] [-v|--verbose] [-r|--raw FILE]\n             [--left
  LEFT] [--right RIGHT]\n  Evaluate EXPRESSION and send the substitution to stdout.
  See\n  http://ltext.github.io/ for more details.\n\nAvailable options:\n  -h,--help
  \               Show this help text\n  --version                Print the version
  number\n  -t,--type                Perform type inference on an expression\n  -v,--verbose
  \            Be verbose, sending info through stderr\n  -r,--raw FILE            Treat
  these files as plaintext without an arity\n                           header\n  --left
  LEFT              The left delimiter to use for rendering partially\n                           applied
  files\n  --right RIGHT            The right delimiter to use for rendering partially\n
  \                          applied files\n\n$> ltext --type \"\\a -> a\"\n\na0 ->
  a0\n```\n\n## How It Works\n\nFrom λtext's point of view, _any text file_ can be
  a template (given that\nit's utf-8 encoded). Just declare parameters in the first
  line of\nyour files (usually in a different syntax than the file's native tongue,\nvia
  comments or obscure delimiters), then use those variables somewhere in\nthe content.
  With the `ltext` command you can then apply the function-y\nfiles to each other.\n\n###
  The CLI\n\nThere will be two primary uses of the `ltext` command - evaluating template\nexpressions,
  and querying for the type signature of a template/expression.\n\n#### Type Queries\n\nJust
  like the `:t` command in GHCi, you can find out the type of a template or\nexpression
  with `-t`.\n\n#### Expression Evaluation\n\nAll files have __closed scope__, meaning
  they only have access to the variables\ndeclared in the file. For instance:\n\n```\n{{
  foo }}\n\n...\n```\n\nWill _only_ have access to the variable `foo`, while using
  the delimiters `{{`\nand `}}` to escape your expression.\n\n#### Variable Recognition\n\nWhen
  we use a parameter in a file, we need it to be easily recognized by a parser;\na
  different syntax than to the language you're working with.\n\nThe first line in
  a file will be parsed to see if it qualifies as a\nlambda header. If you don't want
  a file have recognized arity, just invoke `ltext`\nwith the `--raw` argument listing
  the file:\n\n```bash\n$> ltext \"foo bar\" --raw \"bar\"\n```\n\n\n# Credits\n\nAll
  credits go to Martin Grabmueller's [AlgorithmW](https://hackage.haskell.org/package/AlgorithmW)
  package for the type inference algorithm used in λtext.\n"
license-name: BSD3
