homepage: ''
changelog-type: ''
hash: e855aba1a9390be762a74e04a44bfe9c1fcb2c15ae67cb912bb6e5fcb3a5dac8
test-bench-deps: {}
maintainer: n.bezirgiannis@students.uu.nl
synopsis: Generic Programming Use in Hackage
changelog: ''
basic-deps:
  bytestring: -any
  uu-parsinglib: -any
  Cabal: ! '>=1.16.0'
  base: ! '>=3.0 && <5'
  syb: -any
  hint: -any
  filepath: -any
  process: -any
  uniplate: -any
  network: -any
  csv: -any
  containers: ! '>=0.4.2.0'
  haskell-src-exts: -any
  tar: -any
  zlib: -any
  cmdargs: -any
  HTTP: -any
  deepseq: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
author: Nikolaos Bezirgiannis, Johan Jeuring, Sean Leather
latest: 0.0.2
description-type: markdown
description: ! "# GP analysis of Hackage README\n\nFor the report and documentation
  of the project, check the file `report.pdf`\n\nThere is also the presentation we
  gave at the file `presentation.pdf`\n\n## Building\n\n~~~\nrunghc Setup.lhs configure\nrunghc
  Setup.lhs build\nrunghc Setup.lhs install\n~~~\n\n\n# Before running\n\nYou have
  to fetch the the entire hackage repository and its activity log. You can automatically
  do that with:\n\n~~~\ngpah --fetch\n~~~\n\n\n## Running the analysis\n\nAfter building
  the program, run it with\n\n`gpah args`\n\n~~~\nGeneric Programming Use in Hackage
  Project v0.0.1\n\ngpah [OPTIONS]\n\nCommon flags:\n     --fetch                Fetch
  the Hackage archive tarball and Hackage\n                            activity log\n
  \ -d --deriving[=FILE]      Run the deriving analysis and output it to the\n                            specified
  file\n  -f --function[=FILE]      Run the function analysis and output it to the\n
  \                           specified file\n  -u --uniplate[=FILE]      Run the
  uniplate analysis and output it to the\n                            specified file\n
  \ -h --misc_hackage[=FILE]  Print general analysis info or output it to the\n                            specified
  file\n  -t --misc_date[=FILE]     Get syb+uniplate date info and output it to the\n
  \                           specified file (implies --misc_hackage)\n     --hackage-dir=DIR
  \     Set the hackage archive directory\n     --hackage-log=FILE     Set the hackage
  archive log file\n  -c --cpp[=FILE]           Run preprocessing in hackage that
  yields an\n                            analysis with less failed-to-parse modules\n
  \ -i --interpret[=FILE]     Do type-checking interpretation on modules that\n                            depend
  on SYB or Uniplate\n  -e --derive[=FILE]        Do analysis on packages that build
  on derive\n  -? --help                 Display help message\n  -V --version              Print
  version information\n~~~\n\nFor a detailed description of the accepted arguments
  run:\n\n`gpah --help`\n"
license-name: BSD-3-Clause
