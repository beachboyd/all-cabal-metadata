homepage: http://github.com/danstiner/hfmt
changelog-type: ''
hash: 825c94862e1dacb678c553d53af2ac9c308d99426574d005e66fc0eb2e95cf6c
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ==4.*
  HUnit: -any
  hfmt: -any
maintainer: Daniel Stiner <daniel.stiner@gmail.com>
synopsis: Haskell source code formatter
changelog: ''
basic-deps:
  conduit-combinators: -any
  hindent: ==5.*
  exceptions: -any
  hlint: ==2.*
  bytestring: -any
  ansi-wl-pprint: -any
  Cabal: -any
  path: -any
  base: ! '>=4.8 && <5'
  Diff: -any
  text: -any
  filepath: -any
  conduit: -any
  HUnit: -any
  haskell-src-exts: ! '>1.20'
  hfmt: -any
  transformers: -any
  optparse-applicative: -any
  pretty: -any
  path-io: -any
  stylish-haskell: ==0.9.*
  yaml: -any
  directory: -any
all-versions:
- '0.0.1.0'
- '0.0.2.0'
- '0.0.2.1'
- '0.0.2.2'
- '0.0.2.3'
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
author: Daniel Stiner
latest: '0.2.2'
description-type: markdown
description: ! "hfmt\r\n====\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/hfmt.svg)](https://hackage.haskell.org/package/hfmt)\r\n[![license](https://img.shields.io/github/license/danstiner/hfmt.svg)](https://github.com/danstiner/hfmt/blob/master/LICENSE)\r\n[![Build
  Status](https://travis-ci.org/danstiner/hfmt.svg?branch=master)](https://travis-ci.org/danstiner/hfmt)\r\n\r\nhfmt
  is a tool for formatting Haskell programs. Currently it is simply a gofmt style
  wrapper of the excellent tools [hlint](https://github.com/ndmitchell/hlint/blob/master/README.md),
  [hindent](https://github.com/chrisdone/hindent#readme), and [stylish-haskell](https://github.com/jaspervdj/stylish-haskell#readme).\r\n\r\n\r\n##
  Installation\r\n\r\nwith [stack](https://www.haskellstack.org/)\r\n\r\n    $ stack
  install hfmt\r\n\r\nwith [cabal](https://www.haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package)\r\n\r\n
  \   $ cabal install hfmt\r\n\r\n## Usage\r\n\r\nCheck all Haskell source under the
  current directory:\r\n\r\n    hfmt\r\n\r\nOverwrite files with formatting suggestions:\r\n\r\n
  \   hfmt -w\r\n\r\n## Help text\r\n\r\n    Î» hfmt --help\r\n    hfmt - format Haskell
  programs\r\n\r\n    Usage: hfmt [-d|--print-diffs] [FILE]\r\n      Reformats Haskell
  source files by applying HLint, hindent, and\r\n      stylish-haskell.\r\n\r\n    Available
  options:\r\n      -h,--help                Show this help text\r\n      -d,--print-diffs
  \        If a file's formatting is different, print a diff.\r\n      -s,--print-sources
  \      If a file's formatting is different, print its\r\n                              source.\r\n
  \     -l,--print-paths         If a file's formatting is different, print its path.\r\n
  \     -w,--write-sources       If a file's formatting is different, overwrite it.\r\n
  \     FILE                     Explicit paths to process.\r\n                                -
  A single '-' will process standard input.\r\n                                - Files
  will be processed directly.\r\n                                - Directories will
  be recursively searched for source files to process.\r\n                                -
  .cabal files will be parsed and all specified source directories and files processed.\r\n
  \                               - If no paths are given, the current directory will
  be searched for .cabal files to process, if none are found the current directory
  will be recursively searched for source files to process.\r\n\r\n    Exit Codes:\r\n
  \     0 = No error\r\n      1 = Encountered I/O or other operational error\r\n      2
  = Failed to parse a source code file\r\n      3 = Source code was parsed but cannot
  be formatted properly\r\n      4 = Formatted code differs from existing source (--print-diffs
  only)\r\n"
license-name: MIT
