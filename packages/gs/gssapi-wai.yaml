homepage: https://github.com/ondrap/gssapi-wai
changelog-type: ''
hash: f3a3241ca604527011db562bb388409329604d5b0c31fef3543db3ed06992938
test-bench-deps: {}
maintainer: palkovsky.ondrej@gmail.com
synopsis: WAI Middleware for SPNEGO authentiaction
changelog: ''
basic-deps:
  bytestring: -any
  wai: -any
  case-insensitive: -any
  base: ! '>=4.8 && <5'
  base64-bytestring: -any
  gssapi: ! '>=0.2.0'
  vault: -any
  wai-extra: -any
  http-types: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
author: Ondrej Palkovsky
latest: '0.1.2.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/ondrap/gssapi-wai.svg?branch=master)](https://travis-ci.org/ondrap/gssapi-wai)
  [![Hackage](https://img.shields.io/hackage/v/gssapi-wai.svg)](https://hackage.haskell.org/package/gssapi-wai)\n\n##
  GSSAPI and Kerberos bindings for Haskell\n\nSee haskell [gssapi](http://github.com/ondrap/gssapi)
  package\nfor tutorial how to set up kerberos authentication with Windows AD.\n\nThis
  module is modelled after [spnego-http-auth-nginx-module](https://github.com/stnoonan/spnego-http-auth-nginx-module).\nIf
  you are using it to provide auth, it should be reasonably easy to use this module
  instead.\n\n\n#### The application\n\nGenerally you need to use TLS, otherwise browsers
  refuse to use SPNEGO authentication.\nThe library provides wai middleware component
  to ease use. The username is saved\nto a vault.\n\n````haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nmodule Main where\nimport           Data.ByteString.Lazy.Char8     (fromStrict)\nimport
  \          Data.Function                  ((&))\nimport           Data.Maybe                     (fromMaybe)\nimport
  \          Data.Monoid                    ((<>))\nimport qualified Data.Vault.Lazy
  \               as V\nimport           Network.HTTP.Types             (status200)\nimport
  \          Network.HTTP.Types.Header      (hContentType)\nimport           Network.Wai
  \                   (Application, responseLBS,\n                                                 vault)\nimport
  \          Network.Wai.Handler.Warp       (defaultSettings, setPort)\nimport           Network.Wai.Handler.WarpTLS
  \   (runTLS, tlsSettings)\n\nimport           Network.Wai.Middleware.SpnegoAuth\n\napp
  :: Application\napp req respond = do\n    let user = fromMaybe \"no-user-found?\"
  (V.lookup spnegoAuthKey (vault req))\n    respond $ responseLBS status200 [(hContentType,
  \"text/plain\")] (\"Hello \" <> fromStrict user)\n\nmain :: IO ()\nmain = do\n  let
  port = 3000\n      settings = defaultSettings & setPort port\n      tsettings =
  tlsSettings \"cert.pem\" \"key.pem\"\n      authSettings = defaultSpnegoSettings{spnegoRealm=Just
  \"EXAMPLE.COM\"}\n  putStrLn $ \"Listening on port \" ++ show port\n  runTLS tsettings
  settings (spnegoAuth authSettings app)\n````\n"
license-name: BSD3
