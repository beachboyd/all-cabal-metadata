homepage: https://github.com/mstksg/otp-authenticator#readme
changelog-type: markdown
hash: 58ab8b7c54f4077777277f4ac1a50040b2ab16d148f7ffc9c200e4b339562572
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: OTP Authenticator (a la google) command line client
changelog: |
  Version 0.1.1.0
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.1.0>

  *   Major cleanup of dependencies and underlying implementation
  *   Fix bug based on dependencies that caused codes to generate improperly.

  Version 0.1.0.1
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.0.1>

  *   Added documentation.
  *   Minor cleanup in implementation.

  Version 0.1.0.0
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.0.0>

  *   Initial release.
basic-deps:
  bytestring: -any
  dependent-sum: -any
  unix: -any
  haskeline: -any
  base: ! '>=4.10 && <5'
  time: -any
  h-gpgme: -any
  text: -any
  megaparsec: ! '>=7.0'
  otp-authenticator: -any
  filepath: -any
  containers: -any
  vinyl: ! '>=0.10'
  base-compat: ! '>=0.10'
  binary: -any
  uri-encode: -any
  cryptonite: -any
  transformers: -any
  optparse-applicative: -any
  microlens: -any
  aeson: -any
  yaml: ! '>=0.8.31'
  sandi: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
author: Justin Le
latest: 0.1.1.0
description-type: markdown
description: |
  # otp-authenticator

  Simple tool for keeping track of your one-time pad two-factor authentication
  keys; basically a command-line version of the canonical [Google Authenticator
  App][gauth].

  [gauth]: https://github.com/google/google-authenticator

  The library uses GnuPG (through *h-gpgme*) to safely encrypt your secret keys.
  The first time you use it, it asks for a fingerprint to use for encryption.
  Currently *GnuPG 1.x* has some issues with *h-gpgme* when asking for keys, so
  *GPG 2.x* is recommended.  Keys are stored, encrypted, at `~/.otp-auth.vault`
  by default.

  Instructions are available through `--help`, but the basics are:

  ```bash
  # interactively add a new key
  otp-auth add

  # interactively add a new key by entering the secret key uri
  #   (following the otpauth protocol)
  otp-auth add --uri

  # view all time-based codes and cached counter-based codes
  otp-auth view

  # list accounts, do not display codes
  otp-auth view --list

  # generate a new counter-based code
  otp-auth gen ID

  # edit the metadata and delete codes
  otp-auth edit ID
  otp-auth delete ID

  # dump all stored data as json (and as yaml)
  otp-auth dump
  otp-auth dump --yaml
  ```

  You can edit configuration at `~/.otp-auth.yaml`, the basic schema is:

  ```yaml
  fingerprint: ABCDEF12
  vault: /home/robert/.otp-auth.vault
  ```
license-name: BSD-3-Clause
