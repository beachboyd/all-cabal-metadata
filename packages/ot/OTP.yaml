homepage: https://github.com/hvr/OTP
changelog-type: markdown
hash: bf7ea9a813d1c59a93463183d6d3ad2ee2ddb623793690737482b9be4711cf0b
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  OTP: -any
  tasty-hunit: ==0.10.*
  tasty: ==1.1.*
maintainer: hvr@gnu.org
synopsis: HMAC-Based and Time-Based One-Time Passwords (HOTP & TOTP)
changelog: ! '## 0.1.0.0


  * Major API rewrite ([#3](https://github.com/hvr/OTP/pull/3))

  * Add support for SHA256 and SHA512 besides SHA-1 ([#1](https://github.com/hvr/OTP/pull/1))

  * Provide support via cabal flag for using pure Haskell [SHA](http://hackage.haskell.org/package/SHA)
  implementation


  ## 0.0.0.1


  Initial version of `OTP`

'
basic-deps:
  cryptohash-sha1: ! '>=0.11.100.1 && <0.12'
  bytestring: ! '>=0.9.2.0 && <0.11'
  base: ! '>=4.5.0.0 && <4.12'
  time: ! '>=1.4 && <1.9'
  cryptohash-sha256: ! '>=0.11.100.1 && <0.12'
  cryptohash-sha512: ! '>=0.11.100.1 && <0.12'
all-versions:
- '0.0.0.1'
- '0.1.0.0'
author: ! 'Artem Leshchev,

  Aleksey Uimanov,

  Herbert Valerio Riedel'
latest: '0.1.0.0'
description-type: markdown
description: ! "# `OTP`: HMAC-Based and Time-Based One-Time Passwords (HOTP & TOTP)
  \ [![Hackage](https://img.shields.io/hackage/v/OTP.svg)](https://hackage.haskell.org/package/OTP)
  [![Build Status](https://travis-ci.org/haskell-hvr/OTP.svg)](https://travis-ci.org/haskell-hvr/OTP)\n\n**Please
  refer to the [package description](https://hackage.haskell.org/package/OTP#description)
  for an overview of `OTP`.**\n\n## Usage examples\n\n### Generating one-time passwords\n\nIf
  you need to generate HOTP password described in RFC4226, then use\n\n```haskell\n>>>
  hotp SHA1 \"1234\" 100 6\n317569\n\n>>> hotp SHA512 \"1234\" 100 6\n134131\n```\n\nOr\n\n```haskell\n>>>
  totp SHA1 \"1234\" (read \"2010-10-10 00:01:00 UTC\") 30 8\n43388892\n```\n\nto
  generate TOTP password described in RFC6238.\n\n### Checking one-time passwords\n\n```haskell\nhotpCheck
  :: HashAlgorithm      -- ^ Hashing algorithm\n          -> Secret             --
  ^ Shared secret\n          -> (Word8, Word8)     -- ^ how much counters to take
  lower and higher than ideal\n          -> Word64             -- ^ ideal (expected)
  counter value\n          -> Word8              -- ^ Number of digits in password\n
  \         -> Word32             -- ^ Password entered by user\n          -> Bool
  \              -- ^ True if password acceptable\n```\n\n```haskell\n>>> hotpCheck
  SHA1 \"1234\" (0,0) 10 6 50897\nTrue\n\n>>> hotpCheck SHA1 \"1234\" (0,0) 9 6 50897\nFalse\n\n>>>
  hotpCheck SHA1 \"1234\" (0,1) 9 6 50897\nTrue\n```\n\nHere almost the same aguments
  as for `hotp` function, but there is\nalso `(0, 0)` tuple. This tuple describes
  range of counters to check\nin case of desynchronisation of counters between client
  and\nserver. I.e. if you specify `(1, 1)` and ideal counter will be `10`\nthen function
  will check passwords for `[9, 10, 11]` list of\ncounters.\n\nHere is the same for
  TOTP:\n\n```haskell\n>>> totpCheck SHA1 \"1234\" (0, 0) (read \"2010-10-10 00:00:00
  UTC\") 30 6 778374\nTrue\n\n>>> totpCheck SHA1 \"1234\" (0, 0) (read \"2010-10-10
  00:00:30 UTC\") 30 6 778374\nFalse\n\n>>> totpCheck SHA1 \"1234\" (1, 0) (read \"2010-10-10
  00:00:30 UTC\") 30 6 778374\nTrue\n```\n"
license-name: MIT
