homepage: http://github.com/ekmett/ersatz
changelog-type: markdown
hash: a22fed28aba812253fc516a25f23ddc08babeb329f058f820988d13c52391125
test-bench-deps:
  base: <5
  ersatz: -any
  filepath: -any
  doctest: ! '>=0.9.1'
  array: -any
  mtl: -any
  directory: ! '>=1.0'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: A monad for expressing SAT or QSAT problems using observable sharing.
changelog: ! "0.4.2\n-----\n* Add `Semigroup` instances for `Clause` and `Formula`.\n*
  Generalize `regular`, `regular_in_degree`, `regular_out_degree`,\n  `max_in_degree`,
  `min_in_degree`, `max_out_degree`, and `min_out_degree` to\n  work over heterogeneous
  relations.\n* Add `buildFrom` to `Ersatz.Relation.Data`.\n* Add `difference`, `reflexive_closure`,
  and `symmetric_closure` to\n  `Ersatz.Relation.Op`.\n* Add `anti_symmetric` and
  `total` to `Ersatz.Relation.Prop`.\n\n0.4.1\n-----\n* Add a library dependency on
  the `doctests` test suite\n\n0.4\n---\n* Performance improvements for CNF printing
  and parsing\n* Add the `Ersatz.Counting`, `Ersatz.Relation`, `Ersatz.Relation.Data`,\n
  \ `Ersatz.Relation.Prop`, and `Ersatz.Relation.Op` modules\n* Eliminate the `Or`
  constructor from `Bit` towards using AIG\n* Fix error in the SAT encoding of the
  `choose` function\n* Revamp `Setup.hs` to use `cabal-doctest`. This makes it build\n
  \ with `Cabal-2.0`, and makes the `doctest`s work with `cabal new-build` and\n  sandboxes.\n\n0.3.1\n-----\n*
  Removed the explicit `Safe` annotations. They can't be maintained by mere mortals.
  Patches to mark packages upstream as `Trustworthy` will be accepted as needed.\n\n0.3\n-----\n*
  Unified `Encoding` and `Decoding` into `Codec`\n* Unified the `forall` and `exists`
  implementations into a single `literally`\n  method in `Variable` class.\n* Added
  `Orderable` type class and instances\n* Added `Ersatz.Bits.Bits` for variable-sized
  bit arithmetic.\n* Renamed `Ersatz.Bits.half_adder` to `halfAdder`\n* Renamed `Ersatz.Bits.full_adder`
  to `fullAdder`\n* Added new examples\n* Dropped `blaze` package dependency in favor
  of newer `bytestring`\n* Significantly shrank the number of \"Trustworthy\" modules\n*
  Added various generic `V1` instances\n* Added `Equatable` instances for `Map` and
  `IntMap`\n* Added `Ersatz.BitChar` module for computing with `Char` and `String`\n*
  Wider version bounds for `transformers` and `mtl`.\n\n0.2.6.1\n-----\n* Exported
  `Ersatz.Variable.GVariable`\n\n0.2.6\n-----\n* `temporary 1.2` support\n\n0.2.5.1\n-------\n*
  Slightly faster builds due to dropping the need for `template-haskell`.\n\n0.2.5\n-----\n*
  Support for GHC 7.8 and `lens` 4.x\n\n0.2.3\n-----\n* SafeHaskell support\n\n0.2.2\n-----\n*
  Added examples to the documentation.\n* Made the examples build as `ersatz-sudoku`
  and `ersatz-regexp-grid`.\n\n0.2.1\n-----\n* Added `examples/sudoku`, a sudoku solver.\n\n0.2.0.1\n-------\n*
  Fixed an overly conservative bound on `containers`.\n\n0.2\n---\n* Converted to
  `Control.Lens` internally.\n* Added `Ersatz.Solver.DepQBF`\n* Added a bunch of example
  dimacs files\n* The types now prevent one from applying a solver that does not support
  QSAT\n  to a problem that requires it\n* Added `examples/regexp-grid`, a program
  that solves the [regular expression\n  crossword](http://www.coinheist.com/rubik/a_regular_crossword/grid.pdf)\n*
  Made some optimizations to the formula generation. `regexp-grid` went from\n  71737
  literals and 427725 clauses to 8618 literals and 172100 clauses and got\n  much
  faster\n* Based `and` and `or` in `Boolean` on `Foldable`; added `all` and `any`\n\n0.1.0.2\n-----\n*
  Added correct links to the source repository and issue tracker to the cabal project\n\n0.1\n---\n*
  Repository Initialized\n"
basic-deps:
  bytestring: ! '>=0.10.4.0 && <0.12'
  base: ! '>=4.8 && <5'
  unordered-containers: ==0.2.*
  ersatz: -any
  process: ! '>=1.1 && <1.7'
  parsec: ! '>=3.1 && <3.2'
  data-default: ! '>=0.5 && <0.8'
  semigroups: ! '>=0.16 && <1'
  array: ! '>=0.2 && <0.6'
  containers: ! '>=0.2.0.1 && <0.6'
  lens: ! '>=3.8 && <5'
  mtl: ! '>=1.1 && <2.3'
  attoparsec: -any
  transformers: ! '>=0.3 && <0.6'
  temporary: ! '>=1.1 && <1.4'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.2'
- '0.2.0.1'
- '0.2.4'
- '0.2.5'
- '0.2.5.1'
- '0.2.6'
- '0.2.6.1'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.4.2'
author: Edward A. Kmett, Eric Mertens, Johan Kiviniemi
latest: '0.4.2'
description-type: markdown
description: ! "# Ersatz\n\n[![Hackage](https://img.shields.io/hackage/v/ersatz.svg)](https://hackage.haskell.org/package/ersatz)
  [![Build Status](https://secure.travis-ci.org/ekmett/ersatz.png)](http://travis-ci.org/ekmett/ersatz)\n\nErsatz
  is a library for generating QSAT (CNF/QBF) problems using a monad. It takes care
  of generating the normal form, encoding your problem, marshaling the data to an
  external solver, and parsing and interpreting the result into Haskell types.\n\nWhat
  differentiates Ersatz is the use of observable sharing in the API.\n\nFor instance
  to define a full adder:\n\n```haskell\nfull_adder :: Bit -> Bit -> Bit -> (Bit,
  Bit)\nfull_adder a b cin = (s2, c1 || c2)\n  where (s1,c1) = half_adder a b\n        (s2,c2)
  = half_adder s1 cin\n\nhalf_adder :: Bit -> Bit -> (Bit, Bit)\nhalf_adder a b =
  (a `xor` b, a && b)\n```\n\nas opposed to the following code in [satchmo](https://hackage.haskell.org/package/satchmo/):\n\n\n```haskell\nfull_adder
  :: Boolean -> Boolean -> Boolean\n           -> SAT ( Boolean, Boolean )\nfull_adder
  a b c = do\n  let s x y z = sum $ map fromEnum [x,y,z]\n  r <- fun3 ( \\ x y z ->
  odd $ s x y z ) a b c\n  d <- fun3 ( \\ x y z -> 1   < s x y z ) a b c\n  return
  ( r, d )\n\nhalf_adder :: Boolean -> Boolean\n           -> SAT ( Boolean, Boolean
  )\nhalf_adder a b = do\n  let s x y = sum $ map fromEnum [x,y]\n  r <- fun2 ( \\
  x y -> odd $ s x y ) a b\n  d <- fun2 ( \\ x y -> 1   < s x y ) a b\n  return (
  r, d )\n```\n\nThis enables you to use the a much richer subset of Haskell than
  the purely monadic meta-language, and it becomes much easier to see that the resulting
  encoding is correct.\n\nTo allocate fresh existentially or universally quantified
  variables or to assert that a Bit is true and add the attendant circuit with sharing
  to the current problem you use the SAT monad.\n\n```haskell\nverify_currying ::
  (MonadState s m, HasQSAT s) => m ()\nverify_currying = do\n  (x::Bit, y::Bit, z::Bit)
  <- forall\n  assert $ ((x && y) ==> z) === (x ==> y ==> z)\n```\n\nWe can then hand
  that off to a SAT solver, and get back an answer:\n\n```haskell\nmain = solveWith
  depqbf verify_currying >>= print\n```\n\nSupport is offered for decoding various
  Haskell datatypes from the\nsolution provided by the SAT solver.\n\n# Examples\n\nIncluded
  are a couple of examples included with the distribution.\nNeither are as fast as
  a dedicated solver for their respective\ndomains, but they showcase how you can
  solve real world problems\ninvolving 10s or 100s of thousands of variables and constraints\nwith
  `ersatz`.\n\n## sudoku\n\n```\n% time ersatz-sudoku\nProblem:\n┌───────┬───────┬───────┐\n│
  5 3   │   7   │       │\n│ 6     │ 1 9 5 │       │\n│   9 8 │       │   6   │\n├───────┼───────┼───────┤\n│
  8     │   6   │     3 │\n│ 4     │ 8   3 │     1 │\n│ 7     │   2   │     6 │\n├───────┼───────┼───────┤\n│
  \  6   │       │ 2 8   │\n│       │ 4 1 9 │     5 │\n│       │   8   │   7 9 │\n└───────┴───────┴───────┘\nSolution:\n┌───────┬───────┬───────┐\n│
  5 3 4 │ 6 7 8 │ 9 1 2 │\n│ 6 7 2 │ 1 9 5 │ 3 4 8 │\n│ 1 9 8 │ 3 4 2 │ 5 6 7 │\n├───────┼───────┼───────┤\n│
  8 5 9 │ 7 6 1 │ 4 2 3 │\n│ 4 2 6 │ 8 5 3 │ 7 9 1 │\n│ 7 1 3 │ 9 2 4 │ 8 5 6 │\n├───────┼───────┼───────┤\n│
  9 6 1 │ 5 3 7 │ 2 8 4 │\n│ 2 8 7 │ 4 1 9 │ 6 3 5 │\n│ 3 4 5 │ 2 8 6 │ 1 7 9 │\n└───────┴───────┴───────┘\nersatz-sudoku
  \ 1,13s user 0,04s system 99% cpu 1,179 total\n```\n\n## regexp-grid\n\nThis solves
  the [regular crossword puzzle](https://github.com/ekmett/ersatz/raw/master/notes/grid.pdf)
  from the MIT mystery hunt.\n\n> % time ersatz-regexp-grid\n\n[SPOILER](notes/SPOILER.html)\n\n>
  ersatz-regexp-grid  2,45s user 0,05s system 99% cpu 2,502 total\n\nContact Information\n-------------------\n\nContributions
  and bug reports are welcome!\n\nPlease feel free to contact me through github or
  on the #haskell IRC channel on irc.freenode.net.\n\n-Edward Kmett\n\n"
license-name: BSD3
