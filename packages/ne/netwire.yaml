homepage: https://github.com/esoeylemez/netwire
changelog-type: markdown
hash: 52f0e6d59d0033441f70dc6c5789bf4c896654823a5e6a7249f58aed4b3f9b38
test-bench-deps: {}
maintainer: Ertugrul Söylemez <esz@posteo.de>
synopsis: Functional reactive programming library
changelog: ! "# 5.0.3: Maintenance release\n\n  * Fixed constraints for Semigroup-Monoid-Proposal\n
  \ * Fixed flags for older GHCs\n\nContributors:\n\n  * [Pavel Krajcevski](https://github.com/Mokosha)\n\n#
  5.0.2: Maintenance release\n\n  * Moved to Git and GitHub.\n  * Relaxed profunctors
  dependency (finally).\n  * Moved language extensions into the individual modules.\n
  \ * Minor style changes.\n"
basic-deps:
  base: ! '>=4.5 && <5'
  time: ! '>=1.4 && <2'
  semigroups: ! '>=0.15 && <1'
  containers: ! '>=0.5 && <1'
  transformers: ! '>=0.3 && <1'
  random: ! '>=1.1 && <2'
  parallel: ! '>=3.2 && <4'
  deepseq: ! '>=1.3 && <2'
  profunctors: ! '>=4.3 && <6'
all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
- 1.2.4
- 1.2.5
- 1.2.6
- 1.2.7
- 2.0.0
- 2.0.1
- 3.0.0
- 3.0.1
- 3.1.0
- 4.0.0
- 4.0.1
- 4.0.2
- 4.0.3
- 4.0.4
- 4.0.5
- 4.0.6
- 4.0.7
- 5.0.0
- 5.0.1
- 5.0.2
- 5.0.3
author: Ertugrul Söylemez <esz@posteo.de>
latest: 5.0.3
description-type: markdown
description: ! "Netwire\n=======\n\nNetwire is a functional reactive programming (FRP)
  library with signal\ninhibition.  It implements three related concepts, *wires*,
  *intervals*\nand *events*, the most important of which is the *wire*.  To work with\nwires
  we will need a few imports:\n\n``` haskell\nimport FRP.Netwire\nimport Prelude hiding
  ((.), id)\n```\n\nThe `FRP.Netwire` module exports the basic types and helper functions.\nIt
  also has some convenience reexports you will pretty much always need\nwhen working
  with wires, including `Control.Category`.  This is why we\nneed the explicit `Prelude`
  import.\n\nIn general wires are generalized automaton arrows, so you can express\nmany
  design patterns using them.  The `FRP.Netwire` module provides a\nproper FRP framework
  based on them, which strictly respects continuous\ntime and discrete event semantics.
  \ When developing a framework based on\nNetwire, e.g. a GUI library or a game engine,
  you may want to import\n`Control.Wire` instead.\n\n\nIntroduction\n------------\n\nThe
  following type is central to the entire library:\n\n``` haskell\ndata Wire s e m
  a b\n```\n\nDon't worry about the large number of type arguments.  They all have\nvery
  simple meanings, which will be explained below.\n\nA value of this type is called
  a *wire* and represents a *reactive*\nvalue of type `b`, that is a value that may
  change over time.  It may\ndepend on a reactive value of type `a`.  In a sense a
  wire is a function\nfrom a reactive value of type `a` to a reactive value of type
  `b`, so\nwhenever you see something of type `Wire s e m a b` your mind should\ndraw
  an arrow from `a` to `b`.  In FRP terminology a reactive value is\ncalled a *behavior*.\n\nA
  constant reactive value can be constructed using `pure`:\n\n``` haskell\npure 15\n```\n\nThis
  wire is the reactive value 15.  It does not depend on other\nreactive values and
  does not change over time.  This suggests that there\nis an applicative interface
  to wires, which is indeed the case:\n\n``` haskell\nliftA2 (+) (pure 15) (pure 17)\n```\n\nThis
  reactive value is the sum of two reactive values, each of which is\njust a constant,
  15 and 17 respectively.  So this is the constant\nreactive value 32.  Let's spell
  out its type:\n\n``` haskell\nmyWire :: (Monad m, Num b) => Wire s e m a b\nmyWire
  = liftA2 (+) (pure 15) (pure 17)\n```\n\nThis indicates that `m` is some kind of
  underlying monad.  As an\napplication developer you don't have to concern yourself
  much about it.\nFramework developers can use it to allow wires to access environment\nvalues
  through a reader monad or to produce something (like a GUI)\nthrough a writer monad.\n\nThe
  wires we have seen so far are rather boring.  Let's look at a more\ninteresting
  one:\n\n``` haskell\ntime :: (HasTime t s) => Wire s e m a t\n```\n\nThis wire represents
  the current local time, which starts at zero when\nexecution begins.  It does not
  make any assumptions about the time type\nother than that it is a numeric type with
  a `Real` instance.  This is\nenforced implicitly by the `HasTime` constraint.\n\nThe
  type of this wire gives some insight into the `s` parameter.  Wires\nare generally
  pure and do not have access to the system clock or other\nrun-time information.
  \ The timing information has to come from outside\nand is passed to the wire through
  a value of type `s`, called the *state\ndelta*.  We will learn more about this in
  the next section about\nexecuting wires.\n\nSince there is an applicative interface
  you can also apply `fmap` to a\nwire to apply a function to its value:\n\n``` haskell\nfmap
  (2*) time\n```\n\nThis reactive value is a clock that is twice as fast as the regular\nlocal
  time clock.  If you use system time as your clock, then the time\ntype `t` will
  most likely be `NominalDiffTime` from `Data.Time.Clock`.\nHowever, you will usually
  want to have time of type `Double` or some\nother floating point type.  There is
  a predefined wire for this:\n\n``` haskell\ntimeF :: (Fractional b, HasTime t s,
  Monad m) => Wire s e m a b\ntimeF = fmap realToFrac time\n```\n\nIf you think of
  reactive values as graphs with the horizontal axis\nrepresenting time, then the
  `time` wire is just a straight diagonal line\nand constant wires (constructed by
  `pure`) are just horizontal lines.\nYou can use the applicative interface to perform
  arithmetic on them:\n\n``` haskell\nliftA2 (\\t c -> c - 2*t) time (pure 60)\n```\n\nThis
  gives you a countdown clock that starts at 60 and runs twice as\nfast as the regular
  clock.  So it after two seconds its value will be\n56, decreasing by 2 each second.\n\n\nTesting
  wires\n-------------\n\nEnough theory, we wanna see some performance now!  Let's
  write a simple\nprogram to test a constant (`pure`) wire:\n\n``` haskell\nimport
  Control.Wire\nimport Prelude hiding ((.), id)\n\nwire :: (Monad m) => Wire s ()
  m a Integer\nwire = pure 15\n\nmain :: IO ()\nmain = testWire (pure ()) wire\n```\n\nThis
  should just display the value 15.  Abort the program by pressing\nCtrl-C.  The `testWire`
  function is a convenience to examine wires.  It\njust executes the wire and continuously
  prints its value to stdout:\n\n``` haskell\ntestWire ::\n    (MonadIO m, Show b,
  Show e)\n    => Session m s\n    -> (forall a. Wire s e Identity a b)\n    -> m
  c\n```\n\nThe type signatures in Netwire are known to be scary. =) But like most\nof
  the library the underlying meaning is actually very simple.\nConceptually the wire
  is run continuously step by step, at each step\nincreasing its local time slightly.
  \ This process is traditionally\ncalled *stepping*.\n\nAs an FRP developer you assume
  a continuous time model, so you don't\nobserve this stepping process from the point
  of view of your reactive\napplication, but it can be useful to know that wire execution
  is\nactually a discrete process.\n\nThe first argument of `testWire` needs some
  explanation.  It is a recipe\nfor state deltas.  In the above example we have just
  used `pure ()`,\nmeaning that we don't use anything stateful from the outside world,\nparticularly
  we don't use a clock.  From the type signature it is also\nclear that this sets
  `s = ()`.\n\nThe second argument is the wire to run.  The input type is quantified\nmeaning
  that it needs to be polymorphic in its input type.  In other\nwords it means that
  the wire does not depend on any other reactive\nvalue.  The underlying monad is
  `Identity` with the obvious meaning that\nthis wire cannot have any monadic effects.\n\nThe
  following application just displays the number of seconds passed\nsince program
  start (with some subsecond precision):\n\n``` haskell\nwire :: (HasTime t s) =>
  Wire s () m a t\nwire = time\n\nmain :: IO ()\nmain = testWire clockSession_ wire\n```\n\nSince
  this time the wire actually needs a clock we use `clockSession_`\nas the second
  argument:\n\n``` haskell\nclockSession_ ::\n    (Applicative m, MonadIO m)\n    =>
  Session m (Timed NominalDiffTime ())\n```\n\nIt will instantiate `s` to be `Timed
  NominalDiffTime ()`.  This type\nindeed has a `HasTime` instance with `t` being
  `NominalDiffTime`.  In\nsimpler words it provides a clock to the wire.  At first
  it may seem\nweird to use `NominalDiffTime` instead of something like `UTCTime`,
  but\nthis is reasonable, because time is relative to the wire's start time.\nAlso
  later in the section about switching we will see that a wire does\nnot necessarily
  start when the program starts.\n\n\nConstructing wires\n------------------\n\nNow
  that we know how to test wires we can start constructing more\ncomplicated wires.
  \ First of all it is handy that there are many\nconvenience instances, including
  `Num`.  Instead of `pure 15` we can\nsimply write `15`.  Also instead of\n\n```
  haskell\nliftA2 (+) time (pure 17)\n```\n\nwe can simply write:\n\n``` haskell\ntime
  + 17\n```\n\nThis clock starts at 17 instead of zero.  Let's make it run twice as\nfast:\n\n```
  haskell\n2*time + 17\n```\n\nIf you have trouble wrapping your head around such
  an expression it may\nhelp to read `a*b + c` mathematically as `a(t)*b(t) + c(t)`
  and read\n`time` as simply `t`.\n\nSo far we have seen wires that ignore their input.
  \ The following wire\nuses its input:\n\n``` haskell\nintegral 5\n```\n\nIt literally
  integrates its input value with respect to time.  Its\nargument is the integration
  constant, i.e. the start value.  To supply\nan input simply compose it:\n\n``` haskell\nintegral
  5 . 3\n```\n\nRemember that `3` really means `pure 3`, a constant wire.  The integral\nof
  the constant 3 is `3*t + c` and here `c = 5`.  Here is another\nexample:\n\n```
  haskell\nintegral 5 . time\n```\n\nSince `time` denotes `t` the integral will be
  `t^2/2 + c`, again with `c\n= 5`.  This may sound like a complicated, sophisticated
  wire, but it's\nreally not.  Surprisingly there is no crazy algebra or complicated\nnumerical
  algorithm going on under the hood.  Integrating over time\nrequires one addition
  and one division each frame.  So there is nothing\nwrong with using it extensively
  to animate a scene or to move objects in\na game.\n\nSometimes categorical composition
  and the applicative interface can be\ninconvenient, in which case you may choose
  to use the arrow interface.\nThe above integration can be expressed the following
  way:\n\n``` haskell\nproc _ -> do\n    t <- time -< ()\n    integral 5 -< t\n```\n\nSince
  `time` ignores its input signal, we just give it a constant signal\nwith value `()`.
  \ We name time's value `t` and pass it as the input\nsignal to `integral`.\n\n\nIntervals\n---------\n\nWires
  may choose to produce a signal only for a limited amount of time.\nWe refer to those
  wires as intervals.  When a wire does not produce,\nthen it *inhibits*.  Example:\n\n```
  haskell\nfor 3\n```\n\nThis wire acts like the identity wire in that it passes its
  input signal\nthrough unchanged:\n\n``` haskell\nfor 3 . \"yes\"\n```\n\nThe signal
  of this wire will be \"yes\", but after three seconds it will\nstop to act like
  the identity wire and will inhibit forever.\n\nWhen you use `testWire` inhibition
  will be displayed as \"I:\" followed by\na value, the *inhibition value*.  This
  is what the `e` parameter to\n`Wire` is.  It's called the *inhibition monoid*:\n\n```
  haskell\nfor :: (HasTime t s, Monoid e) => t -> Wire s e m a a\n```\n\nAs you can
  see the input and output types are the same and fully\npolymorphic, hinting at the
  identity-like behavior.  All predefined\nintervals inhibit with the `mempty` value.
  \ When the wire inhibits, you\ndon't get a signal of type `a`, but rather an inhibition
  value of type\n`e`.  Netwire does not interpret this value in any way and in most
  cases\nyou would simply use `e = ()`.\n\nIntervals give you a very elegant way to
  combine wires:\n\n``` haskell\nfor 3 . \"yes\" <|> \"no\"\n```\n\nThis wire produces
  \"yes\" for three seconds.  Then the wire to the left\nof `<|>` will stop producing,
  so `<|>` will use the wire to its right\ninstead.  You can read the operator as
  a left-biased \"or\".  The signal\nof the wire `w1 <|> w2` will be the signal of
  the leftmost component\nwire that actually produced a signal.  There are a number
  of predefined\ninterval wires.  The above signal can be written equivalently as:\n\n```
  haskell\nafter 3 . \"no\" <|> \"yes\"\n```\n\nThe left wire will inhibit for the
  first three seconds, so during that\ninterval the right wire is chosen.  After that,
  as suggested by its\nname, the `after` wire starts acting like the identity wire,
  so the left\nside takes precedence.  Once the time period has passed the `after`
  wire\nwill produce forever, leaving the \"yes\" wire never to be reached again.\nHowever,
  you can easily combine intervals:\n\n``` haskell\nafter 5 . for 6 . \"Blip!\" <|>
  \"Look at me...\"\n```\n\nThe left wire will produce after five seconds from the
  beginning for six\nseconds from the beginning, so effectively it will produce for
  one\nsecond.  When you animate this wire, you will see the string \"Look at\nme...\"
  for five seconds, then you will see \"Blip!\" for one second, then\nfinally it will
  go back to \"Look at me...\" and display that one forever.\n\n\nEvents\n------\n\nEvents
  are things that happen at certain points in time.  Examples\ninclude button presses,
  network packets or even just reaching a certain\npoint in time.  As such they can
  be thought of as lists of values\ntogether with their occurrence times.  Events
  are actually first class\nsignals of the `Event` type:\n\n``` haskell\ndata Event
  a\n```\n\nFor example the predefined `never` event is the event that never occurs:\n\n```
  haskell\nnever :: Wire s e m a (Event b)\n```\n\nAs suggested by the type events
  contain a value.  Netwire does not\nexport the constructors of the `Event` type
  by default.  If you are a\nframework developer you can import the `Control.Wire.Unsafe.Event`\nmodule
  to implement your own events.  A game engine may include events\nfor key presses
  or certain things happening in the scene.  However, as\nan application developer
  you should view this type as being opaque.\nThis is necessary in order to protect
  continuous time semantics.  You\ncannot access event values directly.\n\nThere are
  a number of ways to respond to an event.  The primary way to\ndo this in Netwire
  is to turn events into intervals.  There are a number\nof predefined wires for that
  purpose, for example `asSoonAs`:\n\n``` haskell\nasSoonAs :: (Monoid e) => Wire
  s e m (Event a) a\n```\n\nThis wire takes an event signal as its input.  Initially
  it inhibits,\nbut as soon as the event occurs for the first time, it produces the\nevent's
  last value forever.  The `at` event will occur only once after\nthe given time period
  has passed:\n\n``` haskell\nat :: (HasTime t s) => t -> Wire s e m a (Event a)\n```\n\nExample:\n\n```
  haskell\nat 3 . \"blubb\"\n```\n\nThis event will occur after three seconds, and
  the event's value will be\n\"blubb\".  Using `asSoonAs` we can turn this into an
  interval:\n\n``` haskell\nasSoonAs . at 3 . \"blubb\"\n```\n\nThis wire will inhibit
  for three seconds and then start producing.  It\nwill produce the value \"blubb\"
  forever.  That's the event's last value\nafter three seconds, and it will never
  change, because the event does\nnot occur ever again.  Here is an example that may
  be more\nrepresentative of that property:\n\n``` haskell\nasSoonAs . at 3 . time\n```\n\nThis
  wire inhibits for three seconds, then it produces the value 3 (or a\nvalue close
  to it) forever.  Notice that this is not a clock.  It does\nnot produce the current
  time, but the `time` at the point in time when\nthe event occurred.\n\nTo combine
  multiple events there are a number of options.  In principle\nyou should think of
  event values to form a semigroup (of your choice),\nbecause events can occur simultaneously.
  \ However, in many cases the\nactual value of the event is not that interesting,
  so there is an easy\nway to get a left- or right-biased combination:\n\n``` haskell\n(at
  2 <& at 3) . time\n```\n\nThis event occurs two times, namely once after two seconds
  and once\nafter three seconds.  In each case the event value will be the\noccurrence
  time.  Here is an interesting case:\n\n``` haskell\nat 2 . \"blah\" <& at 2 . \"blubb\"\n```\n\nThese
  events will occur simultaneously.  The value will be \"blah\",\nbecause `<&` means
  left-biased combination.  There is also `&>` for\nright-biased combination.  If
  event values actually form a semigroup,\nthen you can just use monoidal composition:\n\n```
  haskell\nat 2 . \"blah\" <> at 2 . \"blubb\"\n```\n\nAgain these events occur at
  the same time, but this time the event value\nwill be \"blahblubb\".  Note that
  you are using two Monoid instances and\none Semigroup instance here.  If the signals
  of two wires form a monoid,\nthen wires themselves form a monoid:\n\n``` haskell\nw1
  <> w2 = liftA2 (<>) w1 w2\n```\n\nThere are many predefined event-wires and many
  combinators for\nmanipulating events in the `Control.Wire.Event` module.  A common
  events\nis the `now` event:\n\n``` haskell\nnow :: Wire s e m a (Event a)\n```\n\nThis
  event occurs once at the beginning.\n\n\nSwitching\n---------\n\nWe still lack a
  meaningful way to respond to events.  This is where\n*switching* comes in, sometimes
  also called *dynamic switching*.  The\nmost important combinator for switching is
  `-->`:\n\n``` haskell\nw1 --> w2\n```\n\nThe idea is really straightforward:  This
  wire acts like `w1` as long as\nit produces.  As soon as it stops producing it is
  discarded and `w2`\ntakes its place.  Example:\n\n``` haskell\nfor 3 . \"yes\" -->
  \"no\"\n```\n\nIn this case the behavior will be the same as in the *intervals*\nsection,
  but with two major differences:  Firstly when the first\ninterval ends, it is completely
  discarded and garbage-collected, never\nto be seen again.  Secondly and more importantly
  the point in time of\nswitching will be the beginning for the new wire.  Example:\n\n```
  haskell\nfor 3 . time --> time\n```\n\nThis wire will show a clock counting to three
  seconds, then it will\nstart over from zero.  This is why we usually refer to time
  as *local\ntime*.\n\nRecursion is fully supported.  Here is a fun example:\n\n```
  haskell\nnetwireIsCool =\n    for 2 . \"Once upon a time...\" -->\n    for 3 . \"...
  games were completely imperative...\" -->\n    for 2 . \"... but then...\" -->\n
  \   for 10 . (\"Netwire 5! \" <> anim) -->\n    netwireIsCool\n\n  where\n    anim
  =\n        holdFor 0.5 . periodic 1 . \"Hoo...\" <|>\n        \"...ray!\"\n```\n"
license-name: BSD-3-Clause
