homepage: https://github.com/plutonbrb/nero
changelog-type: markdown
hash: ceb8194c00dc5e7150882b74f0bbf09a77c972939853d356fbbbb6f4d87b7c03
test-bench-deps:
  bytestring: -any
  base: ! '>=4.6 && <4.9'
  text: -any
  doctest: -any
  lens: -any
  tasty-hunit: -any
  tasty: -any
  nero: -any
  Glob: -any
maintainer: Danny Navarro <j@dannynavarro.net>
synopsis: Lens-based HTTP toolkit
changelog: ! "# Change Log\nAll notable changes to this project will be documented
  in this file. This file\nfollows the formatting recommendations from [Keep a\nCHANGELOG](http://keepachangelog.com/).
  This project adheres to [Semantic\nVersioning](http://semver.org/).\n\n## [0.3.1][0.3.1]
  - 2015-4-16\n### Fixed\n- Make examples private modules so they can be built.\n\n###
  Added\n- Lower bounds versions for dependencies.\n\n## [0.3][0.3] - 2015-4-12\nThis
  release includes changes driven by the initial implementation of\n[`nero-wai`](https://github.com/plutonbrb/nero-wai).\n###
  Changed\n- `GET` and `POST` are now types on their own instead of constructors for\n
  \ `Request`. `Request` is now sum type wrapper for the types `GET` and `POST`\n-
  `Payloaded` is now a `Lens'` and has been renamed to `HasPayload`.\n  `Request`
  is not an instance of `HasPayload` anymore, instead use `payloaded`.\n- Rename `server`
  -> `application` in `Server` type class.\n\n### Added\n- `split` for combining `match`
  and `sep`.\n- `notFound` response.\n- `payloaded` `Prism'` for `Request` `Payload`s.\n-
  `HasBody` instance for `Request`.\n- `Prism'` for `Response`s with different status.\n-
  `null`, `fromList` for `MultiMap`.\n- `Binary` module including `Renderable` and
  `Parseable` classes.\n- `Renderable` instance for `Url`.\n- Single `Response` instance
  for `Server`.\n\n## [0.2] - 2015-4-5\n### Changed\n- Replace basic routing (monoidal
  matching) with lens routing.\n- Limit exports for central module `Nero`.\n\n###
  Added\n- Custom `Prelude` (`Nero.Prelude`) extended with frequently used imports.\n\n##
  [0.1.1] - 2015-3-30\n### Fixed\n- Support for ghc-7.6.3 and ghc-7.10.1.\n\n## [0.1]
  - 2015-3-30\n### Added\n- Basic routing.\n- HTTP parameters handling for both *query
  string* and form encoded `POST`s.\n- Trailing slash redirection.\n\n[0.3.1]: https://github.com/plutonbrb/nero/compare/v0.3...v0.3.1\n[0.3]:
  https://github.com/plutonbrb/nero/compare/v0.2...v0.3\n[0.2]: https://github.com/plutonbrb/nero/compare/v0.1.1...v0.2\n[0.1.1]:
  https://github.com/plutonbrb/nero/compare/v0.1...v0.1.1\n[0.1]: https://github.com/plutonbrb/nero/compare/a2c3f720...v0.1\n"
basic-deps:
  bytestring: ! '>=0.10.0.2'
  base: ! '>=4.6 && <4.9'
  text: ! '>=0.11.3.1'
  containers: ! '>=0.5.0.0'
  lens: ! '>=4.1.2.1'
  bifunctors: ! '>=4.1.1.1'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
author: Danny Navarro
latest: 0.3.1
description-type: markdown
description: ! "# Nero\n\n> A [`Lens`][lens]-based HTTP toolkit.\n\n:warning: The
  following is a declaration of intentions.  Expect wild\nchanges in the `API` until
  the `1.0.0` release.\n\n* **Not a framework**: it may be considered an *anti-framework*,\n
  \ *micro-framework*, or just a \"library\", in the sense that it provides a\n  set
  of utilities for building *custom* web applications instead of\n  creating applications
  from user provided code following certain\n  structure.\n\n  <!-- In reality this
  is more a distinction in intention than in actual\n  code-->\n\n* **Pay for what
  you eat**: instead of coming with *everything and the\n  kitchen sink*, it provides
  the bare minimum to write applications\n  with minimum implicit behavior. At the
  same time, it offers diverse\n  paths to *grow with you* as applications become
  more complex.\n\n  <!-- No monad transformers until they are needed.-->\n\n* **Unopinonated**:
  there is no preferred routing method, HTML templating\n  library, session management,
  web server or database adapter. It comes with\n  some defaults to alleviate the
  [paradox of\n  choice](https://en.wikipedia.org/wiki/The_Paradox_of_Choice), but
  most\n  components are expected to be easily swapped in and out either with\n  plain
  3rd party [Haskell] libraries or by writing thin adapters around\n  them.\n\n  <!--
  Is pluggable right here? Sounds out of fashion -->\n\n* **Power of [Haskell] and
  [`Lens`][lens]**: the [`Lens`][lens]-based API\n  enables a style familiar to imperative
  programmers [`Lens`][lens] while\n  being purely functional under the hood. Veteran
  *Haskellers* can take\n  advantage of the powerful lens combinators.\n\n[![Hackage
  Version](https://img.shields.io/hackage/v/nero.svg)](https://hackage.haskell.org/package/nero)
  [![Build Status](https://img.shields.io/travis/plutonbrb/nero.svg)](https://travis-ci.org/plutonbrb/nero)\n\n##
  Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Nero.Prelude\nimport
  Nero (Request, Response, _GET, prefixed, ok)\nimport Nero.Warp (serve) -- from `nero-warp`\n\napp
  :: Request -> Maybe Response\napp request = request ^? _GET . prefixed \"/hello/\"
  <&> \\name ->\n    ok $ \"<h1>Hello \" <> name <> \"</h1>\"\n\nmain :: IO ()\nmain
  = serve 8080 app\n```\n\nMore examples in the [examples directory](\nhttps://github.com/plutonbrb/nero/tree/master/examples).\n\n[Haskell]:
  https://www.haskell.org/\n[lens]: https://lens.github.io/\n"
license-name: BSD-3-Clause
