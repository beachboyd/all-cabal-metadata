homepage: https://github.com/haskell/network
changelog-type: markdown
hash: aae171e6c6028a7791dbe4de5b9d2da398056359e3cc7927465ffa3cdae1aa0b
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  network: -any
  doctest: ! '>=0.10.1'
  HUnit: -any
  directory: -any
maintainer: Kazu Yamamoto, Evan Borden
synopsis: Low-level networking interface
changelog: ! "## Version 2.8.0.0\n\n* Breaking change: PortNumber originally contained
  Word32 in network\n  byte order and used \"deriving Ord\". This results in strange
  behavior\n  on the Ord instance. Now PortNumber holds Word32 in host byte order.\n
  \ [#347](https://github.com/haskell/network/pull/347)\n* Breaking change: stopping
  the export of the PortNum constructor in\n  PortNumber.\n* Use bytestring == 0.10.*
  only.\n* Use base >= 4.7 && < 5.\n\n## Version 2.7.0.2\n\n* Removing withMVar to
  avoid the deadlock between \"accept\" and \"close\"\n   [#330](https://github.com/haskell/network/pull/330)\n*
  \"close\" does not throw exceptions. A new API: \"close'\" throws\n   exceptions
  when necessary.\n   [#337](https://github.com/haskell/network/pull/337)\n* Fixing
  the hang of lazy sendAll.\n   [#340](https://github.com/haskell/network/pull/340)\n*
  Installing NetDef.h (#334)\n   [#334](https://github.com/haskell/network/pull/334)\n\n##
  Version 2.7.0.1\n\n * A new API: socketPortSafe.\n   [#319](https://github.com/haskell/network/pull/319)\n
  * Fixing a drain bug of sendAll.\n   [#320](https://github.com/haskell/network/pull/320)\n
  * Porting the new CALLCONV convention from master.\n   [#313](https://github.com/haskell/network/pull/313)\n
  * Withdrawing the deprecations of packFamily and unpackFamily.\n   [#324](https://github.com/haskell/network/pull/324)\n\n##
  Version 2.7.0.0\n\n * Obsoleting the Network module.\n * Obsoleting the Network.BSD
  module.\n * Obsoleting APIs: MkSocket, htonl, ntohl,\n              getPeerCred,
  getPeerEid,\n              send, sendTo, recv, recvFrom, recvLen,\n              inet_addr,
  inet_ntoa,\n              isConnected, isBound, isListening, isReadable, isWritable,\n
  \             aNY_PORT, iNADDR_ANY, iN6ADDR_ANY, sOMAXCONN,\n              sOL_SOCKET,
  sCM_RIGHTS,\n              packFamily, unpackFamily, packSocketType\n * Do not closeFd
  within sendFd.\n   [#271](https://github.com/haskell/network/pull/271)\n * Exporting
  ifNameToIndex and ifIndexToName from Network.Socket.\n * New APIs: setCloseOnExecIfNeeded,
  getCloseOnExec and getNonBlock\n * New APIs: isUnixDomainSocketAvailable and getPeerCredential\n
  * socketPair, sendFd and recvFd are exported even on Windows.\n\n## Version 2.6.3.5\n\n
  * Reverting \"Do not closeFd within sendFd\"\n   [#271](https://github.com/haskell/network/pull/271)\n\n##
  Version 2.6.3.4\n\n * Don't touch IPv6Only when running on OpenBSD\n   [#227](https://github.com/haskell/network/pull/227)\n
  * Do not closeFd within sendFd\n   [#271](https://github.com/haskell/network/pull/271)\n
  * Updating examples and docs.\n\n## Version 2.6.3.3\n\n * Adds a function to show
  the defaultHints without reading their undefined fields\n   [#291](https://github.com/haskell/network/pull/291)\n
  * Improve exception error messages for getAddrInfo and getNameInfo\n   [#289](https://github.com/haskell/network/pull/289)\n
  * Deprecating SockAddrCan.\n\n## Version 2.6.3.2\n\n * Zero memory of `sockaddr_un`
  if abstract socket\n   [#220](https://github.com/haskell/network/pull/220)\n\n *
  Improving error messages\n   [#232](https://github.com/haskell/network/pull/232)\n\n
  * Allow non-blocking file descriptors via `setNonBlockIfNeeded`\n   [#242](https://github.com/haskell/network/pull/242)\n\n
  * Update config.{guess,sub} to latest version\n   [#244](https://github.com/haskell/network/pull/244)\n\n
  * Rename `my_inet_ntoa` to avoid symbol conflicts\n   [#228](https://github.com/haskell/network/pull/228)\n\n
  * Test infrastructure improvements\n   [#219](https://github.com/haskell/network/pull/219)\n
  \  [#217](https://github.com/haskell/network/pull/217)\n   [#218](https://github.com/haskell/network/pull/218)\n\n
  * House keeping and cleanup\n   [#238](https://github.com/haskell/network/pull/238)\n
  \  [#237](https://github.com/haskell/network/pull/237)\n\n## Version 2.6.3.1\n\n
  * Reverse breaking exception change in `Network.Socket.ByteString.recv`\n   [#215](https://github.com/haskell/network/issues/215)\n\n##
  Version 2.6.3.0\n\n * New maintainers: Evan Borden (@eborden) and Kazu Yamamoto
  (@kazu-yamamoto).\n   The maintainer for a long period, Johan Tibell (@tibbe) stepped
  down.\n   Thank you, Johan, for your hard work for a long time.\n\n * New APIs:
  ntohl, htonl,hostAddressToTuple{,6} and tupleToHostAddress{,6}.\n   [#210](https://github.com/haskell/network/pull/210)\n\n
  * Added a Read instance for PortNumber. [#145](https://github.com/haskell/network/pull/145)\n\n
  * We only set the IPV6_V6ONLY flag to 0 for stream and datagram socket types,\n
  \  as opposed to all of them. This makes it possible to use ICMPv6.\n   [#180](https://github.com/haskell/network/pull/180)\n
  \  [#181](https://github.com/haskell/network/pull/181)\n\n * Work around GHC bug
  #12020. Socket errors no longer cause segfaults or\n   hangs on Windows. [#192](https://github.com/haskell/network/pull/192)\n\n
  * Various documentation improvements and the deprecated pragmas.\n   [#186](https://github.com/haskell/network/pull/186)\n
  \  [#201](https://github.com/haskell/network/issues/201)\n   [#205](https://github.com/haskell/network/pull/205)\n
  \  [#206](https://github.com/haskell/network/pull/206)\n   [#211](https://github.com/haskell/network/issues/211)\n\n
  * Various internal improvements.\n   [#193](https://github.com/haskell/network/pull/193)\n
  \  [#200](https://github.com/haskell/network/pull/200)\n\n## Version 2.6.2.1\n\n
  * Regenerate configure and HsNetworkConfig.h.in.\n\n * Better detection of CAN sockets.\n\n##
  Version 2.6.2.0\n\n * Add support for TCP_USER_TIMEOUT.\n\n * Don't conditionally
  export the SockAddr constructors.\n\n * Add isSupportSockAddr to allow checking
  for supported address types\n   at runtime.\n"
basic-deps:
  bytestring: ==0.10.*
  unix: ! '>=2'
  base: ! '>=4.7 && <5'
all-versions:
- '2.0'
- 2.1.0.0
- 2.2.0.0
- 2.2.0.1
- 2.2.1
- 2.2.1.1
- 2.2.1.2
- 2.2.1.3
- 2.2.1.4
- 2.2.1.5
- 2.2.1.6
- 2.2.1.7
- 2.2.1.8
- 2.2.1.9
- 2.2.1.10
- 2.2.3
- 2.2.3.1
- '2.3'
- 2.3.0.1
- 2.3.0.2
- 2.3.0.3
- 2.3.0.4
- 2.3.0.5
- 2.3.0.6
- 2.3.0.7
- 2.3.0.8
- 2.3.0.9
- 2.3.0.10
- 2.3.0.11
- 2.3.0.12
- 2.3.0.13
- 2.3.0.14
- 2.3.1.0
- 2.3.1.1
- 2.3.2.0
- 2.3.2.1
- 2.4.0.0
- 2.4.0.1
- 2.4.1.0
- 2.4.1.1
- 2.4.1.2
- 2.4.2.0
- 2.4.2.1
- 2.4.2.2
- 2.4.2.3
- 2.5.0.0
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.1.0
- 2.6.2.0
- 2.6.2.1
- 2.6.3.0
- 2.6.3.1
- 2.6.3.2
- 2.6.3.3
- 2.6.3.5
- 2.6.3.6
- 2.7.0.0
- 2.7.0.1
- 2.7.0.2
- 2.8.0.0
author: ''
latest: 2.8.0.0
description-type: markdown
description: ! '# [`network`](http://hackage.haskell.org/package/network) [![Build
  Status](https://travis-ci.org/haskell/network.svg?branch=master)](https://travis-ci.org/haskell/network)
  [![Build status](https://ci.appveyor.com/api/projects/status/5erq63o4m29bhl57/branch/master?svg=true)](https://ci.appveyor.com/project/eborden/network/branch/master)


  To build this package using Cabal directly from git, you must run

  `autoreconf` before the usual Cabal build steps

  (configure/build/install).  `autoreconf` is included in the

  [GNU Autoconf](http://www.gnu.org/software/autoconf/) tools.  There is

  no need to run the `configure` script: the `setup configure` step will

  do this for you.


  ## Support Policy


  ### GHC


  `network`''s GHC policy supports 3 [stable](https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/intro.html#ghc-version-numbering-policy)
  versions. The current stable

  version and two previous stable versions are supported.


  ### Hugs, JHC, UHC


  `network` does not officially support these compilers.

'
license-name: BSD-3-Clause
