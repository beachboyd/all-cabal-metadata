homepage: https://github.com/haskell/network
changelog-type: markdown
hash: 365a693d4b78bf162a66be310901cb8254d941c1e54a76dcf63a4d333c305a01
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.6'
  network: -any
  doctest: ! '>=0.10.1'
  HUnit: -any
  directory: -any
maintainer: Kazu Yamamoto, Evan Borden
synopsis: Low-level networking interface
changelog: |
  ## Version 3.0.0.1

  * Fixed a bug in `connect` where exceptions were not thrown
    [#368](https://github.com/haskell/network/pull/368)

  ## Version 3.0.0.0

  * Breaking change: the Network and Network.BSD are removed.
    Network.BSD is provided a new package: network-bsd.
  * Breaking change: the signatures are changed:
  ```
  old fdSocket :: Socket -> CInt
  new fdSocket :: Socket -> IO CInt

  old mkSocket :: CInt -> Family -> SocketType -> ProtocolNumber -> SocketStatus -> IO Socket
  new mkSocket :: CInt -> IO Socket
  ```
  * Breaking change: the deprecated APIs are removed: send, sendTo, recv, recvFrom, recvLen, htonl, ntohl, inet_addr, int_ntoa, bindSocket, sClose, SocketStatus, isConnected, isBound, isListening, isReadable, isWritable, sIsConnected, sIsBound, sIsListening, sIsReadable, sIsWritable, aNY_PORT, iNADDR_ANY, iN6ADDR_ANY, sOMAXCONN, sOL_SOCKET, sCM_RIGHTS, packSocketType, getPeerCred.
  * Breaking chage: SockAddrCan is removed from SockAddr.
  * Socket addresses are extendable with Network.Socket.Address.
  * "socket" is now asynchronous-exception-safe.
    [#336](https://github.com/haskell/network/pull/336)
  * "recvFrom" returns (0, addr) instead of throwing an error on EOF.
    [#360](https://github.com/haskell/network/pull/360)
  * All APIs are available on any platforms.
  * Build system is simplified.
  * Bug fixes.

  ## Version 2.8.0.0

  * Breaking change: PortNumber originally contained Word16 in network
    byte order and used "deriving Ord". This results in strange behavior
    on the Ord instance. Now PortNumber holds Word16 in host byte order.
    [#347](https://github.com/haskell/network/pull/347)
  * Breaking change: stopping the export of the PortNum constructor in
    PortNumber.
  * Use bytestring == 0.10.* only.
  * Use base >= 4.7 && < 5.

  ## Version 2.7.0.2

  * Removing withMVar to avoid the deadlock between "accept" and "close"
     [#330](https://github.com/haskell/network/pull/330)
  * "close" does not throw exceptions. A new API: "close'" throws
     exceptions when necessary.
     [#337](https://github.com/haskell/network/pull/337)
  * Fixing the hang of lazy sendAll.
     [#340](https://github.com/haskell/network/pull/340)
  * Installing NetDef.h (#334)
     [#334](https://github.com/haskell/network/pull/334)

  ## Version 2.7.0.1

   * A new API: socketPortSafe.
     [#319](https://github.com/haskell/network/pull/319)
   * Fixing a drain bug of sendAll.
     [#320](https://github.com/haskell/network/pull/320)
   * Porting the new CALLCONV convention from master.
     [#313](https://github.com/haskell/network/pull/313)
   * Withdrawing the deprecations of packFamily and unpackFamily.
     [#324](https://github.com/haskell/network/pull/324)

  ## Version 2.7.0.0

   * Obsoleting the Network module.
   * Obsoleting the Network.BSD module.
   * Obsoleting APIs: MkSocket, htonl, ntohl,
                getPeerCred, getPeerEid,
                send, sendTo, recv, recvFrom, recvLen,
                inet_addr, inet_ntoa,
                isConnected, isBound, isListening, isReadable, isWritable,
                aNY_PORT, iNADDR_ANY, iN6ADDR_ANY, sOMAXCONN,
                sOL_SOCKET, sCM_RIGHTS,
                packFamily, unpackFamily, packSocketType
   * Breaking change: do not closeFd within sendFd.
     [#271](https://github.com/haskell/network/pull/271)
   * Exporting ifNameToIndex and ifIndexToName from Network.Socket.
   * New APIs: setCloseOnExecIfNeeded, getCloseOnExec and getNonBlock
   * New APIs: isUnixDomainSocketAvailable and getPeerCredential
   * socketPair, sendFd and recvFd are exported even on Windows.

  ## Version 2.6.3.5

   * Reverting "Do not closeFd within sendFd"
     [#271](https://github.com/haskell/network/pull/271)

  ## Version 2.6.3.4

   * Don't touch IPv6Only when running on OpenBSD
     [#227](https://github.com/haskell/network/pull/227)
   * Do not closeFd within sendFd
     [#271](https://github.com/haskell/network/pull/271)
   * Updating examples and docs.

  ## Version 2.6.3.3

   * Adds a function to show the defaultHints without reading their undefined fields
     [#291](https://github.com/haskell/network/pull/292)
   * Improve exception error messages for getAddrInfo and getNameInfo
     [#289](https://github.com/haskell/network/pull/289)

  ## Version 2.6.3.2

   * Zero memory of `sockaddr_un` if abstract socket
     [#220](https://github.com/haskell/network/pull/220)

   * Improving error messages
     [#232](https://github.com/haskell/network/pull/232)

   * Allow non-blocking file descriptors via `setNonBlockIfNeeded`
     [#242](https://github.com/haskell/network/pull/242)

   * Update config.{guess,sub} to latest version
     [#244](https://github.com/haskell/network/pull/244)

   * Rename `my_inet_ntoa` to avoid symbol conflicts
     [#228](https://github.com/haskell/network/pull/228)

   * Test infrastructure improvements
     [#219](https://github.com/haskell/network/pull/219)
     [#217](https://github.com/haskell/network/pull/217)
     [#218](https://github.com/haskell/network/pull/218)

   * House keeping and cleanup
     [#238](https://github.com/haskell/network/pull/238)
     [#237](https://github.com/haskell/network/pull/237)

  ## Version 2.6.3.1

   * Reverse breaking exception change in `Network.Socket.ByteString.recv`
     [#215](https://github.com/haskell/network/issues/215)

  ## Version 2.6.3.0

   * New maintainers: Evan Borden (@eborden) and Kazu Yamamoto (@kazu-yamamoto).
     The maintainer for a long period, Johan Tibell (@tibbe) stepped down.
     Thank you, Johan, for your hard work for a long time.

   * New APIs: ntohl, htonl,hostAddressToTuple{,6} and tupleToHostAddress{,6}.
     [#210](https://github.com/haskell/network/pull/210)

   * Added a Read instance for PortNumber. [#145](https://github.com/haskell/network/pull/145)

   * We only set the IPV6_V6ONLY flag to 0 for stream and datagram socket types,
     as opposed to all of them. This makes it possible to use ICMPv6.
     [#180](https://github.com/haskell/network/pull/180)
     [#181](https://github.com/haskell/network/pull/181)

   * Work around GHC bug #12020. Socket errors no longer cause segfaults or
     hangs on Windows. [#192](https://github.com/haskell/network/pull/192)

   * Various documentation improvements and the deprecated pragmas.
     [#186](https://github.com/haskell/network/pull/186)
     [#201](https://github.com/haskell/network/issues/201)
     [#205](https://github.com/haskell/network/pull/205)
     [#206](https://github.com/haskell/network/pull/206)
     [#211](https://github.com/haskell/network/issues/211)

   * Various internal improvements.
     [#193](https://github.com/haskell/network/pull/193)
     [#200](https://github.com/haskell/network/pull/200)

  ## Version 2.6.2.1

   * Regenerate configure and `HsNetworkConfig.h.in`.

   * Better detection of CAN sockets.

  ## Version 2.6.2.0

   * Add support for `TCP_USER_TIMEOUT`.

   * Don't conditionally export the `SockAddr` constructors.

   * Add `isSupportSockAddr` to allow checking for supported address types
     at runtime.
basic-deps:
  bytestring: ==0.10.*
  unix: ! '>=2'
  base: ! '>=4.7 && <5'
  deepseq: -any
all-versions:
- '2.0'
- 2.1.0.0
- 2.2.0.0
- 2.2.0.1
- 2.2.1
- 2.2.1.1
- 2.2.1.2
- 2.2.1.3
- 2.2.1.4
- 2.2.1.5
- 2.2.1.6
- 2.2.1.7
- 2.2.1.8
- 2.2.1.9
- 2.2.1.10
- 2.2.3
- 2.2.3.1
- '2.3'
- 2.3.0.1
- 2.3.0.2
- 2.3.0.3
- 2.3.0.4
- 2.3.0.5
- 2.3.0.6
- 2.3.0.7
- 2.3.0.8
- 2.3.0.9
- 2.3.0.10
- 2.3.0.11
- 2.3.0.12
- 2.3.0.13
- 2.3.0.14
- 2.3.1.0
- 2.3.1.1
- 2.3.2.0
- 2.3.2.1
- 2.4.0.0
- 2.4.0.1
- 2.4.1.0
- 2.4.1.1
- 2.4.1.2
- 2.4.2.0
- 2.4.2.1
- 2.4.2.2
- 2.4.2.3
- 2.5.0.0
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.1.0
- 2.6.2.0
- 2.6.2.1
- 2.6.3.0
- 2.6.3.1
- 2.6.3.2
- 2.6.3.3
- 2.6.3.5
- 2.6.3.6
- 2.7.0.0
- 2.7.0.1
- 2.7.0.2
- 2.8.0.0
- 3.0.0.0
- 3.0.0.1
author: ''
latest: 3.0.0.1
description-type: markdown
description: |
  # [`network`](http://hackage.haskell.org/package/network) [![Build Status](https://travis-ci.org/haskell/network.svg?branch=master)](https://travis-ci.org/haskell/network) [![Build status](https://ci.appveyor.com/api/projects/status/5erq63o4m29bhl57/branch/master?svg=true)](https://ci.appveyor.com/project/eborden/network/branch/master)

  To build this package directly from git, you must run `autoreconf -i`.
  And then use `cabal configure; cabal build` or `stack build`.

  ## Support Policy

  ### GHC

  The `network` package support [3 major versions of GHC](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/intro.html#ghc-version-numbering-policy) only.
  This means that the current stable version and two previous stable versions are supported.

  ### Windows

  We use MSYS to build this package on Windows.
  To use the `network` package on Cygwin, use `stack`.

  ## Coding

  ### .hs files

  If you need C macros created by "configure" or `CALLCONV`/`SAFE_ON_WIN`, put

  ```
  #include "HsNetDef.h"
  ```

  "HsNet.h" does now work well since Mac's cpp sucks.

  ### .hsc files

  If you need `#peek`, `#poke` and others, create a `.hsc` file with

  ```
  #include "HsNet.h"
  ```

  `HsNet.h` includes `HsNefDef.h` and necessary C structures.
  Unfortunately, `hsc2hs` does not convert C macros.
  So, if you use `CALLCONV`/`SAFE_ON_WIN`, the following is also necessary:

  ```
  ##include "HsNetDef.h"
  ```

  ## Milestones

  ### 2.6

  - [x] Making `SockAddrCan` deprecated

  ### 2.7

  See https://github.com/haskell/network/issues/296

  - [x] Making `Network` deprecated
  - [x] Making `Network.BSD` deprecated
  - [x] Making `MkSocket` deprecated
  - [x] Making many APIs deprecated

  ### 2.8

  - [x] Stop exporting the `PortNum` Constructor in `PortNumber`

  ### 3.0

  - [x] Removing `Network`
  - [x] Removing `Network.BSD`
  - [x] Removing `SockAddrCan`
  - [x] Changing the internal structure of `Socket`.
  - [x] Make address extensible.
  - [x] Remove EOF errors
license-name: BSD-3-Clause
