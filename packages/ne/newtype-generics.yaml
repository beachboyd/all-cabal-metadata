homepage: ''
changelog-type: markdown
hash: d5f0d3106fdbc8f44ca2901e4dfa16fcc89cedbb71ea6f620205f7b372d853b3
test-bench-deps:
  base: -any
  hspec: ! '>=2.1'
  criterion: -any
  semigroups: -any
  HUnit: ! '>=1.2.5.2'
  newtype-generics: -any
maintainer: Simon Jakobi <simon.jakobi@gmail.com>
synopsis: A typeclass and set of functions for working with newtypes, with generics
  support.
changelog: ! '* 0.5.2 - Add `under2` and `over2`, documentation improvements

  * 0.5.1 - Add more instances from base

  * 0.5.0.1 - Compatibility with GHC 8.2.1

  * 0.5 - Relax types of underF and overF to allow different input & output funtors

'
basic-deps:
  base: ! '>=4.6 && <4.11'
  transformers: -any
all-versions:
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.4.2'
- '0.5'
- '0.5.0.1'
- '0.5.1'
- '0.5.2'
- '0.5.2.1'
author: Darius Jahandarie, Conor McBride, João Cristóvão
latest: '0.5.2.1'
description-type: markdown
description: ! "newtype-generics\n================\n\nA typeclass and set of functions
  for working with newtypes.\nFork of the code published by Darius Jahandarie [here](http://hackage.haskell.org/package/newtype-0.2),\nwith
  the addition of generics.\n\nThe 'Newtype' typeclass and related functions: `op`,
  `ala`, `ala'`, `under`. \nPrimarly pulled from Conor McBride's Epigram work. Some
  examples:\n\n```\n-- foldMaps the list ala the Sum newtype. This results in 10.\nala
  Sum foldMap [1,2,3,4] \n\n-- foldMaps the list ala the Product newtype. This results
  in 24.\nala Product foldMap [1,2,3,4] \n\n-- foldMaps the list ala the Endo newtype.
  This results in 8.\nala Endo foldMap [(+1), (+2), (subtract 1), (*2)] 3 \n```\n\n_NB:_
  `Data.Foldable.foldMap` is a generalized `mconcatMap` which is a generalized `concatMap`.\n\nThis
  package includes `Newtype` instances for all the (non-GHC/foreign) newtypes in base
  (as seen in the examples).\nHowever, there are neat things you can do with this
  with /any/ newtype and you should definitely define your own 'Newtype' instances
  for the power of this library.\nFor example, see `ala Cont traverse`, with the proper
  `Newtype` instance for Cont.\n\nThis could of course be eased with the addition
  of generics for version 0.3:\n\n```\n{-# LANGUAGE DeriveGeneric              #-}\n\nimport
  GHC.Generics\n(...)\nnewtype Example = Example Int (deriving Generic)\ninstance
  Newtype Example\n```\n\n"
license-name: BSD3
