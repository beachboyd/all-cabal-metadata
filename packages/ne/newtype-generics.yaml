homepage: ''
changelog-type: markdown
hash: d359971862b55837c2b3fc2f2bc786baf99dd28521ad58c41e91c59e5152901c
test-bench-deps:
  base: -any
  hspec: ! '>=2.1'
  criterion: -any
  semigroups: -any
  HUnit: ! '>=1.2.5.2'
  newtype-generics: -any
maintainer: Simon Jakobi <simon.jakobi@gmail.com>
synopsis: A typeclass and set of functions for working with newtypes, with generics
  support.
changelog: ! "* 0.5.2 - Add `under2` and `over2`, documentation improvements\r\n*
  0.5.1 - Add more instances from base\r\n* 0.5.0.1 - Compatibility with GHC 8.2.1\r\n*
  0.5 - Relax types of underF and overF to allow different input & output funtors\r\n"
basic-deps:
  base: ! '>=4.6 && <4.11'
  transformers: -any
all-versions:
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.4.2'
- '0.5'
- '0.5.0.1'
- '0.5.1'
- '0.5.2'
author: Darius Jahandarie, Conor McBride, João Cristóvão
latest: '0.5.2'
description-type: markdown
description: ! "newtype-generics\r\n================\r\n\r\nA typeclass and set of
  functions for working with newtypes.\r\nFork of the code published by Darius Jahandarie
  [here](http://hackage.haskell.org/package/newtype-0.2),\r\nwith the addition of
  generics.\r\n\r\nThe 'Newtype' typeclass and related functions: `op`, `ala`, `ala'`,
  `under`. \r\nPrimarly pulled from Conor McBride's Epigram work. Some examples:\r\n\r\n```\r\n--
  foldMaps the list ala the Sum newtype. This results in 10.\r\nala Sum foldMap [1,2,3,4]
  \r\n\r\n-- foldMaps the list ala the Product newtype. This results in 24.\r\nala
  Product foldMap [1,2,3,4] \r\n\r\n-- foldMaps the list ala the Endo newtype. This
  results in 8.\r\nala Endo foldMap [(+1), (+2), (subtract 1), (*2)] 3 \r\n```\r\n\r\n_NB:_
  `Data.Foldable.foldMap` is a generalized `mconcatMap` which is a generalized `concatMap`.\r\n\r\nThis
  package includes `Newtype` instances for all the (non-GHC/foreign) newtypes in base
  (as seen in the examples).\r\nHowever, there are neat things you can do with this
  with /any/ newtype and you should definitely define your own 'Newtype' instances
  for the power of this library.\r\nFor example, see `ala Cont traverse`, with the
  proper `Newtype` instance for Cont.\r\n\r\nThis could of course be eased with the
  addition of generics for version 0.3:\r\n\r\n```\r\n{-# LANGUAGE DeriveGeneric              #-}\r\n\r\nimport
  GHC.Generics\r\n(...)\r\nnewtype Example = Example Int (deriving Generic)\r\ninstance
  Newtype Example\r\n```\r\n\r\n"
license-name: BSD3
