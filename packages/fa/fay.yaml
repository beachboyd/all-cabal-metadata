homepage: https://github.com/faylang/fay/wiki
changelog-type: markdown
hash: 39b8c3789138dcbaa14bbbcaba5cf30f928961349c7f04ecd3765bb0f71d7e6d
test-bench-deps: {}
maintainer: adam@bergmark.nl
synopsis: A compiler for Fay, a Haskell subset that compiles to JavaScript.
changelog: ! "## Changelog\n\nSee full history at: <https://github.com/faylang/fay/commits>\n\n####
  0.24.0.1\n\n* Dependency updates incl GHC 8.4 support\n\n## 0.24.0.0\n\n* Add the
  option to generate typescript output, thanks to Junji Hashimoto.\n\n### 0.23.2.0\n\n*
  GHC 8.2 support\n* Use traverse-with-class 1.0.*, and as a result drop support for
  GHC < 8.\n\n#### 0.23.1.16\n\n* Fix build on GHC 7.4\n\n#### 0.23.1.15\n\n* Allow
  optparse-applicative 0.13.*.\n\n#### 0.23.1.14\n\n* Fix a compilation error introduced
  in 0.23.1.13.\n\n#### 0.23.1.13\n\n* Add support for haskell-src-exts 1.18.1.\n\n####
  0.23.1.12\n\n* Fix compilation on GHC < 7.8.\n\n#### 0.23.1.11\n\n* Tighten some
  impossible lower bounds we can't support.\n\n#### 0.23.1.10\n\n* Don't compile with
  `-fprof-auto` by default.\n\n#### 0.23.1.9\n\n* Allow and require `haskell-src-exts
  1.17.*`\n\n#### 0.23.1.8\n\n* Allow `vector 0.11.*`\n\n#### 0.23.1.7\n\n* Fix panic
  when compiling irrefutable pattern matches on lists (thanks Christopher Parks)\n\n####
  0.23.1.6\n\n* Allow `syb 0.5.*`\n\n#### 0.23.1.5\n\n* Allow `aeson 0.9.*`\n\n####
  0.23.1.4\n\n* Fix compilation on at least GHC 7.6 (maybe older versions as well...)\n\n####
  0.23.1.3\n\n* Inline parts of `haskell-names 0.4.1` and `haskell-packages` to drop
  transitive dependencies on Cabal and other packages.\n\n#### 0.23.1.2\n\n* Allow
  filepath 1.4.*\n\n#### 0.23.1.1\n\n* Allow do let bindings of newtypes.\n\n### 0.23.1.0\n\n*
  Add `--show-ghc-calls` and `configShowGhcCalls` to print invocations to GHC.\n\n####
  0.23.0.1\n\n* Allow `mtl-compat 0.2.*` and `transformers-compat 0.4.*\"`.\n\n##
  0.23.0.0\n\nNew features:\n\n* GHC 7.10 support\n* Add a `--pretty-operators` flag
  to replace the escaped operator names with their actual names - By Michal Seweryn\n*
  Add a `--pretty-all` flag that enables `--pretty`, `--pretty-operators`, and `--pretty-thunks`
  - By Michal Seweryn\n* De/serialize type variables as 'automatic'. You no longer
  have to annotate FFI functions with Automatic, this is now the default. If you need
  the old behavior, use Ptr. For most existing cases this change shouldn't change
  anything. - By Zachary Mason\n\nExample output with `--pretty-all`:\n```javascript\nMain.main
  = new $(function(){\n  return _(_(Prelude[\"$\"])(Prelude.print))(_(_(Prelude[\"++\"])(Main.g))(Fay$$list(\"b\")));\n});\n```\n\n\nAPI
  changes - By Michal Seweryn:\n\n* Export CompileResult from Fay.Types\n* Export
  PrintReader and PrintWriter, and reducing number of PrintState fields (these are
  moved to PrinterReader and PrintWriter)\n* In the meanwhile PrintWriter field type
  changed - output is now stored as ShowS - tests run faster now\n* Replace monadic
  functions (askP, getP, ...) with higher level ones: indented, askIf, newline, write,
  mapping. askIf is pretty much like previous askP, but works like if-then-else.\n*
  Internally we are now using `ExceptT` instead of `ErrorT`. This fixes deprecation
  warnings when using `transformers 0.4.*`.\n\nBug fixes:\n* Defer automatic_function
  fayToJs call until after argument application - by Zachary Mason\n\nDependency bumps:\n*
  Allow `utf8-string 1.0.*`\n* Allow `time == 1.5.*`\n\n## 0.22.0.0\n\n* Add a `--pretty-thunks`
  flag and compiler option that replaces `Fay$$_` and `Fay$$$` with `_` and `$` respectively.
  Consider this a development flag since it may clash with JS libraries (notably jQuery
  and underscore)\n* Allow `language-ecmascript 0.17.*`\n\n#### 0.21.2.1 (2014-11-10)\n\n*
  Hide all packages by default when typechecking. This avoids conflicting with packages
  that haven't been specified on the command-line with `--package`, e.g. the `text`
  package when you import `Data.Text`.\n\n### 0.21.2 (2014-10-21)\n\n* Previously
  all package imports were ignored, now we only ignore `\"base\"` package imports.\n\n###
  0.21.1 (2014-10-21)\n\n* Lots of additions to in `fay-base` adding the following
  modules:\n  * Data.Var - Mutable variables, Reactive variables, and reactive signals\n
  \ * Unsafe.Coerce\n  * Data.Text (fay-text will be updated to reuse this module)\n
  \ * Data.Time\n  * Data.Ord, Data.Function, Data.Maybe, Data.List, Data.Either\n
  \ * Data.Defined and Data.Nullable\n  * Data.Mutex - Simple mutexes\n  * Control.Exception\n
  \ * Data.LocalStorage\n  * Data.MutMap - Mutable maps\n\nThe introduction of `Data.Var`
  required some additions to fay's runtime.\n\n#### 0.21.0.2 (2014-10-19)\n\n* Fallback
  to ghc and ghc-pkg in PATH if not available from GHC.Paths\n\n#### 0.21.0.1 (2014-10-12)\n\n*
  Update to `optparse-applicative == 0.11.*`\n\n## 0.21.0.0 (2014-10-11)\n\n* Errors
  are now properly thrown from `encodeFay`. Changes the type signature to `encodeFay
  :: (GenericQ Value -> GenericQ Value) -> GenericQ Value`\n* Update to `haskell-src-exts
  == 1.16.*`, This changes the type signature of `readerCompileLit` to `:: S.Sign
  -> S.Literal -> Compile JsExp`\n* Fixes `ghc-pkg describe` stdout errors not always
  being printed\n\n### 0.20.2.0 (2014-09-14)\n\n* Config option to disable optimizations
  of newtypes, treating them as\n  normal data types. This can be triggered by setting\n
  \ `configOptimizeNewtypes = False` or passing\n  `--no-optimized-newtypes`.\n\n####
  0.20.1.4 (2014-09-04)\n\n* Update to `optparse-applicative == 0.10.*`\n\n#### 0.20.1.3
  (2014-08-29)\n\n* Test suite is no longer built by default, cabal install with `-ftest`
  to enable.\n\n#### 0.20.1.2 (2014-08-18)\n\n* Updated homepage URLs, fay-lang.org
  was 301'd\n\n#### 0.20.1.1 (2014-06-17)\n\n* Don't cache the `main` thunk in the
  generated `main` call.\n\n### 0.20.1.0 (2014-06-14)\n\n* Add default case for UTCTime
  in Fay.Convert using the aeson instances. Note that this serializes to a json string
  so you won't be able to deserialize it as a separate type (such as Date) when using
  `Automatic` in Fay.\n\n* Added `Fay.Config.defaultConfigWithSandbox` that reads
  the `HASKELL_PACKAGE_SANDBOX` environment variable. Client libraries can use this
  instead of manually reading from `getEnvironment`.\n\n#### 0.20.0.4 (2014-05-23)\n\n*
  Allow `optparse-applicative 0.9.*`\n\n#### 0.20.0.3 (2014-05-09)\n\n* Allow `mtl
  2.2.*`\n\n#### 0.20.0.2 (2014-05-08)\n\n* Allow `haskell-names 0.4.*`\n\n#### 0.20.0.1
  (2014-05-08)\n\n* Allow `transformers >= 0.4.1 && < 0.5`\n\n## 0.20.0.0 (2014-04-29)\n\n*
  Adds support for LambdaCase and MultiWayIf\n\n* Modules have moved around a lot
  and several modules have been un-exposed. From now on you will probably only need
  to deal with at most `Fay` (which re-exports a lot of things), `Fay.Config`, `Fay.Types.CompileError`,
  `Fay.Convert`, and `Fay.Types.CompileResult`. Please let us know if you would like
  us to expose more things\n\n* Config:\n  * `CompileConfig` has been renamed to `Config`
  and is now located in `Fay.Config`.\n  * `CompileConfig` has become a temporary
  type alias for `Config`.\n  * `Fay.Compiler.Config` is deprecated, import `Fay`
  or `Fay.Config` instead.\n  * The `data-default` instance for `Config` is deprecated,
  use `defaultConfig` instead.\n\n* compiling\n  * `compileFileWithState` is deprecated,
  use `compileFileWithResult` which returns a `Fay.Types.CompileResult` instead. As
  a consequence `CompileState` is also deprecated from public consumption.\n  * `compileFile`,
  `compileFromToAndGenerateHtml` no longer return a triple with the sourcemap, use
  `compileFileWithResult` if you want access to this.\n\n* Importing `Fay.Types` has
  been deprecated, import `Fay` instead.\n\n* `readFromFay` has been rewritten using
  `syb` instead of `pretty-show` (Thanks to Michael Sloan and Chris Done)\n  * This
  introduces the following breaking changes:\n    * `readFromFay` has a `Data` constraint
  instead of `Show`.\n    * Drops support for Rational and Integer (see below for
  migration steps). The reason is that neither was serialized in a way that would
  roundtrip for all values. Also, for similar reasons, fromRational is potentially
  divergent for aeson's new use of the Scientific type.\n  * And adds the following
  features:\n    * You can now write custom `Show` instances targeting GHC for types
  shared with Fay.\n    * Better performance.\n    * Allows the serialization and
  deserialization to be customized on a per-type basis, via encodeFay and decodeFay.\n
  \ * To migrate code using Rational or Integer, use encodeFay and pass an argument
  e.g. `(\\f x -> maybe (f x) myIntegerToValueConversion (cast x))` and likewise to
  decodeFay.\n\nBugfixes:\n\n* Mltiple guards on a pattern in a case expression skipped
  everything but the first guard. To fix this an optimization we had on pattern conditions
  was disabled.\n\nDependency bumps:\n\n* Allow Cabal 1.20 and 1.21\n\nInternal:\n\n*
  Test cases are now using `tasty` instead of `test-framework`. To run cases in parallel
  use `fay-tests --num-threads=N` (see `fay-tests --help` for more info).\n* Added
  a test group for desugaring.\n\n#### 0.19.2.1 (2014-04-14)\n\n* Allow `haskell-src-exts
  1.15.*`\n\n### 0.19.2 (2014-04-10)\n\n* Fixes a bug where arrays used with empty
  data decls would be deserialized into a Fay list instead of kept as is.\n\n####
  0.19.1.2 (2014-04-07)\n\n* Fix optimizations that were not applied and add codegen
  test cases.\n\n#### 0.19.1.1 (2014-03-17)\n\n* Allow `optparse-applicative 0.8.*`\n\n###
  0.19.1 (2014-03-13)\n\n* Added Data.Char to fay-base\n\nDependency bumps:\n* Allow
  `Cabal 1.19.*`\n* Allow `process 1.2.*`\n\n#### 0.19.0.2 (2014-01-30)\n\nBugfixes:\n*
  Don't export transcoding information for fay-base packages when compiling with --no-stdlib\n*
  Better error messages when forgetting the type signature in an FFI declaration\n\n####
  0.19.0.1 (2014-01-15)\n\nDependency bumps:\n* Allow `aeson 0.7.*`\n\n## 0.19 (2014-01-14)\n\n*
  Made import Prelude is implicit, but note that RebindableSyntax implies NoImplicitPrelude.\n*
  Allow FFI declarations in let and where statements: `let f :: X; f = ffi \"...\"`
  and `where f :: X; f = ffi \"...\"`\n\nBugfixes:\n* Removed extra </script> tag
  that was generated by --html-wrapper\n* FFI expressions in top level declarations
  now produce identical code to a normal top level FFI declaration\n* Don't export
  Data.Ratio and Debug.Trace when using --no-stdlib\n\nDependency bumps:\n* Allow
  text 1.1\n* Allow attoparsec 0.11\n\n\n**Note: 0.18.0.1 added source mappings returned
  by `Fay:compileFile` and friends meaning it should have been a major bump. Sorry
  about this!**\n\n#### 0.18.1.3 (2013-12-14)\n\n* Add parsing of Integer to Fay.Convert
  (note that the runtime doesn't have arbitrary precision Integers)\n* Allow text
  1.0.*\n\n#### 0.18.1.2 (2013-11-26)\n\n* Add support for indirect application of
  newtypes (such as `p = NewType; foo = p x` and `bar = NewType $ y`)\n\n#### 0.18.1.1
  (2013-11-22)\n\n* Fix a bug where records with the same name as top level modules
  wouldn't be initialized correctly.\n* Fail when using enum syntax on unsupported
  literal types (for instance ['a'..'z'])\n\n### 0.18.1 (2013-11-07)\n\n* Add support
  for TupleSections\n\n#### 0.18.0.5 (2013-10-28)\n\nBugfixes:\n* Disallow unsupported
  patterns in where/let declarations instead of `<<loop>>`ing on them\n\nMinor:\n*
  Put upper bounds on all dependencies\n\n#### 0.18.0.4 (2013-10-25)\n\nBugfixes:\n*
  Allow `//` as an operator name (added flag to `hse-cpp`)\n* Don't transcode function
  values when using an EmptyDataDecl\n\n#### 0.18.0.3 (2013-10-23)\n\nMinor:\n* Allow
  `optparse-applicative == 0.7.*`\n* Fix `examples/Cont.hs`\n\n#### 0.18.0.2 (2013-10-16)\n\nBug
  fixes:\n* Regression: Work around a bug in optparse-applicative 0.6 that prevents
  `--strict` from being used.\n\n#### 0.18.0.1 (2013-10-16)\n\n* Source maps for top
  level definitions, use `--sourcemap`\n\nBug fixes:\n* Regression: Equality checks
  for (G)ADTs (`deriving Eq`)\n* Fix `--strict` for top level ADT values (such as
  `module M where g = R`)\n* Regression: Serialization in the presence of compression/renaming\n*
  Pass NoImplicitPrelude (and other enabled extensions) to haskell-names to resolve
  ambiguities when Prelude isn't imported.\n\nMinor:\n* Bump optparse-applicative
  to 0.6.*\n* Bump haskell-names to 0.3.1 to allow compilation with Cabal 1.14\n*
  Ignore more declarations (useful when code sharing with GHC)\n\n## 0.18.0.0 (2013-09-24)\n\nNew
  features:\n* Support for qualified imports. Note: You still can't have multiple
  constructors with the same name in the FFI since the `instance` field in the serialization
  is still unqualified.\n* `Automatic` transcoding now works for functions. See [Calling
  Fay From JavaScript](https://github.com/faylang/fay/wiki/Calling-Fay-from-JavaScript)\n*
  `--strict modulename[, ..]` generates strict and transcoding wrappers for a module's
  exports. See [Calling Fay From JavaScript](https://github.com/faylang/fay/wiki/Calling-Fay-from-JavaScript)\n*
  `--typecheck-only` just runs the GHC type checker with the appropriate Fay flags.\n*
  `--runtime-path FILEPATH` allows you to supply a custom runtime. Probably only useful
  for debugging.\n\nBug fixes:\n* Don't crash when trying to get the fayToJsFun of
  an object without constructor.name\n* Fixed bug that accidentally flattened list
  arguments in `jsToFay`\n* Fix construction with RecordWildCards not taking already
  listed fields into account\n\nBreaking Changes:\n* Fay.Compiler.Debug has been removed
  (for now)\n* The interactive compilation mode has been removed (for now)\n\nInternal
  changes:\n* Migrated to haskell-src-ext's annotated AST.\n* Name resolution is now
  done using haskell-names, Fay's name resolution code is now pure and a lot simpler.\n\n##
  0.17.0.0 (2013-08-27)\n\n* With the `RebindableSyntax` and `OverloadedStrings` extensions
  Fay will treat Haskell string literals as JavaScript Strings. Add this in all modules
  and import Fay.Text (from the `fay-text` package). This is *not* a breaking change,
  without these extensions in a module `String` will be used, as before. All modules
  can still interoperate normally even if only some of them use this feature. Note
  that you may have to define `fromInteger` when using this with Num literals.\n\n*
  The type signature of `Fay.FFI.ffi` (in fay) and `FFI.ffi` (in fay-base) has been
  generalized to `IsString s => s -> a` to support `RebindableSyntax`.\n\n* Much faster
  compile time (of the compiler itself) by having the executables depend on the library.\n\nBugfixes:\n*
  The empty list and unit is now serialized to `null` when using Automatic (it used
  to throw an error).\n\nMinor:\n* Restrict upper bound on `language-ecmascript` to
  `< 1.0`\n\n#### 0.16.0.3 (2013-08-23)\n\n* Support for tuple constructors (`(,,)
  1,2,3`)\n\nMinor:\n* Bump `pretty-show` to `>= 1.6`\n* Remove the `-fdevel` flag
  (when compiling fay itself)\n\n#### 0.16.0.2 (2013-08-21)\n\nMinor:\n* Bump `haskell-src-exts`
  to `>= 1.14`\n\n#### 0.16.0.1 (2013-08-08)\n\nBugfixes:\n * Allow combining multiline
  strings with CPP\n\n## 0.16.0.0 (2013-08-05)\n * New module generation, modules
  generate code separately in the format `My.Module.foo` instead of `My$Module$foo`\n
  * Transcoding information is also produced separately for each module\n * Removed
  `--naked`, `--dispatcher`, and `--no-dispatcher`. They are probably not needed anymore\n
  * Removed `Fay$$fayToJsUserDefined` and `Fay$$jsToFayUserDefined`, instead call
  `Fay$$fayToJs` and `Fay$$jsToFay` respectively\n * Escape semi reserved words from
  `Object` when printing (`constructor` -> `$constructor`). This only matters if you
  call Fay from JS\n * `Automatic` now handles lists and tuples (#251)\n * `Language.Fay.FFI`
  renamed to `Fay.FFI` (as before, Fay code can import `FFI` from `fay-base`)\n\nMinor:\n
  * Print location of parse errors\n * Compile with -XNoImplicitPrelude\n * Support
  for testing nested modules (module A, module A.B)\n * Bump `language-ecmascript
  to >= 0.15` (new API)\n * Rename/remove some CompileErrors\n * All tests are now
  included in dist\n\nBug fixes:\n * Force cars in string serialization (#306)\n\n##
  0.15.0.0 (2013-06-08)\n * Expression level FFI calls, `ffi \"alert('hello!')\" ::
  Fay ()`\n * Support let pattern matches\n * Smaller output for serialization code\n
  * --base-path flag to use a custom base (mainly for fay-prim)\n * Allow ExistentialQuantification,
  FlexibleContexts, FlexibleInstances, KindSignatures\n * Verify that GADTs using
  non-record syntax works\n * JS->Fay function serialization\n * Serialization support
  for `()`, tuples and `Char`\n * Add more reserved words for Google Closure\n\nBugfixes:\n
  * Fix a bug when an imported module contains types\n * Fix a bug with EModuleContents
  exports\n * Fix where clause inside pattern guards in function definitions\n * Fix
  type variables in serialization for multiple constructors\n * Fix EThingAll exports
  for types with constructors with a different name\n * Don't export types in EThingAll
  and EThingWith\n\n\n### 0.14.5.0 (2013-04-24)\n* Support for newtypes (with no runtime
  cost!)\n* --base-path flag to specify custom locations for fay-base\n* Fix a bug
  where imports shadowing local bindings would prevent the local binding from being
  exported\n\n\n### 0.14.4.0 (2013-04-21)\n* Fix record updates on IE <= 8\n* Import
  tweaks, will make compilation a lot faster (4x reported) when there are a lot of
  imports\n* Parse hs sources with base fixities\n"
basic-deps:
  shakespeare: <2.1
  mtl-compat: ! '>=0.1 && <0.3'
  traverse-with-class: ! '>=1.0 && <1.1'
  bytestring: ! '>=0.9 && <0.11'
  data-lens-light: ==0.1.*
  split: ! '>=0.1 && <0.3'
  base: ! '>=4.9 && <4.12'
  time: ! '>=1.4 && <1.10'
  unordered-containers: ==0.2.*
  text: ! '>=0.11 && <1.3'
  syb: ! '>=0.3 && <0.8'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.1 && <1.7'
  uniplate: ! '>=1.6.11 && <1.7'
  data-default: ! '>=0.2 && <0.8'
  containers: ! '>=0.4 && <0.6'
  haskell-src-exts: ==1.20.*
  base-compat: ! '>=0.10 && <0.11'
  ghc-paths: ==0.1.*
  utf8-string: ! '>=0.1 && <1.1'
  language-ecmascript: ! '>=0.15 && <0.20'
  spoon: ! '>=0.1 && <0.4'
  mtl: ! '>=2.1 && <2.3'
  transformers: ! '>=0.3 && <0.6'
  optparse-applicative: ! '>=0.11 && <0.15'
  fay: -any
  aeson: ! '>0.6 && <1.5'
  safe: ! '>=0.2 && <0.4'
  transformers-compat: ! '>=0.3 && <0.7'
  vector: <0.13
  directory: ! '>=1.1 && <1.4'
  sourcemap: ==0.1.*
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.4.0.1'
- '0.4.0.4'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.6.0.0'
- '0.9.1.0'
- '0.9.2.0'
- '0.10.0.0'
- '0.10.1.0'
- '0.11.0.0'
- '0.12.0.0'
- '0.12.0.1'
- '0.14.0.0'
- '0.14.1.0'
- '0.14.2.0'
- '0.14.3.0'
- '0.14.4.0'
- '0.14.5.0'
- '0.15.0.0'
- '0.16.0.0'
- '0.16.0.1'
- '0.16.0.2'
- '0.16.0.3'
- '0.17.0.0'
- '0.18.0.0'
- '0.18.0.1'
- '0.18.0.2'
- '0.18.0.3'
- '0.18.0.4'
- '0.18.0.5'
- '0.18.1'
- '0.18.1.1'
- '0.18.1.2'
- '0.18.1.3'
- '0.19'
- '0.19.0.1'
- '0.19.0.2'
- '0.19.1'
- '0.19.1.1'
- '0.19.1.2'
- '0.19.2'
- '0.19.2.1'
- '0.20.0.0'
- '0.20.0.1'
- '0.20.0.2'
- '0.20.0.3'
- '0.20.0.4'
- '0.20.1.0'
- '0.20.1.1'
- '0.20.1.2'
- '0.20.1.3'
- '0.20.1.4'
- '0.20.2.0'
- '0.21.0.0'
- '0.21.0.1'
- '0.21.0.2'
- '0.21.1'
- '0.21.2'
- '0.21.2.1'
- '0.22.0.0'
- '0.23.0.0'
- '0.23.0.1'
- '0.23.1.0'
- '0.23.1.1'
- '0.23.1.2'
- '0.23.1.3'
- '0.23.1.4'
- '0.23.1.5'
- '0.23.1.6'
- '0.23.1.7'
- '0.23.1.8'
- '0.23.1.9'
- '0.23.1.10'
- '0.23.1.11'
- '0.23.1.12'
- '0.23.1.13'
- '0.23.1.14'
- '0.23.1.15'
- '0.23.1.16'
- '0.23.2.0'
- '0.24.0.0'
- '0.24.0.1'
author: Chris Done, Adam Bergmark
latest: '0.24.0.1'
description-type: markdown
description: ! '# Fay programming language


  [![Build Status](https://secure.travis-ci.org/faylang/fay.png?branch=master)](http://travis-ci.org/faylang/fay)


  We use the Github wiki for our home page and documentation: https://github.com/faylang/fay/wiki


  [Changelog](CHANGELOG.md)

'
license-name: BSD3
