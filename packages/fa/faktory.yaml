homepage: https://github.com/frontrowed/faktory_worker_haskell#readme
changelog-type: markdown
hash: e4a554365cbf07593abb6aefea53c5ffdc960c33350494993a623fbe5e99233a
test-bench-deps:
  base: ! '>=4.11 && <5'
  hspec: -any
  markdown-unlit: -any
  faktory: -any
  aeson: -any
maintainer: engineering@freckle.com
synopsis: Faktory Worker for Haskell
changelog: ! '## [*Unreleased*](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.0.0...master)


  None


  ## [v1.0.0.0](https://github.com/frontrowed/faktory_worker_haskell/tree/v1.0.0.0)


  Initial release.

'
basic-deps:
  bytestring: ! '>=0.1 && <1'
  aeson-casing: ! '>=0.1 && <1'
  unix: ! '>=2.7 && <3'
  base: ! '>=4.11 && <5'
  time: ! '>=1.8 && <2'
  text: ! '>=1.2 && <2'
  safe-exceptions: ! '>=0.1 && <1'
  megaparsec: ! '>=6.5 && <7'
  network: ! '>=2.6 && <3'
  connection: ! '>=0.2 && <1'
  memory: ! '>=0.1 && <1'
  faktory: -any
  cryptonite: ! '>=0.2 && <1'
  random: ! '>=1.1 && <2'
  scanner: ! '>=0.2 && <1'
  aeson: ! '>=1.3 && <2'
all-versions:
- 1.0.0.0
author: Freckle Engineering
latest: 1.0.0.0
description-type: markdown
description: ! "# faktory\\_worker\\_haskell\n\n[![CircleCI](https://circleci.com/gh/frontrowed/faktory_worker_haskell.svg?style=svg)](https://circleci.com/gh/frontrowed/faktory_worker_haskell)\n\nHaskell
  client and worker process for the Faktory background job server.\n\nArchitecture
  overview from [Ruby client README](https://github.com/contribsys/faktory_worker_ruby#readme):\n\n```\n
  \                      +--------------------+\n                       |                    |\n
  \                      |     Faktory        |\n                       |     Server
  \        |\n        +---------->>>>|                    +>>>>--------+\n        |
  \             |                    |            |\n        |              |                    |
  \           |\n        |              +--------------------+            |\n+-----------------+
  \                           +-------------------+\n|                 |                            |
  \                  |\n|    Client       |                            |     Worker
  \       |\n|    pushes       |                            |     pulls         |\n|
  \    jobs        |                            |      jobs         |\n|                 |
  \                           |                   |\n|                 |                            |
  \                  |\n+-----------------+                            +-------------------+\n```\n\n-
  Client - an API any process can use to push jobs to the Faktory server.\n- Worker
  - a process that pulls jobs from Faktory and executes them.\n- Server - the Faktory
  daemon which stores background jobs in queues to be\n  processed by Workers.\n\nThis
  package contains only the client and worker parts. The server part is\n[here](https://github.com/contribsys/faktory/)\n\n##
  Installation\n\nTODO.\n\n## Documentation\n\nSee the [wiki](//github.com/contribsys/faktory_worker_ruby/wiki)
  for more\ndetails.\n\n## Usage\n\n<!--\n```haskell\nimport Data.Aeson\nimport Prelude\nimport
  Faktory.Client\nimport Faktory.Job\nimport Faktory.Settings\nimport Faktory.Worker\nimport
  GHC.Generics\n\n{- Don't actually run anything -}\nmain :: IO ()\nmain = if True
  then pure () else (workerMain >> clientMain)\nworkerMain :: IO ()\nclientMain ::
  IO ()\n```\n-->\n\n### Job\n\nAny value can be a \"Job\" that is pushed and pulled
  to and from Faktory via its\n`ToJSON` and `FromJSON` instances:\n\n```haskell\nnewtype
  MyJob = MyJob\n  { myJobMessage :: String\n  }\n  deriving (Generic)\n\ninstance
  ToJSON MyJob\ninstance FromJSON MyJob\n```\n\n### Worker\n\n```haskell\nworkerMain
  = do\n  settings <- envSettings\n\n  runWorker settings $ \\job ->\n    -- Process
  your Job here\n    putStrLn $ myJobMessage job\n\n    -- If any exception is thrown,
  the job will be marked as Failed in Faktory\n    -- and retried. Note: you will
  not otherwise hear about any such exceptions,\n    -- unless you catch-and-rethrow
  them yourself.\n```\n\n### Client\n\n```haskell\nclientMain = do\n  settings <-
  envSettings\n  client <- newClient settings Nothing -- N.B. A WorkerId is not necessary
  if\n                                       -- only pushing Jobs.\n\n  jobId <- perform
  mempty client $ MyJob \"Hello world\"\n\n  print jobId\n\n  closeClient client\n```\n\n###
  Configuration\n\nWhen using `envSettings`, the following variables will be used:\n\n-
  `FAKTORY_QUEUE`: the name of the queue to consume from. This is Worker-only,\n  for
  `perform`, a non-default Queue should be given by the `queue` option\n- `FAKTORY_PROVIDER`:
  the name of another environment variable where the\n  connection string can be found.
  Defaults to `FAKTORY_URL`.\n- `FAKTORY_URL` (or whatever you named in `FAKTORY_PROVIDER`):
  connection string\n  to the Faktory server. Format is `tcp(+tls)://(:password@)host:port`.
  Defaults\n  to `tcp://localhost:4719`.\n\n## Examples\n\nSee the [examples](./examples).
  To run them:\n\n1. Run a local Faktory server\n\n   ```console\n   docker run --rm
  \\\n     --publish 7419:7419 \\\n     --publish 7420:7420 \\\n     contribsys/faktory\n
  \  ```\n\n1. Run the consumer example\n\n   ```console\n   % stack exec faktory-example-consumer\n
  \  Starting consumer loop\n   ```\n\n   (Assumes you've built the project.)\n\n1.
  Submit a Job through the producer example\n\n   ```console\n   % stack exec faktory-example-producer
  hello world\n   Pushed job: \"ljcjlbexbgun\"\n   ```\n\n   *NOTE*: if you submit
  \"BOOM\" as a Job, the processing loop will raise an\n   exception, so you can see
  how a Failed Job looks in Faktory.\n\n1. See that your Job was processed back in
  the consumer\n\n   ```console\n   % stack exec faktory-example-consumer\n   Starting
  consumer loop\n   hello world\n   ```\n\n## Development & Tests\n\n```console\nstack
  build --dependencies-only --test --no-run-tests\nstack build --pedantic --test --no-run-tests\nstack
  build --pedantic --test\n```\n\n*NOTE*: `FactorySpec` requires a local Faktory server
  is running, and it will\nflush all Jobs from this server as part of running the
  tests.\n\n---\n\n[CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)\n"
license-name: MIT
