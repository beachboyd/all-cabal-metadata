homepage: https://github.com//fast-combinatorics#readme
changelog-type: ''
hash: 22786f67902a4fa57a01450556d8234f29c40952fef35cc5829f3d3c2925e978
test-bench-deps:
  base: -any
  hspec: -any
  criterion: -any
  arithmoi: -any
  combinatorics: -any
  fast-combinatorics: -any
maintainer: vamchale@gmail.com
synopsis: Fast combinatorics.
changelog: ''
basic-deps:
  composition-prelude: -any
  base: ! '>=4.7 && <5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
author: Vanessa McHale
latest: '0.1.0.2'
description-type: markdown
description: ! "# fast-combinatorics\n\n[![Build Status](https://travis-ci.org/vmchale/fast-combinatorics.svg?branch=master)](https://travis-ci.org/vmchale/fast-combinatorics)\n\nThis
  is a library for fast combinatorics using ATS. You may need to download the \nrelevant
  ATS libraries\n[here](http://www.ats-lang.org/Downloads.html#Install_of_ATS2_include)
  if\nlinking fails.\n\nCurrently it is in-progress, being somewhat constrained by
  the fact that I have\nyet to figure out how to share arbitrary-precision types between
  ATS and Haskell.\n\n## Building\n\nThe Haskell library comes with the C bundled,
  however you may wish to build from\nsource if you are hacking on the library. To
  that end, you can install\n[stack](http://haskellstack.org/), [patscc](http://www.ats-lang.org/Downloads.html)
  , and\n[pats-filter](https://github.com/Hibou57/PostiATS-Utilities) and build with\n\n```bash\n
  $ ./shake.hs\n```\n\nYou will also likely want to install\n[GHC](https://www.haskell.org/ghc/download.html)
  as well as\n[cabal](https://www.haskell.org/cabal/).\n\n## Documentation\n\n###
  Using the ATS library\n\nOne of the nice things about a Haskell wrapper is that
  some of Haskell's\ntooling/libraries may be used. In particular, you may like to
  interact with the\nlibrary via a REPL, viz.\n\n```bash\n $ cabal new-repl\n```\n\n###
  Using the Haskell library\n\nYou may wish to read the ATS source code for an indication
  of what sorts of\nthings ATS allows us to prove things about our programs, such
  as proofs of\ntermination.\n\nThere are also a few caveats: note that all results
  and arguments\nmust be of the `Int` type. This unfortunate constraint will hopefully
  be fixed\nin the future, but right now it limits the usefulness of the library.\n"
license-name: BSD3
