homepage: https://github.com//fast-combinatorics#readme
changelog-type: ''
hash: 5b13b02b3619f1059648d02bf036d9f14cf834d428ee1eba17944dee86408988
test-bench-deps:
  base: -any
  hspec: -any
  criterion: -any
  fast-combinatorics: -any
maintainer: vamchale@gmail.com
synopsis: Fast combinatorics.
changelog: ''
basic-deps:
  composition-prelude: ! '>=0.1.1.4'
  base: ! '>=4.7 && <5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
author: Vanessa McHale
latest: '0.1.0.6'
description-type: markdown
description: ! "# fast-combinatorics\n\n[![Build Status](https://travis-ci.org/vmchale/fast-combinatorics.svg?branch=master)](https://travis-ci.org/vmchale/fast-combinatorics)\n\nThis
  is a library for fast combinatorics using ATS. As such, make sure\na C compiler
  is installed. It may not work on windows, so if you run into bugs\nbuilding this
  please open an issue.\n\nCurrently it is a work-in-progress, being somewhat constrained
  by the fact that I have\nyet to figure out how to share arbitrary-precision types
  between ATS and Haskell.\n\n## Benchmarks\n\n| Computation | Version (ATS/Haskell)
  | Time |\n| ----------- | --------------------- | ---- |\n| `12!` | ATS | 9.301
  ns |\n| `12!` | Haskell | 27.84 ns |\n| ``13 `choose` 4`` | ATS | 12.28 ns |\n|
  ``13 `choose` 4`` | Haskell | 28.38 ns |\n| `isPrime 2017` | ATS | 118.9 ns |\n|
  `isPrime 2017` | Haskell | 497.3 ns |\n| `3 ^ 7` | ATS | 9.050 ns |\n| `3 ^ 7` |
  Haskell | 37.02 ns |\n\n## Building\n\nThe Haskell library comes with the C bundled,
  however you may wish to build from\nsource if you are hacking on the library. To
  that end, you can install\n[stack](http://haskellstack.org/), [patscc](http://www.ats-lang.org/Downloads.html),
  and\n[pats-filter](https://github.com/Hibou57/PostiATS-Utilities) and build with\n\n```bash\n
  $ ./shake.hs\n```\n\nYou will also likely want to install\n[GHC](https://www.haskell.org/ghc/download.html)
  as well as\n[cabal](https://www.haskell.org/cabal/).\n\n## Documentation\n\n###
  Using the ATS library\n\nOne of the nice things about a Haskell wrapper is that
  some of Haskell's\ntooling/libraries may be used. You may want to try the REPL:\n\n```bash\n
  $ cabal new-repl\n```\n\n### Using the Haskell library\n\nYou may wish to read the
  ATS source code for an indication of what sorts of\nthings ATS allows us to prove
  things about our programs, particularly proofs of\ntermination.\n\nThere are also
  a few caveats: note that all results and arguments\nmust be of the `Int` type. This
  unfortunate constraint will hopefully be fixed\nin the future, but right now it
  limits the usefulness of the library.\n"
license-name: BSD3
