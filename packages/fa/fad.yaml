homepage: http://github.com/bjornbm/fad
changelog-type: ''
hash: e18c0944925e935d47beffaf3ebe260c0dd67930c10e470935c9319b34686dc9
test-bench-deps: {}
maintainer: bjorn.buckwalter@gmail.com
synopsis: Forward Automatic Differentiation.
changelog: ''
basic-deps:
  base: <5
all-versions:
- '1.0'
- 1.1.0.1
author: Barak A. Pearlmutter and Jeffrey Mark Siskind
latest: 1.1.0.1
description-type: text
description: ! "   Copyright  : 2008-2009, Barak A. Pearlmutter and Jeffrey Mark Siskind\n
  \  License    : BSD3\n\n   Maintainer : bjorn.buckwalter@gmail.com\n   Stability
  \ : experimental\n   Portability: GHC only?\n\nForward Automatic Differentiation
  via overloading to perform\nnonstandard interpretation that replaces original numeric
  type with\ncorresponding generalized dual number type.\n\nEach invocation of the
  differentiation function introduces a\ndistinct perturbation, which requires a distinct
  dual number type.\nIn order to prevent these from being confused, tagging, called\nbranding
  in the Haskell community, is used.  This seems to prevent\nperturbation confusion,
  although it would be nice to have an actual\nproof of this.  The technique does
  require adding invocations of\nlift at appropriate places when nesting is present.\n\nFor
  more information on perturbation confusion and the solution\nemployed in this library
  see:\n<http://www.bcl.hamilton.ie/~barak/papers/ifl2005.pdf>\n<http://thread.gmane.org/gmane.comp.lang.haskell.cafe/22308/>\n\n\nInstallation\n============\nTo
  install:\n    cabal install\n\nOr:\n    runhaskell Setup.lhs configure\n    runhaskell
  Setup.lhs build\n    runhaskell Setup.lhs install\n\n\nExamples\n========\nDefine
  an example function 'f':\n\n> import Numeric.FAD\n> f x = 6 - 5 * x + x ^ 2  --
  Our example function\n\nBasic usage of the differentiation operator:\n\n> y   =
  f 2              -- f(2) = 0\n> y'  = diff f 2         -- First derivative f'(2)
  = -1\n> y'' = diff (diff f) 2  -- Second derivative f''(2) = 2\n\nList of derivatives:\n\n>
  ys = take 3 $ diffs f 2  -- [0, -1, 2]\n\nExample optimization method; find a zero
  using Newton's method:\n\n> y_newton1 = zeroNewton f 0   -- converges to first zero
  at 2.0.\n> y_newton2 = zeroNewton f 10  -- converges to second zero at 3.0.\n\n\nCredits\n=======\nAuthors:
  Copyright 2008,\nBarak A. Pearlmutter <barak@cs.nuim.ie> &\nJeffrey Mark Siskind
  <qobi@purdue.edu>\n\nWork started as stripped-down version of higher-order tower
  code\npublished by Jerzy Karczmarczuk <jerzy.karczmarczuk@info.unicaen.fr>\nwhich
  used a non-standard standard prelude.\n\nInitial perturbation-confusing code is
  a modified version of\n<http://cdsmith.wordpress.com/2007/11/29/some-playing-with-derivatives/>\n\nTag
  trick, called \"branding\" in the Haskell community, from\nBjorn Buckwalter <bjorn.buckwalter@gmail.com>\n<http://thread.gmane.org/gmane.comp.lang.haskell.cafe/22308/>\n"
license-name: BSD-3-Clause
