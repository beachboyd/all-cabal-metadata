homepage: ''
changelog-type: markdown
hash: 807c69cadd3d60a232f70ef37ab2f30ae398207315f7045c61b98fe433820ed2
test-bench-deps: {}
maintainer: erick@codemonkeylabs.de
synopsis: A 'Failable' error monad class to unify failure across monads that can fail
changelog: |
  # Changelog for failable

  ## Unreleased changes
basic-deps:
  base: ! '>=4.8 && <5'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4.2 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 1.0.0.0
- 1.1.0.0
author: Erick Gonzalez
latest: 1.1.0.0
description-type: markdown
description: "# Control.Monad.Failable\n#### Yet another \"error\" handling monad
  (class)\n\nThis library provides a 'Failable' error monad class to unify failure
  across monads and\ntransformers most commonly used to implement pipelines that can
  fail.\n\n*But.. don't we have 'MonadFail', 'MonadThrow', 'MonadError',.. and the
  true haskeller should be \nusing 'Alternative' anyway!*\n\nI am sure a lot of ink
  has been spilled in forums and around water coolers all around the world, \ndebating
  the merits and fallacies of one approach or the other. The reason for this package
  is not\nto participate in this discussion but rather to provide a simple no nonsense
  means of signaling a \ncomputation \"failure\" in those monads that provide the
  inherent means to do so, and to do it in a\nconsistent manner\n\n## Usage\n\n```haskell\n\ndata
  FooError = NotImplemented deriving (Typeable, Show)\n\ninstance Exception FooError\n\nfoo
  :: (Failable m) => m Int\nfoo = failure NotImplemented\n```\n\nNow, if one called
  `foo` in a `Maybe monad`:\n\n    > foo :: Maybe Int\n    > Nothing\n\nthe failure
  is then conveyed by returning `Nothing` as per definition of the `Maybe` monad.
  Now in the case of the `Either SomeException` monad:\n\n    > foo :: Either SomeException
  Int\n    > Left NotImplemented\n\nbut what if we are working in the `IO` monad?\n\n
  \   > foo :: IO Int\n    > * * * Exception: NotImplemented\n\nIn this case, the
  failure can only be conveyed by throwing an IO exception.\n\nNow, the point where
  `Failable` diverges from say `MonadThrow` for example is when it comes to monad\ntransformers.
  For example:\n\n    > runMaybeT foo :: IO (Maybe Int)\n\nWould throw an `Exception:
  NotImplemented` if it was implemented in a `MonadThrow` context. Since\nthe reason
  d'etre for the runMaybeT is to provide the underlying monad (transformer) with `Maybe`
  like behaviour, i.e. have `Nothing` be returned in case of aborting the `Maybe`
  pipeline so to speak, then throwing an exception defeats IMHO the purpose of using
  `MaybeT` in the first place. So, in the\ncase of `Failable`:\n\n    > runMaybeT
  foo :: IO (Maybe Int)\n    > Nothing\n\nAnd the same thing applies to `runExceptT`
  etc. \n\n## The IO problem\n\nOne of the most common complaints about error monads
  is that they erroneously give the impression that if the user deals with the returned
  failed condition (i.e. `Nothing` or `Left <SomeError>` for `Maybe(MaybeT)` or `Either(ExceptT)`
  respectively) the job is done and the code is now \"safe\", when in reality all
  one has done is opened up an additional error \"path\" on top of IO exceptions.
  Regarldess of one's position on IO exceptions, truth is they are not going to go
  away.. probably _ever_. So one has to find a way to live with them\nin the best
  possible manner. To this effect, this library offers a utility function `failableIO`.
  This function can be used if the Failable monad is also an instance of MonadIO and
  it lifts an IO operation into the monad but in the event of an IO error, it returns
  this as a failure in the right context. So for example:\n\n```haskell\nfoo :: (Failable
  m, MonadIO m) => m ()\nfoo = do\n  failableIO $ do\n    txt <- readFile \"foo.txt\"\n
  \   putStrLn txt\n```\n\n    > runExceptT foo\n    > Left foo.txt: openFile: does
  not exist (No such file or directory)\n\n    > runMaybeT foo\n    > Nothing\n\nbut
  if ran directly on IO:\n\n    > foo\n    > *** Exception: foo.txt: openFile: does
  not exist (No such file or directory)\n\nIMHO this is an improvement from having
  `foo` fail with an IO exception _or_ a failure value depending on the context.\n"
license-name: BSD-3-Clause
