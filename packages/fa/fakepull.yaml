homepage: https://github.com/igrep/haskell-fakepull#readme
changelog-type: markdown
hash: 25ca6a012e10cd89aeee80b5fc4f69cfc63741bb2b43ffb60e3f18104ff26a1c
test-bench-deps:
  exceptions: -any
  base: '>=4.7 && <5'
  hspec: -any
  fakepull: -any
  mtl: -any
  QuickCheck: -any
maintainer: whosekiteneverfly@gmail.com
synopsis: Monad to pull from fake stream-like objects.
changelog: |
  # Changelog for fakepull

  ## 0.0.1.0 (2020-09-05)

  Initial Release
basic-deps:
  exceptions: -any
  base: '>=4.7 && <5'
  mtl: -any
all-versions:
- 0.3.0.1
author: YAMAMOTO Yuji
latest: 0.3.0.1
description-type: markdown
description: "# fakepull\n\nMonad to pull from fake stream-like objects.\n\n## Example\n\nSometimes
  you might want to test a function that uses an HTTP client object to\nget responses
  from some web server, without actually making the HTTP requests.\n\n```haskell\n--
  BEGINNING OF EXAMPLE\n\nimport Control.Monad.IO.Class\nimport Data.IORef\nimport
  Data.Maybe\nimport Test.Hspec\nimport Test.Pull.Fake.IO\n\n\ndata Request = Request\n
  \ { searchTerm :: String\n  , pageSize :: Int\n  , cursor :: Maybe String\n  } deriving
  (Eq, Show)\n\n\ndata Response = Response\n  { searchResult :: [String]\n  , nextCursor
  :: Maybe String\n  } deriving (Eq, Show)\n\n\n-- | The function you test.\n--   Call
  `sendRequest` repeatedly to get all paginated search results using\n--   the cursor.\nfetchAllPages
  :: MonadIO m => (Request -> m Response) -> String -> m [String]\nfetchAllPages sendRequest
  term = go [] (Request term 3 Nothing)\n where\n  go accum req = do\n    res <- sendRequest
  req\n    let newAccum = accum ++ searchResult res\n    case nextCursor res of\n
  \       Just cur -> do\n          let newReq = req { cursor = Just cur }\n          go
  newAccum newReq\n        Nothing -> return newAccum\n\n\n-- | The function to make
  an HTTP request actually. Will be stubbed.\nsendRequestActually :: Request -> IO
  Response\nsendRequestActually = error \"This function should be stubbed!\"\n\n--
  | Simulate the `sendRequest` function that returns a different result every\n--
  \  time.\nstubbedSendRequest :: FakeStream Response -> Request -> IO Response\nstubbedSendRequest
  stream _request =\n  -- NOTE: You may want to validate the request argument for
  testing.\n  --       I've omitted that for simplicity here.\n  fromJust <$> pull
  stream\n\n\nmain :: IO ()\nmain = hspec $\n  describe \"fetchAllPages\" $\n    it
  \"collect all results by sending requests\" $ do\n      let allResponses =\n            [
  Response [\"result 1-1\", \"result 1-2\", \"result 1-3\"] $ Just \"cursor a\"\n
  \           , Response [\"result 2-2\", \"result 2-2\", \"result 2-3\"] $ Just \"cursor
  b\"\n            , Response [\"result 3-1\"] Nothing\n            ]\n\n      responsesToReturn
  <- newFakeStream allResponses\n      fetchAllPages (stubbedSendRequest responsesToReturn)
  \"result\" \n        `shouldReturn` concatMap searchResult allResponses\n\n-- END\n```\n\n##
  Related package\n\n- [fakefs](http://hackage.haskell.org/package/fakefs)\n    -
  This package is a variant of fakefs for stream-like objects.\n"
license-name: Apache-2.0
