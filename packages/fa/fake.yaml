homepage: https://github.com/mightybyte/fake
changelog-type: markdown
hash: b7eb3324481dc119ae97e2d1015d423affd416d294601cf3e607e990981257d7
test-bench-deps:
  base: -any
  time: -any
  hspec: ! '>=2.4 && <2.5'
  text: -any
  random: -any
maintainer: mightybyte@gmail.com
synopsis: Randomly generated fake data
changelog: ! '# Revision history for fake


  ## 0.1.1  -- 2018-04-18


  * Use 1000 most common female, male, and last names


  * Export various person lists


  * Fix bugs in fakeCapitalLetter and firefoxUserAgent


  ## 0.1  -- 2018-03-14


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.6 && <4.12'
  time: ! '>=1.4 && <1.10'
  text: ! '>=1.2 && <1.3'
  containers: ! '>=0.5 && <0.6'
  random: ! '>=1.1 && <1.2'
  generics-sop: ! '>=0.2 && <0.4'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.1.1'
author: Doug Beardsley
latest: '0.1.1.1'
description-type: markdown
description: ! "# Fake\n\n[![Build Status](https://travis-ci.org/mightybyte/fake.svg?branch=master)](https://travis-ci.org/mightybyte/fake)\n\nFake
  is a Haskell package for generating realistic-looking fake data.\n\n## Overview\n\nThe
  package has three main components:\n\n1. Analogs to QuickCheck's\n   [Arbitrary](http://hackage.haskell.org/package/QuickCheck-2.11.3/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary)\n
  \  and\n   [Gen](http://hackage.haskell.org/package/QuickCheck-2.11.3/docs/Test-QuickCheck-Gen.html#t:Gen)\n
  \  that use realistic probability distributions rather than the more uniform\n   distributions
  used by QuickCheck.\n1. A [generic coverage function](src/Fake/Cover.hs#L114)\n
  \  that generates [full constructor coverage](test/Main.hs#L32)\n   over a data
  type.\n1. A [suite of providers](src/Fake/Provider)\n   for common types of data
  such as names, addresses, phone numbers, ID\n   numbers, etc.\n\nFake's `gcover`
  function is particularly useful with the [armor\npackage](https://github.com/mightybyte/armor)
  for ensuring that all\nconstructors of your data types are tested for backwards
  compatible\nserializations without having to write all the values yourself.  This
  allows\nyou to get higher confidence that you have covered most of the important
  cases\nwithout the combinatorial explosion of exhaustive testing.\n\n## Credits\n\nOriginal
  inspiration came from the production needs of\n[Formation](http://formation.ai/)
  (previously Takt).\n\nProviders and other details were inspired by similar packages
  in\n[Python](https://github.com/joke2k/faker) and\n[Ruby](https://github.com/stympy/faker).
  \ \n"
license-name: BSD3
