homepage: https://github.com/psibi/fakedata#readme
changelog-type: markdown
hash: 323e170281fea277202867cfdc79a415fc66f3b8e1245532720e207e785b1dbe
test-bench-deps:
  exceptions: -any
  bytestring: -any
  base: '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  string-random: -any
  filepath: -any
  gauge: -any
  fakedata: -any
  containers: -any
  hashable: -any
  random: -any
  deepseq: -any
  hspec-discover: -any
  template-haskell: -any
  yaml: -any
  vector: -any
  directory: -any
maintainer: sibi@psibi.in
synopsis: Library for producing fake data
changelog: "# Changelog for fakedata\n\n## 0.7.0\n\n* Add support for regex fake value
  generation. Useful for postcode\n  functions for different locales.\n* Improve documentation
  of Faker.Combinators.\n* `de-CH` locale update: `lastName` function works now.\n*
  New function in Faker.Music.Phish module: albums, musicians\n* New function in Faker.Address:
  cityWithState\n* New function in Faker.Movie: title\n\n### Data Update\n\nThe following
  data sources which the libraries uses has been updated:\n\n* heroes_of_the_storm.yml\n*
  house.yml\n* name.yml\n* one_piece.yml\n\n### New modules introduced\n\n* Faker.Blood\n*
  Faker.Chiquito\n* Faker.Computer\n* Faker.Game.Control\n* Faker.Movie.Departed\n*
  Faker.Dnd\n* Faker.Music.PearlJam\n* Faker.Rajnikanth\n* Faker.Show\n* Faker.TvShow.Suits\n*
  Faker.WarhammerFantasy\n\n### Locale Improvements\n\n* en-AU: \n  - Locale has updated
  which leads to working of newer functions:\n    Faker.Name.prefix, Faker.University.name,
  Faker.Bank.name\n* en-CA: Faker.Address.postcode works now.\n* en-GB: formats field
  has been updated.\n* fr-CA: Faker.Address.postcode works now.\n* ko: Supports Faker.Commerce
  moudle now.\n  \n### Breaking changes\n\n* Faker.Music.Phish module:\n  - Rename
  `song` function to `songs`\n\n## 0.6.1\n\n* Add `Semigroup` and `Monoid` instances
  to `Fake`\n* Doc fix: Remove broken links\n\n## 0.6.0\n\n* Fix API for \"ar\" locale.
  Add test coverage.\n* Bug fixed in the following locales: `ca`, `bg`, `da-DK`,\n
  \ `en-NEP`, `en-ZA`, `fr-CA`, `fr-CH`, `fr`, `hy`, `id`, `ja`, `pt`,\n  `uk`, `zh-CN`,
  `zh-TW`\n* New function to Address module: `mailBox`\n* Update in following data
  sources:\n  - en/color.yml\n  - en-NZ.yml\n  - en/overwatch.yml\n  - en/phone_number.yml\n
  \ - en/shakespeare.yml\n  - fa.yml\n  - pt-BR.yml\n* New function in Educator module:
  `degree`, `courseName`\n* New function in Gender module: `shortBinaryTypes`\n\n###
  Breaking changes\n\n* Educator module:\n  - Rename `tertiaryDegreeSubject` to `subject`\n
  \ - Rename `name` function to `schoolName`\n  - Rename `tertiaryType` function to
  `tertiaryUniversityType`.\n\n## 0.5.0\n\n* Move remaining internal modules into
  other-module: Config, Faker.TH\n\n## 0.4.0\n\n* Move Provider modules into other-modules.
  This makes the haddock\n  much more readable.\n* Update to various `en` data sources:
  color.yml, super_smash_bros.\n* Fix name of FakerTvShow.DrWho module: villains (from
  villians).\n* New locale addition: en-TH, th\n* Modification of other locales: fr-CA,
  ja\n\n## 0.3.1\n\n* Make it compatbile with ghc-8.8.1\n\n## 0.3.0\n\n* Update fake
  data source\n* Improve performance and add test coverage\n* Fix various bugs\n*
  Add `brands` function to the module Faker.Cannabis\n\n## 0.2.2\n\n* Add meepoQuote
  function to the module Faker.Game.Dota\n* Add Faker.Music.Opera module\n* Update
  fake data source\n\n## 0.2.1\n\n* Fix bug in Book module\n\n## 0.2.0\n\n* Add sicCode
  function in Company module\n* New Construction module\n* New Basketball module\n*
  New Horse module\n* New Finance module\n* Move Football under Sport module\n* Bug
  fixes in some file formats\n* Fix bugs in the Creature module\n* Add Development.md
  for new contributors\n\n## 0.1.0.0\n\nInitial version released\n"
basic-deps:
  exceptions: -any
  bytestring: -any
  base: '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  string-random: -any
  filepath: -any
  containers: -any
  hashable: -any
  random: -any
  template-haskell: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.7.0
author: Sibi Prabakaran
latest: 0.7.0
description-type: markdown
description: |
  ![fakedata](https://user-images.githubusercontent.com/737477/53658993-54575200-3c80-11e9-9125-fbcf9e54660f.png)
  [![Hackage](https://img.shields.io/hackage/v/fakedata.svg)](https://hackage.haskell.org/package/fakedata)
  [![Stackage
  Nightly](http://stackage.org/package/fakedata/badge/nightly)](http://stackage.org/nightly/package/fakedata)
  [![Stackage
  LTS](http://stackage.org/package/fakedata/badge/lts)](http://stackage.org/lts/package/fakedata)
  [![Build Status](https://dev.azure.com/psibi2000/fakedata/_apis/build/status/psibi.fakedata?branchName=master)](https://dev.azure.com/psibi2000/fakedata/_build/latest?definitionId=7&branchName=master)

  -   [Fakedata](#fakedata)
      -   [Tutorial](#tutorial)
          -   [Generating address](#generating-address)
          -   [Generating name](#generating-name)
          -   [Generate quotes from the movie Back to the Future](#generate-quotes-from-the-movie-back-to-the-future)
          -   [Combining Fake datas](#combining-fake-datas)
          -   [Combinators](#combinators)
      -   [Comparision with other
          libraries](#comparision-with-other-libraries)
      -   [Acknowledgments](#acknowledgments)

  fakedata
  ========

  This library is a port of Ruby's
  [faker](https://github.com/stympy/faker). It's a library for producing
  fake data such as names, addressess and phone numbers. Note that it
  directly uses the source data from that library, so the quality of
  fake data is quite high!

  Tutorial
  --------

  ### Generating address

  ``` {.shellsession}
  ~/g/fakedata (master) $ stack ghci
  λ> import Faker.Address
  λ> address <- generate fullAddress
  λ> address
  "Suite 153 153 Langosh Way, East Antony, MI 15342-5123"
  ```

  ### Generating name

  ``` {.shellsession}
  λ> fullName <- generate name
  λ> fullName
  "Antony Langosh"
  ```

  ### Generate quotes from the movie [Back to the Future](https://en.wikipedia.org/wiki/Back_to_the_Future)

      λ> import Faker.Movie.BackToTheFuture
      λ> import Faker.Combinators
      λ> qs <- generate $ listOf 5 quote
      λ> qs
      [ "Yes. Yes. I'm George. George McFly. I'm your density. I mean, your destiny."
      , "Hello? Hello? Anybody home? Huh? Think, McFly. Think! I gotta have time to get them retyped. Do you realize what would happen if I hand in my reports in your handwriting? I'll get fired. You wouldn't want that to happen, would ya? Would ya?"
      , "Lorraine. My density has brought me to you."
      , "See you in about 30 years."
      , "You really think I ought to swear?"
      ]

  ### Combining Fake datas

  ``` {.haskell}
  {-#LANGUAGE RecordWildCards#-}

  import Faker
  import Faker.Name
  import Faker.Address
  import Data.Text

  data Person = Person {
      personName :: Text,
      personAddress :: Text
  } deriving (Show, Eq)

  fakePerson :: Fake Person
  fakePerson = do
      personName <- name
      personAddress <- fullAddress
      pure $ Person{..}

  main :: IO ()
  main = do
      person <- generate fakePerson
      print person
  ```

  And on executing them:

      $ stack name.hs
      Person
        { personName = "Antony Langosh"
        , personAddress = "Suite 599 599 Brakus Flat, South Mason, MT 59962-6876"
        }

  You would have noticed in the above output that the name and address are
  the same as generated before in the GHCi REPL. That's because, by
  default all the generated data are deterministic. If you want a
  different set of output each time, you would have to modify the random
  generator output:

      main :: IO ()
      main = do
          gen <- newStdGen
          let settings = setRandomGen gen defaultFakerSettings
          person <- generateWithSettings settings fakePerson
          print person

  And on executing the program, you will get a different output:

  ``` {.shellsession}
  Person
    { personName = "Ned Effertz Sr."
    , personAddress = "Suite 158 1580 Schulist Mall, Schulistburgh, NY 15804-3392"
    }
  ```

  The above program can be even minimized like this:

  ``` {.haskell}
  main :: IO ()
  main = do
      let settings = setNonDeterministic defaultFakerSettings
      person <- generateWithSettings settings fakePerson
      print person
  ```

  ### Combinators

  #### listOf

  ``` {.haskell}
  λ> import Faker.Address
  λ> item <- generate $ listOf 5 country
  λ> item
  ["Ecuador","French Guiana","Faroe Islands","Canada","Armenia"]
  ```

  #### oneOf

  ``` {.haskell}
  λ> item <- generate $ oneof [country, fullAddress]
  λ> item
  "Suite 599 599 Brakus Flat, South Mason, MT 59962-6876"
  ```

  #### suchThat

  ``` {.shellsession}
  λ> import qualified Faker.Address as AD
  λ> item :: Text <- generate $ suchThat AD.country (\x -> (T.length x > 5))
  λ> item
  "Ecuador"
  λ> item :: Text <- generate $ suchThat AD.country (\x -> (T.length x > 8))
  λ> item
  "French Guiana"
  ```

  For seeing the full list of combinators, see the module documentation of
  `Faker.Combinators`.

  Comparision with other libraries
  --------------------------------

  There are two other libraries in the Hackage providing fake data:

  -   [faker](https://hackage.haskell.org/package/faker-0.0.0.2)
  -   [fake](https://hackage.haskell.org/package/fake-0.1.1.1)

  The problem with both the above libraries is that the library covers
  only a very small amount of fake data source. I wanted to have an
  equivalent functionality with something like
  [faker](https://github.com/stympy/faker). Also, most of the
  combinators in this packages has been inspired (read as taken) from
  the `fake` library. Also, `fakedata` offers fairly good amount of
  support of different locales. Also since we rely on an external data
  source, we get free updates and high quality data source with little
  effort. Also, it's easier to extend the library with [it's own data
  source](https://github.com/psibi/fakedata/blob/master/Development.md#custom-fake-source-support-with-yml-file)
  if we want to do it that way.

  Acknowledgments
  ---------------

  Benjamin Curtis for his [Ruby faker
  library](https://github.com/stympy/faker) from which the data source is
  taken from.

  Icons made by [Freepik](https://www.flaticon.com/authors/freepik) from
  [Flaticon](https://www.flaticon.com/).
license-name: BSD-3-Clause
