homepage: https://github.com/faylang/fay-text
changelog-type: markdown
hash: c66ac5d4a129f7fbe3e40420a258e482ee4cadf5ba782f210e7fe595d5b9917f
test-bench-deps: {}
maintainer: adam@bergmark.nl
synopsis: Fay Text type represented as JavaScript strings
changelog: ! '## Changelog


  #### 0.3.2.2 (2015-02-11)


  * Allow `fay 0.23.*`

  * Allow `fay-base 0.20.*`


  #### 0.3.2.1 (2015-01-05)


  * Allow `fay 0.22.*`.


  ### 0.3.2 (2014-10-21)


  * fay-text is now purely a compatibility layer between Fay and GHC. For Fay we reexport
  `Data.Text` from fay-base.


  ### 0.3.1 (2014-10-11)


  * Allow `fay 0.21`


  #### 0.3.0.2 (2014-04-29)


  * Allow `fay 0.20`


  #### 0.3.0.1 (2014-01-14)


  * Fix complation warnings


  ## 0.3 (2013-11-07)


  * Add Ord instance for Text (okay because JS comparison operators work on the values)

  * Make Text an EmptyDataDecl


  ## 0.2.0.0 (2013-09-24)


  * Added a (large) subset of functions from `Data.Text`. These use the FFI so they
  should be pretty fast.

  * Added `Eq` instance for `Text`.

  * The `Text` type has been moved to `Fay.Text.Type` (re-exported by `Fay.Text`)
  in case you only want the type.


  ## 0.1.0.0 (2013-08-27)


  * Initial release

'
basic-deps:
  text: <1.3
  fay: ! '>=0.21.2 && <0.25'
  fay-base: ! '>=0.19.4 && <0.22'
all-versions:
- 0.1.0.0
- 0.2.0.0
- '0.3'
- 0.3.0.1
- 0.3.0.2
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.2.2
author: Michael Snoyman, Adam Bergmark
latest: 0.3.2.2
description-type: markdown
description: ! '[Changelog](CHANGELOG.md)


  fay-text provides a Text whose values are represented as JavaScript strings for
  Fay, and as `Data.Text` for GHC. You can use this package instead of directly depending
  on `text` if you want to.


  Fay has a special case that''s applicable for `fay-text`. If a file has `{-# LANGUAGE
  OverloadedStrings #-}` GHC will replace all string literals with `fromString lit`.
  `{-# LANGUAGE RebindableSyntax #-}` tells GHC to use the `fromString` currently
  in scope instead of `Data.String.fromString`. With these two extensions enabled
  Fay outputs all string literals as JavaScript strings, which is the same representation
  as `Fay.Text` uses.


  Note that you can mix modules using text literals and string literals, the behavior
  is local to the module.

'
license-name: MIT
