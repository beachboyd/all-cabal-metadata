homepage: ''
changelog-type: text
hash: 92f2e8769ae12232727d7d8b773f9aac924f3c9324935690a5096efc6289fe35
test-bench-deps:
  base: -any
  hspec: ! '>=2.1 && <2.7'
  microbench: -any
  containers: -any
  fgl: -any
  deepseq: -any
  QuickCheck: ! '>=2.8 && <2.13'
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Martin Erwig's Functional Graph Library
changelog: ! "5.7.0.1\n-------\n\n* Accidentally released the wrong version.\n\n5.7.0.0\n-------\n\n*
  Updating the GraphM class to be compatible with the MonadFail proposal and GHC's\n
  \ MonadFailDesugaring language extension which is enabled by default by GHC-8.6.1.\n\n5.6.0.0\n-------\n\n*
  The previous version should have been a major version bump due to\n  the API change.\n\n5.5.4.0\n-------\n\n*
  Improved type safety of shortest-path functions (in\n  `Data.Graph.Inductive.Query.SP`)
  thanks to Nathan Collins.\n\n    - `getDistance`, `spLength` and `sp` now return
  `Maybe` values.\n\n* Fixed building on GHC < 7.4; previously uncaught due to\n  cabal-install
  doing the wrong thing on Travis-CI.\n\n\n5.5.3.1\n-------\n\n* Hopefully clearer
  documentation for `&`, `Context` and the\n  `ufold`-based functions.\n\n* Thanks
  to David Feuer, the existing benchmark suite is now runnable\n  with `cabal bench`.\n\n*
  Some performance improvements for `PatriciaTree`, thanks to David\n  Feuer.\n\n5.5.3.0\n-------\n\n*
  Additional closure functions by Matthew Danish.\n\n* `Bifunctor` instances for base
  >= 4.8.0.0.\n\n* An `ST`-based `GraphM` instance.\n\n* Addition of `order` and `size`
  functions for finding the number of\n  nodes and edges respectively in a graph (the
  former is an alias for\n  the existing `noNodes` function).\n\n* The rules for faster
  implementations of `insNode` and `insEdge` for\n  `PatriciaTree` should fire more
  often now.\n\n5.5.2.3\n-------\n\n* Earlier fix for `NFData` wasn't quite complete/correct.\n\n5.5.2.2\n-------\n\n*
  Ensure firing of specialised rules for `PatriciaTree`.\n\n* Better way of only creating
  `NFData` instances when possible.\n\n5.5.2.1\n-------\n\n* Only create `NFData`
  instances for GHC >= 7.4.1.\n\n5.5.2.0\n-------\n\n* Documentation, clean-up and
  refactoring of various parts of the\n  library.\n\n    - As part of this, various
  types now have instances for classes\n      like `Show`, `Eq`, `Ord`, `NFData`,
  etc. where applicable.\n\n    - In particular, the various options for use with
  depth-first\n      search and shortest path queries was documented by David\n      Luposchainsky.\n\n*
  Addition of a proper test-suite.  So far it covers the\n  `Data.Graph.Inductive.Graph`
  module and all\n  `Data.Graph.Inductive.Query.*` modules except for `Monad`.\n\n
  \   - The tests are also automatically run for every (set of) commits\n      thanks
  to Travis-CI.\n\n* Arbitrary instances for the two graph types are now available
  in the\n  new `fgl-arbitrary` sub-package.\n\n* Now depends solely on the `transformers`
  library rather than `mtl`.\n\n* Potentially breaking changes:\n\n    These changes
  are those where the behaviour was un-specified or\n    didn't match the documentation.\n\n
  \   - `nodeRange` and `nodeRangeM` for the various graph data\n      structures
  erroneously returned `(0,0)` for empty graphs (making\n      them indistinguishable
  from graphs containing the single node\n      `0`).  They now match the default
  implementation of throwing an\n      error.\n\n    - The behaviour of `delLEdge`
  when dealing with multiple edges was\n      unspecified; it now deletes only a single
  edge and the new\n      function `delAllLEdge` deletes all edges matching the one\n
  \     provided.\n\n* Additional functions thanks to Sergiu Ivanov:\n\n    - Creating
  sub-graphs by `Node`- and `Context`-filtering as well\n      as induced by a set
  of `Node`s.\n\n    - Graph condensation (i.e. graph of\n      strongly-connected-components).\n\n
  \   - Various edge- and neighbor-based helper functions.\n\n* The graph types now
  have `Generic` instances thanks to Piotr\n  Mlodawski.\n\n* The `OrdGr` wrapper
  by Trevor Cook allows performing `Ord`-based\n  comparisons on graphs.\n\n5.5.1.0\n-------\n\n*
  Support added for GHC 7.10 by Herbert Valerio Riedel.\n\n* Additional DFS query
  functions added by Conrad Parker.\n\n* Repository location changed to GitHub.\n\n*
  Code cleanup:\n\n    - Replaced usage of internal FiniteMap copy with Data.Map and\n
  \     Data.Set from the containers library.\n\n    - Remove usage of data type contexts.\n\n
  \   - Use newtypes where applicable.\n\n5.5.0.1\n-------\n\n* Fix up Eq instances
  for Tree and PatriciaTree so that they work with\n  multiple edges.\n\n5.5.0.0\n-------\n\n*
  Add proper Show, Read and Eq instances to Data.Graph.Inductive.Tree\n  and Data.Graph.Inductive.PatriciaTree.\n\n*
  Add pretty-printing functions to Data.Graph.Inductive.Graph.  These\n  are based
  upon the old Show implementation for\n  Data.Graph.Inductive.Tree.\n\n* Now use
  PatriciaTree by default rather than Tree (and recommend as\n  such).  IntMap has
  been receiving a lot of optimisation work on it,\n  whereas the internal FiniteMap
  implementation hasn't received any\n  attention.\n\n* The `version :: IO ()` action
  now uses the actual Cabal version.\n\n* Remove Data.Graph.Inductive.Graphviz; use
  the graphviz package\n  instead.\n\n5.4.2.4\n-------\n\n* Update to work with GHC-7.2
  and Cabal-1.6.\n\n5.4.2.3\n-------\n\n* Maintainership taken over by Ivan Miljenovic.\n\n*
  Allow Data.Graph.Inductive.PatriciaTree to deal with multiple edges\n  between nodes.\n\n5.4.2.2
  (November 2008)\n-----------------------\n\n* Bugfix in Graphviz.sq\n\n5.4.2.1 (June
  2008)\n-------------------\n\n* bug fix in bcc by Reid Barton\n\n* added new dynamic
  graph implementation:\n  Data.Graph.Inductive.PatriciaTree (thanks to Pho)\n\n*
  added test/benchmark.hs: a benchmark to compare Tree and PatriciaTree\n  implementations
  (thanks to Pho)\n\n5.4.2 (May 2008)\n----------------\n\n* added Setup.hs to tar
  file\n\n* reimplementation of Data.Graph.Inductive.Query.Dominators\n  by Bertram
  Felgenhauer:\n\n  It was buggy and very slow for large graphs. See\n      http://www.haskell.org/pipermail/haskell-cafe/2008-April/041739.html\n\n
  \ This patch also adds a new function, iDom, that returns the\n  immediate dominators
  of the graph nodes.\n\n* Exported xdf*With functions from DFS.hs\n\n* many little
  cleanups thanks to many people\n  (use 'darcs changes' to see the details)\n\n5.4
  (April 2007)\n----------------\n\n* changed the implementation for inspection functions
  (suc, pred, ...)\n  to correct the behavior in the presence of loops (thanks to
  Ralf\n  Juengling for pointing out the inconsistency)\n\n5.3 (June 2006)\n---------------\n\n*
  fixed a bug in findP (thanks to lnagy@fit.edu)\n\n* added function delLEdge in Graph.hs
  (thanks to Jose Labra)\n\n* changed implementation of updFM and mkGraph (thanks
  to Don Stewart)\n\nFebruary 2005\n-------------\n\n* fixed an import error in Basic.hs\n\n*
  removed Eq instance of gr because it caused overlapping instance\n  problems.  Instead
  the function equal defined in Graph.hs can be\n  used\n\n* added some more functions
  to the export list of DFS.hs\n\n* changed the definition of LPath into a newtype
  to avoid overlapping\n  instances with lists\n\n* fixed the Makefile (for GHC and
  GHCi)\n\n\nJanuary 2004\n------------\n\n* bug fix for nearestNode (src/Data/Graph/Inductive/Query/GVD.hs)\n
  \ Update contributed by Aetion Technologies LLC (www.aetion.com)\n\n* Refactor into
  hierarchical namespace\n\n* Build changes:\n  - build a standard haskell library
  (libHSfgl.a, HSfgl.o)\n  - install as ghc package (fgl), uses Auto so no -package
  is needed\n\n* Automatic Node generation for labels: Data.Graph.Inductive.NodeMap\n\n*
  Graphviz output: Data.Graph.Inductive.Graphviz\n\nSeptember 2002\n--------------\n\n*
  Introduction of graph classes\n\n* Monadic graphs and graph computation monad\n\n*
  Graph implementation based on balanced (AVL) trees\n\n* Fast graph implementation
  based on IO arrays\n\n* New algorithms:\n  - Maximum flow\n  - Articulation points\n
  \ - biconnected components\n  - dominators\n  - transitive closure\n\n* minor changes
  in utility functions\n  - changed signatures (swapped order of arguments) of\n    functions
  context and lab to be consistent with other graph functions\n  - changed function
  first in RootPath: not existing path is now reported\n    as an empty list and will
  not produce an error\n  - esp version that returns a list of labeled edges\n    (to
  find minimum label in maxflow algorithm)\n  - BFS uses amortized O(1) queue\n  -
  Heap stores key and value separately\n  - ...\n\nMarch 2001\n----------\n* Changes
  to User Guide\n\n* a couple of new functions\n\n* some internal changes\n\nApril
  2000\n----------\n\n* User Guide\n\n* Systematic structure for all depth-first search
  functions\n\n* Graph Voronoi diagram\n\n* Several small changes and additions in
  utility functions\n\nFebruary 2000\n-------------\n\n* Representation for inward-directed
  trees\n\n* Breadth-first search\n\n* Dijkstra's algorithm\n\n* Minimum-spanning-tree
  algorithm\n\n\nAugust 1999\n-----------\n\n* First Haskell version\n"
basic-deps:
  base: ! '>=4.3 && <5'
  array: -any
  containers: ! '>=0.4.2'
  transformers: -any
  deepseq: ! '>=1.1.0.0 && <1.5'
all-versions:
- '5.3'
- 5.4.1.1
- 5.4.2.0
- 5.4.2.2
- 5.4.2.3
- 5.4.2.4
- 5.5.0.0
- 5.5.0.1
- 5.5.1.0
- 5.5.2.0
- 5.5.2.1
- 5.5.2.2
- 5.5.2.3
- 5.5.3.0
- 5.5.3.1
- 5.6.0.0
- 5.7.0.0
- 5.7.0.1
author: Martin Erwig, Ivan Lazar Miljenovic
latest: 5.7.0.1
description-type: haddock
description: ! 'An inductive representation of manipulating graph data structures.


  Original website can be found at <http://web.engr.oregonstate.edu/~erwig/fgl/haskell>.'
license-name: BSD-3-Clause
