homepage: https://github.com/adarqui/ekg-push
changelog-type: markdown
hash: 82b6a98abc37aa26163980f7fbcb707e9101b9fe69cff234147293f0692f2eb2
test-bench-deps: {}
maintainer: andrew.darqui@gmail.com
synopsis: Small framework to push metric deltas to a broadcast channel using the ekg-core
  library.
changelog: ! "## 0.0.1 (2015-03-20)\n\n * Push agents \"subscribe\" via IO Action
  callbacks.\n\n## 0.0.2 (2015-04-05)\n\n * Push agents subscribe via a broadcast
  channel.\n"
basic-deps:
  bytestring: <1.0
  ekg-core: ==0.1.*
  base: ! '>=4.5 && <4.9'
  time: <1.5
  unordered-containers: <0.3
  text: <1.3
  ekg-push: ==0.0.3
all-versions:
- 0.0.2
- 0.0.3
author: Andrew Darqui
latest: 0.0.3
description-type: markdown
description: ! "# Modifications of ekg-statsd by Johan Tibell to provide a generic
  \"push\" framework.\n\nYou will notice this is almost identical to ekg-statsd. It's
  just me trying to abstract away the basic functionality found in ekg-statsd, so
  not to have to duplicate this code anywhere else. Eventually I may try to clean
  up this \"abstraction\" and create a PR in ekg-core.\n\n# TODO: Soon\n\nSo, the
  idea of ekg-push is to create a simple framework so that I can create agents such
  as:\n- ekg-push-redis\n- ekg-push-file\n- ekg-push-statsd\n- ekg-push-uberlog\n\netc..\n\nPush
  agents simply 'subscribe' to the push handle returned by forkPush. Once subscribed,
  agents call consume and handle the Metric.Sample data how they want.\n\n# Installation\n\nYou
  can just type 'make' to install ekg-push into a local sandbox. Or you can use cabal:\n\n```\ncabal
  install ekg-push\n```\n\n# Getting started\n\n```\nmake examples\n./.cabal-sandbox/bin/basic\n```\n\nSee
  examples/basic.hs\n\n```\nmain :: IO ()\nmain = do\n    store <- newStore\n    registerGcMetrics
  store\n    iters <- createCounter \"iterations\" store\n    push <- forkPush defaultPushOptions
  { prefix = \"pfx\", suffix = \"sfx\" } store\n\n    ch1 <- subscribe push\n    _
  <- forkIO $ forever $ do\n            msg <- consume ch1\n            putStrLn $
  \"subscription #1: \" ++ show  msg\n\n    let loop n = do\n            evaluate
  $ mean [1..n]\n            Counter.inc iters\n            threadDelay 2000\n            loop
  n\n\n    loop 1000000\n```\n\n-- adarqui\n"
license-name: BSD-3-Clause
