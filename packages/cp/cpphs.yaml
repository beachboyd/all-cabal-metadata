homepage: http://projects.haskell.org/cpphs/
changelog-type: text
hash: 97a19443d29f315bb3142e48018efaaadbaeb07f2d82a04a0e6d7d889947b25b
test-bench-deps: {}
maintainer: Malcolm Wallace <Malcolm.Wallace@me.com>
synopsis: A liberalised re-implementation of cpp, the C pre-processor.
changelog: ! "Version 1.20\n------------\n  * bugfixes for #if defined(FOO) && FOO(a,b)\n
  \ * (1.20.1): fix version number\n  * (1.20.2): ensure all input/output is UTF8,
  regardless of locale\n  * (1.20.3): detect an absolute windows path with a drive
  letter in a #include\n  * (1.20.4): more windows path handling\n  * (1.20.5): revert
  change in 1.20.4\n  * (1.20.6): minor bugfix for crash in obscure corner case\n
  \ * (1.20.7): bugfix for windows drive letter in #include\n  * (1.20.8): another
  bugfix for windows drive letter in #include\n\nVersion 1.19\n------------\n  * expose
  more of the cpphs API\n  * allow the static linking exception to the LGPL\n  * (1.19.1):
  don't warn about trailing comments in #ifdefs\n  * (1.19.2): fix build error\n  *
  (1.19.3): bugfix for hlint ticket #161 - interaction of --unlit/--linepragma\n\nVersion
  1.18\n------------\n  * better lexing of Template Haskell single quotes (thanks
  to Stefan Wehr)\n  * (1.18.1): fix incomplete pattern match\n  * (1.18.2): bugfix
  for erroneous boolean intepretation of some macro\n              expansions in #if
  clauses\n  * (1.18.3): further rewrites of the #if expression parser\n  * (1.18.4):
  fix the accidental flipping of comment-stripping behaviour\n              with --cpp
  -traditional flags\n  * (1.18.5): fix a bug with windows filepath directory separators
  in a\n              #include\n  * (1.18.6): bugfix to reject a macro usage with
  different arity than\n              its definition\n  * (1.18.7): bugfix to accept
  a #include with absolute filepath\n  * (1.18.8): fix version number\n  * (1.18.9):
  accept #if defined foo as well as #if defined(foo)\n\nVersion 1.17\n------------\n
  \ * recursively evaluate #if expressions after macro expansion (fix)\n  * (1.17.1):
  report the right version with cpphs --version\n\nVersion 1.16\n------------\n  *
  fix interaction of runCpphsReturningSymTab with --nomacro\n\nVersion 1.15\n------------\n
  \ * Fix the interaction of --nomacro with --strip.\n  * Fix the error message received
  when # appears without a command.\n\nVersion 1.14\n------------\n  * New API to
  return symbol table after processing.\n\nVersion 1.13\n------------\n  * Accept
  -U cmdline option for compatibility with cpp.\n\nVersion 1.12\n------------\n  *
  Allow it to build with ghc-7.2.\n\nVersion 1.11\n------------\n  * API change: runCpphs,
  cppIfdef, and macroPass are now in the IO monad.\n\nVersion 1.10\n-----------\n
  \ * New command-line option: \"--linepragma\"\n    It converts #line droppings into
  {-# LINE #-}.\n\nVersion 1.9\n-----------\n  * Bugfix for #undef.\n\nVersion 1.8\n-----------\n
  \ * Bugfix for off-by-one error in line numbers with --include=file.\n\nVersion
  1.7\n-----------\n  * Bugfix in interaction of --unlit with \\end{code}\n\nVersion
  1.6\n-----------\n  * New command-line option: \"--include=filename\".\n  * New
  command-line option: \"--strip-eol\" for comment-stripping.\n  * Line pragmas can
  have filenames containing spaces.\n\nVersion 1.5\n-----------\n  * Parametrised
  macro-calls now permitted in #ifdef's.\n  * Recursive textual expansion now permitted
  in #ifdef's.\n  * Better options-handling when used as a library.\n  * Various small
  bugfixes\n\nVersion 1.4\n-----------\n  * Added a \"--pragma\" option to retain
  #pragma in the output.\n  * Fixed a number of obscure corner cases involving the
  interaction of\n    multiple features e.g. foo##__LINE__.\n  * Added the \"--nowarn\"
  option.\n\nVersion 1.3\n-----------\n  * Added a \"--cpp\" option for drop-in compatibility
  with standard cpp.\n    It causes cpphs to accept standard cpp flags and translate\n
  \   them to cpphs equivalents.  Compatibility options include: -o, -ansi,\n    -traditional,
  -stdc, -x, -include, -P, -C, -CC, -A.  The file\n    behaviour is different too
  - if two filenames are given on the\n    commandline, then the second is treated
  as the output location.\n  * Fixed a corner-case bug in evaluating chained and overlapping
  #ifdefs.\n\nVersion 1.2\n-----------\n  * Re-arranged the source files into hierarchical
  libraries.\n  * Exposed the library interface as an installable Cabal package, with\n
  \   Haddock documentation.\n  * Added the --unlit option, for removing literate-style
  comments.\n\nVersion 1.1\n-----------\n  * Fix the .cabal way of building cpphs.\n
  \ * Update the --version reported (forgotten in 1.0, which still reports 0.9)\n
  \ * No longer throws an error when given an empty file as input.\n\nVersion 1.0\n-----------\n
  \ * Add a compatibility script cpphs.compat, allowing cpphs to act as\n    a drop-in
  replacement for cpp, e.g.\n        ghc -cpp -pgmP cpphs.compat\n  * Place quotes
  around replacements for special macros __FILE__, __DATE__,\n    and __TIME__.\n
  \ * If no files are specified, read from stdin.\n  * Ignore #! lines (e.g. in scripts)\n
  \ * Parse -D commandline options once only, and consistently with cpp,\n    i.e.
  -Dfoo means foo=1\n  * Fix compatibility with preprocessors like hsc2hs, which use\n
  \   non-cpp directives like #def.  They are now passed through to the\n    output
  with a warning to stderr.\n\nVersion 0.9\n-----------\n  * Bugfix for ghc-6.4 -O:
  flush the output buffer.\n\nVersion 0.8\n-----------\n  * Added the --text option,
  to signify the input should not\n    be lexed as Haskell.  This causes macros to
  be defined or expanded\n    regardless of their location within comments, string
  delimiters, etc.\n  * Shuffle a few files around to make it easier to say 'hmake
  cpphs'.\n    There is also now a runhugs script to invoke cpphs nicely.\n\nVersion
  0.7\n-----------\n  * Enable the __FILE__, __LINE__, __DATE__, and __TIME__ specials,
  which\n    can be useful for creating DIY error messages.\n\nVersion 0.6\n-----------\n
  \ * Recognise and ignore the #pragma cpp directive.\n  * Fix beginning-of-file bug,
  where in --noline mode, a # cpp directive\n    at the top of the file appeared in
  the output.\n  * Fix chained parenthesised boolean exprs in #if, e.g.\n        #if
  ( foo ) && ( bar )\n  * Fix precedence in chained unparenthesised boolean exprs
  in #if, e.g.\n        #if foo && bar || baz && frob\n  * For better compatibility
  with cpp, and because otherwise\n    there are certain constructs that cannot be
  expressed, we no\n    longer permit whitespace in a <tt>#define</tt> between the\n
  \   symbolname and an opening parenthesis, e.g.\n        #define f (f' id)\n    Previously,
  this was interpreted as a parametrised macro,\n    with arguments in the parens,
  and no expansion.  Now, the space\n    indicates that this is a textual replacement,
  and the parenthesised\n    expression is in fact the replacement.\n\nVersion 0.5\n-----------\n
  \ * Added a --version flag to report the version number.\n  * Renamed --stringise
  to --hashes, and use it to turn on ## catenation\n    as well.\n  * Bugfix for #if
  1, previously taken as false.\n  * Bugfix for --nolines: it no longer adds extra
  spurious newlines.\n  * File inclusion now looks in the directory of the calling
  file.\n  * Failure to find an include file is now merely a warning to stderr\n    rather
  than an error.\n  * Added a --layout flag.  Previously, line continuations in a
  macro\n    definition were always preserved in the output, permitting use\n    of
  the Haskell layout rule even inside a macro.  The default is now\n    to remove
  line continuations for conformance with cpp, but the option\n    of using --layout
  is still possible.\n\nVersion 0.4\n-----------\n  * New flag -Ofile to redirect
  output\n  * Bugfix for precedence in   #if !False && False\n  * Bugfix for whitespace
  between # and if\n  * Bugfix for #define F \"blah\"; #include F\n\nVersion 0.3\n-----------\n
  \ * Bugfix for recursive macro expansion.\n  * New flag --strip to remove C comments
  even outside cpp directives.\n  * New flag --stringise to recognise the # stringise
  operator in macros.\n\nVersion 0.2\n-----------\n  * New flag --noline to eliminate
  #line directives from output.\n  * Add symbol-replacement and macro-expansion.\n
  \ * New flag --nomacro to turn off symbol/macro-expansion.\n\n2004-Apr-21\n-----------\n
  \ * Now accept multi-line # commands via the \\ line continuation operator.\n    The
  original file line numbering is preserved in the output by\n    some tricky acrobatics.\n\nVersion
  0.1\n-----------\n  * Initial release.\n"
basic-deps:
  base: ! '>3 && <6'
  polyparse: ! '>=1.9'
  old-time: -any
  old-locale: -any
  directory: -any
all-versions:
- '1.3'
- '1.5'
- '1.6'
- '1.7'
- '1.8'
- '1.9'
- '1.10'
- '1.11'
- '1.12'
- 1.13.1
- 1.13.2
- 1.13.3
- '1.14'
- '1.15'
- '1.16'
- '1.17'
- 1.17.1
- '1.18'
- 1.18.1
- 1.18.2
- 1.18.3
- 1.18.4
- 1.18.5
- 1.18.6
- 1.18.7
- 1.18.8
- 1.18.9
- '1.19'
- 1.19.2
- 1.19.3
- '1.20'
- 1.20.1
- 1.20.2
- 1.20.3
- 1.20.8
author: Malcolm Wallace <Malcolm.Wallace@me.com>
latest: 1.20.8
description-type: text
description: ! "This directory contains 'cpphs', a simplified but robust\nre-implementation
  of cpp, the C pre-processor, in Haskell.\n\nTO BUILD\n--------\nJust use\n    hmake
  cpphs [-package base]\nor\n    ghc --make cpphs [-o cpphs]\t\t#  -o needed for ghc
  <= 6.4.1 ]\nor\n    runhugs cpphs\t# or rename the script cpphs.hugs to cpphs\n\n\nUSAGE\n-----\n\tcpphs
  \ [filename | -Dsym | -Dsym=val | -Ipath]+  [-Ofile]\n               [ --include=file
  ]*\n               [ --nomacro | --noline | --nowarn | --strip | --strip-eol |\n
  \                --pragma | --text | --hashes | --layout | --unlit |\n                 --linepragma
  ]*\n               [ --cpp compatopts ]\n\nFor fuller details, see docs/index.html\n\nIf
  you want to use cpphs as a completely drop-in replacement for the\nreal cpp, that
  is, to accept the same arguments, and have broadly\nthe same behaviour in response
  to them, then use the --cpp compatibility\noption.\n\n\nCOPYRIGHT\n---------\nCopyright
  (c) 2004-2017 Malcolm Wallace (Malcolm.Wallace@me.com)\n\n\nLICENCE\n-------\nThese
  library modules are distributed under the terms of the LGPL.\nThe application module
  'cpphs.hs' is GPL.\n\nThis software comes with no warranty.  Use at your own risk.\n\nIf
  you have a commercial use for cpphs, and feel the terms of the (L)GPL\nare too onerous,
  you have the option of distributing unmodified binaries\n(only, not sources) under
  the terms of a different licence (see\nLICENCE-commercial).\n\n\nWEBSITE\n-------\nhttp://projects.haskell.org/cpphs/\ndarcs
  get http://code.haskell.org/~malcolm/cpphs\n"
license-name: LicenseRef-LGPL
