homepage: https://github.com/msakai/cpl
changelog-type: markdown
hash: e25cd9897cc34015f88972e270eeca0e5ce0a6ce3846d42eb095430ecd59ad93
test-bench-deps: {}
maintainer: masahiro.sakai@gmail.com
synopsis: An interpreter of Hagino's Categorical Programming Language (CPL).
changelog: ! "Changes since the 0.0.7 release\n-------------------------------\n\n*
  \"→\" can be used instead of \"->\"\n* GHC-7.10 support\n\nChanges since the 0.0.6
  release\n-------------------------------\n\n* Clean up internals\n* Enable `-fReadline`
  and `-fHaskeline` by default\n\nChanges since the 0.0.5 release\n-------------------------------\n\nReadline/Haskeline
  support.\n\nChanges since the 0.0.3 release\n-------------------------------\n\nFunction
  defintions are added.\n\nExamples:\n\n    > let uncurry(f) = eval . prod(f, I)\n
  \   uncurry(f) = eval.prod(f,I)\n    f: *a -> exp(*b,*c)\n    -----------------------------\n
  \   uncurry(f): prod(*a,*b) -> *c\n\n    > let primrec(f,g) = pi2.pr(pair(0,f),
  pair(s.pi1, g))\n    primrec(f,g) = pi2.pr(pair(0,f),pair(s.pi1,g))\n    f: 1 ->
  *a  g: prod(nat,*a) -> *a\n    ---------------------------------\n    primrec(f,g):
  nat -> *a\n"
basic-deps:
  base: ! '>=4 && <5'
  parsec: -any
  array: -any
  containers: -any
  readline: -any
  mtl: ! '>=2.0.0.0'
all-versions:
- '0.0.5'
- '0.0.6'
- '0.0.7'
- '0.0.8'
- '0.0.9'
author: Masahiro Sakai (masahiro.sakai@gmail.com)
latest: '0.0.9'
description-type: markdown
description: ! "An implementation of \"A Categorical Programing Language\"\n========================================================\n\n[![Build
  Status](https://secure.travis-ci.org/msakai/cpl.png?branch=master)](http://travis-ci.org/msakai/cpl)
  [![Build status](https://ci.appveyor.com/api/projects/status/dl935ws9jouy06br/branch/master?svg=true)](https://ci.appveyor.com/project/msakai/cpl/branch/master)
  [![Hackage](https://img.shields.io/hackage/v/CPL.svg)](https://hackage.haskell.org/package/CPL)\n\nThis
  package is an implementation of \"A Categorical Programing Language\"\n(CPL for
  short)[1][2] written in Haskell.\n\nCPL is a functional programming language based
  on category\ntheory. Data types are declared in a categorical manner by\nadjunctions.
  Data types that can be handled include the terminal\nobject, the initial object,
  the binary product functor, the binary\ncoproduct functor, the exponential functor,
  the natural number object,\nthe functor for finite lists, and the functor for infinite
  lists.\nEach data type is declared with its basic operations or\nmorphisms. Programs
  consist of these morphisms, and execution of\nprograms is the reduction of elements
  (i.e. special morphisms) to\ntheir canonical form.\n\nInstall\n-------\n\nDe-Compress
  archive and enter its top directory.\nThen type:\n\n    $ cabal configure\n    $
  cabal build\n    $ cabal install\n\nIf you want to compile with readline or haskeline,
  add -fReadline or\n-fHaskeline respectively to configure command.\n\nUsage\n-----\n\nSee
  chapter 5 of [1]\n\nLicense\n-------\n\nThis program is licenced under the BSD-style
  license.\n(See the file 'COPYING'.)\n\nCopyright (C) 2004-2014 Masahiro Sakai <masahiro.sakai@gmail.com>\n\nAuthor\n------\n\nMasahiro
  Sakai <masahiro.sakai@gmail.com>\n\nBibliography\n------------\n\n(1) Tatsuya Hagino,
  “A Categorical Programming Languge”.\n    Ph.D. Thesis, University of Edinburgh,
  1987\n    available at <http://web.sfc.keio.ac.jp/~hagino/index.html.en>\n\n(2)
  Tatsuya Hagino, “Categorical Functional Programming Language”.\n    Computer Software,
  Vol 7, No.1.\n    Advances in Software Science and Technology 4, 1992\n    ISBN
  0-12-037104-9\n"
license-name: BSD3
