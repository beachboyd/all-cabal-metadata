homepage: ''
changelog-type: text
hash: b9e6da89a01428d9730cf8f917599e77261910b4716cf9a10c6bfd66693b39a4
test-bench-deps: {}
maintainer: mliskov@mitre.org
synopsis: Symbolic cryptographic protocol analyzer
changelog: ! "2017-09-15  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/DiffieHellman/Algebra.hs
  (unifyTerms):  Added calls to\n\tchase before calling unifyBase which prevents a
  failure in the\n\toccurs check.\n\n2017-09-14  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Strand.hs (tryPerm): Add missing inverse\n\tpermutation to second checkOrigs
  in tryPerm.\n\n2017-09-12  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* cpsa.cabal:
  \ Removed CPSA.Lib.CPSA globally and removed\n\tunnecessary dependencies.\n\n2017-08-30
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* cpsa.cabal: Added missing modules
  and source repository\n\tlocation.\n\n\t* src/CPSA/Lib/DebugLibrary.hs (zi): Fixed
  erroneous parameters in\n\tInstance.\n\n2017-08-28  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Cohort.hs (solved): Fixed condition 5.  It was\n\tusing ct instead
  of ct'.\n\n2017-06-30  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Cohort.hs
  (transformingNode, maybeAug, nextNode):\n\tRewrote code so that it no longer fails
  the ambiguity check.\n\n2017-05-26  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/DiffieHellman/Algebra.hs (mkInitMatchDecis): Ensure\n\tinitial distinctions
  to not include fresh variables.\n\t(partition): Do not move variables of sort expn
  to lhs, even if\n\tthey are freshly generated.\n\n2017-05-16  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/DiffieHellman/Algebra.hs (displaySubst):  Removed\n\terroneous substitution
  to fix substitution displaying.\n\n2017-05-10  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Strand.hs (findReplacement, permutations): Merge\n\tgenerators so that
  no variable in a term has an identifier that is\n\tgreater than or equal to the
  generator.\n\n2017-02-02  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Basic/Algebra.hs
  (loadInvk): Added support for reading\n\t(invk (privk ...)) and (invk (invk ...)).\n\n2017-01-17
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/SAS/SAS.hs (strandForm):
  Remove conjoin and use\n\tconcatMap when creating a characteristic skeleton.\n\n2017-01-09
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Loader.hs (loadPrimary):
  Removed generator\n\tparameter that was not used.\n\n2016-12-21  John D. Ramsdell
  \ <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Cohort.hs (solved): In Condition 4, applied\n\tsubstitutions
  to the encryption keys before testing for\n\tderivability.\n\n2016-10-04  John D.
  Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Basic/Algebra.hs (matchRenaming):
  \ Make isomorphism\n\tcheck work in presence of asymmetric keys.\n\n2016-09-30  John
  D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Algebra.hs: Added isObtainedVar
  for variables of\n\tsort expr in the Diffie-Hellman algebra.\n\n2016-08-12  John
  D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/SAS/SAS.hs (form): Changed \"defsas\"
  to \"defgoal\" as the\n\tkeyword for a generated shape analysis sentence.  This
  makes the\n\tprogram compatible with its documentation.\n\n2016-06-22  John D. Ramsdell
  \ <ramsdell@mitre.org>\n\n\t* cpsa.cabal (Extension): Add allow ambiguous types
  when compiling\n\twith GHC 8.0.0 or later.\n\n2016-06-21  Moses D. Liskov <mliskov@mitre.org>\n\n\t*
  src/CPSA/DiffieHellman/Algebra.hs: Added code to implement the\n\t\"tag\" sort,
  which quoted string tags belong to.\n\n2016-06-03  Moses D. Liskov <mliskov@mitre.org>\n\n\t*
  doc/examples/IKE_variants.tar.gz: Added this compressed archive\n\tof IKEv1 and
  IKEv2 variant input files.\n\n2016-03-30  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/SAS/SAS.hs: Added support for fringe skeletons so that\n\tcpassas makes
  use of depth limited output.  When a tree depth\n\tlimit is exceeded, a fringe labeled
  skeleton is printed.  cpsasas\n\tproduces a sentence with a right-hand-side that
  encodes both the\n\tshapes and the fringe.  Thus, when cpsa is running the a tree\n\tdepth
  limit of one, cpsasas computes a cohort analysis sentence.\n\n2016-03-29  John D.
  Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Reduction.hs (LPreskel): Added
  a depth field, so\n\tthat CPSA aborts when the depth of one branch exceeds a bound.\n\n\t*
  src/CPSA/Lib/Algebra.hs: Added escapeSet to Term class and remove\n\tprotectors,
  thus computing the escape set in a more\n\tstraightforward way.\n\n2015-11-23  John
  D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/SAS/Main.hs (main): Changed start
  up so that the herald\n\tis read and used to find the correct algebra for further\n\tprocessing.\n\n2015-10-02
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* doc/{index,cpsauser}.html: Added
  width limit of 48em.\n\n2015-07-09  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Graph/ExpandedView.hs (purgeTraces): By default, the\n\tgraph program now
  does not show traces in skeletons.  Added\n\t--show-traces option to the graph program,
  which restores the\n\tprevious behavior and traces are displayed in skeletons.\n\n2015-07-02
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Algebra.hs: Added constituent
  to the algebra\n\tinterface and the algebras.  An atom is a constituent of a term
  if\n\tthe atom is among the set of atoms required to construct the term.\n\tChanged
  occursIn so that it just applies to variables.\n\n2015-07-01  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/{Basic,DiffieHellman}/Algebra.hs (occursIn): Restricted\n\tfirst argument
  of occursIn to variables and atoms and corrected\n\tthe implementation.\n\n2015-06-30
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n \t* cpsa3.cabal (Version): Tagged as
  3.2.2.\n\n2015-06-25  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Strand.hs
  (geq): Removed dynamic role specific test\n\tbecause it erroneously reports violations.
  \ The existing static\n\trole specific test correctly does the job.\n\n2015-05-26
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n \t* cpsa3.cabal (Version): Tagged as
  3.2.1.\n\n\t* src/CPSA/DiffieHellman/Algebra.hs (displayTerm):  Made it so\n\tthat
  CPSA prints each bltk atoms in a canonical form so that the\n\tgraph program draws
  solid arrows when it should.\n\n2015-04-27  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Loader.hs (ReturnFail): Added ReturnFail Monad so\n\tthat fail is correctly
  handled.  Added Functor and Applicative\n\tinstance to support GHC 7.10 base library.\n\n2015-04-20
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Characteristic.hs (mkDcls):
  Fixed tag for non-orig\n\tand pen-non-orig.\n\n2015-04-10  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Strand.hs (mkListener): The role used for listener\n\tstrands is now
  the one stored in the protocol.  It has a single\n\tvariable x of sort mesg as its
  set of variables.  This change\n\tenables satisfaction checking on skeleton that
  include listeners.\n\n2015-04-07  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Strand.hs (toSkeleton): Removed hulling to the\n\tprocess of converting
  an input preskeleton into a skeleton as it\n\tcauses bugs in printing.\n\n\t* Imported
  CPSA2's implementation of goals and expunged support\n\tfor subgoals.\n\n2015-03-27
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Strand.hs (toSkeleton):
  Added hulling to the\n\tprocess of converting an input preskeleton into a skeleton.\n\n2015-03-25
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Goal.hs: Added uniq
  to goal language.\n\n2015-03-17  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/SAS/SAS.hs
  (form): Generate a defsas form rather than a\n\tnaked sentence.\n\n\t* src/CPSA/Lib/Loader.hs
  (loadPrimary): Renamed equals function\n\tsymbol to =.\n\n2015-03-05  John D. Ramsdell
  \ <ramsdell@mitre.org>\n\n \t* cpsa3.cabal (Version): Tagged as 3.2.0.\n\n2015-02-20
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* Added support for subgoals within
  point-of-view skeletons.  The\n\tsubgoals are evaluated for each shape, and (satisfies-a-subgoal)\n\tis
  added to a shape when it satisfies one of the subgoals.\n\n2014-12-11  John D. Ramsdell
  \ <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Entry.hs (defaultOptions): Changed the
  default\n\tstrand bound to 12.\n\n2014-11-15  John D.  Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/SAS/SAS.hs: Changed the language used for a shape\n\tanalysis sentence
  to be node-oriented.\n\n2014-11-07  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/Loader.hs (loadPriorities): Allowed priority\n\tdeclarations on state
  synchronization nodes other than\n\tinitiatizers.\n\n2014-11-07  John D. Ramsdell
  \ <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Cohort.hs (explainable): Added the nodes
  reachable\n\tby strand succession so that a transition can be explained by a\n\tprevious
  transition within a strand.\n\n2014-10-31  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  \ Changed the name of the logic producing program to cpsa3sas.\n\n2014-09-01  John
  D.  Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/Strand.hs (noStateSplit):
  An observer node should have\n\tat most one transition node after it too.\n\n2014-08-31
  \ John D.  Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPSA/Lib/State.hs: Made labels
  optional.  Use \"tran\" for\n\tstate synchronization events with labels, and \"sync\"
  for ones\n\twithout.\n\n2014-08-29  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/Lib/*.hs: Added support for analyzing protocols with\n\tstate.  A state
  synchronization event sync was added to the events\n\tthat can occur in a trace,
  along with a new method for state-based\n\taugmentation.  An example using sync
  events is in\n\ttst/envelope.scm.\n\n2014-08-26  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  cpsa3.cabal:  Removed cpsaparameters program.\n\n2014-08-25  John D.  Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/split.py: Added the skeleton split program that copies the\n\tskeletons in a
  CPSA source file into separate files.\n\n2014-08-23  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/cpsajson.py (load): Added a reader in Python for JSON\n\tproduced by CPSA's
  pretty printer program cpsa3pp -j.\n\n2014-08-22  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  src/CPSA/JSON/Main.hs: Added the program cpsa3json that\n\ttranslates JSON encoded
  CPSA into CPSA S-Expressions.  It expects\n\tthe JSON input to follow the conventions
  of the JSON produced by\n\tthe cpsapp program when given the -j option.\n\n\t* src/CPSA/Lib/SExpr.hs
  (numOrSym): Enabled parsing a number with\n\ta plus sign by removing the sign before
  translating the string of\n\tdigits into a number.\n\n2014-06-12  John D.  Ramsdell
  \ <ramsdell@mitre.org>\n\n\t* cpsa3.cabal (Version): Tagged as 3.0.3.\n\n2014-02-06
  \ John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* cpsa3.cabal (Version): Tagged as
  3.0.2.\n\n2013-12-14  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* cpsa3.cabal
  (Version): Tagged as 3.0.1.\n\n\t* cpsa3.cabal (Extra-Source-Files): Added more
  DH tests\n\n2013-03-12  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPET/Annotations/Annotations.hs
  (obligation): Replaced an\n\tirrefutable pattern that raised an exception with a
  maybeToList.\n\n2013-02-21  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t* src/CPET/DiffieHellman/Algebra.hs:
  Added the Diffie-Hellman\n\talgebra based on Abelian groups.\n\n\t* src/CPET/Basic/Algebra.hs:
  \ Removed support for GHC 6.x.\n\n2013-02-06  John D. Ramsdell  <ramsdell@mitre.org>\n\n\t*
  cpet.cabal (Version): Tagged as 0.0.0.\n"
basic-deps:
  base: ! '>=3 && <5'
  containers: -any
  parallel: -any
all-versions:
- '2.0.0'
- '2.0.2'
- '2.0.3'
- '2.0.4'
- '2.0.5'
- '2.1.0'
- '2.1.1'
- '2.1.2'
- '2.2.0'
- '2.2.1'
- '2.2.2'
- '2.2.3'
- '2.2.4'
- '2.2.5'
- '2.2.6'
- '2.2.7'
- '2.2.8'
- '2.2.9'
- '2.2.10'
- '2.2.11'
- '2.2.12'
- '2.2.13'
- '2.3.0'
- '2.3.1'
- '2.3.2'
- '2.3.3'
- '2.3.4'
- '2.3.5'
- '2.4.0'
- '2.5.0'
- '2.5.1'
- '2.5.2'
- '2.5.3'
- '2.5.4'
- '3.3.0'
- '3.3.1'
- '3.3.2'
- '3.4.0'
- '3.4.1'
author: ''
latest: '3.4.1'
description-type: text
description: ! 'CPSA: Crptographic Protocol Shapes Analyzer Version 3


  The Cryptographic Protocol Shapes Analyzer (CPSA), is a software tool

  designed to assist in the design and analysis of cryptographic

  protocols.  A cryptographic protocol is a specific pattern of

  interaction between principals.  TLS and IKE are some examples of

  well-known cryptographic protocols.


  CPSA attempts to enumerate all essentially different executions

  possible for a cryptographic protocol.  We call them the shapes of the

  protocol.  Naturally occurring protocols have only finitely many,

  indeed very few shapes.  Authentication and secrecy properties are

  easy to determine from them, as are attacks and anomalies.


  For each input problem, the CPSA program is given some initial

  behavior, and it discovers what shapes are compatible with it.

  Normally, the initial behavior is from the point of view of one

  participant.  The analysis reveals what the other participants must

  have done, given the participant''s view.


  CPSA version 3 features support for Diffie-Hellman and state.  The

  manual in <doc/cpsamanual.pdf> provides a comprehensive description of

  the program.


  CPSA: Cryptographic Protocol Shapes Analyzer


  This program has been built and tested using Haskell Platform.

  It is available from <http://haskell.org> or from an operating

  system specific source.  The name of the Linux package is usually

  haskell-platform.


  If the Internet is available, install CPSA with:


  $ cabal update

  $ cabal install cpsa


  Find the documentation directory by typing "cpsa -h" in a command

  shell, and view index.html in a browser.


  INSTALLING FROM A TARBALL


  QUICK START (Linux)


  : To build and install CPSA type:

  $ make

  $ make install


  : To analyze a protocol you have put in prob.scm type:

  $ cpsa -o prob.txt prob.scm

  $ cpsagraph -o prob.xhtml prob.txt

  $ firefox -remote "openFile(`pwd`/prob.xhtml)"


  : Documentation and samples are in the directory given by

  $ cpsa -h


  : To view the user guide:

  $ firefox -remote "openFile($HOME/share/cpsa-X.Y.Z/doc/cpsauser.html)"

  : where X.Y.Z is the CPSA version number.


  QUICK START (Mac)


  : To build and install CPSA type:

  $ make

  $ make install


  : To analyze a protocol you have put in prob.scm type:

  $ cpsa -o prob.txt prob.scm

  $ cpsagraph -o prob.xhtml prob.txt

  $ open prob.xhtml


  : Documentation and samples are in the directory given by

  $ cpsa -h


  : To view the user guide:

  $ open $HOME/share/cpsa-X.Y.Z/doc/cpsauser.html

  : where X.Y.Z is the CPSA version number.


  QUICK START (Windows)


  With Cygwin or MinGW, the installation is similar to the Linux

  install.  The software has been tested on a Windows system on which

  neither MinGW or Cygwin has been installed.  Install Haskell Platform

  Core and then run:


  C:\...> cabal update

  C:\...> cabal install parallel

  C:\...> cabal configure

  C:\...> cabal build

  C:\...> cabal install


  Documentation and samples are in the directory given by

  C:\...> cpsa -h


  The installed programs can be run from the command prompt or via a

  batch file.  Alternatively, copy doc/Make.hs into the directory

  containing your CPSA problem statements, and load it into a Haskell

  interpreter.  Read the source for usage instructions.


  MAKEFILE


  The file $HOME/share/cpsa-X.Y.Z/doc/cpsa.mk contains useful GNU Make

  rules for inclusion, where X.Y.Z is CPSA version number.


  Alternatively, copy the file Make.hs in the same directory into the

  directory containing your CPSA problem statements.  The source file

  has usage instructions.


  PARALLELISM


  CPSA is built so it can make use of multiple processors.  To make use

  of more than one processor, start CPSA with a runtime flag that

  specifies the number of processors to be used, such as "+RTS -N4

  -RTS".  The GHC documentation describes the -N option in detail.


  TEST SUITE


  : To run the test suite type:

  $ ./cpsatst


  Tests with the .scm extension are expected to complete without error,

  tests with the .lsp extension are expected to fail, and tests with the

  .lisp extension are not run.  New users should read tst/README, and

  then browse the files it suggests while reading CPSA documentation.


  Don''t develop your protocols in the tst directory.  The Makefile is

  optimized for testing the cpsa program, not analyzing protocols.


  ADDITIONAL PROGRAMS


  The src directory of the source distributions includes programs

  written in Scheme, Prolog, and Elisp for performing tasks.  Use them

  as templates for your special purpose CPSA analysis and transformation

  needs.  Also, when given the --json option, the CPSA pretty printer

  cpsapp will transform CPSA S-expressions into JavaScript Object

  Notation (JSON).


  On Linux, the GHC runtime can request so much memory that thrashing

  results.  The script in src/ghcmemlimit sets an environment variable

  that limits memory to the amount of free and reclaimable memory on

  your machine.


  KNOWN BUGS


  Variable separation in generalization fails to separate variables in

  terms of the form (ltk a a).

'
license-name: BSD3
