homepage: https://github.com/nicta/cplusplus-th
changelog-type: ''
hash: d565bf8a62f08e8c31e7f6e28f0a06807e02299960cbcc936f034deb559b8b33
test-bench-deps:
  base: -any
  process: -any
  QuickCheck: ==2.7.6
maintainer: maxwell.swadling@nicta.com.au
synopsis: C++ Foreign Import Generation
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.6 && <4.8'
  process: ! '>=1.2 && <1.3'
  containers: ==0.5.*
  template-haskell: -any
all-versions:
- 1.0.0.0
author: Maxwell Swadling
latest: 1.0.0.0
description-type: markdown
description: ! "cplusplus-th\n============\n\n`cplusplus-th` allows you to foreign
  import C++ functions that are\ncompatible with the `ccall` calling convention. It
  also includes\nsome standard library abstractions.\n\nExample\n-------\n\nWith the
  following C++ function in the object file `cbits/string.o`:\n\n```c++\nnamespace
  haskell {\nstring* fromCString(char const* x, int length) {\n  return new string(x,
  length);\n}\n}\n```\n\nWe can import it into Haskell with:\n\n```haskell\ncplusplus
  \"haskell::fromCString(char const*, int)\" \"cbits/string.o\"\n          [t|CString
  -> Int -> IO Std__basic_string|]\n```\n\nBuilding\n--------\n\nIt works by looking
  up the symbol in the object file.\nWhen using cabal, it is recommended you include
  the C++ file in\nyour `c-sources` and compile it in a build hook. For example:\n\n```haskell\nimport
  Distribution.Simple\nimport Distribution.Simple.Setup\nimport Distribution.Simple.Program\nimport
  Distribution.Simple.Program.Types\nimport Distribution.Simple.LocalBuildInfo\nimport
  Distribution.PackageDescription\n\ncc_flags = [\"-stdlib=libc++\", \"-o\", \"cbits/string.o\",
  \"-c\", \"cbits/string.cc\"]\n\nmain :: IO ()\nmain = defaultMainWithHooks simpleUserHooks
  {\n    buildHook = buildCPlusPlus\n  }\n\nbuildCPlusPlus :: PackageDescription ->
  LocalBuildInfo -> UserHooks -> BuildFlags -> IO ()\nbuildCPlusPlus pkg buildInfo
  hooks flags = do\n  let verb = fromFlag (buildVerbosity flags)\n  clang <- findProgramLocation
  verb \"clang++\"\n  let clang' = case clang of\n                Just x -> x\n                Nothing
  -> error \"clang++ not on path\"\n  runProgram verb (simpleConfiguredProgram \"clang++\"
  (FoundOnSystem clang')) cc_flags\n  buildHook simpleUserHooks pkg buildInfo hooks
  flags\n```\n\nStandard Library\n----------------\n\n`Foreign.CPlusPlusStdLib` exports
  the following type class:\n\n```haskell\nclass CPlusPlusLand a {- haskell side -}
  b {- c++ side -} where\n  to :: a -> IO b\n  from :: b -> IO a\n```\n\nTo avoid
  orphan instances, it implements instances for\nsome numeric types, `String` and
  `ByteString`.\n\nCompatability\n-------------\n\n- Static functions are simply the
  arguments.\n- Static member functions take the object as the first argument.\n-
  Functions via a vtable are not possible.\n- Inline functions are not possible.\n-
  instantiating templates is not possible.\n"
license-name: BSD-3-Clause
