homepage: ''
changelog-type: markdown
hash: 96dac235b4a3c8d6ca66de80813dc7bd95752e59849a749d29cd785cd940f63f
test-bench-deps:
  base: -any
  hspec: -any
  megaparsec: -any
  cpkg: -any
  hspec-megaparsec: -any
maintainer: vamchale@gmail.com
synopsis: Build tool for C
changelog: "# cpkg\n\n## 0.2.3.7\n  \n  * Pin package\n\n## 0.2.3.6\n\n  * Use `dhall`
  1.27.0\n\n## 0.2.3.5\n\n  * Use `lzlib` 0.3.0.0\n\n## 0.2.3.4\n\n  * Use `libarchive`
  2.0.0.0\n\n## 0.2.3.3\n\n  * Add `find` subcommand\n\n## 0.2.3.2\n\n  * Add `.lz`
  support\n\n## 0.2.3.1\n\n  * Now works with Dhall 1.25.0 on a sufficiently new GHC\n\n##
  0.2.3.0\n\n  * Add `garbage-collect` subcommand\n  * Add `uninstall` subcommand\n
  \ * Add `nuke-cache` subcommand\n\n## 0.2.2.0\n\n  * Add `printLdLibFlags` function
  and add functionality to CLI interface\n  * `cfg.installDir` is now absolute\n\n##
  0.2.1.0\n\n  * Add `SymlinkManpage` command\n\n## 0.2.0.1\n\n  * Pass `-p0` option
  to `patch`\n\n## 0.2.0.0\n\n  * Support more MIPS architectures\n\n## 0.1.3.1\n\n
  \ * Don't install build-tool dependencies globally\n\n## 0.1.3.0\n\n  * Add ability
  to patch libraries\n\n## 0.1.2.1\n\n  * Add `--global` flag\n\n## 0.1.2.0\n\n  *
  Export `Dep`\n\n## 0.1.1.1\n\n  * Stream using `libarchive` lazily\n\n## 0.1.1.0\n\n
  \ * Export `EnvVar`\n  * Better diagnostic output\n  * Fix bug where cross dependencies'
  `bin/` directory was added to `PATH` for\n    subsequent package builds\n  * Allow
  use of `libarchive` for packages that cannot be handled with the `tar`\n    library\n\n##
  0.1.0.0\n\nInitial release\n"
basic-deps:
  http-client: -any
  zip-archive: -any
  bytestring: -any
  bzlib: -any
  composition-prelude: ! '>=1.5.2.0'
  dir-traverse: ! '>=0.2.1.0'
  filemanip: -any
  base: ! '>=4.3 && <5'
  dhall: (>=1.27.0 && <1.25.0) && >=1.26.1
  text: -any
  megaparsec: -any
  filepath: -any
  process: -any
  containers: ! '>=0.6.0.0'
  tar: -any
  binary: -any
  cpkg: -any
  lzma: -any
  http-client-tls: -any
  zlib: -any
  network-uri: -any
  mtl: -any
  libarchive: ! '>=2.0.0.0'
  hashable: -any
  recursion: ! '>=2.2.3.0'
  prettyprinter: -any
  temporary: -any
  optparse-applicative: -any
  microlens: -any
  lzlib: ! '>=0.3.0.0'
  directory: ! '>=1.3.1.0'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.1
- 0.1.3.0
- 0.1.3.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- 0.2.3.4
- 0.2.3.5
- 0.2.3.6
- 0.2.3.7
author: Vanessa McHale
latest: 0.2.3.7
description-type: markdown
description: "# cpkg\n\n[![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/cpkg/badge)](https://matrix.hackage.haskell.org/package/cpkg)\n[![Hackage](https://img.shields.io/hackage/v/cpkg.svg)](http://hackage.haskell.org/package/cpkg)\n[![Dependencies
  of latest version on Hackage](https://img.shields.io/hackage-deps/v/cpkg.svg)](https://hackage.haskell.org/package/cpkg)\n\n`cpkg`
  is a build tool for C with a particular emphasis on cross compilation.\nIt is configured
  using\n[Dhall](http://github.com/dhall-lang/dhall-haskell).\n\nBy considering a
  package to be a *function* taking a `cpkg`-supplied\ninstallation directory to a
  series of steps, we can effectively package\nC projects with diverse build systems
  and handle dependencies between them.\n\nThis tool provides reasonably good support
  for cross-compilation of C projects\nand packages. It is not a full-fledged package
  manager.\n\n- [Installation](#installation)\n  - [Shell Completions](#shell-completions)\n
  \ - [Packages](#packages)\n- [Example](#example)\n  - [Configuration](#configuration)\n
  \ - [Dhall Prelude](#dhall-prelude)\n  - [Cabal Integration](#cabal-integration)\n-
  [Known Deficiencies](#known-deficiences)\n  - [Security](#security)\n  - [Performance](#performance)\n
  \ - [Dependency Solver](#dependency-solver)\n  - [Garbage Collection](#garbage-collection)\n-
  [Contents](#contents)\n\n## Installation\n\n```\ncabal new-install cpkg\n```\n\n###
  Shell Completions\n\nAdd the following to your `~/.bashrc` for shell completions:\n\n```\neval
  \"$(cpkg --bash-completion-script cpkg)\"\n```\n\n### Packages\n\nTo view available
  packages, use `cpkg list`\n\n```\nvanessa@thinkpad ~/programming/haskell/done/cpkg
  \U0001F338 cpkg list\n\nautoconf\n    url: https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz\n
  \   version: 2.69\n    build dependencies: m4\n\n\nautomake\n    url: https://ftp.gnu.org/gnu/automake/automake-1.16.1.tar.xz\n
  \   version: 1.16.1\n    build dependencies: autoconf\n\n\nat-spi2-atk\n    url:
  http://ftp.gnome.org/pub/gnome/sources/at-spi2-atk/2.30/at-spi2-atk-2.30.0.tar.xz\n
  \   version: 2.30.0\n    dependencies: at-spi2-core, atk, libxml2\n    build dependencies:
  meson, ninja\n\n\nat-spi2-core\n    url: http://ftp.gnome.org/pub/gnome/sources/at-spi2-core/2.30/at-spi2-core-2.30.0.tar.xz\n
  \   version: 2.30.0\n    dependencies: libXtst, glib\n    build dependencies: meson,
  ninja\n\n\natk\n    url: https://ftp.gnome.org/pub/gnome/sources/atk/2.30/atk-2.30.0.tar.xz\n
  \   version: 2.30.0\n    build dependencies: gobject-introspection\n⋮\n```\n\n\n##
  Example\n\nTo install `tar`:\n\n```\ncpkg install tar\n```\n\nTo install `emacs`:\n\n```\ncpkg
  install emacs\n```\n\n### Configuration\n\nHere is the configuration for Lua:\n\n```dhall\nlet
  prelude = https://raw.githubusercontent.com/vmchale/cpkg/master/dhall/cpkg-prelude.dhall\nin\n\nlet
  lua =\n  λ(v : List Natural) →\n    let printLuaOS =\n      λ(os : types.OS) →\n
  \       merge\n          { FreeBSD   = λ(_ : {}) → \"freebsd\"\n          , OpenBSD
  \  = λ(_ : {}) → \"bsd\"\n          , NetBSD    = λ(_ : {}) → \"bsd\"\n          ,
  Solaris   = λ(_ : {}) → \"solaris\"\n          , Dragonfly = λ(_ : {}) → \"bsd\"\n
  \         , Linux     = λ(_ : {}) → \"linux\"\n          , Darwin    = λ(_ : {})
  → \"macosx\"\n          , Windows   = λ(_ : {}) → \"mingw\"\n          , Redox     =
  λ(_ : {}) → \"generic\"\n          , Haiku     = λ(_ : {}) → \"generic\"\n          ,
  IOS       = λ(_ : {}) → \"generic\"\n          , AIX       = λ(_ : {}) → \"generic\"\n
  \         , Hurd      = λ(_ : {}) → \"generic\"\n          , Android   = λ(_ : {})
  → \"generic\"\n          , NoOs      = λ(_ : {}) → \"c89\"\n          }\n          os\n
  \   in\n\n    let luaBuild =\n      λ(cfg : types.BuildVars) →\n        let cc =
  prelude.mkCCArg cfg\n        in\n\n        let ldflags =\n          (prelude.mkLDFlags
  cfg.linkDirs).value\n        in\n\n        let cflags =\n          (prelude.mkCFlags
  cfg.includeDirs).value\n        in\n\n        let os =\n          prelude.osCfg
  cfg\n        in\n\n        [ prelude.call (prelude.defaultCall ⫽ { program = \"make\"\n
  \                                             , arguments = cc # [ printLuaOS os,
  \"MYLDFLAGS=${ldflags}\", \"MYCFLAGS=${cflags}\", \"MYLIBS=-lncurses\" ]\n                                              })\n
  \       ]\n    in\n\n    let luaInstall =\n      λ(cfg : types.BuildVars) →\n        [
  prelude.call (prelude.defaultCall ⫽ { program = \"make\"\n                                              ,
  arguments = [ \"install\", \"INSTALL_TOP=${cfg.installDir}\" ]\n                                              })
  ]\n          # prelude.symlinkBinaries [ \"bin/lua\", \"bin/luac\" ]\n    in\n\n
  \   prelude.simplePackage { name = \"lua\", version = v } ⫽\n      { pkgUrl = \"http://www.lua.org/ftp/lua-${prelude.showVersion
  v}.tar.gz\"\n      , configureCommand = prelude.doNothing\n      , buildCommand
  = luaBuild\n      , installCommand = luaInstall\n      , pkgDeps = [ prelude.unbounded
  \"readline\"\n                  , prelude.unbounded \"ncurses\"\n                  ]\n
  \     }\nin\n\nlua [5,3,5]\n```\n\n### Cabal Integration\n\nAfter running\n\n```\ncpkg
  install libX11 --target=arm-linux-gnueabihf\ncpkg install libXext --target=arm-linux-gnueabihf\ncpkg
  install libXrandr --target=arm-linux-gnueabihf\ncpkg install libXinerama --target=arm-linux-gnueabihf\ncpkg
  install libXScrnSaver --target=arm-linux-gnueabihf\n```\n\nYou can dump flags to
  be passed to cabal with\n\n```\ncpkg dump-cabal libX11 libXext libXrandr libXinerama
  libXScrnSaver --target=arm-linux-gnueabihf\n```\n\nwhich will produce something
  like\n\n```\n--extra-lib-dirs=/home/vanessa/.cpkg/arm-linux-gnueabihf/libX11-1.6.7-820c8166b4caadb/lib
  --extra-lib-dirs=/home/vanessa/.cpkg/arm-linux-gnueabihf/libXext-1.3.3-1bad0a89c6794a53/lib
  --extra-lib-dirs=/home/vanessa/.cpkg/arm-linux-gnueabihf/libXrandr-1.5.1-f58f951a622e5c2/lib
  --extra-lib-dirs=/home/vanessa/.cpkg/arm-linux-gnueabihf/libXinerama-1.1.4-516496f7e04d34be/lib
  --extra-lib-dirs=/home/vanessa/.cpkg/arm-linux-gnueabihf/libXScrnSaver-1.2.3-60f6993b79a87725/lib\n```\n\nThis
  could be used, for example, to cross-compile `xmonad`, viz.\n\n```\ncabal new-install
  xmonad --with-ghc arm-linux-gnueabihf-ghc --with-ghc-pkg arm-linux-gnueabihf-ghc-pkg
  $(cpkg dump-cabal libX11 libXext libXrandr libXinerama libXScrnSaver --target=arm-linux-gnueabihf)\n```\n\n###
  Dhall Prelude\n\nThere is\na [prelude](https://github.com/vmchale/cpkg/blob/master/dhall/cpkg-prelude.dhall)\navailable
  containing functions which simplify the process of writing package\ndescriptions.
  As an example, we can install `sed`\n\n```dhall\nlet prelude = https://raw.githubusercontent.com/vmchale/cpkg/master/dhall/cpkg-prelude.dhall\nin\n\nlet
  sed =\n  λ(v : List Natural) →\n    prelude.makeGnuExe { name = \"sed\", version
  = v }\nin\n\nsed [4,5]\n```\n\n## Known Deficiencies\n\n### Security\n\nThis tool
  is insecure.\n\n### Performance\n\nThis tool is not performant.\n\n### Dependency
  Solver\n\nCurrently, there is no dependency solver. It should be relatively easy
  to add\na version-based dependency solver to the code.\n\n### Garbage Collection\n\nCurrently,
  there is no garbage collector à la `$ nix-collect-garbage`. This will\n*not* be
  relatively easy to add, because it will require that the global package\nindex be
  re-implemented (ideally using a proper database).\n\n## Contents\n\nLovingly provided
  by [polyglot](https://github.com/vmchale/polyglot):\n\n```\n-------------------------------------------------------------------------------\n
  Language             Files       Lines         Code     Comments       Blanks\n-------------------------------------------------------------------------------\n
  Bash                     5          62           52            5            5\n
  Cabal                    1         157          143            0           14\n
  Cabal Project            1           4            3            0            1\n
  Dhall                    3        5299         4773           10          516\n
  Haskell                 32        1977         1623           37          317\n
  Markdown                 5         542          452            0           90\n
  YAML                     2          51           47            0            4\n-------------------------------------------------------------------------------\n
  Total                   49        8092         7093           52          947\n-------------------------------------------------------------------------------\n```\n"
license-name: BSD-3-Clause
