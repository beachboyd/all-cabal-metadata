homepage: http://bnfc.digitalgrammars.com/
changelog-type: text
hash: dae284c327ed39c28722479081c0bd4a686e0d2bd1dff790b350b8a1742f4036
test-bench-deps:
  base: ==4.*
  hspec: -any
  filepath: -any
  process: -any
  doctest: ! '>=0.8'
  HUnit: -any
  array: -any
  containers: -any
  mtl: -any
  temporary: -any
  deepseq: -any
  QuickCheck: ! '>=2.5'
  pretty: -any
  directory: -any
maintainer: bnfc-dev@googlegroups.com
synopsis: A compiler front-end generator.
changelog: ! "2.8.2 Andreas Abel <andreas.abel@gu.se>  November 2018\n\t* GHC 8.4
  compatibility [#227,#236]\n\t* bnfc now puts current timestamp on all created files,
  even unchanged ones [#219]\n\t* bnfc is now more accepting about border-line terminals
  [#149]\n\t* Improved error messages [#144] in particular on undefined categories
  [#151]\n\t* C: Emit correct function prototypes [#185]\n\t* C++: Fix buffer overrun
  in pretty printer [#242]\n\t* C++: Fix regression introduced in 2.8 in Skeleton.H
  [#164]\n\t* C++: Replace `%name-prefix` with `%define api.prefix` in bison files
  [#181]\n\t* C++: Fix a bug that appeared if you had a category named \"List\"\n\t*
  C, C++: Add usage output to the test program [#141]\n\t* C, C++: Fix a bug in the
  parser file when using -p [#172]\n\t* C, C++, OCaml, Java: Accept ' or \" as comment
  delimiters [#146]\n\t* Haskell: Generated code mostly hlint-warning free\n\t* Haskell:
  Small fixes [#166,#170,#222]\n\t* Java: Add an experimental ANTLR4 backend [#155]\n\t*
  Java: Add support for passing line numbers to parser [#217,#224,#226]\n\t* OCaml:
  Reserved symbols now have a higher precedence than predefined\n\t  tokens as in
  Haskell\n\t* Some updates of the documentation [#211,#223]\n\t* And various small
  fixes [#139,#159,#195,#201,#215]\n\n2.8.1 Grégoire Détrez <gregoire.detrez@gu.se>
  \ February 2016\n\t* Fix compatibility with GHC 7.10.2 and Alex 3.14\n\t* Fixed
  #160\n\n2.8 Grégoire Détrez <gregoire.detrez@gu.se>  May 2015\n\t* Builds with ghc
  7.10.1\n\t* Add support for JFlex (java)\n\t* Add an option to generate files in
  an other directory\n\t* Add an experimental option that turns the AST into a parametrized\n\t
  \ functor (in Haskell only)\n\t* New pygment backend to generate syntax highlighters\n\t*
  Bug fixes\n\n2.7.1 Grégoire Détrez <gregoire.detrez@gu.se> October 2014\n\t* Generated
  haskell code is now warning free\n\t* Removed unused terminal in happy\n\t* Correctly
  escape backslashes in symbols\n\t* Fix problem that was preventing custom tokens
  to work in OCaml if\n\tthey conflict with the build-in Ident\n\t* BNFC build is
  also warning free (ghc 7.4.2)\n\t* Test programs return non-zerro exit code on parse
  error\n\n2.7.0.0 Grégoire Détrez <gregoire.detrez@gu.se> September 2014\n\t* Add
  token support for Ocaml\n\t* New option parser\n\t* Adds an optional argument to
  change Makefile name\n\t* Add a --ghc option to derive Data, Typeable, Generic in
  Haskell\n\t* New online documentation (https://bnfc.readthedocs.org)\n\t* Derive
  ``Read`` for newtype decls in Haskell\n\t* New option to get the version number
  --version\n\t* Remove the F# backend\n\t* Remove the Java4 backend\n\t* New Applicative
  and Alternative instances to ``Err``\n\t* Remove the coupling between building the
  parser and the pdf from\n\tlatex\n\t* Improvement to the CNF Backend\n\t* Bug fixes
  #92, #21, #34, #33, #90, #30, #60\n"
basic-deps:
  base: ! '>=4.6 && <5'
  filepath: -any
  process: -any
  array: -any
  containers: -any
  mtl: -any
  deepseq: -any
  pretty: ! '>=1.1 && <1.2'
  directory: -any
all-versions:
- 2.4.1.1
- 2.4.1.2
- 2.4.2.0
- 2.4.2.1
- 2.5.0
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.0.3
- 2.7.0.0
- 2.7.0.1
- 2.7.1
- '2.8'
- 2.8.1
- 2.8.2
author: ''
latest: 2.8.2
description-type: haddock
description: ! 'The BNF Converter is a compiler construction tool generating a compiler
  front-end

  from a Labelled BNF grammar. It was originally written to generate Haskell,

  but can also be used for generating Java, C, C++, C#, Ocaml and XML.


  Given a Labelled BNF grammar the tool produces:

  an abstract syntax as a Haskell, C, C++, C#, Ocaml module or Java directory,

  a case skeleton for the abstract syntax in the same language,

  an Alex, JLex, or Flex lexer generator file,

  a Happy, CUP, Bison, or Antlr parser generator file,

  a pretty-printer as a Haskell, Java, C, C++, C#, or Ocaml module,

  an XML representation,

  a Latex file containing a readable specification of the language.'
license-name: GPL-2.0-only
