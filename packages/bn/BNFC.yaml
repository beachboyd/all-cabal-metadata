homepage: http://bnfc.digitalgrammars.com/
changelog-type: text
hash: 1979258f40c023492cea1df6f4be038c2652cc0ac739c1cba32d1f3ed9b3beeb
test-bench-deps:
  base: '>=4.8 && <5'
  time: -any
  hspec: -any
  filepath: -any
  process: -any
  doctest: '>=0.8'
  semigroups: -any
  HUnit: -any
  array: -any
  containers: -any
  mtl: '>=2.2.1'
  temporary: -any
  deepseq: -any
  QuickCheck: '>=2.5'
  pretty: -any
  directory: -any
maintainer: bnfc-dev@googlegroups.com
synopsis: A compiler front-end generator.
changelog: "2.8.4 Andreas Abel <andreas.abel@gu.se>  October 2020\n\t* GHC versions
  7.10 - 8.10 supported, dropped GHC 7.6 and 7.8\n\t* LBNF: whitespace list separators
  are now accepted; treated like \"\" [#70]\n\t* `define` pragma now implemented by
  all maintained backends [#266, #285]\n\t* BNFC performs more sanity checks on the
  grammar, reports errors with source locations [#186, #213, #214]\n\t* option `--check`
  to only perform sanity checks [#286]\n\t* Backends now more resilient against keyword
  and name clashes (e.g. via qualified imports) [#278, #289]\n\t* Haskell: new option
  --text-token to use Data.Text instead of String in the lexer [#167]\n\t* Haskell:
  allow block comment delimiters of any length [#169, #202]\n\t* Haskell: define Err
  monad as Either String [#273], migration guide at https://bnfc.readthedocs.io/en/v2.8.4/user_guide.html#haskell-backend\n\t*
  Haskell: IsString instances for Ident-like token types [#192]\n\t* C/C++/Java: support
  multiple block comment forms per grammar [#202]\n\t* C++(STL): parser now throws
  exception on parse error [#288]\n\t* C++: fixed quadratic behavior in C++-generated
  printer (regression in 2.8.2)\n\t* Java: escape JFlex special characters [#299]\n\t*
  Java/ANTLR: emit start rules to work around ANTLR issue #2689 [#272]\n\t* Ocaml:
  new flag --menhir to generate parser with menhir instead of ocamlyacc\n        *
  Bug fixes: #163, #169, #196, #212, #235, #256, #264, #269, #274, #276, #277, #279,
  #282, #283, #290\n\t* Fact-checking and revising LBNF documentation at https://bnfc.readthedocs.io/en/v2.8.4/lbnf.html\n\n2.8.3
  Andreas Abel <andreas.abel@gu.se>  August 2019\n\t* GHC 8.8 compatibility\n\t* Stack
  installation supported by provided .yaml files [#198]\n\t* Unicode support in lexer,
  excl. C, C++ and Ocaml [#249]\n\t* LBNF: support \\r (carriage return) and \\f (form
  feed) in token declaration [#257]\n\t* LBNF: allow numbered categories (like Foo2)
  independent of coercions [#210]\n\t* Agda: new (experimental) backend, providing
  bindings to AST/parser/printer of Haskell backend\n\t* C: supports now the -l option
  to give error locations [#238]\n\t* C: correct function names in generated skeletons
  [#239]\n\t* C, C++: handle regular expression difference (subtraction) correctly
  [#237]\n\t* Haskell: generates now more fine-grained Makefile that invokes bnfc
  on changed .cf file\n\t* Haskell: use qualified import of AST in generated printer
  [#128,#228]\n\t* Haskell: printer code no longer produces deprecation warning concerning
  OverlappingInstances [#233]\n\t* Haskell/CNF: fixed problem with Any type in generated
  code [#216]\n\t* Haskell/CNF: generated test program now same name (Test) as w/o
  --cnf\n\t* Haskell/GLR: correct module header in .y file [#252]\n\n2.8.2 Andreas
  Abel <andreas.abel@gu.se>  November 2018\n\t* GHC 8.4 compatibility [#227,#236]\n\t*
  bnfc now puts current timestamp on all created files, even unchanged ones [#219]\n\t*
  bnfc is now more accepting about border-line terminals [#149]\n\t* Improved error
  messages [#144] in particular on undefined categories [#151]\n\t* C: Emit correct
  function prototypes [#185]\n\t* C++: Fix buffer overrun in pretty printer [#242]\n\t*
  C++: Fix regression introduced in 2.8 in Skeleton.H [#164]\n\t* C++: Replace `%name-prefix`
  with `%define api.prefix` in bison files [#181]\n\t* C++: Fix a bug that appeared
  if you had a category named \"List\"\n\t* C, C++: Add usage output to the test program
  [#141]\n\t* C, C++: Fix a bug in the parser file when using -p [#172]\n\t* C, C++,
  OCaml, Java: Accept ' or \" as comment delimiters [#146]\n\t* Haskell: Generated
  code mostly hlint-warning free\n\t* Haskell: Small fixes [#166,#170,#222]\n\t* Java:
  Add an experimental ANTLR4 backend [#155]\n\t* Java: Add support for passing line
  numbers to parser [#217,#224,#226]\n\t* OCaml: Reserved symbols now have a higher
  precedence than predefined\n\t  tokens as in Haskell\n\t* Some updates of the documentation
  [#211,#223]\n\t* And various small fixes [#139,#159,#195,#201,#215]\n\n2.8.1 Grégoire
  Détrez <gregoire.detrez@gu.se>  February 2016\n\t* Fix compatibility with GHC 7.10.2
  and Alex 3.14\n\t* Fixed #160\n\n2.8 Grégoire Détrez <gregoire.detrez@gu.se>  May
  2015\n\t* Builds with ghc 7.10.1\n\t* Add support for JFlex (java)\n\t* Add an option
  to generate files in an other directory\n\t* Add an experimental option that turns
  the AST into a parametrized\n\t  functor (in Haskell only)\n\t* New pygment backend
  to generate syntax highlighters\n\t* Bug fixes\n\n2.7.1 Grégoire Détrez <gregoire.detrez@gu.se>
  October 2014\n\t* Generated haskell code is now warning free\n\t* Removed unused
  terminal in happy\n\t* Correctly escape backslashes in symbols\n\t* Fix problem
  that was preventing custom tokens to work in OCaml if\n\tthey conflict with the
  build-in Ident\n\t* BNFC build is also warning free (ghc 7.4.2)\n\t* Test programs
  return non-zerro exit code on parse error\n\n2.7.0.0 Grégoire Détrez <gregoire.detrez@gu.se>
  September 2014\n\t* Add token support for Ocaml\n\t* New option parser\n\t* Adds
  an optional argument to change Makefile name\n\t* Add a --ghc option to derive Data,
  Typeable, Generic in Haskell\n\t* New online documentation (https://bnfc.readthedocs.org)\n\t*
  Derive ``Read`` for newtype decls in Haskell\n\t* New option to get the version
  number --version\n\t* Remove the F# backend\n\t* Remove the Java4 backend\n\t* New
  Applicative and Alternative instances to ``Err``\n\t* Remove the coupling between
  building the parser and the pdf from\n\tlatex\n\t* Improvement to the CNF Backend\n\t*
  Bug fixes #92, #21, #34, #33, #90, #30, #60\n"
basic-deps:
  base: '>=4.8 && <5'
  time: -any
  filepath: -any
  process: -any
  semigroups: -any
  array: -any
  containers: -any
  mtl: '>=2.2.1'
  deepseq: -any
  pretty: '>=1.1 && <1.2'
  directory: -any
all-versions:
- 2.4.1.1
- 2.4.1.2
- 2.4.2.0
- 2.4.2.1
- 2.5.0
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.0.3
- 2.7.0.0
- 2.7.0.1
- 2.7.1
- '2.8'
- 2.8.1
- 2.8.2
- 2.8.3
- 2.8.4
author: ''
latest: 2.8.4
description-type: haddock
description: |-
  The BNF Converter is a compiler construction tool generating a compiler front-end
  from a Labelled BNF grammar. It was originally written to generate Haskell code,
  but can also be used for generating Agda, C, C++, C#, Java, Ocaml and XML code.

  Given a Labelled BNF grammar the tool produces:
  an abstract syntax as a Haskell, Agda, C, C++, C#, Ocaml module or Java directory,
  a case skeleton for the abstract syntax in the same language,
  an Alex, JLex, or Flex lexer generator file,
  a Happy, CUP, Bison, or Antlr parser generator file,
  a pretty-printer as a Haskell, Agda, C, C++, C#, Java, or Ocaml module,
  an XML representation,
  a LaTeX file containing a readable specification of the language.
license-name: GPL-2.0-only
