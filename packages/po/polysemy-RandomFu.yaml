homepage: https://github.com/adamConnerSax/polysemy-Extra#readme
changelog-type: markdown
hash: 5db4a7026f57ae4668dbaab6f427c34cd12c3bc91932cbbc0197a85a11c2172b
test-bench-deps:
  polysemy-plugin: ! '>0.2.0.0 && <0.4.0.0'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.0'
  text: ! '>=1.1.0.0 && <1.3.0.0'
  polysemy-zoo: -any
  polysemy-RandomFu: -any
  random-fu: ! '>=0.2.5.0 && <0.3.0.0'
  polysemy: ! '>=0.3'
  random-source: ! '>=0.3 && <0.4.0.0'
  vector: ! '>=0.7 && <0.13'
maintainer: adam_conner_sax@yahoo.com
synopsis: Experimental, RandomFu effect and interpreters for polysemy
changelog: |+
  ## v0.3.0.0
  - Fixed runRandomSource to make it possible to run with sources where the MonadRandom is not Sem r.  (Thanks to @Infinisil !)
  - Added test to RandomFuSpec for the above change (Also, thanks to @Infinisil)
  - Bumped version number accordingly

  ## 0.2.0.0
  - Changes to keep up with ConstraintAbsorber changes in polysemy-zoo


  ## 0.1.0.0 (2019-06-14)
  - Initial Release with RandomFu effect/intepreters



basic-deps:
  polysemy-plugin: ! '>0.2.0.0 && <0.4.0.0'
  base: ! '>=4.7 && <5'
  polysemy-zoo: ! '>=0.3'
  random-fu: ! '>=0.2.5.0 && <0.3.0.0'
  polysemy: ! '>=0.3'
  random-source: ! '>=0.3 && <0.4.0.0'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: Adam Conner-Sax
latest: 0.3.0.0
description-type: markdown
description: "# polysemy-RandomFu v0.2.0.0\n\n[![Build Status][travis-badge]][travis]\n[![Hackage][hackage-badge]][hackage]\n[![Hackage
  Dependencies][hackage-deps-badge]][hackage-deps]\n\n## Summary\n- Polysemy effect
  and intepreters to use the random-fu library in a polysemy effect union (like an
  mtl stack).\n- Includes a constraint \"absorber\" (see https://github.com/isovector/polysemy-zoo/blob/master/src/Polysemy/ConstraintAbsorber.hs)
  for\nthe random-fu ```MonadRandom``` typeclass.\n\n## Example (from the tests)\n```haskell\nimport
  \          Polysemy\nimport           Polysemy.RandomFu\n\nimport qualified Data.Random
  \                  as R\nimport qualified Data.Random.Source.PureMT     as R\n\ngetRandomInts
  :: Member RandomFu r => Int -> Sem r [Int]\ngetRandomInts nDraws =\n  sampleRVar
  $ M.replicateM nDraws (R.uniform 0 (100 :: Int))\n  \nmain :: IO ()\nmain = do\n
  \ seed <- R.newPureMT\n  putStrLn . show $ runM . runRandomIOPureMT (R.pureMT seed)
  $ getRandomInts 5\n```\nshould print a list of 5 pseudo-random integers. \nThey
  will be different each time you run because the ```newPureMT``` function \nreturns
  a different seed each time it's called.  If you replace that seed in \nthe ```R.pureMT```
  argument to ```runRandomIOPureMT``` with a fixed number\nthen you will get the *same*
  pseudo-random sequences each time.  This can be\nuseful for testing.\n\n## Notes\n-
  See the tests (in https://github.com/adamConnerSax/Polysemy-Extra/blob/master/polysemy-RandomFu/test/RandomFuSpec.hs)
  \nfor more details about how to use this effect\n\n[travis]:        <https://travis-ci.org/adamConnerSax/polysemy-extra>\n[travis-badge]:
  \ <https://travis-ci.org/adamConnerSax/polysemy-Extra.svg?branch=master>\n[hackage]:
  \      <https://hackage.haskell.org/package/polysemy-RandomFu>\n[hackage-badge]:
  <https://img.shields.io/hackage/v/polysemy-RandomFu.svg>\n[hackage-deps-badge]:
  <https://img.shields.io/hackage-deps/v/polysemy-RandomFu.svg>\n[hackage-deps]: <http://packdeps.haskellers.com/feed?needle=polysemy-RandomFu>\n"
license-name: BSD-3-Clause
