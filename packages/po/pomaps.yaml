homepage: https://github.com/sgraf812/pomaps#readme
changelog-type: markdown
hash: e719de3fdf4eb0a27938fcfc83801e8007b9b70f58943e1f0ef331242425c610
test-bench-deps:
  base: ! '>4 && <5'
  tasty-hspec: ! '>=1.1'
  criterion: -any
  doctest: -any
  lattices: <2
  containers: ! '>=0.5.9.2'
  tasty-quickcheck: -any
  ChasingBottoms: -any
  pomaps: -any
  random: -any
  tasty: ! '>=0.11'
  deepseq: -any
  Glob: -any
  vector: -any
maintainer: Sebastian Graf <sgraf1337@gmail.com>
synopsis: Maps and sets of partial orders
changelog: ! "# Change log\r\n\r\n`pomaps` follows the [PVP][1].\r\nThe change log
  is available [on GitHub][2].\r\n\r\n[1]: https://pvp.haskell.org/\r\n[2]: https://github.com/sgraf812/pomaps/releases\r\n"
basic-deps:
  base: ! '>=4.6.0.0 && <4.12'
  lattices: ! '>=1.7 && <2'
  containers: ! '>=0.5.9.2 && <=0.5.11.0'
  ghc-prim: ! '>=0.4 && <0.6'
  deepseq: ! '>=1.1 && <1.5'
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
author: ''
latest: '0.0.0.4'
description-type: markdown
description: ! "# [`pomaps`][pomaps] [![Build Status](https://travis-ci.org/sgraf812/pomaps.svg?branch=master)](https://travis-ci.org/sgraf812/pomaps)
  [![Hackage](https://img.shields.io/hackage/v/pomaps.svg)](https://hackage.haskell.org/package/pomaps)\r\n\r\nReasonably
  fast maps (and possibly sets) based on keys satisfying [`PartialOrd`](https://hackage.haskell.org/package/lattices-1.6.0/docs/Algebra-PartialOrd.html#t:PartialOrd).\r\n\r\nThis
  package tries to load off as much work as possible to the excellent [`containers`](https://hackage.haskell.org/package/containers)
  library, in order to achieve acceptable performance.\r\nThe interface is kept as
  similar to [`Data.Map.{Strict,Lazy}`](https://hackage.haskell.org/package/containers/docs/Data-Map-Strict.html)
  as possible, which is an excuse for somewhat lacking documentation.\r\n\r\n`POMap`s
  basically store a decomposition of totally ordered chains (e.g. something `Map`s
  can handle).\r\nFunctionality and strictness properties should be pretty much covered
  by the testsuite.\r\nBut it's not battle-tested yet, so if you encounter space leaks
  in the implementation, let me know.\r\n\r\nA rather naive implementation leads to
  `O(w*n*log n)` lookups, where `w` is the width of the decomposition (which should
  be the size of the biggest anti-chain).\r\nThis is enough for me at the moment to
  get things going, but there is room for improvement ([Sorting and Selection in Posets](https://arxiv.org/abs/0707.1532)).\r\nLet
  me know if things are too slow and I'll see what I can do!\r\n\r\n[pomaps]: https://github.com/sgraf812/pomaps\r\n"
license-name: MIT
