homepage: https://github.com/sgraf812/pomaps#readme
changelog-type: markdown
hash: 5bf729534bc074e6d549c1963dd1c28e17b4e1f68ab733b89211d9e558d57630
test-bench-deps:
  base: ! '>4 && <5'
  tasty-hspec: -any
  criterion: -any
  doctest: -any
  lattices: <2
  containers: ! '>=0.5.9.2'
  tasty-quickcheck: -any
  ChasingBottoms: -any
  pomaps: -any
  random: -any
  tasty: -any
  deepseq: -any
  Glob: -any
  vector: -any
maintainer: Sebastian Graf
synopsis: Maps and sets of partial orders
changelog: ! '# Change log


  pomaps uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/sgraf812/pomaps/releases

'
basic-deps:
  base: ! '>=4.6.0.0 && <4.11'
  lattices: ! '>=1.7 && <2'
  containers: ! '>=0.5.9.2 && <=0.5.10.2'
  ghc-prim: ! '>=0.4 && <0.6'
  deepseq: ! '>=1.1 && <1.5'
all-versions:
- '0.0.0.1'
author: ''
latest: '0.0.0.1'
description-type: markdown
description: ! "# [pomaps][] [![Build Status](https://travis-ci.org/sgraf812/pomaps.svg?branch=master)](https://travis-ci.org/sgraf812/pomaps)\n\nReasonably
  fast maps (and possibly sets) based on keys satisfying [`PartialOrd`](https://hackage.haskell.org/package/lattices-1.6.0/docs/Algebra-PartialOrd.html#t:PartialOrd).\n\nThis
  package tries to load off as much work as possible to the excellent [`containers`](https://hackage.haskell.org/package/containers)
  library, in order to achieve acceptable performance.\nThe interface is kept as similar
  to [`Data.Map.{Strict/Lazy}`](https://hackage.haskell.org/package/containers-0.5.10.2/docs/Data-Map-Strict.html)
  as possible, which is an excuse for somewhat lacking documentation.\n\n`POMap`s
  basically store a decomposition of totally ordered chains (e.g. something `Map`s
  can handle). \nFunctionality and strictness properties should be pretty much covered
  by the testsuite. \nBut it's not battle-tested yet, so if you encounter space leaks
  in the implementation, let me know.\n\nA rather naive implementation leads to `O(w*n*log
  n)` lookups, where `w` is the width of the decomposition (which should be the size
  of the biggest anti-chain).\nThis is enough for me at the moment to get things going,
  but there is room for improvement ([Sorting and Selection in Posets](https://arxiv.org/abs/0707.1532)).\nLet
  me know if things are too slow and I'll see what I can do!\n\n[pomaps]: https://github.com/sgraf812/pomaps\n"
license-name: MIT
