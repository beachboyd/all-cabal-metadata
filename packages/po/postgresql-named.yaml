homepage: https://github.com/cocreature/postgresql-named#readme
changelog-type: markdown
hash: 7acbfd331a7dae9f09da27d916ad836e3ea4e51b3ef1249ca2d0fc984fb2c4cf
test-bench-deps:
  base: -any
  hspec: ! '>=2.4 && <2.5'
  postgresql-named: -any
  postgresql-simple: -any
  generics-sop: -any
maintainer: moritz.kiefer@purelyfunctional.org
synopsis: Generic deserialization of PostgreSQL rows based on column names
changelog: ! '0.1.0

  ---

  * Initial release.

'
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  extra: ! '>=1.5 && <1.6'
  base: ! '>=4.9 && <5'
  postgresql-libpq: ! '>=0.9 && <0.10'
  utf8-string: -any
  postgresql-simple: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  generics-sop: ! '>=0.3 && <0.4'
all-versions:
- 0.1.0
author: Moritz Kiefer
latest: 0.1.0
description-type: markdown
description: ! "# postgresql-named\n\n[![Travis](https://img.shields.io/travis/cocreature/postgresql-named.svg)]()\n[![Hackage](https://img.shields.io/hackage/v/postgresql-named.svg)]()\n\nLibrary
  for deserializing rows in `postgresql-simple` (or any other\nlibrary that uses `FromRow`)
  based on column names instead of the\npositions of columns.\n\n## Example\n\n```haskell\n{-#
  LANGUAGE DeriveGeneric #-}\nimport           Database.PostgreSQL.Simple.FromRow\nimport
  \          Database.PostgreSQL.Simple.FromRow.Named\nimport qualified GHC.Generics
  as GHC\nimport           Generics.SOP\n\ndata Foobar = Foobar\n  { foo :: !String\n
  \ , bar :: !Int\n  } deriving (Show, Eq, Ord, GHC.Generic)\n\n\ninstance Generic
  Foobar\n\ninstance HasDatatypeInfo Foobar\n\ninstance FromRow Foobar where\n  fromRow
  = gFromRow\n```\n"
license-name: BSD-3-Clause
