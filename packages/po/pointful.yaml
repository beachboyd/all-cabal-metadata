homepage: http://github.com/23Skidoo/pointful
changelog-type: markdown
hash: 44f7cab1af565e2ca57a22a4af27334bb7d9e6215eca70b1fd97c7f4428a0490
test-bench-deps: {}
maintainer: Mikhail Glushenkov <mikhail.glushenkov@gmail.com>
synopsis: Pointful refactoring tool
changelog: ! '# pointful-1.0.11.0 (2018-03-20)

  * GHC 8.4.1 support.

'
basic-deps:
  haskell-src-exts-simple: ! '>=1.18 && <1.20 || ^>=1.20'
  base: ! '>=4.7 && <4.12'
  syb: ! '>=0.3 && <0.7 || ^>=0.7'
  containers: ! '>=0.4 && <0.5 || ^>=0.5'
  mtl: ! '>=2 && <2.2 || ^>=2.2'
  transformers: ! '>=0.2 && <0.5 || ^>=0.5'
  pointful: -any
all-versions:
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.11.0
author: Thomas Jäger, Bertram Felgenhauer, James Cook et al.
latest: 1.0.11.0
description-type: markdown
description: ! '# pointful [![Build Status](https://secure.travis-ci.org/23Skidoo/pointful.png?branch=master)](http://travis-ci.org/23Skidoo/pointful)


  Stand-alone command-line version of the pointful plugin for Lambdabot.


  This tool transforms Haskell expressions from the implicit pointfree style to the
  explicit pointful style. This makes it easier to understand such expressions.


  For example, consider the expression `max 100 . uncurry max`, which is in pointfree
  style. In pointful style, this becomes `\ tuple -> max 100 ((uncurry max) tuple)`.
  With a little additional investigation around `uncurry max`, it can be determined
  that this expression takes a 2-tuple and returns the maximum of its elements and
  100.


  ## Installation


  ```

  cabal install pointful

  ```


  ## Usage


  ```

  $ pointful "max 100 . uncurry max"

  \ c -> max 100 ((uncurry max) c)

  ```


  ## Credits


  Pointful plugin code taken from Lambdabot. Originally written by Thomas Jäger (?).

'
license-name: BSD-3-Clause
