homepage: https://github.com/isovector/polysemy#readme
changelog-type: markdown
hash: 84d0ed7b206bf8f7791ef72774225592c76e8d2fcac2cecc9d7c581d2e6af443
test-bench-deps:
  polysemy-plugin: -any
  ghc: ! '>=8.6.3 && <8.7'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.6.0 && <2.7'
  ghc-tcplugins-extra: ==0.3.*
  polysemy: ! '>=0.1.2.0 && <0.2'
maintainer: sandy@sandymaguire.me
synopsis: Disambiguate obvious uses of effects.
changelog: |
  # Changelog for polysemy-plugin

  ## 0.1.0.0 (2019-04-27)

  - Initial release


  ## Unreleased changes
basic-deps:
  ghc: ! '>=8.6.3 && <8.7'
  base: ! '>=4.7 && <5'
  ghc-tcplugins-extra: ==0.3.*
  polysemy: ! '>=0.1.2.0 && <0.2'
all-versions:
- 0.1.0.0
author: Sandy Maguire
latest: 0.1.0.0
description-type: markdown
description: |+
  # polysemy-plugin

  [![Build Status](https://api.travis-ci.org/isovector/polysemy.svg?branch=master)](https://travis-ci.org/isovector/polysemy)
  [![Hackage](https://img.shields.io/hackage/v/polysemy-plugin.svg?logo=haskell)](https://hackage.haskell.org/package/polysemy-plugin)

  ## Dedication

  > It doesn't matter how beautiful your theory is, it doesn't matter how smart
  > you are. If it doesn't agree with experiment, it's wrong.
  >
  > Richard Feynman


  ## Overview

  A typechecker plugin that can disambiguate "obvious" uses of effects in
  [`polysemy`](https://hackage.haskell.org/package/polysemy).


  ## Example

  Consider the following program:

  ```haskell
  foo :: Member (State Int) r => Sem r ()
  foo = put 10
  ```

  What does this program do? Any human will tell you that it changes the state of
  the `Int` to 10, which is clearly what's meant.

  Unfortunately, `polysemy` can't work this out on its own. Its reasoning is
  "maybe you wanted to change some other `State` effect which is *also* a `Num`,
  but you just forgot to add a `Member` constraint for it."

  This is obviously insane, but it's the way the cookie crumbles.
  `polysemy-plugin` is a typechecker plugin which will disambiguate the above
  program (and others) so the compiler will do what you want.


  ## Usage

  Add the following line to your package configuration:

  ```
  ghc-options: -fplugin=Polysemy.Plugin
  ```


  ## Limitations

  The `polysemy-plugin` will only disambiguate effects if there is exactly one
  relevant constraint in scope. For example, it will *not* disambiguate the
  following program:

  ```haskell
  bar :: Members '[ State Int
                  , State Double
                  ] r => Sem r ()
  bar = put 10
  ```

  because it is now unclear whether you're attempting to set the `Int` or the
  `Double`. Instead, you can manually write a type application in this case.

  ```haskell
  bar :: Members '[ State Int
                  , State Double
                  ] r => Sem r ()
  bar = put @Int 10
  ```


  ## Acknowledgments

  This plugin is copied almost verbatim from [`simple-effects`](https://hackage.haskell.org/package/simple-effects).

license-name: BSD-3-Clause
