homepage: ''
changelog-type: ''
hash: 7e189da05eae3be3761475e50b23bc63e155bab7dee7d54ebeb1a5ac328940e0
test-bench-deps: {}
maintainer: alex.biehl@gmail.com
synopsis: SMTP server library to receive emails from within Haskell programs.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.0.2'
  base: ! '>=4 && <=5'
  data-default-class: ! '>=0.0.1'
  pipes-bytestring: -any
  uuid: ! '>=1.3.3'
  stringsearch: -any
  tls: ! '>=1.2.6'
  network: ! '>=2.4.1.2'
  postie: -any
  pipes-parse: ! '>=3.0.1'
  pipes: ! '>=4.1.0'
  cprng-aes: ! '>=0.5.2'
  mtl: ! '>=2.1.2'
  attoparsec: ! '>=0.10.4.0'
  transformers: ! '>=0.3.0.0'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.5.0.0
author: Alex Biehl
latest: 0.5.0.0
description-type: haddock
description: ! '`postie` is a little smtp server library for receiving emails. It
  is currently

  in a very early stage and not yet fully standard compatible although the standard

  protocol is already supported.


  * At the time of writing parameters on smtp commands can not be parsed.


  * Handler functions need to return more detailed information to cancel a transaction.


  `postie` supportes hooks on key commands in an smtp session like


  * on connection open and close


  * on /MAIL FROM/ command e.g. to intercept transaction if sender is blacklisted


  * on /RCPT TO/ command e.g. to check if recipient is existent on your server


  * and many more


  To run `postie` you only need to supply a function which takes a `Mail` and

  return `Accepted` or `Rejected`. `mailBody` is a `pipes` `Producer` which

  streams the encoded body directly to your application code. The body is not

  parsed by `postie` since it depends on what the application wants to do with

  the mail data. Eventually I will create a seperate package for parsing mime

  messages with `pipes-parse` when postie becomes more stable and standard compliant.'
license-name: BSD-3-Clause
