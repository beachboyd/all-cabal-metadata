homepage: https://github.com/pontarius/pontarius-xmpp/
changelog-type: markdown
hash: e3954a8bdfecb08827352041f6423150f7690d75df2ffa656bfcbfe520471d26
test-bench-deps:
  tasty-th: -any
  stm: -any
  Cabal: -any
  base: -any
  configurator: -any
  hspec: -any
  text: -any
  tasty-hspec: -any
  tls: -any
  filepath: -any
  criterion: -any
  network: -any
  async: -any
  doctest: -any
  conduit: -any
  data-default: -any
  HUnit: -any
  smallcheck: -any
  containers: -any
  ranges: -any
  lens: -any
  quickcheck-instances: -any
  xml-types: -any
  hslogger: -any
  stringprep: ! '>=1.0.0'
  tasty-quickcheck: -any
  mtl: -any
  xml-picklers: -any
  tasty-hunit: -any
  transformers: -any
  tasty: -any
  QuickCheck: -any
  pontarius-xmpp: -any
  derive: -any
  hspec-expectations: -any
  directory: -any
maintainer: info@jonkri.com
synopsis: An XMPP client library
changelog: ! "# 0.5.1 to 0.6.0\n* Changed roster update callback to take RosterUpdate
  type\n* Added onrosterPushL lens\n\n# 0.5.0 to 0.5.1\n* Fixed input logger choking
  on long non-ascii messages\n\n# 0.4.5 to 0.5.0\n* Support for the session element
  is now determined from stream features, the\n  establishSession option was removed\n*
  The parser can now handle nonzas. Nonzas can be handled with a plugin\n* An initial
  roster can now be set with the initialRoster session configuration\n  option\n*
  The JID parser can now handle \"/\" and \"@\" characters in the resource part\n"
basic-deps:
  exceptions: ! '>=0.6'
  void: ! '>=0.5.5'
  bytestring: ! '>=0.9.1.9'
  lens-family: -any
  split: ! '>=0.1.2.3'
  stm: ! '>=2.4'
  xml-conduit: ! '>=1.1.0.7'
  base: ! '>4 && <5'
  base64-bytestring: ! '>=0.1.0.0'
  text: ! '>=0.11.1.5'
  unbounded-delays: ! '>=0.1'
  tls: ! '>=1.3.9'
  crypto-api: ! '>=0.9'
  network: ! '>=2.3.1.0'
  pureMD5: ! '>=2.1.2.1'
  lifted-base: ! '>=0.1.0.1'
  conduit: ! '>=1.3 && <1.4'
  data-default: ! '>=0.2'
  containers: ! '>=0.4.0.0'
  x509-system: ! '>=1.4'
  xml-types: ! '>=0.3.1'
  binary: ! '>=0.4.1'
  cryptohash-cryptoapi: ! '>=0.1'
  hslogger: ! '>=1.1.0'
  stringprep: ! '>=1.0.0'
  mtl: ! '>=2.0.0.0'
  crypto-random: ! '>=0.0.5'
  xml-picklers: ! '>=0.3.3'
  iproute: ! '>=1.2.4'
  attoparsec: ! '>=0.10.0.3'
  transformers: ! '>=0.3'
  random: ! '>=1.0.0.0'
  resourcet: ! '>=0.3.0'
  template-haskell: ! '>=2.5'
  dns: ! '>=3.0'
  profunctors: ! '>=4'
  cryptohash: ! '>=0.6.1'
all-versions:
- '0.0.2.0'
- '0.0.3.0'
- '0.0.4.0'
- '0.0.5.0'
- '0.0.6.0'
- '0.0.7.0'
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.1.0'
- '0.4.2.0'
- '0.4.2.1'
- '0.4.2.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
author: Philipp Balzarek
latest: '0.5.5'
description-type: markdown
description: ! "Welcome to Pontarius XMPP!\n==========================\n\nPontarius
  XMPP is an active work in progress to build a Haskell XMPP client\nlibrary that
  implements the capabilities of [RFC 6120\n(\"XMPP CORE\")](http://tools.ietf.org/html/rfc6120),
  [RFC 6121 (\"XMPP\nIM\")](http://tools.ietf.org/html/rfc6121), and [RFC 6122 (\"XMPP\nADDR\")](http://tools.ietf.org/html/rfc6122).
  Pontarius XMPP is part of [the\nPontarius project](http://www.pontarius.org/), an
  effort to produce free and\nopen source, uncentralized, and privacy-aware software
  solutions.\n\nWhile in alpha, Pontarius XMPP works quite well and fulfills most
  requirements\nof the RFCs.\n\nPrerequisites\n-------------\n\nPontarius XMPP requires
  GHC 7.0, or later.\n\nYou will need the ICU Unicode library and it's header files
  in order to be able\nto build Pontarius XMPP. On Debian, you will need to install
  the *libicu-dev*\npackage. In Fedora, the package is called *libicu-devel*.\n\n_Note
  to users of GHC 7.0 and GHC 7.2:_ You will need *cabal-install*, version\n*0.14.0*
  or higher, or the build will fail with an \"unrecognized option:\n--disable-benchmarks\"
  error. The versions *1.16.0* and higher might not build on\nyour system; if so,
  install *0.14.0* with \"cabal install cabal-install-0.14.0\".\n\n_Note to users
  of GHC 7.2.1:_ Due to a bug, recent versions of the *binary*\npackage wont build
  without running \"ghc-pkg trust base\".\n\n_Note to users of GHC 7.0.1:_ You will
  want to configure your Cabal environment\n(including *cabal-install*) for version
  *0.9.2.1* of *bytestring*.\n\nGetting started\n---------------\n\nThe latest release
  of Pontarius XMPP, as well as its module API pages, can\nalways be found at [the
  Pontarius XMPP Hackage\npage](http://hackage.haskell.org/package/pontarius-xmpp/).\n\n_Note:_
  Pontarius XMPP is still in its Alpha phase. Pontarius XMPP is not yet\nfeature-complete,
  it may contain bugs, and its API may change between versions.\n\nThe first thing
  to do is to import the modules that we are going to use. We are\nalso using the
  OverloadedStrings LANGUAGE pragma in order to be able to type\n<code>Text</code>
  values like strings.\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import Network.Xmpp\n\n
  \   import Control.Monad\n    import Data.Default\n    import System.Log.Logger\n\nPontarius
  XMPP supports [hslogger](http://hackage.haskell.org/package/hslogger)\nlogging.
  Start by enabling console logging.\n\n    updateGlobalLogger \"Pontarius.Xmpp\"
  $ setLevel DEBUG\n\nWhen this is done, a <code>Session</code> object can be acquired
  by calling\n<code>session</code>. This object will be used for interacting with
  the library.\n\n    result <- session\n                 \"example.com\"\n                  (Just
  (\\_ -> ( [scramSha1 \"username\" Nothing \"password\"])\n                               ,
  Nothing))\n                  def\n\nThe three parameters above are the XMPP server
  realm, a SASL handler (for\nauthentication), and the session configuration settings
  (set to the default\nsettings). <code>session</code> will perform the necessary
  DNS queries to find\nthe address of the realm, connect, establish the XMPP stream,
  attempt to secure\nthe stream with TLS, authenticate, establish a concurrent interface
  for\ninteracting with the stream, and return the <code>Session</code> object.\n\nThe
  return type of <code>session</code> is <code>IO (Either XmppFailure\nSession)</code>.
  As <code>XmppFailure</code> is an\n<code>Control.Monad.Error</code> instance, you
  can utilize the\n<code>ErrorT</code> monad transformer for error handling. A more
  simple way of\ndoing it could be doing something like this:\n\n    sess <- case
  result of\n                Right s -> return s\n                Left e -> error
  $ \"XmppFailure: \" ++ (show e)\n\nNext, let us set our status to Online.\n\n    sendPresence
  def sess\n\nHere, <code>def</code> refers to the default <code>Presence</code> value,
  which\nis the same as <code>Presence Nothing Nothing Nothing Nothing Available\n[]</code>.\n\nNow,
  let's say that we want to receive all message stanzas, and echo the stanzas\nback
  to the sender. This can be done like so:\n\n    forever $ do\n        msg <- getMessage
  sess\n        case answerMessage msg (messagePayload msg) of\n            Just answer
  -> sendMessage answer sess\n            Nothing -> putStrLn \"Received message with
  no sender.\"\n\nYou don't need to worry about escaping your <code>Text</code> values
  - Pontarius\nXMPP (or rather, [xml-picklers](https://github.com/Philonous/xml-picklers))
  will\ntake care of that for you.\n\nAdditional XMPP threads can be created using
  <code>dupSession</code> and\n<code>forkIO</code>.\n\nFor a public domain example
  of a simple Pontarius XMPP (Cabal) project, refer to\nthe examples/echoclient directory.\n\nMore
  information\n----------------\n\nFeel free to [contact Jon Kristensen](http://www.jonkri.com/contact/)
  if you\nhave any questions or comments.\n\nYou are also welcome to join the #pontarius
  IRC channel at Freenode.\n"
license-name: BSD3
