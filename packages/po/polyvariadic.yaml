homepage: https://github.com/fgaz/polyvariadic
changelog-type: markdown
hash: 2c291b12c1ba9a0c19a959df0a8a716c261ce9a9344391f90092fe7b6160f8df
test-bench-deps:
  base: -any
  polyvariadic: -any
maintainer: Francesco Gazzetta <fgaz@fgaz.me>
synopsis: Creation and application of polyvariadic functions
changelog: |+
  # Revision history for polyvariadic

  ## 0.3.0.3  -- 2017-04-19

  * Fixed infinite loop on apply and apply'

  ## 0.3.0.2  -- 2017-12-19

  * Added readme to extra-source-files so it shows up on hackage

  ## 0.3.0.0  -- 2017-04-19

  * First public version.

basic-deps:
  base: ! '>=4.7 && <4.13'
  containers: ! '>=0.1 && <0.7'
all-versions:
- 0.3.0.3
author: Francesco Gazzetta
latest: 0.3.0.3
description-type: markdown
description: |+
  # polyvariadic

  **Creation and application of polyvariadic functions**

  [![Build Status](https://travis-ci.org/fgaz/polyvariadic.svg?branch=master)](https://travis-ci.org/fgaz/polyvariadic)
  [![Hackage](https://img.shields.io/hackage/v/polyvariadic.svg)](https://hackage.haskell.org/package/polyvariadic)

  For example, the classic printf:

  ```haskell
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE FlexibleContexts #-}
  import Data.Function.Polyvariadic
  import Data.Accumulator

  magicChar = '%'
  notMagicChar = (/= magicChar)

  data PrintfAccum = PrintfAccum { done :: String, todo :: String }

  instance Show x => Accumulator PrintfAccum x where
    accumulate x (PrintfAccum done (_:todo)) = PrintfAccum
                                                (done ++ show x ++ takeWhile notMagicChar todo)
                                                (dropWhile notMagicChar todo)
    accumulate _ acc = acc

  printf' str = polyvariadic
                 (PrintfAccum (takeWhile notMagicChar str) (dropWhile notMagicChar str))
                 done
  ```

  ```haskell
  >>> printf' "aaa%bbb%ccc%ddd" "TEST" 123 True
  "aaa\"TEST\"bbb123cccTrueddd"
  ```

license-name: BSD-3-Clause
