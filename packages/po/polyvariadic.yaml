homepage: https://github.com/fgaz/polyvariadic
changelog-type: markdown
hash: 8aba48fd77711f0f191bf656ef7b21378065e737cf19dd80e104e0b3922a0b01
test-bench-deps: {}
maintainer: francygazz@gmail.com
synopsis: Creation and application of polyvariadic functions
changelog: ! '# Revision history for polyvariadic


  ## 0.3.0.2  -- 2017-12-19


  * Added readme to extra-source-files so it shows up on hackage


  ## 0.3.0.0  -- 2017-04-19


  * First public version.


'
basic-deps:
  base: ! '>=4.7 && <4.11'
  containers: ! '>=0.1 && <0.6'
all-versions:
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
author: Francesco Gazzetta
latest: '0.3.0.2'
description-type: markdown
description: ! "# polyvariadic\n\n**Creation and application of polyvariadic functions**\n\n[![Build
  Status](https://travis-ci.org/fgaz/polyvariadic.svg?branch=master)](https://travis-ci.org/fgaz/polyvariadic)\n[![Hackage](https://img.shields.io/hackage/v/polyvariadic.svg)](https://hackage.haskell.org/package/polyvariadic)\n\nFor
  example, the classic printf:\n\n```haskell\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-#
  LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE FlexibleContexts #-}\nimport Data.Function.Polyvariadic\nimport
  Data.Accumulator\n\nmagicChar = '%'\nnotMagicChar = (/= magicChar)\n\ndata PrintfAccum
  = PrintfAccum { done :: String, todo :: String }\n\ninstance Show x => Accumulator
  PrintfAccum x where\n  accumulate x (PrintfAccum done (_:todo)) = PrintfAccum\n
  \                                             (done ++ show x ++ takeWhile notMagicChar
  todo)\n                                              (dropWhile notMagicChar todo)\n
  \ accumulate _ acc = acc\n\nprintf' str = polyvariadic\n               (PrintfAccum
  (takeWhile notMagicChar str) (dropWhile notMagicChar str))\n               done\n```\n\n```haskell\n>>>
  printf' \"aaa%bbb%ccc%ddd\" \"TEST\" 123 True\n\"aaa\\\"TEST\\\"bbb123cccTrueddd\"\n```\n\n"
license-name: BSD3
