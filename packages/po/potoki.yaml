homepage: https://github.com/metrix-ai/potoki
changelog-type: ''
hash: 6e0cf24485135985ee029283310b25d3c1b9d9669522beaaf469d4d615c8c61e
test-bench-deps:
  rerebase: ! '>=1.1 && <2'
  potoki: -any
  quickcheck-instances: ! '>=0.3.11 && <0.4'
  tasty-quickcheck: ! '>=0.9 && <0.10'
  tasty-hunit: ! '>=0.9 && <0.11'
  attoparsec: -any
  random: ! '>=1.1 && <2'
  tasty: ! '>=0.12 && <0.13'
  QuickCheck: ! '>=2.8.1 && <3'
maintainer: Metrix.AI Ninjas <ninjas@metrix.ai>
synopsis: Simple streaming in IO
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  base-prelude: <2
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1 && <2'
  potoki-core: ! '>=1.5 && <1.6'
  foldl: ! '>=1.3 && <2'
  unagi-chan: ! '>=0.4 && <0.5'
  hashable: ! '>=1 && <2'
  attoparsec: ! '>=0.13 && <0.15'
  transformers: ! '>=0.5 && <0.6'
  profunctors: ! '>=5.2 && <6'
  vector: ! '>=0.12 && <0.13'
  directory: ! '>=1.3 && <2'
all-versions:
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.7'
- '0.7.2'
- '0.7.3'
- '0.8'
- '0.9'
- '0.9.1'
- '0.10'
- '0.10.1'
- '0.10.2'
- '0.10.3'
- '0.10.4'
- '0.10.5'
author: Nikita Volkov <nikita.y.volkov@mail.ru>
latest: '0.10.5'
description-type: haddock
description: ! 'This library provides a new simpler approach to the IO-streaming problem.


  In difference to libraries like \"pipes\", \"conduit\", \"streaming\",

  this library is specialised to streaming in the IO monad,

  which greatly simplifies the abstractions that it provides.

  This simplification is motivated by the fact that the majority of streaming

  tasks are performed in IO anyway.


  Also, unlike the mentioned libraries,

  \"potoki\" API doesn''t treat streaming as a side operation in its abstractions,

  which allows it to express the composition of streams using the standard

  typeclass instances, thus simplifying the API even further.


  Naturally, being simpler limits the application area of this library.

  Thus it is not capable of transforming custom context monads and etc.

  It is a tradeoff, but, as we expect, the user will rarely be affected by it.


  Another benefit of being specialized to IO is the ability to optimize for performance
  better.

  It must however be mentioned that this is only theoretical and no benchmarks have
  yet been performed.


  In some of the mentioned regards \"potoki\" is similar to the \"io-streams\" library.

  However, unlike that library it approaches composition with the standard typeclass
  instances.

  Also, in difference to \"io-streams\", \"potoki\" doesn''t use exceptions for control-flow.

  In fact, \"potoki\" doesn''t use exceptions whatsoever,

  instead it makes failures explicit, using the standard @Either@ type.


  \"potoki\" comes with automated resource-management (acquisition and clean-up),

  concurrency and buffering features.'
license-name: MIT
