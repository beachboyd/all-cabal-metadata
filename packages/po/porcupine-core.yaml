homepage: https://github.com/tweag/porcupine#readme
changelog-type: ''
hash: 37919f2abf40e4f25b8fae6b58e3d6e0b67aa7ccd9022a01082369216cd6b588
test-bench-deps: {}
maintainer: Yves Par√®s <yves.pares@tweag.io>
synopsis: Express portable, composable and reusable data tasks and pipelines
changelog: ''
basic-deps:
  streaming: -any
  katip: ==0.8.*
  streaming-conduit: -any
  bytestring: -any
  unix: -any
  path: -any
  base: ! '>=4.10 && <5'
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  monad-bayes: -any
  safe-exceptions: -any
  clock: -any
  url: -any
  monad-control: -any
  filepath: -any
  streaming-utils: -any
  docrecords: ==0.1.*
  conduit: -any
  data-default: -any
  log-domain: -any
  containers: -any
  vinyl: -any
  lens: -any
  unliftio-core: -any
  cassava: -any
  binary: -any
  porcupine-core: -any
  store: -any
  formatting: -any
  funflow: ! '>=1.5.0'
  contravariant: -any
  zlib: -any
  mtl: -any
  foldl: -any
  hvega: -any
  hashable: -any
  transformers-base: -any
  attoparsec: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  deepseq: -any
  binary-orphans: -any
  streaming-bytestring: -any
  resourcet: -any
  aeson: -any
  template-haskell: -any
  yaml: -any
  profunctors: -any
  vector: -any
  reader-soup: ==0.1.*
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: ''
latest: 0.1.0.1
description-type: haddock
description: |-
  porcupine is centered around the PTask datatype, which represents a
  computation that will request access to some resources (both in read and write
  modes) and require some options (parameters, with docstrings and default
  values). PTasks are composable both sequentially and in parallel, into a
  pipeline of tasks. The resources and parameters are organized in a tree which
  will be automatically exposed to the outside world. This makes the pipeline
  self-documented, and makes it so any option or file required at some point by
  any task can be visualized and set or remapped (via a combination of a YAML or
  JSON config file and command-line arguments) before the pipeline will
  run. That means that the PTasks are completely agnostic of their data inputs,
  and that new data sources can be added without having to change any of the
  tasks' logic or even their types. This is done via the LocationAccessor
  typeclass. `porcupine-core` provides only access to local files (via
  resourcet), other location accessors will be in separate packages. See for
  instance the <https://hackage.haskell.org/package/porcupine-http> package to
  access HTTP urls. PTasks also provide caching thanks to the funflow
  package. See the README at <https://github.com/tweag/porcupine#README.md> and
  the examples in `porcupine-core` package.
license-name: MIT
