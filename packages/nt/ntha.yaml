homepage: https://github.com/zjhmale/ntha
changelog-type: ''
hash: cf5746f8c972f44fa2b191036ab1feb9e4a4fadb0129df87d8446fe28c3cc713
test-bench-deps:
  base: -any
  hspec: ! '>=1.3'
  containers: -any
  ntha: -any
  pretty: -any
maintainer: zjhmale@gmail.com
synopsis: A tiny statically typed functional programming language.
changelog: ''
basic-deps:
  haskeline: -any
  base: ! '>=4.7 && <5'
  monad-loops: -any
  array: -any
  containers: -any
  lens: -any
  mtl: ==2.2.*
  ntha: -any
  pretty: -any
  z3: ! '>=4.1.0'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.3
author: zjhmale
latest: 0.1.3
description-type: markdown
description: ! "# Ntha Programming Language\n\n[![Build Status](https://travis-ci.org/zjhmale/Ntha.svg?branch=master)](https://travis-ci.org/zjhmale/Ntha)\n[![zjhmale](https://img.shields.io/badge/author-%40zjhmale-blue.svg)](https://github.com/zjhmale)\n[![Haskell](https://img.shields.io/badge/language-haskell-red.svg)](https://en.wikipedia.org/wiki/Haskell_(programming_language))\n[![Hackage](https://img.shields.io/hackage/v/ntha.svg)](https://hackage.haskell.org/package/ntha)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/idrigen.svg)](https://hackage.haskell.org/package/ntha)\n\na
  tiny statically typed functional programming language.\n\n## Installation\n\n* brew
  install z3\n* cabal install ntha\n\n## Features\n\n* Global type inference with
  optional type annotations.\n* Lisp flavored syntax with Haskell like semantic inside.\n*
  Support basic types: Integer, Character, String, Boolean, Tuple, List and Record.\n*
  Support unicode keywords.\n* Support destructuring.\n* ADTs and pattern matching.\n*
  Haskell like type signature for type checking.\n* Refined types (still in early
  stage, just support basic arithmetic operations and propositinal logic, [here is
  some examples](https://github.com/zjhmale/Ntha/blob/master/examples/misc.ntha#L188-L195)),
  based on [z3-encoding](https://github.com/izgzhen/z3-encoding/tree/1d794c10db716ac9308e49bf4f5a115e14212f31)\n*
  Module system (still in early stage, lack of namespace control).\n* Support pattern
  matching on function parameters.\n* Lambdas and curried function by default.\n*
  Global and Local let binding.\n* Recursive functions.\n* If-then-else / Cond control
  flow.\n* Type alias.\n* Do notation.\n* Begin block.\n\n## Future Works\n\n* Atoms
  (need to handle mutable state in evaluation procedure, reference to the [implementation
  of Clea Programming Language](https://github.com/zjhmale/Clea/blob/master/src/Prologue.hs#L191-211)).\n*
  error propagation (try / catch).\n* Lazyness.\n* JIT backend.\n* Type-classes (desuger
  to Records).\n* Rank-N types ([a naive implementation of First-Class Polymorphism](https://github.com/zjhmale/HMF/tree/master/src/FCP)).\n*
  λπ\n* Fully type checked lisp like macros (comply with the internal design of Template
  Haskell).\n* TCO.\n\n## Screenshot\n\n![cleantha](http://i.imgur.com/i1BrztC.gif)\n\n##
  Example\n\n```Clojure\n(type Name String)\n(type Env [(Name . Expr)])\n\n(data Op
  Add Sub Mul Div Less Iff)\n\n(data Expr\n  (Num Number)\n  (Bool Boolean)\n  (Var
  Name)\n  (If Expr Expr Expr)\n  (Let [Char] Expr Expr)\n  (LetRec Name Expr Expr)\n
  \ (Lambda Name Expr)\n  (Closure Expr Env)\n  (App Expr Expr)\n  (Binop Op (Expr
  . Expr)))\n\n(let op-map {:add +\n             :sub -\n             :mul *\n             :div
  /\n             :less <\n             :iff =})\n\n(arith-eval : (α → (β → Z)) →
  ((α × β) → (Maybe Expr)))\n(ƒ arith-eval [fn (v1 . v2)]\n  (Just (Num (fn v1 v2))))\n\n(logic-eval
  : (α → (β → B)) → ((α × β) → (Maybe Expr)))\n(ƒ logic-eval [fn (v1 . v2)]\n  (Just
  (Bool (fn v1 v2))))\n\n(let eval-op\n  (λ op v1 v2 ⇒\n    (match (v1 . v2)\n      (((Just
  (Num v1)) . (Just (Num v2))) ⇒\n        (match op\n          (Add ⇒ (arith-eval
  (:add op-map) (v1 . v2)))\n          (Sub ⇒ (arith-eval (:sub op-map) (v1 . v2)))\n
  \         (Mul ⇒ (arith-eval (:mul op-map) (v1 . v2)))\n          (Div ⇒ (arith-eval
  (:div op-map) (v1 . v2)))\n          (Less ⇒ (logic-eval (:less op-map) (v1 . v2)))\n
  \         (Iff ⇒ (logic-eval (:iff op-map) (v1 . v2)))))\n      (_ ⇒ Nothing))))\n\n(eval
  : [(S × Expr)] → (Expr → (Maybe Expr)))\n(ƒ eval [env expr]\n  (match expr\n    ((Num
  _) ⇒ (Just expr))\n    ((Bool _) → (Just expr))\n    ((Var x) ⇒ (do Maybe\n                 (val
  ← (lookup x env))\n                 (return val)))\n    ((If condition consequent
  alternative) →\n          (match (eval env condition)\n            ((Just (Bool
  true)) → (eval env consequent))\n            ((Just (Bool false)) → (eval env alternative))\n
  \           (_ → (error \"condition should be evaluated to a boolean value\"))))\n
  \   ((Lambda _ _) → (Just (Closure expr env)))\n    ((App fn arg) → (let [fnv (eval
  env fn)]\n                      (match fnv\n                        ((Just (Closure
  (Lambda x e) innerenv)) →\n                            (do Maybe\n                              (argv
  ← (eval env arg))\n                              (eval ((x . argv) :: innerenv)
  e)))\n                        (_ → (error \"should apply arg to a function\")))))\n
  \   ((Let x e1 in-e2) ⇒ (do Maybe\n                          (v ← (eval env e1))\n
  \                         (eval ((x . v) :: env) in-e2)))\n    ;; use fix point
  combinator to approach \"Turing-complete\"\n    ((LetRec x e1 in-e2) → (eval env
  (Let \"Y\" (Lambda \"h\" (App (Lambda \"f\" (App (Var \"f\") (Var \"f\")))\n                                                               (Lambda
  \"f\" (App (Var \"h\")\n                                                                                (Lambda
  \"n\" (App (App (Var \"f\") (Var \"f\"))\n                                                                                                 (Var
  \"n\")))))))\n                                              (Let x (App (Var \"Y\")
  (Lambda x e1))\n                                                     in-e2))))\n
  \   ((Binop op (e1 . e2)) => (let [v1 (eval env e1)\n                                   v2
  (eval env e2)]\n                               (eval-op op v1 v2)))))\n\n(begin\n
  \ (print \"start\")\n  (let result (match (eval [] (LetRec \"fact\" (Lambda \"n\"
  (If (Binop Less ((Var \"n\") . (Num 2)))\n                                                             (Num
  1)\n                                                             (Binop Mul ((Var
  \"n\") . (App (Var \"fact\")\n                                                                                          (Binop
  Sub ((Var \"n\") . (Num 1))))))))\n                                             (App
  (Var \"fact\") (Num 5))))\n                ((Just (Num num)) ⇒ (print (int2str num)))\n
  \               (Nothing ⇒ (error \"oops\"))))\n  (print result)\n  (print \"finish\"))\n```\n\n##
  License\n\nCopyright © 2016 zjhmale\n\nDistributed under the [![license BSD](https://img.shields.io/badge/license-BSD-orange.svg)](https://en.wikipedia.org/wiki/BSD_licenses)\n"
license-name: BSD-3-Clause
