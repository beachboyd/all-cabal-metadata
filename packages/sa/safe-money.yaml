homepage: https://github.com/k0001/safe-money
changelog-type: markdown
hash: 8da43268c8b7818926efc9d92de2d511222d7dcf918583b308bea99cf04fa154
test-bench-deps:
  safe-money: -any
  cereal: -any
  serialise: -any
  bytestring: -any
  base: -any
  text: -any
  vector-space: -any
  constraints: -any
  binary: -any
  store: -any
  xmlbf: -any
  tasty-quickcheck: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  aeson: -any
maintainer: renÎ»ren!zone
synopsis: ! 'Type-safe and lossless encoding and manipulation of money, fiat currencies,

  crypto currencies and precious metals.'
changelog: ! "# Version 0.6\n\n* _COMPILER ASSISTED BREAKING CHANGE_. `denseToDecimal`
  now takes a positive\n  `Rational` rather than a `Proxy scale`.\n\n* _COMPILER ASSISTED
  BREAKING CHANGE_. `denseFromDecimal` and\n  `discreteFromDecimal` now take a positive
  `Rational` scale, like their\n  `xxxToDecimal` counterparts.\n\n* _COMPILE ASSISTED
  BREAKING CHANGE_. `binary`, `deepseq` and `text` are now\n  mandatory dependencies
  since they are included with the standard GHC\n  distribution. Thus, the tags for
  disabling them have been removed.\n\n* _COMPILE ASSISTED BREAKING CHANGE_. `Text`
  replaced the use of `String` in the\n  public API. For example, `denseCurrency`
  now returns `Text`, instead of\n  `String`. This change doesn't break backwards
  compatibilility with binary\n  serializations.\n\n* Introduced a new function `discreteToDecimal`.\n\n*
  Added tests to ensure backwards compatibility of serializations.\n\n\n# Version
  0.5\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `round`, `floor`, `ceiling` and\n
  \ `truncate` functions were replaced by a single `discreteFromDense` function\n
  \ taking an argument of type `Approximation` (`Round`, `Floor`, `Ceiling` or\n  `Truncate`)
  as an argument.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `fromDiscrete` function
  was\n  renamed to `denseFromDiscrete`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  The `fromExchangeRate` function was\n  renamed to `exchangeRateToRational`.\n\n*
  _COMPILER ASSISTED BREAKING CHANGE_. The `flipExchangeRate` function was\n  renamed
  to `exchangeRateRecip`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `Dense` is
  not an instance of\n  `Fractional` anymore because `recip` and `/` could potentially
  crash.\n\n* Introduced new functions for rendering and parsing decimal reperesentations\n
  \ of monetary amounts: `denseCurrency`, `discreteCurrency`, `denseFromDecimal`,\n
  \ `denseToDecimal`, `discreteFromDecimal`, `exchangeRateFromDecimal`,\n  `exchangeRateToDecimal`.\n\n*
  Introduced optional `AdditiveGroup` and `VectorSpace` group instances for\n  `Dense`
  and `Discrete`. These type-classes come from the `vector-space`\n  library and they
  can be enabled or disabled via the `vector-space` Cabal flag,\n  which is enabled
  by default.\n\n* Introduced `discrete` constructor which behaves just like `fromInteger`.\n\n*
  Introduced the `dense'` constructor as an unsafe but convenient version of\n  `dense`.\n\n*
  The `ErrScaleNonCanonical` type is now exported.\n\n* The `Money.Internal` module
  is now exposed, but hidden from the Haddock\n  documentation.\n\n* New scale: `\"BTC\"
  \"millibitcoin\"`.\n\n* Added many tests.\n\n\n# Version 0.4.1\n\n* `ExchangeRate`
  is now a `Category`.\n\n\n# Version 0.4\n\n* **BREAKING CHANGE REQUIRING HUMAN INTERVENTION**.
  The JSON serializations for\n  all of `Dense`, `SomeDense`, `Discrete`, `SomeDiscrete`,
  `ExchangeRate` and\n  `SomeExchangeRate` changed. The `FromJSON` instances are backwards
  compatible\n  with the old serializations, but the `ToJSON` instances will only
  generate the\n  new format, which is the same as the old format except the leading
  strings\n  `\"Dense\"`, `\"Discrete\"` and `\"ExchangeRate\"`, respectively, are
  not present in\n  the rendered JSON array anymore. So, if you were manually relying
  on the\n  `ToJSON` instance, please update your code.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Changed the `Rep` suffix for a `Some`\n  prefix Everywhere.  For example,
  `DenseRep` was renamed to `SomeDense`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  Replaced the\n  `someDenseAmountNumerator` and `someDenseAmountDenominator` `Integers`
  with a\n  single `someDenseAmount` `Rational` number. Similarly for `someDiscreteScale`\n
  \ and `someExchangeRateRate`. The `mkSomeDense`, `someDiscreteScale` and\n  `mkSomeDense`
  also take a `Rational` now.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `truncate`,
  `floor`, `celing` and\n  `round` functions now return just `0` as a reminder if
  there's no significant\n  reminder, instead of `Nothing`.\n\n* Added instances for
  `serialise`.\n\n* Added instances for `xmlbf`.\n\n* Fixed `Show` instances so that
  surrounding parentheses are included when\n  necessary.\n\n* New currencies: Ripple,
  Litecoin, Ada, Monero.\n\n\n# Version 0.3\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  The `Data.Money` module was renamed to\n  `Money`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. The `Data.Money.Internal` module is not\n  exposed anymore. All of its
  contents are now exported from the `Money` module.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed `discreteRep` to\n  `toDiscreteRep`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed `denseRep` to `toDenseRep`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  Renamed `exchangeRateRep` to\n  `toExchangeRateRep`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed Iceleandic currency `\"eyir\"` to\n  `\"eyrir\"`\n\n* Remove upper
  bound constraints from all dependencies except `base`.\n\n* Made dependency on `store`
  optional for the test suite, so that it can run on\n  GHCJS.\n\n\n# Version 0.2\n\n*
  Cabal flags are now manual (`aeson`, `binary`, `bytes`, `cereal`, `deepseq`,\n  `hashable`).\n\n*
  Backwards compatibility with GHC 7.10.\n\n* Fix `Store` instances and test them.\n\n\n#
  Version 0.1\n\n* Initial release.\n"
basic-deps:
  cereal: (>=0.5)
  serialise: (>=0.2)
  base: (>=4.8 && <5.0)
  text: -any
  vector-space: (>=0.12)
  constraints: -any
  binary: -any
  store: (>=0.2)
  xmlbf: (>=0.2)
  hashable: (>=1.2)
  deepseq: -any
  aeson: (>=0.9)
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
author: Renzo Carbonara
latest: '0.6'
description-type: markdown
description: ! 'The Haskell `safe-money` library offers type-safe and lossless encoding
  and

  operations for monetary values in all world currencies, including fiat

  currencies, precious metals and crypto-currencies.


  You can enter a development shell with `nix-shell`, or build with `nix build

  -f release.nix ghc822.safe-money` (or similar, check `release.nix`).

'
license-name: BSD3
