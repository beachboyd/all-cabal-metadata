homepage: https://github.com/ndmitchell/safe#readme
changelog-type: text
hash: b06d802e009c560edad3970f486268cf7267a03b06b4ff6323161b23ca951ffb
test-bench-deps:
  base: -any
  deepseq: -any
  QuickCheck: -any
  safe: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Library of safe (exception free) functions
changelog: ! "Changelog for Safe\n\n0.3.16\n    #22, add Safe index\n0.3.15, released
  2017-06-18\n    Support QuickCheck 2.10\n0.3.14, released 2017-02-15\n    #20, fix
  for GHC 7.10.1\n0.3.13, released 2017-02-09\n    #20, require GHC 7.4 or above\n0.3.12,
  released 2017-02-05\n    #19, add Safe.Partial exposing a Partial typeclass\n    #19,
  add support for GHC call stacks\n0.3.11, released 2017-01-22\n    #16, add Safe
  succ and pred\n    #16, add readEitherSafe for better errors than readEither\n    #14,
  add Safe zip3Exact\n0.3.10, released 2016-11-08\n    #15, add Safe cycle\n0.3.9,
  released 2015-05-09\n    #9, add Safe toEnum\n0.3.8, released 2014-08-10\n    #8,
  remove unnecessary Ord constraints from Foldable functions\n0.3.7, released 2014-07-16\n
  \   Add Def variants of the Exact functions\n0.3.6, released 2014-07-12\n    #6,
  remove unnecessary Ord constraints from maximumBy/minimumBy\n0.3.5, released 2014-06-28\n
  \   Add Safe elemIndexJust/findIndexJust functions\n    Add Safe scan functions\n
  \   Add Safe minimumBy/maximumBy functions\n    Add a module of Exact functions\n
  \   Add Foldable minimum functions\n    Clean up the Foldable module, deprecate
  the Safe variants\n0.3.4, released 2014-01-30\n    #1, improve the string clipping
  in readNote\n0.3.3, released 2011-11-15\n    #494, add foldl1' wrappings\n0.3.2,
  released 2011-11-13\n    Add a Safe.Foldable module\n0.3.1, released 2011-11-09\n
  \   Add findJust, safe wrapping of fromJust/find\n0.3, released 2010-11-10\n    Start
  of changelog\n"
basic-deps:
  base: ! '>=4.5 && <5'
all-versions:
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.7'
- '0.3.8'
- '0.3.9'
- '0.3.10'
- '0.3.11'
- '0.3.12'
- '0.3.13'
- '0.3.14'
- '0.3.15'
- '0.3.16'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.3.16'
description-type: markdown
description: ! '# Safe [![Hackage version](https://img.shields.io/hackage/v/safe.svg?label=Hackage)](https://hackage.haskell.org/package/safe)
  [![Build Status](https://img.shields.io/travis/ndmitchell/safe.svg)](https://travis-ci.org/ndmitchell/safe)


  A library wrapping `Prelude`/`Data.List` functions that can throw exceptions, such
  as `head` and `!!`. Each unsafe function has up to four variants, e.g. with `tail`:


  * <tt>tail :: [a] -> [a]</tt>, raises an error on `tail []`.

  * <tt>tailMay :: [a] -> <i>Maybe</i> [a]</tt>, turns errors into `Nothing`.

  * <tt>tailDef :: <i>[a]</i> -> [a] -> [a]</tt>, takes a default to return on errors.

  * <tt>tailNote :: <i>String</i> -> [a] -> [a]</tt>, takes an extra argument which
  supplements the error message.

  * <tt>tailSafe :: [a] -> [a]</tt>, returns some sensible default if possible, `[]`
  in the case of `tail`.


  This package is divided into three modules:


  * `Safe` contains safe variants of `Prelude` and `Data.List` functions.

  * `Safe.Foldable` contains safe variants of `Foldable` functions.

  * `Safe.Exact` creates crashing versions of functions like `zip` (errors if the
  lists are not equal) and `take` (errors if there are not enough elements), then
  wraps them to provide safe variants.

'
license-name: BSD3
