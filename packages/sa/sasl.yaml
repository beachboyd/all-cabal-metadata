homepage: https://github.com/YoshikuniJujo/sasl/wiki
changelog-type: ''
hash: 25336089cc8468b087c1defdc243258b0529475b42c74d74aaa2c2eb652454fc
test-bench-deps: {}
maintainer: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
synopsis: SASL implementation using simple-pipe
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  base64-bytestring: ==1.0.*
  monads-tf: ==0.1.*
  papillon: ==0.1.*
  simple-pipe: ==0.0.0.*
  cryptohash: ==0.11.*
all-versions:
- 0.0.0.0
- 0.0.0.1
author: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
latest: 0.0.0.1
description-type: haddock
description: ! "Example programs\n\nSCRAM-SHA-1 Client sample\n\nscramSha1sv.txt\n\n>
  r=00DEADBEEF007658cddf-0e44-4de2-87df-4132bce97f4,s=cGVwcGVy,i=4492\n> v=q0+IZgUtQTHYItaurlNyET1imLI=\n>
  success\n\nexamples/clientS.hs\n\nextensions\n\n* OverloadedStrings\n\n* PackageImports\n\n>
  import \"monads-tf\" Control.Monad.State\n> import Data.Pipe\n> import Data.Pipe.ByteString\n>
  import System.IO\n> import Network.Sasl\n> import Network.Sasl.ScramSha1.Client\n>\n>
  import qualified Data.ByteString as BS\n>\n> data St = St [(BS.ByteString, BS.ByteString)]
  deriving Show\n>\n> instance SaslState St where\n> \tgetSaslState (St s) = s\n>
  \tputSaslState s _ = St s\n>\n> serverFile :: String\n> serverFile = \"examples/scramSha1sv.txt\"\n>\n>
  main :: IO ()\n> main = do\n> \tlet\t(_, (_, p)) = sasl\n> \tr <- runPipe (fromFileLn
  serverFile =$= input =$= p =$= toHandleLn stdout)\n> \t\t`runStateT` St [\n> \t\t\t(\"username\",
  \"yoshikuni\"),\n> \t\t\t(\"password\", \"password\"),\n> \t\t\t(\"cnonce\", \"00DEADBEEF00\")
  ]\n> \tprint r\n>\n> input :: Pipe BS.ByteString (Either Success BS.ByteString)
  (StateT St IO) ()\n> input = await >>= \\mbs -> case mbs of\n> \tJust \"success\"
  -> yield . Left $ Success Nothing\n> \tJust ch -> yield (Right ch) >> input\n> \t_
  -> return ()\n\nSCRAM-SHA-1 Server sample\n\nscramSha1cl.txt\n\n> n,,n=yoshikuni,r=00DEADBEEF00\n>
  c=biws,r=00DEADBEEF007658cddf-0e44-4de2-87df-4132bce97f4,p=zup7ghwpAW43cP4Xu3YZTNnHo0g=\n>\n\nexamples/serverS.hs\n\nextensions\n\n*
  OverloadedStrings\n\n* PackageImports\n\n> import \"monads-tf\" Control.Monad.State\n>
  import Data.Pipe\n> import Data.Pipe.ByteString\n> import System.IO\n> import Network.Sasl\n>
  import Network.Sasl.ScramSha1.Server\n>\n> import qualified Data.ByteString as BS\n>\n>
  data St = St [(BS.ByteString, BS.ByteString)] deriving Show\n>\n> instance SaslState
  St where\n> \tgetSaslState (St s) = s\n> \tputSaslState s _ = St s\n>\n> clientFile
  :: String\n> clientFile = \"examples/scramSha1cl.txt\"\n>\n> main :: IO ()\n> main
  = do\n> \tlet\tslt = \"pepper\"\n> \t\ti = 4492\n> \t\t(stk, svk) = salt \"password\"
  slt i\n> \t\t(_, (_, p)) = sasl $ \\\"yoshikuni\" -> return (slt, stk, svk, i)\n>
  \tr <- runPipe (fromFileLn clientFile =$= p =$= output =$= toHandleLn stdout)\n>
  \t\t`runStateT` St [(\"snonce\", \"7658cddf-0e44-4de2-87df-4132bce97f4\")]\n> \tprint
  r\n>\n> output :: Pipe (Either Success BS.ByteString) BS.ByteString (StateT St IO)
  ()\n> output = await >>= \\mch -> case mch of\n> \tJust (Left (Success Nothing))
  -> yield \"success\"\n> \tJust (Left (Success (Just bs))) -> yield bs\n> \tJust
  (Right bs) -> yield bs >> output\n> \t_ -> return ()\n\nSee examples directory for
  more examples."
license-name: BSD-3-Clause
