homepage: https://github.com/kccqzy/haskell-sajson#readme
changelog-type: ''
hash: 67be4112c06577533cc7e6e0a76f9b3c334ff49f985a7535cbc9e67166363fef
test-bench-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  sajson: -any
  base: ! '>=4.9.1.0 && <5'
  unordered-containers: ! '>=0.2.8.0 && <0.3'
  hspec: ! '>=2.4.3 && <2.5'
  text: ! '>=1.2.2.1 && <1.3'
  scientific: ! '>=0.3.4.12 && <0.4'
  QuickCheck: ! '>=2.9.2 && <2.10'
  aeson: ! '>=1.0.2.1 && <1.1'
  vector: ! '>=0.11.0.0 && <0.12'
maintainer: qzy@qzy.io
synopsis: Fast JSON parsing powered by Chad Austin's sajson library
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  sajson: -any
  base: ! '>=4.9.1.0 && <5'
  unordered-containers: ! '>=0.2.8.0 && <0.3'
  text: ! '>=1.2.2.1 && <1.3'
  criterion: ! '>=1.1.4.0 && <1.2'
  scientific: ! '>=0.3.4.12 && <0.4'
  aeson: ! '>=1.0.2.1 && <1.1'
  vector: ! '>=0.11.0.0 && <0.12'
all-versions:
- '0.1.0.0'
author: Chad Austin, Zhouyu Qian
latest: '0.1.0.0'
description-type: markdown
description: ! "# sajson\n\nThis is a Haskell package that is a thin wrapper over
  the wonderful\n[sajson](https://github.com/chadaustin/sajson) library written by
  Chad Austin.\nIt provides a high performance JSON parser written in C++11. After
  parsing, a\nHaskell `Data.Aeson.Value` is constructed.\n\n## Who This Is For\n\nThis
  library is specifically designed for Haskell users who find the performance\nof
  the pure-Haskell `Data.Aeson` parser inadequate. This library focuses on\nperformance,
  not portability or absolute correctness. You should *only* use this\nlibrary if
  all of the following is true:\n\n*  You are using a system that is 64-bit. This
  library assumes\n   `sizeof(size_t) == 8`. If this is not the case, the behavior
  is\n   undefined.\n\n*  You are using a system where the alignment of `double` is
  no stricter than\n   that of `size_t`. Internally, the library casts a pointer to
  `size_t` into a\n   pointer to `double` and expects this to be meaningful.\n\n*
  \ You do not expect to parse floating point numbers beyond the range of\n   `double`.\n\n*
  \ You do not expect to parse integers that are longer than 53 bits.\n\n*  You do
  not expect parsing a JSON number will produce a Haskell `Scientific`\n   value that
  exactly represents the mathematical value of the JSON number, or\n   even the closest
  approximation in IEEE-754 `double`.\n\n   For example if you parse numbers that
  would be denormal numbers\n   in IEEE-754 double-precision numbers, you will very
  likely get back zero\n   instead.\n\n   As another example, if you parse `0.3`,
  which cannot be represented\n   exactly in IEEE-754 `double`, you will get back
  0.30000000000000004, instead\n   of the closest number in IEEE-754 `double` which
  is 0.29999999999999999.\n\n*  You wish to sacrifice memory consumption for speed.
  The *intermediate* memory\n   needed is 9 times the number of bytes of the input
  `ByteString` plus\n   constant. This excludes the memory needed by the parsed `Value`
  or the memory\n   of the input `ByteString`.\n\n*  You are parsing JSON that is
  known to be valid. As a library written in C++,\n   it is inherently unsafe. Despite
  the use of address sanitizer and AFL which\n   have\n   [caught memory usage bugs](https://github.com/chadaustin/sajson/commit/0bd8a661421fc3e61262c283543689b0f8a88483),\n
  \  it is difficult to guarantee that creatively crafted input will not crash or\n
  \  cause arbitrary code execution. It is recommend that you use this library\n   only
  for parsing known good JSON.\n\nIf you satisfy all of the above, then this library
  could work for you. Again,\nplease benchmark and show that JSON parsing is indeed
  a bottleneck before using\nthis library.\n\n## Ideas and Future Plan\n\n*  Skip
  creating `Value`s when the you eventually want another Haskell type.\n   Currently
  the `FromJSON` instance needs a `Value`, but perhaps we can devise\n   another method
  to avoid the generation of these intermediate `Value`s.\n\n*  Provide a benchmark
  so that we can quantitatively argue this library parses\n   JSON faster than `Data.Aeson`.\n\n*
  \ Provide an alternative for parsing floating point numbers that better\n   preserves
  the value.\n\n*  More complete tests, including QuickCheck-based tests.\n"
license-name: MIT
