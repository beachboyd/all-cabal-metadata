homepage: https://github.com/leptonyu/salak#readme
changelog-type: ''
hash: e0d0def6d1d3a38ac5591f79541044bf4671ba452dc06000f9aee57462d4b506
test-bench-deps:
  exceptions: ! '>=0.10.2 && <0.11'
  heaps: ! '>=0.3.6.1 && <0.4'
  bytestring: ! '>=0.10.8.2 && <0.11'
  base: ! '>=4.10 && <5'
  time: ! '>=1.8.0.2 && <1.9'
  unordered-containers: ! '>=0.2.10.0 && <0.3'
  hspec: ==2.*
  text: ! '>=1.2.3.1 && <1.3'
  megaparsec: ! '>=7.0.5 && <7.1'
  filepath: ! '>=1.4.2.1 && <1.5'
  criterion: ! '>=1.5.5.0 && <1.6'
  menshen: ! '>=0.0.3 && <0.1'
  dlist: ! '>=0.8.0.7 && <0.9'
  data-default: ! '>=0.7.1.1 && <0.8'
  containers: ! '>=0.6.0.1 && <0.7'
  salak: -any
  unliftio-core: ! '>=0.1.2.0 && <0.2'
  mtl: ! '>=2.2.2 && <2.3'
  hashable: ! '>=1.2.7.0 && <1.3'
  random: ==1.1.*
  scientific: ! '>=0.3.6.2 && <0.4'
  QuickCheck: ! '>=2.13.2 && <2.14'
  directory: ! '>=1.3.3.0 && <1.4'
maintainer: Daniel YU <leptonyu@gmail.com>
synopsis: Configuration (re)Loader and Parser.
changelog: ''
basic-deps:
  exceptions: ! '>=0.10.2 && <0.11'
  heaps: ! '>=0.3.6.1 && <0.4'
  bytestring: ! '>=0.10.8.2 && <0.11'
  base: ! '>=4.10 && <5'
  time: ! '>=1.8.0.2 && <1.9'
  unordered-containers: ! '>=0.2.10.0 && <0.3'
  text: ! '>=1.2.3.1 && <1.3'
  megaparsec: ! '>=7.0.5 && <7.1'
  filepath: ! '>=1.4.2.1 && <1.5'
  menshen: ! '>=0.0.3 && <0.1'
  dlist: ! '>=0.8.0.7 && <0.9'
  data-default: ! '>=0.7.1.1 && <0.8'
  containers: ! '>=0.6.0.1 && <0.7'
  unliftio-core: ! '>=0.1.2.0 && <0.2'
  mtl: ! '>=2.2.2 && <2.3'
  hashable: ! '>=1.2.7.0 && <1.3'
  scientific: ! '>=0.3.6.2 && <0.4'
  directory: ! '>=1.3.3.0 && <1.4'
all-versions:
- 0.1.0
- 0.1.4
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.11
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.5
- 0.2.6
- 0.2.8
- 0.2.9
- 0.2.9.1
- 0.2.9.2
- 0.2.9.3
- 0.2.10
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.3.1
- 0.3.3.2
- 0.3.4
- 0.3.4.1
author: Daniel YU
latest: 0.3.4.1
description-type: markdown
description: "# salak\n\n[![Hackage](https://img.shields.io/hackage/v/salak.svg?logo=haskell)](https://hackage.haskell.org/package/salak)\n[![Build](https://img.shields.io/travis/leptonyu/salak.svg?logo=travis)](https://travis-ci.org/leptonyu/salak)\n[![stackage
  LTS package](http://stackage.org/package/salak/badge/lts)](http://stackage.org/lts/package/salak)\n[![stackage
  Nightly package](http://stackage.org/package/salak/badge/nightly)](http://stackage.org/nightly/package/salak)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/leptonyu/salak/blob/master/LICENSE)\n\nConfiguration
  (re)loader in Haskell.\n\n## salak-yaml\n[![salak-yaml](https://img.shields.io/hackage/v/salak-yaml.svg?logo=haskell)](https://hackage.haskell.org/package/salak-yaml)\n##
  salak-toml\n[![salak-toml](https://img.shields.io/hackage/v/salak-toml.svg?logo=haskell)](https://hackage.haskell.org/package/salak-toml)\n\n##
  Introduction\nThis library defines a universal procedure to load configurations
  and parse properties, also supports reload configuration files.\n\n## Parse Functions\n\n`MonadSalak`
  monad provide a unified function `require` to parse properties. Here are some examples.\n\n```Haskell\na
  :: Bool              <- require \"bool.key\"\nb :: Maybe Int         <- require
  \"int.optional.key\"\nc :: Either String Int <- require \"int.error.key\"\nd ::
  IO Int            <- require \"int.reloadable.key\" -- This property can be changed
  by reloading configurations.\n```\n\n## Load Strategy\nWe can load configurations
  from command lines, environment, configuration files such as yaml or toml etc.,
  and we may want to have our own strategies to load configurations from multiply
  sources and overwrite properties by orders of these sources.\n\n`PropConfig` defines
  a common loading strategy:\n> 1. loadCommandLine\n> 2. loadEnvironment\n> 3. loadConfFiles\n>
  4. load file from folder `application.dir` if defined\n> 5. load file from current
  folder if enabled\n> 6. load file from home folder if enabled\n> 7. file extension
  matching, support yaml or toml or any other loader.\n\nLoad earlier has higher priorities.
  Priorities cannot be changed.\n\nFor command lines and environment, \n```\nCommandLine:
  \ --package.a.enabled=true\nEnvironment: PACKAGE_A_ENABLED: false\n```\n\n## Usage\n\nEnvironment:\n```\nexport
  TEST_CONFIG_NAME=daniel\n```\nCurrent Directory:  salak.yaml\n```YAML\ntest.config:\n
  \ name: noop\n  dir: ls\n```\nCurrent Directory:  salak.toml\n```TOML\n[test.config]\next=2\n```\n\n```Haskell\ndata
  Config = Config\n  { name :: Text\n  , dir  :: Maybe Text\n  , ext  :: Int\n  }
  deriving (Eq, Show)\n\ninstance FromProp m Config where\n  fromProp = Config\n    <$>
  \"user\" ? pattern \"[a-z]{5,16}\"\n    <*> \"pwd\"\n    <*> \"ext\" .?= 1\n\nmain
  = runSalakWith \"salak\" (YAML :|: TOML) $ do\n  c :: Config <- require \"test.config\"\n
  \ lift $ print c\n```\n\nGHCi play\n```Haskell\nλ> :set -XFlexibleInstances -XMultiParamTypeClasses
  -XOverloadedStrings\nλ> import Salak\nλ> import Data.Default\nλ> import Data.Text(Text)\nλ>
  data Config = Config { name :: Text, dir  :: Maybe Text, ext  :: Int} deriving (Eq,
  Show)\nλ> instance FromProp m Config where fromProp = Config <$> \"user\" <*> \"dir\"
  <*> \"ext\" .?= 1\nλ> runSalak def (require \"\") :: IO Config\nConfig {name = \"daniel\",
  dir = Nothing, ext = 1}\n```\n\nTODO:\n- Add git pull support.\n- Add automatic
  reloading.\n"
license-name: MIT
