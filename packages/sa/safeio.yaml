homepage: https://github.com/luispedro/safeio#readme
changelog-type: text
hash: 0d2437a3db8db8d5a59527ba050bf74757bbadb691d8ba40cf45d82b10e04654
test-bench-deps:
  conduit-combinators: -any
  exceptions: -any
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  unix: -any
  base: ! '>4.8 && <5'
  filepath: -any
  conduit: ! '>=1.0'
  HUnit: -any
  test-framework-th: -any
  resourcet: -any
  directory: -any
maintainer: Luis Pedro Coelho
synopsis: Write output to disk atomically
changelog: ! "Version 0.0.5.0 2018-01-18 by luispedro\n\t* Deprecate safeSinkFile\n\t*
  Add fake Windows support\n\nVersion 0.0.4.0 2017-09-07 by luispedro\n\t* Add atomicConduitUseFile\n\nVersion
  0.0.3.0 2017-07-29 by luispedro\n\t* Fix issue with creating files in separate directories\n\nVersion
  0.0.2.0 2017-05-30 by luispedro\n\t* Add conduit version\n\nVersion 0.0.1.0 2017-05-29
  by luispedro\n\t* First version\n"
basic-deps:
  conduit-combinators: -any
  exceptions: -any
  bytestring: -any
  unix: -any
  base: ! '>4.8 && <5'
  filepath: -any
  conduit: ! '>=1.0'
  resourcet: -any
  directory: -any
all-versions:
- '0.0.1.0'
- '0.0.2.0'
- '0.0.3.0'
- '0.0.4.0'
- '0.0.5.0'
author: Luis Pedro Coelho
latest: '0.0.5.0'
description-type: markdown
description: ! "# SafeIO: Haskell library for safe (atomic) IO\n\nThis is a simple
  module, which enables writing in atomic mode. It\nimplements the following 4 step
  procedure:\n\n1. Open a temporary file in the same directory as the final output.\n2.
  Write to this temporary file.\n3. Close and sync the file.\n4. Atomically rename
  the file to its final destination.\n\n\n## Example\n\nDirect use:\n\n    import
  System.IO.SafeWrite\n    ...\n    main = do\n        withOutputFile \"output.txt\"
  $ \\hout -> do\n            hPutStrLn hout \"Hello World\"\n\nThrough [conduit](https://www.stackage.org/package/conduit):\n\n
  \   import qualified Data.Conduit as C\n    import           Data.Conduit ((.|))\n
  \   import           Data.Conduit.SafeWrite\n    \n    main = C.runConduitRes $\n
  \       C.yield \"Hello World\" .| safeSinkFile \"hello.txt\"\n\nIn any case, only
  successful termination of the process will result in the\noutput file being written.
  Early termination by throwing an exception will\ncause the temporary file to be
  removed and no output will be produced.\n\n## Author\n\nLuis Pedro Coelho | [Email](mailto:luis@luispedro.org)
  | [Twitter](https://twitter.com/luispedrocoelho)\n"
license-name: MIT
