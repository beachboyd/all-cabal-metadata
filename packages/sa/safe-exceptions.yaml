homepage: https://github.com/fpco/safe-exceptions#readme
changelog-type: markdown
hash: 62345cdd953820251904e65c867374cd2aaa5c69b07f7ec8f2fa431d5f202d3a
test-bench-deps:
  void: -any
  base: -any
  hspec: -any
  safe-exceptions: -any
maintainer: michael@fpcomplete.com
synopsis: Safe, consistent, and easy exception handling
changelog: ! '## 0.1.7.0


  * Add `bracketWithError`


  ## 0.1.6.0


  * Reuse the `Handler` definition from `Control.Monad.Catch`


  ## 0.1.5.0


  * Re-export `Control.Exception.assert`

  * Add `throwString`


  ## 0.1.4.0


  * Add `catchJust`, `handleJust`, and `tryJust`


  ## 0.1.3.0


  * Add `catchIO`, `handleIO`, and `tryIO`


  ## 0.1.2.0


  * Added `catches` [#13](https://github.com/fpco/safe-exceptions/issues/13)


  ## 0.1.1.0


  * Add missing `toSyncException` inside `impureThrow`

  * Conditionally export `displayException` for older GHCs

  * Re-export `Typeable`

  * Add the deepseq variants of catch/handle/try functions


  ## 0.1.0.0


  * Initial releae

'
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.7 && <4.13'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.2 && <1.5'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.0'
- '0.1.6.0'
- '0.1.7.0'
author: Michael Snoyman
latest: '0.1.7.0'
description-type: markdown
description: ! "# safe-exceptions\n\n*Safe, consistent, and easy exception handling*\n\n[![Build
  Status](https://travis-ci.org/fpco/safe-exceptions.svg?branch=master)](https://travis-ci.org/fpco/safe-exceptions)
  [![Stackage](http://stackage.org/package/safe-exceptions/badge/lts)](http://stackage.org/lts/package/safe-exceptions)\n\n>
  The documentation for this library is available on [Stackage](http://stackage.org/lts/package/safe-exceptions)\n\nRuntime
  exceptions - as exposed in `base` by the `Control.Exception`\nmodule - have long
  been an intimidating part of the Haskell\necosystem. This package, and this README
  for the package, are intended\nto overcome this. It provides a safe and simple API
  on top of the\nexisting exception handling machinery. The API is equivalent to the\nunderlying
  implementation in terms of power but encourages best\npractices to minimize the
  chances of getting the exception handling\nwrong.  By doing so and explaining the
  corner cases clearly, the hope is\nto turn what was previously something scary into
  an aspect of Haskell\neveryone feels safe using.\n\n## Goals\n\nThis package provides
  additional safety and simplicity versus\n`Control.Exception` by having its functions
  recognize the difference between\nsynchronous and asynchronous exceptions. As described
  below, synchronous\nexceptions are treated as _recoverable_, allowing you to catch
  and handle them\nas well as clean up after them, whereas asynchronous exceptions
  can only be\ncleaned up after. In particular, this library prevents you from making
  the\nfollowing mistakes:\n\n* Catching and swallowing an asynchronous exception\n*
  Throwing an asynchronous exception synchronously\n* Throwing a synchronous exception
  asynchronously\n* Swallowing asynchronous exceptions via failing cleanup handlers\n\n##
  Quickstart\n\nThis section is intended to give you the bare minimum information
  to\nuse this library (and Haskell runtime exceptions in general)\ncorrectly.\n\n*
  Import the `Control.Exception.Safe` module. Do _not_ import\n  `Control.Exception`
  itself, which lacks the safety guarantees that\n  this library adds. Same applies
  to `Control.Monad.Catch`.\n* If something can go wrong in your function, you can
  report this with\n  the `throw`. (For compatible naming, there are synonyms for
  this of\n  `throwIO` and `throwM`.)\n* If you want to catch a specific type of exception,
  use `catch`,\n  `handle`, or `try`.\n* If you want to recover from _anything_ that
  may go wrong in a\n  function, use `catchAny`, `handleAny`, or `tryAny`.\n* If you
  want to launch separate threads and kill them externally, you\n  should use the\n
  \ [async package](https://www.stackage.org/package/async).\n* Unless you really
  know what you're doing, avoid the following functions:\n    * `catchAsync`\n    *
  `handleAsync`\n    * `tryAsync`\n    * `impureThrow`\n    * `throwTo`\n* If you
  need to perform some allocation or cleanup of resources, use\n  one of the following
  functions (and _don't_ use the\n  `catch`/`handle`/`try` family of functions):\n\n
  \   * `onException`\n    * `withException`\n    * `bracket`\n    * `bracket_`\n
  \   * `finally`\n    * `bracketOnError`\n    * `bracketOnError_`\n\nHopefully this
  will be able to get you up-and-running quickly. You may\nalso be interested in\n[browsing
  through the cookbook](https://github.com/fpco/safe-exceptions/blob/master/COOKBOOK.md).\nThere
  is also an\n[exception safety tutorial on haskell-lang.org](https://haskell-lang.org/tutorial/exception-safety)\nwhich
  is based on this package.\n\n## Terminology\n\nWe're going to define three different
  versions of exceptions. Note\nthat these definitions are based on _how the exception
  is thrown_, not\nbased on _what the exception itself is_:\n\n* **Synchronous** exceptions
  are generated by the current\n  thread. What's important about these is that we
  generally want to be\n  able to recover from them. For example, if you try to read
  from a\n  file, and the file doesn't exist, you may wish to use some default\n  value
  instead of having your program exit, or perhaps prompt the\n  user for a different
  file location.\n\n*   **Asynchronous** exceptions are thrown by either a different
  user\n    thread, or by the runtime system itself. For example, in the\n    `async`
  package, `race` will kill the longer-running thread with\n    an asynchronous exception.
  Similarly, the `timeout` function will\n    kill an action which has run for too
  long. And the runtime system\n    will kill threads which appear to be deadlocked
  on `MVar`s or\n    `STM` actions.\n\n    In contrast to synchronous exceptions,
  we almost never want to\n    recover from asynchronous exceptions. In fact, this
  is a common\n    mistake in Haskell code, and from what I've seen has been the\n
  \   largest source of confusion and concern amongst users when it\n    comes to
  Haskell's runtime exception system.\n\n*   **Impure** exceptions are hidden inside
  a pure value, and exposed\n    by forcing evaluation of that value. Examples are
  `error`,\n    `undefined`, and `impureThrow`. Additionally, incomplete pattern\n
  \   matches can generate impure exceptions. Ultimately, when these\n    pure values
  are forced and the exception is exposed, it is thrown\n    as a synchronous exception.\n\n
  \   Since they are ultimately thrown as synchronous exceptions, when\n    it comes
  to handling them, we want to treat them in all ways like\n    synchronous exceptions.
  Based on the comments above, that means we\n    want to be able to recover from
  impure exceptions.\n\n## Why catch asynchronous exceptions?\n\nIf we never want
  to be able to recover from asynchronous exceptions,\nwhy do we want to be able to
  catch them at all? The answer is for\n_resource cleanup_. For both sync and async
  exceptions, we would like\nto be able to acquire resources - like file descriptors
  - and register\na cleanup function which is guaranteed to be run. This is exemplified\nby
  functions like `bracket` and `withFile`.\n\nSo to summarize:\n\n* All synchronous
  exceptions should be recoverable\n* All asynchronous exceptions should not be recoverable\n*
  In both cases, cleanup code needs to work reliably\n\n## Determining sync vs async\n\nUnfortunately,
  GHC's runtime system provides no way to determine if an\nexception was thrown synchronously
  or asynchronously, but this\ninformation is vitally important. There are two general
  approaches to\ndealing with this:\n\n* Run an action in a separate thread, don't
  give that thread's ID to\n  anyone else, and assume that any exception that kills
  it is a\n  synchronous exception. This approach is covered in the School of\n  Haskell
  article\n  [catching all exceptions](https://www.schoolofhaskell.com/user/snoyberg/general-haskell/exceptions/catching-all-exceptions),\n
  \ and is provided by the\n  [enclosed-exceptions](https://www.stackage.org/package/enclosed-exceptions)\n
  \ package.\n\n* Make assumptions based on the type of an exception, assuming that\n
  \ certain exception types are only thrown synchronously and certain\n  only asynchronously.\n\nBoth
  of these approaches have downsides. For the downsides of the\ntype-based approach,
  see the caveats section at the end. The problems\nwith the first are more interesting
  to us here:\n\n* It's much more expensive to fork a thread every time we want to
  deal\n  with exceptions\n* It's not fully reliable: it's possible for the thread
  ID of the\n  forked thread to leak somewhere, or the runtime system to send it an\n
  \ async exception\n* While this works for actions living in `IO`, it gets trickier
  for\n  pure functions and monad transformer stacks. The latter issue is\n  solved
  via monad-control and the exceptions packages. The former\n  issue, however, means
  that it's impossible to provide a universal\n  interface for failure for pure and
  impure actions. This may seem\n  esoteric, and if so, don't worry about it too much.\n\nTherefore,
  this package takes the approach of trusting type\ninformation to determine if an
  exception is asynchronous or\nsynchronous. The details are less interesting to a
  user, but the\nbasics are: we leverage the extensible exception system in GHC and\nstate
  that any exception type which is a child of `SomeAsyncException`\nis an async exception.
  All other exception types are assumed to be\nsynchronous.\n\n## Handling of sync
  vs async exceptions\n\nOnce we're able to distinguish between sync and async exceptions,
  and\nwe know our goals with sync vs async, how we handle things is pretty\nstraightforward:\n\n*
  If the user is trying to install a cleanup function (such as with\n  `bracket` or
  `finally`), we don't care if the exception is sync or\n  async: call the cleanup
  function and then rethrow the exception.\n* If the user is trying to catch an exception
  and recover from it,\n  only catch sync exceptions and immediately rethrow async
  exceptions.\n\nWith this explanation, it's useful to consider async exceptions as\n\"stronger\"
  or more severe than sync exceptions, as the next section\nwill demonstrate.\n\n##
  Exceptions in cleanup code\n\nOne annoying corner case is: what happens if, when
  running a cleanup function after an exception was thrown, the cleanup function _itself_
  throws an exception. For this, we'll consider ``action `onException` cleanup``.
  There are four different possibilities:\n\n* `action` threw sync, `cleanup` threw
  sync\n* `action` threw sync, `cleanup` threw async\n* `action` threw async, `cleanup`
  threw sync\n* `action` threw async, `cleanup` threw async\n\nOur guiding principle
  is: we cannot hide a more severe exception with\na less severe exception. For example,
  if `action` threw a sync\nexception, and then `cleanup` threw an async exception,
  it would be a\nmistake to rethrow the sync exception thrown by `action`, since it\nwould
  allow the user to recover when that is not desired.\n\nTherefore, this library will
  always throw an async exception if either\nthe action or cleanup thows an async
  exception. Other than that, the\nbehavior is currently undefined as to which of
  the two exceptions will\nbe thrown. The library reserves the right to throw away
  either of the\ntwo thrown exceptions, or generate a new exception value completely.\n\n##
  Typeclasses\n\nThe [exceptions package](https://www.stackage.org/package/exceptions)\nprovides
  an abstraction for throwing, catching, and cleaning up from\nexceptions for many
  different monads. This library leverages those\ntype classes to generalize our functions.\n\n##
  Naming\n\nThere are a few choices of naming that differ from the base libraries:\n\n*
  `throw` in this library is for synchronously throwing within a\n  monad, as opposed
  to in base where `throwIO` serves this purpose and\n  `throw` is for impure throwing.
  This library provides `impureThrow`\n  for the latter case, and also provides convenience
  synonyms\n  `throwIO` and `throwM` for `throw`.\n* The `catch` function in this
  package will not catch async\n  exceptions. Please use `catchAsync` if you really
  want to catch\n  those, though it's usually better to use a function like `bracket`\n
  \ or `withException` which ensure that the thrown exception is\n  rethrown.\n\n##
  Caveats\n\nLet's talk about the caveats to keep in mind when using this library.\n\n###
  Checked vs unchecked\n\nThere is a big debate and difference of opinion regarding
  checked\nversus unchecked exceptions. With checked exceptions, a function\nstates
  explicitly exactly what kinds of exceptions it can throw. With\nunchecked exceptions,
  it simply says \"I can throw some kind of\nexception.\" Java is probably the most
  famous example of a checked\nexception system, with many other languages (including
  C#, Python, and\nRuby) having unchecked exceptions.\n\nAs usual, Haskell makes this
  interesting. Runtime exceptions are most\nassuredly unchecked: all exceptions are
  converted to `SomeException`\nvia the `Exception` typeclass, and function signatures
  do not state\nwhich specific exception types can be thrown (for more on this, see\nnext
  caveat). Instead, this information is relegated to documentation,\nand unfortunately
  is often not even covered there.\n\nBy contrast, approaches like `ExceptT` and `EitherT`
  are very explicit\nin the type of exceptions that can be thrown. The cost of this
  is that\nthere is extra overhead necessary to work with functions that can\nreturn
  different types of exceptions, usually by wrapping all possible\nexceptions in a
  sum type.\n\nThis library isn't meant to settle the debate on checked vs unchecked,\nbut
  rather to bring sanity to Haskell's runtime exception system. As\nsuch, this library
  is decidedly in the unchecked exception camp,\npurely by virtue of the fact that
  the underlying mechanism is as well.\n\n### Explicit vs implicit\n\nAnother advantage
  of the `ExceptT`/`EitherT` approach is that you are\nexplicit in your function signature
  that a function may fail. However,\nthe reality of Haskell's standard libraries
  are that many, if not the\nvast majority, of `IO` actions can throw some kind of
  exception. In\nfact, once async exceptions are considered, _every_ `IO` action can\nthrow
  an exception.\n\nOnce again, this library deals with the status quo of runtime\nexceptions
  being ubiquitous, and gives the rule: you should consider\nthe `IO` type as meaning
  _both_ that a function modifies the outside\nworld, _and_ may throw an exception
  (and, based on the previous\ncaveat, may throw _any type_ of exception it feels
  like).\n\nThere are attempts at alternative approaches here, such as\n[unexceptionalio](https://www.stackage.org/package/unexceptionalio).
  Again,\nthis library isn't making a value statement on one approach versus\nanother,
  but rather trying to make today's runtime exceptions in\nHaskell better.\n\n###
  Type-based differentiation\n\nAs explained above, this library makes heavy usage
  of type information\nto differentiate between sync and async exceptions. While the
  approach\nused is fairly well respected in the Haskell ecosystem today, it's\ncertainly
  not universal, and definitely not enforced by the\n`Control.Exception` module. In
  particular, `throwIO` will allow you to\nsynchronously throw an exception with an
  asynchronous type, and\n`throwTo` will allow you to asynchronously throw an exception
  with a\nsynchronous type.\n\nThe functions in this library prevent that from happening
  via\nexception type wrappers, but if an underlying library does something\nsurprising,
  the functions here may not work correctly. Further, even\nwhen using this library,
  you may be surprised by the fact that ``throw\nFoo `catch` (\\Foo -> ...)`` won't
  actually trigger the exception\nhandler if `Foo` looks like an asynchronous exception.\n\nThe
  ideal solution is to make a stronger distinction in the core\nlibraries themselves
  between sync and async exceptions.\n\n### Deadlock detection exceptions\n\nTwo exceptions
  types which are handled surprisingly are\n`BlockedIndefinitelyOnMVar` and `BlockedIndefinitelyOnSTM`.
  Even\nthough these exceptions are thrown asynchronously by the runtime\nsystem,
  for our purposes we treat them as synchronous. The reasons are\ntwofold:\n\n* There
  is a specific action taken in the local thread - blocking on a\n  variable which
  will never change - which causes the exception to be\n  raised. This makes their
  behavior very similar to synchronous\n  exceptions. In fact, one could argue that
  a function like `takeMVar`\n  is synchronously throwing `BlockedIndefinitelyOnMVar`\n*
  By our standards of recoverable vs non-recoverable, these exceptions\n  certainly
  fall into the recoverable category. Unlike an intentional\n  kill signal from another
  thread or the user (via Ctrl-C), we would\n  like to be able to detect that we entered
  a deadlock condition and do\n  something intelligent in an application.\n"
license-name: MIT
