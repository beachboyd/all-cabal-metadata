homepage: ''
changelog-type: markdown
hash: f2def621948f031ca931d81b00a9cb7dade081f61acf1d37429510385b3c8703
test-bench-deps:
  text-short: -any
  base: -any
  text: -any
  quickcheck-instances: ! '>=0.3.14 && <0.4'
  binary: -any
  tasty-quickcheck: ! '>=0.10 && <0.11'
  tasty-hunit: ! '>=0.10.0 && <0.11'
  tasty: ! '>=1.0.0 && <1.1'
maintainer: hvr@gnu.org
synopsis: Memory-efficient representation of Unicode text strings
changelog: ! "## 0.1.2\n\n  * Add `IsList ShortText` and `PrintfArg ShortText` instances\n
  \ * Expose partial functions via new `Data.Text.Short.Partial` module\n\n        foldl1
  :: (Char -> Char -> Char) -> ShortText -> Char\n        foldl1' :: (Char -> Char
  -> Char) -> ShortText -> Char\n        foldr1 :: (Char -> Char -> Char) -> ShortText
  -> Char\n        head :: ShortText -> Char\n        index :: ShortText -> Int ->
  Char\n        init :: ShortText -> ShortText\n        last :: ShortText -> Char\n
  \       tail :: ShortText -> ShortText\n\n  * Add several `Data.Text` verbs to `Data.Text.Short`
  API\n\n        (!?) :: ShortText -> Int -> Maybe Char\n        all :: (Char -> Bool)
  -> ShortText -> Bool\n        any :: (Char -> Bool) -> ShortText -> Bool\n        append
  :: ShortText -> ShortText -> ShortText\n        break :: (Char -> Bool) -> ShortText
  -> (ShortText, ShortText)\n        breakEnd :: (Char -> Bool) -> ShortText -> (ShortText,
  ShortText)\n        concat :: [ShortText] -> ShortText\n        cons :: Char ->
  ShortText -> ShortText\n        drop :: Int -> ShortText -> ShortText\n        dropAround
  :: (Char -> Bool) -> ShortText -> ShortText\n        dropEnd :: Int -> ShortText
  -> ShortText\n        dropWhile :: (Char -> Bool) -> ShortText -> ShortText\n        dropWhileEnd
  :: (Char -> Bool) -> ShortText -> ShortText\n        empty :: ShortText\n        filter
  :: (Char -> Bool) -> ShortText -> ShortText\n        find :: (Char -> Bool) -> ShortText
  -> Maybe Char\n        findIndex :: (Char -> Bool) -> ShortText -> Maybe Int\n        foldl
  :: (a -> Char -> a) -> a -> ShortText -> a\n        foldl' :: (a -> Char -> a) ->
  a -> ShortText -> a\n        foldr :: (Char -> a -> a) -> a -> ShortText -> a\n
  \       indexEndMaybe :: ShortText -> Int -> Maybe Char\n        indexMaybe :: ShortText
  -> Int -> Maybe Char\n        intercalate :: ShortText -> [ShortText] -> ShortText\n
  \       intersperse :: Char -> ShortText -> ShortText\n        isPrefixOf :: ShortText
  -> ShortText -> Bool\n        isSuffixOf :: ShortText -> ShortText -> Bool\n        pack
  :: [Char] -> ShortText\n        replicate :: Int -> ShortText -> ShortText\n        reverse
  :: ShortText -> ShortText\n        singleton :: Char -> ShortText\n        snoc
  :: ShortText -> Char -> ShortText\n        span :: (Char -> Bool) -> ShortText ->
  (ShortText, ShortText)\n        spanEnd :: (Char -> Bool) -> ShortText -> (ShortText,
  ShortText)\n        splitAt :: Int -> ShortText -> (ShortText, ShortText)\n        splitAtEnd
  :: Int -> ShortText -> (ShortText, ShortText)\n        stripPrefix :: ShortText
  -> ShortText -> Maybe ShortText\n        stripSuffix :: ShortText -> ShortText ->
  Maybe ShortText\n        take :: Int -> ShortText -> ShortText\n        takeEnd
  :: Int -> ShortText -> ShortText\n        takeWhile :: (Char -> Bool) -> ShortText
  -> ShortText\n        takeWhileEnd :: (Char -> Bool) -> ShortText -> ShortText\n
  \       uncons :: ShortText -> Maybe (Char, ShortText)\n        unpack :: ShortText
  -> [Char]\n        unsnoc :: ShortText -> Maybe (ShortText, Char)\n\n  * Optimise
  low-level primitives\n  * Add support for GHC 8.4\n\n## 0.1.1\n\n* Expose *unsafe*
  conversion API via `Data.Text.Short.Unsafe` module\n* Minor documentation improvement\n\n##
  0.1\n\n* First version. Released on an unsuspecting world.\n"
basic-deps:
  bytestring: ! '>=0.10.4 && <0.11'
  base: ! '>=4.7 && <4.13'
  text: ! '>=1.0 && <1.3'
  binary: ! '>=0.7.1 && <0.9'
  ghc-prim: ! '>=0.3.1 && <0.6'
  hashable: ! '>=1.2.6 && <1.3'
  deepseq: ! '>=1.3 && <1.5'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Herbert Valerio Riedel
latest: 0.1.2
description-type: haddock
description: ! 'This package provides the ''ShortText'' type which is suitable for
  keeping many short strings in memory. This is similiar to how ''ShortByteString''
  relates to ''ByteString''.


  The main difference between ''Text'' and ''ShortText'' is that ''ShortText'' uses
  UTF-8 instead of UTF-16 internally and also doesn''t support zero-copy slicing (thereby
  saving 2 words). Consequently, the memory footprint of a (boxed) ''ShortText'' value
  is 4 words (2 words when unboxed) plus the length of the UTF-8 encoded payload.'
license-name: BSD-3-Clause
