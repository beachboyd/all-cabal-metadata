homepage: https://github.com/elaforge/test-karya
changelog-type: ''
hash: bc78b85b94c23c20eb37f8d7858e5b74cd3ae6fba99919df3fe77cb2e58276d7
test-bench-deps: {}
maintainer: Evan Laforge <qdunkan@gmail.com>
synopsis: Testing framework.
changelog: ''
basic-deps:
  pcre-light: ! '>=0.4'
  bytestring: -any
  unix: -any
  pcre-heavy: ! '>=0.2'
  base: ! '>=4.9 && <5'
  Diff: -any
  text: -any
  test-karya: -any
  filepath: -any
  process: -any
  async: -any
  containers: -any
  ghc-prim: -any
  haskell-src: -any
  deepseq: -any
  QuickCheck: -any
  data-ordlist: -any
  pretty: -any
  directory: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
author: Evan Laforge
latest: '0.0.3'
description-type: markdown
description: ! "Some time before 2008 I needed to write tests for Haskell, specifically
  for\nwhat became <https://github.com/elaforge/karya>.  At the time, I think HUnit\nexisted,
  but it did stuff I didn't think I needed, such as manually arranging\ntests into
  a hierarchy, and didn't have stuff I thought I did, such as\nautomatic test discovery,
  diffs, filename:linenumber for failed tests, etc.\nSo I wrote my own.\n\nOver the
  years some features became obsolete (e.g. ghc now supports\nfilename:linenumber
  natively via call stacks), but I got used to this style\nof tests, so I decided
  to try to extract it for use in cabal projects.\n\nHere's what I like:\n\n- Automatic
  test discovery.  Tests are any functions named `test_*` in a\nmodule named `*_test.hs`.
  \ In Karya, I use shake to collect the tests, but\nin this cabal version, I borrowed
  the -pgmF technique from `hspec`.\n\n- Automatic test hierarchy.  Tests are named
  by their module name, so you can\nrun subsets by pattern matching on the name.  You
  don't have to collect them\ninto suites, and when running them you don't have to
  dig through the files to\nsee what they named their suites.\n\n- Low syntax overhead
  tests.  A test is any standalone function that calls\ntest functions (like `equal`):\n\n
  \   ```\n    module M_test where\n    import EL.Test.Global\n    import qualified
  M\n\n    test_something = do\n        let f = M.something\n        equal (f 10)
  20\n        equal (f 20) 30\n    ```\n\n    Tests don't abort on failure, so you
  can put a bunch together with local\n    definitions.  There's no need to name each
  test case, the error message\n    will tell you module and line number.  Since `test_something`
  is a normal\n    `IO ()` function you can run it in ghci, which is how I mainly
  work.\n\n- Doesn't mess with stdout.  A check, like the `equal` function, is any\nfunction
  that prints to stdout.  A line starting with `__->` is a failure.\nThis was originally
  the simplest stupidest thing that could work, but over\nthe last 10 years there
  was never a reason to change it, and it turns out to\nbe convenient.  Since test
  output is integrated into the stdout stream, it's\nin the right context with any
  debugging or logging.\n\n- Colored formatted diffs.  When values don't match, they
  are pretty printed\nand differing parts highlighted.\n\n- Various other ad-hoc conveniences:
  `equalFmt` attaches a formatter so you\ncan get higher level diffs, `stringsLike`
  for matching strings with patterns,\n`equalf` and `ApproxEq` typeclass for floating
  point, and `quickcheck` for\nquickcheck properties with formatted diffs.\n\n###
  how to use\n\nSee `example`, but the short version is:\n\n- Install library and
  `test-karya-generate` binary with `cabal install`.\n\n- Make a test module like
  `M_test` above.\n\n- Make `RunTests.hs` with `{-# OPTIONS_GHC -F -pgmF test-karya-generate
  #-}`\n\n- Add a `test-suite` stanza to the cabal file, like in `example`.\n\n- `cabal
  test`.  You can rerun the tests with `dist/build/test/test`, run\nonly `M_test`
  with `dist/build/test/test M_test` or pass `--help` for more\noptions, including
  running tests in parallel.\n"
license-name: BSD3
