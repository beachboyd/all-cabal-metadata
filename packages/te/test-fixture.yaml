homepage: http://github.com/cjdev/test-fixture#readme
changelog-type: markdown
hash: 6b7f8f6fb0226789ffefa7e367670bd1d710ab9b0109e8ff178563b06f0d2b98
test-bench-deps:
  base: -any
  hspec: -any
  test-fixture: -any
  mtl: -any
  transformers: -any
  hspec-discover: -any
  template-haskell: -any
maintainer: jvargas@cj.com
synopsis: Test monadic side-effects
changelog: ! "# 0.5.1.0 (October 30, 2017)\n\n  - Added lifting instances for `MonadIO`,
  `MonadThrow`, `MonadCatch`, and `MonadMask` to `TestFixtureT`.\n\n# 0.5.0.2 (July
  27, 2017)\n\n  - Added support for `template-haskell-2.12.0.0` and GHC 8.2.1.\n\n#
  0.5.0.1 (June 2, 2017)\n\n  - Fixed an issue where using `mkFixture` with a typeclass
  that used the `DefaultSignatures` extension caused an internal error ([#30](https://github.com/cjdev/test-fixture/issues/30)).\n\n#
  0.5.0.0 (November 28, 2016)\n\n  - **Breaking**: `mkFixture` now supports constraints
  in the same form as a Haskell `deriving` clause, which permits “partially-applied”
  constraints. A new `ts` quasiquoter is provided for the purpose of writing a comma-separated
  list of Haskell types; see the documentation for more details ([#25](https://github.com/cjdev/test-fixture/issues/25)).\n
  \ - Generating fixtures that do not derive any typeclasses no longer produces an
  error ([#28](https://github.com/cjdev/test-fixture/issues/28)).\n\n# 0.4.2.0 (November
  14, 2016)\n\n  - Attempting to generate a fixture for a multi-parameter typeclass
  now produces a better error message ([#24](https://github.com/cjdev/test-fixture/issues/24)).\n
  \ - Fixtures can now be generated for typeclasses containing infix operators as
  methods. They will be prefixed with a tilde (`~`) instead of an underscore ([#26](https://github.com/cjdev/test-fixture/issues/26)).\n"
basic-deps:
  exceptions: -any
  base: ! '>=4.7 && <5'
  data-default-class: -any
  th-orphans: -any
  haskell-src-exts: -any
  mtl: -any
  haskell-src-meta: -any
  template-haskell: ! '>=2.10 && <2.13'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
author: Joe Vargas
latest: 0.5.1.0
description-type: markdown
description: ! "# test-fixture [![Build Status](https://travis-ci.org/cjdev/test-fixture.svg?branch=master)](https://travis-ci.org/cjdev/test-fixture)\n\nThe
  [test-fixture][test-fixture-hackage] package is a Haskell library that makes it
  possible to easily write deterministic unit tests for code that encapsulates effects
  into monadic typeclasses. For example, given some typeclasses used to encapsulate
  effects:\n\n```haskell\nclass Monad m => MonadDB m where\n  fetchRecord :: DBRecord
  a => Id a -> m (Either DBError a)\n  insertRecord :: DBRecord a => a -> m (Either
  DBError (Id a))\n\nclass Monad m => MonadHTTP m where\n  sendRequest :: HTTPRequest
  -> m (Either HTTPError HTTPResponse)\n```\n\nOne can write `IO` instances to run
  the actual code in a real environment:\n\n```haskell\ninstance MonadDB IO where\n
  \ fetchRecord = Postgres.fetchRecord\n  insertRecord = Postgres.insertRecord\n\ninstance
  MonadHTTP IO where\n  sendRequest = sendRequestIO\n```\n\nThen use those typeclasses
  to implement some sort of side-effectful function:\n\n```haskell\nsendAndFetch ::
  (MonadDB m, MonadHTTP m, DBRecord a)\n             => HTTPRequest -> m (Either AppError
  a)\nsendAndFetch = ...\n```\n\nTesting this function might be difficult because
  of all the different possible combinations of scenarios that must be considered.
  Creating lots of different monads and instances for each case can be boilerplate-heavy
  and tedious. Using test-fixture, the boilerplate is unnecessary:\n\n```haskell\nmkFixture
  \"Fixture\" [ts| MonadDB, MonadHTTP |]\n\nspec = describe \"sendAndFetch\" $ do\n
  \ it \"returns a record when the http request and db fetch are successful\" $ do\n
  \   let (fixture :: Monad m => Fixture m) = def\n      { _fetchRecord = \\_ -> return
  $ Right procureRecord\n      , _sendRequest = \\_ -> return $ Right responseOk\n
  \     }\n    let result = unTestFixture (sendAndFetch simpleRequest) fixture\n    result
  `shouldBe` Right (User \"someone@example.com\")\n\n  it \"returns an error when
  the http request is not successful\" $ do\n    let (fixture :: Monad m => Fixture
  m) = def\n      { _fetchRecord = \\_ -> return $ Right procureRecord\n      , _sendRequest
  = \\_ -> return $ Left errorNotAuthorized\n      }\n    let result = unTestFixture
  (sendAndFetch simpleRequest) fixture\n    result `shouldBe` Left (AppHTTPError errorNotAuthorized)\n```\n\nFor
  more information and a more complete explanation, [see the documentation on Hackage][test-fixture-hackage].\n\n[test-fixture-hackage]:
  http://hackage.haskell.org/package/test-fixture\n"
license-name: BSD-3-Clause
