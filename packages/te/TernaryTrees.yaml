homepage: ''
changelog-type: ''
hash: 45c18fdcf93bb162da28f88852976ac8f3c1fba1a4ba623e05032b048bfd2659
test-bench-deps: {}
maintainer: ! 'Alex Mason (irc: Axman6) <axman6@gmail.com>'
synopsis: Efficient pure ternary tree Sets and Maps
changelog: ''
basic-deps:
  base: ! '>=4.0.0.0 && <5.0.0.0'
  binary: ! '>=0.5.0.0'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.0.4.0
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.3.4
- 0.2.0.0
- 0.2.0.2
author: Alex Mason
latest: 0.2.0.2
description-type: haddock
description: ! 'Ternary trees are an efficient structure often used for storing

  strings for fast lookups. This package implements a generic tree

  for storing lists of Ord instances, and a specialised String

  implementation which is about 30% faster than the generic version.


  An example program is provided what shows how to use the package

  as a dictionary program for spell checking, and how it can be

  used to serialise data with Don Stewart''s Data.Binary package.


  From my testing, using the \/usr\/share\/dict\/words file on my system

  (over 230,000 words), inserting all words, checking they all exist

  in the tree, writing them to a binary file, reading them back in

  and checking the read in result is the same as the original takes

  slightly over 3 seconds using the StringSet. The written file is

  also slightly smaller than the input (by over 40% in some cases).


  New in this version:


  * Fixed Other-Modules cabal entry so Internal files were added.


  &#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.'
license-name: BSD-3-Clause
