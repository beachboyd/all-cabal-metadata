homepage: https://github.com/cdepillabout/termonad
changelog-type: markdown
hash: 1c826028eccf6e73f9635ca1661a86a7dafaa2402a0769f9e711e2977efc5c25
test-bench-deps:
  termonad: -any
  base: -any
  tasty-hedgehog: -any
  hedgehog: -any
  doctest: -any
  lens: -any
  tasty: -any
  QuickCheck: -any
  template-haskell: -any
maintainer: cdep.illabout@gmail.com
synopsis: Terminal emulator configurable in Haskell
changelog: ! "\n## 0.2.1.0\n\n* Make sure the window title is set to \"Termonad\".\n*
  Relabel tabs when termonad is started.\n\n## 0.2.0.0\n\n* Open dialog asking if
  you want to quit when you try to use your WM to quit.\n* Termonad will attempt to
  open up a new terminal in the working directory of\n  the current terminal.\n* Make
  sure termonad won't crash if dyre can't find GHC.\n* Add a few more ways to compile
  on NixOS.\n* Add an icon for termonad.\n\n## 0.1.0.0\n\n* Initial release.\n"
basic-deps:
  xml-html-qq: -any
  haskell-gi-base: -any
  termonad: -any
  dyre: -any
  gi-gio: -any
  xml-conduit: -any
  base: ! '>=4.7 && <5'
  gi-glib: -any
  gi-gtk: ! '>=3.0.24'
  gi-gdk: -any
  filepath: -any
  constraints: -any
  data-default: -any
  gi-pango: -any
  gi-vte: ! '>=2.91.19'
  lens: -any
  pretty-simple: -any
  classy-prelude: -any
  colour: -any
  QuickCheck: -any
  directory: ! '>=1.3.1.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
author: Dennis Gosnell
latest: '0.2.1.0'
description-type: markdown
description: ! "\nTermonad\n=========\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/termonad.svg)](http://travis-ci.org/cdepillabout/termonad)\n[![Hackage](https://img.shields.io/hackage/v/termonad.svg)](https://hackage.haskell.org/package/termonad)\n[![Stackage
  LTS](http://stackage.org/package/termonad/badge/lts)](http://stackage.org/lts/package/termonad)\n[![Stackage
  Nightly](http://stackage.org/package/termonad/badge/nightly)](http://stackage.org/nightly/package/termonad)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\nTermonad is a terminal
  emulator configurable in Haskell.  It is extremely\ncustomizable and provides hooks
  to modify the default behavior.  It can be\nthought of as the \"XMonad\" of terminal
  emulators.\n\n![image of Termonad](./img/termonad.png)\n\n<!-- markdown-toc start
  - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n-
  [Termonad](#termonad)\n    - [Installation](#installation)\n        - [Arch Linux](#arch-linux)\n
  \       - [Ubuntu / Debian](#ubuntu--debian)\n        - [NixOS](#nixos)\n        -
  [Mac OS X](#mac-os-x)\n        - [Windows](#windows)\n    - [How to use Termonad](#how-to-use-termonad)\n
  \       - [Configuring Termonad](#configuring-termonad)\n        - [Compiling Local
  Settings](#compiling-local-settings)\n            - [Running with `stack`](#running-with-stack)\n
  \           - [Running with `nix`](#running-with-nix)\n    - [Goals](#goals)\n    -
  [Contributions](#contributions)\n    - [Maintainers](#maintainers)\n\n<!-- markdown-toc
  end -->\n\n## Installation\n\nTermonad can be installed on any system as long as
  the necessary GTK libraries\nare available.  The following are instructions for
  installing Termonad on a few\ndifferent distributions and systems.  If the given
  steps don't work for you, or\nyou want to add instructions for an additional system,
  please send a pull\nrequest.\n\nThe following steps use the\n[`stack`](https://docs.haskellstack.org/en/stable/README/)
  build tool to build\nTermonad, but [`cabal`](https://www.haskell.org/cabal/) can
  be used as well. Steps for\ninstalling `stack` can be found on\n[this page](https://docs.haskellstack.org/en/stable/install_and_upgrade/).\n\n\n###
  Arch Linux\n\nFirst, you must install the required GTK system libraries:\n\n```sh\n$
  pacman -S vte3\n```\n\nIn order to install Termonad, clone this repository and run
  `stack install`.\nThis will install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$
  git clone https://github.com/cdepillabout/termonad\n$ cd termonad/\n$ stack install\n```\n\n###
  Ubuntu / Debian\n\nFirst, you must install the required GTK system libraries:\n\n```sh\n$
  apt-get install gobject-introspection libgirepository1.0-dev libgtk-3-dev libvte-2.91-dev\n```\n\nIn
  order to install Termonad, clone this repository and run `stack install`.\nThis
  will install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack install\n```\n\n### NixOS\n\nThere are two methods to build
  Termonad on NixOS.\n\nThe first is using `stack`.  The following commands install
  `stack` for your\nuser, clone this repository, and install the `termonad` binary
  to `~/.local/bin/`:\n\n```sh\n$ nix-env -i stack\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack --nix install\n```\n\nThe second is using the normal `nix-build`
  machinery.  The following commands\nclone this repository and build the `termonad`
  binary at `./result/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ nix-build\n```\n\n### Mac OS X\n\n(*currently no instructions available.
  \ please send a PR adding instructions if you get termonad to build.*)\n\n### Windows\n\n(*currently
  no instructions available.  please send a PR adding instructions if you get termonad
  to build.*)\n\n## How to use Termonad\n\nTermonad is similar to XMonad. The above
  steps will install a `termonad` binary\nsomewhere on your system. If you have installed
  Termonad using `stack`, the\n`termonad` binary will be in `~/.local/bin/`. This
  binary is a version of\nTermonad configured with default settings. You can try running
  it to get an idea\nof what Termonad is like:\n\n```sh\n$ ~/.local/bin/termonad\n```\n\nIf
  you would like to configure termonad with your own settings, first you will\nneed
  to create a Haskell file called `~/.config/termonad/termonad.hs`. The\nnext section
  gives an example configuration file.\n\nIf this file exists, when the `~/.local/bin/termonad`
  binary launches, it will\ntry to compile it. If it succeeds, it will create a separate
  binary file called\nsomething like `~/.cache/termonad/termonad-linux-x86_64`. This
  binary file can\nbe thought of as your own personal Termonad, configured with all
  your own\nsettings.\n\nWhen you run `~/.local/bin/termonad`, it will re-exec\n`~/.cache/termonad/termonad-linux-x86_64`
  if it exists.\n\nHowever, there is one difficulty with this setup. In order for
  the\n`~/.local/bin/termonad` binary to be able to compile your\n`~/.config/termonad/termonad.hs`
  file, it needs to know where GHC is, as well as\nwhere all your Haskell packages
  live. This presents some difficulties that will\nbe discussed in a following section.\n\n###
  Configuring Termonad\n\nThe following is an example Termonad configuration file.
  You should save this to\n`~/.config/termonad/termonad.hs`. You can find more information
  on the available\nconfiguration options within the\n[`Termonad.Config`](https://hackage.haskell.org/package/termonad/docs/Termonad-Config.html)\nmodule.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Data.Colour.SRGB (Colour,
  sRGB24)\nimport Termonad.App (defaultMain)\nimport Termonad.Config\n  ( FontConfig,
  ShowScrollbar(ShowScrollbarAlways), cursorColor\n  , defaultFontConfig, defaultTMConfig,
  fontConfig, fontFamily\n  , fontSize, showScrollbar\n  )\n\n-- | This sets the color
  of the cursor in the terminal.\n--\n-- This uses the \"Data.Colour\" module to define
  a dark-red color.\n-- There are many default colors defined in \"Data.Colour.Names\".\ncursColor
  :: Colour Double\ncursColor = sRGB24 204 0 0\n\n-- | This defines the font for the
  terminal.\nfontConf :: FontConfig\nfontConf =\n  defaultFontConfig\n    { fontFamily
  = \"DejaVu Sans Mono\"\n    , fontSize = 13\n    }\n\nmain :: IO ()\nmain = do\n
  \ let termonadConf =\n        defaultTMConfig\n          { cursorColor = cursColor\n
  \         , fontConfig = fontConf\n          , showScrollbar = ShowScrollbarAlways\n
  \         }\n  defaultMain termonadConf\n```\n\n### Compiling Local Settings\n\nIf
  you lauch Termonad by calling `~/.local/bin/termonad`, it will try to\ncompile the
  `~/.config/termonad/termonad.hs` file if it exists.  The problem is\nthat `~/.local/bin/termonad`
  needs to be able to see GHC and the required\nHaskell libraries to be able to compile
  `~/.config/termonad/termonad.hs`.\n\nThere are a couple solutions to this problem,
  listed in the sections below.\n\n(These steps are definitely confusing, and I would
  love to figure out a better\nway to do this.  Please submit an issue or PR if you
  have a good idea about\nhow to fix this.)\n\n#### Running with `stack`\n\nIf you
  originally compiled Termonad with `stack`, you can use `stack` to\nexecute Termonad.
  \ First, you must change to the directory with the Termonad\nsource code.  From
  there, you can run `stack exec`:\n\n```sh\n$ cd termonad/  # change to the termonad
  source code directory\n$ stack exec -- termonad\n```\n\n`stack` will pick up the
  correct GHC version and libraries from the\n`stack.yaml` and `termonad.cabal` file.
  \ `termonad` will be run in an\nenvironment with GHC available.  `termonad` will
  use this GHC and libraries to\ncompile your `~/.config/termonad/termonad.hs` file.
  \ It if succeeds, it should\ncreate a `~/.cache/termonad/termonad-linux-x86_64`
  binary.\n\nIf you need extra Haskell libraries available when compiling your\n`~/.config/termonad/termonad.hs`
  file, you can specify them to `stack exec`:\n\n```sh\n$ stack exec --package lens
  --package conduit -- termonad\n```\n\nThe problem with this is that `stack exec`
  changes quite a few of your\nenvironment variables.  It is not recommended to actually
  run Termonad from\nwithin `stack exec`.  After you run `stack exec -- termonad`
  and let it\nrecompile your `~/.config/termonad/termonad.hs` file, exit Termonad.\nRe-run
  Termonad by calling it directly.  Termonad will notice that\n`~/.config/termonad/termonad.hs`
  hasn't changed since\n`~/.cache/termonad/termonad-linux-x86_64` has been recompiled,
  so it will\ndirectly execute `~/.cache/termonad/termonad-linux-x86_64`.\n\n####
  Running with `nix`\n\nIf you originally compiled Termonad with `nix`, you can use
  `nix` to create\nan environment with GHC and specified Haskell libraries available.\n\nThere
  is a `.nix` file available you can use to do this:\n\n[`.nix-helpers/running-termonad.nix`](./.nix-helpers/running-termonad.nix)\n\nThis
  file will give us an environment with `termonad`, GHC, and a few Haskell\nlibraries
  installed.  You can enter this environment using `nix-shell`:\n\n```sh\n$ cd termonad/
  \ # change to the termonad source code directory\n$ nix-shell ./.nix-helpers/running-termonad.nix\n```\n\nFrom
  within this environment, you can run `termonad`.  It will find the\n`~/.config/termonad/termonad.hs`
  file and compile it, outputting the\n`.cache/termonad/termonad-linux-x86_64` binary.
  \ Termonad will then re-exec\nthis binary.\n\nThe problem with this is that `nix-shell`
  may change your environment variables\nin ways you do not want.  I recommend running
  `termonad` to get it to\nrecompile your `~/.config/termonad/termonad.hs` file, then
  exit the nix-shell environment and\nrerun Termonad by calling it directly.  Termonad
  will notice that\n`~/.config/termonad/termonad.hs` hasn't been changed since\n`~/.cache/termonad/termonad-linux-x86_64`
  has been recompiled, so it will\ndirectly execute `~/.cache/termonad/termonad-linux-x86_64`.\n\n##
  Goals\n\nTermonad has the following goals:\n\n* fully configurable in Haskell\n\n
  \ There are already\n  [many](https://gnometerminator.blogspot.com/p/introduction.html)\n
  \ [good](https://www.enlightenment.org/about-terminology.md)\n  [terminal](http://software.schmorp.de/pkg/rxvt-unicode.html)\n
  \ [emulators](https://launchpad.net/sakura).  However, there are no terminal\n  emulators
  fully configurable in Haskell.  Termonad fills this niche.\n\n* flexible\n\n  Most
  people only need a terminal emulator that lets you change the font-size,\n  cursor
  color, etc.  They don't need tons of configuration options.\n  Termonad should be
  for people that like lots of configuration options.\n  Termonad should provide many
  hooks to allow the user to change it's behavior.\n\n* stable\n\n  Termonad should
  be able to be used as everyday as your main terminal\n  emulator.  It should not
  crash for any reason.  If you experience a crash,\n  please file an issue or a pull
  request!\n\n* good documentation\n\n  The [documentation](https://hackage.haskell.org/package/termonad)
  for\n  Termonad on Hackage should be good.  You shouldn't have to guess at what\n
  \ certain data types or functions do.  If you have a hard time understanding\n  anything
  in the documentation, please submit an issue or PR.\n\n## Contributions\n\nContributions
  are highly appreciated.  Termonad is currently missing many\nhelpful configuration
  options and behavior hooks.  If there is something you\nwould like to add, please
  submit an issue or PR.\n\n## Maintainers\n\n- [Dennis Gosnell](https://github.com/cdepillabout)\n"
license-name: BSD3
