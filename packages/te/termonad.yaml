homepage: https://github.com/cdepillabout/termonad
changelog-type: markdown
hash: d701e3c7ebddb6da46ab597099fd77048609346f03d4e165a58ae004b87297c3
test-bench-deps:
  termonad: -any
  base: -any
  tasty-hedgehog: -any
  hedgehog: -any
  doctest: -any
  lens: -any
  tasty: -any
  QuickCheck: -any
  template-haskell: -any
maintainer: cdep.illabout@gmail.com
synopsis: Terminal emulator configurable in Haskell
changelog: ! "## 0.2.0.0\n\n* Open dialog asking if you want to quit when you try
  to use your WM to quit.\n* Termonad will attempt to open up a new terminal in the
  working directory of\n  the current terminal.\n* Make sure termonad won't crash
  if dyre can't find GHC.\n* Add a few more ways to compile on NixOS.\n* Add an icon
  for termonad.\n\n## 0.1.0.0\n\n* Initial release.\n"
basic-deps:
  xml-html-qq: -any
  haskell-gi-base: -any
  termonad: -any
  dyre: -any
  gi-gio: -any
  xml-conduit: -any
  base: ! '>=4.7 && <5'
  gi-glib: -any
  gi-gtk: ! '>=3.0.24'
  gi-gdk: -any
  filepath: -any
  constraints: -any
  data-default: -any
  gi-pango: -any
  gi-vte: ! '>=2.91.18'
  lens: -any
  pretty-simple: -any
  classy-prelude: -any
  colour: -any
  QuickCheck: -any
  directory: ! '>=1.3.1.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Dennis Gosnell
latest: '0.2.0.0'
description-type: markdown
description: ! "\nTermonad\n=========\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/termonad.svg)](http://travis-ci.org/cdepillabout/termonad)\n[![Hackage](https://img.shields.io/hackage/v/termonad.svg)](https://hackage.haskell.org/package/termonad)\n[![Stackage
  LTS](http://stackage.org/package/termonad/badge/lts)](http://stackage.org/lts/package/termonad)\n[![Stackage
  Nightly](http://stackage.org/package/termonad/badge/nightly)](http://stackage.org/nightly/package/termonad)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\nTermonad is a terminal
  emulator configurable in Haskell.  It is extremely\ncustomizable and provides hooks
  to modify the default behavior.  It can be\nthought of as the \"XMonad\" of terminal
  emulators.\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc
  -->\n**Table of Contents**\n\n- [Termonad](#termonad)\n    - [Installation](#installation)\n
  \       - [Arch Linux](#arch-linux)\n        - [Ubuntu / Debian](#ubuntu--debian)\n
  \       - [NixOS](#nixos)\n    - [How to use Termonad](#how-to-use-termonad)\n    -
  [Goals](#goals)\n    - [Maintainers](#maintainers)\n\n<!-- markdown-toc end -->\n\n##
  Installation\n\nTermonad can be able to be installed on any system as long as the
  necessary GTK\nlibraries are installed.  The following lists instructions for a
  few\ndistributions.  If the given steps don't work for you, or you want to add\ninstructions
  for an additional distribution, please send a pull request.\n\nThe following steps
  use the\n[`stack`](https://docs.haskellstack.org/en/stable/README/) build tool to
  build\nTermonad, but [`cabal`](https://www.haskell.org/cabal/) can be used as well.\nIf
  `cabal` doesn't work for you, please open an issue or send a pull request.\n\n###
  Arch Linux\n\nFirst, you must install the required GTK system libraries:\n\n```sh\n$
  pacman -S vte3\n```\n\nYou must have `stack` to be able to build Termonad.  Steps
  for\ninstalling `stack` can be found on\n[this page](https://docs.haskellstack.org/en/stable/install_and_upgrade/).\n\nIn
  order to install Termonad, clone this repository and run `stack install`.\nThis
  will install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack install\n```\n\n### Ubuntu / Debian\n\nFirst, you must install
  the required GTK system libraries:\n\n```sh\n$ apt-get install gobject-introspection
  libgirepository1.0-dev libgtk-3-dev libvte-2.91-dev\n```\n\nYou must have `stack`
  to be able to build Termonad.  Steps for\ninstalling `stack` can be found on\n[this
  page](https://docs.haskellstack.org/en/stable/install_and_upgrade/).\n\nIn order
  to install Termonad, clone this repository and run `stack install`.\nThis will install
  the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack install\n```\n\n### NixOS\n\nThere are two methods to build
  Termonad on NixOS.\n\nThe first is using `stack`.  The following commands install
  `stack` for your\nuser, clone this repository, and install the `termonad` binary
  to `~/.local/bin/`:\n\n```sh\n$ nix-env -i stack\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack --nix install\n```\n\nThe second is using the normal `nix-build`
  machinery.  The following commands\nclone this repository and build the `termonad`
  binary at `./result/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ nix-build\n```\n\n## How to use Termonad\n\nTermonad is similar
  to XMonad. The above steps will install a `termonad` binary\nsomewhere on your system.
  If you have installed Termonad using `stack`, the\n`termonad` binary will be in
  `~/.local/bin/`. This binary is a version of\nTermonad configured with default settings.
  You can try running it to get an idea\nof what Termonad is like:\n\n```sh\n$ ~/.local/bin/termonad\n```\n\nIf
  you would like to configure termonad with your own settings, first you will\nneed
  to create a Haskell file called `~/.config/termonad/termonad.hs`. The\nnext section
  gives an example configuration file.\n\nIf this file exists, when the `~/.local/bin/termonad`
  binary launches, it will\ntry to compile it. If it succeeds, it will create a separate
  binary file called\nsomething like `~/.cache/termonad/termonad-linux-x86_64`. This
  binary file can\nbe thought of as your own personal Termonad, configured with all
  your own\nsettings.\n\nWhen you run `~/.local/bin/termonad`, it will re-exec\n`~/.cache/termonad/termonad-linux-x86_64`
  if it exists.\n\nHowever, there is one difficulty with this setup. In order for
  the\n`~/.local/bin/termonad` binary to be able to compile your\n`~/.config/termonad/termonad.hs`
  file, it needs to know where GHC is, as well as\nwhere all your Haskell packages
  live. This presents some difficulties that will\nbe discussed in a following section.\n\n###
  Configuring Termonad\n\nThe following is an example Termonad configuration file.
  You should save this to\n`~/.config/termonad/termonad.hs`. You can find more information
  on the available\nconfiguration options within the\n[`Termonad.Config`](https://hackage.haskell.org/package/termonad/docs/Termonad-Config.html)\nmodule.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Data.Colour.SRGB (Colour,
  sRGB24)\nimport Termonad.App (defaultMain)\nimport Termonad.Config\n  ( FontConfig,
  ShowScrollbar(ShowScrollbarAlways), cursorColor\n  , defaultFontConfig, defaultTMConfig,
  fontConfig, fontFamily\n  , fontSize, showScrollbar\n  )\n\n-- | This sets the color
  of the cursor in the terminal.\n--\n-- This uses the \"Data.Colour\" module to define
  a dark-red color.\n-- There are many default colors defined in \"Data.Colour.Names\".\ncursColor
  :: Colour Double\ncursColor = sRGB24 204 0 0\n\n-- | This defines the font for the
  terminal.\nfontConf :: FontConfig\nfontConf =\n  defaultFontConfig\n    { fontFamily
  = \"DejaVu Sans Mono\"\n    , fontSize = 13\n    }\n\nmain :: IO ()\nmain = do\n
  \ let termonadConf =\n        defaultTMConfig\n          { cursorColor = cursColor\n
  \         , fontConfig = fontConf\n          , showScrollbar = ShowScrollbarAlways\n
  \         }\n  defaultMain termonadConf\n```\n\n## Goals\n\n## Maintainers\n\n-
  [Dennis Gosnell](https://github.com/cdepillabout)\n"
license-name: BSD3
