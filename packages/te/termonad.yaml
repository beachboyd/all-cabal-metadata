homepage: https://github.com/cdepillabout/termonad
changelog-type: markdown
hash: ac45ae3976c457f7dfb96bcd2a0786e5c0e7e0dbd056231efda78934f65b7420
test-bench-deps:
  termonad: -any
  base: -any
  tasty-hedgehog: -any
  tasty-hspec: -any
  hedgehog: -any
  genvalidity-hspec: -any
  doctest: -any
  lens: -any
  genvalidity-containers: -any
  tasty: -any
  QuickCheck: -any
  template-haskell: -any
maintainer: cdep.illabout@gmail.com
synopsis: Terminal emulator configurable in Haskell
changelog: ! "## 1.0.1.0\n\n* Stop using the `widgetSetFocusOnClick` function, which
  is not supported on\n  older versions of GTK. This lets Termonad be compiled with
  older versions\n  of GTK. [#87](https://github.com/cdepillabout/termonad/pull/87).\n*
  Add CI. [#87](https://github.com/cdepillabout/termonad/pull/87).\n* Support versions
  of VTE-2.91 older than 0.44.\n  [#87](https://github.com/cdepillabout/termonad/pull/87).\n*
  Add some functions for converting from a list to a `Vec` in\n  `Termonad.Config.Vec`:
  `fromListVec` and `fromListVec_`.  Commit 883eb98b5f.\n* Fix the paste hotkey. [#86](https://github.com/cdepillabout/termonad/pull/86).\n\n##
  1.0.0.0\n\n* The API for configuring Termonad is now completely different. Many,
  many\n  changes have gone into this version.  You should approach it as a\n  completely
  different application.\n\n  The CHANGELOG will be kept up-to-date for future releases.\n\n##
  0.2.1.0\n\n* Make sure the window title is set to \"Termonad\".\n* Relabel tabs
  when termonad is started.\n\n## 0.2.0.0\n\n* Open dialog asking if you want to quit
  when you try to use your WM to quit.\n* Termonad will attempt to open up a new terminal
  in the working directory of\n  the current terminal.\n* Make sure termonad won't
  crash if dyre can't find GHC.\n* Add a few more ways to compile on NixOS.\n* Add
  an icon for termonad.\n\n## 0.1.0.0\n\n* Initial release.\n"
basic-deps:
  xml-html-qq: -any
  haskell-gi-base: ! '>=0.21.2'
  termonad: -any
  dyre: -any
  gi-gio: -any
  xml-conduit: -any
  base: ! '>=4.7 && <5'
  adjunctions: -any
  markdown-unlit: -any
  distributive: -any
  gi-glib: -any
  gi-gtk: ! '>=3.0.24'
  gi-gdk: -any
  filepath: -any
  constraints: -any
  data-default: -any
  containers: -any
  singletons: -any
  gi-pango: -any
  gi-vte: ! '>=2.91.19'
  lens: -any
  pretty-simple: -any
  classy-prelude: -any
  colour: -any
  QuickCheck: -any
  focuslist: -any
  mono-traversable: -any
  directory: ! '>=1.3.1.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
- '1.0.0.0'
- '1.0.1.0'
author: Dennis Gosnell
latest: '1.0.1.0'
description-type: markdown
description: ! "\nTermonad\n=========\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/termonad.svg)](http://travis-ci.org/cdepillabout/termonad)\n[![Hackage](https://img.shields.io/hackage/v/termonad.svg)](https://hackage.haskell.org/package/termonad)\n[![Stackage
  LTS](http://stackage.org/package/termonad/badge/lts)](http://stackage.org/lts/package/termonad)\n[![Stackage
  Nightly](http://stackage.org/package/termonad/badge/nightly)](http://stackage.org/nightly/package/termonad)\n[![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)](./LICENSE)\n[![Join
  the chat at https://gitter.im/termonad/Lobby](https://badges.gitter.im/termonad/Lobby.svg)](https://gitter.im/termonad/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Join
  the chat in #termonad on irc.freenode.net](https://img.shields.io/badge/%23termonad-irc.freenode.net-brightgreen.svg)](https://webchat.freenode.net/)\n\nTermonad
  is a terminal emulator configurable in Haskell.  It is extremely\ncustomizable and
  provides hooks to modify the default behavior.  It can be\nthought of as the \"XMonad\"
  of terminal emulators.\n\n![image of Termonad](./img/termonad.png)\n\n<!-- markdown-toc
  start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of
  Contents**\n\n- [Termonad](#termonad)\n    - [Installation](#installation)\n        -
  [Arch Linux](#arch-linux)\n        - [Ubuntu / Debian](#ubuntu--debian)\n        -
  [Nix](#nix)\n        - [Mac OS X](#mac-os-x)\n            - [Installing with just
  `stack`](#installing-with-just-stack)\n            - [Installing with just `nix`](#installing-with-just-nix)\n
  \           - [Installing with `stack` using `nix`](#installing-with-stack-using-nix)\n
  \       - [Windows](#windows)\n    - [How to use Termonad](#how-to-use-termonad)\n
  \       - [Default Key Bindings](#default-key-bindings)\n        - [Configuring
  Termonad](#configuring-termonad)\n        - [Compiling Local Settings](#compiling-local-settings)\n
  \           - [Running with `stack`](#running-with-stack)\n            - [Running
  with `nix`](#running-with-nix)\n    - [Goals](#goals)\n    - [Where to get help](#where-to-get-help)\n
  \   - [Contributions](#contributions)\n    - [Maintainers](#maintainers)\n\n<!--
  markdown-toc end -->\n\n## Installation\n\nTermonad can be installed on any system
  as long as the necessary GTK libraries\nare available.  The following are instructions
  for installing Termonad on a few\ndifferent distributions and systems.  If the given
  steps don't work for you, or\nyou want to add instructions for an additional system,
  please send a pull\nrequest.\n\nThe following steps use the\n[`stack`](https://docs.haskellstack.org/en/stable/README/)
  build tool to build\nTermonad, but [`cabal`](https://www.haskell.org/cabal/) can
  be used as well. Steps for\ninstalling `stack` can be found on\n[this page](https://docs.haskellstack.org/en/stable/install_and_upgrade/).\n\n\n###
  Arch Linux\n\nFirst, you must install the required GTK system libraries:\n\n```sh\n$
  pacman -S vte3\n```\n\nIn order to install Termonad, clone this repository and run
  `stack install`.\nThis will install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$
  git clone https://github.com/cdepillabout/termonad\n$ cd termonad/\n$ stack install\n```\n\n###
  Ubuntu / Debian\n\nFirst, you must install the required GTK system libraries:\n\n```sh\n$
  apt-get install gobject-introspection libgirepository1.0-dev libgtk-3-dev libvte-2.91-dev\n```\n\nIn
  order to install Termonad, clone this repository and run `stack install`.\nThis
  will install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ stack install\n```\n\n### Nix\n\nIf you have `nix` installed, you
  should be able to use it to build Termonad.\nThis means that it will work on NixOS,
  or with `nix` on another distro.  There\nare two different ways to use `nix` to
  build Termonad:\n\nThe first is using `stack`.  The following commands install `stack`
  for your\nuser, clone this repository, and install the `termonad` binary to `~/.local/bin/`:\n\n```sh\n$
  nix-env -i stack\n$ git clone https://github.com/cdepillabout/termonad\n$ cd termonad/\n$
  stack --nix install\n```\n\nThe second is using the normal `nix-build` machinery.
  \ The following commands\nclone this repository and build the `termonad` binary
  at `./result/bin/`:\n\n```sh\n$ git clone https://github.com/cdepillabout/termonad\n$
  cd termonad/\n$ nix-build\n```\n\n### Mac OS X\n\nBuilding and installing Termonad
  on Mac OS X should be possible with any of the following three methods:\n\n-   Install
  the required system libraries (like GTK and VTE) by hand, then use\n    `stack`
  to build Termonad.\n\n    This is probably the easiest method.  You don't have to
  understand anything\n    about `nix`.  However, it is slightly annoying to have
  to install GTK and\n    VTE by hand.\n\n-   Use `nix` to install both the required
  system libraries and Termonad itself.\n\n    If you are a nix user and want an easy
  way to install Termonad, this\n    is the recommended method.\n\n-   Use `nix` to
  install install the required system libraries, and `stack` to\n    build Termonad.\n\n
  \   If you are a nix user, but want to use `stack` to actually do development\n
  \   on Termonad, using `stack` may be easier than using `cabal`.\n\nThe following
  sections describe each method.\n\n#### Installing with just `stack`\n\n(*currently
  no instructions available.  please send a PR adding instructions if you get termonad
  to build using this method.*)\n\n#### Installing with just `nix`\n\n`nix` can be
  used to install Termonad with the following steps, assuming you\nhave `nix` [installed](https://nixos.org/nix/download.html).
  \ These commands\nclone this repository and build the `termonad` binary at `./result/bin/`:\n\n```sh\n$
  git clone https://github.com/cdepillabout/termonad\n$ cd termonad/\n$ nix-build\n```\n\n####
  Installing with `stack` using `nix`\n\n`stack` can be used in conjunction with `nix`
  to install Termonad.  `nix` will\nhandle installing system dependencies (like GTK
  and VTE), while `stack` will\nhandle compiling and installing Haskell packages.\n\nYou
  must have `nix` [installed](https://nixos.org/nix/download.html).\n\nYou will also
  need `stack` installed.  You can do that with the following command:\n\n```sh\n$
  nix-env -i stack\n```\n\nAfter `stack` is installed, you will need to clone Termonad
  and build it:\n\n```\n$ git clone https://github.com/cdepillabout/termonad\n$ cd
  termonad/\n$ stack --nix install\n```\n\nThis will install the `termonad` binary
  to `~/.local/bin/`.\n\n### Windows\n\n(*currently no instructions available.  please
  send a PR adding instructions if you get termonad to build.*)\n\n## How to use Termonad\n\nTermonad
  is similar to XMonad. The above steps will install a `termonad` binary\nsomewhere
  on your system. If you have installed Termonad using `stack`, the\n`termonad` binary
  will be in `~/.local/bin/`. This binary is a version of\nTermonad configured with
  default settings. You can try running it to get an idea\nof what Termonad is like:\n\n```sh\n$
  ~/.local/bin/termonad\n```\n\nThe following section describes the default key bindings.\n\nIf
  you would like to configure Termonad with your own settings, first you will\nneed
  to create a Haskell file called `~/.config/termonad/termonad.hs`. A following\nsection
  gives an example configuration file.\n\nIf this configuration file exists, when
  the `~/.local/bin/termonad` binary\nlaunches, it will try to use GHC to compile
  the configuration file. If GHC\nis able to successfully compile the configuration
  file, a separate binary will\nbe created called something like `~/.cache/termonad/termonad-linux-x86_64`.\nThis
  binary file can be thought of as your own personal Termonad, configured\nwith all
  your own settings.\n\nWhen you run `~/.local/bin/termonad`, it will re-exec\n`~/.cache/termonad/termonad-linux-x86_64`
  if it exists.\n\nHowever, there is one difficulty with this setup. In order for
  the\n`~/.local/bin/termonad` binary to be able to compile your\n`~/.config/termonad/termonad.hs`
  configuration file, Termonad needs to know\nwhere GHC is, as well as where all your
  Haskell packages live. This presents\nsome difficulties that will be discussed in
  a following section.\n\n### Default Key Bindings\n\nTermonad provides the following
  default key bindings.\n\n| Key binding | Action |\n|------------|--------|\n| <kbd>Ctrl</kbd>
  <kbd>Shift</kbd> <kbd>t</kbd> | Open new tab. |\n| <kbd>Ctrl</kbd> <kbd>Shift</kbd>
  <kbd>w</kbd> | Close tab. |\n| <kbd>Alt</kbd> <kbd>(number key)</kbd> | Switch to
  tab `number`.  For example, <kbd>Alt</kbd> <kbd>2</kbd> switches to tab 2. |\n\n###
  Configuring Termonad\n\nThe following is an example Termonad configuration file.
  You should save this to\n`~/.config/termonad/termonad.hs`. You can find more information
  on the available\nconfiguration options within the\n[`Termonad.Config`](https://hackage.haskell.org/package/termonad/docs/Termonad-Config.html)\nmodule.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Data.Colour.SRGB (Colour,
  sRGB24)\nimport Termonad.App (defaultMain)\nimport Termonad.Config\n  ( FontConfig,
  FontSize(FontSizePoints), Option(Set)\n  , ShowScrollbar(ShowScrollbarAlways), defaultConfigOptions,
  defaultFontConfig\n  , defaultTMConfig, fontConfig, fontFamily, fontSize, options,
  showScrollbar\n  )\nimport Termonad.Config.Colour\n  (ColourConfig, addColourExtension,
  createColourExtension, cursorBgColour\n  , defaultColourConfig\n  )\n\n-- | This
  sets the color of the cursor in the terminal.\n--\n-- This uses the \"Data.Colour\"
  module to define a dark-red color.\n-- There are many default colors defined in
  \"Data.Colour.Names\".\ncursBgColor :: Colour Double\ncursBgColor = sRGB24 204 0
  0\n\n-- | This sets the colors used for the terminal.  We only specify the background\n--
  color of the cursor.\ncolConf :: ColourConfig (Colour Double)\ncolConf =\n  defaultColourConfig\n
  \   { cursorBgColour = Set cursBgColor\n    }\n\n-- | This defines the font for
  the terminal.\nfontConf :: FontConfig\nfontConf =\n  defaultFontConfig\n    { fontFamily
  = \"DejaVu Sans Mono\"\n    , fontSize = FontSizePoints 13\n    }\n\nmain :: IO
  ()\nmain = do\n  colExt <- createColourExtension colConf\n  let termonadConf =\n
  \       defaultTMConfig\n          { options =\n              defaultConfigOptions\n
  \               { fontConfig = fontConf\n                  -- Make sure the scrollbar
  is always visible.\n                , showScrollbar = ShowScrollbarAlways\n                }\n
  \         }\n        `addColourExtension` colExt\n  defaultMain termonadConf\n```\n\n###
  Compiling Local Settings\n\nIf you launch Termonad by calling `~/.local/bin/termonad`,
  it will try to\ncompile the `~/.config/termonad/termonad.hs` file if it exists.
  \ The problem is\nthat `~/.local/bin/termonad` needs to be able to see GHC and the
  required\nHaskell libraries to be able to compile `~/.config/termonad/termonad.hs`.\n\nThere
  are a couple solutions to this problem, listed in the sections below.\n\n(These
  steps are definitely confusing. I would love to figure out a better\nway to do this.
  \ Please submit an issue or PR if you have a good idea about\nhow to fix this.)\n\n####
  Running with `stack`\n\nIf you originally compiled Termonad with `stack`, you can
  use `stack` to\nexecute Termonad.  First, you must change to the directory with
  the Termonad\nsource code.  From there, you can run `stack exec`:\n\n```sh\n$ cd
  termonad/  # change to the termonad source code directory\n$ stack exec -- termonad\n```\n\n`stack`
  will pick up the correct GHC version and libraries from the\n`stack.yaml` and `termonad.cabal`
  file.  `termonad` will be run in an\nenvironment with GHC available.  `termonad`
  will use this GHC and libraries to\ncompile your `~/.config/termonad/termonad.hs`
  file.  It if succeeds, it should\ncreate a `~/.cache/termonad/termonad-linux-x86_64`
  binary.\n\nIf you need extra Haskell libraries available when compiling your\n`~/.config/termonad/termonad.hs`
  file, you can specify them to `stack exec`:\n\n```sh\n$ stack exec --package lens
  --package conduit -- termonad\n```\n\nThe problem with this is that `stack exec`
  changes quite a few of your\nenvironment variables.  It is not recommended to actually
  run Termonad from\nwithin `stack exec`.  After you run `stack exec -- termonad`
  and let it\nrecompile your `~/.config/termonad/termonad.hs` file, exit Termonad.\nRe-run
  Termonad by calling it directly.  Termonad will notice that\n`~/.config/termonad/termonad.hs`
  hasn't changed since\n`~/.cache/termonad/termonad-linux-x86_64` has been recompiled,
  so it will\ndirectly execute `~/.cache/termonad/termonad-linux-x86_64`.\n\n####
  Running with `nix`\n\nBuilding Termonad with `nix` (by running `nix-build` in the
  top\ndirectory) sets it up so that Termonad can see GHC.  Termonad should be able\nto
  compile the `~/.config/termonad/termonad.hs` file by default.\n\nIf you're interested
  in how this works, or want to change which Haskell\npackages are available from
  your `~/.config/termonad/termonad.hs` file, please\nsee the documentation in the\n[`.nix-helpers/termonad-with-packages.nix`](./.nix-helpers/termonad-with-packages.nix)\nfile.\n\n##
  Goals\n\nTermonad has the following goals:\n\n* fully configurable in Haskell\n\n
  \ There are already\n  [many](https://gnometerminator.blogspot.com/p/introduction.html)\n
  \ [good](https://www.enlightenment.org/about-terminology.md)\n  [terminal](http://software.schmorp.de/pkg/rxvt-unicode.html)\n
  \ [emulators](https://launchpad.net/sakura).  However, there are no terminal\n  emulators
  fully configurable in Haskell.  Termonad fills this niche.\n\n* flexible\n\n  Most
  people only need a terminal emulator that lets you change the font-size,\n  cursor
  color, etc.  They don't need tons of configuration options.  Termonad\n  should
  be for people that like lots of configuration options.  Termonad\n  should provide
  many hooks to allow the user full control over its behavior.\n\n* stable\n\n  Termonad
  should be able to be used everyday as your main terminal\n  emulator.  It should
  not crash for any reason.  If you experience a crash,\n  please file an issue or
  a pull request!\n\n* good documentation\n\n  The [documentation](https://hackage.haskell.org/package/termonad)
  for\n  Termonad on Hackage should be good.  You shouldn't have to guess at what\n
  \ certain data types or functions do.  If you have a hard time understanding\n  anything
  in the documentation, please submit an issue or PR.\n\n## Where to get help\n\nIf
  you find a bug in Termonad, please either\n[send a PR](https://github.com/cdepillabout/termonad/pulls)
  fixing it or create\nan [issue](https://github.com/cdepillabout/termonad/issues)
  explaining it.\n\nIf you just need help with configuring Termonad, you can either
  join the\n[Gitter room](https://gitter.im/termonad/Lobby) or\n[#termonad on irc.freenode.net](https://webchat.freenode.net/).\n\n##
  Contributions\n\nContributions are highly appreciated.  Termonad is currently missing
  many\nhelpful configuration options and behavior hooks.  If there is something you\nwould
  like to add, please submit an issue or PR.\n\n## Maintainers\n\n- [cdepillabout](https://github.com/cdepillabout)\n-
  [LSLeary](https://github.com/LSLeary)\n"
license-name: BSD3
