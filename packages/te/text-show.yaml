homepage: https://github.com/RyanGlScott/text-show
changelog-type: markdown
hash: 9acf5d44bf2d577eca2caf4ebf8b2dd9f9e102c4345e304141a4d89ae2fd0ced
test-bench-deps:
  bytestring: ! '>=0.9 && <0.11'
  base-compat-batteries: ! '>=0.10 && <0.11'
  base: ! '>=4.9 && <4.13'
  deriving-compat: ! '>=0.3.4 && <1'
  hspec: ! '>=2 && <3'
  text: ! '>=0.11.1 && <1.3'
  generic-deriving: ! '>=1.11 && <2'
  text-show: -any
  criterion: ! '>=1.1.4 && <2'
  semigroups: ! '>=0.18.3 && <1'
  array: ! '>=0.3 && <0.6'
  base-orphans: ! '>=0.6 && <0.9'
  tagged: ! '>=0.8.3 && <1'
  quickcheck-instances: ! '>=0.3.18 && <0.4'
  ghc-prim: -any
  nats: ! '>=0.1 && <2'
  transformers: (>=0.2.1 && <0.4) || (>=0.5 && <0.6)
  deepseq: ! '>=1.3 && <2'
  bytestring-builder: -any
  QuickCheck: ! '>=2.12 && <2.13'
  template-haskell: ! '>=2.5 && <2.15'
  transformers-compat: ! '>=0.5 && <1'
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Efficient conversion of values into Text
changelog: ! "### 3.7.5 [2018.10.07]\n* _Actually_ make `showbEFloat`'s behavior match
  that of `showEFloat` in\n  `base-4.12`.\n* Remove uses of `AutoDeriveTypeable`,
  since it is now deprecated. (As a\n  result, some things which used to have `Typeable`
  instances on GHC 7.8\n  no longer do, but I'm choosing not to be bothered by this
  unless someone\n  shouts.)\n\n### 3.7.4 [2018.07.03]\n* Add `FromGeneric` and `FromGeneric1`
  newtype adapters to `TextShow.Generic`.\n  These are suitable for use with `DerivingVia`,
  and provide a convenient way\n  to obtain `Generic(1)`-based defaults for `TextShow(1)`
  instances.\n* Add `TextShow(1)` instances for `Data.Monoid.Ap` on `base-4.12` or
  later.\n* Make `showbEFloat`'s behavior match that of `showEFloat` in `base-4.12`.\n\n###
  3.7.3 [2018.04.07]\n* Use `base-compat-batteries`.\n* Add a `TextShow FixIOException`
  instance on `base-4.11` or later.\n\n### 3.7.2 [2018.03.08]\n* Depend on `quickcheck-instances-0.3.18`
  or later.\n\n### 3.7.1 [2017.12.29]\n* Don't define a `TextShow GCStats` instance
  on GHC 8.4 or later, as `GCStats`\n  has been removed from `base`. This fixes the
  build on GHC 8.4.\n\n## 3.7 [2017.12.07]\n* Use `EmptyCase` on GHC 7.8 or later
  for `TextShow(1)` instances for empty data types that are derived using `TextShow.Generic`.\n*
  Derived `TextShow(1)(2)` instances (using `TextShow.TH`) will now force their argument
  instead of simply `error`ing.\n* Add `emptyCaseBehavior` to `Options`, which configures
  whether derived instances (using `TextShow.TH`) for empty data types should use
  the `EmptyCase` extension (this is disabled by default).\n\n### 3.6.2 [2017.06.18]\n*
  Drop support for GHC 7.0 and 7.2\n* Require `QuickCheck-2.10`/`quickcheck-instances-0.13.6`
  or later\n\n### 3.6 [2017.04.22]\n* Introduce some 'TextShow' instances for datatypes
  added in `base-4.10.0.0`:\n  * `CBool` (from `Foreign.C.Types`)\n  * `CBlkSize`,
  `CBlkCnt`, `CClockId`, `CFsBlkCnt`, `CId`, `CKey`, and `CTimer` (from `System.Posix.Types`)\n
  \ * `CompactionFailed` (from `Control.Exception`)\n  * `(:~~:)` (from `Data.Type.Equality`)\n
  \ * `TypeRep` and `SomeTypeRep` (from `Type.Reflection`)\n* Remove most monomorphic
  `TextShow` functions, as their utility is questionable, and their maintenance burden
  is undeniable\n* Add `showbCommaSpace`, `showtCommaSpace`, and `showtlCommaSpace`
  to `TextShow`. This appears quite frequently in derived `TextShow` instances, so
  it is likely worthwhile to define it once.\n* Rename `showbVersionConcrete` to `showbVersion`
  in `TextShow.Data.Version`\n* Add `SPECIALIZE` pragmas for `showbEFloat`, `showbFFloat`,
  and `showbGFloat` in `TextShow.Data.Floating`, mirroring the ones in `Numeric`\n*
  Generalize the kind of the last type parameter for the `TextShow (Const a b)` instance,
  which previously had been defaulted to `*`\n* Refactor test suite\n\n#### 3.4.1.1
  [2016.11.07]\n* Require `criterion-1.1.4` or later. This allows the benchmarks to
  be run on older versions of GHC.\n\n### 3.4.1 [2016.10.20]\n* Require `QuickCheck-2.9`
  or later\n* Fix bug in which infix record selectors weren't shown with parentheses\n\n##
  3.4\n* The default definitions of `showt` and `showtl` were changed to `showtPrec
  0` and `showtlPrec 0`, respectively\n* `deriveTextShowOptions`, `deriveTextShow1Options`,
  and `deriveTextShow2Options` added to `TextShow.TH`, which allow further configuration
  of how `TextShow(1)(2)` instances should be derived using the new `Options` data
  type. `Options` itself contains `GenTextMethods`, which configures whether manual
  implementations of `TextShow` should implement the methods that return strict and
  lazy `Text`.\n  * The `defaultOptions` uses `SometimesTextMethods`, which only implements
  the `Text`-returning methods if the datatype contains only nullary constructors
  (i.e., it is an enumeration type). For example, `deriveTextShow = deriveTextShowOptions
  defaultOptions`. One can also choose `AlwaysTextMethods` or `NeverTextMethods` instead.\n*
  The internals of `TextShow.Generic` were refactored so that is possible to generically
  derive `showbPrec`, `showtPrec`, and `showtlPrec` (which use `Builder`, strict `Text`,
  and lazy `Text`, respectively). Before, only generic derivation of `showbPrec` was
  possible, and all other generic functions were defined in terms of `showbPrec`.\n
  \ * The internal class `GTextShow` was split up into `GShowB`, `GShowT`, and `GShowTL`,
  depending on what type it returns.\n  * As a result, functions like `genericShowtPrec`
  might be faster than before if they are showing something like an enumeration type,
  since they no longer construct an intermediate `Builder`. On the other hand, they
  might be slower if they are showing a constructor with many fields, since they will
  now be appending lots of `Text`s. If so, make sure to switch to `genericShowbPrec`
  and convert the final `Builder` to `Text` instead.\n* Added `showtParen`, `showtSpace`,
  `showtlParen`, `showtlSpace`, `liftShowtPrec`, `liftShowtPrec2`, `liftShowtlPrec`,
  and `liftShowtlPrec2` to `TextShow`\n* Added `showtPrecToShowbPrec`, `showtlPrecToShowbPrec`,
  `showtToShowb`, `showtlToShowb`, `showbPrecToShowtPrec`, `showbPrecToShowtlPrec`,
  `showbToShowt`, and `showbToShowtl` to `TextShow`\n* Added `showtListWith` and `showtlListWith`
  to `TextShow.Data.List`\n* Added `Data` instance for `ConType` in `TextShow.Generic`\n*
  Require `generic-deriving-1.11` or later\n\n## 3.3\n* Refactored the internals of
  `TextShow.Generic` to avoid the use of proxies.\n* Made benchmark suite more comprehensive,
  including benchmarks for showing an enumeration type\n* Microoptimization in derived
  `TextShow1/2` instances involving `TextShow.TH`\n* Allow building with `QuickCheck-2.9`\n*
  Fix GHC HEAD build\n\n### 3.2.2\n* Added benchmarks\n\n### 3.2.1\n* Fixed compilation
  on GHC 8.0\n\n## 3.2\n* Rewrote `TextShow.Generic` to enable more code reuse. The
  `GTextShow1` and `GTextShow1Con` classes were eliminated, and `GTextShow` and `GTextShowCon`
  were redesigned to be able to generically implement both `showbPrec` and `liftShowbPrec`.
  The latter two classes now take an additional `arity` type parameter which is `Zero`
  if `TextShow` is being derived and `One` is `TextShow1` is being derived.\n\n##
  3.1\n* Made the derived `TextShow` output of record datatypes match that of `Show`
  in GHC 8.0 (now that Trac #2530 has been reverted)\n* Fixed GHC 8.0 build (again)\n\n###
  3.0.1\n* Added the `TextShow.GHC.Stack` module, which provides `TextShow` instances
  for `CallStack` and `SrcLoc` on `base-4.8.1` and up.\n* Fix Haddock rendering error\n\n#
  3\n* GHC 8.0 support\n* The functions `showt`, `showtl`, `showtPrec`, `showtlPrec`,
  `showtList`, and `showtlList` are now part of the `TextShow` class. This was done
  to allow overriding their definitions with more efficient versions specifically
  for strict or lazy `Text`. (Currently, no `TextShow` instance in the `text-show`
  package does this, but this may change in the future.)\n* Added the `TextShow.Data.Functor.Compose`,
  `TextShow.Data.Functor.Product`, `TextShow.Data.Functor.Sum`, and `TextShow.Data.Semigroup`
  modules\n* Added `TextShow` instance for `TypeError` in `TextShow.Control.Exception`
  (GHC 8.0+)\n* Added `TextShow` instances for `TrName` and `Module` in `TextShow.Data.Typeable`
  (GHC 8.0+)\n* Added `Lift` instances for the datatypes in `TextShow` and `TextShow.Generic`\n*
  Renamed the class methods of `TextShow1` and `TextShow2` to be consistent with the
  naming conventions of `transformers-0.5`. They following were renamed:\n  * `showbPrecWith`
  → `liftShowbPrec`\n  * `showbPrecWith2` → `liftShowbPrec2`\n  * `makeShowbPrecWith`
  → `makeLiftShowbPrec`\n  * `makeShowbPrecWith2` → `makeLiftShowbPrec2`\n  * `genericShowbPrecWith`
  → `genericLiftShowbPrec`\n\n  In addition, many other monomorphic functions from
  the various `TextShow` submodules were also renamed to be consistent with the new
  `lift-` prefix.\n* `showsToShowb` and `showbToShows` now only convert functions
  that ignore precedence (i.e., of type `a -> ShowS` or `a -> Builder`). Their former
  role has been given to the new functions `showsPrecToShowbPrec` and `showbPrecToShowsPrec`\n*
  Added `FromStringShow1`, `FromTextShow1`, `FromStringShow2`, and `FromTextShow2`,
  which allow defining string `Show1`/`Show2` instances in terms of `TextShow1`/`TextShow2`
  instances, and vice versa. Be aware that many of these instances cannot be provided
  if you are using `tranformers-0.4`, since its version of `Data.Functor.Classes`
  uses a very differenltly designed `Show1` typeclass (and does not have `Show2` at
  all).\n* Rewrote `TextShow.TH`'s type inferencer. This avoids a nasty GHC 7.8 bug,
  and it allows `TextShow(1)(2)` to be derived for more datatypes that can only be
  expressed with `-XTypeInType` enabled.\n* Reworked internals of `TextShow.Generic`.
  Empty datatypes can now be have generic `TextShow` and `TextShow1` instances.\n\n#
  2.1.2\n* Fixed GHC 7.10.3 build\n* Extended `TextShow.Generic` to allow `genericShowbPrec`
  (and friends) to be used on `Generic` datatypes with `Char#`, `Double#`, `Float#`,
  `Int#`, and `Word#` argument types, just like string `Show` does\n* Added `Generic1`
  instances for `FromStringShow` and `FromTextShow`\n* Added `TextShow` instances
  for `UChar`, `UDouble`, `UFloat`, `UInt`, and `UWord` in `TextShow.GHC.Generics`\n\n#
  2.1.1\n* Restore support for `semigroups-0.16.1`\n\n# 2.1\n* Require `semigroups`
  >= 0.17\n* Added `showsToShowb` and `showbToShows` to `TextShow`\n* Added `TextShow1
  FromStringShow` instance\n* Added `showbGiveGCStats`, `showbDoCostCentres`, `showbDoHeapProfile`,
  and `showbDoTrace` to `TextShow.GHC.RTS.Flags` if using `base-4.8.2` or later\n*
  Exported `showbDownPrecWith` on earlier versions of GHC\n* Fixed mistakes in TH
  error output\n* Make `Proxy`, `Coercion`, and `(:~:)` instances poly-kinded\n* Changed
  implementation of `showbByteStringStrict`, `showbByteStrictLazy(Prec)`, `showbShortByteString`
  (in `TextShow.Data.ByteString`), `showbThreadIdPrec` (in `TextShow.Control.Concurrent`),
  `showbEvent`, and `showbFdKeyPrec` (in `TextShow.GHC.Event`) to avoid using `String`s
  as an intermediary\n\n# 2\n* Changed the top-level module name from `Text.Show.Text`
  to `TextShow`, since the former was extremely verbose without much benefit. As a
  result, this will break all existing code that depends on `text-show`.\n* Several
  typeclasses and functions were renamed so as to not to clash with the `Prelude`:\n
  \ * `Show` → `TextShow`\n  * `Show1` → `TextShow1`\n  * `Show2` → `TextShow2`\n
  \ * `show` → `showt`\n  * `showLazy` → `showtl`\n  * `showPrec` → `showtPrec`\n
  \ * `showPrecLazy` → `showtlPrec`\n  * `showList` → `showtList`\n  * `showListLazy`
  → `showtlList`\n  * `print` → `printT`\n  * `printLazy` → `printTL`\n  * `hPrint`
  → `hPrintT`\n  * `hPrintLazy` → `hPrintTL`\n  * `GShow` → `GTextShow`\n  * `GShow1`
  → `GTextShow1`\n  * `genericShow` → `genericShowt`\n  * `genericShowLazy` → `genericShowtl`\n
  \ * `genericShowPrec` → `genericShowtPrec`\n  * `genericShowPrecLazy` → `genericShowtlPrec`\n
  \ * `genericShowList` → `genericShowtList`\n  * `genericShowListLazy` → `genericShowtlList`\n
  \ * `genericPrint` → `genericPrintT`\n  * `genericPrintLazy` → `genericPrintTL`\n
  \ * `genericHPrint` → `genericHPrintT`\n  * `genericHPrintLazy` → `genericHPrintTL`\n
  \ * `deriveShow` → `deriveTextShow`\n  * `deriveShow1` → `deriveTextShow1`\n  *
  `deriveShow2` → `deriveTextShow2`\n  * `mkShow` → `makeShowt`\n  * `mkShowLazy`
  → `makeShowtl`\n  * `mkShowPrec` → `makeShowtPrec`\n  * `mkShowPrecLazy` → `makeShowtlPrec`\n
  \ * `mkShowList` → `makeShowtList`\n  * `mkShowListLazy` → `makeShowtlList`\n  *
  `mkShowb` → `makeShowb`\n  * `mkShowbPrec` → `makeShowbPrec`\n  * `mkShowbList`
  → `makeShowbList`\n  * `mkPrint` → `makePrintT`\n  * `mkPrintLazy` → `makePrintTL`\n
  \ * `mkHPrint` → `makeHPrintT`\n  * `mkHPrintLazy` → `makeHPrintTL`\n  * `mkShowbPrecWith`
  → `makeShowbPrecWith`\n  * `mkShowbPrec1` → `makeShowbPrec1`\n  * `mkShowbPrecWith2`
  → `makeShowbPrecWith2`\n  * `mkShowbPrec2` → `makeShowbPrec2`\n  * `trace` → `tracet`\n
  \ * `traceLazy` → `tracetl`\n  * `traceId` → `tracetId`\n  * `traceIdLazy` → `tracetlId`\n
  \ * `traceShow` → `traceTextShow`\n  * `traceShowId` → `traceTextShowId`\n  * `traceStack`
  → `tracetStack`\n  * `traceStackLazy` → `tracetlStack`\n  * `traceIO` → `tracetIO`\n
  \ * `traceIOLazy` → `tracetlIO`\n  * `traceM` → `tracetM`\n  * `traceMLazy` → `tracetlM`\n
  \ * `traceShowM` → `traceTextShowM`\n  * `traceEvent` → `tracetEvent`\n  * `traceEventLazy`
  → `tracetlEvent`\n  * `traceEventIO` → `travetEventIO`\n  * `traceEventIOLazy` →
  `tracetlEventIO`\n  * `traceMarker` → `tracetMarker`\n  * `traceMarkerLazy` → `tracetlMarker`\n
  \ * `traceMarkerIO` → `tracetMarkerIO`\n  * `traceMarkerIOLazy` → `tracetlMarkerIO`\n
  \ * `genericTraceShow` → `genericTraceTextShow`\n  * `genericTraceShowId` → `genericTraceTextShowId`\n
  \ * `genericTraceShowM` → `genericTraceTextShowM`\n  * `mkTraceShow` → `makeTraceTextShow`\n
  \ * `mkTraceShowId` → `makeTraceTextShowId`\n  * `mkTraceShowM` → `makeTraceTextShowM`\n*
  Added `TextShow Lifetime` instance in `TextShow.GHC.Event` (if using `base-4.8.1.0`
  or later)\n* Generalized `tracetM`, `tracetlM`, and `traceTextShowM` to use an `Applicative`
  constraint instead of `Monad`\n* Fixed a bug in which the `TextShow(1)` instances
  for `Proxy`, `(:~:)`, and `Coercion` didn't use `-XPolyKinds`\n* Fixed a bug in
  the Template Haskell deriver which would cause `deriveTextShow` to fail on type
  parameters with sufficiently high kinds\n\n# 1\n* The `Show1` class has been completely
  overhauled. `Show1` now uses the function `showbPrecWith`, which takes as an argument
  a function of type `Int -> a -> Builder` to show occurrences of the type parameter
  (instead of requiring the type parameter to be a `Show` instance). This matches
  the new implementation of `Show1` in the next version of `transformers`. A similar
  `Show2` class (with the function `showbPrecWith2`) was also added.\n* As a consequence,
  `Show1` instances should no longer be defined in terms of `showbPrec`; rather, `Show`
  instances should be defined in terms of `showbPrecWith` or `showbPrecWith2`, and
  `Show1` instances can be defined in terms of `showbPrecWith2`.\n* The `showbPrec1`
  function is no longer a class method of `Show1`, but is now a standalone function
  defined in terms of `showbPrecWith`. `showbPrec1` can be useful for defining `Show`
  instances. A similar `showbPrec2` function was also added.\n* The monomorphic functions
  in the many submodules of this package have been generalized (where possible) to
  use `Show1` and `Show2` instances. These functions have `-PrecWith` and `-PrecWith2`
  suffixes, respectively.\n* Because of the generality of the new `showPrecWith` function,
  `Show1` instances are now possible for `Ratio`, `Alt`, `Rec1`, `M1`, `(:+:)`, `(:*:)`,
  and `(:.:)`.\n* Removed many silly instances for `FromStringShow` and `FromTextShow`,
  since they'll never be used in the ways suggested by those instances to begin with.\n*
  The Template Haskell engine has been completely overhauled. Deriving `Show1` and
  `Show2` instances are now possible using the `deriveShow1` and `deriveShow2` functions.
  See the documentation in `Text.Show.Text.TH` for more details. In addition, the
  `mkShowbPrecWith`, `mkShowbPrec1`, `mkShowbPrecWith2`, and `mkShowbPrec2` functions
  were added.\n* Removed the ability to call `deriveShow` or `mkShowbPrec` (or other
  functions prefixed with `mk-`) using a data family name. This is considered a misfeature.
  If you want to derive `Show` for data family instances, use the corresponding `data
  instance` or `newtype instance` constructor name as an argument instead.\n * Removed
  `PragmaOptions`, `deriveShowPragmas`, `defaultInlineShowbPrec`, `defaultInlineShowb`,
  and `defaultInlineShowbList`, as it was impossible to make Template Haskell-generated
  pragmas work consistently across different versions of GHC. If you really want to
  use `INLINE` and `SPECIALIZE instance` pragmas with your Template Haskell-generated
  code, create manual instances with `mkShowbPrec` and family.\n* `Show1` instances
  can now be created generically using the `genericShowbPrecWith` function in `Text.Show.Text.Generics`.
  A `genericShowbPrec1` was also added.\n* Added `generic-deriving` as a dependency,
  which allows generics-related code to be exported on more versions of GHC\n* `ConType`
  (in `Text.Show.Text.Generics`) now has an `Inf String` constructor instead of `Inf
  Builder`. As a result, `ConType` now always an `Eq` and `Ord` instance, and a `Read
  ConType` instance was added.\n* `Typeable` instances for the promoted data constructors
  `'FromStringShow` and `'FromTextShow`\n* Added `showbFPFormat` to `Text.Show.Text.Data.Floating`\n*
  Revamped test suite\n\n### 0.8.1.1\n* Retroactive `CHANGELOG` update\n\n## 0.8.1\n*
  Fix test suite build with older versions of `QuickCheck`\n\n# 0.8\n* Exported `formatRealFloatB`
  and `formatRealFloatAltB` from `Text.Show.Text.Data.Floating`. Reexported `FPFormat`
  (from `text`) in the same module, and added a `Text` `Show` instance for it.\n*
  The `Show` instance for `Ratio a` now only requires a `Show a` constraint if using
  `base-4.4.0.0` or later (if using `base-4.3.0.0`, it requires a `(Show a, Integral
  a)` constraint)\n* Added `showbSingPrec` to `Text.Show.Text.GHC.TypeLits` (if using
  `base-4.6`)\n* Modules which were previously exported only if using a recent-enough
  version of GHC/`base` (e.g., `Text.Show.Text.GHC.Generics`) are now always exposed.
  If the functionality that the module provides is not available on a given version
  of GHC/`base`, the module will not expose anything.\n* Bump lower version bounds
  of `text` to 0.11.1 due to reexporting `FPFormat`\n* Added `showbUnicodeException`,
  `showbI16Prec`, `showbDecodingPrec`, and `showbSizePrec` functions (and corresponding
  `Show` instances) to `Text.Show.Text.Data.Text`\n* Made `GShow` in `Text.Show.Text.Generics`
  poly-kinded\n* The Template Haskell deriver (and `GShow`) now handles \"infix\"
  data constructors that are applied as prefix correctly (e.g., `data Amp a = (:&)
  a a`)\n* The Template Haskell deriver now handles showable unlifted types (`Char#`,
  `Double#`, `Float#`, `Int#`, and `Word#`) correctly on GHC 7.11 and later\n* The
  Template Haskell derive now does not parenthesize record types regardless of precedence
  on GHC 7.11 and later\n* Fixed build on GHC 7.2\n* Changed test-suite to use `hspec`,
  which allows for it to be built on GHC 7.0 and 7.2\n\n### 0.7.0.1\n* Disabled `print`-related
  tests, as they sporadically break referential transparency for unknown reasons\n*
  Fixed build on Windows\n\n# 0.7\n* Added `showbConstPrec` (and corresponding `Show`
  and `Show1` instances for `Const`) to `Text.Show.Text.Control.Applicative`\n* Added
  `showbUArrayPrec` (and corresponding `Show` instance for `UArray`s) and `showbIArrayPrec`
  to `Text.Data.Text.Data.Array`.\n* Renamed `showbListDefault` to `showbListWith`
  to match how `Text.Show` names it\n* Exposed `showbShortByteString` with all versions
  of `bytestring` by using the `bytestring-builder` package\n* Corrected the `Show`
  instance for `Lexeme` (in `Text.Show.Text.Text.Read.Lex`)\n* Fixed `TypeRep` output
  on GHC 7.10 and later\n* Removed `LitChar` and `LitString` from `Text.Show.Text.Data.Char`,
  as they were not as useful as I had imagined.\n* Removed the deprecated `replicateB`
  function\n* `Typable` instances for `Show`, `Show1`, and `GShow` (with GHC 7.8 and
  later)\n* `Typeable` instance for `ConType`\n* Only derive `Eq` and `Ord` for `ConType`
  if a recent-enough version of `text` is used\n* Changed the implementations of some
  functions in `Text.Show.Text.Debug.Trace` to use `ByteString`s instead of `String`s\n\n###
  0.6.0.1\n* Forgot to include some header files in `text-show.cabal`\n\n# 0.6\n*
  `deriveShow` can now construct instances for data families, using either the data
  family name or a data instance constructor as an argument. See the documentation
  in `Text.Show.Text.TH` for more details.\n* Fixed a bug in which infix backticked
  data constructors (e.g., ```data Add = Int `Plus` Int```) would not be shown correctly.\n*
  Fixed typo in `Text.Show.Text.GHC.RTS.Flags`\n* Removed the phantom-type detecting
  mechanism with `template-haskell-2.9.0.0` or higher. This method of finding phantom
  types is intrinsically flawed and is not usable on older GHCs.\n* Added generics
  support with the `Text.Show.Text.Generic` and `Text.Show.Text.Debug.Trace.Generic`
  modules\n* Deprecated `replicateB` in favor of `timesN` from the `semigroups` library\n*
  Added `FromTextShow` to `Text.Show.Text`, which admits a `String` `Show` instance
  for any data type with a `Text` `Show` instance (the counterpart of `FromStringShow`)\n*
  Added `Monoid` and `Semigroup` instances for `FromStringShow`, `Semigroup` instance
  for `LitString`, `IsChar` instance for `LitChar`, and `IsString` instance for `[LitChar]`\n*
  Changed the `String` `Show` instances of `FromStringShow`, `LitChar`, and `LitString`
  to more closely match the `Text` `Show` instances. As a result, the `Read` instances
  for these data types were also changed so that `read . show = read . show = id`.\n*
  Removed the `recent-text` flag. We'll allow users to build with older versions of
  `text`, but the latest version is recommended. Because of this, the `integer-simple`
  and `integer-gmp` flags are not needed.\n* Removed the `integer-gmp2` flag, as it
  supported a configuration that didn't actually compile on GHC\n* Removed the `transformers-four`
  flag, as it is not needed now that `transformers-compat` is a dependency\n\n# 0.5\n*
  Fix build for GHC 7.10, old GHC versions, and Windows\n* Removed the `Text.Show.Text.Data.Containers`
  and `Text.Show.Text.Data.Time` modules. The modules for the data types in `containers`
  and `time` were migrated to a separate library, `text-show-instances`.\n* Removed
  the `-ftext-format` flag, as `text-show` no longer uses `text-format`.\n* A [serious
  bug](https://github.com/bos/text/issues/99) in the `text` package that caused segfaults
  when building large `Integer`s was fixed in `text-1.2.0.2`. A flag (`-frecent-text`)
  was added that allows you to take advantage of this.\n* Fixed a bug that would cause
  the output of functions in the `Text.Show.Text.Data.Floating` module to not match
  `base` depending on what version of `base` is used.\n* The type signatures of lambda
  expressions generated by `mkShow` and related functions were loosened to allow them
  to be used to \"manually\" derive `Show` instances for data types with higher-kinded
  type parameters or type arguments with restricted `Show` instances. This should
  not be a breaking change; you can simply do more with `mkShow` et al. than you could
  before. For more information, see the documentation in `Text.Show.Text.TH`.\n* Loosened
  the `Show` instance of `Complex a` to only depend on `Show a` (previously required
  `RealFloat a`) if using base-4.4.0.0 or later\n* Moved `showbRatioPrec` to `Text.Show.Text.Data.Ratio`,
  `showbComplexPrec` to `Text.Show.Text.Data.Complex`, `showbProxy` to `Text.Show.Text.Data.Proxy`,
  and `showbFingerprint` to `Text.Show.Text.GHC.Fingerprint`\n* Added `deriveShowPragmas`
  to `Text.Show.Text.TH` to allow users to specify `INLINE` or `SPECIALIZE instance`
  pragmas with `Show` instances.\n* Added `FromStringShow`, `showbSpace`, `showbUnary`,
  `showbUnary1`, and `showbBinary1` to `Text.Show.Text`\n* Added `mkShowList`, `mkShowListLazy`,
  and `mkShowbList` to `Text.Data.Text.TH`\n* For base-4.8.0.0 and above, added the
  `Text.Show.Text.Data.Functor.Identity`, `Text.Show.Text.Data.Void`, `Text.Show.Text.GHC.RTS.Flags`,
  `Text.Show.Text.GHC.StaticPtr`, and `Text.Show.Text.Numeric.Natural` modules. Also
  added `Show` instances for `AllocationLimitExceeded` in `Text.Show.Text.Control.Exception`
  and `Alt` in `Text.Show.Text.Data.Monoid`. Also fixed the `Show` instance for `Fixed`
  values.\n* Added the `Text.Show.Text.Data.GHC.Conc.Windows` module (Windows-only)\n*
  Added the `Text.Show.Text.Data.OldTypeable` module for base-4.7\n* Added the `Text.Show.Text.GHC.TypeLits`
  module for base-4.6 and above\n* Added the `Text.Show.Text.Debug.Trace` and `Text.Show.Text.Debug.Trace.TH`
  modules as an analog to `Debug.Trace`\n* Added the `Show1` class and corresponding
  instances for unary type constructors.\n* Added `LitChar` and `LitString` to `Text.Show.Text.Data.Char`\n*
  Exported `asciiTabB` in `Text.Show.Text.Data.Char`\n* Renamed `showbTextStrict`
  to 'showbText' (to keep with naming conventions in the `text` library) and added
  `showbBuilder` to `Text.Show.Text.Data.Text`.\n\n## 0.4.1\n* Added the utility functions
  `toText` and `toString` for working with `Builder`s.\n\n# 0.4\n* Due to [GHC bug
  #5289](http://ghc.haskell.org/trac/ghc/ticket/5289), projects that depend on the
  `double-conversion` library (such as `text-format`, a dependency of `text-show`)
  may break due to GHC incorrectly linking against libstdc++. Therefore, `text-show`
  was changed so that it does not depend on `text-format` by default. This behavior
  can be changed by using the `-ftext-format` flag when using `cabal`.\n* Added `showbZonedTime`
  to `Text.Show.Text.Data.Time` (and corresponding `Show` instance for `ZonedTime`)\n*
  Exposed `showbMaskingState` (is was already there, I just forgot to export it)\n*
  If using GHC 7.6 or earlier, depend on tagged so that `Data.Proxy` (and thus `showbProxy`
  from `Text.Show.Text.Data.Typeable`) can be used\n* Refactored code to use Template
  Haskell derivations when possible\n\n## 0.3.1.0\n* Added `showList` and `showListLazy`\n*
  Don't use `showbListDefault` to show `containers` data types\n* Added the ability
  to splice `show` functions for arbitrary data types (even if they aren't `Show`
  instances). These functions are `mkShow`, `mkShowLazy`, `mkShowPrec`, `mkShowPrecLazy`,
  `mkShowb`, `mkShowbPrec`, `mkPrint`, `mkPrintLazy`, `mkHPrint`, and `mkHPrintLazy`.\n\n#
  0.3.0.0\n* Lots of bugfixes\n* `Show` instances for many other data types in `base`,
  `containers` and `time`\n* Exposed internal modules with monomorphic functions\n*
  `Text.Show.Text` now exports `Data.Text.Lazy.Builder` for convenience\n* Add `showLazy`,
  `showPrec`, `showPrecLazy`, `printLazy`, `hPrint`, `hPrintLazy`, `lengthB`, and
  `replicateB`\n* Template Haskell derivation of `Show` instances (doesn't support
  data families yet)\n\n# 0.2.0.0\n* Added `Show` instances for strict and lazy `Text`\n\n#
  0.1.0.0\n* Initial commit\n"
basic-deps:
  void: ! '>=0.5 && <1'
  bytestring: ! '>=0.9 && <0.11'
  base-compat-batteries: ! '>=0.10 && <0.11'
  base: ! '>=4.9 && <4.13'
  text: ! '>=0.11.1 && <1.3'
  generic-deriving: ! '>=1.11 && <2'
  semigroups: ! '>=0.17 && <1'
  array: ! '>=0.3 && <0.6'
  integer-gmp: -any
  th-abstraction: ! '>=0.2.2 && <0.3'
  tagged: ! '>=0.4.4 && <1'
  containers: ! '>=0.1 && <0.7'
  bifunctors: ! '>=5.1 && <6'
  ghc-prim: -any
  contravariant: ! '>=0.5 && <2'
  nats: ! '>=0.1 && <2'
  transformers: (>=0.2.1 && <0.4) || (>=0.5 && <0.6)
  bytestring-builder: -any
  ghc-boot-th: ! '>=8.0 && <8.7'
  th-lift: ! '>=0.7.6 && <1'
  template-haskell: ! '>=2.11 && <2.15'
  transformers-compat: ! '>=0.5 && <1'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.4'
- '0.4.1'
- '0.5'
- '0.6'
- '0.6.0.1'
- '0.7'
- '0.7.0.1'
- '0.8'
- '0.8.1'
- '0.8.1.1'
- '1'
- '2'
- '2.1'
- '2.1.1'
- '2.1.2'
- '3'
- '3.0.1'
- '3.1'
- '3.2'
- '3.2.1'
- '3.2.2'
- '3.3'
- '3.4'
- '3.4.1'
- '3.4.1.1'
- '3.6'
- '3.6.2'
- '3.7'
- '3.7.1'
- '3.7.2'
- '3.7.3'
- '3.7.4'
- '3.7.5'
author: Ryan Scott
latest: '3.7.5'
description-type: markdown
description: ! "# `text-show`\n[![Hackage](https://img.shields.io/hackage/v/text-show.svg)][Hackage:
  text-show]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/text-show.svg)](http://packdeps.haskellers.com/reverse/text-show)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Linux build](https://img.shields.io/travis/RyanGlScott/text-show.svg)](https://travis-ci.org/RyanGlScott/text-show)\n[![Windows
  build](https://ci.appveyor.com/api/projects/status/fy1q86lbfttmnthy?svg=true)](https://ci.appveyor.com/project/RyanGlScott/text-show)\n\n[Hackage:
  text-show]:\n  http://hackage.haskell.org/package/text-show\n  \"text-show package
  on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell Programming
  Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\n`text-show` offers a replacement for the
  `Show` typeclass intended for use with `Text` instead of `String`s. This package
  was created in the spirit of [`bytestring-show`](http://hackage.haskell.org/package/bytestring-show).\n\nAt
  the moment, `text-show` provides instances for most data types in the [`array`](http://hackage.haskell.org/package/array),
  [`base`](http://hackage.haskell.org/package/base), [`bytestring`](http://hackage.haskell.org/package/bytestring),
  and [`text`](http://hackage.haskell.org/package/text) packages. Therefore, much
  of the source code for `text-show` consists of borrowed code from those packages
  in order to ensure that the behaviors of `Show` and `TextShow` coincide.\n\nFor
  most uses, simply importing `TextShow` will suffice:\n\n```haskell\nmodule Main
  where\n\nimport TextShow\n\nmain :: IO ()\nmain = printT (Just \"Hello, World!\")\n```\n\nSee
  also the [naming conventions](https://github.com/RyanGlScott/text-show/wiki/Naming-conventions)
  page.\n\nSupport for automatically deriving `TextShow` instances can be found in
  the `TextShow.TH` and `TextShow.Generic` modules.\n"
license-name: BSD3
