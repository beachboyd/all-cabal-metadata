homepage: ''
changelog-type: markdown
hash: a3d4d28c8a5ed400f7629e6e559866c078be62b912350afcdb24a40d048b3e25
test-bench-deps: {}
maintainer: portnov84@rambler.ru
synopsis: Full-weight string formatting library, analog of Python's string.format
changelog: ! '# Revision history for text-format-heavy


  ## 0.1.0.0  -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.8 && <5'
  time: ! '>=1.5'
  text: ! '>=1.2 && <1.3'
  parsec: ! '>=3.1 && <3.2'
  data-default: ! '>=0.7'
  containers: ! '>=0.5'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
author: Ilya Portnov
latest: '0.1.2.0'
description-type: markdown
description: ! "text-format-heavy README\n========================\n\nThis is Haskell
  string formatting library, which prefers functionality and\nextendability over light
  weight and (probably, in some cases) performance.\nThis library is more or less
  analog of Python's string.format function, and\nhas similar syntax. It also exposes
  all required interfaces to extend and\ncustomize it.\n\nMost notable features are:\n\n
  * Automatically numbered variable placeholders (`{}`);\n * Positional variable placeholders
  (`{1}`);\n * Named variable placeholders (`{name}`);\n * Placeholders can be used
  in any order; one variable can be used several\n   times or not used at all.\n *
  Specific format can be used for each variable substitution (`{0:+8.4}`).\n\nFormatting
  strings are present by `Format` type. Values of this type can be\nparsed from lazy
  Text, or can be entered as string literals, since `Format`\nimplements `IsString`.\n\nThe
  `format` function takes a `Format` specification and a container with\nvariables.
  Container types are generalized by `VarContainer` type class.\nStandard container
  implementations include:\n\n * `Single` type for case when you need to pass only
  one variable.\n * Tuples and lists. These contain numbered variables, i.e. `{0}`,
  `{1}`, etc.\n * `[(Text, a)]` and `Map Text a`. These contain named variables, i.e.\n
  \  `{name}`.\n\nOne can implement custom variable containers, for example some record
  types.\n\nTypes of variables that can be used for subsitiution are generalized by\n`Formatable`
  type class. Each implementation defines default value formatting\nrules, and a syntax
  of variable format specification. For example, for\nintegers, floats and strings,
  python-like syntax is used. Standard set of\nvariable types includes:\n\n * Integers
  (`Int` and `Integer`, others can be easily added);\n * Floats (`Float` and `Double`);\n
  * Strings (`String`, lazy and strict `Text`);\n * Booleans;\n * Time/date values
  from Data.Time.\n * Any instance of `Show` type class can be used by packing it
  into `Shown`\n   constructor.\n\nOne can implement custom variable types.\n\nFor
  examples, please refer to [GitHub\nwiki](https://github.com/portnov/text-format-heavy/wiki)
  and `examples/`\ndirectory in this repo. There are also some examples in haddock
  documentation.\n\nLicense: BSD3.\n\n"
license-name: BSD3
