homepage: https://github.com/HaskellZhangSong/TemplateHaskellUtils
changelog-type: markdown
hash: 4205964e157cade391716b1ffeac0ec7eb989f05f6328c621551debd6cfccf35
test-bench-deps: {}
maintainer: Haskell.Zhang.Song@hotmail.com
synopsis: Some utilities for template Haskell.
changelog: ! '@applyKinds@ is renamed to @applyKind@'
basic-deps:
  base: ==4.*
  GenericPretty: ! '>=1.2.1'
  ghc-prim: ! '>=0.3.1.0'
  template-haskell: ! '>=2.9'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
author: songzh
latest: 0.1.1.0
description-type: markdown
description: ! "# TemplateHaskellUtils\nuseful functions for you to write template
  Haskell code\n\nsome examples\n** Prettyprint\n\n    > runQ [| (1+1) * 5|] >>= pp
  -- or use\n    > printiQ  [| (1+1) * 5|]\n    InfixE (Just InfixE (Just LitE (IntegerL
  1))\n                      (VarE (Name (OccName \"+\")\n                                   (NameG'
  VarName\n                                           (PkgName \"base\")\n                                           (ModName
  \"GHC.Num\"))))\n                       (Just LitE (IntegerL 1)))\n          (VarE
  (Name (OccName \"*\")\n                      (NameG' VarName\n                              (PkgName
  \"base\")\n                              (ModName \"GHC.Num\"))))\n          (Just
  LitE (IntegerL 5))\n\n** Other helper functions\n\n    -- | Apply a list of expression
  [(+), 1, 2] to (+) 1 2\n    appExp :: [ExpQ] -> ExpQ\n\n    -- | Apply a type constructor,
  convert [a, b, c] to a b c\n    appConT :: [TypeQ] -> TypeQ\n\n    -- | convert
  [a, b, c] to a -> b -> c\n    curryType :: [TypeQ] -> TypeQ\n\n"
license-name: MIT
