homepage: https://github.com/leopiney/tensor-safe#readme
changelog-type: ''
hash: 999df529d139d1ee008761d7691c858800445b318d18610c0f664a7e57492ef7
test-bench-deps: {}
maintainer: leopiney@gmail.com
synopsis: Create valid deep neural network architectures
changelog: ''
basic-deps:
  extra: ==1.6.*
  base: ! '>=4.7 && <5'
  vector-sized: ! '>1.2 && <1.3'
  text: ! '>=1.2.3.1 && <1.3'
  hint: ! '>=0.9.0 && <1.0'
  casing: ! '>=0.1.4.0 && <0.1.5'
  containers: ! '>=0.6.0.1 && <0.7'
  singletons: ! '>=2.5.1 && <2.6'
  ghc-typelits-extra: ==0.3.*
  formatting: ! '>=6.3.6 && <6.4'
  tensor-safe: -any
  cmdargs: ! '>=0.10.20 && <0.11'
  vector: ==0.12.*
all-versions:
- 0.1.0.0
author: Leonardo Pineyro
latest: 0.1.0.0
description-type: markdown
description: "# Tensor Safe\n\n`tensor-safe` is a dependently typed framework to define
  deep learning models which structure is verified on\ncompilation time. If the models
  are valid, these can be compiled to Keras framework in Python or JavaScript.\n\n##
  Building instructions and development tools\n\n1. Install `ghc-mod`, `hpack` and
  `stylish-haskell` with `stack install`\n\n   ```\n   cd ~\n   stack install ghc-mod
  hpack stylish-haskell\n   ```\n\n2. Run `stack build` in project folder\n3. Install
  `Intero`\n\n   Run `stack build intero` in the project folder\n\n   Ref: https://gitlab.com/vannnns/haskero/blob/master/client/doc/installation.md\n\n##
  Generate `.cabal` file\n\nRun `hpack` in the root of the project and the file `tensor-safe.cabal`
  will be generated\n\n## Model definition\n\nModels can be defined as a type using
  the `MkINetwork` type function. The `MkINetwork` defines a\nvalid instance of a
  Network model given a list of `Layers` and a spected input and iutput `Shapes`.\n\nHere's
  an example of how to define a simple model for the `MNIST` dataset, using `Dense`
  layers:\n\n```haskell\ntype MNIST = MkINetwork\n    '[\n        Flatten,\n        Dense
  784 42,\n        Relu,\n        Dense 42 10,\n        Sigmoid\n    ]\n    ('D3 28
  28 1)    -- Input\n    ('D1 10)         -- Output\n```\n\nAfter that, variable with
  the model type can be verified with the function `mkINetwork` like this:\n\n```haskell\nmnist
  :: MNIST\nmnist = mkINetwork\n```\n\n## Nesting networks definitions\n\nYou can
  nest networks definitions easily by adding the networks as layers. For example,
  in the case of the `MNIST` model defined above, we can abstract the use of Dense
  and a activation function like this:\n\n```haskell\ntype DenseRelu i o =\n    MkINetwork
  '[ Dense i o, Relu ] ('D1 i) ('D1 o)\n\ntype DenseSigmoid i o =\n    MkINetwork
  '[ Dense i o, Sigmoid ] ('D1 i) ('D1 o)\n\ntype MNIST = MkINetwork\n    '[\n        Flatten,\n
  \       DenseRelu 784 42,\n        DenseSigmoid 42 10\n    ]\n    ('D3 28 28 1)
  \   -- Input\n    ('D1 10)         -- Output\n```\n\n## Command line interface\n\n>
  This interface will change in the near future\n\nYou can install `tensor-safe` command
  line tool by running `stack build`. Then you can use it by using `stack exec tensor-safe
  -- check --path ./path-to-model.hs` or `stack exec tensor-safe -- compile --path
  ./path-to-model.hs --module-name SomeModule`.\n\n## Tools for JavaScript environment\n\nAdd
  as development dependency the packages `babel-plugin-tensor-safe` and `eslint-plugin-tensor-safe`.
  These can be found in the `extra/javascript` folder in this project.\n\nYou can
  add them directly from this project like this:\n\n```bash\nyarn add --dev file/:<path-to-tensor-safe>/extra/javascript/babel-plugin-tensor-safe\n\nyarn
  add --dev file/:<path-to-tensor-safe>/extra/javascript/eslint-plugin-tensor-safe\n```\n\nThen
  add to the `.eslintrc.js` file in your JavaScript project the plugin `tensor-safe`
  and the rule `tensor-safe-model-invalid` like this:\n\n```js\nmodule.exports = {\n
  \ plugins: [\n     ...\n     \"tensor-safe\"\n   ],\n  ...\n  rules: {\n    ...\n
  \   \"tensor-safe/invalid-model\": 1\n    ...\n  }\n};\n```\n\nAnd for the Babel
  plugin add `\"@babel/plugin-tensor-safe\"` to the plugins list in the `.babelrc`
  file inside your JavaScript project.\n\nThen, you can write your deep learning model
  inside your JS files as in the following example:\n\n```js\nfunction createConvModel()
  {\n  safeModel`\n    '[\n        Conv2D 1 16 3 3 1 1,\n        Relu,\n        MaxPooling
  2 2 2 2,\n        Conv2D 16 32 3 3 1 1,\n        Relu,\n        MaxPooling 2 2 2
  2,\n        Conv2D 32 32 3 3 1 1,\n        Relu,\n        Flatten,\n        Dense
  288 64,\n        Sigmoid,\n        Dense 64 10,\n        Sigmoid\n    ]\n    ('D3
  28 28 1)  -- Input\n    ('D1 10)       -- Output\n`;\n\n  return model;\n}\n```\n\n##
  Related projects\n\nThis project was highly influenciated by [Grenade](https://github.com/HuwCampbell/grenade)
  \U0001F4A3.\nGrenade is a really cool library to define deep neural networks which
  are validated using dependent types.\nWhat differences TensorSafe from Grenade the
  most is that TensorSafe doesn't run nor train the models, instead\nit compiles the
  model to external languages that are capable of performing all computations â€“ like
  Keras\nfor Python or JavaScript. Also, TensorSafe doesn't need to specifically declare
  all Shapes transformations\nfor all the model layers, instead, it just needs the
  `input` and `output` Shapes to validate the model.\n\nAnother worth looking library
  is [TensorFlow for Haskell](https://github.com/tensorflow/haskell).\nThis library
  has all bindings for TensorFlow in C. The issue with this is that it doesn't perform\na
  lot of type checkings at compilation time. However, there's an open branch that
  uses dependent\ntypes to solve many of these issues: https://github.com/helq/tensorflow-haskell-deptyped,
  but the\nsolution still seems rather complicated for real use.\n"
license-name: BSD-3-Clause
