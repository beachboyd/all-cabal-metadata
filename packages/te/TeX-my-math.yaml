homepage: http://github.com/leftaroundabout/Symbolic-math-HaTeX
changelog-type: ''
hash: 9867a2ef287ee272cc25646572bf9ebff554587a955ee5d99eae4b41f7b5a597
test-bench-deps:
  dumb-cas: -any
  base: ! '>=4 && <5'
  text: -any
  TeX-my-math: -any
  HaTeX: -any
  filepath: -any
  process: -any
  haskell-src-meta: -any
  template-haskell: -any
  directory: -any
maintainer: (@) jsagemue $ uni-koeln.de
synopsis: ! 'Render general Haskell math to LaTeX. Or: math typesetting with high
  signal-to-noise–ratio.'
changelog: ''
basic-deps:
  void: -any
  dumb-cas: ! '>=0.1.1.1 && <0.2'
  base: ! '>=4.8 && <4.11'
  unordered-containers: -any
  text: -any
  vector-space: -any
  HaTeX: ! '>3.4'
  decimal-literals: -any
  hashable: -any
  haskell-src-meta: -any
  template-haskell: -any
all-versions:
- '0.201.0.0'
- '0.201.1.0'
- '0.201.1.1'
author: Justus Sagemüller
latest: '0.201.1.1'
description-type: haddock
description: ! 'For tl;dr: look at <https://github.com/leftaroundabout/Symbolic-math-HaTeX/blob/master/EXAMPLES.md>.


  This is an attempt to get convenient math syntax in HaTeX (i.e., in data structures

  compatible \/ convertable to those from <http://hackage.haskell.org/package/HaTeX>).


  The idea is to combine these features:


  * Full access to the math-typesetting power of LaTeX. It should be possible to express

  any formula that might be found in a typical mathematics or physics journal article.

  This should also include expression which are not quite well-defined from a programming

  point of view, but are clear to the intended audience.


  * Idiomatic Haskell syntax. Who wants to bother with unreadable expressions involving

  either hundreds of double-backslashes or extra syntax overhead in wrapping them

  explicitly into HaTeX?


  Ideally, one would write expressions as if only meaning Haskell to /calculate/ them,

  but get the result back as a full pretty-printing LaTeX math string. /And the actual

  calculated result as well/, if possible!


  To this end, we use a minimal symbolic-manipulation EDSL, namely

  <http://hackage.haskell.org/package/dumb-cas dumb-cas>, set up in a way so the

  leaves of the syntax tree, i.e. the individual symbols, are represented by LaTeX

  expressions in memory and by single-letter variables in the Haskell code.

  These can then be combined with operators corresponding to LaTeX''s maths operators,

  to obtain a very compact and almost WYSIWYG-like code appearance, while retaining

  the ability to apply any LaTeX-specific tweaks whenever necessary. At the same

  time, because the AST is fully precedence-aware, it is safely possible to transform

  the expressions via e.g. Template Haskell, to actually compute concrete numerical

  results, or apply exact symbolic-manipulation techniques.'
license-name: GPL-3
