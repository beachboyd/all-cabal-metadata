homepage: https://github.com/jcristovao/IsNull
changelog-type: ''
hash: 2c0d4d4bd11dbfcd823a487cf1817a46adc2a7acdd03dc623060a46aa6c05f5c
test-bench-deps:
  bytestring: ! '>=0.10.0.2'
  base: ! '>=4.5 && <4.8'
  unordered-containers: ! '>=0.2.3'
  hspec: ! '>=1.7.2'
  text: ! '>=0.11.3.1 && <1.3'
  HUnit: ! '>=1.2.5.2'
  containers: ! '>=0.5 && <0.6'
  quickcheck-instances: ! '>=0.3.5'
  QuickCheck: ! '>=2.6'
  system-filepath: ! '>=0.4.6'
  vector: ! '>=0.10.0.1'
maintainer: jmacristovao@gmail.com
synopsis: A typeclass to determine if a given value is null.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.0 && <1.0'
  base: ! '>=4.5 && <4.8'
  text: ! '>=0.11.3 && <1.3'
  containers: ! '>=0.5 && <0.6'
all-versions:
- 0.3.0.0
- 0.4.0.0
author: ! 'João Cristóvão <jmacristovao@gmail.com>

  , Ivan Miljenovic <Ivan.Miljenovic@gmail.com>'
latest: 0.4.0.0
description-type: markdown
description: ! "IsNull\n======\n\nA typeclass to determine if a given container is
  null.\n\nStrongly inspired by \n[mono-traversable](https://hackage.haskell.org/package/mono-traversable),
  \nbut with a simpler goal: supporting IsNull and nested IsNull operations.\n\nSupported
  functions:\n\n```\nisNull :: a -> Bool\n\nnotNull :: a -> Bool\n\n-- | Nested isNull\nisNullN
  :: (Foldable f) => f a -> Bool\n\n-- | Monadic isNull\nisNullM :: Monad m => m a
  -> m Bool\n\n-- | Monadic Nested isNull\nisNullNM :: (Monad m, Foldable f) => m
  (f a) -> m Bool\n\n\n-- | Alternative <|> operator does not always operate as choice,\n--
  at least not in an intuitive way (for example with lists).\n-- This one does:\n<\\>
  :: a -> a -> a\n```\n\nThe N stands for (non-recursive) nested, such that:\n\n```\n\nisNullN
  (Just \"abc\") == False\nisNullN (Just \"\"   ) == True\nisNullN (Nothing   ) ==
  True\n\n```\n\nWhile the ```isNull``` function is equivalent to ```(==) mempty```\nfor
  most of the instances, not all ```Foldable```s are monoids,\nand not all monoids
  ```mempty``` means null:\n\n* ```Either``` is an example of a ```Foldable``` which
  is not a\n  ```Monoid```, but where it makes sense to consider a ```Left``` as\n
  \ an 'Null' value. While this is not strictly true, the ```Left```\n  option does
  carries a value, we take the more liberal approach:\n  Empty ~ Null ~ Invalid Value.\n
  \ If you need proper type reasoning, you should not be using this\n  package, just
  regular pattern matching instead.\n\n* ```Product``` ```Monoid``` instance is ```1```.
  Hardly qualifies as an\n  ```Empty``` or ```Null``` value. For this reason no default
  implementation\n  is provided for the ```Monoid``` class. It's up to you to use\n
  \ ```(==) mempty``` instead.\n\n\nBugs, suggestions and comments are most welcomed!\n"
license-name: BSD-3-Clause
