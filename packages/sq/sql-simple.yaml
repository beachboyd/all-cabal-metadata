homepage: https://github.com/philopon/sql-simple
changelog-type: ''
hash: da3915e868a6b6d7e9f7dcc40045ff2eb3fce8938d26029a6acad9acc4038619
test-bench-deps: {}
maintainer: HirotomoMoriwaki<philopon.dependence@gmail.com>
synopsis: common middle-level sql client.
changelog: ''
basic-deps:
  exceptions: ! '>=0.6 && <0.7'
  base: ! '>=4.6 && <4.8'
  text: ! '>=1.1 && <1.2'
  monad-control: ! '>=0.3 && <0.4'
  containers: ! '>=0.5 && <0.6'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.5'
all-versions:
- 0.1.0.0
- 0.2.0
- 0.3.0
- 0.3.1
author: HirotomoMoriwaki<philopon.dependence@gmail.com>
latest: 0.3.1
description-type: markdown
description: ! "sql-simple [![Build Status](https://travis-ci.org/philopon/sql-simple.svg?branch=master)](https://travis-ci.org/philopon/sql-simple)\n===\ncommon
  middle-level sql client.\n\ntutorial\n===\n\n```.hs\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE ConstraintKinds #-}\n\nimport Control.Applicative\nimport
  Database.Sql.Simple\nimport Database.Sql.Simple.SQLite\nimport Database.Sql.Simple.PostgreSQL\nimport
  Database.Sql.Simple.Pool\n\n-- you must specify 1st type variable of Sql Monad.\n--
  by explicit type signature,\ntestQuery :: (ToRow conn (Only Int), FromRow conn (Only
  Int), Backend conn) \n          => conn -> Sql '[SQLite, PostgreSQL] [Int]\ntestQuery
  c = do\n    execute_ c \"CREATE TABLE test (id int)\"\n    execute  c \"INSERT INTO
  test VALUES (?)\" (Only (1 :: Int))\n    map fromOnly <$> query_ c \"SELECT * FROM
  test\"\n\n-- or sql function(testQuery' equivalent to testQuery).\ntestQuery' c
  = sql (sqlite +:+ postgreSQL) $ do\n    execute_ c \"CREATE TABLE test (id int)\"\n
  \   execute  c \"INSERT INTO test VALUES (?)\" (Only (1 :: Int))\n    i <- map fromOnly
  <$> query_ c \"SELECT * FROM test\"\n    return (i :: [Int])\n\n-- you can specify
  backend specific Query.\nspecificQuery :: Backend conn => conn -> Sql '[SQLite,
  PostgreSQL] ()\nspecificQuery c =\n    execute_ c (specify sqlite \"[sqlite query]\"
  \"[common query]\")\n\nmain :: IO ()\nmain = do\n    -- l <- withConnection (\"test.sqlite3\"
  :: ConnectInfo SQLite) testQuery\n    l <- withConnection (ConnectionPool def \"test.sqlite3\"
  :: ConnectInfo (Pool SQLite)) testQuery\n    -- l <- withConnection (def :: ConnectInfo
  PostgreSQL) testQuery\n    print l\n```\n"
license-name: MIT
