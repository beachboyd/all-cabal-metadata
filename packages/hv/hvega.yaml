homepage: https://github.com/DougBurke/hvega
changelog-type: markdown
hash: 33f4ab87234ff2acfe4b9f4131734812b868a4ba5b311e9b7b241387d22fc95d
test-bench-deps:
  bytestring: ==0.10.*
  base: ! '>=4 && <5'
  tasty-golden: ! '>=2.2 && <2.4'
  aeson-pretty: ==0.8.*
  text: ==1.2.*
  filepath: -any
  containers: ! '>=0.5.8 && <0.7'
  hvega: -any
  tasty: -any
  aeson: ! '>=0.11 && <1.5'
maintainer: dburke.gw@gmail.com
synopsis: Create Vega-Lite visualizations (version 3) in Haskell.
changelog: "For the latest version of this document, please see\n[https://github.com/DougBurke/hvega/blob/master/hvega/CHANGELOG.md](https://github.com/DougBurke/hvega/blob/master/hvega/CHANGELOG.md).\n\n##
  0.4.0.0\n\nThanks to (in no order): Matthew Pickering (mpickering),\nAdam Conner-Sax
  (adamConnerSax), and Jo Wood (jwoLondon).\n\nThis is a large release, in that it
  greatly-improves the functionality\nof hvega (more-closely aligning it with version
  3.4.0 of the Vega-Lite\nspecification), but does provide a number of **breaking
  changes** (a\nnumber of functions and constructors have either been removed or had\nsome
  combination of being renamed, argument types have changed, or the\nnumber of arguments
  has been changed). The documentation has also\nseen a number of additions and improvements.\n\nA
  large number of functions, data types, and constructors for data\ntypes have been
  added, based on version 1.12.0 (and the development\nversion of the next release)
  of the elm-vegalite module. Thanks to Jo\nWood for doing all the work! The Haddock
  documentation indicates new\nsymbols with the `since 0.4.0.0` label.\n\n### Bug
  fixes\n\nCorrected the serialization of the `datasets` function, reported by\nMatthew
  Pickering as [issue\n29](https://github.com/DougBurke/hvega/issues/17).\n\nImproved
  the output to better-match the Vega Lite 3.4.0 specification.\nNote that hvega does
  not guarantee that it always creates valid output,\nin part because this would complicate
  the API, but also because the\nVega-Lite specification is changing (e.g. I reported
  several issues with\nversion 3.3.0 of the specification during development of this
  release,\nsome of which have been addressed in the 3.4.0 version).\n\n### New functions,
  symbols, and types\n\nThe error-related types and functions discussed below are
  based on\nchanges provided by Adam Conner-Sax.\n\n`toVegaLiteSchema` has been added
  to allow you to specify a different\nVega-Lite schema. `toVegaLite` uses version
  3 but version 4 is being\nworked on as I type this. The `vlSchema` function has
  been added,\nalong with `vlSchema4`, `vlSchema3`, and `vlSchema2` values. The\n`toHtmlWith`
  and `toHtmlFileWith` functions have been added to support\nmore control over the
  embedding of the Vega-Lite visualizations, and\nthe versions of the required Javascript
  libraries used by the\n`toHtmlXXX` routines has been updated.\n\nThe `VLProperty`
  type now exports its constructors, to support users\nwho may need to tweak or augment
  the JSON Vega-Lite specification\ncreated by `hvega` (see [issue\n17](https://github.com/DougBurke/hvega/issues/17)).
  It has also gained\nseveral new constructors and associated functions, which are
  given in\nbrackets after the constructor: `VLAlign` (`align`); `VLBounds`\n(`bounds`);
  `VLCenter` (`center`, `centerRC`); `VLColumns`\n(`columns`); `VLConcat` (`vlConcat`);
  `VLSpacing` (`alignRC`,\n`spacing`, `spacingRC`); `VLUserMetadata` (`usermetadata`);
  and\n`VLViewBackground` (`viewBackground`). It is expected that you will be\nusing
  the functions rather the constructors!\n\nThe `ZIndex` type has been added: this
  provides constructors for the\ncommon options - `ZFront` and `ZBack` - and a fall-through
  (`ZValue`)\nas a protection against future changes to the Vega-Lite specification.\n\nFour
  new type aliases have been added: `Angle`, `Color`, `Opacity`,\nand `ZIndex`. These
  do not provide any new functionality but do\ndocument intent.\n\nThe `noData` function
  has been added to let compositions define the\nsource of the data (whether it is
  from the parent or not), and data\nsources can be named with `dataName`. Data can
  be created with\n`dataSequence`, `dataSequenceAs`, and `sphere`. Graticules can
  be\ncreated with `graticule`.  The `NullValue` type has been added to\n`DataValue`
  to support data sources that are missing elements, but for\nmore-complex cases it
  is suggested that you create your data as an\nAeson Value and then use `dataFromJson`.
  Support for data imputation\n(creating new values based on existing data) has been
  added, as\ndiscussed below.\n\nThe alignment, size, and composition of plots can
  be defined and\nchanged with `align`, `alignRC`, `bounds`, `center`, `centerRC`,\n`columns`,
  `spacing`, and `spacingRC`.\n\nPlots can be combined and arranged with: `facet`,
  `facetFlow`,\n`repeat`, `repeatFlow`, and `vlConcat`\n\nNew functions for use in
  a `transform`: `flatten`, `flattenAs`,\n`fold`, `foldAs`, `impute`, and `stack`.\n\nNew
  functions for use with `encoding`: `fillOpacity`, `strokeOpacity`,\n`strokeWidth`,\n\nThe
  ability to arrange specifications has added the \"flow\" option\n(aka \"repeat\").
  This is seen in the addition of the `Flow` constructor\nto the `Arrangement` type
  - which is used with `ByRepeatOp`,\n`HRepeat`, `MRepeat`, `ORepeat`, `PRepeat`,
  and `TRepeat`.\n\nThe `Mark` type has gained `Boxplot`, `ErrorBar`, `ErrorBand`,
  and\n`Trail` constructors. The `MarkProperty` type has gained `MBorders`,\n`MBox`,
  `MExtent`, `MHeight`, `MHRef`, `MLine`, `MMedian`, `MOrder`,\n`MOutliers`, `MNoOutliers`,
  `MPoint`, `MRule`, `MStrokeCap`, `MStrokeJoin`,\n`MStrokeMiterLimit`, `MTicks`,
  `MTooltip`, `MWidth`, `MX`, `MX2`,\n`MXOffset`, `MX2Offset`, `MY`, `MY2`, `MYOffset`,
  and `MY2Offset`\nconstructors.\n\nThe `Position` type has added `XError`, `XError2`,
  `YError`, and\n`YError2` constructors.\n\nThe `MarkErrorExtent` type was added.\n\nThe
  `BooleanOp` type has gained the `FilterOp` and `FilterOpTrans`\nconstructors which
  lets you use `Filter` expressions as part of a\nboolean operation. The `Filter`
  type has also gained expresiveness,\nwith the `FLessThan`, `FLessThanEq`, `FGreaterThan`,
  `FGreaterThanEq`,\nand `FValid`.\n\nThe `Format` type has gained the `DSV` constructor,
  which allow you\nto specify the separator character for column data.\n\nThe MarkChannel
  type has been expanded to include: `MBinned`, `MSort`,\n`MTitle`, and `MNoTitle`.
  The PositionChannel type has added\n`PHeight`, `PWidth`, `PNumber`, `PBinned`, `PImpute`,
  `PTitle`, and\n`PNoTitle` constructors.\n\nThe LineMarker and PointMarker types
  have been added for use with\n`MLine` and `MPoint` respectively (both from `MarkProperty`).\n\nThe
  ability to define the binning property with \n`binAs`, `DBin`, `FBin`, `HBin`, `MBin`,
  `OBin`, `PBin`, and `TBin` has\nbeen expanded by adding the `AlreadyBinned` and
  `BinAnchor`\nconstructors to `BinProperty`, as well as changing the `Divide`\nconstructor
  (as described below).\n\nThe `StrokeCap` and `StrokeJoin` types has been added.
  These are used\nwith `MStrokeCap`, `VBStrokeCap`, and `ViewStrokeCap` and\n`MStrokeJoin`,
  `VBStrokeJoin`, and `ViewStrokeJoin` respectively.\n\nThe `StackProperty` constructor
  has been added with the `StOffset`\nand `StSort` constructors. As discussed below
  this is a breaking change\nsince the old StackProperty type has been renamed to
  `StackOffset`.\n\nThe `ScaleProperty` type has seen significant enhancement, by
  adding\nthe constructors: `SAlign`, `SBase`, `SBins`, `SConstant` and\n`SExponent`.
  \ THe `Scale` tye has added `ScSymLog` `ScQuantile`,\n`ScQuantize`, and `ScThreshold`.\n\nThe
  `SortProperty` type has new constructors: `CustomSort`,\n`ByRepeatOp`, `ByFieldOp`,
  and `ByChannel`. See the breaking-changes\nsection below for the constructors that
  were removed.\n\nThe `AxisProperty` type has seen significant additions, including:\n`AxBandPosition`,
  `AxDomainColor`, `AxDomainDash`,\n`AxDomainDashOffset`, `AxDomainOpacity`, `AxDomainWidth`,\n`AxFormatAsNum`,
  `AxFormatAsTemporal`, `AxGridColor`, `AxGridDash`,\n`AxGridDashOffset`, `AxGridOpacity`,
  `AxGridWidth`, `AxLabelAlign`,\n`AxLabelBaseline`, `AxLabelNoBound`, `AxLabelBound`,\n`AxLabelBoundValue`,
  `AxLabelColor`, `AxLabelNoFlush`, `AxLabelFlush`,\n`AxLabelFlushValue`, `AxLabelFlushOffset`,
  `AxLabelFont`,\n`AxLabelFontSize`, `AxLabelFontStyle`, `AxLabelFontWeight`,\n`AxLabelLimit`,
  `AxLabelOpacity`, `AxLabelSeparation`, `AxTickColor`,\n`AxTickDash`, `AxTickDashOffset`,
  `AxTickExtra`, `AxTickMinStep`,\n`AxTickOffset`, `AxTickOpacity`, `AxTickRound`,
  `AxTickWidth`,\n`AxNoTitle`, `AxTitleAnchor`, `AxTitleBaseline`, `AxTitleColor`,\n`AxTitleFont`,
  `AxTitleFontSize`, `AxTitleFontStyle`,\n`AxTitleFontWeight`, `AxTitleLimit`, `AxTitleOpacity`,
  `AxTitleX`, and\n`AxTitleY`.\n\nThe `AxisConfig` has seen a similar enhancement,
  and looks similar\nto the above apart from the constructors do not start with 'Ax'.\n\nThe
  `LegendConfig` type has been significantly expanded and, as\ndiscussed in the Breaking
  Changes section, changed. It has gained:\n`LeClipHeight`, `LeColumnPadding`, `LeColumns`,
  `LeGradientDirection`,\n`LeGradientHorizontalMaxLength`, `LeGradientHorizontalMinLength`,\n`LeGradientLength`,
  `LeGradientOpacity`, `LeGradientThickness`,\n`LeGradientVerticalMaxLength`, `LeGradientVerticalMinLength`,\n`LeGridAlign`,
  `LeLabelFontStyle`, `LeLabelFontWeight`,\n`LeLabelOpacity`, `LeLabelOverlap`, `LeLabelPadding`,\n`LeLabelSeparation`,
  `LeLayout`, `LeLeX`, `LeLeY`, `LeRowPadding`,\n`LeSymbolBaseFillColor`, `LeSymbolBaseStrokeColor`,
  `LeSymbolDash`,\n`LeSymbolDashOffset`, `LeSymbolDirection`, `LeSymbolFillColor`,\n`LeSymbolOffset`,
  `LeSymbolOpacity`, `LeSymbolStrokeColor`, `LeTitle`,\n`LeNoTitle`, `LeTitleAnchor`,
  `LeTitleFontStyle`, `LeTitleOpacity`,\nand `LeTitleOrient`.\n\nThe `LegendOrientation`
  type has gained `LOTop` and `LOBottom`.\n\nThe `LegendLayout` and `BaseLegendLayout`
  types are new, and used\nwith `LeLayout` to define the legent orient group.\n\nThe
  `LegendProperty` type gained: `LClipHeight`, `LColumnPadding`,\n`LColumns`, `LCornerRadius`,
  `LDirection`, `LFillColor`,\n`LFormatAsNum`, `LFormatAsTemporal`, `LGradientLength`,\n`LGradientOpacity`,
  `LGradientStrokeColor`, `LGradientStrokeWidth`,\n`LGradientThickness`, `LGridAlign`,
  `LLabelAlign`, `LLabelBaseline`,\n`LLabelColor`, `LLabelFont`, `LLabelFontSize`,
  `LLabelFontStyle`,\n`LLabelFontWeight`, `LLabelLimit`, `LLabelOffset`, `LLabelOpacity`,\n`LLabelOverlap`,
  `LLabelPadding`, `LLabelSeparation`, `LRowPadding`,\n`LStrokeColor`, `LSymbolDash`,
  `LSymbolDashOffset`,\n`LSymbolFillColor`, `LSymbolOffset`, `LSymbolOpacity`, `LSymbolSize`,\n`LSymbolStrokeColor`,
  `LSymbolStrokeWidth`, `LSymbolType`,\n`LTickMinStep`, `LNoTitle`, `LTitleAlign`,
  `LTitleAnchor`,\n`LTitleBaseline`, `LTitleColor`, `LTitleFont`, `LTitleFontSize`,\n`LTitleFontStyle`,
  `LTitleFontWeight`, `LTitleLimit`, `LTitleOpacity`,\n`LTitleOrient`, `LTitlePadding`,
  `LeX`, and `LeY`.\n\n`Projection` has gained the `Identity` constructor. The\n`ProjectionProperty`
  type has gained `PrScale`, `PrTranslate`,\n`PrReflectX`, and `PrReflectY`. The `GraticuleProperty`
  type was\nadded to configure the appearance of graticules created with\n`graticule`.\n\nThe
  `CompositionAlignment` type was added and is used with `align`,\n`alignRC`, `LeGridAlign`,
  and `LGridAlign`.\n\nThe `Bounds` type was added for use with `bounds`.\n\nThe `ImputeProperty`
  and `ImMethod` types were added for use with\n`impute` and `PImpute`.\n\nThe `ScaleConfig`
  type has gained `SCBarBandPaddingInner`,\n`SCBarBandPaddingOuter`, `SCRectBandPaddingInner`,
  and\n`SCRectBandPaddingOuter`.\n\nThe `SelectionProperty` type has gained `Clear`,
  `SInit`, and\n`SInitInterval`.\n\nThe Channel type has gained: `ChLongitude`, `ChLongitude2`,\n`ChLatitude`,
  `ChLatitude2`, `ChFill`, `ChFillOpacity`, `ChHref`,\n`ChKey`, `ChStroke`, `ChStrokeOpacity`.
  \ `ChStrokeWidth`, `ChText`,\nand `ChTooltip`.\n\nThe `TitleConfig` type has gained:
  `TFontStyle`, `TFrame`, `TStyle`,\nand `TZIndex`.\n\nThe `TitleFrame` type is new
  and used with `TFrame` from `TitleConfig`.\n\nThe `ViewBackground` type is new and
  used with `viewBackground`.\n\nThe `ViewConfig` type has gained `ViewCornerRadius`,
  `ViewOpacity`,\n`ViewStrokeCap`, `ViewStrokeJoin`, and `ViewStrokeMiterLimit`.\n\nThe
  `ConfigurationProperty` type, used with `configuration`, has\ngained `ConcatStyle`,
  `FacetStyle`, `GeoshapeStyle`, `HeaderStyle`,\n`NamedStyles`, and `TrailStyle` constructors.\n\nThe
  `ConcatConfig` type was added for use with the `ConcatStyle`,\nand the `FacetConfig`
  type for the `FacetStyle`\nconfiguration settings.\n\nThe `HeaderProperty` type
  has gained: `HFormatAsNum`,\n`HFormatAsTemporal`, `HNoTitle`, `HLabelAlign`, `HLabelAnchor`,\n`HLabelAngle`,
  `HLabelColor`, `HLabelFont`, `HLabelFontSize`,\n`HLabelLimit`, `HLabelOrient`, `HLabelPadding`,
  `HTitleAlign`,\n`HTitleAnchor`, `HTitleAngle`, `HTitleBaseline`, `HTitleColor`,\n`HTitleFont`,
  `HTitleFontSize`, `HTitleFontWeight`, `HTitleLimit`,\n`HTitleOrient`, and `HTitlePadding`.\n\nThe
  `HyperlinkChannel` type has gained `HBinned`.\n\nThe `FacetChannel` type has gained
  `FSort`, `FTitle`, and `FNoTitle`.\n\nThe `TextChannel` type has gained `TBinned`,
  `TFormatAsNum`,\n`TFormatAsTemporal`, `TTitle`, and `TNoTitle`.\n\nThe `TooltipContent`
  type was added, for use with `MTooltip`.\n\nThe `Symbol` type has gained: `SymArrow`,
  `SymStroke`, `SymTriangle`,\n`SymTriangleLeft`, `SymTriangleRight`, and `SymWedge`.\n\n###
  Breaking Changes\n\nSome of these are repeated from above.\n\nThe `title` function
  now takes a second argument, a list of `TitleConfig`\nvalues for configuring the
  appearance of the title.\n\nThe `SReverse` construtor was removed from `ScaleProperty`
  as it\nrepresented a Vega, rather than Vega-Lite, property. The `xSort`\nconstructors
  are used to change the order of an item (e.g. `PSort`,\n`MSort`).\n\nThe `ScSequential`
  constructor was removed from `Scale` as\n`ScLinear` should be used.\n\nThe `SortProperty`
  type has had a number of changes: the `Op`,\n`ByField`, and `ByRepeat` constructors
  have been removed, and\n`ByRepeatOp`, `ByFieldOp`, and `ByChannel` constructors
  have been\nadded.\n\nThe `AxTitleMaxLength` and `TitleMaxLength` constructors have
  been\nremoved (from `AxisProperty` and `AxisConfig` respectively) as they\nare invalid.
  The `AxTitleLimit` (new in this release) and\n`TitleLimit` constructors should be
  used instead.\n\n`AxisProperty`: the `AxValues` constructor has been changed from\naccepting
  a list of doubles to `DataValues`. The `AxDates`\nconstructor has been deprecated
  and `AxValues` should be used\ninstead.\n\nThere have been significant changes to
  the `LegendConfig` type: the\n`EntryPadding`, `GradientHeight`, `GradientLabelBaseline`,\n`GradientWIdth`,
  and `SymbolColor` constructors have been removed;\nthe renaming constructors have
  been renamed so they all begin with\n`Le` (e.g. `Orient` is now `LeOrient`, and
  `Orient` has been added\nto `AxisConfig`); and new constructors have been added.\n\nThe
  `StackProperty` type has been renamed to `StackOffset` and its\nconstructors have
  changed, and a new `StackProperty`\ntype has been added (that references the `StackOffset`
  type).\n\nThe `Average` constructor of `Operation` was removed, and `Mean`\nshould
  be used instead.\n\nThe `LEntryPadding` constructor of `LegendProperty` was removed.\n\nThe
  arguments to the `MDataCondition`, `TDataCondition`, and\n`HDataCondition` constructors
  - of `MarkChannel`, `TextChannel`,\nand `HyperlinkChannel` respectively - have changed
  to support\naccepting multiple expressions.\n\nThe `MarkOrientation` type has been
  renamed `Orientation`.\n\nThe constructors of the `ViewConfig` type have been renamed
  so they\nall begin with `View` (to match `ViewWidth` and `ViewHeight`).\n\nThe constructors
  of the `ProjectionProperty` type have been renamed\nso that they begin with `Pr`
  rather than `P` (to avoid conflicts\nwith the `PositionChannel` type).\n\nThe `Divide`
  constructor of `BinProperty` now takes a list of\nDoubles rather than two.\n\nThe
  `TitleConfig` type has gained the following constructors:\n`TFontStyle`, `TFrame`,
  `TStyle`, and `TZIndex`. The `TitleFrame`\ntype was added for use with `TFrame`.\n\nThe
  `ArgMax` and `ArgMin` constructors of `Operation` now take an\noptional field name,
  to allow them to be used as part of an encoding\naggregation (e.g. with `PAggregate`).\n\nThe
  \"z index\" value has changed from an 'Int' to the 'ZIndex' type.\n\nThe constructors
  for the `Symbol` type now all start with `Sym`, so\n`Cross`, `Diamond`, `TriangleUp`,
  `TriangleDown`, and `Path` have been\nrenamed to `SymCross`, `SymDiamond`, `SymTriangleUp`,\n`SymTriangleDown`,
  and `SymPath`, respectively.\n\nThe `Legend` type has been renamed `LegendType`
  and its constructors\nhave been renamed 'GradientLegend' and 'SymbolLegend'.\n\n###
  Improved testing\n\nAdded a test suite based on the Elm Vega-Lite tests (based entirely
  on\nthe work of Jo Wood).\n\nThe IPython notebooks have been expanded to cover recent
  changes in the\n[Vega-Lite gallery](https://vega.github.io/vega-lite/examples/),
  and\ninclude validation of the output (to check against the expected output).\n\n##
  0.3.0.1\n\nThe minimum base version has been bumped from 4.7 to 4.9, which\nmeans
  ghc 8.0 or later. This is because the 0.2.0.1 release\ndoes not appear to build
  with ghc 7.10. If this restriction is\na problem then please comment on the issues
  list.\n\nThere have been minor documentation updates, adding `@since`\nannotations.\n\n##
  0.3.0.0\n\nThe `Channel` type has been extended to include `ChFill` and `ChStroke`\nconstructors
  and the `tooltips` function allows you to provide\nmultiple tooltips for a channel.
  The schema version has been changed\nfrom 2 to 3, but there has been limited checking
  to see if the API\ncorrectly reflects the new schema.\n\nThis functionality was
  provided by Adam Massmann (massma) and\nBinderDavid.\n\n## 0.2.1.0\n\nAdded the
  `toHtml` and `toHtmlFile` functions which create the necessary\nHTML to view the
  \ Vega-Lite visualization using\n[Vega Embed](https://vega.github.io/vega-lite/usage/embed.html)\n(this
  is similar to how\n[ihaskell-hvega](https://hackage.haskell.org/package/ihaskell-hvega)\nworks).\n\nThis
  functionality was provided by Gregory Schwartz; apologies for\ntaking so long to
  get it released.\n\n## 0.2.0.0\n\nThe constructors for the LegendOrientation type
  have been renamed (by\nadding the prefix `LO`) which avoids the name clash with
  `Left` and `Right`\nseen in earlier releases. This is a breaking API change.\n\nClarify
  how to use the library in the main `hvega` module.\n\nThanks to contributions from
  Nicolas Mattia (nmattia) and Marco Zocca (ocramz).\n\n## 0.1.0.3\n\nThe only change
  is to the cabal file, where `cabal-version: >=1.18` has\nbeen changed to `cabal-version:
  1.18`.\n\n## 0.1.0.2\n\nUpdated the upper bounds of `aeson` to really allow v1.4.
  This was not\nreleased on Hackage.\n\n## 0.1.0.1\n\nUpdated the upper bounds of
  `aeson` from v1.2 to v1.4.\n\nThe cabal package now includes `stack.yaml` and `default.nix`
  (although\nthe latter is *not* guaranteed to be correct), as well as a\nchange log
  and an extra image.\n\n## 0.1.0.0\n\nThis is the initial version of `hvega`, which
  is based on\nversion 2.2.1 of the\n[Elm Vega library](http://package.elm-lang.org/packages/gicentre/elm-vega/2.2.1/VegaLite).\n"
basic-deps:
  base: ! '>=4.9 && <5'
  unordered-containers: ==0.2.*
  text: ==1.2.*
  aeson: ! '>=0.11 && <1.5'
  vector: ! '>=0.11 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
author: Douglas Burke
latest: 0.4.0.0
description-type: markdown
description: |
  # hvega

  Support the creation of [Vega-Lite](https://vega.github.io/vega-lite/) visualizations
  in Haskell. This code is released under the BSD3 license.

  It is an almost-direct copy of version 2.2.1 of the
  [Elm Vega library](http://package.elm-lang.org/packages/gicentre/elm-vega/2.2.1/VegaLite),
  which is released under a BSD3 license by Jo Wood of the giCentre at the
  City University of London.

  ## Example

  ```Haskell
  let cars =  dataFromUrl "https://vega.github.io/vega-datasets/data/cars.json" []

      enc = encoding
              . position X [ PName "Horsepower", PmType Quantitative ]
              . position Y [ PName "Miles_per_Gallon", PmType Quantitative ]
              . color [ MName "Origin", MmType Nominal ]

      bkg = background "rgba(0, 0, 0, 0.05)"

  in toVegaLite [ bkg, cars, mark Circle [], enc [] ]
  ```

  When viewed with a Vega-Lite aware viewer, the resultant plot is

  ![Simple scatterplot](https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/images/intro.png "Simple scatterplot")

  ## Documentation

  The [Elm Vega documentation](http://package.elm-lang.org/packages/gicentre/elm-vega/2.2.1)
  can be used as a guide to using this module. The
  [Vega-Lite Example Gallery](https://vega.github.io/vega-lite/examples/) has
  been converted to an
  [IHaskell notebook](https://github.com/DougBurke/hvega/blob/master/notebooks/VegaLiteGallery.ipynb)
  Uunfortunately the plots created by VegaEmbed **do not appear**
  in the notebook when viewed with either GitHub's viewer or
  [ipynb viewer](http://nbviewer.jupyter.org/github/DougBurke/hvega/blob/master/notebooks/VegaLiteGallery.ipynb),
  but things seem much better when using Jupyter Lab (rather than
  notebook) to create the notebooks (since Vega is natively
  supported in this environment). The notebooks have been re-created
  using Jupyter Lab (thanks to Tweag I/O's
  [JupyterWith environment](https://www.tweag.io/posts/2019-02-28-jupyter-with.html)), which should make the plots appear on GitHub (you may need
  to reload the notebooks as I find they don't display on the
  first try).

  The [notebooks directory](https://github.com/DougBurke/hvega/tree/master/notebooks)
  contains a poorly-curated set of examples and experiments with hvega.

  ## Differences to Elm Vega

  The main changes to version 2.2.1 of
  [Elm Vega](http://package.elm-lang.org/packages/gicentre/elm-vega/2.2.1)
  are:

  - Replace `Spec` by `VLSpec` (although both are synonyms for the underlying
    JSON representation).

  - Add a type for the output of `toVegaLite` (`VegaLite`) that is separate from
    `VLSpec`, which is usefull for integration with IHaskell. The JSON
    specification is retrieved with `fromVL`.

  - Take advantage of the lack of backwards compatibality requirements to remove or
    replace several symbols (such as add the `Utc` constructor to `TimeUnit`, remove the `bin`
    function, and use `Data` rather than `(VLProperty, VLSpec)` in function
    signatures).

  - In version 0.2.0.0, the constructors for the `LegendOrientation` type
    have gained a `LO` prefix, which avoids clashing with the Prelude's
    `Either` type.
license-name: BSD-3-Clause
