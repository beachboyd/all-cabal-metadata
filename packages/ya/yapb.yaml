homepage: https://github.com/kwanghoon/yapb#readme
changelog-type: markdown
hash: f06d20fe7f521cc7b2d0a542a0ceafbe236ce5796750b03d90b88e2dbd1a0f58
test-bench-deps:
  base: '>=4.7 && <5'
  yapb: -any
maintainer: lazyswamp@gmail.com
synopsis: Yet Another Parser Builder (YAPB)
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n##
  [0.1.0] - 2020-06-25\n### Added\n- Readme.md\n\n### Changed\n- Rename genlrparser
  into yapb\n- Write packages.yaml (generating yapb.cabal automatically) for making
  yapb available as a Hackage library\n\n### Fixed\n- Fixed hard-coded usage of genlrparser-exe
  in GenLRParserTable.hs\n\n### Removed\n- n/a\n\n\t\n"
basic-deps:
  bytestring: '>=0.10.8 && <0.11'
  base: '>=4.7 && <5'
  aeson-pretty: '>=0.8.8 && <0.9'
  json: '>=0.10 && <0.11'
  process: '>=1.6.5 && <1.7'
  network: '>=3.1.1 && <3.2'
  containers: '>=0.6.0 && <0.7'
  regex-tdfa: '>=1.3.1 && <1.4'
  yapb: -any
  hashable: '>=1.3.0 && <1.4'
  prettyprinter: '>=1.6.1 && <1.7'
  pretty: '>=1.1.3 && <1.2'
  aeson: '>=1.4.7 && <1.5'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.0
author: Kwanghoon Choi
latest: 0.1.0
description-type: markdown
description: "\n## YAPB: Yet Another Parser Builder\n\n### A programmable parser builder
  system\n- Allows to write LALR(1) parser specifications in Haskell\n- Provides an
  automatic syntax completion method\n\n### Library, tools, and examples\n- yapb:
  a library for a programmable parser builder system\n- yapb-exe: a wrapper interface
  to YAPB\n- conv-exe: a grammar format utility for conversion of a readable grammar
  (.lgrm) format into the Haskell data format (.grm)\n- syncomp-exe: a syntax completion
  server for Emacs\n- Examples: \n  - parser-exe: an arithmetic parser\n  - polyrpc-exe:
  a polyrpc programming language system including a parser, a poly rpc type checker,
  a slicing compiler, a poly cs type checker, and a poly cs interpter.\n\n### Download
  and build\n~~~\n  $ git clone https://github.com/kwanghoon/yapb\n  $ cd yapb\n  $
  stack build\n~~~\n\n### How to write and run a parser\n~~~\n  $ ls app/parser/*.hs\n
  \ app/parser/Lexer.hs  app/parser/Main.hs  app/parser/Parser.hs  app/parser/Token.hs\n\n
  \ $ cat app/parser/Lexer.hs\n  module Lexer(lexerSpec) where\n\n  import Prelude
  hiding (EQ)\n  import CommonParserUtil\n  import Token\n\n  mkFn :: Token -> (String
  -> Maybe Token)\n  mkFn tok = \\text -> Just tok\n\n  skip :: String -> Maybe Token\n
  \ skip = \\text -> Nothing\n\n  lexerSpec :: LexerSpec Token\n  lexerSpec = LexerSpec\n
  \   {\n      endOfToken    = END_OF_TOKEN,\n      lexerSpecList = \n        [ (\"[
  \\t\\n]\", skip),\n          (\"[0-9]+\" , mkFn INTEGER_NUMBER),\n          (\"\\\\(\"
  \   , mkFn OPEN_PAREN),\n          (\"\\\\)\"    , mkFn CLOSE_PAREN),\n          (\"\\\\+\"
  \   , mkFn ADD),\n          (\"\\\\-\"    , mkFn SUB),\n          (\"\\\\*\"    ,
  mkFn MUL),\n          (\"\\\\/\"    , mkFn DIV),\n          (\"\\\\=\"    , mkFn
  EQ),\n          (\"\\\\;\"    , mkFn SEMICOLON),\n          (\"[a-zA-Z][a-zA-Z0-9]*\"
  \   , mkFn IDENTIFIER)\n        ]\n    } \n\n\n  $ cat app/parser/Parser.hs\n  module
  Parser where\n\n  import CommonParserUtil\n  import Token\n  import Expr\n\n\n  parserSpec
  :: ParserSpec Token AST\n  parserSpec = ParserSpec\n    {\n      startSymbol = \"SeqExpr'\",\n
  \   \n      parserSpecList =\n      [\n        (\"SeqExpr' -> SeqExpr\", \\rhs ->
  get rhs 1),\n      \n        (\"SeqExpr -> SeqExpr ; AssignExpr\",\n          \\rhs
  -> toAstSeq (\n            fromAstSeq (get rhs 1) ++ [fromAstExpr (get rhs 3)])
  ),\n      \n        (\"SeqExpr -> AssignExpr\", \\rhs -> toAstSeq [fromAstExpr (get
  rhs 1)]),\n      \n        (\"AssignExpr -> identifier = AssignExpr\",\n          \\rhs
  -> toAstExpr (Assign (getText rhs 1) (fromAstExpr (get rhs 3))) ),\n      \n        (\"AssignExpr
  -> AdditiveExpr\", \\rhs -> get rhs 1),\n\n        (\"AdditiveExpr -> AdditiveExpr
  + MultiplicativeExpr\",\n          \\rhs -> toAstExpr (\n            BinOp Expr.ADD
  (fromAstExpr (get rhs 1)) (fromAstExpr (get rhs 3))) ),\n\n        (\"AdditiveExpr
  -> AdditiveExpr - MultiplicativeExpr\",\n          \\rhs -> toAstExpr (\n            BinOp
  Expr.SUB (fromAstExpr (get rhs 1)) (fromAstExpr (get rhs 3))) ),\n\n        (\"AdditiveExpr
  -> MultiplicativeExpr\", \\rhs -> get rhs 1),\n\n        (\"MultiplicativeExpr ->
  MultiplicativeExpr * PrimaryExpr\",\n          \\rhs -> toAstExpr (\n            BinOp
  Expr.MUL (fromAstExpr (get rhs 1)) (fromAstExpr (get rhs 3))) ),\n\n        (\"MultiplicativeExpr
  -> MultiplicativeExpr / PrimaryExpr\",\n          \\rhs -> toAstExpr (\n            BinOp
  Expr.DIV (fromAstExpr (get rhs 1)) (fromAstExpr (get rhs 3))) ),\n\n        (\"MultiplicativeExpr
  -> PrimaryExpr\", \\rhs -> get rhs 1),\n      \n        (\"PrimaryExpr -> identifier\",
  \\rhs -> toAstExpr (Var (getText rhs 1)) ),\n\n        (\"PrimaryExpr -> integer_number\",\n
  \         \\rhs -> toAstExpr (Lit (read (getText rhs 1))) ),\n\n        (\"PrimaryExpr
  -> ( AssignExpr )\", \\rhs -> get rhs 2)\n      ],\n    \n      baseDir = \"./\",\n
  \     actionTblFile = \"action_table.txt\",  \n      gotoTblFile = \"goto_table.txt\",\n
  \     grammarFile = \"prod_rules.txt\",\n      parserSpecFile = \"mygrammar.grm\",\n
  \     genparserexe = \"yapb-exe\"\n    }\n\n  $ cat app/parser/example/oneline.arith\n
  \ 1 + 2 - 3 * 4 / 5\n  \n  $ cat app/parser/example/multiline.arith\n  x = 123;\n
  \ x = x + 1;\n  y = x; \n  y = y - 1 * 2 / 3;\n  z = y = x\n\n  $ stack exec parser-exe\n
  \ Enter your file: app/parser/example/oneline.arith\n  Lexing...\n  Parsing...\n
  \ done.\n  Pretty Printing...\n  ((1 + 2) - ((3 * 4) / 5))\n  \n  $ stack exec parser-exe\n
  \ Enter your file: app/parser/example/multiline.arith\n  Lexing...\n  Parsing...\n
  \ done.\n  Pretty Printing...\n  (x = 123); (x = (x + 1)); (y = x); (y = (y - ((1
  * 2) / 3))); (z = (y = x))\n~~~\n\n### Documents\n- [Parser generators sharing LR
  automaton generators and accepting general-purpose programming language-based specifications,
  J. of KIISE, 47(1), January 2020](http://swlab.jnu.ac.kr/paper/kiise202001.pdf)
  Written in Korean.\n- [A topdown approach to writing a compiler](https://github.com/kwanghoon/swlab_parser_builder/blob/master/doc/tutorial_swlab_parser_builder.txt)
  Written in Korean.\n- C++/Java/Python parser builder systems using YAPB\n  - [Java
  parser](https://github.com/kwanghoon/swlab_parser_builder)\n  - [C++ parser](https://github.com/tlsdorye/swlab-parser-lib)\n
  \ - [Python parser](https://github.com/limjintack/swlab_parser_python).\n  - Architecture\n
  \   * <img src=\"https://github.com/kwanghoon/genlrparser/blob/master/doc/parsertoolarchitecture.png\"/>\n\n"
license-name: BSD-3-Clause
