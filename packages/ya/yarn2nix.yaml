homepage: https://github.com/Profpatsch/yarn2nix#readme
changelog-type: ''
hash: d3c72d66a364642552f66b560208e3220e152320ab6ec9a9ad3f5466e979aff2
test-bench-deps:
  regex-tdfa-text: ==1.0.0.*
  bytestring: ==0.10.*
  async-pool: ==0.9.*
  ansi-wl-pprint: ==0.6.*
  data-fix: ==0.0.7 || ==0.2.0
  tasty-th: ==0.1.7.*
  stm: ==2.4.*
  base: ==4.*
  unordered-containers: ==0.2.*
  text: ==1.2.*
  filepath: ==1.4.*
  process: ! '>=1.4'
  protolude: ==0.2.*
  containers: ! '>=0.5 && <0.7'
  hnix: ==0.5.*
  regex-tdfa: ==1.2.*
  yarn-lock: ==0.5.*
  tasty-quickcheck: ==0.8.* || ==0.9.*
  mtl: ==2.2.*
  tasty-hunit: ! '>=0.9 && <0.11'
  transformers: ==0.5.*
  tasty: ! '>=0.11 && <1.2'
  aeson: ! '>=1.0 && <1.3'
  yarn2nix: -any
  neat-interpolation: ==0.3.*
  directory: ==1.3.*
maintainer: mail@profpatsch.de
synopsis: Convert yarn.lock files to nix expressions
changelog: ''
basic-deps:
  regex-tdfa-text: ==1.0.0.*
  bytestring: ==0.10.*
  async-pool: ==0.9.*
  ansi-wl-pprint: ==0.6.*
  data-fix: ==0.0.7 || ==0.2.0
  unix: ==2.7.*
  stm: ==2.4.*
  base: ==4.*
  unordered-containers: ==0.2.*
  text: ==1.2.*
  filepath: ==1.4.*
  process: ! '>=1.4'
  protolude: ==0.2.*
  containers: ! '>=0.5 && <0.7'
  hnix: ==0.5.*
  regex-tdfa: ==1.2.*
  yarn-lock: ==0.5.*
  mtl: ==2.2.*
  transformers: ==0.5.*
  optparse-applicative: ! '>=0.13 && <0.15'
  aeson: ! '>=1.0 && <1.3'
  yarn2nix: -any
  directory: ==1.3.*
all-versions:
- '0.5.0'
- '0.7.0'
author: Profpatsch
latest: '0.7.0'
description-type: markdown
description: ! "# yarn2nix\n\n```\nyarn2nix [path/to/yarn.lock]\nyarn2nix --template
  [path/to/package.json]\n\nConvert a `yarn.lock` into a synonymous nix expression.\nIf
  no path is given, search for `./yarn.lock`.\nIn the second invocation generate a
  template for your `package.json`.\n```\n\n## Features\n\n- Purely transform `yarn.lock`
  files into very minimal, line-diffable nix expressions.\n- Nix is used to its fullest.
  Every package is a derivation, whole dependency\n  subtrees are shared in an optimal
  way, even between projects.\n- The ability to resolve git dependencies by prefetching
  their repos and including the hashes.\n- Completely local transformation if there
  are no git dependencies (can be used inside nix-build, no large file check-in).\n-
  Extremely fast.\n- Nice code that can be easily extended, new repositories introduced,
  adapt to new versions of the `yarn.lock` format.\n- Comes with a [nix library][nix-lib]
  that uses the power of overlays to make overriding dependencies possible.\n- POWERED
  BY [HNIX](https://github.com/haskell-nix/hnix)™ since before it was cool.\n\nProbably
  a few more.\n\n## Example Output\n\nThe [HackMD](https://github.com/hackmdio/hackmd)
  project is an elaborate npm package with hundreds of\ndependencies. `yarn2nix` flawlessly
  parses the current (2017-12) `yarn.lock`\nfile distributed with the project, including
  resolving their manual git forks of\nmultiple npm packages:\n\n```\ndist/build/yarn2nix/yarn2nix
  ~/tmp/hackmd/yarn.lock | wc\n   5306   17068  280246\ncat ~/tmp/hackmd/yarn.lock
  | wc\n   7667   11307  266652\n```\n\nThe output of this conversion [can be seen\nhere](https://gist.github.com/Profpatsch/9e50d25faf5a5c4269566e9b7d89199b).
  Also\nnote that [git dependencies are resolved\ncorrectly](https://gist.github.com/Profpatsch/9e50d25faf5a5c4269566e9b7d89199b#file-hackmd-dependencies-nix-L1291).\n\nPushing
  it through the provided [library of nix\nfunctions][nix-lib], we get a complete
  build of HackMD\ndependencies, using the project template (generated with `--template`),
  we also\nbuild HackMD. Included executables will be in `node_modules/.bin` as expected
  and\ncorrectly link to their respective library paths in the nix store, for example:\n\n```\n
  ls /nix/store/2jc8b4q9i2cvx7pamv5r8md45prrvx4f-hackmd-0.5.1-0.5.1/node_modules/.bin/markdown-it
  --help\nUsage: ls [OPTION]... [FILE]...\nList information about the FILEs (the current
  directory by default).\n```\n\n[nix-lib]: ./nix-lib/default.nix\n\n## Building `yarn2nix`\n\n```\n$
  nix-build\n$ result/bin/yarn2nix\n```\n\n## Using the generated nix files to build
  a project\n\n**Note:** This is a temporary interface. Ideally, the library will
  be in nixpkgs\nand yarn2nix will be callable from inside the build (so the resulting
  nix files\ndon’t have to be checked in).\n\nOnce you have the `yarn2nix` binary,
  use it to generate nix files for the\n`yarn.lock` file and the `package.json`:\n\n```shell\n$
  yarn2nix ./jsprotect/yarn.lock > npm-deps.nix\n$ yarn2nix --template ./jsproject/package.json
  > npm-package.nix\n```\n\nThen use the library to assemble the generated files in
  a `default.nix`:\n\n```nix\nlet\n  nixpkgsPath = <nixpkgs>;\n  pkgs = import nixpkgsPath
  {};\n  nixLib = pkgs.callPackage /path/to/yarn2nix/nix-lib {\n    # WARNING (TODO):
  for now you need to use this checked out yarn2nix\n    # because the upstream package
  (in haskellPackages) might have\n    # broken dependencies (yarn-lock and yarn2nix
  are not in stackage)\n    yarn2nix = import /path/to/yarn2nix { inherit nixpkgsPath;
  };\n  };\n\nin\n  nixLib.buildNodePackage\n    ( { src = nixLib.removePrefixes [
  \"node_modules\" ] ./.; } //\n      nixLib.callTemplate ./npm-package.nix\n        (nixLib.buildNodeDeps
  (pkgs.callPackage ./npm-deps.nix {}))\n```\n\nFinally, run `nix-build`, and voilà,
  in `./result/` you find the project with\nall its dependencies correctly linked
  to their corresponding `node_modules`\nfolder, recursively.\n\n## Development\n\n```\n$
  nix-shell\nnix-shell> hpack\nnix-shell> cabal build\n```\n"
license-name: MIT
