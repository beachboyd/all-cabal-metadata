homepage: https://github.com/Profpatsch/yarn2nix#readme
changelog-type: ''
hash: 25c60bcc540e0a6b6c45f264fc1ac6e43de1f3475e78554d7734f4d6b5dacd64
test-bench-deps:
  regex-tdfa-text: ==1.0.0.*
  either: ==4.4.*
  bytestring: ==0.10.*
  async-pool: ==0.9.*
  ansi-wl-pprint: ==0.6.*
  data-fix: ! '>=0.0.7 && <0.1'
  tasty-th: ==0.1.7.*
  stm: ==2.4.*
  base: ==4.*
  unordered-containers: ==0.2.*
  text: ==1.2.*
  filepath: ==1.4.*
  process: ==1.4.*
  protolude: ==0.1.*
  containers: ! '>=0.5 && <0.7'
  hnix: ==0.3.*
  regex-tdfa: ==1.2.*
  yarn-lock: ==0.4.*
  tasty-quickcheck: ==0.8.*
  mtl: ==2.2.*
  tasty-hunit: ==0.9.*
  tasty: ==0.11.*
  aeson: ! '>=1.0 && <1.3'
  yarn2nix: -any
  neat-interpolation: ==0.3.*
  directory: ==1.3.*
maintainer: mail@profpatsch.de
synopsis: Convert yarn.lock files to nix expressions
changelog: ''
basic-deps:
  regex-tdfa-text: ==1.0.0.*
  either: ==4.4.*
  bytestring: ==0.10.*
  async-pool: ==0.9.*
  ansi-wl-pprint: ==0.6.*
  data-fix: ! '>=0.0.7 && <0.1'
  unix: ==2.7.*
  stm: ==2.4.*
  base: ==4.*
  unordered-containers: ==0.2.*
  text: ==1.2.*
  filepath: ==1.4.*
  process: ==1.4.*
  protolude: ==0.1.*
  containers: ! '>=0.5 && <0.7'
  hnix: ==0.3.*
  regex-tdfa: ==1.2.*
  yarn-lock: ==0.4.*
  mtl: ==2.2.*
  optparse-applicative: ==0.13.*
  aeson: ! '>=1.0 && <1.3'
  yarn2nix: -any
  directory: ==1.3.*
all-versions:
- '0.5.0'
author: Profpatsch
latest: '0.5.0'
description-type: markdown
description: ! "# yarn2nix\n\n```\nyarn2nix [path/to/yarn.lock]\nyarn2nix --template
  [path/to/package.json]\n\nConvert a `yarn.lock` into a synonymous nix expression.\nIf
  no path is given, search for `./yarn.lock`.\nIn the second invocation generate a
  template for your `package.json`.\n```\n\n## Features\n\n- Purely transform `yarn.lock`
  files into very minimal, line-diffable nix expressions.\n- Nix is used to its fullest.
  Every package is a derivation, whole dependency\n  subtrees are shared in an optimal
  way, even between projects.\n- The ability to resolve git dependencies by prefetching
  their repos and including the hashes.\n- Completely local transformation if there
  are no git dependencies (can be used inside nix-build, no large file check-in).\n-
  Extremely fast.\n- Nice code that can be easily extended, new repositories introduced,
  adapt to new versions of the `yarn.lock` format.\n- Comes with a [nix library][nix-lib]
  that uses the power of overlays to make overriding dependencies possible.\n\nProbably
  a few more.\n\n## Example Output\n\nThe [HackMD](https://github.com/hackmdio/hackmd)
  project is an elaborate npm package with hundreds of\ndependencies. `yarn2nix` flawlessly
  parses the current (2017-12) `yarn.lock`\nfile distributed with the project, including
  resolving their manual git forks of\nmultiple npm packages:\n\n```\ndist/build/yarn2nix/yarn2nix
  ~/tmp/hackmd/yarn.lock | wc\n   5306   17068  280246\ncat ~/tmp/hackmd/yarn.lock
  | wc\n   7667   11307  266652\n```\n\nThe output of this conversion [can be seen\nhere](https://gist.github.com/Profpatsch/9e50d25faf5a5c4269566e9b7d89199b).
  Also\nnote that [git dependencies are resolved\ncorrectly](https://gist.github.com/Profpatsch/9e50d25faf5a5c4269566e9b7d89199b#file-hackmd-dependencies-nix-L1291).\n\nPushing
  it through the provided [library of nix\nfunctions][nix-lib], we get a complete
  build of HackMD\ndependencies, using the project template (generated with `--template`),
  we also\nbuild HackMD. Included executables will be in `node_modules/.bin` as expected
  and\ncorrectly link to their respective library paths in the nix store, for example:\n\n```\n
  ls /nix/store/2jc8b4q9i2cvx7pamv5r8md45prrvx4f-hackmd-0.5.1-0.5.1/node_modules/.bin/markdown-it
  --help\nUsage: ls [OPTION]... [FILE]...\nList information about the FILEs (the current
  directory by default).\n```\n\n[nix-lib]: ./nix-lib/default.nix\n\n## Building\n\n```\n$
  nix-build\n$ result/bin/yarn2nix\n```\n\n## Development\n\n```\n$ nix-shell\nnix-shell>
  hpack\nnix-shell> cabal build\n```\n"
license-name: MIT
