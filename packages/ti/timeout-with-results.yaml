homepage: https://github.com/ppetr/timeout-with-results
changelog-type: ''
hash: a12246b927c29b0006cd877a13d53e5b0c26e43439b1663eef83b85ce18ec882
test-bench-deps: {}
maintainer: Petr Pudlák <petr.mvd@gmail.com>
synopsis: Runs a time-limited computation alowing it to return intermediate results.
changelog: ''
basic-deps:
  base: ==4.*
  mtl: ! '>=2'
  parallel: ! '>=3'
  deepseq: ! '>=1.1'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
author: Petr Pudlák
latest: '0.2'
description-type: markdown
description: ! "# timeout-with-results\n\nA Haskell library that allows timeouting
  a computation while allowing it to\nreturn partial results.  Useful for making AI-like
  algorithms that should\nreturn the best result found within a time limit.\n\n##
  Examples\n\n### Computing pairs of prime twins\n\n```haskell\n{-# LANGUAGE FlexibleContexts
  #-}\nimport Control.Monad\nimport Data.Numbers.Primes -- package 'primes'\nimport
  System.Timeout.Returning\n\n-- | Loop forever, computing prime twins.\nprimeTwins
  :: MonadTimeout (Integer, Integer) m => [Integer] -> m (Maybe (Integer,Integer))\nprimeTwins
  (p : ps@(p' : _))\n    | p' == p + 2   = partialResult (p, p') >> primeTwins ps\n
  \   | otherwise     = primeTwins ps\n\n-- | Print the largest pair of prime twins
  we were able to compute in 100ms.\nmain :: IO ()\nmain = runTimeoutNF 100000 (primeTwins
  primes) >>= print\n```\n\n### Number guessing game\n\n```haskell\n{-# LANGUAGE FlexibleContexts
  #-}\nimport Control.Monad\nimport Control.Monad.IO.Class\nimport System.Random\nimport
  System.Timeout.Returning.Writer\n\n-- | Let the user guess until she hits the number.\nguess
  :: (MonadIO m, MonadWriter [Int] m)\n      => Int            -- ^ The number to
  be guessed.\n      -> m ()\nguess n = loop\n  where\n    loop = do\n        is <-
  liftIO $ putStr \"Guess: \" >> liftM reads getLine\n        case is of\n            ((i,_)
  : _) -> do\n                tell [i]\n                case i `compare` n of\n                    EQ
  \ -> return ()\n                    LT  -> liftIO (putStrLn \"Guess larger.\")  >>
  loop\n                    GT  -> liftIO (putStrLn \"Guess smaller.\") >> loop\n
  \           _ -> liftIO (putStrLn \"Invalid number.\") >> loop\n\n\n-- | Guess a
  number.\nmain :: IO ()\nmain = do\n    let limit = 20\n    putStrLn \"Guess a number
  from 1 to 100.\"\n    putStrLn $ \"You have \" ++ show limit ++ \" seconds.\"\n
  \   n <- randomRIO (1, 100)\n    (r, w) <- runTimeout (limit * (10^6)) (guess n)\n
  \   putStrLn \"\"\n    putStr \"The number was: \" >> print n\n    case r of\n        Just
  _      -> putStrLn \"You win!\"\n        otherwise   -> putStr \"Time's up, you
  lose. Your guesses: \" >> print w\n```\n\n# Copyright\n\nCopyright 2012, Petr Pudlák\n\nContact:
  [petr.pudlak.name](http://petr.pudlak.name/).\n\n![LGPLv3](https://www.gnu.org/graphics/lgplv3-88x31.png)\n\nThis
  program is free software: you can redistribute it and/or modify it under\nthe terms
  of the GNU Lesser General Public License as published by the Free\nSoftware Foundation,
  either version 3 of the License, or (at your option) any\nlater version.\n\nThis
  program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR
  PURPOSE.  See the GNU Lesser General Public License for more\ndetails.\n\nYou should
  have received a copy of the GNU Lesser General Public License along\nwith this program.
  \ If not, see <http://www.gnu.org/licenses/>.\n\n"
license-name: LicenseRef-LGPL
