homepage: https://github.com/y-taka-23/time-machine#readme
changelog-type: ''
hash: 4a0d388d4343a4742f8caec5c88e90e153d03567e66a38fb613de9af6a439174
test-bench-deps:
  base: -any
  time: -any
  hspec: -any
  tz: -any
  HUnit: -any
  mtl: -any
  time-machine: -any
maintainer: TAKAHASHI Yuto <ytaka23dev@gmail.com>
synopsis: A library to mock the current time.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  time: -any
  tz: -any
  mtl: -any
all-versions:
- '0.1.0'
author: TAKAHASHI Yuto <ytaka23dev@gmail.com>
latest: '0.1.0'
description-type: markdown
description: ! "time-machine\n============\n\n[![Build Status](https://travis-ci.org/y-taka-23/time-machine.svg?branch=master)](https://travis-ci.org/y-taka-23/time-machine)\n[![Hackage](https://img.shields.io/hackage/v/time-machine.svg)](https://hackage.haskell.org/package/time-machine)\n\nA
  library to mock the current time and relevant `IO` functions\nby using a type class.\nYou
  can get the great command of the current time in UTC,\ntime zones, and the speed
  of time.\n\n```haskell\nmodule Main where\n\nimport Control.Monad.TimeMachine\nimport
  Control.Monad.Trans ( liftIO )\n\nmain :: IO ()\nmain = backTo (the future) $ do\n
  \   t <- getCurrentTime\n    liftIO . putStrLn $ \"We are at \" ++ show t\n\n--
  We are at 1985-10-26 08:24:00.035889 UTC\n```\n\nAs you know, time-dependent `IO`
  actions are extremely hard to test.\nAssume, for example, the following simple action.\nIt
  should return `\"Good morning\"` only in the morning,\nthus the results of its unit
  tests are fatally fragile.\n\n```haskell\ngetGreeting :: IO String\ngetGreeting
  = do\n    t <- getCurrentTime\n    if utctDayTime t <= 12 * 60 * 60\n        then
  return \"Good morning\"\n        else return \"Hello\"\n```\n\nThis library aims
  to make such actions testable with minimal changes.\nActually what you have to do
  is just:\n\n1. Use `MonadTime` type class instead of `IO`\n1. Wrap `IO` actions
  in `liftIO` if necessary\n\nHere is the testable version of `getGreeting`.\nYou
  can see that nothing is changed excepting the signature.\n\n```haskell\ngetGreeting
  :: (MonadTime m) => m String\ngetGreeting = do\n    t <- getCurrentTime\n    if
  utctDayTime t <= 12 * 60 * 60\n        then return \"Good morning\"\n        else
  return \"Hello\"\n```\n\nExamples\n--------\n\n### Mocking the Current Time\n\n`travelTo`
  changes the result of `getCurrentTime` and relevant actions.\n\nOther than pointing
  the target `UTCTime` explicitly,\nyou have two ways to determine how to mock the
  current time.\nThis library provides a small DSL to construct the destinations of
  your time travels.\n\n```haskell\n-- By a date-time according to your local time
  zone\nmain = travelTo (oct 26 1985 am 1 24) $ do\n    getCurrentTime >>= (liftIO
  . print)\n```\n\n```haskell\n-- By a relative date\nmain = travelTo (3 `days` ago)
  $ do\n    getCurrentTime >>= (liftIO . print)\n```\n\nFor more detail,\nsee the
  [document](https://hackage.haskell.org/package/time-machine).\n\n### Mocking Time
  Zones\n\n`jumpTo` switch the time zone which is used for calculating the local time.\nBy
  this function, you can test time-zone-sensitive actions.\n\n```haskell\nimport qualified
  Data.Time.Zones as TZ\n\nmain = jumpTo \"Asia/Shanghai\" $ do\n    t  <- getCurrentTime\n
  \   tz <- loadLocalTZ\n    liftIO . print $ TZ.timeZoneForUTCTime tz t  -- CST\n```\n\n###
  Mocking the Speed of Time\n\n`accelerate` changes the speed of time.\nIn the following
  example, time flies 60 times faster than the real.\n\n```haskell\nmain = accelerate
  (x 60) $ do\n    getCurrentTime >>= (liftIO . print)  -- (*)\n    liftIO . threadDelay
  $ 1000 * 1000   -- wait a second\n    getCurrentTime >>= (liftIO . print)  -- around
  a minute after (*)\n```\n\nMoreover, as a special case of `accelerate`, `halt` stops
  the time.\nThat is remarkably useful to fix the point of time during your tests.\n\n```haskell\nmain
  = halt $ do\n    getCurrentTime >>= (liftIO . print)  -- (*)\n    liftIO . threadDelay
  $ 1000 * 1000   -- wait a second\n    getCurrentTime >>= (liftIO . print)  -- exactly
  same as (*)\n```\n\nInstallation\n------------\n\nThe project is managed by Stack,
  so you can install it simply:\n\n```console\n$ git clone https://github.com/y-taka-23/time-machine.git\n$
  cd time-machine\n$ stack install\n```\n\nLicense\n-------\n\nThis project is released
  under the BSD 3-clause license.\nFor more details, see [LICENSE](./LICENSE) file.\n"
license-name: BSD3
