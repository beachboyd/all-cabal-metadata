homepage: https://github.com/athanclark/timemap#readme
changelog-type: ''
hash: 1918a68ec967eca5f7babf730c88ce6cf87409eb8814b2e96926b3838f54ce79
test-bench-deps:
  focus: -any
  stm: -any
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: -any
  list-t: -any
  criterion: -any
  timemap: -any
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  hashable: -any
  tasty: -any
  QuickCheck: -any
  stm-containers: -any
maintainer: athan.clark@localcooking.com
synopsis: ''
changelog: ''
basic-deps:
  focus: -any
  stm: -any
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: -any
  list-t: -any
  containers: -any
  hashable: -any
  stm-containers: -any
all-versions:
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
author: Athan Clark
latest: 0.0.7
description-type: markdown
description: ! "timemap\n=======\n\nA mutable `Data.HashMap`-like structure, where
  each entity is implicitly indexed\nby their last-modified time. Useful for keyed
  caches.\n\n## Usage\n\n```haskell\nimport qualified Data.TimeMap as TM\nimport Control.Concurrent.STM\n\n\nmain
  :: IO ()\nmain = do\n  -- create a new, empty reference\n  mapRef <- atomically
  TM.newTimeMap\n\n  -- insert a new key/value pair in the map. Note that\n  -- `someKey`
  should implement `Hashable`. This also\n  -- sets the creation time of the value
  to \"now\".\n  TM.insert someKey 0 mapRef\n\n  -- adjusts the value of `someKey`
  to `1`. Note that\n  -- also resets the creation time of the value to \"now\".\n
  \ TM.adjust (+1) someKey mapRef\n\n  -- wait a second\n  threadDelay 1000000\n\n
  \ -- delete all values older than 1 second from now.\n  atomically $ TM.filterFromNow
  1 mapRef\n\n  -- Will return `Nothing`\n  atomically $ TM.lookup someKey mapRef\n\n
  \ return ()\n```\n\n## How it works\n\nThere are two internal maps for a `TimeMap
  k a`:\n\n- a \"time-indexed\" map reference: `TVar (Map UTCTime (HashSet k))`\n-
  a mutable map of values: `STMContainers.Map.Map k (UTCTime, a)`\n\n### Insertion\n\nInserting
  a new value first performs a lookup on the hashtable to see if the key\nalready
  exists:\n\n- If it doesn't, insert the current time and the element that into the
  mutable map.\n  Then, insert the _key_ as the value, and the _time_ as the key into\n
  \ the time-indexed multimap.\n- If it does, remove the entry from the time-indexed
  multimap for the old time, before\n  doing the same thing as the first bullet.\n\n###
  Lookups\n\nThis doesn't have to create new data, and thus doesn't need full `IO`.
  All it does is\nlookup the key in the mutable map.\n\n### Filtering\n\nTo filter
  out all entries older than some time, you have to use the `Data.Map.splitLookup`\nfunction
  to split the time-indexed multimap into the entries you want to delete from\nthe
  main container, and the ones you want to keep. You simply `writeTVar` the map you
  want\nto keep, but for the ones you want to delete, you need to get all the `elems`
  of\nthat map. Then, for every key that we need to delete, we delete it from the\nmain
  container. Suprisingly, this appears to operate in constant time, regardless of\nthe
  size of the map.\n\n## How to run tests\n\n```bash\nstack test\n```\n\n## Benchmarks\n\n```bash\nstack
  bench --benchmark-arguments=\"--output profile.html\"\n```\n\nYou can also view
  the results on my box\n[here](https://htmlpreview.github.io/?https://github.com/athanclark/timemap/blob/master/profile.html).\n"
license-name: BSD-3-Clause
