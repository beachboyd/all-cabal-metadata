homepage: https://github.com/lfborjas/timezone-detect#readme
changelog-type: markdown
hash: aa2b7a07d4e539ab0764735cbb313413ad6ce0c4d0134ae08042eea0d8241310
test-bench-deps:
  base: '>=4.9 && <4.14'
  time: '>=1.9.1 && <=1.10'
  timezone-series: '>=0.1.0 && <0.2'
  hspec: '>=2.7 && <2.8'
  timezone-olson: '>=0.2.0 && <0.3'
  timezone-detect: -any
  directory: '>=1.3 && <1.4'
maintainer: timezone-detect@lfborjas.com
synopsis: Haskell bindings for the zone-detect C library; plus tz-aware utils.
changelog: |
  # Changelog for timezone-detect

  ## v0.2.0.0 (2020-08-30)

  * Depend on `base >= 4.9` to ensure `MonadFail` and `lifIO` are included.

  ## v0.2.0.0 (2020-08-30)

  * Introduces dependencies on `time`, `timezone-series` and `timezone-olson`.
  * __Breaking change__: this library is now aware of `Data.Time`, `TimezoneName` has been changed
    to `TimeZoneName` for consistency, and the `Detect` module is now a submodule of `Data.Time.LocalTime.TimeZone`.
  * The function to find a timezone name is now more general (instead of `Either`) expects an instance of `MonadFail`,
    like `parseTimeM` in `Data.Time` does, and is now named `lookupTimeZoneName` for clarity.
  * Introduces `timeAtPointToUTC` to determine the UTC instant represented by a local time in a latitude
    and longitude: uses the timezone-series and timezone-olson packages to reflect any daylight savings
    or other historical circumstances that may affect the timezone offset for the timezone in effect
    around the given geographic point.


  ## v0.1.0.0 (2020-08-29)

  * Bundles the C code for [ZoneDetect](https://github.com/BertoldVdb/ZoneDetect)
  * Exposes the `lookupTimezone` function to obtain the standardized name of a timezone, given
    a database file, latitude and longitude.
basic-deps:
  base: '>=4.9 && <4.14'
  time: '>=1.9.1 && <=1.10'
  timezone-series: '>=0.1.0 && <0.2'
  timezone-olson: '>=0.2.0 && <0.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Luis Borjas Reyes
latest: 0.2.1.0
description-type: markdown
description: |
  # TimezoneDetect

  ![build](https://github.com/lfborjas/timezone-detect/workflows/Haskell%20CI/badge.svg)


  Haskell bindings to the excellent [ZoneDetect](https://github.com/BertoldVdb/ZoneDetect) library, plus additional
  UNIX-aware facilities to determine the UTC time of a given local time in a latitude and longitude.

  ## Usage

  You'll need timezone database files to work with this library, see instructions [in the original repository](https://github.com/BertoldVdb/ZoneDetect/tree/master/database).

  Once you have those files in hand, you'll be able to get a timezone from a given latitude and longitude:

  ```haskell
  >>> lookupTimeZoneName "./test/tz_db/timezone21.bin" 40.7831 (-73.9712) :: Maybe TimeZoneName
  Just "America/New_York"
  ```

  Additionally, we now depend on the [timezone-series](https://hackage.haskell.org/package/timezone-series) and [timezone-olson](https://hackage.haskell.org/package/timezone-olson) packages to add awareness of `tz database` information.

  With that, you can look up the UTC time at a point in time and space:

  ```haskell
  >>> import Data.Time
  >>> localWinter <- parseTimeM True defaultTimeLocale "%Y-%-m-%-d %T" "2019-12-25 00:30:00"
  >>> utcTime <- timeAtPointToUTC "./test/tz_db/timezone21.bin" 40.7831 (-73.9712) localWinter
  2019-12-25 05:30:00 UTC

  >>> localSummer <- parseTimeM True defaultTimeLocale "%Y-%-m-%-d %T" "2019-07-25 00:30:00"
  >>> utcTime <- timeAtPointToUTC "./test/tz_db/timezone21.bin" 40.7831 (-73.9712) localWinter
  2019-12-25 04:30:00 UTC
  ```
license-name: GPL-2.0-only
