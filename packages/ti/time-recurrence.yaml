homepage: http://github.com/hellertime/time-recurrence
changelog-type: ''
hash: 29f5c131d42c8ac942f11e800561d19e2532ae04a1db37a890e4de987832329c
test-bench-deps:
  test-framework-hunit: ! '>=0.3.0'
  test-framework: ! '>=0.8'
  base: ! '>=4 && <5'
  time: ! '>=1.4 && <1.6'
  HUnit: ! '>=1.2 && <1.4'
  old-locale: ! '>=1.0 && <1.1'
  mtl: ! '>=2.0 && <2.3'
  data-ordlist: ! '>=0.4.5'
maintainer: hellertime@gmail.com
synopsis: Generate recurring dates.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  time: ! '>=1.4 && <1.6'
  mtl: ! '>=2.0 && <2.3'
  data-ordlist: ! '>=0.4.5'
all-versions:
- 0.1.1
- '0.2'
- 0.4.2
- 0.5.2
- '0.6'
- 0.6.1
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
author: Chris Heller
latest: 0.9.3
description-type: text
description: ! "time-recurrence is a Haskell library for working with recurring date/times.\n\nThe
  iCalendar Specifcation (RFC 5545) is used for inspiration of this\nlibrary, however
  the library does not make an effort to track the RFC\nat all times. A future Data.Time.Recurrence.RFC5545
  library would be\na useful add-on for those in need of strict RFC compliance.\n\nExamples:\n\n>
  parse822Time :: String -> UTCTime\n> parse822Time = ...\n\n> nov1996 = parse822Time
  \"Tue, 05 Nov 1996 09:00:00 -0400\"\n> mar1997 = parse822Time \"Mon, 10 Mar 1997
  09:00:00 -0400\"\n> sep1997 = parse822Time \"Tue, 02 Sep 1997 09:00:00 -0400\"\n>
  oct1997 = parse822Time \"Fri, 10 Oct 1997 00:00:00 -0400\"\n> dec1997 = parse822Time
  \"Wed, 24 Dec 1997 00:00:00 -0400\"\n> jan1998 = parse822Time \"Thu, 01 Jan 1998
  09:00:00 -0400\"\n> jan2000 = parse822Time \"Mon, 31 Jan 2000 09:00:00 -0400\"\n\nDaily
  for 10 occurrences:\n\n> take 10 $ starting sep1997 $ recur daily\n\nDaily until
  Dec. 24, 1997:\n\n> takeWhile (<= dec1997) $ starting sep1997 $ recur daily\n\nEvery
  other day - forever:\n\n> starting sep1997 $ recur daily `by` 2\n\nEvery 10 days,
  5 occurrences:\n\n> take 5 $ starting sep1997 $ recur daily `by` 10\n\nEvery day
  in January, for 3 years:\n\n> takeWhile (<= jan2000) $ starting jan1998 $\n>   recur
  yearly\n>   >==> enum (Months [January])\n>   >==> filter (WeekDays [Monday .. Sunday])\n\n>
  takeWhile (<= jan2000) $ starting jan1998 $\n>   recur daily \n>   >==> enum (Months
  [January])\n\nWeekly for 10 occurrences:\n\n> take 10 $ starting sep1997 $ recur
  weekly\n\nWeekly until Dec. 24, 1997:\n\n> takeWhile (<= dec1997) $ starting sep1997
  $\n>   recur weekly `withStartOfWeek` Sunday\n\nEvery other week - forever:\n\n>
  starting sep1997 $ recur weekly `by` 2\n\nWeekly on Tuesday and Thursday for five
  weeks:\n\n> takeUntil (<= oct1997) $ starting sep1997 $\n>   recur weekly `withStartOfWeek`
  Sunday\n>   >==> enum (WeekDaysInWeek [Tuesday, Thursday])\n\nor\n\n> take 10 $
  starting sep1997 $\n>   recur weekly `withStartOfWeek` Sunday\n>   >==> enum (WeekDaysInWeek
  [Tuesday, Thursday])\n\nEvery other week (Monday, Wednesday, Firday) until Dec.
  24, 1997:\n\n> takeWhile (<= dec1997) $ starting sep1997 $\n>   recur weekly `withStartOfWeek`
  Sunday `by` 2\n>   >==> enum (WeekDaysInWeek [Monday, Wednesday, Friday])\n\n> Every
  other week on Tuesday and Thursday, for 8 occurrences:\n\n> take 8 $ starting sep1997
  $\n>   recur weekly `by` 2 `withStartOfWeek` Sunday\n>   >==> enum (WeekDaysInWeek
  [Tuesday, Thursday])\n\nMonthly on the first Friday for 10 occurrences:\n\n> take
  10 $ starting sep1997 $\n>   recur monthly\n>   >==> enum (WeekDaysInMonth [Friday])\n>
  \  >==> select (WeekDaysInMonth [1])\n\nMonthly on the first Friday until Dec. 24,
  1997\n\n> takeWhile (<= dec1997) $ starting sep1997 $\n>   recur monthly\n>   >==>
  enum (WeekDaysInMonth [Friday])\n>   >==> select (WeekDaysInMonth [1])\n\nEvery
  other month on the first and last Sunday of the month for 10 occurrences:\n\n> take
  10 $ starting sep1997 $\n>   recur monthly\n>   >==> enum (WeekDaysInMonth [Sunday])\n>
  \  >==> select (WeekDaysInMonth [1,-1])\n\nMonthly on the second-to-last Monday
  of the month for 6 months:\n\n> take 6 $ starting sep1997 $\n>   recur monthly\n>
  \  >==> enum (WeekDaysInMonth [Monday])\n>   >==> select (WeekDaysInMonth [-2])\n\nMonthly
  on the third-to-last day of the month, forever:\n\n> starting sep1997 $\n>   recur
  monthly\n>   >==> enum (Days [-3])\n\nMonthly on the 2nd and 15th of the month for
  10 occurrences:\n\n> take 10 $ starting sep1997 $\n>   recur monthly\n>   >==> enum
  (Days [2,15])\n\nMonthly on the first and last day of the month for 10 occurrences:\n\n>
  take 10 $ starting sep1997 $\n>   recur monthly\n>   >==> enum (Days [1,-1])\n\nEvery
  18 months on the 10th thru 15th of the month for 10 occurrences:\n\n> take 10 $
  starting sep1997 $\n>   recur monthly\n>   >==> enum (Days [10 .. 15])\n\nEvery
  Tuesday, every other month:\n\n> starting sep1997 $\n>   recur monthly `by` 2\n>
  \  >==> enum (WeekDaysInMonth [Tuesday])\n\nYearly in June and July for 10 occurrences:\n\n>
  take 10 $ starting sep1997 $\n>   recur yearly\n>   >==> enum (Months [June, July])\n\nEvery
  other year on January thru March for 10 occurrences:\n\n> take 10 $ starting mar1997
  $\n>   recur yearly `by` 2\n>   >==> enum (Months [January .. March])\n>   >==>
  enum (WeekDaysInMonth [Monday .. Sunday])\n\nEvery third year on the 1st, 100th,
  and 200th day for 10 occurrences:\n\n> take 10 $ starting sep1997 $\n>   recur yearly
  `by` 3\n>   >==> enum (YearDays [1,100,200])\n\nEvery 20th Monday of the year, forever:\n\n>
  starting sep1997 $\n>   recur montly\n>   >==> enum (WeekDaysInMonth [Monday])\n>
  \  >==> select (WeekDays [20])\n\nMonday of week number 20, forever:\n\n> starting
  mar1997 $\n>   recur yearly\n>   >==> enum (Weeks [20])\n>   >==> filter (WeekDays
  [Monday])\n\nor\n\n> starting mar1997 $\n>   recur weekly\n>   >==> filter (Weeks
  [20])\n>   >==> filter (WeekDays [Monday])\n\nEvery Thursday in March, forever:\n\n>
  starting mar1997 $\n>   recur yearly\n>   >==> enum (Months [March])\n>   >==> enum
  (WeekDaysInMonth [Thursday])\n\nEvery Thursday, but only during June thru August,
  forever:\n\n> starting mar1997 $\n>   recur yearly\n>   >==> enum (Months [June
  .. August])\n>   >==> enum (WeekDaysInMonth [Thursday])\n\nFriday the 13th, Forever:\n\n>
  starting sep1997\n>   recur monthly\n>   >==> enum (Days [13])\n>   >==> filter
  (WeekDays [Friday])\n\nThe first Saturday that follows the first Sunday of the month,
  forever:\n\n> recur monthly sep1997 $\n>   enumDays [7 .. 13] >=>\n>   filterWeekDays
  [Saturday]\n\nU.S. Presidential Election Day:\nEvery 4 years, the first Tuesday
  after a Monday in November, forever:\n\n> starting nov1996 $\n>   recur yearly `by`
  4\n>   >==> enum (Months [November])\n>   >==> enum (Days [2 .. 8])\n>   >==> filter
  (WeekDays [Tuesday])\n\nThe third instance into the month of one of Tuesday, Wednesday,
  or Thursday, for the next 3 months.\n\n> take 3 $ starting sep1997 $\n>   recur
  monthly\n>   >==> enum (WeekDaysInMonth [Tuesday .. Thursday])\n>   >==> select
  (WeekDaysInMonth [3])\n\nThe second-to-last weekday of the month:\n\n> starting
  sep1997 $\n>   recur monthly\n>   >==> enum (WeekDaysInMonth [Monday .. Friday])\n>
  \  >==> select (WeekDaysInMonth [-2])\n\nEvery 3 hours from 9:00 AM to 5:00 PM on
  a specific day:\n\n> takeWhile (<= addSeconds sep1997 (8 * oneHour)) $ \n>   starting
  sep1997 $\n>   recur hourly `by` 3\n\nEvery 15 minutes for 6 occurrences:\n\n> take
  6 $ starting sep1997 $\n>   recur minutely `by` 15\n\nEvery hour and a half for
  4 occurrences:\n\n> take 4 $ starting sep1997 $ recur minutely `by` 90\n\nEvery
  20 minutes from 9:00 AM to 4:40 PM every day:\n\n> staring sep1997 $\n>   recur
  daily $\n>   >==> enum (Hours [9 .. 16])\n>   >==> enum (Minutes [0,20,40])\n\nor\n\n>
  starting sep1997 $\n>   recur minutely `by` 20\n>   >==> enum (Hours [9 .. 16])\n\nThe
  following two examples will generate different results due to changes in the start
  of the week.\n\n> take 4 $\n>   recur weekly `by` 2 `withStartOfWeek` Monday\n>
  \  >==> enum (WeekDaysInWeek [Tuesday, Sunday])\n\nvs\n\n> take 4 $\n>   recur weekly
  `by` 2 `withStartOfWeek` Sunday\n>   >==> enum (WeekDaysInWeek [Tuesday, Sunday])\n\nAn
  example where an invalid date (Feb. 30) is ignored:\n\n> take 5 $ starting jan2000
  $\n>   recur monthly\n>   >==> enum (Days [15,30])\n\nThe 15th and the 30th of the
  month, forever:\n\n> starting sep1997 $\n>   recur monthly\n>   >==> enum (Days
  [15,30])\n\nThe 15th and the 30th of the month, but only during the work week:\n\n>
  starting sep1997 $\n>   recur monthly\n>   >==> enum (Days [15,30])\n>   >==> filter
  (WeekDays [Monday .. Friday])\n"
license-name: LGPL-3.0-only
