homepage: https://github.com/adjoint-io/oblivious-transfer#readme
changelog-type: markdown
hash: d3276202e07bd1eef6c7b19d6f3b305d739ef270a081515e8e9f24360bd132ed
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  tasty-discover: -any
  protolude: ! '>=0.2'
  memory: -any
  cryptonite: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  oblivious-transfer: -any
  random: -any
  tasty: -any
  QuickCheck: -any
maintainer: Adjoint Inc (info@adjoint.io)
synopsis: An implementation of the Oblivious Transfer protocol in Haskell
changelog: ! '# Changelog for oblivious-transfer


  ## Unreleased changes

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  protolude: ! '>=0.2'
  memory: -any
  cryptonite: -any
  random: -any
all-versions:
- 0.1.0
author: ''
latest: 0.1.0
description-type: markdown
description: ! "<p align=\"center\">\n  <a href=\"http://www.adjoint.io\"><img src=\"https://www.adjoint.io/assets/img/adjoint-logo@2x.png\"
  width=\"250\"/></a>\n</p>\n\n[![CircleCI](https://circleci.com/gh/adjoint-io/oblivious-transfer.svg?style=svg)](https://circleci.com/gh/adjoint-io/oblivious-transfer)\n\nOblivious
  Transfer (OT) is a cryptographic primitive in which a sender transfers some of potentially
  many pieces of information to a receiver.\nThe sender doesn't know which pieces
  of information have been transferred.\n\n1-out-of-2 OT\n=============\n\nOblivious
  transfer is central to many of the constructions for secure multiparty computation.\nIn
  its most basic form, the sender has two secret messages as inputs, _m<sub>0</sub>_
  and _m<sub>1</sub>_; the receiver has a choice bit _c_ as input.\nAt the end of
  the 1-out-of-2 OT protocol, the receiver should only learn message _M<sub>c</sub>_,
  while the sender should not\nlearn the value of the receiver's input _c_.\n\nThe
  protocol is defined for elliptic curves over finite fields _E(F<sub>q</sub>)_. The
  set of points _E(F<sub>q</sub>)_ is a finite abelian group.\nIt works as follows:\n\n1.
  Alice samples a random _a_ and computes _A = aG_. Sends _A_ to Bob\n2. Bob has a
  choice _c_. He samples a random _b_.\n    - If _c_ is 0, then he computes B = bG.\n
  \   - If _c_ is 1, then he computes B = A + bG.\n\n  Sends B to Alice\n\n3. Alice
  derives two keys:\n    - _K<sub>0</sub> = aB_\n    - _K<sub>1</sub> = a(B - A)_\n\n
  \ It's easy to check that Bob can derive the key _K<sub>c</sub>_ corresponding to
  his choice bit, but cannot compute the other one.\n\n1-out-of-N OT\n=============\n\nThe
  1-out-of-N oblivious transfer protocol is a natural generalization of the 1-out-of-2
  OT protocol,\nin which the sender has a vector of messages (_M<sub>0</sub>, ...,
  M<sub>n-1</sub>_). The receiver only has a choice _c_.\n\nWe implement a protocol
  for *random* OT, where the sender, Alice, outputs _n_ random keys and the receiver,
  Bob, only learns one of them.\nIt consists on three parts:\n\n**Setup**\n\nAlice
  samples _a ∈ Z<sub>p</sub>_ and computes _A = aG_ and _T = aA_, where _G_ and _p_
  are the generator and the order of the curve, respectively.\nShe sends _A_ to Bob,
  who aborts if _A_ is not a valid point in the curve.\n\n**Choose**\n\nBob takes
  his choice _c ∈ Z<sub>n</sub>_, samples _b ∈ Z<sub>p</sub>_ and replies _R = cA
  + bG_. Alice aborts if _R_ is not a valid point in the curve.\n\n**Key derivation**\n\n1.
  For all _e ∈ Z<sub>n</sub>_, Alice computes _k<sub>e</sub> = aR - eT_. She now has
  a vector of keys _(k<sub>0</sub>, ..., k<sub>n-1</sub>)_.\n\n2. Bob computes _k<sub>R</sub>
  = bA_.\n\nWe can see that the key _k<sub>e</sub> = aR - eT = abG + (c - e)T_. If
  _e = c_, then _k<sub>c</sub> = abG = bA = k<sub>R</sub>_.\nTherefore, _k<sub>R</sub>
  = k<sub>c</sub>_ if both parties are honest.\n\n```haskell\ntestOT :: ECC.Curve
  -> Integer -> IO Bool\ntestOT curve n = do\n\n  -- Alice sets up the procotol\n
  \ (sPrivKey, sPubKey, t) <- OT.setup curve\n\n  -- Bob picks a choice bit 'c'\n
  \ (rPrivKey, response, c) <- OT.choose curve n sPubKey\n\n  -- Alice computes a
  set of n keys\n  let senderKeys = OT.deriveSenderKeys curve n sPrivKey response
  t\n\n  -- Bob only gets to know one out of n keys. Alice doesn't know which one\n
  \ let receiverKey = OT.deriveReceiverKey curve rPrivKey sPubKey\n\n  pure $ receiverKey
  == (senderKeys !! fromInteger c)\n```\nk-out-of-N OT\n=============\n\n1-out-of-N
  oblivious transfer can be generalised one step further into\nk-out-of-N. This is
  very similar in structure to the methods above comprising\nthe same 3 parts:\n\n**Setup**\nAs
  above, Alice samples _a ∈ Z<sub>p</sub>_ and computes _A = aG_ and _T = aA_, where
  _G_ and _p_ are the generator and the order of the curve, respectively.\nShe sends
  _A_ to Bob, who aborts if _A_ is not a valid point in the curve.\n\n**Choose**\nBob
  takes his choices _c<sup>i</sup> ∈ Z<sub>n</sub>_, samples _b<sup>i</sup> ∈ Z<sub>p</sub>_
  and replies _R<sup>i</sup> = c<sup>i</sup>A + b<sup>i</sup>G_. Alice aborts if _R<sup>i</sup>_
  is not a valid point in the curve.\n\n**Key derivation**\n\n1. For all _e<sup>i</sup>
  ∈ Z<sub>n</sub>_, Alice computes _k<sub>e</sub><sup>i</sup> = aR<sup>i</sup> - e<sup>i</sup>T_.
  She now has a vector of vectors of keys _(k<sub>0</sub><sup>i</sup>, ..., k<sub>n-1</sub><sup>i</sup>)_.\n\n2.
  Bob computes _k<sub>R</sub><sup>i</sup> = b<sup>i</sup>A_.\n\nWe can see that the
  key _k<sub>e</sub><sup>i</sup> = aR<sup>i</sup> - e<sup>i</sup>T = ab<sup>i</sup>G
  + (c<sup>i</sup> - e<sup>i</sup>)T_. If _e = c_, then _k<sub>c</sub><sup>i</sup>
  = ab<sup>i</sup>G = b<sup>i</sup>A = k<sub>R</sub><sup>i</sup>_.\nTherefore, _k<sub>R</sub><sup>i</sup>
  = k<sub>c</sub><sup>i</sup>_ if both parties are honest.\n\n**References**:\n\n1.
  \ Chou, T. and Orlandi, C. \"The Simplest Protocol for Oblivious Transfer\" Technische
  Universiteit Eindhoven and Aarhus University\n\n\n**Notation**:\n\n_k_: Lower-case
  letters are scalars. <br />\n_P_: Upper-case letters are points in an elliptic curve.
  <br />\n_kP_: Multiplication of a point P with a scalar k over an elliptic curve
  defined over a finite field modulo a prime number.\n\nLicense\n-------\n\n```\nCopyright
  2018 Adjoint Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou
  may not use this file except in compliance with the License.\nYou may obtain a copy
  of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required
  by applicable law or agreed to in writing, software\ndistributed under the License
  is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  either express or implied.\nSee the License for the specific language governing
  permissions and\nlimitations under the License.\n```\n"
license-name: LicenseRef-Apache
