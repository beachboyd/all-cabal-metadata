homepage: https://github.com/dreixel/generic-deriving
changelog-type: markdown
hash: df0922a14591489c67d6938fec5d6dc4aebb3f50b1c25cf940016893af07223f
test-bench-deps:
  base: ! '>=4.3 && <5'
  hspec: ! '>=2 && <3'
  generic-deriving: -any
  template-haskell: ! '>=2.4 && <2.15'
maintainer: generics@haskell.org
synopsis: Generic programming library for generalised deriving.
changelog: ! "# 1.12.2 [2018.06.28]\n* Backport the `Generic(1)` instances for `Data.Ord.Down`,
  introduced in\n  `base-4.12`. Add `GEq`, `GShow`, `GSemigroup`, `GMonoid`, `GFunctor`,\n
  \ `GFoldable`, `GTraversable`, and `GCopoint` instances for `Down`.\n* Refactor
  internals using `th-abstraction`.\n* Adapt to `Maybe` moving to `GHC.Maybe` in GHC
  8.6.\n\n# 1.12.1 [2018.01.11]\n* Remove a test that won't work on GHC 8.4.\n\n#
  1.12 [2017.12.07]\n* Adapt to the `EmptyDataDeriving` proposal (introduced in GHC
  8.4):\n  * `Generics.Deriving.TH` now derives `to(1)` and `from(1)` implementations\n
  \   for empty data types that are strict in the argument.\n  * Introduce an `EmptyCaseOptions`
  field to `Options` in\n    `Generics.Deriving.TH`, which controls whether generated
  `from(1)`/`to(1)`\n    implementations for empty data types should use the `EmptyCase`
  extension\n    or not (as is the case in GHC 8.4).\n  * Add `mkFrom0Options`, `mkFrom1Options`,
  `mkTo0Options`, and `mkTo1Options`\n    functions to `Generics.Deriving.TH`, which
  take `EmptyCaseOptions` as\n    arguments.\n  * The backported instances for `V1`
  are now maximally lazy, as per\n    `EmptyDataDeriving`. (Previously, some instances
  would unnecessarily force\n    their argument, such as the `Eq` and `Ord` instances.)\n
  \ * Add instances for `V1` in `Generics.Deriving.Copoint`, `.Eq`, `.Foldable`,\n
  \   `.Functor`, `.Show`, and `.Traversable`.\n* Remove the bitrotting `simplInstance`
  function from `Generics.Deriving.TH`.\n\n# 1.11.2 [2017.04.10]\n* Add `GEq`, `GShow`,
  `GEnum`, and `GIx` instances for the new data types\n  in `Foreign.C.Types` (`CBool`)
  and `System.Posix.Types` (`CBlkSize`,\n  `CBlkCnt`, `CClockId`, `CFsBlkCnt`, `CFsFilCnt`,
  `CId`, `CKey`, and `CTimer`)\n  introduced in `base-4.10.0.0`\n\n# 1.11.1 [2016.09.10]\n*
  Fix Template Haskell regression involving data families\n* Convert examples to test
  suite\n* Backport missing `Data` and `Typeable` instances for `Rec1`, `M1`, `(:*:)`,\n
  \ `(:+:)`, and `(:.:)`\n\n# 1.11\n* The behavior of functions in `Generics.Deriving.TH`
  have changed with respect\n  to when type synonyms are generated for `Rep(1)` definitions.
  In particular:\n\n  * By default, `deriveRepresentable(1)` will no longer define
  its `Rep(1)`\n    type family instance in terms of the type synonym that has to
  be generated\n    with `deriveRep(1)`. Similarly, `deriveAll(1)` and `deriveAll0And1`
  will no\n    longer generate a type synonym. Instead, they will generate `Generic(1)`\n
  \   instances that directly define the `Rep(1)` instance inline. If you wish\n    to
  revert to the old behavior, you will need to use the variants of those\n    functions
  suffixed with `-Options`.\n  * New functions `makeRep0Inline` and `makeRep1Inline`
  have been added which,\n    for most purposes, should replace uses of `makeRep0`/`makeRep0FromType`\n
  \   and `makeRep1`/`makeRep1FromType` (but see the next bullet point for a\n    caveat).\n
  \ * The use of `deriveRep(1)`, `makeRep0`/`makeRep0FromType`, and\n    `makeRep1`/`makeRep1FromType`
  are now discouraged, but those functions are\n    still available. The reason is
  that on GHC 7.0/7.2/7.4, it is impossible to use\n    `makeRep0Inline`/`makeRep1Inline`
  due to a GHC bug. Therefore, you must use\n    `makeRep0`/`makeRep1` and `deriveRep(1)`
  on GHC 7.0/7.2/7.4 out of necessity.\n\n  These changes make dealing with `Generic`
  instances that involve `PolyKinds`\n  and `TypeInType` much easier.\n* All functions
  suffixed in `-WithKindSigs` in `Generics.Deriving.TH` have been\n  removed in favor
  of a more sensible `-Options` suffixing scheme. The ability to\n  toggle whether
  explicit kind signatures are used on type variable binders has\n  been folded into
  `KindSigOptions`, which is an explicit argument to\n  `deriveRep0Options`/`deriveRep1Options`
  and also a field in the more general\n  'Options' data type.\n* Furthermore, the
  behavior of derived instances' kind signatures has changed.\n  By default, the TH
  code will now _always_ use explicit kind signatures\n  whenever possible, regardless
  of whether you're working with plain data types\n  or data family instances. This
  makes working with `TypeInType` less\n  surprising, but at the cost of making it
  slightly more awkward to work with\n  derived `Generic1` instances that constrain
  kinds to `*` by means of `(:.:)`.\n* Since `Generic1` is polykinded on GHC 8.2 and
  later, the functions in\n  `Generics.Deriving.TH` will no longer unify the kind
  of the last type\n  parameter to be `*`.\n* Fix a bug in which `makeRep` (and similarly
  named functions) would not check\n  whether the argument type can actually have
  a well kinded `Generic(1)`\n  instance.\n* Backport missing `Foldable` and `Traversable`
  instances for `Rec1`\n\n# 1.10.7\n* Renamed internal modules to avoid using apostrophes
  (averting this bug:\n  https://github.com/haskell/cabal/issues/3631)\n\n# 1.10.6\n*
  A new `base-4-9` Cabal flag was added to more easily facilitate installing\n  `generic-deriving`
  with manually installed versions of `template-haskell`.\n\n# 1.10.5\n* Apply an
  optimization to generated `to(1)`/`from(1)` instances that factors out\n  common
  occurrences of `M1`. See\n  http://git.haskell.org/ghc.git/commit/9649fc0ae45e006c2ed54cc5ea2414158949fadb\n*
  Export internal typeclass names\n* Fix Haddock issues with GHC 7.8\n\n# 1.10.4.1\n*
  Fix Haddock parsing issue on GHC 8.0\n\n# 1.10.4\n* Backported `MonadPlus` and `MonadZip`
  instances for `U1`, and made the\n  `Functor`, `Foldable`, `Traversable`, `Alternative`,
  and `Monad` instances\n  for `U1` lazier to correspond with `base-4.9`\n\n# 1.10.3\n*
  Backported `Enum`, `Bounded`, `Ix`, `Functor`, `Applicative`, `Monad`,\n `MonadFix`,
  `MonadPlus`, `MonadZip`, `Foldable`, `Traversable`, and\n `Data` instances (introduced
  in `base-4.9`) for datatypes in the\n `Generics.Deriving.Base` module\n\n# 1.10.2\n*
  Fix TH regression on GHC 7.0\n\n# 1.10.1\n* Added `Generics.Deriving.Semigroup`\n*
  Added `GMonoid` instance for `Data.Monoid.Alt`\n* Fixed a bug in the `GEnum` instances
  for unsigned `Integral` types\n* Added `Safe`/`Trustworthy` pragmas\n* Made instances
  polykinded where possible\n\n# 1.10.0\n* On GHC 8.0 and up, `Generics.Deriving.TH`
  uses the new type literal-based\n  machinery\n* Rewrote the Template Haskell code
  to be robust. Among other things, this fixes\n  a bug with deriving Generic1 instances
  on GHC 7.8, and makes it easier to\n  derive Generic1 instances for datatypes that
  utilize GHC 8.0's `-XTypeInType`\n  extension.\n* Added `deriveAll0` and `makeRep0`
  for symmetry with `deriveAll1` and\n  `makeRep1`\n* Added`makeRep0FromType` and
  `makeRep1FromType` to make it easier to pass\n  in the type instance (instead of
  having to pass each individual type\n  variable, which can be error-prone)\n* Added
  functions with the suffix `-WithKindSigs` to allow generating type\n  synonyms with
  explicit kind signatures in the presence of kind-polymorphic\n  type variables.
  This is necessary for some datatypes that use\n  `-XTypeInType` to have derived
  `Generic(1)` instances, but is not turned on\n  by default since the TH kind inference
  is not perfect and would cause\n  otherwise valid code to be rejected. Use only
  if you know what you are doing.\n* Fixed bug where a datatype with a single, nullary
  constructor would generate\n  incorrect `Generic` instances\n* More sensible `GEnum`
  instances for fixed-size integral types\n* Added `GCopoint`, `GEnum`, `GEq`, `GFoldable`,
  `GFunctor`, `GMonoid`,\n  `GShow`, and `GTraversable` instances for datatypes introduced
  in GHC 8.0\n* Backported `Generic(1)` instances added in GHC 8.0. Specifically,
  `Generic`\n  instances for `Complex` (`base-4.4` and later) `ExitCode`, and `Version`;
  and\n  `Generic1` instances for `Complex` (`base-4.4` and later) and `Proxy`\n  (`base-4.7`
  and later). Added `GEnum`, `GEq`, `GFoldable`, `GFunctor`, `GIx`,\n  `GShow`, and
  `GTraversable` instances for these datatypes where appropriate.\n\n# 1.9.0\n* Allow
  deriving of Generic1 using Template Haskell\n* Allow deriving of Generic(1) for
  data families\n* Allow deriving of Generic(1) for constructor-less plain datatypes
  (but not\n  data families, due to technical restrictions)\n* Support for unboxed
  representation types on GHC 7.11+\n* More `GCopoint`, `GEnum`, `GEq`, `GFoldable`,
  `GFunctor`, `GIx`, `GMonoid`,\n  `GShow`, and `GTraversable` instances\n* The field
  accessors for the `(:+:)` type in `Generics.Deriving.Base` have\n  been removed
  to be consistent with `GHC.Generics`\n* Ensure that TH generates definitions for
  isNewtype and packageName, if a\n  recent-enough version of GHC is used\n* Ensure
  that TH-generated names are unique for a given data type's module and\n  package
  (similar in spirit to Trac #10487)\n* Allow building on stage-1 compilers\n"
basic-deps:
  base: ! '>=4.9 && <5'
  th-abstraction: ! '>=0.2.7 && <0.3'
  containers: ! '>=0.1 && <0.7'
  ghc-prim: <1
  template-haskell: ! '>=2.4 && <2.15'
all-versions:
- '0.3'
- 0.3.1
- '0.4'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.2.1
- 1.2.2
- 1.3.0
- 1.3.1
- 1.4.0
- 1.5.0
- '1.6'
- 1.6.1
- 1.6.2
- 1.6.3
- 1.7.0
- 1.8.0
- 1.9.0
- 1.10.0
- 1.10.2
- 1.10.3
- 1.10.4
- 1.10.4.1
- 1.10.5
- 1.10.6
- 1.10.7
- '1.11'
- 1.11.1
- 1.11.2
- '1.12'
- 1.12.1
- 1.12.2
author: José Pedro Magalhães
latest: 1.12.2
description-type: markdown
description: ! "## `generic-deriving`: Generic programming library for generalised
  deriving\n[![Hackage](https://img.shields.io/hackage/v/generic-deriving.svg)][Hackage:
  generic-deriving]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/generic-deriving.svg)](http://packdeps.haskellers.com/reverse/generic-deriving)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Build](https://img.shields.io/travis/dreixel/generic-deriving.svg)](https://travis-ci.org/dreixel/generic-deriving)\n\n[Hackage:
  generic-deriving]:\n  http://hackage.haskell.org/package/generic-deriving\n  \"generic-deriving
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\nThis package provides functionality for
  generalising the deriving mechanism\nin Haskell to arbitrary classes. It was first
  described in the paper:\n\n* [A generic deriving mechanism for Haskell](http://dreixel.net/research/pdf/gdmh.pdf).\n
  \ Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. Haskell'10.\n\nThe
  current implementation integrates with the new GHC Generics. See\nhttp://www.haskell.org/haskellwiki/GHC.Generics
  for more information.\nTemplate Haskell code is provided for supporting older GHCs.\n"
license-name: BSD-3-Clause
