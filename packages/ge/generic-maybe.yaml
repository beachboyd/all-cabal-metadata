homepage: https://github.com/jfischoff/generic-maybe
changelog-type: ''
hash: fd9ea5f5cbaf095a3fdd1dcb333af06eaf85339a821b713d77cc04f5bcf054e3
test-bench-deps:
  hlint: ! '>=1.7'
  bytestring: -any
  split: -any
  base: -any
  unordered-containers: -any
  text: -any
  generic-deriving: -any
  filepath: -any
  criterion: -any
  doctest: ! '>=0.9.1'
  semigroups: ! '>=0.9'
  containers: -any
  simple-reflect: ! '>=0.3.1'
  mtl: -any
  nats: -any
  parallel: -any
  deepseq: -any
  vector: -any
  directory: ! '>=1.0'
maintainer: jonathangfischoff@gmail.com
synopsis: A generic version of Data.Maybe
changelog: ''
basic-deps:
  base: ! '>=4.5 && <4.8'
  ghc-prim: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
author: Jonathan Fischoff
latest: 0.3.0.4
description-type: haddock
description: ! 'This module is a drop in replacement for ''Data.Maybe''. It generalizes

  the functions to any types that share the same \"sum of products\" view

  of ''Maybe''.


  To use the module for your type, enable GHC''s DeriveGeneric extension and

  derive a Generic instance for your type.


  > import GHC.Generics

  >

  > data Result a = Success a | Fail

  >    deriving (Show, Generic)


  After which you can use the functions, like your type was ''Data.Maybe.Maybe''


  >> fromMaybe ''a'' Fail

  >''a''


  >> fromMaybe ''a'' $ Success ''b''

  >''b'''
license-name: BSD-3-Clause
