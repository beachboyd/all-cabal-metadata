homepage: https://github.com/indicatrix/hs-geojson
changelog-type: markdown
hash: 4eceb16238da41476de07da8353d7d0b775727685d8f55f52bf2f6fedebbfdcd
test-bench-deps:
  hlint: -any
  bytestring: ! '>=0.10'
  base: ==4.*
  text: ! '>=1.2'
  tasty-hspec: -any
  containers: ! '>=0.5.10.1'
  geojson: -any
  tasty-quickcheck: -any
  tasty: -any
  validation: ! '>=1'
  aeson: ! '>=0.8'
maintainer: Andrew Newman
synopsis: A thin GeoJSON Layer above the aeson library
changelog: ! "# 3.0.x\n\n## 2.0.0 -> 3.0.2\n\n- Switch to using `Data.Sequence` instead
  of `Data.Vector.Storable`. \n\n# 2.0.x\n\n## 1.3.3 -> 2.0.0\n\n- Switch to using
  `Data.Vector.Storable` instead of lists, \n- `GeoPositionWithoutCRS` is now a sum
  type (Empty, XY, XYZ, or XYZM).\n- New public methods on LineString and LinearRing\n
  \   - toVector, combineVector, fromVector\n    - map, foldr, foldMap (as they are
  nolonger Foldable, Functor, or Traversable)\n\n# 1.3.x\n\n## 1.3.1 -> 1.3.3\n\n-
  Fixed Validation dependency.\n\n## 1.2.0 -> 1.3.0\n\n-   `MultiPolygon`, `MultiPoint`,
  `MultiLine` were all corrected as they weren't compliant with the spec (See [here]
  (https://github.com/domdere/hs-geojson/issues/9) for reference).\n\n# 1.2.x\n\n##
  1.1.1 -> 1.2.0\n\n-   Added the `LineString` data type for use with `GeoLine`, now
  a `GeoLine` with less than 2 positions is a type error or a parse error, as it should
  be according to the [spec] (http://geojson.org/geojson-spec.html#linestring \"LineString
  in the GeoJSON v1.0 spec\")\n\n# 1.1.x\n\n## 1.1.0 -> 1.1.1\n\n-   Just some version
  bumps, the `lens` version bounds for the `transformer` library (`<0.4`) were causing
  some conflicts.\n\n## 1.0.1 -> 1.1.0\n\n-   Corrected an issue with the `Polygon`
  ([here] (https://github.com/domdere/hs-geojson/issues/2 \"Polygon Issue\"))\n    -
  \  Introduced the `LinearRing` datatype to handle the LinearRings described in the
  spec.\n        -   Valid JSON for a LinearRing contains at least 4 points (this
  is checked, parsing fails if the list is too short) and the last element should
  match the first, but this isnt checked due to performance issues with the current
  implementation (though its a resolvable issue)).\n        -   A `LinearRing` can
  be converted to a List with `fromLinearRing` or you can just fold/traverse over
  it.\n        -   Creating a `LinearRing` can be done with one of these:\n            -
  \  `makeLinearRing :: a -> a -> a -> [a] -> LinearRing a`\n            -   `fromList`
  and `fromListWithEqCheck`, which will return a `Validate` result (see the type sigs)
  and [**Data.Validation**] (https://hackage.haskell.org/package/validation \"Data.Validation\")\n\n#
  1.0.x\n\n## 0.0.2 -> 1.0.0\n\n-   Migrated from `json` to `aeson`, all `JSON` instances
  were removed and replaced with `ToJSON` and `FromJSON` instances\n-   `GeoFeature`
  and `GeoFeatureCollection` are now of kind `* -> *`, parameterised on the Property
  type, `GeoFeature a` and `GeoFeatureCollection a` are in `ToJSON` and/or `FromJSON`
  if `a` is in `ToJSON` and/or `FromJSON` respectively.\n-   Lenses and prisms have
  been generated for each of the types.\n-   Orphan Instances were removed.  Orphan
  Instances are bad.  Breaking type class coherency had some rather annoying consequences,
  you only need to import `Data.Geospatial` now and the `ToJSON` and `FromJSON` instances
  will come with it.  I wanted to split up the files and thought seperating the instances
  from the declarations was a good idea but it wasnt.  Instead I split the data types
  into seperate modules and kept the instances with their respective data type declarations.\n\n"
basic-deps:
  base: <5 && >=4
  text: ! '>=1.2'
  semigroups: ! '>=0.16'
  containers: ! '>=0.5.10.1'
  lens: ! '>=4.11'
  transformers: ! '>=0.3'
  deepseq: ! '>=1.4'
  scientific: ! '>=0.2.0'
  validation: ! '>=1'
  aeson: ! '>=0.8'
all-versions:
- '0.0.1'
- '0.0.2'
- '1.0.0'
- '1.0.1'
- '1.1.0'
- '1.1.1'
- '1.2.0'
- '1.3.0'
- '1.3.1'
- '1.3.2'
- '1.3.3'
- '2.0.0'
- '3.0.0'
- '3.0.1'
- '3.0.2'
author: Dom De Re
latest: '3.0.2'
description-type: markdown
description: ! "# geojson [![Build Status](https://travis-ci.org/indicatrix/hs-geojson.png?branch=master)](https://travis-ci.org/indicatrix/hs-geojson)
  [Hackage](https://hackage.haskell.org/package/geojson)\n\nA thin GeoJSON Layer above
  the `aeson` library\n\n## Building the project\n\nInstall the dependencies with:\n\n
  \   cabal install --only-dependencies\n\nOptionally add `--enable-tests` if you
  intend to run the unit tests\n\nThe project must be \"configured\" at least once
  everytime `geojson.cabal` changes, this can be done with:\n\n    cabal configure\n\nIf
  you wish to run the unit tests you will have to run:\n\n    cabal configure --enable-tests\n\nThen
  finally build it with:\n\n    cabal build\n\nSee `cabal build --help` for more build
  options.\n\n## Running Unit Tests\n\n**After** running `cabal build`, you can run
  the unit tests with the command:\n\n    cabal test\n\n## Development: Cabal Dependency
  Hell?\n\nCabal's great, but when you are developing a few different projects with
  their own dependency chains, sometimes installing all your libraries to the same
  place causes problems,\n\nConsider trying [`cabal-dev`] [cabal-dev]. In terms of
  using it, all thats required is replacing `cabal` with `cabal-dev` in all the above
  command lines.\n\nIt will download and install all the dependencies for your project
  and install them in a `cabal-dev/` directory in your project directory, and they
  will only be used for this project.\n\nThose with newer versions of `cabal` (`>=
  1.18` I think) can skip `cabal-dev` and instead run `cabal sandbox init`, and just
  start runnign the above instructions\nas is from `cabal install --only-dependencies`\n\n[cabal-dev]:
  https://github.com/creswick/cabal-dev \"creswick/cabal-dev on GitHub.com\"\n\n"
license-name: BSD3
