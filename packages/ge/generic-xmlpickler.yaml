homepage: http://github.com/silkapp/generic-xmlpickler
changelog-type: markdown
hash: 18b452afd4c01dc7c0e46271fcb2c467976c63fdaa7b2d52d8be2c422b7decc2
test-bench-deps:
  generic-xmlpickler: -any
  tasty-th: ==0.1.*
  base: ! '>=4.5 && <5'
  hxt-pickle-utils: ==0.1.*
  hxt: ! '>=9.2 && <9.4'
  tasty-hunit: ! '>=0.9 && <0.11'
  tasty: ! '>=0.10 && <1.2'
maintainer: code@silk.co
synopsis: Generic generation of HXT XmlPickler instances using GHC Generics.
changelog: ! '#### 0.1.0.4


  * Fix build on GHC 8.


  #### 0.1.0.3


  * Allow `generic-deriving 1.8.*`.


  #### 0.1.0.2


  * Fix build on GHC-7.4


  #### 0.1.0.1


  * Add test suite and fix bugs that produced empty tag names.


  ## 0.1.0.0


  * Initial release, ported from regular-xmlpickler.

'
basic-deps:
  base: ! '>=4.5 && <4.12'
  text: -any
  generic-deriving: ! '>=1.6 && <1.13'
  hxt: ! '>=9.2 && <9.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
author: Silk
latest: 0.1.0.5
description-type: markdown
description: ! "# generic-xmlpickler\n[![Build Status](https://travis-ci.org/silkapp/generic-xmlpickler.svg?branch=master)](https://travis-ci.org/silkapp/generic-xmlpickler)\n\nThis
  package allows you to automatically derive\n[hxt](http://hackage.haskell.org/package/hxt)
  picklers (conversions to\nand from xml) using GHC Generics. It has been ported from\n[regular-xmlpickler](http://hackage.haskell.org/package/regular-xmlpickler)\n\nA
  simple example:\n\n```Haskell\n{-# LANGUAGE DeriveGeneric #-}\n\nimport GHC.Generics\nimport
  Data.Maybe (listToMaybe)\nimport Generics.XmlPickler (gxpickle)\nimport Text.XML.HXT.Arrow.Pickle
  (XmlPickler (..), showPickled, unpickleDoc)\nimport Text.XML.HXT.Parser.XmlParsec
  (xread)\n\ndata User = User\n  { name  :: String\n  , admin :: Bool\n  } deriving
  (Show, Generic)\n\ninstance XmlPickler User where\n  xpickle = gxpickle\n\n\nuserString
  :: String\nuserString = showPickled [] (User \"Simon\" True)\n-- = \"<user><name>Simon</name><admin>true</admin></user>\"\n\nuser
  :: Maybe User\nuser = unpickleDoc xpickle =<< listToMaybe (xread \"<user><name>Simon</name><admin>true</admin></user>\")\n--
  = Just (User {name = \"Simon\", admin = True})\n```\n"
license-name: BSD-3-Clause
