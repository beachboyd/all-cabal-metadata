homepage: http://github.com/silkapp/generic-xmlpickler
changelog-type: markdown
hash: d473e7b35714fb48e3c6a3dc33dae3d0b7a3a360893a0d3735302b2b759a3b0e
test-bench-deps:
  generic-xmlpickler: -any
  tasty-th: ==0.1.*
  base: ! '>=4.5 && <5'
  hxt: ! '>=9.2 && <9.4'
  tasty-hunit: ! '>=0.9 && <0.11'
  tasty: ! '>=0.10 && <1.3'
maintainer: code@silk.co
synopsis: Generic generation of HXT XmlPickler instances using GHC Generics
changelog: |
  #### 0.1.0.6

  * Support up to GHC 8.8
  * Drop test dependency on `hxt-pickle-utils`

  #### 0.1.0.4

  * Fix build on GHC 8.

  #### 0.1.0.3

  * Allow `generic-deriving 1.8.*`.

  #### 0.1.0.2

  * Fix build on GHC-7.4

  #### 0.1.0.1

  * Add test suite and fix bugs that produced empty tag names.

  ## 0.1.0.0

  * Initial release, ported from regular-xmlpickler.
basic-deps:
  base: ! '>=4.5 && <4.14'
  text: -any
  generic-deriving: ! '>=1.6 && <1.14'
  hxt: ! '>=9.2 && <9.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
author: Silk
latest: 0.1.0.6
description-type: markdown
description: |
  # generic-xmlpickler
  [![Build Status](https://travis-ci.org/silkapp/generic-xmlpickler.svg?branch=master)](https://travis-ci.org/silkapp/generic-xmlpickler)

  This package allows you to automatically derive
  [hxt](http://hackage.haskell.org/package/hxt) picklers (conversions to
  and from xml) using GHC Generics. It has been ported from
  [regular-xmlpickler](http://hackage.haskell.org/package/regular-xmlpickler)

  A simple example:

  ```Haskell
  {-# LANGUAGE DeriveGeneric #-}

  import GHC.Generics
  import Data.Maybe (listToMaybe)
  import Generics.XmlPickler (gxpickle)
  import Text.XML.HXT.Arrow.Pickle (XmlPickler (..), showPickled, unpickleDoc)
  import Text.XML.HXT.Parser.XmlParsec (xread)

  data User = User
    { name  :: String
    , admin :: Bool
    } deriving (Show, Generic)

  instance XmlPickler User where
    xpickle = gxpickle


  userString :: String
  userString = showPickled [] (User "Simon" True)
  -- = "<user><name>Simon</name><admin>true</admin></user>"

  user :: Maybe User
  user = unpickleDoc xpickle =<< listToMaybe (xread "<user><name>Simon</name><admin>true</admin></user>")
  -- = Just (User {name = "Simon", admin = True})
  ```
license-name: BSD-3-Clause
