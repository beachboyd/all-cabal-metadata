homepage: https://github.com/kcsongor/generic-lens
changelog-type: markdown
hash: 97c1ed465ecc538149351727de3309fac1f548f3c2f364955121ea59bab936af
test-bench-deps:
  base: ! '>=4.9 && <5'
  criterion: -any
  doctest: -any
  lens: -any
  inspection-testing: ! '>=0.1'
  generic-lens: -any
  deepseq: -any
  QuickCheck: -any
maintainer: kiss.csongor.kiss@gmail.com
synopsis: Generic data-structure operations exposed as lenses.
changelog: ! "## 0.5.0.0\n\n- Lenses and prisms are now type-changing.\n- More informative
  error messages\n- More readable type signatures in type errors and when using `:t`\n-
  Use `doctest`\n- Include examples in Haddock\n\n### Breaking API changes\n\n- The
  type parameters of the classes have been changed to accommodate\n  the type-changing
  update:\n  \n  `class HasField name a s` -> `class HasField name s t a b` etc.\n
  \ \n  Accordingly, `field :: Lens' s a` -> `field :: Lens s t a b`\n"
basic-deps:
  base: ! '>=4.9 && <=5.0'
  tagged: ! '>=0.8 && <=0.9'
  profunctors: ! '>=5.0 && <=6.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
author: Csongor Kiss
latest: '0.5.0.0'
description-type: markdown
description: ! "# generic-lens\n\n[![Build Status](https://travis-ci.org/kcsongor/generic-lens.svg?branch=master)](https://travis-ci.org/kcsongor/generic-lens)\n[![Hackage](https://img.shields.io/hackage/v/generic-lens.svg)](https://hackage.haskell.org/package/generic-lens)\n\nGenerically
  derive lenses and prisms for data types.\n\nAvailable on [Hackage](https://hackage.haskell.org/package/generic-lens)\n\nThis
  package uses the GHC 8 `Generic` representation to derive various operations\non
  data structures with lens interfaces, including structural subtype\nrelationships
  between records and positional indexing into arbitrary product\ntypes.\n\nThis is
  made possible by GHC 8's new Generics API, which provides metadata\nat the type-level
  (previously only value-level metadata was available).\n\nExamples can be found in
  the `examples` folder. This library makes heavy use of\n[Visible Type Applications](https://ghc.haskell.org/trac/ghc/wiki/TypeApplication).\n\n##
  Lenses\n\n### Record fields\n\nRecord fields can be accessed by their label:\n\n```haskell\ndata
  Person = Person { name :: String, age :: Int } deriving (Generic, Show)\n\nsally
  :: Person\nsally = Person \"Sally\" 25\n```\n\n```haskell\n>>> getField @\"age\"
  sally\n25\n\n>>> setField @\"age\" 26 sally\nPerson {name = \"Sally\", age = 26}\n\n>>>
  sally ^. field @\"name\"\n\"Sally\"\n\n>>> sally & field @\"name\" .~ \"Tamas\"\nPerson
  {name = \"Tamas\", age = 25}\n\n>>> sally ^. field @\"pet\"\nerror:\n  • The type
  Person does not contain a field named \"pet\"\n```\n\nIf the accessed field is a
  type parameter that appears uniquely in the type,\nthen its type can be changed:\n\n```haskell\ndata
  T a b c d = T\n  { paramA :: a\n  , paramB :: b\n  , paramC :: c\n  , paramD ::
  d\n  }\n  deriving (Generic, Show)\n\n>>> t = T \"a\" (10 :: Int) 'c' False\n>>>
  t & field @\"paramA\" .~ 'a' & field @\"paramB\" .~ False\nT {paramA = 'a', paramB
  = False, paramC = 'c', paramD = False}\n```\n\n### Positional fields\n\nFields can
  be accessed by their position in the data structure (index starting at 1):\n\n```haskell\ndata
  Point = Point Int Int Int deriving (Generic, Show)\ndata Polygon = Polygon Point
  Point Point deriving (Generic, Show)\n\npolygon :: Polygon\npolygon = Polygon (Point
  1 5 3) (Point 2 4 2) (Point 5 7 (-2))\n```\n\n```haskell\n>>> getPosition @2 polygon\nPoint
  2 4 2\n\n>>> setPosition @1 (Point 26 5 3) polygon\nPolygon (Point 26 5 3) (Point
  2 4 2) (Point 5 7 (-2))\n\n>>> polygon ^. position @1 . position @2\n5\n\n>>> polygon
  & position @3 . position @2 %~ (+10)\nPolygon (Point 1 5 3) (Point 2 4 2) (Point
  5 17 (-2))\n\n>>> polygon ^. position @10\nerror:\n  • The type Polygon does not
  contain a field at position 10\n```\n\nSince tuples are an instance of `Generic`,
  they also have positional lenses:\n\n```haskell\n>>> ((\"hello\", True), 5) ^. position
  @1 . position @2\nTrue\n```\n\n### Typed fields\n\nFields can be accessed by their
  type in the data structure, assuming that this\ntype is unique:\n\n```haskell\ndata
  Person = Person { name :: String, age :: Int } deriving (Generic, Show)\ndata Point
  = Point Int Int Int deriving (Generic, Show)\n\nsally :: Person\nsally = Person
  \"Sally\" 25\n\npoint :: Point\npoint = Point 1 2 3\n```\n\n```haskell\n>>> getTyped
  @String sally\n\"Sally\"\n\n>>> setTyped @Int sally 26\nPerson {name = \"Sally\",
  age = 26}\n\n>>> point ^. typed @Int\nerror:\n  • The type Point contains multiple
  values of type Int; the choice of value is thus ambiguous\n\n>>> point & typed @String
  .~ \"Point\"\nerror:\n  • The type Point does not contain a value of type [Char]\n```\n\n###
  Structural subtyping\n\nA record is a (structural) `subtype' of another, if its
  fields are a superset of\nthose of the other.\n\n```haskell\ndata Human = Human\n
  \ { name    :: String\n  , age     :: Int\n  , address :: String\n  } deriving (Generic,
  Show)\n\ndata Animal = Animal\n  { name    :: String\n  , age     :: Int\n  } deriving
  (Generic, Show)\n\nhuman :: Human\nhuman = Human {name = \"Tunyasz\", age = 50,
  address = \"London\"}\n```\n\n```haskell\n\n>>> upcast human :: Animal\nAnimal {name
  = \"Tunyasz\", age = 50}\n\n-- 'smash' plug the smaller structure into the larger
  one\n>>> smash (Animal \"dog\" 10) human\nHuman {name = \"dog\", age = 10, address
  = \"London\"}\n\n-- 'super' is a lens that focuses on a subrecord of a larger record:\n>>>
  human ^. super @Animal\nAnimal {name = \"Tunyasz\", age = 50}\n```\n\nWe can apply
  a function that operates on a supertype to the larger (subtype)\nstructure, by focusing
  on the supertype first:\n\n```haskell\ngrowUp :: Animal -> Animal\ngrowUp (Animal
  name age) = Animal name (age + 50)\n\n>>> human & super @Animal %~ growUp\nHuman
  {name = \"Tunyasz\", age = 60, address = \"London\"}\n```\n\n## Prisms\n\n### Named
  constructors\n\nConstructor components can be accessed using the constructor's name:\n\n```haskell\ntype
  Name = String\ntype Age  = Int\n\ndata Dog = MkDog { name :: Name, age :: Age }
  deriving (Generic, Show)\ndata Animal = Dog Dog | Cat Name Age | Duck Age deriving
  (Generic, Show)\n\nshep = Dog (MkDog \"Shep\" 4)\nmog = Cat \"Mog\" 5\ndonald =
  Duck 4\n```\n\n```haskell\n>>> shep ^? _Ctor @\"Dog\"\nJust (MkDog {name = \"Shep\",
  age = 4})\n\n>>> shep ^? _Ctor @\"Cat\"\nNothing\n\n>>> mog ^? _Ctor @\"Cat\"\nJust
  (\"Mog\",5)\n\n>>> _Ctor @\"Cat\" # (\"Garfield\", 6) :: Animal\nCat \"Garfield\"
  6\n\n>>> donald ^? _Ctor @\"Giraffe\"\nerror:\n  • The type Animal does not contain
  a constructor named \"Giraffe\"\n```\n\n### Typed constructors\n\nConstructor components
  can be accessed using the component's type, assuming\nthat this type is unique:\n\n```haskell\ntype
  Name = String\ntype Age  = Int\n\ndata Dog = MkDog { name :: Name, age :: Age }
  deriving (Generic, Show)\ndata Animal = Dog Dog | Cat (Name, Age) | Duck Age deriving
  (Generic, Show)\n\nshep = Dog (MkDog \"Shep\" 4)\nmog = Cat (\"Mog\", 5)\ndonald
  = Duck 4\n```\n\n```haskell\n>>> mog ^? _Typed @Dog\nNothing\n\n>>> shep ^? _Typed
  @Dog\nJust (MkDog {name = \"Shep\", age = 4})\n\n>>> donald ^? _Typed @Age\nJust
  4\n\n>>> donald ^? _Typed @Float\nerror:\n  • The type Animal does not contain a
  constructor whose field is of type Float\n\n>>> _Typed @Age # 6 :: Animal\nDuck
  6\n```\n\n## Contributors\n\n+ [Toby Shaw](https://github.com/TobyShaw)\n+ [Will
  Jones](https://github.com/lunaris)\n"
license-name: BSD3
