homepage: https://github.com/kcsongor/generic-lens
changelog-type: markdown
hash: 67d2c24fc5bc616af69ea30e4412d75455bbcbeff49cff03823691f789ce7a8a
test-bench-deps:
  base: ! '>=4.9 && <5'
  criterion: ! '>=1.3.0.0'
  doctest: -any
  HUnit: -any
  lens: -any
  inspection-testing: ! '>=0.2'
  generic-lens: -any
  deepseq: -any
  QuickCheck: -any
  profunctors: -any
maintainer: kiss.csongor.kiss@gmail.com
synopsis: Generically derive traversals, lenses and prisms.
changelog: ! "## 1.0.0.2\n- Fix compile-time performance regression\n\n## 1.0.0.1\n-
  Remove dump-core dependency\n- Relax upper bound on criterion (#42)\n\n## 1.0.0.0\n-
  Traversals (types, param, constraints)\n- Prisms are now optimal too\n- Monomorphic
  versions of lenses and prisms also included\n\n### Breaking API changes\n- `projectSub`
  now returns `Maybe sub` instead of `Either sup sub` (#21)\n\n## 0.5.1.0\n- Infer
  input type from result type (#25)\n- Allow changing of multiple type parameters
  (#24)\n- Allow changing of type parameters that have kinds other than `*` (#23)\n-
  Fix error message in subtype lens\n\n## 0.5.0.0\n\n- Lenses and prisms are now type-changing.\n-
  More informative error messages\n- More readable type signatures in type errors
  and when using `:t`\n- Use `doctest`\n- Include examples in Haddock\n\n### Breaking
  API changes\n\n- The type parameters of the classes have been changed to accommodate\n
  \ the type-changing update:\n  \n  `class HasField name a s` -> `class HasField
  name s t a b` etc.\n  \n  Accordingly, `field :: Lens' s a` -> `field :: Lens s
  t a b`\n"
basic-deps:
  base: ! '>=4.9 && <=5.0'
  tagged: ! '>=0.8 && <=0.9'
  profunctors: ! '>=5.0 && <=6.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '0.5.1.0'
- '1.0.0.1'
- '1.0.0.2'
author: Csongor Kiss
latest: '1.0.0.2'
description-type: markdown
description: ! "# generic-lens\n\n[![Build Status](https://travis-ci.org/kcsongor/generic-lens.svg?branch=master)](https://travis-ci.org/kcsongor/generic-lens)\n[![Hackage](https://img.shields.io/hackage/v/generic-lens.svg)](https://hackage.haskell.org/package/generic-lens)\n\nGenerically
  derive traversals, lenses and prisms.\n\nAvailable on [Hackage](https://hackage.haskell.org/package/generic-lens)\n\nThis
  library uses `GHC.Generics` to derive efficient optics (traversals, lenses\nand
  prisms) for algebraic data types in a type-directed way, with a focus on\ngood type
  inference and error messages when possible.\n\nThe derived optics use the so-called
  van Laarhoven representation, thus are\nfully interoperable with the combinators
  found in mainstream lens libraries.\n\nExamples can be found in the `examples` and
  `tests` folders.\n\nTable of contents\n=================\n\n* [Preliminaries](#preliminaries)\n*
  [Taxonomy of optics](#taxonomy-of-optics)\n   * [Lenses](#lenses)\n      * [By name](#by-name)\n
  \     * [By position](#by-position)\n      * [By type](#by-type)\n      * [By structure](#by-structure)\n
  \  * [Traversals](#traversals)\n      * [By type](#by-type-1)\n      * [By parameter](#by-parameter)\n
  \     * [By constraint](#by-constraint)\n   * [Prisms](#prisms)\n      * [By name](#by-name-1)\n
  \     * [By type](#by-type-2)\n* [Performance](#performance)\n  * [Inspection testing](#inspection-testing)\n
  \ * [Benchmarks](#benchmarks)\n* [Contributors](#contributors)\n\n# Preliminaries\nA
  typical module using `generic-lens` will usually have the following\nextensions
  turned on:\n```haskell\n{-# LANGUAGE AllowAmbiguousTypes       #-}\n{-# LANGUAGE
  DataKinds                 #-}\n{-# LANGUAGE DeriveGeneric             #-}\n{-# LANGUAGE
  DuplicateRecordFields     #-}\n{-# LANGUAGE FlexibleContexts          #-}\n{-# LANGUAGE
  NoMonomorphismRestriction #-}\n{-# LANGUAGE TypeApplications          #-}\n\n```\n\n#
  Taxonomy of optics\nHere is a comprehensive list of the optics exposed by `generic-lens`.
  The\ncombinators each allow a different way of identifying certain parts of\nalgebraic
  data types.\n\n## Lenses\n\nA lens identifies exactly one part of a product type,
  and allows querying and\nupdating it.\n\n### By name\n\n```haskell\ndata Person
  = Person { name :: String, age :: Int } deriving (Generic, Show)\n\nsally :: Person\nsally
  = Person \"Sally\" 25\n```\n\nRecord fields can be accessed by their label using
  the `field` lens.\n\n```haskell\n>>> sally ^. field @\"name\"\n\"Sally\"\n\n>>>
  sally & field @\"name\" .~ \"Tamas\"\nPerson {name = \"Tamas\", age = 25}\n```\nHere
  we use [visible type application](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#visible-type-application)\nto
  specify which field we're interested in, and use the `^.` and `.~` combinators from
  a lens library\n([lens](https://hackage.haskell.org/package/lens), [microlens](https://hackage.haskell.org/package/microlens),
  etc.)\nto query and update the field.\n\nOr for standalone use, the `getField` and
  `setField` functions can be used instead.\n```haskell\n>>> getField @\"age\" sally\n25\n\n>>>
  setField @\"age\" 26 sally\nPerson {name = \"Sally\", age = 26}\n```\n\nWhen a non-existent
  field is requested, the library generates a helpful type error:\n```haskell\n>>>
  sally ^. field @\"pet\"\nerror:\n  • The type Person does not contain a field named
  'pet'\n```\n\nFor types with multiple constructors, we can still use `field` as
  long as all constructors contain the required field\n```haskell\ndata Two\n = First
  \ { wurble :: String, banana :: Int }\n | Second { wurble :: String }\n deriving
  (Generic, Show)\n\n>>> Second \"woops\" ^. field @\"wurble\"\n\"woops\"\n>>> Second
  \"woops\" ^. field @\"banana\"\n    ...\n    • Not all constructors of the type
  Two\n       contain a field named 'banana'.\n      The offending constructors are:\n
  \     • Second\n    ...\n```\n\nThe type of `field` is\n```haskell\nfield :: HasField
  name s t a b => Lens s t a b\n```\nTherefore it allows polymorphic (type-changing)
  updates, when the accessed field mentions type parameters.\n\n```haskell\ndata Foo
  f a = Foo\n  { foo :: f a\n  } deriving (Generic, Show)\n\nfoo1 :: Foo Maybe Int\nfoo1
  = Foo (Just 10)\n\n-- |\n-- >>> foo2\n-- Foo {foo = [\"10\"]}\nfoo2 :: Foo [] String\nfoo2
  = foo1 & field @\"foo\" %~ (maybeToList . fmap show)\n```\nThis example shows that
  higher-kinded parameters can also be changed (`Maybe`\n-> `[]`). We turn a `Foo
  Maybe Int` into a `Foo [] String` by turning the inner\n`Maybe Int` into a `[String]`.\n\nWith
  `DuplicateRecordFields`, multiple data types can share the same field\nname, and
  the `field` lens works in this case too. No more field name\nprefixing!\n\n### By
  position\n\nFields can be accessed by their position in the data structure (index
  starting at 1):\n\n```haskell\ndata Point = Point Int Int Int deriving (Generic,
  Show)\ndata Polygon = Polygon Point Point Point deriving (Generic, Show)\n\npolygon
  :: Polygon\npolygon = Polygon (Point 1 5 3) (Point 2 4 2) (Point 5 7 (-2))\n```\n\n```haskell\n>>>
  polygon ^. position @1 . position @2\n5\n\n>>> polygon & position @3 . position
  @2 %~ (+10)\nPolygon (Point 1 5 3) (Point 2 4 2) (Point 5 17 (-2))\n\n>>> polygon
  ^. position @10\nerror:\n  • The type Polygon does not contain a field at position
  10\n```\n\nSince tuples are an instance of `Generic`, the positional lens readily
  works:\n\n```haskell\n>>> ((\"hello\", True), 5) ^. position @1 . position @2\nTrue\n>>>
  ((\"hello\", True, \"or\"), 5, \"even\", \"longer\") ^. position @1 . position @2\nTrue\n```\n\n###
  By type\n\nFields can be accessed by their type in the data structure, assuming
  that this\ntype is unique:\n\n```haskell\n>>> sally ^. typed @String\n\"Sally\"\n\n>>>
  setTyped @Int sally 26\nPerson {name = \"Sally\", age = 26}\n```\n\n### By structure\n\nThe
  `super` lens generalises the `field` lens to focus on a collection rather\nthan
  a single field.\nWe can say that a record is a (structural) `subtype' of another,
  if its fields\nare a superset of those of the other.\n\n```haskell\ndata Human =
  Human\n  { name    :: String\n  , age     :: Int\n  , address :: String\n  } deriving
  (Generic, Show)\n\ndata Animal = Animal\n  { name    :: String\n  , age     :: Int\n
  \ } deriving (Generic, Show)\n\nhuman :: Human\nhuman = Human {name = \"Tunyasz\",
  age = 50, address = \"London\"}\n```\n\n```haskell\n>>> human ^. super @Animal\nAnimal
  {name = \"Tunyasz\", age = 50}\n\n>>> upcast human :: Animal\nAnimal {name = \"Tunyasz\",
  age = 50}\n```\n\nWe can apply a function that operates on a supertype to the larger
  (subtype)\nstructure, by focusing on the supertype first:\n\n```haskell\ngrowUp
  :: Animal -> Animal\ngrowUp (Animal name age) = Animal name (age + 50)\n\n>>> human
  & super @Animal %~ growUp\nHuman {name = \"Tunyasz\", age = 60, address = \"London\"}\n```\n\n##
  Traversals\n\nTraversals allow multiple values to be queried or updated at the same
  time.\n\nAs a running example, consider a data type of weighted trees. There are
  two\ntype parameters, which correspond to the type of elements and weights in the\ntree:\n```haskell\ndata
  WTree a w\n  = Leaf a\n  | Fork (WTree a w) (WTree a w)\n  | WithWeight (WTree a
  w) w\n  deriving (Generic, Show)\n\nmytree :: WTree Int Int\nmytree = Fork (WithWeight
  (Leaf 42) 1)\n              (WithWeight (Fork (Leaf 88) (Leaf 37)) 2)\n```\n\n###
  By type\nFocus on all values of a given type.\n\n```haskell\ntypes :: HasTypes s
  a => Traversal' s a\n```\n\n```haskell\n>>> toListOf (types @Int) myTree\n[42,1,88,37,2]\n```\n\nNote
  that this traversal is \"deep\": the subtrees are recursively traversed.\n\n###
  By parameter\nAs the above example shows, the `types` traversal is limited in that
  it cannot\ndistinguish between the two types of `Int`s: the weights and the values.\n\nInstead,
  the `param` traversal allows specifying types that correspond to a\ncertain type
  parameter.\n```haskell\nparam :: HasParam pos s t a b => Traversal s t a b\n```\n\n```haskell\n>>>
  toListOf (param @1) myTree\n[42,88,37]\n```\n\nHere, the numbering starts from 0,
  with 0 being the rightmost parameter.\nBecause `param` is guaranteed to focus on
  parametric values, it allows the type\nto be changed as well.\n\nFor example, we
  can implement `Functor` for `WTree` as simply as:\n\n```haskell\ninstance Functor
  (WTree a) where\n  fmap = over (param @0)\n```\n\n### By constraint\nThe most general
  type of traversal: we can apply a given function to every\nvalue in a structure,
  by requiring that all values have an instance for some\ntype class.\n\n```haskell\nconstraints
  \  :: HasConstraints c s t => Applicative g => (forall a b . c a b => a -> g b)
  -> s -> g t\nconstraints'  :: HasConstraints' c s  => Applicative g => (forall a
  . c a => a -> g a) -> s -> g s\n```\n\nConsider the `Numbers` type, which contains
  three different numeric types:\n```haskell\ndata Numbers = Numbers Int Float Double\n
  \ deriving (Show, Generic)\n\nnumbers = Numbers 10 20.0 30.0\n```\n\nWith `constraints'`,
  we can uniformly add 20 to each number in one go:\n```haskell\n>>> constraints'
  @Num (\\x -> pure (x + 20)) numbers\nNumbers 30 40.0 50.0\n```\n\n## Prisms\n\nA
  prism focuses on one part of a sum type (which might not be present). Other\nthan
  querying the type, they can be \"turned around\" to inject the data into the\nsum
  (like a constructor).\n\n### By name\n\nConstructor components can be accessed using
  the constructor's name:\n\n```haskell\ntype Name = String\ntype Age  = Int\n\ndata
  Dog = MkDog { name :: Name, age :: Age } deriving (Generic, Show)\ndata Animal =
  Dog Dog | Cat Name Age | Duck Age deriving (Generic, Show)\n\nshep = Dog (MkDog
  \"Shep\" 4)\nmog = Cat \"Mog\" 5\ndonald = Duck 4\n```\n\n```haskell\n>>> shep ^?
  _Ctor @\"Dog\"\nJust (MkDog {name = \"Shep\", age = 4})\n\n>>> shep ^? _Ctor @\"Cat\"\nNothing\n```\n\nConstructors
  with multiple fields can be focused as a tuple\n\n```\n>>> mog ^? _Ctor @\"Cat\"\nJust
  (\"Mog\",5)\n\n>>> _Ctor @\"Cat\" # (\"Garfield\", 6) :: Animal\nCat \"Garfield\"
  6\n\n```\n\n### By type\n\nConstructor components can be accessed using the component's
  type, assuming\nthat this type is unique:\n\n```haskell\ntype Name = String\ntype
  Age  = Int\n\ndata Dog = MkDog { name :: Name, age :: Age } deriving (Generic, Show)\ndata
  Animal = Dog Dog | Cat Name Age | Duck Age deriving (Generic, Show)\n\nshep = Dog
  (MkDog \"Shep\" 4)\nmog = Cat \"Mog\" 5\ndonald = Duck 4\n```\n\n```haskell\n>>>
  mog ^? _Typed @Dog\nNothing\n\n>>> shep ^? _Typed @Dog\nJust (MkDog {name = \"Shep\",
  age = 4})\n\n>>> donald ^? _Typed @Age\nJust 4\n\n>>> mog ^? _Typed @(Name, Age)\n(\"Mog\",
  5)\n\n>>> donald ^? _Typed @Float\nerror:\n  • The type Animal does not contain
  a constructor whose field is of type Float\n\n>>> _Typed @Age # 6 :: Animal\nDuck
  6\n```\n\n# Performance\nThe runtime characteristics of the derived optics is in
  most cases identical at\n`-O1`, in some cases only slightly slower than the hand-written
  version. This\nis thanks to GHC's optimiser eliminating the generic overhead.\n\nThe\n[inspection-testing](https://hackage.haskell.org/package/inspection-testing)\nlibrary
  is used to ensure (see [here](test/Spec.hs)) that everything gets\ninlined away.\n\nTODO
  push benchmarks too\n# Contributors\n\n+ [Matthew Pickering](https://github.com/mpickering)\n+
  [Toby Shaw](https://github.com/TobyShaw)\n+ [Will Jones](https://github.com/lunaris)\n"
license-name: BSD3
