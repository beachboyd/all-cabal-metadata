homepage: https://github.com/seanhess/gendocs#readme
changelog-type: ''
hash: 3eabb8be121d7b9c19f503905dd6ea5737c451f39fd3b9640d706a2b7196151d
test-bench-deps:
  gendocs: -any
  base: -any
maintainer: seanhess@gmail.com
synopsis: Library for generating interface documentation from types
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  aeson-pretty: -any
  text: -any
  aeson: -any
  safe: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.1.3
author: Sean Hess
latest: 0.1.3
description-type: markdown
description: ! "Generate interface documentation for your types\n\nExample\n-------\n\n
  \   {-# LANGUAGE OverloadedStrings #-}\n    {-# LANGUAGE DeriveGeneric #-}\n    {-#
  LANGUAGE GeneralizedNewtypeDeriving #-}\n    module Example where\n\n    import
  Data.Aeson (ToJSON)\n    import Data.Proxy (Proxy(..))\n    import Data.Docs (markdown,
  Docs(..), Sample(..), genDocs, genDocsEnum)\n    import Data.Text (Text)\n    import
  qualified Data.Text as Text\n    import GHC.Generics (Generic)\n\n    data Person
  = Person\n        { name :: Text\n        , age :: Age\n        , hobbies :: [Hobby]\n
  \       } deriving (Show, Eq, Generic)\n    instance ToJSON Person\n    instance
  Docs Person\n    instance Sample Person where\n        sample _ = Person\n          {
  name = \"Bob\"\n          , age = sample (Proxy :: Proxy Age)\n          , hobbies
  = [Haskell, Friends]\n          }\n\n    newtype Age = Age Int\n        deriving
  (Show, Eq, Generic)\n    instance ToJSON Age\n    instance Docs Age where\n        docs
  = genDocs \"Age in years\"\n    instance Sample Age where\n        sample _ = Age
  31\n        samples _ = [Age 31, Age 24]\n\n    data Hobby = Haskell | Friends |
  Movies\n        deriving (Show, Eq, Generic, Enum, Bounded)\n    instance ToJSON
  Hobby\n    instance Docs Hobby where\n        docs = genDocsEnum \"Hobby\"\n    instance
  Sample Hobby where\n        sample _ = Haskell\n\n    doc :: IO ()\n    doc = do\n
  \       putStrLn $ Text.unpack json\n\n    json :: Text\n    json = Text.intercalate
  \"\\n\\n\\n\" $\n      [ markdown (Proxy :: Proxy Person)\n      , markdown (Proxy
  :: Proxy Age)\n      , markdown (Proxy :: Proxy Hobby)\n      ]\n\nThis generates
  the following output\n\n    Person\n    ---------------------\n\n    | Field   |
  Type              |\n    |---------|-------------------|\n    | name    | [Text](#text)
  \    |\n    | age     | [Age](#age)       |\n    | hobbies | [[Hobby]](#hobby) |\n\n
  \   ```\n    {\n        \"age\": 31,\n        \"hobbies\": [\n            \"Haskell\",\n
  \           \"Friends\"\n        ],\n        \"name\": \"Bob\"\n    }\n    ```\n\n\n
  \   Age\n    ---------------------\n\n    Age in years\n\n    ```\n    31\n    ```\n\n\n
  \   Hobby\n    ---------------------\n\n    | Values    |\n    |-----------|\n    |
  \"Haskell\" |\n    | \"Friends\" |\n    | \"Movies\"  |\n\n    ```\n    \"Haskell\"\n
  \   ```\n"
license-name: BSD-3-Clause
