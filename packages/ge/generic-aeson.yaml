homepage: ''
changelog-type: markdown
hash: c9567932750bce79a94188bb355bc0a41a805019692fce698d2ef48ce5221616
test-bench-deps: {}
maintainer: code@silk.co
synopsis: Derivation of Aeson instances using GHC generics.
changelog: ! "# Changelog\n\n#### 0.2.0.9\n\n* Allow `aeson 1.2.*`\n* Fix a documentation
  typo\n\n#### 0.2.0.8\n\n* Fix compilation on GHC 8.\n\n#### 0.2.0.7\n\n* Allow `generic-deriving
  1.8.*`\n* Allow `vector 0.11.*`\n\n#### 0.2.0.6\n\n* Allow `aeson 0.9.*`\n\n####
  0.2.0.5\n\n* Allow `attoparsec 0.13.*`\n\n#### 0.2.0.4\n\n* Fix compilation on GHC
  7.4\n\n#### 0.2.0.3\n\n* Allow `tagged 0.8.*`\n\n#### 0.2.0.2\n\n* Allow `generic-deriving
  1.7.*`\n\n#### 0.2.0.1\n\n* Allow `text 1.2.*`\n\n## 0.2.0.0\n\n* Add `gtoJsonWithSettings`
  and `gparseJsonWithSettings` to customize\n  the generated JSON, currently only
  to strip specified prefixes from\n  record fields.\n* Format Change: The behavior
  of Maybes was inconsistent and buggy,\n  now we always map `Just` directly to the
  value, and `Nothing` to\n  null if on the top level or in an unnamed field and remove
  the\n  property if it's in a named field.\n* Changed the type of `selNameT` to return
  a `Maybe Text` which will\n  be `Nothing` instead of `\"\"` (unnamed fields)\n\n####
  0.1.1.1\n\n* Fix regression in implementation of `multipleConstructors` introduced
  in 0.1.1\n\n### 0.1.1\n\n* Add `Generics.Generic.Aeson.Util` module with helper
  function for interoperating packages\n\n#### 0.1.0.3\n\n* Allow `attoparsec 0.12.*`\n\n####
  0.1.0.2\n\n* Allow `mtl 2.2.*`\n"
basic-deps:
  base: ! '>=4.4 && <4.11'
  unordered-containers: ==0.2.*
  text: ! '>=0.11 && <1.3'
  generic-deriving: ! '>=1.6 && <1.13'
  tagged: ! '>=0.2 && <0.9'
  mtl: ! '>=2.0 && <2.3'
  attoparsec: ! '>=0.11 && <0.14'
  aeson: ! '>=0.6 && <1.3'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.1'
- '0.1.1.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.0.6'
- '0.2.0.7'
- '0.2.0.8'
- '0.2.0.9'
author: Silk
latest: '0.2.0.9'
description-type: markdown
description: ! '# generic-aeson


  [![Build Status](https://travis-ci.org/silkapp/generic-aeson.svg?branch=master)](https://travis-ci.org/silkapp/generic-aeson)


  The structure of the generated JSON is meant to be close to

  idiomatic JSON. This means:


  * Enumerations (data types containing constructors without fields) are converted
  to JSON strings.


  * Record fields become JSON keys.


  * Data types with one unlabeled field convert to just that field.


  * Data types with multiple unlabeled fields become arrays.


  * Multiple constructors are represented by keys.


  * `Maybe` values are either an absent key, or the value.


  * Leading and trailing underscores are removed from constructor names and record
  fields


  See `tests/Main.hs` in [json-schema](http://hackage.haskell.org/package/json-schema)
  for more examples.



  ## How does generic-aeson compare to the TH/Generics already present in aeson?


  generic-aeson contains more special cases for creating more concise

  and idiomatic json. If you''re working with the JSON representation

  directly generic-aeson should feel more natural.


  ## Will the generated format ever change?


  Changing the format would incur a breaking change to every API that

  uses generic-aeson so we must keep it intact.


  If we find a bug where the fix changes the format we need to create a

  new package or version the generation code.


  ## Schemas


  [json-schema](http://hackage.haskell.org/package/json-schema) has

  generic derivation of schemas that match the generic-aeson format.

'
license-name: BSD3
