homepage: http://github.com/lysxia/generic-random
changelog-type: markdown
hash: c4faea0197ac73f2850e07d0023e43500152b613d0d9e60d5202fb9303e910b4
test-bench-deps:
  base: -any
  generic-random: -any
  deepseq: -any
  QuickCheck: -any
maintainer: lysxia@gmail.com
synopsis: Generic random generators
changelog: ! "https://github.com/Lysxia/generic-random/blob/master/changelog.md\n\n#
  1.2.0.0\n\n- Fix a bug where generators did not decrease the size parameter with\n
  \ single-field constructors\n\n- The sized generators now use a custom generator
  for lists.\n  Use `genericArbitraryRecG ()` to disable that.\n\n- Lists of custom
  generators are now constructed using `(:+)` instead of\n  `GenList`\n- Rename `Field`
  to `FieldGen`\n- Add `Gen1`, `Gen1_` (custom generators for unary type constructors)\n-
  Add `listOf'`, `listOf1'`, `vectorOf'`\n- Remove deprecated module `Generic.Random.Generic`\n\n#
  1.1.0.2\n\n- Improved performance\n\n# 1.1.0.1\n\n- Fix build for GHC<8\n\n# 1.1.0.0\n\n-
  Add option to specify custom generators for certain fields,\n  overriding Arbitrary
  instances\n  + Add `genericArbitraryG`, `genericArbitraryUG`, `genericArbitrarySingleG`,\n
  \   `genericArbitraryRecG`\n- Add `GArbitrary` and `GUniformWeight` synonyms\n-
  Deprecate `Generic.Random.Generic`\n- Remove `weights` from the external API\n\n#
  1.0.0.0\n\n- Make the main module `Generic.Random`\n- Rework generic base case generation\n
  \ + You can explicitly provide a trivial generator (e.g., returning a\n    nullary
  constructor) using `withBaseCase`\n  + Generically derive `BaseCaseSearch` and let
  `BaseCase` find small\n    values, no depth parameter must be specified anymore\n-
  Add `genericArbitrarySingle`, `genericArbitraryRec`, `genericArbitraryU'`\n- Deprecate
  `weights`\n- Fixed bug with `genericArbitrary'` not dividing the size parameter\n\n#
  0.5.0.0\n\n- Turn off dependency on boltzmann-samplers by default\n- Add `genericArbitraryU`,
  `genericArbitraryU0` and `genericArbitraryU1`\n- Compatible with GHC 7.8.4 and GHC
  7.10.3\n\n# 0.4.1.0\n\n- Move Boltzmann sampler modules to another package: boltzmann-samplers\n\n#
  0.4.0.0\n\n- Check well-formedness of constructor distributions at compile time.\n-
  No longer support GHC 7.10.3 (the above feature relies on Generic\n  information
  which does not exist before GHC 8)\n\n# 0.3.0.0\n\n- Support GHC 7.10.3\n- Replace
  `TypeApplications` with ad-hoc data types in\n  `genericArbitraryFrequency'`/`genericArbitrary'`\n"
basic-deps:
  base: ! '>=4.7 && <5'
  QuickCheck: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.2.0.0'
author: Li-yao Xia
latest: '1.2.0.0'
description-type: markdown
description: ! "Generic random generators [![Hackage](https://img.shields.io/hackage/v/generic-random.svg)](https://hackage.haskell.org/package/generic-random)
  [![Build Status](https://travis-ci.org/Lysxia/generic-random.svg)](https://travis-ci.org/Lysxia/generic-random)\n=========================\n\nDerive
  simple random generators for [QuickCheck](https://hackage.haskell.org/package/QuickCheck)
  using generics.\n\nAutomating the `Arbitrary` boilerplate also ensures that if a
  type changes to\nhave more constructors, then the generator fixes itself to generate
  that new\ncase (with `uniform` distribution) or causes a compilation error (with
  an\nexplicit distribution).\n\nA simple (optional) strategy to ensure termination
  for recursive types:\nmake `Test.QuickCheck.Gen`'s size parameter decrease at every
  recursive call;\nwhen it reaches zero, sample directly from a trivially terminating
  generator\ngiven explicitly (`genericArbitraryRec` and `withBaseCase`) or implicitly\n(`genericArbitrary'`).\n\nExample\n-------\n\n```haskell\n{-#
  LANGUAGE DeriveGeneric #-}\n\nimport GHC.Generics (Generic)\nimport Test.QuickCheck\nimport
  Generic.Random\n\ndata Tree a = Leaf | Node (Tree a) a (Tree a)\n  deriving (Show,
  Generic)\n\ninstance Arbitrary a => Arbitrary (Tree a) where\n  arbitrary = genericArbitraryRec
  uniform `withBaseCase` return Leaf\n\n-- Equivalent to\n-- > arbitrary =\n-- >   sized
  $ \\n ->\n-- >     if n == 0 then\n-- >       return Leaf\n-- >     else\n-- >       oneof\n--
  >         [ return Leaf\n-- >         , resize (n `div` 3) $\n-- >             Node
  <$> arbitrary <*> arbitrary <*> arbitrary\n-- >         ]\n\nmain = sample (arbitrary
  :: Gen (Tree ()))\n```\n"
license-name: MIT
