homepage: https://github.com/Lysxia/generic-data#readme
changelog-type: markdown
hash: f4ff9c19f003926eb68880670cf1b050f697dcd52c74a30eac90f34f6cf68172
test-bench-deps:
  generic-data: -any
  base: -any
  tasty-hunit: -any
  tasty: -any
maintainer: lysxia@gmail.com
synopsis: Utilities for GHC.Generics
changelog: ! '# 0.2.0.0


  - Remove `Generic.Data.Types.Map`

  - Add `Generic.Data.Data.Types.toData` and `fromData`

  - Remove `Defun` module (subsumed by `first-class-families` package)


  # 0.1.1.0


  - Add `gconIndex`

  - Interface for constructor tags

  - Type-level `Meta` accessors

  - Add basic `Newtype` functions


  # 0.1.0.0


  Released generic-data

'
basic-deps:
  base: ! '>=4.9 && <5'
  show-combinators: -any
  base-orphans: ! '>=0.8'
  contravariant: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
author: Li-yao Xia
latest: '0.2.0.0'
description-type: markdown
description: ! "# Generic data types in Haskell [![Hackage](https://img.shields.io/hackage/v/generic-data.svg)](https://hackage.haskell.org/package/generic-data)
  [![Build Status](https://travis-ci.org/Lysxia/generic-data.svg)](https://travis-ci.org/Lysxia/generic-data)\n\nUtilities
  for `GHC.Generics`.\n\n## Generic deriving for standard classes\n\nSupported classes
  that GHC currently can't derive: `Semigroup`, `Monoid`,\n`Applicative`, `Alternative`,
  `Eq1`, `Ord1`, `Show1`.\n\nOther classes from base are also supported, even though
  GHC can already derive\nthem:\n\n- `Eq`, `Ord`, `Enum`, `Bounded`, `Show` (standard);\n-
  `Functor`, `Foldable`, `Traversable` (via extensions, `DeriveFunctor`, etc.).\n\n(`Read`
  is currently not implemented.)\n\nTo derive type classes defined elsewhere, it might
  be worth taking a look at\n[one-liner](https://hackage.haskell.org/package/one-liner).\n\n##
  Type metadata\n\nExtract type names, constructor names, number and arities of constructors,
  etc..\n\n---\n\n## Related links\n\ngeneric-data aims to subsume generic deriving
  features of the following\npackages:\n\n- [semigroups](https://hackage.haskell.org/package/semigroups):
  generic\n  `Semigroup`, `Monoid`, but with a heavy dependency footprint.\n- [transformers-compat](https://hackage.haskell.org/package/transformers-compat):\n
  \ generic `Eq1`, `Ord1`, `Show1`.\n- [generic-deriving](https://hackage.haskell.org/package/generic-deriving):\n
  \ doesn't derive the classes in base (defines clones of these classes as a toy\n
  \ example); has Template Haskell code to derive `Generic`.\n\nHere are other relevant
  links.\n\n- [deriving-compat](https://hackage.haskell.org/package/deriving-compat):\n
  \ deriving with Template Haskell.\n- [one-liner](https://hackage.haskell.org/package/one-liner):
  another approach\n  to using `GHC.Generics` to derive instances of many type classes,
  including\n  but not restricted to the above classes (this is done in\n  [one-liner-instances](https://hackage.haskell.org/package/one-liner-instances)).\n-
  [singletons](https://hackage.haskell.org/package/singletons),\n  [first-class-families](https://hackage.haskell.org/package/first-class-families)\n
  \ (second one written by me)\n  libraries for dependently-typed programming in Haskell.\n\n---\n\nAll
  contributions are welcome. Open an issue or a pull request on Github!\n"
license-name: MIT
