homepage: https://github.com/Lysxia/generic-data#readme
changelog-type: ''
hash: 74d6681c6b16f4ac33e422a9e5320aaacbb83c1b6954357b3081b291c13143f9
test-bench-deps:
  generic-data: -any
  base: -any
  tasty-hunit: -any
  tasty: -any
maintainer: lysxia@gmail.com
synopsis: Utilities for GHC.Generics
changelog: ''
basic-deps:
  base: ! '>=4.9 && <5'
  show-combinators: -any
  contravariant: -any
all-versions:
- '0.1.0.0'
author: Li-yao Xia
latest: '0.1.0.0'
description-type: markdown
description: ! "# Generic data types in Haskell [![Build Status](https://travis-ci.org/Lysxia/generic-data.svg)](https://travis-ci.org/Lysxia/generic-data)\n\nUtilities
  for `GHC.Generics`.\n\n## Generic deriving for standard classes\n\nSupported classes
  that GHC currently can't derive: `Semigroup`, `Monoid`,\n`Applicative`, `Alternative`,
  `Eq1`, `Ord1`, `Show1`.\n\nOther classes from base are also supported, even though
  GHC can already derive\nthem:\n\n- `Eq`, `Ord`, `Enum`, `Bounded`, `Show` (standard);\n-
  `Functor`, `Foldable`, `Traversable` (via extensions, `DeriveFunctor`, etc.).\n\nTo
  derive type classes defined elsewhere, it might be worth taking a look at\n[one-liner](https://hackage.haskell.org/package/one-liner).\n\n##
  Type metadata\n\nExtract type names, constructor names, number and arities of constructors,
  etc..\n\n---\n\n## Related links\n\ngeneric-data aims to subsume the following packages,
  which may still be\nuseful for old versions of GHC and base not supported by generic-data.\n\n-
  [semigroups](https://hackage.haskell.org/package/semigroups): generic\n  `Semigroup`,
  `Monoid`.\n- [transformers-compat](https://hackage.haskell.org/package/transformers-compat):\n
  \ generic `Eq1`, `Ord1`, `Show1`, `Read1`.\n- [generic-deriving](https://hackage.haskell.org/package/generic-deriving):\n
  \ doesn't derive the classes in base (defines clones of these classes as a toy\n
  \ example); has Template Haskell code to derive `Generic`.\n\nHere are other relevant
  links.\n\n- [deriving-compat](https://hackage.haskell.org/package/deriving-compat):\n
  \ deriving with Template Haskell.\n- [one-liner](https://hackage.haskell.org/package/one-liner):
  another approach\n  to using `GHC.Generics` to derive instances of many type classes,
  including\n  but not restricted to the above classes (this is done in\n  [one-liner-instances](https://hackage.haskell.org/package/one-liner-instances)).\n-
  [singletons](https://hackage.haskell.org/package/singletons):\n  generic-data borrows
  code from this package to implement defunctionalization.\n\n---\n\nAll contributions
  are welcome. Open an issue or a pull request on Github!\n"
license-name: MIT
