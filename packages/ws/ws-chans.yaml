homepage: https://github.com/shmish111/ws-chans
changelog-type: ''
hash: c5d916185582cf0af78add83844650522c85c6514b7c7ea6c7bdbb122adc6ae4
test-bench-deps:
  warp: -any
  wai-websockets: -any
  wai: -any
  test-framework: -any
  base: -any
  text: -any
  test-framework-quickcheck2: -any
  websockets: -any
  HUnit: -any
  ws-chans: -any
  quickcheck-instances: -any
  unagi-chan: -any
  QuickCheck: -any
  http-types: -any
maintainer: david.smith@keemail.me
synopsis: Unagi chan based websocket client
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  network: -any
  async: -any
  websockets: -any
  unagi-chan: ! '>=0.4'
all-versions:
- 0.1.0.0
author: David Smith
latest: 0.1.0.0
description-type: markdown
description: ! "# ws-chans\n\n[![Build Status](https://travis-ci.org/shmish111/ws-chans.svg?branch=master)](https://travis-ci.org/shmish111/ws-chans)\n\nWebsockets
  represent a channel between a client and a server. `ws-chans` carries this concept
  deeper into your code by setting up an `Control.Concurrent.Chan.Unagi.InChan` and
  an `Control.Concurrent.Chan.Unagi.OutChan` as an interface to a websocket server.
  To send a message to the server you simply write a message to the `InChan`. To receive
  a message from the server you read from the `OutChan`.\n\nThe tests are probably
  the best place to look at some example usage but basically:\n\n```haskell\nimport
  \          Control.Monad                        (forM, forever)\nimport           Data.Text
  \                           (Text)\nimport           Network.WebSockets.Chan.Unagi
  \       as Unagi\n\nexample :: IO [Text]\nexample = do\n    (ic, oc, cic) <- Unagi.newChans
  \"localhost\" 8080 \"\" :: IO (Unagi.InChan Text, Unagi.OutChan Text, Unagi.InChan
  Text)\n    Unagi.writeList2Chan ic msgs\n    res <- forM msgs (\\_ -> Unagi.readChan
  oc)\n    Unagi.writeChan cic (\"finished\" :: Text)\n    return res\n```\n\n`newChans`
  returns a tuple of:\n* an `InChan` which you write messages to, these will be sent
  to the websocket server\n* an `OutChan` which you read messages from, these are
  messages that have come from the websocket server\n* an `InChan` for closing the
  connection. This should have the same type as the first `InChan`. When you write
  a message to this `InChan` it will tell the server that you wish to close the connection.
  See the source code and [Network.WebSockets.sendClose](https://hackage.haskell.org/package/websockets-0.10.0.0/docs/Network-WebSockets.html#v:sendClose)
  for more information on how this works."
license-name: BSD-3-Clause
