homepage: https://github.com/DanBurton/MHask#readme
changelog-type: ''
hash: 78411cf67aab86977953a2ac8ea005e92a8f71cbb177120b093aab4c6525942e
test-bench-deps: {}
maintainer: danburton.email@gmail.com
synopsis: The category of monads
changelog: ''
basic-deps:
  base: ! '>=2 && <4.7'
  transformers: ! '>=0.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: Dan Burton
latest: 0.3.0.0
description-type: haddock
description: ! 'MHask is the category where


  * The objects are Haskell types of kind @(* → *)@ that have an instance of `Prelude.Monad''


  * An arrow from object m to object n is a Haskell function of the form @(forall
  x. m x → n x)@


  * Arrow composition is merely a specialization of Haskell function composition


  * The identity arrow for the object m is the `Prelude.id'' function in Haskell,

  specialized to @(forall x. m x → m x)@


  It is assumed that any instances of the classes provided here also have an instance

  for Monad of the form @instance (Monad m) ⇒ Monad (t m)@, thus guaranteeing that
  @(t m)@

  (or @(t i j m)@ for the indexed types) is always a Monad. If it were valid Haskell,
  I''d write:


  > class (forall m. Monad m ⇒ Monad (t m)) ⇒ Functor t


  ''MHask.Functor.Functor'' should actually be called Endofunctor, because if m is
  an object in MHask,

  then an instance t of `Functor'' can map object m to object (t m), and arrows from

  m to n get mapped to arrows from (t m) to (t n).'
license-name: BSD-3-Clause
