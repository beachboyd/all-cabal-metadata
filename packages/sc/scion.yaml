homepage: http://github.com/nominolo/scion
changelog-type: ''
hash: 8afbc1bf17f6007115e6e05cac01fa9e53ce23e3d535925440ca4addce9573d7
test-bench-deps: {}
maintainer: Thomas Schilling <nominolo@googlemail.com>
synopsis: Haskell IDE library
changelog: ''
basic-deps:
  ghc: ! '>=6.10 && <6.12'
  bytestring: ==0.9.*
  Cabal: ! '>=1.5 && <1.7'
  base: ==4.*
  time: ==1.1.*
  json: ==0.4.*
  filepath: ==1.1.*
  uniplate: ==1.2.*
  network: ! '>=2.1 && <2.3'
  containers: ==0.2.*
  network-bytestring: ==0.1.*
  ghc-paths: ==0.1.*
  utf8-string: ==0.3.*
  hslogger: ==1.0.*
  multiset: ==0.1.*
  ghc-syb: ==0.1.*
  directory: ==1.0.*
all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
author: Thomas Schilling <nominolo@googlemail.com>
latest: 0.1.0.2
description-type: markdown
description: ! "\nIntroduction\n============\n\n[Scion][home] is a Haskell library
  that aims to implement those parts\nof a Haskell IDE which are independent of the
  particular front-end.\nScion is based on the GHC API and Cabal.  It provides both
  a Haskell\nAPI and a server for non-Haskell clients such as Emacs and Vim.\n\n  [home]:
  http://code.google.com/p/scion-lib/\n\n\nInstallation\n============\n\n(For developer
  builds see section \"Hacking\" below.)\n\nScion requires [GHC 6.10.1][ghc] or later.
  \ All other dependencies\nshould be on [Hackage][hackage] and can be installed using\n[cabal-install][ci].
  \ Scion consists of a library and a server which\nis used by front-ends that are
  not written in Haskell.\n\nTo install the library and server use:\n\n    $ cd dir/to/scion\n
  \   $ cabal install\n   \nThis will install the executable `scion_server` in the
  `bin` directory\nof `cabal-install`, typically `$HOME/.cabal/bin`.\n\nIf you do
  not want to install the server (and its dependencies), turn\noff the \"server\"
  flag which is enabled by default:\n\n    $ cabal install -f-server\n\nIn order to
  use scion with your favourite front-end, see the specific\ninstructions for the
  front-end below.  The Emacs and Vim front-ends\nare included with Scion and their
  installation instruction follow\nbelow.  The necessary files are installed with
  Scion by default and\nthere is currently no option to turn this off.\n\n  [ghc]:
  http://haskell.org/ghc/download.html\n  [hackage]: http://hackage.haskell.org/packages/hackage.html\n
  \ [ci]: http://hackage.haskell.org/trac/hackage/wiki/CabalInstall\n\n\nBug Reports\n===========\n\nPlease
  send bug reports or feature requests to the [Issue tracker][issues].\n\n  [issues]:
  http://code.google.com/p/scion-lib/issues/list\n\n\nUsage\n=====\n\nSince Scion
  is a library, you should consult the haddock documentation\nfor how to use it.  However,
  you may look at the Emacs frontend for\ninspiration.\n\nEmacs\n=====\n\nScion's
  Emacs mode should be seen as complimentary to the existing\nHaskell mode.  To use
  it install the Scion server as described\nabove. In the following we'll assume that
  the server has been install\nas:\n\n    $ ~/.cabal/bin/scion-server\n\nAdd the following
  to your emacs configuration (typically \"~/.emacs\"):\n\n    ;; Substitute the desired
  version for <version>\n    (add-to-list 'load-path \"~/.cabal/share/scion-<version>/emacs\")\n
  \   (require 'scion)\n\n    ;; if ./cabal/bin is not in your $PATH\n    (setq scion-program
  \"~/.cabal/bin/scion-server\")\n\n    (defun my-haskell-hook ()\n      ;; Whenever
  we open a file in Haskell mode, also activate Scion\n      (scion-mode 1)\n      ;;
  Whenever a file is saved, immediately type check it and\n      ;; highlight errors/warnings
  in the source.\n      (scion-flycheck-on-save 1))\n\n    (add-hook 'haskell-mode-hook
  'my-haskell-hook)\n\n    ;; Use ido-mode completion (matches anywhere, not just
  beginning)\n    ;;\n    ;; WARNING: This causes some versions of Emacs to fail so
  badly\n    ;; that Emacs needs to be restarted.\n    (setq scion-completing-read-function
  'ido-completing-read)\n\nScion mode needs to communicate with the external server.
  \ By default\nthe server will be started automatically when needed.  See \"Manually\nConnecting
  to Scion\" below for how to connect to the server manually.\n\nScion uses Cabal
  as a library which in turn might look for external\nprograms such as [happy][] or
  [alex][].  In order to find these, the\n`PATH` environment variable has to be set
  up correctly.\n\n  [happy]: http://www.haskell.org/happy/\n  [alex]: http://www.haskell.org/alex/\n\nThe
  scion server process inherits the environment variables from the\nEmacs process.
  \ Depending on your system this may be different than\nwhat you would get if you
  started the server from the shell.  To\nadjust the `PATH` environment variable from
  within Emacs, add\nsomething like the following to your `.emacs`:\n\n    ;; add
  ~/usr/bin to the PATH\n    (setenv \"PATH\" \"$HOME/usr/bin:$PATH\" t)\n\nOnce you
  have a running and connected Scion server, you can use the\ncommands provided by
  scion-mode:\n \n  * `C-c C-x C-l` (`scion-load`) load the current file with Scion.
  \ If\n    the file is within a Cabal project this will prompt to use the\n    settings
  from one of the components in the package description\n    file.  You can still
  choose to load only the current file.\n\n  * `C-c C-o` (`scion-open-cabal-project`)
  configures a Cabal project\n    and loads the meta-data from a Cabal file.  Note
  that this\n    does not type check or load anything.  If you change the Cabal\n
  \   file of a project, call this function to update the session with\n    the new
  settings.\n\nIf loading generates any errors or warnings, a buffer will appear and\nlist
  them all.  Pressing `RET` on a note will jump to its source\nlocation.  Pressing
  `q` closes the buffer, and `C-c C-n`\n(`scion-list-compiler-notes`) brings it back.
  \ Use `M-n`\n(`scion-next-note-in-buffer`) and `M-p`\n(`scion-previous-note-in-buffer`)
  to navigate within the notes of one\nbuffer.\n\n## Completion\n\nThe following commands
  offer completion for a few things.\n\n  * `C-c i l` (`haskell-insert-language`)
  asks for a `LANGUAGE` pragma\n    and adds it to the top of the file.\n  \n  * `C-c
  i p` (`haskell-insert-pragma`) inserts a pragma at the\n    current cursor position.
  \ (At the moment this doesn't try to make\n    sense of the selected pragma, however.)\n
  \   \n  * `C-c i m` (`haskell-insert-module-name`) inserts the name of an\n    external
  module (external), i.e., a module _not_ from the current\n    package.\n    \n  *
  `C-c i f` (`haskell-insert-flag`) insert (GHC) command line flag\n    at point.
  \ (Really only makes sense within an `OPTIONS_GHC` pragma.)\n\n## Experimental features\n\nThe
  following should work most of the cases.\n\n  * `C-c C-.` (`scion-goto-definition`)
  jumps to the definition of the\n    identifier at point.  If there is no identifier
  at point, offers a\n    list to complete on a particular identifier.  This currently
  only\n    works for identifiers defined within the same project.\n\n  * `C-c C-t`
  shows type of identifier at point.  This only works if\n    the current file typechecks,
  but then it also works for local\n    identifiers.  For polymorphic function it
  will show the type to\n    which they are _instantiated_, e.g.,\n\n        f x =
  x + (1::Int)\n\n    Calling this command on `+` will print `Int -> Int -> Int` instead\n
  \   of `Num a => a -> a -> a`.\n\n    \n# Manually Connecting to Scion\n\nIf you
  set the variable `scion-auto-connect` to `'ask` (the default is\n`'always`), Scion
  will ask whether to start the server.  If you set it\nto `nil` you need to manually
  connect to the server.\n\nYou can start the server manually on the command line
  and then use\n\n    M-x scion-connect\n\nto connect to that server.  However, most
  of the time it will be more\nconvenient to start the server from within Emacs:  \n\n
  \   M-x scion\n\n\nVim\n===\n\n## Installation\n\nVim mode requires Python support
  (version 2.4 or later).  Vim 7.2 or\nlater have Python support enabled by default.
  \ However, not every\ndistribution of Vim includes a recent enough version of Python.\nNotably,
  MacVim is only linked against version 2.3.5 to be compatible\nwith OS X 10.4.  You
  will need to build it from source, which is\nhowever reasonably fast.\n\nTo check
  for python support the following should return `1`:\n\n    :echo has('python')\n\nTo
  find out the version use:\n\n    :py import sys\n    :py print sys.version\n\nAdd
  the following to your `~/.vimrc` (or only `~/.gvimrc` if you have\ndifferent Vim
  versions).  If Vim should start the Scion server itself\n(recommended):\n\n    \"
  recommended: vim spawns a scion instance itself:\n    let g:scion_connection_setting
  = [ 'scion', \"<path/to/scion-server>\"]\n    \nNote that there may be problems
  using \"~\" in the path, so better\nspecify the absolute path.\n\nIf you want to
  connect to a running instance of the server via TCP,\nadd (where `4005` is the port
  number used by the scion server):\n\n    \" use socket or TCP/IP connection instead:\n
  \   let g:scion_connection_setting = [ 'socket',  [\"localhost\", 4005] ]\n\nAdd
  the following independently of which connection mode you prefer:\n\n    set runtimepath+=<home>/.cabal/share/scion-<version>/vim_runtime_path/\n\nDepending
  on your Vim config you will need to add the following lines\nas well:\n\n    :filetype
  plugin on\n    :source <home>/.cabal/share/scion-<version>/vim_runtime_path/plugin/haskell_scion.vim\n\nYou
  store certain settings in a configuration file.  (Note: This\nfeature is currently
  experimental and details may change in future\nScion releases.)  To generate an
  initial configuration file run\n\n    :WriteSampleConfigScion\n\nKeep only these
  lines:\n\n    {\"type\":\"build-configuration\", \"dist-dir\":\"dist-scion\", \"extra-args\":
  []}\n    {\"scion-default-cabal-config\":\"dist-scion\"}\n\n## Usage\n\nTo load
  a component (a Cabal library or executable, or just a single\nfile) use one of:\n\n
  \   :LoadComponentScion library\n    :LoadComponentScion executable:cabal_executable_name\n
  \   :LoadComponentScion file:cabal_executable_name\n    :LoadComponentScion\n\nThe
  last one is a shortcut for `file:<this buf>`.  You can use completion.\n\nAt this
  point you should already get some compilation errors.  After\nmodifying the file,
  use\n\n    :BackgroundTypecheckFileScion\n\nto re-typecheck just the current file.\n\nIf
  the file typechecks you can move the cursor onto an identifier and\nuse the command\n\n
  \   :ThingAtPointScion\n\nYou should see something like this, which is the (instantiated)
  type\nof the identifier at the point:\n\n      {'Just': 'print :: [Char] -> IO ()'}\n
  \   \nHave a look at `vim_runtime_path/ftplugin/haskell.vim` to see a list of all\ncommands
  which are implemented yet.\n    \n`BackgroundTypecheckFileScion` should be called
  automatically after\nbuf write.  If you don't like this set `g:dont_check_on_buf_write`
  or\noverwrite `g:haskell_qf_hook` to change open/close quickfix and jump to\nfirst
  *error* behaviour.\n\nDiscussion\n==========\n\nFor discussions about Scion use
  the [scion-lib-devel][ml] mailing list.\n\n  [ml]: http://groups.google.com/group/scion-lib-devel\n\n\nHacking\n=======\n\nThe
  main repository for Scion is hosted on [Github][gh].  Get it via\n\n    $ git clone
  git://github.com/nominolo/scion\n\nSend patches or pull requests to nominolo (email
  address at googlemail\ndot com).  Note that, if you fork the project on Github your
  fork\nwon't take up additional space on your account.\n\n  [gh]: http://github.com\n\n\nBuilding\n--------\n\nFor
  development it is probably easier to use the GNU Make than Cabal\ndirectly.  The
  makefile includes a file called `config.mk` which is\nnot present by default.  You
  can use the provided `config.mk.sample`\nand edit it:\n\n    $ cp config.mk.sample
  config.mk\n    $ edit config.mk\n\nAfter that, the makefile takes care of the rest.\n\n
  \   $ make           # configure and build\n    $ make install   # configure, build,
  and install\n\n\nUsing an in-place GHC\n---------------------\n\nGHC 6.10.1 has
  a couple of problems.  For example, not all error\nmessages are reported using the
  GHC API but instead are printed to\nstdout/stderr.  Some parts also call `exitWith`
  directly.  GHC's HEAD\nbranch has some of these bugs fixed and may contain new features
  not\npresent in the stable branch.  If you want to compile against an\ninplace GHC,
  the following steps should work:\n\n 1. On Windows, make sure that Cabal finds the
  inplace gcc\n\n        $ cd /path/to/ghc\n        $ cp `which gcc` ghc/\n\n    (Adjust
  to version of GCC that GHC was compiled with.)\n\n 2. Set the `GHC_PATH` variable
  to the correct path to for your\n    system.  Make sure *not* to set `HC`, `PKG`,
  or `HADDOCK`, they\n    will automatically be set to point to the inplace versions.\n\n
  3. Use `make`.\n\n\nLicense\n=======\n\nThe parts of Scion written in Haskell are
  licensed under the BSD\nlicense.  The Emacs lisp parts are licensed under the GPL
  license\nversion 2 or (at your option) any later version.\n\n\nKnown Pitfalls\n==============\nIf
  you get an error message like this:\n  \"scion_server: mkTopLevEnv: not interpreted
  main:Main\"\nthen you should rm [Ss]etup.hi [Ss]etup.o in the project directory.\n"
license-name: BSD-3-Clause
