homepage: http://trac.haskell.org/SCC/
changelog-type: ''
hash: fa406c6138e5eae6eede5f3b5791ae670b706569e436da907fea31e7c755a999
test-bench-deps:
  monoid-subclasses: ! '>=0.2 && <0.5'
  bytestring: <1.0
  test-framework: ! '>=0.4.1'
  base: <5
  text: <1.3
  test-framework-quickcheck2: -any
  incremental-parser: ! '>=0.2.2 && <0.3'
  monad-coroutine: ==0.9.*
  containers: -any
  monad-parallel: -any
  transformers: ! '>=0.2 && <0.6'
  QuickCheck: ! '>=2 && <3'
  transformers-compat: ! '>=0.3 && <0.6'
maintainer: blamario@yahoo.com
synopsis: Streaming component combinators
changelog: ''
basic-deps:
  monoid-subclasses: ! '>=0.2 && <0.5'
  bytestring: <1.0
  haskeline: -any
  base: <5
  text: <1.3
  process: -any
  parsec: ==3.*
  incremental-parser: ! '>=0.2.2 && <0.3'
  monad-coroutine: ==0.9.*
  containers: -any
  monad-parallel: -any
  transformers: ! '>=0.2 && <0.6'
  transformers-compat: ! '>=0.3 && <0.6'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- 0.8.2
- 0.8.2.1
- 0.8.2.2
- 0.8.2.4
author: Mario Blazevic
latest: 0.8.2.4
description-type: haddock
description: ! 'SCC is a layered library of Streaming Component Combinators. The lowest
  layer in "Control.Concurent.SCC.Streams"

  defines stream abstractions and nested producer-consumer coroutine pairs based on
  the Coroutine monad transformer.

  On top of that are streaming component types, a number of primitive streaming components
  and a set of component

  combinators. Finally, there is an executable that exposes all the framework functionality
  in a command-line shell.


  The original library design is based on paper <http://conferences.idealliance.org/extreme/html/2006/Blazevic01/EML2006Blazevic01.html>


  Mario Bla&#382;evi&#263;, Streaming component combinators, Extreme Markup Languages,
  2006.'
license-name: LicenseRef-GPL
