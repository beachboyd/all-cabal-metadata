homepage: ''
changelog-type: text
hash: 37f600d3e40f855f11ad313998628c78d86f16a8c7c7c94b0e28abd155e86e5f
test-bench-deps: {}
maintainer: Simon Meier <iridcode@gmail.com>
synopsis: ! 'Automatic generation of Isabelle/HOL correctness proofs

  for security protocols.'
changelog: ! "* 0.10.0.1\n    - make it compile with GHC 7.10.1\n\n* 0.10.0.0\n    -
  upgraded dependency on Isabelle to Isabelle2014\n    - add support for explicit
  matching and non-matching steps in protocols\n    - new protocol example for optimistic
  fair exchange\n\n* 0.8.0.0\n    - upgraded dependency on Isabelle to Isabelle-2013-2\n\n*
  0.6.0.0\n    - ported to Isabelle-2013 by Andreas Lochbihler\n    - removed buggy
  isabelle timout support\n    - tested compilation on GHC 7.4.2\n\n* 0.5.0.0\n    -
  implemented proof generation for injective agreement\n    - fixed bug in unification
  of inverse-key constructors\n\n* 0.4.1.0 Bugfixes and dropped export of library\n
  \   - widen 'pretty' dependency\n    - update package description\n\n* 0.4.0.0 Bugfixes
  and dropped export of library\n\n    - Compiles now with GHC 7.0.x, 7.2.x, 7.4.x\n
  \   - Fixed some corner cases in unification code for key-inversion.\n    - Library
  is no longer exported, as there are no more users of it.\n      We split our internal
  development and the tamarin-prover provides its\n      own utility libraries.\n\n*
  0.3.2 Lexer improvements\n\n    - Also lex SLASH and BACKSLASH symbols.\n\n\n* 0.3.1
  Bugfix, small enhancement release\n\n    - Bugfix: Added missing cases for bidirectional
  shared keys in Message\n      deconstruction functions.\n\n    - Provide more precise
  warnings for internal certification checks. Improves\n      debugging experience.\n\n
  \   - Updated documentation: UnionFind and .cabal project description\n\n    - Allow
  parsing of user-specified type assertions. For protocols with\n      nested encryptions,
  the inferred type assertions are sometimes not\n      precise enough. We handle
  these cases using user-specified type\n      assertions.\n\n    - Removed support
  for weak-atomicity, as it is subsumed by type assertions.\n\n    - Changed lexer
  to also recognize `!'\n\n* 0.3.0 First public version\n\n    Aligned with paper
  submission for CCS'11: Provably repairing the ISO-9798\n    authentication protocols.\n"
basic-deps:
  base: ==4.*
  time: ! '>=1.1 && <1.6'
  json: ! '>=0.5 && <0.10'
  filepath: ! '>=1.2 && <1.5'
  process: ! '>=1.1 && <1.3'
  uniplate: ==1.6.*
  parsec: ==3.1.*
  array: ! '>=0.3 && <0.6'
  containers: ! '>=0.4.2 && <0.6'
  utf8-string: ! '>=0.3.7'
  mtl: ! '>=2.1 && <3.0'
  cmdargs: ! '>=0.10.7'
  tagsoup: ! '>=0.12 && <0.14'
  pretty: ! '>=1.0 && <1.2'
  safe: ! '>=0.2 && <0.4'
  directory: ! '>=1.0 && <1.3'
all-versions:
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.8.0.0
- 0.10.0.0
- 0.10.0.1
author: ! 'Simon Meier <iridcode@gmail.com>,

  Andreas Lochbihler <andreas.lochbihler@inf.ethz.ch>'
latest: 0.10.0.1
description-type: markdown
description: ! "The scyther-proof security protocol verification tool\n=====================================================\n\n![master
  branch build-status](https://travis-ci.org/meiersi/scyther-proof.svg?branch=master)\n\n-
  Authors: Simon Meier <iridcode@gmail.com>, Andreas Lochbihler <andreas.lochbihler@inf.ethz.ch>\n-
  Creation Date: 2011-05-13\n- Last Updated:  2015-02-20 by Andreas Lochbihler\n\n1.
  Introduction\n===============\n\n  Every distribution of the scyther-proof tool
  contains a copy of the\n  Isabelle/HOL theories formalizing its verification theory
  and a copy of the\n  protocol models that were verified using scyther-proof. In
  particular, these\n  examples include models for all of our repaired versions of
  the protocols\n  from the ISO/IEC-9798 authentication standard. (In the source distribution\n
  \ of scyther-proof they can be found at `data/examples/iso9798`.)\n\n  In the following
  sections,  we give step by step instructions to get the\n  whole system working
  and we explain the usage of our tools and provide\n  further information (e.g.,
  building documentation).\n\n\n2. Installation instructions\n============================\n\n2.1
  Installing scyther-proof\n----------------------------\n\n  You need a working Haskell
  environment that provides a version of GHC from\n  7.0.x to 7.4.x and the 'cabal
  install' tool. The simplest way to get such an\n  environment is to download and
  install the Haskell Platform package for your\n  OS.\n\n    http://hackage.haskell.org/platform/\n\n
  \ Then call\n\n    cabal install\n\n  in the root directory of this source code
  package. This will use the\n  Haskell's deployment tool `cabal-install` to download
  all missing libraries\n  from Hackage, the central Haskell library repository and
  install the\n  `scyther-proof` executable in the default installation location of\n
  \ cabal-install.  The installation location is printed at the end of the build\n
  \ process.\n\n  Call\n\n    scyther-proof\n\n  without any arguments to get an overview
  of the arguments supported and the\n  paths to the examples and the Isabelle/HOL
  theories.\n\n\n2.2 Installing the Isabelle/HOL theories\n----------------------------------------\n\nDownload
  and install full Isabelle2014 according to the installation\ninstructions at\n\n
  \   http://isabelle.in.tum.de/website-Isabelle2014/\n\nThe first time you call `scyther-proof`
  with the `--isabelle` flag it will\nbuild the logic image of the Isabelle/HOL theories
  formalizing the security\nprotocol verification theory underlying `scyther-proof`.\n\n\n3.
  Usage\n========\n\n\n3.1 scyther-proof\n-----------------\n\n\n  Usage Example\n
  \ -------------\n\n  You can now execute the 'scyther-proof' binary without any
  arguments to get a\n  list of the available flags. A simple example usage is (assuming\n
  \ 'scyther-proof' is in the PATH).\n\n    scyther-proof $EXAMPLE_DIR/classic/NS_Public.spthy
  --shortest\n\n  This will parse the NSL protocol modeled in the 'nsl.spthy' file
  and output\n  all specified security properties together with the proof with the
  fewest\n  number of chain rule applications to stdout.\n\n  To generate an Isabelle
  proof script, two additional options are required.\n\n    scyther-proof $EXAMPLE_DIR/classic/NS_Public.spthy
  --shortest --output=nsl_cert.thy --ASCII\n\n  The first one specifies the output
  file and the second one instructs\n  scyther-proof to use Isabelle's ASCII notation
  as the output format.\n\n  To build the source code documentation you can use the
  call\n\n    cabal configure; cabal haddock\n\n  which will use cabal-install and
  Haskell's source code documentation tool\n  'haddock' to build the source code documentation.
  The location of this\n  documentation is again output on the command line.\n\n\n3.2
  The Isabelle/HOL theories\n-----------------------------\n\n   Note that in many
  case the easiest way to start with constructing\n   machine-checked proofs interactively
  is to use a proof script generated by\n   scyther-proof.\n\n   Using the Isabelle/jEdit
  Prover IDE\n   -----------------------------------\n\n   In the directory output
  by scyther-proof, load the Tutorial on interactive\n   proof construction using
  the following commands\n\n        cd <theory-dir-output-by-scytherproof>/src\n        isabelle
  jedit -d $SCYTHER_PROOF_HOME/data/isabelle -l ESPL Tutorial.thy\n\n   where $SCYTHER_PROOF_HOME
  expands to the home directory of scyther-proof.\n\n\n***\n\n`Happy Proving :)`\n\nIn
  case of questions do not hesistate to contact Andreas Lochbihler\n(andreas.lochbihler@inf.ethz.ch)
  or Simon Meier (iridcode@gmail.com).\n\n"
license-name: LicenseRef-GPL
