homepage: https://github.com/Lysxia/scanf#readme
changelog-type: ''
hash: a4d760fc31120be424a3527553336679493882d7fac78c148cb8797a67c35f36
test-bench-deps:
  base: -any
  scanf: -any
maintainer: lysxia@gmail.com
synopsis: Easy and type-safe format strings for parsing and printing
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  template-haskell: -any
all-versions:
- 0.1.0.0
author: Li-yao Xia
latest: 0.1.0.0
description-type: markdown
description: ! "# Haskell scanf [![Build Status](https://travis-ci.org/Lysxia/scanf.svg?branch=master)](https://travis-ci.org/Lysxia/scanf)\n\nA
  lightweight library for one-off parsing and printing.\n\n```haskell\nscanf [fmt|%d
  lazy %s and %d strict %s|]\n      \"3 lazy functions and 2 strict fields\"\n  =
  Just (3 :+ \"functions\" :+ 2 :+ \"fields\" :+ ())\n```\n\nQuasiquotes are optional.
  Format strings can also be defined with pure\nHaskell combinators.\n\n```haskell\nprintf
  (fmt_ (int . \" lazy \" % string . \" and \" % int . \" strict \" % string)\n       (8
  :+ \"dogs\" :+ 9 :+ \"cats\" :+ ())\n  = \"8 lazy dogs and 9 strict cats\"\n```\n\nWith
  quasiquotes, the following conversion strings are supported:\n\n- `%d`: signed integer
  (`Int`)\n- `%l`: signed integer (`Integer`, unbounded)\n- `%f`: floating point (`Double`)\n-
  `%s`: string of non-space characters (`String`)\n- `%c`: single character (`Char`)\n-
  `%%`: parse/print a literal percent character\n\nN.B.: in `scanf`, spaces in the
  format string match any number of whitespace\ncharacter until the next nonspace
  character.\n\n---\n\nThough it also offers a `printf` function, *scanf* is thus
  named as\nthere are only few other preexisting Haskell implementations,\nwhereas
  many Haskell *printf* libraries can already be found on Hackage.\n\nSimilar to:\n\n-
  [xformat](https://hackage.haskell.org/package/xformat) (scanf and printf)\n- [fmt](https://hackage.haskell.org/package/fmt)
  (printf)\n- [formatting](https://hackage.haskell.org/package/formatting) (printf)\n"
license-name: MIT
