homepage: https://hedgehog.qa
changelog-type: markdown
hash: a25833a9cecd4499303d1f48328dbe085c0d223e4ef415d7e5af7f96dddedfdf
test-bench-deps:
  base: ! '>=3 && <5'
  text: ! '>=1.1 && <1.3'
  hedgehog: -any
  containers: ! '>=0.4 && <0.6'
  pretty-show: ! '>=1.6 && <1.7'
  transformers: ! '>=0.3 && <0.6'
maintainer: Jacob Stanley <jacob@stanley.io>
synopsis: Hedgehog will eat all your bugs.
changelog: ! "## Version 0.5.1 (2017-12-06)\n\n- Only invoke `setNumCapabilities`
  when using the `-threaded` runtime ([#130][130], [@ekmett][ekmett])\n- Correct `mixGamma`
  oddness check ([#124][124], [@markhibberd][markhibberd])\n\n## Version 0.5 (2017-07-16)\n\n-
  Parallel state machine testing, allows detection of commands which are not-atomic
  ([#98][98], [@jystic][jystic])\n- Easier to use variables for state machine testing
  ([#94][94], [@jystic][jystic])\n- `MonadGen` class allows the use of transformers
  like `ReaderT` and `StateT` on the outside of generators ([#99][99], [@jystic][jystic])\n-
  Better error messages for tests which throw exceptions ([#95][95], [@jystic][jystic])\n-
  Separated test input generation and assertions in to `PropertyT` and `TestT` respectively,
  this allows `TestT` to have a `MonadBaseControl` instance ([#96][96], [@jystic][jystic])\n-
  This document grew links to the pull requests which introduced various changes ([#93][93],
  [@moodmosaic][moodmosaic])\n\n## Version 0.4.1 (2017-06-28)\n\n- Fixed runtime type
  error that could occur when shrinking state machine commands ([#91][91], [@jystic][jystic])\n\n##
  Version 0.4 (2017-06-28)\n\n- Abstract state machine testing, check out the Tim
  Humphries' great [blog post](http://teh.id.au/posts/2017/07/15/state-machine-testing)
  or the [process registry example](https://github.com/hedgehogqa/haskell-hedgehog/blob/master/hedgehog-example/test/Test/Example/Registry.hs)
  to see how it works ([#89][89], [@jystic][jystic])\n- `liftCatch`, `liftCatchIO`,
  `withCatch` functions for isolating exceptions during tests ([#89][89], [@jystic][jystic])\n\n##
  Version 0.3 (2017-06-11)\n\n- Exponential range combinators ([#43][43], [@chris-martin][chris-martin])\n-
  Roundtrip example, check out the [blog post](http://teh.id.au/posts/2017/06/07/round-trip-property/)
  ([#85][85], [@thumphries][thumphries])\n- `tripping` now displays intermediate value
  ([#85][85], [@jystic][jystic])\n- `distribute` function for pulling a transformer
  out to the top level ([#83][83], [@jystic][jystic])\n- `withExceptT` function for
  executing tests with an inner `ExceptT` (e.g. `Test (ExceptT x m) a`) ([#83][83],
  [@jystic][jystic])\n\n## Version 0.2.2 (2017-05-16)\n\n- Fixed scope of `unicode`
  character generators ([#76][76], [@moodmosaic][moodmosaic])\n- Widen version bounds
  for some dependencies ([#80][80], [@amarpotghan][amarpotghan])\n- Expose test modules
  to fix build on nix / hydra ([#78][78], [@amarpotghan][amarpotghan])\n- Fixes for
  GHC 8.2 RC2 ([#77][77], [@erikd][erikd])\n\n## Version 0.2.1 (2017-05-09)\n\n- Added
  `ascii`, `latin1`, `unicode` character generators ([#73][73], [@jystic][jystic])\n\n##
  Version 0.2 (2017-05-06)\n\n- Added a quiet test runner which can be activated by
  setting `HEDGEHOG_VERBOSITY=0` ([@jystic][jystic])\n- Concurrent test runner does
  not display tests until they are executing ([@jystic][jystic])\n- Test runner now
  outputs a summary of how many successful / failed tests were run ([@jystic][jystic])\n-
  `checkSequential` and `checkParallel` now allow for tests to be run without Template
  Haskell ([@jystic][jystic])\n- Auto-discovery of properties is now available via
  `discover` instead of being baked in ([@jystic][jystic])\n- `annotate` allows source
  code to be annotated inline with extra information ([@jystic][jystic])\n- `forAllWith`
  can be used to generate values without a `Show` instance ([@jystic][jystic])\n-
  Removed uses of `Typeable` to allow for generating types which cannot implement
  it ([@jystic][jystic])\n\n[jystic]:\n  https://github.com/jystic\n[chris-martin]:\n
  \ https://github.com/chris-martin\n[thumphries]:\n  https://github.com/thumphries\n[moodmosaic]:\n
  \ https://github.com/moodmosaic\n[amarpotghan]:\n  https://github.com/amarpotghan\n[erikd]:\n
  \ https://github.com/erikd\n[ekmett]:\n  https://github.com/ekmett\n[markhibberd]:\n
  \ https://github.com/markhibberd\n\n[130]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/130\n[124]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/124\n[99]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/99\n[98]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/98\n[96]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/96\n[95]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/95\n[94]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/94\n[93]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/93\n[91]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/91\n[89]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/89\n[85]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/85\n[83]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/83\n[80]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/80\n[78]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/78\n[77]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/77\n[76]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/76\n[73]:\n  https://github.com/hedgehogqa/haskell-hedgehog/pull/73\n[43]:\n
  \ https://github.com/hedgehogqa/haskell-hedgehog/pull/43\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.9'
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.6 && <2.8'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=3 && <5'
  time: ! '>=1.4 && <1.9'
  text: ! '>=1.1 && <1.3'
  monad-control: ! '>=1.0 && <1.1'
  async: ! '>=2.0 && <2.2'
  concurrent-output: ! '>=1.7 && <1.11'
  containers: ! '>=0.4 && <0.6'
  wl-pprint-annotated: ! '>=0.0 && <0.2'
  ansi-terminal: ! '>=0.6 && <0.8'
  mtl: ! '>=2.1 && <2.3'
  mmorph: ! '>=1.0 && <1.2'
  lifted-async: ! '>=0.7 && <0.10'
  transformers-base: ! '>=0.4 && <0.5'
  pretty-show: ! '>=1.6 && <1.7'
  transformers: ! '>=0.5 && <0.6'
  random: ! '>=1.1 && <1.2'
  th-lift: ! '>=0.7 && <0.8'
  resourcet: ! '>=1.1 && <1.2'
  template-haskell: ! '>=2.10 && <2.13'
  primitive: ! '>=0.6 && <0.7'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
author: Jacob Stanley
latest: '0.5.1'
description-type: markdown
description: ! "hedgehog [![Hackage][hackage-shield]][hackage] [![Travis][travis-shield]][travis]\n========\n\n>
  Hedgehog will eat all your bugs.\n\n<img src=\"https://github.com/hedgehogqa/haskell-hedgehog/raw/master/img/hedgehog-logo.png\"
  width=\"307\" align=\"right\"/>\n\n[Hedgehog](http://hedgehog.qa/) is a modern property-based
  testing\nsystem, in the spirit of QuickCheck. Hedgehog uses integrated shrinking,\nso
  shrinks obey the invariants of generated values by construction.\n\n## Features\n\n-
  Integrated shrinking, shrinks obey invariants by construction.\n- Abstract state
  machine testing.\n- Generators allow monadic effects.\n- Range combinators for full
  control over the scope of generated numbers and collections.\n- Equality and roundtrip
  assertions show a diff instead of the two inequal values.\n- Template Haskell test
  runner which executes properties concurrently.\n\n## Example\n\nThe main module,
  [Hedgehog][haddock-hedgehog], includes almost\neverything you need to get started
  writing property tests with Hedgehog.\n\nIt is designed to be used alongside [Hedgehog.Gen][haddock-hedgehog-gen]\nand
  [Hedgehog.Range][haddock-hedgehog-range] which should be imported\nqualified. You
  also need to enable Template Haskell so the Hedgehog test\nrunner can find your
  properties.\n\n```hs\n{-# LANGUAGE TemplateHaskell #-}\n\nimport           Hedgehog\nimport
  qualified Hedgehog.Gen as Gen\nimport qualified Hedgehog.Range as Range\n```\n\nOnce
  you have your imports set up, you can write a simple property:\n\n```hs\nprop_reverse
  :: Property\nprop_reverse =\n  property $ do\n    xs <- forAll $ Gen.list (Range.linear
  0 100) Gen.alpha\n    reverse (reverse xs) === xs\n```\n\nAnd add the Template Haskell
  splice which will discover your properties:\n\n```hs\ntests :: IO Bool\ntests =\n
  \ checkParallel $$(discover)\n```\n\nIf you prefer to avoid macros, you can specify
  the group of properties\nto run manually instead:\n\n```hs\n{-# LANGUAGE OverloadedStrings
  #-}\n\ntests :: IO Bool\ntests =\n  checkParallel $ Group \"Test.Example\" [\n      (\"prop_reverse\",
  prop_reverse)\n    ]\n```\n\nYou can then load the module in GHCi, and run it:\n\n```\nλ
  tests\n━━━ Test.Example ━━━\n  ✓ prop_reverse passed 100 tests.\n\n```\n\n [hackage]:
  http://hackage.haskell.org/package/hedgehog\n [hackage-shield]: https://img.shields.io/badge/hackage-v0.5-blue.svg\n\n
  [travis]: https://travis-ci.org/hedgehogqa/haskell-hedgehog\n [travis-shield]: https://travis-ci.org/hedgehogqa/haskell-hedgehog.svg?branch=master\n\n
  [haddock-hedgehog]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog.html\n
  [haddock-hedgehog-gen]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Gen.html\n
  [haddock-hedgehog-range]: http://hackage.haskell.org/package/hedgehog/docs/Hedgehog-Range.html\n"
license-name: BSD3
