homepage: https://github.com/pepeiborra/hexml-lens#readme
changelog-type: ''
hash: aefb089dad5c6db7324a59a254390f1addc78be9f3bbcf3f4628a6fbaa833a1f
test-bench-deps:
  bytestring: -any
  hexml-lens: -any
  base: -any
  hspec: -any
  doctest: -any
  wreq: -any
  hexml: -any
  lens: -any
  QuickCheck: -any
maintainer: pepeiborra@gmail.com
synopsis: Lenses for the hexml package
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  foundation: -any
  hexml: -any
  lens: -any
  contravariant: -any
  profunctors: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.2.0
- 0.2.1
author: Jose Iborra
latest: 0.2.1
description-type: markdown
description: ! "# hexml-lens\n[![Hackage](https://img.shields.io/hackage/v/hexml-lens.svg)](https://hackage.haskell.org/package/hexml-lens)\n[![Stackage
  Nightly](http://stackage.org/package/hexml-lens/badge/nightly)](http://stackage.org/nightly/package/hexml-lens)\n[![Travis
  Build Status](https://travis-ci.org/pepeiborra/hexml-lens.svg)](https://travis-ci.org/pepeiborra/hexml-lens)\n\nFolds
  and getters for the Hexml `Node` type.\n```\n{-# LANGUAGE RecordWildCards #-}\nimport
  Control.Lens hiding (children)\nimport qualified Data.ByteString as B\nimport qualified
  Data.ByteString.Lazy.Char8 as LB\nimport Network.Wreq\nimport Text.XML.Hexml\nimport
  Text.XML.Hexml.Lens\n\nurl :: [Char]\nurl = \"http://aiweb.cs.washington.edu/research/projects/xmltk/xmldata/data/courses/reed.xml\"\n\ndata
  Place s = Place { building :: s , room :: Int}\n  deriving Show\n\ndata Course s
  = Course { title, instructor :: s , place :: Place s}\n  deriving Show\n\nmain ::
  IO ()\nmain = do\n  r <- get url\n  let stripDocType = LB.unlines . drop 2 . LB.lines\n
  \ let courses = take 10 $ r ^.. responseBody . to stripDocType . _XML . _children
  . courseF\n  print courses\n\ncourseF :: Fold Node (Course B.ByteString)\ncourseF
  = runFold $ do\n  title <- Fold $ node \"title\" . textContents\n  instructor <-
  Fold $ node \"instructor\" . textContents\n  place <- Fold $ node \"place\" . placeF\n
  \ return $ Course{..}\n\nplaceF :: Fold Node (Place B.ByteString)\nplaceF = runFold
  $ do\n  building <- Fold $ node \"building\" . textContents\n  room     <- Fold
  $ node \"room\" . textContents . _Show\n  return (Place building room)\n```\n"
license-name: BSD-3-Clause
