homepage: https://github.com/chessai/hedgehog-classes
changelog-type: markdown
hash: d213ad645098532321880899eb002a006223188cd6da04df79c0a58e9ddd86b3
test-bench-deps:
  base: -any
  hedgehog: -any
  containers: -any
  binary: -any
  hedgehog-classes: -any
  aeson: -any
maintainer: chessai1996@gmail.com
synopsis: Hedgehog will eat your typeclass bugs
changelog: |
  # Changelog

  `hedgehog-classes` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  0.2.0.1
  =======
  * improve reliability of hedgehog output filtering.

  0.2
  ===

  * switch to hedgehog-1.0
  * add `binaryLaws`
  * relax cabal-version to 2.2
  * use randomly generated, not hard-coded functions, in bifoldable tests
  * significantly simplify pretty printing using `silently` package, and
    bad hack.
  * make several haddock improvements.

  0.1.2
  =====

  * add `semiringLaws`, `ringLaws`, `starLaws`
  * fix bug in `foldableLaws` that could cause implementations of
    `foldMap` and `fold` that evaluate in weird orders to pass (rather than fail).

  0.1.1
  =====

  * Initial (stable) hackage release.

  0.0.0
  =====

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/chessai/hedgehog-classes/releases
basic-deps:
  base: ! '>=4.12 && <4.14'
  hedgehog: ! '>=1 && <1.1'
  containers: ! '>=0.5 && <0.7'
  silently: ! '>=1.2 && <1.3'
  wl-pprint-annotated: ! '>=0.0 && <0.2'
  binary: ! '>=0.8 && <0.9'
  pretty-show: ! '>=1.9 && <1.10'
  transformers: ! '>=0.5 && <0.6'
  semirings: ! '>=0.2 && <0.4'
  aeson: ! '>=0.9 && <1.5'
all-versions:
- 0.1.1.0
- 0.1.2
- '0.2'
- 0.2.0.1
author: chessai
latest: 0.2.0.1
description-type: markdown
description: "hedgehog-classes [![Hackage][hackage-shield]][hackage]\n================\n\n>
  Hedgehog will eat your typeclass bugs.\n\n<img src=\"https://github.com/hedgehogqa/haskell-hedgehog/raw/master/img/hedgehog-logo.png\"
  width=\"307\" align=\"right\"/>\n\n## Motivation\n\n`hedgehog-classes` is a wrapper
  around [Hedgehog](http://hedgehog.qa/) that aims to provide a simple, straightforward
  API for testing common typeclass laws <i>quickly</i>, while providing good error
  messages to help debug any failing tests. It is inspired by the [quickcheck-classes](http://hackage.haskell.org/package/quickcheck-classes)
  library.\n\n## API Overview\n\nThe API of `hedgehog-classes` is dead simple. There
  are three parts.\n\nThe first part is a datatype, called 'Laws', which looks like
  this:\n\n```haskell\ndata Laws = Laws\n  { lawsTypeclass :: String\n  , lawsProperties
  :: [(String,Property)]\n  }\n```\n\nIt is a typeclass name along with a list of
  named property tests.\n\nThe second part of `hedgehog-classes` are the functions,
  which follow a simple structure. All functions in `hedgehog-classes` have one of
  the following three type signatures, based on the kind of the type which the corresponding
  typeclass parameterises (Nullary, Unary, or Binary). Note that they all return a
  'Laws', only the inputs are different. Below, 'Ctx' refers to the typeclass in question:\n\n```haskell\n--
  Typeclasses that have kind 'Type -> Constraint', e.g. 'Eq'\ntcLaw :: (Ctx a, Eq
  a, Show a) => Gen a -> Laws\n\n-- Typeclasses that have kind '(Type -> Type) ->
  Constraint', e.g. 'Functor'\ntcLaw1 ::\n  ( Ctx f\n  , forall x. Eq x => Eq (f x)\n
  \ , forall x. Show x => Show (f x)\n  ) => (forall x. Gen x -> Gen (f x)) -> Laws\n\n--
  Typeclasses that have kind '(Type -> Type -> Type) -> Constraint', e.g. 'Bifunctor'\ntcLaw2
  ::\n  ( Ctx f\n  , forall x y. (Eq x, Eq y) => Eq (f x y)\n  , forall x y. (Show
  x, Show y) => Show (f x y)\n  ) => (forall x y. Gen x -> Gen y -> Gen (f x y)) ->
  Laws\n```\n\nThe third and last part of `hedgehog-classes` are the three convenience
  functions used to run your tests. They all return an `IO Bool`, where `True` is
  returned if all the tests pass, and `False` otherwise. They are as following:\n\n```haskell\n--
  Test a single typeclasses' laws.\nlawsCheck :: Laws -> IO Bool\n\n-- Test multiple
  typeclass laws for a single type.\nlawsCheckOne :: Gen a -> [Gen a -> Laws] -> IO
  Bool\n\n-- Test mutliple typeclass laws for multiple types.\n-- The argument is
  pairs of type names and their associated laws to test.\nlawsCheckMany :: [(String,
  [Laws])] -> IO Bool\n```\n\nThat is all there is to using `hedgehog-classes` in
  your test suite. For usage examples, see the [haddocks](http://hackage.haskell.org/package/hedgehog-classes).\n\n##
  Distributing your own `Laws`\n\n`hedgehog-classes` also exports some functions which
  you may find useful for writing functions that allow users to test the laws of typeclasses
  you define in your own libraries, along with utilities for providing custom error
  messages. They can be found [here](http://hackage.haskell.org/package/hedgehog-classes-0.1.0.0/docs/Hedgehog.-Classes.html#g:6).\n\n##
  Example error messages\nBelow is an example of an error message one might get from
  a failed test from `hedgehog-classes`:\n\n![alt text](imgs/badlist.png \"Here we
  can see a definition of foldl' that does not accumulate strictly\")\n\n![alt text](imgs/badsemigroup.png
  \"Here we can see a semigroup instance which is not associative\")\n\n## Differences
  from similar libraries\nThere are a number of libraries that have similar goals
  to `hedgehog-classes`, and I will discuss only those that wrap `hedgehog`, not `QuickCheck`.\n\n
  \ - [hedgehog-checkers](https://github.com/bitemyapp/hedgehog-checkers):\n      -
  Incomplete\n      - Not actively developed\n      - Less typeclasses\n      - Hasn't
  been uploaded to hackage, even with a sufficient starting-point API\n      - API
  is slightly more complex\n      - Does not make an effort to provide custom error
  messages\n      - Currently the only thing `hedgehog-checkers` can do that this
  library cannot\n        is test properties of higher-kinded typeclass laws where
  the construction of\n        the type requires constraints on its type arguments
  (e.g. `Ord` for something\n        like `Data.Set.Set`)\n      \n  - [hedgehog-laws](https://github.com/qfpl/hedgehog-laws):\n
  \     - All of the things that apply to `hedgehog-checkers`, but even more incomplete.\n\n##
  Supported Typeclasses\n\n  - `base`\n       - Alternative\n       - Applicative\n
  \      - Arrow\n       - Bifoldable\n       - Bifunctor\n       - Bitraversable\n
  \      - Bits/FiniteBits\n       - Category\n       - Contravariant\n       - Enum\n
  \      - Eq\n       - Foldable\n       - Functor\n       - Generic\n       - Integral\n
  \      - Monad\n       - MonadIO\n       - MonadPlus\n       - MonadZip\n       -
  Ord\n       - Semigroup\n       - Show\n       - ShowRead\n       - Storable\n       -
  Traversable\n  - `aeson`\n       - ToJSON\n       - ToJSON/FromJSON\n  - `semirings`\n
  \      - Semiring\n       - Ring\n\nSome typeclasses can have additional laws, which
  are not part of their sufficient definition. A common example is commutativity of
  a monoid. In such cases where this is sensible, `hedgehog-classes` provides functions
  such `commutativeMonoidLaws`, `commutativeSemigroupLaws`, etc. `hedgehog-classes`
  also tests that `foldl'`/`foldr'` actually accumulate strictly. There are other
  such cases that are documented on Hackage.\n\nSupport will be added for the typeclasses
  from [semigroupoids](http://hackage.haskell.org/package/semigroupoids).\n\nSupport
  will be added for the `Semiring`/`Ring` typeclasses from [semirings](http://hackage.haskell.org/package/semirings).\n\n##
  Building\n\nCurrently, you need GHC >= 8.5 to build this (because of `-XQuantifiedConstraints`).
  Some CPP can be used to make this buildable with older GHCs, I just have not done
  so yet. I would gladly take a PR that does so, but only for GHC 8.2.2 and newer.\n\nTo
  use this library for testing, just add it to a test stanza of your cabal file.\n\nTo
  use this library to export your own `Laws` functions which you wish to distribute,
  add it to the library stanza of your cabal file.\n\n  [hackage]: http://hackage.haskell.org/package/hedgehog-classes\n
  \ [hackage-shield]: https://img.shields.io/badge/hackage-v0.1.1.0-blue.svg\n\n##
  Improvements\n\nThere are a number of improvements that can be made to the API of
  `hedgehog-classes`:\n\n  - Traversable needs better error messages, without exposing
  library internals.\n  - Arrow Laws 5/6/7 need names.\n  - Some laws could use better
  names, as some of them I had to make up.\n  - ixLaws can accidentally be extremely
  inefficient and I'm not sure how to fix that.\n  - The test suite is incomplete.\n
  \ - There is no 'bad' test suite, for testing error messages.\n  - There could be
  spelling mistakes/grammatical errors/inconsistencies in the custom error messages.\n\nYou
  can help fix any of the above by opening an issue/PR! Thanks.\n"
license-name: BSD-3-Clause
