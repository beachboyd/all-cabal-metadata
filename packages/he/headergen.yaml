homepage: https://github.com/aka-bash0r/headergen
changelog-type: markdown
hash: 023d8d691b2cab19d35791183c8de0ef0aafb12508b24a81908ee52e6704e1e0
test-bench-deps: {}
maintainer: aka.bash0r@gmail.com
synopsis: Creates a header for a haskell source file.
changelog: ! '# 0.2.0.0

  * Implemented templating engine.

  * Added two basic templates.


  # 0.1.1.1

  * Fixed a bug in the build scripts causing build of 0.1.1.0 to fail.


  # 0.1.1.0

  * Refactored all of the code and extracted major portions to own modules.

  * Implemented command "help" for detailed help information.


  # 0.1.0.0

  * Implemented creation of a .headergen.def

  * Implemented creation of new files via .headergen.def


  ## Disclaimer

  This is a mere prototype providing basic functionalities. It''s only use is to

  provide it''s functionality for further development of headergen. You can use it

  but it won''t be very pleasing to use as it''s feature of automatic updating

  headers in existing files is not implementet yet. Also the sources are very

  unstructured and not splitted over several modules.


'
basic-deps:
  bytestring: ! '>=0.10.6 && <0.17'
  haskeline: ! '>=0.7.2.1 && <0.8'
  base: ! '>=4.8 && <4.9'
  time: ! '>=1.5.0.1 && <1.6'
  aeson-pretty: ! '>=0.7.2 && <0.8'
  filepath: ! '>=1.4 && <1.5'
  aeson: ! '>=0.9.0.1 && <0.10'
  directory: ! '>=1.2.2 && <1.3'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
author: Nils 'bash0r' Jonsson
latest: 0.2.0.0
description-type: markdown
description: ! "# headergen\nAn application written in Haskell for generating headers
  for Haskell source files.\n\n# Usage\n\nUsage: headergen {help [all|COMMAND]|init|create
  LANGUAGE TEMPLATE MODULE}\n\n  headergen create LANGUAGE TEMPLATE MODULE </br>\n
  \   * creates a new module in current working directory. </br>\n  headergen init
  </br>\n    * initializes a new .headergen.def. </br>\n  headergen help </br>\n    *
  shows this help information </br>\n  headergen help COMMAND </br>\n    * shows detailed
  help information\n\n# Supported Languages\n\nAs for now only Haskell is supported.
  It is planned to implement support for more languages in future releases.\n\n# TODO\n*
  Extract help message interface from command module level to avoid mutual recursion
  over module level.\n* Implement reading of cabal files instead of using own setting
  files.\n* Implement a parser for updating existing source files.\n* Implement reading
  of file associations from file.\n* Implement support for more languages.\n\n"
license-name: MIT
