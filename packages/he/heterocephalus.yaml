homepage: https://github.com/arowM/heterocephalus#readme
changelog-type: markdown
hash: b3946806d8c7f84baff1caa813650a978f327db4848fb657e6f80fc840c5edd7
test-bench-deps:
  heterocephalus: -any
  base: -any
  doctest: ! '>=0.10'
  Glob: -any
maintainer: arow.okamoto+github@gmail.com
synopsis: A type-safe template engine for working with popular front end development
  tools
changelog: ! 'Change Log

  ==========


  Version 1.0.5.0 (2017-06-05)

  ----------------


  ### New features


  * Add settings to be able to change the character used to deliminate control statements
  #18


  ### Document updates


  * Fixed small spelling/grammars on readme #19


  Version 1.0.4.0 (2017-02-07)

  ----------------


  ### New features


  * Expose htmlSetting and textSetting


  Version 1.0.3.0 (2017-01-24)

  ----------------


  ### New features


  * Add `case` control statement


  Version 1.0.2.0 (2016-12-13)

  ----------------------------


  #### New features


  * Add `compileTextFileWith` and `compileHtmlFileWith` to inject extra variables

  * Add `ScopeM` type for specifying extra template variables

  * Add `setDefault` and `overwrite` for constructing `ScopeM`

'
basic-deps:
  shakespeare: ! '>=2.0 && <2.1'
  base: ! '>=4.7 && <5'
  blaze-markup: ! '>=0.7 && <0.9'
  text: ! '>=1.2 && <1.3'
  parsec: ! '>=3.1 && <3.2'
  dlist: ! '>=0.7.1.1'
  containers: ! '>=0.5 && <0.6'
  mtl: -any
  blaze-html: ! '>=0.8 && <0.10'
  transformers: -any
  template-haskell: ! '>=2.7 && <3'
all-versions:
- '0.1.0.0'
- '1.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.1.0'
- '1.0.1.1'
- '1.0.1.2'
- '1.0.2.0'
- '1.0.2.3'
- '1.0.3.0'
- '1.0.3.1'
- '1.0.4.0'
- '1.0.5.0'
- '1.0.5.1'
- '1.0.5.2'
author: Kadzuya Okamoto
latest: '1.0.5.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/arowM/heterocephalus.svg?branch=master)](https://travis-ci.org/arowM/heterocephalus)\n[![Hackage](https://img.shields.io/hackage/v/heterocephalus.svg)](https://hackage.haskell.org/package/heterocephalus)\n[![Stackage
  LTS](http://stackage.org/package/heterocephalus/badge/lts)](http://stackage.org/lts/package/heterocephalus)\n[![Stackage
  Nightly](http://stackage.org/package/heterocephalus/badge/nightly)](http://stackage.org/nightly/package/heterocephalus)\n\n![hetero-mini](https://cloud.githubusercontent.com/assets/1481749/20267445/2a9da33e-aabe-11e6-8aa7-88e36f0a8d5d.jpg)\n\n#
  Heterocephalus template engine\n\nA type-safe template engine for working with popular
  front end development tools.\n\nAny PRs are welcome, even for documentation fixes.
  \ (The main author of this library is not an English native.)\n\n* [Who should use
  this?](#who-should-use-this)\n* [Features](#features)\n* [Usage](#usage)\n* [Checking
  behaviours in `ghci`](#checking-behaviours-in-ghci)\n* [Syntax](#syntax)\n* [Why
  \"heterocephalus\"?](#why-heterocephalus)\n\n## Who should use this?\n\nIf you are
  planning to use Haskell with recent web front-end tools like gulp,\nwebpack, npm,
  etc, then this library can help you!\n\nThere are many Haskell template engines
  today.\n[Shakespeare](http://hackage.haskell.org/package/shakespeare) is great because\nit
  checks template variables at compile time.  Using Shakespeare, it's not\npossible
  for the template file to cause a runtime-error.\n\nShakespeare provides its own
  original ways of writing HTML\n([Hamlet](https://hackage.haskell.org/package/shakespeare/docs/Text-Hamlet.html)),\nCSS\n([Cassius](https://hackage.haskell.org/package/shakespeare/docs/Text-Cassius.html)\n/\n[Lucius](https://hackage.haskell.org/package/shakespeare/docs/Text-Lucius.html)),\nand
  JavaScript\n([Julius](https://hackage.haskell.org/package/shakespeare-2.0.11.2/docs/Text-Julius.html)).\nIf
  you use these original markup languages, it is possible to use control\nstatements
  like `forall` (for looping), `if` (for conditionals), and `case`\n(for case-splitting).\n\nHowever,
  if you're using any other markup language (like\n[pug](https://pugjs.org), [slim](http://slim-lang.com/),\n[haml](http://haml.info/),
  normal HTML, normal CSS, etc), Shakespeare only\nprovides you with the\n[Text.Shakespeare.Text](https://hackage.haskell.org/package/shakespeare/docs/Text-Shakespeare-Text.html)\nmodule.
  \ This gives you variable interpolation, but no control statements like\n`forall`,
  `if`, or `case`.\n\n[`Haiji`](https://hackage.haskell.org/package/haiji) is another
  interesting\nlibrary.  It has all the features we require, but its templates take
  a very\n[long time to compile](https://github.com/blueimpact/kucipong/pull/7) with\nGHC
  >= 7.10.\n\nHeterocephalus fills this missing niche. It gives you variable interpolation\nalong
  with control statements that can be used with any markup language.  Its\ncompile
  times are reasonable.\n\n## Features\n\nHere are the main features of this module.\n\n*
  __DO__ ensure that all interpolated variables are in scope\n\n* __DO__ ensure that
  all interpolated variables have proper types for the template\n\n* __DO__ expand
  the template literal on compile time\n\n* __DO__ provide a way to use `forall`,
  `if`, and `case` statments in the template\n\n    `Text.Shakespeare.Text.text` has
  a way to do variable interpolation, but no\n    way to use these types of control
  statements.\n\n* __DO NOT__ enforce that templates obey a peculiar syntax\n\n    Shakespeare
  templates make you use their original style (Hamlet, Cassius,\n    Lucius, Julius,
  etc).  The\n    [`Text.Shakespeare.Text.text`](https://hackage.haskell.org/package/shakespeare/docs/Text-Shakespeare-Text.html#v:text)\n
  \   function does not require you to use any particular style, but it does not\n
  \   have control statements like `forall`, `if` and `case`.\n\n    This makes it
  impossible to use Shakespeare with another template engine\n    such as `pug` in
  front end side.  It is not suitable for recent rich front\n    end tools.\n\n* __DO
  NOT__ have a long compile time\n\n    `haiji` is another awesome template library.
  It has many of our required\n    features, but it takes too long to compile when
  used with ghc >= 7.10.\n\n* __DO NOT__ provide unneeded control statements\n\n    Other
  template engines like [EDE](https://hackage.haskell.org/package/ede)\n    provide
  rich control statements like importing external files.\n    Heterocephalus does
  not provide control statements like this because it is\n    meant to be used with
  a rich front-end template engine (like pug, slim,\n    etc).\n\n## Usage\n\nYou
  can compile external template files with the following four functions:\n\n* `compileTextFile`:
  A basic function that embeds variables without escaping and without default values.\n*
  `compileTextFileWithDefault`: Same as `compileTextFile` but you can set default
  template values.\n* `compileHtmlFile`: Same as `compileTextFile` but all embeded
  variables are escaped for html.\n* `compileHtmlFileWithDefault`: Same as `compileHtmlFile`
  but you can set default template values.\n\nFor more details, see the [latest haddock\ndocument](https://www.stackage.org/haddock/nightly/heterocephalus/Text-Heterocephalus.html).\n\n##
  Checking behaviours in `ghci`\n\nTo check the behaviour, you can test in `ghci`
  as follows. Note that\n`compileText` and `compileHtml` are used for checking syntaxes.\n\n```haskell\n$
  stack install heterocephalus  # Only first time\n$ stack repl --no-build --no-load\nPrelude>
  :m Text.Heterocephalus Text.Blaze.Renderer.String\nPrelude> :set -XTemplateHaskell
  -XQuasiQuotes\nPrelude> let a = 34; b = \"<script>\"; in renderMarkup [compileText|foo
  #{a} #{b}|]\n\"foo 34 <script>\"\nPrelude> let a = 34; b = \"<script>\"; in renderMarkup
  [compileHtml|foo #{a} #{b}|]\n\"foo 34 &lt;script&gt;\"\n```\n\n## Syntax\n\nThe\n[Text.Heterocephalus](https://www.stackage.org/haddock/nightly/heterocephalus/Text-Heterocephalus.html)\nmodule
  provides two major features for use in template files: variable interpolation\nand
  control statements.\n\n### Variable interpolation\n\nA Haskell variable can be embedded
  in the template file with the `#{foo}`\nsyntax.  The value of the variable will
  be injected in at run time.\n\n#### Basic usage\n\nAll of following are correct
  (this assumes that you have already declared the\n`var` variable in your Haskell
  program and it is in scope):\n\n```text\n#{ var }\n#{var}\n#{  var}\n#{var  }\n#{
  var  }\n```\n\nThe variable must be an instance of\n[`Text.Blaze.ToMarkup`](https://hackage.haskell.org/package/blaze-markup/docs/Text-Blaze.html#t:ToMarkup).\n\n####
  Advanced usage\n\nYou can use functions and data constructors as well.\n\n```text\n#{
  even num }\n#{ num + 3 }\n#{ take 3 str }\n#{ maybe \"\" id (Just b) }\n```\n\n###
  Control statements\n\nOnly two type of control statements are provided.\n\n####
  Forall\n\n```\n%{ forall x <- xs }\n#{x}\n%{ endforall }\n\n%{ forall (k,v) <- kvs
  }\n#{k}: #{v}\n%{ endforall }\n```\n\n#### If\n\n```\n%{ if even num }\n#{num} is
  even number.\n%{ else }\n#{num} is odd number.\n%{ endif }\n```\n\n```\n%{ if (num
  < 30) }\n#{ num } is less than 30.\n%{ elseif (num <= 60) }\n#{ num } is between
  30 and 60.\n%{ else }\n#{ num } is over 60.\n%{ endif }\n```\n\n#### Case\n\n```\n%{
  case maybeNum }\n%{ of Just 3 }\nnum is 3.\n%{ of Just num }\nnum is not 3, but
  #{num}.\n%{ of Nothing }\nnum is not anything.\n%{ endcase }\n```\n\n```\n%{ case
  nums }\n%{ of (:) n _ }\nfirst num is #{n}.\n%{ of [] }\nno nums.\n%{ endcase }\n```\n\n####
  Why we do not provide `maybe` and `with`?\n\nTODO\n\nDiscussions about this topic
  is on [issue #9](https://github.com/arowM/heterocephalus/issues/9).\n\n## Why \"heterocephalus\"?\n\n\"Heterocephalus\"
  is the scientific name of the [naked mole-rat](https://en.wikipedia.org/wiki/Naked_mole-rat).\n"
license-name: MIT
