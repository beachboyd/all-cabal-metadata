homepage: https://github.com/JackKiefer/herms
changelog-type: text
hash: 7747aeeca43d001e917069886e770a36dc2fc2dcf2d7e749ef3bb7e808c746ca
test-bench-deps: {}
maintainer: jack.c.kiefer@gmail.com
synopsis: A command-line manager for delicious kitchen recipes
changelog: ! "-*-change-log-*-\n\nv1.8.1.4 - 11 March 2017\n\t\t\t\t * The meta update!
  Added version flag (\"-v\" and \"--version\")\n\nv1.8.1.3 - 11 March 2017\n\t\t\t\t
  * Tags may now contain multiple words. If herms detects commas in the\n\t\t\t\t
  tag entry field, then a recipe's tags will be comma-separated strings\n\t\t\t\t
  rather than space-separated words.\n\nv1.8.1.2 - 18 October 2017\n         * Initial
  release\n"
basic-deps:
  microlens-th: ! '>=0.4 && <0.5'
  split: ! '>=0.2 && <0.3'
  base: ! '>=4.8 && <5'
  vty: ! '>=5.15 && <5.22'
  semigroups: ! '>=0.18.3 && <=0.18.4'
  ansi-terminal: ! '>=0.7.0 && <=0.8.1'
  mtl: ! '>=2.2.1 && <=2.2.2'
  optparse-applicative: ! '>=0.14 && <0.15'
  microlens: ! '>=0.4 && <0.5'
  brick: ! '>=0.19 && <0.38'
  directory: ! '>=0.0'
all-versions:
- '1.8.1.2'
- '1.8.1.3'
- '1.8.1.4'
- '1.8.2.1'
- '1.8.2.2'
- '1.9.0.0'
author: Jack Kiefer
latest: '1.9.0.0'
description-type: markdown
description: ! "# Herm's\n\n[![Hackage](https://img.shields.io/hackage/v/herms.svg)](https://hackage.haskell.org/package/herms)\n[![stackage
  LTS\npackage](http://stackage.org/package/herms/badge/lts)](http://stackage.org/lts/package/herms)\n![Travis
  build](https://api.travis-ci.org/JackKiefer/herms.svg?branch=master)\n\nHeRM's:
  a Haskell-based Recipe Manager (yes, food recipes) for the command line.\n\n![Herm's
  Interface](https://i.imgur.com/u9fPapw.jpg)\n\n### Features\n- Add recipes! :)\n-
  Look at recipes! :D\n- Edit recipes! :DD\n- Serving size adjustment! :DDD\n- Remove
  recipes :(\n- View metric recipes in imperial units and vice-versa\n- Import recipe
  files\n- Generate shopping lists\n- Keep track of recipes with tags\n- Set default
  unit systems, serving sizes, and recipe file path in ``config.hs``\n\n### What's
  new:\n- Yarr! Herm's now supports both English and Pirate! Simply make it ``language
  = \"pirate\"`` in your ``config.hs``!\n- \"Pirate\" is but the first language that
  Herm's is now capable of supporting. We need your help to translate it into others!
  Currently in progress: Português, Español \n\n### Installation\n\nAt the moment,
  Herm's can only be installed via [stack](https://docs.haskellstack.org/en/stable/README/)
  or [cabal](https://www.haskell.org/cabal/), but standalone binaries are in the works!\n\nIf
  you're interested developing/hacking Herm's instead of just using it, see [Contributing.md](Contibuting.md)
  instead.\n\n##### Via Stack _(recommended)_:\n\n```\nstack update\nstack install
  herms\n```\n\n##### Manually cloning and installing from source with Stack\n\n```\ngit
  clone https://github.com/JackKiefer/herms\ncd herms\nstack update\nstack install\n```\n\n#####
  Via Hackage and Cabal:\n\n_Note_: Your milage may vary with dependency resolution\n\n```\ncabal
  update\ncabal install herms\n```\n\n##### Manually with Cabal:\n\n_Note_: Your milage
  may vary with dependency resolution\n\n```\ngit clone https://github.com/JackKiefer/herms\ncd
  herms\ncabal update\ncabal install\n```\n\n### Usage\n\n#### Command-line interface\n\nHerm's
  has a pretty intuitive interface for users familiar with other command-line programs!\n\nBelow
  is the exhaustive list of all commands and their functionalities. Take a gander!\n\n```\nUsage:\n\n
  \       herms list [-g|--group] [--tags TAGS]           list recipes\n                   [--name-only
  ]\n\n        herms add                                       add a new recipe (interactively)\n\n
  \       herms edit RECIPE_NAME                          edit a recipe\n\n        herms
  import FILE_NAME                          import a recipe file\n\n        herms
  remove RECIPE_NAMES                       remove the particular recipes\n\n        herms
  view RECIPE_NAMES [-s|--serving INT]      view the particular recipes\n                                [-t|--step]\n
  \                               [-c|--convert CONV_UNIT]\n\n        herms shopping
  RECIPE_NAMES [-s|--serving INT] generate shopping list for particular recipes\n\n
  \       herms datadir                                  print location of recipe
  and config files\n\nAvailable options:\n\n        -h|--help                                      Show
  this help text\n\n        -v|--version                                   Show version\n\n
  \       RECIPE_NAME                                    index or Recipe name\n\n
  \       --sort SORT_ORDER                              'tags' to sort by tags\n\n
  \       -s|--serving INT                               specify serving size when
  viewing.\n                                                       E.g., 'herms view
  -s 2 {recipe}' for two servings\n\n        -t|--step                                      View
  recipe in \"one-step-at-a-time\" mode\n                                                       (press
  enter between each direction)\n\n        -g|--group                                     group
  recipes by tags\n\n        --tags TAGS                                    show recipes
  with particular flags\n\n        --name-only                                    only
  list recipes by name\n\n        -c|--convert CONV_UNIT                         view
  the recipe converted to imperial or metric\n                                                       E.g.,
  'herms view 2 -c imperial'\n```\n\n#### Configuring Herm's and managing recipe files\n\nHerm's
  stores its recipes file, ``recipes.herms``,  and configuration file, ``config.hs``,
  in the same directory. Herm's keeps track of its location! Run ``herms datadir``
  to see the full directory path.\n\n``config.hs`` is a pseudo-Haskell-source-code
  file with several options for configuring the behaviour of Herm's. It currently
  supports the following options:\n\n- `defaultUnit` : The default unit system to
  show recipes in. Options: `Imperial`, `Metric`, `None`. Setting to `None` will simply
  show recipes in whatever unit system they're stored in.\n- `defaultServingSize`
  : Default serving size to calculate when showing recipes. Can be any non-negative
  integer; set to `0` for no default. This can be useful when you're always cooking
  for the same number of people!\n- `recipesFile` : The recipes file to use. This
  option currently supports relative (but not absolute) location, as well; if your
  data directory is `~/herms/data`, for example, and you want a recipe file in your
  home directoy called `~/GrandmasHugeCookbook.herms`, set this option to `\"../../GrandmasHugeCookbook.herms\"`.\n-
  `language` : Human language to use. Currently supported: ``\"english\"``, ``\"pirate\"``\n\n\n---\n\nIn
  honor of Logan, Utah's greatest Breakfast & Brunch.\n\n![Herm's Inn](https://images.duckduckgo.com/iu/?u=https%3A%2F%2Firs2.4sqi.net%2Fimg%2Fgeneral%2F600x600%2F803_DzmDgevV4Yw5OrVsh9c4iaE7Bx8aSA0AY7y4L5Um7Qg.jpg&f=1)\n"
license-name: GPL-3
