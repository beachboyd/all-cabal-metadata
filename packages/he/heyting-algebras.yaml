homepage: ''
changelog-type: markdown
hash: 42361f4022ed1b56ba8ca58ee7bf75fac84316a9e8c0392d2a63fa84bb62ea8e
test-bench-deps:
  base: -any
  universe-base: -any
  heyting-algebras: -any
  lattices: -any
  containers: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
maintainer: profunctor@pm.me
synopsis: Heyting and Boolean algebras
changelog: ! '# Revision history for heyting-algebra


  ## 0.0.1.0 -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.9 && <4.13'
  universe-base: ! '>=1.0 && <1.1'
  unordered-containers: ! '>=0.2.6.0 && <0.3'
  lattices: ! '>=1.0 && <1.11'
  tagged: ! '>=0.8.5 && <0.9'
  containers: ! '>=0.4.2 && <0.7'
  free-algebras: ! '>=0.0.4 && <0.0.6'
  hashable: ! '>=1.2.6.1 && <1.3'
  QuickCheck: ! '>=2.10 && <2.13'
all-versions:
- 0.0.1.2
author: Marcin Szamotulski
latest: 0.0.1.2
description-type: markdown
description: ! "# Heyting Algebras\n[![Maintainer: coot](https://img.shields.io/badge/maintainer-coot-lightgrey.svg)](http://github.com/coot)\n[![Travis
  Build Status](https://travis-ci.org/coot/heyting-algebras.svg?branch=master)](https://travis-ci.org/coot/heyting-algebras)\n\nThis
  package contains type classes and instances for many Heyting algebras\nwhich are
  in the Haskell eco-system.  It is build on top of\n[lattices](https://hackage.haskell.org/package/lattices)
  and\n[free-algebras](https://hackage.haskell.org/package/free-algebras) (to provide\ncombinators
  for free Heyting algebras).  The package also defines a type class\nfor Boolean
  algebras and comes with a handful of instances.\n\nA very good introduction to Heyting
  algebras can be found at\n[ncatlab](https://ncatlab.org/nlab/show/Heyting%2Balgebra).
  \ Heyting algebras\nare the crux of [intuitionistic\nlogic](https://en.wikipedia.org/wiki/Intuitionistic_logic),
  which drops the\naxiom of exluded middle.  From categorical point of view, Heyting
  algebras are\nposets (categories with at most one arrow between any objects), which
  are also\nCartesian closed (and finitely (co-)complete).  Note that this makes any\nHeyting
  algebra a simply typed lambda calculus; hence one more incentive to\nlearn how to
  use them.\n\nThe most important operation is implication `(==>) :: HeytingAlgebra
  a => a ->\na -> a`; since every Boolean algebra is a Heyting algebra via `a ==>\nb
  = not a \\/ b` (using the lattice notation for `or`).  It is very handy in\nexpression
  conditional logic.\n\nSome basic examples of Heyting algebras:\n* `Bool` is a Boolean
  algebra\n* `(Ord a, Bounded a) => a`; the implication is defined as: if `a ≤ b`
  then `a\n  ⇒ b = maxBound`; otherwise `a ⇒ b = b`; e.g. integers with both `±∞`
  (it can\n  be represented by `Levitated Int`.  This type is not a Boolean algebra.\n*
  The power set is a Boolean algebra, in Haskell it can be represented by `Set\n  a`
  (one might need to require `a` to be finite though, otherwise `not (not\n  empty)`
  might be `undefined` rather than `empty`).\n* More generally every type `(Ord k,
  Finite k, HeytingAlgebra v) => Map k a` is\n  a Heyting algebra (though in general
  not a Boolean one).\n"
license-name: MPL-2.0
