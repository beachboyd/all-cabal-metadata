homepage: ''
changelog-type: markdown
hash: 6e9eabade37fc3de1293eaf8d9b43c7609f224f468d362f11eba4176d431d1c2
test-bench-deps: {}
maintainer: sasa.bogicevic@pm.me
synopsis: Create Excel files with Haskell
changelog: |
  # Revision history for HExcel

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  microlens-th: -any
  base: ! '>=4.5 && <4.13'
  time: -any
  transformers: -any
  microlens: -any
all-versions:
- 0.1.0.0
author: Sasha Bogicevic
latest: 0.1.0.0
description-type: markdown
description: "# HExcel\nCreate Excel files with Haskell\n-------------------------------------------------------------------------------\nThis
  is a fork of [libxlsxwriter](https://github.com/HalfWayMan/libxlsxwriter)\nthat
  tries the improve on the api and provide a library for\ncreation of Excel files.\nUnderneath
  the hood it uses C library called [libxlsxwriter](http://libxlsxwriter.github.io/)
  and provides\nbindings to C code to produce Excel 2007+ xlsx files.\n\n## Example\n\n```\n{-#
  LANGUAGE TypeApplications #-}\nmodule Main where\n\nimport Control.Monad.Trans.State
  (execStateT)\nimport Control.Monad (forM_)\nimport Data.Time (getZonedTime)\nimport
  HExcel\n\nmain :: IO ()\nmain = do\n  wb <- workbookNew \"test.xlsx\"\n  let props
  = mkDocProperties\n        { docPropertiesTitle   = \"Test Workbook\"\n        ,
  docPropertiesCompany = \"HExcel\"\n        }\n  workbookSetProperties wb props\n
  \ ws <- workbookAddWorksheet wb \"First Sheet\"\n  df <- workbookAddFormat wb\n
  \ formatSetNumFormat df \"mmm d yyyy hh:mm AM/PM\"\n  now <- getZonedTime\n  --
  You can create HExcelState which is convenient api for writing to cells \n  let
  initState = HExcelState Nothing ws 4 1 0 1 0\n  _ <- flip execStateT initState $
  do\n         writeCell \"David\"\n         writeCell \"Dimitrije\"\n\t\t -- we can
  skip some rows\n         skipRows 1\n         writeCell \"Jovana\"\n\t\t -- or skip
  some columns\n         skipCols 1\n         writeCell (zonedTimeToDateTime now)\n
  \        writeCell @Double 42.5\n\n  -- or use functions that run in plain IO\n
  \ forM_ [5 .. 8] $ \\n -> do\n    writeString ws Nothing n 3 \"xxx\"\n    writeNumber
  ws Nothing n 4 1234.56\n    writeDateTime ws (Just df) n 5 (zonedTimeToDateTime
  now)\n  workbookClose wb\n\n```\n"
license-name: BSD-3-Clause
