homepage: ''
changelog-type: markdown
hash: 911c8f64b114f81127dcbfcddfc3e8e98c512032bf19e239dc202b1056aaab94
test-bench-deps:
  base: -any
  criterion: ==1.1.*
  hvect: -any
  vinyl: ==0.5.2
  deepseq: -any
  hetero-dict: -any
  template-haskell: -any
maintainer: drkoster@qq.com
synopsis: Fast heterogeneous data structures
changelog: ! '# Revision history for hetero-dict


  ## 0.1.1.0  -- 2016-05-31


  * Change DynDict''s implementation to linked-list.


  * add From/ToJSON instance to DynDict.


  ## 0.1.0.1  -- 2016-05-31


  * fix DynDict''s Show instance.


  ## 0.1.0.0  -- 2016-05-31


  * First version. extract from web-routing, drop GHC 7.6 support.

'
basic-deps:
  base: ! '>=4.7 && <5.0'
  unordered-containers: ! '>=0.2.5'
  text: ! '>=1.1'
  aeson: ! '>=0.7'
  template-haskell: ! '>=2.9 && <2.13'
  primitive: ! '>=0.5 && <0.7'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
author: ! 'Hirotomo Moriwaki <philopon.dependence@gmail.com>,

  Winterland <drkoster@qq.com>'
latest: 0.1.1.0
description-type: markdown
description: ! "hetero-dict: fast heterogeneous data structures\n===============================================\n\n[![Hackage](https://img.shields.io/hackage/v/hetero-dict.svg?style=flat)](http://hackage.haskell.org/package/hetero-dict)\n[![Travis-CI](https://travis-ci.org/winterland1989/hetero-dict.svg)](https://travis-ci.org/winterland1989/hetero-dict)\n\nThis
  package provide two flavor fast and easy to use heterogeneous data structures:\n\n1.
  `Dict` which use boxed array, it's read-only with O(1) get.\n\n1. `DynDict` which
  use linked-list(see module document for details).\n\nFeatures simple api, good performance
  and good error message, `Show` and `From/ToJSON` instances are provided.\n\nExample\n-------\n\n```haskell\n>
  :set -XDataKinds -XQuasiQuotes\n> :m + Data.Hetero.Dict\n> let d = mkDict . add
  [key|foo|] 12 . add [key|bar|] \"baz\" $ emptyStore\n> :t d\nd :: Num v => Dict
  '[\"foo\" ':= v, \"bar\" ':= [Char]]\n> get [key|foo|] d\n12\n> get [key|bar|] d\n\"baz\"\n>
  get [key|qux|] d\n • Couldn't match type ‘'Index i1’ with ‘'NotFoundKey \"qux\"’\n
  ...\n```\n\n```haskell\n> :set -XDataKinds -XQuasiQuotes\n> :m + Data.Hetero.DynDict\n>
  let d =  add [key|foo|] 12 . add [key|bar|] \"baz\" $ empty\n> get [key|foo|] d\n12\n>
  get [key|bar|] d\n\"baz\"\n> let d' = set [key|foo|] 13 d\n> get [key|foo|] d'\n13\n```\n\nBenchmark\n---------\n\nWe
  use [hvect](http://hackage.haskell.org/package/hvect) and [vinyl](http://hackage.haskell.org/package/vinyl)
  as references.\n\n```\nbenchmarking n = 3/Index Dict\ntime                 8.656
  ns   (8.396 ns .. 9.040 ns)\n                     0.987 R²   (0.964 R² .. 0.999
  R²)\nmean                 8.784 ns   (8.503 ns .. 9.318 ns)\nstd dev              1.322
  ns   (767.5 ps .. 2.059 ns)\nvariance introduced by outliers: 97% (severely inflated)\n\nbenchmarking
  n = 3/Index DynDict\ntime                 6.400 ns   (6.340 ns .. 6.467 ns)\n                     0.999
  R²   (0.999 R² .. 1.000 R²)\nmean                 6.394 ns   (6.348 ns .. 6.454
  ns)\nstd dev              183.8 ps   (153.3 ps .. 230.6 ps)\nvariance introduced
  by outliers: 49% (moderately inflated)\n\nbenchmarking n = 3/Index HVect\ntime                 14.12
  ns   (13.99 ns .. 14.25 ns)\n                     0.999 R²   (0.999 R² .. 1.000
  R²)\nmean                 14.09 ns   (13.95 ns .. 14.25 ns)\nstd dev              520.1
  ps   (445.4 ps .. 608.7 ps)\nvariance introduced by outliers: 60% (severely inflated)\n\nbenchmarking
  n = 3/Index Vinyl\ntime                 6.735 ns   (6.635 ns .. 6.849 ns)\n                     0.999
  R²   (0.998 R² .. 1.000 R²)\nmean                 6.706 ns   (6.656 ns .. 6.763
  ns)\nstd dev              186.4 ps   (142.7 ps .. 252.2 ps)\nvariance introduced
  by outliers: 47% (moderately inflated)\n\nbenchmarking n = 15/Index Dict\ntime                 9.482
  ns   (9.395 ns .. 9.564 ns)\n                     0.999 R²   (0.999 R² .. 1.000
  R²)\nmean                 9.460 ns   (9.387 ns .. 9.529 ns)\nstd dev              252.6
  ps   (212.2 ps .. 328.3 ps)\nvariance introduced by outliers: 44% (moderately inflated)\n\nbenchmarking
  n = 15/Index DynDict\ntime                 10.66 ns   (10.47 ns .. 10.94 ns)\n                     0.998
  R²   (0.996 R² .. 1.000 R²)\nmean                 10.52 ns   (10.43 ns .. 10.65
  ns)\nstd dev              389.0 ps   (286.7 ps .. 575.8 ps)\nvariance introduced
  by outliers: 61% (severely inflated)\n\nbenchmarking n = 15/Index HVect\ntime                 14.35
  ns   (14.24 ns .. 14.46 ns)\n                     0.999 R²   (0.999 R² .. 1.000
  R²)\nmean                 14.35 ns   (14.20 ns .. 14.51 ns)\nstd dev              513.6
  ps   (395.2 ps .. 693.4 ps)\nvariance introduced by outliers: 59% (severely inflated)\n\nbenchmarking
  n = 15/Index Vinyl\ntime                 11.62 ns   (11.47 ns .. 11.75 ns)\n                     0.999
  R²   (0.999 R² .. 0.999 R²)\nmean                 11.63 ns   (11.52 ns .. 11.74
  ns)\nstd dev              373.0 ps   (314.5 ps .. 452.0 ps)\nvariance introduced
  by outliers: 54% (severely inflated)\n\nbenchmarking n = 15/Modify DynDict\ntime
  \                10.30 ns   (10.13 ns .. 10.50 ns)\n                     0.998 R²
  \  (0.997 R² .. 0.999 R²)\nmean                 10.26 ns   (10.18 ns .. 10.38 ns)\nstd
  dev              335.2 ps   (260.3 ps .. 427.1 ps)\nvariance introduced by outliers:
  55% (severely inflated)\n\nbenchmarking n = 15/Modify Vinyl\ntime                 11.74
  ns   (11.60 ns .. 11.86 ns)\n                     0.999 R²   (0.999 R² .. 0.999
  R²)\nmean                 11.67 ns   (11.55 ns .. 11.79 ns)\nstd dev              398.9
  ps   (330.5 ps .. 487.9 ps)\nvariance introduced by outliers: 56% (severely inflated)\n```\n"
license-name: MIT
