homepage: https://github.com/bergmark/feed
changelog-type: markdown
hash: e33836c2734fcd0547ebd9ccdd0e462a5f625643d2eb955f27bfcb6fb9f44a2c
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  feed: -any
  xml-conduit: ! '>=1.3 && <1.9'
  base: ! '>=4 && <4.13'
  time: <1.9
  text: <1.3
  HUnit: ! '>=1.2 && <1.7'
  base-compat: ! '>=0.9 && <0.11'
  xml-types: ! '>=0.3.6 && <0.4'
  old-time: ! '>=1 && <1.2'
maintainer: Adam Bergmark <adam@bergmark.nl>
synopsis: Interfacing with RSS (v 0.9x, 2.x, 1.0) + Atom feeds.
changelog: ! "#### 1.0.1.0\n\n* Support for GHC 8.6.x libraries\n\n* Add `textFeed`
  and `textRSS` helpers (thanks to Francesco Ariis)\n\n# 1.0.0.0\n\n* Thanks to Dmitry
  Dzhus feed has been modernized to use the `text`,\n  `xml-types` and `xml-conduit`
  libraries.\n\n### 0.3.12.0\n\n* Adds support for some fallback parsing of atom feeds
  to XMLFeed (thanks to Joey Hess)\n\n#### 0.3.11.1\n\n* Add missing file to dist
  of test-suite (thanks to Sergei Trofimovich)\n\n#### 0.3.11.0\n\n* Add `toFeedDateStringUTC`
  which uses UTCTime rather than ClockTime (thanks to Emanuel Borsboom)\n* Now with
  explicit export lists!\n\n#### 0.3.10.4\n\n* Fix toFeedDateString time format, It
  used %s (seconds since epoch) instead of %S (seconds of minute), and %m (month)
  instead of %M (minute) (thanks to Emanuel Borsboom)\n\n#### 0.3.10.3\n\n* RSS Export:
  avoid <enclosure length=\"Nothing\"> attribute (thanks to Roman Cheplyaka)\n\n####
  0.3.10.2\n\n* The Atom RFC says that when a link element doesn't specify the \"rel\"\n
  \   attribute, i.e. link relation, it should be interpreted as an\n    \"alternate\"
  relation.  This makes the feed and item query\n    functions treat a missing relation
  as \"alternate\".\n\n#### 0.3.10.1\n\n* Allow `HUnit 1.3.*`\n\n### 0.3.10.0\n\n*
  Add `Text.Feed.Import.parseFeedSource :: XmlSource s => s -> Maybe Feed` (thanks
  to Dmitry Dzhus)\n\n#### 0.3.9.7\n\n* Add missing modules in test-suite\n\n####
  0.3.9.6\n\n* Fixed the \"cloud\" having attribute \"register\" instead of \"registerProcedure\":
  https://validator.w3.org/feed/docs/rss2.html#ltcloudgtSubelementOfLtchannelgt (thanks
  to Daniele Francesconi)\n\n#### 0.3.9.5\n\n* Fix typo \"skipDayss\" -> \"skipDays\"
  in `Text.RSS.Export` (thanks to Daniele Francesconi)\n\n#### 0.3.9.4\n\n* Update
  maintainer information\n* Add test suite\n\n#### 0.3.9.3\n\n* Add support for utf8-string
  >= 1 && < 1.1 and time 1.5.*\n\n#### 0.3.9.1\n\n* add ref to github repo + .cabal
  tidying.\n\n### 0.3.9\n\n* tidy up compilation with ghc-7.6(.3), bumped version
  (but no\n  functional changes.)\n\n### 0.3.8\n\n* cabal build fixes.\n\n### 0.3.7\n\n*
  <feed> parsing: made <title> be optional.\n* <entry> parsing: try <published> if
  <updated> is missing.\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  xml-conduit: ! '>=1.3 && <1.9'
  base: ! '>=4 && <4.13'
  time: <1.9
  text: <1.3
  base-compat: ! '>=0.9 && <0.11'
  xml-types: ! '>=0.3.6 && <0.4'
  utf8-string: <1.1
  old-time: ! '>=1 && <1.2'
  old-locale: ==1.0.*
  safe: ==0.3.*
  time-locale-compat: ==0.1.*
all-versions:
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.3.8
- 0.3.9
- 0.3.9.1
- 0.3.9.2
- 0.3.9.3
- 0.3.9.4
- 0.3.9.5
- 0.3.9.6
- 0.3.9.7
- 0.3.10.0
- 0.3.10.1
- 0.3.10.2
- 0.3.10.3
- 0.3.10.4
- 0.3.11.0
- 0.3.11.1
- 0.3.12.0
- 1.0.0.0
- 1.0.1.0
author: Sigbjorn Finne <sof@forkIO.com>
latest: 1.0.1.0
description-type: markdown
description: ! "# Feed\n\n[![feed](https://img.shields.io/hackage/v/feed.svg)](http://hackage.haskell.org/package/feed)\n[![Build
  Status](https://travis-ci.org/bergmark/feed.svg?branch=master)](https://travis-ci.org/bergmark/feed)\n\n##
  Goal\n\nInterfacing with *RSS* (v 0.9x, 2.x, 1.0) + *Atom* feeds.\n\n- Parsers\n-
  Pretty Printers\n- Querying\n\nTo help working with the multiple feed formats we've
  ended up with\nthis set of modules providing parsers, pretty printers and some utility\ncode
  for querying and just generally working with a concrete\nrepresentation of feeds
  in Haskell.\n\nFor basic reading and editing of feeds, consult the documentation
  of\nthe Text.Feed.* hierarchy.\n\n## Usage\n\nBuilding an Atom feed is similar to
  building an RSS feed, but we'll\narbitrarily pick Atom here:\n\nWe'd like to generate
  the XML for a minimal working example.\nConstructing our base `Feed` can use the
  smart constructor called `nullFeed`:\n\n*This is a pattern the library maintains
  for smart constructors. If you want the\nminimum viable 'X', use the 'nullX' constructor.*\n\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Prelude.Compat hiding
  (take)\n\nimport Data.Text\nimport Data.XML.Types as XML\nimport qualified Data.Text.Lazy
  as Lazy\nimport qualified Text.Atom.Feed as Atom\nimport qualified Text.Atom.Feed.Export
  as Export (textFeed)\n\nmyFeed :: Atom.Feed\nmyFeed = Atom.nullFeed\n    \"http://example.com/atom.xml\"
  \      -- ^ id\n    (Atom.TextString \"Example Website\") -- ^ title\n    \"2017-08-01\"
  \                       -- ^ last updated\n```\n\nNow we can export the feed to
  `Text`.\n\n```haskell\nrenderFeed :: Atom.Feed -> Maybe Lazy.Text\nrenderFeed =
  Export.textFeed\n```\n\n```\n> renderFeed myFeed\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed
  xmlns=\"http://www.w3.org/2005/Atom\">\n  <title xmlns:ns=\"http://www.w3.org/2005/Atom\"
  ns:type=\"text\">Example Website</title>\n  <id>http://example.com/atom.xml</id>\n
  \ <updated>2017-08-01</updated>\n</feed>\n```\n\nThe `TextContent` sum type allows
  us to specify which type of text we're providing.\n\n```haskell\ndata TextContent\n
  \ = TextString Text\n  | HTMLString Text\n  | XHTMLString XML.Element\n  deriving
  (Show)\n```\n\nA feed isn't very useful without some content though, so we'll need
  to build up an `Entry`.\n\n```haskell\ndata Post\n  = Post\n  { _postedOn :: Text\n
  \ , _url :: Text\n  , _content :: Text\n  }\n\nexamplePosts :: [Post]\nexamplePosts
  =\n  [ Post \"2000-02-02T18:30:00Z\" \"http://example.com/2\" \"Bar.\"\n  , Post
  \"2000-01-01T18:30:00Z\" \"http://example.com/1\" \"Foo.\"\n  ]\n```\n\nOur `Post`
  data type will need to be converted into an `Entry` in order to use it in the top
  level `Feed`. The required fields for an entry are an url \"id\" from which an entry's
  presence can be validated, a title for the entry, and a posting date. In this example
  we'll also add authors, link, and the entries actual content, since we have all
  of this available in the `Post` provided.\n\n```haskell\ntoEntry :: Post -> Atom.Entry\ntoEntry
  (Post date url content) =\n  (Atom.nullEntry\n     url -- The ID field. Must be
  a link to validate.\n     (Atom.TextString (take 20 content)) -- Title\n     date)\n
  \ { Atom.entryAuthors = [Atom.nullPerson {Atom.personName = \"J. Smith\"}]\n  ,
  Atom.entryLinks = [Atom.nullLink url]\n  , Atom.entryContent = Just (Atom.HTMLContent
  content)\n  }\n```\n\nFrom the base feed we created earlier, we can add further
  details (`Link` and `Entry` content) as well as map our `toEntry` function over
  the posts we'd like to include in the feed.\n\n```haskell\nfeed :: Atom.Feed\nfeed
  =\n  myFeed { Atom.feedEntries = fmap toEntry examplePosts\n         , Atom.feedLinks
  = [Atom.nullLink \"http://example.com/\"]\n         }\n```\n\n```\n> renderFeed
  feed\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n
  \ <title xmlns:ns=\"http://www.w3.org/2005/Atom\" ns:type=\"text\">Example Website</title>\n
  \ <id>http://example.com/atom.xml</id>\n  <updated>2017-08-01</updated>\n  <link
  xmlns:ns=\"http://www.w3.org/2005/Atom\" ns:href=\"http://example.com/\"/>\n  <entry>\n
  \   <id>http://example.com/2</id>\n    <title xmlns:ns=\"http://www.w3.org/2005/Atom\"
  ns:type=\"text\">Bar.</title>\n    <updated>2000-02-02T18:30:00Z</updated>\n    <author>\n
  \     <name>J. Smith</name>\n    </author>\n    <content xmlns:ns=\"http://www.w3.org/2005/Atom\"
  ns:type=\"html\">Bar.</content>\n    <link xmlns:ns=\"http://www.w3.org/2005/Atom\"
  ns:href=\"http://example.com/2\"/>\n  </entry>\n  <entry>\n    <id>http://example.com/1</id>\n
  \   <title xmlns:ns=\"http://www.w3.org/2005/Atom\" ns:type=\"text\">Foo.</title>\n
  \   <updated>2000-01-01T18:30:00Z</updated>\n    <author>\n      <name>J. Smith</name>\n
  \   </author>\n    <content xmlns:ns=\"http://www.w3.org/2005/Atom\" ns:type=\"html\">Foo.</content>\n
  \   <link xmlns:ns=\"http://www.w3.org/2005/Atom\" ns:href=\"http://example.com/1\"/>\n
  \ </entry>\n</feed>\n```\nSee [here](https://github.com/bergmark/feed/blob/master/tests/Example/CreateAtom.hs)
  for this content as an uninterrupted running example.\n\n```haskell\n-- Dummy main
  needed to compile this file with markdown-unlit\nmain :: IO ()\nmain = return ()\n```\n"
license-name: BSD-3-Clause
