homepage: ''
changelog-type: markdown
hash: a9dccb992240bdb53fb8b3c9a0e8de189b3929ccdf88fb6460277143e26d4674
test-bench-deps:
  polysemy-plugin: -any
  here: ! '>=1.2.10 && <1.3.0'
  base: -any
  text: -any
  containers: -any
  plots: ! '>=0.1.1.0 && <=0.2'
  colonnade: -any
  mtl: -any
  polysemy-RandomFu: ! '>=0.2.0.0'
  random-fu: -any
  hvega: -any
  blaze-html: -any
  polysemy: -any
  random-source: -any
  knit-haskell: -any
maintainer: adam_conner_sax@yahoo.com
synopsis: a minimal Rmarkdown sort-of-thing for haskell, by way of Pandoc
changelog: "v 0.6.0.0\n* updated to use polysemy-zoo version of constraint absorbers
  in PandocMonad.\n* Hackage download should now include templates and associated
  css\n* Added mkPandocWriterConfig and addCss function in Knit.Report.Output to handle
  loading things in \nthe included directory, which may be installed in a platform
  independent way.\n* Added two more html templates, pandoc-bootstrap-KH.html and
  pandoc-adaptive-bootstrap-KH.html\nwith pandoc-bootstrap.css and used them in some
  of the examples.\n* Added the default html templates into the pandoc-templates directory
  where Pandoc will expect\nthem if the given template fails.\n* Reorganized data
  directory with \"pandoc-data\" \"knit-haskell-templates\" and \"knit-haskell-css\"\n*
  Added output helpers for Pandoc results which are lazy text (html).  These create
  the\nrequired parent directories if necessary. See examples for details.\n* Removed
  ```Knit.Effect.RandomFu``` and modified the example which uses it to use the\n\"polysemy-RandomFu\"
  package instead.\n\nv 0.5.0.0\n* Added plots example back since there is a version
  of plots on hackage with \na relaxed upper bound on containers.\n* Changed the Doc
  effect so that instead of Text name, it carries a polymorphic info type.  \nThis
  is then specified in the Pandoc case to be a Text name and set of template var overrides.\nThis
  creates several other changes and will break any multi-doc examples since now \n\"newPandoc\"
  takes a first argument of the type ```PandocInfo``` (which is just a \nproduct of
  a ```Text``` and a ```Map String String```).\n* raised lower bound and relaxed upper
  bound on polysemy\n\nv 0.4.0.0 \n* Added  \n```absorbPandocMonad :: PandocEffects
  r => (forall m. PandocMonad m => m a) -> Sem r a``` \nto ```Knit.Effect.PandocMonad```\n*
  Removed (orphan) instances: ```PandocMonad (Sem r)``` and \n```MonadError PandocError
  (Sem r)``` in favor  of using \n```absorbPandocMonad``` when required.\n* Deprecated
  name \"Random\" in favor of \"RandomFu\" for clarity and \neventual consistency
  with Polysemy\n* Added \n```absorbMonadRandom :: Member RandomFu r => (forall m.
  MonadRandom m => m a) -> Sem r a``` \nto allow some\ninteroperation with actions
  constrained by ```MonadRandom```\n* Removed orphan ```Random.MonadRandom``` instance
  from \n```Knit.Effect.RandomFu``` because orphan instances are bad.\n* Changed return
  type of ```Knit.Report.knitError``` to ```Sem r a``` \n(from ```Sem r ()```)\n*
  Bumped lower bound on polysemy-plugin (because of a buggy version)\n* Bumped lower
  bound on polysemy\n* Removed plots example in \"SimpleExample\" and added a diagrams
  one.  \nWill add plots back once a version issue  with containers is resolved.\n\nv
  0.3.0.1\n* Examples were \"executables\" and are now \"tests\" so that depending
  on \nknit-haskell does not pull in the dependencies of the examples.\n\nv 0.3.0.0
  \n* Added exports of \"Colonnade\" and \"Text.Blaze.Colonnade\" to \n\"Knit.Report.Input.Table.Colonnade\"\n*
  Added \"knitError\" function to Knit.Report to allow user throwing of errors.  \nThese
  will become PandocSomeError and handled as a PandocError.\n* Lowered bound on containers
  (to 0.5.0) to accomodate use of Plots.\n* Added Knit.Report.Input.Visualization.Diagrams.
  \ \nAdds Diagrams from diagrams-lib via SVG backend.\n* Added some more re-exports
  (Colonnade, Diagrams.Prelude) \nfrom Knit.Report to simplify imports on use.\n*
  Added an optional figure caption argument to Hvega and Diagrams inputs. \n(this
  is a breaking change since it requires another argument).\n* Added a state effect
  wrapper to facilitate getting unused ids for figures, etc.\n* Changed id argument
  for Hvega and Diagrams \nvisualizations to \"Maybe Text\" from Text.  \nWill use
  built-in facilities for unique ids when set to Nothing.\n* Visualization \"addXXX\"
  functions now return the figure id (as \"Sem r Text\") \nso it can be referred to
  elsewhere.\n* Added KnitOne and KnitMany constraint-type-aliases to Knit.Report
  \nto simplify constraining doc producing functions.\n* Updated examples.  Added
  a diagrams example to SimpleExample \nand fixed id and caption arguments throughout.\n*
  Bumped upper bounds (network)\n\nv 0.2.0.0\n* Documentation Fixes\n* Added export
  of newPandoc and NamedDoc to Knit.Report to \nfacilitate multi-doc use.\n* Removed
  redundant imports from Knit.Report.Input.Table.Colonnade\n* Added a multi-doc example\n*
  (internal) Removed odd, and no longer necessary, \"LastMember\" \nconstraint from
  knit functions. \n* Updated effects for polysemy 1.2\n\nv 0.1.0.0  \n* Initial version\n\n"
basic-deps:
  http-client: ! '>=0.6.4 && <0.7.0'
  diagrams-lib: ! '>=1.4 && <1.5.0.0'
  polysemy-plugin: ! '>=0.2.0.0 && <0.3.0.0'
  lucid: ! '>=2.9.11 && <2.10'
  bytestring: ! '>=0.10.8 && <0.11'
  case-insensitive: ! '>=1.2.0.11 && <1.3.0.0'
  blaze-colonnade: ! '>=1.2.2 && <1.3.0.0'
  base: ! '>=4.12.0 && <4.13'
  time: ! '>=1.8.0 && <2.0.0'
  base64-bytestring: ! '>=1.0.0.2 && <1.1.0.0'
  aeson-pretty: ! '>=0.8.7 && <0.9'
  text: ! '>=1.2.3 && <1.3'
  network: ! '>=2.8.0.0 && <3.2.0.0'
  constraints: ! '>=0.10 && <0.12'
  logging-effect: ! '>=1.3.3 && <1.4'
  diagrams-svg: ! '>=1.4.1 && <1.5.0.0'
  containers: ! '>=0.5.0 && <0.7'
  pandoc: ! '>=2.7.2 && <2.8'
  polysemy-zoo: ! '>=0.3.0.0 && <0.4.0'
  colonnade: ! '>=1.1 && <1.3'
  http-client-tls: ! '>=0.3.5.3 && <0.4.0.0'
  network-uri: ! '>=2.6.1.0 && <2.7.0.0'
  mtl: ! '>=2.2.2 && <2.3'
  random-fu: ! '>=0.2.7 && <0.3'
  hvega: ! '>=0.1.0 && <=0.2.0.0'
  blaze-html: ! '>=0.9.1 && <0.10'
  polysemy: ! '>=0.3.0.0 && <0.5.0.0'
  prettyprinter: ! '>=1.2.1 && <1.4'
  random: ! '>=1.1 && <1.2'
  random-source: ! '>=0.3.0 && <0.4'
  svg-builder: ! '>=0.1.1 && <0.2'
  http-types: ! '>=0.12.3 && <0.13.0'
  Glob: ! '>=0.10.0 && <0.11.0'
  directory: ! '>=1.3.3.0 && <1.4.0.0'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
author: Adam Conner-Sax
latest: 0.6.0.0
description-type: markdown
description: "# knit-haskell v0.6.0.0\n\n[![Build Status][travis-badge]][travis]\n[![Hackage][hackage-badge]][hackage]\n[![Hackage
  Dependencies][hackage-deps-badge]][hackage-deps]\n\n## Introduction\nknit-haskell
  is an attempt to emulate parts of the RMarkdown/knitR experience in haskell. \nThe
  idea is to be able to build HTML (or, perhaps, some other things [Pandoc](http://hackage.haskell.org/package/pandoc)
  can write) \ninside a haskell executable.  \nThis package has some wrapping around
  Pandoc and the [PandocMonad](http://hackage.haskell.org/package/pandoc-2.7.2/docs/Text-Pandoc-Class.html#t:PandocMonad)
  \nas well as logging facilities \nand some support for inserting [hvega](http://hackage.haskell.org/package/hvega)
  visualizations.  \nAll of that is handled via writer-like effects, so additions
  to the documents can be interspersed with regular haskell code.\n\n## Supported
  Inputs\n* [markdown](https://pandoc.org/MANUAL.html#pandocs-markdown)\n* HTML ([blaze](http://hackage.haskell.org/package/blaze-html),
  [lucid](http://hackage.haskell.org/package/lucid) or Text)\n* [latex](https://en.wikipedia.org/wiki/LaTeX)\n*
  [colonnade tables](https://hackage.haskell.org/package/colonnade)\n* [hvega](http://hackage.haskell.org/package/hvega)
  visualizations (via [blaze](http://hackage.haskell.org/package/blaze-html) HTML)
  \n* [Diagrams](https://archives.haskell.org/projects.haskell.org/diagrams/) (via
  Diagrams SVG backend, inserted as HTML) \n\n## Examples\nThere are a few examples
  in the \"examples\" directory.  \n* [SimpleExample](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/SimpleExample.hs)
  \ndemonstrates the bare bones features of the library.  Creating a document from
  a few fragments and then \n\"knitting\" it into HTML text and writing that to a
  file. This includes hvega, diagrams and plots examples.\n* [MultiDocExample](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/MultiDocExample.hs)
  \ndemonstrates how to build multiple documents.\n* [MtlExample](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/MtlExample.hs)
  \ndemonstrates the same simple features as above, but runs them atop an example
  mtl stack, \nallowing access to the mtl stack's functionality during document assembly.\n*
  [RandomExample](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/RandomExample.hs)
  \nbuilds on the mtl example to show how you can also add an additional polysemy
  effect (in this case, \nPolysemy.RandomFu from [polysemy-RandomFu](https://hackage.haskell.org/package/polysemy-RandomFu))\nto
  your document-building. \nThis one also demonstrates a use of [colonnade](https://hackage.haskell.org/package/colonnade)
  \nfor adding a formatted table to the document.\n* [ErrorExample](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/ErrorExample.hs).
  \ \nSimilar to \"SimpleExample\" but throws a user error during document assembly.\n\n##
  Notes\n* You should be able to get everything you need by just importing the \n[Knit.Report](https://github.com/adamConnerSax/knit-haskell/blob/master/src/Knit/Report.hs)
  \nmodule.  That has the main functions for \"knitting\" documents from fragments
  \nand re-exports all the required functions to input the supported fragment types
  and create/write Html.\n* This uses [polysemy](https://github.com/isovector/polysemy#readme)
  for its effect management rather than mtl.  \nEffects are provided for logging and
  generating [random-fu](http://hackage.haskell.org/package/random-fu) style random
  numbers.  \nPolysemy's inference and performance are improved greatly if you enable
  the [polysemy-plugin](https://hackage.haskell.org/package/polysemy-plugin),\nwhich
  involves:\n1. adding \"polysemy-plugin\" in build-depends and\n2. Add \"ghc-options:
  -fplugin=Polysemy.Plugin\" to your package configuration.\nPandoc effects and writer
  effects for document building are also provided.\n* Polysemy is capable of \"absorbing\"
  some mtl-style monad constraints.  This is demonstrated in\nthe [Random](https://github.com/adamConnerSax/knit-haskell/blob/master/examples/RandomExample.hs#L96)
  and\ncomposable absorbers for MonadReader, MonadWriter, MonadState and MonadError\ncan
  be found in the [polysemy-zoo](https://github.com/isovector/polysemy-zoo).\n* Pandoc
  templates are included for HTML output.  See the examples for how to access them\nor
  specify others.\n* Though you can theoretically output to any format Pandoc can
  \nwrite--and it would be great to add some output formats!--some \nfeatures only
  work with some output formats. \nMy goal was the production of Html and that is
  the only output format that supports the hvega charting \nsince hvega itself is
  just a wrapper that builds javascript to render in a browser.  \nAnd so far that
  is the only supported output format.\n\n* This is very much a WIP. So it's rough
  around the edges and in the middle.  If you find it useful but have suggestions,
  please submit issues on github.\n* I'm very interested in adding to the \"zoo\"
  of input fragments.  Any PRs of that sort would be most welcome!\n* I'm also interested
  in widening the possible output types--currently only HTML is supported--but \nthat
  is quite limited now by hvega which only works in html output.  \nBut support could
  be added for other output types if hvega input is not required.\n\n\n[travis]:        <https://travis-ci.org/adamConnerSax/knit-haskell>\n[travis-badge]:
  \ <https://travis-ci.org/adamConnerSax/knit-haskell.svg?branch=master>\n[hackage]:
  \      <https://hackage.haskell.org/package/knit-haskell>\n[hackage-badge]: <https://img.shields.io/hackage/v/knit-haskell.svg>\n[hackage-deps-badge]:
  <https://img.shields.io/hackage-deps/v/knit-haskell.svg>\n[hackage-deps]: <http://packdeps.haskellers.com/feed?needle=knit-haskell>\n"
license-name: BSD-3-Clause
