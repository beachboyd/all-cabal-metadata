homepage: https://gitlab.com/fosskers/versions
changelog-type: markdown
hash: 4b2cd56847a119fda4f9081e00d4e319f8bc1f64aa6d212f4573292c85e12fe8
test-bench-deps:
  base-prelude: -any
  checkers: ! '>=0.4 && <0.5'
  base: ! '>=4.8 && <4.12'
  text: ! '>=1.2 && <1.3'
  megaparsec: ! '>=7 && <8'
  versions: -any
  tasty-quickcheck: ! '>=0.8 && <0.11'
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.2'
  QuickCheck: ! '>=2.9 && <2.13'
  microlens: ! '>=0.4 && <0.5'
maintainer: colin@fosskers.ca
synopsis: Types and parsers for software version numbers.
changelog: ! "Changelog\n=========\n\n3.5.0\n------\n- Updated to `megaparsec-7`.
  Our `ParsingError` type alias has changed to match\n  Megaparsec's new error model,
  and `errorBundlePretty` is now exposed instead of\n  the old `parseErrorPretty`.\n\n3.4.0.1\n---------\n-
  Enhanced the whitespace handling in `semver'`, `version'`, and `mess'`.\n\n3.4.0\n------\n-
  Removed `ParseV` and surrounding machinery.\n  Use `versioning` now instead of the
  `parseV` function.\n\n3.3.2\n------\n- GHC 8.4.1 compatibility.\n\n3.3.0\n------\n-
  New `Semantic` typeclass that provides Traversals for SemVer-like data out\n  of
  all the version types. `Text` was also given an instance, so its much\n  easier
  to manipulate directly:\n\n```\nÎ» \"1.2.3\" & minor %~ (+ 1)\n\"1.3.3\"\n```\n\nSome
  Lenses and Traversals had their names changed or were removed entirely\nto accomodate
  this new typeclass.\n\n- `SemVer` and `Version` should never contain negative values,
  so their numeric\n  components were changed from `Int` to `Word`.\n\n3.2.0\n-----\n-
  Updated for `megaparsec-6` and GHC 8.2.\n\n3.1.1\n-----\n- Added instances for common
  typeclasses: `Generic`, `NFData`, and\n  `Hashable`. This is to avoid having users
  define these instances themselves\n  as orphans. If there are more instances you
  want added, please let me know.\n  `Data` was left out on purpose.\n\n3.1.0\n-----\n-
  Added support for *epoch* numbers in the `Version` type. These are numbers\n  like
  the `1:` in `1:2.3.4`. These are used in Arch Linux in rare cases where\n  packages
  change their versioning scheme, but need a reliable integer prefix\n  to establish
  ordering. The `Version` type has been given a new field,\n  `_vEpoch :: Maybe Int`,
  and a corresponding lens, `vEpoch`.\n\n3.0.2\n-----\n- Expose internal parsers so
  that they could be used in other parser programs\n  that parse version numbers in
  larger files.\n\n3.0.0\n-----\n- Updated for `megaparsec-5` and `ghc-8`\n\n2.0.0\n-----\n-
  Switched to `megaparsec` to perform all parsing as `Text`\n- Support for legacy
  `String` removed\n- Added more Traversals and INLINE'd all Lenses/Traversals\n\n1.1.0\n-----\n-
  Added Lenses and Traversals (no `lens` dependency)\n"
basic-deps:
  base: ! '>=4.8 && <4.12'
  text: ! '>=1.2 && <1.3'
  megaparsec: ! '>=7 && <8'
  hashable: ! '>=1.2 && <1.3'
  deepseq: ! '>=1.4 && <1.5'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '2.0.0'
- '3.0.0'
- '3.0.1.1'
- '3.0.2'
- '3.0.2.1'
- '3.1.0.1'
- '3.1.1'
- '3.2.0'
- '3.3.0'
- '3.3.1'
- '3.3.2'
- '3.4.0'
- '3.4.0.1'
- '3.5.0'
author: Colin Woodbury
latest: '3.5.0'
description-type: markdown
description: ! 'versions

  ========


  [![Hackage](https://img.shields.io/hackage/v/versions.svg?style=flat)](https://hackage.haskell.org/package/versions)

  [![Stackage Nightly](http://stackage.org/package/versions/badge/nightly)](http://stackage.org/nightly/package/versions)

  [![Stackage LTS](http://stackage.org/package/versions/badge/lts)](http://stackage.org/lts/package/versions)


  A Haskell library for parsing and comparing software version numbers.


  About

  -----

  We like to give version numbers to our software in a myriad of ways. Some

  ways follow strict guidelines for incrementing and comparison. Some follow

  conventional wisdom and are generally self-consistent. Some are just plain

  asinine. This library provides a means of parsing and comparing *any* style

  of versioning, be it a nice Semantic Version like this:


  > 1.2.3-r1+git123


  ...or a monstrosity like this:


  > 2:10.2+0.0093r3+1-1


  Please switch to [Semantic Versioning](http://semver.org) if you aren''t

  currently using it. It provides consistency in version incrementing and has

  the best constraints on comparisons.


  Usage

  -----

  In general, `versioning` is the function you want. It attempts to parse a given

  Text using the three individual parsers, `semver`, `version` and `mess`. If

  one fails, it tries the next. If you know you only want to parse one

  specific version type, use that parser directly (e.g. `semver`).


  #### Lenses and Traversals

  The parse result types have Lenses/Traversals for accessing their data

  fields. For instance, to increment the patch number of a parsed SemVer, you

  could:


  ```haskell

  incPatch :: SemVer -> SemVer

  incPatch s = s & patch %~ (+ 1)

  ```


  Or, something more involved:


  ```haskell

  -- | Get all major versions of legally parsed SemVers.

  majors :: [Text] -> [Word]

  majors vs = vs ^.. each . to semver . _Right . major

  ```


  The `to semver . _Right` is clunky, so we provide some direct `Text`

  Traverals inspired by

  ([micro](http://hackage.haskell.org/package/microlens-aeson))

  [lens-aeson](http://hackage.haskell.org/package/lens-aeson):


  ```haskell

  -- | Get the major version of any `Text` that has one.

  majors :: [Text] -> [Word]

  majors vs = vs ^.. each . major

  ```


  We can also use these `Text` Traversals to increment versions, as above:


  ```haskell

  incPatch :: Text -> Text

  incPatch s = s & patch %~ (+ 1)


  > incPatch "1.2.3"

  "1.2.4"

  ```

'
license-name: BSD3
