homepage: https://github.com/phadej/vec
changelog-type: markdown
hash: 82f4de63e0c3e38ff6550bbbcc1d83cc5b16ade820991be66e640c76177f9bd6
test-bench-deps:
  base: -any
  criterion: ! '>=1.4.0.0 && <1.6'
  tagged: -any
  inspection-testing: ! '>=0.2.0.1 && <0.5'
  vec: -any
  fin: -any
  vector: -any
maintainer: Oleg.Grenrus <oleg.grenrus@iki.fi>
synopsis: ! 'Vec: length-indexed (sized) list'
changelog: |
  # Revision history for vec

  ## 0.1.1.1

  - Use `fin-0.1`

  ## 0.1.1

  - Add `Data.Vec.DataFamily.SpineStrict` module
  - Add `Data.Vec.DataFamily.SpineStrict.Pigeonhole` module:
    this let us define `Representable` in a handy way.

  ## 0.1

  - Reverse dependencies with `boring`.
  - GHC-8.4.1 support

  ## 0

  - First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: ! '>=5.2.2 && <5.4'
  base: ! '>=4.7 && <4.13'
  adjunctions: ! '>=4.4 && <4.5'
  distributive: ! '>=0.5.3 && <0.7'
  lens: ! '>=4.16 && <4.18'
  base-compat: ! '>=0.9.3 && <0.11'
  hashable: ! '>=1.2.7.0 && <1.4'
  transformers: ! '>=0.3.0.0 && <0.6'
  deepseq: ! '>=1.3.0.2 && <1.5'
  fin: ! '>=0.1 && <0.2'
all-versions:
- '0'
- '0.1'
- 0.1.1
- 0.1.1.1
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: 0.1.1.1
description-type: haddock
description: |-
  This package provides length-indexed (sized) lists, also known as vectors.

  @
  data Vec n a where
  \    VNil  :: Vec 'Nat.Z a
  \    (:::) :: a -> Vec n a -> Vec ('Nat.S n) a
  @

  The functions are implemented in four flavours:

  * __naive__: with explicit recursion. It's simple, constraint-less, yet slow.

  * __pull__: using @Fin n -> a@ representation, which fuses well,
  but makes some programs hard to write. And

  * __data-family__: which allows lazy pattern matching

  * __inline__: which exploits how GHC dictionary inlining works, unrolling
  recursion if the size of 'Vec' is known statically.

  As best approach depends on the application, @vec@ doesn't do any magic
  transformation. Benchmark your code.

  This package uses [fin](https://hackage.haskell.org/package/fin), i.e. not @GHC.TypeLits@, for indexes.

  See [Hasochism: the pleasure and pain of dependently typed haskell programming](https://doi.org/10.1145/2503778.2503786)
  by Sam Lindley and Conor McBride for answers to /how/ and /why/.
  Read [APLicative Programming with Naperian Functors](https://doi.org/10.1007/978-3-662-54434-1_21)
  by Jeremy Gibbons for (not so) different ones.

  === Similar packages

  * [linear](https://hackage.haskell.org/package/linear) has 'V' type,
  which uses 'Vector' from @vector@ package as backing store.
  @Vec@ is a real GADT, but tries to provide as many useful instances (upto @lens@).

  * [vector-sized](https://hackage.haskell.org/package/vector-sized)
  Great package using @GHC.TypeLits@. Current version (0.6.1.0) uses
  @finite-typelits@ and @Int@ indexes.

  * [sized-vector](https://hackage.haskell.org/package/sized-vector) depends
  on @singletons@ package. @vec@ isn't light on dependencies either,
  but try to provide wide GHC support.

  * [fixed-vector](https://hackage.haskell.org/package/fixed-vector)

  * [sized](https://hackage.haskell.org/package/sized) also depends
  on a @singletons@ package. The @Sized f n a@ type is generalisation of
  @linear@'s @V@ for any @ListLike@.

  * [clash-prelude](https://hackage.haskell.org/package/clash-prelude)
  is a kitchen sink package, which has @CLaSH.Sized.Vector@ module.
  Also depends on @singletons@.
license-name: BSD-3-Clause
