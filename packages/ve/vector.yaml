homepage: https://github.com/haskell/vector
changelog-type: text
hash: 73e15b89e25a31d7dc5f5c36570c630230dd4aec0ed175e5460b440c475995fb
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ! '>=4.5 && <5'
  test-framework-quickcheck2: -any
  HUnit: -any
  base-orphans: ! '>=0.6'
  transformers: ! '>=0.2.0.0'
  random: -any
  QuickCheck: ==2.9.*
  template-haskell: -any
  primitive: -any
  vector: -any
maintainer: Haskell Libraries Team <libraries@haskell.org>
synopsis: Efficient Arrays
changelog: |
  Changes in version 0.12.0.3
    * Add support for ghc >=8.8 monad fail
  Changes in version 0.12.0.2
    * Fixes issue #220, compact heap operations crashing on boxed vectors constructed
      using traverse.
    * remove usage of Data.Primitive.Address and clarify the memset Prim Storable
      smuggling trick in Vector.Storable.Mutable
    * backport injective type family support

  Changes in version 0.12.0.1

   * Make sure `length` can be inlined
   * Include modules that test-suites depend on in other-modules

  Changes in version 0.12.0.0

   * Documentation fixes/additions
   * New functions: createT, iscanl/r, iterateNM, unfoldrM, uniq
   * New instances for various vector types: Semigroup, MonadZip
   * Made `Storable` vectors respect memory alignment
   * Changed some macros to ConstraintKinds
     - Dropped compatibility with old GHCs to support this
   * Add `Eq1`, `Ord1`, `Show1`, and `Read1` `Vector` instances, and related
     helper functions.
   * Relax context for `Unbox (Complex a)`.

  Changes in version 0.11.0.0

   * Define `Applicative` instances for `Data.Vector.Fusion.Util.{Box,Id}`
   * Define non-bottom `fail` for `instance Monad Vector`
   * New generalized stream fusion framework
   * Various safety fixes
     - Various overflows due to vector size have been eliminated
     - Memory is initialized on creation of unboxed vectors
   * Changes to SPEC usage to allow building under more conditions

  Changes in version 0.10.12.3

   * Allow building with `primitive-0.6`

  Changes in version 0.10.12.2

   * Add support for `deepseq-1.4.0.0`

  Changes in version 0.10.12.1

   * Fixed compilation on non-head GHCs

  Changes in version 0.10.12.0

   * Export MVector constructor from Data.Vector.Primitive to match Vector's
     (which was already exported).

   * Fix building on GHC 7.9 by adding Applicative instances for Id and Box

  Changes in version 0.10.11.0

   * Support OverloadedLists for boxed Vector in GHC >= 7.8

  Changes in version 0.10.10.0

   * Minor version bump to rectify PVP violation occured in 0.10.9.3 release

  Changes in version 0.10.9.3 (deprecated)

   * Add support for OverloadedLists in GHC >= 7.8

  Changes in version 0.10.9.2

   * Fix compilation with GHC 7.9

  Changes in version 0.10.9.1

   * Implement poly-kinded Typeable

  Changes in version 0.10.0.1

   * Require `primitive` to include workaround for a GHC array copying bug

  Changes in version 0.10

   * `NFData` instances
   * More efficient block fills
   * Safe Haskell support removed
basic-deps:
  base: ! '>=4.5 && <4.13'
  ghc-prim: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.1 && <1.5'
  primitive: ! '>=0.5.0.1 && <0.8'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- '0.5'
- '0.6'
- 0.6.0.1
- 0.6.0.2
- '0.7'
- 0.7.0.1
- 0.7.1
- '0.8'
- '0.9'
- 0.9.1
- '0.10'
- 0.10.0.1
- 0.10.9.0
- 0.10.9.1
- 0.10.9.2
- 0.10.10.0
- 0.10.11.0
- 0.10.12.1
- 0.10.12.2
- 0.10.12.3
- 0.11.0.0
- 0.12.0.0
- 0.12.0.1
- 0.12.0.2
- 0.12.0.3
author: Roman Leshchinskiy <rl@cse.unsw.edu.au>
latest: 0.12.0.3
description-type: markdown
description: |
  The `vector` package [![Build Status](https://travis-ci.org/haskell/vector.png?branch=master)](https://travis-ci.org/haskell/vector)
  ====================

  An efficient implementation of Int-indexed arrays (both mutable and immutable), with a powerful loop optimisation framework.

  See [`vector` on Hackage](http://hackage.haskell.org/package/vector) for more information.
license-name: BSD-3-Clause
