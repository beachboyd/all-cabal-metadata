homepage: https://github.com/bos/vector-binary-instances
changelog-type: ''
hash: 7f4d2c9f05252a5cda556a6cb1af233b268928715cc79dc49d8e0c2d0a9954fa
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7'
  gauge: -any
  vector-binary-instances: -any
  binary: -any
  tasty-quickcheck: -any
  tasty: -any
  deepseq: -any
  vector: -any
maintainer: dons00@gmail.com, bos@serpentine.com, Ben Gamari <ben@smart-cactus.org>
synopsis: Instances of Data.Binary for vector
changelog: ''
basic-deps:
  base: ! '>3 && <4.13'
  binary: ! '>=0.5 && <0.11'
  vector: ! '>=0.6 && <0.13'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.1'
- '0.2.3.2'
- '0.2.3.3'
- '0.2.3.4'
- '0.2.3.5'
- '0.2.4'
- '0.2.5'
- '0.2.5.1'
author: Don Stewart
latest: '0.2.5.1'
description-type: haddock
description: ! 'Instances for Binary for the types defined in the vector package,

  making it easy to serialize vectors to and from disk. We use the

  generic interface to vectors, so all vector types are supported.

  Specific instances are provided for unboxed, boxed and storable

  vectors.


  To serialize a vector:


  > *Data.Vector.Binary> let v = Data.Vector.fromList [1..10]

  > *Data.Vector.Binary> v

  > fromList [1,2,3,4,5,6,7,8,9,10] :: Data.Vector.Vector

  > *Data.Vector.Binary> encode v

  > Chunk "\NUL\NUL\NUL\NUL\NUL...\NUL\NUL\NUL\t\NUL\NUL\NUL\NUL\n" Empty


  Which you can in turn compress before writing to disk:


  > compress . encode $ v

  > Chunk "\US\139\b\NUL\NUL\N...\229\240,\254:\NUL\NUL\NUL" Empty


  Try the cereal-vector package if you are looking for Data.Serialize

  instances.'
license-name: BSD3
