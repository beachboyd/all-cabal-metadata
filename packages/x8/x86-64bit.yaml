homepage: https://github.com/divipp/x86-64
changelog-type: markdown
hash: 67ffc797c0c27660c4fbffc63bd6f1e0137c3f5e8dbe3fe5221242da3b1678b1
test-bench-deps:
  base: ! '>=4.8 && <4.10'
  monads-tf: ! '>=0.1 && <0.2'
  tardis: ! '>=0.4 && <0.5'
  deepseq: -any
  QuickCheck: ! '>=2.8 && <2.10'
  vector: ! '>=0.11 && <0.12'
maintainer: divipp@gmail.com
synopsis: Runtime code generation for x86 64 bit machine code
changelog: ! "# Version 0.4.5\r\n\r\n-   fix build with newer base\r\n\r\n# Version
  0.4.4\r\n\r\n-   export some useful data types \r\n\r\n# Version 0.4.3\r\n\r\n-
  \  fixes to compile on GHC 7.10 and on Windows\r\n\r\n# Version 0.4.2\r\n\r\n-   fix
  OSX compilation\r\n\r\n# Version 0.4.1\r\n\r\n-   fix a bug which caused segmentation
  fault if a compiled function was called multiple times\r\n\r\n# Version 0.4\r\n\r\n-
  \  rewrite FFI\r\n-   support calling labels\r\n-   speed up long code alignments\r\n-
  \  bugfix: auto size calculation fix\r\n\r\n# Version 0.3.1\r\n\r\n-   use multi-byte
  nop operations for padding\r\n-   `preBuild` operation (may speed up code generation)\r\n-
  \  branch-predicition friendlier if-then-else\r\n-   not-condition pattern: `N`
  \ \r\n    usage example: `j (N E)` which is the same as `j NE`\r\n-   bugfix: fix
  if-then-else condition\r\n\r\n# Version 0.3\r\n\r\n-   simpler API for label handling
  \ \r\n    (the idea of labels as De-Bruijn indices is abandoned)\r\n\r\n# Version
  0.2\r\n\r\n-   simpler API for immediate values: `Add ax, 1`\r\n-   redesigned addressing
  API: `Add ax (addr $ rax + 4*rdi + 3)`\r\n-   support near jumps\r\n-   support
  automatic decision between short and near jumps (conditional jumps too)\r\n-   support
  more registers and instructions:\r\n    -   cmovCC instructions\r\n    -   SSE registers:
  xmm0 - xmm7\r\n    -   SSE instructions: movd, movq, movdqa, paddb, paddw, paddd,
  paddq, psubb, psubw, psubd, psubq, pxor\r\n    -   SSE instructions (partial support):
  psllw, pslld, psllq, pslldq, psrlw, psrld, psrlq, psrldq, psraw, psraq\r\n-   bugfixes\r\n
  \   -   throw an error if an immediate value does not fit\r\n    -   fix show instance
  of shift instructions\r\n\r\n# Version 0.1.4\r\n\r\n-   OS X operating system support
  (Balázs Kőműves)\r\n-   better show for db\r\n-   bugfix\r\n    -   save flags in
  traceReg\r\n\r\n# Version 0.1.3\r\n\r\n-   jmpq instruction support (George Stelle)\r\n-
  \  support near conditional jumps\r\n-   support automatic decision between short
  and near conditional jumps for backward references\r\n-   support alternative condition
  names\r\n-   make possible to use labels as relative immediate values (not used
  yet)\r\n-   bugfix\r\n    -   fail if a short jump is out of range\r\n\r\n# Version
  0.1.2\r\n\r\n-   Windows operating system support (Balázs Kőműves)\r\n-   GHC 7.10
  support\r\n-   TODO.md file added\r\n\r\n# Version 0.1.1.1\r\n\r\n-   change dependencies
  to reflect that the package compiles only with ghc 8\r\n-   add 'tested-with: GHC
  == 8.0.1' to the cabal file\r\n\r\n# Version 0.1.1\r\n\r\n-   examples moved into
  the library\r\n-   more Haddock comments\r\n-   add cabal test suit\r\n-   bugfixes\r\n
  \   -   fix code generation for alignments\r\n    -   smaller code is generated
  now for 'add rax, 100' and similar instrcutions\r\n\r\n"
basic-deps:
  base: ! '>=4.8 && <4.10'
  monads-tf: ! '>=0.1 && <0.2'
  tardis: ! '>=0.4 && <0.5'
  deepseq: -any
  QuickCheck: ! '>=2.8 && <2.10'
  vector: ! '>=0.11 && <0.12'
all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
author: Péter Diviánszky
latest: 0.4.5
description-type: markdown
description: ! "# x86-64\r\n\r\nThe primary goal of x86-64 is to provide a lightweight
  assembler for machine generated 64 bit x86 assembly instructions.\r\n\r\nFeatures:\r\n\r\n-
  \  The size of operands are statically checked. For example, exchanging `rax` with
  `eax` raises a compile time error rather than a code-generation time error. As a
  consequence, code generation is faster because the sizes are statically known.\r\n-
  \  Quickcheck tests: You can quickcheck your x86 processor! Please report failures,
  there is a higher chance that the error is in this library rather than in your processor.\r\n-
  \  Immediate values are automatically converted to smaller size if possible.\r\n-
  \  Automatic calculation of short and near distances\r\n\r\nThe package is available
  on HackageDB: http://hackage.haskell.org/package/x86-64bit\r\n\r\n"
license-name: BSD-3-Clause
