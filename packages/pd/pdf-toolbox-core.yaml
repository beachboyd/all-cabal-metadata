homepage: https://github.com/Yuras/pdf-toolbox
changelog-type: markdown
hash: 3095243884798b439ebaf89c3c79a783b2bc9076b867e87050fd668888feeedc
test-bench-deps: {}
maintainer: Yuras Shumovich <shumovichy@gmail.com>
synopsis: A collection of tools for processing PDF files.
changelog: ! "0.0.4.1\n\n* fix compilation on ghc 7.4, 7.6 and 7.8\n\n0.0.4.0\n\n*
  switch to errors-2.0\n\n0.0.3.3\n\n* add upper bound to `errors` dependency\n* support
  ghc-7.10.1\n\n0.0.3.2\n\n* support 1- and 2-digit escapes sequence in literal string\n\n0.0.3.0\n\n*
  add Functor and Applicative instances to fix AMP warnings\n* fix attoparsec module
  deprication warnings\n* add scientific dependency\n  latest attoparsec uses it for
  numbers\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.5 && <5'
  containers: -any
  io-streams: -any
  zlib-bindings: -any
  attoparsec: ! '>=0.10'
  transformers: -any
  errors: ! '>=2.0 && <3.0'
  scientific: -any
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.2.0
- 0.0.2.1
- 0.0.3.0
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- 0.0.4.0
- 0.0.4.1
author: Yuras Shumovich
latest: 0.0.4.1
description-type: haddock
description: ! 'Low level tools for processing PDF files.


  Level of abstraction: cross reference, trailer, indirect object, object


  The API is based on random access input streams, and is designed to be memory efficient.

  We don''t need to parse the entire PDF file and store it in memory when you need
  just one page or two.

  Usually it is also leads to time efficiency, but we don''t try optimize performance

  by e.g. maintaining xref or object cache. Higher level layers should take care of
  it.


  The library is low level. It may mean that you need to be familiar with PDF file
  internals to

  actually use it.'
license-name: BSD-3-Clause
