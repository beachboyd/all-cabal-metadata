homepage: http://github.com/jtobin/mwc-probability
changelog-type: text
hash: fe7186892a8b1d857ae2266ff4dbaf8a4d9840d0bb267e60bdc56408d3a1cb13
test-bench-deps: {}
maintainer: jared@jtobin.ca, zocca.marco gmail
synopsis: Sampling function-based probability distributions.
changelog: "\t# Changelog\n\n\t- 2.1.0 (2019-07-23)\n\t* Generalises 'categorical'
  and 'multinomial' to take things proportional to\n\t  probabilities, rather than
  probabilities proper.\n\n\t- 2.0.4 (2018-06-30)\n\t* Clean up docs and add some
  additional usage information.\n\t* Split the existing Student t distribution into
  'student' and its\n\t  generalised variant, 'gstudent'.\n\n\t- 2.0.3 (2018-05-09)\n\t*
  Add inverse Gaussian (Wald) distribution\n\n\t- 2.0.2 (2018-01-30)\n\t* Add negative
  binomial distribution\n\n\t- 2.0.1 (2018-01-30)\n\t* Add Normal-Gamma and Pareto
  distributions\n\n\t- 2.0.0 (2018-01-29)\n\t* Add Laplace and Zipf-Mandelbrot distribution\n\t*
  Rename `isoGauss` to `isoNormal` and `standard` to `standardNormal` to\n\t  uniform
  naming scheme.\n\t* Divide Haddock in sections\n\n\t- 1.3.0 (2016-12-04)\n\t* Generalize
  a couple of samplers to use Traversable rather than lists.\n\n\n"
basic-deps:
  mwc-random: ! '>0.13 && <0.15'
  base: ! '>=4.8 && <6'
  transformers: ! '>=0.5 && <1.0'
  primitive: ! '>=0.6 && <1.0'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.1.3
- 1.2.0
- 1.2.1
- 1.2.2
- 1.3.0
- 2.0.0
- 2.0.1
- 2.0.2
- 2.0.3
- 2.0.4
- 2.1.0
author: Jared Tobin, Marco Zocca
latest: 2.1.0
description-type: markdown
description: |+
  # mwc-probability

  [![Build Status](https://secure.travis-ci.org/jtobin/mwc-probability.png)](http://travis-ci.org/jtobin/mwc-probability)
  [![Hackage Version](https://img.shields.io/hackage/v/mwc-probability.svg)](http://hackage.haskell.org/package/mwc-probability)
  [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/jtobin/mwc-probability/blob/master/LICENSE)

  Sampling function-based probability distributions.

  A simple probability distribution type, where distributions are characterized
  by sampling functions.

  This implementation is a thin layer over `mwc-random`, which handles RNG
  state-passing automatically by using a `PrimMonad` like `IO` or `ST s` under
  the hood.

  Examples
  --------

  * Transform a distribution's support while leaving its density structure
  invariant:

        -- uniform over [0, 1] transformed to uniform over [1, 2]
        succ <$> uniform

  * Sequence distributions together using bind:

        -- a beta-binomial composite distribution
        beta 1 10 >>= binomial 10

  * Use do-notation to build complex joint distributions from composable,
    local conditionals:

        hierarchicalModel = do
          [c, d, e, f] <- replicateM 4 (uniformR (1, 10))
          a <- gamma c d
          b <- gamma e f
          p <- beta a b
          n <- uniformR (5, 10)
          binomial n p

  Check out the haddock-generated docs on
  [Hackage](https://hackage.haskell.org/package/mwc-probability) for other
  examples.

  ## Etc.

  PRs and issues welcome.

license-name: MIT
