homepage: http://github.com/jtobin/mwc-probability
changelog-type: text
hash: d0e99e1f3604de2f5de9db31a07fad0b721c302ea569a5e5edc548b33c2ae238
test-bench-deps: {}
maintainer: jared@jtobin.ca, zocca.marco gmail
synopsis: Sampling function-based probability distributions.
changelog: ! "\t# Changelog\n\n\t- 2.0.2 (2018-01-30)\n\t* Add negative binomial distribution\n\n\t-
  2.0.1 (2018-01-30)\n\t* Add Normal-Gamma and Pareto distributions\n\n\t- 2.0.0 (2018-01-29)\n\t*
  Add Laplace and Zipf-Mandelbrot distribution\n\t* Rename `isoGauss` to `isoNormal`
  and `standard` to `standardNormal` to uniform naming scheme\t\n\t* Divide Haddock
  in sections\n\t\n\t- 1.3.0 (2016-12-04)\n\t* Generalize a couple of samplers to
  use Traversable rather than lists.\n\n\n"
basic-deps:
  mwc-random: ! '>0.13 && <0.14'
  base: ! '>=4.8 && <6'
  transformers: ! '>=0.5 && <1.0'
  primitive: ! '>=0.6 && <1.0'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.1.3'
- '1.2.0'
- '1.2.1'
- '1.2.2'
- '1.3.0'
- '2.0.0'
- '2.0.1'
- '2.0.2'
author: Jared Tobin, Marco Zocca
latest: '2.0.2'
description-type: markdown
description: ! "# mwc-probability\n\n[![Build Status](https://secure.travis-ci.org/jtobin/mwc-probability.png)](http://travis-ci.org/jtobin/mwc-probability)\n[![Hackage
  Version](https://img.shields.io/hackage/v/mwc-probability.svg)](http://hackage.haskell.org/package/mwc-probability)\n[![MIT
  License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/jtobin/mwc-probability/blob/master/LICENSE)\n\nSampling
  function-based probability distributions.\n\nA simple probability distribution type,
  where distributions are characterized\nby sampling functions.\n\nThis implementation
  is a thin layer over `mwc-random`, which handles RNG\nstate-passing automatically
  by using a `PrimMonad` like `IO` or `ST s` under\nthe hood.\n\nExamples\n--------\n\nTransform
  a distribution's support while leaving its density structure\ninvariant:\n\n    --
  uniform over [0, 1] to uniform over [1, 2]\n    succ <$> uniform\n\nSequence distributions
  together using bind:\n\n    -- a beta-binomial composite distribution\n    beta
  1 10 >>= binomial 10\n\nUse do-notation to build complex joint distributions from
  composable,\nlocal conditionals:\n\n    hierarchicalModel = do\n      [c, d, e,
  f] <- replicateM 4 $ uniformR (1, 10)\n      a <- gamma c d\n      b <- gamma e
  f\n      p <- beta a b\n      n <- uniformR (5, 10)\n      binomial n p\n\n"
license-name: MIT
