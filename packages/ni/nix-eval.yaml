homepage: http://chriswarbo.net/git/nix-eval
changelog-type: ''
hash: d58e59154457475bd3c02ae9c292c9f73514d935b5c37c923dda65cfe0c6ecbf
test-bench-deps:
  nix-eval: -any
  base: ! '>=4.7'
  tasty-quickcheck: -any
  tasty: ! '>=0.7'
  QuickCheck: -any
maintainer: chriswarbo@gmail.com
synopsis: Evaluate Haskell expressions using Nix to get packages
changelog: ''
basic-deps:
  hindent: ! '>=4.0'
  base: ! '>=4.8 && <4.10'
  strict: -any
  process: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.3.3.0
author: Chris Warburton
latest: 0.3.3.0
description-type: markdown
description: ! "# Dependency-Injecting Eval for Haskell\n\nThis Haskell package is
  a crude implementation of `eval`, as found in dynamic\nlanguages like Lisp, Python,
  Javascript, etc. It lets us construct Haskell\ncode programatically (either at run
  time, or in Template Haskell), and attempt\nto evaluate it.\n\nWhat sets this package
  apart from other `eval` implementations, is the ability\nto control which packages
  and modules are available during evaluation. This is\nachieved by calling out to
  the [Nix package manager](http://nixos.org/nix).\n\n## Implementation Details\n\n`Expr`
  is the type of expressions, which contains a list of package names, a\nlist of modules
  to import, a list of compiler flags, a list of `String`s to\nput in the generated
  module and a `String` of Haskell code to evaluate. All of\nthese are just `String`s
  internally, but we use wrappers to prevent accidentally\nusing packages as modules,
  etc.\n\nA few combinators are provided for common manipulations, for example\n`qualified
  \"Foo\" \"bar\"` will produce the expression `\"Foo.bar\"` with `\"Foo\"` in\nits
  module list. The `OverloadedStrings` extension allows packages, modules,\nflags
  and expressions to be written as literals. Note that literal expressions\nare given
  an empty context; you will have to specify any required modules,\npackages, etc.
  separately.\n\nWhen evaluated, the Haskell code is prefixed by an import of each
  module, the\n\"preamble\" strings (if any) and wrapped in `main = putStr (..)`.
  This code is\npiped into `runhaskell`. If any flags are specified, they are appended
  as\narguments to the `runhaskell` command.\n\nThe `runhaskell` process itself is
  invoked via the `nix-shell` command, which\nprovides all of the required packages
  via the `ghcWithPackages` mechanism of\nnixpkgs. Packages are taken from nixpkgs's
  `haskellPackages` set by default,\nwhich can be overridden by setting the `NIX_EVAL_HASKELL_PKGS`
  environment\nvariable to the path of a Nix file. Note that the package names used
  in your\nHaskell code should correspond to the keys in this package set, which might\ndiffer
  from those used on Hackage.\n\nIf the process exits successfully, its stdout will
  be returned wrapped in\n`Just`; otherwise `Nothing` is returned. If you wish to
  alter the `main`\nimplementation, use `Language.Eval.Internal.eval'`\n\nThis implementation
  is a little rough; for example, you may prefer to use `Text`\nrather than `String`;
  use a better representation like the syntax trees from\nTemplateHaskell or `haskell-src-exts`
  instead; or accumulate packages and\nmodules monadically.\n\nThe intention of this
  library is to provide a simple, minimal base to support\nsuch design choices, and
  `String` is the lowest common denominator. You're\nwelcome, and encouraged, to build
  more sophisticated APIs; as long as you can\npretty-print to a `String`, they should
  work out of the box.\n\nThis is also why we return the contents of stdout, rather
  than trying to parse\nit into a more appropriate type: it's not our place to choose
  how the result\nshould be parsed, so we avoid the problem; by that point, our job
  is done.\n\n## Limitations\n\n - Since evaluation takes place in a separate GHC
  process, there can be no\n   sharing of data outside the strings provided (unless
  you provide a separate\n   mechanism like a FIFO)\n - Expressions are wrapped in
  `putStr`, so the expression must be a `String`.\n   You may need to marshall your
  data into a form which is more amenable to\n   serialising/deserialising via `String`.\n
  - Evaluation is **SLOW**! More specifically, `eval` has a very high latency, so\n
  \  it's *much* more efficient to `eval` one big collection of values than it is\n
  \  to `eval` each individually.\n - Evaluation time is highly variable, since the
  required packages may need to\n   be compiled. Nix caches build products, so subsequent
  calls using the same\n   packages will be quicker; however, my machine still takes
  about 2 seconds to\n   instantiate a cached environment.\n - Output is captured
  from stdout, so if your expression triggers side-effects\n   they'll appear in your
  result (this may be desirable, but keep it in mind).\n - Evaluation doesn't always
  compose, ie. just because `x` and `y` evaluate\n   successfully doesn't mean that
  some combination of them will. Obviously an\n   ill-typed combination will fail,
  but other reasons include:\n    - Combining both import lists can make names ambiguous.
  For this reason you\n      should always try to qualify your expressions.\n    -
  Global properties may conflict between modules, like overlapping typeclass\n      instances.\n
  \   - Combining both package lists can make modules ambiguous.\n    - If the dependencies
  of two packages conflict, evaluation will fail.\n - As with any kind of `eval`,
  there is absolutely no security. Do not pass\n   potentially-malicious user input
  to this library! Not only can arbitrary\n   Haskell code be run (eg. using `unsafePerformIO`,
  but the flags are also a\n   shell injection vector.\n"
license-name: LicenseRef-GPL
