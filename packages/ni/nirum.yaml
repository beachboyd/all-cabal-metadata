homepage: https://nirum.org/
changelog-type: markdown
hash: dac3ceff238a0e8bd5e7f678e0324457efd73ed5a086784d29d489b421015a4f
test-bench-deps:
  hlint: ! '>=2.1.7 && <2.2'
  email-validate: ! '>=2.0.0 && <3.0.0'
  bytestring: -any
  htoml: ! '>=1.0.0.0 && <1.1.0.0'
  base: ! '>=4.7 && <5'
  nirum: -any
  unordered-containers: -any
  hspec: -any
  text: ! '>=0.9.1.0 && <1.3'
  hspec-meta: -any
  string-qq: ! '>=0.0.2 && <0.1.0'
  megaparsec: ==6.5.*
  hspec-core: -any
  filepath: ==1.4.*
  process: ! '>=1.1 && <2'
  parsec: -any
  semigroups: -any
  interpolatedstring-perl6: ! '>=1.0.0 && <1.1.0'
  turtle: -any
  containers: ! '>=0.5.6.2 && <0.6'
  hxt: ! '>=9.3.1.16 && <9.4.0.0'
  semver: ! '>=0.3.0 && <1.0'
  mtl: ! '>=2.2.1 && <3'
  blaze-html: ! '>=0.9.0.1 && <0.10'
  temporary: ! '>=1.2 && <1.4'
  pretty: ! '>=1.1.3 && <2'
  directory: ! '>=1.2.5 && <1.4'
maintainer: Nirum team
synopsis: IDL compiler and RPC/distributed object framework for microservices
changelog: ! "Nirum changelog\n===============\n\nVersion 0.5.0\n-------------\n\nReleased
  on August 24, 2018.\n\n### Language\n\n -  The `uri` type has completly gone; use
  `url` instead.\n    [[#126], [#281] by Jonghun Park]\n -  Added [`@numeric-constraints`](docs/annotation.md#numeric-constraints)\n
  \   annotation to constraint the range of unboxed types' values.\n    [[#206], [#271]
  by Seunghun Lee]\n\n### Docs target\n\n -  Docs target became to support manual
  pages besides reference docs extracted\n    from Nirum source codes.  It scans all
  CommonMark (i.e., _*.md_) files and\n    transforms them to HTML pages.\n -  [CommonMark]
  in docstrings became to support [table syntax extension].\n -  [CommonMark] in docstrings
  became to have a limited subset of\n    [special attributes extension].  It's only
  allowed to heading elements and\n    only anchor identifiers are supported (e.g.,
  `{#header-id}`).\n -  `style`, `header`, and `footer` options were added.  These
  options purpose\n    to customize the look and feel of the result pages.\n -  Fixed
  an incorrect processing of [CommonMark] thight list items: it had\n    crashed when
  a thight list item contains blocks other than paragraphs.\n -  Package's version
  became shown on the generated docs.\n    [[#297], [#304] by Jeong Ukjae]\n -  Added
  `opengraphs` option for [OpenGraph] objects on docs.\n    [[#283], [#305] by GyuYong
  Jung]\n -  Added syntax highlighting including Nirum.\n    [[#310], [#311], [#313],
  [#324] by MinJune Kim]\n -  Added anchor links to types.\n    [[#225], [#321] by
  Park Hyunwoo]\n\n### Python target\n\n -  Python 3.7 support. [[#298], [#300] by
  Alan D.J. Synn]\n -  Fixed a bug that an uncaught `NameError` raises (instead of
  following\n    the standardized way to handle validation errors through `on_error`)\n
  \   when a serialized value of a mapping lacks `\"key\"` or `\"value\"`\n    field
  and a type/union tag/service named `key-error` is defined in the same\n    module
  at the same time.  [[#318] by Dongwook Kim]\n -  Fixed a bug that an uncaught `NameError`
  raises (instead of following\n    the standardized way to handle validation errors
  through `on_error`)\n    when a serialized value of a `bigint` is not an integral
  decimal string\n    and a type/union tag/service named `value-error` is defined
  in the same\n    module at the same time.  [[#318] by Dongwook Kim]\n\n### Et cetera\n\n
  -  Dropped 32-bit Windows support.\n\n[#126]: https://github.com/nirum-lang/nirum/issues/126\n[#206]:
  https://github.com/nirum-lang/nirum/issues/206\n[#225]: https://github.com/nirum-lang/nirum/issues/225\n[#271]:
  https://github.com/nirum-lang/nirum/pull/271\n[#281]: https://github.com/nirum-lang/nirum/pull/281\n[#283]:
  https://github.com/spoqa/nirum/pull/283\n[#297]: https://github.com/nirum-lang/nirum/issues/297\n[#298]:
  https://github.com/nirum-lang/nirum/issues/298\n[#300]: https://github.com/nirum-lang/nirum/pull/300\n[#304]:
  https://github.com/nirum-lang/nirum/pull/304\n[#305]: https://github.com/nirum-lang/nirum/pull/305\n[#310]:
  https://github.com/nirum-lang/nirum/issues/310\n[#311]: https://github.com/nirum-lang/nirum/pull/311\n[#313]:
  https://github.com/nirum-lang/nirum/issues/313\n[#318]: https://github.com/nirum-lang/nirum/pull/318\n[#321]:
  https://github.com/nirum-lang/nirum/pull/321\n[#324]: https://github.com/nirum-lang/nirum/pull/324\n[CommonMark]:
  http://commonmark.org/\n[table syntax extension]: https://github.github.com/gfm/#tables-extension-\n[special
  attributes extension]: https://michelf.ca/projects/php-markdown/extra/#spe-attr\n[OpenGraph]:
  http://ogp.me/\n\n\nVersion 0.4.2\n-------------\n\nReleased on Aug 24, 2018.\n\n###
  Language\n\n -  Fixed a bug that *package.toml* file had been failed to load when
  the system\n    locale does not use UTF-8. It's now independent from the system
  locale\n    settings.\n    [[#290], [#322] by Seunghun Lee]\n\n### Et cetera\n\n
  -  The official Docker image repository was moved to\n    [nirumlang/nirum](https://hub.docker.com/r/nirumlang/nirum/)\n
  \   (from [spoqa/nirum](https://hub.docker.com/r/spoqa/nirum/)).\n\n[#290]: https://github.com/nirum-lang/nirum/issues/290\n[#322]:
  https://github.com/nirum-lang/nirum/pull/322\n\n\nVersion 0.4.1\n-------------\n\nReleased
  on June 8, 2018.\n\n### Et cetera\n\n -  The official Docker images became to have
  netbase pacakage. See the\n    [related issue on Haskell Stack][commercialhaskell/stack#2372]
  as well.\n\n[commercialhaskell/stack#2372]: https://github.com/commercialhaskell/stack/issues/2372\n\n\nVersion
  0.4.0\n-------------\n\nReleased on May 25, 2018.\n\n### Language\n\n -  Union tags
  became possible to have `default` keyword.  It's useful\n    for migrating a record
  type to a union type.  [[#13], [#227]]\n\n -  Enum members and union tags became
  disallowed to shadow an other type name\n    in a module.  It's because in some
  target languages we compile both types\n    and members/tags into objects that share
  the same namespace.  In Python,\n    both types and union tags are compiled into
  classes.\n\n    For example, the following definitions had been allowed, but now
  became\n    disallowed:\n\n    ~~~~~~~~ nirum\n    unboxed foo (text);\n    //      ^~~\n
  \   enum bar = foo | baz;\n    //         ^~~\n    ~~~~~~~~\n\n    ~~~~~~~~ nirum\n
  \   record foo (text a);\n    //     ^~~\n    union bar = foo (text b) | baz (text
  c);\n    //          ^~~\n    ~~~~~~~~\n\n    This rule is applied even between
  a member/tag and its belonging enum/union\n    type as well.  The following definitions
  are disallowed:\n\n    ~~~~~~~~ nirum\n    enum foo = foo | bar;\n         ^~~   ^~~\n
  \   ~~~~~~~~\n\n    ~~~~~~~~ nirum\n    union bar = foo (text a) | bar (text b);\n
  \         ^~~                  ^~~\n    ~~~~~~~~\n\n    If you already have used
  the same name for a type and a tag, you can avoid\n    breaking backward compatibility
  of serialization by specifying a different\n    behind name.  For example, if you've
  had a definition like:\n\n    ~~~~~~~~ nirum\n    enum foo = foo | bar;\n    //
  \  ^~~   ^~~\n    ~~~~~~~~\n\n    It can be changed like the following:\n\n    ~~~~~~~~
  nirum\n    enum foo = foo-renamed/foo | bar;\n    //         ^~~~~~~~~~~ ^~~\n    ~~~~~~~~\n\n
  \   [[#254], [#255]]\n\n -  Enum members and union tags became disallowed to shadow
  other enum members\n    and union tags even if they belong to an other type.  It's
  because in some\n    target language we compile them into objects that share the
  same namespace,\n    regardless of their belonging type.\n\n    For example, the
  following definitions had been allowed, but now became\n    disallowed:\n\n    ~~~~~~~~
  nirum\n    enum foo = bar | baz;\n    //         ^~~\n    enum qux = quux | bar;\n
  \   //                ^~~\n    ~~~~~~~~\n\n    ~~~~~~~~ nirum\n    union foo = bar
  (text a) | baz (text b);\n    //          ^~~\n    enum qux = quux | bar;\n    //
  \               ^~~\n    ~~~~~~~~\n\n    ~~~~~~~~ nirum\n    union foo = bar (text
  a) | baz (text b);\n    //                         ^~~\n    union qux = quux (text
  c) | baz (text d);\n    //                          ^~~\n    ~~~~~~~~\n\n    If
  you already have used the same name for members/tags of different\n    enum/union
  types, you can avoid breaking backward compatibility of\n    serialization by specifying
  a different behind name.\n    For example, if you've had a definition like:\n\n
  \   ~~~~~~~~ nirum\n    enum foo = bar | baz;\n    //         ^~~\n    union qux
  = bar (text a) | quux (text b);\n    //          ^~~\n    ~~~~~~~~\n\n    It can
  be changed like the following:\n\n    ~~~~~~~~ nirum\n    enum foo = bar-renamed/bar
  | baz;\n    //         ^~~~~~~~~~~ ^~~\n    union qux = bar (text a) | quux (text
  b);\n    ~~~~~~~~\n\n    [[#254], [#255]]\n\n -  Fixed a compiler bug that an error
  message on name duplicates had referred\n    to a wrong line/column number.  [[#255]]\n\n
  -  Added aliased import.  It's handy to avoid a name shadowing.\n    [[#217], [#258]]\n\n
  \   ~~~~~~~~ nirum\n    import iso (country as iso-country);\n    import types (country);\n
  \   ~~~~~~~~\n\n -  Added support for integer type annotation argument.  [[#178],
  [#267]]\n\n    ~~~~~~~~ nirum\n    service foo-service (\n        @bar(baz=1)\n
  \       int32 qux (int32 quux),\n    );\n    ~~~~~~~~\n\n -  Deprecated `uri` and
  `url` type is added.  [[#126], [#277] by Jonghun Park]\n\n### Docs target\n\n -
  \ A new required configuration `targets.docs.title` was added.\n    It's rendered
  in generated HTML documents' `<title>` element.\n    [[#253]]\n\n -  Docs now have
  a sidebar which contains table of contents.  [[#257]]\n\n -  Fixed a bug that a
  module-level docs hadn't been rendered.\n    Now it's shown in the right below the
  module name.  [[#259]]\n\n### Python target\n\n -  Generated Python packages became
  to have two [entry points] (a feature\n    provided by *setuptools*):\n     -  `nirum.modules`:
  It maps Nirum modules to Python modules.\n        Nirum module paths are normalized
  to avoid underscores and upper letters\n        and use hyphens and lower letters
  instead, e.g., `foo-bar.baz`.\n        The table works well with `renames` settings
  as well.\n     -  `nirum.classes`: It maps Nirum types (including services) to Python\n
  \       classes.  Nirum type names are qualified and their leading module paths\n
  \       are also normalized (the same rule to `nirum.modules` applies here).\n\n
  -  Generated deserializers became independent from *nirum-python* runtime\n    library.
  \ [[#160], [#272]]\n\n     -  Error messages made during deserialization became
  more standardized.\n        Every error now consists of two fields: one represents
  a path to the\n        value having an error, and other one is a human-readable
  message.\n\n        For example, suppose there's types like:\n\n        ~~~~~~~~
  nirum\n        record user (dob date);\n        record user-group ([user] users);\n
  \       ~~~~~~~~\n\n        and the following payload for `user-group` type is given:\n\n
  \       ~~~~~~~~ json\n        [\n          {\"_type\": \"user\", \"dob\": \"2000-06-30\"},\n
  \         {\"_type\": \"user\", \"dob\": \"2000-13-32\"}\n        ]\n        ~~~~~~~~\n\n
  \       An error is reported with a path like `[1].dob`.\n\n     -  Added an optional
  `on_error` callback parameter to generated\n        `__nirum_deserialize__()` methods.\n\n
  \       It has to be a callable which has two parameters (and no return value).\n
  \       An `on_error` callback is called every time any validation/parsing error\n
  \       happens during deserialization, and it can be called multiple times\n        at
  a single call of `__nirum_deserialize__()`.\n\n        The callback function's first
  parameter takes a string referring\n        a path to the value having an error
  (e.g., `'.users[0].dob'`).\n        The second parameter takes an error message
  string (e.g.,\n        `'Expected a string of RFC 3339 date, but the date is invalid.'`).\n\n
  \       When it's omitted or `None`, a `ValueError` is raised with a multiline\n
  \       message that consists of all error messages made during deserialization,\n
  \       as it has been.\n\n -  Fixed a bug that record/union deserializers refuses
  payloads without\n    `\"_type\"` field.  It is only for humans and can be omitted
  according to\n    the [specification](./docs/serialization.md).\n\n -  All integral
  types (`int32`, `int64`, and `bigint`) became represented\n    as [`numbers.Integral`][python2-numbers-integral]
  instead of\n    [`int`][python2-int].\n\n    There's no change to Python 3.\n\n
  -  The `uri` type became represented as [`basestring`][python2-basestring]\n    instead
  of [`unicode`][python2-unicode] in Python 2, since URI (unlike IRI)\n    is limited
  to a subset of ASCII character set.\n\n    There's no change to Python 3.\n\n -
  \ Generated type constructors became to validate field value's range or format\n
  \   besides class checks: range checks for `int32`/`int64`, time zone\n    (``tzinfo``)
  awareness check for `datetime`, and basic format check for\n    `uri`.\n\n -  Generated
  service methods became to have its own serialization and\n    deserialization functions.
  \ Each method object now has these attributes:\n\n     -  `__nirum_serialize_arguments__`
  takes the same keywords to the method\n        parameters and serialize them into
  a mapping object (which can be\n        directly translated to a JSON object).  It
  can raise a `TypeError` or\n        `ValueError` if any invalid values are passed.\n\n
  \    -  `__nirum_deserialize_arguments__` takes a mapping object returned by\n        `json.load()`/`json.loads()`
  (and an optional `on_error` callable)\n        and deserialize it into a mapping
  object of pairs from parameter's\n        facial name string to its corresponding
  Python object.\n\n     -  `__nirum_argument_serializers__` is a mapping object that
  keys are\n        a string of method's parameter facial name and values are its\n
  \       serializer.\n\n        A serializer function takes an argument value and
  returns\n        its corresponding value which can be passed to\n        `json.dump()`/`json.dumps()`.
  \ It can raise a `TypeError` or\n        `ValueError` if an argument is invalid.\n\n
  \    -  `__nirum_argument_deserializers__` is a mapping object that keys are\n        a
  string of method's parameter behind name and values are its\n        deserializer.\n\n
  \       A deserializer function takes an argument value preprocessed by\n        `json.load()`/`json.loads()`
  with an optional `on_error` callback,\n        and returns its corresponding Python
  object.\n\n     -  `__nirum_serialize_result__` takes a method's return value and
  serialize\n        it into a corresponding value which can be passed to\n        `json.dump()`/`json.dumps()`.\n\n
  \       If the given value does not match to method's return type it raises\n        `TypeError`,
  or `ValueError` if the value is invalid.\n\n        This attribute is `None` if
  the method has no return type.\n\n     -  `__nirum_deserialize_result__` takes a
  result value preprocessed by\n        `json.load()`/`json.loads()` with an optional
  `on_error` callback,\n        and deserialize it into its corresponding Python object.\n\n
  \       This attribute is `None` if the method has no return type.\n\n     -  `__nirum_serialize_error__`
  takes a method's error object and serialize\n        it into a corresponding value
  which can be passed to\n        `json.dump()`/`json.dumps()`.\n\n        If the
  given error object does not match to method's return type\n        it raises `TypeError`,
  or `ValueError` if the error object is invalid.\n\n        This attribute is `None`
  if the method has no error type.\n\n     -  `__nirum_deserialize_error__` takes
  an error value preprocessed by\n        `json.load()`/`json.loads()` with an optional
  `on_error` callback,\n        and deserialize it into its corresponding Python object.\n\n
  \       This attribute is `None` if the method has no error type.\n\n -  Removed
  `__nirum_get_inner_type__()` class methods from generated unboxed\n    type classes.\n\n
  -  Removed `__nirum_record_behind_name__` static fields and\n    `__nirum_field_types__()`
  class methods from generated record type classes.\n\n -  Removed `__nirum_tag_names__`,
  `__nirum_union_behind_name__`, and\n    `__nirum_field_names__` static fields from
  generated union type classes.\n\n -  Removed `__nirum_tag_types__` static fields
  from generated union tag\n    classes.\n\n -  Removed `__nirum_schema_version__`
  static field from generated service\n    classes.\n\n -  Fixed a bug that generated
  service methods hadn't checked its arguments\n    before its transport sends a payload.
  \ [[#220]]\n\n -  Fixed a bug that field/parameter names that use a module name
  of the Python\n    standard library cause runtime `TypeError`s (due to name shadowing).\n
  \   Under the hood, all generated `import`s are now aliased with a name prefixed\n
  \   an underscore.\n\n -  Added Python classifier metadata field.  [[#100], [#269]]\n\n###
  Et cetera\n\n -  The officially distributed executable binaries for Linux became\n
  \   dependent on [glibc] again.\n -  The official Docker images became based on
  Debian ([minideb]) instead of\n    Alpine Linux.  It's because Alpine Linux doesn't
  provide GHC 8.2 as of\n    March 2018.\n\n[#13]: https://github.com/nirum-lang/nirum/issues/13\n[#100]:
  https://github.com/nirum-lang/nirum/issues/100\n[#126]: https://github.com/nirum-lang/nirum/issues/126\n[#178]:
  https://github.com/nirum-lang/nirum/issues/178\n[#217]: https://github.com/nirum-lang/nirum/issues/217\n[#220]:
  https://github.com/nirum-lang/nirum/issues/220\n[#227]: https://github.com/nirum-lang/nirum/pull/227\n[#253]:
  https://github.com/nirum-lang/nirum/pull/253\n[#254]: https://github.com/nirum-lang/nirum/pull/254\n[#255]:
  https://github.com/nirum-lang/nirum/pull/255\n[#257]: https://github.com/nirum-lang/nirum/pull/257\n[#258]:
  https://github.com/nirum-lang/nirum/pull/258\n[#259]: https://github.com/nirum-lang/nirum/pull/259\n[#267]:
  https://github.com/nirum-lang/nirum/pull/267\n[#269]: https://github.com/nirum-lang/nirum/pull/269\n[#272]:
  https://github.com/nirum-lang/nirum/pull/272\n[#277]: https://github.com/nirum-lang/nirum/pull/277\n[entry
  points]: https://setuptools.readthedocs.io/en/latest/pkg_resources.html#entry-points\n[python2-numbers-integral]:
  https://docs.python.org/2/library/numbers.html#numbers.Integral\n[python2-int]:
  https://docs.python.org/2/library/functions.html#int\n[python2-basestring]: https://docs.python.org/2/library/functions.html#basestring\n[python2-unicode]:
  https://docs.python.org/2/library/functions.html#unicode\n[glibc]: https://www.gnu.org/software/libc/\n[minideb]:
  https://hub.docker.com/r/bitnami/minideb/\n\n\nVersion 0.3.3\n-------------\n\nReleased
  on March 15, 2018.\n\n### Et cetera\n\n -  The official Docker images became to
  have CA certificates.\n\n\nVersion 0.3.2\n-------------\n\nReleased on March 15,
  2018.\n\n### Et cetera\n\n -  Fixed a broken build of the official Docker images.\n\n\nVersion
  0.3.1\n-------------\n\nReleased on March 1, 2018.\n\n### Python target\n\n -  Fixed
  record/union deserializers to ignore unknown fields in data payload.\n    Deserializers
  had raised `KeyError` before.  [[#232]]\n\n[#232]: https://github.com/nirum-lang/nirum/issues/232\n\n\nVersion
  0.3.0\n-------------\n\nReleased on February 18, 2018.\n\n### Language\n\n -  [Package](./docs/package.md)
  is now a new compilation unit of Nirum.\n    Every Nirum package needs *package.toml*
  manifest file.\n    [[#83], [#99]]\n -  Since a Nirum package can be compiled to
  more than one target languages,\n    the `nirum` command became to have `-t`/`--target`
  required parameter.\n    [[#106], [#111], [#114]]\n -  Added `-w`/`--watch` mode.
  \ [[#91], [#104], [#218]]\n -  Annotations became able to have multiple arguments
  and every parameter\n    became necessary to having its name (keyword).  [[#178],
  [#190], [#197]]\n -  Service methods became able to omit their return types.\n    [[#179],
  [#199] by Yang Chun Ung]\n -  Added `@error` annotation to make a type to subclass
  an exception base\n    class (e.g., [`Exception`][python-exception] in Python) when
  it's compiled\n    to OO languages.  [[#38], [#127]]\n -  Union tag docstrings in
  parentheses became allowed.  [[#153], [#154]]\n -  Fixed a parser bug that a bare
  identifier (i.e., unquoted identifier) cannot\n    start with a reserved keyword,
  e.g., `types` (`type` is reserved),\n    `enumeration` (`enum` is reserved).  [[#184],
  [#189]]\n -  Fixed a parser bug that `import` names had been disallowing to have\n
  \   a trailing comma or newlines.  [[#202]]\n -  Fixed the `nirum` command bug that
  it had always terminated with exit code\n    0 even when it errored.  [[#97], [#108]]\n\n###
  Docs target\n\n -  A new target, `docs` is now available.  To generate docs for
  a Nirum\n    package, specify `--target docs` option to the `nirum` command.\n    [[#10],
  [#113], [#116], [#125], [#131], [#152], [#170], [#223]]\n\n### Python target\n\n
  -  Now supports Python 2.7 besides Python 3.4 or later.\n    [[#50], [#85], [#93],
  [#117], [nirum-python #22]]\n -  Now requires *nirum-python* 0.6.0 or later.  [[#119],
  [#141], [#146]]\n -  From now on, in order to compile a Nirum package to Python,\n
  \   *package.toml* manifest need [`targets.python`][targets.python] section\n    and
  `targets.python.name` field.  [[#99]]\n -  Added `targets.python.minimum_runtime`
  option to specify the minimum\n    version of *nirum-python* runtime library.  [[#118],
  [#119]]\n -  Added `targets.python.renames` option to rename module names when they\n
  \   are compiled to a Python module.  [[#121]]\n -  More package metadata became
  configurable.  [[#100]]\n     -  `targets.python.description`  [[#174] by Seunghun
  Lee]\n     -  `targets.python.license`  [[#180] by Seunghun Lee]\n     -  `targets.python.keywords`
  \ [[#183] by Seunghun Lee]\n -  Added new transport layer.  [[#149], [nirum-python
  #79], [nirum-python #92]]\n     -  Generated constructors of service clients became
  to take a\n        `nirum.transport.Transport` instance.\n     -  Followed renamed/moved
  import paths of the runtime classes\n        (e.g., `nirum.rpc.Service` became to
  `nirum.service.Service`).\n     -  The way to avoid name collision between generated
  types and runtime\n        classes is changed.  The runtime library had provided
  alternative names\n        like `service_type` for `Service` and generated imports
  had been like\n        `from nirum.rpc import service_type`, but it's now\n        `from
  nirum.service import Service as service_type`.\n -  Record/union tag fields of an
  optional type can be omitted when\n    the constructor is called.\n    [[#70], [#165]
  by Seunghun Lee]\n -  Generated tag classes became qualified under its union class\n
  \   (e.g., `Shape.Rectangle` instead of `Rectangle`).\n    Deprecated the old style
  and it is going to be obsolete in the near future.\n    [[#68], [#193]]\n -  Generated
  service clients became qualified under its service class\n    (e.g., `FooService.Client`
  instead of `FooService_Client`).\n    Deprecated the old style and it is going to
  be obsolete in the near future.\n    [[#167], [#222]].\n -  Generated serializers
  became independent from *nirum-python* runtime\n    library.  [[#160], [#201], [#203],
  [#204]]\n -  Deserializers became to show multiple error messages at a time.\n    [[#168],
  [#224]]\n -  Generated Python classes became having `__nirum_type__` metadata for
  RTTI.\n    [[nirum-python #34], [#192]]\n -  Generated service classes became having
  `__nirum_method_annotations__`\n    metadata for processing annotations.  [[#194]]\n
  -  Docstrings in a Nirum schema became to generate corresponding Python\n    docstrings.
  \ [[#102], [#128]]\n -  Sets, lists, and maps became compiled to immutable data
  structures\n    so that thay are easily hashable.  [[nirum-python #49], [#123]]\n
  -  Fixed a bug that implicit ancestor packages hadn't been generated even\n    if
  they have submodules.  [[#92], [#105]]\n -  Fixed a bug that a generated Python
  code had raised\n    [`NameError`][python-name-error] when a referring type is above
  than\n    a referred type.  [[#138], [nirum-python #88], [#146]]\n -  Fixed a bug
  that a generated Python `enum` code had became broken\n    when an enum type has
  a member named `mro`.  [[#185], [#188]]\n\n### Et cetera\n\n -  The officially distributed
  executable binaries for Linux became\n    independent from [glibc]; instead statically
  linked to [musl].  [#216]\n -  The Docker image now has `nirum` command in `PATH`.
  \ [[#155]]\n -  The Docker image became based and built on [Alpine Linux][] so that\n
  \   the image is now much lighter.\n\n[#10]: https://github.com/nirum-lang/nirum/issues/10\n[#38]:
  https://github.com/nirum-lang/nirum/issues/38\n[#50]: https://github.com/nirum-lang/nirum/issues/50\n[#68]:
  https://github.com/nirum-lang/nirum/issues/68\n[#70]: https://github.com/nirum-lang/nirum/issues/70\n[#83]:
  https://github.com/nirum-lang/nirum/pull/83\n[#85]: https://github.com/nirum-lang/nirum/pull/85\n[#91]:
  https://github.com/nirum-lang/nirum/issues/91\n[#92]: https://github.com/nirum-lang/nirum/issues/92\n[#93]:
  https://github.com/nirum-lang/nirum/issues/93\n[#99]: https://github.com/nirum-lang/nirum/pull/99\n[#97]:
  https://github.com/nirum-lang/nirum/issues/97\n[#100]: https://github.com/nirum-lang/nirum/issues/100\n[#102]:
  https://github.com/nirum-lang/nirum/issues/102\n[#104]: https://github.com/nirum-lang/nirum/pull/104\n[#105]:
  https://github.com/nirum-lang/nirum/pull/105\n[#106]: https://github.com/nirum-lang/nirum/pull/106\n[#108]:
  https://github.com/nirum-lang/nirum/pull/108\n[#111]: https://github.com/nirum-lang/nirum/pull/111\n[#113]:
  https://github.com/nirum-lang/nirum/pull/113\n[#114]: https://github.com/nirum-lang/nirum/pull/114\n[#116]:
  https://github.com/nirum-lang/nirum/pull/116\n[#117]: https://github.com/nirum-lang/nirum/pull/117\n[#118]:
  https://github.com/nirum-lang/nirum/issues/118\n[#119]: https://github.com/nirum-lang/nirum/pull/119\n[#121]:
  https://github.com/nirum-lang/nirum/pull/121\n[#123]: https://github.com/nirum-lang/nirum/pull/123\n[#128]:
  https://github.com/nirum-lang/nirum/pull/128\n[#125]: https://github.com/nirum-lang/nirum/issues/125\n[#127]:
  https://github.com/nirum-lang/nirum/pull/127\n[#131]: https://github.com/nirum-lang/nirum/pull/131\n[#138]:
  https://github.com/nirum-lang/nirum/issues/138\n[#141]: https://github.com/nirum-lang/nirum/pull/141\n[#146]:
  https://github.com/nirum-lang/nirum/pull/146\n[#149]: https://github.com/nirum-lang/nirum/pull/149\n[#152]:
  https://github.com/nirum-lang/nirum/pull/152\n[#153]: https://github.com/nirum-lang/nirum/issues/153\n[#154]:
  https://github.com/nirum-lang/nirum/pull/154\n[#155]: https://github.com/nirum-lang/nirum/pull/155\n[#160]:
  https://github.com/nirum-lang/nirum/issues/160\n[#165]: https://github.com/nirum-lang/nirum/pull/165\n[#167]:
  https://github.com/nirum-lang/nirum/pull/167\n[#168]: https://github.com/nirum-lang/nirum/issues/168\n[#170]:
  https://github.com/nirum-lang/nirum/pull/170\n[#174]: https://github.com/nirum-lang/nirum/pull/174\n[#178]:
  https://github.com/nirum-lang/nirum/issues/178\n[#179]: https://github.com/nirum-lang/nirum/issues/179\n[#180]:
  https://github.com/nirum-lang/nirum/pull/180\n[#183]: https://github.com/nirum-lang/nirum/pull/183\n[#184]:
  https://github.com/nirum-lang/nirum/issues/184\n[#185]: https://github.com/nirum-lang/nirum/issues/185\n[#188]:
  https://github.com/nirum-lang/nirum/pull/188\n[#189]: https://github.com/nirum-lang/nirum/pull/189\n[#190]:
  https://github.com/nirum-lang/nirum/pull/190\n[#192]: https://github.com/nirum-lang/nirum/pull/192\n[#193]:
  https://github.com/nirum-lang/nirum/pull/193\n[#194]: https://github.com/nirum-lang/nirum/pull/194\n[#197]:
  https://github.com/nirum-lang/nirum/pull/197\n[#199]: https://github.com/nirum-lang/nirum/pull/199\n[#201]:
  https://github.com/nirum-lang/nirum/pull/201\n[#202]: https://github.com/nirum-lang/nirum/pull/202\n[#203]:
  https://github.com/nirum-lang/nirum/pull/203\n[#204]: https://github.com/nirum-lang/nirum/pull/204\n[#216]:
  https://github.com/nirum-lang/nirum/issues/216\n[#218]: https://github.com/nirum-lang/nirum/issues/218\n[#222]:
  https://github.com/nirum-lang/nirum/pull/222\n[#223]: https://github.com/nirum-lang/nirum/pull/223\n[#224]:
  https://github.com/nirum-lang/nirum/pull/224\n[nirum-python #22]: https://github.com/nirum-lang/nirum-python/issues/22\n[nirum-python
  #34]: https://github.com/nirum-lang/nirum-python/issues/34\n[nirum-python #49]:
  https://github.com/nirum-lang/nirum-python/issues/49\n[nirum-python #79]: https://github.com/nirum-lang/nirum-python/issues/79\n[nirum-python
  #88]: https://github.com/nirum-lang/nirum-python/pull/88\n[nirum-python #92]: https://github.com/nirum-lang/nirum-python/pull/92\n[python-exception]:
  https://docs.python.org/3/library/exceptions.html#Exception\n[targets.python]: ./target/python.md\n[python-name-error]:
  https://docs.python.org/3/library/exceptions.html#NameError\n[glibc]: https://www.gnu.org/software/libc/\n[musl]:
  https://www.musl-libc.org/\n[Alpine Linux]: https://alpinelinux.org/\n\n\nVersion
  0.2.0\n-------------\n\nStill unstable release.  Released on September 26, 2016.\n\n###
  Language\n\n -  The `boxed` keyword was renamed to `unboxed`.  [[#65], [#81]]\n
  -  [Annotations](./docs/annotation.md) became renewed and complete\n    so that
  every type and module now can be annotated.\n    [[#40], [#73]]\n -  Docstrings
  became merely a syntactic sugar of `@docs` annotation.\n    [[#53], [#57]]\n -  Fixed
  a parser bug which had failed to parse spaces right before/after tag\n    parentheses.
  \ [[#69], [#71]]\n -  Fixed a parser bug which had referred to a wrong line/column
  position on\n    syntax error message when a trailing semicolon is missing.  [[#64]]\n\n[#40]:
  https://github.com/nirum-lang/nirum/issues/40\n[#53]: https://github.com/nirum-lang/nirum/pull/53\n[#57]:
  https://github.com/nirum-lang/nirum/pull/57\n[#64]: https://github.com/nirum-lang/nirum/pull/64\n[#65]:
  https://github.com/nirum-lang/nirum/issues/65\n[#69]: https://github.com/nirum-lang/nirum/issues/69\n[#71]:
  https://github.com/nirum-lang/nirum/pull/71\n[#73]: https://github.com/nirum-lang/nirum/pull/73\n[#81]:
  https://github.com/nirum-lang/nirum/pull/81\n\n### Python target\n\n -  Services
  became to have their own client implementation of a name with\n    `_Client` postfix
  when they are compiled to Python. [[#52]]\n -  Generated types became to have `__hash__()`
  method so that they are now\n    hashable.  [[#75], [#76]]\n -  Fixed a bug that
  a Python class generated from a parameterless tag had\n    been broken.  [[#55],
  [#66]]\n\n[#52]: https://github.com/nirum-lang/nirum/pull/52\n[#75]: https://github.com/nirum-lang/nirum/issues/75\n[#76]:
  https://github.com/nirum-lang/nirum/pull/76\n[#66]: https://github.com/nirum-lang/nirum/pull/66\n[#55]:
  https://github.com/nirum-lang/nirum/issues/55\n\n### Et cetera\n\n -  Introduced
  the official Docker image.  The image repository is located to\n    [spoqa/nirum](https://hub.docker.com/r/spoqa/nirum/).\n
  \   [[#48] by Minyoung Jeong]\n\n[#48]: https://github.com/nirum-lang/nirum/pull/48\n\n\n\nVersion
  0.1.0\n-------------\n\nInitial and unstable release for a\n[demo session at PyCon
  APAC 2016][pycon-apac-2016].\nReleased on August 14, 2016.\n\n[pycon-apac-2016]:
  https://www.pycon.kr/2016apac/program/36\n"
basic-deps:
  shakespeare: ! '>=2.0.12 && <2.1'
  heterocephalus: ! '>=1.0.5 && <1.1.0'
  email-validate: ! '>=2.0.0 && <3.0.0'
  cmark-gfm: ! '>=0.1.3 && <0.2'
  bytestring: -any
  htoml: ! '>=1.0.0.0 && <1.1.0.0'
  stm: ! '>=2.4.4.1'
  base: ! '>=4.7 && <5'
  blaze-markup: ! '>=0.8.0.0 && <0.9'
  nirum: -any
  unordered-containers: -any
  text: ! '>=0.9.1.0 && <1.3'
  megaparsec: ==6.5.*
  filepath: ==1.4.*
  parsec: -any
  uri: ! '>=0.1 && <1.0'
  interpolatedstring-perl6: ! '>=1.0.0 && <1.1.0'
  containers: ! '>=0.5.6.2 && <0.6'
  semver: ! '>=0.3.0 && <1.0'
  mtl: ! '>=2.2.1 && <3'
  blaze-html: ! '>=0.9.0.1 && <0.10'
  optparse-applicative: ! '>=0.14 && <0.15'
  fsnotify: ! '>=0.3.0.1 && <0.4.0.0'
  pretty: ! '>=1.1.3 && <2'
  template-haskell: ! '>=2.11 && <3'
  directory: ! '>=1.2.5 && <1.4'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.2'
- '0.3.3'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.5.0'
author: Nirum team
latest: '0.5.0'
description-type: markdown
description: ! "Nirum\n=====\n\n[![The latest release on GitHub][release-svg]][releases]\n[![Docker
  automated build][docker-svg]][docker]\n[![Build status on Linux and macOS (Travis
  CI)][ci-svg]][ci]\n[![Build status on Windows (AppVeyor)][ciw-svg]][ciw]\n[![Test
  coverage (codecov)][cov-svg]][cov]\n[![Total lines of code][loc]][repo]\n[![Gitter][chat-svg]][chat]\n\n[release-svg]:
  https://img.shields.io/github/release/nirum-lang/nirum/all.svg\n[releases]: https://github.com/nirum-lang/nirum/releases\n[docker]:
  https://hub.docker.com/r/nirumlang/nirum/\n[docker-svg]: https://img.shields.io/docker/automated/nirumlang/nirum.svg\n[ci-svg]:
  https://travis-ci.com/nirum-lang/nirum.svg?branch=master\n[ci]: https://travis-ci.com/nirum-lang/nirum\n[ciw-svg]:
  https://ci.appveyor.com/api/projects/status/jf9bsrnalcb1xrp0?svg=true\n[ciw]: https://ci.appveyor.com/project/dahlia/nirum-k5n5y\n[cov-svg]:
  https://codecov.io/gh/nirum-lang/nirum/branch/master/graph/badge.svg\n[cov]: https://codecov.io/gh/nirum-lang/nirum\n[loc]:
  https://tokei.rs/b1/github/nirum-lang/nirum\n[repo]: https://github.com/nirum-lang/nirum\n[chat-svg]:
  https://badges.gitter.im/spoqa/nirum.svg\n[chat]: https://gitter.im/spoqa/nirum?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n\nNirum
  is an [IDL] compiler and [RPC]/[distributed object] framework\nfor [microservices],
  built on top of the modern Web server technologies\nsuch as RESTful HTTP and JSON.\n\nYou
  can find how the language looks like from source codes in the `examples/`\ndirectory.\n\n**Note
  that its design is highly unstable and could be changed.**\nAlso the feature set
  is incomplete yet.\n\n[IDL]: https://en.wikipedia.org/wiki/Interface_description_language\n[RPC]:
  https://en.wikipedia.org/wiki/Remote_procedure_call\n[distributed object]: https://en.wikipedia.org/wiki/Distributed_object\n[microservices]:
  https://en.wikipedia.org/wiki/Microservices\n\n\nInstallation\n------------\n\nThe
  Nirum compiler works on the most major platforms like Linux, macOS, and\nWindows.
  \ We provide the prebuilt executable binaries for these three platforms.\n\n\n###
  Released builds\n\nYou can download executable binaries for Linux (x86_64), macOS
  (x86_64), or\nWindows (x64) from the [latest release note][latest-release].\nYou
  should give it appropriate permissions (e.g., `+x`) depending on your\nplatform.\n\nIf
  you look for a previous release, see the [list of all releases][releases].\n\nWe
  provide official Docker images as well.  You can check the list of\n[released tags][docker-tags].
  *Note that `latest` is for a nightly build which\nis unstable (see below).*\n\n[latest-release]:
  https://github.com/nirum-lang/nirum/releases/latest\n[docker-tags]: https://hub.docker.com/r/nirumlang/nirum/tags/\n\n\n###
  Nightly builds\n\nSince Nirum is still changing by leaps and bounds, you could want
  to try\nits bleeding edge.  We provide nightly builds for this purpose.\n\n- [Linux
  (x86_64)](https://nightly-builds.nirum.org/travis-builds/nirum-linux-x86_64)\n-
  [macOS (x86_64)](https://nightly-builds.nirum.org/travis-builds/nirum-darwin-x86_64)\n-
  [Windows (x64)](https://ci.appveyor.com/api/projects/dahlia/nirum-k5n5y/artifacts/nirum-win-x64.exe?job=Platform%3A%20x64&branch=master)\n-
  [Docker (`nirumlang/nirum:latest`)][docker]\n\nAlthough we call it \"nightly build,\"
  technically it is not built every night,\nbut done every merge commit.\n\n\nGetting
  started\n---------------\n\nIn order to compile a Nirum package (`examples/`) to
  a Python package:\n\n    $ mkdir out/  # directory to place generated Python files\n
  \   $ nirum -t python -o out/ examples/\n\nFor more information, use `--help` option:\n\n
  \   $ nirum --help\n    Nirum: The IDL compiler and RPC/distributed object framework\n\n
  \   Usage: nirum [-v|--version] (-o|--output-dir DIR) (-t|--target TARGET) DIR\n
  \     Nirum compiler 0.5.0\n\n    Available options:\n      -h,--help                Show
  this help text\n      -v,--version             Show version\n      -o,--output-dir
  DIR      Output directory\n      -t,--target TARGET       Target language name.
  Available: docs, python\n      DIR                      Package directory\n\nThere
  is a [step-by-step tutorial](./docs/tutorial.md) as well.\n\n\nBuilding\n--------\n\nIf
  you already installed [Haskell Stack], you can build the project\nin the same way
  to build other Haskell softwares:\n\n    $ stack build\n\nYou can run the test suite
  of Nirum:\n\n    $ stack test  # unit test for compiler\n    $ ./lint.sh   # style
  lint\n\nFor details, please read the [contribution guide](./CONTRIBUTING.md).\n\n[Haskell
  Stack]: https://www.haskellstack.org/\n\n\nRelated projects & tools\n------------------------\n\nSee
  also the [list of Nirum-related projects][related-projects] on GitHub.\nHave you
  kicked off a new project related to Nirum?  Please add *nirum*\n[topic][github-topic]
  to your project on GitHub!\n\n### Language runtimes\n\n -   [nirum-python](https://github.com/nirum-lang/nirum-python):
  The official\n     Python runtime library for Nirum.\n     -   [nirum-python-http](https://github.com/nirum-lang/nirum-python-http):\n
  \        Nirum HTTP transport for Python.\n     -   [nirum-python-wsgi](https://github.com/nirum-lang/nirum-python-wsgi):\n
  \        Adapt Nirum services to WSGI apps.\n\n### Editor supports\n\n -   [nirum.tmbundle](https://github.com/nirum-lang/nirum.tmbundle):
  TextMate\n     bundle for Nirum.\n     Also can be used by IntelliJ IDEA (or any
  other JetBrain's IDEs, e.g.,\n     PyCharm, WebStorm) through [TextMate bundles
  support].\n -   [nirum.vim](https://github.com/nirum-lang/nirum.vim): Nirum syntax\n
  \    highlighter for Vim/Neovim.\n -   [sublime-nirum](https://github.com/nirum-lang/sublime-nirum):
  Nirum package\n     for Sublime Text 3.\n -   [nirum-syntax-highlighting](https://marketplace.visualstudio.com/items?itemName=Nirum.nirum-syntax-highlighting)\n
  \    for VS Code: Nirum syntax highlighter for VS Code.\n\n[related-projects]: https://github.com/search?q=topic:nirum+fork:false\n[github-topic]:
  https://github.com/blog/2309-introducing-topics\n[TextMate bundles support]: https://github.com/nirum-lang/nirum.tmbundle#installation-intellij-idea-pycharm-etc\n\n\nEtymology\n---------\n\n**니름**
  (IPA: /niɾɯm/; *nireum*) is a sort of telepathy in the fictional world\nof [The
  Bird That Drinks Tears] (눈물을 마시는 새 *Nunmureul masineun sae*)\nby [Lee Yeongdo] (이영도).\n\n[The
  Bird That Drinks Tears]: https://en.wikipedia.org/wiki/The_Bird_That_Drinks_Tears\n[Lee
  Yeongdo]: https://en.wikipedia.org/wiki/Lee_Yeongdo\n"
license-name: GPL-3
