homepage: https://github.com/nmattia/niv#readme
changelog-type: ''
hash: 6ca4d10965e13040e31cb793c80fc79b382a297167fa357cd5e53330a9a3ba6a
test-bench-deps:
  bytestring: -any
  unliftio: -any
  base: <5
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  string-qq: -any
  filepath: -any
  process: -any
  pureMD5: -any
  ansi-terminal: -any
  mtl: -any
  hashable: -any
  file-embed: -any
  optparse-applicative: -any
  tasty: -any
  http-conduit: -any
  aeson: -any
  profunctors: -any
  niv: -any
  directory: -any
maintainer: Nicolas Mattia <nicolas@nmattia.com>
synopsis: Easy dependency management for Nix projects
changelog: ''
basic-deps:
  bytestring: -any
  unliftio: -any
  base: <5
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  string-qq: -any
  filepath: -any
  process: -any
  pureMD5: -any
  ansi-terminal: -any
  mtl: -any
  hashable: -any
  tasty-hunit: -any
  file-embed: -any
  optparse-applicative: -any
  tasty: -any
  http-conduit: -any
  aeson: -any
  profunctors: -any
  niv: -any
  directory: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.2.11
- 0.2.12
- 0.2.13
- 0.2.14
- 0.2.15
- 0.2.16
- 0.2.17
- 0.2.18
author: Nicolas Mattia <nicolas@nmattia.com>
latest: 0.2.18
description-type: markdown
description: "# niv\n\n![GitHub Actions](https://github.com/nmattia/niv/workflows/Test/badge.svg?branch=master)\n[![Netlify
  Status](https://api.netlify.com/api/v1/badges/48532eaa-259f-4ca2-aadf-67f7c6b957fd/deploy-status)](https://niv.nmattia.com)\n\nPainless
  dependencies for [Nix] projects. Read more in the [Getting started](#getting-started)
  section below.\n\n<p align=\"center\">\n    <img src=\"https://niv.nmattia.com/niv.svg\">\n</p>\n\n\n*
  [Install](#install)\n* [Build](#build)\n* [Usage](#usage)\n* [FAQ](#frequently-asked-questions)\n\n##
  Install\n\n`niv` is available in [`nixpkgs`](https://github.com/NixOS/nixpkgs) as
  `niv`:\n\n``` bash\n$ nix-env -iA nixpkgs.niv\n```\n\nAlternatively, run the following
  command to install the development version:\n\n``` bash\n$ nix-env -iA niv -f https://github.com/nmattia/niv/tarball/master
  \\\n    --substituters https://niv.cachix.org \\\n    --trusted-public-keys niv.cachix.org-1:X32PCg2e/zAm3/uD1ScqW2z/K0LtDyNV7RdaxIuLgQM=\n```\n\n##
  Build\n\nInside the provided nix shell:\n\n``` bash\n$ repl\n```\n\nRun the test
  suite with this command:\n\n``` bash\n$ ./script/test\n```\n\n## Usage\n\n`niv`
  simplifies [adding](#add) and [updating](#update) dependencies in Nix\nprojects.
  It uses a single file, `nix/sources.json`, where it stores the data\nnecessary for
  fetching and updating the packages.\n\n* [Add](#add): inserts a package in `nix/sources.json`.\n*
  [Update](#update): updates one or all packages in `nix/sources.json`.\n* [Drop](#drop):
  deletes a package from `nix/sources.json`.\n\n`niv` has some utility functions:\n\n*
  [Init](#init): bootstraps a Nix project, in particular creates a\n  `nix/sources.json`
  file containing `niv` and `nixpkgs` as well as a\n  `nix/sources.nix` file that
  returns the sources as a Nix object.\n* [Show](#show): shows the packages' information.\n*
  [Modify](#modify): modifies attributes _without_ performing an update.\n\n### Configuration\n\nThe
  following environment variables are read by `niv`:\n\n| Name            | Note |\n|
  --------------- | ---- |\n| GITHUB_TOKEN or NIV_GITHUB_TOKEN | When set, the value
  is used to authenticate GitHub API requests. |\n| GITHUB_HOST or NIV_GITHUB_HOST
  | The GitHub host to use when fetching packages. Port may be appended here. |\n|
  GITHUB_API_HOST or NIV_GITHUB_API_HOST | The host used when performing GitHub API
  requests. Use `GITHUB_API_PORT` for specifying the port. |\n| GITHUB_API_PORT or
  NIV_GITHUB_API_PORT | The port used when performing GitHub API requests. Defaults
  to `443` for secure requests. Defaults to `80` for insecure requests. See also:
  `GITHUB_INSECURE`. |\n| NIV_GITHUB_INSECURE | When set to anything but the empty
  string, requests are performed over `http` instead of `https`. |\n| NIV_GITHUB_PATH
  \    | The base path used when performing GitHub API requests. |\n\nThe next two
  sections cover [common use cases](#getting-started) and [full command\ndescription](#commands).\n\n###
  Getting started\n\nThis section covers common use cases:\n\n* [Bootstrapping a Nix
  project](#bootstrapping-a-nix-project).\n* [Tracking a different nixpkgs branch](#tracking-a-nixpkgs-branch).\n*
  [Importing packages from GitHub](#importing-packages-from-github).\n* [Fetching
  packages from custom URLs](#using-custom-urls).\n\n#### Bootstrapping a Nix project\n\nUse
  the `init` command when starting a new Nix project or when porting an\nexisting
  Nix project to niv:\n\n``` shell\n$ niv init\n...\n$ tree\n.\n└── nix\n    ├── sources.json\n
     └── sources.nix\n\n1 directory, 2 files\n```\n\nThe file `nix/sources.json` is
  the file used by niv to store versions and is\ninitialized with niv and nixpkgs:\n\n```
  json\n{\n    \"nixpkgs\": {\n        \"url\": \"https://github.com/NixOS/nixpkgs/archive/109a28ab954a0ad129f7621d468f829981b8b96c.tar.gz\",\n
  \       \"owner\": \"NixOS\",\n        \"branch\": \"nixos-19.09\",\n        \"url_template\":
  \"https://github.com/<owner>/<repo>/archive/<rev>.tar.gz\",\n        \"repo\": \"nixpkgs\",\n
  \       \"sha256\": \"12wnxla7ld4cgpdndaipdh3j4zdalifk287ihxhnmrzrghjahs3q\",\n
  \       \"description\": \"Nix Packages collection\",\n        \"rev\": \"109a28ab954a0ad129f7621d468f829981b8b96c\"\n
  \   },\n    \"niv\": {\n        \"homepage\": \"https://github.com/nmattia/niv\",\n
  \       \"url\": \"https://github.com/nmattia/niv/archive/72e77204544527279e8f1e2d982d29503482b8f4.tar.gz\",\n
  \       \"owner\": \"nmattia\",\n        \"branch\": \"master\",\n        \"url_template\":
  \"https://github.com/<owner>/<repo>/archive/<rev>.tar.gz\",\n        \"repo\": \"niv\",\n
  \       \"sha256\": \"1zjcyzxhq9iwxh58j5d7sx1vz5s3r1f6gpmnfgj2a3rxmclwvn3c\",\n
  \       \"description\": \"Easy dependency management for Nix projects\",\n        \"rev\":
  \"72e77204544527279e8f1e2d982d29503482b8f4\"\n    }\n}\n```\n\nTo use those dependencies
  `import` the file `nix/sources.nix`, e.g.:\n\n``` nix\n{ sources ? import ./sources.nix
  }:     # import the sources\nwith\n  { overlay = _: pkgs:\n      { niv = import
  sources.niv {};    # use the sources :)\n      };\n  };\nimport sources.nixpkgs
  \                 # and use them again!\n  { overlays = [ overlay ] ; config = {};
  }\n```\n\n#### Tracking a nixpkgs branch\n\nThe `init` command sets the `nix/sources.json`
  file to track the latest commit\npresent on nixpkgs 19.09 when the command was run.
  Run the following command to\nupdate it:\n\n``` shell\n$ niv update nixpkgs\n```\n\nTo
  change the branch being tracked run this command:\n\n``` shell\n$ niv update nixpkgs
  -b nixos-19.09     # equivalent to --branch nixos-19.09\n```\n\n#### Importing packages
  from GitHub\n\nThe `add` command will infer information about the package being
  added, when\npossible. This works very well for GitHub repositories. Run this command
  to add\n[jq] to your project:\n\n\n``` shell\n$ niv add stedolan/jq\n```\n\nThe
  following data was added in `nix/sources.json` for `jq`:\n\n``` json\n{\n  \"homepage\":
  \"http://stedolan.github.io/jq/\",\n  \"url\": \"https://github.com/stedolan/jq/archive/9fa2e51099c55af56e3e541dc4b399f11de74abe.tar.gz\",\n
  \ \"owner\": \"stedolan\",\n  \"branch\": \"master\",\n  \"url_template\": \"https://github.com/<owner>/<repo>/archive/<rev>.tar.gz\",\n
  \ \"repo\": \"jq\",\n  \"sha256\": \"0819rvk8057qgcqvgn7fpldvly2pfdw9fxcjrlqa8gr59p8a1cic\",\n
  \ \"description\": \"Command-line JSON processor\",\n  \"rev\": \"9fa2e51099c55af56e3e541dc4b399f11de74abe\"\n}\n```\n\n####
  Using custom URLs\n\nIt is possible to use niv to fetch packages from custom URLs.
  Run this command\nto add the Haskell compiler [GHC] to your `nix/sources.json`:\n\n```
  shell\n$ niv add ghc   \\\n    -v 8.4.3    \\\n    -t 'https://downloads.haskell.org/~ghc/<version>/ghc-<version>-i386-deb8-linux.tar.xz'\n```\n\nThe
  option `-v` sets the \"version\" attribute to `8.4.3`. The option `-t` sets a\ntemplate
  that can be reused by niv when fetching a new URL (see the\ndocumentation for [add](#add)
  and [update](#update)).\n\nFor updating the version of GHC used run this command:\n\n```
  shell\n$ niv update ghc -v 8.6.2\n```\n\n### Commands\n\n```\nniv - dependency manager
  for Nix projects\n\nversion: 0.2.18\n\nUsage: niv [-s|--sources-file FILE] COMMAND\n\nAvailable
  options:\n  -s,--sources-file FILE   Use FILE instead of nix/sources.json\n  -h,--help
  \               Show this help text\n  --version                Print version\n\nAvailable
  commands:\n  init                     Initialize a Nix project. Existing files won't
  be\n                           modified.\n  add                      Add a GitHub
  dependency\n  show                     \n  update                   Update dependencies\n
  \ modify                   Modify dependency attributes without performing an\n
  \                          update\n  drop                     Drop dependency\n```\n\n####
  Add\n\n```\nExamples:\n\n  niv add stedolan/jq\n  niv add NixOS/nixpkgs -n nixpkgs
  -b nixpkgs-unstable\n  niv add my-package -v alpha-0.1 -t http://example.com/archive/<version>.zip\n\nUsage:
  niv add PACKAGE [-n|--name NAME] ([-a|--attribute KEY=VAL] |\n               [-s|--string-attribute
  KEY=VAL] | [-b|--branch BRANCH] |\n               [-o|--owner OWNER] | [-r|--rev
  REV] | [-v|--version VERSION] |\n               [-t|--template URL] | [-T|--type
  TYPE])\n  Add a GitHub dependency\n\nAvailable options:\n  -n,--name NAME           Set
  the package name to <NAME>\n  -a,--attribute KEY=VAL   Set the package spec attribute
  <KEY> to <VAL>, where\n                           <VAL> may be JSON.\n  -s,--string-attribute
  KEY=VAL\n                           Set the package spec attribute <KEY> to <VAL>.\n
  \ -b,--branch BRANCH       Equivalent to --attribute branch=<BRANCH>\n  -o,--owner
  OWNER         Equivalent to --attribute owner=<OWNER>\n  -r,--rev REV             Equivalent
  to --attribute rev=<REV>\n  -v,--version VERSION     Equivalent to --attribute version=<VERSION>\n
  \ -t,--template URL        Used during 'update' when building URL. Occurrences\n
  \                          of <foo> are replaced with attribute 'foo'.\n  -T,--type
  TYPE           The type of the URL target. The value can be either\n                           'file'
  or 'tarball'. If not set, the value is\n                           inferred from
  the suffix of the URL.\n  -h,--help                Show this help text\n\nExperimental
  commands:\n  git                      Add a git dependency. Experimental.\n  github
  \                  Add a GitHub dependency\n  local                    Add a local
  dependency. Experimental.\n```\n\n#### Update\n\n```\nExamples:\n  \n  niv update
  \                    # update all packages\n  niv update nixpkgs             # update
  nixpkgs\n  niv update my-package -v beta-0.2 # update my-package to version \"beta-0.2\"\n\nUsage:
  niv update [PACKAGE] ([-a|--attribute KEY=VAL] |\n                  [-s|--string-attribute
  KEY=VAL] | [-b|--branch BRANCH] |\n                  [-o|--owner OWNER] | [-r|--rev
  REV] | [-v|--version VERSION] |\n                  [-t|--template URL] | [-T|--type
  TYPE])\n  Update dependencies\n\nAvailable options:\n  -a,--attribute KEY=VAL   Set
  the package spec attribute <KEY> to <VAL>, where\n                           <VAL>
  may be JSON.\n  -s,--string-attribute KEY=VAL\n                           Set the
  package spec attribute <KEY> to <VAL>.\n  -b,--branch BRANCH       Equivalent to
  --attribute branch=<BRANCH>\n  -o,--owner OWNER         Equivalent to --attribute
  owner=<OWNER>\n  -r,--rev REV             Equivalent to --attribute rev=<REV>\n
  \ -v,--version VERSION     Equivalent to --attribute version=<VERSION>\n  -t,--template
  URL        Used during 'update' when building URL. Occurrences\n                           of
  <foo> are replaced with attribute 'foo'.\n  -T,--type TYPE           The type of
  the URL target. The value can be either\n                           'file' or 'tarball'.
  If not set, the value is\n                           inferred from the suffix of
  the URL.\n  -h,--help                Show this help text\n```\n\n#### Modify\n\n```\nExamples:\n\n
  \ niv modify nixpkgs -v beta-0.2\n  niv modify nixpkgs -a branch=nixpkgs-unstable\n\nUsage:
  niv modify PACKAGE [-n|--name NAME] ([-a|--attribute KEY=VAL] |\n                  [-s|--string-attribute
  KEY=VAL] | [-b|--branch BRANCH] |\n                  [-o|--owner OWNER] | [-r|--rev
  REV] | [-v|--version VERSION] |\n                  [-t|--template URL] | [-T|--type
  TYPE])\n  Modify dependency attributes without performing an update\n\nAvailable
  options:\n  -n,--name NAME           Set the package name to <NAME>\n  -a,--attribute
  KEY=VAL   Set the package spec attribute <KEY> to <VAL>, where\n                           <VAL>
  may be JSON.\n  -s,--string-attribute KEY=VAL\n                           Set the
  package spec attribute <KEY> to <VAL>.\n  -b,--branch BRANCH       Equivalent to
  --attribute branch=<BRANCH>\n  -o,--owner OWNER         Equivalent to --attribute
  owner=<OWNER>\n  -r,--rev REV             Equivalent to --attribute rev=<REV>\n
  \ -v,--version VERSION     Equivalent to --attribute version=<VERSION>\n  -t,--template
  URL        Used during 'update' when building URL. Occurrences\n                           of
  <foo> are replaced with attribute 'foo'.\n  -T,--type TYPE           The type of
  the URL target. The value can be either\n                           'file' or 'tarball'.
  If not set, the value is\n                           inferred from the suffix of
  the URL.\n  -h,--help                Show this help text\n```\n\n#### Drop\n\n```\nExamples:\n\n
  \ niv drop jq\n  niv drop my-package version\n\nUsage: niv drop PACKAGE [ATTRIBUTE]\n
  \ Drop dependency\n\nAvailable options:\n  -h,--help                Show this help
  text\n```\n\n#### Init\n\n```\nUsage: niv init ([--no-nixpkgs] | [-b|--nixpkgs-branch
  ARG]\n                [--nixpkgs OWNER/REPO])\n  Initialize a Nix project. Existing
  files won't be modified.\n\nAvailable options:\n  --no-nixpkgs             Don't
  add a nixpkgs entry to sources.json.\n  -b,--nixpkgs-branch ARG  The nixpkgs branch
  to use. (default: \"release-20.03\")\n  --nixpkgs OWNER/REPO     Use a custom nixpkgs
  repository from\n                           GitHub. (default: NixOS/nixpkgs)\n  -h,--help
  \               Show this help text\n```\n\n#### show\n\n```\nUsage: niv show [PACKAGE]\n\nAvailable
  options:\n  -h,--help                Show this help text\n```\n\n[Nix]: https://nixos.org/nix/\n[jq]:
  https://stedolan.github.io/jq/\n[GHC]: https://www.haskell.org/ghc/\n\n\n## Frequently
  Asked Questions\n\n* [Can I use private GitHub repositories?](#can-i-use-private-github-repositories)\n*
  [How do I import a subpath of a source?](#how-do-i-import-a-subpath-of-a-source)\n*
  [How do I import NixOS modules](#how-do-i-import-nixos-modules)\n* [Can I use local
  packages?](#can-i-use-local-packages)\n\n### Can I use private GitHub repositories?\n\nYes.
  There are two ways:\n\n#### 1. Use the git protocol\n\nWhen using the git protocol,
  your public SSH keypair is used to authenticate\nyou:\n\n``` shell\n$ niv add git
  git@github.com:my_user/my_private_repo\n```\n\n##### 2. Use the netrc file\n\nin
  order to `niv add` a private github repo you'll need to:\n\n1. create a .netrc file
  with the following content\n```\nmachine github.com\n  login YOUR_GITHUB_USER_NAME\n
  \ password YOUR_GITHUB_TOKEN\n```\n\n2. add the path to the above file to `/etc/nix/nix.conf`:\n```\nnetrc-file
  = /PATH/TO/.netrc\n```\n\n3. set `GITHUB_TOKEN` env var when calling `niv add`\n```\nGITHUB_TOKEN=$YOUR_GITHUB_TOKEN
  niv add ...\n```\n\n### How do I import a subpath of a source?\n\nIn order to use
  the directory `dir` of a `my-package`, use the following\npattern:\n\n``` nix\nlet\n
  \ sources = import ./nix/sources.nix;\nin sources.my-package + \"/dir\"\n```\n\nin
  this example, `sources.my-package` becomes `my-package`'s root directory, and `+
  \"/dir\"` appends the\nsubdirectory.\n\n### How do I import NixOS modules?\n\nAfter
  the package containing the modules has been `niv add`ed, importing the\nmodules
  is straightforward:\n\n``` nix\nlet\n  sources = import ./nix/sources.nix;\nin {\n
  \ imports = [ (sources.package + \"/path/to/module\") ];\n}\n```\n\n### Can I use
  local packages?\n\nIf you need to use a local path as a source -- especially convenient
  when\nmodifying dependencies -- `niv` allows you to override the `sources.json`
  via\nenvironment variables. To override a source `foo` with a local path\n`./bar/baz`,
  set the environment variable `NIV_OVERRIDE_foo` to `./bar/baz`.\n\nGenerally, if
  the environment variable `NIV_OVERRIDE_<name>` is set _and_ you\nhave a source named
  `<name>` then `niv` will use the value of\n`NIV_OVERRIDE_<name>` as the `outPath`
  of that source. All non-alphanumeric\ncharacters in the source name are escaped
  to the character `_`; i.e. to\noverride the package `my package-foo` you need to
  set the environment variable\n`NIV_OVERRIDE_my_package_foo`.\n"
license-name: MIT
