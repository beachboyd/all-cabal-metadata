homepage: http://github.com/michaelxavier/cron
changelog-type: text
hash: 706974fc001f7322038f1901c6b6d96848e7216c915fda1a218d085819663fea
test-bench-deps:
  base: -any
  time: -any
  text: -any
  cron: -any
  criterion: -any
  semigroups: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  attoparsec: -any
  tasty: -any
  generics-sop: ! '>=0.2'
  transformers-compat: -any
maintainer: Michael Xavier <michael@michaelxavier.net>
synopsis: Cron datatypes and Attoparsec parser
changelog: ! '# 0.6.1

  * Add support for day and month literals, Ahti Katiska (@HariGyogu).

  # 0.6.0

  * Use Text instead of String in Cron.Schedule

  # 0.5.0

  * Add System.Cron.Describe which describes cron schedules in words (English only
  for now). Big thanks to Joe Canero for this feature!

  # 0.4.2

  * Drop dependency on derive in tests.

  * Add some Generic and Typeable instances.

  # 0.4.1.1

  * Bug fix for checking nextMatch where either the day of month or day of week fields
  were a singleton list of star.

  # 0.4.1.1

  * Fix test suite for Stackage.

  # 0.4.1

  * Compatibility release to get cron building with GHC < 7.10 again.

  # 0.4.0

  * Various type changes to make it impossible to construct invalid cron schedules.

  * Add nextMatch function for non-polling based schedulers.

  # 0.3.2

  * Add test files to dist

  # 0.3.1

  * Fix bug that caused some range schedules to not fire at the correct time. See
  https://github.com/MichaelXavier/cron/issues/18

  # 0.3.0

  * MTL compatibility updates.

  # 0.2.6

  * Package test files

  # 0.2.5

  * GHC 7.10 support

  # 0.2.4

  * Bugfixes for new task runner feature

  # 0.2.3

  * Add new in-process task runner feature. Credit to @AndrewRademacher

  # 0.2.2

  * Fix edge case when day of month and day of week are both specified. Credit to
  @joelwilliamson

  # 0.2.1

  * Fix day of week bug. Credit to @meteogrid

  # 0.1.2

  * Relax dependency on text to allow 1.0

'
basic-deps:
  mtl-compat: ! '>=0.2.1'
  base: ! '>=4 && <5'
  data-default-class: ! '>=0.0.1'
  time: ! '>=1.4'
  text: ! '>=0.11 && <2'
  semigroups: -any
  old-locale: ! '>=1.0'
  mtl: ! '>=2.0.1'
  attoparsec: ! '>=0.10'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.2.6'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.4.0'
- '0.4.1'
- '0.4.1.1'
- '0.4.1.2'
- '0.4.2'
- '0.5.0'
- '0.6.0'
- '0.6.1'
author: Michael Xavier <michael@michaelxavier.net>
latest: '0.6.1'
description-type: markdown
description: ! "cron\n====\n[![Build Status](https://secure.travis-ci.org/MichaelXavier/cron.png)](http://travis-ci.org/MichaelXavier/cron)\n\nCron
  data structure and Attoparsec parser for Haskell. The idea is to embed it\nin larger
  systems which want to roll their own scheduled tasks in a format that\npeople are
  used to.\n\n`System.Cron` is where all the interesting datatypes live. You will
  also find\n`scheduleMatches`, which you can use to compare a time against a `CronSchedule`\nto
  see if an action needs to be performed.  System.Cron.Parser is where you will\nfind
  the parsers `cronSchedule`, `crontabEntry` and `cronTab`. To parse\nindividual schedules
  up to full crontab files. System.Cron.Describe is where\nyou will find the `describe`
  function for creating human-readable strings from\ncron schedules, as well as any
  options to control how the description is created.\n\n\nTo do anything, you'll need
  to install cabal-dev with cabal.\n\nTo build, run:\n\n    make\n\nTo run tests,
  run:\n\n    make test\n\nIf you have inotify-tools, run this to run tests continuously.\n\n
  \   make autotest\n\nTo generate docs:\n\n    make docs\n\n#### Scheduler\nCron
  offers a scheduling monad which can be found in `System.Cron.Schedule`. This monad
  transform allows you to declare a set of jobs (of the type `IO ()`) that will be
  executed at intervals defined by cron strings.\n\n```haskell\nmain :: IO ()\nmain
  = do\n    ...\n    tids <- execSchedule $ do\n        addJob job1 \"* * * * *\"\n
  \       addJob job2 \"0 * * * *\"\n    print tids\n    ...\n\njob1 :: IO ()\njob1
  = putStrLn \"Job 1\"\n\njob2 :: IO ()\njob2 = putStrLn \"Job 2\"\n```\n\n#### Describe\n```haskell\nmain
  :: IO ()\nmain = do\n  let Right cs1 = parseCronSchedule \"*/2 * 3 * 4,5,6\"\n  print
  $ describe defaultOpts cs1\n\n  let Right cs2 = parseCronSchedule \"*/2 12 3 * 4,5,6\"\n
  \ print $ describe (twentyFourHourFormat <> verbose) cs2\n```\n\n## Contributors\n\n*
  [Simon Hengel](https://github.com/sol)\n* [Alberto Valverde](https://github.com/albertov)\n*
  [Andrew Rademacher](https://github.com/AndrewRademacher)\n* [Peter Simons](https://github.com/peti)\n*
  [Joseph Canero](https://github.com/caneroj1)\n* [Ahti Katiska](https://github.com/HariGyogu)\n"
license-name: MIT
