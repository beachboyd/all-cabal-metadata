homepage: https://github.com/haskell-crypto/cryptonite
changelog-type: markdown
hash: 6942644686c4e316c9f312b51151caba779e35f15fb666d255c802b1a84067ae
test-bench-deps:
  bytestring: -any
  base: ! '>=3 && <5'
  tasty-kat: -any
  gauge: -any
  memory: -any
  cryptonite: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  deepseq: -any
maintainer: vincent@snarc.org
synopsis: Cryptography Primitives sink
changelog: ! "## 0.25\n\n* Improve digest binary conversion efficiency\n* AES CCM
  support\n* Add MonadFailure instance for CryptoFailable\n* Various misc improvements
  on documentation\n* Edwards25519 lowlevel arithmetic support\n* P256 add point negation\n*
  Improvement in ECC (benchmark, better normalization)\n* Blake2 improvements to context
  size\n* Use gauge instead of criterion\n* Use haskell-ci for CI scripts\n* Improve
  Digest memory representation to be 2 less Ints and one less boxing\n  moving from
  `UArray` to `Block`\n\n## 0.24\n\n* Ed25519: generateSecret & Documentation updates\n*
  Repair tutorial\n* RSA: Allow signing digest directly\n* IV add: fix overflow behavior\n*
  P256: validate point when decoding\n* Compilation fix with deepseq disabled\n* Improve
  Curve448 and use decaf for Ed448\n* Compilation flag blake2 sse merged in sse support\n*
  Process unaligned data better in hashes and AES, on architecture needing alignment\n*
  Drop support for ghc 7.6\n* Add ability to create random generator Seed from binary
  data and\n  loosen constraint on ChaChaDRG seed from ByteArray to ByteArrayAccess.\n*
  Add 3 associated types with the HashAlgorithm class, to get\n  access to the constant
  for BlockSize, DigestSize and ContextSize at the type level.\n  the related function
  that this replaced will be deprecated in later release, and\n  eventually removed.\n\nAPI
  CHANGES:\n\n* Improve ECDH safety to return failure for bad inputs (e.g. public
  point in small order subgroup).\n  To go back to previous behavior you can replace
  `ecdh` by `ecdhRaw`. It's recommended to\n  use `ecdh` and handle the error appropriately.\n*
  Users defining their own HashAlgorithm needs to define the\n  HashBlockSize, HashDigest,
  HashInternalContextSize associated types\n\n## 0.23\n\n* Digest memory usage improvement
  by using unpinned memory\n* Fix generateBetween to generate within the right bounds\n*
  Add pure Twofish implementation\n* Fix memory allocation in P256 when using a temp
  point\n* Consolidate hash benchmark code\n* Add Nat-length Blake2 support (GHC >
  8.0)\n* Update tutorial\n\n## 0.22\n\n* Add Argon2 (Password Hashing Competition
  winner) hash function\n* Update blake2 to latest upstream version\n* Add extra blake2
  hashing size\n* Add faster PBKDF2 functions for SHA1/SHA256/SHA512\n* Add SHAKE128
  and SHAKE256\n* Cleanup prime generation, and add tests\n* Add Time-based One Time
  Password (TOTP) and HMAC-based One Time Password (HOTP)\n* Rename Ed448 module name
  to Curve448, old module name still valid for now\n\n## 0.21\n\n* Drop automated
  tests with GHC 7.0, GHC 7.4, GHC 7.6. support dropped, but probably still working.\n*
  Improve non-aligned support in C sources, ChaCha and SHA3 now probably work on arch
  without support for unaligned access. not complete or tested.\n* Add another ECC
  framework that is more flexible, allowing different implementations to work instead
  of\n  the existing Pure haskell NIST implementation.\n* Add ECIES basic primitives\n*
  Add XSalsa20 stream cipher\n* Process partial buffer correctly with Poly1305\n\n##
  0.20\n\n* Fixed hash truncation used in ECDSA signature & verification (Olivier
  Chéron)\n* Fix ECDH when scalar and coordinate bit sizes differ (Olivier Chéron)\n*
  Speed up ECDSA verification using Shamir's trick (Olivier Chéron)\n* Fix rdrand
  on windows\n\n## 0.19\n\n* Add tutorial (Yann Esposito)\n* Derive Show instance
  for better interaction with Show pretty printer (Eric Mertens)\n\n## 0.18\n\n* Re-used
  standard rdrand instructions instead of bytedump of rdrand instruction\n* Improvement
  to F2m, including lots of tests (Andrew Lelechenko)\n* Add error check on salt length
  in bcrypt\n\n## 0.17\n\n* Add Miyaguchi-Preneel construction (Kei Hibino)\n* Fix
  buffer length in scrypt (Luke Taylor)\n* build fixes for i686 and arm related to
  rdrand\n\n## 0.16\n\n* Fix basepoint for Ed448\n\n* Enable 64-bit Curve25519 implementation\n\n##
  0.15\n\n* Fix serialization of DH and ECDH\n\n## 0.14\n\n* Reduce size of SHA3 context
  instead of allocating all-size fit memory. save\n  up to 72 bytes of memory per
  context for SHA3-512.\n* Add a Seed capability to the main DRG, to be able to debug/reproduce
  randomized program\n  where you would want to disable the randomness.\n* Add support
  for Cipher-based Message Authentication Code (CMAC) (Kei Hibino)\n* *CHANGE* Change
  the `SharedKey` for `Crypto.PubKey.DH` and `Crypto.PubKey.ECC.DH`,\n  from an Integer
  newtype to a ScrubbedBytes newtype. Prevent mistake where the\n  bytes representation
  is generated without the right padding (when needed).\n* *CHANGE* Keep The field
  size in bits, in the `Params` in `Crypto.PubKey.DH`,\n  moving from 2 elements to
  3 elements in the structure.\n\n## 0.13\n\n* *SECURITY* Fix buffer overflow issue
  in SHA384, copying 16 extra bytes from\n  the SHA512 context to the destination
  memory pointer leading to memory\n  corruption, segfault. (Mikael Bung)\n\n## 0.12\n\n*
  Fix compilation issue with Ed448 on 32 bits machine.\n\n## 0.11\n\n* Truncate hashing
  correctly for DSA\n* Add support for HKDF (RFC 5869)\n* Add support for Ed448\n*
  Extends support for Blake2s to 224 bits version.\n* Compilation workaround for old
  distribution (RHEL 4.1)\n* Compilation fix for AIX\n* Compilation fix with AESNI
  and ghci compiling C source in a weird order.\n* Fix example compilation, typo,
  and warning\n\n## 0.10\n\n* Add reference implementation of blake2 for non-SSE2
  platform\n* Add support\\_blake2\\_sse flag\n\n## 0.9\n\n* Quiet down unused module
  imports\n* Move Curve25519 over to Crypto.Error instead of using Either String.\n*
  Add documentation for ChaChaPoly1305\n* Add missing documentation for various modules\n*
  Add a way to create Poly1305 Auth tag.\n* Added support for the BLAKE2 family of
  hash algorithms\n* Fix endianness of incrementNonce function for ChaChaPoly1305\n\n##
  0.8\n\n* Add support for ChaChaPoly1305 Nonce Increment (John Galt)\n* Move repository
  to the haskell-crypto organisation\n\n## 0.7\n\n* Add PKCS5 / PKCS7 padding and
  unpadding methods\n* Fix ChaChaPoly1305 Decryption\n* Add support for BCrypt (Luke
  Taylor)\n\n## 0.6\n\n* Add ChaChaPoly1305 AE cipher\n* Add instructions in README
  for building on old OSX\n* Fix blocking /dev/random Andrey Sverdlichenko\n\n## 0.5\n\n*
  Fix all strays exports to all be under the cryptonite prefix.\n\n## 0.4\n\n* Add
  a System DRG that represent a referentially transparent of evaluated bytes\n  while
  using lazy evaluation for future entropy values.\n\n## 0.3\n\n* Allow drgNew to
  run in any MonadRandom, providing cascading initialization\n* Remove Crypto.PubKey.HashDescr
  in favor of just having the algorithm\n  specified in PKCS15 RSA function.\n* Fix
  documentation in cipher sub section (Luke Taylor)\n* Cleanup AES dead functions
  (Luke Taylor)\n* Fix Show instance of Digest to display without quotes similar to
  cryptohash\n* Use scrubbed bytes instead of bytes for P256 scalar\n\n## 0.2\n\n*
  Fix P256 compilation and exactness, + add tests\n* Add a raw memory number serialization
  capability (i2osp, os2ip)\n* Improve tests for number serialization\n* Improve tests
  for ECC arithmetics\n* Add Ord instance for Digest (Nicolas Di Prima)\n* Fix entropy
  compilation on windows 64 bits.\n\n## 0.1\n\n* Initial release\n"
basic-deps:
  bytestring: -any
  basement: ! '>=0.0.6'
  base: ! '>=4.6 && <5'
  integer-gmp: -any
  memory: ! '>=0.14.14'
  ghc-prim: -any
  deepseq: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '0.10'
- '0.11'
- '0.12'
- '0.13'
- '0.14'
- '0.15'
- 0.15.1
- '0.16'
- '0.17'
- '0.18'
- '0.19'
- '0.20'
- '0.21'
- '0.22'
- '0.23'
- '0.24'
- '0.25'
author: Vincent Hanquez <vincent@snarc.org>
latest: '0.25'
description-type: markdown
description: ! "cryptonite\n==========\n\n[![Join the chat at https://gitter.im/vincenthz/cryptonite](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/vincenthz/cryptonite?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build
  Status](https://travis-ci.org/haskell-crypto/cryptonite.png?branch=master)](https://travis-ci.org/haskell-crypto/cryptonite)\n[![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)\n[![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)\n\nCryptonite
  is a haskell repository of cryptographic primitives. Each crypto\nalgorithm has
  specificities that are hard to wrap in common APIs and types,\nso instead of trying
  to provide a common ground for algorithms, this package\nprovides a non-consistent
  low-level API.\n\nIf you have no idea what you're doing, please do not use this
  directly.\nInstead, rely on higher level protocols or implementations.\n\nDocumentation:
  [cryptonite on hackage](http://hackage.haskell.org/package/cryptonite)\n\nStability\n---------\n\nCryptonite
  APIs are stable, and we only strive to add, not change or remove.\nNote that because
  the API exposed is wide and also expose internals things (for\npower users and flexibility),
  certains APIs can be revised in extreme cases\nwhere we can't just add.\n\nVersioning\n----------\n\nNext
  version of `0.x` is `0.(x+1)`. There's no exceptions, or API related meaning\nbehind
  the numbers.\n\nEach versions of stackage (going back 3 stable LTS) has a cryptonite
  version\nthat we maintain with security fixes when necessary and are versioned with
  the\nfollowing `0.x.y` scheme.\n\nCoding Style\n------------\n\nThe coding style
  of this project mostly follows:\n[haskell-style](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)\n\nSupport\n-------\n\ncryptonite
  supports the following platforms:\n\n* Windows >= 8\n* OSX >= 10.8\n* Linux\n* BSDs\n\nOn
  the following architectures:\n\n* x86-64\n* i386\n\nOn the following haskell versions:\n\n*
  GHC 7.8.x\n* GHC 7.10.x\n* GHC 8.0.x\n* GHC 8.2.x\n\nFurther platforms and architectures
  probably work too, but since the\nmaintainer(s) don't have regular access to them,
  we can't commit to\nfurther support.\n\nKnown Building Issues\n---------------------\n\nOn
  OSX <= 10.7, the system compiler doesn't understand the '-maes' option, and\nwith
  the lack of autodetection feature builtin in .cabal file, it is left on\nthe user
  to disable the aesni. See the [Disabling AESNI] section\n\nDisabling AESNI\n---------------\n\nIt
  may be useful to disable AESNI for building, testing or runtime purposes.\nThis
  is achieved with the *support_aesni* flag.\n\nAs part of configure of cryptonite:\n\n```\n
  \ cabal configure --flag='-support_aesni'\n```\n\nor as part of an installation:\n\n```\n
  \ cabal install --constraint=\"cryptonite -support_aesni\"\n```\n\nFor help with
  cabal flags, see: [stackoverflow : is there a way to define flags for cabal](http://stackoverflow.com/questions/23523869/is-there-any-way-to-define-flags-for-cabal-dependencies)\n\nLinks\n-----\n\n*
  [ChaCha](http://cr.yp.to/chacha.html)\n* [ChaCha-test-vectors](https://github.com/secworks/chacha_testvectors.git)\n*
  [Poly1305](http://cr.yp.to/mac.html)\n* [Poly1305-test-vectors](http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-06#page-12)\n*
  [Salsa](http://cr.yp.to/snuffle.html)\n* [Salsa128-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.128)\n*
  [Salsa256-test-vectors](https://github.com/alexwebr/salsa20/blob/master/test_vectors.256)\n*
  [XSalsa](https://cr.yp.to/snuffle/xsalsa-20081128.pdf)\n* [PBKDF2](http://tools.ietf.org/html/rfc2898)\n*
  [PBKDF2-test-vectors](http://www.ietf.org/rfc/rfc6070.txt)\n* [Scrypt](http://www.tarsnap.com/scrypt.html)\n*
  [Curve25519](http://cr.yp.to/ecdh.html)\n* [Ed25519](http://ed25519.cr.yp.to/papers.html)\n*
  [Ed448-Goldilocks](http://ed448goldilocks.sourceforge.net/)\n* [EdDSA-test-vectors](http://www.ietf.org/rfc/rfc8032.txt)\n*
  [AFIS](http://clemens.endorphin.org/cryptography)\n\n"
license-name: BSD-3-Clause
