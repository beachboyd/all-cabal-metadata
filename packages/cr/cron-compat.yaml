homepage: http://github.com/michaelxavier/cron
changelog-type: text
hash: c536f62217965c61551f6223c7bb9fe97739df4000bfc7c960afde73072734f1
test-bench-deps:
  base: ! '>=4 && <5'
  time: ! '>=1.4'
  hspec: ! '>=1.3'
  text: ! '>=0.11 && <2'
  cron: -any
  attoparsec: ! '>=0.10'
  transformers: ! '>=0.4'
  QuickCheck: -any
  derive: -any
  hspec-expectations: -any
maintainer: Michael Xavier <michael@michaelxavier.net>
synopsis: Cron datatypes and Attoparsec parser
changelog: ! '# 0.2.5

  * GHC 7.10 support

  # 0.2.4

  * Bugfixes for new task runner feature

  # 0.2.3

  * Add new in-process task runner feature. Credit to @AndrewRademacher

  # 0.2.2

  * Fix edge case when day of month and day of week are both specified. Credit to
  @joelwilliamson

  # 0.2.1

  * Fix day of week bug. Credit to @meteogrid

  # 0.1.2

  * Relax dependency on text to allow 1.0

'
basic-deps:
  mtl-compat: ! '>=0.2.1 && <=0.2.2'
  base: ! '>=4 && <5'
  time: ! '>=1.4'
  text: ! '>=0.11 && <2'
  old-locale: ! '>=1.0'
  mtl: ! '>=2.1 && <=2.2'
  attoparsec: ! '>=0.10'
  transformers-compat: ! '>=0.3.0.0'
all-versions:
- 0.2.6
author: Michael Xavier <michael@michaelxavier.net>
latest: 0.2.6
description-type: markdown
description: ! "cron\n====\n[![Build Status](https://secure.travis-ci.org/MichaelXavier/cron.png)](http://travis-ci.org/MichaelXavier/cron)\n\nCron
  data structure and Attoparsec parser for Haskell. The idea is to embed it\nin larger
  systems which want to roll their own scheduled tasks in a format that\npeople are
  used to.\n\n`System.Cron` is where all the interesting datatypes live. You will
  also find\n`scheduleMatches`, which you can use to compare a time against a `CronSchedule`\nto
  see if an action needs to be performed.  System.Cron.Parser is where you will\nfind
  the parsers `cronSchedule`, `crontabEntry` and `cronTab`. To parse\nindividual schedules
  up to full crontab files.\n\n\nTo do anything, you'll need to install cabal-dev
  with cabal.\n\nTo build, run:\n\n    make\n\nTo run tests, run:\n\n    make test\n\nIf
  you have inotify-tools, run this to run tests continuously.\n\n    make autotest\n\nTo
  generate docs:\n\n    make docs\n\n#### Scheduler\nCron offers a scheduling monad
  which can be found in `System.Cron.Schedule`. This monad transform allows you to
  declare a set of jobs (of the type `IO ()`) that will be executed at intervals defined
  by cron strings.\n\n```haskell\nmain :: IO ()\nmain = do\n    ...\n    tids <- execSchedule
  $ do\n        addJob job1 \"* * * * *\"\n        addJob job2 \"0 * * * *\"\n    print
  tids\n    ...\n\njob1 :: IO ()\njob1 = putStrLn \"Job 1\"\n\njob2 :: IO ()\njob2
  = putStrLn \"Job 2\"\n```\n\n## Contributors\n\n* [Simon Hengel](https://github.com/sol)\n*
  [Alberto Valverde](https://github.com/albertov)\n* [Andrew Rademacher](https://github.com/AndrewRademacher)\n"
license-name: MIT
