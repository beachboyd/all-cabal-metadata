homepage: http://www.cryptol.net/
changelog-type: markdown
hash: 2a9946c656d264e9780ad0296e86b08c0750e9c765f990e8dc99437c3f578071
test-bench-deps:
  cryptol: -any
  sbv: ! '>=8.1'
  base: -any
  text: -any
  filepath: -any
  criterion: -any
  deepseq: -any
  directory: -any
maintainer: cryptol@galois.com
synopsis: ! 'Cryptol: The Language of Cryptography'
changelog: "# 2.8.0 (September 4, 2019)\n\n## New features\n\n* Added support for
  indexing on the left-hand sides of declarations,\n  record field constructors, and
  record updaters (issue #577). This\n  builds on a new primitive function called
  `generate`, where the new\n  syntax `x @ i = e` is sugar for `x = generate (\\i
  -> e)`.\n\n* Added support for element type ascriptions on sequence enumerations.\n
  \ The syntax `[a,b..c:t]` indicates that the elements should be of type\n  `t`.\n\n*
  Added support for wildcards in sequence enumerations. For example, the\n  syntax
  `[1 .. _] : [3][8]` yields `[0x01, 0x02, 0x03]`. It can also be\n  used polymorphically.
  For example, the most general type of `[1 .. _]`\n  is `{n, a} (n >= 1, Literal
  n a, fin n) => [n]a`\n\n* Changed the syntax of type signatures to allow multiple
  constraint\n  arrows in type schemas (issue #599). The following are now equivalent:\n\n
  \       f : {a} (fin a, a >= 1) => [a] -> [a]\n\n        f : {a} (fin a) => (a >=
  1) => [a] -> [a]\n        \n* Added a mechanism for user-defined type constraint
  operators, and use\n  this to define the new type constraint synonyms (<) and (>)
  (issues\n  #400, #618).\n\n* Added support for primitive type declarations. The
  prelude now uses\n  this mechanism to declare all of the basic types.\n\n* Added
  support for Haskell-style \"block arguments\", reducing the need\n  for parentheses
  in some cases. For example, `generate (\\i -> i +1)`\n  can now be written `generate
  \\i -> i + 1`.\n\n* Improved shadowing errors (part of the fix for issue #569).\n\n##
  Bug fixes\n\n* Closed many issues, including #265, #367, #437, #508, #522, #549,\n
  \ #557, #559, #569, #578, #590, #595, #596, #601, #607, #608, #610,\n  #615, #621,
  and #636.\n\n# 2.7.0 (April 30, 2019)\n\n## New features\n\n* Added syntax for record
  updates (see #399 for details of implemented\nand planned features).\n\n* Updated
  the `:browse` command to list module parameters (issue #586).\n\n* Added support
  for test vector creation (the `:dumptests` command).\nThis feature computes a list
  of random inputs and outputs for the\ngiven expression of function type and saves
  it to a file. This is\nuseful for generating tests from a trusted Cryptol specification
  to\napply to an implementation written in another language.\n\n## Breaking changes\n\n*
  Removed the `[x..]` construct from the language (issue #574). It\nwas shorthand
  for `[x..2^^n-1]` for a bit vector of size `n`, which was\noften not what the user
  intended. Users should instead write either\n`[x..y]` or `[x...]`, to construct
  a smaller range or a lazy sequence,\nrespectively.\n\n* Renamed the value-level
  `width` function to `length`, and generalized\nits type (issue #550). It does not
  behave identically to the\ntype-level `width` operator, which led to confusion.
  The name\n`length` matches more closely with similar functions in other\nlanguages.\n\n##
  Bug fixes\n\n* Improved type checking performance of decimal literals.\n\n* Improved
  type checking of `/^` and `%^` (issues #581, #582).\n\n* Improved performance of
  sequence updates with the `update` primitive\n(issue #579).\n\n* Fixed elapsed time
  printed by `:prove` and `:sat` (issue #572).\n\n* Fixed SMT-Lib formulas generated
  for right shifts (issue #566).\n\n* Fixed crash when importing non-parameterized
  modules with the\nbacktick prefix (issue #565).\n\n* Improved performance of symbolic
  execution for `Z n` (issue #554).\n\n* Fixed interpretation of the `satNum` option
  so finding multiple\nsolutions doesn't run forever (issue #553).\n\n* Improved type
  checking of the `length` function (issue #548).\n\n* Improved error message when
  trying to prove properties in\nparameterized modules (issue #545).\n\n* Stopped
  warning about defaulting at the REPL when `warnDefaulting` is\nset to `false` (issue
  #543).\n\n* Fixed builds on non-x86 architectures (issue #542).\n\n* Made browsing
  of interactively-bound identifiers work better (issue #538).\n\n* Fixed a bug that
  allowed changing the semantics of the `_ # _`\npattern and the `-` and `~` operators
  by creating local definitions\nof functions that they expand to (issue #568).\n\n*
  Closed issues #498, #547, #551, #562, and #563.\n\n## Solver versions\n\nCryptol
  can interact with a variety of external SMT solvers to\nsupport the `:prove` and
  `:sat` commands, and requires Z3 for its\ntype checker. Many versions of these solvers
  will work correctly, but\nfor Yices and Z3 we recommend the following specific versions.\n\n*
  Z3 4.7.1\n* Yices 2.6.1\n\nFor Yices, this is the latest version at the time of
  this writing.\nFor Z3, it is not, and the latest versions (4.8.x) include changes\nthat
  cause some examples that previously succeeded to time out when\ntype checking.\n"
basic-deps:
  tf-random: ! '>=0.5'
  GraphSCC: ! '>=1.0.4'
  cryptol: -any
  cryptohash-sha1: ! '>=0.11 && <0.12'
  sbv: ! '>=8.1'
  bytestring: ! '>=0.10'
  heredoc: ! '>=0.2'
  haskeline: -any
  base: ! '>=4.8 && <5'
  time: ! '>=1.6.0.1'
  text: ! '>=1.1'
  strict: -any
  monad-control: ! '>=1.0'
  filepath: ! '>=1.3'
  gitrev: ! '>=1.0'
  process: ! '>=1.2'
  monadLib: ! '>=3.7.2'
  array: ! '>=0.4'
  containers: ! '>=0.5'
  ansi-terminal: -any
  base-compat: ! '>=0.6 && <0.11'
  panic: ! '>=0.3'
  mtl: ! '>=2.2.1'
  blaze-html: -any
  transformers-base: ! '>=0.4'
  transformers: -any
  random: ! '>=1.0.1'
  deepseq: ! '>=1.3'
  pretty: ! '>=1.1'
  simple-smt: ! '>=0.7.1'
  directory: ! '>=1.2.2.0'
all-versions:
- 2.2.0
- 2.2.1
- 2.2.2
- 2.2.3
- 2.2.4
- 2.2.5
- 2.2.6
- 2.3.0
- 2.4.0
- 2.5.0
- 2.6.0
- 2.7.0
- 2.8.0
author: Galois, Inc.
latest: 2.8.0
description-type: haddock
description: Cryptol is a domain-specific language for specifying cryptographic algorithms.
  A Cryptol implementation of an algorithm resembles its mathematical specification
  more closely than an implementation in a general purpose language. For more, see
  <http://www.cryptol.net/>.
license-name: BSD-3-Clause
