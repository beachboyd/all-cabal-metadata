homepage: http://github.com/LeventErkok/CrackNum
changelog-type: markdown
hash: e194c50211535bb865db09ff756f439f55b143cd49a23c6dbbc079f25e064642
test-bench-deps: {}
maintainer: erkokl@gmail.com
synopsis: Crack various integer, floating-point data formats
changelog: ! "* Hackage: <http://hackage.haskell.org/package/crackNum>\n* GitHub:
  \ <http://github.com/LeventErkok/crackNum/>\n\n* Latest Hackage released version:
  2.2, 2018-09-01\n\n### Version 2.2, 2018-09-01\n\n  * Instead of data-binary-ieee754,
  use reinterpret-cast package. According\n    to documents, the former is deprecated.\n\n###
  Version 2.1, 2018-07-20\n\n  * Support for vi-editor bindings. See the file \"crackNum.vim\"
  in the\n    distribution or in the github repo You can put \"so ~/.vim/crackNum.vim\"\n
  \   (use the correct path!) and have vi crack numbers directly from inside\n    your
  editor. Simply locate your cursor on a binary/hex stream of digits\n    and type
  \":CrackNum\".  See the \"crackNum.vim\" file for binding details.\n\n### Version
  2.0, 2018-03-17\n\n  * Import FloatingHex qualified to avoid GHC 8.4.1 compilation
  issue\n\n### Version 1.9, 2017-01-22\n\n  * Minor fix to printing of +/-0\n\n###
  Version 1.8, 2017-01-15\n\n  * Bump up FloatingHex dependency to >0.4, this enables\n
  \   proper support for large doubles\n\n### Version 1.7, 2017-01-14\n\n  * Fix a
  snafu in reading hexadecimal floats\n\n### Version 1.6, 2017-01-14\n\n  * Add support
  for hexadecimal-floats. These now\n    work both in toIEEE option as input, and
  also\n    when printing the values out. (i.e., numbers\n    of the form 0x1.abp-3,
  etc.)\n\n### Version 1.5, 2016-01-23\n\n  * Typo fixes; no functionality changes\n\n###
  Version 1.4, 2016-01-17\n\n  * Fix NaN nomenclature: Screaming->Signaling\n  * Add
  an example to README.md\n\n### Version 1.3, 2015-04-11\n  \n  * Fix docs, github
  location\n\n### Version 1.2, 2015-04-11\n\n  * Fix the constant qnan values for
  SP/DP\n  * Add conversions from float/double. Much easier to use.\n  * Better handling
  of nan values.\n\n### Version 1.1, 2015-04-02\n  \n  * Clean-up the API, examples
  etc.\n\n### Version 1.0, 2015-04-01\n\n  * First implementation. Supports HP/SP/DP\n
  \   and signed/unsigned numbers in 8/16/32/64 bits.\n"
basic-deps:
  base: ==4.*
  reinterpret-cast: -any
  ieee754: -any
  FloatingHex: ! '>=0.4'
all-versions:
- '1.9'
- '2.0'
- '2.1'
- '2.2'
author: Levent Erkok
latest: '2.2'
description-type: markdown
description: ! "## CrackNum: Decode/Encode IEE754 Numbers\n\n[![Hackage version](http://img.shields.io/hackage/v/crackNum.svg?label=Hackage)](http://hackage.haskell.org/package/crackNum)\n[![Build
  Status](http://img.shields.io/travis/LeventErkok/crackNum.svg?label=Build)](http://travis-ci.org/LeventErkok/crackNum)\n\nCrackNum
  now comes with vim bindings, see http://github.com/LeventErkok/crackNum/blob/master/crackNum.vim\n\n###
  Command line options:\n\n    crackNum v2.2, (c) Levent Erkok. Released with a BSD3
  license.\n    Usage: crackNum precision bit/hex-pattern\n              --hp        16
  bit half     precision\n              --sp        32 bit single   precision\n              --dp
  \       64 bit double   precision\n              --sb         8 bit signed   byte\n
  \             --sw        16 bit signed   word\n              --sd        32 bit
  signed   double\n              --sq        64 bit signed   quad\n              --ub
  \        8 bit unsigned byte\n              --uw        16 bit unsigned word\n              --ud
  \       32 bit unsigned double\n              --uq        64 bit unsigned quad\n
  \             --toIEEE=n  Convert from decimal to IEEE SP/DP formats.\n      -l
  n    --lanes=n   number of lanes\n              --vim       output in vim friendly
  format\n      -h, -?  --help      print help, with examples\n      -v      --version
  \  print version info\n    \n    Examples:\n    \n       crackNum --hp fc00\n       crackNum
  --sp fc00 abcd\n       crackNum --dp fc00 abc1 2345 6789\n       crackNum --sp 01111111110000000000000000000000\n
  \      crackNum -l2 --hp 01111111110000000000000000000000\n       crackNum --sb
  7f\n       crackNum --sp --toIEEE=-2.3e6\n       crackNum --dp --toIEEE=max\n       crackNum
  --dp --toIEEE=ulp\n    \n    Notes:\n      - You can use hexadecimal or binary as
  input.\n      - You can use _,- or space as a digit to improve readability.\n      -
  You can give input for multiple lanes, we will guess the #of lanes for you.\n        Or,
  you can specify number of lanes with the -l option.\n      - For \"toIEEE\" option
  (case doesn't matter):\n            - You can enter a number in decimal notation
  (like 2.3)\n            - You can enter a number in hexadecimal notation (like 0x1.abcp+3)\n
  \           - OR, enter one of the following:\n                   * infinity, -infinity:
  Positive/Negative infinities\n                   * nan, snan, qnan: Not-A-Number;
  signaling/quiet\n                   * 0, -0: Both kinds of zeros\n                   *
  max : The maximum finite positive value\n                   * -max: The minimum
  finite negative value\n                   * min : The minimum normal positive value\n
  \                  * -min: The maximum normal negative value\n                   *
  epsilon: The smallest possible value x s.t. 1+x /= 1.\n                   * ulp:
  The minimum subnormal value\n\n### Example: Decoding single-precision numbers on
  two lanes\n\n    $ crackNum --sp fc00 abc1 7F80 0001\n    == Lane: 1 ==========================================\n
  \                     3  2          1         0\n                      1 09876543
  21098765432109876543210\n                      S ---E8--- ----------F23----------\n
  \             Binary: 1 11111000 00000001010101111000001\n                 Hex:
  FC00 ABC1\n           Precision: SP\n                Sign: Negative\n            Exponent:
  121 (Stored: 248, Bias: 127)\n           Hex-float: -0x1.015782p121\n               Value:
  -2.6723903e36 (NORMAL)\n    == Lane: 0 ==========================================\n
  \                     3  2          1         0\n                      1 09876543
  21098765432109876543210\n                      S ---E8--- ----------F23----------\n
  \             Binary: 0 11111111 00000000000000000000001\n                 Hex:
  7F80 0001\n           Precision: SP\n                Sign: Positive\n            Exponent:
  128 (Stored: 255, Bias: 127)\n           Hex-float: NaN (Signaling)\n               Value:
  NaN (Signaling)\n                Note: Representation for NaN's is not unique.\n\n###
  Example: Encoding a float as a IEEE754 single-precision bit-pattern\n\n    $ crackNum
  --sp --toIEEE=-2.3e6\n                  3  2          1         0\n                  1
  09876543 21098765432109876543210\n                  S ---E8--- ----------F23----------\n
  \         Binary: 1 10010100 00011000110000110000000\n             Hex: CA0C 6180\n
  \      Precision: SP\n            Sign: Negative\n        Exponent: 21 (Stored:
  148, Bias: 127)\n       Hex-float: -0x1.18c3p21\n           Value: -2300000.0 (NORMAL)\n"
license-name: BSD3
