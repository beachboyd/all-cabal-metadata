homepage: https://github.com/fosskers/crypto-classical
changelog-type: ''
hash: 1c1ce4db465ab6988a7ac04f93b59f67e112f7154e38d5f0a1344703016c09c1
test-bench-deps: {}
maintainer: colingw@gmail.com
synopsis: An educational tool for studying classical cryptography schemes.
changelog: ''
basic-deps:
  microlens-th: ! '>=0.2.1.1'
  bytestring: -any
  base: ! '>=4.7 && <4.9'
  text: ! '>=1.2.0.4'
  crypto-numbers: ! '>=0.2.7'
  random-shuffle: ! '>=0.0.4'
  containers: ! '>=0.5.5.1'
  crypto-random: -any
  transformers: ! '>=0.4.2.0'
  random: -any
  QuickCheck: ! '>=2.8.1'
  microlens: ! '>=0.2.0.0'
  modular-arithmetic: ! '>=1.2.0.0'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.2.0
author: Colin Woodbury
latest: 0.2.0
description-type: haddock
description: ! 'An educational tool for studying classical cryptography

  schemes. Do not encrypt anything of worth with this

  library.


  /Included Ciphers:/


  * Caesar


  * Affine (Linear)


  * Substitution


  * Stream


  * Vigenere


  * Enigma (Wehrmacht Enigma I)


  Thanks to polymorphism, we can generate keys and encrypt

  ByteStrings without worrying much about types:


  > > import Crypto.Classical

  > > import Lens.Micro

  > > :set -XOverloadedStrings

  > > (\k -> encrypt k "What a great day for an attack!" ^. enigma) . key <$> prng

  > "PXQS D KXSGB CFC AYK XJ DEGMON!"

  > > (\k -> encrypt k "What a great day for an attack!" ^. caesar) . key <$> prng

  > "RCVO V BMZVO YVT AJM VI VOOVXF!"'
license-name: BSD-3-Clause
