homepage: https://github.com/jgm/skylighting
changelog-type: markdown
hash: c4e3fa70218cc555305282692d84fe4fcf8930f485c4056a8688aa68b4581425
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  tasty-golden: -any
  Diff: -any
  text: -any
  filepath: -any
  criterion: ! '>=1.0 && <1.3'
  HUnit: -any
  containers: -any
  skylighting: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  pretty-show: -any
  random: -any
  tasty: -any
  QuickCheck: -any
  aeson: ! '>=1.0'
  directory: -any
maintainer: jgm@berkeley.edu
synopsis: syntax highlighting library
changelog: ! "# Revision history for skylighting\n\n## 0.5.1 -- 2018-01-07\n\n  *
  Fixed tokenizer exceptions (#31).  Previously `throwError`\n    did not actually
  generate `Left` results in `tokenize`,\n    because of the way the MonadPlus instance
  worked. Rewrote\n    the TokenizerM monad from scratch so that exceptions would\n
  \   not be skipped.\n\n  * Improved error message about undefined contexts.\n\n
  \ * Makefile: use cabal for bootstrap target.\n\n  * README: remove stack bootstrap
  instructions.\n    You can no longer bootstrap with stack, because it\n    insists
  on building ALL the executables the first time,\n    and of course that can't be
  done with this library.\n\n  * Use quickcheck for fuzz test.\n\n## 0.5.0.1 -- 2017-12-18\n\n
  \ * Small improvements to fuzz tests in test suite.  We now\n    ensure that we
  print the random text on test failure.  Also,\n    we now run the test with many
  smaller samples rather than\n    one big one.\n\n  * Add aeson lower bound (because
  of toEncoding) (#28).\n\n## 0.5 -- 2017-12-10\n\n  * Fix line spacing and overflowing
  content in generated HTML\n    (David Baynard, #25, see jgm/pandoc#4128).\n\n    +
  Fix empty line height, explicitly\n    + Ensure long lines scroll on screen\n    +
  Only apply colour to the outer div\n    + Don't reset line number colour\n    +
  Fix borders on empty code lines\n    + Collapse divs correctly.\n\n  * Changes to
  Style types and JSON instances.  Previously we could not\n    successfully round-trip
  through JSON.\n\n    + `tokenStyles` is now a map rather than an association list.\n
  \   + We now use `line-number-color` instead of `line-numbers` at\n      the top
  level in the JSON instances, falling back to\n      `line-numbers` in `editor-colors`,
  for KDE theme compatibility.\n    + We use `line-number-background-color` at the
  top level, falling\n      back to the text background color.\n    + We use `text-color`
  at the top level, falling back to the `text-color`\n      of the `Normal` token
  style if it exists, for KDE compatibility.\n    + We use `background-color` at the
  top level, falling back to\n      the `background-color` in `editor-colors`, for
  KDE compatibility.\n    + A round-trip JSON test has been added.\n\n## 0.4.4.1 --
  2017-11-27\n\n  * HTML formatting: fix color, bgcolor when numbering enabled.\n
  \   Previously, the code got the color and background color\n    the numbers were
  supposed to get.  See jgm/pandoc #4103.\n  * Updated syntax descriptions for bash,
  clojure, commonlisp, diff,\n    dockerfile, doxygen, doxygenlua, fsharp, hamlet,
  haskell, haxe,\n    java, javascript, julia, latex, literate-curry, literate-haskell,\n
  \   makefile, mediawiki, monobasic, ocaml, prolog, r, relaxng, scala,\n    sci,
  sql-mysql, sql-postgresql, sql, xslt.\n  * test program:  use --accept instead of
  --regen.\n\n## 0.4.4 -- 2017-11-21\n\n  * HTML formatter: always use an a element
  (rather than a div)\n    for source lines.  The divs were invalid, because code\n
  \   elements must contain phrasing content.  Previously we used\n    a elements
  when line anchors were called for, but there is\n    no clear reason not to use
  them always.\n  * skylighting binary: add doctype to generated HTML.\n\n## 0.4.3.2
  -- 2017-11-04\n\n  * Fixed regression in `data-line-number` attributes in HTML\n
  \   output.  We should not include the `lineIdPrefix` in\n    front of this.\n\n##
  0.4.3.1 -- 2017-11-03\n\n  * Fixed typo in css (Artymort).\n  * Fixed travis build
  times.\n\n## 0.4.3 --- 2017-11-02\n\n  * `FormatOptions`: added `lineIdPrefix` (jgm/pandoc#4031).\n
  \   This is needed because a web page may contain several\n    code samples, and
  we need to make sure that the ids on\n    lines are unique.\n  * HTML formatter:
  use `lineIdPrefix` in ids for lines.\n  * HTML formatter: Don't put href attributes
  on divs.\n\n## 0.4.2 --- 2017-10-26\n\n  * HTML output: remove outer div.  This
  prevented margin\n    collapsing between the pre and surrounding block elements,\n
  \   and often gave us excess white space around code blocks.\n    See jgm/pandoc#3996.\n\n##
  0.4.1 --- 2017-09-28\n\n  * Updated XML definitions from KDE repository.\n    Changed:
  actionscript, ada, agda, alert, alert_indent, asn1, awk, bash,\n    boo, c, changelog,
  clojure, cmake, coldfusion, commonlisp, cpp, cs, css,\n    curry, d, dockerfile,
  dot, doxygen, doxygenlua, eiffel, email, erlang,\n    fortran, fsharp, gcc, haskell,
  haxe, isocpp, java, javascript, jsp, julia,\n    lilypond, lua, m4, makefile, matlab,
  maxima, mips, modelines, modula-2,\n    monobasic, objectivec, objectivecpp, ocaml,
  octave, opencl, pascal, perl,\n    php, pike, postscript, prolog, purebasic, python,
  r, relaxng,\n    relaxngcompact, rest, rhtml, ruby, rust, scala, scheme, sci, sql-mysql,\n
  \   sql-postgresql, sql, tcl, tcsh, verilog, vhdl, xml, xslt, xul, zsh.\n  * Added
  support for powershell, using definition from KDE repository.\n  * Stop terminating
  long builds on TravisCI (Kyle Ondy).\n\n## 0.4 --- 2017-09-15\n\n  * Removed ToJSON/FromJSON
  instances for KeywordAttr,\n    WordSet, Matcher, Context, ContextSwitch, Rule,
  Syntax\n    (added in 0.3.5).  Creating these increased the memory\n    requirements
  for compiling skylighting to a degree not\n    justified by the usefulness of these
  instances.\n\n## 0.3.5 --- 2017-09-14\n\n  * Added ToJSON/FromJSON instances for
  all basic types.\n  * Added some background colors to 'kate' style, matching default.theme,\n
  \   and made FromJSON for Style sensitive to background-color.\n\n## 0.3.4.1 --
  2017-09-09\n\n  * HTML formatting: do not use `div` elements for source\n    lines
  in inline output.\n\n## 0.3.4 -- 2017-09-09\n\n  * HTML formatting changes (David
  Baynard).  Note that these\n    changes may require changes in hard-coded CSS that
  is\n    used with skylighting's HTML output.\n\n    + Wrap lines of source code
  in a `div` with `display` set to\n      `inline-block`.  The `div`s make per-line
  processing easier.\n      They cannot be set as `display: block` as that introduces
  extra\n      new lines when copying and pasting.\n    + Render line numbers in html
  using CSS pseudo elements rather than\n      a table.  The line numbers are always
  produced, as `data-line-number`\n      attributes, and css to display them as `::before`
  elements are\n      always produced. The option to switch on line numbering only\n
  \     toggles a class; this means it is possible to toggle line numbering\n      without
  re-running skylighting.\n    + If the `linkAnchors` option is set, wrap with an
  `a` element rather\n      than a `div`, set so that clicking the line number (and
  only the\n      line number) will jump to that line.\n    + Code wraps by default
  when html is printed, with wrapped lines\n      indented.\n\n## 0.3.3.1 -- 2017-06-26\n\n
  \ * Updated xml syntax definitions and clojure test.\n  * Improved 'make update-xml'
  target.\n  * Updated version bound for criterion.\n\n## 0.3.3 -- 2017-04-22\n\n
  \ * Revert change from 0.3.2; now entities from a DTD are\n    resolved if the DTD
  element is included.  This is needed\n    for agda.xml and some others.  If you
  want to use a custom\n    xml definition without needing language.dtd, just remove\n
  \   the reference to language.dtd in your xml file.\n  * Added `case` keyword for
  ats (Hanwen (Steinway) Wu).\n\n## 0.3.2 -- 2017-04-01\n\n  * Parse xml definitions
  without resolving entities from\n    language.dtd.  This allows xml definitions
  to be used even\n    when language.dtd isn't available.  Existing definitions\n
  \   don't rely on the two or three entities definied in\n    language.dtd, so this
  is harmless.\n  * Small optimizations.\n\n## 0.3.1 -- 2017-02-28\n\n  * Use handwritten
  parser for Float instead of regex.  Fixes\n    jgm/highlighting-kate#57 (again).\n
  \ * Added float parsing tests.\n  * Use parsec parsers, not regex, for CStringChar
  and CChar.\n  * Rewrote Int, Hex, Oct, CStringChar, CCHar parsers with parsec\n
  \   instead of regex.  This speeds things up.\n  * Don't include leading + in Int,
  Hex, Oct parsers.  That gives\n    bad results for things like `i+1`.\n\n## 0.3
  -- 2017-02-19\n\n  * Store literal binary-encoded representations of the Syntax\n
  \   structure in Skylighting.Syntax.*.hs, instead of the\n    structure itself.
  \ This works around a problem ghc has\n    compiling modules with large structures.
  \ This indirect method\n    produces faster compile times and avoids massive memory
  usage by\n    ghc (especially in profiling builds).  For background see\n    http://stackoverflow.com/questions/16348340/.
  \ Closes #7.\n  * Types: Internals of 'WordSet' are no longer exposed.\n\n## 0.2
  -- 2017-02-19\n\n  * Restore Data, Typeable, Generic instances for basic types.\n
  \   To do this, we remove reCompiled field from RE (API change).  Instead, we\n
  \   have the tokenizer compile regexes the first time it encounters them,\n    memoizing
  the results.  Performance is not significantly worse.\n  * Skylighting.Syntax.*:
  \ use string representation of the Syntax,\n    which is then 'read', rather than
  including the code for the data\n    structure directly (#7).  This indirect method
  produces faster compile\n    times and avoids massive memory usage by ghc (especially
  in profiling\n    builds).  For background see\n    http://stackoverflow.com/questions/16348340/compiling-very-large-constants-with-ghc\n
  \ * Use -fprof-auto-exported for profiling builds.\n  * Added benchmark for xml
  syntax definition parsing.\n  * Patched perl.xml (improperly escaped regex) (#8).\n
  \   This fixes a perl regex compilation error for regex patterns\n    with backslash
  as delimiter, e.g. m\\a\\.\n  * Add a flag to build with system pcre (Felix Yan).\n\n##
  0.1.1.5  -- 2017-02-03\n\n  * Avoid depending on a PrintfArg instance for Text (#5).\n
  \   This isn't provided in some older versions of the text library.\n    This change
  should allow the package to build on older platforms.\n\n## 0.1.1.4  -- 2017-01-31\n\n
  \ * Properly escape characters in subDynamic.\n    This fixes a problem that caused
  failures with\n\n        echo -e \"s\\0b\\0c\" | skylighting -s perl\n\n  * More
  efficient rewrite of char escaping for regexes.\n\n## 0.1.1.3  -- 2017-01-29\n\n
  \ * Increase test timeout to 6s.\n  * Avoid double {{}} in latex macros.\n  * Fixed
  problem compiling Format.LaTeX on older ghc versions (7.8.3)\n    that can't take
  a Text as PrintfArg.\n\n## 0.1.1.2  -- 2017-01-28\n\n  * Added much more extensive
  testing to ensure that tokenizers\n    don't hang or drop input.\n  * Fixed some
  issues with line-end and fallthrough context\n    handling.\n  * Fixed a bug in
  WordDetect handling which caused it to drop\n    input (#2).\n\n## 0.1.1.1  -- 2017-01-21\n\n
  \ * Optimized.  Speed is now comparable to highlighting-kate\n    and often better.\n
  \ * Added benchmarks.\n\n## 0.1.1    -- 2017-01-19\n\n  * Added breezeDark style,
  from breeze-dark.theme.\n  * Fixed performance bug in regex application (#1).  This
  gives a\n    significant speedup, especially for inputs with long lines.\n\n## 0.1.0.1
  \ -- 2016-12-23\n\n  * Fixed bug in LaTeX renderer (backslash in wrong position).\n\n##
  0.1.0.0  -- 2016-12-23\n\n  * Initial release\n\n"
basic-deps:
  bytestring: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5.0'
  base64-bytestring: -any
  text: -any
  filepath: -any
  containers: -any
  hxt: -any
  binary: -any
  utf8-string: -any
  skylighting: -any
  mtl: -any
  blaze-html: ! '>=0.5'
  pretty-show: -any
  attoparsec: -any
  regex-pcre-builtin: -any
  aeson: ! '>=1.0'
  safe: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.1.3'
- '0.1.1.4'
- '0.1.1.5'
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.3.1'
- '0.3.4'
- '0.3.4.1'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.3.1'
- '0.4.3.2'
- '0.4.4'
- '0.4.4.1'
- '0.5'
- '0.5.0.1'
- '0.5.1'
author: John MacFarlane
latest: '0.5.1'
description-type: markdown
description: ! "skylighting\n===========\n\n[![license](https://img.shields.io/badge/license-GPLv2+-brightgreen.svg)](https://www.gnu.org/licenses/gpl.html)\n[![travis
  build status](https://img.shields.io/travis/jgm/skylighting.svg)](https://travis-ci.org/jgm/skylighting)\n\nA
  Haskell syntax highlighting library with tokenizers derived\nfrom KDE XML syntax
  highlighting descriptions.\n\nA command-line highlighter, `skylighting`, is also
  provided.\n\nMotivation\n----------\n\nThis library is the successor to [highlighting-kate],
  which had\nsome problems that were difficult to resolve given its\narchitecture.\n\nIn
  highlighting-kate, the XML syntax descriptions were converted\ninto individual parsec
  parsers, which were then compiled.  This\nmade it difficult to handle IncludeRules
  properly without\ncircular imports.  There was also no way to load a syntax\ndescription
  dynamically.\n\nSkylighting, by contrast, parses the XML syntax descriptions\ninto
  Haskell data structures, which are then interpreted by\na \"tokenize\" function.
  \ IncludeRules can now be handled\nproperly, and users can add new syntax descriptions\ndynamically.
  \ It is also now possible to convert `.theme` files\ndirectly into styles.\n\nSkylighting
  is also faster than highlighting-kate, by a\nfactor of 3 in some cases.\n\nInstalling\n----------\n\nTo
  install the latest release from Hackage, do\n\n    stack install skylighting\nor\n\n
  \   cabal install skylighting\n\nIf you want the command-line tool, set the `executable`
  flag\nusing `--flag \"skylighting:executable\"` in stack or\n`-fexecutable` in cabal.\n\nThe
  release tarballs include generated files not present in this\nrepository.  Building
  from this repository is a two-step\nprocess.  In the first step we build a program,\n`skylighting-extract`,
  which reads XML syntax highlighting\ndefinitions from the `xml` directory and writes
  Haskell source\nfiles.  In the second we actually build the library.\n\nUsing cabal:\n\n
  \   cabal install -fbootstrap --disable-optimization\n    cabal run skylighting-extract
  -- xml/*.xml\n    cabal install -f-bootstrap\n\nCommand-line tool\n-----------------\n\nA
  command-line executable, `skylighting`, is installed if\nthe `executable` cabal
  flag is set in building.\n\nFor help, `skylighting --help`.\n\nAdding new syntaxes\n-------------------\n\nTo
  compile with additional syntaxes, simply add the syntax\ndefinition (XML) file to
  the `xml` directory and repeat the\nbootstrap build described above.\n\nNote that
  both the library and the executable can dynamically\nload syntax definitions, so
  you may not need to compile them\nin.\n\nLicense\n-------\n\nSkylighting is licensed
  under the GPL, because some of the xml\nsyntax descriptions from which its tokenizers
  are generated are\nGPL-licensed.\n\nReferences\n----------\n\nKate syntax highlighting
  documentation:\n<https://docs.kde.org/stable5/en/applications/katepart/highlight.html>\n\nKate
  highlighting definitions:\n<https://github.com/KDE/syntax-highlighting/tree/master/data/syntax>\n\n[highlighting-kate]:
  https://github.com/jgm/highlighting-kate\n\n"
license-name: GPL-2
