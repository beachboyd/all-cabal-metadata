homepage: https://github.com/gmalecha/skip-list#readme
changelog-type: markdown
hash: 88283e675b04120625c21388398b0fceb9b8a988d3fa2e023029073af5070c4d
test-bench-deps:
  base: -any
  criterion: -any
  skip-list: -any
  tasty-hunit: -any
  tasty: -any
maintainer: gmalecha@gmail.com
synopsis: An implementation of pure skip lists
changelog: ! '0.1.0.1

  ----

  * Bug fix for strictness annotation.


  0.1.0.0

  ----

  * Initial realease.'
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Gregory Malecha
latest: 0.1.0.1
description-type: markdown
description: ! "# skip-list\n\n[![Build Status](https://travis-ci.org/gmalecha/skip-list.svg?branch=master)](https://travis-ci.org/gmalecha/skip-list)\n\nSkip
  lists provide efficient *amortized* indexing deep into lists by\nbuilding an index
  that, essentially, converts the list into a balance\nbinary tree. See [the wikipedia
  entry on skip\nlists](https://en.wikipedia.org/wiki/Skip_list) for more information.\n\n##
  Performance\n\nYou can run the benchmarks using `stack bench`. The benchmark is
  the following:\n\n```haskell\nlet big = [0..1000] in\nbig == get (make big) <$>
  big\n```\n\n* For lists (`get = !!` and `make = id`)\n\n```\nbenchmarking all/!!\ntime
  \                864.6 μs   (858.1 μs .. 873.0 μs)\n                     0.999 R²
  \  (0.999 R² .. 1.000 R²)\nmean                 859.3 μs   (855.5 μs .. 864.3 μs)\nstd
  dev              14.76 μs   (11.86 μs .. 21.57 μs)\n```\n\n* For `SkipList` (`get
  = SL.lookup` and `make = SL.toSkipList 32`)\n\n```\nbenchmarking Quantities/SkipList<32>\ntime
  \                134.9 μs   (134.0 μs .. 135.7 μs)\n                     1.000 R²
  \  (0.999 R² .. 1.000 R²)\nmean                 134.0 μs   (133.6 μs .. 134.5 μs)\nstd
  dev              1.559 μs   (1.317 μs .. 1.958 μs)\n```"
license-name: MIT
