homepage: https://github.com/pcapriotti/pipes-core
changelog-type: ''
hash: 67c73daed0784814fc1d52f175a30e67cd8af2dcb8748497d21d9936f60ddd30
test-bench-deps: {}
maintainer: p.capriotti@gmail.com
synopsis: Compositional pipelines
changelog: ''
basic-deps:
  void: (==0.5.*)
  base: ! '>=4 && <5'
  monad-control: (==0.3.*)
  lifted-base: (==0.1.*)
  categories: (==1.0.*)
  transformers: (>=0.2 && <0.4)
all-versions:
- 0.0.1
- 0.1.0
author: Gabriel Gonzalez, Paolo Capriotti
latest: 0.1.0
description-type: haddock
description: ! 'This library offers an abstraction similar in scope to

  iteratees\/enumerators\/enumeratees, but with different characteristics and

  naming conventions.


  This package is a fork of the original pipes package by Gabriel Gonzalez.

  See <https://github.com/pcapriotti/pipes-core/wiki/pipes-core-vs-pipes> for a

  comparison between the two packages.


  Differences with traditional iteratees:


  * /Simpler semantics/: There is only one data type (''Pipe''), two basic

  primitives (''await'' and ''yield''), and only one way to compose ''Pipe''s

  (''>+>'').  In fact, (''>+>'') is just convenient syntax for the composition

  operator in ''Category''. Most pipes can be implemented just using the

  ''Monad'' instance and composition.


  * /Different naming conventions/: Enumeratees are called ''Pipe''s, Enumerators

  are ''Producer''s, and Iteratees are ''Consumer''s.  ''Producer''s and ''Consumer''s

  are just type synonyms for ''Pipe''s with either the input or output end

  closed.


  * /Pipes form a Category/: that means that composition is associative, and

  that there is an identity ''Pipe''.


  * /"Vertical" concatenation works on every ''Pipe''/: (''>>''), concatenates

  ''Pipe''s. Since everything is a ''Pipe'', you can use it to concatenate

  ''Producer''s, ''Consumer''s, and even intermediate ''Pipe'' stages.  Vertical

  concatenation can be combined with composition to create elaborate

  combinators, without the need of executing pipes in \"passes\" or resuming

  partially executed pipes.


  Check out "Control.Pipe" for a copious introduction (in the spirit of the

  @iterIO@ library), and "Control.Pipe.Combinators" for some basic combinators

  and ''Pipe'' examples.'
license-name: BSD-3-Clause
