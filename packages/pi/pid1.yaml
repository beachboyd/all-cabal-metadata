homepage: https://github.com/fpco/pid1#readme
changelog-type: markdown
hash: 89fb49d5451062f7a0ca40680cf7465d6e702cde8445406bb9a685c8e42dcf87
test-bench-deps: {}
maintainer: michael@snoyman.com
synopsis: Do signal handling and orphan reaping for Unix PID1 init processes
changelog: ! "## 0.1.2.0\n\n* Removes support for ',' separated list of environment
  variables\n  for `-e` command line option\n* Adds support for setting child processes
  wait timeout on SIGTERM or SIGINT\n\n## 0.1.1.0\n\n* Adds support for setuid and
  setguid when running command\n* Adds support for setting current directory when
  running command\n\n## 0.1.0.1\n\n* Turn off all RTS options\n\n## 0.1.0.0\n\n* Initial
  release\n"
basic-deps:
  pid1: -any
  unix: -any
  base: ! '>=4.6 && <5'
  process: ! '>=1.2'
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
author: Michael Snoyman
latest: 0.1.2.0
description-type: markdown
description: ! "## pid1\n\n[![Build Status](https://travis-ci.org/fpco/pid1.svg?branch=master)](https://travis-ci.org/fpco/pid1)\n\nDo
  signal handling and orphan reaping for Unix PID1 init processes.\n\nThis provides
  a Haskell library, and an executable based on that library, for\ninitializing signal
  handlers, spawning and child process, and reaping orphan\nprocesses. These are the
  responsibilities that must be fulfilled by the initial\nprocess in a Unix system,
  and in particular comes up when running Docker\ncontainers.\n\nThis library/executable
  will automatically detect if it is run as some process\nbesides PID1 and, if so,
  use a straightforward `exec` system call instead.\n\n__NOTE__ This package is decidedly
  _not_ portable, and will not work on\nWindows. If you have a use case where you
  think it makes sense to run on\nWindows, I'd be interested in hearing about it.\n\nFor
  a discussion on why this is useful, see [this\nrepo](https://github.com/snoyberg/docker-testing#readme).\n\n###
  Usage\n\n> pid1 [-e|--env ENV] [-u|--user USER] [-g|--group GROUP] [-w|--workdir
  DIR] [-t|--timeout TIMEOUT] COMMAND [ARG1 ARG2 ... ARGN]\n\nWhere:\n* `-e`, `--env`
  `ENV` - Override environment variable from given name=value\n  pair. Can be specified
  multiple times to set multiple environment variables.\n* `-u`, `--user` `USER` -
  The username the process will setuid before executing\n  COMMAND\n* `-g`, `--group`
  `GROUP` - The group name the process will setgid before\n  executing COMMAND\n*
  `-w`, `--workdir` `DIR` - chdir to `DIR` before executing COMMAND\n* `-t`, `--timeout`
  `TIMEOUT` - timeout (in seconds) to wait for all child processes to exit\n\nThe
  recommended use case for this executable is to embed it in a Docker image.\nAssuming
  you've placed it at `/sbin/pid1`, the two commonly recommended usages\nare:\n\n1.
  Override the entrypoint, either via `ENTRYPOINT` in your Dockerfile or\n   `--entrypoint`
  on the command line.\n\n   ```\n   docker run --rm --entrypoint /sbin/pid1 fpco/pid1
  ps\n   ```\n\n2. Add `/sbin/pid1` to the beginning of your command.\n\n   ```\n
  \  docker run --rm --entrypoint /usr/bin/env fpco/pid1 /sbin/pid1 ps\n   ```\n"
license-name: MIT
