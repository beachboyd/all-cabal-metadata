homepage: https://github.com/githubuser/pipes-ordered-zip#readme
changelog-type: markdown
hash: eb99c2093428511d94da0b558cc9e7e00cd8ee5cb479ec521764639e8bade41f
test-bench-deps:
  base: ! '>=4.12.0.0 && <4.13'
  pipes-ordered-zip: -any
  pipes: ! '>=4.3.9 && <4.4'
  foldl: ! '>=1.4.5 && <1.5'
maintainer: stephan_schiffels@mac.com
synopsis: merge two ordered Producers into a new Producer
changelog: |
  * Version 1.0.0.0:
      Initial commit with example, tests and haddock

  * Version 1.0.0.1: Added a note that input sequences have to be sorted.
basic-deps:
  base: ! '>=4.7 && <5'
  pipes: ! '>=4.3.9 && <4.4'
all-versions:
- 1.0.0.1
author: Stephan Schiffels
latest: 1.0.0.1
description-type: markdown
description: |
  # pipes-ordered-zip

  A function to tie together two sorted Haskell Iterators (Producers from the [pipes library](http://hackage.haskell.org/package/pipes)).

  Example:

      import Pipes (runEffect, (>->), each)
      import qualified Pipes.Prelude as P
      import Pipes.OrderedZip (orderedZip)

      main = do
          let a = each [1,3,4,6,8] -- has to be ordered
              b = each [2,3,4,5,8] -- has to be ordered
          let mergedProd = orderedZip compare a b
          _ <- runEffect $ mergedProd >-> P.print
          return ()

  prints:

      (Just 1,Nothing)
      (Nothing,Just 2)
      (Just 3,Just 3)
      (Just 4,Just 4)
      (Nothing,Just 5)
      (Just 6,Nothing)
      (Just 8,Just 8)
license-name: BSD-3-Clause
