homepage: https://github.com/ppelleti/pi-lcd
changelog-type: markdown
hash: 2b6d13420275cf3875305d84cc51cbcf5516eea0cacf8f66246f4759137fbd97
test-bench-deps: {}
maintainer: code@funwithsoftware.org
synopsis: Control an Adafruit character LCD and keypad kit on a Raspberry Pi
changelog: ! '<!-- -*- text -*- prevent Emacs from formatting ChangeLog incorrectly
  -->

  # Revision history for pi-lcd


  ## 0.1.1.0  -- 2017-04-27


  * Fix space leak


  * Mask async exceptions to make operations atomic.


  * Improved documentation.


  ## 0.1.0.0  -- 2017-02-17


  * First version. Released on an unsuspecting world.

'
basic-deps:
  bytestring: ! '>=0.10.0.2 && <0.11'
  unix: ! '>=2.7 && <2.8'
  base: ! '>=4.6 && <5'
  unordered-containers: ! '>=0.2.4 && <0.3'
  text: ! '>=1.1 && <1.3'
  clock: ! '>=0.7.2 && <0.8'
  pi-lcd: -any
  deepseq: ! '>=1.3 && <1.5'
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Patrick Pelletier
latest: 0.1.1.0
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/pi-lcd.svg)](https://hackage.haskell.org/package/pi-lcd)\n[![Build
  Status](https://travis-ci.org/ppelleti/pi-lcd.svg?branch=master)](https://travis-ci.org/ppelleti/pi-lcd)\n\nThis
  package allows using an\n[Adafruit character LCD and keypad kit][1] on a Raspberry
  Pi from\nHaskell.  The LCD+Keypad Kit has a 16x2 character LCD, an RGB LED\nbacklight,
  and five buttons.  It works on all models of Raspberry Pi,\nand plugs into the GPIO
  header.  It only uses the I²C pins on the\nheader.\n\nThis library automatically
  handles Unicode, using the LCD controller's\nbuilt-in characters where possible,
  and using the \"custom characters\"\nfeature, along with a [5x8 font][3] bundled
  with this package, to\nemulate Unicode characters which are not built-in.  The user
  of the\nlibrary can also define their own custom characters.\n\nEverything you need
  to use one of these LCDs is exposed in the\n`System.Hardware.PiLcd` module.  The
  submodules are only exposed\nbecause they might be useful to reuse for other types
  of hardware,\nsuch as if you are using an MCP23017 port expander or an HD44780\ndisplay
  controller in some other context.  But if you're using the\nAdafruit character LCD
  and keypad kit, all you need is\n`System.Hardware.PiLcd`.\n\nBefore using this package,
  you'll need to make sure that\n[I²C is enabled][2] on your Raspberry Pi, under \"Advanced
  Options\" in\n`raspi-config`.\n\nUsing `PiLcd` is as easy as:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport System.Hardware.PiLcd\n\nmain = do\n  lcd
  <- openPiLcd defaultLcdAddress defaultLcdOptions\n  updateDisplay lcd [\"Hello,\",
  \"World!\"]\n  setBacklightColor lcd Cyan\n  closePiLcd lcd\n```\n\nThere are additional
  examples in the `examples` directory.\n\nThis library is specifically designed to
  work with GHC 7.6.3 and up,\nand to not use Template Haskell, so it will work with
  the\nsystem-supplied version of GHC on Raspbian \"Jessie.\"  Just do\n`sudo apt-get
  install ghc cabal-install` and you're good to go.  (You\nshould also increase the
  swap space by editing `/etc/dphys-swapfile`.)\nThere are other ways to install more
  recent versions of GHC if you\nwant; see the [wiki page][5] for details.\n\nThis
  is a fairly early release, and there might be breaking changes in\nthe future.  Please
  contact me, by filing a GitHub issue, or by\n[email][4], if you have any feedback
  on the library.  I'd also be\ncurious to hear how the library is being used!\n\n[![LCD
  with Haskell logo](http://funwithsoftware.org/images/2017-Haskell-LCD-800px.jpg)](https://www.flickr.com/photos/107479024@N04/32593808450/)\n\n[1]:
  https://www.adafruit.com/categories/808\n[2]: https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c\n[3]:
  https://www.cl.cam.ac.uk/~mgk25/ucs-fonts.html\n[4]: http://funwithsoftware.org/contact.html\n[5]:
  https://wiki.haskell.org/Raspberry_Pi\n"
license-name: BSD-3-Clause
