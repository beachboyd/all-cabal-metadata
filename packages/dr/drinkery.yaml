homepage: https://github.com/fumieval/drinkery#readme
changelog-type: ''
hash: 0dfed34c58858d760d65c9c0a773416b9aef3310b4162e50c892a00b29717368
test-bench-deps:
  base: -any
  criterion: -any
  drinkery: -any
maintainer: fumiexcel@gmail.com
synopsis: Boozy streaming library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  mtl: -any
  transformers: -any
all-versions:
- '0'
author: Fumiaki Kinoshita
latest: '0'
description-type: markdown
description: ! "# drinkery\n\ndrinkery is a yet another stream processing library
  themed on liquors. While it\noffers a simple interface, it also tries to be as expressive
  as possible.\n\n## Producers\n\ndrinkery supports three types of producers: `Barman`,
  `Sommelier`, and `Tap`.\n\n`Barman r s` is a monad transformer to produce a stream
  of type `s`. It is good\nat interactively serving values.\n`topup :: s -> Barman
  r s m a` is the primary action.\nA barman can also accept requests from the downstream
  using `accept`.\n\n`Sommelier r` is a list-like backtracking monad (also known as
  ListT done right).\nIt is useful for sampling elements of containers with effects.\n`taste
  :: Foldable f => f s -> Sommelier r m s` samples elements in any `Foldable`\ncontainer.
  `inquire` to interact with the downstream.\n\n`Tap` is an endless producer. This
  can be connected to a 'Patron' or a 'Distiller'.\n\n`Barman` and `Sommelier` are
  converted to `Tap`\nby `runBarman` and `runSommelier` respectively.\n\n## Consumer\n\n`Patron
  r s` is a monad transformer which consumes `s` and may request `r`.\n\n`MonadDrink`
  provides the actions of `Patron`:\n\n* `drink :: m s` Get one element.\n* `spit
  :: s -> m ()` Leave one element.\n* `call :: r -> m ()` Send a request.\n\n`(+&)
  :: (Monoid r, CloseRequest r, Monad m) => Tap m r s -> Patron r s m a -> m a`\nconnects
  a tap with a patron.\n\n## Transducer\n\n`Distiller p q m r s` is a stream transducer
  which\n\n* Sends `p`\n* Consumes `q`\n* Receives `r`\n* Produces `s`\n\nIt is actually
  a `Tap` where the underlying monad is `Patron`.\n\nThere are three composition operators:\n\n*
  `$&` Distiller-patron\n* `$$$` Distiler-distiller\n* `++$` Tap-distiller\n\n`+`,
  `&`, and `$` means a tap, a patron, and a distiller respectively. The middle\ncharacters
  of these operators signify the resulting structures.\n\n## Why drinkery?\n\ndrinkery
  is designed to be fully featured and complements other libraries' missing\nfunctionalities.\n\n###
  pipes\n\n`pipes` is quite similar in that both `Proxy` and `Distiller` are bidirectional.\nStill
  there are some differences:\n\n* `Distiller` does not terminate.\n* Unlike pipes'
  `>->`, `$$$` propagates inner requests:\n    * `($$$) :: Monoid r => Distiller p
  q m r s -> Distiller r s m t u -> Distiller p q m t u`\n    * `(>->) :: Proxy a'
  a () b m r\t-> Proxy () b c' c m r -> Proxy a' a c' c m r`\n* `Patron`, the consumer
  monad, may leave unconsumed inputs.\n* `drinkery` has much fewer operators.\n\n###
  conduit\n\nBoth `drinkery` and `conduit` support leftovers, closing operation, and
  end of stream.\nThe main difference is interactivity.\n\n### machines\n\n`machines`
  has multi-channel consumers but `drinkery` doesn't.\n`machines` does not support
  leftovers, nor interactive producers.\n\n### iteratee\n\n`iteratee` has an ability
  to handle requests but those are untyped (`SomeException`).\n`drinkery` provides
  a more robust interface for handling requests.\nTwo monadic producers - `Barman`
  and `Sommelier` - are easier to use.\n"
license-name: BSD3
