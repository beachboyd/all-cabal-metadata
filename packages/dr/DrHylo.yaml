homepage: http://haskell.di.uminho.pt/wiki/DrHylo
changelog-type: ''
hash: 807c2a76b763c63fc3db1a7f9d6d1d34111121c1bf50148c6d4b3e95d88ac859
test-bench-deps: {}
maintainer: Hugo Pacheco <hpacheco@di.uminho.pt>
synopsis: A tool for deriving hylomorphisms
changelog: ''
basic-deps:
  base: ! '>=4'
  syb: -any
  array: ! '>=0.1'
  containers: -any
  haskell-src-exts: ==0.4.4.1
  pointless-haskell: -any
  mtl: -any
  pretty: ! '>=1.0'
all-versions:
- 0.0.1
- 0.0.2
author: Alcino Cunha <alcino@di.uminho.pt>, Hugo Pacheco <hpacheco@di.uminho.pt>
latest: 0.0.2
description-type: text
description: ! "DrHylo\n\nThis cabal package can be installed with:\n\n$ cabal install
  DrHylo\n\nFor a manual install, execute:\n\n$ runhaskell Setup.lhs configure\n$
  runhaskell Setup.lhs build\n$ runhaskell Setup.lhs install\n\nDrHylo derives point-free
  hylomorphisms from restricted Haskell syntax.\n\nUsage: DrHylo [OPTION...]\n  -o[FILE]
  \ --output[=FILE]  output FILE\n  -i[FILE]  --input[=FILE]   input FILE\n  -f        --fix
  \           use fixpoints instead of hylomorphisms\n  -w        --pointwise      do
  not convert to point-free\n  -O        --observable     generate observable hylomorphisms\n\nThe
  module Sample.hs defines some Haskell definitions that are compliant with the DrHylo
  supported syntax.\nAs an example, we can generate observable hylomorphisms for the
  functions frm Sample.hs into some file Out.hs:\n\n$ DrHylo -iSample.hs -oOut.hs
  -O\n\nThe resulting file Out.hs can be normally interpreted with GHC as long as
  we have the Pointless Haskell library installed.\n\n$ ghci Out.hs -fglasgow-exts
  -XUndecidableInstances\n\nSince we asked for observable hylomorphisms, we can inspect
  the recursion tree for hylomorphisms via GHood. Just make sure that you have the
  GHood library installed (available on Hackage). A sample execution is:\n\n> let
  four = Succ $ Succ $ Succ $ Succ Zero\n> runO $ print $ fact four\n\n\n\n"
license-name: BSD-3-Clause
