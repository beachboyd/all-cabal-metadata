homepage: ''
changelog-type: markdown
hash: 9a38f9caeffa8e70d17e0d19facc4a00b57f923c3bd5d7a457505e5d01ac1ae9
test-bench-deps: {}
maintainer: Christophe.Scholliers@UGent.be
synopsis: Haskell interface for controlling the mBot educational robot
changelog: ! "# Revision history for MBot\n\n## 0.1.0.0  -- YYYY-mm-dd\n\n* First
  version. Released on an unsuspecting world.\n\n# 0.1.2.0 \n\n* Rien Maertens contributed
  a function to play sound on the Mbot ! \n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <=4.11.1.0'
  hidapi: ! '>=0.1 && <0.2'
  mtl: ! '>=2.2 && <2.3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.4.1
author: Christophe Scholliers
latest: 0.2.4.1
description-type: markdown
description: ! "# MBot robot library\n\nWith this library it is possible to control
  the mBot robot from within Haskell over 2.4ghz wireless.\nThe mBot itself needs
  to contain the standard firmware otherwise the library will not behave as expected.
  \nThere is support for steering the motors and leds and for reading the linesensor
  and the ultrasonic sensor.\nAn small example program is shown below, for more information
  about the individual functions take a look at the api documentation below.\n\n```Haskell\nimport
  MBot\n\nmain =  do\n  putStrLn \"My first mBot program in Haskell !\"\n  -- Open
  the connection with the mMbot\n  d <- openMBot\n  putStrLn \"Opened a connection
  with the mBot\"\n  -- Turn on led 1 of the mBot and set the RGB value to (0,100,0)\n
  \ sendCommand d $ setRGB 1 0 100 0\n  putStrLn \"Look at all the pretty colors !\"\n
  \ -- Turn on led 2 of the mBot and set the RGB value to (100,0,0)\n  sendCommand
  d $ setRGB 2 100 0 0 \n  -- close the connection with the mBot \n  closeMBot d\n```\n"
license-name: GPL-3.0-only
