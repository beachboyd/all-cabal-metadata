homepage: https://github.com/caneroj1/mbtiles#readme
changelog-type: ''
hash: 763f23b6683dbc712490274dbce1d377ac0c3765926d0d7a3e102b8de1332c7b
test-bench-deps:
  base: -any
  HUnit: -any
  mbtiles: -any
maintainer: jmc41493@gmail.com
synopsis: Haskell MBTiles client.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  sqlite-simple: -any
  unordered-containers: -any
  text: -any
  monad-control: -any
  resource-pool: -any
  mtl: -any
  transformers: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.6.0.0
author: Joe Canero
latest: 0.6.0.0
description-type: markdown
description: ! "# mbtiles\n\nHaskell library for interfacing with MapBox [MBTiles](https://github.com/mapbox/mbtiles-spec)
  files.\n\nDocumentation available on [Hackage](https://hackage.haskell.org/package/mbtiles).\n\n##
  Functionality\n* Getting tiles by zoom, x, and y.\n* Writing new tiles by zoom,
  x, and y.\n* Updating existing tiles by zoom, x, and y.\n* Accessing metadata from
  the mbtiles file.\n\n## Basic Usage\n\nReading, writing, and updating tiles:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport qualified Data.ByteString.Lazy as BL\nimport
  \          Database.Mbtiles\n\nmain = do\n  let myData = \"myTileData\" :: BL.ByteString\n
  \ runMbtiles \"my/path/to/file.mbtiles\" $ do\n    maybeTileData <- getTile (Z 0)
  (X 0) (Y 0)\n    case maybeTileData of\n      Nothing  -> writeTile (Z 0) (X 0)
  (Y 0) myData\n      (Just d) -> updateTile (Z 0) (X 0) (Y 0) $ BL.init d\n```\n\nGetting
  metadata:\n\n```haskell\n\nimport Control.Monad.IO.Class\nimport Database.Mbtiles\n\nmain
  = do\n  runMbtiles \"my/path/to/file.mbtiles\" $ do\n    liftIO . print =<< getName\n
  \   liftIO . print =<< getType\n    liftIO . print =<< getFormat\n\n```\n\n## Future
  Work\n* Improve database error handling.\n* Investigate usage as a performant tile
  server.\n* Add tests."
license-name: BSD-3-Clause
