homepage: https://github.com/lehins/pvar#readme
changelog-type: markdown
hash: 11520d4847880d894e7e717192c6137494b7017aaca637e6711a59827c28e854
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  pvar: -any
  async: -any
  wide-word: -any
  deepseq: -any
  QuickCheck: -any
  genvalidity: -any
  primitive: -any
maintainer: alexey@kuleshevi.ch
synopsis: Mutable variable with primitive values
changelog: |
  # Changelog for pvar

  ## Unreleased changes
basic-deps:
  base: ! '>=4.7 && <5'
  deepseq: -any
  primitive: ! '>=0.3.1'
all-versions:
- 0.1.0.0
author: Alexey Kuleshevich
latest: 0.1.0.0
description-type: markdown
description: |
  # pvar

  Interface for a mutable veriable `PVar` that can hold values that have `Prim` instance.

  ## Status

  | Language | Travis | Azure | Coveralls |
  |:--------:|:------:|:-----:|:---------:|
  | ![GitHub top language](https://img.shields.io/github/languages/top/lehins/pvar.svg) | [![Travis](https://img.shields.io/travis/lehins/pvar/master.svg?label=Linux%20%26%20OS%20X)](https://travis-ci.org/lehins/pvar) | [![Build Status](https://dev.azure.com/kuleshevich/pvar/_apis/build/status/pvar?branchName=master)](https://dev.azure.com/kuleshevich/pvar/_build/latest?definitionId=1?branchName=master) | [![Coverage Status](https://coveralls.io/repos/github/lehins/pvar/badge.svg?branch=master)](https://coveralls.io/github/lehins/pvar?branch=master)

  |      Package       | Hackage | Nightly | LTS |
  |:-------------------|:-------:|:-------:|:---:|
  |  [`pvar`](https://github.com/lehins/pvar)| [![Hackage](https://img.shields.io/hackage/v/pvar.svg)](https://hackage.haskell.org/package/pvar)| [![Nightly](https://www.stackage.org/package/pvar/badge/nightly)](https://www.stackage.org/nightly/package/pvar)| [![Nightly](https://www.stackage.org/package/pvar/badge/lts)](https://www.stackage.org/lts/package/pvar)

  # Overview

  Main features include:

  * Perfomance. There is practically no overhead when compared to operating on pure values,
    wlthough there is a higher memory overhead, since `PVar` is backed by a
    `MutableByteArray#`
  * Atomic operations for `PVar`s with `Int` values. This includes a unique
    `atomicModifyIntPVar :: PrimMonad m => PVar (PrimState m) Int -> (Int -> (Int, a)) -> m a`
    function that is not availiable in `ghc-prim` out of the box.
  * Works in `PrimMonad`, therfore usable with `ST`, `IO` and various transformer monads.
  * Easy access to `PVar` contents with `Storable`
license-name: BSD-3-Clause
