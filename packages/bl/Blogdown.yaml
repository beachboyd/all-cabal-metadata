homepage: https://blogdown.io
changelog-type: markdown
hash: ca09d385ec2552ea464ffa8e771fcae8026cb91d2cc2a599b0968223153aa6eb
test-bench-deps:
  MissingH: ==1.4.*
  base: ! '>=4.9 && <5'
  criterion: ! '>=1.1 && <1.2'
  parsec: ==3.1.*
  containers: ==0.5.*
  network-uri: ==2.6.*
maintainer: acbecker@uchicago.edu
synopsis: A markdown-like markup language designed for blog posts
changelog: ! '# Revision history for Blogdown


  ### 0.2.4 -- 2018-02-04


  * Fix parsing blank lines in blockquotes.


  ### 0.2.3 -- 2017-10-24


  * Fix potential XSS vulnerability.


  ### 0.2.2 -- 2017-05-21


  * Add missing other-modules.


  ### 0.2.1 -- 2017-05-21


  * Fix cabal build.

  * Fix benchmarks.


  ## 0.2.0 -- 2017-05-21


  * Add image support.

  * Add nested list support.

  * Allow implicit link hrefs.

  * Support HTML bleaching.

  * Abort parsing script or style tags unless --allow-unsafe-tags is passed.

  * Build assets at compile time instead of accessing them at run time.


  ### 0.1.1 -- 2017-04-10


  * Allow overriding the directory for assets via environment variable.

  * Bug fix in footnote parsing.

  * Update Readme.md and make it display on Hackage correctly.


  ## 0.1.0  -- 2017-04-02


  * Released as a Cabal package.

'
basic-deps:
  MissingH: ==1.4.*
  base: ! '>=4.9 && <5'
  parsec: ==3.1.*
  containers: ==0.5.*
  network-uri: ==2.6.*
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Alex Becker
latest: 0.2.4
description-type: markdown
description: ! "*Note: If you are viewing this Readme on GitHub, its Blogdown-specific
  features will not render correctly.\nThe Blogdown-formatted output is in `test/goldens/Readme.html`.*\n\n#
  [Blogdown](https://blogdown.io)\n\nBlogdown is a markup language based on Markdown,
  designed for writing blog posts.\nBlogdown's goals are:\n * Clean syntax for common
  blog post features absent from Markdown.\n * Ability to handle untrusted input.\n
  * Simple syntax, with no surprises.\n * Debuggability.\n * Near compatibility with
  common Markdown implementations.\n\nBecause there is no Markdown standard and existing
  Markdown implementations\n[disagree wildly even on simple cases](http://johnmacfarlane.net/babelmark2/?text=Hello+world%0A*+this+is+a+list%0A%3E+this+is+a+quote),\nBlogdown
  cannot be 100% compatible with even a majority of Markdown implementations.\nWhile
  there have been attemps to create a common Markdown standard--most notably [CommonMark](http://commonmark.org/)--they\nare
  necessarily quite complex. The primary cause of this complexity is that Markdown
  insists on rendering *something* for every input,\nno matter how malformed. Blogdown
  is considerably simpler, and hopefully easier for authors to debug, because it fails
  on malformed inputs.\nWith full compatibility out of the window, I have chosen to
  make some other small improvements on Markdown syntax.\n\n## Installation\n\n###
  With Cabal or Stack\n\nThe recommended way to install any Haskell project is using
  [Cabal](https://www.haskell.org/cabal/) or [Stack](https://docs.haskellstack.org/en/stable/README/).\nWith
  these tools, you can simply run `cabal install` or `stack build` respectively.\n\n###
  Without Haskell Tooling\n\nBecause configuring Cabal and Stack can be tricky for
  Haskell beginners, Blogdown supports installation without any Haskell tooling.\n\nFirst,
  install [GHC](https://www.haskell.org/ghc/), [Parsec](https://hackage.haskell.org/package/parsec)
  and [MissingH](https://hackage.haskell.org/package/MissingH),\nall of which are
  available through common Linux package managers.\nTo compile static assets into
  Haskell files, run `ghci Setup.hs` and manually invoke `compileStaticFiles`.\nThen
  run `ghc -isrc -iassets -o Blogdown src/Blogdown.hs` in the repository's base directory.\n\n##
  Usage\n\nThe `Blogdown` binary reads from `stdin` and writes to `stdout`. Typical
  usage looks like:\n\n    cat blogpost.md | ./Blogdown > blogpost.html\n\nIf using
  `Blogdown` to process untrusted input for display in a web page, you **must** use
  the `--allowed-tags` and `--allowed-attributes` flags.\n\n### Optional Styling and
  Scripts\n\nIt is recommended to include `footnotes.css` and `footnotes.js` on any
  pages which make use of Blogdown-generated footnotes,\nwhich improve the appearance
  of footnotes and allow them to be shown inline.\nThese can be inlined using the
  `--inline-css` and `--inline-js` flags respectively^[inline].\n\n### Optional Flags\n\n`Blogdown`
  accepts the following long-style flags:\n * `--allowed-tags`: Specifies a comma-separated
  list of HTML tags which should be\nrendered faithfully. All other tags are escaped,
  e.g. `<a>` becomes `&amp;lt;a&amp;gt;`.\nIf no list is supplied, all tags are escaped.\n
  * `--allowed-attributes`: Specifies a comma-separated list of HTML attributes which\nshould
  be rendered faithfully. Any other attributes will be stripped from tags when\nthey
  are rendered. If no list is supplied, all attributes are stripped.\n * `--allow-unsafe-tags`:
  By default, Blogdown will fail when it encounters a `<script>`\nor a `<style>` tag,
  because there are certain corner cases it cannot parse correctly,\ne.g. `<script>\"</script>\"evil()\"<script>\"</script>`.
  However, these are unlikely on\nnon-malicious input, so this flag can be passed
  to attempt parsing these tags.\n * `--em-dashes`: If this flag is passed, `--` will
  be replaced with \"&mdash;\" in text.\n * `--footnote-backlinks`: If this flag is
  passed, footnotes will be preceded by a caret linking back to the point where the
  footnote is referenced.\n * `--footnote-index-from`: The index from which footnotes
  are numbered. Defaults to 0.\n * `--footnote-prefix`: Defines a prefix for the `id`s
  of footnotes. Recommended if multiple output files are included in a single HTML
  page, to avoid `id` collisions.\n * `--inline-css`: If this flag is passed, the
  recommended CSS will be inlined at the end of the output document.\n * `--inline-js`:
  If this flag is passed, the recommended JS will be inlined at the end of the output
  document.\n\n## Syntax\n\n### Differences from Markdown\n\nMost of the syntax of
  Blogdown should be familiar to Markdown users, but some new syntax has been added,
  and some existing syntax has changed.\n\n#### New Features\n\nBlogdown adds footnote
  support to Markdown.\nFootnotes can be referenced inline with \\^\\[*footnote-name*\\],
  which will render as a superscript link to a *footnote-definition*\nat the end of
  the document, which is defined by \\~\\[*footnote-name*\\] followed by the footnote
  contents.\n\n#### Markdown Incompatibilities\n\nBlogdown does not support the Markdown
  syntax of underlining text with `=` or `-` characters to define a header,\nas this
  comes at a large cost in the parser implementation^[underline-parser-complexity].\nThe
  `#` syntax for headers is supported instead.\n\nIt also does not support using multiple
  trailing spaces to force a breakpoint at the end of a line.\nThe `<br/>` tag is
  supported instead.\n\nWhile tables are not a feature of base Markdown, some common
  Markdown implementations\nsuch as [Github Flavored Markdown](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)\nsupport
  them. Blogdown also supports tables, but its implementation is slightly different\nfrom
  Github's, requiring `|` characters at the start and end of a row and using `+`\ninstead
  of `|` in the separator between the (optional) table header and table body.\n\nSince
  Blogdown introduces new syntax, some valid Markdown will require escaping to render
  as expected in Blogdown.\nAdditionally, while most Markdown implementations do not
  require escaping many special characters when their special meaning would\nnot be
  valid, Blogdown always requires they be escaped.\n\n### HTML Embedding\n\nLike most
  Markdown implementations, Blogdown documents can have HTML embedded inside them.\nHowever,
  Blogdown allows only a limited subset of HTML, specifically\n[XHTML](https://www.w3.org/TR/xhtml1),\nwith
  the exceptions that unknown tags are permitted, and that any tag\nis allowed to
  be self-closing^[arbitrary-tags].\nBy default Blogdown will not allow `<script>`
  or `<style>` tags, since parsing\nfor these is very complex and not fully implemented.
  However, when parsing trusted\ncontent it is generally safe to use `--allow-unsafe-tags`
  to attempt to allow\nthese anyway.\n\nNote also that any content within an HTML
  node is rendered verbatim, so Blogdown features\ncannot be used inside HTML nodes.\n\n####
  HTML Bleaching\n\nIf using Blogdown to parse *untrusted* content (such as comments
  on a blog),\nthe `--allowed-tags` and `--allowed-attributes` flags **must** be used
  to restrict what\nHTML can be rendered in the output. Generally these flags should
  be used without\nwithout arguments, bleaching all HTML. If you must allow some HTML,
  you should only\nallow tags and attributes which are necessary for your use case
  and which you understand\nthe security implications of.\n\nThe `--allow-unsafe-tags`
  **must not** with untrusted content.\n\n### Formal Description\n\nThe body of a
  Blogdown document consists of a sequence of *block nodes*, which in turn consist
  of *inline nodes*.\n\n#### Block Nodes\n\nBlock nodes can contain any sequence of
  inline nodes, with the exception of code and HTML blocks, whose contents are rendered
  verbatim.\nBlock nodes can span multiple lines and are terminated by a blank line,
  the beginning of another type of block, or the end of the document.\n\nThe following
  block node types are supported:\n * **Paragraph**: The default block type; any content
  not in another block is part of a paragraph.\nParagraphs must be separated by a
  blank line.\nCan contain arbitrary inline nodes.\n * **Header**: 1-6 `#` characters
  at the beginning of a line begins a header, with the number of `#` characters determining
  the header level.\nCan contain arbitrary inline nodes.\n * **Ordered Lists**: A
  ` - ` begins an ordered list item, which itself is a block.\nSequential ordered
  list items or sublists form an ordered list.\nList items can contain arbitrary inline
  nodes.\n  - Sublists are created when list items begin with one more space than
  their parent list, and can be ordered or unordered.\nFor example, this sublist begins
  with `  - `.\n * **Unordered Lists**: A ` * ` begins an unordered list item, which
  itself is a block.\nSequential unordered list items or sublists form an unordered
  list.\nList items can contain arbitrary inline nodes.\n  * Sublists are created
  when list items begin with one more space than their parent list, and can be ordered
  or unordered.\nFor example, this sublist begins with `  * `.\n * **Blockquote**:
  Lines beginning with `> ` define a blockquote.\nCan contain arbitrary inline nodes.\nNote
  that the first line not beginning with `> ` will start a new block.\n * **Code Block**:
  Lines indented with 4+ spaces or a tab define a code block.\nCode blocks are rendered
  verbatim, ignoring special characters.\nNote that the first un-indented line will
  start a new block.\n * **Code Block (GitHub style)**: A line consisting of `\\`\\`\\``
  followed by an optional class name will also start a code block, which is ended
  by a line consisting of `\\`\\`\\``. The class name will be added to the `code`
  tag (unless disallowed by `--allowed-attributes`) and is intended to support code
  highlighting libraries.\n * **HTML Block**: An HTML tag at the beginning of a line
  starts an HTML block.\nIts contents must be valid HTML, and it is ended by the corresponding
  closing tag.\nHTML blocks are rendered verbatim, unless HTML bleaching is enabled.\n
  * **Hard Rule**: A line consisting of 3+ `-` defines a hard rule.\n * **Table**:
  A `|`character at the beginning of a line begins a table row, consisting of table
  cells separated by `|` characters.\nThe cells are themselves blocks, and as such
  can contain newlines. The rows are terminated by a `|` followed by a newline.\nBy
  default the table has only a body, but if rows are separated by an alternating string
  of `+` and multiple `-` characters,\ne.g. `+---+---+`, then every row above the
  separator will be in the header and every row below will be in the body.\nOptionally
  the table may start and end with such a separator as well.\n\n#### Inline Nodes\n\nInline
  nodes can generally contain a sequence of other inline nodes, but cannot contain
  nodes of the same type.\nDespite the name, inline nodes can span multiple lines,
  e.g. to accommodate line length limits.\n\nThe following inline node types are supported:\n
  * **Plaintext**: The default inline type; any text not in another inline node is
  plaintext. Rendered verbatim.\n * **Italic**: Surrounding text with `*` *italicizes*
  it. Italic nodes can contain any other type of inline node.\n * **Bold**: Surrounding
  text with `**` **bolds** it. Bold nodes can contain any other type of inline node.\n
  * **Code**: Surrounding text with `\\`` renders it as `code`. The content is rendered
  verbatim.\n * **Link**: A [link](#) is written as \\[*text*\\](*href*). The *text*
  can contain any other type of inline node.\nNote that the (*href*) portion can be
  omitted entirely if *text* is a valid absolute URI (including scheme).\nThe *href*
  portion is the link destination, and is parsed verbatim except that any literal
  `(` or `)` must be escaped.\n * **Image**: A image is written as \\!\\[*alt*\\](*src*).
  The *alt* and *src* values are parsed verbatim except that any literal\n`[` or `]`
  in the *alt* value and `(` or `)` in the *src* value must be escaped.\n * **Footnote
  Reference**: Writing \\^\\[*footnote-name*\\] defines a footnote reference.\nIt
  is rendered as a superscript footnote number^[footnote-numbering], and links to
  the footnote named *footnote-name*\nif it is present in the footer.\n\n#### Footer\n\nA
  Blogdown document may optionally include a footer after the body.\nThe footer consists
  of a sequence of *footnote definitions*, each of which begins on a new line with
  \\~\\[*footnote-name*\\] and consists of an arbitrary sequence of blocks.\nA footnote
  definition is only terminated by another footnote definition or the end of the document.\n\n###
  Escaping\n\nAny character (special or not) can be escaped with `\\\\`. For a literal
  backslash, use `\\\\\\\\`.\nA backslash before a newline acts as a continuation
  character.\n\n## Planned improvements\n * Better error messages on parse failures\n
  * Windows support\n * Comments\n\n~[inline] Inlining CSS and JS is not recommended
  if you will be rendering multiple Blogdown documents on a single page, e.g. multiple
  blog posts on a blog.\nDoing so will degrade network and browser performance slightly.\n\n~[underline-parser-complexity]
  Supporting underlines for headers requires the parser to look-ahead arbitrarily
  far, resulting in quadratic time complexity.\n\n~[arbitrary-tags] Arbitrary tags
  are allowed for ease of implementation,\nalthough they are also potentially useful,
  e.g. for Angular support.\n\n~[footnote-numbering] Footnotes are auto-numbered in
  order of appearance, starting from 0 by default (this can be changed by passing
  the `--footnote-index-from` flag).\n"
license-name: AGPL-3.0-only
