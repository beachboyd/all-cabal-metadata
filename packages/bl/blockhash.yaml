homepage: https://github.com/kseo/blockhash#readme
changelog-type: ''
hash: 72a1b500453fbf933b12362e4077f8be87095848cc7696de9543ecc16bb69836
test-bench-deps:
  base: -any
  blockhash: -any
maintainer: kwangyul.seo@gmail.com
synopsis: Blockhash perceptual image hash algorithm
changelog: ''
basic-deps:
  JuicyPixels: ! '>=3.2 && <3.3'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.7 && <5'
  blockhash: -any
  vector-algorithms: ! '>=0.7 && <0.8'
  optparse-applicative: ! '>=0.12 && <0.13'
  primitive: ! '>=0.6 && <0.7'
  vector: ==0.11.*
all-versions:
- 0.1.0.0
author: Kwang Yul Seo
latest: 0.1.0.0
description-type: markdown
description: ! "blockhash [![Build Status](https://travis-ci.org/kseo/blockhash.svg?branch=master)](https://travis-ci.org/kseo/blockhash)\n=========\n\nThis
  is a perceptual image hash calculation tool based on algorithm descibed in\nBlock
  Mean Value Based Image Perceptual Hashing by Bian Yang, Fan Gu and Xiamu Niu.\nVisit
  [the website][blockhash] for further information.\n\n[blockhash]: http://blockhash.io/\n\n##
  Program\n\n```\nUsage: blockhash [-q|--quick] [-b|--bits ARG] filenames\n  blockhash\n\nAvailable
  options:\n  -h,--help                Show this help text\n  -q,--quick               Use
  quick hashing method\n  -b,--bits ARG            Create hash of size N^2 bits.\n```\n\n##
  Library\n\nThe example code below uses [JuicyPixels][JuicyPixels] to load images
  and prints\nthe hash to stdout.\n\n```haskell\nimport qualified Codec.Picture as
  P\nimport Data.Blockhash\nimport qualified Data.Vector.Generic as VG\nimport qualified
  Data.Vector.Unboxed as V\n\nprintHash :: FilePath -> IO ()\nprintHash :: filename
  = do\n  res <- P.readImage filename\n  case res of\n    Left err -> putStrLn (\"Fail
  to read: \" ++ filename)\n    Right dynamicImage -> do\n      let rgbaImage = P.convertRGBA8
  dynamicImage\n          pixels = VG.convert (P.imageData rgbaImage)\n          image
  = Image { imagePixels = pixels\n                        , imageWidth = P.imageWidth
  rgbaImage\n                        , imageHeight = P.imageHeight rgbaImage }\n          hash
  = blockhash image 16 Precise\n      putStrLn (show hash)\n```\n\n[JuicyPixels]:
  https://hackage.haskell.org/package/JuicyPixels-3.2.7.2\n"
license-name: BSD-3-Clause
