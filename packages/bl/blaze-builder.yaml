homepage: http://github.com/lpsmith/blaze-builder
changelog-type: text
hash: f55a815b27427f159c6cff072aa9ad54450d9128a853b75b529aeabcd90f1fd9
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: -any
  text: -any
  test-framework-quickcheck2: -any
  HUnit: -any
  blaze-builder: -any
  utf8-string: -any
  QuickCheck: -any
maintainer: Leon Smith <leon@melding-monads.com>
synopsis: Efficient buffered output.
changelog: ! "* 0.4.0.2\n  - Fixed warnings on GHC 7.10,  courtesy of Mikhail Glushenkov.\n\n*
  0.4.0.1\n  - Tightened the version constraints on the bytestring package for GHC
  7.8\n\n* 0.4.0.0\n  - This is now a compatibility shim for the new bytestring builder.
  \ Most\n    of the old internal modules are gone.   See this blog post for more\n
  \   information:\n\n    <http://blog.melding-monads.com/2015/02/12/announcing-blaze-builder-0-4/>\n\n
  \ - The 'Blaze.ByteString.Builder.Html.Utf8.fromHtmlEscaped*' functions now\n    strip
  out any ASCII control characters present in their inputs.  See\n    <https://github.com/lpsmith/blaze-builder/issues/1>
  for more\n    information.\n\n* 0.3.3.0\n  - exposed the 'Buffer' constructor to
  enable keeping around a pool of\n    buffers.\n\n* 0.3.2.0\n  - added 'writeToByteString'
  to construct a strict bytestring in a single\n    step. We can actually view 'Write's
  as strict-bytestring builders.\n\n* 0.3.1.1\n  - Changed imports of Foreign.Unsafe
  to make it GHC 7.8 compatible\n  - -Wall clean on GHC 7.0 - 7.6\n\n* 0.3.1.0\n  -
  Widened dependencies on text and bytestring\n\n* 0.3.0.1\n\n  - Fix build warning
  in Blaze.ByteString.Builder.Word\n    (contributed by Greg Weber)\n\n* 0.3.0.1\n\n
  \ - Remove comparison to the 'text' library encoding functions of\n    'Blaze.Builder.Char.Utf8.fromText'
  and\n    'Blaze.Builder.Char.Utf8.fromLazyText'. Bryan O'Sullivan reported that
  on\n    his 64-bit system with GHC 7.0.3 the 'text' library is 5x faster than the\n
  \   'blaze-builder' library.\n\n* 0.3.0.0\n\n  - Renamings in internal modules:
  WriteIO -> Poke and associated functions.\n\n* 0.2.1.4\n\n  - Fixed bug: appending
  to 'chunkedTransferEncoding somebuilder' also encoded\n    the appended builder,
  which is obviously wrong.\n\n* 0.2.1.3\n\n  - Fixed bug: 'chunkedTransferTerminator'
  is now correctly set to \"0\\r\\n\\r\\n\".\n\n* 0.2.1.2\n\n  - Add 'MonoPatBinds'
  language extension to all relevant files to solve the\n    issues caused by GHC
  bug http://hackage.haskell.org/trac/ghc/ticket/4498\n\n* 0.2.1.1\n\n  - Reexport
  'Write' datatype and 'fromWriteList', 'fromWriteSingleton',\n    'fromWrite' functions
  together with writes and builders for storables.\n  - Add 'MonoPatBinds' language
  extension to (hopefully) solve the issues\n    caused by GHC bug http://hackage.haskell.org/trac/ghc/ticket/4498\n\n*
  0.2.1.0\n\n  Incorporated several design changes:\n    - Writable buffer range is
  now represented in a packed form. This improves\n      speed slightly, as less currying
  is used.\n    - Writes are abstracted such that their internal representation can
  be\n      exchanged without breaking other library code.\n    - Writes are represented
  in a form that allows for efficient monoid\n      instances for branching code like
  UTF-8 encoding. For single character\n      encoding this results currently in a
  slight slowdown due to GHC not\n      recognizing the strictness of the returned
  value. This will be fixed in\n      the future.\n    - BuildSteps support returning
  a result in `Done`, which enables to\n      implement a `Put` monad using CPS.\n
  \   - chunked list writes were removed, as they result in worse performance\n      when
  writing non-trivial lists. (cf. benchmarks)\n    - An internal buffering abstraction
  is introduced, which is used both\n      by the adaption of the `binary` package,
  as well as by the\n      `blaze-builder-enumeratee` package, to execute puts and
  builders.\n      It will be used later also by the execution functions of the\n
  \     `blaze-builder` package.\n\n  Implemented new functionality\n    - `Blaze.ByteString.Builder.HTTP`
  provides a builder transformer for\n       doing in-buffer chunked HTTP encoding
  of an arbitary other builder.\n    - `Blaze.ByteString.Builder.Char8` provides functions
  to serialize the\n       lower 8-bits of characters similiar to what `Data.ByteString.Char8`\n
  \      provides for bytestrings.\n\n* 0.2.0.3\n\n  Loosen 'text' dependency to '>=
  0.10 && < 0.12'\n\n* 0.2.0.2\n\n  Fixed bug: use &#39; instead of &apos; for HTML
  escaping '\n\n* 0.2.0.1\n\n  Added a missing benchmark file.\n\n* blaze-builder-0.2.0.0\n\n
  \ Heavily restructured 'blaze-builder' such that 'Blaze.ByteString.Builder' serves
  as\n  a drop-in replacement of 'binary:Data.Binary.Builder' which it improves upon\n
  \ with respect to both speed as well as expressivity. See the documentation and\n
  \ the benchmarks for details on improvements and new functionality.\n\n  Changed
  module structure:\n    Blaze.ByteString.Builder.Core -> Blaze.ByteString.Builder\n
  \   Blaze.ByteString.Builder.Utf8 -> Blaze.ByteString.Builder.Char.Utf8\n    Blaze.ByteString.Builder.Html
  -> Blaze.ByteString.Builder.Html.Utf8\n\n  Changed function names:\n    writeByte
  \    -> writeWord8\n    fromByte      -> fromWord8\n    fromWriteList -> fromWrite1List\n\n
  \ Possibly performance sensitive implementation changes:\n    - 'fromByteString'
  and 'fromLazyByteString' check now if a direct insertion\n      of the bytestring(s)
  would be cheaper than copying it. See their\n      documentation on how to recover
  the old behaviour.\n\n  Deprecated functions:\n    'empty'    : use 'mempty' instead\n
  \   'singleton': use 'fromWord8' instead\n    'append'   : use 'mappend' instead\n\n\n*
  blaze-builder-0.1\n\n  This is the first version of 'blaze-builder'. It is explicitely
  targeted at\n  fast generation of UTF-8 encoded HTML documents in the 'blaze-html'
  and the\n  'hamlet' HTML templating libraries.\n"
basic-deps:
  bytestring: ! '>=0.10.4 && <1.0'
  base: ==4.* && <4.11
  text: ! '>=0.10 && <1.3'
  deepseq: -any
all-versions:
- '0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.1.2'
- '0.2.1.3'
- '0.2.1.4'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.2.0'
- '0.3.3.0'
- '0.3.3.1'
- '0.3.3.2'
- '0.3.3.3'
- '0.3.3.4'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
author: Jasper Van der Jeugt, Simon Meier, Leon P Smith
latest: '0.4.0.2'
description-type: markdown
description: ! "blaze-builder\n=============\n\n[![Continuous Integration status][status-png]][status]\n[![Hackage
  page (downloads and API reference)][hackage-png]][hackage]\n\nThis library allows
  to efficiently serialize Haskell values to lazy bytestrings\nwith a large average
  chunk size. The large average chunk size allows to make\ngood use of cache prefetching
  in later processing steps (e.g. compression) and\nreduces the system call overhead
  when writing the resulting lazy bytestring to a\nfile or sending it over the network.\n\nThis
  library was inspired by the module Data.Binary.Builder provided by the\nbinary package.
  It was originally developed with the specific needs of the\nblaze-html package in
  mind. Since then it has been restructured to serve as a\ndrop-in replacement for
  Data.Binary.Builder, which it improves upon both in\nspeed as well as expressivity.\n\nTo
  see the improvements in speed, run the throughput benchmark, which measures\nserialization
  speeds for writing Word8, Word16, Word32 and Word64 in different\nendian formats
  and different chunk sizes, using the command\n\n  make bench-throughput\n\nor run
  the list serialization comparison benchmark\n\n  make bench-blaze-vs-binary\n\nCheckout
  the combinators in the module \"Blaze.ByteString.Builder.Write\" to see\nthe improvements
  in expressivity. This module allows to incorporate efficient\nprimitive buffer manipulations
  as parts of a builder. We use this facility\nin the 'blaze-html' HTML templating
  library to allow for the efficient\nserialization of HTML escaped and UTF-8 encoded
  characters.\n\n [status-png]: https://api.travis-ci.org/lpsmith/blaze-builder.svg\n
  [status]: http://travis-ci.org/lpsmith/blaze-builder?branch=master\n [hackage-png]:
  http://img.shields.io/hackage/v/blaze-builder.svg\n [hackage]: http://hackage.haskell.org/package/blaze-builder\n"
license-name: BSD3
