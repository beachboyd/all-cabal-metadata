homepage: https://github.com/TGOlson/blockchain
changelog-type: ''
hash: 8fe6a04f1865ba1b95450bf60bc605a26c904e59b2c7f401a3ce051160d93f59
test-bench-deps:
  blockchain: -any
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  async: -any
  memory: -any
  quickcheck-instances: -any
  cryptonite: -any
  mtl: -any
  hashable: -any
  byteable: -any
  transformers: -any
  errors: -any
  deepseq: -any
  QuickCheck: -any
  aeson: -any
maintainer: tydotg@gmail.com
synopsis: Generic blockchain implementation.
changelog: ''
basic-deps:
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  memory: -any
  cryptonite: -any
  mtl: -any
  hashable: -any
  byteable: -any
  transformers: -any
  errors: -any
  aeson: -any
all-versions:
- 0.0.0.1
- 0.0.1
- 0.0.2
- 0.0.3
author: Tyler Olson
latest: 0.0.3
description-type: markdown
description: ! "# blockchain\n\n[Available on Hackage](https://hackage.haskell.org/package/blockchain)\n\nGeneric
  blockchain implementation in Haskell. Heavily inspired by Bitcoin blockchain, but
  does not fully comply to the Bitcoin blockchain spec. Should be suitable for creating
  arbitrary Bitcoin-like blockchains with in various configurations.\n\nBuild\n\n```\n$
  stack build\n```\n\nTest\n\n```\n$ stack test                          -- run unit
  tests\n$ ./scripts/test_mining <num-miners>  -- run test mining network\n$ ./scripts/test_stats
  <file-path>    -- print blockchain stats\n```\n\n#### notable differences from Bitcoin
  blockchain\n\n* Merkle root computed with extra leaves at end of tree (compared
  to extra leaves duplicated in bitcoin)\n* Entities serialized as json\n* Blockchain
  config is encoded in blockchain\n* Blocks include a dedicated coinbase transaction
  field to simplify special case handling\n* Block headers include an additional field
  for coinbase transaction hash\n* A \"transaction in\" must declare its previous
  transaction hash as either a coinbase transaction or a normal transaction\n\n##
  design goals\n\n* Enforce invariants in types whenever possible (non-empty transactions,
  genesis block, coinbase transactions, etc.)\n* Make it simple to create blockchains
  with arbitrary configurations\n* Make construction of unverified blockchains easy,
  but provide assurance any validated blockchain instance conforms to expected rules\n*
  Blocks & transactions are never presumed to be a valid part of a blockchain unless
  present in a validated blockchain\n* Adding new blocks to a validated blockchain
  can assume validity prior parts of the blockchain\n* Inspecting unspent transaction
  outputs of a validated blockchain can assume validity of all transactions\n* Blockchain
  should be readily serializable\n\n## docs\n\nA blockchain is a config and a tree
  of blocks with each node having a potentially infinite set of branches. A `Blockchain`
  also includes a tag to note whether is has been verified to meet all the expected
  conditions -- `Blockchain Validated` or `Blockchain Unvalidated`.\n\n```hs\ndata
  Blockchain a = Blockchain\n    { _config :: BlockchainConfig\n    , _node   :: BlockchainNode\n
  \   }\n\ndata BlockchainNode = BlockchainNode\n    { nodeBlock :: Block\n    , nodeNodes
  :: [BlockchainNode]\n    }\n```\n\nBlockchain construction revolves around three
  basic functions. Note: the `BlockchainNode` constructor is exported, while the top
  level `Blockchain` constructor is not.\n\n```hs\n-- build an unvalidated blockchain
  from a config and node\nconstruct :: BlockchainConfig -> BlockchainNode -> Blockchain
  Unvalidated\n\n-- validate the blockchain\nvalidate :: Blockchain Unvalidated ->
  Either ValidationException (Blockchain Validated)\n\n-- add a block\naddBlock ::
  Block -> Blockchain Validated -> Either BlockException (Blockchain Validated)\n```\n\nFinally,
  blocks are created by mining. This is a process of finding a `Block` with a certain
  shape so that it satisfies the expected difficulty, as defined in the blockchain
  config. Blocks are mined with the coinbase reward going to the provided public key.
  Note: this function may take a long time to finish executing. Most realistic use
  cases should run this in a separate thread that can be canceled.\n\n```hs\nmineBlock
  :: PublicKey -> [Transaction] -> Blockchain Validated -> IO (Either MineBlockException
  Block)\n```\n\n## todo\n\n* Test attempts to double spend address funds -- particularly
  within the same transaction\n* Implement `createTransaction` (currently only `createSimpleTransaction`)\n*
  Function that validates transactions -- outside of create transaction logic\n* Implement
  max transaction count per block\n* Cache block header hash on block (and maybe transactions)
  for more efficient operations\n  * Maybe cache on the blockchain itself, and `validate`
  computes/checks hashes?\n* Run lint in CI\n\n## references\n\n* http://www.stephendiehl.com/posts/smart_contracts.html\n*
  http://kadena.io/docs/Kadena-PactWhitepaper.pdf\n* http://davidederosa.com/basic-blockchain-programming/\n*
  https://en.bitcoin.it/wiki/Transaction\n* https://en.bitcoin.it/wiki/Block\n* https://en.bitcoin.it/wiki/Block_hashing_algorithm\n*
  https://en.bitcoin.it/wiki/Hashcash\n* https://en.bitcoin.it/wiki/Genesis_block\n*
  https://en.bitcoin.it/wiki/Protocol_rules#.22tx.22_messages\n"
license-name: BSD-3-Clause
