homepage: http://github.com/plow-technologies/ble#readme
changelog-type: ''
hash: 9217fc2c483e35acb0af5fbeb89f443500c2a10a93b33cbe7cca621404f647b2
test-bench-deps:
  cereal: ! '>=0.4 && <0.6'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <4.10'
  data-default-class: ! '>=0.0 && <0.2'
  d-bus: ! '>=0.1.5 && <0.2'
  hspec: ! '>2 && <3'
  text: ! '>=1 && <2'
  uuid: ! '>=1 && <2'
  ble: -any
  process: ! '>=1.2 && <1.5'
  containers: ! '>=0.5 && <0.6'
  quickcheck-instances: ! '>=0.3 && <0.4'
  microlens-ghc: ! '>=0.4 && <0.5'
  hslogger: -any
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1 && <2'
  QuickCheck: ! '>=2.8 && <2.10'
  microlens: ! '>=0.4 && <0.5'
maintainer: jkarni@turingjump.com
synopsis: Bluetooth Low Energy (BLE) peripherals
changelog: ''
basic-deps:
  cereal: ! '>=0.4 && <0.6'
  bytestring: ==0.10.*
  stm: -any
  base: ! '>=4.8 && <4.10'
  data-default-class: ! '>=0.0 && <0.2'
  d-bus: ! '>=0.1.5 && <0.2'
  text: ==1.*
  uuid: ==1.*
  markdown-unlit: -any
  ble: -any
  containers: ==0.5.*
  microlens-ghc: ==0.4.*
  hslogger: -any
  mtl: ==2.2.*
  transformers: ! '>=0.4 && <0.6'
  optparse-applicative: ! '>=0.12 && <0.14'
  random: ==1.*
  microlens: ==0.4.*
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.3.0
- 0.3.4.0
- 0.4.0.0
- 0.4.1
- 0.4.2
author: Julian K. Arni
latest: 0.4.2
description-type: markdown
description: ! "# ble - Bluetooth Low Energy for Haskell\n\n*ble* is a Haskell library
  for writing Bluetooth Low Energy peripherals and\ncentrals.\n\nFor usage, see the
  \ [haddocks](https://hackage.haskell.org/package/ble). There\nare also examples
  in\n[`examples`](https://github.com/plow-technologies/ble/tree/master/examples)\ndirectory.\n\n##
  Example\n\nThe code below is a simple example of a complete Bluetooth Low Energy\napplication.
  The application allows a counter to be read, and adds one to the\nvalue of the counter,
  as well as allowing the counter to be set to any value.\n\n~~~ {.haskell}\nmodule
  Main (main) where\n\nimport Bluetooth\nimport Control.Concurrent     (threadDelay)\nimport
  Control.Concurrent.STM\nimport Control.Monad.IO.Class\n\nmain :: IO ()\nmain = do\n
  \ ref <- newTVarIO 0\n  conn <- connect\n  x <- runBluetoothM (registerAndAdvertiseApplication
  $ app ref) conn\n  case x of\n    Right _ -> putStrLn \"Started BLE counter application!\"\n
  \   Left e -> error $ \"Error starting application \" ++ show e\n  threadDelay maxBound\n\napp
  :: TVar Int -> Application\napp ref\n  = \"/com/turingjump/example/counter\"\n     &
  services .~ [counter ref]\n\ncounter :: TVar Int -> Service 'Local\ncounter ref\n
  \ = \"4f1f704f-0a0b-49e4-bd27-6368f27697a7\"\n     & characteristics .~ [getCounter
  ref]\n\ngetCounter :: TVar Int -> CharacteristicBS 'Local\ngetCounter ref\n  = \"90874979-563e-4224-9da6-3b1a6c03e97d\"\n
  \     & readValue  ?~ encodeRead readV\n      & writeValue ?~ encodeWrite writeV\n
  \     & properties .~ [CPRead, CPWrite]\n  where\n    readV :: Handler Int\n    readV
  = liftIO $ do\n      v <- atomically $ modifyTVar' ref succ >> readTVar ref\n      putStrLn
  $ \"Value requested. New value: \" ++ show v\n      return v\n\n    writeV :: Int
  -> Handler Bool\n    writeV i = liftIO $ do\n      v <- atomically $ swapTVar ref
  i\n      putStrLn $ \"Value changed to: \" ++ show i\n      putStrLn $ \"Old value:
  \" ++ show v\n      return True\n~~~\n\nYou can also write centrals (clients). See
  `HeartRateClient` in the `examples`\ndirectory.\n\n## Requirements\n\n`ble` currently
  only supports Linux, and requires Bluez versions 5.41 and up.\nTo see what version
  you are running, type:\n\n``` bash\nbluetoothd --version\n```\n\nNote that for version
  5.41 in particular you'll need to run `bluetoothd` with\nthe experimental flag.
  (You might have to change `/lib/systemd/system/bluetooth.service`\nto add `--experimental`
  to the `ExecStart` command, and the restart the\nbluetoothd service)\n\n\n### Contributing\n\nNote
  that quite a number of tests are protected by a flag (`hasDBus`). This is\nin part
  because of extra system dependencies; and in part because the tests\nrequire mocking
  DBus objects, which in turn require changing the dbus\nconfiguration files.\n\nIf
  you are contributing to this packages, you *should* run all tests (and\npossibly
  write further ones utilizing the mock infrastructure). You'll need to\nrun:\n\n```
  bash\nsudo ./test/Mock/dbus-permissions.sh\n```\n\nAnd then reboot (yes, terrible,
  but DBus has trouble reloading its\nconfiguration).\n\nYou then need the python
  dependencies. Minimally, this will involve:\n\n``` bash\npip install -r test/Mock/requirements.txt\n```\n\n`stack.yaml`
  has the `hasDBus` flag set, so if you're using `stack` you'll by\ndefault be running
  all the tests.\n"
license-name: BSD-3-Clause
