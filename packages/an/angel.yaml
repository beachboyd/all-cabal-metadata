homepage: http://github.com/MichaelXavier/Angel
changelog-type: markdown
hash: b8dc3c8526dde130a1acd260a062b184f0c614cb459116455d8637a83702a23f
test-bench-deps:
  unix: ! '>=2.4'
  stm: ! '>=2.0'
  base: ! '>=4.0 && <5'
  time: -any
  configurator: ! '>=0.1'
  unordered-containers: ! '>=0.1.4'
  text: ! '>=0.11'
  process: ! '>=1.0 && <2.0'
  containers: ! '>=0.3'
  old-locale: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  transformers: -any
  tasty: -any
maintainer: Michael Xavier <michael@michaelxavier.net>
synopsis: Process management and supervision daemon
changelog: ! "0.6.2\n* Switch to cabal-only build strategy\n\n0.6.1\n* Fix build for
  GHC 7.10 by adding FlexibleContexts\n\n0.6.0\n* Upgrade to time 1.5\n\n0.5.2\n*
  Add -v flag to executable\n\n0.5.0\n* Drop depdendency on MissingH\n\n0.4.4\n\n*
  Add `env` option to config.\n* Inject `ANGEL_PROCESS_NUMBER` environment variable
  into processes started\n  with `count`.\n\n0.4.3\n\n* Fix install failure from pidfile
  module not being accounted for.\n\n0.4.2\n\n* Add `pidfile` option to program spec
  to specify a pidfile location.\n\n0.4.1\n\n* Add `count` option to program spec
  to launch multiple instances of a program.\n"
basic-deps:
  unix: ! '>=2.4'
  stm: ! '>=2.0'
  base: ! '>=4.5 && <5'
  time: ! '>=1.5'
  configurator: ! '>=0.1'
  unordered-containers: ! '>=0.1.4'
  text: ! '>=0.11'
  process: ! '>=1.2.0.0 && <2.0'
  containers: ! '>=0.3'
  old-locale: -any
  mtl: -any
  transformers: -any
  optparse-applicative: ! '>=0.11 && <0.13'
all-versions:
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.6.2
author: Jamie Turner
latest: 0.6.2
description-type: markdown
description: ! "Angel\n=====\n[![Build Status](https://travis-ci.org/MichaelXavier/Angel.png?branch=master)](https://travis-ci.org/MichaelXavier/Angel)\n\n`angel`
  is a daemon that runs and monitors other processes.  It\nis similar to djb's `daemontools`
  or the Ruby project `god`.\n\nIt's goals are to keep a set of services running,
  and to facilitate\nthe easy configuration and restart of those services.\n\nMotivation\n----------\n\nThe
  author is a long-time user of `daemontools` due to its reliability\nand simplicity;
  however, `daemontools` is quirky and follows many\nunusual conventions.\n\n`angel`
  is an attempt to recreate `daemontools`'s capabilities (though\nnot the various
  bundled utility programs which are still quite useful)\nin a more intuitive and
  modern unix style.\n\n\nFunctionality\n-------------\n\n`angel` is driven by a configuration
  file that contains a list of\nprogram specifications to run.  `angel` assumes every
  program listed in\nthe specification file should be running at all times.\n\n`angel`
  starts each program, and optionally sets the program's stdout\nand stderr to some
  file(s) which have been opened in append mode\n(or pipes stdout and stderr to some
  logger process); at\nthis point, the program is said to be \"supervised\".\n\nIf
  the program dies for any reason, `angel` waits a specified number\nof seconds (default,
  5), then restarts the program.\n\nThe `angel` process itself will respond to a HUP
  signal by\nre-processing its configuration file, and synchronizing the run\nstates
  with the new configuration.  Specifically:\n\n * If a new program has been added
  to the file, it is started and\n   supervised\n * If a program's specification has
  changed (command line path,\n   stdin/stdout path, delay time, etc) that supervised
  child\n   process will be sent a TERM signal, and as a consequence of\n   normal
  supervision, will be restarted with the updated spec\n * If a program has been removed
  from the configuration file,\n   the corresponding child process will be sent a
  TERM signal;\n   when it dies, supervision of the process will end, and\n   therefore,
  it will not be restarted\n\nSafety and Reliability\n----------------------\n\nBecause
  of `angel`'s role in policing the behavior of other\ndaemons, it has been written
  to be very reliable:\n\n * It is written in Haskell, which boasts a combination
  of\n   strong, static typing and purity-by-default that lends\n   itself to very
  low bug counts\n * It uses multiple, simple, independent lightweight threads\n   with
  specific roles, ownership, and interfaces\n * It uses STM for mutex-free state synchronization
  between\n   these threads\n * It falls back to polling behavior to ensure eventual\n
  \  synchronization between configuration state and run\n   state, just in case odd
  timing issues should make\n   event-triggered changes fail\n * It simply logs errors
  and keeps running the last good\n   configuration if it runs into problems on configuration\n
  \  reloads\n * It has logged hundreds of thousands of uptime-hours\n   since 2010-07
  supervising all the daemons that power\n   http://bu.mp without a single memory
  leak or crash\n\nBuilding\n--------\n\n 1. Install the haskell-platform (or somehow,
  ghc 7.6 +\n    cabal-install)\n 2. Run `cabal install` in the project root (this
  directory)\n 3. Either add the ~/.cabal/bin file to your $PATH or copy\n    the
  `angel` executable to /usr/local/bin\n\nNotes:\n\n * Angel is recommended to be
  built on GHC 7.6 and newer.\n\nConfiguration and Usage Example\n-------------------------------\n\nThe
  `angel` executable takes a path to an angel configuration\nfile.\n\n    angel --help\n
  \   angel - Process management and supervision daemon\n\n    Usage: angel CONFIG_FILE
  [-v VERBOSITY]\n\n    Available options:\n      -h,--help                Show this
  help text\n      -v VERBOSITY             Verbosity from 0-2 (default: 2)\n\n\n`angel`'s
  configuration system is based on Bryan O'Sullivan's `configurator`\npackage.  A
  full description of the format can be found here:\n\nhttp://hackage.haskell.org/packages/archive/configurator/0.1.0.0/doc/html/Data-Configurator.html\n\nA
  basic configuration file might look like this:\n\n    watch-date {\n        exec
  = \"watch date\"\n    }\n\n    ls {\n        exec = \"ls\"\n        stdout = \"/tmp/ls_log\"\n
  \       stderr = \"/tmp/ls_log\"\n        delay = 7\n        termgrace = off\n    }\n\n
  \   workers {\n        directory = \"/path/to/worker\"\n        exec      = \"run_worker\"\n
  \       count     = 30\n        pidfile   = \"/path/to/pidfile.pid\"\n        env
  {\n          FOO = \"BAR\"\n          BAR = \"BAZ\"\n        }\n        termgrace
  = 10\n    }\n\nEach program that should be supervised starts a `program-id` block:\n\n
  \   watch-date {\n\nThen, a series of corresponding configuration commands follow:\n\n
  * `exec` is the exact command line to run (required)\n * `user` is the user the
  program will run as (optional, defaults to the\n   user angel is launched as)\n
  * `stdout` is a path to a file where the program's standard output\n    should be
  appended (optional, defaults to /dev/null)\n * `stderr` is a path to a file where
  the program's standard error\n    should be appended (optional, defaults to /dev/null)\n
  * `delay` is the number of seconds (integer) `angel` should wait\n   after the program
  dies before attempting to start it again\n   (optional, defaults to 5)\n * `directory`
  is the current working directory of the newly\n   executed program (optional, defaults
  to angel's cwd)\n * `logger` is another process that should be launched to handle\n
  \  logging.  The `exec` process will then have its stdout and stderr\n   piped into
  stdin of this logger.  Recommended log\n   rotation daemons include [clog](https://github.com/jamwt/clog)\n
  \  or [multilog](http://cr.yp.to/daemontools.html). *Note that\n   if you use a
  logger process, it is a configuration error\n   to specify either stdout or stderr
  as well.*\n * `count` is an optional argument to specify the number of processes
  to spawn.\n   For instance, if you specified a count of 2, it will spawn the program\n
  \  twice, internally as `workers-1` and `workers-2`, for example. Note that\n   `count`
  will inject the environment variable `ANGEL_PROCESS_NUMBER` into the\n   child process'
  environment variable.\n * `pidfile` is an optional argument to specify where a pidfile
  should be\n   created. If you don't specify an absolute path, it will use the running\n
  \  directory of angel. When combined with the `count` option, specifying a\n   pidfile
  of `worker.pid`, it will generate `worker-1.pid`, `worker-2.pid`,\n   etc. If you
  don't specify a `pidfile` directive, then `angel` will *not*\n   create a pidfile\n
  * `env` is a nested config of string key/value pairs. Non-string values are\n   invalid.\n
  * `termgrace` is an optional number of seconds to wait between\n   sending a SIGTERM
  and a SIGKILL to a program when it needs to shut\n   down. Any positive number will
  be interpreted as seconds. `0`,\n   `off`, or omission will be interpreted as disabling
  the feature and\n   only a sigterm will be sent. This is useful for processes that
  must\n   not be brought down forcefully to avoid corruption of data or other\n   ill
  effects.\n\nAssuming the above configuration was in a file called \"example.conf\",\nhere's
  what a shell session might look like:\n\n    jamie@choo:~/random/angel$ angel example.conf\n
  \   [2010/08/24 15:21:22] {main} Angel started\n    [2010/08/24 15:21:22] {main}
  Using config file: example.conf\n    [2010/08/24 15:21:22] {process-monitor} Must
  kill=0, must start=2\n    [2010/08/24 15:21:22] {- program: watch-date -} START\n
  \   [2010/08/24 15:21:22] {- program: watch-date -} RUNNING\n    [2010/08/24 15:21:22]
  {- program: ls -} START\n    [2010/08/24 15:21:22] {- program: ls -} RUNNING\n    [2010/08/24
  15:21:22] {- program: ls -} ENDED\n    [2010/08/24 15:21:22] {- program: ls -} WAITING\n
  \   [2010/08/24 15:21:29] {- program: ls -} RESTART\n    [2010/08/24 15:21:29] {-
  program: ls -} START\n    [2010/08/24 15:21:29] {- program: ls -} RUNNING\n    [2010/08/24
  15:21:29] {- program: ls -} ENDED\n    [2010/08/24 15:21:29] {- program: ls -} WAITING\n\n..
  etc\n\nYou can see that when the configuration is parsed, the process-monitor\nnotices
  that two programs need to be started.  A supervisor is started\nin a lightweight
  thread for each, and starts logging with the context\n`program: <program-id>`.\npp\n`watch-date`
  starts up and runs.  Since `watch` is a long-running process\nit just keeps running
  in the background.\n\n`ls`, meanwhile, runs and immediately ends, of course; then,
  the WAITING\nstate is entered until `delay` seconds pass.  Finally, the RESTART
  event\nis triggered and it is started again, ad naseum.\n\nNow, let's see what happens
  if we modify the config file to look like this:\n\n    #watch-date {\n    #    exec
  = \"watch date\"\n    #}\n\n    ls {\n        exec = \"ls\"\n        stdout = \"/tmp/ls_log\"\n
  \       stderr = \"/tmp/ls_log\"\n        delay = 7\n    }\n\n.. and then send HUP
  to angel.\n\n    [2010/08/24 15:33:59] {config-monitor} HUP caught, reloading config\n
  \   [2010/08/24 15:33:59] {process-monitor} Must kill=1, must start=0\n    [2010/08/24
  15:33:59] {- program: watch-date -} ENDED\n    [2010/08/24 15:33:59] {- program:
  watch-date -} QUIT\n    [2010/08/24 15:34:03] {- program: ls -} RESTART\n    [2010/08/24
  15:34:03] {- program: ls -} START\n    [2010/08/24 15:34:03] {- program: ls -} RUNNING\n
  \   [2010/08/24 15:34:03] {- program: ls -} ENDED\n    [2010/08/24 15:34:03] {-
  program: ls -} WAITING\n\nAs you can see, the config monitor reloaded on HUP, and
  then the\nprocess monitor marked the watch-date process for killing.  TERM\nwas
  sent to the child process, and then the supervisor loop QUIT\nbecause the watch-date
  program no longer had a config entry.\n\nThis also works for when you specify count.
  Incrementing/decrementing the count\nwill intelligently shut down excess processes
  and spin new ones up.\n\nAdvanced Configuration\n----------------------\n\nThe `configurator`
  package supports `import` statements, as\nwell as environment variable expansion.
  \ Using collections\nof configuration files and host-based or service-based\nenvironment
  variables, efficient, templated `angel`\nconfigurations can be had.\n\nTesting\n-------\nIf
  you prefer to stick with haskell tools, use cabal to build the package.\n\n\nYou
  can run the test suite with\n\n```\ncabal test\n```\n\nFAQ\n---\n\n**Can I have
  multiple programs logging to the same file?**\n\nYes, angel `dup()`s file descriptors
  and makes effort to safely\nallow concurrent writes by child programs; you should
  DEFINITELY\nmake sure your child program is doing stdout/stderr writes in\nline-buffered
  mode so this doesn't result in a complete interleaved\nmess in the log file.\n\n**Will
  angel restart programs for me?**\n\nNo; the design is just to send your programs
  TERM, then `angel` will\nrestart them.  `angel` tries to work in harmony with traditional\nUnix
  process management conventions.\n\n**How can I take a service down without wiping
  out its configuration?**\n\nSpecify a `count` of 0 for the process. That will kill
  any running processes\nbut still let you keep it in the config file.\n\nCHANGELOG\n---------\n\nSee
  [changelog.md](changelog.md)\n\nAuthor\n------\n\nOriginal Author: Jamie Turner
  <jamie@jamwt.com>\nCurrent Maintainer: Michael Xavier <michael@michaelxavier.net>\n\nThanks
  to Bump Technologies, Inc. (http://bu.mp) for sponsoring some\nof the work on angel.\n\nAnd,
  of course, thanks to all Angel's contributors:\n\nhttps://github.com/MichaelXavier/Angel/contributors\n"
license-name: BSD-3-Clause
