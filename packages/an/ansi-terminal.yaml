homepage: https://github.com/feuerbach/ansi-terminal
changelog-type: markdown
hash: 98511482150f6ebe635e7d6a78f106f4ca327b7666eb44233e2603a39f5388e6
test-bench-deps: {}
maintainer: Mike Pilgrem <public@pilgrem.com>, Roman Cheplyaka <roma@ro-che.info>
synopsis: Simple ANSI terminal support, with Windows compatibility
changelog: ! "Changes\r\n=======\r\n\r\nVersion 0.8.0.4\r\n---------------\r\n\r\n*
  On Windows, `hSupportsANSI` now recognises if the handle is connected to a\r\n  'mintty'
  terminal.\r\n\r\nVersion 0.8.0.3\r\n---------------\r\n\r\n* On Windows, try to
  enable ANSI on ConHost terminals even if a TERM environment\r\n  variable exits
  (such as with the Hyper 2 terminal)\r\n* Minor improvements to Haddock documentation\r\n\r\nVersion
  0.8.0.2\r\n---------------\r\n\r\n* Improve README and Haddock documentation\r\n*
  On Windows, fix compatability with earlier GHC versions\r\n* Drop support for GHC
  versions before 6.12.1 (released December 2009)\r\n\r\nVersion 0.8.0.1\r\n---------------\r\n\r\n*
  On Windows, if the standard output channel is valid but not a ConHost\r\n  terminal,
  assume it is ANSI-enabled rather than failing\r\n* On Windows, output the improved
  error message to the standard error channel\r\n  rather than the standard output
  channel\r\n\r\nVersion 0.8\r\n-----------\r\n\r\n* Make the fields of `SGR` strict\r\n*
  Make compatible with GHC 8.2.2\r\n* Improve the error message on Windows when not
  ANSI-capable or ConHost\r\n* Recognise Appveyor build environment as ANSI-enabled\r\n\r\nVersion
  0.7.1.1\r\n---------------\r\n\r\n`getReportedCursorPosition`: don't let the cursor
  reporting code be echo'd\r\n\r\nVersion 0.7.1\r\n-------------\r\n\r\n* Allow saving,
  restoring, and querying the current cursor position\r\n* Fix a couple of issues
  with the Reset emulation on Windows\r\n\r\nVersion 0.7\r\n-----------\r\n\r\nAdd
  24-bit RGB color support\r\n\r\nVersion 0.6.3.1\r\n---------------\r\n\r\nFix Windows
  + ghc 7.8 compatibility\r\n\r\nVersion 0.6.3\r\n-------------\r\n\r\n* Add ANSI
  support for Windows\r\n* Add compatibility with Win32-2.5.0.0 and above\r\n\r\nVersion
  0.6.2.3\r\n---------------\r\n\r\nAdd an example to the haddocks\r\n\r\nVersion
  0.6.2.2\r\n---------------\r\n\r\nFix a GHC 7.10 warning\r\n\r\nVersion 0.6.2.1\r\n---------------\r\n\r\nRestore
  compatibility with GHC 7.4 and older\r\n\r\nVersion 0.6.2\r\n-------------\r\n\r\n*
  Add `hSupportsANSI`\r\n* Drop support for `base < 4`\r\n\r\nVersion 0.6.1.1\r\n---------------\r\n\r\nFix
  to build with GHC 7.8 on Windows\r\n\r\nVersion 0.6.1\r\n-------------\r\n\r\n*
  `BoldIntensity` no longer changes background color on Windows\r\n* `setSGR []` was
  not equivalent to `setSGR [Reset]` on Windows, even though it\r\n  should be according
  to the documentation. This is now fixed.\r\n"
basic-deps:
  base: ! '>=4.2.0.0 && <5'
  ansi-terminal: -any
  colour: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.5.1'
- '0.6'
- '0.6.1'
- '0.6.1.1'
- '0.6.2'
- '0.6.2.1'
- '0.6.2.2'
- '0.6.2.3'
- '0.6.3'
- '0.6.3.1'
- '0.7'
- '0.7.1'
- '0.7.1.1'
- '0.8'
- '0.8.0.1'
- '0.8.0.2'
- '0.8.0.3'
- '0.8.0.4'
author: Max Bolingbroke
latest: '0.8.0.4'
description-type: markdown
description: ! "ansi-terminal\n=============\n\nA Haskell package providing support
  for 'ANSI' control character sequences for\nterminals on Unix-like operating systems
  and Windows\n\nDescription\n-----------\n\n['ANSI' terminal escape code](http://en.wikipedia.org/wiki/ANSI_escape_sequences)\nsupport
  for Haskell, which allows:\n-   Colored text output, with control over both foreground
  and background\n    colors\n-   Clearing parts of a line or the screen\n-   Hiding
  or showing the cursor\n-   Moving the cursor around\n-   Reporting the position
  of the cursor\n-   Scrolling the screen up or down\n-   Changing the title of the
  terminal\n\nBy using emulation, it is compatible with versions of 'Command Prompt'
  and\n'PowerShell' on Windows that did not recognise 'ANSI' escape codes before\nWindows
  10 version 1511 was released in November 2015.\n\nIf you like this, you may be interested
  in\n[ansi-wl-pprint](http://github.com/batterseapower/ansi-wl-pprint), which\nprovides
  a pretty-printer that can construct strings containing 'ANSI'\ncolorisation.\n\nNot
  all 'ANSI' escape codes are suported by this library but most (if not\nall) of the
  popular ones that are well-supported by terminal software are,\nincluding:\n-   Select
  Graphic Rendition mode (colors and other attributes): `setSGR`\n-   Clearing parts
  of the screen: `clearFromCursorToScreenEnd`,\n    `clearFromCursorToScreenBeginning`,
  `clearScreen`,\n    `clearFromCursorToLineEnd`, `clearFromCursorToLineBeginning`
  and\n    `clearLine`\n-   Cursor visibility changes: `hideCursor` and `showCursor`\n-
  \  Cursor movement by character: `cursorUp`, `cursorDown`, `cursorForward` and\n
  \   `cursorBackward`\n-   Cursor movement by line: `cursorUpLine` and `cursorDownLine`\n-
  \  Directly changing cursor position: `setCursorColumn` and `setCursorPosition`\n-
  \  Saving, restoring and reporting cursor position: `saveCursor`,\n    `restoreCursor`
  and `reportCursorPosition`\n-   Scrolling the screen: `scrollPageUp` and `scrollPageDown`\n-
  \  Changing the title: `setTitle`\n\nEach supported escape code or family of codes
  has a corresponding\nfunction that comes in three variants:\n\n-   A straight `IO`
  variant that doesn't take a `Handle` and just applies the\n    escape code to `stdout`
  and any terminal attached to it\n-   An `IO` variant similar to above, but which
  takes a `Handle` to which the\n    escape code should be applied\n-   A `String`
  variant that returns a literal string that should be\n    included to get the effect
  of the code. However, on Windows systems where\n    emulation has been necessary,
  these strings will always be blank!\n\nExample\n-------\n\nA full example is\n[available](https://github.com/feuerbach/ansi-terminal/blob/master/app/Example.hs),\nbut
  for a taste of how the library works try the following code:\n\n``` haskell\nimport
  System.Console.ANSI\n\nmain = do\n    setCursorPosition 5 0\n    setTitle \"ANSI
  Terminal Short Example\"\n\n    setSGR [ SetConsoleIntensity BoldIntensity\n           ,
  SetColor Foreground Vivid Red\n           ]\n    putStr \"Hello\"\n\n    setSGR
  [ SetConsoleIntensity NormalIntensity\n           , SetColor Foreground Vivid White\n
  \          , SetColor Background Dull Blue\n           ]\n    putStrLn \"World!\"\n```\n\n![](https://raw.githubusercontent.com/feuerbach/ansi-terminal/master/example.png)\n\nDocumentation\n-------------\n\nHaddock
  documentation is [available at\nHackage](http://hackage.haskell.org/packages/archive/ansi-terminal/latest/doc/html/System-Console-ANSI.html).\n\nCredits\n-------\n\nThe
  library is originally written by [Max Bolingbroke](https://github.com/batterseapower)\n\nMaintainers\n-----------\n\n[Mike
  Pilgrem](https://github.com/mpilgrem) and [Roman Cheplyaka](https://github.com/feuerbach)
  are the primary maintainers.\n\n[Oliver Charles](https://github.com/ocharles) is
  the backup maintainer. Please\nget in touch with him if the primary maintainers
  cannot be reached.\n"
license-name: BSD3
