homepage: ''
changelog-type: ''
hash: dcb7d88d83f16226c6f8068b0ce781464dcc5d364bd70fba179c94d157fa3ea9
test-bench-deps:
  bytestring: -any
  case-insensitive: -any
  base: <5
  hspec: -any
  criterion: -any
  anagrep: -any
  QuickCheck: -any
maintainer: dylan@dylex.net
synopsis: Find strings with permutations (anagrams) that match a regular expression
changelog: ''
basic-deps:
  bytestring: -any
  case-insensitive: -any
  base: <5
  anagrep: -any
  integer-gmp: -any
  containers: -any
  ghc-prim: -any
  regex-tdfa: -any
  deepseq: -any
  vector: -any
all-versions:
- 0.1.0.0
author: Dylan Simon
latest: 0.1.0.0
description-type: haddock
description: |-
  Given a regular expression, determine if it matches any permutation of a given string.  For example, @"lt[aeiou]*"@ would match all strings with one \'l\', one \'t\', and vowels (like \"elate\", \"tail\", \"tl\", etc.).
  Regular expression parsing is based on <//hackage.haskell.org/package/regex-tdfa regex-tdfa> and generally follows those semantics, but not all regular expression features are supported.  For example, repeat modifiers cannot be applied to groups (such as "(abc)*").
  The goal is for matching to be fairly efficient in most cases, given that this problem is NP-complete.
license-name: BSD-3-Clause
