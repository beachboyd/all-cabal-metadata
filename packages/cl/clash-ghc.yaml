homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: 38055f98bb80e50ca6772144c0a599bd60bdf08c66cd37a675636a1909a78b8a
test-bench-deps: {}
maintainer: Christiaan Baaij <christiaan.baaij@gmail.com>
synopsis: CAES Language for Synchronous Hardware
changelog: ! "# Changelog for the [`clash-ghc`](http://hackage.haskell.org/package/clash-ghc)
  package\n\n## 0.99.1 *May 12th 2018*\n* Allow `~NAME[N]` tag inside `~GENSYM[X]`\n*
  Support HDL record selector generation [#313](https://github.com/clash-lang/clash-compiler/pull/313)\n*
  `InlinePrimitive` support: specify HDL primitives inline with Haskell code\n\n##
  0.99 *March 31st 2018*\n* New features:\n  * Support for `clash-prelude-0.99`:\n
  \     * Explicit clock and reset arguments\n      * Overhaul of `TopEntity` annotations\n
  \ * Hierarchies with multiple synthesisable boundaries by allowing more than one\n
  \   function in scope to have a `Synthesize` annotation.\n    * Local caching of
  functions with a `Synthesize` annotation\n  * `Bit` type is mapped to a HDL scalar
  type (e.g. `std_logic` in VHDL)\n  * Improved name preservation\n  * Zero-bit values
  are filtered out of the generated HDL\n  * Improved compile-time computation\n*
  Many bug fixes\n\n## 0.7.2\n* New features:\n  * Sum-of-product types: unused bits
  now \"don't-care\" [#212](https://github.com/clash-lang/clash-compiler/commit/fabf745793491ce3baf84ef0066b4ccf0753d503)\n*
  Fixes bugs:\n  * Eagerness bug in `regEn` [#104](https://github.com/clash-lang/clash-prelude/issues/104)
  (Thanks to @cbiffle)\n\n## 0.7.1 *April 11th 2017*\n* New features:\n  * Support
  distribution of primitive templates with Cabal/Hackage packages [commit](https://github.com/clash-lang/clash-compiler/commit/82cd31863aafcbaf3bdbf7746d89d13859af5aaf)\n
  \ * Find memory data files and primitive files relative to import dirs (`-i<DIR>`)\n
  \ * Add 'clashi' program and 'clash-ghc' package [#208](https://github.com/clash-lang/clash-compiler/issues/208),
  thanks to @thoughtpolice\n* Fixes bugs:\n  * `case (EmptyCase ty) of ty' { ... }`
  -> `EmptyCase ty'` [#198](https://github.com/clash-lang/clash-compiler/issues/198)\n
  \ * `BitVector.split#` apply the correct type arguments\n\n## 0.7.0.1 *January 17th
  2017\n* Fixes bugs:\n  * Include HsVersions.h in source distribution\n\n## 0.7 *January
  16th 2017*\n* New features:\n  * Support for `clash-prelude` 0.11\n  * Primitive
  templates can include QSys files\n  * VHDL blackboxes: support additional libraries
  and uses keywords in generated VHDL\n  * Highly limited Float/Double support (literals
  and `Rational` conversion), hidden behind the `-clash-float-support` flag.\n* Fixes
  bugs:\n  * Reduce type families inside clock period calculation [#180](https://github.com/clash-lang/clash-compiler/issues/180)\n
  \ * Only output signed literals as hex when they're multiple of 4 bits [#187](https://github.com/clash-lang/clash-compiler/issues/187)\n
  \ * Correctly print negative hex literals\n\n## 0.6.24 *October 17th 20168\n* Call
  generatePrimMap after loadModules [#175](https://github.com/clash-lang/clash-compiler/pull/175)\n*
  Fixes bugs:\n  * (System)Verilog: CLaSH.Sized.Vector.imap primitive gets indices
  in reverse order\n  * Template Haskell splices are run twice\n  * CLaSH errors out
  when observing the constructor for `Signal` [#174](https://github.com/clash-lang/clash-compiler/issues/174)\n\n##
  0.6.23 *August 18th 2015*\n* Fixes bugs:\n  * Type families are not being reduced
  correctly  [#167](https://github.com/clash-lang/clash-compiler/issues/167)\n  *
  (System)Verilog: Fix primitives for {Signed,Unsigned} rotateL# and rotateR# [#169](https://github.com/clash-lang/clash-compiler/issues/169)\n\n##
  0.6.22 *August 3rd 2016*\n* Fixes bugs:\n  * Bug in DEC transformation overwrites
  case-alternatives\n  * Bug in DEC transformation creates non-representable let-binders\n
  \ * VHDL: Incorrect primitive for `Integer`s `ltInteger#` and `geInteger#`\n  *
  (System)Verilog: Fix primitive for CLaSH.Sized.Internal.Signed.mod# and GHC.Type.Integer.modInteger
  [#164](https://github.com/clash-lang/clash-compiler/issues/164)\n\n## 0.6.21 *July
  19th 2016*\n* Fixes bugs:\n  * Rounding error in `logBase` calculation\n  * VHDL:
  Incorrect primitive for `Index`s `*#`\n  * VHDL: Incorrect handling of `Index`s
  `fromInteger#` and `maxBound#` primitives for values larger than 2^MACHINE_WIDTH\n\n##
  0.6.20 *July 15th 2016*\n* New features:\n  * Better error location reporting\n*
  Fixes bugs:\n  * `CLaSH.Sized.Internal.Unsigned.maxBound#` not evaluated at compile-time
  [#155](https://github.com/clash-lang/clash-compiler/issues/155)\n  * `CLaSH.Sized.Internal.Unsigned.minBound#`
  not evaluated at compile-time [#157](https://github.com/clash-lang/clash-compiler/issues/157)\n
  \ * Values of type Index 'n', where 'n' > 2^MACHINE_WIDTH, incorrectly considered
  non-synthesisable due to overflow\n  * VHDL: Types in generated types.vhdl incorrectly
  sorted\n  * Casts of CLaSH numeric types result in incorrect VHDL/Verilog (Such
  casts are now reported as an error)\n\n## 0.6.19 *June 9th 2016*\n* Fixes bugs:\n
  \ * `Eq` instance of `Vec` sometimes not synthesisable\n  * VHDL: Converting product
  types to std_logic_vector fails when the `clash-hdlsyn Vivado` flag is enabled\n\n##
  0.6.18 *June 7th 2016*\n* New features:\n  * DEC transformation also lifts HO-primitives
  applied to \"interesting\" primitives (i.e. `zipWith (*)`)\n  * New `-clash-hdlsyn
  Xilinx` flag to generate HDL tweaked for Xilinx synthesis tools (both ISE and Vivado)\n*
  Fixes bugs:\n  * replicate unfolded incorrectly [#150](https://github.com/clash-lang/clash-compiler/issues/150)\n
  \ * `imap` is not unrolled [#151](https://github.com/clash-lang/clash-compiler/issues/151)\n
  \ * VHDL: Incorrect primitive specification for `snatToInteger` [#149](https://github.com/clash-lang/clash-compiler/issues/149)\n\n##
  0.6.17 *April 7th 2016*\n* New features:\n  * Up to 2x reduced compilation times
  when working with large `Vec` literals\n* Fixes bugs:\n  * VHDL: Incorrect primitives
  for `BitVector`s `quot#` and `rem#`\n  * VHDL: Bit indexing and replacement primitives
  fail to synthesise in Synopsis tools\n  * Bug in DEC transformation throws CLaSH
  into an endless loop [#140](https://github.com/clash-lang/clash-compiler/issues/140)\n
  \ * Missed constant folding opportunity results in an error [#50](https://github.com/clash-lang/clash-prelude/issues/50)\n\n##
  0.6.16 *March 21st 2016*\n* New features:\n  * Also generate testbench for circuits
  without input ports [#135](https://github.com/clash-lang/clash-compiler/issues/135)\n*
  Fixes bugs:\n  * `clockWizard` broken [#49](https://github.com/clash-lang/clash-prelude/issues/49)\n\n##
  0.6.15 *March 15th 2016*\n* Fixes bugs:\n  * XST cannot finds \"_types\" package
  unless it is prefixed with \"work.\" [#133](https://github.com/clash-lang/clash-compiler/pull/133)\n\n##
  0.6.14 *March 15th 2016*\n* Fixes bugs:\n  * XST cannot finds \"_types\" package
  unless it is prefixed with \"work.\" [#133](https://github.com/clash-lang/clash-compiler/pull/133)\n\n##
  0.6.13 *March 14th 2016*\n* Fixes bugs:\n  * Not all lambda's in a function position
  removed\n\n## 0.6.12 *March 14th 2016*\n* Fixes bugs:\n  * Not all lambda's in a
  function position removed due to bad eta-expansion [#132](https://github.com/clash-lang/clash-compiler/issues/132)\n\n##
  0.6.11 *March 11th 2016*\n* New features:\n  * Add support for HDL synthesis tool
  specific HDL generation:\n    * New `-clash-hdlsyn Vivado` flag to generate HDL
  tweaked for Xilinx Vivado\n  * Preserve more Haskell names in generated HDL [#128](https://github.com/clash-lang/clash-compiler/issues/128)\n*
  Fixes bugs:\n  * VHDL: Vivado fails to infer block ram [#127](https://github.com/clash-lang/clash-compiler/issues/127)\n
  \   * Users must use the `-clash-hdlsyn Vivado` flag in order to generate Xilinx
  Vivado specific HDL for which Vivado can infer block RAM.\n\n## 0.6.10 *February
  10th 2016*\n* New features:\n  * hdl files can be written to a directory (set by
  the `-clash-hdldir` flag) other than the current working directory [#125](https://github.com/clash-lang/clash-compiler/issues/125).\n
  \   Also respects the `-outputdir` directory, _unless_:\n      * `-clash-hdldir`
  is set to a different directory.\n      * `-hidir`, `-stubdir`, and `-dumbdir` are
  not the same directory as `-odir`\n* Fixes bugs:\n  * `caseCon` transformation does
  not work on non-exhaustive case-expressions [#123](https://github.com/clash-lang/clash-compiler/issues/123)\n
  \ * VHDL: insufficient type-qualifiers for concatenation operator [#121](https://github.com/clash-lang/clash-compiler/issues/121)\n
  \ * Primitive reductions don't look through `Signal` [#126](https://github.com/clash-lang/clash-compiler/issues/126)\n\n##
  0.6.9 *January 29th 2016*\n* New features:\n  * Support for `Debug.Trace.trace`,
  thanks to @ggreif\n\n* Fixes bugs:\n  * `case undefined of ...` should reduce to
  `undefined` [#116](https://github.com/clash-lang/clash-compiler/issues/109)\n  *
  VHDL/SystemVerilog: BlockRAM elements must be bit vectors [#113](https://github.com/clash-lang/clash-compiler/issues/113)\n
  \ * Type families obscure eligibility for synthesis [#114](https://github.com/clash-lang/clash-compiler/issues/114)\n\n##
  0.6.8 *January 13th 2016*\n* New features:\n  * Support for Haskell's: `Char`, `Int8`,
  `Int16`, `Int32`, `Int64`, `Word`, `Word8`, `Word16`, `Word32`, `Word64`.\n  * Int/Word/Integer
  bitwidth for generated HDL is configurable using the `-clash-intwidth=N` flag, where
  `N` can be either 32 or 64.\n* Fixes bugs:\n  * Cannot reduce `case error ... of
  ...` to `error ...` [#109](https://github.com/clash-lang/clash-compiler/issues/109)\n\n##
  0.6.7 *December 21st 2015*\n* Support for `unbound-generics-0.3`\n* New features:\n
  \ * Only look for 'topEntity' in the root module. [#22](https://github.com/clash-lang/clash-compiler/issues/22)\n*
  Fixes bugs:\n  * Unhelpful error message when GHC is not in PATH [#104](https://github.com/clash-lang/clash-compiler/issues/104)\n\n##
  0.6.6 *December 11th 2015*\n* New features:\n  * Remove all existing HDL files before
  generating new ones. This can be disabled by the `-clash-noclean` flag. [#96](https://github.com/clash-lang/clash-compiler/issues/96)\n
  \ * Support for `clash-prelude` 0.10.4\n\n## 0.6.5 *November 17th 2015*\n* Fixes
  bugs:\n  * Integer literals used as arguments not always properly annotated with
  their type.\n  * Verilog: Name collision in verilog code [#93](https://github.com/clash-lang/clash-compiler/issues/93)\n
  \ * (System)Verilog: Integer literals missing \"32'sd\" prefix when used in assignments.\n
  \ * VHDL: Integer literals should only be capped to 32-bit when used in assignments.\n
  \ * Verilog: HO-primitives incorrect for nested vectors.\n\n## 0.6.4 *November 12th
  2015*\n* Fixes bugs:\n  * Reversing alternatives is not meaning preserving for literal
  patterns [#91](https://github.com/clash-lang/clash-compiler/issues/91)\n  * DEC:
  root of the case-tree must contain at least 2 alternatives [#92](https://github.com/clash-lang/clash-compiler/issues/92)\n
  \ * Do not generate overlapping literal patterns in VHDL [#91](https://github.com/clash-lang/clash-compiler/issues/91)\n\n##
  0.6.3 *October 24th 2015*\n* New features:\n  * Improve DEC transformation: consider
  alternatives before the subject when checking for disjoint expressions.\n* Fixes
  bugs:\n  * DEC: don't generate single-branch case-expressions [#90](https://github.com/clash-lang/clash-compiler/issues/90)\n\n##
  0.6.2 *October 21st 2015*\n* New features:\n  * Support `clash-prelude` 0.10.2\n\n*
  Fixes bugs:\n  * CLaSH interpreter was reading '.ghci' file instead of '.clashi'
  file [#87](https://github.com/clash-lang/clash-compiler/issues/87)\n  * DEC: Subject
  and alternatives are not disjoint [#88](https://github.com/clash-lang/clash-compiler/issues/88)\n\n##
  0.6.1 *October 16th 2015*\n* New features:\n  * Support for `clash-prelude` 0.10.1\n
  \ * Transformation that lifts applications of the same function out of alternatives
  of case-statements. e.g.\n\n    ```haskell\n    case x of\n      A -> f 3 y\n      B
  -> f x x\n      C -> h x\n    ```\n\n    is transformed into:\n\n    ```haskell\n
  \   let f_arg0 = case x of {A -> 3; B -> x}\n        f_arg1 = case x of {A -> y;
  B -> x}\n        f_out  = f f_arg0 f_arg1\n    in  case x of\n          A -> f_out\n
  \         B -> f_out\n          C -> h x\n    ```\n\n* Fixes bugs:\n  * clash won't
  run when not compiled with usual ghc [#82](https://github.com/clash-lang/clash-compiler/issues/82)\n
  \ * Fail to generate VHDL with blockRamFile' in clash-ghc 0.6 [#85](https://github.com/clash-lang/clash-compiler/issues/85)\n
  \ * Case-statements acting like normal decoder circuits are erroneously synthesised
  to priority decoder circuits.\n\n## 0.6 *October 3rd 2015*\n* New features:\n  *
  Support `clash-prelude-0.10`\n  * Pattern matching on `CLaSH.Sized.Vector`'s `:>`
  is now supported\n  * Unroll \"definitions\" of the following primitives: `fold`,
  `dfold`, `foldr`\n\n## 0.5.15 *September 21st 2015*\n* New features:\n  * Report
  simulation time in (System)Verilog assert messages\n\n* Fixes bugs:\n  * Performance
  bug: top-level definitions of type \"Signal\" erroneously inlined.\n  * Fix Index
  maxBound [#79](https://github.com/clash-lang/clash-compiler/pull/79)\n\n## 0.5.14
  *September 14th 2015*\n* New features:\n  * Completely unroll \"definitions\" of
  some higher-order primitives with non-representable argument or result vectors:\n
  \   It is now possible to translate e.g. `f xs ys = zipWith ($) (map (+) xs) ys
  :: Vec 4 Int -> Vec 4 Int -> Vec 4 Int`\n\n* Fixes bugs:\n  * Converting Bool to
  Unsigned generates broken VHDL [#77](https://github.com/clash-lang/clash-compiler/issues/77)\n
  \ * `topLet` transformation erroneously not performed in a top-down traversal\n
  \ * Specialisation limit unchecked on types and constants\n  * Vector of functions
  cannot be translated [#25](https://github.com/clash-lang/clash-compiler/issues/25
  )\n  * CLaSH fails to generate VHDL when map is applied [#78](https://github.com/clash-lang/clash-compiler/issues/78)\n\n##
  0.5.13 *September 8th 2015*\n* Fixes bugs:\n  * Cannot translate GHC `MachLabel`
  literal\n  * Maybe (Index n) not translatable to VHDL [#75](https://github.com/clash-lang/clash-compiler/issues/75)\n\n##
  0.5.12 *September 7th 2015*\n* New features:\n  * Modest compilation time speed-up.
  Compilation time of the [I2C](https://github.com/clash-lang/clash-compiler/tree/master/examples/i2c)
  module on my machine went down from 43s to 24s, and maximum memory usage went down
  from 840 MB to 700 MB.\n\n* Fixes bugs:\n  * Bug in VHDL ROM generation [#69](https://github.com/clash-lang/clash-compiler/issues/69)\n
  \ * Clash running out of memory on Simple-ish project [#70](https://github.com/clash-lang/clash-compiler/issues/70)\n
  \ * Fix asyncRom VHDL primitive [#71](https://github.com/clash-lang/clash-compiler/pull/71)\n
  \ * Fix primitive for CLaSH.Sized.Internal.Signed.size# [#72](https://github.com/clash-lang/clash-compiler/pull/72)\n
  \ * rem and quot on Signed are broken [#73](https://github.com/clash-lang/clash-compiler/issues/73)\n\n##
  0.5.11 *August 2nd 2015*\n* New features:\n  * Re-enable GHC's strictness analysis
  pass, which improves dead-code removal, which hopefully leads to smaller circuits.\n\n##
  0.5.10 *July 9th 2015*\n* New features:\n  * Use new VHDL backend which outputs
  VHDL-93 instead of VHDL-2002: generated VHDL is now accepted by a larger number
  of tools.\n  * Treat all so-called bottom values (`error \"FOO\"`, `let x = x in
  x`, etc.) occuring in installed libraries as `undefined`.\n    Before, there were
  (very) rare situations where we couldn't find the expressions belonging to a function
  and demanded a BlackBox, even though we knew the expression would be a bottom value.\n
  \   Now, we stop demanding a BlackBox for such a function and simply treat it as
  `undefined`, thus allowing a greater range of circuit descriptions that we can compile.\n\n##
  0.5.9 *June 26th 2015*\n* New features:\n  * Use new verilog backend which outputs
  Verilog-2001 instead of Verilog-2005: generated Verilog is now accepted by Altera/Quartus\n\n*
  Fixes bugs:\n  * `--systemverilog` switch incorrectly generates verilog code instead
  of systemverilog code\n\n## 0.5.8 *June 25th 2015*\n* New features:\n  * Support
  for copying string literals from Haskell to generated code\n  * Support `clash-prelude-0.9`\n
  \ * Size at below which functions are always inlined is configurable, run with `-clash-inline-below=N`
  to set the size limit to `N`\n\n## 0.5.7 *June 3rd 2015*\n* New features:\n  * New
  Verilog backend, run `:verilog` in interactive mode, or `--verilog` for batch mode\n
  \ * Generated component names are prefixed by the name of the module containing
  the `topEntity`\n\n## 0.5.6 *May 18th 2015*\n* New features:\n  * Inlining limit
  is configurable, run with `-clash-inline-limit=N` to set the inlining limit to `N`\n
  \ * Specialisation limit is configurable, run with `clash-spec-limit=N` to set the
  inline limit to `N`\n  * Debug level is configurable, run with `-clash-debug <LEVEL>`
  where `<LEVEL>` can be: `DebugNone, DebugFinal, DebugName, DebugApplied, DebugAll`.
  Be default, `clash` runs with `DebugNone`.\n\n* Fixes bugs:\n  * Extend evaluator
  for `GHC.Integer.Type.minusInteger` and `CLaSH.Promoted.Nat.SNat`.\n\n## 0.5.5 *May
  5th 2015*\n* New features:\n  * `TopEntity` wrappers are now specified as `ANN`
  annotation pragmas [#42](https://github.com/clash-lang/clash-compiler/issues/42)\n\n##
  0.5.4 *May 1st 2015*\n* New features:\n  * Generate wrappers around `topEntity`
  that have constant names and types\n\n## 0.5.3 *April 24th 2015*\n* Fixes bugs:\n
  \ * Fix bug where not enough array type definitions were created by the VHDL backend\n\n##
  0.5.2 *April 21st 2015*\n* Use latest ghc-typelits-natnormalise\n\n## 0.5.1 *April
  20th 2015*\n* New features:\n  * GHC 7.10 support\n  * Update to clash-prelude 0.7.2\n
  \ * Use http://hackage.haskell.org/package/ghc-typelits-natnormalise typechecker
  plugin for better type-level natural number handling\n\n## 0.5 *March 11th 2015*\n*
  New features:\n  * SystemVerilog backend. [#45](https://github.com/clash-lang/clash-compiler/issues/45)\n\n##
  0.4.1 *February 4th 2015*\n* Include bug fixes from clash-lib 0.4.1\n\n## 0.4 *November
  17th 2014*\n* New features:\n  * Support for clash-prelude 0.6\n\n* Fixes bugs:\n
  \ * clash-ghc ignores \"-package-db\" flag [#35](https://github.com/christiaanb/clash2/issues/35)\n\n##
  0.3.3 *August 12th 2014*\n* Fixes bugs:\n  * Compile with GHC 7.8.3 [#31](https://github.com/christiaanb/clash2/issues/31)\n\n##
  0.3.2 *June 5th 2014*\n\n* Fixes bugs:\n  * Type synonym improperly expanded [#17](https://github.com/christiaanb/clash2/issues/17)\n
  \ * BlackBox for `Signed` `maxBound` and `minBound` generate incorrect VHDL. [#19](https://github.com/christiaanb/clash2/issues/19)\n
  \ * Generate failure code in the VHDL for recSelError [#23](https://github.com/christiaanb/clash2/issues/23)\n\n##
  0.3.1 *May 15th 2014*\n\n* New features:\n  * Hardcode `fromInteger` for `Signed`
  and `Unsigned` [#9](https://github.com/christiaanb/clash2/issues/9)\n  * Better
  blackbox operation for vindex [#12](https://github.com/christiaanb/clash2/issues/12)\n
  \ * Replace VHDL default hole by error hole [#13](https://github.com/christiaanb/clash2/issues/13)\n\n*
  Fixes bugs:\n  * Update GHC2Core.hs [#1](https://github.com/christiaanb/clash2/issues/1)\n
  \ * primitives (clash.sized.vector) [#2](https://github.com/christiaanb/clash2/issues/2)\n
  \ * Type families are not expanded [#3](https://github.com/christiaanb/clash2/issues/3)\n
  \ * Incorrect vhdl generation for default value in blackbox [#6](https://github.com/christiaanb/clash2/issues/6)\n
  \ * Missing begin keyword in Signed/Unsigned JSON files [#16](https://github.com/christiaanb/clash2/issues/16)\n"
basic-deps:
  ghc: ! '>=8.2.0 && <8.6'
  bytestring: ! '>=0.9 && <0.11'
  clash-prelude: ! '>=0.11.2 && <1.0'
  clash-lib: ! '>=0.7.1 && <1.0'
  reflection: ! '>=2.1.2 && <3.0'
  unix: ! '>=2.7.1 && <2.8'
  haskeline: ! '>=0.7.0.3 && <0.8'
  base: ! '>=4.3.1.0 && <5'
  time: ! '>=1.4.0.1 && <1.9'
  unordered-containers: ! '>=0.2.1.0 && <0.3'
  text: ! '>=0.11.3.1 && <1.3'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.2 && <1.7'
  uniplate: ! '>=1.6.12 && <1.8'
  ghc-typelits-knownnat: ! '>=0.5 && <0.6'
  array: ! '>=0.4 && <0.6'
  integer-gmp: ! '>=1.0.1.0 && <2.0'
  ghc-typelits-natnormalise: ! '>=0.6 && <0.7'
  containers: ! '>=0.5.4.0 && <0.6'
  ghc-typelits-extra: ! '>=0.2.5 && <0.3'
  clash-ghc: -any
  lens: ! '>=4.0.5 && <4.17'
  bifunctors: ! '>=4.1.1 && <5.6'
  ghc-boot: ! '>=8.0.2 && <8.6'
  ghc-prim: ! '>=0.3.1.0 && <0.6'
  concurrent-supply: ! '>=0.1.7 && <0.2'
  mtl: ! '>=2.1.1 && <2.3'
  ghci: ! '>=8.2.0 && <8.6'
  hashable: ! '>=1.1.2.3 && <1.3'
  transformers: ! '>=0.4.2 && <0.6'
  deepseq: ! '>=1.3.0.2 && <1.5'
  unbound-generics: ! '>=0.1 && <0.4'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.2.2.2'
- '0.3.0.3'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.4'
- '0.4.1'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '0.5.8'
- '0.5.9'
- '0.5.10'
- '0.5.11'
- '0.5.12'
- '0.5.13'
- '0.5.14'
- '0.5.15'
- '0.6'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.6.8'
- '0.6.9'
- '0.6.10'
- '0.6.15'
- '0.6.16'
- '0.6.17'
- '0.6.18'
- '0.6.19'
- '0.6.20'
- '0.6.21'
- '0.6.22'
- '0.6.23'
- '0.6.24'
- '0.7.0.1'
- '0.7.1'
- '0.7.2'
- '0.99'
- '0.99.1'
author: Christiaan Baaij
latest: '0.99.1'
description-type: markdown
description: ! "# `clash-ghc` - Haskell/GHC front-end for the CλaSH compiler\n\n  *
  See the LICENSE file for license and copyright details\n  * Contains code from the
  [GHC compiler](http://haskell.org/ghc), see the\n    LICENSE_GHC file for license
  and copyright details pertaining to that code.\n\n# CλaSH - A functional hardware
  description language\nCλaSH (pronounced ‘clash’) is a functional hardware description
  language that\nborrows both its syntax and semantics from the functional programming
  language\nHaskell. The CλaSH compiler transforms these high-level descriptions to\nlow-level
  synthesizable VHDL, Verilog, or SystemVerilog.\n\nFeatures of CλaSH:\n\n  * Strongly
  typed (like VHDL), yet with a very high degree of type inference,\n    enabling
  both safe and fast prototying using consise descriptions (like\n    Verilog).\n\n
  \ * Interactive REPL: load your designs in an interpreter and easily test all\n
  \   your component without needing to setup a test bench.\n\n  * Higher-order functions,
  with type inference, result in designs that are\n    fully parametric by default.\n\n
  \ * Synchronous sequential circuit design based on streams of values, called\n    `Signal`s,
  lead to natural descriptions of feedback loops.\n\n  * Support for multiple clock
  domains, with type safe clock domain crossing.\n\n# Support\nFor updates and questions
  join the mailing list clash-language+subscribe@googlegroups.com or read the [forum](https://groups.google.com/d/forum/clash-language)\n"
license-name: BSD2
