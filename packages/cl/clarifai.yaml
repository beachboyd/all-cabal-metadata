homepage: ''
changelog-type: ''
hash: b9ab02c633589f7215c41944784473728a2d9967372eaf1a20e34c23e25ec658
test-bench-deps: {}
maintainer: caneroj1@tcnj.edu
synopsis: API Client for the Clarifai API.
changelog: ''
basic-deps:
  http-client: ! '>=0.4.26.2'
  bytestring: ! '>=0.10.6.0'
  lens-aeson: ! '>=1.0.0.5'
  base: ! '>=4.8 && <4.9'
  unordered-containers: ! '>=0.2.5.1'
  text: ! '>=1.2.1.3'
  wreq: ! '>=0.4.1.0'
  containers: ! '>=0.5.6.2'
  lens: ! '>=4.13'
  easy-file: ! '>=0.2.1'
  HTTP: ! '>=4000.2.22'
  scientific: ! '>=0.3.3.8'
  aeson: -any
  vector: ! '>=0.11.0.0'
all-versions:
- 0.2.0.0
author: Joseph Canero
latest: 0.2.0.0
description-type: markdown
description: ! "# clarifai-hs\nHaskell API Client for <a href=\"http://www.clarifai.com\">Clarifai</a>.\n\nClarifai
  provides image/video recognition services, and this library provides\na web client
  to their API.\n\nAll endpoints other than the <em>feedback</em> endpoint are implemented.
  This includes\n  - /info\n  - /token\n  - /tag\n\n## Installation\n\n<pre>cabal
  install clarifai</pre>\n\n## Example Usage\n\n### Authorization\nFirst create an
  ```App``` and then call the ```authorize``` function to authenticate your application.
  You must provide your client id and client secret.\n```haskell\n\nimport Network.Clarifai\nimport
  Data.Either\n\nclientID = \"id\"\nclientSecret = \"secret\"\n\nmain = do\n  let
  myApp = App clientID clientSecret\n  resp <- authorize myApp\n\n```\nThen you can
  check the response for errors, or use the access token it provides back in the form
  of a ```Client```.\n\n### Getting API Info\n```haskell\n-- Omitted previous code\nmain
  = do\n  -- Be sure to check for errors\n  let client = head $ rights [resp]\n  infoResponse
  <- info client\n```\n\nIf there are no errors, you will get back an ```Info``` containing
  various information about the statistics and limits of the Clarifai API, like maximum
  video size, maximum image size, etc. You can use this verify any files you may want
  to tag, before you send a tagging request.\n\n### Verification\nWhen going to verify
  batch sizes, it is important not to mix and match between videos and images. The
  batch sizes for images and videos are different, so you cannot verify the sizes
  of the batches together even though you can send them in the same request. I don't
  do any differentiating between what kind of file the ```FilePath``` points to.\n\nIf
  you are calling the ```verifyFiles``` function, however, you can have a list of
  both videos AND images, as long as the extensions of each ```FilePath``` indicate
  the type of the file.\n```haskell\n-- Omitted previous code\nmain = do\n  -- Be
  sure to check for errors\n  let apiInfo = head $ rights [infoResponse]\n  let filePaths
  = [filePath1, filePath2, filePath3]\n\n  -- Verify the image batch size\n  -- The
  return value is a Bool indicating whether your list is of appropriate size for the
  API.\n  verifyImageBatchSize apiInfo filePaths\n\n  -- Verify the sizes of the files
  in the list. As long as each FilePath indicates whether the file is a video or an
  image,\n  -- the size of the file will be checked to make sure it is within the
  appropriate bounds according to the API Info.\n  verifyFiles infoData fileNames\n```\n\n###
  Tagging\nWe can send a tag request with our list of ```FilePath```s. I've omitted
  any steps where we may have filtered out which files\n```verifyFiles``` marked as
  inappropriate for the request.\n```haskell\n-- Omitted previous code\ntagResponse
  <- tag client fileNames\n```\n\n## Contributing\nI'll gladly take contributions/improvements/pull
  requests.\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2015 Joe Canero\n\nPermission
  is hereby granted, free of charge, to any person obtaining a copy\nof this software
  and associated documentation files (the \"Software\"), to deal\nin the Software
  without restriction, including without limitation the rights\nto use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and
  to permit persons to whom the Software is\nfurnished to do so, subject to the following
  conditions:\n\nThe above copyright notice and this permission notice shall be included
  in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED
  \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
  OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
license-name: MIT
