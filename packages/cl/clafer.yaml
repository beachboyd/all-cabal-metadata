homepage: http://clafer.org
changelog-type: markdown
hash: e565e3dc7df318225aceadaee24c372cc52af7cbfcd7dba7e76345deaa2c6a11
test-bench-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.5
  lens-aeson: ! '>=1.0.0.5'
  tasty-th: ! '>=0.1.3'
  base: ! '>=4.7.0.1 && <5'
  filepath: ! '>=1.3.0.2'
  doctest: ! '>=0.10.1'
  HUnit: ! '>=1.2.5.2'
  containers: ! '>=0.5.5.1'
  lens: ! '>=4.6.0.1'
  data-stringmap: ! '>=1.0.1.1'
  mtl: ! '>=2.1.3.1'
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.10.1.2'
  QuickCheck: ! '>=2.6'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
maintainer: Michal Antkiewicz <mantkiew@gsd.uwaterloo.ca>
synopsis: ! 'Compiles Clafer models to other formats: Alloy, JavaScript, JSON, HTML,
  Dot.'
changelog: ! '##### Clafer Version 0.4.5 released on March 13, 2017


  * [Release](https://github.com/gsdlab/clafer/pull/91)


  ##### Clafer Version 0.4.4 released on Jun 23, 2016


  * [Release](https://github.com/gsdlab/clafer/pull/88)


  ##### Clafer Version 0.4.3 released on Dec 22, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/81)


  ##### Clafer Version 0.4.2.1 released on Oct 19, 2015


  * Fixed Haddock build, updated README, fixed a test case.


  ##### Clafer Version 0.4.2 released on Oct 16, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/74)


  ##### Clafer Version 0.4.1 released on Sep 1, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/71)


  ##### Clafer Version 0.4.0 released on Jul 28, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/68)


  ##### Clafer Version 0.3.10 released on April 24, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/66)


  ##### Clafer Version 0.3.9 released on March 06, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/63)


  ##### Clafer Version 0.3.8 released on January 27, 2015


  * [Release](https://github.com/gsdlab/clafer/pull/60)


  ##### Clafer Version 0.3.7 released on October 23, 2014


  * [Release](https://github.com/gsdlab/clafer/pull/53)


  ##### Clafer Version 0.3.6.1 released on July 08, 2014


  * [Release](https://github.com/gsdlab/clafer/pull/50)


  ##### Clafer Version 0.3.6 released on May 23, 2014


  * [Release](https://github.com/gsdlab/clafer/pull/48)


  ##### Clafer Version 0.3.5 released on January 20, 2014


  * [Release](https://github.com/gsdlab/clafer/pull/44)


  ##### Clafer Version 0.3.4 released on September 20, 2013


  ##### Clafer Version 0.3.3 released on August 14, 2013


  * [Release](https://github.com/gsdlab/clafer/pull/35)


  ##### Clafer Version 0.3.2 released on April 11, 2013


  ##### Clafer Version 0.3.1 released on October 17, 2012


  ##### Clafer Version 0.3 released on July 17, 2012


  This was the first release of Clafer and included all code since the beginning of
  the project.


  Basic features - See the `README.md`.

'
basic-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.5
  bytestring: ! '>=0.10.4.0'
  lens-aeson: ! '>=1.0.0.5'
  split: ! '>=0.2.2'
  base: ! '>=4.7.0.1 && <5'
  text: ! '>=1.1.0.0'
  executable-path: ! '>=0.0.3'
  filepath: ! '>=1.3.0.2'
  process: ! '>=1.2.0.0'
  network: ! '>=2.4.2.3'
  parsec: ! '>=3.1.5'
  array: ! '>=0.5.0.0'
  containers: ! '>=0.5.5.1'
  json-builder: ! '>=0.3'
  lens: ! '>=4.6.0.1'
  data-stringmap: ! '>=1.0.1.1'
  network-uri: ! '>=2.5.0.0'
  mtl: ! '>=2.1.3.1'
  cmdargs: ! '>=0.10.12'
  HTTP: ! '>=4000.2.10'
  file-embed: ! '>=0.0.9'
  transformers: ! '>=0.3.0.0'
  string-conversions: ! '>=0.3.0.3'
  aeson: ! '>=0.11.1.2'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
all-versions:
- 0.4.2.1
- 0.4.3
- 0.4.4
- 0.4.5
author: Kacper Bak, Jimmy Liang, Michal Antkiewicz, Ed Zulkoski, Luke Michael Brown,
  Paulius Juodisius, Rafael Olaechea
latest: 0.4.5
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/clafer.svg)](https://hackage.haskell.org/package/clafer)\n[![Build
  Status](https://secure.travis-ci.org/gsdlab/clafer.svg)](http://travis-ci.org/gsdlab/clafer)\n\n#
  Clafer, the language\n\n##### v0.4.5\n\n\n[Clafer](http://clafer.org) is a general-purpose
  lightweight structural modeling language developed by\n[GSD Lab](http://gsd.uwaterloo.ca/),
  [University of Waterloo](http://uwaterloo.ca), and\n[MODELS](http://www.itu.dk/research/models/)
  group at [IT University of Copenhagen](http://www.itu.dk/).\nClafer can be used
  for modeling of static hierarchical structures but has no support for modeling the
  change of the structures over time (behavior).\nThe main goal of Clafer is to make
  modeling more accessible to a wider range of users and domains.\n\nThere are many
  possible applications of Clafer; however, three are prominent:\n\n1. *Product-Line
  Architecture Modeling* - aims at representing and managing commonality and variability
  of assets in product lines and creating and verifying product configurations.\nClafer
  naturally supports multi-staged configuration.\n\n2. *Multi-Objective Product Optimization*
  - aims at finding a set of products in a given product line that are optimal with
  respect to a set of objectives.\nClafer multi-objective optimizer generates a Pareto
  front of optimal product configurations.\n\n3. *Domain Modeling* - aims at improving
  the understanding of the problem domain in the early stages of software development
  and determining the requirements with fewer defects.\nThis is also known as *Concept
  Modeling* or *Ontology Modeling*.\n\nMay applications actually combine the three.
  For example, see [Technical Report: Case Studies on E/E Architectures for Power
  Window and Central Door Locks Systems](http://www.clafer.org/2016/06/technical-report-case-studies-on-ee.html).\n\n###
  Resources\n\n* [Learning Clafer](http://t3-necsis.cs.uwaterloo.ca:8091/#learning-clafer)\n*
  [Cheat Sheet](doc/CheatSheet.md)\n* [Syntax Documentation](doc/clafer.pdf)\n* [Grammar](src/clafer.cf)\n\n#
  Clafer, the compiler\n\nClafer compiler provides a reference implementation of Clafer,
  the language.\nIt translates models in Clafer to other formats (e.g., Alloy, JSON,
  JS, HTML, DOT) to allow for reasoning and processing with existing tools (Alloy
  Analyzer, Choco3, and GraphViz).\n\nCurrently, the compiler is used by\n\n* Backends\n
  \ * Alloy-based Instance Generator ([ClaferIG](https://github.com/gsdlab/claferIG)),\n
  \ * Choco3-based Instance Generator and Multi-Objective Optimizer ([chocosolver](https://github.com/gsdlab/chocosolver).\n*
  Web Frontends\n  * Clafer Integrated Development Environment ([ClaferIDE](https://github.com/gsdlab/claferIDE)),\n
  \ * Clafer Configurator ([ClaferConfigurator](https://github.com/gsdlab/ClaferConfigurator)),\n
  \ * Multi-Objective [Visualizer and Explorer](https://github.com/gsdlab/ClaferMooVisualizer),
  and\n  * Clafer Wiki ([ClaferWiki](https://github.com/gsdlab/claferwiki)).\n\n##
  Contributors\n\n* [Micha≈Ç Antkiewicz](http://gsd.uwaterloo.ca/mantkiew), Main developer.\n*
  [Kacper Bak](http://gsd.uwaterloo.ca/kbak), Original developer.\n* [Jimmy Liang](http://gsd.uwaterloo.ca/jliang),
  Developer.\n* Luke Michael Brown, co-op student May-Aug 2013. Many improvements.\n*
  Paulius Juodisius, [customized BNFC generator](https://github.com/juodaspaulius/bnfc)
  and layout resolver.\n* [Rafael Olaechea](http://gsd.uwaterloo.ca/rolaechea), Multi-Objective
  Optimization extensions.\n\n## Getting the Clafer compiler\n\nClafer can be installed
  from a binary distribution (preferred), from Hackage, and from the source code.\n\n###
  Dependencies for running\n\nRegardless of the installation method, the following
  are\n\nOptional:\n\n* [Java Platform (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  v8+, 64bit\n  * only needed for running Alloy validation\n  * 32bit on Windows\n*
  [Alloy4.2](http://alloy.mit.edu/alloy/download.html)\n  * only needed for Alloy
  output validation\n* [GraphViz](http://graphviz.org/)\n  * the program `dot` is
  needed only in the `html` mode for SVG graph generation\n\n### Installation from
  binaries\n\nBinary distributions of the release 0.4.5 of Clafer Tools for Windows,
  Mac, and Linux,\ncan be downloaded from\n[Clafer Tools - Binary Distributions](http://gsd.uwaterloo.ca/clafer-tools-binary-distributions).\n\n1.
  Download the binaries and unpack `<target directory>` of your choice.\n2. Add the
  `<target directory>` to your system path so that the executables can be found.\n\n###
  Installation from Hackage\n\nClafer is available on [Hackage](http://hackage.haskell.org/package/clafer-0.4.5/)
  and it can be installed using either [`stack`](https://github.com/commercialhaskell/stack)
  or [`cabal-install`](https://hackage.haskell.org/package/cabal-install).\n\n####
  Installation using `stack`\n\nStack is the only requirement: no other Haskell tooling
  needs to be installed because stack will automatically install everything that's
  needed.\n\n1. [Install `stack`](https://github.com/commercialhaskell/stack#how-to-install)\n
  \  * (first time only) Execute `stack setup`.\n2. Execute `stack install clafer`.\n\n####
  Installation using `cabal-install`\n\nDependencies\n\n* [GHC](https://www.haskell.org/downloads)
  >= 7.10.3 or 8.0.1 are recommended,\n* `cabal-install` >= 1.22, should be installed
  together with a GHC distribution,\n* [alex](https://hackage.haskell.org/package/alex),\n*
  [happy](https://hackage.haskell.org/package/happy).\n\n1. Install GHC\n2. `cabal
  update`\n3. `cabal install alex happy`\n4. `cabal install clafer`\n5. on Windows
  `cd C:\\Users\\<user>\\AppData\\Roaming\\cabal\\x86_64-windows-ghc-8.0.1\\clafer-0.4.5`\n6.
  on Linux `ca ~/.cabal/share/x86_64-linux-ghc-8.0.1/clafer-0.4.5/`\n7. to automatically
  download Alloy jars, execute\n  * `make alloy4.2.jar`,\n  * move `alloy4.2.jar`
  to the location of the clafer executable.\n\n### Installation from the source code\n\nDependencies\n\n*
  [`stack`](https://github.com/commercialhaskell/stack#how-to-install)\n* [Git](http://git-scm.com/)\n\nOn
  Windows\n\n* [MSYS2](http://msys2.sourceforge.net/)\n  * it is installed automatically
  by `stack setup`\n  * update MSYS2 following the [update procedure](http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/):\n
  \   * `stack exec pacman -- -Sy`\n    * `stack exec pacman -- --needed -S bash pacman
  pacman-mirrors msys2-runtime`\n    * restart shell if the runtime was updated\n
  \   * `stack exec pacman -- -Su`\n  * `stack exec pacman -- -S make wget unzip diffutils`\n\n####
  Important: branches must correspond\n\nAll related projects are following the *simultaneous
  release model*.\nThe branch `master` contains releases, whereas the branch `develop`
  contains code under development.\nWhen building the tools, the branches should match.\nReleases
  from branches 'master` are guaranteed to work well together.\nDevelopment versions
  from branches `develop` should work well together but this might not always be the
  case.\n\n#### Building\n\n1. in some `<source directory>` of your choice, execute\n
  \ * `git clone git://github.com/gsdlab/clafer.git`\n2. in `<source directory>/clafer`,
  execute `stack setup`. This will install all dependencies, build tools, and MSYS2
  (on Windows).\n3. `cd <source directory>`\n  * `make` on Linux/Mac\n  * `stack exec
  make` on Windows\n\n### Installation\n\n1. Execute\n  * `make install to=<target
  directory>` on Linux/Mac\n  * `stack exec make install to=<target directory>` on
  Windows\n\n#### Note:\n> On Windows, use `/` with the `make` command instead of
  `\\`, e.g., `make install to=/c/clafer-tools-0.4.5/`\n\n## Integration with Sublime
  Text 2/3\n\nSee [ClaferToolsST](https://github.com/gsdlab/ClaferToolsST)\n\n## Integration
  with VIM\n\nSee [clafer-vim](https://github.com/wasowski/clafer-vim)\n\n## Usage\n\n###
  Clafer Compiler\n\n(As printed by `clafer --help`)\n\n```\nClafer 0.4.5\n\nclafer
  [OPTIONS] [FILE]\n\nCommon flags:\n  -m --mode=CLAFERMODE                    Generated
  output type. Available\n                                          CLAFERMODEs are:
  'alloy' (default,\n                                          Alloy 4.2); 'json'
  (intermediate\n                                          representation of Clafer
  model);\n                                          'clafer' (analyzed and desugared\n
  \                                         clafer model); 'html' (original model\n
  \                                         in HTML); 'graph' (graphical\n                                          representation
  written in DOT\n                                          language); 'cvlgraph'
  (cvl notation\n                                          representation written
  in DOT\n                                          language); 'choco' (Choco constraint\n
  \                                         programming solver). Multiple modes\n
  \                                         can be specified at the same time,\n                                          e.g.,
  '-m alloy -m html'.\n  -o --console-output                     Output code on console.\n
  \ -i --flatten-inheritance                Flatten inheritance ('alloy' mode\n                                          only).\n
  \    --timeout-analysis=INT               Timeout for analysis.\n  -l --no-layout
  \                         Don't resolve off-side rule layout.\n  -n --nl --new-layout
  \                   Use new fast layout resolver\n                                          (experimental).\n
  \ -c --check-duplicates                   Check duplicated clafer names in\n                                          the
  entire model.\n  -f --skip-resolver                      Skip name resolution.\n
  \ -k --keep-unused                        Keep uninstantated abstract clafers\n
  \                                         ('alloy' mode only).\n  -s --no-stats
  \                          Don't print statistics.\n  -v --validate                           Validate
  outputs of all modes. Uses\n                                          '<tooldir>/alloy4.2.jar'
  for Alloy\n                                          models, '<tooldir>/chocosolver.jar'\n
  \                                         for Alloy models, and Clafer\n                                          translator
  for desugared Clafer\n                                          models. Use '--tooldir'
  to override\n                                          the default location ('.')
  of these\n                                          tools.\n     --tooldir=DIR                        Specify
  the tools directory\n                                          ('validate' only).
  Default: '.'\n                                          (current directory).\n  -a
  --alloy-mapping                      Generate mapping to Alloy source\n                                          code
  ('alloy' mode only).\n     --self-contained                     Generate a self-contained
  html\n                                          document ('html' mode only).\n     --add-graph
  \                         Add a graph to the generated html\n                                          model
  ('html' mode only). Requires\n                                          the \"dot\"
  executable to be on the\n                                          system path.\n
  \    --sr --show-references               Whether the links for references\n                                          should
  be rendered. ('html' and\n                                          'graph' modes
  only).\n     --add-comments                       Include comments from the source\n
  \                                         file in the html output ('html' mode\n
  \                                         only).\n  -e --ecore2clafer                       Translate
  an ECore model into\n                                          Clafer.\n     --ss=SCOPESTRATEGY
  --scope-strategy  Use scope computation strategy:\n                                          none
  or simple (default).\n     --check-afm --afm                    Throws an error
  if the cardinality\n                                          of any of the clafers
  is above 1.\n     --meta-data                          Generate a 'fully qualified\n
  \                                         name'-'least-partially-qualified\n                                          name'-'unique
  ID' map ('.cfr-map').\n                                          In Alloy and Choco
  modes, generate\n                                          the scopes map ('.cfr-scope').\n
  \ -? --help                               Display help message\n  -V --version                            Print
  version information\n     --numeric-version                    Print just the version
  number\n```\n\nThe dependencies among the command line arguments are described on
  the [model wiki](http://t3-necsis.cs.uwaterloo.ca:8091/ClaferTools/CommandLineArguments).\n\nMultiple
  modes can be used at the same time. For example,\n\n`clafer model.cfr -m alloy -m
  json -m html -m graph --self-contained --show-references --no-stats`\n\nThe mode
  `-m alloy` is only the default mode if no other modes are given. When other modes
  are given, the mode `-m alloy` must be added explicitly if needed.\n\nAdditionally,
  `[OPTIONS]` can also be specified directly in the model file by inserting the following
  compiler directive as the first line of the file:\n\n```\n//# [OPTIONS]\n```\n\nfor
  example\n\n```\n//# --keep-unused -m=alloy\n```\n\nOptions given at command line
  override the options given in the file using `//#` which, in turn, override the
  defaults.\n\n### Using compiler directives\n\nCompiler directives are comments of
  the form\n\n```\n//# <directive name>\n```\n\nThe following directives are markers
  of locations in the input files for different purposes:\n\n* `//# FRAGMENT` - marks
  the beginning of the new [module fragment](http://gsd.uwaterloo.ca:8888/question/463/multi-fragment-modules).\n*
  `//# GRAPH` - marks the insertion point for a graph rendering. The graph is only
  produced in HTML mode with the argument `--add-graph`.\n* `//# STATS` - marks the
  insertion point for module statistics. The statistics can be omitted using the argument
  `--no-stats`.\n* `//# SUMMARY` - shorthand for `//# GRAPH` and `//# STATS`\n\n#
  Developing Clafer\n\nHere is some information about the development of the Clafer
  compiler.\n\n## Branching\n\nWe are following the simplified version of the [successful
  Git branching model](http://nvie.com/posts/a-successful-git-branching-model/).\nThe
  branch `master` is for releases and hot fixes only.\nThe branch `develop` is for
  minor development and for integration of features from feature branches.\nFor any
  substantial work, branch off from `develop` and create a pull request back into
  `develop` after the work is completed.\nWe do testing and code review before merging
  into develop.\nIf the `develop` is ahead, merge it into the feature branch and perform
  integration testing there.\nTo make a release, we create a pull request from `develop`
  into `master`.\nWe tag `master` with version numbers after each release merge.\n\n##
  Building\n\nWe have switched to [Haskell Tool Stack](https://github.com/commercialhaskell/stack#the-haskell-tool-stack).\nInstall
  the tool first.\n\n## Testing\n\nWe have both automated tests and regression tests.\n\nTo
  run the automated tests (including both unit tests and [doctests](https://github.com/sol/doctest#readme)),
  execute\n\n```\nstack test\n```\n\nTo only run unit tests, execute `stack test test-suite`.\n\nTo
  only run doctests, execute `stack test doctests`.\n\n> Note: it is still possible
  to run `cabal test` as previously; however, the `Makefile` uses `stack` by default.\n\nFor
  instructions for adding new modules to the doctest suite, see [cabal integration](https://github.com/sol/doctest#cabal-integration).\n\nTo
  run all the automated tests and the regression tests, execute\n\n```\nmake test\n```\n\nWe
  do test-driven development in the following way:\n\n1. create a test case Clafer
  model in either `test/positive` or `test/negative` depending on whether a test case
  should compile successfully or return an error. For example, see a positive test
  case [test/positive/redefinition.cfr](https://github.com/gsdlab/clafer/blob/namedDrefs/test/positive/redefinition.cfr).\n2.
  produce the intended compiler output automatically if possible and manually fix
  the output. Save the intended output as a regression test case. For example, see
  [test/regression/redefinition.cfr.reg](https://github.com/gsdlab/clafer/blob/namedDrefs/test/regression/redefinition.als.reg).\n3.
  implement the feature to reproduce the intended output: compiler the test case and
  execute\n\n```\ncd test\nmake diffRegressions\n```\n\nthis will show you how the
  current output diverges from the intended output.\n\n\n## Modifying the grammar\n\nWe
  are using a [customized version of BNCF](https://github.com/juodaspaulius/bnfc).\nClone
  the repository and install a binary of `bnfc` so that it's visible in your `PATH`.\nAfter
  changing the grammar, execute\n\n```\nmake grammar\n```\n\n\n# Need help?\n\n* Visit
  [language's website](http://clafer.org).\n* Report issues to [issue tracker](https://github.com/gsdlab/clafer/issues)\n"
license-name: MIT
