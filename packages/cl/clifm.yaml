homepage: https://github.com/pasqu4le/clifm
changelog-type: ''
hash: 2f6f6df64eeeb7fed58c1f7af5f9c87a0e32f145463b462704d1e170c903aa13
test-bench-deps: {}
maintainer: pasqu4le@gmail.com
synopsis: Command Line Interface File Manager
changelog: ''
basic-deps:
  pointedlist: ! '>=0.6 && <0.7'
  base: ! '>=4.11 && <4.12'
  time: ! '>=1.8 && <1.9'
  vty: ! '>=5.21 && <6'
  filepath: ! '>=1.4 && <1.5'
  process: ! '>=1.6 && <1.7'
  conduit: ! '>=1.3 && <1.4'
  containers: ! '>=0.5 && <0.6'
  lens: ! '>=4.16 && <4.17'
  byteunits: ! '>=0.4 && <0.5'
  optparse-applicative: ! '>=0.14 && <0.15'
  brick: ! '>=0.36 && <0.38'
  vector: ! '>=0.12 && <0.13'
  directory: ! '>=1.3 && <1.4'
all-versions:
- 0.3.1.0
- 0.4.1.0
- 0.5.0.0
- 0.5.2.1
author: pasqu4le
latest: 0.5.2.1
description-type: markdown
description: ! "# Command Line Interface File Manager\nClifm is a small file manager
  written in Haskell with a terminal-based interface. It allows you to explore directories
  in multiple Panes/Tabs and perform basic operations.\n\n![screenshot](https://github.com/pasqu4le/clifm/raw/master/screenshot.png)\n\n>
  Note: this is still an experiment. Directory navigation will do no harm, but double-check
  before starting operations on your file system. I take no responsibility for what
  you do with this software.\n\n## Installation\n> Note: You may need to install `ncurses`
  on your system before using clifm\n\nFor ArchLinux the binary from [the latest github
  release](https://github.com/pasqu4le/clifm/releases/latest) should work.\nFor other
  Linux distro the binary may work as well, or you can build from source.\n\nTo build
  from source you will need [GHC](https://www.haskell.org/ghc/) and [cabal-install](http://hackage.haskell.org/package/cabal-install).\nSince
  clifm is on Hackage you can just use:\n\n```\n$ cabal install clifm\n```\nor install
  from the cloned repository:\n```\n$ git clone https://github.com/pasqu4le/clifm.git\n$
  cd clifm\n$ cabal install\n```\n\n## Features\nClifm is a [brick](https://github.com/jtdaugherty/brick)
  application, that in turn builds upon [vty](https://github.com/jtdaugherty/vty).
  As such it supports a large number of terminals (not on Windows), handles resizing
  and more.\n\nIf your terminal supports a mouse you can use it to change Tab/Pane,
  click a button on the bottom, change your selection or open it (double-click), but
  using the keyboard you can perform every possible action. This is the list of all
  the keybindings:\n\n#### Bottom menu\n- L: open Se**l**ection menu\n- A: open T**a**b
  menu\n- P: open **P**ane menu\n- BackSpace: go **back** to main menu\n- Esc/Q: **Q**uit\n\n####
  Selection\n- Enter: Open directory/run executable file/open readable file in editor\n-
  Ctrl+(X/C): Cut/Copy the selected Item\n- Up/Down Arrow: move the selection in the
  current Tab\n- PageUp/PageDown: move the selection in the current Tab by one page
  at a time\n- Home/End: move the selection in the current Tab to beginning or end
  of list\n- Ctrl+R: **R**ename the selected Item\n- Ctrl+D: **D**elete the selected
  Item\n- Ctrl+O: **O**pen the selected directory in a New Tab\n- S: **S**how info
  about the selected Item\n\n#### Tabs\n- Tab/BackTab: Move to the next/previous tab\n-
  Ctrl+(Left/Right Arrow): Swap current tab's position with the previous/next one\n-
  Ctrl+V: Paste in the current Tab's directory\n- Ctrl+S: **S**earch for a file/folder
  in the current Tab's directory\n- K: **K**ill (close) the current Tab\n- M: **M**ake
  a new directory\n- T: **T**ouch (create an empty) file\n- G: **G**o to another directory\n-
  E: Open **E**mpty Tab\n- R: **R**efresh the current Tab\n- O: **O**rder by file
  name/file size/access time/modification time\n- I: **I**nvert order\n\n#### Panes\n-
  Left/Right Arrow: Focus on the previous/next Pane\n- Ctrl+E: Open **E**mpty Pane\n-
  Ctrl+K: **K**ill (close) the current Pane\n\nThe actions above will not work only
  if a prompt is up, or you try to do something not possible.\n\n## Command line arguments\nYou
  can have a list of command line arguments by running `clifm --help`.\n\n#### Starting
  directory\nIf you specify nothing `clifm` will open the current directory, but you
  can select another directory using `--dir-path` or `-d`, for example: `clifm -d
  \"/home\"`.\n\nIf the directory path is not valid `clifm` will open on an empty
  tab.\n\n#### Themes\nYou can load a theme from a file using `--theme` or `-t`, for
  example: `clifm -t \"theme/phosphor.ini\"`. If the file does not exists or cannot
  be loaded `clifm` will use the default theme.\n\nYou can use one of the existing
  themes in the `themes/` folder:\n- blackAndWhite.ini\n- paper.ini (inverted blackAndWhite)\n-
  phosphor.ini (like old monochrome monitors)\n- ocean.ini (very blue)\n\nYou can
  also write and use your own themes: copy the `themes/template.ini` file, fill in
  the attributes you want to change and delete those you like as default.\n\nComplete
  explanation from [Brick.Themes](https://hackage.haskell.org/package/brick-0.35/docs/Brick-Themes.html):\n>
  The file format is as follows:\n>\n> Customization files are INI-style files with
  two sections, both optional: \"default\" and \"other\".\n>\n> The \"default\" section
  specifies three optional fields:\n>\n> - \"default.fg\" - a color specification\n>
  - \"default.bg\" - a color specification\n> - \"default.style\" - a style specification\n>\n>
  A color specification can be any of the strings *black*, *red*, *green*, *yellow*,
  *blue*, *magenta*, *cyan*, *white*, *brightBlack*, *brightRed*, *brightGreen*, *brightYellow*,
  *brightBlue*, *brightMagenta*, *brightCyan*, *brightWhite*, or *default*.\n>\n>
  A style specification can be either one of the following values (without quotes)
  or a comma-delimited list of one or more of the following values (e.g. \"[bold,underline]\")
  indicating that all of the specified styles be used. Valid styles are *standout*,
  *underline*, *reverseVideo*, *blink*, *dim*, and *bold*.\n>\n> The other section
  specifies for each attribute name in the theme the same fg, bg, and style settings
  as for the default attribute. Furthermore, if an attribute name has multiple components,
  the fields in the INI file should use periods as delimiters. For example, if a theme
  has an attribute name (\"foo\" <> \"bar\"), then the file may specify three fields:\n>\n>
  - foo.bar.fg - a color specification\n> - foo.bar.bg - a color specification\n>
  - foo.bar.style - a style specification\n>\n> Any color or style specifications
  omitted from the file mean that those attribute or style settings will use the theme's
  default value instead.\n>\n> Attribute names with multiple components (e.g. attr1
  <> attr2) can be referenced in customization files by separating the names with
  a dot. For example, the attribute name \"list\" <> \"selected\" can be referenced
  by using the string \"list.selected\".\n\n#### Threads for directory size computation\nDirectory
  size is calculated by visiting a directory tree to sum it's files sizes (using [conduit](http://hackage.haskell.org/package/conduit))
  and it may take a while. For this reason these will be calculated in different threads.
  \n\nYou can limit how many of these threads to have at the same time by using `--thread-num`
  or `-n`, for example: `clifm -n 8`.\n\nYou are likely to have the best results with
  as many threads as your processor's cores. The default limit is set to 4.\n\n##
  TODOs\nRight now nothing is planned.\n\nSuggestions and requests are always welcome,
  if you have any or you find a bug please [open a new issue](https://github.com/pasqu4le/clifm/issues/new).\n"
license-name: BSD-3-Clause
