homepage: https://github.com/cjdev/cloud-seeder#readme
changelog-type: markdown
hash: c07992db3d1f65a27f1d2a7e62a8ee271135e80ee7ba50cf4c7aa68c7e9333d2
test-bench-deps:
  bytestring: -any
  these: -any
  base: -any
  hspec: -any
  text: -any
  fast-logger: -any
  containers: -any
  cloud-seeder: -any
  lens: -any
  mtl: -any
  monad-logger: -any
  transformers: -any
  optparse-applicative: -any
  deepseq: -any
  amazonka-cloudformation: -any
  monad-mock: -any
  yaml: -any
maintainer: Alexis King <lexi.lambda@gmail.com>, Michael Adlai Arnold <michaelaarnold@gmail.com>
synopsis: A tool for interacting with AWS CloudFormation
changelog: ! '## 0.2.0.0 (April 19th, 2018)


  ### New Features


  - Added `wait` command to wait until stack is in a stable state

  - Added `teardown` command to destroy stack

  - Logging now uses ToJSON instances to provide accurate and efficient YAML

  - Stack policy can now be set in deployment configurations using `policy`

  - CLI gives useful information about stacks when actions complete

  - Already-provisioned stack parameters default to previously used values


  ### Bugfixes and Minor Changes


  - Stability and error-handling improvements

  - onCreate hooks run only when creating, rather than updating


  ## 0.1.0.0 (July 26th, 2017)


  ### Breaking Changes


  - The `deploy` command is renamed to `provision`.

  - The environment is now passed as a positional argument instead of as an environment
  variable.


  ### New Features


  - Added support for configuring parameters with command-line flags and hardcoded
  environments, in addition to environment variables.

  - Parameters are now parsed from template files to determine whether or not they
  are optional.

  - Tags `cj:application` and `cj:environment` are always added, based on the mandatory
  `ENV` positional argument and information in the configuration.

  - The `whenEnv` and `getEnvArg` functions are provided to conditionally configure
  stacks based on the current environment.


  ### Bugfixes and Minor Changes


  - Various improvements to CLI help text.


  ## 0.0.0.0 (June 26th, 2017)


  - Initial release

'
basic-deps:
  amazonka: ! '>=1.4.5'
  exceptions: ! '>=0.6'
  bytestring: -any
  base: ! '>=4.9.0.0 && <5'
  unordered-containers: -any
  text: -any
  uuid: ! '>=1.2.6 && <2'
  monad-control: ! '>=1.0.0.0'
  crypto-api: ! '>=0.3'
  containers: -any
  lens: -any
  amazonka-kms: ! '>=1.4.5'
  amazonka-core: ! '>=1.4.5'
  mtl: -any
  transformers-base: -any
  monad-logger: ! '>=0.3.11.1'
  transformers: -any
  optparse-applicative: ! '>=0.14.0.0'
  deepseq: ! '>=1.4.1.0'
  text-conversions: ! '>=0.3.0'
  amazonka-cloudformation: ! '>=1.4.5'
  aeson: ! '>=0.11.2.0'
  amazonka-s3: ! '>=1.4.5'
  yaml: ! '>=0.8'
all-versions:
- '0.0.0.0'
- '0.1.0.0'
- '0.2.0.0'
author: Alexis King <lexi.lambda@gmail.com>, Michael Adlai Arnold <michaelaarnold@gmail.com>
latest: '0.2.0.0'
description-type: markdown
description: ! "# cloud-seeder [![Build Status](https://travis-ci.org/cjdev/cloud-seeder.svg?branch=master)](https://travis-ci.org/cjdev/cloud-seeder)\n\n`cloud-seeder`
  is a Haskell DSL for provisioning and controlling [CloudFormation][aws-cloudformation]
  stacks. It provides an opinionated mechanism for provisioning a set of related stacks
  called a “deployment”. You write ordinary CloudFormation [templates][aws-cloudformation-templates]
  as YAML, and `cloud-seeder` helps to create a self-executing command-line interface
  to orchestrate their deployment.\n\nFor example consider a template that provisions
  an S3 bucket with a configurable name, `bucket.yaml`:\n\n```yaml\nAWSTemplateFormatVersion:
  '2010-09-09'\n\nParameters:\n  BucketName:\n    Type: String\n\nResources:\n  Bucket:\n
  \   Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref BucketName\n\nOutputs:\n
  \ Bucket:\n    Value: !Ref Bucket\n  BucketDomain:\n    Value: !GetAtt Bucket.DomainName\n```\n\nUsing
  `cloud-seeder`, you can create a deployment script in the same directory, `config.hs`:\n\n```haskell\n#!/usr/bin/env
  stack\n-- stack runhaskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Network.CloudSeeder\n\nmain
  = cliIO $ deployment \"cloud-seeder-example\" $ do\n  stack \"bucket\" $ do\n    flag
  \"BucketName\"\n```\n\nThis file contains a declarative configuration of your deployment,
  but it also serves as an executable command-line tool! Since it has a shebang at
  the top, it can be used directly to run the deployment with a pleasant interface:\n\n```\n$
  ./config.hs provision bucket production --BucketName my-awesome-s3-bucket\n```\n\nThe
  first argument to the `provision` command is the stack you want to provision, and
  the second argument is the name of some “environment” to provision in. This environment
  is used to namespace the eventual stack name, so the above command will spin up
  a new CloudFormation stack called `production-cloud-seeder-example-bucket`. The
  environment is also available in templates themselves if they specify an `Env` [parameter][aws-cloudformation-parameters].
  The generated command-line interface is also robust in the face of mistakes, and
  it won’t do anything if a required parameter isn’t specified.\n\nWhile `cloud-seeder`
  *can* be used for single-stack deployments, it’s far more useful when used with
  multiple stacks at a time, which may possibly depend on other stacks’ [outputs][aws-cloudformation-outputs].
  For example, we may now wish to serve resources out of our S3 bucket by using CloudFront.
  We can write a second template to do the job, `cdn.yaml`:\n\n```yaml\nAWSTemplateFormatVersion:
  '2010-09-09'\n\nParameters:\n  BucketDomainName:\n    Type: String\n\nResources:\n
  \ Distribution:\n    Type: AWS::CloudFront::Distribution\n    Properties:\n      DistributionConfig:\n
  \       Enabled: true\n        Origins:\n        - DomainName: !Ref BucketDomainName\n
  \         Id: origin\n          S3OriginConfig: {}\n        # ...\n```\n\nWe can
  now add `cdn` to our deployment configuration:\n\n```haskell\n#!/usr/bin/env stack\n--
  stack runhaskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Network.CloudSeeder\n\nmain
  = deployment \"cloud-seeder-example\" $ do\n  stack \"bucket\" $ do\n    flag \"BucketName\"\n\n
  \ stack_ \"cdn\"\n```\n\nWe use `stack_` instead of `stack` to omit the configuration
  block, since the `cdn` stack doesn’t need any additional configuration options.
  When we go to provision the stack, it will work just fine:\n\n```\n$ ./config.hs
  provision cdn production\n```\n\nNote that we did **not** have to specify the `BucketDomainName`
  [parameter][aws-cloudformation-parameters] explicitly, because it was an [output][aws-cloudformation-outputs]
  from the `bucket` stack, so it is automatically passed downward to the `cdn` stack.
  This allows stacks defined lower in the configuration to build on top of resources
  defined in previous ones.\n\nFor more information about all of the configuration
  options available, as well as some of the implementation details, see [the documentation
  on Hackage][cloud-seeder].\n\n[aws-cloudformation]: https://aws.amazon.com/cloudformation/\n[aws-cloudformation-outputs]:
  http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html\n[aws-cloudformation-parameters]:
  http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html\n[aws-cloudformation-templates]:
  http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.html\n[cloud-seeder]:
  http://hackage.haskell.org/package/cloud-seeder\n"
license-name: ISC
