homepage: http://clafer.org
changelog-type: markdown
hash: a7eec9a6fd4241a617dac64d791bc05202ed2a4f20edcaa254ea6bc160693c21
test-bench-deps:
  clafer: ==0.4.5
  tasty-th: ! '>=0.1.3'
  base: ! '>=4.7.0.1 && <5'
  filepath: ! '>=1.3.0.2'
  HUnit: ! '>=1.2.5.2'
  array: ! '>=0.5.0.0'
  claferIG: ==0.4.5
  cmdargs: ! '>=0.10.12'
  tasty-hunit: ! '>=0.9.2'
  transformers: ! '>=0.3.0.0'
  tasty: ! '>=0.10.1.2'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
maintainer: Michal Antkiewicz <mantkiew@gsd.uwaterloo.ca>
synopsis: claferIG is an interactive tool that generates instances of Clafer models.
changelog: ! '##### ClaferIG Version 0.4.5 released on Mar 13, 2017


  * [Release](https://github.com/gsdlab/claferIG/pull/33)


  ##### ClaferIG Version 0.4.4 released on Jun 23, 2016


  * [Release](https://github.com/gsdlab/claferIG/pull/32)


  ##### ClaferIG Version 0.4.3 released on Dec 22, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/31)


  ##### ClaferIG Version 0.4.2.1 released on Oct 19, 2015


  * Fixed Java manifest file, added stack instructions to README


  ##### ClaferIG Version 0.4.2 released on Oct 16, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/28)


  ##### ClaferIG Version 0.4.1 released on Sep 1, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/27)


  ##### ClaferIG Version 0.4.0 released on Jul 28, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/26)


  ##### ClaferIG Version 0.3.10 released on April 24, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/25)


  ##### ClaferIG Version 0.3.9 released on March 06, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/24)


  ##### ClaferIG Version 0.3.8 released on January 27, 2015


  * [Release](https://github.com/gsdlab/claferIG/pull/23)


  ##### ClaferIG Version 0.3.7 released on October 23, 2014


  * [Release](https://github.com/gsdlab/claferIG/pull/22)


  ##### ClaferIG Version 0.3.6.1 released on July 08, 2014


  * [Release](https://github.com/gsdlab/claferIG/pull/20)


  ##### ClaferIG Version 0.3.6 released on May 23, 2014


  * [Release](https://github.com/gsdlab/claferIG/pull/19)


  ##### ClaferIG Version 0.3.5 released on January 20, 2014


  * [Release](https://github.com/gsdlab/claferIG/pull/17)


  ##### ClaferIG Version 0.3.4 released on September 20, 2013


  ##### ClaferIG Version 0.3.3 released on August 14, 2013


  * [Release](https://github.com/gsdlab/claferIG/pull/12)


  ##### ClaferIG Version 0.3.2 released on April 11, 2013


  ##### ClaferIG Version 0.3.1 released on October 17, 2012


  ##### ClaferIG Version 0.3 released on July 17, 2012


  This was the first release of Clafer Instance Generator and included all code since
  the beginning of the project.

'
basic-deps:
  mtl-compat: ! '>=0.2.1'
  clafer: ==0.4.5
  haskeline: ! '>=0.7.1.2'
  base: ! '>=4.7.0.1 && <5'
  HaXml: ! '>=1.25.3'
  executable-path: ! '>=0.0.3'
  filepath: ! '>=1.3.0.2'
  process: ! '>=1.2.0.0'
  parsec: ! '>=3.1.5'
  array: ! '>=0.5.0.0'
  claferIG: ==0.4.5
  containers: ! '>=0.5.5.1'
  json-builder: ! '>=0.3'
  data-stringmap: ! '>=1.0.1.1'
  mtl: ! '>=2.1.3.1'
  cmdargs: ! '>=0.10.12'
  transformers: ! '>=0.3.0.0'
  string-conversions: ! '>=0.3.0.3'
  transformers-compat: ! '>=0.3'
  directory: ! '>=1.2.1.0'
all-versions:
- 0.4.2.1
- 0.4.3
- 0.4.4
- 0.4.5
author: Jimmy Liang, Michal Antkiewicz, Luke Michael Brown
latest: 0.4.5
description-type: markdown
description: ! "# Clafer Instance Generator\n\n##### v0.4.5\n\n[Clafer](http://clafer.org)
  is a powerful (equivalent to first-order predicate logic) yet lightweight structural
  modeling language. Despite simplicity and conciseness of Clafer, writing correct
  models remains challenging due to hard-to-predict interactions among all constraints
  expressed in the model.\n\n**Clafer instance generator** (ClaferIG) is an interactive
  tool that generates instances and counter examples of concrete clafers in a Clafer
  model. If the concrete clafers do not have contradicting constraints, the generator
  produces valid instance data. Otherwise, the generator produces an unsatisfiable
  core which included all contradicting constraints and generates a counter example
  by removing one constraint from the core. The generator can potentially produce
  many instances if the concrete clafers are not fully specialized. The generator
  produces different instances on-demand. With these capabilities, the instance generator
  can be used for debugging models: checking the consistency of the model and detecting
  under- and overconstraining of the model. The instance generator can also be used
  programmatically via API (the command line and interactive session interfaces only
  use the API).\n\nFor more information, see [technical report](http://gsd.uwaterloo.ca/node/462).\n\n##
  Contributors\n\n* [Micha≈Ç Antkiewicz](http://gsd.uwaterloo.ca/mantkiew), Main developer.\n*
  [Jimmy Liang](http://gsd.uwaterloo.ca/jliang), Original developer.\n* Luke Michael
  Brown, co-op student May-Aug 2013. Many improvements.\n\n## Getting the Clafer Instance
  Generator\n\nClafer can be installed from a binary distribution (preferred), from
  Hackage, and from the source code.\n\n### Dependencies for running\n\nRegardless
  of the installation method, the following are required:\n\n* [Clafer](https://github.com/gsdlab/clafer)
  v0.4.5\n* [Java Platform (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  v8+, 64bit\n  * On Windows, Java must be 32bit because of Alloy, 64bit otherwise\n*
  [Alloy4.2](http://alloy.mit.edu/alloy/download.html)\n\n### Installation from binaries\n\nBinary
  distributions of the release 0.4.5 of Clafer Tools for Windows, Mac, and Linux,\ncan
  be downloaded from [Clafer Tools - Binary Distributions](http://gsd.uwaterloo.ca/clafer-tools-binary-distributions).\n\n1.
  download the binaries and unpack `<target directory>` of your choice,\n2. add the
  `<target directory>` to your system path so that the executables can be found.\n\n###
  Installation From Hackage\n\nClafer is now available on [Hackage](http://hackage.haskell.org/package/claferIG-0.4.5/)
  and it can be installed using either [`stack`](https://github.com/commercialhaskell/stack)
  or [`cabal-install`](https://hackage.haskell.org/package/cabal-install).\n\n####
  Installation using `stack`\n\nStack is the only requirement: no other Haskell tooling
  needs to be installed because stack will automatically install the needed Haskell
  build tools.\n\n1. [install `stack`](https://github.com/commercialhaskell/stack#how-to-install)\n2.
  Execute\n  * `stack install claferIG`\n  * ``` cd `stack --local-bin-path` ```\n
  \ * `wget http://alloy.mit.edu/alloy/downloads/alloy4.2_2015-02-22.jar`\n  * `mv
  alloy4.2_2015-02-22.jar alloy4.2.jar`\n  * `wget https://github.com/gsdlab/claferIG/raw/master/alloyIG.jar`\n
  \ * `mkdir lib`\n  * `cd lib`\n  * Depending on your OS:\n    * for Win, `stack
  exec wget --  https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.dll`\n
  \   * for Linux, `wget https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.so`\n
  \   * for Mac, `wget https://github.com/gsdlab/claferIG/raw/master/lib/libminisatprover.dylib`\n\n####
  Installation using `cabal-install`\n\nDependencies\n\n* [GHC](https://www.haskell.org/downloads)
  >= 7.10.3 and 8.0.1 are recommended,\n* `cabal-install` >= 1.18, should be installed
  together with a GHC distribution,\n\n1. Install GHC\n2. `cabal update`\n3. `cabal
  install claferIG`\n4. `cd <cabal's lib or share folder>`  (`C:\\Users\\<user>\\AppData\\Roaming\\cabal\\x86_64-windows-ghc-8.0.1\\claferIG-0.4.5`
  on Windows or `.cabal/share/x86_64-linux-ghc-8.0.1/claferIG-0.4.5/` on Linux)\n5.
  to automatically download alloy4.2.jar\n  * execute `make alloy4.2.jar`\n7. copy
  the following into the Cabal's `bin` folder\n  * the file `alloyIG.jar`\n  * the
  file `alloy4.2.jar`\n  * the folder `lib`\n\n### Installation from the source code\n\nDependencies\n\n*
  [GHC](https://www.haskell.org/downloads) >= v7.10.3\n* [Clafer compiler](https://github.com/gsdlab/clafer)
  (to produce Alloy models (`.als`)).\n* On Linux, might need to manually install
  `zlib1g-dev` and `libncurses5-dev` to build one of Haskell packages on which ClaferIG
  depends\n  * on Ubuntu, execute `sudo apt-get install zlib1g-dev libncurses5-dev`\n\nOn
  Windows\n\n* [MSYS2](http://msys2.sourceforge.net/)\n* it is installed automatically
  by `stack setup` (see Building below)\n* update MSYS2 packages\n   * follow [III.
  Updating packages](http://sourceforge.net/p/msys2/wiki/MSYS2%20installation/) but
  always execute `stack exec pacman -- <arguments for pacman>`\n* execute\n   * `stack
  exec pacman -- -S make wget unzip diffutils`\n\n### Important: branches must correspond\n\nAll
  related projects are following the *simultaneous release model*.\nThe branch `master`
  contains releases, whereas the branch `develop` contains code under development.\nWhen
  building the tools, the branches should match.\nReleases from branches 'master`
  are guaranteed to work well together.\nDevelopment versions from branches `develop`
  should work well together but this might not always be the case.\n\n### Building\n\n1.
  install the [Clafer compiler](https://github.com/gsdlab/clafer)\n2. in some `<source
  directory>`, execute `git clone git://github.com/gsdlab/claferIG.git`\n3. in `<source
  directory>/claferIG`, execute `stack setup`. This will install all dependencies,
  build tools, and MSYS2 (on Windows).\n4. `cd <source directory>/claferIG`\n  * `make`\n\n###
  Installation\n\n1. execute `make install to=<target directory>`\n\n#### Note:\n>
  On Windows, use `/` with the `make` command instead of `\\`, e.g., `make install
  to=/c/clafer-tools-0.4.5/`\n\n\n## Integration with Sublime Text 2/3\n\n\nSee [ClaferToolsST](https://github.com/gsdlab/ClaferToolsST)\n\n##
  Integration with VIM\n\n\nSee [clafer-vim](https://github.com/wasowski/clafer-vim)\n\n#
  Usage\n\nClafer Instance Generator can be used in interactive and batch modes, as
  well as, an API.\n\n## Command-line Usage\n\n(As printed by `claferIG --help`)\n\n```\nClaferIG
  v0.4.5\n\nclaferIG [OPTIONS] [FILE]\n\nCommon flags:\n     --all=INT                                 Saves
  all instances up to the\n                                               provided
  scope or a\n                                               counterexample.\n     --savedir=FILE
  \                           Specify the directory for\n                                               storing
  saved files.\n     --alloysolution                           Convert Alloy solution
  to a\n                                               Clafer solution.\n  -b --bitwidth=INTEGER
  \                       Set the bitwidth for integers.\n  -m --maxint=INTEGER                          Set
  the bitwidth for integers\n                                               based
  on the largest required\n                                               number.
  Overrides --bitwidth\n                                               argument.\n
  \ -u --useuids                                 Use unique clafer names in the\n
  \                                              Clafer solution.\n     --addtypes
  \                               Add colon/reference types to\n                                               the
  Clafer solution.\n  -j --json                                    Render solution
  as JSON\n                                               (forces 'addUids').\n  -i
  --flatten-inheritance-comp                Flatten inheritance during\n                                               compiling
  ('alloy' and 'Alloy'\n                                               modes only)\n
  \ -l --no-layout-comp                          Don't resolve off-side rule\n                                               layout
  during compiling\n  -c --check-duplicates-comp                   Check duplicated
  clafer names\n                                               during compiling\n
  \ -f --skip-resolver-comp                      Skip name resolution during\n                                               compiling\n
  \    --ss=SCOPESTRATEGY --scope-strategy-comp  Use scope computation strategy\n
  \                                              during compiling: none or simple\n
  \                                              (default).\n  -? --help                                    Display
  help message\n  -V --version                                 Print version information\n```\n\n`claferIG
  <model file name>.cfr`\n\n- opens an interactive session and displays an instance
  or a counterexample.\n\n`claferIG <model file name>.cfr -all <scope>`\n\n- opens
  a non-interactive session and saves all instances up to the provided scope or a
  counterexample to files named `<model file name>.cfr.<instance number>.data`, one
  instance per file.\n\n## Interactive Session Usage\n\nIn the interactive mode, the
  users can invoke the following commands by pressing a letter marked in  the command
  name between '' or the whole command as marked by '':\n\n```\nClaferIG v0.4.5\n\nYou
  can invoke the following commands as indicated by single quotes:\n[tab]              -
  print the available commands\n                   - auto-complete command name, a
  clafer name, or clafer instance name in a given context\n'n'ext, [enter]    - to
  produce the next instance if available or to output a message that no more\n                     instances
  exist within the given scope\n'i'ncrease         - to increase the maximum number
  of instances of a given clafer or all clafers (scope)\n's'et              - to set
  the maximum number of instances of a given clafer or all clafers (scope)\n'm'axint,
  'maxint' - to set the bitwidth by providing the largest integer\nsa'v'e             -
  to save all instances displayed so far or a counterexample to files named\n                     <model
  file name>.cfr.<instance number>.data, one instance per file\n'q'uit             -
  to quit the interactive session\n'r'eload           - to reload your clafer model\n'h'elp
  \            - to display this menu options summary\n'scope'            - to print
  out the values of the global scope and individual Clafer scopes\n'saveScopes'       -
  to generate a '<model>.cfr-scope' file with the current scopes\n'loadScopes'       -
  to load scopes from a '<model>.cfr-scope' file\n'setUnsatCoreMinimization' - to
  choose UnSAT core minimization strategy [fastest | medium | best]. Default: fastest\n'c',
  'claferModel' - to print out the original Clafer model verbatim\n'a', 'alloyModel'
  \ - to print out the output of Clafer translator verbatim\n'alloyInstance'    -
  to print out the Alloy xml document of the most recent solution\n'f'ind             -
  to print a Clafer with given name found in the most recent solution\n\nParameterized
  command usage:\n'i [enter]'         - to increase for all clafers by 1\n'i <name>
  [enter]'  - to increase for the clafer <name> by 1\n'i <name> <number>' - to increase
  for the clafer <name> by <number>\n's <number> [enter]'- to set for the clafers
  to <number>\n's <name> <number>' - to set for the clafer <name> to <number>\n'f
  <name>'          - to display a clafer <name>\n'setUnsatCoreMinimization fastest'
  - fastest but the worst\n'setUnsatCoreMinimization medium'\n'setUnsatCoreMinimization
  best' - best but slowest even for modest size cores\n```\n\n## Output format\n\nThere
  are two output formats: native (plain text, default) and JSON (`--json`).\n\n###
  Instance data (native)\n\nThe instance data notation is very similar to a regular
  Clafer notation for concrete clafers with a few differences:\n\n* no constraints\n*
  no types and super types\n    * except when `--useuids --addtypes` parameters are
  used\n* no clafer and group cardinalities (each clafer has the default group `(0..*)`
  and clafer `(1..1)` cardinality)\n* no clafers not present in the instance\n\nAdditionally,
  the data notation contains concrete values of the clafers and suffix numbers to
  distinguish among multiple instances of the same clafer.\n\n### Note:\n> The instance
  data models could be read by the Clafer translator if the translator had simple
  type inference support.\n\n#### Example\n\nFor a model\n\n```\nabstract A\n    a
  ?\n    b +\n    c -> integer ?\n    d -> E 2\n    g -> E 2\n        h -> integer\n\nabstract
  E\n    f ->> integer +\n\na1 : A\ne1 : E\ne2 : E\n```\n\nA possible instance data
  looks as follows:\n\n```\n=== Instance 1 Begin ===\n\na1\n    b$1\n    b$2\n    c
  -> 10\n    d$1 -> e1\n    d$2 -> e2\n    g1 -> e1\n        h$1 -> 5\n    g2 -> e2\n
  \       h$2 -> 2\n\ne1\n    f$1 -> 2\n    f$2 -> 3\n    f$3 -> 4\n    f$4 -> 2\n\n---
  Instance 1 End ---\n```\n\n### Near-miss instance\n\nNear-miss instance notation
  is the same as the instance data notation. Additionally, it indicates which constraints
  belong to the UnSAT Core.\n\n#### Example\n\nFor a model\n\n```\nabstract A\n    a
  ?\n    b ?\n        [ a ]   // C1\n\na1 : A\n    [ no a ]    // C2\n    [ b ]       //
  C3\n```\n\nConstraints C1, C2, and C3 form an UnSAT Core. Removal of any of them
  will make the model satisfiable. The constraint C1 is part of the model and cannot
  be removed (part of domain knowledge). Therefore, either C2 or C3 must be removed
  to remove the inconsistency.\n\nOn possible near-miss instance:\n\n```\na1\n    a\n
  \   b\n```\n\nHere, `C1` and `C3` are satisfied but `C2` is not. To resolve the
  conflict and assuming that the counter example is actually a correct instance data,
  the user has to modify the model by removing `C2`. However, should the counter example
  actually represent incorrect instance data, the user can remove `C3` to resolve
  the inconsistency.\n\n## Troubleshooting\n\n\nIf you get an error:\n\n```\nException
  in thread \"main\" java.lang.UnsatisfiedLinkError: no minisatproverx1 in java.library.path\n
  at java.lang.ClassLoader.loadLibrary(Unknown Source)\n at java.lang.Runtime.loadLibrary0(Unknown
  Source)\n at java.lang.System.loadLibrary(Unknown Source)\n at org.clafer.ig.AlloyIG.main(AlloyIG.java:275)\n```\n\nit
  means that you have a 64bit Java on Windows instead of the required 32bit one.\nOn
  Windows, Alloy only supports Minisat with UnSAT core on 32bit Java.\nThere's nothing
  we can do.\n\n## How it works\n\nThe Clafer instance generator:\n\n* translates
  the input Clafer model (.cfr) to an Alloy4.2 model (.als). The compiler's intermediate
  representation (IR) contains the mapping between Clafer names and Alloy names. The
  IR also contains the scopes for each Alloy signature to ensure that a valid instance
  can be found if it exists\n* invokes Alloy Analyzer to produce an instance or find
  an UnSAT core\n** given an UnSAT core, removes constraints from the core until an
  instance is found - that instance represents the counterexample which violates the
  removed constraints\n* translates the instance or the counterexample data produced
  by Alloy Analyzer to Clafer instance data format using the name map from IR in a
  reverse direction,\n* for a counterexample, translates the counter example in Alloy
  to Claefr instance data and constraint violations in Alloy into constraint violations
  in Clafer model\n\n# Need help?\n\n* Visit [language's website](http://clafer.org).\n*
  Report issues to [issue tracker](https://github.com/gsdlab/claferIG/issues)\n"
license-name: MIT
