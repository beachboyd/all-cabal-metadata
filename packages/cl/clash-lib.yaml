homepage: http://www.clash-lang.org/
changelog-type: markdown
hash: 1287ad21deea61d639dca3ad1dc52b01f309ec8d3e01d32b6f00d3747982635a
test-bench-deps: {}
maintainer: Christiaan Baaij <christiaan.baaij@gmail.com>
synopsis: CAES Language for Synchronous Hardware - As a Library
changelog: ! "# Changelog for the [`clash-lib`](http://hackage.haskell.org/package/clash-lib)
  package\n\n## 0.99.3 *July 28th 2018*\n* Fixes bugs:\n  * Evaluator recognizes `Bit`
  literals [#329](https://github.com/clash-lang/clash-compiler/issues/329)\n  * Use
  existential type-variables in context of GADT pattern match\n  * Do not create zero-bit
  temporary variables in generated HDL\n  * Use correct arguments in nested primitives
  [#323](https://github.com/clash-lang/clash-compiler/issues/329)\n  * Zero-constructor
  data type needs 0 bits [#238](https://github.com/clash-lang/clash-compiler/issues/238)\n
  \ * Create empty component when result needs 0 bits\n  * Evaluator performs BigNat
  arithmetic\n\n## 0.99.1 *May 12th 2018*\n* Allow `~NAME[N]` tag inside `~GENSYM[X]`\n*
  Support HDL record selector generation [#313](https://github.com/clash-lang/clash-compiler/pull/313)\n\n##
  0.99 *March 31st 2018*\n* New features:\n  * Support for `clash-prelude-0.99`:\n
  \     * Explicit clock and reset arguments\n      * Overhaul of `TopEntity` annotations\n
  \ * Hierarchies with multiple synthesisable boundaries by allowing more than one\n
  \   function in scope to have a `Synthesize` annotation.\n    * Local caching of
  functions with a `Synthesize` annotation\n  * `Bit` type is mapped to a HDL scalar
  type (e.g. `std_logic` in VHDL)\n  * Improved name preservation\n  * Zero-bit values
  are filtered out of the generated HDL\n  * Improved compile-time computation\n*
  Many bug fixes\n\n## 0.7.1 *April 11th 2017*\n* New features:\n  * Support distribution
  of primitive templates with Cabal/Hackage packages [commit](https://github.com/clash-lang/clash-compiler/commit/82cd31863aafcbaf3bdbf7746d89d13859af5aaf)\n
  \ * Find memory data files and primitive files relative to import dirs (`-i<DIR>`)\n*
  Fixes bugs:\n  * `case (EmptyCase ty) of ty' { ... }` -> `EmptyCase ty'` [#198](https://github.com/clash-lang/clash-compiler/issues/198)\n
  \ * `BitVector.split#` apply the correct type arguments\n\n## 0.7 *January 16th
  2017*\n* New features:\n  * Support for `clash-prelude` 0.11\n  * Primitive templates
  can include QSys files\n  * VHDL blackboxes: support additional libraries and uses
  keywords in generated VHDL\n  * Highly limited Float/Double support (literals and
  `Rational` conversion), hidden behind the `-clash-float-support` flag.\n* Fixes
  bugs:\n  * Reduce type families inside clock period calculation [#180](https://github.com/clash-lang/clash-compiler/issues/180)\n
  \ * Only output signed literals as hex when they're multiple of 4 bits [#187](https://github.com/clash-lang/clash-compiler/issues/187)\n
  \ * Correctly print negative hex literals\n\n## 0.6.21 *August 18th 2016*\n* Fixes
  bugs:\n  * Type families are not currently being reduced correctly [#167](https://github.com/clash-lang/clash-compiler/issues/167)\n\n##
  0.6.20 *August 3rd 2016*\n* Fixes bugs:\n  * Bug in DEC transformation overwrites
  case-alternatives\n  * Bug in DEC transformation creates non-representable let-binders\n\n##
  0.6.19 *July 19th 2016*\n* Fixes bugs:\n  * Rounding error in `logBase` calculation\n\n##
  0.6.18 *July 15th 2016*\n* New features:\n  * Better error location reporting\n*
  Fixes bugs:\n  * Values of type Index 'n', where 'n' > 2^MACHINE_WIDTH, incorrectly
  considered non-synthesisable due to overflow\n\n## 0.6.17 *June 9th 2016*\n* Fixes
  bugs:\n  * `Eq` instance of `Vec` sometimes not synthesisable\n\n## 0.6.16 *June
  7th 2016*\n* New features:\n  * DEC transformation also lifts HO-primitives applied
  to \"interesting\" primitives (i.e. `zipWith (*)`)\n* Fixes bugs:\n  * replicate
  unfolded incorrectly [#150](https://github.com/clash-lang/clash-compiler/issues/150)\n
  \ * `imap` is not unrolled [#151](https://github.com/clash-lang/clash-compiler/issues/151)\n\n##
  0.6.15 *April 7th 2016*\n* New features:\n  * Up to 2x reduced compilation times
  when working with large `Vec` literals\n* Fixes bugs:\n  * Bug in DEC transformation
  throws CLaSH into an endless loop [#140](https://github.com/clash-lang/clash-compiler/issues/140)\n\n##
  0.6.14 *March 21st 2016*\n* New features:\n  * Also generate testbench for circuits
  without input ports [#135](https://github.com/clash-lang/clash-compiler/issues/135)\n*
  Fixes bugs:\n  * `clockWizard` broken [#49](https://github.com/clash-lang/clash-prelude/issues/49)\n\n##
  0.6.13 *March 14th 2016*\n* Fixes bugs:\n  * Not all lambda's in a function position
  removed\n\n## 0.6.12 *March 14th 2016*\n* Fixes bugs:\n  * Not all lambda's in a
  function position removed due to bad eta-expansion [#132](https://github.com/clash-lang/clash-compiler/issues/132)\n\n##
  0.6.11 *March 11th 2016*\n* New features:\n  * Add support for HDL synthesis tool
  specific HDL generation\n  * Preserve more Haskell names in generated HDL [#128](https://github.com/clash-lang/clash-compiler/issues/128)\n\n##
  0.6.10 *February 10th 2016*\n* New features:\n  * hdl files can be written to a
  directory other than the current working directory [#125](https://github.com/clash-lang/clash-compiler/issues/125)\n*
  Fixes bugs:\n  * `caseCon` transformation does not work on non-exhaustive case-expressions
  [#123](https://github.com/clash-lang/clash-compiler/issues/123)\n  * Primitive reductions
  don't look through `Signal` [#126](https://github.com/clash-lang/clash-compiler/issues/126)\n\n##
  0.6.9\n* Fixes bugs:\n  * `case undefined of ...` should reduce to `undefined` [#116](https://github.com/clash-lang/clash-compiler/issues/109)\n
  \ * Type families obscure eligibility for synthesis [#114](https://github.com/clash-lang/clash-compiler/issues/114)\n\n##
  0.6.8 *January 13th 2015*\n* New features:\n  * Support for Haskell's: `Char`, `Int8`,
  `Int16`, `Int32`, `Int64`, `Word`, `Word8`, `Word16`, `Word32`, `Word64`.\n  * Int/Word/Integer
  bitwidth for generated HDL is configurable using the `-clash-intwidth=N` flag, where
  `N` can be either 32 or 64.\n* Fixes bugs:\n  * Cannot reduce `case error ... of
  ...` to `error ...` [#109](https://github.com/clash-lang/clash-compiler/issues/109)\n\n##
  0.6.7 *December 21st 2015*\n* Support for `unbound-generics-0.3`\n* New features:\n
  \ * Only look for 'topEntity' in the root module. [#22](https://github.com/clash-lang/clash-compiler/issues/22)\n\n##
  0.6.6 *December 11th 2015*\n* New features:\n  * Remove all existing HDL files before
  generating new ones. This can be disabled by the `-clash-noclean` flag. [#96](https://github.com/clash-lang/clash-compiler/issues/96)\n
  \ * Support for `clash-prelude` 0.10.4\n\n## 0.6.5 *November 17th 2015*\n* Fixes
  bugs:\n  * Integer literals used as arguments not always properly annotated with
  their type.\n\n## 0.6.4 *November 12th 2015*\n* Fixes bugs:\n  * Reversing alternatives
  is not meaning preserving for literal patterns [#91](https://github.com/clash-lang/clash-compiler/issues/91)\n
  \ * DEC: root of the case-tree must contain at least 2 alternatives [#92](https://github.com/clash-lang/clash-compiler/issues/92)\n\n##
  0.6.3 *October 24th 2015*\n* New features:\n  * Improve DEC transformation: consider
  alternatives before the subject when checking for disjoint expressions.\n* Fixes
  bugs:\n  * DEC: don't generate single-branch case-expressions [#90](https://github.com/clash-lang/clash-compiler/issues/90)\n\n##
  0.6.2 *October 21st 2015*\n* Fixes bugs:\n  * DEC: Subject and alternatives are
  not disjoint [#88](https://github.com/clash-lang/clash-compiler/issues/88)\n\n##
  0.6.1 *October 16th 2015*\n* New features:\n  * Support for `clash-prelude` 0.10.1\n
  \ * Transformation that lifts applications of the same function out of alternatives
  of case-statements. e.g.\n\n    ```haskell\n    case x of\n      A -> f 3 y\n      B
  -> f x x\n      C -> h x\n    ```\n\n    is transformed into:\n\n    ```haskell\n
  \   let f_arg0 = case x of {A -> 3; B -> x}\n        f_arg1 = case x of {A -> y;
  B -> x}\n        f_out  = f f_arg0 f_arg1\n    in  case x of\n          A -> f_out\n
  \         B -> f_out\n          C -> h x\n    ```\n\n* Fixes bugs:\n  * Case-statements
  acting like normal decoder circuits are erroneously synthesised to priority decoder
  circuits.\n\n## 0.6 *October 3rd 2015*\n* New features:\n  * Support for `clash-prelude`
  0.10\n  * Add `~INDEXTYPE` tag: primitives get access to the `Index` clash-prelude
  type\n  * Add `~IF` construct: primitives can do conditional templating\n  * Unroll
  \"definitions\" of the following primitives: `fold`, `dfold`, `foldr`\n\n## 0.5.13
  *September 21st 2015*\n* Fixes bugs:\n  * Performance bug: top-level definitions
  of type \"Signal\" erroneously inlined.\n\n## 0.5.12 *September 14th 2015*\n* New
  features:\n  * Completely unroll \"definitions\" of some higher-order primitives
  with non-representable argument or result vectors:\n    It is now possible to translate
  e.g. `f xs ys = zipWith ($) (map (+) xs) ys :: Vec 4 Int -> Vec 4 Int -> Vec 4 Int`\n\n*
  Fixes bugs:\n  * `topLet` transformation erroneously not performed in a top-down
  traversal\n  * Specialisation limit unchecked on types and constants\n  * Vector
  of functions cannot be translated [#25](https://github.com/clash-lang/clash-compiler/issues/25
  )\n  * CLaSH fails to generate VHDL when map is applied [#78](https://github.com/clash-lang/clash-compiler/issues/78)\n\n##
  0.5.11 *September 7th 2015*\n* Fixes bugs:\n  * Clash running out of memory on Simple-ish
  project [#70](https://github.com/clash-lang/clash-compiler/issues/70)\n  * `CLaSH.Sized.Vector.:>`
  was not allowed as a function argument to HO-primitives\n\n## 0.5.10 *August 2nd
  2015*\n* Fixes bugs:\n  * Make testbench generation deterministic\n  * Compile against
  unbound-generics-0.2\n\n## 0.5.9 *July 9th 2015*\n* Fixes bugs:\n  * `coreView`
  didn't look through newtypes of the form: `newtype Foo a = MkFoo (Maybe a)`\n\n##
  0.5.8 *June 26th 2015*\n* Fixes bugs:\n  * Allow text and tags in ~SIGD black box
  construct\n\n## 0.5.7 *June 25th 2015*\n* New features:\n  * Support for copying
  string literals from Haskell to generated code\n  * Collect and copy data-files\n\n*
  Fixes bugs:\n  * Signals declared twice when not using a clock-generating component
  [#60](https://github.com/clash-lang/clash-compiler/issues/60)\n  * This piece of
  code eat up all CPU when generating verilog [#62](https://github.com/clash-lang/clash-compiler/issues/60)\n\n##
  0.5.6 *June 3rd 2015*\n* New features:\n  * Support Verilog backend\n  * Generated
  component names are prefixed by the name of the module containing the `topEntity`\n\n##
  0.5.5 *May 18th 2015*\n* New features:\n  * Make inlining and specialisation limit
  configurable\n  * Make debug message level configurable\n\n* Fixes bugs:\n  * Netlist:
  ensure that the arguments of a component instantiation are always simple variables\n
  \ * CaseCon transformation: ensure that we run the compile-time evaluator on the
  subject before handling the one-alternative case\n  * Emit a warning if a function
  remains recursive, instead of producing an error: compilation can still be successful
  if the function is an argument to a higher-order blackbox that doesn't use the function.\n
  \ * Emit a warning if inlining limit is reached, instead of producing an error:
  compilation can still be successful if the function is an argument to a higher-order
  blackbox that doesn't use the function.\n  * Always inline terms that have a type
  of kind `Constraint`\n\n## 0.5.4 *May 10th 2015*\n* New features:\n  * Add `~COMPNAME`
  tag: primitives get access to the component name in which they are instantiated\n\n##
  0.5.3 *May 5th 2015*\n* New features:\n  * `TopEntity` wrappers are now specified
  as `ANN` annotation pragmas\n* Fixes bugs:\n  * Lost system1000 clock in VHDL generation...
  [#53](https://github.com/clash-lang/clash-compiler/issues/53)\n  * `flattenCallTree`
  sometimes introduces free variables\n\n## 0.5.2 *May 1st 2015*\n* New features:\n
  \ * Generate wrappers around `topEntity` that have constant names and types\n\n##
  0.5.1 *April 20th 2015*\n* GHC 7.10 support\n\n## 0.5 *March 11th 2015*\n* New features:\n
  \ * Simplify BlackBox handling, and improve VHDL generation. [#47](https://github.com/clash-lang/clash-compiler/issues/47)\n
  \ * Use unbound-generics. [#48](https://github.com/clash-lang/clash-compiler/issues/48)\n\n*
  Fixes bugs:\n  * VHDL generation error: wrapper for sum-of-products type. [#44](https://github.com/clash-lang/clash-compiler/issues/44)\n\n##
  0.4.1 *February 4th 2015*\n* Fixes bugs:\n  * Treat BlackBox expressions as declarations
  when DC args. [#37](https://github.com/christiaanb/clash2/issues/33)\n  * Don't
  inline recursive closed bindings\n\n## 0.4 *November 17th 2014*\n* New features:\n
  \ * Support for clash-prelude 0.6\n\n* Fixes bugs:\n  * Ambiguous type: 'std_logic_vector'
  or 'std_ulogic_vector' [#33](https://github.com/christiaanb/clash2/issues/33)\n\n##
  0.3.2 *June 5th 2014*\n\n* Fixes bugs:\n  * VHDL array constant ambiguous [#18](https://github.com/christiaanb/clash2/issues/18)\n
  \ * Exception: can't create selector [#24](https://github.com/christiaanb/clash2/issues/24)\n
  \ * Calls to `vhdlTypeMark` don't result to inclusion of VHDL type in types.vhdl
  [#28](https://github.com/christiaanb/clash2/issues/28)\n\n## 0.3.1 *May 15th 2014*\n\n*
  New features:\n  * Make ANF lift non-representable values [#7](https://github.com/christiaanb/clash2/issues/7)\n
  \ * Hardcode `fromInteger` for `Signed` and `Unsigned` [#9](https://github.com/christiaanb/clash2/issues/9)\n
  \ * Replace VHDL default hole by error hole [#13](https://github.com/christiaanb/clash2/issues/13)\n\n*
  Fixes bugs:\n  * Type families are not expanded [#3](https://github.com/christiaanb/clash2/issues/3)\n
  \ * Exception: CLaSH.Netlist.VHDL(512): fromSLV: Vector 13 Bool [#5](https://github.com/christiaanb/clash2/issues/5)\n
  \ * Incorrect vhdl generation for default value in blackbox [#6](https://github.com/christiaanb/clash2/issues/6)\n
  \ * Duplicate type names when multiple ADTs need the same amount of bits [#8](https://github.com/christiaanb/clash2/issues/8)\n
  \ * Circuit testbench generation with MAC example fails[#15](https://github.com/christiaanb/clash2/issues/15)\n\n*
  Code improvements:\n  * Refactor Netlist/BlackBox [#10](https://github.com/christiaanb/clash2/issues/10)\n
  \ * CPP special-case conversion of `Control.Exception.Base.irrefutPatError` [#11](https://github.com/christiaanb/clash2/issues/11)\n"
basic-deps:
  ghc: ! '>=8.0.2 && <8.6'
  bytestring: ! '>=0.10.0.2 && <0.11'
  clash-prelude: ! '>=0.11.1 && <1.0'
  ansi-wl-pprint: ! '>=0.6.8.2 && <1.0'
  trifecta: ! '>=1.7.1.1 && <2.0'
  base: ! '>=4.8 && <5'
  time: ! '>=1.4.0.1 && <1.10'
  unordered-containers: ! '>=0.2.3.3 && <0.3'
  text: ! '>=0.11.3.1 && <1.3'
  filepath: ! '>=1.3.0.1 && <1.5'
  process: ! '>=1.1.0.2 && <1.7'
  integer-gmp: ! '>=1.0 && <1.1'
  containers: ! '>=0.5.0.0 && <0.7'
  parsers: ! '>=0.12.8 && <1.0'
  lens: ! '>=3.9.2 && <4.18'
  concurrent-supply: ! '>=0.1.7 && <0.2'
  fgl: ! '>=5.4.2.4 && <5.7'
  mtl: ! '>=2.1.2 && <2.3'
  data-binary-ieee754: ! '>=0.4.4 && <0.6'
  hashable: ! '>=1.2.1.0 && <1.3'
  attoparsec: ! '>=0.10.4.0 && <0.14'
  prettyprinter: ! '>=1.2.0.1 && <2.0'
  transformers: ! '>=0.3.0.0 && <0.6'
  errors: ! '>=1.4.2 && <2.4'
  deepseq: ! '>=1.3.0.2 && <1.5'
  unbound-generics: ! '>=0.1 && <0.4'
  aeson: ! '>=0.6.2.0 && <1.5'
  template-haskell: ! '>=2.8.0.0 && <2.14'
  reducers: ! '>=3.12.2 && <4.0'
  primitive: ! '>=0.5.0.1 && <1.0'
  vector: ! '>=0.11 && <1.0'
  directory: ! '>=1.2.0.1 && <1.4'
all-versions:
- '0.2'
- '0.2.0.1'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.3.0.4'
- '0.3.1'
- '0.3.2'
- '0.4'
- '0.4.1'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.6'
- '0.5.7'
- '0.5.8'
- '0.5.9'
- '0.5.10'
- '0.5.11'
- '0.5.12'
- '0.5.13'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.6.6'
- '0.6.7'
- '0.6.8'
- '0.6.9'
- '0.6.10'
- '0.6.13'
- '0.6.14'
- '0.6.15'
- '0.6.16'
- '0.6.17'
- '0.6.18'
- '0.6.19'
- '0.6.20'
- '0.6.21'
- '0.7'
- '0.7.1'
- '0.99'
- '0.99.1'
- '0.99.2'
- '0.99.3'
author: Christiaan Baaij
latest: '0.99.3'
description-type: markdown
description: ! "# `clash-lib` - CλaSH compiler, as a library\n\n  * See the LICENSE
  file for license and copyright details\n\n# CλaSH - A functional hardware description
  language\nCλaSH (pronounced ‘clash’) is a functional hardware description language
  that\nborrows both its syntax and semantics from the functional programming language\nHaskell.
  The CλaSH compiler transforms these high-level descriptions to\nlow-level synthesizable
  VHDL, Verilog, or SystemVerilog.\n\nFeatures of CλaSH:\n\n  * Strongly typed (like
  VHDL), yet with a very high degree of type inference,\n    enabling both safe and
  fast prototying using consise descriptions (like\n    Verilog).\n\n  * Interactive
  REPL: load your designs in an interpreter and easily test all\n    your component
  without needing to setup a test bench.\n\n  * Higher-order functions, with type
  inference, result in designs that are\n    fully parametric by default.\n\n  * Synchronous
  sequential circuit design based on streams of values, called\n    `Signal`s, lead
  to natural descriptions of feedback loops.\n\n  * Support for multiple clock domains,
  with type safe clock domain crossing.\n\n# Support\nFor updates and questions join
  the mailing list clash-language+subscribe@googlegroups.com or read the [forum](https://groups.google.com/d/forum/clash-language)\n"
license-name: BSD2
