homepage: https://github.com/sheyll/b9-vm-image-builder
changelog-type: ''
hash: d3abca24653339622b0a31ffad560f7f9b0737579f8d8f08a466f93cf1712a90
test-bench-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.8 && <5'
  unordered-containers: ! '>=0.2'
  hspec: -any
  text: ! '>=1.2'
  b9: -any
  QuickCheck: ! '>=2.5'
  aeson: ! '>=1.0'
  yaml: ! '>=0.8'
  vector: ! '>=0.11'
  hspec-expectations: -any
maintainer: svh@posteo.de
synopsis: A tool and library for building virtual machine images.
changelog: ''
basic-deps:
  shake: ! '>=0.16 && <0.17'
  ConfigFile: ! '>=1.1.4'
  free: ! '>=4.12'
  bytestring: ! '>=0.10.8'
  base: ! '>=4.8 && <5'
  time: ! '>=1.6'
  unordered-containers: ! '>=0.2.8'
  text: ! '>=1.2'
  syb: ! '>=0.6'
  b9: -any
  filepath: ! '>=1.4'
  process: ! '>=1.4'
  async: ! '>=2.1'
  parsec: ! '>=3.1'
  conduit: ! '>=1.2'
  conduit-extra: ! '>=1.1'
  lens: ! '>=4'
  bifunctors: ! '>=5.4'
  binary: ! '>=0.8.3'
  mtl: ! '>=2.2'
  hashable: ! '>=1.2'
  pretty-show: ! '>=1.6'
  template: ! '>=0.2'
  transformers: ! '>=0.5'
  optparse-applicative: ! '>=0.13'
  random: ! '>=1.1'
  parallel: ! '>=3.2'
  boxes: ! '>=0.1.4'
  QuickCheck: ! '>=2.5'
  pretty: ! '>=1.1'
  aeson: ! '>=1.0'
  yaml: ! '>=0.8'
  vector: ! '>=0.11'
  directory: ! '>=1.3'
all-versions:
- '0.2.0'
- '0.2.1'
- '0.2.3'
- '0.2.4'
- '0.2.5'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.4.1'
- '0.5.2'
- '0.5.3'
- '0.5.4'
- '0.5.5'
- '0.5.7'
- '0.5.8'
- '0.5.9'
- '0.5.10'
- '0.5.13'
- '0.5.14'
- '0.5.15'
- '0.5.16'
- '0.5.17'
- '0.5.18'
- '0.5.19'
- '0.5.20'
- '0.5.21'
- '0.5.30'
- '0.5.41'
- '0.5.42'
- '0.5.43'
author: Sven Heyll <svh@posteo.de>
latest: '0.5.43'
description-type: markdown
description: ! "# B9 - A Benign VM-Build Tool\n\n[![Build Status](https://travis-ci.org/sheyll/b9-vm-image-builder.svg?branch=0.5)](https://travis-ci.org/sheyll/b9-vm-image-builder)
  [![Hackage](https://img.shields.io/badge/hackage-B9-green.svg?style=flat)](http://hackage.haskell.org/package/b9)
  [![b9 LTS](http://stackage.org/package/b9/badge/lts)](http://stackage.org/lts/package/b9)\n\nUse
  B9 to compile your software into a deployable set of Linux-VM- or\nconfiguration
  images, from a set of scripts and input files and templates\n\nThe main goal of
  this tool is to provide a build tool to increase automation and\nreduce redundancy
  when creating configured, ready-to-run VM-images.\n\nIt is designed to help implementing
  what's buzz-worded as _immutable_\ninfrastructure, by making whole-VM-deployments
  as safe and a fast as possible.\n\nB9 does not bring infrastructure to run and connect
  any VM-image in production,\nit is merely a build tool to assemble deployable artifacts.\n\nOne
  big thing is that it can produce many machines and cloud-configs from a\nsingle
  build file, because build files can describe concrete as well as\nparameterized
  generators. It can create parameterized VM-Images by uploading\n(e.g. system-)files
  assembled by syntax aware template application and\ncombination, all statically
  checked by during the build.\n\nThis sets B9 apart from e.g. cloud-init or other
  configuration management\nsystems that provide configuration via user provided dynamic
  script-programs,\nwhich rely on the user to contain correct error handling.\n\nThe
  general idea is the same as in statically type programming languages: catch\nerrors
  as early as possible without relying on the user to create a covering set\nof tests/error
  checks.\n\nCertain sacrifies were made; there might be a steep laerning curve, but
  you will\neventually get there. The tool at hand works stable and reliable. The
  build\nfiles are check rigorously, all builds happen in a random build directory
  and\nfailure leaves no stale LXC-containers running or multiple GiB of temporary
  disk\nimage files around. Also, there is no way modify an existing image in\nplace.
  Work on VM-Images is always done on a copy of an image, and to speed\nthings up,
  it is possible to explicitly use copy-on-write images.\n\nB9 creates bootable virtual
  machine images, without necessarily using\nvirtualization itself.\n\nIn essence
  B9 is a tool for _creation_, _configuration_ and _sharing_ of VM images and\nall
  peripheral artifacts, it creates:\n\n* VMDK/QCOW2/Raw VM images\n* Converted, extracted
  and resized copies of existing vm images\n* Empty VM images with extended 4 file
  system\n* Cloud-Config Images\n* Text files from template files with variable interpolation\n*
  Erlang OTP sys.config files\n* beqemu-life-installer compatible VM images\n\nB9
  creates/converts/assembles virtual disk images as well as any number of\nconfig-input
  files and executes scripts in LXC containers into which these\nimages are mounted.\n\nThe
  input is in both cases a single, text-based configuration file wich can be\nput
  along side with other build files (e.g. Makefiles, maven poms, ...).\n\n## Some
  Random Features:\n\n* Tailored for both software compilation environments and VM
  image creation\n* Creation of cloud-init (NoCloud) ISO images, VFAT images and directories\n*
  Assembly and creation of arbitrary files with safe variable interpolation\n* Creation
  of multiple images/machines/cloud-configs based on creation rules\n* Syntax-checked
  merging of several cloud-config yaml user-data files with\n  variable expansion\n*
  Syntax-checked parsing and recombination of Erlang/OTP sys.config files with\n  variable
  expansion\n* Reusing and Sharing of vm-images, e.g. via The Internet using 'push'
  and 'pull'\n* Arbitrary command execution inside a guest container\n* Execution
  of interactive commands inside guest containers\n* Create empty VM Images with file
  system\n* Builtin config file formatter\n* Create CopyOnWrite-Images backed by existing
  QCow2 or Raw images\n* Create disk images from other disk image\n* Derive disk images
  from a partition inside of an existing disk image\n* Transparent support for QCOW2,
  VMDK and Raw (intermediate images will have the appropriate formats)\n* Resize images
  and optionally also file systems inside disk images\n* Support for 64-bit and 32-bit
  guests\n* Share directories with the host\n* Haskell library for parsing the config
  files and running builds\n* Speed: Smart disk image conversion, raw image preference,
  flexible configuration, simple profiling\n* Configurable Logging\n* Automatic build
  clean-up\n* Configurable LibVirtLXC parameters\n* Configurable remote (ssh with
  pubkey auth + rsync) image shareing\n* Local caching of shared images\n\n## Installation\n\n###
  b9 executable and library\n\nInstall via `stack`:\n\n    $ stack install b9\n\n###
  Runtime dependencies\n\nTo be able to use B9 install:\n\n* Linux\n* lxc\n* libvirt
  with lxc support (libvirt-driver-lxc, libvirt-daemon-lxc,...)\n* virsh\n* qemu\n*
  ext4 tools\n* genisoimage\n* mtools\n* vfat tools\n* ssh\n* rsync\n* bash\n* wget\n*
  sudo\n\nB9 has been tested with libvirt version 1.2.12.\n\nMake sure that all neccessary
  daemons, e.g. `libvirtd.service`, `lxc.service`,..\nare active, that SELinux is
  configured correctly and that the `nbd` kernel\nmodule is loaded.\n\nIf neccessary
  create a libvirt network configuration, e.g. by using\nthe GUI front-end`virt-manager`.\n\nDepending
  upon the libvirt and lxc configuration of the system it might be\nnessary to allow
  the user, that will execute `b9c`, password-less `sudo` for\nthese commands:\n\n*
  `virsh`\n* `rm`\n* `cat`\n* `cp`\n* `mv`\n\nAfter installing B9 (either from a binary
  package or by building from source)\nall its glory is availbe through a single executable
  called `b9c`.\n\nWhen `b9c` is started for the first time, it creates a configuration
  file in\nthe users home directory called `~/.b9/b9.conf`. The path to that file
  can be\nchanged using command line arguments. Execute:\n\n    b9c -h\n\nfor a list
  of command line parameters and commands.\n\n`b9c` command line arguments always
  follow this pattern:\n\n    b9c <global-options> <command> <command-options> --
  <build-script-extra-args>\n\nTo enable B9 to work correctly on your machine edit
  the config file and make\nnecessary adaptions.\n\n## B9 configuration file\n\nThis
  is an example of a B9 configuration file, by default found in\n`~/.b9/b9.conf`:\n\n
  \   [global]\n    # optional alternative directory for temporary build files. If
  'Nothing'\n    # the current directory is used.\n    build_dir_root: Just \"/home/sven/tmp\"\n
  \   environment_vars: []\n    exec_env: LibVirtLXC\n    keep_temp_dirs: False\n
  \   # if set to 'Just \"filename\"\n    log_file: Nothing\n    profile_file: Nothing\n
  \   unique_build_dirs: True\n    verbosity: Just LogInfo\n\n    [libvirt-lxc]\n
  \   connection: lxc:///\n    emulator_path: /usr/lib/libvirt/libvirt_lxc\n    #
  contains `Just \"libvirt-network-name\"` or `Nothing` for your libvirt\n    # default
  network settings\n    network: Nothing\n    use_sudo: True\n    virsh_path: /usr/bin/virsh\n\nSome
  of the options can also be specified on the command line.\n\n# Writing B9 build
  files\n\nIf you really need to write these file, you are basically f'ed.\n\nFor
  now, look at existing config files and read the sources, if anything,\nmake sure
  to read at least the chapter _Anger-Management_ before throwing stuff\naround.\n\nMore
  documentation is comming soon!\n\n## General Structure\n\nA B9 configuration describes
  a single `ArtifactGenerator`. It generates files\nbelonging to a VM, such as qcow2/raw/vmdk-image
  file(s) and e.g. cloud-init ISO\nimage files.\n\nJust to recap: a `something.b9`
  build file _is_ always ever only a mere\n`ArtifactGenerator` literal, no matter
  how many `Let`, `Each`, `Artifacts`,\netc... you see flying around there.\n\n##
  Creating artifacts\n\nTo get any _real_ artifact out of an artifact generator use
  the `Artifact`\nconstructor. It takes _2_ parameters an arbitrary id and a describtion
  of what\nthe artifact consists of:\n\n     Artifact (IID \"some_instance_id\")\n
  \             (VmImages ... | CloudInit ...)\n\nAn artifact can either be a (set
  of) VM-disk-image(s) likely in combination\nwith some shell script to install software,
  etc _or_ a static collection of\nfiles put on a cloud-init image(VFAT or ISO or
  directory).\n\n### Defining artifact generators that produce vm image files\n\nTo
  produce vm image files, e.g. with some software installed use the `VmImages`\nartifact
  generator. It has only _2_ parameters:\n\n     VmImages\n        [ ... disk image
  targets ... ]\n        ( ... installation script ...)\n\nOf course it must be wrapped
  in an `Artifact` definition, so we get this structure:\n\n     Artifact (IID \"my_first_image\")\n
  \      (VmImages [...] (...))\n\n#### ImageTargets\n\nThe first argument to `VmImages`
  is a list of `ImageTarget`. Each describes\na single VM-disk-image. The syntax is:\n\n
  \   ImageTarget\n      ImageDestination\n      ImageSource\n      MountPoint\n\n*
  An `ImageDestination` specifies if/where to put the output image.\n* An `ImageSource`
  specifies how the image is created or from where it is taken.\n* A `MountPoint`
  specifies where to mount the image during the execution of an\n  optional `VmBuild`-script.\n\n###
  Parameterized artifact generators\n\nB9 supports `$varnam` variable interpolation
  in all strings anywhere in an\n`ArtifactGenerator`:\n\n* All filenames and paths\n*
  All id strings and names\n* Template files included via e.g. `Template`\n* In every
  string in `VmScript`s (e.g. in `Run \"${cmd}\" [\"${world}\"]`)\n* Also in all included
  template files (e.g. included via `Template`)\n\nParameters can be defined using
  `Let`, `Each` and special command line\narguments.\n\nTo pass parameters via the
  command line, append them after the argument delimiter\noption `--` which ends the
  list of regular b9c arguments:\n\n    b9c -v build -f file1.b9 .. -- arg_1 arg_2
  ...\n\nThe parameters are bound to `${arg_1}`, `${arg_2}`, that is variables indicating\nthe
  corresponding _position_ on the command line.\n\nTo define variables using `Let`,
  write:\n\n    Let [key-value-pairs, ...]\n        [artifactgenerators, ...]\n\nAll
  key-value bindings defined in the first list are available in every artifact\ngenerator
  contained in the second list (_body_).\n\nA key-value binding, e.g. `(\"hostname\",
  \"www.acme.org\")`, consist of two strings\non parens seperated by a `,` (comma).
  The left string is the key, and the right\nstring is the value.\n\nThis `(\"webserver\",
  \"www.${domainname}\")` is an example to show that the _value_\nmay also contain
  a variable reference. (Of course, only to variabled defined\n_before_)\n\n## Anger-Management\n\nB9
  build files contain a single literal `ArtifactGenerator` value\nin Haskell syntax.
  B9 currently 'parses' the config file without any\nerror checking, so writing config
  files is VERY frustrating without\nsome tricks:\n\n### Trick 1\n\nStart with a working
  file and run\n\n    b9c reformat -f <filename>\n\nafter each modification. The `reformat`
  command only parses and - hence the\nname - (re-) formats/pretty-prints the files
  passed with `-f` options.\n\nYou will immediately know if a modification broke the
  file.\n\nNOTE: If your build file refers to any `${arg_...}` positional arguments
  pass\nthem to `reformat` using `--` followed by the argument list.\n\n### Trick
  2\n\nObtain and build the sources of B9, start an interactive haskell shell with
  the\nB9 code loaded and try to paste the contents of the config file to see if ghci\naccepts
  it. Use the ghci macros `:{` and `:}` to begin and end a multi-line input\nand paste
  the raw contents of the config file in question in between.\n\n    $ cabal install\n
  \   $ cabal repl\n\n    ... (many lines omitted) ...\n\n    *B9> :{\n    *B9| Artifact
  (IID \"filer\")\n    *B9|   (VmImages [ ImageTarget\n    *B9|                 (LocalFile
  (Image \"EXPORT/machines/filer/disks/0.vmdk\" Vmdk Ext4)\n    *B9|                             KeepSize)\n
  \   *B9|                 (From \"fedora-20-prod\" KeepSize)\n    *B9|                 (MountPoint
  \"/\")\n    *B9|             , ImageTarget\n    *B9|                 (LocalFile
  (Image \"EXPORT/machines/filer/disks/1.vmdk\" Vmdk Ext4)\n    *B9|                             KeepSize)\n
  \   *B9|                 (EmptyImage \"audio_files\" Ext4 Raw (ImageSize 64 GB))\n
  \   *B9|                 (MountPoint \"/export/lb/audio\")\n    *B9|             ]\n
  \   *B9|             (VmScript X86_64\n    *B9|               [ SharedDirectoryRO
  \"./filer\" (MountPoint \"/mnt/build_root\")\n    *B9|               , SharedDirectoryRO
  \"../_common/upload\" (MountPoint \"/mnt/common\")]\n    *B9|               (Begin\n
  \   *B9|                  [ Run \"dhclient\" []\n    *B9|                  , In
  \"/mnt/build_root\" [ Run \"./machine-\" [] ]\n    *B9|                  , In \"/mnt/common\"
  [ Run \"./post_export.sh\" [] ]\n    *B9|                  ])))\n    *B9| :}\n\n
  \   Artifact (IID \"filer\") (VmImages\n    [ImageTarget (LocalFile (Image \"EXPORT/machines/filer/disks/0.vmdk\"
  Vmdk Ext4) KeepSize)\n    (From \"fedora-20-prod\" KeepSize) (MountPoint \"/\"),ImageTarget\n
  \   (LocalFile (Image \"EXPORT/machines/filer/disks/1.vmdk\" Vmdk Ext4) KeepSize)\n
  \   (EmptyImage \"audio_files\" Ext4 Raw (ImageSize 64 GB)) (MountPoint \"/export/lb/audio\")]\n
  \   (VmScript X86_64\n    [SharedDirectoryRO \"./filer\" (MountPoint \"/mnt/build_root\"),\n
  \   SharedDirectoryRO \"../_common/upload\" (MountPoint \"/mnt/common\")]\n    (Begin
  [Run \"dhclient\" [],In \"/mnt/build_root\" [Run \"./machine-\" []],In\n    \"/mnt/common\"
  [Run \"./post_export.sh\" []]])))\n"
license-name: MIT
