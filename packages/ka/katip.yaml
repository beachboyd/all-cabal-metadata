homepage: https://github.com/Soostone/katip
changelog-type: markdown
hash: 4b30d0643e18d01a3fd264d3d75921b49b2f464336a52fa46fa049107ebbfe04
test-bench-deps:
  katip: -any
  bytestring: -any
  unix: -any
  stm: -any
  base: -any
  tasty-golden: -any
  time: -any
  unordered-containers: -any
  text: -any
  safe-exceptions: -any
  filepath: -any
  criterion: ! '>=1.1.0.0'
  async: -any
  containers: -any
  blaze-builder: -any
  quickcheck-instances: -any
  regex-tdfa: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  transformers: -any
  tasty: ! '>=0.10.1.2'
  deepseq: -any
  microlens: -any
  aeson: -any
  template-haskell: -any
  time-locale-compat: ! '>=0.1.0.1 && <0.2'
  directory: -any
maintainer: michael.xavier@soostone.com
synopsis: A structured logging framework.
changelog: ! "0.7.0.0\n=======\n* Exclusively use HasCallstack for location reporting
  in errors. Credit to [Domen Kožar](https://github.com/domenkozar)\n* Drop support
  for GHC 7.x\n\n0.6.3.0\n=======\n* Add `ToJSON`/`FromJSON` instances for Verbosity.
  Credit to [Aleksey Khudyakov](https://github.com/Shimuuar).\n\n0.6.2.1\n=======\n*
  Add `mkHandleScribeWithFormatter`. This allows control over the format of log items
  going to a handle. Credit to [Tristan Bull](https://github.com/tmbull) for the implementation.\n*
  Documentation fixes. Credit to [Domen Kožar](https://github.com/domenkozar) for
  the implementation.\n* Add `jsonFormat` handle formatter.\n* Deprecate `formatItem`
  which is now replaced by `bracketFormat`.\n\n0.6.1.0\n=======\n* Loosen deps\n*
  Support latest STM\n\n0.6.0.0\n=======\n* Drop ListT instance due to deprecations.\n*
  Loosen dependencies.\n\n0.5.5.1\n=======\n* Decrease default timer resolution from
  1s to 1ms.\n\n0.5.5.0\n=======\n* Export `runNoLoggingT` and `NoLoggingT` constructor.\n*
  Delegate MonadReader instance for `NoLoggingT`.\n\n0.5.4.0\n=======\n* Loosen bounds
  on resourcet and template-haskell.\n* Add convenience function askLoggerIO.\n\n0.5.3.0\n=======\n*
  Add MonadUnliftIO instances.\n* Add NoLoggingT\n\n0.5.2.0\n=======\n* Allow newer
  versions of either by conditionally adding instances for the removed EitherT interface.\n\n0.5.1.0\n=======\n*
  Add mkFileScribe, a specialization of mkHandleScribe for files that manages the
  handle automatically.\n\n0.5.0.4\n=======\n* Loosen Win32 upper bound to run with
  GHC 8.2 on Windows.\n\n0.5.0.3\n=======\n* Add worked example of Katip/KatipContext
  to the haddocks.\n\n0.5.0.2\n=======\n* Export Katip.Compat for Windows users.\n\n0.5.0.1\n=======\n*
  Fix numeric formatting in Handle scribe.\n* Bump deps for GHC 8.2.1\n\n0.5.0.0\n=======\n*
  Improved documentation.\n* Add built-in buffering to scribes.\n  Scribes now allocate
  a bounded queue (with configurable size). Rather than writes being synchronous to
  all scribes, they simply attempt to write into the bounded queue of each scribe.
  If any of the scribes is too far behind and the queue is full, the write is dropped.
  This also means that closing scribes is now an IO operation that happens synchrounsly.\n*
  Added local-like functions to Katip and KatipContext typeclasses. This allows us
  to generalize `katipNoLogging`, `katipAddNamespace`, and `katipAddContext` to be
  available to anything with a `Katip` or `KatipContext` instance rather than having
  to reimplement these functions all the time.\n\n0.4.1.0\n=======\n* Add Katip instances
  for Strict StateT, WriterT, RWST.\n* Add Katip instances for Lazy RWST.\n\n0.4.0.0\n=======\n*
  Drop unsafe _ioLogEnv for safe ioLogEnv\n\n0.3.1.5\n=======\n* Add Semigroup instance
  for LogStr.\n\n0.3.1.4\n=======\n* Loosen deps on aeson to allow 1.1.0.0\n\n0.3.1.3\n=======\n*
  Fix build on windows\n\n0.3.1.2\n=======\n* Add some missing test files\n\n0.3.1.1\n=======\n*
  Fix some example code that wasn't building\n* Make FromJSON instance for Severity
  case insensitive.\n\n0.3.1.0\n=======\n* Add support for aeson 1.0.x\n* Add Katip.Format.Time
  module and use much more efficient time formatting code in the Handle scribe.\n\n0.3.0.0\n=======\n*
  Switch from `regex-tdfa-rc` to `regex-tdfa`.\n* Add `katipNoLogging` combinator.\n*
  Add `Semigroup` instances.\n* Drop `ToJSON` superclass requirement fro `ToObject`.
  Instead,\n  `ToObject` will provide a default instance for types with an\n  instance
  for `ToJSON`. This gets us to the same place as before\n  without having to add
  a broader instance for something that's only\n  going to show up in logs as an Object.\n*
  Add a simple MVar lock for file handle scribes to avoid interleaved\n  log lines
  from concurrent inputs.\n\n0.2.0.0\n=======\n\n* Add GHC implicit callstack support,
  add logLoc.\n* Drop lens in favor of type-compatible, lighter microlens.\n* Renamed
  `logEnvNs` to clearer `logEnvApp`\n* Added `katipAddNamespace` and `katipAddContext`\n*
  Fixed nested objects not rendering in Handle scribe.\n* LogContexts Monoid instance
  is now right-biased rather than left\n  biased. This better fits the use case. For
  instance `ctx1 <> ctx2`\n  will prefer keys in `ctx2` if there are conflicts. This
  makes the\n  most sense because functions like `katipAddContext` will `mappend`\n
  \ on the right side.\n* LogContext internally uses a `Seq` instead of a list for
  better\n  complexity on context add.\n* Improved documentation.\n\n0.1.1.0\n==============\n\n*
  Set upper bounds for a few dependencies.\n* Add ExceptT instance for Katip typeclass\n\n0.1.0.0\n==============\n\n*
  Initial release\n"
basic-deps:
  microlens-th: ! '>=0.1.0.0 && <0.5'
  either: ! '>=4 && <5.1'
  bytestring: ! '>=0.9 && <0.11'
  hostname: ! '>=1.0 && <1.1'
  unix: ! '>=2.5 && <2.8'
  stm: ! '>=2.4'
  base: ! '>=4.5 && <5'
  time: ! '>=1 && <1.9'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=0.11 && <1.3'
  safe-exceptions: ! '>=0.1.0.0'
  monad-control: ! '>=1.0 && <1.1'
  auto-update: ! '>=0.1 && <0.2'
  async: <3.0.0.0
  semigroups: -any
  containers: ! '>=0.4 && <0.7'
  string-conv: ! '>=0.1 && <0.2'
  unliftio-core: ! '>=0.1 && <0.2'
  old-locale: ! '>=1.0 && <1.1'
  mtl: ! '>=2.0 && <2.3'
  transformers-base: ! '>=0.3 && <0.6'
  transformers: ! '>=0.3 && <0.6'
  scientific: ! '>=0.3.3.0'
  resourcet: ! '>=1.1 && <1.3'
  microlens: ! '>=0.2.0.0 && <0.5'
  aeson: ! '>=0.6'
  template-haskell: ! '>=2.8 && <2.15'
  transformers-compat: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.4.0
- 0.5.5.0
- 0.5.5.1
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.2.1
- 0.6.3.0
- 0.7.0.0
author: Ozgun Ataman, Michael Xavier
latest: 0.7.0.0
description-type: markdown
description: ! "# Katip [![Build Status](https://travis-ci.org/Soostone/katip.svg?branch=master)](https://travis-ci.org/Soostone/katip)\n\nKatip
  is a structured logging framework for Haskell.\n\n![Katip](https://github.com/Soostone/katip/blob/master/katip/katip.jpg)\n\nKâtip
  (pronounced kah-tip) is the Turkish word for scribe.\n\n## Features\n\n* *Structured:*
  Logs are structured, meaning they can be individually\n  tagged with key value data
  (JSON Objects). This helps you add\n  critical details to log messages before you
  need them so that when\n  you do, they are available. Katip exposes a typeclass
  for log\n  payloads so that you can use rich, domain-specific Haskell types to\n
  \ add context that will be automatically merged in with existing log\n  context.\n\n*
  *Easy to Integration:* Katip was designed to be easily integrated\n  into existing
  monads. By using typeclasses for logging facilities,\n  individual subsystems and
  even libraries can easily add their own\n  namespacing and context without having
  any knowledge of their\n  logging environment.\n\n* *Practical Use:* Katip comes
  with a set of convenience facilities\n  built-in, so it can be used without much
  headache even in small\n  projects.\n\n    * A `Handle` backend for logging to files
  in simple settings.\n\n    * A `AnyLogPayload` key-value type that makes it easy
  to log\n      structured columns on the fly without having to define new data\n
  \     types.\n\n    * A `Monadic` interface where logging namespace can be obtained\n
  \     from the monad context.\n\n    * Multiple variants of the fundamental logging
  functions for\n      optionally including fields and line-number information.\n\n*
  *Extensible:* Can be easily extended (even at runtime) to output to\n  multiple
  backends at once (known as scribes). See\n  `katip-elasticsearch` as an example.
  Backends for other forms of\n  storage are trivial to write, including both hosted
  database systems\n  and SaaS logging providers.\n\n* *Debug-Friendly:* Critical
  details for monitoring production systems\n  such as host, PID, thread id, module
  and line location are\n  automatically captured. User-specified attributes such
  as\n  environment (e.g. Production, Test, Dev) and system name are also\n  captured.\n\n*
  *Configurable:* Can be adjusted on a per-scribe basis both with\n  verbosity and
  severity.\n\n    * *Verbosity* dictates how much of the log structure should\n      actually
  get logged. In code you can capture highly detailed\n      metadata and decide how
  much of that gets emitted to each backend.\n\n    * *Severity* AKA \"log level\"
  is specified with each message and\n      individual scribes can decide whether
  or not to record that\n      severity. It is even possible to at runtime swap out
  and replace\n      loggers, allowing for swapping in verbose debug logging at runtime\n
  \     if you want.\n\n* *Battle-Tested:* Katip has been integrated into several
  production\n  systems since 2015 and has logged hundreds of millions of messages\n
  \ to files and ElasticSearch.\n\n\n## Examples\n\nBe sure to look in the\n[examples](https://github.com/Soostone/katip/blob/master/katip/examples)\ndirectory
  for some examples of how to integrate Katip into your own\nstack.\n\n\n## Contributors\n\n*
  [Ozgun Ataman](https://github.com/ozataman)\n* [Michael Xavier](https://github.com/MichaelXavier)\n*
  [Doug Beardsley](https://github.com/mightybyte)\n* [Leonid Onokhov](https://github.com/sopvop)\n*
  [Alexander Vershilov](https://github.com/qnikst)\n* [Chris Martin](https://github.com/chris-martin)\n*
  [Domen Kožar](https://github.com/domenkozar)\n* [Tristan Bull](https://github.com/tmbull)\n*
  [Aleksey Khudyakov](https://github.com/Shimuuar)\n"
license-name: BSD-3-Clause
