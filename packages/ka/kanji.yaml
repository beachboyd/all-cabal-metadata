homepage: https://github.com/fosskers/kanji
changelog-type: markdown
hash: 624006566434447778aac839589cf6b95dd08b6500cc41bc2fcbb5bdc12ee743
test-bench-deps:
  HUnit-approx: ! '>=1.1 && <1.2'
  base: ! '>=4.7 && <5'
  text: -any
  criterion: ! '>=1.1 && <1.5'
  containers: -any
  kanji: -any
  tasty-hunit: ! '>=0.9 && <0.11'
  tasty: ! '>=0.11 && <1.1'
  aeson: ! '>=1.2 && <1.4'
maintainer: colingw@gmail.com
synopsis: Perform 漢字検定 (Japan Kanji Aptitude Test) level analysis on Japanese Kanji
changelog: ! "## 3.2.0\n\n- `averageLevel` isn't total, and so now returns in `Maybe`\n\n##
  3.1.0.1\n\n- Performance improvements\n\n## 3.1.0\n\n- Overall simplification of
  library and reduction in boilerplate\n  - `AsKanji` typeclass removed\n  - `Rank`
  and `Level` are now just `Level`\n  - More liberal use of `Map` and `Set`\n- `nanq`
  renamed to `kanji` and moved inside same project\n\n## 2.0.0\n\n- New JSON-only
  output\n- Revamped, modernized backend\n"
basic-deps:
  microlens-platform: -any
  base: ! '>=4.7 && <5'
  aeson-pretty: -any
  text: -any
  protolude: ! '>=0.2 && <0.3'
  containers: -any
  kanji: -any
  microlens-aeson: ! '>=2.2 && <2.4'
  hashable: -any
  optparse-applicative: ! '>=0.14 && <0.15'
  deepseq: -any
  microlens: ! '>=0.4 && <0.5'
  aeson: ! '>=1.2 && <1.4'
all-versions:
- '1.0.0'
- '2.0.0'
- '3.0.2'
- '3.1.0'
- '3.1.0.1'
- '3.2.0'
author: Colin Woodbury
latest: '3.2.0'
description-type: markdown
description: ! "Kanji\n====\n\n`kanji` is a Japanese Kanji library and analysation
  program written in Haskell. Its main\nfunction is to tell what Kanji belong to what
  Level of the Japanese National\nKanji Examination (漢字検定).\n\n`kanji` can be used
  to:\n - determine what Level individual Kanji belong to\n - determine the average
  Level (difficulty, in other words) of a group of Kanji\n - apply the above to whole
  files of Japanese\n\nINSTALLING `kanji`\n---------------\nFirst, get the source
  files from:\n\nhttps://github.com/fosskers/kanji\n\n`kanji` is written in Haskell
  and uses the\n[stack](http://docs.haskellstack.org/en/stable/README.html) tool.
  Once\n`stack` is installed, move to the source directory and perform:\n\n    stack
  install\n\nUSAGE\n-----\nAssuming you've made it so that you can run the executable,
  the following\ncommand-line options are available:\n\n```\nUsage: kanji [-u|--unknowns]
  [-d|--density] [-e|--elementary] [-l|--leveldist]\n             [-a|--average] [-s|--splits]
  ((-f|--file ARG) | JAPANESE)\n\nAvailable options:\n  -h,--help                Show
  this help text\n  -u,--unknowns            Find Kanji whose Level couldn't be determined\n
  \ -d,--density             Find how much of the input is made of Kanji\n  -e,--elementary
  \         Find density of Kanji learnt in elementary school\n  -l,--leveldist           Find
  the distribution of Kanji levels\n  -a,--average             Find the average Level
  of all Kanji present\n  -s,--splits              Show which Level each Kanji belongs
  to\n  -f,--file ARG            Take input from a file\n```\n\n#### NOTES ON CLOs\n
  * All options above can be mixed to include their analysis result\n in the output
  JSON.\n * `-h` will over-ride any other options or arguments, discarding them and\n
  \  printing a help message.\n\n#### Examples\n*Single Kanji*\n```\n$> kanji -s 日\n{\n
  \   \"levelSplit\": {\n        \"Ten\": [\n            \"日\"\n        ]\n    }\n}\n```\n\n*A
  Japanese sentence*\n```\n$> kanji -s これは日本語\n{\n    \"levelSplit\": {\n        \"Nine\":
  [\"語\"],\n        \"Ten\": [\"本\", \"日\"]\n    }\n}\n```\n\n*All options*\n```\n$>
  kanji -leadus これは日本語\n{\n    \"levelSplit\": {\n        \"Nine\": [\"語\"],\n        \"Ten\":
  [\"本\", \"日\"]\n    },\n    \"elementary\": 1,\n    \"average\": 9.666667,\n    \"density\":
  0.5,\n    \"unknowns\": [],\n    \"distributions\": {\n        \"Nine\": 0.33333334,\n
  \       \"Ten\": 0.6666667\n    }\n}\n```\n"
license-name: BSD3
