homepage: https://github.com/katydid/katydid-haskell
changelog-type: markdown
hash: 958a486c89257320bcf4da4dec97c28565767c31e49c74e05042256ba57bc39c
test-bench-deps:
  base: -any
  text: -any
  json: -any
  primes: -any
  filepath: -any
  criterion: ! '>=1.2.2'
  parsec: -any
  HUnit: -any
  containers: -any
  hxt: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  ilist: -any
  deepseq: -any
  katydid: -any
  directory: -any
maintainer: awalterschulze@gmail.com
synopsis: A haskell implementation of Katydid
changelog: ! '# 2.0.1


  Fixes parsing of builtin regex and contains functions.


  # 2.0.0


  Adds benchmarks


  # 1.1.0


  Cleanup


  # 1.0.0


  First version'
basic-deps:
  either: -any
  bytestring: -any
  extra: -any
  base: ! '>=4.7 && <5'
  text: -any
  json: -any
  parsec: -any
  containers: -any
  hxt: -any
  regex-tdfa: -any
  mtl: -any
  ilist: -any
  deepseq: -any
  katydid: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.1'
- '0.3.0.0'
author: Walter Schulze
latest: '0.3.0.0'
description-type: markdown
description: ! "# Katydid\n\n[![Build Status](https://travis-ci.org/katydid/katydid-haskell.svg?branch=master)](https://travis-ci.org/katydid/katydid-haskell)\n\nA
  Haskell implementation of Katydid.\n\n![Katydid Logo](https://cdn.rawgit.com/katydid/katydid.github.io/master/logo.png)\n\nThis
  includes:\n\n  - [Relapse](https://katydid.github.io/katydid-haskell/Relapse.html):
  Validation Language \n  - Parsers: [JSON](https://katydid.github.io/katydid-haskell/Json.html)
  and [XML](https://katydid.github.io/katydid-haskell/Xml.html)\n\n[Documentation
  for katydid](http://katydid.github.io/)\n\n[Documentation for katydid-haskell](https://katydid.github.io/katydid-haskell/)\n\n[Documentation
  for katydid-haskell/Relapse](https://katydid.github.io/katydid-haskell/Relapse.html)\n\nAll
  JSON and XML tests from [the language agnostic test suite](https://github.com/katydid/testsuite)
  [passes].\n\n[Hackage](https://hackage.haskell.org/package/katydid-0.1.0.0)\n\n##
  Example\n\nValidating a single structure can be done using the validate function:\n```haskell\nvalidate
  :: Tree t => Grammar -> [t] -> Bool\n```\n\n, where a tree is a class in the [Parsers](https://katydid.github.io/katydid-haskell/Parsers.html)
  module:\n```haskell\nclass Tree a where\n    getLabel :: a -> Label\n    getChildren
  :: a -> [a]\n```\n\nHere is an example that validates a single JSON tree:\n```haskell\nmain
  = either \n    (\\err -> putStrLn $ \"error:\" ++ err) \n    (\\valid -> if valid
  \n        then putStrLn \"dragons exist\" \n        else putStrLn \"dragons are
  fictional\"\n    ) $\n    Relapse.validate <$> \n        Relapse.parse \".DragonsExist
  == true\" <*> \n        Json.decodeJSON \"{\\\"DragonsExist\\\": false}\"\n```\n\n##
  Efficiency\n\nIf you want to validate multiple trees using the same grammar then
  the filter function does some internal memoization, which makes a huge difference.\n\n```haskell\nfilter
  :: Tree t => Grammar -> [[t]] -> [[t]]\n```\n\n## User Defined Functions\n\nIf you
  want to create your own extra functions for operating on the leaves,\nthen you can
  inject them into the parse function:\n\n```haskell\nmain = either\n    (\\err ->
  putStrLn $ \"error:\" ++ err)\n    (\\valid -> if valid\n        then putStrLn \"prime
  birthday !!!\"\n        else putStrLn \"JOMO\"\n    ) $\n    Relapse.validate <$>\n
  \       Relapse.parseWithUDFs userLib \".Survived->isPrime($int)\" <*>\n        Json.decodeJSON
  \"{\\\"Survived\\\": 104743}\"\n```\n\nDefining your own user library to inject
  is easy.\nThe `Expr` library provides many useful helper functions:\n\n```haskell\nimport
  Data.Numbers.Primes (isPrime)\nimport Expr\n\nuserLib :: String -> [AnyExpr] ->
  Either String AnyExpr\nuserLib \"isPrime\" args = mkIsPrime args\nuserLib n _ =
  throwError $ \"undefined function: \" ++ n\n\nmkIsPrime :: [AnyExpr] -> Either String
  AnyExpr\nmkIsPrime args = do {\n    arg <- assertArgs1 \"isPrime\" args;\n    mkBoolExpr
  . isPrimeExpr <$> assertInt arg;\n}\n\nisPrimeExpr :: Integral a => Expr a -> Expr
  Bool\nisPrimeExpr numExpr = trimBool Expr {\n    desc = mkDesc \"isPrime\" [desc
  numExpr]\n    , eval = \\fieldValue -> isPrime <$> eval numExpr fieldValue\n}\n```\n\n##
  Roadmap\n\n  - Protobuf parser\n  - Profile and Optimize (bring up to par with Go
  version)\n  - Typed DSL (Combinator)"
license-name: BSD3
