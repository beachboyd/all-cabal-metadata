homepage: ''
changelog-type: markdown
hash: 5555fb0a679d00964f1fbd8bf1a9b233c91b363b371f092077183fe51bcffba6
test-bench-deps: {}
maintainer: fknupfer@gmail.com
synopsis: dimensions, quantities and constants
changelog: ! '# Revision history for physics


  ## 0.1.2.1  -- 2018-10-15


  * Add Changelog and Readme


  ## 0.1.2.0  -- 2018-10-15


  * first publication

'
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- 0.1.2.1
author: Florian Knupfer
latest: 0.1.2.1
description-type: markdown
description: ! "# Physics\n\n`physics` is a library for working with quantities in
  a performant and\ntype safe manner. It provides some common constants and functions
  to\nwork on quantities.\n\n## Typesafety\n\nQuantities do not have an instance of
  Num to prevent multiplication without changing the units.\nSpecial functions are
  provided which substitute common operations like `>+<`, `>-<`, `>/<`, `>*<`.\n\nThe
  naming convention is that operators get on quantity facing sides a\ngreater than
  or an less than sign.  If you want to multiply a quantity with a number you can
  use `*<`.\n\n## Planck units\n\n`physics` supports planck units, albeit for most
  cases they are not\nrecommended.  The standard used are SI units.\n\n```haskell\nimport
  Physics.Units\nimport qualified Physics.Units.Planck as P\n\nmain = do\n  print
  lightspeed\n  -- 299792458 m s⁻¹\n  print $ fromSI lightspeed\n  -- 1.0 mₚ sₚ⁻¹\n
  \ print . fromPlanck $ P.metre >/< P.second\n  -- 2.99792458e8 m s⁻¹\n```\n\n##
  Constants\n\nConstants are divided into measured constants (which are sorted by\nincreasing
  precision), exact constants (lightspeed for example) and\nderived constants.  All
  derived constants are defined in terms of\nmeasured and exact constants and not
  simply as a number.\n\nBecause of this, updating constants is quite easy, only a
  small number\nof measured constants need to be updated when more precise\nmeasurements
  are available.\n\n## Performance\n\n`physics` strives to be as performant as possible.
  \ Quantities are\nnewtypes and operators are defined in terms of num operators.\n\n##
  Example usage\n\n```haskell\n{-# LANGUAGE TypeOperators #-}\n\nmodule Main where\n\nimport
  Physics.Units\n\nmain :: IO ()\nmain = do\n  print $ fmap round momentum\n  -- 992
  m kg s⁻¹\n  print $ fmap round kineticEnergy\n  -- 5176 m² kg s⁻²\n\nmass :: Kilogram
  Double\nmass = 95 *< kilogram\n\ntime :: Second Double\ntime = 9.58 *< second\n\ndistance
  :: Metre Double\ndistance = 100 *< metre\n\nspeed :: (Metre >/< Second) Double\nspeed
  = distance >/< time\n\nmomentum :: (Newton >*< Second) Double\nmomentum = mass >*<
  speed\n\nkineticEnergy :: Joule Double\nkineticEnergy = 1/2 *< mass >*< square speed\n\n--
  This would be a type error:\n-- kineticEnergy = 1/2 *< mass >*< speed\n```\n\n##
  Compatibility\n\n`physics` works with GHC 7.10.3 or newer.  Some features like showing\nan
  Unit or nicer type errors are only available on newer ghcs.\n"
license-name: BSD-3-Clause
