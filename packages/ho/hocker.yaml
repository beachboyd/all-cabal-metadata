homepage: https://github.com/awakesecurity/hocker#readme
changelog-type: markdown
hash: ae2d3ce492d83a3a7945b384bd818d75f645a87f08b421dfd4b9381fbffb6c94
test-bench-deps:
  bytestring: ! '>=0.10'
  tasty-smallcheck: ! '>=0.8'
  ansi-wl-pprint: ! '>=0.6.7.3'
  base: ! '>=4.9 && <5'
  tasty-golden: ! '>=2.3'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.2'
  network: ! '>=2.6'
  containers: ! '>=0.5'
  cryptonite: ! '>=0.13'
  tasty-quickcheck: ! '>=0.8'
  network-uri: ! '>=2.6'
  mtl: ! '>=2.2'
  tasty-hunit: ! '>=0.9'
  hocker: -any
  tasty: ! '>=0.11'
  aeson: ! '>=0.9.0.1'
maintainer: opensource@awakesecurity.com
synopsis: Interact with the docker registry and generate nix build instructions
changelog: ! "# Changelog\n\n## 1.0.5\n### Fixed\n- Add the golden test data to the
  source distribution by using `data-files`\n  instead of the incorrect `data-dir`,
  this fixes the problem of `cabal test`\n  failing when run outside of the repository
  root on an unpacked tarball of the\n  source distribution from Hackage\n- The failing
  response integrity check in `hocker-image` by removing the check,\n  the fix and
  its rationale are exactly the same as applied to `hocker-config`\n  and `hocker-layer`
  in the `1.0.2` release\n- Incorrect serialization of the registry URI in the `fetchImage`
  function,\n  resulting in a malformed repository string that `docker load` would
  fail to\n  import\n\n## 1.0.4\n### Changed\n- Switched to the `nix-paths` library
  which provides compile-time constants for\n  the Nix executables instead of relying
  on findexec and hoping Nix is on the\n  PATH\n\n## 1.0.3\n### Added\n- `readField`
  implementations for the custom `ParseField` instances to\n  accommodate a minor
  API change in `optparse-generic` version `1.2.3`\n\n## 1.0.2\n### Fixed\n\n- `hocker-config`
  and `hocker-layer` fail the response integrity check (#23)\n- Missing `test/data`
  directory in cabal source distribution\n\n## 1.0.1\n### Fixed\n\n- `hocker-manifest`
  said it accepted the manifest list media type when\n  requesting an image manifest
  for a docker image but it doesn't know what to do\n  with that, the manifest list
  accepts string has been removed\n\n## 1.0.0\n- Initial release\n"
basic-deps:
  http-client: ! '>=0.4'
  optional-args: -any
  exceptions: ! '>=0.8'
  bytestring: ! '>=0.10'
  lens-aeson: ! '>=1.0'
  ansi-wl-pprint: ! '>=0.6.7.3'
  optparse-generic: ! '>=1.2.0'
  data-fix: ! '>=0.0.3'
  base: ! '>=4.9 && <5'
  time: ! '>=1.4'
  aeson-pretty: ! '>=0.8'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.2'
  filepath: ! '>=1.4'
  network: ! '>=2.6'
  async: ! '>=2.0.0.0 && <2.2'
  pureMD5: ! '>=2.1'
  lifted-base: ! '>=0.2.3.8'
  turtle: ! '>=1.3.0 && <1.5'
  wreq: ! '>=0.4'
  memory: ! '>=0.11'
  containers: ! '>=0.5'
  uri-bytestring: ! '>=0.2'
  nix-paths: ! '>=1.0.1 && <1.1'
  concurrentoutput: ! '>=0.2'
  lens: ! '>=4.0'
  hnix: ! '>=0.3.4'
  tar: ! '>=0.5'
  cryptonite: ! '>=0.13'
  zlib: ! '>=0.6'
  network-uri: ! '>=2.6'
  mtl: ! '>=2.2'
  foldl: ! '>=1.0'
  hocker: -any
  transformers: ! '>=0.4'
  temporary: ! '>=1.2'
  optparse-applicative: ! '>=0.13'
  deepseq: ! '>=1.4'
  scientific: ! '>=0.3'
  pooled-io: ! '>=0.0.2'
  http-types: ! '>=0.9.1'
  aeson: ! '>=1.0.0.0'
  vector: ! '>=0.11'
  neat-interpolation: ! '>=0.3.2'
  directory: ! '>=1.2.2.0'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.0.5'
author: Awake Security
latest: '1.0.5'
description-type: markdown
description: ! "# Welcome!\nThe `hocker` package provides a small set of utilities
  to fetch docker image\nartifacts from docker registries and produce Nix derivations
  marrying docker and\nNix elegantly:\n\n- [`hocker-image`](./hocker-image/README.md)
  for fetching a docker image\n- [`hocker-layer`](./hocker-layer/README.md) for fetching
  a docker image's layers\n- [`hocker-config`](./hocker-config/README.md) for fetching
  a docker image's configuration JSON\n- [`hocker-manifest`](./hocker-manifest/README.md)
  for fetching a docker registry image manifest\n- [`docker2nix`](./docker2nix/README.md)
  for generating Nix expressions calling the `fetchdocker`\n  derivations, given a
  docker registry image manifest\n  \nThese tools _only_ work with version 2 of the
  **docker registry** and **docker\n(>=) v1.10**.\n\nThe motivation for this tool
  came from a need to fetch docker image artifacts\nfrom a docker registry without
  the stock docker tooling designed to only work\nwith the docker daemon.\n\nOur use
  case (and the reason why this package exposes a `docker2nix` tool) is pulling\ndocker
  images into a [NixOS system's store](https://nixos.org/nix/manual/#ch-about-nix)
  and \nloading those images from the store into the docker daemon running on that
  same system.\n\nWe desired this for two critical reasons:\n1. The docker daemon
  no longer required an internet connection in order to load\n   the docker images\n2.
  By virtue of fetching the docker images at build-time as opposed to run-time,\n
  \  failures from non-existent images or image tags are caught earlier\n\nWe strived
  to make this tool useful outside of the context of Nix and NixOS,\ntherefore all
  of these tools are usable without Nix in the workflow.\n\nFor high-level documentation
  of each utility, please refer to the README's in\ntheir respective directories (links
  are in the above list).\n\n## Quickstart\nLet's first retrieve a docker registry
  image manifest for the `debian:jessie`\ndocker image (note that we need the `library/`
  repository prefix because we are\npulling from the official debian repository!):\n\n```shell\n$
  hocker-manifest library/debian jessie\n{\n   \"schemaVersion\": 2,\n   \"mediaType\":
  \"application/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\":
  \"application/vnd.docker.container.image.v1+json\",\n      \"size\": 1528,\n      \"digest\":
  \"sha256:054abe38b1e6f863befa4258cbfaf127b1cc9440d2e2e349b15d22e676b591e7\"\n   },\n
  \  \"layers\": [\n      {\n         \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n
  \        \"size\": 52550276,\n         \"digest\": \"sha256:cd0a524342efac6edff500c17e625735bbe479c926439b263bbe3c8518a0849c\"\n
  \     }\n   ]\n}\n```\n\nNext, we can easily generate a `fetchdocker` derivation
  using `docker2nix`:\n\n```shell\n$ hocker-manifest library/debian jessie | docker2nix
  library/debian jessie\n{ fetchDockerConfig, fetchDockerLayer, fetchdocker }:\nfetchdocker
  rec {\n    name = \"debian\";\n    registry = \"https://registry-1.docker.io/v2/\";\n
  \   repository = \"library\";\n    imageName = \"debian\";\n    tag = \"jessie\";\n
  \   imageConfig = fetchDockerConfig {\n      inherit tag registry repository imageName;\n
  \     sha256 = \"1rwinmvfc8jxn54y7qnj82acrc97y7xcnn22zaz67y76n4wbwjh5\";\n    };\n
  \   imageLayers = let\n      layer0 = fetchDockerLayer {\n        inherit registry
  repository imageName;\n        layerDigest = \"cd0a524342efac6edff500c17e625735bbe479c926439b263bbe3c8518a0849c\";\n
  \       sha256 = \"1744l0c8ag5y7ck9nhr6r5wy9frmaxi7xh80ypgnxb7g891m42nd\";\n      };\n
  \     in [ layer0 ];\n  }\n```\n\n## Private registries\nWe developed these tools
  with private registries in-mind and they currently\nsupport three modes of authentication:\n\n1.
  Nothing at all (simply do not supply `--token` or `--username` and\n   `--password`)\n2.
  Bearer token-based authentication, you should retrieve a token and then give\n   it
  via the `--token` flag\n3. Basic authentication with `--username` and `--password`
  (most common with\n   nginx proxied registries providing basic auth protection;
  you should be\n   careful to ensure you're only sending requests to registries exposed
  via TLS\n   or SSL!)\n\nA caveat to #1 if you do not supply any authentication credential
  flags and you\nalso do not supply a `--registry` flag then the tools assume you
  wish to make a\nrequest to the public docker hub registry, in which case they ask
  for a\nshort-lived authentication token from the registry auth server and then make
  the\nrequest to the public docker hub registry.\n\n## How to build\n\nBuilding (and
  developing a patch for) this project using `cabal` is\nstraight-forward if we have
  Nix installed:\n\n```bash\n$ nix-shell\n[nix-shell:]$ cabal --version\ncabal-install
  version 1.24.0.2\ncompiled using version 1.24.2.0 of the Cabal library\n```\n\n...
  `cabal` and all of the package dependencies will be in the shell environment\nso
  that we can then:\n\n```bash\n[nix-shell:]$ cabal build\n```\n\nAlternatively we
  can `nix-build` the project, this is not recommended for\ndevelopment because Nix
  will not build the project incrementally:\n\n```bash\n$ nix-build --attr hocker
  release.nix\nthese derivations will be built:\n  /nix/store/3dwvcm66360fpfqrrc4swp9y4q0jzvh9-hocker-0.1.0.0.drv\nbuilding
  path(s) ‘/nix/store/g16mrfhlmb1z3qkdzr0diaqn2dhl8bv6-hocker-0.1.0.0’\n...\n```\n"
license-name: Apache-2.0
