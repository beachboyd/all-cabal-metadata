homepage: ''
changelog-type: ''
hash: 0d74ba5ed1e330446fe3dc4bfc304e11a1d14ce038d6de44957d79d183440186
test-bench-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.0 && <5.0'
  text: ! '>=0.11'
  filepath: ! '>=1.3'
  process: ! '>=1.2'
  parsec: ! '>=3.1'
  containers: ! '>=0.5'
  transformers: ! '>=0.3'
  QuickCheck: ! '>=2.4'
  pretty: ! '>=1.1'
maintainer: Joe Leslie-Hurd <joe@gilith.com>
synopsis: Higher order logic
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.0 && <5.0'
  text: ! '>=0.11'
  filepath: ! '>=1.3'
  process: ! '>=1.2'
  parsec: ! '>=3.1'
  containers: ! '>=0.5'
  transformers: ! '>=0.3'
  pretty: ! '>=1.1'
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
author: Joe Leslie-Hurd <joe@gilith.com>
latest: '1.3'
description-type: markdown
description: ! "The hol package\n===============\n\nThe [hol package][] is a [Haskell][]
  library that implements a higher order logic kernel. It can read proof files in
  [OpenTheory][] format, and includes a pretty-printer compatible with the [standard
  theory library][].\n\nThis software is released under the [MIT License][].\n\nInstall\n-------\n\nInstalling
  the hol package requires [cabal][]:\n\n    git clone https://github.com/gilith/hol.git\n
  \   cd hol\n    cabal install\n\nTest\n----\n\nUse [cabal][] to run the test suite:\n\n
  \   cabal test\n\nRun\n----\n\nThe hol package contains an executable called hol-pkg,
  which is run as follows:\n\n    Usage: hol-pkg INPUT\n    where INPUT is one of
  the following forms:\n      FILE.art     : a proof article file\n      FILE.thy
  \    : a theory package file\n      NAME-VERSION : a specific version of an installed
  theory package\n      NAME ...     : the latest installed version of a list of packages\n\nThe
  hol-pkg program reads the INPUT to generate a set of theorems, which are pretty-printed
  to standard output together with the symbols they contain. For example,\n\n    hol-pkg
  unit\n\nreads the latest installed version of the unit theory package to generate
  a set of 5 theorems, resulting in the following output:\n\n    3 type operators:
  (->) bool unit\n    6 constants: (=) (!) (==>) (?) (?!) ()\n    5 theorems:\n      |-
  !v. v = ()\n      |- !f g. f = g\n      |- !e. ?fn. fn () = e\n      |- !e. ?!fn.
  fn () = e\n      |- !p. p () ==> !x. p x\n\nProfile\n-------\n\nBefore starting,
  make sure the GHC system and the GHC text, transformers and parsec libraries are
  installed with profiling support. On a Debian system the following command installs
  them:\n\n     apt-get install ghc-prof libghc-text-prof libghc-transformers-prof
  libghc-parsec3-prof\n\nNext use [cabal][] to install the other dependent libraries
  with profiling support:\n\n    cabal sandbox init\n    cabal configure --enable-library-profiling
  --enable-profiling --enable-benchmarks\n    cabal install --only-dependencies --enable-library-profiling\n\nBuild
  the hol package library and benchmark program:\n\n    cabal configure --enable-library-profiling
  --enable-profiling --enable-benchmarks\n    cabal build\n\nUse the [opentheory tool]
  to create a benchmark file:\n\n     opentheory info --article -o base.art base\n\nThen
  use [cabal][] to run the benchmark:\n\n    cabal bench\n\nThe time and memory allocation
  profile of the program can be viewed in text format:\n\n    less hol-profile.prof\n\nAlternatively
  the memory allocation profile can be viewed as a graph:\n\n    hp2ps -e8in -c hol-profile.hp\n
  \   ps2pdf hol-profile.ps\n    xpdf hol-profile.pdf\n\n[cabal]: https://www.haskell.org/cabal/
  \"Cabal\"\n[Haskell]: https://www.haskell.org/\n[hol package]: https://hackage.haskell.org/package/hol
  \"hol package\"\n[MIT License]: https://github.com/gilith/hol/blob/master/LICENSE
  \"MIT License\"\n[OpenTheory]: http://www.gilith.com/research/opentheory/ \"The
  OpenTheory project home page\"\n[opentheory tool]: http://www.gilith.com/software/opentheory/
  \"The opentheory tool\"\n[standard theory library]: http://opentheory.gilith.com/?pkg=base
  \"The OpenTheory standard theory library\"\n"
license-name: MIT
