homepage: http://holumbus.fh-wedel.de
changelog-type: ''
hash: 6530df438e8a8656283c747ac983170a2dc419fcf158f1927d8b27624e916c03
test-bench-deps: {}
maintainer: Stefan Schmidt <sts@holumbus.org>
synopsis: intra- and inter-program communication
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  unix: ! '>=2.3'
  stm: ! '>=2.1.1.2'
  base: ! '>=4 && <5'
  time: ! '>=1.1'
  haskell98: ! '>=1'
  network: ! '>=2.1'
  array: ! '>=0.2.0.0'
  containers: ! '>=0.1'
  hxt: ! '>=8.2'
  readline: ! '>=1 && <2'
  binary: ! '>=0.4'
  hslogger: ! '>=1.0'
  random: ! '>=1.0'
  deepseq: ! '>=1.1 && <2'
all-versions:
- 0.0.1
- 0.0.1.1
- 0.1.0
- 0.1.1
author: Stefan Schmidt, Uwe Schmidt
latest: 0.1.1
description-type: text
description: ! "This is the Holumbus-Distribution Library\n\nVersion 0.1.0\n\nStefan
  Schmidt sts@holumbus.org\n\nhttp://holumbus.fh-wedel.de\n\n\nAbout\n-----\n\nHolumbus
  is a set of Haskell libraries. This package contains the \nHolumbus-Distribution
  library for building and running a distributed systems.\nOne of the core elements
  of this library is an Erlang-style communication \nsystem for interchanging data
  between different threads or applications. \n\nThis library was completely rewritten
  between version 0.0.1 and 0.1.0. The old\npackages can be found under Holumbus.Network.*
  while the new ones are\nlocated at Holumbus.Distribution.*. The old packages will
  be removed in\nfuture versions.\n\nThis library itself is independent from other
  Holumbus libraries although it\ncontains some modules which are only to be used
  by the other Holumbus\nlibraries but this may change in the near future.\n\n\nDocumentation:\n------------------------------------------\n\nHaskell
  offers great libraries and datatypes for the implementation\nof intra-process communication,
  e.g. MVars, Chans, STM. But compared\nto other functional languages like Erlang
  or Mozart/Oz (ok, the later\nis a multi paradigm language) offer better support
  for building distributed\nsystems. Holumbus-Distribution wants to close this gap
  by offering multiple\ndistributed data structures.\n\nThe following datastructures
  are implemented so far:\n\n* distributed Chan (DChan)\n  like the Chan datatype,
  but it allows the writing\n  and reading (!) from other programs\n\n* distributed
  MVar (DMVar)\n  like the MVar datatype, but the content of the\n  MVar can be shared
  among multiple programs.\n\n* distributed Functions (DFunction)\n  an easy way to
  do remote procedure calls, just like\n  haxr  \n\n* distributed Values (DValue)\n
  \ a variable which could only be written once and\n  which could easily read by
  other programs\n\n* distributed Streams and Ports (DStream, DPort) \n  just like
  the DChan, but this time, you are only\n  allowed to read from the channel from
  one program\n\n\nTo be able to use these data structures, your program needs to
  become a\ndistributed node (DNode, comparable to an Erlang-Node). After initializing\nthe
  node, you can create instances of the data structures described above.\nYou only
  need to register these resources at your node and then other nodes\nare able to
  access them. \n\n\n\nContents\n--------\n\nExamples  Some example applications\nPrograms
  \ The applications you need to run a distributed system.\n          (these are not
  needed any more an belongs to the old\n           Holumbus.Network.* packages, they
  will be deleted in 0.2.0)\nsource    Source code of the Holumbus-Distribution library.\n\n\nRequirements\n------------\n\nSo
  far, this library is only tested under Linux, please tell me, if you have \nproblems
  under Windows or other OS.\nThe Holumbus-Distribution library requires at least
  GHC 6.10 and the \nfollowing packages (available via Hackage).\n\n  containers\n
  \ hslogger\n  network \n  unix\n  time\n  bytestring\n  binary\n  hxt\n\n\nInstallation\n------------\n\nA
  Cabal file is provided, therefore Holumbus-Distribution can be installed using\nthe
  standard Cabal way:\n\n$ runhaskell Setup.hs configure\n$ runhaskell Setup.hs build\n$
  runhaskell Setup.hs install --global # with root privileges\n\nThis will generate
  the library and the PortRegestry programs.\n\nFor those who prefer to build it the
  old way with make:\n\n$ make build\n$ make install # with root privileges\n\n\nSteps
  to make a distributed system running\n--------------------------------\n\nHow to
  use Streams and Ports:\n\nOn the receive side:\n    -- Step 1:\n    -- make a Haskell
  DNode, named \"myReceiver\" on the Port 7999\n    -- this only needs to be called
  once during the runtime of the program\n    _ <- initDNode $ (defaultDNodeConfig
  \"myReceiver\")\n      { dnc_MinPort = (fromInteger 7999), dnc_MaxPort = (fromInteger
  7999) }\n    \n    -- Step 2:\n    -- make a new DStream, named \"myStream\"\n    --
  this stream can be used until you close it with \"closeDStream\"\n    stream <-
  newDStream \"myStream\"\n\n    -- Step 3:\n    -- wait for the next message, read
  it print it out to stdout\n    msg <- (receive stream)::(IO String)\n    putStrLn
  msg\n\n    -- Step 4:\n    -- we are behaving nicely and clean everything up before
  we leave\n    closeDStream stream\n    deinitDNode\n\nOn the sender side:\n\n    --
  Step 1:\n    -- make a Haskell DNode, we don't care about its name, so we leave
  it\n    -- blank. The system will generate a unique random name on its own.\n    --
  this only needs to be called once during the runtime of the program\n    _ <- initDNode
  $ defaultDNodeConfig \"\"\n\n    -- Step 2:\n    -- we need to know how to address
  the receiver node, so we have to provide\n    -- its address, this only needs to
  be done once, or when the address of\n    -- the receiver changes (which will not
  happen in most applications)\n    addForeignDNode $ mkDNodeAddress \"myReceiver\"
  \"localhost\" (fromInteger 7999)\n\n    -- Step 3:\n    -- we make a new port, connected
  to \"myStream\" at the node \"myReceiver\"\n    port <- newDPort \"myStream\" \"myReceiver\"\n\n
  \   -- Step 4:\n    -- send the messages\n    send port \"Hello World\"\n\n    --
  Step 5:\n    -- we are behaving nicely and clean everything up before we leave\n
  \   deinitDNode\n"
license-name: LicenseRef-OtherLicense
