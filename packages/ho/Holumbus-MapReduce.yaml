homepage: http://holumbus.fh-wedel.de
changelog-type: ''
hash: 591f92344a76a601bdf3b7e2fa5a5d463e38cbc4ee8bd1be4b0f0620aca5f5f3
test-bench-deps: {}
maintainer: Stefan Schmidt <sts@holumbus.org>
synopsis: a distributed MapReduce framework
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  extensible-exceptions: ! '>=0.1 && <1'
  unix: ! '>=2.3'
  base: ! '>=4 && <5'
  time: ! '>=1.1'
  haskell98: ! '>=1'
  network: ! '>=2.1'
  containers: ! '>=0.1'
  hxt: ! '>=8.2'
  readline: ! '>=1.0'
  binary: ! '>=0.4'
  hslogger: ! '>=1.0'
  Holumbus-Distribution: ! '>=0.1.1 && <0.2'
  deepseq: ! '>=1.1 && <2'
  Holumbus-Storage: ! '>=0.0.1 && <0.2'
  directory: ! '>=1.0'
all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
author: Uwe Schmidt, Stefan Schmidt
latest: 0.1.1
description-type: text
description: ! "This is the Holumbus-MapReduce Framework\n\nVersion 0.1.0\n\nStefan
  Schmidt sts@holumbus.org\n\nhttp://holumbus.fh-wedel.de\n\n\nAbout\n-----\n\nHolumbus
  is a set of Haskell libraries. This package contains the \nHolumbus-MapReduce library
  for building and running distributed MapReduce\nsystems.\n\nThis library depends
  on the Holumbus-Distributed and Holumbus-Storage libraries. \nIf you want to run
  some of the examples, e.g. the distributed Web-Crawler \nand Indexer, the the Holumbus-Searchengine
  library must also be installed.\n\n\nContents\n--------\n\nExamples  Some example
  applications and utilities.\nPrograms  The applications you need to run a distributed
  MapReduce system.\nsource    Source code of the Holumbus-MapReduce library.\n\n\nRequirements\n------------\n\nSo
  far, this library is only tested under Linux, please let us know, if there are \nany
  problems under Windows or other OSes.\nThe Holumbus-MapReduce library requires at
  least GHC 6.10 and the \nfollowing packages (available via Hackage).\n\n  containers\n
  \ hslogger\n  directory\n  network\n  time\n  bytestring\n  binary\n  hxt\n  Holumbus-Distribution\n\n\nInstallation\n------------\n\nA
  Cabal file is provided, therefore Holumbus-MapReduce can be installed using\nthe
  standard Cabal way:\n\n$ runhaskell Setup.hs configure\n$ runhaskell Setup.hs build\n$
  runhaskell Setup.hs install # with root privileges\n\nIf you prefer to do it the
  old way there with make:\n\n$ make build\n$ make install # with root privileges\n\n\nSteps
  to make the system running\n--------------------------------\n\n1. Compile and install
  the Holumbus-Distribution library.\n\n2. Compile and install the Holumbus-MapReduce
  framework.\n   If this is done with cabal, step 3. can be skipped, the\n   master
  will be build and installed with cabal\n\n$ make build\n$ make install       # this
  with root privileges\n\n3. Compile the Master-Program.\n   It is located in Programs/\n\n$
  make programs\n\n4. Start the PortRegistry from the Holumbus-Distribution library.\n\n5.
  Start the Master.\n   If you want to start the master on another machine than the
  PortRegistry,\n   then you have to copy the file \"registry.xml\" from the tmp directory
  to the\n   the tmp directory on the machine the master should run on.\n\n$ cd Programs/Master\n$
  ./Master\n\n   Alternatively start the Master program, installed with cabal\n\nNow,
  the system itself is running, but as you might wonder, you only have \nstarted the
  registry for communication and the master for the MapReduce system.\nTo run your
  own system, you have to create a MapReduce Client and a MapReduce\nWorker. Here,
  we'll show you to run the examples, they'll show you how to\ncreate you own system.\n\n6.
  Compile the Examples. \n   For some examples (e.g. the Crawler), this requires that
  you have installed \n   the Holumbus-Searchengine framework. You can get it from
  the Holumbus \n   homepage (http://holumbus.fh-wedel.de), please read its documentation
  for further\n   instructions and details. You'll only need the Searchegine library
  installed\n   for the MapReduce examples, not the library itself.\n\n$ make examples
  \   # some examples require the Searchengine lib\n\n7. Start the Workers.\n   At
  this time every worker has to run in its own directory, so create for\n   each worker,
  you want to run, its own subdirectory and copy the executeable\n   to it. If you
  want to run the workers on different machines, you have to\n   copy the file \"registry.xml\"
  from your tmp directory to the tmp directory\n   of the machine the worker will
  work on.\n\n8. Start the Client.\n   Now you can start the client and wait the things
  to come. If you want to run\n   the client on another machine than the PortRegistry,
  you have to copy the\n   registry.xml file from the tmp directory, too.\n"
license-name: LicenseRef-OtherLicense
