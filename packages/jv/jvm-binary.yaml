homepage: https://github.com/ucla-pls/jvm-binary#readme
changelog-type: markdown
hash: 6a1acb7c605ddea4f0477119a3aa9b0618a137da4c030b32067e237b6819ca2b
test-bench-deps:
  bytestring: -any
  hspec-expectations-pretty-diff: -any
  base: ! '>=4.9 && <4.11'
  deriving-compat: -any
  tasty-discover: -any
  text: -any
  tasty-hspec: -any
  jvm-binary: -any
  filepath: -any
  criterion: -any
  containers: -any
  binary: -any
  generic-random: -any
  tasty-quickcheck: -any
  mtl: -any
  data-binary-ieee754: -any
  attoparsec: -any
  tasty: -any
  deepseq: ! '>=1.4.3.0'
  QuickCheck: -any
  template-haskell: -any
  vector: -any
  directory: -any
maintainer: Christian Gram Kalhauge <kalhauge@cs.ucla.edu>
synopsis: A library for reading Java class-files
changelog: ! "# Change log\n\n## Version 0.1.0 \n\n- Fix documentation\n- Remove ConstantRef\n-
  Add better method and field descriptions \n- Introducing a stageing system\n- Added
  Code writing\n- Changed Megaparsec to Attoparsec of improved performance.\n- A lot
  of extra work\n\n- Add Attributes \n  - LineNumberTable\n\n## Version 0.0.2\n\n-
  Fix problems with package.yaml file\n- Add ConstantValue \n- Add Exceptions\n- Add
  StackMapTable\n- Add BootstrapMethods\n\n## Version 0.0.1\n\nThe initial version\n\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.9 && <4.11'
  deriving-compat: -any
  text: -any
  containers: -any
  binary: -any
  mtl: -any
  data-binary-ieee754: -any
  attoparsec: -any
  deepseq: ! '>=1.4.3.0'
  template-haskell: -any
  vector: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.1.0'
author: Christian Gram Kalhauge
latest: '0.1.0'
description-type: markdown
description: ! "# jvm-binary\n\nA library for reading and writing Java class-files.
  To get started\nimporting the `Language.JVM` file should be sufficient for most
  uses.\n\nIf you want to access Code elements of methods it is recommended to \nimport
  `Language.JVM.Attribute.Code` qualified, like this:\n\n```haskell\nimport           Language.JVM\nimport
  qualified Language.JVM.Attribute.Code as Code\n\nimport qualified Data.ByteString.Lazy
  as BL\n\nmain :: IO ()\nmain = \n  ecfl <- readClassFile <$> BL.readFile \"test/data/project/Main.class\"
  \n  case ecfl of \n    Right clf -> do\n      print (cThisClass clf)\n      print
  (cSuperClass clf)\n    Left msg -> \n      print msg\n```\n\n## Stages\n\nThere
  are two stages in the current state of the repository. `Low` is closer\nto the class-file,
  while the `High` stage is easier to work with. The reason\nthat we have the two
  stages is that the class-file representation has indices\ninto the Constant Pool.
  The `High` stage eliminates all these problems.\n\n\n## Todo's\n\n- Add more Attributes
  as to the\n[docs](http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7).\n-
  Add documentation for Code\n- Setup regular benchmarks\n\n## Developing\n\nUse stack
  to build, test, and benchmark.\n\n"
license-name: MIT
