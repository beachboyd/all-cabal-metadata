homepage: http://github.com/tweag/inline-java/tree/master/jvm#readme
changelog-type: ''
hash: 10dc29399519fc8ed430f670b8340c5ff8031c6e7be8aa09602c67a77f226fb6
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  jni: -any
  hspec: -any
  text: -any
  criterion: -any
  jvm: -any
  singletons: -any
  deepseq: ! '>=1.4.2'
maintainer: m@tweag.io
synopsis: Call JVM methods from Haskell.
changelog: ''
basic-deps:
  exceptions: ! '>=0.8'
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  jni: ! '>=0.4.0 && <0.6'
  text: ! '>=1.2'
  constraints: ! '>=0.8'
  singletons: ! '>=2.0'
  distributed-closure: ! '>=0.3'
  choice: ! '>=0.1'
  vector: ! '>=0.11'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.4.0'
author: Tweag I/O
latest: '0.4.0'
description-type: markdown
description: ! "# jvm: Call any JVM function from Haskell\n\n[![jvm on Stackage LTS](http://stackage.org/package/jvm/badge/lts)](http://stackage.org/lts/package/jvm)\n[![jvm
  on Stackage Nightly](http://stackage.org/package/jvm/badge/nightly)](http://stackage.org/nightly/package/jvm)\n\nThis
  package enables calling any JVM function from Haskell. If you'd\nlike to call JVM
  methods using Java syntax and hence get the Java\ncompiler to scope check and type
  check all your foreign calls, see\n[inline-java][inline-java], which builds on top
  of this package.\n\n[inline-java]: https://github.com/tweag/inline-java#readme\n\n#
  Example\n\nGraphical Hello World using Java Swing:\n\n```Haskell\n{-# LANGUAGE DataKinds
  #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Data.Text (Text)\nimport Language.Java\n\nnewtype
  JOptionPane = JOptionPane (J ('Class \"javax.swing.JOptionPane\"))\ninstance Coercible
  JOptionPane ('Class \"javax.swing.JOptionPane\")\n\nmain :: IO ()\nmain = withJVM
  [] $ do\n    message <- reflect (\"Hello World!\" :: Text)\n    callStatic\n      (classOf
  (undefined :: JOptionPane))\n      \"showMessageDialog\"\n      [JObject nullComponent,
  JObject (upcast message)]\n  where\n    nullComponent :: J ('Class \"java.awt.Component\")\n
  \   nullComponent = jnull\n```\n"
license-name: BSD3
