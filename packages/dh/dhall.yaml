homepage: ''
changelog-type: markdown
hash: 8cd82678acd98051663d9459e5672f5740509dadc5c443d8bdcb34c20dd2f19e
test-bench-deps:
  insert-ordered-containers: -any
  base: ! '>=4 && <5'
  dhall: -any
  text: ! '>=0.11.1.0 && <1.3'
  tasty-hunit: ! '>=0.9.2 && <0.11'
  prettyprinter: -any
  tasty: ! '>=0.11.2 && <1.1'
  deepseq: ! '>=1.2.0.1 && <1.5'
  vector: ! '>=0.11.0.0 && <0.13'
maintainer: Gabriel439@gmail.com
synopsis: A configuration language guaranteed to terminate
changelog: ! "1.12.0\n\n* Additional changes to support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/331\n*
  BREAKING CHANGE TO API: Replace dependency on `text-format` with `formatting`\n
  \   * This replace the `Data.Text.Buildable.Buildable` instances with\n      `Formatting.Buildable.Buildable`
  instances, which is why this is a\n       breaking change\n    * `text-format` is
  no longer maintained and blocking GHC 8.4 support\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/330\n\n1.11.1\n\n*
  Support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/321\n*
  Fix α-normalization bug\n    * Note that this is not a type-checking bug.  This
  only affects users who\n      were directly using the `alphaNormalize` function
  from the Haskell API\n      because `let` expressions were not correctly α-normalized\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/319\n* Slight tweak
  to syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/324\n*
  Increase upper bound on `ansi-terminal` and `exceptions`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/322\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/325\n\n1.11.0\n\n* BREAKING
  CHANGE TO THE API: Fix `{Natural,Optional,List}/build` semantics to\n  match standard\n
  \   * This is a breaking change because the `OptionalLit` and `ListLit`\n      constructors
  changed their representations to efficiently support the\n      standard semantics\n
  \   * `ListLit` now stores a `Data.Sequence.Seq` instead of a\n      `Data.Vector.Vector`\n
  \   * `OptionalLit` now stores a `Maybe` instead of a `Data.Vector.Vector`\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/300\n* BREAKING CHANGE TO
  THE COMMAND LINE: `dhall` executable always formats output\n    * Previously you
  had to opt into formatting using `--pretty`\n    * Now formatting is obligatory
  and the `--pretty` flag is gone\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/303\n*
  Feature: New `:save` command for `dhall-repl`\n    * Now you can save an expression
  to a file: `./yourFile = someExpression`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/309\n*
  Improvement: Add new simplifications to match standard\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/312\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/316\n* Improvement:
  Fix equivalence check to match standard\n    * Practically this means that more
  corner cases of the language correctly\n      type-check than before\n* Improvement:
  New `--plain` flag to disable syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/310\n*
  Improvement: Prelude now provides an umbrella `package.dhall` import\n    * This
  is primarily for convenience\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/298\n*
  Improvement: Context is now normalized\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/302\n*
  Replace `cryptohash` dependency with `cryptonite`\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5d2012927a062ec8bdf2bbaba77150344f38db77\n*
  Increase upper bound on exceptions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/306\n*
  Fix type error in tutorial\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5a9126b2f684d3236fc1e8e20e206cfaf47d97db\n\n1.10.0\n\n*
  Feature: Records/unions can now have fields/alternatives that are types\n    * i.e.
  `{ foo = Text, bar = List }` is legal now\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/273\n*
  Feature: New `dhall-repl` for interactively evaluating Dhall expressions\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/266\n* Feature: Syntax highlighting\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/260\n* Feature: BREAKING
  CHANGE TO THE API: `dhall-format` preserves field order\n    * This changes the
  syntax tree to use an `InsOrdHashMap` instead of a `Map`\n* BREAKING CHANGE TO THE
  API: Use Haskell's `Scientific` type\n    * This is fixes the interpreter to correct
  handle really large/small numbers\n    * This also allows marshaling into Haskell's
  `Scientific` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/256\n*
  BREAKING CHANGE TO THE API: Remove `system-filepath`/`system-fileio` dependencies\n
  \   * Now the library uses `Prelude.FilePath`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/248\n*
  Feature: Labels can now begin with reserved names\n    * i.e. `List/map` is now
  a legal label\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/255\n*
  Fix: Rendered labels are now correctly escaped if they are numbers\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/252\n*
  Add the instance `Interpret String`.\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/247\n*
  Fix: Custom contexts passed to `typeWith` are now checked\n    * This prevents a
  custom context from triggering an infinite loop\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/259\n\n1.9.1\n\n*
  `dhall-format` now emits single-quoted strings for multi-line strings\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/237\n* Improved error messages
  for list elements with the wrong type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/236\n*
  Change `lens` dependency to `lens-family-core`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/238\n\n1.9.0\n\n*
  Feature: BREAKING CHANGE TO LANGUAGE AND API: Add `constructors` keyword\n    *
  This new keyword generates constructors from a union type\n        * See the updated
  Haskell tutorial for more details\n    * This means that `constructors` is now a
  reserved keyword\n    * This adds a new `Constructors` constructor to the `Expr`
  type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/199\n* Feature:
  BREAKING CHANGE TO THE API: `dhall-format` preserves interpolation\n    * This changes
  the `TextLit` constructor to represent an interpolated `Text`\n      literal\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/220\n* Feature: You can now
  define type synonyms using `let`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/202\n*
  Feature: Extend valid set of quoted labels\n    * See: https://github.com/dhall-lang/dhall-lang/pull/65\n
  \   * See: https://github.com/dhall-lang/dhall-lang/pull/77\n* Performance: Improve
  startup time when importing files, but not URLs\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/194\n*
  Security: `localhost`/`127.0.0.1` imports no longer count as local imports\n    *
  Specifically: they cannot import environment variables or files\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/197\n*
  Security: Fix potential type-checking bug\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/198\n*
  Fix: BREAKING CHANGE TO API: Improve localization of error messages\n    * This
  required fixing the type of `normalize`/`shift`/`subst` to preserve\n      the first
  type parameter of `Expr` (i.e. they no longer delete `Note`\n      constructors)\n
  \   * A new `denote` function was added for the explicit purpose of deleting\n      `Note`
  constructors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/218\n*
  Expose `MissingEnvironmentVariable` exception type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/196\n*
  Add `genericAuto`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/195\n*
  Add `inputWith`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/222\n*
  Add`loadWithContext`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/215\n*
  Add `pair`/`unit`/`string`/`list`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/227\n\n1.8.2\n\n*
  Add `typeWithA` for type-checking custom `Embed`ded values\n* Fix `dhall{,-*}` executables
  to ignore ambient locale and use UTF8\n* Increase upper bound on `tasty` dependency\n\n1.8.1\n\n*
  `dhall` executable can now format output using `--pretty`\n* Improved Unicode suppport
  on Windows\n\n1.8.0\n\n* BREAKING CHANGE TO LANGUAGE: Add support for import integrity
  checks\n    * In practice, the likelihood of this breaking code in the wild is\n
  \     astronomically low\n    * This would only break code of the form `sha256:aaa...aaa`
  (i.e. a\n      variabled named `sha256` with a type annotation for a type with a
  name\n      64 characters long drawn from the first 6 characters of the alphabet)\n*
  BUG FIX: Fix parsing of single quotes in single-quoted strings\n* BUG FIX: Fix superfluous
  parentheses introduced by `dhall-format`\n* New `dhall-hash` executable\n    * This
  goes hand-in-hand with the added support for integrity checks since\n      the executable
  lets you compute the current hash of an import\n\n1.7.0\n\n* BREAKING CHANGE TO
  LANGUAGE: Update parser to match standardized grammar\n    * Trailing commas and
  bars no longer supported for union and record literals\n    * Paths no longer permit
  commas\n    * URL grammar is now RFC-compliant\n    * Environment variables can
  now be quoted to support full range of\n      POSIX-compliant names\n    * Text
  literals support full set of JSON escape sequences (such as `\\u2192`)\n* BREAKING
  CHANGE TO LANGUAGE: Single quoted strings strip leading newlines\n* BUG FIX: Fixed
  type-checking infinite loops due to non-type-checked variables\n  in context\n*
  BUG FIX: Fixed type-checking bug due to missing context when type-checking\n  certain
  expressions\n* BUG FIX: Fixed type-checking bug due to off-by-one errors in name
  shadowing\n  logic\n* New `dhall-format` executable to automatically format code\n*
  Performance optimizations to `Natural/fold` and `List/fold`\n* Improved parsing
  performance (over 3x faster)\n* Union literals can now specify the set value anywhere
  in the literal\n    * i.e. `< A : Integer | B = False | C : Text >`\n* New `Inject`
  instance for `()`\n* Several tutorial fixes and improvements\n\n1.6.0\n\n* BREAKING
  CHANGE TO THE API: Drop support for GHC 7.*\n* BREAKING CHANGE TO THE API: Add support
  for customizing Dhall import\n    * This is a breaking change because this changes
  the type of `loadWith`\n* BREAKING CHANGE TO THE API: Add field to `UnboundVariable`
  error containing\n* BUG FIX: Fix parsing single quotes in string literals\n  the
  name of the unbound variable\n* Add `List/concatMap` to the Prelude\n* You can now
  derive `Inject` and `Interpret` for types with unlabeled fields\n* Add new instances
  for `Interpret`:\n    * `[]`\n    * `(,)`\n* Add new instance for `Inject`\n    *
  `[]`, `Data.Set.Set`, `Data.Sequence.Seq`\n    * `(,)`\n    * `Int`, `Word8`, `Word16`,
  `Word32`, `Word64`\n* Add `Eq` instance for `Src`\n\n1.5.1\n\n* Increase upper bound
  on `vector` and `optparse-generic`\n\n1.5.0\n\n* BREAKING CHANGE: Add list concatenation
  operator: `(#)`\n    * This is a breaking change because it adds a new constructor
  to the `Expr`\n      type which breaks exhaustive pattern matches\n* BREAKING CHANGE:
  Add `Interpret` support for lazy `Text`\n    * This is a breaking change because
  it renames `text` to `strictText`\n* Add `Interpret` instance for decoding (a limited
  subset of) Dhall functions\n* Dhall no longer requires Template Haskell to compile\n
  \   * This helps with cross-compilation\n* Add `rawInput` utility for decoding a
  Haskell value from the `Expr` type\n* Add `loadWith`/`normalizeWith` utilities for
  normalizing/importing modules\n  with a custom context\n* Export `Type` constructor\n\n1.4.2\n\n*
  Fix missing `Prelude` files in package archive uploaded to Hackage\n\n1.4.1\n\n*
  Fix missing `tests/Tutorial.hs` module in package archive uploaded to Hackage\n\n1.4.0\n\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: You can now supply custom headers for\n
  \ URL imports with the new `using` keyword\n    * This is a breaking change to the
  language because this adds a new reserved\n      `using` keyword\n    * This is
  a breaking change to the API because this adds a new field to the\n      `URL` constructor
  to store optional custom headers\n* BUG FIX: `:` is no longer a disallowed path
  character\n    * This was breaking URL imports with a port\n* BUG FIX: If you import
  a home-anchored path (i.e. `~/foo`) and that imports a\n  relative path (like `./bar`),
  then the canonical path of the relative import\n  should be home-anchored (i.e.
  `~/bar`).  However, there was a bug that made\n  lose the home anchor (i.e. `./foo/bar`),
  which this release fixes\n  likely fail due to no longer being home-anchored (i.e.
  `./foob\n* Add support for string interpolation\n* `merge` no longer requires a
  type annotation if you are merging at least one\n  alternative\n* Expanded Prelude\n
  \   * `./Prelude/Optional/all`\n    * `./Prelude/Optional/any`\n    * `./Prelude/Optional/filter`\n
  \   * `./Prelude/Optional/length`\n    * `./Prelude/Optional/null`\n    * `./Prelude/Text/concatMap`\n
  \   * `./Prelude/Text/concatMapSep`\n    * `./Prelude/Text/concatSep`\n* Rearrange
  detailed error messages to put summary information at the bottom of\n  the message\n\n1.3.0\n\n*
  BREAKING CHANGE TO THE API: Add support for new primitives, specifically:\n    *
  `(//)` - Right-biased and shallow record merge\n    * `Optional/build` (now a built-in
  in order to support build/fold fusion)\n    * `Natural/show`\n    * `Integer/show`\n
  \   * `Double/show`\n    * `Natural/toInteger`\n    * These all add new constructors
  to the `Expr` type, which would break\n      exhaustive pattern matches\n* BREAKING
  CHANGE TO THE LANGUAGE: Imported paths and URLs no longer support\n  the characters:
  \"()[]{}<>:\"\n    * This reduces the number of cases where you have to add a space
  after\n      imports\n    * Note that this does not exclude the `:` in the URL scheme
  (i.e. `http://`)\n* Increase connection timeout for imports\n* Variable names now
  allow the `-` character for all but the first character\n* You can now escape identifiers
  with backticks\n    * This lets you name identifiers so that they don't conflict
  with reserved\n      key words\n    * This is most useful when converting Dhall
  to other file formats (like\n      JSON) where you might need to emit a field that
  conflicts with one of\n      Dhall's reserved keywords\n* New `--version` flag for
  the `dhall` executable\n\n1.2.0\n\n* BREAKING CHANGE: Add support for customizing
  derived `Interpret` instances\n    * This is a breaking change to the Dhall library
  API since this changes the\n      signature of the `Interpret` class by replacing
  the `auto` method with a\n      more general `autoWith` method.  This `autoWith`
  now takes an\n      `InterpretOptions` argument that lets you customize derived
  field and\n      constuctor names\n    * In practice user programs that use the
  common path will be unaffected by\n      this change\n    * This is not a breaking
  change to the Dhall language\n* BREAKING CHANGE: Type annotations now bind more
  tightly than lambda\n  abstraction\n    * This is a breaking change to the Dhall
  language.  An expression like this:\n\n      ```\n      λ(x : A) → y : B\n      ```\n\n
  \     ... used to parenthesized implicitly as:\n\n      ```\n      (λ(x : A) → y)
  : T\n      ```\n\n      ... but is now parenthesized implicitly as:\n\n      ```\n
  \     λ(x : A) → (y : T)\n      ```\n\n      This is now consistent with Haskell's
  precedence and also consistent with\n      the precedence of `List` and `Optional`
  type annotations\n\n    * This change affects programs with an expression like this:\n\n
  \     ```\n      -- Assuming that `y : B`\n      λ(x : A) → y : A → B\n      ```\n\n
  \     The above program would type-check before this change but not type-check\n
  \     after this change.  You would you need to fix the above program by either\n
  \     changing the type signature to annotate just the type of `y` like this:\n\n
  \     ```\n      λ(x : A) → y : B\n      ```\n\n      ... or by adding explicit
  parentheses like this:\n\n      ```\n      (λ(x : A) → y) : A → B\n      ```\n\n
  \   * This is not a breaking change to the Dhall library API\n* BREAKING CHANGE:
  Add support for importing a path's contents as raw `Text` by\n  adding `as Text`
  after the import\n    * This is a breaking change to the Dhall language\n    * This
  is technically a breaking change, but is extremely unlikely to affect\n      you
  program.  This only changes the behavior of old programs that had an\n      expression
  of the form:\n\n      ```\n      /some/imported/function as Text\n      ```\n\n
  \     ... where `/some/imported/function` is an imported function being applied\n
  \     to two arguments, the first of which is a bound variable named `as` and\n
  \     the second of which is the type `Text`\n    * This is not a breaking change
  to the Dhall library API\n* BREAKING CHANGE: Add support for importing environment
  variables using\n  `env:VAR` syntax\n    * This is a breaking change to the Dhall
  library API since it adds a new\n      `Path` constructor\n    * This also technically
  a breaking change to the Dhall language but\n      extremely unlikely to affect
  your program.  This only changes the behavior\n      of old programs that had an
  expression of the form:\n\n      ```\n      env:VAR\n      ```\n\n      ... where
  `env` was the name of a bound variable and `:VAR` was a type\n      annotation without
  spaces around the type annotation operator\n\n      After this change the program
  would be interpreted as an import of the\n      contents for the environment variable
  named `VAR`\n* BREAKING CHANGE: Support importing paths relative to home directory
  using\n  `~/some/path` syntax\n    * This is a breaking change to the Dhall library
  API since it adds a new\n      field to the `File` constructor indicating whether
  or not the imported\n      path is relative to the home directory\n    * This is
  not a breaking change to the Dhall language and the new syntax\n      does not override
  any old syntax\n* Permit trailing commas and bars in record/union syntax\n* Improve
  location information for parsing errors\n\n1.1.0\n\n* BREAKING CHANGE: Non-empty
  lists no longer require a type annotation\n    * This is a breaking change to the
  Haskell library, not the Dhall language\n    * This change does not break existing
  Dhall programs\n    * The `Expr` type was modified in a non-backwards-compatible
  way\n* Add new `exprA` parser\n* Add new `InvalidType` exception if `input` fails
  on an invalid `Type`\n* Improve documentation and tutorial\n\n1.0.2\n\n* Add support
  for Nix-style \"double single-quote\" multi-line string literals\n* Add `isNormalized`\n*
  Improve documentation and tutorial\n* Build against wider range of `http-client`
  versions\n\n1.0.1\n\n* Initial release\n\n1.0.0\n\n* Accidental premature upload
  to Hackage.  This release was blacklisted\n"
basic-deps:
  http-client: ! '>=0.4.30 && <0.6'
  insert-ordered-containers: ! '>=0.1.0.1 && <0.3'
  exceptions: ! '>=0.8.3 && <0.11'
  bytestring: <0.11
  ansi-wl-pprint: <0.7
  optparse-generic: ! '>=1.1.1 && <1.4'
  trifecta: ! '>=1.6 && <1.8'
  case-insensitive: <1.3
  haskeline: ! '>=0.7.3.0 && <0.8'
  base: ! '>=4.9.0.0 && <5'
  dhall: -any
  unordered-containers: ! '>=0.1.3.0 && <0.3'
  text: ! '>=0.11.1.0 && <1.3'
  filepath: ! '>=1.4 && <1.5'
  lens-family-core: ! '>=1.0.0 && <1.3'
  memory: ! '>=0.14 && <0.15'
  repline: ! '>=0.1.6.0 && <0.2'
  containers: ! '>=0.5.0.0 && <0.6'
  ansi-terminal: ! '>=0.6.3.1 && <0.9'
  parsers: ! '>=0.12.4 && <0.13'
  formatting: ! '>=6.3 && <6.4'
  http-client-tls: ! '>=0.2.0 && <0.4'
  contravariant: <1.5
  cryptonite: ! '>=0.23 && <1.0'
  mtl: ! '>=2.2.1 && <2.3'
  base16-bytestring: <0.2
  prettyprinter: ! '>=1.2.0.1 && <1.3'
  transformers: ! '>=0.2.0.0 && <0.6'
  scientific: ! '>=0.3.0.0 && <0.4'
  vector: ! '>=0.11.0.0 && <0.13'
  prettyprinter-ansi-terminal: ! '>=1.1.1 && <1.2'
  directory: ! '>=1.3 && <1.4'
all-versions:
- '1.0.1'
- '1.0.2'
- '1.1.0'
- '1.2.0'
- '1.3.0'
- '1.4.2'
- '1.5.0'
- '1.5.1'
- '1.6.0'
- '1.7.0'
- '1.8.0'
- '1.8.1'
- '1.8.2'
- '1.9.0'
- '1.9.1'
- '1.10.0'
- '1.11.0'
- '1.11.1'
- '1.12.0'
author: Gabriel Gonzalez
latest: '1.12.0'
description-type: haddock
description: ! 'Dhall is an explicitly typed configuration language that is not Turing

  complete.  Despite being Turing incomplete, Dhall is a real programming

  language with a type-checker and evaluator.


  Use this library to parse, type-check, evaluate, and pretty-print the Dhall

  configuration language.  This package also includes an executable which

  type-checks a Dhall file and reduces the file to a fully evaluated normal

  form.


  Read "Dhall.Tutorial" to learn how to use this library'
license-name: BSD3
