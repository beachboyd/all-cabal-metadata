homepage: ''
changelog-type: markdown
hash: 0fa0212ffe3097de43f7a68455304799e7dc485bc07948b70647ab24aef87896
test-bench-deps:
  serialise: -any
  bytestring: -any
  base: ==4.*
  dhall: -any
  text: ! '>=0.11.1.0 && <1.3'
  filepath: <1.5
  criterion: ! '>=1.1 && <1.6'
  doctest: ! '>=0.7.0 && <0.17'
  containers: ! '>=0.5.0.0 && <0.7'
  mockery: <0.4
  quickcheck-instances: ! '>=0.3.12 && <0.4'
  tasty-quickcheck: ! '>=0.9.2 && <0.11'
  tasty-hunit: ! '>=0.9.2 && <0.11'
  prettyprinter: -any
  transformers: -any
  tasty: ! '>=0.11.2 && <1.3'
  deepseq: ! '>=1.2.0.1 && <1.5'
  QuickCheck: ! '>=2.10 && <2.13'
  vector: ! '>=0.11.0.0 && <0.13'
  directory: -any
maintainer: Gabriel439@gmail.com
synopsis: A configuration language guaranteed to terminate
changelog: ! "1.20.0\n\n* Supports version 5.0.0 of the language standard\n    * See:
  https://github.com/dhall-lang/dhall-lang/releases/tag/v5.0.0\n* BREAKING CHANGE
  TO THE LANGUAGE: Implement standardized support for multi-line\n  literals\n    *
  This updates the multi-line support to match the standard\n    * This is a breaking
  change because empty lines within the multi-line\n      literal now require leading
  whitespace whereas previously they did not\n    * This is also a breaking change
  because now a newline is required after\n      the opening `''` quotes whereas previously
  it was not required\n    * If you use `dhall format` then your multi-line literals
  already have the\n      necessary leading whitespace\n* BREAKING CHANGE TO THE LANGUAGE:
  `constructors x = x`\n    * Now the `constructors` keyword behaves like an identity
  function, since\n      constructors can already be accessed as fields off the original
  union\n      type.\n    * This is a breaking change since any record of terms that
  contains a\n      `constructors` field will now be a forbidden mixed record of types
  and\n      terms.\n    * This is also a breaking change if you annotated the type
  of what used to\n      be a `constructors` record.\n    * `dhall lint` will now
  remove the obsolete `constructors` keyword for you\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/693\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/701\n* BREAKING CHANGE
  TO THE API: Restore `Parent` constructor for `Local` type\n    * This more closely
  matches the standard and also enables `dhall format` to\n      produce a leading
  `../` for imports instead of `./../`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/718\n*
  BUG FIX: Fix type-checking bug for unions\n    * The first fix was that the inferred
  type was wrong for unions where\n      alternatives were types or kinds\n    * The
  second fix was that unions that mixed terms/types/kinds were not\n      properly
  rejected\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/763\n* BUG
  FIX: Change how `dhall repl` handles prior definitions\n    * This changes the REPL
  to handle previous bindings as if they were\n      defined using a large `let` expression
  instead of adding them to the\n      context\n    * This fixes some type-checking
  false negatives\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/729\n*
  Feature: Autocomplete for `dhall repl`\n    * You can now auto-complete record fields,
  union constructors, and\n      identifiers that are in scope\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/727\n*
  Feature: GHCJS support\n    * `dhall` can now be built using GHCJS, although some
  features are still\n      not supported for GHCJS, such as:\n        * Semantic
  integrity checks\n        * Custom HTTP headers\n    * Also, HTTP imports only work
  for URLs that support CORS\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/739\n*
  Feature: Add support for records of records of types\n    * You can now nest records
  of types\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/700\n* Feature:
  Add `:quit` command for `dhall repl`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/719\n*
  Feature: Add `--json` flag for `dhall {encode,decode}`\n    * You can now produce/consume
  CBOR expressions via JSON instead of binary\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/717\n*
  Feature: Add decoding logic for `as Text`\n    * You can now preserve the `as Text`
  qualifier on imports when serializing\n      them\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/712\n*
  Prenormalize substituted expressions\n    * This is a performance improvement that
  reduces the time and memory\n      consumption when normalizing expressions\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/765\n\n1.19.1\n\n\n* BUG FIX:
  Fix serious `dhall lint` bug\n    * `dhall lint` would sometimes remove `let` expressions
  that were still\n      in use\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/703\n*
  BUG FIX: Fix import caching efficiency bug\n    * Some imports were being wastefully
  fetched multiple times\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/702\n*
  Feature: Generate dot graph to visualize import graph\n    * Use the `dhall resolve
  --dot` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/698\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/713\n* Improve HTTP
  error messages\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/710\n\n1.19.0\n\n*
  Supports version 4.0.0 of the language standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v4.0.0\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: Prevent Hurkens' paradox\n    * This fixes
  a type-checking soundness bug which permitted infinite loops\n    * This is a breaking
  change because infinite loops are no longer possible\n    * This is also a breaking
  change because a record of types is now treated as\n      a kind instead of a type\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/680\n* BREAKING CHANGE
  TO THE LANGUAGE AND API: `Double`s are now double-precision\n  floating point numbers\n
  \   * This restricts the range of `Double`s to IEEE 754 double-precision\n      floating
  point\n    * This also implies that you can no longer convert `Scientific` values
  to\n      `Dhall` expressions (i.e. no `Inject` instance for `Scientific`)\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/667\n* BREAKING CHANGE TO
  THE API: Preserve field order for record projection\n    * The API uses a new `Dhall.Set.Set`
  type instead of `Data.Set.Set`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/670\n*
  BREAKING CHANGE TO THE API: Add support for multi-`let` expressions\n    * This
  changes the `Let` constructor to now support storing multiple\n      bindings per
  `let` expression\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/675\n*
  Access constructors as if they were fields of the union type\n    * In other words:
  `< Left : Bool | Right : Natural >.Left`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/657\n*
  Support GHC 8.6\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/669\n*
  Add support for quoted path components\n    * i.e. `/\"foo\"/bar/\"baz qux\"` or
  `https://example.com/foo/\"bar?baz\"?qux`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/690\n*
  Fix parsing of `//\\\\` operator\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/9d0fd42d95ab69fa64da4afd8b60d69aca8e65a6\n*
  Preserve Unicode characters when formatting code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/679\n*
  Allow identifier names to begin with `Some`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/658\n*
  Add `subExpressions` `Traversal`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/660\n*
  Add `normalizeWithM` for monadic normalization\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/371\n*
  Custom normalizers now take precedence over default normalization logic\n    * This
  allows one to override the implementation of built-in operators\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/684\n\n1.18.0\n\n*
  Supports version 3.0.0 of the language standard:\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v3.0.0\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: New `Some`/`None` constructors for\n  `Optional`
  values\n    * Example: `[ Some 1, None Natural ]`\n    * This is a breaking change
  to the language because `Some` and `None` are\n      now reserved keywords\n    *
  This is a breaking change to the API because `Some` and `None` are new\n      constructors
  for the `Expr` type\n* BREAKING CHANGE TO THE LANGUAGE AND API: Support for kind
  polymorphism\n    * This adds a new `Sort` constant above `Kind` in the hierarchy\n
  \   * i.e. `Type : Kind : Sort`\n    * This is a breaking change to the language
  because `Sort` is now a\n      reserved keyword\n    * This is a breaking change
  to the API because `Sort` is a new\n      constructor for the `Expr` type\n* BREAKING
  CHANGE TO THE API: New `Dhall.Map` module\n    * This replaces `InsOrdHashMap` in
  the API\n    * The primary motivation is to improve performance and to remove the\n
  \     dependency on `insert-ordered-containers`\n* BREAKING CHANGE TO THE API: Use
  standard version instead of protocol version\n    * The binary protocol is now versioned
  alongside the standard\n    * The `ProtocolVersion` type is renamed to `StandardVersion`
  and the\n    * `--protocol-version` option is renamed to `--standard-version`\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/634\n* BUG FIX: Fix
  import chaining for custom header imports\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/618\n*
  BUG FIX: Fix import chaining for imports protected by semantic integrity\n  checks\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/584\n* BUG FIX: Record
  literals and types produced by `∧`/`⫽`/`⩓` are now sorted\n    * This ensures that
  β-normalization is idempotent\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/572\n*
  BUG FIX: `dhall freeze` now correctly handles the starting file being\n  located
  outside the current working directory\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/a22aa79d1957be9ecf166ea066e2a9a5b309e1ae\n*
  BUG FIX: Fix parsing of IPv4-mapped IPv6 addresses\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/632\n*
  FEATURE: New `--ascii` flag for ASCII output\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/570\n*
  FEATURE: New `dhall encode` and `dhall decode` subcommands\n    * These allow you
  to transform Dhall source code to and from its binary\n      representation\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/588\n* LARGE parsing performance
  improvements\n    * Parsing is about 10x-100x faster on most code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/591\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/592\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/597\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/601\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/602\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/604\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/606\n*
  Type-checking performance improvements:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/566\n*
  Normalization performance improvements:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/610\n*
  `dhall freeze` now caches the imports as it freezes them\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/587\n*
  `dhall freeze` now refreezes imports with invalid semantic integrity checks\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/637\n* `dhall freeze` now
  adds a trailing newline\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/629\n*
  Build against `megaparsec-7.0.*`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/565\n*
  Support GHC 8.6\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/599\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/623\n* Support GHC all
  the way back to 7.10.3\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/595\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/621\n* Improvements
  to error messages:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/563\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/576\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/583\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/589\n\n\n1.17.0\n\n*
  This release corresponds to version 2.0.0 of the language standard\n* BREAKING CHANGE
  TO THE LANGUAGE AND API: Binary serialization support\n    * This is a breaking
  change to the hash for all semantic integrity checks\n    * The hash used by the
  semantic integrity check is now based on the\n      binary representation instead
  of a text representation of the\n      expression\n    * You can pin the new hashes
  by supplying the `--protocol-version 1.0`\n      option on the command line until
  you need support for newer language\n      features \n    * This also includes a
  breaking change to `ImportType` in the API\n* BREAKING CHANGE TO THE LANGUAGE: Disallow
  combining records of terms and\n  types\n    * This is mainly for consistency and
  to improve type errors that would\n      have otherwise happened further downstream\n
  \   * This should not affect the vast majority of code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/538\n*
  BUG FIX: Semantic integrity checks now work for imported expression using\n  the
  `constructors` keyword\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/554\n*
  BUG FIX: Fix α-normalization of expressions with bound variables named `_`\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/524\n* BUG FIX: Fix `isNormalized`
  to match `normalize`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/522\n*
  BUG FIX: `dhall lint` now correctly handles nested `let` expressions\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/555\n* FEATURE: Imports protected
  by a semantic integrity check are now cached\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/533\n*
  The default `dhall` command no longer outputs the type to `stderr`\n    * You can
  add back the type as a type annotation using the\n      `--annotate` switch\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/544\n* New utilities for building
  `InputTypes`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/530\n*
  Improve parsing performance for long variable names\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/526\n*
  More succinct type diffs for function types\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/540\n*
  Identifier names can now begin with keywords\n    * i.e. `ifChanged` and `lettuce`
  are now legal identifiers\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/551\n\n1.16.1\n\n*
  Fix test failure due to missing test data file\n\n1.16.0\n\n* BREAKING CHANGE: Consolidate
  `input` family of functions\n    * These now take a record of options\n    * This
  also `_stack` field of the `Status` type from `[Import]` to\n      `NonEmpty Import`\n*
  Permit `$` in quoted variable names\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/510\n\n1.15.1\n\n*
  Fix infinite loop when formatting expressions containing `?`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/491\n\n1.15.0\n\n*
  BREAKING CHANGE TO THE API: Support alternative imports using new `?` operator\n
  \   * This adds a new constructor which affects exhaustive pattern matches\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/473\n* BREAKING CHANGE TO
  THE API: Add `Integer/toDouble` built-in function\n    * This adds a new constructor
  which affects exhaustive pattern matches\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/434\n*
  BREAKING CHANGE TO THE API: Use strict `Text` instead of lazy `Text`\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/455\n* BREAKING CHANGE TO THE API:
  Remove `Buildable` in favor of `Pretty`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/459\n*
  BREAKING CHANGE TO THE API: Removed the `Parent` constructor from `FilePrefix`\n
  \   * Instead, use `Here` with a `\"..\"` prefix.\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/407\n*
  BUG FIX: Disallow duplicate fields in records\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/430\n*
  BUG FIX: Fix stripping of leading whitespace in multi-line strings\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/469\n*
  BUG FIX: Fix formatting field access of an import\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/471\n*
  Add `dhall freeze` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/486\n*
  Add `dhall diff` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/442\n*
  Add `dhall lint` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/484\n*
  Change `dhall-repl`/`dhall-hash`/`dhall-format` to `dhall` subcommands\n    * i.e.
  `dhall repl`/`dhall hash`/`dhall format`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/435\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/452\n* Add `with-http`
  cabal flag to disable support for remote imports\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/482\n*
  Added `inputFrom` and `inputFromWith`\n    * These allow naming the file that the
  expression is coming from for better\n      error messages\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/464\n*
  Performance improvements\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/420\n*
  Tutorial recommends GitHub for Prelude instead of IPFS\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/479\n*
  Pretty-print expressions in type errors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/429\n*
  Formatting improvements\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/398\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/458\n* Diff improvements\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/455\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/470\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/478\n\n1.14.0\n\n* BREAKING
  CHANGE TO THE LANGUAGE: Switch grammar of `Natural` and `Integer`\n    * `Natural`
  number literals are now unsigned and `Integer` literals always\n      require a
  sign\n    * This is a **VERY** disruptive change to most Dhall code in the wild
  but\n      was unanimously agreed upon here:\n      https://github.com/dhall-lang/dhall-lang/issues/138\n
  \   * See also: https://github.com/dhall-lang/dhall-haskell/pull/381\n* BREAKING
  CHANGE TO THE LANGUAGE: Drop support for importing directories\n    * Importing
  `dir/` used to resolve to `dir/@`, which is no longer supported\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/384\n*
  BREAKING CHANGE TO THE LANGUAGE: Change to the grammar for imports\n    * File path
  components can no longer contain `#` or `?` characters\n    * URL imports must now
  contain at least one path component\n    * URL path components must match the grammar
  for file path components\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/390\n*
  BREAKING CHANGE TO THE API: Rename `Path{,Mode,Hashed,Type}` to\n  `Import{,Mode,Hashed,Type}`\n
  \   * In practice this change is not breaking for the most common use cases\n      since
  this also provides a `Path` type synonym for backwards compatibility\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/376\n* BUG FIX: Fix α-equivalence
  bug when type-checking `merge`\n    * `merge` expressions would sometimes reject
  valid code due to a\n       type-checking bug\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/394\n*
  Improve import caching\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/388\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/392\n* Increase upper
  bound on `tasty`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/382\n*
  Fix lower bound on `insert-ordered-containers`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/377\n\n1.13.1\n\n*
  Increase upper bound on `ansi-terminal` and `megaparsec`\n\n1.13.0\n\n* BUG FIX:
  Fix semantic integrity hashing support\n    * Both parsing and pretty-printing semantic
  hashes were broken since version\n      1.11.0\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/345\n*
  BUG FIX: Allow leading whitespace in interpolated expresssions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/369\n*
  BUG FIX: Fix `deriving (Interpret)` for sum types\n    * The types of alternatives
  were not correctly included in the corresponding\n      Dhall type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/348\n*
  BREAKING CHANGE TO LANGUAGE: Records cannot store both types and terms\n    * Records
  can also not store type-level functions (like `List`)\n        * Records might be
  allowed to store type-level functions again in the\n          future\n    * This
  fixes a potential soundness bug\n    * The primarily practical consequence of this
  change is that if you are\n      hosting a \"package\" then you will need to split
  terms and types from your\n      package into different records for your users to
  import\n    * This also implies removing the `./Monoid` type-level function from
  the\n      `./Prelude/package.dhall` record\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/335\n*
  BREAKING CHANGE TO THE API: Replace `trifecta` with `megaparsec`\n    * This change
  the API to use the `Parser` type from `megaparsec`\n    * This also slightly changes
  the type of `exprFromText`\n    * If you program using the type classes provided
  by the `parsers` library\n      then this is not a breaking change as that interface
  is preserved\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/268\n*
  BREAKING CHANGE TO THE API: New `⩓` operator for merging record types\n    * Example:
  `{ foo : Text } ⩓ { bar : Bool } = { foo : Text, bar : Bool }`\n    * This is breaking
  because it adds a new constructor to the `Expr` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/342\n*
  BREAKING CHANGE TO THE API: New support for projecting a subset of fields\n    *
  Example: `{ x = 1, y = 2, z = 3 }.{ x, y } = { x = 1, y = 2 }`\n    * This is breaking
  because it adds a new constructor to the `Expr` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/350\n*
  API+UX feature: New support for pretty-printing diffs of Dhall expressions\n    *
  Error messages also use this feature to simplify large type mismatches\n    * There
  is also a new `Dhall.Diff` module\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/336\n*
  Add `version`, `resolve`, `type`, and `normalize` sub-commands to interpreter\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/352\n* Support GHC 7.10.3\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/340\n* `:type` command
  in `dhall-repl` now only displays the type\n    * Before it would also display the
  original expression\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/344\n*
  Trim dependency tree\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/351\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/268\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/355\n\n1.12.0\n\n*
  Additional changes to support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/331\n*
  BREAKING CHANGE TO API: Replace dependency on `text-format` with `formatting`\n
  \   * This replace the `Data.Text.Buildable.Buildable` instances with\n      `Formatting.Buildable.Buildable`
  instances, which is why this is a\n       breaking change\n    * `text-format` is
  no longer maintained and blocking GHC 8.4 support\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/330\n\n1.11.1\n\n*
  Support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/321\n*
  Fix α-normalization bug\n    * Note that this is not a type-checking bug.  This
  only affects users who\n      were directly using the `alphaNormalize` function
  from the Haskell API\n      because `let` expressions were not correctly α-normalized\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/319\n* Slight tweak
  to syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/324\n*
  Increase upper bound on `ansi-terminal` and `exceptions`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/322\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/325\n\n1.11.0\n\n* BREAKING
  CHANGE TO THE API: Fix `{Natural,Optional,List}/build` semantics to\n  match standard\n
  \   * This is a breaking change because the `OptionalLit` and `ListLit`\n      constructors
  changed their representations to efficiently support the\n      standard semantics\n
  \   * `ListLit` now stores a `Data.Sequence.Seq` instead of a\n      `Data.Vector.Vector`\n
  \   * `OptionalLit` now stores a `Maybe` instead of a `Data.Vector.Vector`\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/300\n* BREAKING CHANGE TO
  THE COMMAND LINE: `dhall` executable always formats output\n    * Previously you
  had to opt into formatting using `--pretty`\n    * Now formatting is obligatory
  and the `--pretty` flag is gone\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/303\n*
  Feature: New `:save` command for `dhall-repl`\n    * Now you can save an expression
  to a file: `./yourFile = someExpression`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/309\n*
  Improvement: Add new simplifications to match standard\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/312\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/316\n* Improvement:
  Fix equivalence check to match standard\n    * Practically this means that more
  corner cases of the language correctly\n      type-check than before\n* Improvement:
  New `--plain` flag to disable syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/310\n*
  Improvement: Prelude now provides an umbrella `package.dhall` import\n    * This
  is primarily for convenience\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/298\n*
  Improvement: Context is now normalized\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/302\n*
  Replace `cryptohash` dependency with `cryptonite`\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5d2012927a062ec8bdf2bbaba77150344f38db77\n*
  Increase upper bound on exceptions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/306\n*
  Fix type error in tutorial\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5a9126b2f684d3236fc1e8e20e206cfaf47d97db\n\n1.10.0\n\n*
  Feature: Records/unions can now have fields/alternatives that are types\n    * i.e.
  `{ foo = Text, bar = List }` is legal now\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/273\n*
  Feature: New `dhall-repl` for interactively evaluating Dhall expressions\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/266\n* Feature: Syntax highlighting\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/260\n* Feature: BREAKING
  CHANGE TO THE API: `dhall-format` preserves field order\n    * This changes the
  syntax tree to use an `InsOrdHashMap` instead of a `Map`\n* BREAKING CHANGE TO THE
  API: Use Haskell's `Scientific` type\n    * This is fixes the interpreter to correct
  handle really large/small numbers\n    * This also allows marshaling into Haskell's
  `Scientific` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/256\n*
  BREAKING CHANGE TO THE API: Remove `system-filepath`/`system-fileio` dependencies\n
  \   * Now the library uses `Prelude.FilePath`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/248\n*
  Feature: Labels can now begin with reserved names\n    * i.e. `List/map` is now
  a legal label\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/255\n*
  Fix: Rendered labels are now correctly escaped if they are numbers\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/252\n*
  Add the instance `Interpret String`.\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/247\n*
  Fix: Custom contexts passed to `typeWith` are now checked\n    * This prevents a
  custom context from triggering an infinite loop\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/259\n\n1.9.1\n\n*
  `dhall-format` now emits single-quoted strings for multi-line strings\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/237\n* Improved error messages
  for list elements with the wrong type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/236\n*
  Change `lens` dependency to `lens-family-core`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/238\n\n1.9.0\n\n*
  Feature: BREAKING CHANGE TO LANGUAGE AND API: Add `constructors` keyword\n    *
  This new keyword generates constructors from a union type\n        * See the updated
  Haskell tutorial for more details\n    * This means that `constructors` is now a
  reserved keyword\n    * This adds a new `Constructors` constructor to the `Expr`
  type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/199\n* Feature:
  BREAKING CHANGE TO THE API: `dhall-format` preserves interpolation\n    * This changes
  the `TextLit` constructor to represent an interpolated `Text`\n      literal\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/220\n* Feature: You can now
  define type synonyms using `let`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/202\n*
  Feature: Extend valid set of quoted labels\n    * See: https://github.com/dhall-lang/dhall-lang/pull/65\n
  \   * See: https://github.com/dhall-lang/dhall-lang/pull/77\n* Performance: Improve
  startup time when importing files, but not URLs\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/194\n*
  Security: `localhost`/`127.0.0.1` imports no longer count as local imports\n    *
  Specifically: they cannot import environment variables or files\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/197\n*
  Security: Fix potential type-checking bug\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/198\n*
  Fix: BREAKING CHANGE TO API: Improve localization of error messages\n    * This
  required fixing the type of `normalize`/`shift`/`subst` to preserve\n      the first
  type parameter of `Expr` (i.e. they no longer delete `Note`\n      constructors)\n
  \   * A new `denote` function was added for the explicit purpose of deleting\n      `Note`
  constructors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/218\n*
  Expose `MissingEnvironmentVariable` exception type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/196\n*
  Add `genericAuto`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/195\n*
  Add `inputWith`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/222\n*
  Add`loadWithContext`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/215\n*
  Add `pair`/`unit`/`string`/`list`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/227\n\n1.8.2\n\n*
  Add `typeWithA` for type-checking custom `Embed`ded values\n* Fix `dhall{,-*}` executables
  to ignore ambient locale and use UTF8\n* Increase upper bound on `tasty` dependency\n\n1.8.1\n\n*
  `dhall` executable can now format output using `--pretty`\n* Improved Unicode suppport
  on Windows\n\n1.8.0\n\n* BREAKING CHANGE TO LANGUAGE: Add support for import integrity
  checks\n    * In practice, the likelihood of this breaking code in the wild is\n
  \     astronomically low\n    * This would only break code of the form `sha256:aaa...aaa`
  (i.e. a\n      variabled named `sha256` with a type annotation for a type with a
  name\n      64 characters long drawn from the first 6 characters of the alphabet)\n*
  BUG FIX: Fix parsing of single quotes in single-quoted strings\n* BUG FIX: Fix superfluous
  parentheses introduced by `dhall-format`\n* New `dhall-hash` executable\n    * This
  goes hand-in-hand with the added support for integrity checks since\n      the executable
  lets you compute the current hash of an import\n\n1.7.0\n\n* BREAKING CHANGE TO
  LANGUAGE: Update parser to match standardized grammar\n    * Trailing commas and
  bars no longer supported for union and record literals\n    * Paths no longer permit
  commas\n    * URL grammar is now RFC-compliant\n    * Environment variables can
  now be quoted to support full range of\n      POSIX-compliant names\n    * Text
  literals support full set of JSON escape sequences (such as `\\u2192`)\n* BREAKING
  CHANGE TO LANGUAGE: Single quoted strings strip leading newlines\n* BUG FIX: Fixed
  type-checking infinite loops due to non-type-checked variables\n  in context\n*
  BUG FIX: Fixed type-checking bug due to missing context when type-checking\n  certain
  expressions\n* BUG FIX: Fixed type-checking bug due to off-by-one errors in name
  shadowing\n  logic\n* New `dhall-format` executable to automatically format code\n*
  Performance optimizations to `Natural/fold` and `List/fold`\n* Improved parsing
  performance (over 3x faster)\n* Union literals can now specify the set value anywhere
  in the literal\n    * i.e. `< A : Integer | B = False | C : Text >`\n* New `Inject`
  instance for `()`\n* Several tutorial fixes and improvements\n\n1.6.0\n\n* BREAKING
  CHANGE TO THE API: Drop support for GHC 7.*\n* BREAKING CHANGE TO THE API: Add support
  for customizing Dhall import\n    * This is a breaking change because this changes
  the type of `loadWith`\n* BREAKING CHANGE TO THE API: Add field to `UnboundVariable`
  error containing\n* BUG FIX: Fix parsing single quotes in string literals\n  the
  name of the unbound variable\n* Add `List/concatMap` to the Prelude\n* You can now
  derive `Inject` and `Interpret` for types with unlabeled fields\n* Add new instances
  for `Interpret`:\n    * `[]`\n    * `(,)`\n* Add new instance for `Inject`\n    *
  `[]`, `Data.Set.Set`, `Data.Sequence.Seq`\n    * `(,)`\n    * `Int`, `Word8`, `Word16`,
  `Word32`, `Word64`\n* Add `Eq` instance for `Src`\n\n1.5.1\n\n* Increase upper bound
  on `vector` and `optparse-generic`\n\n1.5.0\n\n* BREAKING CHANGE: Add list concatenation
  operator: `(#)`\n    * This is a breaking change because it adds a new constructor
  to the `Expr`\n      type which breaks exhaustive pattern matches\n* BREAKING CHANGE:
  Add `Interpret` support for lazy `Text`\n    * This is a breaking change because
  it renames `text` to `strictText`\n* Add `Interpret` instance for decoding (a limited
  subset of) Dhall functions\n* Dhall no longer requires Template Haskell to compile\n
  \   * This helps with cross-compilation\n* Add `rawInput` utility for decoding a
  Haskell value from the `Expr` type\n* Add `loadWith`/`normalizeWith` utilities for
  normalizing/importing modules\n  with a custom context\n* Export `Type` constructor\n\n1.4.2\n\n*
  Fix missing `Prelude` files in package archive uploaded to Hackage\n\n1.4.1\n\n*
  Fix missing `tests/Tutorial.hs` module in package archive uploaded to Hackage\n\n1.4.0\n\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: You can now supply custom headers for\n
  \ URL imports with the new `using` keyword\n    * This is a breaking change to the
  language because this adds a new reserved\n      `using` keyword\n    * This is
  a breaking change to the API because this adds a new field to the\n      `URL` constructor
  to store optional custom headers\n* BUG FIX: `:` is no longer a disallowed path
  character\n    * This was breaking URL imports with a port\n* BUG FIX: If you import
  a home-anchored path (i.e. `~/foo`) and that imports a\n  relative path (like `./bar`),
  then the canonical path of the relative import\n  should be home-anchored (i.e.
  `~/bar`).  However, there was a bug that made\n  lose the home anchor (i.e. `./foo/bar`),
  which this release fixes\n  likely fail due to no longer being home-anchored (i.e.
  `./foob\n* Add support for string interpolation\n* `merge` no longer requires a
  type annotation if you are merging at least one\n  alternative\n* Expanded Prelude\n
  \   * `./Prelude/Optional/all`\n    * `./Prelude/Optional/any`\n    * `./Prelude/Optional/filter`\n
  \   * `./Prelude/Optional/length`\n    * `./Prelude/Optional/null`\n    * `./Prelude/Text/concatMap`\n
  \   * `./Prelude/Text/concatMapSep`\n    * `./Prelude/Text/concatSep`\n* Rearrange
  detailed error messages to put summary information at the bottom of\n  the message\n\n1.3.0\n\n*
  BREAKING CHANGE TO THE API: Add support for new primitives, specifically:\n    *
  `(//)` - Right-biased and shallow record merge\n    * `Optional/build` (now a built-in
  in order to support build/fold fusion)\n    * `Natural/show`\n    * `Integer/show`\n
  \   * `Double/show`\n    * `Natural/toInteger`\n    * These all add new constructors
  to the `Expr` type, which would break\n      exhaustive pattern matches\n* BREAKING
  CHANGE TO THE LANGUAGE: Imported paths and URLs no longer support\n  the characters:
  \"()[]{}<>:\"\n    * This reduces the number of cases where you have to add a space
  after\n      imports\n    * Note that this does not exclude the `:` in the URL scheme
  (i.e. `http://`)\n* Increase connection timeout for imports\n* Variable names now
  allow the `-` character for all but the first character\n* You can now escape identifiers
  with backticks\n    * This lets you name identifiers so that they don't conflict
  with reserved\n      key words\n    * This is most useful when converting Dhall
  to other file formats (like\n      JSON) where you might need to emit a field that
  conflicts with one of\n      Dhall's reserved keywords\n* New `--version` flag for
  the `dhall` executable\n\n1.2.0\n\n* BREAKING CHANGE: Add support for customizing
  derived `Interpret` instances\n    * This is a breaking change to the Dhall library
  API since this changes the\n      signature of the `Interpret` class by replacing
  the `auto` method with a\n      more general `autoWith` method.  This `autoWith`
  now takes an\n      `InterpretOptions` argument that lets you customize derived
  field and\n      constuctor names\n    * In practice user programs that use the
  common path will be unaffected by\n      this change\n    * This is not a breaking
  change to the Dhall language\n* BREAKING CHANGE: Type annotations now bind more
  tightly than lambda\n  abstraction\n    * This is a breaking change to the Dhall
  language.  An expression like this:\n\n      ```\n      λ(x : A) → y : B\n      ```\n\n
  \     ... used to parenthesized implicitly as:\n\n      ```\n      (λ(x : A) → y)
  : T\n      ```\n\n      ... but is now parenthesized implicitly as:\n\n      ```\n
  \     λ(x : A) → (y : T)\n      ```\n\n      This is now consistent with Haskell's
  precedence and also consistent with\n      the precedence of `List` and `Optional`
  type annotations\n\n    * This change affects programs with an expression like this:\n\n
  \     ```\n      -- Assuming that `y : B`\n      λ(x : A) → y : A → B\n      ```\n\n
  \     The above program would type-check before this change but not type-check\n
  \     after this change.  You would you need to fix the above program by either\n
  \     changing the type signature to annotate just the type of `y` like this:\n\n
  \     ```\n      λ(x : A) → y : B\n      ```\n\n      ... or by adding explicit
  parentheses like this:\n\n      ```\n      (λ(x : A) → y) : A → B\n      ```\n\n
  \   * This is not a breaking change to the Dhall library API\n* BREAKING CHANGE:
  Add support for importing a path's contents as raw `Text` by\n  adding `as Text`
  after the import\n    * This is a breaking change to the Dhall language\n    * This
  is technically a breaking change, but is extremely unlikely to affect\n      you
  program.  This only changes the behavior of old programs that had an\n      expression
  of the form:\n\n      ```\n      /some/imported/function as Text\n      ```\n\n
  \     ... where `/some/imported/function` is an imported function being applied\n
  \     to two arguments, the first of which is a bound variable named `as` and\n
  \     the second of which is the type `Text`\n    * This is not a breaking change
  to the Dhall library API\n* BREAKING CHANGE: Add support for importing environment
  variables using\n  `env:VAR` syntax\n    * This is a breaking change to the Dhall
  library API since it adds a new\n      `Path` constructor\n    * This also technically
  a breaking change to the Dhall language but\n      extremely unlikely to affect
  your program.  This only changes the behavior\n      of old programs that had an
  expression of the form:\n\n      ```\n      env:VAR\n      ```\n\n      ... where
  `env` was the name of a bound variable and `:VAR` was a type\n      annotation without
  spaces around the type annotation operator\n\n      After this change the program
  would be interpreted as an import of the\n      contents for the environment variable
  named `VAR`\n* BREAKING CHANGE: Support importing paths relative to home directory
  using\n  `~/some/path` syntax\n    * This is a breaking change to the Dhall library
  API since it adds a new\n      field to the `File` constructor indicating whether
  or not the imported\n      path is relative to the home directory\n    * This is
  not a breaking change to the Dhall language and the new syntax\n      does not override
  any old syntax\n* Permit trailing commas and bars in record/union syntax\n* Improve
  location information for parsing errors\n\n1.1.0\n\n* BREAKING CHANGE: Non-empty
  lists no longer require a type annotation\n    * This is a breaking change to the
  Haskell library, not the Dhall language\n    * This change does not break existing
  Dhall programs\n    * The `Expr` type was modified in a non-backwards-compatible
  way\n* Add new `exprA` parser\n* Add new `InvalidType` exception if `input` fails
  on an invalid `Type`\n* Improve documentation and tutorial\n\n1.0.2\n\n* Add support
  for Nix-style \"double single-quote\" multi-line string literals\n* Add `isNormalized`\n*
  Improve documentation and tutorial\n* Build against wider range of `http-client`
  versions\n\n1.0.1\n\n* Initial release\n\n1.0.0\n\n* Accidental premature upload
  to Hackage.  This release was blacklisted\n"
basic-deps:
  http-client: ! '>=0.4.30 && <0.6'
  exceptions: ! '>=0.8.3 && <0.11'
  serialise: ! '>=0.2.0.0 && <0.3'
  bytestring: <0.11
  case-insensitive: <1.3
  haskeline: ! '>=0.7.2.1 && <0.8'
  base: ! '>=4.8.2.0 && <5'
  dhall: -any
  Diff: ! '>=0.2 && <0.4'
  aeson-pretty: <0.9
  unordered-containers: ! '>=0.1.3.0 && <0.3'
  text: ! '>=0.11.1.0 && <1.3'
  megaparsec: ! '>=7.0.0 && <7.1'
  dotgen: ! '>=0.4.2 && <0.5'
  cborg: ! '>=0.2.0.0 && <0.3'
  filepath: ! '>=1.4 && <1.5'
  cborg-json: <0.3
  lens-family-core: ! '>=1.0.0 && <1.3'
  memory: ! '>=0.14 && <0.15'
  repline: ! '>=0.2.0.0 && <0.3'
  containers: ! '>=0.5.0.0 && <0.7'
  ansi-terminal: ! '>=0.6.3.1 && <0.9'
  parsers: ! '>=0.12.4 && <0.13'
  http-client-tls: ! '>=0.2.0 && <0.4'
  contravariant: <1.6
  uri-encode: <1.6
  cryptonite: ! '>=0.23 && <1.0'
  mtl: ! '>=2.2.1 && <2.3'
  prettyprinter: ! '>=1.2.0.1 && <1.3'
  transformers: ! '>=0.2.0.0 && <0.6'
  optparse-applicative: ! '>=0.14.0.0 && <0.15'
  scientific: ! '>=0.3.0.0 && <0.4'
  http-types: ! '>=0.7.0 && <0.13'
  aeson: ! '>=1.0.0.0 && <1.5'
  template-haskell: <2.15
  vector: ! '>=0.11.0.0 && <0.13'
  prettyprinter-ansi-terminal: ! '>=1.1.1 && <1.2'
  directory: ! '>=1.2.2.0 && <1.4'
all-versions:
- 1.0.1
- 1.0.2
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.2
- 1.5.0
- 1.5.1
- 1.6.0
- 1.7.0
- 1.8.0
- 1.8.1
- 1.8.2
- 1.9.0
- 1.9.1
- 1.10.0
- 1.11.0
- 1.11.1
- 1.12.0
- 1.13.0
- 1.13.1
- 1.14.0
- 1.15.1
- 1.16.1
- 1.17.0
- 1.18.0
- 1.19.0
- 1.19.1
- 1.20.0
author: Gabriel Gonzalez
latest: 1.20.0
description-type: haddock
description: ! 'Dhall is an explicitly typed configuration language that is not Turing

  complete.  Despite being Turing incomplete, Dhall is a real programming

  language with a type-checker and evaluator.


  Use this library to parse, type-check, evaluate, and pretty-print the Dhall

  configuration language.  This package also includes an executable which

  type-checks a Dhall file and reduces the file to a fully evaluated normal

  form.


  Read "Dhall.Tutorial" to learn how to use this library'
license-name: BSD-3-Clause
