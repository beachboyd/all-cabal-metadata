homepage: https://github.com/ocharles/dhall-to-cabal
changelog-type: markdown
hash: c6a961547fd1140c07ca3f48fcb7263c2ac7e798bf112095306cfa8252483292
test-bench-deps:
  bytestring: ^>=0.10
  Cabal: ^>=2.0
  base: ^>=4.10
  tasty-golden: ^>=2.3
  Diff: ^>=0.3.4
  text: ^>=1.2
  dhall-to-cabal: -any
  filepath: ^>=1.4
  tasty: ^>=0.11
maintainer: ollie@ocharles.org.uk
synopsis: Compile Dhall expressions to Cabal files
changelog: ! '# dhall-to-cabal change log


  ## 1.0.0.1 -- 2018-03-25


  Small packaging only tweaks:


  * Missing README.md

  * Missing author


  The irony of this change is not lost on me.


  ## 1.0.0 -- 2018-03-25


  First release!

'
basic-deps:
  insert-ordered-containers: ! '>=0.2.1.0 && <0.3'
  bytestring: ^>=0.10
  trifecta: ^>=1.7
  Cabal: ==2.0.*
  base: ==4.10.*
  dhall: ! '>=1.12.0 && <1.13'
  text: ==1.2.*
  dhall-to-cabal: -any
  containers: ^>=0.5
  formatting: ^>=6.3.1
  contravariant: ^>=1.4
  hashable: ! '>=1.2.6.1 && <1.3'
  prettyprinter: ! '>=1.2.0.1 && <1.3'
  transformers: ^>=0.5.2
  optparse-applicative: ! '>=0.13.2 && <0.15'
  vector: ^>=0.12
all-versions:
- '1.0.0'
- '1.0.0.1'
author: Ollie Charles <ollie@ocharles.org.uk>
latest: '1.0.0.1'
description-type: markdown
description: ! "# `dhall-to-cabal` - generate Cabal files from Dhall expression\n\n`dhall-to-cabal`
  takes [Dhall](https://dhall-lang.org) expressions and compiles\nthem into [Cabal](https://www.haskell.org/cabal/)
  files. All of the features of\nDhall are supported, such as `let` bindings and imports,
  and all features of\nCabal are supported (including conditional stanzas).\n\n##
  Getting Started\n\nTo get started with `dhall-to-cabal`, first install the `dhall-to-cabal`\nexecutable.
  This can be done using cabal:\n\n```sh\ncabal install dhall-to-cabal\n```\n\n(You
  may need to run `cabal update` first).\n\nNext, write the Dhall expression that
  you would like to compile to a Cabal file.\nFor some example Dhall files, see\n\n*
  [`dhall-to-cabal.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/dhall-to-cabal.dhall)
  -\n  the Dhall expression building the Cabal file of this very project. \n* [`lens.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/golden-tests/lens.dhall)
  - \n  a subset of the `lens` library's Cabal file, translated to Dhall.\n* [`str-sig.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/golden-tests/str-sig.dhall)
  -\n  an example of using Backpack.\n\nTo see the full schema supported by `dhall-to-cabal`,
  you can run\n`dhall-to-cabal --print-type`. (In the future, we will have more human-ready\ndocumentation
  - we'd love your help here!)\n\nOnce you have your Dhall file ready, run it through
  `dhall-to-cabal` and\nredirect the output to a Cabal file:\n\n``` shell\ndhall-to-cabal
  input.dhall > output.cabal\n```\n\n(Replace the names `input.dhall` and `output.dhall`).\n\nThat's
  it!\n\n### cabal-to-dhall\n\nGood news! `dhall-to-cabal` is currently running a
  two-for-one deal! By\ninstalling `dhall-to-cabal` we'll throw in the `cabal-to-dhall`
  executable\n*absolutely free*! `cabal-to-dhall` does the reverse of `dhall-to-cabal`
  -\ntaking `.cabal` files and trasforming them into appropriate Dhall expressions.\nThis
  can be a great way to get started with `dhall-to-cabal`.\n\n## The Details\n\nAs
  the name suggests, `dhall-to-cabal` takes\n[Dhall](https://dhall-lang.org) expressions
  and compiles them into\n[Cabal](https://www.haskell.org/cabal/) files. There are
  two moving pieces here,\nso let's break it down.\n\n## Dhall?\n\nDhall is a relatively
  new language [started by Gabriel\nGonzales](http://www.haskellforall.com/2016/12/dhall-non-turing-complete-configuration.html)\nin
  late 2016. The language bills itself as \"a configuration language guaranteed\nto
  terminate\". In terms of features, we have a language with:\n\n* Let bindings and
  lambdas for abstraction\n* Built-in support for primitive types - naturals, doubles,
  integers, text, booleans\n* Composite types - optional values (like `Maybe` in Haskell),
  lists and records\n* An import mechanism to import expressions from foreign sources
  (local files or\n  over HTTP)\n* A type system to type check all of the above\n*
  [Standards](https://github.com/dhall-lang/dhall-lang/blob/master/standard/semantics.md)\n
  \ to promote adoption in multiple languages.\n\nTo give you an example of a Dhall
  expression, let's jump straight in and see an\nexample of a Dhall expression that
  can be used with `dhall-to-cabal`:\n\n```\n    let GitHub-project =\n          https://raw.githubusercontent.com/ocharles/dhall-to-cabal/1.0.0/dhall/GitHub-project.dhall\n\nin
  \ let prelude =\n          https://raw.githubusercontent.com/ocharles/dhall-to-cabal/1.0.0/dhall/prelude.dhall\n\nin
  \   GitHub-project\n      { owner = \"ocharles\", repo = \"example\" }\n    ⫽ {
  version =\n          prelude.v \"1.0.0\"\n      , library =\n          prelude.unconditional.library\n
  \         (   prelude.defaults.Library\n            ⫽ { build-depends =\n                  [
  { package =\n                        \"base\"\n                    , bounds =\n
  \                       prelude.majorBoundVersion (prelude.v \"4\")\n                    }\n
  \                 ]\n              , exposed-modules = \n                  [ \"Hello.World\"
  ]\n              }\n          )\n      } \n```\n\nWe can see quite a few features
  in use here. Ignoring what this file actually\ndoes (for now), let's focus on the
  language features.\n\nAt the start of we can see a few `let` bindings whose values
  themselves are\nimports over HTTP. Finally, we get into the body of the expression
  which is\nformed from two parts - function application of `GitHub-project` which
  is given\na record as argument (with `owner` and `repo` `Text` fields), and another
  larger\nrecord. The result of `GitHub-project` and the `library`-containing record
  are\nthen \"merged\" together using the `⫽` operator. In this case, you can think
  of\nthis as overriding or extending the result of `GitHub-project` with an extra\n`library`
  field.\n\nIt's OK if you don't follow all of the above - my goal is to simply get
  you\nfamiliar with what a Dhall expression would look like. The Dhall lanugage itself\nhas
  a [much more detailed\ntutorial](https://hackage.haskell.org/package/dhall-1.9.1/docs/Dhall-Tutorial.html)\nand
  [other documentation](https://github.com/dhall-lang/dhall-lang/wiki).\n\n## Cabal?\n\nCabal
  is something that you might already be familiar with, but if you're not, Cabal is:\n\n>
  a system for building and packaging Haskell libraries and programs. It defines\n>
  a common interface for package authors and distributors to easily build their\n>
  applications in a portable way. Cabal is part of a larger infrastructure for\n>
  distributing, organizing, and cataloging Haskell libraries and programs.\n\n(taken
  from [the Cabal homepage](https://www.haskell.org/cabal/)).\n\nAlmost all Haskell
  libraries are built using some parts of the Cabal system.\n\nFor the purposes of
  this project, we're interested in `.cabal` files themselves.\nCabal is a build-system,
  but it's also a domain specific language for *driving*\nthis build system.\n\nA
  small example Cabal file is\n\n```\nname: example\ncabal-version: 2.0\nbuild-type:
  Simple\nlicense: UnspecifiedLicense\nhomepage: https://github.com/ocharles/example\nbug-reports:
  https://github.com/ocharles/example/issues\n\nsource-repository head\n    type:
  git\n    location: https://github.com/ocharles/example\n\nlibrary\n    exposed-modules:\n
  \       Hello.World\n    build-depends:\n        base ^>=4\n```\n\nIn this, we see
  some leading metadata about the Haskell package itself - the\nname of the package,
  its homepage and its license, and so on. Towards the end of\nthe file, we add a
  library component to the package. To build this library, we\ndepend on the `base`
  library (which contains the standard Haskell prelude) and\nwill expose the `Hello.World`
  module as our API.\n\n## dhall-to-cabal?\n\n`dhall-to-cabal` tries to bridge the
  gap between these two separate worlds by\nallowing users to drive the Cabal build
  system via Dhall expressions. If you\nhadn't noticed by now, you've already seen
  an input Dhall-to-Cabal expression,\nand you've also already seen the corresponding
  output!\n\n### Getting Started\n\nYou can get `dhall-to-cabal` [from\nHackage](https://hackage.haskell.org/package/dhall-to-cabal).
  For usage, run\n`dhall-to-cabal --help`. For some example Dhall expressions, see\n[`dhall-to-cabal.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/dhall-to-cabal.dhall),\n[`lens.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/golden-tests/lens.dhall)\nor\n[`str-sig.dhall`](https://github.com/ocharles/dhall-to-cabal/blob/1.0-RC1/golden-tests/str-sig.dhall).\nThese
  are all fairly big expressions to test the project itself... if you have a\nsimpler
  example that you think would act as good reference, that would make a\ngreat starting
  pull request!\n\n## Why?\n\nI wrote dhall-to-cabal for a few reasons. Firstly, let's
  start with the\nself-centered arguments:\n\n* I wanted to learn more about Dhall.
  Specifically, I wanted to get comfortable\n  with what I could do with the language,
  and how I could use it to solve\n  problems in a specific domain. I'm beginning
  to view it in the same light as I\n  would view [Lua](https://www.lua.org/) and
  would like to explore that more in\n  the future.\n\n* I wanted to help drive Dhall
  development, as before even getting stuck in I\n  believed it was a worth-while
  project. I think even the 1.0 release of\n  dhall-to-cabal has been of value - I've
  reported 18 issues (14 of which have\n  been closed, usually fixed!), and I think
  we're starting to have discussions\n  in Dhall that are helping drive the overall
  project forward.\n\n* [It was requested](https://github.com/dhall-lang/dhall-haskell/issues/78)\n
  \ and I agree that it sounds like a project that should exist. The existence of\n
  \ [`hpack-dhall`](https://github.com/sol/hpack-dhall) strengthens this argument.\n\nThese
  are enough for me to justify the work, but it doesn't necessarily imply\nthat the
  project is of value. However, I think there *is* some value in this\nproject.\n\n*
  Cabal (the language) is limited in expressivity. We only just got `common`\n  blocks
  that allow us to abstract *some* details out and share them between\n  stanzas,
  but they still don't even come close to the amount of expressivity\n  given with
  `let`, function abstraction and remote imports.\n\n* What a Cabal file \"is\" has
  historically been somewhat vague. Thankfully, there\n  has been a recent effort
  to start moving stuff into [an excellent Read the\n  Docs user's guide](https://www.haskell.org/cabal/users-guide/),
  but this is\n  still incomplete. A search for \"backpack\" and \"mixins\" returns
  no results,\n  though these *are* valid keywords in the library stanza.\n  \n  Dhall-to-Cabal
  does not suffer from the mismatch between documentation and\n  internal implementation
  because as Dhall is type-checked we *always* have a\n  canonical type of Cabal packages.\n\n*
  Cabal is one-size fits all, but is that actually true? Some languages require\n
  \ special treatment, and the best we can do right now is to document that in the\n
  \ README. Take the [`network`\n  library](https://hackage.haskell.org/package/network):\n
  \ \n  > In network-2.6 the Network.URI module was split off into its own package,
  network-uri-2.6. If you're using the Network.URI module you can automatically get
  it from the right package by adding this to your .cabal file:\n\n  That's right
  - people have to copy and paste some code. I couldn't imagine\n  requiring people
  do that in actual Haskell code, so why do we treat Cabal\n  files differently?\n
  \ \n  In Dhall-to-Cabal, we can hide away the fiddly details in a separate Dhall\n
  \ expression, and provide it as something that users can import.\n  \n* We can go
  beyond Cabal files. If Cabal is a domain specific language for\n  building Haskell
  projects, what does a domain specific language for building\n  Haskell *web applications*
  look like? Does the separate of `library`,\n  `executable`, and `test-suite` make
  sense here? Maybe we'd rather:\n  \n  ```\n  servant-project {\n    api-route =
  \"My.API.Route\"\n    server = \"My.API.Server\"\n    models = [ \"My.API.Pancake\",
  \"My.API.Waffle\" ]\n  }\n  ```\n  \n  and have this take care of some other details.\n
  \ \n  I don't know what this bit of the future looks like, but I think there is\n
  \ certainly something there.\n\n  We can also see the desire to have this import/reuse
  functionality in core\n  libraries. The [`network`](https://hackage.haskell.org/package/network)\n
  \ library opens with a stanza about how you have to add the library to your\n  cabal
  file which is totally non-standard. Just give me an expression to\n  import, and
  then I don't have to worry about the details!\n"
license-name: MIT
