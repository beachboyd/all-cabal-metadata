homepage: ''
changelog-type: ''
hash: b8a33780753fb47f8c5667c3006e317ceaf447095b9490da9b339476d6c3e970
test-bench-deps: {}
maintainer: Gabriel439@gmail.com
synopsis: Template text using Dhall
changelog: ''
basic-deps:
  base: ! '>=4.8.0.0 && <5'
  dhall: ! '>=1.15.0 && <1.20'
  text: ! '>=0.11.1.0 && <1.3'
  optparse-applicative: <0.15
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.10
- 1.0.11
- 1.0.12
- 1.0.13
- 1.0.14
author: Gabriel Gonzalez
latest: 1.0.14
description-type: markdown
description: ! "# `dhall-text 1.0.14`\n\n[![Hackage](https://img.shields.io/hackage/v/dhall-text.svg)](https://hackage.haskell.org/package/dhall-text)\n\nThis
  `dhall-text` package provides a `dhall-to-text` executable which you can\nuse to
  template text using the Dhall configuration language.\n\nFor example, suppose you
  save the following files to your current directory:\n\n```haskell\n$ cat Person\n--
  Dhall is a typed programming language\n\n-- This file is the type of an anonymous
  record\n{ name : Text, upvotes : Natural }\n```\n\n```haskell\n$ cat people\n--
  Dhall natively supports lists and anonymous records\n\n[ { name = \"Maria\" , upvotes
  = 14 }\n, { name = \"Jordan\", upvotes =  2 }\n, { name = \"Pranav\", upvotes =
  \ 1 }\n]\n\n-- This file has type:\n--\n--     ./people : List { name : Text, upvotes
  : Natural }\n--\n-- ... or just:\n--\n--     ./people : List ./Person\n```\n\n```haskell\n$
  cat make-item\n    -- You can define anonymous functions in Dhall using a backslash
  (i.e. `\\`)\n    \\(person : ./Person)  -- You can import any type or expression
  by its path\n\n    -- Dhall supports multiline strings that strip leading whitespace
  and Dhall\n    -- supports string interpolation, too, using `${...}` syntax\n->
  \  ''\n    <li class=\"list-group-item\">\n      <span class=\"badge\">${Natural/show
  person.upvotes}</span>\n      ${person.name}\n    </li>\n    ''\n\n-- This file
  has type:\n--\n--     ./make-item : ./Person -> Text\n```\n\n```haskell\n$ cat make-items\n
  \   -- You can also import any type or expression by its URL\n    let List/map =
  \ https://raw.githubusercontent.com/dhall-lang/Prelude/302881a17491f3c72238975a6c3e7aab603b9a96/List/map\nin
  \ let Text/concat =  https://raw.githubusercontent.com/dhall-lang/Prelude/302881a17491f3c72238975a6c3e7aab603b9a96/Text/concat\nin
  \ \\(people : List ./Person)\n->   Text/concat (List/map ./Person Text ./make-item
  people)\n\n-- This file has type:\n--\n--     ./make-items : List ./Person -> Text\n```\n\nTemplating
  HTML is just ordinary function application:\n\n```bash\n$ dhall-to-text <<< './make-items
  ./people'\n<li class=\"list-group-item\">\n  <span class=\"badge\">14</span>\n  Maria\n</li>\n\n<li
  class=\"list-group-item\">\n  <span class=\"badge\">2</span>\n  Jordan\n</li>\n\n<li
  class=\"list-group-item\">\n  <span class=\"badge\">1</span>\n  Pranav\n</li>\n\n```\n\nTo
  learn more about the Dhall configuration language,\n[read the tutorial](https://hackage.haskell.org/package/dhall/docs/Dhall-Tutorial.html)\n\n##
  Quick start\n\nIf you have Nix then you can install this package using:\n\n```bash\n$
  nix-env --install --file default.nix\n```\n"
license-name: BSD-3-Clause
