homepage: https://github.com/haskell-compat/mtl-compat
changelog-type: markdown
hash: 6529f13857d14847664215bd46f324cc1008e874b42eb0a516a0807e19ead9d5
test-bench-deps: {}
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Backported Control.Monad.Except module from mtl
changelog: ! "### 0.2.1.3\n* A specific build with no flags explicitly enabled, intended
  for use with the latest version of `mtl`. This is a workaround for `cabal` backtracker
  bugs.\n\n### 0.2.1.2\n* A specific build with the `-ftwo-point-two` flag explicitly
  enabled. This is a workaround for `cabal` backtracker bugs.\n\n### 0.2.1.1\n* A
  specific build with the `-ftwo-point-one` flag explicitly enabled. This is a workaround
  for `cabal` backtracker bugs.\n\n## 0.2.1\n* Require use of `transformers-compat-0.4`
  or greater when building with `mtl-2.1.3.1` or earlier. `transformers-compat-0.4.0.*`
  adds the missing `ExceptT` instances, which means that `mtl-compat`'s only purpose
  is to backport the `Control.Monad.Except` module for those who want an `mtl`-style
  import for `ExceptT` and/or `MonadError`.\n  \n  I would recommend just using `Control.Monad.Trans.Except`
  from `transformers-compat-0.4.0.*` and `Control.Monad.Error.Class` instead, since
  they accomplish the same thing as `mtl-compat` without an extra dependency.\n\n##
  0.1.1\n* Allowed the `two-point-one` flag to toggle on/off automatically\n\n# 0.1\n*
  Initial commit\n"
basic-deps:
  base: ! '>=4.3 && <5'
  mtl: ! '>=2.2.1 && <2.3'
all-versions:
- '0.1'
- 0.1.1
- 0.2.0.4
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
author: Ryan Scott
latest: 0.2.1.3
description-type: markdown
description: ! '# `mtl-compat` [![Hackage version](https://img.shields.io/hackage/v/mtl-compat.svg?style=flat)](http://hackage.haskell.org/package/mtl-compat)
  [![Build Status](https://img.shields.io/travis/RyanGlScott/mtl-compat.svg?style=flat)](https://travis-ci.org/RyanGlScott/mtl-compat)


  This package backports the `Control.Monad.Except` module from `mtl` (if using `mtl-2.2.0.1`
  or earlier), which reexports the `ExceptT` monad transformer and the `MonadError`
  class.


  This package should only be used if there is a need to use the `Control.Monad.Except`
  module specifically. If you just want `mtl` class instances for `ExceptT`, use `transformers-compat`
  instead, since `mtl-compat` does nothing but reexport the instances from that package.


  Note that unlike how `mtl-2.2` or later works, the `Control.Monad.Except` module
  defined in this package exports all of `ExceptT`''s monad class instances. Therefore,
  you may have to declare `import Control.Monad.Except ()` at the top of your file
  to get all of the `ExceptT` instances in scope.

'
license-name: BSD-3-Clause
