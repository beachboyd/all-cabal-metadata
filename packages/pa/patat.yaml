homepage: http://github.com/jaspervdj/patat
changelog-type: markdown
hash: 60df83d0836553cc377b904c993b6c135f8943374e03073725b9fe64fa30a69d
test-bench-deps: {}
maintainer: Jasper Van der Jeugt <m@jaspervdj.be>
synopsis: Terminal-based presentations using Pandoc
changelog: ! "# Changelog\n\n- 0.6.1.1 (2018-04-27)\n    * Bump `aeson` to 1.3\n    *
  Bump `skylighting` to 0.7\n    * Bump `time` to 1.9\n    * Bump `ansi-terminal`
  to 0.8\n\n- 0.6.1.0 (2018-01-28)\n    * Bump `skylighting` to 0.6\n    * Bump `pandoc`
  to 2.1\n    * Bump `ansi-terminal` to 0.7\n\n- 0.6.0.1 (2017-12-24)\n    * Automatically
  upload linux binary to GitHub\n\n- 0.6.0.0 (2017-12-19)\n    * Make pandoc extensions
  customizable in the configuration\n    * Bump `pandoc` to 2.0\n\n- 0.5.2.2 (2017-06-14)\n
  \   * Add `network-uri` dependency to fix travis build\n\n- 0.5.2.1 (2017-06-14)\n
  \   * Bump `optparse-applicative-0.14` dependency\n\n- 0.5.2.0 (2017-05-16)\n    *
  Add navigation using `PageUp` and `PageDown`.\n    * Use `skylighting` instead of
  deprecated `highlighting-kate` for syntax\n      highlighting.\n\n- 0.5.1.2 (2017-04-26)\n
  \   * Make build reproducible even if timezone changes (patch by Félix Sipma)\n\n-
  0.5.1.1 (2017-04-23)\n    * Include `README` in `Extra-source-files` so it gets
  displayed on Hackage\n\n- 0.5.1.0 (2017-04-23)\n    * Bump `aeson-1.2` dependency\n
  \   * Fix vertical alignment of title slides\n    * Fix wrapping issue with inline
  code at end of line\n    * Add bash-completion script generation to Makefile\n\n-
  0.5.0.0 (2017-02-06)\n    * Add a `slideLevel` option & autodetect it.  This changes
  the way `patat`\n      splits slides.  For more information, see the `README` or
  the `man` page.\n      If you just want to get the old behavior back, just add:\n\n
  \           ---\n            patat:\n              slideLevel: 1\n            ...\n\n
  \       To the top of your presentation.\n\n    * Clear the screen when finished
  with the presentation.\n\n- 0.4.7.1 (2017-01-22)\n    * Bump `directory-1.3` dependency\n
  \   * Bump `time-1.7` dependency\n\n- 0.4.7.0 (2017-01-20)\n    * Bump `aeson-1.1`
  dependency\n    * Parse YAML for settings using `yaml` instead of pandoc\n    *
  Clarify watch & autoAdvance combination in documentation.\n\n- 0.4.6.0 (2016-12-28)\n
  \   * Redraw the screen on unknown commands to prevent accidental typing from\n
  \     showing up.\n    * Make the cursor invisible during the presentation.\n    *
  Move the footer down one more line to gain some screen real estate.\n\n- 0.4.5.0
  (2016-12-05)\n    * Render the date in a locale-independent manner (patch by Daniel\n
  \     Shahaf).\n\n- 0.4.4.0 (2016-12-03)\n    * Force the use of UTF-8 when generating
  the man page.\n\n- 0.4.3.0 (2016-12-02)\n    * Use `SOURCE_DATE_EPOCH` if it is
  present instead of getting the date from\n      `git log`.\n\n- 0.4.2.0 (2016-12-01)\n
  \   * Fix issues with man page generation on Travis.\n\n- 0.4.1.0 (2016-12-01)\n
  \   * Fix compatibility with `pandoc-1.18` and `pandoc-1.19`.\n    * Add a man page.\n\n-
  0.4.0.0 (2016-11-15)\n    * Add configurable auto advancing.\n    * Support fragmented
  slides.\n\n- 0.3.3.0 (2016-10-31)\n    * Add a `--version` flag.\n    * Add support
  for `pandoc-1.18` which includes a new `LineBlock` element.\n\n- 0.3.2.0 (2016-10-20)\n
  \   * Keep running even if errors are encountered during reload.\n\n- 0.3.1.0 (2016-10-18)\n
  \   * Fix compilation with `lts-6.22`.\n\n- 0.3.0.0 (2016-10-17)\n    * Add syntax
  highlighting support.\n    * Fixed slide clipping after reload.\n\n- 0.2.0.0 (2016-10-13)\n
  \   * Add theming support.\n    * Fix links display.\n    * Add support for wrapping.\n
  \   * Allow org mode as input format.\n\n- 0.1.0.0 (2016-10-02)\n    * Upload first
  version from hotel wifi in Kalaw.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  ansi-wl-pprint: ! '>=0.6 && <0.7'
  base: ! '>=4.6 && <4.11'
  time: ! '>=1.6 && <1.10'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ==1.2.*
  filepath: ! '>=1.4 && <1.5'
  network: ! '>=2.6'
  containers: ! '>=0.5 && <0.6'
  terminal-size: ! '>=0.3 && <0.4'
  ansi-terminal: ! '>=0.6 && <0.9'
  pandoc: ! '>=2.0.4 && <2.2'
  skylighting: ! '>=0.1 && <0.8'
  network-uri: ! '>=2.6'
  mtl: ==2.2.*
  optparse-applicative: ! '>=0.12 && <0.15'
  aeson: ! '>=0.9 && <1.4'
  yaml: ! '>=0.7 && <0.9'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.4.0.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.4.5.0'
- '0.4.6.0'
- '0.4.7.0'
- '0.4.7.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.1.1'
author: Jasper Van der Jeugt <m@jaspervdj.be>
latest: '0.6.1.1'
description-type: markdown
description: ! "patat\n=====\n\n[![Build Status](https://img.shields.io/circleci/project/github/jaspervdj/patat.svg)](https://circleci.com/gh/jaspervdj/patat)
  [![Hackage](https://img.shields.io/hackage/v/patat.svg)](https://hackage.haskell.org/package/patat)
  [![GitHub tag](https://img.shields.io/github/tag/jaspervdj/patat.svg)]()\n\n`patat`
  (**P**resentations **A**top **T**he **A**NSI **T**erminal) is a small\ntool that
  allows you to show presentations using only an ANSI terminal.  It does\nnot require
  `ncurses`.\n\nFeatures:\n\n- Leverages the great [Pandoc] library to support many
  input formats including\n  [Literate Haskell].\n- Supports [smart slide splitting](#input-format).\n-
  Slides can be split up into [multiple fragments](#fragmented-slides)\n- There is
  a [live reload](#running) mode.\n- [Theming](#theming) support.\n- [Auto advancing](#auto-advancing)
  with configurable delay.\n- Optionally [re-wrapping](#line-wrapping) text to terminal
  width with proper\n  indentation.\n- Syntax highlighting for nearly one hundred
  languages generated from [Kate]\n  syntax files.\n- Written in [Haskell].\n\n![screenshot](extra/screenshot.png?raw=true)\n\n[Kate]:
  https://kate-editor.org/\n[Haskell]: http://haskell.org/\n[Pandoc]: http://pandoc.org/\n\nTable
  of Contents\n-----------------\n\n-   [Table of Contents](#table-of-contents)\n-
  \  [Installation](#installation)\n    -   [Pre-built-packages](#pre-built-packages)\n
  \   -   [From source](#from-source)\n-   [Running](#running)\n-   [Options](#options)\n-
  \  [Controls](#controls)\n-   [Input format](#input-format)\n-   [Configuration](#configuration)\n
  \   -   [Line wrapping](#line-wrapping)\n    -   [Auto advancing](#auto-advancing)\n
  \   -   [Advanced slide splitting](#advanced-slide-splitting)\n    -   [Fragmented
  slides](#fragmented-slides)\n    -   [Theming](#theming)\n    -   [Syntax Highlighting](#syntax-highlighting)\n
  \   -   [Pandoc Extensions](#pandoc-extensions)\n-   [Trivia](#trivia)\n\nInstallation\n------------\n\n###
  Pre-built-packages\n\n- Debian: <https://packages.debian.org/unstable/patat>\n-
  Ubuntu: <https://packages.ubuntu.com/artful/patat>\n- openSUSE: <https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat>\n\nYou
  can also find generic linux binaries here:\n<https://github.com/jaspervdj/patat/releases>.\n\n###
  From source\n\nInstallation from source is very easy.  You can build from source
  using `stack\ninstall` or `cabal install`.  `patat` is also available from [Hackage].\n\n[Hackage]:
  https://hackage.haskell.org/package/patat\n\nFor people unfamiliar with the Haskell
  ecosystem, this means you can do either\nof the following:\n\n#### Using stack\n\n1.
  Install [stack] for your platform.\n2. Clone this repository.\n3. Run `stack setup`
  (if you're running stack for the first time) and\n   `stack install`.\n4. Make sure
  `$HOME/.local/bin` is in your `$PATH`.\n\n[stack]: https://docs.haskellstack.org/en/stable/README/\n\n####
  Using cabal\n\n1. Install [cabal] for your platform.\n2. Run `cabal install patat`.\n3.
  Make sure `$HOME/.cabal/bin` is in your `$PATH`.\n\n[cabal]: https://www.haskell.org/cabal/\n\nRunning\n-------\n\n`patat
  [*options*] file`\n\nOptions\n-------\n\n`-w`, `--watch`\n\n:   If you provide the
  `--watch` flag, `patat` will watch the presentation file\n    for changes and reload
  automatically.  This is very useful when you are\n    writing the presentation.\n\n`-f`,
  `--force`\n\n:   Run the presentation even if the terminal claims it does not support
  ANSI\n    features.\n\n`-d`, `--dump`\n\n:   Just dump all the slides to stdout.
  \ This is useful for debugging.\n\n`--version`\n\n:   Display version information.\n\nControls\n--------\n\n-
  **Next slide**: `space`, `enter`, `l`, `→`, `PageDown`\n- **Previous slide**: `backspace`,
  `h`, `←`, `PageUp`\n- **Go forward 10 slides**: `j`, `↓`\n- **Go backward 10 slides**:
  `k`, `↑`\n- **First slide**: `0`\n- **Last slide**: `G`\n- **Reload file**: `r`\n-
  **Quit**: `q`\n\nThe `r` key is very useful since it allows you to preview your
  slides while you\nare writing them.  You can also use this to fix artifacts when
  the terminal is\nresized.\n\nInput format\n------------\n\nThe input format can
  be anything that Pandoc supports.  Plain markdown is\nusually the most simple solution:\n\n
  \   ---\n    title: This is my presentation\n    author: Jane Doe\n    ...\n\n    #
  This is a slide\n\n    Slide contents.  Yay.\n\n    ---\n\n    # Important title\n\n
  \   Things I like:\n\n    - Markdown\n    - Haskell\n    - Pandoc\n\nHorizontal
  rulers (`---`) are used to split slides.\n\nHowever, if you prefer not use these
  since they are a bit intrusive in the\nmarkdown, you can also start every slide
  with a header.  In that case, the file\nshould not contain a single horizontal ruler.\n\n`patat`
  will pick the most deeply nested header (e.g. `h2`) as the marker for a\nnew slide.
  \ Headers _above_ the most deeply nested header (e.g. `h1`) will turn\ninto title
  slides, which are displayed as as a slide containing only the\ncentered title.\n\nThis
  means the following document is equivalent to the one we saw before:\n\n    ---\n
  \   title: This is my presentation\n    author: Jane Doe\n    ...\n\n    # This
  is a slide\n\n    Slide contents.  Yay.\n\n    # Important title\n\n    Things I
  like:\n\n    - Markdown\n    - Haskell\n    - Pandoc\n\nAnd that following document
  contains three slides: a title slide, followed by\ntwo content slides.\n\n    ---\n
  \   title: This is my presentation\n    author: Jane Doe\n    ...\n\n    # Chapter
  1\n\n    ## This is a slide\n\n    Slide contents.  Yay.\n\n    ## Another slide\n\n
  \   Things I like:\n\n    - Markdown\n    - Haskell\n    - Pandoc\n\nFor more information,
  see [Advanced slide splitting](#advanced-slide-splitting).\n\nConfiguration\n-------------\n\n`patat`
  is fairly configurable.  The configuration is done using [YAML].  There\nare two
  places where you can put your configuration:\n\n1. In the presentation file itself,
  using the [Pandoc metadata header].\n2. In `$HOME/.patat.yaml`\n\n[YAML]: http://yaml.org/\n[Pandoc
  metadata header]: http://pandoc.org/MANUAL.html#extension-yaml_metadata_block\n\nFor
  example, we set an option `key` to `val` by using the following file:\n\n    ---\n
  \   title: Presentation with options\n    author: John Doe\n    patat:\n        key:
  val\n    ...\n\n    Hello world.\n\nOr we can use a normal presentation and have
  the following `$HOME/.patat.yaml`:\n\n    key: val\n\n### Line wrapping\n\nLine
  wrapping can be enabled by setting `wrap: true` in the configuration.  This\nwill
  re-wrap all lines to fit the terminal width better.\n\n### Auto advancing\n\nBy
  setting `autoAdvanceDelay` to a number of seconds, `patat` will automatically\nadvance
  to the next slide.\n\n    ---\n    title: Auto-advance, yes please\n    author:
  John Doe\n    patat:\n        autoAdvanceDelay: 2\n    ...\n\n    Hello World!\n\n
  \   ---\n\n    This slide will be shown two seconds after the presentation starts.\n\nNote
  that changes to `autoAdvanceDelay` are not picked up automatically if you\nare running
  `patat --watch`.  This requires restarting `patat`.\n\n### Advanced slide splitting\n\nYou
  can control the way slide splitting works by setting the `slideLevel`\nvariable.
  \ This variable defaults to the least header that occurs before a\nnon-header, but
  it can also be explicitly defined.  For example, in the\nfollowing document, the
  `slideLevel` defaults to **2**:\n\n    # This is a slide\n\n    ## This is a nested
  header\n\n    This is some content\n\nWith `slideLevel` 2, the `h1` will turn into
  a \"title slide\", and the `h2` will\nbe displayed at the top of the second slide.
  \ We can customize this by setting\n`slideLevel` manually:\n\n    ---\n    patat:\n
  \     slideLevel: 1\n    ...\n\n    # This is a slide\n\n    ## This is a nested
  header\n\n    This is some content\n\nNow, we will only see one slide, which contains
  a nested header.\n\n### Fragmented slides\n\nBy default, slides are always displayed
  \"all at once\".  If you want to display\nthem fragment by fragment, there are two
  ways to do that.  The most common\ncase is that lists should be displayed incrementally.\n\nThis
  can be configured by settings `incrementalLists` to `true` in the metadata\nblock:\n\n
  \   ---\n    title: Presentation with incremental lists\n    author: John Doe\n
  \   patat:\n        incrementalLists: true\n    ...\n\n    - This list\n    - is
  displayed\n    - item by item\n\nSetting `incrementalLists` works on _all_ lists
  in the presentation.  To flip\nthe setting for a specific list, wrap it in a block
  quote.  This will make the\nlist incremental if `incrementalLists` is not set, and
  it will display the list\nall at once if `incrementalLists` is set to `true`.\n\nThis
  example contains a sublist which is also displayed incrementally, and then\na sublist
  which is displayed all at once (by merit of the block quote).\n\n    ---\n    title:
  Presentation with incremental lists\n    author: John Doe\n    patat:\n        incrementalLists:
  true\n    ...\n\n    - This list\n    - is displayed\n\n        * item\n        *
  by item\n\n    - Or sometimes\n\n        > * all at\n        > * once\n\nAnother
  way to break up slides is to use a pagraph only containing three dots\nseparated
  by spaces.  For example, this slide has two pauses:\n\n    Legen\n\n    . . .\n\n
  \   wait for it\n\n    . . .\n\n    Dary!\n\n### Theming\n\nColors and other properties
  can also be changed using this configuration.  For\nexample, we can have:\n\n    ---\n
  \   author: 'Jasper Van der Jeugt'\n    title: 'This is a test'\n    patat:\n        wrap:
  true\n        theme:\n            emph: [vividBlue, onVividBlack, bold]\n            imageTarget:
  [onDullWhite, vividRed]\n    ...\n\n    # This is a presentation\n\n    This is
  _emph_ text.\n\n    ![Hello](foo.png)\n\nThe properties that can be given a list
  of styles are:\n\n`blockQuote`, `borders`, `bulletList`, `codeBlock`, `code`, `definitionList`,\n`definitionTerm`,
  `emph`, `header`, `imageTarget`, `imageText`, `linkTarget`,\n`linkText`, `math`,
  `orderedList`, `quoted`, `strikeout`, `strong`,\n`tableHeader`, `tableSeparator`\n\nThe
  accepted styles are:\n\n`bold`, `dullBlack`, `dullBlue`, `dullCyan`, `dullGreen`,
  `dullMagenta`,\n`dullRed`, `dullWhite`, `dullYellow`, `onDullBlack`, `onDullBlue`,
  `onDullCyan`,\n`onDullGreen`, `onDullMagenta`, `onDullRed`, `onDullWhite`, `onDullYellow`,\n`onVividBlack`,
  `onVividBlue`, `onVividCyan`, `onVividGreen`, `onVividMagenta`,\n`onVividRed`, `onVividWhite`,
  `onVividYellow`, `underline`, `vividBlack`,\n`vividBlue`, `vividCyan`, `vividGreen`,
  `vividMagenta`, `vividRed`,\n`vividWhite`, `vividYellow`\n\n### Syntax Highlighting\n\nAs
  part of theming, syntax highlighting is also configurable.  This can be\nconfigured
  like this:\n\n    ---\n    patat:\n      theme:\n        syntaxHighlighting:\n          decVal:
  [bold, onDullRed]\n    ...\n\n    ...\n\n`decVal` refers to \"decimal values\".
  \ This is known as a \"token type\".  For a\nfull list of token types, see [this
  list] -- the names are derived from there in\nan obvious way.\n\n[this list]: https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType\n\n###
  Pandoc Extensions\n\nPandoc comes with a fair number of extensions on top of markdown:\n\n
  \   <https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html>\n\n`patat`
  enables a number of them by default, but this is also customizable.\n\nIn order
  to enable an additional extensions, e.g. `autolink_bare_uris`, add it\nto the `pandocExtensions`
  field in the YAML metadata:\n\n    ---\n    patat:\n      pandocExtensions:\n        -
  patat_extensions\n        - autolink_bare_uris\n    ...\n\n    Document content...\n\nThe
  `patat_extensions` in the above snippet refers to the default set of\nextensions
  enabled by `patat`.  If you want to disable those and only use a\nselect few extensions,
  simply leave it out and choose your own:\n\n    ---\n    patat:\n      pandocExtensions:\n
  \       - autolink_bare_uris\n        - emoji\n    ...\n\n    ...\n\n    Document
  content...\n\nIf you don't want to enable any extensions, simply set `pandocExtensions`
  to the\nempty list `[]`.\n\nTrivia\n------\n\n_\"Patat\"_ is the Flemish word for
  a simple potato.  Dutch people also use it to\nrefer to French Fries but I don't
  really do that -- in Belgium we just call\nfries _\"Frieten\"_.\n\nThe idea of `patat`
  is largely based upon [MDP] which is in turn based upon\n[VTMC].  I wanted to write
  a clone using Pandoc because I ran into a markdown\nparsing bug in MDP which I could
  not work around.  A second reason to do a\nPandoc-based tool was that I would be
  able to use [Literate Haskell] as well.\nLastly, I also prefer not to install Node.js
  on my machine if I can avoid it.\n\n[MDP]: https://github.com/visit1985/mdp\n[VTMC]:
  https://github.com/jclulow/vtmc\n[Literate Haskell]: https://wiki.haskell.org/Literate_programming\n"
license-name: GPL-2
