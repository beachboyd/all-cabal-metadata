homepage: http://github.com/jaspervdj/patat
changelog-type: markdown
hash: 687e30f23b1e2e51ecb01cc69225fbdb2336833cdbc4e22d74b4b1a66d2b1a7d
test-bench-deps: {}
maintainer: Jasper Van der Jeugt <m@jaspervdj.be>
synopsis: Terminal-based presentations using Pandoc
changelog: ! "# Changelog\n\n- 0.8.1.2 (2018-10-29)\n    * Work around test failure
  caused by slightly different syntax highlighting\n      in different pandoc versions\n\n-
  0.8.1.1 (2018-10-26)\n    * Tickle CircleCI cache\n\n- 0.8.1.0 (2018-10-26)\n    *
  Add support for italic ansi code in themes\n    * Fix centered titles not being
  centered (contribution by Hamza Haiken)\n\n- 0.8.0.0 (2018-08-31)\n    * Themed
  border rendering improvements (contribution by Hamza Haiken)\n    * Add support
  for margins (contribution by Hamza Haiken)\n    * Add RGB colour support for themes
  (contribution by Hamza Haiken)\n    * Add experimental images support\n    * Add
  images support for iTerm2 (contribution by @2mol)\n\n- 0.7.2.0 (2018-05-08)\n    *
  GHC 8.4 compatibility\n\n- 0.7.1.0 (2018-05-08)\n    * GHC 8.4 compatibility\n\n-
  0.7.0.0 (2018-05-04)\n    * Support HTML-style comments\n\n- 0.6.1.2 (2018-04-30)\n
  \   * Bump `pandoc` to 2.2\n\n- 0.6.1.1 (2018-04-27)\n    * Bump `aeson` to 1.3\n
  \   * Bump `skylighting` to 0.7\n    * Bump `time` to 1.9\n    * Bump `ansi-terminal`
  to 0.8\n\n- 0.6.1.0 (2018-01-28)\n    * Bump `skylighting` to 0.6\n    * Bump `pandoc`
  to 2.1\n    * Bump `ansi-terminal` to 0.7\n\n- 0.6.0.1 (2017-12-24)\n    * Automatically
  upload linux binary to GitHub\n\n- 0.6.0.0 (2017-12-19)\n    * Make pandoc extensions
  customizable in the configuration\n    * Bump `pandoc` to 2.0\n\n- 0.5.2.2 (2017-06-14)\n
  \   * Add `network-uri` dependency to fix travis build\n\n- 0.5.2.1 (2017-06-14)\n
  \   * Bump `optparse-applicative-0.14` dependency\n\n- 0.5.2.0 (2017-05-16)\n    *
  Add navigation using `PageUp` and `PageDown`.\n    * Use `skylighting` instead of
  deprecated `highlighting-kate` for syntax\n      highlighting.\n\n- 0.5.1.2 (2017-04-26)\n
  \   * Make build reproducible even if timezone changes (patch by Félix Sipma)\n\n-
  0.5.1.1 (2017-04-23)\n    * Include `README` in `Extra-source-files` so it gets
  displayed on Hackage\n\n- 0.5.1.0 (2017-04-23)\n    * Bump `aeson-1.2` dependency\n
  \   * Fix vertical alignment of title slides\n    * Fix wrapping issue with inline
  code at end of line\n    * Add bash-completion script generation to Makefile\n\n-
  0.5.0.0 (2017-02-06)\n    * Add a `slideLevel` option & autodetect it.  This changes
  the way `patat`\n      splits slides.  For more information, see the `README` or
  the `man` page.\n      If you just want to get the old behavior back, just add:\n\n
  \           ---\n            patat:\n              slideLevel: 1\n            ...\n\n
  \       To the top of your presentation.\n\n    * Clear the screen when finished
  with the presentation.\n\n- 0.4.7.1 (2017-01-22)\n    * Bump `directory-1.3` dependency\n
  \   * Bump `time-1.7` dependency\n\n- 0.4.7.0 (2017-01-20)\n    * Bump `aeson-1.1`
  dependency\n    * Parse YAML for settings using `yaml` instead of pandoc\n    *
  Clarify watch & autoAdvance combination in documentation.\n\n- 0.4.6.0 (2016-12-28)\n
  \   * Redraw the screen on unknown commands to prevent accidental typing from\n
  \     showing up.\n    * Make the cursor invisible during the presentation.\n    *
  Move the footer down one more line to gain some screen real estate.\n\n- 0.4.5.0
  (2016-12-05)\n    * Render the date in a locale-independent manner (patch by Daniel\n
  \     Shahaf).\n\n- 0.4.4.0 (2016-12-03)\n    * Force the use of UTF-8 when generating
  the man page.\n\n- 0.4.3.0 (2016-12-02)\n    * Use `SOURCE_DATE_EPOCH` if it is
  present instead of getting the date from\n      `git log`.\n\n- 0.4.2.0 (2016-12-01)\n
  \   * Fix issues with man page generation on Travis.\n\n- 0.4.1.0 (2016-12-01)\n
  \   * Fix compatibility with `pandoc-1.18` and `pandoc-1.19`.\n    * Add a man page.\n\n-
  0.4.0.0 (2016-11-15)\n    * Add configurable auto advancing.\n    * Support fragmented
  slides.\n\n- 0.3.3.0 (2016-10-31)\n    * Add a `--version` flag.\n    * Add support
  for `pandoc-1.18` which includes a new `LineBlock` element.\n\n- 0.3.2.0 (2016-10-20)\n
  \   * Keep running even if errors are encountered during reload.\n\n- 0.3.1.0 (2016-10-18)\n
  \   * Fix compilation with `lts-6.22`.\n\n- 0.3.0.0 (2016-10-17)\n    * Add syntax
  highlighting support.\n    * Fixed slide clipping after reload.\n\n- 0.2.0.0 (2016-10-13)\n
  \   * Add theming support.\n    * Fix links display.\n    * Add support for wrapping.\n
  \   * Allow org mode as input format.\n\n- 0.1.0.0 (2016-10-02)\n    * Upload first
  version from hotel wifi in Kalaw.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  ansi-wl-pprint: ! '>=0.6 && <0.7'
  base: ! '>=4.6 && <5'
  time: ! '>=1.6 && <1.10'
  base64-bytestring: ! '>=1.0 && <1.1'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ==1.2.*
  filepath: ! '>=1.4 && <1.5'
  process: ! '>=1.6 && <1.7'
  network: ! '>=2.6'
  containers: ! '>=0.5 && <0.7'
  terminal-size: ! '>=0.3 && <0.4'
  ansi-terminal: ! '>=0.6 && <0.9'
  pandoc: ! '>=2.0.4 && <2.3'
  skylighting: ! '>=0.1 && <0.8'
  network-uri: ! '>=2.6'
  mtl: ==2.2.*
  colour: ! '>=2.3 && <2.4'
  optparse-applicative: ! '>=0.12 && <0.15'
  aeson: ! '>=0.9 && <1.5'
  yaml: ! '>=0.8 && <0.11'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.4.0.0'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.4.0'
- '0.4.5.0'
- '0.4.6.0'
- '0.4.7.0'
- '0.4.7.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.1.1'
- '0.7.0.0'
- '0.7.2.0'
- '0.8.0.0'
- '0.8.1.1'
- '0.8.1.2'
author: Jasper Van der Jeugt <m@jaspervdj.be>
latest: '0.8.1.2'
description-type: markdown
description: ! "patat\n=====\n\n[![Build Status](https://img.shields.io/circleci/project/github/jaspervdj/patat.svg)](https://circleci.com/gh/jaspervdj/patat)
  [![Hackage](https://img.shields.io/hackage/v/patat.svg)](https://hackage.haskell.org/package/patat)
  [![GitHub tag](https://img.shields.io/github/tag/jaspervdj/patat.svg)]()\n\n`patat`
  (**P**resentations **A**top **T**he **A**NSI **T**erminal) is a small\ntool that
  allows you to show presentations using only an ANSI terminal.  It does\nnot require
  `ncurses`.\n\nFeatures:\n\n- Leverages the great [Pandoc] library to support many
  input formats including\n  [Literate Haskell].\n- Supports [smart slide splitting](#input-format).\n-
  Slides can be split up into [multiple fragments](#fragmented-slides)\n- There is
  a [live reload](#running) mode.\n- [Theming](#theming) support including 24-bit
  RGB.\n- [Auto advancing](#auto-advancing) with configurable delay.\n- Optionally
  [re-wrapping](#line-wrapping) text to terminal width with proper\n  indentation.\n-
  Syntax highlighting for nearly one hundred languages generated from [Kate]\n  syntax
  files.\n- Experimental [images](#images) support.\n- Written in [Haskell].\n\n![screenshot](extra/screenshot.png?raw=true)\n\n[Kate]:
  https://kate-editor.org/\n[Haskell]: http://haskell.org/\n[Pandoc]: http://pandoc.org/\n\nTable
  of Contents\n-----------------\n\n-   [Table of Contents](#table-of-contents)\n-
  \  [Installation](#installation)\n    -   [Pre-built-packages](#pre-built-packages)\n
  \   -   [From source](#from-source)\n-   [Running](#running)\n-   [Options](#options)\n-
  \  [Controls](#controls)\n-   [Input format](#input-format)\n-   [Configuration](#configuration)\n
  \   -   [Line wrapping](#line-wrapping)\n    -   [Auto advancing](#auto-advancing)\n
  \   -   [Advanced slide splitting](#advanced-slide-splitting)\n    -   [Fragmented
  slides](#fragmented-slides)\n    -   [Theming](#theming)\n    -   [Syntax Highlighting](#syntax-highlighting)\n
  \   -   [Pandoc Extensions](#pandoc-extensions)\n    -   [Images](#images)\n-   [Trivia](#trivia)\n\nInstallation\n------------\n\n###
  Pre-built-packages\n\n- Archlinux: <https://aur.archlinux.org/packages/patat-bin>\n-
  Debian: <https://packages.debian.org/unstable/patat>\n- Ubuntu: <https://packages.ubuntu.com/artful/patat>\n-
  openSUSE: <https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat>\n\nYou
  can also find generic linux binaries here:\n<https://github.com/jaspervdj/patat/releases>.\n\n###
  From source\n\nInstallation from source is very easy.  You can build from source
  using `stack\ninstall` or `cabal install`.  `patat` is also available from [Hackage].\n\n[Hackage]:
  https://hackage.haskell.org/package/patat\n\nFor people unfamiliar with the Haskell
  ecosystem, this means you can do either\nof the following:\n\n#### Using stack\n\n1.
  Install [stack] for your platform.\n2. Clone this repository.\n3. Run `stack setup`
  (if you're running stack for the first time) and\n   `stack install`.\n4. Make sure
  `$HOME/.local/bin` is in your `$PATH`.\n\n[stack]: https://docs.haskellstack.org/en/stable/README/\n\n####
  Using cabal\n\n1. Install [cabal] for your platform.\n2. Run `cabal install patat`.\n3.
  Make sure `$HOME/.cabal/bin` is in your `$PATH`.\n\n[cabal]: https://www.haskell.org/cabal/\n\nRunning\n-------\n\n`patat
  [*options*] file`\n\nOptions\n-------\n\n`-w`, `--watch`\n\n:   If you provide the
  `--watch` flag, `patat` will watch the presentation file\n    for changes and reload
  automatically.  This is very useful when you are\n    writing the presentation.\n\n`-f`,
  `--force`\n\n:   Run the presentation even if the terminal claims it does not support
  ANSI\n    features.\n\n`-d`, `--dump`\n\n:   Just dump all the slides to stdout.
  \ This is useful for debugging.\n\n`--version`\n\n:   Display version information.\n\nControls\n--------\n\n-
  **Next slide**: `space`, `enter`, `l`, `→`, `PageDown`\n- **Previous slide**: `backspace`,
  `h`, `←`, `PageUp`\n- **Go forward 10 slides**: `j`, `↓`\n- **Go backward 10 slides**:
  `k`, `↑`\n- **First slide**: `0`\n- **Last slide**: `G`\n- **Reload file**: `r`\n-
  **Quit**: `q`\n\nThe `r` key is very useful since it allows you to preview your
  slides while you\nare writing them.  You can also use this to fix artifacts when
  the terminal is\nresized.\n\nInput format\n------------\n\nThe input format can
  be anything that Pandoc supports.  Plain markdown is\nusually the most simple solution:\n\n```markdown\n---\ntitle:
  This is my presentation\nauthor: Jane Doe\n...\n\n# This is a slide\n\nSlide contents.
  \ Yay.\n\n---\n\n# Important title\n\nThings I like:\n\n- Markdown\n- Haskell\n-
  Pandoc\n```\n\nHorizontal rulers (`---`) are used to split slides.\n\nHowever, if
  you prefer not use these since they are a bit intrusive in the\nmarkdown, you can
  also start every slide with a header.  In that case, the file\nshould not contain
  a single horizontal ruler.\n\n`patat` will pick the most deeply nested header (e.g.
  `h2`) as the marker for a\nnew slide.  Headers _above_ the most deeply nested header
  (e.g. `h1`) will turn\ninto title slides, which are displayed as as a slide containing
  only the\ncentered title.\n\nThis means the following document is equivalent to
  the one we saw before:\n\n```markdown\n---\ntitle: This is my presentation\nauthor:
  Jane Doe\n...\n\n# This is a slide\n\nSlide contents.  Yay.\n\n# Important title\n\nThings
  I like:\n\n- Markdown\n- Haskell\n- Pandoc\n```\n\nAnd that following document contains
  three slides: a title slide, followed by\ntwo content slides.\n\n```markdown\n---\ntitle:
  This is my presentation\nauthor: Jane Doe\n...\n\n# Chapter 1\n\n## This is a slide\n\nSlide
  contents.  Yay.\n\n## Another slide\n\nThings I like:\n\n- Markdown\n- Haskell\n-
  Pandoc\n```\n\nFor more information, see [Advanced slide splitting](#advanced-slide-splitting).\n\nPatat
  supports comments which can be used as speaker notes.\n\n```markdown\n---\ntitle:
  This is my presentation\nauthor: Jane Doe\n...\n\n# Chapter 1\n\n<!--\nNote: I should
  not bore the audience with my thoughts on powerpoint but\njust get straight to the
  point.\n-->\n\nSlide contents.  Yay.\n\n<!-- TODO: Finish the rest of the presentation.
  -->\n```\n\nConfiguration\n-------------\n\n`patat` is fairly configurable.  The
  configuration is done using [YAML].  There\nare two places where you can put your
  configuration:\n\n1. In the presentation file itself, using the [Pandoc metadata
  header].\n2. In `$HOME/.patat.yaml`\n\n[YAML]: http://yaml.org/\n[Pandoc metadata
  header]: http://pandoc.org/MANUAL.html#extension-yaml_metadata_block\n\nFor example,
  we set an option `key` to `val` by using the following file:\n\n```markdown\n---\ntitle:
  Presentation with options\nauthor: John Doe\npatat:\n    key: val\n...\n\nHello
  world.\n```\n\nOr we can use a normal presentation and have the following `$HOME/.patat.yaml`:\n\n
  \   key: val\n\n### Line wrapping\n\nLine wrapping can be enabled by setting `wrap:
  true` in the configuration.  This\nwill re-wrap all lines to fit the terminal width
  better.\n\n### Margins\n\nMargins can be enabled by setting a `margins` entry in
  the configuration:\n\n```markdown\n---\ntitle: Presentation with margins\nauthor:
  John Doe\npatat:\n    wrap: true\n    margins:\n        left: 10\n        right:
  10\n...\n\nLorem ipsum dolor sit amet, ...\n```\n\nThis example configuration will
  generate slides with a margin of 10 characters on the left,\nand break lines 10
  characters before they reach the end of the terminal's width.\n\nIt is recommended
  to enable [line wrapping](#line-wrapping) along with this feature.\n\n### Auto advancing\n\nBy
  setting `autoAdvanceDelay` to a number of seconds, `patat` will automatically\nadvance
  to the next slide.\n\n```markdown\n---\ntitle: Auto-advance, yes please\nauthor:
  John Doe\npatat:\n    autoAdvanceDelay: 2\n...\n\nHello World!\n\n---\n\nThis slide
  will be shown two seconds after the presentation starts.\n```\n\nNote that changes
  to `autoAdvanceDelay` are not picked up automatically if you\nare running `patat
  --watch`.  This requires restarting `patat`.\n\n### Advanced slide splitting\n\nYou
  can control the way slide splitting works by setting the `slideLevel`\nvariable.
  \ This variable defaults to the least header that occurs before a\nnon-header, but
  it can also be explicitly defined.  For example, in the\nfollowing document, the
  `slideLevel` defaults to **2**:\n\n```markdown\n# This is a slide\n\n## This is
  a nested header\n\nThis is some content\n```\n\nWith `slideLevel` 2, the `h1` will
  turn into a \"title slide\", and the `h2` will\nbe displayed at the top of the second
  slide.  We can customize this by setting\n`slideLevel` manually:\n\n```markdown\n---\npatat:\n
  \ slideLevel: 1\n...\n\n# This is a slide\n\n## This is a nested header\n\nThis
  is some content\n```\n\nNow, we will only see one slide, which contains a nested
  header.\n\n### Fragmented slides\n\nBy default, slides are always displayed \"all
  at once\".  If you want to display\nthem fragment by fragment, there are two ways
  to do that.  The most common\ncase is that lists should be displayed incrementally.\n\nThis
  can be configured by settings `incrementalLists` to `true` in the metadata\nblock:\n\n```markdown\n---\ntitle:
  Presentation with incremental lists\nauthor: John Doe\npatat:\n    incrementalLists:
  true\n...\n\n- This list\n- is displayed\n- item by item\n```\n\nSetting `incrementalLists`
  works on _all_ lists in the presentation.  To flip\nthe setting for a specific list,
  wrap it in a block quote.  This will make the\nlist incremental if `incrementalLists`
  is not set, and it will display the list\nall at once if `incrementalLists` is set
  to `true`.\n\nThis example contains a sublist which is also displayed incrementally,
  and then\na sublist which is displayed all at once (by merit of the block quote).\n\n```markdown\n---\ntitle:
  Presentation with incremental lists\nauthor: John Doe\npatat:\n    incrementalLists:
  true\n...\n\n- This list\n- is displayed\n\n    * item\n    * by item\n\n- Or sometimes\n\n
  \   > * all at\n    > * once\n```\n\nAnother way to break up slides is to use a
  pagraph only containing three dots\nseparated by spaces.  For example, this slide
  has two pauses:\n\n```markdown\nLegen\n\n. . .\n\nwait for it\n\n. . .\n\nDary!\n```\n\n###
  Theming\n\nColors and other properties can also be changed using this configuration.
  \ For\nexample, we can have:\n\n```markdown\n---\nauthor: 'Jasper Van der Jeugt'\ntitle:
  'This is a test'\npatat:\n    wrap: true\n    theme:\n        emph: [vividBlue,
  onVividBlack, italic]\n        strong: [bold]\n        imageTarget: [onDullWhite,
  vividRed]\n...\n\n# This is a presentation\n\nThis is _emph_ text.\n\n![Hello](foo.png)\n```\n\nThe
  properties that can be given a list of styles are:\n\n`blockQuote`, `borders`, `bulletList`,
  `codeBlock`, `code`, `definitionList`,\n`definitionTerm`, `emph`, `header`, `imageTarget`,
  `imageText`, `linkTarget`,\n`linkText`, `math`, `orderedList`, `quoted`, `strikeout`,
  `strong`,\n`tableHeader`, `tableSeparator`\n\nThe accepted styles are:\n\n`bold`,
  `italic`, `dullBlack`, `dullBlue`, `dullCyan`, `dullGreen`,\n`dullMagenta`, `dullRed`,
  `dullWhite`, `dullYellow`, `onDullBlack`,\n`onDullBlue`, `onDullCyan`, `onDullGreen`,
  `onDullMagenta`, `onDullRed`,\n`onDullWhite`, `onDullYellow`, `onVividBlack`, `onVividBlue`,
  `onVividCyan`,\n`onVividGreen`, `onVividMagenta`, `onVividRed`, `onVividWhite`,
  `onVividYellow`,\n`underline`, `vividBlack`, `vividBlue`, `vividCyan`, `vividGreen`,\n`vividMagenta`,
  `vividRed`, `vividWhite`, `vividYellow`\n\nAlso accepted are styles of the form
  `rgb#RrGgBb` and `onRgb#RrGgBb`, where `Rr`\n`Gg` and `Bb` are hexadecimal bytes
  (e.g. `rgb#f08000` for an orange foreground,\nand `onRgb#101060` for a deep purple
  background).  Naturally, your terminal\nneeds to support 24-bit RGB for this to
  work.  When creating portable\npresentations, it might be better to stick with the
  named colours listed above.\n\n### Syntax Highlighting\n\nAs part of theming, syntax
  highlighting is also configurable.  This can be\nconfigured like this:\n\n```markdown\n---\npatat:\n
  \ theme:\n    syntaxHighlighting:\n      decVal: [bold, onDullRed]\n...\n\n...\n```\n\n`decVal`
  refers to \"decimal values\".  This is known as a \"token type\".  For a\nfull list
  of token types, see [this list] -- the names are derived from there in\nan obvious
  way.\n\n[this list]: https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType\n\n###
  Pandoc Extensions\n\nPandoc comes with a fair number of extensions on top of markdown,
  listed [here](https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html).\n\n`patat`
  enables a number of them by default, but this is also customizable.\n\nIn order
  to enable an additional extensions, e.g. `autolink_bare_uris`, add it\nto the `pandocExtensions`
  field in the YAML metadata:\n\n```markdown\n---\npatat:\n  pandocExtensions:\n    -
  patat_extensions\n    - autolink_bare_uris\n...\n\nDocument content...\n```\n\nThe
  `patat_extensions` in the above snippet refers to the default set of\nextensions
  enabled by `patat`.  If you want to disable those and only use a\nselect few extensions,
  simply leave it out and choose your own:\n\n```markdown\n---\npatat:\n  pandocExtensions:\n
  \   - autolink_bare_uris\n    - emoji\n...\n\n...\n\nDocument content...\n```\n\nIf
  you don't want to enable any extensions, simply set `pandocExtensions` to the\nempty
  list `[]`.\n\n\n### Images\n\n`patat-0.8.0.0` and newer include images support for
  some terminal emulators.\n\n```markdown\n---\npatat:\n  images:\n    backend: auto\n...\n\n#
  A slide with only an image.\n\n![](matterhorn.jpg)\n```\n\nIf `images` is enabled
  (not by default), `patat` will draw slides that consist\nonly of a single image
  just by drawing the image, centered and resized to fit\nthe terminal window.\n\n`patat`
  supports the following image drawing backends:\n\n-   `backend: iterm2`: uses [iTerm2](https://iterm2.com/)'s
  special escape\n    sequence to render the image.  This even works with animated
  GIFs!\n\n-   `backend: w3m`: uses the `w3mimgdisplay` executable to draw directly
  onto\n    the window.  This has been tested in `urxvt` and `xterm`, but is known
  to\n    produce weird results in `tmux`.\n\n    If `w3mimgdisplay` is in a non-standard
  location, you can specify that using\n    `path`:\n\n            ```yaml\n            backend:
  'w3m\n            path: '/home/jasper/.local/bin/w3mimgdisplay'\n            ```\n\nTrivia\n------\n\n_\"Patat\"_
  is the Flemish word for a simple potato.  Dutch people also use it to\nrefer to
  French Fries but I don't really do that -- in Belgium we just call\nfries _\"Frieten\"_.\n\nThe
  idea of `patat` is largely based upon [MDP] which is in turn based upon\n[VTMC].
  \ I wanted to write a clone using Pandoc because I ran into a markdown\nparsing
  bug in MDP which I could not work around.  A second reason to do a\nPandoc-based
  tool was that I would be able to use [Literate Haskell] as well.\nLastly, I also
  prefer not to install Node.js on my machine if I can avoid it.\n\n[MDP]: https://github.com/visit1985/mdp\n[VTMC]:
  https://github.com/jclulow/vtmc\n[Literate Haskell]: https://wiki.haskell.org/Literate_programming\n"
license-name: GPL-2
