homepage: http://github.com/jaspervdj/patat
changelog-type: markdown
hash: 01184243c27c81dd38aebb6d57fa79fdb6d4bf55a420912c8fc401aabfa641e8
test-bench-deps: {}
maintainer: Jasper Van der Jeugt <m@jaspervdj.be>
synopsis: Terminal-based presentations using Pandoc
changelog: |
  # Changelog

  - 0.8.2.0 (2019-01-24)
      * GHC 7.8 compatibility

  - 0.8.1.3 (2019-01-24)
      * Bump `pandoc` to 2.4
      * Bump `yaml` to 0.11

  - 0.8.1.2 (2018-10-29)
      * Work around test failure caused by slightly different syntax highlighting
        in different pandoc versions

  - 0.8.1.1 (2018-10-26)
      * Tickle CircleCI cache

  - 0.8.1.0 (2018-10-26)
      * Add support for italic ansi code in themes
      * Fix centered titles not being centered (contribution by Hamza Haiken)

  - 0.8.0.0 (2018-08-31)
      * Themed border rendering improvements (contribution by Hamza Haiken)
      * Add support for margins (contribution by Hamza Haiken)
      * Add RGB colour support for themes (contribution by Hamza Haiken)
      * Add experimental images support
      * Add images support for iTerm2 (contribution by @2mol)

  - 0.7.2.0 (2018-05-08)
      * GHC 8.4 compatibility

  - 0.7.1.0 (2018-05-08)
      * GHC 8.4 compatibility

  - 0.7.0.0 (2018-05-04)
      * Support HTML-style comments

  - 0.6.1.2 (2018-04-30)
      * Bump `pandoc` to 2.2

  - 0.6.1.1 (2018-04-27)
      * Bump `aeson` to 1.3
      * Bump `skylighting` to 0.7
      * Bump `time` to 1.9
      * Bump `ansi-terminal` to 0.8

  - 0.6.1.0 (2018-01-28)
      * Bump `skylighting` to 0.6
      * Bump `pandoc` to 2.1
      * Bump `ansi-terminal` to 0.7

  - 0.6.0.1 (2017-12-24)
      * Automatically upload linux binary to GitHub

  - 0.6.0.0 (2017-12-19)
      * Make pandoc extensions customizable in the configuration
      * Bump `pandoc` to 2.0

  - 0.5.2.2 (2017-06-14)
      * Add `network-uri` dependency to fix travis build

  - 0.5.2.1 (2017-06-14)
      * Bump `optparse-applicative-0.14` dependency

  - 0.5.2.0 (2017-05-16)
      * Add navigation using `PageUp` and `PageDown`.
      * Use `skylighting` instead of deprecated `highlighting-kate` for syntax
        highlighting.

  - 0.5.1.2 (2017-04-26)
      * Make build reproducible even if timezone changes (patch by Félix Sipma)

  - 0.5.1.1 (2017-04-23)
      * Include `README` in `Extra-source-files` so it gets displayed on Hackage

  - 0.5.1.0 (2017-04-23)
      * Bump `aeson-1.2` dependency
      * Fix vertical alignment of title slides
      * Fix wrapping issue with inline code at end of line
      * Add bash-completion script generation to Makefile

  - 0.5.0.0 (2017-02-06)
      * Add a `slideLevel` option & autodetect it.  This changes the way `patat`
        splits slides.  For more information, see the `README` or the `man` page.
        If you just want to get the old behavior back, just add:

              ---
              patat:
                slideLevel: 1
              ...

          To the top of your presentation.

      * Clear the screen when finished with the presentation.

  - 0.4.7.1 (2017-01-22)
      * Bump `directory-1.3` dependency
      * Bump `time-1.7` dependency

  - 0.4.7.0 (2017-01-20)
      * Bump `aeson-1.1` dependency
      * Parse YAML for settings using `yaml` instead of pandoc
      * Clarify watch & autoAdvance combination in documentation.

  - 0.4.6.0 (2016-12-28)
      * Redraw the screen on unknown commands to prevent accidental typing from
        showing up.
      * Make the cursor invisible during the presentation.
      * Move the footer down one more line to gain some screen real estate.

  - 0.4.5.0 (2016-12-05)
      * Render the date in a locale-independent manner (patch by Daniel
        Shahaf).

  - 0.4.4.0 (2016-12-03)
      * Force the use of UTF-8 when generating the man page.

  - 0.4.3.0 (2016-12-02)
      * Use `SOURCE_DATE_EPOCH` if it is present instead of getting the date from
        `git log`.

  - 0.4.2.0 (2016-12-01)
      * Fix issues with man page generation on Travis.

  - 0.4.1.0 (2016-12-01)
      * Fix compatibility with `pandoc-1.18` and `pandoc-1.19`.
      * Add a man page.

  - 0.4.0.0 (2016-11-15)
      * Add configurable auto advancing.
      * Support fragmented slides.

  - 0.3.3.0 (2016-10-31)
      * Add a `--version` flag.
      * Add support for `pandoc-1.18` which includes a new `LineBlock` element.

  - 0.3.2.0 (2016-10-20)
      * Keep running even if errors are encountered during reload.

  - 0.3.1.0 (2016-10-18)
      * Fix compilation with `lts-6.22`.

  - 0.3.0.0 (2016-10-17)
      * Add syntax highlighting support.
      * Fixed slide clipping after reload.

  - 0.2.0.0 (2016-10-13)
      * Add theming support.
      * Fix links display.
      * Add support for wrapping.
      * Allow org mode as input format.

  - 0.1.0.0 (2016-10-02)
      * Upload first version from hotel wifi in Kalaw.
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  ansi-wl-pprint: ! '>=0.6 && <0.7'
  base: ! '>=4.6 && <5'
  time: ! '>=1.6 && <1.10'
  base64-bytestring: ! '>=1.0 && <1.1'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ==1.2.*
  filepath: ! '>=1.4 && <1.5'
  process: ! '>=1.6 && <1.7'
  network: ! '>=2.6'
  containers: ! '>=0.5 && <0.7'
  terminal-size: ! '>=0.3 && <0.4'
  ansi-terminal: ! '>=0.6 && <0.9'
  pandoc: ! '>=2.0.4 && <2.5'
  skylighting: ! '>=0.1 && <0.8'
  network-uri: ! '>=2.6'
  mtl: ==2.2.*
  colour: ! '>=2.3 && <2.4'
  optparse-applicative: ! '>=0.12 && <0.15'
  aeson: ! '>=0.9 && <1.5'
  yaml: ! '>=0.8 && <0.12'
  directory: ! '>=1.2 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.4.0.0
- 0.4.2.0
- 0.4.3.0
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.4.7.0
- 0.4.7.1
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.6.0.0
- 0.6.1.0
- 0.6.1.1
- 0.7.0.0
- 0.7.2.0
- 0.8.0.0
- 0.8.1.1
- 0.8.1.2
- 0.8.1.3
- 0.8.2.0
author: Jasper Van der Jeugt <m@jaspervdj.be>
latest: 0.8.2.0
description-type: markdown
description: |
  patat
  =====

  [![Build Status](https://img.shields.io/circleci/project/github/jaspervdj/patat.svg)](https://circleci.com/gh/jaspervdj/patat) [![Hackage](https://img.shields.io/hackage/v/patat.svg)](https://hackage.haskell.org/package/patat) [![GitHub tag](https://img.shields.io/github/tag/jaspervdj/patat.svg)]()

  `patat` (**P**resentations **A**top **T**he **A**NSI **T**erminal) is a small
  tool that allows you to show presentations using only an ANSI terminal.  It does
  not require `ncurses`.

  Features:

  - Leverages the great [Pandoc] library to support many input formats including
    [Literate Haskell].
  - Supports [smart slide splitting](#input-format).
  - Slides can be split up into [multiple fragments](#fragmented-slides)
  - There is a [live reload](#running) mode.
  - [Theming](#theming) support including 24-bit RGB.
  - [Auto advancing](#auto-advancing) with configurable delay.
  - Optionally [re-wrapping](#line-wrapping) text to terminal width with proper
    indentation.
  - Syntax highlighting for nearly one hundred languages generated from [Kate]
    syntax files.
  - Experimental [images](#images) support.
  - Written in [Haskell].

  ![screenshot](extra/screenshot.png?raw=true)

  [Kate]: https://kate-editor.org/
  [Haskell]: http://haskell.org/
  [Pandoc]: http://pandoc.org/

  Table of Contents
  -----------------

  -   [Table of Contents](#table-of-contents)
  -   [Installation](#installation)
      -   [Pre-built-packages](#pre-built-packages)
      -   [From source](#from-source)
  -   [Running](#running)
  -   [Options](#options)
  -   [Controls](#controls)
  -   [Input format](#input-format)
  -   [Configuration](#configuration)
      -   [Line wrapping](#line-wrapping)
      -   [Auto advancing](#auto-advancing)
      -   [Advanced slide splitting](#advanced-slide-splitting)
      -   [Fragmented slides](#fragmented-slides)
      -   [Theming](#theming)
      -   [Syntax Highlighting](#syntax-highlighting)
      -   [Pandoc Extensions](#pandoc-extensions)
      -   [Images](#images)
  -   [Trivia](#trivia)

  Installation
  ------------

  ### Pre-built-packages

  - Archlinux: <https://aur.archlinux.org/packages/patat-bin>
  - Debian: <https://packages.debian.org/unstable/patat>
  - Ubuntu: <https://packages.ubuntu.com/artful/patat>
  - openSUSE: <https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat>

  You can also find generic linux binaries here:
  <https://github.com/jaspervdj/patat/releases>.

  ### From source

  Installation from source is very easy.  You can build from source using `stack
  install` or `cabal install`.  `patat` is also available from [Hackage].

  [Hackage]: https://hackage.haskell.org/package/patat

  For people unfamiliar with the Haskell ecosystem, this means you can do either
  of the following:

  #### Using stack

  1. Install [stack] for your platform.
  2. Clone this repository.
  3. Run `stack setup` (if you're running stack for the first time) and
     `stack install`.
  4. Make sure `$HOME/.local/bin` is in your `$PATH`.

  [stack]: https://docs.haskellstack.org/en/stable/README/

  #### Using cabal

  1. Install [cabal] for your platform.
  2. Run `cabal install patat`.
  3. Make sure `$HOME/.cabal/bin` is in your `$PATH`.

  [cabal]: https://www.haskell.org/cabal/

  Running
  -------

  `patat [*options*] file`

  Options
  -------

  `-w`, `--watch`

  :   If you provide the `--watch` flag, `patat` will watch the presentation file
      for changes and reload automatically.  This is very useful when you are
      writing the presentation.

  `-f`, `--force`

  :   Run the presentation even if the terminal claims it does not support ANSI
      features.

  `-d`, `--dump`

  :   Just dump all the slides to stdout.  This is useful for debugging.

  `--version`

  :   Display version information.

  Controls
  --------

  - **Next slide**: `space`, `enter`, `l`, `→`, `PageDown`
  - **Previous slide**: `backspace`, `h`, `←`, `PageUp`
  - **Go forward 10 slides**: `j`, `↓`
  - **Go backward 10 slides**: `k`, `↑`
  - **First slide**: `0`
  - **Last slide**: `G`
  - **Reload file**: `r`
  - **Quit**: `q`

  The `r` key is very useful since it allows you to preview your slides while you
  are writing them.  You can also use this to fix artifacts when the terminal is
  resized.

  Input format
  ------------

  The input format can be anything that Pandoc supports.  Plain markdown is
  usually the most simple solution:

  ```markdown
  ---
  title: This is my presentation
  author: Jane Doe
  ...

  # This is a slide

  Slide contents.  Yay.

  ---

  # Important title

  Things I like:

  - Markdown
  - Haskell
  - Pandoc
  ```

  Horizontal rulers (`---`) are used to split slides.

  However, if you prefer not use these since they are a bit intrusive in the
  markdown, you can also start every slide with a header.  In that case, the file
  should not contain a single horizontal ruler.

  `patat` will pick the most deeply nested header (e.g. `h2`) as the marker for a
  new slide.  Headers _above_ the most deeply nested header (e.g. `h1`) will turn
  into title slides, which are displayed as as a slide containing only the
  centered title.

  This means the following document is equivalent to the one we saw before:

  ```markdown
  ---
  title: This is my presentation
  author: Jane Doe
  ...

  # This is a slide

  Slide contents.  Yay.

  # Important title

  Things I like:

  - Markdown
  - Haskell
  - Pandoc
  ```

  And that following document contains three slides: a title slide, followed by
  two content slides.

  ```markdown
  ---
  title: This is my presentation
  author: Jane Doe
  ...

  # Chapter 1

  ## This is a slide

  Slide contents.  Yay.

  ## Another slide

  Things I like:

  - Markdown
  - Haskell
  - Pandoc
  ```

  For more information, see [Advanced slide splitting](#advanced-slide-splitting).

  Patat supports comments which can be used as speaker notes.

  ```markdown
  ---
  title: This is my presentation
  author: Jane Doe
  ...

  # Chapter 1

  <!--
  Note: I should not bore the audience with my thoughts on powerpoint but
  just get straight to the point.
  -->

  Slide contents.  Yay.

  <!-- TODO: Finish the rest of the presentation. -->
  ```

  Configuration
  -------------

  `patat` is fairly configurable.  The configuration is done using [YAML].  There
  are two places where you can put your configuration:

  1. In the presentation file itself, using the [Pandoc metadata header].
  2. In `$HOME/.patat.yaml`

  [YAML]: http://yaml.org/
  [Pandoc metadata header]: http://pandoc.org/MANUAL.html#extension-yaml_metadata_block

  For example, we set an option `key` to `val` by using the following file:

  ```markdown
  ---
  title: Presentation with options
  author: John Doe
  patat:
      key: val
  ...

  Hello world.
  ```

  Or we can use a normal presentation and have the following `$HOME/.patat.yaml`:

      key: val

  ### Line wrapping

  Line wrapping can be enabled by setting `wrap: true` in the configuration.  This
  will re-wrap all lines to fit the terminal width better.

  ### Margins

  Margins can be enabled by setting a `margins` entry in the configuration:

  ```markdown
  ---
  title: Presentation with margins
  author: John Doe
  patat:
      wrap: true
      margins:
          left: 10
          right: 10
  ...

  Lorem ipsum dolor sit amet, ...
  ```

  This example configuration will generate slides with a margin of 10 characters on the left,
  and break lines 10 characters before they reach the end of the terminal's width.

  It is recommended to enable [line wrapping](#line-wrapping) along with this feature.

  ### Auto advancing

  By setting `autoAdvanceDelay` to a number of seconds, `patat` will automatically
  advance to the next slide.

  ```markdown
  ---
  title: Auto-advance, yes please
  author: John Doe
  patat:
      autoAdvanceDelay: 2
  ...

  Hello World!

  ---

  This slide will be shown two seconds after the presentation starts.
  ```

  Note that changes to `autoAdvanceDelay` are not picked up automatically if you
  are running `patat --watch`.  This requires restarting `patat`.

  ### Advanced slide splitting

  You can control the way slide splitting works by setting the `slideLevel`
  variable.  This variable defaults to the least header that occurs before a
  non-header, but it can also be explicitly defined.  For example, in the
  following document, the `slideLevel` defaults to **2**:

  ```markdown
  # This is a slide

  ## This is a nested header

  This is some content
  ```

  With `slideLevel` 2, the `h1` will turn into a "title slide", and the `h2` will
  be displayed at the top of the second slide.  We can customize this by setting
  `slideLevel` manually:

  ```markdown
  ---
  patat:
    slideLevel: 1
  ...

  # This is a slide

  ## This is a nested header

  This is some content
  ```

  Now, we will only see one slide, which contains a nested header.

  ### Fragmented slides

  By default, slides are always displayed "all at once".  If you want to display
  them fragment by fragment, there are two ways to do that.  The most common
  case is that lists should be displayed incrementally.

  This can be configured by settings `incrementalLists` to `true` in the metadata
  block:

  ```markdown
  ---
  title: Presentation with incremental lists
  author: John Doe
  patat:
      incrementalLists: true
  ...

  - This list
  - is displayed
  - item by item
  ```

  Setting `incrementalLists` works on _all_ lists in the presentation.  To flip
  the setting for a specific list, wrap it in a block quote.  This will make the
  list incremental if `incrementalLists` is not set, and it will display the list
  all at once if `incrementalLists` is set to `true`.

  This example contains a sublist which is also displayed incrementally, and then
  a sublist which is displayed all at once (by merit of the block quote).

  ```markdown
  ---
  title: Presentation with incremental lists
  author: John Doe
  patat:
      incrementalLists: true
  ...

  - This list
  - is displayed

      * item
      * by item

  - Or sometimes

      > * all at
      > * once
  ```

  Another way to break up slides is to use a pagraph only containing three dots
  separated by spaces.  For example, this slide has two pauses:

  ```markdown
  Legen

  . . .

  wait for it

  . . .

  Dary!
  ```

  ### Theming

  Colors and other properties can also be changed using this configuration.  For
  example, we can have:

  ```markdown
  ---
  author: 'Jasper Van der Jeugt'
  title: 'This is a test'
  patat:
      wrap: true
      theme:
          emph: [vividBlue, onVividBlack, italic]
          strong: [bold]
          imageTarget: [onDullWhite, vividRed]
  ...

  # This is a presentation

  This is _emph_ text.

  ![Hello](foo.png)
  ```

  The properties that can be given a list of styles are:

  `blockQuote`, `borders`, `bulletList`, `codeBlock`, `code`, `definitionList`,
  `definitionTerm`, `emph`, `header`, `imageTarget`, `imageText`, `linkTarget`,
  `linkText`, `math`, `orderedList`, `quoted`, `strikeout`, `strong`,
  `tableHeader`, `tableSeparator`

  The accepted styles are:

  `bold`, `italic`, `dullBlack`, `dullBlue`, `dullCyan`, `dullGreen`,
  `dullMagenta`, `dullRed`, `dullWhite`, `dullYellow`, `onDullBlack`,
  `onDullBlue`, `onDullCyan`, `onDullGreen`, `onDullMagenta`, `onDullRed`,
  `onDullWhite`, `onDullYellow`, `onVividBlack`, `onVividBlue`, `onVividCyan`,
  `onVividGreen`, `onVividMagenta`, `onVividRed`, `onVividWhite`, `onVividYellow`,
  `underline`, `vividBlack`, `vividBlue`, `vividCyan`, `vividGreen`,
  `vividMagenta`, `vividRed`, `vividWhite`, `vividYellow`

  Also accepted are styles of the form `rgb#RrGgBb` and `onRgb#RrGgBb`, where `Rr`
  `Gg` and `Bb` are hexadecimal bytes (e.g. `rgb#f08000` for an orange foreground,
  and `onRgb#101060` for a deep purple background).  Naturally, your terminal
  needs to support 24-bit RGB for this to work.  When creating portable
  presentations, it might be better to stick with the named colours listed above.

  ### Syntax Highlighting

  As part of theming, syntax highlighting is also configurable.  This can be
  configured like this:

  ```markdown
  ---
  patat:
    theme:
      syntaxHighlighting:
        decVal: [bold, onDullRed]
  ...

  ...
  ```

  `decVal` refers to "decimal values".  This is known as a "token type".  For a
  full list of token types, see [this list] -- the names are derived from there in
  an obvious way.

  [this list]: https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType

  ### Pandoc Extensions

  Pandoc comes with a fair number of extensions on top of markdown, listed [here](https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html).

  `patat` enables a number of them by default, but this is also customizable.

  In order to enable an additional extensions, e.g. `autolink_bare_uris`, add it
  to the `pandocExtensions` field in the YAML metadata:

  ```markdown
  ---
  patat:
    pandocExtensions:
      - patat_extensions
      - autolink_bare_uris
  ...

  Document content...
  ```

  The `patat_extensions` in the above snippet refers to the default set of
  extensions enabled by `patat`.  If you want to disable those and only use a
  select few extensions, simply leave it out and choose your own:

  ```markdown
  ---
  patat:
    pandocExtensions:
      - autolink_bare_uris
      - emoji
  ...

  ...

  Document content...
  ```

  If you don't want to enable any extensions, simply set `pandocExtensions` to the
  empty list `[]`.


  ### Images

  `patat-0.8.0.0` and newer include images support for some terminal emulators.

  ```markdown
  ---
  patat:
    images:
      backend: auto
  ...

  # A slide with only an image.

  ![](matterhorn.jpg)
  ```

  If `images` is enabled (not by default), `patat` will draw slides that consist
  only of a single image just by drawing the image, centered and resized to fit
  the terminal window.

  `patat` supports the following image drawing backends:

  -   `backend: iterm2`: uses [iTerm2](https://iterm2.com/)'s special escape
      sequence to render the image.  This even works with animated GIFs!

  -   `backend: w3m`: uses the `w3mimgdisplay` executable to draw directly onto
      the window.  This has been tested in `urxvt` and `xterm`, but is known to
      produce weird results in `tmux`.

      If `w3mimgdisplay` is in a non-standard location, you can specify that using
      `path`:

      ```yaml
      backend: 'w3m'
      path: '/home/jasper/.local/bin/w3mimgdisplay'
      ```

  Trivia
  ------

  _"Patat"_ is the Flemish word for a simple potato.  Dutch people also use it to
  refer to French Fries but I don't really do that -- in Belgium we just call
  fries _"Frieten"_.

  The idea of `patat` is largely based upon [MDP] which is in turn based upon
  [VTMC].  I wanted to write a clone using Pandoc because I ran into a markdown
  parsing bug in MDP which I could not work around.  A second reason to do a
  Pandoc-based tool was that I would be able to use [Literate Haskell] as well.
  Lastly, I also prefer not to install Node.js on my machine if I can avoid it.

  [MDP]: https://github.com/visit1985/mdp
  [VTMC]: https://github.com/jclulow/vtmc
  [Literate Haskell]: https://wiki.haskell.org/Literate_programming
license-name: GPL-2.0-only
