homepage: https://github.com/mtesseract/packer-messagepack#readme
changelog-type: ''
hash: 26b6dd0a2ca5d31e6d0d3ee0e4ec808b95341af391213e7b8d5452a671754785
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  hedgehog: -any
  packer: ! '>=0.1.9 && <0.2'
  containers: -any
  packer-messagepack: -any
maintainer: mtesseract@silverratio.net
synopsis: MessagePack Serialization an Deserialization for Packer
changelog: ''
basic-deps:
  bytestring: -any
  unliftio: -any
  base: ! '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  packer: ! '>=0.1.9 && <0.2'
  containers: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Moritz Schulte
latest: 0.2.0.0
description-type: markdown
description: ! "# packer-messagepack [![Hackage version](https://img.shields.io/hackage/v/packer-messagepack.svg?label=Hackage)](https://hackage.haskell.org/package/packer-messagepack)
  [![Build Status](https://travis-ci.org/mtesseract/packer-messagepack.svg?branch=master)](https://travis-ci.org/mtesseract/packer-messagepack)\n\n###
  About\n\nThis package provides [MessagePack](http://msgpack.org/index.html)\nserialization
  / deserialization built on top of\n[Packer](https://hackage.haskell.org/package/packer).\n\nMore
  precisely, this package exposes the following:\n\n- the type class `ToMsgPack`:\n\n```haskell\nclass
  ToMsgPack a where\n  toMsgPack :: a -> Packing ()\n  msgPackSize :: MonadThrow m
  => a -> m Int64\n```\n\n- the type class `FromMsgPack`:\n\n```haskell\nclass FromMsgPack
  a where\n  fromMsgPack :: Unpacking a\n```\n\n- the type `Object`:\n\n```haskell\ndata
  Object = ObjectString Text\n            | ObjectBinary ByteString\n            |
  ObjectUInt Word64\n            | ObjectInt Int64\n            | ObjectBool Bool\n
  \           | ObjectFloat32 Float\n            | ObjectFloat64 Double\n            |
  ObjectArray [Object]\n            | ObjectMap (Map Object Object)\n            |
  ObjectNil\n```\n\n- Instances for the following types:\n\n  - Bool\n  - Int\n  -
  Word8\n  - Word16\n  - Word32\n  - Word64\n  - Int8\n  - Int16\n  - Int32\n  - Int64\n
  \ - Float\n  - Double\n  - ByteString\n  - Text\n  - Object\n\n  - Furthermore there
  are instances for\n\n    - lists `[a]`, if the type `a` is an instance of `FromMsgPack`\n
  \     resp. `ToMsgPack`.\n\n    - maps `Map k v` if the types `k` and `v` are instances
  of\n      `FromMsgPack` resp. `ToMsgPack`.\n\n### Usage\n\nFor example, to serialize
  a number into a MessagePack encoded\nByteString, use:\n\n```haskell\nlet n = 2342
  :: Int\nsize <- msgPackSize n\nlet bytes = runPacking size (toMsgPack n)\n```\n\nTo
  deserialize a `ByteString` you can use `fromMsgPack` specialized to\n`fromMsgPack
  :: Unpacking Object` in case the type of the next\nMessagePack object is not known.
  For example:\n\n```haskell\nlet obj = runUnpacking fromMsgPack bytes :: Object\n```\n\nOn
  the other hand, if a specific type is expected, `fromMsgPack` can\nbe used specialized
  to the respective type as follows:\n\n```haskell\nlet n' = runUnpacking fromMsgPack
  bytes :: Int\n```\n\nNote that a MessagePack signed (resp. unsigned) integer can
  be as big\nas an `Int64` (resp. `Word64`). Therefore, if you want to make sure\nthat
  there are no overflow problems, use `Int64` (resp. `Word64`)\nduring deserialization.
  In case of overflows exceptions will be\nthrown. For example:\n\n```haskell\nlet
  n = (2^62) :: Int64\nsize <- msgPackSize n\nlet bytes = runPacking size (toMsgPack
  n)\n    n' = runUnpacking fromMsgPack bytes :: Int32\n```\n\nBecause the number
  `2^62` exceeds the boundaries of `Int32`, `n'` will\ndenote a pure exception:\n\n```haskell\nMsgPackDeserializationFailure
  \"Integer Overflow\"\n```\n\n### Stackage\n\nCurrently, [Packer](https://hackage.haskell.org/package/packer)
  is not\nincluded in [Stackage](https://www.stackage.org/) yet. Therefore, if\nyou
  would like to use this package together with Stackage, you could\npull them in via
  extra-deps. For example:\n\n```\nextra-deps: [packer-VERSION, packer-messagepack-VERSION]\n```\n"
license-name: BSD-3-Clause
