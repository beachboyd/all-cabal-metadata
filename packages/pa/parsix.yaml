homepage: https://github.com/ollef/parsix
changelog-type: markdown
hash: 34ebecc19c917a6582b93e723c5dc16560f63813daa004c23d7527077af7c3af
test-bench-deps:
  base: -any
  text: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
  parsix: -any
maintainer: fredriksson.olle@gmail.com
synopsis: Parser combinators with slicing, error recovery, and syntax highlighting
changelog: |
  # 0.2.2.0

  - Fix bug in `lookAhead`, where lookaheads would commit the parser

  # 0.2.1.0

  - Add `Monoid` and `Semigroup` instances to `Position`

  # 0.2.0.0

  - Make `withRecovery` rewind before running recovery

  # 0.1.0.4

  - Add `Generic` instances to `Span` and `Position`

  # 0.1.0.3

  - Add `prettySpan` function

  # 0.1.0.2

  - Remove unused `bytestring` dependency
  - Add lower bounds for all dependencies

  # 0.1.0.1

  - Change module re-export method to get Haddock to generate docs for `Text.Parsix`

  # 0.1.0.0

  - Initial release
basic-deps:
  fingertree: ! '>=0.1.3'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2'
  containers: ! '>=0.5.7'
  parsers: ! '>=0.12.7'
  mtl: ! '>=2.2.1'
  prettyprinter: ! '>=1.1.1'
  transformers: ! '>=0.5.2'
  prettyprinter-ansi-terminal: ! '>=1.1.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
author: Olle Fredriksson
latest: 0.2.2.0
description-type: markdown
description: |
  # parsix [![Build Status](https://travis-ci.org/ollef/parsix.svg?branch=master)](https://travis-ci.org/ollef/parsix) [![Hackage](https://img.shields.io/hackage/v/parsix.svg)](https://hackage.haskell.org/package/parsix)


  Adventures in parser combinators.

  This is basically a [Trifecta](https://github.com/ekmett/trifecta) clone, i.e. an implementation of the [parsers](https://github.com/ekmett/parsers/) interface, with the following differences:

  * Add error recovery (see `withRecovery`) based on [Megaparsec](https://github.com/mrkkrp/megaparsec)'s.
  * Use the `text` library instead of `bytestring` for input strings. This means that the library interfaces better with the rest of the Haskell library ecosystem and that slicing (see `sliced`) returns `Text`.
  * Use the [prettyprinter](https://github.com/quchen/prettyprinter) library for pretty-printing.
  * Actually implement the highlighting interface from `parsers`. This means that error messages that show input code are syntax highlighted.
license-name: BSD-3-Clause
