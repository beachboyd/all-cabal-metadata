homepage: https://github.com/LaurentRDC/pandoc-plot#readme
changelog-type: markdown
hash: b9f88fd4d5825935c91367f789846d57c881639bb692b0479326f02ed4998321
test-bench-deps:
  base: '>=4.11 && <5'
  data-default-class: '>=0.1.2'
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  criterion: '>=1.0 && <1.6'
  pandoc-types: '>=1.20 && <=2'
  pandoc-plot: -any
  mtl: '>=2.2 && <2.3'
  tasty-hunit: -any
  temporary: -any
  tasty: -any
  template-haskell: '>2.7 && <3'
  hspec-expectations: -any
  directory: -any
maintainer: Laurent P. René de Cotret
synopsis: A Pandoc filter to include figures generated from code blocks using your
  plotting toolkit of choice.
changelog: "# Change log\r\n\r\npandoc-plot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\r\n\r\nRelease
  0.5.0.0\r\n---------------\r\n\r\n* The `pandoc-plot` executable will now process
  documents in parallel. This should dramatically speed up processing of large documents
  with lots of figures. \r\nThis happens automatically through the function `plotTransform`.\r\n*
  Added a benchmarking suite.\r\n* Added `defaultConfiguration` so that people don't
  have to install the `data-default` package to get access to default configuration
  values. \r\n* Added a check for the `matplotlib` toolkit, preventing users from
  using `matplotlib.pyplot.show` in figures. This would halt `pandoc-plot`.\r\n\r\nRelease
  0.4.0.1\r\n---------------\r\n\r\n* Fixed an issue where the `pandoc-plot` executable
  could not be built outside of its git repository.\r\n\r\nRelease 0.4.0.0\r\n---------------\r\n\r\n*
  Updated documentation.\r\n* Added a `--full-version` flag to the executable, which
  includes which version of pandoc/pandoc-types was used, as well as the git revision.\r\n*
  Added the `clean` command to the executable. This can be used to clean-up output
  files produced by pandoc-plot.\r\n* Changed the flag `--write-example-config` to
  the command `write-example-config`.\r\n* Added the top-level function `cleanOutputDir`
  to clean output of pandoc-plot. This is only accessible if `pandoc-plot` is used
  as a library.\r\n* Added a distinction between failure to render a figure because
  of a mistake, and failing to render a figure because the toolkit is not installed.
  `pandoc-plot` will give better error messages in the latter case.\r\n\r\nRelease
  0.3.0.0\r\n---------------\r\n\r\n* Added more examples.\r\n* Added MacOS binaries
  built via Azure pipelines.\r\n* BREAKING CHANGE: Parsing captions based on source
  file was not working. Captions format can be specified in the configuration file.
  This unfortunately changes the type signature of a few high-level functions.\r\n\r\nRelease
  0.2.2.0\r\n---------------\r\n\r\n* Fixed an issue where paths with spaces would
  not work (issue #2).\r\n* Added Linux binaries built via Azure pipelines.\r\n\r\nRelease
  0.2.1.0\r\n---------------\r\n\r\n* Improved documentation.\r\n\r\nRelease 0.2.0.0\r\n---------------\r\n\r\n*
  Added support for gnuplot.\r\n* Added more tests for all toolkits.\r\n\r\n* Fixed
  an issue where the package could not be installed because a source file was not
  included in the cabal file.\r\n\r\nRelease 0.1.0.0\r\n---------------\r\n\r\n* Initial
  release"
basic-deps:
  shakespeare: '>=2.0 && <3'
  bytestring: -any
  base: '>=4.11 && <5'
  data-default-class: '>=0.1.2 && <0.2'
  open-browser: '>=0.2.1.0'
  text: ==1.*
  filepath: '>=1.4 && <2'
  async: '>=2 && <3'
  turtle: '>=1.5 && <2'
  pandoc-types: '>=1.20 && <2'
  containers: -any
  pandoc: '>=2.8 && <3'
  typed-process: '>=0.2.1 && <1'
  pandoc-plot: -any
  mtl: '>=2.2 && <2.3'
  githash: '>=0.1.3.0 && <1'
  hashable: '>=1 && <2'
  temporary: -any
  optparse-applicative: '>=0.14 && <1'
  deepseq: -any
  template-haskell: '>2.7 && <3'
  yaml: '>=0.8 && <1'
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.1
- 0.5.0.0
author: Laurent P. René de Cotret
latest: 0.5.0.0
description-type: markdown
description: "# pandoc-plot \r\n\r\n## A Pandoc filter to generate figures from code
  blocks in documents\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-plot.svg)](http://hackage.haskell.org/package/pandoc-plot)
  [![Stackage version (nightly)](http://stackage.org/package/pandoc-plot/badge/nightly)](http://stackage.org/nightly/package/pandoc-plot)
  [![Build status](https://ci.appveyor.com/api/projects/status/mmgiuk52j356e6jp?svg=true)](https://ci.appveyor.com/project/LaurentRDC/pandoc-plot)
  [![Build Status](https://dev.azure.com/laurentdecotret/pandoc-plot/_apis/build/status/LaurentRDC.pandoc-plot?branchName=master)](https://dev.azure.com/laurentdecotret/pandoc-plot/_build/latest?definitionId=5&branchName=master)
  ![GitHub](https://img.shields.io/github/license/LaurentRDC/pandoc-plot) [![Conda
  Version](https://img.shields.io/conda/vn/conda-forge/pandoc-plot.svg)](https://anaconda.org/conda-forge/pandoc-plot)\r\n\r\n`pandoc-plot`
  turns code blocks present in your documents (Markdown, LaTeX, etc.) into embedded
  figures, using your plotting toolkit of choice, including Matplotlib, ggplot2, MATLAB,
  Mathematica, and more.\r\n\r\n## Table of content\r\n\r\n* [Overview](#overview)\r\n*
  [Supported toolkits](#supported-toolkits)\r\n* [Features](#features)\r\n    * [Captions](#captions)\r\n
  \   * [Link to source code](#link-to-source-code)\r\n    * [Preamble scripts](#preamble-scripts)\r\n
  \   * [Performance](#performance)\r\n    * [Compatibility with pandoc-crossref](#compatibility-with-pandoc-crossref)\r\n*
  [Configuration](#configuration)\r\n    * [Toolkit-specific options](#toolkit-specific-options)\r\n*
  [Detailed usage](#detailed-usage)\r\n    * [As a filter](#as-a-filter)\r\n    *
  [Cleaning output](#cleaning-output)\r\n    * [Configuration template](#configuration-template)\r\n
  \   * [As a Haskell library](#as-a-haskell-library)\r\n        * [Usage with Hakyll](#usage-with-hakyll)\r\n*
  [Installation](#installation)\r\n* [Warning](#warning)\r\n\r\n## Overview\r\n\r\nThis
  program is a [Pandoc](https://pandoc.org/) filter. It can therefore be used in the
  middle of conversion from input format to output format, replacing code blocks with
  figures.\r\n\r\nThe filter recognizes code blocks with classes that match plotting
  toolkits. For example, using the `matplotlib` toolkit:\r\n\r\n~~~markdown\r\n# My
  document\r\n\r\nThis is a paragraph.\r\n\r\n```{.matplotlib}\r\nimport matplotlib.pyplot
  as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4], [1,2,3,4,5])\r\nplt.title('This
  is an example figure')\r\n```\r\n~~~\r\n\r\nPutting the above in `input.md`, we
  can then generate the plot and embed it in an HTML page:\r\n\r\n```bash\r\npandoc
  --filter pandoc-plot input.md --output output.html\r\n```\r\n\r\n*Note that pandoc-plot
  only works with pandoc >= 2.8 because of some breaking changes in pandoc's API.*\r\n\r\n##
  Supported toolkits\r\n\r\n`pandoc-plot` currently supports the following plotting
  toolkits (**installed separately**):\r\n\r\n* `matplotlib`: plots using the [matplotlib](https://matplotlib.org/)
  Python library;\r\n* `plotly_python` : plots using the [plotly](https://plot.ly/python/)
  Python library;\r\n* `matlabplot`: plots using [MATLAB](https://www.mathworks.com/);\r\n*
  `mathplot` : plots using [Mathematica](https://www.wolfram.com/mathematica/);\r\n*
  `octaveplot`: plots using [GNU Octave](https://www.gnu.org/software/octave/);\r\n*
  `ggplot2`: plots using [ggplot2](https://ggplot2.tidyverse.org/);\r\n* `gnuplot`:
  plots using [gnuplot](http://www.gnuplot.info/);\r\n\r\n\r\nTo know which toolkits
  are useable on *your machine* (and which ones are not available), you can check
  with the `--toolkits/-t` flag:\r\n\r\n```bash\r\npandoc-plot --toolkits\r\n```\r\n\r\n**Wish
  your plotting toolkit of choice was available? Please [raise an issue](https://github.com/LaurentRDC/pandoc-plot/issues)!**\r\n\r\n##
  Features\r\n\r\n### Captions\r\n\r\nYou can also specify a caption for your image.
  This is done using the optional `caption` parameter.\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.matlabplot
  caption=\"This is a simple figure with a **Markdown** caption\"}\r\nx  = 0: .1 :
  2*pi;\r\ny1 = cos(x);\r\ny2 = sin(x);\r\n\r\nfigure\r\nplot(x, y1, 'b', x, y2, 'r-.',
  'LineWidth', 2)\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[caption=This
  is a simple figure with a caption]{matlabplot}\r\nx  = 0: .1 : 2*pi;\r\ny1 = cos(x);\r\ny2
  = sin(x);\r\n\r\nfigure\r\nplot(x, y1, 'b', x, y2, 'r-.', 'LineWidth', 2)\r\n\\end{minted}\r\n```\r\n\r\nCaption
  formatting unfortunately cannot be determined automatically. To specify a caption
  format (e.g. \"markdown\", \"LaTeX\", etc.), see [Configuration](#configuration).\r\n\r\n###
  Link to source code\r\n\r\nIn case of an output format that supports links (e.g.
  HTML), the embedded image generated by `pandoc-plot` can show a link to the source
  code which was used to generate the file. Therefore, other people can see what code
  was used to create your figures. \r\n\r\nYou can turn this on via the `source=true`
  key:\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.mathplot source=true}\r\n...\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[source=true]{mathplot}\r\n...\r\n\\end{minted}\r\n```\r\n\r\nor
  via a [configuration file](#Configuration).\r\n\r\n### Preamble scripts\r\n\r\nIf
  you find yourself always repeating some steps, inclusion of scripts is possible
  using the `preamble` parameter. For example, if you want all Matplotlib plots to
  have the [`ggplot`](https://matplotlib.org/tutorials/introductory/customizing.html#sphx-glr-tutorials-introductory-customizing-py)
  style, you can write a very short preamble `style.py` like so:\r\n\r\n```python\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n```\r\n\r\nand include it
  in your document as follows:\r\n\r\n~~~markdown\r\n```{.matplotlib preamble=style.py}\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nWhich
  is equivalent to writing the following markdown:\r\n\r\n~~~markdown\r\n```{.matplotlib}\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nThe
  equivalent LaTeX usage is as follows:\r\n\r\n```latex\r\n\\begin{minted}[include=style.py]{matplotlib}\r\n\r\n\\end{minted}\r\n```\r\n\r\nThis
  `preamble` parameter is perfect for longer documents with many plots. Simply define
  the style you want in a separate script! You can also import packages this way,
  or define functions you often use.\r\n\r\n### Performance\r\n\r\n`pandoc-plot` minimizes
  work, only generating figures if it absolutely must, i.e. if the content has changed.
  `pandoc-plot` will save the hash of the source code used to generate a figure in
  its filename. Before generating a figure, `pandoc-plot` will check it this figure
  already exists based on the hash of its source! This also means that there is no
  way to directly name figures.\r\n\r\nMoreover, starting with version 0.5.0.0, `pandoc-plot`
  takes advantage of multicore CPUs, rendering figures **in parallel**.\r\n\r\nTherefore,
  you can confidently run the filter on very large documents containing hundreds of
  figures, like a book or a thesis.\r\n\r\n### Compatibility with pandoc-crossref\r\n\r\n[`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref)
  is a pandoc filter that makes it effortless to cross-reference objects in Markdown
  documents. \r\n\r\nYou can use `pandoc-crossref` in conjunction with `pandoc-plot`
  for the ultimate figure-making pipeline. You can combine both in a figure like so:\r\n\r\n~~~markdown\r\n```{#fig:myexample
  .plotly_python caption=\"This is a caption\"}\r\n# Insert figure script here\r\n```\r\n\r\nAs
  you can see in @fig:myexample, ...\r\n~~~\r\n\r\nIf the above source is located
  in file `myfile.md`, you can render the figure and references by applying `pandoc-plot`
  **first**, and then `pandoc-crossref`. For example:\r\n\r\n```bash\r\npandoc --filter
  pandoc-plot --filter pandoc-crossref -i myfile.md -o myfile.html\r\n```\r\n\r\n##
  Configuration\r\n\r\nTo avoid repetition, `pandoc-plot` can be configured using
  simple YAML files. `pandoc-plot` will look for a `.pandoc-plot.yml` file in the
  current working directory. Here are **all** the possible parameters:\r\n\r\n```yaml\r\n#
  The following parameters affect all toolkits\r\ndirectory: plots/\r\nsource: false\r\ndpi:
  80\r\nformat: PNG\r\ncaption_format: markdown+tex_math_dollars\r\n\r\n# The possible
  parameters for the Matplotlib toolkit\r\nmatplotlib:\r\n  preamble: matplotlib.py\r\n
  \ tight_bbox: false\r\n  transparent: false\r\n  executable: python\r\n\r\n# The
  possible parameters for the MATLAB toolkit\r\nmatlabplot:\r\n  preamble: matlab.m\r\n
  \ executable: matlab\r\n\r\n# The possible parameters for the Plotly/Python toolkit\r\nplotly_python:\r\n
  \ preamble: plotly-python.py\r\n  executable: python\r\n\r\n# The possible parameters
  for the Mathematica toolkit\r\nmathplot:\r\n  preamble: mathematica.m\r\n  executable:
  math\r\n\r\n# The possible parameters for the GNU Octave toolkit\r\noctaveplot:\r\n
  \ preamble: octave.m\r\n  executable: octave\r\n\r\n# The possible parameters for
  the ggplot2 toolkit\r\nggplot2:\r\n  preamble: ggplot2.r\r\n  executable: Rscript\r\n\r\n#
  The possible parameters for the gnuplot toolkit\r\ngnuplot:\r\n  preamble: gnuplot.gp\r\n
  \ executable: gnuplot\r\n\r\n```\r\n\r\nA file like the above sets the **default**
  values; you can still override them in documents directly.\r\n\r\nUsing `pandoc-plot
  write-example-config` will write the default configuration to a file which you can
  then customize.\r\n\r\n### Executables\r\n\r\nThe `executable` parameter for all
  toolkits can be either the executable name (if it is present on the PATH), or the
  full path to the executable.\r\n\r\nExamples:\r\n\r\n```yaml\r\nmatplotlib:\r\n
  \ executable: python3\r\n```\r\n\r\n```yaml\r\nmatlabplot:\r\n  executable: \"C:\\Program
  Files\\Matlab\\R2019b\\bin\\matlab.exe\"\r\n```\r\n\r\n### Toolkit-specific options\r\n\r\n####
  Matplotlib\r\n\r\n* `tight_bbox` is a boolean that determines whether to use `bbox_inches=\"tight\"`
  or not when saving Matplotlib figures. For example, `tight_bbox: true`. See [here](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)
  for details.\r\n* `transparent` is a boolean that determines whether to make Matplotlib
  figure background transparent or not. This is useful, for example, for displaying
  a plot on top of a colored background on a web page. High-resolution figures are
  not affected. For example, `transparent: true`.\r\n\r\n## Detailed usage\r\n\r\n`pandoc-plot`
  is a command line executable with a few functions. You can take a look at the help
  using the `-h`/`--help` flag:\r\n\r\n```bash\r\n$ pandoc-plot --help\r\npandoc-plot
  - generate figures directly in documents using your plotting toolkit\r\nof choice.\r\n\r\nUsage:
  pandoc-plot.exe ([-v|--version] | [--full-version] | [-m|--manual] |   \r\n                       [-t|--toolkits])
  [COMMAND] [AST]\r\n  This pandoc filter generates plots from code blocks using a
  multitude of    \r\n  possible renderers. This allows to keep documentation and
  figures in perfect\r\n  synchronicity.\r\n\r\nAvailable options:\r\n  -v,--version
  \            Show version number and exit.\r\n  --full-version           Show full
  version information and exit.\r\n  -m,--manual              Open the manual page
  in the default web browser and\r\n                           exit.\r\n  -t,--toolkits
  \           Show information on toolkits and exit. Executables\r\n                           from
  the configuration file will be used, if a\r\n                           '.pandoc-plot.yml'
  file is in the current directory.\r\n  -h,--help                Show this help text\r\n\r\nAvailable
  commands:\r\n  clean                    Clean output directories where figures from
  FILE\r\n                           might be stored. WARNING: All files in those\r\n
  \                          directories will be deleted.\r\n  write-example-config
  \    Write example configuration to a file.\r\n\r\nMore information can be found
  via the manual (pandoc-plot --manual) or the repository README, located at\r\n    https://github.com/LaurentRDC/pandoc-plot\r\n```\r\n\r\n###
  As a filter\r\n\r\nThe most common use for `pandoc-plot` is as a pandoc filter,
  in which case it should be called without arguments. For example:\r\n\r\n```bash\r\npandoc
  --filter pandoc-plot -i input.md -o output.html\r\n```\r\n\r\nIf `pandoc-plot` fails
  to render a code block into a figure, the filtering will not stop. Your code blocks
  will stay unchanged.\r\n\r\nYou can chain other filters with it (e.g., [`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref))
  like so:\r\n\r\n```bash\r\npandoc --filter pandoc-plot --filter pandoc-crossref
  -i input.md -o output.html\r\n```\r\n\r\n### Cleaning output\r\n\r\nFigures produced
  by `pandoc-plot` can be placed in a few different locations. You can set a default
  location in the [Configuration](#configuration), but you can also re-direct specific
  figures in other directories if you use the `directory=...` argument in code blocks.
  These figures will build up over time. You can use the `clean` command to scan documents
  and delete the associated `pandoc-plot` output files. For example, to delete the
  figures generated from the `input.md` file:\r\n\r\n```bash\r\npandoc-plot clean
  input.md\r\n```\r\n\r\nThis sill remove all directories where a figure *could* have
  been placed. **WARNING**: all files will be removed.\r\n\r\n### Configuration template\r\n\r\nBecause
  `pandoc-plot` supports a few toolkits, there are a lot of configuration options.
  Don't start from scratch! The `write-example-config` command will create a file
  for you, which you can then modify:\r\n\r\n```bash\r\npandoc-plot write-example-config\r\n```\r\n\r\nYou
  will need to re-name the file to `.pandoc-ploy.yml` to be able to use it, so don't
  worry about overwriting your own configuration.\r\n\r\n### As a Haskell library\r\n\r\nTo
  include the functionality of `pandoc-plot` in a Haskell package, you can use the
  `makePlot` function (for single blocks) or `plotTransform` function (for entire
  documents). [Take a look at the documentation on Hackage](https://hackage.haskell.org/package/pandoc-plot).\r\n\r\n####
  Usage with Hakyll\r\n\r\nIn case you want to use the filter with your own Hakyll
  setup, you can use a transform function that works on entire documents:\r\n\r\n```haskell\r\nimport
  Text.Pandoc.Filter.Plot (plotTransform)\r\n\r\nimport Data.Default (def) -- From
  data-default package, for default configuration\r\nimport Hakyll\r\n\r\n-- Unsafe
  compiler is required because of the interaction\r\n-- in IO (i.e. running an external
  script).\r\nmakePlotPandocCompiler :: Compiler (Item String)\r\nmakePlotPandocCompiler
  = \r\n  pandocCompilerWithTransformM\r\n    defaultHakyllReaderOptions\r\n    defaultHakyllWriterOptions\r\n
  \   (unsafeCompiler . plotTransform def) -- default configuration\r\n```\r\n\r\n##
  Installation\r\n\r\n### Binaries and Installers\r\n\r\nWindows, Linux, and Mac OS
  binaries are available on the [GitHub release page](https://github.com/LaurentRDC/pandoc-plot/releases).
  There are also Windows installers.\r\n\r\n### conda\r\n\r\nLike `pandoc`, `pandoc-plot`
  is available as a package installable with [`conda`](https://docs.conda.io/en/latest/).
  [Click here to see the package page](https://anaconda.org/conda-forge/pandoc-plot).\r\n\r\nTo
  install in the current environment:\r\n\r\n```sh\r\nconda install -c conda-forge
  pandoc-plot\r\n```\r\n\r\n### From Hackage/Stackage\r\n\r\n`pandoc-plot` is available
  on [Hackage](http://hackage.haskell.org/package/pandoc-plot) and [Stackage](https://www.stackage.org/nightly/package/pandoc-plot).
  Using the [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n```bash\r\ncabal
  update\r\ncabal install pandoc-plot\r\n```\r\n\r\nor\r\n\r\n```bash\r\nstack update\r\nstack
  install pandoc-plot\r\n```\r\n\r\n### From source\r\n\r\nBuilding from source can
  be done using [`stack`](https://docs.haskellstack.org/en/stable/README/) or [`cabal`](https://www.haskell.org/cabal/):\r\n\r\n```bash\r\ngit
  clone https://github.com/LaurentRDC/pandoc-plot\r\ncd pandoc-plot\r\nstack install
  # Alternatively, `cabal install`\r\n```\r\n\r\n## Warning\r\n\r\nDo not run this
  filter on unknown documents. There is nothing in `pandoc-plot` that can stop a script
  from performing **evil actions**.\r\n"
license-name: GPL-2.0-only
