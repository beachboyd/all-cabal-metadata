homepage: https://github.com/LaurentRDC/pandoc-plot#readme
changelog-type: markdown
hash: e830d1b34e82b0b9ed49eb6f192f599bf8ea92425582f58781f2db9f5fdfee62
test-bench-deps:
  base: '>=4.11 && <5'
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  criterion: '>=1.0 && <2'
  pandoc-types: '>=1.20 && <=2'
  containers: -any
  pandoc-plot: -any
  tasty-hunit: -any
  tasty: -any
  template-haskell: '>2.7 && <3'
  hspec-expectations: -any
  directory: -any
maintainer: Laurent P. René de Cotret
synopsis: A Pandoc filter to include figures generated from code blocks using your
  plotting toolkit of choice.
changelog: "# Change log\r\n\r\npandoc-plot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\r\n\r\nRelease
  0.7.2.1\r\n---------------\r\n\r\n* Fixed an issue where the `pandoc` version was
  not parsed properly, giving rise to errors when running `pandoc-plot`.\r\n* Fixed
  an issue where logging errors were not always displayed.\r\n\r\nRelease 0.7.2.0\r\n---------------\r\n\r\n*
  Removed dependency on `open-browser` package.\r\n* Starting with this version, `pandoc`
  2.8 and 2.9 are **no longer supported** due to a breaking API change in `pandoc`
  2.10.\r\n* Executables are now built with GHC 8.10.1.\r\n\r\nRelease 0.7.1.0\r\n---------------\r\n\r\n*
  Better multi-threaded logging. Only one thread (the logging thread) performs IO
  on the log file. This prevents hang-ups when working on large documents. \r\n\r\nRelease
  0.7.0.0\r\n---------------\r\n\r\n* Added documentation on using `pandoc-plot` with
  LaTeX documents as well.\r\n* Added preliminary support for logging to `pandoc-plot`.
  You can turn on this feature in the configuration as follows:\r\n\r\n````yaml\r\nlogging:\r\n
  \   # Possible verbosity values: debug, error, warning, info, silent\r\n    # debug
  level shows all messages\r\n    # error level shows all but debug messages, etc.\r\n
  \   verbosity: info\r\n    \r\n    # OPTIONAL: log to file\r\n    # Remove line
  below to log to stderr\r\n    filepath: log.txt\r\n````\r\n\r\n* Removed dependencies
  `turtle`, `temporary`, `deepseq`, and `data-default-class`, resulting in improved
  build times by ~10%, and makes the executable smaller by 15-20%!\r\n\r\nRelease
  0.6.1.0\r\n---------------\r\n\r\n* Made the functions `availableToolkits` and `unavailableToolkits`
  public.\r\n* Minor documentation fixes.\r\n* Executables are now built with GHC
  8.8.3.\r\n\r\nRelease 0.6.0.0\r\n---------------\r\n\r\nNew toolkits:\r\n* Added
  support for the Plotly/R plotting library.\r\n* Added support for Graphviz.\r\n\r\nOther
  changes:\r\n* The determination of which figures to re-render or not has been improved.
  For example, changing the caption will not trigger a re-render of a figure anymore.\r\n*
  `pandoc-plot` will look for executables more thoroughly.\r\n* `pandoc-plot toolkits`
  will now show the exact executable that is being used, if possible.\r\n* Added a
  check when running the filter that the Pandoc version is at least 2.8. This is easier
  to understand that the default Pandoc warning on API incompatibility.\r\n* Added
  the ability to write the example configuration to an arbitrary file using `pandoc-plot
  write-example-config`.\r\n* Added the possibility to specify the configuration file
  via metadata. For example, in Markdown:\r\n\r\n    ```markdown\r\n    ---\r\n    title:
  My document\r\n    author: John Doe\r\n    plot-configuration: /path/to/file.yml\r\n
  \   ---     \r\n    ```\r\n\r\nor on the command line:\r\n\r\n```bash\r\npandoc
  --filter pandoc-plot -M plot-configuration=/path/to/file.yml ...\r\n```\r\n* Added
  the ability to specify configuration file to the `pandoc-plot clean` and `pandoc-plot
  toolkits` commands.\r\n\r\nRelease 0.5.0.0\r\n---------------\r\n\r\n* The `pandoc-plot`
  executable will now process documents in parallel. This should dramatically speed
  up processing of large documents with lots of figures. \r\nThis happens automatically
  through the function `plotTransform`.\r\n* Added a benchmarking suite.\r\n* Added
  `defaultConfiguration` so that people don't have to install the `data-default` package
  to get access to default configuration values. \r\n* Added a check for the `matplotlib`
  toolkit, preventing users from using `matplotlib.pyplot.show` in figures. This would
  halt `pandoc-plot`.\r\n\r\nRelease 0.4.0.1\r\n---------------\r\n\r\n* Fixed an
  issue where the `pandoc-plot` executable could not be built outside of its git repository.\r\n\r\nRelease
  0.4.0.0\r\n---------------\r\n\r\n* Updated documentation.\r\n* Added a `--full-version`
  flag to the executable, which includes which version of pandoc/pandoc-types was
  used, as well as the git revision.\r\n* Added the `clean` command to the executable.
  This can be used to clean-up output files produced by pandoc-plot.\r\n* Changed
  the flag `--write-example-config` to the command `write-example-config`.\r\n* Added
  the top-level function `cleanOutputDir` to clean output of pandoc-plot. This is
  only accessible if `pandoc-plot` is used as a library.\r\n* Added a distinction
  between failure to render a figure because of a mistake, and failing to render a
  figure because the toolkit is not installed. `pandoc-plot` will give better error
  messages in the latter case.\r\n\r\nRelease 0.3.0.0\r\n---------------\r\n\r\n*
  Added more examples.\r\n* Added MacOS binaries built via Azure pipelines.\r\n* BREAKING
  CHANGE: Parsing captions based on source file was not working. Captions format can
  be specified in the configuration file. This unfortunately changes the type signature
  of a few high-level functions.\r\n\r\nRelease 0.2.2.0\r\n---------------\r\n\r\n*
  Fixed an issue where paths with spaces would not work (issue #2).\r\n* Added Linux
  binaries built via Azure pipelines.\r\n\r\nRelease 0.2.1.0\r\n---------------\r\n\r\n*
  Improved documentation.\r\n\r\nRelease 0.2.0.0\r\n---------------\r\n\r\n* Added
  support for gnuplot.\r\n* Added more tests for all toolkits.\r\n\r\n* Fixed an issue
  where the package could not be installed because a source file was not included
  in the cabal file.\r\n\r\nRelease 0.1.0.0\r\n---------------\r\n\r\n* Initial release"
basic-deps:
  shakespeare: '>=2.0 && <3'
  bytestring: -any
  base: '>=4.11 && <5'
  text: ==1.*
  filepath: '>=1.4 && <2'
  pandoc-types: '>=1.21 && <2'
  containers: -any
  pandoc: '>=2.10 && <3'
  typed-process: '>=0.2.1 && <1'
  pandoc-plot: -any
  mtl: '>=2.2 && <3'
  lifted-async: '>=0.10 && <1'
  githash: '>=0.1.3.0 && <1'
  hashable: '>=1 && <2'
  optparse-applicative: '>=0.14 && <1'
  template-haskell: '>2.7 && <3'
  yaml: '>=0.8 && <1'
  directory: '>=1.2.7 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.2.1
author: Laurent P. René de Cotret
latest: 0.7.2.1
description-type: markdown
description: "<!--\r\nThe file README.md is automatically generated by the mkreadme.ps1
  script \r\nDo not edit manually\r\n-->\r\n\r\n# pandoc-plot \r\n\r\n## A Pandoc
  filter to generate figures from code blocks in documents\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-plot.svg)](http://hackage.haskell.org/package/pandoc-plot)
  [![Stackage version (latest long-term service)](http://stackage.org/package/pandoc-plot/badge/lts)](http://stackage.org/lts/package/pandoc-plot)
  [![Stackage version (nightly)](http://stackage.org/package/pandoc-plot/badge/nightly)](http://stackage.org/nightly/package/pandoc-plot)
  [![Conda Version](https://img.shields.io/conda/vn/conda-forge/pandoc-plot.svg)](https://anaconda.org/conda-forge/pandoc-plot)
  [![license](https://img.shields.io/badge/license-GPLv2+-lightgray.svg)](https://www.gnu.org/licenses/gpl.html)
  \r\n\r\n`pandoc-plot` turns code blocks present in your documents (Markdown, LaTeX,
  etc.) into embedded figures, using your plotting toolkit of choice, including Matplotlib,
  ggplot2, MATLAB, Mathematica, and more.\r\n\r\n  - [Overview](#overview)\r\n  -
  [Supported toolkits](#supported-toolkits)\r\n  - [Features](#features)\r\n      -
  [Captions](#captions)\r\n      - [Link to source code](#link-to-source-code)\r\n
  \     - [Preamble scripts](#preamble-scripts)\r\n      - [Performance](#performance)\r\n
  \     - [Compatibility with\r\n        pandoc-crossref](#compatibility-with-pandoc-crossref)\r\n
  \ - [Detailed usage](#detailed-usage)\r\n      - [As a filter](#as-a-filter)\r\n
  \     - [Syntax](#syntax)\r\n      - [Parameters and options](#parameters-and-options)\r\n
  \     - [Configuration](#configuration)\r\n      - [Other commands](#other-commands)\r\n
  \ - [Installation](#installation)\r\n      - [Binaries and Installers](#binaries-and-installers)\r\n
  \     - [conda](#conda)\r\n      - [winget](#winget)\r\n      - [From Hackage/Stackage](#from-hackagestackage)\r\n
  \     - [From source](#from-source)\r\n  - [Warning](#warning)\r\n\r\n## Overview\r\n\r\nThis
  program is a [Pandoc](https://pandoc.org/) filter. It can therefore\r\nbe used in
  the middle of conversion from input format to output format,\r\nreplacing code blocks
  with figures.\r\n\r\nThe filter recognizes code blocks with classes that match plotting\r\ntoolkits.
  For example, using the `matplotlib` toolkit:\r\n\r\n```` markdown\r\n# My document\r\n\r\nThis
  is a paragraph.\r\n\r\n```{.matplotlib}\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n````\r\n\r\nPutting
  the above in `input.md`, we can then generate the plot and embed\r\nit in an HTML
  page:\r\n\r\n``` bash\r\npandoc --filter pandoc-plot input.md --output output.html\r\n```\r\n\r\n*Note
  that pandoc-plot only works with pandoc \\>= 2.10 because of some\r\nbreaking changes
  in pandoc’s API.*\r\n\r\n## Supported toolkits\r\n\r\n`pandoc-plot` currently supports
  the following plotting toolkits\r\n(**installed separately**):\r\n\r\n  - `matplotlib`:
  plots using the [matplotlib](https://matplotlib.org/)\r\n    Python library;\r\n
  \ - `plotly_python` : plots using the\r\n    [plotly](https://plotly.com/python/)
  Python library;\r\n  - `plotly_r`: plots using the [plotly](https://plotly.com/r/)
  R\r\n    library\r\n  - `matlabplot`: plots using [MATLAB](https://www.mathworks.com/);\r\n
  \ - `mathplot` : plots using\r\n    [Mathematica](https://www.wolfram.com/mathematica/);\r\n
  \ - `octaveplot`: plots using [GNU\r\n    Octave](https://www.gnu.org/software/octave/);\r\n
  \ - `ggplot2`: plots using [ggplot2](https://ggplot2.tidyverse.org/);\r\n  - `gnuplot`:
  plots using [gnuplot](http://www.gnuplot.info/);\r\n  - `graphviz`: graphs using
  the [Graphviz](http://graphviz.org/)\r\n\r\nTo know which toolkits are useable on
  *your machine* (and which ones are\r\nnot available), you can check with the `toolkits`
  command:\r\n\r\n``` bash\r\npandoc-plot toolkits\r\n```\r\n\r\nThe `toolkits` command
  is described in its own section below.\r\n\r\n**Wish your plotting toolkit of choice
  was available? Please [raise an\r\nissue](https://github.com/LaurentRDC/pandoc-plot/issues)\\!**\r\n\r\n##
  Features\r\n\r\n### Captions\r\n\r\nYou can also specify a caption for your image.
  This is done using the\r\noptional `caption` parameter.\r\n\r\n**Markdown**:\r\n\r\n````
  markdown\r\n```{.matlabplot caption=\"This is a simple figure with a **Markdown**
  caption\"}\r\nx  = 0: .1 : 2*pi;\r\ny1 = cos(x);\r\ny2 = sin(x);\r\n\r\nfigure\r\nplot(x,
  y1, 'b', x, y2, 'r-.', 'LineWidth', 2)\r\n```\r\n````\r\n\r\n**LaTex**:\r\n\r\n```
  latex\r\n\\begin{minted}[caption=This is a simple figure with a caption]{matlabplot}\r\nx
  \ = 0: .1 : 2*pi;\r\ny1 = cos(x);\r\ny2 = sin(x);\r\n\r\nfigure\r\nplot(x, y1, 'b',
  x, y2, 'r-.', 'LineWidth', 2)\r\n\\end{minted}\r\n```\r\n\r\nCaption formatting
  unfortunately cannot be determined automatically. To\r\nspecify a caption format
  (e.g. “markdown”, “LaTeX”, etc.), see\r\n[Configuration](#configuration).\r\n\r\n###
  Link to source code\r\n\r\nIn case of an output format that supports links (e.g. HTML),
  the\r\nembedded image generated by `pandoc-plot` can show a link to the source\r\ncode
  which was used to generate the file. Therefore, other people can\r\nsee what code
  was used to create your figures.\r\n\r\nYou can turn this on via the `source=true`
  key:\r\n\r\n**Markdown**:\r\n\r\n```` markdown\r\n```{.mathplot source=true}\r\n...\r\n```\r\n````\r\n\r\n**LaTex**:\r\n\r\n```
  latex\r\n\\begin{minted}[source=true]{mathplot}\r\n...\r\n\\end{minted}\r\n```\r\n\r\nor
  via a [configuration file](#Configuration).\r\n\r\n### Preamble scripts\r\n\r\nIf
  you find yourself always repeating some steps, inclusion of scripts\r\nis possible
  using the `preamble` parameter. For example, if you want all\r\nMatplotlib plots
  to have the\r\n[`ggplot`](https://matplotlib.org/tutorials/introductory/customizing.html#sphx-glr-tutorials-introductory-customizing-py)\r\nstyle,
  you can write a very short preamble `style.py` like so:\r\n\r\n``` python\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n```\r\n\r\nand include it
  in your document as follows:\r\n\r\n```` markdown\r\n```{.matplotlib preamble=style.py}\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n````\r\n\r\nWhich
  is equivalent to writing the following markdown:\r\n\r\n```` markdown\r\n```{.matplotlib}\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n````\r\n\r\nThe
  equivalent LaTeX usage is as follows:\r\n\r\n``` latex\r\n\\begin{minted}[include=style.py]{matplotlib}\r\n\r\n\\end{minted}\r\n```\r\n\r\nThis
  `preamble` parameter is perfect for longer documents with many\r\nplots. Simply
  define the style you want in a separate script\\! You can\r\nalso import packages
  this way, or define functions you often use.\r\n\r\n### Performance\r\n\r\n`pandoc-plot`
  minimizes work, only generating figures if it absolutely\r\nmust, i.e. if the content
  has changed. `pandoc-plot` will save the hash\r\nof the source code used to generate
  a figure in its filename. Before\r\ngenerating a figure, `pandoc-plot` will check
  it this figure already\r\nexists based on the hash of its source\\! This also means
  that there is\r\nno way to directly name figures.\r\n\r\nMoreover, starting with
  version 0.5.0.0, `pandoc-plot` takes advantage\r\nof multicore CPUs, rendering figures
  **in parallel**.\r\n\r\nTherefore, you can confidently run the filter on very large
  documents\r\ncontaining hundreds of figures, like a book or a thesis.\r\n\r\n###
  Compatibility with pandoc-crossref\r\n\r\n[`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref)
  is a\r\npandoc filter that makes it effortless to cross-reference objects in\r\nMarkdown
  documents.\r\n\r\nYou can use `pandoc-crossref` in conjunction with `pandoc-plot`
  for the\r\nultimate figure-making pipeline. You can combine both in a figure like\r\nso:\r\n\r\n````
  markdown\r\n```{#fig:myexample .plotly_python caption=\"This is a caption\"}\r\n#
  Insert figure script here\r\n```\r\n\r\nAs you can see in @fig:myexample, ...\r\n````\r\n\r\nIf
  the above source is located in file `myfile.md`, you can render the\r\nfigure and
  references by applying `pandoc-plot` **first**, and then\r\n`pandoc-crossref`. For
  example:\r\n\r\n``` bash\r\npandoc --filter pandoc-plot --filter pandoc-crossref
  -i myfile.md -o myfile.html\r\n```\r\n\r\n## Detailed usage\r\n\r\n`pandoc-plot`
  is a command line executable with a few functions. You can\r\ntake a look at the
  help using the `-h`/`--help` flag:\r\n\r\n``` bash\r\npandoc-plot - generate figures
  directly in documents using your plotting toolkit\r\nof choice.\r\n\r\nUsage: pandoc-plot.exe
  [(-v|--version) | --full-version | (-m|--manual)] \r\n                       [COMMAND]
  [AST]\r\n  This pandoc filter generates plots from code blocks using a multitude
  of\r\n  possible renderers. This allows to keep documentation and figures in perfect\r\n
  \ synchronicity.\r\n\r\nAvailable options:\r\n  -v,--version             Show version
  number and exit.\r\n  --full-version           Show full version information and
  exit.\r\n  -m,--manual              Open the manual page in the default web browser
  and\r\n                           exit.\r\n  -h,--help                Show this
  help text\r\n\r\nAvailable commands:\r\n  toolkits                 Show information
  on toolkits and exit.\r\n  clean                    Clean output directories where
  figures from FILE and\r\n                           log files might be stored. WARNING:
  All files in\r\n                           those directories will be deleted.\r\n
  \ write-example-config     Write example configuration to a file and exit.\r\n\r\nMore
  information can be found via the manual (pandoc-plot --manual) or the repository
  README, located at\r\n    https://github.com/LaurentRDC/pandoc-plot\r\n\r\n```\r\n\r\n###
  As a filter\r\n\r\nThe most common use for `pandoc-plot` is as a pandoc filter,
  in which\r\ncase it should be called without arguments. For example:\r\n\r\n```
  bash\r\npandoc --filter pandoc-plot -i input.md -o output.html\r\n```\r\n\r\nIf
  `pandoc-plot` fails to render a code block into a figure, the\r\nfiltering will
  not stop. Your code blocks will stay unchanged.\r\n\r\nYou can chain other filters
  with it (e.g.,\r\n[`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref))
  like\r\nso:\r\n\r\n``` bash\r\npandoc --filter pandoc-plot --filter pandoc-crossref
  -i input.md -o output.html\r\n```\r\n\r\n### Syntax\r\n\r\nThe syntax for code blocks
  in documents is shown below. `pandoc-plot`\r\nlooks for code blocks with a specific
  class, depending on the toolkit\r\nyou want to use. `pandoc-plot` will run the code
  and capture the figure\r\noutput. There can only be **one** figure per code block.\r\n\r\nThe
  possible parameters and options are described in [further\r\nbelow](#parameters-and-options).\r\n\r\n####
  Markdown\r\n\r\n```` markdown\r\n  ```{.cls param1=value1 param2=value2 ...}\r\n
  \ # script content\r\n  ```\r\n````\r\n\r\n#### LaTeX\r\n\r\nNote that the `minted`
  LaTeX package need not be installed.\r\n\r\n``` latex\r\n\\begin{minted}[param1=value1,
  param2=value2, ...]{cls}\r\n...\r\n\\end{minted}\r\n```\r\n\r\n### Parameters and
  options\r\n\r\nThere are parameters that affect the figure that will be included
  in\r\nyour document. Here are all the possible general parameters, in Markdown\r\nsyntax:\r\n\r\n````
  markdown\r\n  ```{.cls \r\n      .language\r\n      directory=(path) \r\n      caption=(text)
  \r\n      format=(PNG|PDF|SVG|JPG|EPS|GIF|TIF|WEBP) \r\n      source=(true|false)
  \r\n      preamble=(path) \r\n      dpi=(integer) \r\n      executable=(path) \r\n
  \     caption_format=(text)\r\n      }\r\n  # script content\r\n  ```\r\n````\r\n\r\n
  \ - `cls` must be one of the following: `matplotlib`, `matlabplot`,\r\n    `plotly_python`,
  `plotly_r`, `mathplot`, `octaveplot`, `ggplot2`,\r\n    `gnuplot`, or `graphviz`.\r\n\r\nAll
  following parameters are optional, with their default values\r\ncontrolled by the
  [configuration](#configuration)\r\n\r\n  - `language` specifies the programming
  language used in this block.\r\n    This parameter is ignored by `pandoc-plot`,
  but your text editor may\r\n    use it to highlight code. See [Code\r\n    highlighting](#code-highlighting)
  below.\r\n  - `directory` is a path to the directory where the figure and source\r\n
  \   code will be saved. You cannot control the file name. This path is\r\n    either
  absolute, or relative from the working directory where you\r\n    call `pandoc-plot`.\r\n
  \ - `caption` is the caption text. The format of the caption is\r\n    specified
  in the `caption_format` parameter, described below.\r\n  - `format` is the desired
  filetype for the resulting figure. Possible\r\n    values for `format` are \\[`PNG`,
  `PDF`, `SVG`, `JPG`, `EPS`, `GIF`,\r\n    `TIF`, `WEBP`\\]. Not all toolkits support
  all formats. See\r\n    `pandoc-plot toolkits` for toolkit-specific information
  regarding\r\n    save formats.\r\n  - `source` is a boolean toggle that determines
  whether the source code\r\n    should be linked in the caption or not. Possible
  values are\r\n    \\[`true`, `True`, `false`, `False`\\].\r\n  - `preamble` is a
  path to a script that will be included as a preamble\r\n    to the content of the
  code block. This path is either absolute, or\r\n    relative from the working directory
  where you call `pandoc-plot`.\r\n  - `dpi` is the pixel density of the figure in
  dots-per-inch. Possible\r\n    values are positive integers. Not all toolkits respect
  this.\r\n  - `executable` is a path to the executable to use\r\n    (e.g. `C:\\\\python3.exe`)
  or the name of the executable\r\n    (e.g. `python3`).\r\n  - `caption_format` is
  the text format of the caption. Possible values\r\n    are exactly the same as `pandoc`’s
  format specification, usually\r\n    `FORMAT+EXTENSION-EXTENSION`. For example,
  captions in Markdown with\r\n    raw LaTeX would be parsed correctly provided that\r\n
  \   `caption_format=markdown+raw_tex`. See Pandoc’s guide on [Specifying\r\n    formats](https://pandoc.org/MANUAL.html#specifying-formats).\r\n\r\n####
  Code highlighting\r\n\r\nIf your editor supports code highlighting in code blocks,
  you can also\r\ninclude the programming language. In Markdown:\r\n\r\n```` markdown\r\n
  \ ```{.language .cls (options)}\r\n  # script content\r\n  ```\r\n````\r\n\r\nor
  Latex:\r\n\r\n``` latex\r\n  \\begin{minted}[(options)]{language, cls}\r\n  # script
  content\r\n  \\end{minted}\r\n```\r\n\r\nFor example, for GGPlot2 figures:\r\n\r\n````
  markdown\r\n  ```{.r .ggplot2 caption=Highlighted code block}\r\n  # script content\r\n
  \ ```\r\n````\r\n\r\nor (Latex):\r\n\r\n``` latex\r\n  \\begin{minted}[caption=Highlighted
  code block]{r, ggplot2}\r\n  # script content\r\n  \\end{minted}\r\n```\r\n\r\nThis
  way, you benefit from code highlighting *and* `pandoc-plot`.\r\n\r\n### Configuration\r\n\r\nTo
  avoid repetition, `pandoc-plot` can be configured using simple YAML\r\nfiles. Here
  are **all** the possible parameters:\r\n\r\n``` yaml\r\n\r\n# This is an example
  configuration. Everything in this file is optional.\r\n# Please refer to the documentation
  to know about the parameters herein.\r\n#\r\n# The `executable` parameter for all
  toolkits can be either the\r\n# executable name (if it is present on the PATH),
  or\r\n# the full path to the executable.\r\n# E.g.:\r\n#  executable: python3\r\n#
  \ executable: \"C:\\Python37\\Scripts\\python.exe\"\r\n\r\n# The following parameters
  affect all toolkits\r\n# Directory where to save the plots. The path can be relative
  to pandoc-plot's\r\n# current working directory, or absolute.\r\ndirectory: plots/\r\n\r\n#
  Whether or not to include a link to the source script in the caption. \r\n# Particularly
  useful for HTML output.\r\nsource: false\r\n\r\n# Default density of figures in
  dots per inches (DPI). \r\n# This can be changed in the document specifically as
  well.\r\ndpi: 80\r\n\r\n# Default format in which to save the figures. This can
  be specified individually as well.\r\nformat: PNG\r\n\r\n# Text format for the captions.
  Unfortunately, there is no way to detect this automatically.\r\n# You can use the
  same notation as Pandoc's --from parameter, specified here:\r\n# https://pandoc.org/MANUAL.html#option--from\r\n#
  Example: markdown, rst+raw_tex\r\ncaption_format: markdown+tex_math_dollars\r\n\r\n#
  Logging configuration\r\nlogging:\r\n  # Possible verbosity values: debug, error,
  warning, info, silent\r\n  verbosity: warning\r\n  # If the filepath below is not
  present, then pandoc-plot will log to stderr\r\n  # Otherwise, log messages will
  be appended to the filepath.\r\n  # filepath: path/to/file.txt\r\n\r\n# The possible
  parameters for the Matplotlib toolkit\r\nmatplotlib:\r\n  # preamble: matplotlib.py\r\n
  \ tight_bbox: false\r\n  transparent: false\r\n  executable: python\r\n\r\n# The
  possible parameters for the MATLAB toolkit\r\nmatlabplot:\r\n  # preamble: matlab.m\r\n
  \ executable: matlab\r\n\r\n# The possible parameters for the Plotly/Python toolkit\r\nplotly_python:\r\n
  \ # preamble: plotly-python.py\r\n  executable: python\r\n\r\n# The possible parameters
  for the Plotly/R toolkit\r\nplotly_r:\r\n  # preamble: plotly-r.r\r\n  executable:
  Rscript\r\n\r\n# The possible parameters for the Mathematica toolkit\r\nmathplot:\r\n
  \ # preamble: mathematica.m\r\n  executable: math\r\n\r\n# The possible parameters
  for the GNU Octave toolkit\r\noctaveplot:\r\n  # preamble: octave.m\r\n  executable:
  octave\r\n\r\n# The possible parameters for the ggplot2 toolkit\r\nggplot2:\r\n
  \ # preamble: ggplot2.r\r\n  executable: Rscript\r\n\r\n# The possible parameters
  for the gnuplot toolkit\r\ngnuplot:\r\n  # preamble: gnuplot.gp\r\n  executable:
  gnuplot\r\n\r\n# The possible parameters for the graphviz toolkit\r\ngraphviz:\r\n
  \ # preamble: graphviz.dot\r\n  executable: dot\r\n```\r\n\r\nA file like the above
  sets the **default** values; you can still\r\noverride them in documents directly.\r\n\r\nThe
  easiest way to specify configuration for `pandoc-plot` is to place a\r\n`.pandoc-plot.yml`
  file in the current working directory. You can also\r\nspecify a configuration file
  in document metadata, under the\r\n`plot-configuration` key. For example, in Markdown:\r\n\r\n```
  markdown\r\n---\r\ntitle: My document\r\nauthor: John Doe\r\nplot-configuration:
  /path/to/file.yml\r\n---\r\n```\r\n\r\nor on the command line, using pandoc’s `-M/--metadata`
  flag:\r\n\r\n``` bash\r\npandoc --filter pandoc-plot -M plot-configuration=/path/to/file.yml
  ...\r\n```\r\n\r\nThe hierarchy of configuration files is as follows:\r\n\r\n1.
  \ A configuration file specified in the metadata under the\r\n    `plot-configuration`
  key;\r\n2.  Otherwise, a file in the current working directory named\r\n    `.pandoc-plot.yml`;\r\n3.
  \ Finally, the default configuration is used.\r\n\r\n#### Executables\r\n\r\nThe
  `executable` parameter for all toolkits can be either the executable\r\nname (if
  it is present on the PATH), or the full path to the executable.\r\n\r\nExamples:\r\n\r\n```
  yaml\r\nmatplotlib:\r\n  executable: python3\r\n```\r\n\r\n``` yaml\r\nmatlabplot:\r\n
  \ executable: \"C:\\Program Files\\Matlab\\R2019b\\bin\\matlab.exe\"\r\n```\r\n\r\n####
  Toolkit-specific options\r\n\r\n##### Matplotlib\r\n\r\n  - `tight_bbox` is a boolean
  that determines whether to use\r\n    `bbox_inches=\"tight\"` or not when saving
  Matplotlib figures. For\r\n    example, `tight_bbox: true`. See\r\n    [here](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)\r\n
  \   for details.\r\n  - `transparent` is a boolean that determines whether to make\r\n
  \   Matplotlib figure background transparent or not. This is useful, for\r\n    example,
  for displaying a plot on top of a colored background on a\r\n    web page. High-resolution
  figures are not affected. For example,\r\n    `transparent: true`.\r\n\r\n#### Logging\r\n\r\nIf
  you are running `pandoc-plot` on a large document, you might want to\r\nturn on
  logging. You can do so via the configuration file as follows:\r\n\r\n``` yaml\r\nlogging:\r\n
  \   # Possible verbosity values: debug, error, warning, info, silent\r\n    # debug
  level shows all messages\r\n    # error level shows all but debug messages, etc.\r\n
  \   verbosity: info\r\n    \r\n    # OPTIONAL: log to file\r\n    # Remove line
  below to log to stderr\r\n    filepath: log.txt\r\n```\r\n\r\nBy default, `pandoc-plot`
  logs warnings and errors to the standard error\r\nstream only.\r\n\r\n### Other
  commands\r\n\r\n#### Finding installed toolkits\r\n\r\nYou can determine which toolkits
  are available on your current machine\r\nusing the `pandoc-plot toolkits` command.
  Here is the full help text:\r\n\r\n``` bash\r\nUsage: pandoc-plot.exe toolkits [--config
  PATH]\r\n  Show information on toolkits and exit.\r\n\r\nAvailable options:\r\n
  \ --config PATH            Path to optional configuration file.\r\n  -h,--help                Show
  this help text\r\n```\r\n\r\n#### Cleaning output\r\n\r\nFigures produced by `pandoc-plot`
  can be placed in a few different\r\nlocations. You can set a default location in
  the\r\n[Configuration](#configuration), but you can also re-direct specific\r\nfigures
  in other directories if you use the `directory=...` argument in\r\ncode blocks.
  These figures will build up over time. You can use the\r\n`clean` command to scan
  documents and delete the associated\r\n`pandoc-plot` output files. For example,
  to delete the figures generated\r\nfrom the `input.md` file:\r\n\r\n``` bash\r\npandoc-plot
  clean input.md\r\n```\r\n\r\nThis sill remove all directories where a figure *could*
  have been\r\nplaced. **WARNING**: all files will be removed.\r\n\r\nHere is the
  full help text for the `clean` command:\r\n\r\n``` bash\r\nUsage: pandoc-plot.exe
  clean [--config PATH] FILE\r\n  Clean output directories where figures from FILE
  and log files might be\r\n  stored. WARNING: All files in those directories will
  be deleted.\r\n\r\nAvailable options:\r\n  --config PATH            Path to optional
  configuration file.\r\n  -h,--help                Show this help text\r\n```\r\n\r\n####
  Configuration template\r\n\r\nBecause `pandoc-plot` supports a few toolkits, there
  are a lot of\r\nconfiguration options. Don’t start from scratch\\! The\r\n`write-example-config`
  command will create a file for you, which you can\r\nthen modify:\r\n\r\n``` bash\r\npandoc-plot
  write-example-config\r\n```\r\n\r\nYou will need to re-name the file to `.pandoc-ploy.yml`
  to be able to\r\nuse it, so don’t worry about overwriting your own configuration.\r\n\r\nHere
  is the full help text for the `write-example-config` command:\r\n\r\n``` bash\r\nUsage:
  pandoc-plot.exe write-example-config [--path FILE]\r\n  Write example configuration
  to a file and exit.\r\n\r\nAvailable options:\r\n  --path FILE              Target
  location of the configuration file. Default is\r\n                           \".example-pandoc-plot.yml\"\r\n
  \ -h,--help                Show this help text\r\n```\r\n\r\n## Installation\r\n\r\n###
  Binaries and Installers\r\n\r\nWindows, Linux, and Mac OS binaries are available
  on the [GitHub release\r\npage](https://github.com/LaurentRDC/pandoc-plot/releases).
  There are\r\nalso Windows installers.\r\n\r\n### conda\r\n\r\nLike `pandoc`, `pandoc-plot`
  is available as a package installable with\r\n[`conda`](https://docs.conda.io/en/latest/).
  [Click here to see the\r\npackage page](https://anaconda.org/conda-forge/pandoc-plot).\r\n\r\nTo
  install in the current environment:\r\n\r\n``` sh\r\nconda install -c conda-forge
  pandoc-plot\r\n```\r\n\r\n### winget\r\n\r\nYou can install `pandoc-plot` from the
  [Windows Package\r\nManager](https://github.com/microsoft/winget-cli) `winget` (just
  like\r\n`pandoc`). To install:\r\n\r\n``` sh\r\nwinget install pandoc-plot\r\n```\r\n\r\n###
  From Hackage/Stackage\r\n\r\n`pandoc-plot` is available on\r\n[Hackage](http://hackage.haskell.org/package/pandoc-plot)
  and\r\n[Stackage](https://www.stackage.org/nightly/package/pandoc-plot). Using\r\nthe
  [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n``` bash\r\ncabal
  update\r\ncabal install pandoc-plot\r\n```\r\n\r\nor\r\n\r\n``` bash\r\nstack update\r\nstack
  install pandoc-plot\r\n```\r\n\r\n### From source\r\n\r\n[![Build\r\nStatus](https://dev.azure.com/laurentdecotret/pandoc-plot/_apis/build/status/LaurentRDC.pandoc-plot?branchName=master)](https://dev.azure.com/laurentdecotret/pandoc-plot/_build/latest?definitionId=5&branchName=master)\r\n\r\nBuilding
  from source can be done using\r\n[`stack`](https://docs.haskellstack.org/en/stable/README/)
  or\r\n[`cabal`](https://www.haskell.org/cabal/):\r\n\r\n``` bash\r\ngit clone https://github.com/LaurentRDC/pandoc-plot\r\ncd
  pandoc-plot\r\nstack install # Alternatively, `cabal install`\r\n```\r\n\r\n## Warning\r\n\r\nDo
  not run this filter on unknown documents. There is nothing in\r\n`pandoc-plot` that
  can stop a script from performing **evil actions**.\r\n"
license-name: GPL-2.0-or-later
