homepage: https://github.com/LaurentRDC/pandoc-plot#readme
changelog-type: markdown
hash: 9d209535ade87a7abf0649b1275c078feb31cc2f8bc9ad2742895383ce8bec15
test-bench-deps:
  base: '>=4.11 && <5'
  data-default-class: '>=0.1.2'
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  pandoc-types: '>=1.20 && <=2'
  pandoc-plot: -any
  mtl: '>=2.2 && <2.3'
  tasty-hunit: -any
  temporary: -any
  tasty: -any
  hspec-expectations: -any
  directory: -any
maintainer: Laurent P. René de Cotret
synopsis: A Pandoc filter to include figures generated from code blocks using your
  plotting toolkit of choice.
changelog: "# Change log\r\n\r\npandoc-plot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\r\n\r\n\r\nRelease
  0.2.2.0\r\n---------------\r\n\r\n* Fixed an issue where paths with spaces would
  not work (issue #2).\r\n* Added Linux binaries built via Azure pipelines.\r\n\r\nRelease
  0.2.1.0\r\n---------------\r\n\r\n* Improved documentation.\r\n\r\nRelease 0.2.0.0\r\n---------------\r\n\r\n*
  Added support for gnuplot.\r\n* Added more tests for all toolkits.\r\n\r\n* Fixed
  an issue where the package could not be installed because a source file was not
  included in the cabal file.\r\n\r\nRelease 0.1.0.0\r\n---------------\r\n\r\n* Initial
  release"
basic-deps:
  shakespeare: '>=2.0 && <3'
  base: '>=4.11 && <5'
  data-default-class: '>=0.1.2 && <0.2'
  open-browser: '>=0.2.1.0'
  text: ==1.*
  filepath: '>=1.4 && <2'
  turtle: '>=1.5 && <2'
  pandoc-types: '>=1.20 && <2'
  containers: -any
  pandoc: '>=2.8 && <3'
  typed-process: '>=0.2.1 && <1'
  pandoc-plot: -any
  mtl: '>=2.2 && <2.3'
  hashable: '>=1 && <2'
  parallel-io: '>=0.3.3 && <0.4'
  temporary: -any
  optparse-applicative: '>=0.14 && <1'
  deepseq: -any
  template-haskell: '>2.7 && <3'
  yaml: '>=0.8 && <1'
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
author: Laurent P. René de Cotret
latest: 0.2.2.0
description-type: markdown
description: "# pandoc-plot \r\n\r\n## A Pandoc filter to generate figures from code
  blocks in documents\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-plot.svg)](http://hackage.haskell.org/package/pandoc-plot)
  [![Stackage version (nightly)](http://stackage.org/package/pandoc-plot/badge/nightly)](http://stackage.org/nightly/package/pandoc-plot)
  [![Build status](https://ci.appveyor.com/api/projects/status/mmgiuk52j356e6jp?svg=true)](https://ci.appveyor.com/project/LaurentRDC/pandoc-plot)
  [![Build Status](https://dev.azure.com/laurentdecotret/pandoc-plot/_apis/build/status/LaurentRDC.pandoc-plot?branchName=master)](https://dev.azure.com/laurentdecotret/pandoc-plot/_build/latest?definitionId=5&branchName=master)
  ![GitHub](https://img.shields.io/github/license/LaurentRDC/pandoc-plot) [![Conda
  Version](https://img.shields.io/conda/vn/conda-forge/pandoc-plot.svg)](https://anaconda.org/conda-forge/pandoc-plot)\r\n\r\n`pandoc-plot`
  turns code blocks present in your documents (Markdown, LaTeX, etc.) into embedded
  figures, using your plotting toolkit of choice, including Matplotlib, ggplot2, MATLAB,
  Mathematica, and more.\r\n\r\n## Table of content\r\n\r\n* [Usage](#usage)\r\n*
  [Supported toolkits](#supported-toolkits)\r\n* [Features](#features)\r\n    * [Captions](#captions)\r\n
  \   * [Link to source code](#link-to-source-code)\r\n    * [Preamble scripts](#preamble-scripts)\r\n
  \   * [No wasted work](#no-wasted-work)\r\n    * [Compatibility with pandoc-crossref](#compatibility-with-pandoc-crossref)\r\n*
  [Configuration](#configuration)\r\n    * [Toolkit-specific options](#toolkit-specific-options)\r\n*
  [Usage as a Haskell library](#usage-as-a-haskell-library)\r\n* [Installation](#installation)\r\n*
  [Warning](#warning)\r\n\r\n## Usage\r\n\r\nThis program is a [Pandoc](https://pandoc.org/)
  filter. It operates on the Pandoc abstract syntax tree, and can therefore be used
  in the middle of conversion from input format to output format.\r\n\r\nThe filter
  recognizes code blocks with classes that match plotting toolkits. For example, using
  the `matplotlib` toolkit:\r\n\r\n~~~markdown\r\n# My document\r\n\r\nThis is a paragraph.\r\n\r\n```{.matplotlib}\r\nimport
  matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4], [1,2,3,4,5])\r\nplt.title('This
  is an example figure')\r\n```\r\n~~~\r\n\r\nPutting the above in `input.md`, we
  can then generate the plot and embed it in an HTML page:\r\n\r\n```bash\r\npandoc
  --filter pandoc-plot input.md --output output.html\r\n```\r\n\r\n*Note that pandoc-plot
  only works with pandoc >= 2.8 because of some breaking changes in pandoc's API.*\r\n\r\n##
  Supported toolkits\r\n\r\n`pandoc-plot` currently supports the following plotting
  toolkits (**installed separately**):\r\n\r\n* `matplotlib`: plots using the [matplotlib](https://matplotlib.org/)
  Python library;\r\n* `plotly_python` : plots using the [plotly](https://plot.ly/python/)
  Python library;\r\n* `matlabplot`: plots using [MATLAB](https://www.mathworks.com/);\r\n*
  `mathplot` : plots using [Mathematica](https://www.wolfram.com/mathematica/);\r\n*
  `octaveplot`: plots using [GNU Octave](https://www.gnu.org/software/octave/);\r\n*
  `ggplot2`: plots using [ggplot2](https://ggplot2.tidyverse.org/);\r\n* `gnuplot`:
  plots using [gnuplot](http://www.gnuplot.info/);\r\n\r\n\r\nTo know which toolkits
  are useable on *your machine* (and which ones are not available), you can check
  with the `--toolkits/-t` flag:\r\n\r\n```bash\r\npandoc-plot --toolkits\r\n```\r\n\r\n**Wish
  your plotting toolkit of choice was available? Please [raise an issue](https://github.com/LaurentRDC/pandoc-plot/issues)!**\r\n\r\n##
  Features\r\n\r\n### Captions\r\n\r\nYou can also specify a caption for your image.
  This is done using the optional `caption` parameter.\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.matlabplot
  caption=\"This is a simple figure with a **Markdown** caption\"}\r\nx  = 0: .1 :
  2*pi;\r\ny1 = cos(x);\r\ny2 = sin(x);\r\n\r\nfigure\r\nplot(x, y1, 'b', x, y2, 'r-.',
  'LineWidth', 2)\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[caption=This
  is a simple figure with a \\LaTeX caption]{matlabplot}\r\nx  = 0: .1 : 2*pi;\r\ny1
  = cos(x);\r\ny2 = sin(x);\r\n\r\nfigure\r\nplot(x, y1, 'b', x, y2, 'r-.', 'LineWidth',
  2)\r\n\\end{minted}\r\n```\r\n\r\nCaption formatting should match the document formatting.\r\n\r\n###
  Link to source code\r\n\r\nIn case of an output format that supports links (e.g.
  HTML), the embedded image generated by `pandoc-plot` can show a link to the source
  code which was used to generate the file. Therefore, other people can see what code
  was used to create your figures. \r\n\r\nYou can turn this off via the `source=true`
  key:\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.mathplot source=true}\r\n...\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[source=true]{mathplot}\r\n...\r\n\\end{minted}\r\n```\r\n\r\nor
  via a [configuration file](#Configuration).\r\n\r\n### Preamble scripts\r\n\r\nIf
  you find yourself always repeating some steps, inclusion of scripts is possible
  using the `preamble` parameter. For example, if you want all Matplotlib plots to
  have the [`ggplot`](https://matplotlib.org/tutorials/introductory/customizing.html#sphx-glr-tutorials-introductory-customizing-py)
  style, you can write a very short preamble `style.py` like so:\r\n\r\n```python\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n```\r\n\r\nand include it
  in your document as follows:\r\n\r\n~~~markdown\r\n```{.matplotlib preamble=style.py}\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nWhich
  is equivalent to writing the following markdown:\r\n\r\n~~~markdown\r\n```{.matplotlib}\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nThe
  equivalent LaTeX usage is as follows:\r\n\r\n```latex\r\n\\begin{minted}[include=style.py]{matplotlib}\r\n\r\n\\end{minted}\r\n```\r\n\r\nThis
  `preamble` parameter is perfect for longer documents with many plots. Simply define
  the style you want in a separate script! You can also import packages this way,
  or define functions you often use.\r\n\r\n### No wasted work\r\n\r\n`pandoc-plot`
  minimizes work, only generating figures if it absolutely must, i.e. if the content
  has changed. Therefore, you can confidently run the filter on very large documents
  containing dozens of figures --- like a book or a thesis --- and only the figures
  which have changed will be re-generated.\r\n\r\n### Compatibility with pandoc-crossref\r\n\r\n[`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref)
  is a pandoc filter that makes it effortless to cross-reference objects in Markdown
  documents. \r\n\r\nYou can use `pandoc-crossref` in conjunction with `pandoc-plot`
  for the ultimate figure-making pipeline. You can combine both in a figure like so:\r\n\r\n~~~markdown\r\n```{#fig:myexample
  .plotly_python caption=\"This is a caption\"}\r\n# Insert figure script here\r\n```\r\n\r\nAs
  you can see in @fig:myexample, ...\r\n~~~\r\n\r\nIf the above source is located
  in file `myfile.md`, you can render the figure and references by applying `pandoc-plot`
  **first**, and then `pandoc-crossref`. For example:\r\n\r\n```bash\r\npandoc --filter
  pandoc-plot --filter pandoc-crossref -i myfile.md -o myfile.html\r\n```\r\n\r\n##
  Configuration\r\n\r\nTo avoid repetition, `pandoc-plot` can be configured using
  simple YAML files. `pandoc-plot` will look for a `.pandoc-plot.yml` file in the
  current working directory. Here are **all** the possible parameters:\r\n\r\n```yaml\r\n#
  The following parameters affect all toolkits\r\ndirectory: plots/\r\nsource: false\r\ndpi:
  80\r\nformat: PNG\r\npython_interpreter: python\r\n\r\n# The possible parameters
  for the Matplotlib toolkit\r\nmatplotlib:\r\n  preamble: matplotlib.py\r\n  tight_bbox:
  false\r\n  transparent: false\r\n  executable: python\r\n\r\n# The possible parameters
  for the MATLAB toolkit\r\nmatlabplot:\r\n  preamble: matlab.m\r\n  executable: matlab\r\n\r\n#
  The possible parameters for the Plotly/Python toolkit\r\nplotly_python:\r\n  preamble:
  plotly-python.py\r\n  executable: python\r\n\r\n# The possible parameters for the
  Mathematica toolkit\r\nmathplot:\r\n  preamble: mathematica.m\r\n  executable: math\r\n\r\n#
  The possible parameters for the GNU Octave toolkit\r\noctaveplot:\r\n  preamble:
  octave.m\r\n  executable: octave\r\n\r\n# The possible parameters for the ggplot2
  toolkit\r\nggplot2:\r\n  preamble: ggplot2.r\r\n  executable: Rscript\r\n\r\n# The
  possible parameters for the gnuplot toolkit\r\ngnuplot:\r\n  preamble: gnuplot.gp\r\n
  \ executable: gnuplot\r\n\r\n```\r\n\r\nA file like the above sets the **default**
  values; you can still override them in documents directly.\r\n\r\nUsing `pandoc-plot
  --write-example-config` will write the default configuration to a file which you
  can then customize.\r\n\r\n### Executables\r\n\r\nThe `executable` parameter for
  all toolkits can be either the executable name (if it is present on the PATH), or
  the full path to the executable.\r\n\r\nExamples:\r\n\r\n```yaml\r\nmatplotlib:\r\n
  \ executable: python3\r\n```\r\n\r\n```yaml\r\nmatlabplot:\r\n  executable: \"C:\\Program
  Files\\Matlab\\R2019b\\bin\\matlab.exe\"\r\n```\r\n\r\n### Toolkit-specific options\r\n\r\n####
  Matplotlib\r\n\r\n* `tight_bbox` is a boolean that determines whether to use `bbox_inches=\"tight\"`
  or not when saving Matplotlib figures. For example, `tight_bbox: true`. See [here](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)
  for details.\r\n* `transparent` is a boolean that determines whether to make Matplotlib
  figure background transparent or not. This is useful, for example, for displaying
  a plot on top of a colored background on a web page. High-resolution figures are
  not affected. For example, `transparent: true`.\r\n\r\n## Usage as a Haskell library\r\n\r\nTo
  include the functionality of `pandoc-plot` in a Haskell package, you can use the
  `makePlot` function (for single blocks) or `plotTransform` function (for entire
  documents). [Take a look at the documentation on Hackage](https://hackage.haskell.org/package/pandoc-plot).\r\n\r\n###
  Usage with Hakyll\r\n\r\nIn case you want to use the filter with your own Hakyll
  setup, you can use a transform function that works on entire documents:\r\n\r\n```haskell\r\nimport
  Text.Pandoc.Filter.Plot (plotTransform)\r\n\r\nimport Data.Default (def) -- From
  data-default package, for default configuration\r\nimport Hakyll\r\n\r\n-- Unsafe
  compiler is required because of the interaction\r\n-- in IO (i.e. running an external
  script).\r\nmakePlotPandocCompiler :: Compiler (Item String)\r\nmakePlotPandocCompiler
  = \r\n  pandocCompilerWithTransformM\r\n    defaultHakyllReaderOptions\r\n    defaultHakyllWriterOptions\r\n
  \   (unsafeCompiler . plotTransform def fmt)\r\n    where\r\n      config = def
  \             -- Default configuration\r\n      fmt    = Just \"markdown\"  -- Document
  format, including extensions\r\n```\r\n\r\n## Installation\r\n\r\n### Binaries and
  Installers (Windows)\r\n\r\nWindows binaries and installers are available on the
  [GitHub release page](https://github.com/LaurentRDC/pandoc-plot/releases).\r\n\r\n###
  conda\r\n\r\nLike `pandoc`, `pandoc-plot` is available as a package installable
  with [`conda`](https://docs.conda.io/en/latest/). [Click here to see the package
  page](https://anaconda.org/conda-forge/pandoc-plot).\r\n\r\nTo install in the current
  environment:\r\n\r\n```sh\r\nconda install -c conda-forge pandoc-plot\r\n```\r\n\r\n###
  From Hackage/Stackage\r\n\r\n`pandoc-plot` is available on [Hackage](http://hackage.haskell.org/package/pandoc-plot)
  and [Stackage](https://www.stackage.org/nightly/package/pandoc-plot). Using the
  [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n```bash\r\ncabal
  update\r\ncabal install pandoc-plot\r\n```\r\n\r\nor\r\n\r\n```bash\r\nstack update\r\nstack
  install pandoc-plot\r\n```\r\n\r\n### From source\r\n\r\nBuilding from source can
  be done using [`stack`](https://docs.haskellstack.org/en/stable/README/) or [`cabal`](https://www.haskell.org/cabal/):\r\n\r\n```bash\r\ngit
  clone https://github.com/LaurentRDC/pandoc-plot\r\ncd pandoc-plot\r\nstack install
  # Alternatively, `cabal install`\r\n```\r\n\r\n## Warning\r\n\r\nDo not run this
  filter on unknown documents. There is nothing in `pandoc-plot` that can stop a script
  from performing **evil actions**.\r\n"
license-name: GPL-2.0-only
