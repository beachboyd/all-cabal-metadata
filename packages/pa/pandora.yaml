homepage: https://github.com/iokasimov/pandora
changelog-type: markdown
hash: 33a1b3b2a63e7f5e08792386e5eb67ad8acdfe8e5f5e9e1a369da4f6cef86da0
test-bench-deps: {}
maintainer: Murat Kasimov <iokasimov.m@gmail.com>
synopsis: A box of patterns and paradigms
changelog: |
  # 0.1.1
  * Define `attached` destructor for `Product` datatype
  * Define `empty` destructor for `Stack` structure
  * Replace `flip` on `?` type operator
  * Remove type parameter from `Stack` type synonymous
  * Split `structure` and `value` in `Nonempty` type family
  * Define `Invariant` instance for `Constant` datatype
  * Remove all `Invariant` methods except `invmap`
  * Extract `Junction` module from `Basis`

  # 0.1.2
  * Define `Pipeline` control flow paradigm
  * Split `Structure` modules on `Property` and `Concrete`
  * Define `Hollow` type class for handling empty structures
  * Extract `Nonempty` into a separated module
  * Define `Graph` concrete structure
  * Define infix `:-.` type operator for Lens
  * Define `Object` instances for `Product` datatype

  # 0.1.3
  * Define `Object` instances for `Cofree` datatype
  * Define all `Object` pattern instances for `Constant` datatype
  * Define `reset` and `shift` methods for `Continuation` datatype
  * Define `Endo` datatype in `Basis` module
  * Define `Object` instances for transformer schemes
  * Define `Binary` tree concrete structure
  * Define some `Object` instances for `Jack` datatype
  * Remove `Hollow` ad-hoc typeclass
  * Merge `Property` and `Concrete` modules back
basic-deps: {}
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
author: Murat Kasimov
latest: 0.1.3
description-type: markdown
description: |
  # Pandora - the box of patterns and paradigms

  This is humble attempt to define pure core library for problem solving.

  Used materials:

  * Paper: `Fast Coroutine Pipelines`
  * Twit: https://twitter.com/xgrommx/status/964307440517963776
  * Library: http://hackage.haskell.org/package/base
  * Library: http://hackage.haskell.org/package/adjunctions
  * Library: http://hackage.haskell.org/package/distributive
  * Library: http://hackage.haskell.org/package/comonad
  * Library: http://hackage.haskell.org/package/semigroupoids
  * Library: http://hackage.haskell.org/package/transformers
  * Library: http://hackage.haskell.org/package/invariant

  ## Diagram of functor patterns:
  ![Functors diagram](/Diagrams/Functors.png)

  ## Diagram of object patterns:
  ![Objects diagram](/Diagrams/Objects.png)
license-name: MIT
