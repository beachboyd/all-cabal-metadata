homepage: ''
changelog-type: ''
hash: 1393b3ceb7adf39b99535cc09450cbdaa4fa2bd80a66668f757bc9d242952241
test-bench-deps: {}
maintainer: jakewheatmail@gmail.com
synopsis: Utilities for working with cabal packages and your package database
changelog: ''
basic-deps:
  Cabal: -any
  filemanip: -any
  base: ==4.*
  groom: -any
  filepath: -any
  process: -any
  packdeps: -any
all-versions:
- 0.1.0.0
author: Jake Wheat
latest: 0.1.0.0
description-type: text
description: ! "Package-o-tron is a collection of utilities to help managing cabal\nfiles
  for your projects, maintaining Makefiles and other build\nsystems, and also some
  which help with your package database.\n\n\nThe central code is a function which
  takes a list of folders, then\nparses all the imports in all the haskell source
  in these folders. It\nthen creates the dependency information between the different
  files,\nand the dependency on packages information (using ghc-pkg dump)\n\n\nCurrently
  implemented:\n\nThe Makefile in the package-o-tron package gives an example of how
  to\nuse package-o-tron to help manage a makefile for haskell projects,\nusing the
  Makefilerize command.\n\nYou could use a Makefile:\n\n* to quickly develop when
  you have multiple .cabal projects and don't\n  want to spend time reinstalling them
  when you do a rebuild (this can\n  also be much faster if you use -j and have lots
  of executables)\n\n* if you have files to compile as part of the development which
  aren't\n  in a cabal package, or if you want to integrate with existing\n  Makefiles,
  e.g. for mixed haskell/c projects.\n\nSee the Makefile and autorules.mk in the repo
  (link below) for an\nexample of how this works. This tool is used in the hssqlppp
  project\nMakefile (https://github.com/JakeWheat/hssqlppp), see the Makefile and\nautorules.mk
  there for another example.\n\n\nCabalLint\n\nCabalLint will check the following
  issues in your cabal file:\n\n*  missing and superfluous other-modules and build-deps
  in library,exe\n   and test sections\n\n*  version ranges which exclude the latest
  versions of a build-dep\n   (just uses packdeps from hackage)\n\nrun it like this:\nCabalLint
  package-o-tron.cabal\nNo output means everything OK\n\n\nShowPackages\n\nRun on
  a set of source folders, and it will show you all the packages\nreferenced by the
  source in those folders\n\n\n\nPlanned utils:\n\nShowpackages: extend to show indirectly
  depended on packages as well\n\nblessed package set creation: run on some folders
  to get a package\nlist. Then it follows the package dependencies to get all the
  needed\nnon-system packages. Then it looks in your .cabal and copies out the\ntarballs
  for all these packages. Now you can create a fresh install in\na sandbox or fresh
  machine without needing an internet connection, or\nworrying about if hackage is
  down, or if the latest set of packages\ndon't install.\n\nCabal build testing\n\nUse
  sandboxing to check the sdists from a .cabal install without error\nand if there
  are tests they run and pass. The sandboxing is used to\ncheck a range of versions
  of ghc crossed with the lowest and latest\nversions of the dependencies listed in
  the .cabal. Later, maybe this\ncan be extended to search earlier versions of dependencies
  to get more\naccurate lower bounds.\n\nPackage database lint:\n\ncheck your ghc
  package database for the following issues:\nduplicate packages installed\npackages
  which aren't the latest versions installed\nnot sure how to automatically help with
  these situations though\n\nThird party cabal install checker:\n\nrun a wrapper around
  cabal-install ... --dry-run. reports:\nany reinstalls (easy since cabal already
  does this)\nany different versions of already installed packages would be\n  installed\nany
  versions of packages which aren't the latest of those packages\n  would be installed\n\nThird
  party cabal file hacker:\n\nwhen you try to install a lot of packages, and some
  of them have\nversion constraints on their dependencies which lead to another\npackage
  being installed not at the latest version: this will cabal\nunpack the offending
  packages and alter their constraints to allow all\nthe latest versions of packages
  automatically. Not completely safe of\ncourse, but I always end up doing this manually
  and it is really\ntedious.\n\n\n\nRepository: https://github.com/JakeWheat/package-o-tron\n\nContact:
  jakewheatmail@gmail.com\n"
license-name: BSD-3-Clause
