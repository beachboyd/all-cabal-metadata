homepage: http://chriswarbo.net/projects/activecode
changelog-type: ''
hash: aa42384f015a2beae7898aaffdc6c3c570e91c3aadb780f4673813f9cb743c0b
test-bench-deps:
  panhandle: -any
  base: ! '>=4.7'
  syb: -any
  pandoc-types: -any
  tagged: -any
  containers: ! '>=0.5 && <0.6'
  pandoc: -any
  tasty-quickcheck: -any
  tasty: ! '>=0.11.2.1'
  QuickCheck: -any
  aeson: -any
  lazysmallcheck2012: -any
  derive: -any
maintainer: chriswarbo@gmail.com
synopsis: Pandoc filter to unwrap nested blocks
changelog: ''
basic-deps:
  panhandle: -any
  base: ! '>=4.7 && <4.10'
  syb: -any
  pandoc-types: -any
  pandoc: ! '>=1.17 && <1.18'
all-versions:
- 0.2.0.0
- 0.3.0.0
author: Chris Warburton
latest: 0.3.0.0
description-type: markdown
description: ! "# PanHandle #\n\nThis software is released into the Public Domain\n
  -- Chris Warburton <chriswarbo@gmail.com>, 2014-09-30\n\n## Usage ##\n\nYou'll need
  some way to run Haskell. Check your package manager or go to\nhttps://www.haskell.org/platform/
  to get a compiler or a `runhaskell`\ninterpreter.\n\nYou'll also need Pandoc available
  as a library, which you can get from your\npackage manager or with `cabal install
  pandoc`, and will probably want the\n`pandoc` command available too.\n\nTo use PanHandle,
  invoke it as a Pandoc \"filter\", like this:\n\n`pandoc --filter ./panhandle input_file
  > output_file`\n\nYou can also run it standalone, but note that its stdio should
  be in Pandoc JSON\nformat, which you can convert to/from using `pandoc -t json`/`pandoc
  -f json`.\n\nTo reduce the chance for error, ensure the version of Pandoc you're
  using to\ngenerate/consume the JSON is the same as the version PanHandle's built
  with.\n\n## Intro ##\n\nPanHandle is a simple Haskell script using PanDoc. It allows
  code blocks and\nlines in PanDoc-compatible documents, eg. Markdown, to be \"unwrapped\"
  and become\npart of the overall document.\n\nAny code blocks or lines with an \"unwrap\"
  class will have their contents parsed\nusing Pandoc, then spliced into the document
  (inside a Div or Span). The content\nmust be in \"pandoc-json\" format, which you
  can get by passing the `-t json`\noption to Pandoc.\n\nFor example, this Markdown
  list:\n\n```\n - A Markdown\n - List\n```\n\nConverts to this JSON:\n\n```\n[{\"unMeta\":{}},[{\"t\":\"BulletList\",\"c\":[[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"A\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"Markdown\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"List\"}]}]]}]]\n```\n\nWhich
  we can splice into a document:\n\n````\nMumble mumble\n\n```{.unwrap}\n[{\"unMeta\":{}},[{\"t\":\"BulletList\",\"c\":[[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"A\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"Markdown\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"List\"}]}]]}]]\n```\n\nGroan
  groan\n````\n\nTo give:\n\n````\nMumble mumble\n\n - A Markdown\n - List\n\nGroan
  groan\n````\n\n## Usage Notes ##\n\n### Wrappers ###\n\nCode blocks will become
  Pandoc-native Div blocks, code lines will become\nPandoc-native Span elements. These
  may affect rendering in some formats, eg.\nLaTeX, and may also affect post-processors,
  eg. other Pandoc scripts and CSS.\n\n### Attributes ###\n\nAll of the code block's
  attributes except for the \"unwrap\" class will be applied\nto the resulting Div
  or Span:\n\n````\n```{#foo .bar .upper .unwrap baz=\"quux\" something=\"nice\"}\n[{\"unMeta\":{}},[{\"t\":\"Para\",\"c\":[{\"t\":\"Str\",\"c\":\"Some\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Emph\",\"c\":[{\"t\":\"Str\",\"c\":\"emphasised\"}]},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"text\"}]}]]\n```\n````\n\nWill
  become:\n\n```\n<div id=\"foo\" class=\"bar upper\" baz=\"quux\" something=\"nice\">\nSome
  *emphasised* text\n</div>\n```\n\n### Replacement Order ###\n\nPanHandle operates
  top-down, so blocks can be nested. For example:\n\n    Level 1A\n\n    `````{.unwrap}\n
  \   Level 2A\n\n    ```{.unwrap}\n    Level 3A\n    ```\n\n    ```\n    Level 3B\n
  \   ```\n\n    Level 2B\n    `````\n\n    Level 1B\n\nWill become:\n\n    Level
  1A\n\n    Level 2A\n\n    Level 3A\n\n    ```\n    Level 3B\n    ```\n\n    Level
  2B\n\n    Level 1B\n\nAll code blocks are unwrapped first, then all inline code.\n\n###
  Inline Snippets ###\n\nHere's an example of PanHandle working on inline code snippets:\n\n
  \   I hope the following is `[{\"unMeta\":{}},[{\"t\":\"Para\",\"c\":[{\"t\":\"Emph\",\"c\":[{\"t\":\"Str\",\"c\":\"emphasised\"}]}]}]]`{.unwrap}.\n\nWill
  become:\n\n    I hope the following is *emphasised*.\n\n### No Straddling ###\n\nPanHandle
  operates by splicing syntax trees together, *not* via text\nreplacement.\n\nOne
  consequence is that formatting cannot 'straddle two levels' of a document.\nAs an
  example, if we put asterisks inside and outside a code snippet (the JSON\ncorresponds
  to `be* emphasised`):\n\n    This will *not `[{\"unMeta\":{}},[{\"t\":\"Para\",\"c\":[{\"t\":\"Str\",\"c\":\"be*\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"emphasised\"}]}]]`{.unwrap}.\n\nThey
  will remain as asterisks:\n\n    This will \\*not be\\* emphasised.\n\nThey *will
  not* join together for emphasis, like this:\n\n    This will *not be* emphasised.\n\n###
  PanPipe ###\n\nPanHandle may be useful to you as a standalone script, but it was
  originally\ncreated to augment PanPipe. PanPipe can send the contents of code blocks
  to the\nstdin of a UNIX shell command, and dump the stdout back into the block.\n\nPanHandle
  allows these results to escape their blocks and become part of the\ndocument. This
  makes it easy to write documents containing code to\nprogrammatically fetch/generate
  parts of themselves.\n"
license-name: LicenseRef-PublicDomain
