homepage: http://chriswarbo.net/essays/activecode
changelog-type: ''
hash: 0e9c38e1e68b0eb692def61ff7a8c2e70d5a6048b72240558cf0aa19d7329227
test-bench-deps:
  base: ! '>=4.7 && <4.10'
  panpipe: -any
  pandoc: -any
  tasty-quickcheck: -any
  tasty: ! '>=0.7'
  QuickCheck: -any
maintainer: chriswarbo@gmail.com
synopsis: Pandoc filter to execute code blocks
changelog: ''
basic-deps:
  unix: ! '>=2.7 && <2.8'
  base: ! '>=4.7 && <4.10'
  panpipe: -any
  process: ! '>=1.2 && <1.7'
  pandoc-types: -any
  pandoc: ! '>=1.17 && <1.18'
  temporary: -any
all-versions:
- 0.2.0.0
author: Chris Warburton
latest: 0.2.0.0
description-type: markdown
description: ! "# PanPipe #\n\nThis software is released into the Public Domain\n
  \ -- Chris Warburton <chriswarbo@gmail.com>, 2014-09-28\n\n## Usage ##\n\nTested
  on GNU/Linux, might work on other POSIX systems.\n\nYou'll need some way to run
  Haskell. Check your package manager or go to\nhttps://www.haskell.org/platform/
  to get a compiler or a `runhaskell`\ninterpreter.\n\nYou'll also need Pandoc available
  as a library, which you can get from your\npackage manager or with `cabal install
  pandoc`, and will probably want the\n`pandoc` command available too.\n\nTo use PanPipe,
  invoke it as a Pandoc \"filter\", like this:\n\n`pandoc --filter ./panpipe input_file
  > output_file`\n\nYou can also run `panpipe` as a standalone command, but note that
  its stdio\nshould be in PanDoc's JSON format, rather than e.g. raw Markdown. You
  can\nconvert *to* PanDoc JSON using a command like `pandoc -t json`, and convert\n*from*
  PanDoc JSON using `pandoc -f json`. The `--filter` argument automates\nthis plumbing.\n\n##
  Intro ##\n\nPanPipe is a simple Haskell script using PanDoc. It allows code blocks
  in\nPanDoc-compatible documents, eg. Markdown, to be sent to external programs for\nprocessing.\n\nAny
  code blocks or lines with a \"pipe\" attribute will have the contents of that\nattribute
  executed as a shell command. The body of the block/line will be piped\nto that command's
  stdin, and the stdout will replace the body of that\nblock/line. A non-zero exit
  code will cause PanPipe to exit with that code;\nstderr will be sent to PanPipe's
  stderr.\n\nFor example, we can execute shell scripts by piping them to \"sh\":\n\n````\n```{pipe=\"sh\"}\necho
  \"Hello world\"\n```\n````\n\nThis will cause \"sh\" to be called, with 'echo \"Hello
  world\"' as its stdin.\nIt will execute the echo command, to produce 'Hello world'
  as its stdout. This\nwill become the new contents of the code block, so in the resulting
  document\nthis code block will be replaced by:\n\n````\n```\nHello world\n```\n````\n\n##
  Usage Notes ##\n\n### Attributes ###\n\nThe \"pipe\" attribute is removed, but other
  attributes, classes and IDs remain:\n\n````\n```{#foo .bar baz=\"quux\" pipe=\"sh\"}\necho
  'Hello'\n```\n````\n\nWill become:\n\n````\n```{#foo .bar baz=\"quux\"}\nHello\n```\n````\n\n###
  Execution Order ###\n\nPanPipe uses two passes: in the first, all code *blocks*
  are executed, in the\norder they appear in the document. Hence later blocks can
  rely on the effects of\nearlier ones. For example:\n\n````\n```{pipe=\"sh\"}\necho
  \"123\" > /tmp/blah\necho \"hello\"\n```\n\n```{pipe=\"sh\"}\ncat /tmp/blah\n```\n````\n\nWill
  become:\n\n````\n```\nhello\n```\n\n```\n123\n```\n````\n\nThe second pass executes
  *inline* code, in the order they appear in the\ndocument.\n\n### Environment ###\n\nCommands
  will inherit the environment from the shell which calls panpipe, except\nthey will
  all be executed in a temporary directory. This makes it easier to\nshare data between
  code, without leaving cruft behind:\n\n````\n```{pipe=\"sh\"}\necho \"hello world\"
  > file1\necho \"done\"\n```\n\n```{pipe=\"sh\"}\ncat file1\n```\n````\n\nWill become:\n\n````\n```\ndone\n```\n\n```\nhello
  world\n```\n````\n\nThe temporary directory will contain a symlink called \"root\"
  which points to\nwherever Pandoc was called from. This allows resources to be shared
  across\ninvocations (although it's not recommended to *modify* anything in root).\n\n###
  Imperative Blocks ###\n\nIf you want to execute a block for some effect, but ignore
  its output, you can\nhide the result using a class or attribute:\n\n````\n```{.hidden
  pipe=\"python -\"}\nimport random\nwith open('entropy', 'w') as f:\n    f.write(str(random.randint(0,
  100)))\n```\n````\n\nWhen rendered to HTML will produce:\n\n```html\n<pre class=\"hidden\"><code></code></pre>\n```\n\n###
  Program Listings ###\n\nA common use-case is to include a program listing in a document
  *and* show the\nresults of executing it. You can do this by passing the source code
  to the Unix\n\"tee\" command, then using a subsequent shell script to run it:\n\n````\n```{.python
  pipe=\"tee script1.py\"}\nprint \"Foo bar baz\"\n```\n\n```{pipe=\"sh\"}\npython
  script1.py\n```\n````\n\nWill become:\n\n````\n```{.python}\nprint \"Foo bar baz\"\n```\n\n```\nFoo
  bar baz\n```\n````\n\n### Changing Block Order ###\n\nBlocks will always be executed
  in document-order, so you must arrange dependent\nblocks appropriately. However,
  we can display blocks in any order by saving them\nto files and dumping them later.\n\nFor
  example, to show the output of a program *before* its source code listing,\nwe can
  define the program first, using \"tee\" to save it to a file and a HTML\nclass to
  hide the listing in the resulting document:\n\n````\n```{.hidden pipe=\"tee script2.py\"}\nprint
  \"Hello world\"\n```\n````\n\nNext we can include a block which executes the file
  we created:\n\n````\n```{pipe=\"sh\"}\npython script2.py\n```\n````\n\nFinally we
  can include a listing by having a block dump the contents of the file\n(using \".python\"
  for syntax highlighting):\n\n````\n```{.python pipe=\"sh\"}\ncat script2.py\n```\n````\n\n###
  Inline Snippets ###\n\nPanPipe also works on inline code snippets; for example,
  my root filesystem is\ncurrently at `` `df -h | grep \"/$\" | grep -o \"[0-9]*%\"`{pipe=\"sh\"}
  `` capacity.\n\n### PanHandle ###\n\nPanPipe keeps the results of script execution
  inside code blocks/lines, where\nthey can't interfere with the formatting. If you
  want to splice some of these\nresults back into the document, you can use the PanHandle
  script which was\nwritten to complement PanPipe.\n\nTo prevent ambiguity, PanHandle
  requires data to be in PanDoc's JSON format. We\ncan convert things to that format
  using the `-t json` option to the `pandoc`\ncommand. For example, to generate a
  Markdown list and insert it into the\ndocument, we can do this:\n\n````\n```{.unwrap
  pipe=\"python - | pandoc -t json\"}\nfor n in range(5):\n    print \" - Element
  \" + str(n)\n```\n````\n\nIf we run this document through PanPipe, the Python code
  will output the\nfollowing to its stdout:\n\n```\n - Element 0\n - Element 1\n -
  Element 2\n - Element 3\n - Element 4\n```\n\nThis will be transformed by `pandoc
  -t json` into the following:\n\n```\n[{\"unMeta\":{}},[{\"t\":\"BulletList\",\"c\":[[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"0\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"1\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"2\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"3\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"4\"}]}]]}]]\n```\n\nHence
  PanPipe will end up giving out a document equivalent to the following:\n\n````\n```
  {.unwrap}\n[{\"unMeta\":{}},[{\"t\":\"BulletList\",\"c\":[[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"0\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"1\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"2\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"3\"}]}],[{\"t\":\"Plain\",\"c\":[{\"t\":\"Str\",\"c\":\"Element\"},{\"t\":\"Space\",\"c\":[]},{\"t\":\"Str\",\"c\":\"4\"}]}]]}]]\n```\n````\n\nRunning
  *that* code through PanHandle will splice the contents into the document\nto give
  (a JSON equivalent of):\n\n```\n - Element 0\n - Element 1\n - Element 2\n - Element
  3\n```\n\nNote that this is no longer in a codeblock, so it will render like this:\n\n
  - Element 0\n - Element 1\n - Element 2\n - Element 3\n\nHence we can use PanPipe
  to obtain or generate data, and PanHandle to splice it\ninto the document in a sensible
  way. For example, it's easy to include one\nMarkdown document inside another:\n\n````\n```{.unwrap
  pipe=\"sh\"}\ncat /some/file.md | pandoc -t json\n```\n\n```{.unwrap pipe=\"sh\"}\nwget
  -O- http://some.site/some/markdown | pandoc -t json\n```\n````\n"
license-name: LicenseRef-PublicDomain
