homepage: http://hub.darcs.net/thielema/patch-image/
changelog-type: markdown
hash: 057062d383500ede1c55c7495fe939acb0495e4296f8de398f56a41297955ff3
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Compose a big image from overlapping parts
changelog: ! "# Change log for the `patch-image` package\n\n## 0.3.2:\n\n * Use package
  `dsp` instead of `hmatrix`\n   for the solution of the linear least squares problem\n
  \  for determining absolute coordinates from image pair displacements.\n   This
  removes dependency from LAPACK and GSL\n   and makes the code a bit simpler.\n\n##
  0.3.1:\n\n * Speed up computation by moving more stuff to Knead/LLVM.\n\n## 0.3:\n\n
  * Allow to save program state, modify it manually\n   and re-run with adapted parameters
  using CSV files.\n\n## 0.2:\n\n * Add new executable that is based on LLVM and `knead`.\n\n
  * Add new algorithm for assembling the image from its parts.\n   The algorithm finds
  exactly matching part shapes,\n   such that the border of the shapes is where it
  hurts least visually.\n\n## 0.1.0.2:\n\n * Switch from `accelerate-fft` to `accelerate-cufft`.\n\n##
  0.1:\n\n * Implement the patching algorithm using `accelerate-cuda`.\n\n## 0.0:\n\n
  * Tests for a weighting algorithm using `GeomAlgLib`.\n   The goal is to find a
  reasonable weighting\n   for mixing arbitrary overlapping polygons.\n"
basic-deps:
  llvm-tf: ! '>=3.1 && <3.2'
  explicit-exception: ! '>=0.1.7 && <0.2'
  JuicyPixels: ! '>=2.0 && <3.3'
  bytestring: ! '>=0.9.2 && <0.11'
  accelerate-fourier: ! '>=1.0 && <1.1'
  carray: ! '>=0.1.5 && <0.2'
  accelerate-utility: ! '>=1.0 && <1.1'
  accelerate-arithmetic: ! '>=1.0 && <1.1'
  Cabal: ! '>=1.18 && <3'
  base: ==4.*
  storable-tuple: ! '>=0.0.3 && <0.1'
  knead: ! '>=0.3 && <0.4'
  storable-complex: ! '>=0.2.2 && <0.3'
  unordered-containers: ! '>=0.2.5 && <0.2.10'
  accelerate-cufft: ! '>=1.0 && <1.1'
  filepath: ! '>=1.3 && <1.5'
  semigroups: ! '>=0.1 && <1.0'
  bool8: ! '>=0.0 && <0.1'
  array: ! '>=0.4 && <0.6'
  pqueue: ! '>=1.2 && <1.5'
  enumset: ! '>=0.0.4 && <0.1'
  utility-ht: ! '>=0.0.13 && <0.1'
  containers: ! '>=0.4.2 && <0.7'
  fft: ! '>=0.1.7 && <0.2'
  llvm-extra: ! '>=0.8 && <0.9'
  cassava: ! '>=0.4.5 && <0.5.2'
  accelerate-io: ! '>=1.0 && <1.1'
  dsp: ! '>=0.2.4 && <0.3'
  accelerate: ! '>=1.1 && <1.2'
  non-empty: ! '>=0.2 && <0.4'
  tfp: ! '>=1.0 && <1.1'
  accelerate-llvm-ptx: ! '>=1.1 && <1.2'
  gnuplot: ! '>=0.5 && <0.6'
  prelude-compat: ==0.0.*
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.2'
- '0.3'
- '0.3.0.1'
- '0.3.1'
- '0.3.2'
- '0.3.2.1'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.3.2.1'
description-type: markdown
description: ! "# Automatic mode\n\nThis is the workflow:\nScan parts of an image
  that considerably overlap.\nThey must all be approximately oriented correctly.\nThe
  program uses the overlapping areas for reconstruction\nof the layout of the parts.\nIf
  all parts are in the directory `part`\nthen in the best case you can simply run:\n\n
  \   patch-image --output=collage.jpeg part/*.jpeg\n\nIf you get blurred areas,\nyou
  might enable an additional rotation correction:\n\n    patch-image --finetune-rotate
  --output=collage.jpeg part/*.jpeg\n\nIt follows an overview of how the program works.\nIt
  implies some things you should care about when using the program.\n\nThe program
  runs three phases:\n\n* Orientate each image part individually\n\n* Find overlapping
  areas in the parts\n  and reconstruct the part positions within the big image\n\n*
  Blend the parts in order to get the big image\n\nThe first phase orientates each
  part\nsuch that horizontal structures become perfectly aligned.\nOnly the brightness
  channel of the image is analysed.\nHorizontal structures can be text or the border
  of the image.\nThis also means that you should orientate the parts\nhorizontally,
  not vertically.\nI also recommend not to mix horizontal and vertical scanned parts\nsince
  the horizontal and vertical resolution of your scanner\nmight differ slightly.\nHowever,
  it should be fine to rotate the image source by 180Â°\nand rotate it back digitally,\nbefore
  feeding it to the patch-image program.\n\n## 1st Phase\n\nOptions for the first
  phase:\n\n* `--maximum-absolute-angle`:\n  Maximum angle to test for.\n\n* `--number-angles`:\n
  \ Number of angles minus one\n  to test between negative and positive maximum angle.\n\n*
  `--hint-angle`:\n  If the search for horizontal structures\n  does not yield satisfying
  results for an image part,\n  you may prepend the `--hint-angle` option with the
  wanted angle\n  to the image path.\n\n## 2nd Phase\n\nIn the second phase the program
  looks\nfor overlapping parts between all pairs of images.\nFor every pair it computes
  a convolution via a Fourier transform.\nOnly the brightness channel of the image
  is analysed.\n\n* `--pad-size`:\n  Computing a convolution of two big images may
  exceed your graphics memory.\n  To this end, images are shrunk before convolution.\n
  \ The pad size is the size in pixels after shrinking\n  that holds 2x2 shrunken
  image parts.\n  After determination of the distance between the shrunken parts\n
  \ the matching is repeated on a non-reduced clip of the original image part,\n  in
  order to get precise coordinates.\n\n* `--minimum-overlap`:\n  There must be a minimum
  of overlap\n  in order to accept that the images actually overlap.\n  The overlap
  is measured as a portion of the image part size.\n\n* `--maximum-difference`:\n
  \ The maximum allowed mean difference\n  within an overlapping area of two overlapping
  images.\n  If the difference is larger,\n  then the program assumes that the parts
  do not overlap.\n\n* `--smooth`:\n  It is important to eliminate a brightness offset,\n
  \ that is, big black and big white areas should be handled equally.\n  To this end
  the image is smoothed\n  and the smoothed image is subtracted from the original
  one.\n  This option allows to specify the degree (radius) of the smoothing.\n  I
  don't think you ever need to touch this parameter.\n\n* `--output-overlap`:\n  Writes
  images for all pairs of image parts.\n  These images allow you to diagnose\n  where
  the matching algorithm failed.\n  It may help you to adjust the matching parameters.\n
  \ In the future we might add an option to ignore problematic pairs.\n\nSince in
  the first phase every image part is oriented individually,\nit may happen that the
  part orientations don't match.\nThis would result in blurred areas in the final
  collage.\nIn order to correct this,\nyou can run phase two in an extended mode,\nthat
  also re-evaluates the part orientations.\nThe orientation of the composed image
  is then determined\nby the estimated orientation of the first image.\n\nOptions:\n\n*
  `--finetune-rotate`:\n  Enables the extended overlapping mode.\n  The option `--output-overlap`
  will then be ignored.\n\n* `--number-stamps`:\n  The extended mode selects many
  small clips in the overlapping area\n  and tries to match them.\n  We call these
  clips /stamps/.\n  This option controls the number of stamps per overlapping area
  minus one.\n\n* `--stamp-size`:\n  Size of a square stamp in pixels.\n\n## 3rd Phase\n\nThe
  third phase composes a big image from the parts.\nThese parts are weighted such
  that the part boundaries cannot be seen anymore\nand differences in brightness are
  faded into another.\nThe downside is that the superposition may lead to blur.\n\nOptions:\n\n*
  `--output`:\n  Path of the output JPEG image with the weighted collage.\n\n* `--output-hard`:\n
  \ Alternative output of a JPEG collage\n  where the image parts are simply averaged.\n
  \ You will certainly see bumps in brightness\n  at the borders of the image parts.\n
  \ This output may be mostly useful to promote the great weighting algorithm\n  employed
  by `--output`.\n\n* `--output-distance-map`:\n  The weight for every pixel is chosen
  according to the distance\n  to an image part boundary that lies within other parts.\n
  \ The rationale is that the weight shall become zero\n  when the pixel is close
  to a position\n  that will be affected by a disruption otherwise.\n  This option
  allows to emit the distance map for every image part.\n\n* `--distance-gamma`:\n
  \ If the distances are used for weighting as they are,\n  the program fades evenly
  between the overlapping image parts\n  over the entire overapping area.\n  This
  may mean that the overlapping area is blurred.\n  Raising the distance to a power
  greater than one reduces the area of blur.\n  The downside is that it also reduces
  the area for adaption\n  of differing brightness.\n\nOur LLVM implementation provides
  an additional way to assemble the image parts.\nThe already known weighting approach\ntries
  to blend across all the overlapping area.\nThis can equalize differences in brightness.\nThe
  downside is that imperfectly matching image parts\nlead to blurred content in the
  overlapping area.\nAn alternative algorithm tries to make the overlapping as small
  as possible\nand additionally performs blending where it hurts least.\nMore precisely,
  parts are blended where they differ least.\nHowever, if the brightness of the image
  parts differ\nthen the blending boundaries may become visible.\n\nOptions:\n\n*
  `--output-shaped`:\n  Path of the output JPEG image with smoothly blended image
  parts\n  along curves of low image difference.\n\n* `--output-shaped-hard`:\n  Like
  before but the image parts are not smoothly faded.\n  Instead, every pixel belongs
  to exactly one original image part.\n  This is more for debugging purposes than
  of practical use.\n\n* `--output-shape`:\n  Emit the smoothed mask of each image
  part used for blending.\n\n* `--output-shape-hard`:\n  Emit the non-smoothed masks.\n\n*
  `--shape-smooth`:\n  Smooth radius of the image masks.\n  The higher, the smoother
  is the blending between parts.\n\nGeneral options:\n\n* `--quality`:\n  JPEG quality
  percentage for writing the images.\n\n\n# Semi-Automatic mode: inspection and correction\n\nIf
  the program does not work correctly on a particular set of images\nor if you want
  to archive what it has done,\nthen the following options may help you.\n\n* `--output-state=state-%s.csv`:\n
  \   Use of this option let the program generate three files\n  that correspond to
  the stages of the image processing.\n  For each file the program replaces the placeholder
  `%s`\n  by an identifier for the particular stage.\n  For the example above the
  generated files are:\n\n    * `state-angle.csv`:\n      After the rotation detection\n
  \     the program emits this file containing the image paths\n      and their angles
  in degrees.\n\n    * `state-relation.csv`:\n      This file contains for all possible
  pairs of image parts\n      whether the program found that they overlap and, if
  yes,\n      what their relative offset is.\n\n    * `state-position.csv`:\n      From
  the relative offsets the program\n      computes the absolute part positions.\n
  \     This CSV file is essentially an extension of `state-angle.csv`\n      by the
  absolute positions.\n      However, in `--finetune-rotate` mode\n      the angles
  may differ from the ones in `state-angle.csv`.\n\n* `--state=state-position.csv`:\n
  \   You can feed the program with various parameters\n  such that the program does
  not need to compute them itself.\n  This can be useful for repeating a previous
  computation,\n  speedup a computation or improve a previous computation.\n  The
  idea is to take either `state-angle.csv` or `state-position.csv`\n  as generated
  by `--output-state`.\n  You may omit any column or re-order them, or you may clear
  individual cells.\n  At least the Image column must be present.\n  The most simple
  CSV file would thus be a text file\n  where the first line is `Image` and\n  each
  of the following lines contains one image path.\n  The images listed in the CSV
  file are loaded\n  additionally to the files given at the command-line.\n  A complete
  CSV file would contain the columns `Image`, `Angle`, `X`, `Y`,\n  and in `--finetune-rotate`
  mode additionally `DAngle`.\n\n    A missing column or empty cell means\n  that
  the program computes the parameter itself.\n  You may even fix say an X coordinate\n
  \ but let the program compute the corresponding Y coordinate.\n  I do not know whether
  there is a useful application of this feature,\n  but the feature is a natural result
  of how the computation works.\n\n    You may use the CSV file to set the rotation
  angle of the assembled image.\n  To this end, choose an image part where you know
  the angle for sure\n  and add the `Angle` to the image's row\n  while omitting the
  `Angle` for all other images.\n\n    If an image is grossly turned away from horizontal
  alignment,\n  that is, rotated by, say, more than 2 degree,\n  or the image does
  not contain a horizontal structure to align to,\n  then the automatic angle detection
  will fail.\n  In this case you might use the Angle column to specify the angle directly.\n\n
  \   In `--finetune-rotate` mode the `Angle` column means the following:\n  If an
  `Angle` cell is set\n  then the rotation angle is fixed both in the first rotation
  detection phase,\n  and in the subsequent rotation correction.\n  If an `Angle`
  cell is empty\n  then the rotation angle is both determined by horizontal structures\n
  \ in the first phase\n  and then adjusted in the subsequent correction phase.\n
  \ Further, if you want to say that all angles are only hints\n  that may be adjusted
  in the second phase,\n  then you should add an empty `DAngle` column.\n  If you
  want to exclude some angles from correction,\n  then enter a `0` at the corresponding
  cells in the `DAngle` column.\n\n    Summarized:\n  If both `Angle` and `DAngle`
  columns are present,\n  then the `Angle` column specifies the angle as determined
  in the first phase\n  and the `DAngle` column specifies the angle difference\n  as
  determined in the second phase.\n  You may enter values different from `0` in the
  `DAngle` column.\n  E.g., setting `1` means that any angle determined in the first
  phase\n  is unconditionally increased by 1 degree in the second phase.\n  I do not
  know, whether this can ever be useful,\n  but providing the columns `Angle` and
  `DAngle` this way\n  seemed to be the most natural way to support all sensible use
  cases.\n  If only the `Angle` column is available\n  this is equivalent to adding
  a `DAngle` column\n  and set `DAngle=0` if `Angle` is set\n  and leave `DAngle`
  empty if `Angle` is empty.\n\n    If you list images both on the command-line and
  in a CSV file,\n  then both lists are concatenated.\n  I recommend that you use
  either command-line arguments or a CSV file\n  to specify the image list.\n  You
  can easily get this wrong\n  when running the program with a command-line file list
  first\n  and then rerunning the computation starting with a saved `state.csv` file.\n\n*
  `--relations=state-relation.csv`:\n    The table `relation.csv` contains pairs of
  images\n  and their relative offsets.\n  The most simple use case is to take the
  `state-relation.csv` file\n  as generated by `--output-state`\n  and alter or delete
  rows that you find inappropriate.\n  The common columns are `ImageA`, `ImageB`,
  and `Rel`.\n  `Rel` can be:\n\n    * empty:\n      The user wants the program to
  determine whether the image parts overlap.\n\n    * `X`:\n      The user knows that
  the image parts overlap.\n\n    * `-`:\n      The user knows that the image parts
  do not overlap.\n\n    Without `--finetune-rotate` the columns `DX` and `DY` follow.\n
  \ They tell the offset of the image parts to each other.\n  In `--finetune-rotate`
  mode\n  there are the additional columns `XA`, `YA`, `XB`, `YB`.\n  They contain
  coordinates of corresponding points in the image pairs.\n  There are usually many
  such correspondences for one image pair\n  and they are listed below header lines
  for the image pairs.\n\n    It is uncommon to have both a `state.csv` file with
  absolute positions\n  and a `relation.csv` file,\n  though the program supports
  it.\n  If there is a pair of image parts\n  where both images have fixed positions
  in `state.csv`\n  and there is also a fixed offset registered in `relation.csv`,\n
  \ then the fixed positions win.\n  The differing offset between the image parts\n
  \ are seen as an unfortunate impossibility\n  to optimally match the optimization
  goals.\n\n    There is another difficulty in mixing fixed positions\n  together
  with fixed offsets:\n  For a pair of image parts with fixed positions\n  the program
  does not match images\n  in order to compute the relative offsets of the parts\n
  \ because it would not affect the final positions, anyway.\n  This optimization
  makes the program skip the phase\n  of determining image relations completely,\n
  \ if all part positions are fixed.\n  This is the wanted effect.\n  The unwanted
  effect is that since no relative offsets are computed,\n  no relative offsets can
  be written to `state-relation.csv`\n  as requested by `--output-state`.\n  That
  is, re-running the program with `--state` using a CSV file\n  as previously emitted
  by `--output-state`\n  while using `--output-state` anew\n  will generate a new
  `state-relation.csv` file\n  with less information than before or no information
  at all.\n\n    Files listed in `relation.csv` are not loaded.\n  Instead of this,
  the program checks consistency\n  with `state.csv` and files listed as command-line
  arguments.\n\n\n# Trouble shooting\n\n## Unrelated images are recognized as overlapping
  or vice versa\n\nIf the program misses related image pairs\nor recognizes unrelated
  images as overlapping,\nyou may first watch the overlap differences the program
  prints.\nYou may then adapt the threshold via the `--maximum-difference` option.\n\nThe
  total image might contain repetitive elements\nthat make unrelated image parts look
  like they overlap.\nSo, if there is no clear threshold\nor you find the above procedure
  inappropriate,\nyou may alternatively let the program emit a `relation.csv` file\nusing
  the `--output-state` option.\nYou can then edit `relation.csv` file\nand re-run
  the program with the option `--relations=relation.csv`.\n"
license-name: BSD3
