homepage: http://hub.darcs.net/thielema/pathtype/
changelog-type: text
hash: 7ee5316d86a55b8d44485278cb3f859d4095e690830a9a130127f3ee0029222e
test-bench-deps:
  base: -any
  pathtype: -any
  random: ! '>=1.0 && <1.2'
maintainer: haskell@henning-thielemann.de, ben@moseley.name
synopsis: Type-safe replacement for System.FilePath etc
changelog: ! "0.8:\n\n* relPath, absPath, filePath, dirPath deprecated in favor of\n
  \ Path.rel, Path.abs, Path.absRel, Path.file, Path.dir\n  Same for the according
  type synonyms.\n\n* Deprecate extended path construction functions:\n  mkAbsPath,
  mkAbsPathFromCwd, mkPathAbsOrRel, mkPathFileOrDir\n  You better combine path constructors
  and further manipulations.\n\n* Deprecate functions based on path strings.\n  You
  should better use functions from the filepath package.\n\n* absRel -> withAbsRel,
  fileDir -> withFileDir\n  We do not need these functions very often\n  and instead
  we need Path.absRel as constructor name\n  that is consistent with Path.abs and
  Path.rel.\n\n* Split main module into multiple one,\n  in order to use a consistent
  name set for every aspect.\n\n  E.g. we have:\n  Path.Abs: an absolute path\n  Path.Part.Abs:
  absolute (drive) part of a path\n  Path.PartClass.Abs: class for an absolute part\n\n
  \ Path.AbsRel: an absolute or relative path\n  Path.Part.AbsRel: initial part of
  an absolute or relative path\n  Path.PartClass.AbsRel: class for absolute or relative
  parts\n\n  Path.Abs -> Part.Abs\n  Path.AbsOrRel -> Part.AbsRel\n  Path.AbsOrRelClass
  -> PartClass.AbsRel\n  Path.FileOrDirClass -> PartClass.FileDir\n\n0.7:\n\n* Move
  absRel and fileDir out of their classes.\n  A problem would arise if someone writes\n
  \   import System.Path (AbsRelClass(absRel))\n  He would have to replace it by\n
  \   import System.Path (AbsRelClass, absRel)\n\n* Monoid instance for Path.RelDir\n
  \ Requires helper classes IsRel, IsDir.\n  IsAbs and IsFile added for completeness.\n\n*
  Declare infix precedences of </>, <.> and <++> such that we can write:\n    dir0
  </> dir1 </> dir2 </> base <++> \"-foo\" <++> \"-bar\" <.> \"tar\" <.> \"gz\"\n
  \ This is similar to the fixities in the 'filepath' package,\n  but differs slightly\n
  \ since in our package paths and extensions have different types.\n\n* Import packages
  'transformers' and 'utility-ht'\n  that allow for some simplifications.\n\n* Deprecate
  asPath,\n    asRelFile, asRelDir, asAbsFile, asAbsDir,\n    asRelPath, asAbsPath,
  asFilePath, asDirPath\n\n* Recommended are now the checking constructors 'path',
  maybePath, parsePath,\n    relFile, relDir, absFile, absDir,\n    relPath, absPath,
  filePath, dirPath\n\n* replace IsString instance for OverloadedStrings\n  by an
  instance that cannot be implemented.\n\n* getDirectoryContents is no longer synonym
  to relDirectoryContents.\n  Instead it returns the list of all directory objects
  as RelFileOrDir.\n  This is closer to the getDirectoryContents function\n  from
  the 'directory' package.\n\n* clarify meaning of AbsRel and FileDir tags of a path\n\n*
  clarify meaning of drive-relative paths on Windows\n\n* clarify handling of file
  system links\n\n0.6:\n\n* joinPath: restrict to RelPath and atomic path components\n\n*
  Add type class constraints and restrict types\n  in order to make the functions
  work with the new datatype.\n  E.g. we need to fix the type to FilePath\n  wherever
  a function requires a non-empty path.\n\n* Add support for MS Windows paths with
  leading drive labels\n\n0.5.5:\n\n* AbsRelClass, FileDirClass: turn into closed-world
  classes.\n  Strict accordance to PVP would require to bump version to 0.6,\n  but
  since the user cannot write instances of this class,\n  we can hardly break code.\n\n*
  instance {Show, Read} Path now emit and parse valid Haskell expressions\n\n* IO.withFile
  restricted to FilePath\n  This changes API but it should only break buggy code.\n\n0.5.4.3:\n\n*
  Make test suite static part of the source code,\n  but maintain a program to update
  the test suite to changed tests.\n\n0.5.4.1:\n\n* Merge git back to darcs, continue
  on hub.darcs.net\n\n0.5.4:\n\n* Migrated from darcs to git (on GitHub)\n\n0.5.3:\n\n*
  Upgrades + changes for GHC 7.6.1 - by Ben Millwood\n\n0.5.0:\n\n* Added System.Path.Windows
  and System.Path.Posix modules. These are modelled on the System.FilePath approach
  to supporting the two styles of path.\n\n0.0.2:\n\n* Split System.Path.Directory
  into its own module\n* Implemented covers for all the remaining System.Directory
  functions\n* Renamed 'hasExtension' to 'hasAnExtension', and added new 'hasExtension'
  fn which checks for a given extension\n* Renamed the '...FileOrDir...' functions
  to be 'generic...' (thanks to Neil Mitchell for the suggestion!)\n* Added support
  for OverloadedStrings\n* Renamed the 'mk...' unchecked construction functions to
  'as...' to better reflect what they do\n* Added: makeAbsolute, makeAbsoluteFromCwd,
  genericMakeAbsolute, genericMakeAbsoluteFromCwd\n* Added: mkAbsPath, mkAbsPathFromCwd\n*
  Added System.Path.IO to cover System.IO\n* Made the internal 'Path' type strict\n*
  Removed 'splitDirectories' as it serves no purpose not covered by 'splitPath'\n*
  Changed behaviour of 'getDirectoryContents' to return relative paths\n* Fixed the
  type of 'setCurrentDirectory'\n\n0.0.1:\n\nInitial Release\n"
basic-deps:
  base: ! '>=4 && <5'
  time: ! '>=1.0 && <2'
  semigroups: ! '>=0.1 && <1.0'
  utility-ht: ! '>=0.0.11 && <0.1'
  tagged: ! '>=0.7 && <0.9'
  old-time: ! '>=1.0 && <2'
  transformers: ! '>=0.3 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  QuickCheck: ! '>=2.1.0.1 && <3'
  directory: ! '>=1 && <1.2'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.4.1
- 0.5.4.2
- 0.5.4.3
- 0.5.5
- '0.6'
- '0.7'
- 0.7.0.1
- '0.8'
- 0.8.1
author: Ben Moseley, Ben Millwood, Henning Thielemann
latest: 0.8.1
description-type: markdown
description: ! "# Construction of type-safe paths\n\nYou can use the construction
  functions as follows:\n\n    f :: Path.RelFile\n    f = relDir \"tmp\" </> relFile
  \"someFile\" <.> \"ext\"\n\nor ...\n\n    f :: Path.RelFile\n    f = dirPath \"tmp\"
  </> filePath \"someFile\" <.> \"ext\"\n\nor ...\n\n    f :: Path.RelFile\n    f
  = path \"tmp\" </> path \"someFile\" <.> \"ext\"\n\nor just ...\n\n    f :: Path.RelFile\n
  \   f = relFile \"tmp/someFile.ext\"\n\nThe first and the last implementations force
  the most specific types\nand thus should be prefered.\n\nOverloaded string literals
  are no longer supported,\nsince this extension is intended for alternative text
  storage types.\nIt would also decrease the type safety\nif you could omit the path
  type and let the compiler guess its type.\n\n\n# Modules\n\nYou will typically want
  to import as follows:\n\n    import qualified System.Path.Directory as Dir\n    import
  qualified System.Path.IO as PathIO\n    import qualified System.Path as Path\n    import
  System.Path ((</>))\n\n`System.Path.Generic` provides all functions with the OS
  as type parameter.\n`System.Path.Posix` and `System.Path.Windows`\noffers only path
  constructors and destructors\nfixed to the corresponding operating system.\n`System.Path`
  exports either `System.Path.Posix` or `System.Path.Windows`\ndepending on the host
  system\nand additionally the manipulation functions from `System.Path.Generic`.\nThis
  mix should be appropriate for the average use\nand should free the user from writing
  type annotations.\n\n\n# How to choose proper type arguments\n\nThe `ar` and the
  `fd` type parameters have quite different meaning.\nThe types `Abs` and `Rel` refer
  to a property of the path,\nwhereas the type `File` and `Dir` refers to a property
  of a disk object.\nYou can decide whether a path is absolute or relative\nby just
  watching (the beginning of) the path string.\nIn contrast to that, you have to access
  the disk\nin order to check the existence and type of an disk object.\nEven more,
  the disk object might change at any time,\ne.g. the user might delete a file and
  create a directory of the same name,\nor the disk object might not exist,\nand the
  purpose of the path is to create an according file or directory.\nThat's why even
  if you have a path of type `FilePath ar`,\nevery function accessing the file must
  check\nthat the refered object exists and is a file.\nConversely, there is not much
  sense in checking the disk object type\nand then chosing the path accordingly.\nInstead,
  you must choose the path type according\nto what type of disk object your application
  needs.\nThe reality check must be performed\nand is performed by the standard functions\nfor
  every access to the object.\nIf an disk object is not of the type required by the
  path type\nthen this is a runtime exception that must be handled at runtime\nbut
  it is not a programming error.\n\nSometimes you have to change the type of a path\nas
  an intermediate step to construct a path for an object of different type.\nE.g.
  you may convert the path \"pkg\" from `DirPath` to `FilePath`\nbecause in the next
  step you like to extend it to \"pkg.tar.gz\".\nThis is valid use of the `Path` type.\nE.g.
  the function `dropExtensions`\nreduces the `FilePath` \"pkg.tar.gz\" to the new
  `FilePath` \"pkg\"\nalthough no-one expects that there is or will be a file with
  name \"pkg\".\nThus, if a function has a `FilePath` parameter\nthen there is no
  warranty that it accesses the according file\nand does not touch related disk objects.\nIt
  may well be that the function derives other file and directory names\nfrom the path
  and accesses them.\nThat is, a `FilePath` or `DirPath` parameter\nis mainly for
  documentation purposes\nbut it cannot prevent you seriously from any damage.\n\n\n#
  How to cope with user input\n\nYou may get a path from the user, e.g. as command-line
  argument.\nIt might be either absolute or relative\nand it might refer to an actual
  file or directory or\nto something yet non-existing.\nIn most cases it will not
  be important\nwhether the path is absolute or relative,\nthus you should choose
  the `AbsRel` type parameter.\nIf somewhere in the program an `Abs` path is needed\nthen
  you can assert that the path is actually absolutized somewhere\ne.g. by `dynamicMakeAbsolute`.\nIf
  you prevent usage of `genericMakeAbsolute`\nthen you avoid to absolutize a path
  that is already absolutized.\n\nThe choice of the `fd` type parameter follows a
  different reasoning:\nOften you have a clear idea of\nwhether the user must pass
  a file or directory path.\nThe rule is: Just give the path the type you expect\nbut
  do not perform any checking\n(unless you want to warn the user earlier about imminent
  danger).\nThe disk object type must checked for every access to the object, anyway,\nso
  there is no point in checking it immediately.\nWith your choice of the `fd` parameter\nyou
  just document its intended use.\n\nIt might be that the path is only a base name\nused
  to construct other directory and file names.\nE.g. for an Audacity project named
  `music`\nyou have to create the directory `music_data` and the file `music.aup`.\nIn
  this case we recommend to give `music` the type `FilePath`.\nThis type warrants
  that there is at least one final path component\nin contrast to a directory path
  that might be empty.\nYou can easily convert a file path to a directory path\nusing
  `Path.dirFromFile`.\nThe reverse conversion is partial.\n\n\n# AbsRel vs. `ar` type
  parameter\n\nIn your application you will often know\nwhether your path denotes
  a file or directory,\nthus you will use the `Path.File` or `Path.Dir` type synonym.\nIn
  contrast to that, you will often not know\nwhether the path is relative or absolute\nand
  often it does not even matter.\nYou can express this either by using the monomorphic
  type `Path.AbsRelFile`\nor by using the parameterized type `Path.File ar`\nwith
  constraint `PathClass.AbsRel ar`.\nWe recommend to use the first variant for command-line
  option parsing\nand the second one for the application functions.\nWhen you parse
  options it is the time where you know that you do not know\nwhether the path is
  absolute or relative.\nThat is, you could neither parse it as `Path.Abs` nor as
  `Path.Rel`.\nThus a type variable makes no sense.\nYou should always parse to type
  `Path.AbsRel`.\nConversely, your application would work equally well with\n`Path.Abs`,
  `Path.Rel` and `Path.AbsRel`.\nThus, using an `ar` type variable is the way to go.\nYou
  must make sure to use different `ar`-like variables for independent paths.\nBy equality
  of `ar`-like type variables\nyou can also document dependencies of paths for the
  programmers.\n\n\n# Command-line argument parsing with `optparse-applicative`\n\nFor
  parsing of path options with the `optparse-applicative` package\nyou might use the
  following helper functions:\n\n    module Option where\n\n    import qualified System.Path.PartClass
  as PathC\n    import qualified System.Path as Path\n    import qualified Options.Applicative
  as OP\n\n    path :: (PathC.FileDir fd) => OP.ReadM (Path.AbsRel fd)\n    path =
  OP.eitherReader Path.parse\n\n    pathArgument ::\n       PathC.FileDir fd =>\n
  \      OP.Mod OP.ArgumentFields (Path.AbsRel fd) -> OP.Parser (Path.AbsRel fd)\n
  \   pathArgument = OP.argument path\n\n    pathOption ::\n       PathC.FileDir fd
  =>\n       OP.Mod OP.OptionFields (Path.AbsRel fd) -> OP.Parser (Path.AbsRel fd)\n
  \   pathOption = OP.option path\n\nIt performs minimal checking of path strings
  as part of option parsing.\nE.g. it will report a user error if the user passes
  \"abc/\" as a file path.\n\n\n# File system links\n\nThis package does not explicitly
  handle file system links.\nWe treat a file path containing links like any other
  file path.\nThe same holds for directory paths.\nA link is handled like any other
  path component.\n\n\n# Drive-relative paths on MS Windows\n\nWe use the `Rel` type
  for paths that can be relative to any directory.\nWe use the `Abs` type for all
  other paths,\ni.e. for paths with explicit locations or\nwith restrictions on the
  set of locations.\nWindows has a notion of drives and\nmaintains a current directory
  for every drive.\nE.g. the path `\"c:text.txt\"` refers to the current directory
  of drive `C`.\nSince it cannot be freely combined with other directories\nwe treat
  this path like an absolute path.\nThis is consistent with the behaviour of the `filepath`
  package.\nE.g. `filepath` evaluates all of the expressions\n`\"\\\\abs\" </> \"c:driverel\"`,
  `\"c:\\\\abs\" </> \"c:driverel\"`,\n`\"d:\\\\abs\" </> \"c:driverel\"` to `\"c:driverel\"`.\nIn
  our package you would have to use `genericMakeAbsolute`\nbut we recommend to avoid
  its use.\n\n\n# Path format strings\n\nYou might allow a user to pass a format string
  such as\n`\"page%06d.png\"` to your program.\nHow to integrate this into the type-safe
  path handling?\nWe recommend not to use the `Path` for the format string\nbut instead
  to define a custom type:\n\n    newtype Format ar fd = Format String\n\n    printf
  ::\n       (PathC.AbsRel ar) =>\n       Format ar fd -> Int -> Either String (Path
  ar fd)\n    printf (Format fmt) n = Path.parse (Pf.printf fmt n)\n\nThis makes sure
  that you will access a path on disk\nonly after formatting the path string.\n\n\n#
  Known problems\n\n## Mac\n\nCurrently we select the Posix module on Mac systems.\nOn
  the one hand this choice is right\nsince Mac uses slashes for path component separation.\nOn
  the other hand it is wrong\nsince Mac ignores case when comparing filepaths.\n"
license-name: BSD-3-Clause
