homepage: ''
changelog-type: ''
hash: f131254335879a7b5ca93d301ecff23b5fbb008c0dd576988f9f7a7b90a9057f
test-bench-deps:
  test-framework-hunit: ! '>=0.2 && <0.4'
  bytestring: ! '>=0.9 && <0.11'
  test-framework: ! '>=0.4 && <0.9'
  base: ! '>=3 && <5'
  filepath: ! '>=1.2 && <2'
  test-framework-quickcheck2: ! '>=0.2 && <0.4'
  parsec: ! '>=3 && <4'
  HUnit: ! '>=1.2 && <1.3'
  QuickCheck: ! '>=2.4 && <2.8'
  template-haskell: ! '>=2.5 && <3'
  directory: ! '>=1.1 && <2'
maintainer: manpacket@gmail.com
synopsis: TH parser generator for splitting bytestring into fixed-width fields
changelog: ''
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=3 && <5'
  filepath: ! '>=1.2 && <2'
  parsec: ! '>=3 && <4'
  template-haskell: ! '>=2.5 && <3'
  directory: ! '>=1.1 && <2'
all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.6
- 0.2.0.7
author: Michael Baikov
latest: 0.2.0.7
description-type: markdown
description: ! "parsergen\n=========\n\n[![Build Status](https://secure.travis-ci.org/tsurucapital/parsergen.png?branch=master)](http://travis-ci.org/tsurucapital/parsergen)\n\nIntroduction\n------------\n\n`parsergen`
  is a library aimed at generating fast Haskell parsers for fixed\nwidth packets.
  It uses a DSL in which these packets can be specified, augmented\nwith Haskell parsers.\n\nIn
  order to create a packet and a parser for it, usually two files are used,\n`Foo.hs`
  and `Foo.ths`.\n\nTutorial\n--------\n\n### Datatypes and parsers\n\n#### Syntax\n\nLet's
  start by defining a datatype in the `.ths` file. The syntax here is:\n\n    TypeName\n
  \     ConstructorName [fields prefix]\n        [Nx] [_]FieldName [!] FieldType [+]FieldWidth
  [FieldParser]\n\nwhere\n\n- `TypeName`: Name of the type itself, e.g. `Maybe`\n\n-
  `ConstructorName`: Name of constructor with given set of fields. If no prefix\n
  \ is provided, downcased capital letters from the constructor name will be used\n
  \ instead.\n\n- `Nx`: Number of times to repeat this matcher\n\n- `FieldName`: Name
  of the field which will be used (with constructor prefix\n  prepended)\n\n- `_`:
  This field will be ignored (skipped if possible or parsed)\n\n- `!`: This field
  will be strict\n\n- `FieldType`: type name when using existing datatype, e.g. `Int`
  or\n  `ByteString`, or a custom type `Foo`\n\n- `FieldWidth`: Number for size based
  parsing, e.g. `12`. This field is needed\n  to perform some optimisations as well,
  so you have to specify field width even\n  if you going to specify `FieldParser`.\n\n-
  `+`: Only for numerical fields: the first character will be treated as the\n  sign\n\n-
  `FieldParser`: A parser which will be used to parse it. This can be omitted\n  for
  types such as `Int` or `ByteString`. Otherwise, you can either specify a\n  fixed
  string or a parser of the type `Parser`.\n\nIn the `.hs` file, one can now use:\n\n
  \   $(genDataTypeFromFile \"Foo.ths\")\n    $(genParserFromFile   \"Foo.ths\")\n\nto
  generate a parser and a datatype for it.\n\n#### Example\n\nLet's look at an example
  `.ths` file:\n\n    Packet\n      Warning\n        _PacketType       ByteString
  \    4  \"WARN\"\n        DangerType        DangerType     2  dangerType\n        ChanceOfSurvival
  \ Int            3\n\n      LotteryWin\n        _PacketType       ByteString     4
  \ \"LOTT\"\n        Amount            Money         10\n        6x WinningEntry
  \  LotteryEntry   2\n\nAnd the `.hs` file:\n\n    {-# LANGUAGE OverloadedStrings,
  TemplateHaskell #-}\n    import Data.ByteString (ByteString)\n    import ParserGen.Gen\n
  \   import ParserGen.Repack  -- Needed later on\n    import qualified ParserGen.Parser
  as P\n\n    data DangerType\n        = Earthquake\n        | ZombieApocalypse\n
  \       | RobotUprising\n        | AngryGirlfriend\n        deriving (Eq, Show)\n\n
  \   dangerType :: P.Parser DangerType\n    dangerType = do\n        bs <- P.take
  2\n        case bs of\n            \"EQ\" -> return Earthquake\n            \"ZA\"
  -> return ZombieApocalypse\n            \"RI\" -> return RobotUprising\n            \"AG\"
  -> return AngryGirlfriend\n            _    -> fail $ \"Unknown danger type: \"
  ++ show bs\n\n    newtype Money = Money Int\n        deriving (Eq, Show)\n\n    type
  LotteryEntry = Int\n\n    $(genDataTypeFromFile \"Packet.ths\")\n    $(genParserFromFile
  \  \"Packet.ths\")\n\n    sampleWarning :: ByteString\n    sampleWarning = \"WARNRI002\"\n\n
  \   sampleLotteryWin :: ByteString\n    sampleLotteryWin = \"LOTT9999999999040815162342\"\n\n
  \   main :: IO ()\n    main = do\n        print $ P.parse parserForWarning sampleWarning\n
  \       print $ P.parse parserForLotteryWin sampleLotteryWin\n\nThe `parsergen`
  generates:\n\n- The `Packet` datatype\n- The parser functions `parserForWarning,
  parserForLotteryWin :: Parser Packet`\n\nNote how we have used three kinds of parsers:\n\n-
  `\"WARN\"` is an example of a hardcoded string which the packet must match\n- `dangerType`
  is a custom parser, specified in the Haskell file\n- We don't specify parsers for
  numeral types, these are automatically derived\n  (even for `newtype`s and `type`
  synonyms)\n\n### Repackers\n\nA powerful feature from the library, repackers allow
  us to change the contents\nof multiple fields without actually parsing a packet.\n\n####
  Syntax\n\nThe syntax looks like this:\n\n    repackerForName ConstructorName\n      FieldName
  [FieldUnParser]\n\n#### Example\n\nLet's add the following the bottom of our `.ths`
  file:\n\n    repackerForLotteryNumbers LotteryWin\n      WinningEntry\n\nAnd the
  following to our Haskell file:\n\n    $(genRepackFromFile \"Packet.ths\")\n\nwhich
  generates the function\n\n    repackerForLotteryNumbers :: [LotteryEntry] -> ByteString
  -> ByteString\n\nUse it like:\n\n    print $ repackerForLotteryNumbers [1 .. 6]
  sampleLotteryWin\n\nThings to note:\n\n- For numerical types, you don't need to
  specify an unparser, this is only\n  needed for custom types. These should have
  the type `SomeType -> ByteString`.\n- The repacker will take a list when the field
  is repeated (e.g. `6x` in this\n  case) and a single value otherwise\n"
license-name: BSD-3-Clause
