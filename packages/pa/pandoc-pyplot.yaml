homepage: https://github.com/LaurentRDC/pandoc-pyplot#readme
changelog-type: markdown
hash: 700da224bfad9bd6892116be07f64ddb2e1a87c47d646304a656048a54eb13c3
test-bench-deps:
  pandoc-pyplot: -any
  base: ! '>=4 && <5'
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  pandoc-types: ! '>=1.12 && <=2'
  tasty-hunit: -any
  temporary: -any
  tasty: -any
  hspec-expectations: -any
  directory: -any
maintainer: Laurent P. René de Cotret
synopsis: A Pandoc filter for including figures generated from Matplotlib
changelog: |-
  # Change log

  pandoc-pyplot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)

  Release 2.0.1.0
  ---------------

  * Support for Markdown formatting in figure captions, including LaTeX math.

  Release 2.0.0.0
  ---------------

  Many **breaking changes** in this release:

  * `pandoc-pyplot` will now determine the filename based on hashing the figure content. Therefore, figures will only be re-generated if necessary.
  * Removed the ability to control the filename and format directly using the `plot_target=...` attribute.
  * Added the ability to control the directory in which figures will be saved using the `directory=...` attribute.
  * Added the possibility to control the figures dots-per-inch (i.e. pixel density) with the `dpi=...` attribute.
  * Added the ability to control the figure format with the `format=...` attribute. Possible values are currently `"png"`, `"svg"`, `"pdf"`, `"jpg"`/`"jpeg"` and `"eps"`.
  * The confusing `plot_alt=...` attribute has been renamed to `caption=...` for obvious reasons.
  * The `plot_include=...` attribute has been renamed to `include=...`.
  * Added the generation of a higher resolution figure for every figure `pandoc-pyplot` understands.

  Release 1.1.0.0
  ---------------

  * Added the ability to include Python files before code using the `plot_include=script.py` attribute.
  * Added a test suite.

  Release 1.0.3.0
  ---------------

  * Fixed an issue where `pandoc-pyplot` would not build with base < 4.9 (#1)

  Release 1.0.2.0
  ---------------

  * Added support for captions using the `plot_alt=...` attribute. For example:

    ```markdown
      ```{plot_target=test.png plot_alt="This is a caption"}
      import matplotlib.pyplot as plt
      plt.figure()
      plt.plot([1,2,3,4,5],[1,2,3,4,5])
      ```
    ```

  Release 1.0.1.0
  ---------------

  * Added `plotTransform :: Pandoc -> IO Pandoc` function to transform entire documents. This makes it easier to integrate `pandoc-pyplot` into Hakyll-based sites!

  Release 1.0.0.1
  ---------------

  * Updated README with fixes and warnings
  * Added top-level package documentation compatible with Haddock
  * Added Unsafe language extension, as this filter will run arbitrary Python scripts.

  Release 1.0.0.0
  ---------------

  Initial release.

  See documentation on [Hackage](https://hackage.haskell.org/package/pandoc-pyplot)
basic-deps:
  pandoc-pyplot: -any
  base: ==4.*
  text: -any
  filepath: -any
  pandoc-types: ! '>1.12 && <2'
  containers: -any
  pandoc: ! '>2 && <3'
  typed-process: -any
  hashable: ! '>1 && <2'
  temporary: -any
  directory: -any
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.1.0
- 1.0.2.0
- 1.0.3.0
- 1.1.0.0
- 2.0.0.0
- 2.0.1.0
author: Laurent P. René de Cotret
latest: 2.0.1.0
description-type: markdown
description: "# pandoc-pyplot - A Pandoc filter to generate Matplotlib figures directly
  in documents\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-pyplot.svg)](http://hackage.haskell.org/package/pandoc-pyplot)
  [![Stackage version (LTS)](http://stackage.org/package/pandoc-pyplot/badge/lts)](http://stackage.org/nightly/package/pandoc-pyplot)
  [![Stackage version (nightly)](http://stackage.org/package/pandoc-pyplot/badge/nightly)](http://stackage.org/nightly/package/pandoc-pyplot)
  [![Build status](https://ci.appveyor.com/api/projects/status/qbmq9cyks5jup48e?svg=true)](https://ci.appveyor.com/project/LaurentRDC/pandoc-pyplot)
  ![](https://img.shields.io/badge/license-MIT-green.svg)\r\n\r\n`pandoc-pyplot` turns
  Python code present in your documents to embedded Matplotlib figures.\r\n\r\n##
  Usage\r\n\r\nThe filter recognizes code blocks with the `pyplot` class present.
  It will run the script in the associated code block in a Python interpreter and
  capture the generated Matplotlib figure.\r\n\r\nHere is a basic example using the
  scripting `matplotlib.pyplot` API:\r\n\r\n```markdown\r\n    ```{.pyplot}\r\n    import
  matplotlib.pyplot as plt\r\n\r\n    plt.figure()\r\n    plt.plot([0,1,2,3,4], [1,2,3,4,5])\r\n
  \   plt.title('This is an example figure')\r\n    ```\r\n```\r\n\r\nPutting the
  above in `input.md`, we can then generate the plot and embed it:\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md --output output.html\r\n```\r\n\r\nor\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md --output output.pdf\r\n```\r\n\r\nor any other output
  format you want. `pandoc-pyplot` is efficient, too: it will detect which figures
  should be re-generated, and skip the others.\r\n\r\nThere are more examples in the
  [source repository](https://github.com/LaurentRDC/pandoc-pyplot), in the `\\examples`
  directory.\r\n\r\n## Features\r\n\r\n### No wasted work\r\n\r\n`pandoc-pyplot` minimizes
  work, only generating figures if it absolutely must. Therefore, you can confidently
  run the filter on very large documents containing dozens of figures --- like a book
  or a thesis --- and only the figures which have recently changed will be re-generated.\r\n\r\n###
  Link to source code and high-resolution figure\r\n\r\nIn case of an output format
  that supports links (e.g. HTML), the embedded image generated by `pandoc-pyplot`
  will be a link to the source code which was used to generate the file. Therefore,
  other people can see what Python code was used to create your figures. A high resolution
  image will be made available in a caption link.\r\n\r\n### Captions\r\n\r\nYou can
  also specify a caption for your image. This is done using the optional `caption`
  parameter:\r\n\r\n```markdown\r\n    ```{.pyplot caption=\"This is a simple figure\"}\r\n
  \   import matplotlib.pyplot as plt\r\n\r\n    plt.figure()\r\n    plt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\n    plt.title('This is an example figure')\r\n    ```\r\n```\r\n\r\nCaption
  formatting is either plain text or Markdown. LaTeX-style math is also support in
  captions (using dollar signs $...$).\r\n\r\n### Including scripts\r\n\r\nIf you
  find yourself always repeating some steps, inclusion of scripts is possible using
  the `include` parameter. For example, if you want all plots to have the [`ggplot`](https://matplotlib.org/tutorials/introductory/customizing.html#sphx-glr-tutorials-introductory-customizing-py)
  style, you can write a very short preamble `style.py` like so:\r\n\r\n```python\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n```\r\n\r\nand include it
  in your document as follows:\r\n\r\n```markdown\r\n    ```{.pyplot include=style.py}\r\n
  \   plt.figure()\r\n    plt.plot([0,1,2,3,4], [1,2,3,4,5])\r\n    plt.title('This
  is an example figure')\r\n    ```\r\n```\r\n\r\nWhich is equivalent to writing the
  following markdown:\r\n\r\n```markdown\r\n    ```{.pyplot}\r\n    import matplotlib.pyplot
  as plt\r\n    plt.style.use('ggplot')\r\n\r\n    plt.figure()\r\n    plt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\n    plt.title('This is an example figure')\r\n    ```\r\n```\r\n\r\nThis
  `include` parameter is perfect for longer documents with many plots. Simply define
  the style you want in a separate script! You can also import packages this way,
  or define functions you often use.\r\n\r\n## Installation\r\n\r\n### Binaries\r\n\r\nWindows
  binaries are available on [GitHub](https://github.com/LaurentRDC/pandoc-pyplot/releases).
  Place the executable in a location that is in your PATH to be able to call it.\r\n\r\n###
  Installers\r\n\r\nWindows installers are made available thanks to [Inno Setup](http://www.jrsoftware.org/isinfo.php).
  You can download them from the [release page](https://github.com/LaurentRDC/pandoc-pyplot/releases/latest).\r\n\r\n###
  From Hackage/Stackage\r\n\r\n`pandoc-pyplot` is available on Hackage. Using the
  [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n```bash\r\ncabal
  update\r\ncabal install pandoc-pyplot\r\n```\r\n\r\nSimilarly, `pandoc-pyplot` is
  available on Stackage:\r\n\r\n```bash\r\nstack update\r\nstack install pandoc-pyplot\r\n```\r\n\r\n###
  From source\r\n\r\nBuilding from source can be done using [`stack`](https://docs.haskellstack.org/en/stable/README/)
  or [`cabal`](https://www.haskell.org/cabal/):\r\n\r\n```bash\r\ngit clone https://github.com/LaurentRDC/pandoc-pyplot\r\ncd
  pandoc-pylot\r\nstack install # Alternatively, `cabal install`\r\n```\r\n\r\n##
  Running the filter\r\n\r\n### Requirements\r\n\r\nThis filter only works with the
  Matplotlib plotting library. Therefore, you a Python interpreter and at least [Matplotlib](https://matplotlib.org/)
  installed. The Python interpreter is expected to be discoverable using the name
  `\"python\"` (as opposed to `\"python3\"`, for example)\r\n\r\nYou can use the filter
  with Pandoc as follows:\r\n\r\n```bash\r\npandoc --filter pandoc-pyplot input.md
  --output output.html\r\n```\r\n\r\nIn which case, the output is HTML. Another example
  with PDF output:\r\n\r\n```bash\r\npandoc --filter pandoc-pyplot input.md --output
  output.pdf\r\n```\r\n\r\nPython exceptions will be printed to screen in case of
  a problem.\r\n\r\n`pandoc-pyplot` has a very limited command-line interface. Take
  a look at the help available using the `-h` or `--help` argument:\r\n\r\n```bash\r\npandoc-pyplot
  --help\r\n```\r\n\r\n## Usage as a Haskell library\r\n\r\nTo include the functionality
  of `pandoc-pyplot` in a Haskell package, you can use the `makePlot :: Block -> IO
  Block` function (for single blocks) or `plotTransform :: Pandoc -> IO Pandoc` function
  (for entire documents).\r\n\r\n### Usage with Hakyll\r\n\r\nThis filter was originally
  designed to be used with [Hakyll](https://jaspervdj.be/hakyll/). In case you want
  to use the filter with your own Hakyll setup, you can use a transform function that
  works on entire documents:\r\n\r\n```haskell\r\nimport Text.Pandoc.Filter.Pyplot
  (plotTransform)\r\n\r\nimport Hakyll\r\n\r\n-- Unsafe compiler is required because
  of the interaction\r\n-- in IO (i.e. running an external Python script).\r\nmakePlotPandocCompiler
  :: Compiler (Item String)\r\nmakePlotPandocCompiler =\r\n  pandocCompilerWithTransformM\r\n
  \   defaultHakyllReaderOptions\r\n    defaultHakyllWriterOptions\r\n    (unsafeCompiler
  . plotTransform)\r\n```\r\n\r\n## Warning\r\n\r\nDo not run this filter on unknown
  documents. There is nothing in `pandoc-pyplot` that can stop a Python script from
  performing **evil actions**. This is the reason this package is deemed __unsafe__
  in the parlance of [Safe Haskell](https://ghc.haskell.org/trac/ghc/wiki/SafeHaskell).\r\n"
license-name: MIT
