homepage: https://github.com/LaurentRDC/pandoc-pyplot#readme
changelog-type: markdown
hash: 26615ba6618305cc2f74498355b034a868cb200dbc973ab27e8f9105f17fbb7e
test-bench-deps: {}
maintainer: Laurent P. René de Cotret
synopsis: A Pandoc filter for including figures generated from Matplotlib
changelog: ! '# Change log


  pandoc-pyplot uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/githubuser/pandoc-pyplot/releases

'
basic-deps:
  pandoc-pyplot: -any
  base: ! '>4.9 && <5'
  filepath: -any
  pandoc-types: ! '>1.12 && <2'
  containers: -any
  typed-process: -any
  temporary: -any
  directory: -any
all-versions:
- '1.0.0.0'
- '1.0.0.1'
- '1.0.1.0'
- '1.0.2.0'
author: Laurent P. René de Cotret
latest: '1.0.2.0'
description-type: markdown
description: ! "# pandoc-pyplot\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-pyplot.svg)](http://hackage.haskell.org/package/pandoc-pyplot)
  [![Stackage version](http://stackage.org/package/pandoc-pyplot/badge/nightly)](http://stackage.org/nightly/package/pandoc-pyplot)
  [![Build status](https://ci.appveyor.com/api/projects/status/qbmq9cyks5jup48e?svg=true)](https://ci.appveyor.com/project/LaurentRDC/pandoc-pyplot)\r\n\r\n##
  A Pandoc filter for generating figures with Matplotlib from code directly in documents\r\n\r\nInspired
  by [sphinx](https://sphinxdoc.org)'s `plot_directive`, `pandoc-pyplot` helps turn
  Python code present in your documents to embedded Matplotlib figures.\r\n\r\n##
  Usage\r\n\r\nThe filter recognizes code blocks with the `plot_target` attribute
  present. It will run the script in the associated code block in a Python interpreter
  and capture the generated Matplotlib figure. This captured figure will be saved
  in the located specific by `plot_target`.\r\n\r\n### Basic example\r\n\r\nHere is
  a basic example using the scripting `matplotlib.pyplot` API:\r\n\r\n```markdown\r\n
  \   ```{plot_target=my_figure.jpg}\r\n    import matplotlib.pyplot as plt\r\n\r\n
  \   plt.figure()\r\n    plt.plot([0,1,2,3,4], [1,2,3,4,5])\r\n    plt.title('This
  is an example figure')\r\n    ```\r\n```\r\n\r\n`pandoc-pyplot` will determine whether
  the `plot_target` is a relative or absolute path. In case of a relative path (like
  above), all paths will be considered relative to the current working directory.\r\n\r\nWe
  can control the format of the output file by changing the `plot_target` file extension.
  All formats supported by Matplotlib on your machine are available.\r\n\r\nPutting
  the above in `input.md`, we can then generate the plot and embed it:\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md --output output.html\r\n```\r\n\r\nor\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md --output output.pdf\r\n```\r\n\r\nor any other output
  format you want. There are more examples in the source repository, in the `\\examples`
  directory.\r\n\r\n### Link to source code\r\n\r\nIn case of an output format that
  supports links (e.g. HTML), the embedded image generated by `pandoc-pyplot` will
  be a link to the source code which was used to generate the file. Therefore, other
  people can see what Python code was used to create your figures.\r\n\r\n### Captions\r\n\r\nYou
  can also specify a caption for your image. This is done using the optional `plot_alt`
  parameter:\r\n\r\n```markdown\r\n    ```{plot_target=my_figure.jpg, plot_alt=\"This
  is a simple figure\"}\r\n    import matplotlib.pyplot as plt\r\n\r\n    plt.figure()\r\n
  \   plt.plot([0,1,2,3,4], [1,2,3,4,5])\r\n    plt.title('This is an example figure')\r\n
  \   ```\r\n```\r\n\r\n## Installation\r\n\r\n### Binaries\r\n\r\nWindows binaries
  are available on [GitHub](https://github.com/LaurentRDC/pandoc-pyplot/releases).
  Place the executable in a location that is in your PATH to be able to call it.\r\n\r\n###
  From Hackage/Stackage\r\n\r\n`pandoc-pyplot` is available on Hackage. Using the
  [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n```bash\r\ncabal
  update\r\ncabal install pandoc-pyplot\r\n```\r\n\r\nSimilarly, `pandoc-pyplot` is
  available on Stackage:\r\n\r\n```bash\r\nstack update\r\nstack install pandoc-pyplot\r\n```\r\n\r\n###
  From source\r\n\r\nBuilding from source can be done using [`stack`](https://docs.haskellstack.org/en/stable/README/)
  or [`cabal`](https://www.haskell.org/cabal/):\r\n\r\n```bash\r\ngit clone github.com/LaurentRDC/pandoc-pyplot.git\r\ncd
  pandoc-pylot\r\nstack install # Alternatively, `cabal install`\r\n```\r\n\r\n##
  Running the filter\r\n\r\n### Requirements\r\n\r\nThis filter only works with the
  Matplotlib plotting library. Therefore, you a Python interpreter and at least [Matplotlib](https://matplotlib.org/)
  installed. The python interpreter is expected to be discoverable using the name
  `\"python\"` (as opposed to `\"python3\"`, for example)\r\n\r\nThe filter program
  must be in your `PATH`. In case it is, you can use the filter with Pandoc as follows:\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md output.html\r\n```\r\n\r\nAnother example with PDF
  output:\r\n\r\n```bash\r\npandoc --filter pandoc-pyplot input.md output.pdf\r\n```\r\n\r\nPython
  exceptions will be printed to screen in case of a problem.\r\n\r\n`pandoc-pyplot`
  has a very limited command-line interface. Take a look at the help available using
  the `-h` or `--help` argument:\r\n\r\n```bash\r\npandoc-pyplot --help\r\n```\r\n\r\n##
  Usage as a Haskell library\r\n\r\nTo include the functionality of `pandoc-pyplot`
  in a Haskell package, you can use the `makePlot :: Block -> IO Block` function (for
  single blocks) or `plotTransform :: Pandoc -> IO Pandoc` function (for entire documents).\r\n\r\n###
  Usage with Hakyll\r\n\r\nThis filter was originally designed to be used with [Hakyll](https://jaspervdj.be/hakyll/).
  In case you want to use the filter with your own Hakyll setup, you can use a transform
  function that works on entire documents:\r\n\r\n```haskell\r\nimport Text.Pandoc.Filter.Pyplot
  (plotTransform)\r\n\r\nimport Hakyll\r\n\r\n-- Unsafe compiler is required because
  of the interaction\r\n-- in IO (i.e. running an external Python script).\r\nmakePlotPandocCompiler
  :: Compiler (Item String)\r\nmakePlotPandocCompiler =\r\n  pandocCompilerWithTransformM\r\n
  \   defaultHakyllReaderOptions\r\n    defaultHakyllWriterOptions\r\n    (unsafeCompiler
  . plotTransform)\r\n```\r\n\r\n## Warning\r\n\r\nDo not run this filter on unknown
  documents. There is nothing in `pandoc-pyplot` that can stop a Python script from
  performing evil actions. This is the reason this package is deemed __unsafe__ in
  the parlance of [Safe Haskell](https://ghc.haskell.org/trac/ghc/wiki/SafeHaskell).\r\n\r\n##
  Aknowledgements\r\n\r\nThis package is inspired from [`pandoc-include-code`](https://github.com/owickstrom/pandoc-include-code).\r\n"
license-name: MIT
