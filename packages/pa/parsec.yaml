homepage: https://github.com/hvr/parsec
changelog-type: markdown
hash: 8dbd67e16adff703c48d69414f88bd86f59dccb1fdd509358905bdddfe09d705
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  base: -any
  parsec: -any
  HUnit: ==1.6.* || (>=1.3.1.2 && <1.4)
  mtl: -any
maintainer: Herbert Valerio Riedel <hvr@gnu.org>
synopsis: Monadic parser combinators
changelog: ! "### 3.1.13.0\n\n- Add official support for [`SafeHaskell`](http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/safe_haskell.html)\n\n
  \   **NOTE**: This is the first version whose `SafeHaskell` properties\n    have
  become an intentional part of the API contract; previous\n    versions were merely
  accidentally safe-inferred (or not depending\n    on various factors; in other words,
  this was a fragile\n    property). If you rely on `SafeHaskell` to consider module
  imports\n    from `parsec` *safe*, this is the first version of `parsec` which\n
  \   actually guarantees a well-defined state; you can declare this\n    requirement
  by either specifying\n\n        build-depends: parsec >= 3.1.13.0 && < 3.2\n\n    or,
  starting with `cabal-version:2.0`, via\n\n        build-depends: parsec ^>= 3.1.13.0\n\n-
  Drop support for GHC 7.0, GHC 7.2, and GHC 7.4.1; support window\n  starts with
  GHC 7.4.2.\n\n### 3.1.12.0\n\n- Support limited to GHC 7.0 & GHC 7.2 only\n\n- Add
  `MonadFail` instance for `ParsecT`\n- Add `Semigroup`/`Monoid` instances for `ParsecT`
  (#80,#82)\n- Fix space leak in Applicative/Monad interface (#37)\n- Add `parserTrace`
  and `parserTraced` combinators for debugging.\n\n### 3.1.11\n\n- Include `README.md`
  in package.\n\n### 3.1.10\n\n- Most types now have a `Typeable` instance. Some instances
  are dropped from\n  older versions of GHC (sorry about that!).\n- The token-parser
  now rejects Unicode numeric escape sequences for characters\n  outside the Unicode
  range.\n- The token-parser now loses less precision when parsing literal doubles.\n-
  Documentation fixes and corrections.\n- We no longer test parsec builds on GHC 7.4.\n\n###
  3.1.9\n\n- Many and various updates to documentation and package description (inlcuding\n
  \ the homepage links).\n- Add an `Eq` instance for `ParseError`\n- Fixed a regression
  from 3.1.6: `runP` is again exported from module\n  Text.Parsec.\n\n### 3.1.8\n\n-
  Fix a regression from 3.1.6 related to exports from the main module.\n\n### 3.1.7\n\n-
  Fix a regression from 3.1.6 related to the reported position of error messages.\n
  \ See bug #9 for details.\n- Reset the current error position on success of `lookAhead`.\n\n###
  3.1.6\n\n- Export `Text` instances from Text.Parsec\n- Make Text.Parsec exports
  more visible\n- Re-arrange Text.Parsec exports\n- Add functions `crlf` and `endOfLine`
  to Text.Parsec.Char for handling\n  input streams that do not have normalized line
  terminators.\n- Fix off-by-one error in Token.charControl\n\n### 3.1.4\n\n- Relax
  dependency on `text`\n\n### 3.1.5\n\n- Relax dependency on `text`\n\n### 3.1.3\n\n-
  Fix a regression introduced in 3.1.2 related to positions reported by error messages.\n"
basic-deps:
  bytestring: ! '>=0.9.2.1 && <0.11'
  base: ! '>=4.5.1 && <4.12'
  text: ! '>=0.11.3 && <1.3'
  mtl: ! '>=1.1.1 && <2.3'
all-versions:
- '2.0'
- '2.1.0.0'
- '2.1.0.1'
- '3.0.0'
- '3.0.1'
- '3.1.0'
- '3.1.1'
- '3.1.2'
- '3.1.3'
- '3.1.4'
- '3.1.5'
- '3.1.6'
- '3.1.7'
- '3.1.8'
- '3.1.9'
- '3.1.10'
- '3.1.11'
- '3.1.12.0'
- '3.1.13.0'
author: Daan Leijen <daan@microsoft.com>, Paolo Martini <paolo@nemail.it>, Antoine
  Latter <aslatter@gmail.com>
latest: '3.1.13.0'
description-type: markdown
description: ! "Parsec [![Build Status](https://travis-ci.org/haskell/parsec.svg?branch=master)](https://travis-ci.org/haskell/parsec)\n======\n\n**Please
  refer to the [package description on Hackage](https://hackage.haskell.org/package/parsec#description)
  for more information.**\n\nA monadic parser combinator library, written by Daan
  Leijen. Parsec is designed\nfrom scratch as an industrial-strength parser library.
  It is simple, safe, well\ndocumented, has extensive libraries, good error messages,
  and is fast.\n\nSome links:\n\n* [Parsec on Hackage](https://hackage.haskell.org/package/parsec),\n
  \ contains the generated documentation.\n* The 2001 paper written by Daan Leijen,
  some what outdated\n  ([PDF](https://web.archive.org/web/20140528151730/http://legacy.cs.uu.nl/daan/download/parsec/parsec.pdf),\n
  \ [HTML](https://web.archive.org/web/20140528151730/http://legacy.cs.uu.nl/daan/download/parsec/parsec.html),\n
  \ thanks to [archive.org](http://web.archive.org);\n  and [PDF](https://research.microsoft.com/en-us/um/people/daan/download/parsec/parsec.pdf),\n
  \ thanks to Microsoft Research).\n* [Using Parsec](http://book.realworldhaskell.org/read/using-parsec.html),\n
  \ chapter 16 of [Real World Haskell](http://book.realworldhaskell.org/).\n* [An
  introduction to the Parsec library](http://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library)\n
  \ on Kunigami's blog.\n* [An introduction to parsing text in Haskell with Parsec](http://unbui.lt/#!/post/haskell-parsec-basics)
  on Wilson's blog.\n* Differences between Parsec and\n  [Attoparsec](http://hackage.haskell.org/package/attoparsec)\n
  \ (Haskell's other prominent parser library) as explained in\n  [an answer on StackExchange](http://stackoverflow.com/a/19213247).\n*
  Differences between Parsec and [Happy](http://www.haskell.org/happy)\n  (Haskell's
  parser generator) as explained in two\n  answers on separate StackExchange questions\n
  \ ([1](http://stackoverflow.com/a/7270904),\n  [2](http://stackoverflow.com/a/14775331)).\n*
  Differences between Parsec and\n  [Megaparsec](http://hackage.haskell.org/package/megaparsec)\n
  \ (an advanced fork of Parsec) as explained in\n  [Megaparsec's README](https://github.com/mrkkrp/megaparsec#megaparsec-vs-parsec).\n\n\nBy
  analyzing [Parsec's reverse dependencies on Hackage](http://packdeps.haskellers.com/reverse/parsec)\nwe
  can find open source project that make use of Parsec.  For example\n[bibtex](http://hackage.haskell.org/package/bibtex),\n[ConfigFile](http://hackage.haskell.org/package/ConfigFile),\n[csv](http://hackage.haskell.org/package/csv)
  and\n[hjson](http://hackage.haskell.org/package/hjson).\n\n\n## Getting started\n\nThis
  requires a working version of `cabal` and `ghci`, which are part of\nany modern
  installation of Haskell, such as\n[Haskell Platform](https://www.haskell.org/platform).\n\nFirst
  install Parsec.\n\n    cabal install parsec\n\nBelow we show how a very simple parser
  that tests matching parentheses\nwas made from GHCI (the interactive GHC environment),
  which we started\nwith the `ghci` command).\n\n```\nPrelude> :m +Text.Parsec\nPrelude
  Text.Parsec> let parenSet = char '(' >> many parenSet >> char ')' :: Parsec String
  () Char\nLoading package transformers-0.3.0.0 ... linking ... done.\nLoading package
  array-0.5.0.0 ... linking ... done.\nLoading package deepseq-1.3.0.2 ... linking
  ... done.\nLoading package bytestring-0.10.4.0 ... linking ... done.\nLoading package
  mtl-2.1.3.1 ... linking ... done.\nLoading package text-1.1.1.3 ... linking ...
  done.\nLoading package parsec-3.1.5 ... linking ... done.\nPrelude Text.Parsec>
  let parens = (many parenSet >> eof) <|> eof\nPrelude Text.Parsec> parse parens \"\"
  \"()\"\nRight ()\nPrelude Text.Parsec> parse parens \"\" \"()(())\"\nRight ()\nPrelude
  Text.Parsec> parse parens \"\" \"(\"\nLeft (line 1, column 2):\nunexpected end of
  input\nexpecting \"(\" or \")\"\n```\n\nThe `Right ()` results indicate successes:
  the parentheses matched.\nThe `Left [...]` result indicates a parse failure, and
  is detailed\nwith an error message.\n\nFor a more thorough introduction to Parsec
  we recommend the links at\nthe top of this README file.\n\n\n## Contributing\n\nIssues
  (bugs, feature requests or otherwise feedback) may be reported in\n[the Github issue
  tracker for this project](https://github.com/haskell/parsec/issues).\n\nPull-requests
  are also welcome.\n\n\n## License\n\nSee the [LICENSE](https://github.com/haskell/parsec/blob/master/LICENSE)\nfile
  in the repository.\n"
license-name: BSD3
