homepage: https://github.com/harendra-kumar/packcheck
changelog-type: markdown
hash: 7a0ee88318997cb20f7cd7ad41170fdb69d5707e805947b1a100f2b93a7b2132
test-bench-deps:
  packcheck: -any
  base: ! '>=4.8 && <5'
maintainer: harendra.kumar@gmail.com
synopsis: Universal build and CI testing for Haskell packages
changelog: ! "## 0.4.1\n\n* Disable hpc-coveralls by default\n\n## 0.4.0\n\n* Add
  support for circle CI\n* Add support for multi-package stack as well as cabal repos\n*
  Add a version command\n* Add CABAL_NEWBUILD_TARGETS envvar to build specific targets\n*
  Add GHC 8.6.1 in build matrices\n\n## 0.3.1\n\n* Add a new environment var option
  DISABLE_DIST_CHECKS to disable source\n  distribution checks. This can be used as
  a workaround for a bug in stack\n  causing \"stack sdist\" to fail.\n* For stack
  builds, use the same options (STACK_BUILD_OPTIONS) for install test\n  as for build
  so that an extra rebuild does not occur during install.\n* Workaround to avoid depending
  on `cabal info` command; in certain cases this\n  command crashes cabal. See issue
  #13.\n\n## 0.3.0\n\n### Enhancements\n* Add cabal new-build support. Use `packcheck.sh
  cabal-new` to use it.\n* Add knobs to disable tests or doc builds (`DISABLE_TEST`,
  `DISABLE_DOCS`)\n* Now you can specify multiple versions of GHC in PATH and packcheck\n
  \ automatically finds the right one based on GHCVER envvar.\n* Add TOOLS_DIR option
  to specify hvr-ghc style installation of ghc and\n  cabal. A correct version of
  GHC is automatically picked from this directory.\n* GHCVER and CABALVER variables
  are now optional in travis config if you\n  specify the cabal and ghc PPAs under
  apt sources.\n* Run `autoreconf` if there is a `configure.ac` in the package dir\n\n###
  Deprecations\n* TEST_INSTALL option is deprecated, use ENABLE_INSTALL instead\n\n##
  0.2.0\n\n### Breaking Changes\n* Make `STACK_BUILD_OPTIONS` and `CABAL_CONFIGURE_OPTIONS`
  append to the\n  existing build/configure options instead of overriding them.\n*
  Do not enforce specific `stack` version in CI configs - this is done to avoid\n
  \ failures due to github API limits when upgrading or downgrading.\n\n### Bug Fixes\n*
  Avoid build failures in cases when `cabal-install` has to be installed and\n  its
  dependencies may conflict with the current project dependencies.\n\n### Enhancements\n*
  Better documentation in travis and appveyor configs\n* Reduce the number of builds
  in default config from 11 to 6\n\n## 0.1.1\n\n* _Enhancement_: Nix support; fix
  bash location to make it work on NixOS and\n  potentially on other systems.\n\n##
  0.1.0\n\n* Initial release\n"
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.4.1'
author: Harendra Kumar
latest: '0.4.1'
description-type: markdown
description: ! "# packcheck\n\n[![Hackage](https://img.shields.io/hackage/v/packcheck.svg?style=flat)](https://hackage.haskell.org/package/packcheck)\n[![Build
  Status](https://travis-ci.org/harendra-kumar/packcheck.svg?branch=master)](https://travis-ci.org/harendra-kumar/packcheck)\n[![Windows
  Build status](https://ci.appveyor.com/api/projects/status/f7c0ncy84cxp8lbe?svg=true)](https://ci.appveyor.com/project/harendra-kumar/packcheck)\n[![CircleCI](https://circleci.com/gh/harendra-kumar/packcheck/tree/master.svg?style=svg)](https://circleci.com/gh/harendra-kumar/packcheck/tree/master)\n[![Coverage
  Status](https://coveralls.io/repos/harendra-kumar/packcheck/badge.svg?branch=master&service=github)](https://coveralls.io/github/harendra-kumar/packcheck?branch=master)\n\n##
  Quick Start\n\n### CI\nTo enable CI for your repo, just copy the relevant CI config
  file i.e.\n[.travis.yml](https://github.com/harendra-kumar/packcheck/blob/master/.travis.yml),\n[appveyor.yml](https://github.com/harendra-kumar/packcheck/blob/master/appveyor.yml),\nor\n[.circleci/config.yml](https://github.com/harendra-kumar/packcheck/blob/master/.circleci/config.yml)\nto
  your package repo, add your repo to travis/appveyor/circleci and CI should just\nwork
  for most packages. Uncomment the relevant lines in the CI config files to enable
  CI for more\nconfigs. Just modify some environment variables in the configs to control\neverything
  about the build.\n\n### Local Machine\nFor local use, copy\n[packcheck.sh](https://github.com/harendra-kumar/packcheck/blob/master/packcheck.sh)\nto
  your local machine (Linux/OSX/Windows), put it in your PATH, and run it\nfrom your
  package directory. You can pass the same evironment variables that\nare used in
  CI files to run the exact same tests locally. Usage is as simple\nas:\n```\n$ packcheck.sh
  cabal-new\n$ packcheck.sh cabal\n$ packcheck.sh stack\n```\n\n### Some Key Points\n\n*
  If a CI build fails just copy and paste the command printed in the log and\n  the
  same build runs on the local machine so that you can debug quickly.\n* To send coverage
  info to [coveralls.io](https://coveralls.io) just\n  uncomment a line in your `.travis.yml`.\n*
  If you are using `hvr-ghc` PPA, just use `TOOLS_DIR=/opt` or the path where\n  it
  is installed, and you can use all the ghc/cabal versions available,\n  automatically.\n*
  Conveniently control all aspects of build through command line or environment\n
  \ variables, including tool options or whether\n  to enable benchmarks, haddock,
  coverage, install test etc. It is a very\n  powerful tool, can do whatever you can
  imagine, see full reference at the\n  end.\n* `packcheck` creates the source distribution
  and builds the package from the\n  generated tarball to make sure that you build
  what you release and don't miss\n  adding a file to the distribution.\n* The most
  important part is that you can run exact same tests, in the same\n  way, everywhere:\n\n###
  Out of the box support\n\n| Platforms     | Build Types     | CI Modes      |\n|:-------------:|:---------------:|:-------------:|\n|
  Linux         | stack           | Travis        |\n| OSX           | cabal           |
  Appveyor      |\n| Windows       | cabal new-build | CircleCI      |\n|               |
  \                | Local Machine |\n\nThe script can be easily adapted to any CI
  with a single line build command.\n\n## What is it?\n\nThe package `packcheck` includes
  a script called `packcheck.sh`, it is a high\nlevel universal super build script
  to uniformly, consistently build and\ncomprehensively sanity test a Haskell package
  across build tools (stack/cabal)\nand across all platforms (Linux/MacOS/Windows).
  \ You do not need to be familiar\nwith any of the build tools to use it.\n\nTo make
  sure that it works everywhere without installing anything it is\ndeliberately written
  in bash. Any of the parameters to control the builds can\neither be passed on the
  script command line or as environment variables for\nconvenient use on CI systems.\n\n`packcheck`
  is also a minimal yet complete \"hello world\" Haskell package with\nmodel `travis`
  and `appveyor` config files that can be used unmodified in any\nHaskell package.
  The CI configs can be modified **declaratively**, using\nenvironment variables,
  to adapt to **any** kind of build scenario you can\nimagine.\n\nThis model package
  has everything that a Haskell package usually has; including\ntests, benchmarks
  and Linux/MacOS/Windows CI already working. It can be used as\na starting point
  to develop a new package. Beginners can use it to learn about\nhaskell package metadata
  structure.\n\n## What all does it do?\n\nAn invocation of `packcheck.sh` performs
  a whole battery of tests. `packcheck` is\ndesigned to be a simple to use tool for
  power users, you can control all\naspects of the build process the way you want,
  see the reference section below.\n\n### Auto tool install and selection\n* Picks
  up the right version of GHC automatically (based on the version\n  sepcified via
  an environment variable) if multiple versions are\n  available in the PATH or from
  hvr-ghc style ghc/cabal installation.\n* When using stack builds, `stack` and `ghc`
  are installed automatically, if\n  needed\n* For stack builds, if the package being
  tested does not have a `stack.yaml` it\n  can even create it automatically using
  `stack init`.\n### Build\n* build source\n* build benchmarks\n* build docs\n###
  Test\n* run tests\n### Lint\n* run `hlint`\n### Coverage and Coveralls\n* generate
  coverage report\n* send coverage report to coveralls.io\n### Create and Test Source
  Distribution\n* create source distribution\n* build from source distribution\n*
  test installation after build\n* perform distribution checks\n\n## Usage Examples\n\nYou
  can run these commands on your local machine as well as inside a CI script.\nYou
  can try these commands in the `packcheck` package itself:\n```\n$ ./packcheck.sh
  cabal-new GHCVER=8.4.1\n$ ./packcheck.sh cabal GHCVER=7.10.3 CABALVER=1.22\n```\n\n```\n$
  cd packcheck\n$ ./packcheck.sh stack RESOLVER=lts-11\n$ ./packcheck.sh stack GHCVER=8.2.2\n$
  ./packcheck.sh stack RESOLVER=lts-7.24 STACK_YAML=stack-8.0.yaml STACK_BUILD_OPTIONS=\"--flag
  streamly:examples-sdl\" CABALVER=1.24\n# You can also do a cabal build using stack
  installed ghc:\n$ stack exec ./packcheck.sh cabal RESOLVER=lts-11\n```\n\nRun hlint
  commands on the directories `src` and `test`:\n```\n$ ./packcheck.sh stack HLINT_COMMANDS=\"hlint
  lint src; hlint lint test\"\n```\n\nSend coverage info of the testsuites named `test1`
  and `test2` to coveralls.io\nusing `hpc-coveralls`.\n```\n$ ./packcheck.sh cabal
  GHCVER=8.0.2 COVERALLS_OPTIONS=\"test1 test2\"\n```\n\n## Full Reference\n\nNOTE:
  Any of the parameters described below can either be passed on command\nline or as
  an environment variable. On a CI system you can just use a common\ncommand and control
  the build behavior for different builds using environment\nvariables.\n\n```\n$
  packcheck.sh --help\n\n--------------------------------------------------\nUsage\n--------------------------------------------------\n./packcheck.sh
  COMMAND [PARAMETER=VALUE ...]\n\nFor example:\n./packcheck.sh stack RESOLVER=lts-10.0
  GHC_OPTIONS=\"-O0 -Werror\"\n\nControl parameters can either be passed on command
  line or exported\nas environment variables. Parameters marked DESTRUCTIVE may modify\nyour
  global user config or state.\n\n--------------------------------------------------\nCommands\n--------------------------------------------------\nstack
  \                  : build using stack\ncabal                   : build using cabal\ncabal-new
  \              : build using cabal new-build\nclean                   : remove the
  .packcheck directory\ncleanall                : remove .packcheck, .stack-work,
  .cabal-sandbox directories\nhelp                    : show this help message\n\n--------------------------------------------------\nSelecting
  tool versions\n--------------------------------------------------\nGHCVER                  :
  [a.b.c] GHC version prefix (may not be enforced when using stack)\nCABALVER                :
  [a.b.c.d] Cabal version (prefix) to use\nRESOLVER                : Stack resolver
  to use for stack builds or cabal builds using stack\nSTACKVER                : [a.b.c.d]
  Stack version (prefix) to use\nSTACK_UPGRADE           : [y] DESTRUCTIVE! Upgrades
  stack to latest version\n\n--------------------------------------------------\nWhere
  to find the required tools\n--------------------------------------------------\nPATH
  \                   : [path] Set PATH explicitly for predictable builds\nTOOLS_DIR
  \              : [dir] Find ghc|cabal by version as in TOOLS_DIR/ghc/8.4.1/bin\n\n--------------------------------------------------\nSpecifying
  common tool options\n--------------------------------------------------\nGHC_OPTIONS
  \            : Specify GHC options to use\nSDIST_OPTIONS           : Arguments to
  stack/cabal sdist command\nCABAL_REINIT_CONFIG     : [y] DESTRUCTIVE! Remove old
  config to avoid incompatibility issues\n\n--------------------------------------------------\nSpecifying
  what to build\n--------------------------------------------------\nDISABLE_BENCH
  \          : [y] Do not build benchmarks, default is to build but not run\nDISABLE_TEST
  \           : [y] Do not run tests, default is to run tests\nDISABLE_DOCS            :
  [y] Do not build haddocks, default is to build docs\nDISABLE_SDIST_BUILD     : [y]
  Do not build from source distribution\nDISABLE_DIST_CHECKS     : [y] Do not perform
  source distribution checks\nENABLE_INSTALL          : [y] DESTRUCTIVE! Install the
  package after building\n\n--------------------------------------------------\nstack
  options\n--------------------------------------------------\nSTACK_YAML              :
  Alternative stack config, cannot be a path, just the file name\nSTACK_OPTIONS           :
  ADDITIONAL stack global options (e.g. -v) to append\nSTACK_BUILD_OPTIONS     : ADDITIONAL
  stack build command options to append\n\n--------------------------------------------------\ncabal
  options\n--------------------------------------------------\nCABAL_NEWBUILD_OPTIONS
  \ : ADDITIONAL cabal new-build options to append\nCABAL_NEWBUILD_TARGETS  : cabal
  new-build targets, default is 'all'\nCABAL_CONFIGURE_OPTIONS : ADDITIONAL cabal
  old style configure options to append\nCABAL_CHECK_RELAX       : [y] Do not fail
  if cabal check fails on the package.\nCABAL_NO_SANDBOX        : [y] DESTRUCTIVE!
  Clobber (force install) global cabal ghc package db\nCABAL_HACKAGE_MIRROR    : [y]
  DESTRUCTIVE! Specify an alternative mirror, modifies the cabal config file.\n\n--------------------------------------------------\nCoverage
  options\n--------------------------------------------------\nCOVERALLS_OPTIONS       :
  hpc-coveralls args and options, usually just test suite names\nCOVERAGE                :
  [y] Just generate coverage information\n\n--------------------------------------------------\nhlint
  options\n--------------------------------------------------\nHLINT_COMMANDS          :
  hlint commands e.g.'hlint lint src; hlint lint test'\n\n--------------------------------------------------\nDiagnostics
  options\n--------------------------------------------------\nCHECK_ENV               :
  [y] Treat unknown env variables as error, used with env -i\nBASE_TIME               :
  System time to be used as base for timeline reporting\n```\n\nOptions marked `DESTRUCTIVE!`
  are fine in a CI environment. But on a\nlocal machine sometimes it may not be desirable
  as it will change the\nstate of your global cabal config, so consider that before
  using these options.\n\nBy default cabal builds are done using sandboxes. It creates
  any temporary\nfiles or build artifacts inside `.packcheck` directory. See the `clean`
  and\n`cleanall` commands to release the temporary space.\n\n`stack` is automatically
  installed and can be used to do cabal builds as well.\nIf you specify `BUILD=cabal-new`
  and `RESOLVER` at the same time then the cabal\nbuild uses stack installed `cabal`
  and `ghc`, both are installed automatically\nwhen needed.\n\nFor pure cabal builds
  i.e. when `BUILD=cabal-new` and `RESOLVER` is not\nspecified, `cabal` and `ghc`
  must be pre-installed on the system before\nbuilding.\n\n## Diagnostics\n\nThere
  may be issues due to some environment variables unknowingly set or some\ncommand
  line parameters or env variables being misspelled and therefore\nsilently ignored.
  To avoid any such issues the robust way to invoke `packcheck`\nis to use a clean
  environment using `env -i` and passing `CHECK_ENV=y`\nparameter. When this parameter
  is set unwanted/misspelled variables are\ndetected and reported.\n\n```\n$ env -i
  CHECK_ENV=y ./packcheck.sh stack\n```\n\nFor performance diagnostics `packcheck`
  prints the time elapsed from the\nbeginning at each build step performed.\n"
license-name: BSD3
