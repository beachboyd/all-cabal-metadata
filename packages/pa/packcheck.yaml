homepage: https://github.com/harendra-kumar/packcheck
changelog-type: markdown
hash: 71e11764e27c6fe289eaf4d39992ccd72348ae21beec9a7f392b6c0c84d5bc52
test-bench-deps:
  packcheck: -any
  base: ! '>=4.8 && <5'
maintainer: harendra.kumar@gmail.com
synopsis: Universal build and CI testing for Haskell packages
changelog: ! "## 0.3.0\n\n### Enhancements\n* Add cabal new-build support. Use `packcheck.sh
  cabal-new` to use it.\n* Add knobs to disable tests or doc builds (`DISABLE_TEST`,
  `DISABLE_DOCS`)\n* Now you can specify multiple versions of GHC in PATH and packcheck\n
  \ automatically finds the right one based on GHCVER envvar.\n* Add TOOLS_DIR option
  to specify hvr-ghc style installation of ghc and\n  cabal. A correct version of
  GHC is automatically picked from this directory.\n* GHCVER and CABALVER variables
  are now optional in travis config if you\n  specify the cabal and ghc PPAs under
  apt sources.\n* Run `autoreconf` if there is a `configure.ac` in the package dir\n\n###
  Deprecations\n* TEST_INSTALL option is deprecated, use ENABLE_INSTALL instead\n\n##
  0.2.0\n\n### Breaking Changes\n* Make `STACK_BUILD_OPTIONS` and `CABAL_CONFIGURE_OPTIONS`
  append to the\n  existing build/configure options instead of overriding them.\n*
  Do not enforce specific `stack` version in CI configs - this is done to avoid\n
  \ failures due to github API limits when upgrading or downgrading.\n\n### Bug Fixes\n*
  Avoid build failures in cases when `cabal-install` has to be installed and\n  its
  dependencies may conflict with the current project dependencies.\n\n### Enhancements\n*
  Better documentation in travis and appveyor configs\n* Reduce the number of builds
  in default config from 11 to 6\n\n## 0.1.1\n\n* _Enhancement_: Nix support; fix
  bash location to make it work on NixOS and\n  potentially on other systems.\n\n##
  0.1.0\n\n* Initial release\n"
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.3.0'
author: Harendra Kumar
latest: '0.3.0'
description-type: markdown
description: ! "# packcheck\n\n## TL; DR\n\n* For CI, just copy\n  [.travis.yml](https://github.com/harendra-kumar/packcheck/blob/master/.travis.yml)\n
  \ and\n  [appveyor.yml](https://github.com/harendra-kumar/packcheck/blob/master/appveyor.yml)\n
  \ files to your package repo, add your repo to travis/appveyor and CI will just\n
  \ work.\n* For local use, copy\n  [packcheck.sh](https://github.com/harendra-kumar/packcheck/blob/master/packcheck.sh)\n
  \ to your local machine (Linux/OSX/Windows), put it in your PATH, and run it\n  from
  your package directory and watch all the CI tests being done locally.\n  ```\n  $
  packcheck.sh stack\n  $ packcheck.sh cabal\n  $ packcheck.sh cabal-new\n  ```\n*
  If a CI build fails just copy and paste the command printed in the log and\n  the
  same build runs on the local machine so that you can debug quickly.\n* Want to send
  coverage info to coverall.io? Just uncomment a line in your\n  `.travis.yml`.\n*
  If you are using `hvr-ghc` PPA, just use `TOOLS_DIR=/opt` or the path where\n  it
  is installed, and you can use all the ghc/cabal versions available,\n  automatically.\n*
  Conveniently control all aspects of build, including tool options or whether\n  to
  enable benchmarks, haddock, coverage, install test etc. It is a very\n  powerful
  tool, can do whatever you can imagine, see full reference at the\n  end.\n* Builds
  from the source distribution tar to make sure you build what you\n  release and
  don't miss any file from the distribution.\n* The most important part is that you
  run exact same tests, in the same way,\n  everywhere:\n\n| Platforms     | CI Modes
  \     | Build Types     |\n|:-------------:|:-------------:|:---------------:|\n|
  Linux         | Travis        | stack           |\n| OSX           | Appveyor      |
  cabal           |\n| Windows       | Local Machine | cabal new-build |\n\n## What
  is it?\n\nThe package `packcheck` is a minimal yet complete \"hello world\" Haskell
  package\nwith model `travis` and `appveyor` config files that can be used unmodified
  in\nany Haskell package. The CI configs can be modified **declaratively** to adapt\nto
  **any** kind of build scenario you can imagine.\n\nThe package includes a script
  called `packcheck.sh`, it is a high level\nuniversal super build script to uniformly,
  consistently build and\ncomprehensively sanity test a Haskell package across build
  tools (stack/cabal)\nand across all platforms (Linux/MacOS/Windows).  You do not
  need to be familiar\nwith any of the build tools to use it.\n\nThis is also a minimal
  yet complete model package (with tests, benchmarks,\nLinux/MacOS/Windows CI already
  working) that can be used as a starting point to\ndevelop a new package. Beginners
  can use it to learn about haskell package\nmetadata structure.\n\n## What all does
  it do?\n\nAn invocation of packcheck performs a whole battery of tests:\n\n* When
  using stack builds, stack and ghc are installed automatically, if needed\n* for
  stack builds, if the package being tested does not have a `stack.yaml` it\n  is
  created automatically using `stack init`.\n* Picks up the right version of GHC automatically
  if multiple versions are\n  available in the PATH or from hvr-ghc style ghc/cabal
  installation.\n* build source\n* build benchmarks\n* build docs\n* run tests\n*
  create source distribution\n* build from source distribution\n* test installation
  after build\n* perform distribution checks\n* generate coverage report\n* send coverage
  report to coveralls.io\n\n## Usage Examples\n\nYou can run these commands on your
  local machine as well as inside a CI script.\nYou can try these commands in the
  `packcheck` package itself:\n```\n$ cd packcheck\n$ ./packcheck.sh stack RESOLVER=lts-11\n$
  ./packcheck.sh stack GHCVER=8.2.2\n$ ./packcheck.sh stack RESOLVER=lts-7.24 STACK_YAML=stack-8.0.yaml
  STACK_BUILD_OPTIONS=\"--flag streamly:examples-sdl\" CABALVER=1.24\n```\n\n```\n$
  ./packcheck.sh cabal-new GHCVER=8.4.1\n$ ./packcheck.sh cabal GHCVER=7.10.3 CABALVER=1.22\n#
  You can also do a cabal build using stack installed ghc:\n$ stack exec ./packcheck.sh
  cabal RESOLVER=lts-11\n```\n\nRun hlint commands on the directories `src` and `test`:\n```\n$
  ./packcheck.sh stack HLINT_COMMANDS=\"hlint lint src; hlint lint test\"\n```\n\nSend
  coverage info of the testsuites named `test1` and `test2` to coveralls.io\nusing
  `hpc-coveralls`.  Note that this currently works only with an old-style\ncabal build:\n```\n$
  ./packcheck.sh cabal GHCVER=8.0.2 COVERALLS_OPTIONS=\"test1 test2\"\n```\n\n## Full
  Reference\n\nOptions marked `DESTRUCTIVE!` are fine in a CI environment. But on
  a\nlocal machine sometimes it may not be desirable as it will change the\nstate
  of your global cabal config, so consider that before using these options.\n\nBy
  default cabal builds are done using sandboxes. It creates any temporary\nfiles or
  build artifacts inside `.packcheck` directory. See the `clean` and\n`cleanall` commands
  to release the temporary space.\n\n`stack` is automatically installed and can be
  used to do cabal builds as well.\nIf you specify `BUILD=cabal-new` and `RESOLVER`
  at the same time then the cabal\nbuild uses stack installed `cabal` and `ghc`, both
  are installed automatically\nwhen needed.\n\nFor pure cabal builds i.e. when `BUILD=cabal-new`
  and `RESOLVER` is not\nspecified, `cabal` and `ghc` must be pre-installed on the
  system before\nbuilding.\n\n```\n$ packcheck.sh --help\n\n--------------------------------------------------\nUsage\n--------------------------------------------------\n./packcheck.sh
  COMMAND [PARAMETER=VALUE ...]\n\nFor example:\n./packcheck.sh stack RESOLVER=lts-10.0
  GHC_OPTIONS=\"-O0 -Werror\"\n\nControl parameters can either be passed on command
  line or exported\nas environment variables. Parameters marked DESTRUCTIVE may modify\nyour
  global user config or state.\n\n--------------------------------------------------\nCommands\n--------------------------------------------------\nstack
  \                  : build using stack\ncabal                   : build using cabal\ncabal-new
  \              : build using cabal new-build\nclean                   : remove the
  .packcheck directory\ncleanall                : remove .packcheck, .stack-work,
  .cabal-sandbox directories\nhelp                    : show this help message\n\n--------------------------------------------------\nSelecting
  tool versions\n--------------------------------------------------\nGHCVER                  :
  [a.b.c] GHC version prefix (may not be enforced when using stack)\nCABALVER                :
  [a.b.c.d] Cabal version (prefix) to use\nRESOLVER                : Stack resolver
  to use for stack builds or cabal builds using stack\nSTACKVER                : [a.b.c.d]
  Stack version (prefix) to use\nSTACK_UPGRADE           : [y] DESTRUCTIVE! Upgrades
  stack to latest version\n\n--------------------------------------------------\nWhere
  to find the required tools\n--------------------------------------------------\nPATH
  \                   : [path] Set PATH explicitly for predictable builds\nTOOLS_DIR
  \              : [dir] Find ghc|cabal by version as in TOOLS_DIR/ghc/8.4.1/bin\n\n--------------------------------------------------\nSpecifying
  common tool options\n--------------------------------------------------\nGHC_OPTIONS
  \            : Specify GHC options to use\nSDIST_OPTIONS           : Arguments to
  stack/cabal sdist command\nCABAL_REINIT_CONFIG     : [y] DESTRUCTIVE! Remove old
  config to avoid incompatibility issues\n\n--------------------------------------------------\nSpecifying
  what to build\n--------------------------------------------------\nDISABLE_BENCH
  \          : [y] Do not build benchmarks, default is to build but not run\nDISABLE_TEST
  \           : [y] Do not run tests, default is to run tests\nDISABLE_DOCS            :
  [y] Do not build haddocks, default is to build docs\nDISABLE_SDIST_BUILD     : [y]
  Do not build from source distribution\nENABLE_INSTALL          : [y] DESTRUCTIVE!
  Install the package after building\n\n--------------------------------------------------\nstack
  options\n--------------------------------------------------\nSTACK_YAML              :
  Alternative stack config, cannot be a path, just the file name\nSTACK_OPTIONS           :
  ADDITIONAL stack global options (e.g. -v) to append\nSTACK_BUILD_OPTIONS     : ADDITIONAL
  stack build command options to append\n\n--------------------------------------------------\ncabal
  options\n--------------------------------------------------\nCABAL_NEWBUILD_OPTIONS
  \ : ADDITIONAL cabal new-build options to append\nCABAL_CONFIGURE_OPTIONS : ADDITIONAL
  cabal old style configure options to append\nCABAL_CHECK_RELAX       : [y] Do not
  fail if cabal check fails on the package.\nCABAL_NO_SANDBOX        : [y] DESTRUCTIVE!
  Clobber (force install) global cabal ghc package db\nCABAL_HACKAGE_MIRROR    : [y]
  DESTRUCTIVE! Specify an alternative mirror, modifies the cabal config file.\n\n--------------------------------------------------\nCoverage
  options\n--------------------------------------------------\nCOVERALLS_OPTIONS       :
  hpc-coveralls args and options, usually just test suite names\nCOVERAGE                :
  [y] Just generate coverage information\n\n--------------------------------------------------\nhlint
  options\n--------------------------------------------------\nHLINT_COMMANDS          :
  hlint commands e.g.'hlint lint src; hlint lint test'\n\n--------------------------------------------------\nDiagnostics
  options\n--------------------------------------------------\nCHECK_ENV               :
  [y] Treat unknown env variables as error, used with env -i\nBASE_TIME               :
  System time to be used as base for timeline reporting\n```\n\n## Diagnostics\n\nThere
  may be issues due to some environment variables unknowingly set or some\ncommand
  line parameters or env variables being misspelled and therefore\nsilently ignored.
  To avoid any such issues the robust way to invoke `packcheck`\nis to use a clean
  environment using `env -i` and passing `CHECK_ENV=y`\nparameter. When this parameter
  is set unwanted/misspelled variables are\ndetected and reported.\n\n```\n$ env -i
  CHECK_ENV=y ./packcheck.sh stack\n```\n\nFor performance diagnostics `packcheck`
  prints the time elapsed from the\nbeginning at each build step performed.\n"
license-name: BSD3
