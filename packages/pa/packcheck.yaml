homepage: https://github.com/harendra-kumar/packcheck
changelog-type: markdown
hash: 1f997758431da3191155a51266189ac803d7bd5ec1ba65764cd434edf0311c09
test-bench-deps:
  packcheck: -any
  base: ! '>=4.8 && <5'
maintainer: harendra.kumar@gmail.com
synopsis: Universal build and CI testing for Haskell packages
changelog: ! "## 0.2.0\n\n### Breaking Changes\n* Make `STACK_BUILD_OPTIONS` and `CABAL_CONFIGURE_OPTIONS`
  append to the\n  existing build/configure options instead of overriding them.\n*
  Do not enforce specific `stack` version in CI configs - this is done to avoid\n
  \ failures due to github API limits when upgrading or downgrading.\n\n### Bug Fixes\n*
  Avoid build failures in cases when `cabal-install` has to be installed and\n  its
  dependencies may conflict with the current project dependencies.\n\n### Enhancements\n*
  Better documentation in travis and appveyor configs\n* Reduce the number of builds
  in default config from 11 to 6\n\n## 0.1.1\n\n* _Enhancement_: Nix support; fix
  bash location to make it work on NixOS and\n  potentially on other systems.\n\n##
  0.1.0\n\n* Initial release\n"
basic-deps:
  base: ! '>=4.8 && <5'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
author: Harendra Kumar
latest: '0.2.0'
description-type: markdown
description: ! "# packcheck\n\n## TL; DR\n\n* Just copy\n[.travis.yml](https://github.com/harendra-kumar/packcheck/blob/master/.travis.yml)\nand
  [appveyor.yml](https://github.com/harendra-kumar/packcheck/blob/master/appveyor.yml)\nto
  your package repo and your package is CI ready.\n* Copy\n[packcheck.sh](https://github.com/harendra-kumar/packcheck/blob/master/packcheck.sh)\nto
  your local machine and run it from your package directory (works on\nLinux/OSX/Windows)
  to perform all the same tests that are done by CI, locally.\n\n## What is it?\n\n`packcheck`
  is a minimal yet complete \"hello world\" Haskell package with model\n`travis` and
  `appveyor` config files that can be used unmodified in any Haskell\npackage. The
  CI configs can be modified **declaratively** to adapt to **any**\nkind of build
  scenario you can imagine.\n\nThe package includes `packcheck.sh`, a high level universal
  super build script\nto uniformly, consistently build and comprehensively sanity
  test a Haskell\npackage across build tools (stack/cabal) and across all platforms\n(Linux/MacOS/Windows).
  \ You do not need to be familiar with any of the build\ntools to use it.\n\nThis
  is also a minimal yet complete model package (with tests, benchmarks,\nLinux/MacOS/Windows
  CI already working) that can be used as a starting point to\ndevelop a new package.
  Beginners can use it to learn about haskell package\nmetadata structure.\n\n## What
  all does it do?\n\nIn a single invocation it performs a whole battery of tests:\nbuild
  source, build benchmarks, build docs, run tests, create source\ndistribution, ***build
  from source distribution***, test install after build,\nperform distribution checks,
  generate coverage report, optionally send coverage\nreport to coveralls.io. Everything
  can be controlled by the user.\n\n## Where can I use it?\n\nEverywhere. The same
  build steps can be consistently performed on or using:\n* Linux/OSX/Windows\n* Travis/Appveyor/Local
  Host\n* stack/cabal\n\n## How do I use it?\n\nTo use it for CI, simply copy the\n[travis](https://github.com/harendra-kumar/packcheck/blob/master/.travis.yml),\n[appveyor](https://github.com/harendra-kumar/packcheck/blob/master/appveyor.yml)\nconfig
  files from this package to your package and that's it. It should work\nwithout modification,
  of course you can edit them to customize. For use on\nlocal host, just copy over
  the\n[packcheck.sh](https://github.com/harendra-kumar/packcheck/blob/master/packcheck.sh)\nscript
  and put it in your `PATH`. Run the script from the package\ndirectory of the package
  you want to build.\n\n```\n$ packcheck.sh stack\n$ packcheck.sh cabal\n```\n\n##
  Salient Features\n\n* ***Comprehensive battery of tests for CI or pre-release to
  hackage***\n* ***works for all build tools, all platforms, all CIs***\n* ***tests
  the source distribution of the package*** so you can rest assured\n  that what you
  release on hackage is exactly what you tested. Also performs\n  distribution checks
  and whether the package installs successfully.\n* ***reproduce a failed CI on local
  machine***.  You can just cut and paste the\n  same command on your local machine
  and run it there for easy debugging.\n* ***can send coverage information to coveralls.io***
  with a simple option.\n* ***installs all the required tools automatically*** (including
  stack) or lets\n  you know what it needs so you can install/use your own. It never
  overwrites\n  an existing tool during install.\n\n## Usage Examples\n\nYou can run
  these commands on your local machine as well as inside a CI script.\n\nMake sure
  you are in the package directory. You can try these commands in this\npackage itself:\n```\n$
  cd packcheck\n```\n\nStack build (installs stack automatically if not found, creates
  a `stack.yaml`\nif not found):\n```\n$ ./packcheck.sh stack RESOLVER=lts-6\n```\n\nSet
  pvp-bounds before the test:\n```\n$ ./packcheck.sh stack RESOLVER=lts-6 SDIST_OPTIONS=\"--pvp-bounds
  both\"\n```\n\nStack build with system installed GHC, when GHCVER is specified it
  looks for\nthe specified GHC version in PATH:\n```\n$ ./packcheck.sh stack GHCVER=7.10.3\n```\n\nStack
  build with a specific `stack.yaml` config file and specified build flags,\nand requiring
  a specific cabal version:\n```\n$ ./packcheck.sh stack RESOLVER=lts-7.24 STACK_YAML=stack-8.0.yaml
  STACK_BUILD_OPTIONS=\"--flag streamly:examples-sdl\" CABALVER=1.24\n```\n\nCabal
  build using stack installed ghc:\n```\n$ stack exec ./packcheck.sh cabal RESOLVER=lts-6\n```\n\nCabal
  build using system installed ghc and cabal on PATH:\n```\n$ ./packcheck.sh cabal
  GHCVER=7.10.3 CABALVER=1.22\n```\n\nRun hlint commands on the directories `src`
  and `test`:\n```\n$ ./packcheck.sh stack HLINT_COMMANDS=\"hlint lint src; hlint
  lint test\"\n```\n\nSend coverage info of the testsuites named `test1` and `test2`
  to coveralls.io\nusing `hpc-coveralls`.  Note that this currently works only with
  a cabal build:\n```\n$ ./packcheck.sh cabal GHCVER=8.0.2 COVERALLS_OPTIONS=\"test1
  test2\"\n```\n\n## Diagnostics\n\nThere may be issues due to some environment variables
  unknowingly set or some\ncommand line parameters or env variables being misspelled
  and therefore\nsilently ignored. To avoid any such issues the cleanest way to invoke
  the\nscript is to use a clean environment using `env -i` and `CHECK_ENV=y`\nparameter.
  When this parameter is set unwanted/misspelled variables are\ndetected and reported.\n\n```\n$
  env -i CHECK_ENV=y ./packcheck.sh stack\n```\n\nFor performance diagnostics the
  script prints the time elapsed from the\nbeginning at each build step performed.\n\n##
  Full Reference\n\nOptions marked `DESTRUCTIVE!` are fine in a CI environment. But
  on a\nlocal machine sometimes it may not be desirable as it will change the\nstate
  of your global cabal config, so consider that before using these options.\n\nBy
  default cabal builds are done using sandboxes. It creates any temporary\nfiles or
  build artifacts inside `.packcheck` directory. See the `clean` and\n`cleanall` commands
  to release the temporary space.\n\n`stack` is automatically installed and can be
  used to do cabal builds as well.\nIf you specify `BUILD=cabal` and `RESOLVER` at
  the same time then the cabal\nbuild uses stack installed `cabal` and `ghc`, both
  are installed automatically\nwhen needed.\n\nFor pure cabal builds i.e. when `BUILD=cabal`
  and `RESOLVER` is not specified,\n`cabal` and `ghc` must be pre-installed on the
  system before building.\n\n```\n$ packcheck.sh --help\n\n--------------------------------------------------\nUsage\n--------------------------------------------------\n./packcheck.sh
  COMMAND [PARAMETER=VALUE ...]\n\nFor example:\n./packcheck.sh stack RESOLVER=lts-10.0
  GHC_OPTIONS=\"-O0 -Werror\"\n\nControl parameters can either be passed on command
  line or exported\nas environment variables. Parameters marked DESTRUCTIVE may modify\nyour
  global user config or state.\n\n--------------------------------------------------\nCommands\n--------------------------------------------------\nstack
  \                  : build using stack\ncabal                   : build using cabal\nclean
  \                  : remove the .packcheck directory\ncleanall                :
  remove .packcheck, .stack-work, .cabal-sandbox directories\nhelp                    :
  show this help message\n\n--------------------------------------------------\nCommonly
  used parameters or env variables\n--------------------------------------------------\nRESOLVER
  \               : Stack resolver to use for stack or cabal builds\nGHCVER                  :
  [a.b.c] GHC version prefix (may not be enforced when using stack)\nCABALVER                :
  [a.b.c.d] Cabal version (prefix) to use\nSTACKVER                : [a.b.c.d] Stack
  version (prefix) to use\nGHC_OPTIONS             : Specify GHC options to use\nSDIST_OPTIONS
  \          : Arguments to stack/cabal sdist command (e.g. --pvp-bounds)\nDISABLE_SDIST_BUILD
  \    : [y] Do not build from source distribution\nDISABLE_BENCH           : [y]
  Do not build benchmarks, default is to build but not run\nPATH                    :
  [path] Set PATH explicitly for predictable builds\nTEST_INSTALL            : [y]
  DESTRUCTIVE! Install the package after building (force install with cabal)\n\n--------------------------------------------------\nAdvanced
  stack build parameters or env variables\n--------------------------------------------------\nSTACK_YAML
  \             : Alternative stack config, cannot be a path, just the file name\nSTACK_OPTIONS
  \          : ADDITIONAL stack global options (e.g. -v) to append\nSTACK_BUILD_OPTIONS
  \    : ADDITIONAL stack build command options to append\nSTACK_UPGRADE           :
  [y] DESTRUCTIVE! Upgrades stack to latest version\n\n--------------------------------------------------\nAdvanced
  cabal build parameters or env variables\n--------------------------------------------------\nCABAL_USE_STACK_SDIST
  \  : [y] Use stack sdist (to use --pvp-bounds)\nCABAL_CONFIGURE_OPTIONS : ADDITIONAL
  default cabal configure options to append\nCABAL_CHECK_RELAX       : [y] Do not
  fail if cabal check fails on the package.\nCABAL_NO_SANDBOX        : [y] DESTRUCTIVE!
  Clobber (force install) global cabal ghc package db\nCABAL_HACKAGE_MIRROR    : [y]
  DESTRUCTIVE! Specify an alternative mirror, will modify the cabal user config file.\nCABAL_REINIT_CONFIG
  \    : [y] DESTRUCTIVE! Remove old cabal config to avoid any config incompatibility
  issues\n\n--------------------------------------------------\nCoverage related parameters
  or env variables\n--------------------------------------------------\nCOVERALLS_OPTIONS
  \      : hpc-coveralls args and options, usually just test suite names\nCOVERAGE
  \               : [y] Just generate coverage information\n\n--------------------------------------------------\nhlint
  related parameters or env variables\n--------------------------------------------------\nHLINT_COMMANDS
  \         : hlint commands e.g.'hlint lint src; hlint lint test'\n\n--------------------------------------------------\nDiagnostics
  parameters or env variables\n--------------------------------------------------\nCHECK_ENV
  \              : [y] Treat unknown env variables as error, used with env -i\nBASE_TIME
  \              : System time to be used as base for timeline reporting\n"
license-name: BSD3
