homepage: https://github.com/composewell/packcheck
changelog-type: markdown
hash: 91a750078a5657c0d451c245dd7d6f0bc1e8d69ab908396cd71daff2fc47460b
test-bench-deps:
  packcheck: -any
  base: '>=4.8 && <5'
maintainer: harendra.kumar@gmail.com
synopsis: Universal build and CI testing for Haskell packages
changelog: |
  ## 0.5.0

  ### Bug Fixes

  * `packcheck.sh` script itself was missing from the package, added.

  ### Breaking Changes

  * CI now fails if `DISABLE_SDIST_BUILD` is not set and the contents
    of the source distribution tar ball do not match the git repository
    contents. Either add any exceptions to `.packcheck.ignore` file or use
    `DISABLE_SDIST_GIT_CHECK=y` to disable this feature. Currently this check is
    done only if `git` and `tar` commands are available in the `PATH`.

  ### Deprecations

  * `cabal-v1` command now shows a deprecation message and is removed from help.
    This command will be removed in future.
  * `ENABLE_INSTALL` option now does nothing. This change is because of the new
    behavior in cabal-3. This option will be removed in future.

  ### Enhancements

  * Added a feature to detect if any files in the git repo are missing from the
    source distribution tarball.
  * Add `CABAL_PROJECT` environment variable to support specifying a cabal
    project file.

  ## 0.4.2

  ### Bug Fixes

  * When building from source distribution, it would not build again unless
    cleaned with `packcheck clean` if a file in the source has changed.

  ### Deprecations

  * Deprecate and replace the `cabal` command with `cabal-v1`, in future `cabal`
    will be used for `cabal-v2`.
  * Deprecate and replace the `cabal-new` command with `cabal-v2`.
  * Deprecate and rename `CABAL_NEWBUILD_OPTIONS` to `CABAL_BUILD_OPTIONS`
  * Deprecate and rename `CABAL_NEWBUILD_TARGETS` to `CABAL_BUILD_TARGETS`
  * Use STACK_BUILD_OPTIONS envvar in the dependency install phase as well
  * Remove stack yaml creation using stack init/solver

  ### Enhancements

  * Search for ghc among stack installed GHC binaries as well
  * Add GHCJS support. Use ENABLE_GHCJS=y option.
  * Add packcheck-safe.sh . The safe version does not trust or use any
    environment variables, all environment needs to be specified on the command
    line. It also catches any misspelled command line parameter names.
  * Allow boolean parameters to be specified with a lenient syntax allowing
    values y|Y|yes|Yes|YES|true|True|TRUE|on|On|ON|n|N|no|No|NO|false|False|FALSE|off|Off|OFF

  ## 0.4.1

  * Disable hpc-coveralls by default

  ## 0.4.0

  * Add support for circle CI
  * Add support for multi-package stack as well as cabal repos
  * Add a version command
  * Add CABAL_NEWBUILD_TARGETS envvar to build specific targets
  * Add GHC 8.6.1 in build matrices

  ## 0.3.1

  * Add a new environment var option DISABLE_DIST_CHECKS to disable source
    distribution checks. This can be used as a workaround for a bug in stack
    causing "stack sdist" to fail.
  * For stack builds, use the same options (STACK_BUILD_OPTIONS) for install test
    as for build so that an extra rebuild does not occur during install.
  * Workaround to avoid depending on `cabal info` command; in certain cases this
    command crashes cabal. See issue #13.

  ## 0.3.0

  ### Enhancements
  * Add cabal new-build support. Use `packcheck.sh cabal-new` to use it.
  * Add knobs to disable tests or doc builds (`DISABLE_TEST`, `DISABLE_DOCS`)
  * Now you can specify multiple versions of GHC in PATH and packcheck
    automatically finds the right one based on GHCVER envvar.
  * Add TOOLS_DIR option to specify hvr-ghc style installation of ghc and
    cabal. A correct version of GHC is automatically picked from this directory.
  * GHCVER and CABALVER variables are now optional in travis config if you
    specify the cabal and ghc PPAs under apt sources.
  * Run `autoreconf` if there is a `configure.ac` in the package dir

  ### Deprecations
  * TEST_INSTALL option is deprecated, use ENABLE_INSTALL instead

  ## 0.2.0

  ### Breaking Changes
  * Make `STACK_BUILD_OPTIONS` and `CABAL_CONFIGURE_OPTIONS` append to the
    existing build/configure options instead of overriding them.
  * Do not enforce specific `stack` version in CI configs - this is done to avoid
    failures due to github API limits when upgrading or downgrading.

  ### Bug Fixes
  * Avoid build failures in cases when `cabal-install` has to be installed and
    its dependencies may conflict with the current project dependencies.

  ### Enhancements
  * Better documentation in travis and appveyor configs
  * Reduce the number of builds in default config from 11 to 6

  ## 0.1.1

  * _Enhancement_: Nix support; fix bash location to make it work on NixOS and
    potentially on other systems.

  ## 0.1.0

  * Initial release
basic-deps:
  base: '>=4.8 && <5'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
- 0.5.0
author: Harendra Kumar
latest: 0.5.0
description-type: markdown
description: "# packcheck\n\n[![Hackage](https://img.shields.io/hackage/v/packcheck.svg?style=flat)](https://hackage.haskell.org/package/packcheck)\n[![Gitter
  chat](https://badges.gitter.im/composewell/gitter.svg)](https://gitter.im/composewell/packcheck)\n[![Build
  Status](https://travis-ci.org/composewell/packcheck.svg?branch=master)](https://travis-ci.org/composewell/packcheck)\n[![Windows
  Build status](https://ci.appveyor.com/api/projects/status/f7c0ncy84cxp8lbe?svg=true)](https://ci.appveyor.com/project/harendra-kumar/packcheck)\n[![CircleCI](https://circleci.com/gh/composewell/packcheck/tree/master.svg?style=svg)](https://circleci.com/gh/composewell/packcheck/tree/master)\n[![Coverage
  Status](https://coveralls.io/repos/composewell/packcheck/badge.svg?branch=master&service=github)](https://coveralls.io/github/composewell/packcheck?branch=master)\n\n##
  Quick Start\n\nPlease use `cabal` version 2.4 or later.\n\n### Build on CI (Travis/Appveyor/CircleCI)\nTo
  use packcheck for CI testing of your repo:\n\n* Add your package repo to travis/appveyor/circleci\n*
  Copy\n[.travis.yml](https://github.com/composewell/packcheck/blob/master/.travis.yml),\n[appveyor.yml](https://github.com/composewell/packcheck/blob/master/appveyor.yml),\nor\n[.circleci/config.yml](https://github.com/composewell/packcheck/blob/master/.circleci/config.yml)\nto
  your package repo \n\nCI should work out of the box for most packages. Uncomment
  the relevant lines\nin the CI config files or change the values of the environment
  variables for\nfine grained control or custom configuration.\n\n### Build on Local
  Machine\nYou can use packcheck to build or CI test a package on your local machine
  as\nwell.  For local use, copy\n[packcheck.sh](https://github.com/composewell/packcheck/blob/master/packcheck.sh)\nto
  your local machine (Linux/OSX/Windows), put it in your PATH, and run it\nfrom your
  package directory. You can pass the same evironment variables that\nare used in
  CI files to run the exact same tests locally. Usage is as simple\nas:\n```\n$ packcheck.sh
  cabal-v2\n$ packcheck.sh cabal-v2 GHCVER=8.6.5\n$ packcheck.sh cabal-v2 ENABLE_GHCJS=y\n$
  packcheck.sh stack GHCVER=8.6\n```\n\n`packcheck` can automatically pick the requested
  version of GHC from:\n\n* multiple GHC path components in your PATH environment
  variable\n* [hvr ghc PPA](https://launchpad.net/~hvr/+archive/ubuntu/ghc) install
  directory\n* stack installed ghc binaries\n\n### Out of the box support\n\n| GHC
  \          | GHCJS     |\n|:-------------:|:---------:|\n\n| cabal         | stack
  \    |\n|:-------------:|:---------:|\n\n| Linux         | OSX       | Windows       |\n|:-------------:|:---------:|:--------------|\n\n|
  Travis        | Appveyor  | CircleCI      | Local Machine |\n|:-------------:|:---------:|:--------------|:--------------|\n\nThe
  script can be easily adapted to any CI with a single line build command.\n\n## Key
  Features\n\n* _Error messages:_ A lot of emphasis has been put on providing precise
  and\n  detailed error messages when something fails so that the user can easily
  fix\n  things.\n* _Informational:_ The output provides all the information that
  you may want to\n  know, tool paths being used, their versions, how they are invoked,
  build\n  options, time taken by each build step etc. You can even copy the commands\n
  \ from the output and paste them on your local host to reproduce the build or\n
  \ failure and debug quickly. [See here for a sample\n  output](https://travis-ci.org/composewell/packcheck).\n*
  _Same tests everywhere:_ You can run exact same tests with same options or\n  flags,
  in the same way, on all CI platforms.\n* _Choose options:_ Conveniently control
  all aspects of build through command\n  line or environment variables, including
  tool options or whether to enable\n  benchmarks, haddock, coverage, test etc.\n*
  _Picking GHC:_ Right GHC is picked up automatically from PATH or TOOLS_DIR\n  (`hvr
  ghc PPA` installation dir) based on GHCVER. Stack installed GHC\n  binaries can
  be picked automatically when available.\n* _Test source distribution:_ `packcheck`
  creates the source distribution and\n  builds the package from the generated tarball
  to make sure that you build\n  what you release and don't miss adding a file to
  the distribution. Also,\n  checks if any file in the git repo is missing in the
  source distribution.\n* _Upload coverage:_ To send coverage info to\n  [coveralls.io](https://coveralls.io)
  just uncomment a line in your\n  `.travis.yml`.\n* _Non-destructive_: By default
  the script does not change any config or\n  upgrade any tools on the host machine.\n*
  _Auto tool install_: For stack builds, `stack` and `ghc` can be installed\n  automatically\n\n##
  Introduction\n\nThe package `packcheck` includes a script called `packcheck.sh`,
  it is a high\nlevel universal super build script to uniformly, consistently build
  and\ncomprehensively sanity test a Haskell package across build tools (stack/cabal)\nand
  across all platforms (Linux/MacOS/Windows).  You do not need to be familiar\nwith
  any of the build tools to use it.\n\nTo make sure that it works everywhere without
  installing anything it is\ndeliberately written using the `bash` shell scripting
  language. Any of the\nparameters to control the builds can either be passed on the
  script command\nline or as environment variables for convenient use on CI systems.\n\n`packcheck`
  is also a minimal yet complete \"hello world\" Haskell package with\nmodel `travis`
  and `appveyor` config files that can be used unmodified in any\nHaskell package.
  The CI configs can be modified **declaratively**, using\nenvironment variables,
  to adapt to **any** kind of build scenario you can\nimagine.\n\nThis model package
  has everything that a Haskell package usually has; including\ntests, benchmarks
  and Linux/MacOS/Windows CI already working. It can be used as\na starting point
  to develop a new package. Beginners can use it to learn about\nhaskell package metadata
  structure.\n\n## What all does it do?\n\nAn invocation of `packcheck.sh` performs
  a whole battery of tests, all aspects\ncan be controlled via environment variables,
  command line. The flow goes\nroughly as follows:\n\n* Pick up the correct version
  of GHC/cabal/stack\n* create source distribution and unpack it to test from it\n*
  build source, benchmarks and docs\n* run tests\n* run `hlint`\n* generate and upload
  coverage report (to coveralls.io)\n* perform distribution checks\n\n## Usage Examples\n\nYou
  can run these commands on your local machine as well as inside a CI script.\nYou
  can try these commands in the `packcheck` package itself:\n```\n$ cd packcheck\n$
  ./packcheck.sh cabal-v2 GHCVER=8.6.5\n```\n\n```\n$ ./packcheck.sh stack RESOLVER=lts-13\n$
  ./packcheck.sh stack GHCVER=8.6.5\n$ ./packcheck.sh stack RESOLVER=lts-7.24 STACK_YAML=stack-8.0.yaml
  STACK_BUILD_OPTIONS=\"--flag streamly:examples-sdl\" CABALVER=1.24\n# You can also
  do a cabal build using stack installed ghc:\n$ stack exec ./packcheck.sh cabal RESOLVER=lts-11\n```\n\nRun
  hlint commands on the directories `src` and `test`:\n```\n$ ./packcheck.sh stack
  HLINT_COMMANDS=\"hlint lint src; hlint lint test\"\n```\n\nSend coverage info of
  the testsuites named `test1` and `test2` to coveralls.io\nusing `hpc-coveralls`.\n```\n$
  ./packcheck.sh cabal-v2 GHCVER=8.8.3 COVERALLS_OPTIONS=\"test1 test2\"\n```\n\n##
  Picking GHC versions\n\nWhen `GHCVER` parameter is not specified, `packcheck` looks
  for a binary named\n`ghc` in your `PATH` environment variable. It uses first such
  binary found in\n`PATH`.\n\nWhen `GHCVER` parameter is specified, it looks for `ghc`
  in the `PATH` and if\n`GHCVER` is a PREFIX of the actual version of `ghc` binary
  found then that\n`ghc` binary is used. Otherwise, `packcheck` tries to look for
  another `ghc`\nbinary in the next PATH components until it finds a matching `ghc`
  version.\n\nWhen both `GHCVER` and `TOOLS_DIR` are specified then in addition to
  searching\nin `PATH` environment variable, `packcheck` also looks for ghc in\n`${TOOLS_DIR}/ghc/${GHCVER}*/bin`.
  This is to facilitate selecting any GHC\nversion from an `hvr/ghc` ubuntu PPA installation
  without putting all the\nmyriad GHC version directories explicitly in your `PATH`.\n\nIf
  all of the above fails `packcheck` looks for ghc in the `stack` install\nlocations.\n\n##
  packcheck-safe\n\n`packcheck-safe.sh` is a more robust wrapper over `packcheck.sh`,
  it does not\ntrust or use any environment variables, all environment needs to be
  specified\nexplicitly on the command line. Therefore, it ensures better reproducibility.\n\nIt
  also catches any misspelled command line parameter names. For example,\n`packcheck.sh`
  won't catch it if you typed `GHCVWR=8.4` instead of\n`GHCVER=8.4`, it just assumes
  that `GHCVER` is not specified.\n`packcheck-safe.sh` would generate an error saying
  that `GHCVWR` is not\nrecognized. Since it uses a clean environment you will have
  to specify PATH as\nwell on the command line. For example,\n\n```\n$ ./packcheck-safe.sh
  cabal-v2 PATH=/bin:/usr/bin:/opt/ghc/bin\n```\n\n## Full Reference\n\nPlease use
  `cabal` version 2.4 or later.\n\nNOTE: Any of the parameters described below can
  either be passed on command\nline or as an environment variable. Passing options
  on command line is more\nconvenient when running interactively, while environment
  variables are more\nconvenient when running on a CI system.\n\n```\n$ packcheck.sh
  --help\n\n--------------------------------------------------\nUsage\n--------------------------------------------------\n./packcheck.sh
  COMMAND [PARAMETER=VALUE ...]\n\nFor example:\n./packcheck.sh stack RESOLVER=lts-10.0
  GHC_OPTIONS=\"-O0 -Werror\"\n\nControl parameters can either be passed on command
  line or exported\nas environment variables. Parameters marked DESTRUCTIVE may modify\nyour
  global user config or state.\n\nBoolean parameters can be specified as\ny|Y|yes|Yes|YES|true|True|TRUE|on|On|ON
  for an affirmative value and as\nn|N|no|No|NO|false|False|FALSE|off|Off|OFF or empty
  for a negative value.\n\n--------------------------------------------------\nCommands
  and flags\n--------------------------------------------------\ncabal-v2                :
  build using cabal v2-build\nstack                   : build using stack\nclean                   :
  remove the .packcheck directory\ncleanall                : remove .packcheck, .stack-work,
  .cabal-sandbox directories\nhelp | --help | -h      : show this help message\n--version
  \              : show packcheck version\n\n--------------------------------------------------\nSelecting
  tool versions\n--------------------------------------------------\nENABLE_GHCJS
  \           : [y] Use GHCJS instead of GHC to build\nGHCVER                  : [a.b.c]
  GHC version prefix (may not be enforced when using stack)\nCABALVER                :
  [a.b.c.d] Cabal version (prefix) to use\nRESOLVER                : Stack resolver
  to use for stack builds or cabal builds using stack\nSTACKVER                : [a.b.c.d]
  Stack version (prefix) to use\nSTACK_UPGRADE           : [y] DESTRUCTIVE! Upgrades
  stack to latest version\n\n--------------------------------------------------\nWhere
  to find the required tools\n--------------------------------------------------\nPATH
  \                   : [path] Set PATH explicitly for predictable builds\nTOOLS_DIR
  \              : [dir] Find ghc|cabal by version as in TOOLS_DIR/ghc/<version>/bin\n\n--------------------------------------------------\nSpecifying
  common tool options\n--------------------------------------------------\nGHC_OPTIONS
  \            : Specify GHC options to use\nSDIST_OPTIONS           : Arguments to
  stack/cabal sdist command\nCABAL_REINIT_CONFIG     : [y] DESTRUCTIVE! Remove old
  config to avoid incompatibility issues\n\n--------------------------------------------------\nSpecifying
  what to build\n--------------------------------------------------\nDISABLE_BENCH
  \          : [y] Do not build benchmarks, default is to build but not run\nDISABLE_TEST
  \           : [y] Do not run tests, default is to run tests\nDISABLE_DOCS            :
  [y] Do not build haddocks, default is to build docs\nDISABLE_SDIST_BUILD     : [y]
  Do not build from source distribution\nDISABLE_SDIST_GIT_CHECK : [y] Do not compare
  source distribution with git repo\nDISABLE_DIST_CHECKS     : [y] Do not perform
  source distribution checks\n\n--------------------------------------------------\nstack
  options\n--------------------------------------------------\nSTACK_YAML              :
  Alternative stack config, cannot be a path, just the file name\nSTACK_OPTIONS           :
  ADDITIONAL stack global options (e.g. -v) to append\nSTACK_BUILD_OPTIONS     : ADDITIONAL
  stack build command options to append\n\n--------------------------------------------------\ncabal
  options\n--------------------------------------------------\nCABAL_PROJECT           :
  Alternative cabal project config, cannot be a path, just the file name\nCABAL_BUILD_OPTIONS
  \    : ADDITIONAL cabal v2-build options to append to defaults\nCABAL_BUILD_TARGETS
  \    : cabal v2-build targets, default is 'all'\nCABAL_CONFIGURE_OPTIONS : ADDITIONAL
  cabal v1-configure options to append to defaults\nCABAL_CHECK_RELAX       : [y]
  Do not fail if cabal check fails on the package.\nCABAL_NO_SANDBOX        : [y]
  DESTRUCTIVE! Clobber (force install) global cabal ghc package db\nCABAL_HACKAGE_MIRROR
  \   : [y] DESTRUCTIVE! Specify an alternative mirror, modifies the cabal config
  file.\n\n--------------------------------------------------\nCoverage options\n--------------------------------------------------\nCOVERALLS_OPTIONS
  \      : hpc-coveralls args and options, usually just test suite names\nCOVERAGE
  \               : [y] Just generate coverage information\n\n--------------------------------------------------\nhlint
  options\n--------------------------------------------------\nHLINT_COMMANDS          :
  hlint commands e.g.'hlint lint src; hlint lint test'\n\n--------------------------------------------------\nDiagnostics
  options\n--------------------------------------------------\nCHECK_ENV               :
  [y] Treat unknown env variables as error, used with env -i\nBASE_TIME               :
  System time to be used as base for timeline reporting\n```\n\nBuild fails if `DISABLE_SDIST_BUILD`
  is not set and the contents\nof the source distribution tar ball do not match the
  git repository\ncontents. Either add any exceptions to `.packcheck.ignore` file
  or use\n`DISABLE_SDIST_GIT_CHECK=y` to disable this feature. Currently this check
  is\ndone only if `git` and `tar` commands are available in the `PATH`.\n\nOptions
  marked `DESTRUCTIVE!` are fine in a CI environment. But on a\nlocal machine sometimes
  it may not be desirable as it will change the\nstate of your global cabal config,
  so consider that before using these options.\n\nBy default cabal builds are done
  using sandboxes. It creates any temporary\nfiles or build artifacts inside `.packcheck`
  directory. See the `clean` and\n`cleanall` commands to release the temporary space.\n\n`stack`
  is automatically installed and can be used to do cabal builds as well.\nIf you specify
  `BUILD=cabal-v2` and `RESOLVER` at the same time then the cabal\nbuild uses stack
  installed `cabal` and `ghc`, both are installed automatically\nwhen needed.\n\nFor
  pure cabal builds i.e. when `BUILD=cabal-v2` and `RESOLVER` is not\nspecified, `cabal`
  and `ghc` must be pre-installed on the system before\nbuilding.\n\n## Coveralls\n\nPlease
  pick the updated version of `hpc-coveralls` from\n[here](https://github.com/composewell/hpc-coveralls).
  You can create a\n`cabal.project.coveralls` file, and use that as project file using\nthe
  `CABAL_PROJECT=cabal.project.coveralls` option/env var.\n\n```\npackages: .\n\nsource-repository-package\n
  \ type: git\n  location: https://github.com/composewell/hpc-coveralls\n  tag: d9e20179579f0638f6e978816355d18568e6a1f0\n```\n\n##
  Diagnostics\n\nSometimes you may run into issues due to some environment variables
  unknowingly\nset or some command line parameters or env variables being misspelled
  and\ntherefore silently ignored. To avoid any such issues the robust way to invoke\n`packcheck`
  is to use a clean environment using `env -i` and passing\n`CHECK_ENV=y` parameter.
  When this parameter is set unwanted/misspelled\nvariables are detected and reported.\n\n```\n$
  env -i CHECK_ENV=y ./packcheck.sh stack\n```\n\nFor performance diagnostics `packcheck`
  prints the time elapsed from the\nbeginning at each build step performed.\n"
license-name: BSD-3-Clause
