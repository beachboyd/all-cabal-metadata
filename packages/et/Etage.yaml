homepage: http://mitar.tnode.com
changelog-type: ''
hash: 4c02d63b8183b6900dadce972740865d5da1ced4da471fe598f4960c8ff87ad7
test-bench-deps: {}
maintainer: mitar.haskell@tnode.com
synopsis: A general data-flow framework
changelog: ''
basic-deps:
  ghc: ! '>=7'
  unix: ! '>=2.4 && <3'
  base: ! '>=4.3 && <5'
  time: ! '>=1.1 && <2'
  SafeSemaphore: ! '>=0.10 && <1'
  containers: ! '>=0.4 && <1'
  mtl: ! '>=1.1 && <3'
  operational: ! '>=0.2 && <1'
  random: ! '>1.0 && <2'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
author: Mitar Milutinovic
latest: 0.1.12
description-type: haddock
description: ! 'A general data-flow framework featuring nondeterminism, laziness and
  neurological pseudo-terminology. It can be

  used for example for data-flow computations or event propagation networks. It tries
  hard to aide type checking and to

  allow proper initialization and cleanup so that interfaces to input and output devices
  (data or events producers or

  consumers) can be made (so that created models\/systems\/networks can be used directly
  in real world applications, for

  example robots).


  Its main goal is to model complex neural networks with more biological realism.
  Namely that impulses do

  take time to travel and neuron responses are also not instantaneous. And of course
  that neural systems are in

  its base nondeterministic and that some level of determinism is build upon that.
  All this of course makes reasoning

  about such networks even harder (impossible?).


  This framework is in fact just a simple abstraction of Haskell threads and data
  passing between them through

  channels with threads'' initialization and cleanup wrapped into a Haskell type class.


  Feel free to contribute or suggest additional features or (example) programs or
  to create interfaces to other modules.'
license-name: LGPL-3.0-only
