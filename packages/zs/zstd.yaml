homepage: https://github.com/facebookexperimental/hs-zstd
changelog-type: markdown
hash: e04dd898175aefb278be634ce18bd57ccb3e364e660b0890b1eb84f3437fcac2
test-bench-deps:
  bytestring: ! '>=0.9'
  test-framework: ! '>=0.4'
  base: ! '>=4.8 && <5'
  test-framework-quickcheck2: ! '>=0.2'
  criterion: -any
  ghc-prim: -any
  zlib: -any
  QuickCheck: ! '>=2.7'
  zstd: -any
maintainer: bryano@fb.com
synopsis: Haskell bindings to the Zstandard compression algorithm
changelog: ! '# 0.1.0.0


  * Initial release

'
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.8 && <5'
  ghc-prim: -any
  deepseq: -any
all-versions:
- 0.1.0.0
author: Bryan O'Sullivan
latest: 0.1.0.0
description-type: markdown
description: ! "# Zstandard bindings for Haskell\n\nThis library provides Haskell
  bindings to the\n[Zstandard compression library](http://facebook.github.io/zstd/).\n\nThe
  library is structured to provide several layers of abstraction.\n\n* For the simplest
  use cases, the top-level\n  [`Zstd`](http://hackage.haskell.org/package/zstd/docs/Codec-Compression-Zstd.html)\n
  \ module is the best place to get started.\n\n* If you need to stream a large amount
  of data with a constant memory\n  footprint, use the\n  [`Zstd.Streaming`](http://hackage.haskell.org/package/zstd/docs/Codec-Compression-Zstd-Streaming.html)\n
  \ module. This can also be used as a building block for adapting to\n  streaming
  libraries such as `pipes` and `conduit`.  (If you need to\n  use lazy bytestrings
  instead, see the\n  [`Zstd.Lazy`](http://hackage.haskell.org/package/zstd/docs/Codec-Compression-Zstd-Lazy.html)\n
  \ module.  This is built using the abstractions from the\n  `Zstd.Streaming` module.)\n\n*
  When your usage is dominated by lots of small messages (presumably\n  using pre-computed
  compression dictionaries), use the\n  [`Zstd.Efficient`](http://hackage.haskell.org/package/zstd/docs/Codec-Compression-Zstd-Efficient.html)\n
  \ module to amortize the cost of allocating and initializing context\n  and dictionary
  values.\n\n## Join in\n\nIf you'd like to help improve the code, please\n[read the
  contribution guidelines](CONTRIBUTING.md).  This discusses\nhow to file bugs and
  submit changes to the code itself.\n\n## API documentation\n\nThe APIs should be
  easy to understand and work with, and you can find\n[documentation on Hackage](http://hackage.haskell.org/package/zstd).\n"
license-name: BSD-3-Clause
