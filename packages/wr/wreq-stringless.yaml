homepage: https://github.com/j-keck/wreq-stringless#readme
changelog-type: ''
hash: 11534e76d8e888ec17b51ae5da46997b82e043e94f0af5b1712da92f7893e397
test-bench-deps: {}
maintainer: Juergen Keck <jhyphenkeck@gmail.com>
synopsis: Simple wrapper to use wreq without Strings
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  wreq: ==0.5.*
  utf8-string: -any
all-versions:
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.5.2.0
- 0.5.9.0
- 0.5.9.1
author: Juergen Keck
latest: 0.5.9.1
description-type: markdown
description: ! "# wreq-stringless: Simple wrapper to use wreq without Strings\n\nThis
  Haskell library wraps [Network.Wreq](http://hackage.haskell.org/package/wreq) to
  use the functions without Strings.\n\nYou can use:\n\n- Data.Text\n- Data.Text.Lazy\n-
  Data.ByteString.UTF8\n- Data.ByteString.Layz.UTF8\n\nfor all functions from [Network.Wreq](http://hackage.haskell.org/package/wreq)
  where the original implementation use Strings.\n\n\n\n## Example:\n\n    {-# LANGUAGE
  OverloadedStrings #-}\n    module Main where\n\n    import qualified Data.Text               as
  T\n    import           Lens.Micro.Extras       (view)\n    import qualified Network.Wreq
  \           as Wreq\n    import qualified Network.Wreq.StringLess as Wreq'\n\n\n
  \   -- say we use a alternate prelude like 'Protolude', and we don't use Strings\n
  \   -- or we have the url from somewhere else, and it's not a String.\n    url ::
  T.Text\n    url = \"http://httpbin.org\"\n\n\n    main :: IO ()\n    main = do\n
  \     -- with plain wreq\n      view Wreq.responseStatus  <$> Wreq.get (T.unpack
  url) >>= print\n\n      -- with wreq-stringless - no manual conversion necessary\n
  \     view Wreq'.responseStatus <$> Wreq'.get url >>= print\n\n\n\n## How to use
  it:\n\n* replace your **wreq** dependency with **wreq-stringless**\n* replace the
  import **Network.Wreq** with **Network.Wreq.StringLess**\n"
license-name: MIT
