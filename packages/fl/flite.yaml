homepage: http://www.cs.york.ac.uk/fp/reduceron/
changelog-type: ''
hash: 8cfcb9a3df33b40f979139c29955a537fb15c3b999223e7f3ba80c488fd95d1c
test-bench-deps: {}
maintainer: Jason Reich <jason@cs.york.ac.uk>, Matthew Naylor <mfn@cs.york.ac.uk>
synopsis: f-lite compiler, interpreter and libraries
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  haskell98: ==1.*
  parsec: ! '>=2.1.0.1 && <3'
  array: ==0.*
  containers: ==0.*
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Matthew Naylor
latest: 0.1.2
description-type: text
description: ! "================================\nF-lite: a core subset of Haskell\nMatthew
  N, 26 November 2008\n================================\n\nF-lite is a core subset
  of Haskell.  Unlike GHC Core and Yhc Core,\nF-lite has a concrete syntax.  You can
  write F-lite programs in a\nfile, and pass them to the F-lite interpreter or compiler.
  \ Another\nway to view F-lite is as a minimalist lazy functional language.\n\nF-lite
  is untyped\n-----------------\n\nBut as it is a subset of Haskell, you can use a
  Haskell implementation\nto type-check F-lite programs.  \n\nEXAMPLE 0: F-lite definition
  of 'append'.  Definitions of 'Nil' and\n'Cons' are not required - there is no need
  to define algebraic data\ntypes.\n\n  append Nil ys = ys;\n  append (Cons x xs)
  ys = Cons x (append xs ys);\n\n(The use of semi-colons to seperate equations is
  mandatory.)\n\nF-lite supports uniform pattern matching\n----------------------------------------\n\nPattern
  matching is uniform if and only if the order of equations\ndoesn't matter (Wadler
  '86).  Uniform pattern matching can be easily\nand efficiently compiled to core
  case expressions.  A core case\nexpression is one whose patterns all have the form
  'constructor\napplied to zero or more variables'.  The fact that the order of\nequations
  doesn't matter is also useful when transforming functional\nprograms, for example
  by fold/unfold transformations.\n\nEXAMPLE 1: F-lite definition of 'zipWith', illustrating
  uniform\npattern matching.\n\n  zipWith f Nil ys = Nil;\n  zipWith f (Cons x xs)
  Nil = Nil;\n  zipWith f (Cons x xs) (Cons y ys) = Cons (f x y) (zipWith f xs ys);\n\nEXAMPLE
  2: F-lite definition of 'init', illustrating nested,\nincomplete, uniform pattern
  matching.\n\n  init (Cons x Nil) = Nil;\n  init (Cons x (Cons y ys)) = Cons x (init
  (Cons y ys));\n\nEXAMPLE 3: F-lite definition of 'init', using a case expression.\n\n
  \ init xs = case xs of {\n              Cons x Nil -> Nil;\n              Cons x
  (Cons y ys) -> Cons x (init (Cons y ys));\n            };\n\n(The use of semi-colons
  to seperate case alternatives is mandatory.)\n\nF-lite supports 'let'-expressions\n---------------------------------\n\nBut
  they may only bind expressions to variables (not patterns).\n\nEXAMPLE 4: F-lite
  definition of 'pow', the power-list function,\nillustrating a let expression.\n\n
  \ pow Nil = Cons Nil Nil;\n  pow (Cons x xs) = let { rest = pow xs } in\n                      append
  rest (map (Cons x) rest);\n\nEXAMPLE 5: F-lite definition of 'repeat', using a let
  expression to\nintroduce a cyclic data structure.\n\n  repeat x = let { xs = Cons
  x xs } in xs;\n\nF-lite supports primitive integers\n----------------------------------\n\nFinite
  precision integers along with the following arithmetic\nfunctions are allowed: (+),
  (-), (<=), (==), (/=).  The latter three\nreturn 'True' or 'False' accordingly.
  \ These operators must be written\nin prefix form and cannot be partially applied.\n\nEXAMPLE
  6: F-lite definition of 'negate'.\n\n  negate n = (-) 0 n;\n\n(Negative literals
  are not supported.)\n\nEXAMPLE 7:  F-lite definition of 'fromTo'.\n\n  fromTo n
  m = case (<=) n m of {\n                 True -> Cons n (fromTo ((+) n 1) m);\n
  \                False -> Nil;\n               };\n\nF-lite supports printing\n------------------------\n\nTwo
  primitives, 'emit' and 'emitInt', are provided for printing characters\nand integers
  respectively.\n\nEXAMPLE 8: Printing the string \"hi!\" in F-lite.\n\n  sayHi k
  = emit 'h' (emit 'i' (emit '!' k))\n\nWhen evaluated, 'sayHi k' will print \"hi!\"
  and return 'k' (the\ncontinuation).\n\nEXAMPLE 9: 'Hello world' in F-lite.\n\n  emitStr
  Nil k = k;\n  emitStr (Cons x xs) k = emit x (emitStr xs k);\n\n  main = emitStr
  \"Hello world!\\n\" 0;\n\nString literals are internally translated to 'Nil'-'Cons'
  lists of\ncharacters.  The result of the 'main' function is expected to be an\ninteger
  - the displaying of any output must be done explicitly by the\nprogrammer.\n\nEXAMPLE
  10: Full F-lite program to display the 10th fibonacci number.\n\n  {\n\n  fib n
  = case (<=) n 1 of {\n            True  -> 1;\n            False -> (+) (fib ((-)
  n 2)) (fib ((-) n 1));\n          };\n\n  emitStr Nil k = k;\n  emitStr (Cons x
  xs) k = emit x (emitStr xs k);\n\n  main = emitStr \"fib(10) = \" (emitInt (fib
  10) (emit '\\n' 0));\n\n}\n\nThe braces enclosing the program are indeed mandatory.
  \ The primitive\n'emitInt' function is like 'emit' but prints an integer rather
  than a\ncharacter.  Both 'emit' and 'emitInt' must be applied to at least one\nargument.\n\nOur
  implementation\n------------------\n\nOur F-lite implementation includes both an
  interpreter (written in\nHaskell) and a compiler (to C code - see Memo 22).  It
  works in both\nHugs and GHC.  For example, in the source directory, using Hugs:\n\n
  \ > runhugs fl-pure.hs examples/Fib.hs\n  fib(10) = 89\n\nand likewise using GHC:\n\n
  \ > ghc -O2 --make fl-pure -o fl\n\n  > ./fl examples/Fib.hs\n  fib(10) = 89\n\nA
  Cabal script can be used to install the parsec version using GHC:\n\n  > cabal install\n
  \ \n  > flite examples/Fib.hs\n  fib(10) = 89\n\nor even the pure version:\n\n  >
  cabal install -f \"pure\"\n\n  > flite-pure examples/Fib.hs\n  fib(10) = 89\n\nTo
  compile F-lite programs, use the '-c' command-line option,\nand redirect the output
  to a C file of your choice.\n\n  > flite -c ../examples/Fib.hs > /tmp/Fib.c\n\nThe
  resulting C file can be compiled (with optimisations) using GCC:\n\n  > gcc -O3
  /tmp/Fib.c -o Fib\n\n  > ./Fib\n  fib(10) = 89\n"
license-name: BSD-3-Clause
