homepage: https://github.com/tfausak/flow#readme
changelog-type: markdown
hash: ad80ff8d726dfd477f9a1485e3051a720e38f4fdce57e7fbd105b589f2096b43
test-bench-deps:
  flow: -any
  base: ! '>=4.9.0 && <4.12'
  doctest: ! '>=0.11.0 && <0.16'
  QuickCheck: ! '>=2.8.2 && <2.12'
  template-haskell: ! '>=2.11.0 && <2.14'
maintainer: Taylor Fausak
synopsis: Write more understandable Haskell.
changelog: ! '# Change log


  Flow uses [Semantic Versioning][].

  The change log is available through the [releases on GitHub][].


  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html

  [releases on GitHub]: https://github.com/tfausak/flow/releases

'
basic-deps:
  base: ! '>=4.9.0 && <4.12'
all-versions:
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.5'
- '1.0.6'
- '1.0.7'
- '1.0.8'
- '1.0.9'
- '1.0.10'
- '1.0.11'
- '1.0.12'
author: ''
latest: '1.0.12'
description-type: markdown
description: ! "# [Flow][]\n\nWrite more understandable Haskell.\n\n[![Version badge][]][version]\n[![Build
  badge][]][build]\n\nFlow is a package that provides functions and operators for
  writing more\nunderstandable Haskell. It is an alternative to some common idioms
  like\n[`($)`][] for function application and [`(.)`][] for function composition.\n\n-
  \  [Requirements](#requirements)\n-   [Installation](#installation)\n-   [Usage](#usage)\n
  \   -   [Cheat sheet](#cheat-sheet)\n\n## Requirements\n\nFlow requires a Haskell
  compiler. It is tested with recent versions of GHC, but\nolder or different compilers
  should be acceptable. For installation with Cabal,\nFlow requires at least Cabal
  1.8.\n\n## Installation\n\nTo add Flow as a dependency to your package, add it to
  your Cabal file.\n\n```\nbuild-depends: flow ==1.0.*\n```\n\nSee [the change log][]
  for a detailed list of changes.\n\n## Usage\n\nFlow is designed to be imported unqualified.
  It does not export anything that\nconflicts with [the base package][].\n\n``` hs\nimport
  Flow\n```\n\n### Cheat sheet\n\nFlow            | Base\n--------------- | -------------\n<code>x
  &#124;> f</code> | `x & f`\n<code>f <&#124; x</code> | `f $ x`\n`apply x f`     |
  `f x`\n`f .> g`        | `f >>> g`\n`g <. f`        | `g . f`\n`compose f g x` |
  `g (f x)`\n`x !> f`        | -\n`f <! x`        | `f $! x`\n`apply' x f`    | `seq
  x (f x)`\n\nFor more information about Flow, please read [the Haddock documentation][].\n\n[Flow]:
  http://taylor.fausak.me/flow/\n[Version badge]: https://www.stackage.org/package/flow/badge/nightly?label=version\n[version]:
  https://www.stackage.org/package/flow\n[Build badge]: https://travis-ci.org/tfausak/flow.svg?branch=master\n[build]:
  https://travis-ci.org/tfausak/flow\n[`($)`]: http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:-36-\n[`(.)`]:
  http://hackage.haskell.org/package/base-4.8.0.0/docs/Prelude.html#v:.\n[the change
  log]: CHANGELOG.md\n[the base package]: http://hackage.haskell.org/package/base\n[the
  haddock documentation]: https://hackage.haskell.org/package/flow/docs/Flow.html\n"
license-name: MIT
