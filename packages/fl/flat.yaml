homepage: http://github.com/Quid2/flat
changelog-type: text
hash: 8628ea30d4056573fd3e4dd7b276ce0c78a51053f9b89c1cd939c0864417614a
test-bench-deps:
  flat: -any
  bytestring: -any
  filemanip: ! '>=0.3.6.3 && <0.3.7'
  base: ! '>=4.8 && <5'
  text: -any
  doctest: ! '>=0.11.2 && <0.16'
  containers: ==0.5.*
  quickcheck-instances: ! '>=0.3.12'
  ghc-prim: -any
  tasty-quickcheck: ! '>=0.8.1'
  tasty-hunit: ! '>=0.8'
  tasty: ! '>=0.11'
  deepseq: ==1.4.*
maintainer: tittoassini@gmail.com
synopsis: Principled and efficient bit-oriented binary serialization.
changelog: ! "Significant and compatibility-breaking changes.\n\nVersion 0.3:\n\t-
  Removed 'flatStrict' and 'unflatStrict' (use 'flat' and 'unflat' instead that also
  encode/decode strictly)\n\t- `unflatWith` now takes a decoder for the unpadded value
  (previously it expected a padded decoder) and decodes the padded value\n\t- Added
  some decoding primitives\n\t- Added Data.ByteString.Convert\n\nVersion 0.3.1:\n\t-
  Tested with ghc 8.2.1\n\t- Dropped dependencies on the 'cpu', 'derive' and 'tasty'
  packages to make it compatible with the Eta compiler (https://github.com/typelead/eta)\n"
basic-deps:
  bytestring: ! '>=0.10.6.0 && <0.11'
  base: ! '>=4.8 && <5'
  text: -any
  dlist: ! '>=0.6 && <0.9'
  array: ! '>=0.5.1.0 && <0.6'
  containers: ==0.5.*
  ghc-prim: -any
  deepseq: ==1.4.*
  pretty: ! '>=1.1.2 && <1.2'
  mono-traversable: ! '>=0.10.0.2 && <1.1'
  primitive: -any
  vector: -any
all-versions:
- '0.2'
- '0.2.2'
- '0.3'
- '0.3.2'
author: Pasqualino `Titto` Assini
latest: '0.3.2'
description-type: markdown
description: ! "\n[![Build Status](https://travis-ci.org/Quid2/flat.svg?branch=master)](https://travis-ci.org/Quid2/flat)\n[![Hackage
  version](https://img.shields.io/hackage/v/flat.svg)](http://hackage.haskell.org/package/flat)\n[![Stackage
  Nightly](http://stackage.org/package/flat/badge/nightly)](http://stackage.org/nightly/package/flat)\n[![Stackage
  LTS](http://stackage.org/package/flat/badge/lts)](http://stackage.org/lts/package/flat)\n\nHaskell
  implementation of [Flat](http://quid2.org/docs/Flat.pdf), a principled, portable
  and efficient binary data format ([specs](http://quid2.org)).\n\n### How To Use
  It For Fun and Profit\n\nTo (de)serialise a data type, make it an instance of the
  `Flat` class.\n\nThere is `Generics` based support to automatically derive instances
  of additional types.\n\nLet's see some code, we need a couple of extensions:\n\n```haskell\n{-#
  LANGUAGE DeriveGeneric, DeriveAnyClass #-}\n```\n\nImport the Flat library:\n\n```haskell\nimport
  Data.Flat\n```\n\nDefine a couple of custom data types, deriving Generic and Flat:\n\n```haskell\ndata
  Direction = North | South | Center | East | West deriving (Show,Generic,Flat)\n```\n\n```haskell\ndata
  List a = Nil | Cons a (List a) deriving (Show,Generic,Flat)\n```\n\nFor encoding,
  use `flat`, for decoding, use `unflat`:\n\n```haskell\nunflat . flat $ Cons North
  (Cons South Nil) :: Decoded (List Direction)\n-> Right (Cons North (Cons South Nil))\n```\n\n\nFor
  the decoding to work correctly, you will naturally need to know the type of the
  serialised data. This is ok for applications that do not require long-term storage
  and that do not need to communicate across independently evolving agents. For those
  who do, you will need to supplement `flat` with something like [zm](https://github.com/Quid2/zm).\n\n####
  Define Instances for Abstract/Primitive types\n\n A set of primitives are available
  to define `Flat` instances for abstract or primitive types.\n\n Instances for some
  common, primitive or abstract data types (Bool,Words,Int,String,Text,ByteStrings,Tuples,
  Lists, Sequences, Maps ..) are already defined in [Data.Flat.Instances](https://github.com/Quid2/flat/blob/master/src/Data/Flat/Instances.hs).\n\n####
  Optimal Bit-Encoding\n\nA pecularity of Flat is that it uses an optimal bit-encoding
  rather than the usual byte-oriented one.\n\n To see this, let's define a pretty
  printing function: `bits` encodes a value as a sequence of bits, `prettyShow` displays
  it nicely:\n\n```haskell\np :: Flat a => a -> String\np = prettyShow . bits\n```\n\nNow
  some encodings:\n\n```haskell\np West\n-> \"111\"\n```\n\n\n```haskell\np (Nil::List
  Direction)\n-> \"0\"\n```\n\n\n```haskell\naList = Cons North (Cons South (Cons
  Center (Cons East (Cons West Nil))))\np aList\n-> \"10010111 01110111 10\"\n```\n\n\nAs
  you can see, `aList` fits in less than 3 bytes rather than 11 as would be the case
  with other Haskell byte oriented serialisation packages like `binary` or `store`.\n\nFor
  the serialisation to work with byte-oriented devices or storage, we need to add
  some padding:\n\n```haskell\nf :: Flat a => a -> String\nf = prettyShow . paddedBits\n```\n\n```haskell\nf
  West\n-> \"11100001\"\n```\n\n\n```haskell\nf (Nil::List Direction)\n-> \"00000001\"\n```\n\n\n```haskell\nf
  $ Cons North (Cons South (Cons Center (Cons East (Cons West Nil))))\n-> \"10010111
  01110111 10000001\"\n```\n\n\nThe padding is a sequence of 0s terminated by a 1
  running till the next byte boundary (if we are already at a byte boundary it will
  add an additional byte of value 1, that's unfortunate but there is a good reason
  for this, check the [specs](http://quid2.org/docs/Flat.pdf)).\n\nByte-padding is
  automatically added by the function `flat` and removed by `unflat`.\n\n### Performance\n\nFor
  some hard data, see this [comparison of the major haskell serialisation libraries](https://github.com/haskell-perf/serialization).\n\nBriefly:\n
  * Size: `flat` produces significantly smaller binaries than all other libraries
  (3/4 times usually)\n * Encoding: `store` and `flat` are usually faster\n * Decoding:
  `store`, `cereal` and `flat` are usually faster\n\n One thing that is not shown
  by the benchmarks is that, if the serialized data is to be transferred over a network,
  the total transfer time (encoding time + transmission time + decoding time) is usually
  dominated by the transmission time and that's where the smaller binaries produced
  by flat give it a significant advantage.\n\n Consider for example the Cars dataset.
  As you can see in the following comparison with `store`, the overall top performer
  for encoding/decoding speed, the transfer time is actually significantly lower for
  `flat` for all except the highest transmission speeds (about 4 times faster at typical
  ADSL speeds, 2 times faster at 4G-LTE mobile speeds).\n\n||Store|Flat|\n|---|---|---|\n|Encoding
  (mSec)|  3.1|  7.0|\n|Decoding (mSec)| 22.6| 30.0|\n|Size (bytes)|702728|114841|\n|Transmission
  (mSec) @ 1 MegaByte/Sec|702.7|114.8|\n|Transmission (mSec) @ 10 MegaByte/Sec| 70.3|
  11.5|\n|Transmission (mSec) @ 100 MegaByte/Sec|  7.0|  1.1|\n|Total Transfer (mSec)
  @ 1 MegaByte/Sec|728.4|151.8|\n|Total Transfer (mSec) @ 10 MegaByte/Sec| 96.0| 48.5|\n|Total
  Transfer (mSec) @ 100 MegaByte/Sec| 32.7| 38.1|\n\n\n### Haskell Compatibility\n\nTested
  with:\n  * [ghc](https://www.haskell.org/ghc/) 7.10.3, 8.0.2, 8.2.2, 8.4.2 and 8.4.3
  (x64)\n  * [ghc](https://www.haskell.org/ghc/) 7.10.3/LLVM 3.5.2 (Arm7)\n  * [ghcjs](https://github.com/ghcjs/ghcjs)\n\nIt
  also seems to be working with [Eta](https://eta-lang.org/) though the full test
  suite could not be run due to Eta's issues compiling `quickcheck` and `doctest`.\n\n###
  Installation\n\nGet the latest stable version from [hackage](https://hackage.haskell.org/package/flat).\n\n###
  Acknowledgements\n\n `flat` reuses ideas and readapts code from various packages,
  mainly: `store`, `binary-bits` and `binary` and includes contributions from Justus
  Sagem√ºller.\n\n### Known Bugs and Infelicities\n\n* A performance issue with GHC
  8.0.2 for some data types\n\n* Longish compilation times for generated Flat instances\n\n"
license-name: BSD3
