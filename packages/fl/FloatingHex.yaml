homepage: ''
changelog-type: markdown
hash: 05f65f2b0103d98574b2a2b4a592e02d83ebb13bdbad347b9157507165cf51e7
test-bench-deps: {}
maintainer: erkokl@gmail.com
synopsis: Read and write hexadecimal floating point numbers
changelog: ! "* Hackage: <http://hackage.haskell.org/package/FloatingHex>\n* GitHub:
  \ <http://github.com/LeventErkok/FloatingHex/>\n\n* Latest Hackage released version:
  0.4, 2017-01-15\n\n### Version 0.4, 2017-01-15\n\n  * Export the new FloatingHexReader
  class. Useful when used as an API.\n\n### Version 0.3, 2017-01-15\n\n  * Bump up
  template-haskell dependency to >= 2.10. As noted by Herbert Valerio Riedel,\n    FloatingHex
  fails to compile with older versions.\n\n  * Make the double->float conversions
  more robust, by avoiding the rational route.\n    (Avoids issues in https://ghc.haskell.org/trac/ghc/ticket/3676)\n\n###
  Version 0.2, 2017-01-14\n\n  * Support for parsing nan/infinity values\n  * Make
  the printer compliant with printf %a modifier in C\n\n### Version 0.1, 2017-01-14\n\n
  \ * First implementation. The quasiquoter and the pretty-printer are implemented.\n"
basic-deps:
  base: ! '>=4 && <5'
  template-haskell: ! '>=2.10'
all-versions:
- '0.4'
author: Levent Erkok
latest: '0.4'
description-type: markdown
description: ! "## FloatingHex: Read/Write Hexadecimal floats\n\n[![Hackage version](http://img.shields.io/hackage/v/FloatingHex.svg?label=Hackage)](http://hackage.haskell.org/package/FloatingHex)\n[![Build
  Status](http://img.shields.io/travis/LeventErkok/FloatingHex.svg?label=Build)](http://travis-ci.org/LeventErkok/FloatingHex)\n\n###
  Hexadecimal Floats\n\nFor syntax reference, see: <http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf>,
  pages 57-58.\nWe slightly diverge from the standard and do not allow for the \"floating-suffix,\"\nas
  the type inference of Haskell makes this unnecessary. Some examples are:\n\n```\n
  \ [hf|0x1p+1|]\n  [hf|0x1p+8|]\n  [hf|0x1.b7p-1|]\n  [hf|0x1.fffffffffffffp+1023|]\n
  \ [hf|0X1.921FB4D12D84AP-1|]\n```\n\nThis format allows for concise and precise
  string representation for floating point numbers. Note that you need the `QuasiQuotes`
  extension of GHC to be able to write these literals.\n\n## Example\n\n```haskell\n{-#
  LANGUAGE QuasiQuotes #-}\nimport Data.Numbers.FloatingHex\n\n-- expressions\nf ::
  Double\nf = [hf|0x1.f44abd5aa7ca4p+25|]\n\n-- patterns\ng :: Float -> String\ng
  [hf|0x1p1|]  = \"two!\"\ng [hf|0x1p-1|] = \"half!\"\ng d            = \"something
  else: \" ++ show d\n\n-- showing hexadecimal floats\ntest = showHFloat [hf|0x1.f44abd5aa7ca4p+25|]
  \"\"\n```\n\n(Note that while the quasiquoter allows for floating-point patterns,
  it is usually not a good idea to use floating-point literals in pattern matching.)\n\n###
  Thanks\nThe following people reported bugs, provided comments/feedback, or contributed
  to the development of\nFloatingHex in various ways: Herbert Valerio Riedel.\n"
license-name: BSD-3-Clause
