homepage: https://github.com/adept/flow2dot
changelog-type: markdown
hash: 46fdff6c752d50796ca872f7f293fc3d19566adb7614c3a60a46b2b509668f70
test-bench-deps:
  base: '>=3 && <=5'
  dotgen: -any
  parsec: -any
  containers: -any
  flow2dot: -any
  mtl: '>=1.0'
  QuickCheck: -any
maintainer: Dmitry Astapov <dastapov@gmail.com>
synopsis: Library and binary to generate sequence/flow diagrams from plain text source
changelog: "2020-06-16\n==========\nMigrated to github, cleaned up sources\n\nVersion
  bump to 0.9.1\n\nPre-github Changelog\n====================\ntagged 0.7\n\n  * Added
  Order directive (see sample.flow for usage)\n  * Fix: identifier could not be empty\n
  \ * Removing useles import\n  * Preserve UTF8 chars in \"reflow\"\n  * Fix to preserve
  UTF8 chars in \"showDot\" (again)\n  * Imported Dot.hs from dotgen 0.4.1\n  * Fixed
  \"lost edge\" errors from graphviz\n\ntagged 0.6.1\n\n  * Forgot to add Text.Dot
  local override to cabal. Thnx to dons for spotting it\n\ntagged 0.6\n\n  * Fixed
  repo URL in README\n  * Made sources compilable with QuickCheck2\n  * Dotgen kills
  UTF-8 in graph attributes. Incorporated patched version of dotgen-0.2 into flow2dot
  until it will be fixed upstream\n  * Added quickCheck.hs and rebuild.sh\n\ntagged
  0.5.1\n\n  * Moved all flow diagram processing to separate module (exposed from
  this package)\n\ntagged 0.4\n  * Documentation fixes\n  * Switched to `dotgen` package
  for all graphviz generation needs.\n\t    Dropped support of preformatted strings
  in flow files.\n\ntagged 0.3.1\n  * Fixed links to repo and docs\n\ntagged 0.3\n
  \ * Ditched Text.UTF8 in favor of utf8-string library\n  * Quotes inside messages
  are now properly escaped for Dot. Sample updated accordingly.\n\ntagged 0.2.1\n
  \ * Version bump to 0.2.1 - ready for GHC 6.8.2\n  * -Wall\n  * +LANGUAGE pragmas\n\ntagged
  0.2\n  * Some minor clarifications in docs\n  * Dropped regex-based parser in favor
  of parsec-based due to issues with Unicode\n  * Added QuickCheck to cabal, added
  LICENSE to Dot.hs\n  * Added QuickCheck for Flow parser/pretty-printer\n  * Moved
  graph generation into separate module\n  * Added UTF8 module\n  * cabalization\n\ntagged
  0.1\n  * initial version\n"
basic-deps:
  base: '>=3 && <=5'
  dotgen: -any
  parsec: -any
  containers: -any
  flow2dot: -any
  mtl: '>=1.0'
all-versions:
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- '0.4'
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- '0.7'
- '0.8'
- '0.9'
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
- 0.9.1
author: Dmitry Astapov <dastapov@gmail.com>
latest: 0.9.1
description-type: markdown
description: |+
  This is a tool to generate nice sequence (flow) diagrams from
  textual descriptions, written in Haskell.

  This tool generates a diagram _description_, which could be made into
  a nice picture with help of Graphviz (www.graphviz.org)

  To try it out, run:
    runhaskell flow2dot.hs sample.flow | dot -T png -o sample.png
  and view "sample.png" with your favorite picture viewer. If you
  dont get a nice picture and get something else (for example, ugly
  segfault from dot), try upgrading to latest Graphviz (2.12 or later)

  If you want to use national alphabets, make sure that your .flow files
  are encoded in UTF-8. If you want to tweak the output - read Dot manual
  and use it for scaling, colors, pagination etc.

  Latest version could be obtained via:
    darcs pull http://adept.linux.kiev.ua:8080/repos/flow2dot/

  License     :  BSD-style (see the file LICENSE)
  Send patches to dastapov@gmail.com (using "darcs send")

  Thanks to Cale, quicksilver and roconnor from #haskell for
  suggestions on how to modularize this. Thanks to Dema from
  haskell@conference.jabber.ru for win32 testing. Gwern0 helped
  to adapt this to GHC 6.8.2. Radoslav Dorcik sent in parser improvements.
  Mike Shigorin and Denis Smirnov packaged for Alt Linux and provided feedback
  on compatibility with different GHC versions. Vasyl Vaskul reported bugs.

  Known issues
  ============

  * Dot < 2.12 will most likely segfault on files generated by flow2dot

  * If your version of dot complains about "Error: lost n1 n2 edge", try using
  flow2dot-fix-dot-lost-edges in place of dot:

     runhaskell flow2dot your.flow | flow2dot-fix-dot-lost-edges -T png -o your.png

  Trick is to remove 'constraint="false"' from all edges that dot reports as lost.

license-name: BSD-3-Clause
