homepage: https://github.com/githubuser/flux-monoid#readme
changelog-type: ''
hash: c428dc47c6fcc52a3e5ce30ef4c97a2afccb3d2a0663bc4bd525f470ba6deb24
test-bench-deps: {}
maintainer: ''
synopsis: A monoid for tracking changes
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- 0.1.0.0
author: Chris Penner
latest: 0.1.0.0
description-type: markdown
description: ! '# flux-monoid


  `Flux` is a monoid which counts the number of times an element changes

  (according to its Eq instance) This is useful for gaining associativity (and

  its associated performance improvements) for tasks where you''d otherwise use

  `group` or `groupBy`


  It also allows usage of change-detection semantics in situations where a Monoid

  is required; e.g.Â in a [FingerTree](https://hackage.haskell.org/package/fingertree/)


  ```haskell

  > getFlux $ foldMap flux ["a", "b", "b", "a"]

  2

  > getFlux $ foldMap flux ["a", "b", "b", "a", "c", "c", "c"]

  3

  ```

'
license-name: BSD-3-Clause
