homepage: https://github.com/mrkkrp/flac
changelog-type: markdown
hash: 75f1b501654ca287256dee887a5bf2d8b733a79fe3455585f92d92e74c69b02e
test-bench-deps:
  bytestring: ! '>=0.2 && <0.11'
  base: ! '>=4.8 && <5.0'
  data-default-class: -any
  hspec: ! '>=2.0 && <3.0'
  wave: ! '>=0.1.2 && <0.2'
  flac: -any
  filepath: ! '>=1.2 && <1.5'
  transformers: ! '>=0.4 && <0.6'
  temporary: ! '>=1.1 && <1.4'
  vector: ! '>=0.10 && <0.13'
  directory: ! '>=1.2.2 && <1.4'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Complete high-level binding to libFLAC
changelog: ! '## FLAC 0.1.2


  * Documentation and metadata improvements.


  ## FLAC 0.1.1


  * Added support for `DiscTotal` Vorbis comment field.


  ## FLAC 0.1.0


  * Initial release.

'
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.2 && <0.11'
  base: ! '>=4.8 && <5.0'
  data-default-class: -any
  text: ! '>=0.2 && <1.3'
  wave: ! '>=0.1.2 && <0.2'
  filepath: ! '>=1.2 && <1.5'
  containers: ! '>=0.5 && <0.7'
  mtl: ! '>=2.0 && <3.0'
  transformers: ! '>=0.4 && <0.6'
  vector: ! '>=0.10 && <0.13'
  directory: ! '>=1.2.2 && <1.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '0.1.2'
description-type: markdown
description: ! "# FLAC for Haskell\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/flac.svg?style=flat)](https://hackage.haskell.org/package/flac)\n[![Stackage
  Nightly](http://stackage.org/package/flac/badge/nightly)](http://stackage.org/nightly/package/flac)\n[![Stackage
  LTS](http://stackage.org/package/flac/badge/lts)](http://stackage.org/lts/package/flac)\n[![Build
  Status](https://travis-ci.org/mrkkrp/flac.svg?branch=master)](https://travis-ci.org/mrkkrp/flac)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/flac/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/flac?branch=master)\n\n*
  [Aims of the project](#aims-of-the-project)\n* [Motivation](#motivation)\n* [Provided
  functionality](#provided-functionality)\n* [Limitations](#limitations)\n* [Quick
  start](#quick-start)\n* [Related packages](#related-packages)\n* [Contribution](#contribution)\n*
  [License](#license)\n\nThis is a complete high-level Haskell binding\nto [libFLAC](https://xiph.org/flac/)—reference
  FLAC implementation.\n\n> As the maintainer of the C FLAC code base, I must say
  I'm impressed. Quite\n> honestly, I think the C API is horrible.\n>\n> —[Erik de
  Castro Lopo](https://www.reddit.com/r/haskell/comments/5lyk70/announcing_flac_a_complete_highlevel_binding_to/dc00yb7/)\n\n##
  Aims of the project\n\nHere are several ideas the project follows:\n\n* Concentrate
  only on native FLAC format without messing with other audio\n  formats or their
  flavors. This library is about FLAC only.\n\n* Be a complete interface for FLAC
  file manipulation in Haskell. “Complete”\n  means that everything supported by the
  reference implementation should be\n  supported by this package. This is in the
  hope to prevent fragmentation\n  and proliferation of different libraries to work
  with FLAC with each of\n  them covering only some 80% of functionality the library
  author needed and\n  neglecting other 20%.\n\n* Be as efficient as the underlying
  C implementation, avoid adding any sort\n  of overhead (memory/speed/or otherwise).\n\n*
  Provide *idiot-proof* API using type system to kindly guard against bad\n  things,
  but not so much to remain beginner-friendly and simple.\n\n* Make invalid code and
  data unrepresentable.\n\n## Motivation\n\nFLAC is awesome and Haskell is awesome,
  surely there should be a way to\nachieve an even higher level of awesomeness by
  coding a safe Haskell API to\nthe fast libFLAC library.\n\nSeriously though, we\nhave
  [`htaglib`](https://hackage.haskell.org/package/htaglib) to work with\naudio metadata,
  but it does not support a lot of FLAC-specific things I'd\nlove to manipulate. We\nhave
  [`hsndfile`](https://hackage.haskell.org/package/hsndfile), but I don't\nreally
  want to read FLAC data into a buffer or Haskell `Vector`. How simple\nis it (if
  possible) to decode a FLAC file using that library? How simple is\nit to figure
  out where to begin with such a task? With `flac` it's\n`decodeFlac def \"myfile.flac\"
  \"myfile.wav\"`—done, average song in a fraction\nof second.\n\n## Provided functionality\n\nHere
  we go:\n\n* Metadata—full support for reading/writing/deleting of all audio\n  parameters,
  application data, seek tables, vorbis comments of all sorts,\n  CUE sheets, and
  even pictures.\n\n* Stream decoder—simple interface for decoding to vanilla WAVE
  and RF64\n  (support for files larger than 4 Gb).\n\n* Stream encoder—a lot of options
  to tweak, everything that libFLAC has, but\n  you can also use `def` and just encode
  vanilla WAVE or RF64 file into\n  native FLAC. Simple and efficient.\n\n## Limitations\n\nRight
  now there are three main limitations:\n\n* No Ogg FLAC support, and I do not plan
  to add it, but I'll accept a PR\n  adding support for Ogg FLAC.\n\n* It's not possible
  to use custom callbacks for printing decoding/encoding\n  progress in real-time
  and stuff like that. Not a big issue IMO, given that\n  we get nice and safe API
  instead.\n\n* Only works on little-endian architectures so far, I'll accept a PR
  lifting\n  this limitation.\n\n## Quick start\n\nThe best way to start using `flac`
  is to take a look\nat [the Haddocks](https://hackage.haskell.org/package/flac).
  Encoding and\ndecoding are so simple that even a baby could handle it, and for metadata\nthere
  are examples and a lot of details in the docs. Feel free to ask me a\nquestion if
  you get stuck with something though.\n\n## Related packages\n\nThe following packages
  are designed to be used with `flac`:\n\n* [`flac-picture`](https://hackage.haskell.org/package/flac-picture)—add\n
  \ pictures to FLAC metadata easier.\n\n## Contribution\n\nPlease kindly direct all
  issues, bugs, and questions to\n[the GitHub issue tracker for this project](https://github.com/mrkkrp/flac/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2016–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
