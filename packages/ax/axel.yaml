homepage: https://github.com/axellang/axel#readme
changelog-type: ''
hash: 9ea7cb70ccfd2192367b1dbb97626fd03323ac2be1f697152378050c8ad261e3
test-bench-deps:
  polysemy-plugin: -any
  bytestring: -any
  lens-aeson: -any
  split: -any
  base: ! '>=4.12 && <4.13'
  tasty-golden: -any
  time: -any
  tasty-hedgehog: -any
  tasty-discover: -any
  freer-simple: -any
  text: -any
  megaparsec: -any
  axel: -any
  tasty-hspec: -any
  filepath: -any
  process: -any
  hedgehog: -any
  uniplate: -any
  containers: -any
  singletons: -any
  haskell-src-exts: -any
  ansi-terminal: -any
  lens: -any
  typed-process: -any
  hashable: -any
  tasty-hunit: -any
  polysemy: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  random: -any
  tasty: -any
  aeson: -any
  template-haskell: -any
  mono-traversable: -any
  yaml: -any
  profunctors: -any
  vector: -any
  hpack: -any
  directory: -any
  ghcid: -any
maintainer: jgrosso256@gmail.com
synopsis: The Axel programming language.
changelog: ''
basic-deps:
  polysemy-plugin: -any
  bytestring: -any
  lens-aeson: -any
  split: -any
  base: ==4.12.*
  tasty-golden: -any
  time: -any
  tasty-hedgehog: -any
  tasty-discover: -any
  freer-simple: -any
  text: -any
  megaparsec: -any
  axel: -any
  tasty-hspec: -any
  filepath: -any
  process: -any
  hedgehog: -any
  uniplate: -any
  containers: -any
  singletons: -any
  haskell-src-exts: -any
  ansi-terminal: -any
  lens: -any
  typed-process: -any
  hashable: -any
  tasty-hunit: -any
  polysemy: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  random: -any
  tasty: -any
  aeson: -any
  template-haskell: -any
  mono-traversable: -any
  yaml: -any
  profunctors: -any
  vector: -any
  hpack: -any
  directory: -any
  ghcid: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- 0.0.11
author: Joshua Grosso
latest: 0.0.11
description-type: text
description: |
  #+OPTIONS: num:nil toc:nil
  #+STARTUP: inlineimages
  * Axel
    Haskell + Lisp + JVM/Node/... = Profit!

    See [[https://axellang.github.io]].
    #+CAPTION: Build Status
    [[https://travis-ci.org/axellang/axel.svg?branch=master]]
  ** Code Style
     Use ~hindent~ to format code and ~hlint~ to catch errors.
  ** Running
     Run ~scripts/build.sh~ to build the project, and ~stack run <arguments>~ to run ~app/Main.hs~. The executable takes as arguments either ~file <path to file>~ (which is the path of the Axel program to build and execute) or ~project~ (in which case an Axel project in the current directory will be built and executed).
  ** Examples
     See the ~examples~ folder for example Axel programs.
license-name: BSD-3-Clause
