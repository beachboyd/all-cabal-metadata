homepage: https://github.com/elliottt/huff
changelog-type: markdown
hash: afa0bd0b92306f8779c44d34dede8b5b4238da2097a22b11ded2d7dfbee9357a
test-bench-deps: {}
maintainer: awesomelyawesome@gmail.com
synopsis: A fast-foward-based planner
changelog: ! '

  # Revision history for huff


  ## 0.1.0.1

  * Documentation fixes


  ## 0.1.0.0


  * Initial release

'
basic-deps:
  heaps: -any
  huff: -any
  base: ! '>=4.9 && <5'
  unordered-containers: -any
  text: -any
  array: -any
  containers: -any
  hashable: -any
  alex-tools: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Trevor Elliott
latest: 0.1.0.1
description-type: markdown
description: ! "Huff\n====\n\nHuff is an implementation of the fast-forward forward-chaining
  planner in\nHaskell. The main interface is the quasi-quoter `huff`, which allows
  the user to\ndefine re-usable domains that can be used with the planner to solve
  different\nproblems.\n\n\nExample\n-------\n\nConsider the blocks world planning
  domain from [Chapter\n11](http://aima.cs.berkeley.edu/2nd-ed/newchap11.pdf) of \"Artificial\nIntelligence:
  A Modern Approach\". The domain includes two actions, `Move` and\n`MoveToTable`,
  four objects, `A`, `B`, `C`, `Table`, and two predicates, `On`\nand `Clear`. Embedding
  the domain in Haskell using `huff` looks like this:\n\n```haskell\nmodule Main where\n\nimport
  Huff\n\n[huff|\n\n  domain BlocksWorld {\n    object Obj = A | B | C | Table\n\n
  \   predicate on(Obj,Obj), clear(Obj)\n\n    operator Move(b: Obj, x: Obj, y: Obj)
  {\n      requires: on(b,x), clear(b), clear(y)\n      effect:   on(b,y), clear(x),
  !clear(y)\n    }\n\n    operator MoveToTable(b: Obj, x: Obj) {\n      requires:
  on(b,x), clear(b)\n      effect:   on(b,Table), clear(x)\n    }\n  }\n\n|]\n\n```\n\nThe
  quasi-quoter will introduce the following declarations:\n* A data declaration for
  the `Obj` object\n* A data declaration for the `BlocksWorld` domain, that will consist
  of two\n  constructors `Move :: Obj -> Obj -> Obj -> BlocksWorld` and `MoveToTable
  ::\n  Obj -> Obj -> BlocksWorld`\n* Two classes called `Has_on` and `Has_clear`,
  that define the `on` and `clear`\n  functions, respectively\n* Instances of the
  two `Has` classes for `Literal` and `Term`\n* The `blocksWorld` function of the
  type `[Literal] -> [Term] -> Spec BlocksWorld`\n\nThe `blocksWorld` function accepts
  the initial state and goal, and produces a\n`Spec BlocksWorld` value that can be
  used in conjunction with the `findPlan`\nfunction to attempt to find a plan. For
  example, the problem specified in\nchapter 11 Russel and Norvig can be solved as
  follows:\n\n```haskell\nmain =\n  do mb <- findPlan $ blocksWorld [ on A Table,
  on B Table, on C Table, clear A\n                                  , clear B, clear
  C ]\n                                  [on A B, n B C]\n     print mb\n```\n\nRunning
  the example will produce the output:\n\n```shell\n$ find dist-newstyle -name blocksWorld
  -type f -exec {} \\;\nJust [MoveTo B Table C, MoveTo A Table B]\n```\n"
license-name: BSD-3-Clause
