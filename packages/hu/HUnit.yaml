homepage: https://github.com/hspec/HUnit#readme
changelog-type: markdown
hash: 8014b27c884becd8041214a1ab263fa92244ca62700a911aff604a1047869298
test-bench-deps:
  base: ==4.*
  filepath: -any
  HUnit: -any
  deepseq: -any
  call-stack: -any
maintainer: Simon Hengel <sol@typeful.net>
synopsis: A unit testing framework for Haskell
changelog: ! '## Changes


  #### 1.6.0.0


  - Generalize return type of `assertFailure` to `IO a`


  #### 1.5.0.0


  - Preserve actual/expected for `assertEqual` failures


  #### 1.4.0.0


  - Depend on `call-stack`


  #### 1.3.1.2


  - Fixes the test suite on GHC 8


  #### 1.3.1.1


  - Various updates to metadata and documentation removing outdated information and
  making other things more visible


  ### 1.3.1.0


  - add minimal support for GHC 8.0


  ### 1.3.0.0


  - removed support for old compilers


  - add source locations for failing assertions (GHC >= 7.10.2 only)


  #### 1.2.5.2


  - Added support for GHC 7.7

'
basic-deps:
  base: ==4.*
  deepseq: -any
  call-stack: -any
all-versions:
- '1.1'
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- 1.2.0.3
- 1.2.2.0
- 1.2.2.1
- 1.2.2.3
- 1.2.4.2
- 1.2.4.3
- 1.2.5.0
- 1.2.5.1
- 1.2.5.2
- 1.3.0.0
- 1.3.1.0
- 1.3.1.1
- 1.3.1.2
- 1.4.0.0
- 1.5.0.0
- 1.6.0.0
author: Dean Herington
latest: 1.6.0.0
description-type: markdown
description: ! "# HUnit User's Guide\n\nHUnit is a unit testing framework for Haskell,
  inspired by the JUnit tool for Java. This\nguide describes how to use HUnit, assuming
  you are familiar with Haskell, though not\nnecessarily with JUnit. You can obtain
  HUnit, including this guide, at\n[https://github.com/hspec/HUnit](https://github.com/hspec/HUnit)\n\n##
  Introduction\nA test-centered methodology for software development is most effective
  when tests are\neasy to create, change, and execute. The [JUnit](www.junit.org)
  tool\npioneered support for test-first development in [Java](http://java.sun.com).\nHUnit
  is an adaptation of JUnit to Haskell, a general-purpose, purely functional\nprogramming
  language. (To learn more about Haskell, see [www.haskell.org](http://www.haskell.org)).\n\nWith
  HUnit, as with JUnit, you can easily create tests, name them, group them into\nsuites,
  and execute them, with the framework checking the results automatically. Test\nspecification
  in HUnit is even more concise and flexible than in JUnit, thanks to the\nnature
  of the Haskell language. HUnit currently includes only a text-based test\ncontroller,
  but the framework is designed for easy extension. (Would anyone care to\nwrite a
  graphical test controller for HUnit?)\n\nThe next section helps you get started
  using HUnit in simple ways. Subsequent sections\ngive details on [writing tests](#writing-tests)
  and [running tests](#running-tests).\nThe document concludes with a section describing
  HUnit's [constituent files](#constituent-files)\nand a section giving [references](#references)
  to further information.\n\n## Getting Started\n\nIn the Haskell module where your
  tests will reside, import module `Test.HUnit`:\n\n```haskell\nimport Test.HUnit\n```\n\nDefine
  test cases as appropriate:\n\n```haskell\ntest1 = TestCase (assertEqual \"for (foo
  3),\" (1,2) (foo 3))\ntest2 = TestCase (do (x,y) <- partA 3\n                     assertEqual
  \"for the first result of partA,\" 5 x\n                     b <- partB y\n                     assertBool
  (\"(partB \" ++ show y ++ \") failed\") b)\n```\n\nName the test cases and group
  them together:\n\n```haskell\ntests = TestList [TestLabel \"test1\" test1, TestLabel
  \"test2\" test2]\n```\n\nRun the tests as a group. At a Haskell interpreter prompt,
  apply the\nfunction `runTestTT` to the collected tests. (The `TT` suggests\n**T**ext
  orientation with output to the **T**erminal.)\n\n```haskell\n> runTestTT tests\nCases:
  2  Tried: 2  Errors: 0  Failures: 0\n>\n```\n\nIf the tests are proving their worth,
  you might see:\n\n```haskell\n> runTestTT tests\n### Failure in: 0:test1\nfor (foo
  3),\nexpected: (1,2)\n but got: (1,3)\nCases: 2  Tried: 2  Errors: 0  Failures:
  1\n>\n```\n\nIsn't that easy?\n\nYou can specify tests even more succinctly using
  operators and\noverloaded functions that HUnit provides:\n\n```haskell\ntests =
  test [ \"test1\" ~: \"(foo 3)\" ~: (1,2) ~=? (foo 3),\n               \"test2\"
  ~: do (x, y) <- partA 3\n                             assertEqual \"for the first
  result of partA,\" 5 x\n                             partB y @? \"(partB \" ++ show
  y ++ \") failed\" ]\n```\n\nAssuming the same test failures as before, you would
  see:\n\n```haskell\n> runTestTT tests\n### Failure in: 0:test1:(foo 3)\nexpected:
  (1,2)\n but got: (1,3)\nCases: 2  Tried: 2  Errors: 0  Failures: 1\n>\n```\n\n##
  Writing Tests\n\nTests are specified compositionally. [Assertions](#assertions)
  are\ncombined to make a [test case](#test-case), and test cases are combined\ninto
  [tests](#tests). HUnit also provides [advanced\nfeatures](#advanced-features) for
  more convenient test specification.\n\n### Assertions\n\n The basic building block
  of a test is an **assertion**.\n\n```haskell\ntype Assertion = IO ()\n```\n\nAn
  assertion is an `IO` computation that always produces a void result. Why is an assertion
  an `IO` computation? So that programs with real-world side effects can be tested.
  How does an assertion assert anything if it produces no useful result? The answer
  is that an assertion can signal failure by calling `assertFailure`.\n\n```haskell\nassertFailure
  :: String -> Assertion\nassertFailure msg = ioError (userError (\"HUnit:\" ++ msg))\n```\n\n`(assertFailure
  msg)` raises an exception. The string argument identifies the\n failure. The failure
  message is prefixed by \"`HUnit:`\" to mark it as an HUnit\n assertion failure message.
  The HUnit test framework interprets such an exception as\n indicating failure of
  the test whose execution raised the exception. (Note: The details\n concerning the
  implementation of `assertFailure` are subject to change and should\n not be relied
  upon.)\n\n`assertFailure` can be used directly, but it is much more common to use
  it\n indirectly through other assertion functions that conditionally assert failure.\n\n```haskell\nassertBool
  :: String -> Bool -> Assertion\nassertBool msg b = unless b (assertFailure msg)\n\nassertString
  :: String -> Assertion\nassertString s = unless (null s) (assertFailure s)\n\nassertEqual
  :: (Eq a, Show a) => String -> a -> a -> Assertion\nassertEqual preface expected
  actual =\n  unless (actual == expected) (assertFailure msg)\n where msg = (if null
  preface then \"\" else preface ++ \"\\n\") ++\n             \"expected: \" ++ show
  expected ++ \"\\n but got: \" ++ show actual\n```\n\nWith `assertBool` you give
  the assertion condition and failure message separately.\n With `assertString` the
  two are combined. With `assertEqual` you provide a\n \"preface\", an expected value,
  and an actual value; the failure message shows the two\n unequal values and is prefixed
  by the preface. Additional ways to create assertions are\n described later under
  [Avanced Features](#advanced-features)\n\nSince assertions are `IO` computations,
  they may be combined--along with other\n     `IO` computations--using `(>>=)`, `(>>)`,
  and the `do`\n notation. As long as its result is of type `(IO ())`, such a combination\n
  constitutes a single, collective assertion, incorporating any number of constituent\n
  assertions. The important features of such a collective assertion are that it fails
  if\n any of its constituent assertions is executed and fails, and that the first
  constituent\n assertion to fail terminates execution of the collective assertion.
  Such behavior is\n essential to specifying a test case.\n\n### Test Case\n\nA **test
  case** is the unit of test execution. That is, distinct test cases are\n executed
  independently. The failure of one is independent of the failure of any other.\n\nA
  test case consists of a single, possibly collective, assertion. The possibly multiple\n
  constituent assertions in a test case's collective assertion are **not** independent.\n
  Their interdependence may be crucial to specifying correct operation for a test.
  A test\n case may involve a series of steps, each concluding in an assertion, where
  each step\n must succeed in order for the test case to continue. As another example,
  a test may\n require some \"set up\" to be performed that must be undone (\"torn
  down\" in JUnit\n parlance) once the test is complete. In this case, you could use
  Haskell's\n     `IO.bracket` function to achieve the desired effect.\n\nYou can
  make a test case from an assertion by applying the `TestCase` constructor.\n For
  example, `(TestCase (return ()))` is a test case that never\n fails, and `(TestCase
  (assertEqual \"for x,\" 3 x))`\n is a test case that checks that the value of `x`
  is 3.  Additional ways\n to create test cases are described later under [Advanced
  Features](#advanced-eatures).\n\n### Tests\n\nAs soon as you have more than one
  test, you'll want to name them to tell them apart. As\n soon as you have more than
  several tests, you'll want to group them to process them more\n easily. So, naming
  and grouping are the two keys to managing collections of tests.\n\nIn tune with
  the \"composite\" design pattern [1], a\n **test** is defined as a package of test
  cases. Concretely, a test is either a single\n test case, a group of tests, or either
  of the first two identified by a label.\n\n```haskell\ndata Test = TestCase Assertion\n
  \         | TestList [Test]\n          | TestLabel String Test\n```\n\nThere are
  three important features of this definition to note:\n\n\n* A `TestList` consists
  of a list of tests rather than a list of test cases.\n   This means that the structure
  of a `Test` is actually a tree. Using a\n   hierarchy helps organize tests just
  as it helps organize files in a file system.\n* A `TestLabel` is attached to a test
  rather than to a test case. This means\n   that all nodes in the test tree, not
  just test case (leaf) nodes, can be labeled.\n   Hierarchical naming helps organize
  tests just as it helps organize files in a file\n   system.\n* A `TestLabel` is
  separate from both `TestCase` and `TestList`.\n   This means that labeling is optional
  everywhere in the tree. Why is this a good\n   thing? Because of the hierarchical
  structure of a test, each constituent test case\n   is uniquely identified by its
  path in the tree, ignoring all labels. Sometimes a\n   test case's path (or perhaps
  its subpath below a certain node) is a perfectly\n   adequate \"name\" for the test
  case (perhaps relative to a certain node). In this\n   case, creating a label for
  the test case is both unnecessary and inconvenient.\n\n\nThe number of test cases
  that a test comprises can be computed with `testCaseCount`.\n\n```haskell\ntestCaseCount
  :: Test -> Int\n```\n\nAs mentioned above, a test is identified by its **path**
  in the test hierarchy.\n\n```haskell\ndata Node  = ListItem Int | Label String\n
  \ deriving (Eq, Show, Read)\n\ntype Path = [Node]    -- Node order is from test
  case to root.\n```\n\nEach occurrence of `TestList` gives rise to a `ListItem` and
  each\n occurrence of `TestLabel` gives rise to a `Label`. The `ListItem`s\n by themselves
  ensure uniqueness among test case paths, while the `Label`s allow\n you to add mnemonic
  names for individual test cases and collections of them.\n\nNote that the order
  of nodes in a path is reversed from what you might expect: The first\n node in the
  list is the one deepest in the tree. This order is a concession to\n efficiency:
  It allows common path prefixes to be shared.\n\nThe paths of the test cases that
  a test comprises can be computed with\n `testCasePaths`. The paths are listed in
  the order in which the corresponding\n test cases would be executed.\n\n```haskell\ntestCasePaths
  :: Test -> [Path]\n```\n\nThe three variants of `Test` can be constructed simply
  by applying\n `TestCase`, `TestList`, and `TestLabel` to appropriate arguments.\n
  Additional ways to create tests are described later under [Advanced Features](#advanced-features).\n\nThe
  design of the type `Test` provides great conciseness, flexibility, and\n convenience
  in specifying tests. Moreover, the nature of Haskell significantly augments\n these
  qualities:\n\n* Combining assertions and other code to construct test cases is easy
  with the\n    `IO` monad.\n* Using overloaded functions and special operators (see
  below), specification of\n    assertions and tests is extremely compact.\n* Structuring
  a test tree by value, rather than by name as in JUnit, provides for more\n    convenient,
  flexible, and robust test suite specification. In particular, a test\n    suite
  can more easily be computed \"on the fly\" than in other test frameworks.\n* Haskell's
  powerful abstraction facilities provide unmatched support for test\n    refactoring.\n\n###
  Advanced Features\n\nHUnit provides additional features for specifying assertions
  and tests more conveniently\n and concisely. These facilities make use of Haskell
  type classes.\n\nThe following operators can be used to construct assertions.\n\n```haskell\ninfix
  1 @?, @=?, @?=\n\n(@?) :: (AssertionPredicable t) => t -> String -> Assertion\npred
  @? msg = assertionPredicate pred >>= assertBool msg\n\n(@=?) :: (Eq a, Show a) =>
  a -> a -> Assertion\nexpected @=? actual = assertEqual \"\" expected actual\n\n(@?=)
  :: (Eq a, Show a) => a -> a -> Assertion\nactual @?= expected = assertEqual \"\"
  expected actual\n```\n\nYou provide a boolean condition and failure message separately
  to `(@?)`, as for\n     `assertBool`, but in a different order. The `(@=?)` and
  `(@?=)`\n operators provide shorthands for `assertEqual` when no preface is required.
  They\n differ only in the order in which the expected and actual values are provided.
  (The\n actual value--the uncertain one--goes on the \"?\" side of the operator.)\n\nThe
  `(@?)` operator's first argument is something from which an assertion\n predicate
  can be made, that is, its type must be `AssertionPredicable`.\n\n```haskell\ntype
  AssertionPredicate = IO Bool\n\nclass AssertionPredicable t\n where assertionPredicate
  :: t -> AssertionPredicate\n\ninstance AssertionPredicable Bool\n where assertionPredicate
  = return\n\ninstance (AssertionPredicable t) => AssertionPredicable (IO t)\n where
  assertionPredicate = (>>= assertionPredicate)\n```\n\nThe overloaded `assert` function
  in the `Assertable` type class constructs\n an assertion.\n\n```haskell\nclass Assertable
  t\n where assert :: t -> Assertion\n\ninstance Assertable ()\n where assert = return\n\ninstance
  Assertable Bool\n where assert = assertBool \"\"\n\ninstance (ListAssertable t)
  => Assertable [t]\n where assert = listAssert\n\ninstance (Assertable t) => Assertable
  (IO t)\n where assert = (>>= assert)\n```\n\nThe `ListAssertable` class allows `assert`
  to be applied to `[Char]`\n (that is, `String`).\n\n```haskell\nclass ListAssertable
  t\n where listAssert :: [t] -> Assertion\n\ninstance ListAssertable Char\n where
  listAssert = assertString\n```\n\nWith the above declarations, `(assert ())`,\n
  `(assert True)`, and `(assert \"\")` (as well as\n `IO` forms of these values, such
  as `(return ())`) are all\n assertions that never fail, while `(assert False)` and\n
  \    `(assert \"some failure message\")` (and their\n     `IO` forms) are assertions
  that always fail. You may define additional\n instances for the type classes `Assertable`,
  `ListAssertable`, and\n     `AssertionPredicable` if that should be useful in your
  application.\n\nThe overloaded `test` function in the `Testable` type class constructs
  a\n test.\n\n```haskell\nclass Testable t\n where test :: t -> Test\n\ninstance
  Testable Test\n where test = id\n\ninstance (Assertable t) => Testable (IO t)\n
  where test = TestCase . assert\n\ninstance (Testable t) => Testable [t]\n where
  test = TestList . map test\n```\n\nThe `test` function makes a test from either
  an `Assertion` (using\n     `TestCase`), a list of `Testable` items (using `TestList`),
  or\n a `Test` (making no change).\n\nThe following operators can be used to construct
  tests.\n\n```haskell\ninfix  1 ~?, ~=?, ~?=\ninfixr 0 ~:\n\n(~?) :: (AssertionPredicable
  t) => t -> String -> Test\npred ~? msg = TestCase (pred @? msg)\n\n(~=?) :: (Eq
  a, Show a) => a -> a -> Test\nexpected ~=? actual = TestCase (expected @=? actual)\n\n(~?=)
  :: (Eq a, Show a) => a -> a -> Test\nactual ~?= expected = TestCase (actual @?=
  expected)\n\n(~:) :: (Testable t) => String -> t -> Test\nlabel ~: t = TestLabel
  label (test t)\n```\n\n`(~?)`, `(~=?)`, and `(~?=)` each make an assertion, as for\n
  `(@?)`, `(@=?)`, and `(@?=)`, respectively, and then a test case\n from that assertion.
  `(~:)` attaches a label to something that is\n `Testable`. You may define additional
  instances for the type class\n `Testable` should that be useful.\n\n## Running Tests\n\nHUnit
  is structured to support multiple test controllers. The first\n subsection below
  describes the [test execution](#test-execution)\n characteristics common to all
  test controllers. The second subsection\n describes the text-based controller that
  is included with HUnit.\n\n## Test Execution\n\nAll test controllers share a common
  test execution model. They differ only in how the\n results of test execution are
  shown.\n\nThe execution of a test (a value of type `Test`) involves the serial execution
  (in\n the `IO` monad) of its constituent test cases. The test cases are executed
  in a\n depth-first, left-to-right order. During test execution, four counts of test
  cases are\n maintained:\n\n```haskell\ndata Counts = Counts { cases, tried, errors,
  failures :: Int }\n  deriving (Eq, Show, Read)\n```\n\n\n* `cases` is the number
  of test cases included in the test. This number is a\n    static property of a test
  and remains unchanged during test execution.\n* `tried` is the number of test cases
  that have been executed so far during the\n    test execution.\n* `errors` is the
  number of test cases whose execution ended with an unexpected\n    exception being
  raised. Errors indicate problems with test cases, as opposed to the\n    code under
  test.\n* `failures` is the number of test cases whose execution asserted failure.\n
  \   Failures indicate problems with the code under test.\n\n\nWhy is there no count
  for test case successes? The technical reason is that the counts\n are maintained
  such that the number of test case successes is always equal to\n     `(tried - (errors
  + failures))`. The\n psychosocial reason is that, with test-centered development
  and the expectation that\n test failures will be few and short-lived, attention
  should be focused on the failures\n rather than the successes.\n\nAs test execution
  proceeds, three kinds of reporting event are communicated to the test\n controller.
  (What the controller does in response to the reporting events depends on the\n controller.)\n\n*
  *start* -- Just prior to initiation of a test case, the path of the test case\n
  \   and the current counts (excluding the current test case) are reported.\n* *error*
  -- When a test case terminates with an error, the error message is\n    reported,
  along with the test case path and current counts (including the current\n    test
  case).\n* *failure* -- When a test case terminates with a failure, the failure message
  is\n    reported, along with the test case path and current counts (including the
  current\n    test case).\n\nTypically, a test controller shows *error* and *failure*
  reports immediately\n but uses the *start* report merely to update an indication
  of overall test\n execution progress.\n\n### Text-Based Controller\n\nA text-based
  test controller is included with HUnit.\n\n```haskell\nrunTestText :: PutText st
  -> Test -> IO (Counts, st)\n```\n\n`runTestText` is generalized on a *reporting
  scheme* given as its first\n argument. During execution of the test given as its
  second argument, the controller\n creates a string for each reporting event and
  processes it according to the reporting\n scheme. When test execution is complete,
  the controller returns the final counts along\n with the final state for the reporting
  scheme.\n\nThe strings for the three kinds of reporting event are as follows.\n\n*
  A *start* report is the result of the function `showCounts` applied to\n    the
  counts current immediately prior to initiation of the test case being started.\n*
  An *error* report is of the form\n            \"`Error in:   *path*\\n*message*`\",\n
  \   where *path* is the path of the test case in error, as shown by\n    `showPath`,
  and *message* is a message describing the error. If the path\n    is empty, the
  report has the form \"`Error:\\n*message*`\".\n* A *failure* report is of the form\n
  \           \"`Failure in: *path*\\n*message*`\", where\n        *path* is the path
  of the test case in error, as shown by\n    `showPath`, and *message* is the failure
  message. If the path is empty,\n    the report has the form \"`Failure:\\n*message*`\".\n\nThe
  function `showCounts` shows a set of counts.\n\n```haskell\nshowCounts :: Counts
  -> String\n```\n\nThe form of its result is\n`Cases: *cases*  Tried: *tried*  Errors:
  *errors*  Failures: *failures*`\nwhere *cases*, *tried*, *errors*, and *failures*
  are the count values.\n\nThe function `showPath` shows a test case path.\n\n```haskell\n
  showPath :: Path -> String\n```\n\nThe nodes in the path are reversed (so that the
  path reads from the root down to the test\n case), and the representations for the
  nodes are joined by '`:`' separators. The\n representation for `(ListItem *n*)`
  is `(show n)`. The representation\n for `(Label *label*)` is normally *label*. However,
  if *label*\n contains a colon or if `(show *label*)` is different from *label*\n
  surrounded by quotation marks--that is, if any ambiguity could exist--then `(Label\n
  \        *label*)` is represented as `(show *label*)`.\n\nHUnit includes two reporting
  schemes for the text-based test controller. You may define\n others if you wish.\n\n```haskell\nputTextToHandle
  :: Handle -> Bool -> PutText Int\n```\n\n`putTextToHandle` writes error and failure
  reports, plus a report of the final\n counts, to the given handle. Each of these
  reports is terminated by a newline. In\n addition, if the given flag is `True`,
  it writes start reports to the handle as\n well. A start report, however, is not
  terminated by a newline. Before the next report is\n written, the start report is
  \"erased\" with an appropriate sequence of carriage return\n and space characters.
  Such overwriting realizes its intended effect on terminal devices.\n\n```haskell\nputTextToShowS
  :: PutText ShowS\n```\n\n`putTextToShowS` ignores start reports and simply accumulates
  error and failure\n reports, terminating them with newlines. The accumulated reports
  are returned (as the\n second element of the pair returned by `runTestText`) as
  a `ShowS`\n function (that is, one with type `(String -> String)`) whose\n first
  argument is a string to be appended to the accumulated report lines.\n\nHUnit provides
  a shorthand for the most common use of the text-based test controller.\n\n```haskell\nrunTestTT
  :: Test -> IO Counts\n```\n\n`runTestTT` invokes `runTestText`, specifying `(putTextToHandle
  stderr\nTrue)` for the reporting scheme, and returns the final counts from the\ntest
  execution.\n\n## References\n\n* [1] Gamma, E., et al. Design Patterns: Elements
  of Reusable Object-Oriented Software, Addison-Wesley, Reading, MA, 1995: The classic
  book describing design patterns in an object-oriented context.\n\n* [junit.org](http://www.junit.org):
  Web page for JUnit, the tool after which HUnit is modeled.\n\n* [http://junit.sourceforge.net/doc/testinfected/testing.htm](http://junit.sourceforge.net/doc/testinfected/testing.htm):
  A good introduction to test-first development and the use of JUnit.\n\n* [http://junit.sourceforge.net/doc/cookstour/cookstour.htm](http://junit.sourceforge.net/doc/cookstour/cookstour.htm):
  A description of the internal structure of JUnit. Makes for an interesting comparison
  between JUnit and HUnit.\n\nThe HUnit software and this guide were written by Dean
  Herington [heringto@cs.unc.edu](mailto:heringto@cs.unc.edu)\n"
license-name: BSD-3-Clause
