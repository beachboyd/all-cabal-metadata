homepage: https://github.com/seagreen/hjsonpointer
changelog-type: markdown
hash: e4a517bae3656d7951af6c1d76be523de9bc8b195face602b29cfb7041fe0451
test-bench-deps:
  base: <4.11
  unordered-containers: <0.3
  hspec: ! '>=2.2 && <2.5'
  text: <1.3
  hjsonpointer: -any
  QuickCheck: <2.11
  http-types: ! '>=0.8 && <0.13'
  aeson: <1.3
  vector: <0.13
maintainer: ian@housejeffries.com
synopsis: JSON Pointer library
changelog: ! '# 1.4.0


  + Enable GHC 8.4 (thanks @4e6 !).

  + Drop GHC 7.10.


  # 1.3.0


  + Test with GHC 8.2. Drop GHC 7.8.


  # 1.2.0


  + Track upper bounds in a Hackage revision instead of source code.


  # 1.1.1


  + Bump aeson.


  # 1.1.0.2


  + Raise test dep upper bounds.


  # 1.1.0.1


  + Bump `vector`.


  # 1.1.0.0


  + Rename the module to `JSONPointer`.

  + Bump aeson.

  + Derive `Semigroup` for `Pointer`.

  + Reorganize code.


  # 1.0.0.2


  + Bump hspec.


  # 1.0.0.1


  + Remove HUnit dep.


  # 1.0.0.0


  + Bump aeson.


  # 0.3.0.2


  + Switch to hspec for tests.


  # 0.3.0.1


  + Enable GHC 8.


  # 0.3.0.0


  + Rewrite.


  # 0.2


  + Fix mistake in `resolveRefTok`.

  + Split errors over two types.

  + Switch the order of pointer and value arguments for functions that take both.
  The pointer now comes first.


  # 0.1


  + Initial implementation.

'
basic-deps:
  base: ! '>=4.6 && <5'
  unordered-containers: ==0.2.*
  text: ==1.2.*
  hashable: ==1.2.*
  QuickCheck: ! '>=2.8 && <2.11'
  aeson: ! '>=0.7 && <1.3'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.1'
- '1.2.0'
- '1.3.0'
- '1.4.0'
author: Ian Grant Jeffries
latest: '1.4.0'
description-type: markdown
description: ! "# Summary\n\n[JSON Pointer](http://tools.ietf.org/html/rfc6901) library
  for Haskell.\n\n[Hackage](https://hackage.haskell.org/package/hjsonpointer) / [GitHub](https://github.com/seagreen/hjsonpointer)
  / [Travis CI](https://travis-ci.org/seagreen/hjsonpointer)\n\n# Example\n\n```haskell\nmodule
  Example where\n\nimport           Control.Monad (unless)\nimport           Data.Aeson\nimport
  qualified JSONPointer   as JP\n\nmain :: IO ()\nmain = do\n    -- JSON Pointers
  must either be empty or start with a /.\n    pntr1 <- case JP.unescape \"/foo/0\"
  of\n                 Left _     -> error \"Failed to construct JSON Pointer.\"\n
  \                Right pntr -> return pntr\n\n    -- We can also write JSON Pointers
  in Haskell.\n    let pntr2 = JP.Pointer [JP.Token \"/\"]\n    -- When we do this
  we don't have to escape / or ~ characters\n    -- (as ~1 and ~0 respectively) like
  we do in an escaped JSON\n    -- Pointer string.\n    unless (JP.unescape \"/~1\"
  == Right pntr2) (error \"ohno!\")\n\n    print (JP.resolve pntr1 document)\n    print
  (JP.resolve pntr2 document)\n\n  where\n    document :: Value\n    document = object
  [ \"foo\" .= [String \"bar\", String \"baz\"]\n                      , \"/\"   .=
  String \"quux\"\n                      ]\n```\n\nOutput:\n```\nRight (String \"bar\")\nRight
  (String \"quux\")\n```\n"
license-name: MIT
