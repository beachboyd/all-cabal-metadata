homepage: https://github.com/seagreen/hjsonschema
changelog-type: markdown
hash: 70620e6741983e3399f4c8cd7732147f7e46e7f15568b91cff6b2e6b5c889d24
test-bench-deps:
  warp: -any
  bytestring: -any
  base: -any
  unordered-containers: -any
  hspec: ! '>=2.2'
  text: -any
  filepath: -any
  async: -any
  protolude: -any
  semigroups: -any
  hjsonpointer: -any
  QuickCheck: -any
  wai-app-static: -any
  aeson: -any
  hjsonschema: -any
  profunctors: -any
  vector: -any
  directory: ! '>=1.2.5'
maintainer: ian@housejeffries.com
synopsis: JSON Schema library
changelog: ! "# 1.7.2\n\n+ Remove upper bounds.\n\n# 1.7.1\n\n+ Bump http-types.\n\n#
  1.7.0\n\n+ Test with GHC 8.2. Drop GHC 7.8.\n+ Rework `allUniqueValues` related
  utility functions.\n\n# 1.6.3\n\n+ Bump hjsonpointer and QuickCheck.\n\n# 1.6.2\n\n+
  Bump aeson.\n\n# 1.6.1\n\n+ Fix Haddocks.\n\n# 1.6.0\n\n+ Fix defect where validators
  alongside \"$ref\" weren't ignored.\n\n+ Fix defect where local references would
  fail if an \"id\" key had set resolution scope to start from a different document.\n\n+
  Vendor latest tests.\n\n+ Remove `ReferencedSchemas`.\n\n+ Create `Scope` to hold
  information that changes during validation.\n\n+ Use a sum type for \"type\" values.
  Thanks to Philip Weaver (GitHub @pheaver).\n\n# 1.5.0.1\n\n+ Raise test dep upper
  bounds.\n\n# 1.5.0.0\n\n+ Report details of `\"required\"` validator failure.\n+
  Bump `directory`.\n\n# 1.4.0.0\n\n+ Rename `Data.JsonSchema.*` modules to `JSONSchema.*`.\n+
  Rename `Data.Validator.*` modules to `JSONSchema.Validator.*`.\n\n# 1.3.0.1\n\n+
  Bump `vector`.\n\n# 1.3.0.0\n\n+ Rewrite failure messages.\n\nWe used to return
  a list of every failed validator, no matter how far it was buried within subschemas
  of the original schema.\n\nNow we return a tree of failure messages, so that if
  the first schema had only three validators, then no more than three top level failures
  will be returned.\n\n+ Move the code to parse each validator from JSON from `Data.Validator.Draft4`
  into the validators' modules themselves.\n\n+ Switch from Prelude to Protolude.\n\n+
  Switch `Data.JsonSchema.Fetch` from lazy to strict bytestrings.\n\n# 1.2.0.2\n\n+
  Bump hspec.\n\n# 1.2.0.1\n\n+ Switch to hspec for tests.\n\n# 1.2.0.0\n\n+ Return
  `AdditionalPropertiesObject` error correctly (was mistakenly returning `AdditionalItemsObject`
  instead.\n+ Don't silence errors resulting from subschemas of \"anyOf\" or \"oneOf\".\n\n#
  1.1.0.1\n\n+ Bump `aeson` and `hjsonpointer`.\n\n# 1.1.0.0\n\n+ Rename `schemaForSchemas`
  to `metaSchema` and `schemaForSchemasBytes` to `metaSchemaBytes`.\n\n# 1.0.0.0\n\n##
  Bug fixes:\n\n+ Fix JSON Pointer bug. Pointers were being built in reverse order
  and so were totally invalid.\n+ Use `.:!` instead of `.:?` to parse the draft 4
  schema. The only way to omit optional fields in JSON Schema Draft 4 is to omit them
  entirely, `\"null\"` can't be used for this.\n\n## API Changes:\n\n+ Add referenced
  schema loop detection.\n+ Add a new `referencesValidity` function.\n+ `checkSchema`
  now checks referenced schema's validity in addition to the starting schema's validity.
  This change bubbles up to the one-step validation functions as well.\n+ Switch most
  of the fetching code to use `URISchemaMap` instead of `ReferencedSchemas`. It didn't
  need to know about the more complicated data type.\n+ Rething failure related names.
  Change `Invalid` to `Failure`, add a new `Invalid` type alias which is only used
  for final results.\n+ Failures now include the failing part of the data as well
  as a JSON Pointer to it, so you don't have to worry about resolving the pointer.\n\n##
  Fundamental Changes:\n\n+ Make `Fail` (previously `Failure`) an instance of `Functor`.\n+
  Add a `Validator` data type which is an instance of `Profunctor`.\n+ Add a `Spec`
  data type for collections of `Validators`.\n\n## General:\n\n+ Switch from 2 to
  4 space indentation.\n+ Update the vendored JSON Schema Test Suite.\n\n# 0.10.0.3\n\n+
  Bump http-client.\n\n# 0.10.0.2\n\n+ Enable GHC 8.\n\n# 0.10.0.1\n\n+ Fix .cabal
  file.\n\n# 0.10\n\n+ Rewrite fetching internals.\n+ Fix reference resolution defects,
  add more tests.\n+ Switch to a Perl style regex library, which is closer to ECMAScript
  regexes than the previous Posix style one.\n+ Add one-step validation functions
  ('fetchFilesystemAndValidate' and 'fetchHTTPAndValidate').\n+ Alias the validation
  failure type exported by 'Data.JsonSchema.Draft4' to\n'Invalid', change its field
  names.\n\n# 0.9\n\n+ Partial rewrite. The API of the library has changed, see the
  examples\nfolder for how to use the new one.\n\n+ Users of the library can now write
  schemas in Haskell as well as JSON.\n\n# 0.8\n\n+ Improve scope updating and resolving.\n+
  Rename RawSchema's _rsObject field to _rsData.\n+ Make RawSchema's _rsURI field
  a Maybe. This way schemas without a starting URI can say so explicitly with Nothing
  instead of with \"\".\n+ Rename Graph to SchemaGraph. Declare it with data instead
  of type. Give it a field referencing the starting schema. This field is used to
  find the curent schema if no URI is in scope and a self-referencing $ref is found
  (e.g. \"#\").\n+ Change the order of the last two arguments to fetchReferencedSchemas.\n\n#
  0.7.1\n\n+ Support GHC 7.8 again.\n\n# 0.7\n\nChange error type from Text to ValidationFailure.\n\nRevert
  the 0.6 changes to validate. Also switch from Vector to list. Validate is now:\n
  \ Schema err -> Value -> [ValidationFailure err]\n\nAdd fetchReferencedSchemas',
  which lets the user provide their own MonadIO function to be used when fetching
  schemas. This lets them do things like only fetch schemas from particular domains.\n\n#
  0.6\n\nBreak the API so the library doesn't induce boolean blindness.\n\nChange
  validate\n  was: Schema -> Value -> Vector ValErr\n  now: Schema -> Value -> Either
  (Vector ValErr) Value\n\nChange Schema\n  was: type Schema = Vector Validator\n
  \ now: newtype Schema = Schema { _unSchema :: [Validator] }\n\n# 0.5.3\n\n+ Switch
  from http-conduit to http-client.\n\n# 0.5.2\n\n+ Add convenience function for validating
  and compiling draft 4 schemas simultaneously.\n\n# 0.5.1\n\n+ Switch from wreq to
  http-conduit; drop lens dependency.\n\n# 0.5\n\n+ Start changelog.\n+ Rename Utils.hs
  to Helpers.hs.\n+ Move all non-ValidatorGen functions in Validators.hs to Helpers.hs.\n+
  Various touchups.\n"
basic-deps:
  http-client: ! '>=0.4.30'
  bytestring: ! '>=0.10'
  pcre-heavy: ! '>=1.0'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.1'
  filepath: ! '>=1.3'
  protolude: ! '>=0.1.10'
  semigroups: ! '>=0.18'
  containers: ! '>=0.5'
  hashable: ! '>=1.2'
  file-embed: ! '>=0.0.8'
  scientific: ! '>=0.3'
  hjsonpointer: ! '>=1.1'
  QuickCheck: ! '>=2.8'
  http-types: ! '>=0.8'
  aeson: ! '>=0.11'
  profunctors: ! '>=5.0'
  vector: ! '>=0.10'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.3.2'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.7.0.0'
- '0.7.1.0'
- '0.8.0.0'
- '0.8.0.1'
- '0.9.0.0'
- '0.10.0.1'
- '0.10.0.2'
- '0.10.0.3'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.2.0.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.3.0.0'
- '1.3.0.1'
- '1.4.0.0'
- '1.5.0.0'
- '1.5.0.1'
- '1.6.0'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.7.0'
- '1.7.1'
- '1.7.2'
author: Ian Grant Jeffries
latest: '1.7.2'
description-type: markdown
description: ! '![hjsonschema logo](./logo.jpg)


  A Haskell implementation of [JSON Schema](http://json-schema.org/) ([Draft 4](https://github.com/json-schema-org/json-schema-spec/wiki/Specification-Links#draft-4)).


  [Hackage](https://hackage.haskell.org/package/hjsonschema) / [GitHub](https://github.com/seagreen/hjsonschema)
  / [Travis CI](https://travis-ci.org/seagreen/hjsonschema)


  # Notes


  + As of 2017 [json-schema-org](https://github.com/json-schema-org/json-schema-spec)
  has begun releasing new drafts of the standard. Once this work stabilizes `hjsonschema`
  will add coverage for the latest draft.


  + Requires [pcre](http://www.pcre.org/) (`pkgs.pcre` in Nixpkgs).


  + Schemas with circular references can cause infinite loops. hjsonschema does loop
  detection but it may not be solid yet -- please open an issue if you find a situation
  where it fails.


  # Example


  See [here](https://github.com/seagreen/hjsonschema/blob/master/examples/Simple.hs).


  # Tests


  Run all tests:


  `stack test`


  Run only local tests:


  `stack test hjsonschema:local`


  Run remote tests (makes GETs to json-schema.org, also temporarily starts an HTTP
  server on port 1234):


  `stack test hjsonschema:remote`


  # Details


  ## Goals


  + Be a correct and fast implementation of the spec.


  + Be a useful reference for implementers in other languages. Haskell''s high level
  nature, expressive type system and referential transparency suit this purpose well.


  ## Issues


  + Doesn''t pass all of the tests in the [language agnostic test suite](https://github.com/json-schema/JSON-Schema-Test-Suite).
  See the issue list for details.


  + Uses the [pcre-heavy](https://hackage.haskell.org/package/pcre-heavy) regular
  expression library for the "pattern" validator. It should use a library based on
  the ECMA 262 regex dialect, which the [spec](http://json-schema.org/latest/json-schema-validation.html#anchor33)
  requires.


  + Currently doesn''t support the optional `"format"` validators.


  ## Vendoring


  + `JSON-Schema-Test-Suite` is vendored from commit # c1b12bf699f29a04b4286711c6e3bbfba66f21e5
  [here](https://github.com/json-schema-org/JSON-Schema-Test-Suite).


  + `src/draft4.json` is from commit # c1b12bf699f29a04b4286711c6e3bbfba66f21e5 [here](https://github.com/json-schema/json-schema).
  The [root ref in remote ref](./JSON-Schema-Test-Suite/tests/draft4/refRemote.json)
  test has been modified to fix [#175](https://github.com/json-schema-org/JSON-Schema-Test-Suite/issues/175).


  + `.travis.yml` was created with `make_travis_yml_2.hs` commit # ea6c7d177a97bfbfb2fdc4deba943d60d2aff199.


  ## Credits


  [TJ Weigel](http://tjweigel.com/) created the logo.


  [Tim Baumann](https://github.com/timjb) wrote [aeson-schema](https://hackage.haskell.org/package/aeson-schema),
  on which hjsonschema''s test code and its implementation of `SchemaGraph` were based.


  [Julian Berman](https://github.com/Julian) maintains the fantastic [language agnostic
  test suite](https://github.com/json-schema/JSON-Schema-Test-Suite).

'
license-name: MIT
