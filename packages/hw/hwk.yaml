homepage: https://github.com/juhp/hwk
changelog-type: markdown
hash: 479de68b6c117d9a54dfeb8c50757e3e90e39335618d7af18cd50040b0add6d6
test-bench-deps: {}
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: A modern Haskell based AWK replacement
changelog: |
  # Version history for hwk

  ## 0.2 (2020-10-10)
  - first release by Jens Petersen
  - uses hint library and Hwk configuration module

  ## 0.1.0.0 (2016-2017)
  - original project by Lukas Martinelli
    https://github.com/lukasmartinelli/hwk
basic-deps:
  extra: -any
  base: <5
  simple-cmd-args: '>=0.1.2'
  hint: -any
  filepath: -any
  process: -any
  directory: -any
all-versions:
- 0.2.0
author: Lukas Martinelli
latest: 0.2.0
description-type: markdown
description: "# hwk ![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)\n\nhwk
  was originally written by Lukas Martinelli in 2016-2017:\nsee the [original README
  file](README.md.orig).\n\n<img align=\"right\" alt=\"hwk\" src=\"hwk.png\" />\n\n**hwk**
  tries to demonstrate how a modern Haskell based stream manipulation tool could look
  like.\nIt is similar to tools like **awk** or **sed**.\n`hwk` allows compact function
  sequences that operate on a list of strings. Because Haskell is lazy and has a powerful
  arsenal of functions, there is no need to invent another DSL and hopefully it encourages
  more people to think functionally.\n\n## Example\n\nPrepend a string to each line:\n```bash\n$
  seq 1 3 | hwk 'map (++ \".txt\")'\n1.txt\n2.txt\n3.txt\n```\n\nSum all negative
  numbers:\n```bash\n$ seq -100 100 | hwk 'sum . filter (< 0) . ints'\n-5050\n```\nThe
  ints function transforms a list of strings into a list of ints\n\nExtract data from
  a file:\n```bash\n$ cat /etc/passwd | hwk 'take 3 . map (filter (/= \"x\") . take
  3 . splitOn \":\")'\nroot\t0\nbin\t1\ndaemon\t2\n```\n(a module defining `splitOn`
  from the extra or split library needs to be added to the Hwk.hs config file).\n\nThe
  argument passed to `hwk` must be a valid Haskell function: a function that takes
  a list of strings and returns a new list or a single value.\n\n## Configuration\nIt
  uses a configuration module `Hwk` which provides the context for the hint evaluation
  of the supplied function.\n\nIt searches for `Hwk.hs` in `~/.config/hwk`, then the
  package's installed data directory.\n\nThe default configuration [Hwk module](data/Hwk.hs)
  just sets\nthe `Prelude`, `Data.List`, and `Data.Char` modules to be imported by
  default into the hint interpreter.\n\nIf you want to use other modules or define
  your own functions, you can copy the installed `Hwk.hs` or source `data/Hwk.hs`
  file to `~/.config/hwk/` to configure hwk.\n\n## Install\nEither use the `install.sh`
  script, or install by cabal-install or stack\nas described below:\n\n### Install
  script from source tree or git\nUse `stack unpack hwk` or `git clone https://github.com/juhp/hwk`.\n\nThen
  go to the source directory and run the `install.sh` script, which\n\n- first runs
  `stack install`\n- then moves the binary installed by `stack install` to `~/.local/bin/hwk-bin`,
  and sets up a wrapper script `~/.local/bin/hwk` which runs it.\n- and also copies
  the Hwk.hs configuration module to `~/.config/hwk/Hwk.hs` (backing up any existing
  file).\n\nYou may wish to change the resolver in stack.yaml first, which is also
  use to determine the resolver used by the created `hwk` wrapper script.\n\n### cabal\nIf
  you are on a Linux distro with a system installed ghc and Haskell libaries,\nyou
  can install with `cabal install` to make use of them.\n\nIf you install with a recent
  cabal the Hwk.hs config module probably lives somewhere like `~/.cabal/store/ghc-*/hwk-*/share/data/Hwk.hs`,
  or you can copy it from the source `data/Hwk.hs`.\n\n### stack\nInstalling by stack
  is better if you do not have a system ghc\nand/or global system Haskell libraries
  installed.\n\nAlternatively to install by hand: run `stack install`,\nand then run
  it with `stack exec hwk ...` using the same resolver,\nTo customize hwk after a
  stack install it is probably easier just to copy\nthe `data/Hwk.hs` source file.\n\n##
  How does `hwk` work?\n\n- `hwk` use the hint library to evaluate haskell functions
  on standard input.\n- By default it splits the input to a list of lines: `[String]
  -> ToList a`\n- Use `-a` or `--all` to apply a function to all the input: `String
  -> Tolist a`\n\n## Supported return types\n\nBy default the following instances
  of the `ToList` class are defined:\n\n- `String`\n- `[String]`\n- `[[String]]`\n-
  `Int`\n- `[Int]`\n\n## Contribute\n\nOpen an issue or pull request at https://github.com/juhp/hwk\nto
  report problems or make suggestions and contributions.\n\n## Related/alternative
  projects\n\n- https://github.com/gelisam/hawk\n- https://github.com/bawolk/hsp\n-
  https://code.google.com/p/pyp/\n- https://en.wikipedia.org/wiki/AWK\n- https://en.wikipedia.org/wiki/Sed\n"
license-name: MIT
