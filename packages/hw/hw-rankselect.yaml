homepage: http://github.com/haskell-works/hw-rankselect#readme
changelog-type: ''
hash: 569e23a81e77255f42dedbdc3c4659b38a4f18cca69001f609831abb6a6036aa
test-bench-deps:
  bytestring: -any
  base: ==4.*
  hspec: -any
  criterion: -any
  hedgehog: -any
  conduit: -any
  hw-hedgehog: ! '>=0.1.0.1'
  mmap: -any
  hw-prim: ! '>=0.4.0.0'
  hw-rankselect: -any
  hw-rankselect-base: ! '>=0.2.0.0'
  QuickCheck: -any
  resourcet: -any
  hw-bits: ! '>=0.4.0.0'
  vector: -any
  hw-hspec-hedgehog: -any
  directory: -any
maintainer: newhoggy@gmail.com
synopsis: Rank-select
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  hw-balancedparens: ! '>=0.1.0.0'
  mmap: -any
  hw-prim: ! '>=0.4.0.3'
  hw-rankselect: -any
  hw-rankselect-base: ! '>=0.2.0.0'
  deepseq: -any
  hw-bits: ! '>=0.6.0.0'
  vector: -any
  directory: -any
all-versions:
- '0.0.0.1'
- '0.0.0.2'
- '0.0.0.3'
- '0.0.0.4'
- '0.0.0.5'
- '0.0.0.6'
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.8.0.0'
- '0.8.0.1'
- '0.8.0.2'
- '0.9.0.0'
- '0.10.0.0'
- '0.10.0.1'
- '0.10.0.2'
- '0.10.0.3'
- '0.11.0.0'
author: John Ky
latest: '0.11.0.0'
description-type: markdown
description: ! "# hw-rankselect\n[![CircleCI](https://circleci.com/gh/haskell-works/hw-rankselect.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-rankselect)\n\nEfficient
  `rank` and `select` operations on large bit-vectors.\n\nThis library will use support
  for some BMI2 CPU instructions on some x86 based\nCPUs if compiled with the appropriate
  flags on `ghc-8.4.1` or later.\n\n## Rank and select\n\nThis library provides the
  following functions on indexed bit-vectors:\n\n* `rank1`\n* `rank0`\n* `select1`\n*
  `select0`\n\nThe supported indexed bit-vector types are:\n\n* `Poppy512`\n* `CsPoppy`\n\n##
  Constructing and using an indexed bit-vector in the repl\n\nThe example below constructs
  an indexed bit-vector from a string and runs\nrank and select query operations on
  it.  The bits in a string are in\nlittle-endian and can be of arbitrary length.
  \ The resulting bit-vector\nwill be padded with 0-bits until the next 64-bit boundary.\n\n```text\n$
  stack repl  --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nλ>
  import HaskellWorks.Data.Bits.BitRead\nλ> let bs = fromJust $ bitRead \"10010010\"
  :: CsPoppy\nbs :: CsPoppy\nλ> select1 bs 1\n1\nλ> select1 bs 2\n4\nλ> select1 bs
  3\n7\nλ> rank1 bs 7\n3\nλ> rank1 bs 4\n2\nλ> rank1 bs 1\n1\n```\n\nA valid bit string
  contains zero or more characters.  Characters other than `1` and `0` are\npermitted,
  but are ignored.  For example spaces can be used to group bits for clarity.\n\n```text\nλ>
  let bs = fromJust $ bitRead \"\" :: CsPoppy\nbs :: CsPoppy\nλ> let bs = fromJust
  $ bitRead \"10010010 10010010\" :: CsPoppy\nbs :: CsPoppy\n```\n\nWhilst the use
  of a bit string is convenient for the repl, for performance reasons, it\nis more
  typical to construct an indexed bit-vector from a 64-bit word vector:\n\n```text\n>
  import qualified Data.Vector.Storable as DVS\nλ> let bs = makeCsPoppy (DVS.fromList
  [23, 73, 55])\nbs :: CsPoppy\n```\n\n## Compilation\n\nIt is sufficient to build,
  test and benchmark the library as follows\nfor basic performance.  The library will
  be compiled to use broadword\nimplementation of rank & select, which has reasonable
  performance.\n\n```text\nstack build\nstack test\nstack bench\n```\n\nTo target
  the BMI2 instruction set, add the `bmi2` flag:\n\n```text\nstack build --flag bits-extra:bmi2
  --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nstack test  --flag bits-extra:bmi2
  --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nstack bench --flag bits-extra:bmi2
  --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\n```\n\n## Benchmark results\n\nThe
  following benchmark shows the kinds of performance gain that can\nbe expected from
  enabling the BMI2 instruction set for CPU targets\nthat support them:\n\n```text\nbenchmarking
  data/48-mb-bitvector/CsPoppy Select1\ntime                 3.636 μs   (3.613 μs
  .. 3.669 μs)\n                     1.000 R²   (0.999 R² .. 1.000 R²)\nmean                 3.618
  μs   (3.607 μs .. 3.636 μs)\nstd dev              46.03 ns   (30.79 ns .. 78.23
  ns)\n```\n\n```text\nbenchmarking data/48-mb-bitvector/CsPoppy Select1\ntime                 1.969
  μs   (1.959 μs .. 1.982 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 1.973 μs   (1.963 μs .. 1.986 μs)\nstd dev              38.41
  ns   (26.87 ns .. 59.08 ns)\nvariance introduced by outliers: 21% (moderately inflated)```\n```\n\n##
  References\n\n* [Space-Efficient, High-Performance Rank & Select Structures on Uncompressed
  Bit Sequences](http://www.cs.cmu.edu/~./dga/papers/zhou-sea2013.pdf)\n"
license-name: BSD3
