homepage: https://github.com/haskell-works/hw-dsv#readme
changelog-type: markdown
hash: 10046b1a0aa83d08be9486ba72e721a73cd57018f1c2ada5a38f0781e97aace3
test-bench-deps:
  bytestring: ==0.10.*
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4 && <3'
  text: ! '>=1.2.2 && <2.0'
  criterion: ! '>=1.4.1.0 && <1.6'
  hedgehog: ! '>=0.5 && <0.7'
  mmap: ! '>=0.5.9 && <0.6'
  hw-prim: ! '>=0.6.2.14 && <0.7'
  weigh: ! '>=0.0.6 && <0.1'
  cassava: ! '>=0.5.1.0 && <0.6'
  hw-rankselect: ! '>=0.12.0.2 && <0.13'
  hw-rankselect-base: ! '>=0.3.2.0 && <0.4'
  ghc-prim: -any
  deepseq: ==1.4.*
  bits-extra: ! '>=0.0.1.2 && <0.1'
  hw-dsv: -any
  hw-bits: ! '>=0.7.0.2 && <0.8'
  hw-simd: ! '>=0.1.1.2 && <0.2'
  vector: ! '>=0.12.0.1 && <0.13'
  hw-hspec-hedgehog: ! '>=0.1.0.4 && <0.2'
  directory: ! '>=1.3.1.5 && <1.4'
maintainer: newhoggy@gmail.com
synopsis: Unbelievably fast streaming DSV file parser
changelog: ! '# Changelog for hw-dsv


  # 0.2.1


  * Add instance NFData Lazy.DsvCursor


  # 0.2


  * Change delimiter types from Char to Word8, since only 8-bit chars work.

  * Support GHC 7.10

  * Don''t store delimiters in cursors unnecessarily


  ## Unreleased changes

'
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.7 && <5'
  hedgehog: ! '>=0.5 && <0.7'
  hw-prim: ! '>=0.6.2.14 && <0.7'
  lens: ! '>=4.15 && <5'
  hw-rankselect: ! '>=0.12.0.2 && <0.13'
  hw-rankselect-base: ! '>=0.3.2.0 && <0.4'
  ghc-prim: -any
  optparse-applicative: ! '>=0.13 && <0.15'
  deepseq: ==1.4.*
  bits-extra: ! '>=0.0.1.2 && <0.1'
  hw-dsv: -any
  resourcet: ! '>=1.1 && <1.3'
  hw-bits: ! '>=0.7.0.2 && <0.8'
  hw-simd: ! '>=0.1.1.2 && <0.2'
  vector: ! '>=0.12.0.1 && <0.13'
all-versions:
- '0.1.0.0'
- '0.2'
- '0.2.1'
- '0.3.0'
author: John Ky
latest: '0.3.0'
description-type: markdown
description: ! "# hw-dsv\n[![CircleCI](https://circleci.com/gh/haskell-works/hw-dsv.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-dsv)\n[![Travis](https://travis-ci.org/haskell-works/hw-dsv.svg?branch=master)](https://travis-ci.org/haskell-works/hw-dsv)\n\nUnbelievably
  fast streaming DSV file parser that reads based on succinct data structures.\n\nThis
  library will use support for some BMI2 or AVX2 CPU instructions on some x86 based\nCPUs
  if compiled with the appropriate flags on `ghc-8.4.1` or later.\n\n## Compilation\n\nPre-requisites:\n\n*
  Install [Haskell Stack](https://docs.haskellstack.org/en/stable/README/)\n\nIt is
  sufficient to build, test and benchmark the library as follows\nfor basic performance.
  \ The library will be compiled to use broadword\nimplementation of rank & select,
  which has reasonable performance.\n\n```text\nstack build\nstack test\nstack bench\n```\n\nFor
  best performance, add the `bmi2` and `avx2` flag to target the BMI2 and AVS2 instruction
  sets:\n\n```text\nstack build   --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-simd:avx2 --flag hw-dsv:bmi2
  --flag hw-dsv:avx2\nstack test    --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-simd:avx2 --flag hw-dsv:bmi2
  --flag hw-dsv:avx2\nstack bench   --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-simd:avx2 --flag hw-dsv:bmi2
  --flag hw-dsv:avx2\nstack install --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-simd:avx2 --flag hw-dsv:bmi2
  --flag hw-dsv:avx2\n```\n\nFor slightly older CPUs, add only the `bmi2` flag to
  target the BMI2 instruction set: \n\n```text\nstack build   --flag bits-extra:bmi2
  --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag
  hw-dsv:bmi2\nstack test    --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-dsv:bmi2\nstack bench   --flag
  bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2 --flag
  hw-simd:bmi2 --flag hw-dsv:bmi2\nstack install --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-dsv:bmi2\n```\n\n## Benchmark
  results\n\nThe following benchmark shows the kinds of performance gain that can\nbe
  expected from enabling the BMI2 instruction set for CPU targets\nthat support them.
  \ Benchmarks were run on 2.9 GHz Intel Core i7,\nmacOS High Sierra.\n\nWith BMI2
  disabled:\n\n```text\n$ stack install\n$ cat 7g.csv | pv -t -e -b -a | hw-dsv query-lazy
  -k 0 -k 1 -d , -e '|' > /dev/null\n7.08GiB 0:07:25 [16.3MiB/s]\n```\n\nWith BMI2
  and AVX2 enabled:\n\n```text\n$ stack install --flag bits-extra:bmi2 --flag hw-bits:bmi2
  --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2 --flag hw-dsv:bmi2 --flag
  hw-dsv:avx2\n$ cat 7gb.csv | pv -t -e -b -a | hw-dsv query-lazy -k 0 -k 1 -d , -e
  '|' > /dev/null\n7.08GiB 0:00:39 [ 181MiB/s]\n```\n\nWith only BMI2 enabled:\n\n```text\n$
  stack install --flag bits-extra:bmi2 --flag hw-bits:bmi2 --flag hw-rankselect-base:bmi2
  --flag hw-rankselect:bmi2 --flag hw-dsv:bmi2\n$ cat 7gb.csv | pv -t -e -b -a | hw-dsv
  query-lazy -k 0 -k 1 -d , -e '|' > /dev/null\n7.08GiB 0:00:43 [ 165MiB/s]\n```\n\n##
  Using `hw-dsv` as a library\n\n```haskell\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule
  Example where\n\nimport qualified Data.ByteString.Lazy              as LBS\nimport
  qualified Data.Vector                       as DV\nimport qualified HaskellWorks.Data.Dsv.Lazy.Cursor
  as SVL\n\nexample :: IO ()\nexample = do\n  bs <- LBS.readFile \"sample.csv\"\n
  \ let c = SVL.makeCursor ',' bs\n  let rows :: [DV.Vector LBS.ByteString] = SVL.toListVector
  c\n\n  return ()\n```\n"
license-name: BSD3
