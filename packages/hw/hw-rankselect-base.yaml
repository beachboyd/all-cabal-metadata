homepage: http://github.com/haskell-works/hw-rankselect-base#readme
changelog-type: ''
hash: 2c5ea49c2b5d6b63cc9eeb454c29cf02467e9b0ebe962d8d47b8b5a8e9be2863
test-bench-deps:
  base: ==4.*
  hspec: -any
  criterion: -any
  hedgehog: -any
  hw-hedgehog: -any
  hw-prim: ! '>=0.5.0.5'
  hw-rankselect-base: -any
  QuickCheck: -any
  bits-extra: ! '>=0.0.0.3'
  hw-bits: ! '>=0.7.0.2'
  vector: -any
  hw-hspec-hedgehog: -any
maintainer: newhoggy@gmail.com
synopsis: Rank-select base
changelog: ''
basic-deps:
  hw-string-parse: ! '>=0.0.0.2'
  base: ! '>=4 && <5'
  hw-prim: ! '>=0.5.0.5'
  bits-extra: ! '>=0.0.0.3'
  hw-bits: ! '>=0.7.0.2'
  hw-int: ! '>=0.0.0.1'
  safe: -any
  vector: -any
all-versions:
- '0.0.0.1'
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.3.0.0'
- '0.3.1.0'
author: John Ky
latest: '0.3.1.0'
description-type: markdown
description: ! "# hw-rankselect-base\n[![CircleCI](https://circleci.com/gh/haskell-works/hw-rankselect-base.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-rankselect-base)\n\nRank
  and select operations.\n\nThis library will use support for some BMI2 CPU instructions
  on some x86 based\nCPUs if compiled with the appropriate flags on `ghc-8.4.1` or
  later.\n\n## Rank and select\n\nThis library provides the following functions on
  various types:\n\n* `rank1`\n* `rank0`\n* `select1`\n* `select0`\n\nType class instances
  are provided for the following primitive types:\n\n* `Bool`\n* `Word8`\n* `Word16`\n*
  `Word32`\n* `Word64`\n\nMoreover additional type class instances are provided for
  `[]`, `Vector`\nfrom both `Data.Vector`, and `Data.Vector.Storable` of these primitive\ntypes.\n\nThe
  collection-based type classes instances are not intended to be used\nin high-performance
  code because they have poor performance for most\npurposes and are provided purely
  as reference implementations.\n\nBit-vectors larger than 64-bits need indexing to
  achieve higher performance.\nA indexed bit-vector implementation can found in the\n[hw-rankselect](https://hackage.haskell.org/package/hw-rankselect)
  package.\n\n## Notes\n\nThis library follows standard 1-based counting conventions
  typically found in\nComputer Science literature where `select1 10 2 = 4` as illustrated
  here:\n\n```text\n  8 7 6 5  [4]3 2 1\n  0 0 0 0   1 0 1 0\n```\n\nThe standard
  convention for the `bmi2` implementation, comes at a small cost.\n\nAn internal
  function `select1Word64Bmi2Base0` demonstrates 0-based counting\nthat is slightly
  faster when implemented with the `bmi2` instruction set where\n`select1 10 1 = 3`
  as illustrated here:\n\n```text\n  7 6 5 4  [3]2 1 0\n  0 0 0 0   1 0 1 0\n```\n\n##
  Compilation\n\nIt is sufficient to build, test and benchmark the library as follows\nfor
  emulated behaviour:\n\n```text\nstack build\nstack test\nstack bench\n```\n\nTo
  target the BMI2 instruction set, add the `bmi2` flag:\n\n```text\nstack build --flag
  bits-extra:bmi2 --flag hw-rankselect-base:bmi2\nstack test  --flag bits-extra:bmi2
  --flag hw-rankselect-base:bmi2\nstack bench --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2\n```\n\n##
  Benchmark results\n\nThe following benchmark shows the kinds of performance gain
  that can\nbe expected from enabling the BMI2 instruction set for CPU targets\nthat
  support them:\n\n```text\nbenchmarking 64-bit/Once: Select1 Broadword\ntime                 14.75
  ns   (14.63 ns .. 14.90 ns)\n                     0.996 R²   (0.987 R² .. 0.999
  R²)\nmean                 15.35 ns   (14.92 ns .. 16.70 ns)\nstd dev              2.355
  ns   (607.2 ps .. 4.849 ns)\nvariance introduced by outliers: 96% (severely inflated)\n\nbenchmarking
  64-bit/Once: Select1 Bmi2\ntime                 6.026 ns   (5.933 ns .. 6.134 ns)\n
  \                    0.999 R²   (0.998 R² .. 0.999 R²)\nmean                 6.024
  ns   (5.966 ns .. 6.096 ns)\nstd dev              224.4 ps   (176.9 ps .. 318.6
  ps)\nvariance introduced by outliers: 62% (severely inflated)\n\nbenchmarking 32-bit/Once:
  Select1 Broadword\ntime                 26.09 ns   (25.84 ns .. 26.40 ns)\n                     0.999
  R²   (0.998 R² .. 0.999 R²)\nmean                 26.67 ns   (26.37 ns .. 27.01
  ns)\nstd dev              1.017 ns   (848.4 ps .. 1.291 ns)\nvariance introduced
  by outliers: 61% (severely inflated)\n\nbenchmarking 32-bit/Once: Select1 Bmi2\ntime
  \                8.613 ns   (8.543 ns .. 8.687 ns)\n                     0.999 R²
  \  (0.999 R² .. 1.000 R²)\nmean                 8.592 ns   (8.515 ns .. 8.671 ns)\nstd
  dev              248.3 ps   (216.2 ps .. 294.8 ps)\nvariance introduced by outliers:
  48% (moderately inflated)\n```\n"
license-name: BSD3
