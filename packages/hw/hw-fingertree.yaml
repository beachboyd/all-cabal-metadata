homepage: ''
changelog-type: ''
hash: 2e848243206edf69e3cb5755f32757b7f6db1a4f04f9960e4031dcf87b974e1a
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ! '>=4.2 && <6'
  test-framework-quickcheck2: -any
  HUnit: -any
  deepseq: -any
  QuickCheck: -any
maintainer: Ross Paterson <R.Paterson@city.ac.uk>
synopsis: Generic finger-tree structure, with example instances
changelog: ''
basic-deps:
  base: <6
  deepseq: -any
all-versions:
- '0.1.0.0'
author: ''
latest: '0.1.0.0'
description-type: haddock
description: ! 'A general sequence representation with arbitrary

  annotations, for use as a base for implementations of

  various collection types, with examples, as described

  in section 4 of


  * Ralf Hinze and Ross Paterson,

  \"Finger trees: a simple general-purpose data structure\",

  /Journal of Functional Programming/ 16:2 (2006) pp 197-217.

  <http://staff.city.ac.uk/~ross/papers/FingerTree.html>


  For a tuned sequence type, see @Data.Sequence@ in the

  @containers@ package, which is a specialization of

  this structure.'
license-name: BSD3
