homepage: ''
changelog-type: ''
hash: 3a8e7af775d9ee9350259435e538681ff5e441ae60b9491284d8ebcb4237096c
test-bench-deps:
  hwhile: -any
  Cabal: -any
  base: ! '>=4.8 && <4.11'
  array: ! '>=0.5 && <0.6'
  containers: ! '>=0.5 && <0.6'
  mtl: -any
maintainer: apjeffery136@gmail.com
synopsis: An implementation of Neil D. Jones' While language
changelog: ''
basic-deps:
  hwhile: -any
  haskeline: -any
  base: ! '>=4.8 && <4.11'
  filepath: -any
  array: ==0.5.*
  repline: -any
  containers: ==0.5.*
  mtl: -any
all-versions:
- '0.1.1.0'
- '0.1.1.1'
author: Alex Jeffery
latest: '0.1.1.1'
description-type: markdown
description: ! "## HWhile\nHWhile is an interpreter for a simple While language originally
  used by Neil\nJones in his book “Computability and Complexity\". The While language
  is a simple\nimperative programming language with while-loops, assignment and conditionals.\nIt
  has a single data type: binary trees. The HWhile interpreter is written in\nHaskell.\n\nThis
  current implementation also includes syntactic sugar such as switch\nstatements,
  macros, list notation, equality, and natural number literals. It\ntherefore supports
  (almost fully) the version of While used in Bernhard Reus’\ntextbook [Limits of
  Computation - From a Programming Perspective](http:limits.bernhardreus.com)\nand
  has been developed in co-operation with Bernhard to support students on the\ncorresponding
  module at Sussex University.\nThis version also allows one to translate while programs
  into programs as data.\nFor this to work,  all the syntax sugar (extensions) of
  a While program has to\nbe removed again.\n\nMore about the syntax and the semantics
  (and usage) of the While language can be\nfound in Bernhard’s textbook (Chapter
  3-5).\n\n### Syntax\nThe grammar below gives exactly the concrete syntax of this
  implementation:\n\n    PROG  ::= ID read ID BLOCK write ID\n    \n    BLOCK ::=
  { CMDS }\n            | {}\n\n    CMDS  ::= CMD ; CMD\n            | CMD\n\n    CMD
  \  ::= ID := EXP                     // Assignment\n            | while EXP BLOCK
  \              // While loops\n            | if EXP BLOCK else BLOCK       // If-then-else
  statements\n            | if EXP BLOCK                  // If-then statements\n
  \           | ID := <ID> EXP                // Macro calls\n            | switch
  EXP { CASES            // Switch statements\n\n    CASES ::= case EXP : CMDS CASES\n
  \           | default : CMDS }\n            | }\n\n    EXP   ::= LIT\n            |
  cons EXP EXP\n            | hd EXP\n            | tl EXP\n            | (EXP)\n
  \           | EXP = EXP\n            | ID\n            | []\n            | [ EXP
  LIST\n\n    LIST  ::= , EXP LIST\n            | ]\n          \n    LIT   ::= nil\n
  \           | true\n            | false\n            | <LIT.LIT>\n            |
  NAT\n            | @asgn\n            | @:=\n            | @doAsgn\n            |
  @while\n            | @doWhile\n            | @if\n            | @doIf\n            |
  @var\n            | @quote\n            | @hd\n            | @doHd\n            |
  @tl\n            | @doTl\n            | @cons\n            | @doCons\n          \n
  \   NAT   ::= 0|[1-9][0-9]+\n          \n    ID    ::= [a-zA-Z_'][a-zA-Z0-9_']*\n\nCommand
  line input must conform to the following grammar:\n\n    INP    ::= nil\n            |
  true\n            | false\n            | <LIT.LIT>\n            | NAT\n            |
  []\n            | [ INP INPLST\n            | @asgn\n            | @:=\n            |
  @doAsgn\n            | @while\n            | @doWhile\n            | @if\n            |
  @doIf\n            | @var\n            | @quote\n            | @hd\n            |
  @doHd\n            | @tl\n            | @doTl\n            | @cons\n            |
  @doCons\n\n    INPLST ::= , INP INPLST\n            | ]\n\n### Instructions\n\n####
  Installing Prerequisites\nAll the tools required to compile and run HWhile are included
  in the \n[Haskell Platform](http://www.haskell.org/platform/).\n\nNote that you
  may need to add the Haskell Platform's binaries to your system's\npath variable.\n\n####
  Installing HWhile\nOnce the Haskell Platform is installed and configured correctly,
  you can install\nHWhile by running:\n\n    stack install hwhile\n\nThis will download
  HWhile and its depenencies (if necessary) and compile and\ninstall them.\n\n####
  Invocation\nIf installed correctly, HWhile can be run with the command:\n\n    hwhile
  <FLAG> <FILE> <EXPR>        ( Mac & Linux )\n    hwhile.exe <FLAG> <FILE> <EXPR>
  \   ( Windows     )\n\nFor example:\n\n    hwhile -i examples/count.while \"[1,
  2, 3]\"         ( Mac & Linux )\n    hwhile.exe -i examples/count.while \"[1, 2,
  3]\"     ( Windows     )\n\nThis example takes a list of numbers as its argument
  and outputs their sum, so\nyou should see `6` as the output.\n"
license-name: GPL-3
