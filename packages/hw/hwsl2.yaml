homepage: https://github.com/srijs/hwsl2
changelog-type: ''
hash: 42c8d7e8700964d85b03300d45539203473a201992f17fb042f42454781c3f71
test-bench-deps:
  bytestring: ! '>=0.10'
  Cabal: ! '>=1.9.2'
  base: ! '>=4.8 && <5'
  criterion: ! '>=1.0'
  quickcheck-properties: ! '>=0.1'
  tasty-quickcheck: ! '>=0.8'
  tasty: ! '>=0.10'
  parallel: ! '>=3.2'
  cryptohash: ! '>=0.11'
maintainer: srijs@airpost.net
synopsis: Hashing with SL2
changelog: ''
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.8 && <5'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.1.4
- 0.2.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
- 0.4.0.0
- 0.4.0.1
author: Sam Rijs
latest: 0.4.0.1
description-type: markdown
description: ! "# Hashing with SL2 [![Build Status](https://travis-ci.org/srijs/hwsl2-haskell.svg?branch=master)](https://travis-ci.org/srijs/hwsl2-haskell)\n\nAn
  algebraic hash function, inspired by the paper _Hashing with SL2_ by Tillich and
  Zemor.\n\nThe hash function is based on matrix multiplication in the special linear
  group\nof degree 2, over a Galois field of order 2^127, with all computations modulo\nthe
  polynomial x^127 + x^63 + 1.\n\nThis construction gives some nice properties, which
  traditional bit-scambling\nhash functions don't possess, including it being composable.
  It holds:\n\n    hash (m1 <> m2) == hash m1 <> hash m2\n\nFollowing that, the hash
  function is also parallelisable. If a message `m` can be divided into a list of
  chunks `cs`, the hash of the message can be calculated in parallel:\n\n    mconcat
  (parMap rpar hash cs) == hash m\n\nAll operations in this package are implemented
  in a very efficient manner using SSE instructions.\n\n![diagram](https://raw.githubusercontent.com/srijs/hwsl2-core/master/cat.png)\n"
license-name: MIT
