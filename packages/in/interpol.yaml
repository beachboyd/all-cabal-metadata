homepage: https://github.com/scvalex/interpol
changelog-type: ''
hash: 43ceb786bb38734e44d236a9e79550ee9e2f37066d0e1cf42d4cb138bcc8879b
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: ! '>=4 && <5'
  syb: -any
  HUnit: -any
  haskell-src-exts: -any
  regex-posix: -any
maintainer: scvalex@gmail.com
synopsis: GHC preprocessor and library to enable variable interpolation in strings
changelog: ''
basic-deps:
  base: ==4.*
  syb: -any
  haskell-src-exts: -any
  regex-posix: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
author: Alexandru Scvortov <scvalex@gmail.com>
latest: 0.2.3
description-type: markdown
description: ! "interpol\n========\n\n> variable interpolations\n\n\nExamples\n--------\n\nThe
  `interpol` preprocessor parses Haskell source file *before* GHC\nand performs variable
  interpolation statically.  Concretely, it\nreplaces `{identifier}` patterns in literal
  strings with `show\nidentifier`.  For instance,\n\n    okVal = 23\n    \"I have
  {okVal} apples.\"\n\nbecomes\n\n    \"I have 23 apples.\"\n\nThis works on any type
  that has a `Show` instance and is safe, in the\nsense that it does not disable any
  of GHC's normal checks\n(i.e. interpolating a non-existing identifier or one whose
  type does\nnot have a `Show` instance will result in the appropriate error).\n\n\nInstallation\n------------\n\nThis
  package is on\n[Hackage](http://hackage.haskell.org/package/interpol).  To install\nit,
  run:\n\n    cabal update\n    cabal install interpol\n\n\nUsage\n-----\n\nTo use
  `interpol`, install the cabal package (and/or make sure that\nthe `interpol` executable
  is in your path), and compile with the `\"-F\n-pgmF interpol\"` GHC options.  For
  instance, one of the tests for this\npackage is compiled with:\n\n    ghc -F -pgmF
  interpol Test/One.hs\n\nAlternatively, you may specify the options in a `GHC_OPTIONS`
  pragma\nat the top of the file:\n\n    {-# OPTIONS_GHC -F -pgmF interpol #-}\n\nNote
  that, unless you use this latter pragma,\n[ghc-mod](http://www.mew.org/~kazu/proj/ghc-mod/en/)
  and other\n`flymake`-based Emacs modes will probably complain about unused\nvariables.\n\nOperation\n---------\n\nThe
  `interpol` preprocessor effectively does two things:\n\n 1. it adds an import declaration
  for `Text.Interpol`, in order to\n     bring the `(^-^)` operator into scope, and\n\n
  1. it replaces any occurrence of `\"\\\\{[A-z_][A-z0-9_]*}\"` in string\n    literals
  with `\"^-^ <ident> ^-^\"`.\n\nSo,\n\n    \"I have {okVal} apples.\"\n\nactually
  becomes\n\n    (\"I have \" ^-^ okVal ^-^ \" apples.\")\n\nThe `(^-^)` operator
  is a smarter version of `(++)`: it shows its\nsecond argument before appending,
  but only if it is not already a\n`String` (i.e. it does not quote `String` values
  when interpolating).\n\nRun the preprocessor manually and check out the source for
  details\n(seriously now, this README is longer than the source).\n"
license-name: GPL-3.0-only
