homepage: https://github.com/0xd34df00d/inline-asm#readme
changelog-type: markdown
hash: 358368ae517356426ce49959adaf099eda45b9efb9292ae2ff6a218c97b1a3f1
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  uniplate: -any
  ghc-prim: -any
  inline-asm: -any
  QuickCheck: -any
  template-haskell: ! '>=2.15.0.0'
maintainer: 0xd34df00d@gmail.com
synopsis: Inline some Assembly in ur Haskell!
changelog: |
  # Changelog for inline-asm

  ## v0.1.1.0

  * Support returning tuples.

  ## v0.1.0.0

  * Initial implementation.
basic-deps:
  base: ! '>=4.7 && <5'
  uniplate: -any
  ghc-prim: -any
  inline-asm: -any
  template-haskell: ! '>=2.15.0.0'
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Georg Rudoy
latest: 0.1.1.0
description-type: markdown
description: |
  # inline-asm

  _When inline C is too safe_.

  Did you try `inline-c`, but it's not enough? You need more? Nothing seems to satisfy?
  `inline-asm` to the rescue!

  For now the usage is pretty straightforward: use `defineAsmFun` to define the
  corresponding function, like
  ```haskell
  defineAsmFun "timesTwo" [t| Word -> Word |] "add %rbx, %rbx"
  ````
license-name: BSD-3-Clause
