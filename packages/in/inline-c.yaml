homepage: ''
changelog-type: markdown
hash: 5a2ba76fe22d78437f201326b612669dd234262d0a1ca11657b5a434d527e294
test-bench-deps:
  inline-c: -any
  ansi-wl-pprint: -any
  base: ! '>=4 && <5'
  unordered-containers: -any
  hspec: ! '>=2'
  containers: -any
  parsers: -any
  raw-strings-qq: -any
  regex-posix: -any
  hashable: -any
  transformers: -any
  QuickCheck: -any
  template-haskell: -any
  vector: -any
maintainer: francesco@fpcomplete.com
synopsis: Write Haskell source files including C code inline. No FFI required.
changelog: ! "- 0.6.0.6: Support GHC 8.4\n- 0.6.0.5: Update readme\n- 0.6.0.4: Remove
  QuickCheck dependency\n- 0.6.0.3: Remove cryptohash dependencies\n- 0.6.0.2: Update
  haddock\n- 0.6.0.0: Use `addDependentFile` so separate compilation is not needed.\n-
  0.5.6.0: Add `ForeignPtr` anti-quoter\n- 0.5.5.9: Make tests work with QuickCheck
  < 2.9\n- 0.5.5.8: Add workaround for QuickCheck-2.9 bug. See issue #51\n- 0.5.5.2:
  Add docs regarding internals. See issue #41.\n- 0.5.5.1: Add support for Interruptible
  calls. The version skip is\n  simply because I forgot to update the changelog for
  0.5.5.0.\n- 0.5.4.3: Fix haddock docs.\n- 0.5.4.2: Generate unique C names by prefixing
  the already generated\n  name with the Haskell module name.  See issue #25.\n- 0.5.4.1:
  Do not generate C code when haddock is type checking.  See\n  issue #24.\n- 0.5.4.0:
  Allow Haskell identifiers in anti-quotes.  See issue #23.\n- 0.5.3.4: Fix `bsCtx`
  docs.\n- 0.5.3.3:\n  * Fix errors when using parallel builds.  See issue #22.\n
  \ * Use `fail` rather than `error` in the `Q` monad.\n- 0.5.3.2: Make type errors
  with default anti-quoter much saner.\n- 0.5.3.1: Fix leak of `FunPtr` when using
  `funCtx`.\n- 0.5.3.0: Recognize more standard library types.  See pull request #19.\n-
  0.5.2.1: Convert `signed char` to `CSChar`.  See pull request #18.\n- 0.5.2.0: Make
  `bs-ptr` use `char` instead of `unsigned char`.  See\n  issue #16.\n"
basic-deps:
  bytestring: -any
  ansi-wl-pprint: ! '>=0.6.8'
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  parsec: ! '>=3'
  containers: -any
  parsers: -any
  mtl: -any
  hashable: -any
  transformers: ! '>=0.1.3.0'
  template-haskell: ! '>=2.12.0.0'
  vector: -any
all-versions:
- '0.5.0.0'
- '0.5.0.1'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.3.2'
- '0.5.3.3'
- '0.5.3.4'
- '0.5.4.0'
- '0.5.4.1'
- '0.5.4.2'
- '0.5.4.3'
- '0.5.5.0'
- '0.5.5.1'
- '0.5.5.2'
- '0.5.5.3'
- '0.5.5.4'
- '0.5.5.5'
- '0.5.5.6'
- '0.5.5.7'
- '0.5.5.8'
- '0.5.5.9'
- '0.5.6.0'
- '0.5.6.1'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.6.0.4'
- '0.6.0.5'
- '0.6.0.6'
author: Francesco Mazzoli, Mathieu Boespflug
latest: '0.6.0.6'
description-type: markdown
description: ! "# inline-c\n\n`inline-c` lets you seamlessly call C libraries and
  embed\nhigh-performance inline C code in Haskell modules. Haskell and C can\nbe
  freely intermixed in the same source file, and data passed to and\nfrom code in
  either language with minimal overhead. No FFI required.\n\n`inline-c` is Haskell's
  escape hatch (or one of) to the wild world of\nlegacy code and high-performance
  numerical and system libraries. It\nhas other uses too: you can also think of `inline-c`
  as to Haskell\nwhat inline Assembly is to C â€” a convenient means to eke out a little\nbit
  of extra performance in those rare cases where C still beats\nHaskell.\n\nGHCi support
  is currently limited to using `-fobject-code`, see\nthe [last section](#ghci) for
  more info.\n\n## Getting started\n\nLet's say we want to compute the cosine of a
  number using C from\nHaskell. `inline-c` let's you write this function call inline,
  without\nany need for a binding to the foreign function:\n\n```\n{-# LANGUAGE QuasiQuotes
  #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport qualified Language.C.Inline as C\n\nC.include
  \"<math.h>\"\n\nmain :: IO ()\nmain = do\n  x <- [C.exp| double{ cos(1) } |]\n  print
  x\n```\n\n`inline-c` leverages the [quasiquotation][ghc-manual-quasiquotation]\nlanguage
  extension implemented in GHC.\n[Template Haskell][ghc-manual-template-haskell] is
  also required.\nImporting the `Language.C.Inline` module brings in scope most required\nHaskell
  definitions. `C.include \"<math.h>\"` brings into scope the\nforeign function `cos()`
  that we wish to call. Finally, in the `main`\nfunction, `[C.exp| double { cos(1)
  } |]` denotes an inline C expression\nof type `double`. `cexp` stands for \"C expression\".
  It is a custom\nquasiquoter provided by `inline-c`.\n\nA `C.exp` quasiquotation
  always includes a type annotation for the\ninline C expression. This annotation
  determines the type of the\nquasiquotation in Haskell. Out of the box, `inline-c`
  knows how to map\nmany common C types to Haskell type. In this case,\n\n```\n[C.exp|
  double { cos(1) } |] :: IO CDouble\n```\n\nFor pure C expression like these we also
  provide `C.pure`, which works\nexactly the same but without the `IO`:\n\n```\n[C.pure|
  double { cos(1) } |] :: CDouble\n```\n\nObviously extra care must be taken when
  using `C.pure`: the embedded C\ncode must be referentially transparent.\n\n## Multiple
  statements\n\n`inline-c` allows embedding arbitrary C code, not just expressions,
  in\nthe form of a sequence of statements, using the `c` quasiquoter:\n\n```\n{-#
  LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport qualified Language.C.Inline
  as C\n\nC.include \"<stdio.h>\"\n\nmain :: IO ()\nmain = do\n  x <- [C.block| int
  {\n      // Read and sum 5 integers\n      int i, sum = 0, tmp;\n      for (i =
  0; i < 5; i++) {\n        scanf(\"%d\", &tmp);\n        sum += tmp;\n      }\n      return
  sum;\n    } |]\n  print x\n```\n\nJust as with `C.exp`, we need a type annotation
  on the entire C block.\nThe annotation specifies the return type. That is, the type
  of the\nexpression in any return statement.\n\n## Capturing Haskell variables --
  parameter declaration\n\n`inline-c` allows referring to Haskell variables inside
  C expressions\nand code blocks. We do so by \"anti-quoting\" them.\n\nLet's say
  that we wanted to parameterize the function we wrote above\nby how many numbers
  we should read. We can do so by defining a Haskell\nfunction whose parameter we
  can refer to from within C:\n\n```\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell
  #-}\nimport qualified Language.C.Inline as C\nimport           Foreign.C.Types\n\nC.include
  \"<stdio.h>\"\n\n-- | @readAndSum n@ reads @n@ numbers from standard input and returns\n--
  their sum.\nreadAndSum :: CInt -> IO CInt\nreadAndSum n  = [C.block| int {\n    //
  Read and sum n integers\n    int i, sum = 0, tmp;\n    for (i = 0; i < $(int n);
  i++) {\n      scanf(\"%d\", &tmp);\n      sum += tmp;\n    }\n    return sum;\n
  \ } |]\n\nmain :: IO ()\nmain = do\n  x <- readAndSum 5\n  print x\n```\n\nHere,
  the Haskell variable `n` is captured right where we need it using\n`$(int n)`.  Standard
  anti-quotation (we'll talk about additional ones\nlater) consists of a `$` followed
  by a C declaration in parenthesis.\nNote that any valid Haskell identifiers can
  be used when anti-quoting,\nincluding ones including constructors, qualified names,
  names containing\nunicode, etc.\n\nFor each anti-quotation, a variable with a matching
  type is expected in\nthe Haskell environment.  In this case `inline-c` expects a
  variable\nnamed `n` of type `CInt`, which is the case.\n\n## What can be captured
  and returned?\n\nAll C types correspond to exactly one Haskell type. Basic types
  (`int`,\n`long`, `double`, `float`, etc.) get converted to their Haskell\nequivalents
  `CInt`, `CLong`, `CDouble`, `CFloat`. Pointers and arrays\nget converted to `Ptr`.
  Function pointers get converted to `FunPtr`.\n\n`inline-c` can also handle user-defined
  structs and enums, provided that\nthey are instances of `Storable` and that you
  tell `inline-c` about them\nusing [contexts](#contexts).\n\n## Contexts\n\nEverything
  beyond the base functionality provided by `inline-c` is\nspecified in a structure
  that we call \"`Context`\".  From a user\nperspective, if we want to use anything
  but the default context\n(`C.baseCtx`), we must set the `C.Context` explicitly using
  the\n`C.context` function.  The next two sections include several examples.\n\nThe
  `C.Context` allows to extend `inline-c` to support\n\n* Custom C types beyond the
  basic ones;\n* And [additional anti-quoters](#more-anti-quoters).\n\n`C.Context`s
  can be composed using their `Monoid` instance.\n\nIdeally a `C.Context` will be
  provided for each C library that should be\nused with `inline-c`. The user can then
  combine multiple contexts\ntogether if multiple libraries are to be used in the
  same program. See\nthe [`inline-c-nag` package](https://github.com/fpco/inline-c-nag)
  for\nan example of using a `C.Context` tailored for a library.\n\nFor information
  regarding how to define `C.Context`s, see the\nHaddock-generated API documentation
  for `Language.C.Inline.Context`.\n\n## More anti-quoters\n\nBesides the basic anti-quoter,
  which captures variables as they are,\nsome more anti-quoters are provided with
  additional functionality.  As\nmentioned, `inline-c` can easily be extended with
  anti-quoters defined\nby the user, using [contexts](#contexts).\n\n### Vectors\n\nThe
  `vec-len` and `vec-ptr` anti-quoters in the `C.vecCtx` context let us\neasily use
  [Haskell vectors](http://hackage.haskell.org/package/vector)\nin C.  Continuing
  along the \"summing\" theme, we can write code that sums\nHaskell vectors in C:\n\n```\n{-#
  LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell #-}\nimport qualified Language.C.Inline
  as C\nimport qualified Data.Vector.Storable as V\nimport qualified Data.Vector.Storable.Mutable
  as VM\nimport           Data.Monoid ((<>))\nimport           Foreign.C.Types\n\n--
  To use the vector anti-quoters, we need the 'C.vecCtx' along with the\n-- 'C.baseCtx'.\nC.context
  (C.baseCtx <> C.vecCtx)\n\nsumVec :: VM.IOVector CDouble -> IO CDouble\nsumVec vec
  = [C.block| double {\n    double sum = 0;\n    int i;\n    for (i = 0; i < $vec-len:vec;
  i++) {\n      sum += $vec-ptr:(double *vec)[i];\n    }\n    return sum;\n  } |]\n\nmain
  :: IO ()\nmain = do\n  x <- sumVec =<< V.thaw (V.fromList [1,2,3])\n  print x\n```\n\nThe
  `vec-len` anti-quoter is used simply by specifying the vector we\nwant to get the
  length of (in our case, `vec`).  To use the `vec-ptr`\nanti-quoter it is also required
  to specify the pointer type we want.\nSince `vec` is a vector of `CDouble`s, we
  want a pointer to `double`s.\n\n## ByteStrings\n\nThe `bs-len` and `bs-ptr` ant-quoters
  in the `C.bsCtx` context work\nexactly the same as the `vec-len` and `vec-ptr` counterparts,
  but with\nstrict `ByteString`s.  The only difference is that it is no necessary
  to\nspecify the type of the pointer from C -- it is always going to be\n`char *`:\n\n```\n{-#
  LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE QuasiQuotes #-}\nimport qualified Data.ByteString
  as BS\nimport           Data.Monoid ((<>))\nimport           Foreign.C.Types\nimport
  qualified Language.C.Inline as C\n\nC.context (C.baseCtx <> C.bsCtx)\n\n-- | Count
  the number of set bits in a 'BS.ByteString'.\ncountSetBits :: BS.ByteString -> IO
  CInt\ncountSetBits bs = [C.block|\n    int {\n      int i, bits = 0;\n      for
  (i = 0; i < $bs-len:bs; i++) {\n        char ch = $bs-ptr:bs[i];\n        bits +=
  (ch * 01001001001ULL & 042104210421ULL) % 017;\n      }\n      return bits;\n    }\n
  \ |]\n```\n\n### Function pointers\n\nUsing the `fun` anti-quoter, present in the
  `C.funCtx` context, we can\neasily turn Haskell function into function pointers.\n\n```\n{-#
  LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell #-}\nimport qualified Language.C.Inline
  as C\n\n-- To use the function pointer anti-quoter, we need the 'C.funCtx along
  with\n-- the 'C.baseCtx'.\nC.context (C.baseCtx <> C.funCtx)\n\nackermann :: CLong
  -> CLong -> CLong\nackermann m n\n  | m == 0 = n + 1\n  | m > 0 && n == 0 = ackermann
  (m - 1) 1\n  | otherwise = ackermann (m - 1) (ackermann m (n - 1))\n\nmain :: IO
  ()\nmain = do\n  let ackermannIO m n = return $ ackermann m n\n  let x = 3\n  let
  y = 4\n  z <- [C.exp| long{\n      $fun:(long (*ackermannIO)(long, long))($(long
  x), $(long y))\n    } |]\n  print z\n```\n\nIn this example, we capture a Haskell
  function of type `CLong -> CLong\n-> IO CLong`, `ackermannIO`, to a function pointer
  in C, using the `fun`\nanti-quoter.  Note how we need to specify the function pointer
  type when\nwe capture `ackermannIO`, using standard C declaration syntax.  Also\nnote
  that the `fun` anti-quoter works with `IO` functions, and so we\nneeded to modify
  `ackermann` to make it have the right type.\n\nIn general, when anti-quoting, if
  the type can be inferred (like in the\ncase of `vec-len`), only the Haskell identifier
  appears.  If it can't,\nthe target C type and the Haskell identifier are mentioned
  using C\ndeclaration syntax.\n\n## GHCi\n\nCurrently `inline-c` does not work in
  interpreted mode. However, GHCi\ncan still be used using the `-fobject-code` flag.
  For speed, we\nreccomend passing `-fobject-code -O0`, for example\n\n```\nstack
  ghci --ghci-options='-fobject-code -O0'\n```\n\nor\n\n```\ncabal repl --ghc-options='-fobject-code
  -O0'\n```\n\n[ghc-manual-quasiquotation]:\nhttps://downloads.haskell.org/~ghc/latest/docs/html/users_guide/template-haskell.html#th-quasiquotation\n[ghc-manual-template-haskell]:
  https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/template-haskell.html\n"
license-name: MIT
