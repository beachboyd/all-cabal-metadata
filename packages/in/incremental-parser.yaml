homepage: https://github.com/blamario/incremental-parser
changelog-type: ''
hash: 787f601ff8e5031afc63eb47bb101065bbaee6d024dd65d4ac22fb7ba705fa97
test-bench-deps:
  monoid-subclasses: <0.5
  bytestring: ! '>=0.10.4.0'
  checkers: ! '>=0.3.2 && <0.5'
  base: <5
  text: ! '>=1.1.1.0'
  criterion: ! '>=1.0'
  incremental-parser: -any
  tasty-quickcheck: ! '>=0.7 && <1.0'
  tasty: ! '>=0.7 && <1.2'
  deepseq: ! '>=1.1'
  QuickCheck: ! '>=2 && <3'
maintainer: blamario@yahoo.com
synopsis: Generic parser library capable of providing partial results from partial
  input.
changelog: ''
basic-deps:
  monoid-subclasses: <0.5
  base: ! '>=4.9 && <5'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
- '0.2.3.2'
- '0.2.3.3'
- '0.2.3.4'
- '0.2.4'
- '0.2.4.1'
- '0.2.5'
- '0.2.5.1'
- '0.2.5.2'
- '0.2.5.3'
- '0.2.5.4'
- '0.3'
- '0.3.1'
- '0.3.1.1'
- '0.3.2'
author: Mario Blazevic
latest: '0.3.2'
description-type: markdown
description: ! "The incremental-parser library is yet another parser combinator library,
  providing the usual set of `Applicative`,\n`Alternative`, and `Monad` combinators.
  Apart from this, it has three twists that make it unique.\n\n#### Parsing incrementally\n\nFirst,
  the parser is incremental. Not only can it be fed its input in chunks, but in proper
  circumstances it can also\nprovide its output in parsed chunks. For this to be possible
  the result type must be a `Monoid`. The complete parsing\nresult is then a concatenation
  of the partial results.\n\nIn order to make the incremental parsing easier, the
  combinator set is optimized for monoidal results. Apart from the\nusual combinators
  `many` and `some`, for example, there are `concatMany` and `concatSome` operators.\n\n```haskell\n
  \   many :: Parser s r -> Parser s [r]\n    concatMany :: (Monoid s, Monoid r) =>
  Parser s r -> Parser s r\n```\n\n#### Arbitrary monoidal inputs\n\nThe second weirdness,
  this one shared with [Picoparsec](http://hackage.haskell.org/package/picoparsec),
  is that the the\nparser is generic in its input stream type, but this type is parameterized
  in a holistic way. There is no separate token\ntype. Primitive parsers that need
  to peek into the input require its type to be an instance of a monoid subclass,
  from\nthe [monoid-subclasses](http://hackage.haskell.org/package/monoid-subclasses)
  package.\n\nIn Parsec:\n\n```haskell\n    string :: Stream s m Char => String ->
  ParsecT s u m String\n    char :: Stream s m Char => Char -> ParsecT s u m Char\n
  \   anyToken :: (Stream s m t, Show t) => ParsecT s u m t\n```\n\nIn Attoparsec:\n\n```haskell\n
  \   string :: ByteString -> Parser ByteString\n    word8 :: Word8 -> Parser Word8\n
  \   anyWord8 :: Parser Word8\n```\n\nIn incremental-parser and Picoparsec:\n\n```haskell\n
  \   string :: (LeftCancellativeMonoid s, MonoidNull s) => s -> Parser s s\n    token
  :: (Eq s, FactorialMonoid s) => s -> Parser s s\n    anyToken :: FactorialMonoid
  s => Parser s s\n```\n\n#### Two `Alternative` alternatives\n\nFinally, the library
  being implemented on the basis of Brzozowski derivatives, it can provide both the
  symmetric and the\nleft-biased choice, `<||>` and `<<|>`. This is the same design
  choice made by\n[`Text.ParserCombinators.ReadP`](http://hackage.haskell.org/package/base/docs/Text-ParserCombinators-ReadP.html#g:2)
  and\n[uu-parsinglib](http://hackage.haskell.org/package/uu-parsinglib). Parsec and
  its progeny on the other hand provide only\nthe faster left-biased choice, at some
  cost to the expressiveness of the combinator language. The standard `<|>`\noperator
  from the `Alternative` class acts as one or the other of the above, depending on
  whether the first type\nparameter of `Parser` is `Symmetric` or `LeftBiasedLocal`.\n"
license-name: GPL-3
