homepage: https://github.com/achirkin/interprocess
changelog-type: ''
hash: f6e1a666d0d743a5d5faa302b1f38a68b5ce661de7bb3988377064f46a940d9a
test-bench-deps:
  interprocess: -any
  base: -any
  typed-process: ! '>=0.2'
maintainer: chirkin@arch.ethz.ch
synopsis: Shared memory and control structures for IPC
changelog: ''
basic-deps:
  interprocess: -any
  base: ! '>=4.8 && <5'
  typed-process: ! '>=0.2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
author: Artem Chirkin
latest: 0.2.0.1
description-type: markdown
description: ! "# interprocess\n[![Hackage](https://img.shields.io/hackage/v/interprocess.svg)](https://hackage.haskell.org/package/interprocess)\n[![Build
  Status](https://secure.travis-ci.org/achirkin/interprocess.svg)](http://travis-ci.org/achirkin/interprocess)\n\nPlatform-independent
  interprocess communication.\n\nThis project provides a shared memory allocator and
  some synchronization primitives\nfor Win32 and POSIX systems.\n\n\n#### SharedObjectName\n\n`Foreign.SharedObjectName.SOName`
  is a globally unique name that can be used to lookup\nshared objects across processes.\nInternally,
  it is a `ForeignPtr` to a C-string with a fixed length.\nThe library provides `Eq`,
  `Show`, and `Storable` instances and helper functions\nto transfer `SOName` via
  pipes or by any other means.\n\n#### SharedPtr\n\n`Foreign.SharedPtr` provides a
  custom shared memory `Allocator` and a bunch of functions\nsimilar to vanilla `Ptr`.\nMemory
  allocation is implemented using POSIX mmap and Windows CreateFileMapping APIs.\nYou
  can create as many allocators as you want (as your RAM can afford) and\nconcurrently
  malloc and free memory in different processes using them.\nAll functions of that
  module are wrappers on C functions from `Foreign.SharedPtr.C`.\nThe latter can be
  used to pass the allocation functions as pointers\n(those C functions do not need
  Haskell runtime, thus can be used in unsafe callbacks).\n\n#### Control.Concurrent.Process\n\n`Control.Concurrent.Process.*`
  provide a few synchronization primitives trying\nto mirror the interface of `Control.Concurrent.*`
  modules for the IPC case.\nThe behavior is slightly different due to IPC limitations.\nInternally,
  these use semaphore, mutexes, condition variables, and events\nfrom Win32/POSIX
  in a platform-dependent way.\n\n### TODO\n\n  * [x] `Foreign.SharedPtr` -- `malloc`,
  `realloc` and `free` in the shared memory region\n        that can be accessed by
  multiple processes.\n  * [x] Semaphores\n  * [x] Mutable variables (`MVar`-like)
  via `Storable` instance.\n  * [ ] `Control.Concurrent.Chan`-like channels\n  * [
  ] More tests\n  * [ ] Ensure Win32 waiting on events interruptible\n        (Custom
  interrupt signal handler + WaitForMultipleObjects)\n  * [ ] Benchmarks\n\n### Think
  about it\n\nThere is an untested idea to address GHC stop-the-world GC problem:\n\n
  \ 1. Create several instances of your program in different isolated processes\n
  \    using e.g. `typed-process` library.\n  2. Establish shared memory and semaphore
  usage via this library\n  3. Garbage collection events in one process do not affect
  another one at all.\n     Profit!\n\nThe question is if the cost of IPC synchronization
  is lower than the added\ncost of collecting garbage in all parallel threads.\n"
license-name: BSD-3-Clause
