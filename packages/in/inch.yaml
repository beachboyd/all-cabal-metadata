homepage: https://github.com/adamgundry/inch/
changelog-type: ''
hash: 0b3d9af53d85e1c6a0826604339c3af610e4ef3d38796e1431bdd3ef76840dbc
test-bench-deps:
  base: ==4.*
  IndentParser: ! '>0.2 && <0.3'
  filepath: ! '>1.2 && <1.4'
  parsec: ! '>3.1 && <3.5'
  presburger: ==0.4.*
  containers: ! '>0.4 && <0.6'
  mtl: ! '>2.0 && <2.3'
  pretty: ! '>=1.0 && <2'
  directory: ! '>1.1 && <1.3'
maintainer: Adam Gundry <adam.gundry@strath.ac.uk>
synopsis: A type-checker for Haskell with integer constraints
changelog: ''
basic-deps:
  base: ==4.*
  IndentParser: ! '>0.2 && <0.3'
  filepath: ! '>1.2 && <1.4'
  parsec: ! '>3.1 && <3.5'
  presburger: ==0.4.*
  containers: ! '>0.4 && <0.6'
  mtl: ! '>2.0 && <2.3'
  pretty: ! '>=1.0 && <2'
all-versions:
- 0.1.0
- 0.2.0
author: Adam Gundry <adam.gundry@strath.ac.uk>
latest: 0.2.0
description-type: markdown
description: ! "inch\n====\n\n**Inch** is a type-checker for a subset of Haskell (plus
  some GHC extensions) with the addition of integer constraints. After successfully
  type-checking a source file, it outputs an operationally equivalent version with
  the type-level integers erased, so it can be used as a preprocessor in order to
  compile programs.\n\nThis is a very rough and ready prototype. Many Haskell features
  are missing or poorly implemented.\n\n\nInstallation\n------------\n\n    cabal
  install inch\n\n\nFeatures\n--------\n\n* A new kind `Integer` for type-level integers,
  together with a synonym `Nat` for integers constrained to be nonnegative\n\n* Type-level
  addition, subtraction, multiplication and exponentiation operations (plus a few
  more)\n\n* Contexts contain numeric equality and inequality constraints\n\n* Π-types
  (dependent functions from integers) inspired by the SHE preprocessor, which erase
  to the corresponding non-dependent functions\n\n* Guards can test numeric constraints
  and make this information available for type-checking (as in `plan` below)\n\n*
  Powerful type inference using a novel approach to equational unification (though
  type signatures are needed for GADT pattern matches and polymorphic recursion)\n\n\nExample\n-------\n\nThe
  following program defines a type of vectors (lists indexed by their length) and
  some functions using them. \n\n    {-# OPTIONS_GHC -F -pgmF inch #-}\n    {-# LANGUAGE
  RankNTypes, GADTs, KindSignatures, ScopedTypeVariables, NPlusKPatterns #-}\n\n    data
  Vec :: * -> Nat -> * where\n        VNil  :: Vec a 0\n        VCons :: forall a
  (n :: Nat) . a -> Vec a n -> Vec a (n+1)\n      deriving Show\n\n    vreverse ::
  forall (n :: Nat) a . Vec a n -> Vec a n\n    vreverse xs = vrevapp xs VNil\n      where\n
  \       vrevapp :: forall (m n :: Nat) a . Vec a m -> Vec a n -> Vec a (m+n)\n        vrevapp
  VNil         ys = ys\n        vrevapp (VCons x xs) ys = vrevapp xs (VCons x ys)\n\n
  \   vec :: pi (n :: Nat) . a -> Vec a n\n    vec {0}   a = VNil\n    vec {n+1} a
  = VCons a (vec {n} a)\n\n    vlookup :: forall (n :: Nat) a . pi (m :: Nat) . m
  < n => Vec a n -> a\n    vlookup {0}   (VCons x _)  = x\n    vlookup {k+1} (VCons
  _ xs) = vlookup {k} xs\n\n    plan :: pi (n :: Nat) . Vec Integer n\n    plan {0}
  \          = VNil\n    plan {m} | {m > 0} = VCons m (plan {m-1})\n\nAfter type-checking
  and preprocecessing with `inch`, the resulting file is as follows.\n\n    {-# LANGUAGE
  RankNTypes, GADTs, KindSignatures, ScopedTypeVariables, NPlusKPatterns #-}\n\n    data
  Vec :: * -> * where\n        VNil  :: Vec a\n        VCons :: a -> Vec a -> Vec
  a\n      deriving Show\n\n    vreverse :: Vec a -> Vec a\n    vreverse xs = vrevapp
  xs VNil\n      where\n        vrevapp :: Vec a -> Vec a -> Vec a\n        vrevapp
  VNil         ys = ys\n        vrevapp (VCons x xs) ys = vrevapp xs (VCons x ys)\n\n
  \   vec :: Integer -> a -> Vec a n\n    vec 0     a = VNil\n    vec (n+1) a = VCons
  a (vec n a)\n\n    vlookup :: Integer -> Vec a n -> a\n    vlookup 0     (VCons
  x _)  = x\n    vlookup (k+1) (VCons _ xs) = vlookup k xs\n\n    plan :: Integer
  -> Vec Integer\n    plan 0         = VNil\n    plan m | m > 0 = VCons m (plan (m-1))\n\nFor
  more examples, look in the [examples directory](https://github.com/adamgundry/inch/tree/master/examples)
  of the source distribution. These include:\n\n* More fun with vectors\n\n* Merge
  sort that maintains length and ordering invariants\n\n* Red-black tree insertion
  and deletion with ordering, colour and black height invariants guaranteed by types\n\n*
  Time complexity annotations showing that red-black tree insert/delete are linear
  in the black height, plus a few other examples\n\n* Units of measure with good type
  inference properties and (morally) no runtime overhead\n\n\nKnown limitations\n-----------------\n\n*
  Lots of Haskell features are unsupported, notably list comprehensions, `do` notation,
  `if` expressions, newtypes, field labels, ...\n\n* The parser is somewhat idiosyncratic;
  look at the examples to figure out what syntax it accepts. Data types must be defined
  in GADT syntax, using a kind signature rather than a list of variables. Parsing
  of infix operators is almost but not entirely nonexistent, so they must usually
  be written prefix.\n\n* Modules are poorly supported. A `.inch` file is generated
  when preprocessing a module, listing the identifiers it defines, and this file is
  looked up when the module is imported. Because preprocessing happens in reverse
  dependency order, manual intervention may be required to generate `.inch` files
  before they are needed (by loading dependencies in GHCi). Qualified names are not
  supported, so there will be problems if multiple modules bring the same name into
  scope.\n\n* Type classes are not completely implemented: ambiguity checking and
  defaulting are lacking, superclasses are not taken into consideration when solving
  constraints, and the constraint solver is untested.\n\n* No kind inference is performed,
  so type variables must be annotated with their kind if it is not `*`. This means
  explicit `forall`-bindings must be used in some type signatures. Type variables
  in instance declarations cannot be annotated, so they may only have kind `*` (at
  the moment).\n\n* Only GADTs involving type-level numeric equalities are supported,
  not more general equations between types.\n\n* Support for higher-rank types is
  limited.\n\n\n\nOutstanding design issues\n-------------------------\n\n* Metavariables
  are solved using equational unification in the abelian group of integers with addition,
  which works well, but a better story about ambiguity is needed.\n\n* Constraint
  solving is based on normalisation and a solver for Presburger arithmetic, so only
  linear constraints are guaranteed to be solved. Hard constraints can be dealt with
  by the user invoking higher-rank functions that add facts to the context. A better
  characterisation of solvable constraints would be nice.\n\n* Exponentiation by a
  negative integer is possible but makes no sense.\n\n* At the moment, `Nat` is just
  `Integer` (with a positivity constraint added when it is used in a type signature).
  Kind polymorphism and subkinding might allow more precise kinds to be given to arithmetic
  operations, including a correct kind for exponentiation. \n\n* `n+k`-patterns provide
  quite a nice syntax for defining dependent numeric functions, but they have been
  deprecated and removed from Haskell 2010, so perhaps an alternative should be found.\n\n*
  Erasure for type classes involving numeric kinds is not yet properly specified.\n\n\nRelated
  work\n------------\n\nIavor Diatchki is working on [TypeNats](http://hackage.haskell.org/trac/ghc/wiki/TypeNats),
  an extension to GHC that aims to support type-level natural numbers. He also implemented
  the [presburger](http://github.com/yav/presburger) package, which `inch` uses for
  constraint solving.\n\nConor McBride's [Strathclyde Haskell Enhancement](http://personal.cis.strath.ac.uk/~conor/pub/she/)
  is a preprocessor that supports Π-types and allows lifting algebraic data types
  (but not numeric types) to kinds. SHE inspired the braces syntax used in `inch`.
  These ideas (and more, including kind polymorphism) are being implemented in GHC:
  see [Giving Haskell a Promotion](http://research.microsoft.com/en-us/people/dimitris/fc-kind-poly.pdf)
  by Brent Yorgey, Stephanie Weirich, Julien Cretin, Simon Peyton Jones and Dimitrios
  Vytiniotis. \n\nMax Bolingbroke has implemented the new [Constraint kind](http://blog.omega-prime.co.uk/?p=127)
  in GHC. This kind is supported by `inch` but not erased, so it will only work if
  GHC support is present.\n\nThis work is inspired by Hongwei Xi's [Dependent ML](http://www.cs.bu.edu/~hwxi/DML/DML.html)
  and its successor [ATS](http://www.ats-lang.org/), which support type-level Presburger
  arithmetic.\n\n\nContact\n-------\n\nAdam Gundry, adam.gundry@strath.ac.uk"
license-name: BSD-3-Clause
