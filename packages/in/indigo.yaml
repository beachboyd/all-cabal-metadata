homepage: https://indigo-lang.gitlab.io/
changelog-type: markdown
hash: 266aaecbc3a93cce7a9ea9c88fe7ccdfd5e5d4d5414d8126b1c27017e4cebca7
test-bench-deps:
  fmt: -any
  morley-prelude: -any
  base: '>=4.7 && <5'
  tasty-hedgehog: -any
  morley: -any
  with-utf8: -any
  hedgehog: -any
  cleveland: -any
  HUnit: -any
  containers: -any
  singletons: -any
  lorentz: -any
  indigo: -any
  tasty: -any
  tasty-hunit-compat: -any
  hspec-expectations: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Convenient imperative eDSL over Lorentz.
changelog: |
  Unreleased
  ==========
  <!-- Append new entries here -->

  0.3.0
  ==========
  * [!583](https://gitlab.com/morley-framework/morley/-/merge_requests/583)
    Add an intermediate compilation representation for optimization.
    + `fail`-like statements return `RetVars r` instead of `r`.
  * [!534](https://gitlab.com/morley-framework/morley/-/merge_requests/534)
    Add a tutorial on how to setup an Indigo project using Indigo CLI.
    + Bump the dependencies version of the boilerplate generated by `indigo new`
    to the latest.

  * [!566](https://gitlab.com/morley-framework/morley/-/merge_requests/566)
    Add Indigo CLI installation script.
    + Mention how Indigo CLI can be installed in the Indigo documentation.

  0.2.2
  =====
  * [!544](https://gitlab.com/morley-framework/morley/-/merge_requests/544)
    Add `indigo` executable which improves the development of Indigo projects.
    + Create boilerplate project via `new`.
    + Wrap around stack commands: `build`, `test`, and `repl`.
    + Run `ContractRegistry` commands via `run`.

  0.2.1
  =====
  * [!570](https://gitlab.com/morley-framework/morley/-/merge_requests/570)
    Added `coerce` and `forcedCoerce` to convert between expressions of types that
    have the same Michelson representation.
  * [!558](https://gitlab.com/morley-framework/morley/-/merge_requests/558)
    Added `wrap` and `unwrap`, to generate from and extract to, values given a
    constructor with a single fields for a sum type.
  * [!538](https://gitlab.com/morley-framework/morley/-/merge_requests/538)
    Add the `showcase` section presenting a list of public smart contracts written
    in Indigo.
  * [!533](https://gitlab.com/morley-framework/morley/-/merge_requests/533)
    Add a tutorial on how to add documentation to a contract.
    + Create helper functions: `saveDocumentation` and `printDocumentation`
      which can generate the documentation via the REPL.
    + Add short-handed doc item statements such as: `anchor`, `description`,
      and `example`.

  0.2.0
  =====
  * [!542](https://gitlab.com/morley-framework/morley/-/merge_requests/542)
    Use `#=` as a synonym for `//->`.

  0.1.0.0
  =======

  Initial release.
basic-deps:
  shelly: -any
  string-interpolate: -any
  reflection: -any
  morley-prelude: -any
  base: '>=4.7 && <5'
  text: -any
  morley: -any
  summoner: -any
  with-utf8: -any
  megaparsec: '>=7.0.0'
  process: -any
  constraints: -any
  containers: -any
  singletons: -any
  lorentz: -any
  vinyl: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
author: Serokell, Tocqueville Group
latest: 0.3.0
description-type: markdown
description: |
  # Indigo eDSL

  [![Hackage](https://img.shields.io/hackage/v/indigo.svg)](https://hackage.haskell.org/package/indigo)

  Indigo eDSL is a high level language for Michelson contract development.
  It is meant first and foremost to free you from the burden of manual stack
  management and supports common features of imperative languages.

  It is built on top of `Lorentz`, which in turn is built on top of `Morley`, a
  dialect that is a superset of vanilla Michelson.
  If you are interested more in the relationships between these projects you can
  start by taking a look at [the repo on GitLab](https://gitlab.com/morley-framework/morley).

  ## Overall idea

  Michelson contracts are stack-based and often follow the repetitive pattern of
  copying the required values on top of the stack to apply an instruction to them.
  Indigo can associate variables to values in the stack and it's able to refer to
  them in order to handle this pattern automatically.

  In addition to this it can override existing variables with new values, allowing
  the manipulation of the stack to be automatic.

  Leveraging this ability, it also supports features such as: imperative statements
  (`if`, `while`, ...), expressions, operators (`+`, `||`, `==`, ...), scoped
  functions definition and errors.

  Indigo uses Morley to map values from Michelson to Haskell and to compile to
  Michelson code (or to any of the other projects in the chain mentioned above).

  ## Tutorial and documentation

  Indigo has a tutorial that you can find at [indigo-lang.gitlab.io](https://indigo-lang.gitlab.io/).

  In addition, as for the other Morley projects, it has [Haddock documentation](https://hackage.haskell.org/package/indigo).
license-name: MIT
