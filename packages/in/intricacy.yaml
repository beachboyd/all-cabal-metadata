homepage: http://mbays.freeshell.org/intricacy
changelog-type: ''
hash: 6fdad4ec181a84ed90efa04c0d5a63657a897ac518b82ec84b819fa6d00a848d
test-bench-deps: {}
maintainer: mbays@sdf.org
synopsis: A game of competitive puzzle-design
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  SDL-gfx: '>=0.6 && <0.8'
  hscurses: ==1.4.*
  stm: '>=2.1 && <2.6'
  base: '>=4.3 && <5'
  time: '>=1.2 && <1.10'
  crypto-pubkey-types: '>=0.2 && <0.5'
  filepath: '>=1.0 && <1.5'
  SDL: '>=0.6.5 && <0.7'
  crypto-api: '>=0.10 && <0.14'
  array: '>=0.3 && <0.6'
  containers: '>=0.4 && <0.7'
  binary: '>=0.5 && <0.9'
  SDL-mixer: ==0.6.*
  mtl: '>=2.1.3.1 && <2.3'
  network-fancy: '>=0.1.5 && <0.3'
  RSA: '>=2.0 && <2.5'
  SDL-ttf: ==0.6.*
  transformers: '>=0.3.0.0 && <0.6'
  random: '>=1.0 && <1.2'
  safe: '>=0.2 && <0.4'
  vector: '>=0.9 && <0.13'
  directory: '>=1.0 && <1.4'
  cryptohash: '>=0.8'
all-versions:
- '0.3'
- 0.3.1
- 0.3.3
- 0.3.8
- 0.4.1
- 0.4.3
- '0.5'
- 0.5.5
- 0.5.7
- 0.5.7.1
- 0.5.7.2
- '0.6'
- 0.6.1
- 0.6.2
- '0.7'
- 0.7.0.1
- 0.7.1
- 0.7.1.1
- 0.7.2
- 0.7.2.1
author: Martin Bays
latest: 0.7.2.1
description-type: text
description: "Intricacy\n=========\nA game of competitive puzzle-design.\n\nhttp://mbays.freeshell.org/intricacy/\n\n\nPlaying\n=======\nPress
  'T' on the starting screen to play the tutorials, which should lead you\nto discover
  the main game mechanics. When you've finished or had enough of the\ntutorials, select
  a codename with 'C' and register it with 'R'. The rest you\ncan hopefully figure
  out, but see below if you'd rather read about it.\n\n\nConfiguration\n=============\nYou
  can change keybindings in SDL mode by right-clicking on the corresponding\nbutton
  and pressing a key.\n\nThe buttons in the top right when solving/editing locks in
  SDL mode are as\nfollows:\n    * The three hexes toggles between two modes for colouring
  pieces; in one\n\tmode (three yellow hexes), the colours are determined by the nature
  of\n\tthe pieces; in the other mode, adjacent pieces always get different\n\tcolours.\n
  \   * The lone hex with optional arrow toggles \"blockage annotations\". These\n\tare
  there to help you figure out what's going on when you can't\n\tunderstand why a
  piece refuses to move. An orange arrow indicates a\n\tblocked force, a purple arrow
  indicates a force which blocked another\n\tforce.\n    * The soundwave icon toggles
  sound.\n    * The narrow hex enscribed within a wide hex toggles between fullscreen\n\tand
  windowed mode. The resolution used when switching to fullscreen \n\tis that of the
  window prior to fullscreening.\n\nConfig files are saved in ~/.intricacy/ on unixoids,
  or something like\n\"...\\Application Data\\intricacy\\\" on windows. In particular,
  the locks you\ncreate in the lock editor are saved in there (and you can organise
  them into\ndirectories by including (back)slashs in the lock name). You can edit
  them in\na text editor if you want - see AsciiLock.hs for what the characters mean.\n\n\nRough
  description of the game mechanics\n=======================================\n* Locks
  consist of blocks, pivots and balls. Blocks can be connected to other\n    blocks
  by springs. Pivots have arms. When picking a lock, you control two\n    tools -
  a hook, which acts as a mobile one-armed pivot, and a wrench,\n    which acts as
  a mobile block with momentum.\n* To open a lock, the \"bolthole\" (the area in the
  top-right) must be empty.\n* Each turn, the tools push and rotate according to the
  player's commands, and\n    then each spring which is compressed or extended beyond
  its natural length\n    pushes/pulls on the block at its end.\n* If two forces try
  to move a piece in two different directions, or try to\n    move two pieces into
  the same hex, one or both is blocked.\n* If a pivot/hook is trying to turn and there's
  a piece in the way of one of\n    its arms, it will at first try to push the piece
  away - but if that force\n    is blocked, it will try instead to pull the piece
  round with the arm as it\n    turns.\n* If two springs are trying to push two blocks
  into the same hex, they will\n    generally both be blocked. However, if one of
  the forces is also pushing\n    against a fixed piece such as a tool, it won't block
  the other force.\n\n\nFull details of the metagame mechanics\n======================================\n(Where
  by the 'game' I mean the lock-picking bit, and by the 'metagame' I mean\nthe bit
  with the 3-letter codenames and the three lock slots and notes and so\non.)\n\nA
  player accesses a lock slot when one of the following holds\n    (i) the player
  has read three notes on the lock in the slot;\n    (ii) the player has solved the
  lock in the slot, and declared the solution;\n    (iii) there's no lock in the slot,
  and the player has accessed all the slots\n\twhich do have locks in them.\n\nScoring
  is always relative - each player has a score relative to each other\nplayer. That
  score is the number of the second player's lock slots to which\nthe first player
  has access, minus the number of the first player's lock slots\nto which the second
  player has access; but a point is not awarded for\ncase (ii) if the owner of the
  lock has read the note.\n\nA player reads every note in every lock the player accesses.
  When a lock is\nreplaced ('retired'), each note secured by the lock becomes 'public',
  and is\nread by every player.\n\nNote this means that once three notes on a lock
  become public, every player\naccesses the lock. The lock is then 'public' (and its
  owner should replace\nit!).\n\nTo declare a solution, you must secure a note on
  it behind a non-public lock\nin one of your three lock slots. Once the note is placed,
  it can't be moved.\n\n\nFull details of the game mechanics\n==================================\nSprings
  are directed; one of the blocks it is connected to is the 'root', the\nother the
  'end'. A block is stationary if it is not the end of any spring. The\ndirected graph
  whose nodes are the blocks and whose edges are the springs is\nrequired to be acyclic.
  A spring may also be rooted in a pivot.\n\nI will now attempt to describe in full
  excruciating detail the game physics,\ni.e. the algorithm used to determine what
  happens on a turn. You shouldn't\nneed to read this to play the game! Experimenting
  and turning on blockage\nannotations should be enough.\n\nThe following description
  corresponds to the code in Physics.hs. The algorithm\nis the result of an extended
  process of experiment and iterated\nsimplification; see notes/game in the source
  distribution if you're perverse\nenough to want to read a scattered stream-of-consciousness
  account of the\nprocess.\n\nEach turn is separated into two phases. In the first
  phase, the forces arising\nfrom the player's move are 'resolved', possibly resulting
  in some movement. In\nthe second phase, forces arising from stretched or compressed
  springs are\nresolved, possibly resulting in some movement.\n\nHere we abuse physics
  terminology, and use the term 'force' to refer to either\na directional force in
  the usual sense, which we call a 'push', or a\nrotational force, which we call a
  'torque'. A force is always on a piece, in\nsome direction. Only the obvious six
  hex directions and the two obvious\nrotational directions occur; the magnitude is
  always 1. \n\nPlayer moves result in forces on the tools in the obvious way. A wrench
  which\nis moving gets a push in that direction each turn (sorry, Newton!). A spring\nwhich
  is not at its relaxed length results in a push on the end piece.\n\nTo _resolve_
  these initial forces:\n    * each initial force is 'propagated to a force group'\n
  \   * if a group is 'inconsistent' with another group: if one of the group is\n\t'dominated'
  by the other, it is 'blocked'; else both are blocked\n    * each force in each unblocked
  force group is 'applied'\n\nTo _apply_ a push: move the piece in the given direction.\nTo
  _apply_ a torque: rotate the piece in the given direction.\n\nTo _propagate_ a force:\n
  \   * If applying the force would result in an overlap with another piece,\n\tpush
  that piece - but if it's an arm, twist the pivot instead when\n\tthat makes sense.\n
  \   * If the force is a torque and an arm is pushing on another piece, we have\n\ta
  special rule: if the obvious push ends up propagating to a resisted\n\tforce (see
  below), then it is replaced with a 'clawing' push. e.g. in\n\tthe following situation:\n\t
  \   \\ O #\n\t     o\n\tif the pivot is twisted clockwise, the ball will first be
  pushed east,\n\tbut when that force propagates to a push on the stationary block
  to\n\tits east which is resisted, processing will back up and a push on the\n\tball
  southeast will be tried instead.\n    * A spring connecting two blocks transmits
  a push on one block to the\n\tother unless the direction is such that the push is
  tending to\n\tcompress/extend the spring and the spring isn't already fully\n\tcompressed/extended.\n\nA
  force is _resisted_ if it is a push on a pivot or on a block which isn't the\n    end
  of a spring, or it's a torque on a block, or it's a force on a hook\n    which isn't
  already getting that force this phase as the result of a\n    player move, or it's
  a force on a wrench which isn't a push in the\n    direction it's already moving.\n\nTo
  _propagate an initial force to a force group_:\n    * Propagate the force as above,
  then recursively propagate the resulting\n\tforces, checking for resistance as we
  go. The force group consists of\n\tall the resulting propagated forces.\n    * On
  resistance: back up to try clawing as described above if appropriate,\n\telse consider
  the whole force group resisted - so the resulting force\n\tgroup is empty.\n\nTwo
  forces are _inconsistent_ when\n    * they act on the same piece in different directions,
  or\n    * applying both at once results in overlapping pieces.\n\nTwo force groups
  are _inconsistent_ iff there is some force from the first\n    which is inconsistent
  with some force from the second.\n\nA force group _dominates_ another iff their
  initial forces are spring forces,\n    and the root of the first spring is an ancestor
  of the root of the second\n    spring, where an ancestor of a block B is recursively
  defined to be a block\n    which is the root of a spring which ends at B, or an
  ancestor of such a\n    block.\n\n-- mbays@sdf.org 2013\n"
license-name: GPL-3.0-only
