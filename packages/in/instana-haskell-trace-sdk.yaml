homepage: https://www.instana.com/
changelog-type: markdown
hash: e159e49a8b348f4432ed0b71bab5a09fc88d0205c655a201156d4e5ec9f00ce0
test-bench-deps:
  http-client: -any
  exceptions: -any
  bytestring: -any
  ekg-core: -any
  instana-haskell-trace-sdk: -any
  unix: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  retry: -any
  process: -any
  HUnit: -any
  hslogger: -any
  regex-tdfa: -any
  regex-base: -any
  random: -any
  scientific: -any
  http-types: -any
  aeson: -any
  aeson-extra: -any
  directory: -any
maintainer: bastian.krol@instana.com
synopsis: SDK for adding custom Instana tracing support to Haskell applications.
changelog: |
  # Changelog for instana-haskell-sdk

  ## Unreleased changes
basic-deps:
  warp: -any
  http-client: -any
  exceptions: -any
  bytestring: -any
  ekg-core: -any
  wai: -any
  sysinfo: -any
  instana-haskell-trace-sdk: -any
  unix: -any
  stm: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  retry: -any
  process: -any
  network: -any
  servant-server: -any
  servant: -any
  containers: -any
  binary: -any
  hslogger: -any
  regex-tdfa: -any
  http-client-tls: -any
  regex-base: -any
  transformers: -any
  random: -any
  scientific: -any
  http-types: -any
  aeson: -any
  aeson-extra: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Bastian Krol
latest: 0.2.0.0
description-type: markdown
description: "# Instana Haskell Trace SDK &nbsp; [![Build Status](https://travis-ci.org/instana/haskell-trace-sdk.svg?branch=master)](https://travis-ci.org/instana/haskell-trace-sdk)\n\nMonitor
  your Haskell application with [Instana](https://www.instana.com/)! \U0001F389\n\nDisclaimer\n----------\n\nThe
  Instana Haskell Trace SDK is a labor of love from some of our engineers and work
  on it is done in their spare time. Haskell is currently not a platform that we officialy
  support. The experience may differ from other programming languages and platforms
  that Instana actively supports (such as Java, .NET, Node.js, Python, Ruby, Go, PHP,
  ...). That said, the SDK is a fully functional piece of software, so don't let this
  disclaimer discourage you from using it. If you use Instana or consider using it
  and Haskell support is crucial for you, make sure to give us a ping and let's talk
  about it.\n\nWhat The Haskell Trace SDK Is And What It Is Not\n------------------------------------------------\n\nThe
  Instana Haskell Trace SDK does not support automatic instrumentation/tracing in
  the way we support it in most other languages. Instead, the SDK enables you to create
  spans manually, much like the [Instana Trace SDK for Java](https://docs.instana.io/core_concepts/tracing/java_trace_sdk/)
  does. Besides offering a convenient API to create spans, the Haskell Trace SDK also
  takes care of establishing a connection to the Instana Agent and sending spans to
  the agent in an efficient way, that does not impede the performance of your production
  code. Last but not least, it collects runtime metrics and reports them to Instana.\n\nInstallation\n------------\n\nTo
  use the Instana Haskell Trace SDK in your application, add `instana-haskell-trace-sdk`
  to your dependencies (for example to the `build-depends` section of your cabal file).
  If you are using [stack](https://docs.haskellstack.org/en/stable/README/) you might
  need to add the SDK (with the version number you want to use) to the `extra-deps`
  section in your `stack.yaml` file:\n\n```\nextra-deps:\n- instana-haskell-trace-sdk-0.2.0.0\n```\n\nUsage\n-----\n\n###
  Initialization\n\nBefore using the SDK, you need to initialize it once, usually
  during application startup.\n\n```\nimport qualified Instana.SDK.SDK as InstanaSDK\n\nmain
  :: IO ()\nmain = do\n  -- ... initialize things ...\n\n  -- initialize Instana\n
  \ instana <- InstanaSDK.initInstana\n\n  -- ... initialize more things\n```\n\nThe
  value `instana :: Instana.SDK.InstanaContext` that is returned by `InstanaSDK.initInstana`
  is required for all further calls, that is, for creating spans that will be send
  to the agent. The SDK will try to connect to an agent (asynchronous, in a a separate
  thread) as soon as it receives the `initInstana` call.\n\nThe SDK can be configured
  via environment variables or directly in the code by passing configuration parameters
  to the initialization function, or both.\n\nIf you would like to pass configuration
  parameters programatically, use `initConfiguredInstana` instead of `initInstana`:\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n\n  -- Example
  snippet for using the Instana SDK and providing a configuration\n  -- (agent host,
  port, ...) directly in code. You only need to specify the\n  -- configuration values
  you are interested in and can omit everything else\n  -- (see https://www.yesodweb.com/book/settings-types).\n
  \ let\n    config =\n      InstanaSDK.defaultConfig\n        { InstanaSDK.agentHost
  = Just \"127.0.0.1\"\n        , InstanaSDK.agentPort = Just 42699\n        , InstanaSDK.forceTransmissionAfter
  = Just 1000\n        , InstanaSDK.forceTransmissionStartingAt = Just 500\n        ,
  InstanaSDK.maxBufferedSpans = Just 1000\n        }\n  instana <- InstanaSDK.initConfiguredInstana
  config\n```\n\nFor configuration parameters that are omitted when creating the config
  record or are set to `Nothing`, the SDK will fall back to environment variables
  (see below) and then to default values.\n\nThere are also [bracket-style](https://wiki.haskell.org/Bracket_pattern)
  variants of the initialization function, called `withInstana` and `withConfiguredInstana`:\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n  InstanaSDK.withInstana
  runApp\n\nrunApp :: InstanaContext -> IO ()\nrunApp instana = do\n  -- do your thing
  here :-)\n```\n\nor, with bracket style and a configuration record:\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n  let\n    config
  =\n      InstanaSDK.defaultConfig\n        { InstanaSDK.agentHost = Just \"127.0.0.1\"\n
  \       , InstanaSDK.agentPort = Just 42699\n        , InstanaSDK.forceTransmissionAfter
  = Just 1000\n        , InstanaSDK.forceTransmissionStartingAt = Just 500\n        ,
  InstanaSDK.maxBufferedSpans = Just 1000\n        }\n\n  InstanaSDK.withConfiguredInstana
  config runApp\n\nrunApp :: InstanaContext -> IO ()\nrunApp instana = do\n  -- do
  your thing here :-)\n```\n\n### Creating Spans\n\n#### Trace HTTP Entries Automatically\n\nYou
  can let the SDK automatically create entry spans for all incoming HTTP requests
  in a WAI application by using it as a WAI middleware plug-in. Note that exit spans
  still need to be created manually via the withExit or startExit/stopExit functions
  (see below).\n\n```\nimport qualified Instana.Wai.Middleware.Entry as InstanaWaiMiddleware\n\nmain
  = do\n  Warp.run 3000 $ InstanaWaiMiddleware.traceHttpEntries instana $ app\n```\n\n####
  Bracket Style (High Level API)\n\nAll functions starting with `with` accept (among
  other parameters) an IO action. The SDK will start a span before, then execute the
  given IO action and complete the span afterwards. Using this style is recommended
  over the low level API that requires you to start and complete spans yourself.\n\n*
  `withRootEntry`: Creates an entry span that is the root of a trace (it has no parent
  span).\n* `withEntry`: Creates an entry span that has a parent span.\n* `withHttpEntry`:
  A convenience function that examines an HTTP request for Instana tracing headers
  and creates an entry span.\n* `withExit`: Creates an exit span. This can only be
  called inside a `withRootEntry` or an `withEntry` call, as an exit span needs an
  entry span as its parent.\n* `withHttpExit`: Creates an exit span for a given HTTP
  client request.\n\n#### Low Level API/Explicit Start And Complete\n\n* `startRootEntry`:
  Starts an entry span that is the beginning of a trace (has no parent span). You
  will need to call `completeEntry` at some point.\n* `startEntry`: Starts an entry
  span. You will need to call `completeEntry` at some point.\n* `startHttpEntry`:
  Starts an entry span for an incoming HTTP request.\n* `startExit`: Starts an exit
  span. You need to call `completeExit`/`completeExitWithData` at some point with
  the partial exit span value that is returned by this function.\n* `startHttpExit`:
  Starts an exit span for an outgoing HTTP request.\n* `completeEntry`: Finalizes
  an entry span. This will put the span into the SDK's span buffer for transmission
  to the Instana agent.\n* `completeExit`: Finalizes an exit span. This will put the
  span into the SDK's span buffer for transmission to the Instana agent.\n\n### Configuration
  Via Environment Variables\n\nInstead of configuring the SDK programatically, as
  seen above, it can also be configured via environment variables:\n\n* `INSTANA_AGENT_HOST`:
  The IP or the host of the Instana agent to connect to. Default: 127.0.0.1.\n* `INSTANA_AGENT_PORT`:
  The port of the Instana agent to connect to. Default: 42699.\n* `INSTANA_AGENT_NAME`:
  When establishing a connection to the Instana agent, the SDK validates the Instana
  agent's `Server` HTTP response header. Should you have changed the Server name on
  the agent side, you can use this environment variable to provide the name to match
  that header against.\n* `INSTANA_FORCE_TRANSMISSION_STARTING_AFTER`: Spans are usually
  buffered before being transmitted to the agent. This setting forces the transmission
  of all buffered spans after the given amount of milliseconds. Default: 1000.\n*
  `INSTANA_FORCE_TRANSMISSION_STARTING_AT`: This setting forces the transmission of
  all buffered spans when the given number of spans has been buffered.\n* `INSTANA_MAX_BUFFERED_SPANS`:
  Limits the number of spans to buffer. When the limit is reached, spans will be dropped.
  This setting is a safe guard against memory leaks from buffering excessive amounts
  of spans. It must be larger than `INSTANA_FORCE_TRANSMISSION_STARTING_AT`.\n* `INSTANA_LOG_LEVEL`:
  See section \"Configure Debug Logging\".\n* `INSTANA_LOG_LEVEL_STDOUT`: See section
  \"Configure Debug Logging\".\n* `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`: See section
  \"Configure Debug Logging\".\n\n### Configure Debug Logging\n\nIf required, the
  Instana Haskell SDK can produce logs via [hslogger](http://hackage.haskell.org/package/hslogger).
  Under normal circumstances, the SDK does not emit any log output at all. It will
  only output log messages when logging is explicitly enabled via certain environment
  variables. This can be useful to troubleshoot tracing in production settings or
  during development.\n\n#### Logging Related Environment Variables\n\n* `INSTANA_LOG_LEVEL`:
  Sets the log level for the SDK's log file. The log file will be written to the system's
  temporary directory (in particular, whatever `System.Directory.getTemporaryDirectory`
  returns) as `instana-haskell-sdk.{pid}.log`.\n* `INSTANA_LOG_LEVEL_STDOUT`: Sets
  the level for emitting log messages to stdout.\n* `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`:
  Controls whether the SDK sets an hslogger at the root logger level, see below.\n\n####
  When To Set `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`\n\nSetting up hslogger correctly
  inside a library like the Instana Haskell SDK (as opposed to an application which
  has full control) can be tricky. For the Instana Haskell SDK to be able to correctly
  configure hslogger, it is important to know whether the app in question (or some
  part of it) already uses hslogger. In particular, does some part of the code set
  a handler on hslogger's root logger? Is a call like the following executed somewhere
  in the application?\n\n```\nimport System.Log.Logger (rootLoggerName, setHandlers,
  updateGlobalLogger)\n\nupdateGlobalLogger rootLoggerName $ setHandlers [...]\n```\n\nIf
  this is the case, you can simply use `INSTANA_LOG_LEVEL` (or `INSTANA_LOG_LEVEL_STDOUT`)
  without further configuration. If the app in question does not use hslogger, that
  is, if no `setHandler` call on `rootLoggerName` is executed, you should also set\n`INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`
  to a non-empty string (for example, `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`).\n\n####
  Troubleshooting Tracing In Production\n\nIf your app already uses hslogger, use:\n\n*
  `INSTANA_LOG_LEVEL=DEBUG`\n\nOtherwise, use:\n\n* `INSTANA_LOG_LEVEL=DEBUG INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`\n\n####
  Development\n\nDuring development (that is, when working on the Instana Haskell
  SDK), use either\n\n* `INSTANA_LOG_LEVEL_STDOUT=DEBUG`\n\nor\n\n* `INSTANA_LOG_LEVEL_STDOUT=DEBUG`\n*
  `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`\n\ndepending on whether the application
  already uses and configures hslogger. The application `example-app` that is contained
  in the Instana Haskell SDK's repo configures hslogger, so simply using `INSTANA_LOG_LEVEL_STDOUT=DEBUG`
  is correct.\n\nContributing\n------------\n\nSee [CONTRIBUTING.md](https://github.com/instana/haskell-trace-sdk/blob/master/CONTRIBUTING.md).\n\n"
license-name: MIT
