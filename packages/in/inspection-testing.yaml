homepage: https://github.com/nomeata/inspection-testing
changelog-type: markdown
hash: f38efc22833bd4145ad1eebaf0de7bef6fbc00f7d65dccd2b48dacab1a7263c5
test-bench-deps:
  base: ! '>=4.9 && <4.13'
  inspection-testing: -any
maintainer: mail@joachim-breitner.de
synopsis: GHC plugin to do inspection testing
changelog: ! "# Revision history for inspection-testing\n\n## 0.4.1.1 -- 2018-11-17\n\n*
  Fix a bug with `doesNotUse` and data constructors\n\n## 0.4.1 -- 2018-11-17\n\n*
  New obligation `doesNotUse`\n* Use the Obligationâ€™s testName in the plugin output.\n*
  In `inspect`, do not override `srcLoc` if already present.\n\n## 0.4 -- 2018-10-12\n\n*
  Support GHC-8.6\n* On GHC-8.4 or newer, `inspect` and `inspectTest` will automatically
  load the\n  plugin.\n\n## 0.3 -- 2018-07-07\n\n* On GHC-8.5 or newer, use of `inspect`
  or `inspectTest` without actually\n  loading the plugin will cause compilation to
  fail at type-checking time\n  (thanks to @adamgundry for the idea)\n* Support for
  `hasNoTypeClass` (thanks to @phadej)\n* Support for `hasNoGenerics` (thanks to @isovector)\n*
  No need to keep referenced variables alive using annotations:\n  Simply mentioning
  them in a Template Haskell splice keeps them alive!\n\n## 0.2.0.1 -- 2018-02-02\n\n*
  Support GHC HEAD (8.5)\n\n## 0.2 -- 2018-01-17\n\n* With `$(inspectTest obligation)`
  you can now get the result of inspection\n  testing at run-time, for integration
  into your test suite.\n\n## 0.1.2 -- 2017-11-20\n\n* Make `(==-)` a bit more liberal,
  and look through variable redefinitions that\n  only change the type\n\n## 0.1.1.2
  -- 2017-11-12\n\n* Hotfix: Do not abort if there are expected failures\n\n## 0.1.1.1
  -- 2017-11-12\n\n* Show summary stats\n* Pull in less tests, to make inclusion in
  stackage easier\n\n## 0.1.1 -- 2017-11-09\n\n* More complete output when `(===)`
  fails\n* Variant `(==-)` that ignores types when comparing terms\n\n## 0.1 -- 2017-11-09\n\n*
  Repackaged as inspection-testing\n\n## 0.1.1  -- 2017-09-05\n\n* Also run simplifier
  in stage 0\n\n## 0.1  -- 2017-08-26\n\n* Initial release to hackage\n\n## 0  --
  2017-02-06\n\n* Development of ghc-proofs commences\n"
basic-deps:
  ghc: ! '>=8.0.2 && <8.7'
  base: ! '>=4.9 && <4.13'
  containers: -any
  mtl: -any
  transformers: -any
  template-haskell: -any
all-versions:
- '0.1'
- '0.1.1'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.2'
- '0.2'
- '0.2.0.1'
- '0.3'
- '0.4'
- '0.4.1'
- '0.4.1.1'
author: Joachim Breitner
latest: '0.4.1.1'
description-type: markdown
description: ! "Inspection Testing for Haskell\n==============================\n\nThis
  GHC plugin allows you to embed assertions about the intermediate code into\nyour
  Haskell code, and have them checked by GHC. This is called _inspection\ntesting_
  (as it automates what you do when you manually inspect the\nintermediate code).\n\nSynopsis\n--------\n\nSee
  the `Test.Inspection` module for the documentation, but there really isn't much\nmore
  to it than:\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\nmodule Simple where\n\nimport
  Test.Inspection\nimport Data.Maybe\n\nlhs, rhs :: (a -> b) -> Maybe a -> Bool\nlhs
  f x = isNothing (fmap f x)\nrhs f Nothing = True\nrhs f (Just _) = False\n\ninspect
  $ 'lhs === 'rhs\n```\n\nIf you compile this, you will reassurringly read:\n\n```\n$
  ghc Simple.hs\n[1 of 1] Compiling Simple           ( Simple.hs, Simple.o )\nexamples/Simple.hs:14:1:
  lhs === rhs passed.\ninspection testing successful\n      expected successes: 1\n```\n\nSee
  the [`examples/`](examples/) directory for more examples of working proofs.\n\nIf
  an assertion fails, for example\n\n```haskell\nbad1, bad2 :: Int\nbad1 = 2 + 2\nbad2
  = 5\n\ninspect $ 'bad1 === 'bad2\n```\nthen the compiler will tell you so, and abort
  the compilation:\n```\n$ ghc Simple.hs -dsuppress-idinfo\n[5 of 5] Compiling Simple
  \          ( examples/Simple.hs, examples/Simple.o )\nexamples/Simple.hs:14:1: lhs
  === rhs passed.\nexamples/Simple.hs:20:1: bad1 === bad2 failed:\n    LHS:\n        bad1
  :: Int\n        bad1 = I# 4#\n\n    RHS:\n        bad2 :: Int\n        bad2 = I#
  5#\n\n\nexamples/Simple.hs: error:\n    inspection testing unsuccessful\n          expected
  successes: 1\n         unexpected failures: 1\n```\n\nWhat can I check for?\n---------------------\n\nCurrently,
  inspection-testing supports\n\n * checking two definitions to be equal (useful in
  the context of generic\n   programming)\n * checking the absence of a certain type
  (useful in the context of list or\n   stream fusion)\n * checking the absence of
  a a use of certian functions\n * checking the absence of allocation (generally useful)\n
  * checking the absence of typeclass-overloaded code\n\nIn general, the checks need
  to be placed in the same module as the\nchecked-definition.\n\nPossible further
  applications includes\n\n * checking that all recursive functions are (efficiently
  called) join-points\n * asserting strictness properties (e.g. in `Data.Map.Strict`)\n
  * peforming some of these checks only within recursive loops\n\nLet me know if you
  need any of these, or have further ideas.\n\nHelp, I am drowning in Core!\n----------------------------\n\ninspection-testing
  prints the Core more or less like GHC would, and the same\nflags can be used to
  control the level of detail. In particular, you might want\nto pass to GHC a selection
  of the following flags:\n\n    -dsuppress-idinfo -dsuppress-coercions -dsuppress-type-applications\n
  \   -dsuppress-module-prefixes -dsuppress-type-signatures -dsuppress-uniques\n\n\nIt
  does not seem to do anything (on GHC < 8.4)\n----------------------------------------------\n\nAdd
  this line to your module:\n\n    {-# OPTIONS_GHC -O -fplugin Test.Inspection.Plugin
  #-}\n\nCan I comment or help?\n----------------------\n\nSure! We can use the GitHub
  issue tracker for discussions, and obviously\ncontributions are welcome.\n\n"
license-name: MIT
