homepage: http://github.com/tweag/inline-java#readme
changelog-type: markdown
hash: 4ec033dec43511fb51c7e7c7db5082ba48d2f9c867e3a40a35eae8f15e61cf46
test-bench-deps:
  base: -any
  jni: -any
  hspec: -any
  text: -any
  jvm: -any
  inline-java: -any
maintainer: m@tweag.io
synopsis: Java interop via inline Java code in Haskell modules.
changelog: ! "# Change Log\n\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/).\n\n##
  Next release\n\n### Added\n\n## [0.8.1] - 2018-02-27\n\n### Changed\n\n* Relaxed
  upper bound of jni to admit jni-0.6.0.\n\n## [0.8.0] - 2018-02-27\n\n### Added\n\n*
  `addJarsToClasspath`: a function to add a list of jar paths to\n  the CLASSPATH
  in cabal hooks.\n\n### Changed\n\n* `gradleHooks` now extends the CLASSPATH even
  if the CLASSPATH is set.\n* Renamed `setGradleClasspath` to `prependClasspathWithGradle`.\n\n##
  [0.7.2] - 2017-12-27\n\n### Changed\n\n* CLASSPATH is now set in Cabal hooks before
  running haddock.\n\n## [0.7.1] - 2017-12-05\n\n### Added\n\n* A hello-java example
  project.\n* Upper bounds to `jni` and `jvm`.\n\n### Changed\n\n* Normalize type
  families before inspecting the return type of\n  quasiquotations.\n\n## [0.7.0]
  - 2017-08-31\n\n### Added\n\n* Plugin option to dump the generated Java to the console
  or a file.\n* Partial support for inner classes. Antiquoted variables and\n  quasiquotation
  results can refer to inner classes now.\n\n### Changed\n\n* Use a compiler plugin
  to build the bytecode table and to generate\n  Java code. We no longer need static
  pointers to find the bytecode\n  at runtime, and we can check at build-time that
  values are\n  marshaled between matching types in Java and Haskell when using\n
  \ antiquated variables or the result of quasiquotations. Also, now\n  java quasiquotes
  work inside Template Haskell brackets ([| ... |]).\n* Use only the lexer in `language-java`.
  This defers most parsing\n  errors to the `javac` compiler which produces better
  error\n  messages and might support newer syntactic constructs like\n  anonymous
  functions.\n* Java checked exceptions are now allowed in java quasiquotes.\n\n###
  Fixed\n\n* Gradle hooks now produce a correct build-time classpath.\n\n## [0.6.5]
  - 2017-04-13\n\n## Added\n\n* Exposed loadJavaWrappers.\n\n## [0.6.4] - 2017-04-09\n\n###
  Fixed\n\n* Fixed handling of repeated antiquotation variables, which in some\n  cases
  was causing a compilation error.\n\n## [0.6.3] - 2017-03-12\n\n### Fixed\n\n* Setting
  the `CLASSPATH` using Gradle is now fully supported. It was\n  previously unusable
  due to a bug (see #42).\n\n## [0.6.2] - 2017-02-21\n\n* Avoid producing warnings
  about unused inlinejava_bytecode0 bindings.\n* Support type synonyms in variable
  antiquotation.\n* Update lower bounds of jni to 0.3 and jvm to 0.2.\n\n## [0.6.1]
  - 2016-12-27\n\n* Support passing array objects as arguments / return values.\n*
  More robust mangling of inline class name.\n\n## [0.6.0] - 2016-12-13\n\n### Added\n\n*
  Can set a custom `CLASSPATH` in `Setup.hs` from Gradle build\n  configurations to
  use when compiling inline expressions.\n* GHC 8 compatibility\n* Support inline
  expressions that compile to multiple .class files\n  (e.g for anonymous classes
  and anonymous function literals).\n\n### Changed\n\n* The return type of inline
  expressions no longer needs\n  `Reify`/`Reflect` instances.\n\n### Fixed\n\n* Fix
  antiquotation: in [java| $obj.foo() |], `obj` is now recognized\n  as an antiquotation
  variable.\n* Passing multiple options to the JVM using `withJVM`.\n\n## [0.5.0]
  - 2016-12-13\n\n### Added\n\n* First release with support for inline Java expressions.\n\n###
  Changed\n\n* Split lower-level and mid-level bindings into separate packages: jni\n
  \ and jvm.\n"
basic-deps:
  ghc: ! '>=8.0.2 && <8.3'
  bytestring: ! '>=0.10'
  Cabal: ! '>=1.24.2'
  base: ! '>4.9.0.0 && <5'
  jni: ! '>=0.4 && <0.7'
  text: ! '>=1.2'
  filepath: ! '>=1'
  process: ! '>=1.2'
  jvm: ! '>=0.4 && <0.5'
  mtl: ! '>=2.2.1'
  temporary: ! '>=1.2'
  language-java: ! '>=0.2'
  template-haskell: ! '>=2.10'
  directory: ! '>=1.2'
all-versions:
- '0.1'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
- '0.6.4'
- '0.6.5'
- '0.7.0'
- '0.7.1'
- '0.7.2'
- '0.8.0'
- '0.8.1'
author: Tweag I/O
latest: '0.8.1'
description-type: markdown
description: ! "# inline-java: Call any JVM function from Haskell\n\n[![CircleCI](https://circleci.com/gh/tweag/inline-java.svg?style=svg)](https://circleci.com/gh/tweag/inline-java)\n\n**NOTE
  1: you'll need GHC >= 8.0.2 to compile and use this package.**\n\nThe Haskell standard
  includes a native foreign function interface\n(FFI). Using it can be a bit involved
  and only C support is\nimplemented in GHC. `inline-java` lets you call any JVM function\ndirectly,
  from Haskell, without the need to write your own foreign\nimport declarations using
  the FFI. In the style of `inline-c` for\nC and `inline-r` for calling R, `inline-java`
  lets you name any\nfunction to call inline in your code. It is implemented on top
  of the\n[jni][jni] and [jvm][jvm] packages.\n\n[jni]: jni/\n[jvm]: jvm/\n\n## Example\n\nGraphical
  Hello World using Java Swing:\n\n```Haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE
  QuasiQuotes #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# OPTIONS_GHC -fplugin=Language.Java.Inline.Plugin
  #-}\nmodule Main where\n\nimport Data.Text (Text)\nimport Language.Java\nimport
  Language.Java.Inline\n\nmain :: IO ()\nmain = withJVM [] $ do\n    message <- reflect
  (\"Hello World!\" :: Text)\n    [java| {\n      javax.swing.JOptionPane.showMessageDialog(null,
  $message);\n      } |]\n```\n\n## Building it\n\n**Requirements:**\n* the [Stack][stack]
  build tool (version 1.2 or above);\n* either, the [Nix][nix] package manager,\n*
  or, OpenJDK, Gradle and Spark (version 1.6) installed from your distro.\n\nOn OS
  X, you'll need to install the [Legacy Java SE 6][osx-java-se]\nruntime when prompted,
  even when using Nix.\n\nTo build:\n\n```\n$ stack build\n```\n\nYou can optionally
  get Stack to download a JDK in a local sandbox\n(using [Nix][nix]) for good build
  results reproducibility. **This is\nthe recommended way to build inline-java.**
  Alternatively, you'll need\nit installed through your OS distribution's package
  manager for the\nnext steps (and you'll need to tell Stack how to find the JVM header\nfiles
  and shared libraries).\n\nTo use Nix, set the following in your `~/.stack/config.yaml`
  (or pass\n`--nix` to all Stack commands, see the [Stack manual][stack-nix] for\nmore):\n\n```yaml\nnix:\n
  \ enable: true\n```\n\n[stack]: https://github.com/commercialhaskell/stack\n[stack-nix]:
  https://docs.haskellstack.org/en/stable/nix_integration/#configuration\n[nix]: http://nixos.org/nix\n[osx-java-se]:
  https://support.apple.com/kb/dl1572?locale=fr_FR\n\n## Debugging\n\nThe generated
  java output can be dumped to stderr by passing to GHC\n```\n-fplugin-opt=Language.Java.Inline.Plugin:dump-java\n```\n\nIf
  `-ddump-to-file` is in effect (as when using `stack`), the java code\nis dumped
  to `<module>.dump-java` instead.\n\n## License\n\nCopyright (c) 2015-2016 EURL Tweag.\n\nAll
  rights reserved.\n\ninline-java is free software, and may be redistributed under
  the terms\nspecified in the [LICENSE](LICENSE) file.\n\n## Sponsors\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n[![Tweag
  I/O](http://i.imgur.com/0HK8X4y.png)](http://tweag.io)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n[![LeapYear](http://i.imgur.com/t9VxRHn.png)](http://leapyear.io)\n\ninline-java
  is maintained by [Tweag I/O](http://tweag.io/).\n\nHave questions? Need help? Tweet
  at\n[@tweagio](http://twitter.com/tweagio).\n"
license-name: BSD3
