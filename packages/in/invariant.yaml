homepage: https://github.com/nfrisby/invariant-functors
changelog-type: markdown
hash: feb44dc65d0ab06c0f51fbe4ff00caceb8302c03d3deee86732398eda4505d13
test-bench-deps:
  base: ! '>=4 && <5'
  hspec: ! '>=1.8'
  invariant: -any
  QuickCheck: ! '>=2 && <3'
  template-haskell: ! '>=2.4 && <2.14'
maintainer: ! 'Nicolas Frisby <nicolas.frisby@gmail.com>,

  Ryan Scott <ryan.gl.scott@gmail.com>'
synopsis: Haskell98 invariant functors
changelog: ! "# 0.5 [2017.12.07]\n* `Data.Functor.Invariant.TH` now derives `invmap(2)`
  implementations for empty\n  data types that are strict in the argument.\n* When
  using `Data.Functor.Invariant.TH` to derive `Invariant(2)` instances for\n  data
  types where the last type variables are at phantom roles, generated\n  `invmap(2)`
  implementations now use `coerce` for efficiency.\n* Add `Options` to `Data.Functor.Invariant.TH`,
  along with variants of existing\n  functions that take `Options` as an argument.
  For now, the only configurable\n  option is whether derived instances for empty
  data types should use the\n  `EmptyCase` extension (this is disabled by default).\n\n#
  0.4.3 [2017.07.31]\n* Add `Invariant(2)` instances for `Data.Profunctor.Yoneda.Yoneda`.\n\n#
  0.4.2 [2017.04.24]\n* `invariant.cabal` used to incorrectly state the license was
  BSD3 when it was\n  in fact BSD2. This is now fixed.\n\n# 0.4.1\n* Fix the `Invariant
  V1` instance so as to `seq` its argument\n* Allow building with `template-haskell-2.12`\n\n#
  0.4\n* Allow TH derivation of `Invariant(2)` instances for datatypes containing\n
  \ unboxed tuple types\n* Ensure `Invariant(2)` instances are in-scope when importing\n
  \ `Data.Functor.Invariant`\n* Add `Invariant` and `Invariant2` instances for `Kleisli`
  and `Cokleisli`\n* Add `Category` and `Arrow`-like instances for `WrappedProfunctor`\n\n#
  0.3.1\n* Rewrote `Data.Functor.Invariant.TH`'s type inferencer. This avoids a nasty\n
  \ GHC 7.8-specific bug involving derived `Invariant(2)` instances for data\n  families.\n*
  Add `Invariant` instances for `Data.Complex.Complex`, `Data.Monoid.Product`,\n  and
  `Data.Monoid.Sum`\n\n# 0.3\n* Require `bifunctors-5.2` and `profunctors-5.2`. Add
  `Invariant(2)` instances\n  for newly introduced datatypes from those packages.\n*
  Add `ProfunctorFunctor`, `ProfunctorMonad`, `ProfunctorComonad`, `Mapping`,\n  and
  `Traversing` instances for `WrappedProfunctor`\n* Add `StateVar` as a dependency.
  Add `Invariant` instances for `StateVar` and\n  `SettableStateVar`.\n* Add `Invariant`
  instances for `URec` (added to `GHC.Generics` in\n  `base-4.9.0.0`)\n\n# 0.2.2\n*
  Add `genericInvmap` function (and make it the default implementation of\n  `invmap`
  for `Invariant` instances) on GHC 7.2 or later\n* Make `Tagged` instance poly-kinded\n\n#
  0.2.1\n* Add `Foldable` and `Traversable` instances for `WrappedFunctor`\n* Fixed
  build on GHC HEAD\n\n# 0.2\n* Support deriving `Invariant` and `Invariant2` instances
  with Template Haskell\n* Added `invmapFunctor`, `invmapContravariant`, `invmap2Bifunctor`,
  and\n  `invmap2Profunctor` to make defining `Invmap` and `Invmap2` instances\n  somewhat
  easier\n* Added `WrappedFunctor`, `WrappedContravariant`, `WrappedBifunctor`, and\n
  \ `WrappedProfunctor` data types to allow use of `invmap` and `invmap2` for\n  data
  types that aren't `Invariant` or `Invariant2` instances.\n* Added `Invariant` instances
  for lazy `ST`, `ArrowMonad`, `Handler`,\n  `Identity`, `First`, `Last`, `Alt`, `Proxy`,
  `ArgDescr`, `ArgOrder`, and\n  `OptDescr`\n* Added `Invariant` and `Invariant2`
  instances for data types in the `array`,\n  `bifunctors`, `containers`, `profunctors`,
  `semigroups`, `stm`, `tagged`,\n  `transformers`, and `unordered-containers` libraries\n\n#
  0.1.2\n* Add `Invariant` instances for `Dual` and `Endo`\n\n# 0.1.1\n* Bump `contravariant`
  upper version bounds\n\n# 0.1.0\n* Initial commit\n"
basic-deps:
  stm: ! '>=2.2 && <3'
  base: ! '>=4 && <5'
  comonad: ! '>=5 && <6'
  unordered-containers: ! '>=0.2.4 && <0.3'
  semigroups: ! '>=0.16.2 && <1'
  array: ! '>=0.3 && <0.6'
  th-abstraction: ! '>=0.2.2 && <1'
  tagged: ! '>=0.7.3 && <1'
  containers: ! '>=0.1 && <0.6'
  bifunctors: ! '>=5.2 && <6'
  ghc-prim: -any
  contravariant: ! '>=0.5 && <2'
  StateVar: ! '>=1.1 && <2'
  transformers: ! '>=0.2 && <0.6'
  template-haskell: ! '>=2.4 && <2.14'
  transformers-compat: ! '>=0.3 && <1'
  profunctors: ! '>=5.2.1 && <6'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.5'
author: Nicolas Frisby <nicolas.frisby@gmail.com>
latest: '0.5'
description-type: markdown
description: ! "# `invariant`\n[![Hackage](https://img.shields.io/hackage/v/invariant.svg)][Hackage:
  invariant]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/invariant.svg)](http://packdeps.haskellers.com/reverse/invariant)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Build](https://img.shields.io/travis/nfrisby/invariant-functors.svg)](https://travis-ci.org/nfrisby/invariant-functors)\n\n[Hackage:
  invariant]:\n  http://hackage.haskell.org/package/invariant\n  \"invariant package
  on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell Programming
  Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\nHaskell98 invariant functors\n"
license-name: BSD2
