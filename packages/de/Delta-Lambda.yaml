homepage: https://github.com/listofoptions/delta-lambda
changelog-type: ''
hash: f3ee4f41f3608cc9dec2f85854b785c180b2db743fe54f9d503c01fbeef30746
test-bench-deps:
  cereal: ! '>=0.5 && <0.6'
  wl-pprint: ! '>=1.2'
  bytestring: ! '>=0.10.6.0'
  haskeline: ! '>=0.7 && <0.8'
  Cabal: ! '>=1.9.2'
  base: ! '>=4.8 && <4.10'
  text: ! '>=1.2.2.0'
  megaparsec: ! '>=5.0 && <5.3'
  filepath: ! '>=1.4.0.0'
  mtl: ! '>=2.2 && <2.3'
  cpphs: ! '>=1.20'
  options: ! '>=1.2 && <1.3'
  parallel: ! '>=3.2 && <3.3'
maintainer: listofoptions@gmail.com
synopsis: A demonstration interpreter for type system delta-lambda (of N.G. De-bruijn)
changelog: ''
basic-deps:
  cereal: ! '>=0.5 && <0.6'
  wl-pprint: ! '>=1.2'
  bytestring: ! '>=0.10.6.0'
  haskeline: ! '>=0.7 && <0.8'
  Cabal: ! '>=1.9.2'
  base: ! '>=4.8 && <4.10'
  text: ! '>=1.2.2.0'
  megaparsec: ! '>=5.0 && <5.3'
  filepath: ! '>=1.4.0.0'
  mtl: ! '>=2.2 && <2.3'
  cpphs: ! '>=1.20'
  options: ! '>=1.2 && <1.3'
  parallel: ! '>=3.2 && <3.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: James M
latest: 0.3.0.0
description-type: markdown
description: ! "# ΔΛ (Delta-Lambda)\r\n\r\n[![Build Status](https://travis-ci.org/listofoptions/delta-lambda.svg?branch=master)](https://travis-ci.org/listofoptions/delta-lambda)\r\n\r\n##
  Introduction :\r\nThis language is a test language for an implementation of the
  type system  ΔΛ (Delta-Lambda) described by [de Bruijn] for simplifying the semantics
  of his [Automath] project.\r\nEventually I will post the Coq/Idris/Agda/etc... proofs
  for the compliance of  the code to the inferential rules specified by [De Groote].\r\n\r\n##
  Syntax :\r\nThe syntax is expressed in [EBNF].\r\n\r\n### expression syntax\r\n```EBNF\r\nExpression
  \ = 'type'\r\n\t          | Identifier\r\n            | '(' , Expression  , { ','
  , Expression  } , ')' , Expression\r\n            | '[' , Declaration , { ',' ,
  Declaration } , ']' , Expression\r\n            ;\r\nDeclaration = [ Identifier
  , { ',' , Identifier } ] ':' Expression\r\n            ;\r\n```\r\n\r\n\r\n## Semantics
  :\r\nthe semantics of delta-lambda are fairly simple, and involve inductive definitions
  on the structure of expressions. We will step through the inductive relations on
  terms and describe them in detail. We assume that beta equivalence is known to be
  the reflexive transitive symmetric closure of beta reduction, which is defined as
  normal. the notation <CODE>[x := A]B</CODE> is used to represent substitution, which
  also takes on the typical meaning (pedants may examine [de Bruijn]'s paper)\r\n\r\nhere
  are the relations (the names of which are the same in the code):\r\n 1. typeOf\r\n
  \  * the typeOf function produces the type of a term, by replacing the tail variable
  with it's type\r\n\r\n> typeOf[context, x] = A if [x : A] in context\r\n\r\n> typeOf[context,
  (A) B] = (A) typeOf[context, B]\r\n\r\n> typeOf[context, [x : A] B] = [x: A] typeOf[[x
  : A] context, B])\r\n\r\n 2. ftype\r\n   * this function produces the 'final' type
  of a term, that is the term ends in <CODE>type</CODE>. (note that this essentially
  preforms eta expansion)\r\n\r\n\r\n> ftype[context, A] = A if tail[A] is type\r\n\r\n>
  ftype[context, A] = typef[context, typeOf[context, A]] if tail[A] is not type\r\n\r\n\r\n
  4. tail\r\n   * this function computes the term at the 'end' of a spine.\r\n\r\n>
  tail[type] = type\r\n\r\n> tail[x] = x\r\n\r\n> tail[(A) B] = tail[B]\r\n\r\n> tail[[x
  : A] B] = tail[B]\r\n\r\n 5. correct\r\n   * this is the most important structural
  function, it's purpose is to prove (or disprove) that a given term is (or is not)
  correct.\r\n\r\n> correct[context, type] = true\r\n\r\n> correct[context, x] = true
  iff (x A) in context, else false\r\n\r\n> correct[context, [x : A] B] = correct[context,
  A] and correct[[x : A] context, B]\r\n\r\n> correct[context, (A) B] = correct[B]
  and typing[context, A] is beta equivalent to some [x : C] D and typeOf[context,
  B] is beta equivalent to C and correct[context, [x := B]D]\r\n\r\nIt must be reiterated
  that proofs of the conformance of these structural relations on Expressions have
  not been written yet, as the relations are not simply recursive, so a proof in Coq/Agda/Idris/etc...
  will be very difficult\r\nAlso note that the code does not exactly follow this formalism.\r\n\r\n##
  References :\r\n * [Generalising Automath by Means of a Lambda-Typed Lambda Calculus][de
  Bruijn] Keuker, D.W., Lopez-Escobar, E.G.K. and Smith, C.H., eds., *Mathematal Logic
  and Theoretical Computer Science*, pp. 71-92, by courtesy of Marcel Dekker Inc.,
  New York.\r\n\r\n * [Reveiwing the Classical and the de Bruijn Notation for lambda-calculus
  and Pure Type Systems][Kamareddine] *J. Logic Computat*., Vol 11 No. 3, pp. 363-394,
  Oxford University Press.\r\n\r\n * [Defining λ-Typed λ-Calculi by Axiomatizing the
  Typing Relation][de Groote] P. Enjalbert, A. Finkel, and K.W. Wagner eds., *Lecture
  Notes in Computer Science, Vol. 665*, Springer-Verlag (1993), pp. 712-723., 10th
  Annual Symposium on Theoretical Aspects of Computer Science, STACS’93.\r\n\r\n *
  [EBNF][ebnf]\r\n\r\n[Automath]: http://www.win.tue.nl/automath/\r\n[de Bruijn]:
  Documents/de_Bruijn.pdf\r\n[de Groote]: Documents/de_Groote.pdf\r\n[ebnf]: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form\r\n[Kamareddine]:
  Documents/Kamareddine.pdf\r\n"
license-name: MIT
