homepage: ''
changelog-type: markdown
hash: 0962965bd62d3393923c41cfdf09cda6f4f2df56a0147df9e8be8b7f62d75136
test-bench-deps:
  test-framework-hunit: ==0.3.*
  test-framework: ==0.8.*
  base: -any
  HUnit: ! '>=1.2 && <1.7'
  array: -any
  ghc-prim: -any
maintainer: libraries@haskell.org
synopsis: Deep evaluation of data structures
changelog: ! "# Changelog for [`deepseq` package](http://hackage.haskell.org/package/deepseq)\n\n##
  1.4.3.0 *Apr 2017*\n\n  * Bundled with GHC 8.2.1\n\n  * Drop support for GHC 7.0
  & GHC 7.2\n\n  * Changed strictness behavior of generic `NFData` instances for\n
  \   constructor-less data types. Before, a generic `rnf`\n    implementation would
  always `error` on a data type with no\n    constructors. Now, it will force the
  argument, so if the argument\n    is a diverging computation, a generic `rnf` implementation
  will\n    actually trigger the diverging computation.\n    ([#19](https://github.com/haskell/deepseq/issues/19))\n\n
  \ * Add new `rwhnf` function defined as `rwhnf !_ = ()`\n    ([#3](https://github.com/haskell/deepseq/issues/3))\n\n
  \ * Add `(<$!!>) :: (Monad m, NFData b) => (a -> b) -> m a -> m b`\n    ([#13](https://github.com/haskell/deepseq/issues/13))\n\n
  \ * Add `NFData1` and `NFData2` type classes\n    ([#8](https://github.com/haskell/deepseq/issues/8))\n\n
  \ * Add `NFData` instance for `Down` for `base` versions prior to\n    `base-4.6.0`
  which didn't yet export it via `Data.Ord`\n    ([#28](https://github.com/haskell/deepseq/pull/28))\n\n
  \ * Add `NFData` instance for `Foreign.C.Types.CBool`\n    ([#33](https://github.com/haskell/deepseq/pull/33))\n\n
  \ * Add `NFData` instance for `Ordering`\n    ([#25](https://github.com/haskell/deepseq/pull/25))\n\n
  \ * Add `NFData1` and `NFData` instances for `Data.Functor.{Compose,Sum,Product}`\n
  \   ([#30](https://github.com/haskell/deepseq/pull/30))\n\n  * Add `NFData`, `NFData1`,
  and `NFData2` instances for `(:~:)` and `(:~~:)`\n    from `Data.Type.Equality`\n
  \   ([#31](https://github.com/haskell/deepseq/issues/31))\n\n## 1.4.2.0  *Apr 2016*\n\n
  \ * Bundled with GHC 8.0.1\n\n  * New instances for types provided by `semigroups`
  prior to\n    `base-4.9` (i.e. `NonEmpty`, `Min`, `Max`, `Arg`,\n    `Semigroup.First`,
  `Semigroup.Last`, `WrappedMonoid`, and\n    `Option`) ([#11](https://github.com/haskell/deepseq/issues/11))\n\n
  \ * New instances for `Ptr` and `FunPtr`\n    ([#10](https://github.com/haskell/deepseq/pull/10))\n\n
  \ * New instances for `IORef`, `STRef`, and `MVar`\n    ([#6](https://github.com/haskell/deepseq/issues/6))\n\n
  \ * New instance for `ExitCode`\n    ([#4](https://github.com/haskell/deepseq/issues/4))\n\n
  \ * New instances for `CallStack` and `SrcLoc`\n\n  * Make `NFData (Proxy a)` instance
  poly-kinded\n\n## 1.4.1.2  *Aug 2015*\n\n  * Avoid the broken combination of GHC-7.2
  with `array>=0.4`\n    ([#7](https://github.com/haskell/deepseq/pull/7))\n\n## 1.4.1.1
  \ *Mar 2015*\n\n  * Bundled with GHC 7.10.1\n  * Drop redundant `ghc-prim` dependency\n\n##
  1.4.1.0  *Mar 2015*\n\n  * Drop redundant constraints from a few `NFData` instances
  (if\n    possible for a given `base` version)\n\n## 1.4.0.0  *Dec 2014*\n\n  * Switch
  to Generics based `DefaultSignature` `rnf` method\n    implementation (based on
  code from `deepseq-generics`)\n\n    **Compatibility Note**: if you need the exact
  default-method\n    semantics of `deepseq` prior to 1.4, replace occurences of\n\n
  \       instance NFData XYZ\n\n    by\n\n        instance NFData XYZ where rnf x
  = seq x ()\n\n  * New `NFData` instances for `base` types:\n\n     - `Control.Applicative.Const`\n
  \    - `Control.Applicative.ZipList`\n     - `Control.Concurrent.ThreadId`\n     -
  `Data.Functor.Identity.Identity`\n     - `Data.Monoid.{Dual,First,Last,Any,All,Sum,Product}`\n
  \    - `Data.Ord.Down`\n     - `Data.Proxy.Proxy`\n     - `Data.Typeable.Internal.TyCon`\n
  \    - `Data.Typeable.Internal.TypeRep`\n     - `Data.Unique.Unique`\n     - `Data.Void.Void`\n
  \    - `GHC.Fingerprint.Type.Fingerprint`\n     - `Numeric.Natural.Natural`\n     -
  `System.Mem.StableName.StableName`\n     - `Foreign.C.Types.C*`\n\n## 1.3.0.2  *Nov
  2013*\n\n  * Bundled with GHC 7.8.1\n  * Update package description to Cabal 1.10
  format\n  * Add support for GHC 7.8\n  * Drop support for GHCs older than GHC 7.0.1\n
  \ * Add `/since: .../` annotations to Haddock comments\n  * Add changelog\n\n##
  1.3.0.1  *Sep 2012*\n\n  * No changes\n\n## 1.3.0.0  *Feb 2012*\n\n  * Add instances
  for `Fixed`, `a->b` and `Version`\n\n## 1.2.0.1  *Sep 2011*\n\n  * Disable SafeHaskell
  for GHC 7.2\n\n## 1.2.0.0  *Sep 2011*\n\n  * New function `force`\n  * New operator
  `$!!`\n  * Add SafeHaskell support\n  * Dropped dependency on containers\n\n## 1.1.0.2
  \ *Nov 2010*\n\n  * Improve Haddock documentation\n\n## 1.1.0.1  *Oct 2010*\n\n
  \ * Enable support for containers-0.4.x\n\n## 1.1.0.0  *Nov 2009*\n\n  * Major rewrite\n\n##
  1.0.0.0  *Nov 2009*\n\n  * Initial release\n"
basic-deps:
  base: ! '>=4.5 && <4.12'
  array: ! '>=0.4 && <0.6'
all-versions:
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.2.0.0'
- '1.2.0.1'
- '1.3.0.0'
- '1.3.0.1'
- '1.3.0.2'
- '1.4.0.0'
- '1.4.1.0'
- '1.4.1.1'
- '1.4.1.2'
- '1.4.2.0'
- '1.4.3.0'
author: ''
latest: '1.4.3.0'
description-type: haddock
description: ! 'This package provides methods for fully evaluating data structures

  (\"deep evaluation\"). Deep evaluation is often used for adding

  strictness to a program, e.g. in order to force pending exceptions,

  remove space leaks, or force lazy I/O to happen. It is also useful

  in parallel programs, to ensure pending work does not migrate to the

  wrong thread.


  The primary use of this package is via the ''deepseq'' function, a

  \"deep\" version of ''seq''. It is implemented on top of an ''NFData''

  typeclass (\"Normal Form Data\", data structures with no unevaluated

  components) which defines strategies for fully evaluating different

  data types.'
license-name: BSD3
