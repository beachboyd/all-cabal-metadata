homepage: https://github.com/haskell-compat/deriving-compat
changelog-type: markdown
hash: 35a3e45fd9a184e3a9369dac10cdf8b1d4313ab0b9019fcd4683796b62515c46
test-bench-deps:
  base: ! '>=4.9 && <5'
  deriving-compat: -any
  hspec: ! '>=1.8'
  base-orphans: ! '>=0.5 && <1'
  tagged: ! '>=0.7 && <1'
  base-compat: ! '>=0.8.1 && <1'
  transformers: (>=0.2 && <0.4) || (>=0.5 && <0.6)
  QuickCheck: ! '>=2 && <3'
  template-haskell: ! '>=2.5 && <2.13'
  transformers-compat: ! '>=0.5'
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Backports of GHC deriving extensions
changelog: ! "### 0.4.1 [2018.02.04]\n* Add `Data.Deriving.Via`, which allows emulating
  the behavior of the\n  `GeneralizedNewtypeDeriving` and `DerivingVia` extensions.\n*
  Test suite fixes for GHC 8.4.\n\n## 0.4 [2017.12.07]\n* Incorporate changes from
  the `EmptyDataDeriving` proposal (which is in GHC\n  as of 8.4):\n  * For derived
  `Eq` and `Ord` instances for empty data types, simply return\n    `True` and `EQ`,
  respectively, without inspecting the arguments.\n  * For derived `Read` instances
  for empty data types, simply return `pfail`\n    (without `parens`).\n  * For derived
  `Show` instances for empty data types, inspect the argument\n    (instead of `error`ing).
  In addition, add `showEmptyCaseBehavior` to\n    `ShowOptions`, which configures
  whether derived instances for empty data\n    types should use the `EmptyCase` extension
  (this is disabled by default).\n  * For derived `Functor` and `Traversable` instances
  for empty data\n    types, make `fmap` and `traverse` strict in its argument.\n
  \ * For derived `Foldable` instances, do not error on empty data types.\n    Instead,
  simply return the folded state (for `foldr`) or `mempty` (for\n    `foldMap`), without
  inspecting the arguments.\n  * Add `FFTOptions` (`Functor`/`Foldable`/`Traversable`
  options) to\n    `Data.Functor.Deriving`, along with variants of existing functions
  that\n    take `FFTOptions` as an argument. For now, the only configurable option
  is\n    whether derived instances for empty data types should use the `EmptyCase`\n
  \   extension (this is disabled by default).\n* Backport the fix to #13328. That
  is, when deriving `Functor` or\n  `Traversable` instances for data types where the
  last type variable is at\n  phantom role, generated `fmap`/`traverse` implementations
  now use `coerce`\n  for efficiency.\n* Rename `emptyCaseBehavior` from `Data.Functor.Deriving`
  to\n  `fftEmptyCaseBehavior`.\n\n### 0.3.6 [2017.04.10]\n* Make `deriveTraversable`
  use `liftA2` in derived implementations of\n  `traverse` when possible, now that
  `liftA2` is a class method of\n  `Applicative` (as of GHC 8.2)\n* Make `deriveShow`
  use `showCommaSpace`, a change introduced in GHC 8.2\n\n### 0.3.5 [2016.12.12]\n*
  Fix bug in which derived `Ord` instances for datatypes with many constructors\n
  \ would fail to typecheck\n\n### 0.3.4 [2016.10.20]\n* Fix bug in which infix record
  selectors weren't shown with parentheses in derived `Show` instances\n* Fix bug
  in which record selectors weren't parsed correctly in derived `Read` instances\n\n###
  0.3.3 [2016.09.11]\n* Add `Data.Bounded.Deriving`, which allows deriving `Bounded`
  with TH.\n* Add `Data.Enum.Deriving`, which allows deriving `Enum` with TH.\n* Add
  `Data.Ix.Deriving`, which allows deriving `Ix` with TH.\n* Fix bug in which derived
  `Show` instance would parenthesize the output too eagerly\n\n### 0.3.2\n* Incorporate
  a fix to GHC Trac #10858, which will be introduced in GHC 8.2\n* Fix bug in which
  derived `Ord` instances accidentally swapped their less-than(-or-equal-to) and greater-than(-or-equal-to)
  methods\n* Fix GHC HEAD build\n\n### 0.3.1\n* Allow deriving `Functor` and `Foldable`
  instances for datatypes containing unboxed tuples\n* Microoptimization in derived
  instances of higher-order versions of `Eq`, `Ord`, `Read`, and `Show`\n\n## 0.3\n*
  Added `Data.Eq.Deriving`, which allows deriving `Eq`, `Eq1`, and `Eq2` with TH.\n*
  Added `Data.Ord.Deriving`, which allows deriving `Ord`, `Ord1`, and `Ord2` with
  TH.\n* Added `Data.Read.Deriving`, which allows deriving `Read`, `Read1`, and `Eq2`
  with TH.\n* Renamed `Text.Show.Deriving.Options` to `ShowOptions` so as to disambiguate
  it from the options datatypes in other `deriving-compat` modules.\n\n### 0.2.2\n*
  Fixed a bug in `Text.Show.Deriving`'s treatment of unlifted types\n\n### 0.2.1\n*
  Added `Text.Show.Deriving`, which allows deriving `Show`, `Show1`, and `Show2` with
  TH.\n\n## 0.2\n* Added support for GHC 8.0\n* Added `Data.Functor.Deriving` and
  `Data.Traversable.Deriving`, which allow deriving `Functor` and `Traversable` with
  TH.\n* Added `Data.Deriving`, which reexports all other modules\n\n## 0.1\n* Initial
  commit\n"
basic-deps:
  base: ! '>=4.9 && <5'
  th-abstraction: ! '>=0.2.2 && <1'
  containers: ! '>=0.1 && <0.6'
  ghc-prim: -any
  transformers: (>=0.2 && <0.4) || >=0.5
  ghc-boot-th: -any
  template-haskell: ! '>=2.11 && <2.13'
  transformers-compat: ! '>=0.5'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.3'
- '0.3.1'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.4'
- '0.4.1'
author: Ryan Scott
latest: '0.4.1'
description-type: markdown
description: ! "# `deriving-compat`\n[![Hackage](https://img.shields.io/hackage/v/deriving-compat.svg)][Hackage:
  deriving-compat]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/deriving-compat.svg)](http://packdeps.haskellers.com/reverse/deriving-compat)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n[![Build](https://img.shields.io/travis/haskell-compat/deriving-compat.svg)](https://travis-ci.org/haskell-compat/deriving-compat)\n\n[Hackage:
  deriving-compat]:\n  http://hackage.haskell.org/package/deriving-compat\n  \"deriving-compat
  package on Hackage\"\n[Haskell.org]:\n  http://www.haskell.org\n  \"The Haskell
  Programming Language\"\n[tl;dr Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \ \"BSD 3-Clause License (Revised)\"\n\nProvides Template Haskell functions that
  mimic deriving extensions that were introduced or modified in recent versions of
  GHC. Currently, the following typeclasses/extensions are covered:\n\n* Deriving
  `Bounded`\n* Deriving `Enum`\n* Deriving `Ix`\n* Deriving `Eq`, `Eq1`, and `Eq2`\n*
  Deriving `Ord`, `Ord1`, and `Ord2`\n* Deriving `Read`, `Read1`, and `Read2`\n* Deriving
  `Show`, `Show1`, and `Show2`\n* `DeriveFoldable`\n* `DeriveFunctor`\n* `DeriveTraversable`\n*
  `GeneralizedNewtypeDeriving` (with GHC 8.2 or later)\n* `DerivingVia` (with GHC
  8.2 or later)\n\nSee the `Data.Deriving` module for a full list of backported changes.\n\nNote
  that some recent GHC typeclasses/extensions are not covered by this package:\n\n*
  `DeriveDataTypeable`\n* `DeriveGeneric`, which was introducted in GHC 7.2 for deriving
  `Generic` instances, and modified in GHC 7.6 to allow derivation of `Generic1` instances.
  Use `Generics.Deriving.TH` from [`generic-deriving`](http://hackage.haskell.org/package/generic-deriving)
  to derive `Generic(1)` using Template Haskell.\n* `DeriveLift`, which was introduced
  in GHC 8.0 for deriving `Lift` instances. Use `Language.Haskell.TH.Lift` from [`th-lift`](http://hackage.haskell.org/package/th-lift)
  to derive `Lift` using Template Haskell.\n* The `Bifunctor` typeclass, which was
  introduced in GHC 7.10, as well as the `Bifoldable` and `Bitraversable` typeclasses,
  which were introduced in GHC 8.2. Use `Data.Bifunctor.TH` from [`bifunctors`](http://hackage.haskell.org/package/bifunctors)
  to derive these typeclasses using Template Haskell.\n"
license-name: BSD3
