homepage: https://github.com/ndmitchell/debug
changelog-type: text
hash: 359a2dc9c70292a732d8baf4035a6068bad656408ed4a952d31f3adb9c8c3e9b
test-bench-deps:
  extra: -any
  base: ==4.*
  debug: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Simple trace-based debugger
changelog: ! "Changelog for Debug\n\n0.0.2, released 2017-12-18\n    #6, don't generate
  context for obviously-monadic things\n    Make debugPrint a bit nicer\n0.0.1, released
  2017-12-18\n    Make debugView work on Linux\n0.0, released 2017-12-15\n    Initial
  version\n"
basic-deps:
  ansi-wl-pprint: -any
  extra: -any
  base: ==4.*
  open-browser: -any
  uniplate: -any
  containers: -any
  js-jquery: -any
  ghc-prim: -any
  template-haskell: -any
  directory: -any
all-versions:
- '0.0'
- '0.0.1'
- '0.0.2'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.0.2'
description-type: markdown
description: ! "# Haskell Debugger [![Hackage version](https://img.shields.io/hackage/v/debug.svg?label=Hackage)](https://hackage.haskell.org/package/debug)
  [![Stackage version](https://www.stackage.org/package/debug/badge/lts?label=Stackage)](https://www.stackage.org/package/debug)
  [![Linux Build Status](https://img.shields.io/travis/ndmitchell/debug.svg?label=Linux%20build)](https://travis-ci.org/ndmitchell/debug)
  [![Windows Build Status](https://img.shields.io/appveyor/ci/ndmitchell/debug.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/debug)\n\nA
  library for debugging Haskell programs. To use, take the functions that you are
  interested in debugging, e.g.:\n\n```haskell\nmodule QuickSort(quicksort) where\nimport
  Data.List\n\nquicksort :: Ord a => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs)
  = quicksort lt ++ [x] ++ quicksort gt\n    where (lt, gt) = partition (<= x) xs\n```\n\nTurn
  on the `TemplateHaskell` and `ViewPatterns` extensions, import `Debug`, indent your
  code and place it under a call to `debug`, e.g.:\n\n```haskell\n{-# LANGUAGE TemplateHaskell,
  ViewPatterns #-}\nmodule QuickSort(quicksort) where\nimport Data.List\nimport Debug\n\ndebug
  [d|\n   quicksort :: Ord a => [a] -> [a]\n   quicksort [] = []\n   quicksort (x:xs)
  = quicksort lt ++ [x] ++ quicksort gt\n       where (lt, gt) = partition (<= x)
  xs\n   |]\n```\n\nWe can now run our debugger with:\n\n```console\n$ ghci QuickSort.hs\nGHCi,
  version 8.2.1: http://www.haskell.org/ghc/  :? for help\n[1 of 1] Compiling QuickSort
  \       ( QuickSort.hs, interpreted )\nOk, 1 module loaded.\n*QuickSort> quicksort
  \"haskell\"\n\"aehklls\"\n*QuickSort> debugView\n```\n\nThe call to `debugView`
  starts a web browser to view the recorded information, looking something like:\n\n![Debug
  view output](debug.png)\n\n## Limitations\n\nThis tool is quite new, so it has both
  limitations, places it is incomplete and bugs. Some notable issues:\n\n* It calls
  `show` on all the values in encounters, meaning they must all have a `Show` instance
  (it defines a global `Show` instance which should get used as a fallback), and they
  will be fully evaluated. If your program relies on laziness it probably won't work.\n*
  It doesn't really understand shadowed variables, so it will work, but the debug
  results will be lower quality.\n* For function values it won't give you a whole
  lot of information.\n\n## Alternatives\n\nFor practical alternatives for debugging
  Haskell programs you may wish to consider:\n\n* [GHCi debugger](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger),
  simple imperative-style debugger in which you can stop a running computation in
  order to examine the values of variables. The debugger is integrated into GHCi.
  Robust, reliable, somewhat difficult to use.\n* [Hood](https://hackage.haskell.org/package/hood)
  and [Hoed](https://hackage.haskell.org/package/Hoed), a value-based observational
  debugger with a difficult user interface, deals well with laziness.\n* [Hat](https://hackage.haskell.org/package/hat),
  good ideas, but I've never got it working.\n\nCompared to the above, `debug` stresses
  simplicitly of integration and user experience.\n\n## FAQ\n\n### Q: `debugView`
  fails talking about Wine?\n\nA: If you get `wine: invalid directory \"/home/f/.wine\"
  in WINEPREFIX: not an absolute path` when running `debugView` that means `xdg-open`
  is handled by [Wine](https://www.winehq.org/). Fix that and it will work once more.\n\n\n\n"
license-name: BSD3
