homepage: https://github.com/ndmitchell/debug
changelog-type: text
hash: 4cd84f3252cc3e0872da2d33e8507af9e3d8573cfcdf83420979ffe386f119ad
test-bench-deps:
  bytestring: -any
  extra: -any
  base: ==4.*
  text: -any
  filepath: -any
  debug: -any
  containers: -any
  aeson: -any
  directory: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Simple trace-based debugger
changelog: ! "Changelog for Debug\n\n0.1, released 2018-02-16\n    Add Hoed based
  mode\n    #16, display values for intermediate function calls\n    #8, change the
  Show desugaring\n    #9, make the JSON format external\n0.0.2, released 2017-12-18\n
  \   #6, don't generate context for obviously-monadic things\n    Make debugPrint
  a bit nicer\n0.0.1, released 2017-12-18\n    Make debugView work on Linux\n0.0,
  released 2017-12-15\n    Initial version\n"
basic-deps:
  bytestring: -any
  monoidal-containers: -any
  extra: -any
  base: ! '>=4.7 && <5'
  open-browser: -any
  unordered-containers: -any
  text: -any
  clock: -any
  libgraph: ! '>=1.14'
  prettyprinter-compat-ansi-wl-pprint: -any
  filepath: -any
  uniplate: -any
  Hoed: ! '>=0.5'
  containers: -any
  js-jquery: -any
  ghc-prim: -any
  hashable: -any
  prettyprinter: -any
  deepseq: -any
  aeson: -any
  template-haskell: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- '0.0'
- '0.0.1'
- '0.0.2'
- '0.1'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '0.1'
description-type: markdown
description: ! "# Haskell Debugger [![Hackage version](https://img.shields.io/hackage/v/debug.svg?label=Hackage)](https://hackage.haskell.org/package/debug)
  [![Stackage version](https://www.stackage.org/package/debug/badge/lts?label=Stackage)](https://www.stackage.org/package/debug)
  [![Linux Build Status](https://img.shields.io/travis/ndmitchell/debug.svg?label=Linux%20build)](https://travis-ci.org/ndmitchell/debug)
  [![Windows Build Status](https://img.shields.io/appveyor/ci/ndmitchell/debug.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/debug)\n\nA
  library for debugging Haskell programs. To use, take the functions that you are
  interested in debugging, e.g.:\n\n```haskell\nmodule QuickSort(quicksort) where\nimport
  Data.List\n\nquicksort :: Ord a => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs)
  = quicksort lt ++ [x] ++ quicksort gt\n    where (lt, gt) = partition (<= x) xs\n```\n\nTurn
  on the `TemplateHaskell`, `ViewPatterns` and `PartialTypeSignatures` extensions,
  import `Debug`, indent your code and place it under a call to `debug`, e.g.:\n\n```haskell\n{-#
  LANGUAGE TemplateHaskell, ViewPatterns, PartialTypeSignatures #-}\n{-# OPTIONS_GHC
  -Wno-partial-type-signatures #-}\nmodule QuickSort(quicksort) where\nimport Data.List\nimport
  Debug\n\ndebug [d|\n   quicksort :: Ord a => [a] -> [a]\n   quicksort [] = []\n
  \  quicksort (x:xs) = quicksort lt ++ [x] ++ quicksort gt\n       where (lt, gt)
  = partition (<= x) xs\n   |]\n```\n\nWe can now run our debugger with:\n\n```console\n$
  ghci QuickSort.hs\nGHCi, version 8.2.1: http://www.haskell.org/ghc/  :? for help\n[1
  of 1] Compiling QuickSort        ( QuickSort.hs, interpreted )\nOk, 1 module loaded.\n*QuickSort>
  quicksort \"haskell\"\n\"aehklls\"\n*QuickSort> debugView\n```\n\nThe call to `debugView`
  starts a web browser to view the recorded information, looking something like:\n\n![Debug
  view output](debug.png)\n\nYou can look and play with the example results for various
  examples:\n\n* [`quicksort \"haskell\"`](https://ci.appveyor.com/api/projects/ndmitchell/debug/artifacts/output/quicksort.html)
  as above.\n* [`quicksortBy (<) \"haskell\"`](https://ci.appveyor.com/api/projects/ndmitchell/debug/artifacts/output/quicksortBy.html),
  like `quicksort` but using a comparison function and including a trace of `partition`
  itself.\n* [`lcm_gcd 6 15`](https://ci.appveyor.com/api/projects/ndmitchell/debug/artifacts/output/lcm_gcd.html),
  computing `lcm 6 15 ^^ gcd 6 15`.\n\n## Build tool: `debug-pp`\n\n`debug-pp` is
  a Haskell source preprocessor for streamlining the `debug` instrumentation of a
  module or a package. It performs the steps described above automatically. That is:\n\n*
  append an import for the `Debug` module,\n* wrap the body in a `debug` splice using
  a TH declaration quasiquote, and\n* add the required GHC extensions.\n\nTo instrument
  a module, add the following pragma to the top of the file:\n\n```haskell\n{-# OPTIONS
  -F -pgmF debug-pp #-}\n```\n\nTo instrument an entire program, add the following
  line to your stack descriptor, or if you don't use stack, to your cabal descriptor:\n\n```haskell\nghc-options:
  -F -pgmF debug-pp\n```\n\nIn both cases you will also need to modify your Cabal
  descriptor in order to\n\n* add a dependency on the `debug` package\n* (optional)
  add a build tool depends on `debug-pp` (required Cabal 2.0) :\n\n```haskell\nLibrary\n
  \ ...\n  build-tool-depends: debug-pp:debug-pp\n```\n\n### Configuration\n\n`debug-pp`
  tries to find a config file in the following locations (from higher to lower precedence):\n\n1.
  `.debug-pp.yaml` in the current directory (useful for per-directory\n   settings)\n2.
  `.debug-pp.yaml` in the nearest ancestor directory (useful for\n   per-project settings)\n3.
  `debug-pp/config.yaml` in the platformâ€™s configuration directory\n   (on Windows,
  it is %APPDATA%, elsewhere it defaults to `~/.config` and\n   can be overridden
  by the `XDG_CONFIG_HOME` environment variable;\n   useful for user-wide settings)\n4.
  `.debug-pp.yaml` in your home directory (useful for user-wide\n   settings)\n5.
  The default settings.\n\nUse `debug-pp --defaults > .debug-pp.yaml` to dump a\nwell-documented
  default configuration to a file, this way you can get started\nquickly.\n\nThe configuration
  options include:\n\n* Exclude modules by name.\n* Instrument the `main` function
  with `debugRun`.\n* Choice of backend.\n* In the case of the `Hoed` backend, whether
  to enable the automatic deriving of `Generic` and `Observable` instances.\n\n##
  Debug backends\n\nThis package offers two alternative backends for generating the
  debug trace:\n\n* `import Debug`\n\n   This is the default backend, which relies
  on `Show` instances to observe values strictly. If your program relies on laziness,
  it will probably crash or loop.\n\n* `import Debug.Hoed`\n\n   A new experimental
  backend built on top of [Hoed](https://github.com/MaartenFaddegon/Hoed/pulls). **Requires
  GHC 8.2 or higher**\n\n   Fully lazy, able to observe function values and provide
  call stacks: [example](https://rawgit.com/pepeiborra/debug-hoed/master/example/quicksort.html).
  The instrumentation is simpler, so it is known to work in more cases. It relies
  on `Observable` instances  which are derivable (the TH wrapper can take care of
  this automatically). Note that it will probably not work in multi threaded environments
  yet.\n\n## Requirements\n\n* Polymorphic functions must have type signatures, otherwise
  GHC will fail to infer an unambiguous type when annotated for debugging.\n* Types
  under observation must have `Show` (or `Observable`) instances, otherwise they will
  fall back to the default `<?>`.\n* Calling the debugged function inside GHCi records
  the results for viewing inside the UI.\n\nThe function can be called multiple times
  with different parameters, and the results of each\nindividual run can be selected
  inside the UI.\n\n## Notes\n\n* You can create multiple `debug [d|...]` blocks inside
  a module and you can also put more than one function inside a single block.\n\nA
  function being debugged can refer to another function also being debugged, but due
  to a limitation\nof Template Haskell, the definition of the function being called
  must occur above the point of its\nreference in the source module.\n\nDue to constant
  applicative forms (CAFs) distorting the debug trace, it is not advisable to run
  the debugger twice in the same GHCi session.\n\n## Limitations\n\nThis tool is quite
  new, so it has both limitations, places it is incomplete and bugs. Please report
  all the issues you find and help us make it better.\n\n## Alternatives\n\nFor practical
  alternatives for debugging Haskell programs you may wish to consider:\n\n* [GHCi
  debugger](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-debugger),
  simple imperative-style debugger in which you can stop a running computation in
  order to examine the values of variables. The debugger is integrated into GHCi.
  Robust, reliable, somewhat difficult to use.\n* [Hood](https://hackage.haskell.org/package/hood)
  and [Hoed](https://hackage.haskell.org/package/Hoed), a value-based observational
  debugger with a difficult user interface, deals well with laziness.\n* [Hat](https://hackage.haskell.org/package/hat),
  good ideas, but I've never got it working.\n\nCompared to the above, `debug` stresses
  simplicity of integration and user experience.\n\n## FAQ\n\n### Q: `debugView` fails
  talking about Wine?\n\nA: If you get `wine: invalid directory \"/home/f/.wine\"
  in WINEPREFIX: not an absolute path` when running `debugView` that means `xdg-open`
  is handled by [Wine](https://www.winehq.org/). Fix that and it will work once more.\n\n###
  Q: `debugView` fails with \"error: Variable not in scope: debugView\"?\n\nA: Explicitly
  load the Debug module in GHCi via `:m + Debug`\n"
license-name: BSD3
