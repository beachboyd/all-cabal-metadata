homepage: https://bitbucket.org/jakobeha/descript-lang/src/master/README.md
changelog-type: markdown
hash: 095d91a39e3bafc5fbd205fedc5848dbe42cad091256c020425118d4d7b3201c
test-bench-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.10.1 && <5'
  hspec: -any
  text: -any
  megaparsec: -any
  filepath: -any
  HUnit: -any
  array: -any
  containers: -any
  autoexporter: -any
  bifunctors: -any
  descript-lang: -any
  hashtables: -any
  transformers: -any
  QuickCheck: -any
  yaml: -any
  directory: -any
maintainer: jakobeha2@gmail.com
synopsis: Library, interpreter, and CLI for Descript programming language.
changelog: ! "# Revision history for descript-lang\n\n## 0.1.0  -- 2017-05-29\n\n##
  0.2.0  -- 2018-04-09\n\n- Starting almost from Scratch. Keeping the same syntax,
  name, general\n  concept / philosophy, and language. Getting rid of the \"logical\"\n
  \ idea where when a value implies something else, it still \"remembers\" its old
  self -\n  e.g. if `a: b` and `a: c`, before `a: b | c`, now you would get an ambiguity
  error.\n  That made the time complexity way too high.\n\n## 0.2.1 -- 2018-04-23\n\n-
  Got the CLI able to interpret and print out (evaluate) simple\n  programs.\n\n##
  0.2.2 -- 2018-05-01\n\n- Got the core language working:\n  - Parses\n  - Validates\n
  \ - Interprets\n  - Evaluates\n  - Compiles\n  - Reprints\n  - Refactors (currently
  just renames record heads)\n\n## 0.2.3 -- 2018-05-11\n\n- Added a basic language
  server, a few bugs but usable.\n\n## 0.2.4 -- 2018-05-17\n\n- Added importing and
  dependencies, refactored build model.\n"
basic-deps:
  exceptions: -any
  bytestring: -any
  stm: -any
  base: ! '>=4.10.1 && <5'
  yi-rope: -any
  unordered-containers: -any
  text: -any
  megaparsec: -any
  filepath: -any
  rainbow: -any
  data-default: -any
  array: -any
  containers: -any
  autoexporter: -any
  lens: -any
  bifunctors: -any
  descript-lang: -any
  hashtables: -any
  hslogger: -any
  network-uri: -any
  mtl: -any
  transformers: -any
  optparse-applicative: -any
  fsnotify: -any
  aeson: -any
  haskell-lsp: -any
  vector: -any
all-versions:
- '0.2.0.0'
author: Jakob Hain
latest: '0.2.0.0'
description-type: markdown
description: ! "# Descript-lang\n\nSimple programming language, work-in-progress.\n\nThe
  name comes from the philosophy that code \"describes\" what you want\nthe computer
  to do.\n\nCurrently Implemented:\n\n- Information can be encoded multiple ways in
  a single value.\n- Minimal syntax, flexible (like LISP).\n- Macros\n- Refactoring
  - being developed alongside an IDE, `descript-lang-vscode`.\n\n> Future Plans:\n>\n>
  - Gradual, \"ad-hoc\" typing\n> - Strict syntax and semantics, to reduce careless
  mistakes.\n\n## Setup\n\nThis is a Stack package. It should be installable via:\n\n```repl\n>
  stack install descript-lang\n```\n\notherwise, clone this repository and install
  manually.\n\n## Examples\n\nSkip to [[Overview]] for specific semantics. These examples
  are all\nlocated in `docs/examples` (not yet).\n\n> Most of these examples should
  actually compile in the current version\n> of Descript. If not, they should compile
  in a future version. Any\n> example could be modified in the future as the language
  develops.\n\n### Basic\n\nHere's an example program:\n\n```descript\n//Records.
  These are data structures and function signatures.\n//These records define natural
  numbers and addition.\nZero[]. //0 - in other languages this would be an ADT or
  singleton.\nSucc[prev]. //1 + prev - in other languages this would be an ADT, structure,
  or object.\nAdd[a, b]. //a + b - in other languages this would be a function.\n\n//Reducers.
  Reducers are like function implementations. These reducers \"implement\" Add.\nAdd[a:
  Zero[], b]: b //Adding 0 to anything produces 0.\nAdd[a: Succ[prev], b]: Add[a>prev,
  Succ[prev: b]] //Adding 1 + n to anything produces n + (1 + anything).\n\n//The
  main value. In other languages this would be the \"main\" function.\n//When the
  program is run, it will apply the reducers to this value and output the result.\nAdd[\n
  \ Succ[prev: Succ[prev: Succ[prev: Zero[]]]]\n  Succ[prev: Succ[prev: Zero[]]]\n]?
  //This encodes (2 + 3). What does it reduce to?\n```\n\nAssuming the above program
  is in a file named `Basic.dscr`, it can be\nevaluated in a terminal:\n\n```repl\n>
  descript-cli eval Basic.dscr\nSucc[prev: Succ[prev: Succ[prev: Succ[prev: Succ[prev:
  Zero[]]]]]]\n```\n\n### Types\n\nThe above example doesn't include types. Here's
  another example which\ndoes contain types. Notice that this example is exactly the
  same as the\nabove example with some extra code (the types) added.\n\n```descript\n//Records.
  These are data structures and function signatures.\n//These records define natural
  numbers and addition.\nNat[]. //A natural number - in other languages this would
  be a type.\nUntyped[]. //Denotes that a value needs to be typed.\nZero[]. //0 -
  in other languages this would be an ADT or singleton.\nSucc[prev]. //1 + prev -
  in other languages this would be an ADT, structure, or object.\nAdd[a, b]. //a +
  b - in other languages this would be a function.\n\n//Reducers. Reducers are like
  function implementations. These reducers \"implement\" Add.\nAdd[a: Nat[], b: Nat[]]
  | Untyped[]: Nat[] //Adding naturals produces a natural.\nAdd[a: Zero[], b]: b //Adding
  0 to anything produces 0.\nAdd[a: Succ[prev], b]: Add[a: a>prev, b: Succ[prev: b]]
  //Adding 1 + n to anything produces n + (1 + anything).\n\n//More reducers. These
  reducers aren't really function implementations.\n//In other languages, these would
  assign the types to the instances.\nZero[] | Untyped[]: Zero[] | Nat[] //Zero is
  a natural. Need `Zero[]` in RHS so it isn't consumed.\nSucc[prev: Nat[]] | Untyped[]:
  Nat[] //1 + n is a natural if n is a natural. Don't need `Succ[...]` in RHS because
  the only part consumed is the type.\n\n//The main value. In other languages this
  would be the \"main\" function.\n//When the program is run, it will apply the reducers
  to this value and output the result.\nAdd[\n  a: Succ[prev: Succ[prev: Succ[prev:
  Zero[] | Untyped[]] | Untyped[]] | Untyped[]] | Untyped[]\n  b: Succ[prev: Succ[prev:
  Zero[] | Untyped[]] | Untyped[]] | Untyped[]\n] | Untyped[]? //What does this reduce
  to?\n\n```\n\nThis above program evaluated:\n\n```repl\n> descript-cli eval Types.dscr\nSucc[prev:
  Succ[prev: Succ[prev: Succ[prev: Succ[prev: Zero[] | Nat[]] | Nat[]] | Nat[]] |
  Nat[]] | Nat[]] | Nat[]\n```\n\n### Primitives and Built-ins\n\nDescript has built-in
  support for basic things like numbers and\naddition. The following example:\n\n```descript\nAdd[left,
  right].\n\nAdd[left: #Number[], right: #Number[]]: #Add[a: left, b: right]\n\nAdd[left:
  3, right: 2]?\n```\n\nevaluated:\n\n```repl\n> descript-cli eval Primitive.dscr\n5\n```\n\n###
  Modules\n\nDescript also allows one file to import another, via modules:\n\n```descript\n//Module
  declaration.\n//If not provided, all files will implicitly have `module <filename>`.\n//This
  is required for a file import other files outside its directory.\nmodule Import\n\nimport
  Base{Add}\n\nExp2[5]?\n```\n\nevaluated:\n\n```repl\n> descript-cli eval Import.dscr\n25\n```\n\n###
  Compiled\n\nAll of the above examples would be considered \"interpreted\". A Descript\nprogram
  can also be compiled, if you make its main value reduce to code\nblock - a record
  which represents source code.\n\n```descript\nimport Base\n\nPrgm[statement].\nPrint[text].\n\nPrgm[statement:
  Code[lang: \"C\", content: String]]: Code[\n  lang: \"C\"\n  content: App3[left:
  \"int main(string[] args) { \", center: statement>content, right: \"}\"]\n]\nPrint[text:
  String]: Code[lang: \"C\", content: App3[left: \"println(\\\"\", center: text, right:
  \"\\\");\"]\n\nPrgm[statement: Print[text: \"Hello world\"]]?\n```\n\nthe above
  program evaluates:\n\n```repl\n> descript-cli eval Import.dscr\nCode[lang: \"C\",
  content: \"int main(string[] args) { println(\\\"Hello world!\\\"); }\"]\n```\n\nbut
  it can also be compiled:\n\n```repl\n> descript-cli compile Import.dscr\n```\n\nthe
  above command will generate a new file, `Import.c`. When fed to a C\ncompiler, this
  will create a simple \"Hello world\" program.\n\n> In the future, the Descript CLI
  will probably invoke the C compiler\n> itself. Multi-file packages (compiled outputs)
  will also be implemented.\n\n### Syntax Sugar\n\n> ... TODO Specify - what is the
  syntax sugar, and how should it be\nimplemented?\n\n### Macros\n\n> ... TODO Describe
  macros\n\n## Overview\n\nSee [[Specs]] for a full, more detailed specification.\n\nThere
  are 2 types of expressions - **values** and **reducers**.\n**Values** are unions
  of **parts**. Example: `A[] | \"B\" | C[d: E[]]`.\nThere are 2 types of **parts**:\n\n-
  **Atoms**: Numbers, strings. Examples: `4`, `\"Hello\", \"B\"`.\n- **Records**:
  These are like records in Haskell - each record has a\n  unique name, and can contain
  properties, which are other values. Examples:\n  `Hello[]`, `Foo[content: 3], A[],
  C[d: E[]]`.\n\n**Reducers** transform values, like functions in other language.\nExample:
  `Foo[a: Bar[b]]: Baz[c: a>b]`. They consist of an\n**input value** (`Foo[a: Bar[b]]`)
  and an **output value**\n(`Baz[c: a>b]`). Input and output values are special:\n\n-
  Input values can contain properties without values. An example is the\n  `b` in
  `Bar[b]`.\n- Output values can contain **property paths**. An example is `a>c` in\n
  \ `Baz[c: a>c]`.\n\nA reducer can be **applied** to a value if its input **matches**
  parts\nof it. The reducer **consumes** the parts of the value matched by its\ninput,
  and **produces** extra parts using its output. Examples:\n\n- Applying `Foo[a: Bar[b]]:
  Baz[c: a>b]` to `Foo[a: Bar[b: Qux[d: 7]]]`\n  yields `Baz[c: Qux[d: 7]]`.\n- Applying
  `Foo[a: Bar[b]]: Baz[c: a>b]` to\n  `8 | Foo[a: Bar[b: Qux[d: 7]]] | XML[z: 15]`
  yields\n  `8 | Baz[c: Qux[d: 7]] | XML[z: 15]`.\n- Applying `Foo[a: Bar[b]] | XML[z]:
  Baz[c: a>b]` to\n  `8 | Foo[a: Bar[b: Qux[d: 7]]] | XML[z: 15]` yields\n  `8 | Baz[c:
  Qux[d: 7]]`.\n- You can't apply `Foo[a: Bar[b]] | XML[z]: Baz[c: a>b]` to\n  `Foo[a:
  Bar[b: Qux[d: 7]]]` (`XML[z]` doesn't match anything).\n\nEvery program contains
  reducers, and a value called the **query**. The\nprogram is **interpreted** by taking
  the query, and applying the\nreducers to it as much as possible, until no reducers
  can be applied.\n\nReducers can also be applied to input and output values - in
  these\ncases, the reducers are **macros**.\n\n> ... TODO Better overview:\n>\n>
  - Improve readability\n> - Describe how input and output are matched/consumed/produced\n>
  \  (preferrably not verbosely?)\n> - Maybe add record types and injections\n"
license-name: GPL-3
