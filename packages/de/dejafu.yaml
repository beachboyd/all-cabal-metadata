homepage: https://github.com/barrucadu/dejafu
changelog-type: markdown
hash: 5b374edb323c113d877046aac2221185356c2f338dcdcfe82fa6a09e6c3793d7
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: Systematic testing for Haskell concurrency.
changelog: ! "Release Notes\n=============\n\nAll notable changes to this project
  will be documented in this file.\n\nThis project is versioned according to the [Package
  Versioning Policy](https://pvp.haskell.org), the\n*de facto* standard Haskell versioning
  scheme.\n\n\n0.9.0.1\n-------\n\n- **Date**    2017-10-28\n- **Git tag** [dejafu-0.9.0.1][]\n-
  **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.1\n\n### Miscellaneous\n\n-
  Fixed an issue where tests with exception handlers would sometimes skip over nested
  handlers or\n  try to take the tail of an empty list (#139 and #141).\n\n[dejafu-0.9.0.1]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.0.0\n-------\n\n-
  **Date**    2017-10-11\n- **Git tag** [dejafu-0.9.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.0\n\n###
  Test.DejaFu.Common\n\n- New `isInternalError`, `isAbort`, `isDeadlock`, `isUncaughtException`,
  and\n  `isIllegalSubconcurrency` functions for matching failure types.  Also exported
  from Test.DejaFu.\n\n- The `UncaughtException` `Failure` constructor now includes
  the exception.\n\n    The `Read`, `Enum`, and `Bounded` instances are gone.  The
  `Eq`, `Ord`, and `NFData` instances\n    use the `show` of the exception.  Pretty-printed
  failures include the exception text.\n\n- New `ThreadDelay` and `WillThreadDelay`
  constructors in `ThreadAction` and `Lookahead`.  Uses of\n  `threadDelay` are no
  longer reported as a use of `yield`.\n\n[dejafu-0.9.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.8.0.0\n-------\n\n-
  **Date**    2017-09-26\n- **Git tag** [dejafu-0.8.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.8.0.0\n\n###
  Test.DejaFu.Common\n\n- Execution traces now only include a single item of lookahead
  (#120).\n- STM traces now include IDs of created `TVar`s (#80).\n\n### Test.DejaFu.Schedule\n\n-
  Schedulers no longer take the execution trace so far (#106).\n- The `Scheduler`
  type is now a newtype (#122).\n\n[dejafu-0.8.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.8.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.3.0\n-------\n\n-
  **Date**    2017-09-26\n- **Git tag** [dejafu-0.7.3.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.3.0\n\n###
  Test.DejaFu.Common\n\n- A new function `threadNames`, to get all named threads from
  a trace.\n\n### Miscellaneous\n\n- Escaping a mask by raising an exception now correctly
  restores the masking state (#118).\n- Named threads which are only started by a
  pre-emption now show up in the trace (#101).\n\n[dejafu-0.7.3.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.3.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.2.0\n-------\n\n-
  **Date**    2017-09-16\n- **Git tag** [dejafu-0.7.2.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.2.0\n\n###
  Test.DejaFu.STM\n\n- The `STM n r` monad now has `Alternative` and `MonadPlus` instances,
  using `orElse` for the binary\n  operation and `retry` for the unit.\n\n### Miscellaneous\n\n-
  The `Eq` instance for `ThreadId`, `CRefId`, `MVarId`, and `TVarId` now only compares
  the numbers,\n  not the names.\n\n    This makes it consistent with the `Ord` instances,
  and is also a small performance gain.\n\n- Now compatible with concurrency-1.2.0.0.\n\n[dejafu-0.7.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.3\n-------\n\n-
  **Date**    2017-09-08\n- **Git tag** [dejafu-0.7.1.3][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.3\n\n###
  Miscellaneous\n\n- Aborted STM transactions are now rolled back correctly (issue
  #111).\n- Slightly improved run-time of systematic testing.\n\n[dejafu-0.7.1.3]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.3\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.2\n-------\n\n-
  **Date**    2017-08-21\n- **Git tag** [dejafu-0.7.1.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.2\n\n###
  Miscellaneous\n\n- Errors thrown with `Control.Monad.fail` no longer terminate testing,
  and are now correctly treated\n  as asynchronous exceptions.\n\n[dejafu-0.7.1.2]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.1\n-------\n\n-
  **Date**    2017-08-16\n- **Git tag** [dejafu-0.7.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.1\n\n###
  Miscellaneous\n\n- Significantly reduced memory usage in systematic testing when
  discarding traces.\n\n    Previously this was `O(max trace length * number of executions)`\n\n
  \   Now it's `O(max trace length + total size of traces kept)`\n\n[dejafu-0.7.1.1]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.0\n-------\n\n-
  **Date**    2017-08-10\n- **Git tag** [dejafu-0.7.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.0\n\n###
  Test.DejaFu\n\n- Exposed the new SCT discard functions through `dejafuDiscard` and
  `dejafuDiscardIO`.\n\n    There are no `dejafusDiscard` and `dejafusDiscardIO` functions
  because this would probably be\n    confusing, as the traces are shared.\n\n- The
  `Discard` type and `defaultDiscard` function are also exposed.\n\n### Test.DejaFu.Defaults\n\n-
  Added a new `defaultDiscarder` function, which discards nothing.\n\n### Test.DejaFu.SCT\n\n-
  Added new SCT functions to selectively discard results or traces, which can be a
  significant\n  memory saving if you know what sorts of results you are interested
  in:\n    - New type: `Discard`.\n    - New functions: `runSCTDiscard`, `resultsSetDiscard`,
  `sctBoundDiscard`,\n      `sctUniformRandomDiscard`, and `sctWeightedRandomDiscard`.\n
  \   - `resultsSet` and `resultsSet'` now discard traces as they are produced, rather
  than all at the\n      end, greatly improving performance when traces are large.\n\n[dejafu-0.7.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.2\n-------\n\n-
  **Date**    2017-06-12\n- **Git tag** [dejafu-0.7.0.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.2\n\n###
  Test.DejaFu.Refinement\n\n- Removed unnecessary typeclass constraints from `check`,
  `check'`, `checkFor`, and\n  `counterExamples`.\n\n### Miscellaneous\n\n- Removed
  an unnecessary dependency on [monad-loops][].\n\n[monad-loops]: https://hackage.haskell.org/package/monad-loops\n[dejafu-0.7.0.2]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.1\n-------\n\n-
  **Date**    2017-06-09\n- **Git tag** [dejafu-0.7.0.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.1\n\n###
  Test.DejaFu.Refinement\n\n- `check`, `check'`, and `checkFor` are now faster if
  there are multiple counterexamples.\n- The above and `counterExamples` are now faster
  even if there is only a single counterexample in\n  some cases.\n\n[dejafu-0.7.0.1]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.0\n-------\n\n-
  **Date**    2017-06-07\n- **Git tag** [dejafu-0.7.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.0\n\n###
  Test.DejaFu\n\n- The new Test.DejaFu.Defaults and Test.DejaFu.Refinement modules
  are re-exported.\n- The new smart constructors from Test.DejaFu.SCT are exported.\n\n###
  Test.DejaFu.Defaults\n\n- The `default*` values are now defined in the new Test.DejaFu.Defaults
  module. There is no breaking\n  API change as they are re-exported from Test.DejaFu.\n\n###
  Test.DejaFu.Refinement\n\n- A new module for checking observational properties of
  the side-effects of stateful, concurrent\n  functions.\n\n    This is related to
  my work on [CoCo][], allowing dejafu to test what CoCo discovers.\n\n### Test.DejaFu.SCT\n\n-
  The `Way` type is now abstract and exposes smart constructor functions:\n    - `systematically`,
  corresponding to the old `Systematically`.\n    - `randomly`, corresponding to the
  old `Randomly`,\n    - `uniformly`, a new uniform random (as opposed to weighted
  random) scheduler.\n    - `swarmy`, corresponding to the old `Randomly` and specifying
  how many executions to use the\n      same weights for.\n- A new `sctUniformRandom`
  function to do uniform (non-weighted) scheduling.\n- The `sctRandom` function is
  now called `sctWeightedRandom` and can now re-use the same weights for\n  multiple
  executions.\n- The `sctPreBound`, `sctFairBound`, and `sctLengthBound` functions
  have been removed.\n\n### Fixed\n\n- An issue where `subconcurrency` would re-use
  `MVar` IDs, leading to false reports of deadlock on\n  occasion (issue #81).\n\n[CoCo]:
  https://github.com/barrucadu/coco\n[dejafu-0.7.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.6.0.0\n-------\n\n-
  **Date**    2017-04-08\n- **Git tag** [dejafu-0.6.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.6.0.0\n\n###
  Test.DejaFu.Conc\n\n- The `Conc n r a` type is now `ConcT r n a`, and has been given
  a `MonadTrans` instance. Uses of\n  `lift` appear in the execution trace in the
  same way as `liftBase` and `liftIO`.\n    - The `ConcIO` and `ConcST` aliases have
  been updated, so this should be an invisible change to\n      most users.\n\n###
  Test.DejaFu.SCT\n\n- `Way` is now a GADT, no longer taking a type parameter. This
  greatly improves type inference when\n  the `Systematically` constructor is used.\n
  \   - The `NFData` instance for `Way` is now gone. The alternative was requiring
  that any\n      `RandomGen` used also implement `NFData`, which is *very* restrictive\n\n###
  Miscellaneous\n\n- There is now a changelog.\n- Test.DejaFu.Common is now considered
  to form part of the public API of the library.\n- Every definition and instance
  now has a Haddock \"@since\" annotation.\n\n[dejafu-0.6.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.6.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.3\n-------\n\n-
  **Date**    2017-04-05\n- **Git tag** [dejafu-0.5.1.3][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.3\n\n###
  Miscellaneous\n\n- The version range on the concurrency package has been changed
  to 1.1.*.\n\n[dejafu-0.5.1.3]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.3\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.2\n-------\n\n-
  **Date**    2017-03-04\n- **Git tag** [dejafu-0.5.1.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.2\n\n**This
  version was misnumbered! It should have caused a minor version bump!**\n\n### Test.DejaFu.Conc\n\n-
  New `MonadRef` and `MonadAtomicRef` instances for the `Conc` type using `CRef`.\n\n###
  Fixed\n\n- A long-standing bug where if the main thread is killed with a `throwTo`,
  the throwing neither\n  appears in the trace nor correctly terminates the execution.\n\n###
  Miscellaneous\n\n- The maximum supported version of the concurrency package has
  been changed to 1.1.1.*.\n\n[dejafu-0.5.1.2]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.1\n-------\n\n-
  **Date**    2017-02-25\n- **Git tag** [dejafu-0.5.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.1\n\n###
  Fixed\n\n- The correct scheduler state is now passed to the scheduler immediately
  after the termination of a\n  `subconcurrency` action.\n- SCT of subconcurrency
  no longer loops infinitely.\n\n[dejafu-0.5.1.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.0\n-------\n\n-
  **Date**    2017-02-25\n- **Git tag** [dejafu-0.5.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.0\n\n###
  Test.DejaFu\n\n- A new `NFData` instance for `Result`.\n\n### Test.DejaFu.Common\n\n-
  New instances:\n    - `NFData` for `ThreadId`, `CRefId`, `MVarId`, `TVarId`, `IdSource`,
  `ThreadAction`,\n      `Lookahead`, `ActionType`, `TAction`, `Decision`, `Failure`,
  and `MemType`.\n    - `Eq`, `Ord`, and `Show` instances for `IdSource`.\n\n### Test.DejaFu.SCT\n\n-
  New `NFData` instances for `Way`, `Bounds`, `PreemptionBound`, `FairBound`, and
  `LengthBound`.\n- New strict variants of `runSCT` and `resultsSet`: `runSCT'` and
  `resultsSet'`.\n\n### Test.DejaFu.STM\n\n- A new `NFData` instance for `Result`.\n\n[dejafu-0.5.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.2\n-------\n\n-
  **Date**    2017-02-22\n- **Git tag** [dejafu-0.5.0.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.0.2\n\n**This
  version was misnumbered! It should have caused a major version bump!**\n\n### Test.DejaFu.Common\n\n-
  A new `StopSubconcurrency` constructor of `ThreadAction`.\n\n### Changed\n\n- A
  `StopConcurrency` action appears in the execution trace immediately after the end
  of a\n  `subconcurrency` action (much like the `PopCatching` and `ResetMasking`
  actions which appear after\n  a catch and mask).\n- A `subconcurrency` action now
  inherits the number of capabilities from the outer computation,\n  rather than being
  reset to 2 as before.\n\n### Miscellaneous\n\n- Test.DejaFu.SCT now compiles with
  MonoLocalBinds enabled (implied by GADTs and TypeFamilies),\n  which may be relevant
  to hackers.\n\n[dejafu-0.5.0.2]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.1\n-------\n\n-
  **Date**    2017-02-21\n- **Git tag** [dejafu-0.5.0.1][]\n- **This version was never
  pushed to hackage, whoops!**\n\n### Fixed\n\n- `readMVar` is once again considered
  a \"release action\" for the purposes of fair-bounding.\n\n[dejafu-0.5.0.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.0\n-------\n\n-
  **Date**    2017-02-21\n- **Git tag** [dejafu-0.5.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.0.0\n\n###
  Test.DejaFu\n\n- All the functions which did take a `Bounds` now take a `Way` instead
  and support random scheduling\n  as well.\n\n### Test.DejaFu.Common\n\n- New `Eq`
  instances for `ThreadAction` and `Lookahead`.\n- A `TryReadMVar` constructor for
  `ThreadAction` and a corresponding `WillTryReadMVar` constructor\n  for `Lookahead`.\n\n###
  Test.DejaFu.Conc\n\n- A new testing-only `subconcurrency` function, to run a concurrent
  action and do something with its\n  result in the same concurrent context, even
  if it fails.\n\n### Test.DejaFu.SCT\n\n- An `sctRandom` function to run a fixed
  number of randomly-scheduled executions of a program.\n- The `Way` type, to abstract
  over how to run a concurrent program, used by new functions `runSCT`\n  and `resultsSet`.\n\n###
  Fixed\n\n- Some previously-missed `CRef` action dependencies are no longer missed.\n\n###
  Miscellaneous\n\n- The supported version of the concurrency package was bumped to
  1.1.0.0, introducing `tryReadMVar`.\n- A bunch of things were called \"Var\" or
  \"Ref\", these are now consistently \"MVar\" and \"CRef\".\n- Significant performance
  improvements in both time and space.\n- The dpor package has been merged back into
  this, as it turned out not to be very generally\n  useful. There is no direct replacement,
  but I have no intent to update it, so the dpor package is\n  now __deprecated__.\n\n[dejafu-0.5.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.4.0.0\n-------\n\n-
  **Date**    2016-09-10\n- **Git tag** [dejafu-0.4.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.4.0.0\n\n###
  Test.DejaFu\n\n- The `autocheck'` function now takes the schedule bounds as a parameter.\n-
  New `runTestM` and `runTestM'` functions, monad-polymorphic variants of the now-removed\n
  \ `runTestIO` and `runTestIO'` functions.\n\n### Test.DejaFu.Conc\n\n- The `Conc`
  type no longer has the STM type as a parameter.\n- A new `runConcurrent` function,
  a monad-polymorphic version of the now-removed `runConcST` and\n  `runConcIO` functions.\n\n###
  Test.DejaFu.SCT\n\n- The `ST`-specific functions are now monad-polymorphic.\n- The
  `IO` function variants have been removed.\n\n### Test.DejaFu.STM\n\n- A new `runTransaction`
  function, a monad-polymorphic version of the now-removed `runTransactionST`\n  and
  `runTransactionIO` functions.\n\n### Changed\n\n- The termination of the main thread
  in execution traces now appears as a single `Stop`, rather than\n  the sequence
  `Lift, Stop`.\n- Execution traces printed by the helpful functions in Test.DejaFu
  now include a key of thread\n  names.\n\n### Miscellaneous\n\n- Remodularisation:\n
  \   - The Control.* modules have all been split out into a separate \"concurrency\"
  package.\n    - Many definitions from other modules have been moved to the new Test.DejaFu.Common
  module.\n    - The Test.DejaFu.Deterministic module has been renamed to Test.DejaFu.Conc\n\n[dejafu-0.4.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.4.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.2.1\n-------\n\n-
  **Date**    2016-07-21\n- **Git tag** [dejafu-0.3.2.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.2.1\n\n###
  Fixed\n\n- The implementation of the STM `orElse` for `STMLike` incorrectly handled
  some state\n  non-associatively, leading to false deadlocks being reported in some
  cases.\n\n[dejafu-0.3.2.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.2.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.2.0\n-------\n\n-
  **Date**    2016-06-06\n- **Git tag** [dejafu-0.3.2.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.2.0\n\n**Builds
  with both dpor-0.1 and dpor-0.2, however some improvements require dpor-0.2.**\n\n###
  Fixed\n\n- (faster with dpor-0.2) Executions missed due to daemon threads with uninteresting
  first actions\n  are no longer missed.\n\n### Changed\n\n- (requires dpor-0.2) Significantly
  improved dependency inference of exceptions, greatly improving\n  performance of
  testcases using exceptions.\n- Significantly improved dependency inference of STM
  transactions, greatly improving performance of\n  testcases using STM.\n\n[dejafu-0.3.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.1.1\n-------\n\n-
  **Date**    2016-05-26\n- **Git tag** [dejafu-0.3.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.1.1\n\n###
  Miscellaneous\n\n- Now supports GHC 8.\n\n[dejafu-0.3.1.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.1.0\n-------\n\n-
  **Date**    2016-05-02\n- **Git tag** [dejafu-0.3.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.1.0\n\n###
  Fixed\n\n- Context switches around relaxed memory commit actions could cause the
  number of pre-emptions in an\n  execution to be miscounted, leading to the pre-emption
  bounding being too lenient.\n\n[dejafu-0.3.1.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.0.0\n-------\n\n-
  **Date**    2016-04-03\n- **Git tag** [dejafu-0.3.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.0.0\n\n**The
  minimum supported version of GHC is now 7.10.**\n\nI didn't write proper release
  notes, and this is so far back I don't really care to dig through the\nlogs.\n\n[dejafu-0.3.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.2.0.0\n-------\n\n-
  **Date**    2015-12-01\n- **Git tag** [0.2.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.2.0.0\n\nI
  didn't write proper release notes, and this is so far back I don't really care to
  dig through the\nlogs.\n\n[0.2.0.0]: https://github.com/barrucadu/dejafu/releases/tag/0.2.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.1.0.0\n-------\n\n-
  **Date**    2015-08-27\n- **Git tag** [0.1.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.1.0.0\n\nInitial
  release. Go read the API docs.\n\n[0.1.0.0]: https://github.com/barrucadu/dejafu/releases/tag/0.1.0.0\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.9'
  base: ! '>=4.8 && <5'
  leancheck: ! '>=0.6 && <0.7'
  ref-fd: ! '>=0.4 && <0.5'
  containers: ! '>=0.5 && <0.6'
  concurrency: ! '>=1.1 && <1.3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <2'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.2.0'
- '0.3.2.1'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.2'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.1.0'
- '0.7.1.1'
- '0.7.1.2'
- '0.7.1.3'
- '0.7.2.0'
- '0.7.3.0'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.0.1'
author: Michael Walker
latest: '0.9.0.1'
description-type: markdown
description: ! "dejafu\n======\n\n> [Déjà Fu is] A martial art in which the user's
  limbs move in time as\n> well as space, […] It is best described as \"the feeling
  that you\n> have been kicked in the head this way before\"\n>\n> -- Terry Pratchett,
  Thief of Time\n\nConcurrency is nice, deadlocks and race conditions not so much.
  The\n`Par` monad family, as defined in [abstract-par][] provides\ndeterministic
  parallelism, but sometimes we can tolerate a bit of\nnondeterminism.\n\nThis package
  builds on the concurrency package (also in this\nrepository) by enabling you to
  systematically and deterministically\ntest your concurrent programs.\n\nThe documentation
  of the latest developmental version is\n[available online][docs]. Examples can be
  found in the test suite.\n\n**Note on the test suite:** This is in a separate project\n(dejafu-tests)
  because Cabal-the-library is a bit naff. See this\n[issue][].\n\nDéjà Fu and `IO`\n----------------\n\nThe
  core assumption underlying Déjà Fu is that any apparent\nnondeterminism arises purely
  from the scheduling behaviour. To put it\nanother way, a given computation, parametrised
  with a fixed set of\nscheduling decisions, is deterministic.\n\nWhilst this assumption
  may not hold in general when `IO` is involved,\nyou should strive to produce test
  cases where it does.\n\nMemory Model\n------------\n\nThe testing functionality
  supports a few different memory models, for\ncomputations which use non-synchronised
  `CRef` operations. The\nsupported models are:\n\n- **Sequential Consistency:** A
  program behaves as a simple\n    interleaving of the actions in different threads.
  When a CRef is\n    written to, that write is immediately visible to all threads.\n\n-
  **Total Store Order (TSO):** Each thread has a write buffer. A\n    thread sees
  its writes immediately, but other threads will only\n    see writes when they are
  committed, which may happen later. Writes\n    are committed in the same order that
  they are created.\n\n- **Partial Store Order (PSO):** Each CRef has a write buffer.
  A\n    thread sees its writes immediately, but other threads will only\n    see
  writes when they are committed, which may happen later. Writes\n    to different
  CRefs are not necessarily committed in the same order\n    that they are created.\n\nIf
  a testing function does not take the memory model as a parameter,\nit uses TSO.\n\nContributing\n------------\n\nBug
  reports, pull requests, and comments are very welcome!\n\nFeel free to contact me
  on GitHub, through IRC (#haskell on freenode),\nor email (mike@barrucadu.co.uk).\n\n[docs]:
  \        https://docs.barrucadu.co.uk/dejafu\n[abstract-par]: https://hackage.haskell.org/package/abstract-par/docs/Control-Monad-Par-Class.html\n[issue]:
  \       https://github.com/commercialhaskell/stack/issues/1122\n"
license-name: MIT
