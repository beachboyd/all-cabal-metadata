homepage: https://github.com/barrucadu/dejafu
changelog-type: text
hash: 80096dda5b06767c2537d43ea02a7d0525bcb09ca326a1ba4d508b92e5bd8ccd
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: A library for unit-testing concurrent programs.
changelog: ! "Release Notes\n=============\n\nThis project is versioned according
  to the PVP_, the *de facto*\nstandard Haskell versioning scheme.\n\n.. _PVP: https://pvp.haskell.org/\n\n1.2.0.0
  - The Settings Release (2018-03-06)\n-------------------------------------------\n\n*
  Git: :tag:`dejafu-1.2.0.0`\n* Hackage: :hackage:`dejafu-1.2.0.0`\n\n**Contributors:**
  :u:`qrilka` (:pull:`236`).\n\nAdded\n~~~~~\n\n* (:pull:`238`) A record-based approach
  to SCT configuration:\n\n    * ``Test.DejaFu.Settings``\n      (re-exported from
  ``Test.Dejafu`` and ``Test.DejaFu.SCT``)\n    * ``Test.DejaFu.Settings.Settings``\n
  \   * ``Test.DejaFu.Settings.defaultSettings``\n    * ``Test.DejaFu.Settings.fromWayAndMemType``\n
  \   * Lenses:\n        * ``Test.DejaFu.Settings.lway``\n        * ``Test.DejaFu.Settings.lmemtype``\n
  \       * ``Test.DejaFu.Settings.ldiscard``\n        * ``Test.DejaFu.Settings.learlyExit``\n
  \       * ``Test.DejaFu.Settings.ldebugShow``\n        * ``Test.DejaFu.Settings.ldebugPrint``\n
  \   * Lens helpers:\n        * ``Test.DejaFu.Settings.get``\n        * ``Test.DejaFu.Settings.set``\n
  \   * Runners:\n        * ``Test.DejaFu.SCT.runSCTWithSettings``\n        * ``Test.DejaFu.SCT.runSCTWithSettings'``\n
  \       * ``Test.DejaFu.SCT.resultsSetWithSettings``\n        * ``Test.DejaFu.SCT.resultsSetWithSettings'``\n\n*
  (:pull:`238`) Settings-based test functions:\n\n    * ``Test.DejaFu.autocheckWithSettings``\n
  \   * ``Test.DejaFu.dejafuWithSettings``\n    * ``Test.DejaFu.dejafusWithSettings``\n
  \   * ``Test.DejaFu.runTestWithSettings``\n\nDeprecated\n~~~~~~~~~~\n\n* (:pull:`238`)
  SCT function variants:\n\n    * ``Test.DejaFu.SCT.runSCTDiscard``\n    * ``Test.DejaFu.SCT.resultSetDiscard``\n
  \   * ``Test.DejaFu.SCT.runSCTDiscard'``\n    * ``Test.DejaFu.SCT.resultSetDiscard'``\n
  \   * ``Test.DejaFu.SCT.sctBound``\n    * ``Test.DejaFu.SCT.sctBoundDiscard``\n
  \   * ``Test.DejaFu.SCT.sctUniformRandom``\n    * ``Test.DejaFu.SCT.sctUniformRandomDiscard``\n
  \   * ``Test.DejaFu.SCT.sctWeightedRandom``\n    * ``Test.DejaFu.SCT.sctWeightedRandomDiscard``\n\n*
  (:pull:`238`) The ``Test.DejaFu.Defaults`` module.  Import\n  ``Test.DejaFu.Settings``
  instead.\n\n* (:pull:`238`) ``Test.DejaFu.dejafuDiscard``.\n\nRemoved\n~~~~~~~\n\n*
  (:pull:`238`) ``Test.DejaFu.Defaults.defaultDiscarder``, as the\n  discard function
  is optional.\n\n\n1.1.0.2 (2018-03-01)\n--------------------\n\n* Git: :tag:`dejafu-1.1.0.2`\n*
  Hackage: :hackage:`dejafu-1.1.0.2`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* (:pull:`235`)
  The documentation for ``Test.DejaFu.Conc.dontCheck``\n  and ``subconcurrency`` clarify
  that an illegal use does not\n  necessarily cause a failing test.\n\n\n1.1.0.1 (2018-02-26)\n--------------------\n\n*
  Git: :tag:`dejafu-1.1.0.1`\n* Hackage: :hackage:`dejafu-1.1.0.1`\n\n**Contributors:**
  :u:`qrilka` (:pull:`229`).\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* The upper bound
  on :hackage:`exceptions` is <0.10.\n\n\n1.1.0.0 (2018-02-22)\n--------------------\n\n*
  Git: :tag:`dejafu-1.1.0.0`\n* Hackage: :hackage:`dejafu-1.1.0.0`\n\n**Contributors:**
  :u:`qrilka` (:pull:`228`).\n\nAdded\n~~~~~\n\n* (:pull:`219`) The testing-only ``Test.DejaFu.Conc.dontCheck``\n
  \ function, and associated definitions:\n\n    * ``Test.DejaFu.Types.DontCheck``\n
  \   * ``Test.DejaFu.Types.WillDontCheck``\n    * ``Test.DejaFu.Types.IllegalDontCheck``\n
  \   * ``Test.DejaFu.Types.isIllegalDontCheck``\n\n* (:pull:`219`) A snapshotting
  approach based on\n  ``Test.DejaFu.Conc.dontCheck``:\n\n    * ``Test.DejaFu.Conc.runForDCSnapshot``\n
  \   * ``Test.DejaFu.Conc.runWithDCSnapshot``\n    * ``Test.DejaFu.Conc.canDCSnapshot``\n
  \   * ``Test.DejaFu.Conc.threadsFromDCSnapshot``\n\nChanged\n~~~~~~~\n\n* (:pull:`219`)
  SCT functions automatically use the snapshotting\n  mechanism when possible.\n\n\n1.0.0.2
  (2018-02-18)\n--------------------\n\n* Git: :tag:`dejafu-1.0.0.2`\n* Hackage: :hackage:`dejafu-1.0.0.2`\n\n**Contributors:**
  :u:`qrilka` (:pull:`214`).\n\nChanged\n~~~~~~~\n\n* (:issue:`193`) Deterministically
  assign commit thread IDs.\n\nFixed\n~~~~~\n\n* (:issue:`189`) Remove an incorrect
  optimisation in systematic\n  testing for ``getNumCapabilities`` and ``setNumCapabilities``.\n\n*
  (:issue:`204`) Fix missed interleavings in systematic testing with\n  some uses
  of STM.\n\n* (:issue:`205`) Fix ``forkOS`` being recorded in an execution trace\n
  \ as if it were a ``fork``.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* (:pull:`180`) Doctest
  Haddock examples in ``Test.DejaFu`` and\n  ``Test.DejaFu.Refinement``.\n\n* (:pull:`185`,
  :pull:`215`) Check some more internal invariants and\n  throw on error.\n\n* (:pull:`214`)
  Remove unnecessary use of ``head``.\n\n\n1.0.0.1 (2018-01-19)\n--------------------\n\n*
  Git: :tag:`dejafu-1.0.0.1`\n* Hackage: :hackage:`dejafu-1.0.0.1`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The upper bound on :hackage:`concurrency` is <1.5.\n\n\n1.0.0.0 - The API Friendliness
  Release (2017-12-23)\n---------------------------------------------------\n\n* Git:
  :tag:`dejafu-1.0.0.0`\n* Hackage: :hackage:`dejafu-1.0.0.0`\n\nAdded\n~~~~~\n\n*
  ``Test.DejaFu.alwaysSameOn`` and ``alwaysSameBy`` predicate helpers.\n\n* ``Test.DejaFu.SCT.strengthenDiscard``
  and ``weakenDiscard``\n  functions to combine discard functions.\n\n* (:issue:`124`)
  The ``Test.DejaFu.ProPredicate`` type, which contains\n  both an old-style ``Predicate``
  and a discard function.  It is also\n  a ``Profunctor``, parameterised by the input
  and output types.\n\n* (:issue:`124`) ``Test.DejaFu.alwaysNothing`` and\n  ``somewhereNothing``
  predicate helpers, like ``alwaysTrue`` and\n  ``somewhereTrue``, to lift regular
  functions into a\n  ``ProPredicate``.\n\n* (:issue:`137`) The ``Test.DejaFu.Types.Id``
  type.\n\n* (:pull:`145`) Thread action and lookahead values for bound threads:\n\n
  \   * ``Test.DejaFu.Types.ForkOS``\n    * ``Test.DejaFu.Types.IsCurrentThreadBound``\n
  \   * ``Test.DejaFu.Types.WillForkOS``\n    * ``Test.DejaFu.Types.WillIsCurrentThreadBound``\n\n*
  (:issue:`155`) ``Test.DejaFu.Types`` and ``Test.DejaFu.Utils``\n  modules, each
  containing some of what was in ``Test.DejaFu.Common``.\n\nChanged\n~~~~~~~\n\n*
  All testing functions require ``MonadConc``, ``MonadRef``, and\n  ``MonadIO`` constraints.
  \ Testing with ``ST`` is no longer possible.\n\n* The ``Test.DejaFu.alwaysSame``
  predicate helper gives the simplest\n  trace leading to each distinct result.\n\n*
  The ``MonadIO Test.DejaFu.Conc.ConcIO`` instance is now the more\n  general ``MonadIO
  n => MonadIO (ConcT r n)``.\n\n* (:issue:`121`) The chosen thread is no longer redundantly
  included\n  in trace lookahead.\n\n* (:issue:`123`) All testing functions in ``Test.DejaFu``
  take the\n  action to run as the final parameter.\n\n* (:issue:`124`) All testing
  functions in ``Test.DejaFu`` have been\n  generalised to take a ``ProPredicate``
  instead of a ``Predicate``.\n\n* (:issue:`124`) The ``Test.DejaFu.Predicate`` type
  is an alias for\n  ``ProPredicate a a``.\n\n* (:issue:`124`) The ``Test.DejaFu.Result``
  type no longer includes a\n  number of cases checked.\n\n* (:issue:`137`) The ``Test.DejaFu.Types.ThreadId``,
  ``CRefId``,\n  ``MVarId``, and ``TVarId`` types are now wrappers for an ``Id``.\n\n*
  (:pull:`145`) If built with the threaded runtime, the main thread in\n  a test is
  executed as a bound thread.\n\n* (:issue:`155`) The ``Test.DejaFu.SCT.Discard``
  type is defined in\n  ``Test.DejaFu.Types``, and re-exported from ``Test.DejaFu.SCT``.\n\n*
  (:issue:`155`) The ``Test.DejaFu.Schedule.tidOf`` and ``decisionOf``\n  functions
  are defined in ``Test.DejaFu.Utils``, but not re-exported\n  from ``Test.DejaFu.Schedule``.\n\nRemoved\n~~~~~~~\n\n*
  The ``IO`` specific testing functions:\n\n    * ``Test.DejaFu.autocheckIO``\n    *
  ``Test.DejaFu.dejafuIO``\n    * ``Test.DejaFu.dejafusIO``\n    * ``Test.DejaFu.autocheckWayIO``\n
  \   * ``Test.DejaFu.dejafuWayIO``\n    * ``Test.DejaFu.dejafusWayIO``\n    * ``Test.DejaFu.dejafuDiscardIO``\n
  \   * ``Test.DejaFu.runTestM``\n    * ``Test.DejaFu.runTestWayM``\n\n* The ``Test.DejaFu.Conc.ConcST``
  type alias.\n\n* The ``MonadBaseControl IO Test.DejaFu.Conc.ConcIO`` typeclass instance.\n\n*
  The ``Test.DejaFu.alwaysTrue2`` function, which had confusing\n  behaviour.\n\n*
  The ``Test.DejaFu.Common.TTrace`` type synonym for ``[TAction]``.\n\n* The ``Test.DejaFu.Common.preEmpCount``
  function.\n\n* Re-exports of ``Decision`` and ``NonEmpty`` from\n  ``Test.DejaFu.Schedule``.\n\n*
  (:issue:`155`) The ``Test.DejaFu.Common`` and ``Test.DejaFu.STM``\n  modules.\n\nFixed\n~~~~~\n\n*
  In refinement property testing, a blocking interference function is\n  not reported
  as a deadlocking execution.\n\nPerformance\n~~~~~~~~~~~\n\n* (:issue:`124`) Passing
  tests should use substantially less memory.\n\n* (:issue:`168`) Prune some unnecessary
  interleavings of ``MVar``\n  actions in systematic testing.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The lower bound on :hackage:`concurrency` is >=1.3.\n\n\n0.9.1.2 (2017-12-12)\n--------------------\n\n*
  Git: :tag:`dejafu-0.9.1.2`\n* Hackage: :hackage:`dejafu-0.9.1.2`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The upper bound on :hackage:`leancheck` is <0.8.\n\n\n0.9.1.1 (2017-12-08)\n--------------------\n\n*
  Git: :tag:`dejafu-0.9.1.1`\n* Hackage: :hackage:`dejafu-0.9.1.1`\n\nFixed\n~~~~~\n\n*
  (:issue:`160`) Fix an off-by-one issue with nested masks during\n  systematic testing.\n\n\n0.9.1.0
  (2017-11-26)\n--------------------\n\n* Git: :tag:`dejafu-0.9.1.0`\n* Hackage: :hackage:`dejafu-0.9.1.0`\n\nAdded\n~~~~~\n\n*
  ``MonadFail`` instance for ``Test.DejaFu.Conc.ConcT``.\n* ``MonadFail`` instance
  for ``Test.DejaFu.STM.STMLike``.\n\nChanged\n~~~~~~~\n\n* Pretty-printed traces
  display a pre-emption following a yield with a\n  little \"p\".\n\nFixed\n~~~~~\n\n*
  Some incorrect Haddock ``@since`` comments.\n\n\n0.9.0.3 (2017-11-06)\n--------------------\n\n*
  Git: :tag:`dejafu-0.9.0.3`\n* Hackage: :hackage:`dejafu-0.9.0.3`\n\nFixed\n~~~~~\n\n*
  (:issue:`138`) Fix missed interleavings in systematic testing with\n  some relaxed
  memory programs.\n\n\n0.9.0.2 (2017-11-02)\n--------------------\n\n* Git: :tag:`dejafu-0.9.0.2`\n*
  Hackage: :hackage:`dejafu-0.9.0.2`\n\nChanged\n~~~~~~~\n\n* A fair bound of 0 prevents
  yielding or delaying.\n\nPerformance\n~~~~~~~~~~~\n\n* Prune some unnecessary interleavings
  of STM transactions in\n  systematic testing.\n\n\n0.9.0.1 (2017-10-28)\n--------------------\n\n*
  Git: :tag:`dejafu-0.9.0.1`\n* Hackage: :hackage:`dejafu-0.9.0.1`\n\nFixed\n~~~~~\n\n*
  (:issue:`139`) Fix double pop of exception handler stack.\n\n\n0.9.0.0 (2017-10-11)\n--------------------\n\n*
  Git: :tag:`dejafu-0.9.0.0`\n* Hackage: :hackage:`dejafu-0.9.0.0`\n\nAdded\n~~~~~\n\n*
  Failure predicates (also exported from ``Test.DejaFu``):\n\n    * ``Test.DejaFu.Common.isAbort``\n
  \   * ``Test.DejaFu.Common.isDeadlock``\n    * ``Test.DejaFu.Common.isIllegalSubconcurrency``\n
  \   * ``Test.DejaFu.Common.isInternalError``\n    * ``Test.DejaFu.Common.isUncaughtException``\n\n*
  Thread action and lookahead values for ``threadDelay``:\n\n    * ``Test.DejaFu.Common.ThreadDelay``\n
  \   * ``Test.DejaFu.Common.WillThreadDelay``\n\nChanged\n~~~~~~~\n\n* The ``UncaughtException``
  constructor for\n  ``Test.DejaFu.Common.Failure`` now includes the exception value.\n\n*
  Uses of ``threadDelay`` are no longer reported in the trace as a use\n  of ``yield``.\n\nRemoved\n~~~~~~~\n\n*
  The ``Bounded``, ``Enum``, and ``Read`` instances for\n  ``Test.DejaFu.Common.Failure``.\n\n\n0.8.0.0
  (2017-09-26)\n--------------------\n\n* Git: :tag:`dejafu-0.8.0.0`\n* Hackage: :hackage:`dejafu-0.8.0.0`\n\nChanged\n~~~~~~~\n\n*
  (:issue:`80`) STM traces now include the ID of a newly-created\n  ``TVar``.\n\n*
  (:issue:`106`) Schedulers are not given the execution trace so far.\n\n* (:issue:`120`)
  Traces only include a single action of lookahead.\n\n* (:issue:`122`) The ``Test.DejaFu.Scheduler.Scheduler``
  type is now a\n  newtype, rather than a type synonym.\n\n\n0.7.3.0 (2017-09-26)\n--------------------\n\n*
  Git: :tag:`dejafu-0.7.3.0`\n* Hackage: :hackage:`dejafu-0.7.3.0`\n\nAdded\n~~~~~\n\n*
  The ``Test.DejaFu.Common.threadNames`` function.\n\nFixed\n~~~~~\n\n* (:issue:`101`)
  Named threads which are only started by a pre-emption\n  are shown in the pretty-printed
  trace key.\n\n* (:issue:`118`) Escaping a mask by raising an exception correctly\n
  \ restores the masking state (#118).\n\n\n0.7.2.0 (2017-09-16)\n--------------------\n\n*
  Git: :tag:`dejafu-0.7.2.0`\n* Hackage: :hackage:`dejafu-0.7.2.0`\n\nAdded\n~~~~~\n\n*
  ``Alternative`` and ``MonadPlus`` instances for\n  ``Test.DejaFu.STM.STM``.\n\nFixed\n~~~~~\n\n*
  The ``Eq`` and ``Ord`` instances for\n  ``Test.DejaFu.Common.ThreadId``, ``CRefId``,
  ``MVarId``, and\n  ``TVarId`` are consistent.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The upper bound on :hackage:`concurrency` is <1.2.\n\n\n0.7.1.3 (2017-09-08)\n--------------------\n\n*
  Git: :tag:`dejafu-0.7.1.3`\n* Hackage: :hackage:`dejafu-0.7.1.3`\n\nFixed\n~~~~~\n\n*
  (:issue:`111`) Aborted STM transactions are correctly rolled back.\n\nPerformance\n~~~~~~~~~~~\n\n*
  (:issue:`105`) Use a more efficient approach for an internal\n  component of the
  systematic testing.\n\n\n0.7.1.2 (2017-08-21)\n--------------------\n\n* Git: :tag:`dejafu-0.7.1.2`\n*
  Hackage: :hackage:`dejafu-0.7.1.2`\n\nFixed\n~~~~~\n\n* (:issue:`110`) Errors thrown
  with ``Control.Monad.fail`` are\n  correctly treated as asynchronous exceptions.\n\n\n0.7.1.1
  (2017-08-16)\n--------------------\n\n* Git: :tag:`dejafu-0.7.1.1`\n* Hackage: :hackage:`dejafu-0.7.1.1`\n\nPerformance\n~~~~~~~~~~~\n\n*
  (:issue:`64`) Greatly reduce memory usage in systematic testing when\n  discarding
  traces by using an alternative data structure.\n\n    * Old: ``O(max trace length
  * number of executions)``\n    * New: ``O(max trace length * number of traces kept)``\n\n\n0.7.1.0
  - The Discard Release (2017-08-10)\n------------------------------------------\n\n*
  Git: :tag:`dejafu-0.7.1.0`\n* Hackage: :hackage:`dejafu-0.7.1.0`\n\nAdded\n~~~~~\n\n*
  (:issue:`90`) A way to selectively discard results or traces:\n\n    * Type: ``Test.DejaFu.SCT.Discard``\n
  \   * Functions: ``Test.DejaFu.SCT.runSCTDiscard``,\n      ``resultsSetDiscard``,
  ``sctBoundDiscard``,\n      ``sctUniformRandomDiscard``, and ``sctWeightedRandomDiscard``.\n\n*
  (:issue:`90`) Discarding variants of the testing functions:\n\n    * ``Test.DejaFu.dejafuDiscard``\n
  \   * ``Test.DejaFu.dejafuDiscardIO``\n\n* (:issue:`90`) ``Test.DejaFu.Defaults.defaultDiscarder``.\n\nPerformance\n~~~~~~~~~~~\n\n*
  (:issue:`90`) The ``Test.DejaFu.SCT.resultsSet`` and ``resultsSet'``\n  functions
  discard traces as they are produced, rather than all at\n  the end.\n\n\n0.7.0.2
  (2017-06-12)\n--------------------\n\n* Git: :tag:`dejafu-0.7.0.2`\n* Hackage: :hackage:`dejafu-0.7.0.2`\n\nChanged\n~~~~~~~\n\n*
  Remove unnecessary typeclass constraints from\n  ``Test.DejaFu.Refinement.check``,
  ``check'``, ``checkFor``, and\n  ``counterExamples``.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  Remove an unnecessary dependency on :hackage:`monad-loops`.\n\n\n0.7.0.1 (2017-06-09)\n--------------------\n\n*
  Git: :tag:`dejafu-0.7.0.1`\n* Hackage: :hackage:`dejafu-0.7.0.1`\n\nPerformance\n~~~~~~~~~~~\n\n*
  The ``Test.DejaFu.Refinement.check``, ``check'``, and ``checkFor``\n  functions
  no longer need to compute all counterexamples before\n  showing only one.\n\n* The
  above and ``counterExamples`` are now faster even if there is\n  only a single counterexample
  in some cases.\n\n\n0.7.0.0 - The Refinement Release (2017-06-07)\n---------------------------------------------\n\n*
  Git: :tag:`dejafu-0.7.0.0`\n* Hackage: :hackage:`dejafu-0.7.0.0`\n\nAdded\n~~~~~\n\n*
  The ``Test.DejaFu.Refinement`` module, re-exported from\n  ``Test.DejaFu``.\n\n*
  The ``Test.DejaFu.SCT.sctUniformRandom`` function for SCT via random\n  scheduling.\n\n*
  Smart constructors for ``Test.DejaFu.SCT.Way`` (also re-exported\n  from ``Test.DejaFu``):\n\n
  \   * ``Test.DejaFu.SCT.systematically``, like the old\n      ``Systematically``.\n
  \   * ``Test.DejaFu.SCT.randomly``, like the old ``Randomly``.\n    * ``Test.DejaFu.SCT.uniformly``,
  a new uniform (as opposed to\n      weighted) random scheduler.\n    * ``Test.DejaFu.SCT.swarmy``,
  like the old ``Randomly`` but which\n      can use the same weights for multiple
  executions.\n\nChanged\n~~~~~~~\n\n* The ``default*`` values are defined in ``Test.DejaFu.Defaults``
  and\n  re-exported from ``Test.DejaFu``.\n\n* The ``Test.DejaFu.SCT.sctRandom``
  function is now called\n  ``sctWeightedRandom`` and can re-use the same weights
  for multiple\n  executions.\n\nRemoved\n~~~~~~~\n\n* The ``Test.DejaFu.SCT.Way``
  type is now abstract, so its\n  constructors are no longer exported:\n\n    * ``Test.DejaFu.SCT.Systematically``\n
  \   * ``Test.DejaFu.SCT.Randomly``\n\n* The ``Test.DejaFu.SCT.sctPreBound``, ``sctFairBound``,
  and\n  ``sctLengthBound`` functions.\n\nFixed\n~~~~~\n\n* (:issue:`81`) ``Test.DejaFu.Conc.subconcurrency``
  no longer re-uses\n  IDs.\n\n\n0.6.0.0 (2017-04-08)\n--------------------\n\n* Git:
  :tag:`dejafu-0.6.0.0`\n* Hackage: :hackage:`dejafu-0.6.0.0`\n\nChanged\n~~~~~~~\n\n*
  The ``Test.DejaFu.Conc.Conc n r a`` type is ``ConcT r n a``, and has\n  a ``MonadTrans``
  instance.\n\n* The ``Test.DejaFu.SCT.Way`` type is a GADT, and does not expose the\n
  \ type parameter of the random generator.\n\nRemoved\n~~~~~~~\n\n* The ``NFData``
  instance for ``Test.DejaFu.SCT.Way``.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* ``Test.DejaFu.Common``
  forms part of the public API.\n\n* Every definition, class, and instance now has
  a Haddock ``@since``\n  annotation.\n\n\n0.5.1.3 (2017-04-05)\n--------------------\n\n*
  Git: :tag:`dejafu-0.5.1.3`\n* Hackage: :hackage:`dejafu-0.5.1.3`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The version bounds on :hackage:`concurrency` are 1.1.*.\n\n\n0.5.1.2 (2017-03-04)\n--------------------\n\n*
  Git: :tag:`dejafu-0.5.1.2`\n* Hackage: :hackage:`dejafu-0.5.1.2`\n\n**Note:** this
  version was misnumbered! It should have caused a minor\n version bump!\n\nAdded\n~~~~~\n\n*
  ``MonadRef`` and ``MonadAtomicRef`` instances for\n  ``Test.DejaFu.Conc.Conc`` using
  ``CRef``.\n\nFixed\n~~~~~\n\n* A long-standing bug where if the main thread is killed
  with a\n  ``throwTo``, the throwing neither appears in the trace nor correctly\n
  \ terminates the execution.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* The upper bound
  on :hackage:`concurrency` is <1.1.1.\n\n\n0.5.1.1 (2017-02-25)\n--------------------\n\n*
  Git: :tag:`dejafu-0.5.1.1`\n* Hackage: :hackage:`dejafu-0.5.1.1`\n\nFixed\n~~~~~\n\n*
  Fix using incorrect correct scheduler state after a `subconcurrency`\n  action.\n\n*
  Fix infinite loop in SCT of subconcurrency.\n\n\n0.5.1.0 (2017-02-25)\n--------------------\n\n*
  Git: :tag:`dejafu-0.5.1.0`\n* Hackage: :hackage:`dejafu-0.5.1.0`\n\nAdded\n~~~~~\n\n*
  ``NFData`` instances for:\n\n    * ``Test.DejaFu.Result``\n    * ``Test.DejaFu.Common.ThreadId``\n
  \   * ``Test.DejaFu.Common.CRefId``\n    * ``Test.DejaFu.Common.MVarId``\n    *
  ``Test.DejaFu.Common.TVarId``\n    * ``Test.DejaFu.Common.IdSource``\n    * ``Test.DejaFu.Common.ThreadAction``\n
  \   * ``Test.DejaFu.Common.Lookahead``\n    * ``Test.DejaFu.Common.ActionType``\n
  \   * ``Test.DejaFu.Common.TAction``\n    * ``Test.DejaFu.Common.Decision``\n    *
  ``Test.DejaFu.Common.Failure``\n    * ``Test.DejaFu.Common.MemType``\n    * ``Test.DejaFu.SCT.Bounds``\n
  \   * ``Test.DejaFu.SCT.PreemptionBound``\n    * ``Test.DejaFu.SCT.FairBound``\n
  \   * ``Test.DejaFu.SCT.LengthBound``\n    * ``Test.DejaFu.SCT.Way``\n    * ``Test.DejaFu.STM.Result``\n\n*
  ``Eq``, ``Ord``, and ``Show`` instances for\n  ``Test.DejaFu.Common.IdSource``.\n\n*
  Strict variants of ``Test.DejaFu.SCT.runSCT`` and ``resultsSet``:\n  ``runSCT'``
  and ``resultsSet'``.\n\n\n0.5.0.2 (2017-02-22)\n--------------------\n\n* Git: :tag:`dejafu-0.5.0.2`\n*
  Hackage: :hackage:`dejafu-0.5.0.2`\n\n**Note:** this version was misnumbered! It
  should have caused a major\n version bump!\n\nAdded\n~~~~~\n\n* ``StopSubconcurrency``
  constructor for\n  ``Test.DejaFu.Common.ThreadAction``.\n\nChanged\n~~~~~~~\n\n*
  A ``Test.DejaFu.Common.StopConcurrency`` action appears in the\n  execution trace
  immediately after the end of a\n  ``Test.DejaFu.Conc.subconcurrency`` action.\n\nFixed\n~~~~~\n\n*
  A ``Test.DejaFu.Conc.subconcurrency`` action inherits the number of\n  capabilities
  from the outer computation.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n- ``Test.DejaFu.SCT``
  compiles with ``MonoLocalBinds`` enabled\n  (implied by ``GADTs`` and ``TypeFamilies``),
  which may be relevant\n  to hackers.\n\n\n0.5.0.1 (2017-02-21)\n--------------------\n\n*
  Git: :tag:`dejafu-0.5.0.1`\n* Hackage: :hackage:`ps!**`\n\nFixed\n~~~~~\n\n* ``readMVar``
  is considered a \"release action\" for the purposes of\n  fair-bounding.\n\n\n0.5.0.0
  - The Way Release (2017-02-21)\n--------------------------------------\n\n* Git:
  :tag:`dejafu-0.5.0.0`\n* Hackage: :hackage:`dejafu-0.5.0.0`\n\nAdded\n~~~~~\n\n*
  ``Eq`` instances for ``Test.DejaFu.Common.ThreadAction`` and\n  ``Lookahead``.\n\n*
  Thread action and lookahead values for ``tryReadMVar``:\n\n    * ``Test.DejaFu.Common.TryReadMVar``\n
  \   * ``Test.DejaFu.Common.WillTryReadMVar``\n\n* The testing-only ``Test.DejaFu.Conc.subconcurrency``
  function.\n\n* SCT through weighted random scheduling:\n  ``Test.DejaFu.SCT.sctRandom``.\n\n*
  The ``Test.DejaFu.SCT.Way`` type, used by the new functions\n  ``runSCT`` and ``resultsSet``.\n\nChanged\n~~~~~~~\n\n*
  All the functions which took a ``Test.DejaFu.SCT.Bounds`` now take a\n  ``Way``
  instead.\n\nFixed\n~~~~~\n\n* Some previously-missed ``CRef`` action dependencies
  are no longer\n  missed.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* The version bounds
  on :hackage:`concurrency` are 1.1.0.*.\n\n* A bunch of things were called \"Var\"
  or \"Ref\", these are now\n  consistently \"MVar\" and \"CRef\".\n\n* Significant
  performance improvements in both time and space.\n\n* The :hackage:`dpor` package
  has been merged back into this, as it\n  turned out not to be very generally useful.\n\n\n0.4.0.0
  - The Packaging Release (2016-09-10)\n--------------------------------------------\n\n*
  Git: :tag:`dejafu-0.4.0.0`\n* Hackage: :hackage:`dejafu-0.4.0.0`\n\nAdded\n~~~~~\n\n*
  The ``Test.DejaFu.runTestM`` and ``runTestM'`` functions.\n\n* The ``Test.DejaFu.Conc.runConcurrent``
  function.\n\n* The ``Test.DejaFu.STM.runTransaction`` function.\n\n* The ``Test.DejaFu.Common``
  module.\n\nChanged\n~~~~~~~\n\n* The ``Control.*`` modules have all been split out
  into a separate\n  :hackage:`concurrency` package.\n\n* The ``Test.DejaFu.Deterministic``
  module has been renamed to\n  ``Test.DejaFu.Conc``.\n\n* Many definitions from other
  modules have been moved to the\n  ``Test.DejaFu.Common`` module.\n\n* The ``Test.DejaFu.autocheck'``
  function takes the schedule bounds as\n  a parameter.\n\n* The ``Test.DejaFu.Conc.Conc``
  type no longer has the STM type as a\n  parameter.\n\n* The ``ST`` specific functions
  in ``Test.DejaFu.SCT`` are polymorphic\n  in the monad.\n\n* The termination of
  the main thread in execution traces appears as a\n  single ``Stop``, rather than
  the previous ``Lift, Stop``.\n\n* Execution traces printed by the helpful functions
  in ``Test.DejaFu``\n  include a key of thread names.\n\nRemoved\n~~~~~~~\n\n* The
  ``Test.DejaFu.runTestIO`` and ``runTestIO'`` functions: use\n  ``runTestM`` and
  ``runTestM'`` instead.\n\n* The ``Test.DejaFu.Conc.runConcST`` and ``runConcIO``
  functions: use\n  ``runConcurrent`` instead.\n\n* The ``Test.DejaFu.STM.runTransactionST``
  and ``runTransactionIO``\n  functions: use ``runTransaction`` instead.\n\n* The
  ``IO`` specific functions in ``Test.DejaFu.SCT``.\n\n\n\n0.3.2.1 (2016-07-21)\n--------------------\n\n*
  Git: :tag:`dejafu-0.3.2.1`\n* Hackage: :hackage:`dejafu-0.3.2.1`\n\nFixed\n~~~~~\n\n*
  (:issue:`55`) Fix incorrect detection of deadlocks with some nested\n  STM transactions.\n\n\n0.3.2.0
  (2016-06-06)\n--------------------\n\n* Git: :tag:`dejafu-0.3.2.0`\n* Hackage: :hackage:`dejafu-0.3.2.0`\n\nFixed\n~~~~~\n\n*
  (:issue:`40`) Fix missing executions with daemon threads with\n  uninteresting first
  actions.  This is significantly faster with\n  :hackage:`dpor-0.2.0.0`.\n\nPerformance\n~~~~~~~~~~~\n\n*
  When using :hackage:`dpor-0.2.0.0`, greatly improve dependency\n  inference of exceptions
  during systematic testing.\n\n* Improve dependency inference of STM transactions
  during systematic\n  testing.\n\n\n0.3.1.1 (2016-05-26)\n--------------------\n\n*
  Git: :tag:`dejafu-0.3.1.1`\n* Hackage: :hackage:`dejafu-0.3.1.1`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  Now supports GHC 8.\n\n\n0.3.1.0 (2016-05-02)\n--------------------\n\n* Git: :tag:`dejafu-0.3.1.0`\n*
  Hackage: :hackage:`dejafu-0.3.1.0`\n\nFixed\n~~~~~\n\n* Fix inaccurate counting
  of pre-emptions in an execution trace when\n  relaxed memory commit actions are
  present.\n\n\n0.3.0.0 (2016-04-03)\n--------------------\n\n* Git: :tag:`dejafu-0.3.0.0`\n*
  Hackage: :hackage:`dejafu-0.3.0.0`\n\n**The minimum supported version of GHC is
  now 7.10.**\n\nI didn't write proper release notes, and this is so far back I don't\nreally
  care to dig through the logs.\n\n\n0.2.0.0 (2015-12-01)\n--------------------\n\n*
  Git: :tag:`0.2.0.0`\n* Hackage: :hackage:`dejafu-0.2.0.0`\n\nI didn't write proper
  release notes, and this is so far back I don't\nreally care to dig through the logs.\n\n\n0.1.0.0
  - The Initial Release (2015-08-27)\n------------------------------------------\n\n*
  Git: :tag:`0.1.0.0`\n* Hackage: :hackage:`dejafu-0.1.0.0`\n\nAdded\n~~~~~\n\n* Everything.\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.10'
  base: ! '>=4.8 && <5'
  leancheck: ! '>=0.6 && <0.8'
  ref-fd: ! '>=0.4 && <0.5'
  containers: ! '>=0.5 && <0.6'
  concurrency: ! '>=1.3 && <1.5'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <2'
  profunctors: ! '>=4.0 && <6.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.2.0'
- '0.3.2.1'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.2'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.1.0'
- '0.7.1.1'
- '0.7.1.2'
- '0.7.1.3'
- '0.7.2.0'
- '0.7.3.0'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.0.1'
- '0.9.0.2'
- '0.9.0.3'
- '0.9.1.0'
- '0.9.1.1'
- '0.9.1.2'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.2.0.0'
author: Michael Walker
latest: '1.2.0.0'
description-type: markdown
description: ! "dejafu\n======\n\n> [Déjà Fu is] A martial art in which the user's
  limbs move in time as\n> well as space, […] It is best described as \"the feeling
  that you\n> have been kicked in the head this way before\"\n>\n> -- Terry Pratchett,
  Thief of Time\n\n- [Installation](#installation)\n- [Quick start guide](#quick-start-guide)\n-
  [Why Déjà Fu?](#why-déjà-fu)\n- [Contributing](#contributing)\n- [Release notes](#release-notes)\n-
  [Questions, feedback, discussion](#questions-feedback-discussion)\n- [Bibliography](#bibliography)\n-
  **[The website!](http://dejafu.readthedocs.io/)**\n\nDéjà Fu is a unit-testing library
  for concurrent Haskell programs.\nTests are deterministic and expressive, making
  it easy and convenient\nto test your threaded code.  Available on [GitHub][], [Hackage][],
  and\n[Stackage][].\n\n[GitHub]:   https://github.com/barrucadu/dejafu\n[Hackage]:
  \ https://hackage.haskell.org/package/dejafu\n[Stackage]: https://www.stackage.org/package/dejafu\n\n\nInstallation\n------------\n\nInstall
  from Hackage globally:\n\n```\n$ cabal install dejafu\n```\n\nOr add it to your
  cabal file:\n\n```\nbuild-depends: ...\n             , dejafu\n```\n\nOr to your
  package.yaml:\n\n```\ndependencies:\n  ...\n  - dejafu\n```\n\n\nQuick start guide\n-----------------\n\nDéjà
  Fu supports unit testing, and comes with a helper function called\n`autocheck` to
  look for some common issues.  Let's see it in action:\n\n```haskell\nimport Control.Concurrent.Classy\n\nmyFunction
  :: MonadConc m => m String\nmyFunction = do\n  var <- newEmptyMVar\n  fork (putMVar
  var \"hello\")\n  fork (putMVar var \"world\")\n  readMVar var\n```\n\nThat `MonadConc`
  is a typeclass abstraction over concurrency, but\nwe'll get onto that shortly.  First,
  the result of testing:\n\n```\n> autocheck myFunction\n[pass] Never Deadlocks\n[pass]
  No Exceptions\n[fail] Consistent Result\n        \"hello\" S0----S1--S0--\n\n        \"world\"
  S0----S2--S0--\nFalse\n```\n\nThere are no deadlocks or uncaught exceptions, which
  is good; but the\nprogram is (as you probably spotted) nondeterministic!\n\nAlong
  with each result, Déjà Fu gives us a representative execution\ntrace in an abbreviated
  form.  `Sn` means that thread `n` started\nexecuting, and `Pn` means that thread
  `n` pre-empted the previously\nrunning thread.\n\n\nWhy Déjà Fu?\n------------\n\nTesting
  concurrent programs is difficult, because in general they are\nnondeterministic.
  \ This leads to people using work-arounds like\nrunning their testsuite many thousands
  of times; or running their\ntestsuite while putting their machine under heavy load.\n\nThese
  approaches are inadequate for a few reasons:\n\n- **How many runs is enough?** When
  you are just hopping to spot a bug\n  by coincidence, how do you know to stop?\n-
  **How do you know if you've fixed a bug you saw previously?**\n  Because the scheduler
  is a black box, you don't know if the\n  previously buggy schedule has been re-run.\n-
  **You won't get that much scheduling variety!** Operating systems\n  and language
  runtimes like to run threads for long periods of time,\n  which reduces the variety
  you get (and so drives up the number of\n  runs you need).\n\nDéjà Fu addresses
  these points by offering *complete* testing.  You\ncan run a test case and be guaranteed
  to find all results with some\nbounds.  These bounds can be configured, or even
  disabled!  The\nunderlying approach used is smarter than merely trying all possible\nexecutions,
  and will in general explore the state-space quickly.\n\nIf your test case is just
  too big for complete testing, there is also\na random scheduling mode, which is
  necessarily *incomplete*.  However,\nDéjà Fu will tend to produce much more schedule
  variety than just\nrunning your test case in `IO` the same number of times, and
  so bugs\nwill tend to crop up sooner.  Furthermore, as you get execution traces\nout,
  you can be certain that a bug has been fixed by simply following\nthe trace by eye.\n\n\nContributing\n------------\n\nBug
  reports, pull requests, and comments are very welcome!\n\nFeel free to contact me
  on GitHub, through IRC (#haskell on freenode),\nor email (mike@barrucadu.co.uk).\n"
license-name: MIT
