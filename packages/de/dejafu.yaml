homepage: https://github.com/barrucadu/dejafu
changelog-type: markdown
hash: b79db3a723bd1d8d2fd159584ec105f37b117f87fa0c9dfb30707e4a932b8f6d
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: A library for unit-testing concurrent programs.
changelog: ! "Release Notes\n=============\n\nAll notable changes to this project
  will be documented in this file.\n\nThis project is versioned according to the [Package
  Versioning Policy](https://pvp.haskell.org), the\n*de facto* standard Haskell versioning
  scheme.\n\n\n1.0.0.0\n-------\n\n- **Date**    2017-12-23\n- **Git tag** [dejafu-1.0.0.0][]\n-
  **Hackage** https://hackage.haskell.org/package/dejafu-1.0.0.0\n\n### Test.DejaFu\n\n-
  All testing functions now require a `MonadConc`, `MonadRef`, and `MonadIO` constraint:\n\n
  \   It is no longer possible to test things in `ST`.\n\n- All testing functions
  now take the action to test as the last parameter.\n\n- The `autocheckIO`, `dejafuIO`,
  `dejafusIO`, `autocheckWayIO`, `dejafuWayIO`, `dejafusWayIO`,\n  `dejafuDiscardIO`,
  `runTestM`, and `runTestWayM` functions are now gone.\n\n- The `Predicate` type
  has been replaced with a more general `ProPredicate` type which is a\n  profunctor
  and (b) can discard results not needed to determine if the predicate passes. (#124)\n\n
  \   All testing functions have been generalised to take a `ProPredicate` instead.
  \ The `Predicate a`\n    type remains as an alias for `ProPredicate a a`.  Passing
  tests have their resident memory usage\n    significantly decreased.\n\n- The `Result`
  type no longer includes a number of cases checked, as this is not meaningful with\n
  \ predicates including discard functions.\n\n- New `alwaysNothing` and `somewhereNothing`
  functions, like `alwaysTrue` and `somewhereTrue`, to\n  lift functions to `ProPredicate`s.\n\n-
  The `alwaysTrue2` function is gone, as its behaviour was unintuitive and easy to
  get wrong, and\n  has been replaced with new `alwaysSameOn` and `alwaysSameBy` predicates,
  which generalise\n  `alwaysSame`.\n\n- The `alwaysSame`, `alwaysSameOn`, and `alwaysSameBy`
  predicates now gives the simplest execution\n  trace leading to each distinct result.\n\n###
  Test.DejaFu.Common\n\n- This module has been split up into new Test.DejaFu.Internal,
  Types, and Utils modules. (#155)\n\n- New `ForkOS` and `IsCurrentThreadBound` thread
  actions. (#126)\n\n- New `WillForkOS` and `WillIsCurrentThreadBound` lookaheads.
  (#126)\n\n- The `TTrace` type synonym for `[TAction]` has been removed.\n\n- The
  `preEmpCount` function has been removed.\n\n- New functions `strengthenDiscard`
  and `weakenDiscard` to combine discard functions.\n\n- The `Discard` type is now
  defined here and re-exported from Test.DejaFu.SCT.\n\n- The `ThreadId`, `CRefId`,
  `MVarId`, and `TVarId` types are now newtypes over a common `Id`\n  type. (#137)\n\n###
  Test.DejaFu.Conc\n\n- The `ConcST` type alias is gone.\n\n- The `MonadBase IO ConcIO`
  instance is gone.\n\n- The `MonadIO ConcIO` instance is replaces with a more general
  `MonadIO n => MonadIO (ConcT r n)`\n  instance.\n\n- The `runConcurrent` function
  now has a `MonadConc` constraint.\n\n- If bound threads are supported, the main
  thread when testing is bound. (#126)\n\n- Each entry in an execution trace is now
  in the form `(decision, alternatives, action)`.  The\n  chosen thread is no longer
  in the list of alternatives, which makes raw traces easier to\n  read. (#121)\n\n-
  Due to changes in Test.DejaFu.Schedule, no longer re-exports `Decision`, `NonEmpty`,
  `tidOf`, or\n  `decisionOf`.\n\n### Test.DejaFu.Refinement\n\n- A blocking interference
  function is no longer reported as a deadlocking execution.\n\n### Test.DejaFu.Schedule\n\n-
  No longer re-exports `Decision` or `NonEmpty`.\n\n- The `tidOf` and `decisionOf`
  functions have moved to Test.DejaFu.Utils.\n\n### Test.DejaFu.SCT\n\n- All testing
  functions now require a `MonadConc` constraint:\n\n    It is no longer possible
  to test things in `ST`.\n\n### Test.DejaFu.STM\n\n- This is now an internal module.
  (#155)\n\n### Performance\n\n- Significant resident memory reduction for most passing
  tests.\n- Improved dependency detection for `MVar` actions, leading to fewer executions.\n\n###
  Miscellaneous\n\n- The minimum supported version of concurrency is now 1.3.0.0.\n\n[dejafu-1.0.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-1.0.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.1.2\n-------\n\n-
  **Date**    2017-12-12\n- **Git tag** [dejafu-0.9.1.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.1.2\n\n###
  Miscellaneous\n\n- The upper bound on leancheck was bumped to <0.8.\n\n[dejafu-0.9.1.2]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.1.1\n-------\n\n-
  **Date**    2017-12-08\n- **Git tag** [dejafu-0.9.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.1.1\n\n###
  Miscellaneous\n\n- Fix an issue where nested masks nested inside unmasks would sometimes
  not be pre-empted in\n  systematic testing.\n\n[dejafu-0.9.1.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.1.0\n-------\n\n-
  **Date**    2017-11-26\n- **Git tag** [dejafu-0.9.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.1.0\n\n###
  Test.DejaFu.Common\n\n- Fix some incorrect \"@since\" haddock comments.\n- Pretty-printed
  traces now display a pre-emption following a yield with a little \"p\".\n\n### Test.DejaFu.Conc\n\n-
  Add a missing `MonadFail` instance.\n\n### Test.DejaFu.STM\n\n- Add a missing `MonadFail`
  instance.\n\n[dejafu-0.9.1.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.0.3\n-------\n\n-
  **Date**    2017-11-06\n- **Git tag** [dejafu-0.9.0.3][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.3\n\n###
  Miscellaneous\n\n- Impose a dependency between commits and memory barriers, to make
  barriers sound (#138).\n\n[dejafu-0.9.0.3]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.3\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.0.2\n-------\n\n-
  **Date**    2017-11-02\n- **Git tag** [dejafu-0.9.0.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.2\n\n###
  Miscellaneous\n\n- Small improvement to dependency detection of STM transactions.\n-
  A fair bound of 0 will now prevent all yields.\n\n[dejafu-0.9.0.2]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.0.1\n-------\n\n-
  **Date**    2017-10-28\n- **Git tag** [dejafu-0.9.0.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.1\n\n###
  Miscellaneous\n\n- Fixed an issue where tests with exception handlers would sometimes
  skip over nested handlers or\n  try to take the tail of an empty list (#139 and
  #141).\n\n[dejafu-0.9.0.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.9.0.0\n-------\n\n-
  **Date**    2017-10-11\n- **Git tag** [dejafu-0.9.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.9.0.0\n\n###
  Test.DejaFu.Common\n\n- New `isInternalError`, `isAbort`, `isDeadlock`, `isUncaughtException`,
  and\n  `isIllegalSubconcurrency` functions for matching failure types.  Also exported
  from Test.DejaFu.\n\n- The `UncaughtException` `Failure` constructor now includes
  the exception.\n\n    The `Read`, `Enum`, and `Bounded` instances are gone.  The
  `Eq`, `Ord`, and `NFData` instances\n    use the `show` of the exception.  Pretty-printed
  failures include the exception text.\n\n- New `ThreadDelay` and `WillThreadDelay`
  constructors in `ThreadAction` and `Lookahead`.  Uses of\n  `threadDelay` are no
  longer reported as a use of `yield`.\n\n[dejafu-0.9.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.9.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.8.0.0\n-------\n\n-
  **Date**    2017-09-26\n- **Git tag** [dejafu-0.8.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.8.0.0\n\n###
  Test.DejaFu.Common\n\n- Execution traces now only include a single item of lookahead
  (#120).\n- STM traces now include IDs of created `TVar`s (#80).\n\n### Test.DejaFu.Schedule\n\n-
  Schedulers no longer take the execution trace so far (#106).\n- The `Scheduler`
  type is now a newtype (#122).\n\n[dejafu-0.8.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.8.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.3.0\n-------\n\n-
  **Date**    2017-09-26\n- **Git tag** [dejafu-0.7.3.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.3.0\n\n###
  Test.DejaFu.Common\n\n- A new function `threadNames`, to get all named threads from
  a trace.\n\n### Miscellaneous\n\n- Escaping a mask by raising an exception now correctly
  restores the masking state (#118).\n- Named threads which are only started by a
  pre-emption now show up in the trace (#101).\n\n[dejafu-0.7.3.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.3.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.2.0\n-------\n\n-
  **Date**    2017-09-16\n- **Git tag** [dejafu-0.7.2.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.2.0\n\n###
  Test.DejaFu.STM\n\n- The `STM n r` monad now has `Alternative` and `MonadPlus` instances,
  using `orElse` for the binary\n  operation and `retry` for the unit.\n\n### Miscellaneous\n\n-
  The `Eq` instance for `ThreadId`, `CRefId`, `MVarId`, and `TVarId` now only compares
  the numbers,\n  not the names.\n\n    This makes it consistent with the `Ord` instances,
  and is also a small performance gain.\n\n- Now compatible with concurrency-1.2.0.0.\n\n[dejafu-0.7.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.3\n-------\n\n-
  **Date**    2017-09-08\n- **Git tag** [dejafu-0.7.1.3][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.3\n\n###
  Miscellaneous\n\n- Aborted STM transactions are now rolled back correctly (issue
  #111).\n- Slightly improved run-time of systematic testing.\n\n[dejafu-0.7.1.3]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.3\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.2\n-------\n\n-
  **Date**    2017-08-21\n- **Git tag** [dejafu-0.7.1.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.2\n\n###
  Miscellaneous\n\n- Errors thrown with `Control.Monad.fail` no longer terminate testing,
  and are now correctly treated\n  as asynchronous exceptions.\n\n[dejafu-0.7.1.2]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.1\n-------\n\n-
  **Date**    2017-08-16\n- **Git tag** [dejafu-0.7.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.1\n\n###
  Miscellaneous\n\n- Significantly reduced memory usage in systematic testing when
  discarding traces.\n\n    Previously this was `O(max trace length * number of executions)`\n\n
  \   Now it's `O(max trace length + total size of traces kept)`\n\n[dejafu-0.7.1.1]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.1.0\n-------\n\n-
  **Date**    2017-08-10\n- **Git tag** [dejafu-0.7.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.1.0\n\n###
  Test.DejaFu\n\n- Exposed the new SCT discard functions through `dejafuDiscard` and
  `dejafuDiscardIO`.\n\n    There are no `dejafusDiscard` and `dejafusDiscardIO` functions
  because this would probably be\n    confusing, as the traces are shared.\n\n- The
  `Discard` type and `defaultDiscard` function are also exposed.\n\n### Test.DejaFu.Defaults\n\n-
  Added a new `defaultDiscarder` function, which discards nothing.\n\n### Test.DejaFu.SCT\n\n-
  Added new SCT functions to selectively discard results or traces, which can be a
  significant\n  memory saving if you know what sorts of results you are interested
  in:\n    - New type: `Discard`.\n    - New functions: `runSCTDiscard`, `resultsSetDiscard`,
  `sctBoundDiscard`,\n      `sctUniformRandomDiscard`, and `sctWeightedRandomDiscard`.\n
  \   - `resultsSet` and `resultsSet'` now discard traces as they are produced, rather
  than all at the\n      end, greatly improving performance when traces are large.\n\n[dejafu-0.7.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.2\n-------\n\n-
  **Date**    2017-06-12\n- **Git tag** [dejafu-0.7.0.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.2\n\n###
  Test.DejaFu.Refinement\n\n- Removed unnecessary typeclass constraints from `check`,
  `check'`, `checkFor`, and\n  `counterExamples`.\n\n### Miscellaneous\n\n- Removed
  an unnecessary dependency on [monad-loops][].\n\n[monad-loops]: https://hackage.haskell.org/package/monad-loops\n[dejafu-0.7.0.2]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.1\n-------\n\n-
  **Date**    2017-06-09\n- **Git tag** [dejafu-0.7.0.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.1\n\n###
  Test.DejaFu.Refinement\n\n- `check`, `check'`, and `checkFor` are now faster if
  there are multiple counterexamples.\n- The above and `counterExamples` are now faster
  even if there is only a single counterexample in\n  some cases.\n\n[dejafu-0.7.0.1]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.7.0.0\n-------\n\n-
  **Date**    2017-06-07\n- **Git tag** [dejafu-0.7.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.7.0.0\n\n###
  Test.DejaFu\n\n- The new Test.DejaFu.Defaults and Test.DejaFu.Refinement modules
  are re-exported.\n- The new smart constructors from Test.DejaFu.SCT are exported.\n\n###
  Test.DejaFu.Defaults\n\n- The `default*` values are now defined in the new Test.DejaFu.Defaults
  module. There is no breaking\n  API change as they are re-exported from Test.DejaFu.\n\n###
  Test.DejaFu.Refinement\n\n- A new module for checking observational properties of
  the side-effects of stateful, concurrent\n  functions.\n\n    This is related to
  my work on [CoCo][], allowing dejafu to test what CoCo discovers.\n\n### Test.DejaFu.SCT\n\n-
  The `Way` type is now abstract and exposes smart constructor functions:\n    - `systematically`,
  corresponding to the old `Systematically`.\n    - `randomly`, corresponding to the
  old `Randomly`,\n    - `uniformly`, a new uniform random (as opposed to weighted
  random) scheduler.\n    - `swarmy`, corresponding to the old `Randomly` and specifying
  how many executions to use the\n      same weights for.\n- A new `sctUniformRandom`
  function to do uniform (non-weighted) scheduling.\n- The `sctRandom` function is
  now called `sctWeightedRandom` and can now re-use the same weights for\n  multiple
  executions.\n- The `sctPreBound`, `sctFairBound`, and `sctLengthBound` functions
  have been removed.\n\n### Fixed\n\n- An issue where `subconcurrency` would re-use
  `MVar` IDs, leading to false reports of deadlock on\n  occasion (issue #81).\n\n[CoCo]:
  https://github.com/barrucadu/coco\n[dejafu-0.7.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.7.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.6.0.0\n-------\n\n-
  **Date**    2017-04-08\n- **Git tag** [dejafu-0.6.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.6.0.0\n\n###
  Test.DejaFu.Conc\n\n- The `Conc n r a` type is now `ConcT r n a`, and has been given
  a `MonadTrans` instance. Uses of\n  `lift` appear in the execution trace in the
  same way as `liftBase` and `liftIO`.\n    - The `ConcIO` and `ConcST` aliases have
  been updated, so this should be an invisible change to\n      most users.\n\n###
  Test.DejaFu.SCT\n\n- `Way` is now a GADT, no longer taking a type parameter. This
  greatly improves type inference when\n  the `Systematically` constructor is used.\n
  \   - The `NFData` instance for `Way` is now gone. The alternative was requiring
  that any\n      `RandomGen` used also implement `NFData`, which is *very* restrictive\n\n###
  Miscellaneous\n\n- There is now a changelog.\n- Test.DejaFu.Common is now considered
  to form part of the public API of the library.\n- Every definition and instance
  now has a Haddock \"@since\" annotation.\n\n[dejafu-0.6.0.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.6.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.3\n-------\n\n-
  **Date**    2017-04-05\n- **Git tag** [dejafu-0.5.1.3][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.3\n\n###
  Miscellaneous\n\n- The version range on the concurrency package has been changed
  to 1.1.*.\n\n[dejafu-0.5.1.3]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.3\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.2\n-------\n\n-
  **Date**    2017-03-04\n- **Git tag** [dejafu-0.5.1.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.2\n\n**This
  version was misnumbered! It should have caused a minor version bump!**\n\n### Test.DejaFu.Conc\n\n-
  New `MonadRef` and `MonadAtomicRef` instances for the `Conc` type using `CRef`.\n\n###
  Fixed\n\n- A long-standing bug where if the main thread is killed with a `throwTo`,
  the throwing neither\n  appears in the trace nor correctly terminates the execution.\n\n###
  Miscellaneous\n\n- The maximum supported version of the concurrency package has
  been changed to 1.1.1.*.\n\n[dejafu-0.5.1.2]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.1\n-------\n\n-
  **Date**    2017-02-25\n- **Git tag** [dejafu-0.5.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.1\n\n###
  Fixed\n\n- The correct scheduler state is now passed to the scheduler immediately
  after the termination of a\n  `subconcurrency` action.\n- SCT of subconcurrency
  no longer loops infinitely.\n\n[dejafu-0.5.1.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.1.0\n-------\n\n-
  **Date**    2017-02-25\n- **Git tag** [dejafu-0.5.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.1.0\n\n###
  Test.DejaFu\n\n- A new `NFData` instance for `Result`.\n\n### Test.DejaFu.Common\n\n-
  New instances:\n    - `NFData` for `ThreadId`, `CRefId`, `MVarId`, `TVarId`, `IdSource`,
  `ThreadAction`,\n      `Lookahead`, `ActionType`, `TAction`, `Decision`, `Failure`,
  and `MemType`.\n    - `Eq`, `Ord`, and `Show` instances for `IdSource`.\n\n### Test.DejaFu.SCT\n\n-
  New `NFData` instances for `Way`, `Bounds`, `PreemptionBound`, `FairBound`, and
  `LengthBound`.\n- New strict variants of `runSCT` and `resultsSet`: `runSCT'` and
  `resultsSet'`.\n\n### Test.DejaFu.STM\n\n- A new `NFData` instance for `Result`.\n\n[dejafu-0.5.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.2\n-------\n\n-
  **Date**    2017-02-22\n- **Git tag** [dejafu-0.5.0.2][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.0.2\n\n**This
  version was misnumbered! It should have caused a major version bump!**\n\n### Test.DejaFu.Common\n\n-
  A new `StopSubconcurrency` constructor of `ThreadAction`.\n\n### Changed\n\n- A
  `StopConcurrency` action appears in the execution trace immediately after the end
  of a\n  `subconcurrency` action (much like the `PopCatching` and `ResetMasking`
  actions which appear after\n  a catch and mask).\n- A `subconcurrency` action now
  inherits the number of capabilities from the outer computation,\n  rather than being
  reset to 2 as before.\n\n### Miscellaneous\n\n- Test.DejaFu.SCT now compiles with
  MonoLocalBinds enabled (implied by GADTs and TypeFamilies),\n  which may be relevant
  to hackers.\n\n[dejafu-0.5.0.2]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.1\n-------\n\n-
  **Date**    2017-02-21\n- **Git tag** [dejafu-0.5.0.1][]\n- **This version was never
  pushed to hackage, whoops!**\n\n### Fixed\n\n- `readMVar` is once again considered
  a \"release action\" for the purposes of fair-bounding.\n\n[dejafu-0.5.0.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.5.0.0\n-------\n\n-
  **Date**    2017-02-21\n- **Git tag** [dejafu-0.5.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.5.0.0\n\n###
  Test.DejaFu\n\n- All the functions which did take a `Bounds` now take a `Way` instead
  and support random scheduling\n  as well.\n\n### Test.DejaFu.Common\n\n- New `Eq`
  instances for `ThreadAction` and `Lookahead`.\n- A `TryReadMVar` constructor for
  `ThreadAction` and a corresponding `WillTryReadMVar` constructor\n  for `Lookahead`.\n\n###
  Test.DejaFu.Conc\n\n- A new testing-only `subconcurrency` function, to run a concurrent
  action and do something with its\n  result in the same concurrent context, even
  if it fails.\n\n### Test.DejaFu.SCT\n\n- An `sctRandom` function to run a fixed
  number of randomly-scheduled executions of a program.\n- The `Way` type, to abstract
  over how to run a concurrent program, used by new functions `runSCT`\n  and `resultsSet`.\n\n###
  Fixed\n\n- Some previously-missed `CRef` action dependencies are no longer missed.\n\n###
  Miscellaneous\n\n- The supported version of the concurrency package was bumped to
  1.1.0.0, introducing `tryReadMVar`.\n- A bunch of things were called \"Var\" or
  \"Ref\", these are now consistently \"MVar\" and \"CRef\".\n- Significant performance
  improvements in both time and space.\n- The dpor package has been merged back into
  this, as it turned out not to be very generally\n  useful. There is no direct replacement,
  but I have no intent to update it, so the dpor package is\n  now __deprecated__.\n\n[dejafu-0.5.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.5.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.4.0.0\n-------\n\n-
  **Date**    2016-09-10\n- **Git tag** [dejafu-0.4.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.4.0.0\n\n###
  Test.DejaFu\n\n- The `autocheck'` function now takes the schedule bounds as a parameter.\n-
  New `runTestM` and `runTestM'` functions, monad-polymorphic variants of the now-removed\n
  \ `runTestIO` and `runTestIO'` functions.\n\n### Test.DejaFu.Conc\n\n- The `Conc`
  type no longer has the STM type as a parameter.\n- A new `runConcurrent` function,
  a monad-polymorphic version of the now-removed `runConcST` and\n  `runConcIO` functions.\n\n###
  Test.DejaFu.SCT\n\n- The `ST`-specific functions are now monad-polymorphic.\n- The
  `IO` function variants have been removed.\n\n### Test.DejaFu.STM\n\n- A new `runTransaction`
  function, a monad-polymorphic version of the now-removed `runTransactionST`\n  and
  `runTransactionIO` functions.\n\n### Changed\n\n- The termination of the main thread
  in execution traces now appears as a single `Stop`, rather than\n  the sequence
  `Lift, Stop`.\n- Execution traces printed by the helpful functions in Test.DejaFu
  now include a key of thread\n  names.\n\n### Miscellaneous\n\n- Remodularisation:\n
  \   - The Control.* modules have all been split out into a separate \"concurrency\"
  package.\n    - Many definitions from other modules have been moved to the new Test.DejaFu.Common
  module.\n    - The Test.DejaFu.Deterministic module has been renamed to Test.DejaFu.Conc\n\n[dejafu-0.4.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.4.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.2.1\n-------\n\n-
  **Date**    2016-07-21\n- **Git tag** [dejafu-0.3.2.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.2.1\n\n###
  Fixed\n\n- The implementation of the STM `orElse` for `STMLike` incorrectly handled
  some state\n  non-associatively, leading to false deadlocks being reported in some
  cases.\n\n[dejafu-0.3.2.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.2.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.2.0\n-------\n\n-
  **Date**    2016-06-06\n- **Git tag** [dejafu-0.3.2.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.2.0\n\n**Builds
  with both dpor-0.1 and dpor-0.2, however some improvements require dpor-0.2.**\n\n###
  Fixed\n\n- (faster with dpor-0.2) Executions missed due to daemon threads with uninteresting
  first actions\n  are no longer missed.\n\n### Changed\n\n- (requires dpor-0.2) Significantly
  improved dependency inference of exceptions, greatly improving\n  performance of
  testcases using exceptions.\n- Significantly improved dependency inference of STM
  transactions, greatly improving performance of\n  testcases using STM.\n\n[dejafu-0.3.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.1.1\n-------\n\n-
  **Date**    2016-05-26\n- **Git tag** [dejafu-0.3.1.1][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.1.1\n\n###
  Miscellaneous\n\n- Now supports GHC 8.\n\n[dejafu-0.3.1.1]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.1.0\n-------\n\n-
  **Date**    2016-05-02\n- **Git tag** [dejafu-0.3.1.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.1.0\n\n###
  Fixed\n\n- Context switches around relaxed memory commit actions could cause the
  number of pre-emptions in an\n  execution to be miscounted, leading to the pre-emption
  bounding being too lenient.\n\n[dejafu-0.3.1.0]: https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.3.0.0\n-------\n\n-
  **Date**    2016-04-03\n- **Git tag** [dejafu-0.3.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.3.0.0\n\n**The
  minimum supported version of GHC is now 7.10.**\n\nI didn't write proper release
  notes, and this is so far back I don't really care to dig through the\nlogs.\n\n[dejafu-0.3.0.0]:
  https://github.com/barrucadu/dejafu/releases/tag/dejafu-0.3.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.2.0.0\n-------\n\n-
  **Date**    2015-12-01\n- **Git tag** [0.2.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.2.0.0\n\nI
  didn't write proper release notes, and this is so far back I don't really care to
  dig through the\nlogs.\n\n[0.2.0.0]: https://github.com/barrucadu/dejafu/releases/tag/0.2.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n0.1.0.0\n-------\n\n-
  **Date**    2015-08-27\n- **Git tag** [0.1.0.0][]\n- **Hackage** https://hackage.haskell.org/package/dejafu-0.1.0.0\n\nInitial
  release. Go read the API docs.\n\n[0.1.0.0]: https://github.com/barrucadu/dejafu/releases/tag/0.1.0.0\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.9'
  base: ! '>=4.8 && <5'
  leancheck: ! '>=0.6 && <0.8'
  ref-fd: ! '>=0.4 && <0.5'
  containers: ! '>=0.5 && <0.6'
  concurrency: ! '>=1.3 && <1.4'
  transformers: ! '>=0.4 && <0.6'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <2'
  profunctors: ! '>=4.0 && <6.0'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.3.2.0'
- '0.3.2.1'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.2'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.1.2'
- '0.5.1.3'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.1.0'
- '0.7.1.1'
- '0.7.1.2'
- '0.7.1.3'
- '0.7.2.0'
- '0.7.3.0'
- '0.8.0.0'
- '0.9.0.0'
- '0.9.0.1'
- '0.9.0.2'
- '0.9.0.3'
- '0.9.1.0'
- '0.9.1.1'
- '0.9.1.2'
- '1.0.0.0'
author: Michael Walker
latest: '1.0.0.0'
description-type: markdown
description: ! "dejafu\n======\n\n> [Déjà Fu is] A martial art in which the user's
  limbs move in time as\n> well as space, […] It is best described as \"the feeling
  that you\n> have been kicked in the head this way before\"\n>\n> -- Terry Pratchett,
  Thief of Time\n\n- [Installation](#installation)\n- [Quick start guide](#quick-start-guide)\n-
  [Why Déjà Fu?](#why-déjà-fu)\n- [Contributing](#contributing)\n- [Release notes](#release-notes)\n-
  [Questions, feedback, discussion](#questions-feedback-discussion)\n- [Bibliography](#bibliography)\n-
  **[The website!](http://dejafu.readthedocs.io/)**\n\nDéjà Fu is a unit-testing library
  for concurrent Haskell programs.\nTests are deterministic and expressive, making
  it easy and convenient\nto test your threaded code.  Available on [GitHub][], [Hackage][],
  and\n[Stackage][].\n\n[GitHub]:   https://github.com/barrucadu/dejafu\n[Hackage]:
  \ https://hackage.haskell.org/package/dejafu\n[Stackage]: https://www.stackage.org/package/dejafu\n\n\nInstallation\n------------\n\nInstall
  from Hackage globally:\n\n```\n$ cabal install dejafu\n```\n\nOr add it to your
  cabal file:\n\n```\nbuild-depends: ...\n             , dejafu\n```\n\nOr to your
  package.yaml:\n\n```\ndependencies:\n  ...\n  - dejafu\n```\n\n\nQuick start guide\n-----------------\n\nDéjà
  Fu supports unit testing, and comes with a helper function called\n`autocheck` to
  look for some common issues.  Let's see it in action:\n\n```haskell\nimport Control.Concurrent.Classy\n\nmyFunction
  :: MonadConc m => m String\nmyFunction = do\n  var <- newEmptyMVar\n  fork (putMVar
  var \"hello\")\n  fork (putMVar var \"world\")\n  readMVar var\n```\n\nThat `MonadConc`
  is a typeclass abstraction over concurrency, but\nwe'll get onto that shortly.  First,
  the result of testing:\n\n```\n> autocheck myFunction\n[pass] Never Deadlocks\n[pass]
  No Exceptions\n[fail] Consistent Result\n        \"hello\" S0----S1--S0--\n\n        \"world\"
  S0----S2--S0--\nFalse\n```\n\nThere are no deadlocks or uncaught exceptions, which
  is good; but the\nprogram is (as you probably spotted) nondeterministic!\n\nAlong
  with each result, Déjà Fu gives us a representative execution\ntrace in an abbreviated
  form.  `Sn` means that thread `n` started\nexecuting, and `Pn` means that thread
  `n` pre-empted the previously\nrunning thread.\n\n\nWhy Déjà Fu?\n------------\n\nTesting
  concurrent programs is difficult, because in general they are\nnondeterministic.
  \ This leads to people using work-arounds like\nrunning their testsuite many thousands
  of times; or running their\ntestsuite while putting their machine under heavy load.\n\nThese
  approaches are inadequate for a few reasons:\n\n- **How many runs is enough?** When
  you are just hopping to spot a bug\n  by coincidence, how do you know to stop?\n-
  **How do you know if you've fixed a bug you saw previously?**\n  Because the scheduler
  is a black box, you don't know if the\n  previously buggy schedule has been re-run.\n-
  **You won't get that much scheduling variety!** Operating systems\n  and language
  runtimes like to run threads for long periods of time,\n  which reduces the variety
  you get (and so drives up the number of\n  runs you need).\n\nDéjà Fu addresses
  these points by offering *complete* testing.  You\ncan run a test case and be guaranteed
  to find all results with some\nbounds.  These bounds can be configured, or even
  disabled!  The\nunderlying approach used is smarter than merely trying all possible\nexecutions,
  and will in general explore the state-space quickly.\n\nIf your test case is just
  too big for complete testing, there is also\na random scheduling mode, which is
  necessarily *incomplete*.  However,\nDéjà Fu will tend to produce much more schedule
  variety than just\nrunning your test case in `IO` the same number of times, and
  so bugs\nwill tend to crop up sooner.  Furthermore, as you get execution traces\nout,
  you can be certain that a bug has been fixed by simply following\nthe trace by eye.\n\n\nContributing\n------------\n\nBug
  reports, pull requests, and comments are very welcome!\n\nFeel free to contact me
  on GitHub, through IRC (#haskell on freenode),\nor email (mike@barrucadu.co.uk).\n"
license-name: MIT
