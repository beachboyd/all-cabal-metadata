homepage: https://github.com/ncaq/debug-trace-var#readme
changelog-type: markdown
hash: 94d1ef622847e9dac3ff4b965f8267092bffbbe0255edf16ff930d7a26cd980e
test-bench-deps: {}
maintainer: ncaq@ncaq.net
synopsis: You do not have to write variable names twice in Debug.Trace
changelog: ! '# Changelog for debug-trace-var


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  unicode-show: -any
  template-haskell: -any
all-versions:
- '0.1.0'
author: ncaq
latest: '0.1.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/debug-trace-var.svg)](https://hackage.haskell.org/package/debug-trace-var)\n[![Stackage
  LTS](http://stackage.org/package/debug-trace-var/badge/lts)](http://stackage.org/lts/package/debug-trace-var)\n\n#
  debug-trace-var\n\nWhen writing print debug, we often write.\n\n~~~hs\nimport           Debug.Trace\n\nmain
  :: IO ()\nmain = do\n  let a = 1\n  traceIO $ \"a = \" ++ show a\n~~~\n\nThis is
  troublesome to describe the name of the variable twice.\n\nWith debug-trace-var
  you write variables only once.\n\n~~~hs\n{-# LANGUAGE QuasiQuotes #-}\nimport           Debug.Trace.Var\n\nmain
  :: IO ()\nmain = do\n  let a = 1\n  [traceVarIO|a|]\n~~~\n\n# Example\n\n~~~hs\n{-#
  LANGUAGE QuasiQuotes #-}\n\nimport           Debug.Trace.Var\n\n-- > a\n-- n = 1\n--
  s = \"あ\"\na :: IO ()\na = let n = 1\n        s = \"あ\"\n    in [traceVar|n|] ([traceVar|s|]
  return ())\n\n-- > b\n-- \"n = 1\n-- n = 1\"\nb :: String\nb = let n = 1\n    in
  [traceVarId|n|]\n\n-- > c\n-- n = 344\nc :: IO ()\nc = let n = 344\n    in [traceStackVar|n|]
  (return ())\n\n-- > d\n-- n = 344\n-- n = 344\nd :: IO ()\nd = do\n  let n = 344\n
  \ [traceVarIO|n|]\n  [traceVarIO|n|]\n\n-- > e\n-- n = 344\ne :: IO ()\ne = do\n
  \ let n = 344\n  [traceVarM|n|]\n~~~\n\n# Motivation\n\nI wanted to use Template
  Haskell.\n\n# One point advice\n\nYou can use [ndmitchell/debug: Haskell library
  for debugging](https://github.com/ndmitchell/debug)\n"
license-name: MIT
