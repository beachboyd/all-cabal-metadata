homepage: https://github.com/HaskellZhangSong/derive-topdown
changelog-type: markdown
hash: 9a499e8ec63b4cc423df5caa0209b46e549ae3a043cf7092414de41f2b7ed766
test-bench-deps:
  simple-sql-parser: ! '>=0.4'
  base: ! '>=4.5.0.0 && <5'
  syb: ! '>=0.4'
  binary: ! '>=0.8.0.0'
  GenericPretty: ! '>=1.2.1'
  th-expand-syns: ! '>=0.4.3'
  mtl: ! '>=2.1.0'
  transformers: ! '>=0.4.2'
  haskell-src: ! '>=1.0.2.0'
  QuickCheck: ! '>=2.8.0'
  template-haskell: ! '>=2.10'
  primitive: ! '>=0.6.2'
  derive: ! '>=2.5.0'
maintainer: songzh <Haskell.Zhang.Song@hotmail.com>
synopsis: Help Haskellers derive class instances for composited data types.
changelog: ! "derive-topdown\n======\nderive-topdown-0.0.2.0\n--------------\n- `0.0.2.0`\n\t*
  Add deriving superclass functions. When you want to derive a class instance, not
  necessary to derive all its superclasses.\nderive-topdown-0.0.1.0\n--------------\n-
  `0.0.1.0`\n    * Imporve error message.Will print the types list when type is not
  data or newtype defined.\n\nderive-topdown-0.0.0.9\n--------------\n- `0.0.0.9`
  \n    * Changed API for `strategy_derivng(s)`. Deriving strategy should be specified
  first as the default grammar of `deriving`.\n    * Provided `deriving_with_breaks`
  function so that one can specify the types that prevent further standalone deriving
  declarations from generating process. This is mainly for `Generic` class. See the
  test of deriving `Generic` for `HsModule`.\n    * Fixed Strategy deriving problem.
  Deriving with NewtypeStrategy on data type defined by `data` keyword will be ignored.\n
  \   * Fixed problem with class context generation for phantom types. Phantom types
  will not be in the context now.\n    * Fixed `ArrowT` problem. It should be not
  a type variable and should appear in the context.\n    * Handled data constructor
  which contains explicit `forall`.\n    * Added test. It generates class instances
  for data types in `template-haskell` and `haskell-src`.\n\nderive-topdown-0.0.0.7\n--------------\n-
  `0.0.0.7` is a more carefully implemented version of derive-topdown.\nAll APIs are
  **totally** changed compared with 0.0.0.2. Originally it did not work with types
  that contain type synonyms and polymorphic types. It can work for most common cases
  in this version now.\n\nderive-topdown-0.0.0.2\n--------------\n- Fixed some cabal
  file and API problems.\n\nderive-topdown-0.0.0.1\n--------------\n- This is only
  an experimental implementation for deriving class instances from top to bottom.\nThere
  is a lot of deficiencies.\n"
basic-deps:
  base: ! '>=4.8 && <5.0'
  syb: ! '>=0.4'
  th-expand-syns: ! '>=0.4.3'
  mtl: ! '>=2.1.0'
  transformers: ! '>=0.4.2'
  template-haskell: ! '>=2.10'
  primitive: ! '>=0.6.2'
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.7
- 0.0.0.9
- 0.0.1.0
- 0.0.2.0
author: songzh <Haskell.Zhang.Song@hotmail.com>
latest: 0.0.2.0
description-type: markdown
description: ! "# derive-topdown\n[![Hackage version](https://img.shields.io/hackage/v/derive-topdown.svg?label=Hackage)](https://hackage.haskell.org/package/derive-topdown)
  [![Stackage version](https://www.stackage.org/package/derive-topdown/badge/lts?label=Stackage)](https://www.stackage.org/package/derive-topdown)\n\nThis
  is a Haskell project which will derive type class instances from top for a composite
  data type\n\n\n### 1. Standalone deriving\nThere are functions named `deriving_`,
  `derivings`, `derivingss`. Please see the API for their types.\n\n\t{-# LANGUAGE
  StandaloneDeriving,\n\t\tConstraintKinds,\n\t\tUndecidableInstances,\n\t\tGADTs,\n\t\tTemplateHaskell,\n\t\tDeriveGeneric
  #-}\n\t{-# OPTIONS_GHC -ddump-splices #-}\n\t\n\timport Data.Derive.TopDown\n\timport
  GHC.Generics\n\timport Data.Binary\n\timoprt Data.Aeson\n\timport Data.Aeson.TH\n\n\tdata
  Gender = Male | Female\n\ttype Age = Int\n\tdata Person a = P {name :: String ,
  age :: Int, gender :: Gender}\n\tdata Department a = D {dname :: String , \n\t\t\t\t\t\t
  \  head :: Person a, \n\t\t\t\t\t\t   staff :: [Person a]}\n\tdata Company a = C
  {cname :: String, \n\t                    departments :: [Department a]}\n\t\n\tderivings
  [''Eq, ''Ord, ''Generic] ''Company\n\nYou will get:\n\n\t\tderivings [''Eq, ''Ord,
  ''Generic] ''Company\n\t  ======>\n\t    deriving instance Eq Gender\n\t    deriving
  instance Eq (Person a_acKV)\n\t    deriving instance Eq a_acKU => Eq (Department
  a_acKU)\n\t    deriving instance Eq a_acKT => Eq (Company a_acKT)\n\t    deriving
  instance Ord Gender\n\t    deriving instance Ord (Person a_acKV)\n\t    deriving
  instance Ord a_acKU => Ord (Department a_acKU)\n\t    deriving instance Ord a_acKT
  => Ord (Company a_acKT)\n\t    deriving instance Generic Gender\n\t    deriving
  instance Generic (Person a_acKV)\n\t    deriving instance Generic (Department a_acKU)\n\t
  \   deriving instance Generic (Company a_acKT)\n\n### 2. Empty Instances generation\n\nFor
  empty class instances deriving, `instance_`, `instances`, `instancess` are provided.
  We can use it in this way.\n\n\t    instances [''Binary] ''Company\n\t  ======>\n\t
  \   instance Binary Gender\n\t    instance Binary (Person a_af50)\n\t    instance
  Binary a_af4Z => Binary (Department a_af4Z)\n\t    instance Binary a_af4Y => Binary
  (Company a_af4Y)\n\n### 3. Usage with Template Haskell\nFor generating instances
  with a template Haskell function, `derivingTH`, `derivingTHs` and `derivingTHss`
  can be used:\n\t\n\t   derivingTHs\n\t      [(''ToJSON, deriveToJSON defaultOptions),\n\t
  \      (''FromJSON, deriveFromJSON defaultOptions)]\n\t      ''Company\n\t  ======>\n\t
  \   instance ToJSON Gender where\n\t      toJSON\n\t        = \\ value_amQG\n\t
  \           -> case value_amQG of {\n\t                 Male -> String (text-1.2.2.2:Data.Text.pack
  \"Male\")\n\t                 Female -> String (text-1.2.2.2:Data.Text.pack \"Female\")
  }\n\t      toEncoding\n\t        = \\ value_amQH\n\t            -> case value_amQH
  of {\n\t                 Male\n\t                   -> Data.Aeson.Encoding.Internal.text\n\t
  \                       (text-1.2.2.2:Data.Text.pack \"Male\")\n\t                 Female\n\t
  \                  -> Data.Aeson.Encoding.Internal.text\n\t                        (text-1.2.2.2:Data.Text.pack
  \"Female\") }\n\t    instance ToJSON a_amqg => ToJSON (Person a_amqg) where\n\t
  \     toJSON\n\t        = \\ value_amQy\n\t        ...\n\t        ...\nYou can use
  this this function with [`derive`](http://hackage.haskell.org/package/derive) package.\n\n###
  4. Deriving the superclasses\n`Data.Derive.Superclass` provides `deriving_superclasses`,
  `strategy_deriving_superclasses` and newtype_deriving_superclasses, gnds can be
  used to derive class instance and its superclass instances. \n\nFor example:\n\n\t
  \   data A = A\n\t    deriving_superclasses ''Ord ''A\n\nYou wil get:\n\n\t    deriving_superclasses
  ''Ord ''A\n\t  ======>\n\t    deriving instance Ord A\n\t    deriving instance Eq
  A\n\n\n### 5. Deriving with strategies in GHC 8.2\nIf you want to specify the strategy
  for deriving mechanism then `strategy_deriving`, `strategy_derivings` and `strategy_derivingss`
  can be used.\nThe 3 strategies for deriving `StockStrategy`,`AnyclassStrategy`,`NewtypeStrategy`
  are exposed when you import `TopDown`. They can be written as `stock`, `anyclass`
  as the default grammar. For `newtype`, you can write it as `newtype_` since there
  is a clison with `newtype` for data declaration. Please see [DerivingStrategies](https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies)\n\n\n####
  **NOTE**:  About deriving instances of Typeable\nThere is a bug with `isInstance`
  function when working with Typeable class. See [`ticket #11251`](https://ghc.haskell.org/trac/ghc/ticket/11251).
  So there might be problems if you really want to derive `Typeable` class. However,
  this bug should affect you too much here since GHC now has `AutoDeriveTypeable`
  extension, which means you should never derive `Typeable` manually.\n\n#### **NOTE**:
  You cannot derive a type synonym.\n`derive-topdown` will not work with `-XTypeSynonymInstances`
  language extension. The top node in the data declaration tree has to be a data or
  newtype.\n\nMore discussion about `derive-topdown`, please see [`ticket #10607`](https://ghc.haskell.org/trac/ghc/ticket/10607)"
license-name: BSD-3-Clause
