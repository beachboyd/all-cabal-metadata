homepage: https://github.com/sjoerdvisscher/derive-lifted-instances
changelog-type: markdown
hash: 496cb3b55b6030614b728e26790f36f6b76398a9514cf488ce6da3871accc1bd
test-bench-deps: {}
maintainer: sjoerd@w3future.com
synopsis: Derive class instances though various kinds of lifting
changelog: |
  Changelog
  =========

  v0.2.2 2020-10-03
  -----------------
    - Support GHC 9.0

  v0.2   2020-06-29
  -----------------
    - Support deriving co- and dialgebraic classes with `cst` and `eff`
    - Support doing pattern matching for input variables with `inp`

  v0.1.1 2020-06-24
  -----------------
    - Add `monoidDerivBy`

  v0.1   2020-06-22
  -----------------
    - Generalize `tupleDeriv` to `biapDeriv` and `recordDeriv`
    - Generalize `unitDeriv` to `monoidDeriv`

  v0     2020-06-20
  -----------------
    - First release
basic-deps:
  reflection: '>=2.1 && <3'
  base: '>=4.13 && <4.16'
  bifunctors: '>=5.5.7 && <6'
  template-haskell: '>=2.15 && <2.18'
all-versions:
- '0'
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
author: Sjoerd Visscher
latest: 0.2.2
description-type: markdown
description: |
  derive-lifted-instances
  =======================

  [![Hackage](https://img.shields.io/hackage/v/derive-lifted-instances.svg)](https://hackage.haskell.org/package/derive-lifted-instances)
  [![Build Status](https://travis-ci.org/sjoerdvisscher/derive-lifted-instances.svg?branch=master)](https://travis-ci.org/github/sjoerdvisscher/derive-lifted-instances)

  `derive-lifted-instances` generates type class instances using Template Haskell.

  Below is an overview of what this library can do. If you could rewrite a class as one of the cases, and the listed constraints are satisfiable, then an instance can be derived. Note that when another instance of the class is required, this could also be a derived instance
  (i.e. deriving is composable), in case you don't want that instance to actually exist.

  |              | `class C x where alg :: f x -> x`
  |--------------|---
  | `x` iso `y`  | `(Functor f, C y)`
  | `x=m`        | `(Foldable f, Monoid m)`
  | `x=t a`      | `(Traversable f, Applicative t, C a)`
  | `x=t a b`    | `(Traversable f, Biapplicative t, C a, C b)`
  | `x` a record | `(Traversable f, All C flds)`

  |              | `class C x where coalg :: x -> f x`
  |--------------|---
  | `x` iso `y`  | `(Functor f, C y)`
  | `x=m`        | `(Pointed f)`
  | `x=t a`      | `(Applicative f, Traversable t, C a)`
  | `x=t a b`    | `(Applicative f, Bitraversable t, C a, C b)`
  | `x` a record | `(Applicative f, All C flds)`

  |              | `class C x where dialg :: f x -> g x`
  |--------------|---
  | `x` iso `y`  | `(Functor f, Functor g, C y)`
  | `x=m`        | `(Foldable f, Porinted g, Monoid m)`
  | `x=t a`      | `(Traversable f, Applicative g, Applicative t, Traversable t, C a)`
  | `x=t a b`    | `(Traversable f, Applicative g, Biapplicative t, Bitraversable t, C a, C b)`
  | `x` a record | `(Traversable f, Applicative g, All C flds)`
license-name: Apache-2.0
