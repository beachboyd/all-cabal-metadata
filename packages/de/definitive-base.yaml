homepage: http://coiffier.net/projects/definitive-framework.html
changelog-type: ''
hash: 02c9e3ab5a8471297606066bebb8cc6afae55e69dec61ac7d08c49fd43000a5c
test-bench-deps: {}
maintainer: marc.coiffier@gmail.com
synopsis: The base modules of the Definitive framework.
changelog: ''
basic-deps:
  bytestring: (==0.10.*)
  OpenGL: (==2.9.*)
  base: (==4.7.*)
  array: (==0.5.*)
  containers: (==0.5.*)
  ghc-prim: (==0.3.*)
  GLURaw: (==1.4.*)
  deepseq: (==1.3.*)
  OpenGLRaw: (==1.5.*)
  primitive: (==0.5.*)
  vector: (==0.10.*)
all-versions:
- '1.0'
- '1.2'
- 1.2.1
- '2.3'
author: Marc Coiffier
latest: '2.3'
description-type: haddock
description: ! 'The Definitive framework is an attempt at harnessing the declarative

  nature of Haskell to provide a solid and simple base for writing

  real-world programs, as well as complex algorithms.


  This package contains the base modules of the framework, and provides

  only the most basic functionality, ranging from basic algebraic

  structures, such as monoids and rings, to functors, applicative functors,

  monads and transformers.


  Lenses are used heavily in all the framework''s abstractions, replacing

  more traditional functions (''WriterT'' and ''runWriterT'' are implemented

  in the same isomorphism ''writerT'', for example). When used wisely,

  lenses can greatly improve clarity in both code and thought, so I

  tried to provide for them in the most ubiquitous way possible,

  defining them as soon as possible. Isomorphisms in particular are

  surprisingly useful in many instances, from converting between types

  to acting on a value''s representation as if it were the value itself.


  Packages using the Definitive framework should be compiled with the

  RebindableSyntax flag and include the Definitive module, which exports

  the same interface as the Prelude, except for some extras.

  Here is a list of design differences between the standard Prelude

  and the Definitive framework :


  * The ''+'', ''-'', ''negate'', and ''*'' are now part of the Semigroup,

  Disjonctive, Negative, Semiring classes instead of Num (default

  instances are defined to reimplement the Prelude, making it easy

  to adjust your code for compatibility)


  * The mapM, traverseM, liftM, and such functions have been hidden,

  since they only reimplement the traverse, map, and other simpler

  functions.


  * Lenses are used whenever possible instead of more usual functions.

  You are encouraged to read the interface for the Algebra.Lens

  module, which contains everything you will need to be able to use

  lenses to their full potential (except maybe a good explanation).'
license-name: LicenseRef-OtherLicense
