homepage: https://github.com/amosr/limp
changelog-type: text
hash: d2802905557ebabe27f2146b0e4e7695998a8d5a170bfa5ab34a7a5ecc0148db
test-bench-deps:
  tasty-th: ==0.1.*
  base: <5
  limp: -any
  containers: ! '>=0.5 && <0.7'
  tasty-quickcheck: ! '>=0.8'
  tasty: -any
  QuickCheck: -any
maintainer: amos.robinson@gmail.com
synopsis: representation of Integer Linear Programs
changelog: ! "0.3.2.3, 2018/11/13:\n  * Fix pretty-printing bug: printed programs
  did not include final 'End' line, so cbc could not parse the programs\n  * Relax
  the upper bound for containers dependency (contributed by @fumieval)\n  * Update
  test dependencies\n  * Update package description\n\n0.3.2.2, 2018/06/04:\n  * Build
  -Wall clean with GHC 8.4.3\n  * Relax the upper bound for base dependency\n  * Add
  missing semigroup instances (contributed by @fumieval)\n\n0.3.2.1, 2015/07/21:\n
  \ * Naive implementations of two solving algorithms:\n    * Branch-and-bound algorithm
  for mixed programs\n    * Simplex algorithm for relaxed (real) programs\n  * Add
  tests to package description\n\n0.3.2.0, 2014/11/02:\n  * Error handling for simplifier\n\n0.3.1.0,
  2014/09/19:\n  * Simplifier for Canon programs\n  * Pretty-printer for Canon programs\n\n0.3.0.0,
  2014/09/03:\n  * Simplify Canonical representation\n  * Add evaluator for Program
  representation\n\n0.1.0.0, 2014/06/04:\n  * Initial release\n"
basic-deps:
  base: ! '>=4.9 && <5'
  containers: ! '>=0.5 && <0.7'
all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
author: Amos Robinson
latest: 0.3.2.3
description-type: markdown
description: ! 'limp

  ====


  This package provides two representations for linear programs: "Numeric.Limp.Program",
  which is what I expect end-users to use, and

  "Numeric.Limp.Canon", which is simpler, but would be less nice for writing linear
  programs.

  You can convert programs from the Program representation to the Canon representation
  using "Numeric.Limp.Canon.Convert", and then pretty-print the program using "Numeric.Limp.Canon.Pretty".


  There is a very simple branch-and-bound solver in "Numeric.Limp.Solve.Branch.Simple",
  and a simplex solver for relaxed (real only) programs in "Numeric.Limp.Solve.Simplex.Maps".

  See the limp-cbc package for a simple external solver.


'
license-name: MIT
