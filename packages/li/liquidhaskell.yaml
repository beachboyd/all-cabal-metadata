homepage: https://github.com/ucsd-progsys/liquidhaskell
changelog-type: markdown
hash: 06d07f6d3d77082bee3cca92553d88a528bd0d750d88a1577c47d1bc16ff5091
test-bench-deps:
  ghc: -any
  extra: -any
  stm: '>=2.4'
  base: '>=4.8.1.0 && <5'
  tasty-golden: '>=2.0.0'
  text: -any
  syb: -any
  filepath: '>=1.3'
  process: '>=1.2'
  parsec: -any
  tagged: '>=0.7.3'
  containers: '>=0.5'
  string-conv: '>=0.1'
  liquid-fixpoint: '>=0.8.0.0'
  mtl: '>=2.1'
  tasty-hunit: '>=0.9'
  liquidhaskell: -any
  tasty-rerun: '>=1.1'
  transformers: '>=0.3'
  optparse-applicative: '>=0.11'
  tasty: '>=0.10 && <1.3'
  tasty-ant-xml: -any
  directory: '>=1.2'
maintainer: Ranjit Jhala <jhala@cs.ucsd.edu>
synopsis: Liquid Types for Haskell
changelog: "# Changes\n\n## NEXT 0.8.10.1\n\n- Support for GHC 8.10.1\n- LiquidHaskell
  is now available as a GHC Plugin\n\n## 0.8.6.0\n\n- Automatically check (transitive)
  dependencies\n- Built with GHC 8.6.4\n- Structural termination checker (on by default)\n-
  Support for specifying class-laws and that they hold on instances\n- Bug fixes for
  PLE\n- Need to run LH on imported libs (with source) first; can use `--compile-spec`
  to avoid checking.\n\n## 0.8.4.0\n\n- Support for GHC 8.4.3\n- Significant restructuring
  of `Bare` front-end to shrink dependency on GHC-API\n\n## 0.8.2.2\n\n- Support for
  GHC 8.2.2\n\n- Support for GADTs and TypeFamilies, see\n\t- `tests/{pos,neg}/ExactGADT*.hs`\n\n-
  Add support for Bags/Multisets, see\n\t- `tests/pos/bag.hs`\n\t- `tests/neg/bag.hs`\n\t-
  `tests/pos/ListISort-bag.hs`\n\n- Add support for *inductive predicates* see\n\t-
  `tests/pos/IndEven.hs`\n\t- `tests/pos/IndPerm.hs`\n\t- `tests/pos/IndStar.hs`\n\n##
  0.8.0.1\n\n- Support for GHC 8.0.2 \n\n## 0.7.0.1\n\n- **DELETED** the gsDcons and
  generally carrying DataConP beyond Bare; this _may_ cause\n  problems with `target`
  as I removed the `dconEnv` field in `TargetState`. Is it live?\n  To restore: have
  to apply the substitution syms/su in Bare.hs ALSO to gsDconsP (after \n  restoring
  the gsDconsP field to [(DataCon, DataConP)])\n\n\n- **breaking change** Remove the
  `Bool` vs. `Prop` distinction. This means that: \n\n    * signatures that use(d)
  `Prop` as a type, e.g. \n      `foo :: Int -> Prop` should just be `foo :: Int ->
  Bool`.\n\n    * refinements that use(d) `Prop v` e.g. \n      `isNull :: xs:[a]
  -> {v:Bool | Prop v <=> len xs > 0}`\n      should just be `isNull :: xs:[a] ->
  {v:Bool | v <=> len xs > 0}`.\n\n- Add `--eliminate={none, some, all}`. Here\n  *
  `none` means don't use eliminate at all, use qualifiers everywhere (old-style)\n
  \ * `some` which is the **DEFAULT**  -- means eliminate all the **non-cut** variables\n
  \ * `all`  means eliminate where you can, and solve *cut* variables to `True`.\n\n-
  Change `--higherorder` so that it uses *only* the qualifiers obtained from\n  type
  aliases (e.g. `type Nat = {v:Int | ... }`) and nothing else. This\n  requires `eliminate=some`.\n\n-
  Add a `--json` flag that runs in quiet mode where all output is\n  suppressed and
  only the list of errors is returned as a JSON object to be\n  consumed by an editor.\n\n-
  Add `--checks` flag (formerly `--binders`), which checks a given binder's\n  definition,
  assuming specified types for all callees (but inferring types for\n  callees without
  signatures.)\n\n- Add `--time-binds` which is like the above, but checks all binders
  in a module\n  and prints out time taken for each.\n\n## 0.5.0.1\n\n- Fixed a bug
  in the specification for `Data.Traversable.sequence`\n- Make interpreted mul and
  div the default, when `solver = z3`\n- Use `--higherorder` to allow higher order
  binders into the fixpoint environment \n\n## 0.5.0.0\n\n- Added support for building
  with `stack`\n\n- Added support for GHC 7.10 (in addition to 7.8)\n\n- Added '--cabaldir'
  option that will automatically find a .cabal file in the ancestor\n  path from which
  the target file belongs, and then add the relevant source and dependencies\n  to
  the paths searched for by LiquidHaskell.\n\n  This means we don't have to manually
  do `-i src` etc. when checking large projects,\n  which can be tedious e.g. within
  emacs.\n\n\n## 0.4.0.0\n\n- Bounds as an alternative for logical constraints see
  `benchmarks/icfp15/pos/Overview.lhs`\n\n## 0.3.0.0\n\n- Logical constraints: add
  extra subtyping constraints to signatures, e.g.\n\n    {-@ \n    (.) :: forall <p
  :: b -> c -> Prop, q :: a -> b -> Prop, r :: a -> c -> Prop>. \n           {x::a,
  w::b<q x> |- c<p w> <: c<r x>}\n           (y:b -> c<p y>)\n        -> (z:a -> b<q
  z>)\n        ->  x:a -> c<r x>\n    @-}\n    (.) f g x = f (g x)\n\n- Inlining haskell
  functions as predicates and expressions, e.g.\n\n    {-@ inline max @-}\n    max
  x y = if x >= y then x else y\n\n- Refining class instances. For example\n\n    {-@
  instance Compare Int where\n        cmax :: Odd -> Odd -> Odd @-}\n\n- Major restructuring
  of internal APIs\n\n## 0.2.1.0\n- Experimental support for lifting haskell functions
  to measures\nIf you annotate a Haskell function `foo` with {-@ measure foo @-},
  LiquidHaskell will attempt to derive an equivalent measure from `foo`'s definition.
  This should help eliminate some boilerplate measures that used to be required.\n\n##
  0.2.0.0\n\n- Move to GHC-7.8.3\nLiquidHaskell now *requires* ghc-7.8.3.\n\n- Termination\nLiquidHaskell
  will now attempt to prove all recursive functions terminating. It tries to prove
  that some parameter (or combination thereof) decreases at each recursive callsite.
  By default, this will be the first parameter with an associated size measure (see
  Size Measures), but can be overridden with the `Decreases` annotation or a termination
  expression (see Termination Expressions). \n\nIf proving termination is too big
  of burden, it can be disabled on a per-module basis with the `--no-termination`
  flag, or on a per-function basis with the `Lazy` annotation.\n\n- Size Measures\nData
  declarations now optionally take a *size measure*, which LiquidHaskell will use
  to prove termination of recursive functions. The syntax is:\n\n    {-@ data List
  a [len] = Nil | Cons a (List a) @-}\n\n- Termination Expressions\nTermination Expressions
  can be used to specify the decreasing metric of a recursive function. They can be
  any valid LiquidHaskell expression and must be placed after the function's LiquidHaskell
  type, e.g.\n\n    {-@ map :: (a -> b) -> xs:[a] -> [a] / [len xs] @-}\n\n- Type
  Holes\nTo reduce the annotation burden, LiquidHaskell now accepts `_` as a placeholder
  for types and refinements. It can take the place of any base Haskell type and LiquidHaskell
  will query GHC to fill in the blanks, or it can take the place of a refinement predicate,
  in which case LiquidHaskell will infer an appropriate refinement. For example,\n\n
  \   {-@ add :: x:_ -> y:_ -> {v:_ | v = x + y} @-}\n    add x y = x + y\n\nbecomes\n\n
  \   {-@ add :: Num a => x:a -> y:a -> {v:a | v = x + y} @-}\n    add x y = x + y\n\n-
  Assumed Specifications\nThe `assume` annotation now works as you might expect it
  to, i.e. LiquidHaskell will *not* verify that the implementation is correct. Furthermore,
  `assume` can be used to locally override the type of an imported function.\n\n-
  Derived Measure Selectors\nGiven a data definition\n\n    {-@ data Foo = Foo { bar
  :: Int, baz :: Bool } @-}\n\nLiquidHaskell will automatically derive measures\n\n
  \   {-@ measure bar :: Foo -> Int @-}\n    {-@ measure baz :: Foo -> Bool @-}\n\n-
  Type-Class Specifications\nLiquidHaskell can now verify prove that type-class instances
  satisfy a specification. Simply use the new `class` annotation\n\n    {-@ class
  Num a where\n          (+) :: x:a -> y:a -> {v:a | v = x + y}\n          (-) ::
  x:a -> y:a -> {v:a | v = x - y}\n          ...\n      @-}\n\nand LiquidHaskell will
  attempt to prove at each instance declaration that the implementations satisfy the
  class specification.\n\nWhen defining type-class specifications you may find the
  need to use overloaded measures, to allow for type-specific definitions (see Type-Indexed
  Measures).\n\n- Type-Indexed Measures\nLiquidHaskell now accepts measures with *type-specific*
  definitions, e.g. a measure to describe the size of a value. Such measures are defined
  using the `class measure` syntax\n\n    {-@ class measure size :: forall a. a ->
  Int @-}\n\nand instances can be defined using the `instance measure` syntax, which
  mirrors the regular measure syntax\n\n    {-@ instance measure size :: [a] -> Int\n
  \       size ([])   = 0\n        size (x:xs) = 1 + size xs\n      @-}\n    {-@ instance
  measure size :: Tree a -> Int\n        size (Leaf)       = 0\n        size (Node
  l x r) = 1 + size l + size r\n      @-}\n\n- Parsing\nWe have greatly improved our
  parser to require fewer parentheses! Yay!\n\n- Emacs/Vim Support\nLiquidHaskell
  now comes with syntax checkers for [flycheck](https://github.com/flycheck/flycheck)
  in Emacs and [syntastic](https://github.com/scrooloose/syntastic) in Vim. \n\n-
  Incremental Checking\nLiquidHaskell has a new `--diffcheck` flag that will only
  check binders that have changed since the last run, which can drastically improve
  verification times.\n\n- Experimental Support for Z3's theory of real numbers with
  the `--real` flag.\n"
basic-deps:
  cereal: -any
  ghc: -any
  bytestring: '>=0.10'
  fingertree: '>=0.1'
  extra: -any
  split: -any
  Cabal: <3.3
  base: '>=4.11.1.0 && <5'
  time: '>=1.4'
  Diff: '>=0.3 && <0.4'
  unordered-containers: '>=0.2'
  text: '>=1.2'
  syb: '>=0.4.4'
  filepath: '>=1.3'
  gitrev: -any
  parsec: '>=3.1'
  data-default: '>=0.5'
  containers: '>=0.5'
  ghc-paths: '>=0.1'
  ghc-boot: -any
  binary: -any
  ghc-prim: -any
  optics: '>=0.2'
  liquid-fixpoint: '>=0.8.0.0'
  mtl: '>=2.1'
  cmdargs: '>=0.10'
  optparse-simple: -any
  githash: -any
  hashable: '>=1.3'
  liquidhaskell: -any
  transformers: '>=0.3'
  temporary: '>=1.2'
  deepseq: '>=1.3'
  hscolour: '>=1.22'
  pretty: '>=1.1'
  aeson: -any
  template-haskell: '>=2.9'
  vector: '>=0.10'
  directory: '>=1.2'
all-versions:
- '0.1'
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.5
- 0.8.2.0
- 0.8.2.2
- 0.8.2.3
- 0.8.2.4
- 0.8.6.0
- 0.8.6.2
- 0.8.10.1
author: Ranjit Jhala, Niki Vazou, Eric Seidel
latest: 0.8.10.1
description-type: markdown
description: "![LiquidHaskell](/resources/logo.png)\n\n\n\n[![Hackage](https://img.shields.io/hackage/v/liquidhaskell.svg)](https://hackage.haskell.org/package/liquidhaskell)
  [![Hackage-Deps](https://img.shields.io/hackage-deps/v/liquidhaskell.svg)](http://packdeps.haskellers.com/feed?needle=liquidhaskell)
  [![Build Status](https://img.shields.io/circleci/project/ucsd-progsys/liquidhaskell/master.svg)](https://circleci.com/gh/ucsd-progsys/liquidhaskell)\n[![Windows
  build status](https://ci.appveyor.com/api/projects/status/78y7uusjcgor5p16/branch/develop?svg=true)](https://ci.appveyor.com/project/varosi/liquidhaskell-nlhra/branch/develop)\n\n##
  Quick Links\n\n* [Try LiquidHaskell in your browser](http://goto.ucsd.edu:8090/index.html)\n*
  [Splash page with examples and link to blog](https://ucsd-progsys.github.io/liquidhaskell-blog/)\n*
  [120 minute workshop with more examples](http://ucsd-progsys.github.io/lh-workshop/01-index.html)\n*
  [Long ish Tutorial](http://ucsd-progsys.github.io/liquidhaskell-tutorial/)\n\n##
  Documentation\n\n* [LH Documentation](http://ucsd-progsys.github.io/liquidhaskell/)
  \n* [Edit here](/docs/mkDocs)\n\n## Questions\n\nIf you have any questions\n\n*
  Join the Liquid Haskell [slack channel](https://join.slack.com/t/liquidhaskell/shared_invite/enQtMjY4MTk3NDkwODE3LTFmZGFkNGEzYWRkNDJmZDQ0ZGU1MzBiZWZiZDhhNmY3YTJiMjUzYTRlNjMyZDk1NDU3ZGIxYzhlOTIzN2UxNWE)\n*
  Mail the [users mailing list](https://groups.google.com/forum/#!forum/liquidhaskell)\n*
  Create a github issue\n\n"
license-name: BSD-3-Clause
