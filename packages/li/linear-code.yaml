homepage: https://github.com/wchresta/linear-code#readme
changelog-type: markdown
hash: 1bd4a1a76bf7ceba3f4e83af80aae94d9d28b8c4a96680bd36e059ce3ed981d5
test-bench-deps:
  tasty-smallcheck: -any
  base: ! '>=4.7 && <5'
  matrix: -any
  data-default: -any
  ghc-typelits-knownnat: -any
  smallcheck: -any
  ghc-typelits-natnormalise: -any
  combinat: -any
  containers: -any
  HaskellForMaths: -any
  linear-code: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  QuickCheck: -any
maintainer: wanja dot hs at chrummibei dot ch
synopsis: A simple library for linear codes (coding theory, error correction)
changelog: ! "0.1.0\n-----\n\n* Initial release\n  - Includes trivial, hamming and
  random codes\n  - Implements syndrome decoding\n\n"
basic-deps:
  base: ! '>=4.7 && <5'
  matrix: -any
  data-default: -any
  ghc-typelits-knownnat: -any
  ghc-typelits-natnormalise: -any
  combinat: -any
  containers: -any
  HaskellForMaths: -any
  random: -any
all-versions:
- '0.1.0'
author: Wanja Chresta
latest: '0.1.0'
description-type: markdown
description: ! '# linear-code

  Library to handle linear codes from coding theory.


  The library is designed to carry the most important bits of information in the

  type system while still keeping the types sane.


  This library is based roughly on [_Introduction to Coding Theory_ by _Yehuda Lindell_](http://u.cs.biu.ac.il/~lindell/89-662/coding_theory-lecture-notes.pdf)


  # Usage example

  ## Working with random codes

  ```Haskell

  > :m + Math.Code.Linear System.Random

  > :set -XDataKinds

  > c <- randomIO :: IO (LinearCode 7 4 F5)

  > c

  [7,4]_5-Code

  > generatorMatrix c

  ( 1 0 1 0 0 2 0 )

  ( 0 2 0 0 1 2 0 )

  ( 0 1 0 1 0 1 0 )

  ( 1 0 0 0 0 1 1 )

  > e1 :: Vector 4 F5

  ( 1 0 0 0 )

  > v = encode c e1

  > v

  ( 1 0 1 0 0 2 0 )

  > 2 ^* e4 :: Vector 7 F3

  ( 0 0 0 2 0 0 0 )

  > vWithError = v + 2 ^* e4

  > vWithError

  ( 1 0 1 2 0 2 0 )

  > isCodeword c v

  True

  > isCodeword c vWithError

  False

  > decode c vWithError

  Just ( 1 0 2 2 2 2 0 )

  ```

  Notice, the returned vector is NOT the one without error. The reason for this

  is that a random code most likely does not have a distance >2 which would be

  needed to correct one error. Let''s try with a hamming code


  ## Correcting errors with hamming codes

  ```Haskell

  > c = hamming :: BinaryCode 7 4

  > generatorMatrix c

  ( 1 1 0 1 0 0 0 )

  ( 1 0 1 0 1 0 0 )

  ( 0 1 1 0 0 1 0 )

  ( 1 1 1 0 0 0 1 )

  > v = encode c e2

  > vWithError = v + e3

  > Just v'' = decode c vWithError

  > v'' == v

  True

  ```


'
license-name: GPL-3
