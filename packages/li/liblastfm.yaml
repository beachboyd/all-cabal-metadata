homepage: ''
changelog-type: markdown
hash: 087d3be2530b455b12af6c40b1c767eb9a24458ccf52656100bd758610adc8c0
test-bench-deps:
  http-client: -any
  cereal: -any
  bytestring: -any
  lens-aeson: ! '>=1.0.0.1'
  xml-conduit: -any
  base: ==4.*
  hspec: -any
  text: -any
  HUnit: -any
  containers: -any
  lens: ! '>=4.4'
  http-client-tls: -any
  cryptonite: -any
  network-uri: -any
  hspec-expectations-lens: ! '>=0.3.0.0'
  transformers: -any
  xml-html-conduit-lens: ! '>=0.3'
  liblastfm: -any
  aeson: -any
  profunctors: -any
maintainer: Matvey Aksenov <matvey.aksenov@gmail.com>
synopsis: Lastfm API interface
changelog: ! "0.6.1\n=====\n\n  * Set default schema to 'https' (issue #27 fixed).\n\n0.6.0\n=====\n\n
  \ * Stopped using the deprecated stuff from http-client.\n\n  * Removed `N.L.Response.closeConnection`
  as it's become a no-op.\n\n  * Removed the \"Network\" prefix from the modules'
  names.\n\n  * Set default schema to 'http', since ws.audioscrobbler.com has no proper
  SSL support (issue #27).\n\n0.5.1\n=====\n\n  * Updated documentation to reflect
  the changes in `0.5.0`.\n\n  * Dropped `void` and `contravariant` dependencies\n\n0.5.0\n=====\n\n
  \ * Fixed `http-client`'s `Manager` misuse: every call to `lastfm*` takes a\n    `Connection`
  parameter now and multiple calls should share it.\n\n0.4.1.0\n=======\n\n  * Updated
  `lens` dependency\n\n  * Switched to `network-uri` package\n\n0.4.0.0\n=======\n\n
  \ * `http-conduit` exceptions aren't propagate further into user code anymore\n\n
  \ * XML responses are parsed into `Document` type from `xml-conduit`\n\n0.3.2.0\n=======\n\n
  \ * Fixed `auth.getMobileSession` API method\n\n  * Provided `lastfm_` function
  for making requests without parsing response. That is most useful for `POST` requests
  like `N.L.Track.love`\n\n0.3.0.0\n=======\n\n  * Supported batch operations for
  `N.L.Track.scrobble`, `N.L.Library.{addAlbum,addArtist}`\n\n0.2.0.0\n=======\n\n
  \ * Vastly simplified internal representations leading to simpler library interface\n"
basic-deps:
  http-client: ! '>=0.5'
  cereal: -any
  bytestring: -any
  xml-conduit: ! '>=1.1'
  base: ! '>=4 && <5'
  text: -any
  semigroups: -any
  containers: ! '>=0.5'
  http-client-tls: ! '>=0.2'
  cryptonite: ! '>=0.7'
  network-uri: -any
  transformers: -any
  aeson: -any
  profunctors: -any
all-versions:
- '0.0.1.0'
- '0.0.2.1'
- '0.0.2.2'
- '0.0.3.0'
- '0.0.3.1'
- '0.0.3.2'
- '0.0.3.3'
- '0.0.3.4'
- '0.0.3.5'
- '0.0.3.6'
- '0.0.3.7'
- '0.0.3.8'
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.1.2'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.2.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0'
- '0.5.1'
- '0.6.0'
- '0.6.1'
author: Matvey Aksenov, Dmitry Malikov
latest: '0.6.1'
description-type: markdown
description: ! "liblastfm\n=========\n[![Hackage](https://budueba.com/hackage/liblastfm)](https://hackage.haskell.org/package/liblastfm)\n[![Build
  Status](https://secure.travis-ci.org/supki/liblastfm.png?branch=master)](https://travis-ci.org/supki/liblastfm)\n\nComplete
  API interface to [last.fm][last.fm] service.\nDocumentation is available in two
  flavours:\n\n  * original [API reference][last.fm/api]\n\n  * liblastfm [haddocks][liblastfm/haddocks]\n\nIntroduction\n------------\nliblastfm
  provides Applicative interface for constructing requests. Also, it handles all machinery
  needed to prepare request for sending:\n\n  * [signing][last.fm/sign]\n\n  * url-encoding\n\n
  \ * miscellaneous stuff like choosing correct HTTP method, etc\n\nOnce request is
  ready, liblastfm can send it and get you back a response.\nResponse format might
  be:\n\n  * [aeson][aeson] `Value` for json queries\n\n  * [xml-conduit][xml-conduit]
  `Document` for xml queries\n\nInstallation\n------------\nTo install either use
  hackage:\n\n    % cabal install liblastfm\n\nOr git:\n\n    % git clone git@github.com:supki/liblastfm\n
  \   % cd liblastfm\n    % cabal install\n\nUsage\n-----\nSuppose, you need to use
  [`tag.search`][last.fm/api-usage] API method.\nFirst find it in liblastfm: `Tag`
  would be the name of the module and `search` would be the name of function. [Here
  it is][liblastfm/haddocks-usage].\nSo import a couple of modules:\n\n    >>> import
  \          Lastfm            -- a bunch of useful utilities\n    >>> import qualified
  Lastfm.Tag as Tag -- for Tag.search\n\nNow you may use applicative `<*>` for required
  and `<*` or `*>` for optional parameters to construct\ndesired request:\n\n    Tag.search
  <*> tag \"russian-folk\" <* limit 3 <*> apiKey \"29effec263316a1f8a97f753caaa83e0\"
  <* json\n\nTo send constructed request use `lastfm`:\n\n    >>> con <- newConnection\n
  \   >>> lastfm con $ Tag.search <*> tag \"russian-folk\" <* limit 10 <*> apiKey
  \"29effec263316a1f8a97f753caaa83e0\" <* json\n    Right (Object (fromList [(\"results\",Object
  (fromList [(\"tagmatches\", ...\n\n[Wiki][liblastfm/wiki] describes how to parse
  responses.\n\nFAQ\n---\n\n**Q: I'm getting the following error. How do I fix it?**\n\n```\n>>>
  Artist.getInfo <*> artist \"Pink Floyd\" <*> apiKey \"29effec263316a1f8a97f753caaa83e0\"\n\n<interactive>:8:27:\n
  \   Couldn't match expected type `Data.Text.Lazy.Internal.Text'\n                with
  actual type `[Char]\n```\n\nA: This means you haven't OverloadedStrings extension
  enabled.\nTo enable it (either one works):\n\n  * type in `:set -XOverloadedStrings`
  while in ghci session.\n\n  * add `{-# LANGUAGE OverloadedStrings #-}` to the top
  of the file\n\n  * compile with `-XOverloadedStrings` switch\n\n**Q: I'm getting
  the following error. How do I fix it?**\n\n```\n>>> lastfm (Artist.getInfo <*> artist
  \"Pink Floyd\" <*> apiKey \"29effec263316a1f8a97f753caaa83e0\")\n\n<interactive>:13:1:\n
  \   No instance for (Show (IO (Either LastfmError r0)))\n      arising from a use
  of `print'\n    Possible fix:\n      add an instance declaration for (Show (IO (Either
  LastfmError r0)))\n    In the first argument of `print', namely `it'\n    In a stmt
  of an interactive GHCi command: print it\n```\n\nA: This error message indicates
  that GHC cannot infer response format for the `Request`.\nTo fix it, add use `json`
  or `xml` helpers, depending on your needs\n\nA note on testing\n-----------------\n\nTo
  test Lastfm API compatibility (`api` test suite)—specifically, authentication requiring\nexamples—you
  will need to set `HASKELL_LIBLASTFM_APIKEY`, `HASKELL_LIBLASTFM_SESSIONKEY`,\nand
  `HASKELL_LIBLASTFM_SECRET` environment variables to your api key, session key, and\nsecret
  respectively; for example (bash):\n\n```bash\nexport HASKELL_LIBLASTFM_APIKEY=\"__API_KEY__\"\nexport
  HASKELL_LIBLASTFM_SESSIONKEY=\"__SESSION_KEY__\"\nexport HASKELL_LIBLASTFM_SECRET=\"__SECRET__\"\n```\n\nPlease,
  consult Lastfm API documentation and  `example/*-authentication.hs`\nexamples if
  you don't know where to get your credentials.\n\n [last.fm]: http://www.last.fm/\n
  [last.fm/api]: http://www.last.fm/api/intro\n [last.fm/api-usage]: http://www.last.fm/api/show/tag.search\n
  [last.fm/sign]: http://www.last.fm/api/authspec#8\n [liblastfm/haddocks]: http://supki.github.io/liblastfm/\n
  [liblastfm/haddocks-usage]: http://supki.github.com/liblastfm/Network-Lastfm-Tag.html#v:search\n
  [liblastfm/wiki]: https://github.com/supki/liblastfm/wiki/How-to-parse-JSON-response\n
  [aeson]: https://hackage.haskell.org/package/aeson\n [xml-conduit]: https://hackage.haskell.org/package/xml-conduit\n"
license-name: MIT
