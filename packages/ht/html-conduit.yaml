homepage: https://github.com/snoyberg/xml
changelog-type: markdown
hash: b90eb3f4a9bef42e03b401ec42a455598416bb063db8097a22af0e822327a1d3
test-bench-deps:
  bytestring: -any
  xml-conduit: -any
  base: -any
  hspec: ! '>=1.3'
  html-conduit: -any
  HUnit: -any
  containers: -any
maintainer: michael@snoyman.com
synopsis: Parse HTML documents using xml-conduit datatypes.
changelog: ! '## 1.3.0


  * Upgrade to conduit 1.3


  ## 1.2.1.2


  * Remove an upper bound

  * Doc improvement


  ## 1.2.1.1


  * Allow xml-conduit 1.4


  ## 1.2.1


  * Add strict and lazy text parsing [#66](https://github.com/snoyberg/xml/pull/66)


  ## 1.2.0


  * Drop system-filepath


  ## 1.1.1.2


  * Fix a bug with double-unescaping of entities

'
basic-deps:
  bytestring: -any
  xml-conduit: ! '>=1.3'
  base: ! '>=4 && <5'
  tagstream-conduit: ! '>=0.5.5.3 && <0.6'
  text: -any
  conduit: ! '>=1.3'
  containers: -any
  xml-types: ! '>=0.3 && <0.4'
  transformers: -any
  resourcet: ! '>=1.2'
all-versions:
- '0.0.0'
- '0.0.1'
- '0.1.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.1.0.4'
- '1.1.0.5'
- '1.1.0.6'
- '1.1.1'
- '1.1.1.1'
- '1.1.1.2'
- '1.2.0'
- '1.2.1'
- '1.2.1.1'
- '1.2.1.2'
- '1.3.0'
author: Michael Snoyman
latest: '1.3.0'
description-type: markdown
description: ! "This package uses tagstream-conduit for its parser. It automatically
  balances\nmismatched tags, so that there shouldn't be any parse failures. It does
  not\nhandle a full HTML document rendering, such as adding missing html and head\ntags.\n\nSimple
  usage example:\n\n```haskell\n#!/usr/bin/env stack\n{- stack --install-ghc --resolver
  lts-6.23 runghc\n   --package http-conduit --package html-conduit\n-}\n{-# LANGUAGE
  OverloadedStrings #-}\nimport qualified Data.Text.IO        as T\nimport           Network.HTTP.Simple
  (httpSink)\nimport           Text.HTML.DOM       (sinkDoc)\nimport           Text.XML.Cursor
  \    (attributeIs, content, element,\n                                      fromDocument,
  ($//), (&/), (&//))\n\nmain :: IO ()\nmain = do\n    doc <- httpSink \"http://www.yesodweb.com/book\"
  $ const sinkDoc\n    let cursor = fromDocument doc\n    T.putStrLn \"Chapters in
  the Yesod book:\\n\"\n    mapM_ T.putStrLn\n      $ cursor\n      $// attributeIs
  \"class\" \"main-listing\"\n      &// element \"li\"\n      &/ element \"a\"\n      &/
  content\n```\n"
license-name: MIT
