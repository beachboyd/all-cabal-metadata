homepage: https://github.com/snoyberg/xml
changelog-type: markdown
hash: fff57b4befad09ef398ecf9af47c9d1e534ea4c21f604b519f05dba1ee071e5f
test-bench-deps:
  bytestring: -any
  xml-conduit: -any
  base: -any
  hspec: ! '>=1.3'
  text: -any
  html-conduit: -any
  HUnit: -any
  containers: -any
  deepseq: -any
maintainer: michael@snoyman.com
synopsis: Parse HTML documents using xml-conduit datatypes.
changelog: ! "## 1.3.1\n\n* Inline tagstream-conduit for entity decoding in attribute
  value bug\n  fix.\n\n## 1.3.0\n\n* Upgrade to conduit 1.3\n\n## 1.2.1.2\n\n* Remove
  an upper bound\n* Doc improvement\n\n## 1.2.1.1\n\n* Allow xml-conduit 1.4\n\n##
  1.2.1\n\n* Add strict and lazy text parsing [#66](https://github.com/snoyberg/xml/pull/66)\n\n##
  1.2.0\n\n* Drop system-filepath\n\n## 1.1.1.2\n\n* Fix a bug with double-unescaping
  of entities\n"
basic-deps:
  bytestring: -any
  xml-conduit: ! '>=1.3'
  base: ! '>=4 && <5'
  text: -any
  conduit: ! '>=1.3'
  conduit-extra: -any
  containers: -any
  xml-types: ! '>=0.3 && <0.4'
  attoparsec: -any
  transformers: -any
  resourcet: ! '>=1.2'
all-versions:
- '0.0.0'
- '0.0.1'
- '0.1.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.1.0.4'
- '1.1.0.5'
- '1.1.0.6'
- '1.1.1'
- '1.1.1.1'
- '1.1.1.2'
- '1.2.0'
- '1.2.1'
- '1.2.1.1'
- '1.2.1.2'
- '1.3.0'
- '1.3.1'
author: Michael Snoyman
latest: '1.3.1'
description-type: markdown
description: ! "This package uses tagstream-conduit for its parser. It automatically
  balances\nmismatched tags, so that there shouldn't be any parse failures. It does
  not\nhandle a full HTML document rendering, such as adding missing html and head\ntags.
  Note that, since version 1.3.1, it uses an inlined copy of\ntagstream-conduit with
  entity decoding bugfixes applied.\n\nSimple usage example:\n\n```haskell\n#!/usr/bin/env
  stack\n{- stack --install-ghc --resolver lts-6.23 runghc\n   --package http-conduit
  --package html-conduit\n-}\n{-# LANGUAGE OverloadedStrings #-}\nimport qualified
  Data.Text.IO        as T\nimport           Network.HTTP.Simple (httpSink)\nimport
  \          Text.HTML.DOM       (sinkDoc)\nimport           Text.XML.Cursor     (attributeIs,
  content, element,\n                                      fromDocument, ($//), (&/),
  (&//))\n\nmain :: IO ()\nmain = do\n    doc <- httpSink \"http://www.yesodweb.com/book\"
  $ const sinkDoc\n    let cursor = fromDocument doc\n    T.putStrLn \"Chapters in
  the Yesod book:\\n\"\n    mapM_ T.putStrLn\n      $ cursor\n      $// attributeIs
  \"class\" \"main-listing\"\n      &// element \"li\"\n      &/ element \"a\"\n      &/
  content\n```\n"
license-name: MIT
