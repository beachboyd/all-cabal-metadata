homepage: https://github.com/lucasdicioccio/http2-client-grpc#readme
changelog-type: markdown
hash: 732405144cf2f0e1dddfa55297b92b08657020ab2210a8dbe73e0749137c16af
test-bench-deps:
  base: -any
  http2-client-grpc: -any
maintainer: lucas@dicioccio.fr
synopsis: Implement gRPC-over-HTTP2 clients.
changelog: |
  # Changelog for http2-client-grpc

  ## Unreleased changes

  ## 0.5.0.4

  Use proto-lens-0.4.0.0, this change is package-list incompatible but requires no code change.

  ## 0.5.0.3

  Add helpers for new bidirectional and general streams.

  ## 0.5.0.2

  Add bidirectional and general streams.
basic-deps:
  bytestring: ! '>=0.10.8 && <0.10.9'
  http2-grpc-types: ! '>=0.4 && <0.5'
  case-insensitive: ! '>=1.2.0 && <1.3'
  http2: ! '>=1.6 && <1.7'
  base: ! '>=4.11 && <5'
  data-default-class: ! '>=0.1 && <0.2'
  text: ! '>=1.2 && <1.3'
  tls: ! '>=1.4 && <1.5'
  http2-client: ! '>=0.8 && <0.9'
  async: ! '>=2.2 && <2.3'
  lens: ! '>=4.16 && <4.18'
  proto-lens: ! '>=0.5 && <0.6'
  binary: ! '>=0.8 && <0.9'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.6.0.0
author: Lucas DiCioccio
latest: 0.6.0.0
description-type: markdown
description: |
  # http2-client-grpc

  A native HTTP2 gRPC client library using `proto-lens` and `http2-client`.

  ## Summary

  This project provides a library that leverages the code generated using
  proto-lens (in particular, proto-lens-protoc) to implement the client-side of
  gRPC services.

  ## Usage

  ### Prerequisites

  In addition to a working Haskell dev environment, you need to:
  - build the `proto-lens-protoc` executable (`proto-lens`)
  - install the `protoc` executable

  ### Adding .proto files to a Haskell package

  In order to run gRPC:

  - generate the `Proto` stubs in some `gen` directory

  A single `protoc` invocation may be enough for both Proto and GRPC outputs:

  ```bash
  protoc  "--plugin=protoc-gen-haskell-protolens=${protolens}" \
      --haskell-protolens_out=./gen \
      -I "${protodir1} \
      -I "${protodir2} \
      ${first.proto} \
      ${second.proto}
  ```

  - add the `gen` sourcedir for the generated to your .cabal/package.yaml file (cf. 'hs-source-dirs').
  - add the generated Proto modules to the 'exposed-modules' (or 'other-modules') keys

  A reliable way to list the module names is the following bash invocation:

  ```bash
  find gen -name "*.hs" | sed -e 's/gen\///' | sed -e 's/\.hs$//' | tr '/' '.'
  ```

  Unlike `proto-lens`, this project does not yet provide a modified `Setup.hs`.
  As a result, we cannot automate these steps from within Cabal/Stack. Hence,
  you'll have to automate these steps outside your Haskell toolchain.

  ## Calling a GRPC service

  In short, use `http2-client` with the `Network.GRPC.call` function and let the types guide you.

  ### Example

  You'll find an example leveraging the awesome `grpcb.in` service at https://github.com/lucasdicioccio/http2-client-grpc-example .

  ### gRPC service mapping

  The Protobuf format specifies the notion of Service which can have one or more
  RPCs.  The gRPC protocal maps these services onto HTTP2 headers and HTTP2
  frames.  In general, gRPC implementation generate one inlined function per RPC.
  This implementation differs by decoupling the HTTP2 transport and leveraging
  generics to provide generic functions. This design allows the
  `Network.GRPC.call` to be type safe and multi-usage. For instance, you can wrap
  this function with whatever metrics/benchmark code and have all your RPC calls
  be monitored in a uniform way.

  ## Status

  This library is currently an early-stage library. Expect breaking changes.

  ## Next steps

  - provide function to map raw results into commonly-understood GRPC errors
  - (nice-to-have) support effectful compression (Zlib pure compression is supported)
license-name: BSD-3-Clause
