homepage: https://github.com/lucasdicioccio/http2-client-grpc#readme
changelog-type: ''
hash: 6ce279a2720dcda11f4f8e0bd5db3fdf1eaa251506ec87282f5b54d2a6393174
test-bench-deps:
  base: -any
  http2-client-grpc: -any
maintainer: lucas@dicioccio.fr
synopsis: Implement gRPC-over-HTTP2 clients.
changelog: ''
basic-deps:
  bytestring: -any
  http2-grpc-types: ! '>=0.2'
  http2: -any
  base: ! '>=4.7 && <5'
  data-default-class: -any
  text: -any
  http2-client: -any
  proto-lens: -any
  binary: -any
  proto-lens-protoc: -any
  zlib: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
author: Lucas DiCioccio
latest: '0.3.0.0'
description-type: markdown
description: ! "# http2-client-grpc\n\nA native HTTP2 gRPC client library using `proto-lens`
  and `http2-client`.\n\n## Summary\n\nThis project provides a library that leverages
  the code generated using\nproto-lens (in particular, proto-lens-protoc) to implement
  the client-side of\ngRPC services.\n\n## Usage\n\n### Prerequisites\n\nIn addition
  to a working Haskell dev environment, you need to:\n- build the `proto-lens-protoc`
  executable (`proto-lens`)\n- install the `protoc` executable\n\n### Adding .proto
  files to a Haskell package\n\nIn order to run gRPC:\n\n- generate the `Proto` stubs
  in some `gen` directory\n\nA single `protoc` invocation may be enough for both Proto
  and GRPC outputs:\n\n```bash\nprotoc  \"--plugin=protoc-gen-haskell-protolens=${protolens}\"
  \\\n    --haskell-protolens_out=./gen \\\n    -I \"${protodir1} \\\n    -I \"${protodir2}
  \\\n    ${first.proto} \\\n    ${second.proto}\n```\n\n- add the `gen` sourcedir
  for the generated to your .cabal/package.yaml file (cf. 'hs-source-dirs').\n- add
  the generated Proto modules to the 'exposed-modules' (or 'other-modules') keys\n\nA
  reliable way to list the module names is the following bash invocation:\n\n```bash\nfind
  gen -name \"*.hs\" | sed -e 's/gen\\///' | sed -e 's/\\.hs$//' | tr '/' '.'\n```\n\nUnlike
  `proto-lens`, this project does not yet provide a modified `Setup.hs`.\nAs a result,
  we cannot automate these steps from within Cabal/Stack. Hence,\nyou'll have to automate
  these steps outside your Haskell toolchain.\n\n## Calling a GRPC service\n\nIn short,
  use `http2-client` with the `Network.GRPC.call` function and let the types guide
  you.\n\n### Example\n\nYou'll find an example leveraging the awesome `grpcb.in`
  service at https://github.com/lucasdicioccio/http2-client-grpc-example .\n\n###
  gRPC service mapping\n\nThe Protobuf format specifies the notion of Service which
  can have one or more\nRPCs.  The gRPC protocal maps these services onto HTTP2 headers
  and HTTP2\nframes.  In general, gRPC implementation generate one inlined function
  per RPC.\nThis implementation differs by decoupling the HTTP2 transport and leveraging\ngenerics
  to provide generic functions. This design allows the\n`Network.GRPC.call` to be
  type safe and multi-usage. For instance, you can wrap\nthis function with whatever
  metrics/benchmark code and have all your RPC calls\nbe monitored in a uniform way.\n\n##
  Status\n\nThis library is currently an early-stage library. Expect breaking changes.\n\n##
  TODOs\n\n- pass timeout as argument\n- support effectful compression (Zlib pure
  compression is supported)\n- provide function to map raw results into commonly-understood
  GRPC errors\n"
license-name: BSD3
