homepage: https://github.com/vmchale/htoml-megaparsec
changelog-type: markdown
hash: 3e560a915e416788a51e0ffc46ff73a808289d0a6b7dfa7a4422fcb2efef989b
test-bench-deps:
  htoml-megaparsec: -any
  bytestring: -any
  base: -any
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  megaparsec: -any
  tasty-hspec: -any
  criterion: -any
  containers: -any
  tasty-hunit: -any
  file-embed: -any
  tasty: -any
  aeson: -any
  vector: -any
maintainer: Vanessa McHale <vanessa.mchale@reconfigure.io>
synopsis: Parser for TOML files
changelog: ! "Change log\n==========\n\n#### dev\n* ...\n\n### 1.0.0.3\n\nSwitched
  to megaparsec, resulting in double the speed of the old parser.\n\n### 1.0.0.1\n*
  Improve docs\n\n### 1.0.0.0\n* Use `Vector` over `List` internally, as per discussion
  in [issue 13](https://github.com/cies/htoml/issues/13)\n\n### 0.2.0.1\n* Expose
  `ToJSON` implementation\n* Remove unused .cabal dependency (thanks @tmcgilchrist)\n\n####
  0.2.0.0\n* Compatible with TOML 0.4.0\n* Improve test suite (all test now pass --
  thanks @HuwCampbell)\n* Slight API breakage (therefore major version bump)\n* Use
  Parsec's parser state to track explicitness of table definitions (thanks @HuwCampbell)\n*
  Clean up docs and code\n\n#### 0.1.0.3\n* GHC 7.10 compatibility fix (thanks @erebe)\n*
  Allow time >= 1.5.0, by using some CPP trickery\n* Improve README based on\n  [feedback
  on Reddit](http://www.reddit.com/r/haskell/comments/2s376c/show_rhaskell_htoml_a_parser_for_toml_files)\n\n####
  0.1.0.2\n* Update the REAMDE\n* Add/relax dependency version contraints where applicable\n*
  Fix all warnings\n* Add `CHANGES.md`\n\n#### 0.1.0.1\n* Fix `cabal configure` error
  in cabal file\n\n#### 0.1.0.0\n* Initial upload to Hackage\n"
basic-deps:
  composition-prelude: ! '>=0.1.1.0'
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: ! '>=0.2'
  text: ! '>=1.0 && <2'
  megaparsec: ! '>=6.0.0'
  containers: ! '>=0.5'
  old-locale: -any
  mtl: ! '>=2.2'
  deepseq: -any
  vector: ! '>=0.10'
all-versions:
- '1.0.0.4'
- '1.0.1.0'
- '1.0.1.1'
- '1.0.1.2'
- '1.0.1.3'
- '1.0.1.4'
- '1.0.1.5'
- '1.0.1.6'
- '1.0.1.7'
author: Cies Breijs, Vanessa McHale
latest: '1.0.1.7'
description-type: markdown
description: ! "htoml\n=====\n\n[![Build Status](https://travis-ci.org/cies/htoml.svg?branch=master)](https://travis-ci.org/cies/htoml)\n[![Latest
  version on Hackage](https://img.shields.io/hackage/v/htoml.svg)](https://hackage.haskell.org/package/htoml)\n[![Dependencies
  of latest version on Hackage](https://img.shields.io/hackage-deps/v/htoml.svg)](https://hackage.haskell.org/package/htoml)\n\n[![htoml
  on Stackage LTS 5](http://stackage.org/package/htoml/badge/lts-5)](http://stackage.org/lts-5/package/htoml)\n[![htoml
  on Stackage LTS 6](http://stackage.org/package/htoml/badge/lts-6)](http://stackage.org/lts-6/package/htoml)\n[![htoml
  on Stackage Nightly](http://stackage.org/package/htoml/badge/nightly)](http://stackage.org/nightly/package/htoml)\n\n\nA
  [TOML](https://github.com/mojombo/toml) parser library in\n[Haskell](http://haskell-lang.org).\n\nTOML
  is the obvious, minimal configuration language by\n[Tom Preston-Werner](https://github.com/mojombo).\nIt
  is an alternative to the [XML](http://www.w3.org/TR/REC-xml/),\n[YAML](http://www.yaml.org/spec/1.2/spec.html)
  and\n[INI](http://en.wikipedia.org/wiki/INI_file) formats mainly for the purpose
  of\nconfiguration files. Many will find that XML and YAML are too heavy for\nthe
  purpose of configuration files prupose while INI is underspecified.\nTOML is to
  configuration files, like what Markdown is for rich-text.\n\nThis library aims to
  be compatible with the latest version of the\n[TOML spec](https://github.com/mojombo/toml).\nCompatibility
  between `htoml` version and TOML (as proven by\n[BurntSushi's language agnostic
  TOML test suite](https://github.com/BurntSushi/toml-test))\nis as follows:\n\n*
  [TOML v0.4.0](https://github.com/toml-lang/toml/releases/tag/v0.4.0)\nis implemented
  by  `htoml >= 1.0.0.0`\n* *(currently only one item in this mapping, more will follow)*\n\n\n###
  Documentation\n\nApart from this README, documentation for this package may\n(or
  may not) be found on [Hackage](https://hackage.haskell.org/package/htoml).\n\n\n###
  Quick start\n\nInstalling `htoml` is easy. Either by using\n[Stack](http://haskellstack.org)
  (recommended):\n\n    stack install htoml\n\nOr by using Cabal:\n\n    cabal install
  htoml\n\nIn order to make your project depend on it you can add it as a\ndependency
  in your project's `.cabal` file, and since it is not\nyet on [Stackage](https://www.stackage.org/)
  you will also have\nto add it to the `extra-deps` section of your `stack.yaml` file\nwhen
  using Stack.\n\nTo quickly show some features of `htoml` we use Stack to start a\nGHCi-based
  REPL. It picks up configuration from the `.ghci` file\nin the root of the repository.\n\n
  \   git clone https://github.com/cies/htoml.git\n    cd htoml\n    stack init\n
  \   stack --install-ghc ghci\n\nAdd a `--resolver` flag to the `stack init` command
  to specify\na specific package snapshot, e.g.: `--resolver lts-4.1`.\n\nIn case
  you have missing dependencies (possibly `file-embed`),\nthey can be added to the
  `extra-deps` in `stack.yaml`\nautomatically with:\n\n    stack solver --update-config\n\nWe
  can now start exploring `htoml` from a GHCi REPL. From the\nroot of this repository
  run:\n\n    stack ghci\n\nNow read a `.toml` file from the benchmark suite, with:\n\n```haskell\ntxt
  <- readFile \"benchmarks/example.toml\"\nlet r = parseTomlDoc \"\" txt\nr\n```\n\n...which
  prints:\n\n    Right (fromList [(\"database\",VTable (fromList [(\"enabled\",VBoolean
  True),(\"po [...]\n\nThen convert it to [Aeson](https://hackage.haskell.org/package/aeson)
  (JSON), with:\n\n```haskell\nlet Right toml = r\ntoJSON toml\n```\n\n...which prints:\n\n
  \   Object (fromList [(\"database\",Object (fromList [(\"enabled\",Bool True),(\"po
  [...]\n\nFinally trigger a parse error, with:\n\n```haskell\nlet Left err = parseTomlDoc
  \"\" \"== invalid toml ==\"\nerr\n```\n\n...it errors out (as it should), showing:\n\n
  \   (line 1, column 1):\n    unexpected '='\n    expecting \"#\", \"\\n\", \"\\r\\n\",
  letter or digit, \"_\", \"-\", \"\\\"\", \"'\", \"[\" or end of input\n\n**Note:**
  Some of the above outputs are truncated, indicated by `[...]`.\n\n\n### How to pull
  data from a TOML file after parsing it\n\nOnce you have sucessfully parsed a TOML
  file you most likely want to pull\nsome piecces of data out of the resulting data
  structure.\n\nTo do so you have two main options. The first is to use pattern matching.\nFor
  example let's consider the following `parseResult`:\n\n```haskell\nRight (fromList
  [(\"server\",VTable (fromList [(\"enabled\",VBoolean True)] ) )] )\n```\n\nWhich
  could be pattern matched with:\n\n```haskell\ncase parseResult of\n  Left  _ ->
  \"Could not parse file\"\n  Right m -> case m ! \"server\" of\n    VTable mm ->
  case mm ! \"enabled\" of\n      VBoolean b -> \"Server is \" ++ (if b then \"enabled\"
  else \"disabled\")\n      _ -> \"Could not parse server status (Boolean)\"\n    _
  -> \"TOML file does not contain the 'server' key\"\n```\n\nThe second main option
  is to use the `toJSON` function to transform the data\nto an [Aeson](https://hackage.haskell.org/package/aeson)
  data structure,\nafter which you can use your Aeson toolbelt to tackle the problem.
  Since\nTOML is intended to be a close cousin of JSON this is a very practical\napproach.\n\nOther
  ways to pull data from a parsed TOML document will most likely\nexist; possible
  using the `lens` library as\n[documented here](https://github.com/cies/htoml/issues/8).\n\n\n###
  Compatibility\n\nCurrently we are testing against several versions of GHC with\n[Travis
  CI](https://travis-ci.org/cies/htoml) as defined in the `env` section of our\n[`.travis.yml`](https://github.com/cies/htoml/blob/master/.travis.yml).\n`lts-2`
  implies GHC 7.8.4, `lts-3` implies GHC 7.10.2, `lts-4`/`lts-5`\nimply GHC 7.10.3,
  and `nightly` is build with a regularly updated version of GHC.\n\n\n### Version
  contraints of `htoml`'s dependencies\n\nIf you encounter any problems because `htoml`'s
  dependecies are\nconstrained either too much or too little, please\n[file a issue](https://github.com/cies/htoml/issues)
  for that.\nOr off even better submit a PR.\n\n\n### Tests and benchmarks\n\nTests
  are build and run with:\n\n    stack test\n\n[BurntSushi's language agnostic test
  suite](https://github.com/BurntSushi/toml-test)\nis embedded in the test suite executable.
  \ Using a shell script (that\nlives in `test/BurntSushi`) the latest tests can be
  fetched from\nits Github repository.\n\nThe benchmarks, that use the amazing [`criterion`](http://www.serpentine.com/criterion)\nlibrary,
  are build and run with:\n\n    stack build :benchmarks\n\n\n### Contributions\n\nMost
  welcome! Please raise issues, start discussions, give comments or\nsubmit pull-requests.\nThis
  is one of the first Haskell libraries I wrote, feedback is\nmuch appreciated.\n\n\n###
  Features\n\n* Compatibility to the TOML spec is proven by an extensive test suite\n*
  Incorporates [BurntSushi's language agnostic test suite](https://github.com/BurntSushi/toml-test)\n*
  Has an internal representation that easily maps to JSON\n* Provides an [Aeson](https://hackage.haskell.org/package/aeson)-style
  JSON interface (suggested by Greg Weber)\n* Useful error messages (thanks to using
  Parsec over Attoparsec)\n* Understands arrays as described in [this issue](https://github.com/toml-lang/toml/issues/254)\n*
  Fails on mix-type arrays (as per spec)\n* Comes with a benchmark suite to make performance
  gains/regressions measurable\n* Tries to be well documented (please raise an issue
  if you find documentation lacking)\n* Available on [Stackage](http://stackage.org)
  (see top of this README for badges\n  indicating TOMLs *inclusion in Stackage status*)\n\n\n###
  Todo\n\n* More documentation and start to use the proper Haddock idioms\n* Add property
  tests with QuickCheck (the internet says it's possible for parsers)\n* Extensively
  test error cases (probably improving error reporting along the way)\n* See how lenses
  may (or may not) fit into this package, or an additional package\n* Consider moving
  to [one of the more modern parser combinators](https://www.reddit.com/r/haskell/comments/46u45o/what_is_the_current_state_of_parser_libraries_in)\n
  \ in Haskell (`megaparsec` maybe?) -- possibly wait until a clear winner shows\n\nDo
  you see todo that looks like fun thing to implement and you can spare the time?\nPlease
  knoe that PRs are welcome :)\n\n\n### Acknowledgements\n\nOriginally this project
  started off by improving the `toml` package by\nSpiros Eliopoulos.\n\n[HuwCampbell](https://github.com/HuwCampbell)
  helped a lot by making tests\npass and implementing \"explicitness tracking\" in
  Parsec's parser state.\n\n\n### Copyright and licensing\n\nThis package includes
  BurntSushi's language agnostic\n[TOML tests](https://github.com/BurntSushi/toml-test),
  which are WTFPL\nlicensed.\n\nThe TOML examples that are used as part of the benchmarks
  are copied\nfrom Tom Preston-Werner's TOML spec which is MIT licensed.\n\nFor all
  other files in this project the copyrights are specified in the\n`htoml.cabal` file,
  they are distributed under the BSD3 license as found\nin the `LICENSE` file.\n"
license-name: BSD3
