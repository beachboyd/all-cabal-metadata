homepage: https://github.com/zmthy/http-media
changelog-type: markdown
hash: 7dbecedbc049ac8863f8cd18755eba5fdf4a165d324195ae918b97e8b8f17198
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  test-framework: ! '>=0.8 && <0.9'
  case-insensitive: ! '>=1.0 && <1.3'
  base: ! '>=4.7 && <4.13'
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  containers: ! '>=0.5 && <0.7'
  utf8-string: ! '>=0.3 && <1.1'
  QuickCheck: ! '>=2.6 && <2.13'
maintainer: Timothy Jones <tim@zmthy.net>
synopsis: Processing HTTP Content-Type and Accept headers
changelog: ! "Changelog\n=========\n\n- [Version 0.7.1.3](https://github.com/zmthy/http-media/releases/tag/v0.7.1.3)\n\n
  \ Package bounds have been updated for GHC 8.6.\n\n- [Version 0.7.1.2](https://github.com/zmthy/http-media/releases/tag/v0.7.1.2)\n\n
  \ The bounds for QuickCheck have been updated to include the latest\n  version.\n\n-
  [Version 0.7.1.1](https://github.com/zmthy/http-media/releases/tag/v0.7.1.1)\n\n
  \ The bounds for base have been updated to include support for GHC 8.2.\n\n- [Version
  0.7.1](https://github.com/zmthy/http-media/releases/tag/v0.7.1)\n\n  Travis now
  tests against a range of Stackage LTS environments, instead\n  of using multi-ghc.\n\n
  \ Support for base-4.6 has now been correctly removed in the Cabal file.\n\n- [Version
  0.7.0](https://github.com/zmthy/http-media/releases/tag/v0.7.0)\n\n  The Travis
  configuration has dropped support for GHC 7.6 and added\n  support for 8.0.\n\n
  \ More direct constructors for quality values are now available, to\n  avoid having
  to deal with `Maybe` results when you are certain parsing\n  a quality string will
  not fail.\n\n  The bounds for QuickCheck have been updated to include the latest\n
  \ version.\n\n- [Version 0.6.4](https://github.com/zmthy/http-media/releases/tag/v0.6.4)\n\n
  \ The bounds for QuickCheck have been updated to include the latest\n  version.\n\n-
  [Version 0.6.3](https://github.com/zmthy/http-media/releases/tag/v0.6.3)\n\n  Parse
  failures more regularly return a `Maybe` value instead of\n  raising an exception.\n\n
  \ The `(//)` smart constructor now accepts wildcard arguments, but only\n  in the
  correct order.\n\n  Most tests will now emit a counter example if their relevant\n
  \ properties are violated.  Some tests which were not correctly covering\n  their
  properties have been fixed.\n\n  The `-Werror` flag has been removed from the test
  suite.\n\n- [Version 0.6.2](https://github.com/zmthy/http-media/releases/tag/v0.6.2)\n\n
  \ The test suite now uses the test-framework library instead of\n  cabal-test-quickcheck,
  and the package no longer depends on Cabal.\n\n- [Version 0.6.1](https://github.com/zmthy/http-media/releases/tag/v0.6.1)\n\n
  \ The type errors and build warnings caused by the BBP have been fixed\n  for GHC
  7.10.\n\n- [Version 0.6.0](https://github.com/zmthy/http-media/releases/tag/v0.6.0)\n\n
  \ All of the publicly exposed data types now derive an `Ord` instance.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  case-insensitive: ! '>=1.0 && <1.3'
  base: ! '>=4.7 && <4.13'
  containers: ! '>=0.5 && <0.7'
  utf8-string: ! '>=0.3 && <1.1'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.7.0
- 0.7.1
- 0.7.1.1
- 0.7.1.2
- 0.7.1.3
author: Timothy Jones
latest: 0.7.1.3
description-type: haddock
description: ! 'This library is intended to be a comprehensive solution to parsing
  and

  selecting quality-indexed values in HTTP headers.  It is capable of

  parsing both media types and language parameters from the Accept and

  Content header families, and can be extended to match against other

  accept headers as well.  Selecting the appropriate header value is

  achieved by comparing a list of server options against the

  quality-indexed values supplied by the client.


  In the following example, the Accept header is parsed and then matched

  against a list of server options to serve the appropriate media using

  ''mapAcceptMedia'':


  > getHeader >>= maybe send406Error sendResourceWith . mapAcceptMedia

  >     [ ("text/html",        asHtml)

  >     , ("application/json", asJson)

  >     ]


  Similarly, the Content-Type header can be used to produce a parser for

  request bodies based on the given content type with ''mapContentMedia'':


  > getContentType >>= maybe send415Error readRequestBodyWith . mapContentMedia

  >     [ ("application/json", parseJson)

  >     , ("text/plain",       parseText)

  >     ]


  The API is agnostic to your choice of server.'
license-name: MIT
