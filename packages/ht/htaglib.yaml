homepage: https://github.com/mrkkrp/htaglib
changelog-type: markdown
hash: d9765512fa58e8e2af54ecd5fc11278a559c10dc6e0864b3fc6502ab3089f6c6
test-bench-deps:
  htaglib: -any
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  filepath: ! '>=1.4 && <2.0'
  directory: ! '>=1.2 && <1.4'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Bindings to TagLib, audio meta-data library
changelog: ! "## HTagLib 1.2.0\n\n* Compiles with GHC 8.4.1.\n\n* Added `Semigroup`
  instance for `TagSetter`.\n\n* All definitions are re-exported in the `Sound.HTagLib`
  module, so other\n  modules have been hidden.\n\n## HTagLib 1.1.1\n\n* Improved/updated
  documentation and metadata.\n\n## HTagLib 1.1.0\n\n* Made `getTags`, `getTags'`,
  `setTags`, and `setTags'` callable from any\n  instance of `MonadIO`, not only `IO`.\n\n##
  HTagLib 1.0.4\n\n* Re-wrote the test suite with Hspec.\n\n* Drop support for GHC
  7.6.\n\n## HTagLib 1.0.3\n\n* Export functions instead of record selectors for tag
  newtype wrappers.\n  This is to prevent changes (using record syntax) to values
  created with\n  smart constructors.\n\n## HTagLib 1.0.2\n\n* Modify test suite so
  it passes with newer versions of TagLib as well.\n\n## HTagLib 1.0.1\n\n* Rewritten
  setters (without changing the API), so at most one writing\n  operation is performed
  for every settable value. When combining setters\n  that happen to set the same
  tags to different values, value on the left\n  side of `mappend` wins.\n\n## HTagLib
  1.0.0\n\n* Make the module `Sound.HTagLib.Internal` hidden for end users.\n\n* Make
  `Text` underlying type for wrappers around textual data (breaking\n  change, previously
  it was `String`).\n\n* Rename functions like `getTitle` to `unTitle` (breaking change).\n\n*
  Fix bug when wrong data is read from files when current locale specifies\n  encoding
  other than UTF-8.\n\n## HTagLib 0.1.1\n\n* Missing audio samples used for testing
  are included in distribution.\n\n## HTagLib 0.1.0\n\n* Initial release.\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.7 && <5.0'
  text: ! '>=1.0 && <1.3'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '0.1.0'
- '0.1.1'
- '1.0.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.1.0'
- '1.1.1'
- '1.2.0'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '1.2.0'
description-type: markdown
description: ! "# HTagLib\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/htaglib.svg?style=flat)](https://hackage.haskell.org/package/htaglib)\n[![Stackage
  Nightly](http://stackage.org/package/htaglib/badge/nightly)](http://stackage.org/nightly/package/htaglib)\n[![Stackage
  LTS](http://stackage.org/package/htaglib/badge/lts)](http://stackage.org/lts/package/htaglib)\n[![Build
  Status](https://travis-ci.org/mrkkrp/htaglib.svg?branch=master)](https://travis-ci.org/mrkkrp/htaglib)\n\n*
  [Alternatives](#alternatives)\n* [A note for FLAC users](#a-note-for-flac-users)\n*
  [Quick start](#quick-start)\n    * [Reading meta data](#reading-meta-data)\n    *
  [Writing meta data](#writing-meta-data)\n    * [Conclusion](#conclusion)\n* [License](#license)\n\nThis
  is Haskell bindings to [TagLib](https://taglib.github.io/), library for\nreading
  and editing meta-data of several popular audio formats.\n\nIt works with the following
  formats:\n\n* MP3\n* FLAC\n* MPC\n* Speex\n* WavPack TrueAudio\n* WAV\n* AIFF\n*
  MP4\n* ASF\n\nThis happens in an abstract, uniform way, so you don't need to handle
  any\nlow-level details. As a consequence, it's currently not possible to work\nwith
  format-specific functionality.\n\n## Alternatives\n\nThere is at least two Haskell
  bindings doing “the same” thing:\n\n* [`libtagc`](https://hackage.haskell.org/package/libtagc)\n*
  [`taglib`](https://hackage.haskell.org/package/taglib)\n\nBoth are very low level,
  without any protection or higher-level\nabstractions, not really type-safe. I personally
  don't want to use them, so\nI wrote this.\n\n## A note for FLAC users\n\nIf you
  want to work with FLAC, there is\na [complete Haskell binding](https://github.com/mrkkrp/flac)
  to\n`libFLAC`—reference FLAC implementation. It allows to work with all FLAC\nmetadata
  (read and write) and also provides Haskell API to stream encoder\nand stream decoder.
  Please prefer that package if you don't need to work\nwith other audio formats.\n\n##
  Quick start\n\nFirst, since this is bindings to C-interface of the library, you'll
  need to\ninstall the library itself. If you're on a Unix-like system, chances are\nyou'll
  have it in the official repositories of your distro.\n\nAfter installation of the
  library, install `htaglib` package using Cabal or\nStack (recommended):\n\n```\n$
  stack install htaglib\n```\n\n### Reading meta data\n\nNow to the hacking. It's
  recommended that you define a record representing\nmeta-data of audio track in your
  program, like this:\n\n```haskell\nmodule Main (main) where\n\nimport Data.Monoid\nimport
  Sound.HTagLib\nimport System.Environment (getArgs)\n\ndata AudioTrack = AudioTrack\n
  \ { atTitle   :: Title\n  , atArtist  :: Artist\n  , atAlbum   :: Album\n  , atComment
  :: Comment\n  , atGenre   :: Genre\n  , atYear    :: Maybe Year\n  , atTrack   ::
  Maybe TrackNumber }\n  deriving Show\n```\n\nA couple of notes here. We use unique
  types for every component of meta\ndata, so it's more difficult to use track title
  in lieu of track artist, for\nexample. Meta data that is represented by strings
  also has smart\nconstructors, they replace zero bytes with spaces, this is necessary
  to\navoid troubles when your Haskell strings go to the C-level (well, zero-bytes\nin
  strings is rather edge case, but it should be mentioned). Of course,\n`Title`, `Artist`,
  `Album`, `Comment`, and `Genre` all are instances of\n`IsString`, so just turn on
  `OverloadedStrings` and you can use normal\nstring literals to create data of these
  types.\n\n`Year` and `TrackNumber` may be not set or missing, in this case you get\n`Nothing`.
  This is possible with string-based fields too, but in that case\nyou just get empty
  strings. `Year` and `TrackNumber` have smart constructors\nthat make sure that the
  values are positive (i.e. zero is not allowed).\n\nOK, it's time to read some info.
  There is `TagGetter` type which is an\napplicative functor. You first construct
  `TagGetter` which will retrieve\nentire `AudioTrack` for you using applicative style:\n\n```haskell\naudioTrackGetter
  :: TagGetter AudioTrack\naudioTrackGetter = AudioTrack\n  <$> titleGetter\n  <*>
  artistGetter\n  <*> albumGetter\n  <*> commentGetter\n  <*> genreGetter\n  <*> yearGetter\n
  \ <*> trackNumberGetter\n```\n\nPerfect, now use `getTags` to read entire record:\n\n```haskell\nmain
  :: IO ()\nmain = do\n  path  <- head <$> getArgs\n  track <- getTags path audioTrackGetter\n
  \ print track\n```\n\nFor example (alignment is added):\n\n```\n$ ./example \"/home/mark/music/David
  Bowie/1977, Low/01 Speed of Life.flac\"\nAudioTrack\n  { atTitle   = Title   \"Speed
  of Life\"\n  , atArtist  = Artist  \"David Bowie\"\n  , atAlbum   = Album   \"Low\"\n
  \ , atComment = Comment \"\"\n  , atGenre   = Genre   \"\"\n  , atYear    = Just
  \   (Year 1977)\n  , atTrack   = Just    (TrackNumber 1)\n  }\n```\n\nSuccess! It's
  also possible to extract audio properties like sample rate,\netc. but it's not shown
  here for simplicity, consult Haddocks for more\ninformation.\n\nN.B. If you need
  to extract duration of tracks, TagLib only returns number\nof seconds as an integer.
  This means that if you want to calculate total\nduration, you'll have slightly incorrect
  result. Proper solution is to\nextract duration as floating-point number, for that
  we recommend bindings to\n`libsndfile`—[`hsndfile`](https://hackage.haskell.org/package/hsndfile)
  (or\nthe above-mentioned `flac` package for Haskell if you work with FLAC).\n\n###
  Writing meta data\n\nWe cannot use applicative interface to set tags. There are
  several reasons:\n\n* Applicative interface in general is better for extracting
  or parsing (or\n  rather assembling complex parsers from more basic ones).\n\n*
  Some fields like sample rate or length can only be read, not set.\n\n* We may wish
  to set one or two fields selectively, not everything.\n\nSolution: use monoids.
  `TagSetter` is an instance of `Monoid`. This means\nthat we can set title and artist
  of audio track like this:\n\n```haskell\nmain :: IO ()\nmain = do\n  (path : title
  : artist : _) <- getArgs\n  setTags path Nothing $\n    titleSetter (mkTitle title)
  <>\n    artistSetter (mkArtist artist)\n  track <- getTags path audioTrackGetter\n
  \ print track\n```\n\nThis code loads file and changes “title” and “artist” meta
  data fields.\n\n## Conclusion\n\nWith the interface provided by `getTags` and `setTags`
  it's not possible to\nforget to close file or free some resource. You can read all
  meta data at\nonce directly into your data structure in type-safe manner. Writing
  meta\ndata should be trivial too. Have fun!\n\n## License\n\nCopyright © 2015–2018
  Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
