homepage: https://github.com/gdevanla/pptable#readme
changelog-type: markdown
hash: ebb59dab8a078784d5e0c0c0b07cc22ef687a55eb7f03fb875eb33cfdfce3a30
test-bench-deps:
  base: -any
  markdown-unlit: -any
  HUnit: -any
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  boxes: -any
  QuickCheck: -any
  pptable: -any
  vector: -any
maintainer: grdvnl@gmail.com
synopsis: Pretty Print containers in a tabular format
changelog: ! '0.2.0.0

  -------


  * This release contains *breaking* changes

  * Name of Tabilize class changed to Tabulate

  * printList, printMap and printVector all replaced with polymorphic method ppTable

  * New class Boxable with default instances for List, Vector and Map

  * Use prinf library to print basic types

  * New class CellValueFormatter with default instances for basic type

  * Boxable instance to extend to other Traversable instances

  * CellValueFormatter class to extend formatting


  0.1.0.1

  -------


  * Intial version

  * Can print List, Map or Vector in tabular format

'
basic-deps:
  base: ! '>=4.8 && <5'
  syb: -any
  generic-deriving: -any
  containers: -any
  boxes: -any
  pretty: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.0'
author: Guru Devanla
latest: '0.3.0.0'
description-type: markdown
description: ! "# README #\n\nTextme.PrettyPrint.Tabulate : Print any list, vector
  or map of records as a well-formatted readable table. Nested record structures are
  printed with hierarchically arranged headers, thus clearly showing the nested structures.\n\n###
  Text.PrettyPrint.Tabulate ###\n\n* This module provides simple functions used to
  print values in tabular format\n* Version 0.3.0.0\n* Contributions and Bug Reports
  welcome. Please use the Github issue tracker.\n\n### Release Notes 0.3.0.0 (*This
  release has breaking changes*)\n\n* This release has some breaking changes which
  was required to extend\n  functionality. The extended functionality improves on
  previous\n  release by printing nested records with hierarchical column headers\n\n*
  All Records types need to update their `Tabulate` instances to provide a flag, namely
  `ExpandWhenNested` or `DoNotExpandWhenNested`.\n\n* `ppTable` function has been
  renamed to `printTable` to make the function name more descriptive.\n\n* New function
  called printTableWithFlds has been added.\n\n### Example ###\n\n``` haskell\n\n
  \   {-# LANGUAGE MultiParamTypeClasses#-}\n    {-# LANGUAGE DeriveGeneric #-}\n
  \   {-# LANGUAGE DeriveDataTypeable #-}\n\n    import Text.PrettyPrint.Tabulate\n
  \   import qualified GHC.Generics as G\n    import Data.Data\n\n    import qualified
  Text.PrettyPrint.Tabulate as T\n\n    import qualified Data.Map as Map\n    import
  qualified Data.List as List\n    import qualified Data.Vector as Vector\n\n```\n\n####
  Instance Declaration Requirements ####\n\n1. All records definitions should `derive`
  from `Data` and `Generic`\n2. All field types that are record attributes should
  have an instance of `CellValueFormatter`. Default instances for standard types are
  already provided.\n3. All records that need to be printed as a table need to be
  an instance of `Tabulate`.\n4. Depending on if the nested record's fields have to
  be expanded, the\n   Tabulate instance could either be\n\n   `instance Tabulate
  Price ExpandWhenNested` or\n   `instance Tabulate Price DoNotExpandWhenNested`.\n\n```
  haskell\n\n    data FxCode = USD | EUR | JPY deriving (Show, Data, G.Generic)\n
  \   instance T.CellValueFormatter FxCode\n\n    -- This record type will be nested
  inside `Stock`\n    data Price = Price {price::Double, fx_code::FxCode} deriving
  (Data, G.Generic, Show)\n\n    -- if we do not want the `Price` records to be expanded
  into their own fields\n    -- then choose `T.DoNotExpandWhenNested`\n    instance
  T.Tabulate Price T.ExpandWhenNested\n    instance T.CellValueFormatter Price\n\n
  \   data Stock = Stock {ticker::String, local_price::Price, marketCap::Double} deriving
  (\n        Data, G.Generic, Show)\n    instance T.Tabulate Stock T.ExpandWhenNested\n\n```\nOnce
  we have the records and required instances created, we can see how\nthe created
  records can be viewed in the tabular format.\n\n``` haskell\n\n    yahoo =  Stock
  {ticker=\"YHOO\", local_price=Price 42.29101010 USD, marketCap=40e9}\n    google
  = Stock {ticker=\"GOOG\", local_price=Price 774.210101 EUR, marketCap=532.09e9}\n
  \   amazon = Stock {ticker=\"AMZN\", local_price=Price 799.161717 JPY, marketCap=378.86e9}\n\n
  \   tickers = [yahoo, google, amazon]\n    tickers_vector = Vector.fromList tickers\n
  \   tickers_map:: Map.Map Integer Stock\n    tickers_map = Map.fromList [(10, yahoo),
  (100, google), (1000, amazon)]\n\n    printExamples:: IO ()\n    printExamples =
  do\n        putStrLn \"Printing records in a list\\n\"\n        T.printTable tickers\n\n
  \       putStrLn \"\\nPrinting records in a map with the index.\\nNote the `key(s)`
  are printed as first columns\"\n        T.printTable tickers_map\n\n        putStrLn
  \"\\nPrinting records in a vector\\n\"\n        T.printTable tickers_vector\n\n
  \       -- Sometimes records may have too many fields. In those case, specific fields
  can\n        -- be chosen to be printed. Currently, support for this functionality
  is\n        -- minimal. The 'headers` are not printed. In the future, a function
  that\n        -- can take header labels as a list will be provided.\n\n        putStrLn
  \"\\nPrinting specific fields. Note, currently field names are not printed\"\n        T.printTableWithFlds
  [T.DFld (price . local_price), T.DFld ticker] tickers_map\n\n        putStrLn \"\\nPrint
  nested record in a map, individually\"\n        T.printTable $ fmap local_price
  tickers_map\n\n```\n\n### Print the examples ###\n\n``` haskell\n\n    main:: IO
  ()\n    main = do\n        printExamples\n```\n\n### Output ###\n\n``` haskell ignore\n
  \   Printing records in a list\n\n    ticker     local_price        local_price
  \    marketCap\n    -          price              fx_code         -\n    YHOO           42.2910101
  \    USD               4.0000000e10\n    GOOG          774.2101010     EUR               5.3209000e11\n
  \   AMZN          799.1617170     JPY               3.7886000e11\n\n    Printing
  records in a map with the index (Note the `key` is printed as the first column)\n\n
  \   -        ticker     local_price        local_price     marketCap\n    -        -
  \         price              fx_code         -\n    10       YHOO           42.2910101
  \    USD               4.0000000e10\n    100      GOOG          774.2101010     EUR
  \              5.3209000e11\n    1000     AMZN          799.1617170     JPY               3.7886000e11\n\n
  \   Printing records in a vector\n\n    ticker     local_price        local_price
  \    marketCap\n    -          price              fx_code         -\n    YHOO           42.2910101
  \    USD               4.0000000e10\n    GOOG          774.2101010     EUR               5.3209000e11\n
  \   AMZN          799.1617170     JPY               3.7886000e11\n\n    Printing
  specific fields. Note, currently field names are not printed\n    10           42.2910101
  \    YHOO\n    100         774.2101010     GOOG\n    1000        799.1617170     AMZN\n\n```\n"
license-name: MIT
