homepage: ''
changelog-type: markdown
hash: 3d383567f6d51c538ef9054b9b2c0ca924d95ca2994b57171a933a7f4efed298
test-bench-deps: {}
maintainer: csaba.hruska@gmail.com
synopsis: Simple audio library for Windows, Linux, OSX.
changelog: |
  # 0.8.0
  - fix: distinct data and playback handles
  - introduce Sound handle type, an abstraction for playback audio track
  - soundLoop, soundPlay return a Sound handle
  - soundUpdate, soundStop take a Sound handle parameter

  # 0.7.1.0
  - add sampleFromMemoryPcm
  - update stb_vorbis to v1.14

  # 0.7.0.1
  - better haddock

  # 0.7.0
  - use ByteString for in-memory sample loading
  - fix: c++ mixer init caused segfaults sometimes
  - use PulseAudio backend on Linux
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  filepath: '>=1.4 && <2'
  proteaaudio: -any
all-versions:
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.7.0
- 0.7.0.1
- 0.7.1.0
- 0.8.0
author: Csaba Hruska
latest: 0.8.0
description-type: markdown
description: |
  # Overview

  ProteaAudio is a stereo audio mixer/playback library for

  - Linux *(PulseAudio)*
  - Macintosh OS X *(CoreAudio)*
  - Windows *(DirectSound)*

  Supported audio formats:
  - Wav
  - Ogg
  - Raw linear PCM

  Samples can be loaded from file or memory.

  # Build

  ### Stack

  ```bash
  stack setup
  stack build
  ```

  ### Nix:

  ``` bash
  stack --nix build
  ```

  # Example

  ```haskell
  import Control.Monad
  import System.Environment
  import System.FilePath
  import qualified Data.ByteString as SB
  import Control.Concurrent

  import Sound.ProteaAudio

  waitPayback = do
    n <- soundActive
    when  (n > 0) $ do
      threadDelay oneSec
      waitPayback

  oneSec :: Int
  oneSec = 1000000 -- micro seconds

  main = do
      args <- getArgs
      filename <- case args of
        a : _ -> pure a
        _ -> fail "usage: proteaaudio-play SAMPLE_FILE_NAME"

      result <- initAudio 64 44100 1024 -- max channels, mixing frequency, mixing buffer size
      unless result $ fail "failed to initialize the audio system"

      -- (A) load sample from file
      sampleA <- sampleFromFile filename 1.0 -- volume

      -- start two sound tracks with shared sample data
      sndTrkA <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
      threadDelay oneSec -- wait 1 sec
      sndTrkB <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
      -- play 3 sec
      threadDelay $ 3 * oneSec
      soundStop sndTrkB
      -- wait sndTrkA to finish
      waitPayback

      -- (B) load from memory buffer
      buffer <- SB.readFile filename
      sampleB <- case takeExtension filename of
        ".ogg" -> sampleFromMemoryOgg buffer 1.0
        ".wav" -> sampleFromMemoryWav buffer 1.0

      soundPlay sampleB 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
      waitPayback

      finishAudio
  ```
license-name: BSD-3-Clause
