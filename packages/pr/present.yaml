homepage: https://github.com/chrisdone/present
changelog-type: ''
hash: c52c9b80baa2c33311ffdf1cc070f3b64730920711c6b82df43acfbcb22ac469
test-bench-deps: {}
maintainer: chrisdone@gmail.com
synopsis: Make presentations for data types.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  template-haskell: -any
all-versions:
- 0.0.0
- '1.0'
- '1.1'
- '2.1'
- '2.2'
- 4.0.0
- 4.0.1
- 4.0.2
- 4.1.0
author: Chris Done
latest: 4.1.0
description-type: markdown
description: ! "present\n=======\n\nMake presentations for data types.\n\n## Install\n\nRequires:
  GHC 7.10.3\n\nInstall globally into your GHC's global database (via stack) with:\n\n```\n$
  sh install-to-global-db.sh\n```\n\nTo remove it later:\n\n```\n$ sh remove-from-global-db.sh\n```\n\nTo
  be added: install via `stack install present`, but it needs to be\nadded to an LTS/nightly
  version first.\n\n## Customizing GHCi\n\nAdd to the following to your `~/.ghci`:\n\n```
  haskell\n:seti -XTemplateHaskell\n:def presentDebug \\e -> return (\"let it = \"
  ++ e ++ \"\\n$(Present.presentIt)\")\n:def presentQualified \\e -> return (\"let
  it = \" ++ e ++ \"\\nPrelude.putStrLn (Present.toShow True $(Present.presentIt))\")\n:def
  present \\e -> return (\"let it = \" ++ e ++ \"\\nPrelude.putStrLn (Present.toShow
  False $(Present.presentIt))\")\n:set -package present\n```\n\n## Usage\n\n``` haskell\nbash-3.2$
  stack exec ghci\nGHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help\npackage
  flags have changed, resetting and loading new packages...\nλ> :present \"hi\"\n\"hi\"\n\nλ>
  :present 123\n123\n\nλ> :present (5.2,\"hi\",1,'a')\n(5.2,\"hi\",1,'a')\n\nλ> data
  X a = X a Int\n\nλ> :present X 5 1\nX 5 1\n\nλ> :present S88.pack \"hi\"\n\"hi\"\n\nλ>
  :present print\n<a_0 -> GHC.Types.IO ()>\n\nλ> :present print ()\nIO (<GHC.Prim.State#
  GHC.Prim.RealWorld -> (GHC.Prim.State# GHC.Prim.RealWorld, a_0)>)\n\nλ> :present
  undefined\n<_ :: t_0>\n\nλ> :present id\n<a_0 -> a_0>\n\nλ> :present [undefined]\n[<_
  :: t_0>]\n\n```\n\n## Extension\n\nYou can write your own instances like this:\n\n```
  haskell\nλ> data X = X Int\nλ> :present X 5\nX 5\nλ> instance Present0 X where present0
  = (\"X\",\\(X x) -> IntegerPresentation \"X\" (show x))\nλ> :present X 5\n5\n```\n\n##
  Detailed output\n\n``` haskell\nλ> :presentDebug (2.5,\"hi\",1,'a')\nTuplePresentation\n
  \ \"(GHC.Types.Double,GHC.Base.String,GHC.Integer.Type.Integer,GHC.Types.Char)\"\n
  \ [ChoicePresentation\n     \"GHC.Types.Double\"\n     [(\"Floating\",IntegerPresentation
  \"GHC.Types.Double\" \"2.5\")\n     ,(\"Show\",IntegerPresentation \"GHC.Types.Double\"
  \"2.5\")\n     ,(\"Rational\",IntegerPresentation \"GHC.Types.Double\" \"5/2\")\n
  \    ,(\"Internal\"\n      ,DataTypePresentation \"GHC.Types.Double\"\n                            \"GHC.Types.D#\"\n
  \                           [PrimitivePresentation \"GHC.Prim.Double#\"])]\n  ,ChoicePresentation\n
  \    \"String\"\n     [(\"String\",StringPresentation \"String\" \"hi\")\n     ,(\"List
  of characters\"\n      ,ListPresentation\n         \"[GHC.Types.Char]\"\n         [ChoicePresentation\n
  \           \"GHC.Types.Char\"\n            [(\"Character\",CharPresentation \"GHC.Types.Char\"
  \"h\")\n            ,(\"Unicode point\"\n             ,ChoicePresentation\n                \"GHC.Types.Char\"\n
  \               [(\"Decimal\",IntegerPresentation \"GHC.Types.Char\" \"104\")\n
  \               ,(\"Hexadecimal\",IntegerPresentation \"GHC.Types.Char\" \"68\")\n
  \               ,(\"Binary\",IntegerPresentation \"GHC.Types.Char\" \"1101000\")])\n
  \           ,(\"Internal\"\n             ,DataTypePresentation \"GHC.Types.Char\"\n
  \                                  \"GHC.Types.C#\"\n                                   [PrimitivePresentation
  \"GHC.Prim.Char#\"])]\n         ,ChoicePresentation\n            \"GHC.Types.Char\"\n
  \           [(\"Character\",CharPresentation \"GHC.Types.Char\" \"i\")\n            ,(\"Unicode
  point\"\n             ,ChoicePresentation\n                \"GHC.Types.Char\"\n
  \               [(\"Decimal\",IntegerPresentation \"GHC.Types.Char\" \"105\")\n
  \               ,(\"Hexadecimal\",IntegerPresentation \"GHC.Types.Char\" \"69\")\n
  \               ,(\"Binary\",IntegerPresentation \"GHC.Types.Char\" \"1101001\")])\n
  \           ,(\"Internal\"\n             ,DataTypePresentation \"GHC.Types.Char\"\n
  \                                  \"GHC.Types.C#\"\n                                   [PrimitivePresentation
  \"GHC.Prim.Char#\"])]])]\n  ,ChoicePresentation\n     \"GHC.Integer.Type.Integer\"\n
  \    [(\"Decimal\",IntegerPresentation \"GHC.Integer.Type.Integer\" \"1\")\n     ,(\"Hexadecimal\",IntegerPresentation
  \"GHC.Integer.Type.Integer\" \"1\")\n     ,(\"Binary\",IntegerPresentation \"GHC.Integer.Type.Integer\"
  \"1\")\n     ,(\"Internal\"\n      ,DataTypePresentation \"GHC.Integer.Type.Integer\"\n
  \                           \"GHC.Integer.Type.S#\"\n                            [PrimitivePresentation
  \"GHC.Prim.Int#\"])]\n  ,ChoicePresentation\n     \"GHC.Types.Char\"\n     [(\"Character\",CharPresentation
  \"GHC.Types.Char\" \"a\")\n     ,(\"Unicode point\"\n      ,ChoicePresentation\n
  \        \"GHC.Types.Char\"\n         [(\"Decimal\",IntegerPresentation \"GHC.Types.Char\"
  \"97\")\n         ,(\"Hexadecimal\",IntegerPresentation \"GHC.Types.Char\" \"61\")\n
  \        ,(\"Binary\",IntegerPresentation \"GHC.Types.Char\" \"1100001\")])\n     ,(\"Internal\"\n
  \     ,DataTypePresentation \"GHC.Types.Char\"\n                            \"GHC.Types.C#\"\n
  \                           [PrimitivePresentation \"GHC.Prim.Char#\"])]]\n```\n"
license-name: BSD-3-Clause
