homepage: https://github.com/isovector/prospect#readme
changelog-type: markdown
hash: b314ac8ae1229df4cd87ebc2e24a5d101a08b6e9d6424ba12a8ce922849e0cd5
test-bench-deps:
  prospect: -any
  free: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  kan-extensions: -any
  inspection-testing: ! '>=0.3'
  deepseq: -any
maintainer: sandy@sandymaguire.me
synopsis: Explore continuations with trepidation
changelog: ! '# Changelog for prospect


  ## 0.1  -- 2018-07-10


  * First version. Released on an unsuspecting world.


  ## Unreleased changes

'
basic-deps:
  free: -any
  base: ! '>=4.7 && <5'
  kan-extensions: -any
  mtl: -any
  transformers: -any
  deepseq: -any
all-versions:
- 0.1.0.0
author: Sandy Maguire
latest: 0.1.0.0
description-type: markdown
description: ! "# prospect\n\n[![Build Status](https://travis-ci.org/isovector/prospect.svg?branch=master)](https://travis-ci.org/isovector/prospect)
  | [Hackage][hackage]\n\n[hackage]: https://hackage.haskell.org/package/prospect\n\n\n##
  Dedication\n\n> It is absolutely necessary, for the peace and safety of mankind,
  that some of\n> earth's dark, dead corners and unplumbed depths be let alone; lest
  sleeping\n> abnormalities wake to resurgent life, and blasphemously surviving nightmares\n>
  squirm and splash out of their black lairs to newer and wider conquests.\n>\n> H.P.
  Lovecraft\n\n\n## Overview\n\n`prospect` is a library that provides primitives for
  exploring functions, and by\nextension, monads. As such, it allows for a best-attempt
  static analysis of free\nmonads. Such power, however, does not come for free; using
  `prospect` is an\nimplicit promise with the Eldrich horrors that you'll tread lightly.
  Feckless\nwanderers into these depths will be rewarded with naught but terror, madness,\nand
  runtime crashes.\n\n\n## Usage\n\nThe library provides a function, `prospect ::
  Free f a -> (Maybe a, [f ()])`,\nwhich can probe the depths of a free monad, finding
  as many `f` constructors as\nit can before the monad branches dynamically.\n\nBe
  careful when inspecting the `f ()`s, if any of them depend on variables bound\nin
  the monad, they will leak exceptions when you are least expecting them. It's\na
  good idea to run your `f ()`s through `ensure :: Alternative m => a -> m a`\nafter
  you've scrutinized their constructors.\n\n\n## Example\n\n`prospect` can be used
  to perform a best-effort static analysis of a free monad:\n\n```haskell\ndata Pattern
  a\n  = Cont (Bool -> a)\n  | Action Int a\n  deriving (Functor, Generic1)\n\n\ncont
  :: MonadFree Pattern m => m Bool\ncont = liftF $ Cont id\n\n\naction :: MonadFree
  Pattern m => Int -> m ()\naction i = liftF $ Action i ()\n\n\nsuccess :: (Maybe
  String, [Pattern ()]\nsuccess = prospect $ do\n  a <- cont\n  action 1\n  pure \"success\"\n--
  success = (Just \"success\", [Cont (const ()), Action 1 ()])\n\n\nfailure :: (Maybe
  String, [Pattern ()]\nfailure = prospect $ do\n  a <- cont\n  action 1\n  if a  --
  static analysis ends here, as it would require branching on the\n        -- result
  of a monadic action\n    then action 2\n    else action 3\n  action 4\n  pure \"failure\"\n--
  failure = (Nothing, [Cont (const ()), Action 1 ()])\n```\n\nIn these examples, we
  can continue analyzing a `Free Pattern` monad until\nthe result of its `Cont` continuation
  is forced.\n\n"
license-name: BSD-3-Clause
