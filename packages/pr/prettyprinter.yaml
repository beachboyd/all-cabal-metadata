homepage: http://github.com/quchen/prettyprinter
changelog-type: markdown
hash: 69856d061c602917d578190265edb62b14f63a2e02bcc565adf31146f903a45b
test-bench-deps:
  bytestring: ! '>=0.10'
  ansi-wl-pprint: ! '>=0.6'
  base: ! '>=4.7 && <5'
  text: -any
  criterion: ! '>=1.1'
  doctest: ! '>=0.9'
  containers: -any
  tasty-quickcheck: ! '>=0.8'
  mtl: ! '>=2.1'
  tasty-hunit: ! '>=0.9'
  prettyprinter: -any
  transformers: ! '>=0.3'
  random: ! '>=1.0'
  tasty: ! '>=0.10'
  deepseq: -any
  QuickCheck: ! '>=2.7'
  pgp-wordlist: ! '>=0.1'
maintainer: David Luposchainsky <dluposchainsky at google>
synopsis: A modern, easy to use, well-documented, extensible pretty-printer.
changelog: ! "# 1.2.1\n\n- Add function to trim trailing space in layouted `SimpleDocStream`,\n
  \ `removeTrailingWhitespace`\n- Add `Pretty` instances for `Identity` and `Const`\n\n#
  1.2.0.1\n\n- Fix `alterAnnotationsS` (and thus `unAnnotateS`), which removed pushing,
  but\n  not popping, style frames. This led to them throwing errors in pretty much
  all\n  use cases.\n\n# 1.2\n\n- `encloseSep` does no longer include an `align` wrapper;
  in other words,\n\n    ```haskell\n    encloseSep_old … = align (encloseSep_new
  …)\n    ```\n- Change the default ribbon fraction to 1 (was 0.4)\n- Expose `viaShow`
  and `unsafeViaShow` from the public module\n- Fix `layoutSmart` behaving as if there
  was no space left for unbounded pages\n\n# 1.1.1\n\n- Add `panicPeekedEmpty` and
  `panicPoppedEmpty` to the panic module\n\n# 1.1.0.1\n\n- Rendering directly to a
  handle is now more efficient in the `Text` renderer,\n  since no intermediate `Text`
  is generated anymore.\n- Remove upper version bounds from `.cabal` files\n\n# 1.1\n\n-
  Allow `alterAnnotations` to convert one annotation to multiple ones, to\n  support
  e.g. `Keyword ---> Green+Bold`\n- Remove `Pretty` instance for `Doc`: the implicit
  un-annotation done by it did\n  more harm than good.\n\n# 1.0.1\n\n- Add `alterAnnotations`,
  which allows changing or removing annotations.\n  `reAnnotate` and `unAnnotate`
  are now special cases of this.\n- Fix »group« potentially taking exponential time,
  by making the (internal)\n  `flatten` function detect whether it is going to have
  any effect inside\n  `group`.\n- Add proper version bounds for all dependencies
  and backport them to version 1\n- Haddock: example for `Pretty Void`\n\n# 1\n\n-
  Add Foldable/Traversable instances for `SimpleDocTree`, `SimpleDocStream`\n- Add
  Functor instances for `Doc`, `SimpleDocTree`, `SimpleDocStream`\n- Add the simplified
  renderers `renderSimplyDecorated` and\n  `renderSimplyDecoratedA` to the tree and
  stack renderer modules\n- Lots of typo fixes and doc tweaks\n- Add a changelog :-)\n\n#
  0.1\n\nInitial release.\n"
basic-deps:
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  prettyprinter: -any
  template-haskell: ! '>=2.9'
all-versions:
- '1'
- '1.0.1'
- '1.1'
- '1.1.0.1'
- '1.1.1'
- '1.2'
- '1.2.0.1'
- '1.2.1'
author: Phil Wadler, Daan Leijen, Max Bolingbroke, Edward Kmett, David Luposchainsky
latest: '1.2.1'
description-type: markdown
description: ! "<!-- This file was auto-generated by the 'scripts/generate_readme'
  program. -->\n\n\n\nA modern Wadler/Leijen Prettyprinter\n====================================\n\n[![](https://img.shields.io/travis/quchen/prettyprinter/master.svg?style=flat-square&label=Master%20build)](https://travis-ci.org/quchen/prettyprinter)
  \ \n[![](https://img.shields.io/hackage/v/prettyprinter.svg?style=flat-square&label=Hackage&colorB=0a7bbb)](https://hackage.haskell.org/package/prettyprinter)
  [![](https://www.stackage.org/package/prettyprinter/badge/lts?style=flat-square&colorB=0a7bbb)](https://www.stackage.org/package/prettyprinter)
  [![](https://www.stackage.org/package/prettyprinter/badge/nightly?style=flat-square&label=stackage%20nightly&colorB=0a7bbb)](https://www.stackage.org/package/prettyprinter)\n\n\n\ntl;dr\n-----\n\nA
  prettyprinter/text rendering engine. Easy to use, well-documented, ANSI\nterminal
  backend exists, HTML backend is trivial to implement, no name clashes,\n`Text`-based,
  extensible.\n\n```haskell\nlet prettyType = align . sep . zipWith (<+>) (\"::\"
  : repeat \"->\")\n    prettySig name ty = pretty name <+> prettyType ty\nin  prettySig
  \"example\" [\"Int\", \"Bool\", \"Char\", \"IO ()\"]\n```\n\n```haskell\n-- Output
  for wide enough formats:\nexample :: Int -> Bool -> Char -> IO ()\n\n-- Output for
  narrow formats:\nexample :: Int\n        -> Bool\n        -> Char\n        -> IO
  ()\n```\n\n\n\n\nLonger; want to read\n--------------------\n\nThis package defines
  a prettyprinter to format text in a flexible and convenient\nway. The idea is to
  combine a document out of many small components, then using\na layouter to convert
  it to an easily renderable simple document, which can then\nbe rendered to a variety
  of formats, for example plain `Text`, or Markdown.\n*What you are reading right
  now was generated by this library (see\n`GenerateReadme.hs`).*\n\n\n\nWhy another
  prettyprinter?\n--------------------------\n\nHaskell, more specifically Hackage,
  has a zoo of Wadler/Leijen based\nprettyprinters already. Each of them addresses
  a different concern with the\nclassic `wl-pprint` package. This package solves *all*
  these issues, and then\nsome.\n\n\n\n### `Text` instead of `String`\n\n`String`
  has exactly one use, and that’s showing Hello World in tutorials. For\nall other
  uses, `Text` is what people should be using. The prettyprinter uses no\n`String`
  definitions anywhere; using a `String` means an immediate conversion to\nthe internal
  `Text`-based format.\n\n\n\n### Extensive documentation\n\nThe library is stuffed
  with runnable examples, showing use cases for the vast\nmajority of exported values.
  Many things reference related definitions,\n*everything* comes with at least a sentence
  explaining its purpose.\n\n\n\n### No name clashes\n\nMany prettyprinters use the
  legacy API of the first Wadler/Leijen prettyprinter,\nwhich used e.g. `(<$>)` to
  separate lines, which clashes with the ubiquitous\nsynonym for `fmap` that’s been
  in Base for ages. These definitions were either\nremoved or renamed, so there are
  no name clashes with standard libraries\nanymore.\n\n\n\n### Annotation support\n\nText
  is not all letters and newlines. Often, we want to add more information,\nthe simplest
  kind being some form of styling. An ANSI terminal supports\ncoloring, a web browser
  a plethora of different formattings.\n\nMore complex uses of annotations include
  e.g. adding type annotations for\nmouse-over hovers when printing a syntax tree,
  adding URLs to documentation, or\nadding source locations to show where a certain
  piece of output comes from.\n[Idris](https://github.com/idris-lang/Idris-dev) is
  a project that makes\nextensive use of such a feature.\n\nSpecial care has been
  applied to make annotations unobtrusive, so that if you\ndon’t need or care about
  them there is no overhead, neither in terms of\nusability nor performance.\n\n\n\n###
  Extensible backends\n\nA document can be rendered in many different ways, for many
  different clients.\nThere is plain text, there is the ANSI terminal, there is the
  browser. Each of\nthese speak different languages, and the backend is responsible
  for the\ntranslation to those languages. Backends should be readily available, or
  easy to\nimplement if a custom solution is desired.\n\nAs a result, each backend
  requires only minimal dependencies; if you don’t want\nto print to an ANSI terminal
  for example, there is no need to have a dependency\non a terminal library.\n\n\n\n###
  Performance\n\nRendering large documents should be done efficiently, and the library
  should\nmake it easy to optimize common use cases for the programmer.\n\n\n\n###
  Open implementation\n\nThe type of documents is abstract in most of the other Wadler/Leijen\nprettyprinters,
  making it hard to impossible to write adaptors from one library\nto another. The
  type should be exposed for such purposes so it is possible to\nwrite adaptors from
  library to library, or each of them is doomed to live on its\nown small island of
  incompatibility. For this reason, the `Doc` type is fully\nexposed in a semi-internal
  module for this specific use case.\n\n\n\nThe prettyprinter family\n------------------------\n\nThe
  `prettyprinter` family of packages consists of:\n\n  - `prettyprinter` is the core
  package. It defines the language to generate\n    nicely laid out documents, which
  can then be given to renderers to display\n    them in various ways, e.g. HTML,
  or plain text.\n  - `prettyprinter-ansi-terminal` provides a renderer suitable for
  ANSI terminal\n    output including colors (at the cost of a dependency more).\n
  \ - `prettyprinter-compat-wl-pprint` provides a drop-in compatibility layer for\n
  \   previous users of the `wl-pprint` package. Use it for easy adaption of the\n
  \   new `prettyprinter`, but don't develop anything new with it.\n  - `prettyprinter-compat-ansi-wl-pprint`
  is the same, but for previous users of\n    `ansi-wl-pprint`.\n  - `prettyprinter-compat-annotated-wl-pprint`
  is the same, but for previous\n    users of `annotated-wl-pprint`.\n  - `prettyprinter-convert-ansi-wl-pprint`
  is a *converter*, not a drop-in\n    replacement, for documents generated by `ansi-wl-pprint`.
  Useful for\n    interfacing with other libraries that use the other format, like
  Trifecta\n    and Optparse-Applicative.\n\n\n\nDifferences to the old Wadler/Leijen
  prettyprinters\n---------------------------------------------------\n\nThe library
  originally started as a fork of `ansi-wl-pprint` until every line\nhad been touched.
  The result is still in the same spirit as its predecessors,\nbut modernized to match
  the current ecosystem and needs.\n\nThe most significant changes are:\n\n  1. `(<$>)`
  is removed as an operator, since it clashes with the common alias\n     for `fmap`.\n
  \ 2. All but the essential `<>` and `<+>` operators were removed or replaced by\n
  \    ordinary names.\n  3. Everything extensively documented, with references to
  other functions and\n     runnable code examples.\n  4. Use of `Text` instead of
  `String`.\n  5. A `fuse` function to optimize often-used documents before rendering
  for\n     efficiency.\n  6. SimpleDoc was renamed `SimpleDocStream`, to contrast
  the new\n     `SimpleDocTree`.\n  7. In the ANSI backend, instead of providing an
  own colorization function for\n     each color/intensity/layer combination, they
  have been combined in /color/\n     /colorDull/, /bgColor/, and /bgColorDull/ functions,
  which can be found in\n     the ANSI terminal specific @prettyprinter-ansi-terminal@
  package.\n\n\n\nHistorical notes\n----------------\n\nThis module is based on previous
  work by Daan Leijen and Max Bolingbroke, who\nimplemented and significantly extended
  the prettyprinter given by a [paper by\nPhil Wadler in his 1997 paper »A Prettier\nPrinter«](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf),\nby
  adding lots of convenience functions, styling, and new functionality. Their\npackage,
  ansi-wl-pprint is widely used in the Haskell ecosystem, and is at the\ntime of writing
  maintained by Edward Kmett.\n"
license-name: BSD2
