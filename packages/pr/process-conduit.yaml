homepage: http://github.com/snoyberg/process-conduit
changelog-type: ''
hash: c179f6461aec3f65a8b1ffabc4efa62311d4fe8aa9ec984054cb7436abc19199
test-bench-deps:
  bytestring: -any
  base: ==4.*
  hspec: ! '>=1.3'
  process-conduit: -any
  conduit: -any
  conduit-extra: -any
  resourcet: -any
maintainer: Michael Snoyman
synopsis: Conduits for processes (deprecated)
changelog: ''
basic-deps:
  shakespeare: -any
  shakespeare-text: ! '>=1.0'
  bytestring: ! '>=0.9'
  control-monad-loop: ==0.1.*
  base: ==4.*
  text: ! '>=0.11'
  process: ! '>=1.0'
  conduit: ! '>=1.1'
  mtl: ! '>=2.0'
  resourcet: ! '>=1.1'
  template-haskell: ! '>=2.4'
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.1.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.0.5
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
author: Hideyuki Tanaka
latest: 1.2.0.1
description-type: markdown
description: ! "process-conduit: Conduit for processes\n======================================\n\n#
  About\n\nThis package provides [conduit](http://hackage.haskell.org/package/conduit)\nfor
  processes.\nAlso this provides quasi-quoters for process using it.\n\n# Install\n\n~~~
  {.bash}\n$ cabal update\n$ cabal install process-conduit\n~~~\n\n# Document\n\nHaddock
  documents are here:\n\n<http://hackage.haskell.org/package/process-conduit>\n\n#
  Quasi Quoters\n\nprocess-conduit has three quasi-quoters, `cmd`, `scmd` and `ccmd`.\n\nThe
  result type of `cmd` is Lazy `ByteString`,\nbut execution will perform strictly.\n\nThe
  result type of `scmd` and `ccmd` are\n`GSource m ByteString` and\n`GConduit ByteString
  m ByteString` respectively.\n\nIf a command is failed, an exception is thrown.\n\nCommands
  are executed in ***run-time***, not compile-time.\n\n# Examples\n\n* Create a Source
  and a Conduit of process\n\n~~~ {.haskell}\nimport Data.Conduit\nimport qualified
  Data.Conduit.Binary as CB\nimport Data.Conduit.Process\nimport System.IO\n\nmain
  :: IO ()\nmain = runResourceT $ do\n  sourceCmd \"ls\" $= conduitCmd \"sort\" $$
  CB.sinkHandle stdout\n~~~\n\n* Invoke a process simply\n\n~~~ {.haskell}\n{-# LANGUAGE
  QuasiQuotes #-}\nimport System.Process.QQ\n\nmain = print =<< [cmd|ls|]\n~~~\n\n*
  Conduit Quasi-Quoters\n\n~~~ {.haskell}\nmain :: IO ()\nmain = runResourceT $ do\n
  \ [scmd|ls|] $= [ccmd|sort|] $$ CB.sinkHandle stdout\n~~~\n\n* Unquoting (syntax
  is same as [shakespeare-text](http://hackage.haskell.org/package/shakespeare-text))\n\n~~~
  {.haskell}\nmain = do\n  [url] <- getArgs\n  print =<< [cmd|curl #{url}|]\n~~~\n"
license-name: BSD-3-Clause
