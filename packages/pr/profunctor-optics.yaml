homepage: https://github.com/cmk/profunctor-extras
changelog-type: markdown
hash: b113e568e860cd9fcba745f925cf715ad3c449fd265a37905179a8ceadd9c1d1
test-bench-deps:
  base: -any
  doctest: ! '>=0.8'
  containers: -any
  profunctor-optics: -any
  mtl: -any
maintainer: Chris McKinlay
synopsis: An optics library compatible with the typeclasses in 'profunctors'.
changelog: |
  # Revision history for dioids

  ## 0.0.1  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: ! '>=5 && <6'
  base: ! '>=4.9 && <5.0'
  comonad: ! '>=4 && <6'
  profunctor-arrows: ! '>=0.0.0.2 && <0.0.1'
  connections: ! '>=0.0.2 && <0.1'
  distributive: ! '>=0.3 && <1'
  rings: ! '>=0.0.2 && <0.1'
  tagged: ! '>=0.4.4 && <1'
  containers: ! '>=0.4.0 && <0.7'
  unliftio-core: ! '>=0.1.2 && <0.2'
  mtl: ! '>=2.0.1 && <2.3'
  transformers: ! '>=0.2 && <0.6'
  newtype-generics: ! '>=0.5.3 && <0.6'
  ilist: ! '>=0.3.1.0 && <0.4'
  profunctors: ! '>=5.2.1 && <6'
all-versions:
- 0.0.0.1
- 0.0.0.2
author: Chris McKinlay
latest: 0.0.0.2
description-type: haddock
description: |-
  This package provides utilities for creating and manipulating profunctor-based optics. Some highlights:

  Full complement of isos, prisms, lenses, grates, traversals (affine, regular, and non-empty), folds (affine, regular, and non-empty), views, and setters. Many of these have categorical duals.

  Composable indexed and co-indexed variants of all of the above.

  Compact & straight-forward implementation. No inscrutable internal modules, lawless or otherwise ancillary typeclasses, or heavy type-level machinery.

  Fully interoperable. All that is required to create optics (standard, idexable, or co-indexable) is the `profunctors` package, which is heavily used and seems likely to end up in `base` at some point. Optics compose with (.) from `Prelude` as is typical. If you want to provide profunctor optics for your own types in your own libraries, you can do so without incurring a dependency on this package. Conversions to & from the Van Laarhoven representations are provided for each optic type.

  Well-documented properties and exportable predicates for testing your own optics.

  See the <https://github.com/cmk/profunctor-extras/blob/master/profunctor-optics/README.md Readme> file for more information.
license-name: BSD-3-Clause
