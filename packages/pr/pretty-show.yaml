homepage: http://wiki.github.com/yav/pretty-show
changelog-type: text
hash: d217454db54bdda22d74a80008107452645c7e87858df92f958a65f87b8637da
test-bench-deps: {}
maintainer: iavor.diatchki@gmail.com
synopsis: ! 'Tools for working with derived `Show` instances and generic

  inspection of values.'
changelog: ! "Changes in 1.6.13\n  * Parse things like <function> and <Function> as
  constructors\n\nChanges in 1.6.12\n  * Treat reserved operators as infix constructors
  (best effort kind of thing)\n\nChanges in 1.6.11\n  * Add `pPrint`, which is `putStrLn
  . ppShow`\n\nChanges in 1.6.10\n  * Increase the precedence of unary minus\n\nChanges
  in 1.6.9\n  * Relax parsing of atoms, so that we can support things like the show\n
  \   instance of StdGen (e.g., [ 123 45, 786 10 ])\n\nChanges in 1.6.8.2:\n  * Correct
  license in srouce files.\n\nChanges in 1.6.8.1:\n  * Correct the 'License' field
  in the Cabal file to match the license (MIT)\n\nChanges in 1.6.8:\n  * Move source-repository
  pragma to top-level.\n\nChanges in 1.6.5:\n  * Rename CHANGES to CHANGELOG to work
  with hackage.\n\nChanges in 1.6.4:\n  * Drop dependency on happy >= 1.19\n\nChanges
  in 1.6.3:\n  * Add Safe Haskell annotations\n  * Add CHANGES file\n  * Add generated
  parser to package again.  We do this, because otherwise\n    the package fails to
  build on systems that do not have `happy`.\n    This is a bit questionable, but
  hopefully it won't be too much of\n    a problem.\n"
basic-deps:
  haskell-lexer: ! '>=1 && <2'
  base: ! '>=4.5 && <5'
  filepath: -any
  array: ! '>=0.2 && <2'
  ghc-prim: -any
  pretty-show: -any
  pretty: ! '>=1 && <2'
all-versions:
- '1'
- '1.1'
- '1.1.1'
- '1.2'
- '1.3'
- '1.3.1'
- '1.3.2'
- '1.4.1'
- '1.5'
- '1.6'
- '1.6.1'
- '1.6.2'
- '1.6.3'
- '1.6.5'
- '1.6.6'
- '1.6.7'
- '1.6.8'
- '1.6.8.1'
- '1.6.8.2'
- '1.6.9'
- '1.6.10'
- '1.6.11'
- '1.6.12'
- '1.6.13'
- '1.6.14'
author: Iavor S. Diatchki
latest: '1.6.14'
description-type: haddock
description: ! 'We provide a library and an executable for working with derived ''Show''

  instances. By using the library, we can parse derived ''Show'' instances into a

  generic data structure. The @ppsh@ tool uses the library to produce

  human-readable versions of ''Show'' instances, which can be quite handy for

  debugging Haskell programs.  We can also render complex generic values into

  an interactive Html page, for easier examination.'
license-name: MIT
