homepage: http://github.com/tanakh/process-qq
changelog-type: ''
hash: bc3ff017d89feb9cef3b2bf893ef579ac99de953d5d19c86fb98fde422799d4d
test-bench-deps: {}
maintainer: Hideyuki Tanaka <tanaka.hideyuki@gmail.com>
synopsis: Quasi-Quoters for exec process
changelog: ''
basic-deps:
  shakespeare-text: ! '>=0.10 && <0.11'
  bytestring: ! '>=0.9 && <0.10'
  base: ! '>=4 && <5'
  text: ! '>=0.11 && <0.12'
  process: ! '>=1.0 && <1.1'
  enumerator: ! '>=0.4.16 && <0.5'
  mtl: ! '>=2.0 && <2.1'
  template-haskell: ! '>=2.4 && <2.7'
all-versions:
- 0.2.0
author: Hideyuki Tanaka
latest: 0.2.0
description-type: markdown
description: ! "process-qq: A Quasi-Quoter to execute processes\n===============================================\n\n#
  About\n\nThis is a simple package for executing external process using quasi-quoters.\n\n#
  Install\n\n~~~ {.bash}\n$ cabal update\n$ cabal install process-qq\n~~~\n\n# API\n\nprocess-qq
  has three quasi-quoters, `cmd`, `lcmd` and `enumCmd`.\n\nThe result type of `cmd`
  is `(Strict) ByteString`,\n`lcmd` is `Lazy ByteString`,\n`enumCmd`'s is `MonadIO
  m => Enumerator ByteString m a`.\n\nCommand is failed, an Exception is thrown.\n\nCommand
  is executed in ***run-time***, not compile-time.\n\n# Example\n\n* Invoke a process
  simply\n\n~~~ {.haskell}\n{-# LANGUAGE QuasiQuotes #-}\nimport System.Process.QQ\n\nmain
  = print =<< [cmd|ls|]\n~~~\n\n* Enumerate a process\n\n~~~ {.haskell}\nmain =\n
  \ run_ $ [enumCmd|curl http://www.google.com/|] $$ iterHandle stdout\n~~~\n\n* Unquoting
  (syntax is same as [shakespeare-text](http://hackage.haskell.org/package/shakespeare-text))\n\n~~~
  {.haskell}\nmain = do\n  [url] <- getArgs\n  print =<< [cmd|curl #{url}|]\n~~~\n"
license-name: BSD-3-Clause
