homepage: https://github.com/loganmac/pretty-terminal#readme
changelog-type: markdown
hash: be3ab74369bfb6604f3831551e668b33cebb6eef244c9363599bd29034ffbed0
test-bench-deps: {}
maintainer: logan.airnomad@gmail.com
synopsis: Styling and coloring terminal output with ANSI escape sequences.
changelog: ! '# Changelog for pretty-terminal


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  pretty-terminal: -any
all-versions:
- '0.1.0.0'
author: Logan McPhail
latest: '0.1.0.0'
description-type: markdown
description: ! "# pretty-terminal\n\n## Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nmodule Main where\n\nimport qualified Data.Text.IO          as T\nimport           System.Console.Pretty
  (Color (..), Style (..), bgColor, color,\n                                        style,
  supportsPretty)\n\nmain :: IO ()\nmain = do\n  inColor <- supportsPretty\n  if inColor
  then example\n             else putStrLn \"Sorry, this terminal doesn't support
  pretty ANSI codes\"\n\nexample :: IO ()\nexample = do\n  -- simple style\n  putStrLn
  ( style Underline \"hello there!\" )\n\n  -- simple color\n  putStrLn ( color Yellow
  \"this lib was designed to be easy\" )\n\n  -- simple background\n  putStrLn ( bgColor
  Blue \"and the functions layer together easily\" )\n\n  -- combining\n  putStrLn
  ( bgColor White . color Red . style Bold $ \"like so!\" )\n\n  -- custom style &
  color\n  let primary = bgColor Magenta . color Green . style Italic\n  putStrLn
  ( primary \"easily create your own helpers & styles\" )\n\n  -- with both unicode
  string types\n  putStrLn ( color Cyan \"String...\")\n  T.putStrLn (color Red \"and
  Text\")\n\n  -- set styling to none\n  putStrLn ( primary $ style Normal \"or if
  you need to remove any styling...\" )\n```"
license-name: BSD3
