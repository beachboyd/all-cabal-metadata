homepage: https://github.com/bergey/preql#readme
changelog-type: markdown
hash: e7918c5a5a8ce37a636aa7f76330fc7a64efa90e0b92cbb912a22f1253d88f00
test-bench-deps:
  bytestring: '>=0.10.10.0 && <0.10.13'
  base: '>=4.13.0.0 && <4.15'
  time: '>=1.9.3 && <1.9.4'
  bytestring-strict-builder: '>=0.4.5.3 && <0.4.6'
  tasty-hedgehog: '>=1.0'
  vector-sized: '>=1.4.1 && <1.4.4'
  postgresql-libpq: '>=0.9.4.2 && <0.9.5'
  text: '>=1.2.3.2 && <1.2.5'
  uuid: '>=1.3.13 && <1.3.14'
  syb: '>=0.7.1 && <0.7.2'
  hedgehog: '>=1.0.3'
  array: '>=0.5.4.0 && <0.5.5'
  th-lift-instances: '>=0.1.17 && <0.1.19'
  containers: '>=0.6.2.1'
  postgresql-binary: '>=0.12.2 && <0.12.4'
  generic-random: <1.3.1
  contravariant: '>=1.5.2 && <1.5.4'
  preql: -any
  mtl: '>=2.2.2 && <2.2.3'
  binary-parser: '>=0.5.6 && <0.6'
  tasty-hunit: '>=0.10.0 && <0.10.1'
  transformers: '>=0.5.6.2 && <0.5.7'
  tasty: '>=1.2.3 && <1.4.1'
  scientific: '>=0.3.6.2 && <0.3.7'
  aeson: '>=1.4.7.1 && <1.5.6'
  template-haskell: '>=2.15.0.0 && <2.17'
  vector: '>=0.12.1.2 && <0.12.2'
maintainer: bergey@teallabs.org
synopsis: safe PostgreSQL queries using Quasiquoters
changelog: |
  # 0.4 (2021-01-07)

  - `select` quasiquoter that validates syntax
  - tag number of columns consumed in `RowDecoder` type
  - when decoder & number of returned columns are both known, ensure they match

  # 0.3 (2020-06-18)

  - lookup types by name when OID is not known statically
  - specify isolation level when running a transaction
  - stop trying to fake nested transactions
  - provide direct access to a Connection when that control is needed

  # 0.2 (2020-03-31)

  - now we have documentation
  - rearrange some code, re-export modules to support docs

  # 0.1 (2020-02-29)

  0.1 highlights include:

  - binary wire format
  - check that Postgres sent expected type before decoding
  - Quasiquoter supports mixing numbered & antiquoted params
basic-deps:
  bytestring: '>=0.10.10.0 && <0.10.13'
  base: '>=4.13.0.0 && <4.15'
  time: '>=1.9.3 && <1.9.4'
  bytestring-strict-builder: '>=0.4.5.3 && <0.4.6'
  vector-sized: '>=1.4.1 && <1.4.4'
  postgresql-libpq: '>=0.9.4.2 && <0.9.5'
  text: '>=1.2.3.2 && <1.2.5'
  uuid: '>=1.3.13 && <1.3.14'
  syb: '>=0.7.1 && <0.7.2'
  array: '>=0.5.4.0 && <0.5.5'
  th-lift-instances: '>=0.1.17 && <0.1.19'
  postgresql-binary: '>=0.12.2 && <0.12.4'
  contravariant: '>=1.5.2 && <1.5.4'
  mtl: '>=2.2.2 && <2.2.3'
  binary-parser: '>=0.5.6 && <0.6'
  transformers: '>=0.5.6.2 && <0.5.7'
  scientific: '>=0.3.6.2 && <0.3.7'
  aeson: '>=1.4.7.1 && <1.5.6'
  template-haskell: '>=2.15.0.0 && <2.17'
  vector: '>=0.12.1.2 && <0.12.2'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
author: Daniel Bergey
latest: '0.4'
description-type: haddock
description: |
  Before you Post(gres)QL, preql.

  @preql@ provides a low-level interface to PostgreSQL and a quasiquoter that converts
  inline variable names to SQL parameters.  Higher-level interfaces, checking SQL syntax &
  schema, are planned.

  the [quickstart](https://github.com/bergey/preql#quickstart)
  or the [vision](https://github.com/bergey/preql#vision-parsing-sql-in-haskell-quasiquotes)

  Most applications will want to import the top-level module @Preql@.  When writing @SQL@
  instances or your own higher-level abstractions, you may want the lower-level,
  IO-specific functions in @Preql.Wire@, not all of which are re-exported from @Preql@.
license-name: BSD-3-Clause
