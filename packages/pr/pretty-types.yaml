homepage: https://github.com/sheyll/pretty-types#readme
changelog-type: markdown
hash: 5e4b9a3345f4c38fbae84861aa8b684f0ae6b9c21c38eb316129b7ac1b63b770
test-bench-deps:
  base: ! '>=4.9 && <5'
  hspec: -any
  tagged: ! '>=0.8 && <1'
  pretty-types: -any
maintainer: sven.heyll@gmail.com
synopsis: A small pretty printing DSL for complex types.
changelog: ! "## Version 0.2.3.1\n\n* Switch to Stackage LTS-7.0\n\n## Version 0.2.3.0\n\n*
  Added parameterized pretty printing, similar to type-level\n  pretty-printing functions\n\n##
  Version 0.2.2.1\n\n* Fixed several `@since` haddock comments\n\n## Version 0.2.2.0\n\n*
  Added a ToPretty instance for 'Tagged'\n\n## Version 0.2.1.0\n\n* Added ToPretty
  instances for type level strings and numbers\n* Added ToPretty instances for types
  of kind Maybe and Bool\n* Added ToPretty instances for some standard number types
  (Word*, Int*)\n\n## Version 0.2.0.0\n\n* Added indentation support\n* Added `<:>`
  combinator\n\n## Version 0.1.0.0\n\n* Initial Version\n"
basic-deps:
  base: ! '>=4.9 && <5'
  tagged: ! '>=0.8 && <1'
  mtl: ! '>=2.2 && <3'
all-versions:
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.2.3.0
- 0.2.3.1
author: Sven Heyll
latest: 0.2.3.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/sheyll/pretty-types.svg?branch=master)](https://travis-ci.org/sheyll/pretty-types)\n[![Hackage](https://img.shields.io/badge/hackage-prettytypes-green.svg?style=flat)](http://hackage.haskell.org/package/pretty-types)\n\n#
  Type Pretty Printing\n\nA tiny eDSL, not unlike `ErrorMessage` for `TypeError`s
  to pretty print types,\nespecially uninhabited types.\n\nThis Example will render
  this table:\n\n    +-------+-----+------------+\n    |  col 1|col 2|       col 3|\n
  \   +-------+-----+------------+\n    |   2423|  451|       21234|\n    | 242322|
  \  42|         n/a|\n    |      0| 4351|      623562|\n    |   4351|  n/a|         n/a|\n
  \   |      0| 4351|      623562|\n    +-------+-----+------------+\n\nFrom this
  code:\n\n    module Main (main) where\n\n    import Data.Type.Pretty\n    import
  GHC.TypeLits\n    import Data.Kind\n    import Data.Proxy\n\n    main :: IO ()\n
  \   main = putStrLn $ showPretty (Proxy :: Proxy TestTable)\n\n    type TestTable
  =\n      'MyTable         '[MyCol \"col 1\" 7, MyCol \"col 2\" 5, MyCol \"col 3\"
  12]\n              '[ MyRow '[2423           ,451             ,21234]\n               ,
  MyRow '[242322         ,42]\n               , MyRow '[0              ,4351            ,623562]\n
  \              , MyRow '[4351]\n               , MyRow '[0              ,4351            ,623562]\n
  \              ]\n\n    data MyTable = MyTable [Type] [Type]\n    data MyCol ::
  Symbol -> Nat -> Type\n    data MyRow :: [Nat] -> Type\n\n\n    type instance ToPretty
  ('MyTable cols rows) =\n               PrettyManyIn (PutStr \"+\") (RowSepLine cols)\n
  \         <$$> PrettyManyIn (PutStr \"|\") (TableHeading cols)\n          <$$> PrettyManyIn
  (PutStr \"+\") (RowSepLine cols)\n          <$$> PrettyHigh   (TableRows cols rows)\n
  \         <$$> PrettyManyIn (PutStr \"+\") (RowSepLine cols)\n\n    type family
  TableHeading (cols :: [Type]) :: [PrettyType]\n    type instance TableHeading '[]
  = '[]\n    type instance TableHeading (MyCol title width ': r) =\n      PutStrW
  width title  ': TableHeading  r\n\n    type family\n       RowSepLine (cols :: [Type])
  :: [PrettyType] where\n       RowSepLine '[] = '[]\n       RowSepLine (MyCol title
  width ': r) =\n         PrettyOften width (PutStr \"-\") ': RowSepLine  r\n\n    type
  family\n      TableRows (cols :: [Type]) (rows :: [Type]) :: [PrettyType] where\n
  \     TableRows cols '[] = '[]\n      TableRows cols (MyRow cells ': rest ) =\n
  \       PrettyManyIn (PutStr \"|\") (TableCells cols cells) ': TableRows cols rest\n\n
  \   type family\n      TableCells (cols :: [Type]) (cells :: [Nat]) :: [PrettyType]
  where\n      TableCells '[] cells = '[]\n      TableCells (MyCol title width ':
  cols) (value ': cells) =\n        PutNatW width value ':  TableCells cols cells\n
  \     TableCells (MyCol title width ': cols) '[] =\n        PutStrW width \"n/a\"
  ':  TableCells cols '[]\n"
license-name: BSD-3-Clause
