homepage: https://github.com/mstksg/prompt
changelog-type: markdown
hash: e85ee7c96df8bd6bc4519de326bc6f8a14037a1239c8ae044c411c6dcf188faa
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: ! 'Monad (and transformer) for deferred-effect pure

  prompt-response queries'
changelog: ! "Version 0.1.1.2\n===============\n\n<https://github.com/mstksg/prompt/releases/tag/v0.1.1.2>\n\n*
  \  Reverted regression introduced in *v0.1.1.1* on versions of *transformers*\n
  \   less than *0.5*.\n\nVersion 0.1.1.1\n===============\n\n<https://github.com/mstksg/prompt/releases/tag/v0.1.1.1>\n\n*
  \  Removed redundant `Error` constraint on `MonadPrompt` instance for\n    `ErrorT`.\n\nVersion
  0.1.1.0\n===============\n\n<https://github.com/mstksg/prompt/releases/tag/v0.1.1.0>\n\n*
  \  Fixed `Alternative` and `MonadPlus` instances to behave meaningfully ---\n    that
  is, with \"short circuiting\" behavior for `t`'s that offer it.\n\n\nVersion 0.1.0.0\n===============\n\n<https://github.com/mstksg/prompt/releases/tag/v0.1.0.0>\n\n*
  \  Initial release!\n"
basic-deps:
  base: ! '>=4.6 && <5'
  base-compat: -any
  mtl: -any
  transformers: -any
  transformers-compat: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.2
author: Justin Le
latest: 0.1.1.2
description-type: markdown
description: ! "prompt\n======\n\n[![prompt on Stackage LTS 2](http://stackage.org/package/prompt/badge/lts-2)](http://stackage.org/lts-2/package/prompt)\n[![prompt
  on Stackage LTS 3](http://stackage.org/package/prompt/badge/lts-3)](http://stackage.org/lts-3/package/prompt)\n[![prompt
  on Stackage LTS 4](http://stackage.org/package/prompt/badge/lts-4)](http://stackage.org/lts-4/package/prompt)\n[![prompt
  on Stackage LTS](http://stackage.org/package/prompt/badge/lts)](http://stackage.org/lts/package/prompt)\n[![prompt
  on Stackage Nightly](http://stackage.org/package/prompt/badge/nightly)](http://stackage.org/nightly/package/prompt)\n\n\nLightweight
  library providing a monad/applicative (and transformer) for\ndelayed-effect \"pure\"
  prompt-and-respose queries.\n\n~~~bash\n$ cabal update\n$ cabal install prompt\n~~~\n\nNow
  on [hackage][]!\n\n[hackage]: http://hackage.haskell.org/package/prompt\n\nPrompt\n------\n\n`Prompt
  a b r` represents a \"pure\" computation producing an `r` that can \"ask\" or\n\"prompt\"
  with an `a` and get `b`'s as responses/answers.\n\nBy \"pure\", I mean that the
  actual eventual process of *answering* the prompts\nmight be effectful (it might
  involve IO, or state, or STM...like database\nqueries or prompts to a user).  When
  we're writing our actual logic, we never\ninvolve anything with IO, State, etc.,
  so we don't unleash a whole can of\nworms by using, for example, a monad transformer
  over `IO`.\n\nDon't let your computation/type do arbitrary IO.  If you see a `Prompt`,
  know\nthat it won't do arbitrary IO --- it'll potentially only do the IO that you,\nthe
  caller, explicitly allows --- or even do all of the prompting in a pure\ncontext
  without any effects!\n\n~~~haskell\nimport Control.Monad.Prompt\n\ndata Foo = Foo
  { fooBar :: String\n               , fooBaz :: Int\n               } deriving Show\n\npromptFoo
  :: Prompt String String Foo\npromptFoo = Foo <$> prompt \"bar\" <*> fmap length
  (prompt \"baz\")\n~~~\n\nHere we build a `Foo` from a context where we can ask with
  strings and get\nstrings in return.\n\nLet's build a `Foo` from stdin/stdout:\n\n~~~haskell\nghci>
  :t runPromptM\nrunPromptM :: Monad m => Prompt a b r -> (a -> m b) -> m r\nghci>
  runPromptM promptFoo $ \\str -> do putStrLn str; getLine\nbar         -- stdout
  prompt\n> hello!    -- stdin response typed in\nbaz         -- stdout prompt\n>
  i am baz  -- stdin response typed in\nFoo \"hello!\" 8  -- result\n~~~\n\n(by the
  way, that's also `interactP promptFoo`)\n\nNow let's build one by asking for environment
  variables\n\n~~~haskell\nghci> import System.Environment\nghci> setEnv \"bar\" \"hello!\"\nghci>
  setEnv \"baz\" \"i am baz\"\nghci> runPromptM promptFoo getEnv\nFoo \"hello!\" 8\n~~~\n\n`promptFoo`
  is completely \"pure\", and doesn't ever involve IO or anything, and\ndoesn't even
  have IO in the type.  We can run `promptFoo` in `IO` if we\nwanted, like above...or
  we can even run \"without\" IO, too:\n\n~~~haskell\nghci> import qualified Data.Map
  as M\nghci> let testMap = M.fromList [(\"bar\", \"hello!\"), (\"baz\", \"i am baz\")]\nghci>
  :t runPrompt\nrunPrompt :: Prompt a b r -> (a -> b) -> r\nghci> runPrompt promptFoo
  (testMap M.!)\nFoo \"hello!\" 8\n~~~\n\nNow you can do things like querying databases,
  prompting the user, etc.,\nwithout ever involving `IO` at all in your logic.  With
  a `Prompt`, we can\nworry that it will never produce arbitrary IO effects!  You
  can be certain\nthat a `Prompt` will never call `launchMissiles`, like a `getFoo
  :: IO Foo`\nmight!\n\nYou can also do some cute tricks; `Prompt a () r` with a \"prompt
  response\nfunction\" like `putStrLn` lets you do streaming logging, and defer *how*
  the\nlogging is done --- to IO, to a list?\n\n~~~haskell\nghci> let logHelloWord
  = mapM_ prompt [\"hello\", \"world\"]\nghci> runPromptM logHelloWorld putStrLn\nhello\nworld\nghci>
  execWriter $ runPromptM logHelloWorld tell\n\"helloworld\"\n~~~\n\nAs a \"pure\"
  underlying effect source\n----------------------------------\n\nMany libraries managing
  effects, like *pipes* and *conduit*, or\nDSL's/platforms that work with underlying
  effects, like *auto*, will work over\nan effectful monad like IO.  But sometimes,
  you don't need all of the power of\narbitrary IO --- you don't want to manage the
  effects of arbitrary IO --- you\njust need to manage the effects of one thing, like
  querying a database or\ntalking to stdio.  Instead of working over `IO` the entire
  time, you can just\ndecide to work with one prompting aspect.\n\nWith Transformers\n-----------------\n\n`Prompt
  a b` can be used as monad to transform for any monad transformer to\ngive an \"interactive
  source\" at the bottom of any monad transformer.\n\nHave you ever wanted to have
  `State`, with some aspect of IO, like writing to\na database, doing network interactions,
  or querying a database, but didn't\nwant to have an ugly terrible `StateT s IO`?
  \ Well, wish no more!  You can\nhave `StateT s (Prompt String String) a`, for a
  `State s` computation that can\noccasionally depend on asking the user, or the environment
  variables, or a\nnetwork connection, or a database in IO or whatever.  But now you
  can be sure\nit won't ever do arbitrary IO --- it'll only do exactly what IO it
  needs that\nyou specify when you \"run\" it.  Your \"pure\" computation doesn't
  involve IO at\nall!  All you added was an extra \"promptable source\".\n\nYou can
  also use this to get short-circuiting behavior with `MaybeT`, etc.\n\n~~~haskell\nimport
  Control.Monad.Trans\nimport Control.Monad.Prompt\nimport Text.Read\n\npromptFoo2
  :: MaybeT (Prompt String String) Foo\npromptFoo2 = do\n    bar <- lift $ prompt
  \"bar\"\n    x   <- lift $ prompt \"baz\"\n    case readMaybe x of\n      Just baz
  -> return $ Foo bar baz\n      Nothing  -> mzero\n~~~\n\n~~~haskell\nghci> runPromptM
  (runMaybeT promptFoo2) getEnv\nNothing\nghci> runPromptM (runMaybeT (promptFoo2
  <|> return (Foo \"error\" 0))) getEnv\nJust (Foo \"error\" 0)\nghci> setEnv \"baz\"
  \"19\"\nghci> runPromptM (runMaybeT (promptFoo2 <|> return (Foo \"error\" 0))) getEnv\nJust
  (Foo \"hello!\" 19)\n~~~\n\nThis becomes pretty nice with `ExceptT` or any instance
  of `MonadError`, where\nyou can use `throwError`, `catchError`, etc., to have actual
  data with your\nerrors.\n\nYou can also play with using for the return type.  For
  example:\n\n~~~haskell\nlogEvens :: StateT Int (Prompt String ()) ()\nlogEvens =
  do\n    modify (+1)\n    x <- get\n    when (even x) . lift $ prompt (show x)\n~~~\n\n~~~haskell\n>
  runPromptM (runStateT (replicateM 10 logEvens) 0) putStrLn\n2\n4\n6\n8\n10\n~~~\n\nThat
  gives you streaming logging, or streaming writing-to-a-database, etc.\n\nThere's
  a bit of a downside to this method, because your \"prompt response\nfunction\" given
  can't access the overlying monadic context --- `runPromptM`\nand `putStrLn` there
  can't return a `State Int String`, only a `String`.  We\naddress this in the next
  section.\n\n### Typeclass\n\nThere's also the typeclass `MonadPrompt` offered, which
  allows you to write\ncode polymorphic over all things that can be \"prompted\".
  \ For example, the\nabove example can be written as:\n\n~~~haskell\npromptFoo2 ::
  (MonadPlus m, MonadPrompt String String m) => m Foo\npromptFoo2 = do\n    bar <-
  prompt \"bar\"\n    x   <- prompt \"baz\"\n    case readMaybe x of\n      Just baz
  -> return baz\n      Nothing  -> mzero\n\npromptFoo :: MonadPrompt String String
  m => m Foo\npromptFoo = Foo <$> prompt \"bar\" <*> fmap length (prompt \"baz\")\n~~~\n\n~~~haskell\nghci>
  interactP . runMaybeT $ promptFoo2 <|> promptFoo\nbar\n> hello!\nbaz\n> 19\nFoo
  \"hello!\" 19\nghci> interactP . runMaybeT $ promptFoo2 <|> promptFoo\nbar\n> hello!\nbaz\n>
  i am baz\nbar         -- failure to parse, so retry with `promptFoo`\n> hello!\nbaz\n>
  i am baz\nFoo \"hello!\" 8\n~~~\n\nPromptT\n-------\n\n`PromptT a b t r` allows
  your prompting-and-responding to take place in the\ncontext of `Traversable` `t`,
  so you can do things like short-circuiting with\n`Either e` or `Maybe`, or multiple
  branches for `[]`, etc --- all \"purely\",\nwithout worrying about the eventual
  effects like IO.\n\nIn some ways, this is a bit redundant, because `ParserT a b
  Maybe` is somewhat\nequivalent to `MaybeT (Parser a b)`.  However, using `ParserT`
  can be more\nconvenient because you can use arbitrary Traversables, and also there
  are\nfunctions given to make this work \"out of the box\", instead of manually\nunwrapping
  with `runMaybeT`, `runExceptT`, etc.\n\n~~~haskell\nghci> interactPT $ promptFoo2
  <|> promptFoo\nbar\n> hello!\nbaz\n> 19\nFoo \"hello!\" 19\nghci> interactPT $ promptFoo2
  <|> promptFoo\nbar\n> hello!\nbaz\n> i am baz\nbar         -- failure to parse,
  so retry with `promptFoo`\n> hello!\nbaz\n> i am baz\nFoo \"hello!\" 8\n~~~\n\nOr,
  like the example above,\n\n~~~haskell\nghci> runPromptT logHelloWorld tell\n\"helloworld\"\n~~~\n\n`Alternative`,
  `MonadPlus`, `MonadError`, `MonadWriter`, etc. are all\nsupported.  And you can
  specify your logic, etc;, and your prompting can\ninvolve IO.  But your logic doesn't
  ever involve `IO` at all!\n\nHowever, the main advantage with this that lets you
  do things that a Monad\nTransformer can't is that your \"prompting function\" has
  access to the\nunderlying `Traversable` `t` as well, so you can communicate with
  the\nunderlying prompt using your \"prompt response\" function.\n\nWhich leads to
  the big finale --- environment variable loading!\n\n~~~haskell\nimport Control.Monad.Error.Class\nimport
  Control.Monad.Prompt\nimport Text.Read\nimport qualified Data.Map as M\n\ntype Key
  = String\ntype Val = String\n\ndata MyError = MENoParse Key Val\n             |
  MENotFound Key\n             deriving Show\n\npromptRead :: (MonadError MyError
  m, MonadPrompt Key Val m, Read b)\n           => Key -> m b\n-- promptRead :: Read
  b => Key -> PromptT Key Val (Either MyError) b\n-- promptRead :: Read b => Key ->
  ExceptT MyError (Prompt Key Val) b\npromptRead k = do\n    resp <- prompt k\n    case
  readMaybe resp of\n      Nothing -> throwError $ MEParse k resp\n      Just v  ->
  return v\n\npromptFoo3 :: MonadPrompt Key Val m => m Foo\n-- promptFoo3 :: Applicative
  t => PromptT Key Val t Foo\npromptFoo3 = Foo <$> prompt \"bar\" <*> promptRead \"baz\"\n\n--\n--
  running!\n\n-- Lookup environment variables, and \"throw\" an error if not found\nthroughEnv
  :: IO (Either MyError Foo)\nthroughEnv = runPromptTM parseFoo3 $ \\k -> do\n    env
  <- lookupEnv k\n    return $ case env of\n      Nothing -> Left (MENotFound k)\n
  \     Just v  -> Right v\n\n-- Fulfill the prompt through user input\nthroughStdIO
  :: IO (Either MyError Foo)\nthroughStdIO = interactPT parseFoo3\n\n-- Fulfill the
  prompt through user input; count blank responses as \"not found\"\nthroughStdIOBlankIsError
  :: IO (Either MyError Foo)\nthroughStdIOBlankIsError = runPromptTM parseFoo3 $ \\k
  -> do\n    putStrLn k\n    resp <- getLine\n    return $ if null resp\n      then
  Left (MENotFound k)\n      else Right resp\n\n-- Fulfill the prompt purely through
  a Map lookup\nthroughMap :: M.Map Key Val -> Either MyError Foo\nthroughMap m =
  runPromptT parseFoo3 $ \\k ->\n    case M.lookup k m of\n      Nothing -> Left (MENotFound
  k)\n      Just v  -> Right v\n~~~\n\nNote that for `throughEnv`, errors can come
  from both parsing errors and from\nthe deferred \"prompt response\" lookup function!\n\nComparisons\n-----------\n\nTo
  lay it all on the floor,\n\n~~~haskell\nnewtype PromptT a b t r = PromptT { runPromptTM
  :: forall m. Monad m => (a -> m (t b)) -> m (t r) }\n~~~\n\nThere is admittedly
  a popular misconception that I've seen going around that\nequates this sort of type
  to `Free` from the *free* package.  However, `Free`\ndoesn't really have anything
  significant to do with this.  Sure, you might be\nable to generate this type by
  using `FreeT` over a specifically chosen\nFunctor, but...this is the case for literally
  any Monad ever, so that doesn't\nreally mean much :)\n\nIt's also unrelated in this
  same manner to `Prompt` from the *MonadPrompt*\npackage, and `Program` from *operational*
  too.\n\nOne close relative to this type is `forall m. ReaderT (a -> m b) m r`, where\n`prompt
  k = ReaderT ($ k)`.  This is more or less equivalent to `Prompt`, but\nstill can't
  do the things that `PromptT` can do without a special instance of\nMonad.\n\nThis
  type is also similar in structure to `Bazaar`, from the *lens* package.\nThe biggest
  difference that makes `Bazaar` unusable is because the RankN\nconstraint is only
  `Applicative`, not `Monad`, so a `Monad` instance is\nimpossible.  Ignoring that
  (or if it's okay for you to only use the\n`Applicative` instance), `Bazaar` forces
  the \"prompting effect\" to take place\nin the same context as the `Traversable`
  `t`...which really defeats the\npurpose of this whole thing in the first place (the
  idea is to be able to\nseparate your prompting effect from your application logic).
  \ If the\n`Traversable` you want to transform has a \"monad transformer\" version,
  then\nyou can somewhat simulate `PromptT` for that specifc `t` with the transformer\nversion.\n\nIt's
  also somewhat similar to the `Client` type from *pipes*, but it's also a\nbit tricky
  to use that with a different effect type than the logic\n`Traversable`, as well...so
  it has a lot of the same difference as `Bazaar`\nhere.\n\nBut this type is common/simple
  enough that I'm sure someone has it somewhere\nin a library that I haven't been
  able to find.  If you find it, let me know!\n\nCopyright\n---------\n\nCopyright
  2015 Justin Le\n"
license-name: MIT
