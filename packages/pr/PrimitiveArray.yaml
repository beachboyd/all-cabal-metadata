homepage: https://github.com/choener/PrimitiveArray
changelog-type: markdown
hash: 4fd48350d025620926ef9a586f28f83d4a66e922d6f6192645362e7a7cf0aa2b
test-bench-deps:
  tasty-smallcheck: ! '>=0.8'
  tasty-th: ! '>=0.1'
  base: -any
  PrimitiveArray: -any
  smallcheck: -any
  containers: -any
  tasty-quickcheck: ! '>=0.8'
  tasty: ! '>=0.11'
  QuickCheck: -any
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient multidimensional arrays
changelog: ! "0.9.0.0\n-------\n\n- large-scale changes\n- associated data families
  for bounds\n\n0.8.1.0\n-------\n\n- inclusion of Upperlimit data family to simplify
  declaration of upper limits\n\n0.8.0.1\n-------\n\n- PointL delays inlining to phase
  0 for table filling. This is part of the\n  close-to-C optimization effort for linear
  languages.\n- disabling smallcheck until I fix how things are generated\n\n0.8.0.0\n-------\n\n-
  renamed Interface (Iter) to Boundary (Boundary)\n- Typeable instances for Dense
  primitive arrays\n- EdgeBoundary index structure\n- changes and fixes to quickcheck/smallcheck\n-
  added ScoreMatrix module with simple score and distance matrix structure\n  (requires
  log-domain)\n\n0.7.2.0\n-------\n\n- JSONKey (To/From) for index types.\n\n0.7.1.0\n-------\n\n-
  minor updates to dependencies\n- tasty framework\n- Subword/upper triangular indexing
  provided by DPutils\n\n0.7.0.1\n-------\n\n- Data.PrimitiveArray.Checked to capture
  index out-of-bounds problems\n\n0.7.0.0\n-------\n\n- vector <= 0.11 support; including
  compatibility layer\n- redesigned Index structures (for dealing with Inside/Outside/Complement)\n\n0.6.1.1\n-------\n\n-
  Hashable instances for all index structures\n- Hashable instances for Unboxed and
  Boxed arrays. *These require Hashable\n  instances for vectors, which are not available
  by default*\n\n0.6.1.0\n-------\n\n- OrderedBits < 0.0.1\n- travis.yml update\n\n0.6.0.0\n-------\n\n-
  moved primitive array classes to Data.PrimitiveArray.Class\n- added from / to lenses\n-
  Field1 .. Field6 lenses for indices (Z:.a:.b...) (with Z being Field0)\n  - lens
  stuff currently commented out; aiming to have an extra package [lens\n    is fairly
  heavy]\n- FillTables should work now (with PointL, Subword)\n- freezing of whole
  stacks of (Z:.mutarr:.mutarr:. ...) tables\n- explicit 'Shape Subword'; this allows
  for simpler code in a number of places\n  and is especially useful for CYK-style
  algorithms that have a\n  single-dimensional upper-triangular matrix.\n- rangeStream
  of Extshape is new and used by the FillTables module\n- Binary, Cereal, Aeson instances
  for indices and immutable tables\n- orphan instances of Binary, Cereal, Aeson for
  Z, and (:.)\n- topmostIndex returns the final index position for CYK-style (bottom
  to top)\n  parsing\n- removed Data.Array.Repa.Index.Point (we have PointL, PointR
  in Points.hs)\n- added   Data.Array.Repa.Index.Set (for sets with an interface,
  used by\n  Hamiltonian path problems)\n- Data.Array.Repa.Index.Outside is now just
  a newtype wrapped around other\n  Index types. We want to be able to say \"a Subword,
  but for Outside\n  algorithms\"\n- travis-ci integration\n\n0.5.4.0\n-------\n\n-
  actually implemented PointR\n\n- added the rather important strictness annotation
  for mutable arrays in .Zero\n\n0.5.3.0\n-------\n\n- fixed vector-th-unbox problem\n"
basic-deps:
  cereal: ! '>=0.4'
  bits: ! '>=0.4'
  base: ! '>=4.7 && <5.0'
  text: ! '>=1.0'
  smallcheck: ! '>=1.1'
  log-domain: ! '>=0.10'
  vector-binary-instances: ! '>=0.2'
  lens: ! '>=4.0'
  binary: ! '>=0.7'
  mtl: ! '>=2.0'
  hashable: ! '>=1.2'
  cereal-vector: ! '>=0.2'
  DPutils: ==0.0.2.*
  OrderedBits: ==0.0.1.*
  deepseq: ! '>=1.3'
  vector-th-unbox: ! '>=0.2'
  QuickCheck: ! '>=2.7'
  aeson: ! '>=0.8'
  primitive: ! '>=0.5.4'
  vector: ! '>=0.11'
all-versions:
- '0.0.2.1'
- '0.0.2.2'
- '0.0.3.0'
- '0.0.3.1'
- '0.0.4.0'
- '0.1.1.2'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.2.0'
- '0.5.3.0'
- '0.5.4.0'
- '0.6.0.0'
- '0.6.1.0'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.1.0'
- '0.8.0.0'
- '0.8.0.1'
- '0.9.0.0'
author: Christian Hoener zu Siederdissen, 2011-2018
latest: '0.9.0.0'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/choener/PrimitiveArray.svg?branch=master)](https://travis-ci.org/choener/PrimitiveArray)\n\n#
  PrimitiveArray\n\n[*generalized Algebraic Dynamic Programming Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\nPrimitiveArray
  provides operations on multi-dimensional arrays. Internally, the\nrepresentation
  is based on the vector library, while the multi-dimensional\nindexing follows repa.\n\nPrimitive
  arrays are designed to be used together with ADPfusion.\n\n\n\n#### Contact\n\nChristian
  Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de
  \ \nhttp://www.bioinf.uni-leipzig.de/~choener/  \n\n"
license-name: BSD3
