homepage: ''
changelog-type: markdown
hash: eadcc3353753e89c24d454f73baf0c0492152e0abeb4b685da5d3b04c7a034c7
test-bench-deps:
  base: -any
  filepath: -any
  process: -any
  pretty-ghci: -any
  prettyprinter: -any
  directory: -any
maintainer: alec.theriault@gmail.com
synopsis: Functionality for beautifying GHCi
changelog: |
  # Revision history for `pretty-ghci`

  ## 0.1.0.0 -- 2019-03-07

  * First version. Released on an unsuspecting world.
basic-deps:
  haddock-library: ^>=1.7
  base: ! '>=4.9 && <4.13'
  text: ^>=1.2
  pretty-ghci: -any
  array: ^>=0.5
  prettyprinter: ^>=1.2
  prettyprinter-ansi-terminal: ^>=1.1
all-versions:
- 0.1.0.0
author: Alec Theriault
latest: 0.1.0.0
description-type: markdown
description: |
  ### `pretty-ghci` [![Build Status][0]][1]

  This library will make your GHCi experience colourful in 3 steps:

    1. Install the executable globally with `cabal v2-install pretty-ghci`

    2. Modify your `~/.ghc/ghci.conf`

       ```haskell
       :set prompt      "Î»> "
       :set prompt-cont "|> "

       -- Typing `:pretty` will turn on the pretty-printing
       :set -package process
       :{
       :def pretty \_ -> pure $ unlines $
         [ ":{"
         , "let pprint x = System.Process.withCreateProcess cp' $ \\(Just i) _ _ ph -> do"
         , "        System.IO.hPutStrLn i (show x)"
         , "        System.IO.hClose i"
         , "        _ <- System.Process.waitForProcess ph"
         , "        pure ()"
         , "      where cp = System.Process.proc \"pp-ghci\" [\"--value\", \"--smarter-layout\"]"
         , "            cp' = cp{ System.Process.std_out = System.Process.Inherit"
         , "                    , System.Process.std_err = System.Process.Inherit"
         , "                    , System.Process.std_in  = System.Process.CreatePipe }"
         , ":}"
         , ":set -interactive-print pprint"
         ]
       :}

       -- Typing `:no-pretty` will turn off the pretty-printing
       :def no-pretty \_ -> pure (":set -interactive-print System.IO.print")

       -- Make things pretty by default!
       :pretty
       ```

    3. Enjoy!

  ## Advantages over existing alternatives

    * One stop-solution for formatting and coloring with a small dependency graph
    * Takes your terminal width into account during the layout step
    * Works for values whose `Show` instance don't produce valid Haskell (ex: `Show (->)`)
    * Handles unboxed literals (ex: `MyTriple 1# 2.0# "hello"#`)
    * Your output will be coloured according to its lexical structure even if parsing fails
    * Install one global executable, not one library per GHC version
    * Works in `cabal repl` (although you need to call `:pretty` once at the start)

  [0]: https://travis-ci.org/harpocrates/pretty-ghci.svg?branch=master
  [1]: https://travis-ci.org/harpocrates/pretty-ghci
license-name: BSD-3-Clause
