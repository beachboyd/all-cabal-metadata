homepage: https://github.com/haskell/primitive
changelog-type: markdown
hash: 97fe680ea7158dce999b54ea50865a10c5f907b4d416e6d88eb0f808f828cbdd
test-bench-deps:
  base: -any
  ghc-prim: -any
  primitive: -any
maintainer: libraries@haskell.org
synopsis: Primitive memory-related operations
changelog: ! "## Changes in version 0.6.3.0\n\n * Add `PrimMonad` instances for `ContT`,
  `AccumT`, and `SelectT` from\n   `transformers`\n\n * Add `Eq`, `Ord`, `Show`, and
  `IsList` instances for `ByteArray`\n\n * Add `Semigroup` instances for `Array` and
  `SmallArray`. This allows\n   `primitive` to build on GHC 8.4 and later.\n\n## Changes
  in version 0.6.2.0\n\n * Drop support for GHCs before 7.4\n\n * `SmallArray` support\n\n
  * `ArrayArray#` based support for more efficient arrays of unlifted pointer types\n\n
  * Make `Array` and the like instances of various classes for convenient use\n\n
  * Add `Prim` instances for Ptr and FunPtr\n\n * Add `ioToPrim`, `stToPrim` and unsafe
  counterparts for situations that would\n   otherwise require type ascriptions on
  `primToPrim`\n\n * Add `evalPrim`\n\n * Add `PrimBase` instance for `IdentityT`\n\n##
  Changes in version 0.6.1.0\n\n * Use more appropriate types in internal memset functions,
  which prevents\n   overflows/segfaults on 64-bit systems.\n\n * Fixed a warning
  on GHC 7.10\n\n * Worked around a -dcore-lint bug in GHC 7.6/7.7\n\n## Changes in
  version 0.6\n\n * Split PrimMonad into two classes to allow automatic lifting of
  primitive\n   operations into monad transformers. The `internal` operation has moved
  to the\n   `PrimBase` class.\n\n * Fixed the test suite on older GHCs\n\n## Changes
  in version 0.5.4.0\n\n * Changed primitive_ to work around an oddity with GHC's
  code generation\n   on certain versions that led to side effects not happening when
  used\n   in conjunction with certain very unsafe IO performers.\n\n * Allow primitive
  to build on GHC 7.9\n\n## Changes in version 0.5.3.0\n\n * Implement `cloneArray`
  and `cloneMutableArray` primitives\n   (with fall-back implementations for GHCs
  prior to version 7.2.1)\n\n## Changes in version 0.5.2.1\n\n * Add strict variants
  of `MutVar` modification functions\n   `atomicModifyMutVar'` and `modifyMutVar'`\n\n
  * Fix compilation on Solaris 10 with GNU C 3.4.3\n\n## Changes in version 0.5.1.0\n\n
  * Add support for GHC 7.7's new primitive `Bool` representation\n\n## Changes in
  version 0.5.0.1\n\n * Disable array copying primitives for GHC 7.6.* and earlier\n\n##
  Changes in version 0.5\n\n * New in `Data.Primitive.MutVar`: `atomicModifyMutVar`\n\n
  * Efficient block fill operations: `setByteArray`, `setAddr`\n\n## Changes in version
  0.4.1\n\n * New module `Data.Primitive.MutVar`\n\n## Changes in version 0.4.0.1\n\n
  * Critical bug fix in `fillByteArray`\n\n## Changes in version 0.4\n\n * Support
  for GHC 7.2 array copying primitives\n\n * New in `Data.Primitive.ByteArray`: `copyByteArray`,\n
  \  `copyMutableByteArray`, `moveByteArray`, `fillByteArray`\n\n * Deprecated in
  `Data.Primitive.ByteArray`: `memcpyByteArray`,\n   `memcpyByteArray'`, `memmoveByteArray`,
  `memsetByteArray`\n\n * New in `Data.Primitive.Array`: `copyArray`, `copyMutableByteArray`\n\n
  * New in `Data.Primitive.Addr`: `copyAddr`, `moveAddr`\n\n * Deprecated in `Data.Primitive.Addr`:
  `memcpyAddr`\n"
basic-deps:
  base: ! '>=4.5 && <4.12'
  ghc-prim: ! '>=0.2 && <0.6'
  transformers: ! '>=0.2 && <0.6'
all-versions:
- '0.1'
- '0.2'
- '0.2.1'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.5'
- '0.5.0.1'
- '0.5.1.0'
- '0.5.2.1'
- '0.5.3.0'
- '0.5.4.0'
- '0.6.1.0'
- '0.6.2.0'
- '0.6.3.0'
author: Roman Leshchinskiy <rl@cse.unsw.edu.au>
latest: '0.6.3.0'
description-type: haddock
description: This package provides various primitive memory-related operations.
license-name: BSD3
