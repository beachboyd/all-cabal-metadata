homepage: https://github.com/seereason/process-extras
changelog-type: text
hash: 4e79289131415796c181889c4a226ebab7fc3b0d27b164f65e1aad123ae9b9e3
test-bench-deps:
  process-extras: -any
  base: -any
  HUnit: -any
maintainer: David Fox <dsf@seereason.com>
synopsis: Process extras
changelog: ! "haskell-process-extras (0.7.1) unstable; urgency=low\n\n  * Add System.Process.Run,
  utilities and a monad for process progress\n    output.\n  * Rename ProcessOutput
  -> ProcessResult\n  * Add a ProcessText class to characterize the type written to\n
  \   standard input and read from standard output and error.\n  * Add an alias for
  readCreateProcess named readCreateProcessStrict\n  * Update README.md\n\n -- David
  Fox <dsf@foxthompson.net>  Mon, 05 Dec 2016 10:52:20 -0800\n\nhaskell-process-extras
  (0.5) unstable; urgency=low\n\n  * Have writeOutput return the input list rather
  than ()\n  * Additional re-exports from the process package\n\n -- David Fox <dsf@foxthompson.net>
  \ Mon, 21 Nov 2016 12:45:57 -0800\n\nhaskell-process-extras (0.4.1.4) unstable;
  urgency=low\n\n  * Add changelog and .ghci to Extra-Source-Files list.\n\n -- David
  Fox <dsf@seereason.com>  Sun, 15 May 2016 09:20:54 -0700\n\nhaskell-process-extras
  (0.4.1.3) unstable; urgency=low\n\n  * Actually check changelog into git.\n\n --
  David Fox <dsf@seereason.com>  Sun, 15 May 2016 09:00:03 -0700\n\nhaskell-process-extras
  (0.4) trusty-seereason; urgency=low\n\n  * Add changelog\n  * Wrap all the input
  processing with a catch resource vanished\n    exception.\n  * Add foldOutput and
  writeOutput, for handling Chunk streams.\n  * Add some examples in README.md.\n\n
  -- David Fox <dsf@seereason.com>  Sun, 15 May 2016 08:59:47 -0700\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.5 && <5'
  text: -any
  generic-deriving: ! '>=1.10'
  process: -any
  data-default: -any
  mtl: -any
  deepseq: ! '>=1.1'
  ListLike: ! '>=4.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2.0'
- '0.3.0'
- '0.3.0.1'
- '0.3.1'
- '0.3.3.1'
- '0.3.3.2'
- '0.3.3.3'
- '0.3.3.4'
- '0.3.3.5'
- '0.3.3.6'
- '0.3.3.7'
- '0.3.3.8'
- '0.3.4'
- '0.4'
- '0.4.1'
- '0.4.1.1'
- '0.4.1.3'
- '0.4.1.4'
- '0.7.1'
- '0.7.2'
- '0.7.3'
- '0.7.4'
author: David Lazar, Bas van Dijk, David Fox
latest: '0.7.4'
description-type: markdown
description: ! "# What is process-extras\n\nYou might want to use this package if\n
  * You want to read and write ByteStrings or Text to a process rather\n   than just
  Strings\n * You want to read output from a non-terminating process (e.g. yes(1))\n
  * You want more flexibility in process creation\n * You want various types of progress
  output from the process to the\n   console before capturing its output - indented
  and prefixed output,\n   reporting of the command that started the process, dots
  to reflect\n   the size of the process output, etc.\n\n# Contributing\n\nThis project
  is available on [GitHub](https://github.com/seereason/process-extras). You may contribute
  changes there.\n\nPlease report bugs and feature requests using the [GitHub issue
  tracker](https://github.com/seereason/process-extras/issues).\n\n# Examples:\n\nThe
  output type of the raw system process functions is ByteString.\nInstances of ListLikeProcessIO
  are provided to read as type String,\nText, Lazy Text, ByteString, or Lazy ByteString.
  \ Select by casting\nthe result, or by specifying the module containing the specialized\nfunction:\n\n
  \   > :m +System.Process.ListLike Data.ByteString Data.Text.Lazy\n    > readCreateProcess
  (shell \"echo 'λ'\") mempty :: IO (ExitCode, ByteString, ByteString)\n    (ExitSuccess,\"\\206\\187\\n\",\"\")\n
  \   > readCreateProcess (shell \"echo 'λ'\") mempty :: IO (ExitCode, Text, Text)\n
  \   (ExitSuccess,\"\\955\\n\",\"\")\n    > readCreateProcess (shell \"echo 'λ'\")
  mempty :: IO (ExitCode, String, String)\n    (ExitSuccess,\"\\955\\n\",\"\")\n    >
  readCreateProcess (shell \"yes | head -10\") mempty :: IO (ExitCode, Text, Text)\n
  \   (ExitSuccess,\"y\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\n\",\"\")\n\nAlthough
  the output *type* can be lazy, normal process functions still\nneed to read until
  EOF on the process output before returing anything.\nIf you have a process whose
  output never ends you can use the\nreadCreateProcessLazy function to read it.  Functions
  like readProcess\nwould block waiting for EOF on the process output:\n\n    > (Prelude.take
  4 <$> readCreateProcessLazy (proc \"yes\" []) mempty :: IO [Chunk Text]) >>= mapM_
  (putStrLn . show)\n    ProcessHandle <process>\n    Stdout \"y\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny\\ny
  ...\"\n    ...\n\nThe output type can be any instance of ProcessOutput, instances
  for\ntypes (ExitCode, a, a), [Chunk a], and (ExitCode, [Chunk a]) are\nprovided.
  \ [Chunk a] can be converted to any other instance of\nProcessOutput using collectOutput\n\n
  \   > (readCreateProcess (shell \"gzip -v < /proc/uptime\") mempty :: IO [Chunk
  ByteString]) >>= mapM_ (Prelude.putStrLn . show)\n    Stdout \"\\US\\139\\b\\NUL\\237\\136\\&7W\\NUL\\ETX345\\183\\&403\\215\\&31Q04267\\177\\&0\\177\\212\\&33\\225\\STX\\NUL_\\169\\142\\178\\ETB\\NUL\\NUL\\NUL\"\n
  \   Stderr \"gzip: stdin: file size changed while zipping\\n -8.7%\\n\"\n    Result
  ExitSuccess\n    > (readCreateProcess (shell \"uptime\") mempty :: IO [Chunk ByteString])
  >>= writeOutput\n     14:00:34 up 18 days,  7:16,  6 users,  load average: 0.04,
  0.10, 0.08\n    > collectOutput <$> (readCreateProcess (shell \"gzip -v < /proc/uptime\")
  mempty :: IO [Chunk ByteString]) :: IO (ExitCode, ByteString, ByteString)\n    (ExitSuccess,\"\\US\\139\\b\\NUL\\185\\137\\&7W\\NUL\\ETX345\\183\\&427\\212\\&33W0426731\\177\\208\\&35\\225\\STX\\NUL\\237\\192\\CAN\\224\\ETB\\NUL\\NUL\\NUL\",\"gzip:
  stdin: file size changed while zipping\\n -8.7%\\n\")\n    > collectOutput <$> (readCreateProcess
  (shell \"gzip -v < /proc/uptime\") mempty :: IO [Chunk ByteString]) :: IO (ExitCode,
  ByteString, ByteString)\n    (ExitSuccess,\"\\US\\139\\b\\NUL\\185\\137\\&7W\\NUL\\ETX345\\183\\&427\\212\\&33W0426731\\177\\208\\&35\\225\\STX\\NUL\\237\\192\\CAN\\224\\ETB\\NUL\\NUL\\NUL\",\"gzip:
  stdin: file size changed while zipping\\n -8.7%\\n\")\n    > (collectOutput . Prelude.filter
  (\\x -> case x of Stderr _ -> False; _ -> True)) <$> (readCreateProcess (shell \"gzip
  -v < /proc/uptime\") mempty :: IO [Chunk ByteString]) :: IO (ExitCode, ByteString,
  ByteString)\n    (ExitSuccess,\"\\US\\139\\b\\NUL<\\138\\&7W\\NUL\\ETX345\\183\\&410\\210\\&3\\176P04267713\\213\\&37\\224\\STX\\NULT\\142\\EOT\\165\\ETB\\NUL\\NUL\\NUL\",\"\")\n\nSome
  cases that need investigation:\n\n    > (readCreateProcess (shell \"gzip -v < /proc/uptime\")
  mempty :: IO [Chunk String]) >>= mapM_ (putStrLn . show)\n    *** Exception: fd:13:
  hGetContents: invalid argument (invalid byte sequence)\n    > (readCreateProcess
  (shell \"gzip -v < /proc/uptime\") mempty :: IO [Chunk Text]) >>= mapM_ (putStrLn
  . show)\n    *** Exception: fd:13: hClose: invalid argument (Bad file descriptor)\n"
license-name: MIT
