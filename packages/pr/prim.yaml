homepage: https://github.com/daig/prim#readme
changelog-type: markdown
hash: eaf3a2a7f81e5e1ed588d770e86218fd1292f5d9607c478a20a80ca948e246a9
test-bench-deps: {}
maintainer: dai@sodality.cc
synopsis: An ergonomic but conservative interface to ghc-prim
changelog: ''
basic-deps:
  ghc-prim: ^>=0.6.1
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Dai
latest: 0.1.0.3
description-type: markdown
description: "# PRIM\nThis library reorganizes `ghc-prim` in a sane but conservative
  way\n, without adding any fancy tricks like overloading or extra functions.\nIt's
  meant as a foundation for low-level programming in haskell, as well as (eventually),\na
  comprehensive home for documentation on ghc magic.\n\n# Module Structure\n\n  Modules
  live at the toplevel and do not consider the global package ecosystem, for modularity.\nIt
  is intended to use cabal mixins or PackageImports to appropriately avoid collisions
  downstream.\nModules are granular, intending to represent a particular usable component
  such as a single datatype or class.\nModules for internal types are nested under
  the module they group closest with,\nwhile modules for common types like Refs and
  Arrays are anti-nested with the root exposing their types.\n\n# Export Structure\n\n
  \ Types and constructors with the same name as the module, as well as all operators
  are meant to be imported unqualified.\nAll other identifiers are meant to be imported
  qualified. The common pattern is: \n\n```haskell\nimport Compact (Compact)\nimport
  Compact qualified\n"
license-name: MIT
