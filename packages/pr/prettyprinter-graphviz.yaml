homepage: https://github.com/georgefst/prettyprinter-graphviz
changelog-type: markdown
hash: 85eed22a58d26e0922b9b6c17f455945d8831171d10e0c0c33bcb11b15a3b678
test-bench-deps: {}
maintainer: georgefsthomas@gmail.com
synopsis: A prettyprinter backend for graphviz
changelog: |
  # Revision history for prettyprinter-graphviz

  ## 1.0.0.0 -- 2020-06-12

  * Simplify considerably by using helper functions from `prettyprinter`.

  ## 0.1.1.1 -- 2020-02-22

  * Fix bug causing graphviz to fall over if an annotation were applied to an empty string. This could easily occur in the case of a non-indented newline.

  ## 0.1.1.0 -- 2020-02-10

  * Include safe versions of functions.

  ## 0.1.0.0 -- 2020-01-16

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.11 && <5'
  text: ^>=1.2.3.1
  graphviz: ^>=2999.20.0.3
  prettyprinter: ^>=1.5.1 || ^>=1.6
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 1.0.0.0
- 1.0.0.1
author: George Thomas
latest: 1.0.0.1
description-type: markdown
description: |
  GraphViz pretty-printing
  ===================================

  Just some simple utility functions for hooking up the Haskell libraries [graphviz](https://hackage.haskell.org/package/graphviz) and [prettyprinter](https://hackage.haskell.org/package/prettyprinter).

  Given a [Doc](https://hackage.haskell.org/package/prettyprinter/docs/Data-Text-Prettyprint-Doc.html#t:Doc), you can use [render](https://hackage.haskell.org/package/prettyprinter-graphviz/docs/Data-Text-Prettyprint-Doc-Render-GraphViz.html#v:render) to transform it to a GraphViz [Label](https://hackage.haskell.org/package/graphviz/docs/Data-GraphViz-Attributes-Complete.html#t:Label). If you are using a different annotation type (eg. something more abstract), then you can define a mapping to GraphViz HTML attributes, and `fmap` it over your `Doc`.
license-name: BSD-3-Clause
