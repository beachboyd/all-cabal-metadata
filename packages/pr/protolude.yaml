homepage: https://github.com/sdiehl/protolude
changelog-type: markdown
hash: f45af2dbc19a8b86630c005cddf1d81bab46d0504babfdb59e6d0daf3e1256a0
test-bench-deps: {}
maintainer: stephen.m.diehl@gmail.com
synopsis: A small prelude.
changelog: ! "0.2.3\n=====\n\n* GHC 8.6.1 support\n* Expose `fromLeft` and `fromRight`.\n*
  Mask `always` and `alwaysSucceeds` from STM export for stm-2.5.\n\n0.2.2\n=====\n\n*
  Add explicit `witness` function for use as type witness without warnings.\n  Makes
  undefined semantically distinguishable from type witnesses.\n* Backwards compatible
  `Protolude.Safe` module for explicit handling of partial\n  list operations.\n*
  Export `minimumDef`, `maximumDef`.\n* Looser lower-bound on Data.Kind export for
  GHC 8.0.x.\n\n0.2.1\n====\n\n* Exposes `throwE` and `catchE`.\n* Add `transformers-compat`
  for old versions of transformers that require\n  `throwE`, `catchE`.\n* Fix `safe`
  version bounds for new versions.\n* Add `mapExceptT and `withExceptT`.\n* Export
  `scanl'` and provide shim for backwards compatability.\n* Add `putErrLn`.\n* Expose
  `RealFloat`.\n* Expose `GHC.Records` exports for GHC 8.2 and above.\n\n0.2\n====\n\n*
  Expose `Symbol` and `Nat` types from `GHC.TypeLits` by default.\n* Switch exported
  `(<>)` to be from `Data.Monoid` instead of Semigroup.\n* Expose `putByteString`
  and `putLByteString` monomorphic versions of `putStrLn` functions\n* Export `genericLength`
  and other generic list return functions.\n* Rename `msg` to `fatalErrorMessage`.\n*
  Export `ExceptT`, `ReaderT`, and `StateT` constructors.\n* Mask `displayException`
  from default exports.\n* Mask `stToIO` from default exports.\n* Export `NonEmpty`
  type and constructor for Base 4.9 only.\n* Export `Data.Semigroup` type and functions
  for Base 4.9 only.\n* Restrict exported symbols from ``async`` to set available
  in 2.0.\n* Add `(&&^)`, `(||^)`, `(<&&>)`, `(<||>)`\n* Expose `unzip`.\n* Export
  `maximumMay` and `minimumMay`.\n* Mask `Type` export from `Data.Kind`.\n* Wrap `die`
  to take `Text` argument instead of `[Char]`.\n* Export constructors `GHC.Generics`:
  `(:+:)`, `(:*:)`, and `(:.:)`.\n* Expose `StablePtr`, `IntPtr` and `WordPtr` types.\n\n0.1.9\n====\n\n*
  Make `sum` and `product` strict\n\n0.1.8\n=====\n\n* ``foreach`` for applicative
  traversals.\n* ``hush`` function for error handling.\n* ``tryIO`` function for error
  handling.\n* ``pass`` function for noop applicative branches.\n* Mask ``Handler``
  typeclass export.\n* Mask ``yield`` function export.\n\n0.1.7\n=====\n\n* Exports
  monadic ``(>>)`` operator by default.\n* Adds ``traceId`` and ``traceShowId`` functions.\n*
  Exports``reader`` and ``state``  functions by default.\n* Export lifted ``throwIO``
  and ``throwTo`` functions.\n\n0.1.6\n=====\n\n* Adds uncatchable panic exception
  throwing using Text message.\n* Removes ``printf``\n* Removes ``string-conv`` dependency
  so Stack build works without ``extra-deps``.\n* Brings ``Callstack`` machinery in
  for GHC 8.x.\n* Removes ``throw`` and ``assert`` from ``Control.Exception`` exports.\n*
  Removes ``unsafeShiftL`` and ``unsafeShiftR`` from ``Data.Bits`` exports.\n* Reexport
  ``throw`` as ``unsafeThrow`` via Unsafe module.\n* Hides all Show class functions.
  Only the Class itself is exported. Forbids custom instances that are not GHC derived.\n*
  Export`` encodeUtf8`` and ``decodeUtf8`` functions by default.\n* Adds ``unsnoc``
  function.\n\n0.1.5\n=====\n\n* Initial release.\n"
basic-deps:
  mtl-compat: ! '>=0.2 && <0.3'
  bytestring: ! '>=0.10 && <0.11'
  stm: ! '>=2.4 && <2.6'
  base: ! '>=4.6 && <4.13'
  text: ! '>=1.2 && <1.3'
  async: ! '>=2.0 && <2.3'
  array: ! '>=0.4 && <0.6'
  containers: ! '>=0.5 && <0.7'
  ghc-prim: ! '>=0.3 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  hashable: ! '>=1.2 && <1.3'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  transformers-compat: ! '>=0.4 && <0.7'
all-versions:
- 0.1.10
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
author: Stephen Diehl
latest: 0.2.3
description-type: markdown
description: ! "Protolude\n=========\n\n[![Build Status](https://travis-ci.org/sdiehl/protolude.svg?branch=master)](https://travis-ci.org/sdiehl/protolude)\n[![Hackage](https://img.shields.io/hackage/v/protolude.svg)](https://hackage.haskell.org/package/protolude)\n\nA
  sensible starting Prelude for building custom Preludes.\n\nDesign points:\n\n* Banishes
  String.\n* Banishes partial functions.\n* Compiler warning on bottoms.\n* Polymorphic
  string IO functions.\n* Polymorphic show.\n* Automatic string conversions.\n* Types
  for common data structures in scope.\n* Types for all common string types (Text/ByteString)
  in scope.\n* Banishes impure exception throwing outside of IO.\n* StateT/ReaderT/ExceptT
  transformers in scope by default.\n* Foldable / Traversable functions in scope by
  default.\n* Unsafe functions are prefixed with \"unsafe\" in separate module.\n*
  Compiler agnostic, GHC internal modules are abstracted out into Base.\n* ``sum``
  and ``product`` are strict by default.\n* Compatibility with GHC 8.0.\n* Includes
  Semiring for GHC >= 7.6.\n* Includes Bifunctor for GHC >= 7.6.\n* Includes Semigroup
  for GHC >= 7.6.\n\nSupports:\n\n * GHC 7.6.1\n * GHC 7.6.2\n * GHC 7.6.3\n * GHC
  7.8.1\n * GHC 7.8.2\n * GHC 7.8.3\n * GHC 7.8.4\n * GHC 7.10.1\n * GHC 7.10.2\n
  * GHC 7.10.3\n * GHC 8.0.1\n * GHC 8.0.2\n * GHC 8.2.1\n * GHC 8.4.1\n * GHC 8.6.1\n\nUsage\n-----\n\nTo
  try out standalone prelude at the interactive shell, from the Protolude\nproject
  directory run.\n\n```haskell\n$ stack exec ghci\n> import Protolude\n```\n\nSwapping
  out the old Prelude\n----------------------------\n\nDisable the built-in prelude
  at the top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude #-}\n```\n\nOr
  directly in your project cabal file:\n\n```haskell\ndefault-extensions: NoImplicitPrelude\n```\n\nThen
  in your modules:\n\n```haskell\nimport Protolude\n```\n\nExported Functions\n------------------\n\nThe
  list of exports is given in the [Symbols.md](./Symbols.md) file. Haddock\nunfortunately
  breaks in the presence of module reexports and is unable to render\ndocumentation.\n\nDependencies\n------------\n\nProtolude
  tries to be light on dependencies and only pulls in *essential*\nlibraries that
  are universally common across most real-world projects. Lower and\nupper bounds
  are fully specified and compatible with both vanilla Cabal and\ntracks Stack LTS
  resolver.\n\n| Dependencies        | Lower (>=) | Upper (<) |\n| -----------         |
  \  -------- |  -------- |\n| array               |        0.4 |       0.6 |\n| async
  \              |        2.0 |       2.3 |\n| base                |        4.6 |
  \     4.13 |\n| bytestring          |       0.10 |      0.11 |\n| containers          |
  \       0.5 |       0.7 |\n| deepseq             |        1.3 |       1.5 |\n| ghc-prim
  \           |        0.3 |       0.6 |\n| hashable            |        1.2 |       1.3
  |\n| mtl                 |        2.1 |       2.3 |\n| stm                 |        2.4
  |       2.6 |\n| text                |        1.2 |       1.3 |\n| transformers
  \       |        0.4 |       0.6 |\n|                     |            |           |\n\nStructure\n---------\n\nProtolude's
  main modules are the following:\n\n* [Protolude.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude.hs)\n*
  [Base.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Base.hs)\n*
  [Show.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Show.hs)\n*
  [Conv.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Conv.hs)\n\nFAQs\n----\n\n*
  **My ``putStrLn`` and ``putStr`` instances are no longer inferred in the presense\nof
  the ``-XOverloadedStrings`` extension?**\n\nBecause the print functions are polymorphic
  the type of the print functions may\nrequire annotations if the type is not fully
  specified by inference. To force a\nspecific type at the call site use either \n\n```haskell\nputText
  :: MonadIO m => T.Text -> m ()\nputLText :: MonadIO m => TL.Text -> m ()\n```\n\n*
  **How do I write manual Show instances if ``show`` isn't provided?**\n\nGenerally
  speaking writing manual instances of Show is a [Haskell antipattern](\nhttp://www.stephendiehl.com/posts/strings.html)
  because it produces\nlaw-violating instances of Show. You probably want to use a
  [pretty\nprinter](https://hackage.haskell.org/package/wl-pprint-text) library for
  custom\nprinting.\n\nIf backwards compatibility is needed then the base library
  can be imported\nmanually.\n\n```haskell\nimport GHC.Show (Show(..))\n```\n\nAutomatic
  deriving of ``Show`` for your types is still supported since the class\nis in scope
  by default.\n\n* **Partial functions like ``undefined`` and ``error`` raise compiler
  warnings on\n  usage.**\n\nThis is by design. For fatal uncatchable errors use the
  provided ``panic``\nfunction if you intend the program to immediately abort.\n\n```haskell\npanic
  \"Thus I die. Thus, thus, thus. Now I am dead\"\n```\n\nIf inside of IO simply use
  ``throwIO`` for exception handling, or if in pure\nbusiness logic use well-typed
  checked exceptions of the ``ExceptT`` variety.\n\n* **Why is ``id`` not in scope?**\n\nIt
  has been renamed to ``identity`` to reserve the ``id`` identifier for the\nmore
  common use case of business logic.\n\nLicense\n-------\n\nReleased under the MIT
  License.\nCopyright (c) 2016-2018, Stephen Diehl\n"
license-name: MIT
