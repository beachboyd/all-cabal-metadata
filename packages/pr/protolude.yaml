homepage: https://github.com/sdiehl/protolude
changelog-type: markdown
hash: 8bcf18da79be0832fccdd4cd5770e20baa4caec61c141d7119632a830b4096a9
test-bench-deps: {}
maintainer: stephen.m.diehl@gmail.com
synopsis: A small prelude.
changelog: |
  0.2.4
  =====

  * GHC 8.8.1 support

  0.2.3
  =====

  * GHC 8.6.1 support
  * Expose `fromLeft` and `fromRight`.
  * Mask `always` and `alwaysSucceeds` from STM export for stm-2.5.

  0.2.2
  =====

  * Add explicit `witness` function for use as type witness without warnings.
    Makes undefined semantically distinguishable from type witnesses.
  * Backwards compatible `Protolude.Safe` module for explicit handling of partial
    list operations.
  * Export `minimumDef`, `maximumDef`.
  * Looser lower-bound on Data.Kind export for GHC 8.0.x.

  0.2.1
  ====

  * Exposes `throwE` and `catchE`.
  * Add `transformers-compat` for old versions of transformers that require
    `throwE`, `catchE`.
  * Fix `safe` version bounds for new versions.
  * Add `mapExceptT and `withExceptT`.
  * Export `scanl'` and provide shim for backwards compatibility.
  * Add `putErrLn`.
  * Expose `RealFloat`.
  * Expose `GHC.Records` exports for GHC 8.2 and above.

  0.2
  ====

  * Expose `Symbol` and `Nat` types from `GHC.TypeLits` by default.
  * Switch exported `(<>)` to be from `Data.Monoid` instead of Semigroup.
  * Expose `putByteString` and `putLByteString` monomorphic versions of `putStrLn` functions
  * Export `genericLength` and other generic list return functions.
  * Rename `msg` to `fatalErrorMessage`.
  * Export `ExceptT`, `ReaderT`, and `StateT` constructors.
  * Mask `displayException` from default exports.
  * Mask `stToIO` from default exports.
  * Export `NonEmpty` type and constructor for Base 4.9 only.
  * Export `Data.Semigroup` type and functions for Base 4.9 only.
  * Restrict exported symbols from ``async`` to set available in 2.0.
  * Add `(&&^)`, `(||^)`, `(<&&>)`, `(<||>)`
  * Expose `unzip`.
  * Export `maximumMay` and `minimumMay`.
  * Mask `Type` export from `Data.Kind`.
  * Wrap `die` to take `Text` argument instead of `[Char]`.
  * Export constructors `GHC.Generics`: `(:+:)`, `(:*:)`, and `(:.:)`.
  * Expose `StablePtr`, `IntPtr` and `WordPtr` types.

  0.1.9
  ====

  * Make `sum` and `product` strict

  0.1.8
  =====

  * ``foreach`` for applicative traversals.
  * ``hush`` function for error handling.
  * ``tryIO`` function for error handling.
  * ``pass`` function for noop applicative branches.
  * Mask ``Handler`` typeclass export.
  * Mask ``yield`` function export.

  0.1.7
  =====

  * Exports monadic ``(>>)`` operator by default.
  * Adds ``traceId`` and ``traceShowId`` functions.
  * Exports``reader`` and ``state``  functions by default.
  * Export lifted ``throwIO`` and ``throwTo`` functions.

  0.1.6
  =====

  * Adds uncatchable panic exception throwing using Text message.
  * Removes ``printf``
  * Removes ``string-conv`` dependency so Stack build works without ``extra-deps``.
  * Brings ``Callstack`` machinery in for GHC 8.x.
  * Removes ``throw`` and ``assert`` from ``Control.Exception`` exports.
  * Removes ``unsafeShiftL`` and ``unsafeShiftR`` from ``Data.Bits`` exports.
  * Reexport ``throw`` as ``unsafeThrow`` via Unsafe module.
  * Hides all Show class functions. Only the Class itself is exported. Forbids custom instances that are not GHC derived.
  * Export`` encodeUtf8`` and ``decodeUtf8`` functions by default.
  * Adds ``unsnoc`` function.

  0.1.5
  =====

  * Initial release.
basic-deps:
  mtl-compat: ! '>=0.2 && <0.3'
  bytestring: ! '>=0.10 && <0.11'
  stm: ! '>=2.4 && <2.6'
  base: ! '>=4.6 && <4.14'
  text: ! '>=1.2 && <1.3'
  async: ! '>=2.0 && <2.3'
  array: ! '>=0.4 && <0.6'
  containers: ! '>=0.5 && <0.7'
  ghc-prim: ! '>=0.3 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  hashable: ! '>=1.2 && <1.4'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  transformers-compat: ! '>=0.4 && <0.7'
all-versions:
- 0.1.10
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Stephen Diehl
latest: 0.2.4
description-type: markdown
description: "Protolude\n=========\n\n[![Build Status](https://travis-ci.org/sdiehl/protolude.svg?branch=master)](https://travis-ci.org/sdiehl/protolude)\n[![Hackage](https://img.shields.io/hackage/v/protolude.svg)](https://hackage.haskell.org/package/protolude)\n\nA
  sensible starting Prelude for building custom Preludes.\n\nDesign points:\n\n* Banishes
  String.\n* Banishes partial functions.\n* Compiler warning on bottoms.\n* Polymorphic
  string IO functions.\n* Polymorphic show.\n* Automatic string conversions.\n* Types
  for common data structures in scope.\n* Types for all common string types (Text/ByteString)
  in scope.\n* Banishes impure exception throwing outside of IO.\n* StateT/ReaderT/ExceptT
  transformers in scope by default.\n* Foldable / Traversable functions in scope by
  default.\n* Unsafe functions are prefixed with \"unsafe\" in separate module.\n*
  Compiler agnostic, GHC internal modules are abstracted out into Base.\n* ``sum``
  and ``product`` are strict by default.\n* Compatibility with GHC 8.0.\n* Includes
  Semiring for GHC >= 7.6.\n* Includes Bifunctor for GHC >= 7.6.\n* Includes Semigroup
  for GHC >= 7.6.\n\nSupports:\n\n * GHC 7.6.1\n * GHC 7.6.2\n * GHC 7.6.3\n * GHC
  7.8.1\n * GHC 7.8.2\n * GHC 7.8.3\n * GHC 7.8.4\n * GHC 7.10.1\n * GHC 7.10.2\n
  * GHC 7.10.3\n * GHC 8.0.1\n * GHC 8.0.2\n * GHC 8.2.1\n * GHC 8.4.1\n * GHC 8.6.1\n
  * GHC 8.8.1\n\nUsage\n-----\n\nTo try out standalone prelude at the interactive
  shell, from the Protolude\nproject directory run.\n\n```haskell\n$ stack exec ghci\n>
  import Protolude\n```\n\nSwapping out the old Prelude\n----------------------------\n\nDisable
  the built-in prelude at the top of your file:\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude
  #-}\n```\n\nOr directly in your project cabal file:\n\n```haskell\ndefault-extensions:
  NoImplicitPrelude\n```\n\nThen in your modules:\n\n```haskell\nimport Protolude\n```\n\nExported
  Functions\n------------------\n\nThe list of exports can be browsed [here](http://hackage.haskell.org/package/protolude-0.2.3/docs/Protolude.html).\n\nDependencies\n------------\n\nProtolude
  tries to be light on dependencies and only pulls in *essential*\nlibraries that
  are universally common across most real-world projects. Lower and\nupper bounds
  are fully specified and compatible with both vanilla Cabal and\ntracks Stack LTS
  resolver.\n\n| Dependencies        | Lower (>=) | Upper (<) |\n| -----------         |
  \  -------- |  -------- |\n| array               |        0.4 |       0.6 |\n| async
  \              |        2.0 |       2.3 |\n| base                |        4.6 |
  \     4.13 |\n| bytestring          |       0.10 |      0.11 |\n| containers          |
  \       0.5 |       0.7 |\n| deepseq             |        1.3 |       1.5 |\n| ghc-prim
  \           |        0.3 |       0.6 |\n| hashable            |        1.2 |       1.3
  |\n| mtl                 |        2.1 |       2.3 |\n| stm                 |        2.4
  |       2.6 |\n| text                |        1.2 |       1.3 |\n| transformers
  \       |        0.4 |       0.6 |\n|                     |            |           |\n\nStructure\n---------\n\nProtolude's
  main modules are the following:\n\n* [Protolude.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude.hs)\n*
  [Base.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Base.hs)\n*
  [Show.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Show.hs)\n*
  [Conv.hs](https://github.com/sdiehl/protolude/blob/master/src/Protolude/Conv.hs)\n\nFAQs\n----\n\n*
  **My ``putStrLn`` and ``putStr`` instances are no longer inferred in the presense\nof
  the ``-XOverloadedStrings`` extension?**\n\nBecause the print functions are polymorphic
  the type of the print functions may\nrequire annotations if the type is not fully
  specified by inference. To force a\nspecific type at the call site use either \n\n```haskell\nputText
  :: MonadIO m => T.Text -> m ()\nputLText :: MonadIO m => TL.Text -> m ()\n```\n\n*
  **How do I write manual Show instances if ``show`` isn't provided?**\n\nGenerally
  speaking writing manual instances of Show is a [Haskell antipattern](\nhttp://www.stephendiehl.com/posts/strings.html)
  because it produces\nlaw-violating instances of Show. You probably want to use a
  [pretty\nprinter](https://hackage.haskell.org/package/wl-pprint-text) library for
  custom\nprinting.\n\nIf backwards compatibility is needed then the base library
  can be imported\nmanually.\n\n```haskell\nimport GHC.Show (Show(..))\n```\n\nAutomatic
  deriving of ``Show`` for your types is still supported since the class\nis in scope
  by default.\n\n* **Partial functions like ``undefined`` raise compiler warnings
  on\n  usage.**\n\nThis is by design. For fatal uncatchable errors use the provided
  ``panic``\nfunction if you intend the program to immediately abort.\n\n```haskell\npanic
  \"Thus I die. Thus, thus, thus. Now I am dead\"\n```\n\nIf inside of IO simply use
  ``throwIO`` for exception handling, or if in pure\nbusiness logic use well-typed
  checked exceptions of the ``ExceptT`` variety.\n\n* **Why is ``id`` not in scope?**\n\nIt
  has been renamed to ``identity`` to reserve the ``id`` identifier for the\nmore
  common use case of business logic.\n\nLicense\n-------\n\nReleased under the MIT
  License.\nCopyright (c) 2016-2019, Stephen Diehl\n"
license-name: MIT
