homepage: https://github.com/agentm/project-m36
changelog-type: markdown
hash: 10f0226a1256e7aa619792547bd2eb9442a9f91fc55a6008bf90311fed239ffb
test-bench-deps:
  either: -any
  bytestring: -any
  MonadRandom: -any
  haskeline: -any
  stm: -any
  Cabal: -any
  base: -any
  time: -any
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  http-api-data: -any
  megaparsec: -any
  list-t: -any
  filepath: -any
  criterion: -any
  network: -any
  websockets: -any
  conduit: -any
  semigroups: -any
  HUnit: -any
  path-pieces: -any
  containers: -any
  vector-binary-instances: -any
  cassava: -any
  deepseq-generics: -any
  binary: -any
  network-transport-tcp: -any
  data-interval: -any
  mtl: -any
  hashable: -any
  network-transport: -any
  hashable-time: -any
  project-m36: -any
  attoparsec: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  random: -any
  parallel: -any
  deepseq: -any
  gnuplot: -any
  stm-containers: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  directory: -any
maintainer: agentm@themactionfaction.com
synopsis: Relational Algebra Engine
changelog: ! "# 2018-08-10 (v0.5)\n\n* fix critical type bug which allowed unresolved
  types to be used\n* add full support for GHC 8.2 with stack or cabal (delayed for
  a long time by dependency version boundaries)\n* drop support for GHC 7.10\n* add
  support for `with (relexpr as name,...)` syntax for use as tutd macros\n* add `NonEmptyList`
  list data type\n\n# 2018-06-04 (v0.4)\n\n* add contributed feature to allow users
  to [create arbitrary relations](https://github.com/agentm/project-m36/blob/master/docs/tutd_tutorial.markdown#arbitrary-relation-variables)\n*
  fix type validation bug allowing concrete type with type variables in relations\n*
  improve usability of `Interval a` data type\n* allow `Integer` to be parsed as negative
  in `tutd` console\n* support precompiled (Haskell) [`AtomFunction`s](https://github.com/agentm/project-m36/blob/master/docs/atomfunctions.markdown#pre-compiled-atom-functions)
  and [`DatabaseContextFunction`s](https://github.com/agentm/project-m36/blob/master/docs/database_context_functions.markdown#loading-precompiled-modules)\n*
  make TutorialD scripts read from the filesystem unconditionally read as UTF-8\n*
  improve support for display of multibyte characters in `tutd` console, especially
  Chinese\n* fix file descriptor leak in file sychronization\n* improve reliability
  by allowing fast-forward commits when using `autoMergeToHead`\n* add [`semijoin`
  and `anitjoin`](https://github.com/agentm/project-m36/blob/master/docs/tutd_tutorial.markdown#join)
  support to `tutd`\n* added various new static optimizations\n\n# 2017-11-14\n\n*
  alter websocket server API to allow for multiple representations (JSON, text, or
  HTML) to be selected and returned simultaneously\n* add jupyter kernel for TutorialD
  interpreter\n* fix warnings suggested by new hlint 2.0.10\t\n\t\n# 2017-10-08 (v0.3)\n\n*
  replaced overuse of `undefined` with `Proxy` in `Tupleable` and `Atomable` typeclasses\n*
  allow notifications to return query results from before *and* after the commit which
  triggered the notification\n* alert users in `tutd` console before a transaction
  graph expression is evaluated which would throw out their changes\n* drastically-improved
  CSV import/export now supports all possible types except `RelationAtom`\n* fix serious
  file handle leaks when using on-disk persistence\n* fix case where invalid number
  of arguments to `ConstructedAtom` did not result in an error\n* add support for
  `IntegerAtom` (previously, only `IntAtom` was supported)\n\n# 2017-09-16 (v0.2)\n\n*
  a new [simple client API](https://github.com/agentm/project-m36/blob/master/docs/simple_api.markdown)
  with a monadic transaction manager\n* complete hlint compliance\n* the generics-based
  [Tupleable typeclass](\thttps://github.com/agentm/project-m36/blob/master/docs/tupleable.markdown\n)
  which makes it easy to marshal Haskell data types to-and-from the database\n* timestamps
  attached to transactions to allow specific point-in-time travel\n* autoMergeToHead,
  a variant of commit which attempts to merge and commit to the latest head transaction
  to reduce incidents of TransactionNotAHeadErrors\n* interval data types\n* transaction
  dirtiness detection which allows the client to determine if an update expression
  actually changed the database state\n\n# 2017-08-01\n\n## autoMergeToHead\n\nIn
  preparation for the simpler monad client API, ProjectM36.Client now includes a server-side
  merge for new transactions called \"[automerge](https://github.com/agentm/project-m36/issues/33)\".
  This feature should reduce head contention in cases where new transactions can be
  simply merged to the head without additional processing. The trade-off is reduced
  ```TransactionIsNotAHeadError```s but an increased chance of merge errors. The feature
  operates similarly to a server-side git rebase.\n\n## critical bug in merging\n\nSuccessfully
  merged transactions did not have their constraints validated. Fixed.\n\n# 2017-06-12\n\n##
  add file locking\n\nThis [feature](#102) allows Project:M36 database directories
  to be shared amongst multiple Project:M36 processes. This is similar to how SQLite
  operates except that the remote server mode supports the feature as well. This could
  allow, for example, multi-master, file-based replication across Windows shares or
  NFS.\n\n[Documentation](/docs/replication.markdown)\n\n# 2016-11-30\n\n## add functional
  dependency macro\n\nDate demonstrates two ways to implement functional dependencies
  as constraints on page 21 in \"Database Design and Relational Theory\". A similar
  macros is now implemented in the tutd interpreter.\n\n```funcdep sname_status (sname)
  -> (status) s```\n\n[Documentation](/docs/tutd_tutorial.markdown#functional-dependencies)\n\n#
  2016-09-07\n\n## add TransGraphRelationalExpr\n\nThe TransGraphRelationalExpr allows
  queries against all past states of the database.\n\nThe following example executes
  a query against two different committed transactions using syntax similar to that
  of git for graph traversal:\n```:showtransgraphexpr s@master~ join sp@master```\n\n[Documentation](/docs/transgraphrelationalexpr.markdown)\n"
basic-deps:
  exceptions: -any
  ghc: ! '>=7.8 && <8.3'
  either: -any
  bytestring: -any
  MonadRandom: -any
  unix: -any
  haskeline: -any
  stm: -any
  Cabal: -any
  base: ! '>=4.8 && <5.0'
  time: -any
  distributed-process: ! '>=0.7.2'
  base64-bytestring: -any
  unordered-containers: -any
  text: -any
  uuid: ! '>=1.3.12'
  http-api-data: -any
  megaparsec: ! '>=5.2.0 && <7'
  list-t: -any
  filepath: -any
  websockets: -any
  conduit: -any
  semigroups: -any
  HUnit: -any
  path-pieces: -any
  random-shuffle: -any
  distributed-process-client-server: ! '>=0.2.3'
  distributed-process-extras: ! '>=0.3.2'
  containers: -any
  vector-binary-instances: -any
  deferred-folds: -any
  cassava: ! '>=0.4.5.1 && <0.6'
  deepseq-generics: -any
  ghc-paths: -any
  ghc-boot: -any
  binary: -any
  cryptohash-sha256: -any
  monad-parallel: -any
  network-transport-tcp: ! '>=0.6.0'
  old-locale: -any
  data-interval: -any
  zlib: -any
  mtl: -any
  foldl: -any
  ghci: -any
  hashable: -any
  blaze-html: -any
  network-transport: -any
  hashable-time: -any
  project-m36: -any
  rset: -any
  attoparsec: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  random: -any
  parallel: -any
  deepseq: -any
  extended-reals: -any
  gnuplot: -any
  QuickCheck: -any
  stm-containers: ! '>=1.0.0'
  resourcet: -any
  scotty: -any
  http-types: -any
  Glob: -any
  aeson: ! '>=1.1'
  distributed-process-async: ! '>=0.2.4.1'
  template-haskell: -any
  vector: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
author: AgentM
latest: '0.5'
description-type: markdown
description: ! '# Îž Project:M36 Relational Algebra Engine


  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)](https://www.haskell.org)

  [![Public Domain](https://img.shields.io/badge/license-Public%20Domain-brightgreen.svg)](http://unlicense.org)

  [![Hackage](https://img.shields.io/hackage/v/project-m36.svg)](http://hackage.haskell.org/package/project-m36)

  [![Hackage dependency status](https://img.shields.io/hackage-deps/v/project-m36.svg)](http://packdeps.haskellers.com/feed?needle=project-m36)

  [![Build status](https://travis-ci.org/agentm/project-m36.svg?branch=master)](https://travis-ci.org/agentm/project-m36)

  [![Windows Build status](https://ci.appveyor.com/api/projects/status/q7jyddd6dy1ibqdo/branch/master?svg=true)](https://ci.appveyor.com/project/agentm/project-m36)



  *Software can always be made faster, but rarely can it be made more correct.*


  ## Introduction


  Project:M36 implements a relational algebra engine as inspired by the writings of
  Chris Date.


  ## Description


  Unlike most database management systems (DBMS), Project:M36 is opinionated software
  which adheres strictly to the mathematics of the relational algebra. The purpose
  of this adherence is to prove that software which implements mathematically-sound
  design principles reaps benefits in the form of code clarity, consistency, performance,
  and future-proofing.


  Project:M36 can be used as an in-process or remote DBMS.


  Project:M36 is written entirely in the [Haskell programming language](https://www.haskell.org/).


  ## Sample Session


  [![asciicast](https://asciinema.org/a/3syu35c8cydm403292a74l1n5.png)](https://asciinema.org/a/3syu35c8cydm403292a74l1n5)


  ## Try It!


  You can experiment instantly with Project:M36 straight from your browser at [try.project-m36.io](https://try.project-m36.io)!


  ## Use-Cases


  Project:M36 supports multiple frontends which target different audiences.


  * learn about the relational algebra via TutorialD

  * store and manipulate databases

  * use Project:M36 as a native Haskell database backend


  ## Community


  * [Developer''s Blog](https://agentm.github.io/project-m36/)

  * [Mailing List/Discussion Group](https://groups.google.com/d/forum/project-m36)

  * IRC Channel: chat.freenode.net #project-m36

  * [Hackage](https://hackage.haskell.org/package/project-m36)

  * [Diogo Biazus'' Project:M36 Video Tutorial](https://www.youtube.com/watch?v=_GC_lxlVEnE)


  ## Documentation


  ### Introductory Materials


  1. [Installation and Introduction to Project:M36](docs/introduction_to_projectm36.markdown)

  1. [Introduction to the Relational Algebra](docs/introduction_to_the_relational_algebra.markdown)

  1. [TutorialD via Jupyter Notebook Walkthrough](jupyter/TutorialD%20Notebook%20Walkthrough.ipynb)

  1. [TutorialD Tutorial](docs/tutd_tutorial.markdown)

  1. [15 Minute Tutorial](docs/15_minute_tutorial.markdown)

  1. [Developer''s Change Log](Changelog.markdown)

  1. [Simple Client API](docs/simple_api.markdown)


  ### Database Comparisons


  1. [ACID Database Properties](docs/acid_assessment.markdown)

  1. [On NULL (in SQL)](docs/on_null.markdown)

  1. [Reaching "Out of the Tarpit" with Project:M36](docs/reaching_out_of_the_tarpit.markdown)


  ### Advanced Features


  1. [Transaction Graph Operators](docs/transaction_graph_operators.markdown)

  1. [ProjectM36.Client Library](docs/projectm36_client_library.markdown)

  1. [Adding New Data Types](docs/new_datatypes.markdown)

  1. [Database-Manipulating Functions](docs/database_context_functions.markdown)

  1. [Serving Remote ProjectM36 Databases](docs/server_mode.markdown)

  1. [Using Notifications](docs/using_notifications.markdown)

  1. [Merge Transactions](docs/merge_transactions.markdown)

  1. [Atom (Value) Functions](docs/atomfunctions.markdown)

  1. [Trans-Graph Relational Expressions](docs/transgraphrelationalexpr.markdown)

  1. [Isomorphic Schemas](docs/isomorphic_schemas.markdown)

  1. [Replication](docs/replication.markdown)

  1. [Basic Operator Benchmarks](https://rawgit.com/agentm/project-m36/master/docs/basic_benchmarks.html)


  ### Integrations


  1. [WebSocket Server](docs/websocket_server.markdown)

  1. [Jupyter Notebook Kernel](docs/jupyter_kernel.markdown)


  ## Development


  Project:M36 is developed in Haskell and compiled with GHC 8.0.2 or later.


  ## Related Projects


  * [The Third Manifesto](http://thethirdmanifesto.com/): the philosophical basis
  for relational algebra engines

  * [Rel](http://reldb.org/): a TutorialD implementation against a BerkeleyDB backend

  * [Andl](http://andl.org/): a new database language with SQLite and PostgreSQL backends

  * [Coddie](https://github.com/scvalencia/Coddie): a python-based relational algebra
  interpreter


  ## Suggested Reading


  * [Out of the Tarpit](https://github.com/papers-we-love/papers-we-love/blob/2eb8d21/design/out-of-the-tar-pit.pdf):
  a proposed software architecture which minimizes state and complexity. Project:M36
  implements the requirements of this paper.

  * [Database Design & Relational Theory: Normal Forms and All That Jazz](http://shop.oreilly.com/product/0636920025276.do):
  mathematical foundations for the principles of the relational algebra

  * [Database Explorations: Essays on the Third Manifesto and Related Topics](http://bookstore.trafford.com/Products/SKU-000177853/Database-Explorations.aspx):
  additional essays and debates on practical approaches to relational algebra engine
  design

'
license-name: LicenseRefPublicDomain
