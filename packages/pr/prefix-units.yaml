homepage: https://github.com/iustin/prefix-units
changelog-type: markdown
hash: 1f982a1c560cec0e9dec15db7ead90d8987253a22026e0571977631527e7e9d4
test-bench-deps:
  test-framework-hunit: ! '>=0.2.7'
  test-framework: ! '>=0.6'
  Cabal: ! '>=1.9.2'
  base: ! '>=3'
  prefix-units: -any
  test-framework-quickcheck2: ! '>=0.2.12'
  HUnit: ! '>=1.2.4'
  QuickCheck: ! '>=2.4.2'
maintainer: Iustin Pop <iustin@google.com>
synopsis: A basic library for SI/binary prefix units
changelog: ! "Version 0.2.0\n\n* Incompatible API change to cleanup some initial design
  decisions:\n  the two level `FormatOption`/`FormatMode` model is removed, the\n
  \ fixed unit of `FormatOption` is moved to a new constructor\n  `FormatMode`, and
  `FormatOption` is removed entirely. This should be\n  a simpler API, at the cost
  of breaking compatibility.\n* Fixed issue #3 (No support for negative numbers).\n*
  Worked around issue #1 (Add 'base' unit) by adding a mode that\n  disables scaling;
  it should have the same effect without introducing\n  an artificial unit.\n\nVersion
  0.1.0.2\n\n* Trivial release for compatibility with QuickCheck 2.7 and older\n  HUnit
  packages as found in Wheezy.\n* The release switches the test suite to use Cabal
  macros, which might\n  create issues in some cases.\n* Fixed issue #2 (Wrong formatting
  for small numbers in SI mode).\n\nVersion 0.1.0.1\n\n* Trivial release updating
  upper package bounds (for testing),\n  updating homepage/related settings as part
  of move to github, and\n  fixing a few documentation issues.\n\nVersion 0.1.0\n\n*
  Initial release.\n"
basic-deps:
  base: ! '>=3 && <5'
all-versions:
- 0.1.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0
author: Iustin Pop <iustin@google.com>
latest: 0.2.0
description-type: markdown
description: ! "prefix-units package\n====================\n\nThis package defines
  a datatype (`Unit`) and associated\nparsing/formatting functions so that command
  line applications can\nhandle \"nice\" values like:\n\n    $ cmd create-file foo
  100G\n    Done.\n    $ cmd ls-file foo\n    Size is 100Gi\n    $ cmd ls-files\n
  \   foo 100Gi\n    bar  14Ki\n\nAnd so on. For details on the API, look at the Haddock
  documentation\nfor the `Data.Prefix.Units` module.\n\nFor building and installing,
  `cabal configure` and related commands\nare enough. Run `cabal configure --enable-tests
  && cabal build &&\ncabal test` if you want to run the unit-tests.\n\nThe library
  is designed to have very few dependencies (only base and a\nfew GHC extensions),
  so that it's trivial to use it in projects. Hence\nthe use of some hand-coded conversions
  instead of using\nTemplateHaskell to generate them automatically.\n\nTODO\n----\n\nThe
  current interface of the library works, but is not nicely\ncomposable. I'm still
  looking for a nicer way to expose the parsing\nfunctionality.\n\nCurrently, the
  binary and SI units are mixed in the same\ndata-type. This works, but at some level
  I think two separate types\nwould be more \"correct\", at the expense of a more
  complex API.\n\nThe RationalConvertible type class has only a few instances; ideally\nwe'd
  have `instance Integral a => RationalConvertible a` and similar\nfor `Fractional`,
  but this doesn't work as such in Haskell, so we're\nstuck with the manual derivation.\n\nThe
  current behaviour is case-sensitive for all units in `ParseExact`\nmode, which means
  that one has to use (in this mode) `Ki` for the\nbinary unit `Kibi`. This seems
  suboptimal, since the binary units are\nunique irrespective of casing.\n"
license-name: BSD-3-Clause
