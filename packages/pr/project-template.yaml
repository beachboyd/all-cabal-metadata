homepage: https://github.com/fpco/haskell-ide
changelog-type: markdown
hash: d47377695425b048f1670fcf9d64c165901cff68402993aec3b22c8ee4a64a38
test-bench-deps:
  bytestring: -any
  base: -any
  base64-bytestring: -any
  hspec: ! '>=1.3'
  text: -any
  project-template: -any
  conduit: -any
  containers: -any
  transformers: -any
  QuickCheck: -any
  resourcet: -any
maintainer: michael@fpcomplete.com
synopsis: Specify Haskell project templates and generate files
changelog: ! '## 0.2.0.1


  * Use `throwM` instead of `monadThrow`

  * Support for conduit 1.3.0


  ## 0.2.0


  * Drop system-filepath

'
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4 && <5'
  base64-bytestring: -any
  text: ! '>=0.11'
  filepath: -any
  conduit: ! '>=1.2.8 && <1.4'
  conduit-extra: -any
  containers: -any
  mtl: ! '>=2.0'
  transformers: ! '>=0.2'
  resourcet: ! '>=0.4.3'
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.3.2
- 0.1.4
- 0.1.4.1
- 0.1.4.2
- 0.2.0
- 0.2.0.1
author: Michael Snoyman
latest: 0.2.0.1
description-type: markdown
description: ! "Copy of the announcment blog post:\n\n* * *\n\nIn my [last blog\npost](http://www.yesodweb.com/blog/2012/09/building-haskell-ide),
  I discussed\none aspect of my work with FP Complete: the goal of creating a Haskell
  IDE.\nSince then, I've gotten lots of incredible feedback from the community, and
  in\nparticular have been in email discussion with some of the major players in the\nHaskell
  IDE scene. I think it's safe to say that we all agree that there's\ngoing to be
  a large amount of overlap in our efforts, and we will be\ncoordinating to try and
  minimize duplicated work as much as possible, while\nstill providing for the unique
  goals of each IDE project.\n\nIn response to all this, I've created a [Wiki on\nGithub](https://github.com/fpco/haskell-ide/wiki)
  to keep track of our goals,\nand a [Haskell IDE Google Group](https://groups.google.com/d/forum/haskell-ide)\nfor
  discussion. I strongly recommend joining if you're interested in any more\nsophisticated
  Haskell code editing tools.\n\nWe have a lot of topics to cover, and a single blog
  post won't be nearly enough\nto even scratch the surface. For now, I'd like to focus
  on one specific\nfeature. I haven't chosen to start here because it's the most important\nfeature,
  but because I think it's a problem that we can solve relatively easily\nand thoroughly.\n\n##
  Project Templates\n\nMost (all?) IDEs provide the concept of a project template:
  instead of writing\nall of the code for a project from scratch, you select a template,
  answer a few\nquestions, and a bunch of files are automatically generated. We already
  have\nthis in the Haskell world: Yesod provides the project scaffolded (via the\n`yesod
  init` command), and I believe Snap provides something like this as well.\nBut these
  are just two examples. I'm sure we could easily come up with a dozen\nother possible
  templates: a GTK+ application, a web services client, or a\nconsole app.\n\nCurrently,
  there's no standard for how this should work in the Haskell world\nor, to my knowledge,
  in the non-Haskell world either. (If there is, please let\nme know, I'd like to
  be able to build on existing work.) The Yesod scaffolding (and\nSnap's I believe)
  are both generated via specialized command line tools. I'm\nsure each IDE would
  be fully capable of building wrappers for for two tools,\nbut that quickly becomes
  an existential complexity issue. It also makes it much\nmore difficult for someone
  to start providing a new scaffolding. I know we\nsuffer from this already in the
  Yesod world, where innovation is definitely\nstifled by having the One True Blessed
  Scaffolding.\n\nSo here are my goals for the ideal templating system:\n\n*   A single
  file to represent a template. This can be some kind of archive (ZIP\n    file, tarball,
  etc), I don't really care, but single file systems simplify\n    things greatly.\n\n*
  \  Provide a Haskell library for both generating and consuming these\n    templates.
  We can have a command line tool as a wrapper around the library,\n    but the library
  should be the primary means of interacting. (You'll see this as\n    a pattern as
  I talk more about the IDE world.)\n\n*   Build on top of commonly used formats as
  much as possible. The reasoning\n    here is that, even though we'll be providing
  a canonical Haskell library,\n    not all IDEs are written in Haskell (yet). If
  someone is writing an IDE in\n    Python and wants to provide Haskell support, we
  should make it as easy as\n    possible.\n\n    *   By the way, it's worth pointing
  out that, as described, there's nothing\n        Haskell-centric about my proposal
  here. I've been going in the\n        direction of creating language-agnostic tools
  and formats as much as possible\n        (e.g., [`keter`](http://hackage.haskell.org/package/keter),
  which can host web\n        apps written in *any* language).\n\n*   I'm guessing
  that the most common way that people will want to actually\n    provide a template
  is as a Git(hub)/Darcs repo. It would be great if we\n    could provide a web service
  that takes a repo and automatically generates a\n    template file. Then users of
  an IDE could theoretically just type in a repo URL\n    to some text box and automatically
  get the most recent code available.\n\n*   Similarly, we should provide a simple
  command-line tool that takes a folder\n    and generates a template file.\n\n##
  A semi-concrete proposal\n\nAs many of you know, I normally prefer to discuss actual
  working code/ideas\nthan to discuss theoretical ideas. In this case, however, I
  think it's worth\nfleshing out the idea a bit before jumping in and implementing
  something. So\nI'm going to lay out my proposal here, and ask for everyone's input
  and\nrecommendations before we start implementation. I recommend the discussion
  be\ntargeted at the [Haskell IDE Google\nGroup](https://groups.google.com/d/forum/haskell-ide)
  as much as possible.\n\nFor file format: let's use JSON. I'm not worried about file
  size: these project\ntemplate files will likely be transferred over HTTP most of
  the time, and\ncompression can be performed at that level. As for binary files,
  we'll\nbase64-encode the contents.\n\nThe JSON file needs to have three sections:\n\n1.
  \ Metadata describing the project template itself. This would be the name of\n    the
  template, a description, author, homepage, and maybe a version.\n    (Version could
  be automatically generated as the date it was created.) This is\n    all pretty
  boring.\n\n2.  Data that needs to be collected from the user. In the Yesod scaffolding,
  we\n    ask for the user's name, the project name, and the database backend to use.\n
  \   The first two are (mostly) free-form text, while the third is an enumeration.
  I\n    think we'll need to support a few basic datatypes:\n\n    * Text, with a
  regex for validation.\n    * Booleans\n    * Enumerations\n\n    We can also allow
  default values. So to model the Yesod scaffolding,\n    perhaps something like this:\n\n
  \   ~~~json\n    {\"user-fields\":\n        [ {\"name\":\"user-name\",\"type\":\"text\",\"validation\":\".+\",\"description\":\"Your
  name\"}\n        , {\"name\":\"project-name\",\"type\":\"text\",\"validation\":\"[\\w_]+\",\"description\":\"Name
  of your project\"}\n        , {\"name\":\"database-backend\",\"type\":\"enumerator\",\"choices\":\n
  \           [{\"display\":\"MySQL\",\"value\":\"mysql\"},{\"display\":\"MongoDB\",\"value\":\"mongodb\"}],\n
  \           \"description\":\"Name of your project\"}\n        ]}\n    ~~~\n\n3.
  \ The files that will be generated. We need to take into account some issues:\n\n
  \   1. Some files will be generated conditionally based on the input from the user.\n
  \   2. Some of the files will be named based on the user input (e.g., the name of
  the `cabal` file).\n    3. The actual contents of the file will depend on the user
  input (e.g., the *contents* of the `cabal` file).\n    4. We want to support both
  textual and binary files. Binary files need not have any conditional aspect to them.\n\n
  \   For the first issue, we'll need to have a basic expression language. I\n    think
  equality, inequality, and, or, parantheses and variables should be\n    sufficient.
  So to say that the file `config/postgres.yml` should only be\n    generated if the
  database backend is postgresql, we could have something like:\n\n    ~~~json\n    {\"filename\":\"config/postgres.yml\",\n
  \    \"contents\":\"We'll discuss this in a moment...\",\n     \"condition\":\"database-backend
  == 'postgresql'\"\n    }\n    ~~~\n\n    For the conditional file naming, how about
  something like this:\n\n    ~~~json\n    {\"filename\":[{\"variable\":\"project-name\"},{\"content\":\".cabal\"}],\n
  \    \"contents\":\"...\"\n    }\n    ~~~\n\n    In order to solve the third point,
  we'll use a combination of what we've established for points 1 and 2:\n\n    ~~~json\n
  \   {\"filename\":[{\"variable\":\"project-name\"},{\"content\":\".cabal\"}],\n
  \    \"contents\":\n        [ {\"content\":\"name: \"},\n          {\"variable\":\"project-name\"},\n
  \         {\"content\":\"...build-depends:...\"},\n          {\"content\":\"\\n
  \    , postgresql-simple >= 0.3 && < 0.4\",\"condition\":\"database-backend == 'postgresql'\"}\n
  \       ]\n    }\n    ~~~\n\n    The last one is easiest to solve: each file can
  have a field `encoding` which is either \"text\" or \"base64\".\n\n    ~~~json\n
  \   {\"filename\":\"some-image.png\",\n     \"contents\":\"DEADBEEF\",\n     \"encoding\":\"base64\"\n
  \   }\n    ~~~\n\nOnce we have the file format figured out, the library is relatively
  simple. Let's describe a simple consumption API:\n\n~~~haskell\ndata CodeTemplate\ninstance
  FromJSON CodeTemplate\n\ndata UserInputType = UIText (Maybe Regex) | UIEnumeration
  [(Text, Text)] | UIBool\ndata UserInput = UserInput\n    { uiType :: UserInputType\n
  \   , uiName :: Text\n    , uiDescription :: Text\n    }\n\nuserInputs :: CodeTemplate
  -> [UserInput]\ngenerateFiles :: CodeTemplate -> Map Text Text -> Map FilePath LByteString\n~~~\n\nSetting
  up a generation API for dealing with completely static files should be\nsimple.
  It will be a bit more involved to deal with conditionals, but with\nproperly defined
  ADTs it shouldn't be too bad.\n\n## Next steps\n\nI think the most important next
  step is to determine what use cases my proposal\ndoesn't cover. The file creating
  code specifically doesn't allow many common\ntext generation techniques, like looping,
  as I simply see no use case for it,\nbut perhaps I'm mistaken. I'm also curious
  to hear what other ideas people have\nfor project templates.\n\n"
license-name: BSD-3-Clause
