homepage: https://github.com/cdepillabout/pretty-simple
changelog-type: markdown
hash: 9c77030d8fd305a4910e2c1418f4c6dd2b5af169dc55c1898cf6d541f3f38849
test-bench-deps:
  base: -any
  criterion: -any
  doctest: -any
  pretty-simple: -any
  Glob: -any
maintainer: cdep.illabout@gmail.com
synopsis: pretty printer for data types with a 'Show' instance.
changelog: ! "\n## 2.1.0.0\n\n*   Make strings have indentation by default when pretty-printed.
  \ See\n    [#26](https://github.com/cdepillabout/pretty-simple/pull/26).  Thanks\n
  \   [Milan](https://github.com/Wizek)!\n\n## 2.0.2.1\n\n*   Add a small command-line
  program that will pretty print anything from stdin\n    called `pretty-print`.  It
  can be installed to `~/.local/bin` if you enable\n    the flag `buildexe` like so:\n\n
  \   ```sh\n    $ stack install pretty-simple-2.0.2.1 --flag pretty-simple:buildexe\n
  \   ```\n\n    When you run it, you can paste something you want formatted on stdin,
  then\n    press <key>Ctrl</key>-<key>D</key>.  It will print the formatted version
  on\n    stdout:\n\n    ```sh\n    $ pretty-simple\n    [(Just 3, Just 4)]\n\n    ^D\n\n
  \   [\n        ( Just 3\n        , Just 4\n        )\n    ]\n    ```\n\n## 2.0.2.0\n\n*
  \  Fix a [problem](https://github.com/cdepillabout/pretty-simple/pull/20) with\n
  \   the pTraceShow functions not working correctly.\n\n## 2.0.1.0\n\n*   Added the
  `Debug.Pretty.Simple` that exports functions that work like\n    `Debug.Trace`.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  text: ! '>=1.2'
  parsec: ! '>=3.1'
  containers: ! '>=0.5'
  ansi-terminal: ! '>=0.6'
  mtl: ! '>=2.2'
  pretty-simple: -any
  transformers: ! '>=0.4'
  aeson: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.0.3'
- '1.0.0.4'
- '1.0.0.5'
- '1.0.0.6'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '2.0.0.0'
- '2.0.1.0'
- '2.0.2.0'
- '2.0.2.1'
- '2.1.0.0'
author: Dennis Gosnell
latest: '2.1.0.0'
description-type: markdown
description: ! "\nText.Pretty.Simple\n==================\n\n[![Build Status](https://secure.travis-ci.org/cdepillabout/pretty-simple.svg)](http://travis-ci.org/cdepillabout/pretty-simple)\n[![Hackage](https://img.shields.io/hackage/v/pretty-simple.svg)](https://hackage.haskell.org/package/pretty-simple)\n[![Stackage
  LTS](http://stackage.org/package/pretty-simple/badge/lts)](http://stackage.org/lts/package/pretty-simple)\n[![Stackage
  Nightly](http://stackage.org/package/pretty-simple/badge/nightly)](http://stackage.org/nightly/package/pretty-simple)\n![BSD3
  license](https://img.shields.io/badge/license-BSD3-blue.svg)\n\n`pretty-simple`
  is a pretty printer for Haskell data types that have a `Show`\ninstance.\n\nFor
  example, imagine the following Haskell data types and values:\n\n```haskell\ndata
  Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show\n\nfoo :: Foo\nfoo
  = Foo 3 [\"hello\", \"goodbye\"]\n\ndata Bar = Bar { bar1 :: Double , bar2 :: [Foo]
  } deriving Show\n\nbar :: Bar\nbar = Bar 10.55 [foo, foo]\n```\n\nIf you run this
  in `ghci` and type `print bar`, you'll get output like this:\n\n```haskell\n> print
  bar\nBar {bar1 = 10.55, bar2 = [Foo {foo1 = 3, foo2 = [\"hello\",\"goodbye\"]},Foo
  {foo1 = 3, foo2 = [\"hello\",\"goodbye\"]}]}\n```\n\nThis is pretty hard to read.
  \ Imagine if there were more fields or it were even\nmore deeply nested.  It would
  be even more difficult to read.\n\n`pretty-simple` can be used to print `bar` in
  an easy-to-read format:\n\n![example screenshot](/img/pretty-simple-example-screenshot.png?raw=true
  \"example screenshot\")\n\n## Usage\n\n`pretty-simple` can be easily used from `ghci`
  when debugging.\n\nWhen using `stack` to run `ghci`, just append append the `--package`
  flag to\nthe command line to load `pretty-simple`.\n\n```sh\n$ stack ghci --package
  pretty-simple\n```\n\nOnce you get a prompt in `ghci`, you can use `import` to get
  `pretty-simple`'s\n[`pPrint`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pPrint)\nfunction
  in scope.\n\n```haskell\n> import Text.Pretty.Simple (pPrint)\n```\n\nYou can test
  out `pPrint` with simple data types like `Maybe` or tuples.\n\n```haskell\n> pPrint
  $ Just (\"hello\", \"goodbye\")\nJust\n    ( \"hello\"\n    , \"goodbye\"\n    )\n```\n\n##
  Features\n\n- Easy-to-read\n    - Complex data types are simple to understand.\n-
  Color\n    - Prints in color using ANSI escape codes.\n    - It is possible to print
  without color by using the\n      [`pPrintNoColor`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pPrintNoColor)\n
  \     function.\n- Rainbow Parentheses\n    - Easy to understand deeply nested data
  types.\n- Configurable Indentation\n    - Amount of indentation is configurable
  with the\n      [`pPrintOpt`](https://hackage.haskell.org/package/pretty-simple-1.0.0.6/docs/Text-Pretty-Simple.html#v:pPrintOpt)\n
  \     function.\n- Fast\n    - No problem pretty-printing data types thousands of
  lines long.\n- Works with any data type with a `Show` instance\n    - Some common
  Haskell data types have a `Show` instance that produces\n      non-valid Haskell
  code.  `pretty-simple` will pretty-print even these\n      data types.\n\n## Why
  not `(some other package)`?\n\nOther pretty-printing packages have some combination
  of these defects:\n\n- No options for printing in color.\n- No options for changing
  the amount of indentation\n- Requires every data type to be an instance of some
  special typeclass (instead\n  of just `Show`).\n- Requires all `Show` instances
  to output valid Haskell code.\n\n## Other Uses\n\n### Pretty-print all GHCi output\n\nThe
  `pPrint` function can be used as the default output function in GHCi.\n\nAll you
  need to do is run GHCi like this:\n\n```sh\n$ stack ghci --ghci-options \"-interactive-print=Text.Pretty.Simple.pPrint\"
  --package pretty-simple\n```\n\nNow, whenever you make GHCi evaluate an expression,
  GHCi will pretty-print the\nresult using `pPrint`!  See\n[here](https://downloads.haskell.org/%7Eghc/latest/docs/html/users_guide/ghci.html#using-a-custom-interactive-printing-function)\nfor
  more info on this neat feature in GHCi.\n\n### Pretty-printing JSON\n\n`pretty-simple`
  can be used to pretty-print any `String` that is similar to\nHaskell data types.
  \ The only requirement is that the `String` must correctly\nuse brackets, parenthese,
  and braces to indicate nesting.\n\nFor example, the\n[`pString`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pString)\nfunction
  can be used to pretty-print JSON.\n\nRecall our example from before.\n\n```haskell\ndata
  Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show\n\nfoo :: Foo\nfoo
  = Foo 3 [\"hello\", \"goodbye\"]\n\ndata Bar = Bar { bar1 :: Double , bar2 :: [Foo]
  } deriving Show\n\nbar :: Bar\nbar = Bar 10.55 [foo, foo]\n```\n\nYou can use [`aeson`](https://hackage.haskell.org/package/aeson)
  to turn these\ndata types into JSON.  First, you must derive\n[`ToJSON`](https://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON)\ninstances
  for the data types.  It is easiest to do this with Template Haskell:\n\n```haskell\n{-#
  LANGUAGE TemplateHaskell #-}\n\n$(deriveJSON defaultOptions ''Foo)\n$(deriveJSON
  defaultOptions ''Bar)\n```\n\nIf you run this in `ghci` and type `encode bar`, you'll
  get output like this:\n\n```haskell\n> import Data.Aeson (encode)\n> putLazyByteStringLn
  $ encode bar\n{\"bar1\":10.55,\"bar2\":[{\"foo1\":3,\"foo2\":[\"hello\",\"goodbye\"]},{\"foo1\":3,\"foo2\":[\"hello\",\"goodbye\"]}]}\n```\n\nJust
  like Haskell's normal `print` output, this is pretty hard to read.\n\n`pretty-simple`
  can be used to pretty-print the JSON-encoded `bar` in an\neasy-to-read format:\n\n![json
  example screenshot](/img/pretty-simple-json-example-screenshot.png?raw=true \"json
  example screenshot\")\n\n(You can find the `lazyByteStringToString`, `putLazyByteStringLn`,\nand
  `putLazyTextLn` in the [`ExampleJSON.hs`](example/ExampleJSON.hs)\nfile.)\n\n###
  Pretty-printing from the command line\n\n`pretty-simple` includes a command line
  executable that can be used to\npretty-print anything passed in on stdin.\n\nIt
  can be installed to `~/.local/bin/` with the following command. Note that you\nmust
  enable the `buildexe` flag, since it will not be built by default:\n\n```sh\n$ stack
  install pretty-simple-2.0.2.1 --flag pretty-simple:buildexe\n```\n\nWhen run on
  the command line, you can paste in the Haskell datatype you want to\nbe formatted,
  then hit <kbd>Ctrl</kbd>-<kbd>D</kbd>:\n\n![cli example screenshot](/img/pretty-simple-cli-screenshot.png?raw=true
  \"cli example screenshot\")\n\nThis is very useful if you accidentally print out
  a Haskell data type with\n`print` instead of `pPrint`.\n\n## Contributions\n\nFeel
  free to open an\n[issue](https://github.com/cdepillabout/pretty-simple/issues) or\n[PR](https://github.com/cdepillabout/pretty-simple/pulls)
  for any\nbugs/problems/suggestions/improvements.\n"
license-name: BSD3
