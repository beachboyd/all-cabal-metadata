homepage: http://github.com/bitnomial/prometheus
changelog-type: ''
hash: 5de2f788474a47ef66d5bd95333d6742be2d173b733fdbacd732d9cb2ccd143f
test-bench-deps: {}
maintainer: luke@bitnomial.com, opensource@bitnomial.com
synopsis: Prometheus Haskell Client
changelog: ''
basic-deps:
  warp: ! '>=3.2 && <3.3'
  http-client: ! '>=0.4 && <0.6'
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.2 && <3.3'
  base: ! '>=4.7 && <4.12'
  text: ! '>=1.2 && <1.3'
  containers: ! '>=0.5 && <0.6'
  atomic-primops: ! '>=0.8 && <0.9'
  network-uri: ! '>=2.5 && <2.7'
  transformers: ! '>=0.4 && <0.6'
  http-types: ! '>=0.8 && <0.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.2.1'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.5.0'
- '2.0.0'
- '2.0.1'
- '2.0.2'
- '2.1.0'
author: Luke Hoersten
latest: '2.1.0'
description-type: markdown
description: ! "# Prometheus Haskell Client\n\nA simple and modern, type safe, idiomatic
  Haskell client for\n[Prometheus](http://prometheus.io) monitoring. Specifically
  there is\nno use of unsafe IO or manual ByteString construction from lists of\nbytes.
  Batteries-included web server. Version 0.* supports Prometheus v1.0\n  and version
  2.* supports Prometheus v2.0.\n\n- [Hackage Package](https://hackage.haskell.org/package/prometheus)\n-
  [Github](http://github.com/LukeHoersten/prometheus)\n\n## Usage Example\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Example where\n\nimport           Control.Monad.IO.Class
  \                        (liftIO)\nimport           System.Metrics.Prometheus.Concurrent.Http
  \     (serveHttpTextMetricsT)\nimport           System.Metrics.Prometheus.Concurrent.RegistryT\nimport
  \          System.Metrics.Prometheus.Metric.Counter       (inc)\nimport           System.Metrics.Prometheus.MetricId\n\nmain
  :: IO ()\nmain = runRegistryT $ do\n    -- Labels can be defined as lists or added
  to an empty label set\n    connectSuccessGauge <- registerGauge \"example_connections\"
  (fromList [(\"login\", \"success\")])\n    connectFailureGauge <- registerGauge
  \"example_connections\" (addLabel \"login\" \"failure\" mempty)\n    connectCounter
  <- registerCounter \"example_connection_total\" mempty\n    latencyHistogram <-
  registerHistogram \"example_round_trip_latency_ms\" mempty [10, 20..100]\n\n    liftIO
  $ inc connectCounter -- increment a counter\n\n    -- [...] pass metric handles
  to the rest of the app\n\n    serveHttpTextMetricsT 8080 [\"metrics\"] -- http://localhost:8080/metric
  server\n```\n\n## Advanced Usage\n\nA `Registry` and `StateT`-based `RegistryT`
  are available for unit\ntesting or generating lists of `[IO a]` actions that can
  be\n`sequenced` and returned from pure code to be applied.\n\n## Tasks\n\n- [ ]
  Implement help docstrings.\n- [ ] Implement GHC-specific metrics.\n- [ ] Implement
  [summary metric](https://github.com/prometheus/client_golang/blob/master/prometheus/summary.go).\n-
  [ ] Encode name and labels on register.\n- [x] Implement ReaderT for Concurrent
  Registry.\n- [x] Library documentation and example.\n- [ ] [Name and label validation](http://prometheus.io/docs/concepts/data_model/#metric-names-and-labels)\n"
license-name: BSD3
