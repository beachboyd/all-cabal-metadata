homepage: https://github.com/PeterScott/pwstore
changelog-type: ''
hash: 9b6a37510d8b9f37f409a8ab3babac9181afcaaa3fce8ba1c131a7ed3de30698
test-bench-deps: {}
maintainer: pjscott@iastate.edu
synopsis: Secure password storage.
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ==4.*
  base64-bytestring: ! '>=0.1'
  binary: ! '>=0.5'
  byteable: ! '>=0.1'
  random: ! '>=1'
  cryptohash: ! '>=0.6'
all-versions:
- '1.0'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- 2.4.1
- 2.4.2
- 2.4.3
- 2.4.4
author: Peter Scott
latest: 2.4.4
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/PeterScott/pwstore.svg?branch=master)](https://travis-ci.org/PeterScott/pwstore)\n\nStoring
  passwords securely in Haskell\n=======================\n\nIf you need to store and
  verify passwords, there are many wrong ways to do it, most of them all too common.
  Some people store users' passwords in plain text. Then, when an attacker manages
  to get their hands on this file, they have the passwords for every user's account.
  One step up, but still wrong, is to simply hash all passwords with SHA1 or something.
  This is vulnerable to rainbow table and dictionary attacks. One step up from that
  is to hash the password along with a unique salt value. This is vulnerable to dictionary
  attacks, since guessing a password is very fast. The right thing to do is to use
  a slow hash function, to add some small but significant delay, that will be negligible
  for legitimate users but prohibitively expensive for someone trying to guess passwords
  by brute force. That is what this library does. It iterates a SHA256 hash, with
  a random salt, a few thousand times. This scheme is known as PBKDF1, and is generally
  considered secure; there is nothing innovative happening here.\n\nThere are two
  branches, which provide two different packages. The master branch\ncontains the
  pwstore-fast package, which uses the cryptohash library for fast\nhashing. The purehaskell
  branch contains the pwstore-purehaskell package, which\nhas the exact same API,
  but with only pure Haskell dependencies. The pure\nversion is about 25 times slower,
  and is not recommended unless you have no\nother choice, but it's still fast enough
  to be usable.\n\nInstallation\n---------\n\nJust get either the pwstore-fast or
  pwstore-purehaskell package via cabal-install:\n\n    cabal-install pwstore-fast\n\n[Haddock
  docs are here.](http://hackage.haskell.org/packages/archive/pwstore-fast/2.0/doc/html/Crypto-PasswordStore.html)\n\n\nUsage\n-----\n\nThe
  API here is very simple. What you store are called *password hashes*.  They are
  strings (technically, ByteStrings) that look like this:\n\n    \"sha256|14|Ge9pg8a/r4JW356Uux2JHg==|Fdv4jchzDlRAs6WFNUarxLngaittknbaHFFc0k8hAy0=\"\n\nEach
  password hash shows the algorithm, the strength (more on that later),\nthe salt,
  and the hashed-and-salted password. You store these on your server,\nin a database,
  for when you need to verify a password. You make a password\nhash with the 'makePassword'
  function. Here's an example:\n\n    >>> makePassword \"hunter2\" 14\n    \"sha256|14|Zo4LdZGrv/HYNAUG3q8WcA==|zKjbHZoTpuPLp1lh6ATolWGIKjhXvY4TysuKvqtNFyk=\"\n\nThis
  will hash the password \"hunter2\", with strength 14, which is a good default value.
  The strength here determines how long the hashing will take. When doing the hashing,
  we iterate the SHA256 hash function `2^strength` times, so increasing the strength
  by 1 makes the hashing take twice as long. When computers get faster, you can bump
  up the strength a little bit to compensate. You can strengthen existing password
  hashes with the `strengthenPassword` function. Note that `makePassword` needs to
  generate random numbers, so its return type is `IO ByteString`. If you want to avoid
  the IO monad, you can generate your own salt and pass it to `makePasswordSalt`.\n\nYour
  strength value should not be less than 12, and 14 is a good default value at the
  time of this writing, in 2013.\n\nOnce you've got your password hashes, the second
  big thing you need to do with them is verify passwords against them. When a user
  gives you a password, you compare it with a password hash using the `verifyPassword`
  function:\n\n    >>> verifyPassword \"wrong guess\" passwordHash\n    False\n    >>>
  verifyPassword \"hunter2\" passwordHash\n    True\n\nThese two functions are really
  all you need. If you want to make existing password hashes stronger, you can use
  `strengthenPassword`. Just pass it an existing password hash and a new strength
  value, and it will return a new password hash with that strength value, which will
  match the same password as the old password hash.\n\nTools\n-----\n\nRobert Helgesson
  has written a command-line tool for using pwstore, called [pwstore-cli](http://darcsden.com/rycee/pwstore-cli).
  It is available [on Hackage](http://hackage.haskell.org/package/pwstore-cli-0.1),
  and can be easily installed with `cabal install pwstore-cli`.\n\nContributing\n------\n\nIf
  you have any suggestions or patches, I would love to hear them. To make sure that
  your changes to the code work properly, you can run the test suite with\n\n    runhaskell
  Tests.hs\n\nThe code is under the BSD3 license.\n\nContributors\n------\n\nMichael
  Snoyman contributed patches that made pwstore work with a wider range of GHC versions.\n\nAlfredo
  Dinapoli added PBKDF2 support, and a lower-level API for controlling algorithm and
  iteration count.\n"
license-name: BSD-3-Clause
