homepage: https://github.com/bubba/lsp-test#readme
changelog-type: markdown
hash: f38d1205680602260f3545ef54aebda63f170a8bcc0e748d25eef5ba61d6bb1d
test-bench-deps:
  lsp-test: -any
  base: ! '>=4.10 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  data-default: -any
  lens: -any
  aeson: -any
  haskell-lsp: ==0.16.*
maintainer: luke_lau@icloud.com
synopsis: Functional test framework for LSP servers.
changelog: |
  # Revision history for lsp-test

  ## 0.7.0.0 -- 2019-09-08

  * Update for haskell-lsp-0.16.0.0

  ## 0.6.1.0 -- 2019-08-24

  * Add `satisfyMaybe` (@cocreature)

  ## 0.6.0.0 -- 2019-07-04

  * Update to haskell-lsp-0.15.0.0 (@lorenzo)

  ## 0.5.4.0 -- 2019-06-13

  * Fix `getDefinitions` for SingleLoc (@cocreature)
  * Add `getCodeLenses` (@cocreature)

  ## 0.5.3.0 -- 2019-06-13

  * Update to haskell-lsp-0.14.0.0 (@cocreature)
  * Support `TextDocumentDidChange` (@cocreature)
  * Add non-file based `openDoc` (@cocreature)

  ## 0.5.2.0 -- 2019-04-28

  * Add `satisfy` parser combinator

  ## 0.5.1.0 -- 2019-04-22

  * Fix unhandled `window/progress` server notifications

  ## 0.5.1.0 -- 2019-04-07

  * Add getTypeDefinitions (@fendor)

  ## 0.5.0.2 -- 2018-12-05

  * Fix loose threads when exceptions are thrown

  ## 0.5.0.0 -- 2018-11-13

  * Add lspConfig option in config
  * GHC 8.6.2 support

  ## 0.4.0.0 -- 2018-09-08

  * Update to haskell-lsp-0.8.0.0

  ## 0.3.0.0 -- 2018-09-0t

  * Update to haskell-lsp-0.7.0.0

  ## 0.2.1.0 -- 2018-08-14

  * Add getCodeActions
  * Add getCurrentDiagnostics

  ## 0.2.0.0 -- 2018-08-06

  * Update to haskell-lsp 0.6.0.0
basic-deps:
  bytestring: -any
  unix: -any
  base: ! '>=4.10 && <5'
  parser-combinators: -any
  Diff: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  async: -any
  conduit-parse: ==0.2.*
  conduit: -any
  data-default: -any
  containers: -any
  ansi-terminal: -any
  lens: -any
  rope-utf16-splay: -any
  mtl: -any
  transformers: -any
  aeson: -any
  haskell-lsp: ==0.16.*
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.5.2.3
- 0.5.3.0
- 0.5.4.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
author: Luke Lau
latest: 0.7.0.0
description-type: markdown
description: |
  # lsp-test [![Build Status](https://travis-ci.com/bubba/lsp-test.svg?branch=master)](https://travis-ci.com/bubba/lsp-test) [![Hackage](https://img.shields.io/hackage/v/lsp-test.svg)](https://hackage.haskell.org/package/lsp-test-0.1.0.0)
  lsp-test is a functional testing framework for Language Server Protocol servers.

  ```haskell
  import Language.Haskell.LSP.Test
  runSession "hie" fullCaps "proj/dir" $ do
    doc <- openDoc "Foo.hs" "haskell"
    skipMany anyNotification
    symbols <- getDocumentSymbols doc
  ```

  ## Examples

  ### Unit tests with HSpec
  ```haskell
  describe "diagnostics" $
    it "report errors" $ runSession "hie" fullCaps "test/data" $ do
      openDoc "Error.hs" "haskell"
      [diag] <- waitForDiagnosticsSource "ghcmod"
      liftIO $ do
        diag ^. severity `shouldBe` Just DsError
        diag ^. source `shouldBe` Just "ghcmod"
  ```

  ### Replaying captured session
  ```haskell
  replaySession "hie" "test/data/renamePass"
  ```

  ### Parsing with combinators
  ```haskell
  skipManyTill loggingNotification publishDiagnosticsNotification
  count 4 (message :: Session ApplyWorkspaceEditRequest)
  anyRequest <|> anyResponse
  ```

  Try out the example tests in the `example` directory with `cabal new-test`.
  For more examples check the [Wiki](https://github.com/bubba/lsp-test/wiki/Introduction)

  ## Developing
  The tests are integration tests, so make sure you have the following language servers installed and on your PATH:
  ### [haskell-ide-engine](https://github.com/haskell/haskell-ide-engine)
  - Check out a relatively recent version of the repo, or see `.travis.yml` to get the exact commit used for CI.
  - `stack install`
  ### [javascript-typescript-langserver](https://github.com/sourcegraph/javascript-typescript-langserver)
  `npm i -g javascript-typescript-langserver`

  Then run the tests with `stack test` or `cabal new-test`.
license-name: BSD-3-Clause
