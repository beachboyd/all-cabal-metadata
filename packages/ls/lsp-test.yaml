homepage: https://github.com/bubba/lsp-test#readme
changelog-type: markdown
hash: 30770f090411cfd178c4ba043b3bb6d9d7230b9c706ae5e0f38258da3768fa27
test-bench-deps:
  lsp-test: -any
  base: ! '>=4.10 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  data-default: -any
  lens: -any
  aeson: -any
  haskell-lsp: ! '>=0.8 && <0.11'
maintainer: luke_lau@icloud.com
synopsis: Functional test framework for LSP servers.
changelog: "# Revision history for lsp-test\n\n## 0.5.1.0 -- 2019-04-07\n\n* Add getTypeDefinitions
  (@fendor) \n\n## 0.5.0.2 -- 2018-12-05\n\n* Fix loose threads when exceptions are
  thrown\n\n## 0.5.0.0 -- 2018-11-13\n\n* Add lspConfig option in config\n* GHC 8.6.2
  support\n\n## 0.4.0.0 -- 2018-09-08\n\n* Update to haskell-lsp-0.8.0.0\n\n## 0.3.0.0
  -- 2018-09-0t\n\n* Update to haskell-lsp-0.7.0.0\n\n## 0.2.1.0 -- 2018-08-14\n\n*
  Add getCodeActions\n* Add getCurrentDiagnostics\n\n## 0.2.0.0 -- 2018-08-06\n\n*
  Update to haskell-lsp 0.6.0.0\n"
basic-deps:
  bytestring: -any
  unix: -any
  base: ! '>=4.10 && <5'
  parser-combinators: -any
  yi-rope: -any
  Diff: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  conduit-parse: -any
  conduit: -any
  data-default: -any
  containers: -any
  ansi-terminal: -any
  lens: -any
  mtl: -any
  transformers: -any
  aeson: -any
  haskell-lsp: ! '>=0.8 && <0.11'
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
author: Luke Lau
latest: 0.5.1.2
description-type: markdown
description: |
  # lsp-test [![Build Status](https://travis-ci.com/bubba/lsp-test.svg?branch=master)](https://travis-ci.com/bubba/lsp-test) [![Hackage](https://img.shields.io/hackage/v/lsp-test.svg)](https://hackage.haskell.org/package/lsp-test-0.1.0.0)
  lsp-test is a functional testing framework for Language Server Protocol servers.

  ```haskell
  import Language.Haskell.LSP.Test
  runSession "hie" fullCaps "proj/dir" $ do
    doc <- openDoc "Foo.hs" "haskell"
    skipMany anyNotification
    symbols <- getDocumentSymbols doc
  ```

  ## Examples

  ### Unit tests with HSpec
  ```haskell
  describe "diagnostics" $
    it "report errors" $ runSession "hie" fullCaps "test/data" $ do
      openDoc "Error.hs" "haskell"
      [diag] <- waitForDiagnosticsSource "ghcmod"
      liftIO $ do
        diag ^. severity `shouldBe` Just DsError
        diag ^. source `shouldBe` Just "ghcmod"
  ```

  ### Replaying captured session
  ```haskell
  replaySession "hie" "test/data/renamePass"
  ```

  ### Parsing with combinators
  ```haskell
  skipManyTill loggingNotification publishDiagnosticsNotification
  count 4 (message :: Session ApplyWorkspaceEditRequest)
  anyRequest <|> anyResponse
  ```

  Try out the example tests in the `example` directory with `cabal new-test`.
  For more examples check the [Wiki](https://github.com/bubba/lsp-test/wiki/Introduction)

  ## Developing
  The tests are integration tests, so make sure you have the following language servers installed and on your PATH:
  ### [haskell-ide-engine](https://github.com/haskell/haskell-ide-engine)
  - Check out a relatively recent version of the repo, or see `.travis.yml` to get the exact commit used for CI.
  - `stack install`
  ### [javascript-typescript-langserver](https://github.com/sourcegraph/javascript-typescript-langserver)
  `npm i -g javascript-typescript-langserver`

  Then run the tests with `stack test` or `cabal new-test`.
license-name: BSD-3-Clause
