homepage: https://github.com/spoqa/checkmate#readme
changelog-type: markdown
hash: ce9751f34b465333f8eb92546d4ac2c175e2612e488bcf191e617430396a0ddd
test-bench-deps:
  hlint: ! '>=2.0.9 && <3'
  bytestring: ! '>=0.10.8.1 && <0.11'
  diff-parse: ! '>=0.2.1 && <0.3.0'
  base: ! '>=4.7 && <5'
  hspec: ! '>=2.4.4 && <3.0.0'
  text: ==1.*
  megaparsec: ! '>=5.3.1 && <5.4.0'
  checkmate: -any
  quickcheck-text: ! '>=0.1.2.1 && <0.2.0.0'
  filepath: ! '>=1.4.1.1 && <2.0.0'
  interpolatedstring-perl6: ==1.*
  range: ! '>=0.1.2 && <0.2.0'
  hspec-megaparsec: ! '>=0.3.1 && <0.4.0'
  file-embed: ! '>=0.0.10 && <0.1.0'
  temporary: ! '>=1.2.1 && <1.3.0.0'
  QuickCheck: ! '>=2.9.2 && <3.0.0'
  directory: ==1.3.*
maintainer: hong.minhee@gmail.com
synopsis: Generate checklists relevant to a given patch
changelog: ! "Checkmate changelog\n===================\n\nVersion 0.3.1\n-------------\n\nReleased
  on November 3, 2017.\n\n -  Fixed a bug that `checkmate github-travis` and `checkmate
  github-circle`\n    commands were prone to reach rate limit of GitHub API due to
  unauthenticated\n    request for getting metadata of the pull request.\n\n\nVersion
  0.3.0\n-------------\n\nReleased on October 21, 2017.\n\n### Frontend\n\n -  Added
  a new filename *.check* besides *CHECK* as directory-level checklist\n    file.\n\n
  -  `checkmate github` command became to leave no comment when there are\n    nothing
  to `CHECK` corresponding to the given diff.  It also removes\n    the existing comment
  previously left by Checkmate on the same pull request.\n\n -  Added `checkmate github-travis`
  and `checkmate github-circle` commands,\n    shortcuts of `checkmate github` for
  Travis CI and Circle CI integration.\n    It even doesn't need the result of `git
  diff`.\n\n -  `checkmate` and its subcommands became to terminate with a proper
  non-zero\n    exit code and print messages to /dev/stderr instead of /dev/stdout
  when\n    it fails to read diff.\n\n### Internals\n\n -  Added `Checkmate.Publisher`
  and `Checkmate.Publisher.GitHub` module.\n\n\nVersion 0.2.1\n-------------\n\nReleased
  on September 26, 2017.\n\n -  Fixed a parser bug which had scanned continuous inline
  comments of\n    unmatched styles, e.g.:\n\n        // CHECK This line is scanned.\n
  \       // This line also is scanned.\n        -- This line had been scanned, but
  the parser is fixed\n        -- so that it isn't scanned anymore.\n\n -  GitHub
  Flavored Markdown renderer (`checkmate gfm` and\n    `Checkmate.Rendrer.toGFMarkdown`)
  became to ignore soft linebreaks to be\n    consistent with CommonMark renderer.\n\n\nVersion
  0.2.0\n-------------\n\nReleased on September 25, 2017.\n\n -  Now `CHECK` comments
  in source codes can be multiline.  The following\n    patterns are supported:\n\n
  \    -  ~~~ c\n        /*\n        CHECK Lorem ipsum dolor sit amet, per facilis
  reprimique ut,\n        ei agam invenire mel.\n\n        Tacimates nominati vix
  ut, ea iudicabit prodesset deseruisse duo.\n        */\n        ~~~\n\n     -  ~~~
  c\n        // CHECK Lorem ipsum dolor sit amet, per facilis reprimique ut,\n        //
  ei agam invenire mel.\n        //\n        // Tacimates nominati vix ut, ea iudicabit
  prodesset deseruisse duo.\n        ~~~\n\n -  `CHECK` keywords with a colon (i.e.
  `CHECK:`) became matched.\n\n\nVersion 0.1.4\n-------------\n\nReleased on September
  21, 2017.\n\n -  Fixed a broken build of `checkmate` binary on the download page.\n
  \   It was crashed on Linux distros that glibc is unavailable.\n\n\nVersion 0.1.3\n-------------\n\nReleased
  on September 20, 2017.\n\n -  Fixed a broken build of `checkmate` binary on the
  download page.\n\n\nVersion 0.1.2\n-------------\n\nReleased on September 20, 2017.\n\n
  -  Fixed a broken build of `checkmate` binary on the download page.\n\n\nVersion
  0.1.1\n-------------\n\nReleased on September 20, 2017.\n\n### Frontend\n\n -  Checklist
  texts generated by `checkmate commonmark`, `checkmate gfm`, and\n    `checkmate
  github` became to have two levels of headings.  The top-level\n    heading is still
  the title of the checklist as it has been, and the\n    second-level heading is
  a corresponding file path of its following checks.\n\n### Internals\n\n -  Added
  `Checkmate.Renderer` module.\n\n\nVersion 0.1.0\n-------------\n\nInitial release.
  \ Released on September 20, 2017.\n"
basic-deps:
  diff-parse: ! '>=0.2.1 && <0.3.0'
  base: ! '>=4.7 && <5'
  text: ==1.*
  megaparsec: ! '>=5.3.1 && <5.4.0'
  checkmate: -any
  filepath: ! '>=1.4.1.1 && <2.0.0'
  process: ! '>=1.4.3.0 && <1.5.0.0'
  containers: ! '>=0.5.7.1 && <0.6.0.0'
  monad-parallel: ! '>=0.7.2.2 && <0.8.0.0'
  range: ! '>=0.1.2 && <0.2.0'
  github: ==0.17.*
  optparse-applicative: ! '>=0.13.2.0 && <0.15.0.0'
  directory: ==1.3.*
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.3.1'
author: Hong Minhee
latest: '0.3.1'
description-type: markdown
description: ! "Checkmate\n=========\n\n[![Build Status][ci-badge]][ci]\n[![Hackage][hackage-badge]][hackage]\n\nCheckmate
  is a small program to generate human-readable checklists from\na given patch (or
  pull request).  Leave `CHECK` comments (that are the same\nfashion as `FIXME` or
  `TODO` comments); then Checkmate detects when a diff\ntouches some code scopes having
  any `CHECK` comments, and lists the checks.\n\nIt helps contributors and reviewers
  to remind matters that require attention\nwhen a part of the code is changed.\n\n[ci-badge]:
  https://travis-ci.org/spoqa/checkmate.svg?branch=master\n[ci]: https://travis-ci.org/spoqa/checkmate\n[hackage-badge]:
  https://img.shields.io/hackage/v/checkmate.svg\n[hackage]: https://hackage.haskell.org/package/checkmate\n\n\nSituation\n---------\n\nLet's
  say there's a dictionary, and we should update the manual when a key\nis added to
  or removed from it:\n\n~~~~~~~~ python\nTARGET_LANGUAGES = {\n    # CHECK: Please
  update the manual on the project wiki when you add/remove\n    # a language.\n\n
  \   'c': '*.c',\n    'java': '*.java',\n    'javascript': '*.js',\n    'python':
  '*.py',\n}\n~~~~~~~~\n\nThe above example may be artificial, but suppose lines of
  the dictionary are\nlengthy.  Such tasks should be done outside of the source code
  repository\nso that they cannot be automated by simply eliminating code duplicates.\nContributors
  and reviewers altogether are easy to forget about such tasks.\n\nTo remind peers
  of such tasks, Checkmate detects `CHECK` comments like the above\nexample when a
  relevant *code block* is touched and show peers a checklist.\n\n\nListing relevant
  checks: overlapped blocks\n------------------------------------------\n\nHow does
  Checkmate list only relevant checks to a diff?  It currently doesn't\nhave any language-specific
  algorithms, but only a language-agnostic heuristics\non indented blocks.\n\nSuppose
  the following diff:\n\n~~~~~~~~ diff\ndiff --git a/langs.py b/langs.py\n--- a/langs.py\n+++
  b/langs.py\n@@ -5,6 +5,7 @@ TARGET_LANGUAGES = {\n     'c': '*.c',\n     'java':
  '*.java',\n     'javascript': '*.js',\n+    'haskell': '*.hs',\n     'python': '*.py',\n
  }\n \n~~~~~~~~\n\nSince it touched a code block with a `CHECK` comment, Checkmate
  generates\nthe following checklist:\n\n> - Please update the manual on the project
  wiki when you add/remove a language.\n\nSuppose a patch touches only code blocks
  without any `CHECK` comments too, e.g.:\n\n~~~~~~~~ diff\ndiff --git a/langs.py
  b/langs.py\n--- a/langs.py\n+++ b/langs.py\n@@ -8,6 +8,7 @@ TARGET_LANGUAGES = {\n
  \    'python': '*.py',\n }\n \n OTHER_DATA = {\n     # This code block is not relevant
  to TARGET_LANGUAGES.\n+    'haskell': '*.hs',\n }\n~~~~~~~~\n\nSince the touched
  block doesn't have any `CHECK` comments, Checkmate generates\nan empty checklist.\n\nNote
  that it doesn't parse code's semantics, but only scans blocks through\nindentation.
  \ Even if a block is wrapped in curly braces without indentation,\nit isn't counted
  as a block.\n\n\nDirectory-level checklist\n-------------------------\n\nSome checks
  may need to be listed for a whole directory.  Checkmate recognizes\nfiles named
  *.check* or *CHECK* in a directory and include checks in that to\nthe checklist
  if any file in the directory are changed.  Its syntax is basically\na simple bullet
  list and a bullet can be `*`/`-`/`+`/`CHECK` or digits followed\nby `.`/`)`, e.g.:\n\n
  \   - Check 1\n    - Check 2\n\n    + A plus sign too can be a bullet.\n    * An
  asterisk too.\n\n    1. Numbered-bullets also can be used.\n    2) A closing parenthesis
  as well can follow instead of a period.\n\n    CHECK: For consistency `CHECK` keyword
  also can be a bullet as well.\n    CHECK And a colon can be omitted.\n    Lines
  without any bullet is continued from previous line(s).\n\n\nDownload\n--------\n\nWe
  provide an official Linux x86_64 binary for [every release][].  See also\nthe [latest
  release][].  Note that official binaries are distributed as\nstatically-linked standalone
  executable, and they aren't gzipped.  Download and\ngive an `+x` permission; then
  it's ready.\n\nOn the other platforms you can download and install using Haskell
  [Cabal][]\nor [Stack][] since source tarballs also are distributed on [Hackage][]:\n\n~~~~~~~~
  bash\nstack install checkmate\n~~~~~~~~\n\n[every release]: https://github.com/spoqa/checkmate/releases\n[latest
  release]: https://github.com/spoqa/checkmate/releases/latest\n[Cabal]: https://www.haskell.org/cabal/\n[Stack]:
  https://www.haskellstack.org/\n\n\nIntegration with CI\n-------------------\n\nSince
  Checkmate usually is executed as a part of CI build, we show examples\nfor widely-used
  CI services.\n\nAll examples assume the environment variables are defined:\n\n -
  \ `GITHUB_TOKEN` contains the access token to leave comments on a\n    corresponding
  GitHub repository.  See also GitHub's official article\n    about [personal API
  tokens][].\n -  `CHECKMATE_DOWNLOAD_URL` contains the download link to the prebuilt
  binary\n    of the latest release, i.e.:\n\n    ~~~~~~~ bash\n    CHECKMATE_DOWNLOAD_URL=https://github.com/spoqa/checkmate/releases/download/0.3.1/checkmate-linux-x86_64\n
  \   ~~~~~~~\n\n[personal API tokens]: https://github.com/blog/1509-personal-api-tokens\n\n\n###
  Travis CI\n\n~~~~~~~~ yaml\ninstall:\n- curl -L -o ~/bin/checkmate \"$CHECKMATE_DOWNLOAD_URL\"\n-
  chmod +x ~/bin/checkmate\nscript:\n- ~/bin/checkmate github-travis --token \"$GITHUB_TOKEN\"\n~~~~~~~~\n\n\n###
  Circle CI\n\n~~~~~~~~ yaml\ndependencies:\n  post:\n  - curl -L -o ~/bin/checkmate
  \"$CHECKMATE_DOWNLOAD_URL\"\n  - chmod +x ~/bin/checkmate\ntest:\n  post:\n  - ~/bin/checkmate
  github-circle --token \"$GITHUB_TOKEN\"\n~~~~~~~~\n\n\n### Other CI softwares/services\n\nYou
  can run `checkmate github` command with explicit arguments:\n\n~~~~~~~~ bash\ncurl
  -L -o ~/bin/checkmate \"$CHECKMATE_DOWNLOAD_URL\"\nchmod +x ~/bin/checkmate\n# Suppose
  we're running a build of github.com/foo/bar/pull/123\n~/bin/checkmate github \\\n
  \   --token \"$GITHUB_TOKEN\" \\\n    --login foo \\\n    --repo bar \\\n    --pr
  123\n~~~~~~~~\n\nIf you're using GitHub Enterprise on premise use `--endpoint` option.\nFurther
  reading: `checkmate github --help`.\n"
license-name: GPL-3
