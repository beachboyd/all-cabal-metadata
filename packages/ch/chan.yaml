homepage: https://github.com/athanclark/chan#readme
changelog-type: ''
hash: ab6023b5f466b0e297ff1604ed527d7d74cd0027bfab64f06d362d96dc31338c
test-bench-deps:
  stm: -any
  base: -any
  async: -any
  chan: -any
maintainer: athan.clark@gmail.com
synopsis: Some extra kit for Chans
changelog: ''
basic-deps:
  stm: -any
  base: ! '>=4.7 && <5'
  async: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.0.3'
author: Athan Clark
latest: '0.0.3'
description-type: markdown
description: ! "# chan\n\nThis is just some extra `Chan` and `TChan` kit that might
  help the average user. It relies on\nspawning threads with `async` and either canceling
  (debouncing) or waiting (throttling) messages.\n\nUnfortunately, the current design
  is untyped in the sense that the channel which you supply is the\n_output_ channel,
  and the returned channel is the one you would write to. I'm not sure how this should\nbe
  fixed.\n\nAn example might be the following:\n\n```haskell\nimport Control.Concurrent.Chan
  (readChan)\nimport Control.Concurrent.Chan.Extra (throttleStatic, intersperseStatic)\n\n\n\n--
  For example, some websockets:\n\ndata SomeMessage\n  = Ping\n  -- | ...\n\nthrottleLayer
  :: Chan SomeMessage -> IO (Chan SomeMessage)\nthrottleLayer output = do\n  (x,_)
  <- throttleStatic output 1000000 -- nanoseconds, = 1 second\n  pure x\n\npingLayer
  :: Chan SomeMessage -> IO (Chan SomeMessage)\npingLayer output = do\n  (x,_,_) <-
  intersperseStatic output (pure Ping) 1000000\n  pure x\n\nperformWebsocket :: Chan
  SomeMessage -> IO ()\nperformWebsocket output = do\n  output' <- pingLayer =<< throttleLayer
  output\n  _ <- async $ forever $ do\n    msg <- readChan output'\n    send msg --
  something like that - it'll include Ping messages for us,\n             -- and throttle
  the outgoing messages at the same time.\n```\n"
license-name: BSD3
