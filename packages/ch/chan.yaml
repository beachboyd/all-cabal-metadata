homepage: https://github.com/athanclark/chan#readme
changelog-type: ''
hash: 02cccefa1c4526b4562790f54f58bb1578a083b40fdfde270d9863534748855a
test-bench-deps:
  stm: -any
  base: -any
  async: -any
  chan: -any
maintainer: athan.clark@localcooking.com
synopsis: Some extra kit for Chans
changelog: ''
basic-deps:
  stm: -any
  base: ! '>=4.11 && <5.0'
  async: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.4.1'
author: Athan Clark
latest: '0.0.4.1'
description-type: markdown
description: ! "\n# chan\n\nThis is just some extra `Chan` and `TChan` kit that might
  help the average user. It relies on\nspawning threads with `async` and either canceling
  (debouncing) or waiting (throttling) messages.\n\nUnfortunately, the current design
  is slightly untyped in the sense that the channel which you supply is the\n_output_
  channel, and the returned channel is the one you would write to. I'm not sure how
  this should\nbe fixed. There's a series of \"typed\" alternatives to each underlying
  channel type, that allows users to\nrestrict them to \"read-only\", \"write-only\",
  or \"Writable a => ...\" etc.\n\nAn example might be the following:\n\n```haskell\nimport
  Control.Concurrent.Chan (readChan)\nimport Control.Concurrent.Chan.Scope (Scope
  (..))\nimport Control.Concurrent.Chan.Typed (ChanRW)\nimport Control.Concurrent.Chan.Extra
  (allowReading, throttleStatic, intersperseStatic)\n\n\n\n-- For example, some websockets:\n\ndata
  SomeMessage\n  = Ping\n  | Foo\n  -- | ...\n\nthrottleLayer :: ChanRW 'Read SomeMessage
  -> IO (ChanRW 'Write SomeMessage)\nthrottleLayer output = do\n  (x,_) <- throttleStatic
  output 1000000 -- nanoseconds, = 1 second\n  pure x\n\npingLayer :: ChanRW 'Read
  SomeMessage -> IO (ChanRW 'Write SomeMessage)\npingLayer output = do\n  (x,_,_)
  <- intersperseStatic output (pure Ping) 1000000\n  pure x\n\nperformWebsocket ::
  ChanRW 'Read SomeMessage -> IO ()\nperformWebsocket output = do\n  sendable <- pingLayer
  . allowReading =<< throttleLayer output\n  emittingThread <- async $ forever $ do\n
  \   -- the thread that actually facilitates the sending of messages queued in the
  chans\n    msg <- readChanRW output\n    send msg -- something like that - it'll
  include Ping messages for us,\n             -- and throttle the outgoing messages
  at the same time.\n  writeChanRW sendable Foo\n```\n"
license-name: BSD3
