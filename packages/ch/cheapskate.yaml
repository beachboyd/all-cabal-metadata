homepage: http://github.com/jgm/cheapskate
changelog-type: text
hash: 6b54e5ee5b95ced6efda6bbe0c7a9dc9488d575f799abc82442a461682b82bff
test-bench-deps: {}
maintainer: jgm@berkeley.edu
synopsis: Experimental markdown processor.
changelog: ! "cheapskate 0.1.1 (01 Aug 2017)\n\n  * Added NFData and Generic instances
  for basic types\n    (aisamanra).\n  * Use -auto-exported instead of -auto-all for
  prof options.\n  * Add 'dingus' flag and make cheapskate-dingus deps conditional\n
  \   (MarcelineVQ).  Previously cheapskate would pull in unneeded\n    dependencies
  when built with Cabal < 1.24.\n\ncheapskate 0.1.0.5 (22 Apr 2016)\n\n  * Bump base
  to allow GHC 8 (Leif Warner).\n  * Bumped data-default upper bound (Leif Warner).\n
  \ * Removed bad prof-options.\n\ncheapskate 0.1.0.4 (28 May 2015)\n\n  * Bump blaze-html
  version bound.\n\ncheapskate 0.1.0.3 (08 Dec 2014)\n\n  * Allow building with base-4.8.0.0
  (RyanGLScott).\n\ncheapskate 0.1.0.2 (08 Dec 2014)\n\n  * Increased upper bounds
  for text (RyanGlScott), mtl.\n  * Fixed usage message in command-line utility (cdosborn).\n
  \ * Added flag to build `cheapskate-dingus`.\n  * Dingus:  extract version from
  Paths_cheapskate.\n  * Fixed compiler warnings.\n  * Added `(<?>)`, made string
  in `ParseError` describe what is expected.\n  * On parse failure, return error with
  greatest position. This generally\n    gives more useful messages.\n\ncheapskate
  0.1.0.1 (10 Mar 2014)\n\n  * Increased version bounds for text, blaze-html.\n  *
  Made pImage more efficient, avoiding backtracking.\n\ncheapskate 0.1 (05 Jan 2014)\n\n
  \ * Initial release.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  text: ! '>=0.9 && <1.3'
  syb: -any
  uniplate: ! '>=1.6 && <1.7'
  data-default: ! '>=0.5 && <0.8'
  containers: ! '>=0.4 && <0.6'
  cheapskate: -any
  xss-sanitize: ! '>=0.3 && <0.4'
  mtl: ! '>=2.1 && <2.3'
  blaze-html: ! '>=0.6 && <0.10'
  deepseq: -any
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.1'
author: John MacFarlane
latest: '0.1.1'
description-type: markdown
description: ! "# Cheapskate\n\nThis is an experimental Markdown processor in pure
  Haskell.  (A cheapskate is\nalways in search of the best markdown.) It aims to process
  Markdown efficiently\nand in the most forgiving possible way.  It is about seven
  times faster than\n`pandoc` and uses a fifth the memory.  It is also faster, and
  considerably\nmore accurate, than the `markdown` package on Hackage.\n\nThere is
  no such thing as an invalid Markdown document. Any string of\ncharacters is valid
  Markdown.  So the processor should finish efficiently no\nmatter what input it gets.
  Garbage in should not cause an error or exponential\nslowdowns.  This processor
  has been tested on many large inputs consisting of\nrandom strings of characters,
  with performance that is consistently linear with\nthe input size. (Try `make fuzztest`.)\n\n##
  Installing\n\nTo build, get the Haskell Platform, then:\n\n    cabal update && cabal
  install\n\nThis will install both the `cheapskate` executable and the Haskell\nlibrary.
  \ A man page can be found in `man/man1` in the source.\n\n## Usage\n\nAs an executable:\n\n
  \   cheapskate [FILE*]\n\nAs a library:\n\n``` haskell\nimport Cheapskate\nimport
  Text.Blaze.Html\n\ntoMarkdown :: Text -> Html\ntoMarkdown = toHtml . markdown def\n```\n\nIf
  the markdown input you are converting comes from an untrusted source\n(e.g. a web
  form), you should *always* set `sanitize` to `True`.  This causes\nthe generated
  HTML to be filtered through `xss-sanitize`'s\n`sanitizeBalance` function. Otherwise
  you risk a XSS attack from\nraw HTML or a markdown link or image attribute attribute.\n\nYou
  may also wish to disallow users from entering raw HTML for aesthetic,\nrather than
  security reasons.  In that case, set `allowRawHtml` to `False`,\nbut let `sanitize`
  stay `True`, since it still affects attributes coming\nfrom markdown links and images.\n\n##
  Manipulating the parsed document\n\nYou can manipulate the parsed document before
  rendering using the `walk`\nand `walkM` functions.  For example, you might want
  to highlight code blocks\nusing highlighting-kate:\n\n``` haskell\nimport Data.Text
  as T\nimport Data.Text.Lazy as TL\nimport Cheapskate\nimport Text.Blaze.Html\nimport
  Text.Blaze.Html.Renderer.Text\nimport Text.Highlighting.Kate\n\nmarkdownWithHighlighting
  :: Text -> Html\nmarkdownWithHighlighting = toHtml . walk addHighlighting . markdown
  def\n\naddHighlighting :: Block -> Block\naddHighlighting (CodeBlock (CodeAttr lang
  _) t) =\n  HtmlBlock (T.concat $ TL.toChunks\n             $ renderHtml $ toHtml\n
  \            $ formatHtmlBlock defaultFormatOpts\n             $ highlightAs (T.unpack
  lang) (T.unpack t))\naddHighlighting x = x\n```\n\n## Extensions\n\nThis processor
  adds the following Markdown extensions:\n\n### Hyperlinked URLs\n\nAll absolute
  URLs are automatically made into hyperlinks, where\ninside `<>` or not.\n\n### Fenced
  code blocks\n\nFenced code blocks with attributes are allowed.  These begin with\na
  line of three or more backticks or tildes, followed by an\noptional language name
  and possibly other metadata.  They end\nwith a line of backticks or tildes (the
  same character as started\nthe code block) of at least the length of the starting
  line.\n\n### Explicit hard line breaks\n\nA hard line break can be indicated with
  a backslash before a\nnewline. The standard method of two spaces before a newline
  also\nworks, but this gives a more \"visible\" alternative.\n\n### Backslash escapes\n\nAll
  ASCII symbols and punctuation marks can be backslash-escaped,\nnot just those with
  a use in Markdown.\n\n## Revisions\n\nIn departs from the markdown syntax document
  in the following ways:\n\n### Intraword emphasis\n\nUnderscores cannot be used for
  word-internal emphasis. This\nprevents common mistakes with filenames, usernames,
  and indentifiers.\nAsterisks can still be used if word in*ter*nal emphasis is needed.\n\nThe
  exact rule is this:  an underscore that appears directly after\nan alphanumeric
  character does not begin an emphasized span.  (However,\nan underscore directly
  before an alphanumeric can end an emphasized\nspan.)\n\n### Ordered lists\n\nThe
  starting number of an ordered list is now significant.\nOther numbers are ignored,
  so you can still use `1.` for each\nlist item.\n\nIn addition to the `1.` form,
  you can use `1)` in your ordered lists.\nA new list starts if you change the form
  of the delimiter. So, the\nfollowing is two lists:\n\n    1. one\n    2. two\n    1)
  one\n    2) two\n\n### Bullet lists\n\nA new bullet lists starts if you change the
  bullet marker.\nSo, the following is two consecutive bullet lists:\n\n    + one\n
  \   + two\n    - one\n    - two\n\n### List separation\n\nTwo blank lines breaks
  out of a list.  This allows you to\nhave consecutive lists:\n\n    - one\n\n    -
  two\n\n\n    - one (new list)\n\nThe blank lines break out of a list no matter how
  deeply it\nis nested:\n\n    - one\n      - two\n        - three\n\n\n      - new
  top-level list\n\n### Indentation of list continuations\n\nBlock elements inside
  list items need not be indented four\nspaces.  If they are indented beyond the bullet
  or numerical\nlist marker, they will be considered additional blocks inside\nthe
  list item.  So, the following is a list item with two paragraphs:\n\n    - one\n\n
  \    two\n\nThe amount of indentation required for an indented code block\ninside
  a list item depends on the first line of the list item.\nGenerally speaking, code
  must be indented four spaces past the\nfirst non-space character after the list
  marker.  Thus:\n\n     -   My code\n\n             {code here}\n\n     - My code\n\n
  \          {code here}\n\nThe following diagram shows how the first line of a list
  item\ndivides the following lines into three regions:\n\n     -   My code\n      |
  \    |\n      +-----+\n\nContent to the left of the marked region will not be part
  of the list\nitem.  Content to the right of the marked region will be indented code\nunder
  the list item.  Regular blocks that belong under the\nlist item should start inside
  the marked region.\n\nWhen the first line itself contains indented code, this code\nand
  subsequent indented code blocks should be indented five spaces past the\nlist marker:\n\n
  \    -     { code }\n\n           { more code }\n\n### Raw HTML blocks\n\nRaw HTML
  blocks work a bit differently than in `Markdown.pl`.\nA raw HTML block starts with
  a block-level HTML tag (opening or\nclosing), or a comment start `<!--` or end `-->`,
  and goes until\nthe next blank line.  The whole block is included as raw HTML.\nNo
  attempt is made to parse balanced tags.  This means that\nin the following, the
  asterisks are literal asterisks:\n\n    <div>\n    *hello*\n    </div>\n\nwhile
  in the following, the asterisks are interpreted as markdown\nemphasis:\n\n    <div>\n\n
  \   *hello*\n\n    </div>\n\nIn the first example, we have a single raw HTML block;
  in the second,\nwe have two raw HTML blocks with an intervening paragraph.  This
  system\nprovides flexibility to authors to use enclose markdown sections\nin html
  block-level tags if they wish, while also allowing them\nto include verbatim HTML
  blocks (taking care that the don't include\nany blank lines).\n\nAs a consequence
  of this rule, HTML blocks may not contain blank lines.\n\n## Clarifications\n\nThis
  implementation resolves the following issues left vague in the markdown\nsyntax
  document:\n\n### Tight vs. loose lists\n\nA list is considered \"tight\" if (a)
  it has only one item or\nthere is no blank space between any two consecutive items,
  and\n(b) no item has blank lines as its immediate children.\nIf a list is \"tight,\"
  then list items consisting of a single\nparagraph or a paragraph followed by a sublist
  will be rendered\nwithout `<p>` tags.\n\n### Sublists\n\nSublists work like other
  block elements inside list items;\nthey  must be indented past the bullet or numerical
  list marker\n(but no more than three spaces past, or they will be interpreted\nas
  indented code).\n\n### ATX headers\n\nATX headers must have a space after the initial
  `###`s.\n\n### Separation of block quotes\n\nA blank line will end a blockquote.
  So, the following is a single\nblockquote:\n\n    > hi\n    >\n    > there\n\nBut
  this is two blockquotes:\n\n    > hi\n\n    > there\n\nBlank lines are not required
  before horizontal rules, blockquotes,\nlists, code blocks, or headers.  They are
  not required after, either,\nthough in many cases \"laziness\" will effectively
  require a blank\nline after.  For example, in\n\n    Hello there.\n    > A quote.\n
  \   Still a quote.\n\nthe \"Still a quote.\" is part of the block quote, because
  of laziness\n(the ability to leave off the > from the beginning of subsequent\nlines).
  \ Laziness also affects lists. However, we can have a code\nblock, ATX header, or
  horizontal rule between two paragraphs without any\nblank lines.\n\n### Link references\n\nLink
  references may occur anywhere in the document, even in nested\nlist contexts.  They
  need not be at the outer level.\n\n## Tests\n\nThe `tests` subdirectory contains
  an extensive suite of tests,\nincluding all of John Gruber's original Markdown tests,
  plus\nmany of the tests from Michel Fortin's `mdtest` suite.  Each\ntest consists
  in two files with the same basename, a markdown\nsource and an expected HTML output.\n\nTo
  run the test suite, do\n\n    make test\n\nTo run only tests that match a regex
  pattern, do\n\n    PATT=Orig make test\n\nSetting the environment variable `TIDY=1`
  will run the expected and\nactual output through tidy before comparing them.  You
  can run this\ntest suite on another markdown processor by doing\n\n    PROG=myothermarkdown
  make test\n\n## Benchmarks\n\nTo run a crude benchmark comparing `cheapskate` to
  `pandoc`, do\n`make bench`.  Set the `BENCHPROGS` environment variable to\ncompare
  to other implementations.\n\n## License\n\nCopyright &copy; 2012, 2013, 2014 John
  MacFarlane.\n\nThe library is released under the BSD license; see LICENSE for terms.\n\nSome
  of the test cases are borrowed from Michel Fortin's mdtest suite\nand John Gruber's
  original markdown test suite.\n"
license-name: BSD3
