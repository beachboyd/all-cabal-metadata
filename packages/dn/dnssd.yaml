homepage: https://github.com/maxpow4h/dnssd
changelog-type: ''
hash: dcce326cc8565c3347cec4ff9b1205fb3348680ed6205f5a186f6ec0bb468301
test-bench-deps: {}
maintainer: maxwellswadling@gmail.com
synopsis: DNS service discovery bindings
changelog: ''
basic-deps:
  base: ==4.*
  transformers: ==0.3.*
all-versions:
- 0.1.0.0
author: Maxwell Swadling
latest: 0.1.0.0
description-type: markdown
description: ! "# DNS Service Discovery Haskell Bindings\n\n`dnssd` provides Haskell
  bindings to Multicast DNS (mDNS) and DNS\nService Discovery (DNS-SD). Also known
  as Bonjour or Avahi.\n\n**WARNING**: There is currently a bug that causes the C
  code to get\nstuck in a loop when used in a large network in GHCi. This is an *experimental*
  library.\n\n## Install\n\n    cabal install dnssd\n\nOn Linux you need the `libavahi-compat-libdnssd-dev`
  package\ninstalled as well.\n\n## Example\n\n[slide-simple.hs](https://github.com/maxpow4h/slideshow/blob/master/slide-simple.hs)\nis
  a simple example of displaying jpegs to an Apple TV.\n\nTo find all local web servers.\n\n```haskell\nimport
  Network.DNSSD\nmain = do\n  servers <- dnsBrowse \"_http._tcp\"\n  putStrLn . show
  $ servers\n```\n\nThis should look something like this:\n\n```\n[\n  SRecord {deviceName
  = \"Maxwell\\8217s Server\",\n           serviceName = \"_http._tcp.\", deviceDomain
  = \"local.\"}\n, SRecord {deviceName = \"Jenkins\",\n           serviceName = \"_http._tcp.\",
  deviceDomain = \"local.\"}\n]\n```\n\nFind just one and then resolve it's IP and
  port.\n\n```haskell\nimport Network.DNSSD\n\ndnsAny :: String -> IO (Maybe SResolved)\ndnsAny
  s = do\n  things <- dnsBrowse s\n  if null things\n    then return Nothing\n    else
  dnsResolve $ head things\n\nmain = do\n  web <- dnsAny \"_http._tcp\"\n  print web\n```\n\n##
  Cross Platform Status\n\nWorks on:\n\n- Mac\n- Linux\n\nDoesn't work on yet:\n\n-
  Windows\n\n"
license-name: BSD-3-Clause
