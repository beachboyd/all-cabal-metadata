homepage: https://github.com/haskell/bytestring
changelog-type: markdown
hash: fcfa4f942078e51952f76450adc1cbc0ae4f62935f41d7b545a735cf2283fd67
test-bench-deps: {}
maintainer: Duncan Coutts <duncan@community.haskell.org>
synopsis: Fast, compact, strict and lazy byte strings with a list interface
changelog: |
  [0.10.12.0] – August 2020

   * **Note:** There are several breaking changes planned to be included in v0.11.
     Please ensure that your packages have appropriate upper bounds on bytestring,
     in order to minimize avoidable breakage.
   * [Add `takeWhileEnd` and `dropWhileEnd` to `Data.ByteString` and `Data.ByteString.Char8`, and add `dropSpace` and `strip` to `Data.ByteString.Char8`](https://github.com/haskell/bytestring/pull/121)
   * [Add `findIndexEnd` to `Data.ByteString` and `Data.ByteString.Lazy`](https://github.com/haskell/bytestring/pull/155)
   * [Add `partition` to `Data.ByteString.Char8` and `Data.ByteString.Lazy.Char8`](https://github.com/haskell/bytestring/pull/251)
   * [Add `IsList` instances for strict and lazy `ByteString` and for `ShortByteString`](https://github.com/haskell/bytestring/pull/219)
   * [Add `createUpToN'` and `unsafeCreateUpToN'` to `Data.ByteString.Internal`](https://github.com/haskell/bytestring/pull/245)
   * [Add `boundedPrim` to `Data.ByteString.Builder.Prim.Internal` and deprecate `boudedPrim`](https://github.com/haskell/bytestring/pull/246)
   * [Deprecate the `Data.ByteString.Lazy.Builder` and `Data.ByteString.Lazy.Builder.{ASCII,Extras}` modules](https://github.com/haskell/bytestring/pull/250)
   * [Fix documented complexity of `Data.ByteString.Lazy.length`](https://github.com/haskell/bytestring/pull/255)
   * [Assorted documentation fixes](https://github.com/haskell/bytestring/pull/248)

  [0.10.12.0]: https://github.com/haskell/bytestring/compare/0.10.10.1...0.10.12.0

  0.10.10.1 – June 2020

   * Fix off-by-one infinite loop in primMapByteStringBounded ([#203])
   * Don't perform unaligned writes when it isn't known to be safe ([#133])
   * Improve the performance of sconcat for lazy and strict bytestrings ([#142])
   * Document inadvertent 0.10.6.0 behaviour change in findSubstrings
   * Fix benchmark builds ([#52])
   * Documentation fixes
   * Test fixes

  [#52]: https://github.com/haskell/bytestring/issues/52
  [#133]: https://github.com/haskell/bytestring/pull/133
  [#142]: https://github.com/haskell/bytestring/pull/142
  [#203]: https://github.com/haskell/bytestring/issues/203

  0.10.10.0 July 2019 <duncan+haskell@dcoutts.me.uk> July 2019

   * Build with GHC 8.8, and tests with QC 2.10+
   * Add conversions between ShortByteString and CString (#126)
   * Documentation fixes (#65, #118, #144, #150, #152, #172)
   * Resolve potential copyright issue with test data (#165)

  0.10.8.2 Duncan Coutts <duncan@community.haskell.org> Feb 2017

   * Make readFile work for files with no size like /dev/null
   * Extend the cases in which concat and toStrict can avoid copying data
   * Fix building with ghc-7.0
   * Minor documentation improvements
   * Internal code cleanups

  0.10.8.1 Duncan Coutts <duncan@community.haskell.org> May 2016

   * Fix Builder output on big-endian architectures
   * Fix building with ghc-7.6 and older

  0.10.8.0 Duncan Coutts <duncan@community.haskell.org> May 2016

   * Use Rabin-Karp substring search for `breakSubstring` and `findSubstring`
   * Improve the performance of `partition` for lazy and strict bytestrings
   * Added `stripPrefix` and `stripSuffix` for lazy and strict bytestrings
   * Fix building with ghc 8.0 & base 4.9 (Semigroup etc)

  0.10.6.0 Duncan Coutts <duncan@community.haskell.org> Mar 2015

   * Rename inlinePerformIO so people don't misuse it
   * Fix a corner case in unfoldrN
   * Export isSuffixOf from D.B.Lazy.Char8
   * Add D.B.Lazy.elemIndexEnd
   * Fix readFile for files with incorrectly reported file size
   * Fix for builder performance with ghc 7.10
   * Fix building with ghc 6.12

  0.10.4.1 Duncan Coutts <duncan@community.haskell.org> Nov 2014

   * Fix integer overflow in concatenation functions
   * Fix strictness of lazy bytestring foldl'
   * Numerous minor documentation fixes
   * Various testsuite improvements
basic-deps:
  base: '>=4.2 && <5'
  integer-gmp: '>=0.2'
  ghc-prim: -any
  deepseq: -any
all-versions:
- '0.9'
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
- 0.9.0.4
- 0.9.1.0
- 0.9.1.1
- 0.9.1.2
- 0.9.1.3
- 0.9.1.4
- 0.9.1.5
- 0.9.1.6
- 0.9.1.7
- 0.9.1.8
- 0.9.1.9
- 0.9.1.10
- 0.9.2.0
- 0.9.2.1
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.10.2.0
- 0.10.4.0
- 0.10.4.1
- 0.10.6.0
- 0.10.8.0
- 0.10.8.1
- 0.10.8.2
- 0.10.10.0
- 0.10.10.1
- 0.10.12.0
author: |-
  Don Stewart,
  Duncan Coutts
latest: 0.10.12.0
description-type: markdown
description: "## ByteString: Fast, Packed Strings of Bytes\n\n[![Build Status](https://secure.travis-ci.org/haskell/bytestring.png?branch=master)](http://travis-ci.org/haskell/bytestring)\n\nThis
  library provides the `Data.ByteString` module -- strict and lazy\nbyte arrays manipulable
  as strings -- providing very time/space-efficient \nstring and IO operations.\n\nFor
  very large data requirements, or constraints on heap size,\n`Data.ByteString.Lazy`
  is provided, a lazy list of bytestring chunks.\nEfficient processing of multi-gigabyte
  data can be achieved this way.\n\nThe library also provides `Data.ByteString.Builder`
  for efficient construction\nof `ByteString` values from smaller pieces during binary
  serialization.\n\nRequirements:\n\n  * Cabal 1.10 or greater\n  * cabal-install\n
  \ * GHC 6.12 or greater\n\nBuilding:\n```\ncabal install\n```\n\nYou can run the
  testsuite as follows:\n```    \ncabal test\n```\n\n### Authors\n`ByteString` was
  derived from the GHC `PackedString` library,\noriginally written by Bryan O'Sullivan,
  and then by Simon Marlow.\nIt was adapted and greatly extended for darcs by David
  Roundy and\nothers. Don Stewart and Duncan Coutts cleaned up and further extended\nthe
  implementation and added the `.Lazy` code. Simon Meier contributed\nthe `Builder`
  feature.\n"
license-name: BSD-3-Clause
