homepage: http://github.com/ekmett/tables/
changelog-type: markdown
hash: bb3716d304cc07f3946ff6afe51287de1061a364e9affa8b36934fa82bb97b1e
test-bench-deps:
  base: -any
  unordered-containers: -any
  filepath: -any
  doctest: ! '>=0.9.1'
  containers: -any
  lens: -any
  transformers: -any
  directory: ! '>=1.0'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: In-memory storage with multiple keys using lenses and traversals
changelog: ! '0.4.1.1

  ----

  * GHC 7.10 compatibility


  0.4.1

  ----


  0.4

  ----


  0.3.1

  -----

  * Improved `Setup.lhs` to work with more versions of `cabal`.

  * Internal compatibility with changes in `lens` 3.10 to `anon`.


  0.3

  ---

  * Instances for `SafeCopy`, `Binary` and `Cereal`

  * Added `insert''`


  0.2

  ---

  * Generalized Autoincrement

  * Better type inference for key types

  * More aggressive inlining


  0.1

  ---

  * Initial public release

  * Repository initialized

'
basic-deps:
  cereal: ! '>=0.3 && <0.5'
  base: ! '>=4.3 && <5'
  comonad: ! '>=4 && <5'
  unordered-containers: ==0.2.*
  containers: ! '>=0.4 && <0.6'
  lens: ! '>=4 && <5'
  safecopy: ! '>=0.6.3 && <0.9'
  binary: ! '>=0.5 && <0.8'
  hashable: ! '>=1.1 && <1.3'
  transformers: ! '>=0.2 && <0.5'
  deepseq: ! '>=1.3 && <1.5'
  template-haskell: ! '>=2.7 && <2.11'
  transformers-compat: ! '>=0.1 && <1'
  profunctors: ! '>=4 && <5'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.1.1
author: Edward A. Kmett
latest: 0.4.1.1
description-type: markdown
description: ! "Tables\n======\n\n[![Build Status](https://secure.travis-ci.org/ekmett/tables.png?branch=master)](http://travis-ci.org/ekmett/tables)\n\nThis
  package provides simple in memory data tables with multiple indices.\n\nExamples\n--------\n\nSo
  if we load `examples/Foo.hs` into `ghci`, we start with:\n\n```haskell\n>>> test\nfromList
  [ Foo {fooId = 1, fooBar = \"One\", fooBaz = 1.0}\n         , Foo {fooId = 2, fooBar
  = \"Two\", fooBaz = 2.0}\n         , Foo {fooId = 3, fooBar = \"Three\", fooBaz
  = 3.0}\n         , Foo {fooId = 4, fooBar = \"Four\", fooBaz = 4.0}\n         ,
  Foo {fooId = 5, fooBar = \"Five\", fooBaz = 5.0} ]\n```\n\nWe use uppercase constructor
  names to match on built-in keys\n\n```haskell\n>>> test ^. with FooId (<) 3\nfromList
  [ Foo {fooId = 1, fooBar = \"One\", fooBaz = 1.0}\n         , Foo {fooId = 2, fooBar
  = \"Two\", fooBaz = 2.0} ]\n```\n\nThen we can use any lowercase field accessor
  (or any other function) to do a non-keyed lookup or filter\n\n```haskell\n>>> test
  ^. with (length . fooBar) (<=) 3\nfromList [ Foo {fooId = 1, fooBar = \"One\", fooBaz
  = 1.0}\n         , Foo {fooId = 2, fooBar = \"Two\", fooBaz = 2.0} ]\n```\n\nYou
  can delete by assigning to that filtered table:\n\n```haskell\n>>> test & with (length
  . fooBar) (<=) 3 .~ empty\nfromList [ Foo {fooId = 3, fooBar = \"Three\", fooBaz
  = 3.0}\n         , Foo {fooId = 4, fooBar = \"Four\", fooBaz = 4.0}\n         ,
  Foo {fooId = 5, fooBar = \"Five\", fooBaz = 5.0} ]\n```\n\nYou can edit the actual
  type of the fields if the table is configured to allow it:\n\n```haskell\n>>> test
  & rows.fooBar_ %~ length\nfromList [ Foo {fooId = 1, fooBar = 3, fooBaz = 1.0}\n
  \        , Foo {fooId = 2, fooBar = 3, fooBaz = 2.0}\n         , Foo {fooId = 3,
  fooBar = 5, fooBaz = 3.0}\n         , Foo {fooId = 4, fooBar = 4, fooBaz = 4.0}\n
  \        , Foo {fooId = 5, fooBar = 4, fooBaz = 5.0} ]\n```\n\nIf you edit multiple
  fields, the edits all take place at the same time. so we can offset or swap a bunch
  of keys:\n\n```haskell\n>>> test & with FooId (>=) 2.rows.fooId_ +~ 1\nfromList
  [ Foo {fooId = 1, fooBar = \"One\", fooBaz = 1.0}\n         , Foo {fooId = 3, fooBar
  = \"Two\", fooBaz = 2.0}\n         , Foo {fooId = 4, fooBar = \"Three\", fooBaz
  = 3.0}\n         , Foo {fooId = 5, fooBar = \"Four\", fooBaz = 4.0}\n         ,
  Foo {fooId = 6, fooBar = \"Five\", fooBaz = 5.0} ]\n```\n\nWe can do grouping by
  arbitrary functions or fields similarly\n\n```haskell\n>>> test ^@.. group (length.fooBar)\n[
  (3, fromList [ Foo {fooId = 1, fooBar = \"One\", fooBaz = 1.0}\n               ,
  Foo {fooId = 2, fooBar = \"Two\", fooBaz = 2.0} ])\n, (4, fromList [ Foo {fooId
  = 4, fooBar = \"Four\", fooBaz = 4.0}\n               , Foo {fooId = 5, fooBar =
  \"Five\", fooBaz = 5.0} ])\n, (5, fromList [Foo {fooId = 3, fooBar = \"Three\",
  fooBaz = 3.0} ])\n]\n```\n\nContact Information\n-------------------\n\nContributions
  and bug reports are welcome!\n\nPlease feel free to contact me through github or
  on the #haskell or #haskell-lens IRC channels on irc.freenode.net.\n\n-Edward Kmett\n"
license-name: BSD-3-Clause
