homepage: http://github.com/ocharles/tasty-rerun
changelog-type: markdown
hash: ba9c19a281535bea566e1044bc02c36ef17abcb310af4b6a149ec11780c7ce35
test-bench-deps: {}
maintainer: ollie@ocharles.org.uk
synopsis: ! 'Run tests by filtering the test tree depending on the result of previous
  test

  runs'
changelog: ! "# 1.1.14\n\n* Support tasty 1.2.\n\n# 1.1.13\n\n* Bump upper bound of
  base.\n\n# 1.1.12\n\n* Bump upper bound of tasty.\n\n# 1.1.11\n\n* Bump upper bound
  of base.\n\n# 1.1.10\n\n* Bump upper bound of tasty.\n\n# 1.1.9\n\n* Bump upper
  bound of tasty.\n\n# 1.1.8\n\n* Bump upper bound of tasty.\n\n# 1.1.7\n\n* Allow
  base < 4.11.\n\n# 1.1.6\n\n* Allow base 4.9 for building with GHC 8.0\n\n# 1.1.5\n\n*
  Supports tasty < 0.12.\n\n# 1.1.4\n\n* Supports base <= 4.9, tagged <= 0.9\n\n#
  1.1.3\n\n* Supports tasty =< 0.11\n\n# 1.1.2\n\n* Allow base 4.7 for building with
  GHC 7.8\n\n# 1.1.1\n\n* Update to work with tasty >= 0.8\n\n# 1.1.0\n\n* The `TestTree`
  is filtered using a custom traversal now, rather than a\n  `TreeFold`. This gives
  better guarantees that the `TestTree` is only\n  reduced and that nodes (such as
  `WithResources`) continue to work. The\n  resulting filtered `TestTree` now has
  the same shape as the original\n  tree, but filtered tests are transformed into
  `TestGroup`s with no tests.\n  This is a fairly major change to how the filtering
  is performed, so this\n  is a new major release, and previous versions are now considered\n
  \ deprecated.\n\n# 1.0.1\n\n* Now supports filtering `TestTree`s that use resources.\n\n#
  1.0.0\n\n* Initial release. Supports the `--rerun-update`, `--rerun-log-file` and\n
  \ `--rerun-filter` options. Supported filters are `new`, `failures`,\n  `exceptions`
  and `successful`.\n"
basic-deps:
  split: ! '>=0.1 && <0.3'
  stm: ! '>=2.4.2'
  base: ! '>=4.6 && <4.13'
  tagged: ! '>=0.7 && <0.9'
  containers: ! '>=0.5.0.0'
  mtl: ! '>=2.1.2'
  transformers: ! '>=0.3.0.0'
  optparse-applicative: ! '>=0.6'
  tasty: ! '>=1.2 && <1.3'
  reducers: ! '>=3.10.1'
all-versions:
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- 1.1.6
- 1.1.7
- 1.1.8
- 1.1.9
- 1.1.10
- 1.1.11
- 1.1.12
- 1.1.13
- 1.1.14
author: Oliver Charles
latest: 1.1.14
description-type: haddock
description: ! 'This ingredient adds the ability to run tests by first filtering the
  test tree

  based on the result of a previous test run. For example, you can use this to

  run only those tests that failed in the last run, or to run only tests that

  have been added since tests were last ran.


  This ingredient is specifically an ingredient *transformer* - given a list of

  ''Tasty.Ingredient''s, ''rerunningTests'' adds the ability for all of these

  ingredients to run against a filtered test tree. This transformer can be

  applied as follows:


  > import Test.Tasty

  > import Test.Tasty.Runners

  >

  > main :: IO ()

  > main =

  >   defaultMainWithIngredients

  >     [ rerunningTests [ listingTests, consoleTestReporter ] ]

  >     tests

  >

  > tests :: TestTree

  > tests = undefined


  This ingredient adds three command line parameters:


  [@--rerun-update@] If specified the results of this test run will be saved to

  the log file at @--rerun-log-file@. If the ingredient does not execute tests

  (for example, @--list-tests@ is used) then the log file will not be

  updated. This option is not enabled by default.  This option does not require

  a value.


  [@--rerun-log-file@] The path to the log file to read previous test

  information from, and where to write new information to (if @--rerun-update@

  is specified). This option defaults to @.tasty-rerun-log@.


  [@--rerun-filter@] Which filters to apply to the ''Tasty.TestTree'' based on

  previous test runs. The value of this option is a comma separated list of the

  following options:


  * @failures@: Only run tests that failed on the previous run.


  * @exceptions@: Only run tests that threw an exception on the previous run.


  * @new@: Only run tests that are new since the previous test run.


  * @successful@: Only run tests that were successful in the previous run.


  Multiple options can be combined and will be taken under disjunction - so

  @--rerun-filter=failures,exceptions@ will run only tests that failed *or*

  threw an exception on the last run.


  Defaults to all filters, which means all tests will be ran.'
license-name: BSD-3-Clause
