homepage: https://github.com/jtdaugherty/tart/
changelog-type: markdown
hash: 27ef985148fee34d18e7870a62431203dc0bcb7e07f9c210732a5b4dc5e58bd9
test-bench-deps: {}
maintainer: cygnus@foobox.com
synopsis: Terminal Art
changelog: ! "\n0.1.2\n-----\n\nBug fixes:\n * Exceptions triggered during an attempt
  to save to an invalid path no\n   longer cause a crash and are now reported to the
  user (#4)\n * Canvas size dialog fields are now clickable (#5)\n\n0.1.1\n-----\n\n
  * Added a new saving UI and keybinding to trigger it (C-s). Previously\n   the only
  opportunity to save was on quitting.\n\n0.1\n---\n\n* First version.\n"
basic-deps:
  microlens-platform: -any
  microlens-th: -any
  bytestring: -any
  base: ! '>=4.9 && <5'
  text: -any
  vty: ! '>=5.17.1'
  array: -any
  text-zipper: -any
  containers: -any
  binary: -any
  mtl: -any
  tart: -any
  brick: ! '>=0.30'
  vector: -any
  directory: -any
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
author: Jonathan Daugherty
latest: '0.1.2'
description-type: markdown
description: ! "tart - terminal art program\n===========================\n\n```\n
  _____  _    ____ _____  _\n(_   _)/ \\  |    (_   _)| |\n  | | / ^ \\ |  O  || |
  \ |_|\n  | |/ ___ \\|  _ < | |   _\n  |_|_/   \\_|_| \\_\\|_|  |_|\n```\n\nTart
  is a program that provides an image-editor-like interface to\ncreating ASCII art
  - in the terminal, with your mouse!\n\n![](screenshots/2.png)\n\nBuilding\n========\n\n`tart`
  is a Haskell project. You'll need\n[GHC](https://www.haskell.org/ghc/) (preferably
  at least 8.2) and\n[cabal-install](http://hackage.haskell.org/package/cabal-install)\n(preferably
  at least 2.0). Then:\n\n```\n$ cabal update\n$ git clone https://github.com/jtdaugherty/tart.git\n$
  cd tart\n$ cabal new-build\n$ $(find . -name tart -type f)\n```\n\nFeatures\n========\n\n-
  Drawing tools: freehand, line, box, flood fill, text string\n- Utility tools: repaint,
  restyle, eyedropper, eraser\n- Multiple graphical styles for boxes\n- Named image
  layers with reordering, visibility toggling\n- Character selection for freehand
  and flood fill tools\n- Set foreground color, background color, and text style independently\n-
  Full mouse interaction and keyboard shortcuts\n- Paste text from clipboard into
  canvas\n- Undo and redo\n- Text styles: bold, blink, underline, reverse video\n-
  Load and save ASCII art files (binary)\n- Save plain versions of ASCII art for embedding
  in documents\n- Save color versions of ASCII art with terminal escape sequences
  for\n  printing to terminals\n- Import existing plaintext files as the basis for
  new ASCII art files\n- Set arbitrary canvas size\n\nTerminal Emulator Support\n=========================\n\n`tart`
  has been tested extensively with the following terminal emulators\nand is known
  to work well with them:\n\n * OS X: `iTerm2`\n * OS X: `Terminal.app`\n\nPlease
  let me know if you use `tart` with another emulator and let me\nknow how well it
  works!\n\nKeybindings\n===========\n\nTools / styles:\n- `0`..`9`: select tool\n-
  `y`: open the attribute style selector\n- `!`/`@`/`#`/`$`: select attribute style\n-
  `f`/`b`: open foreground / background palette selectors\n- `c`: set tool drawing
  character (where applicable)\n- `<`/`>`: decrease / increase tool size (where applicable)\n-
  `Esc`: cancel tool drag (e.g. box)\n\nCanvas:\n- `w`/`a`/`s`/`d`: move canvas\n-
  `C`: re-center canvas\n- `v`: set canvas size\n- `-`/`+`: decrease / increase canvas
  size\n\nLayers:\n- `C-a`: add new layer\n- `C-r`: rename current layer\n- `C-n`/`C-p`:
  select next/previous layer\n- `C-x`: delete selected layer\n- `C-u`/`C-d`: move
  current layer up / down\n- `C-v`: toggle selected layer's visibility\n- `C-l`: toggle
  visibility of layer list\n\nGeneral:\n- `q`: quit (and optionally save)\n- `C-s`:
  save\n- `u`: undo\n- `r`: redo\n- OS paste: paste text into canvas\n\nHow It Works\n============\n\nTart
  requires a terminal with mouse support. You use various tools (such\nas freehand
  drawing, boxes, etc.) to draw ASCII pictures. You can set a\ncurrent foreground
  and background color. You can also resize the drawing\ncanvas to get the desired
  output size. When you're finished, you can\nsave to disk, at which point Tart creates
  three files:\n\n * A binary file (say `foo.tart`) suitable for reloading with Tart
  for\n   further editing later\n * A text file `foo.color.txt` containing the ASCII
  art with terminal\n   color escape sequences, suitable for emitting to terminals\n
  * A text file `foo.plain.txt` containing the ASCII art without terminal\n   color
  escape sequences, suitable for embedding in documentation\n\nContributing\n============\n\nIf
  you decide to contribute, that's great! Here are some guidelines you\nshould consider
  to make submitting patches easier for all concerned:\n\n - If you want to take on
  big things, talk to me first; let's have a\n   design/vision discussion before you
  start coding. Create a GitHub\n   issue and we can use that as the place to hash
  things out.\n - Please make changes consistent with the conventions I've used in
  the\n   codebase.\n - Please adjust or provide Haddock and/or user guide documentation\n
  \  relevant to any changes you make.\n"
license-name: BSD3
