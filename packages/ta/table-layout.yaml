homepage: https://github.com/muesli4/table-layout
changelog-type: ''
hash: 68f654e6553fff629fd3233c278bbe4edd44198a171d26591efa5ec1c8962f3a
test-bench-deps:
  base: ! '>=4.8 && <4.11'
  data-default-class: ! '>=0.1.1 && <0.2'
  hspec: -any
  HUnit: ! '>=1.3'
  data-default-instances-base: ==0.1.*
  QuickCheck: ! '>=2.8 && <2.11'
maintainer: muesli4@gmail.com
synopsis: Layout text as grid or table.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.11'
  data-default-class: ! '>=0.1.1 && <0.2'
  data-default-instances-base: ==0.1.*
all-versions:
- '0.5.1.1'
- '0.5.2.0'
- '0.6.0.0'
- '0.6.0.1'
- '0.7.0.0'
- '0.8.0.0'
- '0.8.0.1'
author: Moritz Bruder
latest: '0.8.0.1'
description-type: markdown
description: ! "# table-layout\n\nThis package can be used to render character-based
  table layouts which should be displayed with monospace fonts.\n\n## Purpose\n\nThe
  focus of this library lies on rendering cells with different styles per column.
  Columns can be fixed in size or expanding to make content fit. Whenever content
  has to be cut, it is possible to indicate this with special strings (these are called
  cut marks). Columns can be positionally aligned as left, right or center and additionally
  aligned at certain character occurences, e.g. to display floating point numbers.
  Those specifications are then applied to a list of rows (currently only `String`
  is supported).\n\nTypically cells are rendered as a grid, but it is also possible
  to render tables with simulated lines, including styling support. Such tables can
  use optional headers and multiple lines per cell. Multi-line content can be aligned
  vertically and text can be rendered justified.\n\n## Tutorial\n\n### Grid layout\n\nRender
  some text rows as grid:\n``` hs\nputStrLn $ gridString [column expand left def def,
  column expand right def def]\n                      [ [\"top left\", \"top right\"]\n
  \                     , [\"bottom left\", \"bottom right\"]\n                      ]\n```\n`gridString`
  will join cells with a whitespace and rows with a newline character. The result
  is not spectacular but does look as expected:\n```\ntop left       top right\nbottom
  left bottom right\n```\nThere are sensible default values for all column specification
  types, even for columns. We could have used just `def` for the first column.\n\n###
  Number columns\n\nAdditionally some common types are provided. A particularly useful
  one is `numCol`:\n``` hs\nmapM_ putStrLn $ gridLines [numCol] (map ((: []) . show)
  [1.2, 100.5, 0.037, 5000.00001])\n```\nThis will display the given numbers as a
  dot-aligned single column:\n```\n   1.2    \n 100.5    \n   3.7e-2 \n5000.00001\n```\n\n###
  Improving readability of grids\n\nBig grids are usually not that readable, so to
  improve their readability two functions are provided:\n\n- `altLines` will alternate
  functions applied to lines.\n- `checkeredCells` will checker cells with 2 different
  functions.\n\nA good way to use this would be the [ansi-terminal package][], provided
  you are using a terminal to output your text.\n\n### Table layout\n\nGrids are fine,
  but sometimes we want to explicitly display a table, e.g., as output in a database
  application. This is where ```tableString``` comes in handy:\n\n``` hs\nputStrLn
  $ tableString [def , numCol]\n                       unicodeRoundS\n                       def\n
  \                      [ rowG [\"Jack\", \"184.74\"]\n                       , rowG
  [\"Jane\", \"162.2\"]\n                       ]\n```\nA row group is a group of
  rows which form one cell. This means that each line of a group is not visually seperated
  from the other ones. In addition we specify the style and an optional header (which
  is not used by default). This will yield the following result:\n\n```\n╭──────┬────────╮\n│
  Jack │ 184.74 │\n├──────┼────────┤\n│ Jane │ 162.2  │\n╰──────┴────────╯\n```\n\n###
  Table headers\n\nOptionally we can use table headers. `titlesH` will center titles,
  whereas `fullH` allows more control:\n\n``` hs\nputStrLn $ tableString [fixedLeftCol
  10, column (fixed 10) center dotAlign def]\n                       unicodeS\n                       (titlesH
  [\"Text\", \"Number\"])\n                       [ rowG [\"A very long text\", \"0.42000000\"]\n
  \                      , rowG [\"Short text\", \"100200.5\"]\n                       ]\n```\nHeaders
  are always displayed with a different style than the other columns (centered by
  default). A maximum column width is respected, otherwise a header may acquire additional
  space.\n```\n┌────────────┬────────────┐\n│    Text    │   Number   │\n╞════════════╪════════════╡\n│
  A very lo… │   0.42000… │\n├────────────┼────────────┤\n│ Short text │ …00.5      │\n└────────────┴────────────┘\n```\n###
  Vertical positioning and justified text\nBecause a row group consists of multiple
  lines, we may also want to align the content of cells vertically, especially when
  we don't know how many lines there will be. The following piece of code will display
  a left-justified text alongside the length of the text:\n``` hs\nlet txt = \"Lorem
  ipsum ...\" \nin putStrLn $ tableString [fixedLeftCol 50, numCol]\n                          asciiS\n
  \                         (titlesH [\"Text\", \"Length\"])\n                          [
  colsAllG center [ justifyText 50 txt\n                                            ,
  [show $ length txt]\n                                            ]\n                          ]\n```\n`colsAllG`
  will merge the given columns into a row group with the given positioning:\n```\n+----------------------------------------------------+--------+\n|
  \                       Text                        | Length |\n+----------------------------------------------------+--------+\n|
  Lorem  ipsum dolor sit amet, consectetur adipisici |        |\n| elit,  sed eiusmod
  \ tempor incidunt  ut labore  et |        |\n| dolore magna aliqua. Ut enim ad minim
  veniam, quis |        |\n| nostrud   exercitation  ullamco  laboris  nisi  ut |
  \       |\n| aliquid  ex ea  commodi consequat.  Quis aute iure |    429 |\n| reprehenderit
  \  in  voluptate  velit  esse  cillum |        |\n| dolore  eu fugiat  nulla pariatur.
  \ Excepteur sint |        |\n| obcaecat cupiditat non proident, sunt in culpa qui
  |        |\n| officia deserunt mollit anim id est laborum.       |        |\n+----------------------------------------------------+--------+\n```\nAdditionally,
  the positioning can be specified for each column with `colsG`. For grids `colsAsRows`
  and `colsAsRowsAll` are provided.\n\n## Get in contact\n\nPlease report issues and
  suggestions to the GitHub page. I'm always open for feedback (good and bad).\n\n[ansi-terminal
  package]: http://hackage.haskell.org/package/ansi-terminal\n"
license-name: BSD3
