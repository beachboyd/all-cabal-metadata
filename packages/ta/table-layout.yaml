homepage: https://github.com/muesli4/table-layout
changelog-type: markdown
hash: 172b8b3a06c992839a781b77e42bbce689ba87d92c260acb61d187f7e6aad7f2
test-bench-deps:
  base: '>=4.9 && <4.15'
  data-default-class: '>=0.1.1 && <0.2'
  hspec: -any
  HUnit: '>=1.3'
  data-default-instances-base: ==0.1.*
  QuickCheck: '>=2.8 && <2.14'
maintainer: muesli4@gmail.com
synopsis: Format tabular data as grid or table.
changelog: |+
  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).

  ## [Unreleased]

  ## [0.9.1.0] - 2020-12-21

  ### Fixed

  - Fix recently introduced errors which made text justification completely
    unusable.  Add test coverage for relevant functions. (#15)

  ## [0.9.0.2] - 2020-12-20

  ### Fixed

  - Fix error in `fitWords` that was reversing the word order.  This also affects
    `justify` and `justifyWords`. (#14)

  ## [0.9.0.1] - 2020-06-14

  ### Added

  - Provide functions for concatenation `concatRow`, `concatLines`, and
    `concatGrid`. (#10)

  ### Fixed

  - Fix an error with `applyCutInfo` that created a string of wrong length in
    case the cut mark was of unequal length and the view was outside of the cell.


  ## [0.9.0.0] - 2020-04-10

  ### Added

  - Add `Text.Layout.Table.Cell.Formatted`. A `Cell` instance is provided that
    enables formatting text correctly with inline text formatting commands.
  - Add helpers to generate tables for Pandoc in the module
    `Text.Layout.Table.Pandoc`.
  - Add `Cell` type class: This enables using different input string types.
  - Add `StringBuilder` type class. This enables generating output in different
    ways.
  - Add test case for left-biased trim.

  ### Changed

  - Change input type of a lot of functions to use the `Cell` type class. This
    might break some code but will require only a type annotation to fix.
  - Rework and simplify formatting functions with `Cell` and `StringBuilder`. This
    includes improvements in test coverage.
  - Reorganize module structure:
      * Modules of types used for specification do now start with
        `Text.Layout.Table.Spec.`.
      * Move a lot of the code in `Text.Layout.Table` into sub-modules.

  ### Fixed

  - Fix an error with text justification for lines that contain only one word and
    add a test case. (#6)
  - Fix an error where cut marks where applied wrongly on the right side.

basic-deps:
  base: '>=4.9 && <4.15'
  data-default-class: '>=0.1.1 && <0.2'
  data-default-instances-base: ==0.1.*
all-versions:
- 0.5.1.1
- 0.5.2.0
- 0.6.0.0
- 0.6.0.1
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.0.5
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
author: Moritz Bruder
latest: 0.9.1.0
description-type: markdown
description: "# table-layout [![Hackage version](https://img.shields.io/hackage/v/table-layout.svg?label=Hackage)](https://hackage.haskell.org/package/table-layout)\n\nThis
  package can be used to render character-based table layouts which should be displayed
  with monospace fonts.\n\n## Purpose\n\nThe focus of this library lies on rendering
  cells with different styles per column:\n* Columns can be fixed in size or expanding
  to make content fit.\n* Whenever content has to be cut, it is possible to indicate
  this with special strings, which are called cut marks.\n* Columns can be positionally
  aligned as `left`, `right` or `center`.\n* Columns may also be aligned at certain
  character occurence with respect to the other cells of that column. One such purpose
  is to display floating point numbers.\n\nThose specifications are then applied to
  a list of rows. A row is simply a list of a cell. A cell is a type that implements
  the `Cell` type class.\n\nTypically cells are rendered as a grid, but it is also
  possible to render tables with simulated lines, including styling support. Such
  tables can use optional headers and multiple lines per cell. Multi-line content
  can be aligned vertically, with respect to the other horizontally adjacent cells,
  and text can be rendered justified.\n\n## Tutorial\n\n### Grid layout\n\nRender
  some text rows as grid:\n``` hs\n> putStrLn $ gridString [column expand left def
  def, column expand right def def]\n                        [ [\"top left\", \"top
  right\"]\n                        , [\"bottom left\", \"bottom right\"]\n                        ]\n```\n`gridString`
  will join cells with a whitespace and rows with a newline character. The result
  is not spectacular but does look as expected:\n```\ntop left       top right\nbottom
  left bottom right\n```\nThere are sensible default values for all column specification
  types, even for columns. We could have used just `def` for the first column.\n\n###
  Number columns\n\nAdditionally some common types are provided. A particularly useful
  one is `numCol`:\n``` hs\n> import Numeric\n> let toRow d = [showFFloat Nothing
  d \"\"]\n> mapM_ putStrLn $ gridLines [numCol] $ toRow <$> [1.2, 100.5, 0.037, 5000.00001]\n```\nThis
  will display the given numbers as a dot-aligned single column:\n```\n   1.2    \n
  100.5    \n   0.037\n5000.00001\n```\n\n### Improving readability of grids\n\nBig
  grids are usually not that readable. To improve their readability, two functions
  are provided:\n\n* `altLines` will apply the given function in an alternating pattern.
  E.g., color every second row grey.\n* `checkeredCells` will checker cells with 2
  different functions.\n\nA good way to use this would be the [ansi-terminal package][],
  provided you are using a terminal to output your text. Another way to introduce
  color into cells is the `Formatted` type:\n```\n> :set -XOverloadedStrings\n> let
  red s = formatted \"\\ESC[31m\" s \"\\ESC[0m\"\n> gridString [def, numCol] [[\"Jim\",
  \"1203\"], [\"Jane\", \"523\"], [\"Jack\", red \"-959000\"]]\n```\nThis way the
  color can depend on the cell content.\n\n### Table layout\n\nFor more complex data,
  grids do not offer as much visibility. Sometimes we want to explicitly display a
  table, for example, as output in a database application. `tableLines` and `tableString`
  are used to create a table.\n\n``` hs\nputStrLn $ tableString [def , numCol]\n                       unicodeRoundS\n
  \                      def\n                       [ rowG [\"Jack\", \"184.74\"]\n
  \                      , rowG [\"Jane\", \"162.2\"]\n                       ]\n```\nA
  row group is a group of rows which are not visually separated from each other. Thus
  multiple rows form one cell.\n\nIn addition we specify the style and an optional
  header. By default the header is not visible. This will yield the following result:\n```\n╭──────┬────────╮\n│
  Jack │ 184.74 │\n├──────┼────────┤\n│ Jane │ 162.2  │\n╰──────┴────────╯\n```\n\n###
  Table headers\n\nOptionally we can use table headers. `titlesH` will center titles,
  whereas `fullH` allows more control:\n\n``` hs\nputStrLn $ tableString [fixedLeftCol
  10, column (fixed 10) center dotAlign def]\n                       unicodeS\n                       (titlesH
  [\"Text\", \"Number\"])\n                       [ rowG [\"A very long text\", \"0.42000000\"]\n
  \                      , rowG [\"Short text\", \"100200.5\"]\n                       ]\n```\nHeaders
  are always displayed with a different style than the other columns (centered by
  default). A maximum column width is respected, otherwise a header may acquire additional
  space.\n```\n┌────────────┬────────────┐\n│    Text    │   Number   │\n╞════════════╪════════════╡\n│
  A very lo… │   0.42000… │\n├────────────┼────────────┤\n│ Short text │ …00.5      │\n└────────────┴────────────┘\n```\n###
  Vertical positioning and justified text\nBecause a row group consists of multiple
  lines, we may also want to align the content of cells vertically, especially when
  we don't know how many lines there will be. The following piece of code will display
  a left-justified text alongside the length of the text:\n``` hs\nlet txt = \"Lorem
  ipsum ...\" \nin putStrLn $ tableString [fixedLeftCol 50, numCol]\n                          asciiS\n
  \                         (titlesH [\"Text\", \"Length\"])\n                          [
  colsAllG center [ justifyText 50 txt\n                                            ,
  [show $ length txt]\n                                            ]\n                          ]\n```\n`colsAllG`
  will merge the given columns into a row group with the given positioning:\n```\n+----------------------------------------------------+--------+\n|
  \                       Text                        | Length |\n+----------------------------------------------------+--------+\n|
  Lorem  ipsum dolor sit amet, consectetur adipisici |        |\n| elit,  sed eiusmod
  \ tempor incidunt  ut labore  et |        |\n| dolore magna aliqua. Ut enim ad minim
  veniam, quis |        |\n| nostrud   exercitation  ullamco  laboris  nisi  ut |
  \       |\n| aliquid  ex ea  commodi consequat.  Quis aute iure |    429 |\n| reprehenderit
  \  in  voluptate  velit  esse  cillum |        |\n| dolore  eu fugiat  nulla pariatur.
  \ Excepteur sint |        |\n| obcaecat cupiditat non proident, sunt in culpa qui
  |        |\n| officia deserunt mollit anim id est laborum.       |        |\n+----------------------------------------------------+--------+\n```\nAdditionally,
  the positioning can be specified for each column with `colsG`. For grids `colsAsRows`
  and `colsAsRowsAll` are provided.\n\n## Get in contact\n\n* Report issues and suggestions
  to the GitHub page.\n* Any kind of feedback is welcome.\n* Contributions are much
  appreciated. Contact me first for bigger changes.\n\n[ansi-terminal package]: http://hackage.haskell.org/package/ansi-terminal\n"
license-name: BSD-3-Clause
