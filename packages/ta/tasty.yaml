homepage: https://github.com/feuerbach/tasty
changelog-type: markdown
hash: 1a49a10fe9b16ae4169c2b0630c7ec6e3c11fcd75771b5dd9946d02b30950cba
test-bench-deps: {}
maintainer: Roman Cheplyaka <roma@ro-che.info>
synopsis: Modern and extensible testing framework
changelog: ! "Changes\n=======\n\nVersion 1.0.1\n-------------\n\n* Add a `safeReadBool`
  function, for case-insensitive parsing of boolean options\n* Convert all tasty's
  own options to case-insensitive\n\nVersion 1.0.0.1\n---------------\n\nAdjust lower
  bounds for the dependencies (mtl and optparse-applicative)\n\nVersion 1.0\n-----------\n\n*
  New pattern language (see the README and/or the [blog post][awk])\n* Make the `clock`
  dependency optional\n\n[awk]: https://ro-che.info/articles/2018-01-08-tasty-new-patterns\n\nVersion
  0.12.0.1\n----------------\n\nFix compatibility with GHC 8.4\n\nVersion 0.12\n------------\n\nBackward
  compat breaking revision of `Test.Tasty.Ingredients.ConsoleReporter`\nthat exposes
  the name of tests/groups.\n\nVersion 0.11.3\n--------------\n\nExpose and document
  several of the internals of\n`Test.Tasty.Ingredients.ConsoleReporter`.\n\nVersion
  0.11.2.5\n----------------\n\nFix compatibility with GHC 7.4\n\nVersion 0.11.2.4\n----------------\n\n1.
  Make the `--quiet` mode more efficient on a large number of tests\n2. Fix a bug
  where a cursor would disappear if the test suite was terminated by\n   a signal
  other than SIGINT.\n\nVersion 0.11.2.3\n----------------\n\nMake filtering tests
  (`-p`) work faster\n\nVersion 0.11.2.2\n----------------\n\nFix a critical bug in
  the quiet mode (`-q`/`--quiet`):\nthe exit status could be wrong or the test suite
  could hang.\n\nVersion 0.11.2.1\n----------------\n\nFix compatibility with the
  latest `unbounded-delays`\n\nVersion 0.11.2\n--------------\n\nAdd `composeReporters`,
  a function to run multiple reporter ingredients\n\nVersion 0.11.1\n--------------\n\nIntroduce
  `mkOptionCLParser` and `mkFlagCLParser`\n\nVersion 0.11.0.4\n----------------\n\nFix
  compatibility with `optparse-applicative-0.13`\n\nVersion 0.11.0.3\n----------------\n\nSwitch
  from `regex-tdfa-rc` to `regex-tdfa`, which got a new maintainer.\n\nVersion 0.11.0.2\n----------------\n\nClarify
  `IsTest`’s specification with regard to exceptions\n\nVersion 0.11.0.1\n----------------\n\nUse
  monotonic clock when measuring durations.\n\nVersion 0.11\n------------\n\nNew field
  `resultShortDescription` of `Result`\n\nVersion 0.10.1.2\n----------------\n\n*
  Improve the docs\n* Fix compatibility with GHC HEAD\n\nVersion 0.10.1.1\n----------------\n\n*
  Prevent parsing non-positive number of threads via program options (#104)\n* Buffer
  output to avoid slowdowns when printing test results (#101)\n* Default to using
  the maximum number of available cores for test execution\n\nVersion 0.10.1\n--------------\n\nExport
  `Test.Tasty.Runners.formatMessage`\n\nVersion 0.10.0.4\n----------------\n\nDon't
  output ANSI codes for the Emacs terminal emulator\n\nVersion 0.10.0.3\n----------------\n\nBetter
  handle the situation when there are no ingredients to run\n\nVersion 0.10.0.2\n----------------\n\nSplit
  the changelog into per-project changelogs\n\nVersion 0.10.0.1\n----------------\n\nUpdate
  to optparse-applicative 0.11\n\nVersion 0.10\n------------\n\n* Add the `--color`
  option\n* Timings\n    * Introduce the `Time` type synonym\n    * Change the types
  of `launchTestTree` and `TestReporter` to accept the\n      total run time\n    *
  `consoleTestReporter` now displays the timings\n\nVersion 0.9.0.1\n---------------\n\nUpgrade
  to optparse-applicative-0.10.\n\nVersion 0.8.1.3\n---------------\n\nBe careful
  not to export the `Show (a -> b)` instance, see\n<https://github.com/feuerbach/tasty/issues/71>\n\nVersion
  0.8.1.2\n---------------\n\nHide cursor when running tests\n\nVersion 0.8.1.1\n---------------\n\nFix
  for GHC 7.9\n\nVersion 0.8.0.4\n---------------\n\nRemove the old 'colors' flag
  description from the cabal file\n\nVersion 0.8.0.2\n---------------\n\nMake ansi-terminal
  an unconditional dependency\n\nVersion 0.8\n-----------\n\n* `Test.Tasty.Ingredients`
  is now exposed\n* `Test.Tasty.Ingredients.Basic` is added, which exports the ingredients
  defined\n    in the `tasty` package. These exports should now be used instead of
  ones\n    exported from `Test.Tasty.Runners`\n* The `Result` type is now structured
  a bit differently. Providers now should\n  use `testPassed` and `testFailed` functions
  instead of constructing `Result`s\n  directly.\n* Add «quiet mode» (see README)\n*
  Add «hide successes» mode (see README)\n* Add short command-line options: `-j` for
  `--num-threads`, `-p` for `--pattern`\n* Add timeout support\n* `AppMonoid` is renamed
  to `Traversal` for consistency with the 'reducers'\n  package. Another similar wrapper,
  `Ap`, is introduced.\n* Fix a resources bug (resources were not released if the
  test suite was\n  interrupted)\n* The type of `launchTestTree` is changed. It now
  takes a continuation as an\n  argument. This is necessary to fix the bug mentioned
  above.\n* Add `flagCLParser` to be used as the `optionCLParser` implementation for\n
  \ boolean options.\n* Add the ability to pass options via environment\n\nVersion
  0.7\n-----------\n\n* Use `regex-tdfa` instead of `regex-posix` (which is a native\n
  \ implementation, and as such is more portable)\n* `foldTestTree` now takes the
  algebra in the form of a record rather than\n  multiple arguments, to minimize breakage
  when new nodes are added or\n  existing ones change\n* `withResource` now passes
  the IO action to get the resource to the inner test tree\n\nVersion 0.6\n-----------\n\n*
  Better handling of exceptions that arise during resource creation or\n  disposal\n*
  Expose the `AppMonoid` wrapper\n* Add `askOption` and `inludingOptions`\n\nVersion
  0.5.2.1\n---------------\n\nDepend on ansi-terminal >= 0.6.1. This fixes some issues
  with colors on Windows.\n\nVersion 0.5.2\n-------------\n\n* Export `Result` and
  `Progress` from `Test.Tasty.Runners`\n* Make it clear that only GHC 7.4+ is supported\n\nVersion
  0.5.1\n-------------\n\nExport `ResourceSpec` from `Test.Tasty.Runners`\n\nVersion
  0.5\n-----------\n\nAdd a capability to acquire and release resources. See the «Resources»
  section\nin the `Test.Tasty` docs.\n\nFor the end users, the API is backwards-compatible.\n\nTest
  runners may have to be adjusted — there is a new constructor of `TestTree`\nand
  a new argument of `foldTestTree`.\n\nVersion 0.4.2\n-------------\n\nAdd `defaultIngredients`\n\nVersion
  0.4.1.1\n---------------\n\nPrint the failure description in red\n\nVersion 0.4.0.1\n---------------\n\nFix
  a bug ([#25](https://github.com/feuerbach/tasty/issues/25))\n\nVersion 0.4\n-----------\n\nThe
  big change in this release is introduction of ingredients, which is a\nreplacement
  for runners. But unless you have a custom runner, this is unlikely\nto affect you
  much.\n\nThe `Ingredient` data type has replaced the `Runner` type.\n\nThe following
  functions have been renamed and possibly changed their types:\n\n* `defaultMainWithRunner`
  → `defaultMainWithIngredients`\n* `treeOptionParser` → `suiteOptionParser`\n* `getTreeOptions`
  → `treeOptions`\n* `runUI` → `consoleTestReporter`\n\nAdded in this release:\n\n*
  `suiteOptions`\n* `optionParser`\n* functions operating on ingredients\n* `testsNames`\n*
  the `listingTests` ingredient and its option, `ListTests`\n\n`NumThreads` is no
  longer a core option, but is automatically included in the\ntest reporting ingredients
  (see its haddock).\n\nVersion 0.3.1\n-------------\n\n* Proper reporting of (some)
  non-terminating tests (#15)\n* Upgrade to optparse-applicative 0.6\n\nVersion 0.3\n-----------\n\n*
  Restrict dependency versions\n* Fix a bug where non-terminating test would lead
  to a deadlock (#15)\n\nVersion 0.2\n-----------\n\n* Add an `execRunner` function\n*
  Make `Runner` return `IO Bool`\n\nVersion 0.1.1\n-------------\n\nSet lower bound
  on optparse-applicative dependency version\n"
basic-deps:
  unix: -any
  stm: ! '>=2.3'
  base: ! '>=4.5 && <5'
  clock: ! '>=0.4.4.0'
  unbounded-delays: ! '>=0.1'
  async: ! '>=2.0'
  tagged: ! '>=0.5'
  containers: -any
  ansi-terminal: ! '>=0.6.2'
  mtl: ! '>=2.1.3.1'
  optparse-applicative: ! '>=0.14'
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.3'
- '0.3.1'
- '0.4'
- '0.4.0.1'
- '0.4.1.1'
- '0.4.2'
- '0.5'
- '0.5.1'
- '0.5.2'
- '0.5.2.1'
- '0.6'
- '0.7'
- '0.8'
- '0.8.0.2'
- '0.8.0.4'
- '0.8.1.1'
- '0.8.1.2'
- '0.8.1.3'
- '0.9.0.1'
- '0.10'
- '0.10.0.1'
- '0.10.0.2'
- '0.10.0.3'
- '0.10.0.4'
- '0.10.1'
- '0.10.1.1'
- '0.10.1.2'
- '0.11'
- '0.11.0.1'
- '0.11.0.2'
- '0.11.0.3'
- '0.11.0.4'
- '0.11.1'
- '0.11.2'
- '0.11.2.1'
- '0.11.2.2'
- '0.11.2.3'
- '0.11.2.4'
- '0.11.2.5'
- '0.11.3'
- '0.12'
- '0.12.0.1'
- '1.0'
- '1.0.0.1'
- '1.0.1'
author: Roman Cheplyaka <roma@ro-che.info>
latest: '1.0.1'
description-type: markdown
description: ! "# Tasty\n\n**Tasty** is a modern testing framework for Haskell.\n\nIt
  lets you combine your unit tests, golden tests, QuickCheck/SmallCheck\nproperties,
  and any other types of tests into a single test suite.\n\nFeatures:\n\n* Run tests
  in parallel but report results in a deterministic order\n* Filter the tests to be
  run using patterns specified on the command line\n* Hierarchical, colored display
  of test results\n* Reporting of test statistics\n* Acquire and release resources
  (sockets, temporary files etc.) that can be\n  shared among several tests\n* Extensibility:
  add your own test providers and ingredients (runners) above and\n  beyond those
  provided\n\nTo find out what's new, read the **[change log][]**.\n\n[change log]:
  https://github.com/feuerbach/tasty/blob/master/core/CHANGELOG.md\n\n## Example\n\nHere's
  how your `test.hs` might look like:\n\n```haskell\nimport Test.Tasty\nimport Test.Tasty.SmallCheck
  as SC\nimport Test.Tasty.QuickCheck as QC\nimport Test.Tasty.HUnit\n\nimport Data.List\nimport
  Data.Ord\n\nmain = defaultMain tests\n\ntests :: TestTree\ntests = testGroup \"Tests\"
  [properties, unitTests]\n\nproperties :: TestTree\nproperties = testGroup \"Properties\"
  [scProps, qcProps]\n\nscProps = testGroup \"(checked by SmallCheck)\"\n  [ SC.testProperty
  \"sort == sort . reverse\" $\n      \\list -> sort (list :: [Int]) == sort (reverse
  list)\n  , SC.testProperty \"Fermat's little theorem\" $\n      \\x -> ((x :: Integer)^7
  - x) `mod` 7 == 0\n  -- the following property does not hold\n  , SC.testProperty
  \"Fermat's last theorem\" $\n      \\x y z n ->\n        (n :: Integer) >= 3 SC.==>
  x^n + y^n /= (z^n :: Integer)\n  ]\n\nqcProps = testGroup \"(checked by QuickCheck)\"\n
  \ [ QC.testProperty \"sort == sort . reverse\" $\n      \\list -> sort (list ::
  [Int]) == sort (reverse list)\n  , QC.testProperty \"Fermat's little theorem\" $\n
  \     \\x -> ((x :: Integer)^7 - x) `mod` 7 == 0\n  -- the following property does
  not hold\n  , QC.testProperty \"Fermat's last theorem\" $\n      \\x y z n ->\n
  \       (n :: Integer) >= 3 QC.==> x^n + y^n /= (z^n :: Integer)\n  ]\n\nunitTests
  = testGroup \"Unit tests\"\n  [ testCase \"List comparison (different length)\"
  $\n      [1, 2, 3] `compare` [1,2] @?= GT\n\n  -- the following test does not hold\n
  \ , testCase \"List comparison (same length)\" $\n      [1, 2, 3] `compare` [1,2,2]
  @?= LT\n  ]\n```\n\nAnd here is the output of the above program:\n\n![](https://raw.github.com/feuerbach/tasty/master/screenshot.png)\n\n(Note
  that whether QuickCheck finds a counterexample to the third property is\ndetermined
  by chance.)\n\n## Packages\n\n[tasty][] is the core package. It contains basic definitions
  and APIs and a\nconsole runner.\n\n[tasty]: http://hackage.haskell.org/package/tasty\n\nIn
  order to create a test suite, you also need to install one or more «providers» (see\nbelow).\n\n###
  Providers\n\nThe following providers exist:\n\n* [tasty-hunit](http://hackage.haskell.org/package/tasty-hunit)
  — for unit tests\n  (based on [HUnit](http://hackage.haskell.org/package/HUnit))\n*
  [tasty-golden][] — for golden\n  tests, which are unit tests whose results are kept
  in files\n* [tasty-smallcheck](http://hackage.haskell.org/package/tasty-smallcheck)
  —\n  exhaustive property-based testing\n  (based on [smallcheck](http://hackage.haskell.org/package/smallcheck))\n*
  [tasty-quickcheck](http://hackage.haskell.org/package/tasty-quickcheck) — for randomized\n
  \ property-based testing (based on [QuickCheck](http://hackage.haskell.org/package/QuickCheck))\n*
  [tasty-hedgehog](https://github.com/qfpl/tasty-hedgehog) — for randomized\n  property-based
  testing (based on [Hedgehog](http://hackage.haskell.org/package/hedgehog))\n* [tasty-hspec](http://hackage.haskell.org/package/tasty-hspec)
  — for\n  [Hspec](http://hspec.github.io/) tests\n* [tasty-program](http://hackage.haskell.org/package/tasty-program)
  — run\n  external program and test whether it terminates successfully\n\n[tasty-golden]:
  http://hackage.haskell.org/package/tasty-golden\n\nIt's easy to create custom providers
  using the API from `Test.Tasty.Providers`.\n\n### Ingredients\n\nIngredients represent
  different actions that you can perform on your test suite.\nOne obvious ingredient
  that you want to include is one that runs tests and\nreports the progress and results.\n\nAnother
  standard ingredient is one that simply prints the names of all tests.\n\nIt is possible
  to write custom ingredients using the API from `Test.Tasty.Runners`.\n\nSome ingredients
  that can enhance your test suite are:\n\n* [tasty-ant-xml](http://hackage.haskell.org/package/tasty-ant-xml)
  adds a\n  possibility to write the test results in a machine-readable XML format,
  which\n  is understood by various CI systems and IDEs\n* [tasty-rerun](http://hackage.haskell.org/package/tasty-rerun)
  adds support for\n  minimal test reruns by recording previous test runs and using
  this information\n  to filter the test tree. For example, you can use this ingredient
  to only run\n  failed tests, or only run tests that threw an exception.\n* [tasty-html](http://hackage.haskell.org/package/tasty-html)
  adds the\n  possibility to write the test results as a HTML file\n* [tasty-stats](http://hackage.haskell.org/package/tasty-stats)
  adds the\n  possibility to collect statistics of the test suite in a CSV file.\n\n###
  Other packages\n\n* [tasty-th](http://hackage.haskell.org/package/tasty-th) automatically\ndiscovers
  tests based on the function names and generate the boilerplate code for\nyou\n*
  [tasty-hunit-adapter](http://hackage.haskell.org/package/tasty-hunit-adapter)\n
  \ converts existing HUnit test suites into tasty test suites\n* [tasty-discover](https://github.com/lwm/tasty-discover)
  automatically discovers\nyour tests.\n* [tasty-expected-failure](https://github.com/nomeata/tasty-expected-failure)
  provides\ntest markers for when you expect failures or wish to ignore tests.\n\n\n##
  Options\n\nOptions allow one to customize the run-time behavior of the test suite,
  such\nas:\n\n* mode of operation (run tests, list tests, run tests quietly etc.)\n*
  which tests are run (see «Patterns» below)\n* parameters of individual providers
  (like depth of search for SmallCheck)\n\n### Setting options\n\nThere are two main
  ways to set options:\n\n#### Runtime\n\nWhen using the standard console runner,
  the options can be passed on the\ncommand line or via environment variables. To
  see the available options, run\nyour test suite with the `--help` flag. The output
  will look something like this\n(depending on which ingredients and providers the
  test suite uses):\n\n```\n% ./test --help\nMmm... tasty test suite\n\nUsage: test
  [-p|--pattern ARG] [-t|--timeout ARG] [-l|--list-tests]\n            [-j|--num-threads
  ARG] [-q|--quiet] [--hide-successes]\n            [--color never|always|auto] [--smallcheck-depth
  NUMBER]\n            [--quickcheck-tests NUMBER] [--quickcheck-replay SEED]\n            [--quickcheck-show-replay]
  [--quickcheck-max-size NUMBER]\n            [--quickcheck-max-ratio NUMBER] [--quickcheck-verbose]\n\nAvailable
  options:\n  -h,--help                Show this help text\n  -p,--pattern ARG         Select
  only tests which satisfy a pattern or awk\n                           expression\n
  \ -t,--timeout ARG         Timeout for individual tests (suffixes: ms,s,m,h;\n                           default:
  s)\n  -l,--list-tests          Do not run the tests; just print their names\n  -j,--num-threads
  ARG     Number of threads to use for tests execution\n  -q,--quiet               Do
  not produce any output; indicate success only by\n                           the
  exit code\n  --hide-successes         Do not print tests that passed successfully\n
  \ --color never|always|auto\n                           When to use colored output
  (default: 'auto')\n  --smallcheck-depth NUMBER\n                           Depth
  to use for smallcheck tests\n  --quickcheck-tests NUMBER\n                           Number
  of test cases for QuickCheck to generate\n  --quickcheck-replay SEED Random seed
  to use for replaying a previous test run\n                           (use same --quickcheck-max-size)\n
  \ --quickcheck-show-replay Show a replay token for replaying tests\n  --quickcheck-max-size
  NUMBER\n                           Size of the biggest test cases quickcheck generates\n
  \ --quickcheck-max-ratio NUMBER\n                           Maximum number of discared
  tests per successful test\n                           before giving up\n  --quickcheck-verbose
  \    Show the generated test cases\n```\n\nEvery option can be passed via environment.
  To obtain the environment variable\nname from the option name, replace hyphens `-`
  with underscores `_`, capitalize\nall letters, and prepend `TASTY_`. For example,
  the environment equivalent of\n`--smallcheck-depth` is `TASTY_SMALLCHECK_DEPTH`.
  To turn on a switch (such as\n`TASTY_HIDE_SUCCESSES`), set the variable to `True`.\n\nNote
  on boolean options: by convention, boolean (\"on/off\") options are specified\nusing
  a switch on the command line, for example `--quickcheck-show-replay`\ninstead of
  `--quickcheck-show-replay=true`. However, when\npassed via the environment, the
  option value needs to be `True` or `False`\n(case-insensitive), e.g. `TASTY_QUICKCHECK_SHOW_REPLAY=true`.\n\nIf
  you're using a non-console runner, please refer to its documentation to find\nout
  how to configure options during the run time.\n\n#### Compile-time\n\nYou can also
  specify options in the test suite itself, using\n`localOption`. It can be applied
  not only to the whole test tree, but also to\nindividual tests or subgroups, so
  that different tests can be run with\ndifferent options.\n\nIt is possible to combine
  run-time and compile-time options, too, by using\n`adjustOption`. For example, make
  the overall testing depth configurable\nduring the run time, but increase or decrease
  it slightly for individual\ntests.\n\nThis method currently doesn't work for ingredient
  options, such as `--quiet` or\n`--num-threads`. You can set them by setting the
  corresponding environment\nvariable before calling `defaultMain`:\n\n<a id=\"num_threads_example\">\n\n```haskell\nimport
  Test.Tasty\nimport System.Environment\n\nmain = do\n  setEnv \"TASTY_NUM_THREADS\"
  \"1\"\n  defaultMain _\n```\n\n### Patterns\n\nIt is possible to restrict the set
  of executed tests using the `-p/--pattern`\noption.\n\nTasty patterns are very powerful,
  but if you just want to quickly run tests containing `foo`\nsomewhere in their name
  or in the name of an enclosing test group, you can just\npass `-p foo`. If you need
  more power, or if that didn't work as expected, read\non.\n\nA pattern is an [awk
  expression][awk]. When the expression is evaluated, the field `$1`\nis set to the
  outermost test group name, `$2` is set to the next test group\nname, and so on up
  to `$NF`, which is set to the test's own name. The field `$0`\nis set to all other
  fields concatenated using `/` as a separator.\n\n[awk]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#tag_20_06_13_02\n\nAs
  an example, consider a test inside two test groups:\n\n```\n  testGroup \"One\"
  [ testGroup \"Two\" [ testCase \"Three\" _ ] ]\n```\n\nWhen a pattern is evaluated
  for the above test case, the available fields and variables are:\n\n    $0 = \"One/Two/Three\"\n
  \   $1 = \"One\"\n    $2 = \"Two\"\n    $3 = \"Three\"\n    NF = 3\n\nHere are some
  examples of awk expressions accepted as patterns:\n\n* `$2 == \"Two\"` — select
  the subgroup `Two`\n* `$2 == \"Two\" && $3 == \"Three\"`  — select the test or subgroup
  named `Three` in the subgroup named `Two`\n* `$2 == \"Two\" || $2 == \"Twenty-two\"`
  — select two subgroups\n* `$0 !~ /skip/` or `! /skip/` — select tests whose full
  names (including group names) do not contain the word `skip`\n* `$NF !~ /skip/`
  — select tests whose own names (but not group names) do not contain the word `skip`\n*
  `$(NF-1) ~ /QuickCheck/` — select tests whose immediate parent group name\n    contains
  `QuickCheck`\n\nAs an extension to the awk expression language, if a pattern `pat`
  contains only\nletters, digits, and characters from the set `[_/ ]`, it is treated
  like `/pat/`\n(and therefore matched against `$0`). This is so that we can use `-p
  foo` as\na shortcut for `-p /foo/`.\n\nThe only deviation from awk that you will
  likely notice is that Tasty\ndoes not implement regular expression matching.\nInstead,
  `$1 ~ /foo/` means that the string `foo` occurs somewhere in `$1`,\ncase-sensitively.
  We want to avoid a heavy dependency of `regex-tdfa` or\nsimilar libraries; however,
  if there is demand, regular expression support could\nbe added under a cabal flag.\n\nThe
  following operators are supported (in the order of decreasing precedence):\n\n<center>\n<table>\n<tr>\n<th>\n<p><b>Syntax</b></p>\n</th>\n<th>\n<p><b>Name</b></p>\n</th>\n<th>\n<p><b>Type
  of Result</b></p>\n</th>\n<th>\n<p><b>Associativity</b></p>\n</th>\n</tr>\n\n<tr>\n<td>\n<p><code>(expr)</code></p>\n</td>\n<td>\n<p>Grouping</p>\n</td>\n<td>\n<p>Type
  of <code>expr</code></p>\n</td>\n<td>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>$expr</code></p>\n</td>\n<td>\n<p>Field
  reference</p>\n</td>\n<td>\n<p>String</p>\n</td>\n<td>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>!expr</code></p>\n<p><code>-expr</code></p>\n</td>\n<td>\n<p>Logical
  not</p>\n<p>Unary minus</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>N/A</p>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  + expr</code></p>\n<p><code>expr - expr</code></p>\n</td>\n<td>\n<p>Addition</p>\n<p>Subtraction</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n<p>Left</p>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<p><code>expr
  expr</code></p>\n</td>\n<td>\n<p>String concatenation</p>\n</td>\n<td>\n<p>String</p>\n</td>\n<td>\n<p>Right</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  &lt; expr</code></p>\n<p><code>expr &lt;= expr</code></p>\n<p><code>expr != expr</code></p>\n<p><code>expr
  == expr</code></p>\n<p><code>expr &gt; expr</code></p>\n<p><code>expr &gt;= expr</code></p>\n</td>\n<td>\n<p>Less
  than</p>\n<p>Less than or equal to</p>\n<p>Not equal to</p>\n<p>Equal to</p>\n<p>Greater
  than</p>\n<p>Greater than or equal to</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<p><code>expr
  ~ pat</code></p>\n<p><code>expr !~ pat</code></p>\n<p>(<code>pat</code> must be
  a literal, not an expression, e.g. <code>/foo/</code>)</p>\n</td>\n<td>\n<p>Substring
  match</p>\n<p>No substring match</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>None</p>\n<p>None</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  &amp;&amp; expr</code></p>\n</td>\n<td>\n<p>Logical AND</p>\n</td>\n<td>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  || expr</code></p>\n</td>\n<td>\n<p>Logical OR</p>\n</td>\n<td>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr1
  ? expr2 : expr3</code></p>\n</td>\n<td>\n<p>Conditional expression</p>\n</td>\n<td>\n<p>Type
  of selected<br><code>expr2</code> or <code>expr3</code></p>\n</td>\n<td>\n<p>Right</p>\n</td>\n</tr>\n\n</table>\n</center>\n\nThe
  following built-in functions are supported:\n\n```\nsubstr(s, m[, n])\n```\nReturn
  the at most `n`-character substring of `s` that begins at\nposition `m`, numbering
  from 1. If `n` is omitted, or if `n` specifies\nmore characters than are left in
  the string, the length of the substring\nwill be limited by the length of the string
  `s`.\n\n```\ntolower(s)\n```\n\nConvert the string `s` to lower case.\n\n```\ntoupper(s)\n```\n\nConvert
  the string `s` to upper case.\n\n```\nmatch(s, pat)\n```\n\nReturn the position,
  in characters, numbering from 1, in string `s` where the\npattern `pat` occurs,
  or zero if it does not occur at all.\n`pat` must be a literal, not an expression,
  e.g. `/foo/`.\n\n```\nlength([s])\n```\n\nReturn the length, in characters, of its
  argument taken as a string, or of the whole record, `$0`, if there is no argument.\n\n###
  Running tests in parallel\n\nIn order to run tests in parallel, you have to do the
  following:\n\n* Compile (or, more precisely, *link*) your test program with the
  `-threaded`\n  flag;\n* Launch the program with `+RTS -N -RTS`.\n\n### Timeout\n\nTo
  apply timeout to individual tests, use the `--timeout` (or `-t`) command-line\noption,
  or set the option in your test suite using the `mkTimeout` function.\n\nTimeouts
  can be fractional, and can be optionally followed by a suffix `ms`\n(milliseconds),
  `s` (seconds), `m` (minutes), or `h` (hours). When there's no\nsuffix, seconds are
  assumed.\n\nExample:\n\n    ./test --timeout=0.5m\n\nsets a 30 seconds timeout for
  each individual test.\n\n### Options controlling console output\n\nThe following
  options control behavior of the standard console interface:\n\n<dl>\n<dt><code>-q,--quiet</code></dt>\n<dd>\n
  \ Run the tests but don't output anything. The result is indicated only by the\n
  \ exit code, which is 1 if at least one test has failed, and 0 if all tests\n  have
  passed. Execution stops when the first failure is detected, so not all\n  tests
  are necessarily run.\n  This may be useful for various batch systems, such as commit
  hooks.\n</dd>\n<dt><code>--hide-successes</code></dt>\n<dd>Report only the tests
  that has failed. Especially useful when the\nnumber of tests is large.</dd>\n<dt><code>-l,--list-tests</code></dt>\n<dd>Don't
  run the tests; only list their names, in the format accepted by\n<code>--pattern</code>.</dd>\n<dt><code>--color</code></dt>\n<dd>Whether
  to produce colorful output. Accepted values: <code>never</code>,\n<code>always</code>,
  <code>auto</code>. <code>auto</code> means that colors will\nonly be enabled when
  output goes to a terminal and is the default value.</dd>\n</dl>\n\n### Custom options\n\nIt
  is possible to add custom options, too.\n\nTo do that,\n\n1. Define a datatype to
  represent the option, and make it an instance of\n   `IsOption`\n2. Register the
  options with the `includingOptions` ingredient\n3. To query the option value, use
  `askOption`.\n\nSee the [Custom options in Tasty][custom-options-article] article
  for some examples.\n\n## Project organization and integration with Cabal\n\nThere
  may be several ways to organize your project. What follows is not\nTasty's requirements
  but my recommendations.\n\n### Tests for a library\n\nPlace your test suite sources
  in a dedicated subdirectory (called `tests`\nhere) instead of putting them among
  the main library sources.\n\nThe directory structure will be as follows:\n\n    my-project/\n
  \     my-project.cabal\n      src/\n        ...\n      tests/\n        test.hs\n
  \       Mod1.hs\n        Mod2.hs\n        ...\n\n`test.hs` is where your `main`
  function is defined. The tests may be\ncontained in `test.hs` or spread across multiple
  modules (`Mod1.hs`, `Mod2.hs`,\n...) which are then imported by `test.hs`.\n\nAdd
  the following section to the cabal file (`my-project.cabal`):\n\n    test-suite
  test\n      default-language:\n        Haskell2010\n      type:\n        exitcode-stdio-1.0\n
  \     hs-source-dirs:\n        tests\n      main-is:\n        test.hs\n      build-depends:\n
  \         base >= 4 && < 5\n        , tasty >= 0.7 -- insert the current version
  here\n        , my-project   -- depend on the library we're testing\n        , ...\n\n###
  Tests for a program\n\nAll the above applies, except you can't depend on the library
  if there's no\nlibrary. You have two options:\n\n* Re-organize the project into
  a library and a program, so that both the\n  program and the test suite depend on
  this new library. The library can be\n  declared in the same cabal file.\n* Add
  your program sources directory to the `Hs-source-dirs`. Note that this\n  will lead
  to double compilation (once for the program and once for the test\n  suite).\n\n##
  FAQ\n\n1.  How do I make some tests execute after others?\n\n    Currently, your
  only option is to make all tests execute sequentially by\n    setting the number
  of tasty threads to 1 ([example](#num_threads_example)).\n    See [#48](https://github.com/feuerbach/tasty/issues/48)
  for the discussion.\n\n2.  When my tests write to stdout/stderr, the output is garbled.
  Why is that and\n    what do I do?\n\n    It is not recommended that you print anything
  to the console when using the\n    console test reporter (which is the default one).\n
  \   See [#103](https://github.com/feuerbach/tasty/issues/103) for the\n    discussion.\n\n
  \   Some ideas on how to work around this:\n\n    * Use [testCaseSteps](https://hackage.haskell.org/package/tasty-hunit/docs/Test-Tasty-HUnit.html#v:testCaseSteps)
  (for tasty-hunit only).\n    * Use a test reporter that does not print to the console
  (like tasty-ant-xml).\n    * Write your output to files instead.\n\n## Press\n\nBlog
  posts and other publications related to tasty. If you wrote or just found\nsomething
  not mentioned here, send a pull request!\n\n* [Holy Haskell Project Starter](http://yannesposito.com/Scratch/en/blog/Holy-Haskell-Starter/)\n*
  [First time testing, also with FP Complete](http://levischuck.com/posts/2013-11-13-first-testing-and-fpcomplete.html)\n
  \ (tasty has been added to stackage since then)\n* [24 Days of Hackage: tasty](http://ocharles.org.uk/blog/posts/2013-12-03-24-days-of-hackage-tasty.html)\n*
  [Resources in Tasty](https://ro-che.info/articles/2013-12-10-tasty-resources)\n*
  [Custom options in Tasty][custom-options-article]\n* [Resources in Tasty (update)](https://ro-che.info/articles/2013-12-29-tasty-resources-2)\n*
  [Announcing tasty-rerun](http://ocharles.org.uk/blog/posts/2014-01-20-announcing-tasty-rerun.html)\n*
  [Code testing in Haskell revisited (with Tasty)](http://lambda.jstolarek.com/2014/01/code-testing-in-haskell-revisited-with-tasty/)\n*
  [New patterns in tasty][awk-patterns-article]\n* [Screencast: Dynamic Test Suites
  in Haskell using Hspec and Tasty](https://www.youtube.com/watch?v=PGsDvgmZF7A)\n\n[custom-options-article]:
  https://ro-che.info/articles/2013-12-20-tasty-custom-options.html\n[awk-patterns-article]:
  https://ro-che.info/articles/2018-01-08-tasty-new-patterns\n\nMaintainers\n-----------\n\n[Roman
  Cheplyaka](https://github.com/feuerbach) is the primary maintainer.\n\n[Oliver Charles](https://github.com/ocharles)
  is the backup maintainer. Please\nget in touch with him if the primary maintainer
  cannot be reached.\n"
license-name: MIT
