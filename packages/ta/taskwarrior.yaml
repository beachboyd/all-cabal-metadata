homepage: https://github.com/maralorn/haskell-taskwarrior
changelog-type: markdown
hash: fb8de51c80682eafe119e136c9f38034201863ca6cea36b81a895b1623bba665
test-bench-deps:
  base: -any
  time: -any
  unordered-containers: -any
  hspec: ^>=2.7.1
  text: -any
  uuid: -any
  quickcheck-instances: ^>=0.3.22
  taskwarrior: -any
  QuickCheck: ^>=2.13.2
  aeson: -any
maintainer: Malte Brandy <malte.brandy@maralorn.de>
synopsis: Types and aeson instances for taskwarrior tasks
changelog: |
  # Revision history for taskwarrior

  ## 0.1.2.2

  * Add `StrictData` pragma for better performance.

  ## 0.1.2.1

  * Remove string-interpolate dependency

  ## 0.1.2.0 -- 2019-12-23

  * Added `getUUIDs` function.

  ## 0.1.1.0 -- 2019-12-06

  * Added `makeTask` and `createTask` functions.

  ## 0.1.0.0 -- 2019-11-08

  * First version. Includes the data types, `saveTasks` and `getTasks`.
basic-deps:
  bytestring: ^>=0.10.8.2
  base: ! '>=4.11 && <4.14'
  time: ! '>=1.8.0.2 && <1.10'
  unordered-containers: ^>=0.2.9.0
  text: ^>=1.2.3.1
  uuid: ^>=1.3.13
  process: ^>=1.6.5.0
  random: ^>=1.1
  aeson: ^>=1.4.2.0
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
author: Malte Brandy <malte.brandy@maralorn.de>
latest: 0.1.2.2
description-type: markdown
description: |
  # taskwarrior

  [![Hackage](https://img.shields.io/hackage/v/taskwarrior.svg)](https://hackage.haskell.org/package/taskwarrior)
  [![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fmaralorn%2Fhaskell-taskwarrior%2Fbadge%3Fref%3Dmaster)](https://actions-badge.atrox.dev/maralorn/haskell-taskwarrior/goto?ref=master)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/taskwarrior.svg)](http://packdeps.haskellers.com/reverse/taskwarrior)

  ## About

  [Taskwarrior](https://taskwarrior.org) is a feature rich command-line task management tool.

  This Haskell library contains

  * a data type to represent a taskwarrior task
  * Aeson instances to deserialize and serialize a task according to the taskwarrior import/export specifications
  * IO actions to load and manipulate tasks by calling the `task` command. (Since this is the encouraged way to library design by the taskwarrior developers.)

  ## Usage

  Install `taskwarrior` from hackage. Have a look at `Taskwarrior.IO.getTasks` to get started.

  This example prints the description of (at the most) 5 pending tasks.
  ```haskell
  import Taskwarrior.IO (getTasks)
  import Taskwarrior.Task as Task

  main :: IO ()
  main = do
    tasks <- getTasks ["+PENDING", "limit:5"]
    print $ Task.description <$> tasks
  ```

  ## Contributions

  Any form of issue reports, general feedback or suggestions and of course code contributions are highly welcome.
license-name: AGPL-3.0-or-later
