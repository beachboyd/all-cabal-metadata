homepage: https://github.com/kseo/tagsoup-megaparsec#readme
changelog-type: markdown
hash: 5d1efec566191d1b09e1bfb7d84ceb304d308a7bb33be35eb97b38b41a9d0aa6
test-bench-deps:
  base: -any
  hspec: -any
  megaparsec: -any
  raw-strings-qq: -any
  tagsoup: -any
  tagsoup-megaparsec: -any
maintainer: kwangyul.seo@gmail.com
synopsis: A Tag token parser and Tag specific parsing combinators
changelog: ! '## tagsoup-megaparsec 0.2.0.0


  * Bump dependency on `megaparsec` to 5.0.1.


  * `(Show str)` constraint is removed from combinators.


  ## tagsoup-megaparsec 0.1.0.0


  * Initial version.

'
basic-deps:
  base: ! '>=4.7 && <5'
  megaparsec: ! '>=5.0.1 && <6'
  containers: ! '>=0.5 && <0.6'
  tagsoup: ! '>=0.13 && <0.15'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Kwang Yul Seo
latest: 0.2.0.0
description-type: markdown
description: ! "# tagsoup-megaparsec\n\n[![Build Status](https://travis-ci.org/kseo/tagsoup-megaparsec.svg?branch=master)](https://travis-ci.org/kseo/tagsoup-megaparsec)\n\nA
  Tag token parser and Tag specific parsing combinators, inspired by [parsec-tagsoup][parsec-tagsoup]
  and [tagsoup-parsec][tagsoup-parsec]. This library helps you build a megaparsec
  parser using TagSoup's Tag as tokens.\n\n[parsec-tagsoup]: https://hackage.haskell.org/package/parsec-tagsoup\n[tagsoup-parsec]:
  https://hackage.haskell.org/package/tagsoup-parsec\n\n## Usage\n\n### DOM parser\n\nWe
  can build a DOM parser using TagSoup's Tag as a token type in Megaparsec. Let's
  start the example with importing all the required modules.\n\n```haskell\nimport
  Data.Text ( Text )\nimport qualified Data.Text as T\nimport Data.HashMap.Strict
  ( HashMap )\nimport qualified Data.HashMap.Strict as HMS\nimport Text.HTML.TagSoup\nimport
  Text.Megaparsec\nimport Text.Megaparsec.ShowToken\nimport Text.Megaparsec.TagSoup\n```\n\nHere's
  the data types used to represent our DOM. `Node` is either `ElementNode` or `TextNode`.
  `TextNode` data constructor takes a `Text` and `ElementNode` data constructor takes
  an `Element` whose fields consist of `elementName`, `elementAttrs` and `elementChildren`.\n\n```haskell\ntype
  AttrName   = Text\ntype AttrValue  = Text\n\ndata Element = Element\n  { elementName
  :: !Text\n  , elementAttrs :: !(HashMap AttrName AttrValue)\n  , elementChildren
  :: [Node]\n  } deriving (Eq, Show)\n\ndata Node =\n    ElementNode Element\n  |
  TextNode Text\n  deriving (Eq, Show)\n```\n\nOur `Parser` is defined as a type synonym
  for `TagParser Text`. `TagParser` takes a type argument representing the string
  type and we chose `Text` here. We can pass any of `StringLike` types such as `String`
  and `ByteString`.\n\n```haskell\ntype Parser = TagParser Text\n```\n\nThere is nothing
  new in defining a parser except that our token is `Tag Text` instead of `Char`.
  We can use any Megaparsec combinators we want as usual. Our `node` parser is either
  `element` or `text` so we used the choice combinator `(<|>)`.\n\n```haskell\nnode
  :: Parser Node\nnode = ElementNode <$> element\n   <|> TextNode <$> text\n```\n\ntagsoup-megaparsec
  library provides some `Tag` specific combinators.\n\n* `tagText`: parse a chunk
  of text.\n* `anyTagOpen`/`anyTagClose`: parse any opening and closing tag.\n\n`text`
  and `element` parsers are built using these combinators.\n\nNOTE: We don't need
  to worry about the text blocks containing only whitespace characters because all
  the parsers provided by tagsoup-megaparsec are lexeme parsers.\n\n```haskell\ntext
  :: Parser Text\ntext = fromTagText <$> tagText\n\nelement :: Parser Element\nelement
  = do\n  t@(TagOpen tagName attrs) <- anyTagOpen\n  children <- many node\n  closeTag@(TagClose
  tagName') <- anyTagClose\n  if tagName == tagName'\n     then return $ Element tagName
  (HMS.fromList attrs) children\n     else fail $ \"unexpected close tag\" ++ showToken
  closeTag\n```\n\nNow it's time to define our driver. `parseDOM` takes a `Text` and
  returns either `ParseError` or `[Node]`. We used `many` combinator to represent
  that there are zero or more occurences of `node`. We used TagSoup's `parseTags`
  to create tokens and passed it to Megaparsec's `parse` function.\n\n```haskell\nparseDOM
  :: Text -> Either ParseError [Node]\nparseDOM html = parse (many node) \"\" tags\n
  \ where tags = parseTags html\n```\n\n"
license-name: BSD-3-Clause
