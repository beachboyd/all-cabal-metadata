homepage: ''
changelog-type: markdown
hash: 2d9e94cc112536e088438a003bd615cdcd968d98bd7fe96c2689ece32889c5e1
test-bench-deps:
  wai: ==3.2.*
  base: ! '>=4.8 && <4.13'
  tasty-wai: -any
  tasty: ! '>=0.8 && <1.3'
  http-types: ! '>=0.9 && <0.13'
maintainer: sean.chalmers@data61.csiro.au
synopsis: Test 'wai' endpoints via Test.Tasty
changelog: ! '# Revision history for tasty-wai


  ## 0.1.0.1 -- 2018-12-04


  * Add README to the extra-source-files.

  * remove bytestring from test dependencies


  ## 0.1.0.0 -- 2018-12-04


  * First version. Released on an unsuspecting world.

'
basic-deps:
  bytestring: ==0.10.*
  wai: ==3.2.*
  base: ! '>=4.8 && <4.13'
  wai-extra: ==3.0.*
  tasty: ! '>=0.8 && <1.3'
  http-types: ! '>=0.9 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: QFPL @ Data61
latest: 0.1.0.1
description-type: markdown
description: ! "<img src=\"https://turnipbox.netlify.com/img/d61.svg\" width=\"300px\"/>\n\n[![Build
  Status](https://travis-ci.org/qfpl/tasty-wai.svg?branch=master)](https://travis-ci.org/qfpl/tasty-wai)\n\n#
  `tasty-wai`\n\nThis provides [`tasty`]( https://hackage.haskell.org/package/tasty)
  integration\nfor [`wai`]( https://hackage.haskell.org/package/wai) via the components\nprovided
  by [`wai-extra`](https://hackage.haskell.org/package/wai-extra).\n\nThis is a simple
  package, it does not provide any resource management for\nanything that your `Application`
  may require. Test databases and the like are\nnot handled. This package provides
  a nicer interface to running tests again the\nendpoints and interrogating their
  results.\n\n## An example of usage\n\nThere is an example of usage in `test/Test.hs`
  and it is included here.\n\nGiven this trivial `Application`:\n\n```haskell\nimport
  \          Network.Wai        (Application)\nimport qualified Network.Wai        as
  W\n\nimport qualified Network.HTTP.Types as H\n\ntestApp :: Application\ntestApp
  rq cb = do\n  let\n    mkresp s = W.responseLBS s []\n    resp404 = mkresp H.status404\n
  \   resp200 = mkresp H.status200\n\n  resp <- case (W.requestMethod rq, W.pathInfo
  rq) of\n\n    -- Ye olde...\n    (\"GET\", [\"hello\"]) -> pure $ resp200 \"world!\"\n\n
  \   -- Echo me this!\n    (\"POST\", [\"echo\"]) -> resp200 <$> W.strictRequestBody
  rq\n\n    -- Well, then...\n    _ -> pure $ resp404 \"no route\"\n\n  cb resp\n```\n\nWe
  can write some tests to check the endpoints behave as we expect:\n\n```haskell\ntestWai
  testApp \"Hello to World\" $ do\n  res <- get \"hello\"\n  assertBody \"world!\"
  res\n\ntestWai testApp \"Echo to thee\" $ do\n  res <- post \"echo\" \"thus\"\n
  \ assertStatus' H.status200 res -- Use functions from Network.HTTP.Types\n  assertStatus
  200 res          -- Use raw ints\n  assertBody \"thus\" res\n```\n\nWe can check
  that our fall-through route works as intended:\n\n```haskell\ntestWai testApp \"Will
  die!\" $ do\n  res <- get \"not-a-thing\"\n  assertStatus' H.status404 res\n  assertBody
  \"no route\" res\n```\n\nThese can be grouped up and run as per the `tasty` `TestTree`:\n\n```haskell\nimport
  \          Test.Tasty         (defaultMain, testGroup)\nimport           Test.Tasty.Wai
  \    (assertBody, assertStatus, assertStatus',\n                                     get,
  post, testWai)\n\nmain :: IO ()\nmain = defaultMain $ testGroup \"Tasty-Wai Tests\"\n\n
  \ [ testWai testApp \"Hello to World\" $ do\n      res <- get \"hello\"\n      assertBody
  \"wrld!\" res\n\n  , testWai testApp \"Echo to thee\" $ do\n      res <- post \"echo\"
  \"thus\"\n      assertStatus' H.status200 res -- Use functions from Network.HTTP.Types\n
  \     assertStatus 200 res          -- Use raw ints\n      assertBody \"thus\" res\n\n
  \ , testWai testApp \"Will die!\" $ do\n      res <- get \"not-a-thing\"\n      assertStatus'
  H.status404 res\n      assertBody \"no route\" res\n  ]\n```\n\nTasty then provides
  nicely formatted and grouped output, as you've come to expect:\n\n```\nTest suite
  tests: RUNNING...\nTasty-Wai Tests\n  Hello to World: OK\n  Echo to thee:   OK\n
  \ Will die!:      OK\n```\n\nWith the errors from `wai-extra` helping us understanding
  where our tests went wrong:\n\n```\nTest suite tests: RUNNING...\nTasty-Wai Tests\n
  \ Hello to World: FAIL\n    Expected response body \"wrld!\", but received \"world!\"\n
  \ Echo to thee:   OK\n  Will die!:      OK\n```\n"
license-name: BSD-3-Clause
