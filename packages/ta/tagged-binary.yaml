homepage: ''
changelog-type: markdown
hash: 8107b1a32ffba4b8b6afcd246ff83b72f19dfa30d7172bee745d2921ec75fd93
test-bench-deps: {}
maintainer: Justin Le <justin@jle.im>
synopsis: ! 'Provides tools for serializing data tagged with type

  information.'
changelog: ! "0.2.0.1\n-------\n<https://github.com/mstksg/tagged-binary/releases/tag/v0.2.0.1>\n\n*
  \  Compatibility with *base-4.10* and ghc 8.2.\n\n0.2.0.0\n-------\n<https://github.com/mstksg/tagged-binary/releases/tag/v0.2.0.0>\n\n*
  \  Removed `Default` instance on `TagFingerprint` in favor of just a normal\n    `emptyTagFP`
  function.  This is a breaking change, and is the reason for\n    the \"major\" version
  bump.\n*   Fixed bug on decoding badly formatted binary due to unexpected laziness.\n*
  \  Removed dependency on *data-default* and *spoon* packages.\n*   Removed upper
  version bounds for all dependencies except for *base*.\n\n0.1.2.0\n-------\n<https://github.com/mstksg/tagged-binary/releases/tag/v0.1.2.0>\n\n*
  \  Tagged `ByteStrings` now lead with a \"TagLead\" byte sequence that\n    signifies
  that a `Tagged` is coming.  For now, it is statically 0xfe 0xff,\n    which are
  two bytes that are never found in any valid UTF-8 encoded\n    string.\n*   So that
  all `TagFingerprint`s should be of the same length,\n    `TagFingerprint`s contain
  an `MD5Digest`, generated from the name of the\n    type.  Its `Default` instance
  is the `MD5Digest` of an empty string.\n\n0.1.0.0\n-------\n<https://github.com/mstksg/tagged-binary/releases/tag/v0.1.0.0>\n\n*
  \  Initial version.\n\n"
basic-deps:
  bytestring: ! '>=0.10.4'
  base: ! '>=4.6 && <5'
  pureMD5: ! '>=2.1'
  base-compat: -any
  binary: ! '>=0.7.1'
all-versions:
- 0.1.0.0
- 0.1.2.0
- 0.2.0.0
- 0.2.0.1
author: Justin Le <justin@jle.im>
latest: 0.2.0.1
description-type: markdown
description: ! "tagged-binary\n=============\n\n[![tagged-binary on\nHackage](https://img.shields.io/hackage/v/tagged-binary.svg?maxAge=2592000)](https://hackage.haskell.org/package/tagged-binary)\n[![tagged-binary
  on Stackage LTS](http://stackage.org/package/tagged-binary/badge/lts)](http://stackage.org/lts/package/tagged-binary)\n[![tagged-binary
  on Stackage Nightly](http://stackage.org/package/tagged-binary/badge/nightly)](http://stackage.org/nightly/package/tagged-binary)\n[![Build
  Status](https://travis-ci.org/mstksg/tagged-binary.svg?branch=master)](https://travis-ci.org/mstksg/tagged-binary)\n\nVery
  minimal (Haskell) library providing tools for serializing and decoding data into\n`ByteString`
  tagged with information about its type, inspired by Cloud Haskell\nand distributed-process.\n\nIntended
  for use by libraries and frameworks in distributed contexts, such as\ndistributed
  computation between native servers and communication between\nnative servers and
  ghcjs/various front-ends, for behavior similar to the\npolymorphic communication
  channels of Cloud Haskell and distributed-process;\nservers can send tagged data,
  and clients can choose to selectively accept,\nignore or queue incoming messages
  depending on their types.\n\nFor basic encoding and decoding, only `Data.Binary.Tagged`
  should be\nnecessary.  `Data.Binary.Tagged.Internal` is exported in case you need
  it.\n\nQuick example\n-------------\n\n    > let x = encodeTagged (1 :: Int)\n    >
  decodeTagged x :: Maybe Bool\n    Nothing\n    > decodeTagged x :: Maybe Int\n    Just
  1\n\nCopyright\n---------\n\nCopyright (c) 2015 Justin Le\n"
license-name: MIT
