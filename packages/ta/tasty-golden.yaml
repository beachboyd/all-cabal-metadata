homepage: https://github.com/feuerbach/tasty-golden
changelog-type: markdown
hash: 369b246ddd36c9522df68597afa0db457ba7732ed1fb5ccffeaf049ed8241522
test-bench-deps:
  temporary-rc: -any
  base: ! '>=4 && <5'
  tasty-golden: -any
  filepath: -any
  process: -any
  tasty-hunit: -any
  tasty: -any
  directory: -any
maintainer: Roman Cheplyaka <roma@ro-che.info>
synopsis: Golden tests support for tasty
changelog: ! "Changes\n=======\n\nVersion 2.3.1.3\n---------------\n\n* Make the environment
  variable `TASTY_ACCEPT=True` work, and make the value\n    case-insensitive (so
  `TASTY_ACCEPT=true` works, too)\n\nVersion 2.3.1.2\n---------------\n\nDocs: link
  to an introductory blog post\n\nVersion 2.3.1.1\n---------------\n\nFix compatibility
  with `optparse-applicative-0.13`\n\nVersion 2.3.1\n-------------\n\nIntercept exceptions
  thrown by the test, adhering to the new tasty API\ncontract.\n\nVersion 2.3.0.2\n---------------\n\nSwitch
  from temporary-rc to temporary\n\nVersion 2.3.0.1\n---------------\n\nImpose a lower
  bound version constraint on bytestring.\n\nVersion 2.3\n-----------\n\n* Accepting
  tests is no longer done by a separate ingredient; instead it is now\n  an option
  that affects tests themselves.\n    * `--accept` used to run only golden tests;
  now all tests are run, but only\n      golden tests are affected by this option\n
  \   * when accepting, all the usual options apply (such as `-j`)\n    * when accepting,
  the interace is the same as when running\n    * `defaultMain` and `acceptingTests`
  are kept for compatibility, but do not\n      do anything and are obsolete\n* When
  a golden test file does not exist, it is created automatically, even when\n  `--accept`
  is not specified. You'll see a message like\n\n        UnboxedTuples:                 OK
  (0.04s)\n          Golden file did not exist; created\n\n* No longer use lazy IO\n
  \   * `ValueGetter` type is gone (replaced by `IO`)\n    * Because of that, the
  type of the primitive `goldenTest` is changed\n    * `vgReadFile` function is gone
  (replaced by `Data.ByteString.readFile`)\n\nVersion 2.2.2.4\n---------------\n\n*
  Warn when some tests threw exceptions during `--accept`\n* Properly handle exceptions;
  don't swallow Ctrl-C\n\nVersion 2.2.2.3\n---------------\n\nRestore compatibility
  with older compilers\n\nVersion 2.2.2.1\n---------------\n\nRelax `Cabal` dependency\n\nVersion
  2.2.2\n-------------\n\nAdd `findByExtension`\n\nVersion 2.2.1.2\n---------------\n\nCatch
  exceptions when accepting golden tests\n\nVersion 2.2.1.1\n---------------\n\nSwitch
  to `temporary-rc`\n\nVersion 2.2.1\n-------------\n\n* Fix a bug where the result
  of the comparison function would reference yet\n  unread data from a semiclosed
  file and the file gets closed, leading to a\n  runtime exception\n* Export `writeBinaryFile`\n*
  Improve the docs\n* Update to work with `tasty-0.8`\n\nVersion 2.2.0.2\n---------------\n\nUpdate
  to work with `tasty-0.7`\n\nVersion 2.2.0.1\n---------------\n\nUpdate to work with
  `tasty-0.5`\n\nVersion 2.2\n-----------\n\nMigrate to ingredients\n\nVersion 2.1\n-----------\n\nAdd
  `goldenVsStringDiff`\n\nVersion 2.0.1\n-------------\n\nUpdate to work with `tasty-0.2`\n\nVersion
  2.0\n-----------\n\nInitial release of `tasty-golden` (derived from `test-framework-golden-1.1.x`)\n"
basic-deps:
  bytestring: ! '>=0.10'
  base: ==4.*
  filepath: -any
  process: -any
  async: -any
  tagged: -any
  containers: -any
  mtl: -any
  temporary: -any
  optparse-applicative: -any
  tasty: ! '>=1.0.1'
  deepseq: -any
  directory: -any
all-versions:
- '2.0'
- '2.0.1'
- '2.1'
- '2.2'
- '2.2.0.1'
- '2.2.0.2'
- '2.2.1'
- '2.2.1.1'
- '2.2.1.2'
- '2.2.2'
- '2.2.2.1'
- '2.2.2.2'
- '2.2.2.3'
- '2.2.2.4'
- '2.3'
- '2.3.0.1'
- '2.3.0.2'
- '2.3.1'
- '2.3.1.1'
- '2.3.1.2'
- '2.3.1.3'
author: Roman Cheplyaka
latest: '2.3.1.3'
description-type: haddock
description: ! 'This package provides support for «golden testing».

  A golden test is an IO action that writes its result to a file.

  To pass the test, this output file should be identical to the corresponding

  «golden» file, which contains the correct result for the test.

  To get started with golden testing and this library, see

  <https://ro-che.info/articles/2017-12-04-golden-tests Introduction to golden testing>.'
license-name: MIT
