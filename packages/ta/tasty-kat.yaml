homepage: https://github.com/vincenthz/tasty-kat
changelog-type: ''
hash: 328d721b28a7082f64fbdb58550f337168af0c93d88acc5ffc75d10667fb1f37
test-bench-deps:
  bytestring: -any
  base: ! '>=3 && <5'
  tasty-kat: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
maintainer: vincent@snarc.org
synopsis: Known Answer Tests (KAT) framework for tasty
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  tasty: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
author: Vincent Hanquez <vincent@snarc.org>
latest: 0.0.3
description-type: markdown
description: ! "tasty-kat\n=========\n\n[![Build Status](https://travis-ci.org/vincenthz/tasty-kat.png?branch=master)](https://travis-ci.org/vincenthz/tasty-kat)\n[![BSD](http://b.repl.ca/v1/license-BSD-blue.png)](http://en.wikipedia.org/wiki/BSD_licenses)\n[![Haskell](http://b.repl.ca/v1/language-haskell-lightgrey.png)](http://haskell.org)\n\n[Tasty-kat](http://hackage.haskell.org/package/tasty-kat)
  provides support for\nKAT (Known Answer Tests) testing.  KAT files provides input
  and output tests\nfor some functions for example, for testing the following function:\n\n
  \   r == a + b\n\nA KAT file could be:\n\n```ini\n[2 digits addition]\n\na = 10\nb
  = 20\nr = 30\n\na = 11\nb = 21\nr = 32\n```\n\nThis is somewhat similar to the [tasty-golden](http://hackage.haskell.org/package/tasty-golden)\npackage,
  but instead of generating files and comparing output file to a golden file,\ntasty-kat
  loads input and output in test vectors and run specific function on it.\n\nDocumentation:
  [tasty-kat on hackage](http://hackage.haskell.org/package/tasty-kat)\n\n```haskell\nimport
  Test.Tasty\nimport Test.Tasty.KAT\nmain = do\n    kat <- testKatLoad \"path/to/KAT\"
  katLoaderSimple\n    defaultMain [ testKatDetailed \"kat-name\" kat testKat ]\n
  \ where testAddition group kvs =\n            case sequence $ map (flip lookup kvs)
  [\"a\",\"b\",\"r\"] of\n                Nothing      -> error \"invalid vector\"\n
  \               Just [a,b,r] -> let a = read as :: Int\n                                    b
  = read bs :: Int\n                                    r = read rs :: Int\n                                 in
  return (a + b == r)\n```\n\nThe detail output with 'testKatDetailed' looks like:\n\n```shell\n
  \   add\n      1:    OK\n      2:    OK\n    sub\n      1:    OK\n    add\n      1:
  \   OK\n    base64\n      1:    OK\n      2:    OK\n```\n\nThe grouped output with
  'testKatGrouped' looks like:\n\n```shell\n    add:    OK\n      2 tests succeed\n
  \   sub:    OK\n      1 tests succeed\n    add:    OK\n      1 tests succeed\n    base64:
  OK\n      2 tests succeed\n```\n\n"
license-name: MIT
