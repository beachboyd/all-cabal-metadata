homepage: https://github.com/merijn/tasty-travis
changelog-type: markdown
hash: 2896245c969c0bdcaaf6a31e635b9fb6cc287d6f8a416c50b138cd957f7c80e7
test-bench-deps:
  base: -any
  tasty-travis: -any
  tasty-hunit: ==0.9.*
  tasty: -any
maintainer: Merijn Verstraaten <merijn@inconsistent.nl>
synopsis: Fancy Travis CI output for tasty tests.
changelog: ! "0.2.0.1\n-------\n* Fix compilation with GHC 8.4.1 by adding Semigroup
  instance for internal\n  type.\n"
basic-deps:
  base: ! '>=4.6 && <5'
  tasty: ==0.12.*
all-versions:
- '0.1.2'
- '0.2.0'
- '0.2.0.1'
author: Merijn Verstraaten
latest: '0.2.0.1'
description-type: markdown
description: ! "Tasty Travis: Fancy Travis CI output for tasty tests\n====================================================\n[![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)\n[![Hackage](https://img.shields.io/hackage/v/tasty-travis.svg)](https://hackage.haskell.org/package/tasty-travis)\n[![Build
  Status](https://travis-ci.org/merijn/tasty-travis.svg)](https://travis-ci.org/merijn/tasty-travis)\n\n**Tasty
  Travis** provides fancy\n[Tasty](https://hackage.haskell.org/package/tasty) test
  output on\n[Travis CI](https://travis-ci.org/).\n\nIt allows you get coloured test
  output, folding and collapsing groups of tests,\nand hiding the output of successful
  tests.\n\nExample\n-------\n\nHere's what an example `test.hs` might look:\n\n```haskell\nimport
  Data.List\nimport Data.Ord\nimport Data.Tagged (Tagged)\nimport Data.Typeable (Typeable)\nimport
  Options.Applicative (switch, long, help)\n\nimport Test.Tasty\nimport Test.Tasty.Options\nimport
  Test.Tasty.Travis (travisTestReporter, defaultConfig)\nimport Test.Tasty.HUnit\n\nnewtype
  EnableTravis = EnableTravis Bool\n  deriving (Eq, Ord, Typeable)\n\ninstance IsOption
  EnableTravis where\n  defaultValue = EnableTravis False\n  parseValue = fmap EnableTravis
  . safeRead\n  optionName = return \"enable-travis\"\n  optionHelp = return \"Run
  Travis tests.\"\n  optionCLParser =\n    fmap EnableTravis $\n    switch\n      (
  \ long (untag (optionName :: Tagged EnableTravis String))\n      <> help (untag
  (optionHelp :: Tagged EnableTravis String))\n      )\n\nmain = travisTestReporter
  cfg [] tests\n  where\n    cfg = defaultConfig { travisTestOptions = setOption (EnableTravis
  True) }\n\ntests :: TestTree\ntests = testGroup \"Unit tests\"\n  [ testCase \"List
  comparison (different length)\" $\n      [1, 2, 3] `compare` [1,2] @?= GT\n\n  --
  the following test does not hold\n  , testCase \"List comparison (same length)\"
  $\n      [1, 2, 3] `compare` [1,2,2] @?= LT\n  , askOption $ \\(EnableTravis enable)
  ->\n    if enable then travisTests else testGroup \"\" []\n  ]\n\ntravisTests ::
  TestTree\ntravisTests = testGroup \"Travis\" [ {- Travis tests here -} ]\n```\n"
license-name: BSD3
