homepage: https://github.com/rodrigosetti/swagger-test
changelog-type: ''
hash: 86a88789caeea70a291362f4e161cf463b919a8ab508151b704371359995604f
test-bench-deps: {}
maintainer: rodrigosetti@gmail.com
synopsis: Testing of Swagger APIs
changelog: ''
basic-deps:
  http-client: -any
  insert-ordered-containers: -any
  bytestring: -any
  case-insensitive: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  syb: -any
  filepath: -any
  async: -any
  containers: -any
  lens: -any
  binary: -any
  http-client-tls: -any
  blaze-html: -any
  swagger2: ! '>=2.1.5 && <3'
  attoparsec: -any
  optparse-applicative: -any
  random: -any
  scientific: -any
  QuickCheck: ==2.10.*
  http-types: -any
  aeson: -any
  http-media: -any
  vector: -any
  swagger-test: -any
  directory: -any
all-versions:
- 0.1.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
author: Rodrigo Setti
latest: 0.2.7
description-type: markdown
description: ! "# swagger-test\n\nThis is a tool for\n[Property Based Testing](https://en.wikipedia.org/wiki/Property_testing)\nof
  [swagger](https://swagger.io) APIs.\n\nIt basically allow you to approximate the
  computation of the following\nproposition:\n\n![](https://latex.codecogs.com/png.latex?\\forall&space;\\,&space;input&space;\\in&space;\\text{API}&space;\\,&space;:&space;\\underset{API}{valid}(input)&space;\\Rightarrow&space;\\underset{API}{valid}(output)&space;\\\\&space;\\text{where}&space;\\\\&space;output&space;=&space;\\underset{API}{request}(input))\n\n\nWhich
  translates to:\n\n> For all valid requests that can be derived from my Swagger schema,
  the\n> API response obtained from executing that request is valid according to the\n>
  same Swagger schema.\n\nThe tool exposes several ways to configure get value from
  parts of it, for\nexample, you may be interested in getting just a random valid
  request from the\nschema (use the `generate` command), or validating if a given
  response (from a\nparticular operation) is valid (use the `validate` command), or,
  run one sample\ninstance of the full proposition, which picks a random request and
  validate it's\nresulting response (use the `request` command).\n\nThe generator
  random request values are reproducible by re-using the same _seed_\nvalue, or one
  can focus on a particular operation by specifying the operation\nid.\n\nThe tool
  also simplifies integration with other systems by allowing to configure\noutput
  formats as standard HTTP message, JSON, or curl. Additionally, there\nare Haskell
  modules exposed as a library if one wants to build on top of it.\n\n## Command Line
  Interface\n\n*swagger-test* supports three commands:\n\n * `generate` - generates
  a new random valid request from Swagger schema.\n * `validate` - validate a response
  to a given operation id, according to the\n   schema.\n * `request` - generate and
  make the request, then validates the response\n   (combines generate and validate).\n
  * `report` - high-level command that run several requests concurrently, and\n   write
  HTML reports for multiple Swagger schemas. Useful for testing systems\n   with many
  Swagger services in a CI server.\n\n```console\nswagger-test --help\n```\n\n```\nProperty-based
  testing tool for Swagger APIs\n\nUsage: swagger-test COMMAND\n  Execute one of the
  commands available depending on your needs\n\nAvailable options:\n  -h,--help                Show
  this help text\n\nAvailable commands:\n  generate                 Generate a random
  request according to Schema\n  validate                 Validate a response against
  Schema\n  request                  Generate, make the request, and validate response\n
  \ report                   Run several tests and generate reports\n\nRun `COMMAND
  --help` to get command specific options help\n```\n\n### Sub-commands\n\n#### Generate\n\n```console\nswagger-test
  generate --help\n```\n\n```\nUsage: swagger-test generate [-s|--schema FILENAME]
  [--seed N]\n                             [-o|--operation ID]\n                             [--request-format
  http|curl|none|json]\n                             [-i|--info] [--size N]\n  Generate
  a random request according to Schema\n\nAvailable options:\n  -s,--schema FILENAME
  \    swagger JSON schema file to read\n                           from (default:
  \"swagger.json\")\n  --seed N                 specify the seed for the random generator\n
  \ -o,--operation ID        specify a operation id to test (default pick\n                           randomly)\n
  \ --request-format http|curl|none|json\n                           output format
  of the HTTP request (default: http)\n  -i,--info                render information
  about seed and operation id\n  --size N                 control the size of the
  generated\n                           request (default: 30)\n  -h,--help                Show
  this help text\n```\n\n#### Validate\n\n```console\nswagger-test validate --help\n```\n\n```\nUsage:
  swagger-test validate [-s|--schema FILENAME] [FILENAME]\n                             (-o|--operation
  ID)\n  Validate a response against Schema\n\nAvailable options:\n  -s,--schema FILENAME
  \    swagger JSON schema file to read\n                           from (default:
  \"swagger.json\")\n  FILENAME                 http response file to read from (default=stdin)\n
  \ -o,--operation ID        specify a operation id to test (default pick\n                           randomly)\n
  \ -h,--help                Show this help text\n```\n\n#### Request\n\n```console\nswagger-test
  request --help\n```\n\n```\nUsage: swagger-test request [-s|--schema FILENAME] [--seed
  N]\n                            [-o|--operation ID]\n                            [--request-format
  http|curl|none|json]\n                            [--response-format http|json|none]
  [-i|--info]\n                            [--size N]\n  Generate, make the request,
  and validate response\n\nAvailable options:\n  -s,--schema FILENAME     swagger
  JSON schema file to read\n                           from (default: \"swagger.json\")\n
  \ --seed N                 specify the seed for the random generator\n  -o,--operation
  ID        specify a operation id to test (default pick\n                           randomly)\n
  \ --request-format http|curl|none|json\n                           output format
  of the HTTP request (default: none)\n  --response-format http|json|none\n                           output
  format of the HTTP request (default: none)\n  -i,--info                render information
  about seed and operation id\n  --size N                 control the size of the
  generated\n                           request (default: 30)\n  -h,--help                Show
  this help text\n```\n\n#### Report\n\n```console\nswagger-test report --help\n```\n\n```\nUsage:
  swagger-test report [--schemas PATH] [--reports PATH] [--tests N]\n                           [--size
  N]\n  Run several tests and generate reports\n\nAvailable options:\n  --schemas
  PATH           path to folder with swagger\n                           schemas (default:
  \"schemas\")\n  --reports PATH           path to folder to write the HTML\n                           reports
  (default: \"reports\")\n  --tests N                number of tests to run (default:
  100)\n  --size N                 control the size of the generated\n                           request
  (default: 30)\n  -h,--help                Show this help text\n```\n"
license-name: BSD-3-Clause
