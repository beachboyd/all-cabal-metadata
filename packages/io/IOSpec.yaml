homepage: ''
changelog-type: ''
hash: e3ea9fedf5dbbac12943076c0d5cd7dbbd7e29ba64adf3426b0dd29b8220ff3c
test-bench-deps: {}
maintainer: Wouter Swierstra <w.s.swierstra@uu.nl>
synopsis: A pure specification of the IO monad.
changelog: ''
basic-deps:
  Stream: -any
  base: ! '>=4.8.0.0 && <5'
  mtl: -any
  QuickCheck: ! '>=2 && <3'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- '0.3'
- 0.3.1
author: Wouter Swierstra, Yusaku Hashimoto, Nikolay Amiantov
latest: 0.3.1
description-type: text
description: ! "IOSpec version 0.2\n  Author: Wouter Swierstra <wss@cs.nott.ac.uk>\n\nIOSpec
  provides a library containing pure, executable specifications\nof a few functions
  from the IO monad. \n\nBuild instructions:\n\n    $ runhaskell Setup.lhs configure\n
  \   $ runhaskell Setup.lhs build\n    $ runhaskell Setup.lhs install\n\nSee http://www.haskell.org/ghc/docs/latest/html/Cabal/builders.html\nfor
  more instructions.\n\nDocumentation:\n\nPlease have a look at the latest documentation
  available from:\n  http://www.cs.nott.ac.uk/~wss/repos/IOSpec\n\nTo build the Haddock
  API execute the following command:\n    $ runhaskell Setup.lhs haddock\n\nThis will
  require Haddock 2.0\n\nCheck out the examples directory for the following examples:\n\n
  \   * Echo.hs - illustrates how to test the echo function.\n    * Queues.hs - an
  implementation of queues using IORefs.\n    * Channels.hs - an implementation of
  channels using MVars.\n    * Sudoku.hs - a parallel Sudoku solver that uses STM
  and MVars\n         based on Graham Hutton's version of Richard Bird's \"Solving
  Sudoku\".\n\nEvery example contains quite some comments, explaining how to use\nthe
  library.\n"
license-name: BSD-3-Clause
