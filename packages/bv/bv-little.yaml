homepage: https://github.com/recursion-ninja/bv-little
changelog-type: markdown
hash: 52316b5a6099bf120f69656b88dfcfe6b2d722f868087ae4cccff4faee04d4c3
test-bench-deps:
  tasty-smallcheck: -any
  base: ! '>=4.5.1 && <5'
  text-show: ! '>=3.2.1'
  criterion: -any
  smallcheck: ! '>=1.1.5'
  tasty-quickcheck: -any
  bv-little: -any
  hashable: ! '>=1.2.3.2'
  tasty-hunit: -any
  mono-traversable-keys: ! '>=0.1.0'
  tasty: -any
  deepseq: ! '>=1.4.1.1'
  QuickCheck: ! '>=2.8'
  mono-traversable: ! '>=1.0.5.0'
maintainer: hackage@recursion.ninja
synopsis: Efficient little-endian bit vector library
changelog: |
  ### Unreleased Changes

    * None

  ### [v1.1.1][6]

    * Added more benchmarks

    * Updated test suite to be more reliable

  ### [v1.1.0][5]

    * Added `rank` and `select` functions


  ### [v1.0.1][4]

    * Correcting Eq instance to test for value equality and not construction equality

    * Updated unit tests do not fail when the antecedent of logical implication cannot be satisfied


  ### [v1.0.0][3]

    * Added explicit recursion to monomorphic folds to improve time and space performance

    * Added the following instances:
      * `MonoAdjustable`
      * `MonoFoldableWithKey`
      * `MonoIndexable`
      * `MonoKeyed`
      * `MonoLookup`
      * `MonoTraversableWithKey`
      * `MonoZip`
      * `MonoZipWithKey`
      * `TextShow`

    * Updated the following functions to be constant time:
      * `omap`
      * `olength64`
      * `oall`
      * `oany`
      * `ofoldr1Ex`
      * `ofoldl1Ex`
      * `oelem`
      * `onotElem`
      * `ozipWith`


  ### [v0.1.2][2]

    * Updating to base bounds for GHC 8.6.1


  ### [v0.1.1][1]

    * Updated to well-typed internal representation

    * Corrected defect in rotate, rotateL, and rotateR

    * Improved performance by switching exponentiation with base 2 to bit shifting operations

    * Improved performance of clearBit by increasing strictness

    * Increased benchmark coverage

    * Increased test suite coverage


  ### [v0.1.0][0]

    * Created instances of applicable typeclass instances

    * Added numeric conversion functions

    * Added basic test suite

    * Added stub benchmark


  [0]: https://github.com/recursion-ninja/bv-little/tree/v0.1.0
  [1]: https://github.com/recursion-ninja/bv-little/tree/v0.1.1
  [2]: https://github.com/recursion-ninja/bv-little/tree/v0.1.2
  [3]: https://github.com/recursion-ninja/bv-little/tree/v1.0.0
  [4]: https://github.com/recursion-ninja/bv-little/tree/v1.0.1
  [5]: https://github.com/recursion-ninja/bv-little/tree/v1.1.0
  [5]: https://github.com/recursion-ninja/bv-little/tree/v1.1.1
basic-deps:
  base: ! '>=4.5.1 && <5'
  text-show: ! '>=3.2.1'
  integer-gmp: ! '>=1.0'
  keys: ! '>=3.10.1'
  hashable: ! '>=1.2.3.2'
  mono-traversable-keys: ! '>=0.1.0'
  deepseq: ! '>=1.4.1.1'
  QuickCheck: ! '>=2.8'
  mono-traversable: ! '>=1.0.5.0'
  primitive: ! '>=0.6.4.0'
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
author: Alex Washburn
latest: 1.1.1
description-type: markdown
description: |
  ## Efficient little-endian bit vector Haskell library

  [![Build Status](https://travis-ci.org/recursion-ninja/bv-little.svg?branch=master)](https://travis-ci.org/recursion-ninja/bv-little)
  [![Coverage Status](https://coveralls.io/repos/github/recursion-ninja/bv-little/badge.svg?branch=master)](https://coveralls.io/github/recursion-ninja/bv-little?branch=master)
  [![License FreeBSD](https://img.shields.io/badge/license-FreeBSD-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)

  [![Hackage](https://img.shields.io/hackage/v/bv-little.svg?style=flat&color=brightgreen)](https://hackage.haskell.org/package/bv-little)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/bv-little/badge)](https://matrix.hackage.haskell.org/package/bv-little)

  [![Stackage LTS](http://stackage.org/package/bv-little/badge/lts)](http://stackage.org/lts/package/bv-little)
  [![Stackage Nightly](http://stackage.org/package/bv-little/badge/nightly?style=flat&color=green)](http://stackage.org/nightly/package/bv-little)


  This package contains an efficient implementation of *little-endian, immutable* bit vectors. It implements most applicable typeclasses and also conversions to and from signed or unsigned numbers.

  For an implementation of *big-endian, immutable* bit vectors, use the [`bv`](https://hackage.haskell.org/package/bv) package.

  For an implementation of *little-endian, mutable* bit vectors, use the [`bitvec`](https://hackage.haskell.org/package/bitvec) package.

  #### Tests

  The test suite ensures that all typeclass instances are "lawful" and that data-structureâ€“specific functionality is well defined.

  The `TestSuite.hs` file contains the specification. It can be run by invoking any of the following commands:

    * `cabal new-test`

    * `cabal test`

    * `stack test`

  #### Benchmarks

  The benchmarks provide an empyrical check for the asymptotic complexity of data structure operations and also provide easy metrics for detecting performance regressions.

  The `Benchmaks.hs` file contains these metrics. It can be run by invoking any of the following commands:

    * `cabal new-bench`

    * `cabal bench`

    * `stack bench`
license-name: BSD-3-Clause
