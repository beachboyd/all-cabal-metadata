homepage: https://github.com/recursion-ninja/bv-little
changelog-type: markdown
hash: dfd6ce154ccf089afee068d9d63d0585cd554eb9db3536f37d1245fb935776f0
test-bench-deps:
  base: ! '>=4.5.1 && <4.13'
  criterion: -any
  tasty-quickcheck: -any
  bv-little: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  mono-traversable: -any
maintainer: hackage@recursion.ninja
synopsis: Efficient little-endian bit vector library
changelog: ! "### [v0.1.2][1]\n\n  * Updating to base bounds for GHC 8.6.1\n\n\n###
  [v0.1.1][1]\n\n  * Updated to well-typed internal representation\n\n  * Corrected
  defect in rotate, rotateL, and rotateR\n\n  * Improved performance by switching
  exponentiation with base 2 to bit shifting operations\n\n  * Improved performance
  of clearBit by increasing strictness\n\n  * Increased benchmark coverage\n\n  *
  Increased test suite coverage\n\n\n### [v0.1.0][0]\n\n  * Created instances of applicable
  typeclass instances\n\n  * Added numeric conversion functions\n\n  * Added basic
  test suite\n\n  * Added stub benchmark\n\n\n[0]: https://github.com/recursion-ninja/bv-little/tree/v0.1.0\n[1]:
  https://github.com/recursion-ninja/bv-little/tree/v0.1.1\n[2]: https://github.com/recursion-ninja/bv-little/tree/v0.1.2\n"
basic-deps:
  base: ! '>=4.5.1 && <4.13'
  integer-gmp: -any
  hashable: -any
  deepseq: -any
  QuickCheck: -any
  mono-traversable: -any
  primitive: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
author: Alex Washburn
latest: 0.1.2
description-type: markdown
description: ! "## Efficient little-endian bit vector Haskell library\n\n[![Build
  Status](https://travis-ci.org/recursion-ninja/bv-little.svg?branch=master)](https://travis-ci.org/recursion-ninja/bv-little)\n[![Coverage
  Status](https://coveralls.io/repos/github/recursion-ninja/bv-little/badge.svg?branch=master)](https://coveralls.io/github/recursion-ninja/bv-little?branch=master)\n[![License
  FreeBSD](https://img.shields.io/badge/license-FreeBSD-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/bv-little.svg?style=flat)](https://hackage.haskell.org/package/bv-little)\n[![Stackage
  Nightly](http://stackage.org/package/bv-little/badge/nightly)](http://stackage.org/nightly/package/bv-little)\n[![Stackage
  LTS](http://stackage.org/package/bv-little/badge/lts)](http://stackage.org/lts/package/bv-little)\n\n\nThis
  package contains an efficient implementation of little-endian bit vectors. It implements
  most applicable typeclasses and also conversions to and from signed or unsigned
  numbers. Care has been taken to balance the number of transitive dependencies with
  respect to functionality provided.\n\nFor an implementation of big-endian bit vectors,
  use the [`bv`](https://hackage.haskell.org/package/bv) package.\n\n#### Tests\n\nThe
  test suite ensures that all typeclass instances are \"lawful\" and that data-structureâ€“specific
  functionality is well defined.\n\nThe `TestSuite.hs` file contains the specification.
  It can be run by invoking any of the following commands:\n\n  * `cabal new-test`\n\n
  \ * `cabal test`\n\n  * `stack test`\n\n#### Benchmarks\n\nThe benchmarks provide
  an empirical check for the asymptotic complexity of data structure operations and
  also provide easy metrics for detecting performance regressions.\n\nThe `Benchmaks.hs`
  file contains these metrics. It can be run by invoking any of the following commands:\n\n
  \ * `cabal new-bench`\n\n  * `cabal bench`\n\n  * `stack bench`\n"
license-name: BSD-3-Clause
