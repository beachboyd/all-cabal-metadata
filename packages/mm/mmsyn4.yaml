homepage: https://hackage.haskell.org/package/mmsyn4
changelog-type: markdown
hash: 3f1cff60174c22c727711a91df902cf8d5f3d5bde2e966f2516dfdb76ebc8b14
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: The "glue" between electronic tables and GraphViz
changelog: "# Revision history for mmsyn4\n\n## 0.1.0.0 -- 2019-10-17\n\n* First version.
  Released on an unsuspecting world.\n\n## 0.1.1.0 -- 2019-10-18\n\n* First version
  revised A. Some documentation and .cabal file improvements.\n\n## 0.1.1.1 -- 2019-10-18\n\n*
  First version revised B. Some minor documentation and .cabal file improvements.\n\n##
  0.1.2.0 -- 2019-10-22\n\n* First version revised C. Changed the output files scheme.
  Avoided a pipe redirection in the terminal. \n Some minor documentation and .cabal
  file improvements.\n\n## 0.1.3.0 -- 2019-12-16\n\n* First version revised D. Added
  the possibility to avoid using the at-sign in the resulting visualization file.
  Added the possibility to choose \ndifferent splines schemes according to the GraphViz
  documentation.\n\n## 0.1.4.0 -- 2019-12-17\n\n* First version revised E. Added filtering
  for not to duplicate records in the \n.gv file. Some minor documentation improvement.\n\n##
  0.1.5.0 -- 2019-12-24\n\n* First version revised F. Changed dependency bounds so
  that it can now be compiled for GHC 8.8.1.\n\n## 0.1.6.0 -- 2020-01-31\n\n* First
  version revised G. Changed README to README.markdown\n\n## 0.2.0.0 -- 2020-05-14\n\n*
  Second version. Changed the bounds for dependencies so that now also GHC 8.10* series
  is supported. Changed a module structur so that now it has \nadditional module MMSyn4
  with almost all functions in it (they mostly are not exported because of their specific
  usage). Added possibility \nto specify another basic file to work with except 1.csv.
  Added a possibility to specify an output graphics format. Some code and \ndocumentation
  improvements.\n"
basic-deps:
  mmsyn3: '>=0.1.5 && <0.2'
  base: '>=4.7 && <4.15'
  process: '>=1.2 && <1.8'
  mmsyn2: '>=0.1.8 && <0.2'
  vector: '>=0.11 && <0.14'
  directory: '>=1 && <1.5'
all-versions:
- 0.2.0.0
author: OleksandrZhabenko
latest: 0.2.0.0
description-type: markdown
description: "             ***** Usage *****\n             -----------------\n\n1.
  After installation the executable mmsyn4 is created.\n Afterwards, it is used to
  process files. So, open an\n  office spreadsheet program, e. g.\n   [LibreOffice
  Calc](https://libreoffice.org).\n  \n2. Begin to enter the text in the cells. You
  can use\n Unicode characters. No quotation marks should be used,\n  instead use
  some special delimiter except '@' sign.\n  \n3. Do not use colons, instead when
  needed switch to the\n nearest cell to the right.\n \n4. To make a text visually
  highlighted (yellowish), start\n the cell with an ’@’ sign.\n \n5. Lines in the
  table create different chains in the\n resulting graph. To produce an arrow to the
  text in the\n cell, enter it in the next cell in the row to the right.\n \n6. To
  make several arrows from the cell, switch to the\n next cell to the right for this
  parent one (the cell that\n  will be a parent for several other cells), enter needed\n
  \  new texts there and in the located below cells.\n   \n7. Usually, you can search
  the needed text with Ctrl+F if\n needed.\n \n8. Empty lines in the table do not
  influence the resulting\n visualization. Above each line, except the first one,\n
  \ there must be at least one filled cell. It must be\n   located above the text
  on the new line or even further\n    to the right above. Otherwise, the program
  will\n     produce no reasonably useful output.\n     \n9. After entering all the
  text, export the sheet as a \n  \"*.csv\" file using colons (':') as separator \n
  \   in the working directory. Otherwise, the program \n      won’t work.\n      \n10.
  Run the apprapriate executable mmsyn4 in the terminal \n  or from the command line
  while being in the directory \n    with the created .csv file. Specify as a command
  line \n      argument its name. While executing a program enter \n        a word
  name of the .csv file to be saved. DO use \n          alphanumeric symbols and dashes
  if needed. \n            Then specify the needed visualization scheme \n              by
  specifying the appropriate character \n                in the terminal and the format
  of the \n                  resulting visualization file (refer to \n                    GraphViz
  documentation for the default \n                      list of formats). For more
  information, \n                        see the \n  [GraphViz documentation](https://www.graphviz.org/documentation/).\n
  \               \n11. Your first visualization is then created.\n\n12. Save the
  spreadsheet document as a spreadsheet file (if you \n  worked with spreadsheets,
  otherwise this step can be omitted).\n\n13. Repeat the steps from 2 to 12 as needed
  to produce\n more visualizations.\n \n14. Afterwards, you have a list of svg files,
  a list of .gv \n files as source files for Graphviz, and a list of csv\n  files,
  and a saved spreadsheet file. Then you can use\n   the produced visualizations for
  some other documents.\n"
license-name: MIT
