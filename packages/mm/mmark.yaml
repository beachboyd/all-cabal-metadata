homepage: https://github.com/mmark-md/mmark
changelog-type: markdown
hash: 813b6834bb06d5668e0e918b4f7dbe4a069c059356b23cf1301d4589dd46bcdb
test-bench-deps:
  modern-uri: ! '>=0.3 && <0.4'
  lucid: ! '>=2.6 && <3.0'
  base: ! '>=4.8 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  mmark: -any
  megaparsec: ! '>=7.0 && <8.0'
  criterion: ! '>=0.6.2.1 && <1.6'
  weigh: ! '>=0.0.4'
  foldl: ! '>=1.2 && <1.5'
  hspec-megaparsec: ! '>=2.0 && <3.0'
  QuickCheck: ! '>=2.4 && <3.0'
  aeson: ! '>=0.11 && <1.5'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Strict markdown processor for writers
changelog: ! "## MMark 0.0.6.0\n\n* Uses Megaparsec 7. The `parse` function now returns
  `ParseErrorBundle` on\n  failure.\n\n* Dropped `parseErrorsPretty`, use `errorBundlePretty`
  from `megaparsec`\n  instead.\n\n## MMark 0.0.5.7\n\n* Improved parse errors related
  to the optional YAML block.\n\n## MMark 0.0.5.6\n\n* Now `blockTrans` and `inlineTrans`
  are applied to deeply nested elements\n  too, not only top-level elements.\n\n##
  MMark 0.0.5.5\n\n* Fixed the bug in parser which signalled a parse error when YAML
  block was\n  followed by more than one newline without markdown content after it.\n\n##
  MMark 0.0.5.4\n\n* Empty autolinks are now disallowed. `<>` will result in literal
  `<>` in\n  resulting HTML.\n\n## MMark 0.0.5.3\n\n* Now HTML is escaped properly
  inside inline code spans.\n\n## MMark 0.0.5.2\n\n* Fixed the bug that prevented
  application of rendering extensions to\n  sub-blocks (blocks contained inside other
  blocks) and sub-inlines (inlines\n  contained inside other inlines).\n\n## MMark
  0.0.5.1\n\n* The parser can now recover from block-level parse errors in tables
  and\n  continue parsing.\n\n* Pipes in code spans in table cells are not considered
  as table cell\n  delimiters anymore.\n\n* Table sub-parser now faster rejects inputs
  that do not look like a table,\n  this improves overall performance.\n\n* Better
  handling of the cases when a block can be interpreted as a list and\n  as a table
  at the same time.\n\n## MMark 0.0.5.0\n\n* Documentation improvements.\n\n* Added
  a dummy `Show` instance for the `MMark` type.\n\n## MMark 0.0.4.3\n\n* Compiles
  with `modern-uri-0.2.0.0` and later.\n\n## MMark 0.0.4.2\n\n* Made parsing of emphasis-like
  markup more flexible and forgiving, see\n  `README.md` for more information.\n\n##
  MMark 0.0.4.1\n\n* This version uses `megaparsec-6.4.0` and `parser-combinators-0.4.0`
  and\n  has improved performance.\n\n## MMark 0.0.4.0\n\n* Added support for pipe
  tables (like on GitHub).\n\n* Fixed a nasty space leak in the parser, made it faster
  too.\n\n## MMark 0.0.3.2\n\n* Empty strings are not parsed as URIs anymore (even
  though a valid URI may\n  be represented as the empty string). Instead, it's now
  possible to write\n  an empty URI using the `<>` syntax (which previously was not
  recognized as\n  a URI in some contexts).\n\n* Improved parse errors related to
  parsing of titles in links, images, and\n  reference definitions.\n\n* Parsing of
  reference definitions now can recover from failures, so the\n  parser doesn't choke
  on malformed reference definitions anymore.\n\n* Reduced allocations and improved
  speed of the parser significantly.\n\n## MMark 0.0.3.1\n\n* Fixed a couple of bugs
  in the parser for reference definitions.\n\n* Now link and image titles may contain
  newline character as per the Common\n  Mark spec.\n\n## MMark 0.0.3.0\n\n* Code
  can interrupt paragraphs now, as per Common Mark spec.\n\n* Implemented parsing
  of reference-links (including collapsed and\n  shortcut-style links).\n\n* Implemented
  parsing of reference-style images (including collapsed and\n  shortcut-style images).\n\n*
  Added support for entity and numeric references (section 6.2 of the Common\n  Mark
  spec).\n\n* Improved quality of parse errors.\n\n## MMark 0.0.2.1\n\n* Improved
  performance of the parser. Mainly the inline-level parser to be\n  precise. The
  result is that now there are 3× less allocations and the code\n  runs about 3× faster
  on paragraphs and block quotes (it's about 2.5×\n  faster for a big realistic document).\n\n*
  Improved quality of parse errors.\n\n## MMark 0.0.2.0\n\n* Now punctuation is stripped
  from header ids in\n  `Text.MMark.Extension.headerId`.\n\n* Added `scannerM` in
  `Text.MMark.Extension` and `runScannerM` in\n  `Text.MMark`.\n\n* Added support
  for block quotes.\n\n* Added support for unordered and ordered lists.\n\n## MMark
  0.0.1.1\n\n* Fixed a bug in skipping of headers (only one newline after the header
  line\n  was picked, not all white space up to next block).\n\n## MMark 0.0.1.0\n\n*
  Initial release.\n"
basic-deps:
  modern-uri: ! '>=0.3 && <0.4'
  microlens-th: ! '>=0.4 && <0.5'
  lucid: ! '>=2.6 && <3.0'
  email-validate: ! '>=2.2 && <2.4'
  case-insensitive: ! '>=1.2 && <1.3'
  base: ! '>=4.8 && <5.0'
  data-default-class: -any
  parser-combinators: ! '>=0.4 && <2.0'
  unordered-containers: ! '>=0.2.5 && <0.3'
  text: ! '>=0.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  dlist: ! '>=0.8 && <0.9'
  containers: ! '>=0.5 && <0.7'
  text-metrics: ! '>=0.3 && <0.4'
  html-entity-map: ! '>=0.1 && <0.2'
  mtl: ! '>=2.0 && <3.0'
  foldl: ! '>=1.2 && <1.5'
  hashable: ! '>=1.0.1.1 && <1.3'
  deepseq: ! '>=1.3 && <1.5'
  microlens: ! '>=0.4 && <0.5'
  aeson: ! '>=0.11 && <1.5'
  yaml: ! '>=0.8.10 && <0.12'
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.2.0'
- '0.0.2.1'
- '0.0.3.0'
- '0.0.3.1'
- '0.0.3.2'
- '0.0.4.0'
- '0.0.4.1'
- '0.0.4.2'
- '0.0.4.3'
- '0.0.5.0'
- '0.0.5.1'
- '0.0.5.2'
- '0.0.5.3'
- '0.0.5.4'
- '0.0.5.5'
- '0.0.5.6'
- '0.0.6.0'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '0.0.6.0'
description-type: markdown
description: ! "# MMark\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/mmark.svg?style=flat)](https://hackage.haskell.org/package/mmark)\n[![Stackage
  Nightly](http://stackage.org/package/mmark/badge/nightly)](http://stackage.org/nightly/package/mmark)\n[![Stackage
  LTS](http://stackage.org/package/mmark/badge/lts)](http://stackage.org/lts/package/mmark)\n[![Build
  Status](https://travis-ci.org/mmark-md/mmark.svg?branch=master)](https://travis-ci.org/mmark-md/mmark)\n\n*
  [Quick start: MMark vs GitHub-flavored markdown](#quick-start-mmark-vs-github-flavored-markdown)\n*
  [MMark and Common Mark](#mmark-and-common-mark)\n    * [Differences in inline parsing](#differences-in-inline-parsing)\n
  \   * [Other differences](#other-differences)\n* [About MMark-specific extensions](#about-mmark-specific-extensions)\n*
  [Performance](#performance)\n* [Related packages](#related-packages)\n* [Contribution](#contribution)\n*
  [License](#license)\n\nMMark (read “em-mark”) is a strict markdown processor for
  writers. “Strict”\nmeans that not every input is considered valid markdown document
  and parse\nerrors are possible and even desirable, because they allow to spot markup\nissues
  without searching for them in rendered document. If a markdown\ndocument passes
  MMark parser, then it'll likely produce HTML without quirks.\nThis feature makes
  it a good choice for writers and bloggers.\n\nMMark in its current state features:\n\n*
  A parser that produces high-quality error messages and does not choke on\n  first
  parse error. It is capable of reporting many parse errors where\n  makes sense.\n\n*
  An extension system allowing to create extensions that alter parsed\n  markdown
  document in some way.\n\n* A [`lucid`](https://hackage.haskell.org/package/lucid)-based
  render.\n\nThere is also a blog post announcing the project:\n\nhttps://markkarpov.com/post/announcing-mmark.html\n\n##
  Quick start: MMark vs GitHub-flavored markdown\n\nIt's easy to start using MMark
  if you're used to GitHub-flavored markdown.\nThere are four main differences:\n\n1.
  URIs are not automatically recognized, you must enclose them in `<` and\n   `>`.\n\n2.
  Block quotes require only one `>` and they continue as long as the inner\n   content
  is indented.\n\n   This is OK:\n\n   ```\n   > Here goes my block quote.\n     And
  this is the second line of the quote.\n   ```\n\n   This produces *two* block quotes:\n\n
  \  ```\n   > Here goes my block quote.\n   > And this is another block quote!\n
  \  ```\n\n3. HTML blocks and inline HTML are not supported.\n\n4. See [differences
  in inline parsing](#differences-in-inline-parsing).\n\n## MMark and Common Mark\n\nMMark
  mostly tries to follow the Common Mark specification as given here:\n\nhttp://spec.commonmark.org/0.28/\n\nHowever,
  due to the fact that we do not allow inputs that do not make sense,\nand also try
  to guard against common mistakes (like writing `##My header`\nand having it rendered
  as a paragraph starting with hashes) MMark obviously\ncan't follow the specification
  precisely. In particular, parsing of inlines\ndiffers considerably from Common Mark
  (see below).\n\nAnother difference between Common Mark and MMark is that the latter
  supports\nmore (pun alert) common markdown extensions out-of-the-box. In particular,\nMMark
  supports:\n\n* parsing of an optional YAML block\n* strikeout using `~~this~~` syntax\n*
  superscript using `^this^` syntax\n* subscript using `~this~` syntax\n* automatic
  assignment of ids to headers\n* pipe tables (as on GitHub)\n\nOne does not need
  to enable or tweak anything for these to work, they are\nbuilt-in features.\n\n###
  Differences in inline parsing\n\nEmphasis and strong emphasis is an especially hairy
  topic in the Common Mark\nspecification. There are 17 ad-hoc rules defining interaction
  between `*`\nand `_` -based emphasis and more than an half of all Common Mark examples\n(that's
  about 300) test just this tricky logic.\n\nNot only it is hard to implement, it's
  hard to understand for humans too.\nFor example, this input:\n\n```\n*(*foo*)*\n```\n\nresults
  in the following HTML:\n\n```\n<p><em>(<em>foo</em>)</em></p>\n```\n\n(Note the
  nested emphasis.)\n\nCould it produce something like this instead?\n\n```\n<p><em>(</em>foo<em>)</em></p>\n```\n\nWell,
  why not? Without remembering those 17 ad-hoc rules, there going to be\na lot of
  tricky cases when a user won't be able to tell how markdown will be\nparsed.\n\nI
  decided to make parsing of emphasis, strong emphasis, and similar\nconstructs like
  strikethrough, subscript, and superscript more symmetric and\nless ad-hoc. In 99%
  of practical cases it is identical to Common Mark, and\nnormal markdown intuitions
  will work OK for the users.\n\nLet's start by dividing all characters into four
  groups:\n\n* **Space characters**, including space, tab, newline, carriage return,
  and\n  other characters like non-breaking space.\n\n* **Markup characters**, including
  the following: `*`, `~`, `_`, `` ` ``,\n  `^`, `[`, `]`. These are used for markup
  and whenever they appear in a\n  document, they must form valid markup constructions.
  To be used as\n  ordinary punctuation characters they must be backslash escaped.\n\n*
  **Punctuation characters**, which include all punctuation characters that\n  are
  not **markup characters**.\n\n* **Other characters**, which include all characters
  not falling into the\n  three groups described above.\n\nNext, let's assign *levels*
  to all groups but **markup characters**:\n\n* **Space characters**—level 0\n* **Punctuation
  characters**—level 1\n* **Other characters**—level 2\n\nWhen **markup characters**
  or **punctuation characters** are escaped with\nbackslash they become **other characters**.\n\nWe'll
  call **markdown characters** placed between a character of level `L`\nand a character
  of level `R` *left-flanking delimiter run* if and only if:\n\n```\nlevel(L) < level(R)\n```\n\nThese
  **markup characters** sort of hang on the left hand side of a word.\n\nSimilarly
  we'll call **markdown characters** placed between a character of\nlevel `L` and
  a character of level `R` *right-flanking delimiter run* if and\nonly if:\n\n```\nlevel(L)
  > level (R)\n```\n\nThese **markup characters** hang on the right hand side of a
  word.\n\n*Emphasis markup* (and other similar things like strikethrough, which we\nwon't
  mention explicitly anymore for brevity) can start only as\n*left-flanking delimiter
  run* and end only as *right-flanking delimiter\nrun*.\n\nThis produces a parse error:\n\n```\n*Something
  * is not right.\nSomething __is __ not right.\n```\n\nAnd this too:\n\n```\n__foo__bar\n```\n\nThis
  means that inter-word emphasis is not supported by this approach.\n\nThe next example
  is OK because `s` is an **other character** and `.` is a\n**punctuation character**,
  so `level('s') > level('.')`.\n\n```\nHere it *goes*.\n```\n\nIn some rare cases
  backslash escaping can help get the right result:\n\n```\nHere goes *(something\\)*.\n```\n\nWe
  escaped the closing parenthesis `)` so it becomes an **other character**\nwith level
  2 and so its level is greater than the level of plain punctuation\ncharacter `.`.\n\n###
  Other differences\n\nBlock-level parsing:\n\n* If a line starts with hash signs
  it is expected to be a valid *non-empty*\n  header (level 1–6 inclusive). If you
  want to start a paragraph with\n  hashes, just escape the first hash with backslash
  and that will be enough.\n* Setext headings are not supported for the sake of simplicity.\n*
  Fenced code blocks must be explicitly closed by a closing fence. They are\n  not
  closed by the end of document or by start of another block.\n* Lists and block quotes
  are defined by column at which their content\n  starts. Content belonging to a particular
  list or block quote should start\n  at the same column (or greater column, up to
  the column where indented\n  code blocks start). As a consequence of this, block
  quotes do not feature\n  “laziness”.\n* Block quotes are started by a single `>`
  character, it's not necessary to\n  put a `>` character at beginning of every line
  belonging to a quote (in\n  fact, this would make every line a separate block quote).\n*
  Paragraphs can be interrupted by unordered and ordered lists with any\n  valid starting
  index.\n* HTML blocks are not supported because the syntax conflicts with autolinks\n
  \ and the feature is a hack to compensate for the lack of extensibility and\n  customization
  in the original markdown.\n\nInline-level parsing:\n\n* MMark does not support hard
  line breaks represented as double space before\n  newline. Nevertheless, hard line
  breaks in the form of backslash before\n  newline are supported (these are more
  explicit too).\n* All URI references (in links, images, autolinks, etc.) are parsed
  as per\n  RFC 3986, no support for escaping or support for entity and numeric\n
  \ character references is provided. In addition to that, when a URI\n  reference
  in not enclosed with `<` and `>`, then closing parenthesis\n  character `)` is not
  considered part of URI (use `<uri>` syntax if you\n  want a closing parenthesis
  as part of a URI). Since the empty string is a\n  valid URI and it may be confusing
  in some cases, we also force the user to\n  write `<>` to represent the empty URI.\n*
  Putting links in text of another link is not allowed, i.e. no nested links\n  is
  possible.\n* Putting images in description of other images is not allowed (similarly
  to\n  the situation with links).\n* HTML inlines are not supported for the same
  reason why HTML blocks are not\n  supported.\n\n## About MMark-specific extensions\n\n*
  YAML block must start with three hyphens `---` and end with three hyphens\n  `---`.
  It can only be placed at the beginning of a markdown document.\n  Trailing white
  space after the `---` sequences is allowed.\n\n## Performance\n\nI [have compared](https://github.com/mrkkrp/md-bench)
  speed and memory\nconsumption of various Haskell markdown libraries by running them
  on an\nidentical, big-enough markdown document and by rendering it as HTML:\n\nLibrary
  \            | Parsing library     | Execution time | Allocated   | Max residency\n--------------------|---------------------|---------------:|------------:|-------------:\n`cmark-0.5.6`
  \      | Custom C code       |       323.4 μs |     228,440 |         9,608\n`mmark-0.0.5.1`
  \    | Megaparsec          |       7.027 ms |  26,180,272 |        37,792\n`cheapskate-0.1.1`
  \ | Custom Haskell code |       10.76 ms |  44,686,272 |       799,200\n`markdown-0.1.16`
  † | Attoparsec          |       14.13 ms |  69,261,816 |       699,656\n`pandoc-2.0.5`
  \     | Parsec              |       37.90 ms | 141,868,840 |     1,471,080\n\n*Results
  are ordered from fastest to slowest.*\n\n† The `markdown` library is sloppy and
  parses markdown incorrectly. For\nexample, it parses the following `*My * text`
  as an inline containing\nemphasis, while in reality both asterisks must form flanking
  delimiter runs\nto create emphasis, like so `*My* text`. This allowed `markdown`
  to get away\nwith a far simpler approach to parsing at the price that it's not really
  a\nvalid markdown implementation.\n\n## Related packages\n\n* [`mmark-ext`](https://hackage.haskell.org/package/mmark-ext)
  contains some\n  commonly useful MMark extensions.\n* [`mmark-cli`](https://hackage.haskell.org/package/mmark-cli)
  is a command\n  line interface to MMark.\n* [`flycheck-mmark`](https://github.com/mmark-md/flycheck-mmark)
  is a way to\n  check markdown documents against MMark parser interactively from
  Emacs.\n\n## Contribution\n\nIssues, bugs, and questions may be reported in [the
  GitHub issue tracker for\nthis project](https://github.com/mmark-md/mmark/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2017–2018 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
