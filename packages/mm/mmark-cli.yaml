homepage: https://github.com/mmark-md/mmark-cli
changelog-type: markdown
hash: 4fa8ed1284c0ab4de0f1330cb319b9272318c7a26c4850243c14c12c7e5b94bd
test-bench-deps: {}
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Command line interface to the MMark markdown processor
changelog: ! "## MMark CLI 0.0.5.0\n\n* Added support for the `ghcSyntaxHighlighter`
  extension. Only available\n  when compiled with GHC >= 8.4.1.\n\n## MMark CLI 0.0.4.0\n\n*
  This version works with `mmark-0.0.6.0` and `megaparsec-7.0.0`.\n\n## MMark CLI
  0.0.3.0\n\n* This version works with `mmark-ext-0.2.0.0` and later.\n\n## MMark
  CLI 0.0.2.0\n\n* Added two new extensions: footnotes (`--ext-footnotes`) and MathJax\n
  \ support (`--ext-mathjax`).\n\n## MMark CLI 0.0.1.0\n\n* Initial release.\n"
basic-deps:
  mmark-ext: ! '>=0.2 && <0.3'
  lucid: ! '>=2.6 && <3.0'
  bytestring: ! '>=0.9.2 && <0.11'
  base: ! '>=4.9 && <5.0'
  unordered-containers: ! '>=0.2.5 && <0.3'
  text: ! '>=0.2 && <1.3'
  mmark: ! '>=0.0.6 && <0.1'
  megaparsec: ! '>=7.0 && <8.0'
  gitrev: ! '>=1.3 && <1.4'
  stache: ! '>=2.0 && <3.0'
  optparse-applicative: ! '>=0.14 && <0.15'
  aeson: ! '>=0.11 && <1.5'
  directory: ! '>=1.2.2 && <1.4'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.5.0
author: Mark Karpov <markkarpov92@gmail.com>
latest: 0.0.5.0
description-type: markdown
description: ! "# MMark CLI\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/mmark-cli.svg?style=flat)](https://hackage.haskell.org/package/mmark-cli)\n[![Stackage
  Nightly](http://stackage.org/package/mmark-cli/badge/nightly)](http://stackage.org/nightly/package/mmark-cli)\n[![Stackage
  LTS](http://stackage.org/package/mmark-cli/badge/lts)](http://stackage.org/lts/package/mmark-cli)\n[![Build
  Status](https://travis-ci.org/mmark-md/mmark-cli.svg?branch=master)](https://travis-ci.org/mmark-md/mmark-cli)\n\n*
  [Templates](#templates)\n* [Extensions](#extensions)\n  * [Comment paragraph](#comment-paragraph)\n
  \ * [Font Awesome](#font-awesome)\n  * [Footnotes](#footnotes)\n  * [Kbd tags](#kbd-tags)\n
  \ * [Link targets](#link-targets)\n  * [MathJax](#mathjax)\n  * [Email obfuscation](#email-obfuscation)\n
  \ * [Punctuation prettifier](#punctuation-prettifier)\n  * [GHC syntax highlighter](#ghc-syntax-highlighter)\n
  \ * [Skylighting](#skylighting)\n  * [Table of contents](#table-of-contents)\n*
  [Contribution](#contribution)\n* [License](#license)\n\nThis is a command line application
  serving as an interface to the MMark\nmarkdown processor.\n\n```\nmmark—command
  line interface to MMark markdown processor\n\nUsage: mmark [-v|--version] [-i|--ifile
  IFILE] [-o|--ofile OFILE] [-j|--json]\n             [-t|--template FILE] [--ext-comment
  PREFIX] [--ext-font-awesome]\n             [--ext-footnotes] [--ext-kbd] [--ext-link-target]
  [--ext-mathjax]\n             [--ext-obfuscate-email CLASS] [--ext-punctuation]\n
  \            [--ext-skylighting] [--ext-toc RANGE]\n  Command line interface to
  MMark markdown processor\n\nAvailable options:\n  -h,--help                Show
  this help text\n  -v,--version             Print version of the program\n  -i,--ifile
  IFILE         Read markdown source from this file (otherwise read\n                           from
  stdin)\n  -o,--ofile OFILE         Save rendered HTML document to this file (otherwise\n
  \                          write to stdout)\n  -j,--json                Output parse
  errors and result in JSON format\n  -t,--template FILE       Use the template located
  at this path\n  --ext-comment PREFIX     Remove paragraphs that start with the given
  prefix\n  --ext-font-awesome       Enable support for inserting font awesome icons\n
  \ --ext-footnotes          Enable support for footnotes\n  --ext-kbd                Enable
  support for wrapping things in kbd tags\n  --ext-link-target        Enable support
  for specifying link targets\n  --ext-mathjax            Enable support for MathJax
  formulas\n  --ext-obfuscate-email CLASS\n                           Obfuscate email
  addresses assigning the specified\n                           class\n  --ext-punctuation
  \       Enable punctuation prettifier\n  --ext-skylighting        Enable syntax
  highlighting of code snippets with\n                           Skylighting\n  --ext-toc
  RANGE          Enable generation of table of contents using the\n                           supplied
  range of headers to include, e.g. \"1-6\" or\n                           \"2-4\"\n```\n\n##
  Templates\n\nBy using the `--template` argument, it's possible to create a standalone\nHTML
  page. The templating system we use is\n[Mustache](https://mustache.github.io/mustache.5.html),
  as implemented by\nthe [stache](https://hackage.haskell.org/package/stache) library.
  The\nlibrary conforms to the version 1.1.3 of the official [Mustache\nspecification](https://github.com/mustache/spec),
  but does not implement\nlambdas (which is an optional feature is the specification)
  for simplify and\nother technical reasons we won't touch here.\n\nIf markdown source
  file has a YAML section, its contents will be provided as\ncontext for rendering
  of the template. In addition to that, a new top-level\nvalue bound to the variable
  named `output` will be available. That variable\ncontains the HTML rendition of
  markdown document. It's best to interpolate\nit without HTML escaping, like so:
  `{{& output }}`.\n\n## Extensions\n\nHere we list how to use the available extensions.
  The extensions come from\nthe [`mmark-ext`](https://hackage.haskell.org/package/mmark-ext)
  package.\n\n### Comment paragraph\n\n* Option: `--ext-comment PREFIX`\n\nThis extension
  removes paragraphs that start with the given `PREFIX`. For\nexample:\n\n```\n$ mmark
  --ext-comment REM\nFirst.\n\nREM Second.\n\nThird.\n----------------------- Control-D\n<p>First.</p>\n<p>Third.</p>\n```\n\n###
  Font awesome\n\n* Option: `--ext-font-awesome`\n\nThis allows to turn autolinks
  with `fa` scheme into font awesome icons:\n\n```\n$ mmark --ext-font-awesome\nHere
  is the user icon: <fa:user>.\n\nA more interesting example: <fa:quote-left/3x/pull-left/border>.\n-----------------------
  Control-D\n<p>Here is the user icon: <span class=\"fa fa-user\"></span>.</p>\n<p>A
  more interesting example:\n  <span class=\"fa fa-quote-left fa-3x fa-pull-left fa-border\"></span>.\n</p>\n```\n\nIn
  general, all path components in URIs that go after the name of icon will\nbe prefixed
  with `\"fa-\"` and added as classes, so you can do a lot of fancy\nstuff, see http://fontawesome.io/examples/.\n\n###
  Footnotes\n\n* Option: `--ext-footnotes`\n\nThe extension performs two transformations:\n\n*
  It turns links with URIs with `footnote` scheme and single path piece\n  consisting
  of a number into links to footnote references.\n* It turns block quotes with the
  `\"footnotes\"` label (see the example below)\n  into a footnote section.\n\n```\n$
  mmark --ext-footnotes\nHere goes some text [1](footnote:1).\n\n> footnotes\n\n  1.
  Here we have the footnote.\n----------------------- Control-D\n<p>Here goes some
  text <a href=\"#fn1\" id=\"fnref1\"><sup>1</sup></a>.</p>\n<ol>\n<li id=\"fn1\">\nHere
  we have the footnote.\n<a href=\"#fnref1\">↩</a></li>\n</ol>\n```\n\nThe extension
  is not fully safe though in the sense that we can't check that\na footnote reference
  refers to an existing footnote and that footnotes have\ncorresponding references,
  or that they are present in the document in the\nright order.\n\n### Kbd tags\n\n*
  Option: `--ext-kbd`\n\nIntroduce kbd tags into resulting HTML document by wrapping
  content in links\nwith URL with `kbd` scheme. For example:\n\n```\n$ mmark --ext-kbd\nTo
  enable that mode press [Ctrl+A][kbd].\n\n[kbd]: kbd:\n----------------------- Control-D\n<p>To
  enable that mode press <kbd>Ctrl+A</kbd>.</p>\n```\n\nThe use of reference-style
  links seems more aesthetically pleasant to the\nauthor, but you can of course do
  something like this instead:\n\n```\nTo enable that mode press [Ctrl+A](kbd:).\n```\n\n###
  Link targets\n\n* Option: `--ext-link-target`\n\nWhen title of a link starts with
  the word `\"_blank\"`, `\"_self\"`,\n`\"_parent\"`, or `\"_top\"`, it's stripped
  from title (as well as all\nwhitespace after it) and added as the value of `target`
  attribute of the\nresulting link. For example:\n\n```\n$ mmark --ext-kbd\nThis [link](/url
  '_blank My title') opens in new tab.\n----------------------- Control-D\n<p>This
  <a href=\"/url\" title=\"My title\" target=\"_blank\">link</a>\nopens in new tab.</p>\n```\n\n###
  MathJax\n\n* Option: `--ext-mathjax`\n\nThe extension allows to transform inline
  code spans into MathJax inline\nspans and code blocks with the info string `\"mathjax\"`
  (case-sensitive) into\nMathJax display spans. Every line in such a code block will
  produce a\nseparate display span, i.e. a separate line with a formula (which is\nprobably
  what you want anyway).\n\nInline code spans must start and end with the dollar sign
  `$` to be\nrecognized as MathJax markup:\n\n````\n$ mmark --ext-mathjax\nLet's talk
  about `$A$` and `$B$`.\n\n```mathjax\nA \\xrightarrow{f} B\n```\n-----------------------
  Control-D\n<p>Let&#39;s talk about\n  <span class=\"math inline\">\\(A\\)</span>
  and\n  <span class=\"math inline\">\\(B\\)</span>.\n</p>\n<p>\n  <span class=\"math
  display\">\\[A \\xrightarrow{f} B\\]</span>\n</p>\n````\n\n### Email obfuscation\n\n*
  Option: `--obfuscate-email CLASS`\n\nThis extension makes email addresses in autolinks
  be rendered as something\nlike this:\n\n```\n[mark@arch ~]$ mmark --ext-obfuscate-email
  protected-email\nSend all your spam to <someone@example.org>, if you can!\n-----------------------
  Control-D\n<p>Send all your spam to\n  <a href=\"javascript:void(0)\"\n     class=\"protected-email\"\n
  \    data-email=\"someone@example.org\">\n  Enable JavaScript to see this email</a>,
  if you can!\n</p>\n```\n\nYou'll also need to include jQuery and this bit of JS
  code for the magic to\nwork:\n\n```java-script\n$(document).ready(function () {\n
  \   $(\".protected-email\").each(function () {\n        var item = $(this);\n        var
  email = item.data('email');\n        item.attr('href', 'mailto:' + email);\n        item.html(email);\n
  \   });\n});\n```\n\n### Punctuation prettifier\n\n* Option: `--ext-punctuation`\n\nThis
  makes MMark prettify punctuation (only affects plain text in inlines),\nthe effect
  is the following:\n\n* Replace `...` with ellipsis `…`\n* Replace `---` with em-dash
  `—`\n* Replace `--` with en-dash `–`\n* Replace `\"` with left double quote `“`
  when previous character was a space\n  character, otherwise replace it with right
  double quote `”`\n* Replace `'` with left single quote `‘` when previous character
  was a space\n  character, otherwise replace it with right single quote `’` aka apostrophe\n\nFor
  example (not sure if this is the correct punctuation to use here, but it\ndemonstrates
  the effect):\n\n```\n[mark@arch ~]$ mmark --ext-punctuation\nSomething---we don't
  know what, happened...\n----------------------- Control-D\n<p>Something—we don’t
  know what, happened…</p>\n```\n\n### GHC syntax highlighter\n\n* Option: `--ext-ghc-highlighter`\n\nUse
  the [GHC syntax\nhighlighter](https://hackage.haskell.org/package/ghc-syntax-highlighter)\npackage
  to highlight code blocks with `\"haskell\"` info string using lexer of\nGHC itself.\n\nThe
  resulting HTML will be rendered as described\n[here](https://hackage.haskell.org/package/mmark-ext/docs/Text-MMark-Extension-GhcSyntaxHighlighter.html#v:ghcSyntaxHighlighter).\n\nExample:\n\n````\n[mark@arch
  ~]$ mmark --ext-skylighting\nSome Haskell:\n\n```haskell\nmain :: IO ()\nmain =
  return ()\n```\n----------------------- Control-D\n<p>Some Haskell:</p>\n<div class=\"source-code\"><pre><code
  class=\"language-haskell\">\n<span class=\"va\">main</span><span> </span><span class=\"sy\">::</span><span>
  </span><span class=\"cr\">IO</span><span> </span><span class=\"sy\">(</span><span
  class=\"sy\">)</span><span>\n</span><span class=\"va\">main</span><span> </span><span
  class=\"sy\">=</span><span> </span><span class=\"va\">return</span><span> </span><span
  class=\"sy\">(</span><span class=\"sy\">)</span><span>\n</span></code></pre></div>\n````\n\n###
  Skylighting\n\n* Option: `--ext-skylighting`\n\nUse the [skylighting](https://hackage.haskell.org/package/skylighting)\npackage
  to render code blocks with info strings that result in a successful\nlookup from
  the syntax table that comes with the library.\n\nThe resulting HTML will be rendered
  as described\n[here](https://hackage.haskell.org/package/mmark-ext/docs/Text-MMark-Extension-Skylighting.html#v:skylighting).\n\nExample:\n\n````\n[mark@arch
  ~]$ mmark --ext-skylighting\nSome Haskell:\n\n```haskell\nmain :: IO ()\nmain =
  return ()\n```\n----------------------- Control-D\n<p>Some Haskell:</p>\n<div class=\"source-code\"><pre><code
  class=\"language-haskell\">\n<span class=\"ot\">main ::</span><span> </span><span
  class=\"dt\">IO</span><span> ()</span>\n<span>main </span><span class=\"fu\">=</span><span>
  return ()</span>\n</code></pre></div>\n````\n\n### Table of contents\n\n* Option:
  `--ext-toc RANGE`\n\nReplace the code block with info string `\"toc\"` by table
  of contents\nassembled from headings with levels from `N` to `M`, where `N-M` is
  `RANGE`.\n\nFor example:\n\n````\n[mark@arch ~]$ mmark --ext-toc 2-4\n# Story of
  my life\n\n```toc\n```\n\n## Charpter 1\n\nFoo.\n\n## Chapter 2\n\nBar.\n\n### Something\n\nBaz.\n-----------------------
  Control-D\n<h1 id=\"story-of-my-life\">Story of my life</h1>\n<ul>\n<li>\n<a href=\"#charpter-1\">Charpter
  1</a>\n</li>\n<li>\n<a href=\"#chapter-2\">Chapter 2</a>\n<ul>\n<li>\n<a href=\"#something\">Something</a>\n</li>\n</ul>\n</li>\n</ul>\n<h2
  id=\"charpter-1\">Charpter 1</h2>\n<p>Foo.</p>\n<h2 id=\"chapter-2\">Chapter 2</h2>\n<p>Bar.</p>\n<h3
  id=\"something\">Something</h3>\n<p>Baz.</p>\n````\n\n## Contribution\n\nIssues,
  bugs, and questions may be reported in [the GitHub issue tracker for\nthis project](https://github.com/mmark-md/mmark-cli/issues).\n\nPull
  requests are also welcome.\n\n## License\n\nCopyright © 2018 Mark Karpov\n\nDistributed
  under BSD 3 clause license.\n"
license-name: BSD-3-Clause
