homepage: https://oleksandrzhabenko.github.io/mmsyn2
changelog-type: markdown
hash: 0e865326b286e49a5bfe971d39496e48b33314be4531982e7b463b7d1b2b223d
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: The library that can be used for multiple (Ord a) => a -> b transformations
changelog: |+
  # Revision history for mmsyn2

  ## 0.1.2.0 -- 2019-09-24

  * First version revised. From deprecated mm2. Some optimization changes.

  ## 0.1.3.0 -- 2019-09-27

  * First release revised B. Some performance changes and changing the imported functions.
  Moreover, fixed constraints in cabal file. Make more exact the vector usage.

  ## 0.1.4.0 -- 2019-09-28

  * First version revised C. Some performance improvements and changing the imported functions.

  ## 0.1.5.0 -- 2019-09-28

  * First version revised D. Some performance improvements and changing the documentation.
  The benchmark testing continues.

  ## 0.1.6.0 -- 2019-09-30

  * First version revised E. Some performance improvements and changing the documentation.
  The benchmark testing continues.

  ## 0.1.6.1 -- 2019-10-22

  * First version revised F. Some minor documentation changes.
  The benchmark testing continues.

  ## 0.1.7.0 -- 2019-12-24

  * First version revised G. Changed the dependency bounds so that it now can be compiled with GHC 8.8.1.

  ## 0.1.8.0 -- 2020-05-14

  * First version revised H. Changed the dependency bounds so that it now can be compiled with GHC 8.10* series. Some documentation improvements.

  ## 0.2.0.0 -- 2020-10-15

  * Second version. Added a new module CaseBi.Unboxed with functions that operate on the unboxed vectors.

basic-deps:
  base: '>=4.3 && <4.15'
  vector: '>=0.11 && <0.14'
all-versions:
- 0.2.0.0
author: OleksandrZhabenko
latest: 0.2.0.0
description-type: markdown
description: |
  ## Welcome to mmsyn2 home page!

  mmsyn2 is the library that can be used for multiple (Ord a) => a -> b transformations.

  Since the 0.2.0.0 version there are two modules with the similar functionality: for boxed and unboxed vectors. The last one is probably more efficient in some cases.
license-name: MIT
