homepage: https://hackage.haskell.org/package/mmsyn7ukr
changelog-type: markdown
hash: eb697b69bfacf1c1605e2b6f4e2e2cba03e003d02407886382fca118c590e668
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: A simple basic interface to some SoX functionality or to produce a voice
  that can be used by mmsyn7h
changelog: "# Revision history for mmsyn7ukr\n\n## 0.1.0.0 -- 2019-12-19\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.1.1.0 -- 2019-12-19\n\n* First
  version revised A. Fixed an issue with an empty do-block (mismatched code indentation).\n\n##
  0.1.1.1 -- 2019-12-20\n\n* First version revised B. Improved some documentation
  and .cabal file.\n\n## 0.1.2.0 -- 2019-12-23\n\n* First version revised C. Fixed
  an issues with the not created and not appripriately running recording for the sound.\n\n##
  0.2.0.0 -- 2019-12-24\n\n* Second version. Fixed an issue with the copying files.
  Changed a module structure. Some minor changes to the documentation.\n\n## 0.2.1.0
  -- 2019-12-24\n\n* Second version revised A. Extended the bounds for the base package
  dependency so that it now can be compiled for GHC 8.8.1. \nAdded some functionality
  to improve the control over the program mmsyn7ukr behaviour.\n\n## 0.3.0.0 -- 2019-12-24\n\n*
  Third version. Changed behaviour of the program so that it now only creates a \"voice\".
  It allows to use additional executable mmsyn7h afterwards from the package with
  the same name. \nThe latter is very close to mmsyn6ukr but uses the data files in
  the directory where it is running instead of defined by the standard for Paths_mmsyn6ukr.\n\n##
  0.3.0.1 -- 2019-12-25\n\n* Third version revised A. Changed some documentation and
  text messages to more consistent ones.\n\n## 0.3.1.0 -- 2019-12-27\n\n* Third version
  revised B. Changed the behaviour for 'alterVadB' and 'alterVadE' functions so that
  are now fully iterative with thread delay.\n\n## 0.4.0.0 -- 2019-12-31\n\n* Fourth
  version. Changed the behaviour of the program. Now it uses command line arguments
  (if any). See README. Added functions and rewrote the complex ones. \n\n## 0.4.1.0
  -- 2020-01-01\n\n* Fourth version revised A. Fixed issues with the null command
  line arguments and showing precision. Added new functions.\n\n## 0.4.2.0 -- 2020-01-02\n\n*
  Fourth version revised B. Added a new function 'gainL' to the SoXBasics module.
  Fixed an issue with 'volS' function. Some minor code changes. Some documentation
  improvements.\n\n## 0.5.0.0 -- 2020-01-05\n\n* Fifth version. Added proper support
  for Windows for the functions in the SoXBasics and Main modules. Added a new function
  'gainL' to the SoXBasics module. Fixed an issue with 'volS' function. Some minor
  code changes. Some documentation improvements.\n\n## 0.5.0.1 -- 2020-01-06\n\n*
  Fifth version revised A. Improved a documentation structure.\n\n## 0.6.0.0 -- 2020-01-10\n\n*
  Sixth version. Added a possibility to create not a full set of \nthe Ukrainian sounds
  representations, but only for the those \nnon-silent ones that are specified by
  the third command line parameter.\n\n## 0.6.1.0 -- 2020-01-10\n\n* Sixth version
  revised A. Fixed issues with wrongly located information messages, \nnon-parsed
  third command line argument. Added a new module ReplaceP. Some minor improvements.\n\n##
  0.6.1.1 -- 2020-01-10\n\n* Sixth version revised B. Fixed documentation issues.\n\n##
  0.6.2.0 -- 2020-01-13\n\n* Sixth version revised C. Fixed issues with wrongly parsed
  sounds that are represented with two letters (\"дж\", \"дз\", \"сь\", \"ць\").\n\n##
  0.6.2.1 -- 2020-01-13\n\n* Sixth version revised D. Fixed issues with being not
  compiled.\n\n## 0.6.3.0 -- 2020-01-13\n\n* Sixth version revised E. Simplified the
  parsing module ReplaceP.\n\n## 0.7.0.0 -- 2020-01-20\n\n* Sevenh version. Added
  the possibility to omit the securing and usual limitation (for regularization) for
  the initial sound data recording duration.\nIt is so called 'sharp' mode. Fixed
  an issue with the wrong duration. Some minor code improvements.\n\n## 0.7.1.0 --
  2020-01-20\n\n* Seventh version revised A. Removed the special parameter in the
  code, which influenced the duration of the initial sound data recording.\n\n## 0.7.2.0
  -- 2020-01-21\n\n* Seventh version revised B. Fixed an issue with the noise reduction
  that can remove sensitive sound recording data from the program\nproduced recordings.
  Added some additional functions. Some documentation improvements. The program now
  creates a noise profile at\nthe beginning of its execution. Afterwards, it is removed
  if the program ends successfully.\n\n## 0.7.3.0 -- 2020-01-22\n\n* Seventh version
  revised C. Changed the realization of the main function. The function tempoR renamed
  to tempeRa. Documentation improvements.\n\n## 0.7.3.1 -- 2020-01-22\n\n* Seventh
  version revised D. Some documentation improvements.\n\n## 0.7.4.0 -- 2020-01-22\n\n*
  Seventh version revised E. Changed the behaviour and the realization of the noise
  reduction function tempeRa.\n\n## 0.7.5.0 -- 2020-01-23\n\n* Seventh version revised
  F. Fixed an issue with using not a minimum of the noise level for the noise reduction
  function tempeRa.\nSome minor documentation improvements.\n\n## 0.7.6.0 -- 2020-01-23\n\n*
  Seventh version revised G. Added a possibility not to reduce a noise. It is controlled
  by the first command line argument.\nSome minor documentation improvements.\n\n##
  0.8.0.0 -- 2020-01-24\n\n* Eigth version. Added a new module SoXBasics1 where all
  the functions (contrary to the SoXBasics module) try to replace\nthe initial file
  with the resulting one. Changed the lower bound for SoX \"sinc\" effect. Added help
  messages and version information\nbeing obtained in the command line.\n\n## 0.9.0.0
  -- 2020-01-24\n\n* Ninth version. Changed the behaviour in case of giving information
  to the user. Changed killing the main thread to raising a special\nexception with
  'catchEnd' function. The program now becomes also a dependency for mmsyn7h package.\n\n##
  0.9.1.0 -- 2020-01-24\n\n* Ninth version revised A. Fixed an issue with being not
  compiled because of not being imported module dependency.\n\n## 0.9.1.1 -- 2020-01-24\n\n*
  Ninth version revised B. Fixed version information.\n\n## 0.9.2.0 -- 2020-01-24\n\n*
  Ninth version revised C. Fixed an issue with Typeable in the Processing_mmsyn7ukr
  module. Now it should compile also for GHC 7.8.4.\n\n## 0.9.3.0 -- 2020-01-24\n\n*
  Ninth version revised D. Further needed work to fix an issue with Typeable in the
  Processing_mmsyn7ukr module. Now it should compile also for GHC 7.8.4.\n\n## 0.9.4.0
  -- 2020-01-25\n\n* Ninth version revised E. Fixed issues with being not properly
  created or modified the files in the SoXBasics and SoXBasics1 modules.\n\n## 0.9.4.1
  -- 2020-01-25\n\n* Ninth version revised F. Fixed issue with being not compiled
  because of the syntaxis errors. Some documentation improvements.\n\n## 0.9.4.2 --
  2020-01-25\n\n* Ninth version revised G. Fixed issue with wrong version number.\n\n##
  0.10.0.0 -- 2020-01-28\n\n* Tenth version. Data type changed to FinalException and
  it is now a separate module FinalException. The error functions in the package is
  now rewritten\nusing the new datatype.\n\n## 0.11.0.0 -- 2020-01-28\n\n* Eleventh
  version. Changed the structure of modules. The module FinalException is now Control.Exception.FinalException.
  Added new contstuctors to\nthe module. Now the FinalException datatype includes
  all the needed exceptions for mmsyn7 series of program.\n\n## 0.12.0.0 -- 2020-01-29\n\n*
  Twelfth version. Added the possibility to control the amount (level) of noise reduction
  (if any) by the first command line parameter. For this,\nadded new functions noiseReduceBU
  and noiseReduceEU to the SoXBasics and SoXBasics1 modules and changed the behaviour
  of the Main function. Fixed issue with\nthe wrongly treated first command line parameter
  in the produceSound2 function. Changed README to README.markdown. Some documentation
  improvement.\n\n## 0.12.0.1 -- 2020-01-29\n\n* Twelfth version revised A. Some documentation
  improvements.\n\n## 0.12.0.2 -- 2020-01-29\n\n* Twelfth version revised B. Fixed
  issue with possible zero input for the sox noise reduction. Now the result is replaced
  with 0.01. Some documentation improvements.\n\n## 0.12.0.3 -- 2020-01-30\n\n* Twelfth
  version revised C. Fixed issues with inexact documentation and informational messages.
  Improved stylistics. Some documentation improvements.\n\n## 0.12.0.4 -- 2020-01-30\n\n*
  Twelfth version revised D. Fixed issues with inexact documentation and informational
  messages. Improved stylistics. Some documentation improvements.\n\n## 0.12.0.5 --
  2020-02-08\n\n* Twelfth version revised E. Fixed issues with the wrong spelling
  of the word 'amplitude'. Fixed issues with deprecated documentation for Control.Exception.FinalException
  module.\n\n## 0.13.0.0 -- 2020-02-08\n\n* Thirteenth version. Added a new module
  Paths_mmsyn7ukr and a data file \"y.wav\". Added a new command line argument possibility
  (\"-t\" as a first command line argument only plays a special 0.5 second sound file).
  Improved formatting for the text displayed on the screen. Revised the documentation
  and removed the deprecated information from the README.markdown file.\n\n## 0.13.0.1
  -- 2020-02-08\n\n* Thirteenth version revised A. Fixed some issues with wrong calendar
  and spelling. \n\n## 0.14.0.0 -- 2020-02-08\n\n* Fourteenth version. Fixed issue
  with cycling the 'beginProcessing' function because of the issue with the 'controlNoiseReduction'
  function\nbeing called with default values. Added a new function 'recB' to the SoXBasics
  module. Reduced the size of the test file \"y.wav\". Changed the 'tempS' function,
  so\nthat now it returns alse the needed pause duration, which you can specify as
  a Double value after the '#' sign after the input duration ratio. By default,\nit
  is equal to 0.5, that means the duration of the pause before the SoX actually will
  record a sound data is equal to 0.5 second.\n\n## 0.14.0.1 -- 2020-02-08\n\n* Fourteenth
  version revised A. Fixed the version number.\n"
basic-deps:
  mmsyn3: ! '>=0.1.4 && <1'
  bytestring: ! '>=0.10 && <0.12'
  base: ! '>=4.7 && <4.14'
  process: ! '>=1.4 && <1.8'
  mmsyn6ukr: ! '>=0.6.2 && <1'
  mmsyn2: ! '>=0.1.7 && <1'
  vector: ! '>=0.11 && <0.14'
  directory: ! '>=1.2.5 && <1.4'
all-versions:
- 0.14.0.1
author: OleksandrZhabenko
latest: 0.14.0.1
description-type: markdown
description: "A program and a library that can be used as a simple \nbasic interface
  to some [SoX](https://sourceforge.net/projects/sox/)\nfunctionality or for producing
  \nthe approximately Ukrainian speech with your own recorded \nvoice (actually it
  produces the needed sound representations).\n\nThe program starts with CAUTION to
  be responsible for usage \nand to use it personally. Then the program guides you
  \nthrough the creating and using your Ukrainian \"voice\". \nPlease, use it carefully.
  After the execution you can\nexecute mmsyn7h program to produce some records with
  your \nnewly created \"voice\". During the execution of the last one\nyou can choose
  whether to remove (clean) \nall the created sound files in the current directory
  for \nsecurity reasons. If the programs terminate by interruption (or \ngenerally)
  it is a good practice to remove the current \ndirectory sound files manually.\n\n
  \       ***** CAUTION! *****\n        --------------------\n\n\"The possession of
  great power necessarily implies\ngreat responsibility.\"\n\n                                          (William
  Lamb)\n\nThe program mmsyn7ukr produces the \"voice\" represented as an ordered
  \nset of sounds each of which corresponds (represents) one of the \nUkrainian sounds
  so that using them together by\n[mmsyn7h program](https://hackage.haskell.org/package/mmsyn7h)\ncan
  be a background for sound synthesis.\nIf you pronounce sounds as the appropriate
  \nUkrainian ones, close to proper Ukrainian speech with your own \nvoice. This program
  approximates your voice with a sequence \nof recorded separate sounds with your
  control over the \nduration of the sounds. They are then precessed by the SoX \nbinaries
  already installed in the system to produce the \nneeded sounds and then you can
  pronounce some Ukrainian text \nwith your recorded \"voice\" using mmsyn7h program.
  In-between \nyou can do some additional processing as you need. Moreover, \nyou
  can substitute whatever sounds you like (consider being \nsensible) instead of your
  own voice.\n\nBe aware that if somebody can get access to the sounds of \nyour voice
  or to the recorded speech (except you) then this \npossibility itself creates security
  issues and concerns. So, \nplease, do NOT give access to such records to anybody
  else \nexcept you.\n\nIn such a case, the program is for personal usage of every
  \nuser ONLY!\n\nBeing given as an advice in such a case, run the program \nin the
  empty directory with the current user permissions to write, \nread and search and
  provide some proofs and evidence that nobody else \ncan even read the files in the
  directory. May be, it is better \nto execute the program being in the directory
  located in the RAM, \nthen consequently wait until the program ends and then reboot
  \nthe computer. \n\nIf the program ends earlier, you must then remove \n(better
  wipe) the directory contents. No other users should \nhave access to the computer
  after you have begun to run the \nprogram and have not deleted (or better wiped)
  the contents \nof the directory. Please, be aware, that there are possibilities
  \nto read sensitive information from the drives after you have \ndeleted the files
  in a usual way. You can use wiping for better \nsecurity. Besides, if somebody can
  get access to the memory of \nthe computer or to the directory contents where you
  run the \nprogram or (may be) to the temporary files created by SoX or \nto the
  drive where you run the program (not in the RAM, or may \nbe in it) then your voice
  can be stolen and / or used \ninappropriately. Use all possible precautions and
  measures to \navoid the situation. \n\nBe aware also that the given by the program
  technology (or \ndocumentation for it in any form) of the voice processing can \nbe
  improved so there is NO guarantees that the given technology \nor its successors
  cannot be used in violating your voice identity \nto produce from some available
  voice records the voice for the \ninappropriate usage. Therefore, better is to prove
  your identity not \nonly with the solely voice itself but with some additional \nindependent
  sources and measures. \n\nThe author of the program accordingly to the LICENSE (MIT)
  does not \nresponse for any possible issues, but by this notification tries to \nintent
  you to be aware of some possible issues.\n\n        ***** Command Line Arguments
  *****\n        ----------------------------------\n\nIf you specify as a first command
  line argument one of the numbers below\nthe program behaves as follows:\n\n    -1
  -> the program does not reduce noise, it only resamples\n       the audio to the
  needed 22050 Hz and adjusts the amplitude.\n\nIf you specified something else then
  the program will reduce the noise\nusing the created noise profile. If the first
  character is one of the \nfollowing, then the program will do the following actions
  besides.\nAfter the first character (without any spaces) you can specify \nthe level
  of noise reduction by 2 next digits. They are treated\nby the program as a fractional
  part of the number \"0.\" ++ \"...\" \nso that the last number is passed to the
  sox as an amount parameter\nin the \"noisered\" effect (the greater number gives
  more aggressive \nnoise reduction with the default one equal to 0.5).\nFor more
  information, please, refer to the SoX documentation. \n\nTherefore, if you specify
  as a first symbol in the first\ncommand line argument one of the next numbers, then\nthe
  program will behave as follows:\n\n    0 -> after the noise reduction the program
  only resamples \n      the audio to the needed 22050 Hz and adjusts the amplitude;\n
  \     \n    1 -> after the noise reduction the program additionally \n      to the
  0-processing truncates the silence from the beginning \n       and the end of the
  audio to the level given by the second \n        command line parameter;\n        \n
  \   2 -> after the noise reduction the program additionally to \n      the 1-processing
  applies a double band-reject filter to \n       the audio (SoX \"sinc\" effect);\n
  \      \n    3 -> after the noise reduction the program additionally to \n      the
  2-processing applies fade-in and fade-out effects to \n       the audio;\n       \n
  \   _ -> is the same as 3. \n\nIf you specify as a second command line argument
  one of the numbers below\nthe program behaves as follows:\n\n    0 -> if the first
  character in the first command line argument is greater or equal to 1,\n      then
  the program trims the sound at the beginning and at the end of it.\n        It firstly
  normalizes the sound (so its maximum amplitude is equal to 1)\n          and then
  applies trimming. The parts of the audio at the beginning\n            and at the
  end of the sound, which amplitudes in such a case are\n              less than 0.01
  are trimmed and the resulting sound data are processed\n                further.
  \n       \n    1 -> if the first character in the first command line argument is
  greater or equal to 1,\n      then the program trims the sound at the beginning
  and at the end of it.\n        It firstly normalizes the sound (so its maximum amplitude
  is equal to 1)\n          and then applies trimming. The parts of the audio at the
  beginning\n            and at the end of the sound, which amplitudes in such a case
  are\n              less than 0.02 are trimmed and the resulting sound data are processed\n
  \               further. \n       \n    2 -> if the first character in the first
  command line argument is greater or equal to 1,\n      then the program trims the
  sound at the beginning and at the end of it.\n        It firstly normalizes the
  sound (so its maximum amplitude is equal to 1)\n          and then applies trimming.
  The parts of the audio at the beginning\n            and at the end of the sound,
  which amplitudes in such a case are\n              less than 0.04 are trimmed and
  the resulting sound data are processed\n                further. \n       \n    3
  -> if the first character in the first command line argument is greater or equal
  to 1,\n      then the program trims the sound at the beginning and at the end of
  it.\n        It firstly normalizes the sound (so its maximum amplitude is equal
  to 1)\n          and then applies trimming. The parts of the audio at the beginning\n
  \           and at the end of the sound, which amplitudes in such a case are\n              less
  than 0.08 are trimmed and the resulting sound data are processed\n                further.
  \n       \n    _ -> if the first character in the first command line argument is
  greater or equal to 1,\n      then the program trims the sound at the beginning
  and at the end of it.\n        It firstly normalizes the sound (so its maximum amplitude
  is equal to 1)\n          and then applies trimming. The parts of the audio at the
  beginning\n            and at the end of the sound, which amplitudes in such a case
  are\n              less than 0.04 are trimmed and the resulting sound data are processed\n
  \               further. So effectively it is the same as 2 (the default value).\n
  \   \nIf you specify the third command line argument, it must be a list \nof Strings
  that can be obtained by executing the\n[mmsyn7s program](https://hackage.haskell.org/package/mmsyn7s).\nThe
  program will create just that non-silent representations for\nthe Ukrainian sounds,
  which are given. The list must be sorted.\n\n           ***** More Information *****\n
  \          ----------------------------\n\nYou can create a sound in either a 'sharp'
  mode or in a usual mode.\nThe first one means that the program does not check whether
  the\nspecified duration for recording the initial sound data\nis greater than 3
  seconds. In such a case the duration can be\nmuch smaller. This mode needs more
  mastership in interacting with a\nprogram. For speech synthesis (as an advice) use
  this mode for\nthe very short sounds (like the sound representation for \"ь\")\nor
  for the sounds, you can articulate for a long time continually\n(for example, vowels
  and some consonants). The 'sharp' mode delegates\nthe responsibility for the sound
  to much broader extent to the user,\nso for a beginning it is not recommended (though
  you can give it a try).\n\n           ***** Noise Reduction *****\n           ---------------------------\n\nAt
  the beginning the program also creates a noise profile (once per execution).\nIt
  is now used to reduce the noise level for the recorded sound representations.\nBy
  default, the program uses the default SoX noise reducing settings with\na hope that
  for you they can be sufficient. You can change the level of reduction\nby the first
  command line argument as it is written above. If you see that\nthe program removes
  some sensitive and important sound data from the recorded\nby it sound representations,
  then you can specify as a first command line\nargument \"-1\". The program in such
  a case will create a noise profile as usual,\nbut will not reduce the noise at all.\n\n
  \          ***** Ukrainian Localization *****\n           ----------------------------------\n\nPlease,
  before using the program check that uk_UA.UTF8 localization is\npresent in your
  system as one of the system locales. Otherwise,\nthe program will possibly (in some
  cases surely) cycle. In such a case,\nyou can terminate it in a usual way by sending
  interruption signals.\n\n           ***** SoXBasics and SoXBasics1 *****\n           ------------------------------------\n\nThe
  library have two similar modules with partially overlapping function names\n(so
  it is recommended to import them qualified). SoXBasics1 functions after\ncreation
  of the resulting file try to replace by it the initial one and to clean\nthe space
  from the temporary files. This can be helpful in writing sequentially\napplied functions
  but needs somewhat more resources.\n\n           ***** Test Sound Duration *****\n
  \          -------------------------------\n           \nYou can now test the sound
  duration needed as a 0.5 second pause before\nthe program can record every non-silent
  sound. This pause is caused not by the program\nitself, but by some sound recording
  equipment specific time needed to normalize\nthe behaviour of the recording (it
  depends on your equipment, but for a wide range of\npossible its configuration the
  pause for 0.5 second is valid).\nTo test a needed 0.5 second duration of the pause,
  you can use as a first\ncommand line argument \"-t\" and the program will only play
  the test sound with\njust that duration. Remember its duration -- it is the duration
  of the needed\npause before you can start your recording of the every sound representation.\n\n
  \          ***** Specifying the Pause before SoX Actually Starts Recording *****\n
  \          ---------------------------------------------------------------------\n
  \          \nYou can specify the pause before SoX actually starts recording of the
  sound data\nfor every sound representation. For this, please, specify after the
  needed\nratio a '#' sign and after it the needed duration of the pause in seconds
  as a\nDouble value. The program will try to use it. If not specified or not properly\nspecified,
  the program uses a default one (compatible with the previous versions)\nequal to
  0.5 second pause.\n"
license-name: MIT
