homepage: https://github.com/alexkazik/qrcode#readme
changelog-type: markdown
hash: 3dcb4f01eac71922935de4c87a842274c7a36611745b40dc9047603ace1028ae
test-bench-deps: {}
maintainer: alex@kazik.de
synopsis: QR code library in pure Haskell
changelog: |
  # Changelog for qrcode-core

  ## 0.9.0 -- 2019-02-16

  * Changed UTF-8 encoding: encoding a code point outside the unicode range will
    now fail the encoding, previously a replacement character was inserted
  * Removed a, internal only, partial function
  * Encoding empty data will result in an empty segment
  * Encoding an empty segment fails
  * Added functions to create an (non empty) segment without data
  * Remove StrictData

  ## 0.8.0 -- 2019-01-09

  * Initial release
basic-deps:
  bytestring: ! '>=0.10.6.0 && <0.11'
  case-insensitive: ! '>=1.2.0.5 && <1.3'
  base: ! '>=4.8.2.0 && <5'
  text: ! '>=1.2.2.0 && <1.3'
  dlist: ! '>=0.7.1.2 && <0.9'
  containers: ! '>=0.5.6.2 && <0.7'
  binary: ! '>=0.7.5.0 && <0.9'
  primitive: ! '>=0.6.1.0 && <0.7'
  vector: ! '>=0.11.0.0 && <0.13'
all-versions:
- 0.8.0
- 0.9.0
author: ALeX Kazik
latest: 0.9.0
description-type: markdown
description: |
  # qrcode

  QR code library in pure Haskell

  ## qrcode-core

  Basic functionality to create a QRCode.

  All modes are supported:
  - Numeric (digits only)
  - Alphanumeric (digits, letters and some other chars)
  - Binary / Text (ISO 8859-1 and UTF-8)
  - Kanji

  There are function to create those specifically and an auto-detect.

  The module `Codec.QRCode` has functions which creates an image out of the input.

  The module `Codec.QRCode.Intermediate` has functions to create segments of a
  QRCode, join them together and finally create the image.

  The core of the resulting image is an `Vector` of `Bool`s, each element
  describing a module ("pixel") where `False` is white and `True` is black.

  ## thanks

  Project Nayuki for https://github.com/nayuki/QR-Code-generator,
  which is the foundation of this package.
license-name: MIT
