homepage: https://github.com/vmchale/QRImager#readme
changelog-type: ''
hash: a04e388d4e40e969304d7be0b80eef1671407f1a9b5478d9b14613dcab59571b
test-bench-deps:
  base: -any
  hspec: -any
  qr-imager: -any
maintainer: vamchale@gmail.com
synopsis: Library to generate QR codes from bytestrings and objects
changelog: ''
basic-deps:
  JuicyPixels: -any
  bytestring: -any
  split: -any
  base: ! '>=4.9 && <5'
  process: -any
  haskell-qrencode: -any
  jose-jwt: -any
  cryptonite: -any
  optparse-applicative: -any
  microlens: -any
  aeson: -any
  vector: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.2.0'
- '0.1.2.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.1.2'
- '0.2.1.3'
- '0.2.2.0'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.0.3'
- '1.0.1.0'
- '1.0.1.1'
- '1.0.1.2'
- '1.0.1.3'
- '1.0.1.5'
- '1.0.1.6'
- '1.0.1.7'
- '1.0.1.8'
author: Vanessa McHale
latest: '1.0.1.8'
description-type: markdown
description: ! "# QR Imager Library\n[![Build Status](https://travis-ci.org/vmchale/QR-writer.svg?branch=master)](https://travis-ci.org/vmchale/QR-writer)\n\nThis
  is a library to generate `.png` files from QR codes.\n\n## Dependencies\nThe library
  depends on the C library [libqrencode](https://github.com/fukuchi/libqrencode) which
  you will need to install separately, as well as the C library `Zbar` from [here](https://github.com/ZBar/ZBar).
  You should also be able to get them from your distro. \n\n## Library\nThe library
  can be used via the exported functions `createQRCode`, `byteStringToQR` and `readQRString`,
  plus their signed counterparts. The first two export to \".png\" while the third
  can be used on any image format `Zbar` supports.\n\nThe functions `bsToImg` and
  `objToImg` output JuicyPixels images for your further manipulation.\n\n## Executable\n\n###
  Installation\nFor building haskell, the best tool is currently [http://haskellstack.org](stack).
  Install it, and then type\n\n```\nstack install --install-ghc\n```\n\nin the appropriate
  directory, and it will be installed to your path. \n\n### Use\n\nCompiling will
  generate an executable called `qrpipe` which reads from `stdin` and outputs a file
  as the second argument, e.g.\n\n```\necho 'My name is: Vanessa\" | qrpipe write
  -v \"nametag.png\"\n```\n\nTo then read the nametag:\n\n```\nqrpipe read \"nametag.png\"\n```\n\n"
license-name: BSD3
