homepage: https://github.com/tweag/ormolu
changelog-type: markdown
hash: cec64ab8796b96ecb41e9950b7154c4a070cf92ca07c6c3f9b5ade55312a1fbb
test-bench-deps:
  path: ! '>=0.6 && <0.7'
  base: ! '>=4.12 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  filepath: ! '>=1.2 && <1.5'
  containers: ! '>=0.5 && <0.7'
  ormolu: -any
  path-io: ! '>=1.4.2 && <2.0'
maintainer: Mark Karpov <mark.karpov@tweag.io>
synopsis: A formatter for Haskell source code
changelog: |
  ## Ormolu 0.0.2.0

  * Switched to `ghc-lib-parser` instead of depending on the `ghc` package
    directly. This should allow us to use newest features of GHC while not
    necessarily depending on the newest version of the compiler. In addition
    to that Ormolu is now GHCJS-compatible.

  * Now unrecognized GHC options passed with `--ghc-opt` cause Ormolu to fail
    (exit code 7).

  * Fixed formatting of result type in closed type families. See [issue
    420](https://github.com/tweag/ormolu/issues/420).

  * Fixed a minor inconsistency between formatting of normal and foreign type
    signatures. See [issue 408](https://github.com/tweag/ormolu/issues/408).

  * Fixed a bug when comment before module header with Haddock was moved
    inside the export list. See [issue
    430](https://github.com/tweag/ormolu/issues/430).

  * Empty `forall`s are now correctly preserved. See [issue
    429](https://github.com/tweag/ormolu/issues/429).

  * Fixed [issue 446](https://github.com/tweag/ormolu/issues/446), which
    involved braces and operators.

  * When there are comments between preceding Haddock (pipe-style) and its
    corresponding declaration they are preserved like this in the output
    instead of being shifted. To be clear, this is not a very good idea to
    have comments in that position because the Haddock will end up not being
    associated with the declarations. Issues
    [440](https://github.com/tweag/ormolu/issues/440) and
    [448](https://github.com/tweag/ormolu/issues/448).

  * Implemented correct handling of shebangs. [Issue
    377](https://github.com/tweag/ormolu/issues/377).

  * Implemented correct handling of stack headers. [Issue
    393](https://github.com/tweag/ormolu/issues/393).

  * Sorting language pragmas cannot not change meaning of the input program
    anymore. [Issue 404](https://github.com/tweag/ormolu/issues/404).

  * Fixed formatting of applications where function is a complex expression.
    [Issue 444](https://github.com/tweag/ormolu/issues/444).

  ## Ormolu 0.0.1.0

  * Initial release.
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.2 && <0.11'
  base: ! '>=4.12 && <5.0'
  text: ! '>=0.2 && <1.3'
  syb: ! '>=0.7 && <0.8'
  gitrev: ! '>=1.3 && <1.4'
  dlist: ! '>=0.8 && <0.9'
  containers: ! '>=0.5 && <0.7'
  ghc-lib-parser: ==8.8.1
  mtl: ! '>=2.0 && <3.0'
  optparse-applicative: ! '>=0.14 && <0.15'
  ormolu: -any
all-versions:
- 0.0.1.0
- 0.0.2.0
author: ''
latest: 0.0.2.0
description-type: markdown
description: |
  # Ormolu

  [![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)
  [![Hackage](https://img.shields.io/hackage/v/ormolu.svg?style=flat)](https://hackage.haskell.org/package/ormolu)
  [![Stackage Nightly](http://stackage.org/package/ormolu/badge/nightly)](http://stackage.org/nightly/package/ormolu)
  [![Stackage LTS](http://stackage.org/package/ormolu/badge/lts)](http://stackage.org/lts/package/ormolu)
  [![CircleCI](https://circleci.com/gh/tweag/ormolu/tree/master.svg?style=svg&circle-token=cfd37a39265561eb44e608f97cf953cb2a394c03)](https://circleci.com/gh/tweag/ormolu/tree/master)

  Ormolu is a formatter for Haskell source code. The project was created with
  the following goals in mind:

  * Using GHC's own parser to avoid parsing problems caused by
    [`haskell-src-exts`][haskell-src-exts].
  * Let some whitespace be programmable. The layout of the input influences
    the layout choices in the output. This means that the choices between
    single-line/multi-line layouts in each particular situation are made by
    the user, not by an algorithm. This makes the implementation simpler and
    leaves some control to the user while still guaranteeing that the
    formatted code is stylistically consistent.
  * Writing code in such a way so it's easy to modify and maintain.
  * Implementing one “true” formatting style which admits no configuration.
  * That formatting style aims to result in minimal diffs while still
    remaining very close to “conventional” Haskell formatting people use.
  * Choose a style compatible with modern dialects of Haskell. As new Haskell
    extensions enter broad use, we may change the style to accomodate them.
  * Idempotence: formatting already formatted code doesn't change it.
  * Be well-tested and robust to the point that it can be used in large
    projects without exposing unfortunate, disappointing bugs here and there.

  ## Building

  The easiest way to build the project is with Nix:

  ```console
  $ nix-build -A ormolu
  ```

  Or with `cabal-install` from the Nix shell:

  ```console
  $ nix-shell --run "cabal new-build"
  ```

  Alternatively, `stack` could be used with a `stack.yaml` file as follows.

  ```console
  $ cat stack.yaml
  resolver: lts-14.3
  packages:
  - '.'

  $ stack build
  ```

  To use Ormolu directly from GitHub with Nix, this snippet may come in handy:

  ```nix
  # This overlay adds Ormolu straight from GitHub.
  self: super:

  let source = super.fetchFromGitHub {
        owner = "tweag";
        repo = "ormolu";
        rev = "de279d80122b287374d4ed87c7b630db1f157642"; # update as necessary
        sha256 = "0qrxfk62ww6b60ha9sqcgl4nb2n5fhf66a65wszjngwkybwlzmrv"; # as well
      };
      ormolu = import source { pkgs = self; };
  in {
    haskell = super.haskell // {
      packages = super.haskell.packages // {
        "${ormolu.ormoluCompiler}" = super.haskell.packages.${ormolu.ormoluCompiler}.override {
          overrides = ormolu.ormoluOverlay;
        };
      };
    };
  }
  ```

  ## Usage

  The following will print the formatted output to the standard output.

  ```console
  $ ormolu Module.hs
  ```

  Add `--mode inplace` to replace the contents of the input file with the
  formatted output.

  ```console
  $ ormolu --mode inplace Module.hs
  ```

  ## Current limitations

  * Does not handle CPP (wontfix, see [the design document][design]).
  * Input modules should be parsable by Haddock, which is a bit stricter
    criterion than just being valid Haskell modules.
  * Various minor idempotence issues, most of them are related to comments.

  ## Editor integration

  We know of the following editor integrations:

  * [Emacs][emacs-package]
  * [VS Code][vs-code-plugin]

  ## Running on Hackage

  It's possible to try Ormolu on arbitrary packages from Hackage. For that
  execute (from the root of the cloned repo):

  ```console
  $ nix-build -A hackage.<package>
  ```

  Then inspect `result/log.txt` for possible problems. The derivation will
  also contain formatted `.hs` files for inspection and original inputs with
  `.hs-original` extension (those are with CPP dropped, exactly what is fed
  into Ormolu).

  ## Contributing

  See [CONTRIBUTING.md][contributing].

  ## License

  See [LICENSE.md][license].

  Copyright © 2018–present Tweag I/O

  [design]: https://github.com/tweag/ormolu/blob/master/DESIGN.md#cpp
  [contributing]: https://github.com/tweag/ormolu/blob/master/CONTRIBUTING.md
  [license]: https://github.com/tweag/ormolu/blob/master/LICENSE.md
  [haskell-src-exts]: https://hackage.haskell.org/package/haskell-src-exts
  [emacs-package]: https://github.com/vyorkin/ormolu.el
  [vs-code-plugin]: https://marketplace.visualstudio.com/items?itemName=sjurmillidahl.ormolu-vscode
license-name: BSD-3-Clause
