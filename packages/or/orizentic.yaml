homepage: https://github.com/luminescent-dreams/orizentic#readme
changelog-type: ''
hash: d983a31190cac9127bfbbadba22cb7632802c5f702fe387b685303bffcbd0432
test-bench-deps:
  base: -any
  time: -any
  hspec: -any
  jwt: -any
  mtl: -any
  orizentic: -any
maintainer: example@example.com
synopsis: Token-based authentication and authorization
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.7 && <5'
  time: ==1.6.*
  text: ==1.2.*
  uuid: ! '>=1.3 && <1.4'
  jwt: ==0.7.*
  containers: ! '>=0.5.7 && <0.6'
  mtl: ==2.2.*
  optparse-applicative: ! '>=0.13 && <0.14'
  random: ! '>=1.1 && <1.2'
  orizentic: -any
  aeson: ! '>=1.0.2 && <1.1'
all-versions:
- 0.1.0.0
author: Savanni D'Gerinel
latest: 0.1.0.0
description-type: markdown
description: ! "# Orizentic\n\nOrizentic provides a library that streamlines token-based
  authentication and a CLI tool for maintaining the database.\n\n## Credit\n\nThe
  name is a contraction of Auth(oriz)ation/Auth(entic)ation, and credit goes to [Daria
  Phoebe Brashear](https://github.com/dariaphoebe).\n\nThe original idea has been
  debated online for many years, but the push to make this useful comes from [Aria
  Stewart](https://github.com/aredridel).\n\n## Tokens\n\nTokens are simple [JWTs](https://jwt.io/).
  This library simplifies the process by easily generating and checking JWTs that
  have only an issuer, an optional time-to-live, a resource name, a username, and
  a list of permissions. A typical resulting JWT would look like this:\n\n    { iss
  = Savanni\n    , sub = health\n    , aud = \"Savanni Desktop\"\n    , exp = null\n
  \   , nbf = null\n    , iat = 1499650083\n    , jti = 9d57a8d8-d11e-43b2-a4d6-7b82ad043994\n
  \   , unregisteredClaims = { perms: [ \"read\", \"write\" ] }\n    }\n\nThe `issuer`
  and `audience` (or username) are almost entirely for human readability. In this
  instance, I issued a token that was intended to be used on my desktop system.\n\nThe
  `subject` in this case is synonymous with Resource and is a name for the resource
  for which access is being granted. Permissions are a simple list of freeform strings.
  Both of these are flexible within your application and your authorization checks
  will use them to verify that the token can be used for the specified purpose.\n\n##
  Usage\n\nA variety of workflows appear in the test code, however this is a workflow
  that I found to be typical in production code.\n\nStart with creating the context:\n\n```\nclaimsLst
  <- loadClaims \"authDbPath\"\nctx <- newOrizenticCtx (\"JWT secret\" :: Web.JWT.Secret)
  []\n```\n\nYour application monad will need to implement the `HasOrizenticCtx` type
  class, or you will need to call all of the orizentic functions with a reader monad.\n\n```\ndata
  AppContext -- Your application context here\n\ninstance HasOrizenticCtx AppContext
  where\n    hasOrizenticCtx = ...\n```\n\nA typical authentication/verification function
  will look like this:\n\n```\nauthenticate :: (HasOrizenticCtx m) => JWT UnverifiedJWT
  -> m False\nauthenticate token = do\n    res <- validateToken token\n    case res
  of\n        Nothing -> False    -- The token is invalid. Perhaps not a token at
  all,\n                            -- perhaps not signed with the key for this application,\n
  \                           -- or perhaps forged.\n        Just jwt -> checkAuthorizations
  validatePermissions jwt\n    where\n    -- Validate permissions receives the resource
  name and a list of\n    -- permissions. In this case, the \"resource\" is a name
  I designated to the\n    -- entire app, and the only valid permissions are read+write.
  A more\n    -- sophisticated app will want a validator with more resource names
  and more\n    -- nuanced permissions.\n    validatePermissions rn (Permissions perms)
  =\n            (rn == ResourceName \"health\")\n        &&  (\"read\"     `elem`
  perms)\n        &&  (\"write\"    `elem` perms)\n```\n\n## CLI\n\n`orizentic` is
  a command-line tool which manages a database stored to disk. The database is a plain
  text format containing JWT claims. It can be easily loaded with this function:\n\n```\nloadClaims
  :: FilePath -> IO (Either String [JWTClaimsSet])\nloadClaims path =\n    catch ((eitherDecode
  . fromStrict) <$> Data.ByteString.readFile path)\n          (\\e -> if isDoesNotExistError
  e\n                    then pure $ Right []\n                    else throw e)\n```\n\nThe
  utility is provided as a convienence for simple applications with rare database
  changes. Production environments will likely wish to manage this within a more sophisticated
  application and may wish to use some other storage backend.\n\n"
license-name: BSD-3-Clause
