homepage: https://github.com/steven777400/ulid
changelog-type: ''
hash: ac415298b0272479909ca576f4444862ae942ed85c7849fa0675e3bf496be6f3
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  hspec: -any
  text: -any
  ulid: -any
  binary: -any
  hashable: -any
  random: -any
  deepseq: -any
  format-numbers: -any
maintainer: steve@kolls.net
synopsis: Implementation of ULID, lexicographically sortable unique identifiers
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  time: -any
  crypto-api: -any
  crockford: -any
  ulid: -any
  binary: -any
  hashable: -any
  random: -any
  deepseq: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Steve Kollmansberger
latest: 0.2.0.0
description-type: markdown
description: ! "# Ulid implementation in Haskell\n\nLexicographically sortable, 128-bit
  identifier with 48-bit timestamp and 80 random bits.\nCanonically encoded as a 26
  character string, as opposed to the 36 character UUID.\n\nOriginal implementation
  and spec: https://github.com/alizain/ulid/\n\n\n# Universally Unique Lexicographically
  Sortable Identifier\n\nUUID can be suboptimal for many uses-cases because:\n\n-
  It isn't the most character efficient way of encoding 128 bits of randomness\n-
  UUID v1/v2 is impractical in many environments, as it requires access to a unique,
  stable MAC address\n- UUID v3/v5 requires a unique seed and produces randomly distributed
  IDs, which can cause fragmentation in many data structures\n- UUID v4 provides no
  other information than randomness which can cause fragmentation in many data structures\n\nInstead,
  herein is proposed ULID:\n\n- 128-bit compatibility with UUID\n- 1.21e+24 unique
  ULIDs per millisecond\n- Lexicographically sortable!\n- Canonically encoded as a
  26 character string, as opposed to the 36 character UUID\n- Uses Crockford's base32
  for better efficiency and readability (5 bits per character)\n- Case insensitive\n-
  No special characters (URL safe)\n\n\n## Usage\n\nA simple usage example:\n\n````haskell\nmodule
  Main where\n\nimport           Data.ULID\n\nmain :: IO ()\nmain = do\n    -- Derive
  a ULID using the current time and default random number generator\n    ulid1 <-
  getULID\n    print ulid1\n\n    -- Derive a ULID using a specified time and default
  random number generator\n    ulid2 <- getULIDTime 1469918176.385 -- POSIX Time,
  specified to the millisecond\n    print ulid2\n````\n\nAs per the spec, it is also
  possible to use a cryptographically-secure random number generator to contribute
  the randomness.  However, the programmer must manage the generator on their own.
  Example:\n\n\n````haskell\nmodule Main where\n\nimport           Data.ULID\n\nimport
  qualified Crypto.Random       as CR\nimport qualified Data.ULID.Random    as UR\nimport
  qualified Data.ULID.TimeStamp as TS\n\nmain :: IO ()\nmain = do     \n    -- This
  default instantiation may not be sufficiently secure, see the docs \n    -- https://hackage.haskell.org/package/crypto-api-0.13.2/docs/Crypto-Random.html\n
  \   g <- (CR.newGenIO :: IO CR.SystemRandom)\n\n    -- Generate time stamp from
  current time\n    t <- TS.getULIDTimeStamp\n    \n    let ulid3 = case UR.mkCryptoULIDRandom
  g of\n            Left err        -> error $ show err\n            Right (rnd, g2)
  -> ULID t rnd   -- use g2, etc, to continue generating secure ULIDs\n    print ulid3\n````\n\n\n\n##
  Test Suite\n\n```\nstack test\n```\n\n## Performance\n\n```\nstack bench\n```\n\n```\nRunning
  1 benchmarks...\nBenchmark ulid-bench: RUNNING...\n217,868 op/s generate\nBenchmark
  ulid-bench: FINISH\n```"
license-name: BSD-3-Clause
