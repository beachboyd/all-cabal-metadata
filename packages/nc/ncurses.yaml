homepage: https://john-millikin.com/software/haskell-ncurses/
changelog-type: ''
hash: 8ad9fe6562a80d28166d76adbac1eb4d40c6511fe4e9272ed6e1166dc2f1cdf1
test-bench-deps: {}
maintainer: John Millikin <jmillikin@gmail.com>
synopsis: Modernised bindings to GNU ncurses
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5.0'
  text: ! '>=0.7'
  containers: ! '>=0.2'
  transformers: ! '>=0.2'
all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.2.11
- 0.2.12
- 0.2.13
- 0.2.14
- 0.2.15
- 0.2.16
author: John Millikin <jmillikin@gmail.com>
latest: 0.2.16
description-type: haddock
description: ! 'GNU ncurses is a library for creating command-line application with

  pseudo-graphical interfaces. This package is a nice, modern binding

  to GNU ncurses.


  The following example is a program that displays the message

  \"Hello world!\" until the user hits Q:


  @

  import UI.NCurses


  main :: IO ()

  main = runCurses $ do

  &#x20;   setEcho False

  &#x20;   w <- defaultWindow

  &#x20;   updateWindow w $ do

  &#x20;       moveCursor 1 10

  &#x20;       drawString \"Hello world!\"

  &#x20;       moveCursor 3 10

  &#x20;       drawString \"(press q to quit)\"

  &#x20;       moveCursor 0 0

  &#x20;   render

  &#x20;   waitFor w (\\ev -> ev == EventCharacter \''q\'' || ev == EventCharacter
  \''Q\'')


  waitFor :: Window -> (Event -> Bool) -> Curses ()

  waitFor w p = loop where

  &#x20;   loop = do

  &#x20;       ev <- getEvent w Nothing

  &#x20;       case ev of

  &#x20;           Nothing -> loop

  &#x20;           Just ev'' -> if p ev'' then return () else loop

  @'
license-name: GPL-3.0-only
