homepage: ''
changelog-type: ''
hash: 6b08ae7064272e58cb3d6cd8df606d3d376de019febcffd042f8bbded7300426
test-bench-deps: {}
maintainer: info@elsen.co
synopsis: Streaming Postgres bindings
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  stm: ! '>=2.2 && <2.5'
  base: ! '>=4.6 && <4.10'
  time: ! '>=1.4 && <1.6'
  postgresql-libpq: ! '>=0.9 && <0.10'
  text: ! '>=1.1 && <1.2'
  uuid: ! '>=1.3 && <1.4'
  resource-pool: ! '>=0.2 && <0.3'
  stringsearch: ! '>=0.3 && <0.4'
  async: ! '>=2.0 && <2.1'
  conduit: ! '>=1.2.4 && <1.3'
  stm-conduit: ! '>=2.5 && <2.6'
  conduit-extra: ! '>=1.1 && <1.2'
  postgresql-binary: ! '>=0.5 && <0.6'
  blaze-builder: ! '>=0.4 && <0.5'
  mtl: ! '>=2.2 && <3.0'
  stm-chans: ! '>=2.0 && <3.1'
  attoparsec: ! '>=0.12 && <0.13'
  transformers: ! '>=0.4 && <0.5'
  parallel: ! '>=3.2 && <3.3'
  deepseq: ! '>=1.3 && <1.5'
  scientific: ! '>=0.3 && <0.4'
  resourcet: ! '>=1.1 && <1.2'
  template-haskell: ! '>=2.8 && <3.0'
  vector: ! '>=0.10 && <0.11'
all-versions:
- 0.1.0.3
author: Elsen Inc.
latest: 0.1.0.3
description-type: markdown
description: ! "<p align=\"center\">\n  <a href=\"http://elsen.co\">\n    <img src=\"https://elsen.co/img/apple-touch-icon-144x144.png\"/>\n
  \ </a>\n</p>\n\npgstream\n========\n\nStreaming of Postgres through the binary protocol
  into Haskell. Uses attoparsec\nand some hand-written kernels for array extraction.
  Results are streamed into\nvectors or batched into serial or parallel\n[Conduit](https://hackage.haskell.org/package/conduit-1.2.4/docs/Data-Conduit.html)\npipelines
  for stream composition.\n\n[![Build Status](https://travis-ci.org/elsen-trading/pgstream.svg)](https://travis-ci.org/elsen-trading/pgstream)\n\nInstallation\n------------\n\n```bash\n$
  cabal install pg_stream.cabal\n```\n\nUsage\n-----\n\n**Connections**\n\nConnections
  to Postgres are established with the ``connect`` function yielding\nthe connection
  object.\n\n```haskell\nconnect :: ConnSettings -> IO PQ.Connection\n```\n\nConnections
  are specified by a ConnSettings.\n\n```haskell\ncreds :: ConnSettings\ncreds = ConnSettings
  {_host = \"localhost\", _dbname=\"invest\", _user=\"dbadmin\"}\n```\n\nConnections
  are pooled per process. Connection pooling is specified by three\nparameters.\n\n*
  **Stripes**: Stripe count. The number of distinct sub-pools to maintain. The smallest
  acceptable value is 1.\n* **Keep Alive**: Amount of time for which an unused resource
  is kept open. The smallest acceptable value is 0.5 seconds.\n* **Affinity**: Maximum
  number of resources to keep open per stripe. The smallest acceptable value is 1.\n\nThe
  default settings are:\n\n```haskell\ndefaultPoolSettings :: PoolSettings\ndefaultPoolSettings
  = PoolSettings { _stripes = 1, _keepalive = 10, _affinity = 10 }\n```\n\n\n**Queries**\n\nQueries
  are executed using ``query`` for statements that yield result sets or by\n``execute``
  for queries that return a status code.\n\n```haskell\nquery :: (FromRow r, ToSQL
  a) => PQ.Connection -> Query -> a -> IO [r]\nexecute :: (ToSQL a) => PQ.Connection
  -> Query -> a -> IO ()\n```\n\nFor example:\n\n```haskell\nrun :: IO [Row]\nrun
  = do\n  conn <- connect creds\n  query conn sample args\n```\n\nSQL queries are
  constructed via quasiquoter (``[sql| ... |]``) which generates a\n``Query`` (newtype
  around a bytestring). Values and SQL fragments can be spliced\ninto this template
  as arguments.\n\n```haskell\n{-# LANGUAGE QuasiQuotes #-}\n\nsample :: Query\nsample
  = [sql|\n    SELECT\n      deltas.sid AS sid,\n      EXTRACT(EPOCH FROM deltas.day)
  AS day,\n      (ohlcs :: float4[])\n    FROM deltas\n    INNER JOIN security_groupings
  ON deltas.sid = security_groupings.sid\n    INNER JOIN currentprice ON (\n      deltas.sid
  = currentprice.sid\n      AND deltas.DAY = currentprice.DAY\n      AND currentprice.val
  BETWEEN 0 AND 500\n    )\n    WHERE security_groupings.name = 'SP900'\n    AND deltas.day
  BETWEEN TO_TIMESTAMP({1}) AND TO_TIMESTAMP({2})\n    ORDER BY deltas.sid,\n             deltas.DAY
  ASC\n    {3}\n    ;\n|]\n```\n\n**Arguments**\n\nIf the types of arguments are constrained
  by inference then no annotations are\nnecessary. Otherwise annotations are needed
  to refine the Num/String instances\ninto concrete types so they can be serialized
  and sent to Postgres.\n\n```haskell\nargs :: (Int, Int, SQL)\nargs = ( 1335855600
  , 1336374000 , \"LIMIT 100000\")\n```\n\nThe conversion from Haskell to Postgres
  types is defined by the\nFromField/ToField typeclasses with the mapping given by.\n\n|
  Postgres      | Haskell       |\n| ------------- |---------------|\n| int2          |
  Int8          |\n| int4          | Int32         |\n| int8          | Int64         |\n|
  float4        | Float         |\n| float8        | Double        |\n| numeric       |
  Scientific    |\n| uuid          | UUID          |\n| char          | Char          |\n|
  text          | Text          |\n| date          | Day           |\n| bytea         |
  ByteString    |\n| bool          | Bool          |\n| int4[]        | Vector Int32
  \ |\n| float4[]      | Vector Float  |\n| money         | Fixed E3      |\n| null
  a        | Maybe a       |\n\nIf the result set type is given as ``Maybe a`` then
  any missing value are\nmanifest as ``Nothing``  values. And all concrete values
  are ``Just``.\nEffectively makes errors from null values used in unchecked logic\nunrepresentable
  as any function which consumes a potentially nullable field is\nforced by the type
  system to handle both cases.\n\n**Streaming**\n\n```haskell\nstream :: (FromRow
  r, ToSQL a, MonadBaseControl IO m, MonadIO m) =>\n     PQ.Connection       -- ^
  Connection\n  -> Query               -- ^ Query\n  -> a                   -- ^ Query
  arguments\n  -> Int                 -- ^ Batch size\n  -> C.Source m [r]      --
  ^ Source conduit\n```\n\nParallel streams can be composed together Software Transactional
  Memory (STM)\nthreads to synchronize the polling.\n\n```haskell\nimport Database.PostgreSQL.Stream.Parallel\n\nparallelStream
  ::\n  PQ.Connection\n  -> (PQ.Connection -> Source (ResourceT IO) a)  -- Source\n
  \ -> Sink a (ResourceT IO) ()                    -- Sink\n  -> IO ()\n```\n\nDevelopment\n-----------\n\n```bash\n$
  cabal sandbox init\n$ cabal install --only-dependencies\n$ cabal build\n```\n\nTo
  attach to the Elsen compute engine:\n\n```bash\n$ cabal sandbox add-source path_to_tree\n```\n\nDocumentation\n--------------\n\n```bash\n$
  cabal haddock\n```\n\nLegal\n-----\n\nCopyright (c) 2015 Elsen Inc. All rights reserved.\n"
license-name: BSD-3-Clause
