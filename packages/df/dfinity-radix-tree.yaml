homepage: https://github.com/dfinity-lab/hs-radix-tree
changelog-type: markdown
hash: a2425d8d9bc7219d605c15eb4d34a798c6f56540f7fe3eb3b1786863e3d73ad7
test-bench-deps: {}
maintainer: DFINITY USA Research <team@dfinity.org>
synopsis: A generic data integrity layer.
changelog: ! "0.1.0 Enzo Haussecker <enzo@dfinity.org> Tue Jul 03 2018\n\n * Abstract
  database to type class\n * Implement radix tree construction via conduit\n * Clean-up
  documentation\n"
basic-deps:
  BoundedChan: -any
  serialise: -any
  lens-simple: -any
  bytestring: -any
  base: ! '>=4.10 && <5'
  data-default-class: -any
  unordered-containers: -any
  text: -any
  conduit: -any
  semigroups: -any
  dfinity-radix-tree: -any
  leveldb-haskell: -any
  containers: -any
  cryptohash-sha256: -any
  ghc-prim: -any
  lrucaching: -any
  cmdargs: -any
  base16-bytestring: -any
  deepseq: -any
  bloomfilter: -any
  resourcet: -any
  aeson: -any
all-versions:
- '0.0.0'
- '0.1.0'
author: Enzo Haussecker <enzo@dfinity.org>
latest: '0.1.0'
description-type: markdown
description: ! "# dfinity-radix-tree: A generic data integrity layer.\n[![Build Status](https://travis-ci.org/dfinity-lab/hs-radix-tree.svg?branch=master)](https://travis-ci.org/dfinity-lab/hs-radix-tree)\n[![Hackage](https://img.shields.io/hackage/v/dfinity-radix-tree.svg)](https://hackage.haskell.org/package/dfinity-radix-tree)\n[![Dependencies](https://img.shields.io/hackage-deps/v/dfinity-radix-tree.svg)](http://packdeps.haskellers.com/feed?needle=dfinity-radix-tree)\n[![License:
  GPLv3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n##
  Overview\nThis library allows you to construct a [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree)
  on top of any underlying key–value database. It works by organizing your key–value
  pairs into a binary radix tree, which is well suited for storing large dictionaries
  of fairly random keys, and is optimized for storing keys of the same length.\n\n##
  Usage\nDefine your database as an instance of the `RadixDatabase` type class. An
  instance for [LevelDB](http://hackage.haskell.org/package/leveldb-haskell) is already
  provided.\n```haskell\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses
  #-}\n\nimport Control.Monad.Trans.Resource\nimport Database.LevelDB\nimport Network.DFINITY.RadixTree\n\ninstance
  MonadResource m => RadixDatabase (FilePath, Options) m DB where\n   create = uncurry
  open\n   load database = get database defaultReadOptions\n   store database = put
  database defaultWriteOptions\n```\nCreate a `RadixTree` that is parameterized by
  your database. If you want to make things more explicit, then define some simple
  type aliases and wrapper functions.\n```haskell\nimport Control.Monad.Trans.Resource\nimport
  Data.ByteString\nimport Database.LevelDB\nimport Network.DFINITY.RadixTree\n\ntype
  MerkleTree = RadixTree DB\ntype MerkleRoot = RadixRoot\n\ncreateMerkleTree\n   ::
  MonadResource m\n   => FilePath -- Database.\n   -> Maybe MerkleRoot -- State root.\n
  \  -> m MerkleTree\ncreateMerkleTree path root =\n   createRadixTree bloomSize cacheSize
  root (path, options)\n   where\n   bloomSize = 262144\n   cacheSize = 2048\n   options
  = defaultOptions {createIfMissing = True}\n\ninsertMerkleTree\n   :: MonadResource
  m\n   => ByteString -- Key.\n   -> ByteString -- Value.\n   -> MerkleTree -- Tree.\n
  \  -> m MerkleTree\ninsertMerkleTree = insertRadixTree\n\ndeleteMerkleTree\n   ::
  MonadResource m\n   => ByteString -- Key.\n   -> MerkleTree -- Tree.\n   -> m MerkleTree\ndeleteMerkleTree
  = deleteRadixTree\n\nmerkleizeMerkleTree\n   :: MonadResource m\n   => MerkleTree
  -- Tree.\n   -> m (MerkleRoot, MerkleTree)\nmerkleizeMerkleTree = merkleizeRadixTree\n\nlookupMerkleTree\n
  \  :: MonadResource m\n   => ByteString -- Key.\n   -> MerkleTree -- Tree.\n   ->
  m (Maybe (ByteString, MerkleTree))\nlookupMerkleTree = lookupMerkleizedRadixTree\n```\nUsing
  the API above, we can perform operations on the tree as a proxy for the database
  and see that its contents is uniquely defined by its `MerkleRoot`.\n\n## Contribute\n\nFeel
  free to join in. All are welcome. Open an [issue](https://github.com/dfinity-lab/hs-radix-tree/issues)!\n\n##
  License\n\nGPLv3\n"
license-name: GPL-3
