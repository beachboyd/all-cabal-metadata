homepage: https://github.com/dfinity-lab/hs-radix-tree
changelog-type: markdown
hash: 66908b8d4d26b0242df56fe3a173a36a4612137f01edf88ea346c7774ab056e7
test-bench-deps: {}
maintainer: DFINITY USA Research <team@dfinity.org>
synopsis: A generic data integrity layer.
changelog: ! "0.3.0 Enzo Haussecker <enzo@dfinity.org> Thu Aug 02 2018\n\n * Add thread
  safety to parallel download combinators\n * Separate impure code from base module\n
  * Remove deprecated functions\n\n0.2.1 Enzo Haussecker <enzo@dfinity.org> Wed Jul
  25 2018\n\n * Fix bug related to temporary reference creation\n\n0.2.0 Enzo Haussecker
  <enzo@dfinity.org> Sat Jul 21 2018\n\n * Remove config parameter from type class\n\n0.1.1
  Enzo Haussecker <enzo@dfinity.org> Thu Jul 12 2018\n\n * Create aliases for verbose
  functions\n * Add useful functions for debugging\n * Clean-up documentation\n\n0.1.0
  Enzo Haussecker <enzo@dfinity.org> Tue Jul 03 2018\n\n * Abstract database to type
  class\n * Implement radix tree construction via conduit\n * Clean-up documentationtemporary
  references\n"
basic-deps:
  BoundedChan: -any
  serialise: -any
  lens-simple: -any
  bytestring: -any
  base: ! '>=4.10 && <5'
  data-default-class: -any
  unordered-containers: -any
  text: -any
  conduit: -any
  semigroups: -any
  dfinity-radix-tree: -any
  leveldb-haskell: -any
  containers: -any
  concurrent-extra: -any
  cryptohash-sha256: -any
  ghc-prim: -any
  lrucaching: -any
  mtl: -any
  cmdargs: -any
  base16-bytestring: -any
  deepseq: -any
  bloomfilter: -any
  resourcet: -any
  aeson: -any
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.3.0'
author: Enzo Haussecker <enzo@dfinity.org>
latest: '0.3.0'
description-type: markdown
description: ! "# dfinity-radix-tree: A generic data integrity layer.\n[![Build Status](https://travis-ci.org/dfinity-lab/hs-radix-tree.svg?branch=master)](https://travis-ci.org/dfinity-lab/hs-radix-tree)\n[![Hackage](https://img.shields.io/hackage/v/dfinity-radix-tree.svg)](https://hackage.haskell.org/package/dfinity-radix-tree)\n[![Dependencies](https://img.shields.io/hackage-deps/v/dfinity-radix-tree.svg)](http://packdeps.haskellers.com/feed?needle=dfinity-radix-tree)\n[![License:
  GPLv3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n##
  Overview\nThis library allows you to construct a [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree)
  on top of any underlying key–value database. It works by organizing your key–value
  pairs into a binary [radix tree](https://en.wikipedia.org/wiki/Radix_tree), which
  is well suited for storing large dictionaries of fairly random keys, and is optimized
  for storing keys of the same length.\n\n## Usage\nDefine your database as an instance
  of the [`RadixDatabase`](https://hackage.haskell.org/package/dfinity-radix-tree/docs/Network-DFINITY-RadixTree.html#t:RadixDatabase)
  type class. An instance for [LevelDB](http://hackage.haskell.org/package/leveldb-haskell)
  is already provided.\n```haskell\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE
  MultiParamTypeClasses #-}\n\nimport Control.Monad.Trans.Resource (MonadResource)\nimport
  Database.LevelDB (DB, defaultReadOptions, defaultWriteOptions, get, put)\n\nimport
  Network.DFINITY.RadixTree\n\ninstance MonadResource m => RadixDatabase m DB where\n
  \  load database = get database defaultReadOptions\n   store database = put database
  defaultWriteOptions\n```\nCreate a [`RadixTree`](https://hackage.haskell.org/package/dfinity-radix-tree/docs/Network-DFINITY-RadixTree.html#t:RadixTree)
  that is parameterized by your database. If you want to make things more explicit,
  then you can define a simple type alias and wrapper function.\n```haskell\nimport
  Control.Monad.Trans.Resource (MonadResource)\nimport Database.LevelDB (DB, Options(..),
  defaultOptions, open)\n\nimport Network.DFINITY.RadixTree\n\ntype RadixTree' = RadixTree
  DB\n\ncreateRadixTree'\n   :: MonadResource m\n   => FilePath -- Database.\n   ->
  Maybe RadixRoot -- State root.\n   -> m RadixTree'\ncreateRadixTree' file root =
  do\n   handle <- open file options\n   createRadixTree bloomSize cacheSize root
  handle\n   where\n   bloomSize = 262144\n   cacheSize = 2048\n   options   = defaultOptions
  {createIfMissing = True}\n```\nUsing the definitions above, you can create a radix
  tree, perform some basic operations on it, and see that its contents is uniquely
  defined by its [`RadixRoot`](https://hackage.haskell.org/package/dfinity-radix-tree/docs/Network-DFINITY-RadixTree.html#t:RadixRoot).\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Control.Monad.IO.Class (liftIO)\nimport
  Control.Monad.Trans.Resource (runResourceT)\nimport Data.ByteString.Base16 (encode)\nimport
  Data.ByteString.Char8 (unpack)\nimport Data.ByteString.Short (fromShort)\n\nimport
  Network.DFINITY.RadixTree\n\nmain :: IO ()\nmain = runResourceT $ do\n   tree  <-
  createRadixTree' \"/path/to/database\" Nothing\n   tree' <- insertRadixTree \"Hello\"
  \"World\" tree\n   root  <- fst <$> merkleizeRadixTree tree'\n   liftIO $ putStrLn
  $ \"State Root: 0x\" ++ pretty root\n   where pretty = unpack . encode . fromShort\n```\nRunning
  the program above should produce the following result.\n```\nState Root: 0x621f6e4c28b18e58d374c9236daa1a0ccba16550\n```\n\n##
  Contribute\n\nFeel free to join in. All are welcome. Open an [issue](https://github.com/dfinity-lab/hs-radix-tree/issues)!\n\n##
  License\n\nGPLv3\n"
license-name: GPL-3
