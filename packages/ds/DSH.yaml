homepage: ''
changelog-type: ''
hash: 637979b9a2301fde379939c8cbfb8c43539d2641e98703b26d6970ee83878944
test-bench-deps: {}
maintainer: alex@etc-network.de
synopsis: Database Supported Haskell
changelog: ''
basic-deps:
  test-framework-hunit: ! '>=0.3'
  either: ! '>=4.0'
  bytestring: ! '>=0.10'
  ansi-wl-pprint: ! '>=0.6.7.2'
  test-framework: ! '>=0.8'
  base: ! '>=4.8 && <5'
  time: ! '>=1.4'
  unordered-containers: ! '>=0.2'
  text: ! '>=1.2'
  test-framework-quickcheck2: ! '>=0.3'
  process: ! '>=1.2'
  dlist: ! '>=0.7'
  semigroups: ! '>=0.16'
  HUnit: ! '>=1.2'
  kure: ! '>=2.16'
  containers: ! '>=0.5'
  mtl: ! '>=2.1'
  hashable: ! '>=1.2'
  random: ! '>=1.1'
  Decimal: ! '>=0.4'
  QuickCheck: ! '>=2.7'
  aeson: ! '>=0.8'
  template-haskell: ! '>=2.9'
  algebra-dag: ! '>=0.1.1'
  vector: ! '>=0.10'
all-versions:
- '0.4'
- 0.4.0.1
- 0.4.1
- 0.4.2
- 0.4.2.1
- 0.4.3
- '0.5'
- 0.5.3
- 0.5.5
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.6
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.8.1
- 0.7.8.2
- 0.8.0.1
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
- 0.8.2.2
- 0.8.2.3
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.12.0.0
- 0.12.0.1
author: Alexander Ulrich, George Giorgidze, Jeroen Weijers, Nils Schweinsberg
latest: 0.12.0.1
description-type: markdown
description: ! "# Database-Supported Haskell (DSH)\n\nThis is a Haskell library for
  database-supported program\nexecution. Using DSH, a relational database management
  system (RDBMS)\ncan be used as a coprocessor for the Haskell programming language,\nespecially
  for those program fragments that carry out data-intensive\nand data-parallel computations.\n\nDatabase
  executable program fragments can be written using the monad\ncomprehension notation
  [2] and list processing combinators from the\nHaskell list prelude. Note that rather
  than embedding a relational\nlanguage into Haskell, we turn idiomatic Haskell programs
  into SQL\nqueries.\n\nDSH faithfully represents list order and nesting, and compiles
  the\nlist processing combinators into relational queries. The\nimplementation avoids
  unnecessary data transfer and context switching\nbetween the database coprocessor
  and the Haskell runtime by ensuring\nthat the number of generated relational queries
  is only determined by\nthe program fragment's type and not by the database size.\n\nDSH
  can be used to allow existing Haskell programs to operate on large\nscale data (e.g.,
  larger than the available heap) or query existing\ndatabase resident data with Haskell.\n\nNote
  that this package is flagged experimental and therefore is not\nsuited for production
  use (we mean it!). This is a proof of concept\nimplementation only. To learn more
  about DSH, our paper \"The Flatter,\nthe Better â€” Query Compilation Based on the
  Flattening\nTransformation.\" [1] is a recommended reading. The package includes
  a\ncouple of examples that demonstrate how to use DSH.\n\nThe current release does
  not rely anymore on the loop-lifting\ncompilation technique and the Pathfinder optimizer.
  Instead, it brings\na completely rewritten query compiler based on Guy Blelloch's\nflattening
  transformation. This approach leads to a more robust\ncompilation and produces more
  efficient query code.\n\nTo generate actual code for a relational backend, an additional\nbackend
  package needs to be installed. Currently, the package\n`dsh-sql` on Hackage provides
  SQL code generation for PostgreSQL.\n\n\n1. [Ulrich, Grust. The Flatter, the Better
  - Query Compilation Based on the Flattening Transformation. Proc. SIGMOD 2015](http://db.inf.uni-tuebingen.de/publications/TheFlatter-theBetter-QueryCompilationBasedontheFlatteningTransformation.html).\n2.
  [Grust et al. Bringing Back Monad Comprehensions. Haskell Symposium 2011](http://db.inf.uni-tuebingen.de/staticfiles/publications/haskell2011.pdf).\n\n#
  Release Notes\n\n* This is an experimental proof-of-concept implementation that
  most\n  likely contains bugs. You have been warned. We are happy to receive\n  bug
  reports.\n* For documentation, have a look at the examples included in directory\n
  \ 'examples' in the source distribution.\n* DSH works with a HDBC PostgreSQL connection.
  Other databases (*e.g.*\n  MySQL, Sqlite) are unlikely to work.\n* Support for general
  algebraic data types is currently broken. Flat\n  record types do work.\n* Comprehension
  syntax for DSH queries is currently implemented using\n  monad comprehensions and
  the `RebindableSyntax` extension. This\n  means that any module that contains DSH
  queries and makes use of\n  comprehension syntax has to enable the extension. Additionally,\n
  \ `do`-notation and comprehensions over other monads (*e.g.* lists)\n  can not be
  used in such a module. This limitation is an\n  implementation artifact that we
  hope to get rid of soon.\n"
license-name: BSD-3-Clause
