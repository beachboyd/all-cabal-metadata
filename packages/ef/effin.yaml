homepage: https://github.com/YellPika/effin
changelog-type: ''
hash: 3e3a81634250b86aa3fa202656ccd2b147a6e50b3b36f9b85954975a5af28f2c
test-bench-deps: {}
maintainer: yellpika@gmail.com
synopsis: A Typeable-free implementation of extensible effects
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.11'
  mtl: ! '>=2.1 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
author: Anthony Vandikas
latest: 0.3.0.3
description-type: haddock
description: ! 'This package implements extensible effects, an alternative to monad

  transformers. The original paper can be found at

  <http://okmij.org/ftp/Haskell/extensible/exteff.pdf>. The main differences

  between this library and the one described in the paper are that this library

  does not use the Typeable type class, does not require that effects implement

  the Functor type class, and has a simpler API for handling

  effects.


  For example, the following code implements a handler for exceptions:


  > newtype Exception e = Throw e

  >

  > runException :: Effect (Exception e :+ es) a -> Effect es (Either e a)

  > runException = eliminate

  >     (\x -> return (Right x))

  >     (\(Throw e) k -> return (Left e))


  Compare this to the corresponding code in extensible-effects

  (<http://hackage.haskell.org/package/extensible-effects>):


  > runExc :: Typeable e => Eff (Exc e :> r) a -> Eff r (Either e a)

  > runExc = loop . admin

  >   where

  >     loop (Val x) = return (Right x)

  >     loop (E u)   = handleRelay u loop (\(Exc e) -> return (Left e))


  In particular, effect implementors are not required to do any recursion,

  thereby making effect handlers more composeable.'
license-name: BSD-3-Clause
