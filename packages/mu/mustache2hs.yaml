homepage: http://github.com/singpolyma/mustache2hs
changelog-type: ''
hash: 58d37e7bc5cfadf0b4d82cae1fb15f66f3fc40b1a06d9c806b1096a867c24fb9
test-bench-deps: {}
maintainer: Stephen Paul Weber <singpolyma@singpolyma.net>
synopsis: Utility to generate Haskell code from Mustache templates
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.2.0.0 && <5.0.0.0'
  text: -any
  filepath: -any
  parsec: ! '>=3.1.2'
  blaze-builder: ! '>=0.2.0.0'
  utf8-string: -any
  transformers: -any
  haskell-src: -any
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.1.1
- 0.2.2
- '0.3'
author: Stephen Paul Weber <singpolyma@singpolyma.net>
latest: '0.3'
description-type: text
description: ! 'This utility takes in Haskell records (single data constructor only)

  and a list of mustache template and record name pairs, and generates

  Haskell code for functions that take an escape function and one of

  the records, and returns a ''Data.Text.Lazy.Builder.Builder''.


  This allows most records to be used as context for rendering a

  template, and gives GHC the ability to typecheck the template''s use of

  record fields at compile time.  It also means your application does

  not need to be reading template files off disk in production.


  Usage example:


  > mustache2hs -m Records.hs main.mustache SomeRec sub.mustache OtherRec


  A full example is in the git repository.

'
license-name: LicenseRef-OtherLicense
