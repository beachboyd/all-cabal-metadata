homepage: https://github.com/lspitzner/multistate
changelog-type: markdown
hash: 496ac087a0df3984045d7460b981d5e868a49e160b60a6555f6799e81e58542d
test-bench-deps:
  base: <999
  hspec: ! '>=2 && <2.6'
  multistate: -any
  transformers: <0.6
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: ! 'like mtl''s ReaderT / WriterT / StateT, but more than one

  contained value/type.'
changelog: ! "# Changelog for [`multistate` package](https://hackage.haskell.org/package/multistate)\n\n##
  0.8.0.1 *October 2018*\n\n  * Adapt for ghc-8.6 (really, this time)\n  * Make package
  -Wcompat-ible\n\n## 0.8.0.0 *April 2018*\n\n  * Adapt for ghc-8.4\n  * Drop support
  for ghc<8.0\n  * Add class `MonadMultiGet` that roughly translates to \"any read
  access\"\n    (instances for Reader and State)\n  * Add data-type `MultiGST` that
  has a single taggified HList instead of the\n    three r, w, s lists with `MultiRWS`\n\n##
  0.7.1.2 *August 2017*\n\n  * Adapt for ghc-8.2\n  \n  * Minor strictness fix for
  MultiRWS\n\n## 0.7.1.1 *May 2016*\n\n  * Adapt for ghc-8\n\n## 0.7.1.0 *March 2016*\n\n
  \ * Add new method `withoutMultiFoo`, inverse of `withMultiFoo`\n\n## 0.7.0.0 *February
  2016*\n\n  * Add instances:\n\n    + MonadIO\n    + Alternative\n    + MonadPlus\n
  \   + MonadBase\n    + MonadTransControl\n    + MonadBaseControl\n\n## 0.6.2.0 *June
  2015*\n\n  * Add MonadFix instances\n\n## 0.6.1.0 *June 2015*\n\n  * Export classes
  from transformer modules\n\n## 0.6.0.0 *June 2015*\n\n  * Add `MultiRWST`\n\n  *
  Add inflate functions (e.g. `StateT _ -> MultiStateT _`)\n\n  * Improve lazyness\n\n
  \ * Move changelog from `README.md` to `changelog.md`\n\n## 0.5.0.0 *March 2015*\n
  \   \n  * Breaking changes (!):\n\n    Refactor some parts of the interface, see
  \"naming scheme\" in  the README;\n    The changes are:\n\n      | old | new |\n
  \     | --- | --- |\n      | `withMultiFoo` | `withMultiFooA` |\n      | `withMultiFoos`
  | `withMultiFoosA` |\n      | `mAskRaw` | `mGetRaw` |\n      | | `mPutRaw` |\n      |
  `evalMultiStateT` | `runMultiStateTNil` |\n      | `evalMultiStateTWithInitial`
  | `runMultiStateTA` |\n      | `evalMultiReaderT` | `runMultiReaderTNil` |\n      |
  `evalMultiReaderTWithInitial` | `runMultiReaderTA` |\n      | `execMultiWriterT`
  | `runMultiWriterTW` |\n\n  * Start using hspec; Add proper cabal test-suite.\n\n##
  0.4.0.0: *March 2015*\n\n  * Refactor from `Control.Monad.*` to `Control.Monad.Trans.*`\n\n
  \ * Put classes (`MonadMulti*`) into separate modules\n\n  * Add Strict and Lazy
  variants\n\n  * Deprecate previous modules\n\n## 0.3.0.0 *January 2015*\n\n  * Add
  `MultiWriter`\n\n  * Fixity for `(:+:)`\n\n  * support ghc-7.10\n\n## 0.2.0.0 *January
  2015*\n\n  * Start using DataKinds and TypeOperators to make the HList\n    representation
  more readable. The translation roughly is:\n\n    > ~~~~\n    > Null        -> '[]\n
  \   > Cons a Null -> '[a]\n    > Cons a b    -> a ': b\n    > TNull       -> HNil\n
  \   > TCons a b   -> a :+: b\n    > ~~~~\n\n  * Remove dependency on `tfp` package.\n\n##
  0.1.3.2 *September 2014*\n  \n  * Add example\n\n  * Clean up / Add dependencies\n\n
  \ * More documentation\n\n## 0.1.2 *September 2014*\n\n  * Expose `HList` module\n\n
  \ * Add haddocks\n\n## 0.1.1 *June 2014*\n\n  * First version published on hackage\n"
basic-deps:
  base: ! '>=4.9 && <4.13'
  monad-control: ! '>=1.0 && <1.1'
  tagged: ! '>=0.7 && <0.9'
  mtl: ! '>=2.1 && <2.3'
  transformers-base: <0.5
  transformers: ! '>=0.3 && <0.6'
all-versions:
- '0.1.1'
- '0.1.2'
- '0.1.3.1'
- '0.1.3.2'
- '0.2.0.0'
- '0.3.0.0'
- '0.6.0.0'
- '0.6.1.0'
- '0.6.2.0'
- '0.7.0.0'
- '0.7.1.1'
- '0.7.1.2'
- '0.8.0.0'
- '0.8.0.1'
author: Jan Bracker, Lennart Spitzner
latest: '0.8.0.1'
description-type: markdown
description: ! "# multistate\n\n[![Build Status](https://secure.travis-ci.org/lspitzner/multistate.svg)](http://travis-ci.org/lspitzner/multistate)\n[![Hackage](https://img.shields.io/hackage/v/multistate.svg)](https://hackage.haskell.org/package/multistate)\n\n##
  Introduction\n\nWhen using multiple Reader/Writer/State transformers in the same
  monad\nstack, it becomes necessary to lift the operations in order to affect a\nspecific
  transformer.\nUsing heterogeneous lists (and all kinds of GHC extensions magic),\nthis
  package provides transformers that remove that necessity:\nMultiReaderT/MultiWriterT/MultiStateT
  can contain a heterogeneous\nlist of values.\n\nThe type inferred for the getter/setter
  determines which value is\nread/written.\n\n## Example\n\n~~~~\nsimpleExample ::
  IO ()\nsimpleExample = runMultiStateTNil_       -- start with an empty state,\n
  \                                        --   i.e. :: MultiStateT '[] IO\n              $
  withMultiStateA 'H'      -- \"adding\" a char to the state\n              $ withMultiStateA
  \"ello, World!\" -- and a string\n              $ do                       -- so:\n
  \ -- the monad here is MultiStateT '[String, Char] IO\n  let combinedPrint = do
  \      -- no type signature necessary\n        c  <- mGet             -- type of
  mGet inferred to be m Char\n        cs <- mGet             --              inferred
  to be m String\n        lift $ putStrLn (c:cs)\n  combinedPrint\n  mSet 'J'                     --
  we modify the Char in the state.\n                               -- again, the type
  is inferred,\n                               -- without any manual lifting.\n  combinedPrint\n~~~~\n\nThe
  output is:\n\n~~~~\nHello, World!\nJello, World!\n~~~~\n\n( you can find both this
  and a more complex example\n  in an executable in the package. )\n\n## Error Messages\n\nIf
  you try to execute an action that requires a specific type in the state,\nbut the
  current state does not contain that type, the error message is\nsomething like\n\n~~~~\nNo
  instance for (Control.Monad.MultiState.ContainsType Foo '[]) x\n~~~~\n\nwhere `Foo`
  is the missing type.\n\n## Compatibility with Single-Valued Transformers\n\nIt is
  possible to run single-valued actions inside multi-valued\ntransformers using the
  `inflate` functions. A function transforming\na multi-valued transformer with exactly
  one element into a\nsingle-valued transformer would be trivial, but it is currently
  not provided.\n\n## Naming Scheme\n\n(Will refer to StateT in this paragraph, but
  equally valid for Reader/Writer)\nThe mtl monad transformers make use of primarily
  three methods to \"unwrap\"\na transformed value:\n`runStateT`, `evalStateT`, `execStateT`.
  These three all have a type\nmatching the pattern `s -> t m a -> m b`, they differ
  in what `b` is.\nWe will use a different naming scheme, for three reasons:\n\n1)
  \"run\", \"eval\" and \"exec\" are not in any way intuitive, and should be\n   suffixed
  in any case.\n\n2) For MultiStateT, it makes sense to transform an existing transformer,\n
  \  adding another state. The signature would be close to that of runStateT,\n   only
  without the unwrapping part, i.e. `s -> t m a -> t' m b`, where `s`\n   is the initial
  state, and `t` is `t'` with another state added.\n\n3) Sometimes you might want
  to add/run a single state, or a bunch of them.\n   For example, when running an
  arbitrary StateT, you would need to provide\n   a HList of initial states, and would
  receive a HList of final states.\n\nOur naming scheme will instead be:\n\n1) `runStateT.*`
  unwraps a StateT. A suffix controls\n   what exactly is returned by the function.
  There is a special version for\n   when the list of states is Nil, `runStateTNil`.\n\n2)
  `withStateT.*` adds one or more states to a subcomputation. A suffix\n   controls
  the exact return value.\n\n~~~~\n                 withStates\n            /-------------------------------------------------------\\\n
  \           |     withState                withState .. withState   v\nStateT '[s,
  ..] m --------> StateT '[..] m --------> .. --------> StateT '[] m\n            |
  \    <--------                                         |\n            |   (withoutState)
  \                                     |\n            |                                                       |\n
  \           |                                                       |\n            |
  \  runStateT                            runStateTNil   |\n            \\-------------------->
  m .. <---------------------------/\n~~~~\n\nSpecific functions are (constraints
  omitted):\n\n~~~~\nrunMultiStateT = runMultiStateTAS\nrunMultiStateTA  :: HList
  s -> MultiStateT s m a -> m a\nrunMultiStateTAS :: HList s -> MultiStateT s m a
  -> m (a, s)\nrunMultiStateTSA :: HList s -> MultiStateT s m a -> m (s, a)\nrunMultiStateTS
  \ :: HList s -> MultiStateT s m a -> m s\nrunMultiStateT_  :: HList s -> MultiStateT
  s m a -> m ()\n\nrunMultiStateTNil  :: MultiStateT '[] m a -> m a\nrunMultiStateTNil_
  :: MultiStateT '[] m a -> m ()\n\nwithMultiState = withMultiStateAS\nwithMultiStateA
  \ :: s -> MultiStateT (s ': ss) m a -> MultiStateT ss m a\nwithMultiStateAS :: s
  -> MultiStateT (s ': ss) m a -> MultiStateT ss m (a, s)\nwithMultiStateSA :: s ->
  MultiStateT (s ': ss) m a -> MultiStateT ss m (s, a)\nwithMultiStateS  :: s -> MultiStateT
  (s ': ss) m a -> MultiStateT ss m s\nwithMultiState_  :: s -> MultiStateT (s ':
  ss) m a -> MultiStateT ss m ()\n\nwithMultiStates = withMultiStatesAS\nwithMultiStatesAS
  :: HList s1 -> MultiStateT (Append s1 s2) m a -> MultiStateT s2 m (a, HList s1)\nwithMultiStatesSA
  :: HList s1 -> MultiStateT (Append s1 s2) m a -> MultiStateT s2 m (HList s1, a)\nwithMultiStatesA
  \ :: HList s1 -> MultiStateT (Append s1 s2) m a -> MultiStateT s2 m a\nwithMultiStatesS
  \ :: HList s1 -> MultiStateT (Append s1 s2) m a -> MultiStateT s2 m (HList s1)\nwithMultiStates_
  \ :: HList s1 -> MultiStateT (Append s1 s2) m a -> MultiStateT s2 m ()\n\nwithoutMultiState
  :: MultiStateT ss m a -> MultiStateT (s ': ss) m a\n~~~~\n\n## Known Deficits\n\nThis
  package currently lacks a complete set of \"lifting instances\", i.e.\ninstance
  definitions for classes such as mtl's MonadWriter \"over\" the newly\nintroduced
  monad transformers, as in\n\n~~~~\ninstance (MonadWriter w m) => MonadWriter w (MultiStateT
  c m) where ..\n~~~~\n\nThese \"lifting instances\" would be necessary\nto achieve
  full compatibility with existing transformers. Ping me if you\nfind anything specific
  missing.\n\n## Changelog\n\nSee changelog.md\n"
license-name: BSD3
