homepage: https://github.com/snoyberg/mono-traversable#readme
changelog-type: markdown
hash: aad13ec7e9686725fbbae6af1852055cc2d73f00109b5a313bb007ac74f5ecc2
test-bench-deps:
  base: ! '>=4.9 && <5'
  hspec: -any
  gauge: -any
  containers: -any
  mutable-containers: -any
  QuickCheck: -any
  primitive: -any
  vector: -any
maintainer: michael@fpcomplete.com
synopsis: Abstactions and concrete implementations of mutable containers
changelog: ! '## 0.3.4


  * Switch to gauge


  ## 0.3.3


  * Move into mono-traversable repo


  ## 0.3.2.1


  * Fix benchmark


  ## 0.3.2


  * Export IOPRef, IOSRef, IOBRef [#5](https://github.com/fpco/mutable-containers/pull/5)


  ## 0.3.1


  * Export IOURef [#4](https://github.com/fpco/mutable-containers/pull/4)


  ## 0.3.0


  * Rename `DList` to `DLList` to avoid conflict with difference lists


  ## 0.2.1.2


  * `Deque` optimizations by avoiding modulus operations completely.


  ## 0.2.1.1


  * Fix a bug in `Deque`''s new vector allocation/copy code.


  ## 0.2.1


  * Export `Prim`, `Unbox` and `Storable`

  * `SRef` uses `ForeignPtr` directly (slightly more efficient)


  ## 0.2.0


  * Restructure under the Data.Mutable module.


  ## 0.1.2.0


  * Added PRef


  ## 0.1.1.0


  * Added reference benchmark.

  * Added boxed deque and references.

'
basic-deps:
  base: ! '>=4.9 && <5'
  containers: -any
  ghc-prim: -any
  mono-traversable: -any
  primitive: ! '>=0.5.2.1'
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0
- 0.2.0.1
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.3
- 0.3.4
author: Michael Snoyman
latest: 0.3.4
description-type: markdown
description: ! "[![Coverage Status](https://img.shields.io/coveralls/fpco/mutable-containers.svg)](https://coveralls.io/r/fpco/mutable-containers)\n![Travis
  Build Status](https://travis-ci.org/fpco/mutable-containers.svg)\n\nOne of Haskell's
  strengths is immutable data structures. These structures make\nit easier to reason
  about code, simplify concurrency and parallelism, and in\nsome cases can improve
  performance by allowing sharing. However, there are still\nclasses of problems where
  mutable data structures can both be more convenient,\nand provide a performance
  boost. This library is meant to provide such\nstructures in a performant, well tested
  way. It also provides a simple\nabstraction over such data structures via typeclasses.\n\nBefore
  anything else, let me provide the caveats of this package:\n\n* Don't use this package
  unless you have a good reason to! Immutable data structures are a better approach
  most of the time!\n* This code is intentionally *not* multithread safe. If you need
  something like a concurrent queue, there are many options on Hackage, from `Chan`
  to `TChan`, to [chaselev-deque](http://hackage.haskell.org/package/chaselev-deque).\n\nWe'll
  first talk about the general approach to APIs in this package. Next,\nthere are
  two main sets of abstractions provided, which we'll cover in the\nfollowing two
  sections, along with their concrete implementations. Finally,\nwe'll cover benchmarks.\n\n##
  API structure\n\nThe API takes heavy advantage of the `PrimMonad` typeclass from
  the primitive\npackage. This allows our data structures to work in both `IO` and
  `ST` code.\nEach data structure has an associated type, `MCState`, which gives the\nprimitive
  state for that structure. For example, in the case of `IORef`, that\nstate is `RealWorld`,
  whereas for `STRef s`, it would be `s`. This associated\ntype is quite similar to
  the `PrimState` associated type from primitive, and in\nmany type signatures you'll
  see an equality constraint along the lines of:\n\n```haskell\nPrimState m ~ MCState
  c\n```\n\nFor those who are wondering, `MCState` stands for \"mutable container
  state.\"\n\nAll actions are part of a typeclass, which allows for generic access
  to\ndifferent types of structures quite easily. In addition, we provide type hint\nfunctions,
  such as `asIORef`, which can help specify types when using such\ngeneric functions.
  For example, a common idiom might be:\n\n```haskell\nioref <- fmap asIORef $ newRef
  someVal\n```\n\nWherever possible, we stick to well accepted naming and type signature\nstandards.
  For example, note how closely `modifyRef` and `modifyRef'` match\n`modifyIORef`
  and `modifyIORef'`.\n\n## Single cell references\n\nThe base package provides both
  `IORef` and `STRef` as boxed mutable references,\nfor storing a single value. The
  primitive package also provides `MutVar`, which\ngeneralizes over both of those
  and works for any `PrimMonad` instance. The\n`MutableRef` typeclass in this package
  abstracts over all three of those. It\nhas two associated types: `MCState` for the
  primitive state, and `RefElement`\nto specify what is contained by the reference.\n\nYou
  may be wondering: why not just take the reference as a type parameter? That\nwouldn't
  allow us to have monomorphic reference types, which may be useful\nunder some circumstances.
  This is a similar motivation to how the\n`mono-traversable` package works.\n\nIn
  addition to providing an abstraction over `IORef`, `STRef`, and `MutVar`,\nthis
  package provides four additional single-cell mutable references. `URef`,\n`SRef`,
  and `BRef` all contain a 1-length mutable vector under the surface,\nwhich is unboxed,
  storable, and boxed, respectively. The advantage of the first\ntwo over boxed standard
  boxed references is that it can avoid a significant\namount of allocation overhead.
  See [the relevant Stack Overflow\ndiscussion](http://stackoverflow.com/questions/27261813/why-is-my-little-stref-int-require-allocating-gigabytes)\nand
  the benchmarks below.\n\nWhile `BRef` doesn't give this same advantage (since the
  values are still\nboxed), it was trivial to include it along with the other two,
  and does\nactually demonstrate a performance advantage. Unlike `URef` and `SRef`,
  there\nis no restriction on the type of value it can store.\n\nThe final reference
  type is `PRef`. Unlike the other three mentioned, it\ndoesn't use vectors at all,
  but instead drops down directly to a mutable\nbytearray to store values. This means
  it has slightly less overhead (no need to\nstore the size of the vector), but also
  restricts the types of things that can\nbe stored (only instances of `Prim`).\n\nYou
  should benchmark your program to determine the most efficient reference\ntype, but
  generally speaking `PRef` will be most performant, followed by `URef`\nand `SRef`,
  and finally `BRef`.\n\n## Collections\n\nCollections allow you to push and pop values
  to the beginning and end of\nthemselves. Since different data structures allow different
  operations, each\noperation goes into its own typeclass, appropriately named `MutablePushFront`,\n`MutablePushBack`,
  `MutablePopFront`, and `MutablePopBack`. There is also a\nparent typeclass `MutableCollection`
  which provides:\n\n1. The `CollElement` associated type to indicate what kinds of
  values are in the collection.\n2. The `newColl` function to create a new, empty
  collection.\n\nThe `mono-traversable` package provides a typeclass `IsSequence`
  which\nabstracts over sequence-like things. In particular, it provides operations
  for\n`cons`, `snoc`, `uncons`, and `unsnoc`. Using this abstraction, we can provide\nan
  instance for all of the typeclasses listed above for any mutable reference\ncontaining
  an instance of `IsSequence`, e.g. `IORef [Int]` or `BRef s (Seq\nDouble)`.\n\nNote
  that the performance of some of these combinations is *terrible*. In\nparticular,
  `pushBack` or `popBack` on a list requires traversing the entire\nlist, and any
  push operations on a `Vector` requires copying the entire\ncontents of the vector.
  Caveat emptor! If you *must* use one of these\nstructures, it's highly recommended
  to use `Seq`, which gives the best overall\nperformance.\n\nHowever, in addition
  to these instances, this package also provides two\nadditional data structures:
  double-ended queues and doubly-linked lists. The\nformer is based around mutable
  vectors, and therefore as unboxed (`UDeque`),\nstorable (`SDeque`), and boxed (`BDeque`)
  variants. Doubly-linked lists have no\nsuch variety, and are simply `DLList`s.\n\nFor
  general purpose queue-like structures, `UDeque` or `SDeque` is likely to\ngive you
  best performance. As usual, benchmark your own program to be certain,\nand see the
  benchmark results below.\n\n## Benchmark results\n\nThe following benchmarks were
  performed on January 7, 2015, against version 0.2.0.\n\n### Ref benchmark\n\n```\nbenchmarking
  IORef\ntime                 4.322 μs   (4.322 μs .. 4.323 μs)\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\nmean                 4.322 μs   (4.322 μs .. 4.323
  μs)\nstd dev              1.401 ns   (1.114 ns .. 1.802 ns)\n\nbenchmarking STRef\ntime
  \                4.484 μs   (4.484 μs .. 4.485 μs)\n                     1.000 R²
  \  (1.000 R² .. 1.000 R²)\nmean                 4.484 μs   (4.484 μs .. 4.484 μs)\nstd
  dev              941.0 ps   (748.5 ps .. 1.164 ns)\n\nbenchmarking MutVar\ntime
  \                4.482 μs   (4.482 μs .. 4.483 μs)\n                     1.000 R²
  \  (1.000 R² .. 1.000 R²)\nmean                 4.482 μs   (4.482 μs .. 4.483 μs)\nstd
  dev              843.2 ps   (707.9 ps .. 1.003 ns)\n\nbenchmarking URef\ntime                 2.020
  μs   (2.019 μs .. 2.020 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 2.020 μs   (2.019 μs .. 2.020 μs)\nstd dev              955.2
  ps   (592.2 ps .. 1.421 ns)\n\nbenchmarking PRef\ntime                 2.015 μs
  \  (2.014 μs .. 2.015 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean
  \                2.014 μs   (2.014 μs .. 2.015 μs)\nstd dev              901.3 ps
  \  (562.8 ps .. 1.238 ns)\n\nbenchmarking SRef\ntime                 2.231 μs   (2.230
  μs .. 2.232 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 2.231
  μs   (2.230 μs .. 2.231 μs)\nstd dev              1.938 ns   (1.589 ns .. 2.395
  ns)\n\nbenchmarking BRef\ntime                 4.279 μs   (4.279 μs .. 4.279 μs)\n
  \                    1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 4.279
  μs   (4.279 μs .. 4.279 μs)\nstd dev              1.281 ns   (1.016 ns .. 1.653
  ns)\n```\n\n### Deque benchmark\n\n```\nbenchmarking IORef [Int]\ntime                 8.371
  ms   (8.362 ms .. 8.382 ms)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 8.386 ms   (8.378 ms .. 8.398 ms)\nstd dev              29.25
  μs   (20.73 μs .. 42.47 μs)\n\nbenchmarking IORef (Seq Int)\ntime                 142.9
  μs   (142.7 μs .. 143.1 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 142.7 μs   (142.6 μs .. 142.9 μs)\nstd dev              542.8
  ns   (426.5 ns .. 697.0 ns)\n\nbenchmarking UDeque\ntime                 107.5 μs
  \  (107.4 μs .. 107.6 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean
  \                107.5 μs   (107.4 μs .. 107.6 μs)\nstd dev              227.4 ns
  \  (171.8 ns .. 297.8 ns)\n\nbenchmarking SDeque\ntime                 97.82 μs
  \  (97.76 μs .. 97.89 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean
  \                97.82 μs   (97.78 μs .. 97.89 μs)\nstd dev              169.5 ns
  \  (110.6 ns .. 274.5 ns)\n\nbenchmarking BDeque\ntime                 113.5 μs
  \  (113.4 μs .. 113.6 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean
  \                113.6 μs   (113.5 μs .. 113.7 μs)\nstd dev              300.4 ns
  \  (221.8 ns .. 424.1 ns)\n\nbenchmarking DList\ntime                 156.5 μs   (156.3
  μs .. 156.6 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 156.4
  μs   (156.3 μs .. 156.6 μs)\nstd dev              389.5 ns   (318.3 ns .. 502.8
  ns)\n```\n\n## Test coverage\n\nAs of version 0.2.0, this package has 100% test
  coverage. If you look at the\nreport yourself, you'll see some uncovered code; it's
  just the automatically\nderived `Show` instance needed for QuickCheck inside the
  test suite itself.\n"
license-name: MIT
