homepage: https://github.com/massysett/multiarg
changelog-type: text
hash: 5afaa8d835b66b068a946a243b2aa7021636cfeb7befbab3d173e318add79c48
test-bench-deps:
  tasty-th: ! '>=0.1'
  base: ! '>=4.7.0.0 && <5'
  tasty-quickcheck: ! '>=0.8'
  tasty: ! '>=0.10'
  QuickCheck: ! '>=2.7'
maintainer: omari@smileystation.com
synopsis: Command lines for options that take multiple arguments
changelog: ! "Release 0.30.0.4\n\n* Version bump for QuickCheck\n\nRelease 0.30.0.0\n\n*
  Completely changed the API.  This version is much better tested than\n  previous
  versions.  Instead of using parser combinators as a model,\n  this version is built
  on a Mealy finite state machine.\n\n* The tests are particularly exhaustive; there
  is a module that\n  produces all possible command-line words that can parse to a\n
  \ particular option (for instance, the user might enter \"-a -b foo\" or\n  \"-abfoo\"
  if -b is an option that takes a single option argument.)\n  Different combinations
  are tested randomly.\n\nRelease 0.28.0.0\n\n* Renamed everything from System.Console.MultiArg
  to Multiarg\n  (shorter; note also case change from MultiArg to Multiarg)\n\n* Removed
  existentials from Multiarg.CommandLine\n\nRelease 0.24.0.4, February 24, 2014\n\n*
  Changed lower bound on base down to 4.5.0.0\n\nRelease 0.24.0.2, February 18, 2014\nChanges
  since release 0.24.0.0:\n\n* Removed upper bounds from build dependencies, and changed
  the\n  lower bounds.\n\nRelease 0.24.0.0, September 12, 2013\nChanges since release
  0.20.0.0:\n\n* Remove OneArgE, TwoArgE, etc. from Combinator module.  These data\n
  \ constructors were renamed OneArg, TwoArg, etc.  Having both OneArg\n  and OneArgE
  was redundant.\n\n* Improved error messages when the user enters an unrecognized
  option.\n  Previously unrecognized options were passed through to client code\n
  \ as a positional argument; now they will be recognized as bad\n  options.\n\nRelease
  0.20.0.0, August 30, 2013\nChanges since release 0.18.0.0:\n\n* Remove explicit-exception;
  use Either instead.\n\nRelease 0.18.0.0, August 14, 2013\nChanges since release
  0.16.0.0:\n\n* Rename SimpleParser module to CommandLine\n\n* Made a number of changes
  to CommandLine to reorganize the data types\n  and functions responsible for parsing
  simple and multi-mode command\n  lines\n\n* Remove GetArgs, as this was for an old
  library bug which has been\n  fixed for some time now\n\nRelease 0.16.0.0, May 21,
  2013\nChanges since release 0.14.0.0:\n\n* Rename OptArgError to InputError\n\n*
  Change functions in SimpleParser to allow for positional arguments\n  that might
  fail to be parsed\n\nRelease 0.14.0.0, April 8, 2013\nChanges since release 0.12.0.2:\n\n*
  Change long options to remove restrictions on what characters can\n  make up a long
  option name. Now the only restriction is that long\n  options cannot be zero length
  and they may not contain an equal\n  sign.\n\nRelease 0.12.0.2, March 31, 2013\nChanges
  since release 0.12.0.0:\n\n* Reorder NEWS so recent versions are on top\n\n* Fix
  bug in Prim.stopper that prevented most stoppers from being\n  recognized\n\nRelease
  0.12.0.0, March 27, 2013\nChanges since release 0.10.0.0:\n\n* Added value constructors
  to the Combinator module to allow for\n  easier parsing of option arguments that
  can fail to parse\n\n* Added automatic \"Enter -h for help\" to simpleWithHelp and\n
  \ modesWithHelp functions in SimpleParser\n\nRelease 0.10.0.0, March 7, 2013\nChanges
  since release 0.8.0.0:\n\n* Added the simpleWithHelp and modesWithHelp pre-built
  parsers to\n  the SimpleParser module\n\n* Added the mHelp field to the Mode record
  to allow for the\n  modesWithHelp pre-built parser\n\n* Changed the modes function
  in the SimpleParser module. The new\n  function has a simpler type. It will however
  break old code.\n\nRelease 0.8.0.0, January 8, 2013\nChanges since release 0.6.0.0:\n\n*
  Added a multi-mode parser to SimpleParser\n\n* All modules (except SampleParser)
  are now re-exported from\n  System.Console.MultiArg. Therefore one import will bring
  in all of\n  MultiArg. However, this introduced a naming conflict, because\n  SimpleParser
  and Prim both had functions named \"parse\". Therefore I\n  renamed SimpleParser.parse
  to \"simple\".\n\n* Removed the <??> combinator from Prim and replaced it with\n
  \ <?>. Removed <?> from Combinator. The new <?> behaves as one would\n  expect from
  Parsec.\n\n* Simplified errors. There is now just one type of error message, and\n
  \ that is a string. Reversed error messages when Prim.parse returns\n  (this way
  they are in the order the user would expect.)\n\n* Client code written for 0.6.0.0
  will probably break with this\n  release, mostly because of changes to the export
  lists.  Combinator\n  no longer re-exports from other modules, because now the expectation\n
  \ is that if you want to import everything you just import\n  System.Console.MultiArg.
  So fixing that is just a matter of changing\n  imports in client code. Other breakage
  will be limited to error\n  handling code.\n\nRelease 0.6.0.0, September 28, 2012\nChanges
  since release 0.4.0.0:\n\n* Add Functor instances for OptSpec, ArgSpec\n\n* Add
  ThreeArg and ChoiceArg ArgSpecs\n\nRelease 0.4.0.0, June 30, 2012\nChanges since
  release 0.2.0.0:\n\n* Code written for version 0.2.* will not work at all with this\n
  \ version.\n\n* Removed dependency on text library. multiarg now only deals with\n
  \ plain Strings. The memory usage concerns that originally led me to\n  use Texts
  were unfounded.\n\n* Dramatically simplified code for primitive parsers. No more
  custom\n  error types, monad transformers, or user states. This sort of\n  functionality
  is easily implemented in the parsers that you can\n  build; baking it into the primitive
  parsers makes things needlessly\n  complicated.\n\n* Reworked included combinators
  in Combinator module.\n\nRelease 0.2.0.0, April 2, 2012\nChanges since release 0.1.0.0:\n\n*
  Henceforth all public releases will have only even numbers in their\n  release numbers
  (e.g. 0.2.0.0, 0.2.0.2, etc.) If a release has any\n  odd numbers in its version,
  it is a development release.\n\n* QuickCheck tests are removed. Eventually I will
  reimplement these in\n  a separate library package.\n\n* Added Feed function to
  System.Console.MultiArg.Prim; this allows you\n  to carry out stateful parses without
  using a user state. Sometimes\n  this aids in composability--for instance, I use
  it when combining\n  parsers from different parts of the same program.\n"
basic-deps:
  base: ! '>=4.7.0.0 && <5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.4.0.0
- 0.6.0.0
- 0.8.0.0
- 0.10.0.0
- 0.12.0.0
- 0.12.0.2
- 0.14.0.0
- 0.16.0.0
- 0.18.0.0
- 0.20.0.0
- 0.22.0.0
- 0.24.0.0
- 0.24.0.2
- 0.24.0.4
- 0.26.0.0
- 0.28.0.0
- 0.30.0.0
- 0.30.0.2
- 0.30.0.4
- 0.30.0.6
- 0.30.0.8
- 0.30.0.10
author: Omari Norman
latest: 0.30.0.10
description-type: markdown
description: ! '# Multiarg


  This is multiarg, a library of combinators to parse command lines.


  For "released" code see Hackage:


  http://hackage.haskell.org/package/multiarg


  multiarg is on Github:


  http://www.github.com/massysett/multiarg


  ## Building


  If you obtained this code through Hackage, just build it using the

  ordinary Cabal command:


  cabal install


  If you obtain this code on Github, you will first need to generate the

  Cabal file and generate the tests.  This will require that you install

  two libraries:


  cabal install cartel quickpull


  Then run this script to generate the Cabal file and the tests:


  sh generate


  ## Versioning


  multiarg releases are numbered in accordance with the Haskell

  Package Versioning Policy.


  Currently the multiarg library depends only on the "base" package, so

  multiarg should have wide compatibility with different compilers and

  sets of libraries.  The tests have some additional dependencies.


  ## Build history


  If you''re having trouble building multiarg, try looking at the

  travis-ci build history at:


  https://travis-ci.org/massysett/multiarg


  It shows successful builds and the versions of any package

  dependencies that were installed when that build succeeded, so it

  might help you diagnose any dependency issues.


  [![Build Status](https://travis-ci.org/massysett/multiarg.svg?branch=master)](https://travis-ci.org/massysett/multiarg)


  ## Similar libraries


  Of course there are many command-line parsing modules and libraries

  out there; here are some comparisons.


  [optparse-applicative](https://hackage.haskell.org/package/optparse-applicative):

  very featureful with a well thought-out interface.  Builds help for

  you.  I often use this if it meets my needs.  From what I can tell,

  though, it strips out information about the relative ordering of the

  words from the command line; for instance, if the user typed "hello

  --opt1 --opt2", you cannot tell whether she entered "--opt1" before

  she entered "--opt2".  Also, from what I can tell it cannot easily

  parse options that take more than one argument.


  [GetOpt](https://hackage.haskell.org/package/base-4.7.0.2/docs/System-Console-GetOpt.html):

  comes with the base libraries, so you don''t have to install anything

  extra, which gives it a huge advantage.  Keeps information about the

  relative ordering of the words from the command line.  Cannot easily

  parse options that take more than one argument.


  [cmdargs](https://hackage.haskell.org/package/cmdargs): after multiple

  passes through the Haddocks I could never make any sense of this

  library at all, which must be a reflection of my level of Haskell

  ignorance.


  More comparisons are at the [Haskell

  Wiki](https://www.haskell.org/haskellwiki/Command_line_option_parsers).

'
license-name: BSD-3-Clause
