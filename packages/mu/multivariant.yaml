homepage: https://bitbucket.org/gltronred/multivariant#readme
changelog-type: ''
hash: 03195e210762b6f0f7e1209777d691ab55ed4d187b86985681e7b1a37ebe26fd
test-bench-deps:
  semigroupoids: ==5.1.*
  free: ! '>=4.12.4 && <4.13'
  MonadRandom: ! '>=0.4.2.3 && <0.5'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2.1 && <1.3'
  invertible: ! '>=0.1.2 && <0.2'
  multivariant: ! '>=0.1.0.1 && <0.2'
  HUnit: ! '>=1.3.1.2 && <1.4'
  containers: ! '>=0.5.7.1 && <0.6'
  tasty-quickcheck: ! '>=0.8.4 && <0.9'
  tasty-hunit: ! '>=0.9.2 && <0.10'
  transformers: ! '>=0.5.2.0 && <0.6'
  tasty: ! '>=0.11.0.4 && <0.12'
  QuickCheck: ! '>=2.8.2 && <2.9'
  profunctors: ==5.2.*
maintainer: gltronred@gmail.com
synopsis: Multivariant assignments generation language
changelog: ''
basic-deps:
  semigroupoids: ==5.1.*
  free: ! '>=4.12.4 && <4.13'
  MonadRandom: ! '>=0.4.2.3 && <0.5'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2.1 && <1.3'
  invertible: ! '>=0.1.2 && <0.2'
  multivariant: ! '>=0.1.0.1 && <0.2'
  HUnit: ! '>=1.3.1.2 && <1.4'
  containers: ! '>=0.5.7.1 && <0.6'
  tasty-quickcheck: ! '>=0.8.4 && <0.9'
  tasty-hunit: ! '>=0.9.2 && <0.10'
  transformers: ! '>=0.5.2.0 && <0.6'
  tasty: ! '>=0.11.0.4 && <0.12'
  QuickCheck: ! '>=2.8.2 && <2.9'
  profunctors: ==5.2.*
all-versions:
- 0.1.0.1
author: Anton Marchenko, Mansur Ziatdinov
latest: 0.1.0.1
description-type: markdown
description: ! "# Multivariant assignments generation language\n\nThis library allows
  you to write short description of multivariant assignments in embedded DSL and interpret
  them as solution, text of assignment and tests.\n\nThis library is available at
  [hackage](http://hackage.haskell.org/package/multivariant).\n\n## Installation\n\n-
  install [stack](https://docs.haskellstack.org/en/stable/README/)\n- run `stack exec
  multivariant`\n\nor you can use `cabal install multivariant`.\n\n## Language description\n\nThere
  are several typeclasses for tagless-final encoding of language:\n- Program\n- WithDescription\n-
  WithCornerCases\n- WithInvert\n\nEach typeclass defines some operations that every
  interpreter has to implement.\n\nThere are currently three ``interpreters'' (types
  that implement corresponding typeclasses):\n- Cases\n- Description\n- Solution\n\n###
  Program\n\n### WithDescription\n\n### WithInvert\n\nTBA\n\n## Examples\n\n```haskell\ntask
  = Inv.map ((+1) :<->: (-1)) `withDescription` \"Add one to each list element\" `withCornerCases`
  ([0],[0])\n    ~>   (   (sum :<->: (\\s -> [s,0])) `withDescription` \"Compute sum
  of elements\" `withCornerCases` ([[]],[0])\n\t   <+++> (product :<->: (\\p -> [1,p]))
  `withDescription` \"Compute product of elements\" `withCornerCases` ([[]],[1])\n\t
  \    )\n```\n\nTBA\n\nMore examples are available in the [examples](examples/) directory.\n\n"
license-name: BSD-3-Clause
