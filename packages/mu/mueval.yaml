homepage: https://github.com/gwern/mueval
changelog-type: ''
hash: 9ecdbdc8f28ed7bc3f6f6cb5c2708e69f3b099db812bd2b8a51730915f7dab9e
test-bench-deps: {}
maintainer: Gwern <gwern@gwern.net>
synopsis: Safely evaluate pure Haskell expressions
changelog: ''
basic-deps:
  extensible-exceptions: -any
  unix: -any
  Cabal: -any
  base: ! '>=4.5 && <5'
  hint: ! '>=0.3.1'
  filepath: -any
  process: -any
  containers: -any
  simple-reflect: -any
  mtl: ! '>2'
  show: ! '>=0.3'
  QuickCheck: -any
  directory: -any
all-versions:
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- '0.4'
- 0.4.5
- 0.4.6
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.7.0
- 0.7.1
- '0.8'
- 0.8.1
- 0.8.2
- '0.9'
- 0.9.1
- 0.9.1.1
- 0.9.1.1.2
- 0.9.3
author: Gwern
latest: 0.9.3
description-type: markdown
description: ! "# What\n\nMueval grew out of my discontent with Lambdabot: it's really
  neat to be able to run expressions in `#haskell` like this:\n\n    07:53 < ivanm>
  > filter (\\ x -> isLetter x || x == '\\t') \"asdf$#$     dfs\"\n    07:55 < lambdabot>
  \ \"asdfdfs\"\n\nBut Lambdabot is crufty and very difficult to install or run. IMO,
  we need a replacement or rewrite, but one of the things that make this difficult
  is that Lambdabot uses `hs-plugins` to get that sort of evaluation functionality,
  and `hs-plugins` is half the problem. We want some sort of standalone executable
  which provides that functionality. Now, `ghc -e` is obviously unsuited because there
  is no sandboxing, so what I've done is basically marry the GHC API (as rendered
  less sharp-edged by Hint) with a bunch of resource limits and sandboxing (as largely
  stolen from Lambdabot).\n\n# Examples\n\nThe end result is an adorable little program,
  which you can use like this:\n\n    $ mueval --expression '1*100+1'\n    Expression
  type: (Num t) => t\n    result: \"101\"\n\n    $ mueval --expression \"filter (\\`notElem\\`
  ['A'..'Z']) \\\"abcXsdzWEE\\\"\"\n    Expression type: [Char]\n    result: \"\\\"abcsdz\\\"\"\n\nNote
  that mueval will avoid all the attacks I've been able to test on it:\n\n    $ mueval
  --expression 'let x = x in x'\n    Expression type: t\n    result: \"mueval: Time
  limit exceeded\"\n\n    $ mueval --expression \"let foo = readFile \\\"/etc/passwd\\\"
  >>= print in foo\"\n    Expression type: IO ()\n    result: \"<IO ()>\"\n\n    $
  mueval --module System.IO.Unsafe --expression \"let foo = unsafePerformIO readFile
  \\\"/etc/passwd\\\" in foo\"\n    mueval: Unknown or untrusted module supplied!
  Aborting.\n\n## Loading definitions from files\n\nLike Lambdabot, Mueval is capable
  of loading a file and its definitions. This is useful to get a kind of persistence.
  Suppose you have a file `L.hs`, with a function `bar = (+1)` in it; then `mueval
  --loadfile=L.hs --expression=\"bar 1\"` will evaluate to, as one would expect, `2`.\n\nIt's
  worth noting that definitions and module imports in the loaded *are not* fully checked
  like the expression is. The resource limits and timeouts still apply, but little
  else. So if you are dynamically adding functions and module imports, you *must*
  secure them yourself or accept the loss of security. Currently, all known 'evil'
  expressions cause Mueval to exit with an error (a non-zero exit code), so my advice
  is to do something like `mueval --expression foo && echo \"\\n\" >> L.hs && echo
  foo >> L.hs`. (That is, only accept new expressions which evaluate successfully.)\n\n#
  Summary\n\nAnyway, it's my hope that this will be useful as an example or useful
  in itself for people endeavoring to fix the Lambdabot situation or just in safely
  running code period.\n\n# Getting\n\nYou can download Mueval at Hackage: <http://hackage.haskell.org/package/mueval>.
  Mueval has a public Git repository, at <https://github.com/gwern/mueval>. Contributions
  & updates are of course welcomed.\n\n# Installing\n\nMueval depends on a few of
  the standard libraries, which you should have installed already, and also on the
  'Hint' library <http://hackage.haskell.org/package/hint>; Hint is particularly essential
  as it is the very capable wrapper around the GHC API which Mueval uses. (Without
  Hint, this would've been much more painful to write). All of this is cabalized,
  so ideally installation will be as simple as:\n\n    $ cabal install mueval\n\nHowever,
  you can still manually download and unpack the Mueval tarball, and do the usual
  Cabal dance:\n\n    $ runhaskell Setup configure\n    $ runhaskell Setup build\n
  \   $ runhaskell Setup install\n\n# See also\n\n- Chris Done's interactive Haskell
  REPL website, [Try Haskell!](http://tryhaskell.org/)\n\n# Bugs\n\nMueval uses a
  number of techniques for security; particularly problematic seem to be the resource
  limits, as they have to be specified manually & statically in the source code and
  so will probably be broken somewhere somewhen. For this reason, they are not enabled
  by default. Experiment with --rlimits for hours of fun!\n\nMueval also cannot do
  qualified imports. This is due to limitations in the GHC API; see <https://ghc.haskell.org/trac/ghc/ticket/1895>
  & <https://ghc.haskell.org/trac/ghc/ticket/2362>.\n\nAs of 2010 or so, compiling
  Mueval (or any Hint-using executable) with profiling support seems to lead to runtime
  crashes.\n\nFinally, under GHC 6.10.1 (and higher?), you must run Mueval with `+RTS
  -N2 -RTS` as otherwise the watchdog threads will not get run and DoS attacks are
  possible. (Compare `mueval -e \"let x = x + 1 in x\"` against `mueval -e \"let x
  = x + 1 in x\" +RTS -N2 -RTS`.)\n\n# Contributions\n\nSo, you've discovered a bug
  or other infelicity? If you can successfully build & install Mueval, but running
  it on expressions leads to errors, please send me an email at <gwern@gwern.net>.
  Include in the email all the output you see if you run the informal test suite:\n\n
  \   $ sh tests.sh\n\nIf this script *does not* terminate with a success message,
  then there's probably something wrong. One of the properties Mueval strives to have
  is that on every bad expression, it errors out with an exit code of 1, and on every
  good expression, an exit code of 0.\n\nAlso good is making sure `cabal check` and
  `hlint` are happy; but that's not as important as `tests.sh` passing.\n\n# License\n\nBSD-3.\n"
license-name: BSD-3-Clause
