homepage: https://github.com/JustusAdam/mustache
changelog-type: markdown
hash: 71bd62cf7bcfb8ab900aa0fd110c0de55fa476aeac6c8365b0339705f62c75b7
test-bench-deps:
  base-unicode-symbols: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  filepath: -any
  process: -any
  wreq: -any
  lens: -any
  tar: -any
  zlib: -any
  mustache: -any
  temporary: -any
  aeson: -any
  yaml: -any
  directory: -any
maintainer: dev@justus.science
synopsis: A mustache template parser library.
changelog: ! "# Mustache library changelog\n\n## v2.3.0\n\n- Changed `EitherT` to
  `ExceptT` (deprecation)\n- removed `getFile` from public API\n\n## v2.2.3\n\n- Quick
  fix to prevent catchSubstitute from reporting substitutions to the renderer.\n\n##
  v2.2.2\n\n- Added a function to catch a substitution result\n\n## v2.2.1\n\n- Quickfix
  for an issue with resolving in context\n\n## v2.2\n\n- changed substitution into
  a new monad\n    + easier usage in lambdas and lambdas can now do nested substitution\n\n##
  v2.1.4\n\n- Treat Null as falsy in sections\n\n## v2.1.3\n\n- Added excaping for
  the apostrophe \"'\" as per xml spec, courtesy to @tfausak\n\n## v2.1.2\n\n- Fixed
  template cache again, as the spec requires access to the previous cache in partials
  as well\n\n## v2.1.1\n\n- Fixed an error where the substitution of partials would
  not use the template cache of the new partial\n\n## v2.1\n\n- Added API preserving
  checked substitution with 'checkedSubstitute' and 'checkedSubstituteValue'\n- Better
  and more ToMustache instances. No longer are all sequences of characters serialised
  as strings\n\n## v2.0\n\n- Added QuasiQuotes and template Haskell functions for
  compile time template embedding.\n\n## v1.0\n\n- Stabilised API's\n\n## v0.5.1.0rc-7\n\n-
  Removed dependency tagsoup\n- Added ToMustache instances for some numbers\n\n##
  v0.5.0.0rc-6\n\n- Removed any dependency on ghc 7.10-type OverlappingInstances\n-
  Resolved String/List overlapping instances\n\n## v0.4.0.1rc-5\n\n- Added a necessary
  OVERLAPPABLE pragma\n\n## v0.4.0.0rc-4 (current stable version)\n\n- Removed `conversion`
  and `conversion-text` dependency.\n- Subsequently removed any dependency on overlapping
  instances\n- Readded support for ghc version 7.8\n- Removed `Char -> Value` instance
  of `ToMustache` (because of overlap)\n- Renamed `AST`\n\n## v0.3.1.0rc-3\n\n- Added
  infix precedence to conversion operators\n- Added `INLINEABLE` pragma to conversion
  functions\n\n## v0.3.0.1rc-2\n\nDropped GHC 7.8 support in favor of efficient and
  easy data conversion.\n\n## v0.3.0.0rc-1\n\n- improved documentation\n- fixed a
  bug with scope\n- small interface changes\n"
basic-deps:
  either: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  parsec: -any
  containers: -any
  mtl: ! '>=2.2.1'
  cmdargs: -any
  mustache: -any
  scientific: -any
  th-lift: -any
  aeson: -any
  template-haskell: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.1.0'
- '0.4.0.1'
- '0.5.0.0'
- '0.5.1.0'
- '1.0'
- '1.0.1'
- '1.0.2'
- '2.0'
- '2.0.1'
- '2.1'
- '2.1.2'
- '2.1.3'
- '2.1.4'
- '2.2.1'
- '2.2.2'
- '2.2.3'
- '2.3.0'
author: Justus Adam
latest: '2.3.0'
description-type: markdown
description: ! "# mustache [![Travis Status](https://travis-ci.org/JustusAdam/mustache.svg?branch=master)](https://travis-ci.org/JustusAdam/mustache)
  [![Hackage](https://img.shields.io/hackage/v/mustache.svg)](https://hackage.haskell.org/package/mustache)
  [![Join the chat at https://gitter.im/JustusAdam/mustache](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/JustusAdam/mustache?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nHaskell
  implementation of [mustache templates][mustache-homepage].\n\n[mustache-homepage]:
  https://mustache.github.io\n\nImplements the official [specs version 1.1.3](https://github.com/mustache/spec/releases/tag/v1.1.3)\n\n##
  Motivation\n\nThe old Haskell implementation of mustache templates [hastache][]
  seemed pretty abandoned to me. This implementation aims to be much easier to use
  and (fingers crossed) better maintained.\n\n[hastache]: https://hackage.haskell.org/package/hastache\n\nSince
  it is so easy to use and requires but a few files of code, I've also written a small
  executable that compiles and renders mustache templates with data input from json
  or yaml files.\n\n## Usage\n\n### Library\n\nPlease refer to the [documentation][]
  on hackage.\n\n[documentation]: https://hackage.haskell.org/package/mustache\n\n###
  Executable `haskell-mustache`\n\n    $ haskell-mustache --help\n    Simple mustache
  template substitution\n\n    arguments [OPTIONS] TEMPLATE [DATA-FILES]\n\n    Common
  flags:\n      -t --templatedirs[=DIRECTORY]  The directory in which to search for
  the\n                                     templates\n      -? --help                      Display
  help message\n      -V --version                   Print version information\n\nCurrent
  implementation substitutes the `TEMPLATE` once with each `DATA-FILE`\n\n#### Example\n\n
  \   $ haskell-mustache my-template-file data-file-1.json data-file-2.json data-file-3.json\n\n##
  Roadmap\n\n- [x] String parser for mustache templates\n- [x] Template substitution\n-
  [x] Standalone executable\n- [x] Support for 'set delimiter'\n- [x] More efficiency
  using `Text` rather than `String`\n- [x] More efficient Text parsing\n- [x] Test
  coverage provided via the official [specs](https://github.com/mustache/spec)\n-
  [x] Haddock documentation\n- [ ] More instances for `ToMustache` typeclass\n"
license-name: BSD3
