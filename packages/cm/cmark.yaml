homepage: https://github.com/jgm/cmark-hs
changelog-type: text
hash: 5f1f2b14cfb5d129a429836b2ec742820161baa7841d2bf607551ef7edb01618
test-bench-deps:
  markdown: ! '>=0.1 && <0.2'
  sundown: ! '>=0.6 && <0.7'
  base: -any
  discount: ! '>=0.1 && <0.2'
  text: -any
  criterion: -any
  cmark: -any
  HUnit: ! '>=1.2 && <1.7'
  cheapskate: ! '>=0.1 && <0.2'
  blaze-html: ! '>=0.7 && <0.10'
maintainer: jgm@berkeley.edu
synopsis: Fast, accurate CommonMark (Markdown) parser and renderer
changelog: ! "cmark 0.5.5.1 (02 Aug 2017)\n\n  * Update to cmark 0.28.0.\n\ncmark
  0.5.5.1 (20 Mar 2017)\n\n  * Update version bound for HUnit.\n\ncmark 0.5.5 (31
  Jan 2017)\n\n  * Update to cmark 0.27.1.\n  * Update version bounds for dependencies.\n\ncmark
  0.5.4 (18 Nov 2016)\n\n  * Update to cmark 0.27.0.\n\ncmark 0.5.3.1 (16 Jul 2016)\n\n
  \ * Remove unnecessary typedef that caused problems with the build\n    (patch from
  upstream).\n\ncmark 0.5.3 (15 Jul 2016)\n\n  * Update to cmark 0.26.0.\n  * Added
  appveyor CI.\n\ncmark 0.5.2.1 (22 May 2016)\n\n  * New .travis.yml - test with stack,
  cabal on many versions.\n  * Increase upper bound of base (Utku Demir).\n\ncmark
  0.5.2 (26 Mar 2016)\n\n  * Add flag to allow building with an installed libcmark
  (Jens Petersen).\n  * Updated to libcmark 0.25.2.\n\ncmark 0.5.1 (21 Jan 2016)\n\n
  \ * Updated to libcmark 0.24.1.\n\ncmark 0.5 (29 Dec 2015)\n\n  * Updated to libcmark
  0.23.0.\n  * API changes:\n    + Added `OnEnter` and `OnExit` types.\n    + In `NodeType`,
  `HRULE` is now `THEMATIC_BREAK`,\n      `HTML` is `HTML_BLOCK`, `INLINE_HTML` is\n
  \     `HTML_INLINE`, `HEADER` is `HEADING`.  New\n      constructors: `CUSTOM_INLINE`,
  `CUSTOM_BLOCK`.\n\ncmark 0.4.1 (23 Aug 2015)\n\n  * Updated to libcmark 0.22.0.\n
  \ * Bumped version bounds for HUnit.\n\ncmark 0.4.0.1 (14 Jul 2015)\n\n  * API changes:\n
  \   + Added `commonmarkToLaTeX`, `nodeToLaTeX`, `optSafe`.\n    + Changed type of
  `commonmarkToMan` and `nodeToMan`,\n      adding `Maybe Int` param for width.\n
  \   + Changed type of `nodeToCommonMark`, changing the `Int` width\n      parameter
  to a `Maybe Int`.\n  * Updated to cmark 0.21 sources.\n\ncmark 0.3.4 (08 Jun 2015)\n\n
  \ * Updated to libcmark 0.20.0.\n\ncmark 0.3.3.1 (28 May 2015)\n\n  * Changed name
  Bench.hs -> bench-cmark.hs.\n  * Benchmark:  don't benchmark pandoc (circular dependency).\n\ncmark
  0.3.3 (26 May 2015)\n\n  * Added `nodeToHtml`, `nodeToMan`, `nodeToXml`.\n  * Added
  version bounds for text (Albert Krewinkel).\n\ncmark 0.3.2 (28 Apr 2015)\n\n  *
  Updated libcmark C sources to 0.19.0.\n  * Fixes to avoid warning for earlier ghc
  versions.\n  * Refactored, removing the `io` convenience function.\n  * Removed
  unnecessary `unsafePerformIO` on `fromtext`.\n  * `fromtext`: use `ByteString.useAsCString`
  + explicit `encodeUtf8`.\n\ncmark 0.3.1 (29 Mar 2015)\n\n  * Added nodeToCommonmark.\n
  \ * Removed mtl from build-depends.\n  * Updated source info in README, cabal.\n
  \ * Updated C sources.\n  * Put all the C functions in the IO monad, and ensure\n
  \   that memory allocated by the C library is freed\n    at the right time.\n  *
  Added a rudimentary test suite.\n  * Properly free c-allocated resources.\n  * Removed
  bindings to nonexistent setters for source pos\n    attributes.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.5 && <5.0'
  text: ! '>=1.0 && <1.3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- 0.2.0.1
- 0.2.0.2
- '0.3'
- 0.3.0.1
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.3.1
- 0.3.4
- 0.4.0.1
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.2.1
- 0.5.3.1
- 0.5.4
- 0.5.5
- 0.5.5.1
- 0.5.6
author: John MacFarlane
latest: 0.5.6
description-type: markdown
description: ! "cmark-hs\n========\n\nThis package provides Haskell bindings for [libcmark],
  the reference\nparser for [CommonMark], a fully specified variant of Markdown.\nIt
  includes sources for [libcmark] and does not require prior\ninstallation of the
  C library.\n\ncmark provides the following advantages over existing Markdown\nlibraries
  for Haskell:\n\n  - **Speed:** cmark can render a Markdown version of *War and Peace*
  in\n    the blink of an eye.  Conversion speed is on par with the\n    [sundown]
  library, though we were unable to benchmark precisely,\n    because [sundown] raised
  a malloc error when compiled into our\n    benchmark suite. Relative to other Haskell
  Markdown libraries:\n    cmark was 82 times faster than [cheapskate], 59 times faster
  than\n    [markdown], 105 times faster than [pandoc], and 3 times faster\n    than
  [discount].\n\n  - **Memory footprint:**  Memory footprint is on par with [sundown].\n
  \   On one sample, the library uses a fourth the memory that [markdown]\n    uses,
  and less than a tenth the memory that [pandoc] uses.\n\n  - **Robustness:**  cmark
  can handle whatever is thrown at it,\n    without the exponential blowups in parsing
  time that sometimes afflict\n    other libraries.  (The input `bench/full-sample.md`,\n
  \   for example, causes both [pandoc] and [markdown] to grind to a\n    halt.)  [libcmark]
  has been extensively fuzz-tested.\n\n  - **Accuracy:**  cmark passes the CommonMark
  spec's suite of over\n    600 conformance tests.\n\n  - **Standardization:**  Since
  there is a spec and a comprehensive suite\n    of tests, we can have a high degree
  of confidence that any two\n    CommonMark implementations will behave the same.
  \ Thus, for\n    example, one could use this library for server-side rendering\n
  \   and [commonmark.js] for client-side previewing.\n\n  - **Multiple renderers.**
  \ Output in HTML, groff man, LaTeX, CommonMark,\n    and a custom XML format is
  supported. And it is easy to write new\n    renderers to support other formats.\n\n
  \ - **Ease of installation:** cmark is portable and has minimal\n    dependencies.\n\ncmark
  does not provide Haskell versions of the whole [libcmark]\nAPI, which is built around
  mutable `cmark_node` objects.  Instead, it\nprovides functions for converting CommonMark
  to HTML (and other\nformats), and a function for converting CommonMark to a `Node`\ntree
  that can be processed further using Haskell.\n\n**A note on security:**  This library
  does not attempt to sanitize\nHTML output.  We recommend using [xss-sanitize] to
  filter the output,\nor enabling `optSafe` to filter out all raw HTML and potentially\ndangerous
  URLs.\n\n**A note on stability:**  There is a good chance the API will change\nsignificantly
  after this early release.\n\n[CommonMark]: http://commonmark.org\n[libcmark]: http://github.com/jgm/cmark\n[benchmarks]:
  https://github.com/jgm/cmark/blob/master/benchmarks.md\n[cheapskate]: https://hackage.haskell.org/package/cheapskate\n[pandoc]:
  https://hackage.haskell.org/package/pandoc\n[sundown]: https://hackage.haskell.org/package/sundown\n[markdown]:
  https://hackage.haskell.org/package/markdown\n[commonmark.js]: http://github.com/jgm/commonmark.js\n[xss-sanitize]:
  https://hackage.haskell.org/package/xss-sanitize\n[discount]: https://hackage.haskell.org/package/discount\n"
license-name: BSD-3-Clause
