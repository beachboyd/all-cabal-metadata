homepage: https://github.com/qfpl/sv
changelog-type: markdown
hash: 91cde22dd7a93c88575cec319a04c9c30cfa37d946e912fa4479f80cca9c2f8d
test-bench-deps:
  semigroupoids: ! '>=5 && <6'
  bytestring: ! '>=0.9.1.10 && <0.11'
  ansi-wl-pprint: ! '>=0.6.6 && <0.7'
  trifecta: ! '>=1.5 && <1.8'
  sv: -any
  base: ! '>=4.8 && <5'
  tasty-hedgehog: ! '>=0.1 && <0.2'
  text: ! '>=1.0 && <1.3'
  hedgehog: ! '>=0.5 && <0.6'
  semigroups: ! '>=0.18 && <0.19'
  parsers: ! '>=0.12 && <0.13'
  lens: ! '>=4 && <5'
  utf8-string: ! '>=1 && <1.1'
  contravariant: ! '>=1.2 && <1.5'
  tasty-hunit: ! '>=0.9 && <0.11'
  tasty: ! '>=0.11 && <1.1'
  validation: ! '>=1 && <1.1'
  vector: ! '>=0.10 && <0.13'
maintainer: george@qfpl.io
synopsis: Encode and decode separated values (CSV, PSV, ...)
changelog: ! '# Revision history for sv


  ## 0.1 -- 2018-03-06


  * First version. Released on an unsuspecting world.

'
basic-deps:
  semigroupoids: ! '>=5 && <6'
  void: ! '>=0.6 && <1'
  bytestring: ! '>=0.9.1.10 && <0.11'
  ansi-wl-pprint: ! '>=0.6.6 && <0.7'
  trifecta: ! '>=1.5 && <1.8'
  base: ! '>=4.8 && <5'
  text: ! '>=1.0 && <1.3'
  parsec: ! '>=3.1 && <3.2'
  semigroups: ! '>=0.18 && <0.19'
  containers: ! '>=0.4 && <0.6'
  parsers: ! '>=0.12 && <0.13'
  lens: ! '>=4 && <5'
  bifunctors: ! '>=5.1 && <6'
  utf8-string: ! '>=1 && <1.1'
  charset: ! '>=0.3 && <=0.4'
  contravariant: ! '>=1.2 && <1.5'
  mtl: ! '>=2.0.1 && <2.3'
  attoparsec: ! '>=0.12.1.4 && <0.14'
  readable: ! '>=0.3 && <0.4'
  transformers: ! '>=0.2 && <0.6'
  deepseq: ! '>=1.1 && <1.5'
  validation: ! '>=1 && <1.1'
  profunctors: ! '>=5.2.1 && <6'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1'
author: George Wilson
latest: '0.1'
description-type: haddock
description: ! '<<http://i.imgur.com/uZnp9ke.png>>


  sv (separated values) is a library for parsing, decoding, encoding, and

  printing CSV and similar formats (such as PSV, TSV, and many more).


  sv uses an Applicative combinator style for decoding and encoding, rather

  than a type class based approach. This means we can have multiple decoders

  for the same type, multiple combinators of the same type, and we never have

  to worry about orphan instances. These decoders can be stiched together from

  provided primitives and combinators, or you can build one from a parser

  from your favourite parser combinator library.


  sv returns values for all errors that occur - not just the first. Errors have

  more structure than just a string, indicating what went wrong.


  sv''s parser is exposed so you can use it independently of the decoding, and

  encoding and printing are similarly standalone.


  sv focuses on correctness, on flexible and composable data types,

  and on useful and informative error values.

  Speed is also important to us, but it is not as important as these other

  qualities.


  sv tries not to be opinionated about how your data should look. We intend for

  the user to have a great degree of freedom to build the right decoder for

  their dataset.


  Parts of sv are intended to be imported as follows:


  @

  import Data.Sv

  import qualified Data.Sv.Decode as D

  import qualified Data.Sv.Encode as E

  @


  Examples:


  * Decoding a real CSV: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Species.lhs
  Species.lhs>

  * Encoding data to a CSV: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Encoding.hs
  Encoding.hs>

  * Handling NULL and Unknown occuring in a column of numbers: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Numbers.hs
  Numbers.hs>

  * Dealing with non-rectangular data: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Ragged.hs
  Ragged.hs>

  * Handling multiple logical documents in one file: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Concat.hs
  Concat.hs>

  * Integrating with an existing attoparsec parser to read date stamps: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/TableTennis.hs
  TableTennis.hs>

  * Fixing inconsistent formatting with lenses: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Requote.hs
  Requote.hs>'
license-name: BSD3
