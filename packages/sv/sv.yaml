homepage: https://github.com/qfpl/sv
changelog-type: markdown
hash: fa76a0683359b8702e793e3c2c52941e3f9e8298dcf575e118b5170f755a19bd
test-bench-deps:
  semigroupoids: ! '>=5 && <5.4'
  Only: ! '>=0.1 && <0.2'
  bytestring: ! '>=0.9.1.10 && <0.11'
  trifecta: ! '>=1.5 && <2.1'
  sv: -any
  base: ! '>=4.8 && <4.13'
  tasty-hedgehog: ! '>=0.1 && <0.3'
  text: ! '>=1.0 && <1.3'
  criterion: ! '>=1.3 && <1.6'
  hedgehog: ! '>=0.5 && <0.7'
  semigroups: ! '>=0.18 && <0.19'
  parsers: ! '>=0.12 && <0.13'
  lens: ! '>=4 && <4.18'
  cassava: ! '>=0.4.1 && <0.6'
  utf8-string: ! '>=1 && <1.1'
  contravariant: ! '>=1.2 && <1.6'
  tasty-hunit: ! '>=0.9 && <0.11'
  attoparsec: ! '>=0.12.1.4 && <0.14'
  tasty: ! '>=0.11 && <1.3'
  deepseq: ! '>=1.1 && <1.5'
  validation: ! '>=1 && <1.1'
  hw-dsv: ! '>=0.2.1 && <0.4'
  vector: ! '>=0.10 && <0.13'
maintainer: george@qfpl.io
synopsis: Encode and decode separated values (CSV, PSV, ...)
changelog: |
  # Revision history for sv

  ## 1.3.1 -- 2019-04-02

  * Update to sv-core 0.4.1

  ## 1.3.0.1 -- 2019-02-26

  * Fix an occasionally failing property-test

  ## 1.3 -- 2019-01-14

  * Update to sv-core 0.4

  ## 1.2 -- 2018-09-26

  * Update to sv-core 0.3

  ## 1.1.1 -- 2018-08-10

  * Depend on sv-core 0.2.1 to get column-name-based encoding

  ## 1.1 -- 2018-07-25

  * Add column-name-based decoding by adding parseDecodeNamed and associated functions
  * Support sv-core 0.2

  ## 1.0 -- 2018-07-19

  * Split the package into sv, sv-core, svfactor. This removes Data.Sv.{Parse,Print,Syntax}
    and changes types in Data.Sv.Decode and Data.Sv.Encode.
    Compatibility with version 0.1 is minimal

  ## 0.1 -- 2018-03-06

  * First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: ! '>=5 && <5.4'
  bytestring: ! '>=0.9.1.10 && <0.11'
  base: ! '>=4.8 && <4.13'
  sv-core: ==0.4.1.*
  bifunctors: ! '>=5.1 && <5.6'
  utf8-string: ! '>=1 && <1.1'
  contravariant: ! '>=1.2 && <1.6'
  attoparsec: ! '>=0.12.1.4 && <0.14'
  transformers: ! '>=0.2 && <0.6'
  validation: ! '>=1 && <1.1'
  hw-dsv: ! '>=0.2.1 && <0.4'
all-versions:
- '0.1'
- '1.0'
- '1.1'
- 1.1.1
- '1.2'
- '1.3'
- 1.3.0.1
- 1.3.1
author: George Wilson
latest: 1.3.1
description-type: haddock
description: |-
  <<http://i.imgur.com/uZnp9ke.png>>

  sv (separated values) is a library for parsing, decoding, encoding, and
  printing CSV and similar formats (such as PSV, TSV, and many more).

  sv uses an Applicative combinator style for decoding and encoding, rather
  than a type class based approach. This means we can have multiple decoders
  for the same type, multiple combinators of the same type, and we never have
  to worry about orphan instances. These decoders can be stitched together from
  provided primitives and combinators, or you can build one from a parser
  from your favourite parser combinator library.

  For parsing, sv uses <https://hackage.haskell.org/package/hw-dsv hw-dsv>, a high performance streaming CSV parser based on rank-select data structures.
  sv works with UTF-8, and should work with CP-1252 as well. It does not work
  with UTF-16 or UTF-32.

  sv returns values for all errors that occur - not just the first. Errors have
  more structure than just a string, indicating what went wrong.

  sv tries not to be opinionated about how your data should look. We intend for
  the user to have a great degree of freedom to build the right decoder for
  their dataset.

  Parts of sv are intended to be imported as follows:

  @
  import Data.Sv
  import qualified Data.Sv.Decode as D
  import qualified Data.Sv.Encode as E
  @

  Examples:

  * Decoding a real CSV: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Species.lhs Species.lhs>
  * Decoding by column name: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Columnar.hs Columnar.hs>
  * Encoding data to a CSV: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Encoding.hs Encoding.hs>
  * Encoding data to a CSV with a header: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/EncodingWithHeader.hs EncodingWithHeader.hs>
  * Handling NULL and Unknown occuring in a column of numbers: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Numbers.hs Numbers.hs>
  * Dealing with non-rectangular data: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/Ragged.hs Ragged.hs>
  * Integrating with an existing attoparsec parser to read date stamps: <https://github.com/qfpl/sv/blob/master/examples/src/Data/Sv/Example/TableTennis.hs TableTennis.hs>

  To get the best performance, the hw-dsv parser and its dependencies
  underlying sv should be compiled with the flag @+bmi2@ to enable . These
  libraries are:  @bits-extra@, @hw-rankselect@, @hw-rankselect-base@, and
  @hw-dsv@. A simple way to set the flags for all of them when building with
  cabal is to include a cabal.project file in your project containing
  something like the following:

  >packages: .
  >package bits-extra
  >  flags: +bmi2
  >package hw-rankselect
  >  flags: +bmi2
  >package hw-rankselect-base
  >  flags: +bmi2
  >package hw-dsv
  >  flags: +bmi2
license-name: BSD-3-Clause
