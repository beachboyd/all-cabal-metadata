homepage: https://github.com/reactive-systems/syfco
changelog-type: ''
hash: 5ebe036b742fd52633086792e19cbeef1016767dea653bc5f3b44ba43685399f
test-bench-deps: {}
maintainer: Felix Klein <klein@react.uni-saarland.de>
synopsis: Synthesis Format Conversion Tool / Library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.10'
  parsec: ==3.1.*
  array: ==0.5.*
  containers: ==0.5.*
  mtl: ==2.2.*
  convertible: ! '>=1.1'
  transformers: ! '>=0.4 && <0.6'
  directory: ! '>=1.2 && <1.4'
all-versions:
- 1.1.0.0
author: Felix Klein <klein@react.uni-saarland.de>
latest: 1.1.0.0
description-type: markdown
description: ! "# Synthesis Format Conversion Tool\n\nA tool for reading, manipulating
  and transforming synthesis\nspecifications in [TLSF](https://arxiv.org/abs/1604.02284).\n\n##
  About this tool\n\nThe tool interprets the high level constructs of [TLSF 1.1](https://arxiv.org/abs/1604.02284)\n(functions,
  sets, ...) and supports the transformation of the\nspecification to Linear Temporal
  Logic (LTL) in different output\nformats. The tool has been designed to be modular
  with respect to the\nsupported output formats and semantics. Furthermore, the tool
  allows\nto identify and manipulate parameters, targets and semantics of a\nspecification
  on the fly. This is especially thought to be useful for\ncomparative studies, as
  they are for example needed in the\n[Synthesis Competition](http://www.syntcomp.org).\n\nThe
  main features of the tool are summarized as follows:\n\n* Interpretation of high
  level constructs, which allows to reduce the\n  specification to its basic fragment
  where no more parameter and\n  variable bindings occur (i.e., without the GLOBAL
  section).\n\n* Transformation to other existing specification formats, like\n  Basic
  TLSF, [Promela LTL](http://spinroot.com/spin/Man/ltl.html), [PSL](https://en.wikipedia.org/wiki/Property_Specification_Language),
  [Unbeast](https://www.react.uni-saarland.de/tools/unbeast), [Wring](http://www.ist.tugraz.at/staff/bloem/wring.html),\n
  \ [structured Slugs](https://github.com/VerifiableRobotics/slugs/blob/master/doc/input_formats.md#structuredslugs),
  and [SlugsIn](https://github.com/VerifiableRobotics/slugs/blob/master/doc/input_formats.md#slugsin).\n\n*
  Syntactical analysis of membership in GR(k) for any k (modulo\n  Boolean identities).\n\n*
  On the fly adjustment of parameters, semantics or targets.\n\n* Preprocessing of
  the resulting LTL formula.\n\n* Conversion to negation normal form.\n\n* Replacement
  of derived operators.\n\n* Pushing/pulling next, eventually, or globally operators\n
  \ inwards/outwards.\n\n* Standard simplifications.\n"
license-name: MIT
