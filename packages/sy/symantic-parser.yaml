homepage: ''
changelog-type: markdown
hash: 714950f5a6f0bd9532e060e2d2b7d0a620595bdc3ac8c0c2b3e403f339e1ec20
test-bench-deps:
  symantic-parser: -any
  bytestring: '>=0.10'
  unix: '>=2.7'
  base: '>=4.10 && <5'
  tasty-golden: '>=2.3'
  unordered-containers: -any
  text: '>=1.2'
  strict: '>=0.4'
  filepath: '>=1.4'
  process: '>=1.6'
  containers: '>=0.5'
  hashable: '>=1.2.6'
  transformers: '>=0.4'
  tasty: '>=0.11'
  deepseq: '>=1.4'
  template-haskell: '>=2.16'
  directory: '>=1.3'
maintainer: Julien Moutinho <julm+symantic-parser@sourcephile.fr>
synopsis: Parser combinators statically optimized and staged via typed meta-programming
changelog: |
  ## symantic-parser-0.0.0.20210101

  * Initial (pre-alpha) release, on the unsuspecting world at sleep.
basic-deps:
  bytestring: -any
  base: '>=4.10 && <5'
  unordered-containers: -any
  text: -any
  array: -any
  containers: -any
  ghc-prim: -any
  hashable: -any
  transformers: -any
  template-haskell: '>=2.16'
all-versions:
- 0.0.0.20210101
author: Julien Moutinho <julm+symantic-parser@sourcephile.fr>
latest: 0.0.0.20210101
description-type: markdown
description: "### Main differences with respect to `ParsleyHaskell`\n\n- Tagless-final
  and `DefaultSignatures` are used instead of tagfull-final to handle recursion schemes,
  this avoids constructing and deconstructing as much tags when transforming combinators
  or instructions.\n  And structures/simplifies the code by avoiding to define custom
  traversals (`traverseCombinator`) or custom fix-point data-types (`Fix4`) and associated
  utilities (`cata4`) when introducing new index-types. \n  Note that the extensibility
  of combinators, a great feature of tagless-final, is not really achievable when
  using the optimizing pass which requires a comprehensive initial encoding.\n\n-
  No dependency on `dependent-map` by keeping observed sharing inside `def` and `ref`
  combinators, instead of passing by a `DMap`. Same for join-points, where `TemplateHaskell`
  names are also directly used instead of passing by a `DMap`.\n\n- No dependency
  on GHC plugins: `lift-plugin` and `idioms-plugin`, because those are plugins hence
  introduce a bit of complexity in the build processes using this parser, but most
  importantly they are experimental and only cosmetic, since they only enable a cleaner
  usage of the parsing combinators, by lifting Haskell code in `pure` to integrate
  the `TemplateHaskell` needed. I do not understand them that much and do not feel
  confortable to maintain them in case their authors abandon them.\n\n- Error messages
  based upon the farthest input position reached (not yet implemented in `ParsleyHaskell`).\n\n-
  License is `GPL-3.0-or-later` not `BSD-3-Clause`.\n\n### Main goals\n\n- For me
  to better understand `ParsleyHaskell`, and find a manageable balance between simplicity
  of the codebase and features of the parser.\n\n- To support parsing tree-like data
  structures (like XML or HTTP routes) instead of just string-like data structures,
  which I've done using `megaparsec`, but it is not conceived for such input, and
  is less principled when it comes to optimizing, like merging alternatives.\n"
license-name: GPL-3.0-or-later
