homepage: ''
changelog-type: ''
hash: 773971312d89f56ac6b1e20802771de046cdee2daec003393ce221469cd71ce2
test-bench-deps: {}
maintainer: Vo Minh Thu <noteed@gmail.com>
synopsis: Distfix expression parsing library
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- '0.1'
author: Vo Minh Thu <noteed@gmail.com>
latest: '0.1'
description-type: markdown
description: ! "Distfix expression parsing library\n==================================\n\nSyntactical
  is a Haskell library to parse languages made exclusively, from a\nsyntactic point
  of view, of operators and function applications. It is based\non a modified shunting-yard
  algorithm. The modifications are done to allow\ndistfix operators and function application
  written with juxtaposition of\nsymbols (just like in Haskell).\n\nThe resulting
  parse trees are s-expressions. Further processing to create an\nAST specific to
  the task at hand is left to the user (but this should be\nstraightforward).\n\nExamples\n--------\n\nTo
  create a parser, it is just needed to provide an operator table. To give a\nfeel
  of the library at work, here are some examples. The resulting parse trees\n(s-expressions)
  are displayed using the characters ⟨ and ⟩ instead of the\nparentheses (this is
  not enforced by the library).\n\n    -- input => output\n    1 + 2 => ⟨+ 1 2⟩\n
  \   1 + 2 * 3 => ⟨+ 1 ⟨* 2 3⟩⟩\n    f a => ⟨f a⟩\n    1 + f a b => ⟨+ 1 ⟨f a b⟩⟩\n\n
  \   -- parentheses for grouping are are just a closed operator\n    -- ␣ is the
  hole, in fact, the + above could be written ␣+␣\n    (a) => ⟨(␣) a⟩\n\n    -- if
  you know that parentheses are only used for grouping\n    -- (i.e. it can be viewed
  as an operator with the semantic\n    -- of the identity function), the parser can
  drop them.\n    (a) => a\n\n    -- the parser can also be configured to recognize
  two symbols\n    -- used to write directly s-expressions, here we use again the\n
  \   -- characters ⟨ and ⟩. notice that a + b is written in infix\n    -- form.\n
  \   ⟨* (a + b) ⟨- 1 2⟩⟩ => ⟨* ⟨+ a b⟩ ⟨- 1 2⟩⟩\n\n    -- the library supports mixfix
  (also called distfix) operators\n    true ? 1 : 0 => ⟨␣?␣:␣ true 1 0⟩\n    # a =>
  ⟨#␣ a⟩\n    a ! => ⟨␣! a⟩\n    1 + if true then 1 else a b + c => ⟨+ 1 ⟨if␣then␣else␣
  true 1 ⟨+ ⟨a b⟩ c⟩⟩⟩\n    [ a | b ] => ⟨[␣|␣] a b⟩\n\nCurrent state\n-------------\n\nThe
  library works but is still a bit rough. Tests don't cover enough cases and\nit is
  simple to overlook one. Documentation is missing (but a look at\ntests/Simple is
  enough to start).\n\nThe HPC shows that a few things are not tested:\n- a few unevaluated
  Hole values in Simple.hs shows that some operator\n  combinations are not tested)\n-
  A AmbiguousContinue MiddleOrLast in findContinuing is never returned\n- Surprisingly,
  it seems the fst element in Maybe (Associativity,Precedence)\n- is not used.\n\nFuture
  and/or wishes\n--------------------\n\n- Make a version of the modified shunting-yard
  exposed as Parsec's\n  buildExpressionParser, i.e. the base token (or term) is specified
  by a\n  user-sipplied parser, with functions used to build the tree.\n- Allow arbitray
  parsers to be used in holes, in addition of the SExpression\n  and Distfix kinds
  of holes currently available.\n- Allow a new kind of hole called Repeat or Repetition
  or List (but List is a\n  constructor in the Tree data type). That new kind of hole
  allows a (possibly\n  empty) list of sub-expressions to appear in the hole, separated
  by an\n  operator part. E.g. closed \"[\" (Repeat \",\") \"]\" would allow [ ],
  [ a ],\n  [ a , b ], [ a, b, c ] and so on. The result would be respectively ⟨[,]
  ⟨⟩⟩,\n  ⟨[,] ⟨a⟩⟩, ⟨[,] ⟨a b⟩⟩, ⟨[,] ⟨a b c⟩⟩ and so on. It should also be possible\n
  \ to use closed \"[\" (Repeat \";\") \"]\" and closed \"[\" (Repeat \",\") \"]\"
  in the\n  same operator table. The [,] (and [;]) would be user-constructed by adding
  a\n  'list' method to the Token class.\n- Make use of the reparsing capability (the
  input and output type is the same).\n  E.g. it would be possible to differentiate
  between different kind of holes\n  based on its right part (by leaving it unparsed,
  then parsing it when the\n  right part is known).\n- The biggest problem of this
  approach is that the parser can accept a lot of\n  invalid inputs. Probably a good
  approach would be to use s-expression\n  grammars.\n- Turn the library into a command-line
  tool to generate parsers.\n- Check the operator table for ambiguity separately of
  running the shunting-\n  yard.\n- The showSExpr/showTree should not use concatMap
  and (++).\n\nBefore pushing to Hackage\n-------------------------\n\n- Write the
  doc\n- Make sure it installs cleanly with cabal\n\n"
license-name: BSD-3-Clause
