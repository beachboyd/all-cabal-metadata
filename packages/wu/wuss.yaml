homepage: https://github.com/tfausak/wuss#readme
changelog-type: markdown
hash: 60648b228c64802add22d8d8a9732a72ed85724d7ccace1b04f75be7351c835c
test-bench-deps: {}
maintainer: Taylor Fausak
synopsis: Secure WebSocket (WSS) clients
changelog: |
  # Change log

  Wuss uses [Semantic Versioning][].
  The change log is available through the [releases on GitHub][].

  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html
  [releases on GitHub]: https://github.com/tfausak/wuss/releases
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.9.0 && <4.13'
  network: ! '>=2.6.3 && <2.9 || >=3.0.0 && <3.1'
  websockets: ! '>=0.9.7 && <0.13'
  connection: ! '>=0.2.6 && <0.3'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.4
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- 1.1.6
- 1.1.7
- 1.1.8
- 1.1.9
- 1.1.10
- 1.1.11
- 1.1.12
author: ''
latest: 1.1.12
description-type: markdown
description: |
  # [Wuss][]

  Secure WebSocket (WSS) clients in Haskell.

  [![Version badge][]][version]
  [![Build badge][]][build]

  ---

  Wuss is a library that lets you easily create secure WebSocket clients over the
  WSS protocol. It is a small addition to [the `websockets` package][] and is
  adapted from existing solutions by [@jaspervdj][], [@mpickering][], and
  [@elfenlaid][].

  -   [Installation](#installation)
  -   [Usage](#usage)

  ## Installation

  To add Wuss as a dependency to your package, add it to your Cabal file.

  ```
  build-depends: wuss
  ```

  For other use cases, install it with Cabal.

  ``` sh
  $ cabal install wuss
  ```

  Wuss uses [Semantic Versioning][]. See [the change log][] for a detailed list
  of changes.

  ## Usage

  ``` hs
  import Wuss

  import Control.Concurrent (forkIO)
  import Control.Monad (forever, unless, void)
  import Data.Text (Text, pack)
  import Network.WebSockets (ClientApp, receiveData, sendClose, sendTextData)

  main :: IO ()
  main = runSecureClient "echo.websocket.org" 443 "/" ws

  ws :: ClientApp ()
  ws connection = do
      putStrLn "Connected!"

      void . forkIO . forever $ do
          message <- receiveData connection
          print (message :: Text)

      let loop = do
              line <- getLine
              unless (null line) $ do
                  sendTextData connection (pack line)
                  loop
      loop

      sendClose connection (pack "Bye!")
  ```

  For more information about Wuss, please read [the Haddock documentation][].

  [Wuss]: http://taylor.fausak.me/wuss/
  [Version badge]: https://www.stackage.org/package/wuss/badge/nightly?label=version
  [version]: https://www.stackage.org/package/wuss
  [Build badge]: https://travis-ci.org/tfausak/wuss.svg?branch=master
  [build]: https://travis-ci.org/tfausak/wuss
  [the `websockets` package]: https://hackage.haskell.org/package/websockets
  [@jaspervdj]: https://gist.github.com/jaspervdj/7198388
  [@mpickering]: https://gist.github.com/mpickering/f1b7ba3190a4bb5884f3
  [@elfenlaid]: https://gist.github.com/elfenlaid/7b5c28065e67e4cf0767
  [semantic versioning]: http://semver.org/spec/v2.0.0.html
  [the change log]: CHANGELOG.md
  [the haddock documentation]: https://hackage.haskell.org/package/wuss
license-name: MIT
