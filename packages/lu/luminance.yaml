homepage: https://github.com/phaazon/luminance
changelog-type: markdown
hash: 0279fbe771417eee957ba9f320679ecf02aaeda58588c458be697a6fc909c4f8
test-bench-deps: {}
maintainer: Dimitri Sabadie <dimitri.sabadie@gmail.com>
synopsis: Type-safe, type-level and stateless graphics framework
changelog: ! "### 0.11.0.4\n\n- GHC 8 support.\n\n### 0.11.0.3\n\n- Updated the documentation
  in Luminance crate module.\n\n### 0.11.0.2\n\n- Added support for `dlist-0.8`.\n\n###
  0.11.0.1\n\n- Fixed documentation broken links.\n\n# 0.11\n\n- Removed `Region`s.
  Now using commands (`FrameCmd`, `ShadingCmd`, `DrawCmd` and `RenderCmd`). Safer\n
  \ interface.\n\n### 0.10.0.2\n\n- Fixed `Buffer` documentation.\n\n### 0.10.0.1\n\n-
  Fixed *gl45* backend (didn’t compile).\n- Added documentation/tutorial for `Buffer`.\n\n#
  0.10\n\n#### Breaking changes\n\n- `Region` was removed in favor of `Buffer`; just
  a type renaming, don’t freak out.\n- Removed batches in favor of `Region`s.\n- Removed
  `Decidable` and `Divisible` instances for `U` as uniforms are not supposed to be
  used this\n  way.\n\n#### Patch changes\n\n- Internal changes to make `createStage`
  errors more verbose about the type of the stage.\n\n### 0.9.1.2\n\n- Support for
  `contravariant-1.4`.\n- Support for GL_ARB_separate_shader_objects for `gl33` backend
  (shader pragma).\n\n### 0.9.1.1\n\n- Several minor changes (clean up mostly).\n\n##
  0.9.1\n\n- Made `Program` an instance of `Eq` and `Show`.\n\n# 0.9\n\n- Dropped
  `gl32` for `gl33`.\n\n## 0.8.2.1\n\n- Removed the `MonadIO` constraint on `createGeometry`
  as it’s already brought by `MonadResource`.\n- Clean some code about `createGeometry`
  conditional (gl32 / gl45).\n\n## 0.8.2\n\n- Exposed `SomeUniformName`.\n\n## 0.8.1\n\n-
  Exposed `UniformName` – forgotten in 0.8 release.\n\n# 0.8\n\n#### Breaking changes\n\n-
  `createProgram` now has a new rank 2 type parameter to map uniform values. It uses
  the newly\n  added first-class `UniformName` type to select which kind of uniform
  is wanted – up to now, simple\n  uniforms or uniform block. That change is great
  because it unifies everything under the same type\n  and future adds won’t break
  the existing code – the signature of `createProgram` for instance.\n\n## 0.7.2\n\n-
  Made `UniformInterface` visible (type only).\n\n## 0.7.1\n\n- Added `Graphics.Luminance.Pixel`
  in the export-list of `Graphics.Luminance.Texture`.\n\n# 0.7\n\n#### Breaking changes\n\n-
  Shader creation can fail with the `UnsupportedStage` error, holding the stage (and
  not a `String`)\n  as it used to.\n- Fixed cubemap size interface.\n- Shader interface
  now uses the type `StageType` and `createStage` to create new shader stages.\n\n####
  Minor changes\n\n- Several internal architectural changes.\n- Added `gl45-bindless-textures`
  caps.\n- Added `gl32` and `gl45` backends. The default backend is `gl32` and backends
  can be selected via\n  compilation flags.\n\n#### Patch changes\n\n- Simplified
  and fixed UBO implementation.\n- Added more debug symbols.\n- OpenGL debugging now
  shows the callstack in a fancy way.\n- Several internal architectural changes.\n\n###
  0.6.0.5\n\n- semigroups-0.18 support.\n\n### 0.6.0.4\n\n- Extensions are now set
  per module.\n\n### 0.6.0.3\n\n- Updated .cabal documentation.\n- Support for `semigroups-0.17`.\n\n###
  0.6.0.2\n\n- Fixed typo in the hackage documentation.\n\n### 0.6.0.1\n\n- Fixed
  `(:*:)` for `UniformBlock`.\n- Dumped the `Storable` constraint in the `uniBlock`
  function (rank2 function passed to build\n  uniform interfaces to `createProgram`).\n-
  Added `(:.)`, `(,)`, `(,,)` and `(,,,)` into `UniformBlock`.\n\n# 0.6\n\n#### Breaking
  changes\n\n- Added a new function to the `createProgram` and `createProgram_` uniform
  interface builder\n  argument. That function can now be used to retrieve `U (Region
  rw (UB a))`, which is a *UBO*.\n- The uniform interface creation is not performed
  in a arbitrary, user-defined monad anymore. A\n  dedicated type was introduced for
  that very purpose – `UniformInterface` – constraining the user\n  to only use the
  uniformize functions to map semantics to `U` values.\n\n#### Non-breaking changes\n\n-
  Added `UB`, which can be used along with `Buffer` to create *UBO* buffers and pass
  them to\n  shaders.\n\n### 0.5.2.1\n\n- Relaxed lower bound of `linear` to accept
  `linear-1.19.*`. That changes should enable `lumimance`\n  to be included into stackage.\n-
  Changed internal representation of `Region`.\n\n## 0.5.2\n\n#### Non-breaking changes\n\n-
  Added texture arrays:\n    + `Texture1DArray`\n    + `Texture2DArray`\n    + `CubemapArray`\n\n##
  0.5.1\n\n#### Non-breaking changes\n\n- Added several `Uniform` instances for [linear](http://hackage.haskell.org/package/linear).\n\n####
  Patch changes\n\n- Fixed the indexed render.\n- Fixed the vertex attributes being
  ignored.\n\n### 0.5\n\n#### Breaking changes\n\n- Changed the interface of texels
  transfer and filling. We dropped the `Foldable` instance and now\n  require a `Data.Vector.Storable.Vector`
  for performance purposes.\n\n#### Non-breaking changes\n\n- Added `MirrorRepeat`
  constructor to `Wrap`.\n\n#### Patch changes\n\n- Fixed prerequisites in README.\n\n##
  0.4.1\n\n- Fixed the `sizeOf` implementation of `a :. b`.\n- Added `nubDirect`,
  which can be used to turn *direct geometry* into *indirect geometry*.\n\n# 0.4\n\n####
  Non-breaking changes\n\n- Added .gitignore.\n\n#### Breaking changes\n\n- `V2`,
  `V3` and `V4` replaced by `vec2`, `vec3` and `vec4`.\n- `V` is not anymore luminance’s.
  We use linear’s one, because it already has all the instances we\n  need and is
  more generic. The interface is then impacted.\n\n## 0.3.2\n\n- Added Core.Tuple
  into the export liste of Luminance for easier uses in client code space.\n\n###
  0.3.1.2\n\n- Fixed Geometry haddock documentation.\n\n### 0.3.1.1\n\n- Fixed haddock
  escaping issues.\n\n## 0.3.1\n\n- Added `CubeFace` in the interface.\n\n### 0.3.0.1\n\n-
  Enhanced Texture documentation.\n\n# 0.3\n\n- All textures can now be used in shaders.\n-
  Added support for more OpenGL textures – though, framebuffers are not impacted yet.\n
  \   - `Texture1D`\n    - `Texture2D`\n    - `Texture3D`\n    - `Cubemap`\n- Changed
  the texture interface with type families so that we can add more in an\n  easier
  way!\n\n# 0.2\n\n#### Breaking changes\n\n- Automatically insert GLSL pragmas in
  shaders.\n\n#### Non-breaking changes\n\n- Added documentation for RenderCmd.\n-
  Added stdRenderCmd_.\n- Added shaderProgramBatch_.\n\n### 0.1.1.1\n\n- Fixed a typo
  in the Graphics.Luminance documentation.\n\n## 0.1.1\n\n- Added a tutoral in Graphics.Luminance.\n\n#
  0.1\n\n- Initial revision. Do not consider this revision as a stable release. It’s
  experimental. The\n  first stable release will be **1.0**.\n"
basic-deps:
  void: ! '>=0.7 && <0.8'
  base: ! '>=4.8 && <4.10'
  dlist: ! '>=0.7 && <0.9'
  semigroups: ! '>=0.16 && <0.19'
  containers: ! '>=0.5 && <0.6'
  contravariant: ! '>=1.3 && <1.5'
  linear: ! '>=1.19 && <1.21'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.6'
  gl: ! '>=0.7 && <0.8'
  resourcet: ! '>=1.1 && <1.2'
  vector: ! '>=0.11 && <0.12'
all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- '0.2'
- '0.3'
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.1.2
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.2.1
- '0.6'
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
- 0.6.0.5
- '0.7'
- 0.7.1
- 0.7.2
- '0.8'
- 0.8.1
- 0.8.2
- 0.8.2.1
- '0.9'
- 0.9.1
- 0.9.1.1
- 0.9.1.2
- '0.10'
- 0.10.0.1
- 0.10.0.2
- '0.11'
- 0.11.0.1
- 0.11.0.2
- 0.11.0.3
- 0.11.0.4
author: Dimitri Sabadie <dimitri.sabadie@gmail.com>
latest: 0.11.0.4
description-type: haddock
description: ! 'This package exposes several modules to work with /GPUs/ in a stateless
  and

  type-safe way. Currently, it uses OpenGL as backend hardware technology but

  others will be added later on, such as Vulkan.


  One very important point is the fact that luminance has nothing to do with

  /3D engines/ or /scene development kits/. Don’t expect to find /materials/,

  /lights/ or /mesh/ loaders. It’s just a graphics framework initiated to fix the

  design choices of OpenGL. It won’t change in any other way. However, as it

  grows, the plan is to make luminance a good graphics framework following the

  Haskell philosophy. In the end, it should be used as-is, not as an OpenGL

  abstraction.


  luminance is a small yet powerful graphics API. It was designed so that

  people can quickly get their feet wet and start having fun with graphics in

  /Haskell/. The main idea is to unleash the graphical and visual properties of

  /GPUs/ in a stateless and type-safe way.


  This library doesn’t expose any architectural patterns or designs. It’s up to

  you to design your program as you want and following your own plans.'
license-name: BSD-3-Clause
