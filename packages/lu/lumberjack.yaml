homepage: https://github.com/GaloisInc/lumberjack
changelog-type: markdown
hash: d17a3804c2231a168cc76a6e0a8123e5564df154fb1bebc16ff777c2cae9c5b9
test-bench-deps: {}
maintainer: kquick@galois.com
synopsis: Trek through your code forest and make logs
changelog: |
  # Revision history for lumberjack

  ## 0.1.0.0 -- 2020-02-13

  * Initial Lumberjack logger implementation, based on internal usage.
basic-deps:
  exceptions: -any
  lumberjack: -any
  base: ! '>=4.12 && <4.16'
  time: -any
  text: -any
  contravariant: -any
  mtl: -any
  prettyprinter: -any
  prettyprinter-ansi-terminal: -any
all-versions:
- 0.1.0.0
author: Kevin Quick
latest: 0.1.0.0
description-type: haddock
description: |-
  This is a logging facility.  Yes, there are many, and this is the one
  with a beard, wearing flannel and boots, that gets the job done.  It's
  not the fanciest, it doesn't have a cargo-van full of features.  This
  logger is designed to be straightforward to use, provide a good set of
  standard features, and be useable across a broad set of code.

  * Logging is a monadic activity.  This activity is most often
  performed in a monad stack with a MonadIO context to allow
  writing to files.

  * The specific logging action implementaions are managed separately
  from the actions of logging messages in the target code.  This
  allows logging to be configurable and the manner of logging to
  be specified at startup time without requiring changes in the
  code from which log messages are being generated.

  * The logging implementation code can use cofunctors to adjust
  existing logging.

  * Main code will typically retrieve the logging actions from a
  Reader context in your monad stack.

  * The prettyprinter package is used for formatting.
license-name: ISC
