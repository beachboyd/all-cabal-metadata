homepage: https://github.com/weldr/bdcs
changelog-type: markdown
hash: ce433e3f6e0067b9e7034e576468dd1add8ed52ae5b15863143c0be6ef6c9892
test-bench-deps:
  conduit-combinators: ! '>=1.1.0 && <1.2'
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.7.2.1 && <2.8.0.0'
  gi-gio: ! '>=2.0.14 && <2.1.0'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.6.0.1 && <2.0'
  persistent: ! '>=2.7.0 && <2.8.0'
  hspec: ==2.*
  text: ! '>=1.2.2.0 && <1.3'
  persistent-template: ! '>=2.5.0 && <2.6.0'
  gi-glib: ! '>=2.0.14 && <2.1.0'
  filepath: ! '>=1.4.1.1 && <1.5.0.0'
  parsec: ! '>=3.1.10 && <3.2.0'
  conduit: ! '>=1.2.8 && <1.3'
  HUnit: ! '>=1.5.0.0 && <1.7.0.0'
  cond: ! '>=0.4.1.1 && <0.5.0.0'
  containers: ! '>=0.5.7.1 && <0.6'
  codec-rpm: ! '>=0.2.0 && <0.3'
  esqueleto: ! '>=2.5.3 && <2.6.0'
  mtl: ! '>=2.2.1 && <2.3'
  monad-logger: ! '>=0.3.20.2 && <0.4.0'
  parsec-numbers: ! '>=0.1.0 && <0.2.0'
  resourcet: ! '>=1.1.9 && <1.2'
  persistent-sqlite: ! '>=2.6.0 && <2.7.0'
  aeson: ! '>=1.0.0.0 && <1.3.0.0'
  directory: ! '>=1.3.0.0 && <1.4.0.0'
maintainer: clumens@redhat.com
synopsis: Tools for managing a content store of software packages
changelog: ! '## 0.1.1


  * Add a new projects function that returns a list of all projects.

  * Projects is now an instance of FromJSON and ToJSON.

  * Fix running cabal commands under Docker.

  * Move where the epoch appears in the output of groupIdToNevra.

  * Add depcloseGroupIds for dependency solving from a list of IDs.

  * Add depcloseNames for dependency solving from a list of package names.

  * Rename depclose to depcloseNEVRAs to make its function clearer.


  ## 0.1.0


  * Initial release.

'
basic-deps:
  regex-pcre: ==0.94.*
  conduit-combinators: ! '>=1.1.0 && <1.2'
  exceptions: ! '>=0.8.0 && <0.9.0'
  bytestring: ==0.10.*
  unix: ! '>=2.7.2.1 && <2.8.0.0'
  gi-gio: ! '>=2.0.14 && <2.1.0'
  split: ! '>=0.2.3 && <0.3'
  xml-conduit: ! '>=1.4.0.4 && <1.8.0'
  base: ! '>=4.9 && <5.0'
  time: ! '>=1.6.0.1 && <2.0'
  aeson-pretty: -any
  persistent: ! '>=2.7.0 && <2.8.0'
  unordered-containers: ! '>=0.2.7.2 && <0.2.9.0'
  text: ! '>=1.2.2.0 && <1.3'
  persistent-template: ! '>=2.5.0 && <2.6.0'
  content-store: ! '>=0.2.0 && <0.3.0'
  gi-glib: ! '>=2.0.14 && <2.1.0'
  monad-loops: ! '>=0.4.0 && <0.5'
  monad-control: ! '>=1.0.1.0 && <1.1.0.0'
  filepath: ! '>=1.4.1.1 && <1.5.0.0'
  gitrev: ! '>=1.3.1 && <1.4.0'
  process: ! '>=1.4.3.0 && <2.0'
  cpio-conduit: ! '>=0.7.0 && <0.8.0'
  parsec: ! '>=3.1.10 && <3.2.0'
  conduit: ! '>=1.2.8 && <1.3'
  bdcs: -any
  cond: ! '>=0.4.1.1 && <0.5.0.0'
  conduit-extra: ! '>=1.1.0 && <1.2'
  memory: ! '>=0.14.3 && <0.15.0'
  gi-ostree: ! '>=1.0.3 && <1.1.0'
  containers: ! '>=0.5.7.1 && <0.6'
  tar-conduit: ! '>=0.1.0 && <0.2.0'
  codec-rpm: ! '>=0.2.0 && <0.3'
  tar: ! '>=0.5 && <0.6'
  cryptonite: ! '>=0.22 && <0.30'
  esqueleto: ! '>=2.5.3 && <2.6.0'
  network-uri: ! '>=2.6.0 && <2.7.0'
  mtl: ! '>=2.2.1 && <2.3'
  monad-logger: ! '>=0.3.20.2 && <0.4.0'
  temporary: ! '>=1.2.0.4 && <1.3.0.0'
  parsec-numbers: ! '>=0.1.0 && <0.2.0'
  http-conduit: ! '>=2.2.3 && <2.3.0'
  resourcet: ! '>=1.1.9 && <1.2'
  persistent-sqlite: ! '>=2.6.0 && <2.7.0'
  aeson: ! '>=1.0.0.0 && <1.3.0.0'
  directory: ! '>=1.3.0.0 && <1.4.0.0'
all-versions:
- '0.1.0'
- '0.1.1'
author: Chris Lumens
latest: '0.1.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/weldr/bdcs.svg?branch=master)](https://travis-ci.org/weldr/bdcs)\n[![Coverage
  Status](https://coveralls.io/repos/github/weldr/bdcs/badge.svg?branch=master)](https://coveralls.io/github/weldr/bdcs?branch=master)\n\nThis
  code generates a metadata database (mddb) given an input directory of\nRPMs.  You
  can generate this either by running locally or running under docker.\nIt's really
  best if you have the RPMs stored locally, too, not under some NFS\nmount or other
  network storage.  That can slow things down quite a bit.\n\nImporting the same set
  of RPMs into the same database twice should result in no\nchanges.  Importing additional
  RPMs into the same database should result in those\nRPMs being added to the existing
  database.  There is currently no provision for\nremoving an imported RPM.  In this
  way, you could import a very large set of\npackages piecemeal if needed.\n\n\nRunning
  locally\n===============\n\nYou will first need a directory full of RPMs somewhere.
  \ Here, I assume that\nis the $PWD/Packages directory.  Then run:\n\n```\n$ cabal
  sandbox init\n$ cabal install --dependencies-only --enable-tests\n$ cabal build\n$
  sqlite3 metadata.db < schema.sql\n$ for f in ${PWD}/Packages/*rpm; do dist/build/bdcs-import/bdcs-import
  metadata.db cs.repo file://${f}; done\n```\n\nRunning with docker\n===================\n\nRunning
  with docker is a two step process, as indicated by Dockerfile.build\nand Dockerfile.
  \ Dockerfile.build is used to compile the program needed to\nbuild an mddb and produces
  an image with that program.  Dockerfile then runs\nthat image and produces the mddb.\n\nThe
  Dockerfile depends on a base image, named weld/fedora:25, which needs have\nbeen
  previously built. If it is not available it can be built from the\nwelder-deployment
  repository by running `make weld-f25`.\n\nThe Makefile lays out the exact steps
  and can be used to simplify all this -\njust run `make importer mddb`.  If make
  is unavailable, just copy the steps\nout of there and run them manually.\n\nYou
  will first need a volume to store the mddb in and a volume containing all\nthe RPMs.
  \ The Makefile expects that the mddb will be put into $PWD/mddb, and\nthat the RPMs
  are in $PWD/rpms.\n\nAfter completion, the mddb will be in $PWD/mddb/metadata.db
  and the ostree\nbased content store will be in $PWD/mddb/cs.repo/\n\nPreparing local
  development environment for Haskell\n===================================================\n\nFor
  development we use the latest upstream versions:\n\n1) Remove the standard `haskell-platform`
  and `ghc-*` RPMs if you have them installed\n2) Download version **8.0.2** of the
  generic Haskell Platform distribution from\n   https://www.haskell.org/platform/linux.html#linux-generic\n3)\n```\n$
  tar -xzvf haskell-platform-8.0.2-unknown-posix--minimal-x86_64.tar.gz\n$ sudo ./install-haskell-platform.sh\n```\n4)
  Add `/usr/local/bin` to your PATH if not already there!\n5) Install build dependencies:\n```\n#
  dnf -y install xz-devel zlib-devel glib2-devel gobject-introspection-devel ostree-devel\n```\n\n**NOTE:**
  On RHEL 7 `ostree-devel` is part of the Atomic Host product!\n\n\nBuilding the project
  locally\n============================\n\n`cabal` is used to install and manage Haskell
  dependencies from upstream.\n\n```\n$ cd src/ && cabal sandbox init && cabal install\n```\n\nExecuting
  unit tests\n====================\n\n    $ cabal sandbox init\n    $ cabal install
  --dependencies-only --enable-tests\n    $ cabal test\n    Running 1 test suites...\n
  \   Test suite tests: RUNNING...\n    Test suite tests: PASS\n    Test suite logged
  to: dist/test/db-0.1.0.0-test-db.log\n    1 of 1 test suites (1 of 1 test cases)
  passed.\n\nProduce code coverage report\n============================\n\n    $ cabal
  sandbox init\n    $ cabal install --enable-tests --enable-coverage\n    $ cabal
  test\n    $ firefox ./dist/hpc/vanilla/tix/*/hpc_index.html\n\nOSTree cheat sheet\n==================\n\nAfter
  importing RPMs (via the `import` executable) the results are a\n`metadata.db` SQL
  database and a `cs.repo` directory containing an\nOSTree repository. Here are a
  few quick examples how to work with `ostree`:\n\n\nTo see what references aka \"branches\"
  are in the repo:\n\n    ostree --repo=cs.repo/ refs\n    master\n\n\nTo see the
  commit log (use `less` because ostree doesn't paginate like git):\n\n    ostree
  --repo=cs.repo/ log master\n    commit 816b63ab93a7a866d598c552f212c3a407648096521fde74cc9aa317730da8b1\n
  \   Date:  2017-07-03 16:32:39 +0000\n    \n        Import of zsh-html into the
  repo\n    \n    commit f3d66bf3b40e269eac7ed62b6d6f7afdeb5059b17e1b8737aec8b52a03ea82c6\n
  \   Date:  2017-07-03 16:32:38 +0000\n    \n        Import of zsh into the repo\n
  \   \n    commit e370924c48e5b759c05d61b1c4960d96366a91e46eb7449a47c5064986029e50\n
  \   Date:  2017-07-03 16:32:35 +0000\n    \n        Import of yum-rhn-plugin into
  the repo\n\nTo find out the latest commit at `master`:\n\n    ostree --repo=cs.repo/
  rev-parse master\n    816b63ab93a7a866d598c552f212c3a407648096521fde74cc9aa317730da8b1\n\nTo
  see what files are inside a particular commit:\n\n    ostree --repo=cs.repo/ ls
  -RC 816b63ab93a7a866d598c552f212c3a407648096521fde74cc9aa317730da8b1\n    d00755
  0 0      0 30bdab0c9a4156b26a923831f0e1c6ba6141c0a8e35c61f30e8febffe7f78de0 446a0ef11b7cc167f3b603e585c7eeeeb675faa412d5ec73f62988eb0b6c5488
  /\n    d00755 0 0      0 eeae4a3c7450b786b3d9a6958ef2195c99c1867c2040d9153395e13f38b1ca7b
  446a0ef11b7cc167f3b603e585c7eeeeb675faa412d5ec73f62988eb0b6c5488 /usr\n    d00755
  0 0      0 0e1e668a21df0ef296e0a7287509b9bac8ae2a03bf6849954b3d0ef905b0cd9a 446a0ef11b7cc167f3b603e585c7eeeeb675faa412d5ec73f62988eb0b6c5488
  /usr/share\n    d00755 0 0      0 d5c72afb0dc8197bba6249a8cdfcf155eed0e1d8bf3d3bd02a4e53f3d8c42b37
  446a0ef11b7cc167f3b603e585c7eeeeb675faa412d5ec73f62988eb0b6c5488 /usr/share/doc\n
  \   d00755 0 0      0 58efea079328274a2845195529729b190b31b06cc16b5f31c2dc1e2f88825563
  446a0ef11b7cc167f3b603e585c7eeeeb675faa412d5ec73f62988eb0b6c5488 /usr/share/doc/zsh-html-5.0.2\n
  \   -00644 0 0   1724 6c691ad9ce0f053823e3fe34795d911170bac0f78f9231389c2e9e2e1271f73a
  /usr/share/doc/zsh-html-5.0.2/Aliasing.html\n    -00644 0 0   1892 835ffd08dba662f47c7eb3164ae76aa5903363c63d3d606268c0ba928b725e6e
  /usr/share/doc/zsh-html-5.0.2/Alternate-Forms-For-Complex-Commands.html\n    -00644
  0 0   1830 59184f18d807a6b9fc963b709ef82dba4d00f536388935aa79b74160fe90cbfe /usr/share/doc/zsh-html-5.0.2/Alternative-Completion.html\n
  \   -00644 0 0   1734 b1bd5813c780a0862843fd3f468021c9358f5852c8a2029cb6857fb64dd2aed1
  /usr/share/doc/zsh-html-5.0.2/Arguments.html\n    -00644 0 0  17635 89309b924ef3874172c73bab3c45eab56da0b847d6328dc387e0e1c5b3dfa633
  /usr/share/doc/zsh-html-5.0.2/Arithmetic-Evaluation.html\n\n**NOTE:** `-R` means
  recursive, `-C` displays file checksums\n\nTo check out aka export a commit into
  a filesystem tree:\n\n    sudo ostree --repo=cs.repo/ checkout 816b63ab93a7a866d598c552f212c3a407648096521fde74cc9aa317730da8b1
  some.dir/\n"
license-name: LGPL
