homepage: https://github.com/weldr/bdcs
changelog-type: markdown
hash: 0df6d296cd0b6e2ca9d9433a8f6af880f1d61405ca40152811701155eeee2608
test-bench-deps:
  conduit-combinators: ! '>=1.1.0 && <1.2'
  bytestring: ! '>=0.10 && <0.11'
  unix: ! '>=2.7.2.1 && <2.8.0.0'
  gi-gio: ! '>=2.0.14 && <2.1.0'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.6.0.1 && <2.0'
  persistent: ! '>=2.7.0 && <2.8.0'
  hspec: ==2.*
  text: ! '>=1.2.2.0 && <1.3'
  persistent-template: ! '>=2.5.0 && <2.6.0'
  gi-glib: ! '>=2.0.14 && <2.1.0'
  filepath: ! '>=1.4.1.1 && <1.5.0.0'
  parsec: ! '>=3.1.10 && <3.2.0'
  conduit: ! '>=1.2.8 && <1.3'
  HUnit: ! '>=1.5.0.0 && <1.7.0.0'
  cond: ! '>=0.4.1.1 && <0.5.0.0'
  containers: ! '>=0.5.7.1 && <0.6'
  codec-rpm: ! '>=0.2.1 && <0.3'
  esqueleto: ! '>=2.5.3 && <2.6.0'
  mtl: ! '>=2.2.1 && <2.3'
  monad-logger: ! '>=0.3.20.2 && <0.3.28.2'
  parsec-numbers: ! '>=0.1.0 && <0.2.0'
  listsafe: ! '>=0.1.0.1 && <0.2.0'
  resourcet: ! '>=1.1.9 && <1.2'
  persistent-sqlite: ! '>=2.6.0 && <2.7.0'
  aeson: ! '>=1.0.0.0 && <1.3.0.0'
  directory: ! '>=1.3.0.0 && <1.4.0.0'
maintainer: clumens@redhat.com
synopsis: Tools for managing a content store of software packages
changelog: ! "## 0.2.2\n\n* Add BDCS.CS.fileToObjectC, which, when used as part of
  a conduit, fetches\n  the data for a single file from a ContentStore.\n* Add BDCS.Export.Customize,
  which provides types and functions for modifying\n  the data exported from a ContentStore.\n*
  Add BDCS.Export.exportAndCustomize, which includes Customization data in an\n  export.\n*
  Include schema.sql in the data-files.\n* Bug fixes related to FSTree and symlinks.\n\n##
  0.2.1\n\n* Add BDCS.Export.export, which is the bulk of the \"bdcs export\" command\n
  \ but in function form.\n* Add BDCS.Exports.Utils.supportedOutputs, which returns
  a list of supported\n  output formats.\n* Ignore Enhances, Suggests, Recommends,
  and Supplements weak requirements\n  during dependency solving.\n* Many test-related
  updates.\n* Allow building with conduit-extra-1.2.\n* Many docker-related build
  updates.\n* Support building with cabal-2.0.\n\n## 0.2.0\n\n* Add a module for building
  virtual filesystem trees.\n* Remove use of partial functions.\n* baseURI now returns
  a Maybe.\n* getDbVersion now throws an error if there's no version in the database.\n*
  Add a BadName exception that can be thrown by mkProject.\n\n## 0.1.1\n\n* Add a
  new projects function that returns a list of all projects.\n* Projects is now an
  instance of FromJSON and ToJSON.\n* Fix running cabal commands under Docker.\n*
  Move where the epoch appears in the output of groupIdToNevra.\n* Add depcloseGroupIds
  for dependency solving from a list of IDs.\n* Add depcloseNames for dependency solving
  from a list of package names.\n* Rename depclose to depcloseNEVRAs to make its function
  clearer.\n\n## 0.1.0\n\n* Initial release.\n"
basic-deps:
  regex-pcre: ==0.94.*
  conduit-combinators: ! '>=1.1.0 && <1.2'
  exceptions: ! '>=0.8.0 && <0.11.0'
  bytestring: ==0.10.*
  unix: ! '>=2.7.2.1 && <2.8.0.0'
  gi-gio: ! '>=2.0.14 && <2.1.0'
  split: ! '>=0.2.3 && <0.3'
  xml-conduit: ! '>=1.4.0.4 && <1.8.0'
  base: ! '>=4.9 && <5.0'
  time: ! '>=1.6.0.1 && <2.0'
  aeson-pretty: -any
  persistent: ! '>=2.7.0 && <2.8.0'
  unordered-containers: ! '>=0.2.7.2 && <0.2.9.0'
  text: ! '>=1.2.2.0 && <1.3'
  persistent-template: ! '>=2.5.0 && <2.6.0'
  content-store: ! '>=0.2.1 && <0.3.0'
  gi-glib: ! '>=2.0.14 && <2.1.0'
  monad-loops: ! '>=0.4.0 && <0.5'
  monad-control: ! '>=1.0.1.0 && <1.1.0.0'
  filepath: ! '>=1.4.1.1 && <1.5.0.0'
  gitrev: ! '>=1.3.1 && <1.4.0'
  process: ! '>=1.4.3.0 && <2.0'
  cpio-conduit: ! '>=0.7.0 && <0.8.0'
  parsec: ! '>=3.1.10 && <3.2.0'
  conduit: ! '>=1.2.8 && <1.3'
  bdcs: -any
  cond: ! '>=0.4.1.1 && <0.5.0.0'
  conduit-extra: ! '>=1.1.0 && <1.3'
  memory: ! '>=0.14.3 && <0.15.0'
  gi-ostree: ! '>=1.0.3 && <1.1.0'
  containers: ! '>=0.5.7.1 && <0.6'
  tar-conduit: ! '>=0.1.0 && <0.2.0'
  codec-rpm: ! '>=0.2.1 && <0.3'
  tar: ! '>=0.5 && <0.6'
  cryptonite: ! '>=0.22 && <0.30'
  esqueleto: ! '>=2.5.3 && <2.6.0'
  network-uri: ! '>=2.6.0 && <2.7.0'
  mtl: ! '>=2.2.1 && <2.3'
  monad-logger: ! '>=0.3.20.2 && <0.3.28.2'
  temporary: ! '>=1.2.0.4 && <1.3.0.0'
  parsec-numbers: ! '>=0.1.0 && <0.2.0'
  listsafe: ! '>=0.1.0.1 && <0.2.0'
  http-conduit: ! '>=2.2.3 && <2.3.0'
  resourcet: ! '>=1.1.9 && <1.2'
  persistent-sqlite: ! '>=2.6.0 && <2.7.0'
  aeson: ! '>=1.0.0.0 && <1.3.0.0'
  directory: ! '>=1.3.0.0 && <1.4.0.0'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
author: Chris Lumens
latest: '0.2.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/weldr/bdcs.svg?branch=master)](https://travis-ci.org/weldr/bdcs)\n[![Coverage
  Status](https://coveralls.io/repos/github/weldr/bdcs/badge.svg?branch=master)](https://coveralls.io/github/weldr/bdcs?branch=master)\n\nThis
  code generates a metadata database (mddb) given an input directory of\nRPMs.  You
  can generate this either by running locally or running under docker.\nIt's really
  best if you have the RPMs stored locally, too, not under some NFS\nmount or other
  network storage.  That can slow things down quite a bit.\n\nImporting the same set
  of RPMs into the same database twice should result in no\nchanges.  Importing additional
  RPMs into the same database should result in those\nRPMs being added to the existing
  database.  There is currently no provision for\nremoving an imported RPM.  In this
  way, you could import a very large set of\npackages piecemeal if needed.\n\n\nRunning
  locally\n===============\n\nYou will first need a directory full of RPMs somewhere.
  \ Here, I assume that\nis the $PWD/Packages directory.  Then run:\n\n```\n$ cabal
  sandbox init\n$ cabal install --dependencies-only --enable-tests\n$ cabal build\n$
  sqlite3 metadata.db < schema.sql\n$ for f in ${PWD}/Packages/*rpm; do dist/build/bdcs-import/bdcs-import
  metadata.db cs.repo file://${f}; done\n```\n\nRunning with docker\n===================\n\nRunning
  with docker is a two step process, as indicated by Dockerfile.build\nand Dockerfile.
  \ Dockerfile.build is used to compile the program needed to\nbuild an mddb and produces
  an image with that program.  Dockerfile then runs\nthat image and produces the mddb.\n\nThe
  Dockerfile depends on a base image, named welder/fedora:latest, which needs have\nbeen
  previously built. If it is not available it can be built from the\nwelder-deployment
  repository by running `make weld-fedora`.\n\nThe Makefile lays out the exact steps
  and can be used to simplify all this -\njust run `make importer mddb`.  If make
  is unavailable, just copy the steps\nout of there and run them manually.\n\nThe
  Makefile expects that the RPMs are in $PWD/rpms.\n\nAfter completion, the mddb and
  content store will be in a bdcs-mddb-volume\ndocker volume.\n\nPreparing local development
  environment for Haskell\n===================================================\n\nFor
  development we use the latest upstream versions:\n\n1) Remove the standard `haskell-platform`
  and `ghc-*` RPMs if you have them installed\n2) Download version **8.0.2** of the
  generic Haskell Platform distribution from\n   https://www.haskell.org/platform/linux.html#linux-generic\n3)\n```\n$
  tar -xzvf haskell-platform-8.0.2-unknown-posix--minimal-x86_64.tar.gz\n$ sudo ./install-haskell-platform.sh\n```\n4)
  Add `/usr/local/bin` to your PATH if not already there!\n5) Install build dependencies:\n```\n#
  dnf -y install xz-devel zlib-devel glib2-devel gobject-introspection-devel ostree-devel\n```\n\n**NOTE:**
  On RHEL 7 `ostree-devel` is part of the Atomic Host product!\n\n\nBuilding the project
  locally\n============================\n\n`cabal` is used to install and manage Haskell
  dependencies from upstream.\n\n```\n$ cd src/ && cabal sandbox init && cabal install\n```\n\nExecuting
  unit tests\n====================\n\n    $ cabal sandbox init\n    $ cabal install
  --dependencies-only --enable-tests\n    $ cabal test\n    Running 1 test suites...\n
  \   Test suite tests: RUNNING...\n    Test suite tests: PASS\n    Test suite logged
  to: dist/test/db-0.1.0.0-test-db.log\n    1 of 1 test suites (1 of 1 test cases)
  passed.\n\nProduce code coverage report\n============================\n\n    $ cabal
  sandbox init\n    $ cabal install --enable-tests --enable-coverage\n    $ cabal
  test\n    $ firefox ./dist/hpc/vanilla/tix/*/hpc_index.html\n"
license-name: LGPL-2.1
