homepage: ''
changelog-type: markdown
hash: df9d5e8fad4785313e6c1a59a2fe54852f3a286d53264abec24c750e657bc938
test-bench-deps:
  PyF: -any
  base: -any
  hspec: -any
  text: -any
  process: -any
  formatting: -any
  template-haskell: -any
maintainer: guillaum.bouchard@gmail.com
synopsis: Quasiquotations for a python like interpolated string formater
changelog: ! '# Revision history for FormatStringLiteral

  ## 0.5.0.0 -- 2018-04-16


  - Support for negative zero

  - Support for 0 modifier

  - Exponential formatter now behaves as python

  - Support for alternate floatting point represenation

  - Lot of documentation

  - Test are auto verified with the python reference implementation


  ## 0.4.0.0 -- 2018-04-13


  - Support for grouping option

  - Support for inner allignment

  - Correct display of NaN and Infinity

  - Fix a few cosmetic with python implementation

  - Introduce `PyF.Formatters`, type safe generic number formatter solution

  - Remove dependency to `scientific`



  ## 0.3.0.0 -- 2018-04-01


  * Support for haskell subexpression


  ## 0.1.1.0  -- 2018-01-07


  * Add support for the `sign` field.


  ## 0.1.0.0  -- 2018-01-03


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.9 && <5.0'
  text: ! '>=0.11 && <1.3'
  megaparsec: ! '>=6.0 && <6.5'
  containers: ! '>=0.5 && <0.6'
  formatting: ! '>=6.2 && <6.4'
  haskell-src-meta: -any
  template-haskell: ! '>=2.11 && <2.13'
all-versions:
- '0.5.0.0'
author: Guillaume Bouchard
latest: '0.5.0.0'
description-type: markdown
description: ! "*PyF* is a Haskell library for string interpolation and formatting.\n\n*PyF*
  exposes a quasiquoter `f` for the [Formatting](https://hackage.haskell.org/package/formatting)
  library. The quasiquotation introduces string interpolation and formatting with
  a mini language inspired from printf and Python.\n\n# Quick Start\n\nThe following
  *Formatting* example:\n\n```haskell\n>>> import Formatting\n\n>>> name = \"Dave\"\n>>>
  age = 54\n\n>>> format (\"Person's name is \" % text % \", age is \" % hex) name
  age\n\"Person's name is Dave, age is 36\"\n```\n\ncan be written as:\n\n```haskell\n>>>
  import Formatting\n>>> import PyF\n\n>>> name = \"Dave\"\n>>> age = 54\n\n>>> format
  [f|Person's name is {name}, age is {age:x}|]\n\"Person's name is Dave, age is 36\"\n```\n\nThe
  formatting mini language can represent:\n\n- Numbers with different representations
  (fixed point, general representation, binary, hexadecimal, octal)\n- Padding, with
  the choice of padding char, alignment (left, right, around, between sign and number)\n-
  Sign handling, to display or not the `+` for positive number\n- Number grouping\n-
  Floating point representation\n- The interpolated value can be any Haskell expression\n\nYou
  will need the extension `QuasiQuotes`, enable it with `{-# LANGUAGE QuasiQuotes
  #-}` in top of your source file or with `:set -XQuasiQuotes` in your `ghci` session.\n\nExpression
  to be formatted are referenced by `{expression:formatingOptions}` where `formatingOptions`
  follows the [Python format mini-language](https://docs.python.org/3/library/string.html#formatspec).
  It is recommended to read the python documentation, but the [Test file](https://github.com/guibou/PyF/blob/master/test/Spec.hs)
  as well as this readme contain many examples.\n\n# More Examples\n\n## Padding\n\nLeft
  `<` / Right `>` / Around `^` padding:\n\n```haskell\n>>> name = \"Guillaume\"\n>>>
  format [f|{name:<11}|]\n\"Guillaume  \"\n>>> format [f|{name:>11}|]\n\"  Guillaume\"\n>>>
  format [f|{name:|^13}|]\n\"||Guillaume||\"\n```\n\nPadding inside `=` the sign:\n\n```haskell\n>>>
  [fString|{-pi:=10.3}|]\n\"-    3.142\"\n```\n\n## Float rounding\n\n```haskell\n>>>
  format [f|{pi:.2}|]\n\"3.14\"\n```\n\n## Binary / Octal / Hex representation (with
  or without prefix)\n\n```haskell\n>>> v = 31\n>>> format [f|Binary: {v:#b}|]\n\"Binary:
  0b11111\"\n>>> format [f|Octal (no prefix): {age:o}|]\n\"Octal (no prefix): 37\"\n>>>
  format [f|Hexa (caps and prefix): {age:#X}|]\n\"Hexa (caps and prefix): 0x1F\"\n```\n\n##
  Grouping\n\nUsing `,` or `_`.\n\n```haskell\n>>> [fString|{10 ^ 9 - 1:,}|]\n\"999,999,999\"\n>>>
  [fString|{2 ^ 32  -1:_b}|]\n\"1111_1111_1111_1111_1111_1111_1111_1111\"\n```\n\n##
  Sign handling\n\nUsing `+` to display the positive sign (if any) or ` ` to display
  a space instead:\n\n```haskell\n>>> [fString|{pi:+.3}|]\n\"+3.142\"\n>>> [fString|{pi:
  .3}|]\n\" 3.142\"\n```\n\n## 0\n\nPreceding the width with a `0` enables sign-aware
  zero-padding, this is equivalent to inside `=` padding with a fill char of `0`.\n\n```haskell\n>>>
  [fString{-10:010}|]\n-000000010\n```\n\n## Sub-expressions\n\nFirst argument inside
  the curly braces can be a valid Haskell expression, for example:\n\n```haskell\n>>>
  format [f|2pi = {2* pi:.2}|]\n6.28\n>>> format [f|tail \"hello\" = {tail \"hello\":->6}|]\n\"tail
  \\\"hello\\\" = --ello\"\n```\n\nHowever the expression must not contain `}` or
  `:` characters.\n\n## Combined\n\nMost options can be combined. This generally leads
  to totally unreadable format string ;)\n\n```haskell\n>>> format [f|{pi:~>5.2}|]\n\"~~3.14\"\n```\n\n#
  Other quasiquoters\n\n*PyF* main entry point is `f` but for convenience some other
  quasiquoters are provided:\n\n- `f(StrictText|LazyText|String|Builder|IO)` directly
  call the underlying `Formatting` runner and produce the specified type.\n- `f'`
  use type inference to deduce the type.\n\n`PyF` reexport most of `Formatting` runners,
  such as `format`, `sformat`, `formatToString`, ...\n\nFor example:\n\n```haskell\n>>>
  [f'|hello {pi.2}|] :: String\n\"hello 3.14\"\n>>> :type [fString|hello|]\n[Char]\n```\n\n#
  Caveats\n\n## Type inference\n\nType inference with numeric literals can be unreliable
  if your variables are too polymorphic. A type annotation or the extension `ExtendedDefaultRules`
  will help.\n\n```haskell\n>>> v = 10 :: Double\n>>> [f|A float: {v}|]\nA float:
  10\n```\n\n## Error reporting\n\nTemplate haskell is generally known to give developers
  a lot of\nfrustration when it comes to error message, dumping an unreadable\npiece
  of generated code.\n\nHowever, in PyF, we took great care to provide clear error
  reporting, this means that:\n\n- Any parsing error on the mini language results
  in a clear indication of the error, for example:\n\n```haskell\n>>> [f|{age:.3d}|]\n\n<interactive>:77:4:
  error:\n    • <interactive>:1:8:\n  |\n1 | {age:.3d}\n  |        ^\nType incompatible
  with precision (.3), use any of {'e', 'E', 'f', 'F', 'g', 'G', 'n', 's', '%'} or
  remove the precision field.\n```\n\n- Error in variable name are also readable:\n\n```haskell\n>>>
  [f|{toto}|]\n<interactive>:78:4: error: Variable not in scope: toto\n```\n\n- However,
  if the interpolated name is not of a compatible type (or\n  too polymorphic), you
  will get an awful error:\n\n```haskell\n>>*> [fString|{True:d}|]\n\n<interactive>:80:10:
  error:\n    • No instance for (Integral Bool)\n        arising from a use of ‘PyF.Internal.QQ.formatAnyIntegral’\n...\n```\n\n-
  There is also one class of error related to alignement which can be triggered, when
  using alignement inside sign (i.e. `=`) with string. This can fail in two flavors:\n\n```haskell\n>>>
  [fString|{\"hello\":=10s}|]\n\n<interactive>:88:1: error:\n    • Exception when
  trying to run compile-time code:\n        String Cannot be aligned with the inside
  `=` mode\nCallStack (from HasCallStack):\n  error, called at src/PyF/Internal/QQ.hs:143:18
  in PyF-0.4.0.0-inplace:PyF.Internal.QQ\n      Code: quoteExp fString \"{\\\"hello\\\":=10s}\"\n
  \   • In the quasi-quotation: [fString|{\"hello\":=10s}|]\n```\n\nAnd\n\n```haskell\n*PyF
  PyF.Internal.QQ> [fString|{\"hello\":=10}|]\n\n<interactive>:89:10: error:\n    •
  String Cannot be aligned with the inside `=` mode\n...\n```\n\n- Finally, if you
  make any type error inside the expression field, you are on your own:\n\n```haskell\n>>>
  [fString|{3 + pi + \"hello\":10}|]\n\n<interactive>:99:10: error:\n    • No instance
  for (Floating [Char]) arising from a use of ‘pi’\n    ...\n```\n\n## Difference
  with the Python Syntax\n\nThe implementation is unit-tested against the reference
  python implementation (python 3.6.4) and should match its result. However some formatters
  are not supported or some (minor) differences can be observed.\n\n### Not supported\n\n-
  Number `n` formatter is not supported. In python this formatter can format a number
  and use current locale information for decimal part and thousand separator. There
  is no plan to support that because of the impure interface needed to read the locale.\n-
  Python support sub variables in the formatting options, such as `{varname:.{precision}}`,
  we should too. However should we accept `String` parameter (such as `<`), with a
  possible runtime error, or should we use the `ADT` such as `AlignRight`?\n- Python
  literal integers accepts binary/octal/hexa/decimal literals, PyF only accept decimal
  ones, hdece in to plan to support that, if you really need to format a float with
  a number of digit provided as a binary constant, open an issue.\n- Python support
  adding custom formatters for new types, such as date. This may be really cool, for
  example `[f|{today:%Y-%M-%D}`. I don't know how to support that now.\n\n### Difference\n\n-
  General formatters *g* and *G* behaves a bit differently. Precision influence the
  number of significant digits instead of the number of the magnitude at which the
  representation changes between fixed and exponential.\n- Grouping options allows
  grouping with an `_` for floating point, python only allows `,`.\n\n# Build / test\n\nShould
  work with `stack build; stack test`, and with `cabal` and (optionally) `nix`:\n\n```shell\nnix-shell
  # Optional, if you use nix\ncabal new-build\ncabal new-test\n```\n\n# TODO\n\n-
  Improve the error reporting with more Parsec annotation\n- Improve the parser for
  sub-expression (handle the `:` and `}` cases if possible).\n- Allow extension to
  others type / custom formatters (for date for example)\n- Improve code quality.
  This code is really ugly, but there is a really strong test suite so, well.\n- Work
  on performance, do we really care? For now, everything is internally done with `String`.\n\n#
  Library note\n\n`PyF.Formatters` exposes two functions to format numbers. They are
  type-safe (as much as possible) and comes with a combination of formatting options
  not seen in other formatting libraries:\n\n```haskell\n>>> formatIntegral Binary
  Plus (Just (20, AlignInside, '~')) (Just (4, ',')) 255\n\"+~~~~~~~~~~1111,1111\"\n```\n\n#
  Conclusion\n\nDon't hesitate to make any suggestion, I'll be more than happy to
  work on it.\n\n"
license-name: BSD3
