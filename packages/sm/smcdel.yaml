homepage: https://github.com/jrclogic/SMCDEL#readme
changelog-type: markdown
hash: d6701be640afdae1cd46b88b22cebd3b4bf3ec807c65563e3e32f2b5f47aba77
test-bench-deps:
  base: ! '>=4.8 && <5'
  time: -any
  hspec: -any
  criterion: -any
  containers: -any
  smcdel: -any
  QuickCheck: -any
maintainer: Malvin Gattinger <malvin@w4eg.eu>
synopsis: Symbolic Model Checking for Dynamic Epistemic Logic
changelog: |
  # SMCDEL Changelog

  ## upcoming

  ...


  ## v1.1.0 (2019-12-09)

  New:

  - minimization under bisimulation
  - dynamic operators in formulas via `Data.Dynamic`
  - multipointed models, action models, structures and events
  - added Cheryl's Birthday and Cheryl's Age examples
  - experimental functions for epistemic planning (with small examples)
  - more instances for QuickCheck, more tests
  - add S5 to K conversion in `SMCDEL.Translations.Convert`
  - improvements to the web interface

  Changed:

  - polymorphic `update` replaces `productUpdate`, `transform`, `pubAnnounce` etc.
  - factual change by default: merge `Symbolic.S5.Change` into `Symbolic.S5` etc.
  - remove changeprops in (Kn)Trf to avoid redundancy with changelaw
  - move BDD related functions to HasCacBDD (`substit`, `substitSimul`)
  - avoid `Data.Map` in S5 modules, no longer depend on `lens`
  - replace `.cabal` file with a `package.yml` for `hpack`


  ## v1.0.0  (2018-02-26)

  New:

  - action models and transformers with factual change
  - NonS5 modules, now called K, are no longer experimental
  - separate types State and World
  - automated testing and benchmarks
  - lots of bugfixes

  Removed:

  - removed support for robbed, NooBDD and Z3
  - old Example files


  ## v0.2  (2015-11-17)

  First release with a standalone-executable.


  ## v0.1  (2015-09-21)

  The first public version of SMCDEL. Note that this version does not contain a
  stand-alone executable. It can only be used as a Haskell library.
basic-deps:
  base: ! '>=4.8 && <5'
  time: -any
  text: -any
  filepath: -any
  process: -any
  cudd: ==0.1.0.0
  array: -any
  graphviz: -any
  HasCacBDD: ! '>=0.1.0.1 && <0.2'
  tagged: -any
  containers: -any
  js-jquery: ! '>=3'
  ansi-terminal: -any
  smcdel: -any
  file-embed: -any
  temporary: -any
  QuickCheck: -any
  scotty: -any
  template-haskell: -any
  directory: -any
all-versions:
- 1.0.0
- 1.1.0
author: ''
latest: 1.1.0
description-type: markdown
description: |
  # SMCDEL

  [![Release](https://img.shields.io/github/release/jrclogic/SMCDEL.svg)](https://github.com/jrclogic/SMCDEL/releases)
  [![Hackage](https://img.shields.io/hackage/v/smcdel.svg)](https://hackage.haskell.org/package/smcdel)
  [![Build Status](https://api.travis-ci.org/jrclogic/SMCDEL.svg?branch=master)](https://travis-ci.org/jrclogic/SMCDEL)
  [![DOI](https://zenodo.org/badge/36519077.svg)](https://zenodo.org/badge/latestdoi/36519077)

  A symbolic model checker for [Dynamic Epistemic Logic](https://plato.stanford.edu/entries/dynamic-epistemic).

  You can find a complete literate Haskell documentation in the file
  [SMCDEL.pdf](https://github.com/jrclogic/SMCDEL/raw/master/SMCDEL.pdf).

  ## References

  [Johan van Benthem, Jan van Eijck, Malvin Gattinger, and Kaile Su:
  *Symbolic Model Checking for Dynamic Epistemic Logic.*
  In: Proceedings of The Fifth International Conference on Logic, Rationality and Interaction (LORI-V),
  2015](https://doi.org/10.1007/978-3-662-48561-3_30).

  [Johan van Benthem, Jan van Eijck, Malvin Gattinger, and Kaile Su:
  *Symbolic Model Checking for Dynamic Epistemic Logic --- S5 and Beyond.*
  Journal of Logic and Computation,
  2017](https://pure.uva.nl/ws/files/25483686/2016_05_23_del_bdd_lori_journal.pd.pdf).

  [Malvin Gattinger:
  *Towards Symbolic Factual Change in DEL.*
  ESSLLI 2017 student session,
  2017](https://w4eg.de/malvin/illc/2017-07-symbolicfactualchange.pdf).

  [Malvin Gattinger:
  *New Directions in Model Checking Dynamic Epistemic Logic.*
  PhD thesis, ILLC, Amsterdam,
  2018](https://malv.in/phdthesis/).

  ## Online

  You can try SMCDEL online here: https://w4eg.de/malvin/illc/smcdelweb/


  ## Dependencies

  - [graphviz](https://graphviz.org/)
  - [dot2tex](https://github.com/kjellmf/dot2tex)

  On Debian, just do `sudo apt install graphviz dot2tex`.


  ## Basic usage

  1) Use *stack* from https://www.stackage.org

  - `stack build` will compile everything. This might fail if one of
    the BDD packages written in C and C++ is missing. In this case,
    install those manually and then try `stack build` again.

  - `stack install` will put two executables `smcdel` and `smcdel-web`
    into ~/.local/bin which should be in your `PATH` variable.

  2) Create a text file `MuddyShort.smcdel.txt` which describes the knowledge structure and the formulas you want to check for truth or validity:

      ```
      -- Three Muddy Children in SMCDEL
      VARS 1,2,3
      LAW  Top
      OBS  alice: 2,3
           bob:   1,3
           carol: 1,2
      WHERE?
        [ ! (1|2|3) ] alice knows whether 1
      VALID?
        [ ! (1|2|3) ]
        [ ! ((~ (alice knows whether 1)) & (~ (bob knows whether 2)) & (~ (carol knows whether 3))) ]
        [ ! ((~ (alice knows whether 1)) & (~ (bob knows whether 2)) & (~ (carol knows whether 3))) ]
        (alice,bob,carol) comknow that (1 & 2 & 3)
      ```

  3) Run `smcdel MuddyShort.smcdel.txt` resulting in:

      ```
      >> smcdel MuddyShort.smcdel.txt
      SMCDEL 1.0 by Malvin Gattinger -- https://github.com/jrclogic/SMCDEL

      At which states is ... true?
      []
      [1]

      Is ... valid on the given structure?
      True
      ```

  More example files are in the folder [Examples](https://github.com/jrclogic/SMCDEL/tree/master/Examples).


  ## Advanced usage

  To deal with more complex models and formulas, use SMCDEL as a Haskell module.

  Examples can be found in the folders
    [src/SMCDEL/Examples](https://github.com/jrclogic/SMCDEL/tree/master/src/SMCDEL/Examples)
  and
    [bench](https://github.com/jrclogic/SMCDEL/tree/master/bench).


  ## Used BDD packages

  SMCDEL can be used with different BDD packages. To compile and
  run the benchmarks you will have to install all of them.

  - [Data.HasCacBDD](https://github.com/m4lvin/HasCacBDD) which runs CacBDD from <http://kailesu.net/CacBDD/>
  - [Cudd](https://github.com/davidcock/cudd) ([with some patches](https://github.com/m4lvin/cudd))
license-name: GPL-2.0-only
