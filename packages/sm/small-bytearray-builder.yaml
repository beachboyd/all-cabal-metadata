homepage: https://github.com/andrewthad/small-bytearray-builder
changelog-type: markdown
hash: b9e00cfb044951f62b864f68cd6576829e73a95121c5c58cc58d105d5948e6c5
test-bench-deps:
  natural-arithmetic: -any
  bytestring: -any
  base: ! '>=4.12.0.0 && <5'
  small-bytearray-builder: -any
  text: ! '>=1.2 && <1.3'
  gauge: ! '>=0.2.4'
  byteslice: -any
  tasty-quickcheck: ! '>=0.10.1 && <0.11'
  tasty-hunit: ! '>=0.10.0.2 && <0.11'
  tasty: ! '>=1.2.3 && <1.3'
  QuickCheck: ! '>=2.13.1 && <2.14'
  primitive: -any
  vector: -any
maintainer: andrew.thaddeus@gmail.com
synopsis: Serialize to a small byte arrays
changelog: |
  # Revision history for small-bytearray-builder

  ## 0.2.0.0 -- 2019-09-04

  * Use `natural-arithmetic` to make manipulation of bounds possible.
  * Add more functions for encoding numbers. This includes
    `word8/16/32/64` and `int8/16/32/64`.
  * Rename the modules.
  * Correct a serious error in the implementation of `bytes`.
  * Make `pasteGrowST` accept an initial offset.
  * Add a `pasteGrowST` for length-indexed builders.
  * Add function for rendering floating-point numbers in a slightly
    inaccurate way.
  * Add functions for encoding `ShortText` as UTF-8 and as a JSON string.

  ## 0.1.1.0 -- 2019-07-30

  * Add several additional functions for encoding numbers.

  ## 0.1.0.0 -- 2019-06-25

  * First version
basic-deps:
  natural-arithmetic: ! '>=0.1 && <0.2'
  bytestring: ! '>=0.10.8.2 && <0.11'
  text-short: ! '>=0.1.3 && <0.2'
  base: ! '>=4.12.0.0 && <5'
  run-st: ! '>=0.1 && <0.2'
  primitive-offset: ! '>=0.2 && <0.3'
  byteslice: ! '>=0.1 && <0.2'
  primitive: ! '>=0.7 && <0.8'
  vector: ! '>=0.12.0.3 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
author: Andrew Martin
latest: 0.2.0.0
description-type: haddock
description: |-
  This is similar to the builder facilities provided by
  `Data.ByteString.Builder`. It is intended to be used in
  situations where the following apply:

  * An individual entity will be serialized as a small
  number of bytes (less than 512).

  * A large number (more than 32) of entities will be serialized
  one after another without anything between them.

  Unlike builders from the `bytestring` package, these builders
  do not track their state when they run out of space. A builder
  that runs out of space simply aborts and is rerun at the beginning
  of the next chunk. This strategy for building is suitable for most
  CSVs and several line protocols (carbon, InfluxDB, etc.).
license-name: BSD-3-Clause
