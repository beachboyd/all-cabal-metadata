homepage: https://github.com/andrewthad/small-bytearray-builder
changelog-type: markdown
hash: ab4de2fbcab863beb84bc52625a6051fce1e161c3a3808c7941bf33f1ca67a9a
test-bench-deps:
  natural-arithmetic: -any
  bytestring: -any
  text-short: -any
  base: ! '>=4.12.0.0 && <5'
  small-bytearray-builder: -any
  text: ! '>=1.2 && <1.3'
  quickcheck-classes: ! '>=0.6.4'
  gauge: ! '>=0.2.4'
  wide-word: ! '>=0.1.0.9 && <0.2'
  byteslice: -any
  tasty-quickcheck: ! '>=0.10.1 && <0.11'
  tasty-hunit: ! '>=0.10.0.2 && <0.11'
  tasty: ! '>=1.2.3 && <1.3'
  QuickCheck: ! '>=2.13.1 && <2.14'
  primitive: -any
  vector: -any
maintainer: andrew.thaddeus@gmail.com
synopsis: Serialize to a small byte arrays
changelog: "# Revision history for small-bytearray-builder\n\n## 0.3.1.0 -- 2019-11-20\n\n*
  Add big-endian and little-endian parsers for `Word128`. This includes\n  both the
  single and multiple element variants.\n* Export `reverseCommitsOntoChunks` from
  the `Unsafe` module.\n* Add `Semigroup` and `Monoid` instances for `Chunks`.\n*
  Add `consLengthLE32`.\n* Add `fromEffect` to the unsafe interface.\n\n## 0.3.0.0
  -- 2019-10-17\n\n* Breaking change: Change the internal implementation of `Builder`.
  This\n  now works a lot more like the builder from `bytestring`. It accumulates\n
  \ chunks and can do a zero-copy appends when working with a sufficiently\n  large
  immutable chunk. This introduces a mild performance regression\n  (around 10%),
  but it makes the libary more generally useful.\n* Introduce `consLengthBE32` and
  `consLength64BE` for efficient serialization\n  of wire protocols that require prefixing
  a payload with its length.\n* Add `int{16,32,64}BE` and `int{16,32,64LE}` as conveniences.\n*
  Add little-endian encoding functions for `Word16`, `Word32`, and `Word64`.\n* Add
  big-endian and little-endian functions for copying a\n  `PrimArray` of numbers (both
  signed and unsigned) into a builder.\n* Add `flush`, `copy`, and `insert` for better
  control when\n  converting byte sequences to builders.\n* Add `shortByteString`
  to improve interoperability with the\n  `bytestring` library. \n\n## 0.2.1.0 --
  2019-09-05\n\n* Stop exporting data constructor in `Data.ByteArray.Builder`.\n  This
  is technically a breaking change, but it was only\n  exported by accident. So, with
  this release, we will technically\n  violate PVP, and the previous release will
  be deprecated on hackage.\n* Add more functions for encoding unsigned words: `word16PaddedLowerHex`,\n
  \ `word16LowerHex`, `word16UpperHex`, `word8LowerHex`.\n* Unroll loop for `word8Dec`.\n\n##
  0.2.0.0 -- 2019-09-04\n\n* Use `natural-arithmetic` to make manipulation of bounds
  possible.\n* Add more functions for encoding numbers. This includes\n  `word8/16/32/64`
  and `int8/16/32/64`.\n* Rename the modules.\n* Correct a serious error in the implementation
  of `bytes`.\n* Make `pasteGrowST` accept an initial offset.\n* Add a `pasteGrowST`
  for length-indexed builders.\n* Add function for rendering floating-point numbers
  in a slightly\n  inaccurate way.\n* Add functions for encoding `ShortText` as UTF-8
  and as a JSON string.\n\n## 0.1.1.0 -- 2019-07-30\n\n* Add several additional functions
  for encoding numbers.\n\n## 0.1.0.0 -- 2019-06-25\n\n* First version\n"
basic-deps:
  natural-arithmetic: ! '>=0.1 && <0.2'
  bytestring: ! '>=0.10.8.2 && <0.11'
  text-short: ! '>=0.1.3 && <0.2'
  base: ! '>=4.12.0.0 && <5'
  run-st: ! '>=0.1 && <0.2'
  primitive-offset: ! '>=0.2 && <0.3'
  wide-word: ! '>=0.1.0.9 && <0.2'
  byteslice: ! '>=0.1 && <0.2'
  primitive: ! '>=0.7 && <0.8'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
author: Andrew Martin
latest: 0.3.1.0
description-type: haddock
description: |-
  This is similar to the builder facilities provided by
  `Data.ByteString.Builder`. It is intended to be used in
  situations where the following apply:

  * An individual entity will be serialized as a small
  number of bytes (less than 512).

  * A large number (more than 32) of entities will be serialized
  one after another without anything between them.

  Unlike builders from the `bytestring` package, these builders
  do not track their state when they run out of space. A builder
  that runs out of space simply aborts and is rerun at the beginning
  of the next chunk. This strategy for building is suitable for most
  CSVs and several line protocols (carbon, InfluxDB, etc.).
license-name: BSD-3-Clause
