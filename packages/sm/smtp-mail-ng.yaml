homepage: https://github.com/avieth/smtp-mail-ng
changelog-type: ''
hash: 0793159aefab72369be8a694427c636ae45595c83684e7161709c845a685457b
test-bench-deps: {}
maintainer: aovieth@gmail.com
synopsis: An SMTP client EDSL
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  haskeline: ! '>=0.7 && <0.8'
  base: ! '>=4.7 && <4.9'
  base64-bytestring: ! '>=1.0 && <1.1'
  text: ! '>=1.2 && <1.3'
  stringsearch: ! '>=0.3.6.5'
  tls: ! '>=1.2 && <1.4'
  filepath: ! '>=1.3 && <1.5'
  network: ! '>=2.6 && <2.7'
  x509-store: ! '>=1.5 && <1.7'
  x509-system: ! '>=1.5 && <1.7'
  mtl: ! '>=2.0 && <2.3'
  crypto-random: ! '>=0.0 && <0.1'
  mime-mail: ! '>=0.4 && <0.5'
  base16-bytestring: ! '>=0.1 && <0.2'
  attoparsec: ! '>=0.12 && <0.14'
  transformers: ! '>=0.2'
  transformers-compat: ! '>=0.3'
  cryptohash: ! '>=0.11 && <0.12'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Alexander Vieth
latest: 0.1.0.2
description-type: markdown
description: ! "SMTP-MAIL-NG\n============\n\nAn SMTP client EDSL. If you want to
  interact with an SMTP server, this library\nmay be able to help you. It even supports
  STARTTLS!\n\nThe star is the SMTP monad, terms of which (thanks to do notation)
  often\nresemble an SMTP session.\n\n### Sending with an SMTP server\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Network.BSD (getHostName)\nimport Network.Mail.SMTP.SMTP\nimport
  Network.Mail.SMTP.SMTPParameters\nimport Network.Mail.SMTP.Types\nimport Network.Mail.SMTP.Auth\nimport
  Network.Mail.SMTP.Send\nimport Network.Mail.Mime\nimport Control.Monad.IO.Class
  (liftIO)\nimport Data.ByteString.Char8 (pack)\n\nmain = smtp smtpParameters $ do\n
  \ hostname <- liftIO getHostName\n  -- Send EHLO and expect a 250\n  command $ EHLO
  (pack hostname)\n  expectCode 250\n  -- Upgrade the connection to TLS\n  -- This
  is a kind of utility term that takes care of sending STARTTLS,\n  -- expecting a
  220, and then upgrading the underlying connection to TLS.\n  startTLS\n  -- Authenticate
  with LOGIN scheme\n  authLogin \"jarndyce@gmail.com\" \"mySuperSecretPassword\"\n
  \ -- Send the message\n  send message\n  -- End the session.\n  -- Closing the connection
  is handled automatically by the function smtp\n  command QUIT\n\n-- We use datatypes
  from the mime-mail package to describe Mail.\nmessage :: Mail\nmessage = simpleMail'
  to from subject body\n  where\n    from = Address (Just \"John Jarndyce\") \"jarndyce@gmail.com\"\n
  \   to = Address (Just \"Harold Skimpole\") \"harold@skimpole.com\"\n    subject
  = \"Hey!\"\n    body = \"It works!\"\n\nsmtpParameters :: SMTPParameters\nsmtpParameters
  = (defaultSMTPParameters \"smtp.googlemail.com\") {\n    smtpVerbose = True\n  }\n```\n\n###
  Moving forward\n\nWe must implement support for more AUTH schemes. Right now all
  that we\nfacilitate is LOGIN, although other methods are possible via the bytes\nterm.\n\nThere
  is an orphan datatype, Response, from before the fork. It may be\ngood to use this
  instead of bare Ints.\n\nIt would be nice to give a convenient interface for simply
  sending some\nmessages, in which the user must supply only a list of Mail values,
  an\nSMTPParameters, and a description of the authentication and encryption\nparameters
  of the mail server.\n\n### Thanks\n\nThis library is forked from Jason Hickner's
  smtp-mail, but it has diverged\nsignificantly and bears little resemblance.\n"
license-name: BSD-3-Clause
