homepage: https://github.com/agrafix/validate-input
changelog-type: ''
hash: 91627dd1b2ddd5c7607039827addb383beee7f868b0169bc934d85100ac8dc61
test-bench-deps:
  base: ! '>=4.6 && <5'
  validate-input: -any
  hspec: ! '>=2.1'
  QuickCheck: ! '>=2.7'
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Input validation combinator library
changelog: ''
basic-deps:
  either: ! '>=4.3 && <5'
  bytestring: ! '>=0.10'
  pcre-heavy: ! '>=1.0'
  base: ! '>=4.6 && <5'
  text: ! '>=1.2'
  semigroups: ! '>=0.16'
  mtl: ! '>=2.1'
  string-conversions: ! '>=0.4'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.4.0.0'
author: Alexander Thiemann <mail@athiemann.net>
latest: '0.4.0.0'
description-type: markdown
description: ! "validate-input\n=====\n\n[![Build Status](https://travis-ci.org/agrafix/validate-input.svg)](https://travis-ci.org/agrafix/validate-input)\n[![Hackage](https://img.shields.io/hackage/v/validate-input.svg)](http://hackage.haskell.org/package/validate-input)\n\n##
  Intro\n\nHackage: [validate-input](http://hackage.haskell.org/package/validate-input)\nStackage:
  [validate-input](https://www.stackage.org/package/validate-input)\n\nInput validation
  combinator library\n\n\n## Library Usage Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE QuasiQuotes #-}\nimport Data.Validator\nimport qualified Data.Text
  as T\n\ndata Example\n   = Example\n   { ex_username :: T.Text\n   , ex_dogs ::
  Int\n   , ex_friendName :: Maybe T.Text\n   } deriving (Show)\n\ndata ExampleChecked\n
  \  = ExampleChecked\n   { exc_username :: T.Text\n   , exc_dogs :: Int\n   , exc_friendName
  :: T.Text\n   } deriving (Show)\n\nmain :: IO ()\nmain =\n    do putStrLn \"Check
  results:\"\n       print example\n\ncheckUsername :: Monad m => ValidationRuleT
  String m T.Text\ncheckUsername =\n    lengthBetween 3 12 \"Should between 3 and
  12 chars\"\n    >=> matchesRegex [re|^[A-za-z0-9]+$|] \"only alpha num\"\n\ncheckNumber
  :: Monad m => ValidationRuleT String m Int\ncheckNumber =\n    smallerThan 5 \"No
  more than 5 dogs allowed\"\n\ncheckExample :: Monad m => TransValidationRuleT String
  m Example ExampleChecked\ncheckExample e =\n    ExampleChecked\n    <$> checkUsername
  (ex_username e)\n    <*> checkNumber (ex_dogs e)\n    <*> requiredValue \"You must
  provide a friend name!\" (ex_friendName e)\n\nexample :: Either String ExampleChecked\nexample
  =\n    runValidator checkExample $\n    Example\n    { ex_username = \"alex\"\n
  \   , ex_dogs = 23\n    , ex_friendName = Nothing\n    }\n\n```\n\n## Install\n\n*
  Using cabal: `cabal install validate-input`\n* Using Stack: `stack install validate-input`\n*
  From Source (cabal): `git clone https://github.com/agrafix/validate-input.git &&
  cd validate-input && cabal install`\n* From Source (stack): `git clone https://github.com/agrafix/validate-input.git
  && cd validate-input && stack build`\n\n\n## Misc\n\n### Supported GHC Versions\n\n*
  7.8.4\n* 7.10.2\n\n### License\n\nReleased under the MIT license.\n(c) 2015 Alexander
  Thiemann\n"
license-name: MIT
