homepage: https://github.com/reygoch/valor#readme
changelog-type: markdown
hash: f303c815a5d9b43e3ca34ddd967c664e0555b590068a7d9238bdcfe6d0aa5e49
test-bench-deps:
  checkers: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  text: -any
  hspec-checkers: -any
  transformers: -any
  QuickCheck: -any
  valor: -any
maintainer: reygoch@gmail.com
synopsis: Simple general structured validation library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  transformers: -any
all-versions:
- '0.0.0.1'
author: Luka Hadžiegrić
latest: '0.0.0.1'
description-type: markdown
description: ! "<p align=\"center\">\r\n\t<img\r\n\t\tsrc=\"valor-logo.svg?sanitize=true\"\r\n\t\talt=\"Valor
  Logo\"\r\n\t\ttitle=\"Valor\"\r\n\t\tstyle=\"max-width:100%;\"\r\n\t>\r\n</p>\r\n\r\n#
  Valor\r\n\r\nGeneral, simple and easy to use structured validation library that
  gives you\r\ncontrol over the error and input types.\r\n\r\n## Motivation\r\n\r\nCurrently
  there are a few validation libraries out there, most notably\r\n[forma][1] and [digestive-functors][2].
  They are acceptable but they are mostly\r\ngeard towards the web. Even with that
  in mind, I find them a bit impractical to\r\nuse so I've decided to make a validation
  library of my own.\r\n\r\nIn no particular order here are the main problems I have
  with them:\r\n\r\n+ They limit what you can validate and what you get as a result
  of that\r\n  validation. [Forma][1] expects a JSON [Value][4] as an input and gives
  you either parsed data as a result or an error in the form of a JSON [Value][4].\r\n\r\n
  \ Additionally, [digestive-functors][2] use a custom result type that you need\r\n
  \ to get familiar with to some extent.\r\n\r\n+ They are essentially parsers, and
  I personally don't like to manually handle \r\n  conversion of JSON fields from
  e.g. string to integers and other data types.\r\n\r\n  Sure, it might be useful
  to tell the user that he entered text instead of a\r\n  number, but in that case
  I'd argue that your submission form is bad.\r\n\r\n  Even in this case, it should
  still be possible to validate plain JSON with \r\n  Valor, but if that is your use
  case I'd recommend you use [forma][1] for that\r\n  since it was specifically designed
  with JSON in mind.\r\n\r\n+ They don't really play well with [servant][3]. Let's
  say that we have a record\r\n  `SomeData`. If we wanted to allow users to submit
  that data to the server we'd\r\n  have something like this :\r\n\r\n  ```haskell\r\n
  \ \"api\" :> ReqBody '[JSON] SomeData :> Post '[JSON] SomeResponse\r\n  ```\r\n\r\n
  \ User would send `SomeData` encoded as JSON to the server, [servant][3] would\r\n
  \ automagically parse it and pass it to the `Handler` for further processing.\r\n\r\n
  \ If we wanted to validate this data with let's say [forma][1] than we would\r\n
  \ have to write something like this:\r\n\r\n  ```haskell\r\n  \"api\" :> ReqBody
  '[JSON] Value :> Post '[JSON] SomeResponse\r\n  ```\r\n\r\n  in which case we lose
  nice semantics from the first example where it is\r\n  obvious what data is being
  sent to the server (or at least what should've been\r\n  sent).\r\n\r\n  Since [servant][3]
  doesn't allow us to declare validation in the type,\r\n  validation always has to
  happen in the `Handler` at which point it is no\r\n  longer in the JSON form and
  library like [forma][1] is not of much use to us\r\n  unless we convert `SomeData`
  to JSON and parse it once again.\r\n\r\n[1]: https://hackage.haskell.org/package/forma\r\n[2]:
  https://hackage.haskell.org/package/digestive-functors\r\n[3]: https://hackage.haskell.org/package/servant\r\n[4]:
  https://hackage.haskell.org/package/aeson-1.4.0.0/docs/Data-Aeson.html#t:Value\r\n"
license-name: MIT
