homepage: https://github.com/reygoch/valor#readme
changelog-type: markdown
hash: d576f5f63ff64854ac5806fe4c8e87324898e79911a82643369381598a7d9490
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  text: -any
  transformers: -any
  valor: -any
maintainer: reygoch@gmail.com
synopsis: Simple general structured validation library
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  transformers: -any
all-versions:
- '0.0.0.1'
- '0.1.0.0'
author: Luka Hadžiegrić
latest: '0.1.0.0'
description-type: markdown
description: ! "![Valor Build Status](https://api.travis-ci.org/reygoch/valor.svg?branch=master)\n[![Valor
  Documentation](https://img.shields.io/badge/hackage-0.1.0.0-blue.svg)](https://hackage.haskell.org/package/valor-0.1.0.0)\n\n#
  Valor\n\nGeneral, simple and easy to use structured validation library that gives
  you\ncontrol over the error and input types.\n\n## Motivation\n\nCurrently there
  are a few validation libraries out there, most notably\n[forma][1] and [digestive-functors][2].
  They are acceptable but they are mostly\ngeard towards the web. Even with that in
  mind, I find them a bit impractical to\nuse so I've decided to make a validation
  library of my own.\n\nIn no particular order here are the main problems I have with
  them:\n\n+ They limit what you can validate and what you get as a result of that\n
  \ validation. [Forma][1] expects a JSON [Value][4] as an input and gives you either
  parsed data as a result or an error in the form of a JSON [Value][4].\n\n  Additionally,
  [digestive-functors][2] use a custom result type that you need\n  to get familiar
  with to some extent.\n\n+ They are essentially parsers, and I personally don't like
  to manually handle \n  conversion of JSON fields from e.g. string to integers and
  other data types.\n\n  Sure, it might be useful to tell the user that he entered
  text instead of a\n  number, but in that case I'd argue that your submission form
  is bad.\n\n  Even in this case, it should still be possible to validate plain JSON
  with \n  Valor, but if that is your use case I'd recommend you use [forma][1] for
  that\n  since it was specifically designed with JSON in mind.\n\n+ They don't really
  play well with [servant][3]. Let's say that we have a record\n  `SomeData`. If we
  wanted to allow users to submit that data to the server we'd\n  have something like
  this :\n\n  ```haskell\n  \"api\" :> ReqBody '[JSON] SomeData :> Post '[JSON] SomeResponse\n
  \ ```\n\n  User would send `SomeData` encoded as JSON to the server, [servant][3]
  would\n  automagically parse it and pass it to the `Handler` for further processing.\n\n
  \ If we wanted to validate this data with let's say [forma][1] than we would\n  have
  to write something like this:\n\n  ```haskell\n  \"api\" :> ReqBody '[JSON] Value
  :> Post '[JSON] SomeResponse\n  ```\n\n  in which case we lose nice semantics from
  the first example where it is\n  obvious what data is being sent to the server (or
  at least what should've been\n  sent).\n\n  Since [servant][3] doesn't allow us
  to declare validation in the type,\n  validation always has to happen in the `Handler`
  at which point it is no\n  longer in the JSON form and library like [forma][1] is
  not of much use to us\n  unless we convert `SomeData` to JSON and parse it once
  again.\n\n---\n\n## Tutorial\n\nBefore we get started, Valor uses `ExceptT` from
  the [transformers][5] package so make sure you add it as a dependency in your project.\n\n###
  Defining  data types\nFirst thing we usually want to do is to define our input data
  and error types.\nWe can define them separately by hand, or if our error and data
  types have the\nsame \"shape\" (same field names) we can use a handy type family
  to help us do\nthem all at once.\n\nLets declare our imports and required language
  extensions:\n\n```haskell\n{-# LANGUAGE FlexibleInstances    #-}\n{-# LANGUAGE StandaloneDeriving
  \  #-}\n{-# LANGUAGE TypeSynonymInstances #-}\n--\nmodule Tutorial where\n--\nimport
  Prelude hiding ( id ) -- just so that we can use id as a field name\n                             --
  without any difficulties\nimport Data.Valor\n\nimport Data.Functor.Identity ( Identity
  (..) )\nimport Control.Monad.Trans.Except ( ExceptT, runExceptT, throwE )\n\nimport
  Data.Text ( Text )\nimport qualified Data.Text as Text\n--\n```\n\nWith that out
  of the way we can start defining our data types. As previously\nstated, we can make
  both data and error types by hand like this (which would\nadditionally require the
  use of `DuplicateRecordField` extension):\n\n```haskell\ndata User = User\n  { username
  :: Text\n  , password :: Text\n  } deriving ( Show )\n\ndata UserError = UserError\n
  \ { username :: Maybe String   -- this field will have only one error\n  , password
  :: Maybe [String] -- this one can have multiple errors\n  } deriving ( Show )\n```\n\nThis
  approach is perfectly valid and much more flexible since it allows you to\nhave
  different fields in data and error type, but if you want your types to\nhave the
  same field names than it might be easier to use `Validatable` type\nfamily to get
  rid of the boilerplate and define them like this:\n\n```haskell\ndata User' a =
  User\n  { email    :: Validatable a String   Text\n  , username :: Validatable a
  [String] Text\n  }\n\ntype User = User' Identity\nderiving instance Show User\n\ntype
  UserError = User' Validate\nderiving instance Show UserError\n```\n\nThis is equivalent
  to the first example, but much more maintainable. With this \napproach we have to
  use `StandaloneDeriving` and `TypeSynonymInstances`\nlanguage extensions to allow
  us instance derivation.\n\nRight, let's define a more complex type now:\n\n```haskell\ndata
  Article' a = Article\n  { id      :: Validatable a String            Int\n  , title
  \  :: Validatable a [String]          Text\n  , content :: Validatable a [String]
  \         Text\n  , tags1   :: Validatable a [Maybe [String]]  [Text] -- Here I
  want to have\n                                                      -- multiple
  errors for a\n                                                      -- single tag
  in a list.\n\n  , tags2   :: Validatable a [Maybe String]    [Text] -- Here I want
  to have\n                                                      -- only one reported\n
  \                                                     -- error per tag. \n  , author
  \ :: Validatable a UserError         User\n  , authors :: Validatable a [Maybe UserError]
  [User]\n  }\n\ntype Article = Article' Identity\nderiving instance Show Article\n\ntype
  ArticleError = Article' Validate\nderiving instance Show ArticleError\n```\n\n`Validatable`
  type family is nothing smart. In fact, it is just a simple type\nlevel function.
  Here is its definition, it should be obvious what it does:\n\n```haskell\ntype family
  Validatable a e x where\n  Validatable Validate e x = Maybe e\n  Validatable Identity
  e x = x\n  Validatable a        e x = a x\n```\n\n### Creating a `Validator`\nOk,
  so now we have seen how `Validatable` type family works, we have defined \ndata
  types that we want to validate and data types that will store our errors.\nBefore
  we start writing our validation rules (`Validator`s) we first need to\nhave some
  tests / checks to run against our field values so let's define some\nsimple ones:\n\n```haskell\nnonover18
  :: Monad m => Int -> ExceptT String m Int\nnonover18 n = if n < 18\n  then throwE
  \"must be greater than 18\"\n  else pure n\n\nnonempty' :: Monad m => Text -> ExceptT
  String m Text\nnonempty' t = if Text.null t\n  then throwE \"can't be empty\"\n
  \ else pure t\n\nnonempty :: Monad m => Text -> ExceptT [String] m Text\nnonempty
  t = if Text.null t\n  then throwE [\"can't be empty\"]\n  else pure t\n\nnonbollocks
  :: Monad m => Text -> ExceptT [String] m Text\nnonbollocks t = if t == \"bollocks\"\n
  \ then throwE [\"can't be bollocks\"]\n  else pure t\n\nnonshort :: Monad m => Text
  -> ExceptT [String] m Text\nnonshort t = if Text.length t < 10\n  then throwE [\"too
  short\"]\n  else pure t\n```\n\nHere the `ExceptT` transformer is used because it
  allows you to use your own\nmonad in case you need to access the database to validate
  some data. This is\nalso handy in case your test depends on the success or failure
  of some other\nfield value. In that case you can use the `State` monad or transformer
  to pass\nin the full data being validated instead of just a current field value.\n\nWith
  that out of our way we can start writing our 'Validator's:\n\n```haskell\nuserValidator
  :: Monad m => Validator User m UserError\nuserValidator = User\n  <$> check  email
  nonempty'\n  <*> checks username [nonempty, nonbollocks, nonshort]\n\narticleValidator
  :: Monad m => Validator Article m ArticleError\narticleValidator = Article\n  <$>
  check           id      nonover18\n  <*> checks          title   [nonempty, nonbollocks]\n
  \ <*> checks          content [nonempty, nonshort, nonbollocks]\n  <*> mapChecks
  \      tags1   [nonempty, nonbollocks]\n  <*> mapCheck        tags2   nonempty'\n
  \ <*> subValidator    author  userValidator\n  <*> mapSubValidator authors userValidator\n```\n\nAs
  you can see, it is very simple and readable code. You just state what field\nyou
  want to validate and what tests you want to run against it. As a result you\nget
  your error type (once you've ran your `Validator` against some actual data)\n.\n\n###
  Validating data\nLet's define some sample data to test our `Validator` on:\n\n```haskell\ngoodUser
  :: User\ngoodUser = User \"hello@kitty.com\" \"kittyusername\"\n\nbadUser :: User\nbadUser
  = User \"boaty@mcboatface.com\" \"bollocks\"\n\nbadArticle :: Article\nbadArticle
  = Article\n  { id      = 17\n  , title   = \"\"\n  , content = \"bollocks\"\n  ,
  tags1   = [\"\", \"tag01\", \"tag02\"]\n  , tags2   = [\"tag01\", \"\"]\n  , author
  \ = badUser\n  , authors = [badUser, goodUser]\n  }\n```\n\nAnd now we can run our
  `Article` `Validator` against some actual data and here\nis how it's done:\n\n```haskell\n>>>
  validatePure articleValidator badArticle\nJust\n  ( Article\n      { id = Just \"must
  be greater than 18\"\n      , title = Just [\"can't be empty\"]\n      , content
  = Just [\"too short\",\"can't be bollocks\"]\n      , tags1 = Just [Just [\"can't
  be empty\"],Nothing,Nothing]\n      , tags2 = Just [Nothing,Just \"can't be empty\"]\n
  \     , author = Just\n          ( User\n              { email = Nothing\n              ,
  username = Just [\"can't be bollocks\",\"too short\"]\n              }\n          )\n
  \     , authors = Just\n        [ Just\n            ( User\n                { email
  = Nothing\n                , username = Just [\"can't be bollocks\",\"too short\"]\n
  \               }\n            )\n        ,Nothing\n        ]\n      }\n  )\n```\n\nThat's
  all folks! To learn more read the actual documentation.\n\n[1]: https://hackage.haskell.org/package/forma\n[2]:
  https://hackage.haskell.org/package/digestive-functors\n[3]: https://hackage.haskell.org/package/servant\n[4]:
  https://hackage.haskell.org/package/aeson-1.4.0.0/docs/Data-Aeson.html#t:Value\n[5]:
  https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Except.html#t:ExceptT"
license-name: MIT
