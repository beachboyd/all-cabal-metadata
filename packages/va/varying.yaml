homepage: https://github.com/schell/varying
changelog-type: markdown
hash: 178323c7f5f90ab75d3d527a21139643cde7f09dc3fbb88d9fbd2c2a7f309a72
test-bench-deps:
  varying: -any
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.4'
  hspec: -any
  criterion: -any
  transformers: -any
  QuickCheck: -any
maintainer: schell@takt.com
synopsis: FRP through value streams and monadic splines.
changelog: ! "change log\n==========\n\n0.1.5.0 - added Control.Varying.Spline\n\n0.2.0.0
  - reordered spline type variables for MonadTrans\n\n0.3.0.0 - updated the type of
  mapOutput to a more friendly, usable signature\n          bug fixes\n\n0.3.1.0 -
  added stepMany, eitherE\n\n0.4.0.0 - Var and Spline are now parameterized with Identity,
  removed mix, changed\n          the behavior of race, added untilEvent variants,
  added tests\n\n0.5.0.0 - changed stepMany to remove Monoid requirement, added raceMany,
  added\n          anyE, more tests and SplineT obeys Applicative and Monad laws\n\n0.5.0.1
  - removed time as dependency\n\n0.5.0.2 - separated tweening time and value, added
  runSplineE, builds on all GHC\n          since 7.6\n\n0.6.0.0 - changed the internal
  type of SplineT to use Either, reducing unused\n          output values and preventing
  time/space leaks. Updated tween types.\n          Added withTween(_).\n\n0.7.0.0
  - added proofs, reduced API size by removing trivial or weird (special)\n          combinators,
  changed some names, Event is a synonym of Maybe, removed\n\t  Time (moved functions
  to Event), renamed Event.mergeE to Event.bothE,\n          added Spline.untilProc
  and Spline.whileProc, documentation - working \n\t  towards 1.0\n"
basic-deps:
  varying: -any
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.4'
  contravariant: ! '>=1.4'
  transformers: ! '>=0.3'
all-versions:
- 0.1.1.2
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.0.2
- 0.5.0.3
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.1.0
author: Schell Scivally
latest: 0.7.1.0
description-type: markdown
description: ! "# varying\n[![Hackage](https://img.shields.io/hackage/v/varying.svg)](http://hackage.haskell.org/package/varying)\n[![Build
  Status](https://travis-ci.org/schell/varying.svg)](https://travis-ci.org/schell/varying)\n\nThis
  library provides automaton based value streams and sequencing useful for\nfunctional
  reactive programming (FRP) and locally stateful programming (LSP).\n\n## Getting
  started\n\n```haskell\nmodule Main where\n\nimport Control.Varying\nimport Control.Applicative\nimport
  Control.Concurrent (forkIO, killThread)\nimport Data.Functor.Identity\nimport Data.Time.Clock\n\n--
  | A simple 2d point type.\ndata Point = Point { px :: Float\n                   ,
  py :: Float\n                   } deriving (Show, Eq)\n\nnewtype Delta = Delta {
  unDelta :: Float }\n\n-- An exponential tween back and forth from 0 to 50 over 1
  seconds that\n-- loops forever. This spline takes float values of delta time as
  input,\n-- outputs the current x value at every step.\ntweenx :: Monad m => TweenT
  Float Float m Float\ntweenx = do\n    -- Tween from 0 to 50 over 1 second\n    tween_
  easeOutExpo 0 50 1\n    -- Chain another tween back to the starting position\n    tween_
  easeOutExpo 50 0 1\n    -- Loop forever\n    tweenx\n\n-- An exponential tween back
  and forth from 0 to 50 over 1 seconds that never\n-- ends.\ntweeny :: Monad m =>
  TweenT Float Float m Float\ntweeny = do\n    tween_ easeOutExpo 50 0 1\n    tween_
  easeOutExpo 0 50 1\n    tweeny\n\n-- Our time signal counts input delta time samples.\ntime
  :: Monad m => VarT m Delta Float\ntime = var unDelta\n\n-- | Our Point value that
  varies over time continuously in x and y.\nbackAndForth :: Monad m => VarT m Delta
  Point\nbackAndForth =\n    -- Turn our splines into continuous output streams. We
  must provide\n    -- a starting value since splines are not guaranteed to be defined
  at\n    -- their edges.\n    let x = tweenStream tweenx 0\n        y = tweenStream
  tweeny 0\n    in\n    -- Construct a varying Point that takes time as an input.\n
  \   (Point <$> x <*> y)\n        -- Stream in a time signal using the 'plug left'
  combinator.\n        -- We could similarly use the 'plug right' (~>) function\n
  \       -- and put the time signal before the construction above. This is needed\n
  \       -- because the tween streams take time as an input.\n        <~ time\n\nmain
  :: IO ()\nmain = do\n    putStrLn \"An example of value streams using the varying
  library.\"\n    putStrLn \"Enter a newline to continue, and then a newline to quit\"\n
  \   _ <- getLine\n\n    t   <- getCurrentTime\n    tId <- forkIO $ loop backAndForth
  t\n\n    _ <- getLine\n    killThread tId\n\nloop :: Var Delta Point -> UTCTime
  -> IO ()\nloop v t = do\n  t1 <- getCurrentTime\n  -- Here we'll run in the Identity
  monad using a time delta provided by\n  -- getCurrentTime and diffUTCTime.\n  let
  dt = realToFrac $ diffUTCTime t1 t\n      Identity (Point x y, vNext) = runVarT
  v $ Delta dt\n      xStr = replicate (round x) ' ' ++ \"x\" ++ replicate (50 - round
  x) ' '\n      yStr = replicate (round y) ' ' ++ \"y\" ++ replicate (50 - round y)
  ' '\n      str  = zipWith f xStr yStr\n      f 'x' 'y' = '|'\n      f 'y' 'x' =
  '|'\n      f a ' ' = a\n      f ' ' b = b\n      f _ _ = ' '\n  putStrLn str\n  loop
  vNext t1\n```\n\n# Publications\n\nThe concept of `VarT` that this library is built
  on is isomorphic to Monadic Stream Functions as defined in \"[Functional Reactive
  Programming, Refactored](http://dl.acm.org/citation.cfm?id=2976010)\" ([mirror](http://www.cs.nott.ac.uk/~psxip1/#FRPRefactored)).\n\nThe
  isomorphism is\n``` haskell\ntoMSF :: Functor m => VarT m a b -> MSF m a b\ntoMSF
  = MSF . (fmap . fmap . fmap $ toMSF) . runVarT\n\ntoVarT :: Functor m => MSF m a
  b -> VarT m a b\ntoVarT = VarT . (fmap . fmap . fmap $ toVarT) . unMSF\n```\n"
license-name: MIT
