homepage: https://github.com/IagoAbal/haskell-z3
changelog-type: markdown
hash: dd6c9091c5ec784083870264310de90dc3e4f331845306e13faaf3ee8e1e3b4d
test-bench-deps:
  base: ! '>=4.5'
  hspec: ! '>=2.1'
  QuickCheck: ! '>=2.5.1'
  z3: -any
maintainer: Iago Abal <mail@iagoabal.eu>
synopsis: Bindings for the Z3 Theorem Prover
changelog: ! "\n# Release Notes\n\n## 4.3\n\n### Fixes\n\n* Fixed memory leak due
  to typo in ```Z3.Base.C```. (Deian Stefan)\n\n### New API support\n\n* Added partial
  support for _Fixedpoint_ API. (David Heath)\n* Added more bindings to the _Models_
  API. (Daniel GrÃ¶ber)\n* Added _Parser interface_ API. (Tristan Knoth)\n\n### Misc\n\n*
  After many requests, I have moved the repository to GitHub: https://github.com/IagoAbal/haskell-z3.\n*
  From now on the revision number (aka patch level) 0 will be omitted (so x.y instead
  of x.y.0).\n\n## 4.2.0\n\nThis release removes support for SMT-LIB 1.x in order
  to be compatible with Z3 4.6.\n\n## 4.1.2\n\nThis minor release extends the supported
  quantifiers API, and adds\npartial support for Z3's proof tactics.\n\n* Improved
  support for theorem proving with quantifiers. (Jakub Daniel)\n\n## 4.1.1\n\nAnother
  small release, made possible thanks to third-party contributions.\n\n* Added bindings
  for getting the accessors of datatype constructors. (William Hallahan)\n* Added
  bindings for declaring mutually recursive datatypes. (William Hallahan)\n* Added
  partial support for the _Interpolation_ API. (Jakub Daniel)\n* Added bindings for
  deconstructing function applications. (Jakub Daniel)\n* Added bindings for ```simplify```
  and ```simplifyEx```. (Gleb Popov)\n* Some code cleanup. (Jakub Daniel and Iago
  Abal)\n\n## 4.1.0\n\nSmall maintenance release that however introduces one API breaking
  change.\n\n* Added bindings for the _Set_ API. (Nadia Polikarpova)\n* Fix #4: Replace
  the now deprecated Z3_eval with Z3_model_eval.\n* Fix #5: Check error codes right
  after an API call. (David Castro)\n\nTo fix #4 we had to change the type of ```modelEval```,
  which now takes\nan extra ```Bool``` parameter (to force model completion).\n\n##
  4.0.0\n\nThis release brings support for the new Z3 4.x API,\nand *removes* support
  for the old API.\nWe are following a new version policy, yet compatible with Haskell's
  PVP.\nSo new versions are of the form *x.y.z*,\nwhere *x* is the version of Z3 API
  supported,\n*y* is a major revision of the bindings,\nand *z* is a minor revision
  of the bindings.\nConsequently, we bumped the version to *4.0.0* :-).\n\nSpecial
  thanks to Nadia Polikarpova,\nwho diagnosed a problem in our use of ```ForeignPtr```
  finalizers,\nand proposed a fix.\n\n### Cabal package\n\n* Relaxed dependencies,
  and removed upper bounds.\n\n### New features and API functions\n\n* Switched to
  Z3 4.x API.\n* Reference counting is managed by the gargabe collector.\n* Algebraic
  datatypes. (KC Sivaramakrishnan)\n* ```Z3_get_ast_kind```, ```Z3_solver_check_assumptions```,
  ```Z3_solver_get_unsat_core```. (Nadia Polikarpova)\n* ```Z3_mk_fresh_const```,
  ```Z3_mk_fresh_func_decl```. (KC Sivaramakrishnan)\n* ```MonadFix``` instance for
  the ```Z3``` monad. (Pepe Iborra)\n* Hspec test-suite, with just a couple of tests,
  more to come...\n* A few more helpers for creating numerals, evaluating expressions,
  and so on.\n* Module ```Z3.Base.C```, a very low-level interface to Z3 C API, is
  now exported.\n  Just in case you want to write your own marshaling layer ;-)\n\n###
  Removals and API-breaking changes\n\n* No more support for the old Z3 3.x API.\n*
  Removed ```Z3.Lang``` module, this should re-appear as a separate package soon.\n*
  ```MonadZ3``` instances must be ```Applicative```.\n* Numerals API is now closer
  to Z3 C API.\n  So, for instance, ```mkInt``` now takes both an integer and a sort.\n
  \ You can use ```mkInteger``` or ```mkIntNum``` instead.\n* ```Z3.Monad.assertCnstr```
  is now called ```Z3.Monad.assert```.\n\n### Refactoring and clean-up\n\n* Reduce
  boilerplate in Z3.Base.\n* Fix docs to distinguish Z3 API functions and helpers.\n\n##
  0.3.2\n\nThanks to Scott West and Nadia Polikarpova for contributing to this release.\n\n###
  Fixes\n\n* Fixed _solverCheckAndGetModel_ to return a model from an unknown satisfiability
  result, if one exists. (Nadia Polikarpova)\n* Fixed mkMap API function to do **not**
  take the number of arrays as an input parameter, this should be equals to the length
  of the input array list.\n  Strictly speaking this is a minor break of the API but
  it was considered a but and therefore fixed.\n\n### Refactoring and clean-up\n\n*
  Reduced marshalling boilerplate in Z3.Base.\n  This is a very important step towards
  supporting Z3 4.0 API.\n* Improved API documentation.\n  If you are having difficulties
  due to (presumably) poor API or source documentation, please let us know.\n\n###
  New features\n\n* Support running multiple queries under the same logical context,
  using _evalZ3WithEnv_. (Scott West)\n\n### Newly supported API functions\n\n* Many
  solver-related API functions (Scott West and Nadia Polikarpova).\n* z3_mk_forall_const
  (Scott West), z3_mk_exists_const.\n* Z3_get_version.\n\n### Deprecations\n\n* We
  deprecate _showContext_, _showModel_ and _getModel_; since we prefer to avoid deviations
  from Z3 API names.\n  Use _contextToString_, _modelToString_ and _checkAndGetModel_
  instead.\n* We deprecate the Z3.Lang interface, that will be moved to a separate
  pacakge.\n  Few people is using this (_DSL_ish) interface and it is arguably more
  unstable than Z3.Base or Z3.Monad.\n  It also introduces dependencies with GHC extensions
  like type families that we prefer to avoid in a more stable package.\n\n### Misc\n\n*
  Add SMT to categories in z3.cabal.\n"
basic-deps:
  base: ! '>=4.5 && <5'
  containers: -any
  mtl: ! '>2.1'
all-versions:
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '4.0.0'
- '4.1.0'
- '4.1.1'
- '4.1.2'
- '4.2.0'
- '4.3'
author: ! 'Iago Abal <mail@iagoabal.eu>,

  David Castro <david.castro.dcp@gmail.com>'
latest: '4.3'
description-type: markdown
description: ! "\n# Haskell bindings for Microsoft's Z3 (unofficial)\n\nThese are
  Haskell bindings for the Z3 theorem prover.\nWe don't provide any high-level interface
  (e.g. in the form of a Haskell eDSL) here,\nthese bindings are targeted to those
  who want to build verification tools on top of Z3 in Haskell.\n\n[Changelog here.](blob/master/CHANGES.md)\n\n[Examples
  here.](tree/master/examples)\n\n[Do you want to contribute?](blob/master/HACKING.md)\n\n##
  Installation\n\nPreferably use the [z3](http://hackage.haskell.org/package/z3) package.\n\n*
  Install a [Z3](https://github.com/Z3Prover/z3) *4.x* release.\n  (Support for Z3
  *3.x* is provided by the *0.3.2* version of these bindings.)\n* Just type _cabal
  install z3_ if you used the standard locations for dynamic libraries (_/usr/lib_)
  and header files (_/usr/include_).\n\n    * Otherwise use the _--extra-lib-dirs_
  and _--extra-include-dirs_ Cabal flags when installing.\n\n## Example\n\nMost people
  uses the ```Z3.Monad``` interface.\nHere is an example script that solves the 4-queen
  puzzle:\n\n    import Control.Applicative\n    import Control.Monad ( join )\n    import
  Data.Maybe\n    import qualified Data.Traversable as T\n\n    import Z3.Monad\n\n
  \   script :: Z3 (Maybe [Integer])\n    script = do\n      q1 <- mkFreshIntVar \"q1\"\n
  \     q2 <- mkFreshIntVar \"q2\"\n      q3 <- mkFreshIntVar \"q3\"\n      q4 <-
  mkFreshIntVar \"q4\"\n      _1 <- mkInteger 1\n      _4 <- mkInteger 4\n      --
  the ith-queen is in the ith-row.\n      -- qi is the column of the ith-queen\n      assert
  =<< mkAnd =<< T.sequence\n        [ mkLe _1 q1, mkLe q1 _4  -- 1 <= q1 <= 4\n        ,
  mkLe _1 q2, mkLe q2 _4\n        , mkLe _1 q3, mkLe q3 _4\n        , mkLe _1 q4,
  mkLe q4 _4\n        ]\n      -- different columns\n      assert =<< mkDistinct [q1,q2,q3,q4]\n
  \     -- avoid diagonal attacks\n      assert =<< mkNot =<< mkOr =<< T.sequence\n
  \       [ diagonal 1 q1 q2  -- diagonal line of attack between q1 and q2\n        ,
  diagonal 2 q1 q3\n        , diagonal 3 q1 q4\n        , diagonal 1 q2 q3\n        ,
  diagonal 2 q2 q4\n        , diagonal 1 q3 q4\n        ]\n      -- check and get
  solution\n      fmap snd $ withModel $ \\m ->\n        catMaybes <$> mapM (evalInt
  m) [q1,q2,q3,q4]\n      where mkAbs x = do\n              _0 <- mkInteger 0\n              join
  $ mkIte <$> mkLe _0 x <*> pure x <*> mkUnaryMinus x\n            diagonal d c c'
  =\n              join $ mkEq <$> (mkAbs =<< mkSub [c',c]) <*> (mkInteger d)\n\nIn
  order to run this SMT script:\n\n    main :: IO ()\n    main = evalZ3 script >>=
  \\mbSol ->\n            case mbSol of\n                 Nothing  -> error \"No solution
  found.\"\n                 Just sol -> putStr \"Solution: \" >> print sol\n\n"
license-name: BSD3
