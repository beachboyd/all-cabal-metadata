homepage: https://gitlab.com/robstewart57/gitlab-haskell
changelog-type: ''
hash: b3a940bf99938fdb58ecc58a5bc77a350882de9a5a8aeeb446d591a3e5fbe418
test-bench-deps:
  bytestring: -any
  base: '>=4.8.0.0 && <6'
  gitlab-haskell: -any
  tasty-hunit: -any
  tasty: -any
  aeson: -any
maintainer: robstewart57@gmail.com
synopsis: A Haskell library for the GitLab web API
changelog: ''
basic-deps:
  bytestring: -any
  unliftio: -any
  unix: -any
  base: '>=4.7 && <5'
  time: -any
  text: -any
  connection: -any
  unliftio-core: -any
  transformers: -any
  temporary: -any
  http-conduit: -any
  http-types: -any
  aeson: '>=1.4.4.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Rob Stewart
latest: 0.2.4
description-type: markdown
description: "# A Haskell library for the GitLab web API\n\nThis library interacts
  with a GitLab server's API. It supports queries\nabout and updates to:\n\n* Branches\n*
  Commits\n* Groups\n* Issues\n* Jobs\n* Members\n* Merge requests\n* Pipelines\n*
  Projects\n* Repositories\n* Repository files\n* Users\n\nThe library parses JSON
  results into Haskell data types in the\n`GitLab.Types` module.\n\n## Example\n\nRun
  all GitLab actions with `runGitLab`: \n\n    runGitLab ::\n       => GitLabServerConfig\n
  \      -> GitLab a\n       -> IO a\n\nFor example:\n\n    myProjects <-\n      runGitLab\n
  \       (defaultGitLabServer\n           { url = \"https://gitlab.example.com\"\n
  \          , token=\"my_token\"} )\n        (searchUser \"joe\" >>= userProjects
  . fromJust)\n\nWhich uses the functions:\n\n    searchUser     :: Text -> GitLab
  (Maybe User)\n    userProjects   :: User -> GitLab (Maybe [Project])\n    projectCommits
  :: Project -> GitLab [Commit]\n\nThis library can also be used to implement rule
  based GitLab file\nsystem hooks that, when deployed a GitLab server, react in real
  time\nto GitLab events like project creation, new users, merge requests etc.\n\nThe
  rule based API for implementing file hooks is:\n\n    receive :: [Rule] -> GitLab
  ()\n\n    class (FromJSON a) => SystemHook a where\n      match   :: String -> (a
  -> GitLab ()) -> Rule\n      matchIf :: String -> (a -> GitLab Bool) -> (a -> GitLab
  ()) -> Rule\n\nFor more details about the file system hooks support, see post:\n[GitLab
  automation with file hook rules](https://www.macs.hw.ac.uk/~rs46/posts/2020-06-06-gitlab-system-hooks.html).\n\nFor
  the complete `gitlab-haskell` API, see the [hackage documentation](https://hackage.haskell.org/package/gitlab-haskell).\n\nThe
  `gitlab-tools` command line tool for bulk GitLab transactions uses\nthis library
  [link](https://gitlab.com/robstewart57/gitlab-tools).\n"
license-name: BSD-3-Clause
