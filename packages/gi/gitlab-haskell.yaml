homepage: https://gitlab.com/robstewart57/gitlab-haskell
changelog-type: ''
hash: 575c2b1f3482584daa345a8b581cc107663a6dfe82bde58fbc7ae99ea4871da8
test-bench-deps: {}
maintainer: robstewart57@gmail.com
synopsis: A Haskell library for the GitLab web API
changelog: ''
basic-deps:
  bytestring: -any
  unliftio: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  connection: -any
  unliftio-core: -any
  transformers: -any
  http-conduit: -any
  http-types: -any
  aeson: ! '>=1.4.4.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
author: Rob Stewart
latest: 0.1.5
description-type: markdown
description: "# A Haskell library for the GitLab web API\n\nThis library interacts
  with a GitLab server's API. It supports queries\nabout and updates to:\n\n* Branches\n*
  Commits\n* Groups\n* Issues\n* Jobs\n* Members\n* Merge requests\n* Pipelines\n*
  Projects\n* Repositories\n* Repository files\n* Users\n\nThe library parses JSON
  results into Haskell data types in the\n`GitLab.Types` module.\n\n## Example\n\nRun
  all GitLab actions with `runGitLab`: \n\n    runGitLab ::\n      (MonadUnliftIO
  m, MonadIO m)\n       => GitLabServerConfig\n       -> GitLab m a\n       -> m a\n\nFor
  example:\n\n    myTodos <- runGitLab\n                 (defaultGitLabServer\n                   {
  url = \"https://gitlab.example.com\"\n                   , token=\"my_token\"} )\n
  \                todos\n\nWhich uses the `todos` function:\n\n    todos :: MonadIO
  m => GitLab m [Todo] \n\nThis returns all GitLab TODO items, as Haskell values of
  type `Todo`\nfor the user identified with the access token`my_token`.\n\nThe `gitlab-tools`
  command line tool for bulk GitLab transactions uses\nthis library [link](https://gitlab.com/robstewart57/gitlab-tools).\n"
license-name: BSD-3-Clause
