homepage: http://github.com/passy/giphy-api#readme
changelog-type: markdown
hash: 210709f1551aeadb4a75f7928adfa1c1adcf56b0f8c4e389b5b14f7720bd86a1
test-bench-deps:
  bytestring: -any
  giphy-api: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  text: -any
  basic-prelude: -any
  containers: -any
  lens: -any
  network-uri: -any
  aeson: -any
  directory: -any
maintainer: Pascal Hartig <phartig@rdrei.net>
synopsis: Giphy HTTP API wrapper and CLI search tool.
changelog: ! "# Changelog\n\n## v0.6.0.0\n\n- Upgrade to Servant 0.13.\n\n## v0.5.2.0\n\n-
  Fix #12: Compilation error with base 4.7\n\n## v0.5.0.0\n\n- Upgrade to Servant
  0.9. User-facing API should remain unchanged.\n\n## v0.4.0.0\n\n- Upgrade to Servant
  0.6. When running the Giphy monad it is now possible\n  to provide a custom HTTP
  manager.\n\n## v0.3.0.0\n\n- Upgrade to Servant 0.5. No changes in the API, but
  it's not in Stackage yet\n  (as of 2016-03-30).\n\n## v0.2.5.0\n\n- Clarify servant
  bounds.\n\n## v0.2.4.0\n\n- Include extra source files for stackage test suite.\n\n##
  v0.2.3.0\n\n- Losen upper bounds for Stackage inclusion (aeson 0.11 compat).\n\n##
  v0.2.2.0\n\n- Retrieve single GIFs via GifId.\n- Another attempt in reducing the
  deps on Hackage.\n\n## v0.2.1.0\n\n- Expose RandomResponse(..) type for non-lens
  use.\n\n## v0.2.0.0\n\n- Make sample app optional via build flag `buildSample`.
  This dramatically\n  reduces the dependency graph.\n\n## v0.1.0.0\n\n- Initial release.\n"
basic-deps:
  http-client: -any
  microlens-th: -any
  base: ! '>=4.7 && <5'
  servant-client: ! '>=0.9'
  text: -any
  http-api-data: -any
  servant: ! '>=0.13'
  containers: -any
  http-client-tls: -any
  network-uri: -any
  mtl: -any
  transformers: -any
  microlens: -any
  aeson: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.5.0'
- '0.3.0.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.6.0.0'
author: Pascal Hartig
latest: '0.6.0.0'
description-type: markdown
description: ! "# giphy-api\n[![Build Status](https://travis-ci.org/passy/giphy-api.svg?branch=master)](https://travis-ci.org/passy/giphy-api)\n[![Hackage](http://img.shields.io/hackage/v/giphy-api.svg)](https://hackage.haskell.org/package/giphy-api)\n[![Stackage
  8](http://stackage.org/package/giphy-api/badge/lts-8)](http://stackage.org/lts-8/package/giphy-api)\n[![Stackage
  9](http://stackage.org/package/giphy-api/badge/lts-9)](http://stackage.org/lts-9/package/giphy-api)\n[![Stackage
  Nightly](http://stackage.org/package/giphy-api/badge/nightly)](http://stackage.org/nightly/package/giphy-api)\n\n\nA
  Haskell wrapper for the [Giphy HTTP API](https://github.com/Giphy/GiphyAPI)\nusing
  [servant-client](https://hackage.haskell.org/package/servant-client).\n\n## Usage\n\nThe
  module provides a `Giphy` monad which can be run with `runGiphy` to lift it\ninto
  IO. Here's a simple usage example:\n\n```hs\n{-# LANGUAGE OverloadedStrings #-}\n\nimport
  qualified Data.Text as T\nimport qualified Web.Giphy as Giphy\n\napiKey :: Giphy.Key\napiKey
  = Giphy.Key \"dc6zaTOxFJmzC\"\n\nsample :: IO ()\nsample = do\n  let config = Giphy.GiphyConfig
  apiKey\n  resp <- Giphy.runGiphy (app \"puppies\") config\n  print resp\n\n  where\n
  \   app :: T.Text -> Giphy.Giphy [Giphy.Gif]\n    app q = do\n      resp <- Giphy.search
  $ Giphy.Query q\n      return $ Giphy._searchItems resp\n```\n\nFor a slightly more
  complex example, check out the [sample app](app/Main.hs),\nwhich also features the
  use of lenses.\n\n## Building\n\nUse [stack](http://haskellstack.org) to build this
  library.\n\n```bash\n$ stack setup\n$ stack test\n# Drop the flag if you don't want
  the sample app to be built.\n$ stack build --flag=giphy-api:buildSample\n# To install
  the sample tool\n$ stack install\n```\n\n## Sample CLI Tool Usage\n\n```bash\n$
  giphy-search --help\ngiphy-search\n\nUsage: giphy-search ([-s|--search ARG] | [-t|--translate
  ARG] | [RANDOM_TAG])\n  Find GIFs on the command line.\n\nAvailable options:\n  -h,--help
  \               Show this help text\n  -s,--search ARG          Use search to find
  a matching GIF.\n  -t,--translate ARG       Use translate to find a matching GIF.\n
  \ -V,--version             Show version information\n$ giphy-search puppies\nJust
  https://media2.giphy.com/media/PjQFtJnmdOlwI/giphy.gif\n$ giphy-search --translate
  superman\nJust https://media3.giphy.com/media/eOewytQL4tOOA/giphy.gif\n$ giphy-search
  \"1C4D539A-B787-497F-B1DC-8FCF8D2C026D\"\nNothing\n```\n\n## Missing features\n\n-
  There is no compiler flag at the moment to disable lenses if those aren't\n  needed.
  The library, however, uses `microlens` so the overhead should be\n  minimal.\n\n-
  The \"Stickers\" API endpoints are currently not covered. If you need them, let\n
  \ me know. PRs obviously very welcome.\n\n- Some fields are currently not exposed.
  Again, if you need them, open an issue.\n  For example, I have never seen a type
  value other than \"gif\" so I decided\n  to skip it.\n"
license-name: BSD3
