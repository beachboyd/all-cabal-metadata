homepage: https://bitbucket.org/tdammers/ginger
changelog-type: markdown
hash: 9fb29277923d3b7d319d1fc6e26055b899be5dce6ef8bfabe30c6af5b8132f40
test-bench-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  time: -any
  unordered-containers: ! '>=0.2.5'
  text: -any
  ginger: -any
  data-default: -any
  utf8-string: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  transformers: -any
  tasty: -any
  aeson: -any
maintainer: tdammers@gmail.com
synopsis: An implementation of the Jinja2 template language in Haskell
changelog: ! "## 0.8.0.0\n\n- Now compiles on GHC 8.4\n- CLI: added a `system()` template
  function (for spawning subprocesses)\n- CLI accepts YAML\n- Added `is` operator
  (also makes Ginger conform to Jinja2 test syntax)\n- Various bugfixes\n- New builtins:
  `escaped`, `in`, Python-style boolean operators, `divisibleBy`,\n  `even`, `odd`,
  and more\n- Boolean literals now also accepted in caps\n- Improved documentation\n-
  `GVal` instances for `Integer`\n- Overridable delimiters\n\n## 0.7.4.0\n\n- Make
  concat() / ~ more generic (now also concatenates lists and dictionaries)\n- CLI
  omits printing of `null` results. Useful when using as a filter.\n- Fixed excessive
  newlines in CLI output\n\n## 0.7.3.0\n\n- Expose parser error position details\n\n##
  0.7.2.0\n\n- '|json' filter\n\n## 0.7.1.0\n\n- `StripBlocks` and `LTrimBlocks` options\n-
  `+` tag modifier to override whitespace stripping\n\n## 0.7.0.0\n\n- `keepTrailingNewlines`
  option\n- Ability to pass parser options into parseGinger\n- Runtime warnings\n\n##
  0.6.0.2\n\n- Documentation fixes\n\n## 0.6.0.1\n\n- Haddock documentation fix\n\n##
  0.6.0.0\n\n- Exceptions / exception handling.\n\n## 0.5.3.0\n\n- Marshalling and
  hoisting: it is now possible to fully marshal `GVal`s between\n  arbitrary carrier
  monads, as long as suitable conversion functions are\n  provided.\n\n## 0.5.2.0\n\n-
  Added map(), upper(), lower() functions\n\n## 0.5.1.3\n\n- Documentation fixes\n\n##
  0.5.1.2\n\n- Release-related fixups\n\n## 0.5.1.1\n\n- Bugfixes wrt indentation
  mode\n\n## 0.5.1.0\n\n- Expose parser error pretty-printer from the library\n\n##
  0.5.0.0\n\n- Indentation mode: `{% indent %}` introduces an indentation context\n\n##
  0.4.0.0\n\n- Statements can now return values\n- Added `do` expressions (lift statements
  into expressions)\n\n## 0.3.11.1\n\n- Fixed a parser bug related to whitespace in
  script mode\n\n## 0.3.11.0\n\n- Fixed the way local scopes work in script mode\n-
  Documented script mode\n\n## 0.3.10.0\n\n- Script mode: alternative syntax that
  makes it easier to use\n  Ginger as a scripting language, used inside {% script
  %} blocks.\n\n## 0.3.9.1\n\n- Various dependency issues fixed\n\n## 0.3.8.0\n\n-
  Added a `{% switch %}` statement\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.8 && <5'
  time: ! '>=0.1.6.0'
  aeson-pretty: -any
  unordered-containers: ! '>=0.2.5'
  text: -any
  ginger: -any
  filepath: ! '>=1.3'
  process: -any
  parsec: ! '>=3.0'
  data-default: ! '>=0.5'
  utf8-string: -any
  mtl: ! '>=2.2'
  transformers: ! '>=0.3'
  scientific: ! '>=0.3'
  http-types: ! '>=0.8 && (<0.11 || >=0.12)'
  aeson: -any
  safe: ! '>=0.3'
  yaml: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
- '0.1.5.0'
- '0.1.6.0'
- '0.1.7.0'
- '0.1.8.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.5.0'
- '0.2.6.0'
- '0.2.7.0'
- '0.2.8.0'
- '0.3.0.0'
- '0.3.2.0'
- '0.3.5.0'
- '0.3.5.1'
- '0.3.5.3'
- '0.3.7.0'
- '0.3.7.1'
- '0.3.7.2'
- '0.3.8.0'
- '0.3.9.1'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.2'
- '0.5.1.3'
- '0.5.2.1'
- '0.5.3.0'
- '0.6.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.7.0.0'
- '0.7.1.0'
- '0.7.2.0'
- '0.7.3.0'
- '0.8.0.0'
- '0.8.0.1'
- '0.8.1.0'
author: Tobias Dammers
latest: '0.8.1.0'
description-type: markdown
description: ! "# Ginger\n\n\n[![Build Status](https://travis-ci.org/tdammers/ginger.svg?branch=master)](https://travis-ci.org/tdammers/ginger)\n[![Hackage](https://img.shields.io/hackage/v/ginger.svg)](https://hackage.haskell.org/package/ginger)\n\n![](http://ginger.tobiasdammers.nl/static/img/ginger-leaf.svg)\n\nA
  Haskell implementation of the [Jinja2](http://jinja.pocoo.org/) template\nlanguage.\n\n>
  A note of warning: the git repository at https://bitbucket.org/tdammers/ginger\n>
  has been deleted and restored with a rewritten commit tree on 2016-04-06 in\n> order
  to clean up the messy history. This means that if you have a checkout\n> from before
  that date, merging the bitbucket repo will most likely break\n> things; please do
  a fresh clone to fix this. Sorry for the inconvenience.\n\n## Introduction\n\nGinger
  provides most of the original Jinja2 template language, as much as that\nmakes sense
  in a Haskell host application.\n\nWe do, however, avoid some of the most blatant
  Pythonisms, especially where we\nfelt the features in question were more of an accidental
  result of binding\ntemplate constructs to Python constructs.\n\nOn top of that,
  we deviate on a few points, and add some features that we think\nare very useful
  and help make the language better and more consistent.\n\n## Installation\n\nGinger
  is available from [Hackage](https://hackage.haskell.org/package/ginger),\nand it
  is in Stackage, so you can use it in plain Cabal projects as well as\nStack ones.\n\n###
  Installing with Cabal:\n\n    cabal install ginger\n\n### Installing with Stack:\n\n
  \   stack install ginger\n\n### Using as part of another project:\n\nAdd the following
  to your `.cabal`'s `build-depends`:\n\n    ginger >=0.7.4.0 && <0.8\n\n## Template
  Syntax\n\nFull template syntax documentation is available from the `/docs` subdirectory\nin
  the project repository itself, or from [the User Guide section on the\nGinger website](https://ginger.tobiasdammers.nl/guide).\n\n###
  Minimal example template\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>{{
  title }}</title>\n        </head>\n        {# This is a comment. Comments are removed
  from the output. #}\n        <body>\n            <menu id=\"nav-main\">\n            {%
  for item in navigation %}\n                <li><a href=\"{{ item.url }}\">{{ item.label
  }}</a></li>\n            {% endfor %}\n            </menu>\n            <div class=\"layout-content-main\">\n
  \               <h1>{{ title }}</h1>\n                {{ body }}\n            </div>\n
  \       </body>\n    </html>\n\nThere are three kinds of delimiters:\n\n- Interpolation,
  to inject values into the output; these default to `{{` and\n  `}}`\n- Flow Control,
  to create conditionals, loops, and other control constructs;\n  these default to
  `{%` and `%}`\n- Comments, which are removed from the output; these default to `{#`
  and `#}`.\n\nThese delimiters can be changed on the Haskell side. In principle,
  any string\nis accepted for any delimiter; you may, however, get surprising results
  if you\npick delimiters that clash with other Ginger syntax, or with one another
  (e.g.,\nusing the same string to start interpolations and flow control constructs
  will\nnot work).\n\n## Haskell API\n\nThe Haskell API is documented fully through
  Haddock documentation, available\nfrom [Hackage](https://hackage.haskell.org/package/ginger).
  We'll just provide\na short overview here.\n\n### General\n\nOn the Haskell side
  of things, executing a template is a two-step process.\nFirst, template source code
  is parsed into a 'Template' data structure,\nwhich is then fed to 'runGinger' or
  'runGingerT'.\n\n###  Parsing\n\nBecause Ginger templates can include other templates,
  the parser needs a way of\nresolving template names. Instead of hard-wiring the
  parser into 'IO' though,\nGinger will work on any Monad type, but requires the caller
  to provide a\nsuitable template resolver function. For 'IO', the resolver would
  typically\nload a file from a template directory, but other monads might have access
  to\nsome sort of cache, or expose template compiled into a program, or simply\nreturn
  'Nothing' unconditionally to disable any and all imports. A suitable\nexample implementation
  for 'IO' would look like this:\n\n    loadFile fn = openFile fn ReadMode >>= hGetContents\n\n
  \   loadFileMay fn =\n        tryIOError (loadFile fn) >>= \\e ->\n             case
  e of\n                Right contents ->\n                    return (Just contents)\n
  \               Left err -> do\n                    print err -- remove this line
  if you want to fail silently\n                    return Nothing\n\n(Taken from
  `cli/GingerCLI.hs`). This interprets the template name as a\nfilename relative to
  the CWD, and returns the file contents on success or\n'Nothing' if there is any
  error.\n\nIf you don't need a monadic context for resolving includes (e.g. because
  you\nhave pre-loaded all template sources), you can use the pure 'parseGinger'\nflavor,
  which does not rely on a host monad.\n\n### Running\n\nThe core function for running
  a template is 'runGinger' (or its monadic\nflavor 'runGingerT'); in order to pass
  an initial context to the template\nengine, pass a suitable 'GingerContext', which
  you can create using the\n'makeContext' / 'makeContextM' functions.\n\nAn example
  call (for running a template in 'IO') would look something like\nthis:\n\n    runGingerT
  (makeContextM scopeLookup (putStr . Text.unpack . htmlSource)) tpl\n"
license-name: MIT
