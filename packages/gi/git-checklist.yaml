homepage: https://github.com/dougalstanton/git-checklist
changelog-type: ''
hash: a887217a875a01c2a0ea1c5b3fe8287b179b66d27a793f7b2919f455a3881641
test-bench-deps: {}
maintainer: dougal@dougalstanton.net
synopsis: Maintain per-branch checklists in Git
changelog: ''
basic-deps:
  base: ! '>=4.6 && <4.7'
  filepath: ! '>=1.3 && <1.4'
  process: ! '>=1.1 && <1.2'
  parsec: ! '>=3.1 && <3.2'
  optparse-applicative: ! '>=0.7 && <0.8'
  pretty: ! '>=1.1 && <1.2'
  directory: ! '>=1.2 && <1.3'
all-versions:
- 1.0.0.0
author: Dougal Stanton
latest: 1.0.0.0
description-type: markdown
description: ! "# Git Checklist\n\nI was juggling lots of private git branches at
  work and making some use\nof the branch description file (see `git branch --edit-description`)\nto
  store my notes for each branch. This was good for me because the\ndescriptions aren't
  committed to the branch so they would never make it\nupstream (even by accident).
  However managing the TODOs themselves was\npretty unwieldy.\n\nAnd so was born `git-checklist`,
  though in actual fact I've aliased it\nto `git todo`. Assuming it's in your path:\n\n
  \   $ git config alias.todo=checklist\n\nOtherwise, like this:\n\n    $ git config
  alias.todo=!/path/to/git-checklist\n\n## Using It Is Easy\n\nTo view your TODOs,
  just enter the bare command from a git repository:\n\n    $ git todo\n\nWell, if
  you've not got anything to do yet, it won't have anything to\nshow you. Find out
  where to go next:\n\n    $ git todo --help\n    Usage: git-checklist [COMMAND]\n
  \     Per-branch TODO list for Git repositories\n\n    Available options:\n      -h,--help
  \               Show this help text\n\n    Available commands:\n      show                     Show
  current TODOs\n      add                      Add a TODO\n      done                     Mark
  a TODO as done.\n      undo                     Item needs redone!\n      remove
  \                  Remove a TODO (can't be undone)\n      stats                    Summary
  statistics of checklist\n\nIt will give you a summary of the commands you can enter
  at this point.\nThere are no entries yet so all you can do is add them.\n\n    $
  git todo add Add an informative README file\n    1: [ ] Add an informative README
  file\n\nEach entry has a number in the left column and a box. Empty boxes mean\nthe
  item is still to be done. When you've finished a task, mark it done\nusing the number
  as a reference:\n\n    $ git todo done 1\n    1: [x] Add an informative README file\n\nYou
  can also \"undo\" items if you realise that the fix you made wasn't so\nhot after
  all, or you didn't understand the issue fully, or whatever\nother reason.\n\nFinally
  you can remove items entirely from the list. This is permanent\nand can't be undone.\n\n##
  Advanced Usage\n\nIf you're knee deep in work on one branch and you'd like to change
  the\nchecklist for another branch, all the commands will recognise the\n`--branch`
  (or `-b`) option.\n\n    $ git todo add --branch newparser Make nicer error messages\n\nIf
  you want to start a description of your note with a hyphen you can\nseparate it
  from the rest of the command options with a double-hyphen on\nits own.\n\n    $
  git todo add -- -b stopped working but --branch still okay\n\nIf you want to see
  all your branches at once use\n\n    $ git todo show --all\n\nObviously you can't
  supply the `--all` flag to any of the editing\ncommands --- you can only edit one
  branch's checklist at a time.\n\nThere is one more overview command that will take
  `--branch` or `--all`\nas an option:\n\n    $ git todo stats\n    2 tasks to do
  (4 in total)\n\n## Work In Progress Commits\n\nI've got an alias called `wip` which
  lets me quickly save all my unsaved\nwork in the current branch. You can use this
  as a basic command:\n\n    $ git config alias.wip=commit -a -m\"WIP\"\n\nBut if
  you use git-checklist the following might be more informative\nwhen you are trying
  to get the measure of your branches:\n\n    $ git config alias.wip=!git commit -a
  -m\\\"\"WIP $(git todo stats)\"\\\"\n\nThen you'll get a commit that says something
  like _WIP 2 tasks to do (4\nin total_ which is much nicer. For the cherry on top
  I also use\n`prepare-commit-msg` to pipe the result of `git todo show` to the commit\nmessage.
  The summary line will contain a summary and the rest of the\nmessage will contain
  the current state of the branch.\n\n## Background Details\n\nThe checklists are
  stored in `.git/checklist/<branchname>`. The\nserialised form is basically just
  the checklists without the number\nprefix. This is similar to the checklist format
  used by GitHub's\nextended Markdown, so you can re-use the file contents if desired.\n\nThe
  format is very easy to read and edit manually.\n\n    [ <mark> ] <space> <description>
  <newline>\n\nThe _<mark>_ is either \"x\" for a completed item or a space otherwise.\n(The
  parser will accept any non-\"x\" as pending but will always write a\nspace.) The
  description must not contain a newline but is otherwise\nfreeform.\n\nThe checklist
  for the working directory is whatever branch name is\npointed to by `HEAD`. I have
  not tested it with a detached head, though I\nguess you'd just end up with a SHA
  as a branch name.\n\n## Installing It Is Fairly Easy\n\nAssuming you've got a Haskell
  installation (if not, [grab the Haskell\nplatform] [hp]) you can grab the source
  and build with Cabal.\n\n    $ git clone http://github.com/dougalstanton/git-checklist\n
  \   $ cd git-checklist\n    $ cabal build\n    $ cabal install\n\n[hp]: <http://www.haskell.org/platform>\n
  \   \"Haskell for Windows, Mac OS X and Linux\"\n\n## Shortcomings\n\nThe data is
  stored in a separate directory inside `.git` which isn't\nversioned --- this is
  a local list only. I am open to suggestions to\nmake this versioned though it is
  not a priority for me. My workflow is\nbased around a single computer.\n\nThe read/write
  step bashes into the awkwardness of lazy IO.\n\nIt doesn't cope very well with not
  being somewhere inside a repository.\nIt shouldn't wreck anything but the error
  message isn't very refined.\n\n## Upgrading\n\nIf you were using a pre-1.0 version
  the file format has changed\nincompatibly. There is a secret flag to upgrade:\n\n
  \   $ git-checklist --upgrade\n\nAlternatively you can do it manually *before you
  upgrade the\napplication* like this. The key part is to strip the first four\ncharacters
  from each line, ie the number--colon--space prefix.\n\n    for b in .git/checklist/*
  ; do\n        git-checklist show --branch $(basename $b) | cut -c 5- > $b\n    done\n\n"
license-name: LicenseRef-GPL
