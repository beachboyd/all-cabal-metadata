homepage: http://github.com/isovector/ecstasy/
changelog-type: markdown
hash: b215559e468d6e9735ec67a51715263b76f1211acff16b086b12fb925a6cf496
test-bench-deps: {}
maintainer: sandy@sandymaguire.me
synopsis: A GHC.Generics based entity component system.
changelog: ! "# Revision history for ecstasy\n\n## 0.2.0.1  -- 2018-05-10\n\n* Also
  export 'StorageType'.\n\n## 0.2.0.0  -- 2018-05-10\n\n* Renamed 'get*' to 'query*'.\n*
  Renamed 'newEntity' to 'createEntity'.\n* Renamed 'defEntity' to 'newEntity'.\n*
  Renamed 'defEntity'' to 'unchanged'.\n* Renamed 'defWorld' to 'defStorage'.\n* Significant
  performance improvements.\n* Added a 'Virtual' component type, allowing for easy
  integration with systems\n    that own their own data. Getting and setting on 'Virtual'
  components\n    dispatch as actions in the underlying monad stack.\n* Added proper
  type wrappers around 'SystemT' and 'QueryT' so they don't eat up\n    valuable mtl
  instances.\n* Removed the 'Ent' parameter from the 'efor' callback, since this can
  now be\n    gotten in any 'QueryT' context via 'queryEnt'.\n* Parameterized 'emap'
  and 'efor' by an 'EntityTarget', which allows for calling\n    these functions over
  specific groups of entities.\n* Added 'eover': a combination of 'emap' and 'efor'.\n\n##
  0.1.1.0  -- 2018-02-18\n\n* Added 'deleteEntity' (function) and 'delEntity' (QueryT
  setter).\n\n## 0.1.0.1  -- 2018-02-14\n\n* Added 'yieldSystemT' for resuming a 'SystemT'
  computation later.\n* Bumped the upper bound on 'base' to 5 (thanks to nek0).\n\n##
  0.1.0.0  -- 2017-12-27\n\n* First version. Released on an unsuspecting world.\n\n"
basic-deps:
  base: ! '>=4.9 && <5'
  containers: -any
  mtl: -any
  transformers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
author: Sandy Maguire
latest: '0.2.0.1'
description-type: haddock
description: ! 'Ecstasy is an entity-component system for Haskell. It''s inspired
  by

  <https://hackage.haskell.org/package/apecs apecs>, but makes the design

  decision to focus on being idiomatic rather than being fast. Maybe. I haven''t

  actually benchmarked it.


  We achieve being idiomatic by using ''GHC.Generics'' and tricky type families

  to derive performant data stores given only a record of the desired

  components.'
license-name: BSD3
