homepage: ''
changelog-type: ''
hash: 6afb696ebbf6df666d9ce4a42858b4ccf5acaae85a26239f66a3104227625b66
test-bench-deps: {}
maintainer: Marcel Fourné (haskell@marcelfourne.de)
synopsis: Elliptic Curve Cryptography for Haskell
changelog: ''
basic-deps:
  cereal: ! '>=0.4 && <0.6'
  bytestring: ! '>=0.10 && <0.11'
  SHA: ! '>=1.6.4 && <1.7'
  base: ! '>=4 && <5'
  crypto-api: ! '>=0.13 && <0.14'
  vector: ! '>=0.10 && <0.12'
all-versions:
- '0.0'
- 0.0.1
author: Marcel Fourné
latest: 0.0.1
description-type: text
description: ! "ECC\n---\nRSA just doesn't cut it anymore for fast public-key crypto.
  Keys are large for reasonable security making it quite slow...\nEnter elliptic curves:
  smaller numbers are necessary and everything is faster. Maybe this library is not
  for embedded system usage, but now people can experiment with ECC for those use-cases
  where some form of RSA would be chosen otherwise.\n\n\nTiming Attack Resistance\n------------------------\nThe
  point multiplication uses the montgomery ladder algorithm which should be timing
  attack resistant, but when mul by a number in binary form 1000..0 the operation
  gets strangely fast (us instead of ms) and 1000..0001 it is strangely slow (1.5
  times), which hints to something fishy going on. More research will follow, but
  sidechannel-resistance is not totally out-of-focus. \nTesting has given me the idea
  that the following-zeroes-case massively benefits from branch-prediction and the
  trailing-one-case throws it totally off (will have to check that on other CPUs).
  \"More natural\" numbers are safer (tested), but I wouldn't dare to say that the
  matter is resolved.\nP.S.: 2^N-1 does not show the cache-problem, only long rows
  of zeroes.\n\n\nMotivation\n----------\nThis is a side-project from which other
  people may benefit. Due to time-constraints, I can't work as much on it as I would
  like. If you use/like it or want to make some criticism heard, please write me an
  email."
license-name: BSD-3-Clause
