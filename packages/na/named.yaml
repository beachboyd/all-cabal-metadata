homepage: ''
changelog-type: markdown
hash: 430a8136e1d3d84b10cb1ff84b5da4820fc0afc671942858dddee97e29eedf66
test-bench-deps:
  base: ! '>=4.9 && <4.13'
  named: -any
maintainer: Vladislav Zavialov <vlad.z.4096@gmail.com>
synopsis: Named parameters (keyword arguments) for Haskell
changelog: ! '## 0.2.0.0


  * Removed ''Flag'', ''named'', ''Apply'', ''apply''.

  * Changed notation: ''Named'' is now ''(:!)'' in types, ''Arg'' in patterns.

  * Added ''arg'', ''argF''.

  * Support for optional parameters: see ''argDef'', ''defaults'', ''(:?)''.

  * ''with #param value'' is now ''with (#param value)'' to allow ''with defaults''.

  * Internals are now exposed from "Named.Internal".


  ## 0.1.0.0


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.9 && <4.13'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
author: Vladislav Zavialov
latest: '0.2.0.0'
description-type: haddock
description: ! '`named` is a lightweight library for named function parameters (keyword

  arguments) based on overloaded labels. Keyword arguments have several

  advantages over positional arguments:


  * they can be supplied in arbitrary order

  * their names serve as documentation at call site

  * it is impossible to accidentally mix them up


  Unlike @newtype@ wrappers, keyword arguments don''t pollute the global

  namespace, don''t require top-level definitions, and don''t need to be

  exported.


  This implementation of named parameters is typesafe, provides good type

  inference, descriptive type errors, and has no runtime overhead.


  Example usage:


  > import Named

  >

  > createSymLink :: "from" :! FilePath -> "to" :! FilePath -> IO ()

  > createSymLink (Arg from) (Arg to) = ...

  >

  > main = createSymLink ! #from "/path/to/source"

  >                      ! #to "/target/path"'
license-name: BSD3
