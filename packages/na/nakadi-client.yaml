homepage: https://github.com/mtesseract/nakadi-haskell#readme
changelog-type: ''
hash: 8d5fe031be7ab33b3961088e47959b844d05c92480579aa5b73f7719bf27ee21
test-bench-deps:
  warp: -any
  http-client: -any
  conduit-combinators: -any
  bytestring: -any
  lens-aeson: -any
  wai: -any
  aeson-casing: -any
  split: -any
  stm: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  retry: -any
  safe-exceptions: -any
  async: -any
  conduit: -any
  conduit-extra: -any
  containers: -any
  lens: -any
  nakadi-client: -any
  iso8601-time: -any
  http-client-tls: -any
  mtl: -any
  classy-prelude: -any
  hashable: -any
  tasty-hunit: -any
  monad-logger: -any
  transformers: -any
  random: -any
  tasty: -any
  say: -any
  scientific: -any
  http-conduit: -any
  resourcet: -any
  http-types: -any
  aeson: -any
  template-haskell: -any
  vector: -any
maintainer: mtesseract@silverratio.net
synopsis: Client library for the Nakadi Event Broker
changelog: ''
basic-deps:
  http-client: -any
  conduit-combinators: -any
  bytestring: -any
  aeson-casing: -any
  split: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  retry: -any
  safe-exceptions: -any
  conduit: -any
  conduit-extra: -any
  containers: -any
  lens: -any
  iso8601-time: -any
  http-client-tls: -any
  mtl: -any
  hashable: -any
  monad-logger: -any
  transformers: -any
  scientific: -any
  http-conduit: -any
  resourcet: -any
  http-types: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.4.0.0'
author: Moritz Schulte
latest: '0.4.0.0'
description-type: markdown
description: ! "# nakadi-client [![Hackage version](https://img.shields.io/hackage/v/nakadi-client.svg?label=Hackage)](https://hackage.haskell.org/package/nakadi-client)
  [![Stackage version](https://www.stackage.org/package/nakadi-client/badge/lts?label=Stackage)](https://www.stackage.org/package/nakadi-client)
  [![Build Status](https://travis-ci.org/mtesseract/nakadi-client.svg?branch=master)](https://travis-ci.org/mtesseract/nakadi-client)\n\n###
  About\n\n`nakadi-client` is a BSD2/BSD3 licensed Haskell client library for\ninteracting
  with the [Nakadi event\nbroker](https://zalando.github.io/nakadi/) system developed
  by\n[Zalando](https://github.com/zalando). The streaming is built on top\nof [Conduit](https://haskell-lang.org/library/conduit).\n\nPlease
  note that the **API is not considered stable yet**.\n\n`nakadi-client` provides:\n\n-
  Docker based test suite testing against the official Nakadi [docker\n  image](https://github.com/zalando/nakadi#running-a-server)
  (in\n  progress).\n\n- A rather direct translation of Nakadi's REST API to Haskell.
  Thus,\n  if you are familiar with Nakadi's REST API, the API exposed by\n  `nakadi-client`
  will feel very familiar.\n\n- Where suitable, `nakadi-client` provides *additional*
  higher-level\n  interfaces.\n\n- A type-safe API for interacting with Nakadi. For
  example, the name\n  of an event type has type `EventTypeName`, not `Text` or something\n
  \ generic.\n\n- Integrated and configurable retry mechanism.\n\n- Conduit based
  interfaces for streaming events.\n\n- Convenient Subscription API interface (`subscriptionSource`
  &\n  `runSubscription`), which frees the user from any manual bookkeeping\n  of
  the Subscription Stream ID necessary for commiting cursors.\n\n- Mechanism for registering
  callbacks for logging and token injection.\n\n- Correct types for values like `CursorOffset`
  (which must be treated\n  as opaque strings).\n\n- Basically each API function is
  exposed in two versions: One which\n  requires the caller to pass in a Nakadi configuration
  value\n  containing the information about how to connect to Nakadi and one\n  which
  is suffixed with `R` (think: Reader monad), which expects to\n  find the Nakadi
  configuration in the environment provided by a\n  reader monad in your application's
  monad stack.\n\n### Example\n\nExample using the Subscription API:\n\n```haskell\nimport
  qualified Network.Nakadi as Nakadi\n\nprocessSubscription :: Nakadi.SubscriptionId
  -> IO ()\nprocessSubscription subscriptionId = do\n  runResourceT $ do\n    (connection,
  source) <- Nakadi.subscriptionSource config Nothing subscriptionId\n    Nakadi.runSubscription
  config connection $\n      source .| iterMC processEvent .| Nakadi.subscriptionSink\n```\n"
license-name: BSD3
