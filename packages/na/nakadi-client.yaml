homepage: http://nakadi-client.haskell.silverratio.net
changelog-type: markdown
hash: 21858d4bffd633155abbb8d70bbc89c0b2b3d3ff23146a405e80c579467f995b
test-bench-deps:
  warp: -any
  http-client: -any
  async-timer: ! '>=0.2.0.0 && <0.3'
  exceptions: -any
  bytestring: -any
  lens-aeson: -any
  wai: -any
  aeson-casing: -any
  unliftio: -any
  split: -any
  stm: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  retry: -any
  safe-exceptions: ! '>=0.1.7.0 && <0.2'
  monad-control: -any
  async: -any
  conduit: ! '>=1.3.0 && <1.4.0'
  stm-conduit: ! '>=4.0.0 && <4.1.0'
  conduit-extra: ! '>=1.3.0 && <1.4.0'
  fast-logger: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  nakadi-client: -any
  iso8601-time: -any
  http-client-tls: -any
  mtl: -any
  classy-prelude: ! '>=1.4.0 && <1.5.0'
  hashable: -any
  tasty-hunit: -any
  transformers-base: -any
  stm-chans: -any
  monad-logger: -any
  transformers: -any
  random: -any
  tasty: -any
  say: -any
  aeson-qq: ! '>=0.8.2 && <0.9'
  scientific: -any
  http-conduit: -any
  resourcet: ! '>=1.2.0 && <1.3'
  http-types: -any
  aeson: -any
  template-haskell: -any
  vector: -any
maintainer: mtesseract@silverratio.net
synopsis: Client library for the Nakadi Event Broker
changelog: ! '# Nakadi-Client Change Log


  ## v0.6.0.0


  * Nakadi *business events* are supported.


  * Support for concurrent workers consuming a subscription. This feature is activated
  using the function `setWorkerThreads`.


  * The modelling of the subscription API has been simplified by by differentiating
  between `SubscriptionRequest` (before creation) and `Subscription` (after creation).


  * An experimental API for creating a Conduit event source for a given subscription
  is included, allowing simulating the old low-level API using the Subscription API.


  * A new function `withSubscription` is included, providing an interface for creating
  a subscription and automatically passing its subscription ID to some user-provided
  action.


  * A new function `withTemporarySubscription` is included, which is very similar
  to `withSubscription`, but with the crucicial difference that the subscription will
  be automatically deleted after the user-provided action has terminated.


  * Support for the new `show_time_lag` field when retrieving subscription statistics
  has been added.


  * An experimental `MonadNakadi` instance for the `IO` monad using a global Nakadi
  configuration has been added. The new module `Network.Nakadi.Unsafe.IO` exposes
  functionality for accessing this global Nakadi configuration. The new instance for
  `IO` allows e.g. the evaluation of Nakadi calls interactively in GHCi without the
  need to run any monad transformers.


  * A new convenience function `newConfigFromEnv` is exposed, which allows creating
  a Nakadi configuration with the Nakadi service URL being derived automatically from
  the environment variable `NAKADI_URL`.

'
basic-deps:
  http-client: -any
  async-timer: ! '>=0.2.0.0 && <0.3'
  exceptions: -any
  bytestring: -any
  aeson-casing: -any
  unliftio: ! '>=0.2.4.0 && <0.3'
  split: -any
  stm: -any
  base: ! '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  retry: -any
  safe-exceptions: ! '>=0.1.7.0 && <0.2'
  monad-control: -any
  async: ! '>=2.2.1 && <2.3.0'
  conduit: ! '>=1.3.0 && <1.4.0'
  conduit-extra: ! '>=1.3.0 && <1.4.0'
  containers: -any
  lens: -any
  unliftio-core: -any
  iso8601-time: -any
  http-client-tls: -any
  mtl: -any
  hashable: -any
  transformers-base: -any
  stm-chans: -any
  monad-logger: -any
  transformers: -any
  scientific: -any
  http-conduit: ! '>=2.3.0 && <2.4'
  resourcet: ! '>=1.2.0 && <1.3'
  http-types: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.3'
- '0.5.1.0'
- '0.6.0.0'
- '0.6.1.0'
author: Moritz Clasmeier
latest: '0.6.1.0'
description-type: markdown
description: ! "# nakadi-client [![Hackage version](https://img.shields.io/hackage/v/nakadi-client.svg?label=Hackage)](https://hackage.haskell.org/package/nakadi-client)
  [![Stackage version](https://www.stackage.org/package/nakadi-client/badge/lts?label=Stackage)](https://www.stackage.org/package/nakadi-client)
  [![Build Status](https://travis-ci.org/mtesseract/nakadi-client.svg?branch=master)](https://travis-ci.org/mtesseract/nakadi-client)\n\n###
  About\n\n`nakadi-client` is a BSD2/BSD3 licensed Haskell client library for\ninteracting
  with the [Nakadi event\nbroker](https://zalando.github.io/nakadi/) system developed
  by\n[Zalando](https://github.com/zalando). The streaming is built on top\nof [Conduit](https://haskell-lang.org/library/conduit).\n\nPlease
  note that the **API is not considered stable yet**.\n\n`nakadi-client` provides:\n\n-
  Docker based test suite testing against the official Nakadi [docker\n  image](https://github.com/zalando/nakadi#running-a-server).\n\n-
  A type-safe API for interacting with Nakadi. For example, the name\n  of an event
  type has type `EventTypeName`, not `Text` or something\n  generic. Correct types
  for values like `CursorOffset` are provided\n  (which must be treated as opaque
  strings).\n\n- Integrated and configurable retry mechanism.\n\n- Conduit based interfaces
  for streaming events.\n\n- Support for temporary subscriptions.\n\n- Convenient
  Subscription API interface (`subscriptionProcess` &\n  `subscriptionProcessConduit`),
  which frees the user from any manual\n  bookkeeping.\n\n- Mechanism for registering
  callbacks for logging and token injection.\n\n### Example\n\nExample code showing
  how to dump a subscription:\n\n```haskell\ndumpSubscription :: (MonadLogger m, MonadNakadi
  IO m) => Nakadi.SubscriptionId -> m ()\ndumpSubscription subscriptionId =\n  Nakadi.subscriptionProcess
  Nothing subscriptionId processBatch\n\n  where processBatch :: MonadLogger m =>
  Nakadi.SubscriptionEventStreamBatch Value -> m ()\n        processBatch batch =\n
  \         logInfoN (tshow batch)\n```\n"
license-name: BSD3
