homepage: https://github.com/aaronvargo/naperian#readme
changelog-type: ''
hash: 75b87450ec8608496d94d8e15c7bed1326a21a67da7f03abd8def04971f16b81
test-bench-deps: {}
maintainer: Aaron Vargo <fpfundamentalist@gmail.com>
synopsis: Efficient representable functors
changelog: ''
basic-deps:
  free: ! '>=4.11'
  base: ! '>=4.7 && <4.13'
  comonad: ! '>=4.2.7'
  adjunctions: ! '>=4.2.1'
  distributive: ! '>=0.4.4'
  streams: ! '>=3.2.1'
  transformers: ! '>=0.3.0'
all-versions:
- 0.1.0.0
author: Aaron Vargo
latest: 0.1.0.0
description-type: markdown
description: ! "# naperian\n\nThis package provides `Naperian` functors, a more powerful
  form of\n`Distributive` functor which is equal in power to a `Representable` functor
  (for\nsome `Rep`), but which can be implemented asymptotically more efficiently
  for\ninstances which don't support random access.\n\n`Distributive` functors allow
  distribution of `Functor`s:\n\n```haskell\ndistribute :: (Distributive f, Functor
  g) => g (f a) -> f (g a)\n```\n\nWith `Distributive`, you can, for example, zip
  two containers by distributing\nthe `Pair` `Functor`:\n\n```haskell\ndata Pair a
  = Pair a a deriving Functor\n\nzipDistributive :: Distributive f => f a -> f a ->
  f (a, a)\nzipDistributive xs ys = fmap f $ distribute (Pair xs ys)\n  where f (Pair
  x y) = (x, y)\n```\n\nNote that the two containers must have elements of the same
  type. `Naperian`,\nhowever, allows the containers to have elements of different
  types:\n\n```haskell\nzipNaperian :: Naperian f => f a -> f b -> f (a, b)\n```\n\nIt
  does so by allowing distribution of *`Functor1`s*, where a `Functor1` is a\nfunctor
  from `Hask -> Hask` to `Hask`:\n\n```haskell\nclass Functor1 w where\n  map1 ::
  (forall a. f a -> g a) -> w f -> w g\n\ndistribute1 :: (Naperian f, Functor1 w)
  => w f -> f (w Identity)\n```\n\nThe more polymorphic zip can then be implemented
  by distributing the `Pair1` `Functor1`:\n\n```haskell\ndata Pair1 a b f = Pair1
  (f a) (f b)\ninstance Functor1 (Pair1 a b) where ...\n\nzipNaperian :: Naperian
  f => f a -> f b -> f (a, b)\nzipNaperian as bs = fmap f $ distribute1 (Pair1 as
  bs)\n  where f (Pair1 (Identity a) (Identity b)) = (a, b)\n```\n\n`Naperian` functors
  can be shown to be equivalent to `Representable` functors,\nfor some `Rep`, by selecting
  `Rep f = âˆ€x. f x -> x`. That is, a position in a\n`Naperian` container can be represented
  as a function which gets the value at\nthat position. `tabulate` can then be derived
  using the `Functor1`:\n\n```haskell\nnewtype TabulateArg a f = TabulateArg ((forall
  x. f x -> x) -> a)\n```\n\nThe rest is left as an exercise for the reader.\n"
license-name: BSD-3-Clause
