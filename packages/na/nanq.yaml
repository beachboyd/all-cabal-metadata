homepage: https://github.com/fosskers/nanq
changelog-type: markdown
hash: 344cb11afa618ca099c9f01b2400856424304431a4544bddc6b90780f27346c7
test-bench-deps: {}
maintainer: colingw@gmail.com
synopsis: Performs 漢字検定 (Japan Kanji Aptitude Test) level analysis on given Kanji.
changelog: ! '2.0.0

  -----

  - New JSON-only output

  - Revamped, modernized backend

'
basic-deps:
  bytestring: ! '>=0.10.6.0'
  extensible-effects: ! '>=1.11.0.0'
  base: <5
  aeson-pretty: ! '>=0.7.2'
  text: ! '>=1.2.2.0'
  containers: ! '>=0.4.0.0'
  kanji: ! '>=2 && <3'
  microlens-aeson: ! '>=2.1.0'
  optparse-applicative: ! '>=0.12.0.0'
  microlens: ! '>=0.3.5.0'
  aeson: ! '>=0.9.0.1'
all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 2.0.0
- 3.0.0
- 3.0.1
author: Colin Woodbury
latest: 3.0.1
description-type: markdown
description: ! "NANQ\n====\nAuthor:  Colin Woodbury <colingw@gmail.com>\n\nNanQ is
  a Japanese Kanji analysation program written in Haskell. Its main\nfunction is to
  tell what Kanji belong to what Level of the Japanese National\nKanji Examination
  (漢字検定).\n\nNanQ can be used to:\n - determine what Level individual Kanji belong
  to\n - determine the average Level (difficulty, in other words)\n   of a group of
  Kanji\n - apply the above to whole files of Japanese\n\nINSTALLING NANQ\n---------------\nFirst,
  get the source files from:\n\nhttps://github.com/fosskers/nanq\n\nNanQ is written
  in Haskell and uses the\n[stack](http://docs.haskellstack.org/en/stable/README.html)
  tool. Once\n`stack` is installed, move to the source directory and perform:\n\n
  \   stack build\n    stack install\n\nUSAGE\n-----\nAssuming you've made it so that
  you can run the executable, the following\ncommand-line options are available:\n\n####
  ANALYSIS OPTIONS\n Short  | Long   | Description\n -----  | ------ | -----------\n
  -a | --average  | Given Japanese input, finds the average Level of all Kanji present\n
  -u | --unknowns | Reports Kanji whose Level could not be determined\n -h | --help
  \    | Prints a message explaining these options\n -l | --leveldist | Find the %
  distribution of Levels in given Japanese\n -s | --splits   | Show what Level each
  Kanji belongs to\n -d | --density  | Determines how much of the input is made up
  of Kanji\n -e | --elementary | Determines how much of the input is made up of Kanji
  learned in Japanese Elementary School\n\n#### INPUT SOURCE OPTIONS\n Short  | Long
  \  | Description\n -----  | ------ | -----------\n *none* | *none* | Analyse a String
  of Japanese given from the command line\n -f     | --file | Get input from a given
  file\n\n#### NOTES ON CLOs\n * All options above can be mixed to include their analysis
  result\n in the output JSON.\n * `-h` will over-ride any other options or arguments,
  discarding them and\n   printing a help message.\n\n#### Examples\n*Single Kanji*\n```\n$>
  nanq -s 日\n{\n  \"levelSplit\": {\n    \"Ten\": \"日\"\n  }\n}\n```\n\n*A Japanese
  sentence*\n```\n$> nanq -s これは日本語\n{\n    \"levelSplit\": {\n      \"Nine\": \"語\",\n
  \     \"Ten\": \"本日\"\n    }\n}\n```\n\n*All options*\n```\n$> nanq -leadus これは日本語\n{\n
  \   \"levelSplit\": {\n      \"Nine\": \"語\",\n      \"Ten\": \"本日\"\n    },\n    \"elementary\":
  1,\n    \"average\": 9.666667,\n    \"density\": 0.5,\n    \"unknowns\": \"\",\n
  \   \"distributions\": {\n      \"Nine\": 0.33333334,\n      \"Ten\": 0.6666667\n
  \   }\n}\n```\n"
license-name: GPL-3.0-only
