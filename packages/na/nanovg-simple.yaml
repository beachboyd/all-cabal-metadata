homepage: https://github.com/CthulhuDen/nanovg-simple#readme
changelog-type: ''
hash: a3b7f89fc44d02954ca0843e6ba987c5659ba3cd63377b37a484c1e5a91a9748
test-bench-deps: {}
maintainer: cthulhu.den@gmail.com
synopsis: Simple interface to rendering with NanoVG
changelog: ''
basic-deps:
  OpenGL: ! '>=3.0.2.2 && <3.1'
  base: ! '>=4.7 && <5'
  time: ! '>=1.8.0.2 && <1.10'
  text: ! '>=1.2.3.0 && <1.3'
  safe-exceptions: ! '>=0.1.7.0 && <0.2'
  monad-loops: ! '>=0.4.3 && <0.5'
  nanovg-simple: -any
  nanovg: ! '>=0.6.0.0 && <0.7'
  GLFW-b: ! '>=3.2.1.0 && <3.3'
all-versions:
- '0.4.0.0'
author: Cthulhu
latest: '0.4.0.0'
description-type: markdown
description: ! "# nanovg-simple\n\nSimple interface to creating window with associated
  NanoVG context. See\n[nanovg.h](https://github.com/memononen/nanovg/blob/master/src/nanovg.h)
  for comprehensive listing of methods.\n\nRefer to `Graphics.NanoVG.Simple` module
  for utilities to create NanoVG window. Simple example:\n\n```haskell\nimport           Graphics.NanoVG.Simple\nimport
  qualified NanoVG as NVG\n\nmain :: IO ()\nmain = run 800 600 \"Simple app\" $ simpleWindow
  $\n  NVG.circle ctx 10 10 10 *> NVG.fill ctx\n```\n\nAlso provided is wrapper for
  rendering combination of composable picture pieces: see `Graphics.NanoVG.Picture`.\n\n```haskell\nimport
  \          Graphics.NanoVG.Picture\nimport           Graphics.NanoVG.Simple\nimport
  qualified NanoVG as NVG\n\nmain :: IO ()\nmain = run 800 600 \"Simple app\" $ asWindow
  $\n  pure $ translateP 50 0 $ pictures\n    [ fill (NVG.Color 1 1 1 1) $ circle
  (10, 10) 10\n    , stroke (NVG.Color 1 1 1 1) $ circle (10, 10) 15\n    ]\n```\n"
license-name: BSD3
