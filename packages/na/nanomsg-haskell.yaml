homepage: https://github.com/ivarnymoen/nanomsg-haskell
changelog-type: text
hash: 803793de17d6350b8c51d7cbea1a8ccd627c375cd1b24be013132b149ca3349c
test-bench-deps:
  bytestring: ! '>=0.9.0 && <0.11'
  test-framework: -any
  base: ! '>=4.5 && <5'
  test-framework-quickcheck2: -any
  criterion: -any
  nanomsg-haskell: -any
  test-framework-th: -any
  binary: -any
  QuickCheck: -any
  zeromq4-haskell: -any
maintainer: ivar dot nymoen at gmail dot com
synopsis: Bindings to the nanomsg library
changelog: |+
  0.2.4
    * Bumped upper bound on binary
  0.2.3
    * Switched to safe ffi calls to play better with the runtime
    * Tests fixed for ghc 7.10
    * Some minor tweaks to docs and metadata
  0.2.2
    * Added a thin Binary based serialization layer
    * Benchmarks now depend on ZMQ4

basic-deps:
  bytestring: ! '>=0.9.0 && <0.11'
  base: ! '>=4.5 && <5'
  binary: ! '>=0.7 && <0.9'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0
- 0.2.1.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Ivar Nymoen
latest: 0.2.4
description-type: markdown
description: |
  # nanomsg-haskell

  This is a Haskell binding for the nanomsg library: <http://nanomsg.org/>.

  There's support for [(evented)](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent.html#v:threadWaitRead) blocking send and recv, a non-blocking receive,
  and for all the socket types and the functions you need to wire them up and
  tear them down again.

  Most socket options are available through accessor and mutator
  functions. Sockets are typed, transports are not.


  ## Building

  You would normally make sure the nanomsg library is on your system and then
  install from Hackage, but can build from source following these steps:

    1. Build and install nanomsg (and zeromq, if you are building benchmarks)
    1. git clone https://github.com/ivarnymoen/nanomsg-haskell
    1. cd nanomsg-haskell && cabal sandbox init
    1. cabal install --dependencies-only [--enable-tests] [--enable-benchmarks]
    1. cabal configure [--enable-tests] [--enable-benchmarks]
    1. cabal build
    1. [cabal test]


  ## Usage

  Simple pub/sub example:

  Server:
  ```haskell
  module Main where

  import Nanomsg
  import qualified Data.ByteString.Char8 as C
  import Control.Monad (mapM_)
  import Control.Concurrent (threadDelay)

  main :: IO ()
  main =
      withSocket Pub $ \s -> do
          _ <- bind s "tcp://*:5560"
          mapM_ (\num -> sendNumber s num) (cycle [1..1000000 :: Int])
      where
          sendNumber s number = do
              threadDelay 1000        -- let's conserve some cycles
              let numAsString = show number
              send s (C.pack numAsString)
  ```

  Client:
  ```haskell
  module Main where

  import Nanomsg
  import qualified Data.ByteString.Char8 as C
  import Control.Monad (forever)

  main :: IO ()
  main =
      withSocket Sub $ \s -> do
          _ <- connect s "tcp://localhost:5560"
          subscribe s $ C.pack ""
          forever $ do
              msg <- recv s
              C.putStrLn msg
  ```

  Nonblocking client:
  ```haskell
  module Main where

  import Nanomsg
  import qualified Data.ByteString.Char8 as C
  import Control.Monad (forever)
  import Control.Concurrent (threadDelay)

  main :: IO ()
  main =
      withSocket Sub $ \s -> do
          _ <- connect s "tcp://localhost:5560"
          subscribe s $ C.pack ""
          forever $ do
              threadDelay 700           -- let's conserve some cycles
              msg <- recv' s
              C.putStrLn $ case msg of
                  Nothing -> C.pack "No message"
                  Just m  -> m
  ```
license-name: MIT
