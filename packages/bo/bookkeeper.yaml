homepage: http://github.com/turingjump/bookkeeper#readme
changelog-type: markdown
hash: 1e115dc336d17b4d32f09d78dc90ad209b377331df8073f970f9f7169c95104a
test-bench-deps:
  type-level-sets: -any
  base: ! '>=4.9 && <4.11'
  data-default-class: -any
  hspec: ! '>2 && <3'
  criterion: -any
  doctest: ! '>=0.9 && <0.12'
  bookkeeper: -any
  QuickCheck: ! '>=2.8 && <2.11'
  Glob: ! '>=0.7 && <0.9'
  yaml: ==0.8.*
maintainer: jkarni@gmail.com
synopsis: Anonymous records and overloaded labels
changelog: ! "# 0.2.4\n\n* Added 'rlens' and lens 'IsLabel' instance.\n\n# 0.2.3\n\n*
  Implement 'fromRecord' for converting values from record.\n\n# 0.2.2.0\n\n* Add
  'Data.Default' instance\n\n# 0.2.1.0\n\n* Add 'Gettable', 'Settable', 'Modifiable'
  type synonyms.\n\n# 0.2.0.0\n\n* Added Eq instance\n* Added Show instance\n* Changed
  the implementation of 'set' and 'modify'. It no longer needs\n  'ChooseFirst' to
  be in scope, and the class constraints changed.\n* Removed 'ChooseFirst'.\n\n# 0.1.0.0\n\n*
  Initial release\n"
basic-deps:
  type-level-sets: -any
  base: ! '>=4.9 && <4.11'
  data-default-class: -any
  markdown-unlit: -any
  bookkeeper: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3'
- '0.2.4'
- '0.2.5'
author: Julian K. Arni
latest: '0.2.5'
description-type: markdown
description: ! "# Bookkeeper [![Build Status][ci-img]][ci]\n\nBookkeeper is a new
  Haskell library that uses the new OverloadedLabels feature\nof GHC 8 to provide
  a new take on datatypes and records:\n\n~~~ {.haskell}\n{-# LANGUAGE DataKinds #-}\n{-#
  LANGUAGE TypeOperators #-}\n{-# LANGUAGE OverloadedLabels #-}\nimport Bookkeeper\n\n\njane
  :: Book '[ \"name\" :=> String, \"age\" :=> Int ]\njane = emptyBook\n     & #name
  =: \"Jane\"\n     & #age =: 30\n\n-- >>> jane\n-- Book {age = 30, name = \"Jane\"}\n--
  >>> jane ?: #name\n-- \"Jane\"\n~~~\n\nIt bears some similarities to Nikita Volkov's
  [record](https://nikita-volkov.github.io/record/)\nlibrary, but requires no Template
  Haskell.\n\nAccesing a field that does not exist is a type error, made nicer with
  GHCs new\ncustom type errors:\n\n~~~ {.haskell}\n -- >>> jane ?: #address\n--   â€¢
  The provided Book does not contain the field \"address\"\n--     Book type:\n--
  \    '[\"age\" ':-> Int, \"name\" ':-> String]\n~~~\n\n\nThe order in which fields
  are inserted or appear in types does not matter. That\nis, in:\n\n~~~ {.haskell}\n--
  type A = Book '[ \"field1\" :=> Int,  \"field2\" :=> Bool]\n-- type B = Book '[
  \"field2\" :=> Bool, \"field1\" :=> Int ]\n~~~\n\nTypes `A` and `B` are the same.\n\nYou
  can set, modify, or get fields. See the haddocks for more information.\n\n\n~~~
  {.haskell}\nmain :: IO ()\nmain = return ()\n~~~\n\n[ci-img]:   https://travis-ci.org/turingjump/bookkeeper.svg?branch=master\n[ci]:
  \      https://travis-ci.org/turingjump/bookkeeper\n"
license-name: BSD3
