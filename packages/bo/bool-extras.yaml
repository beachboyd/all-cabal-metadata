homepage: http://tom.lokhorst.eu/bool-extras
changelog-type: ''
hash: 4d46de500f0a86e9c87f19b300485bf8721bf6eced801a43ca122137fa177273
test-bench-deps: {}
maintainer: Tom Lokhorst <tom@lokhorst.eu>
synopsis: A fold function for Bool
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
all-versions:
- 0.2.0
- 0.3.0
- 0.4.0
author: ! 'Erik Hesselink,

  Jeroen Leeuwestein,

  Tom Lokhorst,

  Sebastiaan Visser'
latest: 0.4.0
description-type: haddock
description: ! 'The `bool'' function allows folding over boolean values.


  This is comparable to the `maybe'' or `either'' functions

  on their respective types.


  The `bool'' function is a replacement for the build-in

  @if then else@-syntax. However, since it is a function, it

  can be partially applied and passed around to higher order

  functions, like so:


  > ghci> :m + Data.Bool.Extras

  > ghci> let yesOrNo = bool "no" "yes"

  > ghci> map yesOrNo [True, False, True]

  > ["yes", "no", "yes"]


  Note that the arguments to `bool'' are in the opposite order

  of the @if then else@-syntax; First the false value, then

  the true value, and finally the boolean.'
license-name: BSD-3-Clause
