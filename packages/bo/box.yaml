homepage: https://github.com/tonyday567/box#readme
changelog-type: ''
hash: 8989047f827a063ae41d2d30d0b313e359d55f232b98ffe4b1eebb6598a11944
test-bench-deps:
  numhask: '>=0.7 && <0.8'
  base: '>=4.7 && <5'
  box: -any
  doctest: '>=0.16'
maintainer: tonyday567@gmail.com
synopsis: boxes
changelog: ''
basic-deps:
  exceptions: '>=0.10'
  numhask: ==0.7.*
  optparse-generic: '>=1.3.0 && <1.4'
  base: '>=4.7 && <5'
  time: '>=1.9'
  comonad: '>=5.0'
  box: -any
  text: '>=1.2'
  websockets: '>=0.12'
  numhask-space: '>=0.7 && <0.8'
  containers: ==0.6.*
  lens: '>=4.19'
  contravariant: '>=1.5'
  concurrency: '>=1.11'
  mtl: '>=2.2'
  mmorph: '>=1.1'
  transformers-base: '>=0.4'
  attoparsec: '>=0.13'
  generic-lens: '>=2.0'
  transformers: '>=0.5'
  random: '>=1.1'
  profunctors: '>=5.5'
  dejafu: '>=2.3'
all-versions:
- 0.0.1.1
- 0.0.1.2
- 0.0.1.4
- 0.0.1.5
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
author: Tony Day
latest: 0.6.3
description-type: markdown
description: "[box](https://tonyday567.github.io/box/index.html) [![Build Status](https://travis-ci.org/tonyday567/box.svg)](https://travis-ci.org/tonyday567/box)\n===\n\n>
  The box is dark and full of terrors.\n\nTake two ubiquitous concepts. There are
  things that emit stuff. They instantiate a particular thing on demand, somehow and
  somewhere beyond our concern and viewbox.  We ask an Emitter for an `a` and an `a`
  is there, or not (best to assume a `Maybe a`). The library calls this an Emitter:\n\n```\nnewtype
  Emitter m a = Emitter { emit :: m (Maybe a)}\n```\nIt emits over a type constructor,
  m, and this is often monadic in nature, and often IO.\n\nThen there is the opposite.
  \ There are things that commit stuff. We offer a Committer a particular thing and
  they take it away beyond our concerns. It is committed to the void. We offer an
  `a` and it is reported back whether the committment was succesful.The library calls
  this a Committer:\n\n```\nnewtype Committer m a = Committer { commit :: a -> m Bool}\n```\n\nThese
  two types are duals, across a wide spectrum of what that means. If you do something
  with a committer, like write to a socket, you can often immediately write an emitter
  the dual of this, like read from a socket.\n\nWhen you have both things, something
  that emits and something that commits, over the same carrier, you have a Box:\n\n```\ndata
  Box m c e = Box\n  { committer :: Committer m c\n  , emitter :: Emitter m e\n  }\n```\n\nA
  Box tends to flip polarity, like a Möbius strip. and sometimes like a Dali.\n\nYou
  can see a committer as a wire into the box, and an emitter as a wire out of the
  box. You can then think of the box as opaque, and make the tasks on the outside
  of the box that much easier, removing concern about what is going on inside the
  box. But then coding tends to get you inside the box, and point-of-view shifts.
  From inside the box, stuff,, a's,, are coming from what we had thought of as the
  committer. It is emitting from our new viewbox, and vice versa. You are the black
  box, and your box matters. \n\nNote how you can get confused with these metaphors.
  \ The wire going into the box is a committer from a point of view outside the metaphorical
  box but looks like an emitter from the inside. The wire going out is a committer
  from the inside and an emitter from the outside.\n\nThe key to understanding this
  library is to resist having to choose a single frame of reference and, instead,
  focus on the types.\n\nA `Box m c e` unifies the functorial wrapper `m` of the emitter
  and committer, which is what really makes it a functional box. Boxes can often be
  hooked together at this level for useful efficiencies.\n\nA Box is also a [profunctor](https://bartoszmilewski.com/2019/03/27/promonads-arrows-and-einstein-notation-for-profunctors/)
  and, to quote Bartos, a profunctor can be used to glue together two categories.\n\nLike
  other paradigms, boxes can be not fun places to get stuck in.  Much of the library
  are not, in fact, emitters and committers but emitter, committer and box continuations.
  If you gave me something that takes a box and does something, then I'll give you
  a something is a natural piece of logic within the library context, and so large
  parts of the functionality are [continuation-parsing style](https://ro-che.info/articles/2019-06-07-why-use-contt).\n\nFinally,
  the interface between boxes is a natural place to create concurrency, and Box.Queue
  provides queues that are guaranteed to not race or block.\n\n> “Do not define me
  by my gender or my socio-economic status, Noah Willis. Do not tell me who I am and
  do not tell me who society thinks I am and then put me in that box and expect me
  to stay there. Because, I swear to God, I will climb the hell out of that box and
  I will take that box you've just put me in and I will use that box to smash your
  face in until you're nothing more than a freckly, bloodied pulp. You got that, sweet
  cheeks?” ~ Megan Jacobson, Yellow\n\n\nrecipe\n---\n\n```\nstack exec --test concurrency-tests
  --file-watch\n```\n"
license-name: BSD-3-Clause
