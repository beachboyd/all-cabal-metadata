homepage: http://github.com/ekmett/eq/
changelog-type: markdown
hash: b000b0518e23faadb2fbdfdccc4459d15ad5f05070202945c6365df14d75b4f7
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Leibnizian equality
changelog: ! "4.1\n---\n* Add `TestEquality` and `TestCoercion` instances for `(:=)`.\n*
  Add `fromLeibniz` and `toLeibniz` functions for converting between `(:~:)`\n  (from
  `Data.Type.Equality`) and `(:=)`.\n* Add a `reprLeibniz` function to convert `(:=)`
  to a `Coercion`\n  (i.e., representational equality).\n* Make `(:=)` a newtype.\n*
  We can remove the `Trustworthy` claim and infer as `Safe` on modern GHCs.\n\n4.0.2\n-----\n*
  Made := kind polymorphic.\n\n4.0.1\n-----\n* Provided an explicit nominal `RoleAnnotation`.\n\n4.0\n---\n*
  Updated to work with `semigroupoids` 4.0\n\n3.1.1\n-----\n* Claim to be `Trustworthy`\n\n3.1\n---\n*
  Disabled observing injectivity through `TypeFamilies` for GHC >= 7.6\n\n3.0.1\n-----\n*
  Updated build system\n* Removed my personal intra-package dependency upper bounds\n*
  Added `README` and `CHANGELOG`\n"
basic-deps:
  semigroupoids: ! '>=4 && <6'
  base: ==4.*
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.3.1'
- '0.3.4'
- '0.3.4.1'
- '0.3.4.2'
- '0.3.4.3'
- '0.3.5'
- '0.3.6'
- '0.3.7'
- '0.3.7.1'
- '3.0'
- '3.1'
- '3.1.1'
- '4.0'
- '4.0.1'
- '4.0.2'
- '4.0.3'
- '4.0.4'
- '4.1'
author: Edward A. Kmett
latest: '4.1'
description-type: markdown
description: ! "eq\n==\n\n[![Hackage](https://img.shields.io/hackage/v/eq.svg)](https://hackage.haskell.org/package/eq)
  [![Build Status](https://secure.travis-ci.org/ekmett/eq.png?branch=master)](http://travis-ci.org/ekmett/eq)\n\nThis
  package provides a data type that witnesses equality between two types using Leibnizian
  equality.\n\nIt includes a [refinement to the notion of Leibnizian equality by Oleg
  Kiselyov](http://www.haskell.org/pipermail/haskell-cafe/2010-May/077177.html) \nthat
  permits it to refine equality using the injectively of type constructors via type
  families.\n\nContact Information\n-------------------\n\nContributions and bug reports
  are welcome!\n\nPlease feel free to contact me through github or on the #haskell
  IRC channel on irc.freenode.net.\n\n-Edward Kmett\n"
license-name: BSD3
