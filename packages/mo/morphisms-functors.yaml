homepage: https://github.com/iokasimov/morphisms-functors
changelog-type: markdown
hash: 03b74ddaf6f7253c899771a8f2269b1f7550e0ec5d7a66d021b0ca3db232a02f
test-bench-deps: {}
maintainer: Murat Kasimov <iokasimov.m@gmail.com>
synopsis: Functors, theirs compositions and transformations
changelog: ! '# 0.1.1

  * Define `Invariant` type class

  * Functors composition is just a type synonymous

  * `Control.Functor.Composition` -> `Control.Functor`


  # 0.1.2

  * Define `Adjoint` type class

  * `Control.Functor` -> `Control.Functor.Composition`

  * Move all composition-based classes into Composition module

  * Define laws for all classes, except `Pointable`, `Exclusive` and `Extractable`


  # 0.1.3

  * Define `I`, `II` and `III` to able make instances

  * Add `Identity` and `Constant` cases of functors

  * Weaken `Adjoint` type class requirements

  * Move all newtype wrappers to `Basic` module


  # 0.1.4

  * Add `Kleisli` and `Cokleisli` methods to `Bindable` and `Extendable` classes

  * Create supermodule `Control.Functor` that exports everything from this library

  * Remove `Composition` folder from classes modules

  * Move `Basic` functors to `Data.Functor` module

'
basic-deps:
  morphisms: ==0.1.0
all-versions:
- 0.1.2
- 0.1.3
- 0.1.4
author: Murat Kasimov
latest: 0.1.4
description-type: haddock
description: Attempt to define categorical abstractions in more robust and useful
  way.
license-name: MIT
