homepage: http://github.com/tittoassini/model
changelog-type: text
hash: b088be922981cc06b88584bbb4b5e4e43f6e13b2811e6f2ee3894f84ae60bc89
test-bench-deps:
  filemanip: ! '>=0.3.6.3'
  base: ! '>=4.8 && <5'
  doctest: ! '>=0.11.1'
  containers: ! '>=0.5.6.2'
  model: -any
  ghc-prim: ! '>=0.3.1.0'
  tasty-quickcheck: ! '>=0.8.4'
  tasty-hunit: ! '>=0.9.2'
  tasty: ! '>=0.11.0.2'
  pretty: ! '>=1.1.2.0'
maintainer: tittoassini@gmail.com
synopsis: Derive a model of a data type using Generics
changelog: ! "Significant and compatibility-breaking changes.\n\nVersion 0.4:\n\t-
  Data.Model.Types:\n\t\t- Modified type of 'constructors' and 'constructorInfo'\n\t\t-
  Removed instances of StringLike (replaced with Convertible)\n\t        - Modified
  behaviour of conversion from String to QualName\n\t- Data.Model.Util:\n\t        -
  modified type of 'mutualGroups' and 'transitiveClosure'\n\nVersion 0.3:\n   - Data.Model.Util:\n\t-
  Removed 'dependencies'\n\t- Added the (similar but not identical) function 'transitiveClosure'\n\n\n"
basic-deps:
  base: ! '>=4.8 && <5'
  containers: ! '>=0.5.6.2'
  convertible: ! '>=1.1.1.0'
  transformers: ! '>=0.4'
  deepseq: ! '>=1.4'
  pretty: ! '>=1.1.2.0'
all-versions:
- '0.2'
- '0.2.1'
- '0.2.4'
- '0.3'
- '0.4'
author: Pasqualino `Titto` Assini
latest: '0.4'
description-type: markdown
description: ! "\n[![Join the chat at https://gitter.im/Quid2/Lobby](https://badges.gitter.im/Quid2.svg)](https://gitter.im/Quid2/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build
  Status](https://travis-ci.org/Quid2/model.svg?branch=master)](https://travis-ci.org/Quid2/model)\n[![Hackage
  version](https://img.shields.io/hackage/v/model.svg)](http://hackage.haskell.org/package/model)\n[![Stackage
  Nightly](http://stackage.org/package/model/badge/nightly)](http://stackage.org/nightly/package/model)\n[![Stackage
  LTS](http://stackage.org/package/model/badge/lts)](http://stackage.org/lts/package/model)\n\nWith
  `model` you can easily derive models of Haskell data types.\n\nLet's see some code.\n\nWe
  need a couple of GHC extensions:\n\n```haskell\n{-# LANGUAGE DeriveGeneric, DeriveAnyClass
  #-}\n```\n\nImport the library:\n\n```haskell\nimport Data.Model\n```\n\nTo derive
  a model of a data type we need to make it an instance of the `Generic` and `Model`
  classes.\n\nFor data types without parameters, we can do it directly in the `deriving`
  clause of the definition:\n\n```haskell\ndata Direction = North | South | Center
  | East | West deriving (Show,Generic,Model)\n```\n\nFor data types with parameters
  we currently need a separate instance declaration for `Model`:\n\n```haskell\ndata
  Couple a b = Couple a b deriving (Show,Generic)\n```\n\n```haskell\ninstance (Model
  a,Model b) => Model (Couple a b)\n```\n\nInstances for a few common types (Bool,Maybe,Either..)
  are already predefined.\n\nWe use `typeModel` to get the model for the given type
  plus its full environment, that's to say the models of all the data types referred
  to, directly or indirectly by the data type.\n\nWe pass the type using a Proxy.\n\n```haskell\ntypeModel
  (Proxy:: Proxy (Couple Direction Bool))\n-> TypeModel\n->   { typeName =\n->       TypeApp\n->
  \        (TypeApp\n->            (TypeCon\n->               QualName\n->                 {
  pkgName = \"main\" , mdlName = \"Main\" , locName = \"Couple\" })\n->            (TypeCon\n->
  \              QualName\n->                 { pkgName = \"main\" , mdlName = \"Main\"
  , locName = \"Direction\" }))\n->         (TypeCon\n->            QualName\n->              {
  pkgName = \"ghc-prim\"\n->              , mdlName = \"GHC.Types\"\n->              ,
  locName = \"Bool\"\n->              })\n->   , typeEnv =\n->       fromList\n->
  \        [ ( QualName\n->               { pkgName = \"ghc-prim\" , mdlName = \"GHC.Types\"
  , locName = \"Bool\" }\n->           , ADT\n->               { declName = \"Bool\"\n->
  \              , declNumParameters = 0\n->               , declCons =\n->                   Just\n->
  \                    (ConTree\n->                        Con { constrName = \"False\"
  , constrFields = Left [] }\n->                        Con { constrName = \"True\"
  , constrFields = Left [] })\n->               }\n->           )\n->         , (
  QualName\n->               { pkgName = \"main\" , mdlName = \"Main\" , locName =
  \"Couple\" }\n->           , ADT\n->               { declName = \"Couple\"\n->               ,
  declNumParameters = 2\n->               , declCons =\n->                   Just\n->
  \                    Con\n->                       { constrName = \"Couple\"\n->
  \                      , constrFields = Left [ TypeCon (TypVar 0) , TypeCon (TypVar
  1) ]\n->                       }\n->               }\n->           )\n->         ,
  ( QualName\n->               { pkgName = \"main\" , mdlName = \"Main\" , locName
  = \"Direction\" }\n->           , ADT\n->               { declName = \"Direction\"\n->
  \              , declNumParameters = 0\n->               , declCons =\n->                   Just\n->
  \                    (ConTree\n->                        (ConTree\n->                           Con
  { constrName = \"North\" , constrFields = Left [] }\n->                           Con
  { constrName = \"South\" , constrFields = Left [] })\n->                        (ConTree\n->
  \                          Con { constrName = \"Center\" , constrFields = Left []
  }\n->                           (ConTree\n->                              Con {
  constrName = \"East\" , constrFields = Left [] }\n->                              Con
  { constrName = \"West\" , constrFields = Left [] })))\n->               }\n->           )\n->
  \        ]\n->   }\n```\n\n\nThat's a lot of information, let's show it in a prettier
  and more compact way:\n\n```haskell\npPrint $ typeModel (Proxy:: Proxy (Couple Direction
  Bool))\n-> Type:\n-> main.Main.Couple main.Main.Direction\n->                  ghc-prim.GHC.Types.Bool
  -> Couple Direction Bool\n-> Environment:\n-> ghc-prim.GHC.Types.Bool ->  Bool ≡
  \  False\n->         | True\n-> main.Main.Couple ->  Couple a b ≡   Couple a b\n->
  main.Main.Direction ->  Direction ≡   North\n->              | South\n->              |
  Center\n->              | East\n->              | West\n```\n\n\nData types with
  symbolic names are also supported:\n\n```haskell\ninstance (Model a) => Model [a]\n```\n\n```haskell\npPrint
  $ typeModel (Proxy:: Proxy [Bool])\n-> Type:\n-> ghc-prim.GHC.Types.[] ghc-prim.GHC.Types.Bool
  -> [] Bool\n-> Environment:\n-> ghc-prim.GHC.Types.Bool ->  Bool ≡   False\n->         |
  True\n-> ghc-prim.GHC.Types.[] ->  [] a ≡   []\n->         | : a (ghc-prim.GHC.Types.[]
  a)\n```\n\n\n### Installation\n\nGet the latest stable version from [hackage](https://hackage.haskell.org/package/model).\n\n###
  Compatibility\n\nTested with [ghc](https://www.haskell.org/ghc/) 7.10.3, 8.0.1,
  8.0.2 and 8.2.1.\n\n### Known Bugs and Infelicities\n\n* No support for variables
  of higher kind.\n\n  For example, we cannot define a `Model` instance for `Higher`:\n\n
  \ `data Higher f a = Higher (f a) deriving Generic`\n\n  as `f` has kind `*->*`:\n\n*
  Parametric data types cannot derive `Model` in the `deriving` clause and need to
  define an instance separately\n\n  For example:\n\n  `data Couple a b = Couple a
  b Bool deriving (Generic,Model)`\n\n  won't work, we need a separate instance:\n\n
  \ `instance (Model a,Model b) => Model (Couple a b)`\n\n* Works incorrectly with
  data types with more than 9 type variables.\n"
license-name: BSD3
