homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: 9a4afac0720edaeeb9df16986d7ad1641f265f7c09958bc2fdd29d60189aa133
test-bench-deps:
  bytestring: '>=0.10.4 && <0.11'
  morpheus-graphql: -any
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  uuid: '>=1.0 && <=1.4'
  megaparsec: '>=7.0.0 && <9.0.0'
  websockets: '>=0.11.0 && <=0.13'
  th-lift-instances: '>=0.1.1 && <=0.2.0'
  containers: '>=0.4.2.1 && <0.7'
  unliftio-core: '>=0.0.1 && <=0.3'
  mtl: '>=2.0 && <=2.3'
  tasty-hunit: -any
  transformers: '>=0.3.0.0 && <0.6'
  tasty: -any
  scientific: '>=0.3.6.2 && <0.4'
  aeson: -any
  template-haskell: '>=2.0 && <=2.16'
  vector: '>=0.12.0.1 && <0.13'
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL
changelog: "# Changelog\n\n## 0.11.0 - 01.05.2020\n\n### Breaking Changes\n\n- Client
  generated enum data constructors are now prefixed with with the type name to avoid
  name conflicts.\n- for Variant selection inputUnion uses `inputname` insead of `__typename`\n\n-
  in `Data.Morpheus.Server`  \n  - `gqlSocketApp` and `gqlSocketMonadIOApp` are replaced
  with `webSocketsApp`\n  - removed `initGQLState`, `GQLState`\n\n- for better control
  of subscriptions\n  - replaced instance  `interpreter gqlRoot state` with\n    `interpreter
  gqlRoot`.\n  - added: `Input`, `Stream`, `httpPubApp`\n  \n  from now on you can
  define API that can be\n  used in websockets as well as in http servers\n\n  ```hs\n
  \ api :: Input api -> Stream api EVENT IO\n  api = interpreter gqlRoot\n  \n  server
  :: IO ()\n  server = do\n    (wsApp, publish) <- webSocketsApp api\n    let httpApp
  = httpPubApp api publish\n    ...\n    runBoth wsApp httpApp\n  ```\n  \n  where
  `publish :: e -> m ()`\n\n  websockets and http app do not have to be on the same
  server. \n  e.g. you can pass events between servers with webhooks.\n\n- subscription
  can select only one top level field (based on the GraphQL specification).\n\n###
  New features\n\n- Instead of rejecting conflicting selections, they are merged (based
  on the GraphQL specification).\n- Support for input lists separated by newlines.
  thanks @charlescrain\n- conflicting variable , fragment ... validation\n- issue
  #411: Aeson `FromJSON` `ToJSON` instances for `ID`\n\n### minor\n\n- changes to
  internal types\n- fixed validation of apollo websockets requests  \n\n## 0.10.0
  - 07.01.2020\n\n### Breaking Changes\n\n- all constructors of `Resolver`: `QueryResolver`,`MutResolver`,`SubResolver`
  are unexposed. use `lift` , `publish` or `subscribe`.\n  e.g\n\n  ```hs\n  -- Query
  Resolver\n  resolveUser :: ResolveQ EVENT IO User\n  resolveUser = lift getDBUser\n\n
  \ -- Mutation Resolver\n  resolveCreateUser :: ResolveM EVENT IO User\n  resolveCreateUser
  = do\n    publish [userUpdate] -- publishes event inside mutation\n    lift setDBUser\n\n
  \ -- Subscription Resolver\n  resolveNewUser :: ResolveS EVENT IO User\n  resolveNewUser
  = subscribe [USER] $ do\n    pure $ \\(Event _ content) -> lift (getDBUserByContent
  content)\n  ```\n\n### New features\n\n- exposed `publish` for mutation resolvers,
  now you can write\n\n  ```hs\n  resolveCreateUser :: ResolveM EVENT IO User\n  resolveCreateUser
  = do\n      requireAuthorized\n      publish [userUpdate]\n      liftEither setDBUser\n
  \ ```\n\n- exposed `subscribe` for subscription resolvers, now you can write\n\n
  \ ```hs\n  resolveNewUser :: ResolveS EVENT IO User\n  resolveNewUser = subscribe
  [USER] $ do\n      requireAuthorized\n      pure userByEvent\n    where userByEvent
  (Event _ content) = liftEither (getDBUser content)\n  ```\n\n- `type SubField` will
  convert your subscription monad to query monad.\n  `SubField (Resolver Subscription
  Event IO) User` will generate same as\n  `Resolver Subscription Event IO (User ((Resolver
  QUERY Event IO)))`\n\n  now if you want define subscription as follows\n\n  ```hs\n
  \ data Subscription m = Subscription {\n    newUser :: SubField m User\n  }\n  ```\n\n-
  `unsafeInternalContext` to get resolver context, use only if it really necessary.\n
  \ the code depending on it may break even on minor version changes.\n\n  ```hs\n
  \ resolveUser :: ResolveQ EVENT IO User\n  resolveUser = do\n    Context { currentSelection,
  schema, operation } <- unsafeInternalContext\n    lift (getDBUser currentSelection)\n
  \ ```\n\n### minor\n\n- monadio instance for resolvers. thanks @dandoh\n- example
  using stm, authentication, monad transformers. thanks @dandoh\n- added dependency
  `mtl`\n\n## [0.9.1] - 02.01.2020\n\n- removed dependency `mtl`\n\n## [0.9.0] - 02.01.2020\n\n###
  Added\n\n- `WithOperation` constraint for Generic Resolvers (#347) thanks @dandoh\n\n###
  Fixed\n\n- liftEither support in MutResolver (#351)\n- selection of `__typename`
  on object und union objects (#337)\n- auto inferece of external types in gql document
  (#343)\n\n  th will generate field `m (Type m)` if type has an argument\n\n  e.g
  for this types and DSL\n\n  ```hs\n  data Type1 = Type1 { ... }\n  type Type2 m
  = SomeType m\n  data Type3 m = Type2 { bla :: m Text } deriving ...\n  ```\n\n  ```gql\n
  \ type Query {\n    field1: Type1!\n    field2: Type2!\n    field3: Type3!\n  }\n
  \ ```\n\n  morpheus generates\n\n  ```hs\n  data Query m = Query {\n    field1 ::
  m Type1\n    field2 :: m (Type2 m)\n    field3 :: m (Type3 m)\n  } deriving ...\n
  \ ```\n\n  now you can combine multiple gql documents:\n\n  ```hs\n  importDocumentWithNamespace
  `coreTypes.gql`\n  importDocumentWithNamespace `operations.gql`\n  ```\n\n### Changed\n\n-
  support of resolver fields `m type` for the fields without arguments\n\n  ```hs\n
  \ data Diety m = Deity {\n      name :: m Text\n  }\n  -- is equal to\n  data Diety
  m = Deity {\n      name :: () -> m Text\n  }\n  ```\n\n- template haskell generates
  `m type` insead of `() -> m type` for fields without argument (#334)\n\n  ```hs\n
  \ data Diety m = Deity {\n      name :: (Arrow () (m Text)),\n      power :: (Arrow
  () (m (Maybe Text)))\n  }\n  -- changed to\n  data Diety m = Deity {\n      name
  :: m Text,\n      power :: m (Maybe Text)\n  }\n  ```\n\n## [0.8.0] - 15.12.2019\n\n###
  Changed\n\n- deprecated: `INPUT_OBJECT`, `OBJECT`, `UNION`,\n\n  - use `INPUT` instead
  of `INPUT_OBJECT`\n  - use `deriving(GQLType)` insead of `OBJECT` or `UNION`\n\n-
  only namespaced Unions generate regular graphql Union, other attempts will be wrapped
  inside an object with constructor name :\n\n  e.g:\n\n  ```hs\n  data Character
  =\n    CharacterDeity Deity\n    SomeDeity Deity\n    deriving (GQLType)\n  ```\n\n
  \ where `Deity` is Object.\n  will generate\n\n  ```gql\n  union CHaracter = Deity
  | SomeDeity\n\n  type SomeDeity {\n    _0: Deity\n  }\n  ```\n\n### Added\n\n- `failRes`
  for resolver failures\n- added kind: INPUT , OUTPUT\n- Automatic Type Inference
  (only for Object, Union and Enum)\n- More general stateful resolvers which accept
  instances of MonadIO (Authored by Sebastian Pulido [sebashack])\n- Utility to create
  web-socket applications with custom MonadIO instances (Authored by Sebastian Pulido
  [sebashack])\n\n```hs\n\ndata Realm  =\n    Sky\n  | Sea\n  | Underworld\n    deriving
  (Generic, GQLType)\n\ndata Deity  = Deity{\n    fullName:: Text,\n    realm:: Realm\n
  \ } deriving (Generic, GQLType)\n\ndata Character  =\n    CharacterDeity Deity --
  Only <tyconName><conName> should generate direct link\n  -- RECORDS\n  | Creature
  { creatureName :: Text, creatureAge :: Int }\n  --- Types\n  | SomeDeity Deity\n
  \ | CharacterInt Int\n  | SomeMutli Int Text\n  --- ENUMS\n  | Zeus\n  | Cronus
  deriving (Generic, GQLType)\n\n\n```\n\nwill generate schema:\n\n```gql\nenum Realm
  {\n  Sky\n  Sea\n  Underworld\n}\n\ntype Deity {\n  fullName: String!\n  realm:
  Realm!\n}\n\nunion Character =\n    Deity\n  | Creature\n  | SomeDeity\n  | CharacterInt\n
  \ | SomeMutli\n  | CharacterEnumObject\n\ntype Creature {\n  creatureName: String!\n
  \ creatureAge: Int!\n}\n\ntype SomeDeity {\n  _0: Deity!\n}\n\ntype CharacterInt
  {\n  _0: Int!\n}\n\ntype SomeMutli {\n  _0: Int!\n  _1: String!\n}\n\n# enum\ntype
  CharacterEnumObject {\n  enum: CharacterEnum!\n}\n\nenum CharacterEnum {\n  Zeus\n
  \ Cronus\n}\n```\n\nrules:\n\n- haskell union type with only empty constructors
  (e.g `Realm`), will generate graphql `enum`\n- haskell record without union (e.g
  `Deity`), will generate graphql `object`\n- namespaced Unions: `CharacterDeity`
  where `Character` is TypeConstructor and `Deity` referenced object (not scalar)
  type: will be generate regular graphql Union\n\n  ```gql\n  union Character =\n
  \       Deity\n      | ...\n  ```\n\n- for union recrods (`Creature { creatureName
  :: Text, creatureAge :: Int }`) will be referenced in union type, plus type `Creature`will
  be added in schema.\n\n  e.g\n\n  ```gql\n    union Character =\n      ...\n      |
  Creature\n      | ...\n\n    type Creature {\n      creatureName : String!\n      creatureAge:
  Int!\n    }\n\n  ```\n\n  - all empty constructors in union will be summed in type
  `<tyConName>Enum` (e.g `CharacterEnum`), this enum will be wrapped in `CharacterEnumObject`
  and this type will be added to union `Character`. as in example above\n\n  - there
  is only types left with form `TypeName Type1 2Type ..`(e.g `SomeDeity Deity` ,`CharacterInt
  Int`, `SomeMutli Int Text`),\n\n    morpheus will generate objet type from it:\n\n
  \   ```gql\n    type TypeName {\n      _0: Type1!\n      _1: Type2!\n      ...\n
  \   }\n    ```\n\n### Removed\n\n- removed kind: INPUT_UNION\n\n### Fixed\n\n- on
  filed resolver was displayed. unexhausted case exception of graphql error\n- support
  of signed numbers (e.g `-4`)\n- support of round floats (e.g `1.000`)\n- validation
  checks undefined fields on inputObject\n- variables are supported inside input values\n\n##
  [0.7.1] - 26.11.2019\n\n- max bound icludes: support-megaparsec-8.0\n\n## [0.7.0]
  - 24.11.2019\n\n### Removed\n\n- `toMorpheusHaskellAPi` from `Data.Morpheus.Document`
  functionality will be migrated in `morpheus-graphql-cli`\n\n### Changed\n\n- `liftM`
  to `MonadTrans` instance method `lift`\n\n- `liftEitherM` to `liftEither`\n\n- `Resolver
  operation m event value` -> `Resolver operation event m value` , monad trans needs
  that last 2 type arguments are monad and value that why it was necessary\n\n- exposed
  `Data.Morpheus.Types.Internal.AST`\n\n- Mutation Resolver was changed from\n\n```\nresolver
  :: () -> ResolveM EVENT IO Address\nresolver = MutResolver  {\n  mutEvents = [someEventForSubscription],\n
  \ mutResolver = lift setDBAddress\n}\n```\n\n```haskell\n-- Mutation Wit Event Triggering
  : sends events to subscription\nresolver :: () -> ResolveM EVENT IO Address\nresolver
  = MutResolver \\$ do\n  value <- lift setDBAddress\n  pure ([someEventForSubscription],
  value)\n-- or\n-- Mutation Without Event Triggering\nresolver :: () -> ResolveM
  EVENT IO Address\nresolver _args = lift setDBAddress\n```\n\n### Added\n\n- added
  `parseDSL` to `Data.Morpheus.Document`\n\n- GraphQL SDL support fully supports descriptions:
  onTypes, fields , args ...\n  with (enums, inputObjects , union, object)\n  for
  example :\n\n  ```gql\n  \"\"\"\n  Description for Type Address\n  \"\"\"\n  type
  Address {\n    \"\"\"\n    Description for Field city\n    \"\"\"\n    city: String!\n
  \   street(\n      \"\"\"\n      Description argument id\n      \"\"\"\n      id:
  ID!\n    ): Int!\n  }\n  ```\n\n  ###### GraphQL SDL\n\n  ```gql\n  type User {\n
  \   name: String! @deprecated(reason: \"some reason\")\n  }\n  ```\n\n  will displayed
  in introspection\n\n  ###### introspection.json\n\n  ```json\n  {\n    \"data\":
  {\n      \"__type\": {\n        \"fields\": [\n          {\n            \"name\":
  \"city\",\n            \"isDeprecated\": true,\n            \"deprecationReason\":
  \"test deprecation field with reason\"\n          }\n        ]\n      }\n    }\n
  \ }\n  ```\n\n- basic support of directive `@deprecated` on `enumValue` and object
  `field`, only on introspection\n\n- GraphQL Client deprecation warnings\n\n  on
  type\n\n  ```gql\n  type Human {\n    humanName: String!\n    lifetime: Lifetime!
  @deprecated(reason: \"some reason\")\n    profession: Profession\n  }\n  ```\n\n
  \ compiler output:\n\n  ```json\n  warning:\n    Morpheus Client Warning:\n    {\n
  \     \"message\":\"the field \\\"Human.lifetime\\\" is deprecated. some reason\",\n
  \     \"locations\":[{\"line\":24,\"column\":15}]\n    }\n  ```\n\n- new helper
  resolver types aliases:\n\n  - ResolveQ : for Query\n  - ResolveM : for Mutation\n
  \ - ResolveS : for Subscription\n\n  `ResolveM EVENT IO Address` is same as `MutRes
  EVENT IO (Address (MutRes EVENT IO))`\n\n  is helpfull wenn you want to resolve
  GraphQL object\n\n### Fixed\n\n- added missing Monad instance for Mutation resolver\n-
  `defineByIntrospectionFile` does not breaks if schema contains interfaces\n- Morpheus
  Client supports `Subscription` and `Mutation`operations\n\n## [0.6.2] - 2.11.2019\n\n###
  Added\n\n- support of ghc 8.8.1\n\n## [0.6.0] - 1.11.2019\n\n### Removed\n\n- removed
  `morpheus` cli for code generating, if you need cli you should use\n  [morpheus-graphql-cli](https://github.com/morpheusgraphql/morpheus-graphql-cli/)\n\n-
  example `API` executable is removed from Production build\n\n### Added\n\n- helper
  functions: `liftEitherM` , `liftM`\n\n  ```haskell\n    liftM :: m a -> Resolver
  o m e a\n    liftEitherM :: m (Either String a) -> Resolver o m e a\n  ```\n\n##
  [0.5.0] - 31.10.2019\n\n### Added\n\n- dummy support of `directives`, only parsing
  not actual implementation\n\n### Fixed\n\n- can be parsed `implements` with multiple
  interfaces separated by `&`\n- can be parsed default value on `inputobject`\n- Parser
  supports anonymous Operation: `query` , `mutation` , `subscription`\n  for example:\n\n
  \ ```gql\n  mutation {\n    name\n  }\n  ```\n\n- Morpheus client does not breaks
  on `Boolean` type, converts every GraphQL type `Boolean` to haskell `Bool` and GQL
  `String` to `Text`\n\n### Changed\n\n- Reduced `GQLRootResolver` signature :\n\n
  \ `GQLRootResolver IO () () Query () ()` -> `GQLRootResolver IO () Query () ()`\n\n
  \ `GQLRootResolver IO Channel Content Query Mutation Subscription` -> `GQLRootResolver
  IO APIEvent Query Mutation Subscription`\n\n  where `APIEvent = Event Channel Content`\n\n-
  `GQLRootResolver` automatically assigns corresponding monad to GraphQL Types.\n\n
  \ you can write just:\n\n  ```hs\n  GQLRootResolver IO APIEvent Query  Mutation
  Subscription\n  ```\n\n  instead of:\n\n  ```hs\n  GQLRootResolver IO APIEvent (Query
  (Resolver IO))  (Mutation (MutResolver IO ApiEvent) (Subscription (SubResolver IO
  ApiEvent))\n  ```\n\n  where operations are generated by `importGQLDocument` or
  have form :\n\n  ```\n  data Query m = Query {\n    field1 :: Args -> m Field1,\n
  \   ....\n  }\n  ```\n\n- `()` was replaced with `Undefined` in `GQLRootResolver`
  for empty operations `mutation`, `subscription`\n  ```\n  rootResolver :: GQLRootResolver
  IO () Query Undefined Undefined\n  ```\n- Root Operations `Query`, `Mutation`, `Subscription`
  are passed to root resolvers without boxing inside a monad.\n- there are only 3
  kind of resolvers `MutResolver`, `SubResolver` , `QueryResolver` defined by GADT
  `Resolver`\n\n## [0.4.0] - 09.10.2019\n\n## Changed\n\n- support of Default Value:\n\n
  \ - on query: Parsing Validating and resolving\n  - on Document: only Parsing\n\n-
  'lens' is removed from Library, client field collision can be handled with GraphQL
  `alias`:\n  ```gql\n  {\n    user {\n      name\n      friend {\n        friendName:
  name\n      }\n    }\n  }\n  ```\n\n### Fixed:\n\n- `Data.Morpheus.Document.toGraphQLDocument`
  generates only my user defined types. #259\n- Morpheus Client Namespaces Input Type
  Fields, they don't collide anymore:\n  example:\n  schema:\n\n  ```gql\n  input
  Person {\n    name: String!\n  }\n  ```\n\n  query:\n\n  ```gql\n  query GetUser
  (parent: Person!) {\n    ....\n  }\n  ```\n\n  wil generate:\n\n  ```hs\n  data
  GetUserArgs = GetUserArgs {\n    getUserArgsParent: Person\n  } deriving ...\n\n
  \ data Person = Person {\n    personName: Person\n  } deriving ...\n  ```\n\n- Morpheus
  Client Generated Output Object And Union Types don't collide:\n\n  ```gql\n  type
  Person {\n    name: String!\n    parent: Person!\n    friend: Person!\n  }\n  ```\n\n
  \ And we select\n\n  ```gql\n  {\n    user {\n      name\n      friend {\n        name\n
  \     }\n      parent {\n        name\n      }\n      bestFriend: friend {\n        name\n
  \       parent {\n          name\n        }\n      }\n    }\n  }\n  ```\n\n  client
  will Generate:\n\n  - `UserPerson` from `{user`\n  - `UserFriendPerson`: from `{user{freind`\n
  \ - `UserParentPerson`: from `{user{parent`\n  - `UserBestFriendPerson`: from `{user{bestFrend`\n
  \ - `UserBestFriendParentPerson`: from `{user{bestFrend{parent`\n\n- GraphQL Client
  Defines enums and Input Types only once per query and they don't collide\n\n## [0.3.1]
  - 05.10.2019\n\n### Changed\n\n- removed dependencies: attoparsec , utf8-string\n-
  updated aeson lower bound up to: 1.4.4.0\n\n## [0.3.0] - 04.10.2019\n\n### Added\n\n-
  user can import GraphQL Document and generate types with it.\n\n  ```haskell\n    importGQLDocument
  \"API.gql\"\n  ```\n\n  this will generate types defined in `API.gql`\n\n### Fixed\n\n-
  `String` defined in GQLDcoument will be converted to `Text` by template haskell\n\n-
  `importGQLDocument` and `gqlDocument` supports Mutation, Subscription and Resolvers
  with custom Monad\n\n  for example. if we have:\n\n  ```gql\n  type Deity {\n    name:
  String!\n    power: Power!\n  }\n  ```\n\n  where `Power` is another object defined
  by gql schema.\n  template haskell will represent this type as:\n\n  ```haskell\n
  \    data Deity m = Deity {\n       name :: () -> m Text,\n       power :: () ->
  m (Power m)\n     }\n  ```\n\n  where `m` is resolver Monad.\n\n- `importGQLDocumentWithNamespace`
  generates namespaced haskell records. so that you have no more problem with name
  collision.\n  from this gql type:\n\n  ```gql\n  type Deity {\n    name: (id:Int)String!\n
  \   power: Power!\n  }\n  ```\n\n  will be generated.\n\n  ```haskell\n  data Deity
  m = Deity {\n    deityName :: DeityNameArgs -> m Text,\n    deityPower :: () ->
  m (Power m)\n  }\n\n  data DeityNameArgs = DeityNameArgs {\n    deityNameArgsId
  :: Int\n  }\n  ```\n\n### Changed\n\n- `GQLType` is mandatory for every GQL Type
  (including Query, Mutation and Subscription)\n- subscription Resolver changed\n\n
  \ from:\n\n  ```haskell\n    Subscription {newDeity = \\args -> Event {channels
  = [ChannelA], content = newDeityResolver } }\n  ```\n\n  to:\n\n  ```haskell\n    Subscription
  {newDeity = \\args -> SubResolver {subChannels = [ChannelA], subResolver = newDeityResolver
  } }\n  ```\n\n## [0.2.2] - 30.08.2019\n\n### Fixed\n\n- Parser Supports GraphQL
  multiline comments\n- Morpheus GraphQL Client: Support GraphQL Alias\n- Support
  of GraphQL Interfaces on GraphQL Document:\n\n  ```gql\n  # simple.gql\n  interface
  Node {\n    nodeId: ID!\n  }\n\n  type SimpleType implements Node {\n    nodeId:
  ID!\n    name: String!\n  }\n  ```\n\n  morpheus compiler will read interfaces and
  validate implements.\n  template haskell will generate haskell types only for types
  not for interfaces.\n\n  haskell type from `simple.gql`:\n\n  ```haskell\n   data
  SimpleType = SimpleType {\n      nodeId :: ID!\n      name   :: Text!\n    }  deriving
  (Generic)\n  ```\n\n  at the time compiler does not validates field Arguments by
  interface\n\n## [0.2.1] - 23.08.2019\n\n- assets are added to cabal source files\n\n##
  [0.2.0] - 23.08.2019\n\n### Added\n\n- Parser Supports GraphQL comments\n- Enhanced
  Subscription: mutation can trigger subscription with arguments\n- Experimental Support
  of Input Unions\n- GraphQL schema generating with: `Data.Morpheus.Document.toGraphQLDocument`\n-
  Generating dummy Morpheus Api from `schema.gql`:\n\n  ```\n  morpheus build schema/mythology.gql
  src/MythologyApi.hs\n  ```\n\n  [details](https://github.com/morpheusgraphql/morpheus-graphql/issues/184)\n\n-
  `convertToJSONName` & `convertToHaskellName` has been extended to support all Haskell
  2010 reserved identities. [details](https://github.com/morpheusgraphql/morpheus-graphql/issues/207)\n\n-
  `GraphQL Client` with Template haskell QuasiQuotes (Experimental, Not fully Implemented)\n\n
  \ ```haskell\n  defineQuery\n    [gql|\n      query GetHero ($byRealm: Realm)\n
  \       {\n          deity (realm:$byRealm) {\n            power\n            fullName\n
  \         }\n        }\n    |]\n  ```\n\n  will Generate:\n\n  - response type `GetHero`,
  `Deity` with `Lens` Instances\n  - input types: `GetHeroArgs` , `Realm`\n  - instance
  for `Fetch` typeClass\n\n  so that\n\n  ```haskell\n    fetchHero :: Args GetHero
  -> m (Either String GetHero)\n    fetchHero = fetch jsonRes args\n        where\n
  \         args = GetHeroArgs {byRealm = Just Realm {owner = \"Zeus\", surface =
  Just 10}}\n          jsonRes :: ByteString -> m ByteString\n          jsonRes =
  <fetch query from server>\n  ```\n\n  resolves well typed response `GetHero`.\n\n-
  Ability to define `GQLSchema` with GraphQL syntax ,\n  so that with this schema\n\n
  \ ```haskell\n\n  [gqlDocument|\n    type Query {\n      deity (uid: Text! ) : Deity!\n
  \   }\n\n    type Deity {\n      name  : Text!\n      power : Text\n    }\n  |]\n\n
  \ rootResolver :: GQLRootResolver IO () () Query () ()\n  rootResolver =\n    GQLRootResolver
  {queryResolver = return Query {deity}, mutationResolver = pure (), subscriptionResolver
  = pure ()}\n    where\n      deity DeityArgs {uid} = pure Deity {name, power}\n
  \       where\n          name _ = pure \"Morpheus\"\n          power _ = pure (Just
  \"Shapeshifting\")\n  ```\n\n  Template Haskell Generates types: `Query` , `Deity`,
  `DeityArgs`, that can be used by `rootResolver`\n\n  generated types are not compatible
  with `Mutation`, `Subscription`,\n  they can be used only in `Query`, but this issue
  will be fixed in next release\n\n### Fixed:\n\n- Parser supports enums inside input
  Object\n- fulfilled fragment Validation (added: unusedFragment,nameConflict)\n-
  correct decoding of Enums with more than 3 constructor #201\n\n### Changed\n\n-
  WebSocket subProtocol changed from `graphql-subscriptions` to `graphql-ws`\n\n-
  type familiy `KIND` is moved into typeClasses `GQLType`, so you should replace\n\n
  \ ```haskell\n  type instance KIND Deity = OBJECT\n\n  instance GQLType Deity where\n
  \   description  = const \"Custom Description for Client Defined User Type\"\n\n
  \ data Deity = Deity { fullName :: Text } deriving (Generic)\n  ```\n\n  with\n\n
  \ ```haskell\n  instance GQLType Deity where\n  type KIND Deity = OBJECT\n  description
  = const \"Custom Description for Client Defined User Type\"\n\n  data Deity = Deity
  { fullName :: Text } deriving (Generic)\n  ```\n\n- Duplicated variable names in
  Http requests are validated using `Aeson`'s `jsonNoDup` function. So the following
  request will\n  result in a parsing error\n\n  ```\n  {\"query\":\"...\",\n  \"variables\":{\"email\":\"foo@mail.net\",
  \"email\":\"bar@mail.net\",...}}\n  ```\n\n## [0.1.1] - 1.07.2019\n\n### Fixed:\n\n-
  () as Subscription or Mutation does not defines Operator without fields\n\n## [0.1.0]
  - 30.06.2019\n\nthanks for contributing to: @krisajenkins, @hovind, @vmchale, @msvbg\n\n###
  Added\n\n- support for Union Types: `type instance KIND <type> = UNION`\n- support
  of haskell Types: `Map`, `Set`, and Pair `(a,b)`\n- GraphQL Resolver supports custom
  Monad\n- add `Interpreter` class with instances:\n\n  - `ByteString -> m ByteString`
  and Lazy `ByteString`, where `m` is resolver monad\n  - `Text -> m Text` and Lazy
  `Text`, where `m` is resolver monad\n  - `GQLRequest -> m GQLResponse` , When you
  using it inside another Component that have Manual `ToJSON` deriving,\n    you have
  to ensure that `GQLResponse` will be encoded with `toEncoding`, and not with `toJSON`.\n\n-
  Schema Validation:\n\n  - Name Collision\n\n- support of Parsing input values: `Objects`,`Arrays`\n-
  support scalar type: `ID`\n- scalar Types are validated by `GQLScalar` instance
  function `parseValue`\n- TypeFamily `KIND` with:\n\n  - `SCALAR`\n  - `OBJECT`,\n
  \ - `ENUM`\n  - `INPUT_OBJECT`\n  - `UNION`\n\n- inline Fragments\n- GraphQL [Aliases](https://graphql.org/learn/queries/#aliases)\n-
  Subscriptions: `GQLSubscription`\n\n  - `a -> EffectM b` operation: is resolver
  that contains side effect in `EffectM`.\n    is used for Mutation and Subscribe
  communication\n  - `gqlEffectResolver [\"CHANNEL_ID\"]`: packs as effect Resolver.\n
  \   if mutation and subscription resolver have same channel then\n    every call
  of mutation will trigger subscription resolver\n  - `GQLState`: shared state between
  `http` and `websocket` server\n  - `gqlSocketApp` :converts `interpreter` to `websocket`
  application\n  - `graphql-subscriptions`: `Apollo GraphQL` subProtocol\n\n- language:\n
  \ - Query supports : `__type(name:\"type\")`\n  - On every Object can be selected
  : `__typename`\n\n### Changed\n\n- `GQLRootResolver`, `GQLType(..)` , `GQLScalar(..)`\n
  \ are moved in `Data.Morpheus.Types`\n- `GQLRoot { query, mutation, subscription
  }` to `GQLRootResolver {queryResolver, mutationResolver, subscriptionResolver}`\n-
  `interpreter`: can be used in `http` and `websocket` server\n- `GQLKind` renamed
  as `GQLType`\n- types can be derived just with `(Generic,GQLType)`\n- haskell record
  field `type'` will generate GQL Object field `type`\n- public API (all other modules
  are hidden):\n  - Data.Morpheus\n  - Data.Morpheus.Kind\n  - Data.Morpheus.Types\n
  \ - Data.Morpheus.Execution.Subscription\n\n### Fixed:\n\n- parser can read fields
  with digits like: a1 , \\_1\n- you can use Wrapped type and Wrapped Primitive Types
  issue #136:\n  - wrapped TypesNames will be separated with \"\\_\" : typeName(Either
  A B) -> \"Either_A_B\"\n- introspection:\n  - argument supports `Non-Null` and `List`\n
  \ - every field has correct kind\n\n### Removed\n\n- `GQLArgs`: you can derive arguments
  just with `Generic` without `GQLArgs`\n- `GQLObject`: replaced with instance `type
  instance KIND <Type> = OBJECT`\n- `GQLEnum`: replaced with instance `type instance
  KIND <Type> = ENUM`\n- `GQLInput`: replaced with instance `type instance KIND <Type>
  = INPUT_OBJECT`\n- `Typeable` : with new deriving it is not required anymore\n-
  `Wrapper`: with TypeFamilies there is no need for `Wrapper`\n- `a ::-> b` is Replaced
  by `a -> ResM b` where `ResM` is alias for `Resolver IO a`\n- `GQLMutation` , `GQLQuery`
  : with new deriving it is not required anymore\n- `Resolver` constructor replaced
  by functions:\n  - `gqlResolver` : packs `m Either String a` to `Resolver m a`\n
  \ - `gqlEffectResolver`: resolver constructor for effectedResolver\n  - `liftEffectResolver`:
  lifts normal resolver to Effect Resolver.\n"
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  uuid: '>=1.0 && <=1.4'
  megaparsec: '>=7.0.0 && <9.0.0'
  websockets: '>=0.11.0 && <=0.13'
  th-lift-instances: '>=0.1.1 && <=0.2.0'
  containers: '>=0.4.2.1 && <0.7'
  unliftio-core: '>=0.0.1 && <=0.3'
  mtl: '>=2.0 && <=2.3'
  transformers: '>=0.3.0.0 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  aeson: '>=1.4.4.0 && <=1.6'
  template-haskell: '>=2.0 && <=2.16'
  vector: '>=0.12.0.1 && <0.13'
all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.6.2
- 0.7.0
- 0.7.1
- 0.8.0
- 0.9.0
- 0.9.1
- 0.10.0
- 0.11.0
author: Daviti Nalchevanidze
latest: 0.11.0
description-type: markdown
description: |
  # Morpheus GraphQL [![Hackage](https://img.shields.io/hackage/v/morpheus-graphql.svg)](https://hackage.haskell.org/package/morpheus-graphql) [![CircleCI](https://circleci.com/gh/morpheusgraphql/morpheus-graphql.svg?style=svg)](https://circleci.com/gh/morpheusgraphql/morpheus-graphql)

  Build GraphQL APIs with your favourite functional language!

  Morpheus GraphQL (Server & Client) helps you to build GraphQL APIs in Haskell with native Haskell types.
  Morpheus will convert your Haskell types to a GraphQL schema and all your resolvers are just native Haskell functions. Mopheus GraphQL can also convert your GraphQL Schema or Query to Haskell types and validate them in compile time.

  Morpheus is still in an early stage of development, so any feedback is more than welcome, and we appreciate any contribution!
  Just open an issue here on GitHub, or join [our Slack channel](https://morpheus-graphql-slack-invite.herokuapp.com/) to get in touch.

  ## Getting Started

  ### Setup

  To get started with Morpheus, you first need to add it to your project's dependencies, as follows (assuming you're using hpack):

  _package.yml_

  ```yaml
  dependencies:
    - morpheus-graphql
  ```

  Additionally, you should tell stack which version to pick:

  _stack.yml_

  ```yaml
  resolver: lts-14.8

  extra-deps:
    - morpheus-graphql-0.11.0
  ```

  As Morpheus is quite new, make sure stack can find morpheus-graphql by running `stack upgrade` and `stack update`

  ### Building your first GraphQL API

  ### with GraphQL syntax

  _schema.gql_

  ```gql
  type Query {
    deity(name: String!): Deity!
  }

  """
  Description for Deity
  """
  type Deity {
    """
    Description for name
    """
    name: String!
    power: String @deprecated(reason: "some reason for")
  }
  ```

  _API.hs_

  ```haskell
  {-# LANGUAGE DeriveGeneric         #-}
  {-# LANGUAGE FlexibleContexts      #-}
  {-# LANGUAGE FlexibleInstances     #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE NamedFieldPuns        #-}
  {-# LANGUAGE OverloadedStrings     #-}
  {-# LANGUAGE ScopedTypeVariables   #-}
  {-# LANGUAGE TemplateHaskell       #-}
  {-# LANGUAGE TypeFamilies          #-}

  module API (api) where

  import qualified Data.ByteString.Lazy.Char8 as B

  import           Data.Morpheus              (interpreter)
  import           Data.Morpheus.Document     (importGQLDocumentWithNamespace)
  import           Data.Morpheus.Types        (GQLRootResolver (..), IORes, Undefined(..))
  import           Data.Text                  (Text)

  importGQLDocumentWithNamespace "schema.gql"

  rootResolver :: GQLRootResolver IO () Query Undefined Undefined
  rootResolver =
    GQLRootResolver
      {
        queryResolver = Query {queryDeity},
        mutationResolver = Undefined,
        subscriptionResolver = Undefined
      }
    where
      queryDeity QueryDeityArgs {queryDeityArgsName} = pure Deity
        {
          deityName = pure "Morpheus"
        , deityPower = pure (Just "Shapeshifting")
        }

  api :: ByteString -> IO ByteString
  api = interpreter rootResolver
  ```

  Template Haskell Generates types: `Query` , `Deity`, `DeityArgs`, that can be used by `rootResolver`

  `descriptions` and `deprecations` will be displayed in introspection.

  `importGQLDocumentWithNamespace` will generate Types with namespaced fields. If you don't need napespacing use `importGQLDocument`

  ### with Native Haskell Types

  To define a GraphQL API with Morpheus we start by defining the API Schema as a native Haskell data type,
  which derives the `Generic` typeclass. Lazily resolvable fields on this `Query` type are defined via `a -> IORes b`, representing resolving a set of arguments `a` to a concrete value `b`.

  ```haskell
  data Query m = Query
    { deity :: DeityArgs -> m Deity
    } deriving (Generic, GQLType)

  data Deity = Deity
    { fullName :: Text         -- Non-Nullable Field
    , power    :: Maybe Text   -- Nullable Field
    } deriving (Generic,GQLType)

  data DeityArgs = DeityArgs
    { name      :: Text        -- Required Argument
    , mythology :: Maybe Text  -- Optional Argument
    } deriving (Generic)
  ```

  For each field in the `Query` type defined via `a -> m b` (like `deity`) we will define a resolver implementation that provides the values during runtime by referring to
  some data source, e.g. a database or another API. Fields that are defined without `a -> m b` you can just provide a value.

  In above example, the field of `DeityArgs` could also be named using reserved identities (such as: `type`, `where`, etc), in order to avoid conflict, a prime symbol (`'`) must be attached. For example, you can have:

  ```haskell
  data DeityArgs = DeityArgs
    { name      :: Text        -- Required Argument
    , mythology :: Maybe Text  -- Optional Argument
    , type'     :: Text
    } deriving (Generic)
  ```

  The field name in the final request will be `type` instead of `type'`. The Morpheus request parser converts each of the reserved identities in Haskell 2010 to their corresponding names internally. This also applies to selections.

  ```haskell
  resolveDeity :: DeityArgs -> IORes e Deity
  resolveDeity DeityArgs { name, mythology } = liftEither $ dbDeity name mythology

  askDB :: Text -> Maybe Text -> IO (Either String Deity)
  askDB = ...
  ```

  To make this `Query` type available as an API, we define a `GQLRootResolver` and feed it to the Morpheus `interpreter`. A `GQLRootResolver` consists of `query`, `mutation` and `subscription` definitions, while we omit the latter for this example:

  ```haskell
  rootResolver :: GQLRootResolver IO () Query Undefined Undefined
  rootResolver =
    GQLRootResolver
      { queryResolver = Query {deity = resolveDeity}
      , mutationResolver = Undefined
      , subscriptionResolver = Undefined
      }

  gqlApi :: ByteString -> IO ByteString
  gqlApi = interpreter rootResolver
  ```

  As you can see, the API is defined as `ByteString -> IO ByteString` which we can either invoke directly or use inside an arbitrary web framework
  such as `scotty` or `serverless-haskell`. We'll go for `scotty` in this example:

  ```haskell
  main :: IO ()
  main = scotty 3000 $ post "/api" $ raw =<< (liftIO . gqlApi =<< body)
  ```

  If we now send a POST request to `http://localhost:3000/api` with a GraphQL Query as body for example in a tool like `Insomnia`:

  ```GraphQL
  query GetDeity {
    deity (name: "Morpheus") {
      fullName
      power
    }
  }
  ```

  our query will be resolved!

  ```JSON
  {
    "data": {
      "deity": {
        "fullName": "Morpheus",
        "power": "Shapeshifting"
      }
    }
  }
  ```

  ## Serverless Example

  If you are interested in creating a `Morpheus GraphQL` API with `Serverless`, you should take a look at our example in this repository:
  [_Mythology API_](https://github.com/morpheusgraphql/mythology-api) it is our example project build with `Morpheus GraphQL` and `Serverless-Haskell`,
  where you can query different mythology characters with `GraphiQL`.

  Mythology API is deployed on : [_api.morpheusgraphql.com_](https://api.morpheusgraphql.com) where you can test it with `GraphiQL`

  ![Mythology Api](https://morpheusgraphql.com/assets/img/mythology-api.png "mythology-api")

  ## Advanced topics

  ### Enums

  You can use Union Types as Enums, but they're not allowed to have any parameters.

  ```haskell
  data City
    = Athens
    | Sparta
    | Corinth
    | Delphi
    | Argos
    deriving (Generic)

  instance GQLType City where
    type KIND City = ENUM
  ```

  ### Union types

  To use union type, all you have to do is derive the `GQLType` class. Using GraphQL [_fragments_](https://graphql.org/learn/queries/#fragments), the arguments of each data constructor can be accessed from the GraphQL client.

  ```haskell
  data Character
    = CharacterDeity Deity -- Only <tyconName><conName> should generate direct link
    -- RECORDS
    | Creature { creatureName :: Text, creatureAge :: Int }
    --- Types
    | SomeDeity Deity
    | CharacterInt Int
    | SomeMutli Int Text
    --- ENUMS
    | Zeus
    | Cronus
    deriving (Generic, GQLType)
  ```

  where `Deity` is an object.

  As you see there are different kinds of unions. `morpheus` handles them all.

  This type will be represented as

  ```gql
  union Character =
      Deity # unwrapped union: because "Character" <> "Deity" == "CharacterDeity"
    | Creature
    | SomeDeity # wrapped union: because "Character" <> "Deity" /= SomeDeity
    | CharacterInt
    | SomeMutli
    | CharacterEnumObject # no-argument constructors all wrapped into an enum

  type Creature {
    creatureName: String!
    creatureAge: Int!
  }

  type SomeDeity {
    _0: Deity!
  }

  type CharacterInt {
    _0: Int!
  }

  type SomeMutli {
    _0: Int!
    _1: String!
  }

  # enum
  type CharacterEnumObject {
    enum: CharacterEnum!
  }

  enum CharacterEnum {
    Zeus
    Cronus
  }
  ```

  By default, union members will be generated with wrapper objects.
  There is one exception to this: if a constructor of a type is the type name concatinated with the name of the contained type, it will be referenced directly.
  That is, given:

  ```haskell
  data Song = { songName :: Text, songDuration :: Float } deriving (Generic, GQLType)

  data Skit = { skitName :: Text, skitDuration :: Float } deriving (Generic, GQLType)

  data WrappedNode
    = WrappedSong Song
    | WrappedSkit Skit
    deriving (Generic, GQLType)

  data NonWrapped
    = NonWrappedSong Song
    | NonWrappedSkit Skit
    deriving (Generic, GQLType)

  ```

  You will get the following schema:


  ```gql

  # has wrapper types
  union WrappedNode = WrappedSong | WrappedSkit

  # is a direct union
  union NonWrapped = Song | Skit

  type WrappedSong {
    _0: Song!
  }

  type WrappedSKit {
    _0: Skit!
  }

  type Song {
    songDuration: Float!
    songName: String!
  }

  type Skit {
    skitDuration: Float!
    skitName: String!
  }

  ```

  - for all other unions will be generated new object type. for types without record syntax, fields will be automatally indexed.

  - all empty constructors in union will be summed in type `<tyConName>Enum` (e.g `CharacterEnum`), this enum will be wrapped in `CharacterEnumObject` and added to union members.

  ### Scalar types

  To use custom scalar types, you need to provide implementations for `parseValue` and `serialize` respectively.

  ```haskell
  data Odd = Odd Int  deriving (Generic)

  instance GQLScalar Odd where
    parseValue (Int x) = pure $ Odd (...  )
    parseValue (String x) = pure $ Odd (...  )
    serialize  (Odd value) = Int value

  instance GQLType Odd where
    type KIND Odd = SCALAR
  ```

  ### Applicative and Monad instance

  The `Resolver` type has `Applicative` and `Monad` instances that can be used to compose resolvers.

  ### Introspection

  Morpheus converts your schema to a GraphQL introspection automatically. You can use tools like `Insomnia` to take a
  look at the introspection and validate your schema.
  If you need a description for your GQLType inside of the introspection you can define the GQLType instance manually
  and provide an implementation for the `description` function:

  ```haskell
  data Deity = Deity
  { ...
  } deriving (Generic)

  instance GQLType Deity where
    description = const "A supernatural being considered divine and sacred"
  ```

  screenshots from `Insomnia`

  ![alt text](https://morpheusgraphql.com/assets/img/introspection/spelling.png "spelling")
  ![alt text](https://morpheusgraphql.com/assets/img/introspection/autocomplete.png "autocomplete")
  ![alt text](https://morpheusgraphql.com/assets/img/introspection/type.png "type")

  ## Handling Errors

  for errors you can use use either `liftEither` or `failRes`:
  at the and they have same result.

  with `liftEither`

  ```haskell
  resolveDeity :: DeityArgs -> IORes e Deity
  resolveDeity DeityArgs {} = liftEither $ dbDeity

  dbDeity ::  IO Either Deity
  dbDeity = pure $ Left "db error"
  ```

  with `failRes`

  ```haskell
  resolveDeity :: DeityArgs -> IORes e Deity
  resolveDeity DeityArgs { } = failRes "db error"
  ```

  ### Mutations

  In addition to queries, Morpheus also supports mutations. They behave just like regular queries and are defined similarly:

  ```haskell
  newtype Mutation m = Mutation
    { createDeity :: MutArgs -> m Deity
    } deriving (Generic, GQLType)

  rootResolver :: GQLRootResolver IO  () Query Mutation Undefined
  rootResolver =
    GQLRootResolver
      { queryResolver = Query {...}
      , mutationResolver = Mutation { createDeity }
      , subscriptionResolver = Undefined
      }
      where
        -- Mutation Without Event Triggering
        createDeity :: MutArgs -> ResolveM () IO Deity
        createDeity_args = lift setDBAddress

  gqlApi :: ByteString -> IO ByteString
  gqlApi = interpreter rootResolver
  ```

  ### Subscriptions

  In morpheus subscription and mutation communicate with Events,
  `Event` consists with user defined `Channel` and `Content`.

  Every subscription has its own Channel by which it will be triggered

  ```haskell
  data Channel
    = ChannelA
    | ChannelB

  data Content
    = ContentA Int
    | ContentB Text

  type MyEvent = Event Channel Content

  newtype Query m = Query
    { deity :: m Deity
    } deriving (Generic)

  newtype Mutation m = Mutation
    { createDeity :: m Deity
    } deriving (Generic)

  newtype Subscription (m ::  * -> * ) = Subscription
    { newDeity :: m  Deity
    } deriving (Generic)

  type APIEvent = Event Channel Content

  rootResolver :: GQLRootResolver IO APIEvent Query Mutation Subscription
  rootResolver = GQLRootResolver
    { queryResolver        = Query { deity = fetchDeity }
    , mutationResolver     = Mutation { createDeity }
    , subscriptionResolver = Subscription { newDeity }
    }
   where
    -- Mutation Without Event Triggering
    createDeity :: ResolveM EVENT IO Address
    createDeity = do
        requireAuthorized
        publish [Event { channels = [ChannelA], content = ContentA 1 }]
        lift dbCreateDeity
    newDeity = subscribe [ChannelA] $ do
        requireAuthorized
        lift deityByEvent
     where
      deityByEvent (Event [ChannelA] (ContentA _value)) = fetchDeity  -- resolve New State
      deityByEvent (Event [ChannelA] (ContentB _value)) = fetchDeity   -- resolve New State
      deityByEvent _ = fetchDeity -- Resolve Old State
  ```

  ## Morpheus `GraphQL Client` with Template haskell QuasiQuotes

  ```hs
  defineByDocumentFile
      "./schema.gql"
    [gql|
      query GetHero ($character: Character)
        {
          deity (fatherOf:$character) {
            name
            power
            worships {
              deity2Name: name
            }
          }
        }
    |]
  ```

  with schema:

  ```gql
  input Character {
    name: String!
  }

  type Deity {
    name: String!
    worships: Deity
    power: Power!
  }

  enum Power {
    Lightning
    Teleportation
    Omniscience
  }
  ```

  will validate query and Generate:

  - namespaced response and variable types
  - instance for `Fetch` typeClass

  ```hs
  data GetHero = GetHero {
    deity: DeityDeity
  }

  -- from: {user
  data DeityDeity = DeityDeity {
    name: Text,
    worships: Maybe DeityWorshipsDeity
    power: Power
  }

  -- from: {deity{worships
  data DeityWorshipsDeity = DeityWorshipsDeity {
    name: Text,
  }

  data Power =
      PowerLightning
    | PowerTeleportation
    | PowerOmniscience

  data GetHeroArgs = GetHeroArgs {
    getHeroArgsCharacter: Character
  }

  data Character = Character {
    characterName: Person
  }
  ```

  as you see, response type field name collision can be handled with GraphQL `alias`.

  with `fetch` you can fetch well typed response `GetHero`.

  ```haskell
    fetchHero :: Args GetHero -> m (Either String GetHero)
    fetchHero = fetch jsonRes args
        where
          args = GetHeroArgs {getHeroArgsCharacter = Person {characterName = "Zeus"}}
          jsonRes :: ByteString -> m ByteString
          jsonRes = <GraphQL APi>
  ```

  in this case, `jsonRes` resolves a request into a response in some monad `m`.

  A `fetch` resolver implementation against [a real API](https://swapi.graph.cool) may look like the following:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Data.ByteString.Lazy (ByteString)
  import qualified Data.ByteString.Char8 as C8
  import Network.HTTP.Req

  resolver :: String -> ByteString -> IO ByteString
  resolver tok b = runReq defaultHttpConfig $ do
      let headers = header "Content-Type" "application/json"
      responseBody <$> req POST (https "swapi.graph.cool") (ReqBodyLbs b) lbsResponse headers
  ```

  this is demonstrated in examples/src/Client/StarWarsClient.hs

  types can be generated from `introspection` too:

  ```haskell
  defineByIntrospectionFile "./introspection.json"
  ```

  ## Morpheus CLI for Code Generating

  you should use [morpheus-graphql-cli](https://github.com/morpheusgraphql/morpheus-graphql-cli)

  ## Showcase

  Below are the list of projects using Morpheus GraphQL. If you want to start using Morpheus GraphQL, they are
  good templates to begin with.

  - https://github.com/morpheusgraphql/mythology-api
    - Serverless Mythology API
  - https://github.com/dandoh/web-haskell
    - Modern webserver boilerplate in Haskell: Morpheus Graphql + Postgresql + Authentication + DB migration + Dotenv and more

  *Edit this section and send PR if you want to share your project*.

  # About

  ## The name

  _Morpheus_ is the greek god of sleep and dreams whose name comes from the greek word _μορφή_ meaning form or shape.
  He is said to be able to mimic different forms and GraphQL is good at doing exactly that: Transforming data in the shape
  of many different APIs.

  ## Team

  Morpheus is written and maintained by [_nalchevanidze_](https://github.com/nalchevanidze)

  ## Roadmap

  - Medium future:
    - Stabilize API
    - Specification-isomorphic error handling
  - Long term:
    - Support all possible GQL features
    - Performance optimization
license-name: MIT
