homepage: ''
changelog-type: markdown
hash: 83a90a7c9fc71f9c4722f3547253c3c24b97582bcab5271c0e5614275796d2dc
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  motor: -any
  motor-diagrams: -any
  hspec-discover: -any
  motor-reflection: -any
maintainer: oskar.wickstrom@gmail.com
synopsis: Generate state diagrams from Motor FSM typeclasses
changelog: ! "* 0.3.0\n  - Use row-types instead of CTRex.\n  - Rename `:->` operator
  to `:=`.\n  - Provide better default constraints from using `Actions`.\n  - Make
  `Actions` a data type and use it promoted.\n  - Add `Remain` action.\n  - Add `get`
  operator, returning the current state of a named\n    resource.\n  - Add `update`
  operator, mapping an update function over the current\n    state of a named resource.\n*
  0.2.0.0\n  - Add `motor-reflection` and `motor-diagrams` packages.\n* 0.1.1.0\n
  \ - Add `call` operation to `MonadFSM` class\n* 0.1.0.0\n  - Initial version of
  Motor\n"
basic-deps:
  base: ! '>=4.9 && <5'
  text: -any
  motor: -any
  template-haskell: ! '>=2.11.1.0'
  motor-reflection: -any
all-versions:
- 0.2.0.0
- 0.3.0
author: Oskar WickstrÃ¶m
latest: 0.3.0
description-type: markdown
description: ! "# motor-diagrams\n\nGenerate state diagrams from Motor FSM typeclasses.\n\n**This
  package is experimental!**\n\n## Example\n\n![Game state diagram](diagrams/game.png)\n\n##
  Usage\n\nFirst, use `reflectEvents` on your FSM typeclass to obtain a\nvalue-level
  representation:\n\n``` haskell\ndata Open\ndata Closed\n\nclass MonadFSM m => Door
  (m :: Row * -> Row * -> * -> *) where\n  type State m :: * -> *\n  initial\n    ::
  Name n\n    -> Actions m '[n !+ State m Open] r ()\n  close\n    :: Name n\n    ->
  Actions m '[n :-> State m Open !--> State m Closed] r ()\n  open\n    :: Name n\n
  \   -> Actions m '[n :-> State m Closed !--> State m Open] r ()\n  end\n    :: Name
  n\n    -> Actions m '[n !- State m Closed] r ()\n\nreflectEvents ''Door \"doorEvents\"\n```\n\nThen,
  use `Motor.FSM.Diagram.renderPlantUmlToFile` to render it\nas a PlantUML state diagram:\n\n```
  haskell\nmain :: IO ()\nmain =\n  renderPlantUmlToFile\n    \"door.uml.txt\"\n    doorEvents\n```\n\nOr,
  use the Template Haskell wrapper\n`Motor.FSM.Diagram.TH.renderPlantUmlToFile` to
  write the file when\ncompiling the module (this requires the reflection to happen
  in another\nmodule):\n\n``` haskell\n$(renderPlantUmlToFile\n    \"door.uml.txt\"\n
  \   doorEvents)\n```\n\nLast, render in your format of choice using the PlantUML
  JAR file:\n\n``` shell\njava -jar plantuml.jar -tpng door.uml.txt -o door.png\n```\n\nFor
  an example how to automate the last step with Make, see [this\nMakefile](Makefile).\n\n##
  License\n\nMozilla Public License Version 2.0, see `LICENSE` file in each\npackage.\n"
license-name: MPL-2.0
