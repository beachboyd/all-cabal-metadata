homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: e7ec1f041cba294ce57a6caee4215b47a291239aef688fb3db71864fdf311539
test-bench-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <9.0.0'
  morpheus-graphql-core: -any
  th-lift-instances: '>=0.1.1 && <=0.3'
  hashable: '>=1.0.0'
  tasty-hunit: -any
  transformers: '>=0.3.0.0 && <0.6'
  tasty: -any
  scientific: '>=0.3.6.2 && <0.4'
  aeson: -any
  template-haskell: '>=2.0 && <=3.0'
  vector: '>=0.12.0.1 && <0.13'
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL Core
changelog: |
  # Changelog

  ## 0.12.0 - 21.05.2020

  ## New features

  - parser supports implemnets interfaces seperated with empty spaces

    ```gql
    type T implements A , B C & D {
    ```

  - introspection can render interfaces
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <9.0.0'
  th-lift-instances: '>=0.1.1 && <=0.3'
  hashable: '>=1.0.0'
  transformers: '>=0.3.0.0 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  aeson: '>=1.4.4.0 && <=1.6'
  template-haskell: '>=2.0 && <=3.0'
  vector: '>=0.12.0.1 && <0.13'
all-versions:
- 0.12.0
author: Daviti Nalchevanidze
latest: 0.12.0
description-type: markdown
description: |-
  # Morpheus GraphQL Core

  core Functionalities of Morpheus GraphQL, can be used to build GraphQL server, client ..

  - parser
  - validar
  - api

  ## Build GraphQL api with Core

  ```hs
  getSchema :: Monad m => ResponseStream e m Schema
  getSchema =
    fromList
      [dsl|
    type Query {
      deity(name: String): Deity!
    }

    type Deity {
      name: String!
      power: [String!]!
    }
  |]

  resolver :: Monad m => RootResModel e m
  resolver =
    RootResModel
      { query =
          pure $
            mkObject
              "Query"
              [("deity", resolveDeity)],
        mutation = pure mkNull,
        subscription = pure mkNull
      }

  resolveDeity :: (WithOperation o, Monad m) => Resolver o e m (ResModel o e m)
  resolveDeity =
    pure $
      mkObject
        "Deity"
        [ ("name", pure $ mkString "Morpheus"),
          ("power", pure $ mkList [mkString "Shapeshifting"])
        ]

  api :: GQLRequest -> ResponseStream e Identity (Value VALID)
  api request = do
    schema <- getSchema
    runApi schema resolver request
  ```
license-name: MIT
