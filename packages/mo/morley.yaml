homepage: https://gitlab.com/morley-framework/morley
changelog-type: markdown
hash: d49219c792e303160e2af7d404d46ee88ef8a41332ce8696442b9acd3a8d61f9
test-bench-deps:
  fmt: -any
  bytestring: -any
  morley-prelude: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  morley: -any
  megaparsec: '>=7.0.0'
  syb: -any
  tasty-hspec: -any
  filepath: -any
  quickcheck-arbitrary-adt: -any
  base-noprelude: '>=4.7 && <5'
  data-default: -any
  HUnit: -any
  gauge: -any
  containers: -any
  singletons: -any
  lens: -any
  quickcheck-instances: -any
  formatting: -any
  tasty-quickcheck: -any
  hex-text: -any
  tasty: -any
  QuickCheck: -any
  aeson: -any
  tasty-hunit-compat: -any
  hspec-expectations: -any
  directory: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Developer tools for the Michelson Language
changelog: |
  Unreleased
  ==========
  <!-- Append new entries here -->

  1.2.0
  =====
  * [!343](https://gitlab.com/morley-framework/morley/-/merge_requests/343)
    + Make pairs comparable and available to use as map keys and in sets.
    + CT type has been integrated into T.
    + A `WellTyped` type class has been added to ensure that a type
      represented by  T is valid as per Michelson's rules.
  * [!358](https://gitlab.com/morley-framework/morley/-/merge_requests/358)
    Remove deprecated `STEPS_TO_QUOTA` instruction.
  * [!368](https://gitlab.com/morley-framework/morley/-/merge_requests/368)
    + Update JSON encoding of types.
    + Rename fields of the untyped `Contract'`.
  * [!286](https://gitlab.com/morley-framework/morley/-/merge_requests/286)
    Morley supports field annotations for parameter root now.
  * [!344](https://gitlab.com/morley-framework/morley/-/merge_requests/344)
    Fixed a bug in `Michelson.Analyzer` and added `linearizeLeftDeep`.

  1.1.0
  =====
  * [!337](https://gitlab.com/morley-framework/morley/-/merge_requests/337)
    Added an extension for Michelson comment to typed and untyped contract representation.
  * [!306](https://gitlab.com/morley-framework/morley/-/merge_requests/306)
    Added PAIR/UNPAIR rule to optimizer.
  * [!314](https://gitlab.com/morley-framework/morley/-/merge_requests/314)
    Fixed a bug in the implementation of `MAP` operation: it did not preserve modifications to
    stack.
  * [!261](https://gitlab.com/morley-framework/morley/merge_requests/261)
    Slightly modified interpreter API.
  * [!313](https://gitlab.com/morley-framework/morley/-/merge_requests/313)
    Made `typeCheckValue` polymorphic in desired type, instead of using
    existential wrappers.
  * [!310](https://gitlab.com/morley-framework/morley/merge_requests/232)
    + Add `DGeneralInfoSection` documentation section with git revision and
      potentially other info.
    + Add `buildLorentzDocWithGitRev` and `buildInstrDocWithGitRev` to
      API to add a git revision to contract docs from the executable.
  * [!121](https://gitlab.com/morley-framework/morley/merge_requests/302)
    `BALANCE` instruction now returns the balance with funds from incoming
    transaction.
  * [!294](https://gitlab.com/morley-framework/morley/-/merge_requests/294)
    + Added `Paths_*` modules to `autogen-modules` in cabal files.  Removed `-O0`
    + from default GHC options. Please set `ghc-options` in your `stack.yaml` or
    `cabal.project.local`.
  * [!271](https://gitlab.com/morley-framework/morley/merge_requests/271) Renamed
    'Contract' to 'ContractCode', and appended "Code" to the names of two functions:
    'convertContract' and 'printTypedContract'
  * [!278](https://gitlab.com/morley-framework/morley/merge_requests/278)
    Added some utilities for command line option parsing, see `Util.CLI` and `Morley.CLI` modules.
  * [!268](https://gitlab.com/morley-framework/morley/merge_requests/268)
    Test functions which import typed contract now return `FullContract` instead
    of `Contract`, thus preserving parameter and storage annotations. In case you
    don't need this behaviour, use `fcCode` for conversion.
    Test functions which import Lorentz contracts have been removed because they
    cannot be implemented sanely, and Lorentz is assumed to be used to generate
    code, do not use it for work with textual Michelson contracts.
  * [!212](https://gitlab.com/morley-framework/morley/merge_requests/212)
    + Fix `AND` instruction return type.
    + Add `DUP n` macro support.
    + Fix `LAMBDA` instruction printer.
  * [!265](https://gitlab.com/morley-framework/morley/merge_requests/265)
    The semicolons between instructions are now optional.

  1.0.0
  =====

  * [!215](https://gitlab.com/morley-framework/morley/merge_requests/215)
    Major change: all Lorentz functionality was moved into `lorentz` package.
    A small portion of testing library code was moved around (from `Lorentz.*` to `Michelson.*` or vice versa).

  0.7.0
  =====

  * [!237](https://gitlab.com/morley-framework/morley/merge_requests/237)
    The `option (nat %foo)` is now accepted syntax. The `%foo` is ignored.
  * [!241](https://gitlab.com/morley-framework/morley/merge_requests/241)
    Derive `Show` instance for `Void_`.
  * [!238](https://gitlab.com/morley-framework/morley/merge_requests/238)
    + `NoExplicitDefaultEntryPoint` is now GHC-understandable constraint,
      for previous behaviour with nice error message use
      `ForbidExplicitDefaultEntryPoint`.
    + `CanHaveEntryPoints` is made stricter, now it returns true only for
       Michelson sum types. If that's a problem for you, consider using
       `ShouldHaveEntryPoints` wrapper.
    + Added pseudo `Empty` type.
  * [!219](https://gitlab.com/morley-framework/morley/merge_requests/219)
    Various entrypoints-related updates.
    + Integrational tests now carry `TAddress` as a reference to contract.
      Make sure that parameters of the originated contracts are clear;
      e.g. origination of `consumer` contract may require explicit type
      annotation to specify parameter type.
      If you passed a reference to the originated contract to `View` constructor,
      consider using `mkView` instead or applying `callingDefTAddress` to the
      reference.
    + Generally it is encouraged to use `TAddress` instead of `Address`
      where it is used to refer to a contract.
    + `fromContractAddr` renamed to `fromContractRef`.
    + `Default` instances for `{Some,}EntryPointCall` are removed, use
       one of explicit versions: `epcPrimitive`, `epcCallRootUnsafe`.
    + Reworked `FutureContract` type.

  0.6.0
  =====

  * [!127](https://gitlab.com/morley-framework/morley/merge_requests/127)
    Limit annotations' allowed characters
  * [!184](https://gitlab.com/morley-framework/morley/merge_requests/184)
    Fix `LAMBDA` instruction type converter bug
  * [!173](https://gitlab.com/morley-framework/morley/merge_requests/173)
    [!197](https://gitlab.com/morley-framework/morley/merge_requests/197)
    Add support for lightweight entrypoints in Lorentz, as well as in
    the interpreter runner and morley executable.
    Support entrypoint references in `SELF` instruction.
    Minor refactorings related to entrypoints.
  * [!201](https://gitlab.com/morley-framework/morley/merge_requests/201)
    + Add entrypoint argument to methods in testing eDSL. Preserve the existing type of `lCall` and deprecate it.
    + Deprecate `Lorentz.TestScenario`.
  * [!208](https://gitlab.com/morley-framework/morley/merge_requests/208)
    Resolve an ambiguity within integrational and unit interpreters
    by renaming interpreter in `Michelson.Runtime` to `executor`.
  * [!180](https://gitlab.com/morley-framework/morley/merge_requests/180)
    Remove `coerce_` in favor of more safe variants.
    Migration guide: pick one of the functions from 'Lorentz.Coercions' module.
    In most cases you need one of the following ones:
      * `checkedCoerce_`
      * `coerceWrap` / `coerceUnwrap`
      * `forcedCoerce_` (aka old `coerce_` - this variant provides the least safety).
  * [!180](https://gitlab.com/morley-framework/morley/merge_requests/180)
    Type arguments of `coerceWrap` and `coerceUnwrap` are flipped.
    This change concerns you if you used type application on these functions.

  0.5.0
  =====

  * Require `morley-prelude` to be â‰¥ 0.3.0 to make Hackage happy.
  * [!156](https://gitlab.com/morley-framework/morley/merge_requests/156)
    Consider annotations in PACK and UNPACK.

  0.4.0
  =====

  * Implemented most of Babylon changes: new instructions, elimination of `big_map` restructions, new restrictions for the `contract` type, partial support for entrypoints. Some instructions have been removed/deprecated.
  * Many updates of helper data types for upgradeable contracts: `UParam` and `UStore`.
  * Michelson printer can produce pretty output, not just one line.
  * Added utilities for contract processing and analysis: optimizer, string transformer, errors transformer, analyzer.
  * Added `tasty` helpers to the testing engine.
  * Added annotations to typed representation and Lorentz.
  * Added automatic documentation generator.
  * Modified standard errors in Lorentz: now they are based on `CustomError`.
  * Added unpacking from readable representation.
  * Removed `parameter` and `storage` aliases, they were not very useful and complicated the code.
  * Extended cryptographic types and `Address` to work with other curves (tz2 and tz3 addresses).
  * Made it nearly impossible to generate dead code (which is illegal in Michelson) using Lorentz.
  * Various bug fixes.

  0.3.0.1
  =======

  * Update maintainer.

  0.3.0
  =====

  * [TM-68](https://issues.serokell.io/issue/TM-68) Lorentz DSL which allows one to write contracts directly in Haskell.
  May be moved to a separate package later.
  * [TM-132](https://issues.serokell.io/issue/TM-132) Names for contracts in integrational tests.
  * [TM-35](https://issues.serokell.io/issue/TM-35) `PACK` and `UNPACK` instructions.
  * [TM-27](https://issues.serokell.io/issue/TM-27) Proper handling of `FAILWITH`.
  * [TM-44](https://issues.serokell.io/issue/TM-44) [TM-124](https://issues.serokell.io/issue/TM-124) Reorganization of modules.
  * Bug fixes.

  0.2.0.1
  =======

  * Update documentation and metadata.

  0.2.0
  =====

  Initial release.

  * Typechecker and interpreter for Michelson.
  * Morley extensions:
    - syntax sugar
    - let-blocks
    - inline assertions
  * EDSL for unit testing and integrational testing
basic-deps:
  tezos-bake-monitor-lib: -any
  first-class-families: '>=0.5.0.0'
  fmt: -any
  bytestring: -any
  aeson-casing: -any
  morley-prelude: '>=0.3.0'
  timerep: -any
  time: -any
  parser-combinators: '>=1.0.0'
  aeson-pretty: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  morley: -any
  megaparsec: '>=7.0.0'
  syb: -any
  gitrev: -any
  show-type: -any
  quickcheck-arbitrary-adt: -any
  constraints: '>=0.11'
  base-noprelude: '>=4.7 && <5'
  data-default: -any
  HUnit: -any
  memory: -any
  th-lift-instances: -any
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  quickcheck-instances: -any
  wl-pprint-text: -any
  binary: -any
  ghc-prim: -any
  interpolate: -any
  formatting: -any
  base58-bytestring: -any
  cryptonite: -any
  tasty-quickcheck: -any
  mtl: -any
  pretty-simple: -any
  hex-text: -any
  base16-bytestring: -any
  optparse-applicative: -any
  tasty: -any
  named: -any
  QuickCheck: -any
  th-lift: -any
  aeson: -any
  template-haskell: -any
  tasty-hunit-compat: -any
  transformers-compat: ==0.6.5
  vector: -any
  hspec-expectations: -any
  tasty-ant-xml: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.2.0
- 0.2.0.1
- 0.3.0
- 0.3.0.1
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 1.0.0
- 1.1.0
- 1.2.0
author: camlCase, Serokell, Tocqueville Group
latest: 1.2.0
description-type: markdown
description: |
  # Morley: Developer tools for the Michelson Language

  [![Hackage](https://img.shields.io/hackage/v/morley.svg)](https://hackage.haskell.org/package/morley)

  Morley is a library to make writing smart contracts in Michelson pleasant and
  effective.

  ## I: A reimplementation of the Michelson Language in Haskell

  It consists of the following parts:

  - [`Tezos.*`](src/Tezos/) hierarchy is designed to implement cryptographic primitives, string and byte formats, and any other functionality specific to the Tezos protocol which is required for testing/execution of Michelson contracts but is used not only by Michelson.
  - [`Michelson.Untyped`](src/Michelson/Untyped.hs) and [`Michelson.Typed`](src/Michelson/Typed.hs) hierarchies define Haskell data types that assemble a Michelson contract. See [michelsonTypes.md](/docs/michelsonTypes.md).
  - [`Michelson.TypeCheck`](src/Michelson/TypeCheck.hs): A typechecker that validates Michelson contracts according to the Michelson's typing rules. Essentially, it performs conversion from untyped representation to the typed one. See [morleyTypechecker.md](/docs/morleyTypechecker.md).
  - [`Michelson.Interpret`](src/Michelson/Interpret.hs): An interpreter for Michelson contracts which doesn't perform any side effects. See [morleyInterpreter.md](/docs/morleyInterpreter.md).
  - [`Michelson.Macro`](src/Michelson/Macro.hs) Types for macros, syntactic sugar, and other extensions that are described in the next chapter.
  - [`Michelson.Parser`](src/Michelson/Parser.hs) A parser to turn a `.tz` or `.mtz` file (`.mtz` is a Michelson contract with Morley extensions) into a Haskell ADT.
  - [`Michelson.Runtime`](src/Michelson/Runtime.hs): A high-level interface to Morley functionality, see [morleyRuntime.md](/docs/morleyRuntime.md).

  ## II: Morley extensions

  One way to test Michelson contracts is to use the Morley language.
  It is a superset of the Michelson language, which means that each Michelson contract is also a valid Morley contract but not vice versa.
  There are several extensions which make it more convenient to write Michelson contracts and test them.
  For example, one can write inline assertions in their contracts for testing.
  All the details can be found in [the document](/docs/morleyLanguage.md) about these extensions.
  Also, there is a transpiler from Morley to Michelson.

  ## III: Morley-to-Michelson transpiler

  Morley-to-Michelson transpiler can be used to produce a Michelson contract from a Morley contract.
  You should use it if you want to develop contracts in Morley and submit them to the Tezos network.
  Workflow is the following:

  1. If your contract is called `foo.mtz`, use `morley print --contract foo.mtz --output foo.tz`. Note that normally you should not use `morley` directly, you should use `morley.sh` or `stack exec -- morley`. See usage instructions below.
  2. After that, you can use existing Tezos tools to deploy your contract. You can also typecheck or interpret it using a reference implementation. If you are not familiar with the Tezos tooling, please read [Tezos documentation](https://tezos.gitlab.io/index.html) or [Michelson tutorial](https://gitlab.com/morley-framework/michelson-tutorial).

  ## IV: Testing EDSL

  Another way to test Michelson contracts is to write tests in Haskell using the testing EDSL provided by Morley.
  It supports both integrational and unit tests.
  Tests of both types can use static data or arbitrary data.
  There is [a document](/docs/testingEDSL.md) with a detailed description of the EDSL and a tutorial about its usage.

  ## Running and building

  Morley executable provides the following functionality:
  - `parse` contract and return its representation in Haskell types.
  - `typecheck` contract.
  - `run` contract. A given contract is being originated first, and then the transaction is being sent to it
  - `originate` contract.
  - `transfer` tokens to a given address.
  - `print` produce `.tz` contract that can be parsed by the OCaml referenced client from `.mtz` or `.tz` contract.

  You can get more info about this command by running `morley <command> --help`

  There are three ways to get Morley executable:
  - [Docker](https://docs.docker.com/) based (preferable).
    * Get [script](/scripts/morley.sh)
   (e. g. using `curl https://gitlab.com/morley-framework/morley/raw/master/scripts/morley.sh > morley.sh`)
    and run it `./morley.sh <args>`. This script will pull a docker image that contains the latest version of Morley executable from the master branch and run it with the given arguments.
    * Usage example:
      + `./morley.sh` to see help message
      + `./morley.sh run --contract add1.tz --storage 1 --parameter 1 --amount 1`
  - [Stack](https://docs.haskellstack.org/en/stable/README/) based.
    * Clone this git repository and run `stack build` command,
      after that you can do `stack exec -- morley <args>` to run morley executable built from the source code.
    * Usage example:
      + `stack exec -- morley --help` to see help message
      + `stack exec -- morley originate --contract contracts/tezos_examples/attic/add1.tz --storage 1 --verbose`
  - [Cabal](https://www.haskell.org/cabal/) based.
    * Clone this git repository, go to this directory and run `cabal new-update && cabal new-build` command,
      after that you can do `cabal new-run -- morley <args>` to run morley executable built from the source code.
    * Usage example:
      + `cabal new-run -- morley --help` to see help message
      + `cabal new-run -- morley originate --contract contracts/tezos_examples/attic/add1.tz --storage 1 --verbose`

  For more information about Morley commands, check out the following docs:
  - [Interpreter doc](/docs/morleyInterpreter.md)
  - [Typechecker doc](/docs/morleyTypechecker.md)
license-name: AGPL-3.0-or-later
