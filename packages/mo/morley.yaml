homepage: https://gitlab.com/camlcase-dev/morley
changelog-type: markdown
hash: bbfbb1f353f652fc320ca8404dc25c49508c431b57ba79d064f15d24c3adf86c
test-bench-deps:
  fmt: -any
  morley-prelude: -any
  time: -any
  hspec: -any
  text: -any
  morley: -any
  hspec-golden-aeson: -any
  universum: -any
  megaparsec: ! '>=7.0.0'
  filepath: -any
  quickcheck-arbitrary-adt: -any
  base-noprelude: ! '>=4.7 && <5'
  HUnit: -any
  containers: -any
  vinyl: -any
  lens: -any
  quickcheck-instances: -any
  formatting: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
maintainer: john@camlcase.io
synopsis: Developer tools for the Michelson Language
changelog: |
  0.2.0
  =====

  Initial release.

  * Typechecker and interpreter for Michelson.
  * Morley extensions:
    - syntax sugar
    - let-blocks
    - inline assertions
  * EDSL for unit testing and integrational testing
basic-deps:
  fmt: -any
  bytestring: -any
  morley-prelude: -any
  timerep: -any
  time: -any
  parser-combinators: ! '>=1.0.0'
  aeson-pretty: -any
  hspec: -any
  text: -any
  morley: -any
  megaparsec: ! '>=7.0.0'
  syb: -any
  aeson-options: -any
  base-noprelude: ! '>=4.7 && <5'
  data-default: -any
  memory: -any
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  bifunctors: -any
  formatting: -any
  base58-bytestring: -any
  cryptonite: -any
  mtl: -any
  pretty-simple: -any
  base16-bytestring: -any
  optparse-applicative: -any
  named: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: camlCase, Serokell
latest: 0.1.0.3
description-type: markdown
description: |
  # Morley: Developer tools for the Michelson Language

  Morley is a library to make writing smart contracts in Michelson pleasant and
  effective.

  ## I: A reimplementation of the Michelson Language in Haskell

  It consists of the following parts:

  - `Tezos.*` hierarchy is designed to implement cryptographic primitives, string and byte formats, and any other functionality specific to the Tezos protocol which is required for testing/execution of Michelson contracts, but is used not only by Michelson.
  - `Michelson.Untyped` and `Michelson.Typed` hierarchies define Haskell data types that assemble a Michelson contract. See [michelsonTypes.md](/docs/michelsonTypes.md).
  - `Michelson.TypeCheck`: A typechecker that validates Michelson contracts according to Michelson's typing rules. Essentially it performs conversion from untyped representation to the typed one. See [morleyTypechecker.md](/docs/morleyTypechecker.md).
  - `Michelson.Intepreter`: An intepreter for Michelson contracts which doesn't perform any side effects. See [morleyInterpreter.md](/docs/morleyInterpreter.md).
  - `Morley.Types`: Types for macros, syntactic sugar and other extensions described in the next chapter.
  - `Morley.Parser` A parser to turn a `.tz` or `.mtz` file (`.mtz` is a Michelson contract with Morley extensions) into a Haskell ADT.
  - `Morley.Runtime`: A high-level interface to Morley functionality, see [morleyRuntime.md](/docs/morleyRuntime.md).

  ## II: Morley extensions

  The Morley Language is a superset of the Michelson language, which means that each Michelson contract is also a valid Morley contract but not vice versa.
  There are several extensions which make it more convenient to write Michelson contracts and test them.
  See [the document](/docs/morleyLanguage.md) about these extensions.
  Also there is a transpiler from Morley to Michelson.

  ## III: Morley-to-Michelson transpiler

  Coming soon, see TM-58.

  ## IV: Testing EDSL

  Coming soon, see TM-77.

  ## Issue Tracker

  We use [YouTrack](https://issues.serokell.io/issues/TM) as our issue
  tracker. You can login using your GitHub account to leave a comment or
  create a new issue.

  ## For Contributors

  Please see [CONTRIBUTING.md](CONTRIBUTING.md) for more information.
license-name: AGPL-3.0-or-later
