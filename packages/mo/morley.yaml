homepage: https://gitlab.com/camlcase-dev/morley
changelog-type: ''
hash: c95f1881f78c84b4201f93de6db1a94e9ce74bdb2beb7e7f10988714f99b5b02
test-bench-deps:
  fmt: -any
  morley-prelude: -any
  time: -any
  hspec: -any
  text: -any
  morley: -any
  hspec-golden-aeson: -any
  universum: -any
  megaparsec: ! '>=7.0.0'
  filepath: -any
  quickcheck-arbitrary-adt: -any
  base-noprelude: ! '>=4.7 && <5'
  HUnit: -any
  containers: -any
  vinyl: -any
  lens: -any
  quickcheck-instances: -any
  formatting: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
maintainer: john@camlcase.io
synopsis: Developer tools for the Michelson Language
changelog: ''
basic-deps:
  fmt: -any
  bytestring: -any
  morley-prelude: -any
  timerep: -any
  time: -any
  parser-combinators: ! '>=1.0.0'
  hspec: -any
  text: -any
  morley: -any
  megaparsec: ! '>=7.0.0'
  syb: -any
  aeson-options: -any
  base-noprelude: ! '>=4.7 && <5'
  data-default: -any
  memory: -any
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  natural-numbers: -any
  bifunctors: -any
  formatting: -any
  base58-bytestring: -any
  cryptonite: -any
  mtl: -any
  pretty-simple: -any
  base16-bytestring: -any
  optparse-applicative: -any
  named: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0.0
author: camlCase, Serokell
latest: 0.1.0.0
description-type: markdown
description: |
  # Morley: Developer tools for the Michelson Language

  Morley is a library to make writing smart contracts in Michelson pleasant and
  effective.

  ## I: A reimplementation of the Michelson Language in Haskell

  - `Michelson.Untyped`: Simple data types representing Michelson smart
    contracts and expresions. We use word `Untyped` to reflect that
    Michelson type of corresponding Haskel values is not statically known
    (e. g. there is a `Value` type which is basically dynamically typed).
  - `Michelson.Typed`: These modules contain more advanced types comparing to
    `Michelson.Untyped` with similar semantics. These types use `GADTs` GHC
    extension and in this representation Michelson type of each value and
    instruction is statically known. There are also some utilities to use this
    advanced machinery.
  - `Michelson.TypeCheck`: A typechecker that validates ADT's that conform to
    Michelson's typing rules.
  - `Michelson.Intepreter`: An intepreter for Michelson contracts which doesn't
    perform any side effects.
  - `Morley.Types`: Types for macros, syntactic sugar, and interpreter directives.
  - `Morley.Parser` A parser to turn a `.tz` file into an ADT.
  - `Morley.Runtime`: An interpreter that executes a well-typed Morley smart
    contract in a sandbox.

  ## II: Testing tools (TBD)

  - `Morley.REPL`: An interactive REPL with stack visualization.
  - `Morley.QuickCheck`: QuickCheck generators for arbitary Michelson `Value`s,
    `LAMBDA`s and `Contract`s.
  - `Morley.Sandbox`: Simulating a more realistic network environment, multiple
     smart contracts in the same sandbox.

  ## Issue Tracker

  We use [YouTrack](https://issues.serokell.io/issues/TM) as our issue
  tracker. You can login using your GitHub account to leave a comment or
  create a new issue.

  ## For Contributors

  Please see [CONTRIBUTING.md](CONTRIBUTING.md) for more information.
license-name: AGPL-3.0-only
