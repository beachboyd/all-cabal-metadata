homepage: https://github.com/cjdev/monad-persist#readme
changelog-type: markdown
hash: 24b7e4f21a3e6872b8c978d6de2b503213113e69dea6d44ba9a93af980b1c0c5
test-bench-deps:
  base: -any
  persistent: -any
  hspec: -any
  text: -any
  persistent-template: -any
  monad-control: -any
  monad-persist: -any
  monad-logger: -any
  persistent-sqlite: -any
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: An mtl-style typeclass and transformer for persistent.
changelog: ! '## 0.0.1.3 (October 10th, 2017)


  - Added `runSqlPoolPersistT` ([#2](https://github.com/cjdev/monad-persist/pull/2)).


  ## 0.0.1.2 (April 26th, 2017)


  - Removed the need for `MonadIO` when running `PersistT`, since `MonadBaseControl
  IO` is already enough.


  ## 0.0.1.1 (April 24th, 2017)


  - Added instances for `MonadThrow`, `MonadCatch`, and `MonadMask` to `PersistT`.


  ## 0.0.1.0 (April 20th, 2017)


  - Initial release

'
basic-deps:
  exceptions: ! '>=0.6'
  base: ! '>=4.7 && <5'
  persistent: ! '>=2.5 && <3'
  text: -any
  monad-control: ! '>=1.0.0.0 && <2'
  mtl: -any
  transformers-base: -any
  monad-logger: ! '>=0.3.10'
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '0.0.1.2'
- '0.0.1.3'
author: Alexis King <lexi.lambda@gmail.com>
latest: '0.0.1.3'
description-type: markdown
description: ! "# monad-persist [![Build Status](https://travis-ci.org/cjdev/monad-persist.svg?branch=master)](https://travis-ci.org/cjdev/monad-persist)\n\nThis
  module provides an [mtl][]-style `MonadPersist` typeclass for [persistent][], as
  well as a `PersistT` monad transformer that implements it. This makes it easier
  to use persistent in an arbitrary monad transformer stack, rather than one that
  must be `ReaderT` over `MonadIO`.\n\n```haskell\nimport Control.Monad.Logger (runNoLoggingT)\nimport
  Control.Monad.Persist\nimport Data.Text (Text)\nimport Database.Persist.Sqlite (withSqliteConn)\nimport
  Database.Persist.TH\n\nshare [mkPersist sqlSettings, mkMigrate \"migrateAll\"] [persistLowerCase|\nUser\n
  \ name Text\n  email Text\n\n  UniqueEmail email\n\n  deriving Eq Show\n|]\n\n\nghci>
  runNoLoggingT $ withSqliteConn \":memory:\" $ \\conn -> flip runSqlPersistT conn
  $ do\n        runMigration migrateAll\n        insert_ User { userName = \"Alyssa\",
  userEmail = \"alyssa@example.com\" }\n        users <- selectList [] []\n        return
  (users :: [Entity User])\n\nMigrating: CREATE TABLE \"user\"(\"id\" INTEGER PRIMARY
  KEY,\"name\" VARCHAR NOT NULL,\"email\" VARCHAR NOT NULL,CONSTRAINT \"unique_email\"
  UNIQUE (\"email\"))\n[Entity {entityKey = UserKey {unUserKey = SqlBackendKey {unSqlBackendKey
  = 1}}, entityVal = User {userName = \"Alyssa\", userEmail = \"alyssa@example.com\"}}]\n```\n\n[For
  more information, see the documentation on Hackage.][monad-persist]\n\n[monad-persist]:
  http://hackage.haskell.org/package/monad-persist\n[mtl]: https://hackage.haskell.org/package/mtl\n[persistent]:
  https://hackage.haskell.org/package/persistent\n"
license-name: ISC
