homepage: https://github.com/ivan-m/monad-levels
changelog-type: markdown
hash: 2d0924d674557aa220b0ef5dc43a8ffb6adac400b0bf29afaccda59be4b8ffba
test-bench-deps: {}
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Specific levels of monad transformers
changelog: ! '0.1.0.1

  -------


  * Add compatibility for transformers-0.3


  0.1.0.0

  -------

  * Initial release

'
basic-deps:
  base: ! '>=4.7 && <4.8'
  constraints: ==0.4.*
  transformers: ! '>=0.2 && <0.5'
  transformers-compat: ! '>=0.1 && <1'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Ivan Lazar Miljenovic
latest: 0.1.0.1
description-type: markdown
description: ! "`monad-levels`\n==============\n\nWhy not mtl?\n------------\n\nThe
  oft-spouted problem with the standard monad transformer library\n[mtl] and similar
  libraries is that instances are quadratic: you need\na separate instance for each
  valid combination of transformer +\ntypeclass.\n\n[mtl]: http://hackage.haskell.org/package/mtl\n\nFor
  end users, this isn't really a problem: after all, all the\nrequired instances have
  already been written for you!\n\nBut what happens if you have a custom transformer,
  or a custom\ntypeclass?\n\nWhat about if you want to have something like `MonadIO`
  but for a\ndifferent base monad?\n\nThen you need to write all those extra instances.\n\nWhat
  makes it more frustrating is that many of the instance\ndefinitions are identical:
  typically for every transformer (using\n`StateT s m` as an example) it becomes a
  matter of:\n\n* Possibly unwrap the transformer from a monadic value to get the\n
  \ lower monad (e.g. `StateT s m a -> m (a,s)`);\n\n* Possibly add internal values
  (e.g. `m a -> m (a,s)`);\n\n* Wrap the lower monad from the result of the computation
  back up into\n  the transformer (e.g. `m (a,s) -> StateT s m a`).\n\nThe solution\n------------\n\nIdeally,
  instead we'd have something along the lines of (simplified):\n\n```haskell\n\nclass
  (Monad m) => MonadBase m where\n  type BaseMonad m :: * -> *\n\n  liftBase :: BaseMonad
  m a -> m a\n\nclass (MonadBase m) => MonadLevel m where\n\n  type LowerMonad m ::
  * -> *\n\n  type InnerValue m a :: *\n\n  -- A continuation-based approach for how
  to lift/lower a monadic value.\n  wrap :: (    (m a -> LowerMonad m (InnerValue
  m a)             -- unwrap\n            -> (LowerMonad m a -> LowerMonad m (InnerValue
  m a)) -- addInternal\n            -> LowerMonad m (InnerValue m a)\n          )\n
  \         -> m a\n```\n\nWith these two classes, we could then use Advanced Type
  Hackery (TM)\nto let us instead just specify instances for the transformers/monads\nthat
  *do* have direct implementations for a typeclass, and then have\nthe rest defined
  for us!\n\nIt turns out that this approach is even powerful enough to make\n`liftBase`
  redundant, and it isn't limited to just lifting a monad but\ncan instead be used
  for arbitrary functions.\n\nAdvantages\n----------\n\n* Minimal specification required
  for adding new typeclasses: just\n  specify the instances for monads that satisfy
  it, and then use the\n  provided machinery to lift/lower methods to other transformers
  in\n  the monadic stack.\n\n* Works even for polyvariadic functions.\n\n* Still
  allows specifying whether certain transformers do _not_ allow\n  some constraints
  to pass through (e.g. `ContT` does not allow access\n  to a `WriterT`).\n\nDisadvantages\n-------------\n\n*
  Requires a _lot_ of GHC extensions.\n\n* Requires usage of proxies when lifting/lowering
  typeclass methods.\n\n* Large usage of associated types means type errors can be
  difficult\n  to decipher.\n\n* Due to usage of closed type-families, it is not possible
  to add\n  extra instances to typeclasses (i.e. it is not possible to use a\n  custom
  `State` monad/monad-transformer with\n  `Control.Monad.Levels.State`).\n\n* Currently
  un-benchmarked; as such, it's not known how much of a\n  performance penalty this
  approach takes.\n\n* Lowering polyvariadic functions requires specifying the type
  of the\n  function using a specific grammar (though the common `m a -> m a`\n  case
  is pre-defined).\n"
license-name: MIT
