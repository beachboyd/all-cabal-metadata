homepage: ''
changelog-type: markdown
hash: 5754dab5c75780d036e655496c4683bf70fe27f82e1a2a61d00e021457961394
test-bench-deps:
  row-types: -any
  base: -any
  hspec: -any
  motor: -any
  indexed: -any
  hspec-discover: -any
  motor-reflection: -any
maintainer: oskar.wickstrom@gmail.com
synopsis: Reflect on Motor FSM typeclasses to obtain runtime representations
changelog: ! "* 0.3.0\n  - Use row-types instead of CTRex.\n  - Rename `:->` operator
  to `:=`.\n  - Provide better default constraints from using `Actions`.\n  - Make
  `Actions` a data type and use it promoted.\n  - Add `Remain` action.\n  - Add `get`
  operator, returning the current state of a named\n    resource.\n  - Add `update`
  operator, mapping an update function over the current\n    state of a named resource.\n*
  0.2.0.0\n  - Add `motor-reflection` and `motor-diagrams` packages.\n* 0.1.1.0\n
  \ - Add `call` operation to `MonadFSM` class\n* 0.1.0.0\n  - Initial version of
  Motor\n"
basic-deps:
  base: ! '>=4.9 && <5'
  text: -any
  motor: -any
  template-haskell: ! '>=2.11.1.0'
all-versions:
- 0.2.0.0
- 0.3.0
author: Oskar WickstrÃ¶m
latest: 0.3.0
description-type: markdown
description: ! "# motor-reflection\n\nReflect on typeclasses following Motor FSM conventions,
  using Template\nHaskell.\n\n**This package is experimental!**\n\n## Usage\n\nFirst,
  you need to import the reflection module and the `Event` type:\n\n``` haskell\nimport
  \          Motor.FSM.Reflection\nimport           Motor.FSM.Reflection.Event (Event)\n```\n\nGiven
  that your FSM typeclass follows Motor's conventions, you can\nreflect to get a list
  of events:\n\n``` haskell\ndata Open\ndata Closed\n\nclass MonadFSM m => Door (m
  :: Row * -> Row * -> * -> *) where\n  type State m :: * -> *\n  initial\n    ::
  Name n\n    -> Actions m '[n !+ State m Open] r ()\n  close\n    :: Name n\n    ->
  Actions m '[n :-> State m Open !--> State m Closed] r ()\n  open\n    :: Name n\n
  \   -> Actions m '[n :-> State m Closed !--> State m Open] r ()\n  end\n    :: Name
  n\n    -> Actions m '[n !- State m Closed] r ()\n\nreflectEvents ''Door \"doorEvents\"\n```\n\nThe
  last line, using `reflectEvents`, will define `doorEvents ::\n[Motor.FSM.Reflection.Event.Event]`
  at the top-level.\n\n### Conventions\n\n* The typeclass must have an associated
  type (open type family) called\n  `State`, parameterized by the instance, with a
  result of kind `* ->\n  *`.\n* Each FSM event in the typeclass must have a return
  type of the\n  `Actions` type alias, listing the additions, deletions, and\n  transitions
  of named resources.\n\nThese conventions may be relaxed in the future. This package
  is new\nand experimental.\n\n## License\n\nMozilla Public License Version 2.0, see
  `LICENSE` file in each\npackage.\n"
license-name: MPL-2.0
