homepage: https://github.com/docmunch/haskell-mongodb-queue
changelog-type: ''
hash: 212fe318dff2b64b14e396437b11e6ba7ba0a9e15c2eb3cdb480284b9e890b7a
test-bench-deps:
  base: ! '>4.5 && <5'
  hspec: -any
  text: -any
  monad-control: -any
  network: -any
  lifted-base: -any
  data-default: -any
  mongoDB: ! '>=1.4.1.1 && <1.5'
  transformers: -any
maintainer: Greg Weber <greg@gregweber.info>
synopsis: message queue using MongoDB
changelog: ''
basic-deps:
  base: ! '>4.5 && <5'
  text: -any
  monad-control: -any
  network: -any
  lifted-base: -any
  data-default: -any
  mongoDB: ! '>=1.4.1.1 && <1.5'
  transformers: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1
- 0.2.2
- 0.2.2.1
- 0.2.3.0
- 0.2.3.1
- 0.2.4
- 0.2.5
- 0.2.5.1
- 0.2.5.2
- 0.2.5.3
- '0.3'
- 0.4.0.1
author: Daggerboard Inc. Greg Weber
latest: 0.4.0.1
description-type: haddock
description: ! 'A simple messaging queue using MongoDB. This trades having a good
  queue for ease of deployment. This is designed to be much worse at scale than real
  queueing infrastructure. However, it is very simple to start using if you are already
  running MongoDB. You could probably fork this code to make it work with a different
  database that you are already using.


  There are 2 options for receiving a message: polling or tailable cursors. Polling
  is obviously inefficient, but it works against an index on a capped collection,
  so it should still be fairly efficient, and as fast as the polling interval you
  set. Tailable cursors respond very quickly and don''t re-query the database. However,
  there is an outstanding bug that they use up CPU on the database when the system
  is idle, particularly as more tailable cursors are added. The idle CPU usage will
  become worse as you scale out to multiple worker processes.'
license-name: MIT
