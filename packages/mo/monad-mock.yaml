homepage: https://github.com/cjdev/monad-mock#readme
changelog-type: markdown
hash: 16a15283f89f63c52ec60ef4bbd3f815359edf21f498a142d91ee6196ff727d2
test-bench-deps:
  base: -any
  hspec: -any
  mtl: -any
  monad-mock: -any
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: A monad transformer for mocking mtl-style typeclasses
changelog: ! '## 0.2.0.0 (September 14th, 2017)


  - `Control.Monad.Mock.TH` is smarter about deriving instances for classes with superclass
  contexts: the derived context is based on superclasses rather than being hardcoded
  to `Monad m`.


  ## 0.1.1.2 (August 1st, 2017)


  - Added support for GHC 7.10.


  ## 0.1.1.1 (June 28th, 2017)


  - Added support for GHC 8.2.

  - Includes some minor documentation fixes.


  ## 0.1.1.0 (June 27th, 2017)


  - Added `Control.Monad.Mock.TH`, which provides functions for automatically generating
  actions using Template Haskell.


  ## 0.1.0.0 (June 23rd, 2017)


  - Initial release

'
basic-deps:
  exceptions: ! '>=0.6'
  base: ! '>=4.8.0.0 && <5'
  th-orphans: -any
  monad-control: ! '>=1.0.0.0 && <2'
  constraints: ! '>=0.3.1'
  haskell-src-exts: -any
  mtl: -any
  transformers-base: -any
  haskell-src-meta: -any
  template-haskell: ! '>=2.10.0.0 && <2.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.2.0.0
author: Alexis King <lexi.lambda@gmail.com>
latest: 0.2.0.0
description-type: markdown
description: ! "# monad-mock [![Build Status](https://travis-ci.org/cjdev/monad-mock.svg?branch=master)](https://travis-ci.org/cjdev/monad-mock)\n\n`monad-mock`
  is a Haskell package that provides a monad transformer to help create “mocks” of
  `mtl`-style typeclasses, intended for use in unit tests. A mock can be executed
  by providing a sequence of expected monadic calls and their results, and the mock
  will verify that the computation conforms to the expectation.\n\nFor example, imagine
  a `MonadFileSystem` typeclass, which describes a class of\nmonads that may perform
  filesystem operations:\n\n```haskell\nclass Monad m => MonadFileSystem m where\n
  \ readFile :: FilePath -> m String\n  writeFile :: FilePath -> String -> m ()\n```\n\nUsing
  `MockT`, it’s possible to test computations that use `MonadFileSystem`\nin a completely
  pure way:\n\n```haskell\ncopyFile :: MonadFileSystem m => FilePath -> FilePath ->
  m ()\ncopyFile a b = do\n  x <- readFile a\n  writeFile b x\n\nmakeMock \"FileSystemAction\"
  [ts| MonadFileSystem |]\n\nspec = describe \"copyFile\" $\n  it \"reads a file and
  writes its contents to another file\" $\n    evaluate $ copyFile \"foo.txt\" \"bar.txt\"\n
  \     & runMock [ ReadFile \"foo.txt\" :-> \"contents\"\n                , WriteFile
  \"bar.txt\" \"contents\" :-> () ]\n```\n\nFor more information, [see the documentation
  on Hackage][monad-mock].\n\n[monad-mock]: https://hackage.haskell.org/package/monad-mock\n"
license-name: ISC
