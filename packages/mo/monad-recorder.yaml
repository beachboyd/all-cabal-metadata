homepage: http://github.com/harendra-kumar/monad-recorder
changelog-type: markdown
hash: 492850cf9bba7d944391e2868f955cb8f8d6dbf97046b8ff8b160524d052c378
test-bench-deps:
  base: ! '>=4.8 && <5'
  hspec: ! '>=2.0 && <3'
  monad-recorder: -any
maintainer: harendra.kumar@gmail.com
synopsis: Record and replay the results of monadic actions
changelog: ! '## 0.1.1


  * GHC 8.4.1 support


  ## 0.1.0


  * Initial release

'
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <2'
  mtl: ! '>=2.2 && <3'
  transformers-base: ! '>=0.4 && <0.5'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- 0.1.0
- 0.1.1
author: Harendra Kumar
latest: 0.1.1
description-type: markdown
description: ! "# Monad Recorder\n\nA monad transformer that allows recording the
  results of monadic actions and\nallows replaying them later so that the application
  can resume from the same\npoint.\n\nResults of a `RecorderT` computation are recorded
  in a running journal\nusing the `record` combinator. A computation can be paused
  at any point\nusing the `pause` primitive returning a `Recording` that can be used
  to\nrestart the computation from the same point later. When the recording is\nreplayed,
  the `record` combinator returns the previously recorded result of\nthe computation
  from the journal being replayed instead of actually running the\ncomputation again.\n\n```haskell\nimport
  Control.Monad.IO.Class (liftIO)\nimport Control.Monad.Trans.Recorder (runRecorderT,
  record, pause, Paused(..), blank)\nimport Control.Exception (catch)\n\nmain = do\n
  \   recording <- (runRecorderT blank computation >> return blank)\n                 `catch`
  \\(Paused r) -> return r\n    putStrLn \"Computation paused, resuming again with
  recorded logs\"\n    runRecorderT recording computation\n    return ()\n\n    where\n\n
  \   computation = do\n         x1 <- record $ liftIO $ return 1\n         record
  $ liftIO $ print (\"A\", x1)\n         x2 <- record $ liftIO $ return 2\n         record
  pause\n         record $ liftIO $ print (\"B\", x1, x2)\n```\n\nThis package is
  inspired by the logging implementation in the `transient`\npackage by Alberto G.
  Corona. Related packages:\n\n* https://hackage.haskell.org/package/transient\n*
  https://hackage.haskell.org/package/Workflow\n"
license-name: MIT
