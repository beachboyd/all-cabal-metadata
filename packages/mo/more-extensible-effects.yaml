homepage: https://github.com/qzchenwl/more-extensible-effects#readme
changelog-type: ''
hash: 95330e707bacef5b6fb4f20795ba29d4cf196ea2235985d789222a4b67f965cc
test-bench-deps: {}
maintainer: qzchenwl@gmail.com
synopsis: Initial project template from stack
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.3
- 0.1.0.4
author: qzchenwl
latest: 0.1.0.4
description-type: markdown
description: ! "# More Extensible Effects\n\nThis package is an implementation of
  [\"Freer Monads, More Extensible Effects\"](http://okmij.org/ftp/Haskell/extensible/more.pdf).\n\nMuch
  of the implementation is a repackaging and cleaning up of the reference materials
  provided [here](http://okmij.org/ftp/Haskell/extensible/):\n\n- [Eff1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)\n-
  [OpenUnion5.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion5.hs)\n- [FTCQueue1.hs](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)\n\n##
  Overview\n\n- Control\n  - Monad\n    - [Eff](src/Control/Monad/Eff.hs)\n      -
  [Examples](src/Control/Monad/Eff/Examples.hs)\n        - [Teletype](src/Control/Monad/Eff/Examples/Teletype.hs)\n
  \       - [VerboseAddition](src/Control/Monad/Eff/Examples/VerboseAddition.hs)\n
  \     - [Exception](src/Control/Monad/Eff/Exception.hs)\n      - [Internal](src/Control/Monad/Eff/Internal.hs)\n
  \     - [Lift](src/Control/Monad/Eff/Lift.hs)\n      - [NdetEff](src/Control/Monad/Eff/NdetEff.hs)\n
  \     - [Reader](src/Control/Monad/Eff/Reader.hs)\n      - [State](src/Control/Monad/Eff/State.hs)\n
  \     - [StateRW](src/Control/Monad/Eff/StateRW.hs)\n      - [Writer](src/Control/Monad/Eff/Writer.hs)\n-
  Data\n  - [FTCQueue](src/Data/FTCQueue.hs)\n  - [OpenUnion](src/Data/OpenUnion.hs)\n\n##
  Examples\n\n### Log Effect ([24 Days of Hackage: extensible-effects](https://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html))\n\n[VerboseAddition.hs](src/Control/Monad/Eff/Examples/VerboseAddition.hs)\n\n```haskell\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE GADTs #-}\n{-#
  LANGUAGE TypeOperators #-}\n\nmodule Control.Monad.Eff.Examples.VerboseAddition
  where\n\nimport Control.Monad.Eff\nimport Control.Monad.Eff.Lift\nimport Prelude
  hiding (log)\n\n-- | The Log Effect\ndata Log v where\n  Log :: String -> Log ()\n\nlog
  :: Member Log r => String -> Eff r ()\nlog = send . Log\n\n-- | The Log Interpreter,
  Pure\nrunLogger :: Eff (Log ': r) a -> Eff r (a, [String])\nrunLogger = handleRelay
  (\\x -> return (x, []))\n                        (\\(Log s) k -> k () >>= \\(x,
  ss) -> return (x, s:ss))\n\n-- | The Log Interpreter, Impure\nrunIOLogger :: MemberU2
  Lift (Lift IO) r => Eff (Log ': r) a -> Eff r a\nrunIOLogger = handleRelay return\n
  \                         (\\(Log s) k -> lift (putStrLn s) >>= k)\n\n-- | The program
  we want to be able to write\nverboseAddition :: Member Log r => Eff r Int\nverboseAddition
  = do\n  log \"I'm starting with 1...\"\n  x <- return 1\n\n  log \"and I'm adding
  2...\"\n  y <- return 2\n\n  let r = x + y\n\n  log $ \"Looks like the result is
  \" ++ show r\n  return r\n```\nNow we can run the program in pure or impure way:\n\n```\nλ>
  run (runLogger verboseAddition)\n(3,[\"I'm starting with 1...\",\"and I'm adding
  2...\",\"Looks like the result is 3\"])\nλ> runLift (runIOLogger verboseAddition)\nI'm
  starting with 1...\nand I'm adding 2...\nLooks like the result is 3\n3\n```\n\n###
  Teletype ([Purify code using free monads](http://www.haskellforall.com/2012/07/purify-code-using-free-monads.html))\n\n[Teletype.hs](src/Control/Monad/Eff/Examples/Teletype.hs)\n\n```haskell\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE GADTs #-}\n{-#
  LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Control.Monad.Eff.Examples.Teletype
  where\n\nimport Control.Monad.Eff\nimport Control.Monad.Eff.Lift\nimport System.Exit
  (exitSuccess)\n\ndata Teletype x where\n  GetLine     :: Teletype String\n  PutStrLn
  \   :: String -> Teletype ()\n  ExitSuccess :: Teletype ()\n\nputStrLn' :: Member
  Teletype r => String -> Eff r ()\nputStrLn' = send . PutStrLn\n\ngetLine' :: Member
  Teletype r => Eff r String\ngetLine' = send GetLine\n\nexitSuccess' :: Member Teletype
  r => Eff r ()\nexitSuccess' = send ExitSuccess\n\nrunTeletype :: [String] -> Eff
  (Teletype ': r) a -> Eff r [String]\nrunTeletype ss = handleRelayS ss ret handle\n
  \ where\n    ret :: [String] -> a -> Eff r [String]\n    ret _ a = return []\n\n
  \   handle :: HandlerS [String] Teletype r [String]\n    handle (s:stdin) GetLine
  \     k = k stdin s\n    handle _         GetLine      k = error \"Insufficient
  input\"\n    handle stdin     (PutStrLn s) k = do\n      stdout <- k stdin ()\n
  \     return (s:stdout)\n    handle _         ExitSuccess  k = return []\n\nrunIOTeletype
  :: forall r a. MemberU2 Lift (Lift IO) r => Eff (Teletype ': r) a -> Eff r a\nrunIOTeletype
  = handleRelay ret handle\n  where\n    ret :: a -> Eff r a\n    ret = return\n\n
  \   handle :: Handler Teletype r a\n    handle GetLine      k = lift getLine      >>=
  k\n    handle (PutStrLn s) k = lift (putStrLn s) >>= k\n    handle ExitSuccess  k
  = lift exitSuccess  >>= k\n\nexample :: Member Teletype r => Eff r ()\nexample =
  do\n  str <- getLine'\n  putStrLn' (\"put: \" ++ str)\n  str <- getLine'\n  putStrLn'
  (\"put: \" ++ str)\n  exitSuccess'\n  putStrLn' \"should not appear\"\n```\n\nRun
  it purely:\n\n```\nλ> run $ runTeletype [\"hello\", \"world\", \"and more\"] example\n[\"put:
  hello\",\"put: world\"]\n\nλ> run $ runTeletype [\"hello\"] example\n*** Exception:
  Insufficient input\nCallStack (from HasCallStack):\n  error, called at /work/src/Control/Monad/Eff/Examples/Teletype.hs:35:39
  in main:Control.Monad.Eff.Examples.Teletype\n```\n\nRun it in IO:\n\n```\nλ> runLift
  $ runIOTeletype example\nhello\nput: hello\nworld\nput: world\n*** Exception: ExitSuccess\n```\n\n##
  Usage Tips\n\n### Effect Intepreter\n\nThe most complex part of new effect definition
  is the 'runX' function. As you can see in the above examples, it's usually defined
  by `handleRelay ret handle` with your customized `ret` to return value and `handle`
  to handle continuation.\n\nIt's similar to what you do to implement an instance
  of Monad (`ret` for `return`, `handle` for `>>=`). You can read `handleRelay ret
  handle` as run this monad with instance defined by `ret` and `handle`.\n\n"
license-name: BSD-3-Clause
