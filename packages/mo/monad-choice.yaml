homepage: https://gitlab.com/e-neighborhood-watch/monad-choice#readme
changelog-type: markdown
hash: 7712f3f0b220788cc2af7ad2c0f29c2643c4ff6400941afa46d677f58c5a9672
test-bench-deps: {}
maintainer: ejolive97@gmail.com
synopsis: Monad, monad transformer, and typeclass representing choices.
changelog: |
  # Changelog

  ## 0.1.0.0 (2020-02-29)
  Inital version

  ### Additions
  - `MonadChoice`
    - Created `MonadChoice` typeclass to represent that allow choices to be made by some arbitrary entity.
    - Added function `chooseM`.
    - Added instances for the `ChoiceT` both covariant and invariant.
    - Added instance for `MonadRandom` instances by using the `uniform` function.
    - Added various passthrough instances
      - `MaybeT`
      - `ExceptT`
      - `IdentityT`
      - `StateT` either lazy or strict
      - `ReaderT`
      - `WriterT` either constant space, lazy, or strict
      - `AccumT`
      - `ContT`
      - `RWST` either constant space, lazy, strict
      - `SelectT`
  - `ChoiceT`
    - Added two different versions of `ChoiceT`, one a covariant functor, the other an invariant functor on the category of monads.
    - Shared additions:
      - Function `runChoiceT`
      - Instances for `Functor`, `Applicative`, `Monad`, `MonadTrans`, and `MonadChoice`
      - Various passthrough instances
        - `MonadReader`
        - `MonadState`
        - `MonadWriter`
        - `MonadRWS`
        - `MonadIO`
    - `Covariant.ChoiceT`
      - Added functions `mapChoiceT` and `runBacktrackableChoiceT`.
    - `Invariant.ChoiceT`
      - Exposed constructor `ChoiceT`.
      - Added function `invmapChoiceT`.
      - Added various passthrough instances.
        - `Contravariant`
        - `Invariant`
        - `Alternative`
        - `MonadPlus`
        - `MonadError`
  - `Choice`
    - Added two different versions of `Choice` which of type aliases for each `ChoiceT` over the `Identity` monad.
    - Added function `runChoice` for each version.
    - For `Covariant.Choice` added functions `runChoiceM` and `runBacktrackableChoiceT`.
basic-deps:
  MonadRandom: ! '>=0.5 && <0.6'
  base: ! '>=4.7 && <5'
  invariant: ! '>=0.1.0 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  transformers: ==0.5.*
all-versions:
- 0.1.0.0
author: Eamon Olive, Louis Hyde
latest: 0.1.0.0
description-type: markdown
description: |
  # The `monad-choice` package

  This package provides a multipurpose monad transformer (and associated monad and class), to represent the idea of a result depending on the outcomes of a series of choices.

  ## Example

  The following is a simple use of `MonadChoice` for creating the name of a berry.

      {-# Language FlexibleContexts #-}

      berry :: MonadChoice NonEmpty m => m String
      berry = do
        berryColor  <- choose $ "red"   :| ["blue", "orange", "yellow", "black"]
        berryFlavor <- choose $ "sweet" :| ["sour", "bitter"]
        (++ "berry") <$> choose ( berryColor :| [berryFlavor, berryColor ++ "-" ++ berryFlavor] )

  This can be used with `MonadRandom` to create a random berry, used with `Gen` to create berries for unit tests, or with user input as the structure for a menu where the user selects a berry.
license-name: AGPL-3.0-only
