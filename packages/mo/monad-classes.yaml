homepage: https://github.com/strake/monad-classes.hs
changelog-type: ''
hash: 793faead28dafb47f115c4dec877ce3e3ffab604f134d852652385632ea0923f
test-bench-deps:
  data-lens-light: ! '>=0.1.2'
  base: ! '>=4 && <5'
  conduit: -any
  monad-classes: -any
  ghc-prim: -any
  mmorph: -any
  tasty-hunit: -any
  transformers: -any
  tasty: ! '>=0.8'
maintainer: M Farkas-Dyck <strake888@gmail.com>
synopsis: more flexible mtl
changelog: ''
basic-deps:
  reflection: ! '>=1.4'
  peano: ! '>=0.1'
  base: ! '>=4.7 && <5'
  monad-control: ! '>=1'
  ghc-prim: -any
  mmorph: ! '>=1.0.3'
  transformers-base: ! '>=0.4.2'
  transformers: ! '>=0.2'
  transformers-compat: ! '>=0.3.1'
all-versions:
- '0.3'
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
author: Roman Cheplyaka <roma@ro-che.info>
latest: 0.3.2.2
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/strake/monad-classes.hs.svg?branch=master)](https://travis-ci.org/strake/monad-classes.hs)\n\nSee
  [this series of articles][1] for the detailed description and motivation.\n\n[1]:
  https://ro-che.info/articles/extensible-effects\n\nThis is a more flexible version
  of mtl, the monad transformers library.\n\n*   You can have many layers of e.g.
  state transformers in your stack, and\n    you don't have to explicitly lift your
  `get`s and `put`s, as soon as\n    different state transformers carry different
  types of states.\n\n    Example:\n\n    ``` haskell\n    a :: (MonadState Bool m,
  MonadState Int m) => m ()\n    a = do\n      put False -- set the boolean state\n
  \     modify (+ (1 :: Int)) -- modify the integer state\n    ```\n\n*   mtl requires
  *Θ(n<sup>2</sup>)* instances (like `MonadReader e (StateT s m)`);\n    monad-classes
  requires only *Θ(n)* of them (where *n* is the number of\n    different transformer
  types).\n\n    If you'd like to define your own monad-classes-style class, you have
  to\n    write much less boilerplate code.\n"
license-name: MIT
