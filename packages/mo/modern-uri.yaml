homepage: https://github.com/mrkkrp/modern-uri
changelog-type: markdown
hash: d9e395cc8e228e76d52855ad95dd41dc09270549416cbc46646387d9afa2008f
test-bench-deps:
  modern-uri: -any
  bytestring: ! '>=0.2 && <0.11'
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  criterion: ! '>=0.6.2.1 && <1.6'
  weigh: ! '>=0.0.4'
  hspec-megaparsec: ! '>=2.0 && <3.0'
  deepseq: ! '>=1.3 && <1.5'
  QuickCheck: ! '>=2.4 && <3.0'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Modern library for working with URIs
changelog: ! "## Modern URI 0.3.0.1\n\n* Allow superfluous `&` right after question
  sign in query parameters.\n\n## Modern URI 0.3.0.0\n\n* Uses Megaparsec 7. Visible
  API changes amount to an adjustment in\n  definition of the `ParseException` type.\n\n##
  Modern URI 0.2.2.0\n\n* Removed a potentially overlapping instance `Arbitrary (NonEmpty
  (RText\n  'PathPiece))`.\n\n* Fixed a bug that made it impossible to have empty
  host names. This allows\n  us to parse URIs like `file:///etc/hosts`.\n\n## Modern
  URI 0.2.1.0\n\n* Added `emptyURI`—`URI` value representing the empty URI.\n\n##
  Modern URI 0.2.0.0\n\n* Changed the type of `uriPath` field of the `URI` record
  from `[RText\n  'PathPiece]` to `Maybe (Bool, NonEmpty (RText 'PathPiece))`. This
  allows\n  us to store whether there is a trailing slash in the path or not. See
  the\n  updated documentation for more information.\n\n* Added the `relativeTo` function.\n\n*
  Added the `uriTrailingSlash` 0-1 traversal in `Text.URI.Lens`.\n\n## Modern URI
  0.1.2.1\n\n* Allow Megaparsec 6.4.0.\n\n## Modern URI 0.1.2.0\n\n* Fixed handling
  of `+` in query strings. Now `+` is parsed as space and\n  serialized as `%2b` as
  per RFC 1866 (paragraph 8.2.1). White space in\n  query parameters is serialized
  as `+`.\n\n## Modern URI 0.1.1.1\n\n* Fixed implementation of `Text.URI.Lens.queryParam`
  traversal.\n\n## Modern URI 0.1.1.0\n\n* Derived `NFData` for `ParseException`.\n\n*
  Adjusted percent-encoding in renders so it's only used when absolutely\n  necessary.
  Previously we percent-escaped a bit too much, which, strictly\n  speaking, did not
  make the renders incorrect, but that didn't look nice\n  either.\n\n## Modern URI
  0.1.0.1\n\n* Updated the readme to include “Quick start” instructions and some\n
  \ examples.\n\n## Modern URI 0.1.0.0\n\n* Changed the type of `uriAuthority` from
  `Maybe Authority` to `Either Bool\n  Authority`. This allows to know if URI path
  is absolute or not without\n  duplication of information, i.e. when the `Authority`
  component is present\n  the path is necessarily absolute, otherwise the `Bool` value
  tells if it's\n  absolute (`True`) or relative (`False`).\n\n* Added `isPathAbsolute`
  in `Text.URI` and the corresponding getter in\n  `Text.URI.Lens`.\n\n## Modern URI
  0.0.2.0\n\n* Added the `renderStr` and `renderStr'` functions for efficient rendering\n
  \ to `String` and `ShowS`.\n\n* Added the `parserBs` that can consume strict `ByteString`
  streams.\n\n## Modern URI 0.0.1.0\n\n* Initial release.\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.2 && <0.11'
  reflection: ! '>=2.0 && <3.0'
  base: ! '>=4.7 && <5.0'
  text: ! '>=0.2 && <1.3'
  megaparsec: ! '>=7.0 && <8.0'
  tagged: ! '>=0.8 && <0.9'
  containers: ! '>=0.5 && <0.7'
  contravariant: ! '>=1.3 && <2.0'
  mtl: ! '>=2.0 && <3.0'
  deepseq: ! '>=1.3 && <1.5'
  QuickCheck: ! '>=2.4 && <3.0'
  template-haskell: ! '>=2.10 && <2.15'
  profunctors: ! '>=5.2.1 && <6.0'
all-versions:
- '0.0.1.0'
- '0.0.2.0'
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.2.0'
- '0.1.2.1'
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.3.0.0'
- '0.3.0.1'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '0.3.0.1'
description-type: markdown
description: ! "# Modern URI\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/modern-uri.svg?style=flat)](https://hackage.haskell.org/package/modern-uri)\n[![Stackage
  Nightly](http://stackage.org/package/modern-uri/badge/nightly)](http://stackage.org/nightly/package/modern-uri)\n[![Stackage
  LTS](http://stackage.org/package/modern-uri/badge/lts)](http://stackage.org/lts/package/modern-uri)\n[![Build
  Status](https://travis-ci.org/mrkkrp/modern-uri.svg?branch=master)](https://travis-ci.org/mrkkrp/modern-uri)\n\nThis
  is a modern library for working with URIs in Haskell as per RFC 3986:\n\nhttps://tools.ietf.org/html/rfc3986\n\n##
  Features\n\nThe `modern-uri` package features:\n\n* Correct by construction `URI`
  data type. Correctness is ensured by\n  guaranteeing that every sub-component of
  the `URI` record is by itself\n  cannot be invalid. This boils down to careful use
  of types and a set of\n  smart constructors for things like scheme, host, etc.\n*
  Textual components in the `URI` data type represented as `Text` rather\n  than `ByteString`,
  because they are percent-decoded and so they can\n  contain characters outside of
  ASCII range (i.e. Unicode). This allows for\n  easier manipulation of `URI`s, while
  encoding and decoding headaches are\n  handled by the parsers and renders for you.\n*
  Absolute and relative URIs differ only by the scheme component: if it's\n  `Nothing`,
  then URI is relative, otherwise it's absolute.\n* Megaparsec parser that can be
  used as a standalone smart constructor for\n  the `URI` data type (see `mkURI`)
  as well as be seamlessly integrated into\n  a bigger Megaparsec parser that consumes
  strict `Text` (see `parser`) or\n  strict `ByteString` (see `parserBs`).\n* The
  parser performs some normalization, for example it collapses\n  consecutive slashes.
  Some smart constructors such as `mkScheme` and\n  `mkHost` also perform normalization.
  So in a sense URIs are also\n  “normalized by construction” to some extent.\n* Fast
  rendering to strict `Text` and `ByteString` as well as to their\n  respective `Builder`
  types and to `String`/`ShowS`.\n* Extensive set of lensy helpers for easier manipulation
  of the nested data\n  types (see `Text.URI.Lens`).\n* Quasi-quoters for compile-time
  construction of the `URI` data type and\n  refined text types (see `Text.URI.QQ`).\n\n##
  Quick start\n\nThe `modern-uri` package serves three main purposes:\n\n* Construction
  of the `URI` data type.\n* Inspection and manipulation of the `URI` data type (in
  the sense of\n  changing its parts).\n* Rendering of `URI`s.\n\nLet's walk through
  every operation quickly.\n\n### Construction of `URI`s\n\nThere are four ways to
  create a `URI` value. First off, one could assemble\nit manually like so:\n\n```haskell\nλ>
  :set -XOverloadedStrings\nλ> import qualified Text.URI as URI\nλ> scheme <- URI.mkScheme
  \"https\"\nλ> scheme\n\"https\"\nλ> host <- URI.mkHost \"markkarpov.com\"\nλ> host\n\"markkarpov.com\"\nλ>
  let uri = URI.URI (Just scheme) (Right (URI.Authority Nothing host Nothing)) Nothing
  [] Nothing\nλ> uri\nURI\n  { uriScheme = Just \"https\"\n  , uriAuthority = Right\n
  \     (Authority\n        { authUserInfo = Nothing\n        , authHost = \"markkarpov.com\"\n
  \       , authPort = Nothing })\n  , uriPath = Nothing\n  , uriQuery = []\n  , uriFragment
  = Nothing }\n```\n\nIn this library we use quite a few refined text values. They
  only can be\nconstructed by using smart constructors like `mkScheme :: MonadThrow
  m =>\nText -> m (RText 'Scheme)`. For example, if argument to `mkScheme` is not
  a\nvalid scheme, an exception will be thrown. Actually this is not necessarily\nso
  because there are pure monads that are instances of the `MonadThrow` type\nclass,
  and so the smart constructors may be used in e.g. the `Maybe` monad\nas well.\n\nThere
  is a smart constructor that can make an entire `URI` too, it's called\n(unsurprisingly)
  `mkURI`:\n\n```haskell\nλ> uri <- URI.mkURI \"https://markkarpov.com\"\nλ> uri\nURI\n
  \ { uriScheme = Just \"https\"\n  , uriAuthority = Right\n      (Authority\n        {
  authUserInfo = Nothing\n        , authHost = \"markkarpov.com\"\n        , authPort
  = Nothing })\n  , uriPath = Nothing\n  , uriQuery = []\n  , uriFragment = Nothing
  }\n```\n\nIf argument of `mkURI` is not a valid URI, then an exception will be thrown.\nThe
  exception will contain full context and the actual parse error.\n\nIf some refined
  text value or `URI` is known statically at compile time, we\ncan use Template Haskell,
  namely the “quasi quotes” feature. To do so import\nthe `Text.URI.QQ` module and
  enable the `QuasiQuotes` language extension,\nlike so:\n\n```haskell\nλ> :set -XQuasiQuotes\nλ>
  import qualified Text.URI.QQ as QQ\nλ> let uri = [QQ.uri|https://markkarpov.com|]\nλ>
  uri\nURI\n  { uriScheme = Just \"https\"\n  , uriAuthority = Right\n      (Authority\n
  \       { authUserInfo = Nothing\n        , authHost = \"markkarpov.com\"\n        ,
  authPort = Nothing })\n  , uriPath = Nothing\n  , uriQuery = []\n  , uriFragment
  = Nothing }\n```\n\nNote how the value returned by the `url` quasi quote is pure,
  its\nconstruction cannot fail because when there is an invalid URI inside the\nquote
  it's a compilation error.\n\nThe `Text.URI.QQ` module has quasi quoters for scheme,
  host, and other\nthings, check it out.\n\nFinally the package provides two Megaparsec
  parsers: `parser` and\n`parserBs`. The first works on strict `Text`, while other
  one works on\nstrict `ByteString`s. You can use the parsers in a bigger Megaparsec
  parser\nto parse `URI`s. To get started with Megaparsec, see [its Hackage\npage](https://hackage.haskell.org/package/megaparsec).\n\n###
  Inspection and manipulation\n\nAlthough one could use record syntax directly, possibly
  with language\nextensions like `RecordWildcards`, the best way to inspect and edit
  parts of\n`URI` is with lenses. The lenses can be found in the `Text.URI.Lens` module.\nIf
  you have never used the\n[`lens`](https://hackage.haskell.org/package/lens) library,
  you could\nprobably start by reading/watching materials suggested in the library\ndescription
  on Hackage.\n\nHere are some examples, just to show off what you can do:\n\n```haskell\nλ>
  import Text.URI.Lens\nλ> uri <- URI.mkURI \"https://example.com/some/path?foo=bar&baz=quux&foo=foo\"\nλ>
  uri ^. uriScheme\nJust \"https\"\nλ> uri ^? uriAuthority . _Right . authHost\nJust
  \"example.com\"\nλ> uri ^. isPathAbsolute\nTrue\nλ> uri ^. uriPath\n[\"some\",\"path\"]\nλ>
  k <- URI.mkQueryKey \"foo\"\nλ> uri ^.. uriQuery . queryParam k\n[\"bar\",\"foo\"]\n--
  etc.\n```\n\n### Rendering\n\nRendering turns a `URI` into a sequence of bytes or
  characters. Currently\nthe following options are available:\n\n* `render` for rendering
  to strict `Text`.\n* `render'` for rendering to text `Builder`. It's possible to
  turn that into\n  lazy `Text` by using the `toLazyText` function from\n  `Data.Text.Lazy.Builder`.\n*
  `renderBs` for rendering to strict `ByteString`.\n* `renderBs'` for rendering to
  byte string `Builder`. Similarly it's\n  possible to get a lazy `ByteString` from
  that by using the\n  `toLazyByteString` function from `Data.ByteString.Builder`.\n*
  `renderStr` can be used to render to `String`. Sometimes it's handy. The\n  render
  uses difference lists internally so it's not that slow, but in\n  general I'd advise
  avoiding `String`s.\n* `renderStr'` returns `ShowS`, which is just a synonym for
  `String ->\n  String`—a function that prepends the result of rendering to a given\n
  \ `String`. This is useful when the `URI` you want to render is a part of a\n  bigger
  output, just like with the builders mentioned above.\n\nExamples:\n\n```haskell\nλ>
  uri <- mkURI \"https://markkarpov.com/posts.html\"\nλ> render uri\n\"https://markkarpov.com/posts.html\"\nλ>
  renderBs uri\n\"https://markkarpov.com/posts.html\"\nλ> renderStr uri\n\"https://markkarpov.com/posts.html\"\n--
  etc.\n```\n\n## Contribution\n\nIssues, bugs, and questions may be reported in [the
  GitHub issue tracker for\nthis project](https://github.com/mrkkrp/modern-uri/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2017–2018 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
