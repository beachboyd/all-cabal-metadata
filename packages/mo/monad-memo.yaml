homepage: https://github.com/EduardSergeev/monad-memo
changelog-type: markdown
hash: f92eb3b17fb051f0f6a409554b6d05ffe04fda81c7c02402fcf42bcdbd7e2c46
test-bench-deps:
  test-framework: '>=0.3.3'
  base: '>=3.0 && <=5.0'
  test-framework-quickcheck2: '>=0.2.9'
  criterion: '>=0.6'
  array: '>=0.3'
  containers: '>=0.3'
  transformers: '>=0.2'
  random: '>=1.0'
  QuickCheck: '>=2.0'
  monad-memo: -any
  primitive: '>=0.3'
  vector: '>=0.7'
maintainer: eduard.sergeev@gmail.com
synopsis: Memoization monad transformer
changelog: |
  # Change Log
  All notable changes to the `monad-memo` project will be documented in this file

  ## [0.5.3] - 2020-09-21
  ### Fixed
  - `README.md` links
  ### Removed
  - Travis-ci build configuration

  ## [0.5.2] - 2020-09-20
  ### Added
  - CI on Github actions with test coverage and Hackage upload
  ### Fixed
  - `monad-memo.cabal` structure: redundancy and to enable test coverage calculation
  - `CHANGELOG.md` structure

  ## [0.5.1] - 2018-08-31
  ### Added
  - Support multiple mutable caches in transformers stack
    This allows Array/Vector-based caches to be used for mutually recursive function memoization

  ## [0.5.0] - 2018-08-06
  ### Fixed
  - Refresh project to be compilable with latest GHC and libraries
  - Remove dependency on `mtl` package (`transformers` is sufficient)
  - Use `Except` instead of deprecated `Error`
  - Remove support for `ListT` transformer since it is now deprecated
  - Use standard `StateT` & `ReaderT` for `MonadCache` implementations

  ## [0.4.1] - 2013-03-06
  ### Fixed
  - Documentation
  - `Example` is renamed to `example` and is excluded from package's module hierarchy

  ## [0.4.0] - 2013-02-26
  ### Added
  - `ArrayCache`: mutable array-based `MonadCache` for top performance
  - `VectorCache` (and flavours) `vector`-based `MonadCache` for even better performance
  - Simple benchmark included
  ### Fixed
  - Bug fixes in transformer implementations (`Reader`, `State`, `RWS`)

  ## [0.3.0] - 2011-04-03
  ### Added
  - Added generalized `MemoStateT` transformer (to host any `Data.MapLike` cache-container)
  - `MemoT` is now `MemoStateT` instantiated with `Data.Map`

  ## [0.2.0] - 2011-03-27
  ### Added
  - A set of `forX` functions (`for2`, `for3` and `for4`) to adapt curried function into uncurried `MemoCache`
basic-deps:
  base: '>=3.0 && <=5.0'
  array: '>=0.3'
  containers: '>=0.3'
  transformers: '>=0.2'
  primitive: '>=0.3'
  vector: '>=0.7'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
author: Eduard Sergeev
latest: 0.5.3
description-type: markdown
description: "# monad-memo\n[![Build Status](https://github.com/EduardSergeev/monad-memo/workflows/master/badge.svg)](https://github.com/EduardSergeev/monad-memo/actions?query=workflow%3Amaster+branch%3Amaster)\n[![Test
  Coverage](https://coveralls.io/repos/github/EduardSergeev/monad-memo/badge.svg)](https://coveralls.io/github/EduardSergeev/monad-memo)\n[![Hackage](https://img.shields.io/hackage/v/monad-memo.svg)](https://hackage.haskell.org/package/monad-memo)\n\n##
  Purpose\nThis package provides a convenient mechanism for adding memoization to
  Haskell monadic functions.\n\n## Memoization\nMemoization is a well known way to
  speed up function evaluation by caching previously calculated results and reusing
  them whenever a memoized function is needed to be evaluated with the same arguments
  again.\nIt is usually associated with dynamic programming techiques. \n\n## Overview\nEven
  though it is possible to manually add memoization to the code which would benefit
  from it, this ad-hoc approach has usual ad-hoc drawbacks: code pollution, bugs,
  resistance to changes.\nThis package however encapsulates the underlying plumbing
  behind its simple monadic interface `MonadMemo` with a single combinator `memo`
  which, when applied to monadic function, turns it into \"memoized\" one. \n\nThe
  package offers various implementation of `MonadMemo` (which differs in terms of
  performance and requirements) and it is possible to choose/change the implementation
  without affecting the main function code.\nThe range of supported implementations
  \"out of box\" is limited by the range of containers provided by the standard packages
  installed by [Haskel Platform](http://www.haskell.org/platform/):\nfrom default
  pure \"fit them all\" [Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html)
  to very fast but limiting [vector](http://hackage.haskell.org/packages/archive/vector/latest/doc/html/Data-Vector-Generic-Mutable.html).\nIt
  is also possible to plug-in a custom container (from a third-party library) and
  run existing monadic code with it. \n\nThe default implementation of `MonadMemo`
  is also [monad transformer](http://en.wikibooks.org/wiki/Haskell/Monad_transformers)
  so it can be \"mixed\" with other monads.\nThe package also provides the \"memoized\"
  versions of most standard monads found in [mtl](http://hackage.haskell.org/package/mtl).
  \n\n## Example of usage\n\nA clasic example of function which greatelly benefits
  from memoization is a recursively defined Fibonacci number function.\nA plain version
  of this function can be written in the following way:\n```haskell\nfib :: Integer
  -> Integer\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n```\nwhich is very
  inefficient (impractical for `n>40`).\n\nWe can rewrite this definition as a monad:\n```haskell\nfibm
  :: Monad m => Integer -> m Integer\nfibm 0 = return 0\nfibm 1 = return 1\nfibm n
  = do\n  f1 <- fibm (n-1)\n  f2 <- fibm (n-2)\n  return (f1+f2)\n```\nand even run
  it with `Identity` monad with identical inefficiency:\n```haskell\nevalFibmId ::
  Integer -> Integer\nevalFibmId = runIdentity . fibm\n```\n\nBut all we need to do
  to make this function \"computable\" for reasonable argument is to add memoization
  for both recursive branches with `memo` combinator:\n```haskell\nfibm :: (MonadMemo
  Integer Integer m) => Integer -> m Integer\nfibm 0 = return 0\nfibm 1 = return 1\nfibm
  n = do\n  f1 <- memo fibm (n-1)\n  f2 <- memo fibm (n-2)\n  return (f1+f2)\n```\nthen,
  to evaluate it with default `Data.Map` based memoization cache we use the following
  \"eval*\" function:\n```haskell\nevalFibm :: Integer -> Integer\nevalFibm = startEvalMemo
  . fibm\n```\nNow the range of the arguments it can handle is limited only by `Integer`
  computation complexity and stack memory limit.\n\n## More Examples\n\n### Slightly
  more complicated recursive function\nWell known [Ackerman function](http://en.wikipedia.org/wiki/Ackermann_function)
  is a two arguments function.\nTo memoize two argument function `for2` combinator
  can be used, giving the following generic code:\n\n```haskell\nackm :: (Num n, Ord
  n, MonadMemo (n, n) n m) => n -> n -> m n\nackm 0 n = return (n+1)\nackm m 0 = for2
  memo ackm (m-1) 1\nackm m n = do\n  n1 <- for2 memo ackm m (n-1)    -- 'for2' adapts
  'memo' for 2-argument 'ackm' \n  for2 memo ackm (m-1) n1\n\nevalAckm :: (Num n,
  Ord n) => n -> n -> n\nevalAckm n m = startEvalMemo $ ackm n m\n```\n\n### Mutually
  recursive function memoization\nThis example is taken from paper [\"Monadic Memoization
  Mixins\" by Daniel Brown and William R. Cook](http://www.cs.utexas.edu/~wcook/Drafts/2006/MemoMixins.pdf)\n\nGiven
  the following mutually recursive function definitions:\n\n```haskell\n-- 'f' depends
  on 'g'\nf :: Int -> (Int,String)\nf 0 = (1,\"+\")\nf (n+1)\t=(g(n,fst(f n)),\"-\"
  ++ snd(f n))\n\n-- 'g' depends on 'f'\ng :: (Int, Int) -> Int\ng (0, m)  = m + 1\ng
  (n+1,m) = fst(f n)-g(n,m)\n```\n\nHow can we memoize both functions?\n\nLets try
  to just add [memo](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Memo.html#v:memo)
  for both functions:\n\n```haskell\n-- WRONG: Will NOT compile!\nfm 0 = return (1,\"+\")\nfm
  (n+1) = do\n  fn <- memo fm n\n  gn <- memo gm (n , fst fn)\n  return (gn , \"-\"
  ++ snd fn)\n\ngm (0,m) = return (m+1) \ngm (n+1,m) = do\n  fn <- memo fm n\n  gn
  <- memo gm (n,m)\n  return $ fst fn - gn\n```\n\nGHC complains:\n\n    \"Occurs
  check: cannot construct the infinite type: t = (t, v)\n         Expected type: t\n
  \  \n         Inferred type: (t, v)\"\n\nwhich is understandable since we are trying
  to use the same cache for storing \"key-value\" pairs of the functions of different
  types (`fm :: Int -> m (Int,String)` and `gm :: (Int, Int) -> m Int`).\nObviously,
  to cache both function we will need _two_ caches (even if the types of the functions
  were identical, it's not very good idea to share the same cache).\nAnd this is precisely
  what we have to do - use two memoization caches! The way to achieve it is to use
  _two_ [MemoT](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Memo.html#t:MemoT)
  monad transformers one nested in another:\n\n```haskell\n-- Memo-cache for 'fm'\ntype
  MemoF = MemoT Int (Int,String)\n-- Memo-cache for 'gm'\ntype MemoG = MemoT (Int,Int)
  Int\n\n-- | Combined stack of caches (transformers)\n-- Stacks two 'MemoT' transformers
  in one monad to be used in both 'gm' and 'fm' monadic functions\ntype MemoFG = MemoF
  (MemoG Identity)\n```\n\nNB As usually with Haskell it isn't necessary to specify
  types here (or restrict them to [MemoT](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Memo.html#t:MemoT)
  combinations for the given example).\n\nThen, a little bit of complication, since
  we use _two_ caches now (one from the current [monad transformer](http://en.wikibooks.org/wiki/Haskell/Monad_transformers)
  and another from the next, nested in the current) we need to use *memol_X_* set
  of functions: [memol0](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Memo.html#v:memol0),
  [memol1](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Memo.html#v:memol1)
  etc. Where _X_ specifies \"sequential number\" of the transformer in stack for a
  given cache (starting from the current). Here we use the current (0) and the next
  (1) for `fm` and `gm` respectively:\n\n```haskell\nfm :: Int -> MemoFG (Int,String)\nfm
  0 = return (1,\"+\")\nfm (n+1) = do\n  fn <- memol0 fm n\n  gn <- memol1 gm (n ,
  fst fn)\n  return (gn , \"-\" ++ snd fn)\n\ngm :: (Int,Int) -> MemoFG Int\ngm (0,m)
  = return (m+1) \ngm (n+1,m) = do\n  fn <- memol0 fm n\n  gn <- memol1 gm (n,m)\n
  \ return $ fst fn - gn\n\nevalAll = startEvalMemo . startEvalMemoT\n\n-- | Function
  to run 'fm' computation\nevalFm :: Int -> (Int, String)\nevalFm = evalAll . fm\n\n--
  | Function to run 'gm' computation\nevalGm :: (Int,Int) -> Int\nevalGm = evalAll
  . gm\n```\n\nIn fact we can also define 'gm' function in curried form:\n\n```haskell\nfm2
  :: Int -> MemoFG (Int,String)\nfm2 0 = return (1,\"+\")\nfm2 n = do\n  fn <- memol0
  fm2 (n-1)\n  gn <- for2 memol1 gm2 (n-1) (fst fn)\n  return (gn , \"-\" ++ snd fn)\n\n--
  2-argument function now\ngm2 :: Int -> Int -> MemoFG Int\ngm2 0 m = return (m+1)
  \ngm2 n m = do\n  fn <- memol0 fm2 (n-1)\n  gn <- for2 memol1 gm2 (n-1) m   -- 'for2'
  adapts 'memol1' for 2-argument gm2\n  return $ fst fn - gn\n\nevalFm2 :: Int ->
  (Int, String)\nevalFm2 = evalAll . fm2\n    \nevalGm2 :: Int -> Int -> Int\nevalGm2
  n m = evalAll $ gm2 n m\n```\n\n### Combining MemoT with other monads\nBeing monad
  transformer, memoization monad can be combined with most of existing monads.\nHere
  we mix it with [MonadWriter](http://hackage.haskell.org/packages/archive/mtl/latest/doc/html/Control-Monad-Writer-Class.html#t:MonadWriter):\n\n```haskell\nfibmw
  :: (Num n, MonadWriter String m, MonadMemo n n m) => n -> m n\nfibmw 0 = tell \"0\"
  >> return 0\nfibmw 1 = tell \"1\" >> return 1\nfibmw n = do\n  f1 <- memo fibmw
  (n-1)\n  f2 <- memo fibmw (n-2)\n  tell $ show n\n  return (f1+f2)\n\n-- To run
  combined monad we need to sequence both 'run' functions:\nevalFibmw :: Integer ->
  (Integer, String)\nevalFibmw = startEvalMemo . runWriterT . fibmw\n\nres = evalFibmw
  6  -- > produces (8,\"1021310241021351021310246\")\n```\n\n## Custom pure cache
  container\nFrom monad-memo [version 0.3.0](http://hackage.haskell.org/package/monad-memo-0.3.0)
  it is possible to replace default [Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html)
  with another (more efficient?) implementation of internal cache-container\nas long
  as there is an instance of [Data.MapLike](http://hackage.haskell.org/packages/archive/monad-memo/0.3.0/doc/html/Data-MapLike.html)
  defined for this container.\nThe package currently defines these instances for [Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html)
  and [Data.IntMap](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-IntMap.html)
  only.\n\nFor instance, should we decide to use [unordered-containers](http://hackage.haskell.org/package/unordered-containers)
  all we need to do is to define the following instance for our container:\n\n```haskell\nimport
  Data.Hashable\nimport qualified Data.HashMap.Strict as H\n\ninstance (Eq k, Hashable
  k) => MapLike (H.HashMap k v) k v where\n    lookup = H.lookup\n    add = H.insert\n```\n\nthen
  we just need to use `(``evalMemoState``H.empty)` instead of `startEvalMemo` and
  our memoized function will be evaluated using `Hashmap` as an internal container
  hosted in [MemoState](http://hackage.haskell.org/packages/archive/monad-memo/latest/doc/html/Control-Monad-Trans-Memo-State.html#t:MemoState).\nThere
  is usually no need to do any modification to the memoized function itself.\n\n##
  Mutable arrays and vectors as MonadCache\n\n### Array-based memoization cache\n[version
  0.4.0](http://hackage.haskell.org/package/monad-memo-0.4.0) adds [ArrayCache](http://hackage.haskell.org/packages/archive/monad-memo/0.4.0/doc/html/Control-Monad-Memo-Array.html):
  a new [MonadCache](http://hackage.haskell.org/packages/archive/monad-memo/0.4.0/doc/html/Control-Monad-Memo-Class.html#t:MonadCache)
  implementation based on mutable arrays (inside [IO](http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html#t:IO)
  or [ST s](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Monad-ST.html)
  monad). The main benefit of this `MonadCache` is its performance: it can be an order
  of magnitude faser than standard `Data.Map`-based cache. This is due to the fact
  that arrays have `O(1)` lookup time and in-place mutable arrays also have `O(1)`
  for updates (i.e. the cache `add` operation).\n\nUnfortunatelly you cannot always
  use this `MonadCache` due to array's natural limitations:\n\n* The key must be an
  instance of [Ix](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Ix.html#t:Ix)
  typeclass   \n* The bounds of the array must be known (and specified) beforehand
  and array cannot be resized\n* Array is a continious space of values, so if the
  key distribution is wide and sparse the memory will be wasted (or array may not
  even fit into memory)\n\nBut if the nature of your memoized function permits the
  usage of `ArrayCache` you can make your code much more faster by simply switching
  from Map-based `MonadCache` to `ArrayCache` especially if the value type of your
  function can be \"unboxed\" (i.e. it is one of primitive types like `Int` or `Double`).
  \"Unboxed\" values are packed in unboxed arrays `UArray` which offer even faster
  execution and are the most efficient in terms of memory usage.\nNormally you don't
  have to modify your monadic function definition to run `ArrayCache`-based memoization:
  just use appropriate `eval*` or `run*` function. For instance our canonical `fibm`
  function:\n\n```haskell\nfibm 0 = return 0\nfibm 1 = return 1\nfibm n = do\n  n1
  <- memo fibm (n-1)\n  n2 <- memo fibm (n-2)\n  return (n1+n2)\n```\n\ncan be run
  using `ST` array of `Integers` with the following function:\n\n```haskell\nevalFibmSTA
  :: Integer -> Integer\nevalFibmSTA n = runST $ evalArrayMemo (fibm n) (0,n)\n```\nhere
  the `(0,n)` argument defines the bounds of cache array.\nIs it equally easy to use
  unboxed version of the array, but `Integer` cannot be unboxed (it isn't primitive
  type), so lets just use `Double` for our function result:\n\n```haskell\nevalFibmSTUA
  :: Integer -> Double\nevalFibmSTUA n = runST $ evalUArrayMemo (fibm n) (0,n)\n```\n
  \nInstead of `ST` you can use `IO` monad:\n\n```haskell\nevalFibmIOA :: Integer
  -> IO Integer\nevalFibmIOA n = evalArrayMemo (fibm n) (0,n)\n\nevalFibmIOUA :: Integer
  -> IO Double\nevalFibmIOUA n = evalUArrayMemo (fibm n) (0,n)\n```\n\n### Vector-based
  memoization cache\nFor even better performance use [VectorCache](http://hackage.haskell.org/packages/archive/monad-memo/0.4.0/doc/html/Control-Monad-Memo-Vector.html)
  and its flavours ([unsafe version](http://hackage.haskell.org/packages/archive/monad-memo/0.4.0/doc/html/Control-Monad-Memo-Vector-Unsafe.html)
  and [dynamically expandable version](http://hackage.haskell.org/packages/archive/monad-memo/0.4.0/doc/html/Control-Monad-Memo-Vector-Expandable.html))
  which are all based on very fast [vector](http://hackage.haskell.org/package/vector)
  library.\n\nNote however that this `MonadCache` is even more limiting that `ArrayCache`
  since `vector` supports only `Int` as an index.\n\nThe usage is very similar to
  `ArrayCache`, but instead of range we need to specify the length of the vector:\n```haskell\nevalFibmSTV
  :: Int -> Integer\nevalFibmSTV n = runST $ evalVectorMemo (fibm n) n\n\nevalFibmIOUV
  :: Int -> IO Double\nevalFibmIOUV n = evalUVectorMemo (fibm n) n\n```\nUse \"Expandable\"
  version to avoid specifying length parameter:\n```haskell\nimport qualified Control.Monad.Memo.Vector.Expandable
  as VE\n\nevalFibmSTVE :: Int -> Integer\nevalFibmSTVE n = runST $ VE.startEvalVectorMemo
  (fibm n)\n```\n\n## Performance of different `MonadCache`'s:\n\nThe difference in
  performance for different `MonadCache`'s with Fibonacci function is demonstrated
  by [this criterion test](benchmark/Main.hs).\nThe test runs memoized Fibonacci function
  using the following caches:\n * default Map-based\n * State-based with Data.IntMap\n
  * array and unboxed array based (Array and UArray)\n * vector, unsafe vector and
  expandable vector (both boxed and unboxed vectors)\n\n![summary](benchmark/results/fib_memo.png)\n\nFull
  report can be [found here](http://htmlpreview.github.com/?https://github.com/EduardSergeev/monad-memo/blob/dev/benchmark/results/fib_memo.html).\n\n\n##
  Custom mutable cache\n\nIt is also possible to use a mutable container as a `MonadCache`
  not defined here.\nFor example if we wish to use mutable hash-table from [hashtables
  package](http://hackage.haskell.org/package/hashtables) we can do so with the following
  code:\n```haskell\n{-# LANGUAGE MultiParamTypeClasses, TypeSynonymInstances, FlexibleInstances
  #-}\n\nimport Data.Hashable\nimport Control.Monad.ST\nimport Control.Monad.Memo\nimport
  Control.Monad.Trans.Memo.ReaderCache\nimport qualified Data.HashTable.ST.Basic as
  H\n\nnewtype Container s k v = Container { toTable :: H.HashTable s k v }\n\ntype
  Cache s k v = ReaderCache (Container s k v)\n\ninstance (Eq k, Hashable k) => MonadMemo
  k v (Cache s k v (ST s)) where\n        {-# INLINE memo #-}\n        memo f k =
  do\n          c <- container\n          e <- lift $ H.lookup (toTable c) k\n          if
  isNothing e\n            then do\n              v <- f k\n              lift $ H.insert
  (toTable c) k v\n              return v\n            else return (fromJust e) \n\n{-#
  INLINE fib1 #-}\nfibm 0 = return 0\nfibm 1 = return 1\nfibm n = do\n  f1 <- memo
  fibm (n-1)\n  f2 <- memo fibm (n-2)\n  return (f1+f2)\n\nevalFib :: Int -> Int\nevalFib
  n = runST $ do\n   c <- H.new\n   evalReaderCache (fibm n) (Container c)\n```\n\n\n##
  References\n* http://www.haskell.org/haskellwiki/Memoization\n* [\"Monadic Memoization
  Mixins\" by Daniel Brown and William R. Cook](http://www.cs.utexas.edu/~wcook/Drafts/2006/MemoMixins.pdf)\n*
  [data-memocombinators](http://hackage.haskell.org/packages/archive/data-memocombinators/latest/doc/html/Data-MemoCombinators.html)\n*
  [\"Fun with Type Functions\" by Oleg Kiselyov, Ken Shan, and Simon Peyton Jones
  (see 3.1 - \"Type-directed memoization\")](http://research.microsoft.com/~simonpj/papers/assoc-types/fun-with-type-funs/typefun.pdf)\n"
license-name: BSD-3-Clause
