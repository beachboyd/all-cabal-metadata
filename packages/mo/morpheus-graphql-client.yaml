homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: ff49b2e3c388a3aa13190f02aea21cee3a872b543a50f334ea5983d4049f332e
test-bench-deps: {}
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL Client
changelog: |
  # Changelog

  ## 0.12.0 - 21.05.2020
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  morpheus-graphql-core: '>=0.12.0'
  mtl: '>=2.0 && <=3.0'
  transformers: '>=0.3.0.0 && <1.0'
  aeson: '>=1.4.4.0 && <=1.6'
  template-haskell: '>=2.0 && <=3.0'
all-versions:
- 0.12.0
author: Daviti Nalchevanidze
latest: 0.12.0
description-type: markdown
description: |-
  # Morpheus GraphQL Client

  ## Morpheus `GraphQL Client` with Template haskell QuasiQuotes

  ```hs
  defineByDocumentFile
      "./schema.gql"
    [gql|
      query GetHero ($character: Character)
        {
          deity (fatherOf:$character) {
            name
            power
            worships {
              deity2Name: name
            }
          }
        }
    |]
  ```

  with schema:

  ```gql
  input Character {
    name: String!
  }

  type Deity {
    name: String!
    worships: Deity
    power: Power!
  }

  enum Power {
    Lightning
    Teleportation
    Omniscience
  }
  ```

  will validate query and Generate:

  - namespaced response and variable types
  - instance for `Fetch` typeClass

  ```hs
  data GetHero = GetHero {
    deity: DeityDeity
  }

  -- from: {user
  data DeityDeity = DeityDeity {
    name: Text,
    worships: Maybe DeityWorshipsDeity
    power: Power
  }

  -- from: {deity{worships
  data DeityWorshipsDeity = DeityWorshipsDeity {
    name: Text,
  }

  data Power =
      PowerLightning
    | PowerTeleportation
    | PowerOmniscience

  data GetHeroArgs = GetHeroArgs {
    getHeroArgsCharacter: Character
  }

  data Character = Character {
    characterName: Person
  }
  ```

  as you see, response type field name collision can be handled with GraphQL `alias`.

  with `fetch` you can fetch well typed response `GetHero`.

  ```haskell
    fetchHero :: Args GetHero -> m (Either String GetHero)
    fetchHero = fetch jsonRes args
        where
          args = GetHeroArgs {getHeroArgsCharacter = Person {characterName = "Zeus"}}
          jsonRes :: ByteString -> m ByteString
          jsonRes = <GraphQL APi>
  ```

  in this case, `jsonRes` resolves a request into a response in some monad `m`.

  A `fetch` resolver implementation against [a real API](https://swapi.graph.cool) may look like the following:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Data.ByteString.Lazy (ByteString)
  import qualified Data.ByteString.Char8 as C8
  import Network.HTTP.Req

  resolver :: String -> ByteString -> IO ByteString
  resolver tok b = runReq defaultHttpConfig $ do
      let headers = header "Content-Type" "application/json"
      responseBody <$> req POST (https "swapi.graph.cool") (ReqBodyLbs b) lbsResponse headers
  ```

  this is demonstrated in examples/src/Client/StarWarsClient.hs

  types can be generated from `introspection` too:

  ```haskell
  defineByIntrospectionFile "./introspection.json"
  ```
license-name: MIT
