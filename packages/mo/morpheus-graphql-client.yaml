homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: 4a8952c80b4a37788aac793c765ef491daeb13c5afe1c34543a7f8024ad14f30
test-bench-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  morpheus-graphql-client: -any
  morpheus-graphql-core: '>=0.14.0'
  mtl: '>=2.0 && <=3.0'
  tasty-hunit: -any
  transformers: '>=0.3.0.0 && <1.0'
  tasty: -any
  aeson: -any
  template-haskell: '>=2.0 && <=3.0'
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL Client
changelog: |
  # Changelog

  ## 0.14.0 - 15.08.2020

  ### new features

  - supports interfaces.

  - supports of block string values.

  - support of `schema`. issue #412

    ```graphql
    schema {
      query: MyQuery
    }
    ```

  - generated types have instance of class `Eq`

  ### breaking changes

  - custom scalars Should Provide instance of class `Eq`

  ## 0.13.0 - 22.06.2020

  ### breaking changes

  - from now you should provide for every custom graphql scalar definition coresponoding haskell type definition and `GQLScalar` implementation fot it. for details see [`examples-client`](https://github.com/morpheusgraphql/morpheus-graphql/tree/master/examples-client)

  - input fields and query arguments are imported without namespacing

  ### new features

  - exposed: `ScalarValues`,`GQLScalar`, `ID`

  ## 0.12.0 - 21.05.2020
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  morpheus-graphql-core: '>=0.14.0'
  mtl: '>=2.0 && <=3.0'
  transformers: '>=0.3.0.0 && <1.0'
  aeson: '>=1.4.4.0 && <=1.6'
  template-haskell: '>=2.0 && <=3.0'
all-versions:
- 0.12.0
- 0.13.0
- 0.14.0
author: Daviti Nalchevanidze
latest: 0.14.0
description-type: markdown
description: |
  # Morpheus GraphQL Client

  ## Morpheus `GraphQL Client` with Template haskell QuasiQuotes

  ```hs
  defineByDocumentFile
      "./schema.gql"
    [gql|
      query GetHero ($character: Character)
        {
          deity (fatherOf:$character) {
            name
            power
            worships {
              deity2Name: name
            }
          }
        }
    |]
  ```

  with schema:

  ```gql
  input Character {
    name: String!
  }

  type Deity {
    name: String!
    worships: Deity
    power: Power!
  }

  enum Power {
    Lightning
    Teleportation
    Omniscience
  }
  ```

  will validate query and Generate:

  - namespaced response and variable types
  - instance for `Fetch` typeClass

  ```hs
  data GetHero = GetHero {
    deity: DeityDeity
  }

  -- from: {user
  data DeityDeity = DeityDeity {
    name: Text,
    worships: Maybe DeityWorshipsDeity
    power: Power
  }

  -- from: {deity{worships
  data DeityWorshipsDeity = DeityWorshipsDeity {
    name: Text,
  }

  data Power =
      PowerLightning
    | PowerTeleportation
    | PowerOmniscience

  data GetHeroArgs = GetHeroArgs {
    character: Character
  }

  data Character = Character {
    name: Person
  }
  ```

  as you see, response type field name collision can be handled with GraphQL `alias`.

  with `fetch` you can fetch well typed response `GetHero`.

  ```haskell
    fetchHero :: Args GetHero -> m (Either String GetHero)
    fetchHero = fetch jsonRes args
        where
          args = GetHeroArgs {character = Person {name = "Zeus"}}
          jsonRes :: ByteString -> m ByteString
          jsonRes = <GraphQL APi>
  ```

  in this case, `jsonRes` resolves a request into a response in some monad `m`.

  A `fetch` resolver implementation against [a real API](https://swapi.graph.cool) may look like the following:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Data.ByteString.Lazy (ByteString)
  import qualified Data.ByteString.Char8 as C8
  import Network.HTTP.Req

  resolver :: String -> ByteString -> IO ByteString
  resolver tok b = runReq defaultHttpConfig $ do
      let headers = header "Content-Type" "application/json"
      responseBody <$> req POST (https "swapi.graph.cool") (ReqBodyLbs b) lbsResponse headers
  ```

  this is demonstrated in examples/src/Client/StarWarsClient.hs

  types can be generated from `introspection` too:

  ```haskell
  defineByIntrospectionFile "./introspection.json"
  ```
license-name: MIT
