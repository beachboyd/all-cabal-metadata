homepage: https://github.com/neovimhaskell/nvim-hs
changelog-type: markdown
hash: 3f3dfff71c5b2ecc99c42170a96f661b45b7c20df2fcdd0156eebbb528720019
test-bench-deps:
  foreign-store: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: -any
  unliftio: -any
  stm: -any
  path: -any
  base: ! '>=4.6 && <5'
  time: -any
  hspec: ==2.*
  text: -any
  megaparsec: -any
  network: -any
  conduit: -any
  data-default: -any
  HUnit: -any
  containers: -any
  unliftio-core: -any
  utf8-string: -any
  hslogger: -any
  messagepack: -any
  typed-process: ! '>=0.2.1.0'
  nvim-hs: -any
  mtl: -any
  transformers-base: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: ! '>=2.6'
  hspec-discover: -any
  resourcet: -any
  path-io: -any
  template-haskell: -any
  vector: -any
  time-locale-compat: -any
  prettyprinter-ansi-terminal: -any
maintainer: woozletoff@gmail.com
synopsis: Haskell plugin backend for neovim
changelog: |
  # 2.0.0.0

  * Your configuration is now just a Haskell project. The dependency to Dyre has
    been removed and you are now forced to write a line of vimL and add a normal
    nvim-plugin to your setup. The template still does set everything up for you.
    The distinction between a plugin and a personal nvim-hs configuration is now
    gone and apart from settings things up, nothing has changed in this regard.
    The nvim-plugin contains the necessary documentation on what to do and
    should be available with `:help nvim-hs` when installed correctly.

  * Since basically all generated functions were throwing exceptions anyway, the
    primed functions have become the default and if you want to explicitly handle
    error cases, you have to surround your code with `catch` or something more
    appropriate from `UnliftIO.Exception`. You have to remove `'` from your API
    calls or you have to adjust your error handling.

  * There are now three flavors of APIs and you have to import one additionally to
    importing the `Neovim` module:

    - *Neovim.API.Text*: This uses strict `Text` for strings and `Vector` as
      lists. This is the recommended API to use.

    - *Neovim.API.String*: This is the same as before. Strings are `String`
      and lists are `[]`. This is for the lazy and backwards-ish compatiblity.

    - *Neovim.API.ByteString*: This can be useful for really performance critical
      stuff or if you`re writing a plugin for binary files.

  # 1.0.1.0

  * The `Neovim.Debug` module is now more pleasant to use.

  # 1.0.0.2

  * With the api of neovim 0.3.0, a function was exposed that had a reserved
    haskell keyword as a parameter name. The code generation did not sanitize
    this. This bugfix releases resolves this.

  # 1.0.0.0

  * Each plugin (type) now defines an environment which is similar to how
    stateful plugins have been declared in previous versions. If you need
    multiple different environments for different functions, you can make them
    fields of a bigger environment or define multiple plugin values.

    The type `Neovim r st a` has become `Neovim env a` where `env` is
    technically equivalent to the previous `r`.
    I was mainly motivated by this blog post:

    https://www.fpcomplete.com/blog/2017/06/readert-design-pattern

  * Only works with ghc >= 8. I removed some backwards compatibility. If you
    need older ghc versions, just use the previous version (0.2.5) as the
    feature set hasn't really changed.

  * A different pretty printer library is now used and may surface at some
    places.

  * Functions do now time out after some time, 10 seconds for those that block
    neovim and 10 minutes for background functions.

  * A few types have been adjusted.

  * Some improvement in error reporting.

  # 0.2.5

  * Older versions of `nvim-hs` may not function if some versions of a
    dependency are used. This version has proper bounds for the dependency and
    should cause a compile time failure if an incompatible version of the
    dependency is used (see #61).

  # 0.2.0

  * Replace error code of remote functions to return
    `Either NeovimException a` instead of a generic messagepack `Object`

  * Export API functions that throw a `NeovimException` instead of returning
    `Either NeovimExeception a`.

  * Replace three element tuple for stateful function declaration (#53)

  * Add a stack template for easier setup

  * Exceptions from pure code are now caught (#48)

  # 0.1.0

  * Adjust parser for output of `nvim --api-info`

  * Adjust parser of ConfigHelper plugin

  # 0.0.7

  * Adjust handling of string sent by neovim in API generation.

  # 0.0.6

  * Noteworthy new API functions for the user's convenience:

    - `errOnInvalidResult`
    - `(:+)`

  * ansi-wl-pprint is used for pretty printing of various things now. Most
    notably, the error type has been changed from `String` to `Doc`.
    This is a breaking change, but it was kind of announced in the issues
    list. In any case, uses of `err` can be fixed by enabling the
    `OverloadedStrings` extension. Other breakages have to be fixed by hand.

  # 0.0.5

  * Documentation received some love.

  * A few renames of repurposed internals.

  # 0.0.3

  * Debugging facilities for ghci have been added. Check out the
    `Neovim.Debug` module! These few functions are very valuable to debug your
    code or even the code of nvim-hs itself.

  * Startup code now has a special `Neovim` environment which has access to
    some of the internals that may or may not be useful. This change allowed
    the ConfigHelper plugin to be included as a normal, separable plugin.
    Unfortunately, this potentially breaks the plugin startup code of some
    existing plugins.

  * Neovim context is no longer a type synonym, but a newtype wrapper around
    the previous type synonym with an added `ResourceT` wrapper. The functions
    from `MonadReader` are now actually exported as those.

    As a consequence, some of your code may break if you lack some specific
    instances which were auto-derived before. Send a PR or open a ticket to
    resolve this.

  * Add handling for some kind of variadic arguments handling.

    A command or function will be passed `Nothing` as it's
    last arguments if the argument type is wrapped in `Maybe`
    and the invocation on the side of neovim did not pass those
    arguments.

  # 0.0.2

  * Add handling for special command options

    This breaks code that used `command` or `command'` to export
    functionality. You should replace the options with a list
    of `CommandOptions`.

    An export like `$(command' foo) def { cmdSync = Async }` must be redefined
    to `$(command' foo) [CmdSync Async]`.

  # 0.0.1

  * Usable prototype implementation
basic-deps:
  foreign-store: -any
  void: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: ! '>=0.8.0'
  unliftio: ! '>=0.2'
  stm: -any
  path: -any
  base: ! '>=4.9 && <5'
  time: -any
  text: -any
  megaparsec: <8
  network: -any
  conduit: ! '>=1.3.0'
  data-default: -any
  containers: -any
  unliftio-core: -any
  utf8-string: -any
  hslogger: -any
  messagepack: ! '>=0.5.4'
  typed-process: -any
  mtl: ! '>=2.2.1 && <2.3'
  transformers-base: -any
  prettyprinter: ! '>=1.2 && <2'
  transformers: -any
  optparse-applicative: -any
  deepseq: ! '>=1.1 && <1.5'
  resourcet: ! '>=1.1.11'
  path-io: -any
  template-haskell: -any
  vector: -any
  time-locale-compat: -any
  prettyprinter-ansi-terminal: -any
all-versions:
- 0.2.5
- 1.0.0.2
- 1.0.0.3
- 2.0.0.0
author: Sebastian Witte
latest: 2.0.0.0
description-type: markdown
description: |+
  # nvim-hs

  Neovim API for Haskell plugins as well as a plugin provider.
  This library and executable should provide a basis for developing
  plugins. This package should only contain broadly useful interfaces
  to write plugins for neovim in haskell. The design goal is to create
  an easy to use API that avoids most of the boilerplate while still retaining
  some sense of reliability and type safety. Since Template Haskell is used
  to generate the neovim bindings and to avoid some of the boilerplate
  handy work, some exotic operating systems and architectures may not work.

  [![Build Status](https://travis-ci.org/neovimhaskell/nvim-hs.svg?branch=master)](https://travis-ci.org/neovimhaskell/nvim-hs)
  [![Hackage version](https://img.shields.io/hackage/v/nvim-hs.svg?style=flat)](https://hackage.haskell.org/package/nvim-hs)
  [![nvim-hs on latest Stackage LTS](http://stackage.org/package/nvim-hs/badge/lts)](http://stackage.org/lts/package/nvim-hs)
  [![nvim-hs on Stackage Nightly](http://stackage.org/package/nvim-hs/badge/nightly)](http://stackage.org/nightly/package/nvim-hs)

  # What do I have to expect if I were to use it now?

  Check the issue list here on github.

  # How do I start using this?

  You need to install a neovim plugin that manages starting of `nvim-hs` plugins.
  Just follow the instructions here:
  [nvim-hs.vim](https://github.com/neovimhaskell/nvim-hs.vim)

  Once you have installed that plugin, you can use `nvim-hs` plugins as you would
  normal vim plugins. Every plugin is started as a separate process which should
  be fine unless you have a lot of them.

  You only have to read on if you want to start "scripting" functions or plugins
  yourself in Haskell.

  # Scripting with Haskell

  The entry point for all Haskell-based scripts is a plugin.
  An `nvim-hs` plugin is a plain Haskell project with two conventions:

  1. You need an executable that starts a `msgpack-rpc` compatible client.

  2. You need a tiny bit of `vimL` in your runtime path that starts the plugin.

  The simplest way to get started is the stack template from this
  repository/package inside your neovim configuration folder which
  will be described here. (Alternatively, you can manually create a project
  and do everything that is explained in `:help nvim-hs.txt` which should be
  available if you installed the plugin mentioned in the previous section.)

  You need to [install stack](https://docs.haskellstack.org/en/stable/README/)
  and have the neovim executable on the path.
  (The API code generation calls `nvim --api-info`.)

  Afterwards, you switch to your neovim configuration folder (typically `~/.config/nvim`) and
  you have to create your plugin project.

  > cd ~/.config/nvim

  > stack new my-nvim-hs https://raw.githubusercontent.com/neovimhaskell/nvim-hs/master/stack-template.hsfiles --bare --omit-packages --ignore-subdirs

  If you start neovim now, it will compile the example plugins which may take a
  few minutes. Once it is started you can use the predefined functions from the
  template.

  > :echo NextRandom()

  should print a random number.

  To start writing your own functions and plugins, read through the files
  generated by the template accompanied by the
  [library documentation on hackage](http://hackage.haskell.org/package/nvim-hs).

  # Contributing

  Documentation, typo fixes and alike will almost always be merged.

  If you want to bring forward new features or convenience libraries
  for interacting with neovim, you should create an issue first. The features
  of this (cabal) project should be kept small as this helps
  reducing the development time. (For some tests it is
  necessary to issue `cabal install`, so any change to to a module can
  significantly increase the compilation time.)
  If your idea solves a general problem, feel free to open an issue in the
  library project of nvim-hs:
  [nvim-hs-contrib](https://github.com/neovimhaskell/nvim-hs-contrib)

license-name: Apache-2.0
