homepage: https://github.com/lysxia/twentyseven
changelog-type: ''
hash: 32b1d53bc3a5a56998f35452cbcdc9d00db7e4848e50ebd8fec2607d2243f147
test-bench-deps:
  split: -any
  Cabal: ! '>=1.9.3'
  base: ! '>=4.8'
  twentyseven: -any
  HUnit-Plus: ! '>=1.1.0'
  cabal-test-quickcheck: ! '>=0.1.6'
  QuickCheck: ! '>=2.8'
  vector: -any
maintainer: lysxia@gmail.com
synopsis: Rubik's cube solver
changelog: ''
basic-deps:
  newtype: ! '>=0.2'
  MonadRandom: -any
  base: ! '>=4.8 && <5'
  time: <1.6
  monad-loops: -any
  filepath: -any
  ref-fd: ! '>=0.4'
  twentyseven: -any
  containers: ! '>=0.5'
  heap: ! '>=1.0'
  mtl: ! '>=2.1'
  transformers: -any
  optparse-applicative: -any
  deepseq: -any
  template-haskell: -any
  primitive: ! '>=0.6'
  vector: ! '>=0.10'
  directory: -any
all-versions:
- 0.0.0
author: Li-yao Xia
latest: 0.0.0
description-type: markdown
description: ! "Twentyseven\n===========\n\nRubik's cube solver in Haskell.\n\nInspired
  by [Herbert Kociemba's *Cube Explorer*](http://kociemba.org/cube.htm).\n\nThe main
  idea is to precompute, for every configuration, the number of moves\nrequired to
  put certain subsets of the 27 cubies composing the 3x3 Rubik's cube\nin their right
  place and/or in the right orientation. This gives lower bounds\nused for an A⋆-like
  search in the graph of scrambled cubes.\n\n---\n\nBy default, a suboptimal \"two-phase\"
  solver is used, as it runs rather quickly.\nIt currently solves 1000 random cubes
  (uniformly distributed) in about one\nminute. The optimal solver is quite slow however,
  taking between five minutes\nand two hours to solve a random cube (18 moves in average).\n\nThe
  solver must precompute a certain number of lookup tables, which can be\nstored in
  files. These tables take fifteen seconds to compute and weigh 13MB\nfor the two-phase
  solver, compare that to about 8 hours and 2GB for the optimal\none!\n\nYou may check
  the produced files with the checksums in `ts-tables.sha256`.\nA compressed archive
  `ts-tables.zip` (723MB) of all precomputed tables is\navailable in the branch `fetch-tables`
  via `git-lfs`. Unzip it in `$HOME/.27/`,\nor wherever (see usage below).\n\nUsage
  summary\n-------------\n\n    twentyseven [-p] [--strict] [-d DIR] [--optimal]\n\n-
  For the first invocation, use `-p` to precompute nonexistent lookup tables,\n  otherwise
  an error is thrown when `twentyseven` tries to load them;\n- `--strict` loads tables
  immediately, otherwise they are loaded \"by need\" (so\n  you can also send it a
  cube to solve);\n- `-d DIR` specifies the directory where the tables should be read
  and written\n  (default: `$HOME/.27/`).\n\nThe input is read line by line.\n\nInput
  format\n------------\n\nA line can be one of:\n\n- A string of 54 characters (ignoring
  spaces) from a set of (almost any) 6\n  characters. Each character then corresponds
  to the color of one facelet, in\n  the order illustrated below.\n\n  Output: a sequence
  of moves to unscramble it.\n\n  Facelets are numbered in base 9. Faces `0,1,2,3,4,5`
  correspond to `U,L,F,R,B,D`.\n\n                  00 01 02\n                  03
  04 05\n                  06 07 08\n\n        10 11 12  20 21 22  30 31 32  40 41
  42\n        13 14 15  23 24 25  33 34 35  43 44 45\n        16 17 18  26 27 28  36
  37 38  46 47 48\n\n                  50 51 52\n                  53 54 55\n                  56
  57 58\n\n- A dot `.` followed by a sequence of moves to scramble the cube.\n\n  The
  basic moves are given by a letter in `[ULFRBD]`, or their lowercase\n  counterparts.
  \ Each letter corresponds to a clockwise quarter turn of the\n  given face (up,
  left, front, right, back, down).  The orientation is\n  determined when looking
  directly at the turning face.\n\n  For every basic move, an optional suffix `[23']`
  allows to specify a half\n  turn (e.g., `U2`), equivalent to a sequence of two quarter
  turns (`UU`), or a\n  counterclockwise quarter turn (e.g., `U3` or `U'`) equivalent
  to a sequence\n  of three clockwise (`UUU`).\n\n  Output: a description of the resulting
  cube if the moves are applied starting\n  from the solved cube (in the format above,
  with letters `ULFRBD` as\n  colors).\n\n- The keyword `random`.\n\n  Output: a random
  *solvable* cube with uniform distribution.\n\n- The keyword `quit` (or an end-of-file)
  terminates the interactive session.\n\nExample\n-------\n\n### Initialization\n\n
  \   $ echo quit|twentyseven -p --strict\n\n### Example\n\n`examples.txt`:\n\n    qwqwqwqwq
  erererere tytytytyt rerererer ytytytyty wqwqwqwqw\n    qwqwqwqwq erqrerere tytytytyt
  rerererer ytytytyty wqwqwqwqw\n    BBBBUBBBB UUUULUUUU RRRRFRRRR DDDDRDDDD LLLLBLLLL
  FFFFDFFFF\n    DDDFUDLRB FUFDLLLRR UBLBFDFUD ULBFRULLB RRRLBBRUB UBFFDFDRU\n    111121111
  333313333 222232222 444454444 666646666 555565555\n    111111214 223222222 131333333
  344444444 555555555 666666666\n    .udddlrrrbfffuddd\n    random\n\nThe output then
  looks like this:\n\n    $ twentyseven < examples.txt\n    U2 D2 L2 R2 F2 B2\n    Facelets
  [6,18,11] (\"qtq\") do not match any regular cubie.\n    U D F B L R U2 R2 F2 R2
  U2 L2 B2 U' D' B2\n    U L B' L R2 D R U2 F U2 L2 B2 U B2 D' B2 U' R2 U L2 R2 U\n
  \   U D L R F B U2 B2 L2 F2 D2 B2 R2 U' D' L2\n    L U' F2 U F2 U L U' L2 D F2 D'
  F2\n    BBBBUBBBB UUUULUUUU RRRRFRRRR DDDDRDDDD LLLLBLLLL FFFFDFFFF\n    BDLLUFBUD
  LBUBLURFL RLBFFBFRU RLFURULRR UBDRBRDDU DFBDDDFLF\n\n---\n\nDetail of current heuristics\n----------------------------\n\nThe
  distance estimations are based on cosets corresponding to the following\nelements.\n\n###
  Two-phase\n\n#### Phase 1\n\n- Corner Orientation × UD Slice\n- Edge Orientation
  × UD Slice\n\nIt is possible to store the actual distances to the goal set in phase
  1 but\nthe current speed seems good enough for now.\n\n#### Phase 2\n\n- Corner
  Permutation × UD Slice Permutation (Phase 2)\n- UD Edge Permutation (Phase 2) ×
  UD SlicePermutation (Phase 2)\n\n### Optimal\n\n- Corner Orientation × Edge Orientation\n
  \ × XY Slice Permutation, for XY in {UD, LR, FB}\n- Corner Orientation × Corner
  Permutation\n"
license-name: MIT
