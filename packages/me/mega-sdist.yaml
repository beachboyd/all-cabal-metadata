homepage: https://github.com/snoyberg/mega-sdist
changelog-type: markdown
hash: 8d26db05b2959367da5d29e7c93543cd999b21eb9224d69b99d11d498e8f3eaa
test-bench-deps: {}
maintainer: michael@snoyman.com
synopsis: Handles uploading to Hackage from mega repos
changelog: ! '## 0.3.0.3


  * Diffs against previous versions


  ## 0.3.0.2


  * Switch to optparse-simple

  * Add `--get-diffs`


  ## 0.3.0.1


  * Correctly handle megarepos with matching prefixes


  ## 0.3.0


  * Revived from cabal-src

  * Use Stack internally

'
basic-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  text: -any
  filepath: -any
  classy-prelude-conduit: ! '>=1.2'
  conduit-extra: -any
  tar-conduit: -any
  typed-process: -any
  optparse-simple: -any
  temporary: -any
  http-conduit: ! '>=2.2.3'
  yaml: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
- '0.2.0.6'
- '0.2.0.7'
- '0.2.0.8'
- '0.2.0.9'
- '0.2.10'
- '0.2.10.1'
- '0.2.10.2'
- '0.2.10.3'
- '0.2.10.4'
- '0.3.0'
- '0.3.0.2'
- '0.3.0.3'
author: Michael Snoyman
latest: '0.3.0.3'
description-type: markdown
description: ! "# mega-sdist\n\nThis is a utility written to address the specific
  needs in maintaining\nHaskell \"mega-repos,\" or Git repositories containing multiple
  Cabal\nprojects. It is intended to ease the process of deciding which\npackages
  need to be released and tagging those releases appropriately.\n\nIt provides the
  following functionality:\n\n* Detect when local code has changed from what's on
  Hackage\n    * Note that, due to Hackage revisions, sometimes this logic isn't\n
  \     perfect\n* Detect when a version number needs to be updated\n* Dump the difference
  between the Hackage version of your package and\n  the local version\n\nTo install
  it... well, listen. This tool is intended for people\nauthoring Haskell packages.
  Odds are, you already know how to do\nthis. And if you don't know, this probably
  isn't a tool that will help\nyou. Anyway, in order to install it, first\n[install
  Stack](https://haskell-lang.org/get-started) and then run\n`stack install mega-sdist`,
  or just `stack install` inside this\nrepository.\n\n## Opinionated tool\n\nThis
  utility is highly opinionated in some ways, e.g.:\n\n* It only supports one style
  of Git tag name:\n  `packagename/version`. This may look weird in non-mega-repos,
  where\n  `v1.2.3` looks better than `foo/1.2.3`, but for mega-repos the\n  former
  doesn't make sense.\n* It depends on Stack for both discovering all of your local
  packages,\n  and for uploading to Hackage.\n\nIf you're OK with these opinions,
  keep reading for usage.\n\n## Have I changed anything?\n\nLet's say I'm working
  on the\n[monad-unlift megarepo](https://github.com/fpco/monad-unlift) (chosen\nas
  an example of a relatively small repo). I've merged some PRs\nrecently, or at least
  think I have. But I don't remember which of the\nindividual packages within the
  repo this affected. Instead of looking\nat the commit history like some caveman,
  I'll typically do:\n\n```\n$ git pull # make sure I have all latest changes\n$ mega-sdist\n```\n\nThe
  `mega-sdist` command will:\n\n* Build tarballs for all local packages\n* Check what
  the latest versions of my packages on Hackage are\n* Do a full `diff` on these two
  things and see if anything's changed\n\nAt the time of writing, here's the output
  from this repo:\n\n```\nThe following packages from Hackage have not changed:\nmonad-unlift-0.2.0\n\nThe
  following packages require a version bump:\nmonad-unlift-ref-0.2.1\n```\n\nWhat
  this means is:\n\n* The `monad-unlift` package I have locally is at version `0.2.0`.
  And\n  it perfectly matches that version on Hackage. No actions necessary.\n* The
  `monad-unlift-ref` package I have locally is at version\n  `0.2.1`. And it doesn't
  match the code on Hackage. Therefore, if I\n  wanted to run `stack upload monad-unlift-ref`
  successfully, I'd need\n  to bump the version number.\n\n## What did I change?\n\nWell,
  again, if I wanted to see what changed, I could run (again, like\na caveman):\n\n```\n$
  git diff monad-unlift-ref/0.2.1 -- monad-unlift-ref\n```\n\nBut that's long! `mega-sidst`'s
  got your back. Just run:\n\n```\n$ mega-sdist monad-unlift-ref --get-diffs\n```\n\nThis
  will print out the difference between the tarball uploaded to\nHackage and what
  you have locally. Besides my tongue-in-cheek comment\nabove, this is also useful
  if, for some reason, you either don't have\nor don't trust the tags in your Git
  repo.\n\nOne other thing: this diff is currently based on the pristine tarball\nfrom
  Hackage, ignoring cabal file revisions. So the difference may be\nslightly different
  from what you'd get from `stack unpack\nmonad-unlift-ref-0.2.1`. But `¯\\_(ツ)_/¯`
  that's revisions for you.\n\nThe default behavior of `mega-sdist` is to look at
  all packages\nspecified in your `stack.yaml`. Targets can be any directory. And\n`mega-sdist`
  will automatically look at packages in any\n_subdirectory_, so that `mega-sdist
  .` is the same as `mega-sdist` at\nthe root of your repo\\*.\n\n\\* Assuming all
  of your packages are actually _in_ your repo, but only\ncrazy people would do otherwise.\n\n##
  Preparing a new release\n\nOK, now I continue working on my project, and I've:\n\n*
  Made some changes to `monad-unlift`\n* Updated the cabal file's version number\n
  \   * And of course I also updated the `ChangeLog.md`, I'm not some\n      monster\n\nFrom
  the root of my repo, I run:\n\n```\n$ mega-sdist monad-unlift\n```\n\nOr, equivalently,
  from inside the `monad-unlift` subdirectory I run:\n\n```\n$ mega-sdist .\n```\n\nEither
  way, I get:\n\n```\nThe following new packages exist locally:\nmonad-unlift-0.2.1\n\nNo
  version bumps required, good to go!\n```\n\nThis tells me that my package has local
  changes, _and_ the version\nnumber has been updated, so that `stack upload monad-unlift`
  will\nwork. Neato! Now, you _could_ just run `stack upload ...`, but here's\nwhat
  I usually do. First, I'll review the changes I'm about to upload\nand make sure
  there are no surprises:\n\n```\n$ mega-sdist --get-diffs .\n\nThe following new
  packages exist locally:\nmonad-unlift-0.2.1\ndiff -r old/monad-unlift-0.2.0/ChangeLog.md
  new/monad-unlift-0.2.1/ChangeLog.md\n0a1,4\n> ## 0.2.1\n>\n> * Silly changes\n>\ndiff
  -r old/monad-unlift-0.2.0/Control/Monad/Trans/Unlift.hs new/monad-unlift-0.2.1/Control/Monad/Trans/Unlift.hs\n51a52,54\n>\n>
  -- I just need some space\n>\ndiff -r old/monad-unlift-0.2.0/monad-unlift.cabal
  new/monad-unlift-0.2.1/monad-unlift.cabal\n2c2\n< version:             0.2.0\n---\n>
  version:             0.2.1\n\nNo version bumps required, good to go!\n```\n\nOK,
  that's what I wanted. Time to release. Next, I'm going to use\n`mega-sdist` to tag
  the release:\n\n```\n$ mega-sdist --gittag .\n```\n\nFrom the root of my repo, this
  would notice that `monad-unlift-ref`\nstill requires a version bump, and refuse
  to proceed. But inside the\n`monad-unlift` directory, it notices that all necessary
  version bumps\nare done, and happily tags:\n\n```\n$ mega-sdist --gittag .\nThe
  following new packages exist locally:\nmonad-unlift-0.2.1\n\nNo version bumps required,
  good to go!\nRaw command: git tag monad-unlift/0.2.1\n```\n\nAnd suddenly I notice
  something new:\n\n```\n$ ls tarballs/\nmonad-unlift-0.2.1.tar.gz\n```\n\nNeat, `mega-sdist`
  left behind tarballs I can upload! To do so, I run:\n\n```\n$ stack upload tarballs/*\n```\n\nNote
  that this will work whether I'm trying to upload just one\npackage, or all of the
  updated packages in my repo. Finally, I need to\npush the new tags to Github (or
  wherever):\n\n```\n$ git push --tags\n```\n\nAnd in fact, this upload sequence is
  so common that I have a shell\nalias set up:\n\n```\n$ alias upload\nalias upload='mega-sdist
  --gittag . && stack upload tarballs/* && git push --tags'\n```\n\nSo there you have
  it: convenient little utility to help manage repos\nwith lots of packages in them.\n"
license-name: MIT
