homepage: https://github.com/dterei/memcache-hs
changelog-type: markdown
hash: ea46587ade8d687b1cb6de0c45f660c0cfcbaf8c9f1a95363974fd2f86cd23f9
test-bench-deps:
  bytestring: ! '>=0.9.2.1'
  base: <5
  criterion: ! '>0.6.0.0'
  network: ! '>=2.4'
  memcache: -any
  blaze-builder: ! '>=0.3.1.0'
  binary: ! '>=0.6.2.0'
maintainer: David Terei <code@davidterei.com>
synopsis: A memcached client library.
changelog: ! "# 0.2.0.1 - November 2nd, 2016\n\n* Fix compatability with latest `data-default-class`\n*
  Add new ReqRaw type for external clients to implement custom requests. Quite\n  a
  hack right now, so behind a WARNING pragma.\n\n# 0.2.0.0 - May 27th, 2016\n\n* Big
  design change to reduce code duplication (`Protocol` module gone).\n* Remove `Options`
  type - just fixed configuration for now.\n* Design change also allows proper retry
  handling on operation failure - we\n  retry an operation against the same server,
  but after N consecutive failures,\n  we mark the server as dead and don't try using
  it again until M seconds has\n  passed.\n* Simplify exception hierachy - just one
  type `MemcacheError` now for\n* Remove `defaultOptions` and `defaultServerSpec`,
  will revist usefulness.\n  exceptions.\n* Remove many `Typeable` instances.\n* Support
  better testing with a mock Memcached server.\n* Fix bug in socket handling - detected
  EOF properly.\n* Greatly improve documentation.\n* Use `data-default-class` for
  defaults of servers and options.\n\n# 0.1.0.1 - February 26th, 2016\n\n* Consistent
  usage of 'memcached' instead of 'memcache'.\n* Document `Database.Memcache.Client`.\n*
  Add inline pragmas in appropriate places.\n* Fix bug handling fragmented IP packets
  (Alfredo Di Napoli).\n\n# 0.1.0.0 - May 18th, 2015\n\n* First proper release (although
  still lots of rough edges!).\n* Filled out `Data.Memcache.Client` to a complete
  API.\n* Integrated cluster and authentication handling.\n* Better error and exception
  handling.\n* Fix compilation under GHC 7.10.\n\n# 0.0.1 - May 5th, 2015\n\n* Initial
  (incomplete) support for a cluster of memcached servers.\n* Fixed compilation under
  GHC 7.4.\n\n# 0.0.0 - August 23rd, 2013\n\n* Initial release. Support for a single
  server.\n\n"
basic-deps:
  bytestring: ! '>=0.9.2.1'
  base: <5
  data-default-class: ! '>=0.1.0'
  time: ! '>=1.4'
  resource-pool: ! '>=0.2.1.0'
  network: ! '>=2.4'
  blaze-builder: ! '>=0.3.1.0'
  binary: ! '>=0.6.2.0'
  hashable: ! '>=1.2.0.3'
  vector: ! '>=0.7'
all-versions:
- 0.0.0
- 0.0.1
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
author: David Terei <code@davidterei.com>
latest: 0.2.0.1
description-type: markdown
description: ! "# memcache: Haskell Memcached Client\n\n\n[![Hackage](https://img.shields.io/hackage/v/memcache.svg?style=flat)](https://hackage.haskell.org/package/memcache)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/memcache.svg?style=flat)](http://packdeps.haskellers.com/reverse/memcache)\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat)][tl;dr
  Legal: BSD3]\n[![Build](https://img.shields.io/travis/dterei/memcache-hs.svg?style=flat)](https://travis-ci.org/dterei/memcache-hs)\n[![Gitter](https://badges.gitter.im/dterei/memcache-hs.svg)](https://gitter.im/dterei/memcache-hs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n[tl;dr
  Legal: BSD3]:\n  https://tldrlegal.com/license/bsd-3-clause-license-(revised)\n
  \ \"BSD3 License\"\n\nA client library for a memcached cluster.\n\nIt supports the
  binary memcached protocol and SASL authentication. No support\nfor the ASCII protocol
  is provided. It supports connecting to a single, or a\ncluster of memcached servers.
  When connecting to a cluser, consistent hashing\nis used for routing requests to
  the appropriate server.\n\nComplete coverage of the memcached protocol is provided
  except for multi-get\nand other pipelined operations.\n\n## Licensing\n\nThis library
  is BSD-licensed.\n\n## Tools\n\nThis library also includes a few tools for manipulating
  and experimenting with\nmemcached servers.\n\n* `OpGen` -- A load generator for
  memcached. Doesn't collect timing statistics,\n  other tools like [mutilate](https://github.com/leverich/mutilate)
  already do\n  that very well. This tool is useful in conjunction with mutilate.\n*
  `Loader` -- A tool to load random data of a certain size into a memcached\n  server.
  Useful for priming a server for testing.\n\n## Architecture Notes\n\nWe're relying
  on `Data.Pool` for thread safety right now, which is fine but is\na blocking API
  in that when we grab a socket (`withResource`) we are blocking\nany other requests
  being sent over that connection until we get a response.\nThat is, we can't pipeline.\n\nNow,
  use of multiple connections through the pool abstraction is an easy way to\nsolve
  this and perhaps the right approach. But, could also implement own pool\nabstraction
  that allowed pipelining. This wouldn't be a pool abstraction so\nmuch as just round-robbining
  over multiple connections for performance.\n\nEither way, a pool is fine for now.\n\n##
  Other clients\n\n* [C: libmemcached](http://libmemcached.org/libMemcached.html)\n*
  [Java: SpyMemcached](http://code.google.com/p/spymemcached/)\n* [Ruby: Dalli](https://github.com/mperham/dalli)\n\n##
  Get involved!\n\nWe are happy to receive bug reports, fixes, documentation enhancements,
  and\nother improvements.\n\nPlease report bugs via the\n[github issue tracker](http://github.com/dterei/memcache-hs/issues).\n\nMaster
  [git repository](http://github.com/dterei/memcache-hs):\n\n* `git clone https://github.com/dterei/memcache-hs.git`\n\n##
  Authors\n\nThis library is written and maintained by David Terei (<code@davidterei.com>).\n\nContributions
  have been made by the following great people:\n\n* Alfredo Di Napoli (<alfredo.dinapoli@gmail.com>)\n*
  Amit Levy\n\n"
license-name: BSD-3-Clause
