homepage: https://github.com/linearray/mealstrom
changelog-type: ''
hash: 8392b0748d77c64f41ba7d64c76df508d5db9eea866c2f81bd58f8512b5cfcd5
test-bench-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  stm: ! '>=2.4.4.1 && <2.6'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.6 && <2.0'
  text: ! '>=1.2.2.1 && <1.3'
  uuid: ! '>=1.3.12 && <1.4'
  list-t: ! '>=1 && <2'
  resource-pool: ! '>=0.2.3.2 && <0.3'
  async: ! '>=2.1.0 && <2.3'
  mealstrom: -any
  postgresql-simple: ! '>=0.5.1.2 && <0.7'
  hashable: ! '>=1.2.4 && <1.3'
  tasty-hunit: ! '>=0.10.0.1 && <1.0'
  tasty: ! '>=0.11.0.2 && <1.2'
  stm-containers: ! '>=0.2.15 && <1'
  aeson: ! '>=1.1 && <1.5'
maintainer: max@lambdalifting.org
synopsis: Manipulate FSMs and store them in PostgreSQL.
changelog: ''
basic-deps:
  bytestring: ! '>=0.10.8.1 && <0.11'
  stm: ! '>=2.4.4.1 && <2.6'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.6 && <2.0'
  text: ! '>=1.2.2.1 && <1.3'
  uuid: ! '>=1.3.12 && <1.4'
  list-t: ! '>=1 && <2'
  resource-pool: ! '>=0.2.3.2 && <0.3'
  async: ! '>=2.1.0 && <2.3'
  containers: ! '>=0.5.8.1 && <0.7'
  postgresql-simple: ! '>=0.5.1.2 && <0.7'
  hashable: ! '>=1.2.4 && <1.3'
  stm-containers: ! '>=0.2.15 && <1'
  aeson: ! '>=1.1 && <1.5'
all-versions:
- '0.0.0.1'
- '0.0.1.0'
author: Max Amanshauser
latest: '0.0.1.0'
description-type: markdown
description: ! "Mealstrom [![Hackage version](https://img.shields.io/hackage/v/mealstrom.svg?colorB=4FB900)](https://hackage.haskell.org/package/mealstrom)\n=========\n\nMealstrom
  is a way of modeling, storing and running (business) processes using PostgreSQL.
  It is based on an idea that [Jakob Sievers](http://canned.primat.es/) had when we
  both worked at a payment service provider.\n\nIt is a remedy for a number of drawbacks
  of using relational database systems for the same task directly, while still building
  on some of their strengths.\n\nYou often want to store not just the current state
  of a process instantiation, but keep a log of all steps taken so far. Obviously
  you cannot simply update the previous state in a relational database.\n\n* Therefore
  in a RDBMS you must store *events* in their own right, and have a way to compute
  the object's current state. You need to implement checks for what constitutes *valid
  state transitions* manually, again and again for each entity.\n\n* While RDBMS are
  very powerful, it often feels like you are doing all the work twice, e.g. you write
  constraints, foreign key checks, triggers etc. and then do all the input validity
  checking in the client as well, because you do not want to incur the overhead of
  constantly sending all input to the DB and because relying on parsing the thrown
  exceptions is often not even possible.\n\n* If you want to make sure that updates
  are actually applied, keep in mind that database transactions guarantee all-or-nothing
  handling of your updates, but you do not necessarily know which one of the two happened!
  Your database connection can drop between when a transaction completes and when
  control returns to your session. Hence, you need to make all your updates idempotent,
  and where they are not naturally, you need to add client-generated IDs to your queries
  (and perhaps use some of the RDBMS' power like triggers). That assumes you actually
  read the part on transaction isolation in your database manual, because the details
  are surprisingly tricky and the tiniest mistake can lead to data loss.\n\nIn short:
  If you are not very careful, modeling state transitions in your processes becomes
  a tangled mess of SQL queries and code, with duplicated functionality and the potential
  of race conditions and low assurances of correctness.\n\n## Enter Mealstrom\n\nWith
  Mealstrom you model your process as a finite-state automaton, a Mealy machine to
  be precise. A Mealy machine, in contrast to a Moore machine, is an FSA that attaches
  effects to transitions instead of states.\n\nModeling a process as an FSA is the
  natural way to do it. FSAs have defined states, defined transitions and rules which
  transitions are permissable in a given state.\n\nYou can then create instances of
  the machine definition and manipulate them using API functions.\n\nA Mealy machine
  in Mealstrom has the types **State**, **Event** and **Action**, an instance furthermore
  has a type **Key**. Mealstrom comes with support for `Text` and `UUID` as the Key
  type. You can have your own Key type, if you make it an instance of `(FSMKey k)`
  and implement `toText :: k -> Text` and `fromText :: Text -> k`. If you have no
  preference, it is recommended to use `UUID`.\n\nTo persist the machines to PostgreSQL,
  you need to have Aeson `ToJSON`, `FromJSON` and `Typeable` instances for your four
  types. Typically, they can be derived generically.\n\nOnce you have your four types,
  you make an instance of `MealyInstance`.\n\nLet's go through an example - A simple
  system a surgery ward might use to track patients.\n\n```\n-- First the language
  extension and import dance:\n\n{-# LANGUAGE TypeSynonymInstances #-}\n{-# LANGUAGE
  MultiParamTypeClasses #-}\n{-# LANGUAGE DeriveAnyClass, DeriveGeneric #-}\n{-# LANGUAGE
  OverloadedStrings #-}\n{-# LANGUAGE MultiWayIf #-}\n\nimport Data.Aeson\nimport
  Data.Text (Text)\nimport Data.Typeable\nimport GHC.Generics\n\nimport Mealstrom\nimport
  Mealstrom.PostgresJSONStore as PGJSON\n\ntype SSN              = Text\ndata Limb
  \            = Arm | Hand | Leg deriving (Show,Eq,Generic,ToJSON,FromJSON,Typeable)\ndata
  PatientStatus    = PatientAdmitted Integer [LimbSurgery]\n                      |
  PatientReleased\n                      | PatientDeceased\n                  deriving
  (Show,Eq,Generic,ToJSON,FromJSON,Typeable)\ndata LimbSurgery      = Removed Limb
  | Attached Limb deriving (Show,Eq,Generic,ToJSON,FromJSON,Typeable)\ndata Event
  \           = Operation LimbSurgery | Release | Deceased deriving (Show,Eq,Generic,ToJSON,FromJSON,Typeable)\ndata
  Action           = SendBill Integer | SendCondolences deriving (Show,Eq,Generic,ToJSON,FromJSON,Typeable)\n\ninstance
  MealyInstance SSN PatientStatus Event Action\n\n```\n\nThere is also a transition
  function `transition :: (State,Event) -> (State,[Action])`,\n\nas well as an effects
  function `effects :: Msg Action -> IO Bool`.\n\nYou implement `transition` to indicate
  which transitions are valid and which effects you want to run when a transition
  occurs.\n\nAn `Action` (wrapped in a Msg) is then used to pattern match in `effects`
  and execute the appropriate code.\n\nNB *Action* is the type you use to represent
  the *effects* you want to run.\n\nBecause the states, events, actions as well as
  the transition/effects functions are just Haskell data types and code, you can go
  crazy, but for now let's expand on the simple example above:\n\n```\n-- |Calculates
  current number of specified limb on patient\n-- Boldly assumes every patient comes
  in with full set of limbs\nlimbsOnPatient :: [LimbSurgery] -> Limb -> Int\nlimbsOnPatient
  ops limb =\n    foldr (\\op acc -> if\n            | op == Removed limb  -> acc-1\n
  \           | op == Attached limb -> acc+1\n            | otherwise           ->
  acc) 2 ops\n\ncost :: LimbSurgery -> Integer\ncost (Removed Arm)   =  5000\ncost
  (Attached Arm)  = 15000\ncost (Removed Hand)  =  2000\ncost (Attached Hand) =  8000\ncost
  (Removed Leg)   = 12000\ncost (Attached Leg)  = 20000\n\ntr (PatientAdmitted bill
  ls, Operation (Removed l))\n    | limbsOnPatient ls l < 1 = error \"Cannot remove
  limb that's not there anymore!\"\n    | otherwise               = let newbill =
  bill + cost (Removed l) in\n        (PatientAdmitted newbill $ Removed l : ls, [SendCondolences])\n\ntr
  (PatientAdmitted bill ls, Operation (Attached l))\n    | limbsOnPatient ls l > 1
  = error \"Cannot attach limb, there is no space!\"\n    | otherwise               =
  let newbill = bill + cost (Attached l) in\n        (PatientAdmitted newbill $ Attached
  l : ls, [])\n\ntr (PatientAdmitted bill _ls, Release)  = (PatientReleased, [SendBill
  bill])\ntr (PatientAdmitted bill _ls, Deceased) = (PatientDeceased, [SendCondolences,
  SendBill bill])\n\ntr (PatientReleased, _) = error \"Patient escaped, operation
  invalid.\"\ntr (PatientDeceased, _) = error \"Operations on dead patients are not
  billable\"\n\neff :: Msg Action -> IO Bool\neff (Msg msgId SendCondolences) = putStrLn
  \"not implemented\" >> return True\neff (Msg msgId (SendBill bill)) = charge bill
  :: IO Bool\n```\n\n\nFrom wherever you wish to manipulate a Patient instance, you
  can then use a simple REST-like interface:\n\n```\nmain = do\n    st <- PGJSON.mkStore
  \"host='localhost' port=5432 dbname='butchershop'\" \"Patient\"\n\n    -- You specify
  transition and effects when creating the Handle for a machine\n    -- This is so
  that you can pass variables to the functions, if you want to.\n    let t          =
  FSMTable tr eff\n    let patientFSM = FSMHandle st st t 90 3 :: FSMHandle PostgresJSONStore
  PostgresJSONStore SSN PatientStatus Event Action\n\n    -- `post` gives you the
  flexibility of having different start states.\n    post patientFSM \"123-12-1235\"
  (PatientAdmitted 0 [])\n    res <- mkMsgs [Operation (Removed Arm)] >>= patch patientFSM
  \"123-12-1235\"\n\n    get patientFSM \"123-12-1235\"  -- Just (PatientAdmitted
  5000 [Removed Arm])\n```\n\n\n### Reliability\nYou may have noticed up there, that
  \"patches\" are wrapped in Msgs. They are used to give certain reliability guarantees
  in Mealstrom.\n\nThe `FSMAPI` through which you should interact with instances guarantees
  idempotance. `get` is trivially idempotent, `post` will let you know if the instance
  already exists and it is safe to retry. Finally, for `patch` you generate a `Msg`
  using `mkMsg` or `mkMsgs` that wraps an `Event` you want to send to an instance.\n\nOnce
  `patch` returns `True`, you can be assured that the state transition has occurred
  and the associated Actions are now running asynchronously. You can safely retry
  `patch`, because when a `msgId` is already known, the message is discarded.\n\nYou
  can run arbitrary effects, they will be retried until a retry limit you set is hit
  or until they succeed. This means they may happen [more than once] (https://en.wikipedia.org/wiki/Two_Generals'_Problem)
  or not at all. Failed effects can be retried at any time by calling `recoverAll`.\n\nIf,
  however, you choose to send a Msg to another _MealyInstance_ as an effect, i.e.
  call `patch` on it in the `effects` function, you can reuse the `msgId` from the
  first `Msg`. The receiving FSM instance can then even do the same thing, and so
  on. This way you can form a chain of idempotent updates that will, assuming failures
  are intermittent, eventually succeed.\n\n### Log\nThe `FSMAPI` attempts to provide
  an exception-safe way to work with FSM instances in production. If you want to examine
  an instance's log or alter the past, you can use the functions from the respective
  stores directly, but have to take care of exceptions yourself.\n\n### \"Schema\"
  updates\nIf at any time you decide to extend one of the types that constitute a
  `MealyMachine`, you must also update the JSON serialiser/deserialiser and make sure
  the deserialiser also works when the new fields are not present. Sometimes this
  is trivial, e.g. when adding another data constructor to a sum type. Sometimes the
  change is incompatible and you need to provide a default value or even a conversion
  (be careful not to shoot yourself in the foot by introducing ambiguity whether something
  is a \"new\" or an \"old\" instance).\n\nWhenever you deserialise an \"old\" instance,
  it will be converted to a \"new\" instance and when you update it, it will be written
  back in the new format.\n\nIf you prefer, you can perform a batch update by using
  _batchConvert in PostgresJSONStore (this may take a long time if you have a lot
  of data).\n\nLastly, Mealstrom is not a good fit if:\n\n* You require every last
  bit of performance.\n* You do not care particularly whether updates are occasionally
  lost.\n* You require complex, cross-entity queries and/or already have a large amount
  of query language code, so that the drawbacks cited above do not seem too bad in
  comparison.\n\n\n## Tests\n\nTo run the tests you need to run `createdb fsmtest`
  first.\n"
license-name: MIT
