homepage: https://github.com/quixoftic/mellon#readme
changelog-type: markdown
hash: 4a9fd00647ff59367fb33612538c4b3d3df5122524a4f1edee922f430cb23241
test-bench-deps:
  warp: -any
  http-client: -any
  lucid: -any
  servant-docs: -any
  bytestring: -any
  servant-swagger-ui: -any
  wai: -any
  base: -any
  time: -any
  aeson-pretty: -any
  servant-client: -any
  hspec: ! '>=2.2 && <2.5'
  text: -any
  network: ==2.6.*
  doctest: ! '>=0.11 && <0.14'
  protolude: -any
  servant-swagger: -any
  servant-server: -any
  servant: -any
  mellon-web: -any
  lens: -any
  quickcheck-instances: ==0.3.*
  mellon-core: -any
  hspec-wai: ! '>=0.6.6 && <0.10'
  swagger2: -any
  wai-extra: ==3.0.*
  transformers: -any
  servant-lucid: -any
  QuickCheck: ! '>=2.8 && <2.12'
  http-types: -any
  aeson: -any
maintainer: Drew Hess <dhess-src@quixoftic.com>
synopsis: A REST web service for Mellon controllers
changelog: ! "## 0.8.0.6 (2018-02-04)\n\nFixes:\n\n  - Don't run time-sensitive tests
  by default (fixes spurious failures\n    on loaded CI servers).\n\n  - Work around
  order-sensitive `toJSON` decoding in doctests.\n\n## 0.8.0.5 (2018-02-04)\n\nChanges:\n\n
  \ - This package now uses Protolude.\n\n  - Disable hlint tests by default.\n\n
  \ - Add a `stack-lts-9.yaml` file for LTS 9 Stack builds.\n\n  - Pare down support
  to just GHC 8.0.2 and GHC 8.2.2.\n\nFixes:\n\n  - Fix the `swagger.json` test on
  Stack.\n\n  - Add PVP bounds for `mtl`, `http-client-tls`, `network`\n    dependencies.\n\n
  \ - Remove references in the documentation to the no-longer-present\n    `API.md`
  file. The `SwaggerAPI` server includes a self-documenting\n    Swagger spec; please
  see that for detailed REST API documentation.\n\n## 0.8.0.4 (2018-01-26)\n\n- Require
  hlint 2.0.x.\n\n- Fix new hlint issues.\n\n- Bump QuickCheck bounds.\n\n- New and
  improved Nix packaging.\n\n## 0.8.0.3 (2018-01-11)\n\n- Use hpack.\n\n- Support
  for GHC 8.2.2.\n\n- Bump swagger2, optparse-applicative, doctest, QuickCheck, hspec-wai\n
  \ upper bounds.\n\n- Try to make the Mellon/Web/ClientSpec.hs test a little less\n
  \ time-sensitive.\n\n- Maintainer-related changes (better Nix support, Makefile,
  etc.).\n\n## 0.8.0.2 (2017-09-04)\n\n- Fix .cabal file for now-removed Paw file.\n\n##
  0.8.0.1 (2017-09-04)\n\n- Hackage compliance fix.\n\n## 0.8.0.0 (2017-09-04)\n\n-
  Remove out-of-date Paw file.\n\n- Port to Servant 0.11. Due to Servant 0.11 API
  changes, our API\n  has changed, as well (just the Haskell bits; the web API remains\n
  \ the same).\n\n## 0.7.1.1 (2017-05-24)\n\nNo changes; copyright has been assigned
  to Quixoftic, LLC.\n\n## 0.7.1.0 (2017-04-28)\n\n- Now requires servant-client >=
  0.9.\n\n- Bump various dependency upper bounds.\n\n## 0.7.0.3 (2016-09-23)\n\n-
  Bump servant upper bounds.\n\n## 0.7.0.2 (2016-09-23)\n\n- Add an \"--active-low\"
  flag to `gpio-mellon-server` example.\n\n## 0.7.0.1 (2016-06-13)\n\n- Packaging
  fixes only.\n\n## 0.7.0.0 (2016-06-02)\n\n- Port to new `mellon-core` package.\n-
  Fix Servant bitrot.\n"
basic-deps:
  warp: ==3.2.*
  http-client: ! '>=0.4 && <0.6'
  exceptions: ! '>=0.8.0 && <1'
  lucid: ==2.9.*
  servant-docs: ! '>=0.10 && <0.12'
  bytestring: ==0.10.*
  servant-swagger-ui: ==0.2.*
  wai: ==3.2.*
  base: ! '>=4.8 && <5'
  time: ! '>=1.5 && <2'
  mellon-gpio: -any
  aeson-pretty: ==0.8.*
  servant-client: ==0.11.*
  text: ==1.2.*
  network: -any
  protolude: ==0.2.*
  servant-swagger: ==1.1.*
  servant-server: ==0.11.*
  servant: ==0.11.*
  mellon-web: -any
  lens: ! '>=4 && <5'
  mellon-core: -any
  http-client-tls: ==0.3.*
  mtl: ! '>=2.1.3 && <2.3'
  swagger2: ! '>=2.1 && <2.3'
  transformers: ! '>=0.4.2 && <0.6'
  optparse-applicative: ! '>=0.11.0 && <0.15'
  servant-lucid: ==0.7.*
  http-types: ==0.9.*
  aeson: ! '>=0.11 && <1.3'
  hpio: ! '>=0.8 && <1'
all-versions:
- '0.7.0.1'
- '0.7.0.3'
- '0.7.1.0'
- '0.7.1.1'
- '0.8.0.2'
- '0.8.0.3'
- '0.8.0.4'
- '0.8.0.5'
- '0.8.0.6'
author: Drew Hess <dhess-src@quixoftic.com>
latest: '0.8.0.6'
description-type: markdown
description: ! "# mellon-web\n\nThe `mellon-web` package wraps a `mellon-core` controller
  in a REST\nweb service, making it possible to control physical access devices\nfrom
  an HTTP client. The package includes both a WAI application\nserver, and native
  Haskell client bindings for the service.\n\nLike the `mellon-core` controller interface,
  the `mellon-web` REST API\nis quite simple. There are only 3 methods:\n\n* `GET
  /time` returns the system time on the server. This is made\n  available for diagnostic
  purposes, primarily to ensure the server\n  has an accurate clock.\n\n* `GET /state`
  returns the controller's current state (either `Locked`\n  or `Unlocked date` where
  `date` is the UTC time at which the\n  controller will automatically lock again).\n\n*
  `PUT /state` sets the controller's current state. Use this method to\n  lock and
  unlock the controller.\n\nFor detailed documentation, the server includes a self-documenting\nSwagger
  spec.\n\nNote that the `mellon-web` server does not provide an authentication\nmechanism!
  You should proxy it behind a secure, authenticating HTTPS\nserver such as Nginx.\n\n##
  Example servers\n\n### \"Mock\" server\n\nAn extremely simple example server (with
  on-line documentation\nsupport) is provided in the `examples` directory. You can
  run it with\n`cabal run mock-mellon-server`. The server is will run on the\n`localhost`
  loopback interface on port 8081.\n\nThis particular example server uses a \"mock
  lock\" device which only\ninternally logs lock and unlock events without depending
  on any actual\nhardware, so it will run anywhere.\n\n### GPIO server\n\nAnother
  included example server uses the `mellon-gpio` package to\ndrive a simple physical
  access device via a GPIO pin. This server must\nbe run on a Linux host with GPIO
  hardware, e.g., a Raspberry Pi\nrunning Linux.\n\nThis server takes a GPIO pin number
  and a local port number, then\nstarts a `mellon-web` server on all local interfaces
  on the specified\nport. When the server receives an unlock request, it will drive
  a high\nsignal on the specified GPIO pin. When the unlock expires, or when the\nserver
  receives a lock request, it will drive a low signal on the\nspecified GPIO pin.\n\nTo
  use this server, simply connect a properly-designed physical access\ndevice (e.g.,
  an electric strike driven by a relay circuit such as the\none shown\n[here](http://www.petervis.com/Raspberry_PI/Driving_Relays_with_CMOS_and_TTL_Outputs/Driving_Relays_with_CMOS_and_TTL_Outputs.html))\nto
  an available GPIO pin on the host device, then run the server with\nthe specified
  GPIO pin number and port. For example, to run the server\non port 7533 using GPIO
  pin 65:\n\n```\ncabal run gpio-mellon-server -- sysfs --port 7533 65\n```\n\nThe
  `sysfs` command tells the server to use the Linux `sysfs` GPIO\ninterpreter. (Currently,
  this is the only supported GPIO platform.)\n\n**NOTE**: the REST service provided
  by `gpio-mellon-server` offers no\nsecurity/authentication for your access control
  device! You should\nalways run it (or any `mellon-web` server) behind a secure proxy
  web\nservice or equivalent HTTP(S)-based authentication mechanism.\n\n[![Travis
  CI build status](https://travis-ci.org/quixoftic/mellon.svg?branch=master)](https://travis-ci.org/quixoftic/mellon)\n"
license-name: BSD3
