homepage: http://github.com/rodrigosetti/messagepack-rpc
changelog-type: text
hash: 5dc56de9964a8b6b8c032c2f096ef5c058cfff6ffe9879f860ba72dd95b2e616
test-bench-deps: {}
maintainer: rodrigosetti@gmail.com
synopsis: Message Pack RPC over TCP
changelog: ! "2015-11-03 Rodrigo Setti <rodrigosetti@gmail.com>\n\n\t* Update version
  to match \"messagepack\" - from now on they will remain\n\ttied\n\n2015-06-26 Rodrigo
  Setti <rodrigosetti@gmail.com>\n\n\t* Fix to work with latest \"messagepack\", remove
  dependency on \"text\".\n\n2014-11-17 Rodrigo Setti <rodrigosetti@gmail.com>\n\n\t*
  Ops: this dependency specification doesn't work\n\n2014-11-17 Rodrigo Setti <rodrigosetti@gmail.com>\n\n\t*
  Fix the broken API due to the fact that messagepack is now using Int64\n\n2014-07-30
  Rodrigo Setti <rodrigosetti@gmail.com>\n\n\t* Parse request on demand (instead of
  waiting for the entire data)\n\n2014-07-25 Rodrigo Setti <rodrigosetti@gmail.com>\n\n\t*
  Initial version.\n\n"
basic-deps:
  cereal: ==0.5.*
  bytestring: ==0.10.*
  base: ==4.*
  network-simple: ==0.4.*
  containers: ==0.5.*
  messagepack: ==0.5.*
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.5.1
author: Rodrigo Setti
latest: 0.5.1
description-type: markdown
description: ! "# messagepack-rpc\n\n[![Build Status](https://travis-ci.org/rodrigosetti/messagepack-rpc.svg?branch=master)](https://travis-ci.org/rodrigosetti/messagepack-rpc)\n\n[Message
  Pack](http://msgpack.org) RPC over TCP.\n\nRight now this implementation only supports
  TCP, but the plan is to support multiple transports ( UDP, UNIX domain sockets,
  _etc._)\n\n## MessagePack-RPC Protocol specification\n\nReference: http://wiki.msgpack.org/display/MSGPACK/RPC+specification\n\nThe
  protocol consists of \"Request\" message and the corresponding \"Response\" message.
  The server must send \"Response\" message in reply with the \"Request\" message.\n\n###
  Request Message\n\nThe request message is a four elements array shown below, packed
  by MessagePack format.\n\n    [type, msgid, method, params]\n\n#### type\n\nMust
  be zero (integer). Zero means that this message is the \"Request\" message.\n\n####
  msgid\n\nThe 32-bit unsigned integer number. This number is used as a sequence number.
  The server replies with a requested msgid.\n\n#### method\n\nThe string, which represents
  the method name.\n\n#### params\n\nThe array of the function arguments. The elements
  of this array is arbitrary object.\n\n### Response Message\n\nThe response message
  is a four elements array shown below, packed by MessagePack format.\n\n    [type,
  msgid, error, result]\n\n#### type\n\nMust be one (integer). One means that this
  message is the \"Response\" message.\n\n#### msgid\n\nThe 32-bit unsigned integer
  number. This corresponds to the request message.\n\n#### error\n\nIf the method
  is executed correctly, this field is Nil. If the error occurred at the server-side,
  then this field is an arbitrary object which represents the error.\n\n#### result\n\nAn
  arbitrary object, which represents the returned result of the function. If error
  occurred, this field should be nil.\n\n### Notification Message (not yet supported)\n\nThe
  notification message is a three elements array shown below, packed by MessagePack
  format.\n\n    [type, method, params]\n    \n#### type\n\nMust be two (integer).
  Two means that this message is the \"Notification\" message.\n\n#### method\n\nThe
  string, which represents the method name.\n\n#### params\n\nThe array of the function
  arguments. The elements of this array is arbitrary object.\n\n### The Order of the
  Response\n\nThe server implementations don't need to send the reply, in the order
  of the received requests. If they receive the multiple messages, they can reply
  in random order.\n\nThis is required for the pipelining. At the server side, some
  functions are fast, and some are not. If the server must reply with in order, the
  slow functions delay the other replies even if it's execution is already completed.\n"
license-name: MIT
