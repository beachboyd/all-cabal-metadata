homepage: https://github.com/lspitzner/memorypool
changelog-type: markdown
hash: e017a8472cf620e7c05b1b46c1bc024af15608762ad7460c8bb35189d4fa65cb
test-bench-deps: {}
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: basic memory pool outside of haskell heap/GC
changelog: ! '# Revision history for memorypool


  ## 0.1.0.0  -- 2016-08-16


  * First version.

'
basic-deps:
  unsafe: ! '>=0.0 && <0.1'
  base: ! '>=4.7 && <4.11'
  containers: ! '>=0.5.6.2 && <0.6'
  transformers: ! '>=0.4.2.0 && <0.6'
  vector: ! '>=0.11.0.0 && <0.13'
all-versions:
- 0.1.0.0
author: Lennart Spitzner
latest: 0.1.0.0
description-type: markdown
description: ! '# memorypool


  A very basic memory pool imlemented in haskell.


  The core idea is that the pool allocates large chunks of memory that are

  some power-of-two factor (e.g. 256) of some base size (e.g. 10k).

  The user of the pool allocates chunks of a power-of-two factor of the base

  size (i.e. 10k, 20k, 40k, ..). This scheme avoids fragmentation due to

  weirdly-sized holes, but keep in mind that no compaction takes place, so

  this kind of fragmentation must be worked around manually if necessary.


  The pool internally allocates memory on the C heap, i.e. outside of any

  haskell/GC heap.


  Uses a buddy allocation strategy internally.

'
license-name: BSD-3-Clause
