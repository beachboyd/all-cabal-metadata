homepage: ''
changelog-type: markdown
hash: 080e54f0186ecbb5d03500378352047affe6bb758568532095ea2e09bee60d7b
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  split: -any
  base: -any
  memcache-haskell: -any
  test-framework-quickcheck2: -any
  network: ! '>=2.3.2'
  HUnit: -any
  test-framework-th: -any
  QuickCheck: -any
maintainer: Kiyoshi Ikehara
synopsis: Memcache procotol library
changelog: ! '## 0.0.10.1


  * Add exptime-support to Network.Memcache.Client

'
basic-deps:
  bytestring: ! '>=0.9'
  split: -any
  stm: ! '>=2.4'
  base: ==4.*
  memcache-haskell: -any
  network: ! '>=2.3.2'
  conduit-extra: -any
  containers: -any
  hashtables: -any
  mtl: -any
  hashable: -any
  attoparsec: -any
  transformers: -any
  resourcet: -any
all-versions:
- 0.0.10
- 0.0.10.1
author: Kiyoshi Ikehara
latest: 0.0.10.1
description-type: markdown
description: ! "memcache-haskell\n================\n\nThis package is a memcache protocol
  library for server and client applications.\n\nMain purpose of this library is making
  a server itself.\n\nThis does not support consistent hashing  and any other functions
  like [\"libmemcached\"](http://libmemcached.org/libMemcached.html).\n\n## Getting
  started\n\nInstall from Hackage.\n\n    cabal update && cabal install memcache-haskell\n\n##
  Usage\n\n1. Call `openClient` with `ip-address:port` of memcache-server to obtain
  a handle.\n2. To set or get a data on the memcache server, call `set` or `get` with
  the handle.\n3. Finally call `closeClient` after you are done.\n\nExample:\n\n```\nmain
  :: IO ()\nmain = do\n  client <- openClient \"127.0.0.0:11211\"\n  ret <- set client
  \"key\" \"foo\"\n  print ret\n  ret' <- get client \"key\" :: IO (Maybe String)\n
  \ print ret'\n  closeClient client\n```\n\n## Contributors\n\n* Kiyoshi Ikehara\n*
  Yuji Kamiya\n* Junji Hashimoto\n\n## License\n\nSee [LICENSE](LICENSE).\n\nCopyright
  Â© Gree, Inc. All Rights Reserved.\n"
license-name: MIT
