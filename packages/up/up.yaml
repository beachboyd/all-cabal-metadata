homepage: https://github.com/thomaseding/up
changelog-type: ''
hash: 26fc71fdb508489b3976eba207562f45a24c641c091817216c32c2db7d138055
test-bench-deps: {}
maintainer: Thomas Eding
synopsis: Command-line tool to generate paths for moving upward in a file system
changelog: ''
basic-deps:
  split: ^>=0.2.3.3
  base: ^>=4.13.0.0
  filepath: ^>=1.4.2.1
  lambda-options: ^>=1.1.0.1
  mtl: ^>=2.2.2
  directory: ^>=1.3.3.0
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 1.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.0.5
- 1.0.0.6
- 2.0.0.0
author: Thomas Eding
latest: 2.0.0.0
description-type: markdown
description: |+
  Homepage: [https://github.com/thomaseding/up](https://github.com/thomaseding/up)

  Hackage: [https://hackage.haskell.org/package/up](https://hackage.haskell.org/package/up)



  ------


  Install from git repository:
  ```
  $ cabal configure
  $ cabal build
  $ cabal install
  ```

  Install from Hackage.
  ```
  $ cabal update
  $ cabal install up
  ```

  These will install the `up` command.

  --------

  Example usage:
  ```
  $ cd /home/thomas/code/up/src
  $ up thomas
  ../../..
  $ up --absolute thomas
  /home/thomas
  $ up ....
  ../../..
  $ up --relative --from-to /abc/def/xyz/ abc
  ../../..
  ```

  See `up --help` for more info.

  ------------

  `up` generates file path strings, but it (by itself) does not change your current working directory. So below is code you can add to your shell's config file (e.g. `.bashrc`) to use the `up` program to change your directory.


  ```bash
  g () {
      local DEST
      DEST=$(up "$@")
      if [ "$?" == '0' ]
      then
          cd "$DEST"
      else
          return "$?"
      fi
  }
  ```

  Example usage:
  ```
  $ cd /home/thomas/code/up/src
  $ g thomas
  $ pwd
  /home/thomas
  ```


  For shell autocomplete for the above `g` command, you can add this to your shell's config in addition:
  ```bash
  _g () {
      if [ "$COMP_CWORD" == "1" ]
      then
          local cur=${COMP_WORDS[COMP_CWORD]}
          local parts="$(pwd | tr '/' ' ')"
          COMPREPLY=( $(compgen -W "$parts" -- $cur) )
      fi
  }
  complete -F _g g
  ```


license-name: BSD-3-Clause
