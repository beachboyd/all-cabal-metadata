homepage: http://github.com/aavogt/HListPP
changelog-type: text
hash: a5899ed41005a485069779c7b05a8d415750ebc31d017df608072972835911ab
test-bench-deps: {}
maintainer: Adam Vogt <vogt.adam@gmail.com>
synopsis: A preprocessor for HList labelable labels
changelog: |
  Apr 17 2020
  Release 0.2.2
  Remove applicative-quoters dependency in favor of -XApplicativeDo, which
  restricts use to GHC>=8.0.1

  Move to http://github.com/aavogt/HListPP

  Nov 6 2015
  Release 0.2.1

  Change base dependency bounds

  May 28 2014
  Release 0.2
  Report filename given an error.
  Avoid parsing within comments.

  May 20 2014
  Initial release 0.1
basic-deps:
  base: '>=4.9 && <5'
  regex-applicative: '>=0.3 && <0.4'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
author: Adam Vogt <vogt.adam@gmail.com>
latest: 0.2.2
description-type: haddock
description: |-
  A preprocessor that replaces @`longDescriptiveName@ with

  > hLens' (Label :: Label "longDescriptiveName")

  Use with ghc flags @-F -pgmF HListPP@. A file using HListPP
  could start with something like

  > ❴-# OPTIONS_GHC -F -pgmF HListPP #-❵ -- change braces to ascii (haddock doesn't allow literal comments in files)
  > ❴-# LANGUAGE DataKinds #-❵
  > import Data.HList.CommonMain
  > import Control.Lens

  Then the labels can then be used in expressions with types
  like:

  > `x :: Lens (Record S) (Record T) a b
  > `x :: Prism (Variant S) (Variant T) a b
  > `a .==. "x" .*.
  >    `b .==. "y" .*. emptyRecord :: Record [ Tagged "a" String, Tagged "b" String ]

  where @S@ is a type-level list containing a @Tagged "x" a@
  and @T@ is a type-level list containing a @Tagged "x" b@.

  Note that @`labels@ is expanded to something that
  takes up about 26 more columns. To avoid issues with
  layout, put a newline after keywords that introduce
  layout, at least if there are @`labels@ in the same row.
  In other words:

  > `character.`position.`x %= \ x -> let
  >      msg = "a really long message about x>0"
  >      pos = x - 5
  >    in if pos < 0
  >          then error msg
  >          else pos

  Instead of

  > `character.`position.`x %= \ x -> let msg = "a really long message about x>0"
  >                                       pos = x - 5
  >                            in if pos < 0
  >                                then error msg
  >                                else pos
license-name: BSD-3-Clause
