homepage: https://github.com/EarnestResearch/hlivy
changelog-type: markdown
hash: 90ee661a3309c12c45f52c13aeb4daeb21bfc55129a883fbfcb868d8e0f7aef5
test-bench-deps: {}
maintainer: Daniel Donohue <ddonohue@earnestresearch.com>
synopsis: Client library for the Apache Livy REST API
changelog: |
  # Change Log

  ## [1.0.1](https://github.com/EarnestResearch/hlivy/tree/1.0.1)
  Released: **8 February 2019** Compare: [1.0.0](https://github.com/EarnestResearch/hlivy/compare/1.0.0..1.0.1)

  ### Fixed

  - Build against older GHC versions/snapshots. [\#4](https://github.com/EarnestResearch/hlivy/issues/4)

  ## [1.0.0](https://github.com/EarnestResearch/hlivy/tree/1.0.0)
  Released: **4 February 2019**
basic-deps:
  http-client: ! '>=0.4 && <0.6'
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.7 && <5'
  unordered-containers: ! '>=0.2.7 && <0.3'
  text: ! '>=1.1 && <1.3'
  lens: ! '>=4.4 && <5.0'
  mtl: ! '>=2.2.1 && <2.3'
  transformers: ! '>=0.5.2 && <0.6'
  resourcet: ! '>=1.1 && <1.3'
  http-types: ! '>=0.9.1 && <0.13'
  aeson: ! '>=1.1.2 && <1.5'
all-versions:
- 1.0.0
- 1.0.1
author: Daniel Donohue <ddonohue@earnestresearch.com>
latest: 1.0.1
description-type: markdown
description: |
  # hlivy

  [![Build Status](https://travis-ci.com/EarnestResearch/hlivy.svg?branch=master)](https://travis-ci.org/EarnestResearch/hlivy)
  [![Hackage Version](https://img.shields.io/hackage/v/hlivy.svg)](https://hackage.haskell.org/package/hlivy)

  ## Description
  `hlivy` is a Haskell library that provides bindings to the [Apache Livy](https://livy.incubator.apache.org/) REST API, which enables one to easily launch Spark applications -- either in an interactive or batch fashion -- via HTTP requests to the Livy server running on the master node of a Spark cluster.

  ## Usage
  Start with

  ``` haskell
  import Network.Livy
  ```

  which brings all functionality into scope.  In particular, this exposes a monad `Livy` that has all the capabilites required to run Livy actions with `runLivy`.  Generally, the format of a Livy action follows the pattern

  ``` haskell
  send $ basicRequestObject requiredArg1 requiredArg2
       & requestLens1 ?~ optionalArg1
       & requestLens2 ?~ optionalArg2
  ```

  This action is ran simply:

  ``` haskell
  let req = basicRequestObject requiredArg1 requiredArg2
          & requestLens1 ?~ optionalArg1
          & requestLens2 ?~ optionalArg2
  resp <- runLivy env $ send req
  ```

  where `env` is a suitable environment. Concretely, if one wanted to create an interactive session, one would do something like this:

  ``` haskell
  λ => import Network.Livy
  λ => -- Create a default environment
  λ => env <- newEnv "localhost" 8998
  λ => resp <- runLivy env $ send createSession
  ```

  The response body, in this case a `CreateSessionResponse`, should contain the the `Session` just created.

  With this `Session` at hand, one can run "statements" -- snippets of Spark Scala, PySpark, SparkR, or SparkSQL -- in the given session.

  ``` haskell
  λ => req = runStatement (SessionId 0) "val x = 1 + 1; println(x)" SparkSession
  λ => resp <- runLivy env $ send req
  ```

  This response object, in this case a `RunStatementResponse`, contains the information needed to check on the status of the statement or retrieve results if available.

  Batch actions are organized in the `Network.Livy.Client.Batch` module, and are used similarly:

  ``` haskell
  λ => import Control.Lens
  λ => -- Application JAR in HDFS
  λ => req = createBatch "/user/hadoop/my-app.jar"
  λ => resp <- runLivy env (send req & cbClassName ?~ "com.company.my_app" ?~ cbExecutorCores ?~ 4)
  ```
  See [examples](https://github.com/EarnestResearch/hlivy/tree/1.0.0/examples/) for more example use.
license-name: MIT
