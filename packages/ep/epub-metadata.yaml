homepage: http://hub.darcs.net/dino/epub-metadata
changelog-type: markdown
hash: 5ab74cf7a65672eb3294a0e588ea1511d3709ed418bfaee2667a6bcf37edc27a
test-bench-deps:
  zip-archive: -any
  bytestring: -any
  base: ! '>=3 && <5'
  filepath: -any
  regex-compat-tdfa: -any
  HUnit: -any
  hxt: ! '>=9'
  utf8-string: -any
  mtl: -any
  directory: -any
maintainer: Dino Morelli <dino@ui3.info>
synopsis: Library for parsing epub document metadata
changelog: ! "4.5 (2016-10-19)\n\n   * Fix merged for UTF8 issue\n\n\n4.4 (2016-10-11)\n\n
  \  * Removed defunct cabal stability field\n   * Moved copyright dates up to 2016\n
  \  * Moved tested-with up to GHC 8.0.1\n   * Removed GHC switch simpl-tick-factor\n
  \  * Moved cabal-version up to >= 1.10\n   * Project now builds with stack\n   *
  Fixed failing damaged zip file unit test\n\n\n4.3 (2015-05-25)\n\n   * Replaced
  deprecated Control.Monad.Error with\n     Control.Monad.Except\n   * Updated cabal
  homepage, tested-with and source-repository\n   * Cleaned out ui3.info stuff from
  the README\n   * Updated boringfile with cabal sandbox filespecs\n   * TODO is now
  a Markdown document\n\n\n4.2 (2014-05-09)\n\n   * Added many files missing from
  extra-source-files\n\n\n4.1 (2014-05-04)\n\n   * Fix for Simplifier ticks exhausted
  problem that was exposed\n     after upgrade to GHC 7.8.2\n   * Added README.md
  and changelog.md files, better docs!\n   * Some documentation fixes\n   * Fixed
  a bug reading books where the container XML document is malformed\n\n\n4.0 (2013-09-20)\n\n
  \  * Added support for epub3 documents. This was done using a single\n     set of
  datatypes, not specific to either epub2 or epub3.\n   * Redesigned the book examining
  API to be an edsl. Actions are to be\n     combined together based on what the developer
  needs from the document.\n   * The data structures to contain epub metadata \"sections\"
  were\n     redesigned to no longer be nested. Part of this change includes a\n     typeclass-based
  pretty-print API for displaying this data.\n   * Documentation rewrites and additions,
  including a working code\n     example in the API docs.\n\n\n3.0 (2013-04-13)\n\n
  \  * Repackaged this code to show that it's for epub v2.x only at\n     this time\n
  \  * Fixed a bug where mimetype file not occurring first in the archive\n     on
  Windows\n   * Fixed support for all 0-or-more epub2 metadata fields\n   * Redesigned
  the Format (metadata display) code\n   * Modularized the unit tests so that more
  tests could be added that\n     aren't specifically about parsing metadata.\n   *
  Cosmetic updates to the epub metadata API including some\n     documentation clean-up\n\n\n2.3.2
  (2013-02-01)\n\n   * Added code to strip illegal characters from the beginning of
  the\n     OPF metadata XML file\n   * Switched the encoding hack to be case-insensitive\n\n\n2.3.1
  (2012-10-31)\n\n   * Added a fix for epub zip files with a damaged central directory\n
  \    signature\n\n\n2.3.0 (2012-01-29)\n\n   * Encountered a problem in Windows
  where using a lazy ByteString\n     to read the entire epub zip file was never closing
  the file while\n     consumer applications were still running. Changed this library
  to\n     use a strict ByteString instead for reading the zip archive.\n\n\n2.2.0.1
  (2011-10-27)\n\n   * Changed display output of OPF data to label the textual content
  of\n     a tag as \"text\"\n   * Extensive changes to the cabal build of this project
  to bring it\n     up to Cabal 1.10\n   * Unit tests now use the test-suite cabal
  stanza\n\n\n2.2.0.0 (2011-04-20)\n\n   * Now includes some API functions for working
  directly with zip\n     archives and directories full of the loose files which will
  be made\n     into epubs\n   * Moved the epubmeta utility from this project. It's
  now in epub-tools\n\n\n2.1.0 (2011-02-13)\n\n   * Project now uses zip-archive instead
  of the libzip\n     library. zip-archive is a pure Haskell solution that's easier
  to\n     build on non-UNIX-like platforms\n   * Other changes to the build and project
  to make it buildable under\n     Windows\n\n\n2.0.2 (2011-01-10)\n\n   * This library
  now uses the haskell LibZip library instead of relying\n     on unzip shell command
  invocation\n   * Changed command-line utility name from epub-meta to epubmeta\n\n\n2.0.1
  (2011-01-08)\n\n   * Now always using namespace qualification for all OPF Package\n
  \    tags. Library would incorrectly fail if the OPF document was created\n     using
  explicit namespacing for the OPF package elements.\n   * Hack to avoid problems
  with UTF-8 encoding in OPF Package XML\n     documents\n   * Hack to avoid problems
  with !DOCTYPE declarations. Found some\n     books where a DTD was specified for
  a completely different type of\n     document. Discarding these declarations for
  now.\n   * Changed this code to use System.Process instead of HSH for unzip\n     invocation
  in order to have more control over interpreting exit\n     codes.\n\n\n2.0.0 (2011-01-02)\n\n
  \  * Added parsing and output of the manifest, spine and guide portions\n     of
  the spec. Full read capability of OPF Package data is now\n     complete.\n   *
  Major redesign of the API. It's been split and organized into\n     smaller, more
  focused modules.\n   * Updated to work with the 9.x version of hxt\n   * Redesigned
  epub metadata formatting code to be much more efficient\n     using Writer monad
  and Data.Sequence\n   * Added support for new capabilities to command-line utility\n
  \  * Clarified the Haddock documentation to describe how these data\n     types
  map to the source XML data\n   * Updated unit tests to reflect the large API changes\n\n\n1.0.2
  (2010-05-11)\n\n   * Initial release\n"
basic-deps:
  zip-archive: -any
  bytestring: -any
  epub-metadata: -any
  base: ! '>=3 && <5'
  filepath: -any
  regex-compat-tdfa: -any
  containers: -any
  hxt: ! '>=9'
  utf8-string: -any
  mtl: -any
  directory: -any
all-versions:
- 1.0.2
- 2.0.0
- 2.0.1
- 2.0.2
- 2.1.0
- 2.2.0.0
- 2.2.0.1
- 2.3.0
- 2.3.1
- 2.3.2
- '3.0'
- '4.0'
- '4.1'
- '4.2'
- '4.3'
- '4.4'
- '4.5'
author: Dino Morelli
latest: '4.5'
description-type: markdown
description: ! "# epub-metadata\n\n\n## Synopsis\n\nLibrary for parsing epub document
  metadata (Haskell)\n\n\n## Description\n\nLibrary for parsing and manipulating epub
  document metadata. Supports epub versions 2 and 3.\n\nThis library was constructed
  by studying the IDPF specifications for epub documents found [here for version 2.x](http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm)
  and [here for version 3.x](http://www.idpf.org/epub/30/spec/epub30-publications.html)\n\n\n###
  Why was this done?\n\nThe motivation for this project grew out of my desire to take
  charge\nof missing or incorrect epub metadata in books I have purchased. I\nstarted
  out using the Calibre open source tools for examining this\ninfo. Limitations and
  incomplete implementation of those tools led\nme here to build a more complete implementation
  in the programming\nlanguage that I love beyond all others.\n\n\n### Why didn't
  I just use existing solutions?\n\n#### Calibre ebook-meta utility\n\nI experienced
  various problems using this software, such as:\n\n* Incomplete and in some cases
  incorrect handling of tags that can\n  exist more than once (creator, contributor),
  particularly when they\n  are differentiated using attributes according to the spec.\n\n*
  Unable to display many fields in the OPF Package Document metadata\n  specification.
  Unable to manipulate data that is represented as\n  attributes of tags in the OPF
  spec.\n\n* Astonishingly slow performance. A command-line renaming tool built with\n
  \ epub-metadata is more than 45 times faster at parsing and displaying\n  epub metadata.
  I'm going to blame Python here for Calibre's\n  performance. This has had a big
  impact on projects where I've been\n  processing hundreds of epubs in batch operations.\n\n\n####
  epub on Hackage, epub E-Book construction support library\n\n* The focus of this
  project seems to be with building new documents,\n  not parsing existing files.
  And there is a specific attempt to do more\n  than the metadata, to gather up the
  content and other metafiles that\n  make up an epub for creation.\n\n* Examining
  Codec.Ebook.OPF.Types, most of the metadata fields\n  from the OPF Package Document
  spec are missing or aren't modeled\n  thoroughly. I felt that to contribute to this
  project, I would have\n  had to significantly rip up the types and redesign them.\n\n*
  At this time it seemed like a better solution for me to\n  start fresh with modelling
  the types and code to manipulate them. That\n  said, I would be very interested
  in combining the epub and epub-metadata\n  projects at some point in some way that
  makes sense.\n\n\n### Using this library\n\n   Please see the [Haddock documentation](http://hackage.haskell.org/package/epub-metadata-4.0/docs/Codec-Epub.html)
  or source code for\n   [Codec.Epub](http://hub.darcs.net/dino/epub-metadata/browse/src/Codec/Epub.hs)\n\n
  \  This file has a working example of using this library.\n\n\n## Getting source\n\n-
  Download the cabalized source package [from Hackage](http://hackage.haskell.org/package/epub-metadata)\n-
  Get the source with darcs: `$ darcs get http://hub.darcs.net/dino/epub-metadata`\n-
  Get the source with cabal-install: `$ cabal get epub-metadata`\n- Get the source
  with stack: `$ stack unpack epub-metadata`\n- If you're just looking, [browse the
  source](http://hub.darcs.net/dino/epub-metadata)\n\nAnd once you have it, building
  the usual way:\n\n    $ stack build\n    $ stack test\n    $ stack haddock\n\n\n##
  Contact\n\nDino Morelli <[dino@ui3.info](mailto:dino@ui3.info)>\n"
license-name: BSD-3-Clause
