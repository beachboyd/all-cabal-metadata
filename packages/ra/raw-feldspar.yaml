homepage: https://github.com/Feldspar/raw-feldspar
changelog-type: ''
hash: 193a7ca804a40c8b27c2962e39b914933ef7e69c6d1fb1aee7bbf954121df6f8
test-bench-deps:
  tasty-th: -any
  raw-feldspar: -any
  base: -any
  syntactic: -any
  tasty-quickcheck: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
maintainer: 78emil@gmail.com
synopsis: Resource-Aware Feldspar
changelog: ''
basic-deps:
  data-hash: -any
  imperative-edsl: ! '>=0.7'
  base: <5
  data-default-class: -any
  operational-alacarte: -any
  constraints: -any
  array: -any
  containers: -any
  prelude-edsl: ! '>=0.4'
  syntactic: ! '>=3.6.1'
  mtl: -any
  language-c-quote: -any
  template-haskell: -any
all-versions:
- '0.1'
- '0.2'
- 0.2.1
author: Emil Axelsson
latest: 0.2.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/Feldspar/raw-feldspar.png?branch=master)](https://travis-ci.org/Feldspar/raw-feldspar)\n\n#
  Resource-AWare Feldspar\n\nThis package is a complete reimplementation and partly
  a redesign of the Feldspar EDSL (formerly implemented in [feldspar-language](http://hackage.haskell.org/package/feldspar-language)).
  Feldspar aims to raise the abstraction level of numeric processing and DSP. Its
  compiler generates efficient C code suitable for running on embedded targets.\n\n##
  Installation\n\nRAW-Feldspar can be installed directly from [Hackage](http://hackage.haskell.org/package/raw-feldspar),
  preferably in a [sandbox](https://www.haskell.org/cabal/users-guide/installing-packages.html#developing-with-sandboxes):\n\n
  \   cabal install raw-feldspar\n\nThe installation can be sped up a bit (and the
  size of the installation reduced) by adding a flag to `language-c-quote` (a dependency
  of RAW-Feldspar):\n\n    cabal install --constraint=\"language-c-quote -full-haskell-antiquotes\"
  raw-feldspar\n\nHowever, this flag should normally only be used when installing
  in a sandbox that has no other packages depending `language-c-quote`.\n\n## Getting
  started\n\nThe best way to learn how to use RAW-Feldspar at the moment is to look
  through the [examples](examples/). We suggest going through the files named \"TutN_...\"
  in ascending order. The files are well-documented.\n\nThe easiest way for users
  of `cabal` to get access to the examples is to run\n\n    cabal unpack raw-feldspar\n\nThere
  is also some guidance in the [Haddock documentation](http://hackage.haskell.org/package/raw-feldspar).\n\nThe
  vector library is central to programming in Feldspar. Its general operation is explained
  in the [Haddock documentation](http://hackage.haskell.org/package/raw-feldspar/docs/Feldspar-Data-Vector.html),
  and many [examples](examples/) are using vectors.\n\n### Hello world!\n\nHere is
  the obligatory \"Hello world!\" to get you going:\n\n```haskell\nimport qualified
  Prelude\nimport Feldspar.Run\n\nhelloWorld :: Run ()\nhelloWorld = printf \"Hello
  world!\\n\"\n```\n\nThe program can be run from GHCi:\n\n    *Main> runCompiled
  helloWorld\n    cc -std=c99 /tmp/edsl_16816927771714636915.c -o /tmp/edsl_16816927771714636915\n\n
  \   #### Running:\n    Hello world!\n\nNote the call to `cc` before the code is
  run. This requires you to have a C compiler installed.\n\nMany programs can also
  be run without a C compiler, using `runIO`:\n\n    *Main> runIO helloWorld\n    Hello
  world!\n\nIf you just want to look at the beauty of the generated C code, you can
  instead run:\n\n    *Main> icompile helloWorld\n    #include <stdio.h>\n    int
  main()\n    {\n        fprintf(stdout, \"Hello world!\\n\");\n        return 0;\n
  \   }\n\n### Numeric computations\n\nOK, since Feldspar is mostly about *computation*,
  we need one more example: a function computing the sum of the squares of the numbers
  from 1 to `n` (commonly known as the \"Hello world\" of vector fusion):\n\n```haskell\nimport
  qualified Prelude\nimport Feldspar.Run\nimport Feldspar.Data.Vector\n\nsumSq ::
  Data Word32 -> Data Word32\nsumSq n = sum $ map (\\x -> x*x) (1...n)\n```\n\nThe
  meaning of the function can be understood by comparing it to the standard Haskell
  function\n\n```haskell\nsumSq :: Word32 -> Word32\nsumSq n = sum $ map (\\x -> x*x)
  [1..n]\n```\n\n(Note that `sum` and `map` have been redefined in Feldspar. However,
  they behave analogously to their counterparts for lists.)\n\nIn order to turn a
  pure function such as `sumSq` into a runnable program, we can use the construction
  `connectStdIO $ return . sumSq`. This results in a program that gets its input from
  `stdin` and prints its output to `stdout`:\n\n    *Demo> icompile $ connectStdIO
  $ return . sumSq\n    #include <stdint.h>\n    #include <stdio.h>\n    int main()\n
  \   {\n        uint32_t v0;\n        uint32_t state1;\n        uint32_t v2;\n\n
  \       fscanf(stdin, \"%u\", &v0);\n        state1 = 0;\n        for (v2 = 0; v2
  < (uint32_t) (1 < v0 + 1) * v0; v2++) {\n            uint32_t let3;\n\n            let3
  = v2 + 1;\n            state1 = let3 * let3 + state1;\n        }\n        fprintf(stdout,
  \"%u\", state1);\n        return 0;\n    }\n\nNote how the whole `sumSq` computation
  has been fused into a single loop without any array allocation.\n\n## External libraries\n\n###
  Zeldspar\n\n[Zeldspar](https://github.com/koengit/zeldspar) is an implementation
  of the [Ziria DSL](http://dx.doi.org/10.1145/2694344.2694368) for wireless programming
  on top of RAW-Feldspar.\n\n### raw-feldspar-mcs\n\n[raw-feldspar-mcs](https://github.com/kmate/raw-feldspar-mcs)
  extends RAW-Feldspar and Zeldspar with multicore and scratchpad support.\n\nThe
  repository contains many [examples](https://github.com/kmate/raw-feldspar-mcs/tree/master/examples)
  written for the [Parallella](http://www.parallella.org) multicore architecture.\n\n###
  feldspar-synch\n\n[feldspar-synch](https://github.com/emilaxelsson/feldspar-synch)
  is a library that extends Feldspar with Yampa-style synchronous streams.\n\nIt contains
  a simple polyphonic synthesizer as a demonstration. The synthesizer may serve as
  a simple example of a complete (toy) application written in RAW-Feldspar. It also
  demonstrates how to make bindings to an external C library (the ALSA sound library).\n\n##
  Why RAW-Feldspar?\n\nThe previous Feldspar implementation was split over three packages:\n\n
  \ * [feldspar-language](http://hackage.haskell.org/package/feldspar-language) --
  the language front end\n  * [feldspar-compiler](http://hackage.haskell.org/package/feldspar-compiler)
  -- the C-generating back end\n  * [feldspar-io](https://github.com/emilaxelsson/feldspar-io)
  -- a monadic \"IO\" layer\n\n(`feldspar-io`, which is still at an early stage of
  development, adds support for writing interactive programs calling external functions,
  etc.)\n\nRAW-Feldspar is essentially a replacement of all three packages. It emerged
  as an exploration of two new ideas:\n\n  * A new design in which memory usage is
  explicitly managed by the user\n      - In the previous implementation, most array
  manipulation was done using pure functions, giving the user little chance to control
  memory usage and often leading to unwanted array copying.\n  * Express the compiler
  as a translator to a typed low-level imperative EDSL\n      - This makes the compiler
  both safer and more flexible\n      - Read about the technique: [Compilation as
  a Typed EDSL-to-EDSL Transformation](http://fun-discoveries.blogspot.se/2016/03/compilation-as-typed-edsl-to-edsl.html)\n\nRAW-Feldspar
  has since become a respectable replacement of the previous implementation. RAW-Feldspar
  typically generates slicker code based on native types and functions. Due to the
  new design, the user also has more control over array allocations, leading to lower
  memory usage and fewer array copies.\n\nHowever, RAW-Feldspar also has some [limitations
  and lacks some features](https://github.com/Feldspar/raw-feldspar/wiki/Limitations-and-Missing-Features)
  compared to the previous version. Some features are missing simply because they
  have not been ported yet; others are missing for more fundamental reasons.\n\n##
  Limitations and missing features\n\nSee [limitations and missing features](https://github.com/Feldspar/raw-feldspar/wiki/Limitations-and-Missing-Features).\n\nThere
  is also a [list of possible enhancements and fixes](https://github.com/Feldspar/raw-feldspar/wiki/TODOs).\n\n##
  Implementation\n\nThe implementation of RAW-Feldspar builds heavily on three generic
  packages:\n\n  * [syntactic](http://hackage.haskell.org/package/syntactic), providing:\n
  \     - a generic deep embedding of pure expressions\n      - generic optimizations\n
  \     - etc.\n  * [operational-alacarte](http://hackage.haskell.org/package/operational-alacarte),
  providing:\n      - a generic deep embedding of monadic programs (based on the \"Operational
  monad\")\n  * [imperative-edsl](http://hackage.haskell.org/package/imperative-edsl),
  providing:\n      - operational instructions for imperative programs\n      - C
  code generation\n      - etc.\n\n`imperative-edsl` is used both to represent monadic
  Feldspar programs and the low-level imperative code produced by the Feldspar compiler
  (following the idea in [Compilation as a Typed EDSL-to-EDSL Transformation](http://fun-discoveries.blogspot.se/2016/03/compilation-as-typed-edsl-to-edsl.html)).\n\nThe
  implementation also makes heavy use of the philosophy described in [Combining Deep
  and Shallow Embedding of Domain-Specific Languages](http://dx.doi.org/10.1016/j.cl.2015.07.003).
  The basic idea is to have a low-level core language -- the deep embedding -- and
  to build the user interface as shallow extensions on top of the core language.\n\nA
  prime example of the technique is the [vector library](http://hackage.haskell.org/package/raw-feldspar/docs/Feldspar-Data-Vector.html),
  which provides high-level vector representations with a rich programming interface.
  These vectors only exist in the meta-language (i.e. Haskell), and by the time the
  Feldspar compiler is called, the vectors are already gone and what is left is imperative
  code with highly optimized loops. We saw an example of this when compiling the `sumSq`
  example above.\n\nAnother example is [feldspar-synch](https://github.com/emilaxelsson/feldspar-synch),
  which extends Feldspar with synchronous streams. The whole package is implemented
  as a shallow extension on top of RAW-Feldspar.\n\n"
license-name: BSD-3-Clause
