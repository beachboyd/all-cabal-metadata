homepage: https://www.github.com/larskuhtz/random-bytestring
changelog-type: markdown
hash: b063929c71b4f401f5b29fc2a2b405803dd86feeebc4b062f9373b9c3a0fc2c1
test-bench-deps:
  bytestring: ! '>=0.10'
  mwc-random: ! '>=0.13'
  base: ! '>=4.7 && <5'
  entropy: ! '>=0.3'
  criterion: ! '>=1.1'
  async: ! '>=2.1'
  random-bytestring: -any
  ghc-prim: ! '>=0.3'
  pcg-random: ! '>=0.1'
  cryptonite: ! '>=0.24'
  random: ! '>=1.1'
  primitive: ! '>=0.6'
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: Efficient generation of random bytestrings
changelog: |
  0.1.3.2 (2019-06-06)
  ====================

  *   Relax upper bound on `base` to `<5`.
  *   Include GHC-8.6.5 into test-matrix.

  0.1.3.1 (2018-03-18)
  ====================

  *   Put dependency on pcg-random behind a cabal flag, which is on by default.
      This enables builds stackage nightly.

  0.1.3 (2018-03-17)
  ==================

  *   Support for GHC-8.4.1

  0.1.2
  =====

  *   Add support for PCG as PRNG in addition to MWC.

      The module `Data.ByteString.Random.PCG` uses PCG. The module
      `Data.ByteString.Random.MWC` uses MWC. The module `Data.ByteString.Random`
      uses MWC for backward compatibility.

  *   Support usage of custom PRNGs through the type class `RandomWords` and the
      function `generate` in the module `Data.ByteString.Random.Internal`.

  *   Add some benchmark results to package description

  0.1.1
  =====

  *   Support for GHC-8.2.1 and Cabal-2.0

  0.1.0
  =====

  *   In the implementation of `random`, use `withSystemGen` that seeds the PRNG
      from the system randomness source.

  0.0.1
  =====

  *   First public release
basic-deps:
  bytestring: ! '>=0.10'
  mwc-random: ! '>=0.13'
  base: ! '>=4.7 && <5'
  pcg-random: ! '>=0.1'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.3.2
author: Lars Kuhtz <lakuhtz@gmail.com>
latest: 0.1.3.2
description-type: markdown
description: |+
  [![Build Status](https://travis-ci.org/larskuhtz/random-bytestring.svg)](https://travis-ci.org/larskuhtz/random-bytestring)

  # Efficient Random Haskell ByteStrings

  ## Installation

  ```sh
  cabal install random-bytestring
  ```

license-name: MIT
