homepage: https://github.com/ciez/raketka
changelog-type: markdown
hash: 3f92e93bf221c6d6c1931d7811187add7592572703744d5fc31c6b70ec10eacf
test-bench-deps:
  base: ! '>=4.8'
  hspec: ! '>=2.1.7'
  QuickCheck: ! '>=2.8.1'
maintainer: Imants Cekusins
synopsis: distributed-process node
changelog: ! "#####  1.1.2\n    fix broken build. Reason: API change in dependency
  network-transport-tcp\n    split Main to 2 funs  \n\n#####  1.1.1\n    change common
  state from TVar s to s\n    \n    pass init common state  \n\n#####  1.1\n    add
  custom state to Server\n    \n    peer state type is a configurable param\n    \n
  \   note : package build may fail \n\n    due to version clash between aeson, vector,
  primitive packages\n    \n    https://github.com/ciez/vector is a patched version
  of vector-0.11.0.0\n    \n    I do not claim to have any knowledge about vector
  package workings. \n\n    Did basic refactoring: moved some code to a different
  module and followed some GHC suggestions. It builds and it works with raketka.  \n
  \   \n\n#####  1.0\n    start multiple nodes\n    \n    on start nodes ping suggested
  (in config) nodes - which pong back - and establish monitored connections\n"
basic-deps:
  bytestring: -any
  stm: -any
  base: ! '>=4.8 && <5.0'
  distributed-process: -any
  network: -any
  async: -any
  conf-json: -any
  tagged: -any
  containers: -any
  distributed-process-simplelocalnet: -any
  binary: -any
  network-transport-tcp: -any
  network-transport: -any
  random: -any
  aeson: -any
  template-haskell: -any
all-versions:
- '1.0'
- '1.1'
- '1.1.1'
- '1.1.2'
author: Imants Cekusins
latest: '1.1.2'
description-type: markdown
description: ! "### raketka\n    * basic distributed-process node\n    * configurable
  peers\n\n    Begin reading at Control.Distributed.Raketka.Type.Arg\n\n    see also:
  \n    \n        *   [parconc-examples](https://hackage.haskell.org/package/parconc-examples)\n
  \       *   [haskell-distributed tutorials](http://haskell-distributed.github.io/tutorials/1ch.html)
  \ \n    \n    This library: \n    \n        functionality: \n            * start
  nodes \n            * connect them with each other\n            * exchanges pings
  with other nodes which are expected to pong back\n            * received pings &
  pongs are output to stdout\n            * when 1 node is disconnected or stops,
  the other nodes stdout notifications about this\n    \n        may be extended \n
  \       however you are most likely to write your own code that does much more.
  \n    \n        is simple on purpose, does only a few things which seem to be common
  in distributed arch \n    \n    To start the program that comes with this library:\n
  \   \n        start the same program in multiple consoles: 1 per node\n     \n        2
  args are expected:\n    \n            1. path to config.json (see test-conf.json)\n
  \           2. idx of this node in the cluster: 0 .. (length Cluster -1)    \n"
license-name: PublicDomain
