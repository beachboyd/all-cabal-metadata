homepage: ''
changelog-type: markdown
hash: 603e48911ed35401259344e250d5524faa2df2b4b7bce4c91fe1cecdb1cc51b9
test-bench-deps:
  base-noprelude: -any
  gauge: -any
  relude: -any
  rating-chgk-info: -any
maintainer: gltronred@gmail.com
synopsis: Client for rating.chgk.info API and CSV tables (documentation in Russian)
changelog: |+
  # Change log

  `rating-chgk-info` uses [PVP Versioning][1].

  # Unreleased

  ## Added
  ## Changed
  ## Removed
  ## Deprecated
  ## Fixed
  ## Security

  # 0.3.6.4 - 2019-04-09

  ## Added

  * Получение всех составов на турнире (API 3.6.4)
  * Поиск по турнирам (API 3.6.4)
  * Получение списка городов
  * Получение ближайших синхронов в городе
  * Приложение для генерации календарей синхронов в городе (app/calendar-rating)

  ## Changed

  * Поля `archive` и `date_archived_at` в турнирах (API 3.6.4)
  * Исправлены версии зависимостей, теперь они совместимы с GHC 8.6
  * Работает с servant 0.16
  * Данные запрашиваются через https

  # 0.3.6.3 - 2019-02-09

  ## Added

  * Функции для работы со спорными и апелляциями (версия API 3.6.3)
  * Поле `tournament_in_rating`, показывающее, учитывается ли турнир в рейтинге (API 3.6.3)
  * Примеры работы с библиотекой

  ## Changed

  * Каждый идентификатор (игрока, команды, релиза и т.п.) имеет свой тип
  * Модуль `RatingChgkInfo` экспортирует весь необходимый код

  ## Removed

  * Функция `apiIdToInt`, поскольку теперь каждый идентификатор имеет свой тип

  ## Fixed

  * Добавлен workaround: на сайте рейтинга для некоторых турниров и заявок утеряны
    данные о количестве изначально заявленных команд

  # 0.2.1.0

  ## Added

  * Клиентские функции для REST API сайта рейтинга (на 2019-01-13, версия 3.6.2, обновление движка 22-10-2018 01:48)
  * Получение данных о заявках и введённых командах через CSV
  * REST-сервер для заявок

  # 0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org

basic-deps:
  warp: ! '>=3.2'
  http-client: ! '>=0.5'
  bytestring: ! '>=0.10'
  wai: ! '>=3.2'
  optparse-generic: ! '>=1.3'
  time: ! '>=1.8'
  servant-client: ! '>=0.16'
  text: ! '>=1.2'
  servant-js: ! '>=0.9'
  network: ! '>=2.8'
  base-noprelude: ! '>=4.11'
  servant-swagger: ! '>=1.1'
  servant-server: ! '>=0.16'
  servant: ! '>=0.16'
  wreq: ! '>=0.5'
  containers: ! '>=0.5'
  lens: ! '>=4.17'
  cassava: ! '>=0.5'
  relude: ! '>=0.4.0'
  http-client-tls: ! '>=0.3'
  iconv: ! '>=0.4'
  swagger2: ! '>=2.2'
  tagsoup: ! '>=0.14'
  rating-chgk-info: -any
  aeson: ! '>=1.4'
  vector: ! '>=0.12'
  directory: -any
all-versions:
- 0.3.6.3
- 0.3.6.4
author: Mansur Ziiatdinov
latest: 0.3.6.4
description-type: markdown
description: |
  # rating-chgk-info

  [![Hackage](https://img.shields.io/hackage/v/rating-chgk-info.svg)](https://hackage.haskell.org/package/rating-chgk-info)
  [![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)](LICENSE)

  Client for rating.chgk.info API and CSV tables

  [Документация](https://doc.chgk.me/rating-chgk-info/)

  Клиент для REST API сайта рейтинга (rating.chgk.info) и функциональности, которой нет в REST API, но которая доступна через экспорт CSV.
  Также содержит REST-сервер для дополнительной функциональности, доступной через CSV.

  Сгенерированные JS-функции для работы с REST API: https://bitbucket.org/gltronred/t-chgk-me/downloads/rating-chgk-info-0.2.1.js

  В следующем большом релизе планируется заменить в части типов для REST API списки значений на множества (Set), например, для составов команд и т.п. Это должно повысить безопасность библиотеки (сложнее будет выстрелить себе в ногу), и не должно ухудшить возможности работы.

  ## Установка и запуск

  Для работы с библиотекой необходимо добавить зависимость `rating-chgk-info`.

  Запустить пример можно при помощи `cabal new-run example1`.

  ## Пример использования:

  Больше примеров находятся в папке examples

  ```haskell
  -- Немного наших библиотек
  import RatingChgkInfo

  -- И немного стандартных библиотек
  import Control.Monad (forM, void)
  import Control.Monad.IO.Class (liftIO)
  import Data.List (nub)
  import Data.Time (LocalTime(..),fromGregorian,midnight)

  -- Точка входа в приложение
  main :: IO ()

  -- Функция runRatingApi запускает работу клиента, это позволяет разделять эффекты
  main = void $ runRatingApi $ do

    -- Получим список всех очных турниров за 2018 год

    let s2018 = LocalTime (fromGregorian 2018 1 1) midnight
        e2018 = LocalTime (fromGregorian 2019 1 1) midnight

    -- Функция tournaments получает одну страницу турниров, а функция getAllItems
    -- оборачивает подобные функции, чтобы пройтись по всем страницам.
    -- Далее из этого списка выбираются очные турниры 2018 года
    tourns <- filter (\t -> trs_typeName t == Casual &&
                            trs_dateStart t >= s2018 &&
                            trs_dateEnd t <= e2018) <$>
              getAllItems tournaments

    -- Проходимся по полученному списку
    ts <- forM tourns $ \TournamentShort{trs_idtournament = ident} -> do

      -- Получаем результаты турнира
      res <- tournamentResults ident

      -- Возвращаем названия команд-участниц
      pure (map tr_current_name res)

    -- Выводим, сколько уникальных названий было по всем турнирам
    liftIO (print (length (nub ts)))

  ```
license-name: BSD-3-Clause
