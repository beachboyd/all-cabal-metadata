homepage: https://github.com/pa-ba/Rattus
changelog-type: markdown
hash: 77e17fbf57f2301f6108195d8859edc5e6e5b166777948a01951f0e294893a7c
test-bench-deps:
  base: -any
  Rattus: -any
  containers: -any
maintainer: Patrick Bahr <paba@itu.dk>
synopsis: A modal FRP language
changelog: |
  0.3.1
  -----

  Guarded recursive types Str and Event are now fully strict (i.e. in
  particular, they are strict in the component that is of a later type)
  as they should be.

  0.3
  ---

  Rattus code is now checked just after GHC's type checking phase
  (instead of after desugaring to Core). As a consequence, error
  messages for some corner cases are much improved and we don't need
  to use the -g2 compiler option anymore to get good error messages.

  0.2
  ---

  - the use of lazy data structures will now cause a warning (can be
    disabled by 'AllowLazyData' annotation); this check for lazy data is
    rather ad hoc and needs to be refined
  - allow functions under ticks (but with limitations, see paper)
  - strictness transformation is now similar to the 'Strict' language
    extension
  - optimisations using custom rewrite rules

  0.1.1.0
  -------

  - allow mutual guarded recursion
  - improve type error messages

  0.1.0.0
  -------
  initial release
basic-deps:
  ghc: '>=8.6 && <8.11'
  base: '>=4.12 && <5'
  simple-affine-space: -any
  containers: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- '0.2'
- '0.3'
- 0.3.1
author: Patrick Bahr
latest: 0.3.1
description-type: haddock
description: |-
  This library implements the Rattus programming language as
  an embedded DSL. To this end the library provides a GHC
  plugin that performs the additional checks that are
  necessary for Rattus. What follows is a brief
  introduction to the language and its usage. A more
  detailed introduction can be found in this
  <src/docs/paper.pdf paper>.

  Rattus is a functional reactive programming (FRP) language
  that uses modal types to ensure operational properties
  that are crucial for reactive programs: productivity (in
  each computation step, the program makes progress),
  causality (output depends only on current and earlier
  input), and no implicit space leaks (programs do not
  implicitly retain memory over time).

  To ensure these properties, Rattus uses the type modality
  @O@ to express the concept of time at the type
  level. Intuitively speaking, a value of type @O a@
  represents a computation that will produce a value of type
  @a@ in the next time step. Additionally, the language also
  features the @Box@ type modality. A value of type @Box a@
  is a time-independent computation that can be executed at
  any time to produce a value of type @a@.

  For example, the type of streams is defined as

  > data Str a = a ::: (O (Str a))

  So the head of the stream is available now, but its tail
  is only available in the next time step. Writing a @map@
  function for this type of streams, requires us to use the
  @Box@ modality:

  > map :: Box (a -> b) -> Str a -> Str b
  > map f (x ::: xs) = unbox f x ::: delay (map f (adv xs))

  This makes sure that the function @f@ that we give to
  @map@ is available at any time in the future.

  The core of the language is defined in the module
  "Rattus.Primitives". Note that the operations on @O@ and
  @Box@ have non-standard typing rules. Therefore, this
  library provides a compiler plugin that checks these
  non-standard typing rules. To write Rattus programs, one
  must enable this plugin via the GHC option
  @-fplugin=Rattus.Plugin@, e.g. by including the following
  line in the source file:

  > {-# OPTIONS -fplugin=Rattus.Plugin #-}

  In addition, one must annotate the functions that are
  written in Rattus:

  > {-# ANN myFunction Rattus #-}

  Or annotate the whole module as a Rattus module:

  > {-# ANN module Rattus #-}

  Below is a minimal Rattus program using the
  "Rattus.Stream" module for programming with streams:

  > {-# OPTIONS -fplugin=Rattus.Plugin #-}
  >
  > import Rattus
  > import Rattus.Stream
  >
  > {-# ANN sums Rattus #-}
  > sums :: Str Int -> Str Int
  > sums = scan (box (+)) 0

  The
  <docs/src/Rattus.Stream.html source code of the Rattus.Stream module>
  provides more examples on how to program in Rattus.
license-name: BSD-3-Clause
