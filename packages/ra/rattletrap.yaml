homepage: https://github.com/tfausak/rattletrap#readme
changelog-type: markdown
hash: bcb5c9d3aa612f1ac4b067aa2a605f6411eaa63c4f8e59f30b212e7daeedbd69
test-bench-deps:
  http-client: ! '>=0.5.10 && <0.7'
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.11.1 && <4.13'
  aeson-pretty: ! '>=0.8.5 && <0.9'
  text: ! '>=1.2.3 && <1.3'
  filepath: ! '>=1.4.1 && <1.5'
  HUnit: ! '>=1.6.0 && <1.7'
  containers: ! '>=0.5.10 && <0.7'
  binary: ! '>=0.8.5 && <0.9'
  http-client-tls: ! '>=0.3.5 && <0.4'
  rattletrap: -any
  transformers: ! '>=0.5.2 && <0.6'
  temporary: ! '>=1.2.1 && <1.4'
  binary-bits: ! '>=0.5 && <0.6'
  aeson: ! '>=1.2.4 && <1.5'
  template-haskell: ! '>=2.13.0 && <2.15'
maintainer: Taylor Fausak
synopsis: Parse and generate Rocket League replays.
changelog: |
  # Change log

  Rattletrap uses [Semantic Versioning][].
  The change log is available through the [releases on GitHub][].

  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html
  [releases on GitHub]: https://github.com/tfausak/rattletrap/releases
basic-deps:
  http-client: ! '>=0.5.10 && <0.7'
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.11.1 && <4.13'
  aeson-pretty: ! '>=0.8.5 && <0.9'
  text: ! '>=1.2.3 && <1.3'
  filepath: ! '>=1.4.1 && <1.5'
  containers: ! '>=0.5.10 && <0.7'
  binary: ! '>=0.8.5 && <0.9'
  http-client-tls: ! '>=0.3.5 && <0.4'
  rattletrap: -any
  transformers: ! '>=0.5.2 && <0.6'
  binary-bits: ==0.5.*
  aeson: ! '>=1.2.4 && <1.5'
  template-haskell: ! '>=2.13.0 && <2.15'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.1
- 1.0.0
- 2.0.0
- 2.1.0
- 2.1.1
- 2.1.2
- 2.1.3
- 2.1.4
- 2.1.5
- 2.2.0
- 2.2.1
- 2.2.2
- 2.2.3
- 2.2.4
- 2.3.0
- 2.3.1
- 2.4.0
- 2.5.0
- 2.5.1
- 2.5.2
- 3.0.0
- 3.1.0
- 3.1.1
- 3.1.2
- 4.0.0
- 4.0.1
- 4.0.2
- 4.0.3
- 4.0.4
- 4.0.5
- 4.0.6
- 4.0.7
- 4.0.8
- 4.0.9
- 4.1.0
- 4.1.1
- 4.1.2
- 5.0.0
- 5.0.1
- 6.0.0
- 6.0.1
- 6.0.2
- 6.1.0
- 6.2.0
- 6.2.1
- 6.2.2
- 6.2.3
- 6.3.0
- 6.3.1
author: ''
latest: 6.3.1
description-type: markdown
description: |
  # [Rattletrap][]

  [![Version badge][]][version]
  [![Windows build badge][]][windows build]
  [![Build badge][]][build]

  Rattletrap parses and generates [Rocket League][] replays.

  ## Install

  Get Rattletrap by downloading and unpacking [the latest release][] for your
  platform.

  To build Rattletrap from source, install [Stack][]. Then run
  `stack --resolver nightly install rattletrap`.

  ## Replays

  Rocket League saves your replays in a folder that depends on your operating
  system.

  - Windows:
    - `%UserProfile%/Documents/My Games/Rocket League/TAGame/Demos`
    - For example: `C:/Users/Taylor/Documents/My Games/Rocket League/TAGame/Demos`
  - macOS:
    - `$HOME/Library/Application Support/Rocket League/TAGame/Demos`
    - For example: `/Users/taylor/Library/Application Support/Rocket League/TAGame/Demos`
  - Linux:
    - `$HOME/.local/share/Rocket League/TAGame/Demos`
    - For example: `/home/taylor/.local/share/Rocket League/TAGame/Demos`

  ## Interface

  Rattletrap is a command line application.

  ``` sh
  > rattletrap --help
  rattletrap version 4.0.0
    -c             --compact                minify JSON output
    -h             --help                   show the help
    -i FILE|URL    --input=FILE|URL         input file or URL
    -m MODE        --mode=MODE              decode or encode
    -o FILE        --output=FILE            output file
    -v             --version                show the version
  ```

  By default Rattletrap will try to determine the appropriate mode (either decode
  or encode) based on the file extensions of the input or output. You can
  override this behavior by passing `--mode` (or `-m`) with either `decode` or
  `encode`.

  Input extension | Output extension | Mode
  --- | --- | ---
  `.replay` | anything | `decode` (parse)
  `.json` | anything | `encode` (generate)
  anything | `.replay` | `encode` (generate)
  anything | `.json` | `decode` (parse)
  anything | anything | `decode` (parse)

  ## Parse

  Rattletrap can parse (decode) Rocket League replays and output them as JSON.

  ``` sh
  > rattletrap --input http://example.com/input.replay --output output.json
  # or
  > rattletrap -i input.replay > output.json
  # or
  > rattletrap < input.replay > output.json
  ```

  The input argument can either be a local path or a URL.

  By default the JSON is pretty-printed. To minify the JSON, pass `--compact` (or
  `-c`) to Rattletrap. Even when the JSON is minified, it's extremely large. The
  output can be up to 100 times larger than the input. For example, a 1.5 MB
  replay turns into 31 MB of minified JSON or 159 MB of pretty-printed JSON.

  ## Generate

  Rattletrap can also generate (encode) Rocket League replays from JSON files.

  ``` sh
  > rattletrap --input http://example.com/input.json --output output.replay
  # or
  > rattletrap -i input.json > output.replay
  # or
  > rattletrap --mode encode < input.json > output.replay
  ```

  The input argument can either be a local path or a URL.

  If the JSON was generated by Rattletrap, the output replay will be bit-for-bit
  identical to the input replay.

  ## Modify

  By inserting another program between parsing and generating, Rattletrap can be
  used to modify replays.

  ``` sh
  > rattletrap -i input.replay |
    modify-replay-json |
    rattletrap -o output.replay
  ```

  [Rattletrap]: https://github.com/tfausak/rattletrap
  [Version badge]: https://img.shields.io/hackage/v/rattletrap.svg?label=version
  [version]: https://hackage.haskell.org/package/rattletrap
  [Windows build badge]: https://img.shields.io/appveyor/ci/taylorfausak/rattletrap/master.svg?logo=appveyor
  [windows build]: https://ci.appveyor.com/project/taylorfausak/rattletrap
  [Build badge]: https://img.shields.io/travis/tfausak/rattletrap/master.svg
  [build]: https://travis-ci.org/tfausak/rattletrap
  [Rocket League]: https://www.rocketleaguegame.com
  [the latest release]: https://github.com/tfausak/rattletrap/releases/latest
  [Stack]: https://docs.haskellstack.org/en/stable/README/
license-name: MIT
