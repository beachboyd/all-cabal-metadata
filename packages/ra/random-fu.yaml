homepage: https://github.com/mokus0/random-fu
changelog-type: markdown
hash: 81afcf178ef802496e1b0243f24226b8969968a9f92208dc98c809a11a5095ec
test-bench-deps: {}
maintainer: Dominic Steinitz <dominic@steinitz.org>
synopsis: Random number generation
changelog: ! "* Changes in 0.2.7.0: Add Simplex, fix logBetaPdf, fix binomialPdf and\n
  \ binomialCdf to actually use the numerically stable method!\n\n* Changes in 2.6.1:
  now supports probability density functions and log\n  probability density functions
  via the PDF class, similar to R and\n  initially just for the Beta, Binomial, Normal
  and Uniform\n  distributions. The log Binomial probability density function uses\n
  \ *Fast and Accurate Computation of Binomial Probabilities* by\n  Catherine Loader
  (this is what is implemented in R and Octave) to\n  minimize the occurrence of underflow.\n\n*
  Changes in 0.2.4.0: Added a Lift instance that resolves a common\n  overlapping-instance
  issue in user code.\n\n* Changes in 0.2.3.1: Should now build on GHC 7.6\n\n* Changes
  in 0.2.3.0: Added stretched exponential distribution,\n  contributed by Ben Gamari.\n\n*
  Changes in 0.2.2.0: Bug fixes in\n  Data.Random.Distribution.Categorical.\n\n* Changes
  in 0.2.1.1: Changed some one-field data types to newtypes,\n  updated types for
  GHC 7.4's removal of Eq and Show from the context\n  of Num, and added RVarT versions
  of random variables in\n  Data.Random.List\n"
basic-deps:
  base: ! '>=4.2 && <5'
  syb: -any
  monad-loops: ! '>=0.3.0.1'
  log-domain: ! '>=0.9 && <1.0'
  random-shuffle: -any
  erf: -any
  math-functions: -any
  rvar: ==0.2.*
  mtl: ==2.*
  transformers: -any
  random-source: ==0.3.*
  template-haskell: -any
  vector: ! '>=0.7'
all-versions:
- 0.0.0.2
- 0.0.1.1
- 0.0.2.0
- 0.0.2.1
- 0.0.3
- 0.0.3.2
- 0.1.0.0
- 0.1.3
- 0.1.4
- '0.2'
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.0
- 0.2.3.1
- 0.2.4.0
- 0.2.5.0
- 0.2.6.0
- 0.2.6.1
- 0.2.6.2
- 0.2.7.0
author: James Cook <mokus@deepbondi.net>
latest: 0.2.7.0
description-type: haddock
description: ! 'Random number generation based on modeling random

  variables in two complementary ways: first, by the

  parameters of standard mathematical distributions and,

  second, by an abstract type (''RVar'') which can be

  composed and manipulated monadically and sampled in

  either monadic or \"pure\" styles.


  The primary purpose of this library is to support

  defining and sampling a wide variety of high quality

  random variables.  Quality is prioritized over speed,

  but performance is an important goal too.


  In my testing, I have found it capable of speed

  comparable to other Haskell libraries, but still

  a fair bit slower than straight C implementations of

  the same algorithms.'
license-name: LicenseRef-PublicDomain
