homepage: https://github.com/barrucadu/dejafu
changelog-type: ''
hash: b844634e0d12dc62cf585a0f53af305fda36d8a32c9b236dfe6e426c4b9b3312
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: A generic implementation of dynamic partial-order reduction (DPOR) for testing
  arbitrary models of concurrency.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  semigroups: ! '>=0.16 && <0.19'
  containers: ! '>=0.5 && <0.6'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.3 && <1.5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
author: Michael Walker
latest: 0.2.0.0
description-type: haddock
description: ! 'We can characterise the state of a concurrent computation by

  considering the ordering of dependent events. This is a partial

  order: independent events can be performed in any order without

  affecting the result. DPOR is a technique for computing these

  partial orders at run-time, and only testing one total order for

  each partial order. This cuts down the amount of work to be done

  significantly. In particular, this package implemented bounded

  partial-order reduction, which is a further optimisation. Only

  schedules within some *bound* are considered.


  * DPOR with no schedule bounding is __complete__, it /will/ find all

  distinct executions!


  * DPOR with schedule bounding is __incomplete__, it will only find

  all distinct executions /within the bound/!


  __Caution:__ The fundamental assumption behind DPOR is that the

  *only* source of nondeterminism in your program is the

  scheduler. Or, to put it another way, if you execute the same

  program with the same schedule twice, you get the same result. If

  you are using this library in combination with something which

  performs I/O, be *very* certain that this is the case!


  See the <https://github.com/barrucadu/dejafu README> for more

  details.


  For details on the algorithm, albeit presented in a very imperative

  way, see /Bounded partial-order reduction/, K. Coons, M. Musuvathi,

  and K. McKinley (2013), available at

  <http://research.microsoft.com/pubs/202164/bpor-oopsla-2013.pdf>'
license-name: MIT
