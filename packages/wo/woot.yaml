homepage: https://github.com/TGOlson/woot-haskell
changelog-type: ''
hash: 7276a6e18a319fab52e84685ef791a6da200cab36c97a1710bf1cdcfd17c1331
test-bench-deps:
  base: <=5
  hspec: -any
  woot: -any
  vector: -any
maintainer: tydotg@gmail.com
synopsis: Real time group editor without operational transform.
changelog: ''
basic-deps:
  base: <=5
  vector: -any
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
author: Tyler Olson
latest: 0.0.0.6
description-type: markdown
description: ! "# woot\n\nCore library for creating real time collaborative documents
  without Operational\ntransformation (WOOT). This package provides the core logic
  and data types for building a server capable and handling real time editing with
  WOOT.\n\n[Real time group editors without Operational transformation](https://hal.inria.fr/inria-00071240/document)\n\nInstall\n\n```\n$
  stack install woot\n```\n\nTest\n\n```\nstack test\n```\n\nNotes:\n\n* Haskell server
  is a passive peer in the process\n* only needs a remote integration function\n\n*
  https://github.com/kroky/woot/blob/master/src/woot.coffee\n* https://bitbucket.org/d6y/woot\n\nExample:\n\nHere
  is a small example of how one would use this library to create a server that keeps
  an internal `WootClient` and updates the client upon request.\n\nEach time the server
  receives a `POST` request with an `Operation` in the JSON body, it will apply that
  operation to a cached `WootClient` instance, and then update the cache. This server
  could easily receive many updates from many other clients, and reliably process
  the operations.\n\n```haskell\nimport Control.Concurrent.STM\nimport Data.Aeson\nimport
  Data.IORef\nimport Data.Woot\nimport Network.HTTP.Types.Status\nimport Network.Wai\nimport
  Network.Wai.Handler.Warp\n\n\n-- ...\n-- FromJSON instances for Operation and other
  necessary types\n\n\nmakeEmptyClient :: IO (IORef WootClient)\nmakeEmptyClient =
  newIORef $ makeWootClientEmpty 1\n\n\nwootApp :: IORef WootClient -> Application\nwootApp
  clientRef req respond = do\n    body <- requestBody req\n\n    let mOperation =
  decodeStrict body\n\n    case mOperation of\n        Nothing -> return ()\n        Just
  operation -> do\n            client <- readIORef clientRef\n            let newClient
  = sendOperation client operation\n            _ <- writeIORef clientRef newClient\n
  \           putStrLn $ \"Updated Client: \" ++ show (wootClientString newClient)\n\n
  \   respond $ responseLBS status200 [] \"WOOOOT!\"\n\n\nrunWootApp :: IO ()\nrunWootApp
  = makeEmptyClient >>= run 8000 . wootApp\n```\n\nTODO:\n\n* ci\n* docs\n* examples\n"
license-name: MIT
