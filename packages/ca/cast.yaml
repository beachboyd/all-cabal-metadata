homepage: https://github.com/haskell-patterns/cast#readme
changelog-type: ''
hash: c8f6b8f9332c685cde9df90ebc0b1a7598dfa85fc8377b717ea05a92bb2fd087
test-bench-deps: {}
maintainer: bog2dan1@gmail.com
synopsis: Abstact cast pattern
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Bogdan Neterebskii
latest: 0.1.0.2
description-type: markdown
description: ! "# Haskell pattern: cast\n\nThis pattern allows to incapsulate convert
  from one type of object for another.\n\n## Example\n\nSuppose you want convert different
  speed units to meter per second:\n\n``` haskell\n{-# LANGUAGE MultiParamTypeClasses
  #-}\n\nimport Pattern.Cast\n\nnewtype MeterPerSecond   = MeterPerSecond Float\n
  \ deriving (Ord, Eq)\nnewtype KilometerPerHour = KilometerPerHour Float\nnewtype
  MilesPerHour     = MilesPerHour Float\n\ninstance Cast KilometerPerHour MeterPerSecond
  where\n  cast (KilometerPerHour v) = MeterPerSecond (0.277778 * v)\n\ninstance Cast
  MilesPerHour MeterPerSecond where\n  cast (MilesPerHour v) = MeterPerSecond (0.44704
  * v)\n```\n\nAs you see, you have to use `MultiParamTypeClasses` language extension.\n\nThen
  in every place you can just call one function `cast`:\n\n``` haskell\n> cast (KilometerPerHour
  100) :: MeterPerSecond\nMeterPerSecond 27.7778\n> cast (MilesPerHour 100) :: MeterPerSecond\nMeterPerSecond
  44.704\n```\n\nYou can type your functions more abstractly. Let's look at this synthetic
  example:\n\n``` haskell\ntype Second = Float\ntype Meter  = Float\n\ndata Aircraft
  = Aircraft { distance :: Meter\n                         , time     :: Second\n
  \                        }\n\ninstance Cast Aircraft MeterPerSecond where\n  cast
  (Aircraft d t) = MeterPerSecond (d / t)\n```\n\nThen you can use `Cast` in type
  of your fuction like this (`FlexibleContexts` extension has to be used):\n\n```
  haskell\n{-# LANGUAGE FlexibleContexts #-}\n\nslowerThenSound :: Cast a MeterPerSecond
  => a -> Bool\nslowerThenSound x = cast x < MeterPerSecond 340.29\n```\n\nAnd this
  fuction can be used with every type that can be converted in `MeterPerSecond`:\n\n```
  haskell\n> slowerThenSound $ MeterPerSecond 200\nTrue\n> slowerThenSound $ KilometerPerHour
  1000\nTrue\n> slowerThenSound $ Aircraft 1200 3\nFalse\n```\n\n"
license-name: BSD-3-Clause
