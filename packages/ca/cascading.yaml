homepage: ''
changelog-type: ''
hash: 53e76fce91858546d4eceebaa25d9ce5850506e6ddab39691e42402db6127ce8
test-bench-deps: {}
maintainer: Ertugrul Söylemez <es@ertes.de>
synopsis: DSL for HTML CSS (Cascading Style Sheets)
changelog: ''
basic-deps:
  bytestring: ! '>=0.10 && <1'
  base: ! '>=4.5 && <5'
  text: ! '>=0.11 && <1'
  containers: ! '>=0.5 && <1'
  blaze-builder: ! '>=0.3 && <1'
  lens: ! '>=3.9 && <4'
  utf8-string: ! '>=0.3 && <1'
  web-routes: ! '>=0.27 && <1'
  mtl: ! '>=2.0 && <3'
  colour: ! '>=2.3 && <3'
all-versions:
- 0.1.0
author: Ertugrul Söylemez <es@ertes.de>
latest: 0.1.0
description-type: markdown
description: ! "Cascading\n=========\n\nThis library implements a domain-specific
  language for cascading style\nsheets as used in web pages.  It allows you to specify
  your style sheets\nin regular Haskell syntax and gives you all the additional power
  of\nserver-side document generation.  You can find examples below.  To see a\nfull
  tutorial, have a look at the Haddock documentation of the\n`Data.CSS` module.\n\n\nCurrent
  status\n--------------\n\nRight now most of the CSS 2.1 specification is implemented.
  \ In\nparticular all non-appendix properties now have type-safe Haskell\ncounterparts
  in `Data.CSS.Properties`.\n\nThe type safety goes very far to ensure conformance
  with the\nspecification, but some of it has been sacrificed for convenience and\nAPI
  simplicity.\n\n### To do\n\n  * Write automated unit tests.\n  * Write a pretty
  printer for debugging.\n\n\nPerformance\n-----------\n\nThe performance is based
  on and bound by blaze-builder, so is good\nenough for most web applications.  For
  a high-profile web site you may\nwant to cache the generated stylesheets.  The easiest
  way to do this is\nto use regular Haskell sharing.  This gets you very close to
  the best\npossible performance:\n\n    stylesheet :: ByteString\n    stylesheet
  =\n        toByteString . renderCSS $\n            {- actual stylesheet -}\n\nIf
  your stylesheet is highly parametric, sharing will not work and you\ncan use memoization
  instead.  See the [memoize], [MemoTrie] or\n[monad-memo].\n\n[memoize]:    http://hackage.haskell.org/package/memoize\n[MemoTrie]:
  \  http://hackage.haskell.org/package/MemoTrie\n[monad-memo]: http://hackage.haskell.org/package/monad-memo\n\n\nRendering\n---------\n\nTo
  render a stylesheet you can use `fromCSS`, `renderCSS` or\n`renderCSST`.  All of
  these will give you a `Builder`.  You can then use\n[blaze-builder] combinators
  like `toByteString` or `toByteStringIO` to\nturn it into a `ByteString`, send it
  to a client or write it to a file.\n\nThe following example, assuming that `stylesheet`
  is of type `Writer CSS\n()`, prints the stylesheet to stdout:\n\n    import qualified
  Data.ByteString as B\n    import Blaze.ByteString.Builder\n    import Data.CSS\n\n
  \   toByteStringIO B.putStr . renderCSS $ stylesheet\n\n[blaze-builder]: http://hackage.haskell.org/package/blaze-builder\n\n\nExamples\n--------\n\nThe
  recommended way to create your stylesheets is to use a writer monad\n(transformer).
  \ This gives you a large library of predefined properties\ncovering most of CSS
  level 2.1.\n\n### Basic stylesheets\n\nThe following is a basic stylesheet.  The
  imports are listed here for\nyour convenience, but will be implied in further examples:\n\n
  \   import Control.Lens\n    import Control.Monad.Writer\n    import Data.Colour\n
  \   import Data.CSS\n    import Data.CSS.Properties\n\n    stylesheet :: Writer
  CSS ()\n    stylesheet =\n        onAll $ do\n            select [\"p\"] $ do\n
  \               margin . Edges $ [zeroLen]\n                padding . Edges $ [_Em
  # 1, _Ex # 2]\n\n            select [\"em\"] $ do\n                fontWeight BolderWeight\n\nThe
  type signature of `stylesheet` is very specialized.  The actual type\nis more general
  and makes it easier to interleave your stylesheets with\nweb framework operations
  if necessary:\n\n    stylesheet :: (MonadWriter CSS m) => m ()\n\nThe style sheet
  will render as:\n\n    p {\n        margin: 0;\n        padding: 1em 2ex;\n    }\n\n
  \   em {\n        font-weight: bolder;\n    }\n\n\n### Media types\n\n    stylesheet
  = do\n        onMedia [\"print\", \"projection\"] . select [\"p\"] $ do\n            margin
  . Edges $ [_Em # 0.4, _Ex # 0.1]\n            padding . Edges $ [zeroLen]\n\n        onMedia
  [\"screen\"] . select [\"p\"] $ do\n            margin . Edges $ [_Em # 0.8, _Ex
  # 0.4]\n            padding . Edges $ [zeroLen]\n\nRenders as:\n\n    @media print,
  projection {\n        p {\n            margin: 0.4em 0.1ex;\n            padding:
  0;\n        }\n    }\n\n    @media screen {\n        p {\n            margin: 0.8em
  0.4ex;\n            padding: 0;\n        }\n    }\n\n\n### Multiple selectors\n\n
  \   stylesheet = do\n        onAll . select [\"p\", \"li\"] $ do\n            margin
  . Edges $ [_Em # 0.4, _Ex # 0.1]\n            padding . Edges $ [zeroLen]\n\n            below
  [\"em\", \"strong\"] $\n                fontWeight BolderWeight\n\nRenders as:\n\n
  \   p, li {\n        margin: 0.4em 0.1ex;\n        padding: 0\n    }\n\n    p em,
  li em, p strong, li strong {\n        font-weight: bolder;\n    }\n"
license-name: BSD-3-Clause
