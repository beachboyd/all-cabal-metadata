homepage: https://github.com/tfausak/cassava
changelog-type: markdown
hash: 608fa9efa706eac879864f489cdb0d42493407fc62fa3bc7cb1200106efd9c97
test-bench-deps:
  test-framework-hunit: ==0.3.*
  bytestring: -any
  test-framework: ==0.8.*
  base: -any
  unordered-containers: -any
  text: -any
  test-framework-quickcheck2: ==0.3.*
  HUnit: <1.7
  Cassava: -any
  quickcheck-instances: ! '>=0.3.12 && <0.4'
  hashable: -any
  attoparsec: -any
  scientific: -any
  QuickCheck: ==2.10.*
  vector: -any
maintainer: Taylor Fausak
synopsis: A CSV parsing and encoding library
changelog: ! "## Version 0.5.1.0\n\n * Add `FromField`/`ToField` instance for `Natural`
  (#141,#142)\n * Add `FromField`/`ToField` instances for `Scientific` (#143,#144)\n
  * Add support for modifying Generics-based instances (adding\n   `Options`, `defaultOptions`,
  `fieldLabelModifier`,\n   `genericParseRecord`, `genericToRecord`, `genericToNamedRecord`,\n
  \  `genericHeaderOrder`) (#139,#140)\n * Documentation improvements\n\n## Version
  0.5.0.0\n\n### Semantic changes\n\n * Don't unecessarily quote spaces with `QuoteMinimal`
  (#118,#122,#86)\n * Fix semantics of `foldl'` (#102)\n * Fix field error diagnostics
  being mapped to `endOfInput` in `Parser` monad. (#99)\n * Honor `encIncludeHeader`
  in incremental API (#136)\n\n### Other changes\n\n * Support GHC 8.2.1\n * Use factored-out
  `Only` package\n * Add `FromField`/`ToField` instance for `ShortText`\n * Add `MonadFail`
  and `Semigroup` instance for `Parser`\n * Add `Semigroup` instance for incremental
  CSV API `Builder` & `NamedBuilder`\n * Port to `ByteString` builder & drop dependency
  on `blaze-builder`\n\n## Version 0.4.5.1\n\n * Restore GHC 7.4 support (#124)\n\n##
  Version 0.4.5.0\n\n * Support for GHC 8.0 added; support for GHC 7.4 dropped\n\n
  * Fix defect in `Foldable(foldr)` implementation failing to skip\n   unconvertable
  records (#102)\n\n * Documentation fixes\n\n * Maintainer changed\n\n## Version
  0.4.4.0\n\n * Added record instances for larger tuples.\n\n * Support attoparsec
  0.13.\n\n * Add field instances for short bytestrings.\n\n## Version 0.4.3.0\n\n
  * Documentation overhaul with more examples.\n\n * Add Data.Csv.Builder, a low-level
  bytestring builder API.\n\n * Add a high-level builder API to Data.Csv.Incremental.\n\n
  * Generalize the default FromNamedRecord/ToNamedRecord instances.\n\n * Improved
  support for deriving instances using GHC.Generics.\n\n * Added some control over
  quoting.\n\n## Version 0.4.2.4\n\n * Support attoparsec 0.13.\n\n## Version 0.4.2.3\n\n
  * Support GHC 7.10.\n\n## Version 0.4.2.2\n\n * Support blaze-builder 0.4.\n\n *
  Make sure inlining doesn't prevent rules from firing.\n\n * Fix incorrect INLINE
  pragmas.\n\n## Version 0.4.2.1\n\n * Support deepseq-1.4.\n\n## Version 0.4.2.0\n\n
  * Minor performance improvements.\n\n * Add 8 and 9 tuple instances for From/ToRecord.\n\n
  * Support text-1.2.\n\n## Version 0.4.1.0\n\n * Ignore whitespace when converting
  numeric fields.\n\n * Accept \\r as a line terminator.\n\n * Support attoparsec-0.12.\n"
basic-deps:
  Only: ! '>=0.1 && <0.1.1'
  bytestring: ! '>=0.9.2 && <0.10.4'
  base: ! '>=4.5 && <5'
  unordered-containers: <0.3
  text: <1.3
  array: ! '>=0.4 && <0.6'
  containers: ! '>=0.4.2 && <0.6'
  hashable: <1.3
  attoparsec: ! '>=0.11.3.0 && <0.14'
  deepseq: ! '>=1.1 && <1.5'
  scientific: ! '>=0.3.4.7 && <0.4'
  bytestring-builder: ! '>=0.10.8 && <0.11'
  vector: ! '>=0.8 && <0.13'
all-versions:
- 0.5.1.0
author: Johan Tibell
latest: 0.5.1.0
description-type: markdown
description: ! "# `cassava`: A CSV parsing and encoding library [![Hackage](https://img.shields.io/hackage/v/cassava.svg)](https://hackage.haskell.org/package/cassava)
  [![Build Status](https://travis-ci.org/hvr/cassava.svg)](https://travis-ci.org/hvr/cassava)\n\n**Please
  refer to the [package description](https://hackage.haskell.org/package/cassava#description)
  for an overview of `cassava`.**\n\n## Usage example\n\nHere's the two second crash
  course in using the library. Given a CSV file with this content:\n\n```csv\nJohn
  Doe,50000\nJane Doe,60000\n```\n\nhere's how you'd process it record-by-record:\n\n```haskell\n{-#
  LANGUAGE ScopedTypeVariables #-}\n\nimport qualified Data.ByteString.Lazy as BL\nimport
  Data.Csv\nimport qualified Data.Vector as V\n\nmain :: IO ()\nmain = do\n    csvData
  <- BL.readFile \"salaries.csv\"\n    case decode NoHeader csvData of\n        Left
  err -> putStrLn err\n        Right v -> V.forM_ v $ \\ (name, salary :: Int) ->\n
  \           putStrLn $ name ++ \" earns \" ++ show salary ++ \" dollars\"\n```\n\nIf
  you want to parse a file that includes a header, like this one\n\n```csv\nname,salary\nJohn
  Doe,50000\nJane Doe,60000\n```\n\nuse [`decodeByName`](https://hackage.haskell.org/package/cassava/docs/Data-Csv.html#v:decodeByName):\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Control.Applicative\nimport qualified Data.ByteString.Lazy
  as BL\nimport Data.Csv\nimport qualified Data.Vector as V\n\ndata Person = Person\n
  \   { name   :: !String\n    , salary :: !Int\n    }\n\ninstance FromNamedRecord
  Person where\n    parseNamedRecord r = Person <$> r .: \"name\" <*> r .: \"salary\"\n\nmain
  :: IO ()\nmain = do\n    csvData <- BL.readFile \"salaries.csv\"\n    case decodeByName
  csvData of\n        Left err -> putStrLn err\n        Right (_, v) -> V.forM_ v
  $ \\ p ->\n            putStrLn $ name p ++ \" earns \" ++ show (salary p) ++ \"
  dollars\"\n```\n\nYou can find more code examples in the [`examples/` folder](https://github.com/hvr/cassava/tree/master/examples)
  as well as smaller usage examples in the [`Data.Csv` module documentation](https://hackage.haskell.org/package/cassava/docs/Data-Csv.html).\n\n##
  Project Goals for `cassava`\n\nThere's no end to what people consider CSV data.
  Most programs don't\nfollow [RFC4180](https://tools.ietf.org/html/rfc4180) so one
  has to\nmake a judgment call which contributions to accept.  Consequently, not\neverything
  gets accepted, because then we'd end up with a (slow)\ngeneral purpose parsing library.
  There are plenty of those. The goal\nis to roughly accept what the Python\n[`csv`](https://docs.python.org/3/library/csv.html)
  module accepts.\n\nThe Python `csv` module (which is implemented in C) is also considered\nthe
  base-line for performance.  Adding options (e.g. the above\nmentioned parsing \"flexibility\")
  will have to be a trade off against\nperformance. There's been complaints about
  performance in the past,\ntherefore, if in doubt performance wins over features.\n\nLast
  but not least, it's important to keep the dependency footprint\nlight, as each additional
  dependency incurs costs and risks in terms\nof additional maintenance overhead and
  loss of flexibility. So adding\na new package dependency should only be done if
  that dependency is\nknown to be a reliable package and there's a clear benefit which\noutweights
  the cost.\n\n## Further reading\n\nThe primary API documentation for `cassava` is
  its Haddock documentation which can be found at http://hackage.haskell.org/package/cassava/docs/Data-Csv.html
  \n\nBelow are listed additional recommended third-party blogposts and tutorials\n\n
  - [CSV encoding and decoding in Haskell with Cassava](https://www.stackbuilders.com/tutorials/haskell/csv-encoding-decoding/)\n"
license-name: BSD-3-Clause
