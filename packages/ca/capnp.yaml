homepage: https://github.com/zenhack/haskell-capnp
changelog-type: markdown
hash: 2e4c1c877450430ef11d0f48b9e34a7f7dfae0d82ef0d7c7ce9438bcc00c7449
test-bench-deps:
  exceptions: ^>=0.10.0
  test-framework-hunit: -any
  bytestring: ^>=0.10
  process-extras: -any
  test-framework: -any
  heredoc: -any
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2 && <2.0'
  reinterpret-cast: ^>=0.1.0
  test-framework-quickcheck2: -any
  process: -any
  data-default: -any
  HUnit: -any
  array: ^>=0.5
  capnp: -any
  quickcheck-instances: -any
  binary: -any
  mtl: ^>=2.2.2
  pretty-show: -any
  quickcheck-io: -any
  transformers: ^>=0.5.2
  deepseq: -any
  QuickCheck: -any
  resourcet: -any
  primitive: ^>=0.6.3
  vector: ^>=0.12.0
  bytes: ^>=0.15.4
  directory: -any
maintainer: ian@zenhack.net
synopsis: Cap'n Proto for Haskell
changelog: ! "\n# 0.3.0.0\n\n* Instances of some type classes are no longer generated
  for \"second\n  class\" types (i.e. types which cannot appear as stand-alone\n  definitions
  in schema files -- groups and unions).\n* `has_*` functions are now only generated
  for pointer fields.\n* Various non-functional changes in the output of the code
  generator.\n* We now generate constants for (most) pointer types; previously\n  constants
  defined in a schema would not result in any generated code\n  ([#41][issue41]).\n*
  The `set_*` functions now check if the arguments are in the same\n  message, and
  copy if need be ([#34][issue34]).\n* `MutMsg` is now an instance of `Eq`.\n* The
  `HasMessage` class from `Data.Capnp.Untyped` is now a type family,\n  rather than
  a multi-parameter type class. This improves inference and\n  removes some superfluous
  generalization.\n* The module `Data.Capnp.Pure` has been folded into `Data.Capnp`.
  If you\n  were previously using the `Text` and `Data` type aliases it exported,\n
  \ you should instead use `Text` from `Data.Text` and `ByteString` from\n  `Data.ByteString`;
  the `Text` and `Data` exported by `Data.Capnp` are\n  types from the low-level API.\n\n#
  0.2.0.0\n\n* Redesign the 'Mutable' type class's API.\n* Provide helpers for doing
  zero-copy message creation in pure code.\n* General improvements to the documentation.\n\n#
  0.1.0.0\n\n* First release; basic read & write support, serialization only.\n\n[issue41]:
  https://github.com/zenhack/haskell-capnp/issues/41\n[issue34]: https://github.com/zenhack/haskell-capnp/issues/34\n"
basic-deps:
  exceptions: ! '>=0.10.0 && <0.11'
  cereal: ^>=0.5.5
  bytestring: ==0.10.*
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2 && <2.0'
  reinterpret-cast: ! '>=0.1.0 && <0.2'
  filepath: ^>=1.4.1
  dlist: ^>=0.8.0
  data-default: ^>=0.7.1
  array: ==0.5.*
  containers: ^>=0.5.10
  capnp: -any
  wl-pprint-text: ^>=1.2
  binary: ^>=0.8.5
  utf8-string: ^>=1.0.1
  mtl: ! '>=2.2.2 && <2.3'
  data-default-instances-vector: ^>=0.0.1
  transformers: ! '>=0.5.2 && <0.6'
  cpu: ^>=0.1.2
  primitive: ! '>=0.6.3 && <0.7'
  vector: ! '>=0.12.0 && <0.13'
  bytes: ! '>=0.15.4 && <0.16'
  directory: ^>=1.3.0
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
author: Ian Denhardt
latest: '0.3.0.0'
description-type: markdown
description: ! "[![build status][ci-img]][ci]\n[![hackage][hackage-img]][hackage]\n\nA
  Haskell library for the [Cap'N Proto][1] Cerialization protocol.\n\nSerialization
  (read & write) support is mostly finished, and already\nusable, with some limitations:\n\n*
  Generated schema currently ignore type parameters ([#29][issue29]).\n* Schema which
  define custom default values for fields of pointer type\n  are rejected ([#28][issue28]).\n*
  We currently do not correctly handle decoding lists of structs from\n  non-composite
  lists ([#27][issue27]). This means that, contrary to the\n  [protocol evolution
  rules][2], it is not safe to change a field from\n  type List(T) (where T is any
  non-struct type) to a list of a struct\n  type.\n\nThere is a module `Data.Capnp.Tutorial`
  which contains an introduction\nto the library; users are *strongly* encouraged
  to read this first, as\nthe reference documentation can be bewildering without that
  context.\n\nThe API is considered unstable. It will likely see changes, for the\nsake
  of polish, consistency, etc. as well as to improve performance and\naccommodate
  more features as we add them (RPC in particular will\nprobably require changing
  some interfaces).\n\n[1]: https://capnproto.org/\n[2]: https://capnproto.org/language.html#evolving-your-protocol\n\n[issue27]:
  https://github.com/zenhack/haskell-capnp/issues/27\n[issue28]: https://github.com/zenhack/haskell-capnp/issues/28\n[issue29]:
  https://github.com/zenhack/haskell-capnp/issues/29\n\n[ci-img]: https://gitlab.com/isd/haskell-capnp/badges/master/build.svg\n[ci]:
  https://gitlab.com/isd/haskell-capnp/pipelines\n\n[hackage-img]: https://img.shields.io/hackage/v/capnp.svg\n[hackage]:
  https://hackage.haskell.org/package/capnp\n"
license-name: MIT
