homepage: https://github.com/zenhack/haskell-capnp
changelog-type: markdown
hash: a08c773286804269d00ac484801e81ee1e6eba98c9fd05b35675543ef1b1ed46
test-bench-deps:
  exceptions: ! '>=0.10.0 && <0.11'
  test-framework-hunit: -any
  bytestring: ! '>=0.10 && <0.11'
  process-extras: -any
  test-framework: -any
  heredoc: -any
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2 && <2.0'
  reinterpret-cast: ! '>=0.1.0 && <0.2'
  test-framework-quickcheck2: -any
  process: -any
  data-default: -any
  HUnit: -any
  array: ! '>=0.5 && <0.6'
  capnp: -any
  quickcheck-instances: -any
  binary: -any
  mtl: ! '>=2.2.2 && <2.3'
  pretty-show: -any
  quickcheck-io: -any
  transformers: ! '>=0.5.2 && <0.6'
  deepseq: -any
  QuickCheck: -any
  resourcet: -any
  primitive: ! '>=0.6.3 && <0.7'
  vector: ! '>=0.12.0 && <0.13'
  bytes: ! '>=0.15.4 && <0.16'
  directory: -any
maintainer: ian@zenhack.net
synopsis: Cap'n Proto for Haskell
changelog: ! '

  # 0.1.0.0


  First release; basic read & write support, serialization only.

'
basic-deps:
  exceptions: ! '>=0.10.0 && <0.11'
  cereal: ! '>=0.5.5 && <0.6'
  bytestring: ==0.10.*
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2 && <2.0'
  reinterpret-cast: ! '>=0.1.0 && <0.2'
  filepath: ! '>=1.4.1 && <1.5'
  dlist: ! '>=0.8.0 && <0.9'
  data-default: ! '>=0.7.1 && <0.8'
  array: ==0.5.*
  containers: ! '>=0.5.10 && <0.6'
  capnp: -any
  wl-pprint-text: ! '>=1.2 && <1.3'
  binary: ! '>=0.8.5 && <0.9'
  utf8-string: ! '>=1.0.1 && <1.1'
  mtl: ! '>=2.2.2 && <2.3'
  data-default-instances-vector: ! '>=0.0.1 && <0.1'
  transformers: ! '>=0.5.2 && <0.6'
  cpu: ! '>=0.1.2 && <0.2'
  primitive: ! '>=0.6.3 && <0.7'
  vector: ! '>=0.12.0 && <0.13'
  bytes: ! '>=0.15.4 && <0.16'
  directory: ! '>=1.3.0 && <1.4'
all-versions:
- '0.1.0.0'
author: Ian Denhardt
latest: '0.1.0.0'
description-type: markdown
description: ! "[![build status][ci-img]][ci]\n\nA Haskell library for the [Cap'N
  Proto][1] Cerialization protocol.\n\nSerialization (read & write) support is mostly
  finished, and already\nusable, with some limitations:\n\n* Generated schema currently
  ignore type parameters ([#29][issue29]).\n* Schema which define custom default values
  for fields of pointer type\n  are rejected ([#28][issue28]).\n* We currently do
  not correctly handle decoding lists of structs from\n  non-composite lists ([#27][issue27]).
  This means that, contrary to the\n  [protocol evolution rules][2], it is not safe
  to change a field from\n  type List(T) (where T is any non-struct type) to a list
  of a struct\n  type.\n\nThere is a module `Data.Capnp.Tutorial` which contains an
  introduction\nto the library; users are *strongly* encouraged to read this first,
  as\nthe reference documentation can be bewildering without that context.\n\nThe
  API is considered unstable. It will likely see changes, for the\nsake of polish,
  consistency, etc. as well as to improve performance and\naccommodate more features
  as we add them (RPC in particular will\nprobably require changing some interfaces).\n\n[1]:
  https://capnproto.org/\n[2]: https://capnproto.org/language.html#evolving-your-protocol\n\n[issue27]:
  https://github.com/zenhack/haskell-capnp/issues/27\n[issue28]: https://github.com/zenhack/haskell-capnp/issues/28\n[issue29]:
  https://github.com/zenhack/haskell-capnp/issues/29\n\n[ci-img]: https://gitlab.com/isd/haskell-capnp/badges/master/build.svg\n[ci]:
  https://gitlab.com/isd/haskell-capnp/pipelines\n"
license-name: MIT
