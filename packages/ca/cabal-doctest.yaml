homepage: https://github.com/phadej/cabal-doctest
changelog-type: markdown
hash: 587fcae1ee9948b270f603bbcd660a964256e9a5c30eea34758830716120c57a
test-bench-deps: {}
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: A Setup.hs helper for doctests running
changelog: ! "# 1.0.3 -- 2017-11-02\n\n* Add an explicit `Prelude` import to `Build_doctests`\n\n#
  1.0.2 -- 2017-05-16\n\n* Add `defaultMainAutoconfWithDoctests` and `addDoctestsUserHook`.\n\n*
  Add support for `.hsc` and other preprocessed files\n  ([#8](https://github.com/phadej/cabal-doctest/issues/8))\n\n*
  Add support for `x-doctest-source-dirs` and `x-doctest-modules`.\n\n# 1.0.1 -- 2017-05-05\n\n*
  Add support for `x-doctest-options` cabal-file field\n\n* Proper support for GHC-8.2.1
  & Cabal-2.0.0.0\n\n* Add support to `default-extensions` in library.\n\n# 1  --
  2017-01-31\n\n* First version. Released on an unsuspecting world.\n"
basic-deps:
  Cabal: ! '>=1.10 && <2.1'
  base: ! '>=4.3 && <4.11'
  filepath: -any
  directory: -any
all-versions:
- '1'
- '1.0.1'
- '1.0.2'
- '1.0.3'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '1.0.3'
description-type: markdown
description: ! "cabal-doctest\n=============\n\n[![Hackage](https://img.shields.io/hackage/v/cabal-doctest.svg)](https://hackage.haskell.org/package/cabal-doctest)
  [![Build Status](https://travis-ci.org/phadej/cabal-doctest.svg?branch=master)](https://travis-ci.org/phadej/cabal-doctest)\n\nA
  `Setup.hs` helper for running `doctests`.\n\nExample Usage\n-------------\n\nSee
  [https://github.com/phadej/cabal-doctest/tree/master/example] for an\nexample package.
  (Note that the example requires `Cabal-1.24` or later, but\nyou can relax this bound
  safely, although running doctests won't be supported\non versions of `Cabal` older
  than 1.24.)\n\nTo use this library in your `Setup.hs`, you should specify a `custom-setup`\nsection
  in your `.cabal` file. For example:\n\n```\ncustom-setup\n setup-depends:\n   base
  >= 4 && <5,\n   Cabal,\n   cabal-doctest >= 1 && <1.1\n```\n\n/Note:/ `Cabal` dependency
  is needed because of\n[Cabal/GH-4288](https://github.com/haskell/cabal/issues/4288)
  bug.\n\nYou'll also need to specify `build-type: Custom` at the top of the `.cabal`\nfile.
  Now put this into your `Setup.hs` file:\n\n```haskell\nmodule Main where\n\nimport
  Distribution.Extra.Doctest (defaultMainWithDoctests)\n\nmain :: IO ()\nmain = defaultMainWithDoctests
  \"doctests\"\n```\n\nWhen you build your project, this `Setup` will generate a `Build_doctests`\nmodule.
  To use it in a testsuite, simply do this:\n\n```haskell\nmodule Main where\n\nimport
  Build_doctests (flags, pkgs, module_sources)\nimport Data.Foldable (traverse_)\nimport
  Test.DocTest (doctest)\n\nmain :: IO ()\nmain = do\n    traverse_ putStrLn args
  -- optionally print arguments\n    doctest args\n  where\n    args = flags ++ pkgs
  ++ module_sources\n```\n\nAdditional configuration\n------------------------\n\nThe
  `cabal-doctest` based `Setup.hs` supports few extensions fields\nin `pkg.cabal`
  files to customise the `doctest` runner behaviour, without\ncustomising the default
  `doctest.hs`.\n\n```\ntest-suite doctests:\n  if impl(ghc >= 8.0)\n    x-doctest-options:
  -fdiagnostics-color=never\n  x-doctest-source-dirs: test\n  x-doctest-modules: Servant.Utils.LinksSpec\n\n
  \ ...\n```\n\n* `x-doctest-options` Additional arguments passed into `doctest` command.\n*
  `x-doctest-modules` Additional modules to `doctest`. May be useful if you\n  have
  `doctest` in test or executables (i.e not default library complonent).\n* `x-doctest-src-dirs`
  Additional source directories to look for the modules.\n\nNotes\n-----\n\n* Recent
  versions of `Cabal` (for instance, 2.0) can choose to build a\n  package's `doctest`
  test suite _before_ the library. However, in order for\n  `cabal-doctest` to work
  correctly, the library _must_ be built first, as\n  `doctest` relies on the presence
  of generated files that are only created\n  when the library is built. See\n  [#19](https://github.com/phadej/cabal-doctest/issues/19).\n\n
  \ A hacky workaround for this problem is to depend on the library itself in a\n
  \ `doctests` test suite. See\n  [the example's .cabal file](https://github.com/phadej/cabal-doctest/blob/master/example/example.cabal)\n
  \ for a demonstration. (This assumes that the test suite has the ability to\n  read
  build artifacts from the library, a separate build component. In\n  practice, this
  assumption holds, which is why this library works at all.)\n\n* `custom-setup` section
  is supported starting from `cabal-install-1.24`.\n  For older `cabal-install's`
  you have to install custom setup dependencies\n  manually.\n\n* `stack` respects
  `custom-setup` starting from version 1.3.3. Before that\n  you have to use `explicit-setup-deps`
  setting in your `stack.yaml`.\n  ([stack/GH-2094](https://github.com/commercialhaskell/stack/issues/2094))\n\n*
  There is [an issue in the Cabal issue tracker](https://github.com/haskell/cabal/issues/2327)\n
  \ about adding `cabal doctest` command. After that command is implemented,\n  this
  library will be deprecated.\n\n* You can use `x-doctest-options` field in `test-suite
  doctests` to\n  pass additional flags to the `doctest`.\n\n* For `build-type: Configure`
  packages, you can use\n  `defaultMainAutoconfWithDoctests` function to make custom
  `Setup.hs` script.\n\n* If you use the default `.` in `hs-source-dirs`, then running
  `doctests`\n  might fail with weird errors (ambigious module errors). Workaround
  is\n  to move sources under `src/` or some non-top-level directory.\n\n* `extensions:`
  field isn't supported. Upgrade your `.cabal` file to use at least\n  `cabal-version:
  >= 1.10` and use `default-extensions` or `other-extensions`.\n\n* If you use QuickCheck
  properties (`prop>`) in your doctests,\n  the `test-suite doctest` should depend
  on `QuickCheck` and `template-haskell`.\n  This is a little HACK: These dependencies
  aren't needed to build the\n  `doctests` test-suite executable.  However, as we
  let `Cabal` resolve\n  dependencies, we can pass the resolved (and installed!) package
  identifiers to\n  to the `doctest` command.  This way, `QuickCheck` and `template-haskell`
  are\n  available to `doctest`, otherwise you'll get errors like:\n\n```\n    Variable
  not in scope:\n      mkName\n        :: [Char]\n           -> template-haskell-2.11.1.0:Language.Haskell.TH.Syntax.Name\n```\n\nor\n\n```\n
  \   Variable not in scope:\n      polyQuickCheck\n        :: Language.Haskell.TH.Syntax.Name
  -> Language.Haskell.TH.Lib.ExpQ\n```\n\nCopyright\n---------\n\nCopyright 2017 Oleg
  Grenrus.\n\nAvailable under the BSD 3-clause license.\n"
license-name: BSD3
