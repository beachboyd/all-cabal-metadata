homepage: http://github.com/rampion/Cascade
changelog-type: ''
hash: 994435ab8d057b201504384bdc31f690b248a769d10c0eba129f234d314dac87
test-bench-deps: {}
maintainer: noah.easterly@gmail.com
synopsis: Playing with reified categorical composition
changelog: ''
basic-deps:
  void: ! '>=0.6'
  base: ! '>=4.7 && <4.8'
  comonad: ! '>=4.2 && <4.3'
  ghc-prim: ! '>=0.3 && <0.4'
  mtl: ! '>=2.2 && <2.3'
all-versions:
- 0.1.0.0
author: Noah Luck Easterly
latest: 0.1.0.0
description-type: markdown
description: ! "<b>`Cascade`</b>s are collections of composable functions (e.g. `a
  -> b, b -> c, ... , y -> z`) where the intermediate types are stored in a type level
  list (e.g. `Cascade [a,b,c,...,y,z]`).\n\nFor example, consider these `Cascade`s:\n\n```haskell\nfc
  :: Cascade '[String, Int, Double, Double]\nfc =  read          :>>>\n      fromIntegral
  \ :>>>\n      (1/)          :>>> Done\n\ngc :: Cascade '[String, Int, Double, Double]\ngc
  =  length        :>>>\n      (2^)          :>>>\n      negate        :>>> Done\n```\n\nWe
  can convert a cascade into a function easily enough:\n\n```haskell\nλ :m +Cascade.Examples
  Cascade.Operators\nλ fc # \"5\"\n0.2\nλ gc # \"20\"\n-4.0\n```\n\nBut that's not
  very inspiring. The real question, [as Christian Conkle put it](http://stackoverflow.com/questions/26593237/what-would-the-type-of-a-list-of-cascading-functions-be#comment41802812_26593534),
  is \"what does such a collection give you over function composition?\"\n\nBecause
  none of the type information has been lost, we can still extract each of the functions
  that went into the `Cascade` using simple pattern matching. This opens the door
  to replacing parts of a cascade, or indexing into the cascade with type-level naturals.\n\nIt
  also lets us do something silly like mix and match two different cascades:\n\n```haskell\nλ
  zigzag fc gc # \"3\" -- read >>> (2^) >>> (1/)\n0.125\nλ zigzag gc fc # \"123456789\"
  -- length >>> fromIntegral >>> negate\n-9.0\n```\n\nMore seriously, we can record
  the intermediate results of each `Cascade` using a `Product` type as output:\n\n```haskell\nλ
  :m +Cascade.Product\nλ record fc # \"5\" *: None\n0.2 *: 5.0 *: 5 *: \"5\" *: None\nλ
  record gc # \"5\" *: None\n-2.0 *: 2.0 *: 1 *: \"5\" *: None\n```\n\nOr I can resume
  the computation at some later point rather that the first function in the `Cascade`
  using a `Sum` type as input:\n\n```haskell\nλ :m +Cascade.Sum\nλ resume fc # (there.there.here)
  0.2\nhere 5.0\nλ resume gc # (there.here) 0\nhere (-1.0)\n```\n\nOr we could do
  both:\n\n```haskell\nλ resume (record fc) # (there.here) (17 *: \"foo\" *: None)\nhere
  (5.8823529411764705e-2 *: 17.0 *: 17 *: \"foo\" *: None)\nλ record (resume fc) #
  (there . there $ here 0.25) *: None\nhere 4.0 *: here 0.25 *: (there.here $ 0.25)
  *: (there.there.here $ 0.25) *: None\n```\n\nBut what's nice is that this generalizes
  nicely to categorical composition, so we can do the same with \nany category, including
  the `Kleisli` and `Cokleisli` categories for `Monad`s and `Comonad`s, respectively:\n\n```haskell\n--
  some example monadic cascades\nmc, nc :: CascadeM IO '[ String, (), String, String,
  () ]\nmc =  putStr                  >=>:\n      const getLine           >=>:\n      return
  . map toUpper    >=>:\n      putStrLn                >=>: Done\nnc =  setEnv \"foo\"
  \           >=>: \n      const (return \"foo\")    >=>:\n      getEnv                  >=>:\n
  \     print . length          >=>: Done\n```\n\n```haskell\n-- some example comonadic
  cascades\nwc, vc :: CascadeW ((,) Char) '[ Int, Char, Int, String ]\nwc =  fst                       =>=:\n
  \     fromEnum . snd            =>=:\n      uncurry (flip replicate)  =>=: Done\nvc
  =  toEnum . snd              =>=:\n      const 5                   =>=:\n      show
  \                     =>=: Done\n```\n\nFlipping back to ghci:\n\n```haskell\nλ
  mc #~ \"? \"\n? i like cheese\nI LIKE CHEESE\nλ nc #~ \"? \"\n2\nλ wc ~# ('.', 5)\n\"..............................................\"\nλ
  vc ~# ('x', 9)\n\"('x',5)\"\nλ zigzag mc nc #~ \"hi!\"\nhi!3\nλ zigzag nc mc #~
  \"hello.\"\nUSER\nrampion\nλ zigzag wc vc ~# ('.', 3)\n\".....\"\nλ zigzag vc wc
  ~# ('a', 9)\n\"('a',9)\"\n```\n\n`resume` works on both comonads and monads:\n\n```haskell\nλ
  resumeM nc #~ (there.there.here) \"USER\"\n7\nhere ()\nλ toEither $ resumeW vc #
  (There . There . Here) ('c',9)\nLeft ('c',\"('c',9)\")\n```\n\n`record` works on
  comonads, but I've been having some issues getting it to work the way I want on
  monads (see `Cascade.Product.hs` for more).\n\nSo, instead of continue to wrestle
  the type system, for now, I just implemented a debugger that uses `Cascade`s,\nso
  in addition running a monadic `Cascade` you can debug it.\n\n```haskell\n-- run
  the debugger for the mc cascade all the way to the end\nrundmc :: IO (DebuggerM
  IO '[String, String, (), [Char]] () '[])\nrundmc = debugM >>> use \"walk this way\\n>
  \" >=> step >=> step >=> step $ mc\n```\n\nDropping into ghci:\n\n```haskell\nλ
  d <- rundmc\nwalk this way\n> talk this way\nTALK THIS WAY\n```\n\nWe can see the
  current state of the debugger:\n\n```haskell\nλ d\nEnd   { given = \"TALK THIS WAY\",
  returned = () }\n```\n\nthe full stack trace\n\n```haskell\nλ printHistory d\nEnd
  \  { given = \"TALK THIS WAY\", returned = () }\nBreak { given = \"talk this way\",
  returned = \"TALK THIS WAY\" }\nBreak { given = (), returned = \"talk this way\"
  }\nBreak { given = \"walk this way\\n> \", returned = () }\nBegin\n```\n\nback up,
  step forward:\n\n```haskell\nλ back d\nBreak { given = \"talk this way\", returned
  = \"TALK THIS WAY\" }\nλ back it\nBreak { given = (), returned = \"talk this way\"
  }\nλ step it\nBreak { given = \"talk this way\", returned = \"TALK THIS WAY\" }\nλ
  step it\nTALK THIS WAY\nEnd   { given = \"TALK THIS WAY\", returned = () }\n```\n\n(Note
  that when we step forward, the monadic computation reruns)\n\nWe can also use a
  different input than the default at the current stage:\n\n```haskell\nλ back d\nBreak
  { given = \"talk this way\", returned = \"TALK THIS WAY\" }\nλ d' <- use \"(talk
  this way)\" it\n(talk this way)\nλ printHistory d'\nEnd   { given = \"(talk this
  way)\", returned = () }\nBreak { given = \"talk this way\", returned = \"TALK THIS
  WAY\" }\nBreak { given = (), returned = \"talk this way\" }\nBreak { given = \"walk
  this way\\n> \", returned = () }\nBegin\n```\n\nAnd since the debuggers are normal
  immutable haskell values, we can use both `d` and `d'` without errors.\n\n---\n\n`Cascade`s
  are still very limited. They're linear, and of a set length. They don't let you
  hook into functions that call themselves recursively, or functions that have computation
  paths better represented by trees or lattices.\n\nBut that doesn't mean those are
  necessarily impossible to model, either. For example, simple recursion is fairly
  easily captured with only a slight modification to `Cascade`\n\n```haskell\ndata
  CascadeR (ts :: [*]) where\n  (:>>>)  :: x -> y -> CascadeR (y ': zs) -> CascadeR
  (x ': y ': zs)\n  Fix     :: ((x -> y) -> x -> y) -> CascadeR (y ': zs) -> CascadeR
  (x ': y ': zs)\n  Done    :: CascadeR '[t]\n```\n\n"
license-name: LicenseRef-PublicDomain
