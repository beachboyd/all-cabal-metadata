homepage: http://github.com/ozataman/cassy
changelog-type: ''
hash: b701cf7e801b373f6f17b1a092838d09de7ddf99e7cdd245834ea0727da38edb
test-bench-deps:
  test-framework-hunit: ! '>=0.2.7'
  bytestring: -any
  test-framework: ! '>=0.6'
  base: ! '>=4 && <5'
  time: -any
  text: -any
  cassy: -any
  test-framework-quickcheck2: ! '>=0.2.12.2'
  network: -any
  HUnit: -any
  containers: -any
  cassandra-thrift: -any
  Thrift: -any
  QuickCheck: -any
  derive: -any
maintainer: ozataman@gmail.com
synopsis: A high level driver for the Cassandra datastore
changelog: ''
basic-deps:
  exceptions: -any
  cereal: -any
  bytestring: -any
  stm: -any
  base: ! '>=4 && <5'
  time: -any
  text: -any
  retry: ! '>=0.5 && <0.6'
  syb: -any
  resource-pool: -any
  network: -any
  async: -any
  conduit: ! '>=1.1 && <1.2'
  data-default: -any
  containers: -any
  safecopy: -any
  binary: -any
  cassandra-thrift: ! '>=0.8'
  mtl: -any
  Thrift: ! '>=0.6'
  transformers-base: -any
  attoparsec: ! '>=0.10 && <0.13'
  errors: -any
  aeson: -any
all-versions:
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.2
- '0.4'
- 0.4.0.1
- 0.5.1.0
- 0.5.2
- '0.6'
- 0.7.1
author: Ozgun Ataman
latest: 0.7.1
description-type: haddock
description: ! 'The objective is to completely isolate away the thrift layer, providing

  a more idiomatic and naruall Haskell experience working with Cassandra. Be sure

  to check out the README on Github for some more explanation and

  Release Notes, which is helpful in talking about what this library

  can do.


  Certain parts of the API was inspired by pycassa (Python client) and

  hscassandra (on Hackage).


  Please see the Github repository for more detailed documentation,

  release notes and examples.


  A brief explanation of modules:


  * /Database.Cassandra.Basic/: Contains a low level, simple

  implementation of Cassandra interaction using the thrift API

  underneath.


  * /Database.Cassandra.Marshall/: Intended to be the main high level

  module that you should use, Marshall allows you to pick the

  serialization strategy you would like to use at each function

  call. We recommend using ''casSafeCopy'' due to its support for

  evolving data types, although casJSON maybe another popular

  choice.


  * /Database.Cassandra.JSON/: (Now deprecated; use Marshall instead)

  A higher level API that operates on values with ToJSON and

  FromJSON isntances from the /aeson/ library. This module has in

  part been inspired by Bryan O\''Sullivan\''s /riak/ client for

  Haskell.


  * /Database.Cassandra.Pool/: Handles a /pool/ of connections to

  multiple servers in a cluster, splitting the load among them.


  * /Database.Cassandra.Pack/: Handles column types that Cassandra

  recognizes and adds support for Composite Columns.


  * /Database.Cassandra.Types/: A common set of types used everywhere.


  Potential TODOs include:


  * Support for counters and batch mutators


  * Support for database admin operations'
license-name: BSD-3-Clause
