homepage: http://www.haskell.org/cabal/
changelog-type: ''
hash: 91871e651717687a670ec093ad588da6f002a9aab1598294af4bfc784b48b469
test-bench-deps: {}
maintainer: Andreas Abel <andreas.abel@ifi.lmu.de>
synopsis: Temporary version of cabal-install for ghc-7.4
changelog: ''
basic-deps:
  unix: ! '>=1.0 && <2.6'
  Cabal: ! '>=1.10.1 && <1.15'
  base: (>=3 && <5) && >=2.0 && <2.2
  time: ! '>=1.1 && <1.5'
  filepath: ! '>=1.0 && <1.4'
  process: ! '>=1 && <1.2'
  network: ! '>=1 && <3'
  array: ! '>=0.1 && <0.5'
  containers: ! '>=0.1 && <0.5'
  old-time: ! '>=1 && <1.2'
  zlib: ! '>=0.4 && <0.6'
  HTTP: ! '>=4000.0.2 && <4001'
  random: ! '>=1 && <1.1'
  pretty: ! '>=1 && <1.2'
  directory: ! '>=1 && <1.2'
all-versions:
- 0.10.4
author: ! 'Lemmih <lemmih@gmail.com>

  Paolo Martini <paolo@nemail.it>

  Bjorn Bringert <bjorn@bringert.net>

  Isaac Potoczny-Jones <ijones@syntaxpolice.org>

  Duncan Coutts <duncan@community.haskell.org>'
latest: 0.10.4
description-type: text
description: ! "The cabal-install package\n=========================\n\n[Cabal home
  page](http://www.haskell.org/cabal/)\n\nThe `cabal-install` package provides a command
  line tool called `cabal`. The\ntool uses the `Cabal` library and provides a convenient
  user interface to the\nCabal/Hackage package build and distribution system. It can
  build and install\nboth local and remote packages, including dependencies.\n\n\nInstallation
  instructions for the cabal-install command line tool\n=================================================================\n\nThe
  `cabal-install` package requires a number of other packages, most of which\ncome
  with a standard ghc installation. It requires the `network` package, which\nis sometimes
  packaged separately by Linux distributions, for example on\ndebian or ubuntu it
  is in \"libghc6-network-dev\".\n\nIt requires a few other Haskell packages that
  are not always installed:\n\n * Cabal  (version 1.10 or later)\n * HTTP   (version
  4000 or later)\n * zlib   (version 0.4  or later)\n\nAll of these are available
  from [Hackage](http://hackage.haskell.org).\n\nNote that on some Unix systems you
  may need to install an additional zlib\ndevelopment package using your system package
  manager, for example on\ndebian or ubuntu it is in \"zlib1g-dev\". It is needed
  is because the\nHaskell zlib package uses the system zlib C library and header files.\n\nThe
  `cabal-install` package is now part of the Haskell Platform so you do not\nusually
  need to install it separately. However if you are starting from a\nminimal ghc installation
  then you need to install `cabal-install` manually.\nSince it is just an ordinary
  Cabal package it can be built in the standard\nway, but to make it a bit easier
  we have partly automated the process:\n\n\nQuickstart on Unix systems\n--------------------------\n\nAs
  a convenience for users on Unix systems there is a `bootstrap.sh` script\nwhich
  will download and install each of the dependencies in turn.\n\n    $ ./bootstrap.sh\n\nIt
  will download and install the above three dependencies. The script will\ninstall
  the library packages into `$HOME/.cabal/` and the `cabal` program will\nbe installed
  into `$HOME/.cabal/bin/`.\n\nYou then have two choices:\n\n * put `$HOME/.cabal/bin`
  on your `$PATH`\n * move the `cabal` program somewhere that is on your `$PATH`\n\nThe
  next thing to do is to get the latest list of packages with:\n\n    $ cabal update\n\nThis
  will also create a default config file (if it does not already echo exist)\nat `$HOME/.cabal/config`\n\nBy
  default cabal will install programs to `$HOME/.cabal/bin`. If you do not\nwant to
  add this directory to your `$PATH` then you can change the setting in\nthe config
  file, for example you could use:\n\n    symlink-bindir: $HOME/bin\n\n\nQuickstart
  on Windows systems\n-----------------------------\n\nFor Windows users we provide
  a pre-compiled [cabal.exe] program. Just download\nit and put it somewhere on your
  `%PATH%`, for example\n`C:\\Program Files\\Haskell\\bin`.\n\n[cabal.exe]: http://haskell.org/cabal/release/cabal-install-latest/cabal.exe\n\nThe
  next thing to do is to get the latest list of packages with\n\n    cabal update\n\nThis
  will also create a default config file (if it does not already echo exist)\nat `C:\\Documents
  and Settings\\username\\Application Data\\cabal\\config`\n\n\nUsing cabal-install\n===================\n\nThere
  are two sets of commands: commands for working with a local project build\ntree
  and ones for working with distributed released packages from hackage.\n\nFor a list
  of the full set of commands and the flags for each command see\n\n    $ cabal --help\n\n\nCommands
  for developers for local build trees\n---------------------------------------------\n\nThe
  commands for local project build trees are almost exactly the same as the\n`runghc
  Setup` command line interface that many people are already familiar\nwith. In particular
  there are the commands\n\n    cabal configure\n    cabal build\n    cabal haddock\n
  \   cabal clean\n    cabal sdist\n\nThe `install` command is somewhat different.
  It is an all-in-one operation. If\nyou run\n\n    $ cabal install\n\nin your build
  tree it will configure, build and install. It takes all the flags\nthat `configure`
  takes such as `--global` and `--prefix`.\n\nIn addition, if any dependencies are
  not installed it will download and install\nthem. If can also rebuild packages to
  ensure a consistent set of dependencies.\n\n\nCommands for released hackage packages\n--------------------------------------\n\n
  \   $ cabal update\n\nThis command gets the latest list of packages from the hackage
  server.\nCurrently this command has to be run manually occasionally, in particular
  if\nyou want to install a newly released package. \n\n\n    $ cabal install xmonad\n\nThis
  is the eponymous command. It installs one or more named packages (and all\ntheir
  dependencies) from hackage.\n\nBy default it installs the latest available version
  however you can optionally\nspecify exact versions or version ranges. For example
  `cabal install alex-2.2`\nor `cabal install parsec < 3`.\n\n    $ cabal upgrade
  xmonad\n\nThis is a variation on the `install` command. Both mean to install the
  latest\nversion, the only difference is in the treatment of dependencies. The `install`\ncommand
  tries to use existing installed versions of dependent packages while\nthe `upgrade`
  command tries to upgrade all the dependencies too.\n\n    $ cabal list xml\n\nThis
  does a search of the installed and available packages. It does a\ncase-insensitive
  substring match on the package name.\n"
license-name: BSD-3-Clause
