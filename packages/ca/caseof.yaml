homepage: https://github.com/chrisdone/caseof#readme
changelog-type: ''
hash: 8e77189b88e003adb4b2e4f5fbf9bbaac703d0b0ceb9bf9ec7b3538afe24eebd
test-bench-deps: {}
maintainer: chrisdone@gmail.com
synopsis: Combinators for casing on constructors
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  template-haskell: -any
all-versions:
- 0.0.0
- 0.0.1
author: Chris Done
latest: 0.0.1
description-type: markdown
description: ! "# caseof\n\nA simple way to query constructors, like cases but slightly
  more\nconcise.\n\nPrisms from the lens package can also manage this, but this is
  a bit\nsimpler.\n\nAimed at sum types with many constructors:\n\n``` haskell\ndata
  Wiggle = Woo Int Char | Wibble Int deriving Show\n```\n\nThere is a case predicate:\n\n```
  haskell\n> $(isCaseOf 'Woo) (Woo 5 'a')\nTrue\n```\n\nThere is a `Maybe`-based matcher:\n\n```
  haskell\n> $(maybeCaseOf 'Woo) (Woo 1 'a')\nJust (1,'a')\n```\n\nThere is a \"map\"
  over a constructor:\n\n``` haskell\n> $(mapCaseOf 'Left) succ (Left 3)\nLeft 4\n```\n\nThere
  is a combinator which calls your function with n arguments, or\npasses the whole
  value to an \"else\" clause.\n\n``` haskell\n> $(caseOf 'Woo) (\\x y -> show x ++
  show y) (const \"\") (Wibble 5)\n\"\"\n```\n\n## Use in your project\n\nIn your
  stack.yaml, put:\n\n```\nextra-deps:\n- git: https://github.com/chrisdone/caseof.git\n
  \ commit: 9a7f6bb\n```\n"
license-name: BSD-3-Clause
