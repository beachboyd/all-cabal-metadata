homepage: https://github.com/domdere/cassava-conduit
changelog-type: markdown
hash: b50cb990ad4288f97390741f9c9cc85ec1032002bc206eef1e5c23fb394259e9
test-bench-deps:
  bytestring: ==0.10.*
  base: ! '>4 && <5'
  text: ==1.2.*
  criterion: ! '>=0.8'
  conduit: ==1.3.*
  cassava: ==0.5.*
  cassava-conduit: -any
  QuickCheck: ==2.12.*
maintainer: Dom De Re
synopsis: Conduit interface for cassava package
changelog: ! "# 0.5.x\n\n## 0.4.0.2 -> 0.5.0\n\n- `EitherT` -> `ExceptT`\n\n# 0.4.x\n\n##
  0.4.0.1 -> 0.4.0.2\n\n- Bumped `conduit` to `1.3.*` (from `1.2.*`)\n- The `conduit-extra`
  dep was unecessary\n\n## 0.3.5.1 -> 0.4.0.0\n\n`cassava` was bumped from `0.4.*`
  to `0.5.*`.\n\nThere were some semantic changes going from cassava 0.4.* -> 0.5.*,
  see here\n\nBut I don't think they muddle with any of the explicit cassava-conduit
  semantics:\n\n- `QuoteMinimal` semantics are not defined by `cassava-conduit`, so
  it will change behaviour, but \n- `cassava-conduit` won't compensate for it (hence
  the bump from `0.3` to `0.4`).\n- It doesn't use `foldl'`\n- cassava-conduit doesn't
  use `encodeByNamedWith` so the `encIncludeHeader` flag shouldn't have any effect.\n\n#
  0.3.x\n\n## 0.2.2 -> 0.3.0\n\nSome new error types, and error contain `T.Text` and
  not `String` now\n\n``` Haskell\ndata CsvParseError =\n        CsvParseError BS.ByteString
  T.Text\n    |   IncrementalError T.Text\n        deriving (Show, Eq)\n\n-- | When
  you want to include errors in the stream, this error type represents errors that
  halt the stream.\n-- They do not appear inside the conduit and will instead get
  returned from running the conduit.\n--\ndata CsvStreamHaltParseError = HaltingCsvParseError
  BS.ByteString T.Text -- ^ the remaining bytestring that was read in but not parsed
  yet, and the stringy error msg describing the fail.\n    deriving (Show, Eq)\n\n--
  | When you want to include errors in the stream, these are the errors that can be
  included in the stream,\n-- they are usually problems restricted to individual records,
  and streaming can resume from the next record\n-- you just have to decide on something
  sensible to do with the per record errors.\n--\ndata CsvStreamRecordParseError =
  CsvStreamRecordParseError T.Text deriving (Show, Eq) -- ^ The stringy error describing
  why this record could not be parsed.\n```\n\nNew error types are to separate out
  errors that stop streaming (and hence imply there are valid records that might be
  omitted) and errors that can be skipped, allowing valid records after to be processed...\n\n```
  Haskell\n-- |\n-- Same as `fromCsv` but allows for errors to be handled in the pipeline
  instead\n--\nfromCsvStreamError :: (FromRecord a, MonadError e m) => DecodeOptions
  -> HasHeader -> (CsvStreamHaltParseError -> e) -> Conduit BS.ByteString m (Either
  CsvStreamRecordParseError a)\nfromCsvStreamError opts h f = {-# SCC fromCsvStreamError_p
  #-} streamParser f $ decodeWith opts h\n\n-- |\n-- Like `fromNamedCsvStream` but
  allows for errors to be handled in the pipeline itself.\n--\nfromNamedCsvStreamError
  :: (FromNamedRecord a, MonadError e m) => DecodeOptions -> (CsvStreamHaltParseError
  -> e) -> Conduit BS.ByteString m (Either CsvStreamRecordParseError a)\nfromNamedCsvStreamError
  opts f = {-# SCC fromCsvStreamError_p #-} streamHeaderParser f $ decodeByNameWith
  opts\n```\n\n# 0.2.x\n\n## 0.1.0 -> 0.2.0\n\n``` Haskell\nfromCsvLiftError :: (FromRecord
  a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions -> HasHeader -> Conduit
  BS.ByteString m a\nfromNamedCsvLiftError :: (FromNamedRecord a, MonadError e m)
  => (CsvParseError -> e) -> DecodeOptions -> Conduit BS.ByteString m a\n```\n\n#
  0.1.x\n\n## 0.0.1 -> 0.1.0\n\n``` Haskell\nfromNamedCsv :: (Show a, Monad m, FromNamedRecord
  a, MonadError CsvParseError m) => DecodeOptions -> Conduit BS.ByteString m a\nfromNamedCsvStreamError
  :: (Monad m, FromNamedRecord a) => DecodeOptions -> Conduit BS.ByteString m (Either
  CsvParseError a)\n```\n"
basic-deps:
  bytestring: ==0.10.*
  base: <5 && >=4
  text: ==1.2.*
  conduit: ==1.3.*
  array: -any
  containers: -any
  cassava: ==0.5.*
  bifunctors: ! '>=4.2 && <6'
  mtl: ==2.2.*
all-versions:
- '0.0.1'
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.5.1'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.5.0'
- '0.5.1'
author: Dom De Re
latest: '0.5.1'
description-type: markdown
description: ! "# cassava-conduit [![Build Status](https://img.shields.io/travis/domdere/cassava-conduit.svg?style=flat)](https://travis-ci.org/domdere/cassava-conduit)
  [![Hackage](https://img.shields.io/hackage/v/cassava-conduit.svg?style=flat)](https://hackage.haskell.org/package/cassava-conduit)\n\nConduit
  interface for cassava package\n\nStreaming to CSV is not 100% complete at this stage,
  and doesn't support encoding to CSV with a header yet\n\n## Example Usage\n\n###
  The examples project\n\nThere is a project containing some examples of the usage,
  but the gist is here:\n\n``` Haskell\n\nimport Data.Csv\nimport Data.Conduit\nimport
  Data.Csv.Conduit\n\ndata InputRecord = ...\n\ninstance FromRecord InputRecord where\n
  \   ...\n\ndata OutputRecord = ...\n\ninstance ToRecord OutputRecord where\n    ...\n\ndecodeOpts
  :: Word8 -> DecodeOptions\n\nencodeOpts :: Word8 -> EncodeOptions\n\nprocessInput
  :: InputRecord -> OutputRecord\n\n-- |\n--  A Conduit pipeline that streams from
  '../exampledata/sampleinput.psv', decodes it from a pipe seperated format,\n--  processes
  it with 'processInput' and the encodes it to pipe seperated format and streams it
  out to '../exampledata/sampleoutput.psv'\n--  The first time it encounters a parse
  error, it will stop streaming and return the error, dropping any decoded records
  that came through in that batch also...\n--\nconduitPipeline :: (MonadError CsvParseError
  m, MonadResource m) => m ()\nconduitPipeline = sourceFile \"../exampledata/sampleinput.psv\"
  $$ fromCsv (decodeOpts $ fromIntegral $ ord '|') HasHeader =$= map processInput
  =$= toCsv (encodeOpts $ fromIntegral $ ord '|') =$= sinkFile \"../exampledata/sampleoutput.psv\"\n\nmain
  :: IO ()\nmain = do\n    res <- runEitherT $ bimapEitherT showError id $ runResourceT
  conduitPipeline\n    either putStrLn return res\n```\n\n#### Building the examples
  project\n\n```\n$ cd examples\n$ cabal sandbox init\n$ cabal sandbox add-source
  ../\n$ cabal install --only-dependencies\n$ cabal build\n```\n\n## Building the
  project\n\n``` Shell\n./mafia build\n```\n\n## Running Unit Tests\n\n``` Shell\n./mafia
  test\n```\n"
license-name: BSD3
