homepage: https://github.com/guillaumecherel/cached#readme
changelog-type: markdown
hash: 50edd08b356f5339f0d975011a56ef9acc3f91c9baa586f7ae45e2fd70d3d8a8
test-bench-deps:
  shake: ! '>=0.16.4 && <0.18'
  quickcheck-assertions: ! '>=0.3.0 && <0.4'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.3 && <1.3'
  cached: -any
  filepath: ! '>=1.4.2 && <1.5'
  doctest: ! '>=0.16.0 && <0.17'
  protolude: ! '>=0.2.2 && <0.3'
  containers: ! '>=0.5.10 && <0.7'
  QuickCheck: ! '>=2.11.3 && <2.13'
  directory: ! '>=1.3.1 && <1.4'
maintainer: guillaume.cherel@iscpif.fr
synopsis: Cache values to disk.
changelog: |
  # Changelog for cached

  ## Unreleased changes
basic-deps:
  shake: ! '>=0.16.4 && <0.18'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.3 && <1.3'
  protolude: ! '>=0.2.2 && <0.3'
  containers: ! '>=0.5.10 && <0.7'
all-versions:
- 0.1.0.0
author: Guillaume ChÃ©rel
latest: 0.1.0.0
description-type: markdown
description: |
  # cached

  Cache values to disk.

  The module `Data.Cached` lets you cache values to disk to avoid re-running
  (potentially long) computations between consecutive executions of your
  program. Cached values are recomputed only when needed, i.e. when other
  cached values on which they depend change. Independent computations are
  run in parallel. It offers convenient fonctions for caching to text files,
  but caching and uncaching using arbitrary IO actions is also possible.

  The module was motivated by writing scientific data flows, simulation
  experiments or data science scripts. Those often involve long
  computations and create "flows" where the output of some computation
  are the inputs of others, until final results are produced (values,
  figures, statistical tests, etc.).

  See the module Data.Cached documentation:
  - On hackage: <https://hackage.haskell.org/package/cached/docs/Data-Cached.html>
  - In the source: [./src/Data/Cached.hs](./src/Data/Cached.hs)
license-name: BSD-3-Clause
