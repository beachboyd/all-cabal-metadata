homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: markdown
hash: 3f3dc4ba1779965c23e657a8c8fb20c73e48fd00483414f5a8062afc8271a79a
test-bench-deps:
  apecs: -any
  base: ! '>=4.7 && <5'
  criterion: -any
  containers: -any
  linear: -any
  QuickCheck: -any
  vector: -any
maintainer: jonascarpay@gmail.com
synopsis: Fast ECS framework for game programming
changelog: ! "## [0.5.1.0]\n### Added\n- The `Register` store, which allows reverse
  lookups for bounded enums.\n  For example, if `Bool` has storage `Register (Map
  Bool)`, `regLookup True` will yield a list of all entities with a `True` component.\n
  \ Can also be used to emulate a hash table, where `fromEnum` is the hashing function.\n
  \ This allows us to make simple spatial hashes.\n  I'm open to suggestions for better
  names than Register.\n- `cmapIf`, cmap with a conditional test\n### Changed\n- `ExplInit`
  now too takes a monad argument.\n- Started rewrite of the test suite\n- Caches now
  internally use -2 to denote absence, to avoid possible conflict with -1 as a global
  entity\n### Removed\n- The STM instances have been removed, to be moved to their
  own package\n\n## [0.5.0.0]\n### Changed\n- `System w a` is now a synonym for `SystemT
  w IO a`.\n  A variable monad argument allows apecs to be run in monads like ST or
  STM.\n  Most of the library has been rewritten to be as permissive as possible in
  its monad argument.\n### Added\n- STM stores. These will be moved to a separate
  package soon.\n\n## [0.4.1.2]\n### Changed\n- Either can now be deleted, deleting
  `Either a b` is the same as deleting `(a,b)`.\n- Some were missing their inline
  pragma's, now they don't\n\n## [0.4.1.1]\n### Changed\n- Export `Get`, `Set`, `Destroy`,
  `Members` by default\n- Export `cfold`, `cfoldM`, `cfoldM_` by default\n- Fix ()
  instance\n\n## [0.4.1.0]\n### Added\n- `cfold`, `cfoldM`, `cfoldM_`\n- `Either`
  instances and `EitherStore`\n\n### Changed\n- Changed MaybeStore implementation
  to no longer use -1 for missing entities.\n- Fixed some outdated documentation.\n-
  Change the `global` void entity to -2, just to be sure it won't conflict if accidentally
  used in a cache.\n\n## [0.4.0.0]\n### Added\n- A changelog\n\n### Changed\n- `Store`
  is now split into 5 separate type classes; `ExplInit`, `ExplGet`, `ExplSet`, `ExplDestroy`,
  and `ExplMembers`.\n    This makes it illegal to e.g. iterate over a `Not`.\n- phantom
  arguments are now given as `Proxy` values, re-exported from `Data.Proxy`. This makes
  phantom arguments explicit and avoids undefined values.\n"
basic-deps:
  base: ! '>=4.7 && <5'
  containers: -any
  mtl: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.4.1'
- '0.2.4.2'
- '0.2.4.3'
- '0.2.4.4'
- '0.2.4.5'
- '0.2.4.6'
- '0.2.4.7'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.0'
- '0.4.1.1'
- '0.5.0.0'
- '0.5.1.0'
author: Jonas Carpay
latest: '0.5.1.0'
description-type: markdown
description: ! "# apecs\n[![Build Status](https://travis-ci.org/jonascarpay/apecs.svg?branch=master)](https://travis-ci.org/jonascarpay/apecs)\n[![Hackage](https://img.shields.io/hackage/v/apecs.svg)](https://hackage.haskell.org/package/apecs)\n[![Stackage](https://www.stackage.org/package/apecs/badge/lts?label=Stackage)](https://www.stackage.org/package/apecs)\n\napecs
  is an _Entity Component System_ (ECS) framework inspired by [specs](https://github.com/slide-rs/specs)
  and [Entitas](https://github.com/sschmid/Entitas-CSharp).\nECS presents a data-driven
  approach to game development, that elegantly tackles many of the unique issues of
  game programming.\nThe apecs front-end DSL exposes a small number of combinators
  that allow game logic to be expressive and extremely fast.\n\n#### Links\n- [manual](https://github.com/jonascarpay/apecs/blob/master/prepub.pdf)
  (see [#19](https://github.com/jonascarpay/apecs/issues/19))\n- [tutorial](https://github.com/jonascarpay/apecs/blob/master/examples/Shmup.md)\n-
  [documentation](https://hackage.haskell.org/package/apecs/docs/Apecs.html)\n- [apecs-physics](https://github.com/jonascarpay/apecs-physics)\n\n####
  Performance\n[ecs-bench](https://github.com/lschmierer/ecs_bench) shows that apecs
  is competitive with the fastest Rust ECS frameworks.\n\n![Benchmarks](/bench/chart.png)\n\n####
  Example\n```haskell\n{-# LANGUAGE DataKinds, ScopedTypeVariables, TypeFamilies,
  MultiParamTypeClasses, TemplateHaskell #-}\n\nimport Apecs\nimport Linear (V2 (..))\n\nnewtype
  Position = Position (V2 Double) deriving Show\n-- To declare a component, we need
  to specify how to store it\ninstance Component Position where\n  type Storage Position
  = Map Position -- The simplest store is a Map\n\nnewtype Velocity = Velocity (V2
  Double) deriving Show\ninstance Component Velocity where\n  type Storage Velocity
  = Cache 100 (Map Velocity) -- Caching adds fast reads/writes\n\ndata Flying = Flying\ninstance
  Component Flying where\n  type Storage Flying = Map Flying\n\nmakeWorld \"World\"
  [''Position, ''Velocity, ''Flying] -- Generate World and instances\n\ngame :: System
  World ()\ngame = do\n  newEntity (Position 0, Velocity 1)\n  newEntity (Position
  2, Velocity 1)\n  newEntity (Position 1, Velocity 2, Flying)\n\n  -- Add velocity
  to position\n  cmap $ \\(Position p, Velocity v) -> Position (v+p)\n  -- Apply gravity
  to non-flying entities\n  cmap $ \\(Velocity v, _ :: Not Flying) -> Velocity (v
  - (V2 0 1))\n  -- Print a list of entities and their positions\n  cmapM_ $ \\(Position
  p, Entity e) -> liftIO . print $ (e, p)\n\nmain :: IO ()\nmain = initWorld >>= runSystem
  game\n```\n"
license-name: BSD3
