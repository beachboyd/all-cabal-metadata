homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: markdown
hash: b7ec9dbb978c9778b69b71b0d4abc74e97cdcaf006717980fb753cb41ee9cadc
test-bench-deps:
  apecs: -any
  base: ! '>=4.9 && <5'
  criterion: ! '>=1.3 && <2'
  containers: ! '>=0.5 && <0.8'
  linear: ! '>=1.20 && <2'
  QuickCheck: ! '>=2.10 && <3'
  vector: ! '>=0.10 && <0.13'
maintainer: jonascarpay@gmail.com
synopsis: Fast Entity-Component-System library for game programming
changelog: |
  ## [0.7.3]
  ### Changed
  - Added Data.Semigroup to Stores.Extra to build with GHC 8.2.2 in hackage matrix

  ## [0.7.2]
  ### Changed
  - Fixed bug in the `Pushdown` store
  - `Apecs` module no longer re-exports the entire `Data.Proxy` module, but instead just `Proxy (..)`.
  - Added (approximate?) lower and upper version bounds to dependencies

  ## [0.7.1]
  ### Added
  - `$=` and `$~` operators as synonyms for `set` and `get` respectively
  ### Removed
  - `getAll` and `count`, which were made redundant by `cfold`.

  ## [0.7.0]
  ### Added
  - The `Reactive` store and module is a redesign of the `Register` store, and provides a more general solution for 'stores that perform additional actions when written to'.
  - The `Apecs.Stores.Extra` submodule, which contains the `Pushdown` and `ReadOnly` stores. `Pushdown` adds pushdown semantics to stores, and `ReadOnly` hides the `ExplSet` instances of whatever it wraps.
  - The `EntityCounter` and associated functions have all been specified to `IO`, since `Global EntityCounter` only works in IO. Furthermore, `EntityCounter` now uses a `ReadOnly` store, to prevent users from accidentally changing its value.
  - `Redirect` component that writes to another entity in `cmap`.
  ### Changed
  - Default stores have `MonadIO m => m` instances, rather than `IO`. This makes it easier to nest `SystemT`.
  - All apecs packages have been consolidated into a single git repo.
  - `Apecs.Components` contains the components (and corresponding stores) from `Apecs.Core`.

  ## [0.6.0.0]
  ### Changed
  - Nothing, but since 0.5.1 was API-breaking I've decided to bump to 0.6
  ## [0.5.1.1]
  ### Changed
  - `Register` needs UndecidableInstances in GHC 8.6.2, I'm looking for a way around this. I've removed it for now.

  ## [0.5.1.0]
  ### Added
  - The `Register` store, which allows reverse lookups for bounded enums.
    For example, if `Bool` has storage `Register (Map Bool)`, `regLookup True` will yield a list of all entities with a `True` component.
    Can also be used to emulate a hash table, where `fromEnum` is the hashing function.
    This allows us to make simple spatial hashes.
    I'm open to suggestions for better names than Register.
  - `cmapIf`, cmap with a conditional test
  ### Changed
  - `ExplInit` now too takes a monad argument.
  - Started rewrite of the test suite
  - Caches now internally use -2 to denote absence, to avoid possible conflict with -1 as a global entity
  ### Removed
  - The STM instances have been removed, to be moved to their own package

  ## [0.5.0.0]
  ### Changed
  - `System w a` is now a synonym for `SystemT w IO a`.
    A variable monad argument allows apecs to be run in monads like ST or STM.
    Most of the library has been rewritten to be as permissive as possible in its monad argument.
  ### Added
  - STM stores. These will be moved to a separate package soon.

  ## [0.4.1.2]
  ### Changed
  - Either can now be deleted, deleting `Either a b` is the same as deleting `(a,b)`.
  - Some were missing their inline pragma's, now they don't

  ## [0.4.1.1]
  ### Changed
  - Export `Get`, `Set`, `Destroy`, `Members` by default
  - Export `cfold`, `cfoldM`, `cfoldM_` by default
  - Fix () instance

  ## [0.4.1.0]
  ### Added
  - `cfold`, `cfoldM`, `cfoldM_`
  - `Either` instances and `EitherStore`

  ### Changed
  - Changed MaybeStore implementation to no longer use -1 for missing entities.
  - Fixed some outdated documentation.
  - Change the `global` void entity to -2, just to be sure it won't conflict if accidentally used in a cache.

  ## [0.4.0.0]
  ### Added
  - A changelog

  ### Changed
  - `Store` is now split into 5 separate type classes; `ExplInit`, `ExplGet`, `ExplSet`, `ExplDestroy`, and `ExplMembers`.
      This makes it illegal to e.g. iterate over a `Not`.
  - phantom arguments are now given as `Proxy` values, re-exported from `Data.Proxy`. This makes phantom arguments explicit and avoids undefined values.
basic-deps:
  base: ! '>=4.9 && <5'
  containers: ! '>=0.5 && <0.8'
  mtl: ! '>=2.2 && <2.3'
  template-haskell: ! '>=2.12 && <3'
  vector: ! '>=0.11 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.4.1
- 0.2.4.2
- 0.2.4.3
- 0.2.4.4
- 0.2.4.5
- 0.2.4.6
- 0.2.4.7
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.6.0.0
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
author: Jonas Carpay
latest: 0.7.3
description-type: markdown
description: |
  # apecs [![Build Status](https://travis-ci.org/jonascarpay/apecs.svg?branch=master)](https://travis-ci.org/jonascarpay/apecs)
  apecs is an _Entity Component System_ (ECS) library inspired by [specs](https://github.com/slide-rs/specs) and [Entitas](https://github.com/sschmid/Entitas-CSharp).
  ECS presents a data-driven approach to game development, that elegantly tackles many of the unique issues of game programming.

  apecs aims to be
  * **Fast** - Performance is competitive with Rust ECS libraries (see benchmark results below).
  * **Concise** - Game logic is expressed using a small number of powerful combinators.
  * **Safe** - The `cmap`/`cfold`-DSL completely hides the dangers of the low-level API.
  * **Extensible** - At its heart apecs is just a data manipulation DSL that can be implemented with any number of backends. as a monad transformer it easily integrates into larger applications.
  * **Cool**

  ![Benchmarks](apecs/bench/chart.png)

  #### Links
  - [documentation on hackage](https://hackage.haskell.org/package/apecs/docs/Apecs.html)
  - [tutorial](examples/Shmup.md) and other [examples](examples/)
  - [paper (prepublication)](apecs/prepub.pdf) (see [#19](https://github.com/jonascarpay/apecs/issues/19))
  - [apecs-physics](apecs-physics/) - 2D physics using the [Chipmunk2D](https://github.com/slembcke/Chipmunk2D) engine
  - [apecs-gloss](apecs-gloss/) - Simple frontend for [gloss](http://hackage.haskell.org/package/gloss)-based rendering
  - [apecs-stm](apecs-stm/) - STM-based stores for easy concurrency

  ##### By other authors
  - [An Introduction to Developing Games in Haskell with Apecs](https://blog.aas.sh/posts/2018-09-10-Making-A-Game-With-Haskell-And-Apecs/) by Ashley Smith

  #### Status
  | Package | Hackage | Stack LTS | Stack Nightly |
  |---|---|---|---|
  | [apecs](apecs/) | [![Hackage](https://img.shields.io/hackage/v/apecs.svg)](https://hackage.haskell.org/package/apecs) | [![Stackage](https://www.stackage.org/package/apecs/badge/lts?label=lts)](https://www.stackage.org/package/apecs) | [![Stackage](https://www.stackage.org/package/apecs/badge/nightly?label=nightly)](https://www.stackage.org/package/apecs)
  | [apecs-physics](apecs-physics/) |  [![Hackage](https://img.shields.io/hackage/v/apecs-physics.svg)](https://hackage.haskell.org/package/apecs-physics) | [![Stackage](https://www.stackage.org/package/apecs-physics/badge/lts?label=lts)](https://www.stackage.org/package/apecs-physics) | [![Stackage](https://www.stackage.org/package/apecs-physics/badge/nightly?label=nightly)](https://www.stackage.org/package/apecs-physics) |
  | [apecs-gloss](apecs-gloss/) | [![Hackage](https://img.shields.io/hackage/v/apecs-gloss.svg)](https://hackage.haskell.org/package/apecs-gloss) | [![Stackage](https://www.stackage.org/package/apecs-gloss/badge/lts?label=lts)](https://www.stackage.org/package/apecs-gloss) | [![Stackage](https://www.stackage.org/package/apecs-gloss/badge/nightly?label=nightly)](https://www.stackage.org/package/apecs-gloss) |
  | [apecs-stm](apecs-stm/) | [![Hackage](https://img.shields.io/hackage/v/apecs-stm.svg)](https://hackage.haskell.org/package/apecs-stm) | - | - |
  | [examples](examples/) | - | - | - |

  #### Example
  ```haskell
  {-# LANGUAGE FlexibleInstances     #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE ScopedTypeVariables   #-}
  {-# LANGUAGE TemplateHaskell       #-}
  {-# LANGUAGE TypeFamilies          #-}

  import Apecs
  import Linear (V2 (..))

  newtype Position = Position (V2 Double) deriving Show
  newtype Velocity = Velocity (V2 Double) deriving Show
  data Flying = Flying

  makeWorldAndComponents "World" [''Position, ''Velocity, ''Flying]

  game :: System World ()
  game = do
    newEntity (Position 0, Velocity 1)
    newEntity (Position 2, Velocity 1)
    newEntity (Position 1, Velocity 2, Flying)

    -- 1. Add velocity to position
    -- 2. Apply gravity to non-flying entities
    -- 3. Print a list of entities and their positions
    cmap $ \(Position p, Velocity v) -> Position (v+p)
    cmap $ \(Velocity v, _ :: Not Flying) -> Velocity (v - V2 0 1)
    cmapM_ $ \(Position p, Entity e) -> liftIO . print $ (e, p)

  main :: IO ()
  main = initWorld >>= runSystem game
  ```
license-name: BSD-3-Clause
