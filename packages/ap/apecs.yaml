homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: ''
hash: 6f72ff562e3a2e408dd3fc0e70ecf8566ef437b8d0c096bef756409650aba634
test-bench-deps:
  apecs: -any
  base: ! '>=4.7 && <5'
  criterion: -any
  containers: -any
  linear: -any
  QuickCheck: -any
  vector: -any
maintainer: jonascarpay@gmail.com
synopsis: A fast ECS for game engine programming
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  async: -any
  containers: -any
  mtl: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.4.1'
- '0.2.4.2'
- '0.2.4.3'
- '0.2.4.4'
- '0.2.4.5'
- '0.2.4.6'
- '0.2.4.7'
- '0.3.0.0'
- '0.3.0.1'
author: Jonas Carpay
latest: '0.3.0.1'
description-type: markdown
description: ! "# apecs\n[![Build Status](https://travis-ci.org/jonascarpay/apecs.svg?branch=master)](https://travis-ci.org/jonascarpay/apecs)\n[![Hackage](https://img.shields.io/hackage/v/apecs.svg)](https://hackage.haskell.org/package/apecs)\n[![apecs
  on Stackage LTS 10](http://stackage.org/package/apecs/badge/lts-10)](http://stackage.org/lts-10/package/apecs)\n\napecs
  is an _Entity Component System_ inspired by [specs](https://github.com/slide-rs/specs)
  and [Entitas](https://github.com/sschmid/Entitas-CSharp).\nIt provides a collection
  of mutable component stores, and an expressive DSL for operating on those stores,
  both easily extended.\n\n#### Links\n- [documentation](https://hackage.haskell.org/package/apecs/docs/Apecs.html)\n-
  [introductory tutorial](https://github.com/jonascarpay/apecs/blob/master/tutorials/RTS.md)\n-
  [performance guide](https://github.com/jonascarpay/apecs/blob/master/tutorials/GoingFast.md)\n-
  [apecs-physics](https://github.com/jonascarpay/apecs-physics)\n\n#### Performance\n[ecs-bench](https://github.com/lschmierer/ecs_bench)
  shows that apecs is competitive with the fastest Rust ECS frameworks.\n\n![Benchmarks](/bench/chart.png)\n\n####
  Example\n```haskell\n{-# LANGUAGE DataKinds, ScopedTypeVariables, TypeFamilies,
  MultiParamTypeClasses, TemplateHaskell #-}\n\nimport Apecs\nimport Apecs.Stores\nimport
  Apecs.Core\nimport Linear\n\nnewtype Position = Position (V2 Double) deriving Show\n--
  To declare a component, we need to specify how to store it\ninstance Component Position
  where\n  type Storage Position = Map Position -- The simplest store is a Map\n\nnewtype
  Velocity = Velocity (V2 Double) deriving Show\ninstance Component Velocity where\n
  \ type Storage Velocity = Cache 100 (Map Velocity) -- Caching adds fast reads/writes\n\ndata
  Flying = Flying\ninstance Component Flying where\n  type Storage Flying = Map Flying\n\nmakeWorld
  \"World\" [''Position, ''Velocity, ''Flying] -- Generate World and instances\n\ngame
  :: System World ()\ngame = do\n  newEntity (Position 0, Velocity 1)\n  newEntity
  (Position 2, Velocity 1)\n  newEntity (Position 1, Velocity 2, Flying)\n\n  -- Add
  velocity to position\n  cmap $ \\(Position p, Velocity v) -> Position (v+p)\n  --
  Apply gravity to non-flying entities\n  cmap $ \\(Velocity v, _ :: Not Flying) ->
  Velocity (v - (V2 0 1))\n  -- Print a list of entities and their positions\n  cmapM_
  $ \\(Position p, Entity e) -> liftIO . print $ (e, p)\n\nmain :: IO ()\nmain = initWorld
  >>= runSystem game\n```\n"
license-name: BSD3
