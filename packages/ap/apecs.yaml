homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: ''
hash: 77eda9c1beb77ecb8e41a53872bb3881a6f9df54bed3d9d1cf2315b5ebe22791
test-bench-deps:
  apecs: -any
  base: ! '>=4.7 && <5'
  criterion: -any
  containers: -any
  linear: -any
  QuickCheck: -any
  vector: -any
maintainer: jonascarpay@gmail.com
synopsis: A fast ECS for game engine programming
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  async: -any
  containers: -any
  mtl: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.4.1'
- '0.2.4.2'
- '0.2.4.3'
- '0.2.4.4'
- '0.2.4.5'
- '0.2.4.6'
- '0.2.4.7'
author: Jonas Carpay
latest: '0.2.4.7'
description-type: markdown
description: ! "# apecs\n##### [hackage](https://hackage.haskell.org/package/apecs)
  | [documentation](https://hackage.haskell.org/package/apecs/docs/Apecs.html) | [tutorials](https://github.com/jonascarpay/apecs/blob/master/tutorials/)\n\napecs
  is an Entity Component System inspired by [specs](https://github.com/slide-rs/specs)
  and [Entitas](https://github.com/sschmid/Entitas-CSharp).\nIt exposes a DSL that
  translates to fast storage operations, resulting in expressivity without sacrificing
  performance or safety.\n\nThere is an example below, and a tutorial can be found
  [here](https://github.com/jonascarpay/apecs/blob/master/tutorials/RTS.md).\nFor
  a physics engine written on top of apecs, check out [phycs](https://github.com/jonascarpay/phycs).\nFor
  a general introduction to ECS, see [this talk](https://www.youtube.com/watch?v=lNTaC-JWmdI&feature=youtu.be&t=218)
  or [here](https://en.wikipedia.org/wiki/Entity–component–system).\n\n### Performance\nPerformance
  is good.\nRunning [ecs-bench](https://github.com/lschmierer/ecs_bench) shows that
  apecs is competitive with the fastest Rust ECS frameworks.\n\n|               |
  pos_vel build | pos_vel step | parallel build | parallel step |\n| -------------
  | ------------- | ------------ | -------------- | ------------- |\n| apecs         |
  239           | 34           | 777            | 371           |\n| calx          |
  261           | 21           | 442            | 72            |\n| constellation
  | 306           | 10           | 567            | 256           |\n| froggy        |
  594           | 13           | 1565           | 97            |\n| specs         |
  753           | 38           | 1016           | 205           |\n\n![Benchmarks](/bench/chart.png)\n\nThere
  is a performance guide [here](https://github.com/jonascarpay/apecs/blob/master/tutorials/GoingFast.md).\n\n###
  Example\n```haskell\nimport Apecs\nimport Apecs.Stores (Cache)\nimport Apecs.Concurrent
  (prmap)\nimport Linear\n\nnewtype Position = Position (V2 Double) deriving Show\n--
  Turn Position into a component by specifiying the type of its Storage\ninstance
  Component Position where\n  -- The simplest store is a Map\n  type Storage Position
  = Map Position\n\nnewtype Velocity = Velocity (V2 Double)\ninstance Component Velocity
  where\n  -- We can add a Cache for faster access\n  type Storage Velocity = Cache
  100 (Map Velocity)\n\ndata Player = Player -- A single constructor component for
  tagging the player\ninstance Component Player where\n  -- Unique contains at most
  one component. See the Stores module.\n  type Storage Player = Unique Player\n\n--
  Generate a world type and instances\nmakeWorld \"World\" [''Position, ''Velocity,
  ''Player]\n\ngame :: System World ()\ngame = do\n  -- Create new entities\n  ety
  <- newEntity (Position 0)\n  -- Components can be composed using tuples\n  newEntity
  (Position 0, Velocity 1)\n  newEntity (Position 1, Velocity 1, Player)\n\n  -- set
  (over)writes components\n  set ety (Velocity 2)\n\n  let stepVelocity (Position
  p, Velocity v) = Position (v+p)\n\n  -- Side effects\n  liftIO$ putStrLn \"Stepping
  velocities\"\n  -- rmap maps a pure function over all entities in its domain\n  rmap
  stepVelocity\n  -- prmap n does the same, but in parallel\n  prmap 2 stepVelocity\n\n
  \ -- Print all positions\n  cmapM_ $ \\(Position p) -> liftIO (print p)\n\nmain
  :: IO ()\nmain = initWorld >>= runSystem game\n```\n"
license-name: BSD3
