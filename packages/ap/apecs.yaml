homepage: https://github.com/jonascarpay/apecs#readme
changelog-type: ''
hash: ea09c14ba3e248fbab1a7102930bd875009ee5739a42b300091f716e5cf31442
test-bench-deps:
  apecs: -any
  base: ! '>=4.7 && <5'
  criterion: -any
  containers: -any
  linear: -any
  QuickCheck: -any
  vector: -any
maintainer: jonascarpay@gmail.com
synopsis: Fast ECS framework for game programming
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  async: -any
  containers: -any
  mtl: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.1.1'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.4.1'
- '0.2.4.2'
- '0.2.4.3'
- '0.2.4.4'
- '0.2.4.5'
- '0.2.4.6'
- '0.2.4.7'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.1.0'
- '0.4.1.1'
author: Jonas Carpay
latest: '0.4.1.1'
description-type: markdown
description: ! "# apecs\n[![Build Status](https://travis-ci.org/jonascarpay/apecs.svg?branch=master)](https://travis-ci.org/jonascarpay/apecs)\n[![Hackage](https://img.shields.io/hackage/v/apecs.svg)](https://hackage.haskell.org/package/apecs)\n[![Stackage](https://www.stackage.org/package/apecs/badge/lts?label=Stackage)](https://www.stackage.org/package/apecs)\n\napecs
  is an _Entity Component System_ (ECS) framework inspired by [specs](https://github.com/slide-rs/specs)
  and [Entitas](https://github.com/sschmid/Entitas-CSharp).\nThe front-end DSL uses
  a small set of combinators to concisely express game logic, which then translate
  to fast primitive operations on back-end stores.\nBoth the DSL and storage framework
  can easily be extended to meet any performance/expressivity needs.\n\n#### Links\n-
  [documentation](https://hackage.haskell.org/package/apecs/docs/Apecs.html)\n- [manual](https://github.com/jonascarpay/apecs/blob/master/prepub.pdf)
  (see [#19](https://github.com/jonascarpay/apecs/issues/19))\n- [apecs-physics](https://github.com/jonascarpay/apecs-physics)\n\n####
  Performance\n[ecs-bench](https://github.com/lschmierer/ecs_bench) shows that apecs
  is competitive with the fastest Rust ECS frameworks.\n\n![Benchmarks](/bench/chart.png)\n\n####
  Example\n```haskell\n{-# LANGUAGE DataKinds, ScopedTypeVariables, TypeFamilies,
  MultiParamTypeClasses, TemplateHaskell #-}\n\nimport Apecs\nimport Linear (V2 (..))\n\nnewtype
  Position = Position (V2 Double) deriving Show\n-- To declare a component, we need
  to specify how to store it\ninstance Component Position where\n  type Storage Position
  = Map Position -- The simplest store is a Map\n\nnewtype Velocity = Velocity (V2
  Double) deriving Show\ninstance Component Velocity where\n  type Storage Velocity
  = Cache 100 (Map Velocity) -- Caching adds fast reads/writes\n\ndata Flying = Flying\ninstance
  Component Flying where\n  type Storage Flying = Map Flying\n\nmakeWorld \"World\"
  [''Position, ''Velocity, ''Flying] -- Generate World and instances\n\ngame :: System
  World ()\ngame = do\n  newEntity (Position 0, Velocity 1)\n  newEntity (Position
  2, Velocity 1)\n  newEntity (Position 1, Velocity 2, Flying)\n\n  -- Add velocity
  to position\n  cmap $ \\(Position p, Velocity v) -> Position (v+p)\n  -- Apply gravity
  to non-flying entities\n  cmap $ \\(Velocity v, _ :: Not Flying) -> Velocity (v
  - (V2 0 1))\n  -- Print a list of entities and their positions\n  cmapM_ $ \\(Position
  p, Entity e) -> liftIO . print $ (e, p)\n\nmain :: IO ()\nmain = initWorld >>= runSystem
  game\n```\n"
license-name: BSD3
