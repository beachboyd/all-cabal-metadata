homepage: ''
changelog-type: text
hash: e92538cf815891e5bb79830fcba5040b5ae741f32f685fcae5d7b7356e1f42da
test-bench-deps:
  ghc: '>=8.6'
  extra: '>=1.7.3'
  filemanip: -any
  base: <5
  tasty-golden: -any
  tasty-expected-failure: -any
  syb: -any
  ghc-exactprint: '>=0.6.3.2'
  unix-compat: -any
  filepath: -any
  process: -any
  containers: '>=0.6.0.1'
  silently: -any
  refact: '>=0.2'
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  ghc-boot-th: '>=8.6'
  directory: -any
maintainer: matthewtpickering@gmail.com
synopsis: Perform refactorings specified by the refact library.
changelog: "v0.8.2.1\n\n  * support GHC 8.8.4\n  * remove dependency on mtl\n\nv0.8.2.0\n\n
  \ * #75, support refactoring for Eta reduce\n\nv0.8.1.0\n\n  * #68, support GHC
  8.6\n  * #63, support GHC 8.8\n  * #64, add LANGUAGE pragmas to DynFlag\n  * #62,
  fix a bug where \"y = f(x)\" is refactored into \"y = fx\"\n  * #61, fix a bug where
  \"x < -2 * 3\" is printed as \"x < 2 * 3\"\n  * #51, fix a bug where [1,2..5] is
  printed as [12..5]\n  * #59, do not process the target file if there's no hint\n\nv0.8.0.0\n\n
  \ * 8.10 release compatability\n\n\nv0.7.0.0\n\n  * 8.8 release compatability\n
  \ * Specify language extensions using -X\n\nv0.6.0.0\n\n  * 8.6 release compatibility\n\nv0.5.0.0\n\n
  \ * 8.4 release compatibility\n\nv0.4.1.0\n\n\t* 8.2 release compatibility\n\nv0.4.0.0\n\n\t*
  8.2rc2 compatibility\n\nv0.3.0.1\n\n\t* Version bound tweaking to build with optparse-applicative
  0.13\n\nv0.3\n\n\t* GHC 8.0 compatibility\n\nv0.2\n\n  * API refactoring to make
  the tool usable as a library.\n\nv0.1\n\n  * Initial Release\n"
basic-deps:
  ghc: '>=8.6'
  extra: '>=1.7.3'
  filemanip: -any
  base: '>=4.12 && <5'
  syb: -any
  ghc-exactprint: '>=0.6.3.2'
  unix-compat: -any
  filepath: -any
  process: -any
  containers: '>=0.6.0.1'
  refact: '>=0.2'
  transformers: -any
  optparse-applicative: '>=0.15.1.0'
  ghc-boot-th: '>=8.6'
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
author: Matthew Pickering
latest: 0.8.2.1
description-type: markdown
description: |
  `apply-refact` applies refactorings specified by the
  [`refact`](https://hackage.haskell.org/package/refact) package. It is currently
  integrated into [HLint](https://github.com/ndmitchell/hlint) to enable the automatic application of suggestions.

  # Install

  ```shell
  cabal install apply-refact
  ```

  Alternatively, clone the repo and run `cabal install`.

  You can also install from Nix:

  ```shell
  nix-env -iA nixpkgs.haskellPackages.apply-refact
  ```

  Executable name is `refactor`.

  #### Hlint Integration example

  ```shell
  hlint src/Main.hs --refactor --refactor-options="--inplace"
  ```

  # Example Usage

  <img src="http://i.imgur.com/7YXoVft.gif">

  ```
  # test.hs

  foo = (x)

  # hlint.refact -- produced by hlint --serialise
  [("test.hs:1:7: Warning: Redundant bracket\nFound:\n  (x)\nWhy not:\n
  x\n",[Replace {rtype = Expr, pos = SrcSpan {startLine = 1, startCol = 7, endLine
  = 1, endCol = 10}, subts = [("x",SrcSpan {startLine = 1, startCol = 8, endLine =
  1, endCol = 9})], orig = "x"}])]

  > refactor test.hs --refact-file hlint.refact
  foo = x
  ```

  One of either the input file or `--refact-file` must be specified on the command
  line. If an input file is specified but not `--refact-file` then `refactor` will
  accept refactorings from stdin and vice versa.

  The `-i` option can be specified to perform the refactoring inplace overwriting
  the input file. This option is ignored when input is read from stdin.

  The `-s` option can be specified to perform a stepwise evaluation of the refact
  file. The user is prompted whether to perform each hint before it is performed.

  The `--pos` option is intended to be used by tooling in order to specify which
  specific hint should be performed.

  Multiple `-X` options may be provided to specify additional default language pragmas which might affect parsing, such as `-XLambdaCase` or `-XRankNTypes`.

  ## Refact Files

  Refact files should be the result of `show` on a value of type `[(String,
  [Refactoring SrcSpan])]`. The string is a description of the refactoring, one
  description can have many associated refactoring steps.


  ## Library Structure

  The executable is provide so that libraries can use `apply-refact` without depending on the package.
  The implementation relies on `ghc-exactprint` which depends itself on GHC. A
  transitive dependancy that most developers wish to avoid!


  # Reporting Bugs

  If the program produces a syntactically incorrect result then this is a bug.
  Please open an issue on the issue tracker with precise instructions about how to
  reproduce it.

  1. The input file
  2. The refact file
  3. The command used to invoke `refactor`

  There are some known problems with CPP processing. If your library contains CPP
  directives other than `#ifdef` it is quite likely that the result will be
  unexpected.

  # Debugging

  There are also two hidden flags which can be useful for debugging.

  #### `--debug`

  Outputs the GHC AST.

  #### `--roundtrip`

  Performs no refactoring operations on the file but is useful to test whether
  unexpected formatting is due to `ghc-exactprint` or the refactoring.

  # Contributing

  Contributions are welcome. You can run the tests via `cabal test`.
license-name: BSD-3-Clause
