homepage: ''
changelog-type: text
hash: 315d26f2c708639bfc16bda4ba257a3ae58e06d84815561a59cd09f3c3259c8d
test-bench-deps:
  ghc: ! '>=8.8.1'
  filemanip: -any
  base: <5
  tasty-golden: -any
  tasty-expected-failure: -any
  syb: -any
  ghc-exactprint: ! '>=0.5.7.0'
  unix-compat: -any
  filepath: -any
  process: -any
  containers: -any
  silently: -any
  refact: ! '>=0.2'
  mtl: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  tasty: -any
  directory: -any
maintainer: matthewtpickering@gmail.com
synopsis: Perform refactorings specified by the refact library.
changelog: "v0.7.0.0\n\n  * 8.8 release compatability\n  * Specify language extensions
  using -X\n\nv0.6.0.0\n\n  * 8.6 release compatibility\n\nv0.5.0.0\n\n  * 8.4 release
  compatibility\n\nv0.4.1.0\n\n\t* 8.2 release compatibility\n\nv0.4.0.0\n\n\t* 8.2rc2
  compatibility\n\nv0.3.0.1\n\n\t* Version bound tweaking to build with optparse-applicative
  0.13\n\nv0.3\n\n\t* GHC 8.0 compatibility\n\nv0.2\n\n  * API refactoring to make
  the tool usable as a library.\n\nv0.1\n\n  * Initial Release\n"
basic-deps:
  ghc: ! '>=8.8.1'
  filemanip: -any
  base: ! '>=4.8 && <5'
  syb: -any
  ghc-exactprint: ! '>=0.6.2'
  unix-compat: -any
  filepath: -any
  process: -any
  containers: -any
  refact: ! '>=0.2'
  mtl: -any
  transformers: -any
  temporary: -any
  optparse-applicative: ! '>=0.13'
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
author: Matthew Pickering
latest: 0.7.0.0
description-type: markdown
description: |+
  `apply-refact` applies refactorings specified by the
  [`refact`](https://hackage.haskell.org/package/refact) package. It is currently
  integrated into `hlint` to enable the automatic application of suggestions.

  # install

  ```shell
  stack --resolver=nightly install apply-refact
  ```

  executable name is `refactor`

  #### Hlint Integration example

  ```shell
  hlint src/Main.hs --refactor --refactor-options="--inplace"
  ```

  # Example Usage

  <img src="http://i.imgur.com/7YXoVft.gif">

  ```
  # test.hs

  foo = (x)

  # hlint.refact -- produced by hlint --serialise
  [("test.hs:1:7: Warning: Redundant bracket\nFound:\n  (x)\nWhy not:\n
  x\n",[Replace {rtype = Expr, pos = SrcSpan {startLine = 1, startCol = 7, endLine
  = 1, endCol = 10}, subts = [("x",SrcSpan {startLine = 1, startCol = 8, endLine =
  1, endCol = 9})], orig = "x"}])]

  > refactor test.hs --refact-file hlint.refact
  foo = x
  ```

  One of either the input file or `--refact-file` must be specified on the command
  line. If an input file is specified but not `--refact-file` then `refactor` will
  accept refactorings from stdin and vice versa.

  The `-i` option can be specified to perform the refactoring inplace overwriting
  the input file. This option is ignored when input is read from stdin.

  The `-s` option can be specified to perform a stepwise evaluation of the refact
  file. The user is prompted whether to perform each hint before it is performed.

  The `--pos` option is intended to be used by tooling in order to specify which
  specific hint should be performed.

  Multiple `-X` options may be provided to specify additional default language pragmas which might affect parsing, such as `-XLambdaCase` or `-XRankNTypes`.

  ## Refact Files

  Refact files should be the result of `show` on a value of type `[(String,
  [Refactoring SrcSpan])]`. The string is a description of the refactoring, one
  description can have many associated refactoring steps.


  ## Library Structure

  The executable is provide so that libraries can use `apply-refact` without depending on the package.
  The implementation relies on `ghc-exactprint` which depends itself on GHC. A
  transitive dependancy that most developers wish to avoid!


  # Reporting Bugs

  If the program produces a syntactically incorrect result then this is a bug.
  Please open an issue on the issue tracker with precise instructions about how to
  reproduce it.

  1. The input file
  2. The refact file
  3. The command used to invoke `refactor`

  There are some known problems with CPP processing. If your library contains CPP
  directives other than `#ifdef` it is quite likely that the result will be
  unexpected.

  # Debugging

  There are also two hidden flags which can be useful for debugging.

  #### `--debug`

  Outputs the GHC AST.

  #### `--roundtrip`

  Performs no refactoring operations on the file but is useful to test whether
  unexpected formatting is due to `ghc-exactprint` or the refactoring.

license-name: BSD-3-Clause
