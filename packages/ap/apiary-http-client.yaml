homepage: https://github.com/winterland1989/apiary-http-client
changelog-type: ''
hash: 16773270165c6d3c50ae408646cfc62260835f43aec289c52a1758425b6e7c08
test-bench-deps: {}
maintainer: winterland1989@gmail.com
synopsis: A http client for Apiary.
changelog: ''
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.0 && <3.3'
  base: ! '>=4.6 && <5.0'
  text: ! '>=1.1 && <1.3'
  apiary: ! '>=2.1 && <3.0'
  transformers: ! '>=0.2 && <0.6'
  bytestring-builder: ! '>=0.10 && <0.11'
  http-types: ! '>=0.8'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
author: winterland
latest: '0.1.4.0'
description-type: markdown
description: ! "Apiary HTTP Client\n==================\n\n[![Hackage](https://img.shields.io/hackage/v/apiary-http-client.svg?style=flat)](http://hackage.haskell.org/package/apiary-http-client)\n[![Travis-CI](https://travis-ci.org/winterland1989/apiary-http-client.svg)](https://travis-ci.org/winterland1989/apiary-http-client)\n\nA
  HTTP Client for [Apiary](http://hackage.haskell.org/package/apiary), using `Apiary`'s
  extension api, suitable for proxying HTTP request to backend API, with flexible
  APIs and streamming proxying abilities.\n\nThis module also reexport `Network.HTTP.Client`.
  \n\nExample\n-------\n\n```haskell\nimport Web.Apiary\nimport Network.Wai.Handler.Warp\nimport
  Web.Apiary.HTTP.Client as HTTP\n\nmain :: IO ()\nmain = runApiaryWith (run 8080)
  (HTTP.initHTTPClient HTTP.defaultManagerSettings) def $ do\n\n    [capture|/query|]
  . action $ do\n        \n        -- make a new Network.HTTP.Client.Request from
  current ActionT's Network.Wai.Request\n        -- it's recommended to use resetHeaders
  to remove following headers:\n        -- Transfer-Encoding, Content-Length, Content-Encoding
  and Accept-Encoding.\n        req <- HTTP.fromRequest id resetHeaders\n\n        --
  set proxying host and port\n        -- use function from Network.HTTP.Client to
  modify more\n        let req' = HTTP.setHost \"api.backend.com\" . HTTP.setPort
  80 $ req\n\n        -- send request and proxy respond in streamming fashion.\n        HTTP.proxyTo
  req'\n```\n"
license-name: MIT
