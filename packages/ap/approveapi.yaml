homepage: https://approveapi.com
changelog-type: ''
hash: 8bf32e08f436846ffa44ef554a4d9fc694881346b85017744173c89fac04dc54
test-bench-deps:
  bytestring: ! '>=0.10.0 && <0.11'
  base: ! '>=4.7 && <5.0'
  time: -any
  unordered-containers: -any
  hspec: ! '>=1.8'
  text: -any
  semigroups: -any
  containers: -any
  approveapi: -any
  iso8601-time: -any
  mtl: ! '>=2.2.1'
  transformers: -any
  QuickCheck: -any
  aeson: -any
  vector: -any
maintainer: dev@approveapi.com
synopsis: ApproveAPI Haskell Client
changelog: ''
basic-deps:
  http-client: ! '>=0.5 && <0.6'
  exceptions: ! '>=0.10.0 && <0.11'
  katip: ! '>=0.4 && <0.9'
  bytestring: ! '>=0.10.0 && <0.11'
  case-insensitive: ! '>=1.2.0 && <1.3'
  base: ! '>=4.7 && <5.0'
  time: ! '>=1.5 && <1.10'
  base64-bytestring: ! '>1.0 && <2.0'
  unordered-containers: ! '>=0.2.9 && <0.3'
  text: ! '>=0.11 && <1.3'
  safe-exceptions: <0.2
  http-api-data: ! '>=0.3.4 && <0.4'
  network: ! '>=2.6.2 && <2.8'
  containers: ! '>=0.5.0.0 && <0.6'
  iso8601-time: ! '>=0.1.3 && <0.2.0'
  http-client-tls: ! '>=0.3.5 && <0.4'
  mtl: ! '>=2.2.2 && <2.3'
  transformers: ! '>=0.4.0.0 && <0.6'
  random: ==1.1.*
  deepseq: ! '>=1.4 && <1.6'
  http-types: ! '>=0.8 && <0.13'
  microlens: ! '>=0.4.3 && <0.5'
  aeson: ! '>=1.0 && <2.0'
  http-media: ! '>=0.4 && <0.8'
  vector: ! '>=0.10.9 && <0.13'
all-versions:
- 0.1.0.0
author: Kevin King
latest: 0.1.0.0
description-type: markdown
description: "# approveapi-haskell\n\nHaskell API bindings for the [ApproveAPI HTTP
  API](https://approveapi.com).\n\n*ApproveAPI is a simple API to request a user's
  real-time approval on anything via email, sms + mobile push.*\n\n## Getting Started\n\nTo
  get started, we create a config:\n\n```haskell\nimport qualified ApproveApi as A\n...\nconfig
  <- (`A.addAuthMethod` A.AuthBasicApiKey \"sk_test_yourapikeyhere\" \"\")\n          <$>
  A.newConfig \n```\n\nNow we can make API calls. For example, let's send an approval
  prompt to confirm a financial transaction.\n\n```haskell\nimport qualified Network.HTTP.Client.TLS
  as NH\n...\nlet body = \"Your AcmeBank credit card was just charged $3249.99 at
  APPLE STORE,\\\n\\ San Francisco. Authorize this transaction?\"\nlet prompt = (A.mkCreatePromptRequest
  \"alice@approveapi.com\" body) {\n                A.createPromptRequestLongPoll
  = Just True,\n\t\t            A.createPromptRequestApproveText = Just \"Authorize\",\n\t\t
  \           A.createPromptRequestRejectText = Just \"Reject\"\n              }\nlet
  createPromptRequest = A.createPrompt prompt\n\nmgr <- NH.newTlsManager\ncreatePromptResponse
  <- A.dispatchMime mgr config createPromptRequest\n\nflip mapM_ createPromptResponse
  (\\r ->\n  case A.promptAnswer r of \n    Nothing -> putStrLn $ \"No response yet\"\n
  \   Just answer -> case A.promptAnswerResult answer of\n      True -> putStrLn $
  \"Request approved\"\n      False -> putStrLn $ \"Request rejected\"\n  )\n```\n\n##
  Documentation\n\nFull documentation is available here: [approveapi.com/docs](https://www.approveapi.com/docs/?haskell).\n\n\n\n"
license-name: MIT
