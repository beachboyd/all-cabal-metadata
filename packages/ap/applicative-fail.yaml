homepage: https://bitbucket.org/s9gf4ult/applicative-fail
changelog-type: markdown
hash: 69d06000fb2924499d3decd12742653bdc0a0ba7fa98c8b9a4deee1ad543a871
test-bench-deps:
  applicative-fail: -any
  checkers: -any
  base: ! '>=3 && <5'
  tasty-quickcheck: -any
  mtl: -any
  tasty: -any
  QuickCheck: -any
maintainer: s9gf4ult@gmail.com
synopsis: Applicative functor and monad which collects all your fails
changelog: ! "# CHANGELOG\n\n## 1.1.1\n### Changed\n* upper base constraints relaxed\n\n##
  1.1.0\n\n### Added\n\n* `mapFailTBase` - map inner monad (e.g. lift)\n* `mapFailTFail`
  - map error type\n\n## 1.0.0\n\n### Added\n\n* Module `Control.Monad.Fail` containing
  monadic version of\n  `Control.Applicative.Fail`\n* Tests added: all properties
  (Monad, Applicative, Monoid laws) are\n  prooved with QuickCheck and package `checkers`\n*
  `runFail` and `runDLFail`: functions to unwrap `Fail`\n* dependencies added: `dlist`,
  `mtl`, `transformers`\n\n### Removed\n\n* `fsucc`: use `return` / `pure` instead\n*
  `bindFail` and `composeFail`: use monadic fail instead\n\n### Changed\n\n* `ffail`
  and `fwarn` renamed to `afail` and `awarn`\n* `afail` and `awarn` are more generic
  now\n* documentation strictly improoved\n\n## 0.0.3\n\nFirst usable version\n"
basic-deps:
  base: ! '>=4.6 && <5'
  dlist: -any
  bifunctors: -any
  mtl: -any
  transformers-base: -any
  transformers: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 1.0.0
- 1.1.0
- 1.1.1
author: Aleksey Uimanov
latest: 1.1.1
description-type: markdown
description: ! "# What is it for?\n\nAssume you have some type\n\n```haskell\ndata
  Animal = Animal\n    { species :: String\n    , weight  :: Double\n    , age     ::
  Int\n    } deriving (Show)\n\n```\n\nAnd you would like to produce this value from
  some data (e.g. query\nparameters). There can be some warnigns or value can not
  be produced\nat all. It would be great to have some simple tool to notify about\nwarnings
  and/or fail computation.\n\nLike that:\n\n```haskell\nlet spc = \"Parastratiosphecomyia
  stratiosphecomyioides\"\n    w = 100\n    a = 27234\n    animal :: Fail [String]
  Animal\n    animal = Animal\n             <$> (if length spc > 20\n                  then
  awarn \"Name is too long\" spc\n                  else if spc == \"\"\n                       then
  afail \"Name can not be empty\"\n                       else pure spc)\n             <*>
  (if w < 0\n                  then afail \"Weight can not be negative\"\n                  else
  pure w)\n             <*> (if a < 0\n                  then afail \"Age can not
  be negative\"\n                  else pure a)\n```\n\nNow you can inspect the value
  we have got\n\n```haskell\n>>> animal\nFail [\"Name is too long\"] (Just (Animal
  {species = \"Parastratiosphecomyia stratiosphecomyioides\", weight = 100.0, age
  = 27234}))\n\n>>> getSucc animal\nJust (Animal {species = \"Parastratiosphecomyia
  stratiosphecomyioides\", weight = 100.0, age = 27234})\n\n>>> getFail animal\nJust
  [\"Name is too long\"]\n```\n\nNow this example can be rewritten with monadic syntax
  inside field\ncheckers using module `Control.Monad.Fail`:\n\n```haskell\nlet animal
  :: Fail [String] Animal\n    animal = Animal\n             <$> (runFailI $ do\n
  \                         when (length spc > 20) $ mwarn \"Name is too long\"\n
  \                         when (spc == \"\") $ mfail \"Name can not be empty\"\n
  \                         return spc)\n             <*> (runFailI $ do\n                          when
  (w < 0) $ mfail \"Weight can not be negative\"\n                          return
  w)\n             <*> (runFailI $ do\n                          when (a < 0) $ mfail
  \"Age can not be negative\"\n                          return a)\n```\n"
license-name: BSD-3-Clause
