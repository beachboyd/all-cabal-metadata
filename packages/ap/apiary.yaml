homepage: https://github.com/philopon/apiary
changelog-type: markdown
hash: 68a326fabb509aba077c3d479050f26417aaa7656379faffd017a57cc979a389
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.0 && <3.3'
  base: ! '>=4.6 && <5.0'
  HUnit: ! '>=1.2 && <1.4'
  apiary: -any
  tasty-quickcheck: ! '>=0.8 && <0.9'
  mtl: ! '>=2.1 && <2.3'
  tasty-hunit: ! '>=0.9 && <0.10'
  wai-extra: ! '>=3.0 && <3.1'
  tasty: ! '>=0.10 && <0.12'
  http-types: ! '>=0.8 && <0.10'
  aeson: ! '>=0.8 && <1.3'
  directory: -any
maintainer: HirotomoMoriwaki<philopon.dependence@gmail.com>, 韩冬<drkoster@qq.com>
synopsis: Simple and type safe web framework that generate web API documentation.
changelog: ! "# 2.1.1\n* Bump aeson and time version in dependencies.\n\n# 2.1.0\n*
  GHC 8.0/8.2 compatible\n* merge web-routing modules, `Network.Routing.XXX` changed
  to `Data.Apiary.Routing.XXX`.\n\n# 2.0.2\n* add json to send ToJson instances with
  auto 'application/json' content type.\n\n# 2.0.1\n* document Data.Param.File\n*
  expose Control.Monad.Apiary.Action.getReqBodyJSON\n\n# 2.0.0\n* add methods to get
  application from Apiary monad stack.\n* add Control.Monad.Apiary.Action.application
  to mount a wai application at certain route.\n* rewrite getReqBody to allow file
  upload with temp file backend, check out ApiaryConfig and Data.Param.File.\n* guard
  against large request body.\n* add Control.Monad.Filter.jsonReqBody to do type level
  route based on request body's JSON type.\n\n# 1.4.5\n* fix: MonadPlus lows of ApiaryT
  Monad\n\n# 1.4.4\n* use wai-extra to parse request body\n\n# 1.4.3\n* ghc-7.10 compatible\n\n#
  1.4.2\n* fix: remove async from API document\n\n# 1.4.1\n* add viewport, charset,
  and async to auto generate API document\n\n# 1.4.0\n* remove Data.Apiary.Compat
  module\n* remove bytestring-lexing(and alex) dependency\n\n# 1.3.0\n* new router(web-routing
  package)\n* new dictionary\n\n    insert -\\> add\n    NotMember -\\> (\\</)  etc...\n\n*
  add Filter,Filter' type\n* remove focus'\n\n    focus' -\\> focus\n    focus  -\\>
  [delete]\n\n* change boolean query behaviour\n\n    old: ?key == fail\n    new:
  ?key == true\n\n# 1.2.3\n* fix haddock documentation.\n\n# 1.2.2\n* export getReqBody.\n\n#
  1.2.1\n* reduce dependencies.\n* relax version restriction of monad-control.\n*
  move pure capture function.\n* export hoistActionT, focus', noExtension.\n\n# 1.2.0\n*
  good bye wai-2.\n* add Web.Apiary.Develop module for develop static file.\n* *change*
  response body function behaviour(append to set).\n* add append* functions.\n* remove
  MonadHas class. add MonadExt class.\n* add action vault for extension.\n* change
  binary package to cereal package.\n\n## apiary-websockets\n* fix actionWithWebSockets
  don't exec action.\n\n## apiary-session/apiary-clientsession/apiary-authenticate\n*
  new session system.\n\n# 1.1.4\n* enhance API documentation.\n* add MonadHas class.\n*
  add devFile action.\n\n# 1.1.3\n* wildcard, parameter Accept header.\n\n## apiary-mongoDB(1.1.1)\n*
  MongoAccess class\n\n## apiary-logger(1.1.1)\n* Logging class\n\n## apiary-persistent(1.1.1)\n*
  RunSQL class\n\n# 1.1.2\n* re-export Web.Apiary from Web.Apiary.Heroku.\n\n# 1.1.1\n*
  add request test to web API documentation.\n\n# 1.1.0\n* Added Extension class.
  now Extension can add middleware.\n* Added apiary-helics submodule.\n\n# 1.0.0\n*
  included named parameter. motivation:\n\n    changing filter order\n\n    `filterA
  . filterB . action $ \\a b -> act` to\n\n    `filterB . filterA . action $ \\b a
  -> act`\n                                   ~~~\n    changes argument order. it's
  too bad...\n\n* simplified Strategy type class.\n* removed DEPRECATED functions.\n*
  changed runner type.\n* changed module structure.\n* API freeze. I'll pay attention
  to compatibility, maybe...\n\n# 0.17.2\n* send 302 if file not midified.\n\n# 0.17.1\n*
  relax switchQuery.\n\n              old   new\n    key       True  True\n    key=true
  \ False True\n    key=false False False\n\n# 0.17.0\n* fix not accept in multi Accept
  header.\n* add greedy path capture('\\*\\*').\n* add switchQuery filter.\n* add
  Heroku module.\n* add google analytics support to API documentation.\n\n## Extension
  API\n* change interface.\n* fix bug which immediately finalize.\n* deprecate preAction.\n*
  Category initializer only ghc-7.8+.\n\n## new extensions\n* apiary-mongoDB\n* apiary-memcached\n\n#
  0.16.0\n* new Extension API.\n* add middleware function.\n* remove Typeable restriction
  from Path/Query class.\n* add Optional strategy, (=?!:) query fetcher.\n* add accept
  filter.\n* add Path/Query instances to Day.\n\n# 0.15.2\n* you can set status and
  response headers anywhere.\n* deprecate lbs.\n* add bytes, lazyBytes(~ lbs), text,
  lazyText, showing, string, char request body functions. these functions **append**
  request body.\n* add reset function to reset request body to empty.\n\n# 0.15.1\n*
  enhance performance(especially parsing parameter).\n\n# 0.15.0\n* enhance performance(new
  router).\n* add anyPath function.\n\n# 0.14.0\n* change First Strategy behaviour(check
  first param only).\n* merge method and stdMethod function.\n* rename function (response
  -> rawResponse)\n* add apiary-purescript\n\n## documentation\n* changed how to generate
  documentation. use defaultDocumentationAction action.\n* now, condition which is
  after document function, will be documented. use noDoc function.\n* abolish ':'
  query document api. use (??) function.\n* deprecated () route decument api. use
  [].\n\n\n# 0.13.0\n* Option that generate full embed documentation.\n* Add precondition,
  rpHtml functions.\n\n## API documentation page\n* precondition\n* multi action\n*
  use route string as id of html\n\n\n# 0.12.8\n* Option that doesn't generate documentation.\n*
  Change fail of ActionT behaviour.\n  ( Pass next action -> return 500 error immediately.)\n\n##
  API documentation page\n* collapse\n\n\n# 0.12.5\n* Enhance API documentation.\n*
  Description using variable.\n\n# 0.12.0\n* Automatically generate API documentation.\n*
  Remove Functor restriction from ApiaryT.\n\n# 0.11.1\n* Generalize proxy.\n* Fix
  capture behaviour.\n* Add endPath function.\n\n# 0.11.0\n* Change capture internal
  implimentation.\n* Add path, fetch pure capture function.\n\n## apiary-clientsession\n*
  Add prefix SessionConfig fields.\n\n\n# 0.10.0\n* wai-3.0.\n* Add response function.\n*
  Add MonadCatch, MonadMask instances to ActionT.\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.9'
  bytestring: ! '>=0.10 && <0.11'
  wai: ! '>=3.0 && <3.3'
  case-insensitive: ! '>=1.1 && <1.3'
  base: ! '>=4.7 && <5.0'
  data-default-class: ! '>=0.0 && <0.1'
  time: ! '>=1.4 && <1.9'
  blaze-markup: ! '>=0.6 && <0.8'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.1 && <1.3'
  monad-control: ! '>=0.3 && <1.1'
  stringsearch: ! '>=0.3 && <0.4'
  unix-compat: ! '>=0.4 && <0.5'
  process: ! '>=1.2 && <2.0'
  http-date: ! '>=0.0 && <0.1'
  blaze-builder: ! '>=0.3 && <0.5'
  ghc-prim: -any
  vault: ! '>=0.3 && <0.4'
  mime-types: ! '>=0.1 && <0.2'
  mtl: ! '>=2.1 && <2.3'
  hashable: ! '>=1.1 && <1.3'
  blaze-html: ! '>=0.7 && <0.9'
  transformers-base: ! '>=0.4 && <0.6'
  wai-extra: ! '>=3.0.15 && <3.1'
  transformers: ! '>=0.2 && <0.6'
  bytestring-lexing: ! '>=0.5 && <0.6'
  hetero-dict: ! '>=0.1.1 && <0.1.2'
  resourcet: ! '>=0.4.6 && <1.2'
  http-types: ! '>=0.8 && <0.10'
  aeson: ! '>=0.8 && <1.3'
  template-haskell: ! '>=2.8 && <2.13'
  primitive: -any
all-versions:
- '0.1.0.1'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.2.0'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.2.0'
- '0.4.3.0'
- '0.4.3.2'
- '0.5.0.0'
- '0.5.1.0'
- '0.6.0.1'
- '0.6.1.0'
- '0.7.0.0'
- '0.8.0.0'
- '0.9.0.0'
- '0.10.0'
- '0.11.0'
- '0.11.1'
- '0.11.2'
- '0.11.3'
- '0.12.2'
- '0.12.3'
- '0.12.4'
- '0.12.5'
- '0.12.6'
- '0.12.7'
- '0.12.8'
- '0.13.0'
- '0.14.0'
- '0.14.0.1'
- '0.15.0'
- '0.15.1'
- '0.15.2'
- '0.16.0'
- '0.17.0'
- '0.17.1'
- '0.17.2'
- '1.0.0'
- '1.1.0'
- '1.1.1'
- '1.1.2'
- '1.1.3'
- '1.1.4'
- '1.2.0'
- '1.2.1'
- '1.2.2'
- '1.2.3'
- '1.3.0'
- '1.4.0'
- '1.4.2'
- '1.4.3'
- '1.4.4'
- '1.4.5'
- '2.0.0'
- '2.0.1'
- '2.0.1.1'
- '2.0.2'
- '2.1.0'
- '2.1.1'
author: HirotomoMoriwaki<philopon.dependence@gmail.com>
latest: '2.1.1'
description-type: haddock
description: ! 'Simple and type safe web framework that can be automatically generate
  API documentation.


  @

  &#123;-&#35; LANGUAGE QuasiQuotes &#35;-&#125;

  &#123;-&#35; LANGUAGE OverloadedStrings &#35;-&#125;


  import Web.Apiary

  import Network.Wai.Handler.Warp

  import qualified Data.ByteString.Lazy.Char8 as L


  main :: IO ()

  main = runApiary (run 3000) def $ do

  &#32;&#32;[capture|/age::Int|] . ([key|name|] =: pLazyByteString) . method GET .
  action $ do

  &#32;&#32;&#32;&#32;&#32;&#32;(age, name) <- [params|age,name|]

  &#32;&#32;&#32;&#32;&#32;&#32;guard (age >= 18)

  &#32;&#32;&#32;&#32;&#32;&#32;contentType &#34;text/html&#34;

  &#32;&#32;&#32;&#32;&#32;&#32;mapM_ appendLazyBytes [&#34;&#60;h1&#62;Hello, &#34;,
  name, &#34;!&#60;/h1&#62;\\n&#34;]

  @


  @

  $ curl localhost:3000

  404 Page Notfound.

  $ curl ''localhost:3000/20?name=arice''

  &#60;h1&#62;Hello, arice!&#60;/h1&#62;

  $ curl ''localhost:3000/15?name=bob''

  404 Page Notfound.

  $ curl -XPOST ''localhost:3000/20?name=arice''

  404 Page Notfound.

  @


  * High performance(benchmark: <https://github.com/philopon/apiary-benchmark>).


  * Nestable route handling(Apiary Monad; capture, method and more.).


  * Type safe route filter.


  * Auto generate API documentation(example: <http://find-hackage.herokuapp.com/api/documentation>).


  more examples: <https://github.com/philopon/apiary/blob/v1.4.0/examples/>


  live demo: <http://find-hackage.herokuapp.com/> (source code: <https://github.com/philopon/find-hackage>)'
license-name: MIT
