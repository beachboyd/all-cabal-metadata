homepage: https://github.com/pyr/apotiki
changelog-type: ''
hash: db419c9c49d8d998804c4b62e6795ae97427db0b045653f35b5dc35683a9d61b
test-bench-deps: {}
maintainer: pyr@spootnik.org
synopsis: a faster debian repository
changelog: ''
basic-deps:
  openpgp-asciiarmor: ! '>=0.1'
  bytestring: ! '>=0.10.0.2'
  base: ==4.6.*
  text: ! '>=1.0.0.1'
  openpgp-crypto-api: ! '>=0.6.3'
  openpgp: ! '>=0.6.1'
  strict: ! '>=0.3.2'
  crypto-api: ==0.12.2.2
  containers: ! '>=0.5.0.0'
  tar: ! '>=0.4.0.1'
  binary: ! '>=0.7.1.0'
  old-time: ! '>=1.1.0.1'
  zlib: ! '>=0.5.4.1'
  attoparsec: ! '>=0.10.4.0'
  wai-extra: ! '>=2.0.3.1'
  transformers: ! '>=0.3.0.0'
  wai-middleware-static: ! '>=0.4.0.2'
  scotty: ! '>=0.6.2'
  http-types: ! '>=0.8.3'
  aeson: ! '>=0.6.2.1'
  directory: ! '>=1.2.0.1'
  cryptohash: ! '>=0.9.1'
all-versions:
- 0.5.1
- 0.5.2
author: Pierre-Yves Ritschard
latest: 0.5.2
description-type: markdown
description: ! "apotiki: a faster debian repository\n===================================\n\n![apotiki](http://i.imgur.com/3Jmupwb.jpg)\n\n([image
  source](http://commons.wikimedia.org/wiki/File:A_view_of_the_map_repository_at_The_National_Archives.jpg))\n\napotiki
  generates debian repositories fast. its goal is\nto be a great companion to [fpm](https://github.com/jordansissel/fpm)
  and\n[jenkins](http://jenkins-ci.org).\n\napotiki operates with the following features
  and constraints:\n\n* Supports a single debian release\n* Supports a single debian
  component\n* Supports an arbitrary number of architectures which need to be preprovisionned\n*
  Requires a valid PGP private key for signing\n\n## The Story\n\nYou operate a production
  environment and rely on software that is more recent than is\navailable on a standard
  Debian or Ubuntu distribution ? Apotiki helps you distribute\nsoftware by creating
  a separate debian repository which you can add to your apt sources.\n\nTurns out
  there's already software available for this, such as [freight](https://github.com/rcrowley/freight),\napotiki's
  angle is to work very fast for the most common use case.\n\n## Companion software\n\n[fpm](https://github.com/jordansissel/fpm)
  is a great tool to build Debian packages with.\nIt can produce packages from directories,
  gems, npm or pip libraries.\n\n[jenkins](http://jenkins-ci.org) or [travis-ci](http://travis-ci.com)
  can produce artifacts by running\nscripts.\n\n## Using\n\napotiki has two modes
  of operation, try not to mix the two too much:\n\n* `apotiki insert`: pushes a list
  of packages, given on the command line to the repo \n* `apotiki web`: start up a
  web service on port 8000 to display the repository and accept new packages\n\nRunning
  apotiki with no arguments or `help` will tell you a bit about usage.\n\nIf you wish
  to submit packages to the repository with curl here is the relevant command line\nassuming
  your package file is `package-foo.deb`\n\n```bash\ncurl -X POST -F \"package=@/path/to/package-foo.deb\"
  http://repo-host:8000/repo\n```\n\n## Building\n\nApotiki is a haskell program and
  relies on both the ghc compiler and\ncabal. They are probably already available
  in your platform of choice.\n\nOnce cabal is installed, just run:\n\n```bash\ncabal
  install\n```\n\nAlternatively, you can build apotiki with docker. Just run:\n\n```\nsudo
  docker build .\n```\n\nThe resulting container will have the built cabal executable.\n\n##
  Installing\n\nYou can either run `cabal install` locally or distribute the built\nexecutable
  available in `dist/build/apotiki/apotiki`.\n\n## Configuring\n\nFor now the configuration
  is a serialized haskell structure:\n\n```haskell\nApotikiConfig {\n  keyPath = \"/etc/apotiki.key\",
  \     -- path to a PGP private key\n  architectures = [\"amd64\", \"i386\"], --
  list of supported architectures\n  component = \"main\",                -- debian
  release component\n  release = \"precise\",               -- debian release name\n
  \ label = \"Apotiki\",                 -- release label\n  origin = \"Apotiki\",
  \               -- release origin\n  repoDir = \"/srv/repo\"              -- repository
  location, expose via http\n}\n```\nThe PGP private key you wish to use can be exported
  with:\n\n```\ngpg --export-secret-keys repository-key@your.domain > /etc/apotiki.key\n```\n\nThe
  config file path can be controlled with the `APOTIKI_CONFIG` environment\nvariable.\n\n##
  Caveats\n\nError handling is suboptimal to say the least. we'll get there.\n"
license-name: MIT
