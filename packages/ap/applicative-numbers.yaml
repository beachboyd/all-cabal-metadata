homepage: http://haskell.org/haskellwiki/applicative-numbers
changelog-type: ''
hash: c733f1b1ae473d3a5e201dee792f3510982d6e63bd30c25433467eaef6d62e2c
test-bench-deps: {}
maintainer: conal@conal.net
synopsis: Applicative-based numeric instances
changelog: ''
basic-deps:
  base: <5
all-versions:
- 0.0.0
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- 0.1.2
- 0.1.3
author: Conal Elliott
latest: 0.1.3
description-type: haddock
description: ! 'Any applicative functor can be given numeric instances in a boilerplate
  way.

  The /applicative-numbers/ package provides an include file that makes it a

  snap to define these instances.

  See "Data.Numeric.Function" for an example.


  Project wiki page: <http://haskell.org/haskellwiki/applicative-numbers>


  Copyright 2009-2013 Conal Elliott; BSD3 license.



  Instances of @Num@ classes for applicative functors.  To be @#include@''d after

  defining @APPLICATIVE@ as the applicative functor name and @CONSTRAINTS@ as a

  list of constraints, which must carry its own trailing comma if non-empty.

  The @APPLICATIVE@ symbol gets @#undef@''d at the end of the include file, so

  that multiple includes are convenient.


  For instance,


  @

  #define INSTANCE_Ord

  #define INSTANCE_Enum


  #define APPLICATIVE Vec2

  #include \"ApplicativeNumeric-inc.hs\"


  #define APPLICATIVE Vec3

  #include \"ApplicativeNumeric-inc.hs\"


  #define APPLICATIVE Vec4

  #include \"ApplicativeNumeric-inc.hs\"

  @


  You''ll also have to import ''pure'' and ''liftA2'' from "Control.Applicative"

  and specify @the FlexibleContexts@ language extension (due to an implementation
  hack).


  Some instances are generated only if a corresponding CPP symbol is

  defined: @INSTANCE_Eq@, @INSTANCE_Ord@, @INSTANCE_Show@, @INSTANCE_Enum@'
license-name: BSD-3-Clause
