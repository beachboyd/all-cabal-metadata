homepage: https://github.com/trskop/apache-md5
changelog-type: markdown
hash: e41d43eba938331a51fb0ead7cd004c6f539820c06aed48a77eb67e04eee39f2
test-bench-deps:
  test-framework-hunit: ! '>=0.2.6 && <1'
  bytestring: ==0.10.*
  test-framework: ! '>=0.8 && <1'
  MonadRandom: ! '>=0.2.0.1 && <0.5'
  base: ==4.*
  criterion: ! '>=1.0.0.0 && <2'
  process: ! '>1.1.0.1 && <1.5'
  HUnit: ! '>=1.2 && <2'
  transformers: ! '>=0.3 && <0.6'
  random: ! '>=1.0.1.1 && <2'
  deepseq: ! '>=1.1.0.0 && <2'
maintainer: peter.trsko@gmail.com
synopsis: Apache specific MD5 digest algorighm.
changelog: ! "# ChangeLog / ReleaseNotes\n\n\n## Version 0.6.1.4\n\n* Bugfix: GHC
  7.4 build fails due to missing GHC.Generics. See\n  <https://github.com/trskop/apache-md5/pull/1
  pull request from Adam Bergmark>\n  for details. (change)\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/apache-md5-0.6.1.4>\n\n\n## Version 0.6.1.3\n\n*
  Minor documentation changes. (change)\n* Making deepseq dependency of library in
  sync with benchmark dependency.\n  Version <http://hackage.haskell.org/package/apache-md5-0.6.1.2
  0.6.1.2> on\n  Hackage was modified to include this change already. (change)\n\n\n##
  Version 0.6.1.2\n\n* Bumping up dependency on [MonadRandom][] to include `0.4`.
  (change, affects\n  only benchmark and test-suite)\n* Adding sensible upper bound
  to [deepseq][] package. (change, affects\n  only benchmark)\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/apache-md5-0.6.1.2>\n\n\n## Version 0.6.1.1\n\n*
  Cleanup of version dependencies, most importantly:\n    * Bumped transformers dependency
  from `< 0.4` to `0.5`.\n    * Bumped criterion minimal version to 1.0.0.0. This
  required update of\n      benchmarking code.\n* Documentation updates.\n* Uploaded
  to [Hackage][]:\n  <http://hackage.haskell.org/package/apache-md5-0.6.1.1>\n\n\n##
  Version 0.6.1.0\n\n* Function `mkSalt` rejects empty `ByteString` and returns `Nothing`
  for it.\n* Using `NoImplicitPrelude` language extension.\n* Example program is once
  again compilable.\n* Minor documentation updates including `README.md`.\n* Uploaded
  to [Hackage][]:\n  <http://hackage.haskell.org/package/apache-md5-0.6.1.0>\n\n\n##
  Version 0.6.0.0\n\n* Introducing Salt newtype wrapper to guarantee that it consists
  of only\n  characters that can be used in htpasswd entry.\n* Algorithm implementation
  details and helper functions were all moved to\n  `Data.Digest.ApacheMD5.Internal`
  module to make it explicit that they aren't\n  part of stable API.\n* Exposing `Data.Digest.ApacheMD5.Internal`
  module so that library authors\n  still have the ability to get the most out of
  this package.\n* Updated `README.md`, `example.hs`, tests and benchmarks.\n* Uploaded
  to [Hackage][]:\n  <http://hackage.haskell.org/package/apache-md5-0.6.0.0>\n\n\n##
  Version 0.5.0.1\n\nRelease date: **2013-07-27 10:38 +0200**\n\n* Minor release with
  mostly documentation updates.\n* Introducing `example.hs` that creates htpasswd
  like entry and prints it to\n  stdout. (new)\n* Updated `README.md` with reference
  to [Hackage][] and example mentioned\n  above.\n* Introducing this ChangeLog / ReleaseNotes
  file. (new)\n* Clean up of benchmark dependencies.\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/apache-md5-0.5.0.1>\n\n\n## Version 0.5.0.0\n\nRelease
  date: **2013-07-26 20:29 +0200**\n\n* First public release.\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/apache-md5-0.5.0.0>\n\n\n[Hackage]:\n  http://hackage.haskell.org/\n
  \ \"HackageDB (or just Hackage) is a collection of releases of Haskell packages.\"\n[MonadRandom]:\n
  \ http://hackage.haskell.org/package/MonadRandom\n  \"Hackage: MonadRandom package.\"\n[deepseq]:\n
  \ http://hackage.haskell.org/package/deepseq\n  \"Hackage: deepseq package.\"\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4 && <5'
all-versions:
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.1.0
- 0.6.1.1
- 0.6.1.2
- 0.6.1.4
author: Peter TrÅ¡ko <peter.trsko@gmail.com>
latest: 0.6.1.4
description-type: markdown
description: ! "# Apache MD5\n\n[![Hackage](http://img.shields.io/hackage/v/apache-md5.svg)][Hackage:
  apache-md5]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/apache-md5.svg)](http://packdeps.haskellers.com/reverse/apache-md5)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Build](https://travis-ci.org/trskop/apache-md5.svg)](https://travis-ci.org/trskop/apache-md5)\n\n\n##
  Description\n\nHaskell implementation of Apache specific MD5 digest algorithm that
  uses\nOpenSSL MD5.\n\n\n## Documentation\n\nStable releases with API documentation
  are available on\n[Hackage][Hackage: apache-md5].\n\n\n## Installation\n\nRequires
  OpenSSL library with header files. On Debian and Ubuntu Linux it's\nprovided by
  [`libssl-dev`][libssl-dev] package that can be installed using\n`apt-get`:\n\n    $
  apt-get install libssl-dev\n\nFor more see `apt-get(8)` manual page or e.g. [Ubuntu
  Documentation: AptGet\nHowto][apt-get-howto].\n\nAfter that just use [`cabal-install`][cabal-install]
  as you would normally do.\nFor details see [HaskellWiki: How to install a Cabal
  package][].\n\n\n### Building Options\n\n* `-fpedantic` (disabled by default)\n\n
  \ Pass additional warning flags to GHC.\n\n\n## Example\n\nCreate htpasswd like
  entry and print it to stdout:\n\n```Haskell\nmodule Main (main)\n    where\n\nimport
  Control.Applicative ((<$>))\nimport System.Environment (getArgs, getProgName)\nimport
  System.Exit (exitFailure)\nimport System.IO (hPutStrLn, stderr)\n\nimport Control.Monad.Random
  (evalRandIO, getRandomRs)\n    -- MonadRandom package http://hackage.haskell.org/package/MonadRandom/\nimport
  Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS (index, pack)\nimport
  qualified Data.ByteString.Char8 as C8 (concat, pack, putStrLn, singleton)\n    --
  bytestring package http://hackage.haskell.org/package/bytestring\nimport Data.Digest.ApacheMD5
  (Salt, apacheMD5, mkSalt, unSalt)\nimport Data.Digest.ApacheMD5.Internal (alpha64)\n\n\nhtpasswdEntry
  :: String -> String -> Salt -> ByteString\nhtpasswdEntry username password salt
  = C8.concat\n    [ C8.pack username\n    , C8.pack \":$apr1$\"\n    , unSalt salt\n
  \   , C8.singleton '$'\n    , apacheMD5 (C8.pack password) salt\n    ]\n\ngenSalt
  :: IO Salt\ngenSalt = do\n    Just s <- evalRandIO $ mkSalt . BS.pack . map (BS.index
  alpha64) . take 8\n        <$> getRandomRs (0, 63)\n        -- We know that Salt
  is correctly generated, since we use alpha64 to do\n        -- it. That is the reason
  why we can pattern match on Just.\n        --\n        -- Other option would be
  to use Salt value constructor from\n        -- Data.Digest.ApacheMD5.Internal module.\n
  \   return s\n\nmain :: IO ()\nmain = do\n    args <- getArgs\n    progName <- getProgName\n
  \   case args of\n        [userName, password] ->\n            genSalt >>= C8.putStrLn
  . htpasswdEntry userName password\n        _ -> do\n            hPutStrLn stderr
  $ \"Usage: \" ++ progName ++ \" USER_NAME PASSWORD\"\n            exitFailure\n```\n\nCompiling
  and running above example:\n\n    $ ghc -Wall example.hs\n    [1 of 1] Compiling
  Main             ( example.hs, example.o )\n    Linking example ...\n    $ ./example\n
  \   Usage: example USER_NAME PASSWORD\n    $ ./example foo 123456\n    foo:$apr1$yM9AMlr2$EHssuHrqSAe8HPrAdN7HC/\n\n\n##
  Unit Tests\n\nRequires `htpasswd` command line utility installed. On Debian and
  Ubuntu Linux\nit is provided by [`apache2-utils`][apache2-utils] package that can
  be\ninstalled using `apt-get`:\n\n    $ apt-get install apache2-utils\n\nFor more
  see `apt-get(8)` manual page or e.g. [Ubuntu Documentation: AptGet\nHowto][apt-get-howto].\n\nTo
  run tests use command similar to this:\n\n    $ cabal configure --enable-tests &&
  cabal build && cabal test\n\n\n## Benchmarks\n\nThis package provides [Criterion][]
  benchmarks, to run them you can use\nsomething like:\n\n    $ cabal configure --enable-benchmarks
  && cabal build && cabal bench\n\nTo generate HTML output one needs to specify output
  file. Then the last\ncommand in above chain would look like:\n\n    $ cabal bench
  --benchmark-option=--output=benchmarks.html\n\nWhere `benchmarks.html` is the name
  of [Criterion][] generated HTML file.\n\n\n## Contributions\n\nContributions, pull
  requests and bug reports are welcome! Please don't be\nafraid to contact the author.\n\n\n\n[apache2-utils]:\n
  \   http://packages.debian.org/stable/apache2-utils\n    \"apache2-utils Debian
  package\"\n[apt-get-howto]:\n    https://help.ubuntu.com/community/AptGet/Howto\n
  \   \"apt-get Howto\"\n[cabal-install]:\n    http://haskell.org/haskellwiki/Cabal-Install\n
  \   \"HaskellWiki: Cabal-install\"\n[Criterion]:\n    http://hackage.haskell.org/package/criterion\n
  \   \"criterion package on Hackage\"\n[Hackage: apache-md5]:\n    http://hackage.haskell.org/package/apache-md5\n
  \   \"apache-md5 package on Hackage\"\n[Haskell.org]:\n    http://www.haskell.org\n
  \   \"The Haskell Programming Language\"\n[HaskellWiki: How to install a Cabal package]:\n
  \   http://haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package\n    \"HaskellWiki:
  How to install a Cabal package\"\n[libssl-dev]:\n    http://packages.debian.org/lenny/libssl-dev\n
  \   \"libssl-dev Debian package\"\n[tl;dr Legal: BSD3]:\n    https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\n
  \   \"BSD 3-Clause License (Revised)\"\n"
license-name: BSD-3-Clause
