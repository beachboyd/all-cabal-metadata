homepage: https://github.com/j3h/doc-review
changelog-type: text
hash: 262b12ae8192ed6ae91a59a31d9f4bf6078fe4a05c3c6cbb5abd89229558ac4e
test-bench-deps: {}
maintainer: josh.hoyt@galois.com
synopsis: Document review Web application, like http://book.realworldhaskell.org/
changelog: ! 'Release 0.7.1

  --------------------------------------------------


  Fixed JavaScript syntax error in hsbook.js


  Release 0.7

  --------------------------------------------------


  Initial public release

'
basic-deps:
  MonadCatchIO-transformers: -any
  bytestring: ! '>=0.9.1 && <0.10'
  MonadRandom: ==0.1.*
  unix: <2.5
  feed: ==0.3.*
  base: ! '>=4 && <5'
  time: ==1.1.*
  base64-bytestring: ==0.1.*
  monads-fd: ! '>=0.1 && <0.2'
  text: ! '>=0.7 && <0.11'
  haskell98: -any
  json: ==0.4.*
  filepath: ! '>=1.1 && <1.3'
  network: ==2.2.*
  xml-basic: ==0.1.*
  sqlite: ==0.5.*
  xml: ==1.3.*
  containers: <0.5
  snap-server: ! '>=0.2 && <0.3'
  tagchup: ==0.4.*
  xhtml-combinators: <0.3
  binary: ==0.5.*
  snap-core: ! '>=0.2 && <0.3'
  old-locale: ==1.0.*
  hexpat: ! '>=0.18.2 && <0.20'
  transformers: ==0.2.*
  heist: ! '>=0.2.2 && <0.3'
  directory: <1.2
all-versions:
- '0.7'
- 0.7.1
author: Josh Hoyt
latest: 0.7.1
description-type: text
description: ! "Collaborative Document Review Web Application README\n####################################################\n\nThis
  package provides a Web application for soliciting\nparagraph-by-paragraph comments
  on a document. The application was\ninspired by and re-uses the user interface and
  much of the JavaScript\ncode from the excellent <http://book.realworldhaskell.org/>.\n\nThe
  original Web application was part of a Docbook-based toolchain\nthat was used to
  produce Real World Haskell, and was written in Python\nusing Django. This implementation
  is intended to be as independent as\npossible from the authoring system that is
  used to produce a document,\nand to run in a wide variety of environments.\n\nIf
  you have feature requests, bug reports or other feedback, please\nlet me know!\n\nQuick
  Start\n--------------------------------------------------\n\nFor most users, you
  can be up and running by following these steps:\n\n1. Prepare your documents:\n\n
  \  * Add a ``<div>`` tag with ``class=\"chapter\"`` around the content that you\n
  \    will want comments on.\n   * Add an ``id`` attribute to all of the paragraphs
  that you wish to\n     enable comments on.\n2. Build and install using ``cabal install``
  to obtain a doc-review\n   executable::\n\n    $ cabal install doc-review\n3. Test
  your documents::\n\n    $ doc-review run --content-dir=$PATH_TO_YOUR_DOCUMENTS\n\n
  \  Comments you leave when testing will not be saved when the server\n   is restarted.\n4.
  Select your backend. Right now, that probably means the SQLite\n   backend::\n\n
  \   $ doc-review run --content-dir=$PATH_TO_YOUR_DOCUMENTS\n       --store=sqlite:comments.db\n\n
  \  This command will create ``comments.db`` if necessary, and store all\n   comments
  in that SQLite database.\n\n5. Decide how you are going to run the server. Running
  this program as\n   a daemon and configuring your Web server to use reverse proxying
  is\n   the most straightforward solution.\n\nMarking up documents\n--------------------------------------------------\n\n``doc-review``
  will recursively traverse the directory specified by the\n``--content-dir`` parameter
  looking for files with the extension\n``.html``, ``.htm`` or ``.xhtml``. It will
  parse those files as HTML,\nlooking for paragraphs marked as commentable, and will
  store those\nchapter definitions in the data store.\n\nIn order for a document to
  be commentable, you must load the comment\nJavaScript into the document, by adding
  the following lines to the\n``<head>`` of the document::\n\n <script type=\"text/javascript\"\n
  \        src=\"/support/javascript/jquery.js\"></script>\n <script type=\"text/javascript\"\n
  \        src=\"/support/javascript/form.js\"></script>\n <script type=\"text/javascript\"\n
  \        src=\"/support/javascript/hsbook.js\"></script>\n\nYou will likely want
  to (but by no means have to) reuse the CSS for\nthe comments::\n\n <link rel=\"stylesheet\"
  type=\"text/css\" href=\"/comments.css\"/>\n\nTo mark a paragraph as commentable,
  it must be inside of a ``<div>``\nwith ``class=\"chapter\"``. The choice of ``class=\"chapter\"``
  is for\ncompatibility with the Real World Haskell implementation.\n\nThe current
  implementation (like the Real World Haskell\nimplementation) depends on the ``id``
  being unique across the full set\nof documents that you want comments on. That means
  that if you have\ntwo documents with paragraphs with ``id=\"sauteed-spinach\"``,
  then\ncomments left on either of those paragraphs will be visible in both\ndocuments.
  This can be useful if you have duplicated content, but if\nthe content is different,
  user (or author!) confusion can result.\n\nRunning the server\n--------------------------------------------------\n\nThe
  server is a plain HTTP server that serves three kinds of files:\n\n1. URLs under
  ``/comments/``, which serve the comments API. This is\nwhat is accessed by the JavaScript
  in order to insert the comments to\nthe document and to save user comments. These
  are the only dynamic\nURLs that will be served.\n\n2. The URL will be checked against
  the files in the directory\nspecified by ``--content-dir=``. That static file will
  be served if\nthere is a match.\n\n3. If no matching file was found, it will look
  for a matching file\nin the directory specified by ``--static-dir=`` and serve that.\n\nIt
  is likely that you will be integrating this server into a larger\nWeb site. In that
  case, you will likely want to reverse proxy requests\nfrom your main Web server
  to this server (using\ne.g. <http://httpd.apache.org/docs/2.2/mod/mod_proxy.html>).
  If you\nare running this server proxied by another Web server, you can serve\nthe
  content and other static files from that server to no ill effect\n(those files are
  served by default for convenience).\n\nStorage options\n--------------------------------------------------\n\nThere
  are three kinds of storage backend implemented at this time:\n\nIn-memory\n Store
  the comments in the server process' memory (no persistent\n storage). This means
  that all comments will be lost when the server\n is restarted. This is useful for
  testing and as a reference\n implementation of the storage API.\n\nFlat file\n Store
  the comments in flat files in the filesystem. The comments and\n other data are
  stored in a custom binary format. This backend is\n known to have race conditions
  and other non-ACID properties. It is\n not recommended that you use this store.\n\nSQLite\n
  Store the comments in a SQLite database. This is the best option for\n production
  use at this time. That being said, this is not really a\n production-ready solution,
  because database errors (e.g. a\n SQLITE_BUSY timeout) will result in a 500 error
  being returned to the\n client.\n\nThe output to ``doc-review --help`` will indicate
  how to specify each\nstore type.\n\nThe store API is well defined and easy to implement
  and test. Patches\nfor data storage improvements are welcome!\n\nBinary logging\n..................................................\n\nIn
  addition to the storage options specified above, there is an\nexperimental binary
  logging option that will append a binary log\nrecord of each store operation to
  a file in addition to applying it to\nthe store. This was implemented as a backup
  mechanism should the\nprimary store be corrupted, as replaying the operations from
  the log\nshould restore the contents of the data store.\n\nNote that this option
  is not well tested, and may disappear in future\nreleases.\n\nImplementation details\n--------------------------------------------------\n\nThis
  section discusses some implementation details that may be useful\nfor examining
  the data in the database or implementing your own\nstorage backend. As always, the
  code is the best reference, but this\ndiscussion should help you get started and
  serve as a rough\nspecification for what the code ought to do when it's not inherently\nclear.\n\nUser
  sessions\n..................................................\n\nThis server stores
  a session cookie for each browsing session that is\nrenewed on each request. The
  session cookie is used to look up the\nuser information to prefill when showing
  the add comment form. It is\nalso stored in the database so that the author/administrator
  can see\nwhich comments came from which browser. It is a rather imprecise\nmechanism,
  and easy to spoof (just send whatever session cookie you\nwant), but it is helpful
  for the user not to have to re-fill the form\nfields. The session cookie expires
  after 11 days without visiting any\npage on the site.\n\nTest suite\n..................................................\n\nThere
  is a test suite, which will be build when the parameter\n``--flags=test`` is supplied
  to cabal-install. *The test suite only\ntests the storage backends. The remainder
  of the code currently has no\nautomated tests.* The backends are tested using randomized
  testing for\nconsistency with each other as well as some relatively trivial, but\ncritical
  behavior.\n\nThe tests do not test concurrent access to the stores. There is no\nspecification
  of the behavior of the stores under concurrent\naccess. The SQLite and in-memory
  stores serialize access to the\nbackend between threads, so concurrency should not
  be an issue, but\nthe file-based backend may cause data loss under concurrent use.
  Tests\nwelcome.\n\nTo test the stores for consistency, the test suite creates two
  empty\nstores of different types and then randomly generates store\noperations.
  The store operations are performed to each store in turn,\nchecking that the operation
  returns the same result for both\nstores. This does not show that the stores behave
  correctly, but it\ndoes provide evidence that the implementations are consistent
  with\neach other.\n\nThere are not many tests for correctness, but there are a few
  tests\nthat perform an operation with a specified effect on the backend and\nthen
  make observations that the desired effect has occurred. These\ntests are run with
  each store in an empty state, and then a sequence\nof randomized operations that
  perturb the store's state are\nperformed. The properties are once again checked.
  This process is\nrepeated. This should provide evidence that the specified properties\nhold
  for the store without depending on it being in a particular state.\n\nFuture plans\n--------------------------------------------------\n\nAs
  usual, there are a whole list of features and changes that I'd like\nto make to
  this program. See TODO for this list. If a feature is\nimportant to you, or if you
  have an idea for a new feature, please let\nme know. The best way is to submit a
  patch!\n"
license-name: BSD-3-Clause
