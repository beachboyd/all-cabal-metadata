homepage: https://hackage.haskell.org/package/dobutokO2
changelog-type: markdown
hash: 616fffaa92445985c08f0cdd34179a1dfaeed8d7d6b1ed779ce8b9d92281ddc2
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: A program and a library to create experimental music from a mono audio and
  a Ukrainian text
changelog: "# Revision history for dobutokO2\n\n## 0.1.0.0 -- 2020-03-04\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.2.0.0 -- 2020-03-05\n\n* Second
  version. Added the functionality connected with octaves. Some documentation and
  code improvements.\n\n## 0.3.0.0 -- 2020-03-06\n\n* Third version. Added the opportunity
  to specify more parameters: additionally basic sound duration and the level of obertones
  influence the generated sounds.\nFixed issues with possibly incorrect argument sending
  to the SoX executable. Some documentation and code improvements.\n\n## 0.3.1.0 --
  2020-03-06\n\n* Third version revised A. Fixed issues with not being compiled because
  of the ambiguous variables and wrong function application.\n\n## 0.3.1.1 -- 2020-03-06\n\n*
  Third version revised B. Some documentation improvements for README.markdown file.\n\n##
  0.4.0.0 -- 2020-03-07\n\n* Fourth version. Fixed issues with wrongly realized rhythm
  behaviour. Now it corresponds to the documented.\n\n## 0.5.0.0 -- 2020-03-07\n\n*
  Fifth version. Added the possibility to specify an existing file by its absolute
  path to be used as a source for the sound information for SoX to generate the\nresulting
  file. Some documentation improvements.\n\n## 0.5.1.0 -- 2020-03-07\n\n* Fifth version
  revised A. Fixed issue with the order of actions in 'dobutokO2' function.\n\n##
  0.5.2.0 -- 2020-03-07\n\n* Fifth version revised B. Fixed issue with the name of
  the recorded informational sound file in the 'recAndProcess' function.\n\n## 0.5.3.0
  -- 2020-03-07\n\n* Fifth version revised C. Fixed issue with the noise reduction
  in the 'recAndProcess' function for the existing at the beginning file\n(it is not
  done at all in such a case). \n\n## 0.6.1.0 -- 2020-03-08\n\n* Sixth version revised
  A. Fixed issue with 'signsFromString' function that leads to performance penalty
  and to cycling. \n\n## 0.7.0.0 -- 2020-03-10\n\n* Seventh version. Added new explicit
  dependency (mmsyn2) that earlier was implicit. Added the opportunity to define in
  how many times the amplitude\nfor the second lower note is greater than for the
  main one and to define the music intervals for the notes (if any). Some improvements
  for the documentation.\n\n## 0.7.1.0 -- 2020-03-10\n\n* Seventh version revised
  A. Fixed issue with being not compiled because of the implicit dependency being
  not explicitly specified.\n\n## 0.7.1.1 -- 2020-03-10\n\n* Seventh version revised
  B. Fixed issue with improper README.markdown file information.\n\n## 0.7.2.0 --
  2020-03-11\n\n* Seventh version revised C. Improved README.markdown file. Added
  exporting for all the basic functions in the DobutokO.Sound module.\n"
basic-deps:
  mmsyn3: ! '>=0.1.4 && <1'
  base: ! '>=4.7 && <4.14'
  process: ! '>=1.4 && <1.8'
  mmsyn7ukr: ! '>=0.15.3 && <1'
  mmsyn7s: ! '>=0.6.6 && <1'
  mmsyn6ukr: ! '>=0.6.3.1 && <1'
  mmsyn2: ! '>=0.1.7 && <1'
  vector: ! '>=0.11 && <0.14'
  directory: ! '>=1.2.5 && <1.6'
all-versions:
- 0.7.2.0
author: OleksandrZhabenko
latest: 0.7.2.0
description-type: markdown
description: "A program and a library to create experimental music from\na mono audio
  and a Ukrainian text. It can also create a timbre\nfor the notes.\n\n                *****
  Usage *****\n                -----------------\n\nYou can use it as a library or
  an executable.\n\nPlease, check before executing whether there is no \"x.wav\",
  \"test*.wav\",\n\"result*.wav\" and \"end.wav\" files in the current directory,
  because they\ncan be overwritten. The same can be said about \"nx*.wav\" files in
  the directory.\n\nFor the executable you enter in the terminal:\n\ndobutokO2 {1
  | 2 | 3 | 4 | 5 | 6} {fileName} {Ukrainian text}\n\n  where filename is:\n  the
  full name of the file to be recorded in the current directory or\n  the full absolute
  path to the sound .wav file (or other one format\n  that is supported by your SoX
  installation) to obtain sound information from.\n\nIf the first command line argument
  equals to one of the numbers below, then\nthe program behaves as follows:\n\n  \"1\",
  or \"3\", or \"5\" ->  then the executable uses the oberTones functions,\n    so
  for the given parameters the obertones are the same for every call.\n\n  \"2\",
  or \"4\", or \"6\" -> then the program uses uniqOberTones functions.\n\n  \"3\",
  or \"4\", or \"5\", or \"6\" -> the program uses additional String\n    to define
  signs for the harmonics coefficients for obertones.\n      \n  In more detail:\n\n
  \ \"1\" -> basic functionality without the possibility to define individual obertones.\n
  \ \n  \"2\" -> basic functionality with the possibility to define individual obertones.\n
  \    In such a case, another text gives the other obertones.\n\n  \"3\" -> adittionally
  to basic functionality gives an opportunity \n     to specify the signs for the
  harmonics coefficients for obertones\n       by additional String.\n\n  \"4\" ->
  similarly to \"2\" gives an opportunity to specify the signs\n     for the harmonics
  coefficients for obertones by additional String.\n\n  \"5\" -> additionally to that
  one functionality provided by \"3\" gives\n     an opportunity to specify in how
  many times the amplitude for\n       the second lower note (if any) is greater,
  than the amplitude\n         for the main note and specify the intervals to be used\n
  \          for every note.\n\n   _  -> the program behaves like for the \"5\" option,
  but generates\n     obertones using additional String and allows maximum control
  over\n        the parameters.\n\nAfter the program executing (it takes some time)
  there is a file \"end.wav\" in the directory.\nThis is the resulting melody generated.\n\nThe
  program now lifts the frequencies to the octave with the number, which you\ncan
  specify during its execution.\n\nYou can specify some control parameters during
  the program execution. This\nleads to different sounding.\n\nYou can use the default
  values (backward compatible with the 0.2.0.0 version)\nby simply pressing 'Enter'
  while being prompted and the informational message\ncontains the line about the
  default value.\n\n** Note:\n\n* Better to execute in the RAM. Need rather a lot
  of space on the disk for\nthe resulting file \"end.wav\" and auxiliary files (MBs)
  for a short sound\nin the second command line arguments.\n\n"
license-name: MIT
