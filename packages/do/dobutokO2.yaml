homepage: https://hackage.haskell.org/package/dobutokO2
changelog-type: markdown
hash: d5f6465df9a655e9dc90919ecdf02fcc61029351ef6c012015d47a61eb2768cf
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: A program and a library to create experimental music from a mono audio and
  a Ukrainian text
changelog: "# Revision history for dobutokO2\n\n## 0.1.0.0 -- 2020-03-04\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.2.0.0 -- 2020-03-05\n\n* Second
  version. Added the functionality connected with octaves. Some documentation and
  code improvements.\n\n## 0.3.0.0 -- 2020-03-06\n\n* Third version. Added the opportunity
  to specify more parameters: additionally basic sound duration and the level of obertones
  influence the generated sounds.\nFixed issues with possibly incorrect argument sending
  to the SoX executable. Some documentation and code improvements.\n\n## 0.3.1.0 --
  2020-03-06\n\n* Third version revised A. Fixed issues with not being compiled because
  of the ambiguous variables and wrong function application.\n\n## 0.3.1.1 -- 2020-03-06\n\n*
  Third version revised B. Some documentation improvements for README.markdown file.\n\n##
  0.4.0.0 -- 2020-03-07\n\n* Fourth version. Fixed issues with wrongly realized rhythm
  behaviour. Now it corresponds to the documented.\n\n## 0.5.0.0 -- 2020-03-07\n\n*
  Fifth version. Added the possibility to specify an existing file by its absolute
  path to be used as a source for the sound information for SoX to generate the\nresulting
  file. Some documentation improvements.\n\n## 0.5.1.0 -- 2020-03-07\n\n* Fifth version
  revised A. Fixed issue with the order of actions in 'dobutokO2' function.\n\n##
  0.5.2.0 -- 2020-03-07\n\n* Fifth version revised B. Fixed issue with the name of
  the recorded informational sound file in the 'recAndProcess' function.\n\n## 0.5.3.0
  -- 2020-03-07\n\n* Fifth version revised C. Fixed issue with the noise reduction
  in the 'recAndProcess' function for the existing at the beginning file\n(it is not
  done at all in such a case). \n\n## 0.6.1.0 -- 2020-03-08\n\n* Sixth version revised
  A. Fixed issue with 'signsFromString' function that leads to performance penalty
  and to cycling. \n\n## 0.7.0.0 -- 2020-03-10\n\n* Seventh version. Added new explicit
  dependency (mmsyn2) that earlier was implicit. Added the opportunity to define in
  how many times the amplitude\nfor the second lower note is greater than for the
  main one and to define the music intervals for the notes (if any). Some improvements
  for the documentation.\n\n## 0.7.1.0 -- 2020-03-10\n\n* Seventh version revised
  A. Fixed issue with being not compiled because of the implicit dependency being
  not explicitly specified.\n\n## 0.7.1.1 -- 2020-03-10\n\n* Seventh version revised
  B. Fixed issue with improper README.markdown file information.\n\n## 0.7.2.0 --
  2020-03-11\n\n* Seventh version revised C. Improved README.markdown file. Added
  exporting for all the basic functions in the DobutokO.Sound module.\n\n## 0.7.2.1
  -- 2020-03-11\n\n* Seventh version revised D. Fixed issue with being not compiled
  because of the syntactic error.\n\n## 0.8.0.0 -- 2020-03-12\n\n* Eigth version.
  Added the new functions to the library that allow to produce richer sounds especially
  'oberSoXSynth2FDN' one. The user can now specify a\nfunction to be passed as an
  argument to it and obtain therefore own obertones formula. Added OPTIONS_GHC pragma
  to the module DobutokO.Sound.\n\n## 0.8.0.1 -- 2020-03-12\n\n* Eigth version revised
  A. Added the new functions to the exporting by the library.\n\n## 0.8.1.0 -- 2020-03-12\n\n*
  Eigth version revised B. Changed the sophisticated mechanism to provide real obertones
  in the 'oberSoXSynth2FDN' function.\n\n## 0.8.2.0 -- 2020-03-12\n\n* Eigth version
  revised C. Changed the sophisticated mechanism to provide real obertones in the
  'oberSoXSynth2FDN' function. Fixed issues with some zeroes\nin the functions. Some
  code improvements that give more stability. Documentation improvement.\n\n## 0.9.0.0
  -- 2020-03-13\n\n* Ninth version. Changed the module structure to four modules.
  Added new functions in the DobutokO.Sound.Functional module to filter possible beats.
  Changed some\nexports for DobutokO.Sound module.\n\n## 0.9.1.0 -- 2020-03-14\n\n*
  Ninth version revised A. Removed two functions from DobutokO.Sound.Functional module
  because of their inefficient work that leads to very long\n(possibly infinitely)
  computation. \n\n## 0.10.0.0 -- 2020-03-14\n\n* Tenth version. Added again the possibility
  to filter possible beats. Added new simple functions that are likely to work with
  previously prepared\nVector (Double, Double) that satisfies some constraints. Some
  documentation imrovement. Some performance optimizations.\n\n## 0.10.1.0 -- 2020-03-14\n\n*
  Tenth version revised A. Some documentation improvements. Some performance optimizations.\n\n##
  0.11.0.0 -- 2020-03-16\n\n* Eleventh version. Added a second executable O2help that
  can be used to convert multiline Ukrainian text input to the needed String for the
  dobutokO2\nprogram. Rewritten DobutokO.Sound.Executable module to provide more modularity.
  \n\n## 0.11.0.1 -- 2020-03-16\n\n* Eleventh version revised A. Some documentation
  improvement of README.markdown file.\n\n## 0.11.1.0 -- 2020-03-16\n\n* Eleventh
  version revised B. Inserted the functionality of the second auxiliary executable
  O2help into the single one -- dobutokO2 with \"0\" first command\nline option. Changed
  the information in the README.markdown file appropriately.\n\n## 0.11.2.0 -- 2020-03-16\n\n*
  Eleventh version revised C. Fixed issue with being not compiled because of not properly
  defined arguments for a function 'o2help'\nin the DobutokO.Sound.Executable module.\n\n##
  0.12.0.0 -- 2020-03-17\n\n* Twelfth version. Added a possibility to produce sound
  in the dobutokO2 function with only one input provided for the first command line
  option \"7\". Made\nfunctions in the DobutokO.Sound.Executable module more modular
  so this grows a possibility to reuse them. Added new functions for the new functionality.
  Some\ndocumentation improvements. Added as additional file \"text.dat.txt\" an example
  of the configuration for \"7\" first command line input. \n"
basic-deps:
  mmsyn3: ! '>=0.1.4 && <1'
  base: ! '>=4.7 && <4.14'
  process: ! '>=1.4 && <1.8'
  mmsyn7ukr: ! '>=0.15.3 && <1'
  mmsyn7s: ! '>=0.6.6 && <1'
  mmsyn6ukr: ! '>=0.6.3.1 && <1'
  mmsyn2: ! '>=0.1.7 && <1'
  vector: ! '>=0.11 && <0.14'
  directory: ! '>=1.2.5 && <1.6'
all-versions:
- 0.12.0.0
author: OleksandrZhabenko
latest: 0.12.0.0
description-type: markdown
description: "A program and a library to create experimental music from\na mono audio
  and a Ukrainian text. It can also create a timbre\nfor the notes.\n\n                *****
  Usage *****\n                -----------------\n\nYou can use it as a library or
  an executable.\n\nPlease, check before executing whether there is no \"x.wav\",
  \"test*.wav\",\n\"result*.wav\" and \"end.wav\" files in the current directory,
  because they\ncan be overwritten. The same can be said about \"nx*.wav\" files in
  the directory.\n\nFor the executable you enter in the terminal:\n\ndobutokO2 { 0
  | 1 | 2 | 3 | 4 | 5 | 6 | 7 } {fileName} {Ukrainian text}\n\n  where filename is:\n
  \ the full name of the file to be recorded in the current directory or\n  the full
  absolute path to the sound .wav file (or other one format\n  that is supported by
  your SoX installation) to obtain sound information from.\n\nIf the first command
  line argument equals to one of the numbers below, then\nthe program behaves as follows:\n\n
  \ \"1\", or \"3\", or \"5\" ->  then the executable uses the oberTones functions,\n
  \   so for the given parameters the obertones are the same for every call.\n\n  \"2\",
  or \"4\", or \"6\" -> then the program uses uniqOberTones functions.\n\n  \"3\",
  or \"4\", or \"5\", or \"6\" -> the program uses additional String to define\n    signs
  for the harmonics coefficients for obertones.\n      \n  In more detail:\n\n  \"0\"
  -> the program just converts multiline Ukrainian text from stdin\n     into a String
  and prints it to stdout. No other arguments are used.\n\n  \"1\" -> basic functionality
  without the possibility to define individual obertones.\n  \n  \"2\" -> basic functionality
  with the possibility to define individual obertones.\n     In such a case, another
  text gives the other obertones.\n\n  \"3\" -> adittionally to basic functionality
  gives an opportunity \n     to specify the signs for the harmonics coefficients
  for obertones\n       by additional String.\n\n  \"4\" -> similarly to \"2\" gives
  an opportunity to specify the signs\n     for the harmonics coefficients for obertones
  by additional String.\n\n  \"5\" -> additionally to that one functionality provided
  by \"3\" gives\n     an opportunity to specify in how many times the amplitude for\n
  \      the second lower note (if any) is greater, than the amplitude\n         for
  the main note and specify the intervals to be used\n           for every note.\n\n
  \ \"7\" -> the program behaves like for the \"5\" option, but generates\n     obertones
  using additional String and allows maximum control over\n       the parameters.
  Besides, all the needed information it obtains from\n         the singular formatted
  input, which can be ended with a keyboard keys\n           combination that means
  an end of input (e. g. for Unices, that is\n             probably Ctrl + D). '@'
  are separators for the input parts\n               for their respective parts. For
  more information about the\n                 format of the single input, see:\n
  \       https://drive.google.com/open?id=10Z_GRZR4TKoL5KXfqPm-t-4humuHN0O4\n                  The
  file is also provided with the package as text.dat.txt.\n                   The
  last two or three inputs (an input just here means\n                     a textual
  input between two '@') can be omitted, the\n                       program will
  work also but with less control for\n                         the user possible.\n
  \          \n   _  -> the program behaves like for the \"5\" option, but generates\n
  \    obertones using additional String and allows maximum control over\n        the
  parameters.\n\nIf you have prepared multiline Ukrainian textual input than to use
  it you\ncan deal with O2help executable. It is simple converter of the multiline
  text\ninto a String.\n\nAfter the program executing (it takes some time) there is
  a file \"end.wav\" in the directory.\nThis is the resulting melody generated.\n\nThe
  program now lifts the frequencies to the octave with the number, which you\ncan
  specify during its execution.\n\nYou can specify some control parameters during
  the program execution. This\nleads to different sounding.\n\nYou can use the default
  values (backward compatible with the 0.2.0.0 version)\nby simply pressing 'Enter'
  while being prompted and the informational message\ncontains the line about the
  default value.\n\n** Note:\n\n* Better to execute in the RAM. Need rather a lot
  of space on the disk for\nthe resulting file \"end.wav\" and auxiliary files (MBs)
  for a short sound\nin the second command line arguments.\n\n"
license-name: MIT
