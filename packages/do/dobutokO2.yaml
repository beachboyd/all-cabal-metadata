homepage: https://hackage.haskell.org/package/dobutokO2
changelog-type: markdown
hash: c7355df42178cee57c28aba20d21aadf9cf66aebd12e0b659025482c3367888c
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: A program and a library to create experimental music from a mono audio and
  a Ukrainian text
changelog: |
  # Revision history for dobutokO2

  ## 0.1.0.0 -- 2020-03-04

  * First version. Released on an unsuspecting world.

  ## 0.2.0.0 -- 2020-03-05

  * Second version. Added the functionality connected with octaves. Some documentation and code improvements.

  ## 0.3.0.0 -- 2020-03-06

  * Third version. Added the opportunity to specify more parameters: additionally basic sound duration and the level of obertones influence the generated sounds.
  Fixed issues with possibly incorrect argument sending to the SoX executable. Some documentation and code improvements.

  ## 0.3.1.0 -- 2020-03-06

  * Third version revised A. Fixed issues with not being compiled because of the ambiguous variables and wrong function application.

  ## 0.3.1.1 -- 2020-03-06

  * Third version revised B. Some documentation improvements for README.markdown file.

  ## 0.4.0.0 -- 2020-03-07

  * Fourth version. Fixed issues with wrongly realized rhythm behaviour. Now it corresponds to the documented.
basic-deps:
  mmsyn3: ! '>=0.1.4 && <1'
  base: ! '>=4.7 && <4.14'
  process: ! '>=1.4 && <1.8'
  mmsyn7ukr: ! '>=0.15.3 && <1'
  mmsyn7s: ! '>=0.6.4 && <1'
  vector: ! '>=0.11 && <0.14'
  directory: ! '>=1.2.5 && <1.6'
all-versions:
- 0.4.0.0
author: OleksandrZhabenko
latest: 0.4.0.0
description-type: markdown
description: |+
  A program and a library to create experimental music from
  a mono audio and a Ukrainian text. It can also create a timbre
  for the notes.

                  ***** Usage *****
                  -----------------

  You can use it as a library or an executable.

  For the executable you enter in the terminal:

  dobutokO2 {1 | 2} {name-of-the-file-to-be-recorded-to-obtain-sound-information-from-without-file-extension} {Ukrainian text}

  If the first command line argument equals to "1" then the executable
  uses the oberTones funcions, so for the given parameters the obertones
  are the same for every call. Otherwise, it uses uniqOberTones functions, which
  can have different obertones because of the provided the second, additional,
  text. The last one is used to generate the obertones. In such a case, another
  text gives the other obertones.

  After the program executing (it takes some time) there is a file "end.wav" in the directory.
  This is the resulting melody generated.

  The program now lifts the frequencies to the octave with the number, which you
  can specify during its execution.

  You can specify some control parameters during the program execution. This
  leads to different sounding.

  You can use the default values (backward compatible with the 0.2.0.0 version)
  by simply pressing 'Enter' while being prompted and the informational message
  contains the line about the default value.

  ** Note:

  * Better to execute in the RAM. Need rather a lot of space on the disk for
  the resulting file "end.wav" and auxiliary files (MBs) for a short sound
  in the second command line arguments.

license-name: MIT
