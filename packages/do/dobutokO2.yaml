homepage: https://hackage.haskell.org/package/dobutokO2
changelog-type: markdown
hash: b146341ab33ee809d3a80f50d0f719a79588b0adbd08f3dc7f09908508b5239c
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: A program and a library to create experimental music from a mono audio and
  a Ukrainian text
changelog: "# Revision history for dobutokO2\n\n## 0.1.0.0 -- 2020-03-04\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.2.0.0 -- 2020-03-05\n\n* Second
  version. Added the functionality connected with octaves. Some documentation and
  code improvements.\n\n## 0.3.0.0 -- 2020-03-06\n\n* Third version. Added the opportunity
  to specify more parameters: additionally basic sound duration and the level of obertones
  influence the generated sounds.\nFixed issues with possibly incorrect argument sending
  to the SoX executable. Some documentation and code improvements.\n\n## 0.3.1.0 --
  2020-03-06\n\n* Third version revised A. Fixed issues with not being compiled because
  of the ambiguous variables and wrong function application.\n\n## 0.3.1.1 -- 2020-03-06\n\n*
  Third version revised B. Some documentation improvements for README.markdown file.\n\n##
  0.4.0.0 -- 2020-03-07\n\n* Fourth version. Fixed issues with wrongly realized rhythm
  behaviour. Now it corresponds to the documented.\n\n## 0.5.0.0 -- 2020-03-07\n\n*
  Fifth version. Added the possibility to specify an existing file by its absolute
  path to be used as a source for the sound information for SoX to generate the\nresulting
  file. Some documentation improvements.\n\n## 0.5.1.0 -- 2020-03-07\n\n* Fifth version
  revised A. Fixed issue with the order of actions in 'dobutokO2' function.\n\n##
  0.5.2.0 -- 2020-03-07\n\n* Fifth version revised B. Fixed issue with the name of
  the recorded informational sound file in the 'recAndProcess' function.\n\n## 0.5.3.0
  -- 2020-03-07\n\n* Fifth version revised C. Fixed issue with the noise reduction
  in the 'recAndProcess' function for the existing at the beginning file\n(it is not
  done at all in such a case). \n\n## 0.6.1.0 -- 2020-03-08\n\n* Sixth version revised
  A. Fixed issue with 'signsFromString' function that leads to performance penalty
  and to cycling. \n\n"
basic-deps:
  mmsyn3: ! '>=0.1.4 && <1'
  base: ! '>=4.7 && <4.14'
  process: ! '>=1.4 && <1.8'
  mmsyn7ukr: ! '>=0.15.3 && <1'
  mmsyn7s: ! '>=0.6.6 && <1'
  vector: ! '>=0.11 && <0.14'
  directory: ! '>=1.2.5 && <1.6'
all-versions:
- 0.6.0.0
- 0.6.1.0
author: OleksandrZhabenko
latest: 0.6.1.0
description-type: markdown
description: |+
  A program and a library to create experimental music from
  a mono audio and a Ukrainian text. It can also create a timbre
  for the notes.

                  ***** Usage *****
                  -----------------

  You can use it as a library or an executable.

  Please, check before executing whether there is no "x.wav", "test*.wav",
  "result*.wav" and "end.wav" files in the current directory, because they
  can be overwritten. The same can be said about "nx*.wav" files in the directory.

  For the executable you enter in the terminal:

  dobutokO2 {1 | 2 | 3 | 4} {fileName} {Ukrainian text}

    where filename is:
    the full name of the file to be recorded in the current directory or
    the full absolute path to the sound .wav file (or other one format
    that is supported by your SoX installation) to obtain sound information from.

  If the first command line argument equals to "1" or "3" then the executable
  uses the oberTones funcions, so for the given parameters the obertones
  are the same for every call. The "3" adittionally gives an opportunity
  to specify the signs for the harmonics coefficients for obertones by additional
  String. Otherwise, it uses uniqOberTones functions, which
  can have different obertones because of the provided the second, additional,
  text. The last one is used to generate the obertones. In such a case, another
  text gives the other obertones. If you specify something else, except "1", or "2",
  or "3", then the program uses uniqOberTones functions and (similarly to "3" option)
  it uses additional String to define signs for the harmonics coefficients for obertones.

  After the program executing (it takes some time) there is a file "end.wav" in the directory.
  This is the resulting melody generated.

  The program now lifts the frequencies to the octave with the number, which you
  can specify during its execution.

  You can specify some control parameters during the program execution. This
  leads to different sounding.

  You can use the default values (backward compatible with the 0.2.0.0 version)
  by simply pressing 'Enter' while being prompted and the informational message
  contains the line about the default value.

  ** Note:

  * Better to execute in the RAM. Need rather a lot of space on the disk for
  the resulting file "end.wav" and auxiliary files (MBs) for a short sound
  in the second command line arguments.

license-name: MIT
