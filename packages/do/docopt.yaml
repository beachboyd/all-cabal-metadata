homepage: https://github.com/docopt/docopt.hs
changelog-type: markdown
hash: 0ff280d90aa667350f743623708107bdef427a49b64b1bdf3df15905d8cbe345
test-bench-deps:
  bytestring: -any
  split: -any
  base: -any
  text: -any
  docopt: -any
  parsec: -any
  HUnit: -any
  containers: -any
  ansi-terminal: -any
  th-lift: -any
  aeson: -any
  template-haskell: -any
maintainer: ryanartecona@gmail.com
synopsis: A command-line interface parser that will make you smile
changelog: ! "### 0.7.0.5\n\n- Fix an issue where in some cases pattern lines were
  matched out of order [#16]\n- Strip leading & trailing newlines from usage, for
  quasiquoter ease [#28]\n- Fix tests run against latest aeson 1.0.2.0 [#29]\n\n###
  0.7.0.4\n\n- Fix the test suite when run from a distributed tarball [#21]\n- Make
  the test suite more developer-friendly\n\n### 0.7.0.3\n\n- Fix `isPresent` treatment
  of repeatable arguments/options [#15]\n- Fix build failure for stackage inclusion
  [#20]\n\n### 0.7.0.2\n\n- Minor docs/README tweaks [#13]\n\n### 0.7.0.1\n\n- Fix
  docs in README and in Docopt.hs\n\n# 0.7.0.0\n\n- Add usage parsing QuasiQuoters
  [#7]\n  - Add `docopt` usage parsing QuasiQuoter\n  - Add `docoptFile` usage parsing
  QuasiQuoter\n  - Add `System.Docopt.NoTH` module\n    - Add `parseUsage`\n    -
  Add `parseUsageOrExit`\n- New API organization [#10]\n  - Remove `optionsWithUsage`\n
  \ - Remove `optionsWithUsageDebug`\n  - Remove `optionsWithUsageFile`\n  - Remove
  `optionsWithUsageFileDebug`\n  - Add `Docopt` type to represent a parsed usage string\n
  \ - Add `usage`\n  - Add `parseArgs`\n  - Add `parseArgsOrExit`\n  - Add `exitWithUsage`\n
  \ - Add `exitWithUsageMessage`\n  - Monomorphize `getArg` from `Monad m` to `Maybe`\n
  \ - Add `getArgOrExitWith`\n  - Deprecate `getAllArgsM`\n  - Deprecate `notPresentM`\n
  \ - Deprecate `isPresentM`\n  - Deprecate `getFirstArg`\n- Add thorough haddock
  API documentation\n  \n### 0.6.0.2\n\n- Make `argument` not require its named option
  wrapped in angle brackets. [#4, #5]\n\n### 0.6.0.1\n\n- Fix haddock docs.\n\n# 0.6.0.0\n\nFirst
  release! Tracks features of reference Python implementation at version `0.6`.\n"
basic-deps:
  base: ! '>=4.0 && <5.0'
  parsec: ! '>=3.1.0'
  containers: -any
  th-lift: -any
  template-haskell: -any
all-versions:
- 0.6.0
- 0.6.0.1
- 0.6.0.2
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
author: Ryan Artecona
latest: 0.7.0.5
description-type: markdown
description: ! "Docopt.hs\n=========\n\nA Haskell port of python's [docopt](http://docopt.org).\n\n----------\n\n##
  Want a command-line interface *without* building a parser?\n\nHow about writing
  your help text first, and getting a parser for free!\n\nSave your help text to a
  file (i.e. `USAGE.txt`):\n\n    Usage:\n      myprog cat <file>\n      myprog echo
  [--caps] <string>\n\n    Options:\n      -c, --caps    Caps-lock the echoed argument\n\nThen,
  in your `Myprog.hs`:\n\n```haskell\n{-# LANGUAGE QuasiQuotes #-}\nimport Control.Monad
  (when)\nimport Data.Char (toUpper)\nimport System.Environment (getArgs)\nimport
  System.Console.Docopt\n\npatterns :: Docopt\npatterns = [docoptFile|USAGE.txt|]\n\ngetArgOrExit
  = getArgOrExitWith patterns\n\nmain = do\n  args <- parseArgsOrExit patterns =<<
  getArgs\n\n  when (args `isPresent` (command \"cat\")) $ do\n    file <- args `getArgOrExit`
  (argument \"file\")\n    putStr =<< readFile file\n\n  when (args `isPresent` (command
  \"echo\")) $ do\n    let charTransform = if args `isPresent` (longOption \"caps\")\n
  \                         then toUpper\n                          else id\n    string
  <- args `getArgOrExit` (argument \"string\")\n    putStrLn $ map charTransform string\n```\n\nThat's
  it! No Template Haskell, no unreadable syntax, no learning yet *another* finicky
  API. Write the usage patterns you support, and docopt builds the appropriate option
  parser for you (internally using [`parsec`](http://hackage.haskell.org/package/parsec)).
  If your user invokes your program correctly, you query for the arguments they provided.
  If the arguments provided do not match a supported usage pattern, you guessed it:
  docopt automatically prints the help text and exits!\n\n\nInstallation\n------------\n\n
  \   cabal sandbox init\n    cabal install docopt\n\nAPI Reference\n-------------\n\nSee
  [the package on hackage](https://hackage.haskell.org/package/docopt)\n\n\nHelp text
  format\n================\n\nDocopt only cares about 2 parts of your help text:\n\n-
  **Usage patterns**, e.g.:\n\n  ```\n      Usage:\n        my_program [-hs] [-o=<file>]
  [--quiet | --verbose] [<input>...]\n  ```\n  These begin with `Usage:` (case-insensitive),
  and end with a blank line.\n\n- **Option descriptions**, e.g.:\n\n  ```\n      Options:\n
  \       -h --help    show this\n        -s --sorted  sorted output\n        -o=<file>
  \   specify output file\n                     [default: ./test.txt]\n        --quiet
  \     print less text\n        --verbose    print more text\n  ```\n\n  Any line
  after the usage patterns that begins with a `-` is treated as an option description
  (though an option's default may be on a different line).\n\nUsage Patterns\n--------------\n\n-
  #### `<argument>` or `ARGUMENT`\n\n  Positional arguments. Constructed via `argument`,
  i.e. `argument \"arg\"` matches an `<arg>` element in the help text, and `argument
  \"ARG\"` matches an `ARG` element.\n\n- #### `--flag` or `--option=<arg>`\n\n  Options
  are typically optional (though this is up to you), and can be either boolean (present/absent),
  as in `--flag`, or expect a trailing argument, as in `--option=<arg>` or `--option=ARG`.
  Arguments can be separated from the option name by an `=` or a single space, and
  can be specified as `<arg>` or `ARG` (consistency of style is recommended, but it
  is not enforced).\n\n  Short-style options, as in `-f` or `-f ARG` or `-f=<arg>`,
  are also allowed. Synonyms between different spellings of the same option (e.g.
  `-v` and `--verbose`) can be established in the option descriptions (see below).
  Short-style options can also be stacked, as in `-rfA`. When options are stacked,
  `-rfA` is effectively equivalent to `(-r | -f | -A)...` to the argument parser.\n\n
  \ You can match a long-style option `--option` or `--option=<arg>` with `longOption
  \"option\"`, and a short-style option `-f` `or -f=<arg>` with `shortOption 'f'`.
  _Note that neither `--option=<arg>` nor `-f=<arg>` would be matched by `argument
  \"arg\"`._\n\n- #### `command`\n\n  Anything not recognized as a positional argument
  or a short or long option is treated as a command (or subcommand, same thing to
  docopt). A command named `pull` can be matched with `command \"pull\"`.\n\n- ####
  `[]` (brackets) e.g. `command [--option]`\n\n  Patterns inside brackets are **optional**.\n\n-
  #### `()` (parens)\n\n  Patterns inside parens are **required** (the same as patterns
  *not* in `()` are required). Parens are useful if you need to group some elements,
  either for use with `|` or `...`.\n\n- #### `|` (pipe) e.g. `command [--quiet |
  --verbose]`\n\n  A pipe `|` separates mutually exclusive elements in a group. A
  group could be elements inside `[]`, `()`, or the whole usage line.\n\n  ```\n      Usage:\n
  \       myprog command [--opt1 | --opt2]  # valid\n        myprog go (left | right)
  \         # valid\n        myprog -v | -h                    # valid\n  ```\n\n
  \ When elements are separated by a pipe, the elements are tried from left to right
  until one succeeds. At least one of the elements are required unless in an eplicitly
  optional group surrounded by `[]`.\n\n- #### `...` (ellipsis) e.g. `command <file>...`\n\n
  \ An ellipsis can trail any element or group to make it repeatable. Repeatable elements
  will be accumulated into a list of occurrences.\n\n- #### `[options]` (case sensitive)\n\n
  \ The string `[options]` is a shortcut to match any options specified in your option
  descriptions.\n\n- #### `[-]` and `[--]`\n\n  Single hyphen `-` is used by convention
  to specify using `stdin` as input instead of reading a file. Double hyphen `--`
  is typically used to manually separate leading options from trailing positional
  arguments. Both of these are treated as `command`s, and so are perfectly legal in
  usage patterns. They are typically optional elements, but can be required if you
  drop the `[]`. These are treated as commands and can be matched with `command \"-\"`
  or `command \"--\"`, whether they're wrapped `[-]` or not.\n\nOption descriptions\n-------------------\n\nOption
  descriptions establish:\n- which short and long options are synonymous\n- whether
  an option expects an argument or is a simple flag\n- if an option's argument has
  a default value\n\n**Rules**:\n\n- Any line *after* the usage patterns whose first
  non-space character is a `-` is treated as an option description. (`Options:` prefix
  line not required).\n\n  ```\n      Options: --help       # invalid: line does not
  start with '-'\n               --verbose    # good\n  ```\n\n- Options on the same
  line will be treated by the parser as synonyms (everywhere interchangeable). Synonymous
  options are separated by a space (with optional comma):\n\n  ```\n      Usage:\n
  \       myprog --help | --verbose\n\n      Options:\n        -h, --help      Print
  help text\n        -v --verbose    Print help text twice\n  ```\n\n  Here, `myprog
  --help` and `myprog -h` will both work the same, as will `myprog --verbose` and
  `myprog -v`.\n\n- If any synonymous options are specified in the description with
  an argument, the option parser will expect an argument for all synonyms. If not,
  all synonyms will be treated as flags.\n\n  ```\n      Usage:\n        myprog analyze
  [--verbose] <file>\n\n      Options:\n        --verbose, -v LEVEL   The level of
  output verbosity.\n  ```\n\n  Here, in the arguments `myprog analyze --verbose ./file1.txt`
  would be invalid, because `-v` *and its synonyms* expect an argument, so `./file1.txt`
  is captured as the argument of `--verbose`, *not* as the positional argument `<file>`.
  Be careful!\n\n  Options can be separated from arguments with a single space or
  a `=`, and arguments can have the form `<arg>` or `ARG`. Just be sure to separate
  synonyms and arguments from the beginning of the description by **at least 2 spaces**.\n\n
  \ ```\n      --opt1 ARG1   Option 1.\n      --opt2=<arg2> Option 2.        # BAD:
  use 2 spaces\n      -a <arg3>     Option 3.\n      -b=ARG4       Option 4.\n  ```\n\n-
  Options that expect arguments can be given a default value, in the form `[default:
  <default-val>]`. Default values do not need to be on the same line\n\n  ```\n      --host=NAME
  \      Host to listen on. [default: localhost]\n      --port=PORT       Port number
  [default: 8080]\n      --directory=DIR   This option has an especially long description\n
  \                       explaining its meaning. [default: ./]\n  ```\n\n----------------\n\n\n####
  Differences from reference python implementation:\n\n  - does not automatically
  exclude from the `[options]` shortcut options that are already used elsewhere in
  the usage pattern (e.g. `usage: prog [options] -a` will try to parse `-a` twice).\n\n
  \ - does not automatically resolve partially-specified arguments, e.g. `--verb`
  does not match where `--verbose` is expected. This is planned to be deprecated in
  future versions of docopt, and will likely not be implemented in docopt.hs\n\n  -
  is not insensitive to the ordering of adjacent options, e.g. `usage: prog -a -b`
  does not allow `prog -b -a` (reference implementation currently does).\n"
license-name: MIT
