homepage: https://github.com/stackbuilders/dotenv-hs
changelog-type: markdown
hash: 319c179949d3996101f9ca2ddbd8174d4fa29718bbfef37cef1c7b441d8a7884
test-bench-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.7 && <5.0'
  hspec: -any
  text: -any
  megaparsec: -any
  process: -any
  containers: -any
  base-compat: ! '>=0.4'
  dotenv: -any
  hspec-megaparsec: ! '>=2.0 && <3.0'
  transformers: ! '>=0.4 && <0.6'
  yaml: ! '>=0.8'
  directory: -any
maintainer: hackage@stackbuilders.com
synopsis: Loads environment variables from dotenv files
changelog: ! "## MASTER\n## Dotenv 0.6.0.2\n* Support for `process-1.6.3.0`\n\n##
  Dotenv 0.6.0.1\n* Add support for `megaparsec-7.0.1`\n* Drop support for `GHC 7.8.4`\n\n##
  Dotenv 0.6.0.0\n* Move `loadSafeFile` to `Configuration.Dotenv`\n* Export `Configuration.Dotenv.Types`
  from `Configuration.Dotenv`\n* Change `loadSafeFile` signature to accept different
  types of validators.\n* Add `type ValidatorMap = Map Text (Text -> Bool)` for custom
  validations.\n\n## Dotenv 0.5.2.5\n* Update `exceptions` bounds `>= 0.8 && < 0.11`\n\n##
  Dotenv 0.5.2.4\n* Add error message when there is more than one definition in the
  Scheme for the\nsame env\n\n## Dotenv 0.5.2.3\n* Update bounds `exceptions` == 0.9.*\n*
  Support `megaparsec` >= 6.4.0\n\n## Dotenv 0.5.2.1\n\n* Update documentation for
  Configuration.Dotenv.Types\n\n## Dotenv 0.5.2.0\n\n* Add `loadSafeFile` to typecheck
  the envs.\n* Add `(--schema|-s) FILE` flag to the `dotenv` CLI tool to enable safe
  mode.\n* Add `(--no-schema)` flag to the `dotenv` CLI tool to disable safe mode.\n*
  Turn safe mode on automatically when the `.schema.yml` file is present.\n* Make
  `required` optional in the `.schema.yml`.\n\n## Dotenv 0.5.1.1\n\n* Allow `.env`
  empty files\n\n## Dotenv 0.5.1.0\n\n* Add support for command substitution on env
  vars.\n\n## Dotenv 0.5.0.2\n\n* Set `.env` file as default file for environment
  variables.\n* Add `--version` flag to check the version of dotenv that is in use.\n\n##
  Dotenv 0.5.0.0\n\n* Add [dotenv-safe functionality](https://www.npmjs.com/package/dotenv-safe)\n*
  Add the `Config` type with options to override env variables, and setting the\npath
  for .env and .env.example files.\n* Changed `loadFile` function to get `Config`
  with the paths for the .env file\nand the .env.example file.\n\n## Dotenv 0.4.0.0\n\n*
  Use Megaparsec 6.0\n* Dropped support for GHC 7.6\n\n## Dotenv 0.3.4.0\n\n* Allow
  optparse-applicative 0.14\n\n## Dotenv 0.3.3.0\n\n* Add support for variable expansion.
  Thanks to حبيب الامين (GitHub: habibalamin) for making this contribution.\n\n##
  Dotenv 0.3.2.0\n\n* Add the option to pass arguments to the program passed to Dotenv.
  Thanks to\n  Oleg Grenrus (GitHub: phadej) for making this contribution.\n\n## Dotenv
  0.3.1.0\n\n* Made interface more polymorphic so the functions works in any instance
  of\n  `MonadIO`, not only `IO`. This should reduce amount of lifting in some\n  cases.\n\n*
  Added `onMissingFile` helper to deal with possibly missing files.\n\n* Parser was
  rewritten to take full advantage of Megaparsec.\n  `hspec-megaparsec` is now used
  for testing of the parser.\n\n* Dropped support for GHC 7.4.\n\n## Dotenv 0.3.0.3\n\n*
  Allow optparse-applicative 0.13\n\n## Dotenv 0.3.0.1\n\n* Remove unnecessary package
  dependencies.\n\n## Dotenv 0.3.0.0\n\n* Reverted change to Data.Text in favor of
  String, for maintaining compatibility\n  with common Haskell system libraries. Added
  separate interface for parsing a\n  file into tuples containing Data.Text values.
  Thanks to Daisuke Fujimura\n  (GitHub: fujimura).\n* Fixed parsing of CRLF characters
  for Windows users.\n\n## Dotenv 0.2.0.0 (deprecated)\n\n* Changed public interfaces
  to use Data.Text.\n* Added function `parseFile` to read dotenv file without modifying
  the\n  environment. Thanks to Daisuke Fujimura (GitHub: fujimura) for making this\n
  \ contribution.\n\n## Dotenv 0.1.0.0\n\n* First public release.\n"
basic-deps:
  exceptions: ! '>=0.8 && <0.11'
  base: ! '>=4.7 && <5.0'
  text: -any
  megaparsec: ! '>=7.0.1 && <8.0'
  process: ! '>=1.6.3.0 && <1.7'
  containers: -any
  base-compat: ! '>=0.4'
  dotenv: -any
  transformers: ! '>=0.4 && <0.6'
  optparse-applicative: ! '>=0.11 && <0.15'
  yaml: ! '>=0.8'
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.0.8'
- '0.1.0.9'
- '0.3.0.0'
- '0.3.0.1'
- '0.3.0.2'
- '0.3.0.3'
- '0.3.1.0'
- '0.3.2.0'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0.0'
- '0.5.0.0'
- '0.5.0.1'
- '0.5.0.2'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.2.2'
- '0.5.2.3'
- '0.5.2.4'
- '0.5.2.5'
- '0.6.0.1'
- '0.6.0.2'
author: Justin Leitgeb
latest: '0.6.0.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/stackbuilders/dotenv-hs.svg?branch=master)](https://travis-ci.org/stackbuilders/dotenv-hs)
  [![Hackage](https://img.shields.io/hackage/v/dotenv.svg)](http://hackage.haskell.org/package/dotenv)\n\n#
  Dotenv files for Haskell\n\nIn most applications,\n[configuration should be separated
  from code](http://12factor.net/config). While\nit usually works well to keep configuration
  in the environment, there\nare cases where you may want to store configuration in
  a file outside\nof version control.\n\n\"Dotenv\" files have become popular for
  storing configuration,\nespecially in development and test environments. In\n[Ruby](https://github.com/bkeepers/dotenv),\n[Python](https://github.com/theskumar/python-dotenv)
  and\n[Javascript](https://www.npmjs.com/package/dotenv) there are libraries\nto
  facilitate loading of configuration options from configuration\nfiles. This library
  loads configuration to environment variables for\nprograms written in Haskell.\n\n##
  Installation\n\nIn most cases you will just add `dotenv` to your cabal file. You
  can\nalso install the library and executable by invoking `stack install dotenv`.\n\n##
  Usage\n\nSet configuration variables in a file following the format below:\n\n```\nS3_BUCKET=YOURS3BUCKET\nSECRET_KEY=YOURSECRETKEYGOESHERE\n```\n\nThen,
  calling `Dotenv.load` from your Haskell program reads the above\nsettings into the
  environment:\n\n```haskell\nimport Configuration.Dotenv (loadFile, defaultConfig)\nloadFile
  defaultConfig\n```\n\nAfter calling `Dotenv.load`, you are able to read the values
  set in your\nenvironment using standard functions from `System.Environment` such
  as\n`lookupEnv` and `getEnv`.\n\n### NOTE: Empty environment variables\n\nIf you
  need to have empty environment variables in your configuration, you can\nuse something
  like the code below:\n\n```haskell\nfromMaybe \"\" <$> lookupEnv \"ENV_VAR\"\n```\n\nCurrently,
  `dotenv-hs` doesn't allow you to set empty environment variables,\nbecause of [setEnv](https://hackage.haskell.org/package/base-4.9.1.0/docs/System-Environment.html#v:setEnv)\nfrom
  our `System.Environment`. This is bug reported in [GHC ticket](https://ghc.haskell.org/trac/ghc/ticket/12494).\nWe
  have had many [dicussions](https://github.com/stackbuilders/dotenv-hs/issues/48)\nabout
  this. Fortunately, there is already some work for this issue in\n[GHC Phabricator](https://phabricator.haskell.org/D3726).\n\n###
  Variable substitution\n\nIn order to use compound env vars use the following sintax
  within your env vars\n${your_env_var}. For instance:\n\n```\nDATABASE=postgres://${USER}@localhost/database\n```\n\nRunning
  it on the CLI:\n\n```\n$ dotenv \"echo $DATABASE\"\npostgres://myusername@localhost/database\n```\n\n###
  Command substitution\n\nIn order to use the standard output of a command in your
  env vars use the following\nsintax $(your_command). For instance:\n\n```\nDATABASE=postgres://$(whoami)@localhost/database\n```\n\nRunning
  it on the CLI:\n\n```\n$ dotenv \"echo $DATABASE\"\npostgres://myusername@localhost/database\n```\n\n###
  Type checking envs\nEnv variables are simple strings. However, they can represent
  other types like\nintegers, booleans, IP addresses, emails, URIs, and so on. We
  provide an interface\nthat performs type checking after loading the envs and before
  running your application.\nIf the type-check succeeded the application is executed,
  otherwise you will get an\nerror with the types that mismatch.\n\nIn order to use
  this functionality you can use the `loadSafeFile` which takes the same\nconfiguration
  value as the `loadFile` function. Also, you need to have a `.schema.yml`\nin your
  current directory. This file must have the following structure:\n\n```yaml\n- name:
  DOTENV\n  type: bool\n  required: true\n- name: OTHERENV\n  type: bool\n- name:
  PORT\n  type: integer\n  required: true\n- name: TOKEN\n  type: text\n  required:
  false\n```\n\nIt is a list of type and envs. So, in this example, `DOTENV` must
  have a value\nof `true` or `false` otherwise it won't be parsed as a boolean value.
  And envs\nlike `PORT` must be any integer. Currently, we are supporting the following
  types:\n\n- `bool` - Accepts values `false` or `true`\n- `integer` - Accepts values
  of possitive integers\n- `text` - Any text\n\n**require** specifies if the env var
  is obligatory or not. In case you set it to true\nbut do not provide it, you wil
  get an exception. When **required** is omited, the default\nvalue is `false`.\n\n**NOTE:**
  All the variables which are **required** in the `schema.yml` must be defined\nin
  the dotenvs.\n\n## Configuration\n\nThe first argument to `loadFile` specifies the
  configuration. You cans use\n`defaultConfig` which parses the `.env` file in your
  current directory and\ndoesn't override your envs. You can also define your own
  configuration with\nthe `Config` type.\n\n`False` in `configOverride` means Dotenv
  will respect\nalready-defined variables, and `True` means Dotenv will overwrite\nalready-defined
  variables.\n\nIn the `configPath` you can write a list of all the dotenv files where
  are\nenvs defined (e.g `[\".env\", \".tokens\", \".public_keys\"]`).\n\nIn the `configExamplePath`
  you can write a list of all the dotenv example files\nwhere you can specify which
  envs **must be defined** until running a program\n(e.g `[\".env.example\", \".tokens.example\",
  \".public_keys.example\"]`). If you don't\nneed this functionality you can set `configExamplePath`
  to an empty list.\n\n## Advanced Dotenv File Syntax\n\nYou can add comments to your
  Dotenv file, on separate lines or after\nvalues. Values can be wrapped in single
  or double quotes. Multi-line\nvalues can be specified by wrapping the value in double-quotes,
  and\nusing the \"\\n\" character to represent newlines.\n\nThe [spec file](spec/Configuration/Dotenv/ParseSpec.hs)
  is the best\nplace to understand the nuances of Dotenv file parsing.\n\n## Command-Line
  Usage\n\nYou can call dotenv from the command line in order to load settings\nfrom
  one or more dotenv file before invoking an executable:\n\n```shell\n$ dotenv -f
  mydotenvfile myprogram\n```\n\nThe `-f` flag is optional, by default it looks for
  the `.env` file in the current\nworking directory.\n\n```shell\n$ dotenv myprogram\n```\n\nAditionally
  you can pass arguments and flags to the program passed to\nDotenv:\n\n```shell\n$
  dotenv -f mydotenvfile myprogram -- --myflag myargument\n```\n\nor:\n\n```shell\n$
  dotenv -f mydotenvfile \"myprogram --myflag myargument\"\n```\n\nAlso, you can use
  a `--example` flag to use [dotenv-safe functionality](https://www.npmjs.com/package/dotenv-safe)\nso
  that you can have a list of strict envs that should be defined in the environment\nor
  in your dotenv files before the execution of your program. For instance:\n\n```shell\n$
  cat .env.example\nDOTENV=\nFOO=\nBAR=\n\n$ cat .env\nDOTENV=123\n\n$ echo $FOO\n123\n```\n\nThis
  will fail:\n```shell\n$ dotenv -f .env --example .env.example \"myprogram --myflag
  myargument\"\n> dotenv: Missing env vars! Please, check (this/these) var(s) (is/are)
  set: BAR\n```\n\nThis will succeed:\n```shell\n$ export BAR=123 # Or you can do
  something like: \"echo 'BAR=123' >> .env\"\n$ dotenv -f .env --example .env.example
  \"myprogram --myflag myargument\"\n```\n\nHint: The `env` program in most Unix-like
  environments prints out the\ncurrent environment settings. By invoking the program
  `env` in place\nof `myprogram` above you can see what the environment will look
  like\nafter evaluating multiple Dotenv files.\n\nThe `--schema FILE` will get the
  envs configuration from the `FILE`. For instance:\n\n```shell\n$ cat .env\nPORT=123a\n$
  cat .schema.yml\n- name: PORT\n  required: true\n  type: integer\n```\n\nrunning
  `dotenv` will throw:\n\n```shell\n$ dotenv -s .schema.yml \"echo $PORT\"\ndotenv:
  1:4:\nunexpected 'a'\nexpecting digit or end of input\n```\n\n**NOTE:** The flag
  can be omited when the `.schema.yml` is in the current working\ndirectory. To disable
  type checking add the flag `--no-schema`.\n\n## Author\n\nJustin Leitgeb\n\n## License\n\nMIT\n\n##
  Copyright\n\n(C) 2015-2017 [Stack Builders Inc.](http://www.stackbuilders.com)\n"
license-name: MIT
