homepage: https://github.com/isovector/do-notation#readme
changelog-type: markdown
hash: 3b458b815be974cea5898aad34a0d289741bdb659b9bdfe4a666c4462975e5ed
test-bench-deps:
  base: ! '>=4.7 && <5'
  do-notation: -any
  indexed: -any
maintainer: sandy@sandymaguire.me
synopsis: Generalize do-notation to work on monads and indexed monads simultaneously.
changelog: ! '# Changelog for do-syntax


  ## Unreleased changes

'
basic-deps:
  base: ! '>=4.7 && <5'
  indexed: -any
all-versions:
- '0.1.0.0'
author: Sandy Maguire
latest: '0.1.0.0'
description-type: markdown
description: ! '# do-notation


  [![Build Status](https://travis-ci.org/isovector/do-notation.svg?branch=master)](https://travis-ci.org/isovector/do-notation)
  | [Hackage][hackage]


  [hackage]: https://hackage.haskell.org/package/do-notation



  ## Dedication


  > I''ve just locked an open door. Strange, yet symbolically compelling.

  >

  > Manny Calavera, Grim Fandango



  ## Overview


  Have you ever wanted to manage siiiick invariants with indexed monads without

  giving up your regular monads in the process? `do-notation` lets you do this

  with a bunch of type jiggery-pokery behind the scenes.


  It also provides the `Ix m` indexed monad which is a free construction over a

  regular monad `m`. Cool.



  ## Usage


  ```haskell

  {-# LANGUAGE RebindableSyntax #-}


  import Language.Haskell.DoNotation

  import Prelude hiding (Monad (..), pure)

  ```



  ## Limitations


  The implementation doesn''t play very nicely with `do`-blocks bound via `let`.



  ## Thanks


  Huge shout-outs to [Csongor Kiss][kcsongor] for very patiently walking me

  through the incoherent instance machinery necessary to make this all work.


  [kcsongor]: http://kcsongor.github.io/


'
license-name: BSD3
