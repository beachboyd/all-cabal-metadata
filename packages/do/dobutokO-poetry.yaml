homepage: https://hackage.haskell.org/package/dobutokO-poetry
changelog-type: markdown
hash: 5213e424529f7cbcf73156add9ccf5d3498cf08743290947d9d9c101641c0e1d
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: Helps to order the 7 or less Ukrainian words to obtain somewhat suitable
  for poetry or music text
changelog: "# Revision history for dobutokO-poetry\n\n## 0.1.0.0 -- 2020-06-01\n\n*
  First version. Released on an unsuspecting world.\n\n## 0.2.0.0 -- 2020-06-01\n\n*
  Second version. Fixed issue with the wrong convertion to the WAV sound file. Added
  mmsyn3 as an explicit dependency (it was implicit) and changed the \nnumber of the
  minimum mmsyn6ukr package version.\n\n## 0.3.0.0 -- 2020-06-02\n\n* Third version.
  Added new generalized functions to the DobutokO.Poetry module and extended with
  them the functionality in the Main module. \n\n## 0.3.1.0 -- 2020-06-02\n\n* Third
  version revised A. Fixed issue with being printed also the second command line argument
  for the Main.main function.\n\n## 0.3.2.0 -- 2020-06-02\n\n* Third version revised
  B. Fixed issues with being not accurate printing.\n\n## 0.4.0.0 -- 2020-06-03\n\n*
  Fourth version. Changed the module structure to simplify the usage in research purposes.
  Added new generalized variants of the functions with different\nnorms and different
  String -> [Int] conversion functions. Some documentation improvements.\n\n## 0.5.0.0
  -- 2020-06-04\n\n* Fifth version. Fixed issues with inappropriate message information
  in some functions. Added new norms and possibility to use non-negative lists and
  to\nsplit them to make possible a technique of multiple metrics united in one function.
  Added generalized variant of the 'uniquenessPeriods' and some additional \nfunctions
  to work with String data in Ukrainian. Some minor code improvements.\n\n## 0.6.0.0
  -- 2020-07-25\n\n* Sixth version. Added three new functions to the DobutokO.Poetry
  module: uniqInMaxPoeticalNLine, uniqNPoeticalNLine and uniqNPoetical2GNLine. They
  are \nsimilar to the respective functions without 'Line' ending in their name but
  prints their output on the same line. \n\n## 0.7.0.0 -- 2020-07-29\n\n* Seventh
  version. Changed the module structure. Added new modules and rewritten the old ones.
  Fixed unexact or not complete documentation for some functions.\n\n## 0.8.0.0 --
  2020-07-31\n\n* Eigth version. Changed the module structure. Removed the module
  DobutokO.Poetry.PrependAppend and added the module DobutokO.Poetry.General with
  more extended \npossibilities. Addad also README.md file with some useful information.
  Some code and documentation improvements.\n\n## 0.8.1.0 -- 2020-07-31\n\n* Eigth
  version revised A. Fixed issue with being not compiled fo GHC versions prior to
  8.4* series. \n\n## 0.9.0.0 -- 2020-08-01\n\n* Ninth version. Fixed issues with
  empty lists in the norms for some variants in DobutokO.Poetry.Norms module. Some
  documentation improvements.\n"
basic-deps:
  mmsyn3: '>=0.1.5 && <1'
  base: '>=4.7 && <4.15'
  mmsyn7s: '>=0.6.7 && <1'
  mmsyn6ukr: '>=0.7.3 && <1'
  vector: '>=0.11 && <0.14'
all-versions:
- 0.8.1.0
- 0.9.0.0
author: OleksandrZhabenko
latest: 0.9.0.0
description-type: markdown
description: "There are different languages. They have different structure and rules.
  \nBut there is a possibility to create and use (on the one of the existing \nvastly
  used and well spreaded languages basis, in this work, the \nUkrainian one) the \"phonetical\"
  language more suitable for poetry and \nmusic. Even there can be different variants
  of the \nphonetical language. This work proposes to create at least two new \n\"phonetical\"
  languages on the Ukrainian basis. \n\nImagine, you can understand the information
  in the text no matter of \nthe words order and only with the most needed grammar
  preserved (for \nexample, the rule not to separate the preposition and the next
  word \nis preserved). Understand just like you can read the text (after \nsome instruction
  and training might be) the text with the words where \nonly the first and the last
  letters are preserved on their places and \nthe rest are interchangeably mixed.
  So imagine, you can understand (and \nexpress your thoughts, feeling, motives and
  so on) the message of the \ntext with no strict word order preserved. \n\nIn such
  a case, you can rearrange words (preserving the most important \nrules in this case
  to reduce or even completely eliminate ambiguity) so \nthat they can obtain more
  interesting phonetical sounding. You can try \nto create poetic (at least somewhat
  rhythmic and expressive) text or \nmusic. This can be an inspiring and developing
  exercise itself. But \nhow can you quickly find out which combinations are more
  or less suitable? \nBesides, can the complexity of the algorithms be reduced? \n\nThese
  are some of the interesting questions. The work does not at the \nmoment answers
  them, but is experimental, still may be valueable. \n\nUkrainian is the language
  with no strict words order needed (though there \ndo exist some preferences in it)
  and have rather pleasant sounding. So it \ncan be a good example and instance. Besides
  for the author it is a native \nlanguage.\n\nEven if you would not like to create
  and use \"phonetical\" languages where \nphonetics is of more importance than the
  grammar, then you can evaluate the \nphonetical potential of the words used in the
  text in producing specially \nsounding texts. This can also be helpful in poetry
  writing and other \nprobably related fields.\n"
license-name: MIT
