homepage: https://github.com/tserduke/do-list#readme
changelog-type: markdown
hash: d7d018b33e04ab5caa1fe7bb3a551ce14ae8b64ec0d459a6c38666164310b611
test-bench-deps:
  base: <5
  hspec: -any
  text: -any
  criterion: -any
  do-list: -any
  mtl: -any
maintainer: taras.serduke@gmail.com
synopsis: Do notation for free
changelog: ! '# Change Log


  ## 1.0.1 (2016-09-19)

  * Links to Stackage in readme

  * Minor cabal package fixes


  ## 1.0.0 (2016-09-12)

  * Added DoMonoid with IsString and IsList instances

  * Replaced DList with DoMonoid for DoList -> better performance

  * Removed toDList function

  * Removed dependency on dlist

  * Added more usage examples

  * Better readme

  * More benchmarks

  * Documentation edits

  * Added Hackage badge


  ## 0.9.1 (2016-09-10)

  * IsList instance

  * More bechmarks


  ## 0.9.0 (2016-09-08)

  * Changed back result type of item to polymorphic

  * Added IsString instance

  * Renamed unDoList to toDList

  * Documentation edits

  * Added benchmarks


  ## 0.8.1 (2016-09-07)

  * Reified result type of item to ()

  * Added note about Control.Monad.Writer

  * Minor documentation edits

'
basic-deps:
  base: <5
all-versions:
- 0.8.0
- 0.8.1
- 0.9.0
- 0.9.1
- 1.0.0
- 1.0.1
author: Taras Serduke
latest: 1.0.1
description-type: markdown
description: ! "# do-list [![do-list][stackage-badge]][do-list] [![do-list][hackage-badge]][hackage]\nDo
  notation for free.\n\n## Summary\n[do-list] makes it easy to use do notation. You
  can construct lists or monoids using [`DoList`] or [`DoMonoid`] modules respectively.
  [do-list] is designed to work well with `OverloadedStrings` and `OverloadedLists`
  extensions. See examples.\n\nAs alternative there is a canonical [`Writer`] without
  overloading support.\n\n## Examples\n\n### Benchmarks\n```haskell\n{-# LANGUAGE
  OverloadedLists #-}\n\nmodule Main (main) where\n\nimport Criterion.Main\nimport
  Data.DoList (DoList, item, toList)\n\nmain :: IO ()\nmain = defaultMain $ toList
  $ do\n  doBench \"add\"  $ whnf (2 +) (1 :: Int)\n  doBench \"sub\" $ whnf (2 -)
  (1 :: Int)\n  -- Regular criterion benchmarks are injected via list overloading\n
  \ [multBench, divBench]\n\nmultBench, divBench :: Benchmark\nmultBench = bench \"mult\"
  $ whnf (2 *) (2 :: Int)\ndivBench = bench \"div\" $ whnf (2 `div`) (2 :: Int)\n\n--
  Now we can define benchmarks with do notation.\ndoBench :: String -> Benchmarkable
  -> DoList Benchmark\ndoBench name = item . bench name\n```\n\n### Multiline Text\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# OPTIONS_GHC -fno-warn-unused-do-bind #-}\n\nmodule
  Main (main) where\n\nimport Data.DoMonoid (runDoM)\nimport Data.Text.IO as T (putStr)\n\nmain
  :: IO ()\nmain = T.putStr $ runDoM $ do\n  -- Lines are combined using Text.append\n
  \ \"fib 0 = 0\\n\"\n  \"fib 1 = 1\\n\"\n  \"fib n = fib (n-1) + fib (n-2)\\n\"\n```\n\n###
  Indentation\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n{-# OPTIONS_GHC -fno-warn-unused-do-bind
  #-}\n\nmodule Main (main) where\n\nimport Data.DoList (DoList, fromList, toList)\nimport
  Data.Text as T (Text, append, unlines)\nimport Data.Text.IO as T (putStr)\n\nmain
  :: IO ()\nmain = T.putStr $ T.unlines $ toList $ do\n  \"Here goes indented list:\"\n
  \ indent $ do\n    \"1. Item 1\"\n    indent $ do\n      \"* Item a\"\n      \"*
  Item b\"\n    \"2. Item 2\"\n    \"3. Item 3\"\n\nindent :: DoList Text -> DoList
  Text\n-- fromList and toList are no-ops\nindent = fromList . map (append \"  \")
  . toList\n```\n\n[do-list]: https://www.stackage.org/package/do-list\n[hackage]:
  https://hackage.haskell.org/package/do-list\n[hackage-badge]: https://img.shields.io/hackage/v/do-list.svg\n[stackage-badge]:
  https://www.stackage.org/package/do-list/badge/lts\n[`DoList`]: https://hackage.haskell.org/package/do-list/docs/Data-DoList.html\n[`DoMonoid`]:
  https://hackage.haskell.org/package/do-list/docs/Data-DoMonoid.html\n[`Writer`]:
  https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Writer-Lazy.html\n"
license-name: BSD-3-Clause
