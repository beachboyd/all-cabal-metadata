homepage: https://github.com/jgm/doctemplates#readme
changelog-type: ''
hash: 465f58a0d5911de3c2e67174a8f69566d8e1dafebfac192352a903b001d71dff
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  doctemplates: -any
  aeson: -any
maintainer: jgm@berkeley.edu
synopsis: Pandoc-style document templates
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  blaze-markup: -any
  unordered-containers: -any
  text: -any
  parsec: -any
  containers: -any
  blaze-html: -any
  scientific: -any
  aeson: -any
  vector: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.2'
author: John MacFarlane
latest: '0.2'
description-type: markdown
description: ! "# doctemplates\n\nThis is the templating system used by pandoc.  It
  was formerly\nbe a module in pandoc. It has been split off to make it easier\nto
  use independently.\n\nExample:\n\n``` haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport
  Data.Text\nimport Data.Aeson\nimport Text.DocTemplates\n\ndata Employee = Employee
  { firstName :: String\n                         , lastName  :: String\n                         ,
  salary    :: Maybe Int }\ninstance ToJSON Employee where\n  toJSON e = object [
  \"name\" .= object [ \"first\" .= firstName e\n                                       ,
  \"last\"  .= lastName e ]\n                    , \"salary\" .= salary e ]\n\ntemplate
  :: Text\ntemplate = \"$for(employee)$Hi, $employee.name.first$. $if(employee.salary)$You
  make $employee.salary$.$else$No salary data.$endif$$sep$\\n$endfor$\"\n\nmain =
  case compileTemplate template of\n         Left e    -> error e\n         Right
  t   -> putStrLn $ renderTemplate t $ object\n                        [\"employee\"
  .=\n                          [ Employee \"John\" \"Doe\" Nothing\n                          ,
  Employee \"Omar\" \"Smith\" (Just 30000)\n                          , Employee \"Sara\"
  \"Chen\" (Just 60000) ]\n                        ]\n```\n\nA slot for an interpolated
  variable is a variable name surrounded\nby dollar signs.  To include a literal `$`
  in your template, use\n`$$`.  Variable names must begin with a letter and can contain
  letters,\nnumbers, `_`, `-`, and `.`.\n\nThe values of variables are determined
  by a JSON object that is\npassed as a parameter to `renderTemplate`.  So, for example,\n`title`
  will return the value of the `title` field, and\n`employee.salary` will return the
  value of the `salary` field\nof the object that is the value of the `employee` field.\n\nThe
  value of a variable will be indented to the same level as the\nvariable.\n\nA conditional
  begins with `$if(variable_name)$` and ends with `$endif$`.\nIt may optionally contain
  an `$else$` section.  The if section is\nused if `variable_name` has a non-null
  value, otherwise the else section\nis used.\n\nConditional keywords should not be
  indented, or unexpected spacing\nproblems may occur.\n\nThe `$for$` keyword can
  be used to iterate over an array.  If\nthe value of the associated variable is not
  an array, a single\niteration will be performed on its value.\n\nYou may optionally
  specify separators using `$sep$`, as in the\nexample above.\n\nAnything between
  the sequence `$--` and the end of the line\nwill be treated as a comment.\n"
license-name: BSD3
