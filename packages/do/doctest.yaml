homepage: https://github.com/sol/doctest#readme
changelog-type: text
hash: 0c8d44a0a781a6c277260788d9c1929f853cf2cb7d2ca36691222d01ddac1934
test-bench-deps:
  ghc: ! '>=7.0 && <8.7'
  setenv: -any
  with-location: -any
  base: ! '>=4.5 && <5'
  hspec: ! '>=1.5.1'
  syb: ! '>=0.3'
  code-page: ! '>=0.1'
  filepath: -any
  process: -any
  doctest: -any
  HUnit: -any
  stringbuilder: ! '>=0.4'
  silently: ! '>=1.2.4'
  mockery: -any
  base-compat: ! '>=0.7.0'
  ghc-paths: ! '>=0.1.0.9'
  transformers: -any
  deepseq: -any
  QuickCheck: ! '>=2.11.3'
  directory: -any
maintainer: Simon Hengel <sol@typeful.net>
synopsis: Test interactive Haskell examples
changelog: ! "Changes in 0.16.0.1\n  - Bump bounds to allow GHC 8.6. (#210)\n\nChanges
  in 0.16.0\n  - Output format has changed to (hopefully) be more machine consumable.
  (#200)\n\nChanges in 0.15.0\n  - Add `--verbose` for printing each test as it is
  run\n\nChanges in 0.14.1\n  - Add test assets to source tarball (see #189)\n\nChanges
  in 0.14.0\n  - GHC 8.4 compatibility.\n\nChanges in 0.13.0\n  - Add `--preserve-it`
  for allowing the `it` variable to be preserved between examples\n\nChanges in 0.12.0\n
  \ - Preserve the 'it' variable between examples\n\nChanges in 0.11.4\n  - Add `--fast`,
  which disables running `:reload` between example groups\n\nChanges in 0.11.3\n  -
  Add `--info`\n  - Add `--no-magic`\n\nChanges in 0.11.2\n  - Make `...` match zero
  lines\n\nChanges in 0.11.1\n - Fix an issue with Unicode output on Windows (see
  #149)\n\nChanges in 0.11.0\n - Support for GHC 8.0.1-rc2\n\nChanges in 0.10.1\n
  - Automatically expand directories into contained Haskell source files (thanks @snoyberg)\n
  - Add cabal_macros.h and autogen dir by default (thanks @snoyberg)\n\nChanges in
  0.10.0\n - Support HASKELL_PACKAGE_SANDBOXES (thanks @snoyberg)\n\nChanges in 0.9.13\n
  - Add ellipsis as wildcard\n\nChanges in 0.9.12\n - Add support for GHC 7.10\n\nChanges
  in 0.9.11\n - Defaults ambiguous type variables to Integer (#74)\n\nChanges in 0.9.10\n
  - Add support for the upcoming GHC 7.8 release\n\nChanges in 0.9.9\n - Add support
  for multi-line statements\n\nChanges in 0.9.8\n - Support for GHC HEAD (7.7)\n\nChanges
  in 0.9.7\n - Ignore trailing whitespace when matching example output\n\nChanges
  in 0.9.6\n - Fail gracefully if GHCi is not supported (#46)\n\nChanges in 0.9.5\n
  - Fix a GHC panic with GHC 7.6.1 (#41)\n\nChanges in 0.9.4\n - Respect HASKELL_PACKAGE_SANDBOX
  (#39)\n - Print path to ghc on --version\n\nChanges in 0.9.3\n - Properly handle
  additional object files (#38)\n\nChanges in 0.9.2\n - Add support for QuickCheck
  properties\n\nChanges in 0.9.1\n - Fix an issue with GHC 7.6.1 and type families\n\nChanges
  in 0.9.0\n - Add support for setup code (see README).\n - There is no distinction
  between example/interaction anymore.  Each\n   expression is counted as an example
  in the summary.\n\nChanges in 0.8.0\n - Doctest now directly accepts arbitrary GHC
  options, prefixing GHC options\n   with --optghc is no longer necessary\n\nChanges
  in 0.7.0\n - Print source location for failing tests\n - Output less clutter on
  failing examples\n - Expose Doctest's functionality through a very simplistic API,
  which can be\n   used for cabal integration\n\nChanges in 0.6.1\n - Fix a parser
  bug with CR+LF line endings\n\nChanges in 0.6.0\n - Support for ghc-7.4\n - Doctest
  now comes with it's own parser and does not depend on Haddock\n   anymore\n\nChanges
  in 0.5.2\n - Proper handling of singular/plural when printing stats\n - Improve
  handling of invalid command line options\n\nChanges in 0.5.1\n - Adapted for ghc-7.2\n\nChanges
  in 0.5.0\n - Print number of interactions to stderr before running tests\n - Exit
  with exitFailure on failed tests\n - Improve documentation\n - Give a useful error
  message if ghc is not executable\n"
basic-deps:
  ghc: ! '>=7.0 && <8.7'
  base: ! '>=4.5 && <5'
  syb: ! '>=0.3'
  code-page: ! '>=0.1'
  filepath: -any
  process: -any
  doctest: -any
  base-compat: ! '>=0.7.0'
  ghc-paths: ! '>=0.1.0.9'
  transformers: -any
  deepseq: -any
  directory: -any
all-versions:
- '0.3.0'
- '0.4.0'
- '0.4.1'
- '0.4.2'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.6.0'
- '0.6.0.1'
- '0.6.1'
- '0.7.0'
- '0.8.0'
- '0.8.0.1'
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.2.1'
- '0.9.3'
- '0.9.4'
- '0.9.4.1'
- '0.9.5'
- '0.9.5.1'
- '0.9.6'
- '0.9.7'
- '0.9.8'
- '0.9.9'
- '0.9.10'
- '0.9.10.1'
- '0.9.10.2'
- '0.9.11'
- '0.9.11.1'
- '0.9.12'
- '0.9.13'
- '0.10.0'
- '0.10.1'
- '0.11.0'
- '0.11.1'
- '0.11.2'
- '0.11.3'
- '0.11.4'
- '0.13.0'
- '0.14.0'
- '0.14.1'
- '0.15.0'
- '0.15.1'
- '0.16.0'
- '0.16.0.1'
author: Simon Hengel <sol@typeful.net>
latest: '0.16.0.1'
description-type: markdown
description: ! "# Doctest: Test interactive Haskell examples\n\n`doctest` is a small
  program, that checks [examples in Haddock comments](http://www.haskell.org/haddock/doc/html/ch03s08.html#id566093).
  \ It is similar\nto the [popular Python module with the same name](http://docs.python.org/library/doctest.html).\n\n\n##
  Installation\n\n`doctest` is available from\n[Hackage](http://hackage.haskell.org/cgi-bin/hackage-scripts/package/doctest).\nInstall
  it, by typing:\n\n    cabal install doctest\n\nMake sure that Cabal's `bindir` is
  on your `PATH`.\n\nOn Linux:\n\n    export PATH=\"$HOME/.cabal/bin:$PATH\"\n\nOn
  Mac OS X:\n\n    export PATH=\"$HOME/Library/Haskell/bin:$PATH\"\n\nOn Windows:\n\n
  \   set PATH=\"%AppData%\\cabal\\bin\\;%PATH%\"\n\nFor more information, see the
  [section on paths in the Cabal User Guide](http://www.haskell.org/cabal/users-guide/installing-packages.html#paths-in-the-simple-build-system).\n\n##
  Usage\n\nBelow is a small Haskell module.\nThe module contains a Haddock comment
  with some examples of interaction.\nThe examples demonstrate how the module is supposed
  to be used.\n\n```haskell\nmodule Fib where\n\n-- | Compute Fibonacci numbers\n--\n--
  Examples:\n--\n-- >>> fib 10\n-- 55\n--\n-- >>> fib 5\n-- 5\nfib :: Int -> Int\nfib
  0 = 0\nfib 1 = 1\nfib n = fib (n - 1) + fib (n - 2)\n```\n\n(A comment line starting
  with `>>>` denotes an _expression_.\nAll comment lines following an expression denote
  the _result_ of that expression.\nResult is defined by what an\n[REPL](http://en.wikipedia.org/wiki/Read-eval-print_loop)
  (e.g. ghci)\nprints to `stdout` and `stderr` when evaluating that expression.)\n\nWith
  `doctest` you may check whether the implementation satisfies the given examples,
  by typing:\n\n    doctest Fib.hs\n\nYou may produce Haddock documentation for that
  module with:\n\n    haddock -h Fib.hs -o doc/\n\n### Example groups\n\nExamples
  from a single Haddock comment are grouped together and share the same\nscope.  E.g.
  the following works:\n\n```haskell\n-- |\n-- >>> let x = 23\n-- >>> x + 42\n-- 65\n```\n\nIf
  an example fails, subsequent examples from the same group are skipped.  E.g.\nfor\n\n```haskell\n--
  |\n-- >>> let x = 23\n-- >>> let n = x + y\n-- >>> print n\n```\n\n`print n` is
  not tried, because `let n = x + y` fails (`y` is not in scope!).\n\n#### A note
  on performance\n\nBy default, `doctest` calls `:reload` between each group to clear
  GHCi's scope\nof any local definitions. This ensures that previous examples cannot
  influence\nlater ones. However, it can lead to performance penalties if you are
  using\n`doctest` in a project with many modules. One possible remedy is to pass
  the\n`--fast` flag to `doctest`, which disables calling `:reload` between groups.\nIf
  `doctest`s are running too slowly, you might consider using `--fast`.\n(With the
  caveat that the order in which groups appear now matters!)\n\nHowever, note that
  due to a\n[bug on GHC 8.2.1 or later](https://ghc.haskell.org/trac/ghc/ticket/14052),\nthe
  performance of `--fast` suffers significantly when combined with the\n`--preserve-it`
  flag (which keeps the value of GHCi's `it` value between\nexamples).\n\n### Setup
  code\n\nYou can put setup code in a [named chunk][named-chunks] with the name `$setup`.\nThe
  setup code is run before each example group.  If the setup code produces\nany errors/failures,
  all tests from that module are skipped.\n\nHere is an example:\n\n```haskell\nmodule
  Foo where\n\nimport Bar.Baz\n\n-- $setup\n-- >>> let x = 23 :: Int\n\n-- |\n-- >>>
  foo + x\n-- 65\nfoo :: Int\nfoo = 42\n```\n\nNote that you should not place setup
  code inbetween the module header (`module\n...  where`) and import declarations.
  GHC will not be able to parse it ([issue\n #167](https://github.com/sol/doctest/issues/167)).
  It is best to place setup\ncode right after import declarations, but due to its
  declarative nature you can\nplace it anywhere inbetween top level declarations as
  well.\n\n\n### Multi-line input\nGHCi supports commands which span multiple lines,
  and the same syntax works for doctest:\n\n```haskell\n-- |\n-- >>> :{\n--  let\n--
  \   x = 1\n--    y = 2\n--  in x + y + multiline\n-- :}\n-- 6\nmultiline = 3\n```\n\nNote
  that `>>>` can be left off for the lines following the first: this is so that\nhaddock
  does not strip leading whitespace. The expected output has whitespace\nstripped
  relative to the :}.\n\nSome peculiarities on the ghci side mean that whitespace
  at the very start is lost.\nThis breaks the example `broken`, since the the x and
  y are aligned from ghci's\nperspective.  A workaround is to avoid leading space,
  or add a newline such\nthat the indentation does not matter:\n\n```haskell\n{- |
  >>> :{\nlet x = 1\n    y = 2\n  in x + y + works\n:}\n6\n-}\nworks = 3\n\n{- | >>>
  :{\n let x = 1\n     y = 2\n  in x + y + broken\n:}\n3\n-}\nbroken = 3\n```\n\n###
  Multi-line output\nIf there are no blank lines in the output, multiple lines are
  handled\nautomatically.\n\n```haskell\n-- | >>> putStr \"Hello\\nWorld!\"\n-- Hello\n--
  World!\n```\n\nIf however the output contains blank lines, they must be noted\nexplicitly
  with `<BLANKLINE>`. For example,\n\n```haskell\nimport Data.List ( intercalate )\n\n--
  | Double-space a paragraph.\n--\n--   Examples:\n--\n--   >>> let s1 = \"\\\"Every
  one of whom?\\\"\"\n--   >>> let s2 = \"\\\"Every one of whom do you think?\\\"\"\n--
  \  >>> let s3 = \"\\\"I haven't any idea.\\\"\"\n--   >>> let paragraph = unlines
  [s1,s2,s3]\n--   >>> putStrLn $ doubleSpace paragraph\n--   \"Every one of whom?\"\n--
  \  <BLANKLINE>\n--   \"Every one of whom do you think?\"\n--   <BLANKLINE>\n--   \"I
  haven't any idea.\"\n--\ndoubleSpace :: String -> String\ndoubleSpace = (intercalate
  \"\\n\\n\") . lines\n```\n\n### Matching arbitrary output\nAny lines containing
  only three dots (`...`) will match one or more lines with\narbitrary content. For
  instance,\n\n```haskell\n-- |\n-- >>> putStrLn \"foo\\nbar\\nbaz\"\n-- foo\n-- ...\n--
  baz\n```\n\nIf a line contains three dots and additional content, the three dots
  will match\nanything *within that line*:\n\n```haskell\n-- |\n-- >>> putStrLn \"foo
  bar baz\"\n-- foo ... baz\n```\n\n### QuickCheck properties\n\nHaddock (since version
  2.13.0) has markup support for properties.  Doctest can\nverify properties with
  QuickCheck.  A simple property looks like this:\n\n```haskell\n-- |\n-- prop> \\xs
  -> sort xs == (sort . sort) (xs :: [Int])\n```\n\nThe lambda abstraction is optional
  and can be omitted:\n\n```haskell\n-- |\n-- prop> sort xs == (sort . sort) (xs ::
  [Int])\n```\n\nA complete example that uses setup code is below:\n\n```haskell\nmodule
  Fib where\n\n-- $setup\n-- >>> import Control.Applicative\n-- >>> import Test.QuickCheck\n--
  >>> newtype Small = Small Int deriving Show\n-- >>> instance Arbitrary Small where
  arbitrary = Small . (`mod` 10) <$> arbitrary\n\n-- | Compute Fibonacci numbers\n--\n--
  The following property holds:\n--\n-- prop> \\(Small n) -> fib n == fib (n + 2)
  - fib (n + 1)\nfib :: Int -> Int\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n - 1) + fib
  (n - 2)\n```\n\nIf you see an error like the following, ensure that\n[QuickCheck](http://hackage.haskell.org/package/QuickCheck)
  is a dependency\nof the test-suite or executable running `doctest`.\n\n```haskell\n<interactive>:39:3:\n
  \   Not in scope: ‘polyQuickCheck’\n    In the splice: $(polyQuickCheck (mkName
  \"doctest_prop\"))\n\n<interactive>:39:3:\n    GHC stage restriction:\n      ‘polyQuickCheck’
  is used in a top-level splice or annotation,\n      and must be imported, not defined
  locally\n    In the expression: polyQuickCheck (mkName \"doctest_prop\")\n    In
  the splice: $(polyQuickCheck (mkName \"doctest_prop\"))\n```\n\n### Hiding examples
  from Haddock\n\nYou can put examples into [named chunks] [named-chunks], and not
  refer to them\nin the export list.  That way they will not be part of the generated
  Haddock\ndocumentation, but Doctest will still find them.\n\n```haskell\n-- $\n--
  >>> 1 + 1\n-- 2\n```\n\n[named-chunks]: http://www.haskell.org/haddock/doc/html/ch03s05.html\n\n###
  Using GHC extensions\n\nThere's two sets of GHC extensions involved when running
  Doctest:\n\n1. The set of GHC extensions that are active when compiling the module
  code\n(excluding the doctest examples). The easiest way to specify these extensions\nis
  through [LANGUAGE pragmas] [language-pragma] in your source files.\n(Doctest will
  not look at your cabal file.)\n2. The set of GHC extensions that are active when
  executing the Doctest\nexamples. (These are not influenced by the LANGUAGE pragmas
  in the file.) The\nrecommended way to enable extensions for Doctest examples is
  to switch them\non like this:\n\n```haskell\n-- |\n-- >>> :set -XTupleSections\n--
  >>> fst' $ (1,) 2\n-- 1\nfst' :: (a, b) -> a\nfst' = fst\n```\n\nAlternatively you
  can pass any GHC options to Doctest, e.g.:\n\n    doctest -XCPP Foo.hs\n\nThese
  options will affect both the loading of the module and the execution of\nthe Doctest
  examples.\n\nIf you want to omit the information which language extensions are enabled
  from\nthe Doctest examples you can use the method described in [Hiding examples
  from\nHaddock] (#hiding-examples-from-haddock), e.g.:\n\n```haskell\n-- $\n-- >>>
  :set -XTupleSections\n```\n\n[language-pragma]: http://www.haskell.org/ghc/docs/latest/html/users_guide/pragmas.html#language-pragma\n\n###
  Cabal integration\n\nDoctest provides both, an executable and a library.  The library
  exposes a\nfunction `doctest` of type:\n\n```haskell\ndoctest :: [String] -> IO
  ()\n```\n\nDoctest's own `main` is simply:\n\n```haskell\nmain = getArgs >>= doctest\n```\n\nConsequently,
  it is possible to create a custom executable for a project, by\npassing all command-line
  arguments that are required for that project to\n`doctest`.  A simple example looks
  like this:\n\n```haskell\n-- file doctests.hs\nimport Test.DocTest\nmain = doctest
  [\"-isrc\", \"src/Main.hs\"]\n```\n\nAnd a corresponding Cabal test suite section
  like this:\n\n    test-suite doctests\n      type:          exitcode-stdio-1.0\n
  \     ghc-options:   -threaded\n      main-is:       doctests.hs\n      build-depends:
  base, doctest >= 0.8\n\n## Doctest in the wild\n\nYou can find real world examples
  of `Doctest` being used below:\n\n  * [base Data/Maybe.hs](https://github.com/ghc/ghc/blob/669cbef03c220de43b0f88f2b2238bf3c02ed64c/libraries/base/Data/Maybe.hs#L36-L79)\n
  \ * [base Data/Functor.hs](https://github.com/ghc/ghc/blob/669cbef03c220de43b0f88f2b2238bf3c02ed64c/libraries/base/Data/Functor.hs#L34-L64)\n\n\n##
  Doctest extensions\n\n  * [doctest-discover](https://github.com/karun012/doctest-discover)\n\n##
  Development [![Build Status](https://secure.travis-ci.org/sol/doctest.png)](http://travis-ci.org/sol/doctest)\n\nJoin
  in at `#hspec` on freenode.\n\nDiscuss your ideas first, ideally by opening an issue
  on GitHub.\n\nAdd tests for new features, and make sure that the test suite passes
  with your\nchanges.\n\n    cabal configure --enable-tests && cabal build && cabal
  exec cabal test\n\n\n## Contributors\n\n * Adam Vogt\n * Anders Persson\n * Ankit
  Ahuja\n * Edward Kmett\n * Hiroki Hattori\n * Joachim Breitner\n * João Cristóvão\n
  * Julian Arni\n * Kazu Yamamoto\n * Levent Erkok\n * Luke Murphy\n * Matvey Aksenov\n
  * Michael Orlitzky\n * Michael Snoyman\n * Nick Smallbone\n * Sakari Jokinen\n *
  Simon Hengel\n * Sönke Hahn\n"
license-name: MIT
