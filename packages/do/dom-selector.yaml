homepage: https://github.com/nebuta/
changelog-type: ''
hash: 89f5dc75d762b01b9b09a42cc84ae8145efb3a2c5ba4f0d5605d928812606a5f
test-bench-deps:
  xml-conduit: -any
  base: ! '>=4.0 && <5'
  text: ! '>=0.11'
  parsec: ! '>=3.1'
  html-conduit: ! '>=0.1'
  containers: ! '>=0.4'
  blaze-html: ! '>=0.5'
  QuickCheck: ! '>=2.4'
  th-lift: ! '>=0.5'
  template-haskell: ! '>=2.5'
maintainer: nebuta.office@gmail.com
synopsis: DOM traversal by CSS selectors for xml-conduit package
changelog: ''
basic-deps:
  xml-conduit: -any
  base: ! '>=4.0 && <5'
  text: ! '>=0.11'
  parsec: ! '>=3.1'
  html-conduit: ! '>=0.1'
  containers: ! '>=0.4'
  blaze-html: ! '>=0.5'
  QuickCheck: ! '>=2.4'
  th-lift: ! '>=0.5'
  template-haskell: ! '>=2.5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
author: Nebuta Lab
latest: 0.2.0.1
description-type: haddock
description: ! 'CSS selector support for xml-conduit/html-conduit. This package supports
  compile-time checking of CSS selectors using quasiquotes. All DOM traversals are
  purely functional.


  * Quick start


  > -- The following pragmas should be put first (Haddock does not accept a pragma
  notation.)

  > -- LANGUAGE OverloadedStrings, QuasiQuotes

  >

  > module Main (main) where

  >

  > import Text.XML.Cursor (fromDocument)

  > import Text.HTML.DOM (parseLBS)

  > import qualified Data.Text.Lazy.IO as TI (putStrLn)

  >

  > import Control.Monad (mapM_)

  >

  > import Text.XML.Scraping (innerHtml)

  > import Text.XML.Selector.TH

  >

  > import Network.HTTP.Conduit

  > import Data.Conduit.Binary

  >

  > main :: IO ()

  > main = do

  >    root <- fmap (fromDocument . parseLBS) $ simpleHttp "https://news.google.com/"

  >    let cs = queryT [jq| h2 span.titletext |] root

  >    mapM_ (TI.putStrLn . innerHtml) cs


  You can use some elementary CSS selectors for traversing a DOM tree.


  * Other examples


  <https://github.com/nebuta/dom-selector/tree/master/examples>


  Changes:


  Ver 0.2.1: Inappropriate Safe Haskell pragma was removed.


  Ver 0.2: All scraping functions in Text.XML.Scraping return lazy text now. They
  are implemented with a type class.'
license-name: BSD-3-Clause
