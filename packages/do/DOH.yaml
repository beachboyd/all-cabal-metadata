homepage: ''
changelog-type: ''
hash: adcdb4f29084f337de2facc435c2fda1c879f0f3126f0392ff7509518ff39279
test-bench-deps:
  http-client: -any
  bytestring: -any
  aeson-casing: -any
  base: ! '>=4.9 && <=5.0'
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  interpolatedstring-perl6: -any
  containers: -any
  lens: -any
  quickcheck-instances: -any
  http-client-tls: -any
  network-uri: -any
  mtl: -any
  QuickCheck: -any
  http-types: -any
  aeson: -any
maintainer: yigitozkavci8@gmail.com
synopsis: Complete API bindings for DigitalOcean API V2
changelog: ''
basic-deps:
  http-client: -any
  bytestring: -any
  aeson-casing: -any
  base: ! '>=4.9 && <=5.0'
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  containers: -any
  lens: -any
  http-client-tls: -any
  network-uri: -any
  mtl: -any
  http-types: -any
  aeson: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.1.1'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.4.0'
author: Yiğit Özkavcı
latest: '0.1.4.0'
description-type: markdown
description: ! "# DOH\nComplete API bindings for DigitalOcean API V2\n\n# Getting
  Started\nHere is an example usage of the API:\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main where\n\n-----------------------------------------------------------------\nimport
  Network.DigitalOcean\nimport Network.DigitalOcean.Types\nimport Network.DigitalOcean.Services\n-----------------------------------------------------------------\nimport
  Control.Monad.Except\nimport Control.Monad.Reader\n-----------------------------------------------------------------\n\nclient
  :: Client\nclient = Client \"your api key\"\n\nmain :: IO ()\nmain = do\n  result
  <- runExceptT $ (runReaderT $ runDO createViaSshKeys) client\n  case result of\n
  \   Left err -> print err\n    Right _ -> return ()\n\ncreateViaSshKeys :: DO ()\ncreateViaSshKeys
  = do\n  -- Read a public key from a key pair and create ssh keys on DigitalOcean
  with it\n  pubKey <- liftIO $ readFile \"/Users/yigitozkavci/.ssh/do_api_rsa.pub\"\n
  \ sshKey <- createSSHKey (SSHKeyPayload \"my api key\" pubKey) \n  \n  -- Create
  2 droplets with our newly uploaded ssh keys\n  let dropletPayload = IDropletPayload
  \"nyc3\" \"512mb\" Ubuntu1404x64 (Just [sshkeyFingerprint sshKey]) Nothing Nothing
  Nothing Nothing Nothing Nothing Nothing\n  droplets <- map dropletId <$> createDroplets
  [\"droplet-1\", \"droplet-2\"] dropletPayload\n\n  -- Take snapshot of our newly
  created droplets\n  forM_ droplets $ \\dropletId -> performDropletAction dropletId
  (TakeSnapshot (Just \"bulk snapshot\"))\n```\n\nFor full documentation and reference,
  see: http://hackage.haskell.org/package/DOH-0.1.2.0\n\n# Contributing\nWhat can
  you do?\n- You can [open an issue](https://github.com/inzva/DigitalOcean.hs/issues/new)
  for unexpected / needed behaviors\n- Better, you can send a Pull Request\n\nAny
  kind of contributions are welcome, even if it's updating docs / improving commenting
  / improving tests.\n"
license-name: MIT
