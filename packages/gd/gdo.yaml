homepage: ''
changelog-type: ''
hash: c6d019f5575b2d92ad4682dcda979c6546f4d21cb8357d05a95b42fa5f104c2b
test-bench-deps: {}
maintainer: sebastian.jordan.mail@googlemail.com
synopsis: recursive atomic build system
changelog: ''
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.8 && <5'
  filepath: ! '>=1.0'
  process: ! '>=1.1'
  containers: ! '>=0.1'
  transformers: ! '>=0.4'
  directory: ! '>=1.2'
  cryptohash: ! '>=0.8'
all-versions:
- 0.1.0
- 0.1.2
- 0.1.4
- 0.1.5
author: Sebastian Jordan
latest: 0.1.5
description-type: text
description: ! "#+TITLE: GDO\n#+SECTION: 1\n#+date: January 07, 2016\n* NAME\n  gdo
  - atomic build system\n\n* SYNOPSIS\n  *gdo* [ *--if* mode] [ *-h* ] target ...\n\n*
  DESCRIPTION\n  *gdo* is a build system similar to *GNU Make*.  It builds files from\n
  \ sources and recipes.\n\n* RECIPES\n  Recipes have the suffix *.do*.  So for a
  target *targetfile* the\n  recipe would be *targetfile.do*.\n\n  The recipes are
  regulare, executable files which build the target.\n\n  For a script to work as
  a do file it must specify the required\n  interpreter in the magic line of the file.\n
  \ When using *sh* as an interpreter this would be\n  #+begin_src sh\n    #!/usr/bin/env
  sh\n  #+end_src\n  or\n  #+begin_src sh\n    #!/bin/sh\n  #+end_src\n  where the
  first method is prefered.  To function properly on\n  different platforms.  The
  script must be marked as executable so\n  that a call to *exec* can be successful.
  \ \n\n  It is technically possible to use binaries for that task but is\n  highly
  discouraged because a binary format is not understandable by\n  a human.  This is
  especially harmful to the users security in build\n  system because a file can hide
  malicious code.\n\n  *gdo* is designed to run recursivly.  To signal a dependency
  for a\n  target to another file you call *gdo* from inside the targets do\n  file
  with the appropriate mode.\n\n  A target always implicitly depends on its do file.\n\n**
  ARGUMENTS\n   A do script is called with arguments by the *gdo* program.  The\n
  \  first argument that is passed to the do script is the directory\n   where the
  target file gets stored in.  This can be userful for\n   defining default do files.\n\n
  \  The second argument passed to the do script is the base name of the\n   target.
  \ For the target *targetfile.c* this would be *targetfile*,\n   for the target *targetfile.c.in*
  this would be *targetfile.c*.\n\n   The third argument passed to the do file the
  temporary file where\n   the target should be build to.  It is undefined behaviour
  to build\n   directly to the target name and can lead errors during the build\n
  \  process.\n\n** MODES\n   Modes are only used inside of recipes.  They do not
  work when used\n   outside of recipes.  Modes exist to signal dependencies to other\n
  \  files that the target (might) depend on.\n\n   * Changed :: This mode is used
  to signal that the target is out of\n                date if the specified arguments
  to a *gdo* call are out\n                of date.  An example for this would be
  an object file\n                generated by a C compiler that depends on a C source\n
  \               file.\n\n                An example *hello.o.do* file that uses
  *gdo --if\n                Changed*:\n                #+begin_src sh\n                  #!/usr/bin/env
  sh\n\n                  gdo --if Changed hello.c\n\n                  cc -c hello.c
  -o $3\n                #+end_src\n\n   * Created :: This mode signals that a target
  is out of date if a\n                specific file gets created on the file system.
  \ This\n                can be useful when dealing with C header files.  This\n
  \               way you can issue a recompilation when you create a\n                header
  file that is used for the linking process of\n                your program that
  precedes an already existing header\n                file with the same name in
  the compilers search path.\n                \n                An example *hello.do*
  file that uses *gdo --if Created*\n                #+begin_src sh\n                  #!/usr/bin/env
  sh\n\n                  gdo --if Changed hello.c\n                  gdo --if Created
  stdio.h\n\n                  cc -I. hello.c -o $3\n                #+end_src\n\n**
  DEFAULT DO FILES\n   If there is no recipe for a targetfile, *gdo* will look for
  a\n   default rule based on the targets file extension.  This only works\n   for
  files which have an extension.  Default do files are only\n   searched in the same
  directory as the target by default.  You can\n   extend the search path via the
  environment variable *GDO\\_DEFAULTS*.\n   When specified this variable must be
  a list of paths seperated by\n   colons.  This path is searched for default do files
  after no\n   default do files was found in the same directory as the target is\n
  \  in.\n\n** EXAMPLE\n   The source code you received with this product should contain
  a set\n   of examples for using *gdo*.  These examples can be found in the\n   *examples*
  directory.\n\n   This small example builds the \"hello world\" program in C.  There\n
  \  are 3 files in this directory: The first one is the source for the\n   program
  itself, *test.c*, the other two files are a do script for\n   the final executable
  *test.do* and a default do script for building\n   object files from C sources,
  *defaults/default.o.do*.  To build the\n   example you have to first point to the
  defaults directory, so that\n   *gdo* can find the default do file.  We assume that
  you are already\n   in the examples file of the gdo source code.  Then issue *gdo*
  to\n   build the target *test*.\n   #+begin_src sh\n     export GDO_DEFAULTS=$PWD/defaults\n
  \    gdo test\n     # output:\n     # redo \"test\"\n     # redo \"test.o\"\n     #
  redone \"test.o\"\n     # redone \"test\"\n   #+end_src\n   Now the targets should
  be build. You should take a look at the do\n   files to see some examples of what
  *gdo* is capable of.\n\n* COPYRIGHT\n  Copyright (C) 2016 by Sebastian Jordan.  This
  file is part of *gdo*.\n\n  *gdo* is free software: you can redistribute it and/or
  modify it\n  under the terms of the GNU General Public License as published by\n
  \ the Free Software Foundation, either version 3 of the License, or\n  (at your
  option) any later version.\n\n  This program is distributed in the hope that it
  will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of\n
  \ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  General Public
  License for more details.\n\n  You should have received a copy of the GNU General
  Public License\n  along with this program.  If not, see\n  <http://www.gnu.org/licenses/>.\n"
license-name: GPL-3.0-only
