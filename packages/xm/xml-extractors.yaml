homepage: https://github.com/holmisen/xml-extractors
changelog-type: markdown
hash: 6ceb4391fcb74a0776470ce1ced35d0aa4deffb5f3165d7526a53626abcb27b1
test-bench-deps: {}
maintainer: holmisen@gmail.com
synopsis: Extension to the xml package to extract data from parsed xml
changelog: "0.4.0.0\n\n  * Added several functions to the `Extractors` module:\n\n
  \   * `eitherMessageOrValue` from the `ShowErr` module and some others.\n\n\t* Both
  conversion functions from `Extra`.\n\n    This means less imports in many cases.\n\n
  \ * Some changes were made to the `Err` datatype:\n\n    * `ErrExpect` was renamed
  to `ErrExpectContent`.\n\n    * `ErrAttr` was renamed to `ErrExpectAttrib` and used
  for signalling a missing attribute.\n\n    * `ErrAttribValue` was added to cater
  for erroneous attribute values.\n\n    * Some field names have been given more descriptive
  names.\n\n    The conversion/validation function given to `attribAs` does no\n    longer
  need to return an `Err` value for errors, but only a string\n    description of
  the expected value format.\n\n0.3.0.0\n\n  * Added `anyContent`\n  * Added `choice`\n"
basic-deps:
  base: '>=4.6 && <5'
  xml: '>=1.3 && <1.4'
  mtl: '>=2.1 && <2.3'
  transformers: '>=0.3 && <0.6'
all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
author: Johan Holmquist
latest: 0.4.0.3
description-type: markdown
description: "xml-extractors\n==============\n\nThis is an extension to the\n[xml](http://hackage.haskell.org/package/xml)
  package, providing\nfunctions to extract data from parsed xml.\n\n\n## Motivation\n\nThe
  `xml` package provides functions to parse and get information from\nxml data. It
  will parse an xml string into a generic tree\nrepresentation. Extracting information
  from such a tree to some custom \ndata structure while keeping track of location
  to handle errors is\ntricky. This library helps with that.\n\nIf there is an error
  during extraction (expected information is absent\nor wrong), it will return an
  error value with position\ninformation. The idea is to provide decent error messages.\n\n\n##
  Example usage\n\nSuppose you have an xml file of books like this:\n\n```xml\n<?xml
  version=\"1.0\"?>\n<library>\n  <book id=\"1\" isbn=\"23234-1\">\n    <author>John
  Doe</author>\n    <title>Some book</title>\n  </book>\n  <book id=\"2\">\n    <author>You</author>\n
  \   <title>The Great Event</title>\n  </book>\n  ...\n</library>\n```\n\nand a Haskell
  data type to represent a book:\n\n```haskell\ndata Book = Book { bookId        ::
  Int\n                 , isbn          :: Maybe String\n                 , author,
  title :: String\n                 }\n```\n\nYou can parse the xml file into a generic
  tree structure using\n`parseXMLDoc` from the `xml` package. Then to transform this
  generic\nxml tree into `Book` objects you define extractors for books, like\nso:\n\n```haskell\nbook
  = element \"book\" $ do\n         i <- attribAs \"id\" integer\n         s <- optional
  (attrib \"isbn\")\n         children $ do\n           a <- element \"author\" $
  contents $ text\n           t <- element \"title\" $ contents $ text\n           return
  Book { bookId = i, author = a, title = t, isbn = s }\n\nlibrary = element \"library\"
  $ children $ only $ many book\n\nextractLibrary :: Element -> Either ExtractionErr
  [Book]\nextractLibrary = extractDocContents library\n```\n"
license-name: BSD-3-Clause
