homepage: http://xmonad.org/
changelog-type: markdown
hash: 3400e314505eb9887944df064c8a200d278f4ce884745b7ac3bff4181ea4e0b2
test-bench-deps: {}
maintainer: xmonad@haskell.org
synopsis: Third party extensions for xmonad
changelog: ! "# Change Log / Release Notes\n\n## unknown\n\n## 0.15\n\n### Breaking
  Changes\n\n  * `XMonad.Layout.Groups` & `XMonad.Layout.Groups.Helpers`\n    The
  layout will no longer perform refreshes inside of its message handling.\n    If
  you have been relying on it to in your xmonad.hs, you will need to start\n    sending
  its messages in a manner that properly handles refreshing, e.g. with\n    `sendMessage`.\n\n###
  New Modules\n\n  * `XMonad.Util.Purex`\n\n    Unlike the opaque `IO` actions that
  `X` actions can wrap, regular reads from\n    the `XConf` and modifications to the
  `XState` are fundamentally pure --\n    contrary to the current treatment of such
  actions in most xmonad code. Pure\n    modifications to the `WindowSet` can be readily
  composed, but due to the\n    need for those modifications to be properly handled
  by `windows`, other pure\n    changes to the `XState` cannot be interleaved with
  those changes to the\n    `WindowSet` without superfluous refreshes, hence breaking
  composability.\n\n    This module aims to rectify that situation by drawing attention
  to it and\n    providing `PureX`: a pure type with the same monadic interface to
  state as\n    `X`. The `XLike` typeclass enables writing actions generic over the
  two\n    monads; if pure, existing `X` actions can be generalised with only a change\n
  \   to the type signature. Various other utilities are provided, in particular\n
  \   the `defile` function which is needed by end-users.\n\n### Bug Fixes and Minor
  Changes\n\n  * Add support for GHC 8.6.1.\n\n  * `XMonad.Actions.MessageHandling`\n
  \   Refresh-performing functions updated to better reflect the new `sendMessage`.\n\n##
  0.14\n\n### Breaking Changes\n\n  * `XMonad.Layout.Spacing`\n\n    Rewrite `XMonad.Layout.Spacing`.
  Borders are no longer uniform but composed\n    of four sides each with its own
  border width. The screen and window borders\n    are now separate and can be independently
  toggled on/off. The screen border\n    examines the window/rectangle list resulting
  from 'runLayout' rather than\n    the stack, which makes it compatible with layouts
  such as the builtin\n    `Full`. The child layout will always be called with the
  screen border. If\n    only a single window is displayed (and `smartBorder` enabled),
  it will be\n    expanded into the original layout rectangle. Windows that are displayed
  but\n    not part of the stack, such as those created by 'XMonad.Layout.Decoration',\n
  \   will be shifted out of the way, but not scaled (not possible for windows\n    created
  by XMonad). This isn't perfect, so you might want to disable\n    `Spacing` on such
  layouts.\n\n  * `XMonad.Util.SpawnOnce`\n\n    - Added `spawnOnOnce`, `spawnNOnOnce`
  and `spawnAndDoOnce`. These are useful in startup hooks\n      to shift spawned
  windows to a specific workspace.\n\n  * Adding handling of modifySpacing message
  in smartSpacing and smartSpacingWithEdge layout modifier\n\n  * `XMonad.Actions.GridSelect`\n\n
  \   - Added field `gs_bordercolor` to `GSConfig` to specify border color.\n\n  *
  `XMonad.Layout.Minimize`\n\n     Though the interface it offers is quite similar,
  this module has been\n     almost completely rewritten. The new `XMonad.Actions.Minimize`
  contains\n     several functions that allow interaction with minimization window
  state.\n     If you are using this module, you must upgrade your configuration to
  import\n     `X.A.Minimize` and use `maximizeWindow` and `withLastMinimized` instead
  of\n     sending messages to `Minimized` layout. `XMonad.Hooks.RestoreMinimized`
  has\n     been completely deprecated, and its functions have no effect.\n\n  * `XMonad.Prompt.Unicode`\n\n
  \   - `unicodePrompt :: String -> XPConfig -> X ()` now additionally takes a\n      filepath
  to the `UnicodeData.txt` file containing unicode data.\n\n  * `XMonad.Actions.PhysicalScreens`\n\n
  \   `getScreen`, `viewScreen`, `sendToScreen`, `onNextNeighbour`, `onPrevNeighbour`
  now need a extra parameter\n    of type `ScreenComparator`. This allow the user
  to specify how he want his screen to be ordered default\n    value are:\n\n     -
  `def`(same as verticalScreenOrderer) will keep previous behavior\n     - `verticalScreenOrderer`\n
  \    - `horizontalScreenOrderer`\n\n    One can build his custom ScreenOrderer using:\n
  \    - `screenComparatorById` (allow to order by Xinerama id)\n     - `screenComparatorByRectangle`
  (allow to order by screen coordonate)\n     - `ScreenComparator` (allow to mix ordering
  by screen coordonate and xinerama id)\n\n  * `XMonad.Util.WorkspaceCompare`\n\n
  \   `getXineramaPhysicalWsCompare` now need a extra argument of type `ScreenComparator`
  defined in\n    `XMonad.Actions.PhysicalScreens` (see changelog of this module for
  more information)\n\n  * `XMonad.Hooks.EwmhDesktops`\n\n    - Simplify ewmhDesktopsLogHookCustom,
  and remove the gnome-panel specific\n      remapping of all visible windows to the
  active workspace (#216).\n    - Handle workspace renames that might be occuring
  in the custom function\n      that is provided to ewmhDesktopsLogHookCustom.\n\n
  \ * `XMonad.Hooks.DynamicLog`\n\n    - Support xmobar's \\<action> and \\<raw> tags;
  see `xmobarAction` and\n      `xmobarRaw`.\n\n  * `XMonad.Layout.NoBorders`\n\n
  \   The layout now maintains a list of windows that never have borders, and a\n
  \   list of windows that always have borders. Use `BorderMessage` to manage\n    these
  lists and the accompanying event hook (`borderEventHook`) to remove\n    destroyed
  windows from them. Also provides the `hasBorder` manage hook.\n\n    Two new conditions
  have been added to `Ambiguity`: `OnlyLayoutFloat` and\n    `OnlyLayoutFloatBelow`;
  `OnlyFloat` was renamed to `OnlyScreenFloat`.  See\n    the documentation for more
  information.\n\n    The type signature of `hiddens` was changed to accept a new
  `Rectangle`\n    parameter representing the bounds of the parent layout, placed
  after the\n    `WindowSet` parameter. Anyone defining a new instance of `SetsAmbiguous`\n
  \   will need to update their configuration. For example, replace \"`hiddens amb\n
  \   wset mst wrs =`\" either with \"`hiddens amb wset _ mst wrs =`\" or to make\n
  \   use of the new parameter with \"`hiddens amb wset lr mst wrs =`\".\n\n  * `XMonad.Actions.MessageFeedback`\n\n
  \   - Follow the naming conventions of `XMonad.Operations`. Functions returning\n
  \     `X ()` are named regularly (previously these ended in underscore) while\n
  \     those returning `X Bool` are suffixed with an uppercase 'B'.\n    - Provide
  all `X Bool` and `SomeMessage` variations for `sendMessage` and\n      `sendMessageWithNoRefresh`,
  not just `sendMessageWithNoRefreshToCurrent`\n      (renamed from `send`).\n    -
  The new `tryInOrderB` and `tryMessageB` functions accept a parameter of\n      type
  `SomeMessage -> X Bool`, which means you are no longer constrained\n      to the
  behavior of the `sendMessageWithNoRefreshToCurrent` dispatcher.\n    - The `send*Messages*`
  family of funtions allows for sequencing arbitrary\n      sets of messages with
  minimal refresh. It makes little sense for these\n      functions to support custom
  message dispatchers.\n    - Remain backwards compatible. Maintain deprecated aliases
  of all renamed\n      functions:\n      - `send`          -> `sendMessageWithNoRefreshToCurrentB`\n
  \     - `sendSM`        -> `sendSomeMessageWithNoRefreshToCurrentB`\n      - `sendSM_`
  \      -> `sendSomeMessageWithNoRefreshToCurrent`\n      - `tryInOrder`    -> `tryInOrderWithNoRefreshToCurrentB`\n
  \     - `tryInOrder_`   -> `tryInOrderWithNoRefreshToCurrent`\n      - `tryMessage`
  \   -> `tryMessageWithNoRefreshToCurrentB`\n      - `tryMessage_`   -> `tryMessageWithNoRefreshToCurrent`\n\n###
  New Modules\n\n  * `XMonad.Layout.MultiToggle.TabBarDecoration`\n\n    Provides
  a simple transformer for use with `XMonad.Layout.MultiToggle` to\n    dynamically
  toggle `XMonad.Layout.TabBarDecoration`.\n\n  * `XMonad.Layout.StateFull`\n\n    Provides
  `StateFull`: a stateful form of `Full` that does not misbehave when\n    floats
  are focused, and the `FocusTracking` layout transformer by means of\n    which `StateFull`
  is implemented. `FocusTracking` simply holds onto the last\n    true focus it was
  given and continues to use it as the focus for the\n    transformed layout until
  it sees another. It can be used to improve the\n    behaviour of a child layout
  that has not been given the focused window.\n\n  * `XMonad.Actions.SwapPromote`\n\n
  \   Module for tracking master window history per workspace, and associated\n    functions
  for manipulating the stack using such history.\n\n  * `XMonad.Actions.CycleWorkspaceByScreen`\n\n
  \   A new module that allows cycling through previously viewed workspaces in the\n
  \   order they were viewed most recently on the screen where cycling is taking\n
  \   place.\n\n    Also provides the `repeatableAction` helper function which can
  be used to\n    build actions that can be repeated while a modifier key is held
  down.\n\n  * `XMonad.Prompt.FuzzyMatch`\n\n    Provides a predicate `fuzzyMatch`
  that is much more lenient in matching\n    completions in `XMonad.Prompt` than the
  default prefix match.  Also provides\n    a function `fuzzySort` that allows sorting
  the fuzzy matches by \"how well\"\n    they match.\n\n  * `XMonad.Utils.SessionStart`\n\n
  \   A new module that allows to query if this is the first time xmonad is\n    started
  of the session, or a xmonad restart.\n\n    Currently needs manual setting of the
  session start flag. This could be\n    automated when this moves to the core repository.\n\n
  \ * `XMonad.Layout.MultiDishes`\n\n    A new layout based on Dishes, however it
  accepts additional configuration\n    to allow multiple windows within a single
  stack.\n\n  * `XMonad.Util.Rectangle`\n\n    A new module for handling pixel rectangles.\n\n
  \ * `XMonad.Layout.BinaryColumn`\n\n    A new module which provides a simple grid
  layout, halving the window\n    sizes of each window after master.\n\n    This is
  similar to Column, but splits the window in a way\n    that maintains window sizes
  upon adding & removing windows as well as the\n    option to specify a minimum window
  size.\n\n### Bug Fixes and Minor Changes\n\n  * `XMonad.Layout.Grid`\n\n    Fix
  as per issue #223; Grid will no longer calculate more columns than there\n    are
  windows.\n\n  * `XMonad.Hooks.FadeWindows`\n\n    Added support for GHC version
  8.4.x by adding a Semigroup instance for\n    Monoids\n\n  * `XMonad.Hooks.WallpaperSetter`\n\n
  \   Added support for GHC version 8.4.x by adding a Semigroup instance for\n    Monoids\n\n
  \ * `XMonad.Hooks.Mosaic`\n\n    Added support for GHC version 8.4.x by adding a
  Semigroup instance for\n    Monoids\n\n  * `XMonad.Actions.Navigation2D`\n\n    Added
  `sideNavigation` and a parameterised variant, providing a navigation\n    strategy
  with fewer quirks for tiled layouts using X.L.Spacing.\n\n  * `XMonad.Layout.Fullscreen`\n\n
  \   The fullscreen layouts will now not render any window that is totally\n    obscured
  by fullscreen windows.\n\n  * `XMonad.Layout.Gaps`\n\n    Extended the sendMessage
  interface with `ModifyGaps` to allow arbitrary\n    modifications to the `GapSpec`.\n\n
  \ * `XMonad.Layout.Groups`\n\n    Added a new `ModifyX` message type that allows
  the modifying\n    function to return values in the `X` monad.\n\n  * `XMonad.Actions.Navigation2D`\n\n
  \   Generalised (and hence deprecated) hybridNavigation to hybridOf.\n\n  * `XMonad.Layout.LayoutHints`\n\n
  \   Preserve the window order of the modified layout, except for the focused\n    window
  that is placed on top. This fixes an issue where the border of the\n    focused
  window in certain situations could be rendered below borders of\n    unfocused windows.
  It also has a lower risk of interfering with the\n    modified layout.\n\n  * `XMonad.Layout.MultiColumns`\n\n
  \   The focused window is placed above the other windows if they would be made to\n
  \   overlap due to a layout modifier. (As long as it preserves the window order.)\n\n
  \ * `XMonad.Actions.GridSelect`\n\n    - The vertical centring of text in each cell
  has been improved.\n\n  * `XMonad.Actions.SpawnOn`\n\n    - Bind windows spawns
  by child processes of the original window to the same\n      workspace as the original
  window.\n\n  * `XMonad.Util.WindowProperties`\n\n    - Added the ability to test
  if a window has a tag from\n      `XMonad.Actions.TagWindows`\n\n  * `XMonad.Layout.Magnifier`\n\n
  \   - Handle `IncMasterN` messages.\n\n  * `XMonad.Util.EZConfig`\n\n    - Can now
  parse Latin1 keys, to better accommodate users with\n      non-US keyboards.\n\n
  \ * `XMonad.Actions.Submap`\n\n    Establish pointer grab to avoid freezing X, when
  button press occurs after\n    submap key press.  And terminate submap at button
  press in the same way,\n    as we do for wrong key press.\n\n  * `XMonad.Hooks.SetWMName`\n\n
  \   Add function `getWMName`.\n\n  * `XMonad.Hooks.ManageHelpers`\n\n    Make type
  of ManageHook combinators more general.\n\n  * `XMonad.Prompt`\n\n    Export `insertString`.\n\n
  \ * `XMonad.Prompt.Window`\n\n    - New function: `windowMultiPrompt` for using
  `mkXPromptWithModes`\n      with window prompts.\n\n  * `XMonad.Hooks.WorkspaceHistory`\n\n
  \   - Now supports per screen history.\n\n  * `XMonad.Layout.ComboP`\n\n    - New
  `PartitionWins` message to re-partition all windows into the\n      configured sub-layouts.
  \ Useful when window properties have\n      changed and you want to re-sort windows
  into the appropriate\n      sub-layout.\n\n  * `XMonad.Actions.Minimize`\n\n    -
  Now has `withFirstMinimized` and `withFirstMinimized'` so you can perform\n      actions
  with both the last and first minimized windows easily.\n\n  * `XMonad.Config.Gnome`\n\n
  \   - Update logout key combination (modm+shift+Q) to work with modern\n\n  * `XMonad.Prompt.Pass`\n\n
  \   - New function `passTypePrompt` which uses `xdotool` to type in a password\n
  \     from the store, bypassing the clipboard.\n    - Now handles password labels
  with spaces and special characters inside\n      them.\n\n  * `XMonad.Prompt.Unicode`\n\n
  \   - Persist unicode data cache across XMonad instances due to\n      `ExtensibleState`
  now used instead of `unsafePerformIO`.\n    - `typeUnicodePrompt :: String -> XPConfig
  -> X ()` provided to insert the\n      Unicode character via `xdotool` instead of
  copying it to the paste buffer.\n    - `mkUnicodePrompt :: String -> [String] ->
  String -> XPConfig -> X ()`\n      acts as a generic function to pass the selected
  Unicode character to any\n      program.\n\n  * `XMonad.Prompt.AppendFile`\n\n    -
  New function `appendFilePrompt'` which allows for transformation of the\n      string
  passed by a user before writing to a file.\n\n  * `XMonad.Hooks.DynamicLog`\n\n
  \   - Added a new function `dzenWithFlags` which allows specifying the arguments\n
  \   passed to `dzen2` invocation. The behaviour of current `dzen` function is\n
  \   unchanged.\n\n  * `XMonad.Util.Dzen`\n\n    - Now provides functions `fgColor`
  and `bgColor` to specify foreground and\n    background color, `align` and `slaveAlign`
  to set text alignment, and\n    `lineCount` to enable a second (slave) window that
  displays lines beyond\n    the initial (title) one.\n\n  * `XMonad.Hooks.DynamicLog`\n\n
  \   - Added optional `ppVisibleNoWindows` to differentiate between empty\n      and
  non-empty visible workspaces in pretty printing.\n\n  * `XMonad.Actions.DynamicWorkspaceOrder`\n\n
  \   - Added `updateName` and `removeName` to better control ordering when\n      workspace
  names are changed or workspaces are removed.\n\n  * `XMonad.Config.Azerty`\n\n    *
  Added `belgianConfig` and `belgianKeys` to support Belgian AZERTY\n      keyboards,
  which are slightly different from the French ones in the top\n      row.\n\n## 0.13
  (February 10, 2017)\n\n### Breaking Changes\n\n  * The type of `completionKey` (of
  `XPConfig` record) has been\n    changed from `KeySym` to `(KeyMask, KeySym)`. The
  default value\n    for this is still bound to the `Tab` key.\n\n  * New constructor
  `CenteredAt Rational Rational` added for\n    `XMonad.Prompt.XPPosition`.\n\n  *
  `XMonad.Prompt` now stores its history file in the XMonad cache\n    directory in
  a file named `prompt-history`.\n\n### New Modules\n\n  * `XMonad.Layout.SortedLayout`\n\n
  \   A new LayoutModifier that sorts a given layout by a list of\n    properties.
  The order of properties in the list determines\n    the order of windows in the
  final layout. Any unmatched windows\n    go to the end of the order.\n\n  * `XMonad.Prompt.Unicode`\n\n
  \   A prompt to search a unicode character by its name, and put it into the\n    clipboard.\n\n
  \ * `XMonad.Util.Ungrab`\n\n    Release xmonad's keyboard and pointer grabs immediately,
  so\n    screen grabbers and lock utilities, etc. will work. Replaces\n    the short
  sleep hackaround.\n\n  * `XMonad.Util.Loggers.NamedScratchpad`\n\n    A collection
  of Loggers (see `XMonad.Util.Loggers`) for NamedScratchpads\n    (see `XMonad.Util.NamedScratchpad`).\n\n
  \ * `XMonad.Util.NoTaskbar`\n\n    Utility function and `ManageHook` to mark a window
  to be ignored by\n    EWMH taskbars and pagers. Useful for `NamedScratchpad` windows,
  since\n    you will usually be taken to the `NSP` workspace by them.\n\n### Bug
  Fixes and Minor Changes\n\n  * `XMonad.Hooks.ManageDocks`,\n\n    - Fix a very annoying
  bug where taskbars/docs would be\n      covered by windows.\n\n    - Also fix a
  bug that caused certain Gtk and Qt application to\n      have issues displaying
  menus and popups.\n\n  * `XMonad.Layout.LayoutBuilder`\n\n    Merge all functionality
  from `XMonad.Layout.LayoutBuilderP` into\n    `XMonad.Layout.LayoutBuilder`.\n\n
  \ * `XMonad.Actions.WindowGo`\n\n    - Fix `raiseNextMaybe` cycling between 2 workspaces
  only.\n\n  * `XMonad.Actions.UpdatePointer`\n\n    - Fix bug when cursor gets stuck
  in one of the corners.\n\n  * `XMonad.Actions.DynamicProjects`\n\n    - Switching
  away from a dynamic project that contains no windows\n      automatically deletes
  that project's workspace.\n\n      The project itself was already being deleted,
  this just deletes\n      the workspace created for it as well.\n\n    - Added function
  to change the working directory (`changeProjectDirPrompt`)\n\n    - All of the prompts
  are now multiple mode prompts.  Try using the\n      `changeModeKey` in a prompt
  and see what happens!\n\n## 0.12 (December 14, 2015)\n\n### Breaking Changes\n\n
  \ * `XMonad.Actions.UpdatePointer.updatePointer` arguments were\n    changed. This
  allows including aspects of both of the\n    `TowardsCentre` and `Relative` methods.
  To keep the same behavior,\n    replace the entry in the left column with the entry
  on the right:\n\n    | < 0.12                              |   >= 0.12                        |\n
  \   |-------------------------------------|----------------------------------|\n
  \   | `updatePointer Nearest`             | `updatePointer (0.5, 0.5) (1,1)` |\n
  \   | `updatePointer (Relative x y)`      | `updatePointer (x,y) (0,0)`      |\n
  \   | `updatePointer (TowardsCentre x y)` | `updatePointer (0.5,0.5) (x,y)`  |\n\n###
  New Modules\n\n  * `XMonad.Actions.AfterDrag`\n\n    Perform an action after the
  current mouse drag is completed.\n\n  * `XMonad.Actions.DynamicProjects`\n\n    Imbues
  workspaces with additional features so they can be treated\n    as individual project
  areas.\n\n  * `XMonad.Actions.LinkWorkspaces`\n\n    Provides bindings to add and
  delete links between workspaces. It\n    is aimed at providing useful links between
  workspaces in a\n    multihead setup. Linked workspaces are viewed at the same time.\n\n
  \ * `XMonad.Config.Bepo`\n\n    This module fixes some of the keybindings for the
  francophone\n    among you who use a BEPO keyboard layout. Based on\n    `XMonad.Config.Azerty`\n\n
  \ * `XMonad.Config.Dmwit`\n\n    Daniel Wagner's configuration.\n\n  * `XMonad.Config.Mate`\n\n
  \   This module provides a config suitable for use with the MATE\n    desktop environment.\n\n
  \ * `XMonad.Config.Prime`\n\n    A draft of a brand new config syntax for xmonad.\n\n
  \ * `XMonad.Hooks.DynamicProperty`\n\n    Module to apply a `ManageHook` to an already-mapped
  window when a\n    property changes. This would commonly be used to match browser\n
  \   windows by title, since the final title will only be set after (a)\n    the
  window is mapped, (b) its document has been loaded, (c) all\n    load-time scripts
  have run.\n\n  * `XMonad.Hooks.ManageDebug`\n\n    A `manageHook` and associated
  `logHook` for debugging `ManageHook`s.\n    Simplest usage: wrap your xmonad config
  in the `debugManageHook`\n    combinator.  Or use `debugManageHookOn` for a triggerable
  version,\n    specifying the triggering key sequence in `XMonad.Util.EZConfig`\n
  \   syntax. Or use the individual hooks in whatever way you see fit.\n\n  * `XMonad.Hooks.WallpaperSetter`\n\n
  \   Log hook which changes the wallpapers depending on visible\n    workspaces.\n\n
  \ * `XMonad.Hooks.WorkspaceHistory`\n\n    Keeps track of workspace viewing order.\n\n
  \ * `XMonad.Layout.AvoidFloats`\n\n    Find a maximum empty rectangle around floating
  windows and use\n    that area to display non-floating windows.\n\n  * `XMonad.Layout.BinarySpacePartition`\n\n
  \   Layout where new windows will split the focused window in half,\n    based off
  of BSPWM.\n\n  * `XMonad.Layout.Dwindle`\n\n    Three layouts: The first, `Spiral`,
  is a reimplementation of\n    `XMonad.Layout.Spiral.spiral` with, at least to me,
  more intuitive\n    semantics.  The second, `Dwindle`, is inspired by a similar
  layout\n    in awesome and produces the same sequence of decreasing window\n    sizes
  as Spiral but pushes the smallest windows into a screen\n    corner rather than
  the centre.  The third, `Squeeze` arranges all\n    windows in one row or in one
  column, with geometrically decreasing\n    sizes.\n\n  * `XMonad.Layout.Hidden`\n\n
  \   Similar to `XMonad.Layout.Minimize` but completely removes windows\n    from
  the window set so `XMonad.Layout.BoringWindows` isn't\n    necessary.  Perfect companion
  to `XMonad.Layout.BinarySpacePartition`\n    since it can be used to move windows
  to another part of the BSP tree.\n\n  * `XMonad.Layout.IfMax`\n\n    Provides `IfMax`
  layout, which will run one layout if there are\n    maximum `N` windows on workspace,
  and another layout, when number\n    of windows is greater than `N`.\n\n  * `XMonad.Layout.PerScreen`\n\n
  \   Configure layouts based on the width of your screen; use your\n    favorite
  multi-column layout for wide screens and a full-screen\n    layout for small ones.\n\n
  \ * `XMonad.Layout.Stoppable`\n\n    This module implements a special kind of layout
  modifier, which when\n    applied to a layout, causes xmonad to stop all non-visible
  processes.\n    In a way, this is a sledge-hammer for applications that drain power.\n
  \   For example, given a web browser on a stoppable workspace, once the\n    workspace
  is hidden the web browser will be stopped.\n\n  * `XMonad.Prompt.ConfirmPrompt`\n\n
  \   A module for setting up simple confirmation prompts for\n    keybindings.\n\n
  \ * `XMonad.Prompt.Pass`\n\n    This module provides 3 `XMonad.Prompt`s to ease
  passwords\n    manipulation (generate, read, remove) via [pass][].\n\n  * `XMonad.Util.RemoteWindows`\n\n
  \   This module implements a proper way of finding out whether the\n    window is
  remote or local.\n\n  * `XMonad.Util.SpawnNamedPipe`\n\n    A module for spawning
  a pipe whose `Handle` lives in the xmonad state.\n\n  * `XMonad.Util.WindowState`\n\n
  \   Functions for saving per-window data.\n\n### Miscellaneous Changes\n\n  * Fix
  issue #9: `XMonad.Prompt.Shell` `searchPredicate` is ignored,\n    defaults to `isPrefixOf`\n\n
  \ * Fix moveHistory when alwaysHighlight is enabled\n\n  * `XMonad.Actions.DynamicWorkspaceGroups`
  now exports `addRawWSGroup`\n\n  * Side tabs were added to the tabbed layout\n\n
  \ * `XMonad/Layout/IndependentScreens` now exports `marshallSort`\n\n  * `XMonad/Hooks/UrgencyHook`
  now exports `clearUrgency`\n\n  * Exceptions are now caught when finding commands
  on `PATH` in `Prompt.Shell`\n\n  * Switched to `Data.Default` wherever possible\n\n
  \ * `XMonad.Layout.IndependentScreens` now exports `whenCurrentOn`\n\n  * `XMonad.Util.NamedActions`
  now exports `addDescrKeys'`\n\n  * EWMH `DEMANDS_ATTENTION` support added to `UrgencyHook`\n\n
  \ * New `useTransientFor` modifier in `XMonad.Layout.TrackFloating`\n\n  * Added
  the ability to remove arbitrary workspaces\n\n## 0.9 (October 26, 2009)\n\n### Updates
  that Require Changes in `xmonad.hs`\n\n  * `XMonad.Hooks.EwmhDesktops` no longer
  uses `layoutHook`, the\n    `ewmhDesktopsLayout` modifier has been removed from\n
  \   xmonad-contrib. It uses `logHook`, `handleEventHook`, and\n    `startupHook`
  instead and provides a convenient function `ewmh` to\n    add EWMH support to a
  `defaultConfig`.\n\n  * Most `DynamicLog` users can continue with configs unchanged,
  but\n    users of the quickbar functions `xmobar` or `dzen` will need to\n    change
  `xmonad.hs`: their types have changed to allow easier\n    composition with other
  `XConfig` modifiers. The `dynamicLogDzen`\n    and `dynamicLogXmobar` functions
  have been removed.\n\n  * `WindowGo` or `safeSpawn` users may need to change command
  lines\n    due to `safeSpawn` changes.\n\n  * People explicitly referencing the
  \"SP\" scratchpad workspace should\n    change it to \"NSP\" which is also used
  by the new\n    `Util.NamedScratchpad` module.\n\n  * (Optional) People who explicitly
  use `swapMaster` in key or mouse\n    bindings should change it to `shiftMaster`.
  It's the current\n    default used where `swapMaster` had been used previously.
  It works\n    better than `swapMaster` when using floating and tiled windows\n    together
  on the same workspace.\n\n## See Also\n\n<https://wiki.haskell.org/Xmonad/Notable_changes_since_0.8>\n\n[pass]:
  http://www.passwordstore.org/\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  extensible-exceptions: -any
  unix: -any
  base: ! '>=4.5 && <5'
  X11: ! '>=1.6.1 && <1.10'
  filepath: -any
  process: -any
  semigroups: -any
  xmonad: ! '>=0.15 && <0.16'
  containers: ! '>=0.5 && <0.7'
  utf8-string: -any
  old-time: -any
  X11-xft: ! '>=0.2'
  old-locale: -any
  mtl: ! '>=1 && <3'
  random: -any
  directory: -any
all-versions:
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- 0.8.1
- '0.9'
- 0.9.1
- 0.9.2
- '0.10'
- '0.11'
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
- '0.12'
- '0.13'
- '0.14'
- '0.15'
author: Spencer Janssen & others
latest: '0.15'
description-type: markdown
description: ! "# xmonad-contrib: Third Party Extensions to the xmonad Window Manager\n\n[![Build
  Status](https://travis-ci.org/xmonad/xmonad-contrib.svg?branch=master)](https://travis-ci.org/xmonad/xmonad-contrib)\n[![Open
  Source Helpers](https://www.codetriage.com/xmonad/xmonad-contrib/badges/users.svg)](https://www.codetriage.com/xmonad/xmonad-contrib)\n\nYou
  need the ghc compiler and xmonad window manager installed in\norder to use these
  extensions.\n\nFor installation and configuration instructions, please see the\n[xmonad
  website][xmonad], the documents included with the\n[xmonad source distribution][xmonad-git],
  and the\n[online haddock documentation][xmonad-docs].\n\n## Getting or Updating
  XMonadContrib\n\n  * Latest release: <https://hackage.haskell.org/package/xmonad-contrib>\n\n
  \ * Git version: <https://github.com/xmonad/xmonad-contrib>\n\n(To use git xmonad-contrib
  you must also use the\n[git version of xmonad][xmonad-git].)\n\n## Contributing\n\nHaskell
  code contributed to this repo should live under the\nappropriate subdivision of
  the `XMonad` namespace (currently includes\n`Actions`, `Config`, `Hooks`, `Layout`,
  `Prompt`, and `Util`). For\nexample, to use the Grid layout, one would import:\n\n
  \   XMonad.Layout.Grid\n\nFor further details, see the [documentation][developing]
  for the\n`XMonad.Doc.Developing` module, XMonad's [CONTRIBUTING.md](https://github.com/xmonad/xmonad/blob/master/CONTRIBUTING.md)
  \ and the [xmonad website][xmonad].\n\n## License\n\nCode submitted to the contrib
  repo is licensed under the same license as\nxmonad itself, with copyright held by
  the authors.\n \n[xmonad]: http://xmonad.org\n[xmonad-git]: https://github.com/xmonad/xmonad\n[xmonad-docs]:
  http://hackage.haskell.org/package/xmonad\n[developing]: http://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Doc-Developing.html\n"
license-name: BSD-3-Clause
