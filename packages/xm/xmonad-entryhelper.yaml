homepage: https://github.com/Javran/xmonad-entryhelper
changelog-type: markdown
hash: cf733e44a9459aa0fbcadd67615b37c1d666827da7f2e09fae2037a2f50b63aa
test-bench-deps: {}
maintainer: Javran.c@gmail.com
synopsis: XMonad config entry point wrapper
changelog: ! '# 0.1.0.0


  * initial version

'
basic-deps:
  extensible-exceptions: -any
  unix: -any
  base: <5
  X11: -any
  xmonad-contrib: -any
  filepath: -any
  process: -any
  xmonad: -any
  mtl: -any
  directory: -any
all-versions:
- 0.1.0.0
author: Javran Cheng
latest: 0.1.0.0
description-type: markdown
description: ! "# xmonad-entryhelper\n\n[![Build Status](https://travis-ci.org/Javran/xmonad-entryhelper.svg?branch=master)](https://travis-ci.org/Javran/xmonad-entryhelper)\n[![Version](https://img.shields.io/hackage/v/xmonad-entryhelper.svg)](https://hackage.haskell.org/package/xmonad-entryhelper)\n\nxmonad-entryhelper
  makes your compiled XMonad config a standalone binary.\n\nIt simulates the XMonad's
  argument handling\nand supports customized compliation.\n\n**Table of Contents**\n\n-
  [Introduction](#introduction)\n- [Simple setup](#simple-setup)\n- [Argument handling](#argument-handling)\n-
  [Advanced features](#advanced-features)\n- [Feedback](#feedback)\n\n## Introduction\n\nxmonad-entryhelper
  frees you from keeping a xmonad library as a system- or user- level dependency.\nInstead,
  you can keep your XMonad configurations either as a local\n[cabal project](https://www.haskell.org/cabal/)
  using\n[cabal sandbox](https://www.fpcomplete.com/school/to-infinity-and-beyond/older-but-still-interesting/an-introduction-to-cabal-sandboxes-copy)
  or within\na protected environment like those created by [hsenv](https://github.com/tmhedberg/hsenv)\n\n##
  Simple setup\n\n1. After installation, modify your `xmonad.hs` accordingly:\n\n
  \   Your xmonad config might look like:\n\n        -- some imports here\n        import
  ...\n\n        ...\n\n        -- your main entry point\n        main :: IO ()\n
  \       main = _\n\n    Rename your `main` to something else, import `withHelper`
  from `XMonad.Util.EntryHelper`\n    and use it to call your old `main`:\n\n        --
  some imports here\n        import ...\n        import XMonad.Util.EntryHelper (withHelper)\n\n
  \       ...\n\n        -- your old main entry point\n        oldMain :: IO ()\n
  \       oldMain = _\n\n        -- your new main entry point\n        main :: IO
  ()\n        main = withHelper oldMain\n\n    It is recommended to set the \"restart
  xmonad\" action (typically `mod-q` in your keybinding)\n    to just invoke `xmonad
  --restart`. Although the default action,\n    essentially `xmonad --recompile &&
  xmonad --restart` should work properly,\n    argument `--recompile` forces the compilation
  (which might involve\n    removing all binaries and compiling everything).\n    If
  you are using a build system like `make` or `cabal`,\n    forcing a compilation
  might not be a desired behavior as build systems are in general designed\n    to
  prevent recompilation.\n\n2. Finally you need to have a writable local `PATH` directory.\n\n
  \   For example you can make directory `$HOME/bin`:\n\n        mkdir -p ~/bin\n\n
  \   And append the following lines in your shell profile file\n    (it's usually
  your `~/.bash_profile` file):\n\n        ...\n        # my local executable files\n
  \       export PATH=\"${HOME}/bin:${PATH}\"\n\n    Create soft link to your compiled
  `xmonad` binary:\n\n        # the binary name varies depending on your OS and architecture,\n
  \       # check your ~/.xmonad/ directory to find out\n        $ ln -s ~/.xmonad/xmonad-x86_64-linux
  ~/bin/xmonad\n\n    And verify if `xmonad` is now leading to your compiled xmonad
  config:\n\n        $ source ~/.profile\n        $ which xmonad\n        /home/username/bin/xmonad\n\n
  \   If this doesn't work, check articles like\n    [Zsh/Bash startup files loading
  order](https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/)\n
  \   for troubleshooting.\n\n3. Now you are free to remove XMonad from your system-
  or user- level packages.\nBecause your compiled XMonad will work on its own:\n\n
  \       $ xmonad --help\n        xmonad-entryhelper - XMonad config entry point
  wrapper\n\n        Usage: xmonad [OPTION]\n        Options:\n          --help                       Print
  this message\n          --version                    Print XMonad's version number\n
  \         --recompile                  Recompile XMonad\n          --replace                    Replace
  the running window manager with XMonad\n          --restart                    Request
  a running XMonad process to restart\n\n## Argument handling\n\nAlthough this projects
  tries to resemble the argument handling behavior of XMonad,\nthere are not exact
  the same. The differences are:\n\n* When invoked without argument or with `--replace`
  or `--resume` (this argument is not documented,\nassumably intended for internal
  use only):\n\n    * XMonad always does up-to-date checking internally and compile
  source codes as needed before\n      invocations\n\n    * EntryHelper doesn't do
  up-to-date checking.\n\n        (TL;DR) This is because XMonad is using the following
  routing when executed:\n\n        1. XMonad started\n        2. Check for source
  files and recompile as needed\n        3. Execute the compiled binary\n        4.
  If any goes wrong, start xmonad using default configuration\n\n        This routing
  only works if XMonad binary and the binary compiled by XMonad\n        are two different
  programs. But as EntryHelper wants to make your compiled\n        binary and the
  XMonad program the same file, the same routing will cause\n        an infinite loop
  (`start => check => execute => start ...`).\n\n        To solve this problem, in
  EntryHelper the up-to-date checking\n        is considered one part of the compilation.
  And the compilation\n        will not be executed unless `--recompile` or `--restart`
  is given.\n\n        Additionally, if you are using a build system like `make` or
  `cabal` to handle compilation,\n        leaving the job of up-to-date checking\n
  \       to the build system would be the simplest approach.\n\n* When invoked with
  `--restart`:\n\n    * EntryHelper will try to recompile (without forcing) before
  sending the request\n    * both XMonad and EntryHelper send the restart request\n\n##
  Advanced features\n\n* Customized compilation and post-compilation handling\n\n
  \   By passing a `Config` (from `XMonad.Util.EntryHelper.Config`) to `withCustomHelper`,\n
  \   it is possible to customize the compilation and post-compilation actions.\n
  \   Read document of `Config` for detail.\n\n* Customized shell command compilation\n\n
  \   You can invoke an arbitrary shell command to do the compilation using\n    `compileUsingShell`
  from `XMonad.Util.EntryHelper.Compile`, the working\n    directory for this shell
  command will be `~/.xmonad` and its `stdout` and `stderr`\n    outputs will be redirected
  into `~/.xmonad/xmonad.errors`.\n\n    Assuming you have set your environment variable
  `${XMONAD_HOME}`\n    to point to the project home directory,\n    and you are using
  `Makefile` to handle the compilation,\n    the following example should work for
  you:\n\n        import qualified XMonad.Util.EntryHelper as EH\n\n        main ::
  IO ()\n        main = EH.withCustomHelper mhConf\n          where\n            mhConf
  = EH.defaultConfig\n                     { EH.run = oldMain\n                     ,
  EH.compile = \\force -> do\n                             let cmd = if force\n                               then
  \"cd ${XMONAD_HOME} && make clean && make all\"\n                               else
  \"cd ${XMONAD_HOME} && make all\"\n                             EH.compileUsingShell
  cmd\n                     }\n\n* Parallel compilation protection\n\n    You might
  find `withLock` from `XMonad.Util.EntryHelper.Compile` useful\n    to prevent yourself
  from parallel compilation\n    (this is usually caused by hitting `mod-q` rapidly
  multiple times...).\n    It creates a temprary file (typically `/tmp/xmonad.{username}.lock`)
  before compiling\n    and deletes it after the compilation is done. When this temprary
  file exists,\n    no other protected action with the same\n    file lock is allowed
  to proceed and will return with a default value.\n\n    To protect an `action` from
  parallel execution, all you have to do is to\n    replace it with `withLock def
  action`, with `def` being a default value to return\n    when it hits a file lock.\n\n
  \   Continue from the previous example:\n\n        import qualified XMonad.Util.EntryHelper
  as EH\n\n        main :: IO ()\n        main = EH.withCustomHelper mhConf\n          where\n
  \           mhConf = EH.defaultConfig\n                     { EH.run = oldMain\n
  \                    -- adding \"EH.withLock ExitSuccess $\"\n                     ,
  EH.compile = \\force -> EH.withLock ExitSuccess $ do\n                             let
  cmd = if force\n                               then \"cd ${XMONAD_HOME} && make
  clean && make all\"\n                               else \"cd ${XMONAD_HOME} &&
  make all\"\n                             EH.compileUsingShell cmd\n                     }\n\n
  \   Be careful not to protect an action more than once.\n\n* Sending restart request
  to current xmonad instance\n\n    `sendRestart` from `XMonad.Util.EntryHelper.Util`
  is an exact copy of the same\n    function found in XMonad (unfortunately XMonad
  doesn't export it).\n    Simply calling this function will sent a restart request
  to the running XMonad\n    instance.\n\n    Note that XMonad restarts by looking
  for the compiled binary to replace it,\n    which means the binary file (e.g. `~/.xmonad/xmonad-x86_64-linux`)
  has to exist\n    or otherwise your window manager session will crash.\n\n## Feedback\n\nFeel
  free to open issues for either bug report, enhancement or discussion.\n"
license-name: MIT
