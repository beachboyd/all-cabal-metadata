homepage: https://github.com/snapframework/xmlhtml
changelog-type: markdown
hash: 4bb479b499f4a7552b0eb20ea7e985d8ad8efea64ee39fcd1c0a6b9a406e7ded
test-bench-deps:
  bytestring: -any
  base: -any
  blaze-markup: -any
  unordered-containers: -any
  hspec: ! '>=2.4 && <2.5'
  text: -any
  HUnit: ! '>=1.2 && <1.7'
  containers: -any
  xmlhtml: -any
  blaze-builder: -any
  blaze-html: -any
  bytestring-builder: -any
  directory: ! '>=1.0 && <1.4'
maintainer: Chris Smith <cdsmith@gmail.com>
synopsis: XML parser and renderer with HTML 5 quirks mode
changelog: ! "# 0.2.5\n\n* Add renderWithOptions and the ability to control how attributes
  are\n  surrounded with quotes.\n* Update to latest version of blaze-html and blaze-markup.
  \ Required bumping\n  the lower bound because the blaze changes were not backwards
  compatible.\n* Switch from test-framework to hspec\n\n"
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4 && <5'
  blaze-markup: ! '>=0.8 && <0.9'
  unordered-containers: ! '>=0.1.4 && <0.3'
  text: ! '>=0.11 && <1.3'
  parsec: ! '>=3.1.2 && <3.2'
  containers: ! '>=0.3 && <0.6'
  blaze-builder: ! '>=0.2 && <0.5'
  blaze-html: ! '>=0.9 && <0.10'
  bytestring-builder: ! '>=0.10.4.0.2 && <0.11'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.5.1'
- '0.1.5.2'
- '0.1.6'
- '0.1.7'
- '0.2.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
- '0.2.3.2'
- '0.2.3.3'
- '0.2.3.4'
- '0.2.3.5'
- '0.2.4'
- '0.2.5'
- '0.2.5.1'
- '0.2.5.2'
author: Chris Smith <cdsmith@gmail.com>
latest: '0.2.5.2'
description-type: markdown
description: ! "xmlhtml - XML and HTML 5 parsing and rendering\n----------------------------------------------\n\n[![Build
  Status](https://travis-ci.org/snapframework/xmlhtml.svg?branch=master)](https://travis-ci.org/snapframework/xmlhtml)\n\nThis
  library implements both parsers and renderers for XML and HTML 5 document\nfragments.
  \ The two share data structures to represent the document tree, so\nthat you can
  write code to easily work with either XML or HTML 5.  Convenience\nfunctions are
  also available to work with the internal data structure in\nseveral natural ways.\n\nCaveats:\n\n-
  Both parsers are written to parse document fragments, not complete\n  documents.
  \ This means that they do not enforce rules about overall\n  document structure.
  \ There does not need to be only a single root node,\n  and the HTML 5 implementation
  never inserts any missing start tags.\n\n- The XML parser is incapable of handling
  processing instructions, or defined\n  entities.  If will silently drop processing
  instructions, and will fail if\n  encounters an entity reference for anything by
  the predefined entities\n  (apos, quot, amp, lt, and gt).\n\n- The HTML parser is
  really an XML parser with HTML 5 quirks mode.  It should\n  be just fine for parsing
  documents that conform to the HTML 5 specification.\n  However, it is *not* a compliant
  HTML 5 parser, as compliant parsers are\n  required to be compatible with non-compliant
  documents in many ways that we\n  aren't interested in.  So this is a great basis
  for a template system, for\n  example, but a very poor basis for a web browser or
  web spider.\n\nTo get started, just use the parseHTML or parseXML functions from
  Text.XmlHtml\nto parse a ByteString into a document tree.  On the other side, use
  render to\nwrite the document tree back to a ByteString.\n\nWorking with document
  trees is easily done in two ways.\n\n1. Text.XmlHtml exports the document tree types
  (notably, Document and Node)\n   and functions like getAttribute, setAttribute,
  tagName, childNodes, etc. for\n   working with them.\n\n2. Text.XmlHtml.Cursor exports
  a zipper for node forests, which you can use to\n   navigate and modify the document
  tree positionally.\n\nThat's it, basically.  This is hopefully a pretty simple package
  to use.\n\nTO DO Items:\n\n1. Do something better with character encodings.  For
  now, they are basically\n   ignored, and we just use the byte order mark to distinguish
  between the\n   three required encodings.  We should implement the encoding sniffing
  rules\n   for both XML (the <?xml ... ?> declaration) and HTML 5.\n\n2. Benchmark
  and improve performance of the parsers and renderers.\n\n3. Ensure that rendering
  always gives an error rather than writing an invalid\n   document. (Is this a good
  idea?  It does limit rendering speed.)\n\n"
license-name: BSD3
