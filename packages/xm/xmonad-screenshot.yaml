homepage: https://github.com/supki/xmonad-screenshot
changelog-type: markdown
hash: 1cf5af47b9c04e56a9f2660a551d08c9111e4475bab1660298f0b64ef62db1e5
test-bench-deps: {}
maintainer: Dmitry Malikov, malikov.d.y@gmail.com
synopsis: Workspaces screenshooting utility for XMonad.
changelog: ! "0.1.2\n=====\n\n  * GHC 7.10 compatibility.\n\n< 0.1.2\n=======\n\n
  \ Prehistory.\n"
basic-deps:
  base: ! '>=3 && <5'
  xmonad: ! '>=0.9'
  gtk: ! '>=0.12.3'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2
author: Matvey Aksenov
latest: 0.1.2
description-type: markdown
description: ! "# XMonad-screenshot\n[![Hackage](https://budueba.com/hackage/xmonad-screenshot)](https://hackage.haskell.org/package/xmonad-screenshot)\n[![Build
  Status](https://secure.travis-ci.org/supki/xmonad-screenshot.png?branch=master)](https://travis-ci.org/supki/xmonad-screenshot)\n\n[gtk][1]-based
  screen capturing utility for the [XMonad][2] window manager.\nIt's flexible enough
  to give a user options for comprehensive captured workspaces' filtering and post-capture
  processing.\nBy default it captures all existing workspaces and places resulting
  screenshot in `~/.xmonad/screenshot.png`\n\n## Example screenshots\n\n  * [Horizontal][3]
  layout\n  * [Vertical][4] layout\n\n\n## Caveats\n\n### Installation\n\nYou may
  want to make sure you have [`gtk2hs-buildtools`][5] package installed and\nits binaries
  are in `PATH` before installing `xmonad-screenshot`:\n\n```\n$ type gtk2hsC2hs\ngtk2hsC2hs
  is /home/user/.cabal/bin/gtk2hsC2hs\n```\n\nIf you do not see any encouraging output,
  try `cabal install gtk2hs-buildtools` and/or check\n`PATH` contains `/home/user/.cabal/bin`
  directory\n\n### Initialization\n\nDue to gtk (and XMonad) constraints you need
  to initialize the capturing before using it.\nPlace call to `initCapturing` before
  you call `xmonad`:\n\n```haskell\nmain :: IO ()\nmain = do\n  initCapturing\n  xmonad
  defaultConfig { ... }\n```\n\n\n## Usage examples\nThe most simple usage example:\n\n```haskell\nimport
  XMonad.Util.WorkspaceScreenshot\n\nmyKeys conf@(XConfig {XMonad.modMask = modm})
  = M.fromList $\n  [ ...\n  , ((modm .|. shiftMask, xK_u), captureWorkspacesWhen
  defaultPredicate defaultHook horizontally)\n  , ...\n  ]\n```\n\nYou can filter
  some blacklisted workspaces from capturing using predicates:\n\n```haskell\nimport
  XMonad.Util.WorkspaceScreenshot\n\npredicate x = return $ x `notElem` [\"blacklistedWorkspace1\",
  \"blacklistedWorkspace2\"]\n\nmyKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList
  $\n  [ ...\n  , ((modm .|. shiftMask, xK_u), captureWorkspacesWhen predicate defaultHook
  horizontally)\n  , ...\n  ]\n```\n\nYou can move screenshot file somewhere using
  post-processing hook:\n\n```haskell\nimport Control.Monad.Trans\nimport System.FilePath\nimport
  System.Directory\nimport XMonad.Util.WorkspaceScreenshot\n\nhook filepath =\n  do
  hd <- getHomeDirectory\n\t renameFile filepath (hd </> \"Pictures\" </> filepath)\n\nmyKeys
  conf@(XConfig {XMonad.modMask = modm}) = M.fromList $\n  [ ...\n  , ((modm .|. shiftMask,
  xK_u), captureWorkspacesWhen defaultPredicate hook horizontally)\n  , ...\n  ]\n```\n\n
  [1]: https://hackage.haskell.org/package/gtk\n [2]: http://xmonad.org\n [3]: http://i.imgur.com/s9nbOaZ.png\n
  [4]: https://vsegda.budueba.com/img/20dacff202bb7660bae3a16250e0b3e9.jpg\n [5]:
  https://hackage.haskell.org/package/gtk2hs-buildtools\n"
license-name: MIT
