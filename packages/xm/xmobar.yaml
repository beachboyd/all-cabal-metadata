homepage: http://xmobar.org
changelog-type: markdown
hash: f72e8dd1fb1409da9f354c6f7d4b613f2864d8e74b6f7fe7de04d8007f479c0a
test-bench-deps:
  bytestring: -any
  unix: -any
  stm: -any
  base: -any
  time: -any
  hspec: ==2.*
  X11: -any
  xmobar: -any
  filepath: -any
  process: -any
  async: -any
  parsec: -any
  containers: -any
  regex-compat: -any
  old-locale: -any
  mtl: -any
  transformers: -any
  temporary: -any
  parsec-numbers: -any
  directory: -any
maintainer: Jose A. Ortega Ruiz <jao@gnu.org>
synopsis: A Minimalistic Text Based Status Bar
changelog: ! "## Version 0.29 (December, 2018)\n\n_New features_\n\n  - New `Alsa`
  monitor for volume display that doesn't use polling, by\n    Daniel Schüssler.\n
  \ - `ThermalZone` retries reading missing files, thanks to Reed Koser.\n  - `TopProc`
  ignores kernel threads (see also [issue #369]).\n  - `Wireless` simple autodetection
  of wirless interface name (if set\n    to \"\").\n  - Experimental support for using
  xmobar as a library, so that\n    configurations are in fact Haskell programs a
  la Xmonad (beta\n    stage, with help from Pavan Rikhi). Traditional config files
  are\n    still (and will continue to be) supported.\n\n_Bug fixes_\n\n  - Correctly
  parsing configuration options `mwClass` and `wmName`.\n\n[issue #369]: https://github.com/jaor/xmobar/issues/369\n\n##
  Version 0.28.1 (October, 2018)\n\nDependencies updated to work with GHC 8.6, avoiding
  [issue #354].\n\n[issue #354]: https://github.com/jaor/xmobar/issues/354\n\n## Version
  0.28 (August, 2018)\n\n_New features_\n\n  - New `ComX`, which runs a command with
  custom exit error message.\n\n_Bug fixes_\n\n  - hinotify version upgraded ([issue
  #356])\n\n[issue #356]: https://github.com/jaor/xmobar/issues/356\n\n## Version
  0.27 (July, 2018)\n\n_New features_\n\n  - Dropped support for GHC 7.x.  See [issue
  #352].\n  - New configuration option, `textOffsets` to specify separate\n    vertical
  offsets for each of the fonts in `additionalFonts`.  See\n    [issue #311].\n\n_Bug
  fixes_\n\n   - Use the maximum width options `-T` and `-E` correctly when a\n     monitor
  subtemplate contains font and color tags.\n\n[issue #311]: https://github.com/jaor/xmobar/issues/311\n[issue
  #352]: https://github.com/jaor/xmobar/issues/352\n\n## Version 0.26 (April, 2018)\n\n_New
  features_\n\n  - New options to specify the ellipsis string for fields (`-e`) and\n
  \   total width (`-E`), thanks to Olivier Schneider.\n  - `MultiCpu`: New option
  to specify fallback icon paths\n    (`--fallback-icon-pattern`), thanks to Reed
  Koser.\n\n_Bug fixes_\n\n  - `CpuFreq` monitors honours `-d` (number of digits)
  if no suffix is\n    given (cf. [issue #335]).\n  - Race condition in network monitor
  fixed ([issue #347]).\n  - Limiting dbus supported version (see [issue #346]).\n\n[issue
  #335]: https://github.com/jaor/xmobar/issues/335\n[issue #346]: https://github.com/jaor/xmobar/issues/346\n[issue
  #347]: https://github.com/jaor/xmobar/issues/347\n\n## Version 0.25 (February, 2018)\n\n_New
  features_\n\n  - The X11 properties `WM_NAME` and `WM_CLASS` for xmobar windows
  can\n    be setup in either the configuration file (`wmName` and `wmClass`)\n    or
  using the new flags `-n` adn `-w` (see [issue #323]).\n  - New flag `with_weather`,
  to build sans `Weather` monitor.\n\n_Bug fixes_\n\n   - Honouring -x in MPris monitor
  ([issue #325])\n\n\n[issue #323]: https://github.com/jaor/xmobar/issues/323\n[issue
  #325]: https://github.com/jaor/xmobar/issues/325\n\n## Version 0.24.5 (May, 2017)\n\n_Bug
  fixes_\n\n  - Fix for vertical bars ([issue #303])\n\n[issue #303]: https://github.com/jaor/xmobar/issues/303\n\n##
  Version 0.24.4 (April, 2017)\n\n_Infrastructure_\n\n  - Whe have now an active [Travis
  CI setup].\n\n[Travis CI setup]: https://travis-ci.org/jaor/xmobar\n\n_Bug fixes_\n\n
  \ - Reduce wakeups rate via rtsopts V0 (with new flag with_rtsopts to\n    disable
  it) (see [issue #89]).\n  - Fix Net monitor for lage uptimes and bytecounts (Tomas
  Janoušek).\n  - Fix MultiCpu monitor for large uptimes (Zev Weiss).\n  - Fix compilation
  when XMP is disabled (Sergi Trofimovich).\n  - Better fatal error messages (Michael
  Bishop).\n  - More paths to read from in CoreTemp (see [issue #291]).\n\n[issue
  #291]: https://github.com/jaor/xmobar/issues/291\n\n## Version 0.24.3 (Sep 5, 2016)\n\n_Bug
  fixes_\n\n  - Battery monitor: fixes for cases where status is not consistently\n
  \   reported by the kernel (see [issue #271]).\n\n[issue #271]: https://github.com/jaor/xmobar/issues/271\n\n##
  Version 0.24.2 (Aug 8, 2016)\n\n_Bug fixes_\n\n   - New Weather plugin URL (see
  [issue #270]).\n\n[issue #270]: https://github.com/jaor/xmobar/issues/270\n\n##
  Version 0.24.1 (Jul 28, 2016)\n\n_Bug fixes_\n\n   - Restoring compatibility with
  GHC 7.6, (see [issue #269]).\n\n[issue #269]: https://github.com/jaor/xmobar/issues/269\n\n##
  Version 0.24 (Jul 26, 2016)\n\n_New features_\n\n   - Use the new compilation flag
  `with_conduit` to compile an\n     implemetation of the  `Weather` plugin that will
  work behind\n     proxies, by Dragos Boca.\n   - New command line argument (`-p`)
  to specify xmobar's position, by\n     Valentin Shirokov.\n   - Wind speed in Km/h
  and m/s for the `Weather` plugin, by Michael\n     Knabe.\n   - `UVMeter`, a new
  optional plugin showing UV data for Australian\n     users, by Roman Joost.\n   -
  New template parameter `<date>` for the `MPD` plugin (by Bruno\n     Heridet)\n
  \  - New monitor argument `-T` to specify the maximum total width of\n     the monitor
  text.\n   - New $VAR parameter syntax for using env vars in pipe monitors, by\n
  \    Will Song (see [issue #268]).\n\n_Bug fixes_\n\n   - The `Volume` plugin now
  supports capture devices (Antoine Eiche).\n   - The `MPD` plugin will now automatically
  update on options changes\n     (Ben Boeckel).\n   - The `Battery` plugin does now
  a better job at tracking AC status\n     and times (see [issue #231]).\n   - `PipeReader`
  was polling too often (thanks to zlbruce).\n   - The `MPris` monitor now honours
  field width and padding optons\n     (-M, -w, etc.).\n   - `Batt`: sensible thresholds
  for high/low power consumption (see\n     [issue #265]).\n\n[issue #231]: https://github.com/jaor/xmobar/issues/225\n[issue
  #265]: https://github.com/jaor/xmobar/issues/225\n[issue #268]: https://github.com/jaor/xmobar/issues/268\n\n##
  Version 0.23.1 (Apr 14, 2015)\n\n_Bug fixes_\n\n  - Vertical alignment for icons,
  [issue #216]\n  - Improvements to vertical text alignment, with many thanks to Jan\n
  \   Palus (see ongoing discussion in [issue #221]).\n  - Better error handling in
  `Volume` monitor, [issue #215]\n  - Compilation with ghc 7.8 and 7.10 (thanks to
  Edward Tjörnhammar,\n    see [issue #225]).\n\n[issue #225]: https://github.com/jaor/xmobar/issues/225\n[issue
  #221]: https://github.com/jaor/xmobar/issues/221\n[issue #216]: https://github.com/jaor/xmobar/issues/216\n[issue
  #215]: https://github.com/jaor/xmobar/issues/215\n\n## Version 0.23 (Mar 8, 2015)\n\n_New
  features_\n\n  - Xmobar can now use a (semi)transparent background: set it with
  the\n    new configuration option `alpha` (thanks to Edward Z. Yang, see\n    [issue
  #114]).\n  - Multiple fonts available by means of the new configuration\n    parameter
  `additionalFonts` and the template markers\n    `<fn=1>...</fn>`, by Markus Scherer.\n
  \ - New variables in `Mem` monitor for available memory as reported by\n    Linux
  3.14 and newer, by Samuli Thomasson.\n  - New configuration parameters `textOffset`
  and `iconOffset` (see\n    discussion in [issue #171] and [issue #201]).\n  - New
  template variable `flags` in `MPD` monitor, by Duncan Burke.\n\n[issue #171]: https://github.com/jaor/xmobar/issues/171\n[issue
  #201]: https://github.com/jaor/xmobar/issues/201\n[issue #114]: https://github.com/jaor/xmobar/issues/114\n\n_Bug
  fixes_\n\n  - We honour the `-S` (show suffix) monitor flag in `CpuFreq`.\n  - Better
  `Weather` parsing of wind direction, by Dino Morelli (see\n    [pull #212]).\n\n[pull
  #212]: https://github.com/jaor/xmobar/pull/212\n\n## Version 0.22.1 (Oct 11, 2014)\n\n_Bug
  fixes_\n\n  - Fix compilation in systems that don't need mtl newer than the one\n
  \   shipped with GHC.\n\n## Version 0.22 (Oct 9, 2014)\n\n_New features_\n\n  -
  New `MarqueePipeReader` plugin by Reto Hablützel.\n  - `Network` monitor has now
  adaptive units (`-S` is used now to\n    switch them on), by Axel Angel.\n  - `Weather`
  now offers `dewPointC` and `dewPointF` instead of\n    `dewPoint`, and the new `windCardinal`,
  `windAzimuth`, `windMph`\n    and `windKnots` variables, by Tony Morris.\n  - Strings
  in the configuration file can now span multiple lines\n    using Haskell-style multiline
  script, thanks to dunric\n  - Icons can now be also xpm files (if xmobar is compiled
  with\n    `with_xpm`), thanks to Alexander Shabalin.\n  - New `borderWidth` option
  to set xmobar's boder width, thanks to\n    Travis Staton.\n  - Support for multiple
  Xft fonts, thanks to Phil Xiaojun Hu and\n    Cedric staub (see [pull request #196]).\n
  \ - Icon patterns for several monitors, that allow you to specify a\n    collection
  of icons to use for successive integer variable values,\n    thanks to Alexander
  Shabalin (see [pull request #192] and the\n    documentation for details).\n  -
  Upgrade to libmpd 0.9.\n\n_Bug fixes_\n\n  - Much more efficient implementation
  of the `Locks` plugin, thanks\n    to Anton Vorontsov (see [pull request #195]).\n
  \ - Not colorizing total disk size in `DiskU` ([issue #189]).\n  - Avoiding zombies
  on click actions, thanks to Phil Xiaojun Hu\n    ([issue #181]).\n\n[issue #181]:
  https://github.com/jaor/xmobar/issues/181\n[issue #189]: https://github.com/jaor/xmobar/issues/189\n[pull
  request #192]: https://github.com/jaor/xmobar/pull/192\n[pull request #195]: https://github.com/jaor/xmobar/pull/195\n[pull
  request #196]: https://github.com/jaor/xmobar/pull/196\n\n## Version 0.21 (Jul 1,
  2014)\n\n_New features_\n\n  - Vertical bar indicators using unicode available for
  most monitors,\n    by Eric Mrak.\n  - `CoreTemp`: support for linux 3.15, by Tomáš
  Janoušek.\n  - New `CatInt` monitor, displaying integer values read from a file,\n
  \   by Nathaniel Wesley Filardo.\n  - New `<raw>` tag for safer input parsing, also
  by Nathaniel.\n  - New `UnsafeXMonadLog` monitor (by Eric Mrak) and their xproperty\n
  \   counterparts, `UnsafeXPropertyLog` and `UnsafeNamedXPropertyLog`.\n\n_Bug fixes_\n\n
  \ - `Network` now reports status for ppp connections (see\n    [issue #89]).\n  -
  Fix for very long running `Cpu` monitors, by Robert J Macomber.\n\n[issue #89]:
  https://github.com/jaor/xmobar/issues/89\n\n## Version 0.20.1 (March 13, 2014)\n\n_New
  features_\n\n  - Back to picking by default the first available screen, with a new\n
  \   configuration option, `pickBroadest`, for choosing the broadest\n    (see [issue
  #158]).\n\n[issue #158]: https://github.com/jaor/xmobar/issues/158\n\n## Version
  0.20 (March 10, 2014)\n\n_New features_\n\n  - Mouse actions now support multiple
  buttons, by Marcin Mikołajczyk.\n  - Non supported monitors are ignored in configuration
  files (see\n    [issue #139]), by Adam Vogt.\n\n_Bug fixes_\n\n  - `Disk` monitor
  now ignores non-existent devices (Reto Hablützel).\n  - `Weather` is now non-blocking
  and doesn't use curl (Ben Boeckel).\n  - Fix for `Memory` monitor in 3.14 kernels
  (Ben Boeckel).\n  - Fix for infinite loops in `AutoMPD` ([issue #76], [issue #111]).\n
  \ - More robust AC readings in `BatteryP`.\n  - Fix for `Top` monitor's readings
  for processes whose name contains\n    blanks.\n  - Fixes for geometry computation
  on multihead (Dmitry Malikov).\n  - Fixes for missing XDG configuration (Thiago
  Negri and James McCoy,\n    see [issue #133]).\n  - Compatibility with latest `directory`
  (1.2.0.2).\n\n[issue #76]: https://github.com/jaor/xmobar/issues/76\n[issue #111]:
  https://github.com/jaor/xmobar/issues/111\n[issue #133]: https://github.com/jaor/xmobar/issues/133\n[issue
  #139]: https://github.com/jaor/xmobar/issues/133\n\n## Version 0.19 (October 27,
  2013)\n\nAs of this release, the old bug tracker at Google code is deprecated.\nPlease
  use [Github's tracker] for new bugs.\n\n_New features_\n\n  - New monitor `BatteryN`,
  a variant of `BatteryP` that lets you\n    specify the name of the monitor in the
  template.\n  - Support for configuration file living in `XDG_CONFIG_HOME` (see\n
  \   [github #99]).\n  - `Com` uses safer `runInteractiveProcess` instead of spawning
  a\n    shell (David McLean).  If you're using shell expansion in your\n    `Com`
  (e.g. \"~/bin/script\") here's a workaround: `Run Com\n    \"/bin/bash\" [\"-c\",
  \"~/bin/script\"]` (cf. [github #127]).\n  - New plugin `UnsafeStdinReader` that
  allows actions from stdin.\n    Now it's possible to have clickable workspaces!\n
  \   (Thiago Negri, see [github #125]).\n  - New monitor configuration option (`-x`
  or `--nastring`) that allows\n    specifying what string to display when a monitor
  is not available\n    (defaulting to \"N/A\"). Cf. [github #119].\n\n_Bug fixes_\n\n
  \ - Using the width options `-w`, `-m` and `-M` in battery monitors\n    watts display
  ([github #118]).\n  - Using the `-d` option in `CoreTemp` ([github #115])\n  - Fix
  for systems not supporting PCRE regular expressions: we use\n    now BCEs, so regex-compat
  should be enough everywhere (see\n    [github #117]).\n  - Weather monitor: support
  for stations without name (Sergei\n    Trofimovich, [issue #65]).\n\n[Github's tracker]:
  https://github.com/jaor/xmobar/issues\n[github #99]: https://github.com/jaor/xmobar/issues/115\n[github
  #115]: https://github.com/jaor/xmobar/issues/115\n[github #117]: https://github.com/jaor/xmobar/issues/117\n[github
  #125]: https://github.com/jaor/xmobar/issues/125\n[issue #65]: http://code.google.com/p/xmobar/issues/detail?id=65\n[github
  #118]: https://github.com/jaor/xmobar/issues/118\n[github #119]: https://github.com/jaor/xmobar/issues/119\n[github
  #127]: https://github.com/jaor/xmobar/issues/127\n\n## Version 0.18 (June 5, 2013)\n\n_New
  features_\n\n  - All extra argument monitors taking a string (e.g. `-O` for\n    `BatteryP`)
  accept now template variables (see [github #109] and\n    [#110]).  Thanks to Todd
  Lunter.\n\n  - New battery monitor extra argument, `-i`, for the idle status.\n\n_Bug
  fixes_\n\n  - Safer standard input parsing, avoiding <action> injections.\n\n\n[github
  #109]: https://github.com/jaor/xmobar/issues/109\n[#110]: https://github.com/jaor/xmobar/issues/110\n\n##
  Version 0.17 (May 5, 2013)\n\n_New features_\n\n  - Icons support: it's now possible
  to insert bitmaps in the template\n    (Edward O'Callaghan, Alexander Polakov and
  Tomáš Janoušek).\n  - Initial support for reacting to mouse clicks (Alexander Polakov).\n
  \ - New `TopP` and `BottomP` alignments, taking left and right\n    paddings (thanks
  to Dmitry Malikov).\n  - New `<freeratio>` field for memory monitor (Peter Simons).\n
  \ - New `allDesktops` and `overrideRedirect` configuration options,\n    providing
  dock behaviour in tiling WMs (when set to True and False\n    respectively). Cf.
  discussion at [github #105].\n  - Experimental `-d` (start as a dock) option, may
  address [github #67]\n    in some window managers.\n\n_Bug fixes_\n\n  - Partial
  (as reports go) fix for [github #77].\n  - Safer volume plugin (Dmitry Malikov).\n
  \ - Battery percentage capped at 100% (RJ Regenold).\n\n[github #67]: https://github.com/jaor/xmobar/issues/67\n[github
  #77]: https://github.com/jaor/xmobar/issues/77\n[github #105]: https://github.com/jaor/xmobar/issues/105\n\n\n##
  Version 0.16 (Dec 3, 2012)\n\n_New features_\n\n  - New monitor `AutoMPD`, which
  uses asynchronous events to display\n    MPD status (thanks to Ben Boeckel).\n  -
  New monitor `BufferedPipeReader` displaying data from multiple\n    pipes (thanks
  to Jochen Keil).\n  - New monitor `DynNetwork`, which detects the active interface\n
  \   automatically, by Reto Hablützel\n  - New monitor, `Locks`, displaying the status
  of lock keys, by\n    Patrick Chilton.\n  - Extension for DBUS signal handling (Jochen
  Keil)\n  - Hide/Reveal: one can send signals to xmobar and make it (un)hide\n    itself
  (Jochen again).\n  - `PipeReader`'s default text is now configurable, by Reto Hablützel.\n
  \ - Dependencies updated to latest mtl and libmpd (thanks to Sergei\n    Trofimovich).\n
  \ - Dependencies on the deprecated dbus-core removed in favour of\n    dbus 0.10
  (thanks to Jochen Keil).\n  - MPris2 now includes genre and composer among its fields.\n\n_Bug
  fixes_\n\n  - `DiskIO` now can report overall activity in all partitions of a device\n
  \   which is not mounted itself (e.g., sda when sda1, sda3, etc. are\n    the mounted
  partitions).  Thanks to John Soros. See [github #73].\n  - `DiskU`, the disk usage
  monitor, works again correctly on Linux,\n    instead of randomly crashing every
  now and then, and reporting\n    wrong used size.\n  - When using antialiased fonts,
  we were causing a memory leak in the\n    X server by repeatedly allocating colors
  that, apparently, the\n    server doesn't know how to get rid of (even when told
  so!).  We're\n    caching them now and X server memory doesn't grow.\n  - Compilation
  errors and warnings with GHC 7.6 removed (thanks to\n    Raghavendra D Prabhu for
  his reports in [github #71]).\n\n_Known problems_\n\nSome users have reported problems
  with xmobar compiled with GHC 7.6 in\nArchLinux: see [github #78] and pointers therein.
  \ Please, send\nreports of any problems or successes in that regard so that we can
  fix\nany remaining issues.  Thanks!\n\n[github #71]: https://github.com/jaor/xmobar/issues/71\n[github
  #73]: https://github.com/jaor/xmobar/issues/73\n[github #78]: https://github.com/jaor/xmobar/issues/78\n\n##
  Version 0.15 (June 4, 2012)\n\n_Incompatible changes_\n\n  - `Batt` monitor no longer
  uses `-c` to specify the charge file: it\n    should figure things out by itself
  (cf. [issue 69]).\n\n_New features_\n\n  - New command line option, `-C`, that allows
  *adding* commands to\n    those specified in the configuration file (Ben Boeckel).\n
  \ - Dependency on GHC's threaded runtime has been eliminated.\n  - New MPRIS (versions
  1 and 2) monitor, by Artem Tarasov.\n  - New monitor option `-d` to specify the
  number of decimal places to\n    display for float numbers.  Defaults to 0. See
  [issue 58].\n  - New compilation option `--with_threaded`, to use GHC's threaded\n
  \   runtime to compile xmobar.  Disabled by default (cf. discussion in\n    [github
  #36]).\n\n_Bug fixes_\n\n  - Stricter build dependencies versioning in cabal file.\n
  \ - [issue 56] vertical alignment of text improved.\n  - [issue 64] display of `watts`
  in `Batt` monitor fixed.\n  - [issue 69] miscellaneous battery reporting issues.\n
  \ - [issue 67] compilation in DragonFly.\n  - DiskIO works also when device path
  in mtab are symbolic links\n    to the real device file.\n  - Wireless monitor honours
  padding settings for ESSID names.\n  - CoreTemp monitor fixed for newer kernels
  ([github #38]).\n\n[issue 56]: http://code.google.com/p/xmobar/issues/detail?id=56\n[issue
  58]: http://code.google.com/p/xmobar/issues/detail?id=58\n[issue 64]: http://code.google.com/p/xmobar/issues/detail?id=64\n[issue
  67]: http://code.google.com/p/xmobar/issues/detail?id=67\n[issue 69]: http://code.google.com/p/xmobar/issues/detail?id=69\n[github
  #36]: https://github.com/jaor/xmobar/issues/36\n[github #38]: https://github.com/jaor/xmobar/issues/38\n\n##
  Version 0.14 (Dec 10, 2011)\n\n_New features_\n\n  - New brightness monitor, courtesy
  of Martin Perner.\n  - New DateZone plugin, for configurable timezone and localized\n
  \   datetimes, also by Martin.\n  - New keyboard layout monitor (Kbd).  Yes, by
  Martin.\n  - Rewrite of the event handling ([issue 53], [issue 57]), you\n    guessed
  it.\n  - Cpu monitor now also reports `iowait` field ([issue 55]).\n  - Battery
  monitor: the full charge file is now settable in the\n    monitor arguments (olpc
  systems use `charge_full_design`; see\n    [issue 62]).\n\n_Bug fixes_\n\n  - [issue
  45] Fix for crashes with AC status changes in battery monitor.\n  - [issue 48] The
  <quality> field of Wireless behaves like a percentage.\n  - [issue 50]/[issue 61]:
  `MPD` monitor now works with libmpd 0.6.\n  - [issue 60] Fixes for crashes on power
  resume for battery monitor.\n  - Template sections without fields are now correctly
  displayed.\n  - Catch errors when reading battery status (Ben Boeckel).\n  - Compilation
  issues with ghc 7.x (Sergei Trofimovich).\n  - Fixes for CoreTemp monitor in new
  kernels (Norbert Zeh).\n  - Fix for pulseaudio problems in volume monitor (Martin
  Perner).\n  - Fix for parsing errors when a `Run` entry ended in an array\n    (Martin).\n
  \ - Fixed compilation in OpenBSD (Ivo van der Sangen).\n\n[issue 45]: http://code.google.com/p/xmobar/issues/detail?id=45\n[issue
  48]: http://code.google.com/p/xmobar/issues/detail?id=48\n[issue 50]: http://code.google.com/p/xmobar/issues/detail?id=50\n[issue
  53]: http://code.google.com/p/xmobar/issues/detail?id=53\n[issue 55]: http://code.google.com/p/xmobar/issues/detail?id=55\n[issue
  57]: http://code.google.com/p/xmobar/issues/detail?id=57\n[issue 60]: http://code.google.com/p/xmobar/issues/detail?id=60\n[issue
  61]: http://code.google.com/p/xmobar/issues/detail?id=61\n[issue 62]: http://code.google.com/p/xmobar/issues/detail?id=62\n\n##
  Version 0.13 (March 28, 2011)\n\n_New features_\n\n  - New `Volume` monitor displaying
  ALSA soundcards information, by\n    Thomas Tuegel.\n  - New `ThermalZone` plugin
  substituting `Thermal` and using linux's\n    *sysfs* interface (you need this one
  if you're using a kernel\n    version equal to or above 2.6.37). See [issue 44].\n
  \ - xmobar app new has WM_CLASS, WM_NAME and _NET_WM_PID xprops\n    ([issue 38]).\n\n_Incompatible
  changes_\n\n  - In the process of solving [issue 14], we've broken those\n    configurations
  that rely on including alignment separators in the\n    input fed to `StdinReader`.\n
  \ - The MPD plugin does not accept host and port options anymore: use\n    the environment
  variables MPD_HOST and MPD_PORT instead.\n  - The `Mail` plugin now takes a second
  parameter (a string)\n    specifying its alias. As a side-effect, this solves [issue
  30].\n\n_Bug fixes_\n\n  - [issue 14] `StdinReader` and other plugins accepting
  external\n    input don't get confused anymore when characters from `alignSep`\n
  \   appear in their input.\n  - [issue 27] `BottomSize` placement now respects its
  width argument.\n  - [issue 28] Compilation in Mac OS X fixed.\n  - [issue 30] `Mail`
  plugin can be specified anywhere in commands list.\n  - [issue 36] Battery monitor
  now supports non-standard locations of\n    the `/sys/class/power_supply/AC/online`
  file.\n  - [issue 40] Battery monitor now supports the new power_now, that\n    replaces
  current_now in linux kernels for v. 2.36 and above.\n  - [issue 42] More accurate
  net monitor rates.\n  - DiskIO, Cpu and MultiCpu monitors are also more accurate
  now.\n  - Text is now correctly centered vertically.\n  - `FullBM` border spec fixed.\n\n[issue
  14]: http://code.google.com/p/xmobar/issues/detail?id=14\n[issue 27]: http://code.google.com/p/xmobar/issues/detail?id=27\n[issue
  28]: http://code.google.com/p/xmobar/issues/detail?id=28\n[issue 30]: http://code.google.com/p/xmobar/issues/detail?id=30\n[issue
  36]: http://code.google.com/p/xmobar/issues/detail?id=36\n[issue 38]: http://code.google.com/p/xmobar/issues/detail?id=38\n[issue
  40]: http://code.google.com/p/xmobar/issues/detail?id=40\n[issue 42]: http://code.google.com/p/xmobar/issues/detail?id=42\n[issue
  44]: http://code.google.com/p/xmobar/issues/detail?id=44\n\n## Version 0.12 (Dec
  24, 2010)\n\nxmobar has a new [maintainer], a new [website], a new [mailing\nlist]
  and uses a new [source code repository].\n\nMany thanks to Andrea Rossato, xmobar's
  author and maintainer so far,\nfor creating xmobar in the first place, and for giving
  me the chance\nto become its maintainer. And a big thanks to Ben Boeckel, Petr Rockai\nand
  Norbert Zeh for their patches.\n\n[website]: http://projects.haskell.org/xmobar/\n[mailing
  list]: http://projects.haskell.org/cgi-bin/mailman/listinfo/xmobar\n[source code
  repository]: https://github.com/jaor/xmobar\n[maintainer]: http://hacks-galore.org/jao/\n\n_New
  features_\n\n  - Window borders: configuration options `border` and `borderColor`\n
  \   allow drawing borders around xmobar's window.\n  - New monitor, `Uptime`, showing
  the system uptime.\n  - New monitor argument (`-S`) to enable displaying the `%`
  symbol in\n    percentages or other suffixes (e.g., units in Uptime and Network);\n
  \   the symbol is now never included by default.\n  - New 'run once' commands, by
  specifying a 0 refresh rate in `Run\n    Com` ([issue 26]).\n  - MPD monitor: updated
  to libmpd 1.5. New fields `ppos` (playlist\n    position) and `remaining` (remaining
  time). New configuration\n    options to specify MPD's host, user name and password.\n
  \ - Battery monitor: new `watts` and `timeleft` fields (Petr Rockai),\n    and specific
  arguments to control coloring and thresholds of the\n    former.\n  - MultiCPU monitor:
  new `auto*` fields that automatically detect all\n    present CPUs (Ben Boeckel).\n
  \ - CpuFreq monitor uses just one decimal digit for GHz values (Petr\n    Rockai).\n
  \ - Mail plugin expands paths starting with \"~/\" (Ben Boeckel). Ditto\n    MBox.\n
  \ - Weather monitor now skips not retrieved fields, instead of\n    displaying a
  long error message.\n  - New compilation flag, `all_extensions`.\n  - Documentation
  and website updates.\n\n_Bug fixes_\n\n  - [issue 23] Wireless monitor is now compatible
  with iwlib 29.\n  - [issue 24] Swap monitor's used ratio display fixed.\n  - [issue
  25] Percentages only include `%` if requested using `-P`.\n  - [issue 31] MPD monitor
  now respects `-W` argument.\n  - Fixes in CPU frequency formatting, string alignment
  and colour\n    boxes in monitors (Norbert Zeh).\n  - TopMem and TopProc now use
  the `-L` and `-H` options correctly for\n    memory template fields.\n  - MBox skips
  non-existent mbox paths instead of hanging.\n\n[issue 23]: http://code.google.com/p/xmobar/issues/detail?id=23\n[issue
  24]: http://code.google.com/p/xmobar/issues/detail?id=24\n[issue 25]: http://code.google.com/p/xmobar/issues/detail?id=25\n[issue
  26]: http://code.google.com/p/xmobar/issues/detail?id=26\n[issue 31]: http://code.google.com/p/xmobar/issues/detail?id=31\n"
basic-deps:
  bytestring: -any
  extensible-exceptions: ==0.1.*
  unix: -any
  stm: ! '>=2.3 && <2.6'
  base: ! '>=4.9.1.0 && <4.13'
  time: -any
  X11: ! '>=1.6.1'
  xmobar: -any
  filepath: -any
  process: -any
  async: -any
  parsec: ==3.1.*
  containers: -any
  regex-compat: -any
  utf8-string: ! '>=0.3 && <1.1'
  old-locale: -any
  mtl: ! '>=2.1 && <2.3'
  HTTP: ! '>=4000.2.4'
  transformers: -any
  parsec-numbers: ! '>=0.1.0'
  directory: -any
all-versions:
- '0.3'
- '0.3.1'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '0.9.1'
- '0.9.2'
- '0.10'
- '0.11'
- '0.11.1'
- '0.12'
- '0.13'
- '0.14'
- '0.15'
- '0.16'
- '0.17'
- '0.18'
- '0.19'
- '0.20'
- '0.20.1'
- '0.21'
- '0.22'
- '0.22.1'
- '0.23'
- '0.23.1'
- '0.24'
- '0.24.1'
- '0.24.2'
- '0.24.3'
- '0.24.4'
- '0.24.5'
- '0.25'
- '0.26'
- '0.27'
- '0.28'
- '0.28.1'
- '0.29'
author: Andrea Rossato and Jose A. Ortega Ruiz
latest: '0.29'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/xmobar.svg)](http://hackage.haskell.org/package/xmobar)\n[![Build
  Status](https://travis-ci.org/jaor/xmobar.svg?branch=master)](https://travis-ci.org/jaor/xmobar)\n\n#
  About\n\nXmobar is a minimalistic status bar. It was originally designed and\nimplemented
  by Andrea Rossato to work with [xmonad], but it is\nactually usable with any window
  manager.\n\nXmobar was inspired by the [Ion3] status bar, and supports similar\nfeatures,
  like dynamic color management, icons, output templates, and\nextensibility through
  plugins.\n\n[This screenshot](doc/xmobar-sawfish.png) shows xmobar running under\n[sawfish],
  and [this one](doc/xmobar-xmonad.png) is a desktop with\n[xmonad] and two instances
  of xmobar.\n\n[xmonad]: http://xmonad.org\n[Ion3]: http://tuomov.iki.fi/software/\n\n#
  Bug Reports\n\nTo submit bug reports you can use the [bug tracker over at\nGithub](https://github.com/jaor/xmobar/issues).\n\n#
  Installation\n\n## Using cabal-install\n\nXmobar is available from [Hackage], and
  you can install it using\n`cabal-install`:\n\n        cabal install xmobar\n\nXmobar
  versions >= 0.27 require GHC version >= 8.0.2.  Due to an\nintermittent bug in GHC,
  we recommend using either GHC 8.0.2, 8.2.2 or\n8.6.\n\nSee below for a list of optional
  compilation flags that will enable\nsome optional plugins. For instance, to install
  xmobar with all the\nbells and whistles, use:\n\n        cabal install xmobar --flags=\"all_extensions\"\n\n##
  From source\n\nIf you don't have `cabal-install` installed, you can get xmobar's\nsource
  code in a variety of ways:\n\n  - From [Hackage]. Just download the latest release
  from xmobar's\n    hackage page.\n  - From [Github]. You can also obtain a tarball
  in [Github's\n    downloads page]. You'll find there links to each tagged release.\n
  \ - From the bleeding edge repo. If you prefer to live dangerously,\n    just get
  the latest and greatest (and buggiest, I guess) using\n    git:\n\n        git clone
  git://github.com/jaor/xmobar\n\n\n[Github's downloads page]: https://github.com/jaor/xmobar/downloads\n\nIf
  you have cabal installed, you can now use it from within xmobar's\nsource tree:\n\n
  \       cabal install -fall_extensions\n\n\nThere is also a barebones `stack.yaml`
  file that will allow you to\nbuild the xmobar executable with stances of the form:\n\n
  \       stack install --flag xmobar:all_extensions\n\n\n## Optional features\n\nYou
  can configure xmobar to include some optional plugins and\nfeatures, which are not
  compiled by default. To that end, you need to\nadd one or more flags to either the
  cabal install command or the\nconfigure setup step, as shown in the examples above.\n\nExtensions
  need additional libraries (listed below) that will be\nautomatically downloaded
  and installed if you're using cabal install.\nOtherwise, you'll need to install
  them yourself.\n\n- `with_dbus` Enables support for DBUS by making xmobar to publish
  a\n  service on the session bus.  Requires the [dbus] package.\n\n- `with_threaded`
  Uses GHC's threaded runtime.  Use this option if\n  xmobar enters a high-CPU regime
  right after starting.\n\n- `with_utf8` UTF-8 support. Requires the [utf8-string]
  package.\n\n- `with_xft` Antialiased fonts. Requires the [X11-xft] package. This\n
  \ option automatically enables UTF-8.  To use XFT fonts you need to\n  use the `xft:`
  prefix in the `font` configuration option. For\n  instance:\n\n        font = \"xft:Times
  New Roman-10:italic\"\n\n  Or to have fallback fonts, just separate them by commas:\n\n
  \       font = \"xft:Open Sans:size=9,WenQuanYi Zen Hei:size=9\"\n\n- `with_mpd`
  Enables support for the [MPD] daemon. Requires the\n  [libmpd] package.\n\n- `with_mpris`
  Enables support for MPRIS v1/v2 protocol.  Requires the\n  [dbus] and [text] packages.\n\n-
  `with_inotify` Support for inotify in modern Linux kernels. This\n  option is needed
  for the MBox and Mail plugins to work. Requires the\n  [hinotify] package.\n\n-
  `with_iwlib` Support for wireless cards. Enables the Wireless\n   plugin. No Haskell
  library is required, but you will need the\n   [iwlib] C library and headers in
  your system (e.g., install\n   `libiw-dev` in Debian-based systems or `wireless_tools`
  on Arch\n   Linux).\n\n- `with_alsa` Support for ALSA sound cards. Enables the Volume\n
  \  plugin. Requires the [alsa-mixer] package.  To install the latter,\n   you'll
  need the [libasound] C library and headers in your system\n   (e.g., install `libasound2-dev`
  in Debian-based systems).\n\n- `with_datezone` Support for other timezones. Enables
  the DateZone\n   plugin.  Requires [timezone-olson] and [timezone-series] package.\n\n-
  `with_xpm` Support for xpm image file format. This will allow loading\n  .xpm files
  in `<icon>`.  Requires the [libXpm] C library.\n\n- `with_uvmeter` Enables UVMeter
  plugin. The plugin shows UV data for\n   Australia. Requires `with_conduit` to connect
  to HTTPS URLs.\n\n- `with_weather` Support to display weather information. Enables\n
  \  Weather plugin.\n\n- `with_conduit` Use http-conduit for getting weather data
  enabling\n  support for http proxies.  Requires [http-conduit] and [http-types].\n
  \ Note that this flag has only an effect if `with_weather` is also set.\n\n- `all_extensions`
  Enables all the extensions above.\n\n# Running xmobar\n\nYou can now run xmobar
  with:\n\n        xmobar /path/to/config &\n\nor\n\n        xmobar &\n\nif you have
  the default configuration file saved as\n`$XDG\\_CONFIG\\_HOME/xmobar/xmobarrc`
  (defaulting to\n`~/.config/xmobar/xmobarrc`), or `~/.xmobarrc`.\n\n## Signal Handling\n\nSince
  0.14 xmobar reacts to SIGUSR1 and SIGUSR2:\n\n- After receiving SIGUSR1 xmobar moves
  its position to the next screen.\n\n- After receiving SIGUSR2 xmobar repositions
  itself on the current screen.\n\n# Configuration\n\n## Quick Start\n\nSee [examples/xmobar.config]
  for an example.\n\n[examples/xmobar.config]: http://github.com/jaor/xmobar/raw/master/examples/xmobar.config\n\nFor
  the output template:\n\n- `%command%` will execute command and print the output.
  The output\n  may contain markups to change the characters' color.\n\n- `<fc=#FF0000>string</fc>`
  will print `string` with `#FF0000` color\n  (red).\n\n- `<fn=1>string</fn>` will
  print `string` with the first font from\n  `additionalFonts`.  The index `0` corresponds
  to the standard font.\n\n- `<icon=/path/to/icon.xbm/>` will insert the given bitmap.
  XPM image\n  format is also supported when compiled with `--flags=\"with_xpm\"`.\n\n-
  ```<action=`command` button=12345>``` will execute given command\n  when clicked
  with specified buttons. If not specified, button is\n  equal to 1 (left mouse button).
  Using old syntax (without backticks\n  surrounding `command`) will result in `button`
  attribute being\n  ignored.\n\n- `<raw=len:str/>` allows the encapsulation of arbitrary
  text `str` (which\n  must be `len` `Char`s long, where `len` is encoded as a decimal
  sequence).\n  Careful use of this and `UnsafeStdinReader`, for example, permits
  window\n  managers to feed xmobar strings with `<action>` tags mixed with un-trusted\n
  \ content (e.g. window titles).  For example, if xmobar is invoked as\n\n    ```xmobar
  -c \"[Run UnsafeStdinReader]\" -t \"%UnsafeStdinReader%\"```\n\n  and receives on
  standard input the line\n\n    ```<action=`echo test` button=1><raw=41:<action=`echo
  mooo` button=1>foo</action>/></action>```\n\n  then it will display the text ```<action=`echo
  mooo` button=1>foo</action>```,\n  which, when clicked, will cause `test` to be
  echoed.\n\nOther configuration options:\n\n- `font` Name of the font to be used.
  Use the `xft:` prefix for XFT\n  fonts.\n\n- `additionalFonts` Haskell-style list
  of fonts to be used with the\n  `fn`-template.  Use the `xft:` prefix for XFT fonts.
  \ See also\n  `textOffsets` below.\n\n- `bgColor` Background color.\n\n- `fgColor`
  Default font color.\n\n- `alpha` The transparency.  0 is transparent, 255 is opaque.\n\n-
  `position` Top, TopP, TopW, TopSize, Bottom, BottomP, BottomW,\n  BottomSize or
  Static (with x, y, width and height).\n\n  TopP and BottomP take 2 arguments: left
  padding and right padding.\n\n  TopW and BottomW take 2 arguments: an alignment
  parameter (L for\n  left, C for centered, R for Right) and an integer for the percentage\n
  \ width xmobar window will have in respect to the screen width.\n\n  TopSize and
  BottomSize take 3 arguments: an alignment parameter, an\n  integer for the percentage
  width, and an integer for the minimum\n  pixel height that the xmobar window will
  have.\n\n  For example:\n\n          position = BottomW C 75\n\n  to place xmobar
  at the bottom, centered with the 75% of the screen\n  width.  Or\n\n          position
  = BottomP 120 0\n\n  to place xmobar at the bottom, with 120 pixel indent of the
  left.\n  Or\n\n          position = Static { xpos = 0 , ypos = 0, width = 1024,
  height = 15 }\n\n  or\n\n          position = Top\n\n- `textOffset` The vertical
  offset, in pixels, for the text baseline.\n   If negative or not given, xmobar will
  try to center text\n   vertically.\n\n- `textOffsets` A list of vertical offsets,
  in pixels, for the text\n   baseline, to be used with the each of the fonts in\n
  \  `additionalFonts` (if any).  If negative or not given, xmobar will\n   try to
  center text vertically for that font.\n\n- `iconOffset` The vertical offset, in
  pixels, for icons bottom line.\n   If negative or not given, xmobar will try to
  center icons\n   vertically.\n\n- `lowerOnStart` When True the window is sent the
  bottom of the window\n  stack initially.\n\n- `hideOnStart` When set to True the
  window is initially not mapped,\n  i.e. hidden. It then can be toggled manually
  (for example using the\n  dbus interface) or automatically (by a plugin) to make
  it reappear.\n\n- `allDesktops` When set to True (the default), xmobar will tell
  the\n  window manager explicitly to be shown in all desktops, by setting\n  `_NET_WM_DESKTOP`
  to 0xffffffff.\n\n- `overrideRedirect` If you're running xmobar in a tiling window\n
  \ manager, you might need to set this option to `False` so that it\n  behaves as
  a docked application.  Defaults to `True`.\n\n- `pickBroadest` When multiple displays
  are available, xmobar will\n  choose by default the first one to place itself.  With
  this flag set\n  to `True` (the default is `False`) it will choose the broadest
  one\n  instead.\n\n- `persistent` When True the window status is fixed i.e. hiding
  or\n  revealing is not possible. This option can be toggled at\n  runtime. Defaults
  to False.\n\n- `border` TopB, TopBM, BottomB, BottomBM, FullB, FullBM or NoBorder\n
  \ (default).\n\n  TopB, BottomB, FullB take no arguments, and request drawing a
  border\n  at the top, bottom or around xmobar's window, respectively.\n\n  TopBM,
  BottomBM, FullBM take an integer argument, which is the\n  margin, in pixels, between
  the border of the window and the drawn\n  border.\n\n- `borderColor` Border color.\n\n-
  `borderWidth` Border width in pixels.\n\n- `iconRoot` Root folder where icons are
  stored. For <icon=path/> if\n  path start with `\"/\"`, `\"./\"` or `\"../\"` it
  is interpreted as it is.\n  Otherwise it will have `iconRoot ++ \"/\"` prepended
  to it. Default is\n  `\".\"`.\n\n- `commands` For setting the options of the programs
  to run\n  (optional).\n\n- `sepChar` The character to be used for indicating commands
  in the\n  output template (default '%').\n\n- `alignSep` a 2 character string for
  aligning text in the output\n  template. The text before the first character will
  be align to left,\n  the text in between the 2 characters will be centered, and
  the text\n  after the second character will be align to the right.\n\n- `template`
  The output template.\n\n\n- `wmClass` The value for the window's X11 WM_CLASS property.\n
  \ Defaults to \"xmobar\".\n\n- `wmName` The value for the window's X11 WM_NAME property.
  \ Defaults\n  to \"xmobar\".\n\n### Running xmobar with i3status\n\nxmobar can be
  used to display information generated by [i3status], a\nsmall program that gathers
  system information and outputs it in\nformats suitable for being displayed by the
  dzen2 status bar, wmii's\nstatus bar or xmobar's `StdinReader`.  See [i3status manual]
  for\nfurther details.\n\n### Dynamically sizing xmobar\n\nSee [this idea] by Jonas
  Camillus Jeppensen for a way of adapting\ndynamically xmobar's size and run it alongside
  a system tray widget\nsuch as trayer or stalonetray (although the idea is not limited
  to\ntrays, really).  For your convenience, there is a version of Jonas'\nscript
  in [examples/padding-icon.sh](./examples/padding-icon.sh).\n\n[this idea]: https://github.com/jaor/xmobar/issues/239#issuecomment-233206552\n\n##
  Command Line Options\n\nxmobar can be either configured with a configuration file
  or with\ncommand line options. In the second case, the command line options\nwill
  overwrite the corresponding options set in the configuration\nfile.\n\nExample:\n\n
  \   xmobar -B white -a right -F blue -t '%LIPB%' -c '[Run Weather \"LIPB\" [] 36000]'\n\nThis
  is the list of command line options (the output of\nxmobar --help):\n\n    Usage:
  xmobar [OPTION...] [FILE]\n    Options:\n      -h, -?        --help                 This
  help\n      -V            --version              Show version information\n      -v
  \           --verbose              Emit verbose debugging messages\n      -r            --recompile
  \           Force recompilation (for Haskell FILE)\n      -f font name  --font=font
  name       Font name\n      -w class      --wmclass=class        X11 WM_CLASS property\n
  \     -n name       --wmname=name          X11 WM_NAME property\n      -B bg color
  \  --bgcolor=bg color     Background color. Default black\n      -F fg color   --fgcolor=fg
  color     Foreground color. Default grey\n      -A alpha      --alpha=alpha          Transparency:
  0 is transparent\n                                           and 255 (the default)
  is opaque\n      -o            --top                  Place xmobar at the top of
  the screen\n      -b            --bottom               Place xmobar at the bottom
  of the screen\n      -p            --position=position    Specify position, same
  as in config file\n      -d            --dock                 Try to start xmobar
  as a dock\n      -a alignsep   --alignsep=alignsep    Separators for left, center
  and right text\n                                           alignment. Default: '}{'\n
  \     -s char       --sepchar=char         Character used to separate commands in\n
  \                                          the output template. Default '%'\n      -t
  template   --template=template    Output template\n      -i path       --iconroot=path
  \       Default directory for icon pattern files\n      -c commands   --commands=commands
  \   List of commands to be executed\n      -C command    --add-command=command  Add
  to the list of commands to be executed\n      -x screen     --screen=screen        On
  which X screen number to start\n\n    Mail bug reports and suggestions to <mail@jao.io>\n\n##
  The DBus Interface\n\nWhen compiled with the optional `with_dbus` flag, xmobar can
  be\ncontrolled over dbus. All signals defined in [src/Signal.hs] as `data\nSignalType`
  can now be sent over dbus to xmobar.  Due to current\nlimitations of the implementation
  only one process of xmobar can\nacquire the dbus. This is handled on a first-come-first-served
  basis,\nmeaning that the first process will get the dbus interface. Other\nprocesses
  will run without further problems, yet have no dbus\ninterface.\n\n[src/Signal.hs]:
  https://github.com/jaor/xmobar/raw/master/src/Signal.hs\n\n- Bus Name: `org.Xmobar.Control`\n-
  Object Path: `/org/Xmobar/Control`\n- Member Name: Any of SignalType, e.g. `string:Reveal`\n-
  Interface Name: `org.Xmobar.Control`\n\nAn example using the `dbus-send` command
  line utility:\n\n        dbus-send \\\n            --session \\\n            --dest=org.Xmobar.Control
  \\\n            --type=method_call \\\n            --print-reply \\\n            '/org/Xmobar/Control'
  \\\n            org.Xmobar.Control.SendSignal \\\n            \"string:Toggle 0\"\n\nIt
  is also possible to send multiple signals at once:\n\n        # send to another
  screen, reveal and toggle the persistent flag\n        dbus-send [..] \\\n            \"string:ChangeScreen
  0\" \"string:Reveal 0\" \"string:TogglePersistent\"\n\nThe `Toggle`, `Reveal`, and
  `Hide` signals take an additional integer\nargument that denotes an initial delay,
  in tenths of a second, before\nthe command takes effect.\n\n### Example for using
  the DBus IPC interface with XMonad\n\nBind the key which should {,un}map xmobar
  to a dummy value. This is necessary\nfor {,un}grabKey in xmonad.\n\n    ((0, xK_Alt_L
  \  ), return ())\n\nAlso, install `avoidStruts` layout modifier from `XMonad.Hooks.ManageDocks`\n\nFinally,
  install these two event hooks (`handleEventHook` in `XConfig`)\n`myDocksEventHook`
  is a replacement for `docksEventHook` which reacts on unmap\nevents as well (which
  `docksEventHook` doesn't).\n\n    import qualified XMonad.Util.ExtensibleState as
  XS\n\n    data DockToggleTime = DTT { lastTime :: Time } deriving (Eq, Show, Typeable)\n\n
  \   instance ExtensionClass DockToggleTime where\n        initialValue = DTT 0\n\n
  \   toggleDocksHook :: Int -> KeySym -> Event -> X All\n    toggleDocksHook to ks
  ( KeyEvent { ev_event_display = d\n                                     , ev_event_type
  \   = et\n                                     , ev_keycode       = ekc\n                                     ,
  ev_time          = etime\n                                     } ) =\n            io
  (keysymToKeycode d ks) >>= toggleDocks >> return (All True)\n        where\n        toggleDocks
  kc\n            | ekc == kc && et == keyPress = do\n                safeSendSignal
  [\"Reveal 0\", \"TogglePersistent\"]\n                XS.put ( DTT etime )\n            |
  ekc == kc && et == keyRelease = do\n                gap <- XS.gets ( (-) etime .
  lastTime )\n                safeSendSignal [ \"TogglePersistent\"\n                               ,
  \"Hide \" ++ show (if gap < 400 then to else 0)\n                               ]\n
  \           | otherwise = return ()\n\n        safeSendSignal s = catchX (io $ sendSignal
  s) (return ())\n        sendSignal    = withSession . callSignal\n        withSession
  mc = connectSession >>= \\c -> callNoReply c mc >> disconnect c\n        callSignal
  :: [String] -> MethodCall\n        callSignal s = ( methodCall\n                         (
  objectPath_    \"/org/Xmobar/Control\" )\n                         ( interfaceName_
  \"org.Xmobar.Control\"  )\n                         ( memberName_    \"SendSignal\"
  \         )\n                       ) { methodCallDestination = Just $ busName_
  \"org.Xmobar.Control\"\n                         , methodCallBody        = map toVariant
  s\n                         }\n\n    toggleDocksHook _ _ _ = return (All True)\n\n
  \   myDocksEventHook :: Event -> X All\n    myDocksEventHook e = do\n        when
  (et == mapNotify || et == unmapNotify) $\n            whenX ((not `fmap` (isClient
  w)) <&&> runQuery checkDock w) refresh\n        return (All True)\n        where
  w  = ev_window e\n              et = ev_event_type e\n\n\n## The Output Template\n\nThe
  output template must contain at least one command. xmobar will\nparse the template
  and will search for the command to be executed in\nthe `commands` configuration
  option. First an `alias` will be searched\n(plugins such as Weather or Network have
  default aliases, see below).\nAfter that, the command name will be tried. If a command
  is found, the\narguments specified in the `commands` list will be used.\n\nIf no
  command is found in the `commands` list, xmobar will ask the\noperating system to
  execute a program with the name found in the\ntemplate. If the execution is not
  successful an error will be\nreported.\n\nIt's possible to insert in the global
  templates icon directives of the\nform:\n\n     <icon=/path/to/bitmap.xbm/>\n\nwhich
  will produce the expected result. Accepted image formats are XBM\nand XPM (when
  `with_xpm` flag is enabled). If path does not start with\n`\"/\"`, `\"./\"`, `\"../\"`
  it will have `iconRoot ++ \"/\"` prepended to it.\n\nIt's also possible to use action
  directives of the form:\n\n     <action=`command` button=12345>\n\nwhich will be
  executed when clicked on with specified mouse buttons. This tag\ncan be nested,
  allowing different commands to be run depending on button clicked.\n\n## The `commands`
  Configuration Option\n\nThe `commands` configuration option is a list of commands
  information\nand arguments to be used by xmobar when parsing the output template.\nEach
  member of the list consists in a command prefixed by the `Run`\nkeyword. Each command
  has arguments to control the way xmobar is going\nto execute it.\n\nThe option consists
  in a list of commands separated by a comma and\nenclosed by square parenthesis.\n\nExample:\n\n
  \   [Run Memory [\"-t\",\"Mem: <usedratio>%\"] 10, Run Swap [] 10]\n\nto run the
  Memory monitor plugin with the specified template, and the\nswap monitor plugin,
  with default options, every second.  And here's\nan example of a template for the
  commands above using an icon:\n\n    template=\"<icon=/home/jao/.xmobar/mem.xbm/><memory>
  <swap>\"\n\nThis example will run \"xclock\" command when date is clicked:\n\n    template=\"<action=`xclock`>%date%</action>\n\nThe
  only internal available command is `Com` (see below Executing\nExternal Commands).
  All other commands are provided by plugins. xmobar\ncomes with some plugins, providing
  a set of system monitors, a\nstandard input reader, an Unix named pipe reader, a
  configurable date\nplugin, and much more: we list all available plugins below.\n\nOther
  commands can be created as plugins with the Plugin\ninfrastructure. See below.\n\n##
  System Monitor Plugins\n\nThis is the description of the system monitor plugins
  available in\nxmobar.  Some of them are only installed when an optional build option\nis
  set: we mention that fact, when needed, in their description.\n\nEach monitor has
  an `alias` to be used in the output template.\nMonitors have default aliases.  The
  sections below describe every\nmonitor in turn, but before we provide a list of
  the configuration\noptions (or *monitor arguments*) they all share.\n\n### Icon
  patterns\n\nSome monitors allow usage of strings that depend on some integer value\nfrom
  0 to 8 by replacing all occurrences of `\"%%\"` with it\n(i.e. `\"<icon=/path/to/icon_%%.xpm/>\"`
  will be interpreted\nas `\"<icon=/path/to/icon_3.xpm/>\"` when the value is `3`,
  also `\"%\"` is interpreted\nas `\"%\"`, `\"%%\"` as `\"3\"`, `\"%%%\"` as `\"3%\"`,
  `\"%%%%\"` as `\"33\"` and so on). Essentially\nit allows to replace vertical bars
  with custom icons. For example,\n\n    Run Brightness\n      [ \"-t\", \"<ipat>\"\n
  \     , \"--\"\n      , \"--brightness-icon-pattern\", \"<icon=bright_%%.xpm/>\"\n
  \     ] 30\n\nWill display `bright_0.xpm` to `bright_8.xpm` depending on current
  brightness\nvalue.\n\n### Default Monitor Arguments\n\nMonitors accept a common
  set of arguments, described in the first\nsubsection below.  In addition, some monitors
  accept additional options\nthat are specific to them.  When specifying the list
  of arguments in\nyour configuration, the common options come first, followed by
  \"--\",\nfollowed by any monitor-specific options.\n\nThese are the options available
  for all monitors below:\n\n- `-t` _string_  Output template\n    - Template for
  the monitor output. Field names must be enclosed\n      between pointy brackets
  (`<foo>`) and will be substituted by the\n      computed values. You can also specify
  the foreground (and\n      optionally, background) color for a region by bracketing
  it\n      between `<fc=fgcolor>` (or `<fc=fgcolor,bgcolor>`) and\n      `</fc>`.
  The rest of the template is output verbatim.\n    - Long option: `--template`\n
  \   - Default value: per monitor (see above).\n- `-H` _number_ The high threshold.\n
  \   - Numerical values higher than _number_ will be displayed with the\n      color
  specified by `-h` (see below).\n    - Long option: `--High`\n    - Default value:
  66\n- `-L` _number_ The low threshold.\n    - Numerical values higher than _number_
  and lower than the high\n      threshold will be displayed with the color specified
  by `-n`\n      (see below). Values lower than _number_ will use the `-l` color.\n
  \   - Long option: `--Low`\n    - Default value: 33\n- `-h` _color_  High threshold
  color.\n    - Color for displaying values above the high threshold. _color_ can\n
  \     be either a name (e.g. \"blue\") or an hexadecimal RGB (e.g.\n      \"#FF0000\").\n
  \   - Long option: `--high`\n    - Default: none (use the default foreground).\n-
  `-n` _color_  Color for 'normal' values\n    - Color used for values greater than
  the low threshold but lower\n      than the high one.\n    - Long option: `--normal`\n
  \   - Default: none (use the default foreground).\n- `-l` _color_  The low threshold
  color\n    - Color for displaying values below the low threshold.\n    - Long option:
  `--low`\n    - Default: none (use the default foreground).\n- `-S` _boolean_ Display
  optional suffixes\n    - When set to a true designator (\"True\", \"Yes\" or \"On\"),
  optional\n      value suffixes such as the '%' symbol or optional units will be\n
  \     displayed.\n    - Long option: `--suffix`\n    - Default: False.\n- `-p` _number_
  Percentages padding\n    - Width, in number of digits, for quantities representing\n
  \     percentages. For instance `-p 3` means that all percentages\n      in the
  monitor will be represented using 3 digits.\n    - Long option: `--ppad`\n    -
  Default value: 0 (don't pad)\n- `-d` _number_ Decimal digits\n    - Number of digits
  after the decimal period to use in float values.\n    - Long option: `--ddigits`\n
  \   - Default value: 0 (display only integer part)\n- `-m` _number_ Minimum field
  width\n    - Minimum width, in number of characters, of the fields in the\n      monitor
  template. Values whose printed representation is shorter\n      than this value
  will be padded using the padding characters\n      given by the `-c` option with
  the alignment specified by `-a`\n      (see below).\n    - Long option: `--minwidth`\n
  \   - Default: 0\n- `-M` _number_ Maximum field width\n    - Maximum width, in number
  of characters, of the fields in the\n      monitor template. Values whose printed
  representation is longer\n      than this value will be truncated.\n    - Long option:
  `--maxwidth`\n    - Default: 0 (no maximum width)\n- `-e` _string_ Maximum width
  ellipsis\n    - Ellipsis to be added to the field when it has reached its\n      max
  width.\n    - Long option: `--maxwidthellipsis`\n    - Default: \"\" (no ellipsis)\n-
  `-w` _number_ Fixed field width\n    - All fields will be set to this width, padding
  or truncating as\n      needed.\n    - Long option: `--width`\n    - Default: 0
  (variable width)\n- `-T` _number_ Maximum total width\n    - Maximum total width
  of the text.\n    - Long option: `--maxtwidth`\n    - Default: 0 (no limit)\n- `-E`
  _string_ Maximum total width ellipsis\n    - Ellipsis to be added to the total text
  when it has reached\n      its max width.\n    - Long option: `--maxtwidthellipsis`\n
  \   - Default: \"\" (no ellipsis)\n- `-c` _string_\n    - Characters used for padding.
  The characters of _string_ are used\n      cyclically. E.g., with `-P +- -w 6`,
  a field with value \"foo\"\n      will be represented as \"+-+foo\".\n    - Long
  option: `--padchars`\n    - Default value: \" \"\n- `-a` r|l Field alignment\n    -
  Whether to use right (r) or left (l) alignment of field values\n      when padding.\n
  \   - Long option: `--align`\n    - Default value: r (padding to the left)\n- `-b`
  _string_ Bar background\n    - Characters used, cyclically, to draw the background
  of bars.\n      For instance, if you set this option to \"·.\", an empty bar will\n
  \     look like this: `·.·.·.·.·.`\n    - Long option: `--bback`\n    - Default
  value: \":\"\n- `-f` _string_ Bar foreground\n    - Characters used, cyclically,
  to draw the foreground of bars.\n    - Long option: `--bfore`\n    - Default value:
  \"#\"\n- `-W` _number_ Bar width\n    - Total number of characters used to draw
  bars.\n    - Long option: `--bwidth`\n    - Default value: 10\n- `-x` _string_ N/A
  string\n    - String to be used when the monitor is not available\n    - Long option:
  `--nastring`\n    - Default value: \"N/A\"\n\nCommands' arguments must be set as
  a list. E.g.:\n\n    Run Weather \"EGPF\" [\"-t\", \"<station>: <tempC>C\"] 36000\n\nIn
  this case xmobar will run the weather monitor, getting information\nfor the weather
  station ID EGPF (Glasgow Airport, as a homage to GHC)\nevery hour (36000 tenth of
  seconds), with a template that will output\nsomething like:\n\n    Glasgow Airport:
  16.0C\n\n\n### `Uptime Args RefreshRate`\n\n- Aliases to `uptime`\n- Args: default
  monitor arguments. The low and high\n  thresholds refer to the number of days.\n-
  Variables that can be used with the `-t`/`--template` argument:\n  `days`, `hours`,
  `minutes`, `seconds`. The total uptime is the\n  sum of all those fields. You can
  set the `-S` argument to \"True\"\n  to add units to the display of those numeric
  fields.\n- Default template: `Up: <days>d <hours>h <minutes>m`\n\n### `Weather StationID
  Args RefreshRate`\n\n- Aliases to the Station ID: so `Weather \"LIPB\" []` can be
  used in\n  template as `%LIPB%`\n- Thresholds refer to temperature in the selected
  units\n- Args: default monitor arguments\n- Variables that can be used with the
  `-t`/`--template` argument:\n\t    `station`, `stationState`, `year`, `month`, `day`,
  `hour`,\n\t    `windCardinal`, `windAzimuth`, `windMph`, `windKnots`, `windMs`,
  `windKmh`\n        `visibility`, `skyCondition`, `tempC`, `tempF`,\n\t    `dewPointC`,
  `dewPointF`, `rh`, `pressure`\n- Default template: `<station>: <tempC>C, rh <rh>%
  (<hour>)`\n- Retrieves weather information from http://tgftp.nws.noaa.gov.\n\n###
  `Network Interface Args RefreshRate`\n\n- Aliases to the interface name: so `Network
  \"eth0\" []` can be used as\n  `%eth0%`\n- Thresholds refer to velocities expressed
  in Kb/s\n- Args: default monitor arguments, plus:\n  - `--rx-icon-pattern`: dynamic
  string for reception rate in `rxipat`.\n  - `--tx-icon-pattern`: dynamic string
  for transmission rate in `txipat`.\n- Variables that can be used with the `-t`/`--template`
  argument:\n  `dev`, `rx`, `tx`, `rxbar`, `rxvbar`, `rxipat`, `txbar`, `txvbar`,\n
  \ `txipat`. Reception and transmission rates (`rx` and `tx`) are displayed\n  by
  default as Kb/s, without any suffixes, but you can set the `-S` to\n  \"True\" to
  make them displayed with adaptive units (Kb/s, Mb/s, etc.).\n- Default template:
  `<dev>: <rx>KB|<tx>KB`\n\n### `DynNetwork Args RefreshRate`\n\n- Active interface
  is detected automatically\n- Aliases to \"dynnetwork\"\n- Thresholds are expressed
  in Kb/s\n- Args: default monitor arguments, plus:\n  - `--rx-icon-pattern`: dynamic
  string for reception rate in `rxipat`.\n  - `--tx-icon-pattern`: dynamic string
  for transmission rate in `txipat`.\n- Variables that can be used with the `-t`/`--template`
  argument:\n  `dev`, `rx`, `tx`, `rxbar`, `rxvbar`, `rxipat`, `txbar`, `txvbar`,\n
  \ `txipat`. Reception and transmission rates (`rx` and `tx`) are displayed\n  in
  Kbytes per second, and you can set the `-S` to \"True\" to make them\n  displayed
  with units (the string \"Kb/s\").\n- Default template: `<dev>: <rx>KB|<tx>KB`\n\n###
  `Wireless Interface Args RefreshRate`\n\n- If set to \"\", the interface is looked
  up in /proc/net/wireless.\n- Aliases to the interface name with the suffix \"wi\":
  thus, `Wireless\n  \"wlan0\" []` can be used as `%wlan0wi%`, and `Wireless \"\"
  []` as `%wi%`.\n- Args: default monitor arguments, plus:\n  - `--quality-icon-pattern`:
  dynamic string for connection quality in `qualityipat`.\n- Variables that can be
  used with the `-t`/`--template` argument:\n            `essid`, `quality`, `qualitybar`,
  `qualityvbar`, `qualityipat`\n- Thresholds refer to link quality in a `[0, 100]`
  scale\n- Default template: `<essid> <quality>`\n- Requires the C library [iwlib]
  (part of the wireless tools suite)\n  installed in your system. In addition, to
  activate this plugin you\n  must pass `--flags=\"with_iwlib\"` during compilation\n\n###
  `Memory Args RefreshRate`\n\n- Aliases to `memory`\n- Args: default monitor arguments,
  plus:\n  - `--used-icon-pattern`: dynamic string for used memory ratio in `usedipat`.\n
  \ - `--free-icon-pattern`: dynamic string for free memory ratio in `freeipat`.\n
  \ - `--available-icon-pattern`: dynamic string for available memory ratio in `availableipat`.\n-
  Thresholds refer to percentage of used memory\n- Variables that can be used with
  the `-t`/`--template` argument:\n             `total`, `free`, `buffer`, `cache`,
  `available`, `used`,\n             `usedratio`, `usedbar`, `usedvbar`, `usedipat`,\n
  \            `freeratio`, `freebar`, `freevbar`, `freeipat`,\n             `availableratio`,
  `availablebar`, `availablevbar`, `availableipat`\n- Default template: `Mem: <usedratio>%
  (<cache>M)`\n\n### `Swap Args RefreshRate`\n\n- Aliases to `swap`\n- Args: default
  monitor arguments\n- Thresholds refer to percentage of used swap\n- Variables that
  can be used with the `-t`/`--template` argument:\n\t    `total`, `used`, `free`,
  `usedratio`\n- Default template: `Swap: <usedratio>%`\n\n### `Cpu Args RefreshRate`\n\n-
  Aliases to `cpu`\n- Args: default monitor arguments, plus:\n  - `--load-icon-pattern`:
  dynamic string for cpu load in `ipat`\n- Thresholds refer to percentage of CPU load\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `total`,
  `bar`, `vbar`, `ipat`, `user`, `nice`, `system`, `idle`, `iowait`\n- Default template:
  `Cpu: <total>%`\n\n### `MultiCpu Args RefreshRate`\n\n- Aliases to `multicpu`\n-
  Args: default monitor arguments, plus:\n  - `--load-icon-pattern`: dynamic string
  for overall cpu load in `ipat`.\n  - `--load-icon-patterns`: dynamic string for
  each cpu load in `autoipat`, `ipat{i}`.\n                              This option
  can be specified several times. nth option\n                              corresponds
  to nth cpu.\n  - `--fallback-icon-pattern`: dynamic string used by `autoipat` and
  `ipat{i}` when no\n                             `--load-icon-patterns` has been
  provided for `cpu{i}`\n- Thresholds refer to percentage of CPU load\n- Variables
  that can be used with the `-t`/`--template` argument:\n\t    `autototal`, `autobar`,
  `autovbar`, `autoipat`, `autouser`, `autonice`,\n\t    `autosystem`, `autoidle`,
  `total`, `bar`, `vbar`, `ipat`, `user`, `nice`,\n\t    `system`, `idle`, `total0`,
  `bar0`, `vbar0`, `ipat0`, `user0`, `nice0`,\n\t    `system0`, `idle0`, ...\n  The
  auto* variables automatically detect the number of CPUs on the system\n  and display
  one entry for each.\n- Default template: `Cpu: <total>%`\n\n### `Battery Args RefreshRate`\n\n-
  Same as `BatteryP [\"BAT\", \"BAT0\", \"BAT1\", \"BAT2\"] Args RefreshRate`.\n\n###
  `BatteryP Dirs Args RefreshRate`\n\n- Aliases to `battery`\n\n- Dirs: list of directories
  in `/sys/class/power_supply/` where to\n  look for the ACPI files of each battery.
  Example:\n  `[\"BAT0\",\"BAT1\",\"BAT2\"]`. Only up to 3 existing directories will
  be\n  searched.\n\n- Args: default monitor arguments, plus the following specific
  ones\n  (these options, being specific to the monitor, are to be specified\n  after
  a `--` in the argument list):\n  - `-O`: string for AC \"on\" status (default: \"On\")\n
  \ - `-i`: string for AC \"idle\" status (default: \"On\")\n  - `-o`: string for
  AC \"off\" status (default: \"Off\")\n  - `-L`: low power (`watts`) threshold (default:
  10)\n  - `-H`: high power threshold (default: 12)\n  - `-l`: color to display power
  lower than the `-L` threshold\n  - `-m`: color to display power lower than the `-H`
  threshold\n  - `-h`: color to display power higher than the `-H` threshold\n  -
  `-p`: color to display positive power (battery charging)\n  - `-f`: file in `/sys/class/power_supply`
  with AC info (default:\n    \"AC/online\")\n  - `--on-icon-pattern`: dynamic string
  for current battery charge\n    when AC is \"on\" in `leftipat`.\n  - `--off-icon-pattern`:
  dynamic string for current battery charge\n    when AC is \"off\" in `leftipat`.\n
  \ - `--idle-icon-pattern`: dynamic string for current battery charge\n    when AC
  is \"idle\" in `leftipat`.\n\n- Variables that can be used with the `-t`/`--template`
  argument:\n\t    `left`, `leftbar`, `leftvbar`, `leftipat`, `timeleft`, `watts`,
  `acstatus`\n- Default template: `Batt: <watts>, <left>% / <timeleft>`\n- Example
  (note that you need \"--\" to separate regular monitor options from\n  Battery's
  specific ones):\n\n         Run BatteryP [\"BAT0\"]\n                      [\"-t\",
  \"<acstatus><watts> (<left>%)\",\n                       \"-L\", \"10\", \"-H\",
  \"80\", \"-p\", \"3\",\n                       \"--\", \"-O\", \"<fc=green>On</fc>
  - \", \"-i\", \"\",\n                       \"-L\", \"-15\", \"-H\", \"-5\",\n                       \"-l\",
  \"red\", \"-m\", \"blue\", \"-h\", \"green\"]\n                      600\n\n  In
  the above example, the thresholds before the \"--\" separator\n  affect only the
  `<left>` and `<leftbar>` fields, while those after\n  the separator affect how `<watts>`
  is displayed. For this monitor,\n  neither the generic nor the specific options
  have any effect on\n  `<timeleft>`.\n\n  It is also possible to specify template
  variables in the `-O` and\n  `-o` switches, as in the following example:\n\n         Run
  BatteryP [\"BAT0\"]\n                      [\"-t\", \"<acstatus>\"\n                      ,
  \"-L\", \"10\", \"-H\", \"80\"\n                      , \"-l\", \"red\", \"-h\",
  \"green\"\n                      , \"--\", \"-O\", \"Charging\", \"-o\", \"Battery:
  <left>%\"\n                      ] 10\n\n- The \"idle\" AC state is selected whenever
  the AC power entering the\n  battery is zero.\n\n### `BatteryN Dirs Args RefreshRate
  Alias`\n\nWorks like `BatteryP`, but lets you specify an alias for the monitor\nother
  than \"battery\".  Useful in case you one separate monitors for\nmore than one battery.\n\n###
  `TopProc Args RefreshRate`\n\n- Aliases to `top`\n- Args: default monitor arguments.
  The low and high\n  thresholds (`-L` and `-H`) denote, for memory entries, the percent\n
  \ of the process memory over the total amount of memory currently in\n  use and,
  for cpu entries, the activity percentage (i.e., the value\n  of `cpuN`, which takes
  values between 0 and 100).\n- Variables that can be used with the `-t`/`--template`
  argument:\n\t    `no`, `name1`, `cpu1`, `both1`, `mname1`, `mem1`, `mboth1`,\n            `name2`,
  `cpu2`, `both2`, `mname2`, `mem2`, `mboth2`, ...\n- Default template: `<both1>`\n-
  Displays the name and cpu/mem usage of running processes (`bothn`\n  and `mboth`
  display both, and is useful to specify an overall\n  maximum and/or minimum width,
  using the `-m`/`-M` arguments. `no` gives\n  the total number of processes.\n\n###
  `TopMem Args RefreshRate`\n\n- Aliases to `topmem`\n- Args: default monitor arguments.
  The low and high\n  thresholds (`-L` and `-H`) denote the percent of the process
  memory\n  over the total amount of memory currently in use.\n- Variables that can
  be used with the `-t`/`--template` argument:\n\t    `name1`, `mem1`, `both1`, `name2`,
  `mem2`, `both2`, ...\n- Default template: `<both1>`\n- Displays the name and RSS
  (resident memory size) of running\n  processes (`bothn` displays both, and is useful
  to specify an\n  overall maximum and/or minimum width, using the `-m`/`-M` arguments.\n\n###
  `DiskU Disks Args RefreshRate`\n\n- Aliases to `disku`\n- Disks: list of pairs of
  the form (device or mount point, template),\n  where the template can contain `<size>`,
  `<free>`, `<used>`, `<freep>` or\n  `<usedp>`, `<freebar>`, `<freevbar>`, `<freeipat>`,
  `<usedbar>`,\n  `<usedvbar>` or `<usedipat>` for total, free, used, free percentage
  and\n  used percentage of the given file system capacity.\n- Thresholds refer to
  usage percentage.\n- Args: default monitor arguments. `-t`/`--template` is ignored.
  Plus\n  - `--free-icon-pattern`: dynamic string for free disk space in `freeipat`.\n
  \ - `--used-icon-pattern`: dynamic string for used disk space in `usedipat`.\n-
  Default template: none (you must specify a template for each file system).\n- Example:\n\n
  \        DiskU [(\"/\", \"<used>/<size>\"), (\"sdb1\", \"<usedbar>\")]\n               [\"-L\",
  \"20\", \"-H\", \"50\", \"-m\", \"1\", \"-p\", \"3\"]\n               20\n\n###
  `DiskIO Disks Args RefreshRate`\n\n- Aliases to `diskio`\n- Disks: list of pairs
  of the form (device or mount point, template),\n  where the template can contain
  `<total>`, `<read>`, `<write>` for total,\n  read and write speed, respectively.
  There are also bar versions of each:\n  `<totalbar>`, `<totalvbar>`, `<totalipat>`,\n
  \ `<readbar>`, `<readvbar>`, `<readipat>`,\n  `<writebar>`, `<writevbar>`, and `<writeipat>`.\n-
  Thresholds refer to speed in b/s\n- Args: default monitor arguments. `-t`/`--template`
  is ignored. Plus\n  - `--total-icon-pattern`: dynamic string for total disk I/O
  in `<totalipat>`.\n  - `--write-icon-pattern`: dynamic string for write disk I/O
  in `<writeipat>`.\n  - `--read-icon-pattern`: dynamic string for read disk I/O in
  `<readipat>`.\n- Default template: none (you must specify a template for each file
  system).\n- Example:\n\n         DiskIO [(\"/\", \"<read> <write>\"), (\"sdb1\",
  \"<total>\")] [] 10\n\n### `ThermalZone Number Args RefreshRate`\n\n- Aliases to
  \"thermaln\": so `ThermalZone 0 []` can be used in template\n  as `%thermal0%`\n-
  Thresholds refer to temperature in degrees\n- Args: default monitor arguments\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `temp`\n-
  Default template: `<temp>C`\n- This plugin works only on systems with devices having
  thermal zone.\n  Check directories in `/sys/class/thermal` for possible values of
  the\n  zone number (e.g., 0 corresponds to `thermal_zone0` in that\n  directory).\n-
  Example:\n\n         Run ThermalZone 0 [\"-t\",\"<id>: <temp>C\"] 30\n\n#### `Thermal
  Zone Args RefreshRate`\n\n- **This plugin is deprecated. Use `ThermalZone` instead.**\n\n-
  Aliases to the Zone: so `Thermal \"THRM\" []` can be used in template\n  as `%THRM%`\n-
  Args: default monitor arguments\n- Thresholds refer to temperature in degrees\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `temp`\n-
  Default template: `Thm: <temp>C`\n- This plugin works only on systems with devices
  having thermal zone.\n  Check directories in /proc/acpi/thermal_zone for possible
  values.\n- Example:\n\n         Run Thermal \"THRM\" [\"-t\",\"iwl4965-temp: <temp>C\"]
  50\n\n### `CpuFreq Args RefreshRate`\n\n- Aliases to `cpufreq`\n- Args: default
  monitor arguments\n- Thresholds refer to frequency in GHz\n- Variables that can
  be used with the `-t`/`--template` argument:\n\t    `cpu0`, `cpu1`, ..,  `cpuN`\n-
  Default template: `Freq: <cpu0>GHz`\n- This monitor requires acpi_cpufreq module
  to be loaded in kernel\n- Example:\n\n         Run CpuFreq [\"-t\", \"Freq:<cpu0>|<cpu1>GHz\",
  \"-L\", \"0\", \"-H\", \"2\",\n                      \"-l\", \"lightblue\", \"-n\",\"white\",
  \"-h\", \"red\"] 50\n\n### `CoreTemp Args RefreshRate`\n\n- Aliases to `coretemp`\n-
  Args: default monitor arguments\n- Thresholds refer to temperature in degrees\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `core0`,
  `core1`, ..,  `coreN`\n- Default template: `Temp: <core0>C`\n- This monitor requires
  coretemp module to be loaded in kernel\n- Example:\n\n         Run CoreTemp [\"-t\",
  \"Temp:<core0>|<core1>C\",\n                       \"-L\", \"40\", \"-H\", \"60\",\n
  \                      \"-l\", \"lightblue\", \"-n\", \"gray90\", \"-h\", \"red\"]
  50\n\n### `Volume Mixer Element Args RefreshRate`\n\n- Aliases to the mixer name
  and element name separated by a colon. Thus,\n  `Volume \"default\" \"Master\" []
  10` can be used as `%default:Master%`.\n- Args: default monitor arguments. Also
  accepts:\n    - `-O` _string_ On string\n        - The string used in place of `<status>`
  when the mixer element\n          is on. Defaults to \"[on]\".\n        - Long option:
  `--on`\n    - `-o` _string_ Off string\n        - The string used in place of `<status>`
  when the mixer element\n          is off. Defaults to \"[off]\".\n        - Long
  option: `--off`\n    - `-C` _color_ On color\n        - The color to be used for
  `<status>` when the mixer element\n          is on. Defaults to \"green\".\n        -
  Long option: `--onc`\n    - `-c` _color_ Off color\n        - The color to be used
  for `<status>` when the mixer element\n          is off. Defaults to \"red\".\n
  \       - Long option: `--offc`\n    - `--highd` _number_ High threshold for dB.
  Defaults to -5.0.\n    - `--lowd` _number_ Low threshold for dB. Defaults to -30.0.\n
  \   - `--volume-icon-pattern` _string_ dynamic string for current volume in `volumeipat`.\n-
  Variables that can be used with the `-t`/`--template` argument:\n            `volume`,
  `volumebar`, `volumevbar`, `volumeipat`, `dB`, `status`\n- Note that `dB` might
  only return 0 on your system. This is known\n  to happen on systems with a pulseaudio
  backend.\n- Default template: `Vol: <volume>% <status>`\n- Requires the package
  [alsa-core] and [alsa-mixer] installed in your\n  system. In addition, to activate
  this plugin you must pass\n  `--flags=\"with_alsa\"` during compilation.\n\n###
  `Alsa Mixer Element Args`\n\nLike [Volume](#volume-mixer-element-args-refreshrate),
  but with the following differences:\n- Uses event-based refreshing via `alsactl
  monitor` instead of polling, so it will refresh\n  instantly when there's a volume
  change, and won't use CPU until a change happens.\n- Aliases to `alsa:` followed
  by the mixer name and element name separated by a colon. Thus,\n  `Alsa \"default\"
  \"Master\" []` can be used as `%alsa:default:Master%`.\n- Additional options (after
  the `--`):\n    - `--alsactl=/path/to/alsactl`\n        - If this option is not
  specified, `alsactl` will be sought in your `PATH`\n          first, and failing
  that, at `/usr/sbin/alsactl` (this is its location on\n          Debian systems.
  `alsactl monitor` works as a non-root user despite living\n          in `/usr/sbin`.).\n-
  `stdbuf` (from coreutils) must be (and most probably already is) in your `PATH`.\n\n###
  `MPD Args RefreshRate`\n\n- This monitor will only be compiled if you ask for it
  using the\n  `with_mpd` flag. It needs [libmpd] 5.0 or later (available on Hackage).\n-
  Aliases to `mpd`\n- Args: default monitor arguments. In addition you can provide\n
  \ `-P`, `-S` and `-Z`, with an string argument, to represent the\n  playing, stopped
  and paused states in the `statei` template field.\n  The environment variables `MPD_HOST`
  and `MPD_PORT` are used to configure the\n  mpd server to communicate with. Also
  available:\n  - `lapsed-icon-pattern`: dynamic string for current track position
  in `ipat`.\n- Variables that can be used with the `-t`/`--template` argument:\n
  \            `bar`, `vbar`, `ipat`, `state`, `statei`, `volume`, `length`,\n             `lapsed`,
  `remaining`,\n             `plength` (playlist length), `ppos` (playlist position),\n
  \            `flags` (ncmpcpp-style playback mode),\n             `name`, `artist`,
  `composer`, `performer`,\n             `album`, `title`, `track`, `file`, `genre`,
  `date`\n- Default template: `MPD: <state>`\n- Example (note that you need \"--\"
  to separate regular monitor options from\n  MPD's specific ones):\n\n         Run
  MPD [\"-t\",\n                  \"<composer> <title> (<album>) <track>/<plength>
  <statei> [<flags>]\",\n                  \"--\", \"-P\", \">>\", \"-Z\", \"|\",
  \"-S\", \"><\"] 10\n\n### `Mpris1 PlayerName Args RefreshRate`\n\n- Aliases to `mpris1`\n-
  Requires [dbus] and [text] packages.\n  To activate, pass `--flags=\"with_mpris\"`
  during compilation.\n- PlayerName: player supporting MPRIS v1 protocol.  Some players
  need\n  this to be an all lowercase name (e.g. \"spotify\"), but some others\n  don't.\n-
  Args: default monitor arguments.\n- Variables that can be used with the `-t`/`--template`
  argument:\n            `album`, `artist`, `arturl`, `length`, `title`, `tracknumber`\n-
  Default template: `<artist> - <title>`\n- Example:\n\n         Run Mpris1 \"clementine\"
  [\"-t\", \"<artist> - [<tracknumber>] <title>\"] 10\n\n### `Mpris2 PlayerName Args
  RefreshRate`\n\n- Aliases to `mpris2`\n- Requires [dbus] and [text] packages.\n
  \ To activate, pass `--flags=\"with_mpris\"` during compilation.\n- PlayerName:
  player supporting MPRIS v2 protocol.  Some players need\n  this to be an all lowercase
  name (e.g. \"spotify\"), but some others\n  don't.\n- Args: default monitor arguments.\n-
  Variables that can be used with the `-t`/`--template` argument:\n            `album`,
  `artist`, `arturl`, `length`, `title`,\n            `tracknumber`, `composer`, `genre`\n-
  Default template: `<artist> - <title>`\n- Example:\n\n         Run Mpris2 \"spotify\"
  [\"-t\", \"<artist> - [<composer>] <title>\"] 10\n\n### `Mail Args Alias`\n\n- Args:
  list of maildirs in form\n  `[(\"name1\",\"path1\"),...]`. Paths may start with
  a '~'\n  to expand to the user's home directory.\n- This plugin requires inotify
  support in your Linux kernel and the\n  [hinotify] package. To activate, pass `--flags=\"with_inotify\"`\n
  \ during compilation.\n- Example:\n\n         Run Mail [(\"inbox\", \"~/var/mail/inbox\"),\n
  \                  (\"lists\", \"~/var/mail/lists\")]\n                  \"mail\"\n\n###
  `MBox Mboxes Opts Alias`\n\n- Mboxes a list of mbox files of the form `[(\"name\",
  \"path\", \"color\")]`,\n  where name is the displayed name, path the absolute or
  relative (to\n  BaseDir) path of the mbox file, and color the color to use to display\n
  \ the mail count (use an empty string for the default).\n- Opts is a possibly empty
  list of options, as flags. Possible values:\n   -a  --all (no arg)  Show all mailboxes,
  even if empty.\n   -u (no arg) Show only the mailboxes' names, sans counts.\n   -d
  dir  --dir dir a string giving the base directory where mbox files with\n                     a
  relative path live.\n   -p prefix --prefix prefix  a string giving a prefix for
  the list\n                      of displayed mail counts\n   -s suffix --suffix
  suffix  a string giving a suffix for the list\n                      of displayed
  mail counts\n- Paths may start with a '~' to expand to the user's home directory.\n-
  This plugin requires inotify support in your Linux kernel and the\n  [hinotify]
  package. To activate, pass `--flags=\"with_inotify\"`\n  during compilation.\n-
  Example. The following command look for mails in `/var/mail/inbox`\n  and `~/foo/mbox`,
  and will put a space in front of the printed string\n  (when it's not empty); it
  can be used in the template with the alias\n  `mbox`:\n\n         Run MBox [(\"I
  \", \"inbox\", \"red\"), (\"O \", \"~/foo/mbox\", \"\")]\n                  [\"-d\",
  \"/var/mail/\", \"-p\", \" \"] \"mbox\"\n\n### `XPropertyLog PropName`\n\n- Aliases
  to `PropName`\n- Reads the X property named by `PropName` (a string) and displays
  its\n  value. The [examples/xmonadpropwrite.hs script] in xmobar's\n  distribution
  can be used to set the given property from the output\n  of any other program or
  script.\n\n[examples/xmonadpropwrite.hs script]: https://github.com/jaor/xmobar/raw/master/examples/xmonadpropwrite.hs\n\n###
  `UnsafeXPropertyLog PropName`\n\n- Aliases to `PropName`\n- Same as `XPropertyLog`,
  but the input is not filtered to avoid\n  injection of actions (cf. `UnsafeXMonadLog`).
  \ The program writing\n  the value of the read property is responsible of performing
  any\n  needed cleanups.\n\n### `NamedXPropertyLog PropName Alias`\n\n- Aliases to
  `Alias`\n- Same as `XPropertyLog`, but a custom alias can be specified.\n\n### `NamedXPropertyLog
  PropName Alias`\n\n- Aliases to `Alias`\n- Same as `UnsafeXPropertyLog`, but a custom
  alias can be specified.\n\n### `Brightness Args RefreshRate`\n\n- Aliases to `bright`\n-
  Args: default monitor arguments, plus the following specif ones:\n    - `-D`: directory
  in `/sys/class/backlight/` with files in it\n       (default: \"acpi_video0\")\n
  \   - `-C`: file with the current brightness (default:\n       actual_brightness)\n
  \   - `-M`: file with the maximum brightness (default:\n       max_brightness)\n
  \   - `--brightness-icon-pattern`: dynamic string for current brightness in `ipat`.\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `vbar`, `percent`,
  `bar`, `ipat`\n- Default template: `<percent>`\n- Example:\n\n       Run Brightness
  [\"-t\", \"<bar>\"] 60\n\n### `Kbd Opts`\n\n- Registers to XKB/X11-Events and output
  the currently active keyboard layout.\n  Supports replacement of layout names.\n-
  Aliases to `kbd`\n- Opts is a list of tuples:\n    -  first element of the tuple
  is the search string\n    -  second element of the tuple is the corresponding replacement\n-
  Example:\n\n\t\tRun Kbd [(\"us(dvorak)\", \"DV\"), (\"us\", \"US\")]\n\n### `Locks`\n\n-
  Displays the status of Caps Lock, Num Lock and Scroll Lock.\n- Aliases to `locks`\n-
  Example:\n\n\tRun Locks\n\n### `CatInt n filename`\n\n- Reads and displays an integer
  from the file whose path is `filename`\n  (especially useful with files in `/sys`).\n-
  Aliases as `catn` (e.g. `Cat 0` as `cat0`, etc.) so you can\n  have several.\n-
  Example:\n\n    Run CatInt 0 \"/sys/devices/platform/thinkpad_hwmon/fan1_input\"
  [] 50\n\n### `UVMeter`\n\n- Aliases to \"uv \" + station id. For example: `%uv brisbane%`
  or `%uv\n  alice springs%`\n- Args: default monitor arguments.\n\n- *Reminder:*
  Keep the refresh rate high, to avoid making unnecessary\n  requests every time the
  plug-in is run.\n- Station IDs can be found here:\n  http://www.arpansa.gov.au/uvindex/realtime/xml/uvvalues.xml\n-
  Example:\n\n        Run UVMeter \"brisbane\" [\"-H\", \"3\", \"-L\", \"3\", \"--low\",
  \"green\", \"--high\", \"red\"] 900\n\n## Executing External Commands\n\nIn order
  to execute an external command you can either write the\ncommand name in the template,
  in this case it will be executed without\narguments, or you can configure it in
  the \"commands\" configuration\noption list with the Com template command:\n\n`Com
  ProgramName Args Alias RefreshRate`\n\n- ProgramName: the name of the program\n-
  Args: the arguments to be passed to the program at execution time\n- RefreshRate:
  number of tenths of second between re-runs of the\n  command. A zero or negative
  rate means that the command will be\n  executed only once.\n- Alias: a name to be
  used in the template. If the alias is en empty\n  string the program name can be
  used in the template.\n\nE.g.:\n\n        Run Com \"uname\" [\"-s\",\"-r\"] \"\"
  0\n\ncan be used in the output template as `%uname%` (and xmobar will call\n_uname_
  only once), while\n\n        Run Com \"date\" [\"+\\\"%a %b %_d %H:%M\\\"\"] \"mydate\"
  600\n\ncan be used in the output template as `%mydate%`.\n\nSometimes, you don't
  mind if the command executed exits with an error,\nor you might want to display
  a custom message in that case.  To that\nend, you can use the `ComX` variant:\n\n`ComX
  ProgramName Args ExitMessage Alias RefreshRate`\n\nWorks like `Com`, but displaying
  `ExitMessage` (a string) if the\nexecution fails.  For instance:\n\n        Run
  ComX \"date\" [\"+\\\"%a %b %_d %H:%M\\\"\"] \"N/A\" \"mydate\" 600\n\nwill display
  \"N/A\" if for some reason the `date` invocation fails.\n\n## Other Plugins\n\n<font
  size=\"+1\">**`StdinReader`**</font>\n\n- Aliases to StdinReader\n- Displays any
  text received by xmobar on its standard input.\n- Strips actions from the text received.
  \ This means you can't pass dynamic\n  actions via stdin.  This is safer than `UnsafeStdinReader`
  because there is\n  no need to escape the content before passing it to xmobar's
  standard input.\n\n<font size=\"+1\">**`UnsafeStdinReader`**</font>\n\n- Aliases
  to UnsafeStdinReader\n- Displays any text received by xmobar on its standard input.\n-
  Will not do anything to the text received.  This means you can pass dynamic\n  actions
  via stdin.  Be careful to remove tags from dynamic text that you\n  pipe-thru to
  xmobar's standard input, e.g. window's title.  There is no way\n  to escape the
  tags, i.e. you can't print a literal `<action>` tag as a text\n  on xmobar.\n- Sample
  usage: send to xmobar's stdin the list of your workspaces enclosed by\n  actions
  tags that switches the workspaces to be able to switch workspaces by\n  clicking
  on xmobar:\n  ```<action=`xdotool key alt+1`>ws1</action> <action=`xdotool key alt+1`>ws2</action>```\n\n<font
  size=\"+1\">**`Date Format Alias RefreshRate`**</font>\n\n- Format is a time format
  string, as accepted by the standard ISO C\n  `strftime` function (or Haskell's `formatCalendarTime`).\n-
  Sample usage: `Run Date \"%a %b %_d %Y <fc=#ee9a00>%H:%M:%S</fc>\" \"date\" 10`\n\n<font
  size=\"+1\">**`DateZone Format Locale Zone Alias RefreshRate`**</font>\n\n- Format
  is a time format string, as accepted by the standard ISO C\n  `strftime` function
  (or Haskell's `formatCalendarTime`).\n- If Locale is \"\" the default locale of
  the system is used, otherwise the given\n  locale. If there are more instances of
  DateZone, using \"\" as input for Locale\n  is not recommended.\n- Zone is the name
  of the TimeZone. It is assumed that the tz database is stored\n  in /usr/share/zoneinfo/.
  If \"\" is given as Zone, the default system time is\n  used.\n- Sample usage:\n
  \ `Run DateZone \"%a %H:%M:%S\" \"de_DE.UTF-8\" \"Europe/Vienna\" \"viennaTime\"
  10`\n\n<font size=\"+1\">**`CommandReader \"/path/to/program\" Alias`**</font>\n\n-
  Runs the given program, and displays its standard output.\n\n<font size=\"+1\">**`PipeReader
  \"default text:/path/to/pipe\" Alias`**</font>\n\n- Reads its displayed output from
  the given pipe.\n- Prefix an optional default text separated by a colon\n- Expands
  environment variables in the first argument of syntax '${VAR}' or '$VAR'\n\n<font
  size=\"+1\">**`MarqueePipeReader \"default text:/path/to/pipe\" (length, rate, sep)
  Alias`**</font>\n\n- Generally equivalent to PipeReader\n- Text is displayed as
  marquee with the specified length, rate in 10th\n  seconds and separator when it
  wraps around\n\n        Run MarqueePipeReader \"/tmp/testpipe\" (10, 7, \"+\") \"mpipe\"\n\n-
  Expands environment variables in the first argument\n\n<font size=\"+1\">\n**`BufferedPipeReader
  Alias [(Timeout, Bool, \"/path/to/pipe1\"), ..]`**\n</font>\n\n- Display data from
  multiple pipes.\n- Timeout (in tenth of seconds) is the value after which the previous\n
  \ content is restored i.e. if there was already something from a\n  previous pipe
  it will be put on display again, overwriting the\n  current status.\n- A pipe with
  Timeout of 0 will be displayed permanently, just like\n  `PipeReader`\n- The boolean
  option indicates whether new data for this pipe should\n  make xmobar appear (unhide,
  reveal). In this case, the Timeout\n  additionally specifies when the window should
  be hidden again. The\n  output is restored in any case.\n- Use it for OSD-like status
  bars e.g. for setting the volume or\n  brightness:\n\n        Run BufferedPipeReader
  \"bpr\"\n            [ (  0, False, \"/tmp/xmobar_window\"  )\n            , ( 15,
  \ True, \"/tmp/xmobar_status\"  )\n            ]\n\n  Have your window manager send
  window titles to\n  `\"/tmp/xmobar_window\"`. They will always be shown and not
  reveal\n  your xmobar.  Sending some status information to\n  `\"/tmp/xmobar_status\"`
  will reveal xmonad for 1.5 seconds and\n  temporarily overwrite the window titles.\n-
  Take a look at [examples/status.sh]\n- Expands environment variables for the pipe
  path\n\n[examples/status.sh]: http://github.com/jaor/xmobar/raw/master/examples/status.sh\n\n\n<font
  size=\"+1\">**`XMonadLog`**</font>\n\n- Aliases to XMonadLog\n- Displays information
  from xmonad's `_XMONAD_LOG`. You can set this\n  property by using `xmonadPropLog`
  as your log hook in xmonad's\n  configuration, as in the following example (more
  info [here]):\n\n        main = do\n          spawn \"xmobar\"\n          xmonad
  $ defaultConfig {\n            logHook = dynamicLogString defaultPP >>= xmonadPropLog\n
  \         }\n   This plugin can be used as a sometimes more convenient alternative\n
  \  to `StdinReader`. For instance, it allows you to (re)start xmobar\n   outside
  xmonad.\n\n[here]: http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Hooks-DynamicLog.html\n\n<font
  size=\"+1\">**`UnsafeXMonadLog`**</font>\n\n- Aliases to UnsafeXMonadLog\n- Similar
  to StdinReader versus UnsafeStdinReader, this does not strip `<action\n  ...>` tags
  from XMonad's `_XMONAD_LOG`.\n- It is advised that you still use `xmobarStrip` for
  the ppTitle in your\n  logHook:\n\n        myPP = defaultPP { ppTitle = xmobarStrip
  }\n        main = xmonad $ defaultConfig {\n          logHook = dynamicLogString
  myPP >>= xmonadPropLog\n        }\n\n# Plugins\n\n## Writing a Plugin\n\nWriting
  a plugin for xmobar should be very simple. You need to create\na data type with
  at least one constructor.\n\nNext you must declare this data type an instance of
  the `Exec` class, by\ndefining the 1 needed method (alternatively `start` or `run`)
  and 2\noptional ones (alias and rate):\n\n        start :: e -> (String -> IO ())
  -> IO ()\n        run   :: e -> IO String\n        rate  :: e -> Int\n        alias
  :: e -> String\n\n`start` must receive a callback to be used to display the `String`\nproduced
  by the plugin. This method can be used for plugins that need\nto perform asynchronous
  actions. See `Plugins/PipeReader.hs` for an\nexample.\n\n`run` can be used for simpler
  plugins. If you define only `run` the\nplugin will be run every second. To overwrite
  this default you just\nneed to implement `rate`, which must return the number of
  tenth of\nseconds between every successive runs. See `Plugins/HelloWorld.hs` for\nan
  example of a plugin that runs just once, and `Plugins/Date.hs` for\none that implements
  `rate`.\n\nNotice that Date could be implemented as:\n\n        instance Exec Date
  where\n            alias (Date _ a _) = a\n            start (Date f _ r) = date
  f r\n\n        date :: String -> Int -> (String -> IO ()) -> IO ()\n        date
  format r callback = do go\n            where go = do\n                    t <- toCalendarTime
  =<< getClockTime\n                    callback $ formatCalendarTime defaultTimeLocale
  format t\n                    tenthSeconds r >> go\n\nThis implementation is equivalent
  to the one you can read in\n`Plugins/Date.hs`.\n\n`alias` is the name to be used
  in the output template. Default alias\nwill be the data type constructor.\n\nImplementing
  a plugin requires importing the plugin API (the `Exec`\nclass definition), that
  is exported by `Plugins.hs`. So you just need\nto import it in your module with:\n\n
  \       import Plugins\n\nAfter that your type constructor can be used as an argument
  for the\nRunnable type constructor `Run` in the `commands` list of the\nconfiguration
  options.\n\nThis requires importing your plugin into `Config.hs` and adding your\ntype
  to the type list in the type signature of `Config.runnableTypes`.\n\nFor a very
  basic example see `examples/Plugins/HelloWorld.hs` or the\nother plugins that are
  distributed with xmobar.\n\n## Installing/Removing a Plugin\n\nInstalling a plugin
  should require 3 steps. Here we are going to\ninstall the HelloWorld plugin that
  comes with xmobar, assuming that\nyou copied it to `src/Plugins`:\n\n1. import the
  plugin module in `Config.hs`, by adding:\n\n        import Plugins.HelloWorld\n\n2.
  add the plugin data type to the list of data types in the type\n   signature of
  `runnableTypes` in `Config.hs`. For instance, for the\n   HelloWorld plugin, change
  `runnableTypes` into:\n\n        runnableTypes :: Command :*: Monitors :*: HelloWorld
  :*: ()\n        runnableTypes = undefined\n\n3. Rebuild and reinstall xmobar. Now
  test it with:\n\n        xmobar Plugins/helloworld.config\n\nAs you may see in the
  example configuration file, the plugin can be\nused by adding, in the `commands`
  list:\n\n        Run HelloWorld\n\nand, in the output template, the alias of the
  plugin:\n\n        %helloWorld%\n\nThat's it.\n\nTo remove a plugin, just remove
  its type from the type signature of\nrunnableTypes and remove the imported modules.\n\nTo
  remove the system monitor plugin:\n\n1. remove, from `Config.hs`, the line\n\n        import
  Plugins.Monitors\n\n2. in `Config.hs` change\n\n         runnableTypes :: Command
  :*: Monitors :*: ()\n         runnableTypes = undefined\n\n    to\n\n         runnableTypes
  :: Command :*: ()\n         runnableTypes = undefined\n\n3. rebuild xmobar.\n\n#
  Authors and credits\n\nAndrea Rossato originally designed and implemented xmobar
  up to\nversion 0.11.1. Since then, it is maintained and developed by [jao],\nwith
  the help of the greater xmobar and Haskell communities.\n\nIn particular, xmobar
  [incorporates patches] by Mohammed Alshiekh,\nAxel Angel, Dragos Boca, Ben Boeckel,
  Duncan Burke, Roman Cheplyaka,\nPatrick Chilton, Antoine Eiche, Nathaniel Wesley
  Filardo, John\nGoerzen, Reto Hablützel, Juraj Hercek, Tomáš Janoušek, Ada Joule,\nSpencer
  Janssen, Roman Joost, Jochen Keil, Lennart Kolmodin, Krzysztof\nKosciuszkiewicz,
  Dmitry Kurochkin, Todd Lunter, Vanessa McHale, Robert\nJ. Macomber, Dmitry Malikov,
  David McLean, Marcin Mikołajczyk, Dino\nMorelli, Tony Morris, Eric Mrak, Thiago
  Negri, Edward O'Callaghan,\nSvein Ove, Martin Perner, Jens Petersen, Alexander Polakov,
  Pavan\nRikhi, Petr Rockai, Andrew Sackville-West, Markus Scherer, Daniel\nSchüssler,
  Olivier Schneider, Alexander Shabalin, Valentin Shirokov,\nPeter Simons, Alexander
  Solovyov, Will Song, John Soros, Travis\nStaton, Artem Tarasov, Samuli Thomasson,
  Edward Tjörnhammar, Sergei\nTrofimovich, Thomas Tuegel, Jan Vornberger, Anton Vorontsov,
  Daniel\nWagner, Zev Weiss, Phil Xiaojun Hu, Edward Z. Yang and Norbert Zeh.\n\n[jao]:
  http://jao.io\n[incorporates patches]: http://www.ohloh.net/p/xmobar/contributors\n\n##
  Thanks\n\n__Andrea Rossato__:\n\nThanks to Robert Manea and Spencer Janssen for
  their help in\nunderstanding how X works. They gave me suggestions on how to solve\nmany
  problems with xmobar.\n\nThanks to Claus Reinke for make me understand existential
  types (or at\nleast for letting me think I grasp existential types...;-).\n\n__jao__:\n\nThanks
  to Andrea for creating xmobar in the first place, and for\ngiving me the chance
  to contribute.\n\n# Related\n\n- To understand the internal mysteries of xmobar
  you may try reading\n  [this tutorial] on X Window Programming in Haskell.\n\n-
  My [sawflibs] project includes a module to automate running xmobar\n  in [sawfish].\n\n[this
  tutorial]: http://www.haskell.org/haskellwiki/X_window_programming_in_Haskell\n[sawflibs]:
  http://github.com/jaor/sawflibs\n\n# License\n\nThis software is released under
  a BSD-style license. See [LICENSE] for\nmore details.\n\nCopyright &copy; 2010-2018
  Jose Antonio Ortega Ruiz\n\nCopyright &copy; 2007-2010 Andrea Rossato\n\n[Github]:
  http://github.com/jaor/xmobar/\n[Github page]: http://github.com/jaor/xmobar\n[Hackage]:
  http://hackage.haskell.org/package/xmobar/\n[LICENSE]: https://github.com/jaor/xmobar/raw/master/license\n[Mailing
  list]: http://projects.haskell.org/cgi-bin/mailman/listinfo/xmobar\n[MPD]: http://mpd.wikia.com/\n[X11-xft]:
  http://hackage.haskell.org/package/X11-xft/\n[i3status]: http://i3wm.org/i3status/\n[i3status
  manual]: http://i3wm.org/i3status/manpage.html#_using_i3status_with_xmobar\n[iwlib]:
  http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html\n[libasound]: http://packages.debian.org/stable/libasound2-dev\n[hinotify]:
  http://hackage.haskell.org/package/hinotify/\n[libmpd]: http://hackage.haskell.org/package/libmpd/\n[dbus]:
  http://hackage.haskell.org/package/dbus\n[text]: http://hackage.haskell.org/package/text\n[sawfish]:
  http://sawfish.wikia.com/\n[utf8-string]: http://hackage.haskell.org/package/utf8-string/\n[alsa-core]:
  http://hackage.haskell.org/package/alsa-core\n[alsa-mixer]: http://hackage.haskell.org/package/alsa-mixer\n[timezone-olson]:
  http://hackage.haskell.org/package/timezone-olson\n[timezone-series]: http://hackage.haskell.org/package/timezone-series\n[libXpm]:
  http://cgit.freedesktop.org/xorg/lib/libXpm\n[http-conduit]: http://hackage.haskell.org/package/http-conduit\n[http-types]:
  http://hackage.haskell.org/package/http-types\n"
license-name: BSD3
