homepage: http://xmobar.org
changelog-type: markdown
hash: 94044fed8ff6c032720e731b8dc1ab987a55f741058a0d1cf798597fcd641fff
test-bench-deps:
  bytestring: -any
  unix: -any
  stm: -any
  base: -any
  time: -any
  hspec: ==2.*
  X11: -any
  xmobar: -any
  filepath: -any
  process: -any
  async: -any
  parsec: -any
  containers: -any
  regex-compat: -any
  old-locale: -any
  mtl: -any
  transformers: -any
  temporary: -any
  parsec-numbers: -any
  directory: -any
maintainer: Jose A. Ortega Ruiz <jao@gnu.org>
synopsis: A Minimalistic Text Based Status Bar
changelog: |
  ## Version 0.33 (February, 2020)

  _New features_

    - New template parameter `<weather>` for the `Weather` plugin, potentially
      displaying specific weather conditions that are occurring near the
      station (thanks to *slotThe*).
    - New option `--weathers`, for `Weather` to display a default string in
      case the `weather` field is not reported (thanks to *slotThe*).
    - New template parameter `<volumestatus>` for the `Volume` plugin, combining
      the effects of `<volume>` and `<status>`.  This will show the volume
      (possibly prefixed by `onString` or a percentage-based string) if and only
      if the volume is not muted.  Otherwise it will show the
      `offString` (thanks to *slotThe*).
    - `Battery` and `BatteryN` now support FreeBSD (thanks to Dhananjay
      Balan).
    - New option `--useManager` for `Weather` and `UVMeter` to decide whether to
      use one single manager per monitor for managing network connections or
      create a new one every time a connection is made.
    - New more efficient time coalescing strategy for monitor updates,
      available with the threaded runtime: use the `with_threaded` flag
      to enable it (see #410; thanks to Tomáš Janoušek).
    - `Wireless` supports current nl80211 API on Linux now, old Wext ioctls still
      available as compile-time option (thanks to Paul Fertser).

  ## Version 0.32 (December, 2019)

  _New features_

    - New options `--host` and `--port` for `MPD` monitor.
    - New plugin `MailX` extending `Mail` with colors and prefix/suffix.
    - New options `--lows`, `--mediums`, and `--highs` for `Battery`
      to display an additional string depending on battery level (thanks
      to *slotThe*).
    - New options `-L` and `-H` for `Volume` to set low and high volume
      levels, as well as `-l`, `-m`, and `-h` to display an additional
      string depending on current volume level (thanks to *slotThe*).
    - New option `-P` in `Battery` to add a `%` symbol to `<left>`.
    - New option `--devices` in `DynNetwork` to select what interfaces
      to monitor (thanks to *vindex10*).
    - DateZone plugin now also checks TZDIR (thanks to Emmanuel Rosa).

  _Bug fixes_

     - `Kbd` plugin: ignore "terminate" layout token (thanks to Greg
       Steuck).
     - Fixed compilation with GHC 8.8.x (thanks to Vanessa McHale).
     - Avoid creating `~/.xmobar` ([issue #405]).

  [issue #405]: https://github.com/jaor/xmobar/issues/405

  ## Version 0.31 (October, 2019)

  _New features_

    - New option `--contiguous-icons` for `MultiCpu` to draw icons
      without padding (see [issue #388]).
    - New version of libmpd (0.9.0.10), thanks to John Tyree

  [issue #388]: https://github.com/jaor/xmobar/issues/388

  ## Version 0.30 (August, 2019)

  _New features_

    - New monitor `MultiCoreTemp`, thanks to Felix Springer.
    - `DiskIO`: Additional template variables for absolute number of
      bytes rather than speeds (see [issue #390]).
    - `WeatherX`: An extension to the `Weather` monitor allowing the
      spefication of custom strings or icons for sky conditions.
    - The battery monitors accept the new arguments `-a` and `-A` to
      specify a system command executed if battery left goes beyond a
      given threshold.

  [issue #390]: https://github.com/jaor/xmobar/issues/390

  ## Version 0.29.5 (March, 2019)

  _Bug fixes_

    - Honour command line flags when starting xmobar without any
      configuration file (issue #375).
    - `Alsa` plugin: restart `alsactl` if it quits, e.g. because of a
      sleep/awake cycle (issue #376).
    - `Weather` using the new HTTPS URL, which requires http-conduit as
      a dependency (issue #378).
    - `MarqueePipeReader` exported at the API level (issue #381).

  ## Version 0.29.4 (December, 2018)

  Upgrade to alsa-mixer 0.3.0.  See issues #372 and #373.

  ## Version 0.29.3 (December, 2018)

  _Bug fixes_

    - Upper bound for alsa_mixer (see [issue #372])

  [issue #372]: https://github.com/jaor/xmobar/issues/372

  ## Version 0.29.2 (December, 2018)

  _Bug fixes_

    - Work as usual with .xmobarrc (see [issue #371]).

  [issue #371]: https://github.com/jaor/xmobar/issues/371

  ## Version 0.29.1 (December, 2018)

  _Bug fixes_

    - Honour command line flags (fixes [issue #370]).
    - Expose Cmd and CmdX in Xmobar interface.

  [issue #370]: https://github.com/jaor/xmobar/issues/370

  ## Version 0.29 (December, 2018)

  _New features_

    - New `Alsa` monitor for volume display that doesn't use polling, by
      Daniel Schüssler.
    - `ThermalZone` retries reading missing files, thanks to Reed Koser.
    - `TopProc` ignores kernel threads (see also [issue #369]).
    - `Wireless` simple autodetection of wirless interface name (if set
      to "").
    - Experimental support for using xmobar as a library, so that
      configurations are in fact Haskell programs a la Xmonad (beta
      stage, with help from Pavan Rikhi). Traditional config files are
      still (and will continue to be) supported.

  _Bug fixes_

    - Correctly parsing configuration options `mwClass` and `wmName`.

  [issue #369]: https://github.com/jaor/xmobar/issues/369

  ## Version 0.28.1 (October, 2018)

  Dependencies updated to work with GHC 8.6, avoiding [issue #354].

  [issue #354]: https://github.com/jaor/xmobar/issues/354

  ## Version 0.28 (August, 2018)

  _New features_

    - New `ComX`, which runs a command with custom exit error message.

  _Bug fixes_

    - hinotify version upgraded ([issue #356])

  [issue #356]: https://github.com/jaor/xmobar/issues/356

  ## Version 0.27 (July, 2018)

  _New features_

    - Dropped support for GHC 7.x.  See [issue #352].
    - New configuration option, `textOffsets` to specify separate
      vertical offsets for each of the fonts in `additionalFonts`.  See
      [issue #311].

  _Bug fixes_

     - Use the maximum width options `-T` and `-E` correctly when a
       monitor subtemplate contains font and color tags.

  [issue #311]: https://github.com/jaor/xmobar/issues/311
  [issue #352]: https://github.com/jaor/xmobar/issues/352

  ## Version 0.26 (April, 2018)

  _New features_

    - New options to specify the ellipsis string for fields (`-e`) and
      total width (`-E`), thanks to Olivier Schneider.
    - `MultiCpu`: New option to specify fallback icon paths
      (`--fallback-icon-pattern`), thanks to Reed Koser.

  _Bug fixes_

    - `CpuFreq` monitors honours `-d` (number of digits) if no suffix is
      given (cf. [issue #335]).
    - Race condition in network monitor fixed ([issue #347]).
    - Limiting dbus supported version (see [issue #346]).

  [issue #335]: https://github.com/jaor/xmobar/issues/335
  [issue #346]: https://github.com/jaor/xmobar/issues/346
  [issue #347]: https://github.com/jaor/xmobar/issues/347

  ## Version 0.25 (February, 2018)

  _New features_

    - The X11 properties `WM_NAME` and `WM_CLASS` for xmobar windows can
      be setup in either the configuration file (`wmName` and `wmClass`)
      or using the new flags `-n` adn `-w` (see [issue #323]).
    - New flag `with_weather`, to build sans `Weather` monitor.

  _Bug fixes_

     - Honouring -x in MPris monitor ([issue #325])


  [issue #323]: https://github.com/jaor/xmobar/issues/323
  [issue #325]: https://github.com/jaor/xmobar/issues/325

  ## Version 0.24.5 (May, 2017)

  _Bug fixes_

    - Fix for vertical bars ([issue #303])

  [issue #303]: https://github.com/jaor/xmobar/issues/303

  ## Version 0.24.4 (April, 2017)

  _Infrastructure_

    - Whe have now an active [Travis CI setup].

  [Travis CI setup]: https://travis-ci.org/jaor/xmobar

  _Bug fixes_

    - Reduce wakeups rate via rtsopts V0 (with new flag with_rtsopts to
      disable it) (see [issue #89]).
    - Fix Net monitor for lage uptimes and bytecounts (Tomas Janoušek).
    - Fix MultiCpu monitor for large uptimes (Zev Weiss).
    - Fix compilation when XMP is disabled (Sergi Trofimovich).
    - Better fatal error messages (Michael Bishop).
    - More paths to read from in CoreTemp (see [issue #291]).

  [issue #291]: https://github.com/jaor/xmobar/issues/291

  ## Version 0.24.3 (Sep 5, 2016)

  _Bug fixes_

    - Battery monitor: fixes for cases where status is not consistently
      reported by the kernel (see [issue #271]).

  [issue #271]: https://github.com/jaor/xmobar/issues/271

  ## Version 0.24.2 (Aug 8, 2016)

  _Bug fixes_

     - New Weather plugin URL (see [issue #270]).

  [issue #270]: https://github.com/jaor/xmobar/issues/270

  ## Version 0.24.1 (Jul 28, 2016)

  _Bug fixes_

     - Restoring compatibility with GHC 7.6, (see [issue #269]).

  [issue #269]: https://github.com/jaor/xmobar/issues/269

  ## Version 0.24 (Jul 26, 2016)

  _New features_

     - Use the new compilation flag `with_conduit` to compile an
       implemetation of the  `Weather` plugin that will work behind
       proxies, by Dragos Boca.
     - New command line argument (`-p`) to specify xmobar's position, by
       Valentin Shirokov.
     - Wind speed in Km/h and m/s for the `Weather` plugin, by Michael
       Knabe.
     - `UVMeter`, a new optional plugin showing UV data for Australian
       users, by Roman Joost.
     - New template parameter `<date>` for the `MPD` plugin (by Bruno
       Heridet)
     - New monitor argument `-T` to specify the maximum total width of
       the monitor text.
     - New $VAR parameter syntax for using env vars in pipe monitors, by
       Will Song (see [issue #268]).

  _Bug fixes_

     - The `Volume` plugin now supports capture devices (Antoine Eiche).
     - The `MPD` plugin will now automatically update on options changes
       (Ben Boeckel).
     - The `Battery` plugin does now a better job at tracking AC status
       and times (see [issue #231]).
     - `PipeReader` was polling too often (thanks to zlbruce).
     - The `MPris` monitor now honours field width and padding optons
       (-M, -w, etc.).
     - `Batt`: sensible thresholds for high/low power consumption (see
       [issue #265]).

  [issue #231]: https://github.com/jaor/xmobar/issues/225
  [issue #265]: https://github.com/jaor/xmobar/issues/225
  [issue #268]: https://github.com/jaor/xmobar/issues/268

  ## Version 0.23.1 (Apr 14, 2015)

  _Bug fixes_

    - Vertical alignment for icons, [issue #216]
    - Improvements to vertical text alignment, with many thanks to Jan
      Palus (see ongoing discussion in [issue #221]).
    - Better error handling in `Volume` monitor, [issue #215]
    - Compilation with ghc 7.8 and 7.10 (thanks to Edward Tjörnhammar,
      see [issue #225]).

  [issue #225]: https://github.com/jaor/xmobar/issues/225
  [issue #221]: https://github.com/jaor/xmobar/issues/221
  [issue #216]: https://github.com/jaor/xmobar/issues/216
  [issue #215]: https://github.com/jaor/xmobar/issues/215

  ## Version 0.23 (Mar 8, 2015)

  _New features_

    - Xmobar can now use a (semi)transparent background: set it with the
      new configuration option `alpha` (thanks to Edward Z. Yang, see
      [issue #114]).
    - Multiple fonts available by means of the new configuration
      parameter `additionalFonts` and the template markers
      `<fn=1>...</fn>`, by Markus Scherer.
    - New variables in `Mem` monitor for available memory as reported by
      Linux 3.14 and newer, by Samuli Thomasson.
    - New configuration parameters `textOffset` and `iconOffset` (see
      discussion in [issue #171] and [issue #201]).
    - New template variable `flags` in `MPD` monitor, by Duncan Burke.

  [issue #171]: https://github.com/jaor/xmobar/issues/171
  [issue #201]: https://github.com/jaor/xmobar/issues/201
  [issue #114]: https://github.com/jaor/xmobar/issues/114

  _Bug fixes_

    - We honour the `-S` (show suffix) monitor flag in `CpuFreq`.
    - Better `Weather` parsing of wind direction, by Dino Morelli (see
      [pull #212]).

  [pull #212]: https://github.com/jaor/xmobar/pull/212

  ## Version 0.22.1 (Oct 11, 2014)

  _Bug fixes_

    - Fix compilation in systems that don't need mtl newer than the one
      shipped with GHC.

  ## Version 0.22 (Oct 9, 2014)

  _New features_

    - New `MarqueePipeReader` plugin by Reto Hablützel.
    - `Network` monitor has now adaptive units (`-S` is used now to
      switch them on), by Axel Angel.
    - `Weather` now offers `dewPointC` and `dewPointF` instead of
      `dewPoint`, and the new `windCardinal`, `windAzimuth`, `windMph`
      and `windKnots` variables, by Tony Morris.
    - Strings in the configuration file can now span multiple lines
      using Haskell-style multiline script, thanks to dunric
    - Icons can now be also xpm files (if xmobar is compiled with
      `with_xpm`), thanks to Alexander Shabalin.
    - New `borderWidth` option to set xmobar's boder width, thanks to
      Travis Staton.
    - Support for multiple Xft fonts, thanks to Phil Xiaojun Hu and
      Cedric staub (see [pull request #196]).
    - Icon patterns for several monitors, that allow you to specify a
      collection of icons to use for successive integer variable values,
      thanks to Alexander Shabalin (see [pull request #192] and the
      documentation for details).
    - Upgrade to libmpd 0.9.

  _Bug fixes_

    - Much more efficient implementation of the `Locks` plugin, thanks
      to Anton Vorontsov (see [pull request #195]).
    - Not colorizing total disk size in `DiskU` ([issue #189]).
    - Avoiding zombies on click actions, thanks to Phil Xiaojun Hu
      ([issue #181]).

  [issue #181]: https://github.com/jaor/xmobar/issues/181
  [issue #189]: https://github.com/jaor/xmobar/issues/189
  [pull request #192]: https://github.com/jaor/xmobar/pull/192
  [pull request #195]: https://github.com/jaor/xmobar/pull/195
  [pull request #196]: https://github.com/jaor/xmobar/pull/196

  ## Version 0.21 (Jul 1, 2014)

  _New features_

    - Vertical bar indicators using unicode available for most monitors,
      by Eric Mrak.
    - `CoreTemp`: support for linux 3.15, by Tomáš Janoušek.
    - New `CatInt` monitor, displaying integer values read from a file,
      by Nathaniel Wesley Filardo.
    - New `<raw>` tag for safer input parsing, also by Nathaniel.
    - New `UnsafeXMonadLog` monitor (by Eric Mrak) and their xproperty
      counterparts, `UnsafeXPropertyLog` and `UnsafeNamedXPropertyLog`.

  _Bug fixes_

    - `Network` now reports status for ppp connections (see
      [issue #89]).
    - Fix for very long running `Cpu` monitors, by Robert J Macomber.

  [issue #89]: https://github.com/jaor/xmobar/issues/89

  ## Version 0.20.1 (March 13, 2014)

  _New features_

    - Back to picking by default the first available screen, with a new
      configuration option, `pickBroadest`, for choosing the broadest
      (see [issue #158]).

  [issue #158]: https://github.com/jaor/xmobar/issues/158

  ## Version 0.20 (March 10, 2014)

  _New features_

    - Mouse actions now support multiple buttons, by Marcin Mikołajczyk.
    - Non supported monitors are ignored in configuration files (see
      [issue #139]), by Adam Vogt.

  _Bug fixes_

    - `Disk` monitor now ignores non-existent devices (Reto Hablützel).
    - `Weather` is now non-blocking and doesn't use curl (Ben Boeckel).
    - Fix for `Memory` monitor in 3.14 kernels (Ben Boeckel).
    - Fix for infinite loops in `AutoMPD` ([issue #76], [issue #111]).
    - More robust AC readings in `BatteryP`.
    - Fix for `Top` monitor's readings for processes whose name contains
      blanks.
    - Fixes for geometry computation on multihead (Dmitry Malikov).
    - Fixes for missing XDG configuration (Thiago Negri and James McCoy,
      see [issue #133]).
    - Compatibility with latest `directory` (1.2.0.2).

  [issue #76]: https://github.com/jaor/xmobar/issues/76
  [issue #111]: https://github.com/jaor/xmobar/issues/111
  [issue #133]: https://github.com/jaor/xmobar/issues/133
  [issue #139]: https://github.com/jaor/xmobar/issues/133

  ## Version 0.19 (October 27, 2013)

  As of this release, the old bug tracker at Google code is deprecated.
  Please use [Github's tracker] for new bugs.

  _New features_

    - New monitor `BatteryN`, a variant of `BatteryP` that lets you
      specify the name of the monitor in the template.
    - Support for configuration file living in `XDG_CONFIG_HOME` (see
      [github #99]).
    - `Com` uses safer `runInteractiveProcess` instead of spawning a
      shell (David McLean).  If you're using shell expansion in your
      `Com` (e.g. "~/bin/script") here's a workaround: `Run Com
      "/bin/bash" ["-c", "~/bin/script"]` (cf. [github #127]).
    - New plugin `UnsafeStdinReader` that allows actions from stdin.
      Now it's possible to have clickable workspaces!
      (Thiago Negri, see [github #125]).
    - New monitor configuration option (`-x` or `--nastring`) that allows
      specifying what string to display when a monitor is not available
      (defaulting to "N/A"). Cf. [github #119].

  _Bug fixes_

    - Using the width options `-w`, `-m` and `-M` in battery monitors
      watts display ([github #118]).
    - Using the `-d` option in `CoreTemp` ([github #115])
    - Fix for systems not supporting PCRE regular expressions: we use
      now BCEs, so regex-compat should be enough everywhere (see
      [github #117]).
    - Weather monitor: support for stations without name (Sergei
      Trofimovich, [issue #65]).

  [Github's tracker]: https://github.com/jaor/xmobar/issues
  [github #99]: https://github.com/jaor/xmobar/issues/115
  [github #115]: https://github.com/jaor/xmobar/issues/115
  [github #117]: https://github.com/jaor/xmobar/issues/117
  [github #125]: https://github.com/jaor/xmobar/issues/125
  [issue #65]: http://code.google.com/p/xmobar/issues/detail?id=65
  [github #118]: https://github.com/jaor/xmobar/issues/118
  [github #119]: https://github.com/jaor/xmobar/issues/119
  [github #127]: https://github.com/jaor/xmobar/issues/127

  ## Version 0.18 (June 5, 2013)

  _New features_

    - All extra argument monitors taking a string (e.g. `-O` for
      `BatteryP`) accept now template variables (see [github #109] and
      [#110]).  Thanks to Todd Lunter.

    - New battery monitor extra argument, `-i`, for the idle status.

  _Bug fixes_

    - Safer standard input parsing, avoiding <action> injections.


  [github #109]: https://github.com/jaor/xmobar/issues/109
  [#110]: https://github.com/jaor/xmobar/issues/110

  ## Version 0.17 (May 5, 2013)

  _New features_

    - Icons support: it's now possible to insert bitmaps in the template
      (Edward O'Callaghan, Alexander Polakov and Tomáš Janoušek).
    - Initial support for reacting to mouse clicks (Alexander Polakov).
    - New `TopP` and `BottomP` alignments, taking left and right
      paddings (thanks to Dmitry Malikov).
    - New `<freeratio>` field for memory monitor (Peter Simons).
    - New `allDesktops` and `overrideRedirect` configuration options,
      providing dock behaviour in tiling WMs (when set to True and False
      respectively). Cf. discussion at [github #105].
    - Experimental `-d` (start as a dock) option, may address [github #67]
      in some window managers.

  _Bug fixes_

    - Partial (as reports go) fix for [github #77].
    - Safer volume plugin (Dmitry Malikov).
    - Battery percentage capped at 100% (RJ Regenold).

  [github #67]: https://github.com/jaor/xmobar/issues/67
  [github #77]: https://github.com/jaor/xmobar/issues/77
  [github #105]: https://github.com/jaor/xmobar/issues/105


  ## Version 0.16 (Dec 3, 2012)

  _New features_

    - New monitor `AutoMPD`, which uses asynchronous events to display
      MPD status (thanks to Ben Boeckel).
    - New monitor `BufferedPipeReader` displaying data from multiple
      pipes (thanks to Jochen Keil).
    - New monitor `DynNetwork`, which detects the active interface
      automatically, by Reto Hablützel
    - New monitor, `Locks`, displaying the status of lock keys, by
      Patrick Chilton.
    - Extension for DBUS signal handling (Jochen Keil)
    - Hide/Reveal: one can send signals to xmobar and make it (un)hide
      itself (Jochen again).
    - `PipeReader`'s default text is now configurable, by Reto Hablützel.
    - Dependencies updated to latest mtl and libmpd (thanks to Sergei
      Trofimovich).
    - Dependencies on the deprecated dbus-core removed in favour of
      dbus 0.10 (thanks to Jochen Keil).
    - MPris2 now includes genre and composer among its fields.

  _Bug fixes_

    - `DiskIO` now can report overall activity in all partitions of a device
      which is not mounted itself (e.g., sda when sda1, sda3, etc. are
      the mounted partitions).  Thanks to John Soros. See [github #73].
    - `DiskU`, the disk usage monitor, works again correctly on Linux,
      instead of randomly crashing every now and then, and reporting
      wrong used size.
    - When using antialiased fonts, we were causing a memory leak in the
      X server by repeatedly allocating colors that, apparently, the
      server doesn't know how to get rid of (even when told so!).  We're
      caching them now and X server memory doesn't grow.
    - Compilation errors and warnings with GHC 7.6 removed (thanks to
      Raghavendra D Prabhu for his reports in [github #71]).

  _Known problems_

  Some users have reported problems with xmobar compiled with GHC 7.6 in
  ArchLinux: see [github #78] and pointers therein.  Please, send
  reports of any problems or successes in that regard so that we can fix
  any remaining issues.  Thanks!

  [github #71]: https://github.com/jaor/xmobar/issues/71
  [github #73]: https://github.com/jaor/xmobar/issues/73
  [github #78]: https://github.com/jaor/xmobar/issues/78

  ## Version 0.15 (June 4, 2012)

  _Incompatible changes_

    - `Batt` monitor no longer uses `-c` to specify the charge file: it
      should figure things out by itself (cf. [issue 69]).

  _New features_

    - New command line option, `-C`, that allows *adding* commands to
      those specified in the configuration file (Ben Boeckel).
    - Dependency on GHC's threaded runtime has been eliminated.
    - New MPRIS (versions 1 and 2) monitor, by Artem Tarasov.
    - New monitor option `-d` to specify the number of decimal places to
      display for float numbers.  Defaults to 0. See [issue 58].
    - New compilation option `--with_threaded`, to use GHC's threaded
      runtime to compile xmobar.  Disabled by default (cf. discussion in
      [github #36]).

  _Bug fixes_

    - Stricter build dependencies versioning in cabal file.
    - [issue 56] vertical alignment of text improved.
    - [issue 64] display of `watts` in `Batt` monitor fixed.
    - [issue 69] miscellaneous battery reporting issues.
    - [issue 67] compilation in DragonFly.
    - DiskIO works also when device path in mtab are symbolic links
      to the real device file.
    - Wireless monitor honours padding settings for ESSID names.
    - CoreTemp monitor fixed for newer kernels ([github #38]).

  [issue 56]: http://code.google.com/p/xmobar/issues/detail?id=56
  [issue 58]: http://code.google.com/p/xmobar/issues/detail?id=58
  [issue 64]: http://code.google.com/p/xmobar/issues/detail?id=64
  [issue 67]: http://code.google.com/p/xmobar/issues/detail?id=67
  [issue 69]: http://code.google.com/p/xmobar/issues/detail?id=69
  [github #36]: https://github.com/jaor/xmobar/issues/36
  [github #38]: https://github.com/jaor/xmobar/issues/38

  ## Version 0.14 (Dec 10, 2011)

  _New features_

    - New brightness monitor, courtesy of Martin Perner.
    - New DateZone plugin, for configurable timezone and localized
      datetimes, also by Martin.
    - New keyboard layout monitor (Kbd).  Yes, by Martin.
    - Rewrite of the event handling ([issue 53], [issue 57]), you
      guessed it.
    - Cpu monitor now also reports `iowait` field ([issue 55]).
    - Battery monitor: the full charge file is now settable in the
      monitor arguments (olpc systems use `charge_full_design`; see
      [issue 62]).

  _Bug fixes_

    - [issue 45] Fix for crashes with AC status changes in battery monitor.
    - [issue 48] The <quality> field of Wireless behaves like a percentage.
    - [issue 50]/[issue 61]: `MPD` monitor now works with libmpd 0.6.
    - [issue 60] Fixes for crashes on power resume for battery monitor.
    - Template sections without fields are now correctly displayed.
    - Catch errors when reading battery status (Ben Boeckel).
    - Compilation issues with ghc 7.x (Sergei Trofimovich).
    - Fixes for CoreTemp monitor in new kernels (Norbert Zeh).
    - Fix for pulseaudio problems in volume monitor (Martin Perner).
    - Fix for parsing errors when a `Run` entry ended in an array
      (Martin).
    - Fixed compilation in OpenBSD (Ivo van der Sangen).

  [issue 45]: http://code.google.com/p/xmobar/issues/detail?id=45
  [issue 48]: http://code.google.com/p/xmobar/issues/detail?id=48
  [issue 50]: http://code.google.com/p/xmobar/issues/detail?id=50
  [issue 53]: http://code.google.com/p/xmobar/issues/detail?id=53
  [issue 55]: http://code.google.com/p/xmobar/issues/detail?id=55
  [issue 57]: http://code.google.com/p/xmobar/issues/detail?id=57
  [issue 60]: http://code.google.com/p/xmobar/issues/detail?id=60
  [issue 61]: http://code.google.com/p/xmobar/issues/detail?id=61
  [issue 62]: http://code.google.com/p/xmobar/issues/detail?id=62

  ## Version 0.13 (March 28, 2011)

  _New features_

    - New `Volume` monitor displaying ALSA soundcards information, by
      Thomas Tuegel.
    - New `ThermalZone` plugin substituting `Thermal` and using linux's
      *sysfs* interface (you need this one if you're using a kernel
      version equal to or above 2.6.37). See [issue 44].
    - xmobar app new has WM_CLASS, WM_NAME and _NET_WM_PID xprops
      ([issue 38]).

  _Incompatible changes_

    - In the process of solving [issue 14], we've broken those
      configurations that rely on including alignment separators in the
      input fed to `StdinReader`.
    - The MPD plugin does not accept host and port options anymore: use
      the environment variables MPD_HOST and MPD_PORT instead.
    - The `Mail` plugin now takes a second parameter (a string)
      specifying its alias. As a side-effect, this solves [issue 30].

  _Bug fixes_

    - [issue 14] `StdinReader` and other plugins accepting external
      input don't get confused anymore when characters from `alignSep`
      appear in their input.
    - [issue 27] `BottomSize` placement now respects its width argument.
    - [issue 28] Compilation in Mac OS X fixed.
    - [issue 30] `Mail` plugin can be specified anywhere in commands list.
    - [issue 36] Battery monitor now supports non-standard locations of
      the `/sys/class/power_supply/AC/online` file.
    - [issue 40] Battery monitor now supports the new power_now, that
      replaces current_now in linux kernels for v. 2.36 and above.
    - [issue 42] More accurate net monitor rates.
    - DiskIO, Cpu and MultiCpu monitors are also more accurate now.
    - Text is now correctly centered vertically.
    - `FullBM` border spec fixed.

  [issue 14]: http://code.google.com/p/xmobar/issues/detail?id=14
  [issue 27]: http://code.google.com/p/xmobar/issues/detail?id=27
  [issue 28]: http://code.google.com/p/xmobar/issues/detail?id=28
  [issue 30]: http://code.google.com/p/xmobar/issues/detail?id=30
  [issue 36]: http://code.google.com/p/xmobar/issues/detail?id=36
  [issue 38]: http://code.google.com/p/xmobar/issues/detail?id=38
  [issue 40]: http://code.google.com/p/xmobar/issues/detail?id=40
  [issue 42]: http://code.google.com/p/xmobar/issues/detail?id=42
  [issue 44]: http://code.google.com/p/xmobar/issues/detail?id=44

  ## Version 0.12 (Dec 24, 2010)

  xmobar has a new [maintainer], a new [website], a new [mailing
  list] and uses a new [source code repository].

  Many thanks to Andrea Rossato, xmobar's author and maintainer so far,
  for creating xmobar in the first place, and for giving me the chance
  to become its maintainer. And a big thanks to Ben Boeckel, Petr Rockai
  and Norbert Zeh for their patches.

  [website]: http://projects.haskell.org/xmobar/
  [mailing list]: http://projects.haskell.org/cgi-bin/mailman/listinfo/xmobar
  [source code repository]: https://github.com/jaor/xmobar
  [maintainer]: http://hacks-galore.org/jao/

  _New features_

    - Window borders: configuration options `border` and `borderColor`
      allow drawing borders around xmobar's window.
    - New monitor, `Uptime`, showing the system uptime.
    - New monitor argument (`-S`) to enable displaying the `%` symbol in
      percentages or other suffixes (e.g., units in Uptime and Network);
      the symbol is now never included by default.
    - New 'run once' commands, by specifying a 0 refresh rate in `Run
      Com` ([issue 26]).
    - MPD monitor: updated to libmpd 1.5. New fields `ppos` (playlist
      position) and `remaining` (remaining time). New configuration
      options to specify MPD's host, user name and password.
    - Battery monitor: new `watts` and `timeleft` fields (Petr Rockai),
      and specific arguments to control coloring and thresholds of the
      former.
    - MultiCPU monitor: new `auto*` fields that automatically detect all
      present CPUs (Ben Boeckel).
    - CpuFreq monitor uses just one decimal digit for GHz values (Petr
      Rockai).
    - Mail plugin expands paths starting with "~/" (Ben Boeckel). Ditto
      MBox.
    - Weather monitor now skips not retrieved fields, instead of
      displaying a long error message.
    - New compilation flag, `all_extensions`.
    - Documentation and website updates.

  _Bug fixes_

    - [issue 23] Wireless monitor is now compatible with iwlib 29.
    - [issue 24] Swap monitor's used ratio display fixed.
    - [issue 25] Percentages only include `%` if requested using `-P`.
    - [issue 31] MPD monitor now respects `-W` argument.
    - Fixes in CPU frequency formatting, string alignment and colour
      boxes in monitors (Norbert Zeh).
    - TopMem and TopProc now use the `-L` and `-H` options correctly for
      memory template fields.
    - MBox skips non-existent mbox paths instead of hanging.

  [issue 23]: http://code.google.com/p/xmobar/issues/detail?id=23
  [issue 24]: http://code.google.com/p/xmobar/issues/detail?id=24
  [issue 25]: http://code.google.com/p/xmobar/issues/detail?id=25
  [issue 26]: http://code.google.com/p/xmobar/issues/detail?id=26
  [issue 31]: http://code.google.com/p/xmobar/issues/detail?id=31
basic-deps:
  bytestring: -any
  extensible-exceptions: ==0.1.*
  unix: -any
  stm: ! '>=2.3 && <2.6'
  base: ! '>=4.9.1.0 && <4.14'
  time: -any
  X11: ! '>=1.6.1'
  xmobar: -any
  filepath: -any
  process: -any
  async: -any
  parsec: ==3.1.*
  containers: -any
  regex-compat: -any
  utf8-string: ! '>=0.3 && <1.1'
  old-locale: -any
  mtl: ! '>=2.1 && <2.3'
  transformers: -any
  parsec-numbers: ! '>=0.1.0'
  http-conduit: -any
  http-types: -any
  directory: -any
all-versions:
- '0.3'
- 0.3.1
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- 0.9.1
- 0.9.2
- '0.10'
- '0.11'
- 0.11.1
- '0.12'
- '0.13'
- '0.14'
- '0.15'
- '0.16'
- '0.17'
- '0.18'
- '0.19'
- '0.20'
- 0.20.1
- '0.21'
- '0.22'
- 0.22.1
- '0.23'
- 0.23.1
- '0.24'
- 0.24.1
- 0.24.2
- 0.24.3
- 0.24.4
- 0.24.5
- '0.25'
- '0.26'
- '0.27'
- '0.28'
- 0.28.1
- '0.29'
- 0.29.1
- 0.29.2
- 0.29.3
- 0.29.4
- 0.29.5
- '0.30'
- '0.31'
- '0.32'
- '0.33'
author: Andrea Rossato and Jose A. Ortega Ruiz
latest: '0.33'
description-type: markdown
description: "[![Hackage](https://img.shields.io/hackage/v/xmobar.svg)](http://hackage.haskell.org/package/xmobar)\n[![Build
  Status](https://travis-ci.org/jaor/xmobar.svg?branch=master)](https://travis-ci.org/jaor/xmobar)\n\n#
  About\n\nXmobar is a minimalistic status bar. It was originally designed and\nimplemented
  by Andrea Rossato to work with [xmonad], but it is\nactually usable with any window
  manager.\n\nXmobar was inspired by the [Ion3] status bar, and supports similar\nfeatures,
  like dynamic color management, icons, output templates, and\nextensibility through
  plugins.\n\nThese are two xmobar instances using the author's configuration:\n\n![top](https://gitlab.com/jaor/xmobar-config/raw/master/img/xmobar-top.png)\n\n![bottom](https://gitlab.com/jaor/xmobar-config/raw/master/img/xmobar-bottom.png)\n\nand
  [this one](doc/xmobar-xmonad.png) is a full desktop with [xmonad]\nand, again, two
  instances of xmobar.\n\n[xmonad]: http://xmonad.org\n[Ion3]: http://tuomov.iki.fi/software/\n\n#
  Bug Reports\n\nTo submit bug reports you can use the [bug tracker over at\nGithub](https://github.com/jaor/xmobar/issues).\n\n#
  Installation\n\n## Using cabal-install\n\nXmobar is available from [Hackage], and
  you can install it using\n`cabal-install`:\n\n        cabal install xmobar\n\nXmobar
  versions >= 0.27 require GHC version >= 8.0.2.  Due to an\nintermittent bug in GHC,
  we recommend using either GHC 8.0.2, 8.2.2 or\n8.6.\n\nSee below for a list of optional
  compilation flags that will enable\nsome optional plugins. For instance, to install
  xmobar with all the\nbells and whistles, use:\n\n        cabal install xmobar --flags=\"all_extensions\"\n\n##
  From source\n\nIf you don't have `cabal-install` installed, you can get xmobar's\nsource
  code in a variety of ways:\n\n  - From [Hackage]. Just download the latest release
  from xmobar's\n    hackage page.\n  - From [Github]. You can also obtain a tarball
  in [Github's\n    downloads page]. You'll find there links to each tagged release.\n
  \ - From the bleeding edge repo. If you prefer to live dangerously,\n    just get
  the latest and greatest (and buggiest, I guess) using\n    git:\n\n        git clone
  git://github.com/jaor/xmobar\n\n\n[Github's downloads page]: https://github.com/jaor/xmobar/downloads\n\nIf
  you have cabal installed, you can now use it from within xmobar's\nsource tree:\n\n
  \       cabal install -fall_extensions\n\n\nThere is also a barebones `stack.yaml`
  file that will allow you to\nbuild the xmobar executable with stances of the form:\n\n
  \       stack install --flag xmobar:all_extensions\n\n\n## Optional features\n\nYou
  can configure xmobar to include some optional plugins and\nfeatures, which are not
  compiled by default. To that end, you need to\nadd one or more flags to either the
  cabal install command or the\nconfigure setup step, as shown in the examples above.\n\nExtensions
  need additional libraries (listed below) that will be\nautomatically downloaded
  and installed if you're using cabal install.\nOtherwise, you'll need to install
  them yourself.\n\n- `with_dbus` Enables support for DBUS by making xmobar to publish
  a\n  service on the session bus.  Requires the [dbus] package.\n\n- `with_threaded`
  Uses GHC's threaded runtime.  Use this option if\n  xmobar enters a high-CPU regime
  right after starting.\n\n- `with_utf8` UTF-8 support. Requires the [utf8-string]
  package.\n\n- `with_xft` Antialiased fonts. Requires the [X11-xft] package. This\n
  \ option automatically enables UTF-8.  To use XFT fonts you need to\n  use the `xft:`
  prefix in the `font` configuration option. For\n  instance:\n\n        font = \"xft:Times
  New Roman-10:italic\"\n\n  Or to have fallback fonts, just separate them by commas:\n\n
  \       font = \"xft:Open Sans:size=9,WenQuanYi Zen Hei:size=9\"\n\n- `with_mpd`
  Enables support for the [MPD] daemon. Requires the\n  [libmpd] package.\n\n- `with_mpris`
  Enables support for MPRIS v1/v2 protocol.  Requires the\n  [dbus] and [text] packages.\n\n-
  `with_inotify` Support for inotify in modern Linux kernels. This\n  option is needed
  for the MBox and Mail plugins to work. Requires the\n  [hinotify] package.\n\n-
  `with_nl80211` Support for wireless cards on Linux via nl80211 (all\n   upstream
  drivers). Enables the Wireless plugin. Requires [netlink]\n   and [cereal] packages.\n\n-
  `with_iwlib` Support for wireless cards via Wext ioctls\n   (deprecated). Enables
  the Wireless plugin. No Haskell library is\n   required, but you will need the [iwlib]
  C library and headers in your\n   system (e.g., install `libiw-dev` in Debian-based
  systems or\n   `wireless_tools` on Arch Linux). Conflicts with `with_nl80211`.\n\n-
  `with_alsa` Support for ALSA sound cards. Enables the Volume\n   plugin. Requires
  the [alsa-mixer] package.  To install the latter,\n   you'll need the [libasound]
  C library and headers in your system\n   (e.g., install `libasound2-dev` in Debian-based
  systems).\n\n- `with_datezone` Support for other timezones. Enables the DateZone\n
  \  plugin.  Requires [timezone-olson] and [timezone-series] package.\n\n- `with_xpm`
  Support for xpm image file format. This will allow loading\n  .xpm files in `<icon>`.
  \ Requires the [libXpm] C library.\n\n- `with_uvmeter` Enables UVMeter plugin. The
  plugin shows UV data for\n   Australia.\n\n- `with_weather` Support to display weather
  information. Enables\n   Weather plugin.\n\n- `all_extensions` Enables all the extensions
  above.\n\n# Running xmobar\n\nYou can now run xmobar with:\n\n        xmobar /path/to/config
  &\n\nor\n\n        xmobar &\n\nif you have the default configuration file saved
  as\n`$XDG\\_CONFIG\\_HOME/xmobar/xmobarrc` (defaulting to\n`~/.config/xmobar/xmobarrc`),
  or `~/.xmobarrc`.\n\n## Signal Handling\n\nSince 0.14 xmobar reacts to SIGUSR1 and
  SIGUSR2:\n\n- After receiving SIGUSR1 xmobar moves its position to the next screen.\n\n-
  After receiving SIGUSR2 xmobar repositions itself on the current screen.\n\n# Configuration\n\n##
  Quick Start\n\nSee [examples/xmobar.config] for an example.\n\n[examples/xmobar.config]:
  http://github.com/jaor/xmobar/raw/master/examples/xmobar.config\n\nFor the output
  template:\n\n- `%command%` will execute command and print the output. The output\n
  \ may contain markups to change the characters' color.\n\n- `<fc=#FF0000>string</fc>`
  will print `string` with `#FF0000` color\n  (red).\n\n- `<fn=1>string</fn>` will
  print `string` with the first font from\n  `additionalFonts`.  The index `0` corresponds
  to the standard font.\n\n- `<icon=/path/to/icon.xbm/>` will insert the given bitmap.
  XPM image\n  format is also supported when compiled with `--flags=\"with_xpm\"`.\n\n-
  ```<action=`command` button=12345>``` will execute given command\n  when clicked
  with specified buttons. If not specified, button is\n  equal to 1 (left mouse button).
  Using old syntax (without backticks\n  surrounding `command`) will result in `button`
  attribute being\n  ignored.\n\n- `<raw=len:str/>` allows the encapsulation of arbitrary
  text `str` (which\n  must be `len` `Char`s long, where `len` is encoded as a decimal
  sequence).\n  Careful use of this and `UnsafeStdinReader`, for example, permits
  window\n  managers to feed xmobar strings with `<action>` tags mixed with un-trusted\n
  \ content (e.g. window titles).  For example, if xmobar is invoked as\n\n        xmobar
  -c \"[Run UnsafeStdinReader]\" -t \"%UnsafeStdinReader%\"\n\n  and receives on standard
  input the line\n\n        <action=`echo test` button=1><raw=41:<action=`echo mooo`
  button=1>foo</action>/></action>`\n\n  then it will display the text ```<action=`echo
  mooo` button=1>foo</action>```,\n  which, when clicked, will cause `test` to be
  echoed.\n\nOther configuration options:\n\n- `font` Name of the font to be used.
  Use the `xft:` prefix for XFT\n  fonts.\n\n- `additionalFonts` Haskell-style list
  of fonts to be used with the\n  `fn`-template.  Use the `xft:` prefix for XFT fonts.
  \ See also\n  `textOffsets` below.\n\n- `bgColor` Background color.\n\n- `fgColor`
  Default font color.\n\n- `alpha` The transparency.  0 is transparent, 255 is opaque.\n\n-
  `position` Top, TopP, TopW, TopSize, Bottom, BottomP, BottomW,\n  BottomSize or
  Static (with x, y, width and height).\n\n  TopP and BottomP take 2 arguments: left
  padding and right padding.\n\n  TopW and BottomW take 2 arguments: an alignment
  parameter (L for\n  left, C for centered, R for Right) and an integer for the percentage\n
  \ width xmobar window will have in respect to the screen width.\n\n  TopSize and
  BottomSize take 3 arguments: an alignment parameter, an\n  integer for the percentage
  width, and an integer for the minimum\n  pixel height that the xmobar window will
  have.\n\n  For example:\n\n          position = BottomW C 75\n\n  to place xmobar
  at the bottom, centered with the 75% of the screen\n  width.  Or\n\n          position
  = BottomP 120 0\n\n  to place xmobar at the bottom, with 120 pixel indent of the
  left.\n  Or\n\n          position = Static { xpos = 0 , ypos = 0, width = 1024,
  height = 15 }\n\n  or\n\n          position = Top\n\n- `textOffset` The vertical
  offset, in pixels, for the text baseline.\n   If negative or not given, xmobar will
  try to center text\n   vertically.\n\n- `textOffsets` A list of vertical offsets,
  in pixels, for the text\n   baseline, to be used with the each of the fonts in\n
  \  `additionalFonts` (if any).  If negative or not given, xmobar will\n   try to
  center text vertically for that font.\n\n- `iconOffset` The vertical offset, in
  pixels, for icons bottom line.\n   If negative or not given, xmobar will try to
  center icons\n   vertically.\n\n- `lowerOnStart` When True the window is sent the
  bottom of the window\n  stack initially.\n\n- `hideOnStart` When set to True the
  window is initially not mapped,\n  i.e. hidden. It then can be toggled manually
  (for example using the\n  dbus interface) or automatically (by a plugin) to make
  it reappear.\n\n- `allDesktops` When set to True (the default), xmobar will tell
  the\n  window manager explicitly to be shown in all desktops, by setting\n  `_NET_WM_DESKTOP`
  to 0xffffffff.\n\n- `overrideRedirect` If you're running xmobar in a tiling window\n
  \ manager, you might need to set this option to `False` so that it\n  behaves as
  a docked application.  Defaults to `True`.\n\n- `pickBroadest` When multiple displays
  are available, xmobar will\n  choose by default the first one to place itself.  With
  this flag set\n  to `True` (the default is `False`) it will choose the broadest
  one\n  instead.\n\n- `persistent` When True the window status is fixed i.e. hiding
  or\n  revealing is not possible. This option can be toggled at\n  runtime. Defaults
  to False.\n\n- `border` TopB, TopBM, BottomB, BottomBM, FullB, FullBM or NoBorder\n
  \ (default).\n\n  TopB, BottomB, FullB take no arguments, and request drawing a
  border\n  at the top, bottom or around xmobar's window, respectively.\n\n  TopBM,
  BottomBM, FullBM take an integer argument, which is the\n  margin, in pixels, between
  the border of the window and the drawn\n  border.\n\n- `borderColor` Border color.\n\n-
  `borderWidth` Border width in pixels.\n\n- `iconRoot` Root folder where icons are
  stored. For <icon=path/> if\n  path start with `\"/\"`, `\"./\"` or `\"../\"` it
  is interpreted as it is.\n  Otherwise it will have `iconRoot ++ \"/\"` prepended
  to it. Default is\n  `\".\"`.\n\n- `commands` For setting the options of the programs
  to run\n  (optional).\n\n- `sepChar` The character to be used for indicating commands
  in the\n  output template (default '%').\n\n- `alignSep` a 2 character string for
  aligning text in the output\n  template. The text before the first character will
  be align to left,\n  the text in between the 2 characters will be centered, and
  the text\n  after the second character will be align to the right.\n\n- `template`
  The output template.\n\n- `wmClass` The value for the window's X11 WM_CLASS property.\n
  \ Defaults to \"xmobar\".\n\n- `wmName` The value for the window's X11 WM_NAME property.
  \ Defaults\n  to \"xmobar\".\n\n### Running xmobar with i3status\n\nxmobar can be
  used to display information generated by [i3status], a\nsmall program that gathers
  system information and outputs it in\nformats suitable for being displayed by the
  dzen2 status bar, wmii's\nstatus bar or xmobar's `StdinReader`.  See [i3status manual]
  for\nfurther details.\n\n### Dynamically sizing xmobar\n\nSee [this idea] by Jonas
  Camillus Jeppensen for a way of adapting\ndynamically xmobar's size and run it alongside
  a system tray widget\nsuch as trayer or stalonetray (although the idea is not limited
  to\ntrays, really).  For your convenience, there is a version of Jonas'\nscript
  in [examples/padding-icon.sh](./examples/padding-icon.sh).\n\n[this idea]: https://github.com/jaor/xmobar/issues/239#issuecomment-233206552\n\n##
  Command Line Options\n\nxmobar can be either configured with a configuration file
  or with\ncommand line options. In the second case, the command line options\nwill
  overwrite the corresponding options set in the configuration\nfile.\n\nExample:\n\n
  \   xmobar -B white -a right -F blue -t '%LIPB%' -c '[Run Weather \"LIPB\" [] 36000]'\n\nThis
  is the list of command line options (the output of\nxmobar --help):\n\n    Usage:
  xmobar [OPTION...] [FILE]\n    Options:\n      -h, -?        --help                 This
  help\n      -V            --version              Show version information\n      -v
  \           --verbose              Emit verbose debugging messages\n      -r            --recompile
  \           Force recompilation (for Haskell FILE)\n      -f font name  --font=font
  name       Font name\n      -w class      --wmclass=class        X11 WM_CLASS property\n
  \     -n name       --wmname=name          X11 WM_NAME property\n      -B bg color
  \  --bgcolor=bg color     Background color. Default black\n      -F fg color   --fgcolor=fg
  color     Foreground color. Default grey\n      -A alpha      --alpha=alpha          Transparency:
  0 is transparent\n                                           and 255 (the default)
  is opaque\n      -o            --top                  Place xmobar at the top of
  the screen\n      -b            --bottom               Place xmobar at the bottom
  of the screen\n      -p            --position=position    Specify position, same
  as in config file\n      -d            --dock                 Try to start xmobar
  as a dock\n      -a alignsep   --alignsep=alignsep    Separators for left, center
  and right text\n                                           alignment. Default: '}{'\n
  \     -s char       --sepchar=char         Character used to separate commands in\n
  \                                          the output template. Default '%'\n      -t
  template   --template=template    Output template\n      -i path       --iconroot=path
  \       Default directory for icon pattern files\n      -c commands   --commands=commands
  \   List of commands to be executed\n      -C command    --add-command=command  Add
  to the list of commands to be executed\n      -x screen     --screen=screen        On
  which X screen number to start\n\n    Mail bug reports and suggestions to <mail@jao.io>\n\n##
  The DBus Interface\n\nWhen compiled with the optional `with_dbus` flag, xmobar can
  be\ncontrolled over dbus. All signals defined in [src/Signal.hs] as `data\nSignalType`
  can now be sent over dbus to xmobar.  Due to current\nlimitations of the implementation
  only one process of xmobar can\nacquire the dbus. This is handled on a first-come-first-served
  basis,\nmeaning that the first process will get the dbus interface. Other\nprocesses
  will run without further problems, yet have no dbus\ninterface.\n\n[src/Signal.hs]:
  https://github.com/jaor/xmobar/blob/master/src/Xmobar/System/Signal.hs\n\n- Bus
  Name: `org.Xmobar.Control`\n- Object Path: `/org/Xmobar/Control`\n- Member Name:
  Any of SignalType, e.g. `string:Reveal`\n- Interface Name: `org.Xmobar.Control`\n\nAn
  example using the `dbus-send` command line utility:\n\n        dbus-send \\\n            --session
  \\\n            --dest=org.Xmobar.Control \\\n            --type=method_call \\\n
  \           --print-reply \\\n            '/org/Xmobar/Control' \\\n            org.Xmobar.Control.SendSignal
  \\\n            \"string:Toggle 0\"\n\nIt is also possible to send multiple signals
  at once:\n\n        # send to another screen, reveal and toggle the persistent flag\n
  \       dbus-send [..] \\\n            \"string:ChangeScreen 0\" \"string:Reveal
  0\" \"string:TogglePersistent\"\n\nThe `Toggle`, `Reveal`, and `Hide` signals take
  an additional integer\nargument that denotes an initial delay, in tenths of a second,
  before\nthe command takes effect.\n\n### Example for using the DBus IPC interface
  with XMonad\n\nBind the key which should {,un}map xmobar to a dummy value. This
  is necessary\nfor {,un}grabKey in xmonad.\n\n    ((0, xK_Alt_L   ), return ())\n\nAlso,
  install `avoidStruts` layout modifier from `XMonad.Hooks.ManageDocks`\n\nFinally,
  install these two event hooks (`handleEventHook` in `XConfig`)\n`myDocksEventHook`
  is a replacement for `docksEventHook` which reacts on unmap\nevents as well (which
  `docksEventHook` doesn't).\n\n    import qualified XMonad.Util.ExtensibleState as
  XS\n\n    data DockToggleTime = DTT { lastTime :: Time } deriving (Eq, Show, Typeable)\n\n
  \   instance ExtensionClass DockToggleTime where\n        initialValue = DTT 0\n\n
  \   toggleDocksHook :: Int -> KeySym -> Event -> X All\n    toggleDocksHook to ks
  ( KeyEvent { ev_event_display = d\n                                     , ev_event_type
  \   = et\n                                     , ev_keycode       = ekc\n                                     ,
  ev_time          = etime\n                                     } ) =\n            io
  (keysymToKeycode d ks) >>= toggleDocks >> return (All True)\n        where\n        toggleDocks
  kc\n            | ekc == kc && et == keyPress = do\n                safeSendSignal
  [\"Reveal 0\", \"TogglePersistent\"]\n                XS.put ( DTT etime )\n            |
  ekc == kc && et == keyRelease = do\n                gap <- XS.gets ( (-) etime .
  lastTime )\n                safeSendSignal [ \"TogglePersistent\"\n                               ,
  \"Hide \" ++ show (if gap < 400 then to else 0)\n                               ]\n
  \           | otherwise = return ()\n\n        safeSendSignal s = catchX (io $ sendSignal
  s) (return ())\n        sendSignal    = withSession . callSignal\n        withSession
  mc = connectSession >>= \\c -> callNoReply c mc >> disconnect c\n        callSignal
  :: [String] -> MethodCall\n        callSignal s = ( methodCall\n                         (
  objectPath_    \"/org/Xmobar/Control\" )\n                         ( interfaceName_
  \"org.Xmobar.Control\"  )\n                         ( memberName_    \"SendSignal\"
  \         )\n                       ) { methodCallDestination = Just $ busName_
  \"org.Xmobar.Control\"\n                         , methodCallBody        = map toVariant
  s\n                         }\n\n    toggleDocksHook _ _ _ = return (All True)\n\n
  \   myDocksEventHook :: Event -> X All\n    myDocksEventHook e = do\n        when
  (et == mapNotify || et == unmapNotify) $\n            whenX ((not `fmap` (isClient
  w)) <&&> runQuery checkDock w) refresh\n        return (All True)\n        where
  w  = ev_window e\n              et = ev_event_type e\n\n\n## The Output Template\n\nThe
  output template must contain at least one command. xmobar will\nparse the template
  and will search for the command to be executed in\nthe `commands` configuration
  option. First an `alias` will be searched\n(plugins such as Weather or Network have
  default aliases, see below).\nAfter that, the command name will be tried. If a command
  is found, the\narguments specified in the `commands` list will be used.\n\nIf no
  command is found in the `commands` list, xmobar will ask the\noperating system to
  execute a program with the name found in the\ntemplate. If the execution is not
  successful an error will be\nreported.\n\nIt's possible to insert in the global
  templates icon directives of the\nform:\n\n     <icon=/path/to/bitmap.xbm/>\n\nwhich
  will produce the expected result. Accepted image formats are XBM\nand XPM (when
  `with_xpm` flag is enabled). If path does not start with\n`\"/\"`, `\"./\"`, `\"../\"`
  it will have `iconRoot ++ \"/\"` prepended to it.\n\nIt's also possible to use action
  directives of the form:\n\n     <action=`command` button=12345>\n\nwhich will be
  executed when clicked on with specified mouse buttons. This tag\ncan be nested,
  allowing different commands to be run depending on button clicked.\n\n## The `commands`
  Configuration Option\n\nThe `commands` configuration option is a list of commands
  information\nand arguments to be used by xmobar when parsing the output template.\nEach
  member of the list consists in a command prefixed by the `Run`\nkeyword. Each command
  has arguments to control the way xmobar is going\nto execute it.\n\nThe option consists
  in a list of commands separated by a comma and\nenclosed by square parenthesis.\n\nExample:\n\n
  \   [Run Memory [\"-t\",\"Mem: <usedratio>%\"] 10, Run Swap [] 10]\n\nto run the
  Memory monitor plugin with the specified template, and the\nswap monitor plugin,
  with default options, every second.  And here's\nan example of a template for the
  commands above using an icon:\n\n    template=\"<icon=/home/jao/.xmobar/mem.xbm/><memory>
  <swap>\"\n\nThis example will run \"xclock\" command when date is clicked:\n\n    template=\"<action=`xclock`>%date%</action>\n\nThe
  only internal available command is `Com` (see below Executing\nExternal Commands).
  All other commands are provided by plugins. xmobar\ncomes with some plugins, providing
  a set of system monitors, a\nstandard input reader, an Unix named pipe reader, a
  configurable date\nplugin, and much more: we list all available plugins below.\n\nOther
  commands can be created as plugins with the Plugin\ninfrastructure. See below.\n\n##
  System Monitor Plugins\n\nThis is the description of the system monitor plugins
  available in\nxmobar.  Some of them are only installed when an optional build option\nis
  set: we mention that fact, when needed, in their description.\n\nEach monitor has
  an `alias` to be used in the output template.\nMonitors have default aliases.  The
  sections below describe every\nmonitor in turn, but before we provide a list of
  the configuration\noptions (or *monitor arguments*) they all share.\n\n### Icon
  patterns\n\nSome monitors allow usage of strings that depend on some integer value\nfrom
  0 to 8 by replacing all occurrences of `\"%%\"` with it\n(i.e. `\"<icon=/path/to/icon_%%.xpm/>\"`
  will be interpreted\nas `\"<icon=/path/to/icon_3.xpm/>\"` when the value is `3`,
  also `\"%\"` is interpreted\nas `\"%\"`, `\"%%\"` as `\"3\"`, `\"%%%\"` as `\"3%\"`,
  `\"%%%%\"` as `\"33\"` and so on). Essentially\nit allows to replace vertical bars
  with custom icons. For example,\n\n    Run Brightness\n      [ \"-t\", \"<ipat>\"\n
  \     , \"--\"\n      , \"--brightness-icon-pattern\", \"<icon=bright_%%.xpm/>\"\n
  \     ] 30\n\nWill display `bright_0.xpm` to `bright_8.xpm` depending on current
  brightness\nvalue.\n\n### Default Monitor Arguments\n\nMonitors accept a common
  set of arguments, described in the first\nsubsection below.  In addition, some monitors
  accept additional options\nthat are specific to them.  When specifying the list
  of arguments in\nyour configuration, the common options come first, followed by
  \"--\",\nfollowed by any monitor-specific options.\n\nThese are the options available
  for all monitors below:\n\n- `-t` _string_  Output template\n    - Template for
  the monitor output. Field names must be enclosed\n      between pointy brackets
  (`<foo>`) and will be substituted by the\n      computed values. You can also specify
  the foreground (and\n      optionally, background) color for a region by bracketing
  it\n      between `<fc=fgcolor>` (or `<fc=fgcolor,bgcolor>`) and\n      `</fc>`.
  The rest of the template is output verbatim.\n    - Long option: `--template`\n
  \   - Default value: per monitor (see above).\n- `-H` _number_ The high threshold.\n
  \   - Numerical values higher than _number_ will be displayed with the\n      color
  specified by `-h` (see below).\n    - Long option: `--High`\n    - Default value:
  66\n- `-L` _number_ The low threshold.\n    - Numerical values higher than _number_
  and lower than the high\n      threshold will be displayed with the color specified
  by `-n`\n      (see below). Values lower than _number_ will use the `-l` color.\n
  \   - Long option: `--Low`\n    - Default value: 33\n- `-h` _color_  High threshold
  color.\n    - Color for displaying values above the high threshold. _color_ can\n
  \     be either a name (e.g. \"blue\") or an hexadecimal RGB (e.g.\n      \"#FF0000\").\n
  \   - Long option: `--high`\n    - Default: none (use the default foreground).\n-
  `-n` _color_  Color for 'normal' values\n    - Color used for values greater than
  the low threshold but lower\n      than the high one.\n    - Long option: `--normal`\n
  \   - Default: none (use the default foreground).\n- `-l` _color_  The low threshold
  color\n    - Color for displaying values below the low threshold.\n    - Long option:
  `--low`\n    - Default: none (use the default foreground).\n- `-S` _boolean_ Display
  optional suffixes\n    - When set to a true designator (\"True\", \"Yes\" or \"On\"),
  optional\n      value suffixes such as the '%' symbol or optional units will be\n
  \     displayed.\n    - Long option: `--suffix`\n    - Default: False.\n- `-p` _number_
  Percentages padding\n    - Width, in number of digits, for quantities representing\n
  \     percentages. For instance `-p 3` means that all percentages\n      in the
  monitor will be represented using 3 digits.\n    - Long option: `--ppad`\n    -
  Default value: 0 (don't pad)\n- `-d` _number_ Decimal digits\n    - Number of digits
  after the decimal period to use in float values.\n    - Long option: `--ddigits`\n
  \   - Default value: 0 (display only integer part)\n- `-m` _number_ Minimum field
  width\n    - Minimum width, in number of characters, of the fields in the\n      monitor
  template. Values whose printed representation is shorter\n      than this value
  will be padded using the padding characters\n      given by the `-c` option with
  the alignment specified by `-a`\n      (see below).\n    - Long option: `--minwidth`\n
  \   - Default: 0\n- `-M` _number_ Maximum field width\n    - Maximum width, in number
  of characters, of the fields in the\n      monitor template. Values whose printed
  representation is longer\n      than this value will be truncated.\n    - Long option:
  `--maxwidth`\n    - Default: 0 (no maximum width)\n- `-e` _string_ Maximum width
  ellipsis\n    - Ellipsis to be added to the field when it has reached its\n      max
  width.\n    - Long option: `--maxwidthellipsis`\n    - Default: \"\" (no ellipsis)\n-
  `-w` _number_ Fixed field width\n    - All fields will be set to this width, padding
  or truncating as\n      needed.\n    - Long option: `--width`\n    - Default: 0
  (variable width)\n- `-T` _number_ Maximum total width\n    - Maximum total width
  of the text.\n    - Long option: `--maxtwidth`\n    - Default: 0 (no limit)\n- `-E`
  _string_ Maximum total width ellipsis\n    - Ellipsis to be added to the total text
  when it has reached\n      its max width.\n    - Long option: `--maxtwidthellipsis`\n
  \   - Default: \"\" (no ellipsis)\n- `-c` _string_\n    - Characters used for padding.
  The characters of _string_ are used\n      cyclically. E.g., with `-P +- -w 6`,
  a field with value \"foo\"\n      will be represented as \"+-+foo\".\n    - Long
  option: `--padchars`\n    - Default value: \" \"\n- `-a` r|l Field alignment\n    -
  Whether to use right (r) or left (l) alignment of field values\n      when padding.\n
  \   - Long option: `--align`\n    - Default value: r (padding to the left)\n- `-b`
  _string_ Bar background\n    - Characters used, cyclically, to draw the background
  of bars.\n      For instance, if you set this option to \"·.\", an empty bar will\n
  \     look like this: `·.·.·.·.·.`\n    - Long option: `--bback`\n    - Default
  value: \":\"\n- `-f` _string_ Bar foreground\n    - Characters used, cyclically,
  to draw the foreground of bars.\n    - Long option: `--bfore`\n    - Default value:
  \"#\"\n- `-W` _number_ Bar width\n    - Total number of characters used to draw
  bars.\n    - Long option: `--bwidth`\n    - Default value: 10\n- `-x` _string_ N/A
  string\n    - String to be used when the monitor is not available\n    - Long option:
  `--nastring`\n    - Default value: \"N/A\"\n\nCommands' arguments must be set as
  a list. E.g.:\n\n    Run Weather \"EGPF\" [\"-t\", \"<station>: <tempC>C\"] 36000\n\nIn
  this case xmobar will run the weather monitor, getting information\nfor the weather
  station ID EGPF (Glasgow Airport, as a homage to GHC)\nevery hour (36000 tenth of
  seconds), with a template that will output\nsomething like:\n\n    Glasgow Airport:
  16.0C\n\n\n### `Uptime Args RefreshRate`\n\n- Aliases to `uptime`\n- Args: default
  monitor arguments. The low and high\n  thresholds refer to the number of days.\n-
  Variables that can be used with the `-t`/`--template` argument:\n  `days`, `hours`,
  `minutes`, `seconds`. The total uptime is the\n  sum of all those fields. You can
  set the `-S` argument to \"True\"\n  to add units to the display of those numeric
  fields.\n- Default template: `Up: <days>d <hours>h <minutes>m`\n\n### `Weather StationID
  Args RefreshRate`\n\n- Aliases to the Station ID: so `Weather \"LIPB\" []` can be
  used in\n  template as `%LIPB%`\n- Thresholds refer to temperature in the selected
  units\n- Args: default monitor arguments, plus:\n  - `--weathers` _string_ : display
  a default string when the `weather`\n    variable is not reported.\n    - short
  option: `-w`\n    - Default: \"\"\n  - `--useManager` _bool_ : Whether to use one
  single manager per monitor for\n    managing network connections or create a new
  one every time a connection is\n    made.\n    - Short option: `-m`\n    - Default:
  True\n- Variables that can be used with the `-t`/`--template` argument:\n\t    `station`,
  `stationState`, `year`, `month`, `day`, `hour`,\n\t    `windCardinal`, `windAzimuth`,
  `windMph`, `windKnots`, `windMs`, `windKmh`\n        `visibility`, `skyCondition`,
  `weather`, `tempC`, `tempF`,\n\t    `dewPointC`, `dewPointF`, `rh`, `pressure`\n-
  Default template: `<station>: <tempC>C, rh <rh>% (<hour>)`\n- Retrieves weather
  information from http://tgftp.nws.noaa.gov.\n\n### `WeatherX StationID SkyConditions
  Args RefreshRate`\n\n- Works in the same way as `Weather`, but takes an additional\n
  \ argument, a list of pairs from sky conditions to their replacement\n  (typically
  a unicode string or an icon specification).\n- Use the variable `skyConditionS`
  to display the replacement of the\n  corresponding sky condition.  All other `Weather`
  template variables\n  are available as well.\n\nFor example:\n\n```haskell\n  WeatherX
  \"LEBL\"\n           [ (\"clear\", \"\U0001F323\")\n           , (\"sunny\", \"\U0001F323\")\n
  \          , (\"mostly clear\", \"\U0001F324\")\n           , (\"mostly sunny\",
  \"\U0001F324\")\n           , (\"partly sunny\", \"⛅\")\n           , (\"fair\",
  \"\U0001F311\")\n           , (\"cloudy\",\"☁\")\n           , (\"overcast\",\"☁\")\n
  \          , (\"partly cloudy\", \"⛅\")\n           , (\"mostly cloudy\", \"\U0001F327\")\n
  \          , (\"considerable cloudiness\", \"⛈\")]\n           [\"-t\", \"<fn=2><skyConditionS></fn>
  <tempC>° <rh>%  <windKmh> (<hour>)\"\n           , \"-L\",\"10\", \"-H\", \"25\",
  \"--normal\", \"black\"\n           , \"--high\", \"lightgoldenrod4\", \"--low\",
  \"darkseagreen4\"]\n           18000\n```\n\nAs mentioned, the replacement string
  can also be an icon\nspecification, such as `(\"clear\", \"<icon=weather-clear.xbm/>\")`.\n\n###
  `Network Interface Args RefreshRate`\n\n- Aliases to the interface name: so `Network
  \"eth0\" []` can be used as\n  `%eth0%`\n- Thresholds refer to velocities expressed
  in Kb/s\n- Args: default monitor arguments, plus:\n  - `--rx-icon-pattern`: dynamic
  string for reception rate in `rxipat`.\n  - `--tx-icon-pattern`: dynamic string
  for transmission rate in `txipat`.\n- Variables that can be used with the `-t`/`--template`
  argument:\n  `dev`, `rx`, `tx`, `rxbar`, `rxvbar`, `rxipat`, `txbar`, `txvbar`,\n
  \ `txipat`. Reception and transmission rates (`rx` and `tx`) are displayed\n  by
  default as Kb/s, without any suffixes, but you can set the `-S` to\n  \"True\" to
  make them displayed with adaptive units (Kb/s, Mb/s, etc.).\n- Default template:
  `<dev>: <rx>KB|<tx>KB`\n\n### `DynNetwork Args RefreshRate`\n\n- Active interface
  is detected automatically\n- Aliases to \"dynnetwork\"\n- Thresholds are expressed
  in Kb/s\n- Args: default monitor arguments, plus:\n  - `--rx-icon-pattern`: dynamic
  string for reception rate in `rxipat`.\n  - `--tx-icon-pattern`: dynamic string
  for transmission rate in `txipat`\n  - `--devices`: comma-separated list of devices
  to show.\n- Variables that can be used with the `-t`/`--template` argument:\n  `dev`,
  `rx`, `tx`, `rxbar`, `rxvbar`, `rxipat`, `txbar`, `txvbar`,\n  `txipat`. Reception
  and transmission rates (`rx` and `tx`) are displayed\n  in Kbytes per second, and
  you can set the `-S` to \"True\" to make them\n  displayed with units (the string
  \"Kb/s\").\n- Default template: `<dev>: <rx>KB|<tx>KB`\n- Example of usage of `--devices`
  option: `[\"--\", \"--devices\", \"wlp2s0,enp0s20f41\"]`\n\n### `Wireless Interface
  Args RefreshRate`\n\n- If set to \"\", first suitable wireless interface is used.\n-
  Aliases to the interface name with the suffix \"wi\": thus, `Wireless\n  \"wlan0\"
  []` can be used as `%wlan0wi%`, and `Wireless \"\" []` as `%wi%`.\n- Args: default
  monitor arguments, plus:\n  - `--quality-icon-pattern`: dynamic string for connection
  quality in `qualityipat`.\n- Variables that can be used with the `-t`/`--template`
  argument:\n            `ssid`, `signal`, `quality`, `qualitybar`, `qualityvbar`,
  `qualityipat`\n- Thresholds refer to link quality on a `[0, 100]` scale. Note that\n
  \ `quality` is calculated from `signal` (in dBm) by a possibly lossy\n  conversion.
  It is also not taking into account many factors such as\n  noise level, air busy
  time, transcievers' capabilities and the\n  others which can have drastic impact
  on the link performance.\n- Default template: `<ssid> <quality>`\n- To activate
  this plugin you must pass `--flags=\"with_nl80211\"` or\n  `--flags=\"with_iwlib\"`
  during compilation\n\n### `Memory Args RefreshRate`\n\n- Aliases to `memory`\n-
  Args: default monitor arguments, plus:\n  - `--used-icon-pattern`: dynamic string
  for used memory ratio in `usedipat`.\n  - `--free-icon-pattern`: dynamic string
  for free memory ratio in `freeipat`.\n  - `--available-icon-pattern`: dynamic string
  for available memory ratio in `availableipat`.\n- Thresholds refer to percentage
  of used memory\n- Variables that can be used with the `-t`/`--template` argument:\n
  \            `total`, `free`, `buffer`, `cache`, `available`, `used`,\n             `usedratio`,
  `usedbar`, `usedvbar`, `usedipat`,\n             `freeratio`, `freebar`, `freevbar`,
  `freeipat`,\n             `availableratio`, `availablebar`, `availablevbar`, `availableipat`\n-
  Default template: `Mem: <usedratio>% (<cache>M)`\n\n### `Swap Args RefreshRate`\n\n-
  Aliases to `swap`\n- Args: default monitor arguments\n- Thresholds refer to percentage
  of used swap\n- Variables that can be used with the `-t`/`--template` argument:\n\t
  \   `total`, `used`, `free`, `usedratio`\n- Default template: `Swap: <usedratio>%`\n\n###
  `Cpu Args RefreshRate`\n\n- Aliases to `cpu`\n- Args: default monitor arguments,
  plus:\n  - `--load-icon-pattern`: dynamic string for cpu load in `ipat`\n- Thresholds
  refer to percentage of CPU load\n- Variables that can be used with the `-t`/`--template`
  argument:\n\t    `total`, `bar`, `vbar`, `ipat`, `user`, `nice`, `system`, `idle`,
  `iowait`\n- Default template: `Cpu: <total>%`\n\n### `MultiCpu Args RefreshRate`\n\n-
  Aliases to `multicpu`\n- Args: default monitor arguments, plus:\n  - `--load-icon-pattern`:
  dynamic string for overall cpu load in `ipat`.\n  - `--load-icon-patterns`: dynamic
  string for each cpu load in `autoipat`, `ipat{i}`.\n                              This
  option can be specified several times. nth option\n                              corresponds
  to nth cpu.\n  - `--fallback-icon-pattern`: dynamic string used by `autoipat` and
  `ipat{i}` when no\n                             `--load-icon-patterns` has been
  provided for `cpu{i}`\n  - `--contiguous-icons`: flag (no value needs to be provided)
  that\n                          causes the load icons to be drawn without padding.\n-
  Thresholds refer to percentage of CPU load\n- Variables that can be used with the
  `-t`/`--template` argument:\n\t    `autototal`, `autobar`, `autovbar`, `autoipat`,
  `autouser`, `autonice`,\n\t    `autosystem`, `autoidle`, `total`, `bar`, `vbar`,
  `ipat`, `user`, `nice`,\n\t    `system`, `idle`, `total0`, `bar0`, `vbar0`, `ipat0`,
  `user0`, `nice0`,\n\t    `system0`, `idle0`, ...\n  The auto* variables automatically
  detect the number of CPUs on the system\n  and display one entry for each.\n- Default
  template: `Cpu: <total>%`\n\n### `Battery Args RefreshRate`\n\n- Same as `BatteryP
  [\"BAT\", \"BAT0\", \"BAT1\", \"BAT2\"] Args RefreshRate`.\n\n### `BatteryP Dirs
  Args RefreshRate`\n\n- Aliases to `battery`\n\n- Dirs: list of directories in `/sys/class/power_supply/`
  where to\n  look for the ACPI files of each battery. Example:\n  `[\"BAT0\",\"BAT1\",\"BAT2\"]`.
  Only up to 3 existing directories will be\n  searched.\n\n- Args: default monitor
  arguments, plus the following specific ones\n  (these options, being specific to
  the monitor, are to be specified\n  after a `--` in the argument list):\n  - `-O`:
  string for AC \"on\" status (default: \"On\")\n  - `-i`: string for AC \"idle\"
  status (default: \"On\")\n  - `-o`: string for AC \"off\" status (default: \"Off\")\n
  \ - `-L`: low power (`watts`) threshold (default: 10)\n  - `-H`: high power threshold
  (default: 12)\n  - `-l`: color to display power lower than the `-L` threshold\n
  \ - `-m`: color to display power lower than the `-H` threshold\n  - `-h`: color
  to display power higher than the `-H` threshold\n  - `-p`: color to display positive
  power (battery charging)\n  - `-f`: file in `/sys/class/power_supply` with AC info
  (default:\n    \"AC/online\")\n  - `-A`: a number between 0 and 100, threshold below
  which the action\n    given by `-a`, if any, is performed (default: 5)\n  - `-a`:
  a string with a system command that is run when the\n    percentage left in the
  battery is less or equal than the threshold\n    given by the `-A` option.  If not
  present, no action is\n    undertaken.\n  - `-P`: to include a percentage symbol
  in `left`.\n  - `--on-icon-pattern`: dynamic string for current battery charge\n
  \   when AC is \"on\" in `leftipat`.\n  - `--off-icon-pattern`: dynamic string for
  current battery charge\n    when AC is \"off\" in `leftipat`.\n  - `--idle-icon-pattern`:
  dynamic string for current battery charge\n    when AC is \"idle\" in `leftipat`.\n
  \ - `--lows`: string for AC \"off\" status and power lower than the `-L`\n    threshold
  (default: \"\")\n  - `--mediums`: string for AC \"off\" status and power lower than
  the `-H`\n    threshold (default: \"\")\n  - `--highs`: string for AC \"off\" status
  and power higher than the `-H`\n    threshold (default: \"\")\n\n\n- Variables that
  can be used with the `-t`/`--template` argument:\n\t    `left`, `leftbar`, `leftvbar`,
  `leftipat`, `timeleft`, `watts`, `acstatus`\n- Default template: `Batt: <watts>,
  <left>% / <timeleft>`\n- Example (note that you need \"--\" to separate regular
  monitor options from\n  Battery's specific ones):\n\n         Run BatteryP [\"BAT0\"]\n
  \                     [\"-t\", \"<acstatus><watts> (<left>%)\",\n                       \"-L\",
  \"10\", \"-H\", \"80\", \"-p\", \"3\",\n                       \"--\", \"-O\", \"<fc=green>On</fc>
  - \", \"-i\", \"\",\n                       \"-L\", \"-15\", \"-H\", \"-5\",\n                       \"-l\",
  \"red\", \"-m\", \"blue\", \"-h\", \"green\"\n                       \"-a\", \"notify-send
  -u critical 'Battery running out!!'\",\n                       \"-A\", \"3\"]\n
  \                     600\n\n  In the above example, the thresholds before the \"--\"
  separator\n  affect only the `<left>` and `<leftbar>` fields, while those after\n
  \ the separator affect how `<watts>` is displayed. For this monitor,\n  neither
  the generic nor the specific options have any effect on\n  `<timeleft>`.  We are
  also telling the monitor to execute the unix\n  command `notify-send` when the percentage
  left in the battery\n  reaches 6%.\n\n  It is also possible to specify template
  variables in the `-O` and\n  `-o` switches, as in the following example:\n\n         Run
  BatteryP [\"BAT0\"]\n                      [\"-t\", \"<acstatus>\"\n                      ,
  \"-L\", \"10\", \"-H\", \"80\"\n                      , \"-l\", \"red\", \"-h\",
  \"green\"\n                      , \"--\", \"-O\", \"Charging\", \"-o\", \"Battery:
  <left>%\"\n                      ] 10\n\n- The \"idle\" AC state is selected whenever
  the AC power entering the\n  battery is zero.\n\n### `BatteryN Dirs Args RefreshRate
  Alias`\n\nWorks like `BatteryP`, but lets you specify an alias for the monitor\nother
  than \"battery\".  Useful in case you one separate monitors for\nmore than one battery.\n\n###
  `TopProc Args RefreshRate`\n\n- Aliases to `top`\n- Args: default monitor arguments.
  The low and high\n  thresholds (`-L` and `-H`) denote, for memory entries, the percent\n
  \ of the process memory over the total amount of memory currently in\n  use and,
  for cpu entries, the activity percentage (i.e., the value\n  of `cpuN`, which takes
  values between 0 and 100).\n- Variables that can be used with the `-t`/`--template`
  argument:\n\t    `no`, `name1`, `cpu1`, `both1`, `mname1`, `mem1`, `mboth1`,\n            `name2`,
  `cpu2`, `both2`, `mname2`, `mem2`, `mboth2`, ...\n- Default template: `<both1>`\n-
  Displays the name and cpu/mem usage of running processes (`bothn`\n  and `mboth`
  display both, and is useful to specify an overall\n  maximum and/or minimum width,
  using the `-m`/`-M` arguments. `no` gives\n  the total number of processes.\n\n###
  `TopMem Args RefreshRate`\n\n- Aliases to `topmem`\n- Args: default monitor arguments.
  The low and high\n  thresholds (`-L` and `-H`) denote the percent of the process
  memory\n  over the total amount of memory currently in use.\n- Variables that can
  be used with the `-t`/`--template` argument:\n\t    `name1`, `mem1`, `both1`, `name2`,
  `mem2`, `both2`, ...\n- Default template: `<both1>`\n- Displays the name and RSS
  (resident memory size) of running\n  processes (`bothn` displays both, and is useful
  to specify an\n  overall maximum and/or minimum width, using the `-m`/`-M` arguments.\n\n###
  `DiskU Disks Args RefreshRate`\n\n- Aliases to `disku`\n- Disks: list of pairs of
  the form (device or mount point, template),\n  where the template can contain `<size>`,
  `<free>`, `<used>`, `<freep>` or\n  `<usedp>`, `<freebar>`, `<freevbar>`, `<freeipat>`,
  `<usedbar>`,\n  `<usedvbar>` or `<usedipat>` for total, free, used, free percentage
  and\n  used percentage of the given file system capacity.\n- Thresholds refer to
  usage percentage.\n- Args: default monitor arguments. `-t`/`--template` is ignored.
  Plus\n  - `--free-icon-pattern`: dynamic string for free disk space in `freeipat`.\n
  \ - `--used-icon-pattern`: dynamic string for used disk space in `usedipat`.\n-
  Default template: none (you must specify a template for each file system).\n- Example:\n\n
  \        DiskU [(\"/\", \"<used>/<size>\"), (\"sdb1\", \"<usedbar>\")]\n               [\"-L\",
  \"20\", \"-H\", \"50\", \"-m\", \"1\", \"-p\", \"3\"]\n               20\n\n###
  `DiskIO Disks Args RefreshRate`\n\n- Aliases to `diskio`\n- Disks: list of pairs
  of the form (device or mount point, template),\n  where the template can contain
  `<total>`, `<read>`, `<write>` for\n  total, read and write speed, respectively,
  as well as `<totalb>`,\n  `<readb>`, `<writeb>`, which report number of bytes during
  the last\n  refresh period rather than speed. There are also bar versions of\n  each:
  `<totalbar>`, `<totalvbar>`, `<totalipat>`, `<readbar>`,\n  `<readvbar>`, `<readipat>`,
  `<writebar>`, `<writevbar>`, and\n  `<writeipat>`; and their \"bytes\" counterparts:
  `<totalbbar>`,\n  `<totalbvbar>`, `<totalbipat>`, `<readbbar>`, `<readbvbar>`,\n
  \ `<readbipat>`, `<writebbar>`, `<writebvbar>`, and `<writebipat>`.\n- Thresholds
  refer to speed in b/s\n- Args: default monitor arguments. `-t`/`--template` is ignored.
  Plus\n  - `--total-icon-pattern`: dynamic string for total disk I/O in `<totalipat>`.\n
  \ - `--write-icon-pattern`: dynamic string for write disk I/O in `<writeipat>`.\n
  \ - `--read-icon-pattern`: dynamic string for read disk I/O in `<readipat>`.\n-
  Default template: none (you must specify a template for each file system).\n- Example:\n\n
  \        DiskIO [(\"/\", \"<read> <write>\"), (\"sdb1\", \"<total>\")] [] 10\n\n###
  `ThermalZone Number Args RefreshRate`\n\n- Aliases to \"thermaln\": so `ThermalZone
  0 []` can be used in template\n  as `%thermal0%`\n- Thresholds refer to temperature
  in degrees\n- Args: default monitor arguments\n- Variables that can be used with
  the `-t`/`--template` argument:\n\t    `temp`\n- Default template: `<temp>C`\n-
  This plugin works only on systems with devices having thermal zone.\n  Check directories
  in `/sys/class/thermal` for possible values of the\n  zone number (e.g., 0 corresponds
  to `thermal_zone0` in that\n  directory).\n- Example:\n\n         Run ThermalZone
  0 [\"-t\",\"<id>: <temp>C\"] 30\n\n#### `Thermal Zone Args RefreshRate`\n\n- **This
  plugin is deprecated. Use `ThermalZone` instead.**\n\n- Aliases to the Zone: so
  `Thermal \"THRM\" []` can be used in template\n  as `%THRM%`\n- Args: default monitor
  arguments\n- Thresholds refer to temperature in degrees\n- Variables that can be
  used with the `-t`/`--template` argument:\n\t    `temp`\n- Default template: `Thm:
  <temp>C`\n- This plugin works only on systems with devices having thermal zone.\n
  \ Check directories in /proc/acpi/thermal_zone for possible values.\n- Example:\n\n
  \        Run Thermal \"THRM\" [\"-t\",\"iwl4965-temp: <temp>C\"] 50\n\n### `CpuFreq
  Args RefreshRate`\n\n- Aliases to `cpufreq`\n- Args: default monitor arguments\n-
  Thresholds refer to frequency in GHz\n- Variables that can be used with the `-t`/`--template`
  argument:\n\t    `cpu0`, `cpu1`, ..,  `cpuN`\n- Default template: `Freq: <cpu0>GHz`\n-
  This monitor requires acpi_cpufreq module to be loaded in kernel\n- Example:\n\n
  \        Run CpuFreq [\"-t\", \"Freq:<cpu0>|<cpu1>GHz\", \"-L\", \"0\", \"-H\",
  \"2\",\n                      \"-l\", \"lightblue\", \"-n\",\"white\", \"-h\", \"red\"]
  50\n\n### `CoreTemp Args RefreshRate`\n\n- Aliases to `coretemp`\n- Args: default
  monitor arguments\n- Thresholds refer to temperature in degrees\n- Variables that
  can be used with the `-t`/`--template` argument:\n\t    `core0`, `core1`, ..,  `coreN`\n-
  Default template: `Temp: <core0>C`\n- This monitor requires coretemp module to be
  loaded in kernel\n- Example:\n\n         Run CoreTemp [\"-t\", \"Temp:<core0>|<core1>C\",\n
  \                      \"-L\", \"40\", \"-H\", \"60\",\n                       \"-l\",
  \"lightblue\", \"-n\", \"gray90\", \"-h\", \"red\"] 50\n\n### `MultiCoreTemp Args
  RefreshRate`\n\n- Aliases to `multicoretemp`\n- Args: default monitor arguments,
  plus:\n  - `--max-icon-pattern`: dynamic string for overall cpu load in `maxipat`.\n
  \ - `--avg-icon-pattern`: dynamic string for overall cpu load in `avgipat`.\n  -
  `--mintemp`: temperature in degree Celsius, that sets the lower\n    limit for percentage
  calculation.\n  - `--maxtemp`: temperature in degree Celsius, that sets the upper\n
  \   limit for percentage calculation.\n- Thresholds refer to temperature in degree
  Celsius\n- Variables that can be used with the `-t`/`--template` argument:\n            `max`,
  `maxpc`, `maxbar`, `maxvbar`, `maxipat`,\n            `avg`, `avgpc`, `avgbar`,
  `avgvbar`, `avgipat`,\n            `core0`, `core1`, ..., `coreN`\n\n  The *pc,
  *bar, *vbar and *ipat variables are showing percentages on the scale\n  defined
  by `--mintemp` and `--maxtemp`.\n  The max* and avg* variables to the highest and
  the average core temperature.\n- Default template: `Temp: <max>°C - <maxpc>%`\n-
  This monitor requires coretemp module to be loaded in kernel\n- Example:\n\n         Run
  MultiCoreTemp [\"-t\", \"Temp: <avg>°C | <avgpc>%\",\n                            \"-L\",
  \"60\", \"-H\", \"80\",\n                            \"-l\", \"green\", \"-n\",
  \"yellow\", \"-h\", \"red\"\n                            \"--\", \"--mintemp\",
  \"20\", \"--maxtemp\", \"100\"] 50\n\n### `Volume Mixer Element Args RefreshRate`\n\n-
  Aliases to the mixer name and element name separated by a colon. Thus,\n  `Volume
  \"default\" \"Master\" [] 10` can be used as `%default:Master%`.\n- Args: default
  monitor arguments. Also accepts:\n    - `-O` _string_ On string\n        - The string
  used in place of `<status>` when the mixer element\n          is on. Defaults to
  \"[on]\".\n        - Long option: `--on`\n    - `-o` _string_ Off string\n        -
  The string used in place of `<status>` when the mixer element\n          is off.
  Defaults to \"[off]\".\n        - Long option: `--off`\n    - `-C` _color_ On color\n
  \       - The color to be used for `<status>` when the mixer element\n          is
  on. Defaults to \"green\".\n        - Long option: `--onc`\n    - `-c` _color_ Off
  color\n        - The color to be used for `<status>` when the mixer element\n          is
  off. Defaults to \"red\".\n        - Long option: `--offc`\n    - `--highd` _number_
  High threshold for dB. Defaults to -5.0.\n    - `--lowd` _number_ Low threshold
  for dB. Defaults to -30.0.\n    - `--volume-icon-pattern` _string_ dynamic string
  for current volume in `volumeipat`.\n    - `-H` _number_ High threshold for volume
  (in %). Defaults to 60.0.\n        - Long option: `--highv`\n    - `-L` _number_
  Low threshold for volume (in %). Defaults to 20.0.\n        - Long option: `--lowv`\n
  \   - `-h`: _string_ High string\n        - The string added in front of `<status>`
  when the mixer element\n          is on and the volume percentage is higher than
  the `-H` threshold.\n          Defaults to \"\".\n        - Long option: `--highs`\n
  \   - `-m`: _string_ Medium string\n        - The string added in front of `<status>`
  when the mixer element\n          is on and the volume percentage is lower than
  the `-H` threshold.\n          Defaults to \"\".\n        - Long option: `--mediums`\n
  \   - `-l`: _string_ Low string\n        - The string added in front of `<status>`
  when the mixer element\n          is on and the volume percentage is lower than
  the `-L` threshold.\n          Defaults to \"\".\n        - Long option: `--lows`\n-
  Variables that can be used with the `-t`/`--template` argument:\n            `volume`,
  `volumebar`, `volumevbar`, `volumeipat`, `dB`, `status`,\n            `volumestatus`\n-
  Note that `dB` might only return 0 on your system. This is known\n  to happen on
  systems with a pulseaudio backend.\n- Default template: `Vol: <volume>% <status>`\n-
  Requires the package [alsa-core] and [alsa-mixer] installed in your\n  system. In
  addition, to activate this plugin you must pass\n  `--flags=\"with_alsa\"` during
  compilation.\n\n### `Alsa Mixer Element Args`\n\nLike [Volume](#volume-mixer-element-args-refreshrate),
  but with the\nfollowing differences:\n- Uses event-based refreshing via `alsactl
  monitor` instead of\n  polling, so it will refresh instantly when there's a volume
  change,\n  and won't use CPU until a change happens.\n- Aliases to `alsa:` followed
  by the mixer name and element name\n  separated by a colon. Thus, `Alsa \"default\"
  \"Master\" []` can be used\n  as `%alsa:default:Master%`.\n- Additional options
  (after the `--`):\n    - `--alsactl=/path/to/alsactl`\n        - If this option
  is not specified, `alsactl` will be sought in\n          your `PATH` first, and
  failing that, at `/usr/sbin/alsactl`\n          (this is its location on Debian
  systems. `alsactl monitor`\n          works as a non-root user despite living in
  `/usr/sbin`.).\n- `stdbuf` (from coreutils) must be (and most probably already is)
  in\n  your `PATH`.\n\n### `MPD Args RefreshRate`\n\n- This monitor will only be
  compiled if you ask for it using the\n  `with_mpd` flag. It needs [libmpd] 5.0 or
  later (available on Hackage).\n- Aliases to `mpd`\n- Args: default monitor arguments.
  In addition you can provide `-P`,\n  `-S` and `-Z`, with an string argument, to
  represent the playing,\n  stopped and paused states in the `statei` template field.
  \ The\n  environment variables `MPD_HOST` and `MPD_PORT` are used to\n  configure
  the mpd server to communicate with, unless given in the\n  additional arguments
  `-p` (`--port`) and `-h` (`--host`). Also\n  available:\n  - `lapsed-icon-pattern`:
  dynamic string for current track position in `ipat`.\n- Variables that can be used
  with the `-t`/`--template` argument:\n             `bar`, `vbar`, `ipat`, `state`,
  `statei`, `volume`, `length`,\n             `lapsed`, `remaining`,\n             `plength`
  (playlist length), `ppos` (playlist position),\n             `flags` (ncmpcpp-style
  playback mode),\n             `name`, `artist`, `composer`, `performer`,\n             `album`,
  `title`, `track`, `file`, `genre`, `date`\n- Default template: `MPD: <state>`\n-
  Example (note that you need \"--\" to separate regular monitor options from\n  MPD's
  specific ones):\n\n         Run MPD [\"-t\",\n                  \"<composer> <title>
  (<album>) <track>/<plength> <statei> [<flags>]\",\n                  \"--\", \"-P\",
  \">>\", \"-Z\", \"|\", \"-S\", \"><\"] 10\n\n### `Mpris1 PlayerName Args RefreshRate`\n\n-
  Aliases to `mpris1`\n- Requires [dbus] and [text] packages.\n  To activate, pass
  `--flags=\"with_mpris\"` during compilation.\n- PlayerName: player supporting MPRIS
  v1 protocol.  Some players need\n  this to be an all lowercase name (e.g. \"spotify\"),
  but some others\n  don't.\n- Args: default monitor arguments.\n- Variables that
  can be used with the `-t`/`--template` argument:\n            `album`, `artist`,
  `arturl`, `length`, `title`, `tracknumber`\n- Default template: `<artist> - <title>`\n-
  Example:\n\n         Run Mpris1 \"clementine\" [\"-t\", \"<artist> - [<tracknumber>]
  <title>\"] 10\n\n### `Mpris2 PlayerName Args RefreshRate`\n\n- Aliases to `mpris2`\n-
  Requires [dbus] and [text] packages.\n  To activate, pass `--flags=\"with_mpris\"`
  during compilation.\n- PlayerName: player supporting MPRIS v2 protocol.  Some players
  need\n  this to be an all lowercase name (e.g. \"spotify\"), but some others\n  don't.\n-
  Args: default monitor arguments.\n- Variables that can be used with the `-t`/`--template`
  argument:\n            `album`, `artist`, `arturl`, `length`, `title`,\n            `tracknumber`,
  `composer`, `genre`\n- Default template: `<artist> - <title>`\n- Example:\n\n         Run
  Mpris2 \"spotify\" [\"-t\", \"<artist> - [<composer>] <title>\"] 10\n\n### `Mail
  Args Alias`\n\n- Args: list of maildirs in form\n  `[(\"name1\",\"path1\"),...]`.
  Paths may start with a '~'\n  to expand to the user's home directory.\n- This plugin
  requires inotify support in your Linux kernel and the\n  [hinotify] package. To
  activate, pass `--flags=\"with_inotify\"`\n  during compilation.\n- Example:\n\n
  \        Run Mail [(\"inbox\", \"~/var/mail/inbox\"),\n                   (\"lists\",
  \"~/var/mail/lists\")]\n                  \"mail\"\n\n### `MailX Args Opts Alias`\n\n-
  Args: list of maildirs in form\n  `[(\"name1\",\"path1\",\"color1\"),...]`. Paths
  may start with a '~'\n  to expand to the user's home directory.  When mails are
  present,\n  counts are displayed with the given name and color.\n- Opts is a possibly
  empty list of options, as flags. Possible values:\n   -d dir  --dir dir a string
  giving the base directory where maildir files with\n                     a relative
  path live.\n   -p prefix --prefix prefix  a string giving a prefix for the list\n
  \                     of displayed mail counts\n   -s suffix --suffix suffix  a
  string giving a suffix for the list\n                      of displayed mail counts\n-
  This plugin requires inotify support in your Linux kernel and the\n  [hinotify]
  package. To activate, pass `--flags=\"with_inotify\"`\n  during compilation.\n-
  Example:\n\n         Run MailX [(\"I\", \"inbox\", \"green\"),\n                    (\"L\",
  \"lists\", \"orange\")]\n                   [\"-d\", \"~/var/mail\", \"-p\", \"
  \", \"-s\", \" \"]\n                   \"mail\"\n\n\n### `MBox Mboxes Opts Alias`\n\n-
  Mboxes a list of mbox files of the form `[(\"name\", \"path\", \"color\")]`,\n  where
  name is the displayed name, path the absolute or relative (to\n  BaseDir) path of
  the mbox file, and color the color to use to display\n  the mail count (use an empty
  string for the default).\n- Opts is a possibly empty list of options, as flags.
  Possible values:\n   -a  --all (no arg)  Show all mailboxes, even if empty.\n   -u
  (no arg) Show only the mailboxes' names, sans counts.\n   -d dir  --dir dir a string
  giving the base directory where mbox files with\n                     a relative
  path live.\n   -p prefix --prefix prefix  a string giving a prefix for the list\n
  \                     of displayed mail counts\n   -s suffix --suffix suffix  a
  string giving a suffix for the list\n                      of displayed mail counts\n-
  Paths may start with a '~' to expand to the user's home directory.\n- This plugin
  requires inotify support in your Linux kernel and the\n  [hinotify] package. To
  activate, pass `--flags=\"with_inotify\"`\n  during compilation.\n- Example. The
  following command look for mails in `/var/mail/inbox`\n  and `~/foo/mbox`, and will
  put a space in front of the printed string\n  (when it's not empty); it can be used
  in the template with the alias\n  `mbox`:\n\n         Run MBox [(\"I \", \"inbox\",
  \"red\"), (\"O \", \"~/foo/mbox\", \"\")]\n                  [\"-d\", \"/var/mail/\",
  \"-p\", \" \"] \"mbox\"\n\n### `XPropertyLog PropName`\n\n- Aliases to `PropName`\n-
  Reads the X property named by `PropName` (a string) and displays its\n  value. The
  [examples/xmonadpropwrite.hs script] in xmobar's\n  distribution can be used to
  set the given property from the output\n  of any other program or script.\n\n[examples/xmonadpropwrite.hs
  script]: https://github.com/jaor/xmobar/raw/master/examples/xmonadpropwrite.hs\n\n###
  `UnsafeXPropertyLog PropName`\n\n- Aliases to `PropName`\n- Same as `XPropertyLog`,
  but the input is not filtered to avoid\n  injection of actions (cf. `UnsafeXMonadLog`).
  \ The program writing\n  the value of the read property is responsible of performing
  any\n  needed cleanups.\n\n### `NamedXPropertyLog PropName Alias`\n\n- Aliases to
  `Alias`\n- Same as `XPropertyLog`, but a custom alias can be specified.\n\n### `NamedXPropertyLog
  PropName Alias`\n\n- Aliases to `Alias`\n- Same as `UnsafeXPropertyLog`, but a custom
  alias can be specified.\n\n### `Brightness Args RefreshRate`\n\n- Aliases to `bright`\n-
  Args: default monitor arguments, plus the following specif ones:\n    - `-D`: directory
  in `/sys/class/backlight/` with files in it\n       (default: \"acpi_video0\")\n
  \   - `-C`: file with the current brightness (default:\n       actual_brightness)\n
  \   - `-M`: file with the maximum brightness (default:\n       max_brightness)\n
  \   - `--brightness-icon-pattern`: dynamic string for current brightness in `ipat`.\n-
  Variables that can be used with the `-t`/`--template` argument:\n\t    `vbar`, `percent`,
  `bar`, `ipat`\n- Default template: `<percent>`\n- Example:\n\n       Run Brightness
  [\"-t\", \"<bar>\"] 60\n\n### `Kbd Opts`\n\n- Registers to XKB/X11-Events and output
  the currently active keyboard layout.\n  Supports replacement of layout names.\n-
  Aliases to `kbd`\n- Opts is a list of tuples:\n    -  first element of the tuple
  is the search string\n    -  second element of the tuple is the corresponding replacement\n-
  Example:\n\n\t\tRun Kbd [(\"us(dvorak)\", \"DV\"), (\"us\", \"US\")]\n\n### `Locks`\n\n-
  Displays the status of Caps Lock, Num Lock and Scroll Lock.\n- Aliases to `locks`\n-
  Example:\n\n\tRun Locks\n\n### `CatInt n filename`\n\n- Reads and displays an integer
  from the file whose path is `filename`\n  (especially useful with files in `/sys`).\n-
  Aliases as `catn` (e.g. `Cat 0` as `cat0`, etc.) so you can\n  have several.\n-
  Example:\n\n    Run CatInt 0 \"/sys/devices/platform/thinkpad_hwmon/fan1_input\"
  [] 50\n\n### `UVMeter`\n\n- Aliases to \"uv \" + station id. For example: `%uv Brisbane%`
  or `%uv\n  Alice Springs%`\n- Args: default monitor arguments, plus:\n  - `--useManager`
  _bool_ : Whether to use one single manager per monitor for\n    managing network
  connections or create a new one every time a connection is\n    made.\n    - Short
  option: `-m`\n    - Default: True\n\n- *Reminder:* Keep the refresh rate high, to
  avoid making unnecessary\n  requests every time the plug-in is run.\n- Station IDs
  can be found here:\n  http://www.arpansa.gov.au/uvindex/realtime/xml/uvvalues.xml\n-
  Example:\n\n        Run UVMeter \"Brisbane\" [\"-H\", \"3\", \"-L\", \"3\", \"--low\",
  \"green\", \"--high\", \"red\"] 900\n\n## Executing External Commands\n\nIn order
  to execute an external command you can either write the\ncommand name in the template,
  in this case it will be executed without\narguments, or you can configure it in
  the \"commands\" configuration\noption list with the Com template command:\n\n`Com
  ProgramName Args Alias RefreshRate`\n\n- ProgramName: the name of the program\n-
  Args: the arguments to be passed to the program at execution time\n- RefreshRate:
  number of tenths of second between re-runs of the\n  command. A zero or negative
  rate means that the command will be\n  executed only once.\n- Alias: a name to be
  used in the template. If the alias is en empty\n  string the program name can be
  used in the template.\n\nE.g.:\n\n        Run Com \"uname\" [\"-s\",\"-r\"] \"\"
  0\n\ncan be used in the output template as `%uname%` (and xmobar will call\n_uname_
  only once), while\n\n        Run Com \"date\" [\"+\\\"%a %b %_d %H:%M\\\"\"] \"mydate\"
  600\n\ncan be used in the output template as `%mydate%`.\n\nSometimes, you don't
  mind if the command executed exits with an error,\nor you might want to display
  a custom message in that case.  To that\nend, you can use the `ComX` variant:\n\n`ComX
  ProgramName Args ExitMessage Alias RefreshRate`\n\nWorks like `Com`, but displaying
  `ExitMessage` (a string) if the\nexecution fails.  For instance:\n\n        Run
  ComX \"date\" [\"+\\\"%a %b %_d %H:%M\\\"\"] \"N/A\" \"mydate\" 600\n\nwill display
  \"N/A\" if for some reason the `date` invocation fails.\n\n## Other Plugins\n\n###
  `StdinReader`\n\n- Aliases to StdinReader\n- Displays any text received by xmobar
  on its standard input.\n- Strips actions from the text received.  This means you
  can't pass dynamic\n  actions via stdin.  This is safer than `UnsafeStdinReader`
  because there is\n  no need to escape the content before passing it to xmobar's
  standard input.\n\n### `UnsafeStdinReader`\n\n- Aliases to UnsafeStdinReader\n-
  Displays any text received by xmobar on its standard input.\n- Will not do anything
  to the text received.  This means you can pass dynamic\n  actions via stdin.  Be
  careful to remove tags from dynamic text that you\n  pipe-thru to xmobar's standard
  input, e.g. window's title.  There is no way\n  to escape the tags, i.e. you can't
  print a literal `<action>` tag as a text\n  on xmobar.\n- Sample usage: send to
  xmobar's stdin the list of your workspaces enclosed by\n  actions tags that switches
  the workspaces to be able to switch workspaces by\n  clicking on xmobar:\n  ```<action=`xdotool
  key alt+1`>ws1</action> <action=`xdotool key alt+1`>ws2</action>```\n\n### `Date
  Format Alias RefreshRate`\n\n- Format is a time format string, as accepted by the
  standard ISO C\n  `strftime` function (or Haskell's `formatCalendarTime`).\n- Sample
  usage: `Run Date \"%a %b %_d %Y <fc=#ee9a00>%H:%M:%S</fc>\" \"date\" 10`\n\n###
  `DateZone Format Locale Zone Alias RefreshRate`\n\n- Format is a time format string,
  as accepted by the standard ISO C\n  `strftime` function (or Haskell's `formatCalendarTime`).\n-
  If Locale is \"\" the default locale of the system is used, otherwise the given\n
  \ locale. If there are more instances of DateZone, using \"\" as input for Locale\n
  \ is not recommended.\n- Zone is the name of the TimeZone. It is assumed that the
  tz database is stored\n  in /usr/share/zoneinfo/. If \"\" is given as Zone, the
  default system time is\n  used.\n- Sample usage:\n  `Run DateZone \"%a %H:%M:%S\"
  \"de_DE.UTF-8\" \"Europe/Vienna\" \"viennaTime\" 10`\n\n### `CommandReader \"/path/to/program\"
  Alias`\n\n- Runs the given program, and displays its standard output.\n\n### `PipeReader
  \"default text:/path/to/pipe\" Alias`\n\n- Reads its displayed output from the given
  pipe.\n- Prefix an optional default text separated by a colon\n- Expands environment
  variables in the first argument of syntax '${VAR}' or '$VAR'\n\n### `MarqueePipeReader
  \"default text:/path/to/pipe\" (length, rate, sep) Alias`\n\n- Generally equivalent
  to PipeReader\n- Text is displayed as marquee with the specified length, rate in
  10th\n  seconds and separator when it wraps around\n\n        Run MarqueePipeReader
  \"/tmp/testpipe\" (10, 7, \"+\") \"mpipe\"\n\n- Expands environment variables in
  the first argument\n\n### `BufferedPipeReader Alias [(Timeout, Bool, \"/path/to/pipe1\"),
  ..]`\n\n- Display data from multiple pipes.\n- Timeout (in tenth of seconds) is
  the value after which the previous\n  content is restored i.e. if there was already
  something from a\n  previous pipe it will be put on display again, overwriting the\n
  \ current status.\n- A pipe with Timeout of 0 will be displayed permanently, just
  like\n  `PipeReader`\n- The boolean option indicates whether new data for this pipe
  should\n  make xmobar appear (unhide, reveal). In this case, the Timeout\n  additionally
  specifies when the window should be hidden again. The\n  output is restored in any
  case.\n- Use it for OSD-like status bars e.g. for setting the volume or\n  brightness:\n\n
  \       Run BufferedPipeReader \"bpr\"\n            [ (  0, False, \"/tmp/xmobar_window\"
  \ )\n            , ( 15,  True, \"/tmp/xmobar_status\"  )\n            ]\n\n  Have
  your window manager send window titles to\n  `\"/tmp/xmobar_window\"`. They will
  always be shown and not reveal\n  your xmobar.  Sending some status information
  to\n  `\"/tmp/xmobar_status\"` will reveal xmonad for 1.5 seconds and\n  temporarily
  overwrite the window titles.\n- Take a look at [examples/status.sh]\n- Expands environment
  variables for the pipe path\n\n[examples/status.sh]: http://github.com/jaor/xmobar/raw/master/examples/status.sh\n\n\n###
  `XMonadLog`\n\n- Aliases to XMonadLog\n- Displays information from xmonad's `_XMONAD_LOG`.
  You can set this\n  property by using `xmonadPropLog` as your log hook in xmonad's\n
  \ configuration, as in the following example (more info [here]):\n\n        main
  = do\n          spawn \"xmobar\"\n          xmonad $ defaultConfig {\n            logHook
  = dynamicLogString defaultPP >>= xmonadPropLog\n          }\n   This plugin can
  be used as a sometimes more convenient alternative\n   to `StdinReader`. For instance,
  it allows you to (re)start xmobar\n   outside xmonad.\n\n[here]: http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Hooks-DynamicLog.html\n\n###
  `UnsafeXMonadLog`\n\n- Aliases to UnsafeXMonadLog\n- Similar to StdinReader versus
  UnsafeStdinReader, this does not strip `<action\n  ...>` tags from XMonad's `_XMONAD_LOG`.\n-
  It is advised that you still use `xmobarStrip` for the ppTitle in your\n  logHook:\n\n
  \       myPP = defaultPP { ppTitle = xmobarStrip }\n        main = xmonad $ defaultConfig
  {\n          logHook = dynamicLogString myPP >>= xmonadPropLog\n        }\n\n# Plugins\n\n##
  Writing a Plugin\n\nWriting a plugin for xmobar should be very simple. You need
  to create\na data type with at least one constructor.\n\nNext you must declare this
  data type an instance of the `Exec` class, by\ndefining the 1 needed method (alternatively
  `start` or `run`) and 2\noptional ones (alias and rate):\n\n        start :: e ->
  (String -> IO ()) -> IO ()\n        run   :: e -> IO String\n        rate  :: e
  -> Int\n        alias :: e -> String\n\n`start` must receive a callback to be used
  to display the `String`\nproduced by the plugin. This method can be used for plugins
  that need\nto perform asynchronous actions. See\n`src/Xmobar/Plugins/PipeReader.hs`
  for an example.\n\n`run` can be used for simpler plugins. If you define only `run`
  the\nplugin will be run every second. To overwrite this default you just\nneed to
  implement `rate`, which must return the number of tenth of\nseconds between every
  successive runs. See `examples/xmobar.hs` for an\nexample of a plugin that runs
  just once, and\n`src/Xmobar/Plugins/Date.hs` for one that implements `rate`.\n\nNotice
  that Date could be implemented as:\n\n        instance Exec Date where\n            alias
  (Date _ a _) = a\n            start (Date f _ r) = date f r\n\n        date :: String
  -> Int -> (String -> IO ()) -> IO ()\n        date format r callback = do go\n            where
  go = do\n                    t <- toCalendarTime =<< getClockTime\n                    callback
  $ formatCalendarTime defaultTimeLocale format t\n                    tenthSeconds
  r >> go\n\nThis implementation is equivalent to the one you can read in\n`Plugins/Date.hs`.\n\n`alias`
  is the name to be used in the output template. Default alias\nwill be the data type
  constructor.\n\nAfter that your type constructor can be used as an argument for
  the\nRunnable type constructor `Run` in the `commands` list of the\nconfiguration
  options.\n\n## Using a Plugin\n\nTo use your new plugin, you need to use a pure
  Haskell configuration\nfor xmobar, and load your definitions there.  You can see
  an example\nin [examples/xmobar.hs](./examples/xmobar.hs) showing you how to write\na
  Haskell configuration that uses a new plugin, all in one file.\n\nWhen xmobar runs
  with the full path to that Haskell file as its\nargument (or if you put it in `~/.config/xmobar/xmobar.hs`),
  and with\nthe xmobar library installed, the Haskell code will be compiled as\nneeded,
  and the new executable spawned for you.\n\nThat's it!\n\n## Configurations written
  in pure Haskell\n\nxmobar can be used as a pure Haskell program, that is compiled
  with\nyour specific configuration, expressed as Haskell source code.  For an\nexample,
  see [the author's\nconfiguration](https://gitlab.com/jaor/xmobar-config/).\n\n#
  Authors and credits\n\nAndrea Rossato originally designed and implemented xmobar
  up to\nversion 0.11.1. Since then, it is maintained and developed by [jao],\nwith
  the help of the greater xmobar and Haskell communities.\n\nIn particular, xmobar
  [incorporates patches] by Mohammed Alshiekh,\nAlex Ameen, Axel Angel, Dhananjay
  Balan, Claudio Bley, Dragos Boca,\nBen Boeckel, Duncan Burke, Roman Cheplyaka, Patrick
  Chilton, Antoine\nEiche, Nathaniel Wesley Filardo, John Goerzen, Reto Hablützel,
  Juraj\nHercek, Tomáš Janoušek, Ada Joule, Spencer Janssen, Roman Joost,\nJochen
  Keil, Lennart Kolmodin, Krzysztof Kosciuszkiewicz, Dmitry\nKurochkin, Todd Lunter,
  Vanessa McHale, Robert J. Macomber, Dmitry\nMalikov, David McLean, Marcin Mikołajczyk,
  Dino Morelli, Tony Morris,\nEric Mrak, Thiago Negri, Edward O'Callaghan, Svein Ove,
  Martin Perner,\nJens Petersen, Alexander Polakov, Pavan Rikhi, Petr Rockai, Andrew\nEmmanuel
  Rosa, Sackville-West, Markus Scherer, Daniel Schüssler,\nOlivier Schneider, Alexander
  Shabalin, Valentin Shirokov, Peter\nSimons, Alexander Solovyov, Will Song, John
  Soros, Felix Springer,\nTravis Staton, Artem Tarasov, Samuli Thomasson, Edward Tjörnhammar,\nSergei
  Trofimovich, Thomas Tuegel, John Tyree, Jan Vornberger, Anton\nVorontsov, Daniel
  Wagner, Zev Weiss, Phil Xiaojun Hu, Edward Z. Yang\nand Norbert Zeh.\n\n[jao]: http://jao.io\n[incorporates
  patches]: http://www.ohloh.net/p/xmobar/contributors\n\n## Thanks\n\n__Andrea Rossato__:\n\nThanks
  to Robert Manea and Spencer Janssen for their help in\nunderstanding how X works.
  They gave me suggestions on how to solve\nmany problems with xmobar.\n\nThanks to
  Claus Reinke for make me understand existential types (or at\nleast for letting
  me think I grasp existential types...;-).\n\n__jao__:\n\nThanks to Andrea for creating
  xmobar in the first place, and for\ngiving me the chance to contribute.\n\n# Related\n\n-
  To understand the internal mysteries of xmobar you may try reading\n  [this tutorial]
  on X Window Programming in Haskell.\n\n- My [sawflibs] project includes a module
  to automate running xmobar\n  in [sawfish].\n\n[this tutorial]: http://www.haskell.org/haskellwiki/X_window_programming_in_Haskell\n[sawflibs]:
  http://github.com/jaor/sawflibs\n\n# License\n\nThis software is released under
  a BSD-style license. See [LICENSE] for\nmore details.\n\nCopyright &copy; 2010-2019
  Jose Antonio Ortega Ruiz\n\nCopyright &copy; 2007-2010 Andrea Rossato\n\n[Github]:
  http://github.com/jaor/xmobar/\n[Github page]: http://github.com/jaor/xmobar\n[Hackage]:
  http://hackage.haskell.org/package/xmobar/\n[LICENSE]: https://github.com/jaor/xmobar/raw/master/license\n[Mailing
  list]: http://projects.haskell.org/cgi-bin/mailman/listinfo/xmobar\n[MPD]: http://mpd.wikia.com/\n[X11-xft]:
  http://hackage.haskell.org/package/X11-xft/\n[i3status]: http://i3wm.org/i3status/\n[i3status
  manual]: http://i3wm.org/i3status/manpage.html#_using_i3status_with_xmobar\n[iwlib]:
  http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html\n[libasound]: http://packages.debian.org/stable/libasound2-dev\n[hinotify]:
  http://hackage.haskell.org/package/hinotify/\n[libmpd]: http://hackage.haskell.org/package/libmpd/\n[dbus]:
  http://hackage.haskell.org/package/dbus\n[text]: http://hackage.haskell.org/package/text\n[sawfish]:
  http://sawfish.wikia.com/\n[utf8-string]: http://hackage.haskell.org/package/utf8-string/\n[alsa-core]:
  http://hackage.haskell.org/package/alsa-core\n[alsa-mixer]: http://hackage.haskell.org/package/alsa-mixer\n[timezone-olson]:
  http://hackage.haskell.org/package/timezone-olson\n[timezone-series]: http://hackage.haskell.org/package/timezone-series\n[libXpm]:
  http://cgit.freedesktop.org/xorg/lib/libXpm\n[http-conduit]: http://hackage.haskell.org/package/http-conduit\n[http-types]:
  http://hackage.haskell.org/package/http-types\n"
license-name: BSD-3-Clause
