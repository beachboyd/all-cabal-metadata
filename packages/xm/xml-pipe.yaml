homepage: https://github.com/YoshikuniJujo/xml-pipe/wiki
changelog-type: ''
hash: 58201001839aa22f850874a8c7652aee5a59b7dad45e3572dc0c1765bfedba75
test-bench-deps: {}
maintainer: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
synopsis: XML parser which uses simple-pipe
changelog: ''
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  papillon: ==0.1.*
  simple-pipe: ! '>=0.0.0.14 && <0.2.0.0'
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.0.7
- 0.0.0.8
- 0.0.0.9
- 0.0.0.10
- 0.0.0.11
author: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
latest: 0.0.0.11
description-type: haddock
description: ! "This package process subset of XML and is still far from perfect,
  now.\n\nExample programs\n\nexamples/indians.hs\n\nextensions\n\n* OverloadedStrings\n\n*
  PackageImports\n\n> import Control.Monad\n> import \"monads-tf\" Control.Monad.Trans\n>
  import Data.Maybe\n> import Data.Pipe\n> import Data.Pipe.List\n> import Text.XML.Pipe\n>\n>
  import qualified Data.ByteString.Char8 as BSC\n>\n> littleIndians :: Int -> BSC.ByteString\n>
  littleIndians n = \"<indians>\" `BSC.append`\n> \tBSC.pack (show n) `BSC.append`
  \" little, \" `BSC.append`\n> \tBSC.pack (show $ n + 1) `BSC.append` \" little,
  \" `BSC.append`\n> \tBSC.pack (show $ n + 2) `BSC.append` \" little Indians\" `BSC.append`\n>
  \t\"</indians>\"\n>\n> infiniteIndians :: [BSC.ByteString]\n> infiniteIndians =
  map littleIndians [1, 4 .. ]\n>\n> xml :: [BSC.ByteString]\n> xml = \"<?xml version='1.0'?><song>\"
  : infiniteIndians\n>\n> main :: IO ()\n> main = void . runPipe $ fromList xml\n>
  \t=$= xmlEvent\n> \t=$= convert fromJust\n> \t=$= (xmlBegin >>= xmlNode)\n> \t=$=
  takeP 8\n> \t=$= printP\n>\n> takeP :: Monad m => Int -> Pipe a a m ()\n> takeP
  0 = return ()\n> takeP n = do\n> \tmx <- await\n> \tmaybe (return ()) (\\x -> yield
  x >> takeP (n - 1)) mx\n>\n> convert :: Monad m => (a -> b) -> Pipe a b m ()\n>
  convert f = do\n> \tmx <- await\n> \tmaybe (return ()) (\\x -> yield (f x) >> convert
  f) mx\n>\n> printP :: Show a => Pipe a () IO ()\n> printP = do\n> \tmx <- await\n>
  \tmaybe (return ()) (\\x -> lift (print x) >> printP) mx\n\nexamples/starttls.hs\n\nIt
  process STARTTLS of XMPP as client.\nThe fllowings are only main part.\n\n> main
  :: IO ()\n> main = do\n> \th <- connectTo \"localhost\" (PortNumber 5222)\n> \tBS.hPut
  h $ xmlString begin\n> \tBS.hPut h $ xmlString startTls\n> \tvoid . runPipe $ handleP
  h\n> \t\t=$= xmlEvent\n> \t\t=$= convert fromJust\n> \t\t=$= (xmlBegin >>= xmlNodeUntil
  isProceed)\n> \t\t=$= printP\n> \tca <- readCertificateStore [\"cacert.sample_pem\"]\n>
  \tg <- cprgCreate <$> createEntropyPool :: IO SystemRNG\n> \t(`run` g) $ do\n> \t\tp
  <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"] [] ca\n> \t\thlPut p
  $ xmlString begin\n> \t\tvoid . runPipe $ handleP p\n> \t\t\t=$= xmlEvent\n> \t\t\t=$=
  convert fromJust\n> \t\t\t=$= (xmlBegin >>= xmlNode)\n> \t\t\t=$= printP\n"
license-name: BSD-3-Clause
