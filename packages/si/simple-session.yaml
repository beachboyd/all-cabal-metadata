homepage: http://simple.cx
changelog-type: markdown
hash: 420fb24c61a5dd0aaedce2cedaf8ca63d805687eb55e22d443b3fb5207de9041
test-bench-deps: {}
maintainer: amit@amitlevy.com
synopsis: Cookie-based session management for the Simple web framework
changelog: ! "# Version 0.10.1.0 (2015-11-18)\n\n  * Default to using `httponly` cookie
  option\n\n  * Default to using `secure` cookie option for requests over HTTPS\n\n
  \ * Allow customization of cookie options using the `sessionBaseCookie` method\n"
basic-deps:
  cookie: -any
  bytestring: -any
  wai: ! '>=3.0'
  base: <6
  base64-bytestring: -any
  simple: ! '>=0.10'
  containers: -any
  blaze-builder: -any
  byteable: -any
  wai-extra: ! '>=3.0'
  transformers: -any
  http-types: -any
  cryptohash: -any
all-versions:
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.0.1
- 0.8.1.0
- 0.9.0.0
- 0.10.0.0
- 0.10.1.0
- 0.10.1.1
author: Amit Aryeh Levy
latest: 0.10.1.1
description-type: haddock
description: ! 'Adds cookie-based session management to simple ''Controller''s. To
  add to an

  application, declare the Controller setting\''s type an instance of

  ''HasSession'', and wrap routes with ''withSession''. For example:


  > data AppSettings = ...

  >

  > instance HasSession AppSettings where

  >   ...


  > controllerApp settings $ withSessions $ do

  >   routeName \"posts\" $ ...


  Then, in your controllers you can seemlessly get and set keys from the

  session:


  > get "/profile" $ do

  >   muserId <- sessionLookup "current_user_id"

  >   case muserIf of

  >     Nothing -> respond $ redirectTo "/login"

  >     Just userId -> [handle request]'
license-name: LGPL-3.0-only
