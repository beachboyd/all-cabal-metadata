homepage: https://github.com/aearnus/sixty-five-oh-two#readme
changelog-type: markdown
hash: 9e1984e73930187a6fa0d886357138e11442b03890c9ad8a3793217bd7479a9b
test-bench-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  sixty-five-oh-two: -any
  containers: -any
  lens: -any
  mtl: -any
maintainer: tslimkemann42@gmail.com
synopsis: An eDSL for writing 65(C)02 bytecode.
changelog: ! '# Changelog for dsl-sixty-five-oh-two


  ## Unreleased changes

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  containers: -any
  lens: -any
  mtl: -any
all-versions:
- '1.0.0.0'
- '1.1.0.0'
author: Tyler Limkemann
latest: '1.1.0.0'
description-type: markdown
description: ! "# DSL.SixtyFiveOhTwo: A 65C02 Assembly eDSL in Haskell\n\n![Example
  image](https://raw.githubusercontent.com/Aearnus/sixty-five-oh-two/master/fancy_banner.png)\n\n_...
  shut up, show me the code!_\n\nHere's some example code utilizing all of the features
  of the eDSL:\n\n```haskell\nimport DSL.SixtyFiveOhTwo\n\naccumulatorLoadNStore ::
  Instruction\naccumulatorLoadNStore = do\n    lda (Immediate 0x10)\n    sta (Absolute
  0x0200)\n    rts (Implied)\n\nmyProgram :: Instruction\nmyProgram = do\n    define
  \"accumulatorLoadNStore\" accumulatorLoadNStore\n    call \"accumulatorLoadNStore\"\n```\n\nHere's
  a fun little snippet that adds 10 to the accumulator using Haskell Monad Magic:tm::\n\n```haskell\ntest3f2
  :: Instruction\ntest3f2 = replicateM_ 10 (inc (Accumulator))\n```\n\nEverything
  that this module exposes is in [src/DSL/SixtyFiveOhTwo.hs](https://github.com/Aearnus/sixty-five-oh-two/blob/master/src/DSL/SixtyFiveOhTwo.hs).
  A quick browse through this file will reveal the full extent of the features of
  this eDSL.\n\n## What is this?\n\nThis is an **e**mbedded **D**omain **S**pecific
  **L**anguage that allows a user to write code that runs on the 65C02 CPU. This is
  the CPU that runs devices such as the Apple II, Commodore 64, or the NES.\n\n##
  What does the language provide me?\n\n* **Full coverage**. Everything bit of code
  that the 65C02 can understand is represented in this language. Everywhere `adc`
  \ to `wai` can be used. These opcodes are represented as generic operations, each
  of which simply append to the bytecode that gets passed into it. Here's an example
  of the definition for a certain opcode:\n```haskell\nlda :: AddressingMode -> Instruction\nlda
  (Immediate b) = genericOp 169 b\nlda (ZeroPage b) = genericOp 165 b\nlda (ZeroPageX
  b) = genericOp 181 b\nlda (Absolute b) = genericTwoByteOp 173 b\nlda (AbsoluteX
  b) = genericTwoByteOp 189 b\nlda (AbsoluteY b) = genericTwoByteOp 185 b\nlda (ZeroPageIndirect
  b) = genericOp 178 b\nlda (IndirectX b) = genericOp 161 b\nlda (IndirectY b) = genericOp
  177 b\n```\n\n* **Type safety**. Every addressing mode is represented the Haskell
  type system, and thus issues will be caught at compile time. The `AddressingMode`
  ADT is used to represent a function's addressing mode, and opcodes do not take addressing
  modes that they do not support.\n```haskell\ndata AddressingMode =\n    Implied
  |\n    Accumulator |\n    Immediate Word8 |\n    Relative Int8 | -- Signed\n    ZeroPageRelative
  Int8 | -- Signed\n    Absolute Word16 |\n    AbsoluteX Word16 |\n    AbsoluteY Word16
  |\n    ZeroPage Word8 |\n    ZeroPageX Word8 |\n    ZeroPageY Word8 |\n    ZeroPageIndirect
  Word8 |\n    Indirect Word16 |\n    IndirectX Word8 |\n    IndirectY Word8\n```\n\n\n*
  **Easy abstractions**. The `define` and `call` keywords automatically generate the
  code necessary to create and call subroutines.\n\n## Support or Donate\n\nPlease
  contact me if you have any wish to support this project or any other projects I've
  worked on. The information is in `package.yaml`.\n"
license-name: MIT
