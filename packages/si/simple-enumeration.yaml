homepage: https://github.com/byorgey/enumeration#readme
changelog-type: markdown
hash: ad4008e3950df9ecf940463467a42ed31f65ae333ef6f592cefce875f16324e9
test-bench-deps:
  base: ! '>=4.7 && <5'
  doctest: ! '>=0.8'
maintainer: byorgey@gmail.com
synopsis: Finite or countably infinite sequences of values.
changelog: |
  # Changelog for enumeration

  ## 0.2 (3 July 2019)

  Added `Data.Enumeration.Invertible`.

  ## 0.1 (14 May 2019)

  Initial release.

  ## Unreleased changes
basic-deps:
  base: ! '>=4.7 && <5'
  integer-gmp: -any
all-versions:
- '0.1'
- '0.2'
author: Brent Yorgey
latest: '0.2'
description-type: markdown
description: |
  # Lightweight, efficiently indexable enumerations

  This package defines a type of *enumerations*, along with combinators
  for building and manipulating them.  An enumeration is a finite or
  countably infinite sequence of values, represented as a function from
  an index to a value. Hence it is possible to work with even very large
  finite sets.  Enumerations also naturally support (uniform) random
  sampling.

  Note the goal of this package is *not* to enumerate values of Haskell
  types; there already exist many other packages to do that.  Rather,
  the goal is simply to provide an abstract framework for working with
  enumerations of any values at all.

  See the documentation for examples; see the [announcement blog
  post](https://byorgey.wordpress.com/2019/05/14/lightweight-efficiently-sampleable-enumerations-in-haskell/)
  for additional examples and discussion.
license-name: BSD-3-Clause
