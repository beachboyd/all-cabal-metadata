homepage: ''
changelog-type: ''
hash: 717c66962495de460f67e8d2d5d551c56664dd6a0c37b4bf1fe7dd2ae821412d
test-bench-deps: {}
maintainer: Morten Olsen Lysgaard <morten@lysgaard.no>
synopsis: Sirkel, a Chord DHT
changelog: ''
basic-deps:
  remote: -any
  bytestring: -any
  SHA: -any
  base: ! '>=4 && <5'
  haskell98: -any
  containers: -any
  binary: -any
  hashtables: -any
  transformers: -any
  random: -any
all-versions:
- '0.1'
author: Morten Olsen Lysgaard <morten@lysgaard.no>
latest: '0.1'
description-type: markdown
description: ! "Sirkel is a DHT based on Chord\n\nTo use, compile Main.hs with `ghc
  -threaded --make Main.hs`\n\nafterwards run as many Sirkel instances you want on
  the network you have.\nIt only supports LAN or boxes directly connected to the internet
  yet.\n\nto put data into the DHT write \"put \" preceded by the data and press enter.\n\nexample:\n
  \   put abc123\n\nThe data will the be saved in the DHT.\nAll nodes can now \"get\"
  the data using the SHA-1 hash of the data.\n\nWhen you write the `put` the output
  will be a list of keys. These keys are the SHA-1\nhashes of the blocks that your
  data was chunked intoo before it was put.\n\nto get some data back, just write `get
  [key1, key2, key3]`\nwhere `key1 ... key3` are the keys that where output from the
  `put`.\nNote that to get your data correctly the order of the keys in the get\nmatters.
  Each key represents a block of data. First each of them are retrieved from\nthe
  DHT, then they are concatenated together to form the final data. If you mess up
  the order,\nthe concatenation will be messed up and therefore also the deserialization.\n\nIn
  Main.hs there is a initState. The fields in this state determines how your DHT works.\n\n
  \   initState = NodeState {\n          self = undefined\n        , fingerTable =
  Map.empty -- ^ The fingerTable\n        , blockDir = \"/tmp/\"\n        , predecessor
  = undefined\n        , timeout = 10 -- ^ The timout latency of ping\n        , m
  = 160 -- ^ The number of bits in a key, ususaly 160\n        , r = 5 -- ^ the number
  of successors\n        , b = 2 -- ^ the nuber of replicas\n        , blockSize =
  10 -- ^ the number of bytes a block is\n        }\n\n * `self` is a reference to
  ourselves and should be left undefined, it is populated when you initialize the
  DHT.\n * `fingerTable` is our \"address book\". It tells us whom to ask what, and
  also who most likely to know what.\n * `blockDir` is currently not used since blocks
  are stored in RAM\n * `predecessor` is a reference to our predecessor in the Chord
  ring. It should be left empty for the same reason as self.\n * `timeout` is not
  used yet but will be used to determine how long to way for a reply from the DHT.\n
  * `m` is the number of bits that makes up the keyspace of the Chord ring. Note that
  it can not be changed without changing the hashing algorithm which is not supported
  yet.\n * `r` is one of the most important parameters. It determines how many immediate
  successors you keep. This has consequences that we'll look on soon.\n * `b` is the
  number of replicas of each block that should be kept, the node responsible for a
  block will make shure that its `b` successors has a copy of it's blocks so that
  in the event of node failure they can take over the role as owners of the block.\n
  * `blockSize` is the numbers of bytes a block should have. When you try to put data,
  it will first be chunked into blocks of this size, then each block will be hashed
  and put separately.\n\nNow, more on the `r` number. Each node keeps `r` successors.\nThat
  means that if we are asked for the successor of a key that preceeds\nour `r`th successor
  we know that our `r`th successor is the successor of\nthat key. We do not know anything
  about `r`s successors though, because\nwe only keep a list of the first `r` of us
  and the `r`th successor is the\nlast in that list. Therefore, in all calls that
  \"get\" something, `findSuccessors`,\n`getBlock` and `getObject`, there is a `howMany`
  argument. This specifies how\nmany successors we need back. At most we can get `r`
  successors back since no node\nkeeps a list of more than that. But say if we only
  need the first successor of a key.\nThen we call `findSuccessors` with `howMany
  = 1` which lets not just the immediate predecessor\nof the key answer our call,
  but all the predecessors that have at-least one successor to that key.\nThis boils
  down to that the `r` nodes before the key can answer. Therefore the argument `howMany`\nlets
  you specify how \"exact\" your query is. If you choose `howMany = r` then only one
  node in the\nring can answer that query. For `howMany <= r`, `r + 1 - howMany` nodes
  can answer your query.\nThis means that if you don't need that detailed information
  about the successors of a key, maybe\njust the first one, the reliability and speed
  of your query increases.\n\nThis is especially important for small networks. If
  the `r` parameter is larger than the number\nof Sirkel nodes then all nodes know
  all others and there will be no network traffic to resolve\na query. This off-course
  comes to a price. You have to store the contact information about `r`\nnodes so
  for a million nodes network `r` must be kept at a reasonable level.\n\nFor questions
  or anything else:\n * Send me an e-mail at morten@lysgaard.no\n * [Projects webpage](mortenlysgaard.com)\n
  * [Projects Github page](https://github.com/molysgaard/Sirkel)\n"
license-name: BSD-3-Clause
