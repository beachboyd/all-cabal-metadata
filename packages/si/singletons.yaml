homepage: http://www.github.com/goldfirere/singletons
changelog-type: markdown
hash: 4e652f684809a21bfa20827ea7287717b97f441a36efb67b92b962d9edec5862
test-bench-deps:
  base: ! '>=4.11 && <4.12'
  tasty-golden: ! '>=2.2'
  filepath: ! '>=1.3'
  process: ! '>=1.1'
  singletons: -any
  tasty: ! '>=0.6'
  directory: ! '>=1'
maintainer: Richard Eisenberg <rae@cs.brynmawr.edu>, Jan Stolarek <jan.stolarek@p.lodz.pl>
synopsis: A framework for generating singleton types
changelog: ! "Changelog for singletons project\n================================\n\n2.4\n---\n*
  Require GHC 8.4.\n\n* `Demote Nat` is now `Natural` (from `Numeric.Natural`) instead
  of `Integer`.\n  In accordance with this change, `Data.Singletons.TypeLits` now
  exposes\n  `GHC.TypeNats.natVal` (which returns a `Natural`) instead of\n  `GHC.TypeLits.natVal`
  (which returns an `Integer`).\n\n* The naming conventions for infix identifiers
  (e.g., `(&*)`) have been overhauled.\n  * Infix functions (that are not constructors)
  are no longer prepended with a\n    colon when promoted to type families. For instance,
  the promoted version of\n    `(&*)` is now called `(&*)` as well, instead of `(:&*)`
  as before.\n\n    There is one exception to this rule: the `(.)` function, which
  is promoted\n    as `(:.)`. The reason is that one cannot write `(.)` at the type
  level.\n  * Singletons for infix functions are now always prepended with `%` instead
  of `%:`.\n  * Singletons for infix classes are now always prepended with `%` instead
  of `:%`.\n  * Singletons for infix datatypes are now always prepended with a `%`.\n\n
  \   (Before, there was an unspoken requirement that singling an infix datatype\n
  \   required that name to begin with a colon, and the singleton type would begin\n
  \   with `:%`. But now that infix datatype names can be things like `(+)`, this\n
  \   requirement became obsolete.)\n\n  The upshot is that most infix names can now
  be promoted using the same name, and\n  singled by simply prepending the name with
  `%`.\n\n* The suffix for defunctionalized names of symbolic functions (e.g., `(+)`)
  has\n  changed. Before, the promoted type name would be suffixed with some number
  of\n  dollar signs (e.g., `(+$)` and `(+$$)`) to indicate defunctionalization\n
  \ symbols. Now, the promoted type name is first suffixed with `@#@` and\n  _then_
  followed by dollar signs (e.g., `(+@#@$)` and `(+@#@$$)`).\n  Adopting this conventional
  eliminates naming conflicts that could arise for\n  functions that consisted of
  solely `$` symbols.\n\n* The treatment of `undefined` is less magical. Before, all
  uses of `undefined`\n  would be promoted to `GHC.Exts.Any` and singled to `undefined`.
  Now, there is\n  a proper `Undefined` type family and `sUndefined` singleton function.\n\n*
  As a consequence of not promoting `undefined` to `Any`, there is no need to\n  have
  a special `any_` function to distinguish the function on lists. The\n  corresponding
  promoted type, singleton function, and defunctionalization\n  symbols are now named
  `Any`, `sAny`, and `AnySym{0,1,2}`.\n\n* Rework the treatment of empty data types:\n
  \ * Generated `SingKind` instances for empty data types now use `EmptyCase`\n    instead
  of simply `error`ing.\n  * Derived `PEq` instances for empty data types now return
  `True` instead of\n    `False`. Derived `SEq` instances now return `True` instead
  of `error`ing.\n  * Derived `SDecide` instances for empty data types now return
  `Proved bottom`,\n    where `bottom` is a divergent computation, instead of `error`ing.\n\n*
  Add `Data.Singletons.Prelude.IsString` and `Data.Promotion.Prelude.IsString`\n  modules.
  `IsString.fromString` is now used when promoting or singling\n  string literals
  when the `-XOverloadedStrings` extension is enabled\n  (similarly to how `Num.fromInteger`
  is currently used when promoting or\n  singling numeric literals).\n\n* Add `Data.Singletons.Prelude.Void`.\n\n*
  Add promoted and singled versions of `div`, `mod`, `divMod`, `quot`, `rem`,\n  and
  `quotRem` to `Data.Singletons.TypeLits` that utilize the efficient `Div`\n  and
  `Mod` type families from `GHC.TypeNats`. Also add `sLog2` and\n  defunctionalization
  symbols for `Log2` from `GHC.TypeNats`.\n\n* Add `(<>)` and `(%<>)`, the promoted
  and singled versions of `AppendSymbol`\n  from `GHC.TypeLits`.\n\n* Add `(%^)`,
  the singleton version of `GHC.TypeLits.^`.\n\n* Add `unlines` and `unwords` to `Data.Singletons.Prelude.List`.\n\n*
  Add promoted and singled versions of `Show`, including `deriving` support.\n\n*
  Add a `ShowSing` class, which facilitates the ability to write `Show` instances\n
  \ for `Sing` instances.\n\n* Permit derived `Ord` instances for empty datatypes.\n\n*
  Permit standalone `deriving` declarations.\n\n* Permit `DeriveAnyClass` (through
  the `anyclass` keyword of `DerivingStrategies`)\n\n* Add a value-level `(@@)`, which
  is a synonym for `applySing`.\n\n* Add `Eq`, `Ord`, `Num`, `Enum`, and `Bounded`
  instances for `SomeSing`, which\n  leverage the `SEq`, `SOrd`, `SNum`, `SEnum`,
  and `SBounded` instances,\n  respectively, for the underlying `Sing`.\n\n* Rework
  the `Sing (a :: *)` instance in `Data.Singletons.TypeRepStar` such\n  that it now
  uses type-indexed `Typeable`. The new `Sing` instance is now:\n\n  ```haskell\n
  \ newtype instance Sing :: Type -> Type where\n    STypeRep :: TypeRep a -> Sing
  a\n  ```\n\n  Accordingly, the `SingKind` instance has also been changed:\n\n  ```haskell\n
  \ instance SingKind Type where\n    type Demote Type = SomeTypeRepStar\n    ...\n\n
  \ data SomeTypeRepStar where\n    SomeTypeRepStar :: forall (a :: *). !(TypeRep
  a) -> SomeTypeRepStar\n  ```\n\n  Aside from cleaning up some implementation details,
  this change assures\n  that `toSing` can only be called on `TypeRep`s whose kind
  is of kind `*`.\n  The previous implementation did not enforce this, which could
  lead to\n  segfaults if used carelessly.\n\n* Instead of `error`ing, the `toSing`
  implementation in the `SingKind (k1 ~> k2)`\n  instance now works as one would expect
  (provided the user adheres to some\n  common-sense `SingKind` laws, which are now
  documented).\n\n* Add a `demote` function, which is a convenient shorthand for `fromSing
  sing`.\n\n* Add a `Data.Singletons.Sigma` module with a `Sigma` (dependent pair)
  data type.\n\n* Export defunctionalization symbols for `Demote`, `SameKind, `KindOf`,
  `(~>)`,\n  `Apply`, and `(@@)` from `Data.Singletons`.\n\n* Add an explicitly bidirectional
  pattern synonym `Sing`. Pattern\n  matching on `Sing` brings a `SingI ty` constraint
  into scope from a\n  singleton `Sing ty`.\n\n* Add an explicitly bidirectional pattern
  synonym `FromSing`. Pattern\n  matching on any demoted (base) type gives us the
  corresponding\n  singleton.\n\n* Add explicitly bidirectional pattern synonyms\n
  \ `SLambda{2..8}`. Pattern matching on any defunctionalized singleton\n  yields
  a term-level Haskell function on singletons.\n\n* Remove the family of `TyCon1`,
  `TyCon2`, ..., in favor of just `TyCon`.\n  GHC 8.4's type system is powerful enough
  to allow this nice simplification.\n\n2.3\n---\n* Documentation clarifiation in
  `Data.Singletons.TypeLits`, thanks to @ivan-m.\n\n* `Demote` was no longer a convenient
  way of calling `DemoteRep` and has been\nremoved. `DemoteRep` has been renamed `Demote`.\n\n*
  `DemoteRep` is now injective.\n\n* Demoting a `Symbol` now gives `Text`. This is
  motivated by making `DemoteRep`\n  injective. (If `Symbol` demoted to `String`,
  then there would be a conflict\n  between demoting `[Char]` and `Symbol`.)\n\n*
  Generating singletons also now generates fixity declarations for the singletonized\n
  \ definitions, thanks to @int-index.\n\n* Though more an implementation detail:
  singletons no longer uses kind-level proxies anywhere,\n  thanks again to @int-index.\n\n*
  Support for promoting higher-kinded type variables, thanks for @int-index.\n\n*
  `Data.Singletons.TypeLits` now exports defunctionalization symbols for `KnownNat`\nand
  `KnownSymbol`.\n\n* Better type inference support around constraints, as tracked
  in Issue #176.\n\n* Type synonym definitions are now ignored, as they should be.\n\n*
  `Show` instances for `SNat` and `SSymbol`, thanks to @cumber.\n\n* The `singFun`
  and `unSingFun` functions no longer use proxies, preferring\n  `TypeApplications`.\n\n2.2\n---\n*
  With `TypeInType`, we no longer kind `KProxy`. @int-index has very helpfully\nremoved
  the use of `KProxy` from `singletons`.\n\n* Drop support for GHC 7.x.\n\n* Remove
  `bugInGHC`. That function was intended to work around GHC's difficulty\nin detecting
  exhaustiveness of GADT pattern matches. GHC 8 comes with a much\nbetter exhaustiveness
  checker, and so this function is no longer necessary.\n\n2.1\n---\n* Require `th-desugar`
  >= 1.6\n\n* Work with GHC 8. GHC 8 gives the opportunity to simplify some pieces
  of\nsingletons, but these opportunities are not yet fully realized. For example,\ninjective
  type families means that we no longer need `Sing` to be a data\nfamily; it could
  be a type family. This might drastically simplify the way\nfunctions are singletonized.
  But not yet!\n\n* `singletons` now outputs a few more type/kind annotations to help
  GHC do\ntype inference. There may be a few more programs accepted than before.\n(This
  is the fix for #136.)\n\n2.0.1\n-----\n * Lots more functions in `Data.Singletons.Prelude.List`:\n
  \  `filter`, `find`, `elemIndex`, `elemIndices`, `findIndex`, `findIndices`,\n   `intersect`,
  `intersectBy`, `takeWhile`, `dropWhile`, `dropWhileEnd`,\n   `span`, `break`, `take`,
  `drop`, `splitAt`, `group`, `maximum`,\n   `minimum`, `insert`, `sort`, `groupBy`,
  `lookup`, `partition`,\n   `sum`, `product`, `length`, `replicate`, `transpose`,
  `(!!)`,\n   `nub`, `nubBy`, `unionBy`, `union`, `genericLength`\n\n2.0.0.2\n-------\n
  * Fix fixity of `*`.\n\n2.0.0.1\n-------\n * Make haddock work.\n\n2.0\n---\n\n*
  Instance promotion now works properly -- it was quite buggy in 1.0.\n\n* Classes
  and instances can now be singletonized.\n\n* Limited support for functional dependencies.\n\n*
  We now have promoted and singletonized versions of `Enum`, as well as `Bounded`.\n\n*
  Deriving `Enum` is also now supported.\n\n* Ditto for `Num`, which includes an instance
  for `Nat`, naturally.\n\n* Promoting a literal number now uses overloaded literals
  at the type level,\nusing a type-level `FromInteger` in the type-level `Num` class.\n\n*
  Better support for dealing with constraints. Some previously-unsingletonizable\nfunctions
  that have constrained parameters now work.\n\n* No more orphan `Quasi` instances!\n\n*
  Support for functions of arity 8 (instead of the old limit, 7).\n\n* Full support
  for fixity declarations.\n\n* A raft of bugfixes.\n\n* Drop support for GHC 7.8.
  You must have GHC 7.10.2.\n\n1.1.2.1\n-------\n\nFix bug #116, thus allowing locally-declared
  symbols to be used in GHC 7.10.\n\n1.1.2\n-----\n\n* No more GHC 7.8.2 support --
  you must have GHC 7.8.3.\n\n1.1.1\n-----\n\nUpdate testsuite to work with th-desugar-1.5.2.
  No functional changes.\n\n1.1\n---\n\nThis is a maintenance release to support building
  (but *not* testing, due to\nGHC bug #10058) with 7.10. This release also targets
  th-desugar-1.5. Some\ntypes changed (using th-desugar's new `DsMonad` instead of
  `Quasi`), but\nclients generally won't need to make any changes, unless they, too,
  generalize\nover `Quasi`.\n\n1.0\n---\n\nThis is a complete rewrite of the package.\n\n*
  A much wider array of surface syntax is now accepted for promotion\nand singletonization,
  including `let`, `case`, partially-applied functions,\nand anonymous functions,
  `where`, sections, among others.\n\n* Classes and instances can be promoted (but
  not singletonized).\n\n* Derivation of promoted instances for `Ord` and `Bounded`.\n\nThis
  release can be seen as a \"technology preview\". More features are coming\nsoon.\n\nThis
  version drops GHC 7.6 support.\n\n0.10.0\n------\n\nTemplate Haskell names are now
  more hygienic. In other words, `singletons`\nwon't try to gobble up something happened
  to be named `Sing` in your project.\n(Note that the Template Haskell names are not
  *completely* hygienic; names\ngenerated during singleton generation can still cause
  conflicts.)\n\nIf a function to be promoted or singletonized is missing a type signature,\nthat
  is now an *error*, not a warning.\n\nAdded a new external module Data.Singletons.TypeLits,
  which contain the\nsingletons for GHC.TypeLits. Some convenience functions are also
  provided.\n\nThe extension `EmptyCase` is no longer needed. This caused pain when
  trying\nto support both GHC 7.6.3 and 7.8.\n\n0.9.3\n-----\n\nFix export list of
  Data.Singletons.TH, again again.\n\nAdd `SEq` instances for `Nat` and `Symbol`.\n\n0.9.2\n-----\n\nFix
  export list of Data.Singletons.TH, again.\n\n0.9.1\n-----\n\nFix export list of
  Data.Singletons.TH.\n\n0.9.0\n-----\n\nMake compatible with GHC HEAD, but HEAD reports
  core lint errors sometimes.\n\nChange module structure significantly. If you want
  to derive your own\nsingletons, you should import `Data.Singletons.TH`. The module\n`Data.Singletons`
  now exports functions only for the *use* of singletons.\n\nNew modules `Data.Singletons.Bool`,
  `...Maybe`, `...Either`, and `...List`\nare just like their equivalents from `Data.`,
  except for `List`, which is\nquite lacking in features.\n\nFor singleton equality,
  use `Data.Singletons.Eq`.\n\nFor propositional singleton equality, use `Data.Singletons.Decide`.\n\nNew
  module `Data.Singletons.Prelude` is meant to mirror the Haskell Prelude,\nbut with
  singleton definitions.\n\nStreamline representation of singletons, resulting in
  *exponential* speedup\nat execution. (This has not been rigorously measured, but
  the data structures\nare now *exponentially* smaller.)\n\nAdd internal support for
  TypeLits, because the TypeLits module no longer\nexports singleton definitions.\n\nAdd
  support for existential singletons, through the `toSing` method of\n`SingKind`.\n\nRemove
  the `SingE` class, bundling its functionality into `SingKind`.\nThus, the `SingRep`
  synonym has also been removed.\n\nName change: `KindIs` becomes `KProxy`.\n\nAdd
  support for singletonizing calls to `error`.\n\nAdd support for singletonizing empty
  data definitions.\n\n0.8.6\n-----\n\nMake compatible with GHC HEAD, but HEAD reports
  core lint errors sometimes.\n\n0.8.5\n-----\n\nBug fix to make singletons compatible
  with GHC 7.6.1.\n\nAdded git info to cabal file.\n\n0.8.4\n-----\n\nUpdate to work
  with latest version of GHC (7.7.20130114).\n\nNow use branched type family instances
  to allow for promotion of functions\nwith overlapping patterns.\n\nPermit promotion
  of functions with constraints by omitting constraints.\n\n0.8.3\n-----\n\nUpdate
  to work with latest version of GHC (7.7.20121031).\n\nRemoved use of Any to simulate
  kind classes; now using KindOf and OfKind\nfrom GHC.TypeLits.\n\nMade compatible
  with GHC.TypeLits.\n\n0.8.2\n-----\n\nAdded this changelog\n\nUpdate to work with
  latest version of GHC (7.6.1). (There was a change to\nTemplate Haskell).\n\nMoved
  library into Data.Singletons.\n\n0.8.1\n-----\n\nUpdate to work with latest version
  of GHC. (There was a change to\nTemplate Haskell).\n\nUpdated dependencies in cabal
  to include the newer version of TH.\n\n0.8\n---\n\nInitial public release\n"
basic-deps:
  base: ! '>=4.11 && <4.12'
  text: ! '>=1.2'
  syb: ! '>=0.4'
  containers: ! '>=0.5'
  th-desugar: ! '>=1.8 && <1.9'
  mtl: ! '>=2.2.1'
  transformers: ! '>=0.5.2'
  ghc-boot-th: -any
  template-haskell: -any
all-versions:
- '0.8'
- '0.8.1'
- '0.8.2'
- '0.8.3'
- '0.8.4'
- '0.8.5'
- '0.8.6'
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.3'
- '0.10.0'
- '1.0'
- '1.1'
- '1.1.1'
- '1.1.2'
- '1.1.2.1'
- '2.0'
- '2.0.0.1'
- '2.0.0.2'
- '2.0.1'
- '2.1'
- '2.2'
- '2.3'
- '2.3.1'
- '2.4'
author: Richard Eisenberg <rae@cs.brynmawr.edu>, Jan Stolarek <jan.stolarek@p.lodz.pl>
latest: '2.4'
description-type: markdown
description: ! "singletons 2.4\n==============\n\n[![Hackage](https://img.shields.io/hackage/v/singletons.svg)](http://hackage.haskell.org/package/singletons)\n[![Build
  Status](https://travis-ci.org/goldfirere/singletons.svg?branch=master)](https://travis-ci.org/goldfirere/singletons)\n\nThis
  is the README file for the singletons library. This file contains all the\ndocumentation
  for the definitions and functions in the library.\n\nThe singletons library was
  written by Richard Eisenberg, <rae@cs.brynmawr.edu>, and\nwith significant contributions
  by Jan Stolarek, <jan.stolarek@p.lodz.pl>.  There\nare two papers that describe
  the library. Original one, _Dependently typed\nprogramming with singletons_, is
  available\n[here](https://cs.brynmawr.edu/~rae/papers/2012/singletons/paper.pdf)
  and will\nbe referenced in this documentation as the \"singletons paper\". A follow-up\npaper,
  _Promoting Functions to Type Families in Haskell_, is available\n[here](https://cs.brynmawr.edu/~rae/papers/2014/promotion/promotion.pdf)\nand
  will be referenced in this documentation as the\n\"promotion paper\".\n\nRyan Scott,
  <ryan.gl.scott@gmail.com>, is an active maintainer.\n\nPurpose of the singletons
  library\n---------------------------------\n\nThe library contains a definition
  of _singleton types_, which allow programmers\nto use dependently typed techniques
  to enforce rich constraints among the types\nin their programs. See the singletons
  paper for a more thorough introduction.\n\nThe package also allows _promotion_ of
  term-level functions to type-level\nequivalents. Accordingly, it exports a Prelude
  of promoted and singletonized\nfunctions, mirroring functions and datatypes found
  in Prelude, `Data.Bool`,\n`Data.Maybe`, `Data.Either`, `Data.Tuple` and `Data.List`.
  See the promotion\npaper for a more thorough introduction.\n\nCompatibility\n-------------\n\nThe
  singletons library requires GHC 8.4.1 or greater. Any code that uses the\nsingleton
  generation primitives needs to enable a long list of GHC\nextensions. This list
  includes, but is not necessarily limited to, the\nfollowing:\n\n* `DefaultSignatures`\n*
  `EmptyCase`\n* `ExistentialQuantification`\n* `FlexibleContexts`\n* `FlexibleInstances`\n*
  `GADTs`\n* `InstanceSigs`\n* `KindSignatures`\n* `RankNTypes`\n* `ScopedTypeVariables`\n*
  `TemplateHaskell`\n* `TypeFamilies`\n* `TypeInType`\n* `TypeOperators`\n* `UndecidableInstances`\n\nYou
  may also want\n\n* `-Wno-redundant-constraints`\n\nas the code that `singletons`
  generates uses redundant constraints, and there\nseems to be no way, without a large
  library redesign, to avoid this.\n\nModules for singleton types\n---------------------------\n\n`Data.Singletons`
  exports all the basic singletons definitions. Import this\nmodule if you are not
  using Template Haskell and wish only to define your\nown singletons.\n\n`Data.Singletons.TH`
  exports all the definitions needed to use the Template\nHaskell code to generate
  new singletons.\n\n`Data.Singletons.Prelude` re-exports `Data.Singletons` along
  with singleton\ndefinitions for various Prelude types. This module provides a singletonized\nequivalent
  of the real `Prelude`. Note that not all functions from original\n`Prelude` could
  be turned into singletons.\n\n`Data.Singletons.Prelude.*` modules provide singletonized
  equivalents of\ndefinitions found in the following `base` library modules: `Data.Bool`,\n`Data.Maybe`,
  `Data.Either`, `Data.List`, `Data.Tuple`, `Data.Void` and\n`GHC.Base`. We also provide
  singletonized `Eq`, `Ord`, `Show`, `Enum`, and\n`Bounded` typeclasses.\n\n`Data.Singletons.Decide`
  exports type classes for propositional equality.\n\n`Data.Singletons.TypeLits` exports
  definitions for working with `GHC.TypeLits`.\n\nModules for function promotion\n------------------------------\n\nModules
  in `Data.Promotion` namespace provide functionality required for\nfunction promotion.
  They mostly re-export a subset of definitions from\nrespective `Data.Singletons`
  modules.\n\n`Data.Promotion.TH` exports all the definitions needed to use the Template\nHaskell
  code to generate promoted definitions.\n\n`Data.Promotion.Prelude` and `Data.Promotion.Prelude.*`
  modules re-export all\npromoted definitions from respective `Data.Singletons.Prelude`\nmodules.
  `Data.Promotion.Prelude.List` adds a significant amount of functions\nthat couldn't
  be singletonized but can be promoted. Some functions still don't\npromote - these
  are documented in the source code of the module. There is also\n`Data.Promotion.Prelude.Bounded`
  module that provides promoted `PBounded`\ntypeclass.\n\nFunctions to generate singletons\n--------------------------------\n\nThe
  top-level functions used to generate singletons are documented in the\n`Data.Singletons.TH`
  module. The most common case is just calling `singletons`,\nwhich I'll describe
  here:\n\n```haskell\nsingletons :: Q [Dec] -> Q [Dec]\n```\n\nGenerates singletons
  from the definitions given. Because singleton generation\nrequires promotion, this
  also promotes all of the definitions given to the\ntype level.\n\nUsage example:\n\n```haskell\n$(singletons
  [d|\n  data Nat = Zero | Succ Nat\n  pred :: Nat -> Nat\n  pred Zero = Zero\n  pred
  (Succ n) = n\n  |])\n```\n\nDefinitions used to support singletons\n--------------------------------------\n\nPlease
  refer to the singletons paper for a more in-depth explanation of these\ndefinitions.
  Many of the definitions were developed in tandem with Iavor Diatchki.\n\n```haskell\ndata
  family Sing (a :: k)\n```\n\nThe data family of singleton types. A new instance
  of this data family is\ngenerated for every new singleton type.\n\n```haskell\nclass
  SingI (a :: k) where\n  sing :: Sing a\n```\n\nA class used to pass singleton values
  implicitly. The `sing` method produces\nan explicit singleton value.\n\n```haskell\ndata
  SomeSing k where\n  SomeSing :: Sing (a :: k) -> SomeSing k\n```\n\nThe `SomeSing`
  type wraps up an _existentially-quantified_ singleton. Note that\nthe type parameter
  `a` does not appear in the `SomeSing` type. Thus, this type\ncan be used when you
  have a singleton, but you don't know at compile time what\nit will be. `SomeSing
  Thing` is isomorphic to `Thing`.\n\n```haskell\nclass SingKind k where\n  type Demote
  k :: *\n  fromSing :: Sing (a :: k) -> Demote k\n  toSing   :: Demote k -> SomeSing
  k\n```\n\nThis class is used to convert a singleton value back to a value in the\noriginal,
  unrefined ADT. The `fromSing` method converts, say, a\nsingleton `Nat` back to an
  ordinary `Nat`. The `toSing` method produces\nan existentially-quantified singleton,
  wrapped up in a `SomeSing`.\nThe `Demote` associated\nkind-indexed type family maps
  the kind `Nat` back to the type `Nat`.\n\n```haskell\ndata SingInstance (a :: k)
  where\n  SingInstance :: SingI a => SingInstance a\nsingInstance :: Sing a -> SingInstance
  a\n```\n\nSometimes you have an explicit singleton (a `Sing`) where you need an
  implicit\none (a dictionary for `SingI`). The `SingInstance` type simply wraps a
  `SingI`\ndictionary, and the `singInstance` function produces this dictionary from
  an\nexplicit singleton. The `singInstance` function runs in constant time, using\na
  little magic.\n\n\nEquality classes\n----------------\n\nThere are two different
  notions of equality applicable to singletons: Boolean\nequality and propositional
  equality.\n\n* Boolean equality is implemented in the type family `(:==)` (which
  is actually\na synonym for the type family `(==)` from `Data.Type.Equality`) and
  the class\n`SEq`. See the `Data.Singletons.Prelude.Eq` module for more information.\n\n*
  Propositional equality is implemented through the constraint `(~)`, the type\n`(:~:)`,
  and the class `SDecide`. See modules `Data.Type.Equality` and\n`Data.Singletons.Decide`
  for more information.\n\nWhich one do you need? That depends on your application.
  Boolean equality has\nthe advantage that your program can take action when two types
  do _not_ equal,\nwhile propositional equality has the advantage that GHC can use
  the equality\nof types during type inference.\n\nInstances of both `SEq` and `SDecide`
  are generated when `singletons` is called\non a datatype that has `deriving Eq`.
  You can also generate these instances\ndirectly through functions exported from
  `Data.Singletons.TH`.\n\n\n`Show` classes\n--------------\n\nPromoted and singled
  versions of the `Show` class (`PShow` and `SShow`,\nrespectively) are provided in
  the `Data.Singletons.Prelude.Show` module. In\naddition, there is a `ShowSing` class
  provided in the\n`Data.Singletons.ShowSing` module, which facilitates the ability
  to write\n`Show` instances for `Sing` instances.\n\nWhat is the difference between
  the two? Let's use the `False` constructor as an\nexample. If you used the `PShow
  Bool` instance, then the output of calling\n`Show_` on `False` is `\"False\"`, much
  like the value-level `Show Bool` instance\n(similarly for the `SShow Bool` instance).
  However, the `ShowSing Bool`\ninstance is intended for printing the value of the
  _singleton_ constructor\n`SFalse`, so calling `showsSingPrec 0 SFalse` yields `\"SFalse\"`
  (simiarly for\nthe `Show (Sing (SBool z))` instance).\n\nInstance of `PShow`, `SShow`,
  `ShowSing`, and `Show` (for the singleton type)\nare generated when `singletons`
  is called on a datatype that has\n`deriving Show`. You can also generate these instances
  directly through\nfunctions exported from `Data.Singletons.TH`.\n\nA promoted and
  singled `Show` instance is provided for `Symbol`, but it is only\na crude approximation
  of the value-level `Show` instance for `String`. On the\nvalue level, showing `String`s
  escapes special characters (such as double\nquotes), but implementing this requires
  pattern-matching on character literals,\nsomething which is currently impossible
  at the type level. As a consequence, the\ntype-level `Show` instance for `Symbol`s
  does not do any character escaping.\n\n\nPre-defined singletons\n----------------------\n\nThe
  singletons library defines a number of singleton types and functions\nby default:\n\n*
  `Bool`\n* `Maybe`\n* `Either`\n* `Ordering`\n* `()`\n* tuples up to length 7\n*
  lists\n\nThese are all available through `Data.Singletons.Prelude`. Functions that\noperate
  on these singletons are available from modules such as `Data.Singletons.Bool`\nand
  `Data.Singletons.Maybe`.\n\nPromoting functions\n-------------------\n\nFunction
  promotion allows to generate type-level equivalents of term-level\ndefinitions.
  Almost all Haskell source constructs are supported -- see last\nsection of this
  README for a full list.\n\nPromoted definitions are usually generated by calling
  `promote` function:\n\n```haskell\n$(promote [d|\n  data Nat = Zero | Succ Nat\n
  \ pred :: Nat -> Nat\n  pred Zero = Zero\n  pred (Succ n) = n\n  |])\n```\n\nEvery
  promoted function and data constructor definition comes with a set of\nso-called
  \"symbols\". These are required to represent partial application at the\ntype level.
  Each function gets N+1 symbols, where N is the arity. Symbols\nrepresent application
  of between 0 to N arguments. When calling any of the\npromoted definitions it is
  important refer to it using their symbol\nname. Moreover, there is new function
  application at the type level represented\nby `Apply` type family. Symbol representing
  arity X can have X arguments passed\nin using normal function application. All other
  parameters must be passed by\ncalling `Apply`.\n\nUsers also have access to `Data.Promotion.Prelude`
  and its submodules (`Base`,\n`Bool`, `Either`, `List`, `Maybe` and `Tuple`). These
  provide promoted versions\nof function found in GHC's base library.\n\nNote that
  GHC resolves variable names in Template Haskell quotes. You cannot\nthen use an
  undefined identifier in a quote, making idioms like this not\nwork:\n```haskell\ntype
  family Foo a where ...\n$(promote [d| ... foo x ... |])\n```\nIn this example, `foo`
  would be out of scope.\n\nRefer to the promotion paper for more details on function
  promotion.\n\nClasses and instances\n---------------------\n\nThis is best understood
  by example. Let's look at a stripped down `Ord`:\n\n```haskell\nclass Eq a => Ord
  a where\n  compare :: a -> a -> Ordering\n  (<)     :: a -> a -> Bool\n  x < y =
  case x `compare` y of\n            LT -> True\n\t    EQ -> False\n\t    GT -> False\n```\n\nThis
  class gets promoted to a \"kind class\" thus:\n\n```haskell\nclass PEq a => POrd
  a where\n  type Compare (x :: a) (y :: a) :: Ordering\n  type (:<)    (x :: a) (y
  :: a) :: Bool\n  type x :< y = ... -- promoting `case` is yucky.\n```\n\nNote that
  default method definitions become default associated type family\ninstances. This
  works out quite nicely.\n\nWe also get this singleton class:\n\n```haskell\nclass
  SEq a => SOrd a where\n  sCompare :: forall (x :: a) (y :: a). Sing x -> Sing y
  -> Sing (Compare x y)\n  (%:<)    :: forall (x :: a) (y :: a). Sing x -> Sing y
  -> Sing (x :< y)\n\n  default (%:<) :: forall (x :: a) (y :: a).\n                   ((x
  :< y) ~ {- RHS from (:<) above -})\n\t\t=> Sing x -> Sing y -> Sing (x :< y)\n  x
  %:< y = ...  -- this is a bit yucky too\n```\n\nNote that a singletonized class
  needs to use `default` signatures, because\ntype-checking the default body requires
  that the default associated type\nfamily instance was used in the promoted class.
  The extra equality constraint\non the default signature asserts this fact to the
  type checker.\n\nInstances work roughly similarly.\n\n```haskell\ninstance Ord Bool
  where\n  compare False False = EQ\n  compare False True  = LT\n  compare True  False
  = GT\n  compare True  True  = EQ\n\ninstance POrd Bool where\n  type Compare 'False
  'False = 'EQ\n  type Compare 'False 'True  = 'LT\n  type Compare 'True  'False =
  'GT\n  type Compare 'True  'True  = 'EQ\n\ninstance SOrd Bool where\n  sCompare
  :: forall (x :: a) (y :: a). Sing x -> Sing y -> Sing (Compare x y)\n  sCompare
  SFalse SFalse = SEQ\n  sCompare SFalse STrue  = SLT\n  sCompare STrue  SFalse =
  SGT\n  sCompare STrue  STrue  = SEQ\n```\n\nThe only interesting bit here is the
  instance signature. It's not necessary\nin such a simple scenario, but more complicated
  functions need to refer to\nscoped type variables, which the instance signature
  can bring into scope.\nThe defaults all just work.\n\nOn names\n--------\n\nThe
  singletons library has to produce new names for the new constructs it\ngenerates.
  Here are some examples showing how this is done:\n\n1. original datatype: `Nat`\n\n
  \  promoted kind: `Nat`\n\n   singleton type: `SNat` (which is really a synonym
  for `Sing`)\n\n\n2. original datatype: `/\\`\n\n   promoted kind: `/\\`\n\n   singleton
  type: `%/\\`\n\n\n3. original constructor: `Succ`\n\n   promoted type: `'Succ` (you
  can use `Succ` when unambiguous)\n\n   singleton constructor: `SSucc`\n\n   symbols:
  `SuccSym0`, `SuccSym1`\n\n\n4. original constructor: `:+:`\n\n   promoted type:
  `':+:`\n\n   singleton constructor: `:%+:`\n\n   symbols: `:+:@#@$`, `:+:@#@$$`,
  `:+:@#@$$$`\n\n\n5. original value: `pred`\n\n   promoted type: `Pred`\n\n   singleton
  value: `sPred`\n\n   symbols: `PredSym0`, `PredSym1`\n\n\n6. original value: `+`\n\n
  \  promoted type: `+`\n\n   singleton value: `%+`\n\n   symbols: `+@#@$`, `+@#@$$`,
  `+@#@$$$`\n\n\n7. original class: `Num`\n\n   promoted class: `PNum`\n\n   singleton
  class: `SNum`\n\n\n8. original class: `~>`\n\n   promoted class: `#~>`\n\n   singleton
  class: `%~>`\n\n\nSpecial names\n-------------\n\nThere are some special cases,
  listed below (with asterisks\\* denoting special\ntreatment):\n\n1. original datatype:
  `[]`\n\n   promoted kind: `[]`\n\n   singleton type\\*: `SList`\n\n\n2. original
  constructor: `[]`\n\n   promoted type: `'[]`\n\n   singleton constructor\\*: `SNil`\n\n
  \  symbols\\*: `NilSym0`\n\n\n3. original constructor: `:`\n\n   promoted type:
  `':`\n\n   singleton constructor\\*: `SCons`\n\n   symbols: `:@#@$`, `:@#@$$`, `:@#@$$$`\n\n\n4.
  original datatype: `(,)`\n\n   promoted kind: `(,)`\n\n   singleton type\\*: `STuple2`\n\n\n5.
  original constructor: `(,)`\n\n   promoted type: `'(,)`\n\n   singleton constructor\\*:
  `STuple2`\n\n   symbols\\*: `Tuple2Sym0`, `Tuple2Sym1`, `Tuple2Sym2`\n\n   All tuples
  (including the 0-tuple, unit) are treated similarly.\n\n\n6. original value: `(.)`\n\n
  \  promoted type\\*: `(:.)`\n\n   singleton value: `(%.)`\n\n   symbols: `(.@#@$)`,
  `(.@#@$$)`, `(.@#@$$$)`\n\n   The promoted type is special because GHC can't parse
  a type named `(.)`.\n\n7. original value: `(!)`\n\n   promoted type\\*: `(:!)`\n\n
  \  singleton value: `(%!)`\n\n   symbols: `(!@#@$)`, `(!@#@$$)`, `(!@#@$$$)`\n\n
  \  The promoted type is special because GHC can't parse a type named `(!)`.\n\n8.
  original value: `___foo`\n\n   promoted type\\*: `US___foo` (\"`US`\" stands for
  \"underscore\")\n\n   singleton value\\*: `___sfoo`\n\n   symbols\\*: `US___fooSym0`\n\n
  \  All functions that begin with leading underscores are treated similarly.\n\nSupported
  Haskell constructs\n----------------------------\n\nThe following constructs are
  fully supported:\n\n* variables\n* tuples\n* constructors\n* if statements\n* infix
  expressions and types\n* `_` patterns\n* aliased patterns\n* lists\n* sections\n*
  undefined\n* error\n* deriving `Eq`, `Ord`, `Show`, `Bounded`, and `Enum`\n* class
  constraints (though these sometimes fail with `let`, `lambda`, and `case`)\n* literals
  (for `Nat` and `Symbol`), including overloaded number literals\n* unboxed tuples
  (which are treated as normal tuples)\n* records\n* pattern guards\n* case\n* let\n*
  lambda expressions\n* `!` and `~` patterns (silently but successfully ignored during
  promotion)\n* class and instance declarations\n* higher-kinded type variables (see
  below)\n* functional dependencies (with limitations -- see below)\n\nHigher-kinded
  type variables in `class`/`data` declarations must be annotated\nexplicitly. This
  is due to GHC's handling of *complete\nuser-specified kind signatures*, or [CUSKs](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#complete-user-supplied-kind-signatures-and-polymorphic-recursion).\nBriefly,
  `singletons` has a hard\ntime conforming to the precise rules that GHC imposes around
  CUSKs and so\nneeds a little help around kind inference here. See\n[this pull request](https://github.com/goldfirere/singletons/pull/171)
  for more\nbackground.\n\n`singletons` is slightly more conservative with respect
  to `deriving` than GHC is.\nThe stock classes listed above (`Eq`, `Ord`, `Show`,
  `Bounded`, and `Enum`) are\nthe only ones that `singletons` will derive without
  an explicit deriving strategy.\nTo do anything more exotic, one must explicitly
  indicate one's intentions by\nusing the `DerivingStrategies` extension.\n\n`singletons`
  fully supports the `anyclass` strategy as well as the `stock` strategy\n(at least,
  for the classes listed above). `singletons` does not support the\n`newtype` strategy,
  as there is not an equivalent of `coerce` at the type level.\n\nThe following constructs
  are supported for promotion but not singleton generation:\n\n* scoped type variables\n*
  overlapping patterns. Note that overlapping patterns are\n  sometimes not obvious.
  For example, the `filter` function does not\n  singletonize due\n  to overlapping
  patterns:\n```haskell\nfilter :: (a -> Bool) -> [a] -> [a]\nfilter _pred []    =
  []\nfilter pred (x:xs)\n  | pred x         = x : filter pred xs\n  | otherwise      =
  filter pred xs\n```\nOverlap is caused by `otherwise` catch-all guard, which is
  always true and thus\noverlaps with `pred x` guard.\n\nThe following constructs
  are not supported:\n\n* list comprehensions\n* do\n* arithmetic sequences\n* datatypes
  that store arrows, `Nat`, or `Symbol`\n* literals (limited support)\n\nWhy are these
  out of reach? The first two depend on monads, which mention a\nhigher-kinded type
  variable. GHC did not support higher-sorted kind variables,\nwhich are be necessary
  to promote/singletonize monads, and `singletons` has\nnot be rewritten to accommodate
  this new ability. [This bug\nreport](https://github.com/goldfirere/singletons/issues/184)
  is a feature request\nlooking for support for these constructs.\n\nArithmetic sequences
  are defined using `Enum` typeclass, which uses infinite\nlists.\n\nAs described
  in the promotion paper, promotion of datatypes that store arrows is\ncurrently impossible.
  So if you have a declaration such as\n\n```haskell\ndata Foo = Bar (Bool -> Maybe
  Bool)\n```\n\nyou will quickly run into errors.\n\nLiterals are problematic because
  we rely on GHC's built-in support, which\ncurrently is limited. Functions that operate
  on strings will not work because\ntype level strings are no longer considered lists
  of characters. Function\nworking on integer literals can be promoted by rewriting
  them to use\n`Nat`. Since `Nat` does not exist at the term level it will only be
  possible to\nuse the promoted definition, but not the original, term-level one.\n\nThis
  is the same line of reasoning that forbids the use of `Nat` or `Symbol`\nin datatype
  definitions. But, see [this bug\nreport](https://github.com/goldfirere/singletons/issues/76)
  for a workaround.\n\nSupport for `*`\n---------------\n\nThe built-in Haskell promotion
  mechanism does not yet have a full story around\nthe kind `*` (the kind of types
  that have values). Ideally, promoting some form\nof `TypeRep` would yield `*`, but
  the implementation of TypeRep would have to be\nupdated for this to really work
  out. In the meantime, users who wish to\nexperiment with this feature have two options:\n\n1)
  The module `Data.Singletons.TypeRepStar` has all the definitions possible for\nmaking
  `*` the promoted version of `TypeRep`, as `TypeRep` is currently implemented.\nThe
  singleton associated with `TypeRep` has one constructor:\n\n    ```haskell\n    newtype
  instance Sing :: Type -> Type where\n      STypeRep :: TypeRep a -> Sing a\n    ```\n\n
  \  Thus, a `TypeRep` is stored in the singleton constructor. However,\nany datatypes
  that store `TypeRep`s will not generally work as expected; the\nbuilt-in promotion
  mechanism will not promote `TypeRep` to `*`.\n\n2) The module `Data.Singletons.CustomStar`
  allows the programmer to define a subset\nof types with which to work. See the Haddock
  documentation for the function\n`singletonStar` for more info.\n\nKnown bugs\n----------\n\n*
  Record updates don't singletonize\n* Inference dependent on functional dependencies
  is unpredictably bad. The\n  problem is that a use of an associated type family
  tied to a class with\n  fundeps doesn't provoke the fundep to kick in. This is GHC's
  problem, in\n  the end.\n"
license-name: BSD3
