homepage: https://github.com/andreasabel/Sit
changelog-type: ''
hash: 81f02152a25595fc0c9d82d75e79f467e5ebc7279934bcef00d60b70b78f0bb2
test-bench-deps: {}
maintainer: Andreas Abel <andreas.abel@gu.se>
synopsis: Prototypical type checker for Type Theory with Sized Natural Numbers
changelog: ''
basic-deps:
  data-lens-light: ! '>=0.1.2.2 && <0.2'
  base: ! '>=4.2 && <5'
  array: ! '>=0.3 && <1'
  containers: ! '>=0.3 && <1'
  mtl: ! '>=2.2.1 && <3'
all-versions:
- 0.2017.2.26
- 0.2017.5.1
- 0.2017.5.2
author: Andreas Abel <andreas.abel@gu.se>
latest: 0.2017.5.2
description-type: markdown
description: ! "# Sit: size-irrelevant types\nA prototype dependently-typed language
  with sized natural numbers\n\nSit parses and typechecks `.agda` that conform to
  the Sit language syntax.\n\nSyntax (excerpt):\n```agda\n--- Lexical stuff\n\n---
  Single line comment\n{- Block comment -}\n--;               --- End of declaration
  (mandatory)\nf_x'1             --- identifiers start with a letter, then have letters,
  digits, _ and '\n\n--- Declarations\n\nx : T --;         --- type signature\nx =
  t --;         --- definition\nopen import M --; --- ignored, for Agda compatibility\n\n---
  Sit specifics\n\noo                --- infinity size\ni + 1             --- successor
  size\n\nNat a             --- type of natural numbers below size a\nzero a            ---
  number zero (a is size annotation)\nsuc a n           --- successor of n (a is size
  annotation)\n\nforall .i  -> T   --- irrelevant size quantification\nforall ..i
  -> T   --- relevant size quantification\n\nfix T t n         --- recursive function
  over natural numbers\n                  ---   T: return type\n                  ---
  \  t: functional\n                  ---   n: natural number argument\n\n\\{ (zero
  _) -> t; (suc _ x) -> u }   --- case distinction function\n\n--- Inherited Agda
  syntax\n\nU -> T            --- non-dependent function type\n(x y z : U) -> T  ---
  dependent function type\n\\ x y z -> t      --- lambda-abstraction\nt u               ---
  application\n\nSet               --- first universe\nSet1              --- second
  universe\nSet a             --- universe of level a\n\n```\n\n## Limitations\n\nSit
  only understands a tiny subset of the Agda language.\nSit does not understand layout,
  instead each declaration has to be terminated with\ncomment `--;`.\n\n## Installation\n\nRequires
  GHC and cabal, for instance via the Haskell Platform.\nIn a shell, type\n```\n  cabal
  install\n```\n\n## Test\n\nIn a shell, type\n```\n  Sit.bin test/Test.agda\n```\n\n##
  Example\n\nThis is the addition function in Sit:\n```\n--- Addition of natural numbers\n\nplus
  : forall .i -> Nat i -> Nat oo -> Nat oo   --;\nplus = \\ i x y ->\n  fix (\\ i
  x -> Nat oo)\n      (\\ _ f -> \\\n        { (zero _)  -> y\n        ; (suc _ x)
  -> suc oo (f x)\n        })\n      x\n```\n"
license-name: LicenseRef-OtherLicense
