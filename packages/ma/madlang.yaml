homepage: https://hub.darcs.net/vmchale/madlang
changelog-type: ''
hash: eca5fe29385a715c9abb9dd3ea07a13d8ac1938d9290ca3e65a9629bad27e36b
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  megaparsec: -any
  criterion: -any
  madlang: -any
  hspec-megaparsec: -any
maintainer: vanessa.mchale@reconfigure.io
synopsis: Randomized templating language DSL
changelog: ''
basic-deps:
  http-client: -any
  titlecase: -any
  zip-archive: -any
  ansi-wl-pprint: -any
  composition-prelude: ! '>=0.1.1.0'
  MonadRandom: -any
  base: ! '>=4.8 && <5'
  text: -any
  megaparsec: ! '>=6.0'
  random-shuffle: -any
  th-lift-instances: -any
  containers: -any
  madlang: -any
  tar: -any
  zlib: -any
  mtl: -any
  file-embed: -any
  optparse-applicative: -any
  recursion-schemes: -any
  template-haskell: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '1.0.0.0'
- '1.0.0.1'
- '1.0.1.0'
- '1.1.1.0'
- '1.1.2.0'
- '1.1.3.0'
- '2.0.0.0'
- '2.0.0.1'
- '2.0.1.0'
- '2.0.1.1'
- '2.0.1.2'
- '2.1.0.0'
- '2.1.0.1'
- '2.1.0.2'
- '2.1.0.3'
- '2.1.0.4'
- '2.1.1.0'
- '2.1.1.1'
- '2.1.1.2'
- '2.1.1.3'
- '2.1.2.0'
- '2.2.0.1'
- '2.3.0.2'
- '2.3.0.3'
- '2.3.0.4'
- '2.3.0.5'
- '2.3.0.6'
- '2.3.1.0'
- '2.3.1.1'
- '2.3.2.0'
- '2.4.0.0'
- '2.4.0.1'
- '2.4.0.2'
- '2.4.1.0'
- '2.4.1.1'
- '2.4.1.2'
- '2.4.1.3'
- '2.4.1.4'
- '2.4.1.5'
- '2.4.1.6'
- '2.4.2.0'
- '2.4.2.1'
- '2.4.2.2'
- '2.4.2.3'
- '2.4.2.4'
- '2.4.2.5'
- '2.4.2.6'
- '2.4.2.7'
- '2.4.2.8'
- '2.4.2.10'
- '2.4.2.11'
- '2.4.2.12'
- '2.4.2.13'
- '2.4.2.14'
- '2.4.2.20'
- '2.4.2.21'
- '2.4.2.22'
- '2.4.2.25'
- '3.0.0.0'
- '3.0.0.1'
- '3.0.0.3'
- '3.0.0.4'
- '3.1.0.0'
- '3.1.0.1'
author: Vanessa McHale
latest: '3.1.0.1'
description-type: markdown
description: ! "# Madlang DSL for generating random text\n\n[![Windows build status](https://ci.appveyor.com/api/projects/status/github/vmchale/madlang?svg=true)](https://ci.appveyor.com/project/vmchale/madlang)\n[![Build
  Status](https://travis-ci.org/vmchale/madlang.svg?branch=master)](https://travis-ci.org/vmchale/madlang)\n\nThis
  is the Madlang DSL for generating text. You specify a template, and Madlang\nwill
  create randomized text from the template.\n\nMadlang is an interpreted language,
  written in Haskell. The primary way to use\nMadlang is on the command line using
  the interpreter, but there is also a partially completed library\nand EDSL.\n\nMadlang
  is intended to explore computational creativity and provide an easy\nway to get
  started with generative literature.\n\n## Installation\n\n### Stack\n\nDownload
  `stack` with\n\n```\ncurl -sSL http://haskellstack.org | sh\n```\n\nThen run `stack
  install madlang --resolver nightly`. This is the recommended way\nto install `madlang`,
  but it may take awhile.\n\n### Nix\n\nIf you're on linux or mac, you can get binaries
  via nix.\n\nDownload nix with\n\n```\ncurl https://nixos.org/nix/install | sh\n```\n\nFrom
  there, `nix-env -i madlang` will install the executable.\n\n## Tutorial\n\nThe smallest
  program possible in Madlang is simply a return declaration, viz.\n\n```madlang\n:return\n
  \   1.0 \"heads\"\n    1.0 \"tails\"\n```\n\nThe `:return` tells us this that this
  will be the final value when run, while\nthe numbers in front of the strings denote
  relative weights. Save this as\n`gambling.mad`, and run\n\n```bash\n $ madlang run
  gambling.mad\n heads\n```\n\nNow let's try something a little more complicated:\n\n```madlang\n:define
  person\n    1.0 \"me\"\n    1.0 \"you\"\n\n:return\n    1.0 \"The only one of us
  walking out of this room alive is going to be \" person \".\"\n```\n\nA bit more
  sinister, perhaps. The `:define` statement there declares a new\n*identifier*, which
  we can later reference. Save this as `fate.mad` and run:\n\n```bash\n $ madlang
  run fate.mad\n The only one of us walking out of this room alive is going to be
  you.\n```\n\nWe can also refer to another identifier within a `:define` block.\n\n```madlang\n:define
  coin\n    1.0 \"heads\"\n    1.0 \"tails\"\n\n:define realisticCoin\n    1.0 coin\n
  \   0.03 \"on its side\"\n\n:return realisticCoin\n```\n\nIn addition to identifiers,
  we can also define *categories*. Categories are just\ngroups of identifiers. We
  can define one like so:\n\n```madlang\n:define color\n    1.0 \"yellow\"\n    1.0
  \"blue\"\n\n:define texture\n    1.0 \"soft\"\n    1.0 \"scratchy\"\n    1.0 \"dimpled\"\n\n:category
  adjective\n    | color\n    | texture\n\n:return\n    1.0 adjective\n```\n\nThen,
  when we can `adjective`, it will pick one of \"yellow\", \"blue\",â€¦\n\"dimpled\"
  with equal probability.\n\nFinally, one of the most powerful features of `madlang`
  is the ability to\ninclude libraries in a file. Open the following and save it as
  `gambling.mad`:\n\n```madlang\n:define coin\n    1.0 \"heads\"\n    1.0 \"tails\"\n\n:return\n
  \   1.0 \"\"\n```\n\nThen, open the following and save it in the same directory
  as\n`realistic-gambling.mad`:\n\n```madlang\n:include gambling.mad\n\n:define realisticGambling\n
  \   1.0 coin\n    0.03 \"on its side\"\n\n:return\n    1.0 realisticGambling\n```\n\nThen
  run it with:\n\n```bash\n $ madlang run realistic-gambling.mad\n```\n\n`madlang`
  comes with several libraries prepackaged. You can install\nthem for the current
  user with:\n\n```bash\n $ madlang install\n```\n\nTry this out:\n\n```\n:include
  colors.mad\n\n:define weirdDog\n    1.0 colors-color \"dog\"\n\n:return\n    1.0
  \"On my walk today I saw a \" weirdDog \".\"\n```\n\n### Examples\n\nThere is a
  Shakespearean insult generator available to test out at [my\nsite](http://blog.vmchale.com/madlang).\n\n##
  Tooling\n\n### Vim\n\nThere is a vim plugin available [here](https://github.com/vmchale/madlang-vim).\n\n###
  Project Templates\n\nThere is a project template bundled with\n[pi](https://github.com/vmchale/project-init),
  which you can install with\n\n```bash\n $ curl -LSfs https://japaric.github.io/trust/install.sh
  | sh -s -- --git vmchale/project-init\n```\n\nand invoke with\n\n```\n $ pi new
  madlang story\n```\n\n### Manpages\n\nYou can view documentation for `madlang` on
  Linux, Mac, or BSD by typing:\n\n```bash\n $ man madlang\n```\n\n## Contributions\n\n###
  Release Naming\n\nReleases are named using the `releases.mad` file found\n[here](https://hub.darcs.net/vmchale/madlang-releases).
  You will need to install\nthe standard libraries using\n\n```bash\n $ madlang install\n```\n\nbefore
  running\n\n```bash\n $ just name\n```\n"
license-name: BSD3
