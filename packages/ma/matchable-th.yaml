homepage: ''
changelog-type: markdown
hash: b5d602bf78c74e3e74fa313db67ce9812578cb779e1412230d58993d1005ebc0
test-bench-deps:
  base: -any
  matchable: -any
  containers: -any
  matchable-th: -any
maintainer: viercc@gmail.com
synopsis: Generates Matchable instances using TemplateHaskell
changelog: |
  # 0.1.1.1

  - Use "th-abstraction" >= 0.4 to cover changes in forthcoming
    template-haskell-2.17 bundled in GHC 9.0

  # 0.1.1.0

  - Depends on "th-abstraction" >= 0.3, rather than < 0.3 at
    previous version.

  # 0.1.0.0

  - Initial release.
basic-deps:
  base: '>=4.10 && <5'
  th-abstraction: '>=0.4.0.0'
  matchable: '>=0.1.2'
  template-haskell: '>=2.4 && <2.17'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
author: Koji Miyazato
latest: 0.1.1.1
description-type: markdown
description: |
  ## matchable-th

  This package provides TemplateHaskell functions to
  generate instances of `Matchable` and `Bimatchable` type classes,
  which are from `matchable` package.

  ### Example

  ``` haskell
  {-# LANGUAGE DeriveFunctor #-}
  {-# LANGUAGE TemplateHaskell #-}

  import Data.Functor.Classes (Eq1(..))
  import Data.Matchable
  import Data.Matchable.TH

  newtype G a = G [(a, Int, a)]
    deriving (Show, Eq, Functor)

  $(deriveMatchable ''G)

  -- @deriveMatchable@ generates a @Matchable@ instance only,
  -- so you also have to declare @Functor G@ and @Eq1 G@.
  -- There is a handy @DeriveFunctor@ extension.
  -- Also, you can use @liftEqDefault@ to easily implement @liftEq@.
  instance Eq1 G where
    liftEq = liftEqDefault
  ```

  ``` haskell
  {-# LANGUAGE TemplateHaskell #-}

  import Data.Functor.Classes (Eq2(..))
  import Data.Bimatchable
  import Data.Matchable.TH

  -- Most simple case
  data BiF a b = BiF0 | BiF1 a b

  instance Eq2 BiF where
    liftEq2 = liftEq2Default

  instance Bifunctor BiF where
    bimap = bimapRecovered

  $(deriveBimatchable ''BiF)

  -- Test case for using [], tuple, and another Bimatchable instance
  data BiG a b = BiG0 | BiG1 [a] [b] | BiG2 (Int, BiF a b)

  instance Eq2 BiG where
    liftEq2 = liftEq2Default

  instance Bifunctor BiG where
    bimap = bimapRecovered

  $(deriveBimatchable ''BiG)
  ```
license-name: BSD-3-Clause
