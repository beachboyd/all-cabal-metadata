homepage: https://github.com/https://github.com/isovector/type-sets/tree/master/magic-tyfams#readme
changelog-type: markdown
hash: 40dcdf3f4b8d337aad2586f4b919cf430ddd348e43f2a448d85b4c52109fff46
test-bench-deps: {}
maintainer: sandy@sandymaguire.me
synopsis: Write plugins for magic type families with ease
changelog: |
  # Changelog for type-sets

  ## 0.1.1.0 --- 2019-08-11

  - Added `WhenStuck`, which plugins can use to offer error messages when the
      plugin isn't enabled.

  ## 0.1.0.2 --- 2019-08-06

  - Fixed a bug in the cabal metadata

  ## 0.1.0.1 --- 2019-08-05

  - Update documentation

  ## 0.1.0.0 --- 2019-08-05

  - Initial release!

  ## Unreleased changes
basic-deps:
  ghc: ! '>=8.6.3 && <8.8'
  base: ! '>=4.7 && <5'
  syb: ! '>=0.7 && <0.8'
  ghc-tcplugins-extra: ! '>=0.3 && <0.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
author: Sandy Maguire
latest: 0.1.1.0
description-type: markdown
description: |+
  # magic-tyfams

  [![Hackage](https://img.shields.io/hackage/v/magic-tyfams.svg?logo=haskell&label=magic-tyfams)](https://hackage.haskell.org/package/magic-tyfams)

  ## Dedication

  > G.O.B.: Two drowned white doves from "Flowers to Doves," a rabbit from "Doves
  >   to Rabbit," also drowned. These were mice...
  >
  > Tobias: From "Rabbit to Mice?"
  >
  > G.O.B.: No. That can't be done. No, these were a part of something I call
  >   *mice-cellaneous*: "Mouse in Purse." "Mouse in Drink." Here's a mouse, now
  >   it's gone...
  >
  > --Arrested Development


  ## Overview

  `magic-tyfams` writes the annoying parts of GHC plugins so you don't have to. It
  provides a convenient interface for implementing magical type families.

  For example, consider the following definition in `mypackage` of an always-stuck
  type family:

  ```haskell
  module Some.Module where

  type family CmpType (a :: k) (b :: k) :: Ordering
  ```

  We can generate a plugin that will solve this:

  ```haskell
  module Some.Plugin where

  plugin :: Plugin
  plugin = magicTyFamPlugin "mypackage"
                            "Some.Module"
                            "CmpType" $
    withStuckSemantics $ \[_k, a, b] ->
      pure $ promoteOrdering $ nonDetCmpType a b


  promoteOrdering :: Ordering -> Type
  promoteOrdering = flip mkTyConApp [] . \case
     LT -> promotedLTDataCon
     EQ -> promotedEQDataCon
     GT -> promotedGTDataCon
  ```

  Enabling this plugin via `-fplugin=Some.Plugin` will now automagically solve
  `CmpType`! Nice!

  ```haskell
  {-# OPTIONS_GHC -fplugin=Some.Plugin #-}

  import Proxy

  -- compiles just fine!
  test :: Proxy (CmpType Int Int) -> Proxy 'EQ
  test = id
  ```


  ## Acknowledgments

  Thanks to [Christiaan Baaij][chistiaanb] and [Matt Pickering][mpickering] for
  their indispensable help convincing GHC to do the right thing here.

  [chistiaanb]: https://christiaanb.github.io/
  [mpickering]: http://mpickering.github.io/

license-name: BSD-3-Clause
