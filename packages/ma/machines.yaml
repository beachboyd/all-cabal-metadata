homepage: http://github.com/ekmett/machines/
changelog-type: markdown
hash: 87876a485aa4671e917c3685d7596ab323de8cb57248d29df8efcc7869ea453d
test-bench-deps:
  conduit-combinators: ! '>=0.2.5 && <1.4'
  base: ==4.*
  criterion: ! '>=0.6 && <1.5'
  doctest: ! '>=0.11.1 && <0.16'
  conduit: ! '>=1.0 && <1.4'
  pipes: ! '>=4 && <4.4'
  mtl: ! '>=2 && <2.3'
  machines: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Networked stream transducers
changelog: ! "0.6.3\n-----\n* Add `Semigroup` instance for `Is`\n* Add `MonadFail`
  instance for `PlanT`\n* Support `doctest-0.12`\n\n0.6.2\n-----\n* Revamp `Setup.hs`
  to use `cabal-doctest`. This makes it build\n  with `Cabal-2.0`, and makes the `doctest`s
  work with `cabal new-build` and\n  sandboxes.\n* Various performance improvements\n*
  Add the `flattened` and `traversing` functions, as well as the `AutomatonM`\n  class,
  to `Data.Machine.Process`\n* Add the `Data.Machine.MealyT` module\n* Add `plug`
  to `Data.Machine.Source`\n* Add `capT` to `Data.Machine.Tee`\n* Fix a bug in `teeT`
  that caused it to run actions too many times\n* Add `capWye` to `Data.Machine.Wye`\n\n0.6.1\n-----\n*
  Bumped upper version bounds for `comonad`, `conduit-combinators`, `criterion`, `distributive`,
  `pointed`, and `transformers`\n* Fix compilation with `stack`\n* Added `strippingPrefix`,
  `unfold`, `unfoldT`, `zipping`\n\n0.6\n---\n* Added better fanout combinators. `Data.Machine.Fanout`\n*
  Added a module for lifting machines that run in transformed monads. `Data.Machine.Lift`\n*
  Added instances for `Mealy` and `Moore`.\n* Explicitly implemented `(<*>)` `(*>)`
  and `(<*)` for `PlanT`.\n* Added `Data.Machine.Runner` with various tools for running
  machines.\n* Added `teeT`.\n* Added `unfoldPlan` and `preplan`\n\n0.5.1\n-----\n*
  `profunctors` 5 support\n* GHC 7.10 warnings have been cleaned up\n\n0.5\n---\n*
  Major bug fix (and semantic change) for `Plan`'s `(<|>)`.\n\n0.4.2\n-----\n* Add
  `Monoid` and `Semigroups` instances for `MachineT`\n\n0.4.1\n-----\n* Support `void`
  0.7, fixed upper bounds on dependencies going forward.\n\n0.4.0.1\n-----\n* Bumped
  the bounds for `mtl` and `transformers`\n\n0.4\n-----\n\n0.2.5\n-----\n* Added `deconstruct`,
  `tagDone` and `finishWith`\n\n0.2.4\n-----\n* Added `asParts`, `sinkPart_`, `autoM`,
  and `fitM`\n\n0.2.1\n-----\n* Fixed the `Mealy` Monad\n\n0.2\n---\n* Removed the
  input type parameter from (almost) all of the types.\n\n0.1\n---\n* Initial release\n"
basic-deps:
  semigroupoids: ! '>=5 && <6'
  void: ! '>=0.6.1 && <1'
  base: ! '>=4.5 && <5'
  comonad: ! '>=3 && <6'
  pointed: ! '>=3 && <6'
  adjunctions: ! '>=4.2 && <5'
  distributive: <0.6
  semigroups: ! '>=0.8.3 && <1'
  containers: ! '>=0.3 && <0.6'
  mtl: ! '>=2 && <2.3'
  transformers: ! '>=0.3 && <0.6'
  transformers-compat: ! '>=0.3'
  profunctors: ! '>=3 && <6'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.2.1'
- '0.2.1.1'
- '0.2.1.2'
- '0.2.1.3'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
- '0.2.4'
- '0.2.5'
- '0.4'
- '0.4.0.1'
- '0.4.1'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.3'
author: Edward A. Kmett, RÃºnar Bjarnason, Josh Cough
latest: '0.6.3'
description-type: markdown
description: ! 'machines

  ========


  [![Hackage](https://img.shields.io/hackage/v/machines.svg)](https://hackage.haskell.org/package/machines)
  [![Build Status](https://secure.travis-ci.org/ekmett/machines.png?branch=master)](http://travis-ci.org/ekmett/machines)


  *Ceci n''est pas une pipe*


  Machines are demand driven input sources like pipes or conduits, but can support
  multiple inputs.


  You design a `Machine` by writing a `Plan`. You then `construct` the machine.


  Simple machines that take one input are called a `Process` and processes form a
  `Category`. More generally you can attach a

  `Process` to the output of any type of `Machine`, yielding a new `Machine`.


  More complicated machines provide other ways of connecting to them.


  Typically the use of machines proceeds by using simple plans into machine `Tee`s
  and `Wye`s, capping many of the inputs to

  those with possibly monadic sources, feeding the rest input (possibly repeatedly)
  and calling `run` or `runT` to get the

  answers out.


  There is a lot of flexibility when building a machine in choosing between empowering
  the machine to run its own monadic effects

  or delegating that responsibility to a custom driver.


  A port of this design to scala is available from runarorama/scala-machines


  Runar''s slides are also available from https://dl.dropbox.com/u/4588997/Machines.pdf


  Some worked examples are here https://github.com/alanz/machines-play


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
