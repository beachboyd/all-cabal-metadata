homepage: https://github.com/fosskers/mapalgebra
changelog-type: markdown
hash: db2aa01ee06f582ae3e1707dc053eaeb87003a11bc77d63aff053bb2c983434a
test-bench-deps:
  bytestring: -any
  HUnit-approx: ! '>=1.1 && <1.2'
  base: ! '>=4.10 && <4.12'
  massiv-io: ==0.1.*
  massiv: ==0.1.*
  criterion: ! '>=1.1 && <1.4'
  data-default: -any
  containers: -any
  mapalgebra: -any
  tasty-quickcheck: ! '>=0.8 && <0.10'
  tasty-hunit: ! '>=0.9 && <0.11'
  tasty: ! '>=0.11 && <2.0'
  deepseq: -any
  QuickCheck: -any
  hmatrix: ==0.18.*
  vector: ! '>=0.11 && <0.13'
maintainer: colin@fosskers.ca
synopsis: Efficient, polymorphic Map Algebra.
changelog: ! "## 0.1.1\n\n- Added `histogram` and `breaks` functions for automatically
  producing\n  \"break point\" lists for functions like `greenRed`. Currently works\n
  \ only for `Word8` Rasters.\n\n## 0.1.0\n\n- Initial release.\n"
basic-deps:
  bytestring: -any
  base: ! '>=4.10 && <4.12'
  massiv-io: ! '>=0.1 && <0.2'
  massiv: ! '>=0.1 && <0.2'
  data-default: -any
  containers: -any
  deepseq: -any
  hmatrix: ! '>=0.18 && <0.19'
  vector: ! '>=0.11 && <0.13'
all-versions:
- 0.1.0
- 0.1.1
author: Colin Woodbury
latest: 0.1.1
description-type: markdown
description: ! "# mapalgebra\n\n*Efficient, polymorphic Map Algebra for Haskell.*\n\nThis
  library is an implementation of *Map Algebra* as described in the\nbook *GIS and
  Cartographic Modeling* by Dana Tomlin. The fundamental\nprimitive is the `Raster`,
  a rectangular grid of data that usually describes\nsome area on the earth.\n\n`mapalgebra`
  is built on top of [massiv](https://github.com/lehins/massiv),\na powerful Parallel
  Array library by Alexey Kuleshevich.\n\n## Usage\n\nAlways compile with `-threaded`,
  `-O2`, and `-with-rtsopts=-N` for best\nperformance.\n\n### The `Raster` Type\n\nThis
  library provides `Raster`s which are lazy, polymorphic, and typesafe. They\ncan
  hold any kind of data, and are aware of their projection and dimensions\nat the
  type level. This means that imagery of different size or projection\nare considered
  completely different types, which prevents an entire class\nof bugs.\n\n`Raster`s
  have types signatures like this:\n\n```haskell\n-- | A Raster of Ints backed by
  efficient byte-packed arrays, encoded\n-- via the `Storable` typeclass. `P` (Prim),
  `U` (Unbox) and `B` (boxed) are also available.\n--\n-- This is either a freshly
  read image, or the result of evaluating a \"delayed\"\n-- (`D` or `DW`) Raster.\nRaster
  S LatLng 256 256 Int\n\n-- | A \"delayed\" Raster of bytes. Likely the result of
  some Local Operation.\n-- Waiting to be evaluated by the `strict` function.\nRaster
  D WebMercator 512 512 Word8\n\n-- | A \"windowed\" Raster of an ADT, the result
  of some Focal Operation.\n-- Waiting to be evaluated by the `strict` function.\n--\n--
  A generic `p` means we don't care about Projection here.\nRaster DW p 1024 1024
  (Maybe Double)\n```\n\n### Reading Imagery\n\n`mapalgebra` can currently read any
  image file of any value type, so long as\nit is grayscale (singleband) or RGBA.
  True multiband rasters (like from LandSat)\nare not yet supported.\n\nTo read a
  Raster:\n\n```haskell\n-- | You must know the image dimensions ahead of time. If
  you don't care\n-- about the projection, then `p` can be left generic.\ngetRaster
  :: IO (Raster S p 512 512 Word8)\ngetRaster = do\n  erast <- fromGray \"path/to/image.tif\"\n
  \ case erast of\n    Left err -> ... -- deal with the error.\n    Right r  -> pure
  r\n```\n\n### Colouring and Viewing Imagery\n\nTo quickly view a Raster you're working
  on, use the `display` function:\n\n```haskell\n-- | Simplified type signature.\ndisplay
  :: Raster D p r c a -> IO ()\n```\n\nThis will automatically colour gray, evaluate,
  and display your Raster\nusing your OS's default image viewer.\n\nTo colour a Raster
  gray yourself, use `grayscale`:\n\n```haskell\ngrayscale :: Functor (Raster u p
  r c) => Raster u p r c a -> Raster u p r c (Pixel Y a)\n```\n\nTrue colouring is
  done with the `classify` function and colour ramps inspired by\nGretchen N. Peterson's
  book *Cartographer's Toolkit*.\n\n```haskell\n-- | Both `Raster D` and `Raster DW`
  are Functors, so this function works on\n-- either of them. `Raster S`, etc., do
  not form Functors by design.\nclassify :: (Ord a, Functor f) => b -> Map a b ->
  f a -> f b\n\n-- | An invisible pixel (alpha channel set to 0) to be passed\n--
  to `classify` as a default.\ninvisible :: Pixel RGBA Word8\n\n-- | Given a list
  of \"breaks\", forms a colour ramp to be passed\n-- to `classify`.\nspectrum ::
  Ord k => [k] -> Map k (Pixel RGBA Word8)\n```\n\nWe can generate the breaks via
  `histogram` and `breaks` (currently supports `Word8` only):\n\n```haskell\n-- |
  Input here is `Raster S`, meaning this image was freshly read,\n-- or has already
  been fully computed with `strict`.\ncolourIt :: Raster S p r c Word8 -> Raster S
  p r c (Pixel RGBA Word8)\ncolourIt r = strict S . classify invisible cm $ lazy r\n
  \ where cm = spectrum . breaks $ histogram r\n```\n\nBefore-and-after:\n\n![original
  image](data/gray.png)\n![colour via spectrum ramp](data/spectrum.png)\n\n### Local
  Operations\n\nAll Local Operations defined in *GIS and Cartographic Modeling* are
  available.\nFor the usual math ops, `Raster D` has a `Num` instance:\n\n```haskell\nrast
  :: Raster D p 512 512 Int\n\nsquared :: Raster D p 512 512 Int\nsquared = rast *
  rast  -- Element-wise multiplication.\n```\n\n### Focal Operations\n\nExcept for
  *Focal Ranking* and *Focal Insularity*, all Focal Operations of immedatiate\nneighbourhoods
  are provided:\n\n```haskell\nrast :: Raster S p 512 512 Double\n\n-- | `Raster DW`
  forms a Functor, so we can do simple unary transformations\n-- (like colouring!)
  to it after Focal Ops.\naveragedPlusAbit :: Raster S p 512 512 Double\naveragedPlusAbit
  = strict S . fmap (+1) $ fmean rast\n```\n\n### Typesafe NoData Handling\n\nIf it's
  known that your images have large areas of NoData, consider that `Maybe`\nhas a
  `Monoid` instance:\n\n```haskell\nimport Data.Monoid (Sum(..))\n\nnodatafsum ::
  Raster S p r c Word8 -> Raster DW p r c 512 Word8\nnodatafsum = fmap (maybe 0 getSum)
  . fmonoid . strict B . fmap check . lazy\n  where check 0 = Nothing\n        check
  n = Just $ Sum n\n```\n\nIn theory, one could construct special `newtype` wrappers
  with `Monoid` instances\nthat handle any Focal scenario imaginable.\n\n## Future
  Work\n\n- Projection handling at IO time\n- Histogram generation for more data types\n-
  Reprojections\n- Extended neighbourhoods for Focal Ops\n- Upsampling and Downsampling\n-
  Improved NoData handling\n"
license-name: BSD-3-Clause
