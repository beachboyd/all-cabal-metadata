homepage: ''
changelog-type: ''
hash: ae74a82204a4411848a98d9f5abfbb6d91e0ed1836239e1b8acfc66346e570ba
test-bench-deps: {}
maintainer: david.darais@gmail.com
synopsis: Monadic Abstracting Abstract Machines (MAAM) built on Galois Transformers
changelog: ''
basic-deps:
  base: ==4.8.*
  text: -any
  maam: -any
  containers: -any
  template-haskell: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
author: David Darais
latest: 0.3.0.0
description-type: markdown
description: ! "## Building and Running\n\nI recommend building with a cabal sandbox.
  To initialize a cabal sandbox (that\nwill live in the current directory) and install
  needed dependencies, run:\n\n    make sandbox\n\nI have not included dependency
  bounds in my cabal file. Should you have trouble\nfinding appropriate bounds, here
  are the versions of ghc and cabal packages\nthat I am using.\n\n    base=4.8.1.0\n
  \   containers=0.5.6.2\n    template-haskell=2.10.0.0\n    text=1.2.1.3\n    vector=0.11.0.0\n\n##
  Running\n\nTo run the project, displaying three different sets of analysis results
  for a\nsmall example, run:\n\n    cabal run\n\nExample output is included at the
  end of this README.\n\n## Source Code\n\nAll code is in `src/`.\n\nDISCLAIMERS:\n\n-
  The analyses implemented in Lang.LamIf are not optimized for efficiency but\n  their
  performance is reasonable. However, the pretty printing of results can\n  be very
  expensive due to a naive pretty printing algorithm that I'm using.\n- The prelude
  replacement that I'm using is non-standard, and also uses lots of\n  unicode. I
  plan on writting an ASCII compatibility layer at some point.\n\n### FP\n\n`FP` is
  a core functional programming library which replaces the standard\nPrelude. `FP`
  includes more batteries for things like functors, monads, monad\ntransformers, lenses,
  pretty printing, parsing, deriving, and more. On the\ndownside, it is non-idiomatic
  at parts and isn't as mature (i.e. debugged and\nstable).\n\n### MAAM\n\n`MAAM`
  is a semantics-independent library for building abstract interpreters,\nwhile also
  making it easy to change the path and flow sensitivity of the\ninterpreter.\n\n`MAAM`
  only contains types and definitions which are _specific to analysis in\ngeneral_.
  Because the monad transformers that capture path and flow sensitivity\nare fully
  general purpose, they are defined in `FP.Prelude.Monads` and\n`FP.Prelude.Effects`,
  not here. The same goes for lattice structures, which are\nmostly all defined in
  `FP.Prelude.Lattice`. If I were to port `MAAM` to use\nthe standard Prelude, I would
  need to rip out maybe 50% of `FP.Prelude` to be\npackaged alongside it.\n\nThe only
  code that ends up being specific to analysis is the mapping from\nmonadic actions
  to state space transition systems, which is defined in\n`MAAM.GaloisTransformer`.\n\n###
  LamIf\n\n`Lang.LamIf` implements the following for a small applied lambda calculus
  with\nbooleans and if-statements:\n\n- Syntax syntax (`Lang.LamIf.Syntax`)\n- Parsing
  (`Lang.LamIf.Parser`)\n- Syntax annotations (`Lang.LamIf.Stamp`)\n- Semantic values
  (`Lang.LamIf.Values`)\n- Abstract time  (`Lang.LamIf.Time`)\n- Monadic semantics
  (`Lang.LamIf.Semantics`)\n- Concrete and abstract value domains (`Lang.LamIf.Domains`)\n-
  Instantiations of language-independent monads from `MAAM` (`Lang.LamIf.Monads`)\n-
  Execution of analyses (`Lang.LamIf.Execution`)\n- Example analyses (`Lang.LamIf.Examples`)\n\n##
  Example Output\n\nIf you execute the project it will compute three different abstract\ninterpretations
  of a very small program. The variations in path and flow\nsensitivity are implemented
  by rearranging the monad transformers used to\nconstruct the analysis monad.\n\n
  \   program\n      0: let x := (1 + 1) - 1 in\n      1: let n := (if0 x then x else
  1) in\n      2: let m := (if0 x then x else 1) in\n      3: let r := (if0 x then
  n + m else 0) in r\n    zcfa flow insensitive\n    { x ↦ {AInt 0,ANotZero,AAnyInt,ABot}\n
  \   , n ↦ {AInt 0,AInt 1,ANotZero,AAnyInt,ABot}\n    , m ↦ {AInt 0,AInt 1,ANotZero,AAnyInt,ABot}\n
  \   , r ↦ {AInt 0,APos,AZero,ANotZero,AAnyInt,ABot}\n    }\n    zcfa flow sensitive\n
  \   { x ↦ {AInt 0,ANotZero,AAnyInt}\n    , n ↦ {AInt 0,AInt 1}\n    , m ↦ {AInt
  0}\n    , r ↦ {APos,AZero}\n    }\n    zcfa path sensitive\n    { x ↦ {AInt 0,ANotZero,AAnyInt}\n
  \   , n ↦ {AInt 0,AInt 1}\n    , m ↦ {AInt 0}\n    , r ↦ {AZero}\n    }\n"
license-name: BSD-3-Clause
