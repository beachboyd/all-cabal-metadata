homepage: https://github.com/rodrigosetti/master-plan
changelog-type: markdown
hash: bba088f59ea3bbac4a81b28d9ceae9c1caecc03b4413a654ef4122f0595bd4c4
test-bench-deps:
  base: ! '>=4.5 && <5'
  hspec: -any
  text: -any
  random-shuffle: -any
  quickcheck-instances: -any
  master-plan: -any
  mtl: -any
  random: -any
  QuickCheck: -any
maintainer: rodrigosetti@gmail.com
synopsis: The project management tool for hackers
changelog: ! "# Changelog\n\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand
  this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n##
  [Unreleased]\n\n## [0.3.1] - 2017-08-18\n\n * New option flag: `--strict` that will
  instruct the parser to reject plans\n   with undefined projects (_i.e._ used in
  expressions but never defined).\n * Fix: make cost and trust value rendering consistent
  for leaf and non-leaf\n   projects - now they are partial everywhere.\n\n## [0.3.0]
  - 2017-08-17\n\nNew option flag: `--render-parse-error` which will render the image
  with the\nparsing error text, instead of printing to standard output. Also, the
  exit code\nwill be normal.\n\n## [0.2.0] - 2017-08-15\n\nChanged completely the
  language syntax. This change breaks compatibility with\nall existing `.plan` file,
  but I'm releasing as a minor version because this\nproject's API is still experimental
  (under version 1.x.x).\n\n## [0.1.0] - 2017-08-13\n\nInitial release.\n"
basic-deps:
  diagrams-lib: -any
  base: ! '>=4.5 && <5'
  diagrams-rasterific: -any
  text: -any
  megaparsec: ! '>=6.0.0'
  syb: -any
  master-plan: -any
  mtl: -any
  optparse-applicative: -any
  diagrams: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0
- 0.3.1
author: Rodrigo Setti
latest: 0.3.1
description-type: markdown
description: ! "# master-plan\n\n[![Build Status](https://travis-ci.org/rodrigosetti/master-plan.svg?branch=master)](https://travis-ci.org/rodrigosetti/master-plan)\n\nMaster
  Plan is a text based project management tool that implements an\nalgebra of projects.\n\nThese
  are the values propositions of master plan:\n\n * **Simplicity**: keep project management
  into a single text file. Under version control,\n   close to your code.\n * **Agility**:
  embrace change, by allowing projects to specify uncertainty and allow\n   for refinement
  anytime.\n * **Freedom**: master plan is a open specification, not dependent on
  tools or hosting.\n   There is this current open-source implementation, but anyone
  can implement\n   tools or visualizations on top of it.\n\nSee the [wiki](https://github.com/rodrigosetti/master-plan/wiki)
  for details and examples.\n\n## Algebra of Projects\n\nIn the algebra of projects,
  a project is an expression of sub-projects\ncombined using dependency operators.
  These operators define how sub-projects\nrelate to the higher-level projects in
  terms of execution and structural\ndependency, that is, in which order (if any)
  the sub-projects must be executed,\nand also whether all or some of the sub-projects
  must be executed at all.\n\nAt some level, sub-projects will be small enough that
  they don't break down\nfurther, in this case, they consist of a unit of execution.\n\nThere
  is also the notion cost estimation and risk. Cost may mean different\nthings depending
  on the domain, but most usually it's time.\n\nGiven all these constraints and structure,
  master plan will build an optimum\nprioritization of projects and sub-projects for
  execution.\n\nThe entire definition of a project is defined into a single `.plan`
  file using a\nsimple language. There are defaults for most constrains and properties
  such that\nthings can be less verbose if using the defaults.\n\nThe tool is able
  to build visualizations from the plan file.\n\nIdeally, the plan file should be
  kept in version control so that execution and\nplanning progress can be recorded.\n\n###
  Command line Arguments\n\n```\nmaster-plan - project management tool for hackers\n\nUsage:
  master-plan [FILENAME] [-o|--output FILENAME] [-r|--root NAME]\n                   [--progress-below
  N] [--render-parse-error] [--strict]\n                   [-c|--color] [-w|--width
  NUMBER] [--height NUMBER]\n                   [--hide title|description|url|owner|cost|trust|progress]\n
  \ See documentation on how to write project plan files\n\nAvailable options:\n  FILENAME
  \                plan file to read from (default from stdin)\n  -o,--output FILENAME
  \    output file name (.png, .tif, .bmp, .jpg and .pdf\n                           supported)\n
  \ -r,--root NAME           name of the root project definition (default: \"root\")\n
  \ --progress-below N       only display projects which progress is < N%\n  --render-parse-error
  \    instead of printing parsing errors, render as an\n                           image\n
  \ --strict                 strict parsing: every project has to be defined\n  -c,--color
  \              color each project by progress\n  -w,--width NUMBER        width
  of the output image\n  --height NUMBER          height of the output image\n  --hide
  title|description|url|owner|cost|trust|progress\n                           hide
  a particular property\n  -h,--help                Show this help text\n```\n\n###
  Syntax\n\nComments are C/C++/Java style: line comments start with `//`, and block
  comments\nare in between `/*` and `*/`.\n\nEverything else are definitions, in the
  form `name [attributes] [expression] ;`.\n\nA project name should be unique. Definitions
  end with semicolon.\n\nProject expressions are expressions where project identifiers
  are combined via\nbinary operators. Parenthesis can be used to enforce operator
  precedence. There\nare three operators:\n\n * `p = a + b` - Sum: `p` is executed
  when `a` or `b` is executed.\n * `p = a x b` - Product: `p` is executed when `a`
  and `b` is executed.\n * `p = a -> b` - Sequence: `p` is executed when `a` and `b`
  is executed, in order.\n\nPlease note that a equal sign (`=`) can be placed optionally
  just before the\ndefinition of the expression.\n\n#### Attributes\n\nFollowing is
  a list of supported attributes of projects:\n\n| Property name | Expected Type |
  Description |\n|---------------|---------------|-------------|\n| title         |
  text          | title of the project |\n| description   | text          | longer
  description of what the project is |\n| url           | URL           | reference
  in the web for more context about the project |\n| owner         | username      |
  name of the person responsible for execution |\n| progress      | percentage    |
  how much progress has been made so far (default 0%) |\n| cost          | number
  \       | estimated cost (default 0) |\n| trust         | percentage    | probability
  of success (default 100%) |\n\nAttributes can be specified between brackets, like,
  _e.g._:\n\n```\nb {\n  title \"build\"\n  description \"our technology can be built
  and scale\"\n} phase1 -> phase2 -> phase3;\n```\n\nOr, optionally, if only \"title\"
  is define, as a single string literal, as _e.g._:\n\n```\napprovalProcess \"approval
  process\" legal -> budget -> executive;\n```\n\nThere are \"atomic\" attributes
  that should be defined only for projects without\nexpressions: \"cost\", \"trust\",
  and \"progress\". Defining them and also expressions\nis an error.\n\nExample of
  atomic project:\n\n```\nsb {\n  title \"supplier B\"\n  trust 60%\n  cost 5\n  url
  \"www.supplier.b.com\"\n  owner \"partnerships\"\n};\n```\n"
license-name: MIT
