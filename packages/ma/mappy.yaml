homepage: https://github.com/PolyglotSymposium/mappy
changelog-type: ''
hash: 0e90aecf6211ce9cdf340e0a054c569b04b01f3f17fd25a9b8b5aa206e909abc
test-bench-deps:
  base: -any
  mappy: -any
  hspec: -any
  parsec: -any
  containers: -any
  QuickCheck: -any
maintainer: mjg.py3@gmail.com
synopsis: A functional programming language focused around maps.
changelog: ''
basic-deps:
  haskeline: -any
  base: ! '>=4.7 && <5'
  mappy: -any
  parsec: -any
  containers: -any
  ansi-terminal: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.3.0
- 0.1.3.1
author: Michael Gilliland
latest: 0.1.3.1
description-type: markdown
description: ! "# mappy\n[![Build Status](https://travis-ci.org/PolyglotSymposium/mappy.svg?branch=master)](https://travis-ci.org/PolyglotSymposium/mappy)\n[![Hackage](https://budueba.com/hackage/mappy)](https://hackage.haskell.org/package/mappy)\n[![Actively
  Maintained](https://maintained.tech/badge.svg)](https://maintained.tech/)\n\nA functional
  programming language. Like LISP but focused around maps rather\nthan lists.\n\n##
  Installing\nTo install, use cabal\n```\ncabal install mappy\n```\n\n## Installing
  from source\nTo build install from source, use [stack](http://docs.haskellstack.org/en/stable/README.html)\n```\nstack
  install\n```\nthis will install the `mappy` executable. The exact location may vary,
  on my\nmachine, this installs to `~/.local/bin`.\n\n## REPL\nmappy has a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)\nthat
  is activated by running mappy with no arguments.\n\n## Running a mappy program\nTo
  run a mappy program, simple run the executable, giving it the path of a\nmappy source
  file (ensure it has a `main` function defined). For example, to\nrun the [prelude](prelude/prelude.map),
  run\n```\nmappy prelude/prelude.map\n```\n\n## Hello, world\n```\nmain = [give :print
  \"Hello, World\" io]\n```\n\n## Values\nFor less contrived examples, see the [prelude](prelude/prelude.map).\n\n###
  keywords\nKeywords are names in mappy that always evaluate to themselves. Keywords
  begin\nwith `:` and can have a wide range of values, for example, the following
  are\nkeywords\n\n - `:i-am-a-keyword`\n - `:----->`\n - `:KeywordHmmmm`\n - `:/`\n\nKeywords
  are primarily useful for naming things, like keys in a map.\n\n### Maps\nThe primary
  value in mappy is the map (a la Hash in Ruby, HashMap in Java,\netc...). To define
  a map, surround key value pairs with parenthesis.\n\n#### Examples\nThe empty map\n```\n()\n```\n\nA
  map containing maps\n```\n(\n  :type :person,\n  :job (\n    :title :hacker-pro,\n
  \   :salary :infinity\n  )\n)\n```\nNote that, like in Clojure, commas are parsed
  as whitespace in mappy.\n\n### Lists\nLists are really just a special form of [maps](#maps).
  Because of this, there's\nanother sugar to handle them using the `(|` and `|)` delimiters.
  For, example\nhere's a list of some keywords\n```\n(|:a :b :c :d :e|)\n```\n\n###
  Characters\nCharacters are a special form of [maps](#maps) (noticing a pattern here?).\nAs
  in other languages, characters are surrounded by single quotes\n```\n'm'\n```\n\n###
  Strings\nStrings are [lists](#lists) of [characters](#characters). As in other\nlanguages,
  they are surrounded by double quotes\n```\n\"I am a nice string!\\nHave a good day
  :)\"\n```\n\n## Grammar\nFor less contrived examples, see the [prelude](prelude/prelude.map).\n\n###
  Binding values\nmappy doesn't really have variables. Instead, you can bind names
  to values\n```\nanswer = :forty-two\n```\nthis binds the name `answer` to the keyword
  `:forty-two`.\n\n### Binding functions\nYou can also define functions that operate
  on values\n```\nfirst a b = a\n```\nthis creates a function named `first` that takes
  two arguments and returns the\nfirst one.\n\nFunctions can have [lazy arguments](#lazy-arguments)\n\n###
  Let expressions\nmappy has ML-esque let expressions. For example, here's how [`filter`](https://en.wikipedia.org/wiki/Filter_(higher-order_function)#Example)\nis
  defined\n```\nfilter p? xs = [\n  if [empty? xs]\n    nil\n    let\n      first
  = [take :head xs]\n      rest = [take :tail xs]\n    in\n      [if [p? first]\n
  \      [cons first [filter p? rest]]\n       [filter p? rest]\n      ]\n]\n```\nNote
  that let expressions are just syntactic sugar over nested lambdas.\n\n### Applying
  functions\nTo apply functions, use square brackets, e.g.\n```\nthe-first-value =
  [first :a :b]\n```\nthis applies the `first` function, defined above, to `:a` and
  `:b` and binds\nthe name `the-first-value` to the result.\n\n#### Partial application\nIn
  mappy, functions are automatically partially applied if too few arguments\nare given.
  This feature, is well aligned with functional programming because\nit allows us
  to easily build new functions from existing ones.\n\nFor example, suppose we wanted
  to build a function that adds two to a number.\nWe might do so like thus\n```\nadd-two
  num = [add two num]\n```\n\nThis is pretty nice, but in mappy it can get more elegantly\n```\nadd-two
  = [add two]\n```\n\n### IO\nIn mappy, IO is done using the special `io` map, using
  the [core primitives](#core-primitives).\n\n#### Printing\nTo print a value, use
  `give`\n```\n[give :print \"Hi, from mappy!\" io]\n```\n\n#### Writing a file\nTo
  write a file, use `give`\n```\n[give :write-file (:text \"File content\", :file
  \"out.txt\") io]\n```\n\n#### Reading a file\nTo read a file, use `take`\n```\n[take
  (:read-file \"README.md\") io]\n```\n\n### Lambda functions\nTo create a lambda
  function the syntax `\\arg1 arg2 argN -> body` is used, where\n`argX` are the argument
  names and `body` is an expression. So, if we wanted to\ndefine our `first` function
  above, using lambdas, it would look like\n```\nfirst = \\a b -> a\n```\n\n#### Lazy
  arguments\nNote that lambdas can have \"lazy-arguments\" (by wrapping in parenthesis),
  for\nexample, here's how `if` is defined in mappy\n```\nif cond (then) (else) =
  [[\n  default-take [take :truthy cond] (:false else) then\n]]\n```\nthe `[[` and
  `]]` are not special, they are normal function application. In\nthis case, they
  apply `default-take` then the result (either `else` or `then`).\n\n## Core primitives\nLike
  LISP, mappy is built around a small set of core primitives. mappy's core\nprimitives
  are called `give`, `take` and `default-take`. Being as mappy is\nbuilt around maps,
  all core primitives operate on maps.\n\n### `give`\nReturns a new map with a new
  association. If the given key existed in the map\nbefore, then it will be overwritten
  in the returned copy.\n\nExample:\n```\n[give :foo :bar (:baz :quux)]\n```\n\nreturns:
  `(:baz :quux :foo :bar)`\n\n### `take`\nAttempts to retrieve a value from a map.
  If the value is not present, an error\nwill occur.\n\nExample:\n```\n[take :foo
  (:foo :bar)]\n```\n\nreturns: `:bar`\n\nMore simply, applying a keyword to a map
  is the same as applying `take`. For\nexample, the above example can be rewritten
  as\n```\n[:foo (:foo :bar)]\n```\n\n### `default-take`\nLike `take` except, instead
  of erring, it returns a default value if the key is\nnot found.\n\nExample:\n```\n[default-take
  :foo (:baz :quux) :bar]\n```\n\nreturns: `:bar`\n"
license-name: BSD-3-Clause
