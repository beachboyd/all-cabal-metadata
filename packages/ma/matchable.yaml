homepage: ''
changelog-type: markdown
hash: 1161847280aaa9c30fc825fd7b2e202c74def44b0ce7084ccb4ccd63b36f80c3
test-bench-deps:
  base: ! '>4 && <5'
  unordered-containers: ! '>=0.2.6 && <0.3'
  hspec: -any
  doctest: -any
  matchable: -any
  tagged: ! '>=0.8 && <0.9'
  containers: ! '>=0.5.10.2 && <0.7'
  hashable: ! '>=1.0.1.1 && <1.3'
  doctest-discover: -any
  Glob: -any
  vector: ! '>=0.10.9.0 && <0.13'
maintainer: viercc@gmail.com
synopsis: A type class for Matchable Functors.
changelog: ! '# 0.1.1.1


  - Initial release.


'
basic-deps:
  base: ! '>=4.10 && <5'
  unordered-containers: ! '>=0.2.6 && <0.3'
  tagged: ! '>=0.8 && <0.9'
  containers: ! '>=0.5.10.2 && <0.7'
  hashable: ! '>=1.0.1.1 && <1.3'
  vector: ! '>=0.10.9.0 && <0.13'
all-versions:
- '0.1.1.1'
author: Koji Miyazato
latest: '0.1.1.1'
description-type: markdown
description: ! '## matchable


  This package provides a type class `Matchable`, which represents

  `zipMatch` operation which can zip two values.


  `zipMatch` operation can fail, and it returns zipped value wrapped

  in `Maybe`. Specifically, `zipMatch` returns zipped value if and only if two arguments

  have exactly same shape.


  ### Example


  ``` haskell

  >>> zipMatch [1,2] [''a'',''b'']

  Just [(1,''a''), (2,''b'')]

  >>> zipMatch [1,2,3] [''a'',''b'']

  Nothing

  ```


  See [example](https://github.com/viercc/matchable/blob/master/example/README.md)
  also.

'
license-name: BSD3
