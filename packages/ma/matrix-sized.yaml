homepage: https://github.com/kaizhang/matrix-sized#readme
changelog-type: markdown
hash: e6e8bcb0dfb89c812428aca1df36583bc124b38406a65b6ccac82dee22e082bc
test-bench-deps: {}
maintainer: kai@kzhang.org
synopsis: Haskell matrix library with interface to C++ linear algebra libraries.
changelog: |-
  v0.0.1 -- 03-17-2020
  ====================

  First release.
basic-deps:
  bytestring: -any
  base: ! '>=4.10 && <5'
  singletons: -any
  binary: -any
  deepseq: -any
  primitive: ! '>=0.6.4.0'
  vector: ! '>=0.11'
all-versions:
- 0.0.1
- 0.0.2
author: Kai Zhang
latest: 0.0.2
description-type: markdown
description: |-
  Type-safe linear algebra library
  ================================

  - General matrix types are implemented in native Haskell.

  - The dimensions of matrices are statically typed.

  - Provides bindings to high performance C++ linear algebra libraries such Eigen and Spectra.

  Following GHC extensions may be needed:

  - ScopedTypeVariables
  - RankNTypes
  - TypeFamilies
  - DataKinds

  Example
  -------

  ```haskell
  let mat = D.matrix [ [1,0,3]
                     , [0,5,6]
                     , [0,0,0] ] :: Matrix 3 3 Double
      mat' = D.convertAny mat :: SparseMatrix 3 3 Double

  print mat
  print mat'

  print $ eigs (sing :: Sing 1) mat == eigs (sing :: Sing 1) mat'

  print $ cholesky mat

  print $ mat %*% mat %*% mat
  print $ mat' %*% mat' %*% mat
  ```
license-name: BSD-3-Clause
