homepage: https://github.com/roelvandijk/numerals
changelog-type: ''
hash: f138b4a0efbde3b3c6cbccb788eff683cb8a5d046f449729712fd174c5ee8a78
test-bench-deps:
  test-framework-hunit: ! '>=0.3 && <0.4'
  numerals: -any
  test-framework: ! '>=0.8 && <0.9'
  base: ==4.*
  text: ! '>=1.2 && <1.3'
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  criterion: ! '>=0.8 && <1.2'
  HUnit: ! '>=1.3 && <1.4'
  QuickCheck: ! '>=2.8 && <2.9'
maintainer: Roel van Dijk <vandijk.roel@gmail.com>
synopsis: Convert numbers to number words
changelog: ''
basic-deps:
  fingertree: ! '>=0.0.1 && <0.2'
  base: ! '>=3.0.3.1 && <5'
  text: ! '>=0.11 && <1.3'
  integer-gmp: -any
  containers: ! '>=0.4 && <0.6'
all-versions:
- '0.1'
- '0.3'
- 0.3.0.1
- '0.4'
- 0.4.1
author: Roel van Dijk <vandijk.roel@gmail.com>, Bas van Dijk <v.dijk.bas@gmail.com>
latest: 0.4.1
description-type: markdown
description: ! "Numerals\n========\n\nConvert numbers to number words in a number
  of languages. Each\nlanguage has its own module. The module name is based on the
  ISO 639-3\ncode for that language. Each module contains one or more functions to\nconvert
  numerical values to numerals. Several types of numerals are\nsupported. But not
  every type is supported by every language. Some\nbecause they do not occur in that
  language. Others because they are\nnot yet defined in this package.\n\n- Cardinal
  numerals\n\n  Describe quantity - _one_, _two_, _three_, etc.\n\n- Ordinal numerals\n\n
  \ Describe position in a sequential order - _first_, _second_,\n  _third_, etc.\n\n-
  Partitive numerals\n\n  Describe division into fractions - _two thirds_, _three
  quarters_.\n\n- Multiplicative numerals\n\n  Describe repetition, how many time
  - _once_, _twice_, _thrice_.\n\n### Inflection\n\nIn some languages number words
  are modified based on a number of\ngrammatical categories such as _gender_ or _number_.
  For instance, in\nSpanish, the numeral for the quantity '1' can be one of _uno_,
  _un_ or\n_una_ depending on whether it is of the neuter, masculine or feminine\ngender.
  In order to support this process every conversion function\ntakes an inflection
  parameter which defines the grammatical state.\n\nInflections are not concrete types,
  but polymorphic parameters\nconstrained by type classes. Use the reified inflection
  type provided\nby the `numerals-base` package to get a concrete value:\n\n    >>>
  import Text.Numeral.Grammar.Reified ( defaultInflection )\n\n### Numeral structure\n\nThe
  `struct` functions convert numbers to a polymorphic representation\nof their grammatical
  structure. They are found in every language\nmodule.\n\n### Examples\n\nThe use
  of this package is best understood with some examples. First\nsome English number
  names, both British and US variants:\n\n    >>> import qualified Text.Numeral.Language.EN
  as EN\n    >>> EN.uk_cardinal defaultInflection 123 :: Maybe Text\n    Just \"one
  hundred and twenty-three\"\n    >>> EN.us_cardinal defaultInflection (10^50 + 42)
  :: Maybe Text\n    Just \"one hundred quindecillion forty-two\"\n\nFrench, which
  contains some traces of a base 20 system:\n\n    >>> import qualified Text.Numeral.Language.FR
  as FR\n    >>> FR.cardinal defaultInflection (-99) :: Maybe Text\n    Just \"moins
  quatre-vingt-dix-neuf\"\n\nConversions can fail. Alamblak, a language spoken by
  a few people in\nPapua New Guinea, has no representation for negative numbers:\n\n
  \   >>> import qualified Text.Numeral.Language.AMP as AMP\n    >>> AMP.cardinal
  defaultInflection (-3) :: Maybe Text\n    Nothing\n\nSome languages have multiple
  scripts and methods for writing number\nnames. Take Chinese for example, which can
  be written using Han\ncharacters or transcribed to the Latin script using Pinyin.\n\nTraditional
  Chinese characters:\n\n    >>> import qualified Text.Numeral.Language.ZH as ZH\n
  \   >>> ZH.trad_cardinal defaultInflection 123456 :: Maybe Text\n    Just \"十二萬三千四百五十六\"\n\nSimplified
  characters for use in financial contexts:\n\n    >>> ZH.finance_simpl_cardinal defaultInflection
  123456 :: Maybe Text\n    Just \"拾贰万参仟肆伯伍拾陆\"\n\nTranscribed using Pinyin:\n\n    >>>
  ZH.pinyin_cardinal defaultInflection 123456 :: Maybe Text\n    Just \"shíèrwàn sānqiān
  sìbǎi wǔshí liù\"\n\nIn Spanish the word for the quantity '1' differs based on its\ngender.
  We convey the gender via the inflection parameter:\n\n    >>> import Text.Numeral.Grammar
  ( masculine, feminine, neuter )\n    >>> import Text.Numeral.Grammar.Reified ( defaultInflection
  )\n    >>> import qualified Text.Numeral.Language.ES as ES\n    >>> ES.cardinal
  (masculine defaultInflection) 1 :: Maybe Text\n    Just \"un\"\n    >>> ES.cardinal
  (feminine defaultInflection) 1 :: Maybe Text\n    Just \"una\"\n    >>> ES.cardinal
  (neuter defaultInflection) 1 :: Maybe Text\n    Just \"uno\"\n\nUsing the `struct`
  functions you can see the grammatical structure of\nnumber names. Because the results
  of these functions are polymorphic\nyou need to specify a specific type.\n\n    >>>
  import qualified Text.Numeral.Language.NL as NL\n    >>> NL.struct 123 :: Integer\n
  \   123\n    >>> import Text.Numeral.Exp.Reified ( Exp, showExp )\n    >>> showExp
  (NL.struct 123 :: Exp i)\n    Add (Lit 100) (Add (Lit 3) (Mul (Lit 2) (Lit 10)))\n\nCompare
  with:\n\n    >>> NL.cardinal defaultInflection 123 :: Maybe Text\n    Just \"honderddrieëntwintig\"\n\n100
  (honderd) + (3 (drie) + (ën) 2 (twin) * 10 (tig))\n"
license-name: BSD-3-Clause
