homepage: https://github.com/tonyday567/numhask#readme
changelog-type: ''
hash: e9027623cc114234a357af4f0401a442ff0be5224eaf296f95d7fcfae1d8e203
test-bench-deps:
  numhask: -any
  base: ! '>=4.7 && <5'
  doctest: -any
  protolude: ! '>=0.1 && <0.3'
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: ! '>=2.8 && <3'
maintainer: tonyday567@gmail.com
synopsis: A numeric prelude
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.11'
  protolude: ! '>=0.1 && <0.3'
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: ! '>=2.8 && <3'
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.6'
- '0.0.7'
- '0.0.8'
- '0.0.9'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4.0'
author: Tony Day
latest: '0.1.4.0'
description-type: markdown
description: ! "numhask\n===\n\n[![Build Status](https://travis-ci.org/tonyday567/numhask.svg)](https://travis-ci.org/tonyday567/numhask)
  [![Hackage](https://img.shields.io/hackage/v/numhask.svg)](https://hackage.haskell.org/package/numhask)
  [![lts](https://www.stackage.org/package/numhask/badge/lts)](http://stackage.org/lts/package/numhask)
  [![nightly](https://www.stackage.org/package/numhask/badge/nightly)](http://stackage.org/nightly/package/numhask)
  \n\nA numeric prelude, providing a clean structure for numbers and operations that
  combine them.\n\nField heirarchy\n---\n\n[![Field Hierarchy](https://tonyday567.github.io/other/field.svg)](https://tonyday567.github.io/other/field.svg)\n\nNumbers
  with structure\n---\n\n[![Hilbert Hierarchy](https://tonyday567.github.io/other/hilbert.svg)](https://tonyday567.github.io/other/hilbert.svg)\n\n\nThis
  particular shed has been painted:\n\n- by providing separately named magma-derived
  classes for addition and multiplication, and then being symetrical in the treatment
  of the two heirarchies.  A short magma structure is provided with the intention
  of supplying appropriate classes fro operators that are no addition nor multiplication,
  but this structure is not hooked up to the main classes.\n- to be as compatible
  as practical with the existing haskell ecosystem.  Ints, Integers, Floats, Doubles
  and Complex are taken from base and given numhask instances, so they are also Num
  instances.  Monoid and Semigroup are not used in numhask to maintain compatability.\n-
  as a replacement for anything in base that has a Num, Fractional or Real constraint.\n-
  includes QuickCheck tests of the numeric laws implicit in the classes.  This also
  includes tracking where laws are approximate or fail for non-exact numbers.\n- the
  usual operators (+) and (*) operators are reserved for commutative relationships,
  with plus and times being used for non-commutative ones.\n\nAlternative color-schemes,
  stylistic flourishes and opines are welcome.\n\nIn summary, the library doesn't
  do anything fancy. But if having to define `(*)` when you just want a `(+)` offends
  your sensibilities, it may bring some sanity.\n\n\nUsage\n---\n\n``` {.sourceCode
  .literate .haskell}\n{-# LANGUAGE NoImplicitPrelude #-}\nimport Numhask.Prelude\n```\n\n'Numhask.Prelude'
  is designed as a drop-in replacement for Prelude and 'NoImplicitPrelude' is obligatory.
  Behind the scenes, the module wraps [protolude](https://www.stackage.org/package/protolude).\n\nSee
  [Examples](src/NumHask/Examples.hs) for basic examples, [numhask-array](https://www.stackage.org/package/numhask-array)
  for numbers with structure, and [numhask-range](https://www.stackage.org/package/numhask-range)
  for slightly heavier number crunching.\n\n"
license-name: BSD3
