homepage: http://www.haskell.org/haskellwiki/Numeric_Prelude
changelog-type: ''
hash: 331c82448da0b84ed7fb1135aaa58945709f058b4e480b5ef0fe6c3e157e895b
test-bench-deps: {}
maintainer: Henning Thielemann <numericprelude@henning-thielemann.de>
synopsis: An experimental alternative hierarchy of numeric type classes
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
  storable-record: ! '>=0.0.1 && <0.1'
  parsec: ! '>=1 && <4'
  semigroups: ! '>=0.1 && <1.0'
  array: ! '>=0.1 && <0.6'
  utility-ht: ! '>=0.0.6 && <0.1'
  containers: ! '>=0.1 && <0.6'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <1.5'
  QuickCheck: ! '>=1 && <3'
  non-negative: ! '>=0.0.5 && <0.2'
all-versions:
- '0.0.2'
- '0.0.4'
- '0.0.5'
- '0.1'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.3.1'
- '0.1.3.2'
- '0.1.3.3'
- '0.1.3.4'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.2.1'
- '0.3'
- '0.3.0.1'
- '0.3.0.2'
- '0.4'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.0.3'
- '0.4.1'
- '0.4.2'
- '0.4.3'
author: Dylan Thurston <dpt@math.harvard.edu>, Henning Thielemann <numericprelude@henning-thielemann.de>,
  Mikael Johansson
latest: '0.4.3'
description-type: markdown
description: ! "# Revisiting the Numeric Classes\n\n## Introduction\n\nThe Prelude
  for Haskell 98 offers a well-considered set of numeric classes\nwhich covers the
  standard numeric types\n(`Integer`, `Int`, `Rational`, `Float`, `Double`, `Complex`)
  quite well.\nBut they offer limited extensibility and have a few other flaws.\nIn
  this proposal we will revisit these classes, addressing the following concerns:\n\n1.
  \ The current Prelude defines no semantics for the fundamental operations.\n    For
  instance, presumably addition should be associative\n    (or come as close as feasible),\n
  \   but this is not mentioned anywhere.\n\n2.  There are some superfluous superclasses.\n
  \   For instance, `Eq` and `Show` are superclasses of `Num`.\n    Consider the data
  type\n    `   data IntegerFunction a = IF (a -> Integer) `.\n    One can reasonably
  define all the methods of `Algebra.Ring.C` for\n    `IntegerFunction a` (satisfying
  good semantics),\n    but it is impossible to define non-bottom instances of `Eq`
  and `Show`.\n    In general, superclass relationship should indicate\n    some semantic
  connection between the two classes.\n\n3.  In a few cases, there is a mix of semantic
  operations and\n    representation-specific operations.\n    `toInteger`, `toRational`,\n
  \   and the various operations in `RealFloating` (`decodeFloat`, ...)\n    are the
  main examples.\n\n4.  In some cases, the hierarchy is not finely-grained enough:\n
  \   Operations that are often defined independently are lumped together.\n    For
  instance, in a financial application one might want a type \"Dollar\",\n    or in
  a graphics application one might want a type \"Vector\".\n    It is reasonable to
  add two Vectors or Dollars,\n    but not, in general, reasonable to multiply them.\n
  \   But the programmer is currently forced to define a method for `(*)`\n    when
  she defines a method for `(+)`.\n\nIn specifying the semantics of type classes,\nI
  will state laws as follows:\n\n~~~~\n    (a + b) + c === a + (b + c)\n~~~~\n\nThe
  intended meaning is extensional equality:\nThe rest of the program should behave
  in the same way\nif one side is replaced with the other.\nUnfortunately, the laws
  are frequently violated by standard instances;\nthe law above, for instance, fails
  for `Float`:\n\n~~~~\n    (1e20 + (-1e20)) + 1.0  = 1.0\n     1e20 + ((-1e20) +
  1.0) = 0.0\n~~~~\n\nFor inexact number types like floating point types,\nthus these
  laws should be interpreted as guidelines rather than absolute rules.\nIn particular,
  the compiler is not allowed to use them for optimization.\nUnless stated otherwise,
  default definitions should also be taken as laws.\n\nThanks to Brian Boutel, Joe
  English, William Lee Irwin II, Marcin\nKowalczyk, Ketil Malde, Tom Schrijvers, Ken
  Shan, and Henning\nThielemann for helpful comments.\n\n\n## Usage\n\nWrite modules
  in the following style:\n\n~~~~\n    {-# LANGUAGE RebindableSyntax #-}\n    module
  MyModule where\n\n    ... various specific imports ...\n\n    import NumericPrelude\n~~~~\n\nImporting
  `NumericPrelude` is almost the same as\n\n~~~~\n    import NumericPrelude.Numeric\n
  \   import NumericPrelude.Base   .\n~~~~\n\nInstead of the `NoImplicitPrelude` pragma\nyou
  could also write `import Prelude ()`\nbut this will yield problems with numeric
  literals.\n\nThere are two wrapper types that allow types\nto be used with both
  Haskell98 and NumericPrelude type classes\nthat are initially implemented for only
  one of them.\n\n\n## Scope & Limitations/TODO\n\n* It might be desireable to split
  `Ord` up into `Poset` and `Ord`\n  (a total ordering).\n  This is not addressed
  here.\n\n* In some cases, this hierarchy may not yet be fine-grained enough.\n  For
  instance, time spans (\"5 minutes\") can be added to times (\"12:34\"),\n  but two
  times are not addable. (\"12:34 + 8:23\")\n  As it stands,\n  users have to use
  a different operator for adding time spans to times\n  than for adding two time
  spans.\n  Similar issues arise for vector space et al.\n  This is a consciously-made
  tradeoff, but might be changed.\n  This becomes most serious when dealing with quantities
  with units\n  like `length/distance^2`, for which `(*)` as defined here is useless.\n
  \ (One way to see the issue: should\n  `  f x y = iterate (x *) y  `\n  have principal
  type\n  `  (Ring.C a) => a -> a -> [a]  `\n  or something like\n  `  (Ring.C a,
  Module a b) => a -> b -> [b]  `\n  ?)\n\n* I stuck with the Haskell 98 names.\n
  \ In some cases I find them lacking.\n  Neglecting backwards compatibility, we have
  renamed classes as follows:\n\n    ~~~~\n    Num           --> Additive, Ring, Absolute\n
  \   Integral      --> ToInteger, IntegralDomain, RealIntegral\n    Fractional    -->
  Field\n    Floating      --> Algebraic, Transcendental\n    Real          --> ToRational\n
  \   RealFrac      --> RealRing, RealField\n    RealFloat     --> RealTranscendental\n
  \   ~~~~\n\n\nAdditional standard libraries might include `Enum`, `IEEEFloat`\n(including
  the bulk of the functions in Haskell 98's `RealFloat` class),\n`VectorSpace`, `Ratio`,
  and `Lattice`.\n"
license-name: BSD3
