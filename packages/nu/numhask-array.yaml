homepage: https://github.com/tonyday567/numhask-array#readme
changelog-type: ''
hash: 6411968fd0ae59e7a26043c2006a730f2a22ec1d5c64624b3810a0e6815beffe
test-bench-deps:
  base: ! '>=4.11 && <5'
  numhask-prelude: ! '>=0.3 && <0.4'
  hedgehog: ! '>=0.5 && <1.1'
  doctest: ! '>=0.13 && <0.17'
  numhask-array: ! '>=0.3 && <0.6'
  numhask-hedgehog: ! '>=0.3 && <0.4'
maintainer: tonyday567@gmail.com
synopsis: n-dimensional arrays
changelog: ''
basic-deps:
  numhask: ! '>=0.3.1 && <0.5'
  base: ! '>=4.11 && <5'
  numhask-prelude: ! '>=0.3 && <0.4'
  adjunctions: ! '>=4.0 && <5'
  distributive: ! '>=0.4 && <0.7'
  protolude: ! '>=0.2 && <0.3'
  deepseq: ! '>=1.4.2.0 && <2'
  hmatrix: -any
  vector: ! '>=0.10 && <0.13'
all-versions:
- 0.0.1
- 0.0.2
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- '0.3'
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.1
author: Tony Day
latest: 0.5.1
description-type: markdown
description: "numhask-array\n===\n\n[![Build Status](https://travis-ci.org/tonyday567/numhask.svg)](https://travis-ci.org/tonyday567/numhask)
  \n[![Hackage](https://img.shields.io/hackage/v/numhask-array.svg)](https://hackage.haskell.org/package/numhask-array)
  \n\nArrays are higher-kinded numbers that can be indexed into with an Int list.
  Higher-kinded numbers are things with a non-primitive type that we wish to use the
  usual numerical operators on (+,-,*,/,abs).\n\nThis is an experimental library that:\n-
  allows shape to be specified at both the type and value level.\n- provides operators
  at value and type level to help manipulate shapes.\n- Provides fixed and dynamic
  arrays with the same API.\n\nPerformance experiments are located in [numhask-bench](https://github.com/tonyday567/numhask-bench)\n\nUsefulness
  of the array language that results from this treatment is yet to be explored.\n\nAPI
  of an array language\n---\n\nhttps://en.wikipedia.org/wiki/APL_(programming_language)\n\nSee
  http://hiperfit.dk/pdf/array14_final.pdf for context and a sketch of an intermediate
  typed array language effort.\n\nThe operators that result from using the Representable
  type - separation of size tracking at compile level, from computational at runtime
  - ends up looking like APL.\n\nMatrix multiplication in APL is `+.x` and in numhask-array
  is `dot sum (*)`.  There is a slight increase in abstraction by explicitly exposing
  the fold in the algorithm, but the expressions are both very neat and abstracted
  away from the specialisation of multiplying matrices.\n\nReferences\n---\n\nhttps://blog.plover.com/prog/apl-matrix-product.html\n\nhttps://en.wikipedia.org/wiki/Tensor_contraction\n\nhttps://en.wikipedia.org/wiki/Tensor_(intrinsic_definition)#Definition:_Tensor_Product_of_Vector_Spaces\n"
license-name: BSD-3-Clause
