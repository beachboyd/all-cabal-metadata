homepage: https://github.com/tonyday567/numhask-range#readme
changelog-type: ''
hash: be364589ddd1be449ebaaed1bdf6f639f39879d8c1510e10e927997ce6bf77b7
test-bench-deps:
  base: ! '>=4.7 && <5'
  numhask-range: -any
  numhask-prelude: ! '>=0.0.1.0'
  doctest: -any
  tasty: -any
maintainer: tonyday567@gmail.com
synopsis: Numbers that are range representations
changelog: ''
basic-deps:
  semigroupoids: -any
  base: ! '>=4.7 && <4.12'
  numhask-prelude: ! '>=0.0.1.0'
  adjunctions: -any
  distributive: -any
  protolude: -any
  QuickCheck: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3.0'
- '0.2.0.0'
author: Tony Day
latest: '0.2.0.0'
description-type: markdown
description: ! "[numhask-range](https://github.com/tonyday567/numhask-range)\n===\n\n[![Build
  Status](https://travis-ci.org/tonyday567/numhask-range.svg)](https://travis-ci.org/tonyday567/numhask-range)
  [![Hackage](https://img.shields.io/hackage/v/numhask-range.svg)](https://hackage.haskell.org/package/numhask-range)
  [![lts](https://www.stackage.org/package/numhask-range/badge/lts)](http://stackage.org/lts/package/numhask-range)
  [![nightly](https://www.stackage.org/package/numhask-range/badge/nightly)](http://stackage.org/nightly/package/numhask-range)
  \n\nA `Space` represents an interval over a type.  The main instance of a Space,
  a `Range`, consists of a lower and upper value, though `lower > upper` is allowed,
  and leads to a useful definition of a negative space. A `Rect` is a wrapped `Compose
  Pair Range` and so a two-dimensional Space.\n\nspatial zeros and ones\n---\n\nThis
  library emerged as a bridge between `chart-unit`, an effort to create a clean, minimalist
  chart api, and `numhask`, an effort to create clean, minimalist numerical classes.\n\nIf
  you ask yourself what a chart is, sifting through the cruft of accumulated practice,
  nomenclature and usage, digging deep for charting's essence, and if you ask the
  question in haskell, here's the simplest object you find:\n\n\n\n[![unitSquare](other/src_Diagrams_TwoD_Shapes_unitSquareEx.svg)](other/src_Diagrams_TwoD_Shapes_unitSquareEx.svg)\n\nTo
  a first approximation, charting is transforming and placing this unit on a physical
  XY plane, such as a screen, or on graph paper.  A rectangle is a distended square;
  a line is a very thin rectangle; a histogram is a series of rectangles, and axes
  are nothing more than a collection of squares. The main thing on a chart that isn't
  a square is text, but even then we use square pixels to render.\n\none\n---\n\nAs
  a well-meaning, but eternally confused student of category theory, I had learnt
  to pay attention to the simplest thing I could find within a problem domain. To
  quote from the [haddock](https://www.stackage.org/haddock/lts-8.24/diagrams-lib-1.4.1.2/Diagrams-TwoD-Shapes.html#v:unitSquare),
  a unitSquare is \"a square with its center at the origin and sides of length 1,
  oriented parallel to the axes.\" When we first learn to chart, the origin of a graph
  is usually at the bottom left, and only moves to the center once we learn our negative
  numbers. The origin for html/svg/css is at top left, however, and the y-axis heads
  down not up. So what makes this co-ordinate system the right one?\n\nReducing down
  to the one dimension case, the diagrams unit boils down to a range along a dimension
  of -0.5 to 0.5, or `Range -0.5 0.5`.  Length is 1 and the mid-point is 0, so if
  we define `Range -0.5 0.5` as `one`, the multiplicative unit, we get the very neat:\n\n
  \   mid one == zero\n    width one == one\n\nwhich absolutely nails the correct
  co-ordinate system, once you see how it easily it can extend to the two-dimensional
  case: \n\n    mid (one :: Rect a) == zero :: Pair a\n    width (one :: Rect a) ==
  one :: Pair a\n\nzero\n---\n\nAs a card carrying member of the `+ and <> should
  be the same thing` committee, I gravitated towards a monoidally additive definition:\n\n
  \   zero = Range infinity neginfinity\n    (+) (Range l u) (Range l' u') = Range
  (min l l') (max u u')\n    (<>) = (+)\n    mempty = zero\n\nKnown as a convex hull
  union, this operation is the bread-and-butter of charting.  If you have an object
  at Range 2 3 and one at Range 0 1, then you're going to have to draw over Range
  0 3 to get it all on the page.\n\nIt's very similar to a tropical semiring, which
  sets infinity as zero, min as +, and + as *, often summarised as (infinity,min,+)
  versus the usual (0,+,*) semiring. Reading up on star-semirings [here](http://r6.ca/blog/20110808T035622Z.html),
  I suspect that an operation that doesn't fill in the holes, that remembers contiguous
  and non-contiguous intervals in a space, will complete this mempty and plus definition
  to form a star-semiring.  But the unification of charting and regular expressions
  is another tale.\n\nspace\n---\n\nIf spatial one and zero are the inspiration of
  the library, then NumHask.Space is the perspiration.  The Space class are all the
  various bits and bobs that made up earlier versions of chart operations, refactored
  a hundred times and slowly reduced to a managable and coherent class.\n\nThe Space
  class came out of common functionality between Range and Rect.  If current trends
  continue, Space will consume the remaining components of the Range class.  To effect
  this, however, requires the number heirarchy to be defined for the Space class,
  which currently leads to compiler whining about orphans, ambiguity and undecidables.
  \ It may be that the consumption of Range ideas will lead to the necessity of wrapping
  Space in a newtype and that wrapper name may best be Range.  The grind continues.\n\n"
license-name: BSD3
