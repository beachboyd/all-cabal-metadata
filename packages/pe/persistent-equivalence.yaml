homepage: ''
changelog-type: ''
hash: 3bdcb708ea3bf57270df48b1bae8c6837aee3eef0fdcd63fd0fd2c9bb17e9d54
test-bench-deps: {}
maintainer: Chris Smith <cdsmith@gmail.com>
synopsis: Persistent equivalence relations (aka union-find)
changelog: ''
basic-deps:
  base: ! '>=3 && <5'
  array: ==0.3.*
  diffarray: ==0.1.*
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- '0.3'
author: Chris Smith <cdsmith@gmail.com>
latest: '0.3'
description-type: haddock
description: ! 'This is a persistent data structure for equivalence

  relations (known in the imperative world as union-find

  or disjoint set union).  It exhibits optimal performance

  when used in a linear pattern, but degrades when other

  access patterns are used.


  The basic idea is as given by Conchon and Filliatre in

  their 2007 paper, \"A persistent union-find data

  structure.\"  Unlike the implementation given in the

  paper, this version is safe with multiple threads, but

  does not optimize for backtracking.


  Version 0.3 contains some performance improvements for

  concurrent applications, and removes the ''repr'' function,

  which was poorly defined and had no good uses.'
license-name: BSD-3-Clause
