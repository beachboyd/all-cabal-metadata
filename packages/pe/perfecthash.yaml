homepage: ''
changelog-type: ''
hash: fb64a7d847d502107d73e1d20b1eeb772da3f5eaefb6672822bb91c9d447e870
test-bench-deps:
  bytestring: -any
  base: -any
  unordered-containers: -any
  hspec: -any
  criterion: -any
  cmph: -any
  array: -any
  containers: -any
  random: -any
  deepseq: -any
  QuickCheck: -any
  perfecthash: -any
maintainer: Mark Wotton <mwotton@gmail.com>
synopsis: A perfect hashing library for mapping bytestrings to values.
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.5 && <5.2'
  time: -any
  cmph: -any
  array: -any
  containers: -any
all-versions:
- 0.2.0
author: Mark Wotton <mwotton@gmail.com>
latest: 0.2.0
description-type: text
description: ! "This is an immutable hashtable built on cmph.\n\nThe motivation is
  mostly speed, and wren thornton's bytestring-trie seems to be the main competition:\n\n%
  ./dist/build/benchmark_trie/benchmark_trie\n* trie lookup:   1.136ns per iteration
  / 880403.98 per second.\n\n% ./dist/build/benchmark/benchmark          \n* perfect
  lookup:   0.687ns per iteration / 1456455.69 per second.\n\nit also uses less space
  in the haskell heap, building once and doing the same number of lookups:\n\nPerfectHash:\n\ttotal
  alloc = 2,525,223,964 bytes  (excludes profiling overheads)\n\nTrie:\n\ttotal alloc
  = 9,806,202,096 bytes  (excludes profiling overheads)\n\nalthough this is not an
  entirely fair comparison given how much PerfectHash stores on the C side.\n"
license-name: BSD-3-Clause
