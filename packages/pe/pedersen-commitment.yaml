homepage: https://github.com/adjoint-io/pedersen-commitment#readme
changelog-type: markdown
hash: 5a62bb6e571d08c43f8788ca10ea12d322dbf769205a682ad31abc0c67f883e6
test-bench-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  protolude: ! '>=0.2'
  memory: ! '>=0.14'
  containers: ! '>=0.5'
  cryptonite: ! '>=0.21'
  tasty-quickcheck: -any
  mtl: ! '>=2.2'
  tasty-hunit: -any
  pedersen-commitment: -any
  tasty: -any
  QuickCheck: -any
maintainer: Adjoint Inc (info@adjoint.io)
synopsis: An implementation of Pedersen commitment schemes
changelog: ! '# Revision history for pedersen-commitment


  ## 0.2


  * Added vector Pedersen commitments.


  ## 0.1


  * First version.


'
basic-deps:
  bytestring: ! '>=0.10'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  protolude: ! '>=0.2'
  memory: ! '>=0.14'
  containers: ! '>=0.5'
  cryptonite: ! '>=0.21'
  mtl: ! '>=2.2'
all-versions:
- '0.1.0'
- '0.2.0'
author: ''
latest: '0.2.0'
description-type: markdown
description: ! "<p align=\"center\">\n  <a href=\"http://www.adjoint.io\"><img src=\"https://www.adjoint.io/images/logo-small.png\"
  width=\"250\"/></a>\n</p>\n\nCommitment Schemes\n==================\n\n[![CircleCI](https://circleci.com/gh/adjoint-io/pedersen-commitment.svg?style=svg&circle-token=35a75a2815badbfcb8ed604037cff3203b848bd2)](https://circleci.com/gh/adjoint-io/pedersen-commitment)\n\nCommitment
  schemes are a way for one counterparty to commit to a value such that\nthe value
  committed remains private, but can be revealed at a later time when\nthe committing
  party divulges a necessary parameter of the commitment process.\nStrong commitment
  schemes must be both information *hiding* and computationally\n*binding*.\n\nThe
  Pedersen commitment sheme allows a sender to create a commitment to a secret\nvalue.
  They may then later open the commitment and reveal the value in a\nverifiable manner
  that binds them to their commitment. A commitment shceme\nconsists of a three stages:\n\n1.
  `Setup`\n2. `Commit`\n3. `Open`\n\n```haskell\nexample :: IO Bool\nexample = do\n
  \ -- Setup commitment parameters\n  (a, cp) <- setup 256\n\n  -- Commit to the message
  using paramaters: Com(msg, cp)\n  let msg = 0xCAFEBEEF\n  Pedersen c r <- commit
  msg cp\n\n  -- Open and verify commitment: Open(cp,c,r)\n  pure (open cp c r)\n```\n\nPedersen
  commitment scheme has the following properties:\n\n1. **Hiding**: A dishonest party
  cannot discover the honest party's value.\n2. **Binding**: A dishonest party cannot
  open his or her commitment in more than one way\n3. **Non-correlation**: A dishonest
  party cannot commit to a value that is in some\n   significant way correlated to
  the honest party's value.\n\nUsing Pedersen commitments we implement [mutually independent\ncommitments](https://www.iacr.org/archive/asiacrypt2001/22480387.pdf)
  system, a\nsecure multiparty communication protocol in which counterparties can
  commit to\narbitrary messages or data in a binding way.\n\nPedersen commitments
  are also additionally homomorphic, such that for messages\n`m0` and `m1` and blinding
  factors `r0` and `r1` we have:\n\n```\nCommit(m0; r0) * Commit(m1; r1) = Commit(m0
  + m1; r0 + r1)\n```\n\n### Pedersen Commitments (Elliptic Curves)\n\nA more efficient
  implementation of the Pedersen Commitment scheme arises from\nElliptic Curve Cryptography
  (ECC) which is based on the algebraic structure of\nelliptic curves over finite
  (prime) fields. Using ECC, the commitment scheme\ncomputations require fewer bits
  and as a result yields a much faster commitment\nphase.\n\nGiven a secure elliptic
  curve (e.g. secp256k1), a Pedersen\ncommitment can be implemented using the same
  interface as usual but instead\nof prime field modular exponentiation, EC point
  multiplication and addition\nare used. The use of EC Pedersen commitments is almost
  exactly the same as the\ngeneral prime field implementation:\n\n```haskell\nexample
  :: IO Bool\nexample = do\n  -- Setup commitment parameters\n  (a, cp) <- ecSetup
  Nothing -- SECP256k1 is used by default\n\n  -- Commit to the message using paramaters:
  Com(msg, cp)\n  let msg = 0xCAFEBEEF\n  ECPedersen c r <- ecCommit msg cp\n\n  --
  Open and verify commitment: Open(cp,c,r)\n  pure (ecOpen cp c r)\n```\n\nAdditionally,
  the EC Pedersen Commitment implementation is also additively\nhomomorphic in two
  ways:\n\n```\nCommit(x, r1) + Commit(y, r2) = Commit(x + y, r1 + r2)\n```\n\nand
  given a scalar `n`:\n\n```\nCommit(x,r) + n = Commit(x + n,r)\n```\n\n### Vector
  Pedersen Commitments (Elliptic Curves)\n\nThe Vector Pedersen Commitment is a more
  powerful variant of the previous Pedersen commitment. It commits to a vector **v**
  instead of a scalar. This extended form is defined as:\n\n C' = rH + (v<sub>1</sub>G<sub>1</sub>
  + v<sub>2</sub>G<sub>2</sub> + ...  + v<sub>n</sub>G<sub>n</sub>)\n\nwhere v<sub>1</sub>,
  v<sub>2</sub>, ..., v<sub>n</sub> are scalars that multiply each point G<sub>1</sub>,
  G<sub>2</sub>, ..., G<sub>n</sub> respectively in the elliptic curve. It is the
  result of the dot product between two vectors **v** and **G** of arbitrary large
  number of elements. Each element G<sub>i</sub> is a NUMS (\"Nothing Up My Sleeve\")
  generator that can be created using a hash function H such that `H(encode(G) ||
  i)` and a \"coerce-hash-to-point\" function to construct the point from the randomized
  hash value.\n\nThe new commitment C' is still a point in the curve and a valid Pedersen
  commitment. It also holds the hiding and binding properties and the same additive
  homomorphic properties as the Pedersen Commitment:\n```\nCommit(v, r1) + Commit(w,
  r2) = Commit(w + v, r1 + r2)\n```\n```\nCommit(v, r) + w = Commit(v + w, r)\n```\nwhere
  v and w are now vectors.\n\n**References**:\n\n1. Pedersen, Torben Pryds. \"Non-interactive
  and information-theoretic secure verifiable secret sharing.\" Annual International
  Cryptology Conference. Springer Berlin Heidelberg, 1991.  APA\n2. Liskov, Moses,
  et al. \"Mutually independent commitments.\" International Conference on the Theory
  and Application of Cryptology and Information Security. Springer Berlin Heidelberg,
  2001.  APA\n3. Blum, Manuel, and Silvio Micali. \"How to generate cryptographically
  strong sequences of pseudorandom bits.\" SIAM journal on Computing 13.4 (1984):
  850-864.\n\nUsage\n-----\n\n```bash\n$ stack build\n$ stack repl\n> :load example/Example.hs\n```\n\nLicense\n-------\n\n```\nCopyright
  2017-2018 Adjoint Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou
  may not use this file except in compliance with the License.\nYou may obtain a copy
  of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required
  by applicable law or agreed to in writing, software\ndistributed under the License
  is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  either express or implied.\nSee the License for the specific language governing
  permissions and\nlimitations under the License.\n```\n"
license-name: MIT
