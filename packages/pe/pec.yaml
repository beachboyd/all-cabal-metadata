homepage: ''
changelog-type: text
hash: e106b799e0a1a4c0926d941cd7fa26619fa1276875cee588961fdaad6daef43a
test-bench-deps: {}
maintainer: Brett Letner <brettletner@gmail.com>
synopsis: pec embedded compiler
changelog: ! "Changes since the last release:\n  - eliminated inline Haskell code
  in pec syntax (that was an ugly idea :)\n  - rewrite to better support multiple
  backends\n  - added C backend support\n  - now using grm instead of bnfc\n  - added
  stack, queue, deque container types to pec lib\n  - more test cases including some
  project euler"
basic-deps:
  shake: ! '>=0.2.9'
  wl-pprint: -any
  Cabal: -any
  base: <5
  syb: -any
  filepath: -any
  process: -any
  uniplate: -any
  pec: -any
  array: -any
  containers: -any
  old-time: -any
  mtl: -any
  cmdargs: -any
  grm: -any
  deepseq: -any
  derive: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
author: Brett Letner <brettletner@gmail.com>
latest: 0.2.3
description-type: text
description: ! "Introducing the pec language and pec embedded compiler.\n\nThe intent
  of pec is to provide a drop-in replacement for C, but with\nmodern language features.
  \ Pec is a procedural language with a\nfunctional/declarative feel.  Programming
  in pec is very similar to\nmonadic programming in Haskell.  The primary use case
  for pec is to\nprovide a productive environment for writing safe, efficient, embedded\napplications.\n\nFeature
  list\n  - Easy C integration\n  - No garbage collection\n  - Strong typing with
  Hindley-Milner type inference\n  - Safe pointers, no indexing out of bounds\n  -
  Variants, arrays, tuples, records, arbitrary sized integers\n  - User defined, polymorphic
  data structures\n  - Parametric polymorphism, limited ad-hoc polymorphism\n  - Modules\n
  \ - Compiles to C and LLVM\n  - Haskell-ish syntax/layout\n  - BSD license\n\nBuilding\n
  \ - type 'make'\n  - resolve all hackage dependencies\n  - type 'make' again\n  -
  go and get a cup of coffee :)\n\nPec (the language and the compiler) is in the alpha
  stage of\ndevelopment.  The compiler is implemented in Haskell and has a very\nsmall
  codebase (thanks to several existing Haskell tools/libraries).\n\nYou can download
  and install pec via cabal or access the git\nrepository on github (git@github.com:stevezhee/pec.git).
  \ You'll need\nto have a c compiler installed to build the examples.\n\nAny feedback
  on the design and/or implementation of pec would be\ngreatly appreciated :)\n\nThanks,\nBrett\nbrettletner
  at gmail dot com\n"
license-name: BSD-3-Clause
