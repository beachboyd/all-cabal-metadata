homepage: https://github.com/kostmo/perfect-hash-generator#readme
changelog-type: ''
hash: 8c03a964c4cac054ec0f8882252c860a4ee1a8e7f8998aecf7af83492ed4b342
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  perfect-hash-generator: -any
  base: ! '>=4.5 && <5'
  unordered-containers: -any
  text: -any
  HUnit: -any
  binary: -any
  hashable: -any
  optparse-applicative: -any
  vector: -any
maintainer: Karl Ostmo <kostmo@gmail.com>
synopsis: Perfect minimal hashing implementation in native Haskell
changelog: ''
basic-deps:
  bytestring: -any
  perfect-hash-generator: -any
  base: ! '>=4.5 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  containers: -any
  binary: -any
  hashable: -any
  optparse-applicative: -any
  random: -any
  data-ordlist: -any
  vector: -any
  directory: -any
all-versions:
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.0.4'
- '0.2.0.5'
author: Karl Ostmo <kostmo@gmail.com>
latest: '0.2.0.5'
description-type: haddock
description: ! 'A <https://en.wikipedia.org/wiki/Perfect_hash_function perfect hash
  function> for a set @S@ is a hash function that maps distinct elements in @S@ to
  a set of integers, with __no collisions__. A <https://en.wikipedia.org/wiki/Perfect_hash_function#Minimal_perfect_hash_function
  minimal perfect hash function> is a perfect hash function that maps @n@ keys to
  @n@ __consecutive__ integers, e.g. the numbers from @0@ to @n-1@.


  In contrast with the <https://hackage.haskell.org/package/PerfectHash PerfectHash
  package>, which is a binding to a C-based library, this package is a fully-native
  Haskell implementation.


  It is intended primarily for generating C code for embedded applications (compare
  to @<https://www.gnu.org/software/gperf/manual/gperf.html#Search-Structures gperf>@).
  The output of this tool is a pair of arrays that can be included in generated C
  code for __<https://en.wikipedia.org/wiki/C_dynamic_memory_allocation allocation>-free
  hash tables__.


  Though lookups also perform reasonably well for Haskell applications, it hasn''t
  been benchmarked thorougly with respect to other data structures.


  This implementation was adapted from <http://stevehanov.ca/blog/index.php?id=119
  Steve Hanov''s Blog>.


  = Usage

  The library is written generically to hash both strings and raw integers according
  to the <http://isthe.com/chongo/tech/comp/fnv/ FNV-1a algorithm>. Integers are split
  by octets before hashing.


  > import Data.PerfectHash.Construction (createMinimalPerfectHash)

  >

  > tuples = [

  >    (1000, 1)

  >  , (5555, 2)

  >  , (9876, 3)

  >  ]

  >

  > lookup_table = createMinimalPerfectHash tuples


  Generation of C code based on the arrays in @lookup_table@ is left as an exercise
  to the reader. Algorithm documentation in the "Data.PerfectHash.Hashing" and "Data.PerfectHash.Lookup"
  modules will be helpful.


  See the @hash-perfectly-strings-demo@ and @hash-perfectly-ints-demo@, as well as
  the test suite, for working examples.


  > $ stack build

  > $ stack exec hash-perfectly-strings-demo'
license-name: Apache-2.0
