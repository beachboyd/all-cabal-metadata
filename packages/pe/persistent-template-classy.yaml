homepage: https://github.com/k-bx/persistent-template-classy#readme
changelog-type: ''
hash: 456dd0cfbe4d3812da6d71a34e868b7dfaede19fd57f134da8d275b69a86a6f5
test-bench-deps:
  base: ! '>=4.7 && <5'
  persistent: -any
  text: -any
  persistent-template: -any
  lens: -any
  persistent-template-classy: -any
  persistent-sqlite: -any
  template-haskell: -any
maintainer: k-bx@k-bx.com
synopsis: Generate classy lens field accessors for persistent models
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  persistent: -any
  text: -any
  persistent-template: -any
  lens: -any
  persistent-sqlite: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Kostiantyn Rybnikov
latest: 0.1.0.1
description-type: markdown
description: ! "# persistent-template-classy\n\nGenerate classy lens for your Persistent
  fields. For example:\n\n```haskell\n{-# LANGUAGE EmptyDataDecls #-}\n{-# LANGUAGE
  FlexibleContexts #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving
  #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-#
  LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies
  #-}\n{-# LANGUAGE FunctionalDependencies #-}\n{-# LANGUAGE TypeSynonymInstances
  #-}\n{-# LANGUAGE FlexibleInstances #-}\n\nimport Control.Lens (Lens', (^.), lens)\nimport
  Control.Monad.IO.Class (liftIO)\nimport Database.Persist\nimport Database.Persist.Sqlite\nimport
  Database.Persist.TH\nimport Database.Persist.TH.Classy\n\n$(mkClassyClass \"name\")\n$(mkClassyClass
  \"age\")\n$(mkClassyClass \"title\")\n$(mkClassyClass \"authorId\")\n\nshare\n  [mkPersist
  sqlSettings, mkMigrate \"migrateAll\", mkClassyInstances]\n  [persistLowerCase|\nPerson\n
  \   name String\n    age Int Maybe\n    deriving Show\nBlogPost\n    title String\n
  \   authorId PersonId\n    deriving Show\n|]\n\nmain :: IO ()\nmain =\n  runSqlite
  \":memory:\" $ do\n    runMigration migrateAll\n    let johnDoe = Person \"John
  Doe\" $ Just 35\n    johnId <- insert johnDoe\n    liftIO $ print $ johnDoe ^. name\n
  \   liftIO $ print $ johnDoe ^. age\n    let post = BlogPost \"My fr1st p0st\" johnId\n
  \   liftIO $ print $ post ^. title\n```\n\nThis would essentially generate this
  additional code:\n\n```haskell\nclass HasName ev a | ev -> a where\n  name :: Lens'
  ev a\nclass HasAge ev a | ev -> a where\n  age :: Lens' ev a\nclass HasTitle ev
  a | ev -> a where\n  title :: Lens' ev a\nclass HasAuthorId ev a | ev -> a where\n
  \ authorId :: Lens' ev a\n\ninstance HasName Person String where\n  name = (lens
  personName) (\\ x y -> x {personName = y})\ninstance HasAge Person Int where\n  age
  = (lens personAge) (\\ x y -> x {personAge = y})\ninstance HasTitle BlogPost String
  where\n  title = (lens blogPostTitle) (\\ x y -> x {blogPostTitle = y})\ninstance
  HasAuthorId BlogPost PersonId where\n  authorId\n    = (lens blogPostAuthorId) (\\
  x y -> x {blogPostAuthorId = y})\n```\n\nClass-generation is separated from instance-generation
  because it's\nwise to keep it in a single place in your project and reuse with a\nnon-persistent
  code.\n"
license-name: BSD-3-Clause
