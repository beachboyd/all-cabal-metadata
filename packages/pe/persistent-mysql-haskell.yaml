homepage: http://www.yesodweb.com/book/persistent
changelog-type: markdown
hash: cff7384db2ec689e162c8d822847091f2dc2ad48582077157d321937ab73df10
test-bench-deps: {}
maintainer: Naushadh <naushadh@protonmail.com>
synopsis: A pure haskell backend for the persistent library using MySQL database server.
changelog: ! '## 0.3.5

  - Updated `selectSource` implementation to stream results instead of loading everything
  into memory.


  ## 0.3.4.1

  - Fix a haddock issue down-streamed from [#693](https://github.com/yesodweb/persistent/pull/693).


  ## 0.3.4

  - Port [#693](https://github.com/yesodweb/persistent/pull/693) from `mysql-haskell`:
  Extend the `SomeField` type to allow `insertManyOnDuplicateKeyUpdate` to conditionally
  copy values.

  - Port [#702](https://github.com/yesodweb/persistent/pull/702) from `mysql-haskell`:
  Fix behavior of `insertManyOnDuplicateKeyUpdate` to ignore duplicate key exceptions
  when no updates specified.

  - Bumped TLS bounds to be in [sync with `mysql-haskell`](https://github.com/winterland1989/mysql-haskell/pull/15)
  and land ourselves [back on stackage](https://github.com/fpco/stackage/pull/2956).


  ## 0.3.3

  - Port from `mysql-haskell`: MySQL on duplicate key update [#674](https://github.com/yesodweb/persistent/pull/674).


  ## 0.3.2.1

  - Port from `mysql-haskell`: Prevent spurious no-op migrations when `default=NULL`
  is specified - revised version [#672](https://github.com/yesodweb/persistent/pull/672)
  (which fixes bug [#671](https://github.com/yesodweb/persistent/issues/671) introduced
  by the earlier attempt [#641](https://github.com/yesodweb/persistent/pull/641)).


  ## 0.3.2.0

  - Added conditional declaration of `Show` instance for mysql-haskell''s `ConnectInfo`
  for compatibility with `mysql-haskell-0.8.1.0+`.


  ## 0.3.1.0

  - Fixed compiler warnings in `stack --pedantic` mode so the project can run upstream
  tests on Travis.

  - Minor README enhancements for badges and fixed URL for example when viewing outside
  of Github.


  ## 0.3.0.0

  - Added API for setting [TLS client parameters](https://hackage.haskell.org/package/mysql-haskell-0.8.0.0/docs/Database-MySQL-TLS.html)
  for secure MySQL connections.

  - Exported [Data.TLSSetting](https://hackage.haskell.org/package/tcp-streams-1.0.0.0/docs/Data-TLSSetting.html)
  for convenient usage of TLS.


  ## 0.2.1.0

  - Bumped up version to update README.


  ## 0.2.0.0

  - Added APIs for setting port number and character encoding.

  - Updated type signature for mkMySQLConnectInfo to align with mysql-haskell.


  ## 0.1.1.0

  - Bumped up version to include README and example.


  ## 0.1.0.0


  * Ported persistent-mysql 2.6 to use mysql-haskell as the underlying database driver.

  * Deprecated MySQLConf and ConnectInfo native constructor and default instance in
  favor of mk functions for better forward compatibility. See http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility.

'
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4.6 && <5'
  time: ! '>=1.5.0'
  persistent: ! '>=2.6.1 && <3'
  text: ! '>=0.11.0.6'
  persistent-template: -any
  monad-control: ! '>=0.2'
  resource-pool: -any
  mysql-haskell: ! '>=0.8.0.0 && <1.0'
  tls: ! '>=1.3.5 && <1.5'
  network: ! '>=2.3 && <3.0'
  conduit: ! '>=0.5.3'
  containers: ! '>=0.2'
  io-streams: ! '>=1.2 && <2.0'
  monad-logger: -any
  transformers: ! '>=0.2.1'
  persistent-mysql-haskell: -any
  resourcet: ! '>=0.4.10'
  aeson: ! '>=0.6.2'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.1.0'
- '0.3.0.0'
- '0.3.3'
- '0.3.4'
- '0.3.4.1'
- '0.3.5'
author: Naushadh <naushadh@protonmail.com>, Felipe Lessa <felipe.lessa@gmail.com>,
  Michael Snoyman
latest: '0.3.5'
description-type: markdown
description: ! "# persistent-mysql-haskell\n\n[![hackage version](https://img.shields.io/hackage/v/persistent-mysql-haskell.svg)](https://hackage.haskell.org/package/persistent-mysql-haskell)\n[![Build
  Status](https://travis-ci.org/naushadh/persistent.svg?branch=persistent-mysql-haskell)](https://travis-ci.org/naushadh/persistent)\n\nA
  pure haskell backend for [persistent](https://github.com/yesodweb/persistent) using
  the MySQL database server.\nInternally it uses the [mysql-haskell](https://github.com/winterland1989/mysql-haskell)
  driver in order to access the database.\n\nSee [example/Main.hs](https://github.com/naushadh/persistent/blob/persistent-mysql-haskell/persistent-mysql-haskell/example/Main.hs)
  for how this MySQL backend can be used with Persistent.\n\n### Motivation\n\n`persistent-mysql`
  uses [mysql](https://hackage.haskell.org/package/mysql) (via [mysql-simple](https://hackage.haskell.org/package/mysql-simple))
  as the database driver. `mysql` is a haskell FFI wrapper for `mysqlclient` written
  in C.\n\nReasons to use a pure haskell driver:\n\n- `mysql` has [concurrency issues](https://ro-che.info/articles/2015-04-17-safe-concurrent-mysql-haskell)
  as noted by [@feuerbach](https://github.com/feuerbach).\n\n- [mysql-haskell](https://hackage.haskell.org/package/mysql-haskell),
  a pure haskell driver by [@winterland1989](https://github.com/winterland1989), outperforms
  `mysql-simple` in benchmarks (see hackage or project repo).\n\n- better portability
  and possible static compilation of an entire project that uses `persistent-mysql`.\n\n-
  result streaming support means persistent [`selectSource` streams data from database](http://www.jakubkonka.com/2014/01/23/conduit-haskell.html).
  Effectively addressing [#657 selectSource does not stream results](https://github.com/yesodweb/persistent/issues/657).\n\n-
  a newtype-d `MySQLConnectInfo` allows adding configuring _how_ persistent and the
  underlying driver are glued. Ex: [#679](https://github.com/yesodweb/persistent/issues/679)
  can be elegantly addressed in this library.\n\nPersonal experience on replacing
  `mysql-simple` with `mysql-haskell` in a project:\n\n- Performance gains consistent
  with benchmark.\n\n- Smoother deployment to [AWS](https://en.wikipedia.org/wiki/Amazon_Machine_Image),
  since `mysql` appears to have a hard dependency on the oracle version of `libmysqlclient`
  that does not work with the open source variant that is available by default on
  Amazon Linux (and possibly on other Linux distros).\n\n### Potential issues moving
  from persistent-mysql to persistent-mysql-haskell\n\n`ConnectInfo` and `defaultConnectInfo`
  are not the same between `mysql` and `mysql-haskell`, therefore this package is
  not a 100% drop in replacement for persistent-mysql from the connection configuration
  perspective.\n\n- `mysql-haskell` does not allow provide an API for the entirety
  of [mysqlclient options](https://hackage.haskell.org/package/mysql-0.1.4/docs/Database-MySQL-Base.html#t:Option).
  Therefore neither can this package.\n\n- Given the inevitable incompatibility with
  `persistent-mysql`, and in the interest of [providing a forward-compatible API](http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility),
  `ConnectInfo` internals and `defaultConnectInfo` have been deprecated. However the
  similar utility can be achieved like so:\n\n    ```diff\n    import Database.Persist.MySQL\n\n
  \   connectInfo :: MySQLConnectInfo\n    - connectInfo = defaultConnectInfo\n    -
  \            { connectHost     = \"localhost\"\n    -             , connectUser
  \    = \"test\"\n    -             , connectPassword = \"test\"\n    -             ,
  connectDatabase = \"test\"\n    -             }\n    + connectInfo = mkMySQLConnectInfo
  \"localhost\" \"test\" \"test\" \"test\"\n\n    connectInfoNewPort :: MySQLConnectInfo\n
  \   - connectInfoNewPort = connectInfo { connectPort = 3307 }\n    + connectInfoNewPort
  = setMySQLConnectInfoPort 3307 connectInfo\n\n    connectInfoNewCharSet :: MySQLConnectInfo\n
  \   - connectInfoNewCharSet = connectInfo { connectOptions = [CharsetName \"utf8\"]
  }\n    + connectInfoNewCharSet = setMySQLConnectInfoCharset 33 connectInfo\n\n    ```\n\n-
  `mysql-haskell` and `mysql` have different APIs/mechanisms for securing the\nconnection
  to MySQL. `persistent-mysql-haskell` exposes an API to utilize\n[TLS client params](https://hackage.haskell.org/package/mysql-haskell/docs/Database-MySQL-TLS.html)\nthat
  ships with `mysql-haskell`.\n\n    ```diff\n    connectInfoCustomCaStore :: MySQLConnectInfo\n
  \   - connectInfoCustomCaStore = connectInfo { connectSSL = Just customCaParams
  }\n    + connectInfoCustomCaStore = setMySQLConnectInfoTLS customCaParams connectInfo\n
  \       where\n    -         customCaParams = defaultSSLInfo { sslCAPath = \"foobar.pem\"
  }\n    +         customCaParams = makeClientParams $ CustomCAStore \"foobar.pem\"\n
  \   ```\n\n\nAside from connection configuration, persistent-mysql-haskell is functionally
  on par with persistent-mysql (as of writing this). This can be seen by [comparing
  persistent-test between this fork and upstream](https://github.com/yesodweb/persistent/compare/master...naushadh:persistent-mysql-haskell#diff-028f5df7b2b9c5c8b0fa670fc8c69bff).\n\n###
  FAQs\n\n#### Why isn't this part of the main/upstream persistent repo?\n\n- TLDR:
  Upstream wants to gauge community interest before absorbing this backend into the
  main repo.\n- Long version: See [issue yesodweb/persistent/issues/659](https://github.com/yesodweb/persistent/issues/659).\n\n####
  persistent-mysql supports X but persistent-mysql-haskell API doesn't. Why?\n\n-
  Internals (getters/setters) of MySQLConnectInfo and `defaultConnectInfo` are intentionally
  masked for [forward compatibility](http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility).\n\n-
  For all others, feel free to open an issue and/or submit a PR.\n\n#### Does persistent-mysql-haskell
  ship with tests?\n\n- It does! :) `persistent-test` is fully re-used with an additional
  flag to specifically test persistent-mysql-haskell.\n\n    - [CI/Travis](https://travis-ci.org/naushadh/persistent),
  see [.travis.yml](../.travis.yml).\n\n    - Local,\n    ```bash\n    stack test
  persistent-test --flag persistent-test:mysql_haskell --exec persistent-test\n    ```"
license-name: MIT
