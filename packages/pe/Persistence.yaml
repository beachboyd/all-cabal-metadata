homepage: https://github.com/Ebanflo42/Persistence
changelog-type: markdown
hash: 997664d1805105f10202b6148cb3cfd57fa1e298be5b21e9fa97108bfb8f7918
test-bench-deps:
  base: ! '>=4.0 && <4.11.2'
  containers: ==0.5.*
  maximal-cliques: ! '>=0.1'
  Persistence: -any
  parallel: ==3.2.*
  vector: ! '>=0.12'
maintainer: eben.cowley42@gmail.com
synopsis: A versatile library for topological data analysis.
changelog: |-
  # Revision history for Persistence

  ## 1.0  -- 2018-05-11

  * First version. Released on an unsuspecting world.

  ## 1.1  -- 2018-05-27

  ### Added
  - Bottleneck distance, a way to compare the topology of different data sets.
  - HasseDiagram module, will allow users to deduce topological features of information flow in networks.
  - A function for encoding generic graphs as 2D vectors.

  ### Changed
  - Improved documentation for all exposed modules.

  ## 1.1.3 -- 2018-07-30

  ### Changed

  - Fixed a major bug with persistent homology; high dimensional holes were being detected in low dimensional data sets.
  - Persistent homology now filters out bar codes of the form (i, Just i), as they say nothing about the topology of the underlying complexes.

  ## 1.1.4 -- 2018-09-15

  ### Changed

  - Fixed spelling error.
  - Persistence now exports the constructors for `Extended a`.

  ## 1.1.4.1 -- 2018-09-15

  ### Changed

  - Fixed all spelling errors, should actually build now.

  ## 1.1.4.2 -- 2018-09-15

  ### Changed

  - Fixed non-exhaustive pattern match in `BottleNeckDistance` functions.

  ## 2.0 -- To be determined

  ### Changed

  - The module `Persistence` has been renamed to `Filtration,` and all modules now exist within `Persistence`.

  - Bar codes now take a type as a parameter so that they can not only represent the filtration indices at which features appear but also the scales.

  - Persistent homology functions now take data sets as either vectors or lists.

  - Fixed minor issue with bottleneck distance and removed the unsafe functions.

  - Improved documentation for all exposed modules

  - `Extended` type now exports its constructors.

  ### Added

  - Simplex type synonyms for making other type synonyms and signatures more readable.

  - Data structures for filtrations both with and without all vertices having filtration index equal to zero, and persistent homology functions for processing each structure.

  - Persistent homology functions that return Bar codes in terms of scales.

  - Functions for constructing and manipulating persistence landscapes.
basic-deps:
  base: ! '>=4.0 && <4.13'
  containers: ! '>0.5'
  maximal-cliques: ! '>=0.1'
  parallel: ==3.2.*
  vector: ! '>=0.12'
all-versions:
- '1.0'
- '1.1'
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.4.1
- 1.1.4.2
- '2.0'
author: Eben Kadile
latest: '2.0'
description-type: markdown
description: |
  # Persistence
  A topological data analysis library for Haskell.

  This library is motivated by flexibility when it comes to the type of data being analyzed. If your data comes with a meaningful binary function into into an ordered set, you can use Persistence to analyze your data. The library also provides functions for analyzing directed\/undirected, weighted\/unweighted graphs.

  Visit https://hackage.haskell.org/package/Persistence to see the documentation for the stable version. There is also documentation in each module.

  GitHub: https://github.com/Ebanflo42/Persistence

  If you have the Haskell `stack` tool installed, compile and run tests with `stack test` (you may have to expose the modules `Util` and `Matrix` in the file `Persistence.cabal` to get it to work).

  # Learning about Topological Data Analysis

  Computing simplicial homology:

  https://jeremykun.com/2013/04/10/computing-homology/

  Constructing the Vietoris-Rips complex:

  https://pdfs.semanticscholar.org/e503/c24dcc7a8110a001ae653913ccd064c1044b.pdf

  Constructing the Cech complex:

  https://www.academia.edu/15228439/Efficient_construction_of_the_%C4%8Cech_complex

  Computing persistent homology:

  http://geometry.stanford.edu/papers/zc-cph-05/zc-cph-05.pdf

  The algorithm for finding the directed clique complex is inspired by the pseudocode in the supplementary materials of this paper:

  https://www.frontiersin.org/articles/10.3389/fncom.2017.00048/full

  Computing and working with persistence landscapes:

  https://academic.csuohio.edu/bubenik_p/papers/persistenceLandscapes.pdf

  # Major TODOs:

  `Testing.hs`:

  1) More tests for Persistence landscape functions.

  2) Make some filtrations whose vertices don't all have index 0 and test persistent homology on them.

  `SimplicialComplex.hs`:

  1) Fix simplicial homology over the integers.

  2) Implement construction of the Cech complex (n points form an (n-1)-simplex if balls of a certain radius centered at each of the points intersect).

  3) Implement construction of the alpha-complex (sub-complex of the Delaunay triangulation where the vertices of every simplex are within a certain distance).

  General:

  1) Update documentation for `Filtration.hs` once more changes have been finalized.

  2) A more consistent, well-motivated, and concise philosophy for parallelism needs to be implemented.

  See each of the files for an overview of its inner-workings.
license-name: BSD-3-Clause
