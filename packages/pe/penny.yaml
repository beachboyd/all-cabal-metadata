homepage: http://www.github.com/massysett/penny
changelog-type: text
hash: 61172b3f56bc466bd63d9762b2440f71f83a94f78191880f52d361d55730c58b
test-bench-deps:
  base: ! '>=4.5.0.0 && <4.8'
  time: ! '>=1.4 && <1.5'
  text: ! '>=0.11.3.1 && <1.2'
  anonymous-sums: ! '>=0.4.0.0 && <0.5'
  parsec: ! '>=3.1.3 && <3.2'
  semigroups: ! '>=0.9.2 && <0.14'
  random-shuffle: ==0.0.4
  penny: ==0.32.0.10
  tasty-quickcheck: ! '>=0.8 && <0.9'
  transformers: ! '>=0.3.0.0 && <0.4'
  tasty: ! '>=0.8 && <0.9'
  QuickCheck: ! '>=2.6 && <2.7'
maintainer: omari@smileystation.com
synopsis: Extensible double-entry accounting system
changelog: ! "0.32.0.8\n\n  * update versions of depended-upon packages\n"
basic-deps:
  cereal: ! '>=0.3.5.2 && <0.5'
  either: ! '>=3.4.1 && <4.2'
  bytestring: ! '>=0.9.2.1 && <0.11'
  split: ! '>=0.2.2 && <0.3'
  multiarg: ! '>=0.24.0.4 && <0.27.0.0'
  base: ! '>=4.5.0.0 && <4.8'
  time: ! '>=1.4 && <1.5'
  text: ! '>=0.11.3.1 && <1.2'
  prednote: ! '>=0.22.0.2 && <0.23'
  anonymous-sums: ! '>=0.4.0.0'
  rainbow: ! '>=0.14.0.0 && <0.15.0.0'
  parsec: ! '>=3.1.3 && <3.2'
  action-permutations: ! '>=0.0.0.0 && <0.0.0.2'
  semigroups: ! '>=0.9.2 && <0.14'
  ofx: ! '>=0.4.0.2 && <0.5'
  rainbox: ! '>=0.4.0.2 && <0.5'
  containers: ! '>=0.4.2.1 && <0.6'
  penny: ==0.32.0.10
  matchers: ! '>=0.18.0.0 && <0.19'
  old-locale: ! '>=1.0.0.4 && <1.1'
  contravariant: ! '>=0.2.0.1 && <0.5'
  transformers: ! '>=0.3.0.0'
all-versions:
- 0.24.0.0
- 0.26.0.0
- 0.28.0.0
- 0.30.0.0
- 0.30.0.2
- 0.32.0.0
- 0.32.0.2
- 0.32.0.4
- 0.32.0.6
- 0.32.0.8
- 0.32.0.10
author: Omari Norman
latest: 0.32.0.10
description-type: markdown
description: ! "# Penny - double-entry accounting\n\nPenny is a double-entry accounting
  system which is inspired by, but\nincompatible with, Ledger, which is available
  at\n\nhttp://ledger-cli.org\n\n# Features\n\nPenny is:\n\n* double-entry accounting.
  \ It does not attempt to hide the\n  machinery of double-entry accounting from you;
  for instance, it\n  uses the terms \"Debit\" and \"Credit\".  For a refresher on
  the basics\n  of double-entry accounting, pick up a used accounting textbook from\n
  \ your favorite bookseller (they can be had cheaply, for less than ten\n  U.S. dollars
  including shipping) or check out\n\n  http://www.principlesofaccounting.com/\n\n
  \ which is a great free online text.\n\n* oriented around the command line and your
  text editor.\n\n* extensible in Haskell; I have built many ancillary tools that
  I\n  use \"in-house\" to do things like check the consistency of my\n  records.
  \ Included are tools to automatically process and reconcile\n  bank statements.\n\n*
  but fully-featured even if you know no Haskell, and you need not\n  learn any Haskell
  to use Penny.\n\n* logical.  Or at least I hope so.  The command-line syntax attempts\n
  \ to be as regular as possible.\n\n* good with Unicode text.\n\n* colorful and can
  use 256-color terminals.  Reports make great\n  effort to use all of your screen
  space automatically to present\n  the most readable reports possible.\n\n* able
  to handle multiple commodities in a logical and consistent\n  way--handy if you
  wish to track stock or real estate holdings or\n  transactions in different currencies.\n\n*
  obsessive.  If there was a choice between an easy way and a\n  correct way, I picked
  the correct way.  For instance, all\n  arithmetic is done using decimal numbers
  rather than binary\n  floating-point types.\n\n* freely licensed under the BSD license.\n\n*
  intended for use only on UNIX-like operating systems.  In\n  particular, the libraries
  it uses to print things to your terminal\n  are available primarily on UNIX.  Maybe
  it works on Cygwin too; I\n  have no idea as I use Penny only on UNIX-like systems.\n\n*
  tested with QuickCheck.\n\n# Installation\n\n## Dependencies\n\ncabal install will
  take care of all Haskell dependencies for you;\nhowever, there are also at least
  two C libraries you will need to\ninstall as Penny depends on other Haskell libraries
  that use these C\nlibraries.  You will need to make sure you have the \"development\"\npackage
  installed if you use many Linux distributions; a few\ndistributors, such as Arch,
  Slackware, and Gentoo, generally don't\nship separate \"development\" packages so
  that won't apply to you.\nThe C libraries are:\n\n* pcre - http://www.pcre.org/
  - on Debian GNU/Linux systems this\n  package is called `libpcre3-dev`\n\n* curses
  - on GNU systems this is known as ncurses,\n  http://www.gnu.org/software/ncurses/
  Perhaps other, non-GNU curses\n  implementations will work as well; I do not know.
  \ On Debian\n  GNU/Linux systems, install `libncurses5-dev`.\n\n## Haskell compiler\n\nYou
  will need to get the Glasgow Haskell Compiler.  Most Linux\ndistributors package
  it, or you might be able to get it from the\n[GHC website](http://www.haskell.org/ghc).
  \ Penny has been tested\nwith GHC versions 7.4.1 and 7.6.3; any version between
  those two\nversions should also work.\n\n## Cabal tool\n\nThe [Cabal tool](http://www.haskell.org/cabal/download.html)
  will\nhelp you get the Haskell dependencies you need.\n\nAn easy way to get both
  GHC and the Cabal tool is to get the \n[Haskell Platform](http://www.haskell.org/platform/).
  \ Currently,\nversions 2013.2.0.0 or version 2012.4.0.0 should both work.\n\n##
  Penny itself\n\nTo install Penny, just do:\n\n    cabal update\n    cabal install
  --enable-tests penny\n\nI encourage you to run the tests, so the above commands
  will do\nthat, but if you want to skip them, instead just do\n\n    cabal install
  penny\n\n## Documentation\n\nTo install the manual pages and the documentation,
  you need to find\nthe downloaded archive.  Typically this is at\n`$HOME/.cabal/packages/hackage.haskell.org/penny`.
  \ Unpack this\narchive and look inside.  Run\n\n    sh install-docs\n\nIt will install
  the manual pages to `$PREFIX/share/man`\nand the other documentation to `$PREFIX/share/doc/penny`.
  By default\n`$PREFIX` is `/usr/local`; you can change this by editing the\ninstall-docs
  file and changing the `PREFIX` variable.\n\nTo remove the manual pages and the documentation,
  run\n\n    sh install-docs remove\n\nThe first thing you will want to look at is
  the manual page\npenny-basics(7).  Then you will want to examine the starter.pny
  file\nin the examples directory, which will show you how to write a ledger\nfile.
  \ penny-suite(7) will then direct you to other documentation that\nmay interest
  you.\n\n\n# Penny on the Web\n\nFind Penny on Hackage at\n\nhttp://hackage.haskell.org/package/penny\n\nand
  on Github at\n\nhttp://www.github.com/massysett/penny\n\nand web pages are here:\n\nhttp://massysett.github.io/penny\n\n(I
  am going to phase out the separate web pages in favor of files in\nthe main source
  code tree.)\n\n# Development and bugs\n\nIf you find any bugs or if you wish to
  contribute, please use\n[Github](http://www.github.com/massysett/penny) (preferred)
  or send\nemail to <omari@smileystation.com> (which works just as well as\nGithub,
  but if everything else is equal for you and you would flip a\ncoin to determine
  which contact method to use, then please use\nGithub.)\n\n# Version numbers\n\nVersions
  are numbered like this: A.B.C.D.  All regular releases that\nare ready for use have
  only even numbers for each of A, B, C, and D.\nDevelopment releases have an odd
  number in at least one of A, B, C,\nor D.\n\n`A` is currently `0` and probably won't
  change soon.\n\nI change `B` whenever I make a breaking change in the library, which\nis
  quite often; or\n\nI change `C` when I add functions to the library; or\n\nI change
  `D` when I fix bugs, add documentation, or make adjustments\nto the specification
  of which packages Penny depends on.\n\n# Dependency documentation and bugs\n\nSince
  the Haskell libraries Penny depends upon can move along\nquickly, and because Haskell
  packages can weave complex dependency\ngraphs, sometimes Penny might not build for
  you.  There is no\nsilver bullet solution to this; if you have build problems, please\nreport
  them to me via email or Github.  Also, note that there are\ntwo files in the Penny
  package that can help you diagnose issues:\n\n* The `minimum-versions.txt` file
  will show the oldest software\n  dependencies that are known to work with Penny;
  and\n\n* The `current-versions.txt` file will show more recent dependencies\n  that
  are also known to work with Penny.\n\n# Test status\n\n[![Build Status](https://travis-ci.org/massysett/penny.png?branch=master)](https://travis-ci.org/massysett/penny)\n"
license-name: BSD-3-Clause
