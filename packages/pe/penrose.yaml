homepage: http://penrose.ink
changelog-type: markdown
hash: 166e6f5afc40e05fab8ea3ee3fa50e275fe254e63a6e61dc86c01a8dc8a6d850
test-bench-deps: {}
maintainer: kqy@cs.cmu.edu
synopsis: A system that automatically visualize mathematics
changelog: ! '# Revision history for penrose


  ## 0.1.0.0  -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  gloss: ! '>=1.11 && <1.12'
  base: ! '>=4.9 && <4.10'
  ad: ! '>=4.3 && <4.4'
  text: ! '>=1.2 && <1.3'
  megaparsec: ! '>=5.3 && <5.4'
  websockets: ! '>=0.11 && <0.12'
  containers: ! '>=0.5 && <0.6'
  old-time: ! '>=1.1 && <1.2'
  random: ! '>=1.1 && <1.2'
  aeson: ! '>=1.2 && <1.3'
all-versions:
- 0.1.0.2
author: team-penrose
latest: 0.1.0.2
description-type: markdown
description: ! "# Penrose\n\nWe're building a prototype for set theory. Not ready
  for contributions or public use yet, but hopefully will be after this summer! See
  penrose.ink for more information.\n\n----\n\n### Usage\n\nInstall any relevant packages:
  `cabal install $PACKAGE_NAME` (though I'm told the Haskell community has moved on
  to the better `stack` package manager).\n\nTo compile both:\n`ghc Runtime.hs`\n\nTo
  just compile Compiler:\n`ghc Compiler.hs`\n\nTo use:\n`./Runtime <filename>.sub
  <filename>.sty`\n\nUser interface:\n* You can click and drag the objects, including
  labels. The optimization will pause while dragging and re-layout when the mouse
  is lifted. The object on top is semi-arbitrary, decided by the order of the objects
  in the internal list.\n* Pressing the `R` key will resample the configuration. \n*
  Pressing the `A` key will turn autostep (automatically stepping the optimization)
  on or off. \n* Pressing the `S` key will step the optimization by one step if autostep
  is off. It won't do anything if autostep is on.\n\nExamples of existing pairs:\n*
  twosets.sub settheory.sty\n* continuousmap1.sub continuousmap1.sty (system doesn't
  currently handle this)\n\n----\n\n### Organization\n\n`src` contains the compiler
  and runtime.\n\n`src/GC-slides` contains slides from weekly group meetings.\n\n`src/gifs`
  and `src/pictures` contain GIFs and pictures documenting new features in the system.\n\nOther
  directories in the root contain documentation and old parts of the system.\n\n----\n\n###
  More information\n\nI use the following library to handle the graphics, animation,
  and user input: [gloss](https://hackage.haskell.org/package/gloss-1.10.2.3/docs/Graphics-Gloss-Interface-Pure-Game.html).\n\nFunctionality
  of the current code:\n\n* gradient-descent-based layout \n* with backtracking line
  search \n* for set theory with points, sets, and certain constraints on points and
  sets\n* with very simple objective functions provided (e.g. centering)\n* where
  the layout is animated and interactive (v. useful for debugging)\n\nSome limitations:
  \n\n* line search sometimes doesn't terminate\n* need a better debugging interface
  for optimization, e.g. live parameter tuning\n\nParameters: \n\n* stepsPerSecond:
  number of simulation steps for `gloss` to take for each second of real time\n* picWidth,
  picHeight: canvas dimensions\n* stepFlag: turns stepping the simulation on and off
  for debugging (no stepping = objects don't move)\n* clampFlag: turns clamping gradient
  values on and off for debugging\n* debug: turns on/off the debug print functions\n*
  constraintFlag: turns constraint satisfaction on/off (currently off because we're
  doing unconstrained optimization)\n* Default ambient objective functions are specified
  in `ambientObjFns`, and analogously for `ambientConstrFns`.\n* Default objective
  functions are specified in `genObjsAndFns`.\n* btls: turn on/off the backtracking
  line search for debugging (off = use a fixed timestep specified in the code)\n*
  alpha and beta: parameters for the backtracking line search (see code for a more
  detailed description)\n* stopEps: stopping condition sensitivity for gradient descent.
  Stop when magnitude of gradient is less than stopEps.\n\nDebugging:\n\n* Use the
  flags above.\n* I also use `ghci`, the Haskell REPL. To load the file, do `:l filename.hs`.
  To import a library, paste in the normal import statement. To declare something,
  start with a `let` statement, e.g. `let x = 5`.\n* For printing internal values,
  I use the [Debug.Trace](https://hackage.haskell.org/package/base-4.9.0.0/docs/Debug-Trace.html)
  library.\n\n----\n \n### Design\n\n* Compiler parses the Substance and Style programs
  and combines their abstract syntax trees into Layout (the intermediate layout representation).\n*
  Runtime calls Compiler on the input files, and transforms the data in Layout to
  Opt (the representations used by the optimization code).\n* Runtime imports Compiler
  as a module.\n\n----\n\n### Usage for old code\n\nCompile: `ghc settheory.hs`\n\nCreate
  SVG: `./settheory -w 500 -h 500 -o set.svg`\n(The parameters are the width and height
  of the rendered picture.)\n\nOpen SVG: `chrome set.svg`\n"
license-name: MIT
