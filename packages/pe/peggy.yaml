homepage: http://tanakh.github.com/Peggy
changelog-type: ''
hash: 89882df36deb9d9670c0923da0d43c63e197247771cc14b15f1cda2784872312
test-bench-deps: {}
maintainer: Hideyuki Tanaka <tanaka.hideyuki@gmail.com>
synopsis: The Parser Generator for Haskell
changelog: ''
basic-deps:
  peggy: -any
  base: ==4.*
  monad-control: ==0.3.*
  hashtables: ==1.0.*
  mtl: ! '>=2.0'
  haskell-src-meta: ! '>=0.5'
  template-haskell: ! '>=2.5 && <2.9'
  ListLike: ==3.1.*
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.0.1
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.1.1
- 0.3.2
author: Hideyuki Tanaka
latest: 0.3.2
description-type: markdown
description: ! "# Peggy: A Parser Generator of Parsing Expression Grammer (PEG) #\n\n#
  About\n\nThis is an yet another parser generator of Parsing Expression Grammer (PEG)
  which is:\n\n* Simple\n* Concise\n* Fast\n* Modern\n\n# Usage\n\nYou can find a
  recent stable release in Hackage DB.\nYou can install this as following instruction:\n\n~~~
  {.bash}\n$ cabal update\n$ cabal install Peggy\n~~~\n\n# Why should you use Peggy?\n\nHaskell
  has commonly used parser generators, one of them are Alex/Happy.\nBut I think Alex/Happy
  are not good in these points:\n\n* Generates regacy codes\n\nAlex uses only too
  basic libraries.\nIt does not use monad-transformers, iteratee, ListLike, Text,
  and so on.\n\n* Tradisional Regexp/CFG based parser\n\nParsec has no good error
  recovery.\n\nunnun, kannun...\n\n...\n\n# Quick Start\n\nHere is an example of parsing
  arithmetic expressions.\n\n~~~ {.haskell}\n{-# QuasiQuotes #-}\n{-# Language FlexibleContexts
  #-}\n\nimport Text.Peggy\n\n[peggy|\nexp :: Double\n  = exp \"+\" fact  { $1 + $2
  }\n  / exp \"-\" fact  { $1 - $2 }\n  / fact\nfact :: Double\n  = fact \"*\" term
  { $1 * $2 }\n  / fact \"/\" term { $1 / $2 }\n  / term\nterm :: Double\n  = \"(\"
  exp \")\"\n  / number\nnumber ::: Double\n  = ([1-9][0-9]*) { read $1 }\n|]\n\nmain
  :: IO ()\nmain =\n  print . parse exp =<< getContents\n~~~\n"
license-name: BSD-3-Clause
