homepage: http://www.prg.nii.ac.jp/project/bigul/
changelog-type: markdown
hash: a0955145232fc7574c7d181d6f03a25308b8a0825ebf48e395b404cfd918454e
test-bench-deps: {}
maintainer: Josh Ko <hsiang-shang@nii.ac.jp> and Zirun Zhu <zhu@nii.ac.jp>
synopsis: The Bidirectional Generic Update Language
changelog: ! "1.0.1 Changes\n=============\n\n* GHC 8.0.1 compabitility\n\n  Generics.BiGUL.TH
  now works with template-haskell-2.11 (which is used by\n  GHC 8.0.1). Also explanations
  of the GADT constructors in Generics.BiGUL\n  have been included in the haddock
  documentation.\n\n* `Generics.BiGUL.Checkpoint` added\n\n  This new BiGUL constructor
  lets the programmer display a customised message\n  in error traces.\n\n* Error
  fixes\n\n  - Fixed the glitch that normalSV does not convert boolean-valued lambdas
  to\n    total functions.\n\n  - Eliminated a “Pattern match(es) are overlapped”
  warning reported when\n    using patterns as conditions.\n\n  - Fixed a panic produced
  by `Generics.BiGUL.Interpreter.addCurrentBranchTrace`.\n\n1.0.0 Changes\n=============\n\nVersion
  1.0.0 is the first official release, and is *not* compatible with\n0.9.0 and earlier
  development versions.\n\nThe targeted GHC version is 7.10; 8.0 support is postponed
  due to its\nnon–backward compatible revisions to Template Haskell.\n\n* Module restructuring\n\n
  \   The module structure is refined and simplified, with `Generics.BiGUL.AST`\n
  \   changed to `Generics.BiGUL`, pattern matching functions extracted to\n    `Generics.BiGUL.PatternMatching`,
  and `Generics.BiGUL.Lib` created to\n    serve as a prelude. More specific library
  modules are placed under\n    `Generics.BiGUL.Lib.`:\n\n    - `Generics.BiGUL.Lib.List`
  is the place for list-processing library\n      programs. For now the only inhabitant
  is the “BiFluX alignment”.\n\n    - `Generics.BiGUL.Lib.HuStudies` contains some
  small, concrete examples\n      illustrating the use of every BiGUL construct.\n\n*
  `Generics.BiGUL.Skip` and `Generics.BiGUL.Dep` changed\n\n    - The view type of
  `Skip` is not restricted to `()` anymore, but when\n      skipping, the view should
  be determined by the source as specified by\n      the new functional argument to
  `Skip` — we can perform `Skip f` on a\n      source `s` if and only if the view
  is `f s`. The old `Skip` can be\n      defined in terms of the new one as `Skip
  (const ())`. There is a helper\n      function `skip = Skip . const` defined in
  `Generics.BiGUL.Lib`.\n\n    - `Dep` has been reverted to the original version,
  used to ignore the\n      second component of the view when it depends on the first
  (but not\n      the source).\n\n* Major changes to `Generics.BiGUL.TH`\n\n    -
  `deriveBiGULGeneric` now supports `newtype`.\n\n    - The `update` syntax now takes
  the source pattern as its first argument\n      and the view pattern as its second
  argument. (Previously the view\n      pattern comes first.)\n\n    - `rearrV` and
  `update` now check at compile time whether all view\n      information is used (forbidding
  wildcard in view patterns and requiring\n      all view variables are used); also
  `rearrS` and `rearrV` check whether\n      their first argument is a one-argument
  lambda-expression.\n\n    - The branch construction syntax has been slimmed down
  to just four\n      functions: `normal`, `normalSV`, `adaptive`, and `adaptiveSV`.\n\n
  \   - Normal branch constructing functions now take an additional argument\n      specifying
  on the source an “exit condition”, which should be satisfied\n      by the updated
  source after the branch body is executed. All the exit\n      conditions in a `Case`
  statement should (ideally) be disjoint.\n      Overlapping exit conditions are still
  allowed for fast prototyping,\n      though — the putback semantics of 'Case' will
  compute successfully as\n      long as the ranges of the branches are disjoint (regardless
  of whether\n      the exit conditions are specified precisely enough).\n\n* Error-reporting
  mechanism overhauled\n\n    - The types of `put` and `get` from `Generics.BiGUL.Interpreter`
  are\n      changed to produce simply `Maybe` results. When execution fails\n      (producing
  `Nothing`), invoke `putTrace` and `getTrace` to see the\n      exact failure and
  the execution trace leading to the failure.\n\n    - The execution traces include
  intermediate sources and views; the types\n      used in a BiGUL program are thus
  required to be instances of `Show`.\n\n* Show instances for BiGUL programs removed\n\n
  \   There are two reasons: Functions, which are everywhere in BiGUL programs,\n
  \   cannot be shown; and worse, printing of recursive BiGUL programs will not\n
  \   terminate.\n"
basic-deps:
  base: ==4.9.*
  containers: ! '>=0.5'
  mtl: ! '>=2.2'
  th-extras: ! '>=0.0.0.4'
  template-haskell: ! '>=2.11'
all-versions:
- 0.9.0.0
- 1.0.0
- 1.0.1
author: Josh Ko, Tao Zan, Li Liu, Zirun Zhu, Jorge Mendes, and Zhenjiang Hu
latest: 1.0.1
description-type: haddock
description: ! 'Putback-based bidirectional programming allows the programmer to

  write only one putback transformation, from which the unique

  corresponding forward transformation is derived for free. BiGUL,

  short for the Bidirectional Generic Update Language, is designed to

  be a minimalist putback-based bidirectional programming language.

  BiGUL was originally developed in the dependently typed programming

  language Agda, and its well-behavedness has been completely formally

  verified; this package is the Haskell port of BiGUL.


  For more detail, see the following paper:


  * Hsiang-Shang Ko, Tao Zan, and Zhenjiang Hu. BiGUL: A formally

  verified core language for putback-based bidirectional programming.

  In /Partial Evaluation and Program Manipulation/, PEPM’16,

  pages 61–72. ACM, 2016. <http://dx.doi.org/10.1145/2847538.2847544>.'
license-name: LicenseRef-PublicDomain
