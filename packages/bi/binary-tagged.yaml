homepage: https://github.com/phadej/binary-tagged#readme
changelog-type: markdown
hash: 9d4d861566d4d7d246e596db36b5355aac14b7168551933ae39ee6c54713c1fc
test-bench-deps:
  bytestring: -any
  SHA: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  criterion: -any
  binary-tagged: -any
  semigroups: -any
  array: -any
  tagged: -any
  containers: -any
  quickcheck-instances: -any
  bifunctors: -any
  binary: -any
  tasty-quickcheck: -any
  hashable: -any
  nats: -any
  base16-bytestring: -any
  tasty: -any
  deepseq: -any
  scientific: -any
  binary-orphans: -any
  generics-sop: -any
  aeson: -any
  vector: -any
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Tagged binary serialisation.
changelog: ! "- 0.1.5.1. (2018-09-24)\n    - GHC-8.6.1\n- 0.1.5 (2018-05-20)\n    -
  GHC-8.4.2\n    - Don't depend on nats and semigroups on newer GHC\n- 0.1.4.2 (2016-12-05)\n
  \   - Fix compilation with generics-sop-0.2.3.0\n- 0.1.4.1 (2016-09-20)\n    - Print
  mismatching hashes in base16 encoding\n- 0.1.4.0 (2016-04-12)\n    - Add semigroups
  types\n    - Add Natural\n- 0.1.3.1 (2016-02-10)\n    - Support GHC 8.0\n- 0.1.3.0
  (2015-10-24)\n    - Support `generics-sop-0.2`\n- 0.1.2.0 (2015-10-06)\n    - Add
  tuple `HasSemanticVersion` instances\n    - Add instances for\n        - `()`\n
  \       - `Float`\n        - `Double`\n        - Version`\n        - `Fixed`\n        -
  `Ordering`\n    - Fix `Interleave` &amp; `SumUpTo`, introduce `Div2`\n- 0.1.1.0\n
  \   - Add instances\n        - `Ratio`\n        - `Word`\n        - `HasSemanticVersion`
  for primitive types\n"
basic-deps:
  bytestring: ! '>=0.10.4.0 && <0.11'
  SHA: ! '>=1.6 && <1.7'
  base: ! '>=4.7.0.2 && <4.13'
  time: ! '>=1.4.2 && <1.9'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2.3.0 && <1.3'
  array: ! '>=0.5.0.0 && <0.6'
  tagged: ! '>=0.7 && <0.9'
  containers: ! '>=0.5.5.1 && <0.7'
  binary: ! '>=0.7.1.0 && <0.10'
  hashable: ! '>=1.2 && <1.3'
  base16-bytestring: ! '>=0.1.1.6 && <0.2'
  scientific: ! '>=0.3 && <0.4'
  generics-sop: ! '>=0.3.2.0 && <0.5'
  aeson: ! '>=0.8 && <1.5'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.3.0'
- '0.1.3.1'
- '0.1.4.0'
- '0.1.4.1'
- '0.1.4.2'
- '0.1.5'
- '0.1.5.1'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0.1.5.1'
description-type: markdown
description: ! "# binary-tagged\n\n[![Build Status](https://travis-ci.org/phadej/binary-tagged.svg?branch=master)](https://travis-ci.org/phadej/binary-tagged)\n[![Hackage](https://img.shields.io/hackage/v/binary-tagged.svg)](http://hackage.haskell.org/package/binary-tagged)\n[![Stackage
  LTS 2](http://stackage.org/package/binary-tagged/badge/lts-2)](http://stackage.org/lts-2/package/binary-tagged)\n[![Stackage
  LTS 3](http://stackage.org/package/binary-tagged/badge/lts-3)](http://stackage.org/lts-3/package/binary-tagged)\n[![Stackage
  Nightly](http://stackage.org/package/binary-tagged/badge/nightly)](http://stackage.org/nightly/package/binary-tagged)\n\nStructurally
  tag binary serialisation stream.\n\nSay you have:\n\n```hs\ndata Record = Record\n
  \ { _recordFields :: HM.HashMap Text (Integer, ByteString)\n  , _recordEnabled ::
  Bool\n  }\n  deriving (Eq, Show, Generic)\n\ninstance Binary Record\ninstance HasStructuralInfo
  Record\ninstance HasSemanticVersion Record\n```\n\nthen you can serialise and deserialise
  `Record` values with a structure tag by simply\n\n```hs\nencodeTaggedFile \"cachefile\"
  record\ndecodeTaggedFile \"cachefile\" :: IO Record\n```\n\nIf structure of `Record`
  changes in between, deserialisation will fail early.\n\nThe overhead is next to
  non-observable, see [a simple benchmark](https://github.com/phadej/binary-tagged/blob/master/bench/Bench.hs)
  and the [results](https://rawgit.com/phadej/binary-tagged/master/bench.html).\n"
license-name: BSD3
