homepage: https://github.com/phadej/binary-tagged#readme
changelog-type: markdown
hash: 403aeaade390a7eca554d203d90f650f9e2bb29be8eb808461a722fa0b421b32
test-bench-deps:
  bytestring: -any
  SHA: -any
  base: -any
  time: -any
  unordered-containers: -any
  text: -any
  criterion: -any
  binary-tagged: -any
  semigroups: -any
  array: -any
  tagged: -any
  containers: -any
  quickcheck-instances: -any
  bifunctors: -any
  binary: -any
  tasty-quickcheck: -any
  hashable: -any
  tasty-hunit: -any
  binary-instances: ! '>=1 && <1.1'
  nats: -any
  base16-bytestring: -any
  tasty: -any
  deepseq: -any
  scientific: -any
  generics-sop: -any
  aeson: -any
  vector: -any
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Tagged binary serialisation.
changelog: |
  - 0.2 (2019-05-14)
      - use cryptohash-sha1,
        types of structuralInfoSha1Digest and structuralInfoSha1Digest are changed.
      - Use binary-instances in tests
  - 0.1.5.2 (2019-05-10)
      - generics-sop-0.5
  - 0.1.5.1 (2018-09-24)
      - GHC-8.6.1
  - 0.1.5 (2018-05-20)
      - GHC-8.4.2
      - Don't depend on nats and semigroups on newer GHC
  - 0.1.4.2 (2016-12-05)
      - Fix compilation with generics-sop-0.2.3.0
  - 0.1.4.1 (2016-09-20)
      - Print mismatching hashes in base16 encoding
  - 0.1.4.0 (2016-04-12)
      - Add semigroups types
      - Add Natural
  - 0.1.3.1 (2016-02-10)
      - Support GHC 8.0
  - 0.1.3.0 (2015-10-24)
      - Support `generics-sop-0.2`
  - 0.1.2.0 (2015-10-06)
      - Add tuple `HasSemanticVersion` instances
      - Add instances for
          - `()`
          - `Float`
          - `Double`
          - Version`
          - `Fixed`
          - `Ordering`
      - Fix `Interleave` &amp; `SumUpTo`, introduce `Div2`
  - 0.1.1.0
      - Add instances
          - `Ratio`
          - `Word`
          - `HasSemanticVersion` for primitive types
basic-deps:
  cryptohash-sha1: ! '>=0.11.100.1 && <0.12'
  bytestring: ! '>=0.10.4.0 && <0.11'
  base: ! '>=4.7.0.2 && <4.14'
  time: ! '>=1.4.2 && <1.10'
  unordered-containers: ! '>=0.2 && <0.3'
  text: ! '>=1.2.3.0 && <1.3'
  array: ! '>=0.5.0.0 && <0.6'
  tagged: ! '>=0.7 && <0.9'
  containers: ! '>=0.5.5.1 && <0.7'
  binary: ! '>=0.7.1.0 && <0.10'
  hashable: ! '>=1.2 && <1.4'
  base16-bytestring: ! '>=0.1.1.6 && <0.2'
  scientific: ! '>=0.3 && <0.4'
  generics-sop: ! '>=0.3.2.0 && <0.6'
  aeson: ! '>=0.8 && <1.5'
  vector: ! '>=0.10 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.5
- 0.1.5.1
- 0.1.5.2
- '0.2'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0.2'
description-type: haddock
description: |-
  Structurally tag binary serialisation stream.

  Say you have:

  @
  data Record = Record
  \  { _recordFields  :: HM.HashMap Text (Integer, ByteString)
  \  , _recordEnabled :: Bool
  \  }
  \  deriving (Eq, Show, Generic)

  instance Binary Record
  instance HasStructuralInfo Record
  instance HasSemanticVersion Record
  @

  then you can serialise and deserialise @Record@ values with a structure tag by simply

  @
  encodeTaggedFile "cachefile" record
  decodeTaggedFile "cachefile" :: IO Record
  @

  If structure of @Record@ changes in between, deserialisation will fail early.

  The overhead is next to non-observable, see [a simple benchmark](https://github.com/phadej/binary-tagged/blob/master/bench/Bench.hs).

  @
  benchmarking encode/Binary
  time                 362.6 μs   (361.2 μs .. 363.8 μs)

  benchmarking encode/Tagged
  time                 379.2 μs   (375.5 μs .. 382.2 μs)

  benchmarking decode/Binary
  time                 366.3 μs   (365.1 μs .. 368.1 μs)

  benchmarking decode/Tagged
  time                 367.6 μs   (367.0 μs .. 368.2 μs)
  @
license-name: BSD-3-Clause
