homepage: http://github.com/ekmett/bifunctors/
changelog-type: markdown
hash: 9907e235566e94b5878c137f6cd24708257a8918f603ab692a0330520bb0c68b
test-bench-deps:
  base: ! '>=4 && <5'
  hspec: ! '>=1.8'
  bifunctors: -any
  transformers: -any
  QuickCheck: ! '>=2 && <3'
  template-haskell: -any
  transformers-compat: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Bifunctors
changelog: ! "5.5.1 [2018.02.04]\n------------------\n* Test suite fixes for GHC 8.4.\n\n5.5
  [2017.12.07]\n----------------\n* `Data.Bifunctor.TH` now derives `bimap`/`bitraverse`\n
  \ implementations for empty data types that are strict in the argument.\n* `Data.Bifunctor.TH`
  no longer derives `bifoldr`/`bifoldMap` implementations\n  that error on empty data
  types. Instead, they simply return the folded state\n  (for `bifoldr`) or `mempty`
  (for `bifoldMap`).\n* When using `Data.Bifunctor.TH` to derive `Bifunctor` or `Bitraversable`\n
  \ instances for data types where the last two type variables are at phantom\n  roles,
  generated `bimap`/`bitraverse` implementations now use `coerce` for\n  efficiency.\n*
  Add `Options` to `Data.Bifunctor.TH`, along with variants of existing\n  functions
  that take `Options` as an argument. For now, the only configurable\n  option is
  whether derived instances for empty data types should use the\n  `EmptyCase` extension
  (this is disabled by default).\n\n5.4.2\n-----\n* Make `deriveBitraversable` use
  `liftA2` in derived implementations of `bitraverse` when possible, now that `liftA2`
  is a class method of `Applicative` (as of GHC 8.2)\n* Backport slightly more efficient
  implementations of `bimapDefault` and `bifoldMapDefault`\n\n5.4.1\n-----\n* Add
  explicit `Safe`, `Trustworthy`, and `Unsafe` annotations. In particular, annotate
  the `Data.Bifoldable` module as `Trustworthy` (previously, it was inferred to be
  `Unsafe`).\n\n5.4\n---\n* Only export `Data.Bifoldable` and `Data.Bitraversable`
  when building on GHC < 8.1, otherwise they come from `base`\n* Allow TH derivation
  of `Bifunctor` and `Bifoldable` instances for datatypes containing unboxed tuple
  types\n\n5.3\n---\n* Added `bifoldr1`, `bifoldl1`, `bimsum`, `biasum`, `binull`,
  `bilength`, `bielem`, `bimaximum`, `biminimum`, `bisum`, `biproduct`, `biand`, `bior`,
  `bimaximumBy`, `biminimumBy`, `binotElem`, and `bifind` to `Data.Bifoldable`\n*
  Added `Bifunctor`, `Bifoldable`, and `Bitraversable` instances for `GHC.Generics.K1`\n*
  TH code no longer generates superfluous `mempty` or `pure` subexpressions in derived
  `Bifoldable` or `Bitraversable` instances, respectively\n\n5.2.1\n----\n* Added
  `Bifoldable` and `Bitraversable` instances for `Constant` from `transformers`\n*
  `Data.Bifunctor.TH` now compiles warning-free on GHC 8.0\n\n5.2\n-----\n* Added
  several `Arrow`-like instances for `Tannen` so we can use it as the Cayley construction
  if needed.\n* Added `Data.Bifunctor.Sum`\n* Added `BifunctorFunctor`, `BifunctorMonad`
  and `BifunctorComonad`.\n* Backported `Bifunctor Constant` instance from `transformers`\n\n5.1\n---\n*
  Added `Data.Bifunctor.Fix`\n* Added `Data.Bifunctor.TH`, which permits `TemplateHaskell`-based
  deriving of `Bifunctor`, `Bifoldable` and `Bitraversable` instances.\n* Simplified
  `Bitraversable`.\n\n5\n-\n* Inverted the dependency on `semigroupoids`. We can support
  a much wider array of `base` versions than it can.\n* Added flags\n\n4.2.1\n-----\n*
  Support `Arg` from `semigroups` 0.16.2\n* Fixed a typo.\n\n4.2\n---\n* Bumped dependency
  on `tagged`, which is required to build cleanly on GHC 7.9+\n* Only export `Data.Bifunctor`
  when building on GHC < 7.9, otherwise it comes from `base`.\n\n4.1.1.1\n-------\n*
  Added documentation for 'Bifoldable' and 'Bitraversable'\n\n4.1.1\n-----\n* Added
  `Data.Bifunctor.Join`\n* Fixed improper lower bounds on `base`\n\n4.1.0.1\n-------\n*
  Updated to BSD 2-clause license\n\n4.1\n---\n* Added product bifunctors\n\n4.0\n---\n*
  Compatibility with `semigroupoids` 4.0\n\n3.2\n---\n* Added missing product instances
  for `Biapplicative` and `Biapply`.\n\n3.1\n-----\n* Added `Data.Biapplicative`.\n*
  Added the `Clown` and `Joker` bifunctors from Conor McBride's \"Clowns to the left
  of me, Jokers to the right.\"\n* Added instances for `Const`, higher tuples\n* Added
  `Tagged` instances.\n\n3.0.4\n-----\n* Added `Data.Bifunctor.Flip` and `Data.Bifunctor.Wrapped`.\n\n3.0.3\n---\n*
  Removed upper bounds from my other package dependencies\n"
basic-deps:
  base: ! '>=4 && <5'
  comonad: ! '>=4 && <6'
  semigroups: ! '>=0.8.3.1 && <1'
  base-orphans: ! '>=0.5.2 && <1'
  th-abstraction: ! '>=0.2.2 && <0.3'
  tagged: ! '>=0.7.3 && <1'
  containers: ! '>=0.1 && <0.6'
  transformers: ! '>=0.2 && <0.6'
  template-haskell: ! '>=2.4 && <2.13'
  transformers-compat: ! '>=0.5 && <0.6'
all-versions:
- '0.1'
- '0.1.1'
- '0.1.1.1'
- '0.1.1.2'
- '0.1.1.3'
- '0.1.2'
- '0.1.3'
- '0.1.3.1'
- '0.1.3.3'
- '3.0'
- '3.0.1'
- '3.0.2'
- '3.0.3'
- '3.0.4'
- '3.1'
- '3.2'
- '3.2.0.1'
- '4.0'
- '4.1'
- '4.1.0.1'
- '4.1.1'
- '4.1.1.1'
- '4.2'
- '4.2.1'
- '5'
- '5.1'
- '5.2'
- '5.2.1'
- '5.3'
- '5.4.1'
- '5.4.2'
- '5.5'
- '5.5.1'
author: Edward A. Kmett
latest: '5.5.1'
description-type: markdown
description: ! 'bifunctors

  ==========


  [![Hackage](https://img.shields.io/hackage/v/bifunctors.svg)](https://hackage.haskell.org/package/bifunctors)
  [![Build Status](https://secure.travis-ci.org/ekmett/bifunctors.png?branch=master)](http://travis-ci.org/ekmett/bifunctors)


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD3
