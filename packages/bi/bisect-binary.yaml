homepage: http://github.com/nomeata/bisect-binary
changelog-type: markdown
hash: 575db6bf26073252751d201460fc97ea2f3ba25828257dfa69de0e412bd8c439
test-bench-deps: {}
maintainer: mail@joachim-breitner.de
synopsis: Determine relevant parts of binary data
changelog: ! '# Revision history for bisect-binary


  ## 0.1.0.1


  * Fix bugs in `Intervals.hs` found by formal verification with Coq.


  ## 0.1


  * First version.

'
basic-deps:
  bytestring: -any
  integer-logarithms: -any
  haskeline: ! '>=0.7 && <0.8'
  base: ! '>=4.9 && <4.12'
  time: -any
  filepath: -any
  process: -any
  terminal-size: -any
  hashable: -any
  optparse-applicative: ! '>=0.13 && <0.14'
  yaml: ! '>=0.8 && <0.9'
  directory: -any
all-versions:
- '0.1'
- 0.1.0.1
author: Joachim Breitner
latest: 0.1.0.1
description-type: markdown
description: ! "bisect-binary\n=============\n\nThis little program helps with the
  following task:\n\nYou need to analyse some binary file (e.g., the firmware for
  some\nmicrocontroller). You want to understand how it does certain things, but the\nfile
  is big. One approach to help you in the process is to erase parts of the file\n(by
  overwriting it with binary zeros) and see if the file still does what it\nshould
  be doing. If it does, then you know that the interesting parts are in\nanother part
  of the file.\n\n`bisect-binary` assists in this process by doing the book-keeping
  and zeroing\nout parts of the file.\n\n\nScreenshot\n----------\n\nThe following
  screenshot shows `bisect-binary` in action, as it determins which\npart of a “Hello
  World” program written in Haskell are actually needed:\nIt is taken from a [Asciinema
  demo], and edited to fit your screen.\n\n```\n$ bisect-binary -i hello -o hello-test
  -c 'chmod +x hello-test; timeout -k2s 2s ./hello-test\n…\n12.7% zeroes   131072B
  new   897000B left  [⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⠛⠛⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣤⡄] [YNRUQ?] n\nSegmentation
  fault\n12.7% zeroes   131072B new   897000B left  [⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⠛⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣤⡄]
  [YNRUQ?] n\nhello-test: internal error: stg_ap_p_ret\n(GHC version 8.0.2 for x86_64_unknown_linux)\nPlease
  report this as a GHC bug:  http://www.haskell.org/ghc/reportabug\nAborted\n12.7%
  zeroes   131072B new   897000B left  [⠀⠀⠀⠀⠀⠈⠛⠛⠛⠛⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣤⡄]
  [YNRUQ?] n\nHello World!\n12.7% zeroes    65536B new   897000B left  [⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣻⣿⣥⣤⣤⣤⣤⡄]
  [YNRUQ?] y\nHello World!\n15.9% zeroes    65536B new   864232B left  [⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⢋⣤⣤⣤⣤⣤⣤⣤⣤⡄]
  [YNRUQ?] y\n```\n\n[Asciinema demo]: https://asciinema.org/a/7FcXeDU1BTa0SvynqSLezuaQ0?speed=2\n\nInstallation\n------------\n\nInstall
  Haskell, and run `cabal install bisect-binary`. You will find the\nbinary in `~/.cabal/bin/bisect-binary`,
  and may want to move that to your\n`$PATH`.\n\nUsage\n-----\n\nRun `bisect-binary`
  with the input file, the output file, and optionally a\ncommand to run on every
  try (which could, for example, flash the\nmicrocontroller with the binary):\n\n```\n$
  bisect-binary --help\nBinary file bisector\n\nUsage: bisect-binary (-i|--input FILE)
  (-o|--output FILE) [-c|--command COMMAND]\n  Fills a file with as much zeroes as
  possible\n\nAvailable options:\n  -h,--help                Show this help text\n
  \ -i,--input FILE          input file\n  -o,--output FILE         output file\n
  \ -c,--command COMMAND     command to run\n```\n\nNow `bisect-binary` will zero
  out parts of the file and ask you if the result is\nnow good or bad, as seen in
  the screenshot above. Your options are:\n\n * `Y`: Mark this example as good. It
  will remember which portions it zeroed out and from now\n        on only add to
  it\n * `N`: Mark this example as bad. It will revert to the previous good version
  and try out\n        other parts of the file.\n * `R`: Re-run the command.\n * `U`:
  Undo the last marking.\n * `Q`: Quit the program.\n\nUpon quitting, `bisect-binary`
  will leave `output` in the last known state.\n\nA persisent file name `output-file.bisect.log`
  is kept, so you can quit and\nrestart at any time without losing your work.\n\nThe
  status line tells you:\n * how much of the file could be zeroed out sucessfully.\n
  * how many bytes it is now adding to that.\n * how many bytes of the file may be
  relevant for your task\n * a status bar describing the progress:\n\n   * The top
  row visualizes the part of the file that we know we can zero out for sure.\n   *
  The bottom row visualizes the part that we are zeroing out next.\n\n   Two dots
  indicate _all_ bytes in this part, one dot indicates _some_ bytes.\n\nContact\n-------\n\nPlease
  reports bugs and missing features at the [GitHub bugtracker]. This is\nalso where
  you can find the [source code].\n\n`bisect-binary` was written by [Joachim Breitner]
  and is licensed under a permissive MIT\n[license].\n\n[GitHub bugtracker]: https://github.com/nomeata/bisect-binary/issues\n[source
  code]: https://github.com/nomeata/bisect-binary\n[Joachim Breitner]: http://www.joachim-breitner.de/\n[license]:
  https://github.com/nomeata/gipeda/blob/LICENSE\n\n"
license-name: MIT
