homepage: http://biohaskell.org/Libraries/Bio
changelog-type: ''
hash: 3433f2ccffa58559b5929200fc6fef7393ec4276c61ef5755088a7bc29b5109e
test-bench-deps: {}
maintainer: ketil@malde.org
synopsis: A bioinformatics library
changelog: ''
basic-deps:
  bytestring: ! '>=0.9.1'
  base: ==4.*
  process: -any
  parsec: -any
  array: -any
  containers: -any
  binary: ! '>=0.4 && <0.5'
  old-time: -any
  mtl: -any
  random: -any
  parallel: -any
  QuickCheck: ! '>=2'
  tagsoup: ! '>=0.8'
  directory: -any
all-versions:
- 0.3.3
- 0.3.3.1
- 0.3.3.2
- 0.3.3.4
- 0.3.5
- '0.4'
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- '0.5'
- 0.5.0.1
- 0.5.1
- 0.5.2
- 0.5.3
author: Ketil Malde
latest: 0.5.3
description-type: text
description: ! "biolib - a Haskell library for bioinformatics\n\nThis is a collection
  of data structures and algorithms\nI've found useful when building various bioinformatics-related
  tools\nand utilities.\n\nCurrent list of features includes: a Sequence data type
  supporting\nprotein and nucleotide sequences and conversion between them, quality\ndata,
  reading and writing FASTA formatted files, reading TwoBit and\nphd formats, and
  also FastQ.  Rudimentary support for doing alignments\n- including dynamic adjustment
  of scores based on sequence quality -\nand Blast output parsing.  Partly implemented
  single linkage\nclustering, and multiple alignment.  Reading and writing 454-style
  SFF\nsequences, with a bunch of useful (and not-so-useful) operations on\nthem.\n\nTo
  install, you need to acquire a working GHC (possibly other Haskell\nsystem).  You
  also need the following external libraries:\n\n  QuickCheck   - for unit tests ('make
  test' to run them)\n  binary       - mainly for dealing with the TwoBit sequence
  format\n  tagsoup      - for parsing XML output from Blast\n  parsec       - for
  parsing ACE, Bowtie and Soap output\n\nYou should be able to get what you need from
  <http://hackage.haskell.org/>.\n\nThe easiest way these days, is to use 'cabal'.
  \ You can get away with\n\n  cabal install bio\n\nAs an alternative, you can build
  with 'make', doing either 'make\ninstall' if you can sudo, or 'make user_install'
  if you can not.  Of\ncourse, the Makefile just proxies for the regular Cabal routine,
  which\nwill work just as well:\n\n  runhaskell Setup configure\n  runhaskell Setup
  build\n  sudo runhaskell Setup install\n\n(Use --prefix=$HOME and remove the sudo,
  if you don't want to install as root.)\n\nIf that didn't work, mail me at <ketil@malde.org>,
  and we'll try to\nwork things out.\n"
license-name: LicenseRef-LGPL
