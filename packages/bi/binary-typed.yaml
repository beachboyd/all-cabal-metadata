homepage: https://github.com/quchen/binary-typed
changelog-type: markdown
hash: c283ac0c9811f01b25333af3813d4985dac51a43b3c05729de3e7abb466cd5ca
test-bench-deps:
  bytestring: -any
  base: -any
  criterion: -any
  binary: ! '>=0.7'
  tasty-quickcheck: ! '>=0.8'
  tasty-hunit: ! '>=0.8'
  tasty: ! '>=0.8'
  deepseq: -any
  binary-typed: -any
maintainer: David Luposchainsky <dluposchainsky on googles email service>
synopsis: Type-safe binary serialization
changelog: ! "`binary-typed` changelog\n========================\n\n## 0.1\n\n###
  0.1.0.0\n\nInitial release.\n\n### 0.1.0.1\n\n- Add testsuite to compare generated
  message lengths with vanilla `Binary` and\n  the various different typed serializations.\n-
  The .cabal file is hopefully fixed so that Hackage is able to build the docs\n  automatically.\n\n\n\n##
  0.2\n\n### 0.2.0.0\n\n- Add `Hashed32` type representation with 32 bit, more suitable
  for short data\n  than the previous `Hashed`, which was implicitly 64 bit long.
  `Hashed64` is\n  also available in case the longer hash is needed.\n- Type representations
  are now automatically cached by `encodeTyped`. If this\n  data is long enough, it
  is even serialized in advance as well.\n\n### 0.2.0.1\n\n- Fix whitespace in docs
  to make the docs build properly on Hackage, which\n  presumably has an older Haddock
  version\n\n### 0.2.1.0\n\n- Fix sharing not working at all (bad `encodeTyped` implementation)\n-
  Pre-calculate certain functions in the benchmarks so they can be properly\n  shared
  among invocations\n\n### 0.2.2\n\n- Add `Hashed5` type representation that has no
  size overhead compared to\n  `Untyped`\n- Add script to upload documentation to
  Hackage, since with the use of the new\n  `Typeable` GHC 7.6.3, which Hackage currently
  runs, cannot build the docs\n  itself.\n\n### 0.2.3\n\n- Decoding now caches as
  well for `Hashed*` representations. This saves\n  recalculating the `TypeRep` of
  the expected type, which previously was the\n  bottleneck. Both encoding and decoding
  speeds are now very close to untyped\n  `Binary`.\n\n\n\n## 0.3\n\n- Add `Debug`
  module, which is a drop-in replacement for the ordinary API.\n  However, a message
  is emitted via `Debug.Trace` every time a type\n  representation is calculated,
  which makes it possible to debug proper\n  sharing/caching.\n"
basic-deps:
  bytestring: ! '>=0.9'
  murmur-hash: ! '>=0.1'
  base: ! '>=4.7 && <4.10'
  binary: ! '>=0.7'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.1.0
- 0.2.2
- 0.2.3
- '0.3'
- '1.0'
author: David Luposchainsky <dluposchainsky on googles email service>
latest: '1.0'
description-type: haddock
description: ! '`Binary` serialization tagged with type information, allowing for

  typechecking and useful error messages at the receiving site.


  This package serves the same purpose as tagged-binary, with a couple of

  key differences:


  * Support of different kinds of serialized type annotations, each with

  specific strengths and weaknesses.


  * Error messages can provide details on type errors at the cost of

  longer message lengths to include the necessary information.


  * Very small performance overhead compared to using standard `Binary` due

  to caching when using hashed type information. Since shown and full

  types are not cached, decoding them has a significant performance hit

  (ballpark: factor of two).


  * No depencency on @Internal@ modules of other libraries, and a very small

  dependency footprint in general.


  For information about usage, see the "Data.Binary.Typed.Tutorial" module.


  Performance-wise, here is a value @Right (Left \<100 chars lipsum\>)@ of

  type @Either (Char, Int) (Either String (Maybe Integer))@ benchmarked

  using the @Hashed64@ type representation:


  <<http://i.imgur.com/UMPUpp4.png>>


  <doc/bench-overview.png (local copy)>'
license-name: BSD-2-Clause
