homepage: https://github.com/Bodigrim/bitvec
changelog-type: markdown
hash: bcf3d069954aed79e87506b0dbc52e17e61e06fa91c9e6ec1d286ae9c80bd8a7
test-bench-deps:
  test-framework-hunit: -any
  bitvec: -any
  test-framework: -any
  base: ! '>=4.8 && <5'
  test-framework-quickcheck2: -any
  quickcheck-classes: ! '>=0.6.1'
  HUnit: -any
  QuickCheck: ! '>=2.10'
  primitive: -any
  vector: ! '>=0.8'
maintainer: Andrew Lelechenko <andrew.lelechenko@gmail.com>
synopsis: Unboxed bit vectors
changelog: |
  # 0.2.0.1

  * Fix 'Read' instance.

  # 0.2.0.0

  * Remove hand-written 'Num', 'Real', 'Integral', 'Bits' instances.
  * Derive 'Bits' and 'FiniteBits' instances.
  * Expose 'Bit' constructor directly and remove 'fromBool' function.
  * Rename 'toBool' to 'unBit'.

  # 0.1.1.0

  * Fix bugs in `MVector` and `Vector` instances of `Bit`.
  * Speed up `MVector` and `Vector` instances of `Bit`.
basic-deps:
  base: ! '>=4.8 && <5'
  primitive: -any
  vector: ! '>=0.8'
all-versions:
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
author: |-
  James Cook <mokus@deepbondi.net>,
  Andrew Lelechenko <andrew.lelechenko@gmail.com>
latest: 0.2.0.1
description-type: haddock
description: |-
  Bit vectors library for Haskell.
  The current @vector@ package represents unboxed arrays of @Bool@
  allocating one byte per boolean, which might be considered wasteful.
  This library provides a newtype wrapper @Bit@ and a custom instance
  of unboxed @Vector@, which packs booleans densely.
  It is a time-memory tradeoff: 8x less memory footprint
  at the price of moderate performance penalty
  (mostly, for random writes).
license-name: LicenseRef-PublicDomain
