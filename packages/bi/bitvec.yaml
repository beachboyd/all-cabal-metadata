homepage: https://github.com/Bodigrim/bitvec
changelog-type: ''
hash: 55d61be5d597dccaef9d8389abdf9c82f472340462258c2be015f6fdeacec60b
test-bench-deps:
  test-framework-hunit: -any
  bitvec: -any
  test-framework: -any
  base: ! '>=4.8 && <5'
  test-framework-quickcheck2: -any
  quickcheck-classes: ! '>=0.6.1'
  HUnit: -any
  QuickCheck: ! '>=2.10'
  primitive: -any
  vector: ! '>=0.8'
maintainer: Andrew Lelechenko <andrew.lelechenko@gmail.com>
synopsis: Unboxed vectors of bits / dense IntSets
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  primitive: -any
  vector: ! '>=0.8'
all-versions:
- 0.1.1.0
author: |-
  James Cook <mokus@deepbondi.net>,
  Andrew Lelechenko <andrew.lelechenko@gmail.com>
latest: 0.1.1.0
description-type: haddock
description: |-
  Another bit-array library for Haskell.  This one defines a `Bit`
  type (which is an instance of all the "expected" classes, including
  numeric ones) and makes that type an instance of `Data.Vector.Unboxed.
  Unbox`, so we get a lot of nice APIs for free.  `Bool` is already an
  unboxable type, but the current unboxed `Vector` implementation packs
  each bit as a byte.  This one packs 8 bits per byte, as expected
  (`UArray` from the `array` package also uses one bit per `Bool`).

  In addition to the `Vector` interface, there are several high-level
  operations and some low-level ones suitable for building new bulk
  operations by viewing the bit-vector as a word vector.
license-name: LicenseRef-PublicDomain
