homepage: https://github.com/k-bx/bit-protocol#readme
changelog-type: ''
hash: 014df702f76174079dee2472074e517102dbbb3688b1f4b06fd939e74eea0e60
test-bench-deps:
  bit-protocol: -any
  bytestring: -any
  base: ! '>=4.7 && <5'
  base64-bytestring: -any
  dlist: -any
  ghc-prim: -any
  tasty-hunit: -any
  tasty: -any
maintainer: k-bx@k-bx.com
synopsis: Encode binary protocols with some odd bit numbers into a bytestring
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  base64-bytestring: -any
  dlist: -any
  ghc-prim: -any
all-versions:
- '0.1.0.0'
author: Kostiantyn Rybnikov
latest: '0.1.0.0'
description-type: markdown
description: ! "# bit-protocol\n\nA package suitable for binary protocols defined
  in a manner where you\nhave bit counts not aligned by 8.\n\nFor example, if you
  have a protocol for sending user profiles saying:\n\n> The value sent must be a
  base64url-encoded string consisting of four\n> values:\n> - 6 bits representing
  user's age\n> - 7 bits for their favorite number\n> - 5 bits for their lucky number\n>
  - 6 bits for a random number\n\nyou could use the library as follows:\n\n```haskell\nimport
  Data.BitProtocol\nimport Data.ByteString.Base64.URL (encode)\n\nmain :: IO ()\nmain
  = do\n  let age = 29\n      fav = 12\n      lucky = 13\n      rand = 14\n  -- the
  number in protocol should be base64url(011101_0001100_01101_001110)\n  print $ encode
  $ bitsValsToBS8 $ [BitsVal 6 age, BitsVal 7 fav, BitsVal 5 lucky, BitsVal 6 rand]\n
  \ -- will output \"dGNO\"\n  -- which is the same as `encode (BC8.pack (map chr
  [0b01110100, 0b01100011, 0b01001110]))`\n```\n"
license-name: BSD3
