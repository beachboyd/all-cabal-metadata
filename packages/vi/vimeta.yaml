homepage: http://github.com/pjones/vimeta
changelog-type: markdown
hash: edf96d0a16e422d5473dd1b8056a788583433b06cc0a9d8572ee909ea285cf9f
test-bench-deps: {}
maintainer: Peter Jones <pjones@devalot.com>
synopsis: Frontend for video metadata tagging tools
changelog: ! "# Version History\n\n## 0.2.4.0 (March 20, 2018)\n\n  - Update dependency
  versions\n\n## 0.2.3.0 (March 19, 2017)\n\n  - Update dependency versions\n\n  -
  Add Travis CI build status for supported versions of GHC\n\n## 0.2.2.0 (June 9,
  2016)\n\n  - Build with LTS-5.15\n\n## 0.2.1.0 (July, 23, 2015)\n\n  - Restore support
  for GHC 7.8.x\n\n## 0.2.0.0 (July 22, 2015)\n\n  - Initial public release.\n\n##
  0.1.0.0 (Never publicly released)\n\n  - Internal release only.\n"
basic-deps:
  http-client: ! '>=0.4.30 && <0.6'
  xdg-basedir: ! '>=0.2 && <0.3'
  either: ! '>=4.3 && <6'
  bytestring: ! '>=0.10 && <0.11'
  vimeta: -any
  base: ! '>=4.6 && <5.0'
  time: ! '>=1.2 && <1.10'
  text: ! '>=0.11 && <1.3'
  filepath: ! '>=1.3 && <1.5'
  process: ! '>=1.1 && <1.7'
  parsec: ! '>=3.1 && <3.2'
  containers: ! '>=0.5 && <0.6'
  themoviedb: ! '>=1.1 && <1.2'
  old-locale: ! '>=1.0 && <1.1'
  http-client-tls: ! '>=0.2.2 && <0.4'
  mtl: ! '>=2.1 && <2.3'
  byline: ! '>=0.1 && <1.0'
  transformers: ! '>=0.3 && <0.6'
  temporary: ! '>=1.1 && <1.3'
  optparse-applicative: ! '>=0.11 && <0.15'
  http-types: ! '>=0.8 && <0.13'
  aeson: ! '>=0.8 && <1.4'
  yaml: ! '>=0.8 && <0.9'
  time-locale-compat: ! '>=0.1 && <0.2'
  directory: ! '>=1.2 && <1.4'
all-versions:
- '0.2.0.0'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.3.0'
- '0.2.4.0'
author: Peter Jones <pjones@devalot.com>
latest: '0.2.4.0'
description-type: markdown
description: ! "% VIMETA(1) Vimeta User Manual\n% Peter J. Jones\n% May 19, 2015\n\n#
  NAME\n\nvimeta - frontend for video metadata tagging tools\n\n[![Build Status](https://travis-ci.org/pjones/vimeta.svg?branch=master)](https://travis-ci.org/pjones/vimeta)\n\n#
  SYNOPSIS\n\nvimeta --version\n\nvimeta config [*options*]\n\nvimeta movie [*options*]
  *FILE*\n\nvimeta tv [*options*] [*FILE*]...\n\n# DESCRIPTION\n\nVimeta is a tool
  to fetch video metadata from the interwebs and update\nvideo files using a tagging
  tool.\n\n[TheMovieDB][] is used as the source for movie and TV series metadata.\nThis
  means that an API key for TheMovieDB is required in order to use\nVimeta.  Sign
  up for an account at TheMovieDB.com and create an API\nkey.  See the *config* command
  for details on how to create a\nconfiguration file that includes your API key.\n\n[AtomicParsley][]
  is the default tagging tool used to update the\nmetadata in a video file.  Any video
  tagging utility can be used as\nlong as it can be called from the command line.
  \ See the CONFIGURATION\nsection for details on specifying a tagging tool to Vimeta.
  \ If you\ndecide to use AtomicParsley it's highly recommended that you use the\nfork
  maintained by `wez` at <https://bitbucket.org/wez/atomicparsley>.\n\n# OPTIONS\n\nThe
  following command-line options are available to all of the\ncommands listed in the
  COMMANDS section.\n\n`--verbose`\n:    Enable verbose output\n\n`-d`, `--dry-run`\n:
  \   Don't actually do anything.  Instead, print out what would be\n     done.  Automatically
  enables `--verbose`.\n\n# COMMANDS\n\n## vimeta \\--version\n\nDisplay the Vimeta
  version number and then exit.\n\n## vimeta config [*options*]\n\nCreate a configuration
  file for Vimeta.\n\n`-k`, `--key`=*STRING*\n:    The API key for TheMovieDB to record
  into the configuration file.\n\n## vimeta movie [*options*] *FILE*\n\nLook up movie
  metadata from TheMovieDB and tag a video file.  Vimeta\nwill interactively prompt
  for a movie name and provide a list of\nmatching movies to choose from.\n\n`-i`,
  `--id`=*ID*\n:    Avoid interactive prompting by supplying a movie ID\n     assigned
  by TheMovieDB.com.\n\n## vimeta tv [*options*] [*FILE*]...\n\nLook up TV series
  metadata from TheMovieDB and tag one or more video\nfiles.  Episode video files
  can be given on the command line or\nspecified using a mapping file.  See MAPPING
  FILES for more\ninformation about creating a file that maps episodes to video files.\n\nVimeta
  will interactively prompt for a search string and then list\nmatching TV series.
  \ The starting season number and starting episode\nnumber should be given on the
  command line or they will default to 1.\nEach video file will be assigned the next
  episode number in the\nseries.  Vimeta is smart enough to switch to the next season
  after the\nlast episode of the specified season.\n\n`-s`, `--season`=*NUMBER*\n:
  \   Specify the starting season number to tag into the episode files.\n     The
  season number will be incremented after the last episode of a\n     season is tagged.
  \ If the season number isn't specified it will\n     default to 1.\n\n`-e`, `--episode`=*NUMBER*\n:
  \   Specify the staring episode number.  If not specified it defaults\n     to 1.\n\n`-m`,
  `--map`=*FILE*\n:    Use *FILE* as a mapping file.  The mapping file should contain\n
  \    two columns, the first specifies the season and episode numbers\n     and the
  second the file name for the episode video file.  See the\n     MAPPING FILE section
  for more details about mapping files.\n\n`-i`, `--id`=*ID*\n:    Avoid interactive
  prompting by supplying a TV series ID\n     assigned by TheMovieDB.com.\n\n# CONFIGURATION\n\nThe
  Vimeta configuration file is a YAML file containing a few keys.\nYou should begin
  by creating a default configuration file using the\n*config* command.\n\n## Description
  of Keys\n\n`tmdb_key`\n:    The API key issued by TheMovieDB.\n\n`cmd_movie`\n:
  \   A format string used to execute a tagging tool for movie files.\n     See FORMAT
  STRINGS for more information.\n\n`cmd_tv`\n:    A format string used to execute
  a tagging tool for TV episode\n     files.  See FORMAT STRINGS for more information.\n\n#
  FORMAT STRINGS\n\n## Description\n\nVimeta uses format strings to specify the command
  to run in order to\ntag video files, and the arguments needed to pass metadata to
  the\ntagging utility.  These format strings are similar to those used with\nthe
  `printf` family of functions and utilities.\n\nIn format stings, the percent character
  (`%`), followed by a single\ncharacter, is replaced by one of the metadata attributes.
  \ Percent\ncharacters are removed and do not appear in the output string.\nTherefore,
  if you need a literal percent character to appear in the\noutput string, you should
  use two percent characters (`%%`).\n\nFormat strings in Vimeta can also contain
  conditional parts.  These\nare introduced with the `%{` format specifier, which
  must be\nterminated with the `%}` format specifier.  The text and any format\nspecifiers
  enclosed inside the opening and closing brackets are only\ninjected into the output
  string if all of the enclosed format\nspecifiers have valid values.\n\nAs an example,
  not all movies have release dates.  Supplying a\ncommand-line flag along with a
  blank release date to a tagging tool\nwill most likely cause a problem.  It would
  be best to avoid using the\ncommand-line flag altogether.  The following example
  does just this:\n\n    somecommand %{ --release-date %Y %}\n\nHere, `%Y` stands
  in for the full release date.  If it's not present\nin the metadata then none of
  the text between the brackets will be\ninjected into the output string.  If multiple
  format specifiers are\nused, all of them have to be present in the metadata for
  any of the\ntext between the brackets to be included in the output text.\n\n## Format
  Specifiers for Movies\n\nThe following format specifiers are available for tagging
  movie files.\nNot all specifiers are guaranteed to be present.  Consider using\nconditional
  specifiers.\n\n`%Y`\n:    Full release date in XML schema notation.\n\n`%a`\n:    Path
  to a temporary file containing a movie poster image file.\n\n`%d`\n:    Movie description
  (summary text, truncated to 255 characters).\n\n`%f`\n:    Path to the video file
  to be tagged.\n\n`%g`\n:    Name of first listed genre.\n\n`%t`\n:    Movie title.\n\n`%y`\n:
  \   Release year.\n\n## Format Specifiers for Episodes\n\nThe following format specifiers
  are available for tagging TV episode\nfiles.  Not all specifiers are guaranteed
  to be present.  Consider\nusing conditional specifiers.\n\n`%Y`\n:    Full air date
  in XML schema notation.\n\n`%a`\n:    Path to a temporary file containing a season
  poster image file.\n\n`%d`\n:    Episode description (summary text, truncated to
  255 characters).\n\n`%e`\n:    Episode number.\n\n`%f`\n:    Path to the video file
  to be tagged.\n\n`%n`\n:    Name of the TV series.\n\n`%s`\n:    Season number.\n\n`%t`\n:
  \   Episode name.\n\n`%y`\n:    Year that the episode aired.\n\n# MAPPING FILES\n\nVimeta
  can use mapping files that specify hints about metadata and\nwhich video files to
  tag.  For example, the *tv* command can use\nmapping files to link video files to
  specific season and episode\nnumbers.\n\nMapping files are plain text files that
  contain two columns separated\nby whitespace.  Comments and blank lines are ignored.
  \ Comments begin\nwith a pound sign (`#`) and continue to the end of the line.\n\nThe
  first column should contain information relevant to the command\nusing the mapping
  file.  For example, the *tv* command expects the\nfirst column to specify the season
  and episode number.\n\nThe second column is always a file name.  If the file doesn't
  exist\nand the file name lacks a file extension, `.m4v` will be added to the\nfile
  name automatically.\n\nExample mapping file for the *tv* command:\n\n    # This
  is a comment.\n    S2E3 track03.m4v  # Season 2, Episode 3\n    S3E1 track01.m4v
  \ # Season 3, Episode 1\n\n# EXAMPLES\n\n## Tag Several Episode Files\n\n    vimeta
  tv -s 3 -e 10 file01.m4v file02.m4v\n\nWith this command, Vimeta will prompt for
  the name of the TV series\nand then search TheMovieDB.  It will then generate a
  menu where the\ncorrect TV series can be chosen.  Both files will be tagged as\nbelonging
  to season 3.  The first file is episode 10 and the second\nfile is episode 11.  (For
  more control over how season and episode\nnumbers are assigned to files, see the
  section on MAPPING FILES.)\n\n[TheMovieDB]: http://www.themoviedb.org/\n[AtomicParsley]:
  https://bitbucket.org/wez/atomicparsley\n"
license-name: BSD2
