homepage: ''
changelog-type: ''
hash: 2afa7cf7e0c95e716ce09c4dfc7ccd2a4d1461d62d2ac3e102860c094a0fa083
test-bench-deps:
  cereal: -any
  microspec: -any
  bytestring: -any
  base: -any
  time: -any
  vivid-osc: -any
maintainer: Tom Murphy
synopsis: Open Sound Control encode/decode
changelog: ''
basic-deps:
  cereal: -any
  bytestring: -any
  base: ! '>3 && <5'
  time: ! '>=1.2'
  binary: -any
all-versions:
- '0.3.0.0'
- '0.4.0.0'
author: Tom Murphy
latest: '0.4.0.0'
description-type: markdown
description: ! "# vivid-osc\n\nExample usage:\n\n## Sending it over UDP\n\nE.g. to
  TidalCycles, using the 'network' package:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\n\nimport Network.Socket\nimport Network.Socket.ByteString as SB\n\nimport
  Vivid.OSC\n\nmain = do\n   -- Boring Network.Socket setup:\n   (a:_) <- getAddrInfo
  Nothing (Just \"127.0.0.1\") (Just \"57120\")\n   s <- socket (addrFamily a) Datagram
  defaultProtocol\n   connect s (addrAddress a)\n\n   -- The interesting part:\n   SB.send
  s $ encodeOSC $\n      OSC \"/play2\" [OSC_S \"cps\", OSC_F 1.2, OSC_S \"s\", OSC_S
  \"bd\"]\n```\n\n## Receiving via UDP:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\n\nimport Control.Monad (forever)\nimport Network.Socket\nimport Network.Socket.ByteString
  as SB\n\nimport Vivid.OSC\n\nmain = do\n   -- Boring Network.Socket setup:\n   (a:_)
  <- getAddrInfo Nothing (Just \"127.0.0.1\") (Just \"57120\")\n   s <- socket (addrFamily
  a) Datagram defaultProtocol\n   bind s (addrAddress a)\n\n   forever $ do\n      o
  <- decodeOSC <$> SB.recv s 4096\n      case o of\n         Right (OSC \"/play2\"
  [_, OSC_F vel, _, OSC_S \"bd\"]) ->\n            putStrLn $ if vel < 1\n               then
  \"boom\"\n               else \"BOOM!\"\n         _ -> putStrLn $ \"Unexpected input:
  \"++show o\n```\n\n"
license-name: LicenseRefGPL
