homepage: ''
changelog-type: ''
hash: ce90d104ddd5e4ef367b93b21c9e75f555f1e27cd537b6083dfd6b4da0aae36e
test-bench-deps: {}
maintainer: Tom Murphy
synopsis: Sound synthesis with SuperCollider
changelog: ''
basic-deps:
  cereal: -any
  bytestring: -any
  MonadRandom: -any
  split: '>=0.2.0.0'
  stm: -any
  base: '>3 && <5'
  time: '>=1.2'
  filepath: '>=1.0'
  process: -any
  network: -any
  vivid-supercollider: ==0.4.*
  random-shuffle: '>=0.0.3'
  containers: -any
  binary: -any
  utf8-string: -any
  mtl: -any
  hashable: '>=1.2.0.6'
  transformers: '>=0.2.0.0'
  random: '>=1.1'
  vivid-osc: '>=0.4 && <0.6'
  directory: -any
all-versions:
- 0.4.2.4
- 0.5.0.0
author: Tom Murphy
latest: 0.5.0.0
description-type: haddock
description: |-
  Music and sound synthesis with SuperCollider.

  Example usage (after installing and booting SuperCollider):

  @
  &#123;&#45;\# LANGUAGE DataKinds, ExtendedDefaultRules \#&#45;&#125;
  @

  > import Vivid
  >
  > playSong :: VividAction m => m ()
  > playSong = do
  >    fork $ do
  >       s0 <- synth theSound (36 ::I "note")
  >       wait 1
  >       free s0
  >    s1 <- synth theSound (60 ::I "note")
  >    forM_ [62,66,64] $ \note -> do
  >       wait (1/4)
  >       set s1 (note ::I "note")
  >    wait (1/4)
  >    free s1
  >
  > theSound :: SynthDef '["note"]
  > theSound = sd (0 ::I "note") $ do
  >    wobble <- sinOsc (freq_ 5) ? KR ~* 10 ~+ 10
  >    s <- 0.1 ~* sinOsc (freq_ $ midiCPS (V::V "note") ~+ wobble)
  >    out 0 [s,s]
  >
  > main :: IO ()
  > main = do
  >    putStrLn "Simplest:"
  >    playSong
  >
  >    putStrLn "With precise timing:"
  >    doScheduledIn 0.1 playSong
  >    wait 1
  >
  >    putStrLn "Written to a file, non-realtime synthesis:"
  >    putStrLn "(Need to quit the running server for NRT)"
  >    quitSCServer
  >    writeNRT "song.wav" playSong
license-name: LicenseRef-GPL
