homepage: http://github.com/michaelxavier/vigilance
changelog-type: ''
hash: a044507993027072dadd513f6fb35dce2255dbc761d77b8677523727f9a226d0
test-bench-deps:
  warp: -any
  bytestring: -any
  data-store: ! '>=0.3.0.7 && <1.0'
  unix: ! '>=2.6.0.1 && <3.0'
  stm: ! '>=2.4.2 && <3.0'
  yesod-core: -any
  base: ! '>=4.5 && <4.7'
  time: -any
  configurator: ! '>=0.2 && <1.0'
  acid-state: -any
  unordered-containers: -any
  hspec: ! '>=1.6 && <2.0'
  text: -any
  monad-loops: ! '>=0.4.2 && <1.0'
  entropy: ! '>=0.2.2.2'
  async: ==2.*
  yesod-platform: ! '>=1.2.3 && <2.0'
  interpolatedstring-perl6: ! '>=0.9.0 && <1.0'
  HUnit: ! '>=1.2.5'
  fast-logger: ! '>=0.3.2 && <1.0'
  containers: -any
  yesod: -any
  blaze-builder: -any
  lens: ! '>=3.9 && <4.0'
  io-streams: -any
  safecopy: -any
  quickcheck-properties: -any
  http-streams: ! '>=0.6.0.2 && <=1.0'
  mtl: -any
  classy-prelude: ! '>=0.5.8 && <1.0'
  mime-mail: ! '>=0.4.2 && <1.0'
  attoparsec: -any
  transformers: -any
  errors: ! '>=1.4.2 && <2.0'
  QuickCheck: ! '>=1.2.5'
  http-types: -any
  aeson: ! '>=0.6 && <1.0'
  vector: -any
  derive: ! '>=2.5.11 && <3.0'
  hspec-expectations: -any
  directory: -any
maintainer: michael@michaelxavier.net
synopsis: An extensible dead-man's switch system
changelog: ''
basic-deps:
  warp: -any
  either: ==3.4.1
  bytestring: -any
  wai: -any
  data-store: ! '>=0.3.0.7 && <1.0'
  unix: ! '>=2.6.0.1 && <3.0'
  stm: ! '>=2.4.2 && <3.0'
  yesod-core: -any
  base: ! '>=4.5 && <4.7'
  time: -any
  configurator: ! '>=0.2 && <1.0'
  acid-state: -any
  unordered-containers: -any
  text: -any
  monad-loops: ! '>=0.4.2 && <1.0'
  entropy: ! '>=0.2.2.2'
  async: ==2.*
  yesod-platform: ! '>=1.2.3 && <2.0'
  interpolatedstring-perl6: ! '>=0.9.0 && <1.0'
  fast-logger: ! '>=0.3.2 && <1.0'
  containers: -any
  yesod: -any
  blaze-builder: -any
  lens: ! '>=3.9 && <4.0'
  io-streams: -any
  safecopy: -any
  http-streams: ! '>=0.6.1.1 && <=1.0'
  mtl: -any
  classy-prelude: ! '>=0.5.8 && <1.0'
  mime-mail: ! '>=0.4.2 && <1.0'
  monad-logger: -any
  attoparsec: -any
  wai-extra: -any
  transformers: -any
  optparse-applicative: ! '>=0.5.2.1 && <1.0'
  errors: ! '>=1.4.2 && <2.0'
  http-types: -any
  aeson: ! '>=0.6 && <1.0'
  template-haskell: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Michael Xavier
latest: 0.1.0.1
description-type: markdown
description: ! "# Vigilance\n[![Build Status](https://travis-ci.org/MichaelXavier/vigilance.png?branch=master)](https://travis-ci.org/MichaelXavier/vigilance)\n\nVigilance
  is a [dead man's switch](https://en.wikipedia.org/wiki/Dead_man%27s_switch)\n(or
  vigilance switch). You define named **watches** that you expect to happen\nand how
  long to wait inbetween before it's time to worry. You then instrument\nyour periodical
  tasks, whatever they are, to report to vigilance via a simple\nHTTP POST or with
  the included client. You can then configure notifications\nthat will fire when a
  watch fails to check in.\n\n# Concepts\nA *watch* is a named task that you expect
  to happen periodically. Watches have\nan interval at which they are expected to
  check in at the latest, i.e. every 5\nminutes. Watches can be in several states:\n\n*
  *Active* - The clock is ticking but this watch has not yet triggered.\n* *Paused*
  - The clock is not ticking. **Watches start out in this state.**\n  That means that
  you must unpause or check-in the watch to start the watch.\n* *Notifying* - The
  watch has failed to check in and will notify soon.\n* *Triggered* - The watch has
  failed to check in and has notified. It will not\n  notify until it is dealt with,
  either by pausing, checkin in on removal.\n\nWatches are configured in the server's
  config file and managed via the rest API\nor the vigilance client. The configuration
  file can be reloaded to account for\nchanges/additions/removals of watches.\n\nWatches
  can be configured with multiple *notifications* to fire when the watch\nfails to
  check in. Right now the supported notification options are:\n\n* Email - currently
  uses a local sendmail service.\n* HTTP POST\n\n# vigilance-server\nvigilance-server
  is the server component of vigilance. It is responsible for\ntracking what watches
  there are, their state, notifications, etc.\n\n## Usage\nSimply run `vigilance-server
  path/to/config.cfg`. If you don't specify a\nconfig, it will look in `~/.vigilance/server.conf`\n\n##
  Configuration\nThe configuration file is in\n[configurator](http://hackage.haskell.org/package/configurator)
  format. Here's\nan example config\n\n### Example Config\n\n    vigilance {\n      port
  = 9999\n      from_email = \"vigilance@example.com\"\n      max_retries = 5\n      log
  {\n        verbose = on\n        path = \"log/vigilance.log\"\n      }\n      watches
  {\n        foo {\n          interval = [2, \"seconds\"]\n          notifications
  = [\n            [\"http\", \"http://localhost:4567/notify\"],\n            [\"email\",
  \"ohno@example.com\"]\n          ]\n        }\n\n        bar {\n          interval
  = [3, \"minutes\"]\n        }\n      }\n    }\n\nNote that all of these options
  have reasonable defaults, so you don't need to\nspecify them unless you need something
  other than the default.\n\nNote that like the standard capabilities configurator
  has to expand env\nvariables and  load external config files apply:\n\n    vigilance
  {\n      acid_path  = \"$(HOME)/alternative-vigilance-path\"\n\n      watches {\n
  \       import \"only_watches.conf\"\n      }\n    }\n\n### Limited Config Reload
  Support\nSending a `HUP` signal to the process (`kill -HUP pid_of_vigilance`) will\nreload
  the config. Reloading while running can currently update the following\nsettings:\n\n1.
  Log verbosity.\n2. List of watches\n3. Log location\n\n### Config Fields\n\n| Field
  \                         | Default                     | Description                                                 |
  Reloadable |\n| ------------------------------ | --------------------------- | ---------------------------------------------------------
  \  | ---------- |\n| port                           | 3000                        |
  Server port                                                 | No         |\n| from_email
  \                    | None                        | Email  to send from. If missing,
  no email notifications     | No         |\n| max_retries                    | 3
  \                          | Max retries for notifications                               |
  No         |\n| log.acid_path                  | ~/.vigilance/state/AppState |                                                             |
  No         |\n| log.verbose                    | no                          | Verbose
  logging                                             | Yes        |\n| log.path                       |
  ~/.vigilance/vigilance.log  |                                                             |
  Yes        |\n| watches.*name*.interval        | None. Required for a watch  | Pair
  of number and seconds/minutes/hours/days/weeks/years   | Yes        |\n| watches.*name*.notifications
  \  | Empty                       | List of pairs [\"http\", \"url\"] or [\"email\",
  \"a@example.com\"] | Yes        |\n\n## REST API\nVigilance exposes a REST API for
  managing watches.\n\n| Path                    | Method | Description                                                                                  |\n|
  ----------------------- | ------ | --------------------------------------------------------------------------------------------
  |\n| /watches                | GET    | Get the list of watches in JSON.                                                             |\n|
  /watches/*name*         | GET    | Get info for a watch by name                                                                 |\n|
  /watches/*name*         | DELETE | Delete a watch. Make sure to remove it from the
  config or it will return on config (re)load. |\n| /watches/*name*/pause   | POST
  \  | Take a watch out of operation.                                                               |\n|
  /watches/*name*/unpause | POST   | Put a watch back in operation.                                                               |\n|
  /watches/*name*/checkin | POST   | Check in a watch. Unpauses if it is paused.                                                  |\n|
  /watches/*name*/test    | POST   | Synchronously fire a watch's notifications. Returns
  a list of failures in JSON.              |\n\n# Vigilance Client\nVigilance Client
  is available under the `vigilance` binary. It allows you to\ninteract with a vigilance
  server over HTTP in a concise way. The idea behind\nthis is that it should make
  it very easy to insert check-ins in crontabs and\nshell scripts. You can imagine
  a crontab entry like:\n`@daily run_backups.sh && vigilance checkin backups`.\n\n\n#
  Configuration\nVigilance by default looks for a `.vigilance` file in your home directory,\nwhich
  looks like:\n\n    vigilance\n    {\n      host = \"localhost\"\n      port = 3000\n
  \   }\n\n# Usage\nRun `vigilance --help` for help:\n\n    vigilance - tool for managing
  vigilance watches locally or remotely.\n\n    Usage: vigilance COMMAND [-c|--config
  FILE]\n\n    Available options:\n      -h,--help                Show this help text\n
  \     -c,--config FILE         Config file. Defaults to ~/.vigilance\n\n    Available
  commands:\n      list                     List watches\n      pause                    Pause
  watch\n      unpause                  Unpause watch\n      checkin                  Check
  in watch\n      info                     Get info about a watch\n      test                     Test
  the notifications for a watch\n\nAll commands except `list` take a name argument
  for the watch like: `vigilance\npause foo`.\n\n## Status\nGearing up for release.
  Nothing in the TODO necessitates holding up the\nrelease.\n\n## License\nVigilance
  is released under the MIT license. See the `LICENSE` file for more\ninfo.\n"
license-name: MIT
