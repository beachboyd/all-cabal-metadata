homepage: https://github.com/Paczesiowa/virthualenv
changelog-type: ''
hash: ff290926626187156a7b805dd490d2ce9afb6c1efa33cddcb95cc5062c1ca634
test-bench-deps: {}
maintainer: paczesiowa@gmail.com
synopsis: Virtual Haskell Environment builder
changelog: ''
basic-deps:
  bytestring: ! '>=0.9.1.7 && <0.10'
  split: ! '>=0.1.4 && <0.2'
  Cabal: ! '>=1.8.0.6 && <1.15'
  base: ! '>=4.2.0.0 && <4.6'
  filepath: ! '>=1.1.0.3 && <1.4'
  process: ! '>=1.0.1.2 && <1.2'
  mtl: ! '>=1.1.0.2 && <2.1'
  file-embed: ! '>=0.0.4.1 && <0.1'
  safe: ! '>=0.3 && <0.4'
  directory: ! '>=1.0.1.0 && <1.2'
all-versions:
- '0.2'
- 0.2.1
- 0.2.2
author: Bartosz Ćwikłowski
latest: 0.2.2
description-type: markdown
description: ! "Virtual Haskell Environment\n===========================\n\nvirthualenv
  is deprecated, please use the hsenv tool.\n\nWhat is it?\n-----------\nvirthualenv
  is a tool (inspired by Python's virtualenv)\nto create isolated Haskell environments.\n\n\nWhat
  does it do?\n----------------\nIt creates a sandboxed environment in a .virthualenv/
  sub-directory\nof your project, which, when activated, allows you to use regular
  Haskell tools\n(ghc, ghci, ghc-pkg, cabal) to manage your Haskell code and environment.\nIt's
  possible to create an environment, that uses different GHC version\nthan your currently
  installed. Very simple emacs integration mode is included.\n\nBasic usage\n-----------\nFirst,
  choose a directory where you want to keep your\nsandboxed Haskell environment, usually
  a good choice is a directory containing\nyour cabalized project (if you want to
  work on a few projects\n(perhaps an app and its dependent library), just choose
  any of them,\nit doesn't really matter). Enter that directory:\n\n> cd ~/projects/foo\n\nNext,
  create your new isolated Haskell environment\n(this is a one time only (per environment)
  step):\n\n> virthualenv\n\nNow, every time you want to use this environment, you
  have to activate it:\n\n> source .virthualenv/bin/activate\n\nThat's it! Now it's
  possible to use all regular Haskell tools like usual,\nbut it won't affect your
  global/system's Haskell environment, and also\nyour per-user environment (from ~/.cabal
  and ~/.ghc) will stay the same.\nAll cabal-installed packages will be private to
  this environment,\nand also the external environments (global and user) will not
  affect it\n(this environment will only inherit very basic packages,\nmostly ghc
  and Cabal and their deps).\n\nWhen you're done working with this environment, enter
  command 'deactivate',\nor just close the current shell (with exit).\n\n> deactivate\n\nAdvanced
  usage\n--------------\nHere's the most advanced usage of virthualenv. Let's say
  you want to:\n\n* hack on json library\n* do so comfortably\n* use your own version
  of parsec library\n* and do all this using nightly version of GHC\n\nFirst, download
  binary distribution of GHC for your platform\n(e.g. ghc-7.3.20111105-i386-unknown-linux.tar.bz2).\n\nCreate
  a directory for you environment:\n\n> mkdir /tmp/test; cd /tmp/test\n\nThen, create
  a new environment using that GHC:\n\n> virthualenv --ghc=/path/to/ghc-7.3.20111105-i386-unknown-linux.tar.bz2\n\nActivate
  it:\n\n> source .virthualenv/bin/activate\n\nDownload a copy of json library and
  your private version of parsec:\n\n> darcs get http://patch-tag.com/r/Paczesiowa/parsec;
  cabal unpack json\n\nInstall parsec:\n\n> cd parsec2; cabal install\n\nInstall the
  rest of json deps:\n\n> cd ../json-0.5; cabal install --only-dependencies\n\nNow,
  let's say you want to hack on Parsec module of json library.\nOpen it in emacs:\n\n>
  emacsclient Text/JSON/Parsec.hs\n\nActivate the virtual environment (virthualenv
  must be required earlier):\n\n> M-x virthualenv-activate <RET> /tmp/test/ <RET>\n\nEdit
  some code and load it in ghci using 'C-c C-l'. If it type checks,\nyou can play
  around with the code using nightly version of ghci running\nin your virtual environment.
  When you're happy with the code, exit emacs\nand install your edited json library:\n\n>
  cabal install\n\nAnd that's it.\n\nMisc\n----\nvirthualenv has been tested on i386
  Linux and FreeBSD systems,\nbut it should work on any Posix platform. External (from
  tarball) GHC feature\nrequires binary GHC distribution compiled for your platform,\nthat
  can be extracted with tar and installed with\n\"./configure --prefix=PATH; make
  install\".\n\nFAQ\n---\nQ: Can I use it together with tools like cabal-dev or capri?
  \ \nA: No. All these tools work more or less the same (wrapping cabal command,\n
  \  setting GHC_PACKAGE_PATH env variable), so something will probably break.\n\nQ:
  Using GHC from tarball fails, when using FreeBSD with a bunch of make tool  \n   gibberish.
  What do I do?  \nA: Try '--make-cmd=gmake' switch.\n\nQ: Can I use virthualenv inside
  virthualenv?  \nA: No. It may be supported in future versions.\n\nQ: Does it work
  on x64 systems?  \nA: It hasn't been tested, but there's no reason why it shouldn't.\n\nQ:
  Will it work on Mac?  \nA: I doubt it. It should be easy to make it work there with
  system's GHC,\n   Using GHC from tarball will be probably harder. I don't have any
  mac\n   machines, so you're on your own, but patches/ideas/questions are welcome.\n\nQ:
  Will it work on Windows?  \nA: I really doubt it would even compile. I don't have
  access to any windows\n   machines, so you're on your own, but patches/ideas/questions
  are welcome.\n   Maybe it would work on cygwin.\n\nQ: Does it require bash?  \nA:
  No, it should work with any POSIX-compliant shell. It's been tested with\n   bash,
  bash --posix, dash, zsh and ksh.\n\nQ: Can I use it with a different haskell package
  repository than hackage?  \nA: Yes, just adjust the url in .virthualenv/cabal/config
  file.\n\nQ: How do I remove the whole virtual environment?  \nA: If it's activated
  - 'deactivate' it. Then, delete\n   the .virthualenv/ directory.\n\nQ: Is every
  environment completely separate from other environments and\n   the system environment?
  \ \nA: Yes. The only (minor) exception is ghci history - there's only one\n   per
  user history file. Also, if you alter your system's GHC, then\n   virtual environments
  using system's GHC copy will probably break.\n   Virtual environments using GHC
  from a tarball should continue to work.\n"
license-name: BSD-3-Clause
