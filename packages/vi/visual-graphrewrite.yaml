homepage: http://github.com/zsol/visual-graphrewrite/
changelog-type: ''
hash: e52c386bac4f5f19e9f6ea6e97786b7da053e754cb094f8a94e8c7a833e2ecc6
test-bench-deps: {}
maintainer: zsol@elte.hu
synopsis: Visualize the graph-rewrite steps of a Haskell program
changelog: ''
basic-deps:
  svgcairo: ! '>=0.10.0'
  base: ! '>=4.1.0.0 && <4.2'
  isevaluated: ! '>=0.3'
  strict-concurrency: ! '>=0.2.1'
  process: ! '>=1.0.1.1'
  glade: ! '>=0.10.0'
  cairo: ! '>=0.10.0'
  graphviz: ! '>=2999.1.0 && <3000'
  containers: ! '>=0.2.0.0'
  lazysmallcheck: ! '>=0.3'
  value-supply: ! '>=0.5'
  fgl: ! '>=5.4.2.2 && <5.5'
  gtk: ! '>=0.10.0'
  ipprint: ! '>=0.3'
  haskell-src: ! '>=1.0.1.2'
  parallel: ! '>=1.1.0.1'
  pretty: ! '>=1.0.1.0'
  directory: ! '>=1.0.0.3'
all-versions:
- '0.3'
- 0.3.1
- 0.3.2
- 0.4.0.1
author: Zsolt Dollenstein
latest: 0.4.0.1
description-type: text
description: ! "\nThis tool intended to help the graph rewriting process of Haskell
  expressions.\n\nThis is the initial/experimental version.\nUsage:\n ./rewrite <Haskell
  source file>\n\n- The program reads the source, which can contain only simple function
  definitions.\n  The following definitions may be used: (++), div, mod, eqInt, not,
  Cons, Nil, succ, True, False, sin.\n- The source is converted into a graph rewrite
  system.\n- The program opens a window.\n  Press space to see the right-hand-sides
  of the graph rewrite rules.\n\nShort term plans (this version is expected at the
  end of May):\n- Allow data declarations.\n- Allow more built-in functions.\n\nFuture
  plans:\n- Allow type classes.\n- Allow module imports.\n- Allow partial applications
  and slices.\n- Better handling of higher order functions.\n- Pattern parsing improvements.\n-
  Read the Prelude.\n- Extend to work with any Haskell 98 source file.\n- Control
  the graph rewrite process (control over which functions are atomic).\n- Control
  the visualization of the graph (some parts will be folded).\n\n\n"
license-name: BSD-3-Clause
