homepage: https://github.com/alicereuter/Villefort#readme
changelog-type: ''
hash: 4e4ba0d06ad43b50d5a11384323581f2f63ef0286aa0c2a21b785ad9b5b72690
test-bench-deps:
  base: -any
  HDBC: ! '>=2.4.0 && <2.5'
  Villefort: -any
  hspec: -any
  unbounded-delays: -any
  concurrent-extra: -any
  mtl: -any
  HDBC-sqlite3: ! '>=2.3.3 && <2.4'
  QuickCheck: -any
  webdriver: -any
maintainer: alicereuterdev@gmail.com
synopsis: Villefort is a task manager and time tracker
changelog: ''
basic-deps:
  MissingH: -any
  bytestring: -any
  unix: -any
  split: ! '>=0.2.3 && <0.3'
  base: ! '>=4.7 && <5'
  time: ! '>=1.6.0 && <1.7'
  HDBC: ! '>=2.4.0 && <2.5'
  Villefort: -any
  text: -any
  strict: -any
  filepath: -any
  process: -any
  uri-encode: -any
  mtl: ! '>=2.2.1 && <2.3'
  convertible: -any
  HDBC-sqlite3: ! '>=2.3.3 && <2.4'
  transformers: -any
  random: -any
  scotty: ! '>=0.11.0 && <0.12'
  directory: -any
all-versions:
- '0.1.2.13'
- '0.1.2.14'
- '0.1.2.15'
- '0.1.2.16'
author: Alice Reuter
latest: '0.1.2.16'
description-type: markdown
description: ! "# Villefort\r\nVillefort is a time management system written in Haskell.\r\n\r\n##
  Version 1.2.15\r\n- New Task Data type with better scheduling options\r\n- Running
  tasks is now fault tolerant. If one task fails the tasks after it still run.\r\n-
  You can now store aribitrary vars in the task database\r\n\r\n### New Task Data
  Type\r\n```haskell\r\ndata Date = Date {year :: String, -- | The specific date you
  want a task to be on\r\n                  month :: String,\r\n                  day
  :: String }\r\n            | Offset {offset :: Int}   -- | The number of days in
  the future you want the task to be due on \r\n            | Today -- | Make the
  task due today\r\n          deriving (Show,Eq)\r\n\r\n-- | Villefort's internal
  representation of Tasks\r\ndata Task = Task {title :: String,\r\n                 description
  :: String,\r\n                 subject :: String,\r\n                 due :: Date}
  deriving (Show,Eq)\r\n\r\n```\r\nExample\r\n\r\n```haskell\r\ncs121n :: IO Task\r\ncs121n
  = pure $ Task {\r\n  title = \"cs121 notes\",\r\n  description = \"Type up cs121
  lecture notes\",\r\n  subject = \"cs121\",\r\n  due = Today}\r\n```\r\n### Storing
  Vars in the Database\r\n```haskell\r\nmodule Main where\r\n\r\nimport Villefort.Server
  (villefort)\r\nimport Villefort.Config (defaultConfig,defWeekly)\r\nimport Villefort.Definitions\r\nimport
  Villefort.Database\r\nimport Control.Monad.Reader\r\nimport System.Random\r\n\r\nmain
  :: IO ()\r\nmain =  check >> villefort conf\r\n\r\nconf = defaultConfig {\r\n    database=
  \"dotfiles/todo.db\"\r\n    ,weekly = schedule    \r\n  }\r\n\r\n-- | checks if
  vars exists and if they don't initialize them with their default vals\r\ncheck ::
  IO ()\r\ncheck = do\r\n  isBack <- runReaderT (isVar \"back\" ) conf\r\n  if isBack
  then pure () else runReaderT (updateVar \"back\" (show 5.0)) conf\r\n  isCrunch
  <- runReaderT (isVar \"crunch\" ) conf\r\n  if isBack then pure () else runReaderT
  (updateVar \"crunch\" (show 5.0)) conf\r\n\r\n\r\nschedule = defWeekly {\r\n   monday
  = [a121cn\r\n            ,eng301n\r\n            ,a121chw            \r\n            ,back\r\n
  \           ],\r\n   tuesday = [cs101n\r\n             ,cs121n\r\n             ],\r\n
  \  wednesday = [a121cn\r\n               ,eng301n\r\n               ,a121chw\r\n
  \              ,back\r\n               ],\r\n   thursday = [cs101n\r\n              ,cs101hw\r\n
  \             ,crunches\r\n              ],\r\n   friday  =  [eng301n\r\n              ,a121chw\r\n
  \             ,back\r\n              ],\r\n   saturday = [crunches]\r\n   }\r\n\r\ncs121hw
  :: IO Task\r\ncs121hw = pure $ Task {title=\"cs121 hw\",\r\n                       description=\"Do
  cs121hw for Friday\",\r\n                       subject=\"cs211\",\r\n                       due
  =Offset 4}\r\ncs101hw :: IO Task          \r\ncs101hw = pure $ Task { title =\"cs101
  hw\",\r\n                        description =\"Do cs101hw for Friday\",\r\n                        subject
  = \"cs101\",\r\n                        due = Offset 7} \r\ncs101n :: IO Task\r\ncs101n
  = pure $ Task {\r\n  title = \"cs101 notes\",\r\n  description = \"Type up cs101
  lecture notes\",\r\n  subject = \"cs101\",\r\n  due = Today}\r\n\r\ncs121n :: IO
  Task\r\ncs121n = pure $ defTask {\r\n  title = \"cs121 notes\",\r\n  description
  = \"Type up cs121 lecture notes\",\r\n  subject = \"cs121\"}\r\n\r\neng301n :: IO
  Task\r\neng301n = pure $ defTask {\r\n  title = \"eng301 notes\",\r\n  description
  = \"Type up eng301 lecture notes\",\r\n  subject = \"eng301\"\r\n  }\r\n\r\na121chw
  :: IO Task\r\na121chw = pure $ defTask {\r\n  title = \"a121c hw\",\r\n  description
  = \"Do a121c homework\",\r\n  subject = \"a121c\"\r\n  }\r\n  \r\na121cn :: IO Task\r\na121cn
  = pure $ defTask {\r\n  title = \"a121c notes\",\r\n  description = \"Type up a121c
  lecture notes\",\r\n  subject = \"a121c\"\r\n  }\r\n\r\ncs101 :: IO Task\r\ncs101
  = pure $ Task {\r\n  title = \"cs101 hw\",\r\n  description = \"Do cs101hw for Friday\",\r\n
  \ subject = \"cs101\",\r\n  due = Offset 7}\r\n  \r\nback     = exercise \"back\"
  1\r\ncrunches = exercise \"crunch\" 1\r\n\r\nexercise var increment = do\r\n  res
  <- flip runReaderT conf $ getVar var\r\n  putStrLn $ show res\r\n  let num = read
  res :: Double\r\n  flip runReaderT conf (updateVar var ( show ( num+increment)))\r\n
  \ listB <- gener num\r\n  return $ Task var (\"do \" ++ show listB++ \" \" ++ var)
  \  \"exercise\" Today\r\n\r\ngener :: Double -> IO [Int]\r\ngener level = do\r\n
  \ dubs <-  mapM gen $ replicate 5 level :: IO [Double]\r\n  return $ map floor dubs\r\n
  \ where gen x =  randomRIO (x-(x/3),x+(x/3))\r\n```\r\n\r\n\r\n[default config](https://github.com/alicereuter/Villefort/blob/master/src/Villefort/Config.hs)\r\n\r\n#
  Home screen\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen.png)\r\n#
  Add new todos\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen01.png)\r\n#
  Stats page \r\n\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen02.png)\r\n\r\n#
  To install \r\n1. Install cabal (https://www.haskell.org/platform/)\r\n2. In terminal
  or command prompt run `cabal install Villefort`.\r\n3. and then `cabal run Villefort`.\r\n4.
  You will be able to see the home screen by typing localhost:3002 into your favorite
  browser.\r\n\r\n## Configure your villefort\r\ncreate a custom main method in ~.villefort/villefort.hs.
  Below is an example.\r\n\r\n\r\nUse ```Villefort --recompile``` to recompile Villefort
  with your custom config. Recompilation requires ghc to be in your $PATH.\r\nThe
  next time you run villefort it will run with your custom config. The default Config
  is found in Villefort.Config. \r\n\r\n## How to copy data between versions of Villefort.\r\n1.
  Install the new version through cabal.\r\n2. Navigate to ~/.cabal .\r\n3. Navigate
  to share/ .\r\n4. Navigate into your architecture folder mine is x86_64-linux-ghc-7.10.3.\r\n5.
  You should now see different versions of Villefort.\r\n\r\nVillefort-0.1.2.12/\r\n```\r\n
  \   |-- data/\r\n    |   |-- date\r\n    |   |-- day\r\n    |   |-- todo.db\r\n
  \   |-- templates/\r\n    |-- js.js\r\n```\r\nVillefort-0.1.2.13/\r\n```\r\n\t|--
  data/\r\n\t|   |-- date\r\n\t|   |-- day\r\n\t|   |-- todo.db\r\n\t|-- templates/\r\n\t|--
  js.js\r\n```\r\nJust copy the data/todo.db from the old version into data/todo.db
  of the new version.\r\nRemember to rebuild Villefort so that your custom build uses
  the new version of Villefort.\r\n\r\n    Villefort --recompile\r\n\r\n"
license-name: BSD3
