homepage: https://github.com/alicereuter/Villefort#readme
changelog-type: ''
hash: 6f4fde899101f4164f3cf353146f46ff2863902b2735f901ac8cb3a46c9f3fce
test-bench-deps:
  base: -any
  HDBC: ! '>=2.4.0 && <2.5'
  Villefort: -any
  hspec: -any
  unbounded-delays: -any
  concurrent-extra: -any
  mtl: -any
  HDBC-sqlite3: ! '>=2.3.3 && <2.4'
  QuickCheck: -any
  webdriver: -any
maintainer: alice@alicereuter.com
synopsis: Villefort is a task manager and time tracker system.
changelog: ''
basic-deps:
  MissingH: -any
  bytestring: -any
  unix: -any
  split: ! '>=0.2.3 && <0.3'
  base: ! '>=4.7 && <5'
  time: ! '>=1.6.0 && <1.7'
  HDBC: ! '>=2.4.0 && <2.5'
  Villefort: -any
  text: -any
  strict: -any
  filepath: -any
  process: -any
  uri-encode: -any
  mtl: ! '>=2.2.1 && <2.3'
  convertible: -any
  HDBC-sqlite3: ! '>=2.3.3 && <2.4'
  transformers: -any
  random: -any
  scotty: ! '>=0.11.0 && <0.12'
  aeson: -any
  directory: -any
all-versions:
- 0.1.2.13
- 0.1.2.14
- 0.1.2.15
- 0.1.2.16
- 0.1.2.17
- 0.1.2.18
author: Alice Reuter
latest: 0.1.2.18
description-type: markdown
description: "# Villefort\r\nVillefort is a time management system written in Haskell.\r\n\r\n##
  Version 1.2.18\r\n- New json endpoint for active tasks\r\n- Improved logging\r\n-
  [Emacs Ormode intergration](https://alicereuter.com/posts/Villefort%20Orgmode%20Integration.html)\r\n\r\n##
  json api\r\nadded json api to get current active tasks and to time completed today.\r\n```\r\nalice$
  curl localhost:3002/tasks\r\n[{\"subject\":\"cs\",\"due\":\"2019-04-28\",\"rid\":177,\"time\":0,\"title\":\"cs
  lab\",\"dueIn\":0,\"description\":\"\"},{\"subject\":\"bio\",\"due\":\"2019-04-30\",\"rid\":176,\"time\":0,\"title\":\"bio
  hw\",\"dueIn\":2,\"description\":\"\"},{\"subject\":\"probality\",\"due\":\"2019-05-01\",\"rid\":178,\"time\":0,\"title\":\"probability
  hw\",\"dueIn\":3,\"description\":\"\"}]\r\nalice$ curl localhost:3002/done\r\n[{\"subject\":\"bio\",\"time\":30,\"title\":\"bio
  hw\"}]\r\n```\r\n[default config](https://github.com/alicereuter/Villefort/blob/master/src/Villefort/Config.hs)\r\n\r\n#
  Home screen\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen.png)\r\n#
  Add new todos\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen01.png)\r\n#
  Stats page \r\n\r\n![alt text](https://raw.githubusercontent.com/alicereuter/Villefort/master/data/screen02.png)\r\n\r\n```\r\nusage:
  Villefort [options] \r\n  options:\r\n    -r, --recompile     recompiles Villefort
  using a custom config file found in ~/.Villefort/villefort.hs\r\n    -h,                 prints
  this help manual\r\n```\r\n\r\n# To install \r\n1. Install cabal (https://www.haskell.org/platform/)\r\n2.
  In terminal or command prompt run `cabal install Villefort`.\r\n3. and then `cabal
  run Villefort`.\r\n4. You will be able to see the home screen by typing localhost:3002
  into your favorite browser.\r\n\r\n## Configure your villefort\r\ncreate a custom
  main method in ~.villefort/villefort.hs. Below is an example.\r\n\r\n\r\n```haskell\r\nmodule
  Main where\r\n\r\nimport Villefort.Server\r\nimport Villefort.Config\r\nimport Villefort.Definitions\r\nimport
  System.Random\r\nimport System.IO.Strict as S\r\n\r\nmain :: IO ()\r\nmain = villefort
  def {\r\n  daily = [calendar ],\r\n  weekly = defWeekly {\r\n    monday = [push],\r\n
  \   wednesday = [push],\r\n    friday = [push,\r\n              scan]\r\n \r\n    }\r\n
  }\r\n \r\n--              description, heading, subject\r\ncalendar = pure [\"\",\"check
  calendar\",\"admin\"]\r\nscan     = pure [\"scan notes\",\"scan\",\"admin\"] \r\n\r\n--
  | generate increasing sets of push ups\r\npush = do\r\n  rawNum <- S.readFile \"push\"
  \ -- readfile to get # push ups\r\n  let num = read rawNum :: Double\r\n  writeFile
  \"push\" (show (num+0.3))\r\n  sets <- pushUps num\r\n  return $ [show sets,\"push
  ups\",\"fit\"]\r\n\r\npushUps level = do\r\n  dubs <-  mapM gen $ replicate 5 level
  :: IO [Double]\r\n  return $ map floor dubs\r\n  where gen x =  randomRIO (x-(x/3),x+(x/3))\r\n
  \r\n```\r\n\r\nUse ```Villefort --recompile``` to recompile Villefort with your
  custom config. Recompilation requires ghc to be in your $PATH.\r\nThe next time
  you run villefort it will run with your custom config. The default Config is found
  in Villefort.Config. \r\n\r\n## How to copy data between versions of Villefort.\r\n1.
  Install the new version through cabal.\r\n2. Navigate to ~/.cabal .\r\n3. Navigate
  to share/ .\r\n4. Navigate into your architecture folder mine is x86_64-linux-ghc-7.10.3.\r\n5.
  You should now see different versions of Villefort.\r\n\r\nVillefort-0.1.2.12/\r\n```\r\n
  \   |-- data/\r\n    |   |-- date\r\n    |   |-- day\r\n    |   |-- todo.db\r\n
  \   |-- templates/\r\n    |-- js.js\r\n```\r\nVillefort-0.1.2.13/\r\n```\r\n\t|--
  data/\r\n\t|   |-- date\r\n\t|   |-- day\r\n\t|   |-- todo.db\r\n\t|-- templates/\r\n\t|--
  js.js\r\n```\r\nJust copy the data/todo.db from the old version into data/todo.db
  of the new version.\r\nRemember to rebuild Villefort so that your custom build uses
  the new version of Villefort.\r\n\r\n    Villefort --recompile\r\n\r\n"
license-name: BSD-3-Clause
