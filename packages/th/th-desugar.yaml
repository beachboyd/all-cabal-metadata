homepage: https://github.com/goldfirere/th-desugar
changelog-type: markdown
hash: 8d27908c99aa0114a4f7d3a75c3ad2990f2da3bd0533e0da698bcb2ea3a15b8e
test-bench-deps:
  base: ! '>=4 && <5'
  hspec: ! '>=1.3'
  th-orphans: ! '>=0.9.1'
  syb: ! '>=0.4'
  HUnit: ! '>=1.2'
  containers: ! '>=0.5'
  th-desugar: -any
  th-expand-syns: ! '>=0.3.0.6'
  mtl: ! '>=2.1'
  th-lift: ! '>=0.6.1'
  template-haskell: -any
maintainer: Richard Eisenberg <rae@cs.brynmawr.edu>, Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Functions to desugar Template Haskell
changelog: ! "`th-desugar` release notes\n==========================\n\nVersion 1.8\n-----------\n*
  Support GHC 8.4.\n\n* `substTy` now properly substitutes into kind signatures.\n\n*
  Expose `fvDType`, which computes the free variables of a `DType`.\n\n* Incorporate
  a `DDeclaredInfix` field into `DNormalC` to indicate if it is\n  a constructor that
  was declared infix.\n\n* Implement `lookupValueNameWithLocals`, `lookupTypeNameWithLocals`,\n
  \ `mkDataNameWithLocals`, and `mkTypeNameWithLocals`, counterparts to\n  `lookupValueName`,
  `lookupTypeName`, `mkDataName`, and `mkTypeName` which\n  have access to local Template
  Haskell declarations.\n\n* Implement `reifyNameSpace` to determine a `Name`'s `NameSpace`.\n\n*
  Export `reifyFixityWithLocals` from `Language.Haskell.TH.Desugar`.\n\n* Export `matchTy`
  (among other goodies) from new module `Language.Haskell.TH.Subst`.\n  This function
  matches a type template against a target.\n\nVersion 1.7\n-----------\n* Support
  for TH's support for `TypeApplications`, thanks to @RyanGlScott.\n\n* Support for
  unboxed sums, thanks to @RyanGlScott.\n\n* Support for `COMPLETE` pragmas.\n\n*
  `getRecordSelectors` now requires a list of `DCon`s as an argument. This\n  makes
  it easier to return correct record selector bindings in the event that\n  a record
  selector appears in multiple constructors. (See\n  [goldfirere/singletons#180](https://github.com/goldfirere/singletons/issues/180)\n
  \ for an example of where the old behavior of `getRecordSelectors` went wrong.)\n\n*
  Better type family expansion (expanding an open type family with variables works
  now).\n\nVersion 1.6\n-----------\n* Work with GHC 8, with thanks to @christiaanb
  for getting this change going.\n  This means that several core datatypes have changed:
  partcularly, we now have\n  `DTypeFamilyHead` and fixities are now reified separately
  from other things.\n\n* `DKind` is merged with `DType`.\n\n* `Generic` instances
  for everything.\n\nVersion 1.5.5\n-------------\n\n* Fix issue #34. This means that
  desugaring (twice) is idempotent over\nexpressions, after the second time. That
  is, if you desugar an expression,\nsweeten it, desugar again, sweeten again, and
  then desugar a third time, you\nget the same result as when you desugared the second
  time. (The extra\nround-trip is necessary there to make the output smaller in certain
  common\ncases.)\n\nVersion 1.5.4.1\n---------------\n* Fix issue #32, concerning
  reification of classes with default methods.\n\nVersion 1.5.4\n-------------\n*
  Added `expandUnsoundly`\n\nVersion 1.5.3\n-------------\n* More `DsMonad` instances,
  thanks to David Fox.\n\nVersion 1.5.2\n-------------\n* Sweeten kinds more, too.\n\nVersion
  1.5.1\n-------------\n* Thanks to David Fox (@ddssff), sweetening now tries to use
  more of TH's `Type`\nconstructors.\n\n* Also thanks to David Fox, depend usefully
  on the th-orphans package.\n\nVersion 1.5\n-----------\n* There is now a facility
  to register a list of `Dec` that internal reification\n  should use when necessary.
  This avoids the user needing to break up their\n  definition across different top-level
  splices. See `withLocalDeclarations`.\n  This has a side effect of changing the
  `Quasi` typeclass constraint on many\n  functions to be the new `DsMonad` constraint.
  Happily, there are `DsMonad`\n  instances for `Q` and `IO`, the two normal inhabitants
  of `Quasi`.\n\n* \"Match flattening\" is implemented! The functions `scExp` and
  `scLetDec` remove\n  any nested pattern matches.\n\n* More is now exported from
  `Language.Haskell.TH.Desugar` for ease of use.\n\n* `expand` can now expand closed
  type families! It still requires that the\n  type to expand contain no type variables.\n\n*
  Support for standalone-deriving and default signatures in GHC 7.10.\n  This means
  that there are now two new constructors for `DDec`.\n\n* Support for `static` expressions,
  which are new in GHC 7.10.\n\nVersion 1.4.2\n-------------\n* `expand` functions
  now consider open type families, as long as the type\n   to be expanded has no free
  variables.\n\nVersion 1.4.1\n-------------\n* Added `Language.Haskell.TH.Desugar.Lift`,
  which provides `Lift` instances\nfor all of the th-desugar types, as well as several
  Template Haskell types.\n\n* Added `applyDExp` and `applyDType` as convenience functions.\n\nVersion
  1.4.0\n-------------\n* All `Dec`s can now be desugared, to the new `DDec` type.\n\n*
  Sweetening `Dec`s that do not exist in GHC 7.6.3- works on a \"best effort\" basis:\nclosed
  type families are sweetened to open ones, and role annotations are dropped.\n\n*
  `Info`s can now be desugared. Desugaring takes into account GHC bug #8884, which\nmeant
  that reifying poly-kinded type families in GHC 7.6.3- was subtly wrong.\n\n* There
  is a new function `flattenDValD` which takes a binding like\n  `let (a,b) = foo`
  and breaks it apart into separate assignments for `a` and `b`.\n\n* There is a new
  `Desugar` class with methods `desugar` and `sweeten`. See\nthe documentation in
  `Language.Haskell.TH.Desugar`.\n\n* Variable names that are distinct in desugared
  code are now guaranteed to\nhave distinct answers to `nameBase`.\n\n* Added a new
  function `getRecordSelectors` that extracts types and definitions\nof record selectors
  from a datatype definition.\n\nVersion 1.3.1\n-------------\n* Update cabal file
  to include testing files in sdist.\n\nVersion 1.3.0\n-------------\n* Update to
  work with `type Pred = Type` in GHC 7.9. This changed the\n`DPred` type for all
  GHC versions, though.\n\nVersion 1.2.0\n-------------\n* Generalized interface to
  allow any member of the `Qausi` class, instead of\n  just `Q`.\n\nVersion 1.1.1\n-------------\n*
  Made compatible with HEAD after change in role annotation syntax.\n\nVersion 1.1\n-----------\n*
  Added module `Language.Haskell.TH.Desugar.Expand`, which allows for expansion\n
  \ of type synonyms in desugared types.\n* Added `Show`, `Typeable`, and `Data` instances
  to desugared types.\n* Fixed bug where an as-pattern in a `let` statement was scoped
  incorrectly.\n* Changed signature of `dsPat` to be more specific to as-patterns;
  this allowed\n  for fixing the `let` scoping bug.\n* Created new functions `dsPatOverExp`
  and `dsPatsOverExp` to allow for easy\n  desugaring of patterns.\n* Changed signature
  of `dsLetDec` to return a list of `DLetDec`s.\n* Added `dsLetDecs` for convenience.
  Now, instead\n  of using `mapM dsLetDec`, you should use `dsLetDecs`.\n\nVersion
  1.0\n-----------\n\n* Initial release\n"
basic-deps:
  base: ! '>=4 && <5'
  th-orphans: ! '>=0.9.1'
  syb: ! '>=0.4'
  containers: ! '>=0.5'
  th-expand-syns: ! '>=0.3.0.6'
  mtl: ! '>=2.1'
  th-lift: ! '>=0.6.1'
  template-haskell: ! '>=2.8 && <2.14'
all-versions:
- '1.0.0'
- '1.1.0'
- '1.1.1'
- '1.2.0'
- '1.2.1'
- '1.3.0'
- '1.3.1'
- '1.4.0'
- '1.4.1'
- '1.4.2'
- '1.4.2.1'
- '1.5'
- '1.5.1'
- '1.5.2'
- '1.5.3'
- '1.5.4'
- '1.5.4.1'
- '1.5.5'
- '1.6'
- '1.7'
- '1.8'
author: Richard Eisenberg <rae@cs.brynmawr.edu>
latest: '1.8'
description-type: markdown
description: ! '`th-desugar` Package

  ====================


  [![Hackage](https://img.shields.io/hackage/v/th-desugar.svg)](http://hackage.haskell.org/package/th-desugar)

  [![Build Status](https://travis-ci.org/goldfirere/th-desugar.svg?branch=master)](https://travis-ci.org/goldfirere/th-desugar)


  This package provides the `Language.Haskell.TH.Desugar` module, which desugars

  Template Haskell''s rich encoding of Haskell syntax into a simpler encoding.

  This desugaring discards surface syntax information (such as the use of infix

  operators) but retains the original meaning of the TH code. The intended use

  of this package is as a preprocessor for more advanced code manipulation

  tools. Note that the input to any of the `ds...` functions should be produced

  from a TH quote, using the syntax `[| ... |]`. If the input to these functions

  is a hand-coded TH syntax tree, the results may be unpredictable. In

  particular, it is likely that promoted datatypes will not work as expected.


  One explicit goal of this package is to reduce the burden of supporting multiple

  GHC / TH versions. Thus, the desugared language is the same across all GHC versions,

  and any inconsistencies are handled internally.


  The package was designed for use with the `singletons` package, so some design

  decisions are based on that use case, when more than one design choice was

  possible.


  I will try to keep this package up-to-date with respect to changes in GHC.

'
license-name: BSD3
