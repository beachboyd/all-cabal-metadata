homepage: https://github.com/hijarian/theta-functions
changelog-type: ''
hash: 94f268f8321c082a176b7aa5ab92ffdeccb2023b0823c9ffa7c3d97bed8255bd
test-bench-deps: {}
maintainer: hijarian@gmail.com
synopsis: Theta-functions implemented as trigonometric series
changelog: ''
basic-deps:
  base: ! '>=4.3.1.0 && <5'
all-versions:
- '0.1'
- 1.0.0
- 1.0.1
author: Mark Safronov a.k.a. hijarian
latest: 1.0.1
description-type: markdown
description: ! "theta-functions\n===============\n\nImplementation of theta-functions
  using trigonometric series.\n\nThey're the special functions of two variables. Described
  very well at [Wikipedia article](http://en.wikipedia.org/wiki/Theta_function).\n\nLibrary
  exports four theta-functions and a small helper to calculate their second parameter.\n\nTheta
  functions are functions of Complex variables, FYI.\n\nInterface summary\n=================\n\n
  \   thetaN n q u\n\nwhere N is a number from 1 to 4, `n` is a quantization factor,
  `q` is a theta-functions special parameter, and `u` is an actual argument of function.\n\nParameter
  `q` should be calculated with the helper function `qpar`, which accepts real numbers
  as argument:\n\n    qpar tau\n\nqpar itself returns Complex value. This helper is
  used to draw the library closer to the definition of theta-functions provided in
  the books.\n\nConstraints\n===========\n\nNever call theta1..4 with `u` > pi. Theta-functions
  are raising very rapidly (maybe it's because of trigonometric series representing
  them), so with large values of argument they overflow badly and return incorrect
  results."
license-name: LicenseRef-PublicDomain
