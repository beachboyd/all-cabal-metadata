homepage: http://wiki.haskell.org/Threepenny-gui
changelog-type: markdown
hash: 4634827e7aea6aadcbd163a3014f69b494d04b56699a3027d693ccc6152337a1
test-bench-deps: {}
maintainer: Heinrich Apfelmus <apfelmus at quantentunnel dot de>
synopsis: GUI framework that uses the web browser as a display.
changelog: ! "## Changelog for the `threepenny-gui` package\n\n**0.8.3.0** – Maintenance
  and snapshot release\n\n* Export `keypress` event.\n* Fix the spelling of the `refX`
  and `refY` SVG attributes.\n  `refX` and `refY` are added to `Graphics.UI.Threepenny.SVG.Attributes`,\n
  \ the old lowercase versions are deprecated.\n* Invoke compatibility mode of IE11
  for jQuery v3.2.1.\n* Compatibility with GHC-8.6.1\n\n**0.8.2.4** – Maintenance
  release\n\n* Remove redundant dependencies on `network-uri` and `network`\n* Bump
  dependencies to allow `aeson` 1.4.0.0\n* Exclude `websockets` 0.12.5.0 from dependencies.\n\n**0.8.2.3**
  – Maintenance release\n\n* Compatibility with GHC-8.4.1\n* Bump dependencies to
  allow `aeson` 1.3.0.0\n* Bump dependencies to allow `exceptions` 0.10.0\n* Bump
  dependencies to allow `snap-server` 1.1.0.0\n\n**0.8.2.2** – Maintenance release\n\n*
  Bump dependencies to allow `exceptions` 0.9.0\n\n**0.8.2.1** — Maintenance release\n\n*
  Bump dependencies to allow `async` 2.2\n* Fix a compatibility issue with Cabal-2.0\n\n**0.8.2.0**
  — Snapshot release\n\n* Add `getCookies` function that retrieves the cookies sent
  with the HTTP request when the browser window connects (to the websocket). [#137][]\n*
  Allow Electron process to be accessed from JavaScript FFI. [#200][] This means that
  Threepenny is now more useful when used with the [Electron][] framework, see [doc/electron.md](doc/electron.md)
  for more information on that.\n* Bump dependencies to allow `file-embed` 0.0.10.1\n\n
  \ [#137]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/137\n  [#200]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/200\n  [electron]: https://electron.atom.io\n\n**0.8.1.0**
  — Snapshot release\n\n* Improve documentation and handling of call buffering (`CallBufferMode`).
  The default call buffer mode was documented incorrectly, it was  `BufferRun` and
  is now `FlushOften`. [#163][], [#191][], [#192][]\n* Add new default `CallBufferMode`:
  `FlushOften`. This mode is like `BufferRun`, but will flush the buffer at every
  `onEvent` as well, leading to less confusion when using the library in most circumstances.
  [#191][]\n* Add new `CallBufferMode`: `FlushPeriodically`. This mode is like `BufferRun`,
  but will flush the call buffer every 300ms if nonempty. [#192][]\n* Add support
  for [custom DOM events][customevent] (`CustomEvent`). [#196][]\n* Expose JavaScript
  FFI functions `toJSObject` and `liftJSWindow` in `Graphics.UI.Threepenny`. This
  is useful for linking the lifetime of JavaScript objects to the lifetime of `Element`.
  [#181][]\n* Use `jsLog` parameter to log exceptions. [#185][]\n* Update bundled
  jQuery to version 3.2.1. [#186][]\n\n  [customevent]: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n
  \ [#163]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/163\n  [#181]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/181\n  [#185]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/185\n
  \ [#186]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/186\n  [#191]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/191\n  [#192]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/192\n
  \ [#196]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/196\n\n\n**0.8.0.1**
  — Maintenance release\n\n* Bump dependencies for compatibility with GHC-8.2.1\n*
  Bump dependencies to allow `websockets` 0.12\n\n**0.8.0.0** — Snapshot release\n\nGraphics.UI.Threepenny\n\n*
  Fix `getElementById` to properly return `Nothing` when no element with the given
  `id` attribute is present. [#129][].\n* Bring back `loadFile` and `loadDirectory`.
  [#110][]\n* Add `MonadUI` typeclass for easier lifting in custom monad stacks. [#173][]\n\nJavaScript
  FFI\n\n* Implement batching / buffering for FFI calls. [#131][]. Several calls to
  the `runFunction` function may now buffer the JavaScript code and send it to the
  browser window in a single message at a later time. This improves performance considerably.\n*
  Clarify semantics for exceptions. See the file [`doc/javascript-ffi.md`](doc/javascript-ffi.md)
  for more.\n    * The `UI` monad now supports exception handling by being an instance
  of the type classes `MonadThrow` and `MonadCatch`.\n    * The function `callFunction`
  can now throw a `JavaScriptException` exception to the Haskell side.\n    * The
  function `runFunction` now terminates the connection to the browser window whenever
  the JavaScript code within throws an exception.\n* Exceptions in the `UI` monad
  that are not handled are now printed properly for better debugging. [#145][]\n*
  Clarify semantics of the `disconnect` event. It is now triggered more reliably.
  [#133][].\n* Remove unnecessary client response when exporting event handlers. [#131][].\n*
  Add option `jsWindowReloadOnDisconnect` to reload the browser window [#130][] whenever
  the WebSocket connection is broken. This is useful for e.g. mobile devices, which
  tend to disconnect WebSocket connections very often.\n\n  [#110]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/110\n
  \ [#129]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/129\n  [#130]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/130\n  [#133]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/133\n
  \ [#145]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/145\n  [#173]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/173\n\nDependencies\n\n*
  Add dependency on `exceptions`\n\n**0.7.0.2** — Maintenance release\n\n* Bump dependencies
  to allow `aeson` 1.2\n* Bump dependencies to allow `websockets` 0.11\n\n**0.7.0.1**
  — Maintenance release\n\n* Bump dependencies to allow `aeson` 1.1\n* Bump dependencies
  to allow `vector` 0.12\n* Bump dependencies to allow `websockets` 0.10\n\n**0.7.0.0**
  — Maintenance and snapshot release\n\n* JavaScript FFI: Reduce communication from
  browser to server when creating `Element`s.\n    New function `unsafeCreateJSObject`
  to create JavaScript objects without\n    waiting for a client response. [#131][]\n*
  JavaScript FFI: Implement escape sequence '%%' when calling JavaScript functions.
  [#132][].\n* Change type of `onEvent` function to allow unregistering events.\n*
  Add function `timestamp` for simple performance measurements.\n* Update JavaScript
  dependencies to jQuery 2.2.3\n* Adapt to GHC 8.0.1. [#138][]\n* Bump dependencies
  to allow `aeson` 1.0\n* Bump dependencies to allow `data-default` 0.7\n* Bump dependencies
  to allow `snap-core` 1.0 and `snap-server` 1.0\n* Bump dependencies to allow `template-haskell`
  2.11\n* Bump dependencies to allow `websockets-snap` 0.10\n\n  [#131]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/131\n
  \ [#132]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/132\n  [#138]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/138\n\n**0.6.0.6** — Maintenance
  release\n\n* Bump dependencies to allow `base` 4.9\n* Bump dependencies to allow
  `aeson` 0.11\n\n**0.6.0.5** — Maintenance release\n\n* Bump dependencies to allow
  `async` 2.1\n* Bump dependencies to allow `transformers` 0.5\n\n**0.6.0.4** — Maintenance
  release.\n\n* Elements that have become unreachable, for instance because they have
  been removed from the DOM and are no longer reachable in the Haskell code, will
  be garbage collected again. Fix [#109][], [#113][].\n* Adjust dependencies.\n* Add
  `<meta>` tag to indicate UTF8 encoding in html file. [#116][]\n\n  [#113]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/113\n
  \ [#109]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/109\n  [#116]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/116\n\n**0.6.0.3** — Maintenance
  release.\n\n* Temporary fix for #109, which was causing event handlers to be discarded.
  Unfortunately, this means that elements are currently not garbage collected after
  they have been removed from the DOM tree.\n\n**0.6.0.2** — Maintenance release.\n\n*
  Remove unused direct dependencies, in particular\n** attoparsec-enumerator\n** utf8-string\n**
  MonadCatchIO-transformers\n** time\n\n**0.6.0.1** — Maintenance release.\n\n* The
  `ADDR` environment variable is now parsed correctly.\n* Now builds on GHC 7.8 and
  GHC 7.10\n* The example source code in the `samples` folder has been reorganized
  and consolidated.\n\n**0.6.0.0** — Snapshot release.\n\n* The internals of the JavaScript
  FFI has been reimplemented completely. A new module `Foreign.JavaScript` exports
  a bare JavaScript FFI in case you want to write a custom GUI framework. However,
  the module `Graphics.UI.Threepenny` is *not* compatible with it, even though it
  builds on top of it.\n* The fields of `Config` type for server configuration are
  now prefixed with `js` instead of `tp`. Example: `jsPort`, `jsStatic`.\n* The functions
  `loadFile` and `loadDirectory` have been *removed*, as I felt that the `jsStatic`
  option is sufficient for most use cases.\n\n**0.5.0.0** — Snapshot release.\n\n*
  Possibility to specify IP address to bind the server to.\n* FFI now supports callbacks
  into Haskell. Remove `callDeferredFunction` function.\n* `Graphics.UI.Threepenny.Canvas.SVG`
  for creating SVG elements and attributes.\n* 2D graphics API in `Graphics.UI.Threepenny.Canvas`
  is beginning to grow.\n* `Bool` is now correctly marshalled to JavaScript.\n* `Text`
  can now be marshalled to JavaScrtip.\n\n**0.4.2.0** — Maintenance release.\n\n*
  Dependency `bytestring >=0.9.2` is now implemented correctly.\n* Allow newer versions
  of `aeson` dependency.\n* Allow newer versions of `network`, `transformers` and
  `template-haskell` dependencies.\n* Helper scripts in the `samples` directory now
  assume that you use a cabal sandbox for development.\n* The `UI` monad is now an
  instance of the `Applicative` class.\n\n**0.4.1.0** — Maintenance release.\n\n*
  Dependency on `text` package now from version 0.11 to 1.1.*.\n* Dependency on `aeson`
  package replaces the former dependency on the `json` package.\n* Unicode characters
  are now transmitted correctly to the browser. #75, #62.\n* Change default port number
  to 8023. #64\n\n**0.4.0.2** — Bugfix release.\n\n* Fix CSS bug for `grid` function.\n\n**0.4.0.1**
  — Maintenance release.\n\n* Adjust package dependencies.\n\n**0.4.0.0** — Snapshot
  release.\n\n* New `UI` monad for easier JavaScript FFI and recursion in FRP.\n*
  Garbage collection for DOM elements. (Unfortunately, this doesn't support using
  custom HTML files anymore, see [issue #60][#60].)\n* First stab at widgets.\n* Bump
  dependencies to allow `websockets` 0.8\n\n  [#60]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/60\n\n**0.3.0.0**
  — Snapshot release.\n\n* Browser communication with WebSockets.\n* First stab at
  FRP integration.\n\n**0.2.0.0** — Snapshot release.\n\n* First stab at easy JavaScript
  FFI.\n\n**0.1.0.0**\n\n* Initial release.\n\n\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.9.2 && <0.11'
  stm: ! '>=2.2 && <2.6'
  base: ! '>=4.6 && <4.13'
  unordered-containers: ==0.2.*
  text: ! '>=0.11 && <1.3'
  filepath: ! '>=1.3.0 && <1.5.0'
  async: ! '>=2.0 && <2.3'
  websockets: (>=0.8 && <0.12.5) || (>0.12.5.0 && <0.13)
  data-default: ! '>=0.5.0 && <0.8'
  containers: ! '>=0.4.2 && <0.7'
  snap-server: ! '>=0.9.0 && <1.2'
  websockets-snap: ! '>=0.8 && <0.11'
  snap-core: ! '>=0.9.0 && <1.1'
  vault: ==0.3.*
  hashable: ! '>=1.1.0 && <1.3'
  file-embed: ! '>=0.0.10 && <0.1'
  transformers: ! '>=0.3.0 && <0.6'
  deepseq: ! '>=1.3.0 && <1.5'
  aeson: (>=0.7 && <0.10) || ==0.11.* || (>=1.0 && <1.5)
  template-haskell: ! '>=2.7.0 && <2.15'
  safe: ==0.3.*
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.1.0'
- '0.4.2.0'
- '0.5.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.6.0.4'
- '0.6.0.5'
- '0.6.0.6'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.8.0.0'
- '0.8.0.1'
- '0.8.1.0'
- '0.8.2.0'
- '0.8.2.1'
- '0.8.2.2'
- '0.8.2.3'
- '0.8.2.4'
- '0.8.3.0'
author: Heinrich Apfelmus
latest: '0.8.3.0'
description-type: markdown
description: ! "[![Travis Build Status](https://travis-ci.org/HeinrichApfelmus/threepenny-gui.svg)](https://travis-ci.org/HeinrichApfelmus/threepenny-gui)\n[![AppVeyor
  Build Status](https://ci.appveyor.com/api/projects/status/github/HeinrichApfelmus/threepenny-gui?svg=true)](https://ci.appveyor.com/project/HeinrichApfelmus/threepenny-gui)\n[![Hackage](https://img.shields.io/hackage/v/threepenny-gui.svg)](https://hackage.haskell.org/package/threepenny-gui)\n[![Stackage
  LTS](http://stackage.org/package/threepenny-gui/badge/lts)](http://stackage.org/lts/package/threepenny-gui)\n[![Stackage
  Nightly](http://stackage.org/package/threepenny-gui/badge/nightly)](http://stackage.org/nightly/package/threepenny-gui)\n\n#
  Threepenny-GUI\n\n### What's this?\n\nThreepenny is a GUI framework written in Haskell
  that uses the web browser as a display. It's very easy to install. See the\n\n  [**Project
  homepage**](http://wiki.haskell.org/Threepenny-gui)\n\nfor more information on what
  it does and can do for you as a library user.\n\n### Examples\n\nThe library comes
  with many examples, which can be found in the [samples](samples#readme) folder.
  Follow the link for more information on how to run them.\n\n### Desktop Apps\n\nThreepenny
  is mainly intended for writing GUI applications that run on the local network, and
  it relies on a web browser being installed. You can drop the latter requirement
  and integrate it a bit more tightly with you desktop environment by using the Electron
  framework. There is no fully automated support for this yet, but the documentation
  includes a [tutorial on how to use Electron with Threepenny](doc/electron.md).\n\n#
  Technical overview\n\n### JavaScript FFI\n\nA program written with Threepenny is
  essentially a small web server that displays the user interface as a web page to
  any browser that connects to it.\n\nThe web server displays a HTML page, which in
  turn establishes WebSocket connection with the server. The server uses this connection
  to send JavaScript code that is executed in the client. In the library, this appears
  as a JavaScript Foreign Function Interface (FFI). The documentation includes [more
  information on the design of the JavaScript FFI](doc/javascript-ffi.md).\n\n###
  Latency\n\nThe frequent communication between browser and server\nmeans that Threepenny
  is best used as a GUI server running on localhost. You can use it on your local
  network as well.\n\nIf you want to reduce latency, the best option is to generate
  larger blocks of JavaScript\ncode and run them on the client. Consider this approach
  similar to [a\nshading language](http://en.wikipedia.org/wiki/Shading_language).\nYou
  can import any JavaScript library and use it from the JavaScript FFI.\n\nIf you
  don't want to write JavaScript, then you could choose a Haskell-like language like
  [PureScript](http://www.purescript.org), [Fay](https://github.com/faylang/fay/wiki).
  You can also directly compile Haskell to JavaScript with [Haste](https://github.com/valderman/haste-compiler)
  or [GHCJS](https://github.com/ghcjs/ghcjs).\n\n# Future ideas\n\n### HTML rendering
  mode\n\nIt might be nice in the case of search engines to merely generate a DOM
  and render it, so that search engines can read the pages.\n\n### UI libraries\n\n[qooxdoo](http://qooxdoo.org/demo)
  — provides a feature-complete widget set. One could wrap this in a type-safe API
  from Threepenny and get a complete, stable UI framework for free. Most of the \"immediate
  feedback\" like dragging things here, switching tabs there, are taken care of by
  the framework. All that would be left would be to provide the domain configuration
  and business/presentation logic.\n\nThere are plenty more like this, but this is
  the first that springs to\nmind that is good.\n\n# Contributors\n\nMany thanks to
  everyone who contributed, provided feedback or simply wrote an application using
  Threepenny! In particular, many thanks to:\n\nHeinrich Apfelmus, Daniel Austin,
  Jeremy Barisch-Rooney, Steve Bigham, Simon Jakobi, Ken Friis Larsen, Daniel Mlot,
  Tim C. Schröder [*and many others*](CONTRIBUTORS)\n\nSpecial thanks to *Simon Jakobi*
  for co-maintaining this project.\n\nSpecial thanks to *Chris Done* for starting
  the precursor project Ji.\n"
license-name: BSD3
