homepage: http://wiki.haskell.org/Threepenny-gui
changelog-type: markdown
hash: ee95b39055572c62e2aadbda07cd47290142fa9c31d590daec69c7e13535bdb8
test-bench-deps: {}
maintainer: Heinrich Apfelmus <apfelmus at quantentunnel dot de>
synopsis: GUI framework that uses the web browser as a display.
changelog: ! "## Changelog for the `threepenny-gui` package\r\n\r\n**0.8.2.1** — Maintenance
  release\r\n\r\n* Bump dependencies to allow `async` 2.2\r\n* Fix a compatibility
  issue with Cabal-2.0\r\n\r\n**0.8.2.0** — Snapshot release\r\n\r\n* Add `getCookies`
  function that retrieves the cookies sent with the HTTP request when the browser
  window connects (to the websocket). [#137][]\r\n* Allow Electron process to be accessed
  from JavaScript FFI. [#200][] This means that Threepenny is now more useful when
  used with the [Electron][] framework, see [doc/electron.md](doc/electron.md) for
  more information on that.\r\n* Bump dependencies to allow `file-embed` 0.0.10.1\r\n\r\n
  \ [#137]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/137\r\n  [#200]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/200\r\n  [electron]: https://electron.atom.io\r\n\r\n**0.8.1.0**
  — Snapshot release\r\n\r\n* Improve documentation and handling of call buffering
  (`CallBufferMode`). The default call buffer mode was documented incorrectly, it
  was  `BufferRun` and is now `FlushOften`. [#163][], [#191][], [#192][]\r\n* Add
  new default `CallBufferMode`: `FlushOften`. This mode is like `BufferRun`, but will
  flush the buffer at every `onEvent` as well, leading to less confusion when using
  the library in most circumstances. [#191][]\r\n* Add new `CallBufferMode`: `FlushPeriodically`.
  This mode is like `BufferRun`, but will flush the call buffer every 300ms if nonempty.
  [#192][]\r\n* Add support for [custom DOM events][customevent] (`CustomEvent`).
  [#196][]\r\n* Expose JavaScript FFI functions `toJSObject` and `liftJSWindow` in
  `Graphics.UI.Threepenny`. This is useful for linking the lifetime of JavaScript
  objects to the lifetime of `Element`. [#181][]\r\n* Use `jsLog` parameter to log
  exceptions. [#185][]\r\n* Update bundled jQuery to version 3.2.1. [#186][]\r\n\r\n
  \ [customevent]: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\r\n
  \ [#163]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/163\r\n  [#181]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/181\r\n  [#185]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/185\r\n
  \ [#186]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/186\r\n  [#191]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/191\r\n  [#192]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/192\r\n
  \ [#196]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/196\r\n\r\n\r\n**0.8.0.1**
  — Maintenance release\r\n\r\n* Bump dependencies for compatibility with GHC-8.2.1\r\n*
  Bump dependencies to allow `websockets` 0.12\r\n\r\n**0.8.0.0** — Snapshot release\r\n\r\nGraphics.UI.Threepenny\r\n\r\n*
  Fix `getElementById` to properly return `Nothing` when no element with the given
  `id` attribute is present. [#129][].\r\n* Bring back `loadFile` and `loadDirectory`.
  [#110][]\r\n* Add `MonadUI` typeclass for easier lifting in custom monad stacks.
  [#173][]\r\n\r\nJavaScript FFI\r\n\r\n* Implement batching / buffering for FFI calls.
  [#131][]. Several calls to the `runFunction` function may now buffer the JavaScript
  code and send it to the browser window in a single message at a later time. This
  improves performance considerably.\r\n* Clarify semantics for exceptions. See the
  file [`doc/javascript-ffi.md`](doc/javascript-ffi.md) for more.\r\n    * The `UI`
  monad now supports exception handling by being an instance of the type classes `MonadThrow`
  and `MonadCatch`.\r\n    * The function `callFunction` can now throw a `JavaScriptException`
  exception to the Haskell side.\r\n    * The function `runFunction` now terminates
  the connection to the browser window whenever the JavaScript code within throws
  an exception.\r\n* Exceptions in the `UI` monad that are not handled are now printed
  properly for better debugging. [#145][]\r\n* Clarify semantics of the `disconnect`
  event. It is now triggered more reliably. [#133][].\r\n* Remove unnecessary client
  response when exporting event handlers. [#131][].\r\n* Add option `jsWindowReloadOnDisconnect`
  to reload the browser window [#130][] whenever the WebSocket connection is broken.
  This is useful for e.g. mobile devices, which tend to disconnect WebSocket connections
  very often.\r\n\r\n  [#110]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/110\r\n
  \ [#129]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/129\r\n  [#130]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/130\r\n  [#133]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/133\r\n
  \ [#145]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/145\r\n  [#173]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/173\r\n\r\nDependencies\r\n\r\n*
  Add dependency on `exceptions`\r\n\r\n**0.7.0.2** — Maintenance release\r\n\r\n*
  Bump dependencies to allow `aeson` 1.2\r\n* Bump dependencies to allow `websockets`
  0.11\r\n\r\n**0.7.0.1** — Maintenance release\r\n\r\n* Bump dependencies to allow
  `aeson` 1.1\r\n* Bump dependencies to allow `vector` 0.12\r\n* Bump dependencies
  to allow `websockets` 0.10\r\n\r\n**0.7.0.0** — Maintenance and snapshot release\r\n\r\n*
  JavaScript FFI: Reduce communication from browser to server when creating `Element`s.\r\n
  \   New function `unsafeCreateJSObject` to create JavaScript objects without\r\n
  \   waiting for a client response. [#131][]\r\n* JavaScript FFI: Implement escape
  sequence '%%' when calling JavaScript functions. [#132][].\r\n* Change type of `onEvent`
  function to allow unregistering events.\r\n* Add function `timestamp` for simple
  performance measurements.\r\n* Update JavaScript dependencies to jQuery 2.2.3\r\n*
  Adapt to GHC 8.0.1. [#138][]\r\n* Bump dependencies to allow `aeson` 1.0\r\n* Bump
  dependencies to allow `data-default` 0.7\r\n* Bump dependencies to allow `snap-core`
  1.0 and `snap-server` 1.0\r\n* Bump dependencies to allow `template-haskell` 2.11\r\n*
  Bump dependencies to allow `websockets-snap` 0.10\r\n\r\n  [#131]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/131\r\n
  \ [#132]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/132\r\n  [#138]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/138\r\n\r\n**0.6.0.6**
  — Maintenance release\r\n\r\n* Bump dependencies to allow `base` 4.9\r\n* Bump dependencies
  to allow `aeson` 0.11\r\n\r\n**0.6.0.5** — Maintenance release\r\n\r\n* Bump dependencies
  to allow `async` 2.1\r\n* Bump dependencies to allow `transformers` 0.5\r\n\r\n**0.6.0.4**
  — Maintenance release.\r\n\r\n* Elements that have become unreachable, for instance
  because they have been removed from the DOM and are no longer reachable in the Haskell
  code, will be garbage collected again. Fix [#109][], [#113][].\r\n* Adjust dependencies.\r\n*
  Add `<meta>` tag to indicate UTF8 encoding in html file. [#116][]\r\n\r\n  [#113]:
  https://github.com/HeinrichApfelmus/threepenny-gui/issues/113\r\n  [#109]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/109\r\n
  \ [#116]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/116\r\n\r\n**0.6.0.3**
  — Maintenance release.\r\n\r\n* Temporary fix for #109, which was causing event
  handlers to be discarded. Unfortunately, this means that elements are currently
  not garbage collected after they have been removed from the DOM tree.\r\n\r\n**0.6.0.2**
  — Maintenance release.\r\n\r\n* Remove unused direct dependencies, in particular\r\n**
  attoparsec-enumerator\r\n** utf8-string\r\n** MonadCatchIO-transformers\r\n** time\r\n\r\n**0.6.0.1**
  — Maintenance release.\r\n\r\n* The `ADDR` environment variable is now parsed correctly.\r\n*
  Now builds on GHC 7.8 and GHC 7.10\r\n* The example source code in the `samples`
  folder has been reorganized and consolidated.\r\n\r\n**0.6.0.0** — Snapshot release.\r\n\r\n*
  The internals of the JavaScript FFI has been reimplemented completely. A new module
  `Foreign.JavaScript` exports a bare JavaScript FFI in case you want to write a custom
  GUI framework. However, the module `Graphics.UI.Threepenny` is *not* compatible
  with it, even though it builds on top of it.\r\n* The fields of `Config` type for
  server configuration are now prefixed with `js` instead of `tp`. Example: `jsPort`,
  `jsStatic`.\r\n* The functions `loadFile` and `loadDirectory` have been *removed*,
  as I felt that the `jsStatic` option is sufficient for most use cases.\r\n\r\n**0.5.0.0**
  — Snapshot release.\r\n\r\n* Possibility to specify IP address to bind the server
  to.\r\n* FFI now supports callbacks into Haskell. Remove `callDeferredFunction`
  function.\r\n* `Graphics.UI.Threepenny.Canvas.SVG` for creating SVG elements and
  attributes.\r\n* 2D graphics API in `Graphics.UI.Threepenny.Canvas` is beginning
  to grow.\r\n* `Bool` is now correctly marshalled to JavaScript.\r\n* `Text` can
  now be marshalled to JavaScrtip.\r\n\r\n**0.4.2.0** — Maintenance release.\r\n\r\n*
  Dependency `bytestring >=0.9.2` is now implemented correctly.\r\n* Allow newer versions
  of `aeson` dependency.\r\n* Allow newer versions of `network`, `transformers` and
  `template-haskell` dependencies.\r\n* Helper scripts in the `samples` directory
  now assume that you use a cabal sandbox for development.\r\n* The `UI` monad is
  now an instance of the `Applicative` class.\r\n\r\n**0.4.1.0** — Maintenance release.\r\n\r\n*
  Dependency on `text` package now from version 0.11 to 1.1.*.\r\n* Dependency on
  `aeson` package replaces the former dependency on the `json` package.\r\n* Unicode
  characters are now transmitted correctly to the browser. #75, #62.\r\n* Change default
  port number to 8023. #64\r\n\r\n**0.4.0.2** — Bugfix release.\r\n\r\n* Fix CSS bug
  for `grid` function.\r\n\r\n**0.4.0.1** — Maintenance release.\r\n\r\n* Adjust package
  dependencies.\r\n\r\n**0.4.0.0** — Snapshot release.\r\n\r\n* New `UI` monad for
  easier JavaScript FFI and recursion in FRP.\r\n* Garbage collection for DOM elements.
  (Unfortunately, this doesn't support using custom HTML files anymore, see [issue
  #60][#60].)\r\n* First stab at widgets.\r\n* Bump dependencies to allow `websockets`
  0.8\r\n\r\n  [#60]: https://github.com/HeinrichApfelmus/threepenny-gui/issues/60\r\n\r\n**0.3.0.0**
  — Snapshot release.\r\n\r\n* Browser communication with WebSockets.\r\n* First stab
  at FRP integration.\r\n\r\n**0.2.0.0** — Snapshot release.\r\n\r\n* First stab at
  easy JavaScript FFI.\r\n\r\n**0.1.0.0**\r\n\r\n* Initial release.\r\n\r\n\r\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.9'
  bytestring: ! '>=0.9.2 && <0.11'
  stm: ! '>=2.2 && <2.5'
  base: ! '>=4.6 && <4.11'
  unordered-containers: ==0.2.*
  text: ! '>=0.11 && <1.3'
  filepath: ! '>=1.3.0 && <1.5.0'
  async: ! '>=2.0 && <2.3'
  websockets: ! '>=0.8 && <0.13'
  data-default: ! '>=0.5.0 && <0.8'
  containers: ! '>=0.4.2 && <0.6'
  snap-server: ! '>=0.9.0 && <1.1'
  websockets-snap: ! '>=0.8 && <0.11'
  snap-core: ! '>=0.9.0 && <1.1'
  vault: ==0.3.*
  network-uri: ! '>=2.6 && <2.7'
  hashable: ! '>=1.1.0 && <1.3'
  file-embed: ! '>=0.0.10 && <0.1'
  transformers: ! '>=0.3.0 && <0.6'
  deepseq: ! '>=1.3.0 && <1.5'
  aeson: (>=0.7 && <0.10) || ==0.11.* || (>=1.0 && <1.3)
  template-haskell: ! '>=2.7.0 && <2.13'
  safe: ==0.3.*
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.0.1'
- '0.4.0.0'
- '0.4.0.1'
- '0.4.0.2'
- '0.4.1.0'
- '0.4.2.0'
- '0.5.0.0'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.6.0.4'
- '0.6.0.5'
- '0.6.0.6'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.8.0.0'
- '0.8.0.1'
- '0.8.1.0'
- '0.8.2.0'
- '0.8.2.1'
author: Heinrich Apfelmus
latest: '0.8.2.1'
description-type: markdown
description: ! "[![Travis Build Status](https://travis-ci.org/HeinrichApfelmus/threepenny-gui.svg)](https://travis-ci.org/HeinrichApfelmus/threepenny-gui)\r\n[![AppVeyor
  Build Status](https://ci.appveyor.com/api/projects/status/github/HeinrichApfelmus/threepenny-gui?svg=true)](https://ci.appveyor.com/project/HeinrichApfelmus/threepenny-gui)\r\n[![Hackage](https://img.shields.io/hackage/v/threepenny-gui.svg)](https://hackage.haskell.org/package/threepenny-gui)\r\n[![Stackage
  LTS](http://stackage.org/package/threepenny-gui/badge/lts)](http://stackage.org/lts/package/threepenny-gui)\r\n[![Stackage
  Nightly](http://stackage.org/package/threepenny-gui/badge/nightly)](http://stackage.org/nightly/package/threepenny-gui)\r\n\r\n#
  Threepenny-GUI\r\n\r\n### What's this?\r\n\r\nThreepenny is a GUI framework written
  in Haskell that uses the web browser as a display. It's very easy to install. See
  the\r\n\r\n  [**Project homepage**](http://wiki.haskell.org/Threepenny-gui)\r\n\r\nfor
  more information on what it does and can do for you as a library user.\r\n\r\n###
  Examples\r\n\r\nThe library comes with many examples, which can be found in the
  [samples](samples#readme) folder. Follow the link for more information on how to
  run them.\r\n\r\n### Desktop Apps\r\n\r\nThreepenny is mainly intended for writing
  GUI applications that run on the local network, and it relies on a web browser being
  installed. You can drop the latter requirement and integrate it a bit more tightly
  with you desktop environment by using the Electron framework. There is no fully
  automated support for this yet, but the documentation includes a [tutorial on how
  to use Electron with Threepenny](doc/electron.md).\r\n\r\n# Technical overview\r\n\r\n###
  JavaScript FFI\r\n\r\nA program written with Threepenny is essentially a small web
  server that displays the user interface as a web page to any browser that connects
  to it.\r\n\r\nThe web server displays a HTML page, which in turn establishes WebSocket
  connection with the server. The server uses this connection to send JavaScript code
  that is executed in the client. In the library, this appears as a JavaScript Foreign
  Function Interface (FFI). The documentation includes [more information on the design
  of the JavaScript FFI](doc/javascript-ffi.md).\r\n\r\n### Latency\r\n\r\nThe frequent
  communication between browser and server\r\nmeans that Threepenny is best used as
  a GUI server running on localhost. You can use it on your local network as well.\r\n\r\nIf
  you want to reduce latency, the best option is to generate larger blocks of JavaScript\r\ncode
  and run them on the client. Consider this approach similar to [a\r\nshading language](http://en.wikipedia.org/wiki/Shading_language).\r\nYou
  can import any JavaScript library and use it from the JavaScript FFI.\r\n\r\nIf
  you don't want to write JavaScript, then you could choose a Haskell-like language
  like [PureScript](http://www.purescript.org), [Fay](https://github.com/faylang/fay/wiki).
  You can also directly compile JavaScript to Haskell with [Haste](https://github.com/valderman/haste-compiler)
  or [GHCJS](https://github.com/ghcjs/ghcjs).\r\n\r\n# Future ideas\r\n\r\n### HTML
  rendering mode\r\n\r\nIt might be nice in the case of search engines to merely generate
  a DOM and render it, so that search engines can read the pages.\r\n\r\n### UI libraries\r\n\r\n[qooxdoo](http://qooxdoo.org/demo)
  — provides a feature-complete widget set. One could wrap this in a type-safe API
  from Threepenny and get a complete, stable UI framework for free. Most of the \"immediate
  feedback\" like dragging things here, switching tabs there, are taken care of by
  the framework. All that would be left would be to provide the domain configuration
  and business/presentation logic.\r\n\r\nThere are plenty more like this, but this
  is the first that springs to\r\nmind that is good.\r\n\r\n# Contributors\r\n\r\nMany
  thanks to everyone who contributed, provided feedback or simply wrote an application
  using Threepenny! In particular, many thanks to:\r\n\r\nHeinrich Apfelmus, Daniel
  Austin, Jeremy Barisch-Rooney, Steve Bigham, Simon Jakobi, Ken Friis Larsen, Daniel
  Mlot, Tim C. Schröder [*and many others*](CONTRIBUTORS)\r\n\r\nSpecial thanks to
  *Simon Jakobi* for co-maintaining this project.\r\n\r\nSpecial thanks to *Chris
  Done* for starting the precursor project Ji.\r\n"
license-name: BSD3
