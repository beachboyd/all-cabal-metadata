homepage: https://github.com/jkarni/th-alpha
changelog-type: ''
hash: 2c1b49852183db69e1543fe7110a44296e62b1e231a197e8aad10e8f010f70fa
test-bench-deps:
  base: ! '>=4 && <5'
  th-alpha: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: ! '>=0.8'
  template-haskell: -any
  derive: -any
maintainer: Julian K. Arni <jkarni@gmail.com>
synopsis: Alpha equivalence for TH Exp
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  containers: -any
  th-desugar: ! '>=1.4 && <1.7'
  mtl: ! '>=2 && <3'
  mmorph: ! '>1 && <2'
  transformers: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
author: Julian K. Arni
latest: 0.2.1.0
description-type: haddock
description: ! 'Compare TH expressions (or clauses, patterns, etc.) for alpha equivalence.

  That is, compare for equality modulo the renaming of bound variables.


  > areExpAEq [| \x -> x |] [| \y -> y |]

  > -- True


  > do

  >    let x = mkName "x"

  >    let y = mkName "y"

  >    runQ $ (LamE [VarP x] (VarE x)) @= (LamE [VarP y] (VarE y))

  > -- True


  This can be useful when for instance testing libraries that use Template

  Haskell - usually correctness is only defined up to alpha equivalence.'
license-name: BSD-3-Clause
