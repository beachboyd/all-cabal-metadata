homepage: https://github.com/stephentetley/zmidi-core
changelog-type: text
hash: 83fbf62b43aeb57d204b3a208b490d648701cc004f536044a54ef6d4491b0f1f
test-bench-deps: {}
maintainer: Stephen Tetley <stephen.tetley@gmail.com>
synopsis: Read and write MIDI files.
changelog: ! "\n0.8.1 to 0.8.2:\n\n  * Updated to compile with ghc-8.4. Thanks to
  Evan Laforge.\n\n0.8.0 to 0.8.1:\n\n  * Fixed error with missing CPP directive in
  ZMidi.Core.Pretty.\n\n\n0.7.0 to 0.8.0:\n\n  * Updated to compile without errors
  with GHC 7.10.\n\n\n0.6.0 to 0.7.0:\n\n  * Changed @ChannelPrefix@ constructor to
  have a single \n    argument - channel number (previously it stored a constant \n
  \   tag 0x01 as well as channel number).\n\n  * Added @SysExCont@ and @SysExEscape@
  constructors to the \n    @MidiSysExEvent@ data type.\n\n  * Added new pretty printers
  - @Csv@ based on @midicsv@ and \n    @Ascii@ based on the ASCII MIDI representation
  in the book \n    Beyond Midi (the zmidi ASCII representation is simplified).\n
  \   The demo application @MidiPrint@ now allows choice of pretty\n    printer.\n\n
  \ * @printMidiHeader@ and @printMidiTrack@ from @Pretty@ changed\n    to MidiFiles
  as arguments, @printMidi@ has now become \n    @putMidi@.\n\n\n0.5.0 to 0.6.0:\n
  \ \n  * Extended the parser and changed the syntax tree to interpret \n    MIDI
  Running Status. \n   \n  * Added a module @ZMidi.Core.Canonical@ to translate MidiFiles\n
  \   to a canonical form where any shorthand NoteOff introduced by \n    Running
  Status is expanded to regular NoteOn and NoteOff \n    events (with Running Status
  set, MidiFiles can signal NoteOff \n    events as another NoteOn with 0 channel
  velocity).\n  \n  * Added a hack to the pretty printer to stop printing ASCII\n
  \   chars greater than 164 causing an error when printing to \n    stdout.\n  \n\n0.4.0
  to 0.5.0:\n\n  * Changed order of @MidiVoiceEnvent@ constructors so the Ord \n    instance
  follows the order of the /tag/ in the MIDI binary\n    representation.\n \n  * Changed
  @MidiSysCommonEvent@ to have different constructors \n    for unidentified F4 anf
  F5 events.   \n\n  * Changed @MidiSysRealTimeEvent@ to have different constructors\n
  \   for unidentified F9 and FD events.  \n\n  * Added more Haddock docs.\n\n  *
  Various internal code changes.\n\n\n0.3.0 to v0.4.0:\n\n  * Added new constructors
  to @MidiMetaEvent@ for MidiPort and \n    MetaOther. MetaOther recognizes otherwise
  unrecognized events\n    improving the robustness of the parser. Similarly a new
  \n    /other/ constructor has been added to @MidiScaleType@ to \n    avoid parse
  errors.\n\n\n0.2.1 to 0.3.0:\n\n  * Revised naming of the MIDI data types. All data
  types now have \n  the prefix Midi (previously only MidiFile followed this scheme).\n
  \ The rationale for this is client software, that might want a \n  higher-level
  representation, is then free to use the more \n  generic names Track, Message, etc.\n\n
  \ * @DeltaTime@ made a newtype wrapper rather than a type synonym.\n\n  * Renamed
  the pretty print functions @track@ to @printMidiTrack@ \n    and @header@ to @printMidiHeader@.\n\n
  \ * Moved internal dataypes (SplitByte, Varlen) into a private \n    module.\n\n0.2.0
  to 0.2.1:\n\n  * Added Show class constraints to various type signatures to \n    accommodate
  changes to Num superclass hierarchy in GHC 7.4.\n    Thanks to Rémy Mouëza for the
  patches.\n\n0.1.0 to 0.2.0:\n\n  * Added a top-level /shim/ module to import all
  the exposed\n    modules. Added a version number module\n\n0.1.0:\n\n  * Initial
  release.\n"
basic-deps:
  bytestring: -any
  base: <5
  containers: -any
  binary: ! '>=0.5'
all-versions:
- '0.1.0'
- '0.2.0'
- '0.2.1'
- '0.3.0'
- '0.4.0'
- '0.5.0'
- '0.6.0'
- '0.7.0'
- '0.8.0'
- '0.8.1'
- '0.8.2'
author: ''
latest: '0.8.2'
description-type: haddock
description: ! '

  Minimalist library to read and write MIDI files, with

  dependencies only on ByteString, Containers and Data.Binary.


  Changelog:


  v0.8.1 to v0.8.2:


  * Updated to compile with ghc-8.4. Thanks to Evan Laforge.


  v0.8.0 to v0.8.1:


  * Fixed error with missing CPP directive in ZMidi.Core.Pretty.


  v0.7.0 to v0.8.0:


  * Updated to compile without errors with GHC 7.10.


  v0.6.0 to v0.7.0:


  * Changed @ChannelPrefix@ constructor to have a single

  argument - channel number (previously it stored a constant

  tag 0x01 as well as channel number).


  * Added @SysExCont@ and @SysExEscape@ constructors to the

  @MidiSysExEvent@ data type.


  * Added new pretty printers - @Csv@ based on @midicsv@ and

  @Ascii@ based on the ASCII MIDI representation in the book

  Beyond Midi (the zmidi ASCII representation is simplified).

  The demo application @MidiPrint@ now allows choice of pretty

  printer.


  * @printMidiHeader@ and @printMidiTrack@ from @Pretty@ changed

  to MidiFiles as arguments, @printMidi@ has now become

  @putMidi@.


  v0.5.0 to v0.6.0:


  * Extended the parser and changed the syntax tree to interpret

  MIDI Running Status.


  * Added a module @ZMidi.Core.Canonical@ to translate MidiFiles

  to a canonical form where any shorthand NoteOff introduced by

  Running Status is expanded to regular NoteOn and NoteOff

  events (with Running Status set, MidiFiles can signal NoteOff

  events as another NoteOn with 0 channel velocity).


  * Added a hack to the pretty printer to stop printing ASCII

  chars greater than 164 causing an error when printing to

  stdout.


  For older changes see - CHANGES file.

'
license-name: BSD3
