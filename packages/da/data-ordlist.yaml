homepage: ''
changelog-type: markdown
hash: b431053fc40aec78aa0829c0f75f09661d7c4e8ce2c9465600baf0c207b522b0
test-bench-deps: {}
maintainer: Leon P Smith <leon@melding-monads.com>
synopsis: Set and bag operations on ordered lists
changelog: ! "Version 0.4.7.0:  (2014-11-19)\n\n  * `foldt` tweaked to be made slightly
  lazier,  thus also affecting\n    `mergeAll`,  `mergeAllBy`, `unionAll`, and `unionAllBy`.
  \ Thanks\n    goes to Will Ness for providing the following example that\n    previously
  entered into an infinite non-productive loop:\n\n~~~\n    let ps=3:minus[5,7..]
  (unionAll [[p*p,p*(p+2)..]|p<-ps]) in take 100 (2:ps)\n~~~\n\n    Note that the
  _de facto_ semantics of `foldt` has been modified\n    slightly:  instead of computing
  the sum of a list,  it computes\n    the sum of a list plus zero.   Of course,  if
  zero is a true\n    identity of plus,  then this change is of no semantic consequence.\n\nVersion
  0.4.6.1:  (2014-04-19)\n\n  * Added strictness annotations inside of sortOn and
  nubSortOn\n\n  * Tweaked documentation of nubSort\n\n  * Conditionally reexport
  sortOn from Data.List when available.\n    (See [GHC commit 44512e3c](https://ghc.haskell.org/trac/ghc/changeset/44512e3c855d8fb36ab6580f4f97f842ebcf4c6c/ghc))\n\nVersion
  0.4.6:  (2014-02-15)\n\n  * Generalized type signature of `isectBy`, `minusBy`,
  and `minusBy'`,\n    leaving the definition unchanged.\n\n  * Made the documentation
  of `union` more precise.\n\nVersion 0.4.5:  (2012-03-12)\n\n  * New function, `minus'`\n\n
  \ * Exported `foldt` and `foldt'`\n\n  * Documentation improvements\n\n  * Reverted
  the implementation of `mergeAll` and `unionAll` to version\n    0.4.2 because the
  simplified implementation would force the head of\n    the inner list appearing
  at the next highest power of 2 well before\n    it was necessary to do so.\n\nVersion
  0.4.4:  (2010-12-24)\n\n  * Simplified the implementation of `mergeAll` and `unionAll`
  based on\n    comments from Will Ness.\n\n    <http://www.haskell.org/pipermail/haskell-cafe/2010-December/087587.html>\n\nVersion
  0.4.3:  (2010-03-02)\n\n  * Improved the implementation of `nubSort`,  mirroring
  the improvements made\n    to `Data.List.sort` in GHC-6.13.20091224 and first released
  in GHC-7.0.1.\n    Thanks to Gwern Branwen for calling the change to my attention.
  \ Instead\n    of initially breaking the input list into singletons before the merge\n
  \   process,  the improved version breaks the input list into monotonic runs.\n\n
  \   <http://www.haskell.org/pipermail/libraries/2010-March/013066.html>\n\n  * Minor
  formatting improvements in the Haddock documentation.\n\nVersion 0.4.2:  (2010-02-18)\n\n
  \ * Fixed non-productive loop in `unionAll` when applied to an infinite list\n    of
  lists.  Thanks to Omar Antolín Camarena for reporting the bug and\n    Heinrich
  Apfelmus for some useful comments.\n\n    <http://www.haskell.org/pipermail/haskell-cafe/2010-February/073403.html>\n
  \   <http://www.haskell.org/pipermail/haskell-cafe/2010-February/073437.html>\n\n
  \ * Added regression test to test suite.\n\nVersion 0.4.1:  (2010-02-17)\n\n  *
  Simplified the implementation of `mergeAll` and `unionAll` thanks\n    to some pointers
  by Heinrich Apfelmus.  This introduced an infinite\n    non-productive loop into
  `unionAll`,  which was fixed in 0.4.2 without\n    giving up the simplifications.\n\n
  \   <http://www.haskell.org/pipermail/haskell-cafe/2010-February/073356.html>\n\n
  \ * Minor documentation fixes\n\nVersion 0.4:    (2010-02-15)\n\n  * The \"CHANGES\"
  file was added to document the changes between releases.\n\n  * Documentation Improvements\n\n
  \ * A rough first pass at a test suite\n\n  * The functions `mergeAll` and `unionAll`
  were added.  They operate\n    on a possibly infinite list of possibly infinite
  ordered lists; assuming\n    the heads of the lists are ordered.\n\n    Thanks goes
  to Omar Antolín Camarena, Heinrich Apfelmus, and Dave Bayer.\n\n    Omar Antolín
  Camarena suggested the addition,  located the article\n    used as the basis for
  the implementation,  and was quite helpful with\n    testing and debugging.\n\n
  \   Heinrich Apfelmus wrote his \"Implicit Heaps\" article, where he\n    simplified
  an algorithm by Dave Bayer.  It is this article that forms\n    the basis of our
  implementation.\n\n    <http://apfelmus.nfshost.com/articles/implicit-heaps.html>\n\n
  \   Dave Bayer posted his 'venturi' implementation to the haskell-cafe\n    mailing
  list on 2007 Jul 22.  It also appears as \"BayerPrimes.hs\"\n    inside of Melissa
  O'Neill's \"haskell-primes.zip\":\n\n    <http://www.haskell.org/pipermail/haskell-cafe/2007-July/029391.html>\n
  \   <http://www.cs.hmc.edu/~oneill/code/haskell-primes.zip>\n\nVersion 0.2:    (2010-02-07)\n\n
  \ * The module name was changed from `Data.OrdList` to `Data.List.Ordered`\n\n  *
  Fixed bugs in `insertSetBy`,  `insertBagBy`,  and `nub`.  The insertion\n    functions
  assumed reversed lists, while `nub` failed to remove duplicates.\n\n    Thanks to
  Topi Karvonen for reporting the first issue!\n\n  * Changed semantics of `insertSetBy`
  slightly:  the new version replaces an\n    element if it is already there.  If
  the old semantics turns out to be\n    important,  a new function can be added at
  a later date.\n\n  * Changed semantics of `nubBy`: the new version negates the binary
  relation,\n    so that `new_nubBy f == old_nubBy (not . f)`.  It is now in better
  keeping\n    with the spirit of the rest of the library,  and mades the bug in `nub`\n
  \   more obvious.\n\n  * Better documentation,  I hope.  At the very least, the
  process of\n    documenting `nubBy` revealed the bug in `nub`.\n\n\nVersion 0.0.1:
  \ (2009-07-10)\n\n  * The initial release, sadly, did not contain the source file\n\nVersion
  0.0:    (2009-07-10)\n\n  * Initial Release\n"
basic-deps:
  base: ! '>=2 && <5'
all-versions:
- '0.2'
- '0.4'
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.6.1
- 0.4.7.0
author: Leon P Smith <leon@melding-monads.com>
latest: 0.4.7.0
description-type: haddock
description: This module provides set and multiset operations on ordered lists.
license-name: BSD-3-Clause
