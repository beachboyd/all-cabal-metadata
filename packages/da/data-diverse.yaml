homepage: https://github.com/louispan/data-diverse#readme
changelog-type: ''
hash: ca5f3aecd8f46a80fb76893ab3fe9589ef9090c61513b7fe49d27304845045f9
test-bench-deps:
  data-diverse: -any
  base: -any
  hspec: ! '>=2'
  criterion: -any
  tagged: ! '>=0.8.5'
maintainer: louis@pan.me
synopsis: Extensible records and polymorphic variants.
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  tagged: ! '>=0.8.5'
  containers: ! '>=0.5'
  ghc-prim: ! '>=0.5'
  deepseq: ! '>=1.4'
all-versions:
- '1.2.0.1'
- '1.2.0.2'
- '1.2.0.3'
- '1.3.0.0'
- '2.0.0.0'
author: Louis Pan
latest: '2.0.0.0'
description-type: markdown
description: ! "[![Hackage](https://img.shields.io/hackage/v/data-diverse.svg)](https://hackage.haskell.org/package/data-diverse)\n[![Build
  Status](https://secure.travis-ci.org/louispan/data-diverse.png?branch=master)](http://travis-ci.org/louispan/data-diverse)\n\n\"Data.Diverse.Many\"
  is an extensible record for any size encoded efficiently as (Seq Any).\n\n\"Data.Diverse.Which\"
  polymorphic variant of possibilities encoded as (Int, Any).\n\nProvides getters,
  setters, projection, injection, folds, and catamorphisms;\naccessed by type or index
  or label.\n\nRefer to [ManySpec.hs](https://github.com/louispan/data-diverse/blob/master/test/Data/Diverse/ManySpec.hs)
  and [WhichSpec.hs](https://github.com/louispan/data-diverse/blob/master/test/Data/Diverse/WhichSpec.hs)
  for example usages.\n\nIso, Lens and Prisms are provided in [data-diverse-lens](http://hackage.haskell.org/package/data-diverse-lens)\n\n#
  Changelog\n\n* 2.0.0.0\n  - Breaking change: the prime (xxx') version of functions
  are now consistently the simpler or non-polymorphic version.\n    - This is more
  consistent with 'Control.Lens' as well.\n    - This means the following are swapped:\n
  \     - `replace`, `replace'`\n      - `replaceL`, `replaceL'`\n      - `replaceTag`,
  `replaceTag'`\n      - `replaceN`, `replaceN'`\n      - `amend`, `amend'`\n      -
  `amendL`, `amendL'`\n      - `amendN`, `amendN'`\n  - Breaking change: Removed proxy
  argument from 'fetchL/Tag/N', 'replaceXXX', 'selectL/Tag/N', 'amendXXX', 'pickL/Tag/N',
  'trialL/Tag/N'\n    relying soley on TypeApplications and now requiring AllowAmbiguousTypes.\n
  \   The \"Proxy\" is also removed from the Read/Show serialized format.\n  - Rearranged
  type variables in `fetchL/N`, `replaceL/Tag/N`, 'pickL/Tag/N', 'trialL/Tag/N' type
  parameters,\n    so the type variable ordering is consistently label, orig to change,
  smaller to larger, ie. 'l/n', 'x', 'y', 'xs'\n\n* 1.3.0.0\n  - Removed splitting
  operations added in 1.2.0.0\n  - added `xxxTag` version of label operations that
  also automatically untags the field.\n\n* 1.2.0.3\n  - PolyKinds for Which\n  -
  Removed cabal upper bounds\n\n* 1.2.0.2\n  - Added 'insert'/'remove' for GHC < 8.2\n
  \ - Removed type functions 'UniqueMemberAt', 'MaybeUniqueMemberAt'\n\n* 1.2.0.1\n
  \ - 'insert'/'remove' is not available in GHC 8.2 onwards.\n\n* 1.2.0.0\n  - Rerranged
  type variable for xxxL and xxxN functions so that the\n    @x@ inferrred from label
  @l@ or index @n@ is after @proxy@.\n    - This affects `fetch[L|N]`, `replace[L|N]`,
  `replace[L|N]'`, `pick[L|N]`\n  - Depends on at least containers-0.5.8.2 for `Data.Sequence.insertAt`\n
  \ - Added splitting operations: `split[Before|After][|L|N]`, `inset[Before|After][|L|N]`,\n
  \   `insert[Before|After][|L|N]`, `remove[Before|After][|L|N]`\n  - Renamed type
  function `Without` to `Remove` to be consistent with new `remove` method.\n\n* 1.1.0.0\n
  \ - Added `CaseFunc` and `CaseFunc'` which replaces `CaseTypeable` (eg `CaseFunc
  @Typeable`)\n    <https://github.com/louispan/data-diverse/issues/6>\n  - Replaced
  `IsAll` constraint with `AllConstrained`.\n\n* 1.0.0.1\n  - Added `CaseTypeable'`
  as an example of polymorphic `Case` that doesn't change the type.\n\n* 1.0.0.0\n
  \ - The exposed api shouldn't break, but there are a lot of internal changes.\n
  \ - Added `AFunctor` which can map over the types in the 'Many'\n    <https://github.com/louispan/data-diverse/issues/5>.\n
  \ - Added friendlier type synomyns `Collect` and `CollectN` for `collect` and `collectN`\n
  \ - Expose type of 'Collector' and 'CollectorN'\n  - Replace type parameter `r`
  from `Case` typeclass with `CaseResult` type family.\n  - Replaced `CasesResult`
  type function with `IsAll` and `CasesResults` type functions.\n  - All `CaseXxx`
  type variables now end with r xs.\n  - All `CaseXxxN` type variables now end with
  r n xs.\n\n* 0.11.0.0\n  - Added `impossible` modelled after `Data.Void.absurd`\n
  \   <https://github.com/louispan/data-diverse/issues/4>\n  - Removed `zilch` so
  `Which '[]` is uninhabited like `Data.Void.Void`, making 'impossible' safe to use.\n
  \ - Removed `Monoid` and changed `Show`, `Read` and `Generic` instances for `Which
  '[]` to be partial\n    just like Data.Void.Void.\n  - Added instance Reduce (Which
  '[]) (Switcher c '[] r), which follows from 'impossible'.\n\n* 0.10.0.0\n  - Renamed
  `Switch` to `Switcher`. Switch is now a type synonym for `switch` constraints\n
  \ - Added CasesResult type family to help infer the result of `cases`\n  - Added
  Semigroup and Monoid instances for all Many xs.\n  - Added Maybe versions of trial,
  and reinterpret\n  - Renamed `reinterpetN` to `reinterpretN'`\n  - Renamed `impossible`
  to `zilch`.\n  - Allowed `reintepret`ing and `diversify`ing `zilch` to `zilch`\n
  \ - Removed zipped type variable from `Amend` constraints.\n  - Removed r type variable
  from `Reduce` typeclass.\n  - Rearranged type variables in `fetch`, `replace`, `pick`,
  `trial`, `Diversify` type parameters,\n    so the type variable ordering is consistently
  smaller to larger, ie. 'x', 'xs', 'branch', 'tree'\n  - Added `diversify'` for allowing
  rearranging the types only.\n\n* 0.9.0.1\n  - Fixed GHC 8.2.1 test failure due to
  changed TypeRep show instance.\n\n* 0.9.0.0\n  - Breaking changes: Renamed Many.sliceL/R
  to Many.viewf/b\n  - Renamed TypeLevel.Internal.MissingImpl to IsUniqueImpl.\n  -
  Added postifx' with SnocUnique and append' with AppendUnique.\n  - Added Semigroup
  & Monoid instances for `Many '[]` and `Which '[]`\n  - Fixed GHC 8.2 compile error
  with importing GHC.Prim (Any)\n\n* 0.8.1.0\n  - Added NFData instance for Which.\n
  \ - Forgot to expose Many.sliceL and Many.sliceR.\n\n* 0.8.0.0\n  - Changed internal
  representation to (Data.Seq Any) for a further 2x append speedup.\n  - Added NFData
  instance for Many.\n\n* 0.7.0.0\n  - Removed NOINLINE pragmas.\n  - Changed internal
  representation to (Int, Data.IntMap Any) for a 2.5x append speedup.\n\n* 0.6.0.0\n
  \ - Moved lens to data-diverse-lens\n\n* 0.5.0.0\n  - Renamed type level functions
  module from Type to TypeLevel\n\n* 0.4.0.0\n  - Removed Emit typeclass, breaking
  renames. Added label accessors.\n\n* 0.1.0.0\n  - Initial version represented as
  (Int, Data.Map Int Any)\n"
license-name: BSD3
