homepage: https://github.com/kwf/data-kiln
changelog-type: ''
hash: d962526b4355bdd37e2ceef52a9651aee68043a024c14a4fbfa10087a581b371
test-bench-deps: {}
maintainer: kenny.foner@gmail.com
synopsis: Sculpt mutable recursive data with reference equality; bake it using a data
  kiln into an immutable lazy structure
changelog: ''
basic-deps:
  data-fix: ! '>=0.0 && <0.1'
  base: ! '>=4.7 && <4.8'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.2 && <2.3'
  IfElse: ! '>=0.85 && <0.86'
  transformers: ! '>=0.4 && <0.5'
all-versions:
- 0.1.0.0
author: Kenneth Foner
latest: 0.1.0.0
description-type: markdown
description: ! 'Data.Kiln

  =========


  We functional programmers know that mutable state is unglamorous, but sometimes
  useful. `Data.Kiln` lets you create and manipulate mutable recursive structures
  (`Clay`) in the `Squishy` monad (built over `ST`), then once you''re finished with
  mutation, bake them into immutable, pure, lazy data. The library is polymorphic
  in the "shape" of each mutable "node" in the graph, requiring only that it be Traversable,
  which means that all sorts of structures, from cons-cells to tagged state diagrams,
  can be represented and manipulated safely and efficiently, with an ultimately pure
  output.

'
license-name: BSD-3-Clause
