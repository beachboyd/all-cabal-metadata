homepage: https://github.com/scvalex/daemons
changelog-type: ''
hash: 4a87dfd8c92ce39aab722450288df17fa2e6b528aec4a7adb16ac6999bc811a3
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  unix: -any
  base: ! '>=4 && <5'
  data-default: -any
  HUnit: -any
  daemons: -any
  ghc-prim: -any
  directory: -any
maintainer: scvalex@gmail.com
synopsis: Daemons in Haskell made fun and easy
changelog: ''
basic-deps:
  cereal: ! '>=0.4.0'
  bytestring: -any
  unix: -any
  base: ==4.*
  filepath: -any
  network: -any
  data-default: -any
  containers: -any
  pipes: ! '>=4.0.0'
  daemons: -any
  ghc-prim: -any
  transformers: -any
  directory: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0
- 0.2.1
author: Alexandru Scvortov <scvalex@gmail.com>
latest: 0.2.1
description-type: markdown
description: ! "daemons\n=======\n\n> Daemons in Haskell made fun and easy\n\nExample\n-------\n\nHere's\n[AddOne](https://github.com/scvalex/daemons/blob/master/AddOne.hs),
  a\nsimple daemon that waits for a number and responds with the\nincremented number.\n\n
  \   import Data.Default ( def )\n    import System.Environment ( getArgs )\n    import
  System.Daemon\n\n    addOne :: Int -> IO Int\n    addOne n = return (n + 1)\n\n
  \   main :: IO ()\n    main = do\n        ensureDaemonRunning \"addOne\" def addOne\n
  \       [n] <- getArgs\n        res <- runClient \"localhost\" 5000 ((read n) ::
  Int)\n        print (res :: Maybe Int)\n\nRunning it, we see:\n\n    % addone 22\n
  \   Daemon started on port 5000\n    Just 23\n    % addone 41\n    Just 42\n\nThe
  two important functions above are `ensureDaemonRunning`, which\nchecks if a daemon
  named `addOne` is already running, and starts it if\nnot, and `runClient` which
  connects to the daemon running on\n`localhost:5000`, passes it a number, and waits
  for the response.\n\nWhat would I use this for?\n--------------------------\n\n
  - You can use the `runDetached` from `System.Posix.Daemon` to turn\n   your program
  into a daemon for Unix-like systems.  You'd want to do\n   this for practically
  every program that's meant to run as a server.\n\n - You can use the functions from
  `Control.Pipe.C3`, `Socket`, and\n   `Serialize` to communicate with running Haskell
  program.  At the\n   simplest, you could query the program for its status, or instruct\n
  \  it to shutdown cleanly.  A more complex use would be adding a full\n   REPL into
  a running Haskell process (think `erl -remsh`).\n\n - You can use the helpers from
  `System.Daemon` to trivially do the\n   above.  Check out the following tutorials
  and examples for details.\n\nTutorials and examples\n----------------------\n\n
  - [Memo](https://github.com/scvalex/daemons/blob/master/examples/Memo.md) -\n   in
  which we write an in-memory key-value store,\n\n - [Queue](https://github.com/scvalex/daemons/blob/master/examples/Queue.hs)\n
  \  - a task queue using the streaming interface of `daemons`.\n\nInstallation\n------------\n\nThis
  package is on\n[Hackage](http://hackage.haskell.org/package/daemons).  To install\nit,
  run:\n\n    cabal update\n    cabal install daemons\n\nModules\n-------\n\n - `Control.Pipe.C3`
  provides simple RPC-like wrappers for pipes.\n\n - `Control.Pipe.Serialize` provides
  pipes to serialize and\n   deserialize streams of strict `ByteString`s using\n   [cereal](http://hackage.haskell.org/package/cereal).\n\n
  - `Control.Pipe.Socket` provides functions to setup strict\n   `ByteString` pipes
  around sockets.\n\n - `System.Daemon` provides a high-level interface to starting\n
  \  daemonized programs that are controlled through sockets.\n\n - `System.Posix.Daemon`
  provides a low-level interface to starting,\n   and controlling detached jobs.\n\nSee
  also\n--------\n\n - `pipes` [The Pipes Tutorial](http://hackage.haskell.org/packages/archive/pipes/3.2.0/doc/html/Control-Proxy-Tutorial.html)\n\n
  - `C3` [Wikipedia](https://en.wikipedia.org/wiki/Command,_control,_and_communications#Command.2C_control_and_communications)\n"
license-name: GPL-3.0-only
