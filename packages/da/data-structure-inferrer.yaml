homepage: http://github.com/alistra/data-structure-inferrer
changelog-type: ''
hash: 83dbc3ced61cdc28863902f185388103f2ec58c526f9ff6e9096ae33088ad2a7
test-bench-deps: {}
maintainer: Aleksander Balicki <balicki.aleksander@gmail.com>
synopsis: Program that infers the fastest data structure available for your program
changelog: ''
basic-deps:
  base: ! '>=4.3.0 && <5'
  filepath: ! '>=1.2.0.1 && <2'
  array: ! '>=0.3.0.3 && <1'
  utility-ht: ! '>=0.0.7.1 && <1'
  language-c: ! '>=0.4.2 && <1'
  ansi-terminal: ! '>=0.5.0 && <2'
  mtl: ! '>=2.0.1.0 && <3'
  random: ! '>=1.0.1.1 && <2'
  deepseq: ! '>=1.2.0.1 && <2'
  safe: ! '>=0.3.3 && <1'
  derive: ! '>=2.5.4 && <3'
  directory: ! '>=1.1.0.1 && <2'
all-versions:
- '1.0'
author: Aleksander Balicki
latest: '1.0'
description-type: markdown
description: ! "# About the project\nThis project is meant to be a compiler feature/wrapper
  that analyzes your code and chooses the best data structure depending on your source
  code. It analyzes the functions used on a wildcard data structure and chooses the
  type of structure that minimizes the time complexity. It will support C language
  and hopefully some other languages too.\n\n# Usage\n\n\talistra@bialobrewy data-structure-inferrer
  % ./dsinf -h\n\tdsinf\n\t  -o file    --output=file    Output file\n\t  -r         --recommend
  \     Give recommendations about the data structure in the supplied code (default)\n\t
  \ -a         --advice         Give advice about the data structure in the supplied
  code\n\t  -c         --compile        Compile the code with recommended structure
  linked\n\t  -i         --inline         Inline the code implementing the recommended
  structure in the supplied code\n\t  -v         --verbose        Enable verbose messages\n\t
  \ -h         --help           Show help\n\n\n# Example (not yet working)\n\nFor
  the following C file:\n\n\t//example.c\n\ttypedef int dstype;\n\t#include <ds.h>\n\tint
  main()\n\t{\n\t\tds d1;\n\t\tdselem e;\n\n\t\tfor(int i = 0; i < 20; i++)\n\t\t{\n\t\t\tinsert_d(d1,
  i);\n\t\t\tprintf(\"%d\\n\", search_d(d1, i));\n\t\t\tupdate_d(d1, i, 2*i);\n\t\t}\n\n\t\tprintf(\"%d\\n\",
  max_d(d1));\n\t}\n\nyou'll invoke:\n\n\tdsinf -c example.c\n\nand it will automatically
  compile the file and link the matching library with data structure implementation
  (here red-black trees with max element cache).\n\n# For now\n\nFor now it works
  as a standalone code analyzer for a toy language that prints the most appropriate
  structure.\n\n## Examples\n\nYou can run tests by running runIlTests from the Tests.hs
  file. These tests (Il/tests subdirectory) are source code in a simple imperative
  language. The analyzer infers the best data structure for operations used in the
  test program.\n\n\t*Tests> runIlTests\n\tTest File Il/tests/1.il\n\tThe recommended
  structure for ds is:\n\tHashtable\n\tTest File Il/tests/2.il\n\tThe recommended
  structure for ds is:\n\tRed-Black Trees with extreme element caching\n\tThe recommended
  structure for ds2 is:\n\tRed-Black Trees with extreme element caching\n\tTest File
  Il/tests/3.il\n\tThe recommended structure for ds is:\n\tRed-Black Trees with extreme
  element caching\n\tThe recommended structure for ds2 is:\n\tLinked List with extreme
  element caching\n\n## Low Level\n\nFor now you can get the best structures depending
  on operations used in your program (if you manually put it in the invocation):\n\n\t*AllStructures>
  recommendAllDs [InsertVal, ExtremalVal]\n\t[Fibonacci Heap,Binomial Heap]\n\t*AllStructures>
  recommendAllDs [InsertVal, FindByVal ]\n\t[Hashtable]\n\t*AllStructures> recommendAllDs
  [InsertVal, FindByVal, ExtremalVal]\n\t[Red-Black Trees]\n\nThere's an advice mode
  which is formatted more nicely:\n\n\t*Advice> printAdvice [InsertVal, UpdateByVal,
  DeleteExtremalVal ]\n\tCurrently, the recommended data structure is: Red-Black Trees\n\tYou
  could use Hashtable, if you removed the following operations:\n\t* DeleteExtremalVal\n"
license-name: MIT
