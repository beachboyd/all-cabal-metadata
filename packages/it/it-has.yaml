homepage: https://github.com/dnikolovv/it-has#readme
changelog-type: markdown
hash: 6339804db7d18ecfc9655d51975ddae2f15fb468a9410f3a90bfd6f4b255e7d4
test-bench-deps:
  base: '>=4.7 && <5'
  it-has: -any
  generic-lens: '>=1.2.0 && <1.3'
  QuickCheck: -any
maintainer: dnikolovv@hotmail.com
synopsis: Automatically derivable Has instances.
changelog: |
  # Changelog for it-has

  ## Unreleased changes
basic-deps:
  base: '>=4.7 && <5'
  generic-lens: '>=1.2.0 && <1.3'
all-versions:
- 0.1.0.0
author: Dobromir Nikolov
latest: 0.1.0.0
description-type: markdown
description: "![Haskell CI](https://github.com/dnikolovv/it-has/workflows/Haskell%20CI/badge.svg)\n\n#
  it-has\n\nThis is a (nearly) drop-in replacement of [data-has](http://hackage.haskell.org/package/data-has).
  The differences with the original package are that this one misses `hasLens` and
  uses `Generic` for its default implementation. Your initial reaction may be to start
  mourning the loss of `hasLens`, but first take a look at the cool things you can
  do without it!\n\nReduce boilerplate! You can trim down this:\n\n```haskell\ndata
  Config =\n  Config\n    { configLogEnv      :: !LogEnv\n    , configJwtSettings
  :: !JWTSettings\n    , configMetrics     :: !Metrics\n    , configEkgStore    ::
  !EKG.Store }\n\n-- Heavy manual instances, data-has only has default implementation
  for tuples\ninstance Has LogEnv Config where\n  getter = configLogEnv\n  modifier
  f v = v { configLogEnv = f (configLogEnv v) }\n\ninstance Has JWTSettings Config
  where\n  getter = configJwtSettings\n  modifier f v = v { configJwtSettings = f
  (configJwtSettings v) }\n\ninstance Has Metrics Config where\n  getter = configMetrics\n
  \ modifier f v = v { configMetrics = f (configMetrics v) }\n\ninstance Has EKG.Store
  Config where\n  getter = configEkgStore\n  modifier f v = v { configEkgStore = f
  (configEkgStore v) }\n```\n\nTo this:\n\n```haskell\n{-# LANGUAGE DeriveAnyClass
  #-}\n{-# LANGUAGE DeriveGeneric  #-}\n\ndata Config =\n  Config\n    { configLogEnv
  \     :: !LogEnv\n    , configJwtSettings :: !JWTSettings\n    , configMetrics     ::
  !Metrics\n    , configEkgStore    :: !EKG.Store\n    } deriving (Generic, Has LogEnv,
  Has JWTSettings, Has Metrics, Has EKG.Store)\n```\n\nAnother trick is that you can
  \"force\" a sum type to have a specific field defined.\n\nE.g. you may want to define
  an `Error` type and enforce that it always has an `ErrorText` attached to it.\n\n```haskell\nnewtype
  ErrorText =\n ErrorText Text\n \ndata Error =\n ValidationError |\n NotFound |\n
  Critical |\n Unauthorized\n```\n\nYou can do that by deriving `Has ErrorText`. The
  compiler will error until you have added an `ErrorText` field to each representation.\n\n```haskell\ndata
  Error =\n ValidationError ErrorText |\n NotFound ErrorText |\n Critical ErrorText
  |\n Unauthorized ErrorText\n deriving (Generic, Has ErrorText)\n```\n\nFor more
  documentation and examples, please refer to the [original package](http://hackage.haskell.org/package/data-has).\n"
license-name: BSD-3-Clause
