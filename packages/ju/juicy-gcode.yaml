homepage: https://github.com/domoszlai/juicy-gcode
changelog-type: markdown
hash: 55e0e98b3d050b55d190b042c8a5b762536edf16f814ba1c93b6dbd2cb6ea6a4
test-bench-deps: {}
maintainer: dlacko@gmail.com
synopsis: SVG to G-Code converter
changelog: "# Revision history for juicy-gcode\r\n\r\n## 0.1.0.5.2  -- 2020-04-11\r\n\r\n*
  Update dependencies\r\n\r\n## 0.1.0.5.1  -- 2018-08-08\r\n\r\n* Update documentation
  \r\n\r\n## 0.1.0.5  -- 2018-08-08\r\n\r\n* Simplify special bezier curves to lines\r\n\r\n##
  0.1.0.4  -- 2017-12-30\r\n\r\n* Update LICENSE\r\n\r\n## 0.1.0.3  -- 2017-03-19\r\n\r\n*
  Fix typo in cabal file\r\n\r\n## 0.1.0.2  -- 2017-03-18\r\n\r\n* Fix generating
  arcs with negative I or J\r\n\r\n## 0.1.0.1  -- 2016-10-31\r\n\r\n* Minor changes
  to the package description and README.\r\n\r\n## 0.1.0.0  -- 2016-10-30\r\n\r\n*
  First version. Mostly feature complete, but not well tested.\r\n"
basic-deps:
  base: '>=4.8 && <5'
  configurator: '>=0.3 && <0.4'
  text: '>=1.2.2 && <1.3'
  matrix: '>=0.3.5 && <0.4'
  svg-tree: '>=0.6 && <0.7'
  lens: '>=4.15.4 && <4.20'
  linear: '>=1.20 && <1.22'
  optparse-applicative: '>=0.13 && <0.16'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.5.1
- 0.1.0.5.2
author: dlacko
latest: 0.1.0.5.2
description-type: markdown
description: "# Juicy-gcode: A lightweight SVG to GCode converter for maximal curve
  fitting\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/juicy-gcode.svg)](https://hackage.haskell.org/package/juicy-gcode)\r\n[![Travis](https://travis-ci.org/domoszlai/juicy-gcode.svg?branch=master)](http://travis-ci.org/domoszlai/juicy-gcode)\r\n![Appveyor](https://ci.appveyor.com/api/projects/status/github/domoszlai/juicy-gcode?branch=master&svg=true)\r\n\r\n##
  Overview\r\n\r\nHaskell SVG to G-code converter that aims to support most SVG features.
  The flavor of the generated G-Code can be influenced providing a configuration file.\r\nJuicy-gcode,
  in contrast to most SVG to G-Code converters, approximates bezier curves with [biarcs](http://dlacko.org/blog/2016/10/19/approximating-bezier-curves-by-biarcs/)
  instead of line segments\r\nthat results in much better curve fit.\r\n\r\n## Installation
  and usage\r\n\r\nThe easiest way is to download one of the pre-built binaries from
  the [releases page](https://github.com/domoszlai/juicy-gcode/releases).\r\nAlternatively,
  you can build from source code as follows:\r\n\r\n* Install [Stack](https://docs.haskellstack.org/en/stable/install_and_upgrade/)
  if you do not have it yet\r\n* `$ git clone https://github.com/domoszlai/juicy-gcode.git`\r\n*
  `$ stack build`\r\n* `$ stack install`\r\n* `$ juicy-gcode --help`\r\n\r\n```\r\njuicy-gcode
  - The SVG to G-Code converter\r\n\r\nUsage: juicy-gcode.exe SVGFILE [-f|--flavor
  CONFIGFILE] [-o|--output OUTPUTFILE]\r\n                       [-d|--dpi DPI]\r\n
  \ Convert SVGFILE to G-Code\r\n\r\nAvailable options:\r\n  -h,--help                Show
  this help text\r\n  SVGFILE                  The SVG file to be converted\r\n  -f,--flavor
  CONFIGFILE   Configuration of G-Code flavor\r\n  -o,--output OUTPUTFILE   The output
  G-Code file (default is standard output)\r\n  -d,--dpi DPI             Density of
  the SVG file (default is 72 DPI)\r\n```\r\n\r\n## Configuration \r\n\r\nThe default
  G-Code flavor configuration file is the following:\r\n\r\n```\r\ngcode\r\n{\r\n
  \  begin = \"G17;G90;G0 Z10;G0 X0 Y0;M3;G4 P2000.000000\"\r\n   end = \"G0 Z10;M5;M2\"
  \r\n   toolon =  \"G00 Z10\"\r\n   tooloff = \"G01 Z0 F10.00\"\r\n}\r\n```\r\n\r\nA
  new configuration file can be set by the `--flavor` or `-f` command line option.
  \r\n\r\nAnother configurable property is the resolution of the SVG image in DPI
  (dot per inch). It can be given by the `--dpi` or `-d` command line option. Default
  value is 72 DPI.\r\n\r\n## Limitations\r\n\r\nMissing features:\r\n* text (easy
  with e.g. [FontyFruity](https://hackage.haskell.org/package/FontyFruity), maybe
  once, you can convert text to curves easily anyway)\r\n* filling (moderately difficult)\r\n*
  clipping (probably not easy, maybe once)\r\n* images (not planned)\r\n\r\n## Testing
  and bugs\r\n\r\nThere is a JavaScript [hanging plotter simulator](https://github.com/domoszlai/hanging-plotter-simulator)
  mainly developed to test the generated gcode. \r\nPlease file an issue if you run
  into a problem (or drop me an email to dlacko @ gmail.com).\r\n\r\n## Implementation\r\n\r\nSVG
  images are built using the following shapes (all of these are subject of an arbitrary
  affine transformation):\r\n\r\n* lines\r\n* circles\r\n* ellipses\r\n* elliptic
  arcs with optional x axis rotation\r\n* quadratic and cubic bezier curves  \r\n
  \ \r\nIn contrast G-Code implements only   \r\n  \r\n* lines \r\n* non-elliptical
  arcs    \r\n\r\nThat means that only lines, circles and some arcs (non-elliptic
  ones without rotation) can be translated to G-Code directly. If transformations
  are also counted, then\r\nonly lines can be translated to G-Code directly as circles
  are not invariant under affine transformations. Because of this, the converter is
  implemented in two stages.\r\n\r\n### Stage 1\r\n\r\nAll the SVG drawing operations
  are translated to a list of MoveTo, LineTo and CubicBezierTo operations as these
  are invariant under affine transformations.\r\nArcs, circles and ellipses can be
  easily approximated with bezier curves with a small error.\r\n\r\n### Stage 2\r\n\r\nCubic
  bezier curves are approximated with [Biarcs](https://en.wikipedia.org/wiki/Biarc)
  using the algorithm described in [[1](http://www.itc.ktu.lt/index.php/ITC/article/view/11812)]
  and explained [here](http://dlacko.org/blog/2016/10/19/approximating-bezier-curves-by-biarcs/).\r\n"
license-name: BSD-3-Clause
