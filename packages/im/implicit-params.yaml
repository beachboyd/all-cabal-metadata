homepage: http://github.com/duairc/implicit-params
changelog-type: ''
hash: 027f9877d9ecd20b4279df95bf813fcec550c48648be2de9c45298f821935a45
test-bench-deps: {}
maintainer: shane@duairc.com
synopsis: Named and unnamed implicit parameters with defaults.
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
  data-default-class: ! '>0 && <0.1'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
author: Shane O'Brien
latest: 0.2.1
description-type: markdown
description: ! "# Implicit parameters\n\nThere are certain types of applications which
  are configurable where it makes\nsense to model this configurability as a global
  or semi-global set of\nconfiguration values that some or all parts of the program
  can \"implicitly\"\naccess. These configuration values are called \"implicit parameters\".\n\n##
  `ImplicitParams` in Haskell\n\nHaskell already has support for implicit parameters
  via the `ImplicitParams`\n[extension][ImplicitParams]. However, `ImplicitParams`
  has several flaws and\nis barely used at all in modern Haskell code. Many Haskellers
  consider its\n(ab)use of `let`/`where` bindings to pass implicit parameters to be
  ugly.\nAlso, it's questionable how \"implicit\" the implicit parameters of\n`ImplicitParams`
  actually are, as they show up in the context of the type\nsignature of any function
  which uses them. There's also no way you can call a\nfunction taking an implicit
  parameter without passing it that parameter if it\nisn't already in context: i.e.,
  there is no way to specify a \"default\" value\nfor an implicit parameter if none
  is passed.\n\n## Motivating example\n\n`implicit-params` solves some of these problems
  and introduces new problems of\nits own. However, there is one particular use case
  which motivated me to\ndevelop `implicit-params` that isn't supported by the existing\n`ImplicitParams`
  extension. Imagine you have the following code:\n\n    app :: Config -> IO ()\n
  \   app config = doStuffWith config\n    \n    defaultConfig :: Config\n    defaultConfig
  = ...\n\nWhich is used by a program as follows:\n\n    main = app defaultConfig\n\nThere
  are two problems with this code. One is that `app` has to manually plumb\nthe `Config`
  value it was given around everywhere. One solution here would be\nfor `app` to use
  a [Reader][Reader] monad internally, but that can complicate\nthe code in some ways
  and it seems like overkill. If it used the\n`ImplicitParams` extension, the above
  code would look like this:\n\n    app :: (?config :: Config) => IO ()\n    app =
  doStuffWith ?config\n    \n    defaultConfig :: Config\n    defaultConfig = ...\n\n
  \   main = let ?config = defaultConfig in app\n\nYou can see why `ImplicitParams`
  isn't very highly regarded: it made the type\nsignature of `app` longer, as well
  as the code that uses it. However, at least\nthe internals of `app` will be somewhat
  nicer now as the `Config` value won't\nhave to be manually plumbed around everywhere.\n\n##
  `data-default`\n\nThe [`data-default`][data-default] package provides a type class
  `Default`\nwhich represents the class of types which have a \"default\" value. It
  has a\nsingle operation `def` which returns the default value for a given type (the\ntype
  is given by type inference). Using `Default` the above code could be made\na little
  nicer:\n\n    app :: (?config :: Config) => IO ()\n    app = doStuffWith ?config\n
  \   \n    instance Default Config where def = ...\n\n    main = let ?config = def
  in app\n\nHowever, the above code is still so *ugly* considering what we're trying
  to\ndo: all we want to do is run `app` with the defaults. This should be as simple\nas
  typing `app`, and only if we're overriding the defaults should the code\nneed to
  be any longer than this. This is exactly what `implicit-params` does.\nIf an implicit
  parameter is not explicitly given to a function which requires\nit, its value is
  given by `def` for the `Default` instance for the type of the\nparameter. And if
  the type does not have a `Default` instance, then it is a\ntype error to call that
  function without explicitly setting the implicit\nparameter (but it will work fine
  if you do set it). This is how the above code\nlooks using `implicit-params`:\n\n
  \   app :: Implicit_ Config => IO ()\n    app = doStuffWith param_\n    \n    instance
  Default Config where def = defaultConfig\n\n    main = app\n\nPerfect! What if we
  want to pass a non-default config to `app`? That's easy\ntoo:\n\n    main = setParam_
  (def {option = 1}) app\n\n`setParam_` even has an infix synonym `$~` which makes
  the above code even\nnicer:\n\n    main = app $~ def {option = 1}\n\n(Bonus points
  for not abusing `let`/`where` bindings.)\n\n### Named implicit parameters\n\nThe
  above code uses unnamed implicit parameters, which will suffice for most\ncode.
  Sometimes you might want to pass more than one implicit parameter of the\nsame type
  to a single function, and for this you need some way of selecting\nthe particular
  implicit parameter on which to operate. `implicit-params` uses\ntype level [symbols][Symbols]
  for this, which require the `DataKinds`\n[extension][DataKinds].\n\n`Implicit_`,
  which is used in the examples above, denotes an unnamed implicit\nparameter. `Implicit
  \"foo\"` can be used to denote a named implicit parameter\nnamed `\"foo\"`. Named
  implicit parameters are slightly more awkward to use\nbecause they require passing
  [`Proxy`][Proxy] parameters to the `param` and\n`setParam` functions to specify
  the names of the implicit parameters on which\nthey are to operate. See the Haddock
  documentation of the `Data.Implicit`\nmodule for more details.\n\n## Acknowledgements\n\nThis
  wouldn't be possible without techniques that I learnt from\n[Edward Kmett][edwardk]
  and [Philip JF][philipjf]. In particular, this package\nuses ideas from Edward's
  packages [tagged][tagged], [constraints][constraints]\nand [reflection][reflection]
  and Philip's blog posts [Haskell Supports\nFirst-Class Instances][firstclass] and
  [Using Compiler Bugs for Fun and\nProfit: Introducing Cartesian Closed Constraints][profit].\n\n[ImplicitParams]:
  http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#implicit-parameters\n[Reader]:
  http://hackage.haskell.org/packages/archive/mtl/latest/doc/html/Control-Monad-Reader-Class.html\n[data-default]:
  http://hackage.haskell.org/package/data-default\n[Symbols]: http://www.haskell.org/ghc/docs/latest/html/libraries/base/GHC-TypeLits.html#t:Symbol\n[DataKinds]:
  http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/kind-polymorphism-and-promotion.html\n[Proxy]:
  http://hackage.haskell.org/packages/archive/tagged/latest/doc/html/Data-Proxy.html\n[edwardk]:
  http://comonad.com/reader/\n[philipjf]: http://joyoftypes.blogspot.com/\n[tagged]:
  http://hackage.haskell.org/package/tagged\n[constraints]: http://hackage.haskell.org/package/constraints\n[reflection]:
  http://hackage.haskell.org/package/reflection\n[firstclass]: http://joyoftypes.blogspot.com/2012/02/haskell-supports-first-class-instances.html\n[profit]:
  http://joyoftypes.blogspot.com/2013/01/using-compiler-bugs-for-fun-and-profit.html\n"
license-name: BSD-3-Clause
