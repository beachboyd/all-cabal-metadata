homepage: http://kalli1.faikvm.com/ImplicitCAD/Stable
changelog-type: ''
hash: 0ae3a699238e839c19a842eaae38ec5da09b24137d6c2309d8687d651bb9bb11
test-bench-deps:
  implicit: -any
  base: -any
  hspec: -any
  criterion: -any
  parsec: -any
  containers: -any
  mtl: -any
  random: -any
maintainer: Julia Longtin <julial@turinglace.com>
synopsis: ! 'Math-inspired programmatic 2&3D CAD: CSG, bevels, and shells; gcode export..'
changelog: ''
basic-deps:
  NumInstances: -any
  storable-endian: -any
  blaze-svg: -any
  implicit: -any
  JuicyPixels: -any
  bytestring: -any
  base: ! '>=3 && <5'
  blaze-markup: -any
  monads-tf: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  vector-space: -any
  filepath: -any
  criterion: -any
  parsec: -any
  containers: -any
  silently: -any
  snap-server: -any
  blaze-builder: -any
  snap-core: -any
  transformers: -any
  optparse-applicative: ! '>=0.10.0'
  parallel: -any
  deepseq: -any
  bytestring-builder: -any
  directory: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.1.0'
- '0.2.0'
author: Christopher Olah
latest: '0.2.0'
description-type: markdown
description: ! "ImplicitCAD: Math Inspired CAD\n==============================\n\nIntroduction\n------------\n\nImplicitCAD
  is a programmatic CAD program, implemented in haskell. Unlike traditional CAD programs,
  programmatic CAD programs use text descriptions of objects, as in programming. Concepts
  like variables, control structures and abstraction are used, just as in programming.
  This provides a number of advantages:\n\n - Objects can be abstracted and reused\n
  - Repetitive tasks can be automated\n - Objects can be designed parametrically\n
  - The usual tools for software development (like version control) can be used\n\nThe
  traditional example of programmatic CAD is OpenSCAD.\n\nGenerally, objects in programmatic
  CAD are built with Constructive Solid Geometry or CSG. Unions, intersections and
  differences of simpler shapes slowly build the object. ImplicitCAD supports all
  this and much more! For example, it provides rounded unions so that one can have
  smooth interfaces between objects.\n\nIt also directly provides some GCode generation,
  and has a parser for OpenSCAD to make it easier for people to transition/use.\n\nImplicitCAD
  is very much a work in progress. The author considers it ready for beta testers
  and greatly appreciates bug reports.\n\n\nExtOpenSCAD Examples\n--------------------\n\nLet's
  begin with OpenSCAD examples, since they're likely a more comfortable format than
  Haskell for most readers :)\n\nImplicitCAD supports a modified version of the OpenSCAD
  language, used by the popular programmatic CAD tool of the same name.\n\nGenerally,
  normal OpenSCAD code should work. For example, save the following as `example1.scad`
  (or grab it out of the Examples/ directory shipped with ImplicitCAD).\n\n```c\n//
  example1.scad -- The union of a square and a circle.\nunion() {\n\tsquare([80,80]);\n\ttranslate
  ([80,80]) circle(30);\n}\n```\n\nRunning `extopenscad example1.scad` will produce
  `example1.svg`, which will look like:\n\n![A Union of a Square and Circle](http://faikvm.com/ImplicitCAD/example1.svg)\n\nYou
  can read more about standard openscad functionality in the [OpenSCAD User Manual](http://en.wikibooks.org/wiki/OpenSCAD_User_Manual).\n\nHowever,
  there are additional ImplicitCAD specific features. For example a rounded union:\n\n```c\n//example2.escad
  -- A rounded union of a square and a circle.\nunion(r=14) {\n\tsquare([80,80]);\n\ttranslate
  ([80,80]) circle(30);\n}\n```\n\n![A Rounded Union of a Square and Circle](http://faikvm.com/ImplicitCAD/example2.svg)\n\n(For
  code like this that is not backwards compatible with OpenSCAD, it is recommended
  that you save it as a .escad file -- Extended OpenSCAD.)\n\nLike openscad, ImplicitCAD
  supports extruding objects.\n\n```c\n// example3.escad -- the extruded product of
  the union of five circles.\nlinear_extrude (height = 40, center=true){\n        union
  ( r = 8) {\n                circle (10);\n                translate ([22,0]) circle
  (10);\n                translate ([0,22]) circle (10);\n                translate
  ([-22,0]) circle (10);\n                translate ([0,-22]) circle (10);\n        }\n}\n```\n\n![An
  Extrusion](http://faikvm.com/ImplicitCAD/example3.png)\n\nAnd we allow you to twist
  them as you extrude.\n\n\n```c\n// example4.escad -- the twisted extruded product
  of the union of five circles.\nlinear_extrude (height = 40, center=true, twist=90){\n
  \       union ( r = 8) {\n                circle (10);\n                translate
  ([22,0]) circle (10);\n                translate ([0,22]) circle (10);\n                translate
  ([-22,0]) circle (10);\n                translate ([0,-22]) circle (10);\n        }\n}\n```\n\n![An
  twisted extrusion](http://faikvm.com/ImplicitCAD/example4.png)\n\nIn fact, we've
  extended this to allow you to twist at non-constant rates and even reverse directions.
  You just make `twist` a function! (We're following the openscad convention of using
  degrees...)\n\n```c\n// example5.escad -- the variably twisted extruded product
  of the union of 5 circles.\nlinear_extrude (height = 40, center=true, twist(h) =
  35*cos(h*2*pi/60)) {\n        union ( r = 8) {\n                circle (10);\n                translate
  ([22,0]) circle (10);\n                translate ([0,22]) circle (10);\n                translate
  ([-22,0]) circle (10);\n                translate ([0,-22]) circle (10);\n        }\n}\n```\n\n![A
  variably twisted ImplicitCAD extrusion](http://faikvm.com/ImplicitCAD/example5.png)\n\nWe
  also allow you to do rounded extrusions. See, we heard you like rounding, so we
  set this up so you can rounded extrude your rounded union...\n\n```c\n// example6.escad
  -- A rounded extrusion of the rounded union of 5 circles.\nlinear_extrude (height
  = 40, center=true, r=5){\n        union ( r = 8) {\n                circle (10);\n
  \               translate ([22,0]) circle (10);\n                translate ([0,22])
  circle (10);\n                translate ([-22,0]) circle (10);\n                translate
  ([0,-22]) circle (10);\n        }\n}\n```\n\n![A rounded extrusion made with ImplicitCAD](http://faikvm.com/ImplicitCAD/example6.png)\n\nThis
  is fully compatible with twisting, of course!\n\n```c\n// example7.escad -- A twisted
  rounded extrusion of the rounded union of 5 circles.\nlinear_extrude (height = 40,
  center=true, twist=90, r=5){\n        union ( r = 8) {\n                circle (10);\n
  \               translate ([22,0]) circle (10);\n                translate ([0,22])
  circle (10);\n                translate ([-22,0]) circle (10);\n                translate
  ([0,-22]) circle (10);\n        }\n}\n```\n\n![A rounded twisted extrusion](http://faikvm.com/ImplicitCAD/example7.png)\n\n\nImplicitCAD
  also provides full programmatic functionality, like variable assignment in loops,
  which are sadly absent in OpenSCAD. For example, the trivial program:\n\n```c\n//
  Example8.escad -- variable assignment in loops.\na = 5;\nfor (c = [1, 2, 3]) {\n\techo(c);\n\ta
  = a*c;\n\techo(a);\n}\n```\n\nHas the output:\n\n\n```\n1.0\n5.0\n2.0\n10.0\n3.0\n30.0\nNothing
  to render\n```\n\nAs a functional programmer, I couldn't resist adding some other
  niceties to the language. For example, function currying:\n\n```c\n// Example9.escad
  -- function currying.\nf = max(4);\necho(f(5));\necho(max(4,5));\n```\nAnd some
  higher order functions, like my friend map:\n\n```c\n// Example10.escad -- map!.\necho(map(cos,
  [0, pi/2, pi]));\n```\n\nHaskell Examples\n-----------------\n\nEverything you saw
  above can be done with the Haskell API. For example, a simple 2D example, the same
  as our first ExtOpenSCAD one:\n\n```haskell\n-- Example 11 - the union of a square
  and a circle.\nimport Graphics.Implicit\n\nout = union [\n\trectR 0 (-40,-40) (40,40),\n\ttranslate
  (40,40) (circle 30) ]\n\nmain = writeSVG 2 \"test.svg\" out\n```\n\n![A Union of
  a Square and a Circle](http://faikvm.com/ImplicitCAD/example11.svg)\n\n\nA rounded
  union:\n\n```haskell\n-- Example 12 - the rounded union of a square and a circle.\nimport
  Graphics.Implicit\n\nout = unionR 14 [\n\trectR 0 (-40,-40) (40,40),\n\ttranslate
  (40,40) (circle 30) ]\n\nmain = writeSVG 2 \"test.svg\" out\n```\n\n![A Rounded
  Union of a Square and a Circle](http://faikvm.com/ImplicitCAD/example12.svg)\n\nA
  simple 3D example:\n\n```haskell\n-- Example 13 - the union of a cube and a sphere.\nimport
  Graphics.Implicit\n\nout = union [\n\trect3R 0 (0,0,0) (20,20,20),\n\ttranslate
  (20,20,20) (sphere 15) ]\n\nmain = writeSTL 1 \"test.stl\" out\n```\n\n![A Rounded
  Union of a Cube and a Sphere](http://faikvm.com/ImplicitCAD/example13.png)\n\nYou
  can do a whole lot more!\n\nTry ImplicitCAD!\n----------------\n\n 1. Install GHC
  and cabal.\n     * Debain/Ubuntu: `apt-get install ghc cabal-install zlib1g-dev`\n
  \    * Archlinux: `pacman -S ghc cabal-install`\n     * Red Hat/Fedora: `yum install
  ghc cabal-install`\n     * Mac OSX:\n         * Homebrew: `brew install ghc cabal-install`\n
  \        * *Fink doesn't seem to have a package for cabal*; Install the Haskell
  Platform [manually](http://hackage.haskell.org/platform/mac.html).\n     * Windows:
  Follows [these install instructions](http://hackage.haskell.org/platform/windows.html).\n
  \    * Other unices: If your package manager does not include ghc and cabal you
  should [install the Haskell platform](http://www.haskell.org/platform).\n 2. You
  now have two options for installation:\n     * Latest release:\n         * Use cabal
  to install ImplicitCAD: `cabal update && cabal install implicit`\n     * Development
  version:\n         * Initialize your haskell environment: `cabal update`\n         *
  Git clone this repo: `git clone https://github.com/colah/ImplicitCAD.git`\n         *
  cd in: `cd ImplicitCAD/`\n         * install the dependencies: `cabal configure
  && cabal install --only-dependencies`\n\t     * The previous step may fail, but
  it should tell you what's missing.\n\t     * try to 'cabal install' each of the
  things it tells you are missing.\n         * Finally, cabal install implicitcad:
  `cabal install`\n 3. Try it!\n     * extopenscad test:\n          * Make a test
  file: `echo \"circle(30);\" > test.escad`\n          * Run extopencad: `extopenscad
  test.escad`\n             * Alternatively, `~/.cabal/bin/extopenscad test.escad`
  -- see bellow.\n     * Haskell ImplicitCAD test:\n          * Start ghci: `ghci`\n
  \         * Load ImplicitCAD: `import Graphics.Implicit`\n          * Try it! `writeSVG
  1 \"test.svg\" (circle 30)`\n 4. Known issues:\n     * extopenscad test results
  in `bash: extopenscad: command not found` (or similar for your shell)\n         *
  This probably means `~/.cabal/bin/` is not in your `$PATH` variable.\n           Try
  using `~/.cabal/bin/extopenscad` as your command instead.\n     * Haskell test results
  in `module is not loaded: 'Graphics.Implicit' (./Graphics/Implicit.hs)`\n         *
  This is most likely a problem with your Linux distro and cabal not playing nice.\n
  \          GHC is not configured to see the ImplicitCAD libraries. You can confirm
  this by\n           trying the test in `~/.cabal/lib/`. If that works, you should
  be able to use ghc\n           anywhere with the `-Ldir` or `-llib` options. Alternatively,
  some people have\n           permanently fixed this by doing the cabal install as
  root.\n\nDocumentation\n-------------\n\nDocumentation can be generated from the
  source code of ImplicitCAD by Haddock by running `cabal haddock`.\n\nReleases of
  ImplicitCAD are uploaded to HackageDB which, in addition to making them avaialable
  through `cabal install`, puts the generated documentation on the Internet. So you
  can read the documentation for the most recent release of ImplicitCAD, 0.0.1, [on
  HackageDB](http://hackage.haskell.org/packages/archive/implicit/0.0.3/doc/html/Graphics-Implicit.html)
  (for some reason the latest version doesn't seem to have built).\n\nIn Implicit
  CAD, we consider objects as functions of `outwardness'. The boundary is 0, negative
  is the interior and positive the exterior. The magnitude is how far out or in. A
  description of the mathematical ideas underpinning ImplicitCAD are in a [blog post
  on colah's blog](http://christopherolah.wordpress.com/2011/11/06/manipulation-of-implicit-functions-with-an-eye-on-cad/).
  Note that substantial changes have happened since that post. You can also look at
  the [0.0.3 relase notes](http://christopherolah.wordpress.com/2012/02/06/implicitcad-0-0-3-release/).\n\nStatus\n------\n\nImplicitCAD
  is very much a work in progress.\n\nWhat works (July 31, 2015 -- regressions are
  possible if not probable):\n\n - CSG, bevelled CSG, shells.\n - 2D output (svg).\n
  - 3D output (stl).\n - gcode generation for 2D to hacklab laser cutter. Not configurable.\n\nWhat
  still needs to be done:\n\n - gcode generation for 3D printers, gcode generator
  config.\n - openscad parser for backwards compatibility (partially complete).\n\nAnd
  a wishlist of things further in the future:\n\n - More optimisation.\n - Less bugs.\n
  - openGL viewer?\n - openCL acceleration?\n"
license-name: AGPL-3
