homepage: https://github.com/exordium/impl#readme
changelog-type: ''
hash: b6f169ec9b4f93cafa4019143dffcc9399dd2f4e4cb8e8a4cbe2f7af76aefd03
test-bench-deps: {}
maintainer: daig@sodality.cc
synopsis: Framework for defaulting superclasses
changelog: ''
basic-deps:
  base: ^>=4.12.0.0
  containers: ^>=0.6.0.1
  named: ^>=0.2.0.0
  template-haskell: ^>=2.14.0.0
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Dai
latest: 0.2.0.0
description-type: haddock
description: ! 'This small but extensible framework facilitates defining complex defaulting
  rules that are not handled by DefaultSignatures, and reducing the overhead of giving
  instances to new datatypes by generating superclasses. One reason we might want
  this is when a superclass wants to be given a default by two different subclasses
  (ex: Bifunctor and Profunctor both could generate Functor instances). See the example
  internal library for how to implement instances of Impl. Impl is most valuable when
  instantiating deep (or even undecidably recursive) typeclass hierarchies for multiple
  new datatypes, which is most common in client code.'
license-name: MIT
