homepage: https://github.com/serokell/importify
changelog-type: markdown
hash: 2c879148417aee90a1b4baeb28a4f1a5ad4ff7b51adbab74f6f7f9c8d3cac9e8
test-bench-deps:
  microlens-platform: -any
  path: -any
  base: -any
  unordered-containers: -any
  hspec: -any
  universum: ! '>=1.0.0'
  importify: -any
  filepath: -any
  log-warper: ! '>=1.8.2'
  path-io: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Tool for haskell imports refactoring
changelog: ! "1.0.1\n=====\n\n* [#79](https://github.com/serokell/importify/issues/18):\n
  \ Remove hard-coded gold linker from `.cabal` file.\n"
basic-deps:
  microlens-platform: -any
  fmt: -any
  bytestring: -any
  Cabal: -any
  path: -any
  base: ! '>=4.7 && <5'
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  universum: ! '>=1.0.0'
  hse-cpp: -any
  syb: -any
  importify: -any
  filepath: -any
  turtle: -any
  containers: -any
  haskell-src-exts: -any
  autoexporter: -any
  log-warper: ! '>=1.8.2'
  foldl: -any
  pretty-simple: -any
  haskell-names: -any
  hashable: -any
  optparse-applicative: -any
  text-format: -any
  aeson: -any
  path-io: -any
  template-haskell: -any
  yaml: -any
all-versions:
- '1.0'
- 1.0.1
author: ! '@serokell'
latest: 1.0.1
description-type: markdown
description: ! "# importify â€” manage Haskell imports quickly\n\n[![Build Status](https://travis-ci.org/serokell/importify.svg)](https://travis-ci.org/serokell/importify)\n[![Hackage](https://img.shields.io/hackage/v/importify.svg)](https://hackage.haskell.org/package/importify)\n[![Stackage
  Nightly](http://stackage.org/package/importify/badge/nightly)](http://stackage.org/nightly/package/importify)\n[![Stackage
  LTS](http://stackage.org/package/importify/badge/lts)](http://stackage.org/lts/package/importify)\n[![HLint
  Status](https://codeclimate.com/github/serokell/importify/badges/issue_count.svg)](https://codeclimate.com/github/serokell/importify)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n##
  _Importify_ in a nutshell.\n\n`importify` tool helps you to manage the import section
  of your Haskell project modules.\nGHC compiler can warn you about unused imports,
  and it's a good practice to remove such\nimports immediately. But this becomes tedious,
  especially if you use explicit import lists.\n\n_Importify_ can remove unused imports
  automatically.\n\nBefore importify |  After importify\n:---------------:|:-----------------:\n![Module
  with imports mess](https://user-images.githubusercontent.com/4276606/29321624-b6c2e11a-81e3-11e7-9003-da2a399c9161.png)
  | ![After removing all unused imports](https://user-images.githubusercontent.com/4276606/29321628-b98afb30-81e3-11e7-855f-3430fe9d250f.png)\n\nYou
  can use [`stylish-haskell`](https://github.com/jaspervdj/stylish-haskell) after
  `importify` to prettify imports.\n\nIn the future, we plan for _Importify_ to be
  able to:\n\n + Add missing imports automatically, so you won't have to manage\n
  \  imports manually at all.\n + Implement a cache server with the following features:\n
  \  + Download caches for Hackage packages to speed up _Importify_ runs.\n   + Upload
  your caches for yet-to-be-published FOSS projects to\n     make it easier to collaborate.\n
  \  + Query mappings from any module of every package to symbols\n     exported by
  it to write your refactoring tools.\n + Convert imports between _implicit_ and _explicit_,
  and between\n   _qualified_ and _unqualified_ forms.\n + Resolve merge conflicts
  in import section automatically. See an\n   example of [such conflict](http://i.imgur.com/97YVCFk.png).\n\n##
  Installation\n\nInstallation process assumes that you have already installed and
  configured `stack`\nbuild tool. Currently `importify` works only with projects built
  with `stack`.\n\n### Installing from Stackage\n\nInstall just as every usual package.\n\n```bash\nstack
  install importify\n```\n\n### Installing from source\n\nPerform the next steps before
  driving:\n\n```bash\ngit clone https://github.com/serokell/importify.git  # 1. Clone
  repository locally\ncd importify                                         # 2. Step
  into folder\nstack install importify\\:exe\\:importify              # 3. Copy executable
  under ~/.local/bin\n```\n\n## Usage\n\nIn short:\n\n```bash\n$ cd my-project-which-build-with-stack\n$
  importify cache\n$ importify file path/to/File/With/Unused/Imports.hs\n```\n\n`importify`
  has several commands. Most important is\n\n```\nimportify --help\n```\n\nBefore
  removing redundant imports run `importify cache`\ncommand. Importify stores local
  cache for the project under the\n`.importify` folder inside your project. This cache
  stores exported\nentities for each module for every dependency and for all your
  local\npackages. Make sure to re-run `importify cache` if you change the list\nof
  exported functions and types in your project modules. Cache is\nbuilt incrementally;
  it builds dependencies only once. But if you add\ndependencies or use other versions
  of them (for instance, because of\nbumping stack lts) you need to run `importify
  cache` again. You can\nalways perform `rm -rf .importify` before caching if you
  face any\ntroubles.\n\nAfter the cache is built, you can use `importify file PATH_TO_FILE`\ncommand
  from your project root directory. This command runs\n_Importify_ on the file and
  prints the result in the terminal. If you\nwant to change a file in-place use the
  following command:\n\n```\nimportify file -i PATH_TO_FILE\n```\n"
license-name: MIT
