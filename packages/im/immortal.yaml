homepage: https://github.com/feuerbach/immortal
changelog-type: markdown
hash: a84c83c876fac7e45548f713db4b5c10ea4ad73a75978b8bc354f79313bd6754
test-bench-deps:
  stm: -any
  base: ! '>=4 && <5'
  immortal: -any
  tasty-hunit: -any
  transformers: -any
  tasty: ! '>=0.8'
maintainer: roma@ro-che.info
synopsis: Spawn threads that never die (unless told to do so)
changelog: ! 'CHANGES

  =======


  Version 0.3

  -----------


  Replace monad-control with unliftio-core.

  As a result, immortal will no longer work with stateful monads like StateT,

  which is considered a feature.


  Version 0.2.2.1

  ---------------


  Fix the README


  Version 0.2.2

  -------------


  Add `onUnexpectedFinish`


  Version 0.2.1

  -------------


  Add `wait` and `wait-stm` functions


  Version 0.2

  -----------


  * Pass a `Thread` handle to the thread itself

  * Add `mortalize`, `immortalize`

'
basic-deps:
  stm: -any
  base: ! '>=4.5 && <5'
  unliftio-core: ! '>=0.1.1.0'
all-versions:
- '0.1'
- '0.2'
- '0.2.2'
- '0.2.2.1'
- '0.3'
author: Roman Cheplyaka
latest: '0.3'
description-type: markdown
description: ! "immortal\n========\n\nA small library to create threads that never
  die. This is useful e.g. for\nwriting servers.\n\n``` haskell\nimport qualified
  Control.Immortal as Immortal\nimport Control.Concurrent (threadDelay)\nimport Control.Monad
  (forever)\n\nmain = do\n  -- start an immortal thread\n  _thread <- Immortal.create
  $ \\ _thread -> do\n    -- do stuff\n\n  -- in the main thread, sleep until interrupted\n
  \ -- (e.g. with Ctrl-C)\n  forever $ threadDelay maxBound\n```\n"
license-name: MIT
