homepage: https://github.com/rhyskeepence/trigger
changelog-type: ''
hash: 6d880e0d13c793edd608350494d002660187f48b98417d8fcf52662c55046988
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  protolude: -any
  trigger: -any
maintainer: rhys@rhyskeepence.com
synopsis: Trigger is a cross platform file system watcher for super fast build-and-restart
  workflows.
changelog: ''
basic-deps:
  exceptions: -any
  base: ! '>=4.7 && <5'
  time: -any
  text: -any
  clock: -any
  filepath: -any
  process: ! '>=1.5'
  protolude: -any
  ansi-terminal: -any
  formatting: -any
  twitch: -any
  trigger: -any
  fsnotify: -any
  Glob: -any
  aeson: -any
  yaml: -any
  directory: -any
all-versions:
- '1.0.0.0'
- '1.0.1.0'
author: Rhys Keepence
latest: '1.0.1.0'
description-type: markdown
description: ! "# Trigger\n\n`Trigger` is a cross platform file system watcher for
  super fast build-and-restart workflows. When files change, it can be configured
  to:\n - run build tasks\n - restart your app in the background\n\n`fswatch` and
  others are good general purpose tools for triggering tasks on filesystem changes.
  \nHowever, they don't support stopping and starting background processes.\n\n# How
  does it work?\n\n```\n         -------------------------------\n        | start
  processes in background |\n         -------------------------------\n                       |\n
  \                wait for change <-----------\n                       |                     |\n
  \        -------------------------------     |\n        |   stop background processes
  \  |    |\n         -------------------------------     |\n                       |
  \                    |\n         -------------------------------     |\n        |
  run build tasks sequentially  |    |\n         -------------------------------     |\n
  \                      |                     |\n         -------------------------------
  \    |\n        | start processes in background |    |\n         -------------------------------
  \    |\n                       |                     |\n                        ---------------------
  \ \n\n```\n\n# Installation\n\nIt's Haskell, so download Stack.\n\nClone and run
  `stack build --install`\n\nThis should install `trigger` on your PATH.\n\nIf you
  get linking issues on Windows, see [this issue](https://github.com/commercialhaskell/stack/issues/425)\n\n#
  Configuration\n\nCreate a file named `trigger.yaml`\n\nHere is an example:\n```yaml\n-
  dirs:\n    - \"src\"\n  files:\n    - \"**/*.hs\"\n  ignore:\n    - \"**/Ignored.hs\"\n
  \ tasks: \n    - \"stack build\"\n  run:\n    - command: \"target/executable\"\n
  \     workingDir: \"target\"\n      env:\n        - [\"HOST\", \"localhost\"]\n
  \       - [\"PORT\", \"1234\"]\n```\n\nWhich consists of:\n\n- `dirs`: one or more
  directories to watch for changes\n- `files`: one or more file globs. Files that
  don't match will not trigger. \n- `ignore`: (optional) one or more file globs. Overrides
  the above file globs to exclude particular files. \n- `tasks`: (optional) one or
  more tasks, which are run sequentially in the foreground. Any error will stop subsequent
  tasks.\n- `run`: (optional) one or more background processes. *Note: this executes
  the command directly, rather than using the shell, to improve shutdown behaviour.*\n
  \ - `command`: command and arguments to run in background. *Note: this command is
  relative to where you start trigger, not the `workingDir`.*\n  - `workingDir`: (optional)
  override the working directory of the process.\n  - `env`: (optional) additional
  environment variables for the process\n"
license-name: BSD3
