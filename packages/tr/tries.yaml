homepage: https://github.com/athanclark/tries#readme
changelog-type: ''
hash: ef04c155b7cae74f868dbd2fba67a3ebe990af6f751e8badf825cbec8351e1db
test-bench-deps:
  bytestring: -any
  base: ! '>=4.11 && <5.0'
  unordered-containers: -any
  composition: -any
  rose-trees: ! '>=0.0.2.1'
  criterion: -any
  semigroups: -any
  tries: -any
  containers: -any
  keys: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  mtl: -any
  hashable: -any
  tasty: -any
  deepseq: -any
  QuickCheck: ! '>=2.9.2'
  sets: ! '>=0.0.6'
maintainer: athan.clark@gmail.com
synopsis: Various trie implementations in Haskell
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.11 && <5.0'
  unordered-containers: -any
  composition: -any
  rose-trees: ! '>=0.0.2.1'
  semigroups: -any
  containers: -any
  keys: -any
  quickcheck-instances: -any
  hashable: -any
  deepseq: -any
  QuickCheck: ! '>=2.9.2'
  sets: ! '>=0.0.6'
all-versions:
- 0.0.4
- 0.0.4.1
- 0.0.4.2
- 0.0.5
- 0.0.6
- 0.0.6.1
author: Athan Clark
latest: 0.0.6.1
description-type: markdown
description: |
  tries
  ====

  This is a collection and comparison of some basic, pure trie implementations.

  So far, there is:

  - a Map trie, using `Data.Map` from [containers](https://hackage.haskell.org/package/containers)
  - a List trie, using `Data.Tree` from [containers](https://hackage.haskell.org/package/containers)
  - a HashMap trie, using `Data.HashMap` from [unordered-containers](https://hackage.haskell.org/package/unordered-containers)
  - a Knuth trie, using `Data.Tree.Knuth` from [rose-trees](https://hackage.haskell.org/package/rose-trees)

  ## Running the Tests

  ```bash
  stack test
  ```

  and

  ## Running the Benchmarks

  for insert / delete:

  ```bash
  stack bench --benchmark-arguments="--output profile.html"
  ```

  for lookups:

  ```bash
  stack bench --benchmark-arguments="--output profile-lookup.html" tries:bench:tries-bench-lookup
  ```
license-name: BSD-3-Clause
