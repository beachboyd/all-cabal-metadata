homepage: ''
changelog-type: ''
hash: 5a31e1b2ab0089282652828668aec50533fc12e0ace77a43cd18bea8c5afbd67
test-bench-deps: {}
maintainer: 78emil@gmail.com
synopsis: A command-line tool for live monitoring
changelog: ''
basic-deps:
  process-extras: -any
  optparse-generic: -any
  stm: -any
  base: ! '>=4.10 && <4.11'
  time: -any
  text: -any
  vty: -any
  process: -any
  mtl: -any
  fsnotify: -any
  brick: -any
all-versions:
- '0.1'
author: Emil Axelsson
latest: '0.1'
description-type: markdown
description: ! "# trackit\n\n`trackit` is a command-line tool that listens for changes
  in a user-supplied directory. Whenever there is a change, a custom command is executed
  and its standard output is shown live in the terminal.\n\n## Examples\n\nShow a
  live listing of the files in the current directory:\n\n    > trackit --watch-dir=.
  --command=\"ls --color\"\n\nShow a live revision graph of a Git repository:\n\n
  \   > GIT_DIR=`git rev-parse --git-dir`\n    > trackit --watch-tree=$GIT_DIR --command=\"git
  log --graph --all --oneline --decorate --color\"\n\n## Installation\n\n`trackit`
  can be installed from [Hackage](https://hackage.haskell.org/package/trackit) using
  Cabal:\n\n    > cabal install trackit\n\n## Usage\n\nRun `trackit -h` to get more
  information about available flags.\n\n`trackit` starts a new buffer in the terminal
  and uses it to display the output of the command given as the `--command` flag.
  The display reacts to the following keyboard events:\n\n  * **q** - Quit `trackit`.\n
  \ * **arrow keys** - Scroll the output buffer (also with PgUp/PgDown/Home/End).\n
  \ * **space key** - Re-run the command and update the buffer. This is useful if
  no watch directory is provided, or if the output is affected by events outside of
  the watch directory.\n\nWhen multiple changes occur in a short time in the watched
  directory (e.g. when switching branches in a repository), it may not be desired
  to have `trackit` react to every single change. This is especially the case if the
  monitored command is expensive (e.g. `git log` in a large repository). For this
  reason, `trackit` requires a *stabilization period* before running an update. If
  an event occurs during that period, the period clock is restarted and the update
  is delayed further.\n\nThe stabilization period can be set in milliseconds using
  the `--stabilization` flag. A lower value gives quicker response times, but increases
  the risk of getting spurious updates when a tight sequence changes occurs in the
  watched directory. The default stabilization period is 200 ms.\n\n## Comparison
  to `watch`\n\n`trackit` offers two main advantages over the similar tool [watch](https://linux.die.net/man/1/watch):\n\n
  \ 1. `trackit` only reacts to file system changes. This avoids having to run a potentially
  costly command periodically. For example, the following command can easily consume
  a substantial part of your processor's cycles when run in a large repository:\n\n
  \    ```\n     > watch -c -t -n 0,5 -- git log --graph --all --oneline --decorate
  --color\n     ```\n\n  2. `trackit` supports scrolling, and keeps the scrolled view
  even if the output is updated.\n"
license-name: BSD3
