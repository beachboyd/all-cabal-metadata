homepage: https://github.com/mtth/tracing
changelog-type: ''
hash: ce69c454de49cc11fd2e9b7efdf185fc37d6b94b71ce560ca2379bcd0349d80e
test-bench-deps:
  tracing: -any
  unliftio: ! '>=0.2'
  stm: ! '>=2.5'
  base: ! '>=4.8 && <5'
  hspec: ! '>=2.6'
  text: ! '>=1.2'
  containers: ! '>=0.6'
  mtl: ! '>=2.2'
maintainer: mtth@apache.org
synopsis: Distributed tracing
changelog: ''
basic-deps:
  http-client: ! '>=0.5'
  tracing: -any
  bytestring: ! '>=0.10'
  case-insensitive: ! '>=1.2'
  unliftio: ! '>=0.2'
  stm: ! '>=2.5'
  base: ! '>=4.8 && <5'
  time: ! '>=1.8'
  text: ! '>=1.2'
  network: ! '>=2.8'
  ip: ! '>=1.4'
  containers: ! '>=0.6'
  mtl: ! '>=2.2'
  base16-bytestring: ! '>=0.1'
  transformers: ! '>=0.5'
  random: ! '>=1.1'
  aeson: ! '>=1.4'
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.2.3
- 0.0.2.4
author: Matthieu Monsch
latest: 0.0.2.4
description-type: markdown
description: |
  # Tracing

  An [OpenTracing](https://opentracing.io/)-compliant, simple, and extensible
  distributed tracing library.

  + _Simple:_ add a single `MonadTrace` constraint to start tracing, without
    making your code harder to test!
  + _Extensible:_ use the built-in [Zipkin](http://zipkin.io) backend or hook in
    your own trace publication logic.

  ```haskell
  import Monitor.Tracing

  -- A traced action with its root span and two children.
  run :: MonadTrace m => m ()
  run = rootSpan (sampledEvery 10) do
    childSpan "part-a" runA
    childSpan "part-b" runB
  ```

  To learn more, hop on over to
  [`Monitor.Tracing`](https://hackage.haskell.org/package/tracing/docs/Monitor-Tracing.html),
  or take a look at examples in the `app/` folder.
license-name: BSD-3-Clause
