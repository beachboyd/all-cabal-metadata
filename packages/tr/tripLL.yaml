homepage: https://github.com/aphorisme/tripLL
changelog-type: ''
hash: 70445b13a8480359f7d7e82125ec97b2580db5e41a5b97057ee7bd610e9b2145
test-bench-deps: {}
maintainer: pfiff@hax-f.net
synopsis: A very simple triple store
changelog: ''
basic-deps:
  cereal: ! '>=0.4'
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.8 && <4.9'
  filepath: ! '>=1.4 && <1.5'
  leveldb-haskell: ! '>=0.6'
all-versions:
- 0.1.0.0
author: Philipp Pfeiffer
latest: 0.1.0.0
description-type: markdown
description: ! "# tripLL\n\n## Introduction\n\n`tripLL` is a very simple triple store,
  written in Haskell. It provides a basic interface to write, delete and query triples
  -- in fact, that's it. On top, there are some bindings to realizations of triple
  stores, such that this tiny library can be used out of box.\n\nRight now it is thought
  that exactly one binding is imported within a project and only this binding (since
  it re-exports the interface).\n\n## A simple example\n\n```{.Haskell}\n{-# LANGUAGE
  OverloadedStrings #-}\n\n{- This examples uses the leveldb realization. This means
  that triples become triples of strict bytestrings and the leveldb lib has to be
  installed. -}\n\nimport TripLL.Bindings.LevelDBHexa\n\nmain = do -- open the database:\n
  \         handle <- createAndOpen \"data/store.tripdb\" :: IO LevelDBHexa\n          --
  batch something into it:\n          batch [ Put (Triple \"Frenzy\" \"likes\" \"Jealousy\")\n
  \               , Put (Triple \"Hate\" \"loves\" \"Hatred\")\n                ,
  Put (Triple \"Frenzy\" \"likes\" \"Hate\")]\n                handle\n          --
  querying the database:\n          res <- query (Triple (Just \"Frenzy\") Nothing
  Nothing) handle\n          -- now, `res :: [Triple Strict.ByteString]`, do something
  with it...\n          -- ...\n          -- and clean up:\n          close handle\n```\n\n##
  Contributions\n\nThe LevelDB Binding is based upon (http://nodejsconfit.levelgraph.io/),
  which is based upon the idea to build up a hexastore. Freely interpreted.\n"
license-name: MIT
