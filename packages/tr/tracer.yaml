homepage: https://github.com/knz/hs-tracer
changelog-type: ''
hash: 717dc18e7d09548de83bece3220a93d679b7a1fcb1821e94c27b0678856dd24e
test-bench-deps:
  base: -any
  mtl: -any
  transformers: -any
maintainer: kena@vodka-pomme.net
synopsis: Tracing utilities for Functor/Applicative/Monad types
changelog: ''
basic-deps:
  base: ! '>=4.0 && <5.0'
  mtl: ! '>=0.1'
  transformers: ! '>=0.3'
all-versions:
- '0.1'
author: Raphael 'kena' Poss
latest: '0.1'
description-type: text
description: ! "==============\n Debug.Tracer\n==============\n\nTracing utilities
  for Haskell code\n==================================\n\nThis library contains **Debug.Tracer**,
  a module that provides some\nsupport for \"print debugging\" of Haskell code, and
  *even for pure code*: no\nexplicit I/O typing is required.\n\nNote: the file defining
  this documentation (``README.lhs``) is itself\na Haskell program, which can be run
  for testing the library.\n\n.. contents::\n\nHow to use\n----------\n\nThe following
  code defines a function ``myfact`` that computes\nthe factorial of an integer number::\n\n>
  import Debug.Tracer\n>\n> -- This type declaration aliases 'PureTracer PosStack',\n>
  -- to make its name shorter for reuse.\n> type Tr a = PureTracer PosStack a\n>\n>
  -- An example function using our tracer\n> myfact :: Int -> Tr Int\n> myfact n =
  do\n>              trace $ \"entering with n = \" ++ (show n)\n>              if
  n == 1 then return n\n>              else do\n>                 r <- enter $ myfact
  (n - 1)\n>                 trace $ \"just computed r = \" ++ (show r)\n>                 return
  (n * r)\n>\n> -- The function can be used in a pure context, eg:\n> myfact' :: Int
  -> Int\n> myfact' = (runTracer \"myfact\") . myfact\n\nAs the example demonstrates,
  the **Tracer** modules allows a\nprogrammer to write pure code in a semi-imperative
  style, with the\n``trace`` and ``enter`` actions helping to report execution progress.\n\nFor
  example, if we extend the example to become\na fully-fledged program::\n\n>\n> main
  :: IO ()\n> main = do\n>      putStrLn $ show $ myfact' 10\n\nThen this program
  would print a trace like the following::\n\n   1 myfact +1: entering with n = 10\n
  \  4 myfact +2> +1: entering with n = 9\n   7 myfact +2> +2> +1: entering with n
  = 8\n   10 myfact +2> +2> +2> +1: entering with n = 7\n   13 myfact +2> +2> +2>
  +2> +1: entering with n = 6\n   16 myfact +2> +2> +2> +2> +2> +1: entering with
  n = 5\n   19 myfact +2> +2> +2> +2> +2> +2> +1: entering with n = 4\n   22 myfact
  +2> +2> +2> +2> +2> +2> +2> +1: entering with n = 3\n   25 myfact +2> +2> +2> +2>
  +2> +2> +2> +2> +1: entering with n = 2\n   28 myfact +2> +2> +2> +2> +2> +2> +2>
  +2> +2> +1: entering with n = 1\n   32 myfact +2> +2> +2> +2> +2> +2> +2> +2> +2>
  +3: just computed r = 1\n   36 myfact +2> +2> +2> +2> +2> +2> +2> +2> +3: just computed
  r = 2\n   40 myfact +2> +2> +2> +2> +2> +2> +2> +3: just computed r = 6\n   44 myfact
  +2> +2> +2> +2> +2> +2> +3: just computed r = 24\n   48 myfact +2> +2> +2> +2> +2>
  +3: just computed r = 120\n   52 myfact +2> +2> +2> +2> +3: just computed r = 720\n
  \  56 myfact +2> +2> +2> +3: just computed r = 5040\n   60 myfact +2> +2> +3: just
  computed r = 40320\n   64 myfact +2> +3: just computed r = 362880\n   3628800\n\nOverview\n--------\n\nThe
  library can be used at two levels. At the \"user\" level,\nthe functions ``trace``,
  ``enter`` and ``label`` are defined\nand are ready to use in do-blocks, together
  with\na suitable type signature as in the example above.\n\nThree monads are pre-defined
  at this level:\n\n- ``PureTracer`` traces pure computations.\n- ``MaybeTracer``
  extends the ``Maybe`` monad with tracing.\n- ``IOTracer`` extends the ``IO`` monad
  with tracing.\n\nIn addition,  **Debug.Trace** also provides a `monad\ntransformer`__
  called **TraceT**, which can instrument any other monad\nwith tracing.\n\n.. __:
  http://book.realworldhaskell.org/read/monad-transformers.html\n\nFor example, to
  equip the ``State`` monad with tracing::\n\n  type Tr a = TraceT PosStack State
  a\n\nThe icing on the cake is that **TraceT** not only instruments\n`Monad`__ types,
  but also any `Applicative`__ and `Functor`__ types.\n\n.. __: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Applicative.html\n..
  __: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Monad.html#t:Monad\n..
  __: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Monad.html#t:Functor\n\nThe
  type \"``TraceT PosXX f``\" is a ``Functor`` if ``f`` is a functor,\nis ``Applicative``
  if ``f`` is applicative, and is a ``Monad`` if ``f`` is a monad.\n\nMore examples\n-------------\n\nStacking
  vs. non-stacking with ``enter``\n````````````````````````````````````````\n\nIf
  a (pure) function \"looks\" like a flat loop, chances are its trace\nwill be flat,
  too::\n\n>      let\n>            myfact2 :: Int -> Int -> Tr Int\n>            myfact2
  r n = do\n>                   trace $ \"processing n = \" ++ (show n) ++ \", r =
  \" ++ (show r)\n>                   if n == 1 then return r\n>                   else
  myfact2 (n * r) (n - 1)\n>      putStrLn $ show $ runTracer \"myFact2\" $ myfact2
  1 10\n\nThis program, which avoids using ``enter``, would print::\n\n   1 myFact2
  +1: processing n = 10, r = 1\n   2 myFact2 +2: processing n = 9, r = 10\n   3 myFact2
  +3: processing n = 8, r = 90\n   4 myFact2 +4: processing n = 7, r = 720\n   5 myFact2
  +5: processing n = 6, r = 5040\n   6 myFact2 +6: processing n = 5, r = 30240\n   7
  myFact2 +7: processing n = 4, r = 151200\n   8 myFact2 +8: processing n = 3, r =
  604800\n   9 myFact2 +9: processing n = 2, r = 1814400\n   10 myFact2 +10: processing
  n = 1, r = 3628800\n   3628800\n\nThe \"stacking\" in the output follows the uses
  of the action\n``enter``. To avoid stacking, simply leave ``enter`` away.\n\nRelative
  counts with ``label``\n``````````````````````````````\n\nIn a complex computation,
  the action ``label`` can mark basic blocks,\nas follows::\n\n>      let\n>            complex
  :: Int -> Tr Int\n>            complex n = do\n>                   label \"start\"\n>
  \                  x <- return $ 1 - n\n>                   y <- return $ 2 * n\n>
  \                  t <- return $ x * y\n>                   trace $ \"here t = \"
  ++ (show t)\n>                   u <- return $ y - t\n>\n>                   label
  \"middle\"\n>                   v <- return $ t * x\n>                   trace $
  \"v = \" ++ (show v)\n>\n>                   m <- return $ n * n\n>                   o
  <- return $ m + m + u + v\n>                   label \"end\"\n>                   trace
  $ \"returning o = \" ++ (show o)\n>                   return o\n>      putStrLn
  $ show $ runTracer \"complex\" $ complex 10\n\nThis could print the following trace::\n\n
  12 complex start+11: here t = -180\n 21 complex middle+5: v = 1620\n 30 complex
  end+2: returning o = 2020\n 2020\n\nNote how the count on the left is global (shared
  by the entire tracing\ncompound), whereas the count on the right is local, relative
  to the\npoint a label was last positioned.\n\nOrdering with other side-effects\n``````````````````````````````````\n\nTraces
  play well with other side effects. For example,\nI/O actions are properly ordered::\n\n\n>
  \     let\n>            someio :: Int -> TrIO ()\n>            someio n = do\n>
  \                 d <- return $ n + n\n>                  trace \"before io\"\n>
  \                 lift $ putStrLn $ \"d = \" ++ (show d)\n>                  trace
  \"after io\"\n>                  return ()\n>\n>      runTracerT \"someio\" (someio
  10)\n\nThis program would print as expected::\n\n  4 someio +4: before io\n  d =
  20\n  8 someio +8: after io\n\nWith the message \"``d = 20``\" properly interleaved
  with trace\nmessages.\n\n\nNote: the examples above also use the following type
  declaration::\n\n> type TrIO a = IOTracer PosStack a\n"
license-name: BSD-3-Clause
