homepage: http://github.com/bennofs/quickcheck-property-monad/
changelog-type: ''
hash: c0e1c06361005c148a1a24e1c3c62f0f4add78e8291126798b539ac7c7ec4881
test-bench-deps:
  base: ! '>=4.5 && <4.9'
  filepath: ! '>=1.3.0.0 && <1.5'
  doctest: ! '>=0.9.11 && <0.11'
  QuickCheck: ! '>=2.7 && <2.9'
  directory: ! '>=1.1.0.2 && <1.3'
maintainer: Benno F端nfst端ck <benno.fuenfstueck@gmail.com>
synopsis: A monad for generating QuickCheck properties without Arbitrary instances.
changelog: ''
basic-deps:
  either: ! '>=4.1.1 && <4.5'
  base: ! '>=4.5 && <4.9'
  transformers: ! '>=0.3.0.0 && <0.5'
  QuickCheck: ! '>=2.5.1.1 && <2.9'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Benno F端nfst端ck
latest: 0.2.4
description-type: markdown
description: ! "# quickcheck-property-monad\n\n[![Build Status](https://secure.travis-ci.org/bennofs/quickcheck-property-monad.png?branch=master)](http://travis-ci.org/bennofs/quickcheck-property-monad)\n\n##
  Introduction\n\nWhen your data has many invariants, it's often difficult to write
  `Arbitrary` instances for QuickCheck. This library attempts to solve that\nproblem
  by providing a nice interface to write QuickCheck tests without using `Arbitrary`
  instances. It aims to be somewhere in the middle between\n`HUnit` and `QuickCheck`:
  Use the random test case generation of `QuickCheck`, but write `HUnit` like assertions.\n\n##
  A simple model\n\nTo show the library in action, let's first create a simple model
  holding an integer with a one invariant: the value hold by it will always be even.\nWe
  also provide two operations that preserve the invariant, `add2` and `multiply`,
  a function to create a new model and a function to check that the\ninvariant holds
  (we will use this function later when we write our tests):\n\n```haskell\nmodule
  Model\n  ( Model() -- We don't export the constructor so the invariant cannot be
  broken.\n  , newModel\n  , add2\n  , multiply\n  , checkInvariant\n  ) where\n\ndata
  Model = Model { value :: Int } deriving Show\n\nnewModel :: Model\nnewModel = Model
  0\n\nadd2 :: Model -> Model\nadd2 (Model x) = Model $ 2 + x\n\nmultiply :: Int ->
  Model -> Model\nmultiply n (Model x) = Model $ n * x\n\ncheckInvariant :: Model
  -> Bool\ncheckInvariant (Model x) = even x\n```\n\n## Writing tests using the `PropM`
  monad\n\nWe now want to write tests that ensure that none of our operations will
  ever break the invariant, no matter in what sequence we apply them. In this case,
  we could\nwrite an `Arbitrary` instance for our model, but for more complex models,
  this will quickly become very difficult. Often, you have to use the functions you
  want to test\nto create the `Arbitrary` instance, which means that if the functions
  are broken, you already generate invalid data to begin with. It's difficult to find
  the bug in that case.\n\n```haskell\nmodule Main where\n\nimport Model\nimport Test.QuickCheck\nimport
  Test.QuickCheck.Property.Monad\n```\n\nBut using `quickcheck-property-monad`, we
  can write the tests so that they will fail right after the invariant is broken.
  First, we define a `Gen` to generate a random\noperation. We will also include a
  short description of the operation, to make debugging easier:\n\n```haskell\nrandomOperation
  :: Gen (String, Model -> Model)\nrandomOperation = oneof\n  [ return (\"Add two\",
  add2)\n  , fmap (\\n -> (\"Multiply by \" ++ show n, multiply n)) arbitrary\n  ]\n```\n\nSo
  far, all functions we've used are provided by `QuickCheck` itself. Let's now write
  the test property:\n\n```haskell\nprop_satisfies_invariant :: Property\nprop_satisfies_invariant
  = sized $ \\s -> property $ go newModel s\n  where go :: Model -> Int -> PropM Bool\n
  \       go _     0    = return True\n        go model size = do\n          (description,
  operation) <- generate randomOperation\n          logMessageLn $ \"Operation: \"
  ++ description\n          let model' = operation model\n          logMessageLn $
  \"Model is now: \" ++ show model'\n          assert \"Number is even\" $ checkInvariant
  model'\n          go model' $ pred size\n```\n\nHere we've used some functions from
  `quickcheck-property-monad`. We first grab the `size` parameter from QuickCheck
  using `sized`, and then\npass that to go, together with an initial model. `go` returns
  a value of type `PropM Bool`, which we have to convert into a QuickCheck `Property`\nusing
  the `property` function.\n\nBut what does go do? First, it looks at the size parameter.
  If the size is null, we return `True`, indicating a successful test. If the size
  is not\nnull, we first generate a random operation, using our previously defined
  `randomOperation` function. We use `generate` to lift the `Gen` into the `PropM`\nmonad.
  After we generated a random operation, we log it. You'll see all messages logged
  with `logMessageLn` when the test fails, which is useful for\ndebugging. We then
  apply the operation on the model. Using `assert`, we require that the model still
  satisfies our invariant. `assert` will do nothing\nif the condition given to it
  is True. If it is False, it will abort the test case and report a failure, with
  the given error message. After that, we recurse,\ndecreasing the size by one so
  that we eventually reach 0 and stop.\n\nNow, the only function left to write is
  main:\n\n```haskell\nmain :: IO ()\nmain = quickCheck prop_satisfies_invariant\n```\n\nIf
  we run our test suite, we get the expected output:\n\n```\n+++ OK, passed 100 tests.\n```\n\nAll
  fine!\n\n## How a failure looks\n\nNow, if you want to see how a failing test looks
  like, go back and change\n\n```haskell\nadd2 (Model x) = Model $ 2 + x\n```\n\nto\n\n```haskell\nadd2
  (Model x) = Model $ 1 + x\n```\n\nIf we now run our tests, we get a failure, as
  expected:\n\n    *** Failed! Falsifiable (after 2 tests): \n    Operation: Add two\n
  \   Model is now: Model {value = 1}\n\n    Assertion failed: Number is even\n\nWe
  get the output from the `logMessageLn` calls and the message of the assertion that
  failed.\n\n## Contributing\n\nContributions are always welcome. If you have any
  ideas, improvements or bug reports,\nsend a pull request or open a issue on github.\n"
license-name: BSD-3-Clause
