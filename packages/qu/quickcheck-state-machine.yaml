homepage: https://github.com/advancedtelematic/quickcheck-state-machine#readme
changelog-type: markdown
hash: 7bb6bfc2f82441bcbce924d54e23cc2d543c24491cb476674c38cd8d52c4a216
test-bench-deps:
  warp: ! '>=3.2.23'
  http-client: ! '>=0.5.13.1'
  bytestring: ! '>=0.10.8.2'
  wai: ! '>=3.2.1.2'
  base: ! '>=4.11.1.0'
  persistent: ! '>=2.8.2'
  servant-client: ! '>=0.14'
  text: ! '>=1.2.3.0'
  persistent-template: ! '>=2.5.4'
  strict: ! '>=0.3.2'
  monad-control: ! '>=1.0.2.2'
  filepath: ! '>=1.4.2'
  process: ! '>=1.6.3.0'
  matrix: ! '>=0.3.5.0'
  persistent-postgresql: ! '>=2.8.2.0'
  network: ! '>=2.6.3.6'
  tree-diff: ! '>=0.0.1'
  servant-server: ! '>=0.14.1'
  servant: ! '>=0.14.1'
  quickcheck-instances: ! '>=0.3.18'
  tasty-quickcheck: ! '>=0.10'
  mtl: ! '>=2.2.2'
  filelock: ! '>=0.1.1.2'
  lifted-async: ! '>=0.9.3'
  monad-logger: ! '>=0.3.28.5'
  random: ! '>=1.1'
  tasty: ! '>=1.1.0.2'
  QuickCheck: ! '>=2.9.2'
  string-conversions: ! '>=0.4.0.1'
  resourcet: ! '>=1.2.1'
  quickcheck-state-machine: -any
  vector: ! '>=0.12.0.1'
  directory: ! '>=1.3.1.5'
maintainer: Stevan Andjelkovic <stevan.andjelkovic@here.com>
synopsis: Test monadic programs using state machine based models
changelog: ! "#### 0.4.0 (2018-8-21)\n\n  * Major rewrite, addressing many issues:\n\n
  \   - The output of sequential runs now shows a diff of how the model changed in\n
  \     each step (related to issue #77);\n\n    - The datatype of actions was renamed
  to commands and no longer is a GADT\n      (discussed in issue #170, also makes
  issue #196 obsolete);\n\n    - Commands can now return multiple references (issue
  #197);\n\n    - Global invariants can now more easily be expressed (issue #200);\n\n
  \   - Counterexamples are now printed when post-conditions fail (issue #172).\n\n####
  0.3.1 (2018-1-15)\n\n  * Remove upper bounds for dependencies, to easier keep up
  with\n    Stackage nightly.\n\n#### 0.3.0 (2017-12-15)\n\n  * A propositional logic
  module was added to help provide better\n    counterexamples when pre- and post-conditions
  don't hold;\n\n  * Generation of parallel programs was improved (base on\n    a
  [comment](https://github.com/Quviq/QuickCheckExamples/issues/2) by\n    Hans Svensson
  about how Erlang QuickCheck does it);\n\n  * Support for semantics that might fail
  was added;\n\n  * Pretty printing of counterexamples was improved.\n\n#### 0.2.0\n\n
  \ * Z-inspired definition of relations and associated operations were\n    added
  to help defining concise and showable models;\n\n  * Template Haskell derivation
  of `shrink` and type classes: `Show`,\n    `Constructors`, `HFunctor`, `HFoldable`,
  `HTraversable`;\n\n  * New and more flexible combinators for building sequential
  and\n    parallel properties replaced the old clunky ones;\n\n  * Circular buffer
  example was added;\n\n  * Two examples of how to test CRUD web applications were
  added.\n\n#### 0.1.0\n\n  * The API was simplified, thanks to ideas stolen from\n
  \   [Hedgehog](https://github.com/hedgehogqa/haskell-hedgehog/commit/385c92f9dd0aa7e748fc677b2eeead5e3572685f).\n\n####
  0.0.0\n\n  * Initial release.\n"
basic-deps:
  exceptions: ! '>=0.8.3'
  ansi-wl-pprint: ! '>=0.6.7.3'
  split: ! '>=0.2.3.3'
  stm: ! '>=2.4.4.1'
  base: ! '>=4.7 && <5'
  monad-control: ! '>=1.0.2.2'
  matrix: ! '>=0.3.5.0'
  async: ! '>=2.1.1.1'
  lifted-base: ! '>=0.2.3.11'
  tree-diff: ! '>=0.0.1'
  containers: ! '>=0.5.7.1'
  mtl: ! '>=2.2.1'
  lifted-async: ! '>=0.9.3'
  pretty-show: ! '>=1.7'
  random: ! '>=1.1'
  QuickCheck: ! '>=2.9.2'
  vector: ! '>=0.12.0.1'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.4.0'
author: Stevan Andjelkovic
latest: '0.4.0'
description-type: markdown
description: ! "## quickcheck-state-machine\n\n[![Hackage](https://img.shields.io/hackage/v/quickcheck-state-machine.svg)](https://hackage.haskell.org/package/quickcheck-state-machine)\n[![Stackage
  Nightly](http://stackage.org/package/quickcheck-state-machine/badge/nightly)](http://stackage.org/nightly/package/quickcheck-state-machine)\n[![Stackage
  LTS](http://stackage.org/package/quickcheck-state-machine/badge/lts)](http://stackage.org/lts/package/quickcheck-state-machine)\n[![Build
  Status](https://api.travis-ci.org/advancedtelematic/quickcheck-state-machine.svg?branch=master)](https://travis-ci.org/advancedtelematic/quickcheck-state-machine)\n\n`quickcheck-state-machine`
  is a Haskell library, based\non [QuickCheck](https://hackage.haskell.org/package/QuickCheck),
  for testing\nstateful programs. The library is different from\nthe\n[`Test.QuickCheck.Monadic`](https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Monadic.html)
  approach\nin that it lets the user specify the correctness by means of a state machine\nbased
  model using pre- and post-conditions. The advantage of the state machine\napproach
  is twofold: 1) specifying the correctness of your programs becomes less\nadhoc,
  and 2) you get testing for race conditions for free.\n\nThe combination of state
  machine based model specification and property based\ntesting first appeard in Erlang's
  proprietary QuickCheck. The\n`quickcheck-state-machine` library can be seen as an
  attempt to provide similar\nfunctionality to Haskell's QuickCheck library.\n\n###
  Example\n\nAs a first example, let's implement and test programs using mutable\nreferences.
  Our implementation will be using `IORef`s, but let's start with a\nrepresentation
  of what actions are possible with programs using mutable\nreferences. Our mutable
  references can be created, read from, written to and\nincremented:\n\n```haskell\ndata
  Command r\n  = Create\n  | Read      (Reference (Opaque (IORef Int)) r)\n  | Write
  \    (Reference (Opaque (IORef Int)) r) Int\n  | Increment (Reference (Opaque (IORef
  Int)) r)\n\ndata Response r\n  = Created (Reference (Opaque (IORef Int)) r)\n  |
  ReadValue Int\n  | Written\n  | Incremented\n```\n\nWhen we generate actions we
  won't be able to create arbitrary `IORef`s, that's\nwhy all uses of `IORef`s are
  wrapped in `Reference _ r`, where the parameter `r`\nwill let us use symbolic references
  while generating (and concrete ones when\nexecuting).\n\nIn order to be able to
  show counterexamples, we need a show instance for our\nactions. `IORef`s don't have
  a show instance, thats why we wrap them in\n`Opaque`; which gives a show instance
  to a type that doesn't have one.\n\nNext, we give the actual implementation of our
  mutable references. To make\nthings more interesting, we parametrise the semantics
  by a possible problem.\n\n```haskell\ndata Bug = None | Logic | Race\n  deriving
  Eq\n\nsemantics :: Bug -> Command Concrete -> IO (Response Concrete)\nsemantics
  bug cmd = case cmd of\n  Create        -> Created     <$> (reference . Opaque <$>
  newIORef 0)\n  Read ref      -> ReadValue   <$> readIORef  (opaque ref)\n  Write
  ref i   -> Written     <$  writeIORef (opaque ref) i'\n    where\n    -- One of
  the problems is a bug that writes a wrong value to the\n    -- reference.\n      i'
  | i `Prelude.elem` [5..10] = if bug == Logic then i + 1 else i\n         | otherwise
  \               = i\n  Increment ref -> do\n    -- The other problem is that we
  introduce a possible race condition\n    -- when incrementing.\n    if bug == Race\n
  \   then do\n      i <- readIORef (opaque ref)\n      threadDelay =<< randomRIO
  (0, 5000)\n      writeIORef (opaque ref) (i + 1)\n    else\n      atomicModifyIORef'
  (opaque ref) (\\i -> (i + 1, ()))\n    return Incremented\n```\n\nNote that above
  `r` is instantiated to `Concrete`, which is essentially the\nidentity type, so while
  writing the semantics we have access to real `IORef`s.\n\nWe now have an implementation,
  the next step is to define a model for the\nimplementation to be tested against.
  We'll use a simple map between references\nand integers as a model.\n\n```haskell\nnewtype
  Model r = Model [(Reference (Opaque (IORef Int)) r, Int)]\n\ninitModel :: Model
  r\ninitModel = Model []\n```\n\nThe pre-condition of an action specifies in what
  context the action is\nwell-defined. For example, we can always create a new mutable
  reference, but\nwe can only read from references that already have been created.
  The\npre-conditions are used while generating programs (lists of actions).\n\n```haskell\nprecondition
  :: Model Symbolic -> Command Symbolic -> Logic\nprecondition (Model m) cmd = case
  cmd of\n  Create        -> Top\n  Read  ref     -> ref `elem` domain m\n  Write
  ref _   -> ref `elem` domain m\n  Increment ref -> ref `elem` domain m\n```\n\nThe
  transition function explains how actions change the model. Note that the\ntransition
  function is polymorphic in `r`. The reason for this is that we use\nthe transition
  function both while generating and executing.\n\n```haskell\ntransition :: Eq1 r
  => Model r -> Command r -> Response r -> Model r\ntransition m@(Model model) cmd
  resp = case (cmd, resp) of\n  (Create, Created ref)        -> Model ((ref, 0) :
  model)\n  (Read _, ReadValue _)        -> m\n  (Write ref x, Written)       -> Model
  ((ref, x) : filter ((/= ref) . fst) model)\n  (Increment ref, Incremented) -> case
  lookup ref model of\n    Just i  -> Model ((ref, succ i) : filter ((/= ref) . fst)
  model)\ntransition :: Ord1 v => Model v -> Action v resp -> v resp -> Model v\ntransition
  (Model m) New           ref = Model (m ++ [(Reference ref, 0)])\ntransition m         (Read
  \ _)     _   = m\ntransition (Model m) (Write ref i) _   = Model (update ref i         m)\ntransition
  (Model m) (Inc   ref)   _   = Model (update ref (old + 1) m)\n  where\n  Just old
  = lookup ref m\n\nupdate :: Eq a => a -> b -> [(a, b)] -> [(a, b)]\nupdate ref i
  m = (ref, i) : filter ((/= ref) . fst) m\n```\n\nPost-conditions are checked after
  we executed an action and got access to the\nresult.\n\n```haskell\npostcondition
  :: Model Concrete -> Command Concrete -> Response Concrete -> Logic\npostcondition
  (Model m) cmd resp = case (cmd, resp) of\n  (Create,        Created ref) -> m' !
  ref .== 0 .// \"Create\"\n    where\n      Model m' = transition (Model m) cmd resp\n
  \ (Read ref,      ReadValue v)  -> v .== m ! ref .// \"Read\"\n  (Write _ref _x,
  Written)      -> Top\n  (Increment _ref, Incremented) -> Top\n```\n\nFinally, we
  have to explain how to generate, mock responses given a model, and\nshrink actions.\n\n```haskell\ngenerator
  :: Model Symbolic -> Gen (Command Symbolic)\ngenerator (Model model) = frequency\n
  \ [ (1, pure Create)\n  , (4, Read  <$> elements (domain model))\n  , (4, Write
  <$> elements (domain model) <*> arbitrary)\n  , (4, Increment <$> elements (domain
  model))\n  ]\n\nmock :: Model Symbolic -> Command Symbolic -> GenSym (Response Symbolic)\nmock
  (Model m) cmd = case cmd of\n  Create      -> Created   <$> genSym\n  Read ref    ->
  ReadValue <$> pure (m ! ref)\n  Write _ _   -> pure Written\n  Increment _ -> pure
  Incremented\n\nshrinker :: Command Symbolic -> [Command Symbolic]\nshrinker (Write
  ref i) = [ Write ref i' | i' <- shrink i ]\nshrinker _             = []\n```\n\nTo
  be able to fit the code on a line we pack up all of them above into a\nrecord.\n\n```haskell\nsm
  :: Bug -> StateMachine Model Command IO Response\nsm bug = StateMachine initModel
  transition precondition postcondition\n           Nothing Nothing generator Nothing
  shrinker (semantics bug) id mock\n```\n\nWe can now define a sequential property
  as follows.\n\n```haskell\nprop_sequential :: Bug -> Property\nprop_sequential bug
  = forAllCommands sm' Nothing $ \\cmds -> monadicIO $ do\n  (hist, _model, res) <-
  runCommands sm' cmds\n  prettyCommands sm' hist (checkCommandNames cmds (res ===
  Ok))\n    where\n      sm' = sm bug\n```\n\nIf we run the sequential property without
  introducing any problems to the\nsemantics function, i.e. `quickCheck (prop_sequential
  None)`, then the property\npasses. If we however introduce the logic bug problem,
  then it will fail with the\nminimal counterexample:\n\n```\n> quickCheck (prop_sequential
  Logic)\n*** Failed! Falsifiable (after 12 tests and 2 shrinks):\nCommands\n  { unCommands
  =\n      [ Command Create (fromList [ Var 0 ])\n      , Command (Write (Reference
  (Symbolic (Var 0))) 5) (fromList [])\n      , Command (Read (Reference (Symbolic
  (Var 0)))) (fromList [])\n      ]\n  }\n\nModel []\n\n   == Create ==> Created (Reference
  (Concrete Opaque)) [ 0 ]\n\nModel [+_×_ (Reference Opaque)\n          0]\n\n   ==
  Write (Reference (Concrete Opaque)) 5 ==> Written [ 0 ]\n\nModel [_×_ (Reference
  Opaque)\n         -0\n         +5]\n\n   == Read (Reference (Concrete Opaque)) ==>
  ReadValue 6 [ 0 ]\n\nModel [_×_ (Reference Opaque) 5]\n\nPostconditionFailed \"AnnotateC
  \\\"Read\\\" (PredicateC (6 :/= 5))\" /= Ok\n```\n\nRecall that the bug problem
  causes the write of values ``i `elem` [5..10]`` to\nactually write `i + 1`. Also
  notice how the diff of the model is displayed\nbetween each action.\n\nRunning the
  sequential property with the race condition problem will not uncover\nthe race condition.\n\nIf
  we however define a parallel property as follows.\n\n```haskell\nprop_parallel ::
  Bug -> Property\nprop_parallel bug = forAllParallelCommands sm' $ \\cmds -> monadicIO
  $ do\n  prettyParallelCommands cmds =<< runParallelCommands sm' cmds\n    where\n
  \     sm' = sm bug\n```\n\nAnd run it using the race condition problem, then we'll
  find the race\ncondition:\n\n```\n> quickCheck (prop_parallel Race)\n*** Failed!
  Falsifiable (after 26 tests and 6 shrinks):\nParallelCommands\n  { prefix =\n      Commands
  { unCommands = [ Command Create (fromList [ Var 0 ]) ] }\n  , suffixes =\n      [
  Pair\n          { proj1 =\n              Commands\n                { unCommands
  =\n                    [ Command (Increment (Reference (Symbolic (Var 0)))) (fromList
  [])\n                    , Command (Read (Reference (Symbolic (Var 0)))) (fromList
  [])\n                    ]\n                }\n          , proj2 =\n              Commands\n
  \               { unCommands =\n                    [ Command (Increment (Reference
  (Symbolic (Var 0)))) (fromList [])\n                    ]\n                }\n          }\n
  \     ]\n  }\n┌─────────────────────────────────────────────────────────────────────────────────────────────────┐\n│
  [Var 0] ← Create                                                                                │\n│
  \                                                        → Created (Reference (Concrete
  Opaque)) │\n└─────────────────────────────────────────────────────────────────────────────────────────────────┘\n┌──────────────────────────────────────────────┐
  │\n│ [] ← Increment (Reference (Concrete Opaque)) │ │\n│                                              │
  │ ┌──────────────────────────────────────────────┐\n│                                              │
  │ │ [] ← Increment (Reference (Concrete Opaque)) │\n│                                              │
  │ │                                → Incremented │\n│                                              │
  │ └──────────────────────────────────────────────┘\n│                                →
  Incremented │ │\n└──────────────────────────────────────────────┘ │\n┌──────────────────────────────────────────────┐
  │\n│ [] ← Read (Reference (Concrete Opaque))      │ │\n│                                →
  ReadValue 1 │ │\n└──────────────────────────────────────────────┘ │\n```\n\nAs we
  can see above, a mutable reference is first created, and then in\nparallel (concurrently)
  we do two increments of said reference, and finally we\nread the value `1` while
  the model expects `2`.\n\nRecall that incrementing is implemented by first reading
  the reference and\nthen writing it, if two such actions are interleaved then one
  of the writes\nmight end up overwriting the other one -- creating the race condition.\n\nWe
  shall come back to this example below, but if your are impatient you can\nfind the
  full source\ncode\n[here](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/MutableReference.hs).\n\n###
  How it works\n\nThe rough idea is that the user of the library is asked to provide:\n\n
  \ * a datatype of actions;\n  * a datatype model;\n  * pre- and post-conditions
  of the actions on the model;\n  * a state transition function that given a model
  and an action advances the\n    model to its next state;\n  * a way to generate
  and shrink actions;\n  * semantics for executing the actions.\n\nThe library then
  gives back a bunch of combinators that let you define a\nsequential and a parallel
  property.\n\n#### Sequential property\n\nThe *sequential property* checks if the
  model is consistent with respect to the\nsemantics. The way this is done is:\n\n
  \ 1. generate a list of actions;\n\n  2. starting from the initial model, for each
  action do the the following:\n\n       1. check that the pre-condition holds;\n
  \      2. if so, execute the action using the semantics;\n       3. check if the
  the post-condition holds;\n       4. advance the model using the transition function.\n\n
  \ 3. If something goes wrong, shrink the initial list of actions and present a\n
  \    minimal counterexample.\n\n#### Parallel property\n\nThe *parallel property*
  checks if parallel execution of the semantics can be\nexplained in terms of the
  sequential model. This is useful for trying to find\nrace conditions -- which normally
  can be tricky to test for. It works as\nfollows:\n\n  1. generate a list of actions
  that will act as a sequential prefix for the\n     parallel program (think of this
  as an initialisation bit that setups up\n     some state);\n\n  2. generate two
  lists of actions that will act as parallel suffixes;\n\n  3. execute the prefix
  sequentially;\n\n  4. execute the suffixes in parallel and gather the a trace (or
  history) of\n     invocations and responses of each action;\n\n  5. try to find
  a possible sequential interleaving of action invocations and\n     responses that
  respects the post-conditions.\n\nThe last step basically tries to find\na [linearisation](https://en.wikipedia.org/wiki/Linearizability)
  of calls that\ncould have happend on a single thread.\n\n### More examples\n\nHere
  are some more examples to get you started:\n\n  * The water jug problem from *Die
  Hard 3* -- this is a\n    simple\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/DieHard.hs)
  of\n    a specification where we use the sequential property to find a solution\n
  \   (counterexample) to a puzzle from an action movie. Note that this example\n
  \   has no meaningful semantics, we merely model-check. It might be helpful to\n
  \   compare the solution to the\n    Hedgehog\n    [solution](http://clrnd.com.ar/posts/2017-04-21-the-water-jug-problem-in-hedgehog.html)
  and\n    the\n    TLA+\n    [solution](https://github.com/tlaplus/Examples/blob/master/specifications/DieHard/DieHard.tla);\n\n
  \ * Mutable\n    reference\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/MutableReference.hs)
  --\n    this is a bigger example that shows both how the sequential property can\n
  \   find normal bugs, and how the parallel property can find race conditions.\n
  \   Several metaproperties, that for example check if the counterexamples are\n
  \   minimal, are specified in a\n    separate\n    [module](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/MutableReference/Prop.hs);\n\n
  \ * Circular buffer\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/CircularBuffer.hs)\n
  \   -- another example that shows how the sequential property can find help find\n
  \   different kind of bugs. This example is borrowed from the paper *Testing the\n
  \   Hard Stuff and Staying Sane*\n    [[PDF](http://publications.lib.chalmers.se/records/fulltext/232550/local_232550.pdf),\n
  \   [video](https://www.youtube.com/watch?v=zi0rHwfiX1Q)];\n\n  * Ticket\n    dispenser\n
  \   [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/TicketDispenser.hs)
  --\n    a simple example where the parallel property is used once again to find
  a\n    race condition. The semantics in this example uses a simple database file\n
  \   that needs to be setup and cleaned up. This example also appears in the\n    *Testing
  a Database for Race Conditions with QuickCheck* and *Testing the\n    Hard Stuff
  and Staying\n    Sane*\n    [[PDF](http://publications.lib.chalmers.se/records/fulltext/232550/local_232550.pdf),\n
  \   [video](https://www.youtube.com/watch?v=zi0rHwfiX1Q)] papers;\n\n  * CRUD webserver
  where create returns unique\n    ids\n    [example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/test/CrudWebserverDb.hs)
  --\n    create, read, update and delete users in a postgres database on a webserver\n
  \   using an API written\n    using [Servant](https://github.com/haskell-servant/servant).
  Creating a user\n    will return a unique id, which subsequent reads, updates, and
  deletes need\n    to use. In this example, unlike in the last one, the server is
  setup and\n    torn down once per property rather than generate program.\n\nAll
  properties from the examples can be found in the\n[`Spec`](https://github.com/advancedtelematic/quickcheck-state-machine/tree/master/test/Spec.hs)\nmodule
  located in the\n[`test`](https://github.com/advancedtelematic/quickcheck-state-machine/tree/master/test)\ndirectory.
  The properties from the examples get tested as part of [Travis\nCI](https://travis-ci.org/advancedtelematic/quickcheck-state-machine).\n\nTo
  get a better feel for the examples it might be helpful to `git clone` this\nrepo,
  `cd` into it, fire up `stack ghci --test`, load the different examples,\ne.g. `:l
  test/CrudWebserverDb.hs`, and run the different properties\ninteractively.\n\n###
  How to contribute\n\nThe `quickcheck-state-machine` library is still very experimental.\n\nWe
  would like to encourage users to try it out, and join the discussion of how\nwe
  can improve it on the issue tracker!\n\n### See also\n\n  * The QuickCheck\n    bugtrack
  [issue](https://github.com/nick8325/quickcheck/issues/139) -- where\n    the initial
  discussion about how how to add state machine based testing to\n    QuickCheck started;\n\n
  \ * *Finding Race Conditions in Erlang with QuickCheck and\n    PULSE*\n    [[PDF](http://www.cse.chalmers.se/~nicsma/papers/finding-race-conditions.pdf),\n
  \   [video](https://vimeo.com/6638041)] -- this is the first paper to describe\n
  \   how Erlang's QuickCheck works (including the parallel testing);\n\n  * *Linearizability:
  a correctness condition for concurrent\n    objects* [[PDF](https://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf)],
  this\n    is a classic paper that describes the main technique of the parallel\n
  \   property;\n\n  * Aphyr's blogposts about [Jepsen](https://github.com/jepsen-io/jepsen),
  which\n    also uses the linearisability technique, and has found bugs in many\n
  \   distributed systems:\n\n    - [Knossos: Redis and linearizability](https://aphyr.com/posts/309-knossos-redis-and-linearizability);\n
  \   - [Strong consistency models](https://aphyr.com/posts/313-strong-consistency-models);\n
  \   - [Computational techniques in Knossos](https://aphyr.com/posts/314-computational-techniques-in-knossos);\n
  \   - [Serializability, linearizability, and locality](https://aphyr.com/posts/333-serializability-linearizability-and-locality).\n\n
  \ * The use of state machines to model and verify properties about programs is\n
  \   quite well-established, as witnessed by several books on the subject:\n\n      -
  [Specifying\n        Systems](https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/):\n
  \       The TLA+ Language and Tools for Hardware and Software Engineers.\n        Parts
  of this book are also presented by the author, Leslie\n        Lamport, in the following
  video\n        [course](https://lamport.azurewebsites.net/video/videos.html);\n\n
  \     - [Modeling in Event-B](http://www.event-b.org/abook.html): System\n        and
  Software Engineering. Parts of this book are covered in the\n        following (video)
  course given at Microsoft Research by the\n        author, Jean-Raymond Abrial,
  himself:\n\n          + [Lecture 1](https://www.youtube.com/watch?v=2GP1pJINVT4):\n
  \           introduction to modeling and Event-B (chapter 1 of the\n            book)
  and start of \"controlling cars on bridge\" example\n            (chapter 2);\n\n
  \         + [Lecture 2](https://www.youtube.com/watch?v=M8nvVaZ74wA):\n            refining
  the \"controlling cars on a bridge\" example\n            (sections 2.6 and 2.7);\n\n
  \         + [Lecture 3](https://www.youtube.com/watch?v=Y5OUtq8cdV8):\n            design
  patterns and the \"mechanical press controller\"\n            example (chapter 3);\n\n
  \         + [Lecture 4](https://www.youtube.com/watch?v=ku-lfjxM4WI):\n            sorting
  algorithm example (chapter 15);\n\n          + [Lecture 5](https://www.youtube.com/watch?v=C0tpgPOKAyg):\n
  \           designing sequential programs (chapter 15);\n\n          + [Lecture
  6](https://www.youtube.com/watch?v=i-GKHZAWWjU):\n            status report of the
  hypervisor that Microsoft Research are\n            developing using Event-B.\n\n
  \     - [Abstract State Machines](http://www.di.unipi.it/~boerger/AsmBook/): A\n
  \       Method for High-Level System Design and Analysis.\n\n    The books contain
  general advice how to model systems using state machines,\n    and are hence relevant
  to us. For shorter texts on why state machines are\n    important for modeling,
  see:\n\n      - Lamport's\n        [*Computation and State Machines*](https://www.microsoft.com/en-us/research/publication/computation-state-machines/);\n\n
  \     - Gurevich's\n        [*Evolving Algebras 1993: Lipari Guide*](https://www.microsoft.com/en-us/research/publication/103-evolving-algebras-1993-lipari-guide/)
  and\n        *Sequential Abstract State Machines Capture Sequential\n        Algorithms*\n
  \       [[PDF](http://delta-apache-vm.cs.tau.ac.il/~nachumd/models/gurevich.pdf)].\n\n
  \ * Other similar libraries:\n\n      - Erlang QuickCheck, [eqc](http://quviq.com/documentation/eqc/),
  the first\n        property based testing library to have support for state machines\n
  \       (closed source);\n\n      - The Erlang library [PropEr](https://github.com/manopapad/proper)
  is\n        *eqc*-inspired, open source, and has support for state\n        machine
  [testing](http://propertesting.com/);\n\n      - The Haskell\n        library [Hedgehog](https://github.com/hedgehogqa/haskell-hedgehog),
  also\n        has support for state machine based testing;\n\n      - [ScalaCheck](http://www.scalacheck.org/),
  likewise has support for state\n        machine\n        based\n        [testing](https://github.com/rickynils/scalacheck/blob/master/doc/UserGuide.md#stateful-testing)
  (no\n        parallel property);\n\n      - The Python\n        library [Hypothesis](https://hypothesis.readthedocs.io/en/latest/),
  also\n        has support for state machine\n        based\n        [testing](https://hypothesis.readthedocs.io/en/latest/stateful.html)
  (no\n        parallel property).\n\n### License\n\nBSD-style (see the file LICENSE).\n"
license-name: BSD3
