homepage: https://github.com/andrewthad/quickcheck-classes#readme
changelog-type: markdown
hash: def64aeb3cc812d89ec55ad98ec811257382daa2f0332b16fa610b9e48e02aa8
test-bench-deps:
  semigroupoids: -any
  base: -any
  quickcheck-classes: -any
  tagged: -any
  containers: -any
  transformers: -any
  QuickCheck: -any
  aeson: -any
  primitive: -any
  vector: -any
maintainer: andrew.thaddeus@gmail.com
synopsis: QuickCheck common typeclasses
changelog: ! "# Changelog\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand
  this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n##
  [0.5.0.0] - 2018-09-25\n### Change\n- When compiling with GHC 8.6 and newer, use
  `QuantifiedConstraints` instead\n  of `Eq1`, `Show1`, and `Arbitrary1`.\n\n## [0.4.14.3]
  - 2018-09-21\n### Change\n- Fix a CPP conditional import problem that caused build
  failures on GHC 7.10\n- Set an explicit lower bound for containers\n\n## [0.4.14.2]
  - 2018-09-12\n### Change\n- Support QuickCheck-2.12\n- Fix compilation for containers<0.5.9\n-
  Fix compilation with QuickCheck-2.9\n\n## [0.4.14.1] - 2018-07-24\n### Change\n-
  Build correctly when dependency on semigroupoids is disabled.\n\n## [0.4.14] - 2018-07-23\n###
  Added\n- commutativeSemigroupLaws\n- the following typeclasses:\n    `Data.Semigroupoid.Semigroupoid`
  (semigroupoids)\n    `Data.Functor.Plus.Plus` (semigroupoids)\n\n### Change\n- semiringLaws
  were never exported, we now export them.\n- make documentation for `MonadPlus` and
  `Alternative` consistent.\n- bump semirings to 0.2.0.0\n- deprecate `Test.QuickCheck.Classes.specialisedLawsCheckMany`\n
  \ in favour of `Test.QuickCheck.Classes.lawsCheckOne`\n\n## [0.4.13] - 2018-07-18\n###
  Added\n- Laws for `Enum` typeclass.\n- Laws for `Category` typeclass.\n\n## [0.4.12]
  - 2018-06-07\n### Added\n- Remaining laws for `Storable` typeclass.\n- Laws for
  `Prim` typeclass requiring `setByteArray` and `setOffAddr` to\n  match the behavior
  that would result from manually iterating over the\n  array and writing the value
  element-by-element.\n### Change\n- Correct the law from the `Bits` typeclass that
  relates `clearBit`\n  and `zeroBits`.\n- Limit the size of the lists that are used
  when testing that\n  `mconcat` and `sconcat` have behaviors that match their default\n
  \ implementations. For some data structures, concatenating the\n  elements in a
  list of several dozen arbitrary values does not\n  finish in a reasonable amount
  of time. So, the size of these\n  has been limited to 6.\n- Make library build against
  `primitive-0.6.1.0`.\n\n## [0.4.11.1] - 2018-05-25\n### Change\n- Fix compatibility
  with older GHCs when `semigroupoids` support\n  is disabled.\n\n## [0.4.11] - 2018-05-24\n###
  Added\n- Greatly improved documentation\n- `specialisedLawsCheckMany` function,
  a shorter way for the user\n  to use `lawsCheckMany` on a single type.\n\n### Change\n-
  Some internal names, making it more clear what it is that they do.\n\n## [0.4.10]
  - 2018-05-03\n### Added\n- Property tests for `mconcat`, `sconcat`, and `stimes`.
  It isn't\n  common to override the defaults for these, but when you do, it's\n  nice
  to check that they agree with what they are supposed to do.\n\n## [0.4.9] - 2018-04-06\n###
  Change\n- Be more careful with import of `Data.Primitive`. There is a\n  branch
  of `primitive` that adds `PrimArray`. The implementation\n  of `PrimArray` in this
  library should eventually be removed, but\n  for now it will be sufficient to ensure
  that it does not create\n  a conflicting import problem with the one in the branch.\n\n##
  [0.4.8] - 2018-03-29\n### Change\n- Fix compilation regression for older versions
  of transformers.\n\n## [0.4.7] - 2018-03-29\n### Change\n- Split up monolithic module
  into hidden internal modules.\n- Fix compilation regression for older GHCs.\n\n##
  [0.4.6] - 2018-03-29\n### Added\n- Property test the naturality law for `MonadZip`.
  There is another law\n  that instances should satisfy (the Information Preservation
  law), but\n  it's more difficult to write a test for. It has been omitted for now.\n-
  Property tests for all `MonadPlus` laws.\n- Several additional property tests for
  list-like containers: mapMaybe,\n  replicate, filter.\n\n## [0.4.5] - 2018-03-26\n###
  Added\n- Property tests for list-like containers that have `IsList` instances.\n
  \ These are useful for things that are nearly `Foldable` or nearly `Traversable`\n
  \ but are either constrained in their element type or totally monomorphic\n  in
  it.\n\n## [0.4.4] - 2018-03-23\n### Added\n- Cabal flags for controlling whether
  or not `aeson` and `semigroupoids`\n  are used. These are mostly provided to accelerate
  builds `primitive`'s \n  test suite.\n\n## [0.4.3] - 2018-03-23\n### Added\n- Property
  tests for `foldl1` and `foldr1`.\n- Property tests for `Traversable`.\n\n## [0.4.2]
  - 2018-03-22\n### Changed\n- Made compatible with `transformers-0.3`. Tests for
  higher-kinded\n  typeclasses are unavailable when built with a sufficiently old\n
  \ version of both `transformers` and `base`. This is because `Eq1`\n  and `Show1`
  are unavailable in this situation.\n\n## [0.4.1] - 2018-03-21\n### Changed\n- Made
  compatible with `transformers-0.4`.\n\n## [0.4.0] - 2018-03-20\n### Added\n- Property
  tests for `Bifunctor` and `Alternative`.\n### Changed\n- Made compatible with older
  GHCs all the way back to 7.8.4.\n- Lower dependency footprint. Eliminate the dependency
  on `prim-array`\n  and inline the relevant functions and types from it into\n  `Test.QuickCheck.Classes`.
  None of these are exported.\n"
basic-deps:
  semigroupoids: -any
  base: ! '>=4.5 && <5'
  semigroups: -any
  tagged: -any
  containers: ! '>=0.4.2.1'
  bifunctors: -any
  transformers: ! '>=0.3 && <0.6'
  semirings: ! '>=0.2.0.0'
  QuickCheck: ! '>=2.9'
  aeson: ! '>=1.1'
  primitive: ! '>=0.6.1 && <0.7'
all-versions:
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- 0.4.9
- 0.4.10
- 0.4.11.1
- 0.4.12
- 0.4.13
- 0.4.14
- 0.4.14.1
- 0.4.14.2
- 0.4.14.3
- 0.5.0.0
author: Andrew Martin, chessai
latest: 0.5.0.0
description-type: markdown
description: ! "# quickcheck-classes\n\nThis library provides sets of properties that
  should hold for common typeclasses,\nalong with three (3) simple functions that
  you can use to test them.\n\n### `lawsCheck`:\n\nA convenience function for testing
  properties in GHCi.\nFor example, at GHCi:\n\n```bash\n>>> lawsCheck (monoidLaws
  (Proxy :: Proxy Ordering))\nMonoid: Associative +++ OK, passed 100 tests.\nMonoid:
  Left Identity +++ OK, passed 100 tests.\nMonoid: Right Identity +++ OK, passed 100
  tests.\n```\n\nAssuming that the `Arbitrary` instance for `Ordering` is good, we
  now\nhave confidence that the `Monoid` instance for `Ordering` satisfies\nthe monoid
  laws.\n\n### `lawsCheckMany`:\n\nA convenience function for checking multiple typeclass
  instances\nof multiple types. Consider the following Haskell source file:\n\n```haskell\nimport
  Data.Proxy (Proxy(..))\nimport Data.Map (Map)\nimport Data.Set (Set)\n\n-- A 'Proxy'
  for 'Set' 'Int'. \nsetInt :: Proxy (Set Int)\nsetInt = Proxy\n\n-- A 'Proxy' for
  'Map' 'Int' 'Int'.\nmapInt :: Proxy (Map Int Int)\nmapInt = Proxy\n\nmyLaws :: Proxy
  a -> [Laws]\nmyLaws p = [eqLaws p, monoidLaws p]\n\nnamedTests :: [(String, [Laws])]\nnamedTests
  =\n  [ (\"Set Int\", myLaws setInt)\n  , (\"Map Int Int\", myLaws mapInt)\n  ]\n```\n\nNow,
  in GHCi:\n\n```bash\n>>> lawsCheckMany namedTests\n\nTesting properties for common
  typeclasses\n-------------\n-- Set Int --\n-------------\n\nEq: Transitive +++ OK,
  passed 100 tests.\nEq: Symmetric +++ OK, passed 100 tests.\nEq: Reflexive +++ OK,
  passed 100 tests.\nMonoid: Associative +++ OK, passed 100 tests.\nMonoid: Left Identity
  +++ OK, passed 100 tests.\nMonoid: Right Identity +++ OK, passed 100 tests.\nMonoid:
  Concatenation +++ OK, passed 100 tests.\n\n-----------------\n-- Map Int Int --\n-----------------\n\nEq:
  Transitive +++ OK, passed 100 tests.\nEq: Symmetric +++ OK, passed 100 tests.\nEq:
  Reflexive +++ OK, passed 100 tests.\nMonoid: Associative +++ OK, passed 100 tests.\nMonoid:
  Left Identity +++ OK, passed 100 tests.\nMonoid: Right Identity +++ OK, passed 100
  tests.\nMonoid: Concatenation +++ OK, passed 100 tests.\n\n```\n\n### `specialisedLawsCheckMany`\n\nA
  convenience function that allows one to check many typeclass\ninstances of the same
  type.\n\nFor example, in GHCi:\n\n```bash\n>>> specialisedLawsCheckMany (Proxy ::
  Proxy Word) [jsonLaws, showReadLaws]\nToJSON/FromJSON: Encoding Equals Value +++
  OK, passed 100 tests.\nToJSON/FromJSON: Partial Isomorphism +++ OK, passed 100 tests.\nShow/Read:
  Partial Isomorphism +++ OK, passed 100 tests.\n```\n"
license-name: BSD-3-Clause
