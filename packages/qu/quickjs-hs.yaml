homepage: https://github.com/goodlyrottenapple/quickjs-hs#readme
changelog-type: markdown
hash: 98d3b234d79b4b749a36ab0f41ea8d6aaaab6c9ef5a8ed04799184689abda51d
test-bench-deps:
  exceptions: -any
  quickjs-hs: -any
  base: -any
  unordered-containers: -any
  text: -any
  HUnit: '>=1.6.0.0 && <1.7'
  tasty-quickcheck: '>=0.9 && <0.11'
  tasty-hunit: '>=0.10 && <0.11'
  tasty: '>=1.0 && <1.3'
  QuickCheck: '>=2.9 && <2.14'
  aeson: -any
  vector: -any
maintainer: goodlyrottenapple@gmail.com
synopsis: Wrapper for the QuickJS Javascript Engine
changelog: |-
  # Changelog for quickjs-hs

  ### 0.1.2

  * removed `DerivingVia` for better backwards compatibility


  ### 0.1.1

  * relaxed bounds on packages
  * removed explicit TemplateHaskell dependency

  ### 0.1

  * initial release
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.11'
  inline-c: '>=0.5 && <0.10'
  base: '>=4.9 && <5'
  time: '>=1.8 && <1.10'
  unordered-containers: '>=0.2.8 && <0.3'
  text: '>=1.2.0 && <1.3'
  containers: '>=0.5 && <0.7'
  string-conv: '>=0.1.2 && <0.2'
  unliftio-core: '>=0.1 && <0.2.1'
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5 && <0.6'
  scientific: '>=0.3.5 && <0.4'
  aeson: '>=1.1 && <1.6'
  vector: '>=0.12 && <0.13'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Sam Balco
latest: 0.1.2
description-type: markdown
description: |-
  # quickjs-hs

  ![Tests Cabal](https://github.com/goodlyrottenapple/quickjs-hs/workflows/Tests%20Cabal/badge.svg)


  This package provides a Haskell wrapper for the [QuickJS](https://bellard.org/quickjs/) Javascript Engine.

  ## Features

  The functionality is quite basic and is currently limited to:
  - evaluating JS code
  - calling a JS function in the global scope
  - marshalling [Aeson Values](https://hackage.haskell.org/package/aeson-1.5.3.0/docs/Data-Aeson.html#t:Value) to and from JSValues.


  ## Examples
  Evaluate an expression:

  ```haskell
  import Quickjs

  one_plus_two = quickjs $ do
    res <- eval "1+2"
    liftIO $ print res
  ```

  Declare a function and call it on an argument:

  ```haskell
  call_f = quickjs $ do
    _ <- eval_ "f = (x) => x+1"
    res <- eval "f(2)"
    liftIO $ print res
  ```

  Pass a Haskell value (which has a [ToJSON](https://hackage.haskell.org/package/aeson-1.5.3.0/docs/Data-Aeson.html#t:ToJSON) instance) to the JS runtime:

  ```haskell
  aeson_marshall = quickjs $ do
    _ <- eval_ "f = (x) => x+1"
    res <- withJSValue (3::Int) $ \x -> call "f" [x]
    liftIO $ print res
  ```

  ## Contributing

  Please feel free to report bugs/submit feature requests via the [github issue tracker](https://github.com/goodlyrottenapple/quickjs-hs/issues) and submit any pull requests to the [git repository](https://github.com/goodlyrottenapple/quickjs-hs/)
license-name: MIT
