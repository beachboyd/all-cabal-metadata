homepage: http://github.com/tepf/QuickPlot#readme
changelog-type: ''
hash: f80990815728ee926c8c30a1c79be823f2465b00bcd026d3cc5bd5e2f29a7b7a
test-bench-deps: {}
maintainer: tepf@tutanota.com
synopsis: Quick and easy data visualization with Haskell
changelog: ''
basic-deps:
  snap: ! '>=0.14.0.6'
  bytestring: ! '>=0.10.6'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2.2'
  websockets: ! '>=0.9.6.1'
  parsec: ! '>=3.1.9'
  websockets-snap: ! '>=0.9.2'
  snap-core: ! '>=0.9.8'
  attoparsec: ! '>=0.13.0.1'
  scientific: ! '>=0.3.4.4'
  haskell-src-meta: ! '>=0.6.0.13'
  aeson: ! '>=0.9.0.1 && <0.11'
  template-haskell: ! '>=2.10'
  vector: ! '>=0.11'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: tepf
latest: 0.1.0.1
description-type: markdown
description: ! "# QuickPlot\n\n![QuickPlot Demo](https://raw.githubusercontent.com/tepf/QuickPlot/master/QuickPlotDemo.gif)\n\n\n\n\nHow
  does it work?\n----------------\n\nHaskell creates a simple server that runs in
  the background and sends data to a browser that visualizes it. In the demo above
  the browser and ghci runs inside [Atom](https://atom.io), but you can use any editor
  (even [butterflies](https://xkcd.com/378/)) with a fairly modern browser. Once the
  data arrives at the browser any JavaScript visualization library could take care
  of it like for example [plot.ly](https://plot.ly/javascript/)\n\n\n\n\n\nHow do
  I use it?\n----------------\n\nQuickPlot was designed to make interactive data exploration
  easier. So the following won't make much sense outside of ghci\n\n**0. Install QuickPlot**\n\n````haskell\nstack
  install QuickPlot\ncabal install QuickPlot\n-- or manually\n````\n\n**1. Import
  QuickPlot**\n\n````haskell\nimport QuickPlot\nimport QuickPlot.Plotly -- if you
  want to use the plotly library\n````\n\n**2. Start QuickPlot**\n\n````haskell\nrunQuickPlot\n````\n\n**3.
  Connect to QuickPlot**\n\nGo to the address `runQuickPlot` printed\n\n\n**4. Plot**\n\nHere
  is the less verbose version of the [full example](https://github.com/tepf/QuickPlot/blob/master/examples/BasicPlotting.lhs):\n\n````haskell\n--
  As box aficionados we just measured the weight of all our boxes at home\n-- and
  gathered the following data\nblueBoxSizes   = [1.1, 1.8, 2.9, 3.3] :: [Double]\norangeBoxSizes
  = [3.1, 3.8, 5.9, 2.3] :: [Double]\n\n-- We create traces from our data\nblueBoxTrace
  = [plotly|{\n      y    : #{ blueBoxSizes },\n      type : \"box\"\n}|]\norangeBoxTrace
  = [plotly|{\n      y    : #{ orangeBoxSizes },\n      type : \"box\"\n}|]\n\n--
  And finally gain great insight from the data visualization\nplot [blueBoxTrace,
  orangeBoxTrace]\n````\n\n\n\n\n\nFAQ\n---\n\n#### Does it work on X?\n\nProbably
  yes. If your browser supports WebSockets, HTML5, CSS3 you'll be fine. If not please
  update your browser. Find out more about [here](http://caniuse.com/)\n\n#### Can
  you implement library X?\n\nIf the library takes JSON as an input, submit an issue.
  Libraries like [D3.js](https://d3js.org) are problematic however. Graphs in D3 are
  created programatically and therefore you can't just pick a graph type and say plot
  it. You have to create them from scratch. If there are examples that give you goosebumps
  it is possible to integrate them separately. Or you just include it as a user script
  yourself (once this is implemented)\n\n#### How can I help?\n\nThere are many ways
  to do so:\n\n- If you know JavaScript/HTML/CSS you could make the UI prettier, more
  user friendly or easier extensible\n- Implement a visualization library in JavaScript\n\n####
  Can this library only use JavaScript libraries?\n\nTechnically any library that
  Haskell can convice to create graphics is compatible.\n"
license-name: GPL-3.0-only
