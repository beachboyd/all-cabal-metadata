homepage: http://www.mathstat.dal.ca/~selinger/quipper/
changelog-type: ''
hash: b502c2bd2bd551b22852a0d620a151ffd966032ac0f724bbe65d1393003bb957
test-bench-deps: {}
maintainer: leonardo.taglialegne@gmail.com
synopsis: An embedded, scalable functional programming language for quantum computing.
changelog: ''
basic-deps:
  easyrender: ! '>=0.1 && <0.2'
  unix: ! '>=2.6 && <2.8'
  base: ! '>=4.6 && <4.10'
  primes: ! '>=0.2 && <0.3'
  process: ! '>=1.1 && <1.5'
  containers: ! '>=0.5 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  random: ! '>=1.0 && <1.2'
  template-haskell: ! '>=2.8 && <2.12'
  directory: ! '>=1.2 && <1.3'
all-versions:
- '0.7'
- '0.8'
- 0.8.1
- 0.8.2
author: Applied Communication Sciences
latest: 0.8.2
description-type: text
description: ! "This file is part of Quipper. Copyright (C) 2011-2016. Please see
  the\nfile COPYRIGHT for a list of authors, copyright holders, licensing,\nand other
  details. All rights reserved.\n\n======================================================================\n\nThis
  is Quipper.\n\nCopyright, License, and Disclaimers\n===================================\n\nSee
  the file COPYRIGHT.\n\nInstalling the necessary components \n===================================\n\nFor
  installing on Linux, Mac OS X, and other Unix-like systems: please\nfirst see the
  instructions in INSTALLING, then continue to read below.\n\nFor installing on Windows:
  please first see the instructions in\nINSTALLING.windows, then continue to read
  below.\n\nConfiguring the software environment\n=====================================\n\nBefore
  you can compile Quipper, you have to install some Haskell\nlibraries:\n\n * random
  >= 1.0.1.1\n * mtl >= 2.1.2\n * primes >= 0.2.1.0\n * Lattices >= 0.0.1 (note: \"Lattices\"
  must be capitalized)\n * zlib >= 0.5.4.1\n * easyrender >= 0.1.0.0\n * fixedprec
  >= 0.2.1.0\n * newsynth >= 0.3.0.1\n * containers >= 0.5.2.1\n * set-monad >= 0.1.0.0\n
  * QuickCheck >= 2.6\n\nThis can be done using Cabal. On the command line, use the\nfollowing
  commands:\n\ncabal update\n\nthen:\n\ncabal install random\ncabal install mtl\ncabal
  install primes\ncabal install Lattices\ncabal install zlib\ncabal install easyrender\ncabal
  install fixedprec\ncabal install newsynth\ncabal install containers\ncabal install
  set-monad\ncabal install QuickCheck\n\nNote: When upgrading from a previous version
  of Quipper, please ensure\nthat the fixedprec library is version 0.2.1.0 or newer;
  Quipper 0.6\nwill not work with earlier versions of fixedprec. Also ensure that
  the\nnewsynth library has been compiled against the same version of\nfixedprec as
  Quipper. If you get strange error messages related to\nfixedprec, try\n\ncabal install
  fixedprec \ncabal install newsynth --reinstall\n\nYou now have all the necessary
  Haskell libraries.\n\nSpecial note for GHC 7.4.2:\n===========================\n\nThe
  combination of GHC 7.4.2 and Template Haskell 2.8.0.0 is not\npossible, because
  it triggers a GHC bug. If you get a compilation\nerror of the form: \"ghc: panic!
  (the 'impossible' happened)\", follow\nthese steps:\n\n# Remove Template Haskell
  2.8.0.0:\n\nghc-pkg unregister --force template-haskell-2.8.0.0\n\n# Reinstall QuickCheck
  (because of a broken dependency). This will\n# also install template-haskell-2.7.0.0:\n\ncabal
  install QuickCheck\n\nSpecial note for GHC 7.10.*:\n============================\n\nQuipper
  will not work with ghc 7.10. Please use ghc 7.8 or earlier, or\nghc 8.0 or later.\n\nBrowsing
  the documentation and source code\n==========================================\n\nWhile
  it is possible the browse the Quipper source code in a text\neditor, it is much
  nicer to browse the documented source by pointing\nyour web browser to doc/frames.html
  in this Quipper distribution. The\ndocumented source is fully cross-referenced and
  indexed, with links to\ncolor-coded raw source files.\n\n\nBuilding the documentation\n==========================\n\nPlease
  note: our documentation uses special mark-up and requires\ncustom tools to be built.
  Therefore it is not currently possible for\nusers to re-build the documentation.\n\n\nBuilding
  the included algorithms and programs\n=============================================\n\nCompilation,
  and execution of generated code, are done from the command\nline interface.\n\nThe
  code can be built with \"make\" from the main directory.  This will\nbuild an executable
  file in each Algorithm subdirectory, which can be\nrun with various command line
  parameters to do different things. Run\neach command with option --help to see a
  summary of the usage\ninformation.\n\nIn the following, we describe the set of options
  for the algorithms\nthat were implemented.\n\n\nRunning the bwt program\n=======================\n\nUsage
  for Binary Welded Tree algorithm:\n---------------------------------------\n\nUsage:
  bwt [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -O
  \            --oracle               output only the oracle\n  -K             --oraclec
  \             output the \"classical\" oracle as a classical circuit\n  -G             --graph
  \               print colored graph computed from oracle\n  -S             --simulate
  \            run simulations of some circuit fragments for tree height n\n  -f <format>
  \   --format=<format>      output format for circuits (default: preview)\n  -g <gatebase>
  \ --gatebase=<gatebase>  type of gates to decompose into (default: logical)\n  -o
  <oracle>                           select oracle to use (default: orthodox)\n  -n
  <n>         --height=<n>           set tree height (positive; default 5)\n  -c <c>
  \        --color=<c>            color to use with --oracle (0..3, default 0)\n  -s
  <s>         --repeats=<s>          set parameter s (iteration count; default 1)\n
  \ -l             --large                set large problem size: n=300, s=336960\n
  \ -t <dt>        --dt=<dt>              set parameter dt (simulation time step;
  default pi/180)\nPossible values for format are: eps, pdf, ps, postscript, ascii,
  preview, gatecount.\nPossible values for gatebase are: logical, binary, toffoli,
  cliffordt_old, cliffordt, cliffordt_keepphase, standard, strict, approximate, approximate_keepphase,
  exact, trimcontrols.\nPossible values for oracle are: orthodox, simple, blackbox,
  classical, template, optimized.\n\nExamples of command line options:\n---------------------------------\n\n*
  Show the complete circuit for the BWT algorithm using the\n  \"orthodox\" (official
  GFI) oracle, with n=5 and s=1:\n\n  ./bwt -C -o orthodox -n 5 -s 1\n\n  (One can
  point out the different parts of the algorithm: 8 oracle\n  calls, and 4 very short
  diffusion steps).\n\n* Show the same, using the \"Template Haskell\" oracle: this
  oracle is\n  much larger, but automatically generated from classical code (and\n
  \ completely unoptimized):\n\n  ./bwt -C -o template -n 5 -s 1\n\n  The \"template
  oracle\" is defined in BWT/Template.hs. See the\n  documentation of the module Quipper/CircLifting
  for how it works.\n\n* Show the graph of the BWT algorithm, which is obtained by\n
  \ simulating the orthodox oracle (and therefore offers some evidence\n  for the
  correctness of the oracle implementation):\n\n  ./bwt -G -o orthodox -n 5\n\n* Show
  the orthodox oracle for n=300. Note that this will result in a\n  big file. One
  has to zoom in substantially to see gates. \n\n  ./bwt -O -o orthodox -n 300\n\n*
  Show the complete circuit for the BWT algorithm, but decompose\n  everything into
  binary gates:\n\n  ./bwt -C -o orthodox -n 5 -s 1 -g binary \n\n* Show the oracle
  from Figure 1a (alternate oracle).\n\n  ./bwt -C -o figure1a\n\n* The same, decomposed
  into binary+Toffoli gates, or binary gates\n  only, respectively:\n\n  ./bwt -C
  -o figure1a -g toffoli\n  ./bwt -C -o figure1a -g binary\n\n* Show gate counts for
  BWT algorithm with n=300 and s=1, using\n  \"orthodox\" oracle:\n\n  ./bwt -C -o
  orthodox -n 300 -s 1 -f gatecount\n\n* Show gate counts for same, after decomposition
  to binary gates:\n\n  ./bwt -C -o orthodox -n 300 -s 1 -f gatecount -g binary \n\nObviously,
  most other combinations of command line options are also\npossible, for example:
  decompose to toffoli gates and then simulate\nand show the graph. Some other combinations
  are not legal: for\nexample, decomposing to binary gates and then simulating. (The\nclassical
  simulator will complain that the circuit is not boolean; it\ncontains \"V\" gates).\n\n*
  Similarly, one can run demos for the triangle finding\n  algorithm using various
  command line options. \n\nNote that the triangle finding algorithm is not a deliverable;
  it is a\nwork in progress. The only implemented algorithm that is officially a\ndeliverable
  is the \"orthodox\" BWT implementation in BWT.BWT.\n\nRunning the bf program\n======================\n\nUsage
  for the Boolean Formula algorithm:\n----------------------------------------\n\nUsage:
  bf [OPTION...]\n  -C             --circuit              output the whole circuit
  (default)\n  -D             --demo                 run a demo of the circuit\n  -H
  \            --hexboard             output a representation of the initial state
  of the given oracle, i.e. the game played so far\n  -p <part>      --part=<part>
  \         which part of the circuit to use (default: whole)\n  -o <oracle>    --oracle=<oracle>
  \     which oracle to use (default: small)\n  -m <moves>     --moves=<moves>        which
  moves have already been made (default: [])\n  -f <format>    --format=<format>      output
  format for circuits (default: _preview)\n  -d             --dummy                set
  to only use a dummy HEX gate instead of the full hex circuit\n  -h             --help
  \                print usage info and exit\n  -g <gatebase>  --gatebase=<gatebase>
  \ type of gates to decompose the output circuit into (default: logical)\nPossible
  values for part are: whole, u, oracle, hex, checkwin_red, diffuse, walk, undo_oracle.\nPossible
  values for oracle are: 9by7, small, custom x y t.\nPossible values for format are:
  eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible values for gatebase
  are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase, standard,
  strict, approximate, approximate_keepphase, exact, trimcontrols.\n\nRunning the
  cl program\n======================\n\nUsage for the Class Number algorithm:\n-------------------------------------\n\nUsage:
  cl [OPTION...]\n  -h               --help                 print usage info and exit\n
  \ -f <format>      --format=<format>      output format for circuits        (default:
  ASCII)\n  -g <gatebase>    --gatebase=<gatebase>  gates to decompose into           (default:
  Logical)\n  -1                                      output the circuit for stage
  1 of the algorithm (default)\n  -4                                      output the
  circuit for stage 4 of the algorithm\n  -S <subroutine>  --sub=<subroutine>     output
  the circuit for a specific subroutine\n  -R               --regulator            classically,
  find the regulator, given Δ\n  -F                                      classically,
  find the fundamental unit, given Δ\n  -P                                      classically,
  find the fundamental solution of Pell’s equation, given Δ\n  -d <N>           --delta=<N>
  \           discriminant Δ (a.k.a. D)                 (default: 28)\n  -s <N>           --ss=<N>
  \              estimated bound on period S, for stage 1 (default: 2)\n  -i <N>                                  estimated
  bound on log_2 S, for stage 1 (default: 1)\n  -r <N>           --rr=<N>               approximate
  regulator R, for stage 4  (default: 12.345)\n  -q <N>                                  The
  parameter q, for stage 4        (default: 4)\n  -k <N>                                  The
  parameter k, for stage 4        (default: 3)\n  -n <N>                                  The
  parameter n, for stage 4        (default: 3)\n  -m <N>                                  The
  parameter m, for stage 4        (default: 5)\n                   --seed=<N>             Random
  seed (0 for seed from time)(default: 1)\nPossible values for format are: eps, pdf,
  ps, postscript, ascii, preview, gatecount.\nPossible values for gatebase are: logical,
  binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase, standard, strict,
  approximate, approximate_keepphase, exact, trimcontrols.\nPossible values for subroutine
  are: rho, rhoinv, normalize, dotprod, starprod, fn.\n\nRunning the gse program\n=======================\n\nUsage
  for Ground State Estimation algorithm:\n--------------------------------------------\n\nUsage:
  gse [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -T
  <indices>   --template=<indices>   output a particular circuit template\n  -f <format>
  \   --format=<format>      output format for circuits (default: Preview)\n  -g <gatebase>
  \ --gatebase=<gatebase>  gates to decompose into (default: Logical)\n  -m <N>         --orbitals=<N>
  \        number of orbitals (default: 4)\n  -o <N>         --occupied=<N>         number
  of occupied orbitals (default: 2)\n  -b <N>         --precision=<N>        number
  of precision qubits (default: 3)\n  -D <energy>    --delta_e=<energy>     energy
  range (default: 6.5536)\n  -E <energy>    --e_max=<energy>       maximum energy
  (default: -3876.941)\n                 --n0=<N>               use N_k = n0 * 2^k
  (default: N_k = 1)\n  -l             --large                set large problem size
  (m=208, o=84, b=12, n0=100)\n  -x             --orthodox             use the Coulomb
  operator of Whitman et al.\n                 --h1=<file>            filename for
  one-electron data (default: \"h_1e_ascii\")\n                 --h2=<file>            filename
  for two-electron data (default: \"h_2e_ascii\")\n  -d <file>      --datadir=<file>
  \      directory for one- and two-electron data (default: current)\nPossible values
  for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible values
  for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nIndices
  can be specified as p,q or p,q,r,s (with no spaces)\n\nRunning the qls program\n=======================\n\nUsage
  for Quantum Linear Systems algorithm:\n-------------------------------------------\n\nUsage:
  qls [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -O
  <name>      --oracle=<name>        output only the oracle <name> (default: r) \n
  \ -f <format>    --format=<format>      output format for circuits (default: gatecount)\n
  \ -g <gatebase>  --gatebase=<gatebase>  type of gates to decompose into (default:
  logical)\n  -o <oracle>                           select oracle implementation to
  use (default: blackbox)\n  -p <param>     --param=<param>        choose a set of
  parameters (default: dummy).\n  -P <n>         --peel=<n>             peel <n> layers
  of boxed subroutines (default: 0).\nPossible values for format are: ascii, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nPossible
  values for oracle implementation are: matlab, blackbox.\nPossible values for param
  are: dummy, small, large.\nPossible values for oracle are: r, b, A[band][t|f]. E.g.
  \"-OA1t\" asks for band 1 with boolean argument True. For all three oracles, the
  factors are set up to 1.0.\n\nRunning the tf program\n======================\n\nUsage
  for Triangle Finding algorithm:\n-------------------------------------\n\nUsage:
  tf [OPTION...]\n  -h               --help                     print usage info and
  exit\n  -f <format>      --format=<format>          output format for circuits (default:
  preview)\n  -g <gatebase>    --gatebase=<gatebase>      type of gates to decompose
  into (default: logical)\n  -l <l>           --l=<l>                    parameter
  l (default: 4)\n  -n <n>           --n=<n>                    parameter n (default:
  3)\n  -r <r>           --r=<r>                    parameter r (default: 2)\n  -C
  \              --QWTFP                    output the whole circuit (default)\n  -O
  \              --oracle                   output only the oracle\n  -s <subroutine>
  \ --subroutine=<subroutine>  output the chosen subroutine (default: adder)\n  -Q
  \                                         use alternative qRAM implementation\n
  \ -o <oracle>                                 select oracle to use (default: blackbox)\n
  \ -A               --arith                    test/simulate the arithmetic routines\n
  \ -T               --oracletest               test/simulate the oracle\nPossible
  values for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nPossible
  values for oracle are: orthodox, blackbox.\nPossible values for subroutine are:
  zero, initialize, hadamard, setup, qwsh, diffuse, fetcht, storet, fetchstoret, fetche,
  fetchstoree, update, swap, a15, a16, a17, a18, gcqwalk, gcqwstep, convertnode, testequal,
  pow17, mod3, sub, add, mult.\n\nRunning the usv program\n=======================\n\nUsage
  for Unique Shortest Vector algorithm:\n-------------------------------------------\n\nUsage:
  usv [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -f <format>    --format=<format>      output format for circuits (default: eps)\n
  \ -g <gatebase>  --gatebase=<gatebase>  type of gates to decompose into (default:
  logical)\n  -n <n>         --n=<n>                parameter n (default: 5)\n  -b
  <b>         --b=<b>                parameter b (default: 5X5 with entries = 1)\n
  \ -s <s>         --s=<s>                Random number generator seed s (default:
  1)\n  -F                                    output subroutine f (depends on b).\n
  \ -G                                    output subroutine g (depends on b).\n  -H
  \                                   output subroutine h (depends on n).\n  -U                                    output
  algorithm 1 (depends on b).\n  -Q                                    output algorithm
  2 (depends on b).\n  -R                                    output algorithm 3 (depends
  on b).\n  -T                                    output algorithm 4 (depends on n).\n
  \ -S                                    output sieving subroutine (depends on n).\n
  \ -D                                    output algorithm 5 (depends on n).\n  -t
  \                                   test subroutine h (depends on n).\nPossible
  values for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\n\n\nInvoking
  the Quipper compiler\n=============================\n\nThe Quipper compiler is called
  \"quipper\", and is located in the\ndirectory quipper/scripts. The easiest way to
  use it is to add the\n\"scripts\" directory to the environment variable PATH. If
  you move the\nquipper script around, make sure to keep the other scripts in the
  same\ndirectory as the quipper script, and to update QUIPPER_BASE in the\n\"quipper\"
  and \"quipperi\" scripts to point to the directory where the\nQuipper sources are
  located. On the Windows operating system, you\nshould use \"quipper.bat\"; on all
  other operating systems, just\n\"quipper\" will do. \n\nIn reality, the \"quipper\"
  script is a wrapper around the GHC Haskell\ncompiler, providing some pre-processing
  and setting required\ncompilation options. There is also a \"quipperi\" script for
  an\ninteractive version of the compiler, which is akin to \"ghci\".\n\nTo try this
  out, the directory \"tests\" contains various small\nstand-alone programs that can
  be compiled with Quipper, and are useful\nfor demonstrating the basic Quipper idiom.
  Each program can be\ncompiled and run like this:\n\nFor example:\n\n# to compile
  and run on Unix (or on Unix with the MSYS/bash):\nquipper And_gate.hs\n./And_gate\n\n#
  to compile and run on Windows with cmd.exe:\nquipper.bat And_gate.hs\nAnd_gate\n\nNote
  that there is also a Makefile, so \"make\" can be used to build the\nprograms as
  well.\n\nIf the previewer is working properly, the circuit should show up in\nAcrobat
  Reader. If not, either change \"Preview\" to \"EPS\" in the file\n(for PostScript
  output), or trouble-shoot the previewer installation\n(if you are on Windows, see
  INSTALLING) and/or contact Benoit Valiron\n<benoit.valiron@monoidal.net> or Peter
  Selinger\n<selinger@mathstat.dal.ca> for help.\n\nThe naming of built-in gates and
  many operators can be found out by\nlooking at the documentation of the \"Quipper\"
  module (the main public\ninterface of the Quipper system).\n\n\nTroubleshooting
  Guidelines\n==========================\n\nIn case of problems, please contact\n\n
  * Benoit Valiron <benoit.valiron@monoidal.net>\n * Peter Selinger <selinger@mathstat.dal.ca>\n"
license-name: BSD-3-Clause
