homepage: https://github.com/nick8325/quickcheck
changelog-type: text
hash: e4c56f52532c993fc4460aeac7a2543dc03a68fba36eff420f3294d4d2622416
test-bench-deps:
  base: -any
  QuickCheck: -any
maintainer: Nick Smallbone <nick@smallbone.se>; see also QuickCheck mailing list (https://groups.google.com/forum/#!forum/haskell-quickcheck)
synopsis: Automatic testing of Haskell programs
changelog: ! "QuickCheck 2.11.1 - 2.11.3 (released 2018-01-12)\n\t* Cosmetic fixes.\n\nQuickCheck
  2.11 (released 2018-01-12)\n\t* New features:\n\t\t- InfiniteList modifier generates
  infinite lists and shows\n\t\t  only the relevant part.\n\t\t- applyArbitrary2/3/4
  for applying a function to random\n\t\t  arguments.\n\t\t- Template Haskell function
  allProperties returns all\n\t\t  properties in a module.\n\n\t* Applicative Gen
  instances do less splitting.\n\t* Property now has a Typeable instance.\n\t* (===)
  now prints correct output when the property is true.\n\t* Test.QuickCheck now exports
  Fun constructor.\n\t* verboseCheck output is now slightly less confusing.\n\nQuickCheck
  2.10.1 (released 2017-10-06)\n\t* Arbitrary instances for Foreign.C.Types are available
  in more\n\t  GHC versions.\n\t* Fixed a bug where withMaxSuccess didn't adjust the
  allowed\n\t  number of discarded tests.\n\t* Remove quadratic behaviour in terminal
  output.\n\nQuickCheck 2.10 (released 2017-06-15)\n\t* New combinators:\n\t\t- withMaxSuccess
  sets the maximum number of test cases for a property.\n\t\t- shrinkMap/shrinkMapBy
  are helpers for defining shrink functions.\n\t\t- total checks that a value is non-crashing.\n\t\t-
  suchThatMap is similar to 'suchThat'\n\t\t  but takes a Maybe-returning function
  instead of a predicate.\n\t\t- getSize returns the current test case size.\n\n\t*
  Random strings and characters now include Unicode characters by\n\t  default. To
  generate only ASCII characters, use the new\n\t  ASCIIString modifier or arbitraryASCIIChar
  generator.\n\t  The following modifiers and generators also control the\n\t  kind
  of strings generated: UnicodeString, PrintableString,\n\t  arbitraryUnicodeChar,
  arbitraryPrintableChar.\n\n\t* QuickCheck no longer catches asynchronous exceptions,
  which\n\t  means that pressing ctrl-C will now cancel testing without\n\t  printing
  a counterexample. If you are debugging an infinite loop,\n\t  please use the 'within'
  combinator or 'verboseCheck' instead.\n\t  ('within' is better as it allows the
  counterexample to be\n\t  shrunk.)\n\n\t* Much of Test.QuickCheck.Function (showable
  random functions)\n\t  is now exported from Test.QuickCheck.\n\t\t- Test.QuickCheck.Function
  now defines functions and\n\t\t  pattern synonyms which simplify testing functions
  of\n\t\t  more than one argument: apply2, apply3, Fn2, Fn3.\n\n\t* New typeclasses
  Arbitrary1 and Arbitrary2 which lift Arbitrary\n\t  to unary/binary type constructors,
  like in Data.Functor.Classes.\n\n\t* Some Arbitrary instances have been removed:
  NonEmpty, Natural.\n\t  This is because they resulted in a lot of extra dependencies.\n\t
  \ You can now find them in the quickcheck-instances package.\n\t  Alternatively,
  use the NonEmptyList and NonNegative modifiers.\n\n\t* New Arbitrary instances for
  the following types: Proxy, ExitCode,\n\t  WrappedMonad, WrappedArrow, QCGen, and
  the types in\n\t  Foreign.C.Types and Data.Functor.{Product,Compose}.\n\t  Also
  a Function instance for Word.\n\n\t* The functions in Test.QuickCheck.Monadic which
  take an argument\n\t  of type PropertyM m a now expect that 'a' to be Testable,
  and test it.\n\t  To reduce breakage from this, () is now an instance of Testable
  which\n\t  always succeeds.\n\t\t- PropertyM now has a MonadFail instance on recent
  GHCs.\n\t\t  Furthermore, the constraints on some instances were loosened.\n\n\t*
  Miscellaneous API changes:\n\t\t- Result now returns the counterexample as a list
  of strings.\n\t\t  See the \"failingTestCase\" field.\n\t\t- Args now has a `maxShrinks`
  argument, the maximum number of\n\t\t  shrinks to try before giving up shrinking.\n\t\t-
  The 'labels' field of Result now encodes frequencies as Doubles\n\t\t  rather than
  Ints.\n\n\t* Bugfixes:\n\t\t- 'Test.QuickCheck.Function', 'Test.QuickCheck.Poly',
  and\n\t\t  'Test.QuickCheck.Monadic' are now Safe modules.\n\t\t- Result.theException
  and Result.reason were taken from\n\t\t  the pre-shrunk counterexample, not the
  shrunk one.\n\t\t- The Testable Property instance improperly used 'again'.\n\t\t-
  Gen.>>= is strict in the result of split, fixing a space leak.\n\t\t- within now
  gives a better error message on timeout\n\n\t* Some more examples and links have
  been added to the documentation.\n\nQuickCheck 2.9.2 (released 2016-09-15)\n\t*
  Fix a bug where some properties were only being tested once\n\t* Make shrinking
  of floating-point values less aggressive\n\t* Add function chooseAny :: Random a
  => Gen a\n\nQuickCheck 2.9.1 (released 2016-07-11)\n\t* 'again' was only used in
  forAllShrink, not forAll\n\nQuickCheck 2.9 (released 2016-07-10)\n\t* Arbitrary,
  CoArbitrary and Function instances for more types\n\t* Generics for automatic Function
  instances\n\t* A new combinator \"again\" which undoes the effect of \"once\"\n\t*
  Remove \"exhaustive\" from Testable typeclass;\n\t  instead, combinators which are
  nonexhaustive (such as forAll)\n\t  call \"again\", which should be more robust\n\n\t*
  Drop support for GHC 6.x\n\n\t* Fixed bugs:\n\t\t* arbitrarySizedBoundedIntegral
  wasn't generating huge integers\n\t\t* verboseCheck failed with Test.QuickCheck.Function\n\t\t*
  label had a space leak\n\nQuickCheck 2.8.2 (released 2016-01-15)\n\t* GHC 8 support\n\t*
  Add Arbitrary and CoArbitrary instances for types in\n\t  containers package\n\t*
  Improve speed of shuffle combinator\n\t* Only print to stderr if it's a terminal.\n\t*
  Small changes: slightly improve documentation,\n\t  remove redundant constraints
  from some functions' types,\n\t  small improvements to Test.QuickCheck.All.\n\nQuickCheck
  2.8.1 (released 2015-04-03)\n\t* Fix bug where exceptions thrown printing counterexamples
  weren't\n\t  being caught when terminal output was disabled\n\t* Don't export Test.QuickCheck.Property.result\n\nQuickCheck
  2.8 (released 2015-03-18)\n\t* New features:\n\t\t* Support for GHC 7.10\n\t\t*
  Arbitrary instance for Natural\n\t\t* New generators shuffle and sublistOf\n\t\t*
  Support for generic coarbitrary\n\t\t* When using the cover combinator, insufficient
  coverage now\n\t\t  causes the property to fail\n\n\t* API changes:\n\t\t* Test.QuickCheck.Function:
  new pattern synonym Fn\n\t\t* genericShrink no longer requires Typeable\n\t\t* Result
  has a new constructor InsufficientCoverage\n\t\t* resize throws an error if the
  size is negative\n\n\t* Bug fixes:\n\t\t* Fix memory leaks\n\t\t* Exceptions thrown
  by callbacks now cause the test to fail\n\t\t* Fixed a bug where the cover combinator
  wouldn't give a\n\t\t  warning if coverage was 0%\n\nQuickCheck 2.7.3 (released
  2014-03-24)\n\t* Add annotations for Safe Haskell.\n\nQuickCheck 2.7.2 (released
  2014-03-22)\n\t* Fix bug in cabal file which broke cabal test\n\nQuickCheck 2.7.1
  (released 2014-03-20)\n\t* Fixed bug - the Small modifier didn't work on unsigned
  types\n\t* Changed arbitrarySizedIntegral to have an Integral constraint\n\t  instead
  of just Num\n\nQuickCheck 2.7 (released 2014-03-19)\n\n\t* New features:\n\t\t*
  New genericShrink function provides generic shrinking with GHC.\n\t\t* New combinator
  x === y: fails if x /= y, but also prints their values\n\t\t* New function generate
  :: Gen a -> IO a for running a generator.\n\t\t* New combinators infiniteList and
  infiniteListOf for generating infinite lists.\n\t\t* Several combinators added to
  the main Test.QuickCheck module which\n\t\t  were previously languishing in other
  modules. Of particular interest:\n\t\t  quickCheckAll, ioProperty.\n\t\t* New combinators
  delay and capture which can be used (unsafely!)\n\t\t  to reuse the random number
  seed. Useful for generating\n\t\t  polymorphic (rank-2) values.\n\t\t* A new Discard
  data type and a Testable instance for discarding test cases.\n\t\t* All modifiers
  now have Functor instances and accessor functions.\n\t\t* Pressing ctrl-C during
  shrinking now shows the last failed\n\t\t  test case, rather than the current shrinking
  candidate.\n\t\t* Experimental support for UHC. You will need the latest version
  of Cabal from git.\n\n\t* Better distribution of test data:\n\t\t* The Int generator
  now only generates fairly small numbers.\n\t\t* The new Small and Large modifiers
  control the distribution of integers\n\t\t  (Small generates small numbers, Large
  from the whole range).\n\t\t* Floating-point numbers shrink better.\n\n\t* Improved
  random number generation:\n\t\t* QuickCheck now uses TFGen rather than StdGen on
  newer versions\n\t\t  of GHC, because StdGen's random numbers aren't always random.\n\t\t*
  'variant' now uses a prefix code. This should prevent some\n\t\t  potential bananaskins
  with coarbitrary.\n\n\t* API changes:\n\t\t* The Gen monad now uses an abstract
  type QCGen rather than StdGen.\n\t\t* The Result type now returns the thrown exception
  and number\n\t\t  of failed shrink attempts.\n\t\t* Property is now a newtype rather
  than Gen Prop as it was before.\n\t\t* promote is moved into the new module Test.QuickCheck.Gen.Unsafe.\n\t\t*
  'printTestCase' is deprecated - its new name is 'counterexample'\n\t\t* 'morallyDubiousIOProperty'
  is deprecated - its new name is\n\t\t  'ioProperty', no moral judgement involved
  :)\n\nQuickCheck 2.6, released 2013-03-07\n\n\t* Add convenience Function instances
  for up to 7-tuples\n\t* Make stderr line buffered to reduce console I/O.\n\t* Return
  a flag to say whether the test case was interrupted.\n\nQuickCheck 2.5, released
  2012-06-18\n\n\t* Replace maxDiscard with maxDiscardRatio\n\t* Remove Testable ()
  instance.\n\t* Added a 'discard' exception that discards the current test case\n\t*
  Add accessors for modifiers (where it makes sense)\n\t* Rename 'stop' to 'abort'
  to avoid a name clash\n\t* Added a 'once' combinator\n\t* If a property is of type
  Bool, only run it once\n\t* Add coarbitraryEnum to Test.QuickCheck module.\n\t*
  Add 'coarbitrary' helper for Enums.\n\t* Rejiggled the formatting code to support
  multi-line error messages\n\t* Add instances for Ordering and Fixed.\n\t* Added
  arbitraryBoundedEnum generator (thanks to Antoine Latter).\n\t* Add verboseCheckAll
  and polyverboseCheck function for usability.\n"
basic-deps:
  tf-random: ! '>=0.4'
  base: ! '>=4.3 && <5'
  containers: -any
  transformers: ! '>=0.3'
  random: -any
  deepseq: -any
  template-haskell: ! '>=2.4'
all-versions:
- '1.0'
- '1.1.0.0'
- '1.2.0.0'
- '1.2.0.1'
- '2.1'
- '2.1.0.1'
- '2.1.0.2'
- '2.1.0.3'
- '2.1.1'
- '2.1.1.1'
- '2.1.2'
- '2.2'
- '2.3'
- '2.3.0.1'
- '2.3.0.2'
- '2.4'
- '2.4.0.1'
- '2.4.1'
- '2.4.1.1'
- '2.4.2'
- '2.5'
- '2.5.1'
- '2.5.1.1'
- '2.6'
- '2.7'
- '2.7.1'
- '2.7.2'
- '2.7.3'
- '2.7.4'
- '2.7.5'
- '2.7.6'
- '2.8'
- '2.8.1'
- '2.8.2'
- '2.9'
- '2.9.1'
- '2.9.2'
- '2.10'
- '2.10.0.1'
- '2.10.1'
- '2.11.3'
author: Koen Claessen <koen@chalmers.se>
latest: '2.11.3'
description-type: text
description: ! 'This is QuickCheck 2, a library for random testing of program properties.


  Install it in the usual way:


  $ cabal install


  There is a Google group for user discussion and questions at

  https://groups.google.com/forum/#!forum/haskell-quickcheck.

'
license-name: BSD3
