homepage: https://github.com/plow-technologies/quickcheck-arbitrary-adt#readme
changelog-type: markdown
hash: c8afad9c6e1f2a1d9813bb6c94158a99f7d6edeae8bb696b29d6c450f67811ec
test-bench-deps:
  base: ! '>=4 && <5'
  tasty-golden: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  QuickCheck: -any
  template-haskell: ! '>=2.11 && <2.13'
  safe: -any
maintainer: Scott Murphy <scottmurphy09@gmail.com>
synopsis: Generate QuickCheck Gen for Sum Types
changelog: ! '# Revision history for quickcheck-arbitrary-template


  ## 0.2.0.0 -- 2018-02-07


  * Add version range template-haskell >= 2.11 && < 2.13 and add support for 2.12.

'
basic-deps:
  base: ! '>=4 && <5'
  QuickCheck: -any
  template-haskell: ! '>=2.11 && <2.13'
  safe: -any
all-versions:
- 0.2.0.0
author: Scott Murphy <scottmurphy09@gmail.com>
latest: 0.2.0.0
description-type: markdown
description: ! "# quickcheck-arbitrary-template\n\nTest.QuickCheck.TH.GeneratorsSpec\n\ncontains
  one routine:\n``` makeArbitrary ```\n\nWhich builds, a generator that can be used
  to create an arbitrary instance.\n\nIt does not create the instance directly for
  you.  \n\nIt supports creating sum types and record types\neach constructor may
  have at most 7 arguments.\n\n## Installation\n\n``` stack build ```\n\n\n## Usage\n\nAn
  example (from the tests)\n\n``` haskell\n{-# LANGUAGE TemplateHaskell #-}\nmodule
  Test.QuickCheck.TH.GeneratorsSpec (tests) where\n\nimport Test.QuickCheck.TH.Generators\n\nimport
  Test.Tasty\nimport Test.Tasty.QuickCheck as QC\nimport Test.Tasty.HUnit\n\nimport
  Data.List\nimport Data.Ord\n\n\n\n-- | These example types should build arbitrary
  instances correctly \n\ndata ExampleSumTypes = ExampleSum0 \n                    |
  ExampleSum1 Int\n                    | ExampleSum2 Int Int\n                    |
  ExampleSum3 Int Int Int\n                    | ExampleSum4 Int Int Int Int\n                    |
  ExampleSum5  Int Int Int Int Int\n                    | ExampleSum6 Int Int Int
  Int Int Int\n                    | ExampleSum7 Int Int Int Int Int Int\n deriving
  (Show,Ord,Eq)\n\nmakeArbitrary ''ExampleSumTypes\n\n\ninstance Arbitrary ExampleSumTypes
  where\n  arbitrary = arbitraryExampleSumTypes\n\ntests :: TestTree\ntests = testGroup
  \"Tests\" [properties]\n\nproperties :: TestTree\nproperties = testGroup \"Properties\"
  [qcProps]\n\nqcProps = testGroup \"(checked by QuickCheck)\"\n  [ QC.testProperty
  \"sort == sort . reverse\" (\n       \\list -> sort (list :: [ExampleSumTypes])
  == sort (reverse list)) ]\n\n```\n\n## How to run tests\n\n```\nstack test quickcheck-arbitrary-template\n```\n\n"
license-name: BSD-3-Clause
