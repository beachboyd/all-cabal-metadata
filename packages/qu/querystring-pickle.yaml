homepage: ''
changelog-type: ''
hash: b20d32499c3cc15024dc3860fad2e25d6971563bac850cda75bfbd34b6e43fc3
test-bench-deps:
  bytestring: -any
  test-framework: ! '>=0.8'
  querystring-pickle: -any
  base: ! '>=4.6 && <5'
  test-framework-quickcheck2: ! '>=0.3'
  QuickCheck: ! '>=2.5'
maintainer: Brendan Hay <brendan.g.hay@gmail.com>
synopsis: Picklers for de/serialising Generic data types to and from query strings
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>=4.6 && <5'
  text: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.7
- 0.1.8
- 0.1.9
- 0.2.0
author: Brendan Hay
latest: 0.2.0
description-type: markdown
description: ! "## querystring-pickle\n\n[![Build Status](https://secure.travis-ci.org/brendanhay/querystring-pickle.png)](http://travis-ci.org/brendanhay/querystring-pickle)\n\n\n##
  Table of Contents\n\n* [Introduction](#introduction)\n* [Examples](#examples)\n*
  [Common Instances](#common-instances)\n  - [Lists](#lists)\n  - [Either/Maybe](#eithermaybe)\n*
  [Compatibility](#compatibility)\n* [Contributing](#contributing)\n* [Licence](#licence)\n\n\n##
  Introduction\n\n> TODO\n\n\n## Examples\n\n> TODO\n\n\n## Common Instances\n\n###
  Lists\n\nNo default instance for `IsQuery a => IsQuery [a]` is specified since there\nare
  a number of possible implementations. To that end, two pickling combinators\nare
  supplied:\n\n#### qpList\n\nA query string of the format `?key=Saab,Audi,Holden`
  can be derived using `qpList` as follows:\n\n```haskell\ninstance IsQuery a => IsQuery
  [a] where\n    queryPickler = qpList queryPickler\n```\n\n#### qpOrdinalList\n\nAlternatively,
  a query string of the format `key.1=Saab&key.2=Audi&key.3=Holden` can\nbe derived
  using the `qpOrdinalList` combinator:\n\n```haskell\ninstance IsQuery a => IsQuery
  [a] where\n    queryPickler = qpOrdinalList queryPickler\n```\n\nOrdering is preserved
  in both cases, although `qpOrdinalList` would preserve the order if the querystring
  was reshuffled.\n\n### Either/Maybe\n\n`IsQuery` instances for `Maybe a` and `Either
  a b` are not supplied due to\nambiguous semantics, take the following example:\n\n```haskell\ninstance
  IsQuery a => IsQuery (Maybe a) where\n    queryPickler = qpOption queryPickler\n\ninstance
  (IsQuery a, IsQuery b) => IsQuery (Either a b) where\n    queryPickler = queryPickler
  `qpEither` queryPickler\n\ndata A = A { aInt1 :: Int, aInt2 :: Int } deriving (Show,
  Generic)\ndata B = B { bA :: Maybe A } deriving (Show, Generic)\ndata C = C { cB
  :: B } deriving (Show, Generic)\ndata D = D { dAInt :: Either A Int } deriving (Show,
  Generic)\n\ninstance IsQuery A\ninstance IsQuery B\ninstance IsQuery C\ninstance
  IsQuery D\n\nlet c = C $ B Nothing\nlet d = D . Left $ A 1 2\nlet e = D $ Right
  3\n```\n\nRunning `toQuery` / `fromQuery` on the example bindings yields:\n\n```haskell\n\nλ:
  toQuery c\n[]\n\nλ: fromQuery (toQuery c) :: Either String C\nLeft \"qpElem: non-locatable
  - B - List []\"\n\nλ: toQuery d\n[(\"AInt.Int1\",\"1\"),(\"AInt.Int2\",\"2\")]\n\nλ:
  fromQuery (toQuery d) :: Either String D\nRight (D {dAInt = Left (A {aInt1 = 1,
  aInt2 = 2})})\n\nλ: toQuery e\n[(\"AInt\",\"3\")]\n\nλ: fromQuery (toQuery e) ::
  Either String D\nRight (D {dAInt = Right 3})\n\n```\n\nIf data type `B` has a second
  non-optional field, the `fromQuery` deserialisation\nof binding `c` will succeed.\n\nThis
  is due to the overly simple underlying rose tree used\nas the intermediate data
  structure for query transforms.\nSomething that will hopefully be fixed in a future
  release.\n\nIt is left up to the consumer of the library to decide best how to handle
  this\ncase. I apologies if it forces anyone to use orphaned instances.\n\n\n## Compatibility\n\nDue
  to the dependency on `GHC.Generics` a version of `base 4.6` or higher is required.\n\n\n##
  Contributing\n\nFor any problems, comments or feedback please create an issue [here
  on GitHub](github.com/brendanhay/querystring-pickle/issues).\n\n\n## Licence\n\nquerystring-pickle
  is released under the [Mozilla Public License Version 2.0](http://www.mozilla.org/MPL/)\n"
license-name: LicenseRef-OtherLicense
