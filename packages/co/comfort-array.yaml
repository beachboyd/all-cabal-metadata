homepage: http://hub.darcs.net/thielema/comfort-array/
changelog-type: ''
hash: 5c888fe8980b32603e52a6578e045ca453c278ec39dcdfaf45868831bed1f2f8
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Arrays where the index type is a function of the shape type
changelog: ''
basic-deps:
  base: ! '>=4.5 && <5'
  utility-ht: ! '>=0.0.10 && <0.1'
all-versions:
- '0.0'
- '0.0.1'
- '0.0.1.1'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.0.1.1'
description-type: haddock
description: ! 'Arrays from the basic @array@ package are already very powerful

  compared with arrays in other languages.

  It provides arrays of any dimension in a type safe and uniform way

  with free choice of the lower bounds (0, 1, or whatever you like).


  This package goes one step further:

  The shape and the index type are different,

  but the index type is a type function of the shape type.

  This offers much more flexibility and type safety.


  Some examples are:


  * @Range@:

  Allow dynamic choice of lower and upper array bounds

  such as in the ''Array''s from the @array@ package.

  You can combine it with other shapes in other dimensions.

  It allows you to describe the bounds of each dimension individually.


  * @Shifted@:

  Describe array bounds by start index and length.

  It is sometimes more natural to use these parameters.

  E.g. a non-negative index type like ''Word'' cannot represent @-1@

  and thus cannot encode an empty range starting with index @0@.


  * @Square@:

  An 2D array where both dimensions always have equal size.


  * @ZeroBased, OneBased@:

  Arrays with fixed lower bound, either 0 or 1, respectively.


  * Arrays with indices like ''LT'', ''EQ'', ''GT'' and dummy shape.'
license-name: BSD3
