homepage: http://github.com/nedervold/context-free-grammar
changelog-type: text
hash: 5741858b516beba2d7cfdf29a4d5a898f6dbbffaae448d36fe5ab3f7f9d1cf4b
test-bench-deps:
  test-framework-hunit: -any
  context-free-grammar: -any
  test-framework: -any
  base: -any
  test-framework-quickcheck2: ! '>=0.3'
  HUnit: -any
  containers: ! '>=0.5'
  quickcheck-properties: ! '>=0.1'
  QuickCheck: ! '>=2.6'
  pretty: ! '>=1.1'
  template-haskell: -any
maintainer: Eric Nedervold<nedervoldsoftware@gmail.com>
synopsis: Basic algorithms on context-free grammars
changelog: ! "0.1.0 (2015-04-02):\n    - Restructured API so default is to keep partial
  analysis results;\n      old way was too error-prone.\n0.0.1 (2015-03-14):\n    -
  Initial version.\n"
basic-deps:
  base: ! '>=4 && <5'
  dlist: ! '>=0.7'
  array: ! '>=0.5'
  containers: ! '>=0.5'
  control-monad-omega: ! '>=0.3'
  mtl: ! '>=2.1'
  pretty: ! '>=1.1'
  template-haskell: -any
all-versions:
- 0.0.1
- 0.1.0
author: Eric Nedervold<nedervoldsoftware@gmail.com>
latest: 0.1.0
description-type: haddock
description: ! 'Basic algorithms on context-free grammars:


  * augmenting a grammar


  * calculating nullability


  * calculating reachability


  * calculating productivity


  * calculating first sets


  * calculating follow sets


  * calculating predict sets


  You may define your context-free grammar textually using ''parse''

  or with the quasiquoter ''bnf'' (both in "Data.Cfg.Bnf"), or you may

  use any data structure you like after making it an instance of

  ''Cfg'' (found in "Data.Cfg.Cfg").


  Testing is very thin in this version; basically just

  sanity-checking.'
license-name: BSD-3-Clause
