homepage: https://github.com/alephcloud/hs-configuration-tools
changelog-type: markdown
hash: fc497167cc887de1f4f3846eb2f38c0da8f43b69ae1d9aebdd110c2f59101ed6
test-bench-deps:
  warp: ! '>=3.0'
  base-unicode-symbols: ! '>=0.2.2.4'
  bytestring: ! '>=0.10'
  wai: ! '>=3.0'
  Cabal: ! '>=1.18'
  base: ! '>=4.6 && <5.0'
  unordered-containers: ! '>=0.2.4.0'
  text: ! '>=1.0'
  enclosed-exceptions: ! '>=1.0'
  monad-control: ! '>=1.0'
  configuration-tools: -any
  warp-tls: ! '>=3.0'
  mtl: ! '>=2.2'
  transformers: ! '>=0.4'
  http-types: ! '>=0.8'
  yaml: ! '>=0.8.8.3'
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: Tools for specifying and parsing configurations
changelog: ! "0.3.1 (2018-03-16)\n==================\n\n*   Support GHC-8.4.1 and
  Cabal-2.2\n*   Replaced the use of non-ascii identifiers in the public API\n\n0.3.0\n=====\n\n*
  \  Remove built in short options `-p`, `-c`, and `-i`\n*   Support GHC-8.2 and Cabal-2.0\n\n0.2.15\n======\n\n*
  \  Support for http-client >= 0.5\n\n0.2.14\n======\n\n*   Support for GHC-8 and
  Cabal-1.24\n\n0.2.13\n======\n\n*   Eliminate most compiler warnings when compiling
  with GHC-7.10.\n\n*   Bump lower bound on the version of `optparse-applicative`
  to `0.11.0.2`.\n    This avoids issues when building with `transformers-compat`.\n\n*
  \  Reduce compilation time with `text<1.2.0.5` by avoiding usage of `toCaseFold`\n
  \   from the `case-insensitive` package.\n\n*   Dropped dependency on the error
  package.\n\n*   [Issue 43](https://github.com/alephcloud/hs-configuration-tools/issues/43):\n
  \   Support detection of the version control system when the package directory\n
  \   and thus the cabal file is in sub-directory of the repository.\n\n0.2.12\n======\n\n*
  \  Added support for transformers-0.3.0.0. This changes allows usage\n    of configuration-tools
  along with packages that depend on ghc, which\n    in turn depends on transformers-0.3.0.0.\n\n0.2.11\n======\n\n*
  \  Added support for Cabal-1.18. This is supposed to make the build more\n    robust
  and simplify integration with existing build infrastructure\n    and other packages.\n\n0.2.10\n======\n\n*
  \  Moved all internal APIs to the `Internal` name space. Exposing them\n    in 0.2.9
  was considered a bug.\n\n*   Configuration files can be formatted either as JSON
  or as YAML.\n    For remote configuration files the HTTP `Content-Type` header is
  used to\n    determine the format, for local files the file suffix is used.\n    The
  default format is YAML.\n\n*   Set the HTTP `accept` header for JSON and YAML when
  requesting remote\n    configuration files.\n\n0.2.9\n=====\n\n*   Use tight constraint
  for all validation functions. Previously the\n    constraint where unnecessarily
  restrictive.\n\n*   Added `updateProperty` function that generalized `%.:` in the
  same\n    way as `setProperty` generalizes `..:`.\n\n*   Added a validation function
  for configuration file arguments.\n\n*   Allow usage of more than a single `--config-file`
  option on the\n    command line.\n\n*   Support for static configuration file locations.
  Configuration files\n    can be marked as `required` or `optional`.\n\n*   Support
  for loading of configuration files form HTTP and HTTPS URLs.\n    There are new
  flags for disabling validation of SSL certificates and\n    white listing SSL certificates
  based on their fingerprint.\n\n*   Added tools for updating configurations with
  a monoid instance.\n\n*   Added two new option parsers for boolean flags.\n\n    *
  \  The `boolOption_` parser uses the syntax `--feature` and\n        `--no-feature`
  to enable and respectively disable a feature.\n\n    *   The `enableDisableFlag`
  parser uses the syntax `--enable-feature`\n        and `--disable-feature` to enable
  and respectively disable a feature.\n\n*   Refactored the module layout. The API
  of the existing modules is\n    is backward compatible, but a lot of code got moved
  into submodules.\n\n*   Improved documentation.\n\n*   Improved test suite.\n\n0.2.8\n=====\n\n*
  \  Added validation functions for Boolean values, numeric values and\n    orders.\n\n*
  \  Added operator `!..:` for parsing of configuration values that are\n    required
  to be present in a configuration file, thus preventing\n    the default value from
  being used.\n\n*   More consistent usage of case in metavar values.\n\n*   Drop
  support for optparse-applicative < 0.10.\n\n0.2.7\n=====\n\n*   Added `view` function
  for lenses to `Configuration.Utils.Internal`.\n\n*   Added support for validation
  of configuration values.\n\n*   Added module `Configuration.Utils.Validation` that
  provides primitives\n    for validating different basic configuration values.\n\n0.2.6\n=====\n\n*
  \  For git repositories include also light-weight (non-annotated) tags\n    in the
  version description.\n\n*   Added new function `boolReader`, `boolOption`, `fileOption`,
  and\n    `eitherReadP` to `Utils`.\n\n*   Added new function `maybeOption` and improved
  documentation about\n    `Maybe` config values.\n\n*   Included optimisation level
  into long info.\n\n0.2.5\n=====\n\n*   `Configuration.Utils.Setup`: export `mkPkgInfoModules`
  function\n    that modifies a given `UserHooks` record to generate an `PkgInfo`\n
  \   module during configuration.\n\n0.2.4.1\n=======\n\n*   Support for optparse-applicative
  >= 0.10.\n\n0.2.4\n=====\n\n*   Configuration.Utils.Setup: fixed generation of `PkgInfo`
  module for\n    package configurations with explicit flags.\n\n*   Improved documentation
  for `Maybe` values.\n\n0.2.3\n=====\n\n*   Show the help options in the options
  summary message.\n\n*   Add `-?` as short version of for `--help` in addition to
  `-h`.\n\n*   Remove `showHelpOnError` and `disambiguate` from option parser preferences.\n\n*
  \  Added file `INSTALL_ON_WINDOWS.md` with installation instructions for\n    windows
  to the package.\n\n0.2.2\n=====\n\n*   Add Lens `piOptionParserAndDefaultConfiguration`
  that gives simultaneous\n    accesses to `piOptionParser` and `piDefaultConfiguration`
  which allows\n    changing the type parameter of `ProgramInfo a`.\n\n*   Introduce
  function `setProperty`. It is used as the `..:` operator\n    but allows to specify
  a custom parser for the property value instead\n    of the default `parseJSON` from
  the `FromJSON` instance.\n\n*   Introduce operators `(<*<)`, `(>*>)`, `(<$<)`, `(>$>)`
  and deprecate\n    `(âŠ™)` and `(<.>)`.\n\n0.2.1\n=====\n\n*   Fix build with GHC-7.6
  by relaxing lower bounds on some dependencies.\n\n0.2\n===\n\nFirst release.\n\n"
basic-deps:
  http-client: ! '>=0.4'
  base-unicode-symbols: ! '>=0.2.2.4'
  bytestring: ! '>=0.10.0.2'
  ansi-wl-pprint: ! '>=0.6'
  case-insensitive: ! '>=1.2'
  x509-validation: ! '>=1.5.1'
  Cabal: ! '>=1.18'
  base: ! '>=4.6 && <5.0'
  base64-bytestring: ! '>=1.0'
  unordered-containers: ! '>=0.2.4.0'
  text: ! '>=1.0'
  enclosed-exceptions: ! '>=1.0'
  monad-control: ! '>=1.0'
  tls: ! '>=1.2'
  filepath: ! '>=1.3.0.1'
  process: ! '>=1.2.0.0'
  connection: ! '>=0.2'
  dlist: ! '>=0.7.1'
  data-default: ! '>=0.5'
  semigroups: ! '>=0.18'
  x509: ! '>=1.5'
  x509-system: ! '>=1.5'
  http-client-tls: ! '>=0.2'
  network-uri: ! '>=2.6.0.1'
  mtl: ! '>=2.2'
  attoparsec: ! '>=0.11.3.4'
  transformers: ! '>=0.4'
  optparse-applicative: ! '>=0.11.0.2'
  deepseq: ! '>=1.3'
  http-types: ! '>=0.8'
  aeson: ! '>=0.7.0.6'
  yaml: ! '>=0.8.8.3'
  profunctors: ! '>=4.0.4'
  directory: ! '>=1.2.1.0'
all-versions:
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.4'
- '0.2.4.1'
- '0.2.5'
- '0.2.6'
- '0.2.7'
- '0.2.8'
- '0.2.9'
- '0.2.10'
- '0.2.11'
- '0.2.12'
- '0.2.13'
- '0.2.14'
- '0.2.15'
- '0.3.0'
- '0.3.1'
author: Lars Kuhtz <lakuhtz@gmail.com>
latest: '0.3.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/alephcloud/hs-configuration-tools.svg?branch=master)](https://travis-ci.org/alephcloud/hs-configuration-tools)\n[![Hackage](https://img.shields.io/hackage/v/configuration-tools.svg)](https://hackage.haskell.org/package/configuration-tools)\n\nOverview\n========\n\nThis
  package provides a collection of utilities on top of the packages\n[optparse-applicative](http://hackage.haskell.org/package/optparse-applicative),\n[aeson](http://hackage.haskell.org/package/aeson),
  and\n[yaml](http://hackage.haskell.org/package/yaml) for configuring libraries and\napplications
  in a composable way.\n\nThe main features are\n\n1.  compositional configuration
  management with integration of command line\n    option parsing and configuration
  files, validation of configurations,\n    and loading of configurations from remote
  locations,\n2.  a `Setup.hs` file that generates a `PkgInfo` module for each component\n
  \   of a package that provide information about the package and the build, and\n3.
  \ a set of types for configuration of HTTP services and clients along\n    with
  aeson instances and command line option parsers.\n\nThe ultimate goal for this package
  is a general framework for\ncompositional configuration management for software
  components.\nInstead of designing such a framework from scratch the approach of
  this\npackage is to first explore design and implementation patterns based\non practical
  examples and by gluing together existing technology.\n\nTherefor at the current
  state this package mostly provides operators and\ncoding patterns for writing stylish
  boilerplate code.\n\nOnce we feel that the developed patterns cover a sufficient
  portion of\nreal world requirements we plan to rewrite this package such that\nthe
  boilerplate is hidden behind a clean and simple DSL.\n\nInstallation\n============\n\nAssuming
  that you have a recent version version of `GHC` and `Cabal`\ninstalled in your system
  this package can be install from [Hackage](http://hackage.haskell.org/)\nvia\n\n```bash\ncabal
  install configuration-tools\n```\n\nIf you don't need support for remote configuration
  files this package\ncan be build with a much smaller set of dependencies via\n\n```bash\ncabal
  install -f-remote-configs configuration-tools\n```\n\nThe package can be tested
  via\n\n```bash\ngit clone https://github.com/alephcloud/hs-configuration-tools.git\ncd
  hs-configurationt-tools\ncabal configure --enable-tests\ncabal build\ncabal test\n```\n\nIf
  you have issues building this package, first ensure that the installed\nversion
  of the `Cabal` library matches the version that is used by\nyour `cabal` binary.
  You may compare the results of `cabal info Cabal` and\n`cabal --version`.\n\nConfiguration
  Management\n========================\n\nThe goal of this package is to make management
  of configurations easy by\nproviding an idiomatic style of defining and deploying
  configurations.\n\nFor each data type that is used as a configuration type the following
  must be\nprovided:\n\n1.  a default value,\n\n2.  a `FromJSON` instance that yields
  a function that takes a value and\n    updates that value with the parsed values,\n\n3.
  \ a `ToJSON` instance, and\n\n4.  an options parser that yields a function that
  takes a value and updates\n    that value with the values provided as command line
  options.\n\nOptionally, a function for validating the configuration value may be\nprovided.\n\nThe
  package provides operators and functions that make the implementation of\nthese
  requisites easy for the common case that the configuration is encoded\nmainly through
  nested records.\n\nIn addition to the user defined command line options the following\noptions
  are recognized by the application:\n\n*   `--config-file, -c`\n    parses the given
  file as a --possibly partial-- configuration in YAML or\n    JSON format. The file
  location can be provided either as a local file\n    system path or as a remote
  HTTP or HTTPS URL. In addition a list of static\n    configuration file locations
  can be defined in the code.\n\n    If this option is provided more than a single
  time the configuration\n    files are loaded in the order as the respective options
  appear\n    on the command line, where settings that are loaded later have\n    precedence
  over earlier settings. Files from static locations are\n    loaded before files
  that are specified on the command line.\n\n*   `print-config, -p`\n    configures
  the application and prints the configuration in YAML format\n    to standard out
  and exits. The printed configuration is exactly the\n    configuration that otherwise
  would be used to run the application.\n\n*   `--help, -h`\n    prints a help message
  and exits.\n\nAs long as the package wasn't build with `-f-remote-configs` the following\ntwo
  options are available. They affect how configuration files\nare loaded from remote
  URLs.\n\n*   `--config-https-insecure=true|false`\n    Bypass certificate validation
  for all HTTPS\n    connections to all services.\n\n*   `--config-https-allow-cert=HOSTNAME:PORT:FINGERPRINT`\n
  \   Unconditionally trust the certificate for connecting\n    to the service.\n\nThe
  operators provided in this package assume that\n[lenses](http://hackage.haskell.org/package/lens)
  are provided for field of the\nconfiguration record types.\n\nAn complete usage
  example can be found in the file\n[example/Example.hs](https://github.com/alephcloud/hs-configuration-tools/blob/master/examples/Example.hs)\nof
  the cabal package.\n\nUsage Example\n-------------\n\nRemark: there are unicode
  equivalents for some operators available in\n`Configuration.Utils` that lead to
  better aligned and more readable code.\n\nWe start with language extensions and
  imports.\n\n~~~{.haskell}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE FlexibleInstances
  #-}\n\nmodule Main\n( main\n) where\n\nimport Configuration.Utils\nimport Data.Monoid\n~~~\n\nNext
  we define the types that are used for the configuration of our application.\nIn
  this contrived example these types define a simplified version of HTTP URLs.\n\n~~~{.haskell}\ndata
  Auth = Auth\n    { _user :: !String\n    , _pwd :: !String\n    }\n~~~\n\nWe have
  to define lenses for the configuration types. Here we do it explicitly.\nAlternatively
  one could have used TemplateHaskell along with `makeLenses` from\nthe module `Control.Lens`
  from the [lens](http://hackage.haskell.org/package/lens)\npackage.\n\n~~~{.haskell}\nuser
  :: Functor f => (String -> f String) -> Auth -> f Auth\nuser f s = (\\u â†’ s { _user
  = u }) <$> f (_user s)\n\npwd :: Functor f => (String -> f String) -> Auth -> f
  Auth\npwd f s = (\\p -> s { _pwd = p }) <$> f (_pwd s)\n~~~\n\n(Note, that the module
  `Configuration.Utils` defines its own type synonyms for\nlenses. If you import `Control.Lens`
  you should hide `Lens` and `Lens'` from\neither module.)\n\nWe must provide a default
  value. If there is no reasonable default the\nrespective value could, for instance,
  be wrapped into `Maybe`. Here we\nuse the monoid identity value of the type.\n\n~~~{.haskell}\ndefaultAuth
  :: Auth\ndefaultAuth = Auth\n    { _user = \"\"\n    , _pwd = \"\"\n    }\n~~~\n\nNow
  we define an [aeson](https://hackage.haskell.org/package/aeson) `FromJSON`\ninstance
  that yields a function that updates a given `Auth` value with the\nvalues from the
  parsed JSON value. The `<*<` operator is functional composition\nlifted for applicative
  functors and `%` is a version of `$` with a different\nprecedence that helps to
  reduce the use of parenthesis in applicative style\ncode.\n\n~~~{.haskell}\ninstance
  FromJSON (Auth -> Auth) where\n    parseJSON = withObject \"Auth\" $ \\o -> id\n
  \       <$< user ..: \"user\" % o\n        <*< pwd ..: \"pwd\" % o\n~~~\n\nThe `ToJSON`
  instance is needed to print the configuration (as YAML document)\nwhen the user
  provides the `--print-config` command line option.\n\n~~~{.haskell}\ninstance ToJSON
  Auth where\n    toJSON a = object\n        [ \"user\" .= _user a\n        , \"pwd\"
  .= _pwd a\n        ]\n~~~\n\nFinally we define a command line option parser using
  the machinery from\nthe [optparse-applicative](https://hackage.haskell.org/package/optparse-applicative)\npackage.
  Similar to the `FromJSON` instance the parser does not yield a value\ndirectly but
  instead yields a function that updates a given `Auth` value with\nthe value from
  the command line.\n\n~~~{.haskell}\npAuth :: MParser Auth\npAuth = id\n    <$< user
  .:: strOption\n        % long \"user\"\n        <> help \"user name\"\n    <*< pwd
  .:: strOption\n        % long \"pwd\"\n        <> help \"password for user\"\n~~~\n\nYou
  may consult the documentation of the\n[optparse-applicative](http://hackage.haskell.org/package/optparse-applicative)\npackage
  for further information on how to define command line options.\n\nThe following
  definitions for the `HttpURL` are similar to definitions for\nthe `Auth` type above.
  In addition it is demonstrated how to deal with nested\nconfiguration types. Mainly
  the usage of `..:` is replaced by `%.:` and\n`.::` is replaced by `%::`.\n\n~~~{.haskell}\ndata
  HttpURL = HttpURL\n    { _auth :: !Auth\n    , _domain :: !String\n    , _path ::
  !String\n    }\n\nauth :: Functor f => (Auth -> f Auth) -> HttpURL -> f HttpURL\nauth
  f s = (\\u â†’ s { _auth = u }) <$> f (_auth s)\n\ndomain :: Functor f => (String
  -> f String) -> HttpURL -> f HttpURL\ndomain f s = (\\u â†’ s { _domain = u }) <$>
  f (_domain s)\n\npath :: Functor f => (String -> f String) -> HttpURL -> f HttpURL\npath
  f s = (\\u â†’ s { _path = u }) <$> f (_path s)\n\ndefaultHttpURL :: HttpURL\ndefaultHttpURL
  = HttpURL\n    { _auth = defaultAuth\n    , _domain = \"\"\n    , _path = \"\"\n
  \   }\n\ninstance FromJSON (HttpURL -> HttpURL) where\n    parseJSON = withObject
  \"HttpURL\" $ \\o -> id\n        <$< auth %.: \"auth\" % o\n        <*< domain ..:
  \"domain\" % o\n        <*< path ..: \"path\" % o\n\ninstance ToJSON HttpURL where\n
  \   toJSON a = object\n        [ \"auth\" .= _auth a\n        , \"domain\" .= _domain
  a\n        , \"path\" .= _path a\n        ]\n\npHttpURL :: MParser HttpURL\npHttpURL
  = id\n    <$< auth %:: pAuth\n    <*< domain .:: strOption\n        % long \"domain\"\n
  \       <> short 'd'\n        <> help \"HTTP domain\"\n    <*< path .:: strOption\n
  \       % long \"path\"\n        <> help \"HTTP URL path\"\n~~~\n\nNow that everything
  is set up the configuration can be used to create a\n`ProgramInfo` value. The `ProgramInfo`
  value is than use with the\n`runWithConfiguratin` function to wrap a main function
  that takes an `HttpURL`\nargument with configuration file and command line parsing.\n\n~~~{.haskell}\nmainInfo
  :: ProgramInfo HttpURL\nmainInfo = programInfo \"HTTP URL\" pHttpURL defaultHttpURL\n\nmain
  :: IO ()\nmain = runWithConfiguration mainInfo $ \\conf -> do\n    putStrLn\n        $
  \"http://\"\n        <> (_user . _auth) conf\n        <> \":\"\n        <> (_pwd
  . _auth) conf\n        <> \"@\"\n        <> _domain conf\n        <> \"/\"\n        <>
  _path conf\n~~~\n\nUsing Sum Types as Configuration Types\n======================================\n\nSum
  types can not be used as configuration types in the same way as product types.\nThe
  reason is that the nondeterminism in the choice of a term for the type is\nnot restricted
  to the chosen constructor arguments but in addition there\nis non-determinism in
  the choice of the constructor, too.\n\nAn update function for a product type can
  be defined point-wise as a mapping from\nconstructor parameters to values. An update
  for a sum type must take the\nconstructor context into account. Moreover, when applied
  to a given default\nvalue the function may not be applicable at all if the default
  value uses a\ndifferent constructor context than what the update assumes.\n\nFor
  the future we plan to provide a general solution for configurations of sum\ntypes
  which would be based on the possibility to define default values for more\nthan
  a single constructor. For now one must restrict configurations of sum types\nto
  yield constant values instead of point-wise (partial) updates. In practice\nthis
  means that for a type `a` one has to provide an `FromJSON` instance for `a`\nand
  use the `..:` operator. Similarly for the option parser one has to define a\nparser
  that yields an `a` and use it with the `.::` operator.\n\nThe module `Configuration.Utils.Maybe`
  provides tools for dealing with\n`Maybe` values.\n\nPackage and Build Information\n=============================\n\nThe
  module `Configuration.Utils.Setup` an example `Setup.hs` script that hooks\ninto
  the cabal build process at the end of the configuration phase and generates\na module
  with package information for each component of the cabal package.\n\nThe modules
  are created in the *autogen* build directory where also the *Path_*\nmodule is created
  by cabal's simple build setup. This is usually the directory\n`./dist/build/autogen`.\n\nFor
  a library component the module is named just `PkgInfo`. For all\nother components
  the module is named `PkgInfo_COMPONENT_NAME` where\n`COMPONENT_NAME` is the name
  of the component with `-` characters replaced by\n`_`.\n\nFor instance, if a cabal
  package contains a library and an executable that\nis called *my-app*, the following
  modules are created: `PkgInfo`\nand `PkgInfo_my_app`.\n\nUsage as Setup Script\n---------------------\n\nThere
  are two ways how this module can be used:\n\n1.  Copy the code of this module into
  a file called `Setup.hs` in the root\n    directory of your package.\n\n2.  If the
  *configuration-tools* package is already installed in the system\n    where the
  build is done, following code can be used as `Setup.hs` script:\n\n    ~~~{.haskell}\n
  \   module Main (main) where\n\n    import Configuration.Utils.Setup\n    ~~~\n\nWith
  both methods the field `Build-Type` in the package description (cabal) file\nmust
  be set to `Custom`:\n\n    Build-Type: Custom\n\nIntegration With `Configuration.Utils`\n--------------------------------------\n\nYou
  can integrate the information provided by the `PkgInfo` modules with the\ncommand
  line interface of an application by importing the respective module for\nthe component
  and using the `runWithPkgInfoConfiguration` function from the\nmodule `Configuration.Utils`
  as show in the following example:\n\n~~~{.haskell}\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE FlexibleInstances #-}\n\nmodule Main\n( main\n) where\n\nimport
  Configuration.Utils\nimport PkgInfo\n\ninstance FromJSON (() -> ()) where parseJSON
  _ = pure id\n\nmainInfo :: ProgramInfo ()\nmainInfo = programInfo \"Hello World\"
  (pure id) ()\n\nmain :: IO ()\nmain = runWithPkgInfoConfiguration mainInfo pkgInfo
  . const $ putStrLn \"hello world\"\n~~~\n\nWith that the resulting application supports
  the following additional command\nline options:\n\n*   `--version, -v`\n    prints
  the version of the application and exits.\n\n*   `--info, -i`\n    prints a short
  info message for the application and exits.\n\n*   `--long-info`\n    print a detailed
  info message for the application and exits.\n    Beside component name, package
  name, version, revision, and copyright\n    the message also contain information
  about the compiler that\n    was used for the build, the build architecture, build
  flags,\n    the author, the license type, and a list of all direct and\n    indirect
  dependencies along with their licenses and copyrights.\n\n*   `--license`\n    prints
  the text of the license of the application and exits.\n\nHere is the example output
  of `--long-info` for the example\n`examples/Trivial.hs` from this package:\n\n~~~{.shell}\ntrivial-0.2.6
  (package configuration-tools-0.2.6 revision 2cc860c)\nCopyright (c) 2014 AlephCloud,
  Inc.\n\nAuthor: Lars Kuhtz <lars@alephcloud.com>\nLicense: MIT\nHomepage: https://github.com/alephcloud/hs-configuration-tools\nBuild
  with: ghc-7.8.3 (x86_64-osx)\nBuild flags:\nOptimisation: normal\n\nDependencies:\n
  \   Cabal-1.20.0.2 [BSD3, 2003-2006, Isaac Jones 2005-2011, Duncan Coutts]\n    MonadRandom-0.3
  [OtherLicense]\n    aeson-0.8.0.0 [BSD3, (c) 2011-2014 Bryan O'Sullivan (c) 2011
  MailRank, Inc.]\n    ansi-terminal-0.6.1.1 [BSD3]\n    ansi-wl-pprint-0.6.7.1 [BSD3]\n
  \   array-0.5.0.0 [BSD3]\n    attoparsec-0.12.1.0 [BSD3]\n    base-4.7.0.1 [BSD3]\n
  \   base-unicode-symbols-0.2.2.4 [BSD3, 2009â€“2011 Roel van Dijk <vandijk.roel@gmail.com>]\n
  \   bifunctors-4.1.1.1 [BSD3, Copyright (C) 2008-2013 Edward A. Kmett]\n    rts-1.0
  [BSD3]\n    bytestring-0.10.4.0 [BSD3, Copyright (c) Don Stewart 2005-2009, (c)
  Duncan Coutts 2006-2013, (c) David Roundy 2003-2005, (c) Jasper Van der Jeugt 2010,
  (c) Simon Meier 2010-2013.]\n    case-insensitive-1.2.0.0 [BSD3, 2011 Bas van Dijk]\n
  \   comonad-4.2.2 [BSD3, Copyright (C) 2008-2014 Edward A. Kmett, Copyright (C)
  2004-2008 Dave Menendez]\n    conduit-1.2.0.2 [MIT]\n    containers-0.5.5.1 [BSD3]\n
  \   contravariant-1.2 [BSD3, Copyright (C) 2007-2014 Edward A. Kmett]\n    deepseq-1.3.0.2
  [BSD3]\n    directory-1.2.1.0 [BSD3]\n    distributive-0.4.4 [BSD3, Copyright (C)
  2011-2014 Edward A. Kmett]\n    dlist-0.7.1 [BSD3, 2006-2009 Don Stewart, 2013 Sean
  Leather]\n    either-4.3.1 [BSD3, Copyright (C) 2008-2014 Edward A. Kmett]\n    errors-1.4.7
  [BSD3, 2012, 2013 Gabriel Gonzalez]\n    exceptions-0.6.1 [BSD3, Copyright (C) 2013-2014
  Edward A. Kmett Copyright (C) 2012 Google Inc.]\n    filepath-1.3.0.2 [BSD3]\n    free-4.9
  [BSD3, Copyright (C) 2008-2013 Edward A. Kmett]\n    ghc-prim-0.3.1.0 [BSD3]\n    hashable-1.2.2.0
  [BSD3]\n    integer-gmp-0.5.1.0 [BSD3]\n    lifted-base-0.2.3.0 [BSD3, (c) 2011-2012
  Bas van Dijk, Anders Kaseorg]\n    mmorph-1.0.4 [BSD3, 2013 Gabriel Gonzalez]\n
  \   monad-control-0.3.3.0 [BSD3, (c) 2011 Bas van Dijk, Anders Kaseorg]\n    mtl-2.2.1
  [BSD3]\n    nats-0.2 [BSD3, Copyright (C) 2011-2014 Edward A. Kmett]\n    old-locale-1.0.0.6
  [BSD3]\n    optparse-applicative-0.11.0.1 [BSD3, (c) 2012-2014 Paolo Capriotti <paolo@capriotti.io>]\n
  \   prelude-extras-0.4 [BSD3, Copyright (C) 2011-2014 Edward A. Kmett]\n    pretty-1.1.1.1
  [BSD3]\n    primitive-0.5.3.0 [BSD3, (c) Roman Leshchinskiy 2009-2012]\n    process-1.2.0.0
  [BSD3]\n    profunctors-4.2.0.1 [BSD3, Copyright (C) 2011-2014 Edward A. Kmett]\n
  \   random-1.0.1.1 [BSD3]\n    resourcet-1.1.2.3 [BSD3]\n    safe-0.3.6 [BSD3, Neil
  Mitchell 2007-2014]\n    scientific-0.3.3.0 [BSD3]\n    semigroupoids-4.2 [BSD3,
  Copyright (C) 2011-2013 Edward A. Kmett]\n    semigroups-0.15.3 [BSD3, Copyright
  (C) 2011-2014 Edward A. Kmett]\n    stm-2.4.3 [BSD3]\n    syb-0.4.2 [BSD3]\n    tagged-0.7.2
  [BSD3, 2009-2013 Edward A. Kmett]\n    template-haskell-2.9.0.0 [BSD3]\n    text-1.1.1.3
  [BSD3, 2009-2011 Bryan O'Sullivan, 2008-2009 Tom Harper]\n    time-1.4.2 [BSD3]\n
  \   transformers-0.4.1.0 [BSD3]\n    transformers-base-0.4.3 [BSD3, 2011 Mikhail
  Vorozhtsov <mikhail.vorozhtsov@gmail.com>, Bas van Dijk <v.dijk.bas@gmail.com>]\n
  \   transformers-compat-0.3.3.4 [BSD3, Copyright (C) 2012 Edward A. Kmett]\n    unix-2.7.0.1
  [BSD3]\n    unordered-containers-0.2.5.0 [BSD3, 2010-2014 Johan Tibell 2010 Edward
  Z. Yang]\n    vector-0.10.11.0 [BSD3, (c) Roman Leshchinskiy 2008-2012]\n    void-0.6.1
  [BSD3, Copyright (C) 2008-2013 Edward A. Kmett]\n    yaml-0.8.9.1 [BSD3]\n~~~\n\nConfiguration
  Types for HTTP Services and Clients\n=================================================\n\nThe
  module `Configuration.Utils.Http` contains some types for configuring HTTP\nservices
  and clients. Currently these types only provide the most basic\nconfiguration settings.
  This will probably be extended in the future. Feel free\nto submit patches for missing
  settings.\n\nTODO\n====\n\nThis package is in an early stage of development and
  more features\nare planned.\n\n*   Simplify specification of Configuration data
  types by\n    integrating the aeson instances and the option parser.\n\n*   Come
  up with a story for sum types. We may use the following approach: The\n    definition
  of the default should include alternate values for each\n    constructor. Effectively,
  this means to map the sum type onto a product type\n    by interpreting the summands
  as factors. For mapping back from the product\n    type to the original sum type
  one has to provide a choice of the\n    constructor. Intuitively, a sum type can
  be represented as a tree where the\n    leafs partition the type into classes of
  value with the same constructors.\n    By providing a default value for each such
  class partial configurations that\n    are defined through point-wise updates can
  always be applied in a meaningful\n    way.\n\n*   Include help text as comments
  in YAML serialization of configuration\n    values.\n\n*   Provide operators (or
  at least examples) for more scenarios\n    (like required options)\n\n*   Nicer
  error messages if parsing fails.\n\n*   Support JSON encoded configuration files.\n\n*
  \  Support mode where JSON/YAML parsing fails when unexpected\n    properties are
  encountered.\n\n*   Include default values in help message.\n\n*   Use 'helpDoc'
  to highlight \"meta-options\", like options that enable\n    optional configuration
  values through usage of the `maybeOption`\n    function.\n\n*   Add functionality
  optparse-applicative that allows to group options.\n\n"
license-name: MIT
