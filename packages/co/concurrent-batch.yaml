homepage: https://github.com/harporoeder/concurrent-batch#readme
changelog-type: ''
hash: 42f3c1d977040e57b7380324042b7374d2c1679f139efbe1afe0bc63f2e38971
test-bench-deps: {}
maintainer: roederharpo@protonmail.ch
synopsis: Concurrent batching queue based on STM with timeout.
changelog: ''
basic-deps:
  stm: -any
  base: ! '>=4.7 && <5'
  clock: -any
all-versions:
- '0.1.0.0'
author: Harpo Roeder
latest: '0.1.0.0'
description-type: markdown
description: ! "# Concurrent STM Batch\n\nThis package facilitates batch processing
  based on STM. Batches are both sized, and have automatic timeout functionality.\n\n##
  Example Usage\n\nThe batch handler lives inside STM. Batches should not be processed
  at this stage but instead pushed somewhere else for processing. In this simple example
  we store the results in a TMVar and process them with ```putStrLn```. Requiring
  the initial handler to be in STM instead of IO increases async exception safety
  without having to mask on a potentially blocked action.\n\n```\nimport Control.Concurrent.STM\nimport
  Control.Concurrent.STM.TMVar\nimport Control.Concurrent.STM.Batch\n\nmain :: IO
  ()\nmain = do\n  -- Create variable that batches are pushed to\n  output <- newEmptyTMVarIO\n
  \ -- Create batches of 3 elements with a timeout of 10 seconds\n  batcher <- newBatch
  3 (Just $ fromSecs 10) (putTMVar output)\n  -- Write 3 items to the batcher\n  mapM_
  (writeBatch batcher) [1 2 3]\n  -- Get the first result batch\n  batch1 <- atomically
  $ takeTMVar output\n  -- See [3 2 1]\n  putStrLn batch1\n```\n"
license-name: BSD3
