homepage: https://github.com/trskop/connection-pool
changelog-type: markdown
hash: 0a966231eea708783c868a78707014d7c606b6d0579161cab8ea5e2a7ad00b39
test-bench-deps: {}
maintainer: peter.trsko@gmail.com
synopsis: Connection pool built on top of resource-pool and streaming-commons.
changelog: ! "# ChangeLog / ReleaseNotes\n\n\n## Version 0.2.2\n\n* Removed deprecation
  warnings about the use of `sClose` instead of `close`.\n  (**change**)\n* Bumped
  upper bound on `streaming-commons` to include 0.2.\\* versions.\n\n\n## Version
  0.2.1\n\n* Relaxed upper bound on base to include version 4.9.\\*.\n* Relaxed bounds
  for [data-default-class][] to include 0.1.\\*.\n* Getting rid of compilation warnings
  on GHC 8 and when compiled with pedantic\n  flag.\n* Uploaded to [Hackage][]:\n
  \ <http://hackage.haskell.org/package/connection-pool-0.2.1>\n\n\n## Version 0.2\n\n*
  Release has backward compatible API with 0.1 branch.\n* Introducing `ConnectionPoolFor`
  type class which has instances for both\n  `ConnectionPool TcpClient` and `ConnectionPool
  UnixClient`. Class is located\n  in its own module `Data.ConnectionPool.Class`,
  therefore it is part of stable\n  API. It provides `withConnection` and `destroyAllConnections`
  methods which\n  can be used instead of their more specific equivalents. (**new**)\n*
  `ConnectionPool` data family moved in to its own module\n  `Data.ConnectionPool.Family`,
  as a consequence it became part of stable API.\n  (**change**)\n* Introducing `tryWithUnixClientConnection`
  and `tryWithTcpClientConnection`\n  functions. (**new**)\n* Providing instances
  of `Generic` and `Show` where ever possible and\n  reasonable. This is a backwards
  compatible change. (**new**)\n* Internal `ConnectionPool` data type is now more
  generic because `Socket`\n  handle isn't hard-coded in it any more. This change
  breaks packages depending\n  on internal API. (**change**)\n* Internal type class
  `HasConnectionPool` was introduced to simplify access to\n  `ConnectionPool` data
  type wrapped in other types. (**new**)\n* Internal modules were heavily reorganized
  and TCP and UNIX Sockets related\n  implementations were moved in to their own modules.
  This change breaks\n  packages depending on internal API. (**change**)\n* Heavy
  inlining of everything. Purpose is to be safe that this library gets\n  abstracted
  away as much as possible. Best result is if only direct references\n  to [resource-pool][]
  and [streaming-commons][] remain. (**change**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.2>\n\n\n##
  Version 0.1.3\n\n* All lenses are now defined as strict, as a consequence lower
  bound of\n  [between][] is now `0.10.0.0` instead of `0.9.0.0`. (**change**)\n*
  Support for user defined read buffer size, this was introduced in\n  [streaming-commons][]
  `== 0.1.13`. Non-internal library API is backwards\n  compatible. (**new**)\n* Default
  buffer size changed in [streaming-commons][] `== 0.1.13` to 32kiB,\n  this library
  uses this value as a default even if it's built with\n  [streaming-commons][] `<
  0.1.13`. For more details see\n  <https://github.com/fpco/streaming-commons/issues/22>.
  (**change**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.1.3>\n\n\n##
  Version 0.1.2.1\n\n* Builds also with [streaming-commons][] `>0.1.5 && <0.1.14`.
  Tested up to\n  [streaming-commons][] version 0.1.13. See also issue #1\n  <https://github.com/trskop/connection-pool/issues/1>
  (**bugfix**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.1.2.1>\n\n\n##
  Version 0.1.2.0\n\n* Builds with GHC 7.10 and base 4.8. (**new**)\n* Builds also
  with [streaming-commons][] `>0.1.5 && <0.1.13`. Tested up to\n  [streaming-commons][]
  version 0.1.12.1. (**new**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.1.2.0>\n\n\n##
  Version 0.1.1.0\n\n* Package is now buildable on Windows. (**new**)\n* Introducing
  function `validateResourcePoolParams`. (**new**)\n* Introducing internal function
  `destroyAllConnections`. (**new**)\n* Introducing functions `destroyAllTcpClientConnections`
  and\n  `destroyAllTcpClientConnections` both build on top of\n  `destroyAllConnections`.
  (**new**)\n* Corrected some typos in documentation and Haddock markup.\n* Small
  documentation enhancements.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.1.1.0>\n\n\n##
  Version 0.1.0.0\n\n* First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/connection-pool-0.1.0.0>\n\n\n\n[between]:\n
  \ http://hackage.haskell.org/package/between\n  \"Function combinator 'between'
  and derived combinators.\"\n[data-default-class]:\n  http://hackage.haskell.org/package/data-default-class\n
  \ \"Default type class provides a default value (def) of a type.\"\n[Hackage]:\n
  \ http://hackage.haskell.org/\n  \"HackageDB (or just Hackage) is a collection of
  releases of Haskell packages.\"\n[resource-pool]:\n  http://hackage.haskell.org/package/resource-pool\n
  \ \"A high-performance striped pooling abstraction for managing resources.\"\n[streaming-commons]:\n
  \ http://hackage.haskell.org/package/streaming-commons\n  \"Low-dependency functionality
  commonly needed by various streaming data libraries\"\n"
basic-deps:
  streaming-commons: ! '>=0.1.3 && <0.3'
  base: ! '>=4.6 && <5'
  data-default-class: ==0.0.* || ==0.1.*
  time: ! '>=1.0'
  monad-control: ! '>=0.3'
  resource-pool: ! '>=0.2.0.0 && <1'
  network: ! '>=2.2.3'
  between: ! '>=0.10.0.0'
  transformers-base: ! '>=0.4.2 && <0.5'
all-versions:
- '0.1.0.0'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.3'
- '0.2'
- '0.2.1'
- '0.2.2'
author: Peter TrÅ¡ko
latest: '0.2.2'
description-type: markdown
description: ! "Connection Pool\n===============\n\n[![Hackage](http://img.shields.io/hackage/v/connection-pool.svg)\n][Hackage:
  connection-pool]\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/connection-pool.svg)](http://packdeps.haskellers.com/reverse/connection-pool)\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Build](https://travis-ci.org/trskop/connection-pool.svg)](https://travis-ci.org/trskop/connection-pool)\n\n\nDescription\n-----------\n\nConnection
  pool is a family of specialised resource pools. Currently package\nprovides two\n\n1.
  pool for TCP client connections,\n2. and pool for UNIX Sockets client connections.\n\nIn
  addition it can be used to build your own connection pool using provided primitives.\n\nThis
  package is built on top of [resource-pool][Hackage: resource-pool] and\n[streaming-commons][Hackage:
  streaming-commons]. The later allows us to use\n[conduit-extra][Hackage: conduit-extra]
  package for implementation of TCP or\nUNIX Sockets clients.\n\n\nDocumentation\n-------------\n\nStable
  releases with API documentation are available on\n[Hackage][Hackage: connection-pool]\n\n\nExamples\n--------\n\nSimple
  code examples, including example from the following section, are\navailable in [example/](example/)
  directory.\n\n\nTCP Client Example\n------------------\n\nHere is a simple example
  that demonstrates how TCP client can be created and\nhow connection pool behaves.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Main (main)\n  where\n\nimport Control.Concurrent\n
  \   ( forkIO\n    , newEmptyMVar\n    , putMVar\n    , readMVar\n    , threadDelay\n
  \   )\nimport Control.Monad (void, mapM_)\nimport System.Environment (getArgs)\n\nimport
  Control.Lens ((.~), (&))\nimport Data.ConnectionPool\n    ( createTcpClientPool\n
  \   , numberOfResourcesPerStripe\n    , numberOfStripes\n    , withTcpClientConnection\n
  \   )\nimport Data.Default.Class (Default(def))\nimport Data.Streaming.Network (appWrite,
  clientSettingsTCP)\n\n\nmain :: IO ()\nmain = do\n    [port, numStripes, numPerStripe]
  <- getArgs\n    pool <- createTcpClientPool\n        (poolParams numStripes numPerStripe)\n
  \       (clientSettingsTCP (read port) \"127.0.0.1\")\n    thread1 <- newEmptyMVar\n
  \   thread2 <- newEmptyMVar\n    void . forkIO . withTcpClientConnection pool $
  \\appData -> do\n        threadDelay 1000\n        appWrite appData \"1: I'm alive!\\n\"\n
  \       putMVar thread1 ()\n    void . forkIO . withTcpClientConnection pool $ \\appData
  -> do\n        appWrite appData \"2: I'm alive!\\n\"\n        putMVar thread2 ()\n
  \   mapM_ readMVar [thread1, thread2]\n  where\n    poolParams m n =\n        def
  & numberOfStripes .~ read m\n            & numberOfResourcesPerStripe .~ read n\n```\n\nTo
  test it we can use `socat` or some `netcat` like application. Our test will\nrequire
  two terminals, in one we will execute `socat` as a server listenting on\nUNIX socket
  and in the other one we execute above example.\n\nSimple TCP server listening on
  port `8001` that prints what it receives to\nstdout:\n\n    $ socat TCP4-LISTEN:8001,bind=127.0.0.1,fork
  -\n\nThe `fork` parameter in the above example is important, otherwise `socat` would\nterminate
  when client closes its connection.\n\nIf we run above example as:\n\n    $ runghc
  tcp-example.hs 8001 1 1\n\nWe can see that `socat` received following text:\n\n
  \   1: I'm alive!\n    2: I'm alive!\n\nBut if we increment number of stripes or
  number of connections (resources) per\nstripe, then we will get:\n\n    2: I'm alive!\n
  \   1: I'm alive!\n\nThe reason for this is that we use `threadDelay 1000` in the
  first executed\nthread. So when we have only one stripe and one connection per stripe,
  then we\nhave only one connection in the pool. Therefore when the first thread executes\nand
  acquires a connection, then all the other threads (the other one in above\nexample)
  will block. If we have more then one connection available in our pool,\nthen the
  first thread acquires connection, blocks on `threadDelay` call, but\nthe other thread
  also acquires connection and prints its output while the first\nthread is still
  blocked on `threadDelay`. This example demonstrates how\nconnection pool behaves
  if it reached its capacity and when it has enough free\nresources.\n\n\nLicense\n-------\n\nThe
  BSD 3-Clause License, see [LICENSE](LICENSE) file for details.\n\n\nContributions\n-------------\n\nContributions,
  pull requests and bug reports are welcome! Please don't be\nafraid to contact author
  using GitHub or by e-mail (see `.cabal` file for\nthat).\n\n\n\n[Hackage: conduit-extra]:
  http://hackage.haskell.org/package/conduit-extra\n[Hackage: connection-pool]: http://hackage.haskell.org/package/connection-pool\n[Hackage:
  resource-pool]: http://hackage.haskell.org/package/resource-pool\n[Hackage: streaming-commons]:
  http://hackage.haskell.org/package/streaming-commons\n[Haskell.org]: http://www.haskell.org
  \"The Haskell Programming Language\"\n[tl;dr Legal: BSD3]: https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29
  \"BSD 3-Clause License (Revised)\"\n"
license-name: BSD3
