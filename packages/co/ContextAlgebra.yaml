homepage: https://github.com/juergenhah/ContextAlgebra
changelog-type: ''
hash: 07745f65b2cc91e556a8b0de199426241b7e42562420e544358526ee1812b920
test-bench-deps: {}
maintainer: hahn@geoinfo.tuwien.ac.at
synopsis: Implementation of the context algebra.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <4.9'
  criterion: ! '>=1.1 && <1.2'
  containers: ! '>=0.5 && <0.6'
  statistics: ! '>=0.13 && <0.14'
  multiset: ! '>=0.3 && <0.4'
  QuickCheck: ! '>=2.8 && <2.9'
  vector: ! '>=0.11 && <0.12'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 1.0.0.0
author: Jürgen Hahn
latest: 1.0.0.0
description-type: markdown
description: ! "# ContextAlgebra\nImplementation of the ContextAlgebra published in
  dissertation: *Context Algebra applied to Spatial Concepts*\n\nThis library is available
  on hackage [ContextAlgebra](https://hackage.haskell.org/package/ContextAlgebra)\n\n#
  Abstract\nWords are used to refer to objects in reality. One word can imply many
  references to different objects that are categorized as similar. For example, the
  word “city” can refer to Vienna, Alexandria, or Las Vegas; the word “near” can refer
  to a range of distances, e. g. “moon is near the earth” or “near St. Stephens cathedral”.
  If a Geographic Information System (GIS) is queried with a sentence including “city”
  or “near”, the challenge for an algorithm executed by the GIS is to decide which
  exemplar of the word “city” or which distance “near” refers to.\n\nTo overcome this
  challenge, the hypothesis is that context selects references to objects in reality.
  A context algebra is presented, implemented, and used to represent the word “near”
  (in the thesis), in order to evaluate the hypothesis. Context algebra makes use
  of the theory established by a context-enriched semiotic triangle. The semiotic
  triangle connects objects in reality to words via concepts in an agent. With context
  enrichment, the concept is separated into contextualized concepts that include objects
  in reality valid for a specific context. If words are used in this specific context,
  then they correspond to a specific contextualized concept, which then selects specific
  references to objects from reality.\n\nContext algebra proposes a formalization
  for context. In this algebra, contexts are ordered with a partial order relation
  and can be combined with a disjunction or conjunction function to create other contexts.
  This relation and these functions satisfy algebraic properties that result in a
  lattice structure for context. Each context included in the lattice is mapped to
  a contextualized concept. A contextualized concept is modeled with sets of objects
  observed from reality, where a typical object is determined. This typical object
  (prototype) is assumed to be the translation from a word to an object in reality.
  For example, the influencing context “capital of Austria” for the word “city” selects
  the prototypical instance Vienna. \n\nContext algebra is implemented using Haskell,
  it is then proven, and the complexity class is determined. \n - The implementation
  shows that the context algebra is realizable with reasonable performance. \n - To
  prove that the implementation satisfies the proposed algebraic properties, tests
  are successfully executed. \n - The benchmarks determine the complexity class exponential
  for the implementation.\n\n\n# Implementation\nThe implementation is structured
  into several modules according to the mathematical structure of the theory.\n\n
  - **ContextAlgebra** is built upon several abstract classes, each representing a
  mathematical structure.\n - **Concept** invents two containers, one to connect a
  concept to context (*Observation* data type) and one to build the concept (*MultiSet*
  of *Observations*).\n - **Mapping** establishes a *ContextualizedConcept* via the
  mapping function *m*\n - **ContextualizedConcept** calculates prototypes for a *ContextualizedConcept*.\n\n##
  SetImplementation\n - **ContextAlgebraSetInstance** instances all abstract classes
  given in module **ContextAlgebra** using sets.\n\n## ExemplarScales\n - **NominalExemplars**
  calculates a prototype from exemplars on a nominal exemplar scales.\n - **RatioExamplars**
  calculates a prototype from exemplars on a rational measurement scale.\n\n# Evaluation
  \n - **ContextAlgebraEvaluation** execution of all property tests for the **ContextAlgebra**.\n
  - **QuickCheckHelper** wrapper functions for [QuickCheck](https://hackage.haskell.org/package/QuickCheck)
  execution.\n\n# Benchmarks - Complexity\n - **ConceptGenerator** establishes concepts,
  with a freely selected number of exemplars and contexts.\n - **ProtoCalculator**
  calculates prototypes for each level of a *ContextLattice*.\n\n# Example for a General
  Context Operation\n\nModule **GeneralContextOperation** shows an example of the
  context algebra refining concepts and calculating prototypes for contextualized
  concepts. For an extended explanation look on page 58 in the dissertation.\n\n\n#
  Further Reading\nIf you are interested, there are two publications online to read
  and do not hesitate to contact me.\n - Context Algebra applied to Spatial Concepts
  (soon available)\n - [A Computational Model for Context and Spatial Concepts](https://link.springer.com/chapter/10.1007/978-3-319-33783-8_1)\n\n"
license-name: BSD-3-Clause
