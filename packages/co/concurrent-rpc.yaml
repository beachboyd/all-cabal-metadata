homepage: https://github.com/lpeterse/haskell-concurrent-rpc
changelog-type: ''
hash: 84118778b9ed145c51a53fe059066af2f998e67b7812ff1d51b28fd4ed380ce6
test-bench-deps: {}
maintainer: info@lars-petersen.net
synopsis: An abstraction for inter-thread RPC based on MVars
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
all-versions:
- 0.1.0.0
author: Lars Petersen
latest: 0.1.0.0
description-type: markdown
description: ! "concurrent-rpc\n==============\n\n[![Available on Hackage][badge-hackage]][hackage]\n[![License
  MIT][badge-license]][license]\n[![Build Status][badge-travis]][travis]\n\n### Summary\n\nThis
  library is small wrapper around `Control.Concurrent.MVar.MVar`s that can\nbe used
  to implement request-response communication between different threads.\n\n### Example\n\n```haskell\nmodule
  MissileLauncher where\n\nimport Control.Exception\nimport Control.Monad\nimport
  Control.Concurrent\nimport Control.Concurrent.Async\nimport Control.Concurrent.RPC\nimport
  Data.Word\nimport System.Random\n\ntype Missile    = Word\ntype LaunchSite = String\n\nmain
  :: IO ()\nmain = do\n  (launchMissile, withMissile) <- newRPC\n  runMissileProduction
  launchMissile\n    `race_` runLaunchSite withMissile \"Redmond\"\n    `race_` runLaunchSite
  withMissile \"Cambridge\"\n\nrunLaunchSite :: WithRPC Missile LaunchSite -> LaunchSite
  -> IO ()\nrunLaunchSite withMissile site = forever $ do\n  sleepRandom\n  catch\n
  \   ( withMissile $ \\missile-> do\n        r <- random100\n        if r < 10\n
  \         then error $ \"bad weather in \" ++ site\n          else do\n            printThread
  $ site ++ \": LAUNCH THE MISSILE!\"\n            return site\n    )\n    ( \\e->
  do\n      let _ = e :: SomeException\n      printThread $ site ++ \": Couldn't launch.
  Waiting for next missile.\"\n    )\n\nrunMissileProduction :: RPC Missile LaunchSite
  -> IO ()\nrunMissileProduction launchMissile =\n  produce  `race_` produce `race_`
  produce `race_` produce\n  where\n    produce = forever $ do\n      sleepRandom\n
  \     missile <- randomIO :: IO Missile\n      catch\n        ( do\n            printThread
  $ \"Production: Ready to launch missile \" ++ show missile\n            site <-
  launchMissile missile\n            printThread $ \"Production: Missile \" ++ show
  missile ++ \" launched in \" ++ site\n        )\n        ( \\e->\n            printThread
  $ \"Production: Missile \" ++ show missile ++\n                          \" failed
  to launch due to \" ++ show (e :: SomeException)\n        )\n\nprintThread :: Show
  a => a -> IO ()\nprintThread x = do\n  threadId <- myThreadId\n  random100 >>= \\x->
  threadDelay (x * 100)\n  putStrLn $ show threadId ++ \": \" ++ show x\n\nrandom100
  :: IO Int\nrandom100 = (`mod` 100) <$> randomIO\n\nsleepRandom :: IO ()\nsleepRandom
  = random100 >>= \\x-> threadDelay (x * 100000)\n```\n\n### Dependencies\n\n   -
  base >= 4.7 && < 5\n\n[badge-travis]: https://img.shields.io/travis/lpeterse/haskell-concurrent-rpc.svg\n[travis]:
  https://travis-ci.org/lpeterse/haskell-concurrent-rpc\n[badge-hackage]: https://img.shields.io/hackage/v/concurrent-rpc.svg?dummy\n[hackage]:
  https://hackage.haskell.org/package/concurrent-rpc\n[badge-license]: https://img.shields.io/badge/license-MIT-green.svg?dummy\n[license]:
  https://github.com/lpeterse/haskell-concurrent-rpc/blob/master/LICENSE\n[issues]:
  https://github.com/lpeterse/haskell-concurrent-rpc/issues\n[Github]: https://github.com/lpeterse/haskell-concurrent-rpc\n"
license-name: MIT
