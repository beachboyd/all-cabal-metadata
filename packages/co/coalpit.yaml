homepage: ''
changelog-type: markdown
hash: 9dacf1fbf89a605ad635c91d05b3cd617d2f7cc4ef6878c47f891cdfd5294465
test-bench-deps:
  coalpit: -any
  base: ! '>=4.9 && <5'
  tasty-travis: ! '>=0.2 && <1'
  generic-random: ! '>=1 && <2'
  tasty-quickcheck: ! '>=0.9 && <1'
  tasty: ! '>=0.12 && <1'
maintainer: defanor@uberspace.net
synopsis: Command-line options and DSV parsing and printing
changelog: ! '# Revision history for coalpit


  ## 0.1.1.0  -- 2018-01-03


  Complete rewriting and first Hackage release.



  ## 0.1.0.0  -- 2016-11-24


  A prototype.

'
basic-deps:
  base: ! '>=4.9 && <5'
  time: ! '>=1.6 && <2'
  megaparsec: ! '>=6.2 && <7'
  network-uri: ! '>=2.6 && <3'
  scientific: ! '>=0.3 && <1'
all-versions:
- 0.1.1.0
author: defanor
latest: 0.1.1.0
description-type: markdown
description: ! "# Coalpit\n\nCoalpit is a library for\nbuilding\n[command-line program
  interfaces](https://defanor.uberspace.net/notes/command-line-program-interface.html):\nthe
  goal is to get interfaces between programs quickly and easily,\nwhile keeping them
  language-agnostic and more user- and shell\nscripting-friendly than JSON and similar
  formats.\n\nGiven a type, it derives instances to print and parse it as\ncommand-line
  arguments or DSVs, as well as to compose usage\ninstructions. The resulting deserialization
  wouldn't be as nice as\nthat of\ne.g.\n[optparse-generic](https://hackage.haskell.org/package/optparse-generic),\nbut
  the aim here is to handle more or less arbitrary types.\n\nWarning: it is possible
  to run into ambiguity by defining a recursive\nstructure with optional named elements
  while using default options.\n`omitNamedOptions` can be disabled to avoid that.\n\n\n##
  Example\n\nAn example is available in `examples/Basic.hs`. Given the following\nHaskell
  value:\n\n```haskell\nInput { something = Nothing\n      , fooBar = Just (Foo (FooArgs
  { arg1 = 1\n                                    , arg2 = \"a string\"}))\n      ,
  fooBar2 = Bar}\n```\n\nWith the default options, its serialized version should look
  like\nthis:\n\n```haskell\n[\"--foobar\",\"foo\",\"1\",\"a string\",\"bar\"]\n```\n\nWhat
  would look like this in a shell:\n\n```sh\n--foobar foo 1 'a string' bar\n```\n\nAnd
  its usage string -- like this:\n\n```\n[--something STRING] [--foobar (foo INT STRING
  | bar)] (foo INT STRING | bar)\n```\n\nMore verbose versions can be produced and
  parsed with\n`alwaysUseSelName = True` and/or `omitNamedOptions = False`:\n\n```sh\n--foobar
  foo --arg1 1 --arg2 'a string' --foobar2 bar\nnothing just foo 1 'a string' bar\n--something
  nothing --foobar just foo --arg1 1 --arg2 'a string' --foobar2 bar\n```\n\nAnd here
  is output of the `help` function from the same file, with all\nthe (alwaysUseSelName,
  omitNamedOptions) combinations:\n\n```\n(True,True)\n--foo : 1 : 2 : 3 [] --bar
  \"a string\"\n--foo ([] | : INT ([] | :...)) [--bar STRING]\n(True,True)\n--foo
  : 1 : 2 : 3 []\n--foo ([] | : INT ([] | :...)) [--bar STRING]\n(True,False)\n--foo
  : 1 : 2 : 3 [] --bar just \"a string\"\n--foo ([] | : INT ([] | :...)) --bar (nothing
  | just STRING)\n(True,False)\n--foo : 1 : 2 : 3 [] --bar nothing\n--foo ([] | :
  INT ([] | :...)) --bar (nothing | just STRING)\n(False,True)\n: 1 : 2 : 3 [] --bar
  \"a string\"\n([] | : INT ([] | :...)) [--bar STRING]\n(False,True)\n: 1 : 2 : 3
  []\n([] | : INT ([] | :...)) [--bar STRING]\n(False,False)\n: 1 : 2 : 3 [] just
  \"a string\"\n([] | : INT ([] | :...)) (nothing | just STRING)\n(False,False)\n:
  1 : 2 : 3 [] nothing\n([] | : INT ([] | :...)) (nothing | just STRING)\n```\n"
license-name: BSD-3-Clause
