homepage: http://github.com/ekmett/comonad/
changelog-type: markdown
hash: fdf1b529a79765a8549ac7e9d439b769cca852778742db8702a9d9b2dc27e4a4
test-bench-deps:
  base: -any
  comonad: -any
  doctest: '>=0.11.1 && <0.18'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Comonads
changelog: |
  5.0.6 [2019.11.26]
  ------------------
  * Achieve forward compatibility with
    [GHC proposal 229](https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0229-whitespace-bang-patterns.rst).

  5.0.5 [2019.05.02]
  ------------------
  * Raised the minimum `semigroups` version to 0.16.2. In addition, the
    package will only be required at all for GHCs before 8.0.
  * Drop the `contravariant` flag from `comonad.cabal`, as `comonad` no longer
    depends on the `contravariant` library.

  5.0.4 [2018.07.01]
  ------------------
  * Add `Comonad` instances for `Tagged s` with `s` of any kind. Before the
    change, `s` had to be of kind `*`.
  * Allow `containers-0.6`.

  5.0.3 [2018.02.06]
  ------------------
  * Don't enable `Safe` on GHC 7.2.

  5.0.2
  -----
  * Support `doctest-0.12`

  5.0.1
  -----
  * Revamp `Setup.hs` to use `cabal-doctest`. This makes it build
    with `Cabal-1.25`, and makes the `doctest`s work with `cabal new-build` and
    sandboxes.

  5
  -
  * Removed module `Data.Functor.Coproduct` in favor of the `transformers`
    package's `Data.Functor.Sum`. n.b. Compatibility with older versions of
    `transformers` is possible using `transformers-compat`.
  * Add `Comonad` instance for `Data.Functor.Sum.Sum`
  * GHC 8 compatibility

  4.2.7.2
  -------
  * Compiles warning-free on GHC 7.10

  4.2.7.1
  -------
  * Use CPP

  4.2.7
  -----
  * `Trustworthy` fixes for GHC 7.2

  4.2.6
  -----
  * Re-export `(Data.Functor.$>)` rather than supply our own on GHC 7.8+
  * Better SafeHaskell support.
  * `instance Monoid m => ComonadTraced m ((->) m)`

  4.2.5
  -------
  * Added a `MINIMAL` pragma to `Comonad`.
  * Added `DefaultSignatures` support for `ComonadApply` on GHC 7.2+

  4.2.4
  -----
  * Added Kenneth Foner's fixed point as `kfix`.

  4.2.3
  -----
  * Add `Comonad` and `ComonadEnv` instances for `Arg e` from `semigroups 0.16.3` which can be used to extract the argmin or argmax.

  4.2.2
  -----
  * `contravariant` 1.0 support

  4.2.1
  -----
  * Added flags that supply unsupported build modes that can be convenient for sandbox users.

  4.2
  ---
  * `transformers 0.4` compatibility

  4.1
  ---
  * Fixed the 'Typeable' instance for 'Cokleisli on GHC 7.8.1

  4.0.1
  -----
  * Fixes to avoid warnings on GHC 7.8.1

  4.0
  ---
  * Merged the contents of `comonad-transformers` and `comonads-fd` into this package.

  3.1
  ---
  * Added `instance Comonad (Tagged s)`.

  3.0.3
  -----
  * Trustworthy or Safe depending on GHC version

  3.0.2
  -------
  * GHC 7.7 HEAD compatibility
  * Updated build system
basic-deps:
  base: '>=4 && <5'
  distributive: '>=0.2.2 && <1'
  tagged: '>=0.7 && <1'
  containers: '>=0.3 && <0.7'
  transformers: '>=0.2 && <0.6'
  transformers-compat: '>=0.3 && <1'
all-versions:
- 0.1.0
- 0.1.1
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.6.1.1
- 0.6.1.2
- 0.6.2
- 0.6.2.1
- 0.7.0
- 0.9.0
- 0.9.0.1
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.1.0
- 1.1.0.1
- 1.1.0.2
- 1.1.1
- 1.1.1.1
- 1.1.1.2
- 1.1.1.3
- 1.1.1.4
- 1.1.1.5
- 1.1.1.6
- '3.0'
- 3.0.0.1
- 3.0.0.2
- 3.0.1.1
- 3.0.2
- 3.0.3
- '3.1'
- '4.0'
- 4.0.1
- '4.2'
- 4.2.1
- 4.2.2
- 4.2.3
- 4.2.4
- 4.2.5
- 4.2.6
- 4.2.7
- 4.2.7.1
- 4.2.7.2
- '4.3'
- '5'
- 5.0.1
- 5.0.2
- 5.0.3
- 5.0.4
- 5.0.5
- 5.0.6
author: Edward A. Kmett
latest: 5.0.6
description-type: markdown
description: |
  comonad
  =======

  [![Hackage](https://img.shields.io/hackage/v/comonad.svg)](https://hackage.haskell.org/package/comonad) [![Build Status](https://secure.travis-ci.org/ekmett/comonad.svg?branch=master)](http://travis-ci.org/ekmett/comonad)

  This package provides comonads, the categorical dual of monads. The typeclass
  provides three methods:  `extract`, `duplicate`, and `extend`.

      class Functor w => Comonad w where
          extract :: w a -> a
          duplicate :: w a -> w (w a)
          extend :: (w a -> b) -> w a -> w b

  There are two ways to define a comonad:

  I. Provide definitions for `extract` and `extend` satisfying these laws:

      extend extract      = id
      extract . extend f  = f
      extend f . extend g = extend (f . extend g)

  In this case, you may simply set `fmap` = `liftW`.

  These laws are directly analogous to the [laws for
  monads](https://wiki.haskell.org/Monad_laws). The comonad laws can
  perhaps be made clearer by viewing them as stating that Cokleisli composition
  must be a) associative and b) have `extract` for a unit:

      f =>= extract   = f
      extract =>= f   = f
      (f =>= g) =>= h = f =>= (g =>= h)

  II. Alternately, you may choose to provide definitions for `fmap`,
  `extract`, and `duplicate` satisfying these laws:

      extract . duplicate      = id
      fmap extract . duplicate = id
      duplicate . duplicate    = fmap duplicate . duplicate

  In this case, you may not rely on the ability to define `fmap` in
  terms of `liftW`.

  You may, of course, choose to define both `duplicate` _and_ `extend`.
  In that case, you must also satisfy these laws:

      extend f  = fmap f . duplicate
      duplicate = extend id
      fmap f    = extend (f . extract)

  These implementations are the default definitions of `extend` and`duplicate` and
  the definition of `liftW` respectively.

  Contact Information
  -------------------

  Contributions and bug reports are welcome!

  Please feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.

  -Edward Kmett
license-name: BSD-3-Clause
