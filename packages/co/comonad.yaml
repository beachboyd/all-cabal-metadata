homepage: http://github.com/ekmett/comonad/
changelog-type: markdown
hash: 92d4edb3241540324409aec2699f7a576eedd5577764ecc3001edc636ec33545
test-bench-deps:
  base: -any
  comonad: -any
  doctest: ! '>=0.11.1 && <0.14'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Comonads
changelog: ! "5.0.3 [2018.02.06]\n------------------\n* Don't enable `Safe` on GHC
  7.2.\n\n5.0.2\n-----\n* Support `doctest-0.12`\n\n5.0.1\n-----\n* Revamp `Setup.hs`
  to use `cabal-doctest`. This makes it build\n  with `Cabal-1.25`, and makes the
  `doctest`s work with `cabal new-build` and\n  sandboxes.\n\n5\n-\n* Removed module
  `Data.Functor.Coproduct` in favor of the `transformers`\n  package's `Data.Functor.Sum`.
  n.b. Compatibility with older versions of\n  `transformers` is possible using `transformers-compat`.\n*
  Add `Comonad` instance for `Data.Functor.Sum.Sum`\n* GHC 8 compatibility\n\n4.2.7.2\n-------\n*
  Compiles warning-free on GHC 7.10\n\n4.2.7.1\n-------\n* Use CPP\n\n4.2.7\n-----\n*
  `Trustworthy` fixes for GHC 7.2\n\n4.2.6\n-----\n* Re-export `(Data.Functor.$>)`
  rather than supply our own on GHC 7.8+\n* Better SafeHaskell support.\n* `instance
  Monoid m => ComonadTraced m ((->) m)`\n\n4.2.5\n-------\n* Added a `MINIMAL` pragma
  to `Comonad`.\n* Added `DefaultSignatures` support for `ComonadApply` on GHC 7.2+\n\n4.2.4\n-----\n*
  Added Kenneth Foner's fixed point as `kfix`.\n\n4.2.3\n-----\n* Add `Comonad` and
  `ComonadEnv` instances for `Arg e` from `semigroups 0.16.3` which can be used to
  extract the argmin or argmax.\n\n4.2.2\n-----\n* `contravariant` 1.0 support\n\n4.2.1\n-----\n*
  Added flags that supply unsupported build modes that can be convenient for sandbox
  users.\n\n4.2\n---\n* `transformers 0.4` compatibility\n\n4.1\n---\n* Fixed the
  'Typeable' instance for 'Cokleisli on GHC 7.8.1\n\n4.0.1\n-----\n* Fixes to avoid
  warnings on GHC 7.8.1\n\n4.0\n---\n* Merged the contents of `comonad-transformers`
  and `comonads-fd` into this package.\n\n3.1\n---\n* Added `instance Comonad (Tagged
  s)`.\n\n3.0.3\n-----\n* Trustworthy or Safe depending on GHC version\n\n3.0.2\n-------\n*
  GHC 7.7 HEAD compatibility\n* Updated build system\n"
basic-deps:
  base: ! '>=4 && <5'
  distributive: ! '>=0.2.2 && <1'
  semigroups: ! '>=0.8.3.1 && <1'
  tagged: ! '>=0.7 && <1'
  containers: ! '>=0.3 && <0.6'
  contravariant: ! '>=0.2.0.1 && <2'
  transformers: ! '>=0.2 && <0.6'
  transformers-compat: ! '>=0.3 && <1'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.3.0'
- '0.4.0'
- '0.5.0'
- '0.6.0'
- '0.6.1'
- '0.6.1.1'
- '0.6.1.2'
- '0.6.2'
- '0.6.2.1'
- '0.7.0'
- '0.9.0'
- '0.9.0.1'
- '1.0'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.1'
- '1.1.1.1'
- '1.1.1.2'
- '1.1.1.3'
- '1.1.1.4'
- '1.1.1.5'
- '1.1.1.6'
- '3.0'
- '3.0.0.1'
- '3.0.0.2'
- '3.0.1.1'
- '3.0.2'
- '3.0.3'
- '3.1'
- '4.0'
- '4.0.1'
- '4.2'
- '4.2.1'
- '4.2.2'
- '4.2.3'
- '4.2.4'
- '4.2.5'
- '4.2.6'
- '4.2.7'
- '4.2.7.1'
- '4.2.7.2'
- '4.3'
- '5'
- '5.0.1'
- '5.0.2'
- '5.0.3'
author: Edward A. Kmett
latest: '5.0.3'
description-type: markdown
description: ! "comonad\n=======\n\n[![Hackage](https://img.shields.io/hackage/v/comonad.svg)](https://hackage.haskell.org/package/comonad)
  [![Build Status](https://secure.travis-ci.org/ekmett/comonad.svg?branch=master)](http://travis-ci.org/ekmett/comonad)\n\nThis
  package provides comonads, the categorical dual of monads. The typeclass\nprovides
  three methods:  `extract`, `duplicate`, and `extend`.\n\n    class Functor w =>
  Comonad w where\n        extract :: w a -> a\n        duplicate :: w a -> w (w a)\n
  \       extend :: (w a -> b) -> w a -> w b\n\nThere are two ways to define a comonad:\n\nI.
  Provide definitions for `extract` and `extend` satisfying these laws:\n\n    extend
  extract      = id\n    extract . extend f  = f\n    extend f . extend g = extend
  (f . extend g)\n\nIn this case, you may simply set `fmap` = `liftW`.\n\nThese laws
  are directly analogous to the [laws for\nmonads](https://wiki.haskell.org/Monad_laws).
  The comonad laws can\nperhaps be made clearer by viewing them as stating that Cokleisli
  composition\nmust be a) associative and b) have `extract` for a unit:\n\n    f =>=
  extract   = f\n    extract =>= f   = f\n    (f =>= g) =>= h = f =>= (g =>= h)\n\nII.
  Alternately, you may choose to provide definitions for `fmap`,\n`extract`, and `duplicate`
  satisfying these laws:\n\n    extract . duplicate      = id\n    fmap extract .
  duplicate = id\n    duplicate . duplicate    = fmap duplicate . duplicate\n\nIn
  this case, you may not rely on the ability to define `fmap` in\nterms of `liftW`.\n\nYou
  may, of course, choose to define both `duplicate` _and_ `extend`.\nIn that case,
  you must also satisfy these laws:\n\n    extend f  = fmap f . duplicate\n    duplicate
  = extend id\n    fmap f    = extend (f . extract)\n\nThese implementations are the
  default definitions of `extend` and`duplicate` and\nthe definition of `liftW` respectively.\n\nContact
  Information\n-------------------\n\nContributions and bug reports are welcome!\n\nPlease
  feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.\n\n-Edward
  Kmett\n"
license-name: BSD3
