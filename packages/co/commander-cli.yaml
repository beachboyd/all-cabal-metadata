homepage: https://github.com/SamuelSchlesinger/commander-cli
changelog-type: markdown
hash: 785f4061a9f28b18b01c53eb931e8fe3ede9b3d630b22314a34bf4fd3f73e7b7
test-bench-deps:
  base: '>=4.12 && <5'
  unordered-containers: '>=0.2 && <1'
  text: '>=1.2 && <2'
  commander-cli: -any
maintainer: sgschlesinger@gmail.com
synopsis: A command line argument/option parser library built around a monadic metaphor
changelog: |
  # Revision history for commander-cli

  ## 0.1.0.0 -- 2020-01-12

  * Ported this to a cabal project after having built it in a larger repository
  accompanied by scripts written with it. (Samuel Schlesinger)
basic-deps:
  bytestring: '>=0.8 && <1'
  base: '>=4.12 && <5'
  unordered-containers: '>=0.2 && <1'
  text: '>=1.2 && <2'
  commander-cli: -any
  process: '>=1.6 && <2'
  mtl: '>=2.2 && <3'
  directory: '>=1.3 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.1
- 0.4.1.2
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
author: Samuel Schlesinger
latest: 0.6.2.0
description-type: markdown
description: |
  # Commander CLI

  [![Hackage](https://img.shields.io/hackage/v/commander-cli.svg)](https://hackage.haskell.org/package/commander-cli)
  [![Build Status](https://travis-ci.org/SamuelSchlesinger/commander-cli.svg?branch=master)](https://travis-ci.org/SamuelSchlesinger/commander-cli)

  This library is meant to allow Haskell programs to quickly and easily construct
  command line interfaces which are easy to use, especially as a Haskell user. To
  begin, I suggest viewing/playing with the task-manager application which
  comes with this repository. Its usage info is generated as:

  ```bash
  usage:
  task-manager help
  task-manager (required env: TASK_DIRECTORY :: [Char]) edit <task-name :: [Char]>
  task-manager (required env: TASK_DIRECTORY :: [Char]) open <task-name :: [Char]>
  task-manager (required env: TASK_DIRECTORY :: [Char]) close <task-name :: [Char]>
  task-manager (required env: TASK_DIRECTORY :: [Char]) tasks
  task-manager (required env: TASK_DIRECTORY :: [Char]) priorities
  task-manager (required env: TASK_DIRECTORY :: [Char])
  ```


  The library is based around the following classes:

  ```haskell
  class Unrender r where
    unrender :: Text -> Maybe r
  ```

  This class is what you will use to define the parsing of a type from text and
  can use any parsing library or whatever you want. Next, we have the class

  ```haskell
  class HasProgram p where
    data ProgramT p m a
    run :: ProgramT p IO a -> CommanderT State IO a
    hoist :: (forall x. m x -> n x) -> ProgramT p m a -> ProgramT p n a
    invocations :: [Text]
  ```

  Instances of this class will define a syntactic element, a new instance of the
  data family ProgramT, as well as its semantics in terms of the CommanderT monad,
  which is a backtracking monad based on a metaphor to military commanders which
  retreats upon defeat.
license-name: MIT
