homepage: https://github.com/SamuelSchlesinger/commander-cli
changelog-type: markdown
hash: e86f30d6670f7635d55129e2a90066bb8875a99ae0470938cc6e639e600eba0b
test-bench-deps:
  base: '>=4.12 && <5'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2.4 && <1.3'
  commander-cli: -any
maintainer: sgschlesinger@gmail.com
synopsis: A command line argument/option parser library built around a monadic metaphor
changelog: |
  # Revision history for commander-cli

  ## 0.1.0.0 -- 2020-01-12

  * Ported this to a cabal project after having built it in a larger repository
  accompanied by scripts written with it. (Samuel Schlesinger)
basic-deps:
  bytestring: '>=0.8 && <0.11'
  base: '>=4.12 && <5'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2.4 && <1.3'
  commander-cli: -any
  process: '>=1.6 && <1.7'
  mtl: ==2.2.*
  directory: '>=1.3 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.1
author: Samuel Schlesinger
latest: 0.4.1.1
description-type: markdown
description: |
  # Commander CLI

  [![Hackage](https://img.shields.io/hackage/v/commander-cli.svg)](https://hackage.haskell.org/package/commander-cli)
  [![Build Status](https://travis-ci.org/SamuelSchlesinger/commander-cli.svg?branch=master)](https://travis-ci.org/SamuelSchlesinger/commander-cli)

  This library is meant to allow Haskell programs to quickly and easily construct
  command line interfaces which are easy to use, especially as a Haskell user. To
  begin, I suggest viewing the task-manager application which comes with this
  repository. The library is based around the following classes:

  ```haskell
  class Unrender r where
    unrender :: Text -> Maybe r
  ```

  This class is what you will use to define the parsing of a type from text and
  can use any parsing library or whatever you want. Next, we have the class

  ```haskell
  class HasProgram p where
    data ProgramT p m a
    run :: ProgramT p IO a -> CommanderT State IO a
    hoist :: (forall x. m x -> n x) -> ProgramT p m a -> ProgramT p n a
    invocations :: [Text]
  ```

  Instances of this class will define a syntactic element, a new instance of the
  data family ProgramT, as well as its semantics in terms of the CommanderT monad,
  which is a backtracking monad based on a metaphor to military commanders which
  retreats upon defeat.
license-name: MIT
