homepage: ''
changelog-type: markdown
hash: 0509a3db7aa9ba91ed7c721e20c71923af19fdba9ff981f0a4385e6550c72968
test-bench-deps: {}
maintainer: jacinablackbox@yahoo.com
synopsis: Enhanced serialization for media that support seeking.
changelog: ! "# Revision history for columbia\r\n\r\n## 0.1.0.0  -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n\r\n## 0.1.0.2\r\n\r\n* Some
  changes to fix installs on the Hackage server.\r\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  base: ! '>=4.6 && <=5'
  pointed: ==5
  invariant: ==0.4.2
  monad-loops: ==0.4.3
  array: ! '>=0.5.1 && <0.5.2'
  mmap: ==0.5.9
  containers: ==0.5.8.1
  pointless-haskell: ==0.0.9
  data-endian: ==0.1
  syb-with-class: ==0.6.1.7
  contravariant: ==1.4
  mtl: ==2.2.1
  mmorph: ==1.0.9
  filelock: ==0.1.0.1
  transformers: ! '>=0.4.2.0 && <=0.5.0.0'
  parallel: ==3.2.1.1
  directory: ! '>=1.2.2.0 && <=1.3.0.0'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.1'
- '0.1.2'
author: James Candy
latest: '0.1.2'
description-type: haddock
description: ! 'Libraries such as binary and cereal support sequential reading and
  writing but do not rely on any further operations. Many media support seeking in
  files as well. This library implements a file format that supports random access
  to data entities by seeking.


  This library by default enforces a strong concept of immutability; this has a number
  of benefits including sharing of substructure. Files in its format have a nominal
  mutable state that changes over discrete time steps, permitting strong reasoning.
  This work was inspired by Haskell''s focus on immutability, and by the programming
  langauge Clojure''s very disciplined management of mutable state.


  In addition to a bare bones locking strategy, an optional transactional locking
  strategy over tree data structures is implemented. This gets this close to an object-oriented
  DBMS; there is a strong affinity between persisted objects and tree data structures.
  The transaction strategy prevents multiple processes from reading and writing on
  data that is mutually descendant in a tree structure. I argue that this is the appropriate
  generalization of transactions on traditional relational database records.


  The database''s store has been implemented over memory maps for speed, and is portable
  between Windows and Linux platforms.


  This library also uses the syb-with-class library to streamline implementation of
  serializers for various data entities, so that you don''t have to write much boilerplate
  ;).


  Release notes for version 0.1.1:


  * Changed the invariant surrounding how files are seeked for reading/writing procedures.
  This permits an additional optimization. See Utils module for details.


  * Generalized the interface to Utils locking strategies to arbitrary monads incorporating
  exceptions and I/O.


  Release notes for version 0.1.2:


  * Minor bug fixes.'
license-name: BSD3
