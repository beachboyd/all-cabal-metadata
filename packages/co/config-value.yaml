homepage: https://github.com/glguy/config-value
changelog-type: markdown
hash: cc90d51318b3ae633aebe2b099953d75c514a19aeefbf68ceed38d8f983f049a
test-bench-deps: {}
maintainer: emertens@gmail.com
synopsis: Simple, layout-based value language similar to YAML or JSON
changelog: ! '0.6.3.1

  ---

  * Build on GHC 8.4.1


  0.6.3

  ---

  * Add `valuePlate`


  0.6.2.1

  ---

  * Fixed error output for unexpected floating point literal


  0.6.2

  ---

  * Nicer errors on unterminated inline lists and sections.

  * Stop enforcing well-formed text files


  0.6.1

  ---

  * Add vim syntax highlighting file

  * Fix string gaps, they shouldn''t require a newline


  0.6

  ---

  * Annotate `Value` with file positions

  * Derive `Generic1` instances for `Value`


  0.5.1

  ---

  * Allow trailing commas in lists and section lists

  * Support inline section lists using `{}`

  * Add more documentation


  0.5

  ----

  * Add support for floating-point numbers


  0.4.0.2

  ----

  * Internal lexer and parser improvements

  * Added support for `\&` escape sequence


  0.4.0.1

  ----

  * Loosen version constraints to build back to GHC 7.4.2

  * Remove unused bytestring dependency


  0.4

  ----

  * Make `Atom` a newtype to help distinguish it from `Text`

  * Add `values` traversal for traversing individual elements of a list


  0.3

  -----

  * Replace `yes` and `no` with generalized atoms

  * Add character index to error position

  * Add human readable error messages


  0.2

  -----

  * Take `Text` as the input to `parse`


  0.1.1

  -----

  * Added `Config.Lens` module

  * Added aligned fields to pretty printer


  0.1

  -----

  * Initial release

'
basic-deps:
  base: ! '>=4.8 && <4.13'
  text: ! '>=1.2.0.4 && <1.3'
  array: ! '>=0.4 && <0.6'
  pretty: ! '>=1.1.1.0 && <1.2'
all-versions:
- '0.1'
- '0.1.1'
- '0.2'
- '0.3'
- '0.4'
- '0.4.0.1'
- '0.4.0.2'
- '0.5'
- '0.5.1'
- '0.6'
- '0.6.1'
- '0.6.2'
- '0.6.2.1'
- '0.6.3'
- '0.6.3.1'
author: Eric Mertens
latest: '0.6.3.1'
description-type: markdown
description: ! "# config-value\n\n[![Hackage](https://img.shields.io/hackage/v/config-value.svg)](https://hackage.haskell.org/package/config-value)
  [![Build Status](https://secure.travis-ci.org/glguy/config-value.svg)](http://travis-ci.org/glguy/config-value)\n\nThis
  package implements a simple, layout-based value definition language\nused for supplying
  configuration values to various applications.\n\nLive Demo\n--------\n\nThe config-value
  and config-schema packages are available in a [live demo](https://glguy.net/config-demo/).\n\nExample\n-------\n```\n--
  Line comments until newline\nlayout:\n  based:\n    configuration:\n      {} --
  empty section\n\n    sections:\n     \"glguy\"\n\n    {- Block comments\n       {-
  nested comments -}\n       \"O'caml style {- strings in comments\"\n       so you
  can comment out otherwise valid\n       portions of your config\n    -}\n    atoms
  \     : yes\n\n    decimal    : -1234\n    hexadecimal: 0x1234\n    octal      :
  0o1234\n    binary     : 0b1010\n    floating   : 12.34e56\n\nlists:\n   * sections:
  in-lists\n     next-section: still-in-list\n   * [ \"inline\", \"lists\" ]\n   *
  * \"nestable\"\n     * \"layout\"\n     * \"lists\"\n   * 3\n\nunicode : \"standard
  Haskell format strings (1 ≤ 2)\\x2228(2 ≤ 3)\"\n```\n\nFormat\n------\n\nThe language
  supports: Strings, Atoms, Integers, Lists, Nested Sections.\n\nSections are layout
  based. The contents of a section must be indented further than the section heading.\nThe
  whitespace between a section heading and its colon is not significant. Section names
  must start with\na letter and may contain letters, numbers, dashes (`-`), underscores
  (`_`), and periods (`.`).\n\nLists are either layout based with `*` prefixes or
  inline surrounded by `[` and `]` delimited by `,`\n\nStrings are surrounded by `\"`
  and use Haskell-style escapes.\n\nNumbers support decimal, hexadecimal (`0x`), octal
  (`0o`), and binary (`0b`).\n\nAtoms follow the same lexical rule as section heading.\n"
license-name: MIT
