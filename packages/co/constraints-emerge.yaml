homepage: https://github.com/isovector/constraints-emerge
changelog-type: markdown
hash: aec7428f0fdd05dbdf17c7cca745ec5d62be42576c8455b37852f36199e989fe
test-bench-deps:
  base: ! '>=4.9 && <5'
  hspec: -any
  constraints: -any
  transformers: -any
  constraints-emerge: -any
maintainer: sandy@sandymaguire.me
synopsis: Defer instance lookups until runtime
changelog: ! "# Revision history for constraints-emerge\n\n## 0.1.2 -- 2018-04-19\n\n*
  Significantly better dictionary generation; the plugin will now build\n    dictionaries
  that depend on subdicts.\n* Fixed a bug where dictionaries depending on subdicts
  would cause segfaults at\n    runtime.\n* The plugin will now refuse to discharge
  'Emerge c' constraints if 'c' is not\n    fully monomorphic.\n* The plugin will
  now fail to generate equality dicts, even for types that are,\n    in fact, equal.
  This is bad, but much less disastrous than the old behavior\n    which would generate
  dictionaries for non-equal types...\n\n## 0.1.1 -- 2018-04-18\n\n* Updated some
  misleading error messages.\n\n## 0.1 -- 2018-04-18\n\n* First version. Released
  on an unsuspecting world.\n"
basic-deps:
  ghc: ! '>=8.0.1'
  base: ! '>=4.9 && <5'
  constraints: -any
  containers: -any
  hashable: -any
all-versions:
- 0.1.2
author: Sandy Maguire
latest: 0.1.2
description-type: markdown
description: ! "# constraints-emerge: defer instance lookups until runtime\n\n[![Build
  Status](https://api.travis-ci.org/isovector/constraints-emerge.svg?branch=master)](https://travis-ci.org/isovector/constraints-emerge)
  | [Hackage][hackage]\n\n[hackage]: https://hackage.haskell.org/package/constraints-emerge\n\n\n##
  Dedication\n\n> Failure should be our teacher, not our undertaker. Failure is delay,
  not\n> defeat. It is a temporary detour, not a dead end. Failure is something we
  can\n> avoid only by saying nothing, doing nothing, and being nothing.\n>\n> Denis
  Waitley\n\n\n## Synopsis\n\n```haskell\n{-# LANGUAGE ConstraintKinds     #-}\n{-#
  LANGUAGE FlexibleContexts    #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE
  TypeApplications    #-}\n{-# OPTIONS_GHC -fplugin=Data.Constraint.Emerge.Plugin
  #-}\n\nmodule Test where\n\nimport Data.Constraint.Emerge\n\nshowAnything :: forall
  c. Emerge (Show c) => c -> String\nshowAnything c =\n  case emerge @(Show c) of\n
  \   Just Dict -> show c\n    Nothing -> \"<<unshowable>>\"\n\n\nshowBool = showAnything
  True  -- \"True\"\nshowId   = showAnything id    -- \"<<unshowable>>\"\n```\n\n\n##
  Known Bugs\n\n* `constraints-emerge` will generate type-equality dictionaries any
  types (even\n    ones that aren't equal :scream: :scream: :scream:)\n* It fails
  to provide `Emerge c` dictionaries at runtime.\n* The generated error messages mention
  mangled type variables; it would be cool\n    if they didn't.\n\nIf someone wants
  to pick it up from here, thatâ€™d be great!\n\n\n## Related Work\n\n * [union-constraints](https://github.com/rampion/constraint-unions)\n
  * [Data.Constraint.Deferrable](https://github.com/ekmett/constraints/)\n\n\n## Contact\n\nPlease
  reports bugs and missing features at the [GitHub bugtracker][issues]. This is\nalso
  where you can find the [source code][source].\n\n`constraints-emerge` was written
  by [Sandy Maguire][me] and is licensed under a\npermissive MIT [license][lic].\n\n[me]:
  http://reasonablypolymorphic.me\n[lic]: https://github.com/isovector/constraints-emerge/blob/LICENSE\n[issues]:
  https://github.com/isovector/constraints-emerge/issues\n[source]: https://github.com/isovector/constraints-emerge\n\n"
license-name: MIT
