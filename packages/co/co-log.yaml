homepage: https://github.com/kowainik/co-log
changelog-type: markdown
hash: 42f5a98ea6918534479dbece7670f8f3314992ab851844f444e593757690ddfb
test-bench-deps:
  base: ! '>=4.10.1.0 && <4.14'
  co-log: -any
  co-log-core: -any
  hedgehog: ^>=1.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Composable Contravariant Comonadic Logging Library
changelog: |
  # Changelog

  `co-log` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.4.0.0 — Jan 19, 2020

  * [#120](https://github.com/kowainik/co-log/issues/120):
    Improve time formatting.

    Old: `29-12-2019 22:00:00.000`

    New: `29 Dec 2019 22:00:00.000 +00:00`

    (by [@vrom911](https://github.com/vrom911))
  * [#144](https://github.com/kowainik/co-log/issues/144):
    Add Windows CI check.
    (by [@vrom911](https://github.com/vrom911))
  * [#148](https://github.com/kowainik/co-log/issues/148):
    Support GHC-8.8.2.
    (by [@chshersh](https://github.com/chshersh))
  * [#119](https://github.com/kowainik/co-log/issues/119):
    Add new message type that allows printing messages without
    `Severity`.
    (by [@sphaso](https://github.com/sphaso))
  * [#150](https://github.com/kowainik/co-log/issues/150):
    Introduce `formatWith` — beginner-friendly alias for formatting combinator.
    (by [@chshersh](https://github.com/chshersh))
  * Use `chronos-1.1` as `1.0.9` is not Windows-compatible.
    (by [@vrom911](https://github.com/vrom911))
  * [#156](https://github.com/kowainik/co-log/issues/156):
    Improve documentation for the `Colog.Concurrent` module.
    (by [@chshersh](https://github.com/chshersh))
  * [#146](https://github.com/kowainik/co-log/issues/146):
    Allow `ansi-terminal-0.10`.
    (by [@mpilgrem](https://github.com/mpilgrem))
  * [#124](https://github.com/kowainik/co-log/issues/124):
    Implement executable playground for concurrent logging.
    (by [@chshersh](https://github.com/chshersh))

  ## 0.3.0.0 — May 5, 2019

  * [#77](https://github.com/kowainik/co-log/issues/77):
    **Important:** Use `chronos` time formatter. This is a breaking change because
    default field map in `RichMessage` now contains different type representing
    time. If you use your custom formatter for time, you should change it.
    Othwerwise no observable differences in the library API usage will be noticed.
  * [#103](https://github.com/kowainik/co-log/issues/103):
    **Breaking change:** make `Message` data type polymorhic over the type of severity.

    **Migration guide:** this change is done in backwards-compatible way. If you
    use any fields of the `Message` data type, you should rename them according to
    the following scheme:
    ```haskell
    messageSeverity -> msgSeverity
    messageStack    -> msgStack
    messageText     -> msgText
    ```
  * Export more formatting functions to make implementation of custom formatters easier.
  * [#96](https://github.com/kowainik/co-log/issues/96):
    Add `simpleMessageAction` and `richMessageAction` to work with `Message`s.
  * Use `co-log-core` of version `0.2.0.0`.

  ## 0.2.0 — Nov 15, 2018

  * [#45](https://github.com/kowainik/co-log/issues/45):
    Introduce approach for concurrent log writing.
  * [#46](https://github.com/kowainik/co-log/issues/46):
    Moves `logStringStdout`, `logStringStderr`, `logStringHandle`,
    `withLogStringFile` from `Colog.Actions` to `Colog.Core.IO`
  * [#77](https://github.com/kowainik/co-log/issues/77):
    Remove `relude` from dependencies.
    Add HLint check to Travis CI.
  * [#64](https://github.com/kowainik/co-log/issues/64):
    Introduce basic benchmarks.
  * [#20](https://github.com/kowainik/co-log/issues/20):
    Add experimental support for logger rotation (see `Colog.Rotation` module).
  * [#39](https://github.com/kowainik/co-log/issues/39):
    Support GHC-8.2.2 and GHC-8.6.2.

  ## 0.1.0

  * [#37](https://github.com/kowainik/co-log/issues/37):
    Add bounds to all dependencies. Move `Prelude` to the
    `other-modules` section.

  ## 0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/kowainik/co-log/releases
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  stm: ! '>=2.4 && <2.6'
  base: ! '>=4.10.1.0 && <4.14'
  co-log: -any
  text: ! '>=1.2.3 && <1.3'
  co-log-core: ! '>=0.2.1.0 && <0.3'
  filepath: ^>=1.4.1
  containers: ! '>=0.5.7 && <0.7'
  ansi-terminal: ^>=0.10
  chronos: ^>=1.1
  contravariant: ^>=1.5
  mtl: ! '>=2.2.2 && <2.3'
  transformers: ^>=0.5
  typerep-map: ! '>=0.3.2 && <0.4'
  vector: ^>=0.12.0.3
  directory: ^>=1.3.0
all-versions:
- 0.0.0
- 0.1.0
- 0.2.0
- 0.3.0.0
- 0.4.0.0
author: Dmitrii Kovanikov
latest: 0.4.0.0
description-type: markdown
description: |
  # co-log

  [![Hackage](https://img.shields.io/hackage/v/co-log.svg)](https://hackage.haskell.org/package/co-log)
  [![Stackage LTS](http://stackage.org/package/co-log/badge/lts)](http://stackage.org/lts/package/co-log)
  [![Stackage Nightly](http://stackage.org/package/co-log/badge/nightly)](http://stackage.org/nightly/package/co-log)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/co-log/blob/master/LICENSE)
  [![Build status](https://secure.travis-ci.org/kowainik/co-log.svg)](https://travis-ci.org/kowainik/co-log)


  Logging library based on [`co-log-core`](../co-log-core) package. Provides
  ready-to-go implementation of logging. This README contains _How to_ tutorial on
  using this library. This tutorial explains step by step how to integrate
  `co-log` into small basic project, specifically how to replace `putStrLn` used
  for logging with library provided logging.

  All code below can be compiled and run with the following commands:

  ```shell
  $ cabal new-build co-log
  $ cabal new-exec readme
  ```

  ## Preamble: imports and language extensions

  Since this is a literate haskell file, we need to specify all our language
  extensions and imports up front.

  ```haskell
  {-# LANGUAGE FlexibleContexts  #-}
  {-# LANGUAGE OverloadedStrings #-}

  import Colog (Message, WithLog, cmap, fmtMessage, logDebug, logInfo, logTextStdout, logWarning,
                usingLoggerT)
  import Control.Monad.IO.Class (MonadIO, liftIO)

  import Data.Semigroup ((<>))
  import qualified Data.Text as Text
  import qualified Data.Text.IO as TextIO

  ```

  ## Simple IO function example

  Consider the following function that reads lines from `stdin` and outputs
  different feedback depending on the line size.

  ```haskell
  processLinesBasic :: IO ()
  processLinesBasic = do
      line <- TextIO.getLine
      case Text.length line of
          0 -> do
              -- here goes logging
              TextIO.putStrLn ">>>> Empty input"
              processLinesBasic
          n -> do
              TextIO.putStrLn ">>>> Correct input"
              TextIO.putStrLn $ "Line length: " <> Text.pack (show n)
  ```

  This code mixes application logic with logging of the steps. It's convenient to
  have logging to observe behavior of the application. But `putStrLn` is very
  simple and primitive way to log things.

  ## Using `co-log` library

  In order to use `co-log` library, we need to refactor `processLinesBasic`
  function in the following way:

  ```haskell
  processLinesLog :: (WithLog env Message m, MonadIO m) => m ()
  processLinesLog = do
      line <- liftIO TextIO.getLine
      case Text.length line of
          0 -> do
              -- here goes logging
              logWarning "Empty input"
              processLinesLog
          n -> do
              logDebug "Correct line"
              logInfo $ "Line length: " <> Text.pack (show n)
  ```

  Let's summarize required changes:

  1. Make type more polymorphic: `(WithLog env Message m, MonadIO m) => m ()`
  2. Add `liftIO` to all `IO` functions.
  3. Replace `putStrLn` with proper `log*` function.

  ## Running actions

  Let's run both functions:

  ```haskell
  main :: IO ()
  main = do
      processLinesBasic

      let action = cmap fmtMessage logTextStdout
      usingLoggerT action processLinesLog
  ```

  And here is how output looks like:

  ![screenshot from 2018-09-17 20-52-01](https://user-images.githubusercontent.com/4276606/45623973-8bafb900-babb-11e8-9e20-4369a5a8e5ff.png)
license-name: MPL-2.0
