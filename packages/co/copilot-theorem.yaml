homepage: ''
changelog-type: ''
hash: 6743568467d0302882089ba0174df0518f5c8fd27823f364d753b259559ec354
test-bench-deps: {}
maintainer: jonathan.laurent@ens.fr
synopsis: k-induction for Copilot.
changelog: ''
basic-deps:
  bimap: -any
  smtlib2: ! '>=0.3 && <1.0'
  base: ! '>=4.0 && <5'
  process: -any
  parsec: -any
  data-default: -any
  xml: -any
  containers: -any
  copilot-core: ==2.2.1
  ansi-terminal: -any
  mtl: -any
  transformers: -any
  random: -any
  pretty: -any
  directory: -any
all-versions:
- 2.2.0
- 2.2.1
author: Jonathan Laurent
latest: 2.2.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/Copilot-Language/copilot-theorem.svg?branch=master)](https://travis-ci.org/Copilot-Language/copilot-theorem)\n\n#
  Copilot Theorem\n\nHighly automated proof techniques are a necessary step for the
  widespread\nadoption of formal methods in the software industry. Moreover, it could
  provide\na partial answer to one of its main issue which is scalability.\n\n*copilot-theorem*
  is a Copilot library aimed at checking automatically some safety\nproperties on
  Copilot programs. It includes:\n\n* A general interface for *provers* and a *proof
  scheme* mechanism aimed at\n  splitting the task of proving a complex property into
  checking a sequence of\n  smaller lemmas.\n\n* A prover implementing basic **k-induction**
  model checking [1], useful for\n  proving basic k-inductive properties and for pedagogical
  purposes.\n\n* A prover producing native inputs for the *Kind2* model checker, developed
  at\n  University of Iowa. The latter uses both the *k-induction algorithm* extended\n
  \ with *path compression* and *structural abstraction* [2] and the **IC3\n  algorithm**
  with counterexample generalization based on *approximate\n  quantifier elimination*
  [3].\n\n## A Tutorial\n\n### Installation instructions\n\n*copilot-theorem* needs
  the following dependencies to be installed:\n\n* The *copilot-core* and *copilot-language*
  Haskell libraries\n* The *Yices2* SMT-solver: `yices-smt2` must be in your `$PATH`\n*
  The *Z3* SMT-solver: `z3` must be in your `$PATH`\n* The *Kind2* model checker:
  `kind2` must be in your `$PATH`\n\nTo build it, just clone this repository and use
  `cabal install`. You will find\nsome examples in the `examples` folder, which can
  be built with `cabal install`\ntoo, producing an executable `copilot-theorem-example`
  in your `.cabal/bin`\nfolder.\n\n### First steps\n\n*copilot-theorem* is aimed at
  checking **safety properties** on Copilot programs.\nIntuitively, a safety property
  is a property which express the idea that\n*nothing bad can happen*. In particular,
  any invalid safety property can be\ndisproved by a finite execution trace of the
  program called a\n**counterexample**. Safety properties are often opposed to **liveness**\nproperties,
  which express the idea that *something good will eventually\nhappen*. The latters
  are out of the scope of *copilot-theorem*.\n\nSafety properties are simply expressed
  with standard boolean streams. In\naddition to triggers and observers declarations,
  it is possible to bind a\nboolean stream to a property name with the `prop` construct
  in the\nspecification.\n\nFor instance, here is a straightforward specification
  declaring one property:\n\n```haskell\nspec :: Spec\nspec = do\n  prop \"gt0\" (x
  > 0)\n  where\n    x = [1] ++ (1 + x)\n```\n\nLet's say we want to check that `gt0`
  holds. For this, we use the `prove ::\nProver -> ProofScheme -> Spec -> IO ()` function
  exported by `Copilot.Theorem`.\nThis function takes three arguments:\n\n* The prover
  we want to use. For now, two provers are available, exported by\n  the `Copilot.Theorem.Light`
  and `Copilot.Theorem.Kind2` module.\n* A *proof scheme*, which is a sequence of
  instructions like *check*, *assume*,\n  *assert*...\n* The Copilot specification\n\nHere,
  we can just write\n\n```haskell\nprove (lightProver def) (check \"gt0\") spec\n```\n\nwhere
  `lightProver def` stands for the *light prover* with default\nconfiguration.\n\n###
  The Prover interface\n\nThe `Copilot.Theorem.Prover` defines a general interface
  for provers. Therefore,\nit is really easy to add a new prover by creating a new
  object of type\n`Prover`. The latter is defined like this:\n\n```haskell\ndata Cex
  = Cex\n\ntype Infos = [String]\n\ndata Output = Output Status Infos\n\ndata Status\n
  \ = Valid\n  | Invalid (Maybe Cex)\n  | Unknown\n  | Error\n\ndata Feature = GiveCex
  | HandleAssumptions\n\ndata Prover = forall r . Prover\n  { proverName     :: String\n
  \ , hasFeature     :: Feature -> Bool\n  , startProver    :: Core.Spec -> IO r\n
  \ , askProver      :: r -> [PropId] -> PropId -> IO Output\n  , closeProver    ::
  r -> IO ()\n  }\n```\n\nEach prover mostly has to provide a `askProver` function
  which takes as an\nargument\n* The prover descriptor\n* A list of assumptions\n*
  A conclusion\n\nand checks if the assumptions logically entail the conclusion.\n\nTwo
  provers are provided by default: `Light` and `Kind2`.\n\n#### The light prover\n\nThe
  *light prover* is a really simple prover which uses the Yices SMT solver\nwith the
  `QF_UFLIA` theory and is limited to prove *k-inductive* properties,\nthat is properties
  such that there exists some *k* such that:\n\n* The property holds during the first
  *k* steps of the algorithm.\n* From the hypothesis the property has held during
  *k* consecutive steps, we\n  can prove it is still true one step further.\n\nFor
  instance, in this example\n\n```haskell\nspec :: Spec\nspec = do\n  prop \"gt0\"
  \ (x > 0)\n  prop \"neq0\" (x /= 0)\n  where\n    x = [1] ++ (1 + x)\n```\nthe property
  `\"gt0\"` is inductive (1-inductive) but the property `\"neq0\"` is\nnot.\n\n\nThe
  *light prover* is defined in `Copilot.Theorem.Light`. This module exports the\n`lightProver
  :: Options -> Prover` function which builds a prover from a record\nof type `Options`
  :\n\n```haskell\ndata Options = Options\n  { kTimeout  :: Integer\n  , onlyBmc   ::
  Bool\n  , debugMode :: Bool }\n```\n\nHere,\n\n* `kTimeout` is the maximum number
  of steps of the k-induction algorithm the\n  prover executes before giving up.\n*
  If `onlyBmc` is set to `True`, the prover will only search for\n  counterexamples
  and won't try to prove the properties discharged to it.\n* If `debugMode` is set
  to `True`, the SMTLib queries produced by the prover\n  are displayed in the standard
  output.\n\n`Options` is an instance of the `Data.Default` typeclass:\n\n```haskell\ninstance
  Default Options where\n  def = Options\n    { kTimeout  = 100\n    , debugMode =
  False\n    , onlyBmc   = False }\n```\n\nTherefore, `def` stands for the default
  configuration.\n\n#### The Kind2 prover\n\nThe *Kind2* prover uses the model checker
  with the same name, from Iowa\nuniversity. It translates the Copilot specification
  into a *modular transition\nsystem* (the Kind2 native format) and then calls the
  `kind2` executable.\n\nIt is provided by the `Copilot.Theorem.Kind2` module, which
  exports a `kind2Prover\n:: Options -> Prover` where the `Options` type is defined
  as\n\n```haskell\ndata Options = Options { bmcMax :: Int }\n```\nand where `bmcMax`
  corresponds to the `--bmc_max` option of *kind2* and is\nequivalent to the `kTimeout`
  option of the light prover. Its default value is\n0, which stands for infinity.\n\n####
  Combining provers\n\nThe `combine :: Prover -> Prover -> Prover` function lets you
  merge two provers\nA and B into a prover C which launches both A and B and returns
  the *most\nprecise* output. It would be interesting to implement other merging behaviours\nin
  the future. For instance, a *lazy* one such that C launches B only if A has\nreturns
  *unknown* or *error*.\n\nAs an example, the following prover is used in `Driver.hs`:\n\n```haskell\nprover
  =\n  lightProver def {onlyBmc = True, kTimeout = 5}\n  `combine` kind2Prover def\n```\n\nWe
  will discuss the internals and the experimental results of these provers\nlater.\n\n###
  Proof schemes\n\nLet's consider again this example:\n\n```haskell\nspec :: Spec\nspec
  = do\n  prop \"gt0\"  (x > 0)\n  prop \"neq0\" (x /= 0)\n  where\n    x = [1] ++
  (1 + x)\n```\n\nand let's say we want to prove `\"neq0\"`. Currently, the two available
  solvers\nfail at showing this non-inductive property (we will discuss this limitation\nlater).
  Therefore, we can prove the more general inductive lemma `\"gt0\"` and\ndeduce our
  main goal from this. For this, we use the proof scheme\n\n```haskell\nassert \"gt0\"
  >> check \"neq0\"\n```\ninstead of just `check \"neq0\"`. A proof scheme is chain
  of primitives schemes\nglued by the `>>` operator. For now, the available primitives
  are:\n\n* `check \"prop\"` checks whether or not a given property is true in the
  current\n  context.\n* `assume \"prop\"` adds an assumption in the current context.\n*
  `assert \"prop\"` is a shortcut for `check \"prop\" >> assume \"prop\"`.\n* `assuming
  :: [PropId] -> ProofScheme -> ProofScheme` is such that `assuming\n  props scheme`
  assumes the list of properties *props*, executes the proof\n  scheme *scheme* in
  this context, and forgets the assumptions.\n* `msg \"...\"` displays a string in
  the standard output\n\nWe will discuss the limitations of this tool and a way to
  use it in practice\nlater.\n\n### Some examples\n\nSome examples are in the *examples*
  folder. The `Driver.hs` contains the `main`\nfunction to run any example. Each other
  example file exports a specification\n`spec` and a proof scheme `scheme`. You can
  change the example being run just\nby changing one *import* directive in `Driver.hs`.\n\nThese
  examples include:\n\n* `Incr.hs` : a straightforward example in the style of the
  previous one.\n* `Grey.hs` : an example where two different implementations of a
  periodical\n  counter are shown to be equivalent.\n* `BoyerMoore.hs` : a certified
  version of the majority vote algorithm\n  introduced in the Copilot tutorial.\n*
  `SerialBoyerMoore.hs` : a *serial* version of the first step of the *Boyer\n  Moore
  algorithm*, where a new element is added to the list and the majority\n  candidate
  is updated at each clock tick. See the section *Limitations related\n  to the SMT
  solvers* for an analysis of this example.\n\n## Technical details\n\n### An introduction
  to SMT-based model checking\n\nAn introduction to the model-checking techniques
  used by *copilot-theorem* can be\nfound in the `doc` folder of this repository.
  It consists in a self sufficient\nset of slides. You can find some additional readings
  in the *References*\nsection.\n\n### Architecture of copilot-theorem\n\n#### An
  overview of the proving process\n\nEach prover first translates the Copilot specification
  into an intermediate\nrepresentation best suited for model checking. Two representations
  are\navailable:\n\n* The **IL** format: a Copilot program is translated into a list
  of\n  quantifier-free equations over integer sequences, implicitly universally\n
  \ quantified by a free variable *n*. Each sequence roughly corresponds to a\n  stream.
  This format is the one used in G. Hagen's thesis [4]. The *light\n  prover* works
  with this format.\n\n* The **TransSys** format: a Copilot program is *flattened*
  and translated\n  into a *state transition system* [1]. Moreover, in order to keep
  some\n  structure in this representation, the variables of this system are grouped
  by\n  *nodes*, each node exporting and importing variables. The *Kind2 prover* uses\n
  \ this format, which can be easily translated into the  native format.\n\nFor each
  of these formats, there is a folder in `src/Copilot/Theorem` which\ncontains at
  least\n* `Spec.hs` where the format is defined\n* `PrettyPrint.hs` for pretty printing
  (useful for debugging)\n* `Translate.hs` where the translation process from `Core.Spec`
  is defined.\n\nThese three formats share a simplified set of types and operators,
  defined\nrespectively in `Misc.Type` and `Misc.Operator`.\n\n##### An example\n\nThe
  following program:\n\n```haskell\nspec = do\n  prop \"pos\" (fib > 0)\n\n  where\n
  \   fib :: Stream Word64\n    fib = [1, 1] ++ (fib + drop 1 fib)\n```\n\ncan be
  translated into this IL specification:\n\n```\nSEQUENCES\n    s0 : Int\n\nMODEL
  INIT\n    s0[0] = 1\n    s0[1] = 1\n\nMODEL REC\n    s0[n + 2] = s0[n] + s0[n +
  1]\n\nPROPERTIES\n    'pos' : s0[n] > 0\n```\n\nor this modular transition system:\n\n```\nNODE
  's0' DEPENDS ON []\nDEFINES\n    out : Int =\n        1 -> pre out.1\n    out.1
  : Int =\n        1 -> pre out.2\n    out.2 : Int =\n        (out) + (out.1)\n\nNODE
  'prop-pos' DEPENDS ON [s0]\nIMPORTS\n    (s0 : out) as 's0.out'\n    (s0 : out.1)
  as 's0.out.1'\n    (s0 : out.2) as 's0.out.2'\nDEFINES\n    out : Bool =\n        (s0.out)
  > (0)\n\nNODE 'top' DEPENDS ON [prop-pos, s0]\nIMPORTS\n    (prop-pos : out) as
  'pos'\n    (s0 : out) as 's0.out'\n    (s0 : out.1) as 's0.out.1'\n    (s0 : out.2)
  as 's0.out.2'\n\nPROPS\n'pos' is (top : pos)\n\n```\n\nNote that the names of the
  streams are lost in the Copilot *reification\nprocess* [7] and so we have no way
  to keep them.\n\n#### Types\n\nIn these three formats, GADTs are used to statically
  ensure a part of the\ntype-corectness of the specification, in the same spirit it
  is done in the\nother Copilot libraries. *copilot-theorem* handles only three types
  which are\n`Integer`, `Real` and `Bool` and which are handled by the SMTLib standard.\n*copilot-theorem*
  works with *pure* reals and integers. Thus, it is unsafe in the\nsense it ignores
  integer overflow problems and the loss of precision due to\nfloating point arithmetic.\n\nThe
  rules of translation between Copilot types and *copilot-theorem* types are\ndefined
  in `Misc/Cast`.\n\n#### Operators\n\nThe operators provided by `Misc.Operator` mostly
  consists in boolean\nconnectors, linear operators, equality and inequality operators.
  If other\noperators are used in the Copilot program, they are handled using\nnon-determinism
  or uninterpreted functions.\n\nThe file `CoreUtils/Operators` contains helper functions
  to translate Copilot\noperators into *copilot-theorem* operators.\n\n\n#### The
  Light prover\n\nAs said in the tutorial, the *light prover* is a simple tool implementing
  the\nbasic *k-induction* algorithm [1]. The `Light` directory contains three files:\n\n*
  `Prover.hs`: the prover and the *k-induction* algorithm are implemented in\n  this
  file.\n* `SMT.hs` contains some functions to interact with the Yices SMT provers.\n*
  `SMTLib.hs` is a set of functions to output SMTLib directives. It uses the\n  `Misc.SExpr`
  module to deal with S-expressions.\n\nThe code is both concise and simple and should
  be worth a look.\n\nThe prover first translates the copilot specification into the
  *IL* format.\nThis translation is implemented in `IL.Translate`. It is straightforward
  as the\n*IL* format does not differ a lot from the *copilot core* format. This is
  the\ncase because the reification process has transformed the copilot program such\nthat
  the `++` operator only occurs at the top of a stream definition.\nTherefore, each
  stream definition directly gives us a recurrence equation and\ninitial conditions
  for the associated sequence.\n\nThe translation process mostly:\n\n* converts the
  types and operators, using uninterpreted functions to handle\n  non-linear operators
  and external functions.\n* creates a sequence for each stream, local stream ands
  external stream.\n\nThe reader is invited to use the *light prover* on the examples
  with `debugMode\n= true`, in order to have a look at the SMTLib code produced. For
  instance, if\nwe check the property `\"pos\"` on the previous example involving
  the Fibonacci\nsequence, we get:\n\n```\n<step>  (set-logic QF_UFLIA)\n<step>  (declare-fun
  n () Int)\n<step>  (declare-fun s0 (Int) Int)\n<step>  (assert (= (s0 (+ n 2)) (+
  (s0 (+ n 0)) (s0 (+ n 1)))))\n<step>  (assert (= (s0 (+ n 3)) (+ (s0 (+ n 1)) (s0
  (+ n 2)))))\n<step>  (assert (> (s0 (+ n 0)) 0))\n<step>  (push 1)\n<step>  (assert
  (or false (not (> (s0 (+ n 1)) 0))))\n<step>  (check-sat)\n<step>  (pop 1)\n<step>
  \ (assert (= (s0 (+ n 4)) (+ (s0 (+ n 2)) (s0 (+ n 3)))))\n<step>  (assert (> (s0
  (+ n 1)) 0))\n<step>  (push 1)\n<step>  (assert (or false (not (> (s0 (+ n 2)) 0))))\n<step>
  \ (check-sat)\nunsat\n<step>  (pop 1)\n```\n\nHere, we just kept the outputs related
  to the `<step>` psolver, which is the\nsolver trying to prove the *continuation
  step*.\n\nYou can see that the SMT solver is used in an incremental way (`push`
  and `pop`\ninstructions), so we don't need to restart it at each step of the algorithm\n(see
  [2]).\n\n\n#### The Kind2 prover\n\nThe *Kind2 prover* first translates the copilot
  specification into a *modular\ntransition system*. Then, a chain of transformations
  is applied to this system\n(for instance, in order to remove dependency cycles among
  nodes). After this,\nthe system is translated into the *Kind2 native format* and
  the `kind2`\nexecutable is launched. The following sections will bring more details
  about\nthis process.\n\n##### Modular transition systems\n\nLet's look at the definition
  of a *modular transition systems*, in the\n`TransSys.Spec` module:\n\n```haskell\ntype
  NodeId = String\ntype PropId = String\n\ndata Spec = Spec\n  { specNodes         ::
  [Node]\n  , specTopNodeId     :: NodeId\n  , specProps         :: Map PropId ExtVar
  }\n\ndata Node = Node\n  { nodeId            :: NodeId\n  , nodeDependencies  ::
  [NodeId]\n  , nodeLocalVars     :: Map Var LVarDescr\n  , nodeImportedVars  :: Bimap
  Var ExtVar\n  , nodeConstrs       :: [Expr Bool] }\n\ndata Var     =  Var {varName
  :: String}\n                deriving (Eq, Show, Ord)\n\ndata ExtVar  =  ExtVar {extVarNode
  :: NodeId, extVarLocalPart :: Var }\n                deriving (Eq, Ord)\n\ndata
  VarDescr = forall t . VarDescr\n  { varType :: Type t\n  , varDef  :: VarDef t }\n\ndata
  VarDef t =\n    Pre t Var\n  | Expr (Expr t)\n  | Constrs [Expr Bool]\n\ndata Expr
  t where\n  Const  :: Type t -> t -> Expr t\n  Ite    :: Type t -> Expr Bool -> Expr
  t -> Expr t -> Expr t\n  Op1    :: Type t -> Op1 x t -> Expr x -> Expr t\n  Op2
  \   :: Type t -> Op2 x y t -> Expr x -> Expr y -> Expr t\n  VarE   :: Type t ->
  Var -> Expr t\n```\n\nA transition system (`Spec` type) is mostly made of a list
  of nodes. A *node*\nis just a set of variables living in a local namespace and corresponding
  to the\n`Var` type. The `ExtVar` type is used to identify a variable in the global\nnamespace
  by specifying both a node name and a variable. A node contains two\ntypes of variables:\n\n*
  Some variables imported from other nodes. The structure `nodeImportedVars`\n  binds
  each imported variable to its local name. The set of nodes from which a\n  node
  imports some variables is stored in the `nodeDependencies` field.\n\n* Some locally
  defined variables contained in the `nodeLocalVars` field. Such a\n  variable can
  be\n  - Defined as the previous value of another variable (`Pre` constructor of\n
  \   `VarDef`)\n  - Defined by an expression involving other variables (`Expr` constructor)\n
  \ - Defined implicitly by a set of constraints (`Constrs` constructor)\n\n#####
  The translation process\n\nFirst, a copilot specification is translated into a modular
  transition system.\nThis process is defined in the `TransSys.Translate` module.
  Each stream is\nassociated to a node. The most significant task of this translation
  process is\nto *flatten* the copilot specification so the value of all streams at
  time *n*\nonly depends on the values of all the streams at time *n - 1*, which is
  not the\ncase in the `Fib` example shown earlier. This is done by a simple program\ntransformation
  which turns this:\n\n```haskell\nfib = [1, 1] ++ (fib + drop 1 fib)\n```\ninto this:\n\n```haskell\nfib0
  = [1] ++ fib1\nfib1 = [1] ++ (fib1 + fib0)\n```\n\nand then into the node\n\n```\nNODE
  'fib' DEPENDS ON []\nDEFINES\n    out : Int =\n        1 -> pre out.1\n    out.1
  : Int =\n        1 -> pre out.2\n    out.2 : Int =\n        (out) + (out.1)\n```\n\nOnce
  again, this flattening process is made easier by the fact that the `++`\noperator
  only occurs leftmost in a stream definition after the reification\nprocess.\n\n#####
  Some transformations over modular transition systems\n\nThe transition system obtained
  by the `TransSys.Translate` module is perfectly\nconsistent. However, it can't be
  directly translated into the *Kind2 native\nfile format*. Indeed, it is natural
  to bind each node to a predicate but the\nKind2 file format requires that each predicate
  only uses previously defined\npredicates. However, some nodes in our transition
  system could be mutually\nrecursive. Therefore, the goal of the `removeCycles ::
  Spec -> Spec` function\ndefined in `TransSys.Transform` is to remove such dependency
  cycles.\n\nThis function relies on the `mergeNodes :: [NodeId] -> Spec -> Spec`
  function\nwhich signature is self-explicit. The latter solves name conflicts by
  using the\n`Misc.Renaming` monad. Some code complexity has been added so the variable\nnames
  remains as clear as possible after merging two nodes.\n\nThe function `removeCycles`
  computes the strongly connected components of the\ndependency graph and merge each
  one into a single node. The complexity of this\nprocess is high in the worst case
  (the square of the total size of the system\ntimes the size of the biggest node)
  but good in practice as few nodes are to be\nmerged in most practical cases.\n\nAfter
  the cycles have been removed, it is useful to apply another\ntransformation which
  makes the translation from `TransSys.Spec` to `Kind2.AST`\neasier. This transformation
  is implemented in the `complete` function. In a\nnutshell, it transforms a system
  such that\n\n* If a node depends on another, it imports *all* its variables.\n*
  The dependency graph is transitive, that is if *A* depends of *B* which\n  depends
  of *C* then *A* depends on *C*.\n\nAfter this transformation, the translation from
  `TransSys.Spec` to `Kind2.AST`\nis almost only a matter of syntax.\n\n###### Bonus
  track\n\nThanks to the `mergeNodes` function, we can get for free the function\n\n```haskell\ninline
  :: Spec -> Spec\ninline spec = mergeNodes [nodeId n | n <- specNodes spec] spec\n```\n\nwhich
  discards all the structure of a *modular transition system* and turns it\ninto a
  *non-modular transition system* with only one node. In fact, when\ntranslating a
  copilot specification to a kind2 file, two styles are available:\nthe `Kind2.toKind2`
  function takes a `Style` argument which can take the value\n`Inlined` or `Modular`.
  The only difference is that in the first case, a call\nto `removeCycles` is replaced
  by a call to `inline`.\n\n### Limitations of copilot-theorem\n\nNow, we will discuss
  some limitations of the *copilot-theorem* tool. These\nlimitations are organized
  in two categories: the limitations related to the\nCopilot language itself and its
  implementation, and the limitations related to\nthe model-checking techniques we
  are using.\n\n#### Limitations related to Copilot implementation\n\nThe reification
  process used to build the `Core.Spec` object looses many\ninformations about the
  structure of the original Copilot program. In fact, a\nstream is kept in the reified
  program only if it is recursively defined.\nOtherwise, all its occurences will be
  inlined. Moreover, let's look at the\n`intCounter` function defined in the example
  `Grey.hs`:\n\n```haskell\nintCounter :: Stream Bool -> Stream Word64\nintCounter
  reset = time\n  where\n    time = if reset then 0\n           else [0] ++ if time
  == 3 then 0 else time + 1\n```\n\nIf *n* counters are created with this function,
  the same code will be inlined\n*n* times and the structure of the original code
  will be lost.\n\nThere are many problems with this:\n\n* It makes some optimizations
  of the model-checking based on a static analysis\n  of the program more difficult
  (for instance *structural abstraction* - see\n  [2]).\n* It makes the inputs given
  to the SMT solvers larger and repetitive.\n\nWe can't rewrite the Copilot reification
  process in order to avoid these\ninconvenients as these informations are lost by
  GHC itself before it occurs.\nThe only solution we can see would be to use *Template
  Haskell* to generate\nautomatically some structural annotations, which might not
  be worth the dirt\nintroduced.\n\n#### Limitations related to the model-checking
  techniques used\n\n##### Limitations of the IC3 algorithm\n\nThe IC3 algorithm was
  shown to be a very powerful tool for hardware\ncertification. However, the problems
  encountered when verifying softwares are\nmuch more complex. For now, very few non-inductive
  properties can be proved by\n*Kind2* when basic integer arithmetic is involved.\n\nThe
  critical point of the IC3 algorithm is the counterexample generalization\nand the
  lemma tightening parts of it. When encountering a *counterexample to\nthe inductiveness*
  (CTI) for a property, these techniques are used to find a\nlemma discarding it which
  is general enough so that all CTIs can be discarded\nin a finite number of steps.\n\nThe
  lemmas found by the current version fo *Kind2* are often too weak. Some\nsuggestions
  to enhance this are presented in [1]. We hope some progress will be\nmade in this
  area in a near future.\n\nA workaround to this problem would be to write kind of
  an interactive mode\nwhere the user is invited to provide some additional lemmas
  when automatic\ntechniques fail. Another solution would be to make the properties
  being checked\nquasi-inductive by hand. In this case, *copilot-theorem* is still
  a useful tool\n(especially for finding bugs) but the verification of a program can
  be long and\nrequires a high level of technicity.\n\n##### Limitations related to
  the SMT solvers\n\nThe use of SMT solvers introduces two kind of limitations:\n\n1.
  We are limited by the computing power needed by the SMT solvers\n2. SMT solvers
  can't handle quantifiers efficiently\n\nLet's consider the first point. SMT solving
  is costly and its performances are\nsometimes unpredictable. For instance, when
  running the `SerialBoyerMoore`\nexample with the *light prover*, Yices2 does not
  terminate. However, the *z3*\nSMT solver used by *Kind2* solves the problem instantaneously.
  Note that this\nperformance gap is not due to the use of the IC3 algorithm because
  the property\nto check is inductive. It could be related to the fact the SMT problem
  produced\nby the *light prover* uses uninterpreted functions for encoding streams
  instead\nof simple integer variables, which is the case when the copilot program
  is\ntranslated into a transition system. However, this wouldn't explain why the\n*light
  prover* still terminates instantaneously on the `BoyerMoore` example,\nwhich seems
  not simpler by far.\n\nThe second point keeps you from expressing or proving some
  properties\nuniversally quantified over a stream or a constant. Sometimes, this
  is still\npossible. For instance, in the `Grey` example, as we check a property
  like\n`intCounter reset == greyCounter reset` with `reset` an external stream\n(therefore
  totally unconstrained), we kind of show a universally quantified\nproperty. This
  fact could be used to enhance the proof scheme system (see the\n*Future work* section).
  However, this trick is not always possible. For\ninstance, in the `SerialBoyerMoore`
  example, the property being checked should\nbe quantified over all integer constants.
  Here, we can't just introduce an\narbitrary constant stream because it is the quantified
  property which is\ninductive and not the property specialized for a given constant
  stream. That's\nwhy we have no other solution than replacing universal quantification
  by\n*bounded* universal quantification by assuming all the elements of the input\nstream
  are in the finite list `allowed` and using the function `forAllCst`\ndefined in
  `Copilot.Kind.Lib`:\n\n```haskell\nconj :: [Stream Bool] -> Stream Bool\nconj =
  foldl (&&) true\n\nforAllCst ::(Typed a) => [a] -> (Stream a -> Stream Bool) ->
  Stream Bool\nforAllCst l f = conj $ map (f . constant) l\n```\n\nHowever, this solution
  isn't completely satisfying because the size of the\nproperty generated is proportionnal
  to the cardinal of `allowed`.\n\n#### Some scalability issues\n\nA standard way
  to prove large programs is to rely on its logical structure by\nwriting a specification
  for each of its functions. This very natural approach\nis hard to follow in our
  case because of\n\n* The difficulty to deal with universal quantification.\n* The
  lack of *true* functions in Copilot: the latter offers metaprogramming\n  facilities
  but no concept of functions like *Lustre* does with its *nodes*).\n* The inlining
  policy of the reification process. This point is related to the\n  previous one.\n\nOnce
  again, *copilot-theorem* is still a very useful tool, especially for\ndebugging
  purposes. However, we don't think it is adapted to write and check a\ncomplete specification
  for large scale programs.\n\n## Future work\n\n### Missing features in the Kind2
  prover\n\nThese features are not currently provided due to the lack of important
  features\nin the Kind2 SMT solver.\n\n#### Counterexamples displaying\n\nCounterexamples
  are not displayed with the Kind2 prover because Kind2 doesn't\nsupport XML output
  of counterexamples. If the last feature is provided, it\nshould be easy to implement
  counterexamples displaying in *copilot-theorem*. For\nthis, we recommend to keep
  some informations about *observers* in\n`TransSys.Spec` and to add one variable
  per observer in the Kind2 output file.\n\n#### Bad handling of non-linear operators
  and external functions\n\nNon-linear Copilot operators and external functions are
  poorly handled because\nof the lack of support of uninterpreted functions in the
  Kind2 native format. A\ngood way to handle these would be to use uninterpreted functions.
  With this\nsolution, properties like\n```haskell\n2 * sin x + 1 <= 3\n```\nwith
  `x` any stream can't be proven but at least the following can be proved\n```haskell\nlet
  y = x in sin x == sin y\n```\nCurrently, the *Kind2 prover* fail with the last example,
  as the results of\nunknown functions are turned into fresh unconstrained variables.\n\n###
  Simple extensions\n\nThe following extensions would be really simple to implement
  given the current\narchitecture of Kind2.\n\n+ If inductive proving of a property
  fails, giving the user a concrete CTI\n  (*Counterexample To The Inductiveness*,
  see the [1]).\n\n+ Use Template Haskell to declare automatically some observers
  with the same\n  names used in the original program.\n\n### Refactoring suggestions\n\n+
  Implement a cleaner way to deal with arbitrary streams and arbitrary\n  constants
  by extending the `Copilot.Core.Expr type`. See the\n  `Copilot.Kind.Lib` module
  to observe how inelegant the current solution is.\n\n+ Use `Cnub` as an intermediary
  step in the translation from `Core.Spec` to\n  `IL.Spec` and `TransSys.Spec`.\n\n###
  More advanced enhancements\n\n+ Enhance the proof scheme system such that when proving
  a property depending\n  on an arbitrary stream, it is possible to assume some specialized
  versions of\n  this property for given values of the arbitrary stream. In other
  words,\n  implementing a basic way to deal with universal quantification.\n\n+ It
  could be useful to extend the Copilot language in a way it is possible to\n  use
  annotations inside the Copilot code. For instance, we could\n\n  - Declare assumptions
  and invariants next to the associated code instead of\n    gathering all properties
  in a single place.\n  - Declare a frequent code pattern which should be factorized
  in the\n    transition problem (see the section about Copilot limitations)\n\n##
  FAQ\n\n### Why does the light prover not deliver counterexamples ?\n\nThe problem
  is the light prover is using uninterpreted functions to represent\nstreams and Yices2
  can't give you values for uninterpreted functions when you\nask it for a valid assignment.
  Maybe we could get better performances and\neasily counterexample display if we
  rewrite the *light prover* so that it works\nwith *transition systems* instead of
  *IL*.\n\n### Why does the code related to transition systems look so complex ?\n\nIt
  is true the code of `TransSys` is quite complex. In fact, it would be really\nstraightforward
  to produce a flattened transition system and then a Kind2 file\nwith just a single
  *top* predicate. In fact, It would be as easy as producing\nan *IL* specification.\n\nTo
  be honest, I'm not sure producing a modular *Kind2* output is worth the\ncomplexity
  added. It's especially true at the time I write this in the sense\nthat:\n\n* Each
  predicate introduced is used only one time (which is true because\n  copilot doesn't
  handle functions or parametrized streams like Lustre does and\n  everything is inlined
  during the reification process).\n* A similar form of structure could be obtained
  from a flattened Kind2 native\n  input file with some basic static analysis by producing
  a dependency graph\n  between variables.\n* For now, the *Kind2* model-checker ignores
  these structure informations.\n\nHowever, the current code offers some nice transformation
  tools (node merging,\n`Renaming` monad...) which could be useful if you intend to
  write a tool for\nsimplifying or factorizing transition systems. Moreover, it becomes
  easier to\nwrite local transformations on transition systems as name conflicts can
  be\navoided more easily when introducing more variables, as there is one namespace\nper
  node.\n\n## References\n\n1. *An insight into SMT-based model checking techniques
  for\n   formal software verification of synchronous dataflow programs*, talk,\n
  \  Jonathan Laurent  (see the `doc` folder of this repository)\n\n2. *Scaling up
  the formal verification of Lustre programs with SMT-based\n   techniques*, G. Hagen,
  C. Tinelli\n\n3. *SMT-based Unbounded Model Checking with IC3 and Approximate Quantifier\n
  \  Elimination*, C. Sticksel, C. Tinelli\n\n4. *Verifying safety properties of Lustre
  programs: an SMT-based approach*,\n   PhD thesis, G. Hagen\n\n5. *Understanding
  IC3*, Aaron R. Bradley\n\n6. *IC3: Where Monolithic and Incremental Meet*, F. Somenzi,
  A.R. Bradley\n\n7. *Copilot: Monitoring Embedded Systems*, L. Pike, N. Wegmann,
  S. Niller\n"
license-name: BSD-3-Clause
