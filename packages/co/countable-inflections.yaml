homepage: https://github.com/tippenein/countable-inflections
changelog-type: markdown
hash: d1033bb842b31cfb3dd351270f38e95c0b6623ec4d58efa42a69943420034d25
test-bench-deps:
  base: ! '>=4.2 && <4.10'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  countable-inflections: -any
  QuickCheck: ! '>=2.7.6 && <3.0'
maintainer: Brady Ouren <brady@andand.co>
synopsis: Countable Text Inflections
changelog: ''
basic-deps:
  exceptions: ! '>=0.6 && <0.9'
  bytestring: -any
  base: ! '>=4.6 && <4.10'
  text: ! '>=0.2 && <1.3'
  regex-pcre-builtin: -any
  pcre-utils: -any
all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
author: Brady Ouren <brady@andand.co>
latest: 0.2.0
description-type: markdown
description: ! '# Countable Inflections


  [![License MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)

  [![Hackage](https://img.shields.io/hackage/v/countable-inflections.svg)](http://hackage.haskell.org/package/countable-inflections)

  [![Stackage LTS](http://stackage.org/package/countable-inflections/badge/lts)](http://stackage.org/lts/package/countable-inflections)

  [![Build Status](https://circleci.com/gh/tippenein/countable-inflections.svg?style=shield&circle-token=whatever)](https://circleci.com/gh/tippenein/countable-inflections)


  This library implements pluralization and singularization in a similar way to the
  [rails inflectors](http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html)


  It uses regexes to define the non-standard transformations and therefore

  doesn''t provide much safety. If you need to provide the same pluralization and

  singularization which rails does out of the box, this will work the same. If

  you want _more_ you should be using

  [inflections-hs](https://github.com/stackbuilders/inflections-hs) which uses

  megaparsec to give you more guarantees


  ## Usage


  ```haskell

  λ: pluralize "person"

  "people"


  λ: singularize "branches"

  "branch"

  ```


  These can also be given custom inflection matchers


  ```haskell

  λ: :t singularizeWith

  [Inflection] -> Text -> Text

  ```


  There are 3 different types of transformations:


  ### Match


  Takes a PCRE regex and a replacement string.


  ```haskell

  λ: :t makeMatchMapping

  [(RegexPattern, RegexReplace)] -> [Inflection]


  λ: let mapping = makeMatchMapping [("(octop)us", "\1i")]

  λ: pluralizeWith mapping "octopus"

  "octopi"

  ```


  ### Irregular


  From singular to plural with no greater pattern.


  ```haskell

  λ: :t makeIrregularMapping

  [(Singular, Plural)] -> [Inflection]


  λ: let mapping = makeIrregularMapping [("zombie","zombies")]

  λ: pluralizeWith mapping "zombie"

  "zombies"

  ```


  ### Uncountable


  Doesn''t have a mapping, word stays the same) so it has the type:


  ```haskell

  [Text] -> [Inflection]

  ```



  ## License


  MIT - see [the LICENSE file](LICENSE.md).

'
license-name: MIT
