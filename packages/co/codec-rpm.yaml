homepage: https://github.com/weldr/codec-rpm
changelog-type: markdown
hash: 9e5d2ad3ffa705aa411096f2ac84d93217dd11e566d384594da15249d36762fc
test-bench-deps:
  bytestring: ! '>=0.10 && <0.11'
  attoparsec-binary: ! '>=0.2 && <0.3'
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.4.4 && <2.6'
  text: ! '>=1.2.2.0 && <1.3'
  hspec-attoparsec: ! '>=0.1.0.2 && <0.2'
  parsec: ! '>=3.1.11 && <3.2'
  HUnit: ! '>=1.5.0.0 && <1.7'
  attoparsec: ! '>=0.12.1.4 && <0.14'
  pretty: ! '>=1.1.2.0'
maintainer: clumens@redhat.com
synopsis: A library for manipulating RPM files
changelog: ! "## 0.2.2\n\n* Use hcat instead of <> in Codec.RPM.Types (#31).\n* Various
  changes for running hlint and hpc-coveralls in tests.\n* Fix -Wmissing-home-modules
  warnings.\n\n## 0.2.1\n\n* Allow newer versions of conduit, conduit-extra, lzma-conduit,
  and resourcet.\n* Relax minimum requirements on exceptions, HUnit, and text to fit
  better\n  with what is shipped in Fedora.\n* Remove the unused requirement on conduit-combinators.\n*
  payloadContentsC now wants an instance of MonadThrow.\n\n## 0.2.0\n\n* Move parseC
  into a new Conduit module.\n* Add payloadC and payloadContentsC.\n* parseRPMC should
  return a ParseError on error.\n\n## 0.1.3\n\n* Derive Ord for DepRequirement.\n\n##
  0.1.2\n\n* Relax overly strict conduit-extra and text requirements.\n\n## 0.1.1\n\n*
  Relax overly strict attoparsec requirement.\n\n## 0.1.0\n\n* Initial release.\n"
basic-deps:
  exceptions: ! '>=0.8.3 && <0.11.0'
  bytestring: ! '>=0.10 && <0.11'
  attoparsec-binary: ! '>=0.2 && <0.3'
  base: ! '>=4.7 && <5.0'
  text: ! '>=1.2.2.0 && <1.3'
  cpio-conduit: ! '>=0.7.0 && <0.8.0'
  parsec: ! '>=3.1.11 && <3.2'
  conduit: ! '>=1.2.8 && <1.4'
  conduit-extra: ! '>=1.1.15 && <1.4'
  mtl: ! '>=2.2.1 && <2.3'
  attoparsec: ! '>=0.12.1.4 && <0.14'
  resourcet: ! '>=1.1.9 && <1.3'
  pretty: ! '>=1.1.2.0'
  lzma-conduit: ! '>=1.1.3.3 && <1.3'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2.0'
- '0.2.1'
- '0.2.2'
author: Chris Lumens
latest: '0.2.2'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/weldr/codec-rpm.svg?branch=master)](https://travis-ci.org/weldr/codec-rpm)\n[![Coverage
  Status](https://coveralls.io/repos/github/weldr/codec-rpm/badge.svg?branch=master)](https://coveralls.io/github/weldr/codec-rpm?branch=master)\n\nHaskell
  library for working with RPM packages.\n\n\nPreparing local development environment
  for Haskell\n===================================================\n\nFor development
  we use the latest upstream versions:\n\n1) Remove the standard `haskell-platform`
  and `ghc-*` RPMs if you have them installed\n2) Download version **8.0.2** of the
  generic Haskell Platform distribution from\n   https://www.haskell.org/platform/linux.html#linux-generic\n3)
  Extract the archive and install Haskell\n```\n$ tar -xzvf haskell-platform-8.0.2-unknown-posix--minimal-x86_64.tar.gz
  \n$ sudo ./install-haskell-platform.sh\n```\n4) Add `/usr/local/bin` to your PATH
  if not already there!\n\n\nBuilding the project locally\n============================\n\n`cabal`
  is used to install and manage Haskell dependencies from upstream.\n\n    $ cabal
  sandbox init\n    $ cabal install\n\nExecuting unit tests\n====================\n\n
  \   $ cabal sandbox init\n    $ cabal install --dependencies-only --enable-tests\n
  \   $ cabal test --show-details=always\n    Preprocessing library rpm-1...\n    Preprocessing
  test suite 'tests' for rpm-1...\n    Running 1 test suites...\n    Test suite tests:
  RUNNING...\n    Test suite tests: PASS\n    Test suite logged to: dist/test/rpm-1-tests.log\n
  \   1 of 1 test suites (1 of 1 test cases) passed.\n\nProduce code coverage report\n============================\n\n
  \   $ cabal sandbox init\n    $ cabal install --enable-tests --enable-coverage\n
  \   $ cabal test --show-details=always\n    $ firefox ./dist/hpc/vanilla/tix/*/hpc_index.html\n\nTesting
  in Haskell\n==================\n\nThe recommended way to test this project is to
  use\n[Hspec](https://hspec.github.io/) for annotating unit tests.\nFor starters
  you can try adding cases which extend code coverage.\n\nIt is also recommended to
  use property based testing with\nQuickCheck (and Hspec) where it makes sense. Property
  based tools\nautomatically generates hundreds/thousands of input variants and\nexecute
  the function under test with them. This validates that\nspecific conditions (aka
  properties of the function) are always met.\nThis is useful with pure functions.
  For more information see:\n\n- http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html\n-
  http://book.realworldhaskell.org/read/testing-and-quality-assurance.html\n- https://en.wikibooks.org/wiki/Haskell/Testing\n-
  http://hspec.github.io/quickcheck.html\n"
license-name: LGPL-2.1
