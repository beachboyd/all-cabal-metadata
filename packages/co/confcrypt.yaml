homepage: https://github.com/https://github.com/collegevine/confcrypt#readme
changelog-type: markdown
hash: dea337f51e145ed6337169699b4d28a9c204983bcfad53d195d395e13409a0b8
test-bench-deps:
  amazonka: ! '>=1.6 && <1.7'
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.7 && <5'
  parser-combinators: -any
  base64-bytestring: -any
  text: ! '>=1.2'
  confcrypt: -any
  crypto-pubkey-types: -any
  megaparsec: ! '>=7.0'
  conduit: ! '>=1.3 && <1.4'
  HUnit: -any
  memory: -any
  containers: ! '>=0.5.11'
  lens: ! '>=4.16'
  amazonka-kms: ! '>=1.6 && <1.7'
  crypto-pubkey-openssh: -any
  cryptonite: ! '>=0.25'
  tasty-quickcheck: -any
  mtl: ! '>=2.2 && <2.3'
  tasty-hunit: -any
  transformers: -any
  optparse-applicative: ! '>=0.14 && <0.15'
  tasty: -any
  deepseq: ! '>=1.4.3'
  QuickCheck: -any
maintainer: chris@collegevine.com
synopsis: ''
changelog: ! '# Changelog for confcrypt


  ## Unreleased changes

'
basic-deps:
  amazonka: ==1.6.*
  bytestring: ! '>=0.10.8 && <0.11'
  base: ! '>=4.7 && <5'
  parser-combinators: -any
  base64-bytestring: -any
  text: ! '>=1.2'
  confcrypt: -any
  crypto-pubkey-types: -any
  megaparsec: ! '>=7.0'
  conduit: ==1.3.*
  containers: ! '>=0.5.11'
  lens: ! '>=4.16'
  amazonka-kms: ==1.6.*
  crypto-pubkey-openssh: -any
  cryptonite: ! '>=0.25'
  mtl: ==2.2.*
  transformers: -any
  optparse-applicative: ==0.14.*
  deepseq: ! '>=1.4.3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Chris Coffey
latest: 0.1.0.4
description-type: markdown
description: ! "# confcrypt\nAs soon as an application is deployed or built on more
  than a single machine, you tend to start worrying about managing the configuration.
  There are a number of ways to approach this problem, but ultimately there's a need
  to protect sentisive inforamtion like database password and api tokens. While you
  can always store those directly in a config management system like AWS' Parameter
  Store, doing so means you can't track configuration changes in source control. This
  application provides yet another simple and straightforward means of hiding config
  information within source control.\n\n[![CircleCI](https://circleci.com/gh/collegevine/confcrypt/tree/master.svg?style=svg)](https://circleci.com/gh/collegevine/confcrypt/tree/master)\n\n##
  Installing confcrypt\n#### Mac OSX\n\n\n## Using confcrypt\n- create a config\n
  \   `confcrypt create <filename>` creates a new empty confcrypt config named `<filename>.econf`.
  Internally, it looks like this:\n    ```\n    # confcrypt schema\n    # Configuration
  parameters may be either a String, Int, or Boolean\n    # Parameter schema take
  the following shape:\n    # schema := [term | value | comment]\n    #   term :=
  confname : type\n    #   confname := [a-z,A-Z,_,0-9]\n    #   type := String | Int
  | Boolean\n    #   value := confname = String\n    #   comment := # String\n    #\n
  \   # For example:\n    # DB_CONN_STR : String\n    # DB_CONN_STR = Connection String\n
  \   # USE_SSL : Boolean\n    # USE_SSL = True\n    # TIMEOUT_MS : Int\n    # TIMEOUT_MS
  = 300\n    ```\n- read a config\n    `confcrypt read --key <filename> <filename>`\n
  \   This command reads in the provided file, decrypts the configuration variables
  using the provided key, then prints them to stdout. This allows you to pipe the
  results to other utilities. Returns 0 on success.\n- add a parameter\n    `confcrypt
  add --key <filename> --name <String> --type <SchemaType> --vaue <String> <filename>\n
  \   Adds a new confguration parameter to the file. `--name` and `--value` are required,
  while `--type` is optional. If `--type` is provided, the schema record will be added
  immediately before the config variable. In total this adds two lines to the file.
  Returns 0 on sccess.\n- remove a parameter\n    `confcrypt delete --name <filename>\n
  \   Removes an existing config parameter & associated schema. Returns 0 on success
  or 1 if the parameter is not found in the file.\n- edit a parameter in-place\n    `confcrypt
  edit --key <filename> --name <String> --value <String> --type <SchemaType> <filename>`\n
  \   Modifies an existing configuration parameter in place, leaving all other lines
  unchanged. While this isn't how it's actually implemented, this operation is equivalent
  to piping `confcrypt read` to a new file, editing the parameter, then reencrypting
  it.\n- validate a config\n    `confcrypt validate --key <filename> <filename>`\n
  \   Checks that each config parameter matches the type of its schema. All errors
  are accumulated and returned at the end, with a response code equal to the number
  of failures.\n\n- Using Amazon KMS instead of a local key\n    The `--use-aws` flag
  changes the behavior of the `--key` parameter to represent a KMS key id rather than
  an on-disk rsa key file.\n\n## The confcrypt file format\n    ```\n    # confcrypt
  schema\n    # Configuration parameters may be either a String, Int, or Boolean\n
  \   # Parameter schema take the following shape:\n    # schema := [term | value
  | comment]\n    #   term := confname : type\n    #   confname := [a-z,A-Z,_,0-9]\n
  \   #   type := String | Int | Boolean\n    #   value := confname = String\n    #
  \  comment := # String\n    #\n    # For example:\n    # DB_CONN_STR : String\n
  \   # DB_CONN_STR = Connection String\n    # USE_SSL : Boolean\n    # USE_SSL =
  True\n    # TIMEOUT_MS : Int\n    # TIMEOUT_MS = 300\n    ```\n\n    While the default
  config created via `confcrypt new ...` places the schema on line `n` and parameters
  on `n+1`, there's no required ordering for the file. In fact, you can choose to
  entirely omit the schema and only store configuration paraemters in an `econf` file,
  but this will cause `confcrypt validate` to fail.\n"
license-name: MIT
