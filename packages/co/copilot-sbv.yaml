homepage: ''
changelog-type: ''
hash: a1969cb7f7fad6563001321119bad162c632b4a4de2bda1cad8a0e9956eddf39
test-bench-deps: {}
maintainer: leepike@galois.com
synopsis: A compiler for CoPilot targeting SBV.
changelog: ''
basic-deps:
  sbv: ! '>=5.0'
  base: ! '>=4.0 && <5'
  filepath: ! '>=1.1'
  containers: ! '>=0.4'
  copilot-core: ==2.2.1
  pretty: ! '>=1'
  directory: ! '>=1.2.1'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- 2.1.1
- 2.1.2
- 2.2.0
- 2.2.1
author: ! 'Lee Pike

  , Robin Morisset

  , Alwyn Goodloe

  , Sebastian Niller

  , Nis Nordby Wegmann'
latest: 2.2.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/Copilot-Language/copilot-sbv.svg?branch=master)](https://travis-ci.org/Copilot-Language/copilot-sbv)\n\nOverview\n========\n[copilot-sbv](http://hackage.haskell.org/package/copilot-sbv)
  Another back-end\nthat translates to [SBV](http://hackage.haskell.org/package/sbv),
  using its code\ngenerator to generate hard real-time C code as well, with ACSL contracts,
  \nfor the value-analysis plugin and compiling the code with CompCert. \n\nCopilot
  is a stream (i.e., infinite lists) domain-specific language (DSL) in\nHaskell that
  compiles into embedded C.  Copilot is similar in spirit to\nlanguages like Lustre.
  \ Copilot contains an interpreter, multiple back-end\ncompilers, and other verification
  tools.\n\nExamples\n=========\nPlease see the files under the Examples directory
  in the\n[Copilot](http://hackage.haskell.org/package/copilot) for a number of examples\nshowing
  the syntax, use of libraries, and use of the interpreter and back-ends.\nThe examples
  is the best way to start.\n\nInstallation\n============\nThe Copilot library is
  cabalized. Assuming you have cabal and the GHC compiler\ninstalled (the [Haskell
  Platform](http://hackage.haskell.org/platform/) is the\neasiest way to obtain these),
  it should merely be a matter of running \n     \n         cabal install copilot-sbv\n\nHowever,
  we strongly recommend you install Copilot, which installs copilot-sbv\nand other
  packages automatically.  Execute\n\n         cabal install copilot\n\nDependencies\n=============\ncopilot-sbv
  depends on the latest [SBV](http://hackage.haskell.org/package/sbv) library\nto
  generate hard real-time C code. It is recommanded to obtain it from the git \n[repository](https://github.com/LeventErkok/sbv/),
  and compile it yourself (ghc 7.10 needed). \n\nFor the [ACSL](http://frama-c.com/acsl.html)
  , you need an up-to-date frama-c (Sodium), \nand the value analysis plugin that
  goes with. Run to verify :\n\t\n         make fval\n\nFor compiling it with [CompCert](http://compcert.inria.fr/),\nyou
  need to install it, install the Standard [C library](http://compcert.inria.fr/man/manual002.html)
  for it,\nwait until SBV allows you to change the compiler (or do it manually by
  changing the makefile generated), and\nrun the following command :\n\n         make
  all\n\nThere is also a [splint](http://www.splint.org/) support for the project.
  You need to install splint and run :\n\n         make splint\n\nMore about ACSL\n==============\ncopilot-sbv
  generates automatic ACSL contracts for all functions and for global variables (in
  the form of\nglobal invariants, which needs an up to date value analysis plugin
  for frama-c). The most important part of \ngenerating contracts is transforming
  an expression about queues (such as drop 1 s1 + 3) into a ACSL contract.\nThis is
  done by a pretty printer, which translates each construct of the language into its
  ACSL equivalent.\nHowever, some features are not implemented in the plugin yet,
  but are specified by ACSL (logical predicates ...).\nThis may result in a verification
  status \"unknown\" for predicates containing these expressions. Some are not specified\nat
  all (asinh, ...), hence it compiles in a predicate that has to be user defined when
  implemented. \n\nCasts are badly supported (unknown status), hence it is recommanded
  to avoid them. Remember, your computer has more than\n8kb of memory since 1980,
  use it !\n\nFloats are very badly supported by SBV (only constant floats can be
  operands of floating functions).\nSome issues are beeing fixed about that. \n\nResources\n=========\n[copilot-sbv](http://hackage.haskell.org/package/copilot-sbv)
  is available on\nHackage.\n\n**Sources** for each package are available on Github
  as well.  Just go to\n[Github](github.com) and search for the package of interest.
  \ Feel free to fork!\n\nCopyright, License\n==================\nCopilot is distributed
  with the BSD3 license. The license file contains the\n[BSD3](http://en.wikipedia.org/wiki/BSD_licenses)
  verbiage.\n\nThanks\n======\nWe are grateful for NASA Contract NNL08AD13T to [Galois,\nInc](http://corp.galois.com/)
  and the [National Institute of\nAerospace](http://www.nianet.org/), which partially
  supported this work.\n"
license-name: BSD-3-Clause
