homepage: ''
changelog-type: ''
hash: 42ac1cd8bd2619c3f167937cc27ae3075b581c00479eb8e6b03620fe8ad55fd8
test-bench-deps: {}
maintainer: jesper.louis.andersen@gmail.com
synopsis: A concurrent bittorrent client
changelog: ''
basic-deps:
  test-framework-hunit: -any
  cereal: -any
  bytestring: -any
  test-framework: -any
  PSQueue: -any
  stm: -any
  base: ! '>=3.0 && <5.0'
  time: -any
  filepath: -any
  test-framework-quickcheck2: -any
  network: -any
  parsec: -any
  HUnit: -any
  array: ! '>=0.3'
  random-shuffle: -any
  containers: -any
  network-bytestring: -any
  hslogger: -any
  mtl: -any
  hopenssl: -any
  HTTP: -any
  attoparsec: ! '>=0.8'
  random: -any
  deepseq: -any
  QuickCheck: ! '>=2'
  pretty: -any
  directory: -any
all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.3.2
author: Jesper Louis Andersen
latest: 0.3.2
description-type: markdown
description: ! "Combinatorrent - a bittorrent client.\n=====================================\n\nIntroduction\n----------\n\nThis
  is a bittorrent client. I am the introduction document and I need to be\nwritten
  by some generous soul!\n\nInstallation\n------------\n\nHere is what I do to install
  haskell torrrent locally on my machine:\n\n    cabal install --prefix=$HOME --user\n\nSince
  we are using the magnificient cabal, this is enough to install haskell\ntorrent
  in our $HOME/bin directory.\n\nUsage\n-----------------\n\nCombinatorrent can currently
  only do one very simple thing. If you call it with\n\n    Combinatorrent foo.torrent\n\nthen
  it will begin downloading the file in foo.torrent to the current\ndirectory via
  the Bittorrent protocol.\n\nProtocol support\n----------------\n\nCurrently haskell-torrent
  supports the following BEPs (See the\n[BEP Process](http://www.bittorrent.org/beps/bep_0000.html)
  document for an\nexplanation of these)\n\n   - 0003, 0004, 0020,\n\nCombinatorrent
  implicitly supports these extensions\n\n   - 0027: Support by the virtue of only
  supporting a single tracker and no\n     DHT.\n\nPartially supported extensions:\n\n
  \  - 0007: Combinatorrent understands and uses the \"peers6\" response from\n     the
  tracker to connect clients. On the other hand, it does nothing to\n     provide
  the \"ipv4=\" and \"ipv6=\" keys on tracker requests. As such, it\n     can be claimed
  that 0007 support is available, as everything we left\n     out is only qualified
  as MAY.\n\n   - 0023: Combinatorrent supports the \"compact\" response only, although
  it\n     is explicitly stated that the client must support both. In practice it\n
  \    has little impact as all modern trackers will only return compact\n     responses
  anyway.\n\nCombinatorrent is not supporting these BEPs, but strives to do so one
  day:\n\n   - 0005, 0006, 0009, 0010, 0012, 0015, 0016, 0017, 0018, 0019, 0021, 0022,\n
  \    0024, 0026, 0028, 0029, 0030, 0031, 0032\n\nDebugging\n---------\n\nFor debugging,
  jlouis tends to use the following:\n\n    make conf build test\n\nThis builds Combinatorrent
  with the *Debug* flag set and also builds the\nsoftware with profiling by default
  so it is easy to hunt down performance\nregressions. It also runs the internal test-suite
  for various values. There\nare a couple of interesting targets in the top-level
  Makefile\n\nReading material for hacking Combinatorrent:\n--------------------------------------------\n\n
  \  - [Protocol specification - BEP0003](http://www.bittorrent.org/beps/bep_0003.html):\n
  \    This is the original protocol specification, tracked into the BEP\n     process.
  It is worth reading because it explains the general overview\n     and the precision
  with which the original protocol was written down.\n\n   - [Bittorrent Enhancement
  Process - BEP0000](http://www.bittorrent.org/beps/bep_0000.html)\n     The BEP process
  is an official process for adding extensions on top of\n     the BitTorrent protocol.
  It allows implementors to mix and match the\n     extensions making sense for their
  client and it allows people to\n     discuss extensions publicly in a forum. It
  also provisions for the\n     deprecation of certain features in the long run as
  they prove to be of\n     less value.\n\n   - [wiki.theory.org](http://wiki.theory.org/Main_Page)\n
  \    An alternative description of the protocol. This description is in\n     general
  much more detailed than the BEP structure. It is worth a read\n     because it acts
  somewhat as a historic remark and a side channel. Note\n     that there are some
  commentary on these pages which can be disputed\n     quite a lot.\n\n   - [\"Supervisor
  Behaviour\"](http://erlang.org/doc/design_principles/sup_princ.html)\n     From
  the Erlang documentation. How the Erlang Supervisor behaviour\n     works. The Supervisor
  and process structure of Combinatorrent is\n     somewhat inspired by the Erlang
  ditto.\n\nSource code Hierarchy\n---------------------\n\n   - **Data**: Data structures.\n
  \     - **Queue**: Functional queues. Standard variant with two lists.\n      -
  **PendingSet**: A wrapper around Data.PSQueue for tracking how\n        common a
  piece is.\n      - **PieceSet**: BitArrays of pieces and their operations.\n\n   -
  **Process**: Process definitions for the different processes comprising\n                  Combinatorrent\n
  \     - **ChokeMgr**: Manages choking and unchoking of peers, based upon the current
  speed of the peer\n        and its current state. Global for multiple torrents.\n
  \     - **Console**: Simple console process. Only responds to 'quit' at the moment.\n
  \     - **DirWatcher**: Watches a directory and adds any torrent present in\n        it.\n
  \     - **FS**: Process managing the file system.\n      - **Listen**: Not used
  at the moment. Step towards listening sockets.\n      - **Peer**: Several process
  definitions for handling peers. Two for sending, one for receiving\n        and
  one for controlling the peer and handle the state.\n      - **PeerMgr**: Management
  of a set of peers for a single torrent.\n      - **PieceMgr**: Keeps track of what
  pieces have been downloaded and what are missing. Also hands\n        out blocks
  for downloading to the peers.\n      - **Status**: Keeps track of uploaded/downloaded/left
  bytes for a single torrent. Could be globalized.\n      - **Timer**: Timer events.\n
  \     - **TorrentManager**: Manages torrents at the top-level.\n      - **Tracker**:
  Communication with the tracker.\n\n   - **Protocol**: Modules for interacting with
  the various bittorrent protocols.\n      - **BCode**: The bittorrent BCode coding.
  Used by several protocols.\n      - **Wire**: The protocol used for communication
  between peers.\n\n   - **Top Level**:\n      - **Channels**: Various Channel definitions.\n
  \     - **Combinatorrent**: Main entry point to the code. Sets up processes.\n      -
  **Digest**: SHA1 digests as used in the bittorrent protocol.\n      - **FS**: Low
  level Filesystem code. Interacts with files.\n      - **Process**: Code for Erlang-inspired
  processes.\n      - **RateCalc**: Rate calculations for a network socket. We use
  this to keep track of the\n        current speed of a peer in one direction.\n      -
  **Supervisor**: Erlang-inspired Supervisor processes.\n      - **Test.hs**: Code
  for test-framework\n      - **TestInstance.hs**: Various helper instances not present
  in the test framework by default\n      - **Torrent**: Various helpers and types
  for Torrents.\n      - **Tracer**: Code for simple \"ring\"-like tracing.\n      -
  **Version.hs.in**: Generates **Version.hs** via the configure script.\n\n# vim:
  filetype=none tw=76 expandtab\n"
license-name: BSD-3-Clause
