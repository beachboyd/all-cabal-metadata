homepage: ''
changelog-type: ''
hash: 5ad7c665193186d8eca9be27ba61728b8efcfa17493101e07105235c265f7ce6
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: MVars and Channels with distinguished input and output side
changelog: ''
basic-deps:
  base: ! '>=4 && <5'
all-versions:
- '0.0'
- 0.0.0.1
- 0.0.0.2
- 0.0.1
- 0.0.1.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.1.1
description-type: haddock
description: ! 'MVars and Channels with distinguished input and output side.

  When threads communicate via an MVar or a Chan

  there are often clearly defined roles,

  which thread is the sender and which one is receiver.

  We provide wrappers around the standard concurrency communication channels

  that make the distinction clear and type safe.


  For example, if a function has a parameter of type @TChan.In@

  then it is sure that it will only write to that channel.

  Additionally if the compiler warns about an unused @TChan.Out@

  that was created by @TChan.new@

  then you know that the receiver part of your communication is missing.


  This package requires only Haskell 98.


  Related packages:


  * @stm-split@: transactional communication in @STM@ monad


  * @chan-split@: follows the same idea as this package and @stm-split@

  but requires multi-parameter type classes with functional dependencies.


  * @privileged-concurrency@:


  * @split-channel@:'
license-name: BSD-3-Clause
