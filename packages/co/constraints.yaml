homepage: http://github.com/ekmett/constraints/
changelog-type: markdown
hash: 25190a3401d9371179abc3144ea087148976ebeafdd1b3945bd8a0f799951cb8
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: ! '>=2'
  constraints: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Constraint manipulation
changelog: ! "0.10.1 [2018.07.02]\n-------------------\n* Allow building with GHC
  8.6.\n* Add three axioms about `(+)` and `(-)` to `Data.Constraint.Nat`.\n\n0.10\n----\n*
  Adapt to the `Semigroup`â€“`Monoid` Proposal (introduced in `base-4.11`):\n  * Add
  a `Semigroup` instance for `Dict`\n  * Add the appropriate `(:=>)` instances involving
  `Semigroup`, and change the\n    `Class () (Monoid a)` instance to `Class (Semigroup
  a) (Monoid a)` when\n    `base` is recent enough\n  * Add the appropriate `Lifting(2)`
  instances involving `Semigroup`\n* `Data.Constraint.Nat` now reexports the `Div`
  and `Mod` type families from\n  `GHC.TypeLits` on `base-4.11` or later\n* Fix the
  type signature of `maxCommutes`\n* Export the `no` method of `Bottom`\n* Add `NFData`
  instances for `Dict` and `(:-)`\n\n0.9.1\n-----\n* Correct an improper use of `unsafeCoerce`
  in the internals of\n  `Data.Constraint.Nat` and `Data.Constraint.Symbol`\n* Correctly
  identify the mismatched types when you defer an unsatisfiable\n  equality constraint
  through `Data.Constraint.Deferrable`\n* Re-export the `(:~~:)` defined in `base`
  from `Data.Constraint.Deferred` with\n  GHC 8.2 or later\n* Add several new `(:=>)`
  instances for `Bits`, `Identity`, `Const`, `Natural`,\n  `IO`, and `Word`.\n* Modernize
  some existing `Class` and `(:=>)` instances to reflect the fact\n  that `Applicative`
  is now a superclass of `Monad` on recent versions of\n  `base`.\n\n0.9\n---\n* Changes
  to `Data.Constraint`:\n  * Add `strengthen1` and `strengthen2`\n* Changes to `Data.Constraint.Deferrable`:\n
  \ * Add a `Deferrable ()` instance\n  * The `Deferrable (a ~ b)` instance now shows
  the `TypeRep`s of `a` and `b`\n    when a type mismatch error is thrown\n  * Add
  `defer_` and `deferEither_`, counterparts to `defer` and `deferEither`\n    which
  do not require proxy arguments\n  * Enable `PolyKinds`. This allows the `Deferrable
  (a ~ b` instance to be\n    polykinded on all supported versions of GHC _except_
  7.10, where the kinds\n    must be `*` due to an old GHC bug\n  * Introduce a heterogeneous
  equality type `(:~~:)`, and use it to define a\n    `Deferrable (a ~~ b)` instance
  on GHC 8.0 or later\n* Changes to `Data.Constraint.Forall`:\n  * Implement `ForallF`
  and `ForallT` in terms of `Forall`\n  * Add `ForallV` and `InstV` (supporting a
  variable number of parameters)\n  * Add a `forall` combinator\n* Introduce `Data.Constraint.Nat`
  and `Data.Constraint.Symbol`, which contain\n  utilities for working with `KnownNat`
  and `KnownSymbol` constraints,\n  respectively. These modules are only available
  on GHC 8.0 or later.\n\n0.8\n-----\n* GHC 8 compatibility\n* `transformers` 0.5
  compatibility\n* `binary` 0.8 compatibility\n* Dropped support for GHC 7.6 in favor
  of a nicer Bottom representation.\n\n0.7\n---\n* Found a nicer encoding of the initial
  object in the category of constraints using a [nullary constraint](https://ghc.haskell.org/trac/ghc/ticket/7642).\n\n0.6.1\n-----\n*
  Remove the need for closed type families from the new `Forall`.\n\n0.6\n---\n* Completely
  redesigned `Data.Constraint.Forall`. The old design is unsound and can be abused
  to define `unsafeCoerce`!\n  The new design requires closed type families, so this
  module now requires GHC 7.8+\n\n0.5.1\n-----\n* Added `Data.Constraint.Deferrable`.\n\n0.5\n-----\n*
  Added `Data.Constraint.Lifting`.\n\n0.4.1.3\n-------\n* Acknowledge we actually
  need at least base 4.5\n\n0.4.1.2\n-------\n* Restore support for building on older
  GHCs\n\n0.4.1.1\n-------\n* Minor documentation fixes.\n\n0.4.1\n-----\n* Added
  `mapDict` and `unmapDict`.\n* Added a lot of documentation.\n\n0.4\n---\n* `Typeable`
  and `Data`. The `Data` instance for `(:-)` is a conservative approximation that
  avoids having to turn (:-) into a cartesian closed category.\n  If it becomes a
  pain point for users, I know how to do that, and have done so in other libraries
  -- see [hask](http://github.com/ekmett/hask), but I'm hesitant to bring such heavy
  machinery to bear and it isn't clear how to do it in a way that is compatible with
  those other libraries.\n\n0.3.5\n-----\n* Explicit role annotations\n\n0.3.4.1\n-------\n*
  Fixed build failures.\n* Fixed an unused import warning on older GHCs.\n\n0.3.4\n-----\n*
  Added `bottom`\n"
basic-deps:
  base: ! '>=4.7 && <5'
  semigroups: ! '>=0.17 && <0.19'
  binary: ! '>=0.7.1 && <0.9'
  ghc-prim: -any
  mtl: ! '>=2.1.2 && <2.3'
  hashable: ! '>=1.2 && <1.3'
  transformers: ! '>=0.3.0.0 && <0.6'
  deepseq: ! '>=1.3 && <1.5'
  transformers-compat: ! '>=0.5 && <1'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.3.0.1'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.4.1'
- '0.3.4.2'
- '0.3.5'
- '0.4'
- '0.4.1'
- '0.4.1.1'
- '0.4.1.2'
- '0.4.1.3'
- '0.6'
- '0.8'
- '0.9'
- '0.9.1'
- '0.10'
- '0.10.1'
author: Edward A. Kmett
latest: '0.10.1'
description-type: markdown
description: ! 'constraints

  ===========


  [![Hackage](https://img.shields.io/hackage/v/constraints.svg)](https://hackage.haskell.org/package/constraints)
  [![Build Status](https://secure.travis-ci.org/ekmett/constraints.png?branch=master)](http://travis-ci.org/ekmett/constraints)


  This package provides data types and classes for manipulating the ''ConstraintKinds''
  exposed by GHC in 7.4.


  Contact Information

  -------------------


  Contributions and bug reports are welcome!


  Please feel free to contact me through github or on the #haskell IRC channel on
  irc.freenode.net.


  -Edward Kmett

'
license-name: BSD2
