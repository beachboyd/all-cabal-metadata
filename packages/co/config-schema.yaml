homepage: https://github.com/glguy/config-schema
changelog-type: markdown
hash: 7e0fcff8f9174ee34a8281451dab58736a146fe9deeb4e2111492b8542e65580
test-bench-deps:
  base: -any
  text: -any
  config-value: -any
  config-schema: -any
maintainer: emertens@gmail.com
synopsis: Schema definitions for the config-value package
changelog: ! "# Revision history for config-schema\n\n## 0.5.0.1\n* Support GHC 8.4.1\n\n##
  0.5.0.0\n\n* Add Spec instances for Int and Word types. All instances\n  including
  the previous Int instance now validate ranges.\n* Changed argument order for `loadValueFromFile`\n\n##
  0.4.1.0\n\n* Add `loadValueFromFile` and `SchemaError`. This is intended\n  as a
  quick way to get a configuration file loaded with all\n  errors being thrown as
  exceptions.\n\n## 0.4.0.0\n\n* Parameterize the Load module on a position type\n*
  Allow Docs module to process recursively defined\n  specifications as long as a
  named section breaks\n  the loop.\n* Add parentheses to docs when needed\n\n## 0.3.1.1
  \ -- 2017-05-17\n\n* Add support for GHC 7.10.3\n\n## 0.3.1.0  -- 2017-05-16\n\n*
  Allow `generateDocs` to work on any ValueSpec, rather than\n  top-level empty-named
  section specs.\n\n## 0.3.0.0  -- 2017-05-09\n\n* Added \"association list\" specifications\n*
  Use `pretty` library for documentation generation\n* Reorder parameters so that
  documentation comes last\n* Hide implementations of `ValueSpecs` and `SectionSpecs`\n\n##
  0.2.0.0  -- 2017-05-07\n\n* Expose `liftValueSpec` and `liftSectionSpec`\n* Add
  `fractionalSpec`\n* Add `nonemptySpec` and `oneOrNonemptySpec`\n* `loadValue` returns
  a `NonEmpty LoadError`\n\n## 0.1.0.0  -- 2017-05-06\n\n* First version. Released
  on an unsuspecting world.\n"
basic-deps:
  semigroupoids: ! '>=5.1 && <5.4'
  free: ! '>=4.12 && <5.2'
  base: ! '>=4.9 && <4.13'
  text: ! '>=1.2 && <1.3'
  kan-extensions: ! '>=5.0.2 && <5.3'
  containers: ! '>=0.5 && <0.7'
  config-value: ! '>=0.6 && <0.7'
  transformers: ! '>=0.4 && <0.6'
  pretty: ! '>=1.1.2 && <1.2'
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.3.0.0'
- '0.3.1.0'
- '0.3.1.1'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '0.5.0.1'
author: Eric Mertens
latest: '0.5.0.1'
description-type: markdown
description: ! "config-schema\n=============\n\n[![Hackage](https://img.shields.io/hackage/v/config-schema.svg)](https://hackage.haskell.org/package/config-schema)
  [![Build Status](https://secure.travis-ci.org/glguy/config-schema.png?branch=master)](http://travis-ci.org/glguy/config-schema)\n\nLive
  Demo\n--------\n\nThe config-value and config-schema packages are available in a
  [live demo](https://glguy.net/config-demo/).\n\nAbout\n--------\n\nThis package
  allows the user to define configuration schemas suitable for\nmatching against configuration
  files written in the\n[config-value](https://hackage.haskell.org/package/config-value)
  format.\nThese schemas allow the user to extract an arbitrary Haskell value from\nan
  interpretation of a configuration file. It also allows the user to\nprogramatically
  generate documentation for the configuration files\naccepted by the loader.\n\n```haskell\n{-#
  Language OverloadedStrings, ApplicativeDo #-}\nmodule Example where\n\nimport qualified
  Data.Text as Text\nimport           Data.Text (Text)\nimport           Data.Monoid
  ((<>))\nimport           Data.Functor.Alt ((<!>))\nimport           Data.List.NonEmpty
  (NonEmpty)\n\nimport           Config\nimport           Config.Schema\n\nexampleFile
  :: Text\nexampleFile =\n  \" name: \\\"Johny Appleseed\\\" \\n\\\n  \\ age : 99
  \                 \\n\\\n  \\ happy: yes                \\n\\\n  \\ kids:                     \\n\\\n
  \ \\   * name: \\\"Bob\\\"         \\n\\\n  \\   * name: \\\"Tom\\\"         \\n\"\n\nexampleValue
  :: Value Position\nRight exampleValue = parse exampleFile\n\nexampleSpec :: ValueSpecs
  Text\nexampleSpec = sectionsSpec \"\" $\n  do name  <- reqSection  \"name\" \"Full
  name\"\n     age   <- reqSection  \"age\"  \"Age of user\"\n     happy <- optSection'
  \"happy\" yesOrNo\n              \"Current happiness status\"\n     kids  <- reqSection'
  \"kids\"  (oneOrList kidSpec)\n              \"All children's names\"\n\n     return
  $\n       let happyText = case happy of Just True  -> \" and is happy\"\n                                     Just
  False -> \" and is not happy\"\n                                     Nothing    ->
  \" and is private\"\n\n       in name <> \" is \" <> Text.pack (show (age::Integer))
  <>\n             \" years old and has kids \" <>\n             Text.intercalate
  \", \" kids <>\n             happyText\n\nkidSpec :: ValueSpecs Text\nkidSpec =
  sectionsSpec \"kid\" (reqSection \"name\" \"Kid's name\")\n\n\n-- | Matches the
  'yes' and 'no' atoms\nyesOrNo :: ValueSpecs Bool\nyesOrNo = True  <$ atomSpec \"yes\"
  <!>\n          False <$ atomSpec \"no\"\n\n\nprintDoc :: IO ()\nprintDoc = print
  (generateDocs exampleSpec)\n-- *Example> printDoc\n-- Top-level configuration file
  fields:\n--     name: REQUIRED text\n--        Full name\n--     age: REQUIRED integer\n--
  \       Age of user\n--     happy: `yes` or `no`\n--        Current happiness status\n--
  \    kids: REQUIRED kid or list of kid\n--        All children\n--\n-- kid\n--     name:
  REQUIRED text\n--        Kid's name\n\nexample :: Either (NonEmpty (LoadError Position))
  Text\nexample = loadValue exampleSpec exampleValue\n-- *Example> exampleVal\n--
  Right \"Johny Appleseed is 99 years old and has kids Bob, Tom and is happy\"\n```\n"
license-name: ISC
