homepage: https://github.com/414owen/context-free-art
changelog-type: markdown
hash: 5d6e3054a5ea05e749536fd883bafe60d70e3a8b4ebc9af7b3c6141b8ad4be6f
test-bench-deps: {}
maintainer: 414owen@gmail.com
synopsis: Generate art from context-free grammars
changelog: |
  # Revision history for context-free-art

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  blaze-svg: ! '>=0.3.6 && <0.4'
  extra: ==1.6.*
  base: ! '>=4.12.0.0 && <4.13'
  blaze-markup: -any
  text: ==1.2.*
  text-show: ==3.8.*
  HUnit: ^>=1.6
  bifunctors: ==5.5.*
  random: ==1.1.*
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Owen Shepherd
latest: 0.2.0.0
description-type: haddock
description: |2-

  Create art via context free grammar production rules.
  Includes an SVG backend.

  == Context free grammar primer

  Context free grammars consist of a set of terminal symbols, a set of
  non-terminal symbols, and production rules that map non-terminals to
  other symbols.

  With a context-free grammar, we can generate strings of terminals that
  conform to the specified language.

  Our language will describe graphics.

  == Example

  > import Art.ContextFree
  > import Data.List.NonEmpty
  >
  > -- Let's define a Production rule
  > a = Circle 1
  >
  > -- This will produce an IO Svg from the blaze-svg package
  > -- to turn it into a string we can use one of the `blaze-svg` renderers
  > graphic1 = interpret $ Circle 1
  >
  > -- Let's create a non-terminal.
  > -- At every layer, this will have an 85% chance
  > -- of rendering another circle
  > a = Mod [Move (2, 0)] b
  > b = NonTerminal $ (85, c) :| []
  > c = NonTerminal $ (100, Circle 1) :| [(100, a)]
license-name: BSD-3-Clause
