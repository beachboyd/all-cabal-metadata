homepage: https://github.com/414owen/context-free-art
changelog-type: markdown
hash: e11bb84b890d4346e845e7c6bc0838f1323aa4d5ba3094600e4df274103ecccc
test-bench-deps: {}
maintainer: 414owen@gmail.com
synopsis: Generate art from context-free grammars
changelog: |
  # Revision history for context-free-art

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  blaze-svg: ! '>=0.3.6'
  base: ! '>=4.12 && <5'
  blaze-markup: -any
  text: ! '>=1.2'
  text-show: ! '>=3.8'
  HUnit: ! '>=1.6'
  bifunctors: ! '>=5.5'
  random: ! '>=1.1'
  safe: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
author: Owen Shepherd
latest: 0.2.0.3
description-type: haddock
description: |2-

  Create art via context free grammar production rules.

  == Context free grammar primer

  Context free grammars consist of a set of terminal symbols, a set of
  non-terminal symbols, and production rules that map non-terminals to
  other symbols.

  With a context-free grammar, we can generate strings of terminals that
  conform to the specified language.

  Our language will describe graphics.

  == Example

  > import Art.ContextFree
  > import Data.List.NonEmpty
  >
  > -- Let's define a Production rule
  > a = Circle 1
  >
  > -- This will produce an IO Svg from the blaze-svg package
  > -- to turn it into a string we can use one of the `blaze-svg` renderers
  > graphic1 = interpret $ Circle 1
  >
  > -- let's create a non-terminal, 'a', which renders a terminal, 'Circle 1'
  > -- and has an 85% chance of rendering another circle, placed to its right
  > a = NonTerminal $ (100, Circle 1) :| [(85, b)]
  > b = Mod [Move (2, 0)] a
license-name: BSD-3-Clause
