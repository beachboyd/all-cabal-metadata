homepage: https://github.com/achirkin/constraints-deriving#readme
changelog-type: ''
hash: 297218961acf280c502a5a9f62ffe7cf503ec1b2f1b3d44531f4b2523aa4e8f4
test-bench-deps:
  ghc: -any
  bytestring: -any
  path: -any
  base: ! '>=4.9 && <5'
  filepath: -any
  ghc-paths: -any
  constraints-deriving: -any
  path-io: -any
maintainer: achirkin@users.noreply.github.com
synopsis: Manipulating constraints and deriving class instances programmatically.
changelog: ''
basic-deps:
  ghc: ! '>=8.0.1'
  base: ! '>=4.9 && <5'
  constraints-deriving: -any
all-versions:
- 1.0.0.0
- 1.0.1.0
author: Artem Chirkin
latest: 1.0.1.0
description-type: markdown
description: "[![Hackage](https://img.shields.io/hackage/v/constraints-deriving.svg)](https://hackage.haskell.org/package/constraints-deriving)\n[![Build
  Status](https://secure.travis-ci.org/achirkin/constraints-deriving.svg)](http://travis-ci.org/achirkin/constraints-deriving)\n#
  constraints-deriving\n\nThis project is based on the [constraints](http://hackage.haskell.org/package/constraints)
  library.\nModule `Data.Constraint.Deriving` provides a GHC Core compiler plugin
  that generates class instances.\n\nThe main goal of this project is to make possible
  a sort of ad-hoc polymorphism that I wanted to\nimplement in [easytensor](http://hackage.haskell.org/package/easytensor)
  for performance reasons:\nan umbrella type unifies multiple specialized type family
  backend instances;\nif the type instance is known, GHC picks a specialized (overlapping)
  class instance for a required function;\notherwise, GHC resorts to a unified (overlappable)
  instance that is defined for the whole type family.\n\nTo use the plugin, add\n```Haskell\n{-#
  OPTIONS_GHC -fplugin Data.Constraint.Deriving #-}\n```\nto the header of your module.\nFor
  debugging, add a plugin option `dump-instances`:\n```Haskell\n{-# OPTIONS_GHC -fplugin-opt
  Data.Constraint.Deriving:dump-instances #-}\n```\nto the header of your file; it
  will print all instances declared in the module (hand-written and auto-generated).\nTo
  enable much more verbose debug output, use library flag `dev` (for debugging the
  plugin itself).\n\nCheck out `example` folder for a motivating use case (enabled
  with flag `examples`).\n\nThe plugin is controlled via GHC annotations; there are
  two types of annotations corresponding to two plugin passes.\nBoth passes are core-to-core,
  which means the plugin runs after typechecker,\nwhich in turn means **the generated
  class instances are available only outside of the module**.\nA sort of inconvenience
  you may have experienced with template haskell \U0001F609.\n\n### DeriveAll\n\n`DeriveAll`
  plugin pass inspects a newtype declaration.\nTo enable `DeriveAll` for a newtype
  `Foo`, add an annotation as follows:\n```Haskell\ndata Bar a = ...\n{-# ANN type
  Foo DeriveAll #-}\nnewtype Foo a = Foo (Bar a)\n\n-- the result is that Foo has
  the same set of instances as Bar\n```\ncheck out [`test/Spec/`](https://github.com/achirkin/constraints-deriving/tree/master/test/Spec)
  for [more examples](https://github.com/achirkin/constraints-deriving/blob/master/test/Spec/DeriveAll04.hs#L19-L20).\n\n`DeriveAll`
  plugin pass looks through all possible type instances (in the presence of type families)
  of the base type,\nand copies all class instances for the newtype wrapper.\n\nSometimes,
  you may need to refine the relation between the base type and the newtype;\nyou
  can do this via a special `type family DeriveContext newtype :: Constraint`.\nBy
  adding equality constraints, you can specify custom dependencies between type variables
  present in the newtype declaration\n(e.g. [`test/Spec/DeriveAll01.hs`](https://github.com/achirkin/constraints-deriving/blob/master/test/Spec/DeriveAll01.hs#L24)).\nBy
  adding class constraints, you force these class constraints for all generated class
  instances\n(e.g. in [`test/Spec/DeriveAll02.hs`](https://github.com/achirkin/constraints-deriving/blob/master/test/Spec/DeriveAll02.hs#L37)\n
  all class instances of `BazTy a b c d e f` have an additional constraint `Show e`).\n\n\nNote,
  the internal machinery is different from `GeneralizedNewtypeDeriving` approach:\nrather
  than coercing every function in the instance definition from the base type to the
  newtype,\nit coerces the whole instance dictionary.\n\n#### Blacklisting instances
  from being DeriveAll-ed\n\nSometimes you may want to avoid deriving a number of
  instances for your newtype.\nUse `DeriveAllBut [String]` constructor in the annotation
  and specify names of type classes you don't want to derive.\n```Haskell\n{-# ANN
  type CHF (DeriveAllBut [\"Show\"]) #-}\nnewtype CHF = CHF Double deriving Show\n\n--
  the result is a normal `Show CHF` instance and the rest of `Double`'s instances
  are DeriveAll-ed\n```\nFor your safety,\nthe plugin is hardcoded to **not** generate
  instances for any classes and types in\n`GHC.Generics`, `Data.Data`, `Data.Typeable`,
  `Language.Haskell.TH`.\n\n\n### ToInstance\n\n`ToInstance` plugin pass converts
  a top-level `Ctx => Dict (Class t1..tn)` value declaration into\nan instance of
  the form `instance Ctx => Class t1..tn`.\nThus, one can write arbitrary Haskell
  code (returning a class dictionary) to be executed every time\nan instance is looked
  up by the GHC machinery.\nTo derive an instance this way, use  `ToInstance (x ::
  OverlapMode)` for a declaration, e.g. as follows:\n```Haskell\nnewtype Foo t = Foo
  t\n\n{-# ANN deriveEq (ToInstance NoOverlap) #-}\nderiveEq :: Eq t => Dict (Eq (Foo
  t))\nderiveEq = mapDict (unsafeDerive Foo) Dict\n\n-- the result of the above is
  equal to\n-- deriving instance Eq t => Eq (Foo t)\n```\nYou can find a more meaningful
  example in [`test/Spec/ToInstance01.hs`](https://github.com/achirkin/constraints-deriving/blob/master/test/Spec/ToInstance01.hs#L45-L47)
  or\n[`example/Lib/VecBackend.hs`](https://github.com/achirkin/constraints-deriving/blob/master/example/Lib/VecBackend.hs).\n\n##
  Further work\n\n`DeriveAll` derivation mechanics currently may break functional
  dependencies (untested).\n"
license-name: BSD-3-Clause
