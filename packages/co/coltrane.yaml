homepage: https://github.com/wellecks/coltrane
changelog-type: ''
hash: 8555d8cb24300dddffbeb987eed62040648d9559ecacb5c30bedecbebccb21b6
test-bench-deps: {}
maintainer: Sean Welleck
synopsis: A jazzy, minimal web framework for Haskell, inspired by Sinatra.
changelog: ''
basic-deps:
  warp: ==2.0.*
  bytestring: ==0.10.*
  wai: ==2.0.*
  base: ==4.6.*
  text: ==0.11.*
  HUnit: ==1.2.*
  regex-compat: ==0.95.*
  mtl: ==2.1.*
  HTTP: ==4000.2.*
  wai-extra: ==2.0.*
  http-types: ==0.8.*
all-versions:
- 0.1.0.0
author: Sean Welleck
latest: 0.1.0.0
description-type: markdown
description: ! "#Coltrane\n\n####A Minimal Web Framework for Haskell\n\n\n**Sean Welleck
  | Yuanfeng Peng**\n\nColtrane is a minimal web framework for Haskell, inspired by\nRuby's
  [Sinatra](https://github.com/sinatra/sinatra/) framework. Coltrane lets you write
  simple\nweb applications in just a few lines of Haskell code. \n\n**Use Coltrane
  for concise webapps...**\n```haskell\nimport Coltrane\nimport ColtraneTypes\n\nmain
  = coltrane Warp 8000 $ do\n         get (Literal \"/hello\") $ do\n              html
  \"Hello World!\"\n```\n**... and all that jazz.**\n```\n$ main\n$ == Coltrane has
  taken the stage ..\n$ >> playing on port 8000\n```\n\nColtrane was built as a final
  project for CIS552: Advanced Programming,\nand is now open-sourced!\n\n##Routes\nA
  route consists of a method, a path, and a handler. A path can be:\n- string literal\n```haskell\nget
  (Literal \"/album\") $ do\n         text \"A Love Supreme\"\n```\n\n- regular expression\n```haskell\nget
  (RegExp mkRegex \"^(/[0-9]+)\") $ do\n         text \"I like numbers.\"\n```\n\n##Path
  variables\nYou can create variables in your paths, which can be accessed\nusing
  the `param` function:\n```haskell\n-- e.g. handles a request to /jazz\nget (Literal
  \"/:item\") $ do\n    item <- param \":item\"\n    html \"My favorite thing is:
  \" ++ item\n\n-- e.g. handles a request to /miles/davis\nget (Literal \"/:first/:last\")
  $ do\n    fname <- param \":first\"\n    lname <- param \":last\"\n    html \"John
  Coltrane, featuring \" ++ fname ++ \" \" ++ lname\n```\n\n##GET and POST parameters\nYou
  can also access parameters from GET and POST requests using the\n`param` function.\n```haskell\n--
  e.g. handles a GET request to /submit?venue=village\nget (Literal \"/submit\") $
  do\n    venue <- param \"venue\"\n    html \"Live at \" ++ venue ++ \".\"\n\n--
  e.g. handles a POST request to /submit with venue=village as a parameter\npost (Literal
  \"/submit\") $ do\n    venue <- param \"venue\"\n    html \"Live at \" ++ venue
  ++ \".\"\n```\n\n##HTTP Methods\nColtrane provides helper functions for `get`, `post`,
  `put`, `delete`.\n\n\n##Content Type Helpers\nColtrane provides helper functions
  for `text`, `html`, `json`, `file`.\n\n##HTML Files\nUse `htmlFile` to load HTML
  from a file:\n```haskell\nget (Literal \"/index\") $ do\n    htmlFile \"index.html\"\n```\n\n##Exceptions\nCatch
  errors with `catchError` and throw exceptions with `throwError`:\n```haskell\nput
  (Literal \"/trouble\") $ do\n    (throwError \"catch me\")\n    `catchError`\n    (\\err
  -> text $ err ++ \" if you can.\")\n\n```\n\n##Accessing the Request Data\nAccess
  the WAI Request object with `request`:\n```haskell\nget (Literal \"/showpath\")
  $ do \n    req <- request \n    html (show $ pathInfo req)\n```\n##Modifying the
  Response\nChange the response status code with `setStatus`:\n\n```haskell\nget (Literal
  \"/changestatus\") $ do\n    setStatus status203\n    text \"Changed on a Moment's
  Notice\"\n```\nAdd an HTTP header with `addHeader`:\n```haskell\nget (Literal \"/addcookie\")
  $ do\n    addHeader hCookie \"ascension\"\n    html \"Headers up\"\n```\n\nAlternatively,
  `setHeader` modifies an existing header's value, or adds a new header if it doesn't
  exist.\n\n----\n##Files\n####ColtraneTypes.hs\nThis file contains the types used
  in the library. Reading through these\ntypes first will help to understand the structure
  of the framework.\n\nNotable types include: \n1. ColtraneApp: a monad that stores
  the application's state. Specifically,\n   it stores the user-specified routes that
  are then used by the router.\n\n2. Route: a method, path, and Handler. \n\n2. HandlerM:
  A monad for processing a request and building a response. \n   Stores information
  that is used and modified within a route handler, and\n   is able to throw and catch
  errors.\n   Specifically, contains the request, the parameters, and the response
  state.\n   Intuitively, a Handler consists of 'building' a response state that is
  then\n   turned into a response and sent to the server.\n\n4. HandlerState: describes
  the state held by the HandlerM.\n\n####Coltrane.hs\nThis file contains the core
  functionality of the framework. It contains:\n1. Which functions are visible to
  the user. \n\n2. The router, which matches a registered route with an incoming request,\n
  \  and runs the corresponding handler.\n\n   Functions: router, route\n\n3. The
  matcher, which is used by the router to perform the actual route\n   matching. Matches
  literal strings, regular expressions, and\n   parses url variables.\n\n   Functions:
  matchesPath\n\n4. Routing functions. Associates a Path and a Handler to create a
  route,\n   which is added to the ColtraneApp state.\n\n   Functions: addroute, addroutes,
  get, post, put, delete\n\n5. Response modifiers. Changes the response state within
  a handler. Specifically, changes the headers, the body, and the status.\n\n   Functions:
  setBody, setStatus, setHeader, addHeader.\n\n6. Request retrieval. Retrieve parameters
  and the request object.\n   \n   Functions: param, request.\n\n####ColtraneTests.hs\nContains
  all of the tests, as well as examples of how to use the framework.\nIn order to
  run the tests, the server must be running, so do the following:\n\nInstall Dependencies:\n```bash\n
  \ $ cabal install warp==2.0.0.1\n  $ cabal install wai-extra==2.0.0.1\n  $ cabal
  install wai==2.0.0\n```\nGHCI one (running the server)\n```bash\n  $ :load ColtraneTests\n
  \ $ main\n```\n\nGHCI two (running the tests)\n```bash\n  $ :load ColtraneTests\n
  \ $ runTests\n```\n  \nNote that the server is running on port 9000, so you can
  navigate to pages in the browser, e.g.:\n- http://localhost:9000\n- http://localhost:9000/hello\n-
  http://localhost:9000/param/firstname/lastname (replace firstname and lastname as
  desired)\n\n###Extra Files\n####website.hs\nA sample web app built using Coltrane
  and the Blaze HTML library. Hopefully\nit's an example of how easy and concise it
  is to build a web app using the framework!\n\nTo run in ghci:\n\n**Install Dependencies**\n```bash\n$
  cabal install warp==2.0.0.1\n$ cabal install wai-extra==2.0.0.1\n$ cabal install
  wai==2.0.0\n$ cabal install blaze-html==0.6.1.1\n```\n**Run It**\n```\n$ :load website.hs.
  \n$ main\n```\n  Then navigate to http://localhost:8000 in a web browser.\n\n---\n##Libraries
  Used & Dependencies\n**wai**: A Middleware library that provides a common interface
  between Coltrane and the underlying web servers.\n    http://hackage.haskell.org/package/wai\n
  \   \n    cabal install wai==2.0.0\n\n**wai-extra**: Provides additional tools for
  use with wai. We use it to parse\nparameters from a Request body. \n  http://hackage.haskell.org/package/wai-extra\n
  \   \n    cabal install wai-extra==2.0.0.1\n\n**warp**: a haskell web server used
  by WAI.\n\n    cabal install warp==2.0.0.1\n\n**Network.HTTP**: A simple HTTP interface.
  Also contains some common types used\nin web-related libraries, such as StdMethod,
  and HeaderName. We also use \nthis library to generate requests and responses for
  testing.\n\n**blaze-html** (** only used by the sample website.hs **): An HTML combinator\nlibrary
  that allows you to quickly write HTML within Haskell code.\n```\ncabal install blaze-html\n```\n"
license-name: BSD-3-Clause
