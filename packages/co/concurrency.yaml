homepage: https://github.com/barrucadu/dejafu
changelog-type: markdown
hash: 819d7ff04c9468fb4b2d22f797a29a04b6f920db91a3bac3d480d96670965019
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: Typeclasses, functions, and data types for concurrency and STM.
changelog: ! "Release Notes\n=============\n\nAll notable changes to this project
  will be documented in this file.\n\nThis project is versioned according to the [Package
  Versioning Policy](https://pvp.haskell.org), the\n*de facto* standard Haskell versioning
  scheme.\n\n\n1.2.3.0\n-------\n\n- **Date**    2017-11-30\n- **Git tag** [concurrency-1.2.3.0][]\n-
  **Hackage** https://hackage.haskell.org/package/concurrency-1.2.3.0\n\n### Control.Concurrent.Classy.Async\n\n-
  New named-thread variants of the `withAsync*` functions: `withAsyncN`, `withAsyncOnN`,\n
  \ `withAsyncWithUnmaskN`, and `withAsyncOnWithUnmaskN` (#148).\n\n[concurrency-1.2.3.0]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.3.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.2.2.0\n-------\n\n-
  **Date**    2017-11-05\n- **Git tag** [concurrency-1.2.2.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.2.2.0\n\n###
  Control.Monad.Conc.Class\n\n- A new `IsConc` type (and `toIsConc`, `fromIsConc`
  functions), where a value of type `IsConc m a`\n  can only be constructed if `m`
  has a `MonadConc` instance.  Its `STM` type is `IsSTM (STM m)`.\n  (#144)\n\n- The
  provided transformer instances now use the `modifyCRefCAS_` of the underlying monad,
  rather\n  than the default definition in terms of `modifyCRefCAS`.\n\n### Control.Monad.STM.Class\n\n-
  A new `IsSTM` type (and `toIsSTM`, `fromIsSTM` functions), where a value of type
  `IsSTM m a` can\n  only be constructed if `m` has a `MonadSTM` instance. (#144)\n\n[concurrency-1.2.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.2.1.2\n-------\n\n-
  **Date**    2017-10-14\n- **Git tag** [concurrency-1.2.1.2][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.2.1.2\n\n###
  Control.Monad.Conc.Class\n\n- Fixes an infinite loop introduced for the `IO` instance
  of `MonadConc` in `forkWithUnmask` and\n  `forkOnWithUnmask` in 1.2.1.1 (#134).\n\n[concurrency-1.2.1.2]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.1.2\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.2.1.1\n-------\n\n-
  **Date**    2017-10-11\n- **Git tag** [concurrency-1.2.1.1][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.2.1.1\n\n###
  Control.Monad.Conc.Class\n\n- The `IO` instance of `MonadConc` now names threads
  with `GHC.Conc.labelThread`, so thread names\n  now appear in debugging traces of
  normal execution.\n\n[concurrency-1.2.1.1]: https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.1.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.2.1.0\n-------\n\n-
  **Date**    2017-10-02\n- **Git tag** [concurrency-1.2.1.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.2.1.0\n\n###
  Control.Concurrent.Classy.Async\n\n- New named-thread variants of the `async*` functions:
  `asyncN`, `asyncOnN`, `asyncWithUnmaskN`, and\n  `asyncOnWithUnmaskN` (#125).\n\n[concurrency-1.2.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.2.0.0\n-------\n\n-
  **Date**    2017-09-16\n- **Git tag** [concurrency-1.2.0.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.2.0.0\n\n###
  Control.Monad.STM.Class\n\n- `MonadSTM` now has a `MonadPlus` constraint.\n- The
  `orElse` and `retry` functions have been promoted to top-level definitions, and
  are aliases\n  for `mplus` and `mzero`.\n\n[concurrency-1.2.0.0]: https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.2.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.1.2.1\n-------\n\n-
  **Date**    2017-06-07\n- **Git tag** [concurrency-1.1.2.1][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.1.2.1\n\n###
  Changed\n\n- The `isEmptyMVar` function is now implemented using `tryReadMVar` instead
  of a combination of\n  `tryTakeMVar` and `putMVar`. It no longer modifies the contents
  of the `MVar` and can no longer\n  block.\n\n### Miscellaneous\n\n- There is now
  a changelog.\n\n[concurrency-1.1.2.1]: https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.1.2.1\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.1.2.0\n-------\n\n-
  **Date**    2017-04-05\n- **Git tag** [concurrency-1.1.2.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.1.2.0\n\n###
  Control.Concurrent.Classy.Async\n\n- New functions:\n    - `uninterruptibleCancel`
  function, which is `cancel` inside an\n      uninterruptible mask.\n    - `replicateConcurrently`
  function, which performs an action many\n      times in separate threads.\n    -
  `concurrently_`, `mapConcurrently_`, `forConcurrently_`, and\n      `replicateConcurrently_`
  functions, which discard the result of\n      the non-_ version.\n- New instances:\n
  \   - `Semigroup` instance for `Concurrently` when built with base 4.9.\n    - `Monoid`
  instance for `Concurrently`.\n\n### Control.Monad.Conc.Class\n\n- The `mask_` and
  `uninterruptibleMask_` functions from Control.Monad.Catch are now re-exported.\n\n###
  Changed\n\n- The `cancel` and the `withAsync` functions now block until the `Async`
  action terminates, to match\n  changes in the main async package.\n\n### Miscellaneous\n\n-
  Every definition, class, and instance now has a Haddock \"@since\" annotation.\n\n[concurrency-1.1.2.0]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.1.2.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.1.1.0\n-------\n\n-
  **Date**    2017-03-04\n- **Git tag** [concurrency-1.1.1.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.1.1.0\n\n###
  Miscellaneous\n\n- The async-dejafu package has been pulled into this package as
  the Control.Concurrent.Classy.Async\n  module. async-dejafu is now __deprecated__.\n\n[concurrency-1.1.1.0]:
  https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.1.1.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.1.0.0\n-------\n\n-
  **Date**    2017-02-21\n- **Git tag** [concurrency-1.1.0.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.1.0.0\n\n###
  Control.Monad.Conc.Class\n\n- The `MonadConc` class now defines `tryReadMVar`, a
  non-blocking version of `readMVar` akin to\n  `tryTakeMVar`.\n- The `MonadConc`
  class no longer defines `_concMessage`, there is no alternative provided, it is\n
  \ just gone.\n\n[concurrency-1.1.0.0]: https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.1.0.0\n\n\n---------------------------------------------------------------------------------------------------\n\n\n1.0.0.0\n-------\n\n-
  **Date**    2016-09-10\n- **Git tag** [concurrency-1.0.0.0][]\n- **Hackage** https://hackage.haskell.org/package/concurrency-1.0.0.0\n\nInitial
  release. Go read the API docs.\n\n[concurrency-1.0.0.0]: https://github.com/barrucadu/dejafu/releases/tag/concurrency-1.0.0.0\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.9'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <1.1'
  array: ! '>=0.5 && <0.6'
  atomic-primops: ! '>=0.8 && <0.9'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '1.0.0.0'
- '1.1.0.0'
- '1.1.1.0'
- '1.1.2.0'
- '1.1.2.1'
- '1.2.0.0'
- '1.2.1.0'
- '1.2.1.1'
- '1.2.1.2'
- '1.2.2.0'
- '1.2.3.0'
author: Michael Walker
latest: '1.2.3.0'
description-type: markdown
description: ! "concurrency\n===========\n\nA typeclass abstraction over much of Control.Concurrent
  (and some\nextras!). If you're looking for a general introduction to Haskell\nconcurrency,
  you should check out the excellent\n[Parallel and Concurrent Programming in Haskell][parconc],
  by Simon\nMarlow. If you are already familiar with concurrent Haskell, just\nchange
  all the imports from Control.Concurrent.* to\nControl.Concurrent.Classy.* and fix
  the type errors.\n\nA brief list of supported functionality:\n\n- Threads: the `forkIO*`
  and `forkOn*` functions, although bound\n  threads are not supported.\n- Getting
  and setting capablities.\n- Yielding and delaying.\n- Mutable state: STM, `MVar`,
  and `IORef`.\n- Atomic compare-and-swap for `IORef`.\n- Exceptions.\n- All of the
  data structures in Control.Concurrent.* and\n  Control.Concurrent.STM.* have typeclass-abstracted
  equivalents.\n- A reimplementation of the [async][] package, providing a\n  higher-level
  interface over threads, allowing users to conveniently\n  run `MonadConc` operations
  asynchronously and wait for their\n  results.\n\nThis is quite a rich set of functionality,
  although it is not\ncomplete. If there is something else you need, file an issue!\n\nThis
  used to be part of dejafu, but with the dejafu-0.4.0.0 release,\nit was split out
  into its own package.\n\nThe documentation of the latest developmental version is\n[available
  online][docs].\n\nWhy this and not something else?\n--------------------------------\n\n-
  **Why not base:** like lifted-base, concurrency uses typeclasses to\n  make function
  types more generic. This automatically eliminates\n  calls to `lift` in many cases,
  resulting in clearer and simpler\n  code.\n\n- **Why not lifted-base:** fundamentally,
  lifted-base is still using\n  actual threads and actual mutable variables. When
  using a\n  concurrency-specific typeclass, this isn't necessarily the case. The\n
  \ dejafu library provides non-IO-based implementations to allow\n  testing concurrent
  programs.\n\n- **Why not IOSpec:** IOSpec provides many of the operations this\n
  \ library does, however it uses a free monad to do so, which has extra\n  allocation
  overhead. Furthermore, it does not expose enough of the\n  internals in order to
  accurately test real-execution semantics, such\n  as relaxed memory.\n\nContributing\n------------\n\nBug
  reports, pull requests, and comments are very welcome!\n\nFeel free to contact me
  on GitHub, through IRC (#haskell on freenode),\nor email (mike@barrucadu.co.uk).\n\n[docs]:
  \   https://docs.barrucadu.co.uk/concurrency/dejafu-0.4\n[async]:   https://hackage.haskell.org/package/async\n[parconc]:
  http://chimera.labs.oreilly.com/books/1230000000929\n"
license-name: MIT
