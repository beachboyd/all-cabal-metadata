homepage: https://github.com/barrucadu/dejafu
changelog-type: text
hash: 87bb84fe569539afc3e8a95efbfde23cc177c8b9c84ead51a4ffe197717338fd
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: Typeclasses, functions, and data types for concurrency and STM.
changelog: ! "Release Notes\n=============\n\nThis project is versioned according
  to the PVP_, the *de facto*\nstandard Haskell versioning scheme.\n\n.. _PVP: https://pvp.haskell.org/\n\n\n1.4.0.2
  (2018-03-11)\n--------------------\n\n* Git: :tag:`concurrency-1.4.0.2`\n* Hackage:
  :hackage:`concurrency-1.4.0.2`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* (:pull:`245`)
  The upper bound on :hackage:`exceptions` is <0.11.\n\n\n1.4.0.1 (2018-02-26)\n--------------------\n\n*
  Git: :tag:`concurrency-1.4.0.1`\n* Hackage: :hackage:`concurrency-1.4.0.1`\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n*
  The upper bound on :hackage:`exceptions` is <0.10.\n\n\n1.4.0.0 (2018-01-19)\n--------------------\n\n*
  Git: :tag:`concurrency-1.4.0.0`\n* Hackage: :hackage:`concurrency-1.4.0.0`\n\nChanged\n~~~~~~~\n\n*
  ``Control.Monad.Conc.Class.peekTicket'`` has a more concrete type,\n  to make deriving
  newtype instances of ``MonadConc`` possible:\n\n    * Old: ``MonadConc m => proxy
  m -> Ticket m a -> a``\n    * New: ``MonadConc m => Proxy m -> Ticket m a -> a``\n\n\n1.3.0.0
  - The Bound Thread Release (2017-12-23)\n-----------------------------------------------\n\n*
  Git: :tag:`concurrency-1.3.0.0`\n* Hackage: :hackage:`concurrency-1.3.0.0`\n\n**Note:**
  bound threads are only supported if you compile with GHC and\nlink with -threaded.\n\nAdded\n~~~~~\n\n*
  (:pull:`145`) Bound thread variants of the ``withAsync`` functions:\n\n    * ``Control.Concurrent.Classy.Async.asyncBound``\n
  \   * ``Control.Concurrent.Classy.Async.asyncBoundN``\n    * ``Control.Concurrent.Classy.Async.withAsyncBound``\n
  \   * ``Control.Concurrent.Classy.Async.withAsyncBoundN``\n\n* (:pull:`145`) Bound
  thread functions in ``MonadConc``:\n\n    * ``Control.Monad.Conc.Class.forkOS``\n
  \   * ``Control.Monad.Conc.Class.forkOSN``\n    * ``Control.Monad.Conc.Class.isCurrentThreadBound``\n\n*
  (:pull:`145`) Helper functions for bound threads:\n\n    * ``Control.Monad.Conc.Class.runInBoundThread``\n
  \   * ``Control.Monad.Conc.Class.runInUnboundThread``\n\nChanged\n~~~~~~~\n\n* (:pull:`145`)
  ``Control.Monad.Conc.Class.rtsSupportsBoundThreads``\n  is a re-export from ``Control.Concurrent``.\n\n\n1.2.3.0
  (2017-11-30)\n--------------------\n\n* Git: :tag:`concurrency-1.2.3.0`\n* Hackage:
  :hackage:`concurrency-1.2.3.0`\n\nAdded\n~~~~~\n\n* (:issue:`148`) Named thread
  variants of the ``withAsync`` functions:\n\n    * ``Control.Concurrent.Classy.Async.withAsyncN``\n
  \   * ``Control.Concurrent.Classy.Async.withAsyncOnN``\n    * ``Control.Concurrent.Classy.Async.withAsyncWithUnmaskN``\n
  \   * ``Control.Concurrent.Classy.Async.withAsyncOnWithUnmaskN``\n\n\n1.2.2.0 (2017-11-05)\n--------------------\n\n*
  Git: :tag:`concurrency-1.2.2.0`\n* Hackage: :hackage:`concurrency-1.2.2.0`\n\nAdded\n~~~~~\n\n*
  (:issue:`144`) ``IsConc`` and ``IsSTM`` wrapper types:\n\n    * ``Control.Monad.Conc.Class.IsConc``
  (constructor unexported)\n    * ``Control.Monad.Conc.Class.toIsConc``\n    * ``Control.Monad.Conc.Class.fromIsConc``\n
  \   * ``Control.Monad.STM.Class.IsSTM`` (constructor unexported)\n    * ``Control.Monad.STM.Class.toIsSTM``\n
  \   * ``Control.Monad.STM.Class.fromIsSTM``\n\nChanged\n~~~~~~~\n\n* ``Control.Monad.Conc.Class.modifyCRefCAS_``
  for transformer\n  instances delegates to the underlying monad, rather than using
  the\n  default definition in terms of ``modifyCRefCAS``.\n\n\n1.2.1.2 (2017-10-14)\n--------------------\n\n*
  Git: :tag:`concurrency-1.2.1.2`\n* Hackage: :hackage:`concurrency-1.2.1.2`\n\nFixed\n~~~~~\n\n*
  (:issue:`134`) ``Control.Monad.Conc.Class.forkWithUnmask`` and\n  ``forkOnWithUnmask``
  for the ``IO`` instance does not infinitely\n  loop (bug introduced in :tag:`concurrency-1.2.1.1`).\n\n\n1.2.1.1
  (2017-10-11)\n--------------------\n\n* Git: :tag:`concurrency-1.2.1.1`\n* Hackage:
  :hackage:`concurrency-1.2.1.1`\n\nChanged\n~~~~~~~\n\n* Named threads for ``IO``
  are implemented with\n  ``GHC.Conc.labelThread``.\n\n\n1.2.1.0 (2017-10-02)\n--------------------\n\n*
  Git: :tag:`concurrency-1.2.1.0`\n* Hackage: :hackage:`concurrency-1.2.1.0`\n\nAdded\n~~~~~\n\n*
  (:pull:`125`) Named thread variants of the ``async`` functions:\n\n    * ``Control.Concurrent.Classy.Async.asyncN``\n
  \   * ``Control.Concurrent.Classy.Async.asyncOnN``\n    * ``Control.Concurrent.Classy.Async.asyncWithUnmaskN``\n
  \   * ``Control.Concurrent.Classy.Async.asyncOnWithUnmaskN``\n\n\n1.2.0.0 (2017-09-16)\n--------------------\n\n*
  Git: :tag:`concurrency-1.2.0.0`\n* Hackage: :hackage:`concurrency-1.2.0.0`\n\nChanged\n~~~~~~~\n\n*
  ``MonadPlus`` is a superclass of ``MonadSTM``.\n\n* ``Control.Monad.STM.Class.orElse``
  is a top-level alias for\n  ``mplus``.\n\n* ``Control.Monad.STM.Class.retry`` is
  a top-level alias for\n  ``mzero``.\n\n\n1.1.2.1 (2017-06-07)\n--------------------\n\n*
  Git: :tag:`concurrency-1.1.2.1`\n* Hackage: :hackage:`concurrency-1.1.2.1`\n\nChanged\n~~~~~~~\n\n*
  ``Control.Concurrent.Classy.MVar.isEmptyMVar`` does not briefly\n  empties the ``MVar``,
  and does not block.\n\n\n1.1.2.0 (2017-04-05)\n--------------------\n\n* Git: :tag:`concurrency-1.1.2.0`\n*
  Hackage: :hackage:`concurrency-1.1.2.0`\n\nAdded\n~~~~~\n\n* Missing functions copied
  from :hackage:`async`:\n\n    * ``Control.Concurrent.Classy.Async.uninterruptibleCancel``\n
  \   * ``Control.Concurrent.Classy.Async.replicateConcurrently``\n    * ``Control.Concurrent.Classy.Async.concurrently_``\n
  \   * ``Control.Concurrent.Classy.Async.mapConcurrently_``\n    * ``Control.Concurrent.Classy.Async.forConcurrently_``\n
  \   * ``Control.Concurrent.Classy.Async.replicateConcurrently_``\n\n* ``Control.Concurrent.Classy.Async.Concurrently``
  has a ``Semigroup``\n  instance when built with :hackage:`base` >= 4.9.\n\n* ``Control.Concurrent.Classy.Async.Concurrently``
  has a ``Monoid``\n  instance.\n\n* ``Control.Monad.Conc.Class`` re-exports\n  ``Control.Monad.Catch.mask_``
  and ``uninterruptibleMask_``.\n\nChanged\n~~~~~~~\n\n* (:pull:`77`) To match changes
  in :hackage:`async`,\n  ``Control.Concurrent.Classy.Async.cancel`` and ``withAsync``
  block\n  until the ``Async`` is killed.\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n* Every
  definition, class, and instance now has a Haddock ``@since``\n  annotation.\n\n\n1.1.1.0
  - The Async Release (2017-03-04)\n----------------------------------------\n\n*
  Git: :tag:`concurrency-1.1.1.0`\n* Hackage: :hackage:`concurrency-1.1.1.0`\n\nAdded\n~~~~~\n\n*
  The ``Control.Concurrent.Classy.Async`` module.\n\n\n1.1.0.0 (2017-02-21)\n--------------------\n\n*
  Git: :tag:`concurrency-1.1.0.0`\n* Hackage: :hackage:`concurrency-1.1.0.0`\n\nAdded\n~~~~~\n\n*
  ``Control.Monad.Conc.Class.tryReadMVar``\n\nRemoved\n~~~~~~~\n\n* ``Control.Monad.Conc.Class._concMessage``\n\n\n1.0.0.0
  - The Initial Release (2016-09-10)\n------------------------------------------\n\n*
  Git: :tag:`concurrency-1.0.0.0`\n* Hackage: :hackage:`concurrency-1.0.0.0`\n\nAdded\n~~~~~\n\n*
  Everything.\n"
basic-deps:
  exceptions: ! '>=0.7 && <0.11'
  stm: ! '>=2.4 && <2.5'
  base: ! '>=4.8 && <5'
  monad-control: ! '>=1.0 && <1.1'
  array: ! '>=0.5 && <0.6'
  atomic-primops: ! '>=0.8 && <0.9'
  mtl: ! '>=2.2 && <2.3'
  transformers: ! '>=0.4 && <0.6'
all-versions:
- '1.0.0.0'
- '1.1.0.0'
- '1.1.1.0'
- '1.1.2.0'
- '1.1.2.1'
- '1.2.0.0'
- '1.2.1.0'
- '1.2.1.1'
- '1.2.1.2'
- '1.2.2.0'
- '1.2.3.0'
- '1.3.0.0'
- '1.4.0.0'
- '1.4.0.1'
- '1.4.0.2'
author: Michael Walker
latest: '1.4.0.2'
description-type: markdown
description: ! "concurrency\n===========\n\nA typeclass abstraction over much of Control.Concurrent
  (and some\nextras!). If you're looking for a general introduction to Haskell\nconcurrency,
  you should check out the excellent [Parallel and\nConcurrent Programming in Haskell][parconc],
  by Simon Marlow. If you\nare already familiar with concurrent Haskell, just change
  all the\nimports from Control.Concurrent.* to Control.Concurrent.Classy.* and\nfix
  the type errors.\n\nA brief list of supported functionality:\n\n- Threads: both
  unbound and bound.\n- Getting and setting capablities.\n- Yielding and delaying.\n-
  Mutable state: STM, `MVar`, and `IORef`.\n- Atomic compare-and-swap for `IORef`.\n-
  Exceptions.\n- All of the data structures in Control.Concurrent.* and\n  Control.Concurrent.STM.*
  have typeclass-abstracted equivalents.\n- A reimplementation of the [async][] package,
  providing a\n  higher-level interface over threads, allowing users to conveniently\n
  \ run `MonadConc` operations asynchronously and wait for their\n  results.\n\nThis
  is quite a rich set of functionality, although it is not\ncomplete. If there is
  something else you need, file an issue!\n\nThis used to be part of dejafu, but with
  the dejafu-0.4.0.0 release,\nit was split out into its own package.\n\nThe documentation
  of the latest developmental version is\n[available online][docs].\n\nWhy this and
  not something else?\n--------------------------------\n\n- **Why not base:** like
  lifted-base, concurrency uses typeclasses to\n  make function types more generic.
  This automatically eliminates\n  calls to `lift` in many cases, resulting in clearer
  and simpler\n  code.\n\n- **Why not lifted-base:** fundamentally, lifted-base is
  still using\n  actual threads and actual mutable variables. When using a\n  concurrency-specific
  typeclass, this isn't necessarily the case. The\n  dejafu library provides non-IO-based
  implementations to allow\n  testing concurrent programs.\n\n- **Why not IOSpec:**
  IOSpec provides many of the operations this\n  library does, however it uses a free
  monad to do so, which has extra\n  allocation overhead. Furthermore, it does not
  expose enough of the\n  internals in order to accurately test real-execution semantics,
  such\n  as relaxed memory.\n\nContributing\n------------\n\nBug reports, pull requests,
  and comments are very welcome!\n\nFeel free to contact me on GitHub, through IRC
  (#haskell on freenode),\nor email (mike@barrucadu.co.uk).\n\n[docs]:    https://docs.barrucadu.co.uk/concurrency/dejafu-0.4\n[async]:
  \  https://hackage.haskell.org/package/async\n[parconc]: http://chimera.labs.oreilly.com/books/1230000000929\n"
license-name: MIT
