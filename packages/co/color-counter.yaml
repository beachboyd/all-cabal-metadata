homepage: https://bitbucket.org/functionally/color-counter
changelog-type: ''
hash: 33f7c66af9126f530f3488b841ad5143c0c9b600eced9e4e8d6857aa32485d8a
test-bench-deps: {}
maintainer: Brian W Bush <consult@brianwbush.info>
synopsis: Count colors in images
changelog: ''
basic-deps:
  v4l2: -any
  split: -any
  base: ! '>=4.8 && <5'
  vector-space: -any
  data-default: -any
  friday: -any
  containers: -any
  cmdargs: -any
  colour: -any
  friday-devil: -any
  aeson: -any
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.2.1
- 0.1.2.2
author: Brian W Bush <consult@brianwbush.info>
latest: 0.1.2.2
description-type: markdown
description: ! "Counting colors in images\n=========================\n\nThis Haskell
  package contains functions for counting colors in images, either from a file or
  a camera feed.  The input image must in a standard format like JPEG or PNG.  The
  analyze function outputs the RGB and CIE-LAB values for each pixel, along with the
  color detected there.  The tally function outputs a histogram of the colors detected.
  \ The quantize function outputs an image where the pixels have been replaced by
  the colors detected there.\n\nA command-line tool for detecting and tallying colors
  is also provided.\n\nPlease report issues at <<https://bwbush.atlassian.net/projects/HCC/issues/>>.\n\n\nExample\n-------\n\nIn
  this example we use [blank colored dice](http://www.amazon.com/dp/B00BNWGVDO) on
  a gray felt background:\n\n![example input](data/sample.jpg)\n\nWe can process this
  file using the command-line tool:\n\n```bash\n  color-counter --analyze=analysis.tsv
  --tally=tallies.tsv --quantize=quantized.png data/sample.jpg\n```\n\nThe tally of
  pixels is as follows:\n\n| Color  | Pixels | Efficiency [pixels/cube] |\n|--------|--------|-------------------------:|\n|
  black  | 3222   |                   128.88 |\n| blue   | 3285   |                   131.40
  |\n| green  | 3972   |                   154.88 |\n| red    | 3738   |                   149.52
  |\n| yellow | 4156   |                   166.24 |\n\nOne can see that edge and shading
  effects cause the detection efficiency to vary by color.  The following image shows
  where colors are detected:\n\n![colors detected](data/R/quantized.png)\n\nSome simple
  R code can be used to look at the observed pixels in CIE-LAB space, and then compare
  that to the classification of those pixels:\n\n```R\nrequire(data.table)\nanalysis
  <- fread(\"analysis.tsv\")\nanalysis[, RGB:=rgb(Red/255,Green/255,Blue/255)]\npairs(analysis[,
  .(L, A, B)], col=analysis$RGB, pch=\".\", main=\"Observations\")\npairs(analysis[,
  .(L, A, B)], col=analysis$Color, pch=\".\", main=\"Classifications\")\n```\n\n![observations](data/R/observations.png)\n\n![classifications](data/R/classifications.png)\n\n\n\nCalibration\n-----------\n\nThe
  calibration parameters are stored in the `ColorConfiguration` data type of the `Vision.Image.Color.Detection`
  module.  It contains a default color and a list of `ColorSpecificiation` entries,
  one for each color to be detected.  All colors must be specified by their [SVG names](https://www.w3.org/TR/SVG/types.html#ColorKeywords).\n\nThe
  `ColorSpecification` entries define the color being detected and a half plane in
  [CIE-LAB color space](https://en.wikipedia.org/wiki/Lab_color_space#CIELAB).  The
  color is considered \"detected\" when it lies deeper than the specified threshold
  into the half plane defined by the specified vertex and direction.  (The threshold
  parameter is redundant mathematically with the vertex location, but it is convenient
  to have such a parameter to make it easy to make minor adjustments to calibration.)
  \ When an observation lies in the half planes for several colors, it is assigned
  to the one in whose half plane it is deepest.  We have found that calibration using
  this method of CIE-LAB half planes is robust under widely different lighting conditions.
  \ (Eventually, we will add automatic calibration--see <<https://bwbush.atlassian.net/projects/HCC/issues/HCC-1>>
  for the status of this.)\n\nBecause the detection efficiency varies somewhat by
  color, an efficiency parameter is included in `ColorSpecification`. For instance,
  this efficiency can be used to convert the output of the tallying function from
  pixels to colored cubes.\n\n\nSkeletal example code illustrating the tallying of
  colors in an image\n---------------------------------------------------------------------\n\n```haskell\nmain
  :: IO ()\nmain = do\n  input <- readRGB \"data/sample.jpg\"\n  print $ tally def
  input\n  let output = quantize def input\n  writeRBG True (Nothing, Nothing) \"analysis.png\"
  output\n```\n"
license-name: MIT
