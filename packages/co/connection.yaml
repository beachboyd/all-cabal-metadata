homepage: http://github.com/vincenthz/hs-connection
changelog-type: markdown
hash: 80671b805383147d41bc099a2b591442da5659d075b17f528c4729a39c99d6d8
test-bench-deps: {}
maintainer: Vincent Hanquez <vincent@snarc.org>
synopsis: Simple and easy network connections API
changelog: ! "## Version 0.2.1 (16 April 2014)\n\n- Fix a difference between TLSSettings
  and TLSSettingsSimple,\n  where connection would override the connection hostname
  and port in\n  the simple case, but leave the field as is with TLSSettings.\n  TLSSettings
  can now be used properly as template, and will be\n  correctly overriden at the
  identification level only.\n"
basic-deps:
  socks: ! '>=0.5.5'
  bytestring: -any
  x509-validation: ! '>=1.5'
  base: ! '>=3 && <5'
  data-default-class: -any
  tls: ! '>=1.3'
  network: ! '>=2.3'
  x509-store: ! '>=1.5'
  containers: -any
  x509: ! '>=1.5'
  x509-system: ! '>=1.5'
  byteable: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
author: Vincent Hanquez <vincent@snarc.org>
latest: 0.2.8
description-type: markdown
description: ! "haskell Connection library\n==========================\n\nSimple network
  library for all your connection need.\n\nFeatures:\n\n- Really simple to use\n-
  SSL/TLS\n- SOCKS\n\nUsage\n-----\n\nConnect to www.example.com on port 4567 (without
  socks or tls), then send a\nbyte, receive a single byte, print it, and close the
  connection:\n\n    import qualified Data.ByteString as B\n    import Network.Connection\n
  \   import Data.Default\n\n    main = do\n        ctx <- initConnectionContext\n
  \       con <- connectTo ctx $ ConnectionParams\n                                  {
  connectionHostname  = \"www.example.com\"\n                                  , connectionPort
  \     = 4567\n                                  , connectionUseSecure = Nothing\n
  \                                 , connectionUseSocks  = Nothing\n                                  }\n
  \       connectionPut con (B.singleton 0xa)\n        r <- connectionGet con 1\n
  \       putStrLn $ show r\n        connectionClose con\n\nUsing a socks proxy is
  easy, we just need replacing the connectionSocks\nparameter, for example connecting
  to the same host, but using a socks\nproxy at localhost:1080:\n\n    con <- connectTo
  ctx $ ConnectionParams\n                           { connectionHostname  = \"www.example.com\"\n
  \                          , connectionPort      = 4567\n                           ,
  connectionUseSecure = Nothing\n                           , connectionUseSocks  =
  Just $ SockSettingsSimple \"localhost\" 1080\n                           }\n\nConnecting
  to a SSL style socket is equally easy, and need to set the UseSecure fields in ConnectionParams:\n\n
  \   con <- connectTo ctx $ ConnectionParams\n                           { connectionHostname
  \ = \"www.example.com\"\n                           , connectionPort      = 4567\n
  \                          , connectionUseSecure = Just def\n                           ,
  connectionUseSocks  = Nothing\n                           }\n\nAnd finally, you
  can start TLS in the middle of an insecure connection. This is great for\nprotocol
  using STARTTLS (e.g. IMAP, SMTP):\n\n    {-# LANGUAGE OverloadedStrings #-}\n    import
  qualified Data.ByteString as B\n    import Data.ByteString.Char8 ()\n    import
  Network.Connection\n    import Data.Default\n\n    main = do\n        ctx <- initConnectionContext\n
  \       con <- connectTo ctx $ ConnectionParams\n                                  {
  connectionHostname  = \"www.example.com\"\n                                  , connectionPort
  \     = 4567\n                                  , connectionUseSecure = Nothing\n
  \                                 , connectionUseSocks  = Nothing\n                                  }\n
  \       -- talk to the other side with no TLS: says hello and starttls\n        connectionPut
  con \"HELLO\\n\"\n        connectionPut con \"STARTTLS\\n\"\n\n        -- switch
  to TLS\n        connectionSetSecure ctx con def\n\n        -- the connection is
  from now on using TLS, we can send secret for example\n        connectionPut con
  \"PASSWORD 123\\n\"\n        connectionClose con\n"
license-name: BSD-3-Clause
