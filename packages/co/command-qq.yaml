homepage: http://biegunka.github.io/command-qq/
changelog-type: markdown
hash: edf589b74014617a6bbebc532414a81db9e78348effe82af173711cf328e6d34
test-bench-deps:
  command-qq: -any
  base: ==4.*
  hspec: -any
  text: -any
  doctest: -any
  template-haskell: -any
maintainer: matvey.aksenov@gmail.com
synopsis: Quasiquoters for external commands
changelog: ! "0.3.0.0\n=======\n\n  * Added another way to avoid variable expansion
  (`\\\\#{foo}` is replaced with `#{foo}`)\n\n0.2.2.0\n=======\n\n  * Exported `substituteVars`\n\n0.2.1.0\n=======\n\n
  \ * Added a bunch of predefined quasiquoters to `System.Command.QQ.Predef`\n\n  *
  Added `Embed` instances for `Data.Text.Text` and `Data.Text.Lazy.Text`\n\n0.2.0.0\n=======\n\n
  \ * Added `sh_` quasiquoter to avoid type annotations for trivial quotes\n\n  *
  Moved `Eval` onto `Text` to speed I/O up.\n\n  * Added support for embedding literals
  and constructors with no arguments\n\n  * Mored `Embed` instances\n"
basic-deps:
  base: ==4.*
  text: -any
  process: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
author: Matvey Aksenov
latest: 0.3.0.0
description-type: markdown
description: ! "# command-qq\n[![Hackage](https://budueba.com/hackage/command-qq)](https://hackage.haskell.org/package/command-qq)\n[![Build
  Status](https://secure.travis-ci.org/biegunka/command-qq.png?branch=master)](https://travis-ci.org/biegunka/command-qq)\n[![Build
  Status](https://drone.io/github.com/biegunka/command-qq/status.png)](https://drone.io/github.com/biegunka/command-qq/latest)\n\n```\n>>>
  import System.Command.QQ\n>>> putStr =<< unlines . reverse . lines <$> [sh|cowsay
  \"Hello, I am command-qq!\"|]\n                ||     ||\n                ||----w
  |\n            (__)\\       )\\/\\\n         \\  (oo)\\_______\n        \\   ^__^\n
  -------------------------\n< Hello, I am command-qq! >\n _________________________\n```\n\n##
  Install\n\n```\n% cabal install command-qq\n```\n\n## Features\n\n### Quasiquotation
  syntax for external interpreters\n\n```\n>>> [sh_| echo hello world! |]\nhello world!\n```\n\n###
  Custom quasiquoters\n\n```\nghci = quoter $ callCommand \"ghc\" [\"-ignore-dot-ghci\",
  \"-e\"]\n```\n\nThen you can use `ghci` in ghci!\n\n```\n>>> [ghci| putStrLn \"hello
  world!\" |] :: IO ()\nhello world!\n```\n\nFor more examples, see [`System.Command.QQ.Predef`][0]\n\n###
  Haskell values embedding\n\nLet's define `Embed` instance for a custom data type:\n\n```haskell\ndata
  Bang = Bang\n\ninstance Embed Bang where\n  embed Bang = \"!\"\n```\n\nThen you
  can use variables of `Bang` type in quoted strings!\n\n```\n>>> [sh_| echo hello#{Bang}
  |]\nhello!\n>>> let bang = Bang in [sh_| echo hello#{bang} |]\nhello!\n```\n\nNote,
  `command-qq` does not support full Haskell in embeddings,\nonly variables/constructors
  names and literals\n\n### DSLs\n\nSee [`examples/CommandT.hs`][1]\n\n  [0]: https://github.com/biegunka/command-qq/blob/master/src/System/Command/QQ/Predef.hs\n
  \ [1]: https://github.com/biegunka/command-qq/blob/master/examples/CommandT.hs\n"
license-name: BSD-3-Clause
