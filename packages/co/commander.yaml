homepage: https://github.com/jsdw/hs-commander
changelog-type: ''
hash: 4124e055df9268285206940c4104272264122cddb3dc55b5346c0f997c0ff0f4
test-bench-deps:
  base: -any
  commander: -any
maintainer: me@unbui.lt
synopsis: pattern matching against string based commands
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  containers: ==0.5.*
  mtl: ! '>=2.2 && <2.3'
  commander: -any
  transformers: ! '>=0.4.2 && <0.5'
all-versions:
- 0.1.0.0
author: James Wilson
latest: 0.1.0.0
description-type: markdown
description: ! "# Commander: A Haskell Library for parsing commands\n\nThis library
  aims to make it super easy to create and use nested commands with flags in the form
  of an object that is easy to traverse and run custom actions on, and easy to extend
  with handling for safe casting to values from their input strings.\n\nAs an example
  of usage (take a look in the _examples_ folder for more) we can define commands
  as follows:\n\n```\nsomeCommands :: Command (IO ())\nsomeCommands = commands $ do\n\n
  \   command \"repeat\" $ do\n\n        help \"Repeat a string n times\"\n\n        run
  $\n            \\(Value str :: Value \"value to repeat\" String)\n             (Flag
  n :: Flag '[\"n\"] \"times to repeat\" Int) ->\n             sequence_ $ replicate
  n (putStrLn str)\n\n    command \"calculate\" $ do\n\n        help \"perform calculations\"\n\n
  \       command \"add\" $ do\n\n            help \"add two numbers\"\n\n            run
  $\n                \\(Value n1 :: Value \"number 1\" Int)\n                 (Value
  n2 :: Value \"number 2\" Int)\n                 (Flag verbose :: Flag '[\"v\", \"verbose\"]
  \"verbose mode\" Bool) ->\n                 if verbose\n                    then
  putStrLn $ (show n1) ++ \" + \" ++ (show n2) ++ \" = \" ++ (show $ n1 + n2)\n                    else
  putStrLn (show $ n1 + n2)\n\n        command \"multiply\" $ do\n\n            help
  \"multiply two numbers\"\n\n            run $\n                \\(Value n1 :: Value
  \"number 1\" Int)\n                 (Value n2 :: Value \"number 2\" Int) ->\n                 putStrLn
  $ (show n1) ++ \" x \" ++ (show n2) ++ \" = \" ++ (show $ n1 * n2)\n\n```\n\nAnd
  this leads to `someCommands` being a nested record of type `Command (IO ())` (where
  `IO ()` corresponds to the output from the functions you provide). This record can
  then be traversed and interacted with.\n\nThe novelty of this approach (compared
  to others I have seen, which is a non exhaustive list!) is the use of the functions
  input parameter types to cast-from-string and inject the appropriate values into
  the function safely at runtime, as well as to generate documentation. This means
  that we only declare the flags and values each command requires in one place, and
  do not execute any of the output unless all parameters are fully satisfied. These
  functions are then safely hidden away inside an existential type, and so we don't
  need any other type level magic or handling to work with the output.\n\n# Installation\n\n1.
  Add this repository to your stack.yaml file under the packages folder, so we end
  up with something that looks a bit like:\n\n    ```\n    packages:\n    - '.'\n
  \   - location:\n       git: https://github.com/jsdw/hs-commander\n       commit:
  abcdef123456789abcdef1234\n    ```\n\n2. run `stack install`.\n3. import `Commander`
  into your library.\n\nyou can run the example code by running `stack install :example1
  && example1` assuming that the directory stack copies binaries to is present in
  your `PATH`.\n\n# Documentation\n\nif you clone this repository locally somewhere,
  you can use `stack haddock` inside its folder in order to generate haddock documentation
  for it.\n\n# Disclaimer\n\nThis project is still under heavy development and could
  well change drastically!\n"
license-name: BSD-3-Clause
