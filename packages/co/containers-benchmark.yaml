homepage: http://git.auryn.cz/haskell/containers-benchmark/
changelog-type: text
hash: 7d14201ead67bbe4018956fbe2d2dd3b68a96db30e56953348b630bf07fbd26e
test-bench-deps: {}
maintainer: fox@ucw.cz
synopsis: Extensive benchmark suite for containers package.
changelog: ! '= Version 1.1.0.0, 2011-11-28 =

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Updates for containers 0.5.0.0.



  = Version 1.0.0.3, 2011-04-19 =

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Convert the repository to Git.



  = Version 1.0.0.2, 2010-12-06 =

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Add CHANGES file to the cabal file.



  = Version 1.0.0.1, 2010-12-06 =

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Fixed sed program in scripts/custom_containers.sh

  to work on Mac.



  = Version 1.0, 2010-10-31 =

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * Initial upload

'
basic-deps:
  bytestring: ! '>=0.9 && <1.0'
  base: ! '>=3 && <5'
  criterion: ! '>=0.5 && <0.6'
  containers: ! '>=0.5 && <0.6'
  ghc-prim: -any
  random: ! '>=1.0 && <1.1'
  deepseq: -any
all-versions:
- '1.0'
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.1.0.0
author: Milan Straka
latest: 1.1.0.0
description-type: text
description: ! "This package consists of a thorough benchmark for a containers package.\n\nQuick
  start\n===========\nTo benchmark the installed version of containers, just do\n\ncd
  scripts\nsh benchmark.sh installed-containers none\n\nRunning\n=======\n\nThe benchmark
  is executed using scripts in scripts directory. The main\nexecutable is benchmark.sh,
  which is given several arguments:\nbenchmark.sh\n  name_of_the_benchmark      --
  date is added to it\n  containers_repo            -- repo with containers, write
  'none' for\n                             --   system containers library\n  cabal_configure_opts
  \      -- optional flags passed to cabal configure\n\nThe benchmark.sh just calls
  other scripts:\n  compile.sh containers_repo cabal_configure_opts   -- builds the
  benchmark\n  run.sh name_of_the_benchmark                      -- run built benchmark\n
  \ collect.pl name_of_benchmark      -- collect all results in one .csv file\n\nOther
  scripts:\n  see.sh < name_of_csv              -- formats the csv file for viewing\n
  \ cmp.pl base_csv diff_csv          -- generate csv with comparison of two tests\n
  \ cmp.sh base_csv diff_csv          -- formats the result of cmp.pl for viewing\n\n
  \ ghc.sh containers_repo ghc_repo result_csv\n    -- Compiles the GHC repo with
  given containers and store results\n    -- the size of GHC and the memory allocation
  results of performance tests\n    -- are stored. These tests were once a regression,
  so we monitor them.\n    -- The GHC repo must be already booted and configured.\n\n\nWhich
  implementation to benchmark\n=================================\n\nThe benchmark
  can use system-installed containers package or any given repo.\nBecause the criterion
  package used for benchmarking is using containers\ninternally, we cannot safely
  expose the benchmarked implementation as\nData.Map and others. Therefore we benchmark
  Container.{Map,Set,IntMap,IntSet}.\nThe scripts/system_containers.sh and scripts/custom_containers.sh
  scripts\nchooses which implementation of containers is benchmarked.\n\n\nBenchmark
  design\n================\n\nVarious input data are provided by InputData/*\n\nVarious
  benchmark methods are provided by Benchmar/*\n\nAs the different combinations of
  input data and containers result in different\ntype signatures, we use CPP extension
  to put the input data and benchmark\nmethods into one source file and let GHC to
  type-check for each combination of\ninput data and container. This happens in Variants/*\n"
license-name: BSD-3-Clause
