homepage: https://github.com/0xd34df00d/coformat#readme
changelog-type: markdown
hash: b07ac9507aad0eb1ce0fd1cb396b432f33b7dbed64522c9dc12766255a4ae10c
test-bench-deps:
  generic-data: -any
  bytestring: -any
  async-pool: -any
  lens-aeson: -any
  optparse-generic: -any
  extra: -any
  xml-conduit: -any
  command-qq: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  async: -any
  dom-selector: -any
  html-conduit: -any
  fast-logger: -any
  containers: -any
  lens: -any
  coformat: -any
  interpolate: -any
  mtl: -any
  hashable: -any
  monad-logger: -any
  temporary: -any
  scientific: -any
  can-i-haz: -any
  aeson: -any
  yaml: -any
maintainer: 0xd34df00d@gmail.com
synopsis: Generate clang-format config based on some existing code base
changelog: |
  # Changelog for coformat

  ## v0.2.1.0

  * Allow the user to force-set formatter options.
  * Fixed discovering the default style options: need to pass user-forced and hardcoded options,
    otherwise clang-format might return nonsense.

  ## v0.2.0.0

  * Changed the scoring from Levenshtein distance to something more suitable for the task.
  * Allow resuming the optimization process from an existing style file.

  ## v0.1.0.0

  Initial release: it formats something and is even tolerant to the formatter's crashes.
basic-deps:
  generic-data: -any
  bytestring: -any
  async-pool: -any
  lens-aeson: -any
  optparse-generic: -any
  extra: -any
  xml-conduit: -any
  command-qq: -any
  base: ! '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  async: -any
  dom-selector: -any
  html-conduit: -any
  fast-logger: -any
  containers: -any
  lens: -any
  coformat: -any
  interpolate: -any
  mtl: -any
  hashable: -any
  monad-logger: -any
  temporary: -any
  scientific: -any
  can-i-haz: -any
  aeson: -any
  yaml: -any
all-versions:
- 0.2.1.0
author: Georg Rudoy
latest: 0.2.1.0
description-type: markdown
description: |
  # coformat

  Code style formatters take a style description and format a code base accordingly.

  *coformat* is _dual_ to them: it takes a code base and produces a code style description for it! This is achieved by a cunning combination of state-of-the-art type system features (`DataKinds`, `RankNTypes` and `GADTs`, among others) and modern machine learning techniques (there is a numerical optimization step after all).

  More seriously, this project only supports `clang-format` for now, but plugging other formatters (perhaps for other languages) should be trivial enough, provided there is an easy way to get the list of available options and their possible values.
license-name: BSD-3-Clause
