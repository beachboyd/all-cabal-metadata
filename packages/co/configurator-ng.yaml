homepage: http://github.com/lpsmith/configurator-ng
changelog-type: markdown
hash: 6d005ec0923c67edd1f849199bc9984b89d33cc4852658a6a93785c19d29a0a1
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  base: -any
  text: -any
  filepath: -any
  HUnit: -any
  configurator-ng: -any
  directory: -any
maintainer: Leon P Smith <leon@melding-monads.com>
synopsis: The next generation of configuration management
changelog: ! "### Version 0.0.0.1 (2016-10-30)\n\n  * Documentation fixes: significant
  portions of the haddocks failed\n    to render.\n"
basic-deps:
  bytestring: -any
  fail: -any
  base: ==4.*
  unordered-containers: -any
  text: ! '>=0.11.1.0'
  critbit: -any
  unix-compat: -any
  dlist: -any
  hashable: -any
  attoparsec: ! '>=0.11.3.0'
  scientific: -any
  data-ordlist: -any
  directory: -any
all-versions:
- 0.0.0.0
- 0.0.0.1
author: Bryan O'Sullivan, Leon P Smith
latest: 0.0.0.1
description-type: markdown
description: ! "# [configurator-ng](https://github.com/lpsmith/configurator-ng)\n##What
  is this?\n\nThis is a massively breaking revision of the application interface of\n[configurator].
  \  The configuration file syntax is backward compatible,\nand mostly forward compatible
  as well.   This fork is not (yet?) intended\nfor widespread public consumption.
  \ Rather, this repo is being used as\na stopgap measure in some of my own projects
  as well as a playground\nand laboratory for a new configurator-like package that
  may be\nreleased sometime in the future.\n\n## Manifesto\n\n(Note that this section
  is mildly aspirational at a few points,\n and/or contains errors.)\n\nThe application
  interface of `configurator` has numerous problems:\n  * it makes it easy to introduce
  race conditions\n  * it makes it difficult to write an application that is relatively\n
  \   robust to misconfiguration errors\n  * does not scale well to moderately complex
  configuration scenarios\n  * the configuration change notifications are particularly
  difficult\n    to use beyond the most trivial of use cases.\n\nThe aim of `configurator-ng`
  is to improve these issues,  with the\ninitial efforts focused on the first three.
  \  I hope to make more\ncorrect solutions easier,  and less correct solutions harder,
  \ all\nwrapped up in a more expressive interface.\n\n### Race conditions\n\nThe
  interface of `configurator` basically is:\n\n    data Config = Config (IORef (HashMap
  Text Value))\n\n    lookup :: Configured a => Config -> Text -> IO (Maybe a)\n\nThe
  `IORef` is there to support configuration file reloading,  which\nis often done
  automatically.  So this results in the race condition:\n\n    do\n      key0 <-
  lookup config \"key0\"\n      reload config  {- in another thread -}\n      key1
  <- lookup config \"key1\"\n      return (key0, key1)\n\nThus,  we have taken `key0`
  and `key1` from two versions of the\nconfiguration files,  with a overall result
  that is not necessarily\nconsistent with either version.\n\nThere is a way to solve
  this race condition\\*, though it is by no\nmeans convenient and it provides even
  less support for turning the\nresult into configuration parameters:\n\n    getMap
  :: Config -> IO (HashMap Text Value)\n\nThis obtains a consistent\\* snapshot of
  the configuration,  from which\nyou can pull out multiple values.   But in addition
  to being\nless obvious and inconvenient,  the fact that the `HashMap` returned\nis
  not an abstract type makes means that changing the representation\nbreaks client
  code that uses this approach.\n\n`configurator-ng` makes the latter mode of use
  much more convenient by\nintroducing `ConfigParser`s,  a applicative/monadic high-level
  parsing\ninterface to read configuration info from a single snapshot.  See the\nmodule
  `Data.Configurator.Parser`.  The basic ideas behind the revised\ninterface is as
  follows:\n\n    data ConfigCache = ConfigCache (IORef Config)\n\n    readConfig
  :: ConfigCache -> IO Config\n\n    runParser :: ConfigParser m => m a -> Config
  -> (Maybe a, [ConfigError])\n\n(Here,  `ConfigError` could be an error condition,
  or it might be more\nanalogous to a warning or informational message;  thus a parser
  can\nreturn a result *and* some `ConfigError`s.)\n\nFinally,  we could define a
  `ConfigParser` to read from key1 and key2\nby writing:\n\n    getKeys :: ConfigParser
  m => m (Text, Int)\n    getKeys = (,) <$> key \"key0\" <*> key \"key1\"\n\n(\\*It's
  important to point out that `getMap` only avoids introducing\nadditional race conditions;
  \ commonly used filesystems are racey\nsoftware artifacts,  so this is only consistent
  relative to filesystem\nreads.  For a complete solution, one would have to take
  care in the\nprecise filesystem calls used to manipulate the configuration file(s).\nMost
  popular text editors should be ok as far as the consistency of a\nsingle file, consistent
  reads of multiple files is trickier.)\n\n### Configuration validation\n\nAnother
  advantage of the `ConfigParser` interface is that it makes it\neasier and more convenient
  to validate a (sub-)configuration as an\nentirety,  and thus also make more intelligent
  decisions about what to do\nin cases of misconfigurations.  For example, one might
  want to continue\nrunning on the last known good configuration,  and raise a big
  red\nflag in a monitoring solution.   The goal is to provide mechanism,\nnot policy.\n\n###
  Greater Expressive Power\n\nConsider the following use case:   you have an event
  processor,  that\nwatches several named sources for events.   You might like your\nconfiguration
  file to look something like this:\n\n~~~\nevent-sources {\n    amazon-cloud {\n
  \       postgres {\n            host    = \"cloudevents.mydomain.com\"\n            port
  \   = 5433\n            dbname  = \"eventdb\"\n            sslmode = \"verify-full\"\n
  \           sslcert = \"${HOME}/credentials/pgclient.crt\"\n            sslkey  =
  \"${HOME}/credentials/pgclient.key\"\n        }\n        heartbeat-interval = 15\n
  \       heartbeat-timeout  = 15\n    }\n    chicago-service-center {\n        postgres
  {\n            host    = \"pgevents.customerdomain.com\"\n            port    =
  5433\n            dbname  = \"eventdb\"\n            sslmode = \"verify-full\"\n
  \           sslcert = \"${HOME}/credentials/pgclient.crt\"\n            sslkey  =
  \"${HOME}/credentials/pgclient.key\"\n        }\n        heartbeat-interval = 15\n
  \       heartbeat-timeout  = 15\n    }\n}\n~~~\n\nNow, `amazon-cloud` and `chicago-service-center`
  are names of the source\nuseful for whatever purposes (logging, API endpoints, etc),
  that the\nevent processor doesn't know about in advance.  Since `configurator`\nis
  tied down to `HashMap`,  the data structure offers no support for\nefficiently discovering
  these names.  In order to fix this,\n`configurator-ng` moved to [`critbit`][critbit].
  which allows us to\nefficiently iterate over these keys (in alphabetical order).
  \ So\n`configurator-ng` offers the following operator:\n\n    subgroups :: ConfigParser
  m => Text -> m [Text]\n\n`subgroups` returns the non-empty value groupings of it's
  argument,\nso for example when evaluated in the context of the configuration above:\n\n
  \   subgroups \"\"              ==> [ \"event-sources\" ]\n\n    subgroups \"event-sources\"
  ==> [ \"event-sources.amazon-cloud\"\n                                  , \"event-sources.chicago-service-center\"
  ]\n\nAnother issue is that there's a lot of redundancy here,  so maybe we'd like
  to\nrefactor the configuration file into something like this:\n\n~~~\nevent-sources
  {\n    amazon-cloud {\n        postgres.host = \"cloudevents.mydomain.com\"\n    }\n
  \   chicago-service-center {\n        postgres.host = \"pgevents.customerdomain.com\"\n
  \   }\n    default {\n        postgres {\n            port    = 5433\n            dbname
  \ = \"eventdb\"\n            sslmode = \"verify-full\"\n            sslcert = \"${HOME}/credentials/pgclient.crt\"\n
  \           sslkey  = \"${HOME}/credentials/pgclient.key\"\n        }\n        heartbeat-interval
  = 15\n        heartbeat-timeout  = 15\n    }\n}\n~~~\n\nSo now the problem is that
  we want to turn this configuration into a\nlist of `EventSource`s:\n\n~~~\ndata
  EventSource = EventSource {\n    name              :: !Text,\n    libpqConnParams
  \  :: [(Text,Value)],\n    heartbeatInterval :: !Micro,\n    heartbeatTimeout  ::
  !Micro,\n  }\n~~~\n\nNow, even ignoring the issue of the names mentioned above,
  \ handling\nthis sort of customizable defaulting in `configurator` would be rather\npainful.
  \  But it's actually quite easy with `configurator-ng`:\n\n~~~\n{-# LANGUAGE ApplicativeDo,
  RecordWildCards #-}\n\nmapA :: Applicative f => (a -> f b) -> [a] -> f [b]\nmapA
  f = foldr (liftA2 (:)) (pure []) . map f\n\neventSources :: ConfigParserA [EventSource]\neventSources
  = do\n    localConfig (subconfig \"event-sources\") $ do\n        mapA eventSource
  . filter (/= \"default\") <$> subgroups \"\"\n\neventSource :: Text -> ConfigParserA
  EventSource\neventSource name = do\n    localConfig (union (subconfig name     )\n
  \                      (subconfig \"default\")) $ do\n        libpqConnParams   <-
  localConfig (subconfig \"postgres\") (subassocs \"\")\n        heartbeatInterval
  <- key \"heartbeat-interval\"\n        heartbeatTimeout  <- key \"heartbeat-timeout\"\n
  \       pure $! EventSource{..}\n~~~\n\nThis example uses the `ConfigParserA` variant
  of `ConfigParser`, so\nthat the parser continues to run after encountering an error
  in order\nto generate more error messages.   It also uses `localConfig` operator\nto
  run a subparser in a  different configuration context.   There are\na few operators
  for modifying the configuration context:\n\n~~~\nlocalConfig :: ConfigParser m =>
  ConfigTransform -> m a -> m a\n\ndata ConfigTransform  -- Conceptually, type ConfigTransform
  = Config -> Config\n\ninstance Monoid ConfigTransform\n   -- mempty  is identity
  transformation\n   -- mappend is composition of transformations\n\n-- | Left-biased
  union of two configurations\nunion :: ConfigTransform -> ConfigTransform -> ConfigTransform\n\n--
  | Restrict a configuration to a given group,  and remove that group\n--   prefix
  from all key names.\nsubconfig :: Text -> ConfigTransform\n\n-- | Add a group name
  as a prefix to all key names\nsuperconfig :: Text -> ConfigTransform\n~~~\n\nNote
  that these operators are implemented \"symbolically\",  so that\nthey run in sub-linear
  (Possibly `O(1)`?) time.  Instead,  the cost of\nthese are paid on each `(key,value)`
  lookup.\n\n### Syntactic extensions\n\nDatum comments have been implemented, not
  unlike Scheme and Clojure.\nThe `configurator-ng` parser will ignore any binding
  preceded by a `#;`\ntoken;  the binding following `#;` must be begin on the same
  line, and\nmust be syntactically correct,  but will otherwise be ignored.\n\nThis
  is a significant convenience for use cases like the event source\nexample above:
  \ for example one could disable `chicago-service-center`\nby putting `#;` before
  the name.   One can also use this as a slightly\nrestricted means of block comments,
  \ by writing `#; comment {` (the\nname doesn't matter) to begin the block comment,
  \ and a matching `}`\nto end the comment.  Of course,  the intervening bindings
  must be\nsyntactically correct,  so this isn't an exact substitute for block\ncomments.\n\nAlso,
  `configurator-ng` also allows group names to be inlined into other\ngroup and key
  names, separated by a dot character.  For example, these\nconfiguration snippets
  are all equivalent:\n\n~~~\nfoo {\n  bar {\n    x = \"Hello\"\n    y = \"World\"\n
  \ }\n}\n\n\nfoo.bar {\n  x = \"Hello\"\n  y = \"World\"\n}\n\n\nfoo {\n  bar.x =
  \"Hello\"\n  bar.y = \"World\"\n}\n\n\nfoo.bar.x = \"Hello\"\nfoo.bar.y = \"World\"\n~~~~\n\nWith
  the original `configurator`, only the first snippet is\nsyntactically legal.\n\nFinally,
  `configurator-ng` supports scientific notation for numerical\nvalues,  via the\n[`scientific`](https://hackage.haskell.org/package/scientific)\npackage,
  \ which corresponds closely to typical floating point syntax.\n\n### Configuration
  Change Subscriptions\n\n`Configurator`'s change notification system is also painful
  to\nuse except in the most trivial of cases,  not least because\nthe callback is
  called for a single changed `(key,value)` pair at a\ntime.  Determining how that
  impacts a given configuration record (like\n`EventSource` above) is up to the user.\n\nSoon,
  \ configurator-ng will offer something along the lines of the\nfollowing function:\n\n~~~\nsubscribe
  :: ConfigParser m => ConfigCache -> m a -> (a -> IO ()) -> IO ()\n~~~\n\nWhen the
  configuration files are reloaded,  every subscribed\n`ConfigParser` is rerun,  and
  the result is passed on to the\ncallback.  Now, of course,  many callbacks won't
  want to be called\nunless their configuration actually changes.   However,  this
  is\nactually a reasonable thing to punt to the callback,  because\nwe can write
  a generic callback wrapper to handle this issue:\n\n~~~\ndebounce :: (a -> a ->
  Bool) -> (a -> IO ()) -> IO (a -> IO ())\ndebounce notEq callback = do\n    last_seen
  <- newIORef Nothing\n    return $ \\new -> do\n        m_old <- readIORef last_seen\n
  \       if   case m_old of\n               Nothing  -> True\n               Just
  old -> notEq old new\n        then do\n          writeIORef last_seen (Just new)\n
  \         callback new\n        else do\n          return ()\n~~~\n\n#### Optimizing
  subscribe\n\nIt would be more efficient to run only those `ConfigParser`s that have\nthe
  possibility of changing.  If we design the `configurator-ng`\ninterface carefully,
  \ we can determine all the keys that a parser\ndepends on.  We can then use this
  information to rerun only those\nparsers whose result might possibly change.  (Though,
  \ `debounce` could\nstill be useful,  as `ConfigParser`s aren't guaranteed to be
  1-1\nfunctions.)\n\nHowever,  once we have dependency tracking that works,  there
  are\nfurther applications this could enable,  such as:\n   * providing tools to
  sysadmins to understand which parts of\n     the configuration files affect which
  parts of the system.\n   * finding values in configuration files that have no effect
  at all\n   * more speculatively,  using this information to generate sample\n     configuration
  files.\n\n [configurator]: https://hackage.haskell.org/package/configurator\n [critbit]:
  https://hackage.haskell.org/package/critbit\n"
license-name: BSD-3-Clause
