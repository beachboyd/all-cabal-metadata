homepage: https://github.com/mtesseract/conduit-throttle#readme
changelog-type: ''
hash: d5350283dbb7d647048537ca2d91a9aeae920017d4597663114e38ca633a1f7b
test-bench-deps:
  conduit-combinators: -any
  test-framework-hunit: -any
  test-framework: -any
  unliftio: -any
  stm: -any
  base: ! '>=4.7 && <5'
  monad-control: -any
  conduit-throttle: -any
  async: -any
  conduit: -any
  HUnit: -any
  stm-conduit: -any
  conduit-extra: -any
  unliftio-core: -any
  throttle-io-stream: -any
  stm-chans: -any
  resourcet: -any
maintainer: mtesseract@silverratio.net
synopsis: Throttle Conduit Producers
changelog: ''
basic-deps:
  conduit-combinators: -any
  unliftio: -any
  stm: -any
  base: ! '>=4.7 && <5'
  monad-control: -any
  async: -any
  conduit: -any
  conduit-extra: -any
  unliftio-core: -any
  throttle-io-stream: -any
  stm-chans: -any
  resourcet: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
author: Moritz Schulte
latest: '0.3.0.0'
description-type: markdown
description: ! "# conduit-throttle [![Hackage version](https://img.shields.io/hackage/v/conduit-throttle.svg?label=Hackage)](https://hackage.haskell.org/package/conduit-throttle)
  [![Stackage version](https://www.stackage.org/package/conduit-throttle/badge/lts?label=Stackage)](https://www.stackage.org/package/conduit-throttle)
  [![Build Status](https://travis-ci.org/mtesseract/conduit-throttle.svg?branch=master)](https://travis-ci.org/mtesseract/conduit-throttle)\n\n###
  About\n\nThis is `conduit-throttle`, a compact Haskell package providing\nconfigurable
  throttling support for Conduit. It is built on top of the\npackages `throttle-io-stream`
  and `unliftio`.\n\nThe API (`Data.Conduit.Throttle`) is designed for being imported\nqualified,
  which is why the exported functions and values are not\nprefixed by the package
  name or something similar.\n\nThe core function exported by this package is the
  following:\n\n```haskell\nthrottleProducer :: (MonadUnliftIO m, MonadResource m)\n
  \                => Conf a\n                 -> Producer m a\n                 ->
  Producer m a\n```\n\nThat is, given a configuration and a Conduit `Producer`, create
  and\nreturn a new Conduit `Producer`, which yields the same stream of\nvalues like
  the provided one but throttled according to the provided\nthrottling configuration.\n\nA
  throttling configuration is created using `newConf` and then\nconfigured using the
  functions `setMeasure`, `setMaxThroughput`,\n`setBufferSize` and others.\n\nPrimarily,
  the throughput is defined by the provided measure function\nand the configured maximum
  throughput. A measure function is a\nfunction which defines how \"big\" a Conduit
  element `a` is. In other\nwords, it is a function of type `a -> Double`. For instance,
  it could\nsimply calculate the length of some deserialized value in bytes or it\ncould
  simply be the constant function `const 1` in case it is desired\nto throttle the
  number of elements a Conduit producer produces. The\nmaximum throughput together
  with the measure function then defines the\nmaximum throughput to produce (of course
  it can be less, if the\noriginal producer provides data with a smaller throughput).
  The\nthroughput is considered with respect to a base time interval, which\ncan be
  changed using `setInterval`, by default it is `1000` (ms).\n\nThe underlying package
  `throttle-io-stream` uses exponentially\nweighted moving averages for smoothing
  the actual throughput changes.\n\n### Example\n\n```haskell\nimport qualified Data.Conduit.Throttle
  as ConduitThrottle\n\nsimpleProducerThrottling :: IO ()\nsimpleProducerThrottling
  = do\n  let conf = ConduitThrottle.newConf\n             & ConduitThrottle.setInterval
  1000\n             & ConduitThrottle.setMaxThroughput 1\n  runResourceT . runConduit
  $\n    ConduitThrottle.throttleProducer conf (sourceList [1..5]) .| printC\n```\n"
license-name: BSD3
