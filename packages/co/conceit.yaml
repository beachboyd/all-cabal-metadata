homepage: ''
changelog-type: text
hash: e9cd1ac8aeb7f1a76b36b8ab197d99d6bdb999d7eef1c28ebe3636e74671bb16
test-bench-deps: {}
maintainer: diaz_carrete@yahoo.com
synopsis: Concurrent actions that may fail with a value.
changelog: ! "0.4.0.0\n=======\n    - Removed Monad, MonadThrow, MonadCatch instances.\n
  \   - Added Semigroup instance.\n    - Removed exception and mtl dependencies.\n\n0.3.1.0\n=======\n
  \   - Made internal function \"conceit'\" public.\n\n0.3.0.0\n=======\n    - Incorporate
  the solution to issue #27 from the async package\n      https://github.com/simonmar/async/issues/27
  \n      This changes the order of cancellation of threads in case\n      of an asynchronous
  exception.\n\n0.2.2.1\n=======\n    - Qualified Alt to make it compile with GHC
  7.10.\n\n0.2.2.0\n=======\n    - Bumped void and exceptions dependencies.\n\n0.2.1.0\n=======\n
  \   - Now >> behaves differently from the concurrent *>, and sequences its\n      arguments.
  It makes more sense for the monad. This is what Haxl does as\n      well. \n    \n0.2.0.0\n=======\n
  \   - Internal changes that remove the necessity for (Show e,Typeable e)\n      constraints.\n
  \   - Removed async dependency.\n    - Many new instances for Conceit.\n\n0.1.1.0\n=======\n\n
  \   - Added _Conceit.\n"
basic-deps:
  semigroupoids: ! '>=4'
  void: ! '>=0.6'
  base: ! '>=4.4 && <5'
  semigroups: -any
  bifunctors: ! '>=4.1'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
author: Daniel DÃ­az Carrete
latest: 0.4.0.0
description-type: markdown
description: ! 'conceit

  =======


  A version of the

  [Concurrently](http://hackage.haskell.org/package/async-2.0.2/docs/Control-Concurrent-Async.html#t:Concurrently)

  Applicative from Simon Marlow''s

  [async](http://hackage.haskell.org/package/async) package, with the difference

  that the concurrent computation stops if any of the actions returns a Left

  value, not only in the case of exceptions.


  The internals have been copied wholesale from Concurrently, with modifications

  to support the new behaviour.


  Includes a useful Bifunctor instance.

'
license-name: BSD-3-Clause
