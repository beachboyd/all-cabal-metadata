homepage: https://github.com/Fuuzetsu/concurrent-resource-map#readme
changelog-type: markdown
hash: 0379841283e1fc69430edf972f020a94d18e079526c9c30ba9bbb401408b106f
test-bench-deps:
  stm: -any
  base: ! '>=4.8 && <5'
  concurrent-resource-map: -any
  random: -any
maintainer: fuuzetsu@fuuzetsu.co.uk
synopsis: Concurrent resource map
changelog: |
  # Changelog for concurrent-resource-map

  ## Unreleased changes
basic-deps:
  base: -any
  containers: -any
all-versions:
- 0.1.0.0
author: Mateusz Kowalczyk
latest: 0.1.0.0
description-type: markdown
description: |
  # concurrent-resource-map

  User-counted resource map with automatic resource collection, aimed to
  be used in concurrent setting.

  Consider having some sort of resource that you need properly
  initialised and cleaned up but only once and only for as long as there
  are interested users (threads). Further, instead of only a single
  resource, you want a collection of such resources, keyed on some
  value.

  This package implements a simple bracket-based scheme that manipulates
  a resource map by counting number of initalisations and clean-ups: if
  it detects that the cleanup is from the last user, it removes the
  resource from the map all together. See the code/hackage for
  documentation.
license-name: BSD-3-Clause
