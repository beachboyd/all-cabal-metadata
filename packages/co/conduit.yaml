homepage: http://github.com/snoyberg/conduit
changelog-type: markdown
hash: f440fed499be302b8b373de44337c5cae92c521aa1d1abd9e11911431b8b4d3b
test-bench-deps:
  exceptions: ! '>=0.6'
  bytestring: -any
  mwc-random: -any
  unliftio: ! '>=0.2.4.0'
  split: ! '>=0.2.0.0'
  base: -any
  hspec: ! '>=1.3'
  text: -any
  kan-extensions: -any
  filepath: -any
  conduit: -any
  gauge: -any
  containers: -any
  silently: -any
  mtl: -any
  transformers: -any
  deepseq: -any
  QuickCheck: ! '>=2.7'
  resourcet: -any
  mono-traversable: -any
  safe: -any
  vector: -any
  directory: -any
maintainer: michael@snoyman.com
synopsis: Streaming data processing library.
changelog: ! "## 1.3.1\n\n* Add `MonadFail` instance for `ConduitT`.\n\n## 1.3.0.3\n\n*
  Improve fusion framework rewrite rules\n\n## 1.3.0.2\n\n* Replace `ReadMode` with
  `WriteMode` in `withSinkFile`\n\n## 1.3.0.1\n\n* Test suite compatibility with GHC
  8.4.1 [#358](https://github.com/snoyberg/conduit/issues/358)\n\n## 1.3.0\n\n* Drop
  monad-control and exceptions in favor of unliftio\n* Drop mmorph dependency\n* Deprecate
  old type synonyms and operators\n* Drop finalizers from the library entirely\n    *
  Much simpler\n    * Less guarantees about prompt finalization\n    * No more `yieldOr`,
  `addCleanup`\n    * Replace the `Resumable` types with `SealedConduitT`\n* Add the
  `Conduit` and `Data.Conduit.Combinators` modules, stolen from\n  `conduit-combinators`\n\n##
  1.2.13\n\n* Add `Semigroup` instances [#345](https://github.com/snoyberg/conduit/pull/345)\n\n##
  1.2.12.1\n\n* Fix `pass` in `ConduitM` `MonadWriter` instance\n\n## 1.2.12\n\n*
  Add `exceptC`, `runExceptC` and `catchExceptC` to `Data.Conduit.Lift`\n\n## 1.2.11\n\n*
  Add `unfoldEither` and `unfoldEitherM` to `Data.Conduit.List`\n\n## 1.2.10\n\n*
  Add `PrimMonad` instances for `ConduitM` and `Pipe`\n  [#306](https://github.com/snoyberg/conduit/pull/306)\n\n##
  1.2.9.1\n\n* Ensure downstream and inner sink receive same inputs in\n  `passthroughSink`\n
  \ [#304](https://github.com/snoyberg/conduit/issues/304)\n\n## 1.2.9\n\n* `chunksOf`
  [#296](https://github.com/snoyberg/conduit/pull/296)\n\n## 1.2.8\n\n* Implement\n
  \ [the reskinning idea](http://www.snoyman.com/blog/2016/09/proposed-conduit-reskin):\n
  \   * `.|`\n    * `runConduitPure`\n    * `runConduitRes`\n\n## 1.2.7\n\n* Expose
  yieldM for ConduitM [#270](https://github.com/snoyberg/conduit/pull/270)\n\n## 1.2.6.6\n\n*
  Fix test suite compilation on older GHCs\n\n## 1.2.6.5\n\n* In zipConduitApp, left
  bias not respected mixing monadic and non-monadic conduits [#263](https://github.com/snoyberg/conduit/pull/263)\n\n##
  1.2.6.4\n\n* Fix benchmark by adding a type signature\n\n## 1.2.6.3\n\n* Doc updates\n\n##
  1.2.6.2\n\n* resourcet cannot be built with GHC 8 [#242](https://github.com/snoyberg/conduit/issues/242)\n*
  Remove upper bound on transformers [#253](https://github.com/snoyberg/conduit/issues/253)\n\n##
  1.2.6\n\n* `sourceToList`\n* Canonicalise Monad instances [#237](https://github.com/snoyberg/conduit/pull/237)\n\n##
  1.2.5\n\n* mapAccum and mapAccumM should be strict in their state [#218](https://github.com/snoyberg/conduit/issues/218)\n\n##
  1.2.4.1\n\n* Some documentation improvements\n\n## 1.2.4\n\n* [fuseBothMaybe](https://github.com/snoyberg/conduit/issues/199)\n\n__1.2.3__
  Expose `connect` and `fuse` as synonyms for `$$` and `=$=`, respectively.\n\n__1.2.2__
  Lots more stream fusion.\n\n__1.2__ Two performance optimizations added. (1) A stream
  fusion framework. This is a non-breaking change. (2) Codensity transform applied
  to the `ConduitM` datatype. This only affects users importing the `.Internal` module.
  Both changes are thoroughly described in the following to blog posts: [Speeding
  up conduit](https://www.fpcomplete.com/blog/2014/08/iap-speeding-up-conduit), and
  [conduit stream fusion](https://www.fpcomplete.com/blog/2014/08/conduit-stream-fusion).\n\n__1.1__
  Refactoring into conduit and conduit-extra packages. Core functionality is now in
  conduit, whereas most common helper modules (including Text, Binary, Zlib, etc)
  are in conduit-extra. To upgrade to this version, there should only be import list
  and conduit file changes necessary.\n\n__1.0__ Simplified the user-facing interface
  back to the Source, Sink, and Conduit types, with Producer and Consumer for generic
  code. Error messages have been simplified, and optional leftovers and upstream terminators
  have been removed from the external API. Some long-deprecated functions were finally
  removed.\n\n__0.5__ The internals of the package are now separated to the .Internal
  module, leaving only the higher-level interface in the advertised API. Internally,
  switched to a `Leftover` constructor and slightly tweaked the finalization semantics.\n\n__0.4__
  Inspired by the design of the pipes package: we now have a single unified type underlying
  `Source`, `Sink`, and `Conduit`. This type is named `Pipe`. There are type synonyms
  provided for the other three types. Additionally, `BufferedSource` is no longer
  provided. Instead, the connect-and-resume operator, `$$+`, can be used for the same
  purpose.\n\n__0.3__ ResourceT has been greatly simplified, specialized for IO, and
  moved into a separate package. Instead of hard-coding ResourceT into the conduit
  datatypes, they can now live around any monad. The Conduit datatype has been enhanced
  to better allow generation of streaming output. The SourceResult, SinkResult, and
  ConduitResult datatypes have been removed entirely.\n\n__0.2__ Instead of storing
  state in mutable variables, we now use CPS. A `Source` returns the next `Source`,
  and likewise for `Sink`s and `Conduit`s. Not only does this take better advantage
  of GHC\\'s optimizations (about a 20% speedup), but it allows some operations to
  have a reduction in algorithmic complexity from exponential to linear. This also
  allowed us to remove the `Prepared` set of types. Also, the `State` functions (e.g.,
  `sinkState`) use better constructors for return types, avoiding the need for a dummy
  state on completion.\n\n__0.1__ `BufferedSource` is now an abstract type, and has
  a much more efficient internal representation. The result was a 41% speedup on microbenchmarks
  (note: do not expect speedups anywhere near that in real usage). In general, we
  are moving towards `BufferedSource` being a specific tool used internally as needed,
  but using `Source` for all external APIs.\n\n__0.0__ Initial release.\n"
basic-deps:
  exceptions: -any
  bytestring: -any
  unix: -any
  base: ! '>=4.9 && <5'
  text: -any
  filepath: -any
  unliftio-core: -any
  mtl: -any
  transformers: ! '>=0.4'
  resourcet: ! '>=1.2 && <1.3'
  mono-traversable: ! '>=1.0.7'
  primitive: -any
  vector: -any
  directory: -any
all-versions:
- '0.0.0'
- '0.0.0.1'
- '0.0.0.2'
- '0.0.1'
- '0.0.1.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.1.0'
- '0.1.1'
- '0.1.1.1'
- '0.2.0'
- '0.2.1'
- '0.2.2'
- '0.3.0'
- '0.4.0'
- '0.4.0.1'
- '0.4.1'
- '0.4.1.1'
- '0.4.2'
- '0.5.0'
- '0.5.1'
- '0.5.2'
- '0.5.2.1'
- '0.5.2.2'
- '0.5.2.3'
- '0.5.2.4'
- '0.5.2.5'
- '0.5.2.6'
- '0.5.2.7'
- '0.5.3'
- '0.5.4'
- '0.5.4.1'
- '0.5.4.2'
- '0.5.5'
- '0.5.6'
- '1.0.0'
- '1.0.0.1'
- '1.0.0.2'
- '1.0.1'
- '1.0.2'
- '1.0.3'
- '1.0.4'
- '1.0.4.1'
- '1.0.4.2'
- '1.0.5'
- '1.0.5.1'
- '1.0.6'
- '1.0.7'
- '1.0.7.1'
- '1.0.7.2'
- '1.0.7.3'
- '1.0.7.4'
- '1.0.8'
- '1.0.9'
- '1.0.9.1'
- '1.0.9.2'
- '1.0.9.3'
- '1.0.10'
- '1.0.10.1'
- '1.0.11'
- '1.0.11.1'
- '1.0.12'
- '1.0.13'
- '1.0.13.1'
- '1.0.14'
- '1.0.15'
- '1.0.15.1'
- '1.0.16'
- '1.0.17'
- '1.0.17.1'
- '1.1.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.1'
- '1.1.1.1'
- '1.1.2'
- '1.1.2.1'
- '1.1.3'
- '1.1.4'
- '1.1.5'
- '1.1.6'
- '1.1.7'
- '1.2.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.1'
- '1.2.2'
- '1.2.2.1'
- '1.2.2.2'
- '1.2.3'
- '1.2.3.1'
- '1.2.4'
- '1.2.4.1'
- '1.2.4.2'
- '1.2.4.3'
- '1.2.5'
- '1.2.5.1'
- '1.2.6'
- '1.2.6.1'
- '1.2.6.2'
- '1.2.6.3'
- '1.2.6.4'
- '1.2.6.5'
- '1.2.6.6'
- '1.2.7'
- '1.2.8'
- '1.2.9'
- '1.2.9.1'
- '1.2.10'
- '1.2.11'
- '1.2.12'
- '1.2.12.1'
- '1.2.13'
- '1.2.13.1'
- '1.3.0'
- '1.3.0.1'
- '1.3.0.2'
- '1.3.0.3'
- '1.3.1'
author: Michael Snoyman
latest: '1.3.1'
description-type: markdown
description: ! '## conduit


  `conduit` is a solution to the streaming data problem, allowing for production,

  transformation, and consumption of streams of data in constant memory. It is an

  alternative to lazy I\/O which guarantees deterministic resource handling.


  For more information about conduit in general, and how this package in

  particular fits into the ecosystem, see [the conduit

  homepage](https://github.com/snoyberg/conduit#readme).

'
license-name: MIT
