homepage: http://pepeiborra.github.com/control-monad-exception
changelog-type: text
hash: c3181f559eb8702a83918fb61d13cf9676c048f2cc6d58fe52daf75b66c70e20
test-bench-deps: {}
maintainer: pepeiborra@gmail.com
synopsis: Explicitly typed, checked exceptions with stack traces
changelog: |2
       * 0.9.0 - Moved to transformers (finally leaving the whole mtl-transformers cisma behind)
       * 0.10.0 - removed the dependency on safe-failure
       * 0.10.1 - compatibility with failure 0.2 (thanks to Bas van Dijk)
       * 0.10.2 - use the identity type from mtl (thanks to Bas), require minimum cabal-install version (thanks to Bernhard Urban)
       * 0.10.3 - Moved the MonadIO instance to the main package
       * 0.10.3.1 - Compatibility with base 4.6
       * 0.11 - Experimental support for asynchronous exceptions (via monad-control)
       * 0.11.1 - Add missing Alternative instances
       * 0.11.4 (Jul 6 2020) - Compatibility with recent monad-control and base packages (contributed by Tao He)
basic-deps:
  base: '>=4 && <5'
  monad-control: '>=0.3'
  lifted-base: '>=0.2.1'
  transformers-base: '>=0.4.1'
  failure: '>=0.1 && <0.3'
  transformers: '>=0.2'
  monadloc: '>=0.7'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- '0.5'
- '0.6'
- 0.8.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.9.0
- 0.9.1
- 0.10.0
- 0.10.1
- 0.10.2
- 0.10.3
- 0.10.3.1
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
author: Pepe Iborra
latest: 0.11.4
description-type: haddock
description: |-
  This package provides explicitly typed, checked exceptions as a library.

  Computations throwing different types of exception can be combined seamlessly.

  /Example/

  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)

  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)

  > instance Exception DivideByZero
  > instance Exception SumOverflow

  GHCi infers the following types

  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
  > runEM(eval `catch` \ (e::SomeException) -> return (-1))  :: Expr -> Double


  In addition to explicitly typed exceptions this package provides:

  * Support for explicitly documented, unchecked exceptions (via 'Control.Monad.Exception.tryEMT').

  * Support for selective unchecked exceptions (via 'Control.Monad.Exception.UncaughtException').

  * Support for exception call traces via 'Control.Monad.Loc.MonadLoc'. /Example:/

  >
  > f () = do throw MyException
  > g a  = do f a
  >
  > main = runEMT $ do g () `catchWithSrcLoc`
  >                        \loc (e::MyException) -> lift(putStrLn$ showExceptionWithTrace loc e)
  >
  > -- Running main produces the output:
  >
  > *Main> main
  >  MyException
  >    in f, Main(example.hs): (1,6)
  >       g, Main(example.hs): (2,6)
  >       main, Main(example.hs): (5,9)
  >       main, Main(example.hs): (4,16)
license-name: LicenseRef-PublicDomain
