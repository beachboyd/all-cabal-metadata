homepage: ''
changelog-type: ''
hash: 9f994593c40d6c4c20f567018587f6c0699712697876c71ed52afffdeeae3dcc
test-bench-deps: {}
maintainer: Ertugrul Söylemez <es@ertes.de>
synopsis: Monads with suspension and arbitrary-spot reentry
changelog: ''
basic-deps:
  semigroupoids: ! '>=3.0 && <4'
  base: ! '>=4.5 && <5'
  monad-control: ! '>=0.3 && <1'
  bifunctors: ! '>=3.0 && <4'
  mtl: ! '>=2.0 && <3'
  transformers-base: ! '>=0.4 && <1'
  transformers: ! '>=0.3 && <1'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
author: Ertugrul Söylemez <es@ertes.de>
latest: 0.2.0
description-type: markdown
description: ! "The ContinueT monad transformer\n===============================\n\nQuickstart
  tutorial\n-------------------\n\nThis monad transformer allows you to set continuation
  spots in a\ncomputation and reenter it at any of those spots possibly causing\ndifferent
  behavior:\n\n    label name = continue_ (M.singleton name ())\n\n    myComp = do\n
  \       label \"first\"\n        liftIO (putStrLn \"Hello\")\n        label \"second\"\n
  \       liftIO (putStrLn \"World!\")\n\nThis computation gives you two spots for
  reentry, \"first\" and \"second\".\nIf you reenter at \"first\", the whole computation
  will be run again.  If\nyou reenter at \"second\", only the second `putStrLn` computation
  will be\nrun again.\n\n\n### Advanced reentering\n\nThe most general way to reenter
  is to perform a computation when\nreentering:\n\n    addCont (Right False) . M.singleton
  \"abc\" $ do\n        liftIO (putStrLn \"Reentered at spot abc.\")\n        return
  True\n\nIn the primary run this computation will just return `False`, but it\nwill
  also register a continuation spot.  When you reenter the\ncomputation using that
  spot, it will return `True` instead.\n\n\n### Suspension\n\nA `ContinueT` monad
  also allows you to suspend a computation.  This\nbasically means that the computation
  is aborted at some spot to be\nreentered somewhere else (or at the same spot) later.
  \ You can do this\nwith the `empty` combinator as well as the `suspend` function.
  \ Examples\nTODO.\n\n\nContinueT explained\n-------------------\n\n`ContinueT` takes
  four arguments:\n\n    newtype ContinueT e f m a\n\nTo form a monad, *e* has to
  be a monoid, *f* has to be a `Plus` functor\n(as defined by the [semigroupoids]
  package) and *m* has to be a monad.\n\n\n### The reentry functor\n\nThe most important
  parameter is the reentry functor *f*.  It represents\nthe type for maps of reentry
  points.  Example:\n\n    ContinueT e (Map String) m a\n\nA computation of this type
  may register reentry points indexed by\nstrings.  All registered reentry points
  are combined according to the\nfunctor's `Plus` instance.\n\n\n### The suspension
  monoid\n\nComputations may suspend, in which case control is returned to a\ncontroller,
  which may be the application loop or the `(<|>)` combinator:\n\n    c1 <|> c2\n\nThis
  computation runs both `c1` and `c2` (note: even if neither\nsuspends) and returns
  the result of the left-most computation that did\nnot suspend.\n\nWhen a computation
  suspends it may do so with a value of type *e* that\nmight communicate the reason
  for suspending.  This type must be a\nmonoid, because multiple branches of a `(<|>)`
  composition may suspend,\nin which case the suspension values are combined according
  to the\n`Monoid` instance of *e*.\n\nA reasonable suspension monoid is `Last SomeException`,
  and since this\nwill likely be a very common choice this library defines a shorthand
  for\nit:\n\n    type LastEx = Last SomeException\n\n\n[semigroupoids]: <http://hackage.haskell.org/package/semigroupoids>\n"
license-name: BSD-3-Clause
