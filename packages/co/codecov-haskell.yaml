homepage: https://github.com/guillaume-nargeot/codecov-haskell
changelog-type: markdown
hash: 0a3035cbcbb14897f612de35378a3db93a3681bf4611a480f663db23e521ab3d
test-bench-deps:
  base: -any
  codecov-haskell: -any
  HUnit: -any
maintainer: Guillaume Nargeot <guillaume+hackage@nargeot.com>
synopsis: Codecov.io support for Haskell.
changelog: ! '+[0.5.0](https://github.com/guillaume-nargeot/codcov-haskell/issues?q=milestone:v0.5.0+is:closed)

  -----

  * Adding commandline arguments to allow setting mix and tix paths (issue #12)


  +[0.4.0.2](https://github.com/guillaume-nargeot/codcov-haskell/issues?q=milestone:v0.4.0.2+is:closed)

  -----

  * Introduce retry policy to http requests (issue #6)

  * Add support for Jenkins-CI (issue #7)

  * Add support for Circle-CI (issue #8)


  +[0.3.0](https://github.com/guillaume-nargeot/codcov-haskell/issues?q=milestone:v0.3.0+is:closed)

  -----

  * Fix coverage result response reading (issue #5)


  +[0.2.0](https://github.com/guillaume-nargeot/codcov-haskell/issues?q=milestone:v0.2.0+is:closed)

  -----

  * Fix coverage conversion rule for otherwise bug (issue #4)


  0.1.0

  -----

  * Initial release

'
basic-deps:
  bytestring: ! '>=0.10'
  split: -any
  base: ==4.*
  retry: ! '>=0.5'
  curl: ! '>=1.3.8'
  hpc: ! '>=0.6'
  process: -any
  async: ! '>=2.0'
  containers: ! '>=0.5'
  regex-posix: -any
  cmdargs: ! '>=0.10'
  aeson: -any
  safe: ! '>=0.3'
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0.2
- 0.5.0
author: Guillaume Nargeot
latest: 0.5.0
description-type: markdown
description: ! "codecov-haskell [![Build Status](http://img.shields.io/travis/guillaume-nargeot/codecov-haskell/master.svg)](https://travis-ci.org/guillaume-nargeot/codecov-haskell)
  [![Gitter chat](http://img.shields.io/badge/gitter-chat--room-brightgreen.svg)](https://gitter.im/guillaume-nargeot/codecov-haskell)
  [![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)](https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29)
  [![Version on Hackage](http://img.shields.io/hackage/v/codecov-haskell.svg)](http://hackage.haskell.org/package/codecov-haskell)\n===============\n\ncodecov-haskell
  converts and sends Haskell projects hpc code coverage to [codecov.io](http://codecov.io/).\n\nAt
  the moment, [Travis CI](https://travis-ci.org), [Circle CI](https://circleci.com)
  and [Jenkins CI](https://jenkins-ci.org) have been tested,\nbut codecov-haskell
  should be compatible with other CI services in the near future.\n\ncodecov-haskell
  is still under development and any contributions are welcome!\n\n# Usage\n\n## Travis
  CI\n\nBelow is the simplest example of configuration for your project `.travis.yml`:\n```yaml\nlanguage:
  haskell\nghc: 7.8\nscript:\n  - cabal configure --enable-tests --enable-library-coverage
  && cabal build && cabal test\nafter_script:\n  - cabal install codecov-haskell\n
  \ - codecov-haskell [options] [test-suite-names]\n```\n\nIf your build fails during
  the test phase with an error message starting by \"hpc:\", just replace the `cabal
  test` command by `run-cabal-test`, as in the following example:\n```yaml\nbefore_install:\n
  \ - cabal install codecov-haskell\nscript:\n  - cabal configure --enable-tests --enable-library-coverage
  && cabal build\n  - run-cabal-test [options] [cabal-test-options]\nafter_script:\n
  \ - codecov-haskell [options] [test-suite-names]\n```\n\nThis will prevent the build
  to fail because of hpc related reasons, which are usually not fatal and should not
  affect the coverage data. Details are available in the next section.\n\nYou may
  also experience some issues related to your project dependencies, which can be solved
  by using the `--avoid-reinstalls`/`--force-reinstalls` flags.</br>\nAnother way
  to solve problems related dependencies is to install codecov-haskell in a sandbox,
  as in the example below:\n```yaml\nafter_script:\n  - cabal sandbox init && cabal
  install codecov-haskell\n  - .cabal-sandbox/bin/codecov-haskell [options] [test-suite-names]\n```\n\n##
  Circle CI\n\nIn your test section of your `circle.yml` add the following:\n```yaml\ntest:\n
  \ pre:\n    - cabal install codecov-haskell\n    - cabal configure --enable-tests
  --enable-library-coverage\n    - cabal build\n  override:\n    - cabal test\n  post:\n
  \   - codecov-haskell [options] [test-suite-names]\n```\n\nIf your build fails during
  the test phase with an error message starting by \"hpc:\", just replace the `cabal
  test` command by `run-cabal-test`, as in the following example:\n```yaml\ntest:\n
  \ pre:\n    - cabal install codecov-haskell\n    - cabal configure --enable-tests
  --enable-library-coverage\n    - cabal build\n  override:\n    - run-cabal-test\n
  \ post:\n    - codecov-haskell [options] [test-suite-names]\n```\n\n## Jenkins CI\nIn
  your build script add the following commands:\n```bash\ncabal install codecov-haskell\ncabal
  configure --enable-tests --enable-library-coverage && cabal build && cabal test\ncodecov-haskell
  [options] [test-suite-names]\n```\n\nIf your build fails during the test phase with
  an error message starting by \"hpc:\", just replace the `cabal test` command by
  `run-cabal-test`, as in the following example:\n```bash\ncabal install codecov-haskell\ncabal
  configure --enable-tests --enable-library-coverage && cabal build\nrun-cabal-test
  [options] [cabal-test-options]\ncodecov-haskell [options] [test-suite-names]\n```\n\n##
  The run-cabal-test command\n\nUnder certain conditions related to the project structure
  and the version of hpc, `cabal test` may output an error message and exit with the
  error code `1`, which would result in a build failure.<br/>\n\nTo prevent this from
  happening, codecov-haskell provides the `run-cabal-test` command which runs `cabal
  test` and returns with `0` if the following regular expression never matches any
  line of the output:\n\n```perl\n/^Test suite .*: FAIL$/\n```\n\nBelow are some of
  the conditions under which you will likely need to use `run-cabal-test`:\n- when
  using GHC 7.6 (hpc 0.6 known issue)\n- when using GHC 7.8 with multiple test suites
  covering the same module(s)\n\n### Options\n\nThe `--cabal-name` option can be used
  to specify a custom executable name instead of the default `cabal` when calling
  `cabal test`.<br/>\nBelow is an example which can be useful for projects with a
  Travis configuration based on [multi-ghc-travis](https://github.com/hvr/multi-ghc-travis):\n\n```yaml\nrun-cabal-test
  --cabal-name=cabal-1.20\n```\n\n## The codecov-haskell command\n\nThis command parses
  the hpc generated output, converts its to Codecov json format and finally sends
  it to codecov.io over http.<br/>\nMultiple test suites can be specified, in which
  case the coverage report will be made of the merged coverage data generated by the
  specified test suites.<br/>\nFor example, if your test suite are named `test1` and
  `test2`, use the command as follows:\n\n```yaml\ncodecov-haskell test1 test2\n```\n\n###
  Options\n\n#### --exclude-dir\n\nThe `--exclude-dir` option allows to exclude source
  files located under a given directory from the coverage report.<br/>\nYou can exclude
  source files located under the `test/` directory by using this option as in the
  following example:\n\n```yaml\ncodecov-haskell --exclude-dir=test [test-suite-names]\n```\n\nYou
  can specify multiple excluded folders by using the following example syntax:\n\n```yaml\ncodecov-haskell
  --exclude-dir=test1 --exclude-dir=test2 [test-suite-names]\n```\n\n#### --display-report\n\nThis
  boolean option prints the raw json coverage report to be sent to codecov.io.\n\n####
  --dont-send\n\nThis boolean option prevents codecov-haskell from sending the coverage
  report to codecov.io.\nThis option can be used together with `--display-report`
  for testing purpose.<br/>\nFor example, you can try various combinations of the
  other options and confirm the difference in the resulting report outputs.\n\n####
  --print-response\n\nThis boolean option prints the raw json response received after
  posting the coverage report to codecov.io.\n\n# Limitations\n\n## Total coverage\n\nBecause
  of the way hpc works, coverage data is only generated for modules that are referenced
  directly or indirectly by the test suites.\nAs a result, the total package coverage
  computed by Codecov may be higher than what it really is.\nAn option will be added
  soon in order to allow specifying source folders to include in the total coverage
  computation.\n\n## Expression level coverage\n\nEven though hpc supports expression
  level coverage, this version of codecov-haskell does not support it yet, but this
  feature will be implemented soon.\nMeanwhile, the hpc coverage information is converted
  into a line based report, in which a line can be: fully covered (green), partially
  covered (yellow) and not covered (red).\n\n# Contributing\n\ncodecov-haskell is
  still under development and any contributions are welcome!\n\nPlease share your
  comments and suggestions on codecov-haskell [Gitter channel](https://gitter.im/guillaume-nargeot/codecov-haskell)!\n\n#
  License\n\nBSD3 ([tl;dr](https://tldrlegal.com/license/bsd-3-clause-license-(revised)))\n\n#
  Notes\n\n- HPC publication: http://ittc.ku.edu/~andygill/papers/Hpc07.pdf\n"
license-name: BSD-3-Clause
