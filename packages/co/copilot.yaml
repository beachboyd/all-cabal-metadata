homepage: http://leepike.github.com/Copilot/
changelog-type: ''
hash: 6cd99bf7fb369a2feeb38cd63a02bbb07d3cda6ce219dc7bfd146fc6fe0288a6
test-bench-deps: {}
maintainer: Lee Pike <leepike@galois.com>
synopsis: A stream DSL for writing embedded C programs.
changelog: ''
basic-deps:
  base: ! '>=4.0 && <5'
  copilot-c99: ! '>=2.2.1'
  copilot-core: ! '>=2.2.1'
  copilot-language: ! '>=2.2.1'
  copilot-cbmc: ! '>=2.2.1'
  copilot-sbv: ! '>=2.2.1'
  random: -any
  copilot-theorem: ! '>=2.2.1'
  copilot-libraries: ! '>=2.2.1'
  directory: ! '>=1.2.1'
all-versions:
- '0.21'
- '0.22'
- '0.23'
- '0.25'
- '0.26'
- '0.27'
- '0.28'
- '1.0'
- 1.0.1
- 1.0.2
- '2.0'
- 2.0.1
- 2.0.2
- 2.0.3
- 2.0.4
- 2.0.5
- 2.0.6
- 2.0.7
- 2.0.8
- 2.0.9
- 2.1.0
- 2.1.1
- 2.1.2
- 2.2.0
- 2.2.1
author: Nis Nordby Wegmann, Lee Pike, Robin Morisset, Sebastian Niller, Alwyn Goodloe
latest: 2.2.1
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/Copilot-Language/Copilot.svg?branch=master)](https://travis-ci.org/Copilot-Language/Copilot)\n\nCopilot:
  a stream DSL\n====================================\nCopilot is a stream (i.e., infinite
  lists) domain-specific language (DSL) in\nHaskell that compiles into embedded C.
  \ Copilot is similar in spirit to\nlanguages like Lustre.  Copilot contains an interpreter,
  multiple back-end\ncompilers, and other verification tools.\n\nResources\n=========\nCopilot
  is comprised of a number of sub-projects which are automatically\ninstalled when
  you install Copilot from Hackage, as described below.  (These are\ntracked as Git
  submodules in Copilot.)\n\n* [copilot-language](http://hackage.haskell.org/package/copilot-language)
  The\n  front-end of Copilot defining the user language.\n\n* [copilot-libraries](http://hackage.haskell.org/package/copilot-libraries)\n
  \ User-supplied libraries for Copilot, including linear-temporal logic,\n  fault-tolerant
  voting, regular expressions, etc.\n\n* [copilot-core](http://hackage.haskell.org/package/copilot-core)
  The core\n  language, which efficiently represents Copilot expressions.  The core
  is only\n  of interest to implementers wishing to add a new back-end to Copilot.\n\n*
  [copilot-cbmc](http://hackage.haskell.org/package/copilot-cbmc) A tool to\n  generate
  a driver using CBMC, a third-party tool (see Dependencies below) that\n  proves
  that the code generated by different C back-ends is equivalent.\n  Currently, this
  includes the C99 back-end and the SBV back-end.\n\n* [copilot-c99](http://hackage.haskell.org/package/copilot-c99)
  A back-end that\n  translates to [Atom](http://hackage.haskell.org/package/atom)
  to\n  generate hard real-time C code.\n\nOptionally, you may which also to install\n\n*
  [copilot-sbv](http://hackage.haskell.org/package/copilot-sbv) Another back-end\n
  \ that translates to [SBV](http://hackage.haskell.org/package/sbv), using its\n
  \ code generator to generate hard real-time C code as well.  The ad\n\n* [copilot-discussion](https://github.com/Copilot-Language/copilot-discussion)\n
  \ Contains a tutorial, todos, and other items regarding the Copilot system.\n\n**Sources**
  for each package are available on Github as well.  Just go to\n[Github](github.com)
  and search for the package of interest.  Feel free to fork!\n\nComments, bug reports,
  and patches are always welcome.  Send them to leepike @\ngmail.com\n\nExamples\n=========\nPlease
  see the files under the Examples directory for a number of examples\nshowing the
  syntax, use of libraries, and use of the interpreter and back-ends.\nThe examples
  is the best way to start.\n\nInstallation\n============\n\n* From Hackage:\n\n  The
  Copilot library is cabalized. Assuming you have cabal and the GHC compiler\n  installed
  (the [Haskell Platform](http://hackage.haskell.org/platform/) is the\n  easiest
  way to obtain these), it should merely be a matter of running\n\n           cabal
  install copilot\n\n  with an Internet connection.  Please see the INSTALL file for
  installation\n  details.\n\n* From GitHub:\n\n           git clone https://github.com/Copilot-Language/Copilot.git\n
  \          git submodule update --init\n           make test\n\nOnce the installation
  is done, you can run the executable `XXX` which will\nexecute the regression test
  suite for sbv on your machine.\n\nNote there is a TravisCI build (linked to at the
  top of this README) if you have\ntrouble building/installing.\n\nDependencies\n=============\ncopilot-cbmc
  depends on the C model-checker, CBMC.\n[CBMC](http://www.cprover.org/cbmc/) is a
  bounded model-checker for C code.  We\nuse CBMC to prove that two back-ends generating
  C generate semantically\nequivalent C, to help detect bugs in C back-ends.\n\nFor
  compiling it with CompCert (activated by default for SBV backend), you need\nto
  install it, with its Standard C library ( http://compcert.inria.fr/ ).\n\nCopyright,
  License\n==================\nCopilot is distributed with the BSD3 license. The license
  file contains the\n[BSD3](http://en.wikipedia.org/wiki/BSD_licenses) verbiage.\n\nThanks\n======\nCopilot
  was developed, in part, with support from NASA's Aviation Safety\nProgram, Contract
  #NNL08AD13T.  Copilot was developed jointly by Galois,\nInc. and the National Institute
  of Aerospace.\n\nThe following people have contributed to Copilot: Lee Pike, Nis
  Wegmann,\nSebastian Niller, Robin Morisset, Alwyn Goodloe, and Levent Erkok.\n\n"
license-name: BSD-3-Clause
