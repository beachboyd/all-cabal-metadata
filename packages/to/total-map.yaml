homepage: http://github.com/conal/total-map/
changelog-type: markdown
hash: 6f35a74e7be4702f148aacd79794e8ae203b965cee767df9031094b5ea169f4a
test-bench-deps: {}
maintainer: conal@conal.net
synopsis: Finitely represented /total/ maps
changelog: ! '# Change log for total-map


  ## 0.1.0


  *   Derived `Show` instance.

  *   `infixl 9 !`

  *   `DetectableZero` instance.

  *   Added a change log.


  ## 0.0.8


  *   `Semiring` and `StarSemiring` instances.


  ## 0.0.7


  *   `Semigroup` instance.


  ## 0.0.6


  *   `codomain`

'
basic-deps:
  base: <5
  semiring-num: -any
  containers: -any
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.1.0
author: Conal Elliott
latest: 0.1.0
description-type: markdown
description: ! "The usual finite map type (`Map` from `Data.Map`) is not an applicative
  functor, as it doesn't have a pure.\nConsequently, it's also not a monad.\nOn the
  other hand, we can decompose `Map` into two parts: a *total* map, and `Maybe`, i.e.,\n\n
  \   type Map k v = TMap k (Maybe v)\n\nThe type `TMap` of total maps does have `Applicative`
  and `Monad` instances, and hence this hypothetically rebuilt `Map` would as well.\n\nThe
  idea for `TMap` is introduced in the paper [*Denotational design with type class
  morphisms*](http://conal.net/papers/type-class-morphisms/).\nThe meaning `Map k
  v` is given by its semantic function\n\n    (!) :: Map k v -> (k -> v)\n\nThe type
  class morphism (TCM) principle then exactly dictates the meanings of several class
  instances for `TMap`, including `Functor`, `Applicative`, `Monad`, and `Monoid`.\nFor
  instance, `(!)` must be a monoid (homo)morphism, i.e.,\n\n    (!) mempty == mempty\n
  \   (!) (s `mappend` t) == (!) s `mappend` (!) t\n\nThe current implementation of
  `TMap` is via `Data.Map`.\n"
license-name: BSD-3-Clause
