homepage: https://github.com/aviaviavi/toodles#readme
changelog-type: ''
hash: 345bba99cb786312e9ab8c7ea29e85db08fc8f9490d4d9c05ff3dd3c755899b5
test-bench-deps: {}
maintainer: mail@avi.press
synopsis: Manage the TODO entries in your code
changelog: ''
basic-deps:
  warp: ==3.2.25
  MissingH: ! '>=1.4.0.1 && <1.5'
  wai: ==3.2.1.2
  base: ! '>=4.0 && <5'
  text: ==1.2.3.1
  megaparsec: ==6.5.0
  strict: ==0.3.2
  servant-server: ==0.14.1
  servant: ==0.14.1
  servant-blaze: ==0.8
  regex-posix: ==0.95.2
  cmdargs: ==0.10.20
  blaze-html: ==0.9.1.1
  aeson: ==1.3.1.1
  yaml: ==0.8.32
  directory: ==1.3.1.5
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
- '0.1.0.7'
- '0.1.0.8'
- '0.1.0.9'
- '0.1.0.10'
- '0.1.0.11'
- '0.1.0.12'
- '0.1.0.13'
- '0.1.0.14'
- '0.1.0.15'
- '0.1.0.16'
- '0.1.1'
author: Avi Press
latest: '0.1.1'
description-type: markdown
description: ! "# Toodles\n\n[![Build Status](https://travis-ci.org/aviaviavi/toodles.svg?branch=master)](https://travis-ci.org/aviaviavi/toodles)\n[![Hackage](https://img.shields.io/hackage/v/toodles.svg)](https://hackage.haskell.org/package/toodles)\n\nToodles
  scrapes your entire repository for TODO entries and organizes them so\nyou can manage
  your project directly from the code. View, filter, sort, and edit\nyour TODO's with
  an easy to use web application. When you make changes via\ntoodles, the edits will
  be applied directly the TODO entries in your code.\nWhen you're done, commit and
  push your changes to share them with your team!\n\n![Toodles Screenshot](https://i.imgur.com/DEwzMYn.png)\n\n###
  TODO details\n\nSpecify details about your TODO's so that you can filter and sort
  them with\nease! Specify details within parenthesis and separate with the `|` delimeter.\n\n```python\n#
  TODO(assignee|p=1|keys=vals|#tags) \n```\n\n#### Priority\n\nThe key `p=<integer>`
  will be interpreted as a priority number\n\n#### KeyVals\n\nUse arbitrary key value
  pairs `<key>=<value>|<key2>=<value2>|...` and design any\norganization scheme you
  wish! A good use for this is to enter dates of deadlines\nfor TODO's that you can
  sort on in Toodles\n\n#### Tags\n\nA detail starting with `#`, eg `#bug|#techdebt|#database|...`
  will be interpreted as\na tag, which can be used to label and group your TODO's.\n\n####
  Assign\n\nAssign your TODO's to someone. Any plain word that will be interpreted
  as an assignee.\n\n```python\n# TODO(bob) - something we need to do later\n```\n\n###
  Per Project Configuration\n\nYou can configure toodles by putting a `.toodles.yaml`
  file in the root of your\nproject. See this repo's `.toodles.yaml` for the full
  configuration spec.\n\nCurrently via config you can:\n\n- Set files to ignore via
  a list of regular expressions\n- Specify your own flags to scan for other than the
  built-ins (TODO, FIXME, XXX)\n\n### Scanned Languages\n\nThese languages will be
  scanned for any TODO's:\n\n- C/C++\n- C#\n- Elixir\n- Erlang\n- Go\n- Haskell\n-
  Java\n- Javascript\n- Kotlin\n- Lua\n- Objective-C\n- PHP\n- Plaintext files (`*.txt`)\n-
  Protobuf\n- Python\n- Ruby\n- Rust\n- Scala\n- Shell / Bash\n- Swift\n- Typescript\n-
  Vue (scripts only)\n- Yaml\n\nSubmit a PR if you'd like a language to be added.
  There will eventually be\nsupport for this to be user configurable\n\n### Installing\n\nThe
  easiest way to get toodles is via [stack](https://docs.haskellstack.org).\nJust
  a `stack install toodles` and you're done! Alternatively, with GHC 8.4.3\nyou can
  use [cabal](https://www.haskell.org/cabal/download.html). If there is\ndesire for
  it I can look into precompiled distribution.\n\n### Running\n\nInvoking `toodles`
  with no arguments will treat the current directory as the\nproject root and will
  start a server on port 9001. You can set these with the\n`-d` and `-p` flags, respectively.\n\n\n```bash\n#
  $ toodles -d <root directory of your project> -p <port to run server>\n# for more
  info run:\n# $ toodles --help\n$ toodles -d /path/to/your/project -p 9001\n# or
  simply\n$ toodles\n```\n#### Running with Docker\n\nFor convenience this repository
  also provides a `Dockerfile` to automatically\nbuild toodles.\n\n```bash\n# to build
  container run:\n$ docker build -t toodles .\n# afterwards you can run the following
  command to execute toodles for the\n# directory you are currently in:\n$ docker
  run -it -v $(pwd):/repo -p 9001:9001 toodles\n\n```\n\n### Current Limitations\n\nDue
  to the parser's current simplicity, Toodles won't see TODO's in multiline\ninitiated
  comment. For instance in javascript\n\n```javascript\n// TODO(#bug) this would be
  parsed\n\n/*\n\n TODO(#bug) this will _not_ be picked up by toodles\n\n*/\n```\n\n"
license-name: MIT
