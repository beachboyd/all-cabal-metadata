homepage: https://github.com/aviaviavi/toodles#readme
changelog-type: ''
hash: 1e526116350faa48ff4f48928bb13bd48bfd8f6da18d860d19aedd73b1acaaa5
test-bench-deps:
  warp: ==3.2.25
  MissingH: ! '>=1.4.0.1 && <1.5'
  wai: ==3.2.1.2
  toodles: -any
  base: ! '>=4.0 && <5'
  hspec: ! '>=2.4.4 && <2.6'
  text: ==1.2.3.1
  megaparsec: ==6.5.0
  strict: ==0.3.2
  servant-server: ==0.14.1
  servant: ==0.14.1
  servant-blaze: ==0.8
  regex-posix: ==0.95.2
  cmdargs: ==0.10.20
  blaze-html: ==0.9.1.1
  aeson: ==1.3.1.1
  yaml: ==0.8.32
  hspec-expectations: ! '>=0.8.2 && <0.9'
  directory: ==1.3.1.5
maintainer: mail@avi.press
synopsis: Manage the TODO entries in your code
changelog: ''
basic-deps:
  warp: ==3.2.25
  MissingH: ! '>=1.4.0.1 && <1.5'
  wai: ==3.2.1.2
  base: ! '>=4.0 && <5'
  hspec: ! '>=2.4.4 && <2.6'
  text: ==1.2.3.1
  megaparsec: ==6.5.0
  strict: ==0.3.2
  servant-server: ==0.14.1
  servant: ==0.14.1
  servant-blaze: ==0.8
  regex-posix: ==0.95.2
  cmdargs: ==0.10.20
  blaze-html: ==0.9.1.1
  aeson: ==1.3.1.1
  yaml: ==0.8.32
  hspec-expectations: ! '>=0.8.2 && <0.9'
  directory: ==1.3.1.5
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.0.10
- 0.1.0.11
- 0.1.0.12
- 0.1.0.13
- 0.1.0.14
- 0.1.0.15
- 0.1.0.16
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 1.0.0
- 1.0.1
- 1.0.2
author: Avi Press
latest: 1.0.2
description-type: markdown
description: ! "# Toodles\n\n[![Build Status](https://travis-ci.org/aviaviavi/toodles.svg?branch=master)](https://travis-ci.org/aviaviavi/toodles)\n[![Hackage](https://img.shields.io/hackage/v/toodles.svg)](https://hackage.haskell.org/package/toodles)\n\nToodles
  scrapes your entire repository for TODO entries and organizes them so\nyou can manage
  your project directly from the code. View, filter, sort, and edit\nyour TODO's with
  an easy to use web application. When you make changes via\ntoodles, the edits will
  be applied directly the TODO entries in your code.\nWhen you're done, commit and
  push your changes to share them with your team!\n\n![Toodles Screenshot](https://i.imgur.com/DEwzMYn.png)\n\n###
  TODO details\n\nSpecify details about your TODO's so that you can filter and sort
  them with\nease! Specify details within parenthesis and separate with the `|` delimeter.\n\n```python\n#
  TODO(assignee|p=1|keys=vals|#tags)\n```\n\n#### Priority\n\nThe key `p=<integer>`
  will be interpreted as a priority number\n\n#### KeyVals\n\nUse arbitrary key value
  pairs `<key>=<value>|<key2>=<value2>|...` and design any\norganization scheme you
  wish! A good use for this is to enter dates of deadlines\nfor TODO's that you can
  sort on in Toodles\n\n#### Tags\n\nA detail starting with `#`, eg `#bug|#techdebt|#database|...`
  will be interpreted as\na tag, which can be used to label and group your TODO's.\n\n####
  Assign\n\nAssign your TODO's to someone. Any plain word that will be interpreted
  as an assignee.\n\n```python\n# TODO(bob) - something we need to do later\n```\n\n###
  Per Project Configuration\n\nYou can configure toodles by putting a `.toodles.yaml`
  file in the root of your\nproject. See this repo's `.toodles.yaml` for the full
  configuration spec.\n\nCurrently via config you can:\n\n- Set files to ignore via
  a list of regular expressions\n- Specify your own flags to scan for other than the
  built-ins (TODO, FIXME, XXX)\n\n#### Ignoring Files\n\nIgnore as many files as you
  can! Large autogenerated files will slow Toodles\ndown quite a bit. Check the output
  of the server to see any files/folders that\nmay be causing slowness for your repo
  and add them to the `ignore` section your\n`.toodles.yaml` If the performance of
  Toodles is not good enough for your use\ncase, please open an issue.\n\n### Scanned
  Languages\n\nThese languages will be scanned for any TODO's:\n\n- C/C++\n- C#\n-
  CSS/SASS\n- Elixir\n- Erlang\n- Go\n- Haskell\n- HTML\n- Java\n- Javascript\n- Kotlin\n-
  Lua\n- Objective-C\n- PHP\n- Plaintext files (`*.txt`)\n- Protobuf\n- Python\n-
  React Javascript (JSX)\n- Ruby\n- Rust\n- Scala\n- Shell / Bash\n- Swift\n- Typescript\n-
  Vue (scripts only)\n- Yaml\n\nSubmit a PR if you'd like a language to be added.
  There will eventually be\nsupport for this to be user configurable\n\n### Installing\n\nThe
  easiest way to get toodles is via [stack](https://docs.haskellstack.org).\nJust
  a `stack install toodles` and you're done! Alternatively, with GHC 8.4.3\nyou can
  use [cabal](https://www.haskell.org/cabal/download.html). If there is\ndesire for
  it I can look into precompiled distribution.\n\n### Running\n\nInvoking `toodles`
  with no arguments will treat the current directory as the\nproject root and will
  start a server on port 9001. You can set these with the\n`-d` and `-p` flags, respectively.\n\n\n```bash\n#
  $ toodles -d <root directory of your project> -p <port to run server>\n# for more
  info run:\n# $ toodles --help\n$ toodles -d /path/to/your/project -p 9001\n# or
  simply\n$ toodles\n```\n#### Running with Docker\n\nYou can run a pre-built toodles
  for your current directory via docker:\n\n```bash\n# execute toodles for the directory
  you are currently in:\n$ docker run -it -v $(pwd):/repo -p 9001:9001 aviaviavi/toodles\n```\n\nJust
  mount your project into the container's `/repo` and direct a port of your choice
  to the container's `9001`.\n\nFor convenience this repository also provides a `Dockerfile`
  to automatically\nbuild toodles.\n\n```bash\n# to build container run:\n$ cd /path/to/toodles/repo\n$
  docker build -t toodles .\n# afterwards you can run the following command to execute
  toodles for the\n# directory you are currently in:\n$ docker run -it -v $(pwd):/repo
  -p 9001:9001 toodles\n\n```\n\n### Background\n\nI work at a small startup called
  DotDashPay and over time the TODOs in our code\nbase continued building up to the
  point where it was difficult to use them\nholistically. While the information in
  the TODOs was actually very useful and\nmethodically written, the fact that were
  couldn't easily organize them started\nto weigh on us as mounting tech debt.\n\nWhile
  not our main product focus, we try hard to find opportunities to build\ntools that
  make use of the organization schemes we already have in place, since\ndoing so is
  a big win for us. Toodles became a nights and weekends side\nproject to use the
  pre-existing TODO scheme we had spent years using, but had\nnever effectively capitalized
  on.\n\nA quick plug if you also like building great tools, like working in a fast
  paced\nstartup environment, and are located in the SF Bay Area: Reach out at\ncareers@dotdashpay.com
  and come work with us!\n\n### Contributing\n\nContributions in any form are welcome!
  A few bits of info:\n\n- Don't be shy, ask questions! Contributing to Toodles should
  be welcoming for\n  people at any level of programming familiarity. Whether it's
  a new feature,\n  bug fix, or docs, any contribution is very appreciated.\n- Before
  you start coding, please comment or mark a particular issue as \"in\n  progress\",
  or even open your pull request as a work in progress (WIP). This is\n  to help avoid
  having multiple people work on the same thing.\n- If github issues don't cut it,
  feel free to reach out on twitter\n  [@avi_press](https://twitter.com/avi_press)\n"
license-name: MIT
