homepage: https://github.com/aviaviavi/toodles#readme
changelog-type: ''
hash: 94f6bfc4c9f727138a08227648c6d58863d0e3587a80c8588794bbabe14e41fe
test-bench-deps: {}
maintainer: mail@avi.press
synopsis: Manage the TODO entries in your code
changelog: ''
basic-deps:
  warp: -any
  MissingH: -any
  bytestring: -any
  wai: -any
  base: ! '>=4.7 && <5'
  text: -any
  megaparsec: -any
  strict: -any
  filepath: -any
  servant-server: -any
  servant: -any
  servant-blaze: -any
  regex-posix: -any
  cmdargs: -any
  blaze-html: -any
  transformers: -any
  http-types: -any
  aeson: -any
  yaml: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.0.3'
- '0.1.0.4'
- '0.1.0.5'
- '0.1.0.6'
author: Avi Press
latest: '0.1.0.6'
description-type: markdown
description: ! "# Toodles\n\n[![Build Status](https://travis-ci.org/aviaviavi/toodles.svg?branch=master)](https://travis-ci.org/aviaviavi/toodles)\n[![Hackage](https://img.shields.io/hackage/v/toodles.svg)](https://hackage.haskell.org/package/toodles)\n\nToodles
  scrapes your entire repository for TODO entries and organizes them so\nyou can manage
  your project directly from the code. View, filter, sort, and edit\nyour TODO's with
  an easy to use web application. When you make changes via\ntoodles, the edits will
  be applied directly the TODO entries in your code.\nWhen you're done, commit and
  push your changes to share them with your team!\n\n![Toodles Screenshot](https://i.imgur.com/DEwzMYn.png)\n\n###
  TODO details\n\nSpecify details about your TODO's so that you can filter and sort
  them with\nease! Specify details within parenthasis and separate with the `|` delimeter.\n\n```python\n#
  TODO(assignee|p=1|keys=vals|#tags) \n```\n\n#### Priority\n\nThe key `p=<integer>`
  will be interpreted as a priority number\n\n#### KeyVals\n\nUse arbitrary key value
  pairs `<key>=<value>|<key2>=<value2>|...` and design any\norganization scheme you
  wish! A good use for this is to enter dates of deadlines\nfor TODO's that you can
  sort on in Toodles\n\n#### Tags\n\nA detail starting with `#`, eg `#bug|#techdebt|#database|...`
  will be interpreted as\na tag, which can be used to label and group your TODO's.\n\n####
  Assign\n\nAssign your TODO's to someone. Any plain word that will be interpreted
  as an assignee.\n\n```python\n# TODO(bob) - something we need to do later\n```\n\n###
  Per Project Configuration\n\nYou can configure toodles by putting a `.toodles.yaml`
  file in the root of your\nproject. See this repo's `.toodles.yaml` for the full
  configuration spec.\n\nCurrently via config you can:\n\n- Set files to ignore via
  a list of regular expressions\n\n### Scanned Languages\n\nSubmit a PR if you'd like
  a language to be added. There will eventually be\nsupport for this to be user configurable\n\n-
  C/C++\n- Elixir\n- Erlang\n- Go\n- Haskell\n- Java\n- Javascript\n- Objective-C\n-
  Protobuf\n- Python\n- Ruby\n- Rust\n- Scala\n- Shell / Bash\n- Swift\n- Typescript\n-
  Yaml\n\n### Installing\n\nYou can get toodles by installing with [stack](https://docs.haskellstack.org)
  or\n[cabal](https://www.haskell.org/cabal/download.html). Run `stack install\ntoodles`
  or `cabal install toodles` and you're done! If there is desire for it I\ncan look
  into precompiled distribution.\n\n### Running\n\n```bash\n# $ toodles -d <root directory
  of your project> -p <port to run server>\n# for more info run:\n# $ toodles --help\n$
  toodles -d /path/to/your/project -p 9001\n```\n\n### Current Limitations\n\nDue
  to the parser's current simplicity, Toodles won't see TODO's in multiline initiated
  comment. For instance in javascript\n\n```javascript\n// TODO(#bug) this would be
  parsed\n\n/*\n\n TODO(#bug) this will _not_ be picked up by toodles\n\n*/\n```\n\n"
license-name: MIT
