homepage: ''
changelog-type: markdown
hash: 4821c5817f9742dc4cea45fe1f20f4c0f8a61d96de102764bfe485ffd246f5d0
test-bench-deps: {}
maintainer: pawel834@gmail.com
synopsis: Dense and sparse total maps.
changelog: ! '1.0.0.2

  =======


  * Added the changelog.

  * Added the git repo to cabal file.

  * Fixed complexity of deserialize for TotalSparseMap.


  1.0.0.1

  =======


  * Fixed build on GHC <7.10.


  1.0.0.0

  =======


  The first version.

'
basic-deps:
  reflection: <3
  base: ==4.*
  adjunctions: ==4.*
  distributive: ==0.*
  semigroups: ==0.*
  containers: ! '>=0.3 && <1'
  keys: ==3.*
  base-compat: ! '>=0.6'
  linear: ! '>=1.1 && <2'
  vector: ! '>=0.10 && <1'
  bytes: ! '>=0.2 && <1'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
author: PaweÅ‚ Nowak
latest: 1.0.0.3
description-type: haddock
description: ! 'Total maps are maps that contain a value for every key. This library
  provides

  various flavors of total maps.


  Dense maps store values for all keys. Sparse maps store a default value

  and the values which differ from the default. Sparse maps trade the lack

  of Traversable for a very fast Foldable instance (if the data is really sparse).


  Bounded maps require the key type to be enumerable and bounded (have a

  finite number of values) for most of their functionality. Subset maps do not

  require the key to be bounded, instead they are parametized by a finite set of

  valid keys. The key subset is retrieved with help of the excellent

  ''reflection'' library.


  The Data.Total.Array modules provide total map implementations based on vectors.

  It should usually be faster then Maps, unless you need to adjust single elements.


  Maps in this library provide most of their functions in typeclasses and so

  the modules are designed to be imported unqualified.'
license-name: MIT
