homepage: https://github.com/tonatona-project/tonatona#readme
changelog-type: ''
hash: c3676b19891a0e9fdc4495444bfa22c35c31da1577f2dc7bd24ccc3b4a7ba2b0
test-bench-deps:
  envy: '>=1.5 && <2.2'
  rio: ==0.1.*
  base: '>=4.7 && <4.15'
  tonatona: -any
  doctest: -any
  say: ==0.1.*
  Glob: -any
maintainer: arow.okamoto+github@gmail.com
synopsis: Scalable way to pass runtime configurations for tonatona
changelog: ''
basic-deps:
  envy: '>=1.5 && <2.2'
  rio: ==0.1.*
  base: '>=4.7 && <4.15'
  tonaparser: -any
  say: ==0.1.*
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Kadzuya Okamoto, Dennis Gosnell
latest: 0.1.0.1
description-type: markdown
description: |
  # tonaparser

  Integrated parser library created for tonatona meta application framework.

  It can construct system configuration from environment variables, command line arguments, and any IO values depends on them.
  See details for `example/Main.hs`.

  ## Build example app

  ```
  $ stack build --pedantic --flag tonaparser:buildexample tonaparser
  ```

  Then check how it works with various command line options and environment variables.

  ```
  $ stack exec tonaparser-example -- --new-foo 3 --bar-baz foo
  Foo {foo = 3, bar = Bar {baz = "foo"}}

  $ stack exec tonaparser-example -- --new-foo 3
  Foo {foo = 3, bar = Bar {baz = "baz"}}

  $ stack exec tonaparser-example -- --foo 3 --bar-baz foo
  tonaparser-example: No required configuration for "Configuration for Foo.foo"

  $ FOO=5 stack exec tonaparser-example -- --bar-baz foo
  Foo {foo = 5, bar = Bar {baz = "foo"}}
  ```
license-name: MIT
