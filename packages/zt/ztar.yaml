homepage: https://github.com/brandonchinn178/ztar#readme
changelog-type: markdown
hash: 0ae2bb9fcb7aee72086e8ede8a503e05280602abe653f0f7bbd9cedcbe14b2db
test-bench-deps:
  bytestring: -any
  extra: -any
  path: -any
  base: -any
  bytestring-arbitrary: -any
  ztar: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
  path-io: -any
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: Creating and extracting arbitrary archives
changelog: ! '# ztar 0.2.0


  Breaking changes:

  * `create''` is now `createFrom`


  Changes:

  * Removed the `typed-paths` flag

  * Added `create''`, `createFrom''`, and `extract''` which use Path types


  # ztar 0.1.3


  Changes:

  * Add the `typed-paths` flag for using the `Path` library


  # ztar 0.1.2


  Changes:

  * Fix for creating archives of non-UTF8 encoded files


  # ztar 0.1.1


  Changes:

  * Use the Unix `tar` command instead, because of issues with the Haskell `tar` library


  # ztar 0.1.0


  Breaking changes:

  * Works against zip-0.2.0, will revert in future release


  # ztar 0.0.3


  Breaking changes:

  * `create` now takes compression algorithm


  Other changes:

  * `extract` automatically detects compression algorithm used

  * `extract` now handles ZIP archives and uncompressed TAR archives

  * Add integration testing


  # ztar 0.0.2


  * Add createGZ''


  # ztar 0.0.1


  * Initial commit

'
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  path: ! '>=0.5 && <0.7'
  base: ! '>=4.7 && <5'
  text: -any
  zip: ! '>=0.2 && <0.3'
  unix-compat: -any
  filepath: ! '>=1.4.1 && <1.5'
  process: -any
  zlib: ! '>=0.6 && <0.7'
  deepseq: -any
  directory: ! '>=1.3 && <1.4'
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.2.0'
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: '0.2.0'
description-type: markdown
description: ! '# ztar


  Reading and writing arbitrary archives.


  An extension of the `tar` library that, similar to the `tar` UNIX executable,

  can create an archive with a given compression algorithm and automatically

  detect the compression algorithm of an archive when extracting.


  ```

  import Codec.Archive.ZTar


  -- equivalent to `Codec.Archive.Tar.create "archive.tar" "dist/" ["."]`

  createFrom NoCompression "archive.tar" "dist/" ["."]


  -- helper to compress a single directory; equivalent to previous line

  create NoCompression "archive.tar" "dist/"


  -- compress with GZip

  create GZip "archive.tar.gz" "dist/"


  -- compress with Zip

  create Zip "archive.zip" "dist/"


  -- automatically determines compression

  extract "archive.tar" "archive-tar/"

  extract "archive.tar.gz" "archive-gz/"

  extract "archive.zip" "archive-zip/"


  -- can also use Path types

  import Path

  import Path.IO

  home <- getHomeDir

  let archive = home </> [relfile|archive.tgz|]

  dir <- resolveDir "dist/"

  create'' GZip archive dir

  ```

'
license-name: BSD3
