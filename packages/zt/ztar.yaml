homepage: ''
changelog-type: markdown
hash: f94c6ecbf8bda01acf9440ddec8de8f4fa1e54723c901b5c7620b8cdaa4ed8bc
test-bench-deps:
  bytestring: -any
  extra: -any
  path: -any
  base: -any
  bytestring-arbitrary: -any
  ztar: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
  path-io: -any
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: Creating and extracting arbitrary archives
changelog: ! '# ztar 0.1.3


  Changes:

  * Add the `typed-paths` flag for using the `Path` library


  # ztar 0.1.2


  Changes:

  * Fix for creating archives of non-UTF8 encoded files


  # ztar 0.1.1


  Changes:

  * Use the Unix `tar` command instead, because of issues with the Haskell `tar` library


  # ztar 0.1.0


  Breaking changes:

  * Works against zip-0.2.0, will revert in future release


  # ztar 0.0.3


  Breaking changes:

  * `create` now takes compression algorithm


  Other changes:

  * `extract` automatically detects compression algorithm used

  * `extract` now handles ZIP archives and uncompressed TAR archives

  * Add integration testing


  # ztar 0.0.2


  * Add createGZ''


  # ztar 0.0.1


  * Initial commit

'
basic-deps:
  bytestring: ! '>=0.10.8 && <0.11'
  path: -any
  base: ! '>=4.7 && <5'
  text: -any
  zip: ! '>=0.2 && <0.3'
  unix-compat: -any
  filepath: ! '>=1.4.1 && <1.5'
  process: -any
  zlib: ! '>=0.6 && <0.7'
  deepseq: -any
  directory: ! '>=1.3 && <1.4'
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: '0.1.3'
description-type: markdown
description: ! "# ztar\n\nReading and writing arbitrary archives.\n\nAn extension
  of the `tar` library that, similar to the `tar` UNIX executable,\ncan create an
  archive with a given compression algorithm and automatically\ndetect the compression
  algorithm of an archive when extracting.\n\n```\nimport Codec.Archive.ZTar\n\n--
  equivalent to `Codec.Archive.Tar.create \"archive.tar\" \"dist/\" [\".\"]`\ncreate'
  NoCompression \"archive.tar\" \"dist/\" [\".\"]\n\n-- helper to compress a single
  directory; equivalent to previous line\ncreate NoCompression \"archive.tar\" \"dist/\"\n\n--
  compress with GZip\ncreate GZip \"archive.tar.gz\" \"dist/\"\n\n-- compress with
  Zip\ncreate Zip \"archive.zip\" \"dist/\"\n\n-- automatically determines compression\nextract
  \"archive-tar/\" \"archive.tar\"\nextract \"archive-gz/\" \"archive.tar.gz\"\nextract
  \"archive-zip/\" \"archive.zip\"\n```\n\n## Using the Path library\n\nIf your code
  uses the [`Path`](https://hackage.haskell.org/package/path) library for more\ntype-safe
  filepaths, include the `typed-paths` flag.\n\n```\n# stack.yaml\nflags:\n  ztar:\n
  \   typed-paths: true\n\n# Main.hs\nimport Path\nimport Path.IO\n\nhome <- getHomeDir\nlet
  archive = home </> [relfile|archive.tgz|]\ndir <- resolveDir \"dist/\"\ncreate GZip
  archive dir\n```\n"
license-name: BSD3
