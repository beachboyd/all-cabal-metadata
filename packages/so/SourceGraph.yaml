homepage: ''
changelog-type: text
hash: 012fcc05ceda68304ed763d7ae5f0e9fdb544895accd648fac49ad4d175a7396
test-bench-deps: {}
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Static code analysis using graph-theoretic techniques.
changelog: ! "Changes in 0.6.1.1\n==================\n\n* Update to take into account
  API changes of libraries.\n\nChanges in 0.6.1.0\n==================\n\n* Only consider
  buildable executables for Cabal-based analyses.\n\n* Also buildable with haskell-src-exts-1.7.*\n\nChanges
  in 0.6.0.2\n==================\n\n* Also buildable with haskell-src-exts-1.6.*\n\nChanges
  in 0.6.0.1\n==================\n\n* Fix up background colours for nested directories
  in import visualisation.\n\nChanges in 0.6.0.0\n==================\n\n* Now supports
  \"implicitly exported\" entities (as requested by Curt\n  Sampson).  This includes
  instantiated class methods from other\n  modules and functions, etc. that start
  with an underscore (see\n  http://www.haskell.org/ghc/docs/latest/html/users_guide/options-sanity.html\n
  \ for more information).\n\n* All inaccessible entities are now reported, not just
  those that were\n  root nodes in the call graph.\n\n* Edges are now colour-coded
  based upon whether they are part of a\n  clique, cycle or a chain.\n\n* Level-based
  analyses: visualise how deep an entity is from those\n  exported entities.\n\n*
  The generated Dot code for the visualisations is also saved.\n\nChanges in 0.5.5.0\n==================\n\n*
  Class instances now drawn correctly.\n\n* Better colour support.\n\n* Now has a
  legend.\n\n* Clean up printing of cliques, etc.\n\nChanges in 0.5.2.0\n==================\n\n*
  Shift overall analysis to the top and per-module analysis to the\n  end, as suggested
  by Duncan Coutts.\n\n* Graph drawing fixups: instances are now drawn correctly,
  and the\n  module graph now has modules located in the correct directory.\n\n* Improve
  some graph drawing aspects (node margins, colours for module\n  graphs, etc.).\n\nChanges
  in 0.5.1.0\n==================\n\n* Add support for passing a single Haskell source
  file rather than a\n  Cabal file as the argument, as requested by Curt Sampson.\n\n*
  Shade backgrounds of modules when clustering Entities.\n\n* RelativeNeighbourhood
  doesn't provide good alternate modules and\n  takes up too much runtime, and so
  has been removed.\n\nChanges in 0.5.0.0\n==================\n\n* Re-write of parsing.\n\n*
  Usage of new graphviz and Graphalyze features.\n\n* More abstraction into common
  routines into Analyse.Utils\n"
basic-deps:
  Graphalyze: ! '>=0.14.1.0 && <0.15'
  Cabal: ==1.22.*
  base: ==4.*
  filepath: -any
  graphviz: ! '>=2999.15.0.0 && <2999.19'
  containers: -any
  haskell-src-exts: ==1.16.*
  fgl: ==5.5.*
  mtl: -any
  random: -any
  multiset: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.5.0
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 0.6.1.1
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
- 0.7.0.6
- 0.7.0.7
author: Ivan Lazar Miljenovic
latest: 0.7.0.7
description-type: haddock
description: ! 'Statically analyse Haskell source code using graph-theoretic

  techniques.  Sample reports can be found at:

  <http://code.haskell.org/~ivanm/Sample_SourceGraph/SampleReports.html>


  To use SourceGraph, call it as either:


  > SourceGraph path/to/Foo.cabal


  Or, if your project doesn''t use Cabal, then there is limited support

  for using an overall module from your program\/library:


  > SourceGraph path/to/Foo.hs


  Note that the Cabal method is preferred, as it is better able to

  determine the project name and exported modules (when passing a

  Haskell file to SourceGraph, it uses that module''s name as the overall

  name of project and assumes that it is the only exported module; as

  such, it works better for programs than libraries).


  Whichever way you run SourceGraph, it then creates a @SourceGraph@

  subdirectory in the same directory as the file that was passed to it,

  and within that subdirectory creates the analysis report in

  @Foo.html@.


  SourceGraph is still experimental in terms of its ability to parse and

  properly understand Haskell source code and in the types of analyses

  it performs.'
license-name: LicenseRef-GPL
