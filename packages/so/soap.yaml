homepage: https://bitbucket.org/dpwiz/haskell-soap
changelog-type: text
hash: 25f5815324ef7f89059f673b3cb5ac2b2268c15ab5aafa4255eb44204a79244e
test-bench-deps:
  bytestring: -any
  xml-conduit: -any
  base: -any
  soap: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  xml-conduit-writer: -any
  HUnit: -any
maintainer: aenor.realm@gmail.com
synopsis: SOAP client tools
changelog: ! "0.2.3.5:\n\n    * Fix tests\n\n0.2.3.4:\n\n    * Prepare for xml-conduit-1.5
  series.\n\n0.2.3.3:\n\n    * Relax envelope parser.\n\n0.2.3.2:\n\n    * Unbreak
  the build with GHC 7.8.\n\n0.2.3.1:\n\n    * Sprinkle some CPP to prepare for next
  http-client.\n\n0.2.3.0:\n\n    + Add monadic request and response processors.\n
  \   * Deprecate pure processors.\n\n0.2.2.7:\n\n    ! Add missing export for parser
  runner.\n\n0.2.2.6:\n\n    * Extract parser runner. `invokeWS` now is a mere default
  pipeline.\n\n0.2.2.5:\n\n    * Drop upper bounds entirely.\n\n0.2.2.4:\n\n    !
  Haddock breaks on LANGUAGE in example.\n\n0.2.2.3:\n\n    * Raise http-client upper
  boundary.\n\n0.2.2.2:\n\n    ! Fix missing imports after conduit stopped reexporting
  in 1.1.\n\n0.2.2.1:\n\n    + Add basic http transport initializer to exports.\n\n0.2.2:\n\n
  \   * Switch to http-client transport.\n      Bring soap-tls or soap-openssl to
  use HTTPS connections.\n\n0.2.1.3:\n\n    * Cabal-only tweaks: remove -O2, add changelog.\n\n0.2.1.2:\n\n
  \   + Add timeout option to confTransport.\n\n0.2.1.1:\n\n    ! Pin http-conduit
  version to 1.9.x.\n\n0.2.1.0:\n\n    * Throw SOAPParsingError instead of plain error.\n
  \   * Update SOAPFault detection.\n\n0.2.0.4:\n\n    + Add configurator-based transport
  initialization.\n\n0.2.0.3:\n\n    ! Switch to a recent http-conduit version.\n\n0.2.0.2:\n\n
  \   * Detect SOAPFault in response and throw a proper Exception.\n\n0.2.0.1:\n\n
  \   + Tag content helpers for stream parsers.\n    + Dict helper for cursor parsers.\n
  \   + Document-based parser for \"medium rare\" cursor parsers.\n    + Request and
  response tracing helpers.\n\n0.2:\n\n    * Switch to xml-conduit-writer for more
  clean serializers.\n    + Pluggable transports.\n    + Raw and streaming parsers.\n\n0.1:\n\n
  \   Initial implementation, somewhat inflexible and warty,\n    but working with
  diverse services.\n"
basic-deps:
  http-client: ! '>=0.2 && <1.0'
  exceptions: ! '>=0.8.2.1 && <0.9'
  bytestring: ! '>=0.10.6 && <0.11'
  xml-conduit: ! '>=1.3.5 && <2.0'
  base: ! '>=4.8 && <5.0'
  configurator: ! '>=0.3 && <1.0'
  unordered-containers: ! '>=0.2.5.1 && <0.3'
  text: ! '>=1.2.2.1 && <1.3'
  xml-conduit-writer: ! '>=0.1.1.2 && <0.2'
  conduit: ! '>=1.2.6.6 && <1.3'
  data-default: ! '>=0.5.3 && <1.0'
  xml-types: ! '>=0.3.6 && <0.4'
  mtl: ! '>=2.2.1 && <3.0'
  iconv: ! '>=0.4.1.3 && <0.5'
  resourcet: ! '>=1.1.7.4 && <1.2'
  http-types: ! '>=0.9 && <1.0'
all-versions:
- '0.2.3.5'
author: Alexander Bondarenko
latest: '0.2.3.5'
description-type: haddock
description: ! 'Tools to build SOAP clients using xml-conduit.


  A mildly-complicated example:


  > import Network.SOAP

  > import Network.SOAP.Transport.HTTP

  >

  > import Text.XML.Writer

  > import Text.XML.Stream.Parse as Parse

  > import           Data.Text (Text)

  > import qualified Data.Text as T

  >

  > main :: IO ()

  > main = do

  >     -- Initial one-time preparations.

  >     transport <- initTransport "http://example.com/soap/endpoint" id (iconv "cp-1251")

  >

  >     -- Making queries

  >     activeStaff <- listStaff transport True

  >     print activeStaff

  >

  > data Person = Person Text Int deriving Show

  >

  > listStaff :: Transport -> Bool -> IO [Person]

  > listStaff t active = invokeWS t "urn:dummy:listStaff" () body parser

  >     where

  >         body = element "request" $ element "listStaff" $ do

  >                    element "active" active

  >                    element "order" $ T.pack "age"

  >                    element "limit" (10 :: Int)

  >

  >         parser = StreamParser $ force "no people" $ tagNoAttr "people" $ Parse.many
  parsePerson

  >

  >         parsePerson = tagName "person" (requireAttr "age") $ \age -> do

  >                           name <- Parse.content

  >                           return $ Person name (read . T.unpack $ age)


  Notice: to invoke HTTPS services you need to initialize a transport from soap-tls
  or soap-openssl.


  Full examples available at source repo: <https://bitbucket.org/dpwiz/haskell-soap/src/HEAD/soap/examples/>'
license-name: MIT
