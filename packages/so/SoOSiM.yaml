homepage: http://www.soos-project.eu/
changelog-type: ''
hash: 723ffa221140cbb2c00ac5d5d83392b3bd4ecd79f9aadb1b7514eb0fc48ae702
test-bench-deps: {}
maintainer: Christiaan Baaij <christiaan.baaij@gmail.com>
synopsis: Abstract full system simulator
changelog: ''
basic-deps:
  stm: ! '>=2.3 && <2.4'
  base: ! '>=4.3.1.0 && <4.6'
  monad-coroutine: ! '>=0.7.1 && <0.8'
  containers: ! '>=0.4.0.0 && <0.5'
  concurrent-supply: ! '>=0.1.1 && <0.2'
  mtl: ! '>=2.0.1.0 && <2.1'
  transformers: ! '>=0.2.2.0 && <2.3'
all-versions:
- '0.1'
- 0.2.0.0
- 0.2.1.0
author: S(o)OS Consortium
latest: 0.2.1.0
description-type: markdown
description: ! "SoOSiM - Abstract Full System Simulator\n=======================================\n\nInstallation\n------------\n\n*
  Download the latest Haskell Platform from: http://hackage.haskell.org/platform/\n*
  Execute on the command-line: `cabal update`\n* Execute on the command-line: `cabal
  install SoOSiM`\n\nCreating OS Components\n----------------------\n\nWe jump straight
  into some code, by showing the description of the *Memory Manager* (http://www.soos-project.eu/wiki/index.php/Application_Cases#Memory_Manager)\n\n####
  ./examples/MemoryManager.hs\n```haskell\n{-# LANGUAGE TypeFamilies #-}\nmodule MemoryManager
  where\n\nimport SoOSiM\n\nimport MemoryManager.Types\nimport MemoryManager.Util\n\nmemoryManager
  :: MemState -> Input MemCommand -> Sim MemState\nmemoryManager s (Message content
  retAddr) = do\n  case content of\n    (Register memorySource) -> do\n      yield
  $ s {addressLookup = memorySource:(addressLookup s)}\n\n    (Read addr) -> do\n
  \     let src = checkAddress (addressLookup s) addr\n      case (sourceId src) of\n
  \       Nothing -> do\n          addrVal <- readMemory addr\n          respond MemoryManager
  retAddr addrVal\n          yield s\n        Just remote -> do\n          response
  <- invoke MemoryManager remote content\n          respond MemoryManager retAddr
  response\n          yield s\n\n    (Write addr val) -> do\n      let src = checkAddress
  (addressLookup s) addr\n      case (sourceId src) of\n        Nothing -> do\n          addrVal
  <- writeMemory addr val\n          yield s\n        Just remote -> do\n          invokeAsync
  MemoryManager remote content ignore\n          yield s\n\nmemoryManager s _ = yield
  s\n\ninstance ComponentInterface MemoryManager where\n  type State   MemoryManager
  = MemState\n  type Receive MemoryManager = MemCommand\n  type Send    MemoryManager
  = Dynamic\n  initState _                = (MemState [])\n  componentName _            =
  \"MemoryManager\"\n  componentBehaviour _       = memoryManager\n```\n\n#### ./examples/MemoryManager/Types.hs\n```haskell\n{-#
  LANGUAGE DeriveDataTypeable        #-}\n{-# LANGUAGE ExistentialQuantification #-}\nmodule
  MemoryManager.Types where\n\nimport SoOSiM\n\ndata MemorySource\n  = MemorySource\n
  \ { baseAddress :: Int\n  , scope       :: Int\n  , sourceId    :: Maybe ComponentId\n
  \ }\n\n\ndata MemState =\n  MemState { addressLookup :: [MemorySource]\n           }\n\ndata
  MemCommand = Register Int Int (Maybe ComponentId)\n                | Read     Int\n
  \               | forall a . Typeable a => Write Int a\n  deriving Typeable\n\ndata
  MemoryManager = MemoryManager\n```\n\n#### ./examples/MemoryManager/Util.hs\n```haskell\nmodule
  MemoryManager.Util where\n\nimport MemoryManager.Types\n\ncheckAddress ::\n  [MemorySource]\n
  \ -> Int\n  -> MemorySource\ncheckAddress sources addr = case (filter containsAddr
  sources) of\n    []    -> error (\"address unknown: \" ++ show addr)\n    (x:_)
  -> x\n  where\n    containsAddr (MemorySource base sc _) = base <= addr && addr
  < sc\n```\n\n### Component definition Step-by-Step\nWe will now walk through the
  code step-by-step:\n\n```haskell\nmodule MemoryManager where\n```\n\nWe start by
  defining the name of our Haskell module, in this case `MemoryManager`.\nMake sure
  the name of file matches the name of the module, where haskell src files use the
  `.hs` file-name extension.\n\nWe continue with importing modules that we require
  to build our component:\n\n```haskell\nimport SoOSiM\n\nimport MemoryManager.Types\nimport
  MemoryManager.Util\n```\n\nThe `SoOSiM` module defines all the simulator API functions.\nBesides
  the *external* module, we also import two *local* module called `MemoryManager.Types`
  and `MemoryManager.Util`, which we define in `./MemoryManager/Types.hs` and `./MemoryManager/Util.hs`
  respectively.\n\nWe start our description with a datatype definition describing
  the internal state of our memory manager component, and the datatype encoding the
  messages our memory manager will receive:\n\n```haskell\ndata MemorySource\n  =
  MemorySource\n  { baseAddress :: Int\n  , scope       :: Int\n  , sourceId    ::
  Maybe ComponentId\n  }\n\ndata MemState =\n  MemState { addressLookup :: [MemorySource]\n
  \          }\n\ndata MemCommand = Register MemorySource\n                | Read
  \    Int\n                | forall a . Typeable a => Write Int a\n  deriving Typeable\n\ndata
  MemoryManager = MemoryManager\n```\n\nWe define two record datatypes [1]; and with
  three fields (`baseAddress`, `scope`, and `sourceId`) and another with one field
  (`addressLookup`).\nThe first record type defines an address range (`baseAddress`
  and `scope`) and an indication which memory manager is responsible for tht memory
  range.\nThe second record type, which has only one field, which defines a dynamically-sized
  list of `MemorySource` elements.\n\nThe third datatype is an algebraic datatype
  defining the kind of messages that can be send to the memory manager: registering
  a memory range, reading, and writing.\n\nThe fourth datatype is a singleton datatype,
  which will act as the label/name for the interface defining our memory manager.\n\nWe
  now start defining the actual behaviour of our memory manager, starting with its
  type annotation:\n\n```haskell\nmemoryManager :: MemState -> Input MemCommand ->
  Sim MemState\n```\n\nThe type definition tells us that the first argument has the
  type of our internal component state, and the second argument a value of type `Input
  a`, where the `a` is instantiate to the `MemCommand` datatype.\nThe possible values
  of the `Input a` type are enumerated in the *OS Component API* section.\nThe value
  of the result is of type `Sim MemState`.\nThis tells us two things:\n\n* The `memoryManager`
  function is executed within the `Sim` monad.\n* The actual value that is returned
  is of type `MemState`.\n\nA *monad* is many wonderful things [2], way too much to
  explain here, so for the rest of this README we see it as an execution environment.\nOnly
  inside this execution environment will we have access to the SoOSiM API functions.\n\nAlthough
  we know the types of the arguments and the result of the function, we don't know
  their actual meaning.\nThe SoOSiM simulator will call your component behaviour,
  passing as the first argument its current internal state.\nThe second argument is
  an event that triggered the execution of your component: for example a message send
  to you by another component.\nThe result that you must ultimately return is the,
  potentially updated, internal state of your component.\n\nWe now turn to the first
  line of the actual function definition:\n\n```haskell\nmemoryManager s (Message
  content retAddr) = do\n```\n\nWhere `memoryManager` is the name of the function,
  `s` the first argument (of type `MemState`).\nWe pattern-match on the second argument,
  meaning this function definition clause only works for values whose constructor
  is `Message`.\nBy pattern matching we get access to the fields of the datatype,
  where we bind the names `content` and `retAddr` to the values of these fields.\n\nThe
  `do` *keyword* after the `=` sign indicates that the function executes within a
  monadic environment, the `Sim` environment in our case.\nThe semantics in a monadic
  environment are different from those in a normal Haskell functions.\nA monadic environment
  has a more imperative feel, in which your function definition interacts with the
  environment step-by-step, statement after statements.\nThis also gives rise to the
  scoping rules familiar to the imperative programmer: names cannot be used before
  they are declared.\n\nNext we define a nested `case`-statement that contains most
  of the actual behaviour of our memory manager component:\n\n```haskell\ncase content
  of\n  (Register memorySource) -> do\n    yield $ s {addressLookup = memorySource:(addressLookup
  s)}\n\n  (Read addr) -> do\n    let src = checkAddress (addressLookup s) addr\n
  \   case (sourceId src) of\n      Nothing -> do\n        addrVal <- readMemory addr\n
  \       respond MemoryManager retAddr addrVal\n        yield s\n      Just remote
  -> do\n        response <- invoke MemoryManager remote content\n        respond
  MemoryManager retAddr response\n        yield s\n\n  (Write addr val) -> do\n    let
  src = checkAddress (addressLookup s) addr\n    case (sourceId src) of\n      Nothing
  -> do\n        addrVal <- writeMemory addr val\n        yield s\n      Just remote
  -> do\n        invokeAsync MemoryManager remote content ignore\n        yield s\n```\n\nIn
  the first alternative of our case-statement we handle a `Register` message, by updating
  our address lookup table with an additional memory source.\nWe `yield` to the simulator
  with our updated internal state.\n\nIn the second alternative we handle a `Read`
  request.\nThe next line in our function definition, which checks which specific
  memory manager is responsible for the address, is:\n\n```haskell\nlet src = checkAddress
  (addressLookup s) addr\n```\n\nHaskell is white-space sensitive, so make sure that
  you have a good editor that does automatic indenting.\nWe use the `let` construct
  to bind the expression `checkAddress (addressLookup s) addr` to the name `src`.\nWe
  use these let-bindings to bind *pure* expressions to names, where *pure* means that
  the expression has no side-effects [3].\nWe can now just use the name `src` instead
  of having to type `checkAddress (addressLookup s) addr` every time.\nDon't worry
  about efficiency, the evaluation mechanics of Haskell will ensure that the actual
  expression is only calculated once, even when we use the `src` name multiple times.\n\nIn
  the next case-statement we check if the current or a remote memory manager is responsible
  for handling the address.\nIn either alternative we must use the `do` keyword again
  because we will be executing multiple statements.\nWe will now finally use some
  of the API functions, the first we encounter is:\n\n```haskell\naddrVal <- readMemory
  addr\n```\n\nThe `readMemory` function accesses the simulator environment, retrieving
  the value of the memory location specified by `addr`.\nWe use the left-arrow `<-`
  to indicate that this is a side-effecting expression (we are accessing the simulator
  environment), and that `addrVal` is not bound to the expression itself, but the
  value belonging to the execution of this statement.\n\nAfter reading the memory,
  we send the value back to the module that initially requested the memory access.\nWe
  send the read value as a response to the return address (`retAddr`).\nHaving serviced
  the request, we use the `yield` function to give the (unaltered) internal state
  back to the simulation environment.\n\nIf a remote memory manager is responsible
  for the address:\n\n```haskell\nJust remote -> do\n  response <- invoke MemoryManager
  remote content\n  respond MemoryManager retAddr response\n  yield s\n```\n\nWe then
  synchronously invoke the remote memory manager with the original read request, and
  forward the received response to the component making the original memory request.\n\nThe
  third alternative, handling a write request, is analogous to handling a read request.\n\nIn
  the situations which we didn't handle explicitly, such as receiving a `Tick`, we
  simply disregard the simulator event, and return our unaltered internal state to
  the simulator.\n\n#### ComponentInterface Instance\nAt the bottom of our `MemoryManager`
  module we see the following code:\n\n```haskell\ninstance ComponentInterface MemoryManager
  where\n  type State   MemoryManager = MemState\n  type Receive MemoryManager = MemCommand\n
  \ type Send    MemoryManager = Dynamic\n  initState _                = (MemState
  [])\n  componentName _            = \"MemoryManager\"\n  componentBehaviour _       =
  memoryManager\n```\n\nHere we define a so-called type-class instance.\nAt this moment
  you do not need to know what a type-class is, just that you need to define this
  instance if you want your component to be able to be used by the SoOSiM simulator.\n\nWe
  use our singleton datatype, `MemoryManager`, as the label/name for our ComponentInterface
  instance.\nAll (type-)functions in this interface receive the interface label as
  their first argument.\nFor the type-functions (such as `State s`) we must explicitly
  mention the label, for normal function we can just use the underscore (`_`) as a
  place holder.\n\nThe instance must always contain the definitions for `State`, `Receive`,
  `Send`, `initState`, `componentName` and `componentBehaviour`.\nThe `State` indicates
  the datatype representing the internal state of a module.\nThe `Receive` indicates
  the datatype of messages that this component is expecting to receive.\nThe `Send`
  indicates the datatype of messages this component will send as responses to invocation.\nThe
  `initState` function returns a minimal internal state of your component.\nThe `componentName`
  is a function returning the globally unique name of your component.\nFinally `componentBehaviour`
  is a function returning the behaviour of your component.\nThe behaviour of your
  component must always have the type:\n\n```haskell\n(State iface) -> Input (Receive
  iface) -> Sim (State iface)\n```\n\nWhere `State iface` is the datatype of your
  component's internal state, and `Receive iface` is the datetype of the type of messages
  the component handles.\n\n## SoOSiM API\n\n#### ComponentInterface Type Class\n```haskell\n--
  | Type class that defines every OS component\nclass ComponentInterface s where\n
  \ -- | Type of messages send by the component\n  type Send    s\n  -- | Type of
  messages received by the component\n  type Receive s\n  -- | Type of internal state
  of the component\n  type State   s\n  -- | The minimal internal state of your component\n
  \ initState          :: s -> State s\n  -- | A function returning the unique global
  name of your component\n  componentName      :: s -> ComponentName\n  -- | The function
  defining the behaviour of your component\n  componentBehaviour :: s -> State s ->
  Input (Receive s) -> Sim (State s)\n```\n\n#### Simulator Events\n```haskell\ndata
  Input a\n  = Message a ReturnAddress -- ^ A message send by another component: the\n
  \                           --   first field is the message content, the\n                            --
  \  second field is the address to send\n                            --   responses
  to\n  | Tick                    -- ^ Event send every simulation round\n```\n\n####
  Accessing the simulator\n```haskell\n-- | Create a new component\ncreateComponent
  ::\n  (ComponentInterface iface, Typeable (Receive iface))\n  => iface\n  -- ^ Component
  Interface\n  -> Sim ComponentId\n  -- ^ 'ComponentId' of the created component\n```\n\n```haskell\n--
  | Synchronously invoke another component\ninvoke ::\n  (ComponentInterface iface,
  Typeable (Receive iface), Typeable (Send iface))\n  => iface\n  -- ^ Interface type\n
  \ -> ComponentId\n  -- ^ ComponentId of callee\n  -> Receive iface\n  -- ^ Argument\n
  \ -> Sim (Send iface)\n  -- ^ Response from callee\n```\n\n```haskell\n-- | Invoke
  another component, handle response asynchronously\ninvokeAsync ::\n  (ComponentInterface
  iface, Typeable (Receive iface), Typeable (Send iface))\n  => iface\n  -- ^ Interface
  type\n  -> ComponentId\n  -- ^ ComponentId of callee\n  -> Receive iface\n  -- ^
  Argument\n  -> (Send iface -> Sim ())\n  -- ^ Response Handler\n  -> Sim ()\n  --
  ^ Call returns immediately\n```\n\n```haskell\n-- | Respond to an invocation\nrespond
  ::\n  (ComponentInterface iface, Typeable (Send iface))\n  => iface\n  -- ^ Interface
  type\n  -> ReturnAddress\n  -- ^ Return address to send response to\n  -> (Send
  iface)\n  -- ^ Value to send as response\n  -> Sim ()\n  -- ^ Call returns immediately\n```\n\n```haskell\n--
  | Yield internal state to the simulator scheduler\nyield ::\n  a\n  -> Sim a\n```\n\n```haskell\n--
  | Get the component id of your component\ngetComponentId ::\n  Sim ComponentId\n```\n\n```haskell\n--
  | Get the node id of of the node your component is currently running on\ngetNodeId
  ::\n  SimM NodeId\n```\n\n```haskell\n-- | Create a new node\ncreateNode ::\n  Sim
  NodeId -- ^ NodeId of the created node\n```\n\n```haskell\n-- | Write memory of
  local node\nwriteMemory ::\n  Typeable a\n  => Int\n  -- ^ Address to write\n  ->
  a\n  -- ^ Value to write\n  -> Sim ()\n```\n\n```haskell\n-- | Read memory of local
  node\nreadMemory ::\n  Int\n  -- ^ Address to read\n  -> Sim Dynamic\n```\n\n```haskell\n--
  | Return the component Id of the component that created the current\n--   component\ncomponentCreator
  ::\n  Sim ComponentId\n```\n\n```haskell\n-- | Get the unique 'ComponentId' of a
  component implementing an interface\ncomponentLookup ::\n  ComponentInterface iface\n
  \ => iface\n  -- ^ Interface type of the component you are looking for\n  -> Sim
  (Maybe ComponentId)\n  -- ^ 'Just' 'ComponentID' if a component is found, 'Nothing'
  otherwise\n```\n\n#### Handling `Dynamic` Values\n\n```haskell\n-- | Converts a
  'Dynamic' object back into an ordinary Haskell value of the\n--   correct type.\nunmarshall
  ::\n  Typeable a\n  => Dynamic  -- ^ The dynamically-typed object\n  -> a        --
  ^ Returns: the value of the first argument, if it has the\n              -- correct
  type, otherwise it gives an error.\n```\n\nReferences\n----------\n\n[1] Here is
  a chapter from a book that introduces the correspondence between Haskell types and
  C types:\nhttp://book.realworldhaskell.org/read/defining-types-streamlining-functions.html\n\n[2]
  Some resources that discuss monads: http://book.realworldhaskell.org/read/monads.html
  and http://learnyouahaskell.com/a-fistful-of-monads\n\n[3] A more elaborate explanation
  of purity can be found here: http://learnyouahaskell.com/introduction#so-whats-haskell\n"
license-name: BSD-3-Clause
