homepage: https://github.com/msiegenthaler/SouSiT
changelog-type: ''
hash: 262c31ffc60911f5cf6c7b0779b47d8d86687434e7c40e0d16c24cbca1e8bed2
test-bench-deps:
  test-framework: ! '>=0.3.3'
  base: ! '>4 && <5'
  test-framework-quickcheck2: ! '>=0.2.9'
  sousit: -any
  mtl: -any
  QuickCheck: ! '>2'
maintainer: msiegenthaler@inventsoft.ch
synopsis: ! 'Source/Sink/Transform: An alternative to lazy IO and iteratees.'
changelog: ''
basic-deps:
  cereal: -any
  bytestring: -any
  stm: -any
  base: ! '>4 && <5'
  mtl: -any
  transformers: -any
  resourcet: -any
all-versions:
- '0.3'
- '0.4'
author: Mario Siegenthaler
latest: '0.4'
description-type: markdown
description: ! "SouSiT\n======\n\nHaskell library for *Sources*, *Sinks* and *Transformers*.\nThe
  data is pushed from the source through the transfomers into the sink. The sink or
  a transfomer can decide at any time to end the transfer (see Iteratees).\nThe transformers
  are very reusable since they can not depend on side effects, so they can be used
  with files as well as with simple lists.\n\nAllows you to build pipelines such as:\n\n
  \   ghci> listSource [1..10] $$ T.map(+1) =$= T.buffer 3 0 (+) =$ listSink\n    [9,18,27,11]\n\nits
  possible to mix various type of sources and sinks, such as in:\n\n    ghci> fileSourceLine
  \"myfile.txt\" $$ T.drop 1 =$= T.map (++ \"!\") =$ listSink\n    [\"Hello Mario!\",
  \"How're you doing?!\"]\n\nAvailable Sources\n-----------------\n* List\n* Handle
  (IO)\n* File\n\nMore types of sources can be added by users of the library. Consider
  using actionSource or bracketActionSource as a help if you do so.\n\n\n\nAvailable
  Sinks\n---------------\n* List\n* Handle (IO)\n* File\n* monadic sink\n\nMore types
  of sinks can be added by users of the library. Consider using either actionSink
  or the monadic sink interface if implementing your own sinks.\n\n### Monadic Sink\nYou
  can write sink in monad style\n\nExample that reads the first input, then skips
  the next three values and then reads two values and terminates. It outputs a tuple
  with the three values read.\n\n    mySink = do v1 <- input\n                skip
  3\n                v2 <- input\n                v3 <- input\n                return
  (v1, v2, v3)\n"
license-name: BSD-3-Clause
