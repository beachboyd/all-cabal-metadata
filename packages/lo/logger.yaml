homepage: https://github.com/wdanilo/haskell-logger
changelog-type: ''
hash: 38e86448cbd8abea17af2ce39a99886e7e4f4afc2c64a5bd34a93adc95c18949
test-bench-deps: {}
maintainer: Wojciech Danilo <wojciech.danilo@gmail.com>
synopsis: Fast & extensible logging framework
changelog: ''
basic-deps:
  ansi-wl-pprint: ! '>=0.6'
  base: ! '>=4.7 && <=4.9'
  time: ! '>=1.4.2'
  containers: ! '>=0.5'
  lens: ! '>=4.6'
  mtl: ! '>=2.1.3.1'
  unagi-chan: ! '>=0.3'
  transformers: ! '>=0.3.0.0'
  template-haskell: ! '>=2.9'
  transformers-compat: ! '>=0.4.0.0'
  time-locale-compat: ! '>=0.1.0.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Wojciech Danilo
latest: 0.1.0.2
description-type: markdown
description: ! "# haskell-logger\nFast &amp; extensible logging framework for Haskell!\n\n#
  Overview\n\nLogger is a fast and extensible Haskell logging framework. \n\nLogger
  allows you to log any kind of messages in both `IO` as well as pure code, depending
  on the information you want to log.\n\nThe framework bases on the idea of logger
  transformer stack defining the way it works. You can build your own stack to highly
  tailor the behaviour to your needs, starting with such simple things, like logging
  messages to a list, ending on logging compile-time, priority-filtered messages from
  different threads and gathering them in other logger thread.\n\n# Documentation\n\nThe
  following documentation describes how to use the framework, how it works under the
  hood and how can you extend it.\n\n## Basics\n\nThis chapter covers all the basic
  information about logger transformers shipped with the framework.\n\n### BaseLogger\n\nLet's
  start with a very simple example:\n\n```haskell\nimport System.Log.Simple\n\ntest
  = do\n    debug \"a debug\"\n    warning \"a warning\"\n    return \"Done\"\n\nmain
  = print $ runBaseLogger (Lvl, Msg) test\n-- output: \"Done\"\n```\n\nThere are few
  things to note here:\n* We are importing the `System.Log.Simple` interface. It provides
  all necessary functions to start with the library. There is another interface, `System.Log.TH`
  (using `TemplateHaskell` to gather logs location information), which provides similar
  functionality, but allows additionally logging such informations like file or module
  name and log location inside the file.\n* We are running the logger using `runBaseLogger`
  function providing the description what type of information we want to gather with
  each call to `debug`, `warning`, etc. This is very important, because we can choose
  only the needed information, like messages and levels and run the logger as a pure
  code. If you try to run the example with other description, like ```(Lvl, Msg, Time)```,
  it will fail complaining that it needs the `IO` monad for that.\n* The `BaseLogger`
  is the most base logger transformer and it should be run as a base for every logger
  transformer stack. It does not log any messages under the hood, in fact you cannot
  do anything sensible with it.\n\nAs every logger transformer, `BaseLogger` has an
  appropriate transformer type called `BaseLoggerT`. You can use it just as every
  monad transformer, to pipe computations to an underlying monad. Using the transformer
  we can ask our logger to log also such information as the time:\n\n```haskell\nmain
  = print =<< runBaseLogger (Lvl, Msg, Time) test\n```\n\nThere is one very important
  design decision. All the logger transformers, apart from the base one, pass the
  newly registered log to underlying transformers. This way we can create a transformer
  that writes messages to disk and combine it with the one, that registers the logs
  in a list. There are some examples showing this behavior later in this document.\n\n###
  WriterLogger\n\n`WriterLogger` is just like `Writer` monad - it gathers all the
  logs into a list and returns it:\n```haskell\nmain = print $ (runBaseLogger (Lvl,
  Msg) . runWriterLoggerT) test\n```\nAs a result we get tuple, whose first element
  is the function's return value, while the second is list of all Log messages. For
  now the log message is not very friendly nested-tuple structure, but it will change
  in the next versions of the library. To be clear, the single log looks like this
  at the moment:\n```haskell\nLog {fromLog = (Data {recBase = Lvl, recData = LevelData
  0 \"Debug\"},(Data {recBase = Msg, recData = \"a debug\"},()))}\n```\n\nWriterLogger
  should work as fast as just `WriterT` monad transformer with `Dlist` used for logs
  gathering, because there should be no overhead introduced by the library.\n\n###
  HandlerLogger\n\n`HandlerLogger` allows you to handle messages using handlers and
  log formatters. At last we will see something useful as a logging library! To start,
  let's look at a simple example:\n\n```haskell\nimport System.Log.Simple\n\ntest
  = do\n    addHandler $ printHandler Nothing\n    debug \"a debug\"\n    warning
  \"a warning\"\n\nmain = print =<< (runBaseLoggerT (Lvl, Msg) . runHandlerLoggerT
  defaultFormatter) test\n```\n\nAs a result, we get a colored output (on all platforms,
  including Windows):\n\n```haskell\n[Debug] a debug\n[Warning] a warning\n\"Done\"\n```\n\nOk,
  so what's happening here? The function `addHandler` registers new log handler in
  current logger monad. The ```Nothing``` just indicates, that this handler does not
  need any special formatter and can use the default one, provided when executing
  the monad - in this case, the `defaultFormatter`. We can of course define our custom
  message formatters.\n\nFor now only the `printHandler` is provided, but it is straightforward
  to define custom handlers. Others will be added in the next versions of the library.\n\n####
  Formatters\n\nIt is possible to define a custom message formatter. To do it, import
  the module `System.Log.Format` and use so called formatter builder. Let's see how
  the `defaultFormatter` is defined:\n\n```haskell\ndefaultFormatter = colorLvlFormatter
  (\"[\" <:> Lvl <:> \"] \") <:> Msg\n```\n\nYou might ask now, what are `Lvl` or
  `Msg`. They are \"data providers\". You will learn about them later, for now just
  remember, you can use them while running loggers as well as defining formatters.
  There is one very important thing to note here - you cannot use any data provider
  in your logger, that was not declared to be gathered when the logger is run! In
  later chapters you will also learn how to create custom data providers.\n\nSo what
  if we would like to output not only the message and its priority level, but also
  the module name and location of the message in the source file? Such logger is also
  defined and it's called `defaultFormatterTH`. You cannot use it using the `Simple`
  interface, so let's see for now how it is defined:\n\n```haskell\ndefaultFormatterTH
  = colorLvlFormatter (\"[\" <:> Lvl <:> \"] \") <:> Loc <:> \": \" <:> Msg\n```\n\nIts
  output is similar to:\n\n```haskell\n[Debug] Main.hs:4: a debug\n[Warning] Main.hs:5:
  a warning\n```\n\n### PriorityLogger\n\nThe `PriorityLogger` is used to filter the
  messages by priority levels. It is important to note here, that `PriorityLogger`
  is able to filter them at compile time, so if we need some `IO` actions to construct
  a log, like reading a time or process id, they will not be executed when the priority
  of such log is too low. Let's see how we can use it:\n\n```haskell\ntest = do\n
  \   addHandler $ printHandler Nothing\n    debug \"a debug\"\n    setPriority Debug\n
  \   debug \"another debug\"\n    warning \"a warning\"\n    \nprint =<< ( runBaseLoggerT
  (Lvl, Msg) \n          . runHandlerLoggerT defaultFormatter \n          . runPriorityLoggerT
  Warning \n          ) test\n```\n\nAs the output we get:\n\n```haskell\n[Debug]
  another debug\n[Warning] a warning\n```\n\n### ThreadedLogger\n\nThe `ThreadedLogger`
  is a very fancy one. It allows to separate the actual logging from program. Program
  is being run on a separate thread, while logs are being gathered by the main thread.
  You can fork the program as many times you want and all the logs will be sent to
  the log-gather routine. This allows to get nicely not-broken output in terminal
  or in files from different threads. The program stops after all the logs have been
  processed. Let's look at the example:\n\n```haskell\nimport           System.Log.Simple\nimport
  qualified System.Log.Logger.Thread as Thread\nimport           Control.Monad.IO.Class
  (liftIO)\n\ntest = do\n    addHandler $ printHandler Nothing\n    debug \"a debug\"\n
  \   setPriority Debug\n    debug \"another debug\"\n    warning \"a warning\"\n
  \   Thread.fork $ do\n        liftIO $ print \"Threaded print\"\n        debug \"debug
  in fork\"\n    liftIO $ print \"End of the test!\"\n    \nprint =<< ( runBaseLoggerT
  (Lvl, Msg) \n          . runHandlerLoggerT defaultFormatter \n          . runPriorityLoggerT
  Warning \n          . runThreadedLogger\n          ) test\n```\n\nAs the output
  we get:\n\n```haskell\n\"Threaded print\"\n\"End of the test!\"\n[Debug] another
  debug\n[Warning] a warning\n[Debug] debug in fork\n```\n\nThe output may of course
  vary, based on the way threads will be scheduled, because we use `print` functions
  here. Anyway you can notice, that the prints were executed at the same time as all
  the logging.\nIt is important to use ```Thread.fork```, which is just a simple wrapper
  around `forkIO`.\n\n#### Exception handling\n\nAll the loggers behave in a proper
  way, when an exception is raised. The exception will be evaluated after all necessary
  logging has been done:\n\n```haskell\ntest = do\n    addHandler $ printHandler Nothing\n
  \   debug \"debug\"\n    Thread.fork $ do\n        fail \"oh no\"\n        debug
  \"debug in fork\"\n    warning \"a warning\"\n\nprint =<< ( runBaseLoggerT (Lvl,
  Msg) \n          . runHandlerLoggerT defaultFormatter \n          . runThreadedLogger\n
  \         ) test\n```\n\nResults in:\n\n```haskell\n[Debug] debug\nMain.hs: user
  error (oh no)\n```\n\n### DropLogger\n\nThe `DropLogger` allows you to simply drop
  all logs from the function. It could be used if you want to execute a subroutine
  but just discard all logging there. The log messages would be completely discarded
  - they will not even be created.\n\n## TemplateHaskell interface\n\nYou can use
  more advanced interface to be able to log more information, like module name or
  file number. To use it, import ```System.Log.TH``` instead of ```System.Log.Simple```
  and use TemplateHaskell syntax to report logs:\n\n```haskell\nimport System.Log.TH\n\ntest
  = do\n    addHandler $ printHandler Nothing\n    $(debug \"a debug\")\n    setPriority
  Debug\n    $(debug \"another debug\")\n    $(warning \"a warning\")\n\nprint =<<
  ( runBaseLoggerT (Lvl, Msg, Loc) \n          . runHandlerLoggerT defaultFormatterTH\n
  \         . runPriorityLoggerT Warning \n          . runThreadedLogger\n          )
  test\n```\n\nWhich results in the following output:\n\n```haskell\n[Debug] Main:7:
  another debug\n[Warning] Main:8: a warning\n```\n\n## Filtering messages\n\nThe
  framework allows you to filter messages after they have been created. It is slower
  than using `PriorityLogger` because the messages are created even if they are not
  needed. It could be used for example in a situation, where you've got many handlers
  and you want to output only important logs to the screen and all the logs into files.
  Here's a small example showing how it works.\n\n```haskell\ntest = do\n    addHandler
  $ addFilter (lvlFilter Warning) $ printHandler Nothing\n    $(debug \"a debug\")\n
  \   $(warning \"a warning\")\n\nprint =<< ( runBaseLoggerT (Lvl, Msg, Loc) \n          .
  runHandlerLoggerT defaultFormatterTH\n          ) test\n```\n\nWhich results in:\n\n```haskell\n[Warning]
  Main:5: a warning\n```\n\n## Extending the logger\n\nIt is possible to extend the
  logging framework in any way you want. All the functionality you have seen above
  are just simple logger transformers and you can modify them in a ton of ways or
  create custom ones.\n\n### Custom priority levels\n\nDefining a custom priority
  level is as easy as creating a new datatype that derives the `Enum` and start using
  it. The default priorities are defined as:\n\n```haskell\ndata Level = Debug     --
  ^ Debug Logs\n           | Info      -- ^ Information\n           | Notice    --
  ^ Normal runtime conditions\n           | Warning   -- ^ General Warnings\n           |
  Error     -- ^ General Errors\n           | Critical  -- ^ Severe situations\n           |
  Alert     -- ^ Take immediate action\n           | Panic     -- ^ System is unusable\n
  \          deriving (Eq, Ord, Show, Read, Enum)\n```\n\n### Custom data providers\n\nIt
  is possible to define custom data providers. Let's look how the `Msg` data provided
  is defined in the library:\n\n```haskell\ndata Msg = Msg deriving (Show)\ntype instance
  DataOf Msg = String\n```\n\nThat's it. There is no more code for it. After creating
  such new datatype you can create a pretty printing instance for it and use it just
  like all other data even in the formatter builder!\nBut how the data is being registered?
  Let's look how the `debug` function is defined in the `Simple` library:\n\n```haskell\ndebug
  = log empty Debug\n```\n\nThe `log` function is a very generic one and allows creating
  almost any logging functionality. If for example we would love to add a new data
  provider `Foo` registering an `Int`, we can do this simply by:\n\n```haskell\ndata
  Foo = Foo deriving (Show)\ntype instance DataOf Foo = Int\n\ndebugFoo i = log (appData
  Foo i empty) Debug\n\ninstance PPrint Foo where\n    pprint = text . show\n\nfooFormatter
  = defaultFormatter <:> \" (\" <:> Foo <:> \")\"\n\ntest = do\n    addHandler $ printHandler
  Nothing\n    debugFoo 7 \"my custom debug\"\n\nprint =<< ( runBaseLoggerT (Lvl,
  Msg, Foo) \n          . runHandlerLoggerT defaultFormatter\n          ) test\n```\n\nWhich
  results in:\n\n```haskell\n[Debug] my custom debug (7)\n```\n\nA new function `appData`
  is used here. It allows providing a data to be registered when creating log messages.
  You can provide this way any data you want and only the data will be used, that
  is explicitly defined when running a logger. If you run a logger asking about data
  that was not provided when constructing the log, the framework will look for its
  monad data provider (described later). If there will be no such provider, it will
  fail at compile-time.\n\nIn fact, if we look how the log function is defined, we
  will find some similarities:\n\n```haskell\nlog rec pri msg = do\n    [...]\n    appendRecord
  $ appData Lvl (mkLevel pri)\n                 $ appData Msg msg\n                 $
  rec\n```\n\n#### Monad data providers\n\nWhat happens when such data is not provided
  when constructing the message? Like `Time` data? If data is not available at construction
  time, the logger looks for its `DataGetter` instance. A simple `Time` data provider
  could be defined as:\n\n```haskell\nimport Data.Time.Clock  (getCurrentTime, UTCTime)\nimport
  Data.Time.Format (formatTime, defaultTimeLocale)\n\ndata Time = Time deriving (Show)\ntype
  instance DataOf Time = UTCTime\n\ninstance MonadIO m => DataGetter Time m where\n
  \   getData = do liftIO $ Data Time <$> getCurrentTime\n\ninstance Pretty UTCTime
  where\n    pretty = text . formatTime defaultTimeLocale \"%c\"\n\ndefaultTimeFormatter
  = colorLvlFormatter (\"[\" <:> Lvl <:> \"] \") <:> Time <:> \": \" <:> Msg\n```\n\nThat's
  it! You can use any function inside - both pure as well as IO. If you use pure function,
  just return the value. If you will execute `runBaseLogger` it will be evaluated
  inside the `Identity` monad.\n\n### Custom logger transformers\n\nIt's also straightforward
  to define custom logger transformers. They have to be instances of some datatypes.
  To know more about it, look at example transformers inside the `System.Log.Logger`
  module.\n\n# Conclusion\n\nThis is a new logging library written for purposes of
  fast logging between threads. It is still under development, so you can expect some
  api changes. There is still some functionality missing, like file handlers, but
  as you have seen, it is easy to define such. Any help would be welcome.\n\nHappy
  logging!\n"
license-name: Apache-2.0
