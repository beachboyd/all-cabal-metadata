homepage: https://github.com/greydot/log-effect
changelog-type: markdown
hash: bb2bb781c8fe9fc5020db1323a99dfc051363a8689d9c91ad3a47aea2f063c58
test-bench-deps: {}
maintainer: Lana Black <lanablack@amok.cc>
synopsis: An extensible log effect using extensible-effects
changelog: ! "# Changelog\n\n## Version 1.0\n\n\t* Complete revamp of the logging
  effects.\n\n\t* Add LogM effect.\n\n\t* Add MonadBaseControl instances.\n\n\t* Remove
  fast-logger dependency in favor of a custom typeclass.\n\n\n\n## Version 0.4\n\n
  * add a proxy to most `runLog` functions to not have to supply the full\n   specialized
  type signature. Use something like `data Proxy a = Proxy` or\n   the one from `tagged`.\n\n
  * remove `ShowLog` typeclass in favor of `ToLogString` from `fast-logger`.\n"
basic-deps:
  bytestring: ! '>=0.10 && <0.11'
  extensible-effects: ! '>=3.0.0.0 && <4.0.0.0'
  base: ! '>=4.6 && <5.0'
  text: ! '>=1.2 && <1.3'
  monad-control: ! '>=1.0 && <1.1'
  transformers-base: ! '>=0.4 && <0.5'
all-versions:
- '0.2.0.1'
- '0.2.0.2'
- '0.3.0.1'
- '0.3.0.2'
- '0.4.0.0'
- '0.4.0.1'
- '1.0.0'
- '1.0.1'
- '1.1.0'
- '1.1.1'
author: Tobias Florek, Lana Black
latest: '1.1.1'
description-type: markdown
description: ! "# Log effect\n\n[![Build Status](https://secure.travis-ci.org/greydot/log-effect.png)](http://travis-ci.org/greydot/log-effect)\n\nAn
  extensible log effect using extensible-effects. This library introduces two\nnew
  effects to your extensible effects arsenal, `Log` and `LogM`. In short, if\nyou'd
  like to add logging to pure code (that is, without Lift effect), `Log` is\nyour
  best choice, otherwise go for `LogM`.\n\n## Log\n\nThis is the simpler of the two.
  `Log` allows for logging in pure code, as well\nas filtering using `filterLog`.
  The downside of this effect is that when your\ncode launches multiple threads using
  `async` or `forkIO`, messages from every\nthread other than the thread where the
  handler is run will be lost.\n\n## LogM\n\n`LogM` loses the ability to provide logging
  in pure code, but at the same time\nallows to log messages from multiple threads.\n\n##
  Example\n\n```haskell\nimport Control.Concurrent.Lifted\nimport Control.Eff\nimport
  Control.Eff.Lift\nimport Control.Eff.Log\n\nsomeComp :: ( [ Log String, LogM IO
  String ] <:: r\n            , LiftedBase IO r\n            ) => Eff r ()\nsomeComp
  = do logE \"Hello!\"\n              logM \"Greetings from the main thread!\"\n              \n
  \             _ <- fork $ do logM \"This is a new thread, and this message is still
  visible.\"\n                             logE \"Unfortunately, this one is not.\"\n
  \             return ()\n\nmain :: IO ()\nmain = runLift $ runLog logger $ runLogM
  logger $ someComp\n  where\n    -- Here we have to provide an explicit signature
  for our logger,\n    -- because the compiler is unable to figure it out due to ambiguity.\n
  \   logger = stdoutLogger :: Logger IO String\n```\n\n## See also\n\n[log-effect-syslog](http://hackage.haskell.org/package/log-effect-syslog)\nprovides
  necessary types and functions to work with syslog.\n"
license-name: MIT
