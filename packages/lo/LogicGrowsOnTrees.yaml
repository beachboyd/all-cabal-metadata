homepage: ''
changelog-type: markdown
hash: b2d16bce8bb2df9238d0a3ce46c1aa15c0ca771ab391e9252648679bbcdf10e3
test-bench-deps:
  test-framework-hunit: ! '>=0.2 && <0.4'
  void: ==0.6.*
  cereal: ==0.4.*
  MonadCatchIO-transformers: ==0.3.*
  bytestring: ! '>=0.9 && <0.11'
  test-framework: ! '>=0.6 && <0.9'
  stm: ! '>=2.3 && <2.5'
  base: ! '>4 && <5'
  time: ==1.4.*
  uuid: ! '>=1.2 && <1.4'
  composition: ! '>=0.2 && <1.1'
  test-framework-quickcheck2: ! '>=0.2 && <0.4'
  criterion: ! '>=0.6 && <0.9'
  HUnit: ==1.2.*
  data-ivar: ==0.30.*
  smallcheck: ! '>=1.0 && <1.2'
  containers: ! '>=0.4 && <0.6'
  lens: ! '>=3.8 && <4.1'
  quickcheck-instances: ! '>=0.3.1 && <0.4'
  LogicGrowsOnTrees: -any
  hslogger: ==1.2.*
  hslogger-template: ==2.0.*
  operational: ==0.2.*
  transformers: ! '>=0.2 && <0.4'
  random: ==1.0.*
  deepseq: ==1.3.*
  QuickCheck: ! '>=2.4 && <2.7'
  test-framework-smallcheck: ==0.2.*
  directory: ! '>=1.1 && <1.3'
maintainer: Gregory Crosswhite <gcrosswhite@gmail.com>
synopsis: a parallel implementation of logic programming using distributed tree exploration
changelog: ! "version 1.1.0.2\n===============\n\n* Tweaked the test suite to resolve
  minor problems when running on Windows and\n  older GHCs.\n\n* Added the documentation
  files to the Hackage source distribution.\n\n* Deleted some no longer relevant advice
  on building the tests (as the version\n  dependency of test-framework-quickcheck
  was finally bumped).\n\n\nversion 1.1.0.1\n===============\n\n* Bumped lens version
  dependency.\n\n\nVersion 1.1\n===========\n\nHighlights\n----------\n\n* Many performance
  enhancements, speeding up code using `Main` and `Threads` by\n  a factor of two
  and reducing the overhead of `LogicGrowsOnTrees` overall by a\n  factor of two.\n\n\nNew
  Features\n------------\n\n* Now statistics can be logged on a regular basis.\n\n*
  Exposed `getCurentStatistics` in the `RequestQueueMonad`, allowing one to\n  obtain
  the statistics at any time during the run.\n\n* Added a system for estimating the
  total number of CPU-hours used (including\n  the time spent waiting for a workload)
  in total by all of the workers during\n  the run.\n\n* Made the types `Arity` and
  `ArityAndDepth` serializable.\n\n\nMiscellaneous\n-------------\n\n* Revamped the
  command line options for specifying which statistics should be\n  displayed in order
  to make them easier to use.\n\n* Tweaked the log levels of some of the logged messages.\n\n*
  Bumped version dependencies.\n\n* Now `Context` is a list rather than a `Seq`.  (This
  change is what caused the\n  bump to version 1.1 to conform with the PVP.)\n\n\nAttempted
  Ideas That Turned Out To Be Bad\n-----------------------------------------\n\n*
  Converting from `operational` to `free` led to a performance regression.\n"
basic-deps:
  void: ==0.6.*
  cereal: ! '>=0.3 && <0.5'
  MonadCatchIO-transformers: ==0.3.*
  bytestring: ! '>=0.9 && <0.11'
  PSQueue: ==1.1.*
  sequential-index: ==0.2.*
  split: ==0.2.*
  stm: ! '>=2.3 && <2.5'
  base: ! '>4 && <5'
  time: ==1.4.*
  composition: ! '>=0.2 && <1.1'
  yjtools: ! '>=0.9.7 && <0.10'
  prefix-units: ==0.1.*
  AbortT-transformers: ==1.0.*
  AbortT-mtl: ==1.0.*
  data-ivar: ==0.30.*
  containers: ! '>=0.4 && <0.6'
  lens: ! '>=3.8 && <4.1'
  LogicGrowsOnTrees: -any
  hslogger: ==1.2.*
  old-locale: ==1.0.*
  hslogger-template: ==2.0.*
  cmdtheline: ==0.2.*
  mtl: ==2.1.*
  operational: ==0.2.*
  transformers: ! '>=0.2 && <0.4'
  multiset: ==0.2.*
  pretty: ==1.1.*
  monoid-statistics: ==0.3.*
  derive: ! '>=2.5.11 && <2.6'
  directory: ! '>=1.1 && <1.3'
all-versions:
- 1.0.0
- 1.0.0.0.1
- '1.1'
- 1.1.0.1
- 1.1.0.2
author: Gregory Crosswhite
latest: 1.1.0.2
description-type: markdown
description: ! "What is LogicGrowsOnTrees?\n==========================\n\nLogicGrowsOnTrees
  is a library that lets you use a standard Haskell domain\nspecific language (`MonadPlus`
  and friends) to write logic programs (by which we\nmean programs that make non-deterministic
  choices and have guards to enforce\nconstraints) that you can run in a distributed
  setting.\n\n\nCould you say that again in Haskellese?\n=======================================\n\nLogicGrowsOnTrees
  provides a logic programming monad designed for distributed\ncomputing;  specifically,
  it takes a logic program (written using `MonadPlus`),\nrepresents it as a (lazily
  generated) tree, and then explores the tree in\nparallel.\n\n\nWhat do you mean
  by \"distributed\"?\n==================================\n\nBy \"distributed\" I
  mean parallelization that does not required shared memory but\nonly some form of
  communication. In particular there is package that is a\nsibling to this one that
  provides an *adapter* for MPI that gives you\nimmediate access to large numbers
  of nodes on most supercomputers. In fact, the\nfollowing is the result of an experiment
  to see how well the time needed to\nsolve the N-Queens problem scales with the number
  of workers for N=17, N=18, and\nN=19 on a local cluster:\n\n![Alt text](scaling/scaling.png
  \"Scaling experiment\")\n\nThe above was obtained by running a job, which counts
  the number of solutions,\nthree times for each number of workers and problem size,
  and then taking the\nshortest time of each set of three*; the maximum number of
  workers for this\nexperiment (256) was limited by the size of the cluster.  From
  the above plot we\nsee that scaling is generally good with the exception of the
  N=18 case for 128\nworkers and above, which is not necessarily a big deal since
  the total running\ntime is under 10 seconds.\n\n\\* All of the data points for each
  value of N were usually within a small\npercentage of one another, save for (oddly)
  the *left*-most data point\n(i.e., the one with the fewest workers) for each problem
  size, which varied from\n150%-200% of the best time; the full data set is available
  in the `scaling/`\ndirectory.\n\n\nWhen would I want to use this package?\n======================================\n\nThis
  package is useful when you have a large space that can be defined\nefficiently using
  a logic program that you want to explore to satisfy some goal,\nsuch as finding
  all elements, counting the number of elements, finding just one\nor a few elements,
  etc.\n\nLogicGrowsOnTrees is particularly useful when your solution space has a
  lot of\nstructure as it gives you full control over the non-deterministic choices
  that\nare made, which lets you entirely avoid making choices that you know will
  end in\nfailure, as well as letting you factor out symmetries so that only one solution\nis
  generated out of some equivalence class. For example, if permutations result\nin
  equivalent solutions then you can factor out this symmetry by only choosing\nlater
  parts of a potential solution that are greater than earlier parts of the\nsolution.\n\nWhat
  does a program written using this package look like?\n=========================================================\n\nThe
  following is an example of a program (also given in\n`examples/readme-simple.hs`)
  that counts the number of solutions to the n-queens\nproblem for a board size of
  10:\n\nNOTE: I have optimized this code to be (hopefully) easy to follow, rather
  than\nto be fast.\n\n```haskell\nimport Control.Monad\nimport qualified Data.IntSet
  as IntSet\n\nimport LogicGrowsOnTrees\nimport LogicGrowsOnTrees.Parallel.Main\nimport
  LogicGrowsOnTrees.Parallel.Adapter.Threads\nimport LogicGrowsOnTrees.Utils.Word_\nimport
  LogicGrowsOnTrees.Utils.WordSum\n\n-- Code that counts all the solutions for a given
  input board size.\nnqueensCount 0 = error \"board size must be positive\"\nnqueensCount
  n =\n    -- Start with...\n    go n -- ...n queens left...\n       0 -- ... at row
  zero...\n       -- ... with all columns available ...\n       (IntSet.fromDistinctAscList
  [0..fromIntegral n-1])\n       IntSet.empty -- ... with no occupied negative diagonals...\n
  \      IntSet.empty -- ... with no occupied positive diagonals.\n  where\n    --
  We have placed the last queen, so this is a solution!\n    go 0 _ _ _ _ = return
  (WordSum 1)\n\n    -- We are still placing queens.\n    go n\n       row\n       available_columns\n
  \      occupied_negative_diagonals\n       occupied_positive_diagonals\n     = do\n
  \       -- Pick one of the available columns.\n        column <- allFrom $ IntSet.toList
  available_columns\n\n        -- See if this spot conflicts with another queen on
  the negative diagonal.\n        let negative_diagonal = row + column\n        guard
  $ IntSet.notMember negative_diagonal occupied_negative_diagonals\n\n        -- See
  if this spot conflicts with another queen on the positive diagonal.\n        let
  positive_diagonal = row - column\n        guard $ IntSet.notMember positive_diagonal
  occupied_positive_diagonals\n\n        -- This spot is good!  Place a queen here
  and move on to the next row.\n        go (n-1)\n           (row+1)\n           (IntSet.delete
  column available_columns)\n           (IntSet.insert negative_diagonal occupied_negative_diagonals)\n
  \          (IntSet.insert positive_diagonal occupied_positive_diagonals)\n\nmain
  =\n    -- Explore the tree generated (implicitly) by nqueensCount in parallel.\n
  \   simpleMainForExploreTree\n        -- Use threads for parallelism.\n        driver\n\n
  \       -- Function that processes the result of the run.\n        (\\(RunOutcome
  _ termination_reason) -> do\n            case termination_reason of\n                Aborted
  _ -> error \"search aborted\"\n                Completed (WordSum count) -> putStrLn
  $ \"found \" ++ show count ++ \" solutions\"\n                Failure _ message
  -> error $ \"error: \" ++ message\n        )\n\n        -- The logic program that
  generates the tree to explore.\n        (nqueensCount 10)\n```\n\nThis program requires
  that the number of threads be specified via `-n #` on the\ncommand line, where `#`
  is the number of threads. You can use `-c` to have the\nprogram create a checkpoint
  file on a regular basis and `-i` to set how often\nthe checkpoint is made (defaults
  to once per minute); if the program starts up\nand sees the checkpoint file then
  it automatically resumes from it. To find out\nmore about the available options,
  use `--help` which provides an automatically\ngenerated help screen.\n\nThe above
  uses threads for parallelism, which means that you have to compile it\nusing the
  `-threaded` option. If you want to use processes instead of threads\n(which could
  be more efficient as this does not require the additional overhead\nincurred by
  the threaded runtime), then install `LogicGrowsOnTrees-processes`\nand replace `Threads`
  with `Processes` in the import at the 8th line. If you\nwant workers to run on different
  machines then install\n`LogicGrowsOnTrees-processes` and replace `Threads` with
  `Network`. If you have\naccess to a cluster with a large number of nodes, you will
  want to install\n`LogicGrowsOnTrees-MPI` and replace `Threads` with `MPI`.\n\nIf
  you would prefer that the problem size be specified at run-time via a\ncommand-line
  argument rather than hard-coded at compile time, then you can use\nthe more general
  mechanism illustrated as follows (a complete listing is given\nin `examples/readme-full.hs`):\n\n```haskell\nimport
  Control.Applicative\nimport System.Console.CmdTheLine\n...\nmain =\n    -- Explore
  the tree generated (implicitly) by nqueensCount in parallel.\n    mainForExploreTree\n
  \       -- Use threads for parallelism.\n        driver\n\n        -- Use a single
  positional required command-line argument to get the board size.\n        (getWord\n
  \        <$>\n         (required\n          $\n          pos 0\n            Nothing\n
  \           posInfo\n              { posName = \"BOARD_SIZE\"\n              , posDoc
  = \"board size\"\n              }\n         )\n        )\n\n        -- Information
  about the program (for the help screen).\n        (defTI { termDoc = \"count the
  number of n-queens solutions for a given board size\" })\n\n        -- Function
  that processes the result of the run.\n        (\\n (RunOutcome _ termination_reason)
  -> do\n            case termination_reason of\n                Aborted _ -> error
  \"search aborted\"\n                Completed (WordSum count) -> putStrLn $\n                    \"for
  a size \" ++ show n ++ \" board, found \" ++ show count ++ \" solutions\"\n                Failure
  _ message -> error $ \"error: \" ++ message\n        )\n\n        -- The logic program
  that generates the tree to explore.\n        nqueensCount\n```\n\n\nWhere can I
  learn more?\n=======================\n\nRead [TUTORIAL.md](TUTORIAL.md) for a tutorial
  of how to write and run logic\nprograms using this package, [USERS_GUIDE.md](USERS_GUIDE.md)
  for a more\ndetailed explanation of how things work, and the haddock documentation
  available\nat http://hackage.haskell.org/package/LogicGrowsOnTrees.\n\nWhat platforms
  does it support:\n===============================\n\nThe following three packages
  have been tested on Linux, OSX, and Windows using\nthe latest Haskell Platform (2013.2.0.0):\n\n*
  `LogicGrowsOnTrees` (+ Threads adapter)\n\n* `LogicGrowsOnTrees-processors`\n\n*
  `LogicGrowsOnTrees-network`\n\n`LogicGrowsOnTrees-MPI` has been tested as working
  on Linux and OSX using\n[OpenMPI](http://www.open-mpi.org/), and since it only uses
  very basic\nfunctionality (just sending, probing, and receiving messages) it should
  work on\nany MPI implementation.\n\n(I wasn't able to try Microsoft's MPI implementation
  because it only let me\ninstall the 64-bit version (as my test machine was 64-bit)
  but Haskell on\nWindows is only 32-bit.)\n\n\nWhy would I use this instead of Cloud
  Haskell?\n==============================================\n\nThis package is higher
  level than Cloud Haskell in that it takes care of all the\nwork of parallelizing
  your logic program for you. In fact, if one wished one\ncould potentially write
  an *adapter* for LogicGrowsOnTrees that lets one use\nCloud Haskell as the communication
  layer.\n\n\nWhy would I use this instead of MapReduce?\n==========================================\n\nMapReduce
  and LogicGrowsOnTrees can both be viewed (in a *very* rough sense) as\nmapping a
  function over a large data set and then performing a reduction on it.\nThe primary
  difference between them is that MapReduce is optimized for the case\nwhere you have
  a huge data set that already exists (which means in particular\nthat optimizing
  I/O operations is a big deal), whereas LogicGrowsOnTrees is\noptimized for the case
  where your data set needs to be generated on the fly\nusing a (possibly quite expensive)
  operation that involves making many\nnon-deterministic choices some of which lead
  to dead-ends (that produce no\nresults). Having said that, LogicGrowsOnTrees can
  also be used like MapReduce by\nhaving your function generate data by reading it
  from files or possibly from a\ndatabase.\n\n\nWhy would I use this instead of a
  SAT/SMT/CLP/etc. solver?\n==========================================================\n\nFirst,
  it should be mentioned that one could use LogicGrowsOnTrees to implement\nthese
  solvers. That is, a solver could be written that uses the `mplus` function\nwhenever
  it needs to make a non-deterministic choices (e.g. when guessing\nwhether a boolean
  variable should be true or false) and `mzero` to indicate\nfailure (e.g., when it
  has become clear that a particular set of choices cannot\nresult in a valid solution),
  and then the solver gets to use the parallelization\nframework of this package for
  free! (For an example of such a solver, see the\n[incremental-sat-solver\npackage](http://hackage.haskell.org/packages/archive/incremental-sat-solver/0.1.7/doc/html/Data-Boolean-SatSolver.html)\n(which
  was not written by me).)\n\nHaving said that, if your problem can most easily and
  efficiently be expressed\nas an input to a specialized solver, then this package
  might not be as useful to\nyou. *However*, even in this case you *might* still want
  to consider using this\npackage if there are constraints that you cannot express
  easily or efficiently\nusing one of the specialized solvers because this package
  gives you complete\ncontrol over how choices are made which means that you can,
  for example, enforce\na constraint by only making choices that are guaranteed to
  satisfy it, rather\nthan generating choices that may or may not satisfy it and then
  having to\nperform an additional step to filter out all the ones that don't satisfy
  the\nconstraint.\n\n\nWhat is the overhead of using LogicGrowsOnTrees?\n================================================\n\nIt
  costs approximately up to twice as much time to use LogicGrowsOnTrees with\na single
  worker thread as it does to use the List monad. Fortunately, it is\npossible to
  eliminate most of this if you can switch to using the List monad\nnear the bottom
  of the tree. For example, my optimized n-queens solver switches\nto a loop in C
  when fewer than eleven queens remain to be placed. This is not\n``cheating'' for
  two reasons: first, because the hard part is the\nsymmetry-breaking code, which
  would have been difficult to implement and test in\nC due to its complexity, and
  second, because one can't rewrite all the code\nin C because then one would lose
  access to the automatic checkpointing and\nparallelization features.\n\nWhy Haskell?\n============\n\nHaskell
  has many strengths that made it ideal for this project:\n\n1. Laziness\n\n    Haskell
  has lazy* evaluation which means that it does not evaluate anything\n    until the
  value is required to make progress; this capability means that\n    ordinary functions
  can act as control structures. In particular, when you\n    use `mplus a b` to signal
  a non-deterministic choice, neither `a` nor `b`\n    will be evaluated unless one
  chooses to explore respectively the left and/or\n    right branch of the corresponding
  decision tree. This is very powerful\n    because it allows us to explore the decision
  tree of a logic program as much\n    or as little as we want and only have to pay
  for the parts that we choose to\n    explore.\n\n    \\* Technically Haskell is
  \"non-strict\" rather than \"lazy\", which means\n    there might be times in practice
  when it evaluates something more than is\n    strictly needed.\n\n\n2. Purity\n\n
  \   Haskell is a pure language, which means that functions have no (observable)\n
  \   side-effects other than returning a value*; in particular, this implies that\n
  \   all operations on data must be immutable, which means that they result in a\n
  \   new value (that may reference parts or even all of the old value) rather\n    than
  modifying the old value. This is an incredible boon because it means\n    that when
  we backtrack up to explore another branch of the decision tree we\n    do not have
  to perform an undo operation to restore the old values from the\n    new values
  because the old values were never lost! All you have to do is\n    \"forget\" about
  the new values and you are done. Furthermore, most data\n    structures in Haskell
  are designed to have efficient immutable operations\n    which try to re-use as
  much of an old value as possible in order to minimize\n    the amount of copying
  needed to construct the new value.\n\n    (Having said all of this, although it
  is strongly recommended that your\n    logic program be pure by making it have type
  `Tree`, as this will cause the\n    type system to enforce purity, you can add various
  kinds of side-effects by\n    using type `TreeT` instead; a time when it might make
  sense to do this is if\n    there is a data set that will be constant over the run
  which is large enough\n    that you want to read it in from various files or a database
  as you need it.\n    In general if you use side-effects then they need to be non-observable,\n
  \   which means that they are not affected by the order in which the tree is\n    explored
  or whether particular parts of the tree are explored more than\n    once.)\n\n    \\*
  Side-effects are implemented by, roughly speaking, having some types\n    represent
  actions that cause side-effects when executed.\n\n3. Powerful static type system\n\n
  \   When writing a very complicated program you want as much help as possible in\n
  \   making it correct, and Haskell's powerful type system helps you a lot here\n
  \   by harnessing the power of static analysis to ensure that all of the parts\n
  \   fit together correctly and to enforce invariants that you have encoded in\n
  \   the type system.\n\n\nI have more questions!\n======================\n\nThen
  please contact the author (Gregory Crosswhite) at gcrosswhite@gmail.com! :-)\n"
license-name: BSD-3-Clause
