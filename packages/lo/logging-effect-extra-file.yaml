homepage: https://github.com/jship/logging-effect-extra#readme
changelog-type: markdown
hash: bf5262453c380ba5eddd80dbd254e706d82b5db1bbe3633ef75660784462d276
test-bench-deps: {}
maintainer: Jason Shipman
synopsis: TH splices to augment log messages with file info
changelog: ! '# Change log


  ## 2.0.1


  * Update README.md example to use `prettyprinter` instad of `wl-pprint-text`


  ## 2.0.0


  * Include more info in `renderWithFile`

  * Bump upper bounds on `base` to 4.12 and `logging-effect` to 1.4

  * Replace `wl-pprint-text` with `prettyprinter` 1.2.*


  ## 1.1.2


  * Update haddock example to use `logInfoTH` instead of deprecated `logInformationalTH`
  splice


  ## 1.1.1


  * Update README to use `logInfoTH` instead of deprecated `logInformationalTH` splice


  ## 1.1.0


  * Deprecate `logInformationalTH` splice

  * Add `logInfoTH` splice


  ## 1.0.0


  * Initial release

'
basic-deps:
  base: ! '>=4.8 && <4.12'
  logging-effect: ! '>=1.1.0 && <1.4'
  logging-effect-extra-file: -any
  prettyprinter: ==1.2.*
  template-haskell: -any
all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 2.0.0
- 2.0.1
author: Jason Shipman
latest: 2.0.1
description-type: markdown
description: ! "# [logging-effect-extra-file][]\n\n## Synopsis\n\n```haskell\n{-#
  LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE
  TemplateHaskell #-}\n\nmodule Main (main) where\n\nimport Control.Monad.Log (MonadLog,
  WithSeverity)\nimport qualified Control.Monad.Log as Log\nimport Control.Monad.Log.Extra.File
  (WithFile)\nimport qualified Control.Monad.Log.Extra.File as Log\nimport qualified
  System.IO as IO\nimport Data.Text.Prettyprint.Doc (Doc)\n\napp :: MonadLog (WithSeverity
  (WithFile (Doc ann))) m => m ()\napp = do\n  $(Log.logEmergencyTH) \"GAH! All systems
  are down!!!\"\n  $(Log.logAlertTH) \"Red alert!\"\n  $(Log.logCriticalTH) \"Critical
  hit!\"\n  $(Log.logErrorTH) \"Errors abound!\"\n  $(Log.logWarningTH) \"Cargo number
  2331 has commandeered the vessel\"\n  $(Log.logNoticeTH) \"Heads up, but it's no
  biggie.\"\n  $(Log.logInfoTH) \"Does anyone read these?\"\n  $(Log.logDebugTH) \"Sleuthing
  with log messages...\"\n\nmain :: IO ()\nmain = Log.withFDHandler Log.defaultBatchingOptions
  IO.stdout 0.4 80 $ \\stdoutHandler ->\n  Log.runLoggingT app (stdoutHandler . Log.renderWithSeverity
  (Log.renderWithFile id))\n```\n\n## Usage via `stack`\n\n``` sh\n# Build the project.\nstack
  build\n\n# Run the `log-file-and-severity` example\nstack exec log-file-and-severity\n\n#
  Run the `log-file` example\nstack exec log-file\n```\n\n[logging-effect-extra-file]:
  https://github.com/jship/logging-effect-extra\n"
license-name: MIT
