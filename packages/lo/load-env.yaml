homepage: https://github.com/pbrisbin/load-env#readme
changelog-type: markdown
hash: bf34e47f41170c2ac159b89fa792f377cb186031dd9c5def6350a9f405c2b169
test-bench-deps:
  base: ! '>=4.8.0 && <5'
  hspec: -any
  parsec: -any
  doctest: -any
  temporary: -any
  load-env: -any
  directory: -any
maintainer: Pat Brisbin <pbrisbin@gmail.com>
synopsis: Load environment variables from a file.
changelog: ! 'TODO

'
basic-deps:
  base: ! '>=4.8.0 && <5'
  filepath: -any
  parsec: -any
  directory: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.2.0.0'
- '0.2.0.1'
author: Pat Brisbin <pbrisbin@gmail.com>
latest: '0.2.0.1'
description-type: markdown
description: ! "# load-env\n\n[![Build Status](https://circleci.com/gh/pbrisbin/load-env/tree/master.png)](https://circleci.com/gh/pbrisbin/load-env)\n\nThis
  is effectively a port of [dotenv][], whose README explains it best:\n\n> Storing
  configuration in the environment is one of the tenets of a\n> twelve-factor app.
  Anything that is likely to change between deployment\n> environments–such as resource
  handles for databases or credentials for\n> external services–should be extracted
  from the code into environment\n> variables.\n>\n> But it is not always practical
  to set environment variables on development\n> machines or continuous integration
  servers where multiple projects are run.\n> dotenv loads variables from a .env file
  into ENV when the environment is\n> bootstrapped.\n\n[dotenv]: https://github.com/bkeepers/dotenv\n\nThis
  library exposes functions for doing just that.\n\n## Usage\n\n```haskell\nimport
  LoadEnv\nimport System.Environment (lookupEnv)\n\nmain :: IO ()\nmain = do\n    loadEnv\n\n
  \   print =<< lookupEnv \"FOO\"\n```\n\n```console\n% cat .env\nFOO=bar\n% runhaskell
  main.hs\nJust \"bar\"\n```\n\n## Development & Test\n\n```\nstack setup\nstack build
  --pedantic --test\n```\n\n---\n\n[CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)\n"
license-name: BSD3
