homepage: ''
changelog-type: ''
hash: ef9ed99ec28140d39775a0b9c44333496d3ee754995219460d76cb137a9534ce
test-bench-deps:
  loops: -any
  base: ! '>=4.6 && <5'
  criterion: ! '>=0.8 && <1'
  tasty-quickcheck: ! '>=0.8 && <1'
  transformers: ! '>=0.3 && <1'
  tasty: ! '>=0.8 && <1'
  vector: ! '>=0.10 && <1'
maintainer: ttuegel@gmail.com
synopsis: Fast imperative-style loops
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  transformers: ! '>=0.3 && <1'
  primitive: ! '>=0.5 && <1'
  vector: ! '>=0.10 && <1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
author: Thomas Tuegel
latest: 0.2.0.2
description-type: markdown
description: ! "loops\n==========\n\n[![Build Status](https://travis-ci.org/ttuegel/loops.svg?branch=master)](https://travis-ci.org/ttuegel/loops)\n\n**Academic
  Summary**\n\nLoops have the structure of a monad. Bind (`>>=`) nests loops and `return
  x` is\na loop with a single iteration over a value `x`.\n\n**Features**\n\n* Fast,
  imperative-style loops with a clean syntax. Bind (`>>=`) nests loops, so\n  in `do`-notation,
  each subsequent line is nested inside loops that appear\n  above it.\n* Iteration
  over common data structures, like lists and vectors.\n* Robust performance because
  there is no reliance on fusion.\n* **NEW!** Loop-unrolling to arbitrary depth. Unrollable
  loop combinators are\n  provided in `Control.Monad.Loop.Unroll`. (The simple, \"rolled\"
  interface is\n  still provided in `Control.Monad.Loop`.) The unrolling depth set
  at the call\n  site at compile time. My benchmarks show that folding over unrolled
  loops is\n  up to 25% faster than folding over unboxed vectors!\n\n**Performance**\n\nFor
  best performance, please compile your code with `-O2`. You should also use\nGHC's
  LLVM backend if possible; it generally produces faster executables.\n\nA silly example\n---------------\n\nAt
  first, the statement that \"bind nests loops\" may seem strange, but can be\nmotivated
  by the `Monad` instance for lists. Consider the following\n`do`-notation for a list:\n\n~~~
  {.haskell}\nmodule Example where\n\nimport Control.Monad.Loop\nimport Data.Foldable
  (toList)\n\n-- A list of pairs (i, j) where 0 <= i <= 3 and 0 <= j <= i\nnestedList
  :: [(Int, Int)]\nnestedList = do\n    i <- [0..3]\n    j <- [0..i]\n    return (i,
  j)\n~~~\n\nIf you're not familiar with this use of lists, load up this file in ghci\nwith
  `ghci -isrc -pgmL markdown-unlit README.lhs`. (You need to have\n[markdown-unlit](https://github.com/sol/markdown-unlit)
  installed first.)\nEnter `nestedList` at the prompt and see:\n\n~~~\n>>> nestedList\n[(0,0),(1,0),(1,1),(2,0),(2,1),(2,2),(3,0),(3,1),(3,2),(3,3)]\n~~~\n\nNow
  let's do something really silly: let's build the same list with a\n`Loop`!\n\n~~~
  {.haskell}\nnestedList' :: [(Int, Int)]\nnestedList' = toList $ loop $ do  -- 'loop'
  is just an aid to type inference\n    i <- for 0 (<= 3) (+ 1)\n    j <- for 0 (<=
  i) (+ 1)\n    return (i, j)\n~~~\n\nYou would never actually want to do this. This
  example is simply to\nillustrate what \"bind nests loops\" means in a context most
  Haskellers are\nfamiliar with.\n\nThe correspondence between the list monad and
  the loop monad is not a\ncoincidence! GHC uses stream fusion to reduce (some) uses
  of lists to simple\nloops so that the evaluated list is never held in memory. Unfortunately,
  using\nlists as loops is dangerous in performance-sensitive code because the fusion\nrules
  may fail to fire, leaving you with a fully-evaluated list on the heap! A\n`Loop`
  can only evaluate one iteration at a time, so there is no larger data\nstructure
  that needs to be fused. Consequently, performance is less fragile.\n\nYou might
  complain that this style of programming does not fit Haskell very\nwell, but I would
  contend just the opposite. As I mentioned above, lists are the\nmore general case
  of loops: a list can be just a plain loop (fused), or it can\nbe all the iterations
  of the loop held in memory at once.  In fact, lists admit\nsome operations (like
  `reverse`) that prevent fusion, but `Loop` has a refined\ntype that only allows
  construction of fusible operations!  This is exactly where\nHaskell shines: the
  type system prevents incorrect (or in this case,\nundesirable) programs from being
  written. I see this as part of a (relatively\nrecent) trend in Haskell toward using
  the type system to guarantee performance\nin addition to correctness.\n"
license-name: BSD-3-Clause
