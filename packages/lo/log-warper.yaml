homepage: https://github.com/serokell/log-warper
changelog-type: markdown
hash: 1ab710be77f46f4b77237c7dd53420c2d11515ef8656aa60d11a6c475302f02f
test-bench-deps:
  base: -any
  unordered-containers: -any
  hspec: -any
  universum: -any
  filepath: -any
  async: -any
  data-default: -any
  HUnit: -any
  log-warper: -any
  QuickCheck: -any
  microlens-mtl: -any
  directory: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Flexible, configurable, monadic and pretty logging
changelog: ! "1.8.10\n======\n\n* Remove exception handler from simple logger, which
  would catch all exceptions,\n  even asynchronous ones.\n\n1.8.9\n=====\n\n* Bump
  up lower bounds for `universum` and `o-clock` packages.\n\n1.8.8\n=====\n\n* Increase
  upper bound for `ansi-terminal` to `< 0.9`.\n\n1.8.7\n=====\n\n* [#52](https://github.com/serokell/log-warper/issues/52):\n
  \ Add `System.Wlog.Concurrent` module for `ghc-8.2.2` which\n  allows to run action
  in parallel with logging.\n\n1.8.6\n=====\n\n* Bump up `universum` to `v1.0.4`.\n\n1.8.5\n=====\n\n*
  [#89](https://github.com/serokell/log-warper/issues/86):\n  Add upper-bounds for
  dependencies. Also use `build-tool-depends` field for `markdown-unlit`.\n\n1.8.4\n=====\n\n*
  [#86](https://github.com/serokell/log-warper/issues/86):\n  Add lens for changing
  properties of the particular logger.\n* Ungrade `universum` to the `1.0.2`.\n\n1.8.3\n=====\n\n*
  [#79](https://github.com/serokell/log-warper/issues/79):\n  Add `launchWithConfig`
  to `Launcher` module.\n\n1.8.2\n=====\n\n* Migrate to `universum-1.0.0`.\n* [#71](https://github.com/serokell/log-warper/issues/71):\n
  \ Use `microlens-platform` instead of `lens`.\n  `LoggerMap` is now has field `LoggerName`
  instead of `Text`.\n  `zoomLogger` is now work with `LoggerName` instead of `Text`.\n
  \ Remove `LogHandler.Syslog` module and `network` library.\n  Remove `extra`, `errors`,
  `exceptions`, `hashable`, `text-format`, `formatting` dependencies.\n  Remove `loggerNameF`
  function.\n  Change `lens` to `microlens-mtl` in tests.\n\n1.8.1\n=====\n\n* [#75](https://github.com/serokell/log-warper/issues/75):\n
  \ Bump up `universum` lower bound.\n\n1.8.0\n=====\n\n* [#55](https://github.com/serokell/log-warper/issues/55):\n
  \ Return back `lcFilePrefix` field in `LoggerConfig`, rename to `lcLogsDirectory`.\n\n1.7.6\n=====\n\n*
  Upgrade `universum` to version `0.9.1`. Add `Semigroup` instances.\n\n1.7.5\n=====\n\n*
  Relax `containers` package dependency from `>= 0.5.10.2` to `>= 0.5.7.1`.\n  Also
  use stable LTS for building package.\n\n1.7.4\n=====\n\n* [#55](https://github.com/serokell/log-warper/issues/55):\n
  \ Remove `lcFilePrefix` field from `LoggerConfig`.\n\n1.7.3\n=====\n\n* [#61](https://github.com/serokell/log-warper/issues/61):\n
  \ Add `launchFromFile`, `defaultConfig` and `launchSimpleLogging` functions.\n\n1.7.2\n=====\n\n*
  [#57](https://github.com/serokell/log-warper/issues/57):\n  Add `Exception` module
  with `logException` and `catchLog` functions.\n* [#60](https://github.com/serokell/log-warper/issues/60):\n
  \ Fix documentation for `termSeveritiesOut` and `termSeveritiesErr`.\n* [#63](https://github.com/serokell/log-warper/issues/63):\n
  \ Timestamp rounding by powers of 10.\n\n1.7.1\n=====\n\n* Bump `containers` to
  version `0.5.10`.\n\n1.7.0\n=====\n\n* [#48](https://github.com/serokell/log-warper/issues/48):\n
  \ Output for severities is now configured in config file with `termSeveritiesOut`\n
  \ and `termSeveritiesErr` for writing into `stdout` and `stderr` accordingly.\n
  \ Default behavior: `Errors` into `stderr`, all other into `stdout`.\n* In yaml
  config file added new keywords for dealing with `Severities`:\n  'All' -- all severities,
  'X+' -- severities greater or equal to X.\n* Changed .yaml format: logger severity
  receives set of severities (`Severities`).\n* [#32](https://github.com/serokell/log-warper/issues/32):\n
  \ Changed .yaml format: `LoggerTree` should be written under 'loggerTree:'.\n* [#49](https://github.com/serokell/log-warper/issues/49):\n
  \ Add `WithLoggerIO` constraint.\n* [#50](https://github.com/serokell/log-warper/issues/50):\n
  \ Add `liftLogIO` function into `CanLog` module.\n\n1.6.0\n=====\n\n* `Error` is
  now printed only to `stderr`, all other messages to `stdout`.\n* `Logger` severity
  is now `Set Severity`.\n* Interface changes: functions which worked with `Severity`
  now work with `Set Severity`.\n* Remove `releaseAllHandlers`, `streamHandlerWithLock`,\n
  \ `trapLogging`, `debugM`, `errorM`, `infoM`, `noticeM`, `warningM`.\n* Rename `Wrapper`
  module to `Terminal`.\n* Rename `Handler` module to `LogHandler`.\n* Rename `Logger`
  module to `IOLogger`.\n* Move `setSeverity` and `setSeverityMaybe` to `IOLogger`.\n*
  Lift all functions inside `IOLogger` module to `MonadIO`.\n* `handle` from `LogHandler`
  module is renamed to `logHandlerMessage`\n  and moved out of type class `LogHandler`.\n\n1.5.3\n=====\n\n*
  Add `launchNamedPureLogWith` to `PureLogging`\n* Improve documentation for `launchNamedPureLog`\n\n1.5.2\n=====\n\n*
  Add `logPureAction` to `PureLogging`.\n* Add `withSublogger` to `HasLoggerName`.\n\n1.5.1\n=====\n\n*
  Add `usingNamedPureLogger` to `PureLogging`.\n\n1.5.0\n=====\n\n* Replace `String`
  to `Text` in `LoggerName`.\n* Rename `LoggerName` field name to `getLoggerName`.\n*
  Rename `getLoggerName` of `HasLoggerName` class to `askLoggerName`.\n* Use `LoggerName`
  instead of `Text` where possible.\n* Make separate `HasLoggerName` module.\n* Make
  separate `PureLogging` module.\n* Remove `safecopy` dependency and refactor code.\n\n1.4.1\n=====\n\n*
  Add `logEvents` function to log `[LogEvent]` with proper logName.\n\n1.4.0\n=====\n\n*
  Add ability to specify custom logging action.\n\n1.3.4\n====\n\n* Correct logger
  config parsing\n\n1.3.3\n=====\n\n* Fixed a bug related to ugly output to stdout
  even when it was turned off.\n\n1.3.2\n=====\n\n* Minor dependencies update.\n\n1.3.1\n=====\n\n*
  Fix minor bug with stdout severity.\n\n1.3.0\n=====\n\n* Allow to use arbitrary
  text formatter function.\n\n1.2.4\n=====\n\n* Add ability to specify time format
  for logs.\n* Some space leaks elimination:\n  + The `MemoryQueue` has been partially
  reworked to get rid of the \"inline\" State manipulation;\n  + Strings have been
  dropped almost everywhere in favour of `Text`;\n  + A `LogFormatter` has been reworked
  to yield a `IO Builder`;\n  + `replaceVarM` has been reworked to be pure _and_ to
  work with builders rather than plain Text/Strings;\n  + The pure logger has been
  reworked to use strict's `StateT` instead of WriterT;\n  + The pure logger have
  been polished to drop instances which required the `UndecidableInstances` pragma;\n
  \ + The `Sized` instance for `Text` has been reworked and multiplied by a constant
  factor of 16 (see below).\n\n1.2.3\n=====\n\n* Now we create a directory for log
  files if it's missing.\n\n1.2.2\n=====\n\n* Fixed memory leak (PR #17).\n\n1.2.1\n=====\n\n*
  Supports Unix paths in log configs even on Windows.\n\n1.2.0\n=====\n\n* Uses universum-0.6.1.\n\n1.1.4\n=====\n\n*
  Add `CanLog` and `HasLoggerName` instances for both strict and lazy `State`.\n\n1.1.3\n=====\n\n*
  Add config parameter to print `ThreadId` optionally.\n* Boolean monoidal builders
  for `LoggerConfig` now set boolean\n  parameter to default â‰  `mempty` parameter.\n"
basic-deps:
  microlens-platform: ^>=0.3.9
  fmt: ^>=0.5.0.0
  unix: -any
  base: ! '>=4.9 && <5'
  time: ^>=1.8
  unordered-containers: ! '>=0.2.7.1'
  text: ! '>=1.2.2.1 && <1.3'
  markdown-unlit: ! '>=0.4'
  universum: ! '>=1.1.0 && <1.2'
  monad-loops: ^>=0.4.3
  monad-control: ! '>=1.0.1.0 && <1.1'
  filepath: ^>=1.4.1
  containers: ^>=0.5.7.1
  ansi-terminal: ! '>=0.7 && <0.9'
  log-warper: -any
  mtl: ! '>=2.2.1 && <2.3'
  mmorph: ^>=1.1
  lifted-async: ^>=0.9
  transformers-base: ^>=0.4.4
  transformers: ^>=0.5.2
  deepseq: ^>=1.4
  microlens: ! '>=0.4'
  aeson: ^>=1.2
  yaml: ! '>=0.8.20 && <0.9'
  vector: ^>=0.12
  directory: ^>=1.3
all-versions:
- '1.8.9'
- '1.8.10'
author: ! '@serokell'
latest: '1.8.10'
description-type: markdown
description: ! "log-warper\n==========\n\n[![Build Status](https://travis-ci.org/serokell/log-warper.svg)](https://travis-ci.org/serokell/log-warper)\n[![Hackage](https://img.shields.io/hackage/v/log-warper.svg)](https://hackage.haskell.org/package/log-warper)\n[![Stackage
  LTS](http://stackage.org/package/log-warper/badge/lts)](http://stackage.org/lts/package/log-warper)\n[![Stackage
  Nightly](http://stackage.org/package/log-warper/badge/nightly)](http://stackage.org/nightly/package/log-warper)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n`log-warper`
  is a high level and featureful logging library with monadic interface.\n\nYou can
  jump right into [introduction tutorial](https://github.com/serokell/log-warper/blob/master/examples/HowTo.md)\nto
  see how to write logging with `log-warper`.\n\n## Features\n\nHere is the list of
  features `log-warper` provides.\n\n1. Hierarchical logger names.\n\n   Logger names
  (tags for loggers) form hierarchy. It means, that `\"\"`\n   (also known as `mempty`
  or `rootLoggerName`) is a parent of logger with name `\"node\"` which is\n   a parent
  of logger with name `\"node.communication\"`. So, logger name comprises dot-separated
  components.\n   This means that if some logger name doesn't have some settings (like
  severity or output file) it takes\n   its settings from the closest parent, containing
  this settings.\n\n2. Logging initialization from `.yaml` configuration file.\n\n
  \  Whole logging configuration can be specifed in a single `.yaml` file.\n   See
  [example here](https://github.com/serokell/log-warper/blob/c1df47e70c48bae62ff81a11fea0b45d50c172e7/logger-config-example.yaml).\n\n3.
  Monadic logging interface.\n\n   `log-warper` uses `mtl`-style type classes to provide
  monadic interfaces for logging.\n\n4. Strict `StateT` based pure logging.\n\n   See
  [this tutorial](https://github.com/serokell/log-warper/blob/master/examples/PureLogging.md)\n
  \  on pure logging with `log-warper`.\n\n5. Different severity levels of messages
  with the ability to configure `Set` of severities.\n\n6. Output is colored :star:\n\n
  \  When you log messages, you see time of this logging message, logger name, severity
  and `ThreadId`.\n   Message formatting is configurable. Color or logged message
  tag depends on `Severity` for this message.\n\n7. Flexible and easy creation of
  `LoggerConfig` using monoidal builders and lenses.\n\n   In case `.yaml` configuration
  is not enough for you, you can use `lens`-based EDSL to create configurations.\n
  \  `LoggerConfig` also implements instances for `Semigroup` and `Monoid` so you
  can combine your configurations\n   from different sources (CLI and `.yaml` for
  example).\n\n8. Logger rotation.\n\n   `log-warper` supports logger rotation. Yes,
  there exist `logrotate` and similar tools.\n   But it's not easy to configure cross-platform
  (Windows, Linux, OSX) logging rotation with external tools.\n\n9. Ability to acquire
  last `N` megabytes of logs from in-memory cache.\n\n   In case you want to analyze
  logging messages you can take them from in-memory cache.\n\n## Reference guide (FAQ)\n\nHere
  you can find hints and tips how to achieve desired behavior with `log-warper`.\n\n1.
  How can I redirect all output to stderr?\n\n   * Write `termSeveritiesErr: All`
  on top-level of your `.yaml` file.\n\n2. How can I disable only Error messages for
  my logger?\n\n   * Use [`excludeError`](https://hackage.haskell.org/package/log-warper-1.8.5/docs/System-Wlog-Severity.html#v:excludeError)
  function.\n\n3. How can I show `ThreadId` inside log message?\n\n   * Add `showTid:
  true` to your `.yaml` file.\n\n4. How to easily disable terminal output?\n\n   *
  Put these lines into `.yaml` file:\n\n   ```\n   termSeveritiesOut : []\n   termSeveritiesErr
  : []\n   ```\n\n5. How can I enable messages with severity `Info` and higher?\n\n
  \  * Write `severity: Info+` inside tree node of your logger settings.\n\n6. How
  can I log inside functions like `forkIO`?\n\n   * Use [`liftLogIO`](https://hackage.haskell.org/package/log-warper-1.8.5/docs/System-Wlog-CanLog.html#v:liftLogIO)
  function.\n   Its Haddock contains nice usage example.\n\n7. How can I easily log
  exceptions without throwing them?\n\n   * Use functions from [`System.Wlog.Exceptions`](https://hackage.haskell.org/package/log-warper-1.8.5/docs/System-Wlog-Exception.html)
  module.\n\n## Contributing\n\n> **This project uses [`universum`](https://github.com/serokell/universum)\n>
  as default prelude**\n"
license-name: MIT
