homepage: https://github.com/cpeikert/Lol
changelog-type: markdown
hash: e81a0789cbd0d9477ad011809ae0554eced525f6eba538f16018780329a012da
test-bench-deps:
  lol: ! '>=0.6.0.0 && <0.7'
  test-framework: ! '>=0.8 && <0.9'
  MonadRandom: <0.6
  base: ! '>=4.9 && <5'
  lol-benches: ! '>=0.0.0.3 && <0.1'
  lol-cpp: <0.1
  lol-repa: <0.1
  lol-tests: <0.1
  mtl: <2.3
  lol-apps: -any
  DRBG: <0.6
  numeric-prelude: <0.5
maintainer: Eric Crockett <ecrockett0@gmail.com>
synopsis: Lattice-based cryptographic applications using <https://hackage.haskell.org/package/lol
  lol>.
changelog: ! "Changelog for lol project\n================================\n\n0.2.0.2\n----\n
  * Removed unnecessary dependencies.\n\n0.2.0.1\n----\n * Fixed compile error in
  KHPRFTests.\n\n0.2.0.0\n----\n * Added [BPF14] key-homomorphic PRF.\n * Added homomorphic
  evaluation of PRF.\n * Simpler benchmarks and tests.\n * SHE: Made hints for key
  switching and ring tunneling explicit.\n * SHE: Protocol buffer formats for tunneling,
  key-switch hints, secret keys, etc.\n   Note that this provides an easy way to save
  expensive precomputation. See\n   the HomomPRF example for more details.\n\n0.1.1.0\n----\n
  * Updated documentation with MathJax\n * Added\n\n0.1.0.0\n-----\n * Updated for
  lol-0.3.*\n * Added simple example.\n\n0.0.0.1\n-----\n * Initial split from lol."
basic-deps:
  lol: ! '>=0.6.0.0 && <0.7'
  MonadRandom: ! '>=0.2 && <0.6'
  split: <0.3
  base: ! '>=4.9 && <5'
  time: <1.9
  protocol-buffers: <2.5
  filepath: <1.5
  protocol-buffers-descriptor: <2.5
  lol-cpp: <0.1
  containers: <0.6
  singletons: <2.3
  mtl: <2.3
  lol-apps: -any
  deepseq: ! '>=1.4.1.1 && <1.5'
  DRBG: <0.6
  numeric-prelude: ! '>=0.4.2 && <0.5'
all-versions:
- 0.0.0.1
- 0.1.0.0
- 0.1.1.0
- 0.2.0.1
- 0.2.0.2
author: Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
latest: 0.2.0.2
description-type: text
description: ! "Overview of applications:\n\n* SymmSHE.hs gives an implementation
  of a symmetric-key,\n  somewhat-homomorphic encryption scheme that is essentially\n
  \ equivalent to the one from the toolkit paper [LPR'13].\n\n* KeyHomomorphicPRF.hs
  gives an implementation of the\n  key-homomorphic pseudo-random function from Banerjee\n
  \ and Peikert in Crypto 2014 ([BP14]).\n\n* HomomPRF provides an interface for the
  homomorphic evaluation of the [BP14]\n  PRF.\n\nNote that an example using each
  application can be found in the 'examples'\ndirectory. Tests and benchmarks for
  SHE and KeyHomomorphicPRF are provided in\nthe 'tests' and 'benchmarks' directories.
  Tests and benchmarks for HomomPRF are\nincluded in the example for HomomPRF."
license-name: GPL-2.0-only
