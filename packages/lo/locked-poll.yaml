homepage: ''
changelog-type: markdown
hash: 159e6d63e90da9679b89a8cecb78dc6111d63c15e86adcdb87375ca9555291bd
test-bench-deps:
  bytestring: -any
  base: -any
  tasty-golden: -any
  time: -any
  clock: -any
  containers: -any
  lens: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  attoparsec: -any
  random: -any
  tasty: -any
  QuickCheck: -any
  regex-genex: -any
maintainer: Scott Murphy <scottmurphy09@gmail.com>
synopsis: Very simple poll lock
changelog: ! '# Revision history for locked-poll


  ## 0.0.0  -- YYYY-mm-dd


  * First version. Released on an unsuspecting world.

'
basic-deps:
  base: ==4.*
  clock: -any
  containers: -any
  locked-poll: -any
all-versions:
- 0.1.0
author: Scott Murphy <scottmurphy09@gmail.com>
latest: 0.1.0
description-type: markdown
description: ! "[![Circle CI](https://circleci.com/gh/plow-technologies/locked-poll.svg?style=svg)](https://circleci.com/gh/plow-technologies/locked-poll)\n\n#
  locked-poll\n\n\n```locked-poll```  is a package to enable simple concurrent polling
  with a locking scheme.\n\nThe library is quite small, needing\n* ```containers```\n*
  ```clock```\n\nTo run.\n\nThere are lots of tests in the test-suite to ensure that
  it behaves itself with polls.\n\n\n\n## Usage-Example\n\nThere is only one function
  :\n\n``` haskell\n\nmakeLockingFunction :: forall k lockableState . (Key k,Show
  lockableState) =>\n                       Int64 ->  -- timeout\n                       (KeyFcn
  lockableState k) ->          -- extract a key\n                       IO ((lockableState
  -> IO ()) ->      -- function to run against state\n                       lockableState
  \  ->                   -- incoming state\n                       IO ())\n\n```\n\nThis
  function is used to generate a function which has an embedded action that is dependent
  on some given state.\nThe idea is to generate that locking function at the top level
  and then pass it to whatever needs incremental access to a resource.\n\nIt uses
  an IORef under the hood to store what states are currently in use.\n\nUse the timeout
  function to say when to release the lock.\n\nNo cleanup is performed by the lockingFunction,
  so wrap your things in finally or bracket as needed.\n\n\n``` haskell\n-- | 'Key'
  Constraint for locking down a traverse or fold\ntype Key k = (Ord k,Eq k,Show k)\n\n--
  |Extract a key from a given state\ntype KeyFcn st k = Key k => st -> k\n\n```\n\nKeyFcn
  tells the lockingFunction how to extract the LockingKey.\n\nUniqueness is not necessary
  but if you do not have it, only one of a given group of like Keyed objects will
  be allowed to run at a time.\n\n\n\n## How to run tests\n\n```\ncabal configure
  --enable-tests && cabal build && cabal test\n```\n\nThe tests are quite slow (4
  or 5 min) because they are trying to test long poll concurrency\n\nRight now you
  have to hand delete the resulting output.\n\n## Contributing\n\nTODO: Write contribution
  instructions here\n"
license-name: BSD-3-Clause
