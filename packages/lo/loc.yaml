homepage: https://github.com/chris-martin/loc
changelog-type: ''
hash: a020d51592ea68bf2eccb92a8450b914dac4a7fa64422568b11bcd65cdd9b2d7
test-bench-deps:
  base: ! '>=4.9 && <4.13'
  hedgehog: -any
  doctest: -any
  containers: -any
  loc: -any
maintainer: Chris Martin <ch.martin@gmail.com>
synopsis: Types representing line and column positions and ranges in text files.
changelog: ''
basic-deps:
  base: ! '>=4.9 && <4.13'
  containers: -any
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.1.0'
- '0.1.2.0'
- '0.1.2.1'
- '0.1.2.2'
- '0.1.2.3'
- '0.1.3.0'
- '0.1.3.1'
- '0.1.3.2'
- '0.1.3.3'
- '0.1.3.4'
author: Chris Martin <ch.martin@gmail.com>
latest: '0.1.3.4'
description-type: markdown
description: ! "# loc\n\nOverview of the concepts:\n\n![Example text illustrating
  Loc, Span, and Area](https://raw.githubusercontent.com/chris-martin/haskell-libraries/4be81df645d4a2e5073f45563930e202e41209c7/loc/example.png)\n\n*
  `Loc` - a cursor position, starting at the origin `1:1`\n* `Span` - a nonempty contiguous
  region between two locs\n* `Area` - a set of zero or more spans with gaps between
  them\n\nSee also:\n\n* [loc-test](https://hackage.haskell.org/package/loc-test)
  -\n  Test-related utilities for this package.\n\n## `Pos`\n\nSince all of the numbers
  we're dealing with in this domain are positive, we\ndefine a \"positive integer\"
  type. This is a newtype for `Natural` that doesn't\nallow zero.\n\n```haskell\nnewtype
  Pos = Pos Natural\n  deriving (Eq, Ord)\n\ninstance Num Pos where\n  fromInteger
  = Pos . checkForUnderflow . fromInteger\n  Pos x + Pos y = Pos (x + y)\n  Pos x
  - Pos y = Pos (checkForUnderflow (x - y))\n  Pos x * Pos y = Pos (x * y)\n  abs
  = id\n  signum _ = Pos 1\n  negate _ = throw Underflow\n\ncheckForUnderflow :: Natural
  -> Natural\ncheckForUnderflow n =\n  if n == 0 then throw Underflow else n\n```\n\n`Pos`
  does not have an `Integral` instance, because that would require\nimplementing `quotRem
  :: Pos -> Pos -> (Pos, Pos)`, which doesn't make much\nsense. Therefore we can't
  use `toInteger` on `Pos`. Instead we use our own\n`ToNat` class to convert positive
  numbers to natural numbers.\n\n```haskell\nclass ToNat a where\n  toNat :: a ->
  Natural\n\ninstance ToNat Pos where\n  toNat (Pos n) = n\n```\n\n## `Line`, `Column`\n\nWe
  then add some newtypes to be more specific about whether we're talking about\nline
  or column numbers.\n\n```haskell\nnewtype Line = Line Pos\n  deriving (Eq, Ord,
  Num, Real, Enum, ToNat)\n\nnewtype Column = Column Pos\n  deriving (Eq, Ord, Num,
  Real, Enum, ToNat)\n```\n\n## `Loc`\n\nA `Loc` is a `Line` and a `Column`.\n\n```haskell\ndata
  Loc = Loc\n  { line   :: Line\n  , column :: Column\n  }\n  deriving (Eq, Ord)\n```\n\nNote
  that this library has chosen to be remain entirely agnostic of the text\nthat the
  positions are referring to. Therefore there is no \"plus one\" operation\non `Loc`,
  because the next `Loc` after *4:17* could be either *4:18* or *5:1* -\nwe can't
  tell without knowing the line lengths.\n\n## `Span`\n\nA `Span` is a start `Loc`
  and an end `Loc`.\n\n```haskell\ndata Span = Span\n  { start :: Loc\n  , end   ::
  Loc\n  } deriving (Eq, Ord)\n```\n\nA `Span` is not allowed to be empty; in other
  words, `start` and `end` must be\ndifferent.\n\nThere are two functions for constructing
  a `Span`. They both reorder their\narguments as appropriate to make sure the start
  comes before the end (so that\nspans are never backwards). They take different approaches
  to ensuring that\nspans are never empty: the first can throw an exception, whereas
  the second is\ntyped as `Maybe`.\n\n```haskell\nfromTo :: Loc -> Loc -> Span\nfromTo
  a b =\n  maybe (throw EmptySpan) id (fromToMay a b)\n\nfromToMay :: Loc -> Loc ->
  Maybe Span\nfromToMay a b =\n  case compare a b of\n    LT -> Just (Span a b)\n
  \   GT -> Just (Span b a)\n    EQ -> Nothing\n```\n\nThe choice to use an exclusive
  upper bound *\\[start, end)* rather than two\ninclusive bounds *\\[start, end\\]*
  is forced by the decision to be text-agnostic.\nWith inclusive ranges, you couldn't
  tell whether span *4:16-4:17* abuts span\n*5:1-5:2* without knowing whether the
  character at position *4:17* is a newline.\n\n## `Area`\n\nConceptually, an area
  is a set of spans. To support efficient union and\ndifference operations, `Area`
  is defined like this:\n\n```haskell\ndata Terminus = Start | End\n  deriving (Eq,
  Ord)\n\nnewtype Area = Area (Map Loc Terminus)\n  deriving (Eq, Ord)\n```\n\nYou
  can think of this as a sorted list of the spans' start and end positions,\nalong
  with a tag indicating whether each is a start or an end.\n\n## `Show`\n\nWe define
  custom `Show` and `Read` instances to be able to write terse\n[doctests](https://hackage.haskell.org/package/doctest)
  like\n\n```haskell\n>>> addSpan (read \"1:1-6:1\") (read \"[1:1-3:1,6:1-6:2,7:4-7:5]\")\n[1:1-6:2,7:4-7:5]\n```\n\nThese
  are the `showsPrec` implementations for `Loc` and `Span`:\n\n```haskell\nlocShowsPrec
  :: Int -> Loc -> ShowS\nlocShowsPrec _ (Loc l c) =\n  shows l .\n  showString \":\"
  .\n  shows c\n\nspanShowsPrec :: Int -> Span -> ShowS\nspanShowsPrec _ (Span a b)
  =\n  locShowsPrec 10 a .\n  showString \"-\" .\n  locShowsPrec 10 b\n```\n\n## `Read`\n\nThe
  parser for `Pos` is based on the parser for `Natural`, applying `mfilter (/=\n0)`
  to make the parser fail if the input represents a zero.\n\n```haskell\nposReadPrec
  :: ReadPrec Pos\nposReadPrec =\n  Pos <$> mfilter (/= 0) readPrec\n```\n\nAs a reminder,
  the type of `mfilter` is:\n\n```haskell\nmfilter :: MonadPlus m => (a -> Bool) ->
  m a -> m a\n```\n\nThe `Loc` parser uses a very typical `Applicative` pattern:\n\n```haskell\n--
  | Parses a single specific character.\nreadPrecChar :: Char -> ReadPrec ()\nreadPrecChar
  = void . readP_to_Prec . const . ReadP.char\n\nlocReadPrec :: ReadPrec Loc\nlocReadPrec
  =\n  Loc              <$>\n  readPrec         <*\n  readPrecChar ':' <*>\n  readPrec\n```\n\nWe
  used `mfilter` above to introduce failure into the `Pos` parser; for `Span`\nwe
  use `empty`.\n\n```haskell\nempty :: Alternative f => f a\n```\n\nFirst we use `fromToMay`
  to produce a `Maybe Span`, and then in the case where\nthe result is `Nothing` we
  use `empty` to make the parser fail.\n\n```haskell\nspanReadPrec :: ReadPrec Span\nspanReadPrec
  =\n  locReadPrec      >>= \\a ->\n  readPrecChar '-' *>\n  locReadPrec      >>=
  \\b ->\n  maybe empty pure (fromToMay a b)\n```\n\n## Comparison to similar packages\n\n###
  `srcloc`\n\n[srcloc](https://hackage.haskell.org/package/srcloc) has a similar general\npurpose:
  defining types related to positions in text files.\n\nSome differences:\n\n* `srcloc`'s
  `Pos` type (comparable to our `Loc` type) has a `FilePath`\n  parameter, whereas
  this library doesn't consider file paths at all.\n* `srcloc` has nothing comparable
  to the `Area` type.\n\nThere are some undocumented aspects of `srcloc` we find confusing:\n\n*
  What does \"character offset\" mean?\n* Does `srcloc`'s `Loc` type use inclusive
  or exclusive bounds?\n"
license-name: Apache-2.0
