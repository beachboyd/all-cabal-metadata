homepage: https://github.com/trskop/lock-file#readme
changelog-type: markdown
hash: 3ad84b5e454145e1d928063b56abb96db24a99a21b493989520e58fa0ab37b00
test-bench-deps:
  exceptions: ! '>0.6 && <0.11'
  test-framework-hunit: ! '>=0.2.6 && <1'
  test-framework: ! '>=0.8 && <1'
  base: ! '>=4.5 && <5'
  data-default-class: ! '>=0.0 && <0.2'
  filepath: ==1.3.* || ==1.4.*
  test-framework-quickcheck2: ! '>=0.3 && <1'
  HUnit: ! '>=1.2 && <2'
  directory: ! '>=1.1 && <1.4'
maintainer: peter.trsko@gmail.com
synopsis: Provide exclusive access to a resource using lock file.
changelog: ! "# ChangeLog / ReleaseNotes\n\n\n## Version 0.7.0.0\n\n* Dropping dependency
  on [tagged-exception-core][] package. (**breaking\n  change**)\n\n\n## Version 0.6.0.0
  (unreleased)\n\n* Explicitly unpacking strict fields in data types. (**change**)\n*
  Correcting name of `sleepBetweenRetries` field of `LockingParameters`.\n  (**breaking
  change**)\n* Relaxed bounds on [base][] to include versions up to version 5. (**change**)\n*
  Bumping upper [transformers][] bound to include 0.5.\\* versions. (**change**)\n*
  Bumping upper bound of [directory][] to include 1.3.\\* branch. (**change**)\n*
  Bumping upper bound of [data-default-class][] to include 0.1.\\* branch.\n  (**change**)\n\n\n##
  Version 0.5.0.2\n\n* Building on GHC from 7.6 up to 7.10. (**new**)\n* Relaxed upper
  bound of [exceptions][] package to include 0.8 branch. This\n  mirrors dependencies
  of [tagged-exception-core][] package. (**new**)\n* Enabling `-fwarn-missing-import-lists`
  with `-fpedantic`. (**new**)\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/lock-file-0.5.0.2>\n\n\n##
  Version 0.5.0.1\n\n* Dropping explicit dependency on [QuickCheck][]. (**minor change**)\n*
  Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/lock-file-0.5.0.1>\n\n\n##
  Version 0.5.0.0\n\n* First public release.\n* Uploaded to [Hackage][]:\n  <http://hackage.haskell.org/package/lock-file-0.5.0.0>\n\n\n\n[base]:
  http://hackage.haskell.org/package/base \"base package on Hackage\"\n[data-default-class]:
  http://hackage.haskell.org/package/data-default-class \"data-default-class package
  on Hackage\"\n[directory]: http://hackage.haskell.org/package/directory \"directory
  package on Hackage\"\n[Hackage]: http://hackage.haskell.org/ \"HackageDB (or just
  Hackage) is a collection of releases of Haskell packages.\"\n[QuickCheck]: http://hackage.haskell.org/package/QuickCheck
  \"QuickCheck package on Hackage\"\n[exceptions]: http://hackage.haskell.org/package/exceptions
  \"exceptions package on Hackage\"\n[tagged-exception-core]: http://hackage.haskell.org/package/tagged-exception-core
  \"tagged-exception-core package on Hackage\"\n[transformers]: http://hackage.haskell.org/package/transformers
  \"transformers package on Hackage\"\n"
basic-deps:
  exceptions: ! '>0.6 && <0.11'
  base: ! '>=4.9 && <5'
  data-default-class: ! '>=0.0 && <0.2'
  directory: ! '>=1.1 && <1.4'
all-versions:
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.7.0.0
author: Peter Trsko
latest: 0.7.0.0
description-type: markdown
description: ! "Lock File\n=========\n\n[![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\n\n[![Hackage](http://img.shields.io/hackage/v/lock-file.svg)][Hackage: lock-file]\n[![Build](https://travis-ci.org/trskop/lock-file.svg)](https://travis-ci.org/trskop/lock-file)\n\n\nDescription\n-----------\n\nProvide
  exclusive access to a resource using lock file, which are files whose\npurpose is
  to signal by their presence that some resource is locked.\n\n\nUsage Example\n-------------\n\nFollowing
  example acquires lock file and then waits `1000000` micro seconds\nbefore releasing
  it. Note also that it is possible to specify retry strategy.\nHere we set it to
  `No` and therefore this code won't retry to acquire lock file\nafter first failure.\n\n```Haskell\n{-#
  LANGUAGE TypeApplications #-}\n-- |\n-- Module:       Main\n-- Description:  Simple
  example that acquires lock for a short period of time.\n-- Copyright:    (c) 2013,
  2014 Peter Trsko\n-- License:      BSD3\n--\n-- Maintainer:   peter.trsko@gmail.com\n--
  Stability:    experimental\n-- Portability:  portable\nmodule Main (main)\n  where\n\nimport
  Control.Concurrent (threadDelay)\n    -- From base package, but GHC specific.\nimport
  qualified Control.Exception as Exception (handle)\n\nimport Data.Default.Class (Default(def))\n
  \   -- From data-default-class package, alternatively it's possible to use\n    --
  data-default package version 0.5.2 and above.\n    -- http://hackage.haskell.org/package/data-default-class\n
  \   -- http://hackage.haskell.org/package/data-default\nimport System.IO.LockFile\n
  \   ( LockingException\n    , LockingParameters(retryToAcquireLock)\n    , RetryStrategy(No)\n
  \   , withLockFile\n    )\n\n\nmain :: IO ()\nmain = handleException\n    . withLockFile
  lockParams lockFile $ threadDelay 1000000\n  where\n    lockParams = def\n        {
  retryToAcquireLock = No\n        }\n\n    lockFile = \"/var/run/lock/my-example-lock\"\n\n
  \   handleException = Exception.handle\n        $ putStrLn . (\"Locking failed with:
  \" ++) . show @LockingException\n```\n\nThis command line example shows that trying
  to execute two instances of\n`example` at the same time will result in failure of
  the second one.\n\n```\nstack ghc example/example.hs\n[1 of 1] Compiling Main             (
  example/example.hs, example/example.o )\nLinking example/example ...\n$ ./example/example
  & ./example/example\n[1] 7893\nLocking failed with: Unable to acquire lock file:
  \"/var/run/lock/my-example-lock\"\n$ [1]+  Done                    ./example/example\n```\n\nPID
  File Example\n----------------\n\nLock file, as implemented by this library, is
  created containing PID of the\nprocess that created it. PID file, on UNIX-like system,
  is a special case of\nlock file. It prevents the same daemon to be started up multiple
  times.\n\nThanks to the above fact we can now create function with following type\nsignature:\n\n```Haskell\nwithPidFile
  :: IO () -> IO ()\n```\n\nIts purpose is to wrap application `main` and acquire
  PID file prior to passing\ncontrol to the application code, or fail if PID file
  is already acquired.\n\n```Haskell\n{-# LANGUAGE LambdaCase #-}\n{-# LANGUAGE NoImplicitPrelude
  #-}\nmodule Main\n  where\n\nimport Control.Applicative (pure)\nimport Control.Concurrent
  (threadDelay)\nimport Control.Exception (catch)\nimport Control.Monad ((>=>), (>>=))\nimport
  Data.Function ((.), ($), const)\nimport Data.Functor ((<$>))\nimport Data.Monoid
  ((<>))\nimport System.Environment (getEnv, getProgName)\nimport System.Exit (exitFailure)\nimport
  System.IO (IO, FilePath, hPutStrLn, putStrLn, stderr)\nimport Text.Show (show, showString)\n\nimport
  System.Posix.User (getEffectiveUserID)\n\nimport Data.Default.Class (def)\nimport
  System.IO.LockFile\n    ( LockingException(CaughtIOException, UnableToAcquireLockFile)\n
  \   , LockingParameters(retryToAcquireLock)\n    , RetryStrategy(No)\n    , withLockFile\n
  \   )\n\n\nwithPidFile :: IO () -> IO ()\nwithPidFile m = do\n    pidFilePath <-
  mkPidFilePath\n    withLockFile def{retryToAcquireLock = No} pidFilePath m\n        `catch`
  (printLockingException pidFilePath >=> const exitFailure)\n  where\n    mkPidFilePath
  :: IO FilePath\n    mkPidFilePath = do\n        fileName <- (<> \".pid\") <$> getProgName\n
  \       getEffectiveUserID >>= \\case\n            0 -> pure $ \"/var/run/\" <>
  fileName\n            _ -> (<> ('/' : '.' : fileName)) <$> getEnv \"HOME\"\n                --
  This may throw exception if $HOME environment varialbe is\n                -- not
  set.\n\n    printLockingException :: FilePath -> LockingException -> IO ()\n    printLockingException
  filePath = hPutStrLn stderr . mkMsg . \\case\n        UnableToAcquireLockFile _
  -> \"File already exists.\"\n        CaughtIOException       e -> show e\n      where\n
  \       mkMsg =\n            showString filePath . showString \": Unable to create
  PID file: \"\n\nmain :: IO ()\nmain = withPidFile $ do\n    putStrLn \"Hello World!\"\n
  \   threadDelay 1000000\n```\n\n\nBuilding options\n----------------\n\n* `-fpedantic`
  (disabled by default)\n\n  Pass additional warning flags to GHC.\n\n\n\n[Hackage:
  lock-file]: https://hackage.haskell.org/package/lock-file \"Hackage: lock-file\"\n[Haskell.org]:
  http://www.haskell.org \"The Haskell Programming Language\"\n[tl;dr Legal: BSD3]:
  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29 \"BSD 3-Clause
  License (Revised)\"\n"
license-name: BSD-3-Clause
