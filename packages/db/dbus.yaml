homepage: https://github.com/rblaze/haskell-dbus#readme
changelog-type: ''
hash: 41d4a3d5b49594dcbefa773f91facc6f9868470784b6c52aad37e2883ecf5768
test-bench-deps:
  cereal: -any
  bytestring: -any
  extra: -any
  unix: -any
  base: -any
  text: -any
  filepath: -any
  criterion: -any
  process: -any
  network: -any
  parsec: -any
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  dbus: -any
  transformers: -any
  random: -any
  tasty: -any
  QuickCheck: -any
  resourcet: -any
  vector: -any
  directory: -any
maintainer: Andrey Sverdlichenko <blaze@ruddy.ru>
synopsis: A client library for the D-Bus IPC system.
changelog: ''
basic-deps:
  exceptions: -any
  cereal: -any
  bytestring: -any
  unix: -any
  split: -any
  xml-conduit: -any
  base: ! '>=4 && <5'
  text: -any
  filepath: -any
  network: -any
  parsec: -any
  conduit: -any
  containers: -any
  lens: -any
  xml-types: -any
  transformers: -any
  random: -any
  deepseq: -any
  th-lift: -any
  template-haskell: -any
  vector: -any
all-versions:
- '0.10'
- '0.10.1'
- '0.10.2'
- '0.10.3'
- '0.10.4'
- '0.10.5'
- '0.10.6'
- '0.10.7'
- '0.10.8'
- '0.10.9'
- '0.10.9.1'
- '0.10.9.2'
- '0.10.10'
- '0.10.11'
- '0.10.12'
- '0.10.13'
- '0.10.14'
- '0.10.15'
- '1.0.0'
- '1.0.1'
- '1.1.0'
author: John Millikin <john@john-millikin.com>
latest: '1.1.0'
description-type: haddock
description: ! 'D-Bus is a simple, message-based protocol for inter-process

  communication, which allows applications to interact with other parts of

  the machine and the user''s session using remote procedure calls.


  D-Bus is a essential part of the modern Linux desktop, where it replaces

  earlier protocols such as CORBA and DCOP.


  This library is an implementation of the D-Bus protocol in Haskell. It

  can be used to add D-Bus support to Haskell applications, without the

  awkward interfaces common to foreign bindings.


  Example: connect to the session bus, and get a list of active names.


  @

  &#x7b;-\# LANGUAGE OverloadedStrings \#-&#x7d;


  import Data.List (sort)

  import DBus

  import DBus.Client


  main = do

  &#x20;   client <- connectSession

  &#x20;   //

  &#x20;   \-- Request a list of connected clients from the bus

  &#x20;   reply <- call_ client (methodCall \"\/org\/freedesktop\/DBus\" \"org.freedesktop.DBus\"
  \"ListNames\")

  &#x20;       &#x7b; methodCallDestination = Just \"org.freedesktop.DBus\"

  &#x20;       &#x7d;

  &#x20;   //

  &#x20;   \-- org.freedesktop.DBus.ListNames() returns a single value, which is

  &#x20;   \-- a list of names (here represented as [String])

  &#x20;   let Just names = fromVariant (methodReturnBody reply !! 0)

  &#x20;   //

  &#x20;   \-- Print each name on a line, sorted so reserved names are below

  &#x20;   \-- temporary names.

  &#x20;   mapM_ putStrLn (sort names)

  @


  >$ ghc --make list-names.hs

  >$ ./list-names

  >:1.0

  >:1.1

  >:1.10

  >:1.106

  >:1.109

  >:1.110

  >ca.desrt.dconf

  >org.freedesktop.DBus

  >org.freedesktop.Notifications

  >org.freedesktop.secrets

  >org.gnome.ScreenSaver'
license-name: Apache-2.0
