homepage: https://github.com/theindigamer/edit
changelog-type: markdown
hash: 0bb937cee1c3b2eb9768d419139e7a1f7fbb4d6b6884abc8a0e3d734d81afe0a
test-bench-deps:
  edit: -any
  base: -any
  comonad: ! '>=5.0 && <5.1'
  tasty-discover: ! '>=4.2 && <4.3'
  uniplate: ! '>=1.6 && <1.7'
  doctest: ! '>=0.13 && <0.17'
  tasty-quickcheck: ! '>=0.9 && <0.11'
  tasty: ! '>=1.0 && <1.2'
  QuickCheck: ! '>=2.10 && <2.13'
maintainer: Varun Gandhi <theindigamer15@gmail.com>
synopsis: A monad for rewriting things.
changelog: ! "# Revision history for `edit`\n\n## 1.0.1.0 -- 2018-09-03\n\n* `QuickCheck`
  version bump.\n\n## 1.0.0.0 -- 2018-07-19\n\n* `QuickCheck` and `comonad` are enabled
  by default instead of being disabled\n  by default. The flag names have been changed
  to reflect this.\n"
basic-deps:
  base: ! '>=4.9 && <4.12'
  comonad: -any
  transformers: ! '>=0.5 && <0.6'
  deepseq: ! '>=1.1 && <1.5'
  QuickCheck: ! '>=2.10 && <2.13'
all-versions:
- '0.0.1.0'
- '0.0.1.1'
- '1.0.0.0'
- '1.0.1.0'
author: Varun Gandhi <theindigamer15@gmail.com>
latest: '1.0.1.0'
description-type: markdown
description: ! "# Edit [![Hackage badge](https://img.shields.io/hackage/v/edit.svg?label=Hackage)](https://hackage.haskell.org/package/edit)
  [![Stackage badge](https://www.stackage.org/package/edit/badge/nightly?label=Stackage)](https://www.stackage.org/package/edit)\n\nThe
  `Edit` monad allows you to easily bubble up whether a change was made or\nnot when
  rewriting things. Some cases where this can be handy:\n\n1. You are making a sequence
  of transformations on some type and want to keep\n   track of whether any of them
  changed it or not.\n2. You are rewriting a recursive type (or a garden of mutually
  recursive types!)\n   and want to bubble up information whether something was changed
  or not.\n\nFor example, Reddit user /u/p__bing [says](https://www.reddit.com/r/haskell/comments/8mrqfy/ann_edit_a_small_package_for_rewriting_things/e00jo8i/?utm_content=permalink&utm_medium=front&utm_source=reddit&utm_name=haskell)\n\n>
  [..] I work as an iOS developer and we have this same\n> exact idea implemented,
  as a monad, in Swift, to make our UI updates faster\n> (if a change goes through
  our model layer and comes out Clean, we donâ€™t bother\n> touching the UI).\n\nA small
  example:\n\n```haskell\n>>> halveEvens x = if x `mod` 2 == 0 then (Dirty $ x `div`
  2) else (Clean x)\n>>> traverse halveEvens [1, 2, 3]\nDirty [1,1,3]\n>>> traverse
  halveEvens [1, 3, 5]\nClean [1,3,5]\n```\n\nMore thorough documentation is available
  on [Hackage](https://hackage.haskell.org/package/edit)\nunder the `Data.Edit` module.
  There is a tutorial too under `Data.Edit.Tutorial`.\n\nThere is also a corresponding
  monad transformer `EditT` available under\n`Control.Monad.Trans.EditT`.\n\n# Contributing\n\nPlease
  open an issue on the Github issue tracker to discuss missing documentation,\nAPI
  changes etc.\n"
license-name: BSD3
