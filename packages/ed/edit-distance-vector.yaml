homepage: https://github.com/thsutton/edit-distance-vector
changelog-type: markdown
hash: 27c2b6d1e1a697431e3f533736a84474f3c3f9f29e347948ac909be753d40d31
test-bench-deps:
  base: -any
  edit-distance-vector: -any
  quickcheck-instances: -any
  QuickCheck: -any
  vector: -any
maintainer: me@thomas-sutton.id.au
synopsis: Calculate edit distances and edit scripts between vectors.
changelog: ! "edit-distance-vector 1.0.0.4\n\n    * Relax version bounds to support
  GHC 8.0\n\nedit-distance-vector 1.0.0.3\n\n    * Relax version bounds to support
  GHC 7.6.3 and 7.4.2\n\nedit-distance-vector 1.0.0.2\n\n    * Relax version bounds
  to support GHC 7.6.3 and 7.4.2\n\nedit-distance-vector 1.0.0.1\n\n    * Relax version
  bounds to support GHC 7.10.1.\n\nedit-distance-vector 1.0\n\n    * Initial release
  extracted from aeson-diff package and rewritten to use\n      Data.Vector.\n"
basic-deps:
  base: ! '>=4.5 && <5.0'
  vector: ! '>=0.8'
all-versions:
- '1.0'
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
author: Thomas Sutton
latest: 1.0.0.4
description-type: markdown
description: ! "Edit Distance: Vector\n=====================\n\n[![Build Status][badge]][status]\n\nThis
  is a small library for calculating the edit distance and edit script\nbetween two
  vectors. It is generic enough that you should be able to use it\nwith vectors containing
  *values* of any type you like, with *changes* described\nby any type you like, and
  with *costs* represented by any type you like (with a\nfew restrictions).\n\nInstalling\n----------\n\nThe
  `edit-distance-vector` package is a normal Haskell library and can be\ninstalled
  using the Cabal package management tool.\n\n````{bash}\ncabal update\ncabal install
  edit-distance-vector\n````\n\n`edit-distance-vector` is [automatically tested][status]
  on GHC versions 7.4.2,\n7.6.3, 7.8.3, 7.10.1, 8.0.2 using the Travis CI service.\n\nUsage\n-----\n\nThe
  interface to `edit-distance-vector` is very small; just import\n`Data.Vector.Distance`,
  create a `Params` value with the correct operations to\ndeal with your types, and
  pass this to `leastChanges` along with your\n`Vector`s.\n\n````{haskell}\nimport
  \          Data.Monoid\n\nimport qualified Data.Vector          as V\nimport           Data.Vector.Distance\n\n--
  | Editing vectors of 'Char' values, with '(String, Int, Char)' describing\n--   changes,
  and the additive monoid of 'Int' describing costs.\nstr :: Params Char (String,
  Int, Char) (Sum Int)\nstr = Params\n    { equivalent = (==)\n    , delete     =
  \\i c    -> (\"delete\", i, c)\n    , insert     = \\i c    -> (\"insert\", i, c)\n
  \   , substitute = \\i c c' -> (\"replace\", i, c')\n    , cost = const (Sum 1)\n
  \   , positionOffset = \\ (op, _, _) -> if op == \"delete\" then 0 else 1\n    }\n\nmain
  :: IO ()\nmain = do\n    print $ leastChanges str (V.fromList \"I am thomas\")\n
  \                            (V.fromList \"My name is Thomas\")\n````\n\n(See `test/sample.hs`
  for a version of this code that is compiled\nby the automated test suite.)\n\n[badge]:
  https://travis-ci.org/thsutton/edit-distance-vector.svg?branch=master\n[status]:
  https://travis-ci.org/thsutton/edit-distance-vector\n"
license-name: BSD-3-Clause
