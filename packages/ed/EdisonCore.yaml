homepage: http://rwd.rdockins.name/edison/home/
changelog-type: text
hash: 9681809e8389320ee9389f480b7d2104a7e0f895ee8cdb016778310c86b04759
test-bench-deps: {}
maintainer: robdockins AT fastmail DOT fm
synopsis: A library of efficient, purely-functional data structures (Core Implementations)
changelog: ! "Changes in 1.3.2.1\n  * Fix compile problems on GHC 7.10\n\nChanges
  in 1.3.2\n  * Add Semigroup instances for all types that previously\n    had Monoid
  instances.\n  * Remove use of depreciated functions in Data.Edison.Assoc.StandardMap\n\nChanges
  in 1.3.1\n  * Remove Arbitrary and Coarbitrary instances for Data.Set\n    and Data.Map.
  \ These are now provided by QuickCheck >= 2.8.2\n\nChanges in 1.3\n  * Updates to
  compile with GHC 7.10\n     - Added Applicative and Alternative instances as required\n
  \    - Disambiguate the types of some operations\n     - Resolve namespace clashes\n
  \ * Added stack.yaml file to build with stack\n\nChanges in 1.2.2\n  * Update edison-core
  to use QuickCheck version 2.*\n  * Likewise update the test suite\n\nChanges in
  1.2.1.3\n  * Minor fix to the StandardMap module to handle the API change\n    in
  GHC 6.10\n\nChanges in 1.2.1.2\n  * Build system changes to remove mostly-superfulous
  dependency on\n    haskell98, and to force dependence on the 1.x branch of QuickCheck.\n\nChanges
  in 1.2.1.1\n  * Build system changes to make GHC 6.8 and cabal >= 1.2.2 happy\n\nChanges
  in 1.2.1\n  * New sequence implementation based on Finger Trees\n  * Add the 'Measured'
  class to the Data.Edison.Prelude\n  * Addition of methods to EnumSet to project
  to a bit-encoded word and to\n    create an EnumSet from a bit-encoded word\n  *
  Additional minor changes to EnumSet\n  * Fix a boneheaded mistake I made where I
  claimed most of Edison was\n    licensed under BSD3, when it is in fact licensed
  under the MIT license.\n    The practical differences are minor, and I hope this
  will not cause too\n    many problems.\n\nChanges in 1.2.0.1\n  * Change use more
  efficient operations for StandardSet.{filterGT,filterLT}\n    and StandardMap.{filterLE,filterGE,partitionLE_GT,partitionLT_GE}\n\nChanges
  in 1.2 final\n  * Fix documentation for sequences to reflect correct\n    time complexities\n\nChanges
  in 1.2rc4\n  * introduce strict/strictWith operations for all APIs\n  * add Ord*
  instances for PatriciaLoMap and TernaryTrie\n  * add David F. Place's EnumSet implementation\n
  \ * complete the FiniteMap unit test coverage and fix a bunch\n    of bugs in finite
  map implementations\n  * add 'symmetricDifference' to Collection and\n    Associated
  Collection APIs\n  * add Ord instances for data structures\n  * add Monoid instances
  for data structures\n\n\nChanges in 1.2rc3\n  * introduce the ambiguous/unambiguous
  concept and document\n    all API operations\n  * factor out methods which \"mirror\"
  superclass methods and\n    make them alises instead\n  * add lookupAndDelete* methods
  to associated collections\n  * change the type of adjustOrDelete* in associated
  collections\n  * rename subset/subsetEq to properSubset/subset\n  * add matching
  Read and Show instances for all concrete datastructures\n  * add properSubmap{By}
  submap{By} and sameMap{By} to the\n    associated collection API\n  * add Eq instances
  for concrete associated collections\n  * break out the test suite into a separate
  sub-package\n\n\nChanges in 1.2rc2\n  * add strict variants of all folds and reduces\n
  \ * reverse argument orders to 'rcons' and 'lookup*' in\n    Sequence\n  * add symbolic
  operators for lcons, rcons, append, and lookup\n    from the Sequence API\n  * add
  symbolic operators for subsetEq, difference, intersection\n    and union from the
  set API\n  * rename 'single' to 'singleton' in all APIs\n  * reaame 'intersect'
  to 'intersection' in Collection and\n    Associated Collection APIs\n  * add 'adjustOrInsert'
  to the Associated Collection API\n\n\nChanges in 1.2rc1\n  * modules re-organized
  into a hierarchy\n  * user's guide distributed throughout source code\n    as Haddock
  comments\n  * use cabal for build system\n  * add Data.Edison module to re-export
  typeclasses\n  * reorder 'lookup*' and 'find*' methods for\n    Collections and
  Associated Collections\n  * add 'unsafeMapMonotonic' to main Collection API\n  *
  organize QuickCheck properties into a full test suite\n  * add a 'structuralInvariant'
  method to all APIs, for\n    unit testing\n"
basic-deps:
  EdisonAPI: ==1.3.*
  base: ==4.*
  array: -any
  containers: -any
  mtl: -any
  QuickCheck: ! '>=2.8.2 && <3'
all-versions:
- '1.2.1'
- '1.2.1.1'
- '1.2.1.2'
- '1.2.1.3'
- '1.2.2'
- '1.2.2.1'
- '1.3'
- '1.3.1'
- '1.3.1.1'
- '1.3.2'
- '1.3.2.1'
author: Chris Okasaki
latest: '1.3.2.1'
description-type: haddock
description: ! 'This package provides the core Edison data structure implementations,

  including multiple sequence, set, bag, and finite map concrete

  implementations with various performance characteristics. The

  implementations in this package have no dependencies other than those

  commonly bundled with Haskell compilers.'
license-name: MIT
