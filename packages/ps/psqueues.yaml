homepage: ''
changelog-type: text
hash: f5086abb9e77e5731e5ffcb9a2db2bd6a76650ab15fd9b06d61419a73144e9af
test-bench-deps:
  test-framework-hunit: ! '>=0.3 && <0.4'
  test-framework: ! '>=0.8 && <0.9'
  PSQueue: ! '>=1.1'
  base: -any
  unordered-containers: ! '>=0.2.4'
  test-framework-quickcheck2: ! '>=0.3 && <0.4'
  criterion: ! '>=0.8'
  HUnit: ! '>=1.2 && <1.7'
  array: -any
  tagged: -any
  containers: ! '>=0.5'
  ghc-prim: -any
  mtl: ! '>=2.1'
  hashable: -any
  fingertree-psqueue: ! '>=0.3'
  random: ! '>=1.0'
  deepseq: -any
  QuickCheck: ! '>=2.7 && <2.12'
  psqueues: -any
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
changelog: ! "- 0.2.6.0 (2018-03-14)\n    * Fix issue with (<>) on 8.4\n    * Bump
  QuickCheck dependency to 2.11\n\n- 0.2.5.0 (2018-01-18)\n    * Fix build on GHC
  8.4\n\n- 0.2.4.0 (2017-09-27)\n    * Add `unsafeMapMonotonic`\n    * Lower build
  depends version for hashable\n    * Move repo to `jaspervdj/psqueues` to enable
  travis\n    * Lower build depends version for hashable\n\n- 0.2.3.0\n    * Add an
  `atMostView` function to all PSQ flavours\n    * Bump HUnit dependency to 1.6\n
  \   * Bump QuickCheck dependency to 2.10\n    * Clean up warnings on newer and older
  GHC versions\n\n- 0.2.2.3\n    * Bump HUnit dependency to 1.5\n\n- 0.2.2.2\n    *
  Bump QuickCheck dependency bounds\n\n- 0.2.2.1\n    * Fix benchmark compilation
  with stack\n\n- 0.2.2.0\n    * Fix import of Traversable on GHC 7.8\n\n- 0.2.1.0\n
  \   * Add Traversable instances\n\n- 0.2.0.3\n    * Bump HUnit dependency bounds\n\n-
  0.2.0.2\n    * Bump QuickCheck dependency bounds\n\n- 0.2.0.1\n    * Minor documentation
  fixes\n\n- 0.2.0.0\n    * Add convenience `deleteMin` function\n    * Bump `deepseq`
  dependency to 1.4\n\n- 0.1.1.0\n    * Remove constraints from `size`\n\n- 0.1.0.1\n
  \   * Extend cabal description, include CHANGELOG\n\n- 0.1.0.0\n    * First release:
  <https://medium.com/@bttr/announcing-psqueues-8a0fe9fe939>\n"
basic-deps:
  base: ! '>=4.2 && <5'
  ghc-prim: -any
  hashable: ! '>=1.1.2.3 && <1.3'
  deepseq: ! '>=1.2 && <1.5'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.2.0.3'
- '0.2.1.0'
- '0.2.2.0'
- '0.2.2.1'
- '0.2.2.2'
- '0.2.2.3'
- '0.2.3.0'
- '0.2.4.0'
- '0.2.5.0'
- '0.2.6.0'
author: ''
latest: '0.2.6.0'
description-type: haddock
description: ! 'The psqueues package provides

  <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in

  three different flavors.


  * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,

  deletion and lookup. This implementation is based on Ralf Hinze''s

  <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique
  for Priority Search Queues>.

  Hence, it is similar to the

  <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is

  considerably faster and provides a slightly different API.


  * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type

  to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>

  (like @IntMap@) with an additional min-heap property.


  * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it

  simply uses the keys'' hashes as indices in the @IntPSQ@. If there are any

  hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of

  this implementation is comparable to that of @IntPSQ@, but it is more widely

  applicable since the keys are not restricted to @Int@, but rather to any

  @Hashable@ datatype.


  Each of the three implementations provides the same API, so they can be used

  interchangeably. The benchmarks show how they perform relative to one

  another, and also compared to the other Priority Search Queue

  implementations on Hackage:

  <http://hackage.haskell.org/package/PSQueue PSQueue>

  and

  <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.


  <<http://i.imgur.com/KmbDKR6.png>>


  <<http://i.imgur.com/ClT181D.png>>


  Typical applications of Priority Search Queues include:


  * Caches, and more specifically LRU Caches;


  * Schedulers;


  * Pathfinding algorithms, such as Dijkstra''s and A*.'
license-name: BSD3
