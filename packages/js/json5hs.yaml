homepage: ''
changelog-type: ''
hash: e6b4273d5f7db99e7ac2598af8ceec967d36796e7aad4fd2acdb6420bde2c8c0
test-bench-deps: {}
maintainer: yxnan@pm.me
synopsis: Serialising to and from JSON5
changelog: ''
basic-deps:
  bytestring: -any
  base: '>=4 && <5'
  text: -any
  syb: '>=0.3.3'
  array: -any
  containers: -any
  mtl: -any
  pretty: -any
all-versions:
- 0.1.0.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.1
author: Yang X. Nan
latest: 0.1.3.1
description-type: markdown
description: "<div align=\"center\">\n<h1>json5hs: Serialising to and from JSON5</h1>\n<p>\n
  \     <a href=\"https://hackage.haskell.org/package/json5hs\"><img src=\"https://img.shields.io/hackage/v/json5hs?color=blue\"
  alt=\"Hackage\"></a>\n      <a href=\"https://matrix.hackage.haskell.org/#/package/json5hs\"><img
  src=\"https://img.shields.io/badge/Hackage%20CI-avaliable-brightgreen\" alt=\"Build\"></a>\n</p>\n</div>\n\n---\n\nThis
  library provides a parser and pretty printer for converting\nbetween Haskell values
  and JSON5.\n\n## Example\n\n```haskell\nghci> import Text.JSON5\nghci> encode [(\"key1\",1),(\"key2\",2)]\n\"[[\\\"key1\\\",1],[\\\"key2\\\",2]]\"\n\nghci>
  import Text.JSON5.String (runGetJSON)\nghci> input <- getLine \n{'singleQuotes':
  0xabcde, pos: +3, infnan: +Infinity, escape: \"\\t\\u1234\", trailing-comma: ['here',],
  }\nghci> runGetJSON readJSValue input\nRight (JSObject (JSONObject {fromJSObject
  = [(\"singleQuotes\",JSNumber (JSRational (703710 % 1))),(\"pos\",JSNumber (JSRational
  (3 % 1))),(\"infnan\",JSNumber (JSInfNaN Infinity)),(\"escape\",JSString (JSONString
  {fromJSString = \"\\t\\4660\"})),(\"trailing-comma\",JSArray [JSString (JSONString
  {fromJSString = \"here\"})])]}))\n\nghci> import Text.JSON5.Pretty\nghci> ppJSValue
  $ makeObj [(\"key1\", JSString $ toJSString \"value1\"), (\"key2\", JSArray [JSNull,
  JSBool True])]\n{\"key1\": \"value1\", \"key2\": [null, true]}\n\nghci> import Text.JSON5.Generic\nghci>
  ppJSValue $ toJSON $ Just [2,1,4]\n{\"Just\": [2, 1, 4]}\nghci> fromJSON (JSString
  $ toJSString \"string\") :: Result String \nOk \"string\"\n```\n\n"
license-name: BSD-3-Clause
