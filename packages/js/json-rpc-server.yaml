homepage: https://github.com/grayjay/json-rpc-server
changelog-type: markdown
hash: bad792c852d7729a88e2e3c6a10fea868ebbac07f50512760166de744c5ecae5
test-bench-deps:
  json-rpc-server: -any
  test-framework-hunit: ! '>=0.3 && <0.4'
  bytestring: -any
  test-framework: ! '>=0.7 && <0.9'
  base: -any
  unordered-containers: -any
  text: -any
  HUnit: ! '>=1.2 && <1.7'
  mtl: -any
  aeson: -any
  vector: -any
maintainer: Kristen Kozak <grayjay@wordroute.com>
synopsis: JSON-RPC 2.0 on the server side.
changelog: ! '0.2.0.0


  * Updated the error handling type from ErrorT to ExceptT.


  * Simplified the call function, so Methods and toMethods are no longer necessary.

'
basic-deps:
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.3 && <4.13'
  unordered-containers: ! '>=0.1 && <0.3'
  text: ! '>=0.11 && <1.3'
  mtl: ! '>=2.2.1 && <2.3'
  deepseq: ! '>=1.1 && <1.5'
  aeson: ! '>=0.6 && <1.5'
  vector: ! '>=0.7.1 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.0
author: ''
latest: 0.2.6.0
description-type: haddock
description: ! 'An implementation of the server side of JSON-RPC 2.0.

  See <http://www.jsonrpc.org/specification>. This

  library uses ''ByteString'' for input and output,

  leaving the choice of transport up to the user.

  See the "Network.JsonRpc.Server" module for an example.

  json-rpc-server can be used with

  <http://hackage.haskell.org/package/json-rpc-client json-rpc-client>

  to create a client and server that communicate

  with the same methods.'
license-name: MIT
