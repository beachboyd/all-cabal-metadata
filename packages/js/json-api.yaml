homepage: https://github.com/toddmohney/json-api
changelog-type: ''
hash: e070317aafbe96dfef17627eacf22f8f87688f2a6258c5d45f373ffca8615715
test-bench-deps:
  bytestring: ! '>=0.10.8.1 && <0.10.9.0'
  lens-aeson: ! '>=1.0.0.5 && <1.0.1.0'
  base: ! '>=4.7 && <5.0'
  aeson-pretty: ! '>=0.7.2 && <0.8.0'
  json-api: -any
  unordered-containers: ! '>=0.2.7.1 && <0.2.8.0'
  hspec: ! '>=2.2.3 && <2.3.0'
  text: ! '>=1.2.2.1 && <1.2.3.0'
  url: ! '>=2.1.3 && <2.2.0'
  data-default: ! '>=0.5.3 && <5.6.0'
  containers: ! '>=0.5.7.1 && <0.5.8.0'
  lens: ! '>=4.13 && <5.0'
  aeson: ! '>=0.11.2.0 && <0.11.3.0'
maintainer: Todd Mohney <toddmohney@gmail.com>
synopsis: Utilities for generating JSON-API payloads
changelog: ''
basic-deps:
  lens-aeson: ! '>=1.0.0.5 && <1.0.1.0'
  base: ! '>=4.7 && <5.0'
  unordered-containers: ! '>=0.2.7.1 && <0.2.8.0'
  text: ! '>=1.2.2.1 && <1.2.3.0'
  url: ! '>=2.1.3 && <2.2.0'
  data-default: ! '>=0.5.3 && <5.6.0'
  containers: ! '>=0.5.7.1 && <0.5.8.0'
  lens: ! '>=4.13 && <5.0'
  aeson: ! '>=0.11.2.0 && <0.11.3.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
author: Todd Mohney
latest: 0.1.1.2
description-type: markdown
description: ! "[![Circle CI](https://circleci.com/gh/toddmohney/json-api.svg?style=svg)](https://circleci.com/gh/toddmohney/json-api)\n\n##
  Haskell Implementation of the JSON-API specification\n\n\n\n#### Motivation\n\nFrom
  the specification itself:\n\n> If youâ€™ve ever argued with your team about the way
  your JSON responses should\n> be formatted, JSON API can be your anti-bikeshedding
  tool.\n> \n> By following shared conventions, you can increase productivity, take
  advantage\n> of generalized tooling, and focus on what matters: your application.\n>
  \n> Clients built around JSON API are able to take advantage of its features around\n>
  efficiently caching responses, sometimes eliminating network requests entirely.\n\nAll
  in all, API discoverability and other [HATEOAS](https://spring.io/understanding/HATEOAS)\nprinciples
  make JSON-API an attractive resource serialization option.\n\n\n\n#### The specification\n\nFind
  the specification [here](http://jsonapi.org/)\n\n\n\n#### Example usage\n\nLet's
  start with an example User record:\n\n```Haskell\ndata User = User\n  { userId        ::
  Int\n  , userFirstName :: String\n  , userLastName  :: String\n  } deriving (Eq,
  Show)\n\n$(deriveJSON defaultOptions ''User)\n```\n\nFrom this, we can use the `json-api`
  package to produce a payload conformant\nto the [JSON-API specification](http://jsonapi.org/)
  like so:\n\n```Haskell\n-- Builds the Document which will be serialized as our\n--
  web server's response payload\nmkDocument :: User -> Links -> Document User Text
  Int\nmkDocument usr links =\n  Document\n    (Singleton $ toResource usr)\n    (Just
  links)\n    Nothing\n\n-- Helper function to convert a User into a resource object\n--
  This could be our canonical serialization function for a User in any\n-- response
  payload\ntoResource :: User -> Resource User Text\ntoResource user =\n  Resource
  resourceId resourceType user resourceLinks resourceMetaData\n  where\n    resourceId
  \      = ResourceId . pack . show . userId $ user\n    resourceType     = ResourceType
  \"User\"\n    resourceLinks    = Just $ userLinks user\n    resourceMetaData = Nothing\n\n--
  helper function to build links for a User resource\nuserLinks :: User -> Links\nuserLinks
  user = toLinks [ (\"self\", selfLink) ]\n  where\n    selfLink = toURL selfPath\n
  \   selfPath = \"/users/\" <> (show $ userId user)\n```\n\nWhen delivered as a response
  from a web server, for example, we get a payload\nthat looks like this:\n\n```JSON\n{\n
  \ \"data\":{\n    \"attributes\":{\n      \"userFirstName\":\"Isaac\",\n      \"userLastName\":\"Newton\",\n
  \     \"userId\":1\n    },\n    \"id\":\"1\",\n    \"meta\":null,\n    \"type\":\"User\",\n
  \   \"links\":{\n      \"self\":\"/users/1\"\n    }\n  },\n  \"meta\":null,\n  \"links\":{\n
  \   \"self\":\"/users/1\"\n  }\n}\n```\n\nNeat! We can see that if we would like
  the full User data for the User with\nID=1, we can query `/users/1`. Discoverability!\n\nWe
  can also see from the top-level `links` data that this particular payload originated\nfrom
  `/users/1`.\n\nThis is a very simple example to provide an introduction to the basic
  idea\nbehind JSON-API and how to use this library. Check out [these examples](http://jsonapi.org/examples/)\nfor
  more robust representations of resourceful payloads. Here, you'll start to\nsee
  the more comprehensive benefits of a discoverable API.\n\n\n\n#### Example Project\n\nThere
  is an [example project](https://github.com/toddmohney/json-api/tree/master/example)
  illustrating how the library can be used in the context of a web server.\n\n\n\n####
  Hackage\n\nModule documentation can be found on [Hackage](http://hackage.haskell.org/package/json-api)\n"
license-name: MIT
