homepage: ''
changelog-type: markdown
hash: fb91c50b72ebbe89a4586cbad86528338d18a299bf400d85f98fdeba0484090e
test-bench-deps:
  json-schema: -any
  bytestring: ! '>=0.10 && <0.12'
  tasty-th: ==0.1.*
  generic-aeson: ==0.2.*
  base: ! '>=4.4 && <5'
  text: ! '>=0.10 && <1.3'
  aeson-utils: ! '>=0.2 && <0.4'
  tasty-hunit: ! '>=0.9 && <0.11'
  attoparsec: ! '>=0.10 && <0.14'
  tasty: ! '>=0.10 && <0.13'
  aeson: ! '>=0.7 && <1.3'
  vector: ! '>=0.10 && <0.13'
maintainer: code@silk.co
synopsis: Types and type classes for defining JSON schemas.
changelog: ! "# Changelog\n\n#### 0.7.4.1\n\n* aeson-0.10 produces new error messages
  so the test-suite was updated to reflect this.\n\n### 0.7.4.0\n\n* Raise upper length
  limit of `UTCTime` since aeson-0.9 increased the precision.\n* Add `JSONSchema Aeson.Value`
  instance.\n\n#### 0.7.3.7\n\n* Allow `generic-deriving 1.8.*`\n* Allow `vector 0.11.*`\n\n####
  0.7.3.6\n\n* Allow `aeson 0.9.*`\n\n#### 0.7.3.5\n\n* Allow `attoparsec 0.13.*`\n\n####
  0.7.3.4\n\n* Fix compilation on GHC 7.2 and 7.4\n\n#### 0.7.3.3\n\n* Allow `tagged
  0.8.*` in test-suite\n\n#### 0.7.3.2\n\n* Allow `tagged 0.8.*`\n\n#### 0.7.3.1\n\n*
  test-suite: Allow `aeson-utils 0.3.*`\n\n### 0.7.3.0\n\n* Add `JSONSchema` instances
  for all standard Num types and Scientific.\n\n### 0.7.2.0\n\n* Add `JSONSchema`
  instances for Double, Float, Fixed\n\n#### 0.7.1.1\n\n* Allow `generic-deriving
  1.7.*`\n\n### 0.7.1.0\n\n* Export `GJSONSchema` type to allow clients to write type
  signatures for `gSchema` and `gSchemaWithSettings`.\n\n#### 0.7.0.2\n\n* Allow time
  1.5.*\n\n#### 0.7.0.1\n\n* Drop support for old tasty versions\n\n## 0.7.0.0\n\n*
  Removed the `Null` constructor from `Schema`, use `Data.JSON.Schema.Combinators.nullable`
  instead.\n\n* Added the `Validation` module that can be used to validate a json\n
  \ object against a schema and to get descriptive error messages.\n\n* Updates for
  `Maybe` fixes in `generic-aeson 0.2.0.0` including more\n  thorough test cases.\n\n####
  0.6.1.1\n\n* Bugfix: Remove underscores from fields and constructors in generated
  schemas to match generic-aeson.\n\n### 0.6.1\n\n* Add JSONSchema instances for tuples
  up to length 15 (matching aeson 0.8 instances)\n* Specify uniqueness for JSONSchema
  instances for Set.\n\n## 0.6\n\nBreaking changes:\n\n* Add `Constant Aeson.Value`
  type to `Schema`\n* Change Number to take a `Bound` for the boundary. Before this
  the upper bound could not be `-1`.\n* Change `Value` and `Array` to take a `LengthBound`.
  The difference from Number is that these values should always be `>= 0` if present.\n\nMinor:\n\n*
  Add `Bound { lower :: Maybe Int, upper :: Maybe Int }`\n* Add `unbounded` as a shorthand
  for a `Bound` without restrictions\n* Add `LengthBound { lowerLength :: Maybe Int,
  upperLength :: Maybe Int }`\n* Add `unboundedLength` as a shorthand for a `LengthBound`
  without restrictions\n* Add remaining `JSONSchema` instances based on existing Aeson
  instances. `UTCTime`, `Set`, Lazy `Text`, and tuples up to length 7.\n* Add `enum`
  combinator as a shorthand for creating a `Choice` of `Constant`s\n\n## 0.5\n\n*
  `JSONSchema` instances for `Data.Vector`, `Data.Map`, and `Data.HashMap`\n* Add
  `Map` type for json objects with arbitrary keys\n* Add `Any` type for any json value\n*
  Don't generate empty field names in ojbects for constructors without labeled fields\n"
basic-deps:
  generic-aeson: ==0.2.*
  base: ! '>=4.4 && <5'
  time: ! '>=1.2 && <1.9'
  unordered-containers: ==0.2.*
  text: ! '>=0.10 && <1.3'
  generic-deriving: ! '>=1.6 && <1.12'
  containers: ! '>=0.3 && <0.6'
  mtl: ! '>=2.1 && <2.3'
  scientific: ==0.3.*
  aeson: ! '>=0.7 && <1.3'
  vector: ! '>=0.10 && <0.13'
all-versions:
- '0.4'
- '0.5'
- '0.6'
- '0.6.1'
- '0.6.1.1'
- '0.7.0.0'
- '0.7.0.1'
- '0.7.0.2'
- '0.7.1.0'
- '0.7.1.1'
- '0.7.2.0'
- '0.7.3.0'
- '0.7.3.1'
- '0.7.3.2'
- '0.7.3.3'
- '0.7.3.4'
- '0.7.3.5'
- '0.7.3.6'
- '0.7.3.7'
- '0.7.4.0'
- '0.7.4.1'
author: Silk
latest: '0.7.4.1'
description-type: markdown
description: ! '# json-schema


  [![Build Status](https://travis-ci.org/silkapp/json-schema.svg?branch=master)](https://travis-ci.org/silkapp/json-schema)


  `json-schema` is like XML schemas, but for JSON. It''s haskell specific and has
  no relation to json-schema.org.


  The package provides


  * An AST type `Schema` defining the structure of a JSON object.

  * A type class `JSONSchema` to define a schema for a type.

  * Combinators for defining schemas.

  * A module for validating Aeson values against schemas.

  * Built-in instances matching [aeson''s](http://hackage.haskell.org/package/aeson).

  * A Generics module matching aeson instances generated by [generics-aeson](http://hackage.haskell.org/package/generic-aeson)


  If you use another library for generating JSON instances (such as aeson''s built-in
  generics/template haskell) or write aeson instances by hand you will not get matching
  JSONSchema instances if you use json-schema''s generics module.


  This package assumes that your `ToJSON` and `FromJSON` instances match.


  ## Installation


  This package is available on [hackage](http://hackage.haskell.org/package/json-schema)


  ```shell

  $ cabal install json-schema

  ```


  ## Examples


  see [the examples folder](https://github.com/silkapp/json-schema/blob/master/examples/Example.hs)
  or [The test suite](https://github.com/silkapp/json-schema/tree/master/tests).

'
license-name: BSD3
