homepage: http://ideas.cs.uu.nl/www/
changelog-type: text
hash: 9a9af0f2e00a7d9701e913a64882f18844391b393e7b10d4879cb179c74794b0
test-bench-deps: {}
maintainer: bastiaan.heeren@ou.nl
synopsis: Feedback services for intelligent tutoring systems
changelog: ! "Changelog ideas-1.5 => ideas.1.6\n\n* dynamic strategy combinator that
  uses the current object/term\n* more instances for IsTerm (Maybe, Bool, Map, Set)\n*
  exercise-specific properties (that can be parameterized over its type)\n* support
  for encoding exercise terms in JSON (using an exercise property)\n* basic support
  for Latex and MathJax (in html output)\n* extended 'apply' feedback service with
  buggy rules and restarts\n* redesigned (parameterized) transformations\n* reimplemented
  strategy combinator split, based on %>>\n* new function defaultMainWith, which takes
  options\n* added 'onefinal' feedback service, which returns a final term in context\n*
  layered design for sub-directories: renaming/moving some modules \n  (e.g. Ideas.Utils.Prelude)\n*
  Typeable constraint now properly encapsulated in Ref type\n* removing (static) documentation
  generation (unused feature)\n* removing Common.Algebra modules (now in the Math
  domain reasoner)\n* fixed escaping of characters in xml\n* fixed recognition of
  exercise IDs in ModeJSON\n* fixed processing of Null in EncoderJSON\n* fixed rule
  ordering in function ruleset\n \nChangelog ideas-1.4 => ideas.1.5\n\n* upgrade to
  ghc-7.10\n* reintroducing dependency on standard cgi library\n* adding missing instances
  for Term and ShowString\n* new option for JSON mode: exercise terms can be encoded
  in JSON\n* switched to QuickCheck's random number generator QCGen\n* requests can
  fix the random seed\n* added Term to service types, encoders and decoders\n* JSON-Int
  can be used for decoded environments\n* new implementation for interleave and atomic
  prefix combinators (more lazy)\n* bug fix: \"no prefix\" now handled by json decoder\n\n\nChangelog
  ideas-1.3.1 => ideas.1.4\n-----------------------------------------------------------------------------\n\n*
  refactoring of strategies\n  - strategies are now represented cyclic trees (that
  preserve fixpoints)\n  - new strategy combinators can be defined outside the framework\n
  \ - simpler interfaces: no more Builder, Step, and Core datatypes\n  - nice speed-up
  for constructing and running strategies\n  \n* support for new database schema (v2)
  with more columns\n  - request can have an optional 'logging' attribute (false,
  v1, v2)\n  - command-line flag for seeing information that is logged \n  - userid,
  sessionid, and taskid are stored in a state\n\n* changing license to Apache License
  version 2.0 (was: GPL)\n* renaming strategy combinators (eg .*.) to solve clash
  with Applicative.<*> \n* adding SyntaxError constructor to Diagnose datatype\n*
  added read instance for Difficulty\n* changed newline and tab escaping in JSON\n*
  re-implemented atomic combinator\n* introduced inits combinator  (initial prefixes)
  and atomic prefix (!~>)\n* introduced somewhereWhen traversal combinator\n* added
  cabal flag to resolve dependency on network >= 2.6\n* added cabal flag to enable
  support for logging"
basic-deps:
  wl-pprint: -any
  base: ! '>=4.8 && <5'
  time: -any
  Diff: -any
  filepath: -any
  uniplate: -any
  parsec: -any
  containers: -any
  cgi: ! '>=3001.3.0.0'
  random: -any
  QuickCheck: ! '>=2.8 && <2.10'
  directory: -any
all-versions:
- '0.5.8'
- '0.6'
- '0.7'
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.3.1'
- '1.4'
- '1.5'
- '1.6'
author: Bastiaan Heeren, Alex Gerdes, Johan Jeuring
latest: '1.6'
description-type: haddock
description: ! 'Ideas (Interactive Domain-specific Exercise Assistants) is a joint
  research

  project between the Open University of the Netherlands and Utrecht

  University. The project''s goal is to use software and compiler technology to

  build state-of-the-art components for intelligent tutoring systems (ITS) and

  learning environments. The ''ideas'' software package provides a generic

  framework for constructing the expert knowledge module (also known as a

  domain reasoner) for an ITS or learning environment. Domain knowledge is

  offered as a set of feedback services that are used by external tools such

  as the digital mathematical environment (DME), MathDox, and the Math-Bridge

  system. We have developed several domain reasoners based on this framework,

  including reasoners for mathematics, linear algebra, logic, learning Haskell

  (the Ask-Elle programming tutor) and evaluating Haskell expressions, and for

  practicing communication skills (the serious game Communicate!).'
license-name: Apache-2.0
