homepage: https://github.com/mrkkrp/identicon
changelog-type: markdown
hash: 38918a2a15bb3509ed44079c8011c54fe92739c7bc0d59f9d86d593bea37ca6f
test-bench-deps:
  tf-random: ! '>=0.4 && <0.6'
  JuicyPixels: ! '>=3.2.6.5 && <4.0'
  bytestring: ! '>=0.10.6 && <0.13'
  base: ! '>=4.7 && <5.0'
  hspec: ! '>=2.0 && <3.0'
  criterion: ! '>=0.6.2.1 && <1.5'
  random: ! '>=1.1 && <1.2'
  QuickCheck: ! '>=2.7 && <3.0'
  identicon: -any
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Flexible generation of identicons
changelog: ! "## Identicon 0.2.2\n\n* Improved documentation and metadata.\n\n## Identicon
  0.2.1\n\n* Added `Semigroup` and `Monoid` instances for `Layer`.\n\n## Identicon
  0.2.0\n\n* Added benchmarks.\n\n* Renamed `applyWords` to `applyBytes` (method of
  type class `ApplyBytes`).\n  It's unlikely that anyone uses it though as it's more
  of internal\n  machinery.\n\n## Identicon 0.1.0\n\n* Initial release.\n"
basic-deps:
  JuicyPixels: ! '>=3.2.6.5 && <4.0'
  bytestring: ! '>=0.10.6 && <0.13'
  base: ! '>=4.7 && <5.0'
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
author: Mark Karpov <markkarpov92@gmail.com>
latest: 0.2.2
description-type: markdown
description: ! "# Identicon\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/identicon.svg?style=flat)](https://hackage.haskell.org/package/identicon)\n[![Stackage
  Nightly](http://stackage.org/package/identicon/badge/nightly)](http://stackage.org/nightly/package/identicon)\n[![Stackage
  LTS](http://stackage.org/package/identicon/badge/lts)](http://stackage.org/lts/package/identicon)\n[![Build
  Status](https://travis-ci.org/mrkkrp/identicon.svg?branch=master)](https://travis-ci.org/mrkkrp/identicon)\n[![Coverage
  Status](https://coveralls.io/repos/mrkkrp/identicon/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/identicon?branch=master)\n\nThe
  package implements a flexible framework for identicons generation on top\nof the
  [Juicy Pixels](https://hackage.haskell.org/package/JuicyPixels)\npackage.\n\n##
  Quick start\n\nTo use the package you usually need the following set of imports
  (and a\ncouple of language extensions for the type level magic):\n\n```haskell\n{-#
  LANGUAGE DataKinds     #-}\n{-# LANGUAGE TypeOperators #-}\n\nimport Codec.Picture
  -- JuicyPixels\nimport Data.ByteString (ByteString) -- we use strict byte strings\nimport
  Data.Proxy\nimport Data.Word (Word8)\nimport Graphics.Identicon -- core definitions\nimport
  Graphics.Identicon.Primitive -- some visual primitives\n```\n\nYou first write a
  type that holds information about total number of bytes\nyour identicon consumes
  and number of distinct visual components it has\n(they are called “layers” in the
  terminology of the package):\n\n```haskell\ntype MyIcon = Identicon 12 :+ Consumer
  4 :+ Consumer 4 :+ Consumer 4\n```\n\nHere we have an identicon that needs 12 bytes
  to be generated. It has three\nconsumers that take 4 bytes each and generate layers,
  i.e. visual objects\n(circles, squares, etc.).\n\nThe second step is to write implementation
  of every layer. We can use the\nprimitives available out-of-the-box, they live in
  the\n`Graphics.Identicon.Primitive` module:\n\n```haskell\nmyImpl :: Implementation
  MyIcon\nmyImpl = Identicon :+ a :+ a :+ a\n  where\n    a :: Word8 -> Word8 -> Word8
  -> Word8 -> Layer\n    a r g b n = rsym $ onGrid 3 3 n $\n      gradientXY (edge
  . mid) black (PixelRGB8 r g b)\n```\n\nWe could choose to code every layer differently,
  but since position and\ncolor of every layer are unlikely to be the same, this approach
  will work\nwell too.\n\nEvery byte is available to the layer-generating function
  as a distinct\n`Word8` argument. The type system makes sure that:\n\n* you consume
  exactly as many bytes as you promised in type of your\n  identicon;\n\n* you have
  as many layers as you described in type of your identicon;\n\n* every function in
  your implementation has a correct signature (i.e. it\n  grabs as many `Word8`s as
  promised and produces a `Layer` in the end).\n\nMixing of layers and generation
  is handled by the library like this:\n\n```haskell\n-- | Here is the function that
  generates your identicons. It's usually\n-- convenient to wrap the 'renderIdenticon'
  function that comes with the\n-- library.\n\ngenMyIdenticon\n  :: Int               --
  ^ Identicon width\n  -> Int               -- ^ Identicon height\n  -> ByteString
  \       -- ^ Input (some sort of hash or something)\n  -> Maybe (Image PixelRGB8)\n
  \    -- ^ Identicon, unless 'ByteString' is too short\ngenMyIdenticon = renderIdenticon
  (Proxy :: Proxy MyIcon) myImpl\n```\n\nFor more information head straight to the
  Haddocks. BTW, I have\nwritten\n[a blog post](https://mrkkrp.github.io/posts/the-identicon-package.html)\nabout
  the package where I demonstrate some pictures generated with it.\n\n## License\n\nCopyright
  © 2016–2017 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD-3-Clause
