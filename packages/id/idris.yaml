homepage: http://www.idris-lang.org/
changelog-type: markdown
hash: 8586191c8722199c608b86a44cbf6571875fd425a0041e798ecc100d2e9537fc
test-bench-deps:
  bytestring: -any
  haskeline: ! '>=0.7'
  base: -any
  tasty-golden: ! '>=2.0'
  time: -any
  idris: -any
  filepath: -any
  process: -any
  tagged: -any
  containers: -any
  tasty-rerun: ! '>=1.0.0'
  transformers: -any
  optparse-applicative: ! '>=0.13 && <0.15'
  tasty: ! '>=0.8'
  directory: -any
maintainer: Edwin Brady <eb@cs.st-andrews.ac.uk>
synopsis: Functional Programming Language with Dependent Types
changelog: ! "# New in 1.3.1\n\n## Tool updates\n+ Fixes for building with GHC 8.6\n+
  Fix for megaparsec update\n+ Some fixes for memory allocation issues in the C back
  end\n\n# New in 1.3.0\n\n## Language updates\n+ Old 'induction' tactics and eliminator
  generation functionality ('%elim', '%case', 'elim_for') is no longer supported.\n
  \ Please, rely on the ones provided by Pruviloj and elaborator reflection instead.\n\n##
  Library updates\n\n+ Changed rndInt in Effect.Random so that it does not alternate
  between odd\n  and even.\n+ Additions to `contrib`:\n  * `Data.SortedBag`: Bag (or
  Multiset) implemention based on `Data.SortedMap`.\n  * `Data.PosNat`: A `Nat` paired
  with a proof that it is positive.\n  * `Data.Chain`: A function with an arbitrary
  number of arguments, plus\n    combinators for working with them.\n\n## Tool updates\n+
  Added a switch `--allow-capitalized-pattern-variables` to optionally allow capitalized
  pattern variables after they were prohibited in 1.2.0.\n+ REPL now prints an error
  message if program compiled by `:exec` terminates\n  abnormally.\n+ Idris now builds
  with GHC 8.4.\n+ In the C backend, the representation of Idris values at runtime
  has been reworked.\n\n# New in 1.2.0\n\n## Language updates\n\n+ In `@`-patterns
  such as `x@p`, `x` is now in scope on the right-hand side\n  of any definitions
  in `where` clauses, provided the left-hand side of the\n  definition does not shadow
  it.\n+ The `LinearTypes` language extension has been revised. It implements the\n
  \ rules from Bob Atkey's draft \"The Syntax and Semantics of Quantitative\n  Type
  Theory\" and now works with holes and case expressions.\n+ Backticked operators
  can appear in sections, e.g. ``(`LTE` 42)`` or\n  ``(1 `plus`)``.\n+ Backticked
  operators can have their precendence and associativity set like\n  other operators,
  e.g. ``infixr 8 `cons` ``.  Backticked operators with\n  undeclared fixity are treated
  as non-associative with precedence lower\n  than all declared operators.\n+ Allow
  non-injective implementations if explicitly named, e.g.,\n  ```idris\n  LTB : Nat
  -> Type\n  LTB b = DPair Nat (\\ n  => LT n b)\n\n  implementation [uninhabltb]
  Uninhabited (LTB Z) where\n    uninhabited (MkDPair n prf) = absurd prf\n  ```\n
  \ It is possible to use `using implementation uninhabltb` to add the\n  implementation
  to the automated resolution, but if it fails to find the\n  instance due to non-injectivity,
  one must pass it explicitly to target\n  function, i.e. `absurd @{uninhabltb}`.\n+
  Verbatim strings now support trailing quote characters. All quote characters\n  until
  the final three are considered part of the string. Now a string such as\n  `\"\"\"\"hello\"\"\"\"`
  will parse, and is equivalent to `\"\\\"hello\\\"\"`.\n+ C FFI now supports pasting
  in any expression by prefixing it with '#', e.g.\n  ```idris\n  intMax : IO Int\n
  \ intMax = foreign FFI_C \"#INT_MAX\" (IO Int)\n  ```\n+ The deprecated keywords
  `%assert_total`, `abstract`, and `[static]` have\n  been removed as well as the
  use of \"public\" instead of \"public export\" to\n  expose a symbol.\n+ The syntax
  for pattern-match alternatives now works for `let` statements in\n  `do` blocks
  in addition to `let` expressions and `<-` statements, e.g.\n  ```idris\n    do …\n
  \      let Just x = expr | Nothing => empty\n       …\n  ```\n  This means that
  a `with`-application (using `|`) cannot be used in that\n  position anymore.\n\n##
  Library Updates\n\n+ Removed `oldeffects` library from `libs` folder, use `effects`
  or `Control.ST` instead.\n+ Added `Text.Literate`, a module for working with literate
  source files.\n+ Added `Data.IORef`, for working with mutable references in `IO`
  and `JS_IO`.\n+ Added `discriminate` and `construct` tactics to Pruviloj.\n+ Added
  `IsSucc` type to `Prelude`, which proves that a `Nat` is a successor.\n+ Added `Data.IOArray`,
  containing primitives for mutable arrays.\n+ Added `Language.JSON`, for total serialization/deserialization
  of JSON data.\n+ Reworked operator fixity for many operators.\n  * Changed `&&`
  and `||` to be right-associative. Increased precedence of `&&`\n    to be higher
  than that of `||`.\n  * Removed associativity from Boolean comparison operators
  `==`, `/=`, `<`, `<=`,\n    `>`, and `>=`. Increased precedence of `/=` and `==`
  to match the others.\n  * Made `<|>`, `<$>`, and `.` right-associative.\n  * Swapped
  precedence of `<|>` and `<*>` (and its related operators, `<*` and\n    `*>`). Now
  `<|>` has a lower precedence.\n  * Lowered the precedence of `>>=` to be below that
  of `<|>`.\n+ Added some useful string manipulation functions to `Data.String.Extra`.\n+
  Added `Control.Delayed`, a module for conditionally making a type `Inf` or `Lazy`.\n+
  Added `Data.Fuel`, which implements the `Fuel` data type and the partial `forever`
  function.\n+ Added `Data.Bool.Extra`, a module with properties of boolean operations.\n+
  Moved core of `Text.Lexer` to `Text.Lexer.Core`. Added several new combinators\n
  \ and lexers to `Text.Lexer`.\n+ Moved core of `Text.Parser` to `Text.Parser.Core`.
  Added several new combinators\n  to `Text.Parser`. Made the following changes.\n
  \ * Flipped argument order of `parse`.\n  * Renamed `optional` to `option` and flip
  argument order.\n  * Renamed `maybe` to `optional`.\n  * Generalised many combinators
  to use an unknown `commit` flag where possible.\n+ `Prelude.Doubles.atan2` is now
  implemented as a primitive instead of\n  being coded in Idris.\n+ Added `Test.Unit`
  to `contrib` for simple unit testing.\n+ Removed several deprecated items from the
  libraries shipped with Idris.\n+ Moved `abs` from the `Neg` interface into its own
  `Abs` interface.  `Nat`\n  implements `Abs` with `abs = id`.\n+ Added `Control.ST.File`,
  an ST based implementation of the same behaviour\n  implemented by `Effect.File`
  in the effects package.\n\n## Tool Updates\n\n+ Private functions are no longer
  visible in the REPL except for modules\n  that are explicitly loaded.\n+ The --interface
  option now creates CommonJS modules on the node backend.\n+ The C backend now pass
  arguments to the C compiler in the same order\n  as they were given in the source
  files.\n+ Backslash, braces and percent symbols are now correctly pretty printed\n
  \ in LaTeX.\n+ Errors and warnings now consistently have the following format:\n
  \ ```idris\n  reg068.idr:1:6-8:\n    |\n  1 | data nat : Type where --error\n    |
  \     ~~~\n  Main.nat has a name which may be implicitly bound.\n  This is likely
  to lead to problems!\n  ```\n  The code is highlighted when highlighting information
  is available.  How\n  much highlighting information is available depends on where
  the error\n  occurred.\n+ The parser provider has been switched from Trifecta to
  Megaparsec.  This\n  could possibly cause some subtle deviations in parsing from
  previous\n  versions of Idris.\n+ Many more errors now report beginning *and* ending
  position (which may be\n  on different lines), instead of just a single point.  The
  format is\n  `Foo.idr:9:7-15:` if ending column is on the same line or\n  `Foo.idr:9:7-10:15:`
  if the ending column is on a different line.\n+ Error messages were changed so that
  the last column is inclusive, e.g.\n  `Foo.idr:9:7-15:` includes column 15.  Previously
  the error would have read\n  `Foo.idr:9:7-16:`.\n\n## Packaging Updates\n\n+ Package
  names now only accept a restrictive charset of letters, numbers and the `-_` characters.\n
  \ Package names are also case insensitive.\n+ When building makefiles for the FFI,
  the environment variables\n  `IDRIS_INCLUDES` and `IDRIS_LDFLAGS` are now set with
  the correct C\n  flags.\n\n# New in 1.1.1\n\n+ Erasure analysis is now faster thanks
  to a bit smarter constraint solving.\n+ Fixed installation issue\n+ Fixed a potential
  segfault when concatenating strings\n\n# New in 1.1.0\n\n## Library Updates\n\n+
  Added `Text.PrettyPrint.WL` an implementation of the Wadler-Leijen\n  Pretty-Print
  algorithm.  Useful for those wishing to pretty print\n  things.\n+ Added `Text.Lexer`
  and `Text.Parser` to `contrib`. These are small libraries\n  for implementing total
  lexical analysers and parsers.\n+ New instances:\n    + Added `Catchable` for `ReaderT`,
  `WriterT`, and `RWST`.\n    + Added `MonadTrans` for `RWST`.\n+ Added utility functions
  to `Data.SortedMap` and `Data.SortedSet` (`contrib`),\n  most notably `merge`, merging
  two maps by their `Semigroup` op (`<+>`)\n+ `Prelude.WellFounded` now contains an
  interface `Sized a` that defines a size\n  mapping from `a` to `Nat`. For example,
  there is an implementation for lists,\n  where `size = length`.\n\n  The function
  `sizeAccessible` then proves well-foundedness of the relation\n  `Smaller x y =
  LT (size x) (size y)`, which  allows us to use strong\n  induction conveniently
  with any type that implements `Sized`.\n\n  In practice, this allows us to write
  functions that recurse not only on\n  direct subterms of their arguments but on
  any value\n  with a (strictly) smaller `size`.\n\n  A good example of this idiom
  at work is `Data.List.Views.splitRec` from `base`.\n+ Added utility lemma `decEqSelfIsYes
  : decEq x x = Yes Refl` to\n  `Decidable.Equality`. This is primarily useful for
  proving properties of\n  functions defined with the help of `decEq`.\n\n## Tool
  Updates\n\n+ New JavaScript code generator that uses an higher level intermediate\n
  \ representation.\n\n+ Various optimizations of the new JavaScript code generator.\n\n+
  Names are now annotated with their representations over the IDE\n  protocol, which
  allows IDEs to provide commands that work on special\n  names that don't have syntax,
  such as case block names.\n\n\n# New in 1.0\n\n+ It's about time\n\n# New in 0.99.2\n\n##
  Library Updates\n\n+ Added `Data.Buffer` to `base`. This allows basic manipulation
  of mutable\n  buffers of `Bits8`, including reading from and writing to files.\n\n##
  Tool Updates\n\n+ Idris now checks the list of packages specified at the command
  line\n  against those installed. If there is a mismatch Idris will complain.\n\n##
  Miscellaneous Updates\n\n+ Documentation updates for the new `Control.ST` library\n+
  Various stability/efficiency fixes\n\n# New in 0.99.1:\n\n## Language updates\n\n*
  Language pragmas now required for the less stable existing features, in\n  addition
  to the existing `TypeProviders` and `ErrorReflection`:\n  + `ElabReflection`, which
  must be enabled to use `%runElab`\n  + `UniquenessTypes`, which must be enabled
  to use `UniqueType`\n  + `DSLNotation`, which must be enabled to define a `dsl`
  block\n  + `FirstClassReflection`, which must be enabled to define a `%reflection`\n
  \   function\n\n* New language extension `LinearTypes`:\n  + This allows adding
  a /multiplicity/ to a binder which says how often it\n    is allowed to be used;
  either 0 or 1 (if unstated, multiplicity is \"many\")\n  + The typing rules follow
  Conor McBride's paper \"I Got Plenty o' Nuttin'\"\n  + This is highly experimental,
  unfinished, not at all polished. and there\n    are still lots of details to sort
  out. Some features don't quite work\n    properly yet. But it is there to play with
  for the brave!\n\n## Tool Updates\n\n+ Idris' output has been updated to more accurately
  reflect its\n  progress through the compiler i.e. Type Checking; Totality Checking;\n
  \ IBC Generation; Compiling; and Code Generation. To control the\n  loudness of
  the reporting three verbosity levels are introduced:\n  `--V0`, `--V1`, and `--V2`.
  The old aliases of `-V` and `--verbose`\n  persist.\n\n+ New REPL command `:!` that
  runs an external shell command.\n\n+ The REPL now colourises output on MinTTY consoles
  (e.g., Cygwin and MSYS)\n  on Windows, which previously did not occur due to a bug.\n\n+
  Idris now runs in a UTF-8-compatible codepage on Windows. This fixes many\n  Unicode-rendering
  issues on Windows (e.g., error messages stating\n  `commitBuffer: invalid argument
  (invalid character)`).\n\n+ Idris now has a `--warnipkg` flag to enable auditing
  of Idris\n  packages during build time. Currently auditing check's the list of\n
  \ modules specified in the `iPKG` file with those presented in the\n  package directory.\n\n##
  Library Updates\n\n+ Terminating programs has been improved with more appropriate\n
  \ functions (`exitWith`, `exitFailure`, and `exitSuccess`) and a data\n  structure
  (`ExitCode`) to capture a program's return code.\n+ Casting a `String` to an `Int`,
  `Integer` or a `Double` now ignores leading\n  and trailing whitespace. Previously
  only leading whitespace was ignored.\n+ RTS functions `openFile`, `do_popen`, and
  `ARGV` are now properly encoded using UTF-8 on Windows.\n\n# New in 0.99:\n\n##
  Language updates\n\n* `record` syntax now allows updating fields, including nested
  fields,\n  by applying a function using the `$=` operator.  For example:\n\n  ```idris\n
  \ record Score where\n         constructor MkScore\n         correct : Nat\n         attempted
  : Nat\n\n  record GameState where\n         constructor MkGameState\n         score
  : Score\n         difficulty : Nat\n\n  correct : GameState -> GameState\n  correct
  st = record { score->correct $= (+1),\n                        score->attempted
  $= (+1) } st\n  ```\n\n* Implicit parameter to interfaces are now allowed. For example:\n\n
  \ ```idris\n  interface Shows (ts : Vect k Type) where\n    shows : HVect ts ->
  Vect k String\n  ```\n  In this interface, `k` is an implicit parameter, but previously
  needed to\n  be explicit\n\n\n## Library updates\n\n* The File Effect has been updated
  to take into account changes in\n  `Prelude.File` and to provide a 'better' API.\n*
  `natEnumFromThen` and `natEnumFromTo` have been updated to correctly calculate reverse
  ranges. Range syntax `[a,b..c]` now can be used again to generate reverse ranges.\n*
  `divBN` and `modBN` now can only be used for unsigned numbers.\n* `return`, which
  has been an alias for `pure` for many releases, is now deprecated.\n* Replace instance
  with implementation:\n  + `InstanceN` is deprecated, use `ImplementationN` instead.\n
  \ + `InstanceCtorN` is deprecated, use `ImplementationCtorN` instead.\n  + `addInstance`
  is deprecated, use `addImplementation` instead.\n  + `%instance` keyword is deprecated,
  use `%implementation` instead.\n\n* Idris packages are now installed within a sub-directory
  `libs` of Idris' data directory, before they were installed in the directory's root.\n\n##
  Tool updates\n\n* Idris' documentation system now displays the documentation for
  auto\n  implicits in the output of `:doc`. This is tested for in `docs005`.\n* New
  command line flag `--info` that displays information about the installation.\n*
  New command line flag `--sourcepath <dir>` that allows adding directories to the
  source search path.\n* Allow 'installation' of a package's IdrisDoc documentation
  into a central location. The default location is the subdirectory `docs` of Idris'
  data directory.\n  * New flag `--installdoc <ipkg>` provided to install documentation\n
  \ * New flag `--docdir` provided to show default documentation installation location.\n
  \ * New environment variable `IDRIS_DOC_PATH` to allow specification of an alternative
  installation path for documentation.\n* Semantic meaning behind several environment
  variables has been clarified in documentation and code. See compilation section
  of the reference manual for more details.\n* Interface parameter constraints are
  now printed in the output of `:doc`. This\n  is tested for in `docs006`.\n\n## Miscellaneous
  updates\n\n* New, faster, better, implementation of the coverage checker\n* The
  test suite now uses [tasty-golden](https://hackage.haskell.org/package/tasty-golden).
  New tests must be registered in `test/TestData.hs`, as explained in the relevant
  `README.md`.\n* Added OSX and Windows continous integration with Travis and Appveyor.\n\n##
  UI Changes\n\n* The :e command can now handle an $EDITOR with arguments in it, like
  \"emacs -nw\"\n\n\n# New in 0.12:\n\n## Language updates\n\n* `rewrite` can now
  be used to rewrite equalities on functions over\n  dependent types\n* `rewrite`
  can now be given an optional rewriting lemma, with the syntax\n  `rewrite [rule]
  using [rewrite_lemma] in [scope]`.\n\n* Reorganised elaboration of `implementation`,
  so that interfaces with\n  dependencies between methods now work more smoothly\n\n*
  Allow naming of parent implementations when defining an implementation.\n  For example:\n\n
  \ ```\n  [PlusNatSemi] Semigroup Nat where\n    (<+>) x y = x + y\n\n  [MultNatSemi]
  Semigroup Nat where\n    (<+>) x y = x * y\n\n  -- use PlusNatSemi as the parent
  implementation\n  [PlusNatMonoid] Monoid Nat using PlusNatSemi where\n    neutral
  = 0\n\n  -- use MultNatSemi as the parent implementation\n  [MultNatMonoid] Monoid
  Nat using MultNatSemi where\n    neutral = 1\n  ```\n\n* Interface definitions can
  now include data declarations (but not data\n  definitions). Any implementation
  of the interface must define the method\n  using a data type. The effect is to cause
  Idris to treat the method as\n  a data type (for unification and interface resolution
  purposes).\n\n* Experimentally, allow named implementations to be available by default
  in a\n  block of declarations with `using` notation. For example:\n\n  ```\n  using
  implementation PlusNatMonoid\n    test : Nat -> Nat\n    test x = x <+> x <+> neutral\n
  \ ```\n\n* Constraint arguments can now appear anywhere in function types, not just\n
  \ at the top level or after an implicit argument binding.\n\n* Experimental extended
  `with` syntax, which allows calling functions defined\n  in a with block directly.
  For example:\n\n  ```\n  data SnocList : List a -> Type where\n       Empty : SnocList
  []\n       Snoc : SnocList xs -> SnocList (xs ++ [x])\n\n  snocList : (xs : List
  a) -> SnocList a\n\n  my_reverse : List a -> List a\n  my_reverse xs with (snocList
  xs)\n    my_reverse [] | Empty = []\n    my_reverse (ys ++ [x]) | (Snoc p) = x ::
  my_reverse ys | p\n  ```\n\n    The `| p` on the right hand side means that the
  `with` block function will\n    be called directly, so the recursive structure of
  `SnocList` can direct the\n    recursion structure of `my_reverse`.\n\n* Added `%fragile`
  directive, which gives a warning and a message when a\n  fragile name is referenced.
  For use in detailing fragile APIs.\n\n* The totality checker now looks under `case`
  blocks, rather than treating\n  them as mutually defined functions with their top
  level function, meaning\n  that it can spot more total functions.\n\n* The totality
  checker now looks under `if...then...else` blocks when checking\n  for productivity.\n\n*
  The `%assert_total` directive is now deprecated. Instead, you can\n  use one of
  the functions `assert_total`, `assert_smaller` or\n  `assert_unreachable` to describe
  more precisely where a totality assertion\n  is needed.\n\n## Library updates\n\n*
  `Control.WellFounded` module removed, and added to the Prelude as\n  `Prelude.WellFounded`.\n*
  Added `Data.List.Views` with views on `List` and their covering functions.\n* Added
  `Data.Nat.Views` with views on `Nat` and their covering functions.\n* Added `Data.Primitives.Views`
  with views on various primitive types and their covering functions.\n* Added `System.Concurrency.Sessions`
  for simple management of conversations\n  between processes\n\n## iPKG Updates\n\n*
  Taking cues from cabal, the `iPKG` format has been extended to\n  include more package
  metadata information.  The following fields\n  have been added:\n\n  + `brief`:
  Brief description of the package.\n  + `version`: Version string to associate with
  the package.\n  + `readme`: Location of the README file.\n  + `license`: Description
  of the licensing information.\n  + `author`: Author information.\n  + `maintainer`:
  Maintainer information.\n  + `homepage`: Website associated with the package.\n
  \ + `sourcepage`: Location of the DVCS where the source can be found.\n\n\n## Miscellaneous
  updates\n\n* The Idris man page is now installed as part of the cabal/stack build
  \ process.\n\n* Improved startup performance by reducing the processing of an already
  imported\n  module that has changed accessibility.\n\n* A limited set of command
  line options can be used to override\n  package declared options. Overridable options
  are currently, logging\n  level and categories, default totality check, warn reach,
  IBC output\n  folder, and idris path. Note overriding IBC output folder, only\n
  \ affects the installation of Idris packages.\n\n* Remove deprecated options `--ideslave`
  and `--ideslave-socket`. These options\n  were replaced with `--ide-mode` and `--ide-mode-socket`
  in 0.9.17\n\n* The code generator output type `MavenProject` was specific to the\n
  \ Java codegen and has now been deprecated, together with the\n  corresponding `--mvn`
  option.\n\n* Definitional equality on Double is now bit-pattern identity rather\n
  \ than IEEE's comparison operator. This prevents a bug where programs\n  could distinguish
  between -0.0 and 0.0, but the type theory could\n  not, leading to a contradiction.
  The new fine-grained equality\n  prevents this.\n\n* Naming conventions for Idris
  packages in an iPKG file now follow the\n  same rules for executables.  Unquoted
  names must be valid namespaced\n  Idris identifiers e.g. ``package my.first.package``.
  Quoted package\n  names allow for packages to be given valid file names, for example,\n
  \ ``package \"my-first-package\"``.\n\n## Reflection changes\n\n* The implicit coercion
  from String to TTName was removed.\n\n* Decidable equality for TTName is available.\n\n#
  New in 0.11\n\n## Updated export rules\n\n* The export rules are:\n  - 'private'
  means that the definition is not exported at all\n  - 'export' means that the top
  level type is exported, but not the\n    definition. In the case of 'data', this
  means the type constructor is\n    exported but not the data constructors.\n  -
  'public export' means that the entire definition is exported.\n* By default, names
  are 'private'. This can be altered with an %access directive\n  as before.\n* Exported
  types can only refer to other exported names\n* Publicly exported definitions can
  only refer to publicly exported names\n\n## Improved C FFI\n\n* Idris functions
  can now be passed as callbacks to C functions or wrapped in a\n  C function pointer.\n*
  C function pointers can be called.\n* Idris can access pointers to C globals.\n\n##
  Effects\n\n* Effects can now be given in any order in effect lists (there is no
  need for\n  the ordering to be preserved in sub lists of effects)\n\n## Elaborator
  reflection updates\n\n* Datatypes can now be defined from elaborator reflection:\n
  \ - declareDatatype adds the type constructor declaration to the context\n  - defineDatatype
  adds the constructors to the datatype\n  - To declare an inductive-recursive family,
  declare the types of the function\n    and the type constructor before defining
  the pattern-match cases and\n    constructors.\n\n## Minor language changes\n\n*
  The `[static]` annotation is changed to `%static` to be consistent with the\n  other
  annotations.\n* Added `%auto_implicits` directive. The default is `%auto_implicits
  on`.\n  Placing `%auto_implicits off` in a source file means that after that point,\n
  \ any implicit arguments must be bound, e.g.:\n\n  ```\n  append : {n,m,a:_} ->
  Vect n a -> Vect m a -> Vect (n + m) a\n  ```\n\n  Only names which are used explicitly
  in the type need to be bound, e.g.:\n\n  ```\n  Here  : {x, xs : _} -> Elem x (x
  :: xs)\n  ```\n\n  In `Here`, there is no need to bind any of the variables in the
  type of `xs`\n  (it could be e.g. `List a` or `Vect n a`; `a` and `n` will still
  be implicitly\n  bound).\n\n  You can still implicitly bind with 'using':\n\n   ```\n
  \   using (xs : Vect _ _)\n      data Elem  : {a, n : _} -> a -> Vect n a -> Type
  where\n           Here  : {x : _} -> Elem x (x :: xs)\n           There : {x, y
  : _} -> Elem x xs -> Elem x (y :: xs)\n   ```\n\n  However, note that *only* names
  which appear in *both* the using block\n  *and* the type being defined will be implicitly
  bound. The following will\n  therefore fail because 'n' isn't implicitly bound:\n\n
  \ ```\n    using (xs : Vect n a)\n      bad : Elem x xs -> Elem x (y :: xs)\n  ```\n\n*
  `Sigma` has been renamed  to `DPair`.\n* Accessor functions for dependent pairs
  have been renamed to bring them into\n  line with standard accessor functions for
  pairs. The function `getWitness` is\n  now `fst`, and `getProof` is `snd`.\n* File
  Modes expanded: Append, ReadWriteTruncate, and ReadAppend added, Write is\n  deprecated
  and renamed to WriteTruncate.\n* C11 Extended Mode variations added to File Modes.\n*
  More flexible holes. Holes can now depend on other holes in a term (such as\n  implicit
  arguments which may be inferred from the definition of the hole).\n* Programs with
  holes can now be compiled.  Attempting to evaluate an expression\n  with a hole
  results in a run time error.\n* Dependent pairs now can be specified using a telescope-style
  syntax, without\n  requirement of nesting, e.g. it is possible to now write the
  following:\n\n  ```\n    (a : Type ** n : Nat ** Vect n a)\n  ```\n\n* Idris will
  give a warning if an implicit is bound automatically, but would\n  otherwise be
  a valid expressio if the name was used as a global\n\n## External Dependencies\n\n*
  Curses has been removed as an external dependency.\n\n# New in 0.10\n\n* `class`
  and `instance` are now deprecated keywords. They have been replaced by\n  `interface`
  and `implementation` respectively. This is to properly reflect\n  their purpose.\n*
  `(/)` operator moved into new Fractional interface.\n* Idris' logging infrastructure
  has been categorised. Command line and repl are\n  available. For command line the
  option `--logging-categories CATS` is used to\n  pass in the categories. Here `CATS`
  is a colon separated quoted string\n  containing the categories to log. The REPL
  command is `logcats CATS`.  Where\n  `CATS` is a whitespace separated list of categoriese.
  Default is for all\n  categories to be logged.\n* New flag `--listlogcats` to list
  logging categories.\n\n# New in 0.9.20\n\n## Language updates\n\n* Improved unification
  by implementing a pattern unification rule\n* The syntax `` `{{n}}`` quotes n without
  resolving it, allowing short syntax for\n  defining new names. `` `{n}`` still quotes
  n to an existing name in scope.\n* A new primitive operator `prim__strSubstr` for
  more efficient extraction of\n  substrings. External code generators should implement
  this.\n* The previous syntax for tactic proofs and the previous interactive prover
  are\n  now deprecated in favour of reflected elaboration. They will be removed at\n
  \ some point in the future.\n* Changed scoping rules for unbound implicits: any
  name which would be a valid\n  unbound implicit is now *always* an unbound implicit.
  This is much more\n  resilient to changes in inputs, but does require that function
  names be\n  explicitly qualified when in argument position.\n* Name binding in patterns
  follows the same rule as name binding for implicits\n  in types: names which begin
  with lower case letters, not applied to any\n  arguments, are treated as bound pattern
  variables.\n* Added `%deprecate` directive, which gives a warning and a message
  when a\n  deprecated name is referenced.\n\n## Library updates\n\n* The `Neg` class
  now represents numeric types which can be negative. As such,\n  the `(-)` operator
  and `abs` have been moved there from `Num`.\n* A special version of `(-)` on `Nat`
  requires that the second argument is\n  smaller than or equal to the first. `minus`
  retains the old behaviour,\n  returning `Z` if there is an underflow.\n* The `(+)`,
  `(-)`, and `(*)` operations on Fin have been removed.\n* New Logging Effects have
  been added to facilitate logging of effectful\n  programmes.\n* Elaborator reflection
  is now a part of the prelude. It is no longer necessary\n  to import `Language.Reflection.Elab`.\n*
  The `PERF` effect allows for simple performance metrics to be collected from\n  Effectful
  programs.\n* Some constructors that never actually occurred have been removed from
  the `TT`\n  and `Raw` reflection datatypes in Language.Reflection.\n* File `IO`
  operations (for example openFile/fread/fwrite) now return\n  `Either FileError ty`
  where the return type was previously `ty` to indicate\n  that they may fail.\n\n##
  Tool updates\n\n* Records are now shown as records in `:doc`, rather than as the
  underlying\n  datatype\n* iPKG files have a new option `pkgs` which takes a comma-separated
  list of\n  package names that the idris project depends on. This reduces bloat in
  the\n  `opts` option with multiple package declarations.\n* iPKG files now allow
  `executable = \"your filename here\"` in addition to the\n  Existing `Executable
  = yourFilenameHere` style. While the unquoted version is\n  limited to filenames
  that look like namespaced Idris identifiers\n  (`your.filename.here`), the quoted
  version accepts any valid filename.\n* Add definition command (`\\d` in Vim, `Ctrl-Alt-A`
  in Atom, `C-c C-s` in Emacs)\n  now adds missing clauses if there is already a definition.\n\n##
  Miscellaneous updates\n\n* Disable the deprecation warnings for %elim and old-style
  tactic scripts with\n  the `--no-elim-deprecation-warnings` and `--no-tactic-deprecation-warnings`\n
  \ flags.\n\n# New in 0.9.19\n\n* The Idris Reference manual has been fleshed out
  with content originally found\n  on the GitHub wiki.\n* The `Show` class has been
  moved into `Prelude.Show` and augmented with the\n  method `showPrec`, which allows
  correct parenthesization of showed terms. This\n  comes with the type `Prec` of
  precedences and a few helper functions.\n* New REPL command `:printerdepth` that
  sets the pretty-printer to only descend\n  to some particular depth when printing.
  The default is set to a high number to\n  make it less dangerous to experiment with
  infinite structures. Infinite depth\n  can be set by calling :printerdepth with
  no argument.\n* Compiler output shows applications of `>>=` in do-notation\n* `fromInteger
  i` where `i` is an integer constant is now shown just as `i` in\n  compiler output\n*
  An interactive shell, similar to the prover, for running reflected elaborator\n
  \ actions. Access it with `:elab` from the REPL.\n* New command-line option `--highlight`
  that causes Idris to save highlighting\n  information when successfully type checking.
  The information is in the same\n  format sent by the IDE mode, and is saved in a
  file with the extension \".idh\".\n* Highlighting information is saved by the parser
  as well, allowing it to\n  highlight keywords like `case`, `of`, `let`, and `do`.\n*
  Use predicates instead of boolean equality proofs as preconditions on `List`\n  functions\n*
  More flexible 'case' construct, allowing each branch to target different\n  types,
  provided that the case analysis does not affect the form of any\n  variable used
  in the right hand side of the case.\n* Some improvements in interactive editing,
  particularly in lifting out\n  definitions and proof search.\n* Moved `System.Interactive`,
  along with `getArgs` to the Prelude.\n* Major improvements to reflected elaboration
  scripts, including the ability to run\n  them in a declaration context and many
  bug fixes.\n* `decl syntax` rules to allow syntax extensions at the declaration
  level\n* Experimental Windows support for console colours\n\n# New in 0.9.18:\n\n*
  GHC 7.10 compatibility\n* Add support for bundled toolchains.\n* Strings are now
  UTF8 encoded in the default back end\n* Idris source files are now assumed to be
  in UTF8, regardless of locale\n  settings.\n* Some reorganisation of primitives:\n
  \ + `Buffer` and `BitVector` primitives have been removed (they were not tested\n
  \   sufficiently, and lack a maintainer)\n  + `Float` has been renamed `Double`
  (`Float` is defined in the Prelude for\n    compatibility)\n  + Externally defined
  primitives and operations now supported with `%extern`\n    directive, allowing
  back ends to define their own special purpose primitives\n  + `Ptr` and `ManagedPtr`
  have been removed and replaced with external primitives\n* Add `%hint` function
  annotation, which allows functions to be used as hints in\n  proof search for `auto`
  arguments. Only functions which return an instance of\n  a data or record type are
  allowed as hints.\n* Syntax rules no longer perform variable capture. Users of effects
  will need to\n  explicitly name results in dependent effect signatures instead of
  using the\n  default name `result`.\n* Pattern-matching lambdas are allowed to be
  impossible. For example,\n  `Dec (2 = 3)` can now be constructed with `No $ \\(Refl)`
  impossible, instead of\n  requiring a separate lemma.\n* Case alternatives are allowed
  to be impossible:\n\n  ```\n  case Vect.Nil {a=Nat} of { (x::xs) impossible ; []
  => True }\n  ```\n\n* The default `Semigroup` and `Monoid` instances for Maybe are
  now prioritised\n  choice, keeping the first success as Alternative does. The version
  that\n  collects successes is now a named instance.\n* `:exec` REPL command now
  takes an optional expression to compile and run/show\n* The return types of `Vect.findIndex`,
  `Vect.elemIndex` and `Vect.elemIndexBy`\n  were changed from `Maybe Nat` to `Maybe
  (Fin n)`\n* A new `:browse` command shows the contents of a namespace\n* `` `{n}``
  is syntax for a quotation of the reflected representation\n  of the name `n`. If
  `n` is lexically bound, then the resulting\n  quotation will be for it, whereas
  if it is not, then it will succeed\n  with a quotation of the unique global name
  that matches.\n* New syntax for records that closely matches our other record-like
  structures:\n  type classes. See the updated tutorial for details.\n* Records can
  be coinductive. Define coinductive records with the `corecord`\n  keyword.\n* Type
  class constructors can be assigned user-accessible names. This is done\n  using
  the same syntax as record constructors.\n* `if ... then ... else ...` is now built-in
  syntax instead of being defined in\n  a library. It is shown in REPL output and
  error messages, rather than its\n  desugaring.\n* The desugaring of `if ... then
  ... else ...` has been renamed to `ifThenElse`\n  from `boolElim`. This is for consistency
  with GHC Haskell and\n  scala-virtualized, and to reflect that if-notation makes
  sense with non-Bool\n  datatypes.\n* Agda-style semantic highlighting is supported
  over the IDE protocol.\n* Experimental support for elaborator reflection. Users
  can now script the\n  elaborator, for use in code generation and proof automation.
  This feature is\n  still under rapid development and is subject to change without
  notice. See\n  Language.Reflection.Elab and the %runElab constructs\n\n# New in
  0.9.17\n\n* The `--ideslave` command line option has been replaced with a `--ide-mode`\n
  \ command line option with the same semantics.\n* A new tactic `claim N TY` that
  introduces a new hole named `N` with type `TY`\n* A new tactic `unfocus` that moves
  the current hole to the bottom of the\n  hole stack\n* Quasiquotation supports the
  generation of `Language.Reflection.Raw` terms in\n  addition to `Language.Reflection.TT`.
  Types are used for disambiguation,\n  defaulting to `TT` at the REPL.\n* `Language.Reflection.Quotable`
  now takes an extra type parameter which\n  determines the type to be quoted to.
  Instances are provided to quote common\n  types to both `TT` and `Raw`.\n* Library
  operators have been renamed for consistency with Haskell. In\n  particular, `Applicative.(<$>)`
  is now `Applicative.(<*>)` and `(<$>)` is now\n  an alias for Functor.map. Correspondingly,
  ($>) and (<$) have been renamed to\n  `(<*)` and `(*>)`. The cascading effects of
  this rename are that\n  `Algebra.(<*>)` has been renamed to `Algebra.(<.>)` and
  `Matrix.(<.>)` is now\n  `Matrix.(<:>)`.\n* Binding forms in DSL notation are now
  given an extra argument: a reflected\n  representation of the name that the user
  chose.  Specifically, the rewritten\n  `lambda`, `pi`, and `let` binders will now
  get an extra argument of type\n  `TTName`. This allows more understandable dynamic
  errors in DSL code and more\n  readable code generation results.\n* DSL notation
  can now be applied with `$`\n* Added `FFI_Export` type which allows Idris functions
  to be exportoed and\n  called from foreign code\n* Instances can now have documentation
  strings.\n* Type providers can have documentation strings.\n* Unification errors
  now (where possible) contain information about provenance\n  of a type\n* New REPL
  command `:core TM` that shows the elaborated form of `TM` along with\n  its elaborated
  type using the syntax of `TT`. IDE mode has a corresponding\n  command `:elaborate-term`
  for serialized terms.\n* Effectful and IO function names for sending data to STDOUT
  have been\n  aligned, semantically.\n    + `print` is now for putting showable things
  to STDOUT.\n    + `printLn` is for putting showable things to STDOUT with a new
  line\n    + `putCharLn` for putting a single character to STDOUT, with a new line.\n*
  Classes can now be annotated with 'determining parameters' to say which must\n  be
  available before resolving instances. Only determining parameters are\n  checked
  when checking for overlapping instances.\n* New package `contrib` containing things
  that are less mature or less used than\n  the contents of `base`. `contrib` is not
  available by default, so you may need\n  to add `-p contrib` to your .ipkg file
  or Idris command line.\n* Arguments to class instances are now checked for injectivity.
  \ Unification\n  assumes this, so we need to check when instances are defined.\n\n#
  New in 0.9.16\n\n* Inductive-inductive definitions are now supported (i.e. simultaneously
  defined\n  types where one is indexed by the other.)\n* Implicits and type class
  constraints can now appear in scopes other than the\n  top level.\n* Importing a
  module no longer means it is automatically reexported. A new\n  `public` modifier
  has been added to import statements, which will reexport the\n  names exported from
  that module.\n* Implemented `@`-patterns. A pattern of the form `x@p` on the left
  hand side\n  matches `p`, with `x` in scope on the right hand side with value `p`.\n*
  A new tactic sourceLocation that fills the current hole with the current\n  source
  code span, if this information is available. If not, it raises an\n  error.\n* Better
  Unicode support for the JavaScript/Node codegen\n* `:search` and `:apropos` commands
  can now be given optional package lists to\n  search.\n* `Vect`, `Fin` and `So`
  moved out of prelude into `base`, in modules\n  `Data.Vect`, `Data.Fin` and `Data.So`
  respectively.\n* Several long-standing issues resolved, particularly with pattern
  matching and\n  coverage checking.\n* Modules can now have API documentation strings.\n\n#
  New in 0.9.15\n\n* Two new tactics: `skip` and `fail`. Skip does nothing, and fail
  takes a string\n  as an argument and produces it as an error.\n* Corresponding reflected
  tactics `Skip` and `Fail`. Reflected `Fail` takes a\n  list of `ErrorReportParts`
  as an argument, like error handlers produce,\n  allowing access to the pretty-printer.\n*
  Stop showing irrelevant and inaccessible internal names in the interactive\n  prover.\n*
  The proof arguments in the `List` library functions are now implicit and\n  solved
  automatically.\n* More efficient representation of proof state, leading to faster
  elaboration of\n  large expressions.\n* *EXPERIMENTAL* Implementation of uniqueness
  types\n* Unary negation now desugars to `negate`, which is a method of the `Neg`
  type\n  class.  This allows instances of `Num` that can't be negative, like `Nat`,
  and\n  it makes correct IEEE Float operations easier to encode. Additionally, unary\n
  \ negation is now available to DSL authors.\n* The Java and LLVM backends have been
  factored out for separate\n  maintenance. Now, the compiler distribution only ships
  with the C and\n  JavaScript backends.\n* New REPL command `:printdef` displays
  the internal definition of a name\n* New REPL command `:pprint` pretty-prints a
  definition or term with LaTeX or\n  HTML highlighting\n* Naming of data and type
  constructors is made consistent across the standard\n  library (see #1516)\n* Terms
  in `code blocks` inside of documentation strings are now parsed and type\n  checked.
  If this succeeds, they are rendered in full color in documentation\n  lookups, and
  with semantic highlighting for IDEs.\n* Fenced code blocks in docs defined with
  the \"example\" attribute are rendered\n  as code examples.\n* Fenced code blocks
  declared to be Idris code that fail to parse or type check\n  now provide error
  messages to IDE clients.\n* *EXPERIMENTAL* support for partial evaluation (Scrapping
  your Inefficient\n  Engine style)\n\n# New in 0.9.14\n\n* Tactic for case analysis
  in proofs\n* Induction and case tactic now work on expressions\n* Support for running
  tests for a package with the tests section of .ipkg files\n  and the `--testpkg`
  command-line option\n* Clearly distinguish between type providers and postulate
  providers at the use\n  site\n* Allow dependent function syntax to be overridden
  in dsl blocks, similarly to\n  functions and let. The keyword for this is `pi`.\n*
  Updated `effects` library, with simplified API\n* All new JavaScript backend (avoids
  callstack overflows)\n* Add support for `%lib` directive for NodeJS\n* Quasiquotes
  and quasiquote patterns allow easier work with reflected\n  terms.  `` `(EXPR)``
  quasiquotes EXPR, causing the elaborator to be\n  used to produce a reflected version
  of it. Subterms prefixed with `~`\n  are unquoted - on the RHS, they are reflected
  terms to splice in,\n  while on the LHS they are patterns.\n\n  A quasiquote expression
  can be given a goal type for the elaborator,\n  which helps with disambiguation.
  For instance, `` `(() : ())``\n  quotes the unit constructor, while `` `(() : Type)``
  quotes the unit\n  type.  Both goal types and quasiquote are typechecked in the
  global\n  environment.\n* Better inference of unbound implicits\n\n# New in 0.9.13\n\n*
  IDE support for retrieving structured information about metavariables\n* Experimental
  Bits support for JavaScript\n* IdrisDoc: a Haddock- and JavaDoc-like HTML documentation
  generator\n* Command line option `-e` (or `--eval`) to evaluate expressions without
  loading\n  the REPL. This is useful for writing more portable tests.\n* Many more
  of the basic functions and datatypes are documented.\n* Primitive types such as
  Int and String are documented\n* Removed javascript lib in favor of idris-hackers/iQuery\n*
  Specify codegen for :compile REPL command (e.g. `:compile` javascript\n  program.js)\n*
  Remove `:info` REPL command, subsume and enhance its functionality in the `:doc`
  command\n* New (first class) nested record update/access syntax:\n\n  ```\n  record
  { a->b->c = val } x -- sets field accessed by c (b (a x)) to val\n  record { a->b->c
  } x -- accesses field, equivalent to c (b (a x))\n  ```\n\n* The banner at startup
  can be suppressed by adding `:set` nobanner to the initialisation script.\n* `:apropos`
  now accepts space-delimited lists of query items, and searches for\n  the conjunction
  of its inputs. It also accepts binder syntax as search\n  strings - for instance,
  `->` finds functions.\n* Totality errors are now treated as warnings until code
  generation time, when\n  they become errors again. This allows users to use the
  interactive editing\n  features to fix totality issues, but no programs that violate
  the stated\n  assumptions will actually run.\n* Added `:makelemma` command, which
  adds a new top level definition to solve a\n  metavariable.\n* Extend `:addclause`
  to add instance bodies as well as definitions\n* Reverse parameters to `BoundedList`
  -- now matches `Vect`, and is easier to\n  instantiate classes.\n* Move `foldl`
  into Foldable so it can be overridden.\n* Experimental `:search` REPL command for
  finding functions by type\n\n## Internal changes\n\n* New implementation of erasure\n\n#
  New in 0.9.12\n\n* Proof search now works for metavariables in types, giving some
  interactive\n  type inference.\n* New `Lazy` type, replacing laziness annotations.\n*
  JavaScript and Node codegen now understand the `%include` directive.\n* Concept
  of `null` is now understood in the JavaScript and Node codegen.\n* Lots of performance
  patches for generated JavaScript.\n* New commands `:eval` (`:e`) and `:type` (`:t`)
  in the prover, which either\n  normalise or show the type of expressions.\n* Allow
  type providers to return postulates in addition to terms.\n* Syntax for dealing
  with match failure in `<-` and pattern matching let.\n* New syntax for inline documentation.
  Documentation starts with `|||`, and\n  arguments are documented by preceding their
  name with `@`. Example:\n\n  ```\n  ||| Add two natural numbers\n  ||| @ n the first
  number (examined by the function)\n  ||| @ m the second number (not examined)\n
  \ plus (n, m : Nat) -> Nat\n  ```\n\n* Allow the auto-solve behaviour in the prover
  to be disabled, for easier\n  debugging of proof automation. Use `:set autosolve`
  and `:unset autosolve`.\n* Updated `effects` library\n* New `:apropos` command at
  REPL to search documentation, names, and types\n* Unification errors are now slightly
  more informative\n* Support mixed induction/coinduction with `Inf` type\n* Add `covering`
  function option, which checks whether a function and all\n  descendants cover all
  possible inputs\n\n# New in 0.9.11\n\n* Agda-style equational reasoning (in Syntax.PreorderReasoning)\n*
  'case' construct now abstracts over the scrutinee in its type\n* Added label type
  'name (equivalent to the empty type).  This is intended for\n  field/effect disambiguation.
  \"name\" can be any valid identifier. Two labels\n  are definitionally equal if
  they have the same name.\n* General improvements in error messages, especially %error_reverse
  annotation,\n  which allows a hint as to how to display a term in error messages\n*
  `--ideslave` mode now transmits semantic information about many of the strings\n
  \ that it emits, which can be used by clients to implement semantic highlighting\n
  \ like that of the REPL. This has been implemented in the Emacs mode and the IRC\n
  \ bot, which can serve as examples.\n* New expression form: `with NAME EXPR` privileges
  the namespace `NAME` when\n  disambiguating overloaded names. For example, it is
  possible to write `with\n  Vect [1,2,3]` at the REPL instead of `the (Vect _ _)
  [1,2,3]`, because the\n  `Vect` constructors are defined in a namespace called `Vect`.\n*
  `assert_smaller` internal function, which marks an expression as smaller than\n
  \ a pattern for use in totality checking.  e.g. `assert_smaller (x :: xs) (f\n  xs)`
  asserts that `f xs` will always be structurally smaller than `(x :: xs)`\n* `assert_total`
  internal function, which marks a subexpression as assumed to be\n  total, e.g `assert_total
  (tail (x :: xs))`.\n* Terminal width is automatically detected if Idris is compiled
  with curses\n  support. If curses is not available, automatic mode assumes 80 columns.\n*
  Changed argument order for `Prelude.Either.either`.\n* Experimental `neweffects'`library,
  intended to replace `effects` in the next\n  release.\n\n## Internal changes\n\n*
  Faster elaboration\n* Smaller .ibc files\n* Pretty-printer now used for all term
  output\n\n# New in 0.9.10\n\n* Type classes now implemented as dependent records,
  meaning that method types\n  may now depend on earlier methods.\n* More flexible
  class instance resolution, so that function types and lambda\n  expressions can
  be made instances of a type class.\n* Add `!expr` notation for implicit binding
  of intermediate results in\n  monadic/do/etc expressions.\n* Extend Effects package
  to cope with possibly failing operations, using\n  `if_valid`, `if_error`, etc.\n*
  At the REPL, `it` now refers to the previous expression.\n* Semantic colouring at
  the REPL. Turn this off with `--nocolour`.\n* Some prettifying of error messages.\n*
  The contents of `~/.idris/repl/init` are run at REPL start-up.\n* The REPL stores
  a command history in `~/.idris/repl/history`.\n* The `[a..b]`, `[a,b..c]`, `[a..]`,
  and `[a,b..]` syntax now pass the totality\n  checker and can thus be used in types.
  The `[x..]` syntax now returns an\n  actually infinite stream.\n* Add `%reflection`
  option for functions, for compile-time operations on syntax.\n* Add expression form
  `quoteGoal x by p in e` which applies `p` to the expected\n  expression type and
  binds the result to `x` in the scope `e`.\n* Performance improvements in Strings
  library.\n* Library reorganisation, separated into `prelude/` and `base/`.\n\n##
  Internal changes\n\n* New module/dependency tree checking.\n* New parser implementation
  with more precise errors.\n* Improved type class resolution.\n* Compiling Nat via
  GMP integers.\n* Performance improvements in elaboration.\n* Improvements in termination
  checking.\n* Various REPL commands to support interactive editing, and a client/server\n
  \ mode to allow external invocation of REPL commands.\n\n# New in 0.9.9\n\n## User
  visible changes\n\n* Apply functions by return type, rather than with arguments:
  `t <== f` means\n  \"apply f with arguments such that it returns a value of type
  t\"\n* Allow the result type of a rewrite to be specified\n* Allow names to be attached
  to provisional definitions lhs `?= {name} rhs` --\n  generates a lemma called `name`
  which makes the types of the lhs and rhs\n  match. `{name}` is optional - a unique
  name is generated if it is absent.\n* Experimental LLVM backend\n* Added `Data.HVect`
  module\n* Fix `fromInteger` to take an `Integer`, rather than an `Int`\n* Integer
  literals for `Fin`\n* Renamed `O` to `Z`, and `fO` to `fZ`\n* Swapped `Vect` arguments,
  now `Vect : Nat -> Type -> Type`\n* Added `DecEq` instances\n* Add `equiv` tactic,
  which rewrites a goal to an equivalent (convertible) goal\n\n##  Internal changes\n\n*
  Add annotation for unification traces\n* Add `mrefine` tactic for refining by matching
  against a type\n* Type class resolution fixes\n* Much faster coverage checking\n\n#
  New in 0.9.8\n\n## User visible changes\n\n* Added `rewrite ... in ...` construct\n*
  Allow type class constraints in `using` clauses\n* Renamed `EFF` to `EFFECT` in
  Effect package\n* Experimental Java backend\n* Tab completion in REPL\n* Dynamic
  loading of C libraries in the interpreter\n* Testing IO actions at the REPL with
  `:x` command\n* Improve rendering of `:t`\n* Fixed some INTERNAL ERROR messages\n\n##
  Internal Changes\n\n* Fix non-linear pattern checking\n* Improved name disambiguation\n*
  More flexible unification and elaboration of lambdas\n* Various unification and
  totality checking bug fixes\n\n# New in 0.9.7\n\n## User visible changes\n\n* `implicit`
  keyword, for implicit type conversion\n* Added Effects package\n* Primitives for
  8,16,32 and 64 bit integers\n\n## Internal Changes\n\n* Change unification so that
  it keeps track of failed constraints in case\n  later information helps to resolve
  them\n* Distinguishing parameters and indices in data types\n* Faster termination/coverage
  checking\n* Split 'javascript' target into 'javascript' and 'node'\n\n# New in 0.9.6\n\n##
  User visible changes\n\n* The type of types is now `Type` rather than `Set`\n* Forward
  declarations of data allowed\n  - supporting induction recursion and mutually recursive
  data\n* Type inference of definitions in `where` clauses\n  - Provided that the
  type can be completely determined from the first\n    application of the function
  (in the top level definition)\n* `mutual` blocks added\n  - effect is to elaborate
  all types of declarations in the block before\n    elaborating their definitions\n
  \ - allows inductive-recursive definitions\n* Expression inspected by `with` clause
  now abstracted from the goal\n  - i.e. \"magic\" with\n* Implicit arguments will
  be added automatically only if their initial letter is\n  lower case, or they are
  in a using declaration\n* Added documentation comments (Haddock style) and `:doc`
  REPL command\n* Pattern matching on strings, big integers and characters\n* Added
  `System.Concurrency` modules\n* Added `postulate` declarations\n* Allow type annotations
  on `let` tactic\n* EXPERIMENTAL JavaScript generation, with `--target javascript`
  option\n\n## Internal Changes\n\n* Separate inlining methods at compile-time and
  run-time\n* Fixed nested parameters blocks\n* Improve efficiency of elaborator by:\n
  \  - only normalising when necessary\n   - reducing backtracking with resolving
  ambiguities\n* Better compilation of case trees\n\n# New in 0.9.5\n\n## User visible
  changes\n\n* Added codata\n  - as data declarations, but constructor arguments are
  evaluated lazily\n  - functions which return a codata type do not reduce at compile
  time\n* Added `parameters` blocks\n* Allow local data definitions in where blocks\n*
  Added `%default` directive to declare total-by-default or partial-by-default\n  for
  functions, and a corresponding \"partial\" reserved words to mark functions\n  as
  allowed to be partial. Also `--total` and `--partial` added as command line\n  options.\n*
  Command line option `--warnpartial` for flagging all undeclared partial\n  functions,
  without error.\n* New termination checker supporting mutually recursive definitions.\n*
  Added `:load` command to REPL, for loading a new file\n* Added `:module` command
  to REPL, for adding modules\n* Renamed library modules (now have initial capital)\n\n##
  Internal changes\n\n* Several improvements and fixes to unification\n* Added collapsing
  optimisation and more aggressive erasure\n\n# New in 0.9.4:\n\n## User visible changes\n\n*
  Simple packaging system\n* Added `--dumpc` flag for displaying generated code\n\n##
  Internal changes\n\n* Improve overloading resolution (especially where this is a
  type error)\n* Various important bug fixes with evaluation and compilation\n* More
  aggressive compile-time evaluation\n\n# New in 0.9.3\n\n## User visible changes\n\n*
  Added binding forms to syntax rules\n* Named class instances\n* Added `:set` command,
  with options `errorcontext` for displaying local\n  variables in scope when a unification
  error occurs, and `showimplicits`\n  for displaying elaborated terms in full\n*
  Added `--errorcontext` command line switch\n* Added `:proofs` and `:rmproofs` commands\n*
  Various minor REPL improvements and fixes\n\n## Internal changes\n\n* Completely
  new run time system (not based on Epic or relying on Boehm GC)\n* Normalise before
  forcing to catch more forceable arguments\n* Types no longer exported in normal
  form\n* Try to resolve overloading by inspecting types, rather than full type\n
  \ checking\n\n# New in 0.9.2\n\n## User visible changes\n\n* backtick notation added:
  ``x `foo` y  ==> foo x y``\n* case expressions allowed in type signatures\n* Library
  extensions in prelude.vect and prelude.algebra\n* `malloc`/`trace_malloc` added
  to builtins.idr\n\n## Internal changes\n\n* Some type class resolution fixes\n*
  Several minor bug fixes\n* Performance improvements in resolving overloading and
  type classes\n\n# New in 0.9.1\n\n## User visible changes\n\n* DSL notation, for
  overloading lambda and let bindings\n* Dependent records, with projection and update\n*
  Totality checking and `total` keyword\n* Auto implicits and default argument values
  `{auto n : T}`, `{default val n : T}`\n* Overlapping type class instances disallowed\n*
  Many extensions to `prelude.nat` and `prelude.list` libraries (mostly thanks to\n
  \ Dominic Mulligan)\n* New libraries: `control.monad.identity`, `control.monad.state`\n*
  Small improvements in error reporting\n\n## Internal changes\n\n* Faster compilation
  (only compiling names which are used)\n* Better type class resolution\n* Lots of
  minor bug fixes\n\n# 0.1.x to 0.9.0\n\nComplete rewrite.\n\n## User visible changes\n\n*
  New proof/tactics syntax\n* New syntax for pairs/dependent pairs\n* Indentation-significant
  syntax\n* Added type classes\n* Added where clauses\n* Added case expressions, pattern
  matching let and lambda\n* Added monad comprehensions\n* Added cumulativity and
  universe checking\n* Ad-hoc name overloading\n  - Resolved by type or explicit namespace\n*
  Modules (Haskell-style)\n* public, abstract and private access to functions and
  types\n* Separate type-checking\n* Improved interactive environment\n* Replaced
  'do using' with Monad class\n* Extended syntax macros\n\n## Internal changes\n\n*
  Everything :-)\n* All definitions (functions, classes and instances) are elaborated
  to top\n  level, fully explicit, data declarations and pattern matching definitions,\n
  \ which are verified by a minimal type checker.\n\nThis is the first release of
  a complete reimplementation. There will be bugs.\nIf you find any, please do not
  hesitate to contact Edwin Brady\n(ecb10@st-andrews.ac.uk).\n"
basic-deps:
  zip-archive: ! '>0.2.3.5 && <0.4'
  bytestring: <0.11
  fingertree: ! '>=0.1.4.1 && <0.2'
  ansi-wl-pprint: <0.7
  unix: <2.8
  haskeline: ==0.7.*
  split: <0.3
  base: ==4.*
  time: ! '>=1.4 && <1.9'
  blaze-markup: ! '>=0.5.2.1 && <0.9'
  base64-bytestring: <1.1
  unordered-containers: <0.3
  idris: -any
  text: ! '>=1.2.1.0 && <1.3'
  megaparsec: ! '>=6.2 && <7'
  code-page: ! '>=0.1 && <0.2'
  filepath: <1.5
  process: <1.7
  uniplate: ! '>=1.6 && <1.7'
  network: <2.8
  async: <2.3
  array: ! '>=0.4.0.1 && <0.6'
  containers: ! '>=0.5 && <0.6'
  terminal-size: <0.4
  vector-binary-instances: <0.3
  ansi-terminal: <0.9
  annotated-wl-pprint: ! '>=0.7 && <0.8'
  binary: ! '>=0.8.4.1 && <0.9'
  utf8-string: <1.1
  regex-tdfa: ! '>=1.2'
  cheapskate: ! '>=0.1.1 && <0.2'
  ieee754: ! '>=0.7 && <0.9'
  mtl: ! '>=2.1 && <2.3'
  blaze-html: ! '>=0.6.1.3 && <0.10'
  transformers: ==0.5.*
  optparse-applicative: ! '>=0.13 && <0.15'
  deepseq: <1.5
  fsnotify: ! '>=0.2 && <2.2'
  pretty: <1.2
  aeson: ! '>=0.6 && <1.4'
  safe: ! '>=0.3.9'
  vector: <0.13
  directory: ! '>=1.2.2.0 && <1.2.3.0 || >1.2.3.0'
all-versions:
- '0.1.3'
- '0.1.3.1'
- '0.1.4'
- '0.1.5'
- '0.1.7'
- '0.1.7.1'
- '0.9.0'
- '0.9.1'
- '0.9.2'
- '0.9.2.1'
- '0.9.3'
- '0.9.3.1'
- '0.9.4'
- '0.9.4.1'
- '0.9.5'
- '0.9.5.1'
- '0.9.6'
- '0.9.6.1'
- '0.9.7'
- '0.9.8'
- '0.9.9'
- '0.9.9.1'
- '0.9.9.2'
- '0.9.9.3'
- '0.9.10'
- '0.9.10.1'
- '0.9.11'
- '0.9.11.1'
- '0.9.11.2'
- '0.9.12'
- '0.9.13'
- '0.9.13.1'
- '0.9.14'
- '0.9.14.1'
- '0.9.14.2'
- '0.9.14.3'
- '0.9.15'
- '0.9.15.1'
- '0.9.16'
- '0.9.17'
- '0.9.17.1'
- '0.9.18'
- '0.9.18.1'
- '0.9.19'
- '0.9.19.1'
- '0.9.20'
- '0.9.20.1'
- '0.9.20.2'
- '0.10'
- '0.10.1'
- '0.10.2'
- '0.10.3'
- '0.11'
- '0.11.1'
- '0.11.2'
- '0.12'
- '0.12.1'
- '0.12.2'
- '0.12.3'
- '0.99'
- '0.99.1'
- '0.99.2'
- '1.0'
- '1.1.0'
- '1.1.1'
- '1.2.0'
- '1.3.0'
- '1.3.1'
author: Edwin Brady
latest: '1.3.1'
description-type: markdown
description: ! '# Idris


  [![Build Status](https://travis-ci.org/idris-lang/Idris-dev.svg?branch=master)](https://travis-ci.org/idris-lang/Idris-dev)

  [![Appveyor build](https://ci.appveyor.com/api/projects/status/xi8yu81oy1134g7o/branch/master?svg=true)](https://ci.appveyor.com/project/idrislang/idris-dev)

  [![Documentation Status](https://readthedocs.org/projects/idris/badge/?version=latest)](https://readthedocs.org/projects/idris/?badge=latest)

  [![Hackage](https://img.shields.io/hackage/v/idris.svg)](https://hackage.haskell.org/package/idris)

  [![Stackage LTS](http://stackage.org/package/idris/badge/lts)](http://stackage.org/lts/package/idris)

  [![Stackage Nightly](http://stackage.org/package/idris/badge/nightly)](http://stackage.org/nightly/package/idris)

  [![IRC](https://img.shields.io/badge/IRC-%23idris-1e72ff.svg?style=flat)](https://www.irccloud.com/invite?channel=%23idris&hostname=irc.freenode.net&port=6697&ssl=1)


  Idris (http://idris-lang.org/) is a general-purpose functional programming

  language with dependent types.


  ## Installation Guides.


  This repository represents the latest development version of the

  language, and may contain bugs that are being actively worked on.  For

  those who wish to use a more stable version of Idris please consider

  installing the latest version that has been released on Hackage.

  Installation instructions for various platforms can be

  [found on the Idris Wiki](https://github.com/idris-lang/Idris-dev/wiki/Installation-Instructions).


  More information about building Idris from source has been detailed in the [Installation
  Guide](INSTALL.md)


  ## Code Generation


  Idris has support for external code generators. Supplied with the distribution

  is a C code generator to compile executables, and a JavaScript code generator

  with support for node.js and browser JavaScript.


  More information about [code generators can be found on the wiki](http://idris.readthedocs.io/en/latest/reference/codegen.html).


  ## More Information


  If you would like to find out more information, or ask questions, we

  currently have a [Wiki](https://github.com/idris-lang/Idris-dev/wiki);

  a [mailing list](https://groups.google.com/forum/#!forum/idris-lang),

  and an `IRC` channel `#idris` on freenode. To join the IRC channel,

  point your irc client to `chat.freenode.net` then `/join #idris`.


  For those further interested in using Idris for projects, the

  [Idris Hackers](https://github.com/idris-hackers) GitHub organisation is

  where some interesting projects are being hosted.


  For those interested in contributing to Idris directly we kindly ask that

  prospective developers please consult the [Contributing Guide](CONTRIBUTING.md)
  first.

'
license-name: BSD3
