homepage: https://github.com/athanclark/z85#readme
changelog-type: markdown
hash: a498a4ae735587ae3e2e427b4f7c5c54fe2c0b40bf91e19d4ca3ebb931dbb991
test-bench-deps:
  z85: -any
  bytestring: -any
  pipes-text: ! '>=0.0.2.5'
  attoparsec-binary: ! '>=0.2'
  base: ! '>=4.8 && <4.12'
  pipes-bytestring: ! '>=2.1.6'
  vector-sized: -any
  text: -any
  quickcheck-instances: -any
  pipes: ! '>=4.0 && <4.4'
  tasty-quickcheck: -any
  tasty-hunit: -any
  attoparsec: -any
  tasty: -any
  QuickCheck: -any
maintainer: athan.clark@localcooking.com
synopsis: Implementation of the z85 binary codec
changelog: |
  # Changelog for z85-bytestring

  ## Unreleased changes
basic-deps:
  bytestring: -any
  pipes-text: ! '>=0.0.2.5'
  attoparsec-binary: ! '>=0.2'
  base: ! '>=4.8 && <4.12'
  pipes-bytestring: ! '>=2.1.6'
  vector-sized: -any
  text: -any
  pipes: ! '>=4.0 && <4.4'
  attoparsec: -any
  QuickCheck: -any
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
author: Athan Clark
latest: 0.0.2
description-type: markdown
description: |
  # z85

  [z85](https://rfc.zeromq.org/spec:32/Z85/) is a binary string codec, like hexadecimal or base64, but has a higher density
  of compression than the former, due to its use of a higher base value of 85 than base 64. ByteStrings just need to be
  a length of a multiple of 4 (a Word32String might be a better name).

  There are multiple layers of exposed implementation in this package

  - `Word32 <-> Vector 4 Z85Char` for low level work
  - Attoparsec `Parser ByteString <-> Parser Text` for slightly higher level parsing of strict data
  - Pipes `Pipe ByteString Text <-> Pipe Text ByteString` for encoding / decoding streams of strict data
  - Casual `Lazy.ByteString ~ Lazy.Text` functions for encoding / decoding lazy data.
license-name: BSD-3-Clause
