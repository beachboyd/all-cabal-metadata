homepage: https://github.com/tdammers/yeshql
changelog-type: ''
hash: ce61c4bb51be3bd8e6ccac2b63bcf9fce23c05e8a03463d18a8a1fdcc38a4b1a
test-bench-deps: {}
maintainer: tdammers@gmail.com
synopsis: YesQL-style SQL database abstraction (legacy compatibility wrapper)
changelog: ''
basic-deps:
  yeshql-core: -any
  base: ! '>=4.6 && <5.0'
  yeshql-hdbc: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.0'
- '0.3.0.2'
- '0.3.0.3'
- '1.0.0.0'
- '1.0.0.1'
- '2.0.0.0'
- '2.1.0.0'
- '2.2.0.0'
- '3.0.0.0'
- '3.0.0.1'
- '3.0.1.1'
- '3.0.1.2'
- '3.0.1.3'
- '4.1.0.0'
- '4.1.0.1'
author: Tobias Dammers
latest: '4.1.0.1'
description-type: markdown
description: ! "# YeshQL\n\n[YesQL](https://github.com/krisajenkins/yesql)-style SQL
  database abstraction.\n\nYeshQL implements quasiquoters that allow the programmer
  to write SQL queries\nin SQL, and embed these into Haskell programs using quasi-quotation.
  YeshQL\ntakes care of generating suitable functions that will run the SQL queries\nagainst
  a HDBC database driver, and marshal values between Haskell and SQL.\n\nIn order
  to do this properly, YeshQL extends SQL syntax with type annotations\nand function
  names; other than that, it is perfectly ignorant about the SQL\nsyntax itself. See
  the [YesQL\nReadme](https://github.com/krisajenkins/yesql/blob/master/README.md)
  for the\nfull rationale - Haskell and Clojure are sufficiently different languages,
  but\nthe reasoning behind YesQL applies to YeshQL almost unchanged.\n\n## Installation\n\nUse
  [stack](http://haskellstack.org/) or [cabal](http://haskell.org/cabal/) to\ninstall.
  Nothing extraordinary here.\n\n## Usage\n\nIn short:\n\n    {-#LANGUAGE QuasiQuotes
  #-}\n    import MyProject.DatabaseConnection (withDB)\n    import Database.HDBC\n
  \   import Database.YeshQL\n\n    [yesh|\n      -- name:getUser :: (String)\n      --
  :userID :: Int\n      SELECT username FROM users WHERE id = :userID\n    |] \n\n
  \   main = withDB $ \\conn -> do\n      username <- getUser 1 conn\n      putStrLn
  username\n\nPlease refer to the Haddock documentation for further usage details.\n\n##
  Bugs\n\nProbably. The project is hosted at https://github.com/tdammers/yeshql, feel\nfree
  to comment there or send a message to tdammers@gmail.com if you find any.\n\n##
  Something about the name\n\nYeshQL is rather heavily inspired by YesQL, so it makes
  sense to blatantly\nsteal most of the name. Throwing in an \"H\" for good measure
  (this being Haskell\nand all) makes it sound like Sean Connery, which automatically
  increases\naweshomenesh, so that'sh what we'll roll with.\n\n## License / Copying\n\nYeshQL
  is Free Software and provided as-is. Please see the enclosed LICENSE\nfile for details.\n\n##
  Legacy / Backwards-Compatibility Notice\n\n**Note** that the `yeshql` package, starting
  with the 4.1 release, is now\nmerely a wrapper around `yeshql-core` and `yeshql-hdbc`,
  re-exporting what is\nhopefully close enough to the original `yeshql` API to be
  somewhat compatible.\n\nThis is because starting with this release, `yeshql` has
  been split up into a\nfrontend, which takes care of query parsing and the whole
  TemplateHaskell\nmachinery, and several backends - at the time of writing, these
  are\n`yeshql-hdbc`, which uses HDBC just like the original `yeshql` package, and\n`yeshql-postgresql-simpel`,
  which uses `postgresql-simple`. With this\narchitecture, it is possible to add more
  backends without affecting the\nfrontend or any of the other backends.\n"
license-name: MIT
