homepage: https://github.com/alephcloud/hs-yet-another-logger
changelog-type: markdown
hash: cce98813591dd5631db0a5d8974daa89a16a27f1f425dc097b049356e7889693
test-bench-deps:
  void: ! '>=0.7'
  base-unicode-symbols: ! '>=0.2'
  base: ! '>=4.8 && <5.0'
  text: ! '>=1.2'
  enclosed-exceptions: ! '>=1.0'
  configuration-tools: ! '>=0.2.12'
  async: ! '>=2.0'
  lifted-base: ! '>=0.2'
  tagged: ! '>=0.7'
  lens: ! '>=4.7'
  yet-another-logger: -any
  tasty-hunit: ! '>=0.9'
  transformers-base: ! '>=0.4'
  transformers: ! '>=0.3'
  tasty: ! '>=0.10'
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: Yet Another Logger
changelog: ! "0.3.1\n=====\n\n*   Add support for tasty-hunit >= 0.10.\n\n*   Raise
  lower bounds on some dependencies:\n    *   base >= 4.8\n    *   deepseq >= 1.4\n
  \   *   aeson >= 0.11\n    *   time >= 1.5\n\n*   Require Cabal >= 1.22.\n\n*   Drop
  support for GHC < 7.10.\n\n0.3.0\n=====\n\n*   Remove `EitherT` instance. It's recommended
  to use `ExceptT` instead.\n\n*   Remove `TraceT` instance. It's not actively maintained
  any more.\n\n*   Support aeson >= 0.11, which comes with instances for `Natural`.\n\n*
  \  Support GHC-8.\n\n*   `MonadThrow`, `MonadCatch`, and `MonadMask` instances for
  `LoggerT`.\n\n*   Support for Cabal-1.18 and time >= 1.4 && < 1.5.\n\n0.2.3.1\n=======\n\n*
  \  Add missing NFData instance for `Natural` when build with\n    deepseq>=1.4 and
  base<4.8.\n\n0.2.3\n=====\n\n*   Fix semantically invalid default NFData instance
  when build with\n    deepseq <1.4.\n\n0.2.2\n=====\n\n*   [Issue #28] Generalized
  type of lens `logMsg` to support changing\n    the message type.\n\n*   [Issue #29]
  Fixed precision of `formatIso8601` function.\n\n*   [Issue #30] Added a version
  of `withHandleBackend` that is generic\n    in the log message type and accept a
  formatting function for\n    formatting the log message as text.\n\n0.2.1\n=====\n\n*
  \  Support for trace-0.2.\n\n0.2\n===\n\n*   Removed `MonadLogIO`; `MonadBaseControl`
  should be used instead.\n\n*   Issue #16: add an argument to all command-line options
  parsers that\n    adds a prefix to the command-line options.\n\n*   Issue #9: more
  robust logger backend\n\n    *   new functions that take an function of type `Text
  -> IO ()` as\n        an alternate backend to log issues in the logging system itself.\n\n
  \       *   `withLogger_`\n        *   `withLogFunction_`\n        *   `createLogger_`\n\n
  \   *   new parameters\n        *   `loggerConfigExceptionLimit`:\n            Number
  of consecutive backend exception that can occur before the logger\n            raises
  an `BackendToManyExceptions` exception. If this is `Nothing`\n            the logger
  will discard all exceptions.\n\n        *   `loggerConfigExceptionWait`:\n            Number
  of microseconds to wait after an exception from the backend.\n            If this
  is 'Nothing' the logger won't wait at all after an exception.\n\n        *   `loggerConfigExitTimeout`:\n
  \           Timeout in microseconds for the logger to flush the queue and\n            deliver
  all remaining log messages on termination. If this is `Nothing`\n            termination
  of the logger blogs until all mesages are delivered.\n\n    *   new `LoggerException`
  type\n        *   `QueueFullException` is thrown when the queue is full and the
  logger\n            policy is to throw exceptions on a full queue.\n\n        *
  \  `BackendTerminatedException` can be thrown by a backend to force the\n            logger
  immediately.\n\n        *   `BackendToManyExceptions` is thrown when the backend
  is throwing some\n            unexpected exception more than list `loggerConfigExceptionLimit`
  times.\n\n*   Issue #12: a test-suite got added to the package. Note that this test-suite
  takes\n    a relatively long time to run all tests. In particular this an cause
  timeouts\n    with travis-ci.\n\n*   Issue #14: the command line option for setting
  the log-level got fixed to be\n    spelled `--log-level` (instead of `--loglevel`).\n\n*
  \  Issue #22: added timestamp to log messages.\n\n*   Replaced usage of `Int` by
  `Natural` where adequate.\n\n*   Issue #6: use `TBMChan` as internal queue implementation
  until a new version of\n    stm is released with a [fix for `TQueue`](https://ghc.haskell.org/trac/ghc/ticket/9539).\n\n0.1.1\n=====\n\n*
  \  Added `MonadLogIO` for loggers that allow to extract a log\n    function of type
  `LogFunctionIO`.\n\n0.1\n===\n\n*   Added `localScope` function to `MonadLog` and
  and implemented `withLabel`\n    based on it.\n\n*   Added functions `popLabel`
  and `clearScope`. These are useful when setting\n    log-labels for bracket style
  functions.\n\n*   Remove overlapping `MonadLog` instances.\n\n*   Lift `MonadTrace`
  instances into `LoggerCtxT`.\n\n0.0.1\n=====\n\nFirst public release\n\n"
basic-deps:
  exceptions: ! '>=0.8'
  void: ! '>=0.7'
  base-unicode-symbols: ! '>=0.2'
  bytestring: ! '>=0.10'
  case-insensitive: ! '>=1.2'
  stm: ! '>=2.4'
  Cabal: ! '>=1.18'
  base: ! '>=4.8 && <5.0'
  time: ! '>=1.5'
  text: ! '>=1.2'
  clock: ! '>=0.4'
  enclosed-exceptions: ! '>=1.0'
  monad-control: ! '>=1.0'
  configuration-tools: ! '>=0.2.8'
  async: ! '>=2.0'
  lifted-base: ! '>=0.2.3'
  ansi-terminal: ! '>=0.6'
  lens: ! '>=4.6'
  yet-another-logger: -any
  mtl: ! '>=2.2'
  transformers-base: ! '>=0.4'
  stm-chans: ! '>=3.0'
  transformers: ! '>=0.3'
  optparse-applicative: ! '>=0.11'
  deepseq: ! '>=1.4'
  aeson: ! '>=0.11'
all-versions:
- '0.0.1'
- '0.1'
- '0.1.1'
- '0.1.1.1'
- '0.2'
- '0.2.1'
- '0.2.2'
- '0.2.3'
- '0.2.3.1'
- '0.3.0'
- '0.3.1'
author: Lars Kuhtz <lakuhtz@gmail.com>
latest: '0.3.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/alephcloud/hs-yet-another-logger.svg)](https://travis-ci.org/alephcloud/hs-yet-another-logger)\n\nA
  logging framework written with flexibility and performance in mind.\n\nQuick Start\n===========\n\n```haskell\nimport
  System.Logger\n\nmain ∷ IO ()\nmain = withConsoleLogger Info $ do\n    logg Info
  \"moin\"\n    withLabel (\"function\", \"f\") f\n    logg Warn \"tschüss\"\n  where\n
  \   f = withLevel Debug $ do\n        logg Debug \"debug f\"\n```\n\nOverview\n========\n\nThe
  logging system consists of four main parts:\n\n1. The logging front-end are those
  types and functions that are used\n   to produce log messages in the code. This
  includes the `LogLevel`\n   type, the `LogPolicy` type, the `LogLabel` and `LogScope`
  types,\n   the `LogFunction` type, and the `MonadLog` type class.\n\n2. The abstract
  `LoggerCtx` is the context through which the `LogFunction`\n   delivers log messages
  to the logger back-end.\n\n3. The formatter is a function for serializing log messages.\n\n4.
  The logger back-end is a callback that is invoked by `Logger` on\n   each log messages.
  The logger back-end applies the formatting function\n   and delivers the log messages
  to some sink.\n\nThe framework allows you to combine this components in a modular
  way. The\nfront-end types, the `Logger`, and the back-end callback are represented
  by\ntypes or type classes. The formatter exists only as a concept in the\nimplementation
  of back-ends. These types and concepts together form the\nabstract logger interface
  that is defined in the module `System.Logger.Types`.\n\nThe package also provides
  a concrete Logger that implements these components\nin the module `System.Logger.Logger`
  and `System.Logger.Backend.Handle`.\n\nLogger Implementation\n=====================\n\nWriting
  a log message in a service application should introduce only minimal\nlatency overhead
  in the thread where the log message is written. Processing\nshould be done asynchronously
  as much as possible. This framework addresses\nthis by doing all serialization and
  IO in an asynchronous logger back-end\ncallback.\n\nWhen a log message is produced
  it is associated with a logger context. The\nlogger context includes\n\n*   a log-level
  threshold,\n*   a scope, which is a list of key-value labels which are used to\n
  \   tag log messages with additional information, and\n*   a policy that specifies
  how to deal with a situation where the\n    log message pipeline is congested.\n\nA
  log message can be any Haskell type with `Show`, `Typeable`, and `NFData`\nconstraint.
  Ideally the logged value is computed anyways in the program so that\nconstructing
  and forcing it does not introduce any additional overhead.\n\nWhen a log messages
  is produced it is tagged with a time stamp. This introduces\noverhead and there
  is be room for optimizations here. A log message also has a\nlog-level. If the log-threshold
  that is effective at the time a log message is\nwritten isn't met, no message is
  produced.\n\nThe logger has an internal log message queue. Further benchmarking
  should be\ndone in chosen the queue implementation that is best suited for this
  purpose.\n\nThe logger asynchronously reads log messages from the queue and calls
  the\nback-end callback for each message. Right now the code includes only a single\nback-end,
  namely for writing to a handle, but we are going to add more\nback-ends soon. Due
  to the modular design, it is possible to combine different\nback-ends into a single
  back-end so that messages are processed by more than a\nsingle back-end and delivered
  to more than a single sink.\n\nA back-end includes a formatting function. This is
  where, beside IO, most\nprocessing happens.\n\nDelaying the serialization to the
  very end of the processing pipeline has\nthe following advantages:\n\n1.  serialization
  is done asynchronously,\n2.  serialization is done only for messages that are actually
  delivered and\n    it is done only for those parts of the message that are relevant
  for the\n    respective back-end, and\n3.  it is easy to deploy different serialization
  methods.\n\nFor instance, when logging to the console, one usually wants a line-wise\nUNIX-tool
  friendly format. For a cloud service one may chose an efficient\nbinary serialization
  with a back-end that stores messages in a remote database.\nThere may be circumstances
  where the data of all or some messages is just\naggregated for statistical analysis
  before the messages are discarded. The\nmodular design, which decouples generation
  and serialization of log messages,\nallows one to accommodate these different scenarios
  by just using different\nback-ends, possibly parameterized by the formatting function.\n\n"
license-name: Apache-2.0
