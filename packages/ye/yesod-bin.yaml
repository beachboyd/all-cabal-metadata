homepage: http://www.yesodweb.com/
changelog-type: markdown
hash: 9f2eddfde39898f484197253231286a316bd28d2efba06d8ab2c73391e544d7f
test-bench-deps: {}
maintainer: Michael Snoyman <michael@snoyman.com>
synopsis: The yesod helper executable.
changelog: ! "## 1.6.0.3\n\n* Support Cabal 2.2 [#1151](https://github.com/yesodweb/yesod/issues/1511)\n\n##
  1.6.0.2\n\n* Fix broken support for older http-reverse-proxy\n\n## 1.6.0.1\n\n*
  Support for http-reverse-proxy 0.6\n\n## 1.6.0\n\n* Upgrade to conduit 1.3.0\n*
  Remove configure, build, touch, and test commands\n\n## 1.5.3\n\n* Support typed-process-0.2.0.0\n\n##
  1.5.2.6\n\n* Drop an upper bound\n\n## 1.5.2.5\n\n* Support for `add-handler` when
  modules are in `src/` directory [#1413](https://github.com/yesodweb/yesod/issues/1413)\n\n##
  1.5.2.4\n\n* Cabal 2.0 support\n\n## 1.5.2.3\n\n* Fix race condition which leads
  dev server to stay in compilation mode. [#1380](https://github.com/yesodweb/yesod/issues/1380)\n\n##
  1.5.2.2\n\n* I guess `--no-nix-pure` implies Nix... sigh [#1359](https://github.com/yesodweb/yesod/issues/1359)\n\n##
  1.5.2.1\n\n* Use `--no-nix-pure` [#1357](https://github.com/yesodweb/yesod/issues/1357)\n\n##
  1.5.2\n\n* Fix warnings\n\n## 1.5.1\n\n* Add `--host` option to `yesod devel`\n\n##
  1.5.0.1\n\n* Fix build failure\n\n## 1.5.0\n\nRewrite of `yesod devel` to take advantage
  of Stack for a simpler codebase.\n\nAdvantages:\n\n* Does not link against the ghc
  library, so can be used with multiple\n  GHC versions\n* Leverages Stack's ability
  to check for dependent files, which is\n  more robust than what yesod devel was
  doing previously\n* Seems to involve less rebuilding of the library on initial run\n\nDisadvantages:\n\n*
  Lost some functionality (e.g., failure hooks, controlling the exit\n  command)\n*
  Newer codebase, quite likely has bugs that need to be ironed out.\n\n## 1.4.18.7\n\n*
  Actually release the changes for #1284\n\n## 1.4.18.6\n\n* Fix support for GHC 8.0.1
  [#1284](https://github.com/yesodweb/yesod/issues/1284)\n\n## 1.4.18.5\n\n* yesod-bin:
  Make it build with latest optparse-applicative [#1282](https://github.com/yesodweb/yesod/pull/1282)\n\n##
  1.4.18.4\n\n* Link yesod-bin with wxneeded on OpenBSD. [#1281](https://github.com/yesodweb/yesod/pull/1281)\n\n##
  1.4.18.3\n\n* Adding a new handler adds it under wrong stanza [#1273](https://github.com/yesodweb/yesod/issues/1273)\n\n##
  1.4.18.2\n\n* Work around change in behavior in newer optparse-applicative ([mailing
  list discussion](https://groups.google.com/d/msg/yesodweb/BrTkMKFREgU/AKVc9AK2AQAJ))\n\n##
  1.4.18.1\n\n* error handling when checking for stack binary [#1219](https://github.com/yesodweb/yesod/pull/1219)\n*
  GHC 8 support\n\n## 1.4.18\n\n* Disable `yesod test` when using Stack [#1198](https://github.com/yesodweb/yesod/issues/1198)\n\n##
  1.4.17\n\n* Fully remove the `yesod init` command\n\n## 1.4.16.1\n\n* Workaround
  for [wai#478](https://github.com/yesodweb/wai/issues/478)\n\n## 1.4.16\n\n* Some
  updates for better reverse proxying [yesod-scaffold#114](https://github.com/yesodweb/yesod-scaffold/issues/114)\n\n##
  1.4.15\n\n* Deprecate yesod init\n\n## 1.4.14\n\n* Fix order of -package-db arguments
  to runghc [#1057](https://github.com/yesodweb/yesod/issues/1057)\n\n## 1.4.13\n\n*
  Enable stack with yesod keter [#1041](https://github.com/yesodweb/yesod/pull/1041)\n\n##
  1.4.12\n\n* Devel server: have to type quit to quit\n\n## 1.4.11\n\n* Add support
  to `yesod devel` to detect and use `GHC_PACKAGE_PATH`. This makes\n  `yesod devel`
  compatible with `stack`, just run: `stack exec -- yesod devel`.\n\n## 1.4.10\n\n*
  Scaffolding update\n\n## 1.4.9.2\n\n* Collapse paths in keter bundles, see [mailing
  list thread](https://groups.google.com/d/msg/yesodweb/Ndd310qfSEc/pZOXldsKowsJ)\n\n##
  1.4.9\n\n* Command line options for `yesod init` [#986](https://github.com/yesodweb/yesod/pull/986)\n\n##
  1.4.8\n\n* Drop system-filepath\n\n## 1.4.7.2\n\n* Scaffolding updates, including
  fix for [#982](https://github.com/yesodweb/yesod/issues/982)\n\n## 1.4.7\n\n* GHC
  7.10 support\n\n## 1.4.6\n\n* Add TLS support to `yesod devel` [#964](https://github.com/yesodweb/yesod/pull/964)\n\n##
  1.4.5\n\n* add a switch to yesod to skip deploying a .keter with copy-to [#952](https://github.com/yesodweb/yesod/issues/952)\n\n##
  1.4.4\n\n* Add and process Keter option 'extraFiles' [#947](https://github.com/yesodweb/yesod/pull/947)\n\n##
  1.4.3.11\n\n* Disregard proxy environment variables in yesod devel [#945](https://github.com/yesodweb/yesod/pull/945)\n\n##
  1.4.3.10\n\n* Allow blaze-builder 0.4\n\n## 1.4.3.9\n\n* Scaffold update: minimal
  scaffold uses yesod-core instead of yesod [yesodweb/yesod-scaffold#65](https://github.com/yesodweb/yesod-scaffold/issues/65)\n\n##
  1.4.3.8\n\n* Scaffold update: fix 404 for missing sourcemap\n\n## 1.4.3.6\n\n* Scaffold
  update: use `addToken` instead of `addNonce`\n\n## 1.4.3.5\n\n* Fix add-handler
  putting two routes on one line [#922](https://github.com/yesodweb/yesod/pull/922)\n\n##
  1.4.3.4\n\nScaffolding updates:\n\n* Improve `DevelMain` support\n* Wipe out database
  during test runs\n* Convenience `unsafeHandler` function\n* Remove deprecated Chrome
  Frame code\n\n## 1.4.3.3\n\nMore consistent whitespace in hamlet files in scaffolding
  [#50](https://github.com/yesodweb/yesod-scaffold/issues/50)\n\n## 1.4.3.2\n\nadd-handler
  adds arguments too [#898](https://github.com/yesodweb/yesod/issues/898)\n\n## 1.4.3\n\nAdd
  the minimal scaffolding\n\n## 1.4.2\n\nScaffolding updates:\n\n* Import.NoFoundation\n*
  Explanation of static files in Settings.StaticFiles\n* Explanation of environment
  variables in settings.yml\n\n## 1.4.1.2\n\nNo args passed in keter.yml\n\n## 1.4.1\n\nSignificant
  update to the scaffolding.\n\n## 1.4.0.9\n\nAllow devel.hs to be located in app/
  or src/ subdirectories.\n\n## 1.4.0.8\n\nUpdated postgres-fay scaffolding for yesod-fay
  0.7.0\n\n## 1.4.0.7\n\nFix a bug in `yesod devel` when cabal config has `tests:
  True` #864\n"
basic-deps:
  shakespeare: ! '>=2.0'
  warp: ! '>=1.3.7.5'
  http-client: ! '>=0.4.7'
  http-reverse-proxy: ! '>=0.4'
  streaming-commons: -any
  bytestring: ! '>=0.9.1.4'
  wai: ! '>=2.0'
  unliftio: -any
  split: ! '>=0.2 && <0.3'
  stm: -any
  Cabal: ! '>=1.18'
  base: ! '>=4.3 && <5'
  data-default-class: -any
  time: ! '>=1.1.4'
  base64-bytestring: -any
  unordered-containers: -any
  text: ! '>=0.11'
  project-template: ! '>=0.1.1'
  unix-compat: ! '>=0.2'
  filepath: ! '>=1.1'
  process: -any
  network: ! '>=2.5'
  parsec: ! '>=2.1 && <4'
  conduit: ! '>=1.3'
  conduit-extra: ! '>=1.3'
  containers: ! '>=0.2'
  blaze-builder: ! '>=0.2.1.4 && <0.5'
  tar: ! '>=0.4 && <0.6'
  warp-tls: ! '>=3.0.1'
  http-client-tls: -any
  zlib: ! '>=0.5'
  file-embed: -any
  attoparsec: ! '>=0.10'
  wai-extra: -any
  transformers: -any
  optparse-applicative: ! '>=0.11'
  say: -any
  fsnotify: ! '>=0.0 && <0.3'
  resourcet: ! '>=1.2'
  http-types: ! '>=0.7'
  template-haskell: -any
  yaml: ! '>=0.8 && <0.9'
  transformers-compat: -any
  directory: ! '>=1.2.1'
all-versions:
- '1.2.0'
- '1.2.0.1'
- '1.2.1'
- '1.2.2'
- '1.2.2.1'
- '1.2.3'
- '1.2.3.1'
- '1.2.3.2'
- '1.2.3.3'
- '1.2.3.4'
- '1.2.4'
- '1.2.4.1'
- '1.2.5'
- '1.2.5.1'
- '1.2.5.2'
- '1.2.5.3'
- '1.2.5.4'
- '1.2.5.5'
- '1.2.5.6'
- '1.2.5.7'
- '1.2.5.8'
- '1.2.6'
- '1.2.6.1'
- '1.2.7'
- '1.2.7.1'
- '1.2.7.2'
- '1.2.7.3'
- '1.2.7.4'
- '1.2.8'
- '1.2.8.1'
- '1.2.9'
- '1.2.9.1'
- '1.2.9.2'
- '1.2.9.3'
- '1.2.9.4'
- '1.2.10'
- '1.2.10.1'
- '1.2.10.2'
- '1.2.10.3'
- '1.2.11'
- '1.2.12'
- '1.2.12.1'
- '1.2.12.2'
- '1.2.12.3'
- '1.2.12.4'
- '1.2.12.5'
- '1.2.12.6'
- '1.2.12.7'
- '1.2.12.8'
- '1.2.13'
- '1.4.0'
- '1.4.0.1'
- '1.4.0.2'
- '1.4.0.3'
- '1.4.0.4'
- '1.4.0.5'
- '1.4.0.6'
- '1.4.0.7'
- '1.4.0.8'
- '1.4.0.9'
- '1.4.1'
- '1.4.1.1'
- '1.4.1.2'
- '1.4.2'
- '1.4.3'
- '1.4.3.1'
- '1.4.3.2'
- '1.4.3.3'
- '1.4.3.4'
- '1.4.3.5'
- '1.4.3.6'
- '1.4.3.7'
- '1.4.3.9'
- '1.4.3.10'
- '1.4.3.11'
- '1.4.4'
- '1.4.5'
- '1.4.5.1'
- '1.4.6'
- '1.4.7'
- '1.4.7.1'
- '1.4.7.2'
- '1.4.8'
- '1.4.9'
- '1.4.9.1'
- '1.4.9.2'
- '1.4.10'
- '1.4.11'
- '1.4.12'
- '1.4.13'
- '1.4.13.1'
- '1.4.13.2'
- '1.4.13.3'
- '1.4.14'
- '1.4.15'
- '1.4.16'
- '1.4.16.1'
- '1.4.17'
- '1.4.17.1'
- '1.4.18'
- '1.4.18.1'
- '1.4.18.2'
- '1.4.18.3'
- '1.4.18.4'
- '1.4.18.5'
- '1.4.18.6'
- '1.4.18.7'
- '1.5.0.1'
- '1.5.1'
- '1.5.2'
- '1.5.2.1'
- '1.5.2.2'
- '1.5.2.3'
- '1.5.2.4'
- '1.5.2.5'
- '1.5.2.6'
- '1.5.3'
- '1.6.0'
- '1.6.0.1'
- '1.6.0.2'
- '1.6.0.3'
author: Michael Snoyman <michael@snoyman.com>
latest: '1.6.0.3'
description-type: markdown
description: ! "## yesod-bin: the Yesod executable\n\nThis executable is almost exclusively
  used for its `yesod devel`\ncapabilities, providing a development server for web
  apps. It also\nprovides some legacy functionality, almost all of which has been\nsuperceded
  by functionality in the\n[Haskell Stack build tool](http://haskellstack.org/). This
  README will\nspeak exclusively about `yesod devel`.\n\n__CAVEAT__ There may be some
  issues using `yesod devel` in Docker-enabled\nprojects. See [comment on\nGithub](https://github.com/yesodweb/yesod/pull/1305#issuecomment-263204471).\n\n###
  Development server\n\nThe development server will automatically recompile your application\nwhenever
  you make source code changes. It will then launch your app,\nand reverse-proxy to
  it. The reverse proxying ensures that you can\nconnect to your application on a
  dedicated port, always get the latest\nversion available, and won't get dropped
  connections when the app\nisn't yet ready. Instead, you'll get some very motivating
  messages:\n\n![Motivation](https://i.sli.mg/nO6DvN.png)\n\n## Common workflows\n\nThe
  standard Yesod scaffoldings are configured to work with `yesod\ndevel` out of the
  box (though see below for non-Yesod\ndevelopment). For the most part, from within
  your application\ndirectory, you'll just want to run:\n\n* `stack build yesod-bin`\n*
  `stack exec -- yesod devel`\n\nThis will install the corresponding version of the
  `yesod` executable\ninto your currently selected snapshot, and then use that\nexecutable.
  (Starting with version 1.5.0, you can be more lax and use\na `yesod` executable
  compiled for a different snapshot. Once 1.5.0 is\nmore widespread we'll probably
  update these instructions.)\n\nSome other common questions:\n\n* If you want to
  control which port you can access your application\n  on, use the `--port` command
  line option, e.g. `stack exec -- yesod\n  devel --port 4000`. Changing your port
  inside your source code _will\n  not work_, because you need to change the reverse
  proxying port.\n* If you want to run a command after each successful build, you
  can\n  use `stack exec -- yesod devel --success-hook \"echo Yay!\"`\n* If for some
  reason you want to disable the reverse proxy\n  capabilities, use `stack exec --
  yesod devel\n  --disable-reverse-proxy`\n\n## How it works\n\nThe workflow of the
  devel server is pretty simple:\n\n* Launch a reverse proxy server\n* Use Stack file-watch
  capability to run a build loop on your code,\n  rebuilding each time a file is modified\n*
  Have Stack call `yesod devel-signal` to write to a specific file\n  (`yesod-devel/rebuild`)
  each time a rebuild is successful\n* Each time `yesod-devel/rebuild` is modified:\n
  \ * Kill the current child process\n  * Get a new random port\n  * Tell the reverse
  proxy server about the new port to forward to\n  * Run the application's devel script
  with two environment variables\n    set:\n    * `PORT` gives the newly generated
  random port. The application\n      needs to listen on that port.\n    * `DISPLAY_PORT`
  gives the port that the reverse proxy is\n      listening on, used for display purposes
  or generating URLs.\n\nNow some weird notes:\n\n* The devel script can be one of
  the following three files. `yesod\n  devel` will search for them in the given order.
  That script must\n  provide a `main` function.\n  * `app/devel.hs`\n  * `devel.hs`\n
  \ * `src/devel.hs`\n* Unfortunately, directly killing the `ghc` interpreter has
  never\n  worked reliably, so we have an extra hack: when killing the process,\n
  \ `yesod devel` also writes to a file\n  `yesod-devel/devel-terminate`. Your devel
  script should respect this\n  file and shutdown whenever it exists.\n* If your .cabal
  file defines them, `yesod devel` will tell Stack to\n  build with the flags `dev`
  and `library-only`. You can use this to\n  speed up compile times (biggest win:
  skip building executables, thus\n  the name `library-only`).\n\nIf that all seems
  a little complicated, remember that the Yesod\nscaffolding handles all of this for
  you. But if you want to implement\nit yourself...\n\n## Non-Yesod development\n\nIf
  you'd like to use the `yesod devel` server for your non-Yesod\napplication, or even
  for a Yesod application not based on the\nscaffolding, this section is for you!
  We've got a\n[sample application in the repository](https://github.com/yesodweb/yesod/tree/master/yesod-bin/devel-example)\nthat
  demonstrates how to get this set up. It demonstrates a good way\nto jump through
  the hoops implied above.\n\nOne important note: I highly recommend putting _all_
  of the logic in\nyour library, and then providing a `develMain :: IO ()` function
  which\nyoru `app/devel.hs` script reexports as `main`. I've found this to\ngreatly
  simplify things overall, since you can ensure all of your\ndependencies are specified
  correctly in your `.cabal` file. Also, I\nrecommend using `PackageImports` in that
  file, as the example app\nshows.\n"
license-name: MIT
