homepage: https://github.com/snoyberg/yesod-gitrepo#readme
changelog-type: markdown
hash: 7aad996935065726ce615c395d735cc01dcef3993b1788f670f6bfc866085e02
test-bench-deps: {}
maintainer: michael@snoyman.com
synopsis: Host content provided by a Git repo
changelog: ! '## 0.3.0


  * Support yesod-core 1.6


  ## 0.2.1.0


  * Add back some missing changes from 0.1.1.0


  ## 0.2.0.0


  * Drop system-filepath


  ## 0.1.1.0


  `gitRepoDev` added.


  ## 0.1.0.0


  Initial release

'
basic-deps:
  wai: ! '>=3.0'
  unliftio: -any
  yesod-core: ! '>=1.6 && <1.7'
  base: ! '>=4.9 && <10'
  text: -any
  process: ! '>=1.1'
  temporary: -any
  http-types: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0
author: Michael Snoyman
latest: 0.3.0
description-type: markdown
description: ! "yesod-gitrepo\n=============\n\n[![Build Status](https://travis-ci.org/snoyberg/yesod-gitrepo.svg?branch=master)](https://travis-ci.org/snoyberg/yesod-gitrepo)\n[![Build
  status](https://ci.appveyor.com/api/projects/status/l7vapfikbowucr2x/branch/master?svg=true)](https://ci.appveyor.com/project/snoyberg/yesod-gitrepo/branch/master)\n\nyesod-gitrepo
  provides a means of embedding content from a Git repository\ninside a Yesod application.
  The typical workflow is:\n\n* Use `gitRepo` to specify a repository and branch you
  want to work with.\n* Provide a function that will perform some processing on the
  cloned\n  repository.\n* Use `grContent` in your `Handler` functions to access this
  parsed data.\n* Embed the `GitRepo` as a subsite that can be used to force a refresh
  of the\n  data.\n* Set up a commit handler that pings that URL. On Github, this
  would be a\n  webhook.\n\nThis is likely easiest to understand with a concrete example,
  so let's go meta:\nhere's an application that will serve this very `README.md` file.
  We'll start\noff with language extensions and imports:\n\n```haskell\n{-# LANGUAGE
  NoImplicitPrelude #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes
  \      #-}\n{-# LANGUAGE TemplateHaskell   #-}\n{-# LANGUAGE TypeFamilies      #-}\nimport
  \          ClassyPrelude.Yesod\nimport           Text.Markdown\nimport           Yesod.GitRepo\n```\n\nNow
  we're going to create our foundation datatype. We need to give it one\nfield: the
  `GitRepo` value containing our parsed content. Our content will\nsimply be the text
  inside `README.md`, wrapped up in a `Markdown` newtype for\neasy rendering. This
  gives us:\n\n```haskell\ndata App = App\n    { getGitRepo :: GitRepo Markdown\n
  \   }\n\ninstance Yesod App\n```\n\nAnd now let's set up our routes. We need just
  two: a homepage, and the subsite.\nOur subsite type is `GitRepo Markdown` (as given
  above). We replace the space\nwith a hyphen as an escaping mechanism inside Yesod's
  route syntax:\n\n```haskell\nmkYesod \"App\" [parseRoutes|\n/ HomeR GET\n/refresh
  RefreshR GitRepo-Markdown getGitRepo\n|]\n```\n\nNext up is our home handler. We
  start off by getting the current content parsed\nfrom the repository:\n\n```haskell\ngetHomeR
  :: Handler Html\ngetHomeR = do\n    master <- getYesod\n    content <- liftIO $
  grContent $ getGitRepo master\n```\n\nThen it's just some normal Hamlet code:\n\n```haskell\n
  \   defaultLayout $ do\n        setTitle \"yesod-gitrepo sample\"\n        [whamlet|\n
  \           <p>\n                <a href=@{RefreshR GitRepoRoute}>\n                    Force
  a refresh at\n                    @{RefreshR GitRepoRoute}\n            <article>#{content}\n
  \       |]\n```\n\nAnd finally, our `main` function. We pass in the repo URL and
  branch name, plus\na function that, given the filepath containing the cloned repo,
  processes it\nand generates a `Markdown` value. Finally, we provide the generated
  `repo`\nvalue to our `App` constructor and run it:\n\n```haskell\nmain :: IO ()\nmain
  = do\n    repo <- gitRepo\n        \"https://github.com/snoyberg/yesod-gitrepo\"\n
  \       \"master\"\n        $ \\fp -> fmap Markdown $ readFile $ fp </> \"README.md\"\n
  \   warp 3000 $ App repo\n```\n\nGive it a shot. You should have a webapp hosting
  this very README file!\n"
license-name: MIT
