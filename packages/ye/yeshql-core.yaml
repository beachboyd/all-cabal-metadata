homepage: https://github.com/tdammers/yeshql
changelog-type: ''
hash: 59cc047529c19cfb10eb951228522c74be5dc1bdea4b3953c4388710926f3789
test-bench-deps:
  yeshql-core: -any
  stm: -any
  base: ! '>=4.6 && <5.0'
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
maintainer: tdammers@gmail.com
synopsis: YesQL-style SQL database abstraction (core)
changelog: ''
basic-deps:
  base: ! '>=4.6 && <5.0'
  filepath: -any
  parsec: ! '>=3.0 && <4.0'
  containers: ! '>=0.5 && <1.0'
  convertible: ! '>=1.1.1.0 && <2'
  template-haskell: -any
all-versions:
- '4.1.0.0'
- '4.1.0.1'
- '4.1.0.2'
author: Tobias Dammers
latest: '4.1.0.2'
description-type: markdown
description: ! "# YeshQL\n\n[YesQL](https://github.com/krisajenkins/yesql)-style SQL
  database abstraction.\n\nYeshQL implements quasiquoters that allow the programmer
  to write SQL queries\nin SQL, and embed these into Haskell programs using quasi-quotation.
  YeshQL\ntakes care of generating suitable functions that will run the SQL queries\nagainst
  a HDBC database driver, and marshal values between Haskell and SQL.\n\nIn order
  to do this properly, YeshQL extends SQL syntax with type annotations\nand function
  names; other than that, it is perfectly ignorant about the SQL\nsyntax itself. See
  the [YesQL\nReadme](https://github.com/krisajenkins/yesql/blob/master/README.md)
  for the\nfull rationale - Haskell and Clojure are sufficiently different languages,
  but\nthe reasoning behind YesQL applies to YeshQL almost unchanged.\n\n## Installation\n\nUse
  [stack](http://haskellstack.org/) or [cabal](http://haskell.org/cabal/) to\ninstall.
  Nothing extraordinary here.\n\n## Usage\n\nIn short:\n\n    {-#LANGUAGE QuasiQuotes
  #-}\n    import MyProject.DatabaseConnection (withDB)\n    import Database.HDBC\n
  \   import Database.YeshQL\n\n    [yesh|\n      -- name:getUser :: (String)\n      --
  :userID :: Int\n      SELECT username FROM users WHERE id = :userID\n    |] \n\n
  \   main = withDB $ \\conn -> do\n      username <- getUser 1 conn\n      putStrLn
  username\n\nPlease refer to the Haddock documentation for further usage details.\n\n##
  Bugs\n\nProbably. The project is hosted at https://github.com/tdammers/yeshql, feel\nfree
  to comment there or send a message to tdammers@gmail.com if you find any.\n\n##
  Something about the name\n\nYeshQL is rather heavily inspired by YesQL, so it makes
  sense to blatantly\nsteal most of the name. Throwing in an \"H\" for good measure
  (this being Haskell\nand all) makes it sound like Sean Connery, which automatically
  increases\naweshomenesh, so that'sh what we'll roll with.\n\n## License / Copying\n\nYeshQL
  is Free Software and provided as-is. Please see the enclosed LICENSE\nfile for details.\n"
license-name: MIT
