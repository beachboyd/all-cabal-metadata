homepage: https://www.shellcheck.net/
changelog-type: ''
hash: 60950b0ad1d6ec1d9c898486cf0ae942b46eec04801869a52a6f8f3362d46aa2
test-bench-deps:
  bytestring: -any
  base: ! '>=4 && <5'
  ShellCheck: -any
  parsec: -any
  containers: -any
  regex-tdfa: -any
  mtl: ! '>=2.2.1'
  QuickCheck: ! '>=2.7.4'
  aeson: -any
  directory: -any
maintainer: vidar@vidarholen.net
synopsis: Shell script analysis tool
changelog: ''
basic-deps:
  bytestring: -any
  base: ! '>4.6.0.1 && <5'
  ShellCheck: -any
  process: -any
  parsec: ! '>=3.0'
  containers: ! '>=0.5'
  regex-tdfa: -any
  mtl: ! '>=2.2.1'
  QuickCheck: ! '>=2.7.4'
  aeson: -any
  directory: -any
all-versions:
- '0.3.0'
- '0.3.1'
- '0.3.2'
- '0.3.3'
- '0.3.4'
- '0.3.5'
- '0.3.6'
- '0.3.7'
- '0.3.8'
- '0.4.1'
- '0.4.2'
- '0.4.3'
- '0.4.4'
- '0.4.5'
- '0.4.6'
- '0.4.7'
- '0.5.0'
- '0.6.0'
author: Vidar Holen
latest: '0.6.0'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/koalaman/shellcheck.svg?branch=master)](https://travis-ci.org/koalaman/shellcheck)\n\n#
  ShellCheck - A shell script static analysis tool\n\nShellCheck is a GPLv3 tool that
  gives warnings and suggestions for bash/sh shell scripts:\n\n![Screenshot of a terminal
  showing problematic shell script lines highlighted](doc/terminal.png)\n\nThe goals
  of ShellCheck are\n\n- To point out and clarify typical beginner's syntax issues
  that cause a shell\n  to give cryptic error messages.\n\n- To point out and clarify
  typical intermediate level semantic problems that\n  cause a shell to behave strangely
  and counter-intuitively.\n\n- To point out subtle caveats, corner cases and pitfalls
  that may cause an\n  advanced user's otherwise working script to fail under future
  circumstances.\n\nSee [the gallery of bad code](README.md#user-content-gallery-of-bad-code)
  for examples of what ShellCheck can help you identify!\n\n## Table of Contents\n\n-
  [How to use](#how-to-use)\n  - [On the web](#on-the-web)\n  - [From your terminal](#from-your-terminal)\n
  \ - [In your editor](#in-your-editor)\n  - [In your build or test suites](#in-your-build-or-test-suites)\n-
  [Installing](#installing)\n- [Travis CI](#travis-ci)\n- [Compiling from source](#compiling-from-source)\n
  \ - [Installing Cabal](#installing-cabal)\n  - [Compiling ShellCheck](#compiling-shellcheck)\n
  \ - [Running tests](#running-tests)\n- [Gallery of bad code](#gallery-of-bad-code)\n
  \ - [Quoting](#quoting)\n  - [Conditionals](#conditionals)\n  - [Frequently misused
  commands](#frequently-misused-commands)\n  - [Common beginner's mistakes](#common-beginners-mistakes)\n
  \ - [Style](#style)\n  - [Data and typing errors](#data-and-typing-errors)\n  -
  [Robustness](#robustness)\n  - [Portability](#portability)\n  - [Miscellaneous](#miscellaneous)\n-
  [Testimonials](#testimonials)\n- [Ignoring issues](#ignoring-issues)\n- [Reporting
  bugs](#reporting-bugs)\n- [Contributing](#contributing)\n- [Copyright](#copyright)\n\n##
  How to use\n\nThere are a number of ways to use ShellCheck!\n\n### On the web\n\nPaste
  a shell script on https://www.shellcheck.net for instant feedback.\n\n[ShellCheck.net](https://www.shellcheck.net)
  is always synchronized to the latest git commit, and is the easiest way to give
  ShellCheck a go. Tell your friends!\n\n### From your terminal\n\nRun `shellcheck
  yourscript` in your terminal for instant output, as seen above.\n\n### In your editor\n\nYou
  can see ShellCheck suggestions directly in a variety of editors.\n\n* Vim, through
  [ALE](https://github.com/w0rp/ale), [Neomake](https://github.com/neomake/neomake),
  or [Syntastic](https://github.com/scrooloose/syntastic):\n\n![Screenshot of Vim
  showing inlined shellcheck feedback](doc/vim-syntastic.png).\n\n* Emacs, through
  [Flycheck](https://github.com/flycheck/flycheck) or [Flymake](https://github.com/federicotdn/flymake-shellcheck):\n\n![Screenshot
  of emacs showing inlined shellcheck feedback](doc/emacs-flycheck.png).\n\n* Sublime,
  through [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter-shellcheck).\n\n*
  Atom, through [Linter](https://github.com/AtomLinter/linter-shellcheck).\n\n* VSCode,
  through [vscode-shellcheck](https://github.com/timonwong/vscode-shellcheck).\n\n*
  Most other editors, through [GCC error compatibility](shellcheck.1.md#user-content-formats).\n\n###
  In your build or test suites\n\nWhile ShellCheck is mostly intended for interactive
  use, it can easily be added to builds or test suites.\n\nShellCheck makes canonical
  use of exit codes, and can output simple JSON, CheckStyle compatible XML, GCC compatible
  warnings as well as human readable text (with or without ANSI colors). See the [Integration](https://github.com/koalaman/shellcheck/wiki/Integration)
  wiki page for more documentation.\n\n## Installing\n\nThe easiest way to install
  ShellCheck locally is through your package manager.\n\nOn systems with Cabal (installs
  to `~/.cabal/bin`):\n\n    cabal update\n    cabal install ShellCheck\n\nOn systems
  with Stack (installs to `~/.local/bin`):\n\n    stack update\n    stack install
  ShellCheck\n\nOn Debian based distros:\n\n    apt-get install shellcheck\n\nOn Arch
  Linux based distros:\n\n    pacman -S shellcheck\n\nor get the dependency free [shellcheck-static](https://aur.archlinux.org/packages/shellcheck-static/)
  from the AUR.\n\nOn Gentoo based distros:\n\n    emerge --ask shellcheck\n\nOn EPEL
  based distros:\n\n    yum -y install epel-release\n    yum install ShellCheck\n\nOn
  Fedora based distros:\n\n    dnf install ShellCheck\n\nOn FreeBSD:\n\n    pkg install
  hs-ShellCheck\n\nOn OS X with homebrew:\n\n    brew install shellcheck\n\nOn OpenBSD:\n\n
  \   pkg_add shellcheck\n\nOn openSUSE\n\n    zypper in ShellCheck\n\nOr use OneClickInstall
  - https://software.opensuse.org/package/ShellCheck\n\nOn Solus:\n\n    eopkg install
  shellcheck\n    \nOn Windows (via [scoop](http://scoop.sh)):\n\n    scoop install
  shellcheck\n\nFrom Snap Store:\n\n    snap install --channel=edge shellcheck\n\nFrom
  Docker Hub:\n\n```sh\ndocker pull koalaman/shellcheck:stable  # Or :v0.4.7 for that
  version, or :latest for daily builds\ndocker run -v \"$PWD:/mnt\" koalaman/shellcheck
  myscript\n```\n\nor use `koalaman/shellcheck-alpine` if you want a larger Alpine
  Linux based image to extend. It works exactly like a regular Alpine image, but has
  shellcheck preinstalled.\n\nAlternatively, you can download pre-compiled binaries
  for the latest release here:\n\n* [Linux, x86_64](https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.x86_64.tar.xz)
  (statically linked)\n* [Linux, armv6hf](https://storage.googleapis.com/shellcheck/shellcheck-stable.linux.armv6hf.tar.xz),
  i.e. Raspberry Pi (statically linked)\n* [Windows, x86](https://storage.googleapis.com/shellcheck/shellcheck-stable.zip)\n\nor
  see the [storage bucket listing](https://shellcheck.storage.googleapis.com/index.html)
  for checksums, older versions and the latest daily builds.\n\nDistro packages already
  come with a `man` page. If you are building from source, it can be installed with:\n\n
  \   pandoc -s -t man shellcheck.1.md -o shellcheck.1\n    sudo mv shellcheck.1 /usr/share/man/man1\n\n##
  Travis CI\n\nTravis CI has now integrated ShellCheck by default, so you don't need
  to manually install it.\n\nIf you still want to do so in order to upgrade at your
  leisure or ensure the latest release, follow the steps to install the shellcheck
  binary, bellow.\n\n## Installing the shellcheck binary\n\n*Pre-requisite*: the program
  'xz' needs to be installed on the system.  \nTo install it on debian/ubuntu/linux
  mint, run `apt install xz-utils`.  \nTo install it on Redhat/Fedora/CentOS, run
  `yum -y install xz`.  \n\n```bash\nexport scversion=\"stable\" # or \"v0.4.7\",
  or \"latest\"\nwget \"https://storage.googleapis.com/shellcheck/shellcheck-${scversion}.linux.x86_64.tar.xz\"\ntar
  --xz -xvf shellcheck-\"${scversion}\".linux.x86_64.tar.xz\ncp shellcheck-\"${scversion}\"/shellcheck
  /usr/bin/\nshellcheck --version\n```\n\n## Compiling from source\n\nThis section
  describes how to build ShellCheck from a source directory. ShellCheck is written
  in Haskell and requires 2GB of RAM to compile.\n\n### Installing Cabal\n\nShellCheck
  is built and packaged using Cabal. Install the package `cabal-install` from your
  system's package manager (with e.g. `apt-get`, `brew`, `emerge`, `yum`, or `zypper`).\n\nOn
  MacOS (OS X), you can do a fast install of Cabal using brew, which takes a couple
  of minutes instead of more than 30 minutes if you try to compile it from source.\n\n
  \   brew install cask\n    brew cask install haskell-platform\n    cabal install
  cabal-install\n\nOn MacPorts, the package is instead called `hs-cabal-install`,
  while native Windows users should install the latest version of the Haskell platform
  from https://www.haskell.org/platform/\n\nVerify that `cabal` is installed and update
  its dependency list with\n\n    $ cabal update\n\n### Compiling ShellCheck\n\n`git
  clone` this repository, and `cd` to the ShellCheck source directory to build/install:\n\n
  \   $ cabal install\n\nOr if you intend to run the tests:\n\n    $ cabal install
  --enable-tests\n\nThis will compile ShellCheck and install it to your `~/.cabal/bin`
  directory.\n\nAdd this directory to your `PATH` (for bash, add this to your `~/.bashrc`):\n\n```sh\nexport
  PATH=\"$HOME/.cabal/bin:$PATH\"\n```\n\nLog out and in again, and verify that your
  PATH is set up correctly:\n\n```sh\n$ which shellcheck\n~/.cabal/bin/shellcheck\n```\n\nOn
  native Windows, the `PATH` should already be set up, but the system\nmay use a legacy
  codepage. In `cmd.exe`, `powershell.exe` and Powershell ISE,\nmake sure to use a
  TrueType font, not a Raster font, and set the active\ncodepage to UTF-8 (65001)
  with `chcp`:\n\n    > chcp 65001\n    Active code page: 65001\n\nIn Powershell ISE,
  you may need to additionally update the output encoding:\n\n    > [Console]::OutputEncoding
  = [System.Text.Encoding]::UTF8\n\n### Running tests\n\nTo run the unit test suite:\n\n
  \   $ cabal test\n\n## Gallery of bad code\n\nSo what kind of things does ShellCheck
  look for? Here is an incomplete list of detected issues.\n\n### Quoting\n\nShellCheck
  can recognize several types of incorrect quoting:\n\n```sh\necho $1                           #
  Unquoted variables\nfind . -name *.ogg                # Unquoted find/grep patterns\nrm
  \"~/my file.txt\"                # Quoted tilde expansion\nv='--verbose=\"true\"';
  cmd $v      # Literal quotes in variables\nfor f in \"*.ogg\"                  #
  Incorrectly quoted 'for' loops\ntouch $@                          # Unquoted $@\necho
  'Don't forget to restart!'   # Singlequote closed by apostrophe\necho 'Don\\'t try
  this at home'    # Attempting to escape ' in ''\necho 'Path is $PATH'              #
  Variables in single quotes\ntrap \"echo Took ${SECONDS}s\" 0    # Prematurely expanded
  trap\n```\n\n### Conditionals\n\nShellCheck can recognize many types of incorrect
  test statements.\n\n```sh\n[[ n != 0 ]]                      # Constant test expressions\n[[
  -e *.mpg ]]                    # Existence checks of globs\n[[ $foo==0 ]]                     #
  Always true due to missing spaces\n[[ -n \"$foo \" ]]                  # Always
  true due to literals\n[[ $foo =~ \"fo+\" ]]               # Quoted regex in =~\n[
  foo =~ re ]                     # Unsupported [ ] operators\n[ $1 -eq \"shellcheck\"
  ]           # Numerical comparison of strings\n[ $n && $m ]                      #
  && in [ .. ]\n[ grep -q foo file ]              # Command without $(..)\n[[ \"$$file\"
  == *.jpg ]]           # Comparisons that can't succeed\n(( 1 -lt 2 ))                     #
  Using test operators in ((..))\n```\n\n### Frequently misused commands\n\nShellCheck
  can recognize instances where commands are used incorrectly:\n\n```sh\ngrep '*foo*'
  file                 # Globs in regex contexts\nfind . -exec foo {} && bar {} \\;
  \ # Prematurely terminated find -exec\nsudo echo 'Var=42' > /etc/profile # Redirecting
  sudo\ntime --format=%s sleep 10         # Passing time(1) flags to time builtin\nwhile
  read h; do ssh \"$h\" uptime  # Commands eating while loop input\nalias archive='mv
  $1 /backup'     # Defining aliases with arguments\ntr -cd '[a-zA-Z0-9]'              #
  [] around ranges in tr\nexec foo; echo \"Done!\"            # Misused 'exec'\nfind
  -name \\*.bak -o -name \\*~ -delete  # Implicit precedence in find\n# find . -exec
  foo > bar \\;       # Redirections in find\nf() { whoami; }; sudo f           #
  External use of internal functions\n```\n\n### Common beginner's mistakes\n\nShellCheck
  recognizes many common beginner's syntax errors:\n\n```sh\nvar = 42                          #
  Spaces around = in assignments\n$foo=42                           # $ in assignments\nfor
  $var in *; do ...             # $ in for loop variables\nvar$n=\"Hello\"                     #
  Wrong indirect assignment\necho ${var$n}                     # Wrong indirect reference\nvar=(1,
  2, 3)                     # Comma separated arrays\narray=( [index] = value )         #
  Incorrect index initialization\necho $var[14]                     # Missing {} in
  array references\necho \"Argument 10 is $10\"         # Positional parameter misreference\nif
  $(myfunction); then ..; fi     # Wrapping commands in $()\nelse if othercondition;
  then ..   # Using 'else if'\nf; f() { echo \"hello world; }     # Using function
  before definition\n[ false ]                         # 'false' being true\nif (
  -f file )                    # Using (..) instead of test\n```\n\n### Style\n\nShellCheck
  can make suggestions to improve style:\n\n```sh\n[[ -z $(find /tmp | grep mpg) ]]
  \ # Use grep -q instead\na >> log; b >> log; c >> log      # Use a redirection block
  instead\necho \"The time is `date`\"         # Use $() instead\ncd dir; process
  *; cd ..;         # Use subshells instead\necho $[1+2]                       # Use
  standard $((..)) instead of old $[]\necho $(($RANDOM % 6))             # Don't use
  $ on variables in $((..))\necho \"$(date)\"                    # Useless use of
  echo\ncat file | grep foo               # Useless use of cat\n```\n\n### Data and
  typing errors\n\nShellCheck can recognize issues related to data and typing:\n\n```sh\nargs=\"$@\"
  \                        # Assigning arrays to strings\nfiles=(foo bar); echo \"$files\"
  \   # Referencing arrays as strings\ndeclare -A arr=(foo bar)          # Associative
  arrays without index\nprintf \"%s\\n\" \"Arguments: $@.\"    # Concatenating strings
  and arrays\n[[ $# > 2 ]]                      # Comparing numbers as strings\nvar=World;
  echo \"Hello \" var      # Unused lowercase variables\necho \"Hello $name\"                #
  Unassigned lowercase variables\ncmd | read bar; echo $bar         # Assignments
  in subshells\ncat foo | cp bar                  # Piping to commands that don't
  read\nprintf '%s: %s\\n' foo             # Mismatches in printf argument count\n```\n\n###
  Robustness\n\nShellCheck can make suggestions for improving the robustness of a
  script:\n\n```sh\nrm -rf \"$STEAMROOT/\"*            # Catastrophic rm\ntouch ./-l;
  ls *                 # Globs that could become options\nfind . -exec sh -c 'a &&
  b {}' \\; # Find -exec shell injection\nprintf \"Hello $name\"             # Variables
  in printf format\nfor f in $(ls *.txt); do         # Iterating over ls output\nexport
  MYVAR=$(cmd)              # Masked exit codes\ncase $version in 2.*) :;; 2.6.*)
  # Shadowed case branches\n```\n\n### Portability\n\nShellCheck will warn when using
  features not supported by the shebang. For example, if you set the shebang to `#!/bin/sh`,
  ShellCheck will warn about portability issues similar to `checkbashisms`:\n\n```sh\necho
  {1..$n}                     # Works in ksh, but not bash/dash/sh\necho {1..10}                     #
  Works in ksh and bash, but not dash/sh\necho -n 42                       # Works
  in ksh, bash and dash, undefined in sh\ntrap 'exit 42' sigint            # Unportable
  signal spec\ncmd &> file                      # Unportable redirection operator\nread
  foo < /dev/tcp/host/22      # Unportable intercepted files\nfoo-bar() { ..; }                #
  Undefined/unsupported function name\n[ $UID = 0 ]                     # Variable
  undefined in dash/sh\nlocal var=value                  # local is undefined in sh\ntime
  sleep 1 | sleep 5           # Undefined uses of 'time'\n```\n\n### Miscellaneous\n\nShellCheck
  recognizes a menagerie of other issues:\n\n```sh\nPS1='\\e[0;32m\\$\\e[0m '            #
  PS1 colors not in \\[..\\]\nPATH=\"$PATH:~/bin\"                # Literal tilde
  in $PATH\nrm “file”                         # Unicode quotes\necho \"Hello world\"
  \               # Carriage return / DOS line endings\necho hello \\                      #
  Trailing spaces after \\\nvar=42 echo $var                  # Expansion of inlined
  environment\n#!/bin/bash -x -e                 # Common shebang errors\necho $((n/180*100))
  \              # Unnecessary loss of precision\nls *[:digit:].txt                 #
  Bad character class globs\nsed 's/foo/bar/' file > file      # Redirecting to input\nwhile
  getopts \"a\" f; do case $f in \"b\") # Unhandled getopts flags\n```\n\n## Testimonials\n\n>
  At first you're like \"shellcheck is awesome\" but then you're like \"wtf are we
  still using bash\"\n\nAlexander Tarasikov,\n[via Twitter](https://twitter.com/astarasikov/status/568825996532707330)\n\n##
  Ignoring issues\n\nIssues can be ignored via environmental variable, command line,
  individually or globally within a file:\n\nhttps://github.com/koalaman/shellcheck/wiki/Ignore\n\n##
  Reporting bugs\n\nPlease use the GitHub issue tracker for any bugs or feature suggestions:\n\nhttps://github.com/koalaman/shellcheck/issues\n\n##
  Contributing\n\nPlease submit patches to code or documentation as GitHub pull requests!
  Check\nout the [DevGuide](https://github.com/koalaman/shellcheck/wiki/DevGuide)
  on the\nShellCheck Wiki.\n\nContributions must be licensed under the GNU GPLv3.\nThe
  contributor retains the copyright.\n\n## Copyright\n\nShellCheck is licensed under
  the GNU General Public License, v3. A copy of this license is included in the file
  [LICENSE](LICENSE).\n\nCopyright 2012-2018, Vidar 'koala_man' Holen and contributors.\n\nHappy
  ShellChecking!\n\n\n## Other Resources                                                                          \n*
  The wiki has [long form descriptions](https://github.com/koalaman/shellcheck/wiki/Checks)
  for each warning, e.g. [SC2221](https://github.com/koalaman/shellcheck/wiki/SC2221).\n*
  ShellCheck does not attempt to enforce any kind of formatting or indenting style,
  so also check out [shfmt](https://github.com/mvdan/sh)!\n"
license-name: GPL-3
