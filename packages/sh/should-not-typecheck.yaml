homepage: http://github.com/CRogers/should-not-typecheck
changelog-type: markdown
hash: 1bb23b0dfd0ae393cddc9a10c58eade6849f9a893b1aa5c2e3236869fafd7336
test-bench-deps:
  base: -any
  hspec: ! '>=2.1'
  HUnit: ! '>=1.2'
  should-not-typecheck: -any
  deepseq: -any
  hspec-expectations: ! '>=0.6'
maintainer: message.me.on@github.com
synopsis: A HUnit/hspec assertion library to verify that an expression does not typecheck
changelog: ! '# `should-not-typecheck` changelog


  ## 2.1.0

  * Support GHC 8.0.1 (see https://github.com/CRogers/should-not-typecheck/pull/6).


  ## 2.0.1

  * Support HUnit 1.3


  ## 2.0

  * Changed API to require `NFData a` so we can fully evaluate expressions, rather
  than just converting to WHNF.


  ## 1.0.1

  * Use `throwIO` instead of `throw` for exception ordering safety.


  ## 1.0

  * Stabilise API at 1.0 release.

  * Allow building on 7.6.3.


  ## 0.1.0.0

  * Initial version.

'
basic-deps:
  base: ! '>=4.6 && <5'
  HUnit: ! '>=1.2'
  deepseq: ! '>=1.3'
all-versions:
- 0.1.0.0
- '1.0'
- 1.0.1
- '2.0'
- 2.0.1
- 2.1.0
author: Callum Rogers
latest: 2.1.0
description-type: markdown
description: ! "# should-not-typecheck [![Build Status](https://travis-ci.org/CRogers/should-not-typecheck.svg?branch=master)](https://travis-ci.org/CRogers/should-not-typecheck)
  [![Hackage](https://img.shields.io/hackage/v/should-not-typecheck.svg)](https://hackage.haskell.org/package/should-not-typecheck)\n\n`should-not-typecheck`
  is a Haskell library which allows you to assert that an expression does not typecheck
  in your tests. It provides one function, `shouldNotTypecheck`, which takes an expression
  and will fail the test if it typechecks. `shouldNotTypecheck` returns an HUnit `Assertion`
  (so it can be used with both `HUnit` and `hspec`).\n\n## Example (hspec)\n\nThe
  secret sauce is the [Deferred Type Errors GHC extension](https://downloads.haskell.org/~ghc/7.10.1/docs/html/users_guide/defer-type-errors.html).
  This allows you to write an ill-typed expression which will throw an exception at
  run time (rather than erroring out at compile time). `shouldNotTypecheck` tries
  to catch that exception and fails the test if no deferred type error is caught.\n\n```haskell\n{-#
  OPTIONS_GHC -fdefer-type-errors #-} -- Very important!\n\nmodule Main where\n\nimport
  Test.Hspec (hspec, describe, it)\nimport Test.ShouldNotTypecheck (shouldNotTypecheck)\n\nmain
  :: IO ()\nmain = hspec $ do\n  describe \"Type Tests\" $ do\n    it \"should not
  allow an Int to be a String\" $\n      shouldNotTypecheck (4 :: String)\n```\n\nIt
  can be used similarly with HUnit.\n\n### `NFData a` constraint\n\nHaskell is a lazy
  language - deferred type errors will not get evaluated unless we explicitly and
  deeply force (evaluate) the value. [`NFData`](https://hackage.haskell.org/package/deepseq-1.4.1.1/docs/Control-DeepSeq.html#t:NFData)
  is a typeclass from the [`deepseq`](https://hackage.haskell.org/package/deepseq)
  library which allows you to describe how to fully evaluate an expression (convert
  it to Normal Form). `shouldNotTypecheck` uses this typeclass to fully evaluate expressions
  passed to it. For vanilla Haskell types you only need to derive `Generic` and the
  `deepseq` class will handle it for you:\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  #-}\n\nimport GHC.Generics (Generic)\n\ndata SomeType a = WithSome | DataConstructors
  a\n  deriving Generic\n\ninstance NFData a => NFData (SomeType a)\n```\n\nIn GHC
  7.10 [`DeriveAnyClass` can be used](https://hackage.haskell.org/package/deepseq-1.4.1.1/docs/Control-DeepSeq.html#v:rnf)
  to make it even more succinct.\n\nWith `deepseq >= 1.4`, this autoderiving `Generic`
  option is included with the library. With `deepseq <= 1.3` you'll have to use the
  [`deepseq-generics`](https://hackage.haskell.org/package/deepseq-generics) library
  as well.\n\n#### GADTs\n\nWith more complex datatypes, like GADTs and those existentially
  quantified, `DeriveGeneric` does not work. You will need to provide an instance
  for `NFData` yourself, but not to worry as it follows a pattern:\n\n```haskell\n{-#
  LANGUAGE GADTs #-}\n\nimport Control.DeepSeq (NFData)\n\ndata Expr t where\n  IntVal
  :: Int -> Expr Int\n  BoolVal :: Bool -> Expr Bool\n  Add :: Expr Int -> Expr Int
  -> Expr Int\n\ninstance NFData (Expr t) where\n  rnf expr = case expr of\n    IntVal
  i  -> rnf i -- call rnf on every subvalue\n    BoolVal b -> rnf b\n    Add l r   ->
  rnf l `seq` rnf r -- and `seq` multiple values together\n\n-- Now we can test expressions
  like:\nbadExpr = Add (IntVal 4) (BoolVal True)\n-- do not typecheck!\n```\n\nIf
  you forget to specify an `NFData` instance for a type `should-not-typecheck` should
  warn you.\n\n## Motivation\n\nSometimes you want to ensure that it is impossible
  to type a particular expression. For example, imagine if we were making a typesafe
  Abstract Syntax Tree of mathematical expressions:\n\n```haskell\n{-# LANGUAGE GADTs
  #-}\n\ndata Expr t where\n  IntVal :: Int -> Expr Int\n  BoolVal :: Bool -> Expr
  Bool\n  Add :: Expr Int -> Expr Int -> Expr Int\n  -- ...\n```\n\nWe might want
  to make sure that `Add (BoolVal True) (IntVal 4)` is not well typed. However, we
  can't even compile code like this to put in a unit test! This is where `should-not-typecheck`
  steps in.\n\n## Limitations\n\nUnfortunately, we can only turn on deferred type
  errors for the entire test file rather than just specific expressions. This means
  that any type error will compile but fail at runtime. For example:\n\n```haskell\n{-#
  OPTIONS_GHC -fdefer-type-errors #-}\n\n-- ...\n\nmain :: IO ()\nmain = hspec $ do\n
  \ describe 4 $ do -- Oops!\n   -- ...\n```\n\nWill create a warning at compile time
  but not an error. All of the ill-typed expressions we are testing will also produce
  warnings and it will be hard to immediately see which ones matter. The upside is
  that the test-suite will still fail if there are errors.\n\n### Workaround\n\nYou
  can separate out the ill-typed expressions we are testing and test boilerplate into
  separate files and only turn on deferred type errors for the expressions. This means
  that type errors in test code will still be found at compile time. The downside
  is your tests may now be harder to read.\n"
license-name: BSD-3-Clause
