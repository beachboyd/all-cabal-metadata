homepage: ''
changelog-type: markdown
hash: 5bca16727f5d0da1a15073f681ae4cd3a5d7be1680481eeb53f3715adc3c52a0
test-bench-deps: {}
maintainer: fresheyeball@protonmail.com
synopsis: A single page application rounter for Shpadoinkle based on Servant.
changelog: ''
basic-deps:
  warp: '>=3.2.28 && <3.3'
  exceptions: '>=0.10.3 && <0.11'
  bytestring: '>=0.10.8 && <0.11'
  wai: '>=3.2.2 && <3.3'
  unliftio: '>=0.2.12 && <0.3'
  base: '>=4.12.0 && <4.15'
  servant-client: '>=0.16.0 && <0.18'
  text: '>=1.2.3 && <1.3'
  Shpadoinkle-backend-static: -any
  http-api-data: '>=0.4.1 && <0.5'
  ghcjs-dom: '>=0.9.4 && <0.20'
  servant-server: '>=0.16 && <0.18'
  servant: '>=0.16 && <0.18'
  Shpadoinkle: -any
  lens: '>=4.17.1 && <5.0'
  jsaddle-dom: '>=0.9.3 && <0.20'
  compactable: '>=0.1.2 && <0.2'
  network-uri: '>=2.6.1 && <2.8'
  wai-app-static: '>=3.1.6 && <3.2'
  aeson: '>=1.4.4 && <1.5'
  jsaddle: '>=0.9.7 && <0.20'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Isaac Shapira
latest: 0.1.0.1
description-type: markdown
description: |
  # Shpadoinkle Servant Router

  [![Goldwater](https://gitlab.com/fresheyeball/Shpadoinkle/badges/master/pipeline.svg)](https://gitlab.com/fresheyeball/Shpadoinkle)
  [![BSD-3](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)
  [![built with nix](https://img.shields.io/badge/built%20with-nix-41439a)](https://builtwithnix.org)
  [![Hackage](https://img.shields.io/hackage/v/Shpadoinkle-router.svg)](https://hackage.haskell.org/package/Shpadoinkle-router)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/Shpadoinkle-router.svg)](http://packdeps.haskellers.com/reverse/Shpadoinkle-router)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/Shpadoinkle-router/badge)](https://matrix.hackage.haskell.org/#/package/Shpadoinkle-router)


  A Servant combinator based router for Shpadoinkle single-page applications.
  Consuming this router requires that you provide two types:

  - Type alias for the recognized URIs
  - ADT representing views that can be rendered

  The relationship between these two types is surjective. Meaning more than one URI
  may result in the same route. This is important for backward compatibility, so the
  routing schema can evolve while still supporting older schemas.

  Since interactions are done through the ADT, application code should be type-safe,
  and route canonically.

  ```haskell
  -- The accepted URIs
  type SPA
    =            "echo" :> QueryParam "echo" Text :> Raw
    :<|> "v2" :> "echo" :> QueryParam "echo" Text :> Raw
    :<|> "home" :> Raw

  -- The routes that can be rendered
  data Route
    = Echo (Maybe Text)
    | Home

  -- Surjection from URIs to routes
  routes :: SPA :>> Route
  routes
    =    REcho
    :<|> REcho
    :<|> Home

  -- Canonical URI for each route
  instance Routed SPA Route where
    redirect = \case
      REcho t -> Redirect (Proxy @("v2" :> "echo" :> QueryParam "echo" Text :> Raw)) ($ t)
      Home    -> Redirect (Proxy @("home" :> Raw)) id
  ```

  The above specification can be used on both the client and the server. See the `servant-crud` example for more on how to use this technique.
license-name: BSD-3-Clause
