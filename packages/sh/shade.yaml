homepage: https://github.com/fredefox/shade#readme
changelog-type: ''
hash: a794446c6088261041c7d0e78914104170a7e0edfd2d7cc972837af35ee09698
test-bench-deps: {}
maintainer: fhi.1990@gmail.com
synopsis: A control structure used to combine heterogenous types with delayed effects.
changelog: ''
basic-deps:
  base: ! '>=4.8 && <5'
  mtl: ! '>=2.2.1'
  transformers: ! '>=0.5.2.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
- 0.1.1.1
author: Frederik HanghÃ¸j Iversen
latest: 0.1.1.1
description-type: markdown
description: ! "``` {.sourceCode .literate .haskell}\n{-# LANGUAGE MultiParamTypeClasses
  #-}\nmodule Main ( main ) where\n\nimport Data.Functor.Identity\nimport Control.Monad\n\nimport
  Control.Monad.Shade\n```\n\nA shade can be used to save heterogeneous types in containers
  with the\nsame type e.g. using a type-class as a common denominator:\n\n``` {.sourceCode
  .literate .haskell}\nshowshade :: Applicative m => Show a => a -> Shade m String\nshowshade
  a = pure (show a)\n\nhetero :: Shade Identity String\nhetero = mconcat [ showshade
  () , showshade 2 , showshade \"hej\" ]\n```\n\nThe values inside a shade are stored
  in a context. We can swap this\ncontext by defining a transfer function:\n\n```
  {.sourceCode .literate .haskell}\nidToIO :: Identity b -> IO b\nidToIO (Identity
  v) = putStrLn \"Transferring\" *> pure v\n```\n\nThe context is switched using `transfer`
  and we can access the value in\nthis new context by using `shadow`:\n\n``` {.sourceCode
  .literate .haskell}\nrunInIO :: Shade Identity a -> IO a\nrunInIO = shadow . transfer
  idToIO\n```\n\nThe point to note about this example is that the values are stored
  in an\nshades with the identity as context. We can manipulate this context\nincluding
  the value. We cannot, however inspect the value since it is\nuniversally quantified.\n\n```
  {.sourceCode .literate .haskell}\nnoisy :: String -> Shade Identity (IO ())\nnoisy
  s = pure (putStrLn s)\n```\n\n``` {.sourceCode .literate .haskell}\nmain :: IO ()\nmain
  = do\n  r <- runInIO hetero\n  putStrLn r\n  join . runInIO . mconcat . map (noisy
  . show) $ [0..10]\n```\n"
license-name: BSD-3-Clause
