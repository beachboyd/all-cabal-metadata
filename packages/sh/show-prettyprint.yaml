homepage: https://github.com/quchen/show-prettyprint#readme
changelog-type: markdown
hash: 047f085d959f79dee699fb768e6d1f360be9988fa4d52d96179918919667df37
test-bench-deps:
  base: -any
  doctest: ! '>=0.9'
maintainer: David Luposchainsky <dluposchainsky (λ) google>
synopsis: ! 'Robust prettyprinter for output of auto-generated Show

  instances'
changelog: ! '# 0.2.0.1


  Tagged the wrong version as 0.2 on Github. Releasing a new version with an

  updated tag to remedy this.


  # 0.2


  Prettyprint based on the `prettyprinter` library, instead of `ansi-wl-pprint`.

  To support the `Diagnostic` module, the Trifecta-generated `Doc` has to be

  rendered still, so we cannot drop the dependency on ansi-wl-pprint just yet.

'
basic-deps:
  ansi-wl-pprint: -any
  trifecta: ! '>=1.6'
  base: ! '>=4.7 && <5'
  prettyprinter: ! '>=1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.0.2'
- '0.1.2'
- '0.1.2.1'
- '0.2'
- '0.2.0.1'
author: David Luposchainsky <dluposchainsky (λ) google>
latest: '0.2.0.1'
description-type: markdown
description: ! "Prettyprint `Show` output\n=========================\n\nOutput of
  nested data structures by `Show` instances is often very hard to read.\nThis package
  offers a simple function to insert line breaks and indentation into\nthat ouput
  so that the semantics are unchanged, but makes it *much* easier to\nread.\n\nThe
  package does not rely on a parser for actual Haskell; instead, it merely\nreacts
  on parentheses, commas and the like. This makes it fairly robust even in\nthe face
  of invalid `Show` instances, that may not produce valid Haskell code.\n\n\n\n##
  Examples\n\n### Artificial\n\n```haskell\nHello Foo (\"(Bar\", Haha) (Baz (A { foo
  = C, bar = D, qux = (E,\"He)llo World!\",G,\n    H,[A,B,c,d,e,Fghi]) } ) (B,C) [Baz
  A1 B2, (Baz A3 (B4)), (Baz A5 (B6)), (Baz\n    (A7) B8)]) (Foo) (Bar) (Baz (A) (B))\n\n==>\n\nHello
  Foo (\"(Bar\",Haha)\n          (Baz (A {foo = C\n                  ,bar = D\n                  ,qux
  = (E\n                         ,\"He)llo World!\"\n                         ,G\n
  \                        ,H\n                         ,[A,B,c,d,e,Fghi])})\n               (B,C)\n
  \              [Baz A1 B2\n               ,(Baz A3 (B4))\n               ,(Baz A5
  (B6))\n               ,(Baz (A7) B8)])\n          (Foo)\n          (Bar)\n          (Baz
  (A) (B))\n```\n\n### Inspired by a real AST\n\n```haskell\nSet  (fromList [(Name
  \"A string with (parenthesis\",Ann  (Entry (Quality 1 1)\n    (Ann  False) (Ann
  \ (Map [Ann  (Bound (Ann  (Id \"lorem\"))),Ann  (Variable\n    (Ann  (Id \"ipsum\")))])))),(Name
  \"string\",Ann  (Entry (Quality 1 1) (Ann\n    True) (Ann  (Internal (Ann  (Reduce
  (Ann  (Id \"dolor\")) (Ann  (Id \"sit\")))))\n    ))),(Name \"Another } here\",Ann
  \ (Entry (Quality 1 1) (Ann  (Or [Ann  (Not\n    (Ann  (Is (Ann  Flagged) (Ann  Type)
  (Ann  (Multi [Ann  (Literal (Ann  One))\n    ]))))),Ann  (Is (Ann  Flagged) (Ann
  \ Type) (Ann  (Multi [Ann  (Literal (Ann\n    Three))]))),Ann  (Is (Ann  Flagged)
  (Ann  Type) (Ann  (Multi [Ann  (Literal\n    (Ann  Two))])))])) (Ann  (Internal
  (Ann  (Concat (Ann  (Id \"amet\"))))))))])\n\n==>\n\nSet (fromList [(Name \"A string
  with (parenthesis\"\n               ,Ann (Entry (Quality 1 1)\n                           (Ann
  False)\n                           (Ann (Map [Ann (Bound (Ann (Id \"lorem\")))\n
  \                                    ,Ann (Variable (Ann (Id \"ipsum\")))]))))\n
  \             ,(Name \"string\"\n               ,Ann (Entry (Quality 1 1)\n                           (Ann
  True)\n                           (Ann (Internal (Ann (Reduce (Ann (Id \"dolor\"))\n
  \                                                      (Ann (Id \"sit\"))))))))\n
  \             ,(Name \"Another } here\"\n               ,Ann (Entry (Quality 1 1)\n
  \                          (Ann (Or [Ann (Not (Ann (Is (Ann Flagged)\n                                                       (Ann
  Type)\n                                                       (Ann (Multi [Ann (Literal
  (Ann One))])))))\n                                    ,Ann (Is (Ann Flagged)\n                                             (Ann
  Type)\n                                             (Ann (Multi [Ann (Literal (Ann
  Three))])))\n                                    ,Ann (Is (Ann Flagged)\n                                             (Ann
  Type)\n                                             (Ann (Multi [Ann (Literal (Ann
  Two))])))]))\n                           (Ann (Internal (Ann (Concat (Ann (Id \"amet\"))))))))])\n```\n"
license-name: BSD3
