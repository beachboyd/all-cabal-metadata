homepage: https://github.com/kowainik/shellmet
changelog-type: markdown
hash: 4535d5cd7b92becb3676becaf98f432bac20e3b44d01803afe11af559f2bd26c
test-bench-deps:
  shellmet: -any
  base: ! '>=4.10.1.0 && <4.13'
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Out of the shell solution for scripting in Haskell
changelog: |
  # Changelog

  `shellmet` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.0.1 — Apr 9, 2019

  * Generalise the type of the `$?` operator to allow returning values on
    shell-command failuires.

  ## 0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/kowainik/shellmet/releases
basic-deps:
  shellmet: -any
  base: ! '>=4.10.1.0 && <4.13'
  text: ! '>=1.2.3 && <1.3'
  process: ^>=1.6.3
all-versions:
- 0.0.0
- 0.0.1
author: Dmitrii Kovanikov
latest: 0.0.1
description-type: markdown
description: |
  # shellmet

  [![Build status](https://secure.travis-ci.org/kowainik/shellmet.svg)](https://travis-ci.org/kowainik/shellmet)
  [![Hackage](https://img.shields.io/hackage/v/shellmet.svg)](https://hackage.haskell.org/package/shellmet)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)
  [![Stackage Lts](http://stackage.org/package/shellmet/badge/lts)](http://stackage.org/lts/package/shellmet)
  [![Stackage Nightly](http://stackage.org/package/shellmet/badge/nightly)](http://stackage.org/nightly/package/shellmet)

  Out of the shell solution for scripting in Haskell. Shellmet provides an easy and
  convenient way to call shell commands from Haskell programs.

  ## Usage example

  This README contains the usage example of the `shellmet` library. The example is
  runnable. You can build and execute with the following command:

  ```shell
  cabal new-run readme
  ```

  ### Setting up

  Since this tutorial is written using Literate Haskell, first, let's write all
  necessary pragmas and imports.

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Data.Semigroup ((<>))
  import Shellmet (($|))

  import qualified Data.Text as T
  ```

  ### Simple scripting example

  Below you can see how easy it is to interact with shell commands in Haskell:

  ```haskell
  main :: IO ()
  main = do
      "echo" ["Starting shellmet readme..."]
      text <- "cat" $| ["README.md"]
      let cnt = T.pack $ show $ length $ T.lines text
      "echo" ["Number of lines in this README: " <> cnt]
  ```

  And the output is:

  ```
  ⚙  echo 'Starting shellmet readme...'
  Starting shellmet readme...
  ⚙  echo 'Number of lines in this README: 54'
  Number of lines in this README: 54
  ```
license-name: MPL-2.0
