homepage: https://github.com/loganmac/shellout#readme
changelog-type: markdown
hash: 13b409faf86354cc46ebcad3e35d3df9470d3ae38eed23ae3a204de8d21d64be
test-bench-deps: {}
maintainer: logan.airnomad@gmail.com
synopsis: A threaded manager for Haskell that can run and stream external process
  output/err/exits
changelog: ! '# Changelog for shellout


  ## Unreleased changes

'
basic-deps:
  stm: -any
  base: ! '>=4.7 && <5'
  text: -any
  async: -any
  typed-process: -any
  shellout: -any
all-versions:
- 0.1.0.0
author: Logan McPhail
latest: 0.1.0.0
description-type: markdown
description: ! "# shellout\n\nA simple library for running standard processes in a
  threaded manager\n, and responding to/doing things with stdout, stderr, and exits
  as they happen.\n\nThis was mainly built out of frustration that most libraries
  wait for a task\nto complete before giving output.\n\nJust initialize with a driver
  and off you go!\n\n## Example\n\nHere's a short annotated example on how to use
  this:\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nmodule Main where\n\nimport
  qualified Shellout\n\nimport           Control.Concurrent (threadDelay)\nimport
  \          Data.Monoid        ((<>))\nimport           Data.Text          (Text)\nimport
  qualified Data.Text.IO       as T\n\n-- create a type to hold data that will be
  passed between all of your handlers,\n-- where you could store things like the task
  name, a spinner's position\n-- and last spin time, etc.\nnewtype Task = Task {name
  :: Text}\n\nmain :: IO ()\nmain = do\n  -- create a 'driver', with functions that
  handle each type of output\n  let driver = Shellout.Driver\n        -- (optionally)
  do something with the task name, and initialize\n        -- data that will be passed
  between your handlers. you could store\n        -- things like the task name, a
  spinner's position and last spin time, etc.\n        { Shellout.initialState =\n
  \         \\taskName -> Task {name = taskName}\n\n        -- what to do when polling
  returns `Nothing`, so it's waiting on\n        -- more output from the task, but
  the task still hasn't exited.\n        -- In this example, we just sleep.\n        ,
  Shellout.handleNothing =\n          \\task -> threadDelay 1000 >> pure task\n\n
  \       -- what to do on stdout from the shell command. You could colorize it,\n
  \       -- append it to list of output (you could keep a list of them in the `Task`),
  etc.\n        , Shellout.handleOut =\n          \\task txt -> T.putStrLn (name task
  <> \": \" <> txt) >> pure task\n\n        -- what to do on stderr. Same things go
  as stdout.\n        , Shellout.handleErr =\n          \\task txt -> T.putStrLn (name
  task <> \": \" <> txt) >> pure task\n\n        -- what to do when a task completes
  successfully\n        , Shellout.handleSuccess =\n          \\task -> T.putStrLn
  $ (name task) <> \" complete.\"\n\n        -- what to do when a task doesn't complete
  successfully\n        , Shellout.handleFailure =\n          \\task -> T.putStrLn
  $ (name task) <> \" failed.\"\n        }\n\n  shell <- Shellout.new driver\n\n  shell
  \"listing directory\" \"ls\"\n\n  shell \"listing hidden files\" \"ls -lah\"\n```"
license-name: BSD-3-Clause
