homepage: www.github.com/bolt12/shannon-fano
changelog-type: markdown
hash: f5c20c515ae233d152361fc72e5661b490a4d4302df7e587f3ddc591d3f3b4c3
test-bench-deps:
  base: -any
  shannon-fano: -any
  QuickCheck: -any
maintainer: armandoifsantos@gmail.com
synopsis: Shannon-fano compression algorithm implementation in Haskell
changelog: ! '# Revision history for shannon-fano


  ## 0.1.0.0 -- 02/11/2018


  * First version.

'
basic-deps:
  bytestring: ! '>=0.10.8.2'
  split: ! '>=0.2.3.3 && <0.3'
  base: ! '>=4.12 && <4.13'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
author: Armando Santos
latest: '0.1.0.1'
description-type: markdown
description: ! "# Shannon-Fano compression algorithm library\n> Haskell implementation\n\nThis
  library offers a set of functions to compress files into binary code\napplying the
  Shannon-Fano compression algorithm.\n\nhttps://en.wikipedia.org/wiki/Shannon%E2%80%93Fano_coding\n\n##
  Installing / Getting started\n\n### Cabal\n\nThis package is now availablein Hackage
  at https://hackage.haskell.org/package/shannon-fano-0.1.0.0\n\nSo you just need
  to:\n\n```shell\n$ cabal update\n$ cabal install shannon-fano\n```\n\n### Manually\n\n```shell\n$
  git clone https://github.com/bolt12/shannon-fano.git\n$ cd shannon-fano/\n$ cabal
  configure\n$ cabal build\n$ cabal install\n```\n\n#### Build documentation\n\n```shell\n$
  cd shannon-fano/\n$ cabal haddock\n```\n\n### See for yourself\n\nYou can see if
  it's correctly installed by going into ghci and see if you can import the\nlibrary.\n\n```shell\n$
  ghci\n> import Codec.Compression.ShannonFano\n>\n```\n\n## Use examples\n\nTo get
  the compressed binary string of a certain value.\n\n```Haskell\nimport Codec.Compression.ShannonFano\n\nmain
  :: IO ()\nmain = putStrLn . show . compress frequency $ \"test\"\n```\n\nAnd you
  should see.\n\n```shell\n> main\nJust \"010110\"\n```\n\n---\n\nTo generate only
  the coding table of some value.\n\n```Haskell\nimport Codec.Compression.ShannonFano\n\nmain
  :: IO ()\nmain = putStrLn . show . genCodeTable . code . frequency $ \"test\"\n```\n\nAnd
  you should see.\n\n```shell\n> main\n[('t',\"0\"),('e',\"10\"),('s',\"11\")]\n```\n\n---\n\nTo
  make a program that compresses a given file.\n\n```Haskell\nimport Codec.Compression.ShannonFano\nimport
  System.Environment\n\nmain :: IO ()\nmain = do\n    [file] <- getArgs\n    content
  <- readFile file\n    compressTofile frequency content\n```\n\nAnd you should get
  two resulting files:\n - out.bin: Has the binary of the compressed data\n - decode.dat:
  Has the decoding table structure\n\n---\n\nTo make a program that decompresses a
  given binary file.\n\n```Haskell\nimport Codec.Compression.ShannonFano\nimport System.Environment\n\nmain
  :: IO ()\nmain = do\n    [decTableF, binaryF] <- getArgs\n    decompressFromFile
  decTableF binaryF \"\"\n```\n\nAnd you should get one resulting file:\n - result.dat:
  Has the binary of the compressed data\n\nYou can check they are equal.\n\n```shell\n$
  diff result.dat test.txt\n$\n```\n\n## Performance and compression\n\nTesting the
  compressor program for a lorem ipsum text file of 921 words:\n\n```shell\n$ time
  ./compress test.txt\n\nreal\t0m0.075s\nuser\t0m0.067s\nsys     0m0.007s\n```\n\nCompression:\n\n```shell\n$
  ls -lh out.bin test.txt | cut -d \" \" -f5\n5.7K\n6.5K\n```\n\n_Total ~ 12%_\n\n---\n\nTesting
  the compressor program with 1M of random data:\n\n```shell\n$ base64 /dev/urandom
  | head -c 1000000 > test2.txt\n$ time ./compress test2.txt\n\nreal\t0m30.411s\nuser\t0m27.930s\nsys
  \    0m2.187s\n```\n\nCompression:\n\n```shell\n$ ls -lh out.bin test2.txt | cut
  -d \" \" -f5\n4.0M\n977K\n```\n\n_Total ~ -312%_\n\n---\n\nTesting the compressor
  program with a 70K file containing repetitions of 5 characters:\n\n```shell\n$ time
  ./compress test3.txt\n\nreal\t0m0.511s\nuser\t0m0.489s\nsys     0m0.017s\n```\n\nCompression:\n\n```shell\n$
  ls -lh out.bin test3.txt | cut -d \" \" -f5\n19K\n70K\n```\n\n_Total ~ 73%_\n\nDecompression:\n\n```shell\n$
  time ./decompress decode.dat out.bin\n\nreal\t0m0.128s\nuser\t0m0.105s\nsys     0m0.023s\n```\n\n---\n\n###
  Conclusion\n\nAs you can see, this algorithm performs very badly, in general with
  random and large data.\n\nAlso my implementation is far from efficient, if you have
  any suggestion on how to improve my solution\nI'd be more than happy to hear it!\n\n##
  Contributing\n\nIf you'd like to contribute, please fork the repository and use
  a feature\nbranch. Pull requests are warmly welcome.\n\n## Links\n\n- Repository:
  https://github.com/bolt12/shannon-fano/\n- Issue tracker: https://github.com/bolt12/shannon-fano/issues\n\n##
  Licensing\n\nThe code in this project is licensed under GPL3 license.\n"
license-name: GPL-3
