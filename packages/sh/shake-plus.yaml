homepage: https://gitlab.com/shake-plus/shake-plus
changelog-type: markdown
hash: 374d0b252860f201861d066bd181345623db117fdef39c132fe02e13fbbcac28
test-bench-deps: {}
maintainer: dan.firth@homotopic.tech
synopsis: Re-export of Shake using well-typed paths and ReaderT.
changelog: "# Changelog for shake-plus\n\n## v0.3.0.0\n\n* Drop dependency on path-like.\n*
  Drop dependency on within.\n* Drop `Development.Shake.Plus.Loaders` module.\n* Restore
  monomorphic `Path` variants of everything.\n* Move `within` style combinators to
  [shake-plus-extended](https://hackage.haskell.org/package/shake-plus-extended).\n\n##
  v0.2.0.0\n\n* Add dependency on [path-like](https://hackage.haskell.org/package/path-like).\n*
  Update interface to use `FileLike` and `DirLike` and drop `Path` and `Within` specific
  variants.\n\n## v0.1.10.0\n\n* Add unlifted versions of `parallel`, `forP` and `par`.\n\n##
  v0.1.9.0\n\n* Add lower bound to aeson.\n* Remove hashable dependency.\n\n## v0.1.8.0\n\n*
  Reexport `Development.Shake.Classes` and `Development.Shake.RuleResult`.\n\n## v0.1.7.0\n\n*
  Add `runSimpleShakePlus` for quickrunning with args and a log function.\n\n## v0.1.6.0\n\n*
  Re-export `Path` and `Within`.\n\n## v0.1.5.0\n\n* Add `getDirectoryFilesWithinIO`
  and `getDirectoryFilesWithinIO'`\n\n## v0.1.4.0\n\n* Re-export `Development.Shake.shakeArgs`.\n\n##
  v0.1.3.0\n\n* Re-export `Development.Shake.Command` with lifted `command` and `command_`.\n\n##
  v0.1.2.0\n\n* Add `copyFileWithin'` and `copyFileChangedWithin`.\n\n## v0.1.1.0\n\n*
  Make `Within` style functions more consistent in that they actually take `Within`
  values\n  across the board.\n* Make `batchLoad` functions more consistent and usable.\n*
  `need` and `want` variants now take any `Traversable`.\n\n## v0.1.0.0\n\n* Update
  to `within-0.1.1.0` which changes the data type to an `Env` comonad.\n* Drop the
  `loadSortFilterApply` loader functions in favour of a simpler\n  `batchLoad` set
  of functions which accepts a loading function which can be\n  cached.\n* Add enough
  documentation to get started.\n\n## v0.0.2.1\n\n* Add functions based on [Within](https://hackage.haskell.org/package/path)
  to better\n  keep track of source and target directories.\n* Reexport more shake
  functions to remove need to import vanilla shake qualified.\n* Add convenience functions
  `loadSortFilterApply` and `loadSortFilterApplyW` for batch\n  loading via `MonadAction`.\n*
  Add more of the API surface with `Path` and `Within` including variants of `need`,
  `want`\n  `readFile`, `writeFile`. \n\n## v0.0.1.0\n\n* Initial sketch of shake-plus
  with reexported functions. Mostly oracles,\n  filepaths and directory functions
  using\n  [Path](https://hackage.haskell.org/package/path), and `MonadAction`,\n
  \ `MonadUnliftAction` and `MonadRules` with `ReaderT` transformers in a similar\n
  \ style to [RIO](https://hackage.haskell.org/package/rio)\n"
basic-deps:
  shake: -any
  rio: -any
  extra: -any
  path: -any
  base: '>=4.7 && <5'
  comonad: -any
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
- 0.1.8.0
- 0.1.9.0
- 0.1.10.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
author: Daniel Firth
latest: 0.3.0.0
description-type: markdown
description: |
  # Shake+ - Super Powered Shake

  Attempt at a batteries included Shake. We reexport replacements for the main
  utility functions of Shake with the following adjustments whereever possible.

  * Well-typed paths using the [path](https://hackage.haskell.org/package/path)
    library.
  * New type classes `MonadAction`, `MonadUnliftAction` and `MonadRules` with
    concrete `ReaderT` transformers:
    * `RAction r a = RAction (ReaderT r Action a)` and
    * `ShakePlus r a = ShakePlus (ReaderT r Rules a)`
  * `Text` instead of `String` wherever it is appropriate.

  ## Paths

  Using the [path](https://hackage.haskell.org/package/path) library is kind of a
  no brainer. I lose a lot of time to problems that could be avoided by using
  this library, so it's everywhere. The names for these functions shadow the
  existing names, so you may want to `import qualified Development.Shake` while
  this library progresses if you have other `FilePath` based Shake rules that
  you want to mix into your build.

  The standard `Development.Shake.FilePath` functions for directory manipulation
  are not re-exported in full, and you should use the functions in the path
  library (such as `replaceExtension`) and other path-based libraries. This will
  probably change.

  `FilePattern`s are kept as-is, as `Path` is strongly normalizing it makes
  sense to keep these as `Strings`.

  ## RAction

  The `ReaderT r Action a` transformer (called `RAction`) is similar to the
  [RIO](https://hackage.haskell.org/package/rio) type and should be used
  similarly. In fact, you can reuse the logging functions from `RIO` within any
  `RAction` block, which is one of the main motivators for having an `Action`
  which is also a `MonadReader`. If you need to reuse an existing shake
  `Action` in an `RAction`, use `liftAction`.

  ## runShakePlus

  The main entry point to this library is the `runShakePlus` function, which
  collapses a `ReaderT r Rules ()` to a `Rules ()` and passes the environment to
  each underlying `RAction`. The `r`s in `ShakePlus` and the underlying
  `RAction`s have to match. A typical setup might look like this.

  ```{.haskell}
  let r = --setup env here
  shake shakeOptions $ do

      -- include some regular shake rules.

      runShakePlus r $ do

        -- some shake-plus rules.
  ```
license-name: MIT
