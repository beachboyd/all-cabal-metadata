homepage: ''
changelog-type: markdown
hash: beb5a16aa49c95a65c694100a5a5d139d38084137a99c701ea2a5c2298fa0aed
test-bench-deps: {}
maintainer: dan.firth@homotopic.tech
synopsis: Re-export of Shake using well-typed paths and ReaderT.
changelog: "# Changelog for shake-plus\n\n## v0.0.2.1\n\n* Add functions based on
  [Within](https://hackage.haskell.org/package/path) to better\n  keep track of source
  and target directories.\n* Reexport more shake functions to remove need to import
  vanilla shake qualified.\n* Add convenience functions `loadSortFilterApply` and
  `loadSortFilterApplyW` for batch\n  loading via `MonadAction`.\n* Add more of the
  API surface with `Path` and `Within` including variants of `need`, `want`\n  `readFile`,
  `writeFile`. \n\n## v0.0.1.0\n\n* Initial sketch of shake-plus with reexported functions.
  Mostly oracles,\n  filepaths and directory functions using\n  [Path](https://hackage.haskell.org/package/path),
  and `MonadAction`,\n  `MonadUnliftAction` and `MonadRules` with `ReaderT` transformers
  in a similar\n  style to [RIO](https://hackage.haskell.org/package/rio)\n"
basic-deps:
  shake: -any
  rio: -any
  extra: -any
  path: -any
  base: '>=4.7 && <5'
  within: -any
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
- 0.0.2.1
author: Daniel Firth
latest: 0.0.2.1
description-type: markdown
description: |
  # Shake+ - Super Powered Shake

  Attempt at a batteries included Shake. We reexport replacements for the main
  utility functions of Shake with the following adjustments whereever possible.

  * Well-typed paths using the [path](https://hackage.haskell.org/package/path)
  * New type classes `MonadAction`,`MonadUnliftAction` and `MonadRules` with
    stock `ReaderT` transformers.
  * `Text` instead of `String` wherever it is appropriate.

  Unlifting `Action`s is a challenge when we cross monad boundaries (from
  `Action` to `Rules`), and so some functions are hard coded against the
  `RAction` type, which is a hardcoded newtype `ReaderT r Action a`. This is
  annoying, but it's sufficient to add your own logging and reader lenses.  It
  may be possible to generalize this with some unlifting contortion but so far I
  haven't been able to figure it out.

  The main entry point ot this library is the `runShakePlus` function, which
  collapses a `ReaderT r Rules ()` to a `Rules ()` and passes the environment to
  each underlying `RAction`.

  This is an early release and a lot of things may be missing or broken, but so
  far the conveniences have been worth it. Until it's stable/complete you probaly
  want to `import qualified Development.Shake` to deal with any missing parts.
license-name: MIT
