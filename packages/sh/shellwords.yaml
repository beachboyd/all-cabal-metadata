homepage: https://github.com/pbrisbin/hs-shellwords#readme
changelog-type: markdown
hash: fbcdec62b665eab3e30eadde91becbeacec735bb3780988eaae52f9b8c91b09b
test-bench-deps:
  base: ! '>=4.7 && <5'
  hspec: -any
  shellwords: -any
maintainer: pbrisbin@gmail.com
synopsis: Parse strings into words, like a shell would
changelog: |
  ## [*Unreleased*](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.2.2...master)

  None

  ## [v0.1.2.2](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.2.1...v0.1.2.2)

  - Require megaparsec-7.0.0 (LTS-13.6/GHC-8.6)

  ## [v0.1.2.1](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.2.0...v0.1.2.1)

  - Strip surrounding whitespace before parsing
  - Fix mis-handling of escaped spaces in certain kinds of flags

  ## [v0.1.2.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.1.0...v0.1.2.0)

  - `parse` works on `String` now, use `parseText` for the `Text` interface

  ## [v0.1.1.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.0.0...v0.1.1.0)

  - Bugfixes that I can't remember

  ## [v0.1.0.0](https://github.com/pbrisbin/hs-shellwords/tree/v0.1.0.0)

  First released version.
basic-deps:
  base: ! '>=4.7 && <5'
  text: -any
  megaparsec: ! '>=7.0.0'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
author: Patrick Brisbin
latest: 0.1.2.2
description-type: markdown
description: |
  # ShellWords

  Parse a string into words, like a shell would.

  ## Motivation

  If you need to execute commands given to you as user-input, you should know not
  to give that text as-is to a shell:

  ```haskell
  callProcess "sh" ["-c", "some --user --input"]
  ```

  Such code is a severe security vulnerability. Furthermore, any attempts to
  sanitize the string are unlikely to be 100% affective and should be avoided. The
  only safe way to do this is to not use a shell intermediary, and always `exec` a
  process directly:

  ```haskell
  callProcess "some" ["--user", "--input"]
  ```

  The new problem (and not a security-related one) is how to correctly parse a
  string like `"some --user --input"` into the command and its arguments. The
  rules are complex enough that you probably want to get a library to do it.

  So here we are.

  ## Example

  ```haskell
  Right (cmd:args) <- parse "some -complex --command=\"Line And\" 'More'"

  callProcess cmd args
  --
  -- Is equivalent to:
  --
  -- > callProcess "some" ["-complex", "--command=Line And", "More"]
  --
  ```

  ## Lineage

  This package is inspired by and named after

  - [`python-shellwords`][python-shellwords], which was itself inspired by
  - [`go-shellwords`][go-shellwords], which was itself inspired by
  - [`Parser::CommandLine`][parser-commandline]

  [python-shellwords]: https://github.com/mozillazg/python-shellwords
  [go-shellwords]: https://github.com/mattn/go-shellwords
  [parser-commandline]: https://github.com/Songmu/p5-Parse-CommandLine

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
