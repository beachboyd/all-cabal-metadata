homepage: https://github.com/fgaz/shine
changelog-type: markdown
hash: 578b89793a5a4baa64fa7cb7023903a19864922b71c4e7da5d6d92bca241174d
test-bench-deps:
  base: -any
  ghcjs-dom: -any
  shine: -any
maintainer: Francesco Gazzetta <francygazz@gmail.com>
synopsis: Declarative graphics for the browser using GHCJS
changelog: ! '# Revision history for shine


  ## 0.1.0.0  -- 2016-04-20


  * First version.


  ## 0.2.0.0  -- 2017-06-23


  * Changed WIndow to Document in some places

  * Use Double for everything

  * Use the new ghcjs-dom types


'
basic-deps:
  keycode: ! '>=0.2 && <0.3'
  base: ! '>=4.11 && <4.13'
  time: -any
  ghcjs-dom: ! '>=0.9 && <0.10'
  ghcjs-prim: -any
  mtl: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
author: Francesco Gazzetta
latest: 0.2.0.3
description-type: markdown
description: ! "# Shine - Declarative Graphics for the Web\n\n[![Build Status](https://travis-ci.org/fgaz/shine.svg?branch=master)](https://travis-ci.org/fgaz/shine)\n\nShine
  wraps javascript's drawing functions in a declarative API.\n\nHeavily inspired by
  [gloss](http://gloss.ouroborus.net/).\n\n**demo** (compiled tests) [here](http://fgaz.github.io/shine/tests)\n\n##
  Compiling\n\nYou need [ghcjs](https://github.com/ghcjs/ghcjs)\n\nA great way of
  building ghcjs packages is to use the\n[reflex platform](https://github.com/reflex-frp/reflex-platform)\n\n##
  Usage\n\n### `Picture`s\n\nTo represent your drawing you have to build a tree using
  the `Picture` datatype.\n\n```haskell\npic :: Picture\npic = Rect 10 20 -- represents
  a 10x20 square\n```\n\nTo compose multiple `Picture`s you can use `Over`, which
  accepts two `Picture`s\nand overlaps them.\n\n`Picture` is a monoid: `<>` is an
  alias for `Over` and `mempty` is the empty picture.\n\n```haskell\n-- draw some
  shapes on top of each other\npic :: Picture\npic = Rect 10 20\n   <> Translate 30
  30 (Circle 15)\n   <> Colored (Color 255 0 0 0.2) (RectF 4 4)\n   <> Text \"Sans
  12px\" LeftAlign 200 \"The quick brown fox jumps over the lazy dog.\"\n```\n\nUsing
  `Foldable` you can do things like\n\n```haskell\nconcentricCircles :: Picture\nconcentricCircles
  = foldMap Circle [1,10..100]\n```\n\n### Drawing `Picture`s\n\nBefore drawing anything
  you need to obtain a `CanvasRenderingContext2D` (and sometimes a `Document`).\nFor
  this purpose, shine provides two utility functions: `fullScreenCanvas` and `fixedSizeCanvas`\n\n```haskell\n{-#
  LANGUAGE CPP #-}\n\nimport Graphics.Shine\nimport Graphics.Shine.Input\nimport Graphics.Shine.Picture\n\nimport
  GHCJS.DOM (currentDocumentUnchecked)\n\n-- This is how the ghcjs-dom hello-world
  does it.\n-- It's boilerplate, so in the next shine version there\n-- will probably
  be a ready-to-use run function\n#if defined(ghcjs_HOST_OS)\nrun :: a -> a\nrun =
  id\n#elif defined(MIN_VERSION_jsaddle_wkwebview)\nimport Language.Javascript.JSaddle.WKWebView
  (run)\n#else\nimport Language.Javascript.JSaddle.WebKitGTK (run)\n#endif\n\nmain
  :: IO ()\nmain = run $ do\n    doc <- currentDocumentUnchecked -- use currentDocument
  to handle failure\n    ctx <- fixedSizeCanvas doc 400 400\n    -- do something with
  ctx (and maybe doc)\n```\n\nTo render a `Picture` on a context you have three options:\n\n####
  `render`\n\nYou can draw it manually using `render` from `Graphics.Shine.Render`\n\n```haskell\nmain
  :: IO ()\n    {- get the context, see before -}\n    draw ctx concentricCircles\n```\n\n####
  `animate`\n\nYou can draw a `Picture` that depends on time. That is, a `Float ->
  Picture`.\n\n```haskell\n-- An expanding-and-contracting circle.\nanimation :: Float
  -> Picture\nanimation = Translate 200 200\n          . Circle\n          . (*100)
  . (+1) -- bigger positive oscillation\n          . sin -- the circle's radius oscillates\n\nmain
  :: IO ()\nmain =  do\n    {- get the context, see before -}\n    animate ctx 30
  animation\n```\n\n#### `play`\n\nFinally, you can draw a `Picture` that depends
  on time, inputs\n(keyboard and mouse) and an internal state. This is especially
  useful for games,\nhence the name.\n\n```haskell\n-- this code draws a black rectangle
  in the center of the canvas only when the\n-- left mouse button is pressed\nmain
  :: IO ()\nmain = do\n    {- get the context and the document, see before -}\n    play
  ctx doc 30 initialState draw handleInput step\n  where\n    -- our state represents
  the state of the left mouse button\n    initialState = Up\n    -- we draw a square
  only if the button is pressed\n    draw Up = Empty\n    draw Down = Translate 200
  200 $ RectF 200 200\n    -- when an event is fired we store the button state\n    handleInput
  (MouseBtn BtnLeft buttonState _) = const buttonState\n    handleInput _ = id --
  catch-all for all other events\n    step _ = id -- our state does not depend on
  time\n```\n\n"
license-name: MIT
