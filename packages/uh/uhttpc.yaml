homepage: https://github.com/hvr/uhttpc
changelog-type: markdown
hash: c2d357633f103562c38a8ae07eb178183e9ba7baa7a985c2f6caaa354f65993c
test-bench-deps: {}
maintainer: hvr@gnu.org
synopsis: Minimal HTTP client library optimized for benchmarking
changelog: ! '## 0.1.1.0


  - `uhttpc-bench`: Add support for round-robin POST requests from file

  - `uhttpc-bench`: Converted to `optparse-applicative`

  - Fix `ssUnread` being incorrect when push-back buffer is non-empty

  - Minor optimization reducing `IORef` contention


  ## 0.1.0.0


  - Initial release

'
basic-deps:
  bytestring: ==0.10.*
  base: ! '>=4.6 && <4.13'
  network: ==2.6.* || ==2.8.*
  async: ==2.0.* || ==2.1.* || ==2.2.*
  network-uri: ==2.6.*
  optparse-applicative: ==0.11.* || ==0.12.* || ==0.13.* || ==0.14.*
  deepseq: ! '>=1.1 && <1.5'
  bytestring-lexing: ! '>=0.4 && <0.6'
  uhttpc: -any
all-versions:
- '0.1.0.0'
- '0.1.1.0'
author: Herbert Valerio Riedel
latest: '0.1.1.0'
description-type: markdown
description: ! "# `uhttpc` - ÂµHTTP client library\n\n`uhttpc` is a simple low-level
  and lightweight Haskell HTTP 1.1\nlibrary providing the bare minimum required for
  HTTP benchmarking\npurposes.\n\nThis is **not** a RFC compliant HTTP client library
  and **shall not**\nbe used as a general purpose HTTP implementation!\n\n# `uhttpc-bench`\n\nThis
  Cabal package comes with an executable `uhttpc-bench` which\nrepresents an `ab`/`weighttpd`-style
  HTTP benchmarking tool:\n\n    uhttpc-bench - a Haskell-based ab/weighttp-style
  webserver benchmarking tool\n\n    Simple HTTP benchmark tool similiar to ab and
  weighttp\n\n    uttpc-bench [OPTIONS] <url>\n\n    Common flags:\n      -n=num                     number
  of requests    (default: 1)\n      -t=num                     threadcount           (default:
  1)\n      -c=num                     concurrent clients    (default: 1)\n      -k
  \                        enable keep alive\n              --csv=FILE         dump
  request timings as CSV (RFC4180) file\n              --user-agent=ITEM  specify
  User-Agent    (default: \"httpc-bench\")\n      -H=str                     add header
  to request\n      -v      --verbose          enable more verbose statistics and
  output\n              --no-stats         disable statistics\n      -p=FILE                    perform
  POST request with file-content as body\n      -l=FILE                    perform
  a POST request per line, no quoting,\n                                 round-robin,
  each client independently\n      -?      --help             Display help message\n
  \     -V      --version          Print version information\n\n# How to use it\n\nFirst,
  install the `uhttpc` package\n(This requires GHC 7.6.x or later)\n\n    $ cabal
  install uhttpc\n\nA simple example invocation:\n\n    $ uhttpc-bench -n 100000 -t1
  -c3 -k http://localhost/\n\n    uhttpc-bench - a Haskell-based ab/weighttp-style
  webserver benchmarking tool\n\n    starting benchmark...\n    finished in 2.314289
  seconds, 100000 reqs (3 conns), 43209.8 req/s received\n    status codes: 100000
  HTTP-200\n    data received: 36205.098 KiB/s, 85800000 bytes total (24600000 bytes
  http + 61200000 bytes content)\n    rtt min/avg/max = 0.034/0.068/4.252 ms\n\nFor
  comparison, [`weighttp`](https://github.com/lighttpd/weighttp) can be invoked with
  the very same arguments (in this case at least):\n\n    $ weighttp  -n 100000 -t1
  -c3 -k http://localhost/\n\n    weighttp - a lightweight and simple webserver benchmarking
  tool\n\n    starting benchmark...\n    spawning thread #1: 3 concurrent requests,
  100000 total requests\n\n    finished in 2 sec, 333 millisec and 421 microsec, 42855
  req/s, 35908 kbyte/s\n    requests: 100000 total, 100000 started, 100000 done, 100000
  succeeded, 0 failed, 0 errored\n    status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx\n
  \   traffic: 85800000 bytes total, 24600000 bytes http, 61200000 bytes data\n\nAnother
  example invocation of `uhttpc-bench`:\n\n    $ uhttpc-bench http://www.google.com/
  -v -c8 -n1000\n\n    uhttpc-bench - a Haskell-based ab/weighttp-style webserver
  benchmarking tool\n\n    using 88-byte request header (+ 0-byte body):\n     \"GET
  / HTTP/1.1\\r\\nHost: www.google.com:80\\r\\nUser-Agent: uhttpc-bench\\r\\nConnection:
  close\\r\\n\\r\\n\"\n\n    starting benchmark...\n\n    per-client stats:\n\n     client
  spawned +0.000008 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.369619 s\n
  \    rtt min/avg/med/max = 99.586/122.902/122.109/167.193 ms\n\n     client spawned
  +0.000258 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.383278 s\n     rtt
  min/avg/med/max = 100.494/123.012/121.648/184.555 ms\n\n     client spawned +0.000292
  s, 125 reqs (125 conns), 8.1 req/s, finished in 15.365843 s\n     rtt min/avg/med/max
  = 98.721/122.872/121.668/163.810 ms\n\n     client spawned +0.000327 s, 124 reqs
  (124 conns), 8.1 req/s, finished in 15.346788 s\n     rtt min/avg/med/max = 103.008/123.709/122.834/174.003
  ms\n\n     client spawned +0.000366 s, 126 reqs (126 conns), 8.2 req/s, finished
  in 15.367205 s\n     rtt min/avg/med/max = 95.255/121.907/120.736/152.943 ms\n\n
  \    client spawned +0.000403 s, 124 reqs (124 conns), 8.1 req/s, finished in 15.357957
  s\n     rtt min/avg/med/max = 97.730/123.800/123.569/162.326 ms\n\n     client spawned
  +0.000434 s, 125 reqs (125 conns), 8.1 req/s, finished in 15.388717 s\n     rtt
  min/avg/med/max = 103.056/123.055/121.961/162.419 ms\n\n     client spawned +0.000461
  s, 126 reqs (126 conns), 8.2 req/s, finished in 15.394365 s\n     rtt min/avg/med/max
  = 102.114/122.123/121.289/151.520 ms\n\n    finished in 15.394867 seconds, 1000
  reqs (1000 conns), 65.0 req/s received\n    status codes: 1000 HTTP-302\n    data
  received: 63.498 KiB/s, 1001000 bytes total (783000 bytes http + 218000 bytes content)\n
  \   rtt 2/9|25/50/75|91/98-th quantile = 103.737/108.696 | 115.124/121.688/129.944
  | 137.715/148.159 ms\n    rtt min/avg/max = 95.255/122.919/184.555 ms\n\n\nThe `--csv`
  option allows to export the raw measurement data in format\nsuitable for offline
  analysis with statistical tools such as [`R`](http://www.r-project.org).\n"
license-name: GPL-3
