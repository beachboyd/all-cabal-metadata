homepage: https://github.com/vmchale/atspkg#readme
changelog-type: ''
hash: 3def388486b26d49888bd1f1e0479f535ecd5eea62e2c5cc12f4486ee75dbf3b
test-bench-deps: {}
maintainer: vamchale@gmail.com
synopsis: Package manager for ATS
changelog: ''
basic-deps:
  http-client: -any
  shake: -any
  ats-pkg: -any
  bytestring: -any
  ansi-wl-pprint: -any
  composition-prelude: ! '>=1.1.0.2'
  unix: -any
  filemanip: -any
  base: ! '>=4.7 && <5'
  dhall: -any
  text: -any
  shake-ext: ! '>=2.3.0.0'
  process: -any
  lens: -any
  tar: -any
  binary: -any
  shake-ats: ! '>=1.3.0.0'
  http-client-tls: -any
  zlib: -any
  parallel-io: -any
  temporary: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.1'
- '0.3.0.2'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.2.0.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.0.3'
- '1.2.0.4'
- '1.2.0.5'
- '1.2.0.6'
- '1.2.0.7'
- '1.2.0.8'
- '1.2.1.0'
- '1.2.1.3'
- '1.3.0.0'
- '1.4.0.0'
- '1.4.0.1'
- '1.4.0.3'
- '1.4.0.6'
- '2.0.0.2'
- '2.0.0.4'
- '2.0.0.6'
- '2.0.0.7'
- '2.0.0.8'
- '2.0.0.9'
- '2.0.0.10'
- '2.0.0.11'
- '2.0.0.12'
- '2.0.0.13'
- '2.1.0.0'
- '2.1.0.3'
- '2.1.0.5'
- '2.1.0.6'
- '2.1.0.7'
- '2.1.0.8'
- '2.1.0.9'
- '2.1.0.10'
- '2.2.0.0'
- '2.2.0.1'
- '2.2.0.2'
- '2.2.0.5'
- '2.2.0.6'
- '2.2.0.7'
- '2.2.0.8'
author: Vanessa McHale
latest: '2.2.0.8'
description-type: markdown
description: ! "# ats-pkg\n\n[![Build Status](https://travis-ci.org/vmchale/atspkg.svg?branch=master)](https://travis-ci.org/vmchale/atspkg)\n\nThis
  is a build system for ATS written in Haskell and configured with Dhall. It\nis not
  yet stable.\n\n## Installation\n\nThe easiest way to install is via a script, viz.\n\n```bash\ncurl
  -sSl https://raw.githubusercontent.com/vmchale/atspkg/master/bash/install.sh | bash
  -s\n```\n\nAlternately, you can download\n[Cabal](https://www.haskell.org/cabal/download.html)
  and\n[GHC](https://www.haskell.org/ghc/download.html) and install with\n\n```bash\ncabal
  new-install ats-pkg ~/.local/bin --happy-options='-gcsa' --alex-options='-g'\n```\n\nNote
  that `$HOME/.local/bin` will need to be on your `PATH`.\n\n## Examples\n\n`atspkg`
  is configured with\n[Dhall](https://hackage.haskell.org/package/dhall/docs/Dhall-Tutorial.html).
  You\nmay wish to read the Dhall tutorial first, but you do not need to fully\nunderstand
  everything to get started.\n\n### Project Templates\n\nYou can use [pi](https://github.com/vmchale/project-init)
  with the builtin `ats`\ntemplate as follows:\n\n```\npi new ats cool-project\n```\n\nYou
  can then build with `atspkg build` or install with `atspkg install`.\n\nAlternately,
  you can start with a templated Haskell library calling ATS code:\n\n```\npi git
  vmchale/haskell-ats ambitious-project\n```\n\nwhich can be built with `atspkg build`
  followed by `cabal new-build`.\n\n### Building a Binary Package\n\nThe minimal configuration
  for a package with a binary target is as follows:\n\n```dhall\nlet pkg = https://raw.githubusercontent.com/vmchale/atspkg/master/pkgs/default.dhall\nin\nlet
  dbin = https://raw.githubusercontent.com/vmchale/atspkg/master/pkgs/default-bin.dhall\n\nin
  pkg //\n  { bin =\n    [ dbin //\n      { src = \"src/program.dats\"\n      , target
  = \"target/program\"\n      }\n    ]\n  }\n```\n\nYou need only specify the source
  file and the target; `atspkg` will parse your\nATS source files and track them (it
  will not track included C).\n\n### Building a Haskell Library\n\nYou can see an
  example [here](https://github.com/vmchale/fast-arithmetic). You\ncan configure the
  ATS side of things as follows:\n\n```\nlet pkg = https://raw.githubusercontent.com/vmchale/atspkg/master/pkgs/default.dhall\n\nin
  pkg //\n  { atsSource = [ \"ats-src/ambitious-project.dats\" ] }\n```\n\nThis just
  tells `atspkg` to look for a source file called\n`ats-src/ambitious-project.dats`,
  which will be compiled to\n`ambitious-project.c` in the default directory (i.e.
  `cbits`). You can then\ncall the generated code just as you would call C.\n\nYou
  may want to consider\n[ats-setup](http://hackage.haskell.org/package/ats-setup)
  as well if you are\npackaging the Haskell for distribution.\n\n### Calling Haskell
  from ATS\n\nYou can see a demo [here](https://github.com/vmchale/fast-arithmetic).\nCurrently,
  there is not generic `Storable` instance that works with ATS, so the\nprocess is
  a bit more involved than is ideal. `atspkg` has abilities similar to\n[hs2ats](http://hackage.haskell.org/package/hs2ats),
  which means that you can\nusually generate ATS types based on the Haskell types.\n\nThe
  following is a minimal example of a configuration file:\n\n```dhall\nlet pkg = https://raw.githubusercontent.com/vmchale/atspkg/master/pkgs/default.dhall\nin\nlet
  dbin = https://raw.githubusercontent.com/vmchale/atspkg/master/pkgs/default-bin.dhall\n\nin
  pkg //\n  { bin =\n    [\n      dbin //\n      { src = \"src/project.dats\"\n      ,
  target = \"target/project\"\n      , hsDeps = [ { cabalFile = \"hs/foreign.cabal\",
  objectFile = \"hs/Foreign.o\" } ]\n      , hs2ats = [ { hs = \"hs/Foreign.hs\",
  ats = \".atspkg/hs2ats/gen.sats\" } ]\n      }\n    ]\n    , ccompiler = \"ghc-8.2.2\"\n
  \   , cflags = [\"-package-db\", \"hs/dist-newstyle/packagedb/ghc-8.2.2/\", \"-optc-O2\",
  \"-optc-flto\", \"-optc-mtune=native\", \"hs/Foreign\"]\n  }\n```\n"
license-name: BSD3
