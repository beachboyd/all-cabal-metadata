homepage: https://github.com/vmchale/atspkg#readme
changelog-type: ''
hash: 6c7c949bc8ba7ef02feb5cf5455beababa9dc8952dd657c67e570d352d56cdef
test-bench-deps: {}
maintainer: vamchale@gmail.com
synopsis: A build tool for ATS
changelog: ''
basic-deps:
  http-client: -any
  shake: -any
  zip-archive: -any
  ats-pkg: -any
  bytestring: -any
  bzlib: -any
  ansi-wl-pprint: -any
  composition-prelude: ! '>=1.1.0.2'
  unix: -any
  base: ! '>=4.7 && <5'
  dhall: -any
  text: -any
  shake-ext: ! '>=2.3.0.0'
  process: -any
  containers: -any
  ats-setup: -any
  lens: -any
  tar: -any
  binary: -any
  dependency: -any
  shake-ats: ! '>=1.3.0.0'
  lzma: -any
  http-client-tls: -any
  zlib: -any
  parallel-io: -any
  file-embed: -any
  temporary: -any
  optparse-applicative: -any
  directory: -any
all-versions:
- '0.1.0.0'
- '0.2.0.0'
- '0.2.0.1'
- '0.3.0.1'
- '0.3.0.2'
- '1.0.0.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.2.0.0'
- '1.2.0.1'
- '1.2.0.2'
- '1.2.0.3'
- '1.2.0.4'
- '1.2.0.5'
- '1.2.0.6'
- '1.2.0.7'
- '1.2.0.8'
- '1.2.1.0'
- '1.2.1.3'
- '1.3.0.0'
- '1.4.0.0'
- '1.4.0.1'
- '1.4.0.3'
- '1.4.0.6'
- '2.0.0.2'
- '2.0.0.4'
- '2.0.0.6'
- '2.0.0.7'
- '2.0.0.8'
- '2.0.0.9'
- '2.0.0.10'
- '2.0.0.11'
- '2.0.0.12'
- '2.0.0.13'
- '2.1.0.0'
- '2.1.0.3'
- '2.1.0.5'
- '2.1.0.6'
- '2.1.0.7'
- '2.1.0.8'
- '2.1.0.9'
- '2.1.0.10'
- '2.2.0.0'
- '2.2.0.1'
- '2.2.0.2'
- '2.2.0.5'
- '2.2.0.6'
- '2.2.0.7'
- '2.2.0.8'
- '2.2.0.11'
- '2.2.0.15'
- '2.2.0.16'
- '2.2.0.17'
- '2.2.0.18'
- '2.2.1.0'
- '2.2.1.1'
- '2.3.0.0'
- '2.3.0.3'
- '2.3.0.6'
- '2.4.0.0'
- '2.4.0.3'
- '2.4.0.6'
- '2.4.1.0'
- '2.4.1.6'
- '2.4.2.0'
- '2.4.2.7'
- '2.4.2.8'
author: Vanessa McHale
latest: '2.4.2.8'
description-type: markdown
description: ! "# ATSPackage\n\n[![Build Status](https://travis-ci.org/vmchale/atspkg.svg?branch=master)](https://travis-ci.org/vmchale/atspkg)\n\nThis
  is a build system for ATS written in Haskell and configured with Dhall. It\nis not
  fully working, but the configuration format is now stable.\n\n## Features & Non-Features\n\nThings
  that `atspkg` will do for you:\n\n  * Dramatically simplify CI for ATS projects\n
  \ * Simplify distribution of your project\n  * Enable Haskell builds that depend
  on ATS code\n  * Enable ATS builds that depend on Haskell code\n  * Ensure reproducible
  builds via pinned compiler versions\n  * Track all file dependencies\n  * Make contributing
  to your projects easier\n  * Run builds in parallel (like `make`)\n  * Handle flags
  and libraries for garbage collection when specified\n  * Install `patscc` and other
  ATS tooling\n\nThings that `atspkg` will not do for you:\n\n  * Dependency resolution
  (this is planned)\n  * Give you the full flexibility of the C/ATS ecosystem\n  *
  Integrate with other ecosystems\n  * Provide a centralized package repository\n
  \ * Offer a common architecture for package builds\n  * Cache builds locally (like
  `nix` or `cabal`)\n  * Cache binary builds of ATS libraries (this is planned)\n\n###
  Example\n\nAs an example, the following two lines will install `polyglot`:\n\n```bash\ncurl
  -sSl https://raw.githubusercontent.com/vmchale/atspkg/master/bash/install.sh | bash
  -s\natspkg remote https://github.com/vmchale/polyglot/archive/master.zip\n```\n\nAs
  you can see, this greatly simplifies distribution and testing of programs\nwritten
  in ATS.\n\n## Installation\n\n### Script\n\nThe easiest way to install is via a
  script, viz.\n\n```bash\ncurl -sSl https://raw.githubusercontent.com/vmchale/atspkg/master/bash/install.sh
  | bash -s\n```\n\nThereafter, you can run\n\n```bash\natspkg upgrade\n```\n\nto
  upgrade to the latest release.\n\n### Source\n\nAlternately, you can download\n[Cabal](https://www.haskell.org/cabal/download.html)
  and\n[GHC](https://www.haskell.org/ghc/download.html) and install with\n\n```bash\ncabal
  new-install ats-pkg --symlink-bindir ~/.local/bin --happy-options='-gcsa' --alex-options='-g'\n```\n\nNote
  that `$HOME/.local/bin` will need to be on your `PATH`.\n\n## Examples\n\n### Quick
  Start\n\nInstall [pi](http://github.com/vmchale/project-init) with\n\n```\ncurl
  -LSfs https://japaric.github.io/trust/install.sh | sh -s -- --git vmchale/project-init\n```\n\nInitialize
  an ATS project with\n\n```\npi new ats project\n```\n\nThen build & run it:\n\n```\ncd
  project\natspkg run\n```\n\n### Further Documentation\n\nYou can find several examples
  with explanation\n[here](https://github.com/vmchale/atspkg/blob/master/EXAMPLES.md)\n\n##
  Global Configuration\n\n`atspkg` is configured via a file in `~/.config/atspkg/config.dhall`.
  You can\nset custom package set as follows:\n\n```\nlet cfg = \n  { defaultPkgs
  = \"https://raw.githubusercontent.com/vmchale/atspkg/master/dhall/pkg-set.dhall\"\n
  \ , path = ([] : Optional Text)\n  }\n\nin cfg\n```\n\nPackage sets are simply sets
  of packages, so you can also use Dhall to\nconcatenate custom package sets with
  the above.\n"
license-name: BSD3
