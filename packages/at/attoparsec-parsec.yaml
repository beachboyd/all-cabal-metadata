homepage: ''
changelog-type: ''
hash: e0b3459895b8a5a43241540ca2dc727d44f38633b72379424be89b9b69fb4461
test-bench-deps:
  base: -any
  hspec: ! '>=1.5'
  text: -any
  markdown-unlit: -any
  attoparsec-parsec: -any
  attoparsec: -any
  QuickCheck: -any
maintainer: Simon Hengel <sol@typeful.net>
synopsis: An Attoparsec compatibility layer for Parsec
changelog: ''
basic-deps:
  base: ==4.*
  text: -any
  parsec: ! '>=3.1.2'
  attoparsec: ! '>=0.10.0.0'
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.1.1
- 0.1.2
- 0.1.3
author: Simon Hengel <sol@typeful.net>
latest: 0.1.3
description-type: text
description: ! "# An Attoparsec compatibility layer for Parsec\n\n`attoparsec-parsec`
  allows you to write parsers that can be compiled against\nboth [Attoparsec](http://hackage.haskell.org/package/attoparsec)
  and\n[Parsec](http://hackage.haskell.org/package/parsec).\n\nExample:\n\n~~~ {.haskell}\n{-#
  LANGUAGE CPP #-}\nimport           Prelude hiding (takeWhile)\nimport           Data.Text
  \     (Text)\nimport qualified Data.Text    as Text\nimport qualified Data.Text.IO
  as Text\n\n#ifdef USE_ATTOPARSEC\nimport           Data.Attoparsec.Text\n#else\nimport
  \          Data.Attoparsec.Text.Parsec\n#endif\n\nmain :: IO ()\nmain = Text.interact
  (either error id . parseOnly removeDashes)\n\nremoveDashes :: Parser Text\nremoveDashes
  = Text.concat `fmap` sepBy text dash\n  where\n    text = takeWhile  (/= '-')\n
  \   dash = takeWhile1 (== '-')\n~~~\n"
license-name: MIT
