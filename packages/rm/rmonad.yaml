homepage: ''
changelog-type: ''
hash: c91ddfffef7f6da59645460c844627ac5f4004f40fbeb5d90b60e14fc0de7ffc
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: -any
  rmonad: -any
  HUnit: -any
  containers: -any
maintainer: Ganesh Sittampalam <ganesh@earth.li>
synopsis: Restricted monad library
changelog: ''
basic-deps:
  base: <5
  containers: -any
  transformers: -any
  suitable: ! '>=0.1 && <0.2'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- 0.8.0.1
- 0.8.0.2
author: ''
latest: 0.8.0.2
description-type: text
description: ! "\nrmonad provides a restricted monad class in the Control.RMonad hierarchy.\nThe
  class makes use of associated datatypes (available in GHC 6.8),\nusing an idea learnt
  from Wolfgang Jeltsch:\nhttp://www.haskell.org/pipermail/haskell-cafe/2008-March/041084.html\n\nIt
  also provides a way to treat a restricted monad as a normal monad\nusing a generic
  wrapper type. This idea is described here:\nhttp://hsenag.livejournal.com/11803.html?nc=5\n\nSee
  the haddock documentation for information on how to use it.\n\ndarcs get http://code.haskell.org/rmonad\n\nTODO\n\nAdd
  instances for all the mtl stuff. Consider also doing this for mtl-tf\n(namespacing
  issues?)\n\nAdd all the normal monad combinators\n\nShould we use Monad etc rather
  than RMonad etc for naming?\n - Pro: standard modern namespacing conventions\n -
  Anti: Module names need to be different to allow co-existence\n\nDo we actually
  want RApplicative etc? Nasty because most restrictions aren't much use on function
  types\nDSELs are a good example of where Suitable could be closed over function
  types\n"
license-name: BSD-3-Clause
