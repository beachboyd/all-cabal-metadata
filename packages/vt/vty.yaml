homepage: https://github.com/jtdaugherty/vty
changelog-type: markdown
hash: 2f3a25c6af3ed91cb9cc4a05d4504e3b0d48727e541fe12ca1d58753e88df8dc
test-bench-deps:
  test-framework-hunit: -any
  quickcheck-assertions: ! '>=0.1.1'
  bytestring: -any
  test-framework: ==0.8.*
  unix: -any
  stm: -any
  Cabal: ! '>=1.20'
  base: ! '>=4.8 && <5'
  text: ! '>=0.11.3'
  string-qq: -any
  vty: -any
  HUnit: -any
  smallcheck: ==1.*
  containers: -any
  blaze-builder: ! '>=0.3.3.2 && <0.5'
  utf8-string: ! '>=0.3 && <1.1'
  mtl: ! '>=1.1.1.0 && <2.3'
  terminfo: ! '>=0.3 && <0.5'
  random: ! '>=1.0 && <1.2'
  deepseq: ! '>=1.1 && <1.5'
  QuickCheck: ! '>=2.7'
  test-framework-smallcheck: ==0.2.*
  microlens-mtl: -any
  microlens: -any
  vector: ! '>=0.7'
maintainer: Jonathan Daugherty (cygnus@foobox.com)
synopsis: A simple terminal UI library
changelog: ! "5.23.1\n  - Fixed a bug where italics did not combine properly with
  other\n    display modes (#155, thanks Eric Mertens)\n\n5.23\n  - Added support
  for italicized output when terminfo supports it. This\n    takes the form of a new
  Style, \"italic\". Note that most terminfo\n    descriptors do not report capabilities
  for italics, so support for\n    this will be very spotty.\n  - Updateed text/string
  function documentation to indicate that escapes\n    are not permitted in their
  inputs.\n\n5.22\n - Added Graphics.Vty.Attributes.Color240.color240CodeToRGB function\n
  \  (thanks Brent Carmer)\n - Added nextEventNonblocking function (field) to Vty
  type (#87)\n\n5.21\n - Picture and Background now provide Eq instances (thanks Jaro
  Reinders)\n - #145: vty builds with microlens 0.4.9 (thanks Daniel Wagner)\n - #142:
  note requirement of threaded RTS\n\n5.20\nAPI changes:\n - Split up Monoid instances
  into Monoid and Semigroup for newer GHCs\n   (thanks Ryan Scott)\n\n5.19.1\nAPI
  changes:\n * Cursor now provides an Eq instance (thanks Jaro Reinders)\n\n5.19\nAPI
  changes:\n - URL hyperlinking (via 'withURL') is now optional and disabled by\n
  \  default due to poor support on some common terminals. A new 'Mode'\n   constructor,
  'Hyperlink', has been added to enable this feature. To\n   change the hyperlinking
  mode, use 'setMode' on the 'outputIface' of a\n   Vty handle.\n\n5.18.1\nBug fixes:\n
  - Reset the hyperlink state on line endings to avoid run-on hyperlinks\n\n5.18\nAPI
  changes:\n - Added support for hyperlinking attributes (thanks Getty Ritter). This\n
  \  change adds a new Attr field for containing the hyperlink to apply,\n   as per
  https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n\n5.17.1\n -
  withStyle now ignores zero arguments, leaving attribute styles\n   untouched if
  the input style is the null style\n\n5.17\nAPI changes:\n - Add support for terminal
  focus events. This change adds a new mode\n   usable with setMode, Focus, that requests
  that the terminal send\n   events on focus lose/gain. This change also adds two
  new Event\n   constructors, EvLostFocus and EvGainedFocus.\n - No longer enable
  UTF8 mouse event encoding. This encoding was not\n   working properly with Terminal.app,
  and using the other modes (SGR,\n   etc.) work.\n - Graphics.Vty.Attributes: escape
  backticks in Haddock comment (fixes\n   #131)\n\n5.16\nAPI changes:\n  - Added support
  for mouse wheel events while in mouse mode. The Button\n    type got two new constructors
  as a result: BScrollUp and BScrollDown.\n    Thanks to doublescale@tutanota.com
  for this contribution!\n\nBug fixes:\n  - charFill now clamps negative arguments
  to zero (thanks Eric\n    Mertens!)\n\n5.15.1\nPackage changes:\n  - Documentation
  files are now marked accordingly (thanks Michal\n    SuchÃ¡nek)\n\nBug fixes:\n  -
  translateX/Y: fix negative translations\n\n5.15\nPackage changes:\n  - Discontinued
  support for GHC versions prior to 7.10.1.\n  - Removed instructions and configuration
  for Stack builds since they\n    are no longer supported.\n  - Clarified README
  mention of (lack of) Windows support (contributors\n    wanted, though!)\n  - Removed
  dependency on data-default (see below).\n\nAPI changes:\n  - Moved color definitions
  from Attributes to Color module.\n  - In lieu of data-default (Default) instances
  for Attr and Config, use\n    'defAttr' and the new 'defaultConfig' (or 'mempty')
  instead of 'def'.\n  - Graphics.Vty.Output no longer re-exports\n    Graphics.Vty.Output.Interface.\n
  \ - Removed Graphics.Vty.Prelude module and moved DisplayRegion and its\n    accessors
  to Graphics.Vty.Image.\n  - Graphics.Vty.Image no longer re-exports Graphics.Vty.Attributes.\n
  \ - Graphics.Vty.Picture no longer re-exports Graphics.Vty.Image.\n\n5.14\n  - addMaybeClippedJoin:
  instead of raising an exception when the join\n    is totally clipped, just reduce
  the clip amount and continue\n  - addMaybeClipped: skip blit of joins when their
  primary dimension is\n    zero\n  - 'string' and related text functions no longer
  treat an empty string\n    as an empty image (thanks Chris Penner). This means that
  now it is\n    possible to use 'str \"\"' as a non-empty image with height 1.\n\n5.13\n
  \ - Reverted changes in 5.12 due to disagreements between terminal\n    emulators
  and utf8proc; for more details, please see the ticket\n    discussion at\n    https://github.com/coreyoconnor/vty/issues/115\n\n5.12\n
  \ - Replaced 'wcwidth' with a call to the utf8proc library's character\n    width
  function, which is much more up to date (by several Unicode\n    versions) and returns
  the right width for a much larger set of\n    characters.\n  - Added a bundled version
  of the utf8proc C library.\n\n5.11.3\n  - Fix mouse event offsets in mouse-up events\n\n5.11.2\n
  \ - Mouse events were modified so that the upper-left corner of the\n    window
  is (0,0) rather than (1,1).\n\n5.11.1\n  - Add Generic instance for Image\n  - nextEvent:
  stop trying to refresh on a resize event (fixes segfault\n    on refresh with normal
  cursor positioning mode)\n  - Remove redundant clause from clipForCharWidth (thanks
  Eric Mertens)\n  - Update maintainer\n\n5.11\n  - Vty now raises a VtyConfigurationError
  exception when the TERM\n    evironment variable is missing (thanks Eric Mertens)\n
  \ - Graphics.Vty.Config got an explicit export list to avoid accidentally\n    exporting
  internal types (thanks Eric Mertens)\n\n5.10\n  - Add absolute cursor positioning
  mode AbsoluteCursor to Cursor. This\n    mode provides greater control over cursor
  positioning by bypassing\n    the logical positioning provided by default. Rather
  than positioning\n    the cursor by looking at the widths of characters involved,
  this\n    constructor lets you provide a physical row and column instead. This\n
  \   is useful in more sophisticated programs. (thanks Eric Mertens)\n  - Added a
  new Generic-derived config parser (thanks Eric Mertens)\n  - Fixed the MShift case
  in the configuration file parser (thanks Eric\n    Mertens)\n  - Fixed wcwidth import
  and matched safeWcswidth to its documented\n    behavior. Previously vty_mk_wcwidth
  was being imported with\n    the wrong type causing the -1 return value to be mapped
  to the\n    wrong Int value. Additionally safeWcswidth was using the unsafe\n    character
  width function and only ensuring that the final result was\n    non-negative. (thanks
  Eric Mertens)\n\n5.9.1\n  - Vty now only emits UTF8 charset sequences in terminals
  without a\n    preexisting UTF8 declaration to avoid emitting garbage sequences\n
  \   (fixes #89)\n\n5.9\n  - Added new Output methods supportsBell and ringTerminalBell
  to find\n    out whether the output device has an audio bell and to ring it (see\n
  \   #102)\n\n5.8.1\n  - Fixed \"refresh\" to work as advertised (see #104)\n\n5.8\n
  \ - API change: EvPaste input event now provides paste data as a raw\n    ByteString
  rather than a String to allow the application to decode\n    how best to decode
  it\n\n5.7.1\n  - ModeDemo: added an explicit Control.Applicative import for older\n
  \   GHCs\n\n5.7\n  - Mouse and paste modes are now off by default.\n  - The Config
  type got new fields: mouseMode and bracketedPasteMode.\n    These determine whether
  these modes are enabled initially (for\n    terminals that support them).\n  - Added
  a Mode type for modal terminal features (mouse events,\n    bracketed paste mode)
  that is used with new Output interface\n    functions:\n    * supportsMode :: Mode
  -> Bool tells whether the device supports a\n      mode\n    * setMode :: Mode ->
  Bool -> IO () turns a mode on or off\n    * getModeStatus :: Mode -> IO Bool tells
  you whether a mode is on or\n      off\n  - Added a new demo program, ModeDemo.hs,
  to demonstrate usage of modes\n\n5.6\n  - Added support for normal and extended
  mouse modes in Xterm-like\n    terminals via the MouseDown and MouseUp Event constructors\n
  \ - Added support for bracketed paste mode in Xterm-like terminals via\n    the
  EvPaste event constructor\n  - Added derived Show instances for Event and Button
  (thanks Felix\n    Hirn)\n  - Now TERM values containing \"screen\" will automatically
  use the\n    XtermColor driver rather than just TerminfoBased\n\n5.5.0\n  - Replaced
  lens dependency with microlens, microlens-mtl, microlens-th\n    dependencies. Issue
  #90\n    - Thanks Jonathan Daugherty\n  - Cabal corrections.\n    - Thanks Lennart
  Spitzner\n\n5.4.0\n  - Changed eventChannel of Graphics.Vty.Input from Chan to TChan.\n
  \   This enables clients to query if there are no pending events. The\n    Graphics.Vty
  interface nextEvent is unchanged. Clients that use\n    eventChannel directly will
  require updating.\n    https://github.com/coreyoconnor/vty/issues/60\n5.3.1\n  -
  Reverted cabal file to depend on Cabal >= 1.18 instead of 1.20 due\n    to possibly
  breaking this on reasonable GHC versions\n\n5.3\n  - Upgraded QuickCheck dependency
  to 2.7\n  - The standard IO Config (standardIOConfig) was overriding any\n    provided
  application config. In addition, the inputFd and outputFd\n    could not be changed
  if mkVty was used. Fixed.\n  - Correct handling of display attributes at end of
  line. The output\n    attributes are set to default at the end of content for the
  line and\n    at the start of a new line. Previously the current attribute would\n
  \   extend to the next start of content. This was odd to reason about\n    and was
  the cause of https://github.com/coreyoconnor/vty/issues/76\n    IIRC Yi requires
  the old behavior to display the selection region\n    correctly.\n  - shutdown of
  the input thread is now performed using killThread and\n    synchronization on an
  MVar. For correct handling of the terminal\n    read vmin and vtime the read must
  be a blocking read on an OS\n    thread. This places a threadWaitRead, which will
  be interrupted by\n    the killThread, prior to the uninterruptable read. An alternative\n
  \   would be to re-import the read foreign call as interruptable.\n\n5.2.11\n  -
  deepseq bounds increased for tests.\n  - Clean up warnings when compiling on 7.10\n
  \   - Thanks Eric Mertens\n  - Avoid discarding input bytes after multi-byte encoded
  codepoint\n    - Thanks Eric Mertens\n\n5.2.10\n  - \"str\" now returns EmptyImage
  for empty strings to match behavior of\n    other string-like Image constructors
  (fixes #74)\n    - Thanks Jonathan Daugherty\n\n5.2.9\n  - dependency version bumps\n
  \   - https://github.com/coreyoconnor/vty/pull/71\n    - https://github.com/coreyoconnor/vty/pull/70\n
  \ - Correct/Simplify the example code\n    - Thanks glguy\n    - https://github.com/coreyoconnor/vty/pull/69\n\n5.2.8\n
  \ - blaze-builder, lens, utf8-string version constraint bump\n      - Thanks glguy\n
  \     - https://github.com/coreyoconnor/vty/pull/67\n  - Do not differentiate based
  on TERM_PROGRAM\n      - https://github.com/coreyoconnor/vty/issues/68\n\n5.2.7\n
  \ - lens and deepseq constraint bump + misc\n      - Thanks ethercrow\n      - https://github.com/coreyoconnor/vty/pull/66\n\n5.2.6\n
  \ - lens constraint bump\n      - Thanks alexander-b!\n      - https://github.com/coreyoconnor/vty/pull/64\n\n5.2.5\n
  \ - lens and random version constraint bump.\n      - Thanks RyanGlScott!\n      -
  https://github.com/coreyoconnor/vty/pull/62\n\n5.2.4\n  - removed -fpic from cc-options.
  No longer required.\n      - https://github.com/coreyoconnor/vty/issues/61\n      -
  https://ghc.haskell.org/trac/ghc/ticket/9657\n      - Thanks Fuuzetsu!\n\n5.2.3\n
  \ - evaluate/compile the input parsing table once instead of each\n    keystroke.\n
  \     - https://github.com/coreyoconnor/vty/pull/59\n      - Thanks ethercrow!\n\n5.2.2\n
  \ - When looking at input for an event, don't look too deep.\n      - https://github.com/coreyoconnor/vty/pull/57\n
  \     - Thanks ethercrow!\n\n5.2.1\n  - Bump upper version bound for lens to 4.5.
  Thanks markus1189!\n\n5.2.0\n  - Config structure now specifies file descriptor
  to use. The default\n    is stdInput and stdOutput file descriptors. Previously
  Vty used\n    stdInput for input and the follow code for output:\n      - hDuplicate
  stdout >>= handleToFd >>= (`hSetBuffering`\n        NoBuffering)\n      - the difference
  was required by Vty.Inline. Now, Vty.Inline uses\n        the Config structure options
  to acheive the same effect.\n  - removed: derivedVtime, derivedVmin, inputForCurrentTerminal,\n
  \   inputForNameAndIO, outputForCurrentTerminal, outputForNameAndIO\n  - added:
  inputForConfig, outputForConfig\n  - updates to vty-rogue from jtdaugherty. Thanks!\n
  \ - the oldest version of GHC tested to support vty is 7.6.2.\n  - the oldest version
  of GHC that vty compiles under is 7.4.2\n\n5.1.4\n  - merged https://github.com/coreyoconnor/vty/pull/51
  thanks trofi!\n\n5.1.1\n  - merged https://github.com/coreyoconnor/vty/pull/48 thanks
  sjmielke!\n  - jtdaugherty resolved a number of compiler warnings. Thanks!\n\n5.1.0\n
  \ - vmin and vtime can be specified however the application requires.\n    See Graphics.Vty.Config.\n
  \ - fixed the processing of input when vmin is set > 1.\n\n5.0.0\n  - The naming
  convention now matches:\n    - http://www.haskell.org/haskellwiki/Programming_guidelines#Naming_Conventions\n
  \ - all projects using vty for input must be compiled with -threaded.\n    Please
  notify vty author if this is not acceptable.\n  - mkVtyEscDelay has been removed.
  Use \"mkVty def\". Which initialized\n    vty with the default configuration.\n
  \ - input handling changes\n    - KASCII is now KChar\n    - KPN5 is now KCenter\n
  \   - tests exist.\n    - Applications can add to the input tables by setting inputMap
  of\n      the Config. See Graphics.Vty.Config\n    - Users can define input table
  extensions that will apply to all vty\n      applications. See Graphics.Vty.Config\n
  \   - terminal timing is now handled by selecting an appropriate VTIME.\n      Previously
  this was implemented within Vty itself. This reduced\n      complexity in vty but
  provides a different meta key behavior and\n      implies a requirement on -threaded.\n
  \   - The time vty will wait to verify an ESC byte means a single ESC\n      key
  is the singleEscPeriod of the Input Config structure.\n  - removed the typeclass
  based terminal and display context interface\n    in favor of a data structure of
  properties interface.\n  - renamed the Terminal interface to Output\n  - The default
  picture for an image now uses the \"clear\" background.\n    This background fills
  background spans with spaces or just ends the\n    line.\n    - Previously the background
  defaulted to the space character. This\n      causes issues copying text from a
  text editor. The text would end\n      up with extra spaces at the end of the line.\n
  \ - Layer support\n    - Each layer is an image.\n    - The layers for a picture
  are a list of images.\n    - The first image is the top-most layer. The images are
  ordered from\n      top to bottom.\n    - The transparent areas for a layer are
  the backgroundFill areas.\n      backgroundFill is added to pad images when images
  of different\n      sizes are joined.\n    - If the background is clear there is
  no background layer.\n    - If there is a background character then the bottom layer
  is the\n      background layer.\n    - emptyPicture is a Picture with no layers
  and no cursor\n    - addToTop and addToBottom add a layer to the top and bottom
  of the\n      given Picture.\n  - compatibility improvements:\n    - terminfo based
  terminals with no cursor support are silently\n      accepted. The cursor visibility
  changes in the Picture will have\n      no effect.\n    - alternate (setf/setb)
  color maps supported. Though colors beyond\n      the first 8 are just a guess.\n
  \   - added \"rgbColor\" for easy support of RGB specified colors.\n    - Both applications
  and users can add to the mapping used to\n      translate from input bytes to events.\n
  \ - Additional information about input and output process can be\n    appended to
  a debug log\n    - Set environment variable VTY_DEBUG_LOG to path of debug log\n
  \   - Or use \"debugLog <path>\" config directive\n    - Or set 'debugLog' property
  of the Config provided to mkVty.\n  - examples moved to vty-examples package. See
  test directory for cabal\n    file.\n    - vty-interactive-terminal-test\n      -
  interactive test. Useful for building a bug report for vty's\n        author.\n
  \     - test/interactive_terminal_test.hs\n    - vty-event-echo\n      - view a
  input event log for vty. Example of interacting with\n        user.\n      - test/EventEcho.hs\n
  \   - vty-rogue\n      - The start of a rogue-like game. Example of layers and image\n
  \       build operations.\n      - test/Rogue.hs\n    - vty-benchmark\n      - benchmarks
  vty. A series of tests that push random pictures to\n        the terminal. The random
  pictures are generated using\n        QuickCheck. The same generators used in the
  automated tests.\n      - test/benchmark.hs\n\n4.7.0.0\n  - API changes:\n    -
  Added Graphics.Vty.Image.crop: Ensure an image is no larger\n      than the specified
  size.\n    - Added Graphics.Vty.Image.pad: Ensure an image is no smaller\n      than
  the specified size.\n    - Added Graphics.Vty.Image.translate: Offset an image.\n
  \ - Thanks Ben Boeckel <MathStuf@gmail.com> for these features.\n\n4.3.0.0\n\n4.2.1.0\n
  \ - API changes:\n    - Attr record accessor fore_color changed to attr_fore_color\n
  \   - Attr record accessor back_color changed to attr_back_color\n    - Attr record
  accessor style changed to attr_style\n    - Added an \"inline\" display attribute
  changing DSL:\n      - put_attr_change applies a display attribute change\n        immediately
  to a terminal\n      - For instance, can be used to change the display attrbiutes\n
  \       of text output via putStrLn and putStr. EX:\n        \"put_attr_change $
  back_color red\" will set the background\n        color to red.\n      - Changes
  do not apply to a Picture output via output_picture.\n      - See Graphics.Vty.Inline\n
  \   - Moved all IO actions into any monad an instance of MonadIO\n\n4.0.0.1\n  -
  binding for mk_wcswidth was incorrect. Most platforms just\n    magically worked
  due to coincidence.\n\n4.0.0\n  - API changes:\n    - \"getSize\" has been removed.
  Use \"terminal vty >>= display_bounds\"\n      where \"vty\" is an instance of the
  Vty data structure.\n    - added a \"terminal\" field to the Vty data structure.
  Accesses the\n      TerminalHandle associated with the Vty instance.\n    - Graphics.Vty.Types
  has undergone a number of changes. Summary:\n      - Partitioned into Graphics.Vty.Attributes
  for display attributes.\n        Graphics.Vty.Image for image combinators. Graphics.Vty.Picture\n
  \       for final picture construction.\n    - Graphics.Vty.Attributes:\n      -
  \"setFG\" and \"setBG\" are now \"with_fore_color\" and\n        \"with_back_color\"\n
  \     - All other \"set..\" equations similarly replaced.\n      - \"attr\" is now
  \"def_attr\", short for \"default display attributes\"\n        Also added a \"current_attr\"
  for \"currently applied display\n        attributes\"\n    - Graphics.Vty.Image:\n
  \     - \"horzcat\" is now \"horiz_cat\"\n      - \"vertcat\" is now \"vert_cat\"\n
  \     - \"renderBS\" is now \"utf8_bytestring\"\n      - \"renderChar\" is now \"char\"\n
  \     - \"renderFill\" is now \"char_fill\"\n      - added a \"utf8_string\" and
  \"string\" (AKA \"iso_10464_string\") for\n        UTF-8 encoded Strings and ISO-10464
  encoded Strings. String\n        literals in GHC have an ISO-10464 runtime representation.\n
  \   - Graphics.Vty.Picture:\n      - exports Graphics.Vty.Image\n      - \"pic\"
  is now \"pic_for_image\"\n      - added API for setting background fill pattern.\n
  \ - Completely rewritten output backend.\n    - Efficient, scanline style output
  span generator. Has not been\n      fully optimized, but good enough.\n    - The
  details required to display the desired picture on a\n      terminal are well encapsulated.\n
  \   - Terminfo based display terminal implementation. With specialized\n      derivitives
  for xterm, Terminal.app, and iTerm.app.\n        - Attempts to robustly handle even
  terminals that don't\n          support all display attributes.\n        - I've
  tested the following terminals with success: iTerm.app,\n          Terminal.app,
  xterm, rxvt, mlterm, Eterm, gnome-terminal,\n          konsole, screen, linux vty.
  Hopefully you will be as\n          successfull.\n    - Improved unicode support.
  Double wide characters will display as\n      expected.\n  - 256 color support.
  See Graphics.Vty.Attributes.Color240. The actual\n    output color is adjusted according
  to the number of colors the\n    terminal supports.\n  - The Graphics.Vty.Image
  combinators no longer require matching\n    dimensions to arguments. Unspecified
  areas are filled in with a\n    user-customizable background pattern. See Graphics.Vty.Picture.\n
  \ - output images are always cropped to display size.\n  - Significant code coverage
  by QuickCheck tests. An interactive test\n    for those final properties that couldn't
  be automatically verified.\n\nIssues resolved:\n  - \"gnome terminal displays non-basic
  attributes as strikethrough\"\n    - http://trac.haskell.org/vty/ticket/14\n  -
  \"Multi-byte characters are not displayed correctly on update\"\n    - http://trac.haskell.org/vty/ticket/10\n
  \ - \"Redraw does not handle rendering a line that extends beyond screen\n    width
  characters\"\n    - http://trac.haskell.org/vty/ticket/13\n  - \"The <|> and <->
  combinators should be more forgiving of mismatched\n    dimensions\"\n    - http://trac.haskell.org/vty/ticket/9\n
  \ - \"256-color support\"\n    - http://trac.haskell.org/vty/ticket/19\n"
basic-deps:
  microlens-th: -any
  bytestring: -any
  unix: -any
  stm: -any
  base: ! '>=4.8 && <5'
  text: ! '>=0.11.3'
  vty: -any
  filepath: ! '>=1.0 && <2.0'
  parsec: ! '>=2 && <4'
  containers: -any
  blaze-builder: ! '>=0.3.3.2 && <0.5'
  utf8-string: ! '>=0.3 && <1.1'
  mtl: ! '>=1.1.1.0 && <2.3'
  hashable: ! '>=1.2'
  terminfo: ! '>=0.3 && <0.5'
  transformers: ! '>=0.3.0.0'
  parallel: ! '>=2.2 && <3.3'
  deepseq: ! '>=1.1 && <1.5'
  microlens-mtl: -any
  microlens: -any
  vector: ! '>=0.7'
  directory: -any
all-versions:
- '3.0.0'
- '3.0.1'
- '3.0.2'
- '3.0.4'
- '3.1.0'
- '3.1.2'
- '3.1.4'
- '3.1.6'
- '3.1.8'
- '3.1.8.2'
- '3.1.8.4'
- '4.0.0'
- '4.0.0.1'
- '4.2.1.0'
- '4.4.0.0'
- '4.4.0.0.1'
- '4.6.0.1'
- '4.6.0.2'
- '4.6.0.4'
- '4.6.0.6'
- '4.7.0.0'
- '4.7.0.4'
- '4.7.0.6'
- '4.7.0.8'
- '4.7.0.10'
- '4.7.0.12'
- '4.7.0.14'
- '4.7.0.18'
- '4.7.0.20'
- '4.7.1'
- '4.7.2'
- '4.7.3'
- '4.7.4'
- '4.7.5'
- '5.0.0'
- '5.0.1'
- '5.0.2'
- '5.1.0'
- '5.1.1'
- '5.1.3'
- '5.1.4'
- '5.2.0'
- '5.2.1'
- '5.2.2'
- '5.2.3'
- '5.2.4'
- '5.2.5'
- '5.2.6'
- '5.2.7'
- '5.2.8'
- '5.2.9'
- '5.2.10'
- '5.2.11'
- '5.3'
- '5.3.1'
- '5.4.0'
- '5.5.0'
- '5.6'
- '5.7'
- '5.7.1'
- '5.8'
- '5.8.1'
- '5.9'
- '5.9.1'
- '5.10'
- '5.11'
- '5.11.1'
- '5.11.2'
- '5.11.3'
- '5.13'
- '5.14'
- '5.15'
- '5.15.1'
- '5.16'
- '5.17'
- '5.17.1'
- '5.18'
- '5.18.1'
- '5.19'
- '5.19.1'
- '5.19.2'
- '5.20'
- '5.21'
- '5.22'
- '5.23'
- '5.23.1'
author: AUTHORS
latest: '5.23.1'
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/jtdaugherty/vty.png)](https://travis-ci.org/jtdaugherty/vty)\n\n`vty`
  is a terminal interface library. It provides a high-level\ninterface for doing terminal
  I/O. Vty is supported on GHC versions\n7.10.1 and up.\n\nInstall via `git` with:\n\n```\ngit
  clone git://github.com/jtdaugherty/vty.git\n```\n\nInstall via `cabal` with:\n\n```\ncabal
  install vty\n```\n\n# Features\n\n* Supports a large number of terminals. vt100,
  ansi, hurd, linux,\n  screen, etc., or anything with a sufficient terminfo entry.\n\n*
  Automatic handling of window resizes.\n\n* Unicode output on terminals with UTF-8
  support.\n\n* Handles multi-column glyphs. (Requires user to properly configure\n
  \ terminal.)\n\n* Efficient output. Output buffering and terminal state changes
  are\n  minimized.\n\n* Minimizes repaint area, which virtually eliminates the flicker\n
  \ problems that plague ncurses programs.\n\n* A pure, compositional interface for
  efficiently constructing display\n  images.\n\n* Automatically decodes keyboard
  keys into (key,[modifier]) tuples.\n\n* Automatically supports refresh on Ctrl-L.\n\n*
  Supports a keypress timeout after for lone ESC. The timeout is\n  customizable.\n\n*
  The interface is designed for easy extension.\n\n* Supports ANSI graphics modes
  (SGR as defined in `console_codes(4)`)\n  with a type-safe interface and graceful
  fallback for terminals\n  with limited or nonexistent support for such modes.\n\n*
  Properly handles cleanup (but not due to signals).\n\n* Provides a comprehensive
  test suite.\n\n* Supports \"normal\" and \"extended\" (SGR) mouse modes as described
  at\n  http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking\n\n*
  Supports bracketed paste mode as described at\n  http://cirw.in/blog/bracketed-paste\n\n#
  Development Notes\n\nVty uses threads internally, so programs made with Vty need
  to be\ncompiled with the threaded runtime using the GHC `-threaded` option.\n\n#
  Platform Support\n\n## Posix Terminals\n\nUses terminfo to determine terminal protocol.
  With some special rules to\nhandle some omissions from terminfo.\n\n## Windows\n\nUnsupported
  (but contributions and testing here are very welcome!)\n\n# Contributing\n\nIf you
  decide to contribute, that's great! Here are some guidelines you\nshould consider
  to make submitting patches easier for all concerned:\n\n - If you want to take on
  big things, talk to me first; let's have a\n   design/vision discussion before you
  start coding. Create a GitHub\n   issue and we can use that as the place to hash
  things out.\n - If you make changes, make them consistent with the syntactic\n   conventions
  already used in the codebase.\n - Please provide Haddock documentation for any changes
  you make.\n\n# Development Notes\n\n## Under NixOS\n\n### Using cabal\n\nAfter installing
  `ncurses` to the user environment:\n\n~~~\nLIBRARY_PATH=$HOME/.nix-profile/lib/
  cabal configure --enable-tests --extra-lib-dirs=$HOME/.nix-profile/lib\nLIBRARY_PATH=$HOME/.nix-profile/lib/
  cabal build\nLIBRARY_PATH=$HOME/.nix-profile/lib/ cabal test\n~~~\n\n## Code Coverage\n\nAs
  of last testing, profiling causes issues with coverage when enabled.\nTo evaluate
  coverage, configure as follows:\n\n~~~\nrm -rf dist ; cabal configure --enable-tests
  --enable-library-coverage \\\n  --disable-library-profiling \\\n  --disable-executable-profiling\n~~~\n\n##
  Profiling\n\n~~~\nrm -rf dist ; cabal configure --enable-tests --disable-library-coverage
  \\\n  --enable-library-profiling \\\n  --enable-executable-profiling\n~~~\n\n# Known
  Issues\n\n* Terminals have numerous quirks and bugs. Vty picks what works best for\n
  \ the author in ambiguous or buggy situations.\n\n* Signal handling of STOP, TERM
  and INT are nonexistent.\n\n* The character encoding of the terminal is assumed
  to be UTF-8 if\n  unicode is used.\n\n* Terminfo is assumed to be correct unless
  there is an override\n  configured. Some terminals will not have correct special
  key support\n  (shifted F10 etc). See `Config` for customizing vty's behavior for
  a\n  particular terminal.\n\n* Uses the `TIOCGWINSZ` ioctl to find the current window
  size, which\n  appears to be limited to Linux and BSD.\n\n# Sources\n\nGood sources
  of documentation for terminal programming are:\n\n* https://github.com/b4winckler/vim/blob/master/src/term.c\n*
  http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n* http://ulisse.elettra.trieste.it/services/doc/serial/config.html\n*
  http://www.leonerd.org.uk/hacks/hints/xterm-8bit.html\n* http://www.unixwiz.net/techtips/termios-vmin-vtime.html\n*
  http://vt100.net/docs/vt100-ug/chapter3.html\n"
license-name: BSD3
