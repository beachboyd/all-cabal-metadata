homepage: https://github.com/basvandijk/usb-safe/
changelog-type: ''
hash: d5ce3fbb85846ce4da5963d0741321fe18cfff3bb90c3ee21353dde9b0332876
test-bench-deps: {}
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
synopsis: Type-safe communication with USB devices.
changelog: ''
basic-deps:
  usb: ! '>=1.0 && <1.1'
  base-unicode-symbols: ! '>=0.1.1 && <0.3'
  bytestring: ! '>=0.9 && <0.10'
  base: ! '>=4 && <4.5'
  text: ! '>=0.5 && <0.12'
  regions: ! '>=0.11 && <0.12'
  bindings-libusb: ! '>=1.3 && <1.5'
  iteratee: ! '>=0.4 && <0.9'
  transformers: ! '>=0.2 && <0.3'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- 0.5.1.1
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '0.10'
- '0.11'
- 0.11.0.1
- 0.11.0.2
- '0.12'
- '0.13'
- '0.14'
author: Bas van Dijk <v.dijk.bas@gmail.com>
latest: '0.14'
description-type: markdown
description: ! "The [usb] package provides a standard Haskell abstraction layer over\n[bindings-libusb]
  providing: abstract types instead of `Ptr`s, automatic\nmarshalling and unmarshalling,
  automatic garbage collection, exceptions instead\nof integer return codes, etc..\n\nWhile
  all that is very nice there are still some things that you can do\nwrong. For example
  doing I/O with a closed device or reading from or writing to\nan endpoint which
  doesn't belong to the claimed interface. Or reading from an\nOut endpoint or writing
  to an In endpoint.\n\n`usb-safe` provides the following guarantees:\n\n* You can't
  reference handles to devices that are closed. In other words: no I/O\n   with closed
  handles is possible.\n\n* The programmer specifies the *region* in which devices
  should remain open. On\n  exit from the region the opened devices will be closed
  automatically.\n\n* You can't reference handles to configurations that have not
  been set.\n\n* You can't reference handles to interfaces that have not been claimed.\n\n*
  Just like with devices, the programmer can specify the region in which\n  interfaces
  should remain claimed. On exit from the region the claimed\n  interfaces will be
  released automatically.\n\n* You can't reference handles to alternates that have
  not been set.\n\n* You can't reference endpoints that don't belong to a setted alternate.\n\n*
  You can't read from an endpoint with an Out transfer direction.\n\n* You can't write
  to an endpoint with an In transfer direction.\n\n* You can't read from or write
  to endpoints with the unsupported transfer types\n  Control and Isochronous. Only
  I/O with endpoints with the Bulk and Interrupt\n  transfer types is allowed.\n\nThe
  primary technique used in `usb-safe` is called \"Lightweight monadic regions\"\nwhich
  was [invented][1] by Oleg Kiselyov and Chung-chieh Shan.\n\nThis technique is implemented
  in the [regions] package which is re-exported from\n`usb-safe`.\n\nSee the [usb-safe-examples]
  package for examples how to use this library:\n\n    git clone git://github.com/basvandijk/usb-safe-examples.git\n\n[1]:
  http://okmij.org/ftp/Haskell/regions.html#light-weight\n\n[bindings-libusb]: http://hackage.haskell.org/package/bindings-libusb\n[usb]:
  \            http://hackage.haskell.org/package/usb\n[regions]:         http://hackage.haskell.org/package/regions\n\n[usb-safe-examples]:
  https://github.com/basvandijk/usb-safe-examples\n"
license-name: BSD-3-Clause
