homepage: http://basvandijk.github.com/usb
changelog-type: text
hash: 8b0eb05449e84348180ebd7f73e62751f32aeb10cf7709b4bc81e425a45da613
test-bench-deps: {}
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
synopsis: Communicate with USB devices
changelog: ! "1.3.0.6 (2018-04-01)\n\n\t* Support GHC-8.4\n\n\n1.3.0.5 (2017-07-07)\n\n\t*
  Fix segfault in registerHotplugCallback caused by a double-free.\n\t  The fix was
  to increment the reference count of the USB device that\n\t  was passed to the HotplugCallback.\n\n\t
  \ Thanks to Ryan Mulligan and Ian Kane for reporting and investigating this bug.\n\n\n1.3.0.4
  (2016-07-02)\n\n\t* Support GHC-8.0.1.\n\t* Support vector-0.11.\n        * Add
  Travis-CI integration.\n\n\n1.3.0.3 (2015-05-06)\n\n\t* Fix incorrect direction
  in controlRead.\n\n\n1.3.0.2 (2015-05-02)\n\n\t* Support GHC-7.10.2.\n\n\n1.3.0.1
  (Fri Apr 17 19:39:51 UTC 2015)\n\n\t* Support GHC-7.10.\n\n\n1.3.0.0 (Sun Dec 14
  23:11:35 UTC 2014)\n\n\t* Add hotplug support.\n\n        * Add the System.USB.IO.Transfers
  module which separates the\n\tconstruction from the execution of a USB transfer.
  This has the\n\tadvantage that a transfer can be constructed once and executed\n\tmultiple
  times thereby saving repeated allocation costs.\n\n\t* Added the deviceSpeed, portNumber,
  portNumbers and parent functions to\n\tSystem.USB.Enumeration.\n\n\t* Added the
  setAutoDetachKernelDriver to System.USB.DeviceHandling.\n\n\t* Added the System.USB.Misc
  module which exports\n\tthe hasCapability & libusbVersion functions.\n\n\t* Extended
  the Verbosity type with the PrintDebug constructor.\n\n\n1.2.0.1 (Fri May 23 21:50:20
  UTC 2014)\n\n\t* Drop UnicodeSyntax and the dependency on base-unicode-symbols.\n\n\t*
  Fix build on GHC-7.8.2.\n\n\n1.2 (Mon Nov 26 22:55:48 UTC 2012)\n\n\t* Make retrieving
  the DeviceDesc and ConfigDescs IO operations.\n\n\t* Use Vectors instead of lists
  in the public API.\n\n\t* Export pokeVector from System.USB.Internal.\n\n\t* Fix
  build & warnings on Windows.\n\n\t* Performance improvements.\n\n\t* Documentation
  improvements.\n\n\n1.1.0.4 (Wed Nov 21 23:29:54 UTC 2012)\n\n\t* Use Foreign.Concurrent.newForeignPtr
  on Windows\n\tThis will hopefully resolve #1\n\tThis solution was also suggested
  by Maurício C. Antunes:\n\thttps://bitbucket.org/mauricio/bindings-dsl/issue/11/fix-the-calling-convention-for-funptrs-to\n\n\t*
  Update documentation.\n\n\n1.1.0.3 (Sat Sep 8 00:48:55 UTC 2012)\n\n\t* Derive Generic
  instances for all data types.\n\n\t* Support base-4.6 and bytestring-0.10.\n\n\t*
  Fix build on Windows.\n\n\t* Use the new labeled URLs in Haddock.\n\n\t* Updated
  copyright dates.\n\n\n1.1.0.2 (Sat May 5 23:47:44 UTC 2012)\n\n\t* Lazily compute
  the list of digits from decodeBCD.\n\n\t* Support containers-0.5.\n\n\n1.1.0.1 (Thu
  Apr 12 21:21:14 UTC 2012)\n\n\t* Prevent a potential space-leak.\n\n\n1.1 (Sat Jan
  7 20:54:10 UTC 2012)\n\n\t* Support base-4.5\n\n\t* Mark the safe modules as Trustworthy
  and the unsafe ones as Unsafe.\n\n\t* Replaced getEvtMgr with getWait\n\n\n1.0 (Mon
  Sep 12 19:50:37 UTC 2011)\n\n\t* Support for isochronous reads and writes.\n\n\t*
  All I/O functions now use the libusb asynchronous interface when\n\tsupport for
  the GHC event manager is available.\n\tThis should be more efficient and allows
  cancelling of an in flight\n\ttransfer by throwing an exception to the thread performing
  the transfer.\n\n\t* Added writeControlExact :: DeviceHandle -> ControlAction WriteExactAction.\n\n\t*
  All I/O functions which previously returned the boolean TimedOut\n\tnow return a:
  data Status = Completed | TimedOut.\n\n\t* Added the timeout constant: noTimeout
  :: Timeout.\n\n\t* Added function: maxIsoPacketSize :: EndpointDesc -> Size\n\tWhich
  calculates the maximum packet size which a specific endpoint\n\tis capable of sending
  or receiving in the duration of 1 microframe.\n\tThis function is mainly useful
  for setting up isochronous transfers.\n\n\t* Added some specific IOExceptions:\n\tioException
  :: USBException\n\tincompleteReadException :: USBException\n\tincompleteWriteException
  :: USBException\n\n\t* Renamed System.USB.IO.Synchronous to just System.USB.IO.\n\n\t*
  Renamed System.USB.Unsafe to System.USB.Internal and exported more\n\tfunctions
  from it which are primarily needed in the usb-iteratee\n\tpackage.\n\n\t* Fixed
  some bugs.\n\n\n0.8 (Wed Mar 9 12:21:51 UTC 2011)\n\n\t* getStrDesc and getStrDescFirstLang
  now return a Text instead of a\n\tString I believe this is a more efficient and
  cleaner interface.\n\n\n0.7 (Mon Jan 17 22:04:29 UTC 2011)\n\n\t* Change type of
  setConfig to allow setting a device in unconfigured state\n\t-setConfig :: DeviceHandle
  ->       ConfigValue -> IO ()\n\t+setConfig :: DeviceHandle -> Maybe ConfigValue
  -> IO ()\n\n\t* Changed type of getConfig to match setConfig\n\t-getConfig :: DeviceHandle
  -> IO ConfigValue\n\t+getConfig :: DeviceHandle -> IO (Maybe ConfigValue)\n\n\t*
  Added setConfig and getConfig functions to System.USB.IO.StandardDeviceRequests.\n\tThese
  functions are for testing purposes only!\n\n\n0.6.0.8 (Thu Jan 13 12:29:15 UTC 2011)\n\n\t*
  Fix bug in getDevices:\n\tc'libusb_free_device_list returns a 64bit number on 64bit
  platforms\n\tgetDevices assumed c'libusb_free_device_list returned a CInt.\n\tThis
  is correct on 32bit platforms but on 64bit platforms it returns an Int64.\n\tTo
  fix it, I generalized checkUSBException to work over any Integral type.\n\n\n0.6.0.7
  (Tue Jan 4 12:30:43 UTC 2011)\n\n\t* Fixed bug in getDevices:\n\tc'libusb_free_device_list
  returned undocumented error code\n\n\t* Show unknown libusb error code in unknownLibUsbError\n\n\n0.6.0.6
  (Sun Dec 26 12:00:30 UTC 2010)\n\n\t* Import missing (>>) in Utils (only when ghc
  < 7)\n\tReported by Joris Putcuyps.\n\n\n0.6.0.5 (Thu Dec 16 16:20:12 UTC 2010)\n\n\t*
  Support text-0.11.\n\n\t* Resolved some warning when compiling with ghc-7\n\n\n0.6.0.4
  (Sat Oct 23 00:15:14 UTC 2010)\n\n\t* Support text-0.10.\n\n\n0.6.0.3 (Thu Oct 21
  21:37:50 UTC 2010)\n\n\t* Tested with GHC-7 and modified to work with base-4.3.\n\n\n0.6.0.2
  (Wed Oct 6 22:06:43 UTC 2010)\n\n\t* Support text-0.9.\n\n\n0.6.0.1 (Mon Sep 13
  05:48:41 UTC 2010)\n\n\t* Fixed bug in Utf16LE encoding in getStrDesc.\n\n\n0.6
  (Sat Sep 11 14:19:36 UTC 2010)\n\n\t* Renamed BCD4 to ReleaseNumber.\n\n\t* Made
  StrIxs in descriptors optional.\n\n\t* Refactored handling of string descriptors
  (internal change).\n\n\t* Added strictness flags to all arguments of data constructors.\n\n\n0.5.0.1
  (Wed Sep 1 20:12:03 UTC 2010)\n\n\t* Support text-0.8\n\n\t* Prevent a potential
  space leak in the decoding of BCD values\n\t(Binary Coded Decimals)\n\n\n0.5 (Mon
  Jul 26 05:48:59 UTC 2010)\n\n\t* Fixed bug in all writing related functions: writeControl,
  writeBulk\n\tand writeInterrupt.  I erroneously ignored the offset in the given\n\tByteString.\n\n\t*
  Fixed bug in getDevices Don't free the array when\n\tc'libusb_get_device_list returns
  c'LIBUSB_ERROR_NO_MEM.\n\n\t* Fixed bug in 'setStandardTestMode' Wrong conversion
  from TestMode to\n\tWord16.\n\n\t* Specify the length of the requested string in
  getStrDesc in characters\n\tinstead of bytes.\n\n\t* Moved the standard device requests
  to their own module\n\tSystem.USB.IO.StandardDeviceRequests\n\n\t* Added System.USB.Unsafe
  This module is needed by the usb-enumerator\n\tpackage.\n\n\t* Added convenience
  function 'readControlExact' which is similar to\n\t'readControl' but checks if the
  specified number of bytes to read were\n\tactually read. Throws an 'IOException'
  if this is not the case.\n\n\t* Defined more instances for various types.  Most
  types have now\n\tinstances for: Show, Read, Eq, Data and Typeable\n\n\t* Added
  type TimedOut = Bool\n\n\t* Some refactoring and documentation\n\n\n0.4 (Wed Jun
  16 09:12:22 UTC 2010)\n\n\t* Some reordering and naming of arguments:\n\t< type
  ReadAction = Timeout → Size → IO (B.ByteString, Bool)\n\t> type ReadAction = Size
  → Timeout → IO (B.ByteString, Bool)\n\n\t< type WriteAction = Timeout → B.ByteString
  → IO (Size, Bool)\n\t> type WriteAction = B.ByteString → Timeout → IO (Size, Bool)\n\n\t*
  Return the iterator when the enumerator reads 0 bytes\n\n\t* Restricted the enumerators
  to work on Word8 instead of a polymorphic\n\telements This is to prevent readFromPtr
  to read outside allocated memory\n\n\t* Use the package MonadCatchIO-transformers-foreign
  in\n\tSystem.USB.IO.Synchronous.Enumerator\n\n\n0.3.1 (Sun May 2 20:23:24 UTC 2010)\n\n\t*
  Made the descriptor types non-abstract\n\n\t* Updated dependencies\n\titeratee                  >=
  0.3.5 && < 0.4\n\ttransformers              >= 0.2   && < 0.3\n\tMonadCatchIO-transformers
  >= 0.2   && < 0.3\n\n\t* Always include the Enumerator and remove its flag\n\n\n0.3.0.1
  (Wed Dec 23 13:41:49 UTC 2009)\n\n\t* Tested with base-4.2\n\n\t* Tested with text-0.7\n\n\n0.3
  (Tue Dec 8 21:06:22 UTC 2009)\n\n\t* Moved the enumeration of usb devices in its
  own module:\n\tSystem.USB.Enumeration\n\n\t* Moved the device descriptor inside
  the device type so that you can\n\tretrieve it without doing IO, e.g: deviceDesc
  :: Device -> DeviceDesc\n\n\t* Moved the configuration descriptors inside the device
  descriptor so\n\tyou can retrieve them without doing IO, e.g: deviceConfigs :: DeviceDesc\n\t->
  [ConfigDesc]\n\n\t* Implemented standard device requests that are missing from libusb.\n\n\t*
  Made the timeout of I/O operations explicit. Now all I/O operations\n\treturn an
  additional Bool that indicates if the operation has timed\n\tout. If an operation
  timed out does not mean there is no result, it just\n\tmeans that the result may
  be incomplete.\n\n\t* Added experimental (and still untested) support for iteratees
  for\n\tdoing predictable, high-performance, safe, and elegant input processing\n\tusing
  the iteratee package. See module:\n\tSystem.USB.IO.Synchronous.Enumerator\n\n\t*
  Fixed some asynchronous exception related bugs (put a needed bracket,\n\tblock and
  unblock here and there).\n\n\t* Finally some functions, constructors and types got
  renamed,\n\tdocumentation got updated and extended and some refactoring has taken\n\tplace.\n\n\n0.2.0.1
  (Sat Oct 10 18:09:07 UTC 2009)\n\n\t* Tested with text == 0.5.*\n\n\n0.2 (Wed Oct
  7 12:19:37 UTC 2009)\n\n\t* Depend on bindings-libusb == 1.3.*\n\t* Moved System.USB.DeviceHandlingAndEnumeration
  to System.USB.Devices\n\n\n0.1.0.1 (Thu Oct 1 19:14:30 UTC 2009)\n\n\t* Depend on
  bindings-libusb == 1.2.\n\n\n0.1 (Wed Sep 30 21:11:15 UTC 2009)\n\n\t* Initial release\n"
basic-deps:
  bytestring: ! '>=0.9'
  base: ! '>=4 && <5'
  text: ! '>=0.5'
  containers: ! '>=0.1'
  bindings-libusb: ! '>=1.4.5'
  ghc-prim: ! '>=0.2'
  vector: ! '>=0.5'
all-versions:
- '0.1'
- '0.1.0.1'
- '0.2'
- '0.2.0.1'
- '0.3'
- '0.3.0.1'
- '0.3.1'
- '0.4'
- '0.5'
- '0.5.0.1'
- '0.6'
- '0.6.0.1'
- '0.6.0.2'
- '0.6.0.3'
- '0.6.0.4'
- '0.6.0.5'
- '0.6.0.6'
- '0.6.0.7'
- '0.6.0.8'
- '0.7'
- '0.8'
- '1.0'
- '1.1'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.1.0.4'
- '1.2'
- '1.2.0.1'
- '1.3.0.0'
- '1.3.0.1'
- '1.3.0.2'
- '1.3.0.3'
- '1.3.0.4'
- '1.3.0.5'
- '1.3.0.6'
author: Bas van Dijk <v.dijk.bas@gmail.com>
latest: '1.3.0.6'
description-type: markdown
description: ! '[![Hackage](https://img.shields.io/hackage/v/usb.svg)](https://hackage.haskell.org/package/usb)

  [![Build Status](https://travis-ci.org/basvandijk/usb.svg)](https://travis-ci.org/basvandijk/usb)


  This library enables you to communicate with USB devices from

  userspace. It is implemented as a high-level wrapper around

  [bindings-libusb] which is a low-level binding to the C library:

  [libusb-1.*].


  The USB transfer functions in this library have a simple synchronous

  interface (they block) but are implemented using the `libusb`

  asynchronous interface. They integrate with the GHC event manager

  making them efficient (no busy-loops) and interruptible (throwing an

  exception to the thread executing a transfer immediately cancels the

  transfer).


  If the GHC event manager is not available (because you''re either not

  using GHC or because you''re on Windows) the library degrades

  gracefully to the `libusb` synchronous implementation.


  The documentation assumes knowledge of how to operate USB devices

  from a software standpoint (descriptors, configurations, interfaces,

  endpoints, control/bulk/interrupt/isochronous transfers, etc). Full

  information can be found in the [USB 2.0 Specification][USB-2.0-spec].


  For an example how to use this library see either the [usb-example] or

  [ls-usb] package.


  Also see the [usb-safe] package which wraps this package and provides

  some strong safety guarantees for working with USB devices.


  Finally have a look at the [usb-iteratee] package which provides

  iteratee enumerators for enumerating bulk, interrupt and isochronous

  endpoints.


  Besides the API documentation the following sources might be

  interesting:


  * [The libusb 1.0 documentation](http://libusb.sourceforge.net/api-1.0/)


  * [The USB 2.0 specification][USB-2.0-spec]


  * [The `bindings-libusb` documentation][bindings-libusb]


  * ["USB in a NutShell"](http://www.beyondlogic.org/usbnutshell/usb1.htm)


  [bindings-libusb]: http://hackage.haskell.org/package/bindings-libusb

  [usb-example]:     https://github.com/basvandijk/usb-example

  [ls-usb]:          http://hackage.haskell.org/package/ls-usb

  [usb-safe]:        http://hackage.haskell.org/package/usb-safe

  [usb-iteratee]:    http://hackage.haskell.org/package/usb-iteratee

  [libusb-1.*]:      http://libusb.org/wiki/libusb-1.0

  [USB-2.0-spec]:    http://www.usb.org/developers/docs/

'
license-name: BSD3
