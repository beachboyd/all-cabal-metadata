homepage: ''
changelog-type: markdown
hash: 406d8b772b9132793879ed4eec3d56812e6043f7039be76fecd617dce9990b6a
test-bench-deps: {}
maintainer: fd@taz.de
synopsis: Generic Haskell AMQP Consumer
changelog: ! '# Revision history for haskell-amqp-utils


  ## 0.3.2.0  -- 2018-07-04


  * agitprop, a publisher

  * optional publisher confirms

  * hotfolder mode, file magic

  * several options


  ## 0.3.0.2  -- 2018-04-24


  * use ciphersuite\_default


  ## 0.3.0.1  -- 2018-03-04


  * don''t let the thread sleep too long


  ## 0.3.0.0  -- 2017-11-21


  *  add nix with `amqp_0_18_1`

  *  multiple bindings per queue

  *  remove cool smart special options


  ## 0.2.2.0  -- 2017-11-20


  * option -Q (set queue name for temporary exclusive queue)


  ## 0.2.1.5  -- 2017-09-25


  * travis

  * debian

  * repair debian jessie

  * callback: pass-through timestamp, ignore non-existing sha

  * reduce load

  * amqp 0.17, use coName


  ## 0.2.1.4  -- 2017-06-01


  * First version. Released on an unsuspecting world.

'
basic-deps:
  bytestring: -any
  unix: ! '>=2.7'
  base: ! '>=4.6 && <5'
  data-default-class: -any
  time: -any
  amqp: ! '>=0.17'
  text: -any
  tls: -any
  process: -any
  connection: -any
  magic: -any
  containers: -any
  x509-system: -any
  hinotify: ! '>=0.3.8 && <0.3.10'
all-versions:
- '0.2.1.4'
- '0.2.1.5'
- '0.3.0.0'
- '0.3.2.0'
author: Frank Doepper
latest: '0.3.2.0'
description-type: markdown
description: ! "# haskell-amqp-utils\ngeneric Haskell AMQP commandline tools for use
  with RabbitMQ\n\n## Overview\nThe package contains 2 binaries for commandline use.\n\n-
  konsum, a generic consumer\n- agitprop, a generic publisher\n\n## konsum\n### usage\n\n
  \   konsum [options]\n\n    Options:\n      -r BINDINGKEY  --bindingkey=BINDINGKEY
  \         AMQP binding key (default: #)\n      -X[EXE]        --execute[=EXE]                  Callback
  Script File (implies -t) (-X without arg: /usr/lib/haskell-amqp-utils/callback)\n
  \     -a ARG         --args=ARG                       additional argument for -X
  callback\n      -l INT         --charlimit=INT                  limit number of
  shown body chars (default: unlimited)\n      -t[DIR]        --tempdir[=DIR], --target[=DIR]
  \ tempdir (default: no file creation, -t without arg: /tmp)\n      -f INT         --prefetch=INT
  \                  Prefetch count. (0=unlimited, 1=off, default: 1)\n      -o SERVER
  \     --server=SERVER                  AMQP Server (default: localhost)\n      -y
  VHOST       --vhost=VHOST                    AMQP Virtual Host (default: /)\n      -x
  EXCHANGE    --exchange=EXCHANGE              AMQP Exchange (default: default)\n
  \     -Q TEMPQNAME   --qname=TEMPQNAME                Name for temporary exclusive
  Queue\n      -p PORT        --port=PORT                      Server Port Number
  (default: 5672)\n      -T             --tls                            Toggle TLS
  (default: False)\n      -q QUEUENAME   --queue=QUEUENAME                Ignore Exchange
  and bind to existing Queue\n      -c CERTFILE    --cert=CERTFILE                  TLS
  Client Certificate File\n      -k KEYFILE     --key=KEYFILE                    TLS
  Client Private Key File\n      -U USERNAME    --user=USERNAME                  Username
  for Auth\n      -P PASSWORD    --pass=PASSWORD                  Password for Auth\n
  \     -s INT         --heartbeats=INT                 heartbeat interval (0=disable,
  default: set by server)\n      -n NAME        --name=NAME                      connection
  name, will be shown in RabbitMQ web interface\n\n## examples\n\nconnect to localhost
  with default credentials and attach to a new temp\nqueue on exchange \"default\":\n\n
  \   ./konsum\n\nConnect to a host with TLS on a custom port, authenticating with
  SSL\nclient certificate. On every received message a callback is spawned.\nThe message
  will be ACKed when the callback exits successfully. First\n500 bytes of the message
  body are printed to stdout. Header infos are\nalways printed to stdout:\n\n    konsum
  -o amqp.example.com -p 5673 -T -k amqp-key.pem -c amqp-crt.pem -y vhost -x exchange
  -X./callback.sh -a -c -a callback.config.sh -f 2 -r routing.key.# -l 500\n\nAuthenticate
  with user and pass. Generate a file for every message:\n\n    konsum -o amqp.example.com
  -U user -P pass -q queue -t\n\nProvide a custom CA cert for proving the server's
  identity via\nenviroment:\n\n    $ env SYSTEM_CERTIFICATE_PATH=/etc/amqp/cacert.crt
  ./konsum -T -y vhost -x exchange\n\nStop with ^C\n\n## agitprop\n### usage\n\n    agitprop
  [options]\n\n    Options:\n      -r ROUTINGKEY    --routingkey=ROUTINGKEY            AMQP
  routing key\n      -f INPUTFILE     --inputfile=INPUTFILE              Message input
  file (default: /dev/stdin)\n      -l               --linemode                         Toggle
  line-by-line mode (default: False)\n      -C               --confirm                          Toggle
  confirms (default: False)\n                       --msgid=ID                         Message
  ID\n                       --type=TYPE                        Message Type\n                       --userid=USERID
  \                   Message User-ID\n                       --appid=APPID                      Message
  App-ID\n                       --clusterid=CLUSTERID              Message Cluster-ID\n
  \                      --contenttype=CONTENTTYPE          Message Content-Type\n
  \                      --contentencoding=CONTENTENCODING  Message Content-Encoding\n
  \                      --replyto=REPLYTO                  Message Reply-To\n                       --prio=PRIO
  \                       Message Priority\n                       --corrid=CORRID
  \                   Message CorrelationID\n                       --exp=EXP                          Message
  Expiration\n      -h HEADER=VALUE  --header=HEADER=VALUE              Message Headers\n
  \     -F HEADERNAME    --fnheader=HEADERNAME              Put filename into this
  header\n      -S SUFFIX        --suffix=SUFFIX                    Allowed file suffixes
  in hotfolder mode\n      -m               --magic                            Toggle
  setting content-type and -encoding from file contents (default: False)\n      -e
  \              --persistent                       Set persistent delivery\n      -E
  \              --nonpersistent                    Set nonpersistent delivery\n      -o
  SERVER        --server=SERVER                    AMQP Server (default: localhost)\n
  \     -y VHOST         --vhost=VHOST                      AMQP Virtual Host (default:
  /)\n      -x EXCHANGE      --exchange=EXCHANGE                AMQP Exchange (default:
  default)\n      -Q TEMPQNAME     --qname=TEMPQNAME                  Name for temporary
  exclusive Queue\n      -p PORT          --port=PORT                        Server
  Port Number (default: 5672)\n      -T               --tls                              Toggle
  TLS (default: False)\n      -q QUEUENAME     --queue=QUEUENAME                  Ignore
  Exchange and bind to existing Queue\n      -c CERTFILE      --cert=CERTFILE                    TLS
  Client Certificate File\n      -k KEYFILE       --key=KEYFILE                      TLS
  Client Private Key File\n      -U USERNAME      --user=USERNAME                    Username
  for Auth\n      -P PASSWORD      --pass=PASSWORD                    Password for
  Auth\n      -s INT           --heartbeats=INT                   heartbeat interval
  (0=disable, default: set by server)\n      -n NAME          --name=NAME                        connection
  name, will be shown in RabbitMQ web interface\n\nIf INPUTFILE is a file, the file
  is sent as a message and the program\nexits. If INPUTFILE is a directory, the directory
  is watched via inotify\nand every file, which is written and closed or moved in
  gets sent,\noptionally only files which match one or several SUFFIXes. Optionally\nthe
  file name is written into a message header named HEADERNAME.\nOptionally Content-Type
  and Content-Encoding headers are set via magic\nretrieved from file contents.\n\nLine-by-line
  mode sends one message per INPUTFILE line.\n\n### examples\n\nSend a message containing
  a file and put the filename into a fileName\nmessage header:\n\n    agitprop -x
  amq.topic -r test -F fileName -f agitprop.hs\n"
license-name: GPL-3
