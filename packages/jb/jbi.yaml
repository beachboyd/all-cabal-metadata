homepage: ''
changelog-type: markdown
hash: 84e183c413e20080a7b954f1a89dc3b40a132f5f53095477e9b37c3d1362f437
test-bench-deps: {}
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Just Build It - a "do what I mean" abstraction for Haskell build tools
changelog: ! "# Revision history for jbi\n\n## 0.2.0.0 -- 2018-02-07\n\n* Add a `--version`
  (and `-V`) flag to the executable.\n\n* `jbi repl` now takes an optional `--repl-opts`
  which is passed\n  through to the underlying REPL (e.g. `ghci`).\n\n    * No longer
  supply `-ferror-spans` by default.\n\n* A `--debug` argument prints out all commands
  run.\n\n    This results in _many_ API changes; as a sample:\n\n    * `GlobalEnv`
  has been renamed to `ToolEnv`\n    * A `Config` type is now provided for run-time
  configuration.\n      This is now taken by most of the running commands.\n    *
  `Env` wraps the above two types and is an argument to most\n      `BuildTool` commands.\n\n*
  Try and support benchmarking with `cabal+nix` where possible.\n\n    API change:
  the `NixSupport` type now contains information about\n    `nix-instantiate`.\n\n*
  Better support for getting targets from stack.\n\n* If a build tool needs the version
  to check validity it has to\n  explicitly obtain it.\n\n    API Changes:\n\n    *
  Change in `canUseCommand` in `BuildTool` class\n    * Change in `command` field
  in `Valid` data structure\n    * Change in `canUseMode` in `CabalMode` class\n    *
  Addition of `needsMinCabal` to `CabalMode` class\n\n* Other small tweaks to reduce
  the overhead of using _jbi_ over the\n  build tool itself (parallel validity checking,
  etc.).\n\n## 0.1.0.0 -- 2017-09-05\n\n* First version. Released on an semi-suspecting
  world.\n"
basic-deps:
  Cabal: ! '>=1.22.0.0 && <2.1'
  base: ! '>=4.8 && <4.13'
  aeson-pretty: ! '>=0.7.2 && <0.9'
  text: ==1.*
  filepath: ! '>=1.4.0.0 && <1.5'
  process: ! '>=1.4.3.0 && <1.7'
  jbi: -any
  tagged: ==0.8.*
  monad-parallel: ==0.7.*
  optparse-applicative: ! '>=0.13.0.0 && <0.15'
  aeson: ! '>=0.11.1.0 && <1.3'
  directory: ! '>=1.2.5.0'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Ivan Lazar Miljenovic
latest: 0.2.0.0
description-type: markdown
description: ! "Just Build It, and hack on!\n===========================\n\n[![Hackage](https://img.shields.io/hackage/v/jbi.svg)](https://hackage.haskell.org/package/jbi)
  [![Build Status](https://travis-ci.org/ivan-m/jbi.svg)](https://travis-ci.org/ivan-m/jbi)\n\n>
  A \"do what I mean\" abstraction for Haskell build tools.\n\nMotivation\n----------\n\nYou've
  decided to work on an existing Haskell project.  The repository\nhas been forked,
  you've cloned it to your computer, and you're about\nto start work.  What's the
  first thing you need to do?\n\n1) Replace all copyright notices with your own name.\n\n2)
  Swap all tabs and spaces.\n\n3) Convert all the code to Literate Haskell because
  it's such a pain\n    to write your long prosaic comments whilst remembering to
  preface\n    every line with `-- `.\n\nActually, unless you're someone with a religious
  obsession of using\nwhat you prefer no matter what project you're working on or
  who you're\ncollaborating with, the first task you generally need to do is:\n\n4)
  Work out which build tool is being used in the project.\n\nAfter all, especially
  as we tend to put in more and more\nmetadata/hints into our different build tool
  files rather than just\nusing `runhaskell Setup.hs <foo>`, it's more convenient
  and friendlier\nto work with a project the same way everyone else (especially the\nmaintainer!)
  does.\n\nBut this means you need to mentally switch gears and try and remember\nthe
  quirks of each individual tool's command line configuration (how\ndo I launch a
  REPL again?).  Your editing environment may need to be\nconfigured so as to use
  the correct tool, whatever keyboard shortcuts\nyou use to run tests needs to change,
  etc.\n\nWouldn't it be nice if there was a simple way your development\nenvironment
  (including your muscle memory!) could stay the same and\nlet some common interface
  handle the changing (without falling into\nthe trap of trying to [replace everything](https://xkcd.com/927/))?\n\nEnter
  _jbi_\n-----------\n\n_jbi_ - short for \"Just Build It\" - is aimed at providing
  a common\ninterface between the various Haskell build tools.  You should be able\nto
  enter any directory containing a Haskell project and just run `jbi`\nand it will
  successfully determine the best build tool to use,\ndownload dependencies and build
  the project.\n\nCurrently, _jbi_ knows of the following Haskell build tools:\n\n*
  `stack` (with automatic [Nix] support)\n\n* `cabal-install` with [Nix] support (using
  `cabal2nix` and `nix-shell`)\n\n* `cabal-install` using sandboxes\n\n[Nix]: https://nixos.org/nix/\n\nNote
  that nothing within _jbi_ is inherently Haskell-oriented; it can\nbe extended to
  any build tool for any language which has similar\nconcepts for build tooling.\n\nHow
  _jbi_ works\n---------------\n\nTo determine which build tool to works, _jbi_ takes
  into account three\nthings:\n\n1. The order in which the tools are available to
  be checked in\n   (currently the same as in the list above).\n\n2. Whether a build
  tool is able to be used (i.e. the tool is installed\n   and an appropriate project
  can be found).\n\n3. Whether it is already being used.\n\nPreference is given to
  tools already in evidence of being used.  As an\nexample, consider the following
  scenario:\n\n```\nmyProjectDir/ $ ls\ncabal.sandbox.config LICENSE myProject.cabal
  src/ stack.yaml\n```\n\nIf both `cabal-install` and `stack` are available, then
  - despite the\npresence of a `stack.yaml` - the presence of a sandbox configuration\nindicates
  that a preference has been made for using them.\n\n### Features\n\n* Automatically
  install dependencies for and enable test-suites and\n  benchmarks.\n\n* Attempt
  to re-configure (including installing dependencies) if\n  builds fail (which `stack`
  already provides)\n\n* The equivalent of `cabal run` for `stack`.\n\n* Print out
  a list of targets (equivalent of `stack ide targets`, for\n  which `cabal-install`
  does not have an analogue).\n\n* Detailed debugging information about tool availability.\n\n*
  Work within any sub-directory of a project (no need to make sure\n  you're running
  from the root directory!).\n\n### Caveats\n\n_jbi_ will not:\n\n* Generate a `stack.yaml`
  for you.  This is an explicit opt-in of\n  wanting to use `stack`, and furthermore
  isn't possible to determine\n  whether you want it just for the current package
  or if it's part of\n  a larger multi-package project.\n\n* Install the result of
  the build for you.  _jbi_ is purely for\n  developmental purposes.\n\n* Allow you
  to not build the test suite or benchmarks (unless you\n  specifically build a specific
  target).\n\n* Allow you to have flexible builds, pass through extra command-line\n
  \ options, etc.  It is opinionated in how it does things to cover the\n  common
  cases.\n\nFurthermore:\n\n* I have only recently started using [Nix] (both with
  Stack and\n  cabal-install) and as such may not have it quite right (it seems to\n
  \ work with me though).\n\nFortuitously Anticipated Queries\n--------------------------------\n\n###
  Why isn't my build tool of choice being used?\n\nRun `jbi info details` to find
  the information being used to choose\nthe build tool.  The chosen build tool will
  have:\n\n* `\"installation\"` non-null.\n* `\"usable\": true`\n* A non-null `\"project\"`\n\nPreference
  is given to:\n\n* Build tools with `\"artifactsPresent\": true`\n* Higher up in
  the list.\n\n### What are these artifacts?\n\n\"Artifacts\" is the term used by
  _jbi_ to denote the build-tool\nspecific files/directories found within the project
  that indicate it\nis being worked upon.\n\nThese are:\n\n_stack_\n  ~ `.stack-work/`\n_cabal+nix_\n
  \ ~ `shell.nix` or `default.nix`\n_cabal+sandbox_\n  ~ `cabal.sandbox.config` (note
  that the sandbox itself may be in a\n      different directory)\n\n`jbi prepare`
  will generate these; `jbi clean` will remove them (with\nany other files/directories
  likely to have been produced as part of\nthe build process).  Typically you will
  never need to explicitly run\n`jbi prepare`.\n\n### Stack doesn't seem to be using
  Nix\n\nFor [Nix] support to work, you need to [configure your\n  `stack.yaml`](https://docs.haskellstack.org/en/stable/nix_integration/).\n\n###
  Why can't I use Stack with shell.nix?\n\nFor a project with no `.stack-work/`, _jbi_
  takes the presence of a\n`shell.nix` file to indicate that the project is using
  _cabal+nix_,\nirregardless as to whether a `stack.yaml` file is present.\n\nThere
  are two ways you can work around this:\n\n1. Explicitly create a `.stack-work/`
  directory; as _stack_ has a higher\n   priority, _jbi_ will then pick it over _cabal+nix_.
  \ Note, however,\n   you may also need to explicitly run `stack setup` if using
  a\n   non-system GHC.\n\n2. Use a different filename other than `shell.nix` (remember
  to\n   specify the filename properly in the `shell-file` section!).\n\nThe latter
  is preferred as it will allow more of _jbi_'s automatic\nfeatures to work (e.g.
  calling `stack setup`).\n\n### How can I re-generate my shell.nix after updating
  my .cabal file?\n\n**For _cabal+nix_.**\n\nRun `jbi prepare`.  This is likely the
  only scenario you will ever\nneed to explicitly run this command in.\n\n### Why
  don't I have benchmarking support with _cabal+nix_?\n\nBenchmarking using _cabal+nix_
  requires support from `nixpkgs`.  This\nis currently present in the `unstable` branch
  but is not yet present\nin a release (but should hopefully be found in `18.03`).\n\nYou
  can verify whether your version of `nixpkgs` supports benchmarking\nHaskell code
  with:\n\n```bash\nnix-instantiate --eval --expr 'with import <nixpkgs> {}; haskell.lib
  ? doBenchmark'\n```\n\nNote that _jbi_ currently doesn't support specifying which
  channel you\nare using and defaults to `nixpkgs`.  If you are using `unstable` you\ncan
  try to manually configure by editing the generated `shell.nix` and\nreplacing `<nixpkgs>`
  with `<unstable>` (or whatever you have called\nthat channel) and running:\n\n```bash\nnix-shell
  --arg doBenchmark true \\\n  --run 'cabal configure --enable-tests --enable-benchmarks'\n```\n\n###
  How do I add a new build tool?\n\nPull requests are welcome.\n\nTo add a new tool,
  you need to create an instance of the `BuildTool`\nclass from `System.JBI.Commands.BuildTool`,
  and then insert your new\ntool into an appropriate place in `defaultTools` in `System.JBI`.\n\n###
  What about languages other than Haskell?\n\nIf, for some reason, you wish to use
  a language other than Haskell and\nwould like to use _jbi_ with it, you're more
  than welcome to send me a\npull request.\n"
license-name: MIT
