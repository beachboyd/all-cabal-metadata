homepage: https://github.com/mrkkrp/zip
changelog-type: markdown
hash: c8774f93f3e8f2482e2fa097651c5a19fe73913ba3c863ee383bc2d4bee5b6b4
test-bench-deps:
  exceptions: ! '>=0.6 && <0.11'
  bytestring: ! '>=0.9 && <0.11'
  base: ! '>=4.9 && <5.0'
  time: ! '>=1.4 && <1.9'
  hspec: ! '>=2.0 && <3.0'
  text: ! '>=0.2 && <1.3'
  zip: -any
  filepath: ! '>=1.2 && <1.5'
  dlist: ! '>=0.8 && <0.9'
  conduit: ! '>=1.3 && <1.4'
  containers: ! '>=0.5.6.2 && <0.6'
  transformers: ! '>=0.4 && <0.6'
  temporary: ! '>=1.1 && <1.4'
  QuickCheck: ! '>=2.4 && <3.0'
  directory: ! '>=1.2.2 && <1.4'
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Operations on zip archives
changelog: ! "## Zip 1.2.0\n\n* Added the `setExternalFileAttrs` function and the
  `edExternalFileAttrs`\n  field in the `EntryDescription` record.\n\n## Zip 1.1.0\n\n*
  Made `saveEntry` and `unpackInto` restore modification time of files.\n\n## Zip
  1.0.0\n\n* Works with `conduit-1.3.0`, `conduit-extra-1.3.0`, `resourcet-1.2.0`
  and\n  `bzlib-conduit-0.3.0`.\n\n* Stop depending on `path`, `path-io`, and `plub-b`.\n\n*
  Made the module `Codec.Archive.Zip.Type` non-public.\n\n* Remove derived instances
  of `Data` and `Generic` for `EntrySelector` not\n  to expose its inner structure.\n\n*
  Change signature of the `loadEntry` function, its second argument is now\n  just
  `EntrySelector` of the entry to add.\n\n* The second argument of `packDirRecur`
  now receives paths that are relative\n  to the root of the directory we pack.\n\n##
  Zip 0.2.0\n\n* Added `MonadBase` and `MonadBaseControl` instances for the `ZipArchive`\n
  \ monad. Also exported the `ZipState` type without revealing its data\n  constructor
  and records.\n\n* Dropped `MonadThrow` and `MonadCatch` constraints for `createArchive`
  and\n  `withArchive`.\n\n## Zip 0.1.11\n\n* Minor refactoring.\n\n* Improved documentation
  and metadata.\n\n## Zip 0.1.10\n\n* Made `getEntrySource` polymorphic in terms of
  the `Source` it returns.\n\n* Numerous cosmetic corrections to the docs.\n\n* Derived
  `Eq` and `Ord` for `EntrySelectorException` and `ZipException`.\n\n## Zip 0.1.9\n\n*
  Fixed a bug with modification time serialization on 32 bit systems.\n\n## Zip 0.1.8\n\n*
  Fixed a bug that caused `zip` to write incorrect number of entries\n  (instead of
  `0xffff`) in central directory when Zip64 feature is enabled.\n\n## Zip 0.1.7\n\n*
  Fix literal overflows on 32 bit systems.\n\n## Zip 0.1.6\n\n* Allowed `time-1.7`.\n\n*
  Fixed an issue when empty archives with Zip 64 feature enabled could not\n  be read
  (the “Parsing of archive structure failed: Cannot locate end of\n  central directory”).\n\n##
  Zip 0.1.5\n\n* Switched to using `withBinaryFile` instead of `withFile`, because
  the\n  latter does nasty conversions on Windows, see docs for `openBinaryFile`.\n\n##
  Zip 0.1.4\n\n* Added several simple code examples in `Codec.Archive.Zip`.\n\n* Derived
  `Typeable`, `Data`, `Generic` for `EntrySelector`.\n\n* Derived `Typeable` for `EntryDescription`.\n\n*
  Derived `Show`, `Ord`, `Bounded`, `Data`, and `Typeable` for\n  `CompressionMethod`.\n\n*
  Derived `Read`, `Ord`, `Typeable`, and `Data` for `ArchiveDescription`.\n\n## Zip
  0.1.3\n\n* Improved speed of detection of invalid archives.\n\n* Introduced `getEntrySource`
  function.\n\n## Zip 0.1.2\n\n* Relaxed dependency on `semigroups`.\n\n* Added explicit
  check of “version needed to extract”, so if archive uses\n  some advanced features
  that we do not support yet, parsing fails.\n\n* Value of “version needed to extract”
  field is now calculated dynamically\n  with respect to actually used features, e.g.
  if you just store or deflate\n  a not very big file, `2.0` version will be written
  (previously we wrote\n  `4.6` unconditionally). This is needed to avoid scaring
  tools that can\n  only handle basic Zip archives.\n\n## Zip 0.1.1\n\n* Make decoding
  of CP437 faster.\n\n## Zip 0.1.0\n\n* Initial release.\n"
basic-deps:
  exceptions: ! '>=0.6 && <0.11'
  bzlib-conduit: ! '>=0.3 && <0.4'
  cereal: ! '>=0.3 && <0.6'
  bytestring: ! '>=0.9 && <0.11'
  case-insensitive: ! '>=1.2.0.2 && <1.3'
  base: ! '>=4.9 && <5.0'
  time: ! '>=1.4 && <1.9'
  text: ! '>=0.2 && <1.3'
  monad-control: ! '>=1.0 && <1.1'
  zip: -any
  filepath: ! '>=1.2 && <1.5'
  dlist: ! '>=0.8 && <0.9'
  conduit: ! '>=1.3 && <1.4'
  conduit-extra: ! '>=1.3 && <1.4'
  containers: ! '>=0.5.6.2 && <0.6'
  mtl: ! '>=2.0 && <3.0'
  transformers-base: -any
  digest: <0.1
  transformers: ! '>=0.4 && <0.6'
  resourcet: ! '>=1.2 && <1.3'
  directory: ! '>=1.2.2 && <1.4'
all-versions:
- '0.1.0'
- '0.1.1'
- '0.1.2'
- '0.1.3'
- '0.1.4'
- '0.1.5'
- '0.1.6'
- '0.1.7'
- '0.1.8'
- '0.1.9'
- '0.1.10'
- '0.1.11'
- '0.2.0'
- '1.0.0'
- '1.1.0'
- '1.2.0'
author: Mark Karpov <markkarpov92@gmail.com>
latest: '1.2.0'
description-type: markdown
description: ! "# Zip\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/zip.svg?style=flat)](https://hackage.haskell.org/package/zip)\n[![Stackage
  Nightly](http://stackage.org/package/zip/badge/nightly)](http://stackage.org/nightly/package/zip)\n[![Stackage
  LTS](http://stackage.org/package/zip/badge/lts)](http://stackage.org/lts/package/zip)\n[![Build
  Status](https://travis-ci.org/mrkkrp/zip.svg?branch=master)](https://travis-ci.org/mrkkrp/zip)\n\n*
  [Why this library is written](#why-this-library-is-written)\n    * [zip-archive](#zip-archive)\n
  \   * [LibZip](#libzip)\n    * [zip-conduit](#zip-conduit)\n* [Features](#features)\n
  \   * [Compression methods](#compression-methods)\n    * [Encryption](#encryption)\n
  \   * [Sources of file data](#sources-of-file-data)\n    * [ZIP64](#zip64)\n    *
  [Filenames](#filenames)\n    * [Meta-information about files](#meta-information-about-files)\n*
  [Quick start](#quick-start)\n* [Contribution](#contribution)\n* [License](#license)\n\nThis
  is a feature-rich, memory-efficient, and type-safe library to\nmanipulate Zip archives
  in Haskell. The library is the most complete and\nefficient implementation of .ZIP
  specification in pure Haskell (at least\nfrom open-sourced ones). In particular,
  it's created with large multimedia\ndata in mind and provides all features users
  might expect, comparable in\nterms of feature-set with libraries like `libzip` in
  C.\n\n## Why this library is written\n\nThere are a few libraries to work with Zip
  archives, yet every one of them\nprovides only a subset of all the functionality
  a user may need (obviously\nthe libraries provide functionality that their authors
  needed) and otherwise\nis flawed in some way so it cannot be easily used in some
  situations. Let's\nexamine all the libraries available on Hackage to understand
  motivation for\nthis package.\n\n### zip-archive\n\n`zip-archive` is a widely used
  library. It's quite old, well-known and\nsimple to use. However it creates Zip archives
  purely, as `ByteStrings`s in\nmemory that you can then write to the file system.
  This is not acceptable if\nyou work with more-or-less big data. For example, if
  you have collection of\nfiles with total size of 500 MB and you want to pack them
  into an archive,\nyou can easily consume up to 1 GB of memory (the files plus resulting\narchive).
  Not always you can afford to do this or do this at scale. Even if\nyou want just
  to look at list of archive entries it will read it into memory\nin all its entirety.
  For my use-case it's not acceptable.\n\n### LibZip\n\nThis is a binding to C\nlibrary
  [`libzip`](https://en.wikipedia.org/wiki/Libzip). There is always a\ncertain kind
  of trouble when you are using bindings. For example, you need\nto take care that
  target library is installed and its version is compatible\nwith the version of your
  binding. Yes, this means additional headaches. It\nshould be just “plug and play”,
  but now you need to watch out for\ncompatibility.\n\nIt's not that bad with libraries
  that do not break their API for years, but\nit's not the case with `libzip`. As
  the maintainer of `LibZip` puts it:\n\n> libzip 0.10, 0.11, and 1.0 are not binary
  compatible. If your C library is\n> 0.11.x, then you should use LibZip 0.11. If
  your C library is 1.0, then\n> you should use LibZip master branch (not yet released
  to Hackage).\n\nNow, on my machine I have version 1.0. To put the package on Stackage
  we had\nto use version 0.10, because Stackage uses Ubuntu to build packages and\nlibraries
  on Ubuntu are always ancient. This means that I cannot use the\nversion of the library
  from Stackage, and I don't yet know what will be on\nthe server.\n\nAfter much frustration
  with all these things I decided to avoid using of\n`LibZip`, because after all,
  this is not that sort of a project that\nshouldn't be done in pure Haskell. By rewriting
  this in Haskell, I also can\nmake it safer to use.\n\n### zip-conduit\n\nThis one
  uses the right approach: leverage a good streaming library\n(`conduit`) for memory-efficient
  processing. This is however is not\nfeature-rich and has certain problems (including
  programming style, it uses\n`error` if an entry is missing in archive, among other
  things), some of them\nare reported on its issue tracker. It also does not appear
  to be maintained\n(the last sign of activity was on December 23, 2014).\n\n## Features\n\nThe
  library supports all features specified in the modern .ZIP specification\nexcept
  for encryption and multi-disk archives. See more about this below.\n\nFor reference,
  here is a [copy of the specification](https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.3.TXT).\n\n###
  Compression methods\n\n`zip` supports the following compression methods:\n\n* Store
  (no compression, just store files “as is”)\n* [DEFLATE](https://en.wikipedia.org/wiki/DEFLATE)\n*
  [Bzip2](https://en.wikipedia.org/wiki/Bzip2)\n\nThe best way to add a new compression
  method to the library is to write a\nconduit that will do the compression and publish
  it as a library. `zip` can\nthen depend on it and add it to the list of supported
  compression methods.\nThe current list of compression methods reflects what is available
  on\nHackage at the moment.\n\n### Encryption\n\nEncryption is currently not supported.
  Encryption system described in the\n.ZIP specification is known to be seriously
  flawed, so it's probably not the\nbest way to protect your data anyway. The encryption
  method seems to be a\nproprietary technology of PKWARE (at least that's what stated
  about it in\nthe .ZIP specification), so to hell with it.\n\n### Sources of file
  data\n\nThe library gives you many options how to get file contents to compress
  and\nhow to get extracted data. The following methods are supported:\n\n* *File
  name.* This is an efficient method to perform compression or\n  decompression. You
  just specify where to get data or where to save it and\n  the rest is handled by
  the library.\n* *Conduit source or sink.*\n* *ByteString.* Use it only with small
  data.\n* *Copy file from another archive.* An efficient operation, file is copied\n
  \ “as is”—no re-compression is performed.\n\n### ZIP64\n\nWhen necessary, the `ZIP64`
  extension is automatically used. It's necessary\nwhen anything from this list takes
  place:\n\n* Total size of archive is greater than 4 GB.\n* Size of compressed/uncompressed
  file in archive is greater than 4 GB.\n* There are more than 65535 entries in archive.\n\nThe
  library is particularly suited for processing of large files. For\nexample, I've
  been able to easily create 6.5 GB archive with reasonable\nspeed and without significant
  memory consumption.\n\n### Filenames\n\nThe library has API that makes it impossible
  to create archive with\nnon-portable or invalid file names in it.\n\nAs of .ZIP
  specification 6.3.2, files with Unicode symbols in their names\ncan be put into
  Zip archives. The library supports mechanisms for this and\nuses them automatically
  when needed. Besides UTF-8, CP437 is also supported\nas it's required in the specification.\n\n###
  Meta-information about files\n\nThe library allows to attach comments to entire
  archive or individual files,\nand also gives its user full control over extra fields
  that are written to\nfile headers, so the user can store arbitrary information about
  file in the\narchive.\n\n## Quick start\n\nThe module `Codec.Archive.Zip` provides
  everything you may need to\nmanipulate Zip archives. There are three things that
  should be clarified\nright away, to avoid confusion in the future.\n\nFirst, we
  use the `EntrySelector` type that can be obtained from relative\n`FilePath`s (paths
  to directories are not allowed). This method may seem\nawkward at first, but it
  will protect you from the problems with portability\nwhen your archive is unpacked
  on a different platform.\n\nThe second thing, that is rather a consequence of the
  first, is that there\nis no way to add directories, or to be precise, *empty directories*
  to your\narchive. This approach is used in Git, and I find it quite sane.\n\nFinally,
  the third feature of the library is that it does not modify archive\ninstantly,
  because doing so on every manipulation would often be\ninefficient. Instead we maintain
  a collection of pending actions that can be\nturned into an optimized procedure
  that efficiently modifies archive in one\npass. Normally this should be of no concern
  to you, because all actions are\nperformed automatically when you leave the realm
  of `ZipArchive` monad. If,\nhowever, you ever need to force an update, the `commit`
  function is your\nfriend. There are even “undo” functions, by the way.\n\nLet's
  take a look at some examples that show how to accomplish most typical\ntasks with
  help of the library.\n\nTo get full information about archive entries, use `getEntries`:\n\n```haskell\nλ>
  withArchive archivePath (M.keys <$> getEntries)\n```\n\nThis will return a list
  of all entries in the archive at `archivePath`. It's\npossible to extract contents
  of an entry as a strict `ByteString`:\n\n```haskell\nλ> withArchive archivePath
  (getEntry entrySelector)\n```\n\n…to stream them to a given sink:\n\n```haskell\nλ>
  withArchive archivePath (sourceEntry entrySelector mySink)\n```\n\n…to save a specific
  entry to a file:\n\n```haskell\nλ> withArchive archivePath (saveEntry entrySelector
  pathToFile)\n```\n\n…and finally just unpack the entire archive into some directory:\n\n```haskell\nλ>
  withArchive archivePath (unpackInto destDir)\n```\n\nSee also `getArchiveComment`
  and `getArchiveDescription`.\n\nModifying is also easy, efficient, and powerful.
  When you want to create a\nnew archive use `createArchive`, otherwise `withArchive`
  will do. To add an\nentry from `ByteString`:\n\n```haskell\nλ> createArchive archivePath
  (addEntry Store \"Hello, World!\" entrySelector)\n```\n\nYou can stream from `Source`
  as well:\n\n```haskell\nλ> createArchive archivePath (sinkEntry Deflate source entrySelector)\n```\n\nTo
  add contents from a file, use `loadEntry`:\n\n```haskell\nλ> let toSelector = const
  (mkEntrySelector \"my-entry.txt\")\nλ> createArchive archivePath (loadEntry BZip2
  toSelector myFilePath)\n```\n\nFinally, you can copy an entry from another archive
  without re-compression\n(unless you use `recompress`, see below):\n\n```haskell\nλ>
  createArchive archivePath (copyEntry srcArchivePath selector selector)\n```\n\nIt's
  often desirable to just pack a directory:\n\n```haskell\nλ> createArchive archivePath
  (packDirRecur Deflate mkEntrySelector dir)\n```\n\nIt's also possible to:\n\n* rename
  an entry with `renameEntry`\n* delete an entry with `deleteEntry`\n* change compression
  method with `recompress`\n* change comment associated with an entry with `setEntryComment`\n*
  delete comment with `deleteEntryComment`\n* set modification time with `setModTime`\n*
  manipulate extra fields with `addExtraField` and `deleteExtraField`\n* check if
  entry is intact with `checkEntry`\n* undo changes with `undoEntryCanges`, `undoArchiveChanges`,
  and `undoAll`\n* force changes to be written to file system with `commit`\n\nThis
  should cover all your needs. Feel free to open an issue if you're\nmissing something.\n\n##
  Contribution\n\nYou can contact the maintainer via\n[the issue tracker](https://github.com/mrkkrp/zip/issues).\n\nPull
  requests are also welcome and will be reviewed quickly.\n\n## License\n\nCopyright
  © 2016–2018 Mark Karpov\n\nDistributed under BSD 3 clause license.\n"
license-name: BSD3
