homepage: ''
changelog-type: markdown
hash: 39a04b5d093d03741384ca52d5c47fca0d63bc2208295fc8766ea7f5788f4994
test-bench-deps:
  agda-unused: -any
  base: '>=4.13.0 && <4.14'
  hspec: '>=2.7.1 && <2.8'
  text: '>=1.2.4 && <1.3'
  filepath: '>=1.4.2 && <1.5'
  containers: '>=0.6.2 && <0.7'
maintainer: Matt Superdock <msuperdock@gmail.com>
synopsis: Check for unused code in an Agda project.
changelog: |+
  # Changelog

  ## 0.1.0 (10/27/2020)

  Initial release.

basic-deps:
  agda-unused: -any
  base: '>=4.13.0 && <4.14'
  text: '>=1.2.4 && <1.3'
  megaparsec: '>=8.0.0 && <8.1'
  Agda: '>=2.6.1 && <2.6.2'
  filepath: '>=1.4.2 && <1.5'
  containers: '>=0.6.2 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  optparse-applicative: '>=0.15.1 && <0.16'
  aeson: '>=1.4.7 && <1.5'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0
author: ''
latest: 0.1.0
description-type: markdown
description: "# agda-unused\n\n`agda-unused` checks for unused code in an Agda project,
  including:\n\n- variables\n- definitions\n- postulates\n- data & record types\n-
  `import` statements\n- `open` statements\n- pattern synonyms\n\n`agda-unused` can
  be run globally on a full project, or locally on a file and\nits dependencies. Running
  `agda-unused` globally requires an `.agda-roots` file\nin the project root directory,
  which specifies the \"roots\" of the project. The\n\"roots\" of a project are identifiers
  that are considered used even if not used\nwithin the project itself. You might
  think of the `.agda-roots` file as a\nspecification of the public interface of your
  project.\n\n## Example\n\nFile `~/Test.agda`:\n\n```\nmodule Test where\n\nopen
  import Agda.Builtin.Bool\n  using (Bool; false; true)\nopen import Agda.Builtin.Unit\n\n_∧_\n
  \ : Bool\n  → Bool\n  → Bool\nfalse ∧ x\n  = false\n_ ∧ y\n  = y\n```\n\nCommand:\n\n```\n$
  agda-unused --local Test.agda\n```\n\nOutput:\n\n```\n/home/user/Test.agda:4,23-27\n
  \ unused imported item ‘true’\n/home/user/Test.agda:5,1-30\n  unused import ‘Agda.Builtin.Unit’\n/home/user/Test.agda:11,9-10\n
  \ unused variable ‘x’\n```\n\n## Roots\n\nRunning `agda-unused` globally requires
  an `.agda-roots` file in the project\nroot directory. The `.agda-roots` format consists
  of:\n\n- Module names, each followed by a list of (possibly qualified) identifiers.\n-
  Module names in parentheses.\n\nAll given module names not in parentheses are checked,
  along with their\ndependencies. The given identifiers are considered roots; they
  will not be\nmarked unused. Qualified identifiers refer to identifiers defined within
  inner\nmodules. If no identifiers are given for a module, all publicly accessible\nidentifiers
  are considered roots.\n\nAll given module names in parentheses are ignored when
  checking for unused\nfiles. Such modules may still be checked if imported by another
  module.\n\nExample `.agda-roots` file:\n\n```\nMain\n- main\n\nPythagorean.Core\n-
  isTriple\n- allTriples\n\n(Pythagorean.Examples)\n\nPythagorean.Theorems\n\nPythagorean.Utils\n-
  Print.prettyNat\n```\n\nSpacing and indentation are irrelevant.\n\n## Usage\n\n```\nUsage:
  agda-unused [-r|--root ROOT] [-l|--local FILE]\n  Check for unused code in project
  with root directory ROOT\n\nAvailable options:\n  -h,--help                Show
  this help text\n  -r,--root ROOT           Path of project root directory\n  -l,--local
  FILE          Path of file to check locally\n  -j,--json                Format output
  as JSON \n```\n\nThe project root directory is determined as follows:\n\n- If the
  `--root` option is given, its value is the project root.\n- If the `--local` option
  is given, the nearest ancestor with an `.agda-roots`\n  file is the project root,
  if any.\n- If the current directory has an `.agda-roots` file, it is the project
  root.\n- Otherwise, the nearest ancestor of the current directory with an `.agda-roots`\n
  \ file is the project root, if any.\n- Otherwise, we take the current directory
  as the project root.\n\n## Approach\n\nWe make a single pass through each relevant
  Agda file:\n\n- When a new item (variable, definition, etc.) appears, we mark it
  unused.\n- When an existing item appears, we mark it used.\n\nThis means, for example,
  if we have three definitions (say `f`, `g`, `h`), each\ndepending on the previous
  one, where `h` is not a root, then `f` and `g` are\nconsidered used, while `h` is
  considered unused. If we remove `h` and run\n`agda-unsed` again, it will now report
  that `g` is unused. This behavior is\ndifferent from Haskell's built-in tool, which
  would report that all three\nidentifiers are unused on the first run.\n\nFor a global
  check, we check each file appearing in `.agda-roots` and its\ndependencies. For
  a local check, we check just the given file and its\ndependencies, ignoring all
  publicly accessible definitions.\n\n## JSON\n\nIf the `--json` switch is given,
  the output is a JSON object with two fields:\n\n- `type`: One of `\"none\"`, `\"unused\"`,
  `\"error\"`.\n- `message`: A string, the same as the usual output of `agda-unused`.\n\nThe
  `\"none\"` type indicates that there is no unused code.\n\n## Limitations\n\nWe
  currently do not support the following Agda features:\n\n- [record module instance
  applications](https://agda.readthedocs.io/en/v2.6.1.1/language/module-system.html#parameterised-modules)\n-
  [unquoting declarations](https://agda.readthedocs.io/en/v2.6.1.1/language/reflection.html#id3)\n-
  [external libraries](https://agda.readthedocs.io/en/v2.6.1.1/tools/package-system.html)\n(other
  than Agda's built-in libraries)\n\n`agda-unused` will produce an error if your code
  uses these language features.\n\n"
license-name: MIT
