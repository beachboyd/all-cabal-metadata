homepage: https://github.com/arnoblalam/iron_mq_haskell
changelog-type: markdown
hash: 6e64af0d2a1baa7316b022590901afe931a704bd2eeebdbb7424ccb0409221de
test-bench-deps: {}
maintainer: arnoblalam@gmail.com
synopsis: Iron.IO message queueing client library
changelog: ! "# Changes\n\n## Version 0.1.1.0\n\n### Major\n\n- Rename package from
  iron-mq-haskell to iron-mq\n- Implement `postMessages`, `deleteMessage`, `deleteQueue`
  `peek` and `touch`functions\n- Provide a default constructor for messages\n\n###
  Minor\n\n - Prettify iron-mq.cabal\n - Prettify postJSONWithBody function\n - Implement
  a deleteJSONWith function for making DELETE requests"
basic-deps:
  http-client: ! '>=0.4'
  base: ! '>=4.6 && <=4.8'
  text: ! '>=0.11'
  wreq: ! '>=0.3'
  lens: ! '>=4.6'
  aeson: ! '>=0.7'
all-versions:
- 0.1.0.0
- 0.1.1.0
author: Arnob Alam
latest: 0.1.1.0
description-type: markdown
description: ! "Haskell language binding for IronMQ. [IronMQ](http://www.iron.io/products/mq)
  is an elastic message queue for managing data and event flow within cloud applications
  and between systems. [See How It Works](http://www.iron.io/products/mq/how)\n\n#
  Getting Started\n\n## Get credentials\n\nTo start using iron_mq_python, you need
  to sign up and get an OAuth2 token.\n\n1. Go to http://iron.io/ and sign up.\n2.
  Get an OAuth2 Token at http://hud.iron.io/tokens\n\n## Install iron_mq_haskell\n\n```sh\ncabal
  install iron-mq\n```\n## Configure\n\nCreate a client which stores your authentication
  information and server settings/\n\n```haskell\nclient = Client {\n    server =
  \"mq-aws-us-east-1.iron.io\",\n    porjectID = \"500f7b....b0f302e9\",\n    token
  = \"Et1En7.....0LuW39Q\",\n    api_version=\"1\"\n}\n```\n\n## The Basics\n\n###
  Listing queues\n\n```haskell\nqueues :: Client -> QueueSummary\nqueues client\n```\nreturns
  list of queue names available to the client.\n\nwe get a specific queue by name:\n\n```haskell\ngetQueue
  :: Client -> QueueName -> IO Queue\nmyQueue = getQueue client \"test_queue\"\n```\n\n###
  Push messages on the queue\n\nWe can change the default options of a message like
  so:\n\n```haskell\npostMessages :: Client -> QueueName -> [Message] -> IO IronResponse\npostMessages
  client \"queueName\" [message {body = \"message1\"}, message {body = \"message2\"}]\n```\n\nWe
  can change the default settings for a message like so:\n\n```haskell\nunorthoDoxMessage
  = message {\n    body = \"axxon body\",\n    timeout = 120 -- Timeout, in seconds.
  After timeout, item will be placed back on queue. Defaults to 60.\n    delay = 5
  -- The item will not be available on the queue until this many seconds have passed.
  Defaults to 0.\n    expiresIn = 2*24*3600 -- How long, in seconds, to keep the item
  on the queue before it is deleted.\n}\n\nmain = postMessage \"queueName\" [unorthodoxMessage]\n```\n\n###
  Pop messages off the queue\n\n```haskell\ngetMessages :: Client -> QueueName ->
  IO MessageList\ngetMessages client \"queneName\"\n{- \nMessageList \n    {\n        messages
  = [Message {mId = Just \"...\", mBody = \"Word up!\", mTimeout = Just 60, mReservedCount
  = Just 1}]\n    }\n-}\n```\n\nSet max to the number of messages to return, 1 by
  default. A `timeout` parameter can be used to specify a per-message timeout, or
  the timeout the message was posted with will be used.\n\nWhen you pop/get a message
  from the queue, it will NOT be deleted.\nIt will eventually go back onto the queue
  after a timeout if you don't delete it (default timeout is 60 seconds).\n\n### Get
  message by id\n```haskell\ngetMessageByID :: Client -> QueueName -> ID -> IO Message\nmain
  = getMessageById client \"test_queue\" \"1234567789abcdef\"\n{-\n    Message {mId
  = Just \"...\", mBody = \"Hey yo!\", mTimeout = Just 60, mReservedCount = Just 1}\n-}\n```\n\n###
  Delete messages from the queue\n\n```haskell\ndeleteMessages :: Client -> QueueName
  -> [ID] -> IO IronResponse\ndeleteMessages client \"test_queue\" [\"123456789abcdef\",
  \"fedcba987654321\"]\n```\n\n### Clear a queue\n\n```haskell\nclear :: Client ->
  QueueName -> IO IronResponse\nclear client \"test_queue\"\n```\n\n### Get queue
  ***size***, ***id***, ***total_messages*** and whole ***info***\n```haskell\nmain
  = do\n-- | getQueue client queueName\nmyQueue <-  getQueue client queueName\n{-\nQueue
  {\n    qId = Just \"541451a958a847405bfa6316\",\n    qProjectId = \"53f691bd45d4960005000082\",\n
  \   qName = \"test_queue\",\n    qSize = Just 1,\n    qTotalMessages = Just 8,\n
  \   qSubscribers = Nothing,\n    qRetries = Nothing,\n    qPushType = Nothing,\n
  \   qRetriesDelay = Nothing\n}\n-}\n\n-- | qSize queue\nqSize myQueue -- Just 1\n\n--
  | qName queue\nqName myQueue -- \"test_queue\"\n\n-- | qTotalMessages queue\nqTotalMessages
  -- Just 8\n\n-- | qID queue\nqID myQueue -- \"541451a958a847405bfa6316\"\n```\n\n###
  Peek at messages\n\nTo view messages without reserving them, use peek:\n\n```haskell\npeek
  :: Client -> QueueName -> Int -> IO MessageList\npeek client \"test_queue\" 10\n{-\n
  \   MessageList {messages = [Message {mId = Just \"...\", mBody = \"Word up!\",
  mTimeout = Just 60, mReservedCount = Just 1}]}\n-}\n```\n\nThe third parameter is
  an integer specifying the maximum number of messages to retrieve.\n\n### Touch a
  message\n\nTo extend the reservation on a reserved message, use touch. The message
  reservation will be extended by the message's `timeout`.\n\n```haskell\ntouch ::
  Client -> QueueName -> ID -> IO IronResponse\ntouch client \"test_queue\" messageID\n```\n\n###
  Release a reserved message\n\nTo release a message that is currently reserved, use
  release:\n\n```haskell\nrelease :: Client -> QueueName -> ID -> Int -> IO IronResponse\nrelease
  client \"test_queue\" \"123456789abcdef\" 120 -- message will be released after
  delay seconds\n```\n\nThe last parameter is the delay time before the message is
  released.\n\n### Delete a queue\n\nTo delete a queue, use `deleteQueue`:\n\n```haskell\n--
  | deleteQueue client queueName\ndeleteQueue client \"test_queue\"\n```\n\n## Push
  Queues\n\n### Update Queue Information\n\nTo update the queue's push type and subscribers,
  use update:\n\n```haskell\nupdate :: Client -> QueueName -> [Subscriber] -> String
  -> IO Response\nupdate client \"test_queue\" [subscriber {url = \"http://endpoint1.com\"},
  subscriber {url = \"https://end.point.com/2\"}] \"unicast\"\n```\n\nThe last parameter
  is the broadcast type (either \"unicast\" or \"multicast\")\n\n### Add subscribers
  to a push queue\n\n```haskell\naddSubscribers :: Client -> QueueName -> [Subscriber]
  -> IO IRonResponse\naddSubscribers client test_queue [subscriber {url = \"http://endpoint1.com\"},
  subscriber {url = \"https://end.point.com/2\"}])\n```\n\n### Remove subscribers
  from a push queue\n\n```haskell\nremoveSubscribers :: Client -> QueueName -> [Subscriber]\nmain
  = removeSubscribers client \"test_queue\" [subscriber {url = \"http://endpoint1.com\"},
  subscriber {url =\"https://end.point.com/2\"})\n```\n\n### Get the push statuses
  of a message\n\n```haskell\ngetMessagePushStatuses :: Client -> QueueName -> ID
  -> IO SubscriberList\ngetMessagePushStatuses client \"test_queue\" \"123456789abcdef\"\n{-\n
  \   subscriberList {\n    subscribers = [Subscriber {retriesDelay = Just 60, retriesRemaining\"
  = Just 2, statusCode = Just 200, status = Just \"deleted\", \"url\": \"http://endpoint1.com\",
  \"id\": \"52..\"}, ...]}\n-}\n```\n\n### Delete a pushed message\n\nIf you respond
  with a 202 status code, the pushed message will be reserved, not deleted, and should
  be manually deleted. You can get the message ID and subscriber ID from the push
  message's headers.\n\n```haskell\ndeleteMessagePushStatus :: Client -> QueueName
  -> MessageID -> [SuscriberID] -> IO IronResponse\nmain = deleteMessagePushStatus
  client \"test_queue\" \"123456789abcdef\" \"987654321fedcba\"\n```\n\n## Pull queues\n\n###
  Add alerts to a queue\n\n```haskell\nfixed_desc_alert = alert {type = \"fixed\",
  direction = \"desc\", trigger = 1000}\nprogressive_asc_alert = alert {type = \"progressive\",
  direction = \"asc\", trigger= 10000}\naddAlerts :: Client -> QueueName -> [Alert]
  -> IO IronResponse\naddAlerts client \"test_queue\" ([fixed_desc_alert, progressive_asc_alert])\n```\n\n###
  Update alerts in a queue\n\n```haskell\nprogressive_asc_alert = alert {type = \"progressive\",
  direction = \"asc\", trigger = 5000, queue = \"q\"}\nupdateAlerts :: Client -> QueueName
  -> [Alert] -> IO IronResponse\nupdateAlerts client \"test_queue\" ([progressive_asc_alert])\n```\n\n###
  Remove alerts from a queue\n\n```haskell\nremoveAlerts :: Client -> QueueName ->
  [AlertID] -> IO IronResponse\nmain = removeAlerts client \"test_queue\" (['5305d3b5a3e920763013c796',
  '513015d32b5a3e763013c796'])\n```\n\n# Full Documentation\n\nYou can find more documentation
  here:\n\n* http://iron.io\n* http://dev.iron.io"
license-name: GPL-3.0-only
