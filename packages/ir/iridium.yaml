homepage: https://github.com/lspitzner/iridium
changelog-type: markdown
hash: e7de54385c10a61579b5c3c05119b13cea43872128aebfaded461f37870cd8b1
test-bench-deps: {}
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: Automated Local Cabal Package Testing and Uploading
changelog: ! "# Revision history for iridium\n\n## 0.1.5.8  -- 2018-10-02\n\n  * Add
  support for -Wcompat\n  * Reduce dependency footprint by using json endpoint of
  hackage interface\n\n## 0.1.5.7  -- 2017-08-01\n\n  * Adapt for cabal-2.0 - Note
  that this is a breaking change; uploading with\n    cabal-1.* will not work with
  this version.\n\n## 0.1.5.6  -- 2016-09-28\n\n  * Only internal changes (support
  ghc-8, fix support for ghc-7.8;\n    adapt/switch to turtle-1.3.0)\n\n## 0.1.5.5
  \ -- 2016-09-28\n\n  * Slight improvements around the handling of testing against
  multiple\n    compiler versions\n\n## 0.1.5.4  -- 2016-05-21\n\n  * Fix git branch
  parsing issue\n\n## 0.1.5.3  -- 2016-04-22\n\n  * Include `cabal update` invocation
  by default\n  * Add warning for missing remote version\n\n## 0.1.5.2  -- 2016-03-11\n\n
  \ * Improve stackage upper-bound check error output\n\n## 0.1.5.1  -- 2016-03-11\n\n
  \ * Fix iridium package pvp compliance (lower bounds)\n  * First hackage release\n\n##
  0.1.5.0  -- 2016-03-11\n\n  * Add package-sdist check\n\n  * Prepare non-static
  default config\n\n## 0.1.4.0  -- 2016-02-22\n\n  * Fix various bugs\n\n  * Make
  various changes to the default iridium.yaml\n\n  * Fix/Expand basic git functionality;
  it includes:\n    * Displaying current branch\n    * Tagging the current commit\n
  \   * Pushing tag and branch to remote\n\n## 0.1.4.0  -- 2016-02-18\n\n  * Start
  integrating some git-specific functionality\n\n## 0.1.2.0  -- 2016-02-17\n\n  *
  First release, experimental.\n"
basic-deps:
  bytestring: ! '>=0.10.4.0 && <0.11'
  extra: ! '>=1.4.3 && <1.7'
  split: ! '>=0.2.3 && <0.3'
  Cabal: ! '>=1.22.5.0 && <1.25'
  base: ! '>=4.8 && <4.11'
  unordered-containers: ! '>=0.2.5.1 && <0.3'
  text: ! '>=1.2.2.0 && <1.3'
  monad-control: ! '>=1.0.0.5 && <1.1'
  process: ! '>=1.2.3.0 && <1.5'
  lifted-base: ! '>=0.2.3.6 && <0.3'
  multistate: ! '>=0.7.0.0 && <0.8'
  turtle: ! '>=1.3.0 && <1.4'
  tagged: ! '>=0.8.3 && <0.9'
  containers: ! '>=0.5.5.1 && <0.6'
  ansi-terminal: ! '>=0.6.2.3 && <0.7'
  iridium: -any
  network-uri: ! '>=2.6 && <2.7'
  foldl: ! '>=1.1.5 && <1.3'
  transformers-base: ! '>=0.4.4 && <0.5'
  HTTP: ! '>=4000.3 && <4000.4'
  transformers: ! '>=0.3.0.0 && <0.6'
  system-filepath: ! '>=0.4.13.4 && <0.5'
  aeson: ! '>=1.4 && <1.5'
  yaml: ! '>=0.8.16 && <0.9'
  vector: ! '>=0.11.0.0 && <0.13'
all-versions:
- '0.1.5.1'
- '0.1.5.2'
- '0.1.5.3'
- '0.1.5.4'
- '0.1.5.5'
- '0.1.5.6'
- '0.1.5.7'
- '0.1.5.8'
author: Lennart Spitzner
latest: '0.1.5.8'
description-type: markdown
description: ! "# iridium\n\n[![Build Status](https://secure.travis-ci.org/lspitzner/iridium.svg)](http://travis-ci.org/lspitzner/iridium)\n[![Hackage](https://img.shields.io/hackage/v/iridium.svg)](https://hackage.haskell.org/package/iridium)\n\n#
  Introduction\n\niridium is a fancy wrapper around `cabal upload`. It aims to automate\nseveral
  typical steps when releasing a new package version to hackage.\n\nIridium does all
  testing locally, in contrast to e.g. github's travis.\nThis makes it easier to keep
  your published history free of commits that\nfail any tests (without squashing or
  separate branches).\n\nSteps currently include:\n\n- Compilation and running tests
  using multiple compiler versions.\n  (the different compilers must already be installed.)\n\n-
  Checking that the changelog mentions the latest version.\n\n- Checking that the
  upper bounds of dependencies\n  are up-to-date by making use of stackage snapshots.\n\n-
  Uploading of both the package itself and the documentation.\n\nThe output on errors
  is certainly not optimal; for example the stackage\nupper bound checking will print
  a typical, hard-to-consume cabal error\nmessage. iridium's focus is on notifying
  _if_ something is wrong.\n\n# Usage\n\nInstall iridium, run iridium in the directory
  containing the cabal package.\nIt won't do anything without confirmation.\n\n~~~~\n$
  iridium\nChecking compilation with different compiler versions\n  Checking with
  compiler ghc-7.8.4:                                   clear.\nChecking upper bounds
  using stackage:                                 clear.\nChecking documentation:
  \                                              clear.\nChecking basic compilation:
  \                                          clear.\nChecking that all dependencies
  have a lower bound:                    clear.\nChecking that all dependencies have
  an upper bound:                   clear.\nChecking package validity:                                            clear.\nTesting
  the source distribution package:                              clear.\nTesting if
  the changelog mentions the latest version:                 clear.\nComparing local
  version to hackage version:                           clear.\n[git]\n  Testing for
  uncommitted changes:                                    clear.\nSummary:\n  Package:
  \               iridium\n  Version:                0.1.5.1\n  Warning count:          0\n
  \ Error   count:          0\n  Not -Wall clean:        []\n  [git]\n    Branch:
  \              master\n  Actions:                Tag the current commit with \"0.1.5.1\"\n
  \                         Push current branch and tag to upstream repo\n                          Upload
  package\n                          Upload documentation\n> Continue [y]es [n]o?
  > y\nPerforming upload..\nBuilding source dist for iridium-0.1.2.0...\nPreprocessing
  library iridium-0.1.2.0...\nPreprocessing executable 'iridium' for iridium-0.1.2.0...\nSource
  tarball created: dist/iridium-0.1.2.0.tar.gz\nHackage password:\nUploading dist/iridium-0.1.2.0.tar.gz...\nOk\nUpload
  successful.\nPerforming doc upload..\n[.. some haddock spam ..]\nDocumentation tarball
  created: dist/iridium-0.1.2.0-docs.tar.gz\nHackage password:\nUploading documentation
  dist/iridium-0.1.2.0-docs.tar.gz...\nOk\nDocumentation upload successful.\n$\n~~~~\n\n#
  Configuration\n\nAn `iridium.yaml` file will be created on first invocation.\n\n#
  Tests\n\n| Test | Description |\n| --- | --- |\n| hlint | `forM_ hs-source-dirs
  $ \\dir -> (\\dir -> call \"hlint \" ++ dir)` |\n| testsuites | run `cabal test`
  when compiling. |\n| upper-bounds-stackage | Check that upper bounds are up-to-date
  by using a stackage cabal.config. This is not the best way, because not all packages
  are on stackage, but it is better than nothing. |\n| lower-bounds-exist | Check
  that all dependencies have a lower bound. |\n| upper-bounds-exist | Check that all
  dependencies have an upper bound. (You _do_ want to conform with the PVP, right?)
  |\n| documentation | Check that haddocks can be created without problems (calling
  `cabal haddock`). |\n| changelog | Check if the changelog mentions (contains) the
  latest version. |\n| package-sdist | Check that all necessary stuff is contained
  in the source distribution by installing the packaged package. |\n| compiler-versions
  | Compile and run tests for several compiler versions (other than the default compiler
  on $PATH). |\n"
license-name: BSD3
