homepage: https://github.com/minoki/purescript-tsd-gen#readme
changelog-type: markdown
hash: a79e0fff295d8eea370425924c7fdc466edb78a589f7f3a63e202418c838d103
test-bench-deps: {}
maintainer: ARATA Mizuki <minorinoki@gmail.com>
synopsis: TypeScript Declaration File (.d.ts) generator for PureScript
changelog: ! '# Changelog for purescript-tsd-gen


  ## 0.2.0.0


  * Support for PureScript v0.12.0.

  * Support `Data.Variant.Variant` from [purescript-variant](https://github.com/natefaubion/purescript-variant).

  * Support `Data.Nullable.Nullable` from [purescript-nullable](https://github.com/purescript-contrib/purescript-nullable).


  ## 0.1.0.0


  Initial release.

'
basic-deps:
  bytestring: -any
  purescript-tsd-gen: -any
  base: ! '>=4.7 && <5'
  text: -any
  filepath: -any
  containers: -any
  purescript: ! '>=0.12.0'
  mtl: -any
  optparse-applicative: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
author: ARATA Mizuki <minorinoki@gmail.com>
latest: 0.2.0.0
description-type: markdown
description: ! "# purescript-tsd-gen\n\nThis is a TypeScript Declaration File (.d.ts)
  generator for PureScript.\n\nThis tool helps you use PureScript modules from TypeScript.\n\n#
  How to build\n\n```sh\n$ git clone https://github.com/minoki/purescript-tsd-gen.git\n$
  cd purescript-tsd-gen\n$ stack install\n```\n\n# How to use\n\nAssuming you have
  compiled PureScript modules into `./output`:\n\n```sh\n$ tree output/\noutput/\n├──
  Control.Alt\n│   ├── externs.json\n│   └── index.js\n├── Control.Alternative\n│  
  ├── externs.json\n│   └── index.js\n...\n└── YourFancyModuleInPurs\n    ├── externs.json\n
  \   └── index.js\n```\n\nRun the following to get the declaration files:\n\n```sh\n$
  purs-tsd-gen -d output/ YourFancyModuleInPurs\n```\n\nNow you get `index.d.ts` alongside
  each module's `index.js`:\n\n```sh\n$ tree output/\noutput/\n├── Control.Alt\n│  
  ├── externs.json\n│   ├── index.d.ts\n│   └── index.js\n├── Control.Alternative\n│  
  ├── externs.json\n│   ├── index.d.ts\n│   └── index.js\n...\n└── YourFancyModuleInPurs\n
  \   ├── externs.json\n    ├── index.d.ts\n    └── index.js\n```\n\n# Mapping of
  types\n\n## Builtin\n\nPrimitive types translates as one would imagine:\n\n- `Function
  s t` (`s -> t`) --> `(_: s) => t`\n- `Array t` --> `Array<t>`\n    - TODO: Add an
  option to emit `ReadonlyArray<t>`.\n- `Record { key1 :: Type1, key2 :: Type2 }`
  --> `{ key1: Type1, key2: Type2 }`\n    - TODO: Add an option to make fields `readonly`.\n-
  `Number`, `Int` --> `number`\n- `String`, `Char` --> `string`\n- `Boolean` --> `boolean`\n\nSome
  modules get special handling:\n\n- `Data.Function.Uncurried`\n  - `Fn0 r` --> `()
  => r`\n  - `Fn2 a0 a1 r` --> `(_0: a0, _1: a2) => r`\n  - `Fn3 a0 a1 a2 r` --> `(_0:
  a0, _1: a1, _2: a2) => r`\n  - ...\n  - `Fn10 a0 a1 .. a9 r` --> `(_0: a0, ...,
  _9: a9) => r`\n- `Effect`\n  - `Effect a` -> `() => a`\n- `Control.Monad.Eff`\n
  \ - `Eff e r` -> `() => r`\n- `Data.StrMap.StrMap`\n  - `StrMap t` --> `{[_: string]:
  t}`\n- `Data.Variant` (from [purescript-variant](https://github.com/natefaubion/purescript-variant))\n
  \ - `Variant (tag1 :: Type1, tag2 :: Type2)` --> `{type: \"tag1\", value: Type1}
  | {type: \"tag2\", value: Type2}`\n- `Data.Nullable` (from [purescript-nullable](https://github.com/purescript-contrib/purescript-nullable))\n
  \ - `Nullable a` --> `a | null`\n\n## User-defined Data Types\n\nData type `SomeFancyDataType
  :: Type -> ... -> Type -> Type` is translated to `SomeFancyDataType<a0, ..., an>`.\n\nIn
  contrast to usual TypeScript's structual subtyping, the translated types mimicks
  nominal typing with extra dummy fields.\n\nSum types are translated to discriminated
  union types, with a dummy tag field.  Type guards with `instanceof` should work.\n\nData
  constructors are typed as an object type with `new` signature and `create` or `value`
  field.\n\nTypes whose data constructors are not exposed, i.e. abstract types, are
  translated to an object type which contains `never` as a field, so that you cannot
  accidentally create a value of abstract types in TypeScript world.\n\nLet's see
  some examples:\n\n- Tuple\n\n```purescript\ndata Tuple a b = Tuple a b\n```\n\ncompiles
  to:\n\n```typescript\nexport type /*data*/ Tuple<a, b> = Tuple$$Tuple< a, b >;\ninterface
  Tuple$$Tuple<a, b> {\n    \"$$pursType\"?: \"Data.Tuple.Tuple\";\n    \"$$pursTag\"?:
  \"Tuple\";\n    value0: a;\n    value1: b;\n}\nexport const /*data ctor*/ Tuple:
  { create: <a, b>(_: a) => (_: b) => Tuple< a, b >; new <a, b>(_0: a, _1: b): Tuple$$Tuple<
  a, b > };\n```\n\n- Maybe\n\n```purescript\ndata Maybe a = Nothing | Just a\n```\n\ncompiles
  to:\n\n```typescript\nexport type /*data*/ Maybe<a> = Maybe$$Nothing | Maybe$$Just<
  a >;\ninterface Maybe$$Nothing {\n    \"$$pursType\": \"Data.Maybe.Maybe\";\n    \"$$pursTag\":
  \"Nothing\";\n}\nexport const /*data ctor*/ Nothing: { value: Maybe< any /* type
  variable a */ >; new (): Maybe$$Nothing };\ninterface Maybe$$Just<a> {\n    \"$$pursType\":
  \"Data.Maybe.Maybe\";\n    \"$$pursTag\": \"Just\";\n    value0: a;\n}\nexport const
  /*data ctor*/ Just: { create: <a>(_: a) => Maybe< a >; new <a>(_: a): Maybe$$Just<
  a > };\n```\n\n- Either\n\n```purescript\ndata Either a b = Left a | Right b\n```\n\ncompiles
  to:\n\n```typescript\nexport type /*data*/ Either<a, b> = Either$$Left< a > | Either$$Right<
  b >;\ninterface Either$$Left<a> {\n    \"$$pursType\": \"Data.Either.Either\";\n
  \   \"$$pursTag\": \"Left\";\n    value0: a;\n}\nexport const /*data ctor*/ Left:
  { create: <a, b>(_: a) => Either< a, b >; new <a>(_: a): Either$$Left< a > };\ninterface
  Either$$Right<b> {\n    \"$$pursType\": \"Data.Either.Either\";\n    \"$$pursTag\":
  \"Right\";\n    value0: b;\n}\nexport const /*data ctor*/ Right: { create: <a, b>(_:
  b) => Either< a, b >; new <b>(_: b): Either$$Right< b > };\n```\n\n## Newtypes\n\nNewtypes
  are translated to a type synonym.  The nominal property in PureScript is lost.\n\n##
  `foreign import data`\n\n`foreign import data` are translated to `any`.\n\nMaybe
  there should be a way for PS-library authors to provide corresponding `.d.ts` for
  foreign JavaScript modules.\n\n## Universally Quantified Types\n\nSimple polymorphic
  functions translate to generic functions.\n\nIf the type is too complex, there may
  situations where the emitted declarations contain undue `any` type.\n\n## Higher-Kinded
  Types\n\nNot supported.\n\nTODO: Investigate if we can reasonably emulate higher-kinded
  types in TypeScript.\n\n## Type Classes\n\nNeed more work.\n"
license-name: BSD-3-Clause
