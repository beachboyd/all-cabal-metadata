homepage: https://github.com/bitc/purescript-bundle-fast
changelog-type: ''
hash: 6a867bd53910bc58ef98d90d705753e42fabc70a0bfbda699cb4588ece38ba76
test-bench-deps: {}
maintainer: mutantlemon@gmail.com
synopsis: A fast alternative to Purescript's `psc-bundle` to be used during development
changelog: ''
basic-deps:
  base: ==4.*
  text: -any
  filepath: -any
  containers: -any
  optparse-applicative: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.0.1
author: Bit Connor
latest: 0.1.0.1
description-type: markdown
description: ! "# purescript-bundle-fast\n\nTested with PureScript version 0.7.1.0\n\n\n##
  Synopsis\n\nA fast alternative to Purescript's `psc-bundle` to be used during development.\n\n\n##
  About\n\nOne great thing about programming in JavaScript is the speed of development.\nJust
  edit your source code file, and immediately reload your browser to\ninstantly see
  your changes.\n\nWith PureScript, you must go through a compilation process. Even
  if it only\ntakes a few seconds, the lag becomes frustrating when trying to iterate\nrapidly.\n\nBut
  we can try to bring the compilation time down to almost nothing! This\nproject manages
  to do so for the `psc-bundle` stage of compilation. It is a\ntool called `psc-bundle-fast`
  that replaces the official `psc-bundle` tool that\ncomes with PureScript.\n\n`psc-bundle-fast`
  should be used only during development. For production you\nshould still use the
  official `psc-bundle` since it does dead code elimination\nand will produce smaller
  output files.\n\n\n## Benchmarks\n\nSo how much faster is it? Results for a sample
  project:\n\n| Command         | Time   | Output .js Size\n| --------------- | ------
  | ---------------\n| psc-bundle      | 1.458s |            108K\n| psc-bundle-fast
  | 0.091s |            464K\n\nThat's 16x faster! It's bigger because it contains
  lots of library code that is\nnot being used (regular `psc-bundle` strips this out).
  But for local\ndevelopment, the larger file size has negligible impact on load time,
  and no\nimpact on performance.\n\n### What about browserify and webpack?\n\nThey
  are even slower than PureScript's `psc-bundle`. Feel free to run your own\nbenchmarks
  (and tell us the results!)\n\n\n## Installation\n\nYou need GHC and cabal.\n\n    $
  cabal update\n    $ cabal install purescript-bundle-fast\n\n\n## Example Usage\n\nFirst,
  use `psc` as usual to compile your program:\n\n    $ psc     './bower_components/**/src/*.purs'
  \\\n        --ffi './bower_components/**/src/*.js' \\\n              './src/**/*.purs'
  \\\n        --ffi './src/**/*.js' \\\n        -o output\n\nNow, just for a comparison,
  here is how we'd use the regular `psc-bundle`:\n\n    $ psc-bundle './output/**/*.js'
  -m Main --main Main -o app.js\n\nAnd here is how you would use `psc-bundle-fast`
  instead of the previous step:\n\n    $ psc-bundle-fast -i output -m Main --main
  Main -o app.js\n\n\n## Differences with `psc-bundle` and limitations\n\nUnlike `psc-bundle`,
  `psc-bundle-fast` does not use a real JavaScript parser.\nTherefore:\n\n1. It is
  not able to perform dead code elimination the way that `psc-bundle`\n   does, so
  it will produce output files that are larger.\n\n2. It will not detect syntax errors
  in `foreign.js` files. (This is actually an\n   advantage since the error messages
  that `psc-bundle` generates are\n   confusing. It's more helpful to see the error
  that the browser shows).\n\n3. `foreign.js` files that use `require` to load external
  JavaScript\n   modules/libraries will not work. These `foreign.js` files will load,
  but if\n   they are executed then an error will be triggered. If you need to a\n
  \  PureScript library that has such `require` usage, then you will need to\n   externally
  load the required JavaScript library, and then create a stub\n   function called
  \"require\" that hooks into it. (If you succeed to do this\n   then share with us
  how you did it!)\n\n4. The custom parser that `psc-bundle-fast` uses is brittle
  and relies on the\n   specific format that `psc` outputs. If `psc` ever makes (even
  slight)\n   changes to its output then `psc-bundle-fast` will break.\n\n\n## Usage\n\n```\npsc-bundle-fast
  - Bundles compiled PureScript modules for the browser (fast\nversion, for development)\n\nUsage:
  psc-bundle-fast (-i|--input-dir DIR) [-o|--output FILE]\n                       (-m|--module
  MODULE) [--main MODULE] [-n|--namespace ARG]\n\nAvailable options:\n  --version
  \               Show the version number\n  -h,--help                Show this help
  text\n  -i,--input-dir DIR       The directory containing the compiled modules.
  This\n                           directory should contain a subdirectory for each\n
  \                          compiled module(with the name of the module), and\n                           within
  each of those there should be an index.js (and\n                           optional
  foreign.js) file. The psc compiler usually\n                           calls the
  desired directory \"output\"\n  -o,--output FILE         The output .js file (Default
  is stdout)\n  -m,--module MODULE       Entry point module name(s). All code which
  is not a\n                           transitive dependency of an entry point module
  will\n                           be removed.\n  --main MODULE            Generate
  code to run the main method in the specified\n                           module.\n
  \ -n,--namespace ARG       Specify the namespace that PureScript modules will be\n
  \                          exported to when running in the\n                           browser.
  (default: \"PS\")\n```\n"
license-name: MIT
