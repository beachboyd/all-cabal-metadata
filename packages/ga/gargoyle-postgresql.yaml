homepage: ''
changelog-type: markdown
hash: 7494fe75062b6cdad7cdc7c5623ba2e85b3db455d010cd984cec70d36a213205
test-bench-deps:
  gargoyle: -any
  gargoyle-postgresql: -any
  bytestring: -any
  unix: -any
  base: -any
  text: -any
  filepath: -any
  process: -any
  directory: -any
maintainer: maintainer@obsidian.systems
synopsis: Manage PostgreSQL servers with gargoyle
changelog: |
  # Changelog for gargoyle-postgresql

  ## 0.2

  * Bugfix: Replace use of file handle with /dev/null to fix a crash due to lack of referential transparency in GHCs behavior with respect to file Handles
  * Loosen version bounds
  * Add `gargoyle-pg-run`, which makes it easier to run gargoyle-database-using programs (e.g., psql, pg_dump).
  * Enable test suite by default

  ## 0.1

  * Initial release
basic-deps:
  gargoyle: ==0.1.1
  gargoyle-postgresql: -any
  bytestring: '>=0.10 && <0.12'
  unix: '>=2.7.2 && <2.8'
  base: '>=4.12 && <4.15'
  text: ==1.2.*
  stringsearch: '>=0.3 && <0.4'
  process: '>=1.5 && <1.7'
  posix-escape: '>=0.1 && <0.2'
  directory: '>=1.3 && <1.4'
all-versions:
- '0.1'
- 0.2.0.0
author: Obsidian Systems LLC
latest: 0.2.0.0
description-type: haddock
description: |-
  This package provides tools for managing PostgreSQL servers that live in local folders and communicate via a Unix domain socket. It uses the <https://hackage.haskell.org/package/gargoyle gargoyle> package in order to automatically initialize, spin up, and spin down such servers according to client demand.

  The `gargoyle-psql` executable is such a client which will try to connect to a PostgreSQL server at a given location:

  > gargoyle-psql db

  > psql (9.5.6)
  > Type "help" for help.
  >
  > postgres=#

  Note that `gargoyle-psql` assumes that PostgreSQL executables such as `psql` are available on the PATH. A custom 'Gargoyle' is required to use non-standard PostgreSQL installations.

  The following is an example of using this package to run <https://hackage.haskell.org/package/postgresql-simple postgresql-simple> actions using a local DB:

  > import Database.PostgreSQL.Simple
  > import Gargoyle
  > import Gargoyle.PostgreSQL
  >
  > withDb :: String -> (Connection -> IO a) -> IO a
  > withDb dbPath a = withGargoyle defaultPostgres dbPath $ \dbUri -> a =<< connectPostgreSQL dbUri
license-name: BSD-3-Clause
