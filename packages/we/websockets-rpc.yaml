homepage: https://github.com/athanclark/websockets-rpc#readme
changelog-type: ''
hash: 8d0e6d32cf3a3e217c359f180f934dce787a377ae9759b0eda379e14fc8afef6
test-bench-deps:
  exceptions: -any
  bytestring: -any
  websockets-rpc: -any
  wai-transformers: -any
  stm: -any
  base: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  websockets-simple: ! '>=0.1.0'
  monad-control: -any
  async: -any
  websockets: ! '>=0.12'
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  mtl: -any
  hashable: -any
  transformers: -any
  tasty: -any
  QuickCheck: -any
  aeson: -any
maintainer: athan.clark@gmail.com
synopsis: Simple streaming RPC mechanism using WebSockets
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: -any
  wai-transformers: -any
  stm: -any
  base: ! '>=4.10 && <5.0'
  unordered-containers: -any
  text: -any
  uuid: -any
  websockets-simple: ! '>=0.1.0'
  monad-control: -any
  async: -any
  websockets: ! '>=0.12'
  containers: -any
  mtl: -any
  hashable: -any
  transformers: -any
  QuickCheck: -any
  aeson: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.1.0'
- '0.1.1'
- '0.2.0'
- '0.3.0'
- '0.3.1'
- '0.4.0'
- '0.4.1'
- '0.5.0'
- '0.5.1'
- '0.6.0'
- '0.7.0'
author: Athan Clark
latest: '0.7.0'
description-type: markdown
description: ! "websockets-rpc\n===============\n\nA simple message-based streaming
  RPC mechanism built using WebSockets\n\n## Usage\n\nThe idea is pretty simple:\n\n-
  A client initiates the RPC call to a server with a `Subscription`\n- the client
  may send additional data at any time with `Supply`, who can also cancel the RPC
  call\n- the server may respond incrementally with `Reply`\n- the server finishes
  the RPC call with a `Complete`\n\n```\nclient                                                         server\n
  \   ------------------------subscribe--------------------------->\n    - - - - -
  - - - - - - - -supply - - - - - - - - - - - - - - >\n    < - - - - - - - - - - -
  -reply- - - - - - - - - - - - - - - -\n    <-----------------------complete-----------------------------\n```\n\nif
  the `supply` and `reply` parts were ommitted, it would be identical to a traditional
  RPC mechanism.\n\n\n### Example\n\n```haskell\nimport Network.WebSockets.RPC\nimport
  Data.Aeson\n\n-- subscriptions from client to server\ndata MySubDSL = Foo\n  deriving
  (FromJSON, ToJSON) -- you should figure this part out :)\n\n-- supplies from client
  to server\ndata MySupDSL = Bar\n  deriving (FromJSON, ToJSON)\n\n-- replies from
  server to client\ndata MyRepDSL = Baz\n  deriving (FromJSON, ToJSON)\n\n-- onCompletes
  from server to client\ndata MyComDSL = Qux\n  deriving (FromJSON, ToJSON)\n```\n\n\nServer:\n\n```haskell\n{-#
  LANGUAGE NamedFieldPuns, ScopedTypeVariables #-}\n\n\nmyServer :: (MonadIO m, MonadThrow
  m) => ServerAppT (WebSocketServerRPCT MySubDSL MySupDSL m)\nmyServer = rpcServer
  $ \\RPCServerParams{reply,complete} eSubSup -> case eSubSup of\n  Left Foo -> do\n
  \   forM_ [1..5] $ \\_ -> do\n      liftIO $ threadDelay 1000000\n      reply Baz\n
  \   complete Qux\n  Right Bar -> reply Baz\n```\n\nClient:\n\n```haskell\n{-# LANGUAGE
  NamedFieldPuns #-}\n\n\nmyClient :: (MonadIO m, MonadThrow m) => ClientAppT (WebSocketClientRPCT
  MyRepDSL MyComDSL m) ()\nmyClient = rpcClient $ \\dispatch ->\n  -- only going to
  make one RPC call for this example\n  dispatch RPCClient\n    { subscription = Foo\n
  \   , onReply = \\RPCClientParams{supply,cancel} Baz -> do\n        liftIO $ threadDelay
  1000000\n        supply Bar\n        (q :: Bool) <- liftIO getRandom\n        if
  q then cancel else pure ()\n    , onComplete = \\Qux -> liftIO $ putStrLn \"finished\"\n
  \   }\n```\n\n> the `threadDelay` calls are just to exemplify the asynchronisity
  of the system, nothing to do with avoiding race conditions >.>\n\n\nTo turn the
  `ServerAppT` and `ClientAppT` into natural [WebSockets](https://hackage.haskell.org/package/websockets)\ntypes,
  use the morphisms from [Wai-Transformers](https://hackage.haskell.org/package/wai-trasformers).\n\n\n##
  Contributing\n\nthis is my swamp\n"
license-name: BSD3
