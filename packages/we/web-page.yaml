homepage: http://hub.darcs.net/ertes/web-page
changelog-type: ''
hash: 686d51260ab677d1962414d5b08509eb07b077c8885e2cd37a3c0b4b3272a57c
test-bench-deps: {}
maintainer: Ertugrul Söylemez <ertesx@gmx.de>
synopsis: Monoidally construct web pages
changelog: ''
basic-deps:
  Stream: ! '>=0.4 && <1'
  bytestring: ! '>=0.10 && <1'
  clay: ! '>=0.9 && <1'
  base: ! '>=4.5 && <5'
  text: ! '>=1.0 && <2'
  jmacro: ! '>=0.6 && <1'
  containers: ! '>=0.5 && <1'
  blaze-builder: ! '>=0.3 && <1'
  lens: ! '>=4.4 && <5'
  wl-pprint-text: ! '>=1.1 && <2'
  mtl: ! '>=2.1 && <3'
  blaze-html: ! '>=0.7 && <1'
  vector: ! '>=0.10 && <1'
all-versions:
- 0.1.0
- 0.2.0
author: Ertugrul Söylemez <ertesx@gmx.de>
latest: 0.2.0
description-type: markdown
description: ! "Web-page\n========\n\nThis package combines blaze-html, clay and jmacro
  into a\nframework-agnostic library to generate web pages dynamically from\nindividual
  components.  It is inspired by Yesod's widgets, but is more\ngeneral, more powerful
  and can be used with other web frameworks.\n\n\nFeatures\n--------\n\nThe `Widget`
  type is very expressive.  The following features are built\nin:\n\n  * works with
  your web framework of choice,\n  * fully embedded stylesheet and script languages
  (jmacro and clay),\n  * page-specific or external stylesheets and script,\n  * type-safe
  routing,\n  * flexible polymorphic body type,\n  * monoidal piece-by-piece construction
  of pages,\n  * hierarchial titles,\n  * additional head markup,\n  * optional lens
  interface,\n  * rendering to multiple documents (e.g. separate stylesheet and\n
  \   script).\n\nOther features are add-ons:\n\n  * non-HTML bodies (e.g. Pandoc
  integration),\n  * multipart bodies aka *sections*,\n  * page-unique identifier
  generation.\n\n\nUsage\n-----\n\nThis is a brief overview of the process to construct
  and render a web\npage using this library.  First of all you will need a few extensions:\n\n
  \   {-# LANGUAGE FlexibleContexts #-}\n    {-# LANGUAGE OverloadedStrings #-}\n
  \   {-# LANGUAGE QuasiQuotes #-}\n\nThe `OverloadedStrings` extension is optional,
  but makes writing\nblaze-html markup and clay stylesheets a lot more convenient.
  \ The\n`QuasiQuotes` extension is only required for jmacro, if you need scripts\nin
  your widgets.  With that aside the first step is to understand the\n`Widget` type:\n\n
  \   Widget url h\n\nThe type argument `url` is your URL type.  If you don't use
  type-safe\nrouting, then simply use `url = Text`.  This is only significant for\nexternal
  stylesheets and scripts.  If you don't use any of them, just\nleave it polymorphic.\n\nThe
  second type argument `h` is the page body type.  For now just use\n`Html` (from
  blaze-html), which means that the body of your page will be\nsimple unstructured
  HTML markup.\n\n\n### Construction\n\n`Widget` is a family of monoids.  While you
  could use the `Monoid`\ninterface directly it's usually much more convenient to
  use a writer\nmonad to construct your widgets.  In most cases the correct type will
  be\ninferred, but we will specify it regardless:\n\n    myWidget :: (MonadWriter
  (Widget url Html) m) => m ()\n\nIf you are like me, you prefer to write type signatures
  for your\ntop-level definitions.  A constraint alias is provided for your\nconvenience.
  \ The following type signature is equivalent to the above:\n\n    myWidget :: (MonadWidget
  url Html m) => m ()\n\nIf writer is the only effect you need, there is an even simpler
  alias\nthat you can use, which is equivalent to the above as well:\n\n    myWidget
  :: WidgetWriter url Html ()\n\nNow we can construct the widget piece by piece:\n\n
  \   myWidget = do\n        setTitle \"Hello\"\n        addBody (H.h1 \"Hello\")\n
  \       addBody (H.p \"Hello world!\")\n        addStyle $ html ? do\n            background
  white\n            color black\n\nYou can build the widget by reducing the writer:\n\n
  \   w :: Widget url Html\n    w = execWriter myWidget\n\nThis widget can now be
  rendered to a page.\n\n\n### Rendering\n\nTo render the widget you can use the `renderWidget`
  function:\n\n    renderWidget :: ([Text] -> Tl.Text) -> Widget Text Html -> Page\n\nThe
  `Text` type is the strict version, while the `Tl.Text` type is the\nlazy version.\n\nThe
  first argument to this function is the title renderer.  Widgets\ndefine an optional
  title, which is not just a text string, but a list of\ntext strings.  That's because
  this library supports hierarchial titles\nby using the `withTitle` function.  We
  will not cover this here.  Just\nuse `titleMinor`:\n\n    page :: Page\n    page
  = renderWidget (titleMinor \" - \") w\n\nPages are an intermediate step between
  rendering and delivery.  They are\nnecessary, because this library allows you to
  render to multiple\ndocuments, for example to a markup document, a stylesheet and
  a script.\nYou can then use a clever hash-based routing mechanism to tell clients\nto
  cache stylesheets and scripts forever and reduce the required\nbandwidth to a minimum.\n\n\n###
  Realisation\n\nTo process of finalising a page to an actual set of documents that
  you\ncan deliver is referred to as *realisation*.  We will simply render to a\nsingle
  document with an inline stylesheet and no script (because our\nwidget above doesn't
  define one).  The `realiseInline` function does\nexactly that:\n\n    realiseInline
  :: Page -> Builder\n\nAll we need to do is to apply it to our page:\n\n    document
  :: Builder\n    document = realiseInline page\n\nThe `Builder` type is the usual
  one from blaze-builder.  Most web\nframeworks use it for efficient bytestring concatenation
  and provide a\nsimple interface to deliver those strings to clients.  For example
  WAI\nprovides the `responseBuilder` function.  If you want to save the result\nto
  a file, just use `toLazyByteString` or `toByteStringIO`.\n"
license-name: BSD-3-Clause
