homepage: https://github.com/cameronbwhite/WeberLogic
changelog-type: ''
hash: 781bbbd71d76a8f235245283454ce0aca858309e742d33fedb93eb08b507ef0f
test-bench-deps: {}
maintainer: cameronbwhite90@gmail.com
synopsis: Logic interpreter
changelog: ''
basic-deps:
  base: ==4.6.*
  parsec: ==3.1.*
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
author: Cameron Brandon White
latest: 0.1.2
description-type: markdown
description: ! "WeberLogic\n=========\n\nLogic interpreter and parsing library\n\n##
  Install ##\n\n```sh\ncabal update\ncabal install WeberLogic\n```\n\n## Interpreter
  ##\n\n```\n$ ./WeberLogic\nEnter Command\n> truthTable: a&b+c->~a&b\n'a'   'b'   'c'
  \  | (((a&b)+c)->(~a&b))\nTrue  True  True  | False\nTrue  True  False | False\nTrue
  \ False True  | False\nTrue  False False | True \nFalse True  True  | True \nFalse
  True  False | True \nFalse False True  | False\nFalse False False | True \n\nEnter
  Command\n> toNand: a&b->c \n(((((a|b)|(a|b))|((a|b)|(a|b)))|(((a|b)|(a|b))|((a|b)|(a|b))))|(c|c))\n\nEnter
  Command\n> toNor: a&b->c\n(((((a/a)/(b/b))/((a/a)/(b/b)))/c)/((((a/a)/(b/b))/((a/a)/(b/b)))/c))\n```\n\n##
  Library ##\n\nThe library contains two modules. \n\n1. `WeberLogic.Parser`\n2. `WeberLogic.Actions`\n\n###
  WeberLogic.Parser ###\n\nThe `WeberLogic.Parser` provides functions which read stings
  and return\nan abstract syntax tree (AST). The AST in implement with a data type\ncalled
  `LogicExp` and `Letter`.\n\n* Data Types\n    * `LogicExp` - A recursively defined
  data type which implements as\n      abstract syntax tree. It provides the following
  type constructors\n      which function as nodes in the AST: `Not`, `And`, `Or`,
  `Implies`,\n      `Iff`, `Nand`, and `Nor`. The `Predicate` type constructor\n      functions
  as the AST leaves.\n      \n    ```haskell\n    > import WeberLogic.Parser\n    >
  Predicate 'A' [(Variable 'x', Name 'a')]\n    > Not (Predicate 'A' [(Variable 'x',
  Name 'a')])\n    > And (Predicate 'A' [(Variable 'x', Name 'a')]) (Predicate 'B'
  [])\n    ```\n\n    * `Letter` - This Data Constructor provies two Type constructors\n
  \     `Variable` and `Name`. They are used in the construction of\n      `Predicate`
  which requires a list of type `Letter`\n\n    ```haskell\n    > import WeberLogic.Parser\n
  \   > Predicate 'A' [(Variable 'x', Name 'a')]\n    ```\n\n* Functions\n    * `parseExp`\n\n
  \   ```haskell\n    > import WeberLogic.Parser\n    > a = parseExp \"Axa\"\n    >
  b = parseExp \"~Axa\"\n    > c = parseExp \"Axa&B\"\n    ```\n\n    * `parseArg`\n\n
  \   ```haskell\n    > import WeberLogic.Parser\n    > a = parseExp \"|- Axa\"\n
  \   > b = parseExp \"~Axa, B |- Cax\"\n    > c = parseExp \"Axa&B, B, C |- Ax->By\"\n
  \   ```\n\n### WeberLogic.Actions ###\n\nThe `WeberLogic.Actions` modules provides
  functions which manipulate the\n`LogicExp` AST. \n\n```haskell\n> import WeberLogic.Parser\n>
  import WeberLogic.Actions\n\n> mapM_ putStrLn $ truthTableStr $ readExp \"A&B\"\n'a'
  \  'b'   | (a&~b)\nTrue  True  | False\nTrue  False | True \nFalse True  | False\nFalse
  False | False\n\n> toNand $ readExp \"A&~B\" \n((a|(b|b))|(a|(b|b)))\n\n> toNor
  $ readExp \"A&~B\" \n((a/a)/((b/b)/(b/b)))\n```\n"
license-name: BSD-3-Clause
