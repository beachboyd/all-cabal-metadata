homepage: https://github.com/nshimaza/webex-teams-api#readme
changelog-type: markdown
hash: d724fd80ff14562eef7127f2d43c834c216425f54da443ed8619efb7b7e39067
test-bench-deps:
  warp: -any
  bytestring: -any
  wai: -any
  base: ! '>=4.7 && <5'
  hspec: -any
  text: -any
  webex-teams-api: -any
  async: -any
  data-default: -any
  network-uri: -any
  attoparsec: -any
  http-conduit: -any
  http-types: -any
  aeson: -any
maintainer: Naoto.Shimazaki@gmail.com
synopsis: A Haskell bindings for Webex Teams API
changelog: ! '## Webex-teams-api 0.2.0.0


  * First release of webex-teams-api.

  * Module name was changed but most of functions remain same.

  * Some key type classes with type families changed.

  * Streaming API is moved to separate packages.

  * Old streaming API is still available but deprecated.


  ## Cisco-spark-api 0.1.0.4


  * Final release of cisco-spark-api package.


  ## Cisco-spark-api 0.1.0.3


  * Cisco Spark is now Cisco Webex Teams.


  ## Cisco-spark-api 0.1.0.2


  * Catch up to conduit-1.3.0.


  ## Cisco-spark-api 0.1.0.1


  * Put explicit upper bound for conduit.


  ## Cisco-spark-api 0.1.0.0


  * Initial release.

'
basic-deps:
  bytestring: -any
  base: ! '>=4.7 && <5'
  text: -any
  webex-teams-api: -any
  bitset-word8: -any
  conduit: -any
  data-default: -any
  utf8-string: -any
  network-uri: -any
  attoparsec: -any
  optparse-applicative: -any
  http-conduit: -any
  aeson: -any
all-versions:
- 0.2.0.0
author: Naoto Shimazaki
latest: 0.2.0.0
description-type: markdown
description: ! "# webex-teams-api\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Build
  Status](https://travis-ci.org/nshimaza/webex-teams-api.svg?branch=master)](https://travis-ci.org/nshimaza/webex-teams-api)\n[![Hackage](https://img.shields.io/hackage/v/webex-teams-api.svg?style=flat)](https://hackage.haskell.org/package/webex-teams-api)\n[![Stackage
  Nightly](http://stackage.org/package/webex-teams-api/badge/nightly)](http://stackage.org/nightly/package/webex-teams-api)\n[![Stackage
  LTS](http://stackage.org/package/webex-teams-api/badge/lts)](http://stackage.org/lts/package/webex-teams-api)\n\nA
  Haskell bindings for Cisco Webex Teams (formerly Cisco Spark) API\n\nWebex-teams-api
  (formerly cisco-spark-api) package provides types and functions\nfor accessing Cisco
  Webex Teams REST API.  Details of the API is available\nfrom [developer site of
  Cisco Webex](https://developer.webex.com/)\n\nThis package is designed to improve
  type safety over the API.  Each entity is\nseparately typed.  JSON messages contained
  in REST responses are decoded into\nappropriate type of Haskell record.  JSON messages
  sent in REST requests are\nencoded only from correct type of record.\n\nSome Webex
  Teams REST API return list of objects.  Those APIs require HTTP Link\nHeader based
  pagination.  Haskell functions for those APIs automatically request\nsubsequent
  pages as needed.  This repo provides optional packages for streaming\nresponse of
  list API.  Webex-teams-conduit and webex-teams-pipes are thin\nwrappers of list
  API.  They transform chunky response from list API into\nseamless stream of elements.\n\nThis
  package also provides some sample usage in command line application style.\nSee
  source under app directory of the source package.\n\n### Sample Usage\n\nSending
  a message to a Room.\n\n```haskell\n    let auth        = Authorization \"your authorization
  token\"\n        roomId      = RoomId \"Room ID your message to be sent\"\n        messageText
  = MessageText \"your message\"\n        message     = CreateMessage (Just roomId)
  Nothing Nothing (Just messageText) Nothing Nothing\n    createEntity auth def createMessage
  >>= print . getResponseBody\n```\n\nFollowing example is calling List Membership
  API which returns membership between\nRooms and users (Person).  You can extract
  each Membership from\nConduit pipe.  The `streamListWithFilter`, provided by webex-teams-conduit,\nautomatically
  performs pagenation when it is asked more element and last\nresponse had link of
  subsequent page in HTTP Link Header.\n\n```haskell\n    let auth   = Authorization
  \"your authorization token\"\n        filter = MembershipFilter yourRoomId Nothing
  Nothing\n    runConduit $ streamListWithFilter auth def filter .| takeC 200 .| mapM_C
  print\n```\n\nYou can find more examples in app/Main.hs under webex-teams-pipes
  or\nwebex-teams-conduit.\n\n### Support for Lens\n\nThis package provides many of
  records representing objects communicated via\nWebex Teams REST API.  Those records
  are designed to allow create lenses by\nControl.Lens.TH.makeFields.\n\nFollowing
  example creates overloaded accessors for 'Person', 'Room' and 'Team'.\n\n```haskell\nmakeFields
  ''Person\nmakeFields ''Room\nmakeFields ''Team\n```\n\nYou can access 'personId',
  'roomId' and 'teamId' via overloaded accessor\nfunction 'id' like this.\n\n```haskell\n
  \   let yourPersonId = yourPerson ^. id\n        yourRoomId = yourRoom ^. id\n        yourTeamId
  = yourTeam ^. id\n```\n\nThis package does not provide pre-generated lenses for
  you because not everyone\nneed it but you can make it by yourself so easily as described.\n\n###
  Limitation\n\n- WebHook API is not yet implemented.\n- Relative reference in Link
  Header is not recognized as next page\n"
license-name: MIT
