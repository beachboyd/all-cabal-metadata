homepage: http://sebfisch.github.com/haskell-regexp
changelog-type: markdown
hash: 64ea2496a9b167494cfb278a024e3aa87b691f5ddca6f6a3a2b0af15db4d426c
test-bench-deps: {}
maintainer: Sebastian Fischer
synopsis: Weighted Regular Expression Matcher
changelog: ! "% Changelog for [`weighted-regexp`]\n\n[`weighted-regexp`]: http://hackage.haskell.org/package/weighted-regexp\n\n#
  0.3.1.1\n\n## Use `BangPatterns` language extension\n\nAdded the `BangPatterns`
  language extension to the cabal file because\nwithout it the generated parser fails
  to build using GHC 7.2.\n\n# 0.3.1\n\n## Expose internal data types and matching
  functions\n\nAdded new module `Text.RegExp.Internal` that exposes internal data\ntypes
  and matching functions. Users probably don't want to use it\nunless they implement
  their own matching functions.\n\n# 0.3.0.1\n\n## Conditional build dependencies\n\nMoved
  build dependencies for QuickCheck and Criterion test programs\nunder a conditional
  so they are only pulled in if one actually\ncompiles these programs using the flags
  `-fQuickCheck` or\n`-fCriterion`. (Thank you Brent!)\n\n# 0.3.0.0\n\n## Implemented
  workaround for [GHC ticket 4227]\n\nCurrently, GHC can SPECIALIZE functions only
  where they are defined.\nThe types `Leftmost`, `Longest`, and `LeftLong` are now
  defined in\nseparate modules to bring them into the scope of the matching\nfunctions.
  Specialization makes the matching functions almost three\ntimes faster for the types
  mentioned above.\n\nThis workaround allows to specialize the matching functions
  for types\ndefined in this package. Users, however, must use the matching\nfunctions
  unspecialized for their own types.\n\nAlong with this change, the constructors of
  the matching types are no\nlonger exported.\n\n# 0.2.0.0\n\n## More general types
  for matching functions\n\nThe functions `fullMatch` and `partialMatch` now both
  have the type\n\n    Weight a b w => RegExp a -> [b] -> w\n\nwhereas previously
  the signatures have been:\n\n    fullMatch    :: Semiring w         => RegExp c
  -> [c] -> w\n    partialMatch :: Weight c (Int,c) w => RegExp c -> [c] -> w\n\nThe
  change allows users to provide custom symbol weights in full\nmatchings and to do
  partial matchings with arbitrary symbols weights\ninstead of having to use only
  characters and their positions.\n\nThis generalization leads to a slight performance
  penalty in small\nexamples but has a negligible effect when matching large inputs.\n\n##
  Renamed `accept` to `acceptFull`, added `acceptPartial`\n\nBased on the more general
  `partialMatch` function, the function\n`acceptPartial` was added for the `Bool`
  semiring. The `accept`\nfunction has been appropriately renamed.\n\n## Strict numeric
  semiring\n\nThe lazy definition of arithmetic operations for the `Numeric`\nsemiring
  has been dropped in favour of the more efficient standard\nimplementation. As a
  consequence, `matchingCount` no longer works with\ninfinite regular expressions.\n\n##
  SPECIALIZE pragmas prevent memory leak\n\nThe generalization of the matching functions
  leads to a memory leak\nthat can be avoided by specializing them for concrete\nsemirings.
  Corresponding pragmas have been added for `Bool` and for\n`Numeric` types but not
  for the more complex semirings defined in the\nextra matching modules. It is unclear
  what is the best way to\nspecialize them too because the pragma must be placed in
  the module\nwhere the matching functions are defined but, there, not all semirings\nare
  in scope. See [GHC ticket 4227].\n\n[GHC ticket 4227]: http://hackage.haskell.org/trac/ghc/ticket/4227\n\n##
  Fixed mistake in Criterion benchmarks\n\nIn the group of partial matchings, the
  benchmark for `Bool`\naccidentally used full matching. It now uses partial matching
  which,\nunsurprisingly, is slower.\n\n# 0.1.1.0\n\n## added `noMatch`\n\n`Text.RegExp`
  now provides a combinator\n\n    noMatch :: RegExp c\n\nwhich is an identity of
  `alt`. With this combinator, regular\nexpressions form a semiring with\n\n    zero
  \ = noMatch\n    one   = eps\n    (.+.) = alt\n    (.*.) = seq_\n\nA corresponding
  `Semiring` instance is not defined due to the lack of\nan appropriate `Eq` instance.\n\n##
  added `perm`\n\n`Text.RegExp` now provides a combinator\n\n    perm :: [RegExp c]
  -> RegExp c\n\nthat matches the given regular expressions in sequence. Each\nexpression
  must be matched exactly once but in arbitrary order. For\nexample, the regular expression\n\n
  \   perm (map char \"abc\")\n\nis equivalent to `abc|acb|bca|bac|cba|cab` and represented
  as\n`a(bc|cb)|b(ca|ac)|c(ba|ab)`.\n"
basic-deps:
  base: ! '>=3 && <5'
  array: ! '>=0.1 && <0.5'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.1.2
author: Thomas Wilke, Frank Huch, Sebastian Fischer
latest: 0.3.1.2
description-type: markdown
description: ! "% Weighted RegExp Matching\n\nEfficient regular expression matching
  can be beautifully\nsimple. Revisiting ideas from theoretical computer science,
  it can be\nimplemented with linear worst-case time and space bounds in the purely\nfunctional
  programming language [Haskell].\n\n[Haskell]: http://hackage.haskell.org/platform/\n[semirings]:
  http://en.wikipedia.org/wiki/Semiring\n\n# Background\n\nSince Plato wrote about
  philosophy in the form of [dialogues], authors\nhave used this literary form to
  convey their ideas. The 15th\n[International Conference on Functional Programming][ICFP]
  features an\narticle on Regular Expressions written as a play, [A Play on Regular\nExpressions][paper],
  which is meant to be [elegant, instructive, and\nfun][Pearl]. The play discusses
  an efficient, purely functional\nalgorithm for matching regular expressions. By
  generalizing from\nBooleans to arbitrary [semirings], this algorithm implements
  various\nmatching policies for weighted regular expressions.\n\n[dialogues]: http://en.wikipedia.org/wiki/Socratic_dialogue\n[ICFP]:
  http://www.icfpconference.org/icfp2010/\n[Pearl]: http://web.cecs.pdx.edu/~apt/icfp09_cfp.html#pearls\n[paper]:
  regexp-play.pdf\n\n# Installation\n\nAn implementation of the ideas discussed in
  the Play on Regular\nExpressions is available as a Haskell library. It is implemented
  in\npure Haskell rather than as a binding to an external library so you do\nnot
  need to install an external regular expression library to use it.\n\n<table><tr><td>\n\n<a
  href=\"http://hackage.haskell.org/platform\">\n<img src=\"http://hackage.haskell.org/platform/icons/button-100.png\"
  />\n</a>\n\n</td><td>\n\nHowever, you need Haskell in order to use this library.
  By installing\nthe [Haskell Platform][Haskell] you get a Haskell compiler with an\ninteractive
  environment as well as the package manager `cabal-install`\nand various pre-installed
  packages.\n\n</td></tr><tr><td>\n\n<img src=\"http://hackage.haskell.org/images/Cabal-light.png\"\n
  \    alt=\"Cabal\" width=\"195\" height=\"71\" />\n\n</td><td>\n\nYou can install
  the [`weighted-regexp`] library by typing the following\ninto a terminal:\n\n[`weighted-regexp`]:
  http://hackage.haskell.org/package/weighted-regexp\n\n    bash# cabal update\n    bash#
  cabal install weighted-regexp\n\n</td></tr></table>\n\nThis will install the current
  version. Differences between versions\nare listed in the [changelog].\n\n[changelog]:
  http://sebfisch.github.com/haskell-regexp/CHANGES.html\n\n# Correctness\n\nThe matching
  algorithm computes the same result as a simple inductive\nspecification (given in
  the [Play on Regular Expressions][paper]) but\nis [more efficient](#performance)
  than a direct translation of this\nspecification into Haskell. Although the ideas
  behind the algorithm\nare not new but based on proven results from theoretical computer\nscience,
  there is no correctness proof for the equivalence of the\nHaskell implementation
  of the algorithm with its specification. The\nequivalence is therefore confirmed
  by testing.\n\nIt is difficult (and tedious) to write tests manually that cover
  all\ninteresting apsects of regular expression matching. Therefore,\n[QuickCheck]
  is used to generate tests automatically and [Haskell\nProgram Coverage (HPC)][HPC]
  is used to monitor test coverage.\n\n[QuickCheck]: http://www.cse.chalmers.se/~rjmh/QuickCheck/\n[HPC]:
  http://www.haskell.org/ghc/docs/latest/html/users_guide/hpc.html\n\nYou can install
  the `weighted-regexp` library along with a test\nprogram as follows:\n\n    bash#
  cabal install weighted-regexp -fQuickCheck\n\nUsing the `QuickCheck` flag results
  in an additional program that you\ncan use to test the implementation. The program
  tests \n\n  * the algebraic laws of semirings for all defined semirings, and\n\n
  \ * the equivalence of the matching algorithm with the specification\n    both for
  full and partial matchings.\n\nFor testing the equivalence, QuickCheck generates
  random regular\nexpressions and compares the result of the matching algorithm with
  the\nresult of its specification on random words. Moreover, the program\ntests\n\n
  \ * the parser that provides common syntactic sugar like bounded\n    repetitions
  and character classes,\n\n  * the use of the library to recognize non-regular languages
  using\n    infinite regular expressions, and\n\n  * a combinator for parsing permutation
  sequences, that is, sequences\n    of regular expressions in arbitrary order.\n\nFor
  a more detailed description of the tested properties consider the\n[source code][quickcheck.lhs]
  of the test program. In order to\ngenerate an HPC report you need to download the
  sources of the\n`weighted-regexp` package. But you may as well consult the\n[pregenerated
  coverage report][coverage] instead of generating one\nyourself.\n\n[quickcheck.lhs]:
  http://github.com/sebfisch/haskell-regexp/blob/master/src/quickcheck.lhs\n[coverage]:
  http://sebfisch.github.com/haskell-regexp/quickcheck/hpc_index.html\n\n# Performance\n\nThe
  matching algorithm provided by this library is usually slower than\nother libraries
  like [pcre] but has a better asymptotic\ncomplexity. There are no corner cases for
  which matching takes forever\nor eats all available memory. More specifically, the
  worst-case run\ntime for matching a word against a regular expression is linearly\nbounded
  by the length of the word and the size of the regular\nexpression. It is in *O(nm)*
  if *n* is the length of the word and *m*\nthe size of the expression. The memory
  requirements are independent of\nthe length of the word and linear in the size of
  the regular\nexpression, that is, in *O(m)*. Therefore, this library provides\nsimilar
  asymptotic complexity guarantees as Google's [re2].\n\n[pcre]: http://www.pcre.org/\n[re2]:
  http://code.google.com/p/re2/\n\nHere are timings that have been obtained (on a
  MacBook) with the\ncurrent version of the library.\n\n       input               regexp
  \           run time     memory\n------------------- --------------------- --------------
  --------\n 100 MB of a's       `.*`                  8s (12 MB/s)    1 MB\n 5000
  a's            `(a?){5000}a{5000}`   13s             5 MB\n ~2M a's and b's     `.*a.{20}a.*`
  \        3.6s            1 MB\n\nThe first example measures the search speed for
  a simple regular\nexpression with a long string. There is room for improvement.
  No time\nhas been invested yet to improve the performance of the library with\nregard
  to constant factors.\n\nThe second example demonstrates the good asymptotic complexity
  of the\nalgorithm. Unlike a backtracking implementation like [pcre] the\nlibrary
  finishes in reasonable time. However, the memory requirements\nare higher than usual
  and on closer inspection one can see that almost\n10 of 13 seconds are spent during
  garbage collection. This example\nuses a large regular expression which leads to
  a lot of garbage in the\nmatching algorithm.\n\nThe third example pushes automata
  based approaches to the limit\nbecause the deterministic finite automaton that corresponds
  to the\nregular expression is exponentially large. The input has been chosen\nto
  not match the expression but is otherwise random and probably\nexplores many different
  states of the automaton. The matching\nalgorithm produces states on the fly and
  discards them, hence, it is\nfast in this example, in fact, faster than re2[^cpp].
  \n\n[^cpp]: The following C++ program uses the [re2] library and needs\n*4s* to
  search for `a.{20}a` in a string of ~2M random a's ad b's:\n\n    <script src=\"http://gist.github.com/488543.js?file=re2.cpp\"></script>\n\n
  \   Unlike the Haskell program, this program keeps the whole input,\n    that is,
  the result of `getline`, in memory. Can [re2] match input\n    on the fly?\n\nThe
  benchmarks above all use large input and two of them are\nspecifically designed
  as corner cases of typical matching\nalgorithms. The run time of matching more common
  regular expressions\nagainst short input has been measured using [Criterion] in
  order to\nget statistically robust results.\n\n[Criterion]: http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/\n\nYou
  can install the `weighted-regexp` package with the `Criterion` flag to generate
  a program that executes the benchmarks described below:\n\n    bash# cabal install
  weighted-regexp -fCriterion\n\nYou can call `criterion-re --help` to see how to
  use the generated\nprogram. It tests three different examples:\n\n  * a unique full
  match with a regular expression for phone numbers,\n\n  * an ambiguous full match
  with a regular expression for sequences of\n    HTML elements, and\n\n  * a partial
  match with a regular expression for protein sequences in\n    RNA.\n\nFor a more
  detailed explanation consider the [source\ncode][criterion.lhs] of the benchmark
  program.\n\n[criterion.lhs]: http://github.com/sebfisch/haskell-regexp/blob/master/src/criterion.lhs\n\n
  \      matching  acceptance  #matchings  leftmost     longest  leftmost longest\n---------------
  ----------- ----------- ---------- ---------- -----------------\n unique full       [3.8
  us]   [4.8 us]\n ambiguous full   [11.7 us]   [13.4 us]\n partial          [20.4
  us]              [27.2 us]  [26.2 us]         [27.5 us]\n\nClick on the numbers
  for a more detailed distribution of run times.\n\n[3.8 us]:  http://sebfisch.github.com/haskell-regexp/criterion/full-accept-phone-densities-800x600.png\n[4.8
  us]: http://sebfisch.github.com/haskell-regexp/criterion/full-count-phone-densities-800x600.png\n[11.7
  us]: http://sebfisch.github.com/haskell-regexp/criterion/full-accept-html-densities-800x600.png\n[13.4
  us]: http://sebfisch.github.com/haskell-regexp/criterion/full-count-html-densities-800x600.png\n[20.4
  us]: http://sebfisch.github.com/haskell-regexp/criterion/partial-accept-rna-densities-800x600.png\n[27.2
  us]: http://sebfisch.github.com/haskell-regexp/criterion/partial-leftmost-rna-densities-800x600.png\n[26.2
  us]: http://sebfisch.github.com/haskell-regexp/criterion/partial-longest-rna-densities-800x600.png\n[27.5
  us]: http://sebfisch.github.com/haskell-regexp/criterion/partial-leftlong-rna-densities-800x600.png\n\n#
  Collaboration\n\n<table><tr><td>\n\n<a href=\"http://github.com\">\n<img src=\"https://github.com/images/modules/header/logo.png\"
  />\n</a>\n\n</td><td>\n\nThe source code of this library is on [github]. You can
  collaborate by\nusing it in your projects, report bugs and ask for new features
  in the\n[issue tracker], or provide patches that implement pending issues.\n\n</td></tr></table>\n\n[github]:
  http://github.com/sebfisch/haskell-regexp\n[issue tracker]: http://github.com/sebfisch/haskell-regexp/issues\n\nThe
  algorithm discussed in the [Play on Regular Expressions][paper]\nhas been implemented
  in different languages. In a series of two\n[blog][blog] [posts][posts], Carl Friedrich
  Bolz describes a Python\nimplementation that uses a Just In Time (JIT) compiler
  to achieve\nimpressive performance. He compares his version with corresponding C++\nand
  Java programs.\n\n[blog]: http://morepypy.blogspot.com/2010/05/efficient-and-elegant-regular.html\n[posts]:
  http://morepypy.blogspot.com/2010/06/jit-for-regular-expression-matching.html\n\nFor
  questions and feedback email [Sebastian\nFischer](mailto:mail@sebfisch.de)."
license-name: BSD-3-Clause
