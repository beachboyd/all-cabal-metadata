homepage: https://github.com/natesymer/webapp
changelog-type: markdown
hash: 3a99e1563c42c029dfaa63db5cb74ec1fc521c4837d5413152f8c7e401581e0b
test-bench-deps:
  wai: -any
  base: -any
  hspec: -any
  text: -any
  network: -any
  transformers: -any
  http-types: -any
  webapp: -any
maintainer: Nathaniel Symer <nate@symer.io>
synopsis: Haskell web app framework based on WAI & Warp
changelog: ! "# webapp changelog\n\nv 0.0.1\n\t\n- Initial release\n\nv 0.0.2\n\n-
  Fix omitted module in `webapp.cabal`: `Web.App.Monad.Internal`\n\nv 0.1.0\n\n- Included
  a new example: a counter app with an additional CLI parser.\n- Implemented a \"util\"
  CLI subcommand where you can \"mount\" an optparse-applicative @Parser@. See example.\n-
  Fixed termination handlers. Previously, they weren't installed when using HTTPS
  due to a bug in warp-tls. This has been remedied. Additionally, these handlers would
  destroy the initial state, rather than the current state from the @TVar@.\n\nv 0.2.0\n\t\n-
  Complete rewrite\n- New WAI-based web framework\n\t- Routing with captures, regexes,
  and literals\n\t- Streaming body based around `writeBody` function\n\t\t- Allow
  data structures to be streamed via the 'ToStream' typeclass.\n\t- Typesafe parameter
  coersion\n\nv 0.2.1\n\n\t- `stream` function can now optionally flush. `stream'`
  will always flush. This may improve list streaming functionality.\n\nv 0.4.0\n\n\t-
  Breaking change; refactor internals & simplify `Web.App.RouteT`"
basic-deps:
  warp: -any
  bytestring: -any
  wai: -any
  case-insensitive: -any
  unix: -any
  stm: -any
  base: <5.0
  text: -any
  network: -any
  array: -any
  blaze-builder: -any
  vault: -any
  warp-tls: -any
  regex-base: -any
  regex-pcre-builtin: -any
  transformers: -any
  optparse-applicative: -any
  http-types: -any
all-versions:
- 0.6.1
author: Nathaniel Symer <nate@symer.io>
latest: 0.6.1
description-type: markdown
description: ! "# Web.App - WAI web framework\n\n[![Build Status](https://travis-ci.org/natesymer/webapp.svg?branch=master)](https://travis-ci.org/natesymer/webapp)\n\nWeb.App
  is a general, minimalist Haskell web framework. See Haddock documentation and `example.hs`.\n\n##
  Usage notes\n\n1. Web.App can either be ran standalone (i.e. look ma, no nginx!)
  or behind other server programs.\n  - To bind to privileged ports, your program
  must be executable as root. Privileges are resigned after the port is bound.\n  -
  Web.App uses Warp under the hood to serve a WAI app based on provided routes.\n
  \ - SSL & HTTP2 are supported.\n2. Web.App provides a function called `webappMain`
  (as well as a series of other similarly named functions) that start your app.\n
  \ - Your program's `main` function should finish with a call to one of them.\n3.
  Web.App also provides command line options for controlling the HTTP server.\n  -
  It also provides "
license-name: MIT
