homepage: https://github.com/airalab/hs-web3#readme
changelog-type: markdown
hash: 9b0b71a4f3511fd47cf50079d98e2b77f0626eda0ce18f360ca183ea78c28354
test-bench-deps:
  http-client: ! '>=0.5.7.1 && <0.6'
  exceptions: ! '>=0.8.3 && <0.11'
  cereal: ! '>=0.5.4.0 && <0.6'
  hspec-contrib: ! '>=0.4.0 && <0.6'
  microlens-th: ! '>=0.4.1.1 && <0.5'
  secp256k1-haskell: ! '>=0.1.4 && <0.2'
  bytestring: ! '>=0.10.8.1 && <0.11'
  basement: ! '>=0.0.4 && <0.1'
  split: ! '>=0.2.3 && <0.3'
  stm: ! '>=2.4.4 && <2.6'
  base: ! '>4.9 && <4.13'
  time: ! '>=1.6.0 && <1.9'
  hspec: ! '>=2.4.4 && <2.7'
  text: ! '>=1.2.2.2 && <1.3'
  web3: -any
  async: ! '>=2.1.1.1 && <2.3'
  parsec: ! '>=3.1.11 && <3.2'
  data-default: ! '>=0.7.1.1 && <0.8'
  memory: ! '>=0.14.11 && <0.15'
  tagged: ! '>=0.8.5 && <0.9'
  OneTuple: ! '>=0.2.1 && <0.3'
  vinyl: ! '>=0.5.3 && <0.11'
  relapse: ! '>=1.0.0.0 && <2.0'
  http-client-tls: ! '>=0.3.5.1 && <0.4'
  cryptonite: ! '>=0.23 && <0.26'
  mtl: ! '>=2.2.1 && <2.3'
  microlens-aeson: ! '>=2.2.0.2 && <2.4'
  transformers: ! '>=0.5.2.0 && <0.6'
  random: ==1.1.*
  generics-sop: ! '>=0.3.1.0 && <0.5'
  hspec-discover: ! '>=2.4.4 && <2.7'
  machines: ! '>=0.6.3 && <0.7'
  microlens-mtl: ! '>=0.1.11.0 && <0.2'
  microlens: ! '>=0.4.8.1 && <0.5'
  aeson: ! '>=1.1.2.0 && <1.5'
  template-haskell: ! '>=2.11.1.0 && <2.15'
  hspec-expectations: ! '>=0.8.2 && <0.9'
maintainer: mail@akru.me
synopsis: Ethereum API for Haskell
changelog: ! "# Changelog\nAll notable changes to this project will be documented
  in this file.\n\n## [0.8.2.0] 2018-11-07\n### Changed\n- Gas estimation runs when
  gas limit is not set before\n\n## [0.8.1.0] 2018-10-29\n### Added\n- Support vinyl-0.10
  in `MultiFilter` module\n\n## [0.8.0.0] 2018-10-26\n### Added\n- Support for Ethereum
  cryptography\n- Local private key transaction signer \n- Generalized JSON-RPC monad
  for API methods\n- Support for multiple transaction sending methods via one `Account`
  api\n- Monad based transaction sending parametrization \n- Experimental support
  for solidity compiler (disabled by default) \n- Support for Ethereum mainnet ENS
  resolver\n- Contract typeclass with api/bytecode getters\n- Gas estimation for sending
  transactions\n- Contract typeclass TH generator\n- Function for creating contracts\n-
  Event single/multi filters\n- HexString data type\n- Personal api calls\n- Address
  checksum\n\n### Changed\n- package.yaml instead web3.cabal package descriptor\n-
  Solidity related data types and codecs moved to Data.Solidity\n- Solidity related
  parsers and compiler moved to Language.Solidity\n- Modules in Network.Ethereum.Web3
  moved to Network.Ethereum.Api\n- fromWei/toWei from `Unit` typeclass now operates
  over `Integral`\n\n### Removed\n- `convert` function from `Unit` typeclass\n\n##
  [0.7.3.0] 2018-05-22\n### Added\n- 'Network.Ethereum.ABI.Prim' meta-module as primitive
  types and instances aggregator.\n- Stackage nightly build compatibility.\n\n###
  Changed\n- Potential nullable web3 type ('Change', 'Block', 'Transaction', etc.)
  fields are encoded as 'Maybe'.\n\n## [0.7.2.0] 2018-05-13\n### Added\n- Generic
  JSON-RPC API documentation improvements.\n- TH generator bug fixes.\n\n### Changed\n-
  Generic JSON-RPC API use fixed size byte arrays.\n\n### Removed\n- 'BlockNumber',
  'FilterId' types replaced by 'Quantity' type\n\n## [0.7.1.0] 2018-05-02\n### Added\n-
  TxReceipt and Eth.getTransactionReceipt JSON-RPC method.\n- Keyword escaper for
  TH generated names.\n- Build flag to enable TLS support.\n\n### Changed\n- Library
  dependencies bounds fixed for GHC 8.2.2-8.4.2 (stackage LTS + Nightly).\n\n## [0.7.0.0]
  2018-04-22\n### Added\n- This CHANGELOG.md file for significant changes tracking.\n-
  Descriptive types for all JSON-RPC method parameters and returned values (#15).\n-
  Widely use of basement:Word256 type for encoding.\n- Full list of ethereum abi encoding
  types:\n  * bool: `Bool`\n  * int256: `IntN`\n  * uint256: `UIntN`\n  * string:
  `Text`\n  * bytes: `Bytes`\n  * bytes32: `BytesN`\n  * dynamic array: `[]`\n  *
  static array: `ListN`\n\n### Changed\n- Rewriten encoding engine for best performance,
  it now based on cereal:Serialize instead of parsec:Parser.\n- Renamed encoding type
  classes and methods: `ABIEncode` -> `ABIPut`, `ABIDecode` -> `ABIGet`.\n- Encoding
  related modules moved to Network.Ethereum.ABI.\n- Primitive abi encoding types are
  moved to separated modules in Network.Ethereum.ABI.Prim.\n- Contract interation
  related modules moved to Network.Ethereum.Contract.\n- Ethereum node communication
  modules stay in Network.Ethereum.Web3.\n- JSON-RPC tiny client is independent now
  and can be used separately.\n\n### Removed\n- `Event` type class, currently TH create
  `Data.Default` instance for `Filter e`.\n- Custom setup for live testing (it replaced
  by travis script).\n"
basic-deps:
  http-client: ! '>=0.5.7.1 && <0.6'
  exceptions: ! '>=0.8.3 && <0.11'
  cereal: ! '>=0.5.4.0 && <0.6'
  microlens-th: ! '>=0.4.1.1 && <0.5'
  secp256k1-haskell: ! '>=0.1.4 && <0.2'
  bytestring: ! '>=0.10.8.1 && <0.11'
  basement: ! '>=0.0.4 && <0.1'
  base: ! '>4.9 && <4.13'
  text: ! '>=1.2.2.2 && <1.3'
  async: ! '>=2.1.1.1 && <2.3'
  parsec: ! '>=3.1.11 && <3.2'
  data-default: ! '>=0.7.1.1 && <0.8'
  memory: ! '>=0.14.11 && <0.15'
  tagged: ! '>=0.8.5 && <0.9'
  OneTuple: ! '>=0.2.1 && <0.3'
  vinyl: ! '>=0.5.3 && <0.11'
  relapse: ! '>=1.0.0.0 && <2.0'
  http-client-tls: ! '>=0.3.5.1 && <0.4'
  cryptonite: ! '>=0.23 && <0.26'
  mtl: ! '>=2.2.1 && <2.3'
  microlens-aeson: ! '>=2.2.0.2 && <2.4'
  transformers: ! '>=0.5.2.0 && <0.6'
  generics-sop: ! '>=0.3.1.0 && <0.5'
  machines: ! '>=0.6.3 && <0.7'
  microlens-mtl: ! '>=0.1.11.0 && <0.2'
  microlens: ! '>=0.4.8.1 && <0.5'
  aeson: ! '>=1.1.2.0 && <1.5'
  template-haskell: ! '>=2.11.1.0 && <2.15'
all-versions:
- 0.3.2.0
- 0.3.2.1
- 0.3.3.0
- 0.3.4.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.3.0
- 0.5.4.0
- 0.5.5.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
author: Alexander Krupenkin
latest: 0.8.2.1
description-type: markdown
description: ! "Ethereum API for Haskell\n========================\n\nThe Haskell
  Ethereum API which implements the [Generic JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\n[![Documentation
  Status](https://readthedocs.org/projects/hs-web3/badge/?version=latest)](https://hs-web3.readthedocs.io/en/latest/?badge=latest)\n[![Build
  Status](https://travis-ci.org/airalab/hs-web3.svg?branch=master)](https://travis-ci.org/airalab/hs-web3)\n[![Hackage](https://img.shields.io/hackage/v/web3.svg)](http://hackage.haskell.org/package/web3)\n[![LTS-12](http://stackage.org/package/web3/badge/lts-12)](http://stackage.org/lts-12/package/web3)\n[![nightly](http://stackage.org/package/web3/badge/nightly)](http://stackage.org/nightly/package/web3)\n[![Code
  Triagers](https://www.codetriage.com/airalab/hs-web3/badges/users.svg)](https://www.codetriage.com/airalab/hs-web3)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\nInstall\n-------\n\n`stack
  install web3`\n\nUsage\n-----\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nmodule
  Main where\n\n-- Basic imports\nimport           Network.Ethereum.Web3\n\n-- Eth
  API support\nimport qualified Network.Ethereum.Api.Eth   as Eth\nimport           Network.Ethereum.Api.Types\n\n--
  ENS support\nimport qualified Network.Ethereum.Ens       as Ens\n\n-- Lens to simple
  param setting\nimport           Lens.Micro                 ((.~))\n\nmain :: IO
  ()\nmain = do\n    -- Use default provider on http://localhost:8545\n    ret <-
  runWeb3 $ do\n\n        -- Get address of default account\n        me <- head <$>
  Eth.accounts\n\n        -- Get balance of default account on latest block\n        myBalance
  <- Eth.getBalance me Latest\n\n        -- Get half of balance\n        let halfBalance
  = fromWei (myBalance / 2)\n\n        -- Use default account\n        withAccount
  () $ do\n            -- Get Ethereum address via ENS\n            alice <- Ens.resolve
  \"alice.address.on.eth\"\n            bob   <- Ens.resolve \"bob.address.on.eth\"\n\n
  \           -- Send transaction with value\n            withParam (value .~ halfBalance)
  $ do\n\n                -- Send transaction to alice account\n                withParam
  (to .~ alice) $ send ()\n\n                -- Send transaction to bob account\n
  \               withParam (to .~ bob) $ send ()\n\n        -- Return sended value\n
  \       return halfBalance\n\n    -- Web3 error handling\n    case ret of\n        Left
  e  -> error $ show e\n        Right v -> print (v :: Ether)  -- Print returned value
  in ethers\n```\n\n---\n\nRead more in the [documentation on ReadTheDocs](https://hs-web3.readthedocs.io).\n"
license-name: BSD-3-Clause
