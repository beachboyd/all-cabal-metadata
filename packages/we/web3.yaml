homepage: https://github.com/airalab/hs-web3#readme
changelog-type: markdown
hash: 4b33ef2f1240dfc6782b94057d8b19552361b3795e1db08fa9381bf09fafc77c
test-bench-deps:
  hspec-contrib: ! '>=0.4.0 && <0.6'
  bytestring: ! '>=0.10.8.2 && <0.11'
  split: ! '>=0.2.3.3 && <0.3'
  stm: ! '>=2.4.5.0 && <2.5'
  base: ! '>4.9 && <4.12'
  time: ! '>=1.8.0.2 && <1.9'
  hspec: ! '>=2.4.8 && <2.6'
  text: ! '>=1.2.3.0 && <1.3'
  web3: -any
  async: ! '>=2.1.1.1 && <2.3'
  data-default: ! '>=0.7.1.1 && <0.8'
  memory: ! '>=0.14.16 && <0.15'
  tagged: ! '>=0.8.5 && <0.9'
  transformers: ! '>=0.5.2.0 && <0.6'
  generics-sop: ! '>=0.3.2.0 && <0.4'
  hspec-discover: ! '>=2.4.8 && <2.6'
  hspec-expectations: ! '>=0.8.2 && <0.9'
maintainer: mail@akru.me
synopsis: Ethereum API for Haskell
changelog: ! "# Changelog\nAll notable changes to this project will be documented
  in this file.\n\n## [0.7.1.0] 2018-05-02\n### Added\n- TxReceipt and Eth.getTransactionReceipt
  JSON-RPC method.\n- Keyword escaper for TH generated names.\n\n### Changed\n- Library
  dependencies bounds fixed for GHC 8.2.2-8.4.2 (stackage LTS + Nightly).\n\n## [0.7.0.0]
  2018-04-22\n### Added\n- This CHANGELOG.md file for significant changes tracking.\n-
  Descriptive types for all JSON-RPC method parameters and returned values (#15).\n-
  Widely use of basement:Word256 type for encoding.\n- Full list of ethereum abi encoding
  types:\n  * bool: `Bool`\n  * int256: `IntN`\n  * uint256: `UIntN`\n  * string:
  `Text`\n  * bytes: `Bytes`\n  * bytes32: `BytesN`\n  * dynamic array: `[]`\n  *
  static array: `ListN`\n\n### Changed\n- Rewriten encoding engine for best performance,
  it now based on cereal:Serialize instead of parsec:Parser.\n- Renamed encoding type
  classes and methods: `ABIEncode` -> `ABIPut`, `ABIDecode` -> `ABIGet`.\n- Encoding
  related modules moved to Network.Ethereum.ABI.\n- Primitive abi encoding types are
  moved to separated modules in Network.Ethereum.ABI.Prim.\n- Contract interation
  related modules moved to Network.Ethereum.Contract.\n- Ethereum node communication
  modules stay in Network.Ethereum.Web3.\n- JSON-RPC tiny client is independent now
  and can be used separately.\n\n### Removed\n- `Event` type class, currently TH create
  `Data.Default` instance for `Filter e`.\n- Custom setup for live testing (it replaced
  by travis script).\n"
basic-deps:
  http-client: ! '>=0.5.12.1 && <0.6'
  exceptions: ! '>=0.8.3 && <0.9'
  cereal: ! '>=0.5.5.0 && <0.6'
  bytestring: ! '>=0.10.8.2 && <0.11'
  basement: ! '>=0.0.7 && <0.1'
  base: ! '>4.9 && <4.12'
  text: ! '>=1.2.3.0 && <1.3'
  async: ! '>=2.1.1.1 && <2.3'
  parsec: ! '>=3.1.13.0 && <3.2'
  data-default: ! '>=0.7.1.1 && <0.8'
  memory: ! '>=0.14.16 && <0.15'
  tagged: ! '>=0.8.5 && <0.9'
  cryptonite: ==0.25.*
  mtl: ! '>=2.2.2 && <2.3'
  transformers: ! '>=0.5.2.0 && <0.6'
  generics-sop: ! '>=0.3.2.0 && <0.4'
  machines: ! '>=0.6.3 && <0.7'
  aeson: ! '>=1.2.4.0 && <1.3'
  template-haskell: ! '>=2.12.0.0 && <2.14'
all-versions:
- '0.3.2.0'
- '0.3.2.1'
- '0.3.3.0'
- '0.3.4.0'
- '0.4.0.0'
- '0.4.1.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.2.0'
- '0.5.2.1'
- '0.5.3.0'
- '0.5.4.0'
- '0.5.5.0'
- '0.6.0.0'
- '0.7.0.0'
- '0.7.1.0'
author: Alexander Krupenkin
latest: '0.7.1.0'
description-type: markdown
description: ! "## Ethereum Haskell API\n\nThis is the Ethereum compatible Haskell
  API which implements the [Generic JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC)
  spec.\n\n[![Build Status](https://travis-ci.org/airalab/hs-web3.svg?branch=master)](https://travis-ci.org/airalab/hs-web3)\n[![Build
  status](https://ci.appveyor.com/api/projects/status/8ljq93nar8kobk75?svg=true)](https://ci.appveyor.com/project/akru/hs-web3)\n[![Hackage](https://img.shields.io/hackage/v/web3.svg)](http://hackage.haskell.org/package/web3)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n[![Code Triagers
  Badge](https://www.codetriage.com/airalab/hs-web3/badges/users.svg)](https://www.codetriage.com/airalab/hs-web3)\n\n###
  Installation\n\n    $ git clone https://github.com/airalab/hs-web3 && cd hs-web3\n
  \   $ stack setup\n    $ stack ghci\n\n> This library runs only paired with [geth](https://github.com/ethereum/go-ethereum)\n>
  or [parity](https://github.com/ethcore/parity) Ethereum node,\n> please start node
  first before using the library.\n\n### Web3 monad\n\nAny Ethereum node communication
  wrapped with `Web3` monadic type.\n\n    > import Network.Ethereum.Web3.Web3\n    >
  :t clientVersion\n    clientVersion :: Web3 Text\n\nTo run this computation used
  `runWeb3'` or `runWeb3` functions.\n\n    > import Network.Ethereum.Web3\n    >
  runWeb3 clientVersion\n    Right \"Parity//v1.4.5-beta-a028d04-20161126/x86_64-linux-gnu/rustc1.13.0\"\n\nFunction
  `runWeb3` use default `Web3` provider at `localhost:8545`.\n\n    > :t runWeb3\n
  \   runWeb3\n      :: MonadIO m => Web3 a -> m (Either Web3Error a)\n\n### TemplateHaskell
  generator\n\n[Quasiquotation](https://wiki.haskell.org/Quasiquotation) is used to
  parse contract ABI or load from JSON file. [TemplateHaskell](https://wiki.haskell.org/Template_Haskell)
  driven Haskell contract API generator can automatical create ABI encoding instances
  and contract method helpers.\n\n    > :set -XQuasiQuotes\n    > import Network.Ethereum.Contract.TH\n
  \   > putStr [abiFrom|data/sample.json|]\n    Contract:\n            Events:\n                    Action1(address,uint256)\n
  \                   Action2(string,uint256)\n            Methods:\n                    0x03de48b3
  runA1()\n                    0x90126c7a runA2(string,uint256)\n\nUse `-ddump-splices`
  to see generated code during compilation or in GHCi. See `examples` folder for more
  use cases.\n\n### Testing\n\nTesting the `web3` is split up into two suites: `unit`
  and `live`.\nThe `unit` suite tests internal library facilities, while the `live`
  tests that\nthe library adequately interacts with a Web3 provider.\n\nOne may simply
  run `stack test` to run both suites, or `stack test web3:unit` or `stack test web3:live`\nto
  run the test suites individually.\n\nThe `unit` suite has no external dependencies,
  while the `live` suite requires Truffle and `jq`\nto be available on your machine.\n\nThe
  `live` suite also requires a Web3 provider with Ethereum capabilities, as well as\nan
  unlocked account with ether to send transactions from. It uses Truffle to deploy
  testing contracts,\ngenerating ABIs for them in the process, then using said ABIs
  as part of a TemplateHaskell step in the suite.\nIt is assumed that the provider
  is available at `http://localhost:8545`. If that's not the case, you must update
  `truffle.js`\nso that Truffle can deploy the contracts correctly, and pass the `WEB3_PROVIDER=http://host:port`
  environment variable\nwhen running the tests so that the `web3` library can interact
  with the chain that's being tested against.\n"
license-name: BSD3
