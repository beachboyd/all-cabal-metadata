homepage: https://github.com/fpco/weigh#readme
changelog-type: text
hash: 68bb674f8744d7463f7a272ddb7d008f2c9644058026730d4b3ecadc7d892324
test-bench-deps:
  base: -any
  unordered-containers: -any
  bytestring-trie: -any
  containers: -any
  weigh: -any
  random: -any
  deepseq: -any
maintainer: chrisdone@fpcomplete.com
synopsis: Measure allocations of a Haskell functions/values
changelog: ! "0.0.6:\n\t* Support GHC 8.2\n\t* Use more reliable calculations\n\n0.0.4:\n
  \       * Added more system-independent word size calculation\n\n0.0.3:\n\t* Added
  more docs to haddocks\n\t* Export more internal combinators\n\n0.0.2:\n\t* Remove
  magic numbers from weighing code, better accuracy\n\t* Add additional `io` combinator\n\n0.0.1:\n\t*
  Support GHC 8.\n\n0.0.0:\n\t* First release.\n"
basic-deps:
  split: -any
  base: ! '>=4.7 && <5'
  process: -any
  mtl: -any
  temporary: -any
  deepseq: -any
  template-haskell: -any
all-versions:
- '0.0.0'
- '0.0.1'
- '0.0.2'
- '0.0.3'
- '0.0.4'
- '0.0.5'
- '0.0.6'
author: Chris Done
latest: '0.0.6'
description-type: markdown
description: ! "# weigh [![Build Status](https://travis-ci.org/fpco/weigh.png)](https://travis-ci.org/fpco/weigh)\n\nMeasures
  the memory usage of a Haskell value or function\n\n## Example use\n\n``` haskell\nimport
  Weigh\n\n-- | Weigh integers.\nmain :: IO ()\nmain =\n  mainWith (do integers\n
  \              ints)\n\n-- | Just counting integers.\nintegers :: Weigh ()\nintegers
  =\n  do func \"integers count 0\" count 0\n     func \"integers count 1\" count
  1\n     func \"integers count 2\" count 2\n     func \"integers count 3\" count
  3\n     func \"integers count 10\" count 10\n     func \"integers count 100\" count
  100\n  where count :: Integer -> ()\n        count 0 = ()\n        count a = count
  (a - 1)\n\n-- | We count ints and ensure that the allocations are optimized away\n--
  to only two 64-bit Ints (16 bytes).\nints :: Weigh ()\nints =\n  do validateFunc
  \"ints count 1\" count 1 (maxAllocs 24)\n     validateFunc \"ints count 10\" count
  10 (maxAllocs 24)\n     validateFunc \"ints count 1000000\" count 1000000 (maxAllocs
  24)\n  where count :: Int -> ()\n        count 0 = ()\n        count a = count (a
  - 1)\n```\n\nOutput results:\n\n```\nCase                Bytes  GCs  Check\nintegers
  count 0        0    0  OK\nintegers count 1       32    0  OK\nintegers count 2
  \      64    0  OK\nintegers count 3       96    0  OK\nintegers count 10     320
  \   0  OK\nintegers count 100  3,200    0  OK\nints count 1            0    0  OK\nints
  count 10           0    0  OK\nints count 1000000      0    0  OK\n```\n\nYou can
  try this out with `stack test` in the `weight` directory.\n\nTo try out other examples,
  try:\n\n* `stack test :weigh-maps --flag weigh:weigh-maps`\n"
license-name: BSD3
