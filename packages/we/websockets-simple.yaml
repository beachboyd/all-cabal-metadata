homepage: https://github.com/athanclark/websockets-simple#readme
changelog-type: ''
hash: aadc52e93864fedf5e963e2915ea50b9769017141d5f13aef362b94199a65319
test-bench-deps:
  exceptions: -any
  bytestring: -any
  wai-transformers: ! '>=0.1.0'
  stm: -any
  base: ! '>=4.11 && <5'
  hspec: -any
  text: -any
  websockets-simple: -any
  extractable-singleton: ! '>=0.0.1'
  tasty-hspec: -any
  async: -any
  websockets: ! '>=0.12.4'
  chan: ! '>=0.0.4'
  monad-control-aligned: ! '>=0.0.1'
  transformers: -any
  tasty: -any
  aeson: -any
  profunctors: -any
maintainer: Athan Clark <athan.clark@gmail.com>
synopsis: Composable websockets clients
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: -any
  wai-transformers: ! '>=0.1.0'
  stm: -any
  base: ! '>=4.11 && <5'
  text: -any
  extractable-singleton: ! '>=0.0.1'
  async: -any
  websockets: ! '>=0.12.4'
  chan: ! '>=0.0.4'
  monad-control-aligned: ! '>=0.0.1'
  transformers: -any
  aeson: -any
  profunctors: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.2.1
- 0.0.2.2
- 0.0.3
- 0.0.4
- 0.0.4.1
- 0.0.5
- 0.0.6
- 0.0.6.1
- 0.0.6.2
- 0.0.6.3
- 0.0.7
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.3
- 0.2.0
author: ''
latest: 0.2.0
description-type: markdown
description: |
  # websockets-simple

  Provides for a slightly more composable structure for websocket apps:

  ```haskell
  data Input = Increment | Decrement
    deriving (FromJSON)

  data Output = Value Int
    deriving (ToJSON)

  myApp :: MonadBaseControl IO m => m (WebSocketsApp m Input Output)
  myApp = do
    countRef <- liftIO $ newIORef 0
    emitter <- liftIO $ newIORef (Nothing :: Async ())

    let killEmitter = do
          mThread <- liftIO $ readIORef emitter
          case mThread of
            Nothing -> pure ()
            Just thread -> cancel thread

    pure WebSocketsApp
      { onOpen = \WebSocketsAppParams{send} ->
          liftBaseWith $ \runInBase -> do
            thread <- async $ forever $ do
              count <- readIORef countRef
              runInBase $ send $ Value count
              threadDelay 1000000 -- every second, emit the current value
            writeIORef emitter (Just thread)
      , onReceive = \WebSocketsAppParams{send,close} x -> do
          count <- liftIO $
            ( modifyIORef countRef $ case x of
                Increment -> (+ 1)
                Decrement -> (-) 1
            ) *> readIORef countRef
          if count >= 10 || count <= -10
            then close
            else send (Value count)
      , onClose = \mReason -> do
          killEmitter
          case mReason of
            Nothing -> liftIO $ writeIORef countRef 0
            Just _ -> pure ()
      }
  ```
license-name: BSD-3-Clause
