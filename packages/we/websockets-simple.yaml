homepage: https://github.com/athanclark/websockets-simple#readme
changelog-type: ''
hash: c6c7fe7f237da7bddad23f52197c4c9b26a9c854f7c5cb3110fba0651b496709
test-bench-deps:
  exceptions: -any
  bytestring: -any
  wai-transformers: -any
  stm: -any
  base: ! '>=4.9 && <5'
  hspec: -any
  websockets-simple: -any
  monad-control: -any
  tasty-hspec: -any
  async: -any
  websockets: ! '>=0.12.3'
  transformers: -any
  tasty: -any
  aeson: -any
  profunctors: -any
  vector: -any
maintainer: Athan Clark <athan.clark@gmail.com>
synopsis: Composable websockets clients
changelog: ''
basic-deps:
  exceptions: -any
  bytestring: -any
  wai-transformers: -any
  stm: -any
  base: ! '>=4.9 && <5'
  monad-control: -any
  async: -any
  websockets: ! '>=0.12.3'
  transformers: -any
  aeson: -any
  profunctors: -any
  vector: -any
all-versions:
- '0.0.1'
- '0.0.2'
- '0.0.2.1'
- '0.0.2.2'
- '0.0.3'
- '0.0.4'
- '0.0.4.1'
- '0.0.5'
- '0.0.6'
- '0.0.6.1'
- '0.0.6.2'
- '0.0.6.3'
- '0.0.7'
- '0.1.0'
- '0.1.1'
author: ''
latest: '0.1.1'
description-type: markdown
description: ! "# websockets-simple\n\nProvides for a slightly more composable structure
  for websocket apps:\n\n```haskell\ndata Input = Increment | Decrement\n  deriving
  (FromJSON)\n\ndata Output = Value Int\n  deriving (ToJSON)\n\nmyApp :: MonadBaseControl
  IO m => m (WebSocketsApp m Input Output)\nmyApp = do\n  countRef <- liftIO $ newIORef
  0\n  emitter <- liftIO $ newIORef (Nothing :: Async ())\n\n  let killEmitter = do\n
  \       mThread <- liftIO $ readIORef emitter\n        case mThread of\n          Nothing
  -> pure ()\n          Just thread -> cancel thread\n\n  pure WebSocketsApp\n    {
  onOpen = \\WebSocketsAppParams{send} ->\n        liftBaseWith $ \\runInBase -> do\n
  \         thread <- async $ forever $ do\n            count <- readIORef countRef\n
  \           runInBase $ send $ Value count\n            threadDelay 1000000 -- every
  second, emit the current value\n          writeIORef emitter (Just thread)\n    ,
  onReceive = \\WebSocketsAppParams{send,close} x -> do\n        count <- liftIO $\n
  \         ( modifyIORef countRef $ case x of\n              Increment -> (+ 1)\n
  \             Decrement -> (-) 1\n          ) *> readIORef countRef\n        if
  count >= 10 || count <= -10\n          then close\n          else send (Value count)\n
  \   , onClose = \\mReason -> do\n        killEmitter\n        case mReason of\n
  \         Nothing -> liftIO $ writeIORef countRef 0\n          Just _ -> pure ()\n
  \   }\n```\n"
license-name: BSD3
