homepage: https://github.com/mstksg/advent-of-code-api#readme
changelog-type: markdown
hash: e1693ef344598d5773f35a9a6ba9fd2268af57f446eb5b0ad76db34ee04d9259
test-bench-deps:
  base: ! '>=4.9 && <5'
  advent-of-code-api: -any
  text: -any
  filepath: -any
  HUnit: -any
  directory: -any
maintainer: justin@jle.im
synopsis: Advent of Code REST API bindings and servant API
changelog: |
  Changelog
  =========

  Version 0.2.0.0
  ---------------

  *November 3, 2019*

  <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.2.0.0>

  *   Switch from libcurl to servant, which allows for shedding of external
      dependencies.
  *   Support leaderboard API with data type.
  *   Expose raw servant API and client functions, for those who want to build
      documentation or a mock server or low-level client.

  Version 0.1.2.X
  ---------------

  *   *December 8, 2018*: *BUGFIX* Switched from *taggy* to *tagsoup*, after observing that *taggy*
      had some issues parsing 2018's Day 8 challenge prompt.

      <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.2.1>

  *   *December 8, 2018*: *BUGFIX* Add CPP to deal with building issues on GHC 8.2

      <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.2.2>

  *   *December 8, 2018*: *BUGFIX* Fix cache directory to separate by year

      <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.2.3>

  Version 0.1.2.0
  ---------------

  *December 7, 2018*

  <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.2.0>

  *   Fixed cache to store prompts at `.html` instead of `.yaml`
  *   `SubIncorrect` and `SubWait` now include fields for wait times.
  *   Re-implemented submission result parsers using *attoparsec*

  Version 0.1.1.0
  ---------------

  *December 7, 2018*

  <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.1.0>

  *   More robust parser for submission results.  Also now reports "hints" if
      possible.

  Version 0.1.0.0
  ---------------

  *December 5, 2018*

  <https://github.com/mstksg/advent-of-code-api/releases/tag/v0.1.0.0>

  *   Initial Release
basic-deps:
  http-client: -any
  bytestring: -any
  stm: -any
  base: ! '>=4.9 && <5'
  time: -any
  servant-client: -any
  text: -any
  http-api-data: -any
  servant-client-core: -any
  filepath: -any
  servant: -any
  containers: -any
  http-client-tls: -any
  mtl: -any
  attoparsec: -any
  deepseq: -any
  tagsoup: -any
  finite-typelits: -any
  aeson: -any
  http-media: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.2
- 0.1.2.3
- 0.2.0.0
author: Justin Le
latest: 0.2.0.0
description-type: markdown
description: |+
  [advent-of-code-api][]
  ======================

  [![advent-of-code-api on Hackage](https://img.shields.io/hackage/v/advent-of-code-api.svg?maxAge=86400)](https://hackage.haskell.org/package/advent-of-code-api)
  [![Build Status](https://travis-ci.org/mstksg/advent-of-code-api.svg?branch=master)](https://travis-ci.org/mstksg/advent-of-code-api)

  Haskell bindings for Advent of Code REST API.  Caches and throttles requests
  automatically, and parses responses into meaningful data types.

  [advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api

  Specify your requests with `AoC` and `AoCOpts`, and run them with
  `runAoC`.

  Examples:

  ```haskell
  -- Fetch prompts for day 5
  runAoC myOpts $ AoCPrompt (mkDay_ 5)

  -- Fetch input for day 8
  runAoC myOpts $ AoCInput (mkDay_ 8)

  -- Submit answer "hello" for Day 10, Part 1
  runAoC myOpts $ AoCSubmit (mkDay_ 10) Part1 "hello"
  ```

  Please use responsibly.  All actions are rate-limited to a default of one
  request every three seconds, with ability to adjust up to as fast as a
  hard-coded limit of one request per second.

  The neatly exported bindings (handling cookies/authentication, cacheing,
  throttling) are in *Advent*.

  Session Keys
  ------------

  Session keys are required for all commands, but if you enter a bogus key
  you should be able to get at least Part 1 from `AoCPrompt`.

  The session key can be found by logging in on a web client and checking
  the cookies.  You can usually check these with in-browser developer
  tools.

  Servant API
  -----------

  A Servant API (for integrating with *servant* for features like mock servers,
  documentation and low-level client methods) is also exported in *Advent.API*.
  The Servant API also parses into meaningful types, but lacks management of
  cookies/auth, cacheing, and throttling.  Please use especially responsibly.

license-name: BSD-3-Clause
