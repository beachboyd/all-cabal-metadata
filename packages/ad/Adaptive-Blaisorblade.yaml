homepage: ''
changelog-type: text
hash: 9463510f58a3b43b18cfa1073ad304297443e88931e4a51cbec1103ff15dbf59
test-bench-deps: {}
maintainer: none
synopsis: Library for incremental computing.
changelog: ! "2013-01-26    <p.giarrusso@gmail.com>\n\n\t* Version 0.23, adapted for
  ghc 7.4.\n\t* Updated Cabal file with extra metadata.\n\n2008-07-14    <pj@csee.ltu.se>\n\n\t*
  Version 0.22, adapted for Hugs 20060908 and ghc 6.8.2.\n\n2005-07-09    <magnus@cse.ogi.edu>\n\n\t*
  Version 0.21, adapted for Hugs 20050308 and ghc 6.4, by\n\tAndrew Pimlott <andrew@pimlott.net>.\n\n2002-03-18
  \   <magnus@cse.ogi.edu>\n\n\t* Version 0.2, public release.\n"
basic-deps:
  base: ! '>=4.5 && <5'
all-versions:
- '0.23'
author: Magnus Carlsson
latest: '0.23'
description-type: text
description: ! "Adaptive version 0.23 2013-01-26\n================================\n\nThis
  is a minor update to Adaptive version 0.22 to make it work with\nrecent versions
  of GHC. Any problems with the result is my fault.\n\nPaolo G. Giarrusso, p.giarrusso@gmail.com\n\nAdaptive
  version 0.22 2008-07-14\n================================\n\nThis is a minor update
  to Adaptive version 0.21 to make it work with\nrecent versions of GHC and Hugs.
  Adaptive is now cabalized, and any\nproblems with the packaging is my fault, not
  Magnus.\n\nPeter A. Jonsson, pj@csee.ltu.se\n\n\nAdaptive version 0.21  2005-07-09\n=================================\n\nThis
  is a Haskell (plus some extensions) implementation of a library\nfor incremental
  computing.  It closely follows the implementation in\nthe nice POPL 2002 paper \"Adaptive
  Functional Programming\", by Umut\nAcar, Guy Blelloch and Bob Harper.  As of writing,
  their paper can be\nfound at\n\n      http://ttic.uchicago.edu/~umut/papers/popl02.html\n\nHowever,
  this Haskell library provides a monadic interface, which\ndoesn't need the \"write\"
  operation or the \"destination\" type.  In\naddition, the monadic types enforce
  correct usage, which means that a\nmodifiable variable must be defined before it
  can be used.  This is\nachieved within Haskell's type system plus some popular extensions\n(multi-parameter
  classes and functional dependencies).\n\nThe library is parameterised over any monad
  that has references (such\nas IO and ST).  This means that it should be possible
  to put it on top\nof e.g. many GUI monads too.\n\nThere is a small demo program
  of a classical incremental computation\nproblem: a spreadsheet.  Try it by typing\n\n
  \  runhugs -98 spreadsheet.hs\n\nand type, say \n\n  c0 <Return> Cell c1 <Return>
  c1 <Return> Const 42 <Return>.\n\nThis has been tested with the Hugs September 2006
  version.\n\nFeedback is welcome!\n\nMagnus Carlsson, magnus@galois.com\n"
license-name: BSD-3-Clause
