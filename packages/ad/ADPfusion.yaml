homepage: https://github.com/choener/ADPfusion
changelog-type: markdown
hash: d5b4ee2576b1663aae9106a28bfdf3562032947192486e0f6a4421fc1c7bc0ed
test-bench-deps:
  bits: -any
  tasty-th: ! '>=0.1'
  base: -any
  ADPfusion: -any
  PrimitiveArray: -any
  strict: -any
  tasty-quickcheck: ! '>=0.8'
  tasty: ! '>=0.11'
  OrderedBits: -any
  QuickCheck: -any
  vector: -any
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient, high-level dynamic programming.
changelog: ! "0.5.2.2\n-------\n\n- Modified signature of Edge to make explicit the
  @From@ and @To@ nodes of the\n  edge. Minor version bump, because @Edge@ is not
  official yet.\n- optimized table filling yields large improvements for linear languages\n\n0.5.2.1\n-------\n\n-
  removed upper bounds\n\n0.5.2.0\n-------\n\n- table filling fully inlined in the
  forward algorithm\n- experimental PrimBool operations\n- note: these optimizations
  are mostly of interest for linear languages, where\n  is rule (or function call)
  is comparatively expensive\n- major re-arrangement of modules: import ADP.Fusion.Core
  for development of\n  novel DP systems. Import ADP.Fusion.Point if you want to write
  a sequence\n  alignment algorithm\n\n0.5.1.0\n-------\n\n- improved table filling
  algorithm performance\n- some optimizations to terminal symbols\n\n0.5.0.0\n-------\n\n-
  complete re-design of Inside / Outside / Complement handling based on phantom\n
  \ types\n- very liberal combination of multi-tape grammars\n- simplified index generation
  system (both faster, and easier to write new\n  symbol now)\n\n0.4.1.1\n-------\n\n-
  bugfix in Multitape Subword Index calculations (A.F.S.Indices.hs) [this one\n  is
  quite spurious. I needed quickcheck to find a suitable minimal example\n  where
  Pseudoknot.hs fails]\n\n0.4.1.0\n-------\n\n- initial support for multi-context
  free grammars\n- mcfgs allow for interleaved syntactic variables\n- applications
  include: natural language modelling and pseudoknotted structures\n  in RNA\n- the
  simplest formal language that requires this is: a^i b^j a^i b^j\n- the [GenussFold](http://hackage.haskell.org/package/GenussFold)
  library gives\n  a simple example grammar\n\n0.4.0.2\n-------\n\n- bugfixes\n\n0.4.0.0\n-------\n\n-
  travic-ci integration\n- forward phase now operates on immutable tables that are
  internally thawed\n- resembles the behavior of Data.Vector.Generic.constructN\n-
  Empty needs to be bound to input. We require this as certain index structures\n
  \ have no natural notion of and empty index -- unless one provides additional\n
  \ information in the index\n\n0.3.0.0\n-------\n\n- simplified boundary checking:
  sometimes gives performance gain (!) due to one\n  loop variable less\n- optimized
  loop variable design following \"The HERMIT in the Stream\" (Farmer\n  et al, 2014)\n-
  somewhat nicer programmer interfaces\n- automatic filling and freezing of tables\n-
  multiple example algorithms (build with -fexamples switch):\n  - Needleman-Wunsch
  global alignment\n  - RNA secondary structure prediction using simple base pair
  maximization\n- updated Table code to handle single-dim Subwords in a better way.\n-
  simplified backtracking\n\n0.2.x.x\n-------\n\n- Streamlined interface: access everything
  via ADP.Fusion\n- /Multi-tape/ grammars can now be written and are fused\n\n"
basic-deps:
  bits: ! '>=0.4'
  base: ! '>=4.7 && <5.0'
  tuple: ! '>=0.3'
  PrimitiveArray: ==0.8.0.*
  th-orphans: ! '>=0.12'
  strict: ! '>=0.3'
  containers: -any
  mtl: ! '>=2.0'
  mmorph: ! '>=1.0'
  transformers: ! '>=0.3'
  DPutils: ==0.0.1.*
  OrderedBits: ==0.0.1.*
  QuickCheck: ! '>=2.7'
  template-haskell: ! '>=2.0'
  primitive: ! '>=0.5.4'
  vector: ! '>=0.11'
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.1.0
- 0.4.0.1
- 0.4.0.2
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.2
author: Christian Hoener zu Siederdissen, 2011-2016
latest: 0.5.2.2
description-type: markdown
description: ! "[![Build Status](https://travis-ci.org/choener/ADPfusion.svg?branch=master)](https://travis-ci.org/choener/ADPfusion)\n\n#
  ADPfusion\n\n[*generalized Algebraic Dynamic Programming Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\nIdeas
  implemented here are described in a couple of papers:\n\n\n\n1.  Christian Hoener
  zu Siederdissen  \n    *Sneaking Around ConcatMap: Efficient Combinators for Dynamic
  Programming*  \n    2012, Proceedings of the 17th ACM SIGPLAN international conference
  on Functional programming  \n    [paper](http://doi.acm.org/10.1145/2364527.2364559)
  [preprint](http://www.tbi.univie.ac.at/newpapers/pdfs/TBI-p-2012-2.pdf)  \n1.  Andrew
  Farmer, Christian Höner zu Siederdissen, and Andy Gill.  \n    *The HERMIT in the
  stream: fusing stream fusion’s concatMap*  \n    2014, Proceedings of the ACM SIGPLAN
  2014 workshop on Partial evaluation and program manipulation.  \n    [paper](http://dl.acm.org/citation.cfm?doid=2543728.2543736)
  \ \n1.  Christian Höner zu Siederdissen, Ivo L. Hofacker, and Peter F. Stadler.
  \ \n    *Product Grammars for Alignment and Folding*  \n    2014, IEEE/ACM Transactions
  on Computational Biology and Bioinformatics. 99  \n    [paper](http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6819790)
  \ \n1.  Christian Höner zu Siederdissen, Sonja J. Prohaska, and Peter F. Stadler
  \ \n    *Algebraic Dynamic Programming over General Data Structures*  \n    2015,
  BMC Bioinformatics  \n    [preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/hoe-pro-2015.pdf)
  \ \n1.  Maik Riechert, Christian Höner zu Siederdissen, and Peter F. Stadler  \n
  \   *Algebraic dynamic programming for multiple context-free languages*  \n    2015,
  submitted  \n    [preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/rie-hoe-2015.pdf)
  \ \n\n\n\n# Introduction\n\nADPfusion combines stream-fusion (using the stream interface
  provided by the\nvector library) and type-level programming to provide highly efficient
  dynamic\nprogramming combinators.\n\nFrom the programmers' viewpoint, ADPfusion
  behaves very much like the original\nADP implementation <http://bibiserv.techfak.uni-bielefeld.de/adp/>
  developed by\nRobert Giegerich and colleagues, though both combinator semantics
  and\nbacktracking are different.\n\nThe library internals, however, are designed
  not only to speed up ADP by a\nlarge margin (which this library does), but also
  to provide further runtime\nimprovements by allowing the programmer to switch over
  to other kinds of data\nstructures with better time and space behaviour. Most importantly,
  dynamic\nprogramming tables can be strict, removing indirections present in lazy,
  boxed\ntables.\n\nAs an example, even rather complex ADP code tends to be completely
  optimized to\nloops that use only unboxed variables (Int# and others, indexIntArray#
  and\nothers).\n\nCompletely novel (compared to ADP), is the idea of allowing efficient
  monadic\ncombinators. This facilitates writing code that performs backtracking,
  or\nsamples structures stochastically, among others things.\n\n\n\n\n# Installation\n\nFollow
  the [gADP examples](http://www.bioinf.uni-leipzig.de/Software/gADP/index.html).\n\n\n\n#
  Implementors Notes (if you want to extend ADPfusion)\n\n\n- The general inlining
  scheme is: (i) mkStream is {-# INLINE mkStream #-},\n  inner functions like mk,
  step, worker functions, and index-modifying\n  functions get an {-# INLINE [0] funName
  #-}. Where there is no function to\n  annotate, use delay_inline.\n\n- If you implement
  a new kind of memoizing table, like the dense Table.Array\n  ones, you will have
  to implement mkStream code. When you hand to the left,\n  the (i,j) indices and
  modify their extend (by, say, having NonEmpty table\n  constaints), you have to
  delay_inline this (until inliner phase 0). Otherwise\n  you will break fusion for
  mkStream.\n\n- Terminals that capture both, say indexing functions, and data should
  have no\n  strictness annotations for the indexing function. This allows the code
  to be\n  duplicated, then inlined. This improves performance a lot, because otherwise\n
  \ a function is created that performs these lookups, which has serious (50%\n  slower
  or so) performance implications.\n\n\n\n#### Contact\n\nChristian Hoener zu Siederdissen
  \ \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de  \n<http://www.bioinf.uni-leipzig.de/~choener/>
  \ \n\n"
license-name: BSD-3-Clause
