homepage: https://github.com/serokell/o-clock
changelog-type: markdown
hash: c63f7c8bc4e0ab90b91af0323160dee615878cd187bea98943e08f742ab704f4
test-bench-deps:
  o-clock: -any
  base: ! '>=4.10 && <5'
  tasty-hedgehog: ^>=0.1
  time-units: ==1.0.0
  markdown-unlit: ^>=0.5
  type-spec: ^>=0.3.0.1
  tasty-hspec: ^>=1.1.3
  hedgehog: ^>=0.5.1
  doctest: ! '>=0.13'
  gauge: ! '>=0.2.1 && <1'
  tiempo: ! '>=0.0.1.1'
  tasty: ^>=0.12
  deepseq: ! '>=1.4'
  Glob: ! '>=0.9'
maintainer: Serokell <hi@serokell.io>
synopsis: Type-safe time library.
changelog: ! "Change log\n==========\no'clock uses [PVP Versioning][1].\nThe change
  log is available [on GitHub][2].\n\n1.0.0\n=====\n\n* [#106](https://github.com/serokell/o-clock/issues/106):\n
  \ Remove `Num`, `Fractional`, `Real`, `RealFrac` instancies of `Time`.\n* [#100](https://github.com/serokell/o-clock/issues/100):\n
  \ Add `Hashable`, `NFData`, `Serialise`, `ToJSON`, `FromJSON`\n  instances for `Time`.\n\n0.1.1\n=====\n\n*
  [#98](https://github.com/serokell/o-clock/issues/98):\n  Support GHC-8.0.2.\n* [#95](https://github.com/serokell/o-clock/issues/95):\n
  \ Add `Semigroup` and `Monoid` instances for `Time`.\n* [#93](https://github.com/serokell/o-clock/issues/93):\n
  \ Remove `transformers` dependency.\n\n0.1.0\n=====\n\n* [#85](https://github.com/serokell/o-clock/issues/85):\n
  \ Add `fromUnixTime` function.\n* [#71](https://github.com/serokell/o-clock/issues/71):\n
  \ Add `toNum` function.\n* [#64](https://github.com/serokell/o-clock/issues/64):\n
  \ Add property tests for `unitsP . unitsF ≡ id`\n* [#63](https://github.com/serokell/o-clock/issues/63):\n
  \ Rename `Formatting` module to `Series`.\n  Add `SeriesP` class for parsing time.\n*
  [#81](https://github.com/serokell/o-clock/issues/81):\n  Rename `TimeStamp` to `Timestamp`.\n*
  [#60](https://github.com/serokell/o-clock/issues/60):\n  Show fractional as the
  last argument in the result of `seriesF`.\n* [#76](https://github.com/serokell/o-clock/issues/76):\n
  \ Remove useless instances of `TimeStamp`. Make TimeStamp always deal with\n  `Second`s
  internally.\n* [#61](https://github.com/serokell/o-clock/issues/61):\n  Change `Show`
  and `Read` instances for `Time` to use\n  mixed fractions.\n* [#72](https://github.com/serokell/o-clock/issues/72):\n
  \ Move `+:+` and `-:-` to `TimeStamp` module.\n  Make operators `*:*` and `/:/`
  for `timeMul` and `timeDiv`.\n  Add `-%-` operator. Change `timeAdd` function to
  work with `TimeStamp`.\n* [#56](https://github.com/serokell/o-clock/issues/56):\n
  \ Add `doctest` to documentation.\n* [#62](https://github.com/serokell/o-clock/issues/62):\n
  \ Add `.ghci` file. Make time creation helpers work with\n  `RatioNat` instead of
  `Naturals`.\n  Rename `+:` to `+:+` add `-:-`.\n* [#46](https://github.com/serokell/o-clock/issues/46):\n
  \ Introduce `...` type to create custom time unit lists in\n  provided bounds.\n*
  [#51](https://github.com/serokell/o-clock/issues/51):\n  Add `IsDescending` type
  family to check lists of time units\n  in `seriesF` function on right order\n* [#45](https://github.com/serokell/o-clock/issues/45):\n
  \ Fix behavior of 0 time passed to `seriesF`.\n\n0.0.0\n=====\n\n* Initially created.
  See [`README`][3] for more information.\n\n\n[1]: https://pvp.haskell.org\n[2]:
  https://github.com/serokell/o-clock/releases\n[3]: https://github.com/serokell/o-clock#readme\n"
basic-deps:
  o-clock: -any
  base: ! '>=4.9 && <5'
  ghc-prim: ! '>=0.5'
all-versions:
- '0.0.0'
- '0.1.0'
- '0.1.1'
- '1.0.0'
author: ! '@serokell'
latest: '1.0.0'
description-type: markdown
description: ! "# O'Clock\n\n[![Hackage](https://img.shields.io/hackage/v/o-clock.svg)](https://hackage.haskell.org/package/o-clock)\n[![Build
  status](https://travis-ci.org/serokell/o-clock.svg?branch=master)](https://travis-ci.org/serokell/o-clock)\n[![Stackage](http://stackage.org/package/o-clock/badge/lts)](http://stackage.org/lts/package/o-clock)\n[![Stackage
  Nightly](http://stackage.org/package/o-clock/badge/nightly)](http://stackage.org/nightly/package/o-clock)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/serokell/o-clock/blob/master/LICENSE)\n\n##
  Overview\n\nO'Clock is the library that provides type-safe time units data types.\n\nMost
  understandable use case is using [`threadDelay`](http://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Concurrent.html#v:threadDelay)
  function.\nIf you want to wait for _5 seconds_ in your program, you need to write
  something like this:\n\n```haskell ignore\nthreadDelay (5 * 10^(6 :: Int))\n```\n\nWith
  O'Clock you can write in several more convenient ways (and use more preferred to
  you):\n\n```haskell ignore\nthreadDelay $ sec 5\nthreadDelay (Time @Second 5)\nthreadDelay
  @Second 5\n```\n\n## Features\n\n`O'Clock` provides the following features to its
  users:\n\n1. Single data type for all time units.\n\n   * Different time units represented
  as different type parameters for single `Time` data type.\n     Amount of required
  boilerplate is minimal.\n\n2. Time stored as `Rational` number.\n\n   * It means
  that if you convert `900` milliseconds to seconds, you will have `0.9` second instead
  of `0` seconds.\n     So property `toUnit @to @from . toUnit @from @to ≡ id` is
  satisfied.\n\n3. Different unit types are stored as rational multiplier in type.\n\n
  \  * `o-clock` package introduces its own kind `Rat` for type-level rational numbers.\n
  \    Units are stored as rational multipliers in type. Because of that some computation
  is performed on type-level.\n     So if you want to convert `Week` to `Day`, `o-clock`
  library ensures that time units will just be multipled by `7`.\n\n4. Functions from
  `base` that work with time are converted to more time-safe versions:\n\n   * These
  functions are: `threadDelay`, `timeout`, `getCPUTime`.\n\n5. Externally extensible
  interface.\n\n   * It means that if you want to roll out your own time units and
  use it in your project,\n     this can be done in easy and convenient way (see tutorial
  below).\n\n6. `O'Clock` contains useful instances like `Hashable`, `NFData`, `Serialise`,
  `ToJSON`, `FromJSON`\n   but it's not included to the package by default. To do
  that you need to provide corresponding\n   flag from this list: `hashable`, `deepseq`,
  `serialise` and `aeson`.\n\n_**Note:**_ features support for `GHC-8.2.2` and `GHC-8.0.2`
  is quite limited.\n\n## Example: How to make your own time unit\n\nThis README section
  contains tutorial on how you can introduce your own time units.\nLet's solve the
  following problem:\n\n_You're CEO of big company. Your employers report you number
  of hours they worked this month.\nYou want format hours in more human-readable way,
  i.e. in number of work weeks and work days.\nSo we want `140 hours` be formatted
  as `3ww2wd` (3 full work weeks and 2 full work days)._\n\n### Setting up\n\nSince
  this tutorial is literate haskell file, let's first write some pragmas and imports.\n\n```haskell\n{-#
  LANGUAGE CPP              #-}\n{-# LANGUAGE DataKinds        #-}\n{-# LANGUAGE TypeApplications
  #-}\n{-# LANGUAGE TypeFamilies     #-}\n{-# LANGUAGE TypeOperators    #-}\n\nmodule
  Main where\n\n#if ( __GLASGOW_HASKELL__ >= 804 )\nimport Time (type (*))\n#endif\nimport
  Time ((:%), (-:-), Time, Hour, UnitName,floorUnit, hour, seriesF, toUnit)\n\n```\n\n###
  Introduce custom units\n\nYou need to write some code in order to introduce your
  own time units. In our task we need\nwork day represented as `8` hours and work
  week represented as `5` work days.\n\n```haskell\n-- | Time unit for a working day
  (8 hours).\n#if ( __GLASGOW_HASKELL__ >= 804 )\ntype WorkDay = 8 * Hour\n#else\ntype
  WorkDay = 28800 :% 1\n#endif\n\n-- | Time unit for a work week (5 working days).\n#if
  ( __GLASGOW_HASKELL__ >= 804 )\ntype WorkWeek = 5 * WorkDay\n#else\ntype WorkWeek
  = 144000 :% 1\n#endif\n\n-- this allows to use 'Show' and 'Read' functions for our
  time units\ntype instance UnitName (28800  :% 1) = \"wd\"  -- One WorkDay  contains
  28800  seconds\ntype instance UnitName (144000 :% 1) = \"ww\"  -- One WorkWeek contains
  144000 seconds\n\n```\n\n### Calculations\n\nNow let's implement main logic of our
  application. Our main function should take hours,\nconvert them to work weeks and
  work days and then show in human readable format.\n\n```haskell\ncalculateWork ::
  Time Hour -> (Time WorkWeek, Time WorkDay)\ncalculateWork workHours =\n    let completeWeeks
  = floorUnit $ toUnit @WorkWeek workHours\n        completeDays  = floorUnit $ toUnit
  @WorkDay  workHours -:- toUnit completeWeeks\n    in (completeWeeks, completeDays)\n\nformatHours
  :: Time Hour -> String\nformatHours hours = let (weeks, days) = calculateWork hours
  in show weeks ++ show days\n```\n\nAfter that we can simply print the output we
  wanted.\n\nThought we have special function for this kind of formatting purposes
  `seriesF`.\nSo the similar result (but not rounded) can be gained with the usage
  of it. Check it out:\n\n```haskell\nmain :: IO ()\nmain = do\n    putStrLn $ \"The
  result:   \" ++ formatHours (hour 140)\n    putStrLn $ \"With seriesF: \" ++ (seriesF
  @'[WorkWeek, WorkDay] $ hour 140)\n```\n\nAnd the output will be\n\n```haskell ignore\nThe
  result:   3ww2wd\nWith seriesF: 3ww2+1/2wd\n```\n"
license-name: MIT
