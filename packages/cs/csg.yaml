homepage: https://github.com/dzhus/csg#readme
changelog-type: markdown
hash: 124889ef6aa8a23ae9c314cc668b51da40a0ca365c5022738bfadb6c1a22d16e
test-bench-deps:
  bytestring: -any
  base: <5
  strict: -any
  criterion: -any
  doctest: -any
  csg: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  simple-vec3: ! '>=0.4'
  doctest-discover: ! '>=0.1.0.8'
  tasty: -any
  vector: -any
maintainer: dima@dzhus.org
synopsis: Analytical CSG (Constructive Solid Geometry) library
changelog: ! '# Changelog


  ## [0.1] - 2018-03-20


  [0.1]: https://github.com/dzhus/csg/tree/0.1

'
basic-deps:
  gloss: -any
  bytestring: -any
  base: <5
  strict: -any
  turtle: -any
  containers: -any
  csg: -any
  gloss-raster: -any
  simple-vec3: ! '>=0.4'
  attoparsec: -any
  transformers: -any
  QuickCheck: -any
  system-filepath: -any
all-versions:
- '0.1'
author: Dmitry Dzhus
latest: '0.1'
description-type: markdown
description: ! "# CSG: constructive solid geometry library\n\n[![Travis CI build status](https://travis-ci.org/dzhus/csg.svg)](https://travis-ci.org/dzhus/csg)\n[![Hackage](https://img.shields.io/hackage/v/csg.svg?colorB=5e5184&style=flat)](https://hackage.haskell.org/package/csg)\n[![Hackage
  deps](https://img.shields.io/hackage-deps/v/csg.svg)](http://packdeps.haskellers.com/feed?needle=csg)\n\nCSG
  is a [constructive solid geometry][csg-wiki] library with support\nfor ray casting.
  CSG allows you to define a complex solid as a\ncomposition of primitives. It also
  provides functions to perform ray\ncasting (find an intersection of a ray and the
  defined solid) or test\nwhether a point belongs to the solid (for Monte Carlo volume\ncalculation).\n\n```haskell\n--
  \"Data.CSG\" uses 'Vec3' to represent vectors and points:\n>>> let p1 = fromXYZ
  (5, -6.5, -5)\n>>> toXYZ (origin :: Point)\n(0.0,0.0,0.0)\n\n-- Define some solids:\n>>>
  let s = sphere origin 5.0\n>>> let b = cuboid (fromXYZ (-1, -1, -1)) (fromXYZ (1,
  1, 1))\n\n-- Test if a point is inside the solid:\n>>> origin `inside` (s `intersect`
  b)\nTrue\n\n>>> origin `inside` (s `subtract` b)\nFalse\n\n-- Find the distance
  to the next intersection of a ray with a solid, along with the\n-- surface normal:\n>>>
  let axis = fromXYZ (1, 2, 10)\n>>> let solid = cylinder origin axis 2.0 `intersect`
  sphere origin 3.5\n>>> let ray = Ray (p1, origin <-> p1)\n>>> ray `cast` solid\nJust
  (HitPoint 0.7422558525331708 (Just (CVec3 0.7155468474912454 (-0.6952955216188516)
  6.750441957464598e-2)))\n\n-- Load a solid definition from a file:\n>>> import Data.CSG.Parser\n>>>
  Right solid2 <- parseGeometryFile \"examples/reentry.geo\"\n>>> ray `cast` solid2\nJust
  (HitPoint 10.877824491509912 (Just (CVec3 (-0.5690708596937849) 0.7397921176019203
  0.3589790793088691)))\n```\n\nPlease consult the [Hackage page for csg][hackage-doc]\nfor
  full documentation.\n\nBy default `csg` is built using `CVec3` from [simple-vec3][]
  to\nrepresent vectors and points, which according to benchmarks shows\nbetter performance
  with Unboxed and Storable vectors. Build `csg` with\n`triples` flag to use `(Double,
  Double, Double)` instead which may be\na more convenient programmatic interface
  that needs no\n`fromXYZ`/`toXYZ`.\n\nSee [alternatives](#alternatives) too.\n\n##
  csg-raycaster\n\nThe package also includes `csg-raycaster` executable, which is
  a\nsimple interactive GUI for the ray casting algorithm.\n\n`csg-raycaster` takes
  a geometry defintion file as input. See\n[`cube.geo`](examples/cube.geo):\n\n```\nsolid
  box = orthobrick (-150, -150, -150; 150, 150, 150);\n\nsolid rounded = sphere (0,
  0, 0; 200);\n\nsolid roundedbox = rounded and box;\n\nsolid cylinder1 = cylinder
  (-160, 0, 0; 160, 0, 0; 100);\nsolid cylinder2 = cylinder (0, -160, 0; 0, 160, 0;
  100);\nsolid cylinder3 = cylinder (0, 0, -160; 0, 0, 160; 100);\n\nsolid cross =
  cylinder1 or cylinder2 or cylinder3;\n\nsolid cutout = not cross;\n\nsolid top =
  roundedbox and cutout;\n\ntlo top;\n```\n\nPlease consult the [Hackage page for
  Data.CSG.Parser][parser-doc] for\nfull format specification.\n\n`csg-raycaster`
  may be run as\n\n```\ncsg-raycaster cube.geo\n```\n\nRun as `csg-raycaster --help`
  to see all options.\n\n![csg-raycaster demo](csg-raycaster.gif)\n\nWhen run without
  a file argument, `csg-raycaster` will try to display\nan arbitrary CSG solid.\n\nIn
  the GUI window the following controls are supported:\n\n| Input                     |
  Function                             |\n|---------------------------|--------------------------------------|\n|
  Left mouse button + drag  | Rotate                               |\n| Right mouse
  button + drag | Pan                                  |\n| Mouse wheel up            |
  Zoom in                              |\n| Mouse wheel down          | Zoom out                             |\n|
  `r`                       | Reset zoom level and camera position |\n\n## Alternatives\n\ncsg
  library performs no surface interpolation when doing ray casting.\nInstead, we only
  solve ray-surface intersection equation numerically.\n\nThere're other Haskell libraries
  for CSG:\n\n- [implicit][]:\n\n    - Offers a much richer operation set\n\n    -
  Uses function representation for CSG solids\n\n    - If `implicit` had ray-casting
  support in early 2012 then I\n      probably wouldn't write `csg`.\n\n- [mecha][]:\n\n
  \   - Only provides types and functions to define solids and export\n      definitions
  to external formats\n\n    - No support for ray casting\n\n[csg-wiki]: https://en.wikipedia.org/wiki/Constructive_solid_geometry\n[hackage-doc]:
  http://hackage.haskell.org/package/csg/docs/Data-CSG.html\n[implicit]: https://hackage.haskell.org/package/implicit\n[mecha]:
  https://hackage.haskell.org/package/mecha\n[parser-doc]: http://hackage.haskell.org/package/csg/docs/Data-CSG-Parser.html\n[simple-vec3]:
  https://hackage.haskell.org/package/simple-vec3\n"
license-name: BSD3
