homepage: https://github.com/lspitzner/brittany/
changelog-type: markdown
hash: 10185245dce19ea17d1751c498a9954d2de2e38b7bd9e50eb4298aa68fef7ab2
test-bench-deps:
  ghc: -any
  data-tree-print: -any
  bytestring: -any
  brittany: -any
  butcher: -any
  czipwith: -any
  extra: -any
  unsafe: -any
  base: -any
  hspec: ! '>=2.4.1 && <2.8'
  text: -any
  syb: -any
  strict: -any
  ghc-exactprint: -any
  filepath: -any
  uniplate: -any
  parsec: ! '>=3.1.11 && <3.2'
  multistate: -any
  semigroups: -any
  containers: -any
  ghc-paths: -any
  mtl: -any
  cmdargs: -any
  transformers: -any
  deepseq: -any
  ghc-boot-th: -any
  monad-memo: -any
  pretty: -any
  aeson: -any
  safe: -any
  yaml: -any
  neat-interpolation: -any
  directory: -any
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: Haskell source code formatter
changelog: "# Revision history for brittany\n\n## 0.12.0.0 -- June 2019\n\n* Support
  for ghc-8.6 (basic support, not necessarily all new syntactic\n  extensions)\n*
  Support -XExplicitNamespaces and -XPatternSynonyms\n* Allow a --dry-run sort of
  operation via flag \"-c/--check-mode\"\n  (thanks to Doug Beardsley @mightybyte)\n*
  Include file name in errors about unsupported syntax nodes (thanks to @5outh)\n*
  Partially implement layouting class instances: Layouts children, but\n  falls back
  on ghc-exactprint for the instance head\n  (thanks to Rupert Horlick @ruhatch)\n*
  Implement layouting for type synonyms (thanks to Rupert Horlick @ruhatch)\n* Support
  -XMagicHash, -XUnboxedTuples (thanks to Sergey Vinokurov @sergv)\n* Support -XQuasiQuotes
  (no formatting applied to the splices; they are simply\n  retained without causing
  the dreaded \"Unknown construct: HsSpliceE{}\")\n    - `lconfig_allowHangingQuasiQuotes`
  controls whether multi-line\n      QuasiQuotes are allowed to start at the end of
  the current line, or\n      whether they are always placed in new lines.\n* Bugfixes:\n
  \   - Fix rare-case alignment bug with IndentPolicyMultiple (#144)\n    - Make inline
  layout config apply to module header (#151)\n    - Fix unaligned import-hiding layout
  (#150)\n    - Fix idempotence violation for comments around if-then-else (#167)\n
  \   - Fix comments having an effect on far-away parent node's layout (#159)\n    -
  Fix imports of type operators (\"symbolic data types\")\n      (thanks to Phil Hazelden
  @ChickenProp)\n    - Work around GHC and cabal-install misfeature \".ghc.environment
  files\"\n      that could break brittany in unexpected and hard-to-understand ways\n
  \   - Stop removing empty lines before `where` keyword in a couple of cases\n    -
  Fix functions with mixing prefix/infix style causing error (#234)\n* Changes to
  layout:\n    - Align usage of spaces for record update vs record construction (#126)\n
  \   - More indentation to import-hiding-paragraph (follow-up to #150 fix)\n    -
  Record construction and update now are layouted in the same way\n      (thanks to
  Evan Rutledge Borden @eborden)\n    - Stop allowing single-line layout when there
  are comments between\n      arguments (#214) (thanks to @matt-noonan)\n* Various
  build-instructions and editor integrations\n\n## 0.11.0.0 -- May 2018\n\n* Support
  for ghc-8.4\n* Implement inline-config\n    e.g. \"-- brittany --indent=4\"\n\n
  \   respects the following comment forms as input:\n\n    ~~~~\n    source comment
  \                      affected target\n    ======================================================\n
  \   \"-- brittany CONFIG\"                 whole module\n    \"-- brittany-next-binding
  CONFIG\"    next binding\n    \"-- brittany-disable-next-binding\"   next binding\n
  \   \"-- brittany @ myExampleFunc CONFIG\" `myExampleFunc`\n    ~~~~\n\n    multiline-comments
  are supported too, although\n    the specification must still be a single line.
  E.g.\n    \n    > \"{- brittany --columns 50 -}\"\n    \n    CONFIG is either:\n
  \   \n    1) one or more flags in the form of what brittany accepts\n       on the
  commandline, e.g. \"-- columns 50\", or\n    2) one or more specifications in the
  form of what brittany\n       accepts in its config files for the layouting config\n
  \      (a one-line yaml document), e.g. \"{ lconfig_cols: 50 }\"\n* Implement `IndentPolicyMultiple`
  (thanks to Bryan Richter @chreekat)\n    Restrict indentation amounts to `n * indentAmount`\n*
  Implement `--obfuscate` that replaces non-keyword identifiers with random\n  names\n*
  Do not write files unless there are changes (don't update modtime)\n  (`--write-mode=inplace`)
  (#93)\n* Bugfixes:\n    - Fix empty function constraints (`() => IO ()`) (#133)\n
  \   - Fix overflowing columns caused by aligning with surrounding lines\n      for
  certain complex cases\n    - Implement hacky workaround for `type instance`s (`-XTypeFamilies`)
  (#89)\n* Layouting changes:\n    - On default settings, allow single-line module
  header\n      `module MyModule where` when no exports\n    - Fix one case of non-optimal
  layouting for if-then-else\n    - Allow same-line let binding inside do-notation
  with\n      `IndentPolicyLeft/Multiple` and `indentAmount>=4`\n\n## 0.10.0.0 --
  March 2018\n\n* Implement module/exports/imports layouting (thanks to sniperrifle2004)\n*
  Expose config paths/parsing functions (thanks to Alexey Raga)\n* Bugfixes:\n    -
  Fix layouting of `NOINLINE` pragma\n    - Fix ticked type operator (e.g. `':-`)
  losing tick (#125)\n    - Fix alignment issue with cases involving operators (#65)\n
  \   - Fix comments in tuples being dropped (#37)\n    - Fix comment placements with
  let-in (#110)\n* Layouting changes:\n    - Align arguments only if it is the same
  function being called (#128)\n    - Do not use single-line layout when infix operator
  expression contains\n      comments (#111)\n* New layouting config items:\n    -
  `lconfig_importColumn`/`--import-col`: column for import items\n    - `lconfig_importAsColumn`/`--import-as-col`:
  column for the \"as\" name of\n      a module\n    - `lconfig_reformatModulePreamble`:
  controls module/export/import layouting\n      (default True)\n    - `lconfig_allowSingleLineExportList`:
  permit one-line module header, e.g.\n      `module Main (main)` (default False)\n\n##
  0.9.0.1  -- February 2018\n\n* Support `TupleSections` (thanks to Matthew Piziak)\n*
  Bugfixes:\n    - Fix Shebang handling with stdin input (#92)\n    - Fix bug that
  effectively deleted strict/lazy matches (BangPatterns) (#116)\n    - Fix infix operator
  whitespace bug (#101, #114)\n    - Fix help command output and its layouting (#103)\n
  \   - Fix crash when config dir does not exist yet (#115)\n* Layouting changes:\n
  \   - no space after opening non-tuple parenthesis even for multi-line case\n    -
  use spaces around infix operators (applies to sections and in pattern\n      matches)\n
  \   - Let-in is layouted more flexibly in fewer lines, if possible\n      (thanks
  to Evan Borden)\n\n## 0.9.0.0  -- December 2017\n\n* Change default global config
  path (use XDG spec)\n    Existing config should still be respected, so this should
  not break\n    compatibility\n* Support per-project config\n* ! Slight rework of
  the commandline interface:\n    - Support multiple inputs and outputs\n    - Support
  inplace-transformation for multiple files via\n      `--write-mode=inplace`\n* Implement
  `IndentPolicyLeft` - the indentation mode that never adds more\n  than the base
  indentation for nested parts (no hanging indentation)\n\n    (thanks to Evan Borden)\n*
  Fix bug that manifested in bad output for (top-level) template haskell splices\n*
  Extension support:\n    - RecordWildCards\n    - RecursiveDo (was only partially
  supported previously)\n* Layouting Bugfixes:\n    - Properly reproduce parentheses
  around kind signatures\n    - Fix issue around promoted lists\n      (example good:
  `'[ 'True]` bad: `'['True]`)\n    - Trim text from exactprint used as workaround
  for unknown nodes\n      (unsupported extension workaround)\n* Layouting changes\n
  \   - Insert spaces around operator in sections\n\n## 0.8.0.3  -- September 2017\n\n*
  Support for ghc-8.2.1\n* Bugfixes:\n    - Fix quadratic performance issue\n    -
  Fix special \"where\" indentation with indentAmount /= 2\n    - Fix negative literals
  in patterns\n    - Support type applications\n* Accept `-h` for `--help` and improve
  help layouting (via butcher-1.1.0.2)\n* Add continuous integration via travis (cabal,
  cabal-new, stack)\n  (brittle due compilation time limit)\n* Reduce compilation
  memory usage a bit\n\n## 0.8.0.2  -- August 2017\n\n* Add library interface, to
  be used by `haskell-ide-engine`.\n* Publish to hackage.\n\n## 0.8.0.1  -- May 2017\n\n*
  Document the high-level design of the program\n* Improve layouting for many different
  cases, too many to list here. Brittany\n  still does only reformat top-level type
  signatures and bindings.\n* Publish all dependencies on hackage; `ghc-exactprint
  ` adaptions got merged\n  upstream as well.\n* Reduce the aggressiveness of horizontal
  alignment; this is configurable\n  via the `lconfig_alignmentLimit` and `lconfig_alignmentBreakOnMultiline`\n
  \ values (config file only for now).\n* (!) Breaking change to the config file format:
  The keys previously contained\n  underscore (e.g. `_econf_Werror`) but do not anymore
  (`econf_Werror`).\n  Add config version; also\n* Move config value `conf_errorHandling.econf_CPPMode`
  to\n  `conf_preprocessor.ppconf_CPPMode`.\n* Cope with unhandled syntactical constructs
  more gracefully by falling back\n  on the ghc-exactprint output; Brittany simply
  won't touch certain\n  subexpressions instead of aborting. This is further configurable
  via the\n  `econf_omit_output_valid_check` config value.\n* Due to improvements
  to the `butcher` library: Accept `--key=value` on\n  commandline (only `--key value`
  was supported previously).\n* Improve testsuite setup: The `tests.blt` file contains
  many different\n  testcases that allow quick addition - feel free to report bugs
  directly\n  by making PRs with additions to that file.\n* Release under the terms
  of the AGPLv3\n\n## 0.7.1.0  -- 2016-09-06\n\n* Support stack\n* Fix --ghc-options
  handling\n* Add commandline param to allow shortcut `brittany Foo.hs`\n  meaning
  `brittany -i Foo.hs`\n\n## 0.7.0.0  -- 2016-09-04\n\n* First official alpha release\n*
  Fix commandline flag parsing\n* Implement/Improve horizontal aligning\n* Various
  minor fixes and layouting improvements\n\n## 0.6.0.0  -- 2016-08-12\n\n* Add check
  that output is syntactically valid\n* (!) Change config format, breaking previous
  configs\n* Various layouting additions/imporements\n* Various minor fixes\n\n##
  0.5.0.0  -- 2016-08-08\n\n* Support --ghc-options\n* Support user and local config
  files: Local config file is not mandatory\n  anymore.\n\n## 0.4.0.0  -- 2016-08-06\n\n*
  Make comment handling a bit more clever\n* Various layouting additions/imporements\n\n##
  0.3.0.0  -- 2016-08-04\n\n* Various layouting additions/imporements\n\n## 0.2.0.0
  \ -- 2016-07-30\n\n* Basic and partial implementation for\n  expression/decl/statement/pattern
  layouting\n* Prevent exponential behaviour using manual stablenames\n\n## 0.1.0.0
  \ -- 2016-06-05\n\n* First working code for type signature layouting\n"
basic-deps:
  ghc: ! '>=8.0.1 && <8.7'
  data-tree-print: -any
  bytestring: ! '>=0.10.8.1 && <0.11'
  brittany: -any
  butcher: ! '>=1.3.1 && <1.4'
  czipwith: ! '>=1.0.1.0 && <1.1'
  extra: ! '>=1.4.10 && <1.7'
  unsafe: ==0.0.*
  base: ! '>=4.9 && <4.13'
  text: ==1.2.*
  syb: ! '>=0.6 && <0.8'
  strict: ! '>=0.3.2 && <0.4'
  ghc-exactprint: ! '>=0.5.8 && <0.6.2'
  filepath: ! '>=1.4.1.0 && <1.5'
  uniplate: ! '>=1.6.12 && <1.7'
  multistate: ! '>=0.7.1.1 && <0.9'
  semigroups: ! '>=0.18.2 && <0.19'
  containers: ! '>=0.5.7.1 && <0.7'
  ghc-paths: ! '>=0.1.0.9 && <0.2'
  mtl: ! '>=2.2.1 && <2.3'
  cmdargs: ! '>=0.10.14 && <0.11'
  transformers: ! '>=0.5.2.0 && <0.6'
  random: ! '>=1.1 && <1.2'
  deepseq: ! '>=1.4.2.0 && <1.5'
  ghc-boot-th: ! '>=8.0.1 && <8.7'
  monad-memo: ! '>=0.4.1 && <0.6'
  pretty: ! '>=1.1.3.3 && <1.2'
  aeson: ! '>=1.0.1.0 && <1.5'
  safe: ! '>=0.3.9 && <0.4'
  yaml: ! '>=0.8.18 && <0.12'
  neat-interpolation: ! '>=0.3.2 && <0.4'
  directory: ! '>=1.2.6.2 && <1.4'
all-versions:
- 0.8.0.2
- 0.8.0.3
- 0.9.0.0
- 0.9.0.1
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
author: Lennart Spitzner
latest: 0.12.0.0
description-type: markdown
description: "# brittany [![Hackage version](https://img.shields.io/hackage/v/brittany.svg?label=Hackage)](https://hackage.haskell.org/package/brittany)
  [![Stackage version](https://www.stackage.org/package/brittany/badge/lts?label=Stackage)](https://www.stackage.org/package/brittany)
  [![Build Status](https://secure.travis-ci.org/lspitzner/brittany.svg?branch=master)](http://travis-ci.org/lspitzner/brittany)
  \nhaskell source code formatter\n\n![Output sample](https://github.com/lspitzner/brittany/raw/master/brittany-sample.gif)\n\n(see
  [more examples and comparisons](/doc/showcases))\n\nThis project's goals roughly
  are to:\n\n- Always retain the semantics of the source being transformed;\n- Be
  idempotent;\n- Support the full GHC-haskell syntax including syntactic extensions\n
  \ (but excluding `-XCPP` which is too hard);\n- Retain newlines and comments unmodified;\n-
  Be clever about using the available horizontal space while not overflowing\n  the
  column maximum if it cannot be avoided;\n- Be clever about aligning things horizontally
  (this can be turned off\n  completely however);\n- Have linear complexity in the
  size of the input.\n\nIn theory, the core algorithm inside brittany reaches these
  goals. It is rather\nclever about making use of horizontal space while still being
  linear in the\nsize of the input (although the constant factor is not small). See\n[these
  examples of clever layouting](/doc/showcases/Layout_Interactions.md).\n\nBut brittany
  is not finished yet, and there are some open issues that yet\nrequire fixing:\n\n-
  **only the module header (imports/exports), type-signatures and\n  function/value
  bindings** are processed;\n  other module elements (data-decls, classes, instances,
  etc.)\n  are not transformed in any way; this extends to e.g. **bindings inside
  class\n  instance definitions** - they **won't be touched** (yet).\n- By using `ghc-exactprint`
  as the parser, brittany supports full GHC \n  including extensions, but **some of
  the less common syntactic elements\n  (even of 2010 haskell) are not handled**.\n-
  **There are some known issues regarding handling of in-source comments.**\n  There
  are cases where comments are not copied to the output (this will\n  be detected
  and the user will get an error); there are other cases where\n  comments are moved
  slightly; there are also cases where comments result in\n  wonky newline insertion
  (although this should be a purely aesthetic issue.)\n\n## Try without Installing\n\nYou
  can [paste haskell code over here](https://hexagoxel.de/brittany/)\nto test how
  it gets formatted by brittany. (Rg. privacy: the server does\nlog the size of the
  input, but _not_ the full input/output of requests.)\n\n# Other usage notes\n\n-
  Supports GHC versions `8.0`, `8.2`, `8.4`, `8.6`.\n- included in stackage with lts>=10.0
  (or nightlies dating to >=2017-11-15)\n- config (file) documentation is lacking.\n-
  some config values can not be configured via commandline yet.\n- uses/creates user
  config file in `~/.config/brittany/config.yaml`;\n  also reads (the first) `brittany.yaml`
  found in current or parent\n  directories.\n\n# Installation\n\n- via `stack`\n\n
  \   ~~~~.sh\n    stack install brittany # --resolver lts-10.0\n    ~~~~\n\n    If
  you use an lts that includes brittany this should just work; otherwise\n    you
  may want to clone the repo and try again (there are several stack.yamls\n    included).\n\n-
  via `nix`:\n    ~~~.sh\n    nix build -f release.nix     # or 'nix-build -f release.nix'\n
  \   nix-env -i ./result\n    ~~~\n\n- via `cabal v1-build`\n\n    ~~~~.sh\n    #
  optionally:\n    # mkdir brittany\n    # cd brittany\n    # cabal sandbox init\n
  \   cabal install brittany --bindir=$HOME/.cabal/bin # -w $PATH_TO_GHC_8_x\n    ~~~~\n\n-
  via `cabal v2-install`\n\n    ~~~~.sh\n    cabal v2-install brittany\n    ~~~~\n\n-
  via `cabal v2-build`, should v2-install not work:\n\n    ~~~~.sh\n    cabal unpack
  brittany\n    cd brittany-0.11.0.0\n    # cabal new-configure -w $PATH_TO_GHC_8_x\n
  \   cabal new-build exe:brittany\n    # and it should be safe to just copy the executable,
  e.g.\n    cp `find dist-newstyle/ -name brittany -type f | xargs -x ls -t | head
  -n1` $HOME/.cabal/bin/\n    ~~~~\n\n- on ArchLinux via [the brittany AUR package](https://aur.archlinux.org/packages/brittany/)\n
  \ using `aura`:\n    ~~~~.sh\n    aura -A brittany\n    ~~~~\n\n# Editor Integration\n\n####
  Sublime text\n  [In this gist](https://gist.github.com/lspitzner/097c33177248a65e7657f0c6d0d12075)\n
  \ I have described a haskell setup that includes a shortcut to run brittany formatting.\n####
  VSCode\n  [This extension](https://marketplace.visualstudio.com/items?itemName=MaxGabriel.brittany)\n
  \ connects commandline `brittany` to VSCode formatting API. Thanks to @MaxGabriel.\n####
  Via HIE\n  [haskell-ide-engine](https://github.com/haskell/haskell-ide-engine)\n
  \ includes a `brittany` plugin that directly uses the brittany library.\n  Relevant
  for any editors that properly support the language-server-protocol.\n#### Neovim
  / Vim 8\n  The [Neoformat](https://github.com/sbdchd/neoformat) plugin comes with
  support for\n  brittany built in.\n#### Atom\n  [Atom Beautify](https://atom.io/packages/atom-beautify)
  supports brittany as a formatter for Haskell. Since the default formatter is set
  to hindent, you will need to change this setting to brittany, after installing the
  extension.\n#### Emacs\n  [format-all](https://github.com/lassik/emacs-format-all-the-code)
  support brittany as the default formatter for Haskell.\n\n# Usage\n\n- Default mode
  of operation: Transform a single module, from `stdin` to `stdout`.\n  Can pass one
  or multiple files as input, and there is a flag to override them\n  in place instead
  of using `stdout` (since 0.9.0.0). So:\n  \n    ~~~~ .sh\n    brittany                           #
  stdin -> stdout\n    brittany mysource.hs               # ./mysource.hs -> stdout\n
  \   brittany --write-mode=inplace *.hs # apply formatting to all ./*.hs inplace\n
  \   ~~~~\n    \n- For stdin/stdout usage it makes sense to enable certain syntactic
  extensions\n  by default, i.e. to add something like this to your\n  `~/.config/brittany/config.yaml`
  (execute `brittany` once to create default):\n\n    ~~~~\n    conf_forward:\n      options_ghc:\n
  \     - -XLambdaCase\n      - -XMultiWayIf\n      - -XGADTs\n      - -XPatternGuards\n
  \     - -XViewPatterns\n      - -XRecursiveDo\n      - -XTupleSections\n      -
  -XExplicitForAll\n      - -XImplicitParams\n      - -XQuasiQuotes\n      - -XTemplateHaskell\n
  \     - -XBangPatterns\n    ~~~~\n\n# Feature Requests, Contribution, Documentation\n\nFor
  a long time this project has had a single maintainer, and as a consequence\nthere
  have been some mildly large delays for reacting to feature requests\nand even PRs.\n\nSorry
  about that.\n\nThe good news is that this project is getting sponsored by PRODA
  LTD, and two\nprevious contributors, Evan Borden and Taylor Fausak, have agreed
  on helping\nwith organisational aspects. Thanks!\n\nStill, this project has a long
  queue of very sensible feature requests, so it\nmay take some time until new ones
  get our attention. But with the help of\nthe co-maintainers, at least the reaction-times
  on PRs and the frequency\nof releases should improve significantly.\n\nIf you are
  interested in making your own contributions, there is\na good amount of high-level
  documentation at\n\n[the documentation index](doc/implementation/index.md)\n\n#
  License\n\nCopyright (C) 2016-2019 Lennart Spitzner\\\nCopyright (C) 2019      PRODA
  LTD\n\nThis program is free software: you can redistribute it and/or modify\nit
  under the terms of the\n[GNU Affero General Public License, version 3](http://www.gnu.org/licenses/agpl-3.0.html),\nas
  published by the Free Software Foundation.\n\nThis program is distributed in the
  hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied
  warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU
  Affero General Public License for more details.\n\nYou should have received a copy
  of the GNU Affero General Public License\nalong with this program.  If not, see
  <http://www.gnu.org/licenses/>.\n"
license-name: AGPL-3.0-only
