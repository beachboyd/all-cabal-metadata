homepage: https://github.com/tomjaguarpaw/haskell-opaleye
changelog-type: markdown
hash: ee50cb0038bd1ba60438da405fc5ba31556894a42fde2b54439d42038a225f1f
test-bench-deps:
  base: ==4.*
  time: -any
  hspec: -any
  text: ! '>=0.11 && <1.3'
  semigroups: -any
  containers: -any
  product-profunctors: ! '>=0.6'
  dotenv: ! '>=0.3.1'
  contravariant: -any
  postgresql-simple: -any
  transformers: -any
  opaleye: -any
  multiset: -any
  QuickCheck: -any
  hspec-discover: -any
  aeson: ! '>=0.6 && <1.3'
  profunctors: -any
maintainer: Purely Agile
synopsis: An SQL-generating DSL targeting PostgreSQL
changelog: ! "## 0.6.1.0\n\n* Added `ZonedTime` to `PGTimestamptz` mappings\n\n* `ArrowChoice`
  instance for `QueryArr`\n\n## 0.6.0.0\n\n* Added `runUpdateEasy`\n\n* Deprecated\n\n
  \ * `Show` instance of `Column a`\n  * `Manipulation.arrange...`\n  * `showPGType`\n
  \ * `literalColumn`\n  * `unsafePgFormatTime`\n  * `prepareQuery`\n  * `formatAndShowSQL`\n\n*
  Removed\n\n  * `unsafeCoerce`\n\n* Added `TableColumn` and `tableColumn` which selects
  `optional` or\n  `required` based on write type.\n\n* Added `TableColumns` as synonym
  for `TableProperties`.\n  `TableProperties` will be deprecated in version 0.7.\n\n*
  Added `table` as synonym for `Table`.  `Table` will be deprecated in\n  version
  0.7.\n\n* Added `tableWithSchema` as synonym for `TableWithSchema`.  `Table`\n  will
  be deprecated in version 0.7.\n\n* Replaced `ColumnMaker` with `Unpackspec`, which
  is identical to it.\n\n* Added `Profunctor` instance for `Table`\n\n* Added `restrictExists`
  and `restrictNotExists` as synonyms for\n  `exists` and `notExists`.  The latter
  will be deprecated in version\n  0.7.\n\n## 0.5.4.0\n\n* Added cursor interface
  (`Cursor` and friends)\n\n## 0.5.3.1\n\n* `distinctAggregator`, `joinNullable`,
  `exists`, `notExists`,\n  `index`, `timestamptzAtTimeZone`\n\n## 0.5.3.0\n\n* Added
  support for range types\n\n## 0.5.2.2\n\n* Corrected fixity for .&&\n\n## 0.5.2.1\n\n*
  Improved documentation\n\n## 0.5.2.0\n\n* Added `Opaleye.FunctionalJoin`\n* Fixed
  handling of `BinExpr OpIn _ (ListExpr _)` in `defaultSqlExpr`.\n* `in_` now actually
  uses the SQL `IN` operator.\n* Added support for `ILIKE`\n\n## 0.5.1.0\n\n* Added\n
  \   * support for JSON operators\n    * Many improvements to the Haddocks\n    *
  RIGHT and FULL OUTER joins\n\n## 0.5.0.0\n\n* Added\n    * `(.===)`, `aggregateOrdered`,
  `countStar`, `countRows`,\n      `quot_`, `rem_`, 'charLength`\n    * intersection
  and except query binary operators\n    * `Constant` instances for `Maybe` and lists\n
  \   * `runInsertManyReturning`\n    * `runQueryFold`\n\n## 0.4.2.0\n\n* Added `.===`
  and `./==` for comparison of product types\n* Added `keepWhen` as an alternative
  to `restrict`\n* Added `constant` conversion to and from Aeson\n* Added `pgValueJSON`
  and `pgValueJSONB`\n\n## 0.4.1.0\n\n* Added `Opaleye.Constant` for lifting constant
  values\n* Support microseconds in `pgLocalTime`, `pgTimeOfDay` and `pgUTCTime`\n*
  Added `unsafeCompositeField` to help with defining composite types\n* `Order` is
  an instance of `Semigroup`\n\nThanks to Adam Bergmark and Matt Wraith for helping
  with these\nchanges.\n\n## 0.4.0.0\n\n* Added `runUpdateReturning`\n* Ordering operators
  and `max` and `min` aggregators are now restricted to a typeclass\n* Added `stringAgg`
  and `arrayAgg` aggregations.\n* Added `PGOrd` typeclass for typesafe ordering operations.\n*
  Support sorting NULLs first or last with `ascNullsFirst` and `descNullsFirst`\n*
  Added JSON types\n* Added `runInsertMany`\n\nThanks to Travis Staton, Jakub RyÅ¡ka
  and Christopher Lewis for\nhelping with these changes.\n\n## 0.3.1.2\n\n* Use time
  >= 1.4 and time-locale-compat\n\n## 0.3.1.1\n\n* Bump time to >= 1.5\n\n## 0.3.1\n\n*
  SQL code generator escapes column names, so table column names can\n  be the same
  as SQL keywords.\n* Add `like` operator\n* Add the types `PGCitext`, `PGArray`,
  `PGBytea`\n\n## 0.3\n\n* Replace `Default QueryRunner` with a new class\n  `DefaultQueryRunnerColumn`,
  migrate with `s/Default\n  QueryRunner/DefaultQueryRunnerColumn` and\n  `s/def/queryRunnerColumnDefault/`\n*
  Remove `ShowConstant`, use the monomorphic functions defined in the\n  new module
  `Opaleye.PGTypes` instead. You will need to replace\n  `Column Bool` with `Column
  PGBool` etc. in query signatures\n* Re-export more modules from `Opaleye`\n* Add
  `boolAnd`, `boolOr,` `max`, and `min` aggregators\n* Add `lower` and `upper`\n*
  Add operator fixities\n* Add `maybeToNullable`\n* Add column instances for `Bool`,
  `UUID`, `Text`, and `UTCTime`\n* Expose fieldQueryRunnerColumn from Opaleye.RunQuery\n*
  Add `unsafeCast`\n* Re-export `Unpackspec` from `Opaleye.Manipulation`\n"
basic-deps:
  void: ! '>=0.4 && <0.8'
  bytestring: ! '>=0.10 && <0.11'
  case-insensitive: ! '>=1.2 && <1.3'
  base: ! '>=4.6 && <5'
  time: ! '>=1.4 && <1.9'
  text: ! '>=0.11 && <1.3'
  uuid: ! '>=1.3 && <1.4'
  semigroups: ! '>=0.13 && <0.19'
  product-profunctors: ! '>=0.6.2 && <0.11'
  contravariant: ! '>=1.2 && <1.5'
  postgresql-simple: ! '>=0.5.3 && <0.6'
  base16-bytestring: ! '>=0.1.1.6 && <0.2'
  transformers: ! '>=0.3 && <0.6'
  pretty: ! '>=1.1.1.0 && <1.2'
  aeson: ! '>=0.6 && <1.4'
  profunctors: ! '>=4.0 && <5.3'
  time-locale-compat: ! '>=0.1 && <0.2'
all-versions:
- '0.2'
- '0.3'
- '0.3.1'
- '0.3.1.2'
- '0.4.0.0'
- '0.4.1.0'
- '0.4.2.0'
- '0.5.0.0'
- '0.5.1.0'
- '0.5.1.1'
- '0.5.2.0'
- '0.5.2.2'
- '0.5.3.0'
- '0.5.3.1'
- '0.5.4.0'
- '0.6.0.0'
- '0.6.1.0'
author: Purely Agile
latest: '0.6.1.0'
description-type: markdown
description: ! "# Brief introduction to Opaleye [![Hackage version](https://img.shields.io/hackage/v/opaleye.svg?label=Hackage)](https://hackage.haskell.org/package/opaleye)
  [![Linux Build Status](https://img.shields.io/travis/tomjaguarpaw/haskell-opaleye/master.svg?label=Linux%20build)](https://travis-ci.org/tomjaguarpaw/haskell-opaleye)\n\nOpaleye
  is a Haskell library that provides an SQL-generating embedded\ndomain specific language
  for targeting Postgres.  You need Opaleye if\nyou want to use Haskell to write typesafe
  and composable code to query\na Postgres database.\n\n> \"Opaleye really is great.
  You've managed to bring what is so\nwonderful about relational databases and give
  it type safety and\ncomposition (i.e. what is wonderful about Haskell)\" &ndash;
  Daniel\nPatterson, [Position Development](http://positiondev.com/)\n\n> \"We use
  it for most of our DB code. It's very flexible and almost\n  always as performant
  as manually written queries\" &ndash; [Adam\n  Bergmark](http://ircbrowse.net/browse/haskell?id=22634197&timestamp=1460980502#t1460980502),\n
  \ [Silk.co](http://www.silk.co/)\n\nOpaleye allows you to define your database tables
  and write queries\nagainst them in Haskell code, and aims to be typesafe in the
  sense\nthat if your code compiles then the generated SQL query will not fail\nat
  runtime.  A wide range of SQL functionality is supported including\ninner and outer
  joins, restriction, aggregation, distinct, sorting and\nlimiting, unions and differences.
  \ Facilities to insert to, update and\ndelete from tables are also provided.  Code
  written using Opaleye is\ncomposable at a very fine level of granularity, promoting
  code reuse\nand high levels of abstraction.\n\n## Getting Opaleye\n\n* Github: https://github.com/tomjaguarpaw/haskell-opaleye\n*
  Hackage: https://hackage.haskell.org/package/opaleye\n\n## Tutorials\n\nPlease get
  started with Opaleye by referring to these two tutorials\n\n* [Basic tutorial](https://github.com/tomjaguarpaw/haskell-opaleye/blob/master/Doc/Tutorial/TutorialBasic.lhs)\n*
  [Manipulation tutorial](https://github.com/tomjaguarpaw/haskell-opaleye/blob/master/Doc/Tutorial/TutorialManipulation.lhs)\n\n#
  Contact\n\n## Contact the author\n\nThe main author of Opaleye is Tom Ellis.  He
  can be [contacted via\nemail](http://web.jaguarpaw.co.uk/~tom/contact/).\n\n## File
  bugs\n\nPlease file bugs on the [Opaleye GitHub issue tracking\npage](https://github.com/tomjaguarpaw/haskell-opaleye/issues/).\n\n##
  Mailing list\n\nPlease join the [opaleye-users mailing\nlist](https://lists.sourceforge.net/lists/listinfo/opaleye-users).\n\n#
  `Internal` modules\n\nOpaleye exports a number of modules named `Opaleye.Internal....`.\nThey
  are provided in case of urgent need for access to the internals,\nbut they are not
  intended to be used by API consumers and if you find\nyourself repeatedly accessing
  them this is a sign that either you or\nOpaleye are doing something wrong.  In such
  a case please file a bug.\n\nThe interface of `Internal` modules does not follow
  the PVP and may\nbreak between minor releases, so be careful.\n\n# Running tests\n\nYou
  must have running PostgreSQL server to run tests. Specify the database\nby setting
  the `POSTGRES_CONNSTRING` environment variable:\n\n```\nPOSTGRES_CONNSTRING=\"user=tom
  dbname=opaleye_test\" stack test\n```\n\n# Commercial support\n\nCommercial support
  for Opaleye is provided by [Purely\nAgile](http://www.purelyagile.com/).\n\n# Backup
  maintainers\n\nIn the event of the main developer becoming unreachable, please\ncontact
  the following who are authorised to make bugfixes and\ndependency version bumps:\n\n*
  Adam Bergmark\n* Erik Hesselink\n* Oliver Charles\n\n# Contributors\n\nThe Opaleye
  Project was founded by Tom Ellis, inspired by theoretical\nwork on databases by
  David Spivak.  Much of the implementation was\nbased on ideas and code from the
  HaskellDB project by Daan Leijen,\nConny Andersson, Martin Andersson, Mary Bergman,
  Victor Blomqvist,\nBjorn Bringert, Anders Hockersten, Torbjorn Martin, Jeremy Shaw
  and\nJustin Bailey.\n\nThe following individuals and organisations made helpful
  contributions\nwhich were important in helping to get the project off the ground.\n\n*
  Silk (Erik Hesselink, Adam Bergmark)\n* Karamaan (Christopher Lewis)\n* Fynder (Renzo
  Carbonara, Oliver Charles)\n* Daniel Patterson\n* Jakub RyÅ¡ka\n* Travis Staton\n\nJoseph
  Abrahamson, Alfredo Di Napoli and Mietek Bak performed useful\nreviews of early
  versions which helped improve the codebase.  Since\nthen there have been helpful
  contributions from many others.  Thanks\nto them all for their help.\n"
license-name: BSD3
