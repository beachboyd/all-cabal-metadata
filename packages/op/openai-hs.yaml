homepage: https://github.com/agrafix/openai-hs#readme
changelog-type: ''
hash: c84be30be33b437974428313957d0eb8a3b501d7a239f38d871adc9e7ba9b817
test-bench-deps:
  http-client: -any
  bytestring: -any
  base: '>=4.7 && <5'
  servant-client: -any
  hspec: -any
  text: -any
  openai-servant: -any
  servant-client-core: -any
  servant: -any
  casing: -any
  containers: -any
  openai-hs: -any
  http-client-tls: -any
  cpphs: -any
  http-types: -any
  aeson: -any
  vector: -any
maintainer: Alexander Thiemann <mail@thiemann.at>
synopsis: Unofficial OpenAI client
changelog: ''
basic-deps:
  http-client: -any
  base: '>=4.7 && <5'
  servant-client: -any
  text: -any
  openai-servant: -any
  servant: -any
  casing: -any
  cpphs: -any
  http-types: -any
  aeson: -any
all-versions:
- 0.1.1.0
author: Alexander Thiemann <mail@thiemann.at>
latest: 0.1.1.0
description-type: markdown
description: |
  # openai-hs

  Unofficial OpenAI SDK/client for Haskell. It's generated via `servant-client` from `openai-servant` with a small amount of hand-written code. Contributions are welcome!

  ## Install

  ``` sh
  # stack
  stack install openai-hs

  # cabal
  cabal install openai-hs
  ```

  ## Example

  ``` haskell
  {-# LANGUAGE OverloadedStrings #-}
  import OpenAI.Client

  import Network.HTTP.Client
  import Network.HTTP.Client.TLS
  import System.Environment (getEnv)
  import qualified Data.Vector as V

  main :: IO ()
  main =
    do manager <- newManager tlsManagerSettings
       apiKey <- T.pack <$> getEnv "OPENAI_KEY"
       -- create a openai client that automatically retries up to 4 times on network
       -- errors
       let client = makeOpenAIClient apiKey manager 4
       result <-
           searchDocuments cli (eId firstEngine) $
           SearchResultCreate
           { sccrDocuments = V.fromList ["pool", "gym", "night club"]
           , sccrQuery = "swimmer"
           }
       print result
  ```

  ## Features

  Supported actions:

  * List engines
  * Retrieve engine
  * Create text completion
  * Run semantic search

  ## Running the tests

  You can run all tests with `stack test`. You'll need an OpenAI API Key assigned to the `OPENAI_KEY` environment variable.
license-name: BSD-3-Clause
