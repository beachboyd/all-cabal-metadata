homepage: https://john-millikin.com/software/haskell-options/
changelog-type: ''
hash: b7221c94791371b87cf397152d9aaffc828b84364867b4393090e3447c5533d0
test-bench-deps:
  base: ! '>=4.0 && <5.0'
  monads-tf: ! '>=0.1'
  chell-quickcheck: ! '>=0.2 && <0.3'
  chell: ! '>=0.4 && <0.5'
  containers: ! '>=0.1'
  transformers: ! '>=0.2'
maintainer: John Millikin <john@john-millikin.com>
synopsis: A powerful and easy-to-use command-line option parser.
changelog: ''
basic-deps:
  base: ! '>=4.1 && <5.0'
  monads-tf: ! '>=0.1'
  containers: ! '>=0.1'
  transformers: ! '>=0.2'
all-versions:
- '0.1'
- 0.1.1
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- 1.2.1.1
author: John Millikin <john@john-millikin.com>
latest: 1.2.1.1
description-type: haddock
description: ! 'The @options@ package lets library and application developers easily
  work

  with command-line options.


  The following example is a full program that can accept two options,

  @--message@ and @--quiet@:


  @

  import Control.Applicative

  import Options


  data MainOptions = MainOptions

  &#x20;   &#x7b; optMessage :: String

  &#x20;   , optQuiet :: Bool

  &#x20;   &#x7d;


  instance ''Options'' MainOptions where

  &#x20;   defineOptions = pure MainOptions

  &#x20;       \<*\> simpleOption \"message\" \"Hello world!\"

  &#x20;           \"A message to show the user.\"

  &#x20;       \<*\> simpleOption \"quiet\" False

  &#x20;           \"Whether to be quiet.\"


  main :: IO ()

  main = runCommand $ \\opts args -> do

  &#x20;   if optQuiet opts

  &#x20;       then return ()

  &#x20;       else putStrLn (optMessage opts)

  @


  >$ ./hello

  >Hello world!

  >$ ./hello --message=''ciao mondo''

  >ciao mondo

  >$ ./hello --quiet

  >$


  In addition, this library will automatically create documentation options

  such as @--help@ and @--help-all@:


  >$ ./hello --help

  >Help Options:

  >  -h, --help

  >    Show option summary.

  >  --help-all

  >    Show all help options.

  >

  >Application Options:

  >  --message :: text

  >    A message to show the user.

  >    default: "Hello world!"

  >  --quiet :: bool

  >    Whether to be quiet.

  >    default: false'
license-name: MIT
