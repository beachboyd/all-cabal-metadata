homepage: https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator#readme
changelog-type: markdown
hash: 0a7154bb4cf2aadb8a944bc34adb9fb510e45937b38acd39b49f5d02c66ce4bd
test-bench-deps:
  http-client: '>=0.6.4 && <0.7'
  bytestring: '>=0.10.10.0 && <0.11'
  split: '>=0.2.3.4 && <0.3'
  base: '>=4.7 && <5'
  time: '>=1.9.3 && <1.10'
  unordered-containers: '>=0.2.10.0 && <0.3'
  hspec: '>=2.7.1 && <2.8'
  text: '>=1.2.4.0 && <1.3'
  genvalidity-hspec: '>=0.7.0.4 && <0.8'
  hashmap: '>=1.3.3 && <1.4'
  containers: '>=0.6.2.1 && <0.7'
  validity-text: '>=0.3.1.1 && <0.4'
  validity: '>=0.9.0.3 && <0.10'
  mtl: '>=2.2.2 && <2.3'
  options: '>=1.2.1.1 && <1.3'
  transformers: '>=0.5.6.2 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  QuickCheck: '>=2.13.2 && <2.14'
  http-conduit: '>=2.3.7.3 && <2.4'
  genvalidity-text: '>=0.7.0.2 && <0.8'
  genvalidity: '>=0.10.0.1 && <0.11'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.6.0 && <1.5'
  template-haskell: '>=2.15.0.0 && <2.16'
  yaml: '>=0.11.2.0 && <0.12'
  vector: '>=0.12.1.2 && <0.13'
  openapi3-code-generator: -any
maintainer: Joel Fisch <joel.fisch96@gmail.com> & Remo Dörig <remo.doerig@gmail.com>
synopsis: OpenAPI3 Haskell Client Code Generator
changelog: |
  # Changelog for openapi3-code-generator

  ## Unreleased changes
basic-deps:
  http-client: '>=0.6.4 && <0.7'
  bytestring: '>=0.10.10.0 && <0.11'
  split: '>=0.2.3.4 && <0.3'
  base: '>=4.7 && <5'
  time: '>=1.9.3 && <1.10'
  unordered-containers: '>=0.2.10.0 && <0.3'
  text: '>=1.2.4.0 && <1.3'
  filepath: '>=1.4.2.1 && <1.5'
  hashmap: '>=1.3.3 && <1.4'
  containers: '>=0.6.2.1 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  options: '>=1.2.1.1 && <1.3'
  transformers: '>=0.5.6.2 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  http-conduit: '>=2.3.7.3 && <2.4'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.6.0 && <1.5'
  template-haskell: '>=2.15.0.0 && <2.16'
  yaml: '>=0.11.2.0 && <0.12'
  vector: '>=0.12.1.2 && <0.13'
  directory: '>=1.3.4.0 && <1.4'
  openapi3-code-generator: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Remo Dörig & Joel Fisch
latest: 0.1.0.2
description-type: markdown
description: |+
  # openapi3-code-generator
  [![CircleCI](https://circleci.com/gh/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.svg?style=svg)](https://circleci.com/gh/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator)

  ## How to use?
  1. install [stack](https://docs.haskellstack.org/en/stable/install_and_upgrade/)
  1. `stack install openapi3-code-generator`
  1. `openapi3-code-generator my_specification.yml`

  An `out` directory is created with the generated code. Hint you can use `--output-dir` to specify another output directory.
  You can use `openapi3-code-generator --help` to list all CLI options.

  ## Example package
  In the folder `example` is a package that uses the generated code from `specifications/petstore.yml`.
  You can run `stack test` inside the `example` directory to run the code, it calls the server "https://petstore.swagger.io/v2" with some sample data.

  https://github.com/Haskell-OpenAPI-Code-Generator/Stripe-Haskell-Library uses this code generator to generate
  a Stripe API client.

  ## Documentation
  The documentation for the code can be found at https://hackage.haskell.org/package/openapi3-code-generator
  This package was created as part of a bachelor thesis. This thesis can be found here TODO.

  ## Large specifications
  For large specifications some modules (CyclicTypes.hs for example) can get pretty big. It may be necessary to use `--fast` with `stack build --fast` to build the code.

  ## Module structure of the generated code.
  All symbols are globally unique and are reexported in the module `OpenAPI` (Module name can be changed with `--module-name`).
  To reduce compile time, the code is split up into multiple modules.
  Mainly for every operation and for every schema.
  Schemas with cyclic dependencies are are in the module `OpenAPI.CyclicTypes`.

  ## Troubleshooting naming conflicts
  Naming conflicts can happen, sometimes a little manual adjustment is needed.
  With the following options naming conflicts can be resolved.

  - `property-type-suffix`
  - `response-type-suffix`
  - `response-body-type-suffix`
  - `request-body-type-suffix`
  - `use-numbered-variant-constructors`
  - `convert-to-camel-case`

license-name: MIT
