homepage: https://github.com/uecmma/haskell-library-collections/tree/master/operate-do
changelog-type: ''
hash: d782934b52dd6caebf4c0dcaa86a592fba71d85c6d0ceca38e623a23e3cdb0dd
test-bench-deps:
  filemanip: -any
  base: -any
  hspec: -any
  operate-do: -any
  doctest: -any
  QuickCheck: -any
maintainer: developer@mma.club.uec.ac.jp
synopsis: Simple project template from stack
changelog: ''
basic-deps:
  base: ! '>=4.7 && <5'
  charset: -any
  haskell-src-meta: ! '>=0.2'
  template-haskell: ! '>=2.11 && <3'
all-versions:
- 0.1.0
author: uecmma
latest: 0.1.0
description-type: markdown
description: ! "# Operate Do\n\nThis packages provides an useful syntax sugar for
  infixing.\n\n## Usage\n\n```haskell\n-- Same as `pure const <*> Just 1 <*> Just
  2 == Just 1`\n[opdo| <*> ->\n  pure const\n  Just 1\n  Just 2\n  |]\n```\n\n## The
  reason why\n\nWhen we make complexible program, we use many brackets:\n\n```haskell\ndataParser
  = ComplexData\n  <$> (takeWhile1 isToken <* char8 ' ')\n  <*> (takeWhile1 (/= 32)
  <* char8 ' ')\n  <*> (some <* endOfLine)\n```\n\n`Operate do` provides non-use brackets
  interface:\n\n```haskell\n-- Or `[opdo| <*> -> { pure ComplexData; ... } |]`\n[opdo|
  <*> ->\n  pure ComplexData\n  takeWhile1 isToken <* char8 ' '\n  takeWhile1 (/=
  32) <* char8 ' '\n  some <* endOfLine\n  |]\n```\n\nOf course, you can free to use
  `$`.  Moreover, this is used as weak `do`:\n\n```haskell\n-- Same `do { putStrLn
  \"Hello\"; putStrLn \"World\" }`\n[opdo| >> ->\n  putStrLn \"Hello\"\n  putStrLn
  \"World\"\n  |]\n```\n\n## Syntax\n\n```text\n<operate do>     ::= [opdo| <opdooperator>
  -> { <opdostatements> <expression> [;] }]\n<opdooperator>   ::= <identifer>\n                   |
  ( <identifer> )\n<opdostatements> ::= <opdostatements> <opdostatement>\n                   |\n<opdostatement>
  \ ::= <expression> ;\n                   | ;\n```\n\nAn example:\n\n```haskell\n[opdo|
  >>> -> { (+ 1); show; head } |] :: Num a => a -> Char\n\n# Same (use section version)\n[opdo|
  (>>>) -> { (+ 1); show; head } |]\n```\n\nAllow multiline statement same as `do`
  notation:\n\n```haskell\n[opdo| >>> ->\n  (+ 1)\n  show\n  head\n|]\n\n# Same (brackets
  multiline)\n[opdo| >>> -> {\n  (+ 1);\n  show;\n  head;\n}|]\n```\n\nThis is not
  supported from some reason:\n\n```haskell\n# This is compile error!\n[opdo| >>>
  -> (+ 1)\n              show\n              head\n|]\n```\n\n## Translation\n\n###
  For operation\n\nTaking associativity into consideration:\n\n```haskell\n[opdo|
  op -> a; b; c |] == a op b op c\n```\n\n### For function\n\nTake left associativity:\n\n```haskell\n[opdo|
  func -> a; b; c |] == a `func` b `func` c\n```\n"
license-name: MIT
