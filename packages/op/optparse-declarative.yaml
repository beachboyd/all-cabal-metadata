homepage: https://github.com/tanakh/optparse-declarative
changelog-type: markdown
hash: 12d6a258b528e66fadf9d040447523b2a4ed376bed5e557a94e8148e9fba8c2b
test-bench-deps: {}
maintainer: tanaka.hideyuki@gmail.com
synopsis: Declarative command line option parser
changelog: ! "# 0.3.0\r\n\r\n- Simplify API\r\n- Support -vv -vvv verbosity\r\n- Improve
  help message\r\n\r\n# 0.2.0\r\n\r\n- Verbosity support\r\n\r\n# 0.1.0\r\n\r\n- First
  release\r\n"
basic-deps:
  base: ! '>=4.7 && <5'
  mtl: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
author: Hideyuki Tanaka
latest: 0.3.0
description-type: markdown
description: ! "# optparse-declarative\n\n`optparse-declarative` is a declarative
  and easy to use command-line option parser.\n\n# Install\n\n```bash\n$ cabal install
  optparse-declarative\n```\n\n# Usage\n\n## Writing a simple command\n\nFirst, you
  need to enable `DataKinds` extension and import `Options.Declarative` module.\n\n```hs\n{-#
  LANGUAGE DataKinds #-}\nimport           Options.Declarative\n```\n\nThen, define
  the command line option as a **type of the function**.\nFor example, this is a simple
  greeting program:\n\n```hs\ngreet :: Flag \"g\" '[\"greet\"] \"STRING\" \"greeting
  message\" (Def \"Hello\" String)\n      -> Arg \"NAME\" String\n      -> Cmd \"Greeting
  command\" ()\ngreet msg name =\n    liftIO $ putStrLn $ get msg ++ \", \" ++ get
  name ++ \"!\"\n```\n\nThere are two type of options, `Flag` and `Arg`.\n`Flag` is
  named argument and `Arg` is unnamed argument.\nLast argument of both options is
  value type.\nIf you need to specify default value, use the modifiers such as `Def`.\n\nIn
  above, variable `msg` has a very complex type (`Flag \"g\" '[\"greet\"] \"STRING\"
  \"greeting message\" (Def \"Hello\" String)`).\nIn order to get the value of usual
  type (in this case, that is `String`),\nyou can use `get` function.\n\nThe whole
  type of command is `Cmd`.\n`Cmd` is an instance of `MonadIO` and it has some extra
  information.\n\nAfter defining a command, you just invoke it by `run_`.\n\n```hs\nmain
  :: IO ()\nmain = run_ greet\n```\n\nYou can execute this program like this:\n\n```bash\n$
  ghc simple.hs\n\n$ ./simple\nsimple: not enough arguments\nTry 'simple --help' for
  more information.\n\n$ ./simple --help\nUsage: simple [OPTION...] NAME\nOptions:\n
  \ -g STRING  --greet=STRING  greeting message\n  -?         --help          display
  this help and exit\n\n$ ./simple World\nHello, World!\n\n$ ./simple --greet=Goodbye
  World\nGoodbye, World!\n```\n\n## Writing multiple sum-commands\n\nYou can write
  (nested) sub-commands.\n\nJust groupe subcommands by `Group`, you got sub-command
  parser.\n\nThis is the example:\n\n```hs\n{-# LANGUAGE DataKinds #-}\n\nimport           Options.Declarative\n\nmain
  :: IO ()\nmain = run_ $\n    Group \"Test program for library\"\n    [ subCmd \"greet\"
  \  greet\n    , subCmd \"connect\" connect\n    ]\n\ngreet :: Flag \"g\" '[\"greet\"]
  \"STRING\" \"greeting message\" (Def \"Hello\" String)\n      -> Flag \"\" '[\"decolate\"]
  \"\" \"decolate message\" Bool\n      -> Arg \"NAME\" String\n      -> Cmd \"Greeting
  command\" ()\ngreet msg deco name = do\n    let f x | get deco = \"*** \" ++ x ++
  \" ***\"\n            | otherwise = x\n    liftIO $ putStrLn $ f $ get msg ++ \",
  \" ++ get name ++ \"!\"\n\nconnect :: Flag \"h\" '[\"host\"] \"HOST\" \"host name\"
  \  (Def \"localhost\" String)\n        -> Flag \"p\" '[\"port\"] \"PORT\" \"port
  number\" (Def \"8080\"      Int   )\n        -> Cmd \"Connect command\" ()\nconnect
  host port = do\n    let addr = get host ++ \":\" ++ show (get port)\n    liftIO
  $ putStrLn $ \"connect to \" ++ addr\n```\n\nAnd this is the output:\n\n```bash\n$
  ./subcmd --help\nUsage: subcmd [OPTION...] <COMMAND> [ARGS...]\nOptions:\n  -?  --help
  \ display this help and exit\n\nCommands:\n  greet       Greeting command\n  port
  \       Server command\n\n$ ./subcmd connect --port=1234\nconnect to localhost:1234\n```\n\nFor
  more examples, please see `example` directory.\n"
license-name: MIT
