homepage: https://github.com/ChrisPenner/firefly#readme
changelog-type: ''
hash: 976209a39bbf266ddc3719050bfe28a2a3da42629b628e614b7c6c2eac822d84
test-bench-deps: {}
maintainer: christopher.penner@gmail.com
synopsis: A simple HTTP server framework
changelog: ''
basic-deps:
  warp: ! '>=3.2'
  regex-pcre: ! '>=0.94'
  cookie: ! '>=0.4.2'
  bytestring: ! '>=0.10'
  wai: ! '>=3.2'
  case-insensitive: ! '>=1.2'
  base: ! '>=4.7 && <5'
  text: ! '>=1.2'
  containers: ! '>=0.5'
  mtl: ! '>=2.2'
  blaze-html: ! '>=0.9'
  transformers: ! '>=0.5'
  http-types: ! '>=0.9'
  aeson: ! '>=1.1'
all-versions:
- '0.1.0.0'
- '0.1.0.1'
- '0.1.1.0'
- '0.2.0.0'
author: Chris Penner
latest: '0.2.0.0'
description-type: markdown
description: ! "# Firefly\n[![Build Status](https://travis-ci.org/ChrisPenner/Firefly.svg?branch=master)](https://travis-ci.org/ChrisPenner/Firefly)\n\n-
  [Example App](./firefly-example/app/Main.hs)\n- [Hackage Docs](http://hackage.haskell.org/package/firefly-0.1.0.0/docs/Web-Firefly.html)\n\nFirefly
  is dead simple http framework written in Haskell.\n\nIt strives for simplicity in
  implementation (and in use).\nIt's great for people learning Haskell, fiddling with
  Monads,\nor who just need a really simple server for something.\n\nHere's a simple
  app:\n\n```haskell\n{-# language OverloadedStrings #-}\nimport Web.Firefly\nimport
  qualified Data.Text as T\n\nmain :: IO ()\nmain = run 3000 app\n\napp :: App ()\napp
  = do\n  route \"/hello\" helloHandler\n\n-- | Get the 'name' query param from the
  url, if it doesn't exist use 'Stranger'\nhelloHandler :: Handler T.Text\nhelloHandler
  = do\n  name <- fromMaybe \"Stranger\" <$> getQuery \"name\"\n  return $ \"Hello
  \" `T.append` name\n\n```\n\nJust that easy!\n\nCheck out the [Example App](./firefly-example/app/Main.hs)
  for more!\n\nSpecify your routes using regex patterns, the first one which matches
  will run.\n\n`Handler` is a monad with access to the incoming request. You can access
  parts\nof it using helpers, then return a response.\n\nHere are some valid response
  types and their inferred Content-Type\n\n- `Data.Text.Text`: `text/plain` \n- `Data.Aeson.Value`:
  `application/json` \n- `Blaze.Html.Html`: `text/html`\n\nThere are more in `Web.Firefly.Response`.\n\nYou
  can specify your status code using `(body, Status)` where body is any of\nthe above
  types and Status is an Integer status code.\n\nOr, add headers too with `(body,
  Status, HeaderMap)` where `HeaderMap` is a map\nof names to values.\n\n## Examples\n\nLet's
  write some more interesting handlers:\n\nHere's an example of responding with JSON:\n\n```haskell\nimport
  Data.Aeson (ToJSON, FromJSON)\nimport GHC.Generics (Generic)\nimport qualified Data.Text
  as T\nimport qualified Network.Wai as W\nimport Web.Firefly\n\ndata User = User\n
  \ { username::T.Text\n  , age::Int\n  } deriving (Generic, ToJSON, FromJSON) --
  Derive JSON instances\n\n-- A reguler 'ol user\nsteve :: User\nsteve = User{username=\"Steve\",
  age=26}\n\n-- | Get a user by username\ngetUser :: App W.Response\ngetUser = do\n
  \ uname <- getQuery \"username\"\n  return $ case uname of\n             -- The
  Json constructor signals to serialize the value and respond as \"application/json\"\n
  \            Just \"steve\" -> toResponse $ Json steve \n             -- We can
  use a tuple to pass a status alongside the response body\n             Just name
  -> toResponse (\"Couldn't find user: \" `mappend` name, notFound404)\n             Nothing
  -> toResponse (\"Please provide a 'username' parameter\" :: T.Text, badRequest400)\n```\n\n##
  Should I/Shouldn't I use Firefly?\n\nYou should use Firefly if:\n\n- You're intimidated
  by monads and want to learn more!\n- You want to write a hobby project\n- You like
  understanding the stack you're working with (The whole lib is ~300 lines without
  docs/imports)\n\nDon't use Firefly if:\n\n- You'll have thousands of users\n- You
  want the most performant server possible\n- You want to have lots of helper libs
  available\n\n## Troubleshooting\n\n### pcre.h not found\n\nSeeing something like
  this?\n```\n...stack/regex-pcre-0.94.4/Wrap.hsc:148:10: fatal error: 'pcre.h' file
  not found\n    #include <pcre.h>\n             ^~~~~~~~\n    1 error generated.\n```\n\nFirefly
  uses regex; and requires certain c-libs to be installed. The easiest way to fix
  this is to install Nix:\n\n[Get Nix](https://nixos.org/nix/)\n\n*or* run:\n\n`curl
  https://nixos.org/nix/install | sh`\n\nThen add the following to your project's
  `stack.yaml`:\n\n```\nnix:\n  enable: true\n  packages:\n    - libcxx\n    - icu\n
  \   - gcc\n    - ncurses\n    - pcre\n    - zlib\n```\n"
license-name: BSD3
