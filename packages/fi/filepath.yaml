homepage: https://github.com/haskell/filepath#readme
changelog-type: markdown
hash: 397c08e88361563bd29168b8f85d58782d6e0e5eba2374fe246fd0cf5dfde34c
test-bench-deps:
  base: -any
  filepath: -any
  QuickCheck: ! '>=2.7 && <2.12'
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Library for manipulating FilePaths in a cross platform way.
changelog: ! "# Changelog for [`filepath` package](http://hackage.haskell.org/package/filepath)\n\n_Note:
  below all `FilePath` values are unquoted, so `\\\\` really means two backslashes._\n\n##
  1.4.2 *Jan 2018*\n\n * Bundled with GHC 8.4.1\n\n * Add `isExtensionOf` function.\n\n##
  1.4.1.2  *Feb 2017*\n\n * Bundled with GHC 8.2.1\n\n## 1.4.1.1  *Nov 2016*\n\n *
  Bundled with GHC 8.0.2\n\n * Documentation improvements\n\n## 1.4.1.0  *Dec 2015*\n\n
  * Bundled with GHC 8.0.1\n\n * Add `replaceExtensions` and `stripExtension` functions.\n\n
  * Make `isValid` detect more invalid Windows paths, e.g. `nul .txt` and `foo\\nbar`.\n\n
  * Improve the documentation.\n\n * Bug fix: `isValid \"\\0\"` now returns `False`,
  instead of `True`\n\n## 1.4.0.0  *Mar 2015*\n\n  * Bundled with GHC 7.10.1\n\n  *
  New function: Add `-<.>` as an alias for `replaceExtension`.\n\n  * Semantic change:
  `joinDrive /foo bar` now returns `/foo/bar`, instead of `/foobar`\n\n  * Semantic
  change: on Windows, `splitSearchPath File1;\\\"File 2\\\"` now returns `[File1,File2]`
  instead of `[File1,\\\"File2\\\"]`\n\n  * Bug fix: on Posix systems, `normalise
  //home` now returns `/home`, instead of `//home`\n\n  * Bug fix: `normalise /./`
  now returns `/` on Posix and `\\` on Windows, instead of `//` and `\\\\`\n\n  *
  Bug fix: `isDrive \"\"` now returns `False`, instead of `True`\n\n  * Bug fix: on
  Windows, `dropTrailingPathSeparator /` now returns `/` unchanged, instead of the
  normalised `\\`\n\n  * Bug fix: on Windows, `equalFilePath C:\\ C:` now returns
  `False`, instead of `True`\n\n  * Bug fix: on Windows, `isValid \\\\\\foo` now returns
  `False`, instead of `True`\n\n  * Bug fix: on Windows, `isValid \\\\?\\D:file` now
  returns `False`, instead of `True`\n\n  * Bug fix: on Windows, `normalise \\` now
  returns `\\` unchanged, instead of `\\\\`\n\n  * Bug fix: on Windows, `normalise
  C:.\\` now returns `C:`, instead of `C:\\\\`\n\n  * Bug fix: on Windows, `normalise
  //server/test` now returns `\\\\server\\test`, instead of `//server/test` unchanged\n\n
  \ * Bug fix: on Windows, `makeRelative / //` now returns `//`, instead of `\"\"`\n\n##
  1.3.0.2  *Mar 2014*\n\n  * Bundled with GHC 7.8.1\n\n  * Update to Cabal 1.10 format\n\n
  \ * Minor Haddock cleanups\n\n## 1.3.0.1  *Sep 2012*\n\n  * Bundled with GHC 7.6.1\n\n
  \ * No changes\n\n## 1.3.0.0  *Feb 2012*\n\n  * Bundled with GHC 7.4.1\n\n  * Add
  support for SafeHaskell\n\n  * Bug fix: `normalise /` now returns `/`, instead of
  `/.`\n"
basic-deps:
  base: ! '>=4 && <4.12'
all-versions:
- '1.0'
- '1.1.0.0'
- '1.1.0.1'
- '1.1.0.2'
- '1.1.0.3'
- '1.1.0.4'
- '1.2.0.0'
- '1.2.0.1'
- '1.3.0.0'
- '1.3.0.1'
- '1.3.0.2'
- '1.4.0.0'
- '1.4.1.0'
- '1.4.1.1'
- '1.4.1.2'
- '1.4.2'
author: Neil Mitchell <ndmitchell@gmail.com>
latest: '1.4.2'
description-type: markdown
description: ! '# FilePath [![Hackage version](https://img.shields.io/hackage/v/filepath.svg?label=Hackage)](https://hackage.haskell.org/package/filepath)
  [![Linux Build Status](https://img.shields.io/travis/haskell/filepath.svg?label=Linux%20build)](https://travis-ci.org/haskell/filepath)
  [![Windows Build Status](https://img.shields.io/appveyor/ci/ndmitchell/filepath.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/filepath)


  The `filepath` package provides functionality for manipulating `FilePath` values,
  and is shipped with both [GHC](https://www.haskell.org/ghc/) and the [Haskell Platform](https://www.haskell.org/platform/).
  It provides three modules:


  * [`System.FilePath.Posix`](http://hackage.haskell.org/package/filepath/docs/System-FilePath-Posix.html)
  manipulates POSIX/Linux style `FilePath` values (with `/` as the path separator).

  * [`System.FilePath.Windows`](http://hackage.haskell.org/package/filepath/docs/System-FilePath-Windows.html)
  manipulates Windows style `FilePath` values (with either `\` or `/` as the path
  separator, and deals with drives).

  * [`System.FilePath`](http://hackage.haskell.org/package/filepath/docs/System-FilePath.html)
  is an alias for the module appropriate to your platform.


  All three modules provide the same API, and the same documentation (calling out
  differences in the different variants).


  ### Should `FilePath` be an abstract data type?


  The answer for this library is "no". While an abstract `FilePath` has some advantages
  (mostly type safety), it also has some disadvantages:


  * In Haskell the definition is `type FilePath = String`, and all file-oriented functions
  operate on this type alias, e.g. `readFile`/`writeFile`. Any abstract type would
  require wrappers for these functions or lots of casts between `String` and the abstraction.

  * It is not immediately obvious what a `FilePath` is, and what is just a pure `String`.
  For example, `/path/file.ext` is a `FilePath`. Is `/`? `/path`? `path`? `file.ext`?
  `.ext`? `file`?

  * Often it is useful to represent invalid files, e.g. `/foo/*.txt` probably isn''t
  an actual file, but a glob pattern. Other programs use `foo//bar` for globs, which
  is definitely not a file, but might want to be stored as a `FilePath`.

  * Some programs use syntactic non-semantic details of the `FilePath` to change their
  behaviour. For example, `foo`, `foo/` and `foo/.` are all similar, and refer to
  the same location on disk, but may behave differently when passed to command-line
  tools.

  * A useful step to introducing an abstract `FilePath` is to reduce the amount of
  manipulating `FilePath` values like lists. This library hopes to help in that effort.


  ### Developer notes


  Most of the code is in `System/FilePath/Internal.hs` which is `#include`''d into
  both `System/FilePath/Posix.hs` and `System/FilePath/Windows.hs` with the `IS_WINDOWS`
  CPP define set to either `True` or `False`. This Internal module is a bit weird
  in that it isn''t really a Haskell module, but is more an include file.


  The library has extensive doc tests. Anything starting with `-- >` is transformed
  into a doc test as a predicate that must evaluate to `True`. These tests follow
  a few rules:


  * Tests prefixed with `Windows:` or `Posix:` are only tested against that specific
  implementation - otherwise tests are run against both implementations.

  * Any single letter variable, e.g. `x`, is considered universal quantification,
  and is checked with `QuickCheck`.

  * If `Valid x =>` appears at the start of a doc test, that means the property will
  only be tested with `x` passing the `isValid` predicate.


  The tests can be generated by `Generate.hs` in the root of the repo, and will be
  placed in `tests/TestGen.hs`. The `TestGen.hs` file is checked into the repo, and
  the CI scripts check that `TestGen.hs` is in sync with what would be generated a
  fresh - if you don''t regenerate `TestGen.hs` the CI will fail.


  The `.ghci` file is set up to allow you to type `ghci` to open the library, then
  `:go` will regenerate the tests and run them.

'
license-name: BSD3
