homepage: https://notabug.org/koz.ross/finitary
changelog-type: markdown
hash: ef841503d6692c5ac58895ccec5e31c3aa1de9de8d427b4f1d4cf6c791c517b9
test-bench-deps:
  bitvec: -any
  base: -any
  vector-sized: -any
  monad-loops: ! '>=0.4.3 && <0.5.0'
  hedgehog: ! '>=1.0.1 && <1.2'
  finitary: -any
  finite-typelits: -any
maintainer: koz.ross@retro-freedom.nz
synopsis: A better, more type-safe Enum.
changelog: |
  # Revision history for finitary

  ## 1.1.0.1 -- 2019-09-21

  * Fix bug tracker link in Cabal file (no code changes).

  ## 1.1.0.0 -- 2019-09-21

  * Repair a disagreement between ``Ord`` and ``Finitary`` derivations via
    ``Generic`` (thanks jle`!).
  * Fix serious bug with ``next`` and ``previous``.

  ## 1.0.0.1 -- 2019-09-17

  * Fix README (no code changes).

  ## 1.0.0.0 -- 2019-09-17

  * Rewritten documentation to be more clear, and state more laws.
  * Added ``nextSkipping`` and ``previousSkipping`` methods to allow 'skipping
    over' some elements when enumerating in a more efficient manner.
  * Added ``Eq a`` as a constraint for ``Finitary a`` instances (as without it,
    the laws don't make much sense).
  * Fixed numerous typoes and unclear statements.
  * Stated that ``Finitary`` must be order-preserving relative any instances with
    ``Ord`` instances; existing instances modified to follow this law.
  * Added more tests.
  * Fixed odd issue with some element cardinalities and lengths for sized
    ``Vector`` instances.
  * Tightened bounds to be more conservative.
  * Support GHC 8.8.

  ## 0.1.0.0 -- 2019-09-10

  * First version. Released on an unsuspecting world.
basic-deps:
  bitvec: ! '>=1.0.0.1 && <1.2.0.0'
  base: ! '>=4.11 && <4.14'
  vector-sized: ! '>=1.4.0.0 && <1.5.0.0'
  typelits-witnesses: ! '>=0.4.0.0 && <0.5.0.0'
  ghc-typelits-knownnat: ! '>=0.7 && <0.8'
  ghc-typelits-natnormalise: ! '>=0.7 && <0.8'
  mtl: ! '>=2.2.2 && <2.3.0'
  coercible-utils: ! '>=0.0.0 && <1.0.0'
  finite-typelits: ! '>=0.1.4.2 && <0.2.0.0'
  template-haskell: ! '>=2.13.0.0 && <2.16.0.0'
  primitive: ! '>=0.6.4.0 && <0.8.0.0'
  vector: ! '>=0.12.0.3 && <0.13.0.0'
all-versions:
- 1.1.0.0
- 1.1.0.1
author: Koz Ross
latest: 1.1.0.1
description-type: markdown
description: "# ``finitary``\n\n## What's all this about?\n\n``finitary`` allows us
  to specify that a type is _finite_ (that is, contains\nfinitely many inhabitants
  which are not ``_|_``), and have confirmation of this\nfact by GHC. Additionally,
  it offers a ``Generics``-based auto-derivation\ninterface for this, as well as multiple
  helper functions that are enabled by all\nthis machinery.\n\n### Why is this a big
  deal?\n\nConsider ``Enum``. It's not difficult to see that ``Enum`` has issues:\n\n####
  It's partial all over the place\n\nWhat will this code do?\n\n```haskell\ntoEnum
  3 :: Bool\n```\n\nThe answer is 'a runtime error'. How about this?\n\n```haskell\nsucc
  True\n```\n\nThe answer, again, is 'a runtime error'. Many of the methods provided
  by ``Enum``\nare partial like this, because many types that happen to be ``Enum``
  instances\nhave cardinalities (much) smaller than ``Int``, which necessitates leaving
  some\n``Int`` values 'out'.\n\nThe converse is not much better: on some platforms,
  ``Int`` has _smaller_\ncardinality than some types with ``Enum`` instances in ``base``.
  For example, on \na platform where ``Int`` is 32 bits wide, the ``Word64`` instance
  will definitely \ncause problems, as it's 'too big'.\n\n#### It gives us almost
  no information\n\nAn ``Enum`` instance says that a type can be munged to and from
  an ``Int``...\nsomehow. While ``base`` and the Haskell Report certainly provide
  some limits \non its behaviour, a lot of questions remain unanswered, including:\n\n*
  What is the cardinality of this type?\n* What are the 'safe' values of ``Int`` I
  can feed to ``toEnum``?\n* For any ``x``, is ``toEnum . (+ 1) . fromEnum $ x`` safe
  (in that it'll give\n  us a value instead of blowing up)?\n\n#### We don't have
  a (default) way to auto-derive it\n\nQuoting ``base``:\n\n> Instances of ``Enum``
  may be derived for any enumeration type (types whose\n> constructors have no fields).\n\nBut
  what if your type has fields, especially when they're instances of ``Enum``? \nUnfortunately,
  no auto-derivation for you. While this stance makes some sense, \nit's still rather
  inconvenient.\n\n## OK, so what are you offering instead?\n\nThe core of ``finitary``
  is the ``Finitary`` type class. If we have an instance\nof ``Finitary`` for some
  type ``a``, we have a witness to an isomorphism between\n``a`` and some ``(KnownNat
  n) => Finite n``. More precisely, we (together with GHC)\nknow:\n\n* That ``a``
  has finitely-many non-``_|_`` inhabitants\n* The value of ``n``, which is the _cardinality_
  of ``a`` (how many inhabitants we have exactly)\n* Two functions to 'witness' the
  isomorphism, namely ``fromFinite :: Finite n ->\n  a`` and ``toFinite :: a -> Finite
  n``\n\n### How does ``Finitary`` solve the issues behind ``Enum``?\n\n#### Everything
  is total, forever\n\nThere is no way to call ``fromFinite`` or ``toFinite`` with
  an 'inappropriate'\nargument. We always know - if you give me a ``Finite n``, I
  will give you back a\n(unique) ``a``, guaranteed.\n\n#### We learn a lot from a
  type having a ``Finitary`` instance\n\nAside from cardinality, we also inherently
  get the ability to:\n\n* Have a 'starting' and 'ending' value\n* Get the 'next'
  or 'previous' value, or report that it doesn't exist\n* Enumerate ranges of these
  values\n\nAll of this is safe, total and can be relied upon. Check out the documentation\nfor
  more details - all of this functionality is provided.\n\n#### But what about auto-derivation?\n\nWe
  have you covered. If you want to auto-derive an instance of\n``Finitary`` for your
  type, you absolutely can, using the power of\n``GHC.Generics``:\n\n```haskell\n{-#
  LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeInType
  #-}\n\nimport GHC.Generics\nimport GHC.TypeNats\nimport Data.Word\n\nimport qualified
  Data.Vector.Sized as VS\n\ndata Foo = Bar | Baz (Word8, Word8) | Quux (VS.Vector
  4 Bool)\n  deriving (Eq, Generic, Finitary) \n```\n\nFurthermore, GHC will even
  calculate the cardinality for you. To assist in this,\nwe have provided as many
  instances of ``Finitary`` for 'base' types as possible - \nsee the documentation
  for full details.\n\n### That all seems rather cool - what else can I do with this?\n\nKnowing
  that a type has finite cardinality is usable for many things - all of\nwhich we
  plan to provide. Some examples (with links once we have working, tested\ncode) include:\n\n*
  [Automatic derivation of instances][1]\n* Type-safe refinement\n* Random generation
  and stream sampling\n* Efficient sets, allowing operations like complements and
  a ``Monoid`` under\n  intersection\n* Efficient maps\n* Various clever ``lens``
  tricks\n\nIf there's something else interesting you think can be done with this,
  let us\nknow: it might make it onto this list, and into code.\n\n## What will this
  work on?\n\nCurrently, we have tested ``finitary`` (meaning 'run tests, not just
  compiled')\non GHC 8.4.4, GHC 8.6.5 and GHC 8.8.1. If you would like any additional
  versions \nsupported, please let us know.\n\nSo far, the tests have all been on
  x86_64 GNU/Linux. If you have results on\nother platforms or architectures, please
  let us know too!\n\n## License\n\nThis library is under the GNU General Public License,
  version 3 or later (SPDX\ncode ``GPL-3.0-or-later``). For more details, see the
  ``LICENSE.md`` file.\n\n[1]: https://notabug.org/koz.ross/finitary-derive\n"
license-name: GPL-3.0-or-later
