homepage: ''
changelog-type: text
hash: 9650e0b7a3e2b8c6e16025b7ad0e2c5231586cb04eb08cad72412e46b45b9291
test-bench-deps:
  bytestring: -any
  base: -any
  filepath: ==1.4.2.1
  QuickCheck: ! '>=2.7 && <2.14'
  filepath-bytestring: -any
maintainer: Joey Hess <id@joeyh.name>
synopsis: Library for manipulating RawFilePaths in a cross platform way.
changelog: |
  filepath-bytestring (1.4.2.1.1) unstable; urgency=medium

    * When running on Windows, RawFilePath is assumed to be encoded with
      UTF-8, rather than the windows default of UTF-16. This lets the user
      use OverloadedStrings for RawFilePaths embedded in their code.
    * Added two conversion functions, encodeFilePath and decodeFilePath.
    * Added normalise.
    * Optimise with -O2, a benchmark shows that improves the speed
      of </> by around 7%.
    * Inline </>, which speeds it up by around 3%.

   -- Joey Hess <id@joeyh.name>  Wed, 18 Dec 2019 13:42:16 -0400

  filepath-bytestring (1.4.2.1.0) unstable; urgency=medium

    * Initial release, based on filepath 1.4.2.1.

   -- Joey Hess <id@joeyh.name>  Tue, 10 Dec 2019 15:21:14 -0400
basic-deps:
  bytestring: -any
  unix: -any
  base: ! '>=4 && <4.15'
all-versions:
- 1.4.2.1.0
- 1.4.2.1.1
author: Neil Mitchell <ndmitchell@gmail.com>
latest: 1.4.2.1.1
description-type: markdown
description: |
  # FilePath [![Hackage version](https://img.shields.io/hackage/v/filepath.svg?label=Hackage)](https://hackage.haskell.org/package/filepath) [![Linux build status](https://img.shields.io/travis/haskell/filepath/master.svg?label=Linux%20build)](https://travis-ci.org/haskell/filepath) [![Windows build status](https://img.shields.io/appveyor/ci/ndmitchell/filepath/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/filepath)

  The `filepath-bytestring` package provides functionality for manipulating `RawFilePath` values (`ByteString`s).
  Its interface is equivilant to the `filepath` package.
  It provides three modules:

  * [`System.FilePath.Posix.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-Posix-ByteString.html) manipulates POSIX/Linux style `RawFilePath` values (with `/` as the path separator).
  * [`System.FilePath.Windows.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-Windows-ByteString.html) manipulates Windows style `RawFilePath` values (with either `\` or `/` as the path separator, and deals with drives).
  * [`System.FilePath.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-ByteString.html) is an alias for the module appropriate to your platform.

  All three modules provide the same API, and the same documentation (calling out differences in the different variants).

  ### Developer notes

  This package's version should be the same as the `filepath` it's derived
  from, with an added revision number.

  Most of the code is in `System/FilePath/Internal.hs` which is `#include`'d into both `System/FilePath/Posix.hs` and `System/FilePath/Windows.hs` with the `IS_WINDOWS` CPP define set to either `True` or `False`. This Internal module is a bit weird in that it isn't really a Haskell module, but is more an include file.

  The library has extensive doc tests. Anything starting with `-- >` is transformed into a doc test as a predicate that must evaluate to `True`. These tests follow a few rules:

  * Tests prefixed with `Windows:` or `Posix:` are only tested against that specific implementation - otherwise tests are run against both implementations.
  * Any single letter variable, e.g. `x`, is considered universal quantification, and is checked with `QuickCheck`.
  * If `Valid x =>` appears at the start of a doc test, that means the property will only be tested with `x` passing the `isValid` predicate.

  Also, all exported functions are quickchecked against the ones from
  `filepath` to make sure thay generate equivilant results.

  The tests can be generated by `Generate.hs` in the root of the repo, and will be placed in `tests/TestGen.hs`. The `TestGen.hs` file is checked into the repo, and the CI scripts check that `TestGen.hs` is in sync with what would be generated a fresh - if you don't regenerate `TestGen.hs` the CI will fail.

  The `.ghci` file is set up to allow you to type `ghci` to open the library, then `:go` will regenerate the tests and run them.
license-name: BSD-3-Clause
