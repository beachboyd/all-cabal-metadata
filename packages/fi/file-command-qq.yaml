homepage: https://github.com/jfischoff/file-command-qq
changelog-type: ''
hash: 890e0b9368dbc6f3eb502956a9b5979ee9920e7fc7906879757fa774f2ac4786
test-bench-deps: {}
maintainer: jonathangfischoff@gmail.com
synopsis: Quasiquoter for system commands involving filepaths
changelog: ''
basic-deps:
  base: ! '>=4.7 && <4.8'
  text: ! '>=1.1 && <1.3'
  process: ! '>=1.2 && <1.3'
  parsec: ! '>=3.1 && <3.2'
  system-filepath: ! '>=0.4 && <0.5'
  template-haskell: ! '>=2.9 && <2.10'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
author: Jonathan Fischoff
latest: 0.1.0.5
description-type: markdown
description: ! "file-command-qq is a simple quasiquoter for running system commands
  that take a filepath as an argument.\n\nFor instance\n\n```\n> :set -XOverloadedStrings\n>
  import FileCommand\n> import Filesystem.Path\n> [s|echo $filename|] \"/home/test/thing.txt\"\n```\n\nwill
  return\n\n```\nthing.txt\nExitSuccess\n```\n\nYou can think of `[s|echo $filename|]`
  essentially converts into\n\n```haskell\n\\path -> system $ \"echo\" ++ encodeString
  (filename path)\n```\n\nAll \"file parts\" start with a '$'. The '$' can be escaped
  by preceding it with a '\\'\n\nThere are the following options for \"file parts\"
  \n\n\n* $path\n* $root\n* $directory\n* $parent\n* $filename\n* $dirname\n* $basename\n*
  $ext\n\nWhich correspond to the respective functions in https://hackage.haskell.org/package/system-filepath-0.4.6/docs/Filesystem-Path.html#g:1\n"
license-name: MIT
