homepage: https://notabug.org/koz.ross/finitary-derive
changelog-type: markdown
hash: 6b918f0a0d6222d9883179c3c8f69926e8fc33a27398d7ca0ce19208dc1e5ead
test-bench-deps:
  base: ! '>=4.12 && <4.14'
  monad-loops: ! '>=0.4.3 && <0.5.0'
  hedgehog: ! '>=1.0.1 && <1.1'
  finitary-derive: -any
  finitary: -any
  finite-typelits: -any
  hedgehog-classes: ! '>=0.2.4 && <0.3.0'
maintainer: koz.ross@retro-freedom.nz
synopsis: |-
  Easy and efficient Unbox, Storable, Binary and Hashable
  instances for Finitary types.
changelog: |
  # Revision history for finitary-derive

  ## 1.0.0.1 -- 2019-09-21

  * Fix documentation.
  * Raise bounds on ``finitary`` to avoid critical bugs.
  * Raise bounds on ``base`` for test (for honesty reasons).

  ## 1.0.0.0 -- 2019-09-17

  * First version. Released on an unsuspecting world.
basic-deps:
  base: ! '>=4.11 && <4.14'
  vector-sized: ! '>=1.4.0.0 && <1.5.0.0'
  ghc-typelits-knownnat: ! '>=0.7 && <0.8'
  ghc-typelits-extra: ! '>=0.3.1 && <0.4.0'
  binary: ! '>=0.8.5.1 && <0.9.0.0'
  mtl: ! '>=2.2.2 && <2.3'
  hashable: ! '>=1.3.0.0 && <1.4.0.0'
  coercible-utils: ! '>=0.0.0 && <0.1.0'
  deepseq: ! '>=1.4.3.0 && <1.5.0.0'
  finitary: ! '>=1.1.0.0 && <1.2.0.0'
  finite-typelits: ! '>=0.1.4.2 && <0.2.0.0'
  vector: ! '>=0.12.0.3 && <0.13.0.0'
all-versions:
- 1.0.0.1
author: Koz Ross
latest: 1.0.0.1
description-type: markdown
description: "# ``finitary-derive``\n\n## What's this all about, then?\n\nHave you
  ever written an ``Unbox`` instance for a user-defined type? I hope not,\nbecause
  it's a [uniquely tedious chore][1]. If your type is more complex, this\ncan be difficult,
  fiddly, and frustrating. ``Storable`` is not much better. This\nis the kind of 'work'
  that we as Haskellers ought not to put up with.\n\nNow, you don't have to! As long
  as your type is [``Finitary``][2], you can now\nget ``Unbox`` and ``Storable`` (as
  well as ``Binary`` and ``Hashable``, because \nwe could) instances _almost_ automagically:\n\n```haskell\n{-#
  LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DerivingVia
  #-}\n\nimport Data.Finitary\nimport Data.Finitary.Pack\nimport Data.Word\nimport
  Data.Hashable\n\nimport qualified Data.Vector.Unboxed as VU\n\ndata Foo = Bar |
  Baz (Word8, Word8) | Quux Word16\n  deriving (Eq, Generic, Finitary)\n  deriving
  (Storable, Binary, Hashable) via (Pack Foo)\n\nsomeVector :: VU.Vector (Pack Foo)\nsomeVector
  = VU.fromList . fmap Pack $ [Bar, Baz 0x0 0xf, Quux 0x134]\n```\n\nIf you don't
  have access to ``DerivingVia``, you can still get the benefits of\nthis library
  -- just use ``Pack a`` instead of ``a`` in all cases where you need\nany such instances.
  As it is a ``newtype``, you can ``coerce`` through it if you\ncare about efficiency.\n\n##
  Why can't I automagic up ``Unbox`` too?\n\nThe short answer is 'role restrictions
  on unboxed vectors'. If you want a more\ndetailed explanation, check out the [GHC
  wiki on roles][3], as well as the\n[implementation of ``Data.Vector.Unboxed``][4].
  You might also want to check out\n[stuff about data families][5], as it ties into
  this rather aggravating\nlimitation closely too.\n\n## Sounds good! Can I use it?\n\nCertainly
  - we've tested on GHC 8.4.4, 8.6.5 and 8.8.1, on GNU/Linux only. If\nyou would like
  support for any additional GHC versions, let us know.\nUnfortunately, while the
  library will _build_ on 8.4.4, due to\n``hedgehog-classes`` being limited to 8.6+,
  tests cannot be run on this version.\n\nIf you build and use this library successfully
  on any other platforms, we'd like\nto know too - it'd be beneficial even if nothing
  breaks, and _especially_ if\nsomething does.\n\n## License\n\nThis library is under
  the GNU General Public License, version 3 or later (SPDX\ncode ``GPL-3.0-or-later``).
  For more details, see the ``LICENSE.md`` file.\n\n[1]: http://hackage.haskell.org/package/vector-0.12.0.3/docs/Data-Vector-Unboxed.html\n[2]:
  https://hackage.haskell.org/package/finitary-1.0.0.1/docs/Data-Finitary.html#t:Finitary\n[3]:
  https://gitlab.haskell.org/ghc/ghc/wikis/roles\n[4]: http://hackage.haskell.org/package/vector-0.12.0.3/docs/src/Data.Vector.Unboxed.Base.html\n[5]:
  https://wiki.haskell.org/GHC/Type_families\n"
license-name: GPL-3.0-or-later
