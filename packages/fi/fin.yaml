homepage: https://github.com/phadej/vec
changelog-type: markdown
hash: b0d8681b5233da8d637d760571c31caf1ee8409cafa5f19815908e49442c0aba
test-bench-deps:
  base: -any
  tagged: -any
  inspection-testing: ! '>=0.1.2 && <0.2'
  fin: -any
maintainer: Oleg.Grenrus <oleg.grenrus@iki.fi>
synopsis: ! 'Nat and Fin: peano naturals and finite numbers'
changelog: ! '# Revision history for boring

  ## 0


  - First version. Released on an unsuspecting world.

'
basic-deps:
  base: ! '>=4.7 && <4.11'
  hashable: ! '>=1.2.6.1 && <1.3'
  deepseq: ! '>=1.3.0.2 && <1.5'
all-versions:
- '0'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0'
description-type: haddock
description: ! 'This package provides two simple types, and some tools to work with
  them.

  Also on type level as @DataKinds@.


  @

  data Nat = Z | S Nat

  data Fin (n :: Nat) where

  Z :: Fin n

  S :: Fin n -> Fin (''Nat.S n)

  @


  The "Data.Fin.Enum" module let''s work generically with enumerations.


  Differences to other packages:


  * [type-natural](http://hackage.haskell.org/package/type-natural) depends

  on @singletons@ package. `fin` will try to stay light on the dependencies,

  and support as many GHC versions as practical.


  * [peano](http://hackage.haskell.org/package/peano) is very incomplete


  * [nat](http://hackage.haskell.org/package/nat) as well.


  * [PeanoWitnesses](https://hackage.haskell.org/package/PeanoWitnesses)

  doesn''t use @DataKinds@.


  * [type-combinators](http://hackage.haskell.org/package/type-combinators)

  is big package too.'
license-name: BSD3
