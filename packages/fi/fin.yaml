homepage: https://github.com/phadej/vec
changelog-type: markdown
hash: 849524b9460ea052ee7262fbc20f5f5350b5f6d34368aed3b1c9506064d45d86
test-bench-deps:
  base: -any
  tagged: -any
  inspection-testing: ! '>=0.2.0.1 && <0.5'
  fin: -any
maintainer: Oleg.Grenrus <oleg.grenrus@iki.fi>
synopsis: ! 'Nat and Fin: peano naturals and finite numbers'
changelog: |
  # Revision history for boring

  ## 0.0.2

  - In `Fin` add: `append` and `split`
  - Add `(Enum a, Enum b) => Enum (Either a b)` instance

  ## 0.0.1

  - GHC-8.4.1 / base-4.11 support

  ## 0

  - First version. Released on an unsuspecting world.
basic-deps:
  base: ! '>=4.7 && <4.13'
  bifunctors: ! '>=5.5.3 && <5.6'
  hashable: ! '>=1.2.7.0 && <1.4'
  deepseq: ! '>=1.3.0.2 && <1.5'
all-versions:
- '0'
- 0.0.1
- 0.0.2
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: 0.0.2
description-type: haddock
description: |-
  This package provides two simple types, and some tools to work with them.
  Also on type level as @DataKinds@.

  @
  \-- Peano naturals
  data Nat = Z | S Nat

  \-- Finite naturals
  data Fin (n :: Nat) where
  \    Z :: Fin ('S n)
  \    S :: Fin n -> Fin ('Nat.S n)
  @

  [vec](https://hackage.haskell.org/package/vec) implements length-indexed
  (sized) lists using this package for indexes.

  The "Data.Fin.Enum" module let's work generically with enumerations.

  See [Hasochism: the pleasure and pain of dependently typed haskell programming](https://doi.org/10.1145/2503778.2503786)
  by Sam Lindley and Conor McBride for answers to /how/ and /why/.
  Read [APLicative Programming with Naperian Functors](https://doi.org/10.1007/978-3-662-54434-1_21)
  by Jeremy Gibbons for (not so) different ones.

  === Similar packages

  * [finite-typelits](https://hackage.haskell.org/package/finite-typelits)
  . Is a great package, but uses @GHC.TypeLits@.

  * [type-natural](https://hackage.haskell.org/package/type-natural) depends
  on @singletons@ package. @fin@ will try to stay light on the dependencies,
  and support as many GHC versions as practical.

  * [peano](https://hackage.haskell.org/package/peano) is very incomplete

  * [nat](https://hackage.haskell.org/package/nat) as well.

  * [PeanoWitnesses](https://hackage.haskell.org/package/PeanoWitnesses)
  doesn't use @DataKinds@.

  * [type-combinators](https://hackage.haskell.org/package/type-combinators)
  is big package too.
license-name: BSD-3-Clause
